
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00009f90  0000a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009f90  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cc7  00800144  00800144  0000a0e4  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000a0d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000a6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000a991  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000558  00000000  00000000  0000a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007bca  00000000  00000000  0000af00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001508  00000000  00000000  00012aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b3c  00000000  00000000  00013fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011a4  00000000  00000000  00015b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018b3  00000000  00000000  00016cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006da7  00000000  00000000  00018567  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f8  00000000  00000000  0001f310  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 28 	jmp	0x516e	; 0x516e <__ctors_end>
       4:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
       8:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
       c:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      10:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      14:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      18:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      1c:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      20:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      24:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      28:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      2c:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      30:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      34:	0c 94 f8 2a 	jmp	0x55f0	; 0x55f0 <__vector_13>
      38:	0c 94 38 2b 	jmp	0x5670	; 0x5670 <__vector_14>
      3c:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      40:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      44:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      48:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      4c:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      50:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      54:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      58:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      5c:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      60:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      64:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      68:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      6c:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__bad_interrupt>
      70:	08 46       	sbci	r16, 0x68	; 104
      72:	0d 46       	sbci	r16, 0x6D	; 109
      74:	10 46       	sbci	r17, 0x60	; 96
      76:	13 46       	sbci	r17, 0x63	; 99
      78:	16 46       	sbci	r17, 0x66	; 102
      7a:	19 46       	sbci	r17, 0x69	; 105
      7c:	1c 46       	sbci	r17, 0x6C	; 108
      7e:	1f 46       	sbci	r17, 0x6F	; 111
      80:	22 46       	sbci	r18, 0x62	; 98

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	42 2e 45 2e a0 2e a4 2e ac 2e 4d 2e 52 2e 57 2e     B.E.......M.R.W.
      e0:	b4 2e 5a 2e 5d 2e 60 2e 9d 2e                       ..Z.].`...

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <strLevels>:
      f6:	20 20 4c 65 76 65 6c 20 4f 6e 65 00 20 20 4c 65       Level One.  Le
     106:	76 65 6c 20 54 77 6f 00 4c 65 76 65 6c 20 54 68     vel Two.Level Th
     116:	72 65 65 00 20 4c 65 76 65 6c 20 46 6f 75 72 00     ree. Level Four.
     126:	20 4c 65 76 65 6c 20 46 69 76 65 00 20 20 4c 65      Level Five.  Le
     136:	76 65 6c 20 53 69 78 00 4c 65 76 65 6c 20 53 65     vel Six.Level Se
     146:	76 65 6e 00 4c 65 76 65 6c 20 45 69 67 68 74 00     ven.Level Eight.
     156:	20 4c 65 76 65 6c 20 4e 69 6e 65 00 20 20 4c 65      Level Nine.  Le
     166:	76 65 6c 20 54 65 6e 00                             vel Ten.

0000016e <strPaused>:
     16e:	50 61 75 73 65 64 00                                Paused.

00000175 <strExit>:
     175:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

0000017e <strTotal>:
     17e:	54 6f 74 61 6c 3a 00                                Total:.

00000185 <strScore>:
     185:	53 63 6f 72 65 3a 00                                Score:.

0000018c <strBanterClear>:
     18c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

0000019b <banter_map>:
     19b:	59 6f 75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c     You suck bro  .L
     1ab:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     1bb:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     1cb:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     1db:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     1eb:	2a 20 20 20 20 20 20 20 20 00 41 20 74 75 72 6b     *        .A turk
     1fb:	65 79 20 73 68 6f 6f 74 00 54 68 61 74 27 73 20     ey shoot.That's 
     20b:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     21b:	70 3f 20 20 20 20 00 52 54 46 4d 21 20 20 20 20     p?    .RTFM!    
     22b:	20 20 20 20 20 00                                        .

00000231 <strBy>:
     231:	42 79 00                                            By.

00000234 <strOwns>:
     234:	50 77 6e 73 00                                      Pwns.

00000239 <strChangeHandle>:
     239:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

00000248 <strCancelHandle>:
     248:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

00000253 <strConfirmHandle>:
     253:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

0000025f <strSelectHandle>:
     25f:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

0000026a <strPlayer2>:
     26a:	50 32 00                                            P2.

0000026d <strPlayer1>:
     26d:	50 31 00                                            P1.

00000270 <strVertSep>:
     270:	7c 00                                               |.

00000272 <strUnderline>:
     272:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000027e <strHandlesTitle>:
     27e:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

0000028a <strHighscores>:
     28a:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

00000294 <str2Player>:
     294:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

000002a5 <str1Player>:
     2a5:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

000002b3 <strCopyright>:
     2b3:	32 30 31 34 20 2d 20 4c 61 77 72 65 6e 63 65 20     2014 - Lawrence 
     2c3:	42 72 6f 6f 6b 73 00                                Brooks.

000002ca <my_patches>:
     2ca:	02 ac 21 00 00 ff ff 00 00 02 ab 21 00 00 ff ff     ..!........!....
     2da:	00 00 02 aa 21 00 00 ff ff 00 00 02 a9 21 00 00     ....!........!..
     2ea:	ff ff 00 00 02 a8 21 00 00 ff ff 00 00 02 a7 21     ......!........!
     2fa:	00 00 ff ff 00 00 02 a6 21 00 00 ff ff 00 00 02     ........!.......
     30a:	a5 21 00 00 ff ff 00 00 02 a4 21 00 00 ff ff 00     .!........!.....
     31a:	00 02 a3 21 00 00 ff ff 00 00 02 a2 21 00 00 ff     ...!........!...
     32a:	ff 00 00 02 a1 21 00 00 ff ff 00 00 02 a0 21 00     .....!........!.
     33a:	00 00 00 00 00                                      .....

0000033f <level_data>:
     33f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     34f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     35f:	02 02 02 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
     36f:	00 00 00 00 00 00 04 02 02 02 02 02 02 02 02 02     ................
     37f:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     38f:	00 00 00 00 00 04 02 02 02 02 02 02 02 03 00 00     ................
	...
     3b3:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
     3cf:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
     3ef:	00 00 04 02 02 00 00 00 00 00 01 01 00 00 00 00     ................
	...
     407:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     417:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     427:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     443:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     453:	01 01 00 00 00 00 00 00 08 00 00 00 00 00 00 00     ................
     463:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     47f:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     48f:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     49f:	01 01 00 00 00 00 00 02 02 00 00 58 00 00 01 01     ...........X....
	...
     4bb:	00 00 01 01 00 63 00 00 00 02 02 00 00 00 00 00     .....c..........
     4cb:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4db:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     4f7:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     507:	01 01 00 00 00 00 00 00 00 07 00 00 00 00 00 00     ................
     517:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     533:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     543:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     553:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
     563:	00 00 00 00 00 09 00 00 00 00 00 00 00 00 01 01     ................
     573:	00 00 00 00 00 02 02 05 00 00 00 00 00 00 00 00     ................
	...
     593:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
     5af:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
     5cf:	06 02 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
	...
     5eb:	00 06 02 02 02 02 02 02 02 02 02 05 00 00 00 00     ................
	...
     607:	00 00 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     617:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     627:	02 02 02 02 02 02 00 00 00 00 00 00 00 00 00 00     ................
	...
     797:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     7a7:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
     a83:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
     a9b:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
     d73:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     d83:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    105f:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1077:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    134f:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    135f:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    163b:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1653:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    192b:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    193b:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1c17:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1c2f:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    1f07:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    1f17:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...

0000208b <map_rocket_right_1>:
    208b:	01 01 26                                            ..&

0000208e <map_rocket_right_0>:
    208e:	01 01 25                                            ..%

00002091 <map_rocket_up_1>:
    2091:	01 01 24                                            ..$

00002094 <map_rocket_up_0>:
    2094:	01 01 23                                            ..#

00002097 <map_ball>:
    2097:	01 01 22                                            .."

0000209a <map_explosion_2>:
    209a:	02 02 0c 0d 0d 0c                                   ......

000020a0 <map_explosion_1>:
    20a0:	02 02 0a 0b 18 19                                   ......

000020a6 <map_explosion_0>:
    20a6:	02 02 08 09 16 17                                   ......

000020ac <map_tank2_right_1>:
    20ac:	02 02 20 21 2e 2f                                   .. !./

000020b2 <map_tank2_right_0>:
    20b2:	02 02 1e 1f 2c 2d                                   ....,-

000020b8 <map_tank2_up_1>:
    20b8:	02 02 1c 1d 2a 2b                                   ....*+

000020be <map_tank2_up_0>:
    20be:	02 02 1a 1b 28 29                                   ....()

000020c4 <map_tank1_right_1>:
    20c4:	02 02 06 07 14 15                                   ......

000020ca <map_tank1_right_0>:
    20ca:	02 02 04 05 12 13                                   ......

000020d0 <map_tank1_up_1>:
    20d0:	02 02 02 03 10 11                                   ......

000020d6 <map_tank1_up_0>:
    20d6:	02 02 00 01 0e 0f                                   ......

000020dc <map_none>:
    20dc:	01 01 27                                            ..'

000020df <map_tank_blank>:
    20df:	02 02 27 27 27 27                                   ..''''

000020e5 <map_metal_bl>:
    20e5:	01 01 0c                                            ...

000020e8 <map_metal_tr>:
    20e8:	01 01 0b                                            ...

000020eb <map_metal_br>:
    20eb:	01 01 0a                                            ...

000020ee <map_metal_tl>:
    20ee:	01 01 09                                            ...

000020f1 <map_tile_exp_2>:
    20f1:	01 01 08                                            ...

000020f4 <map_tile_exp_1>:
    20f4:	01 01 07                                            ...

000020f7 <map_tile_exp_0>:
    20f7:	01 01 06                                            ...

000020fa <map_rocket_itm>:
    20fa:	01 01 04                                            ...

000020fd <map_explode_itm>:
    20fd:	01 01 03                                            ...

00002100 <map_speed_itm>:
    2100:	01 01 02                                            ...

00002103 <map_metal>:
    2103:	01 01 05                                            ...

00002106 <map_brick>:
    2106:	01 01 01                                            ...

00002109 <map_tile_none>:
    2109:	01 01 00                                            ...

0000210c <map_pause>:
    210c:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    211c:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    212c:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    213c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

0000214a <map_splash>:
    214a:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    215a:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    216a:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    217a:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    218a:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    219a:	2a 00 00 2c 2d 2e                                   *..,-.

000021a0 <ad_silence>:
	...

000021a1 <ad_tracks>:
	...

000021a2 <ad_tank_explode>:
	...

000021a3 <ad_splash>:
	...

000021a4 <ad_rocket>:
	...

000021a5 <ad_navigate>:
	...

000021a6 <ad_metal>:
	...

000021a7 <ad_level_start>:
	...

000021a8 <ad_level_clear>:
	...

000021a9 <ad_item>:
	...

000021aa <ad_cannonball>:
	...

000021ab <ad_brick_explode>:
	...

000021ac <ad_banter>:
	...

000021ad <sprites_data>:
    21ad:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    21bd:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    21cd:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    21dd:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    21ed:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    21fd:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    220d:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    221d:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    222d:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    223d:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    224d:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    225d:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    226d:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    227d:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    228d:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    229d:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    22ad:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    22bd:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    22cd:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    22dd:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    22ed:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    22fd:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    230d:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    231d:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    232d:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    233d:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    234d:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    235d:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    236d:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    237d:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    238d:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    239d:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    23ad:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23bd:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    23cd:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    23dd:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    23ed:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23fd:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    240d:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    241d:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    242d:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    243d:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    244d:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    245d:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    246d:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    247d:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    248d:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    249d:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    24ad:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24bd:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    24cd:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    24dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24ed:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24fd:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    250d:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    251d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    252d:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    253d:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    254d:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    255d:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    256d:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    257d:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    258d:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    259d:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    25ad:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    25bd:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    25cd:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    25dd:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    25ed:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    25fd:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    260d:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    261d:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    262d:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    263d:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    264d:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    265d:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    266d:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    267d:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    268d:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    269d:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    26ad:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    26bd:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    26cd:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    26dd:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    26ed:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    26fd:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    270d:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    271d:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    272d:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    273d:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    274d:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    275d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    276d:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    277d:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    278d:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    279d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ad:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    27bd:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    27cd:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    27dd:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    27ed:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    27fd:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    280d:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    281d:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    282d:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    283d:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    284d:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    285d:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    286d:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    287d:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    288d:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    289d:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    28ad:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    28bd:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    28cd:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    28dd:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    28ed:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    28fd:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    290d:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    291d:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    292d:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    293d:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    294d:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    295d:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    296d:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    297d:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    298d:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    299d:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    29ad:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    29bd:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    29cd:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    29dd:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    29ed:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    29fd:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2a0d:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    2a1d:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    2a2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a3d:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    2a4d:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    2a5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a6d:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2a7d:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2a8d:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    2a9d:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    2aad:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2abd:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2acd:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    2add:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aed:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2afd:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    2b0d:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    2b1d:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b2d:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2b3d:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    2b4d:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    2b5d:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b6d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b7d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b8d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b9d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bad:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2bbd:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    2bcd:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    2bdd:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    2bed:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2bfd:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    2c0d:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    2c1d:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    2c2d:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    2c3d:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    2c4d:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    2c5d:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    2c6d:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    2c7d:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    2c8d:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    2c9d:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    2cad:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2cbd:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2ccd:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    2cdd:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2ced:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    2cfd:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2d0d:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2d1d:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2d2d:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2d3d:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2d4d:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    2d5d:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    2d6d:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    2d7d:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2d8d:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    2d9d:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

00002dad <tiles_data>:
	...
    2ded:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    2dfd:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    2e0d:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    2e1d:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    2e2d:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    2e3d:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    2e4d:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    2e5d:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    2e6d:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    2e7d:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    2e8d:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    2e9d:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    2ead:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    2ebd:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    2ecd:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    2edd:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    2eed:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    2efd:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    2f0d:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    2f1d:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    2f35:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    2f45:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    2f55:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    2f6d:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    2f7d:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    2f8d:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    2f9d:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    2fb5:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    2fd5:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    2fed:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    2ffd:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    300d:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    301d:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    302d:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    303d:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    304d:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    305d:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    306d:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    307d:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    308d:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    309d:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    30ad:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    30bd:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    30cd:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    30dd:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    30ed:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    30fd:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    310d:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    311d:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    312d:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    313d:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    314d:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    315d:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    316d:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    317d:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    318d:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    319d:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    31ad:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    31bd:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    31cd:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    31dd:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    31ed:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    31fd:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    320d:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    321d:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    322d:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    323d:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    324d:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    325d:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    326d:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    327d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    328d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    329d:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    32cd:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    32dd:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    330d:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    331d:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    332d:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    333d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    334d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    335d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    336d:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    337d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    338d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    339d:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    33ad:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    33bd:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    33cd:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    33dd:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    33ed:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    33fd:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    340d:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    341d:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    342d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    343d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    344d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    345d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    346d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    347d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    348d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    349d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    34ad:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    34bd:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    34cd:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    34dd:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    34ed:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    34fd:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    352d:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    353d:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    354d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    355d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    356d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    357d:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    358d:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    359d:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    35ad:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    35bd:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    35cd:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    35dd:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    35ed:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    35fd:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    360d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    361d:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    3655:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    3665:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    3675:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3685:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3695:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    36a5:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    36b5:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    36c5:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    36d5:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    36e5:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    36f5:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3705:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3715:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3725:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    3735:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3745:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3755:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3765:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3775:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3785:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3795:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    37a5:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    37b5:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    37c5:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    37ed:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    37fd:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    380d:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    381d:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    382d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    383d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    384d:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    385d:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    386d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    387d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    388d:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    389d:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    38ad:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    38bd:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    38cd:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    38dd:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    38f5:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3905:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3915:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3925:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    3935:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3945:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3955:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3965:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    39b5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    39c5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    39dd:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39f5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3a05:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    3a35:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    3a45:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3a55:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    3a6d:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    3a7d:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    3a8d:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    3a9d:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ab5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    3ac5:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    3ad5:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    3aed:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    3afd:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    3b0d:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    3b1d:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    3b35:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3b45:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3b79:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    3b89:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    3b99:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    3bb5:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    3bc5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3bd5:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    3bf5:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    3c05:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    3c15:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    3c35:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3c45:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    3c55:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c95:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3ca5:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cc5:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    3d15:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3d39:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    3d49:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    3d59:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d75:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3d85:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    3d95:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3db5:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    3dc5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3dd5:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3df5:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3e05:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    3e15:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3e35:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    3e45:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    3e55:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3e79:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    3e89:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    3e99:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    3eb5:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3ec5:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    3ed5:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3ef5:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    3f05:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3f15:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3f35:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    3f45:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    3f55:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    3f75:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3f85:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3f95:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3fb5:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3fc5:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    3fd5:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    3ffd:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4015:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    403d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4055:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4065:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    4075:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4085:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    4095:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    40bd:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    40d5:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    40ed:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    40fd:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    410d:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    411d:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4135:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4145:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    415d:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4175:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4185:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    4195:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    41b5:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    41c5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    41d5:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    41f5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4205:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4215:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    4235:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4245:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4255:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4275:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    4285:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4295:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    42b5:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    42c5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    42d5:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    42f5:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4305:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4315:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4335:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4345:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    4355:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    4375:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4385:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4395:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    43b5:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    43c5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    43d5:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    43f9:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4409:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    4419:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    4435:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    4445:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    4455:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4475:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4485:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4495:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    44b5:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    44c5:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    44d5:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    44f5:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    4505:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    4515:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4535:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4545:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4555:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4575:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4585:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4595:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    45b5:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    45c5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    45d5:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    45f5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4605:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4615:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4635:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4645:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    4655:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4675:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4685:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4695:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    46b5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    46c5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    46d5:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    46f5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4705:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4715:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4735:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    4745:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    4755:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4775:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4785:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    4795:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    47b5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    47c5:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    47d5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    47f5:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    4805:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4815:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4835:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4845:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4855:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    4875:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4885:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    4895:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    48b5:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    48c5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    48d5:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    48f9:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    4909:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    495d:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    4975:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    4985:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    4995:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    49bd:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    49cd:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    49dd:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    49f5:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4a05:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4a15:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    4a3d:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4a4d:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4a5d:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    4a79:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    4a89:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4a99:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    4abd:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4acd:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4add:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    4af9:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    4b09:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    4b19:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    4b3d:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4b4d:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    4b5d:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    4b75:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4b85:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4b95:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4bb5:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    4bc5:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4bd5:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    4bf9:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c09:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4c19:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    4c29:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    4c39:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    4c49:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    4c59:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    4c75:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4c85:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4c95:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    4cbd:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    4ccd:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    4cdd:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    4cfd:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d0d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4d1d:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4d3d:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d4d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4d5d:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    4d7d:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d8d:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4d9d:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4dbd:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4dcd:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    4ddd:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    4dfd:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4e0d:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4e1d:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4e3d:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4e4d:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    4e5d:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    4e75:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    4e85:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4e95:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    4ebd:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4ecd:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4edd:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4efd:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4f0d:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    4f1d:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4f3d:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    4f4d:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    4f5d:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4f7d:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    4f8d:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    4f9d:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4fbd:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4fcd:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    4fdd:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    4ffd:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    500d:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    501d:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5035:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5045:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5055:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    506d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    507d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    508d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    509d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    50b5:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    50c5:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    50d5:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    50f1:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    5101:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    5111:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    5121:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    5131:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5141:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    5151:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

0000516e <__ctors_end>:
    516e:	11 24       	eor	r1, r1
    5170:	1f be       	out	0x3f, r1	; 63
    5172:	cf ef       	ldi	r28, 0xFF	; 255
    5174:	d0 e1       	ldi	r29, 0x10	; 16
    5176:	de bf       	out	0x3e, r29	; 62
    5178:	cd bf       	out	0x3d, r28	; 61

0000517a <__do_copy_data>:
    517a:	11 e0       	ldi	r17, 0x01	; 1
    517c:	a0 e0       	ldi	r26, 0x00	; 0
    517e:	b1 e0       	ldi	r27, 0x01	; 1
    5180:	e0 e9       	ldi	r30, 0x90	; 144
    5182:	ff e9       	ldi	r31, 0x9F	; 159
    5184:	02 c0       	rjmp	.+4      	; 0x518a <__do_copy_data+0x10>
    5186:	05 90       	lpm	r0, Z+
    5188:	0d 92       	st	X+, r0
    518a:	a4 34       	cpi	r26, 0x44	; 68
    518c:	b1 07       	cpc	r27, r17
    518e:	d9 f7       	brne	.-10     	; 0x5186 <__do_copy_data+0xc>

00005190 <__do_clear_bss>:
    5190:	1e e0       	ldi	r17, 0x0E	; 14
    5192:	a4 e4       	ldi	r26, 0x44	; 68
    5194:	b1 e0       	ldi	r27, 0x01	; 1
    5196:	01 c0       	rjmp	.+2      	; 0x519a <.do_clear_bss_start>

00005198 <.do_clear_bss_loop>:
    5198:	1d 92       	st	X+, r1

0000519a <.do_clear_bss_start>:
    519a:	ab 30       	cpi	r26, 0x0B	; 11
    519c:	b1 07       	cpc	r27, r17
    519e:	e1 f7       	brne	.-8      	; 0x5198 <.do_clear_bss_loop>

000051a0 <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    51a0:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    51a2:	88 e1       	ldi	r24, 0x18	; 24
    51a4:	0f b6       	in	r0, 0x3f	; 63
    51a6:	f8 94       	cli
    51a8:	80 93 60 00 	sts	0x0060, r24
    51ac:	10 92 60 00 	sts	0x0060, r1
    51b0:	0f be       	out	0x3f, r0	; 63

000051b2 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    51b2:	0e 94 75 2d 	call	0x5aea	; 0x5aea <isEepromFormatted>
    51b6:	81 11       	cpse	r24, r1
    51b8:	02 c0       	rjmp	.+4      	; 0x51be <Initialize+0xc>
    51ba:	0e 94 53 2d 	call	0x5aa6	; 0x5aa6 <FormatEeprom>

	cli();
    51be:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	80 93 56 09 	sts	0x0956, r24
		tr4_barrel_hi=1;		
    51c6:	80 93 57 09 	sts	0x0957, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    51ca:	80 93 55 09 	sts	0x0955, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    51ce:	10 92 42 09 	sts	0x0942, r1
    51d2:	10 92 48 09 	sts	0x0948, r1
    51d6:	10 92 4e 09 	sts	0x094E, r1
    51da:	10 92 54 09 	sts	0x0954, r1
    51de:	10 92 5a 09 	sts	0x095A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    51e2:	10 92 16 09 	sts	0x0916, r1
	sync_flags=0;
    51e6:	10 92 18 09 	sts	0x0918, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    51ea:	92 e1       	ldi	r25, 0x12	; 18
    51ec:	90 93 17 09 	sts	0x0917, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    51f0:	90 ee       	ldi	r25, 0xE0	; 224
    51f2:	90 93 20 09 	sts	0x0920, r25
	render_lines_count=FRAME_LINES;
    51f6:	90 93 1e 09 	sts	0x091E, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    51fa:	94 e1       	ldi	r25, 0x14	; 20
    51fc:	90 93 1f 09 	sts	0x091F, r25
	first_render_line=FIRST_RENDER_LINE;
    5200:	90 93 1d 09 	sts	0x091D, r25

	joypad1_status_hi=0;
    5204:	10 92 24 09 	sts	0x0924, r1
    5208:	10 92 23 09 	sts	0x0923, r1
	joypad2_status_hi=0;
    520c:	10 92 28 09 	sts	0x0928, r1
    5210:	10 92 27 09 	sts	0x0927, r1
	sound_enabled=1;
    5214:	80 93 41 09 	sts	0x0941, r24

	InitializeVideoMode();
    5218:	0e 94 e0 39 	call	0x73c0	; 0x73c0 <InitializeVideoMode>
    521c:	82 e8       	ldi	r24, 0x82	; 130
    521e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    5220:	fc 01       	movw	r30, r24
    5222:	25 91       	lpm	r18, Z+
    5224:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    5226:	f9 01       	movw	r30, r18
    5228:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    522a:	30 83       	st	Z, r19
    522c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    522e:	20 e0       	ldi	r18, 0x00	; 0
    5230:	80 3b       	cpi	r24, 0xB0	; 176
    5232:	92 07       	cpc	r25, r18
    5234:	a9 f7       	brne	.-22     	; 0x5220 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    5236:	78 94       	sei
	
	DisplayLogo();
    5238:	0e 94 df 39 	call	0x73be	; 0x73be <DisplayLogo>
    523c:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <main>
    5240:	0c 94 c6 4f 	jmp	0x9f8c	; 0x9f8c <_exit>

00005244 <__bad_interrupt>:
    5244:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00005248 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    5248:	0c e0       	ldi	r16, 0x0C	; 12
    524a:	0a 95       	dec	r16
    524c:	f1 f7       	brne	.-4      	; 0x524a <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    524e:	e8 ed       	ldi	r30, 0xD8	; 216
		ldi ZH,hi8(ram_tiles_restore);
    5250:	f8 e0       	ldi	r31, 0x08	; 8

		ldi YL,lo8(vram)
    5252:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    5254:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    5256:	20 91 f7 09 	lds	r18, 0x09F7


		clr r16
    525a:	00 27       	eor	r16, r16

0000525c <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    525c:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    525e:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    5260:	ac 0f       	add	r26, r28
		adc XH,YH
    5262:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    5264:	1c 91       	ld	r17, X
		std Z+2,r17
    5266:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    5268:	02 17       	cp	r16, r18
		brsh noov
    526a:	08 f4       	brcc	.+2      	; 0x526e <noov>
		mov r17,r16
    526c:	10 2f       	mov	r17, r16

0000526e <noov>:
	noov:
		st X,r17
    526e:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    5270:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    5272:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    5274:	00 31       	cpi	r16, 0x10	; 16
		brlo upd_loop ;23
    5276:	90 f3       	brcs	.-28     	; 0x525c <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    5278:	0d e2       	ldi	r16, 0x2D	; 45

0000527a <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    527a:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    527c:	1a 95       	dec	r17
		brne .-4
    527e:	f1 f7       	brne	.-4      	; 0x527c <wait_loop+0x2>

		dec r16
    5280:	0a 95       	dec	r16
		brne wait_loop
    5282:	d9 f7       	brne	.-10     	; 0x527a <wait_loop>

		lds r2,overlay_tile_table
    5284:	20 90 14 09 	lds	r2, 0x0914
		lds r3,overlay_tile_table+1
    5288:	30 90 15 09 	lds	r3, 0x0915
		lds r16,tile_table_lo 
    528c:	00 91 10 09 	lds	r16, 0x0910
		lds r17,tile_table_hi
    5290:	10 91 11 09 	lds	r17, 0x0911
		movw r12,r16
    5294:	68 01       	movw	r12, r16
		movw r6,r16
    5296:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    5298:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    529a:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    529c:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    529e:	4e 01       	movw	r8, r28
		clr r0
    52a0:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    52a2:	30 91 13 09 	lds	r19, 0x0913
		cpi r19,0
    52a6:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    52a8:	09 f0       	breq	.+2      	; 0x52ac <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    52aa:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    52ac:	09 f0       	breq	.+2      	; 0x52b0 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    52ae:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    52b0:	09 f0       	breq	.+2      	; 0x52b4 <wait_loop+0x3a>
		mov r24,r19
    52b2:	83 2f       	mov	r24, r19

		breq .+2
    52b4:	09 f0       	breq	.+2      	; 0x52b8 <wait_loop+0x3e>
		movw r12,r2
    52b6:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    52b8:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    52ba:	a0 2e       	mov	r10, r16
		clr r22
    52bc:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    52be:	78 e0       	ldi	r23, 0x08	; 8

000052c0 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    52c0:	7d d2       	rcall	.+1274   	; 0x57bc <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    52c2:	3c e0       	ldi	r19, 0x0C	; 12
    52c4:	3a 95       	dec	r19
    52c6:	f1 f7       	brne	.-4      	; 0x52c4 <next_tile_line+0x4>
    52c8:	00 00       	nop
    52ca:	00 00       	nop

		;***draw line***
		call render_tile_line
    52cc:	0e 94 97 29 	call	0x532e	; 0x532e <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    52d0:	3f e0       	ldi	r19, 0x0F	; 15
    52d2:	3a 95       	dec	r19
    52d4:	f1 f7       	brne	.-4      	; 0x52d2 <next_tile_line+0x12>
    52d6:	00 00       	nop
    52d8:	00 00       	nop

		dec r10
    52da:	aa 94       	dec	r10
		breq frame_end
    52dc:	a9 f0       	breq	.+42     	; 0x5308 <frame_end>
	
		inc r22
    52de:	63 95       	inc	r22
		lpm ;3 nop
    52e0:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    52e2:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    52e4:	31 f0       	breq	.+12     	; 0x52f2 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    52e6:	33 e0       	ldi	r19, 0x03	; 3
    52e8:	3a 95       	dec	r19
    52ea:	f1 f7       	brne	.-4      	; 0x52e8 <next_tile_line+0x28>
    52ec:	00 00       	nop
    52ee:	00 00       	nop
		
		rjmp next_tile_line	
    52f0:	e7 cf       	rjmp	.-50     	; 0x52c0 <next_tile_line>

000052f2 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    52f2:	66 27       	eor	r22, r22

		clr r0
    52f4:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    52f6:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    52f8:	c3 0f       	add	r28, r19
		adc YH,r0
    52fa:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    52fc:	8a 95       	dec	r24
		brne .+2
    52fe:	09 f4       	brne	.+2      	; 0x5302 <next_tile_row+0x10>
		movw YL,r8	;main vram
    5300:	e4 01       	movw	r28, r8
		brne .+2
    5302:	09 f4       	brne	.+2      	; 0x5306 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    5304:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    5306:	dc cf       	rjmp	.-72     	; 0x52c0 <next_tile_line>

00005308 <frame_end>:

	frame_end:

		WAIT r19,18
    5308:	36 e0       	ldi	r19, 0x06	; 6
    530a:	3a 95       	dec	r19
    530c:	f1 f7       	brne	.-4      	; 0x530a <frame_end+0x2>

		rcall hsync_pulse ;145
    530e:	56 d2       	rcall	.+1196   	; 0x57bc <hsync_pulse>
	
		clr r1
    5310:	11 24       	eor	r1, r1
		call RestoreBackground
    5312:	0e 94 80 38 	call	0x7100	; 0x7100 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    5316:	e0 91 18 09 	lds	r30, 0x0918
		ldi r20,SYNC_FLAG_FIELD
    531a:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    531c:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    531e:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    5320:	e0 93 18 09 	sts	0x0918, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    5324:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    5326:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    532a:	11 24       	eor	r1, r1


		ret
    532c:	08 95       	ret

0000532e <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    532e:	de 01       	movw	r26, r28

		mul r22,r23
    5330:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    5332:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5334:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5336:	14 40       	sbci	r17, 0x04	; 4

		add r16,r0
    5338:	00 0d       	add	r16, r0
		adc r17,r1
    533a:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    533c:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    533e:	08 ed       	ldi	r16, 0xD8	; 216
		ldi r17,hi8(ram_tiles)
    5340:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    5342:	00 0d       	add	r16, r0
		adc r17,r1
    5344:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    5346:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    5348:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    534a:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    534c:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    534e:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    5350:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    5352:	20 31       	cpi	r18, 0x10	; 16
		brcc .+2
    5354:	08 f4       	brcc	.+2      	; 0x5358 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    5356:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    5358:	04 0e       	add	r0, r20
	    adc r1,r21
    535a:	15 1e       	adc	r1, r21

		movw ZL,r0
    535c:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    535e:	20 31       	cpi	r18, 0x10	; 16
		brcs ramloop
    5360:	f0 f0       	brcs	.+60     	; 0x539e <ramloop>

00005362 <romloop>:
	

	romloop:
	    lpm r16,Z+
    5362:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5364:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    5366:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    5368:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    536a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    536c:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    536e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    5370:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    5372:	20 31       	cpi	r18, 0x10	; 16
		nop
    5374:	00 00       	nop

	    lpm r16,Z+
    5376:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5378:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    537a:	08 f4       	brcc	.+2      	; 0x537e <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    537c:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    537e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    5380:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    5382:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    5384:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    5386:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    5388:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    538a:	20 31       	cpi	r18, 0x10	; 16
		dec r17			;decrement tiles to draw on line
    538c:	1a 95       	dec	r17
   
	    lpm r16,Z+
    538e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    5390:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    5392:	05 91       	lpm	r16, Z+

		breq end	
    5394:	31 f1       	breq	.+76     	; 0x53e2 <end>
	    movw ZL,r0   	;copy next tile adress
    5396:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5398:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    539a:	18 f7       	brcc	.-58     	; 0x5362 <romloop>
	
		rjmp .
    539c:	00 c0       	rjmp	.+0      	; 0x539e <ramloop>

0000539e <ramloop>:

	ramloop:

	    ld r16,Z+
    539e:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    53a0:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    53a2:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    53a4:	01 91       	ld	r16, Z+
		nop   
    53a6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    53a8:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    53aa:	23 9f       	mul	r18, r19


	    ld r16,Z+
    53ac:	01 91       	ld	r16, Z+
		nop
    53ae:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    53b0:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    53b2:	20 31       	cpi	r18, 0x10	; 16
   		rjmp .
    53b4:	00 c0       	rjmp	.+0      	; 0x53b6 <ramloop+0x18>

	    ld r16,Z+
    53b6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    53b8:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    53ba:	08 f0       	brcs	.+2      	; 0x53be <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    53bc:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    53be:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    53c0:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    53c2:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    53c4:	15 1e       	adc	r1, r21
		rjmp .
    53c6:	00 c0       	rjmp	.+0      	; 0x53c8 <ramloop+0x2a>
    
		ld r16,Z+		
    53c8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    53ca:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    53cc:	20 31       	cpi	r18, 0x10	; 16
		rjmp .  
    53ce:	00 c0       	rjmp	.+0      	; 0x53d0 <ramloop+0x32>

	    ld r16,Z+	
    53d0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    53d2:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    53d4:	01 91       	ld	r16, Z+

	    dec r17
    53d6:	1a 95       	dec	r17
	    breq end
    53d8:	21 f0       	breq	.+8      	; 0x53e2 <end>
	
		movw ZL,r0
    53da:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    53dc:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    53de:	08 f6       	brcc	.-126    	; 0x5362 <romloop>
		rjmp ramloop
    53e0:	de cf       	rjmp	.-68     	; 0x539e <ramloop>

000053e2 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    53e2:	08 b9       	out	0x08, r16	; 8
		clr r16	
    53e4:	00 27       	eor	r16, r16
		lpm	
    53e6:	c8 95       	lpm
		nop
    53e8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    53ea:	08 b9       	out	0x08, r16	; 8

		ret
    53ec:	08 95       	ret

000053ee <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    53ee:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    53f0:	e0 91 10 09 	lds	r30, 0x0910
	lds ZH,tile_table_hi
    53f4:	f0 91 11 09 	lds	r31, 0x0911
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    53f8:	80 51       	subi	r24, 0x10	; 16
	mul r24,r18
    53fa:	82 9f       	mul	r24, r18
	add ZL,r0
    53fc:	e0 0d       	add	r30, r0
	adc ZH,r1
    53fe:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    5400:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    5402:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    5404:	62 9f       	mul	r22, r18
	add XL,r0
    5406:	a0 0d       	add	r26, r0
	adc XH,r1
    5408:	b1 1d       	adc	r27, r1

	clr r0
    540a:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    540c:	05 90       	lpm	r0, Z+
    540e:	0d 92       	st	X+, r0
    5410:	05 90       	lpm	r0, Z+
    5412:	0d 92       	st	X+, r0
    5414:	05 90       	lpm	r0, Z+
    5416:	0d 92       	st	X+, r0
    5418:	05 90       	lpm	r0, Z+
    541a:	0d 92       	st	X+, r0
    541c:	05 90       	lpm	r0, Z+
    541e:	0d 92       	st	X+, r0
    5420:	05 90       	lpm	r0, Z+
    5422:	0d 92       	st	X+, r0
    5424:	05 90       	lpm	r0, Z+
    5426:	0d 92       	st	X+, r0
    5428:	05 90       	lpm	r0, Z+
    542a:	0d 92       	st	X+, r0
    542c:	05 90       	lpm	r0, Z+
    542e:	0d 92       	st	X+, r0
    5430:	05 90       	lpm	r0, Z+
    5432:	0d 92       	st	X+, r0
    5434:	05 90       	lpm	r0, Z+
    5436:	0d 92       	st	X+, r0
    5438:	05 90       	lpm	r0, Z+
    543a:	0d 92       	st	X+, r0
    543c:	05 90       	lpm	r0, Z+
    543e:	0d 92       	st	X+, r0
    5440:	05 90       	lpm	r0, Z+
    5442:	0d 92       	st	X+, r0
    5444:	05 90       	lpm	r0, Z+
    5446:	0d 92       	st	X+, r0
    5448:	05 90       	lpm	r0, Z+
    544a:	0d 92       	st	X+, r0
    544c:	05 90       	lpm	r0, Z+
    544e:	0d 92       	st	X+, r0
    5450:	05 90       	lpm	r0, Z+
    5452:	0d 92       	st	X+, r0
    5454:	05 90       	lpm	r0, Z+
    5456:	0d 92       	st	X+, r0
    5458:	05 90       	lpm	r0, Z+
    545a:	0d 92       	st	X+, r0
    545c:	05 90       	lpm	r0, Z+
    545e:	0d 92       	st	X+, r0
    5460:	05 90       	lpm	r0, Z+
    5462:	0d 92       	st	X+, r0
    5464:	05 90       	lpm	r0, Z+
    5466:	0d 92       	st	X+, r0
    5468:	05 90       	lpm	r0, Z+
    546a:	0d 92       	st	X+, r0
    546c:	05 90       	lpm	r0, Z+
    546e:	0d 92       	st	X+, r0
    5470:	05 90       	lpm	r0, Z+
    5472:	0d 92       	st	X+, r0
    5474:	05 90       	lpm	r0, Z+
    5476:	0d 92       	st	X+, r0
    5478:	05 90       	lpm	r0, Z+
    547a:	0d 92       	st	X+, r0
    547c:	05 90       	lpm	r0, Z+
    547e:	0d 92       	st	X+, r0
    5480:	05 90       	lpm	r0, Z+
    5482:	0d 92       	st	X+, r0
    5484:	05 90       	lpm	r0, Z+
    5486:	0d 92       	st	X+, r0
    5488:	05 90       	lpm	r0, Z+
    548a:	0d 92       	st	X+, r0
    548c:	05 90       	lpm	r0, Z+
    548e:	0d 92       	st	X+, r0
    5490:	05 90       	lpm	r0, Z+
    5492:	0d 92       	st	X+, r0
    5494:	05 90       	lpm	r0, Z+
    5496:	0d 92       	st	X+, r0
    5498:	05 90       	lpm	r0, Z+
    549a:	0d 92       	st	X+, r0
    549c:	05 90       	lpm	r0, Z+
    549e:	0d 92       	st	X+, r0
    54a0:	05 90       	lpm	r0, Z+
    54a2:	0d 92       	st	X+, r0
    54a4:	05 90       	lpm	r0, Z+
    54a6:	0d 92       	st	X+, r0
    54a8:	05 90       	lpm	r0, Z+
    54aa:	0d 92       	st	X+, r0
    54ac:	05 90       	lpm	r0, Z+
    54ae:	0d 92       	st	X+, r0
    54b0:	05 90       	lpm	r0, Z+
    54b2:	0d 92       	st	X+, r0
    54b4:	05 90       	lpm	r0, Z+
    54b6:	0d 92       	st	X+, r0
    54b8:	05 90       	lpm	r0, Z+
    54ba:	0d 92       	st	X+, r0
    54bc:	05 90       	lpm	r0, Z+
    54be:	0d 92       	st	X+, r0
    54c0:	05 90       	lpm	r0, Z+
    54c2:	0d 92       	st	X+, r0
    54c4:	05 90       	lpm	r0, Z+
    54c6:	0d 92       	st	X+, r0
    54c8:	05 90       	lpm	r0, Z+
    54ca:	0d 92       	st	X+, r0
    54cc:	05 90       	lpm	r0, Z+
    54ce:	0d 92       	st	X+, r0
    54d0:	05 90       	lpm	r0, Z+
    54d2:	0d 92       	st	X+, r0
    54d4:	05 90       	lpm	r0, Z+
    54d6:	0d 92       	st	X+, r0
    54d8:	05 90       	lpm	r0, Z+
    54da:	0d 92       	st	X+, r0
    54dc:	05 90       	lpm	r0, Z+
    54de:	0d 92       	st	X+, r0
    54e0:	05 90       	lpm	r0, Z+
    54e2:	0d 92       	st	X+, r0
    54e4:	05 90       	lpm	r0, Z+
    54e6:	0d 92       	st	X+, r0
    54e8:	05 90       	lpm	r0, Z+
    54ea:	0d 92       	st	X+, r0
    54ec:	05 90       	lpm	r0, Z+
    54ee:	0d 92       	st	X+, r0
    54f0:	05 90       	lpm	r0, Z+
    54f2:	0d 92       	st	X+, r0
    54f4:	05 90       	lpm	r0, Z+
    54f6:	0d 92       	st	X+, r0
    54f8:	05 90       	lpm	r0, Z+
    54fa:	0d 92       	st	X+, r0
    54fc:	05 90       	lpm	r0, Z+
    54fe:	0d 92       	st	X+, r0
    5500:	05 90       	lpm	r0, Z+
    5502:	0d 92       	st	X+, r0
    5504:	05 90       	lpm	r0, Z+
    5506:	0d 92       	st	X+, r0
    5508:	05 90       	lpm	r0, Z+
    550a:	0d 92       	st	X+, r0


	clr r1
    550c:	11 24       	eor	r1, r1
	ret
    550e:	08 95       	ret

00005510 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    5510:	0f 93       	push	r16
	push r17
    5512:	1f 93       	push	r17
	push YL
    5514:	cf 93       	push	r28
	push YH
    5516:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    5518:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    551a:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    551c:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi ZH,hi8(sprites)	
    551e:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    5520:	e0 0d       	add	r30, r0
	adc ZH,r1
    5522:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    5524:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    5526:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    5528:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    552a:	8e 9f       	mul	r24, r30
	movw r26,r0
    552c:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    552e:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    5530:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    5532:	c8 e0       	ldi	r28, 0x08	; 8
	ldi YH,hi8(sprites_tile_banks)	
    5534:	d9 e0       	ldi	r29, 0x09	; 9
	clr r0
    5536:	00 24       	eor	r0, r0
	add YL,r1
    5538:	c1 0d       	add	r28, r1
	adc YH,r0		
    553a:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    553c:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    553e:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    5540:	ea 0f       	add	r30, r26
	adc ZH,r27
    5542:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    5544:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    5546:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    5548:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    554a:	69 9f       	mul	r22, r25
	add XL,r0
    554c:	a0 0d       	add	r26, r0
	adc XH,r1
    554e:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    5550:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    5552:	dd 27       	eor	r29, r29

	cpi r20,0	
    5554:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    5556:	51 f4       	brne	.+20     	; 0x556c <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    5558:	a2 0f       	add	r26, r18
	adc XH,r1
    555a:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    555c:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    555e:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    5560:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    5562:	11 c0       	rjmp	.+34     	; 0x5586 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    5564:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    5566:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    5568:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    556a:	0d c0       	rjmp	.+26     	; 0x5586 <x_check_end>

0000556c <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    556c:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    556e:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    5570:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    5572:	04 c0       	rjmp	.+8      	; 0x557c <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    5574:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    5576:	e8 0f       	add	r30, r24
	adc ZH,r1	
    5578:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    557a:	05 c0       	rjmp	.+10     	; 0x5586 <x_check_end>

0000557c <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    557c:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    557e:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    5580:	e2 0f       	add	r30, r18
	adc ZH,r1
    5582:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    5584:	31 97       	sbiw	r30, 0x01	; 1

00005586 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    5586:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    5588:	41 f4       	brne	.+16     	; 0x559a <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    558a:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    558c:	93 9f       	mul	r25, r19
	add XL,r0
    558e:	a0 0d       	add	r26, r0
	adc XH,r1
    5590:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    5592:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    5594:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    5596:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    5598:	0a c0       	rjmp	.+20     	; 0x55ae <y_check_end>

0000559a <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    559a:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    559c:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    559e:	63 2f       	mov	r22, r19
	dec r22
    55a0:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    55a2:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    55a4:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    55a6:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    55a8:	56 9f       	mul	r21, r22
	add ZL,r0
    55aa:	e0 0d       	add	r30, r0
	adc ZH,r1	
    55ac:	f1 1d       	adc	r31, r1

000055ae <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    55ae:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    55b0:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    55b2:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    55b4:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    55b6:	00 ff       	sbrs	r16, 0
	clr r23
    55b8:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    55ba:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    55bc:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    55be:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    55c0:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    55c2:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    55c4:	59 1b       	sub	r21, r25

000055c6 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    55c6:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    55c8:	48 1b       	sub	r20, r24

000055ca <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    55ca:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    55cc:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    55ce:	2c 93       	st	X, r18
	adiw XL,1
    55d0:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    55d2:	e6 0f       	add	r30, r22
	adc ZH,r23
    55d4:	f7 1f       	adc	r31, r23
	dec r20
    55d6:	4a 95       	dec	r20
	brne x_loop
    55d8:	c1 f7       	brne	.-16     	; 0x55ca <x_loop>

	add ZL,YL		;src+=srcXdiff
    55da:	ec 0f       	add	r30, r28
	adc ZH,YH
    55dc:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    55de:	a8 0f       	add	r26, r24
	adc XH,r1
    55e0:	b1 1d       	adc	r27, r1
	dec r21
    55e2:	5a 95       	dec	r21
	brne y_loop
    55e4:	81 f7       	brne	.-32     	; 0x55c6 <y_loop>


	pop YH
    55e6:	df 91       	pop	r29
	pop YL
    55e8:	cf 91       	pop	r28
	pop r17
    55ea:	1f 91       	pop	r17
	pop r16
    55ec:	0f 91       	pop	r16
	ret
    55ee:	08 95       	ret

000055f0 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    55f0:	0f 92       	push	r0
	push r1
    55f2:	1f 92       	push	r1
	push ZL;2
    55f4:	ef 93       	push	r30
	push ZH;2
    55f6:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    55f8:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    55fa:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    55fc:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    5600:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    5602:	f1 e0       	ldi	r31, 0x01	; 1

00005604 <latency_loop>:
latency_loop:
	cp ZL,ZH
    5604:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    5606:	00 f0       	brcs	.+0      	; 0x5608 <latency_loop+0x4>
	inc ZH
    5608:	f3 95       	inc	r31
	cpi ZH,10
    560a:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    560c:	d8 f3       	brcs	.-10     	; 0x5604 <latency_loop>
	jmp .
    560e:	0c 94 09 2b 	jmp	0x5612	; 0x5612 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    5612:	e0 91 17 09 	lds	r30, 0x0917
	dec ZL
    5616:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5618:	e0 93 17 09 	sts	0x0917, r30

	;process sync phases
	lds ZH,sync_phase
    561c:	f0 91 16 09 	lds	r31, 0x0916
	sbrc ZH,0
    5620:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    5622:	57 c0       	rjmp	.+174    	; 0x56d2 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5624:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    5626:	98 f0       	brcs	.+38     	; 0x564e <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    5628:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    562a:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    562e:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    5630:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    5634:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    5636:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    5638:	26 f4       	brtc	.+8      	; 0x5642 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    563a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    563c:	0e 94 ef 2b 	call	0x57de	; 0x57de <update_sound>
	rjmp sync_end
    5640:	b6 c0       	rjmp	.+364    	; 0x57ae <sync_end>

00005642 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    5642:	e5 e1       	ldi	r30, 0x15	; 21
    5644:	ea 95       	dec	r30
    5646:	f1 f7       	brne	.-4      	; 0x5644 <sync_pre_eq_no_sound_update+0x2>
    5648:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    564a:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    564c:	b0 c0       	rjmp	.+352    	; 0x57ae <sync_end>

0000564e <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    564e:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    5650:	38 f1       	brcs	.+78     	; 0x56a0 <sync_post_eq>

	rjmp .
    5652:	00 c0       	rjmp	.+0      	; 0x5654 <sync_eq+0x6>
	rjmp .
    5654:	00 c0       	rjmp	.+0      	; 0x5656 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5656:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    5658:	e0 fb       	bst	r30, 0
	ldi ZL,4
    565a:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    565c:	16 f4       	brtc	.+4      	; 0x5662 <sync_eq_skip>
	
	call update_sound
    565e:	0e 94 ef 2b 	call	0x57de	; 0x57de <update_sound>

00005662 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    5662:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    5664:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    5668:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    566a:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    566e:	9f c0       	rjmp	.+318    	; 0x57ae <sync_end>

00005670 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    5670:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5672:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5674:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5676:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    567a:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    567c:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    567e:	00 f0       	brcs	.+0      	; 0x5680 <__vector_14+0x10>

	cpi ZL,2
    5680:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    5682:	00 f0       	brcs	.+0      	; 0x5684 <__vector_14+0x14>

	cpi ZL,3
    5684:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    5686:	00 f0       	brcs	.+0      	; 0x5688 <__vector_14+0x18>

	cpi ZL,4
    5688:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    568a:	00 f0       	brcs	.+0      	; 0x568c <__vector_14+0x1c>

	cpi ZL,5
    568c:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    568e:	00 f0       	brcs	.+0      	; 0x5690 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    5690:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    5692:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    5694:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    5698:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    569a:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    569c:	ef 91       	pop	r30
	reti
    569e:	18 95       	reti

000056a0 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    56a0:	00 c0       	rjmp	.+0      	; 0x56a2 <sync_post_eq+0x2>

	bst ZL,0
    56a2:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    56a4:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    56a6:	26 f4       	brtc	.+8      	; 0x56b0 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    56a8:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    56aa:	0e 94 ef 2b 	call	0x57de	; 0x57de <update_sound>
	rjmp sync_pre_eq_cont
    56ae:	05 c0       	rjmp	.+10     	; 0x56ba <sync_pre_eq_cont>

000056b0 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    56b0:	e5 e1       	ldi	r30, 0x15	; 21
    56b2:	ea 95       	dec	r30
    56b4:	f1 f7       	brne	.-4      	; 0x56b2 <sync_post_eq_no_sound_update+0x2>
    56b6:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    56b8:	28 9a       	sbi	0x05, 0	; 5

000056ba <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    56ba:	e0 91 17 09 	lds	r30, 0x0917
	cpi ZL,0
    56be:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    56c0:	09 f0       	breq	.+2      	; 0x56c4 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    56c2:	75 c0       	rjmp	.+234    	; 0x57ae <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    56c4:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    56c6:	e0 93 17 09 	sts	0x0917, r30
	ldi ZL,1
    56ca:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    56cc:	e0 93 16 09 	sts	0x0916, r30
	
	rjmp sync_end
    56d0:	6e c0       	rjmp	.+220    	; 0x57ae <sync_end>

000056d2 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    56d2:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    56d4:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    56d8:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    56da:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    56de:	00 c0       	rjmp	.+0      	; 0x56e0 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    56e0:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    56e2:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    56e4:	00 c0       	rjmp	.+0      	; 0x56e6 <sync_hsync+0x14>
	call update_sound
    56e6:	0e 94 ef 2b 	call	0x57de	; 0x57de <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    56ea:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    56ec:	00 90 1d 09 	lds	r0, 0x091D
	sub ZH,r0				
    56f0:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    56f2:	e0 91 17 09 	lds	r30, 0x0917
	cp ZL,ZH
    56f6:	ef 17       	cp	r30, r31
	brsh no_render
    56f8:	d0 f4       	brcc	.+52     	; 0x572e <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    56fa:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    56fc:	00 90 1d 09 	lds	r0, 0x091D
	sub ZH,r0				
    5700:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    5702:	00 90 1e 09 	lds	r0, 0x091E
	sub ZH,r0			
    5706:	f0 19       	sub	r31, r0
	cp ZL,ZH
    5708:	ef 17       	cp	r30, r31
	brlo no_render
    570a:	88 f0       	brcs	.+34     	; 0x572e <no_render>

	;push r1-r29
	ldi ZL,29
    570c:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    570e:	ff 27       	eor	r31, r31

00005710 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    5710:	00 80       	ld	r0, Z
	push r0
    5712:	0f 92       	push	r0
	dec ZL
    5714:	ea 95       	dec	r30
	brne push_loop	
    5716:	e1 f7       	brne	.-8      	; 0x5710 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    5718:	06 e0       	ldi	r16, 0x06	; 6
    571a:	0a 95       	dec	r16
    571c:	f1 f7       	brne	.-4      	; 0x571a <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    571e:	0e 94 24 29 	call	0x5248	; 0x5248 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    5722:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    5724:	ff 27       	eor	r31, r31

00005726 <pop_loop>:
pop_loop:
	pop r0
    5726:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    5728:	01 92       	st	Z+, r0
	cpi ZL,30
    572a:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    572c:	e0 f3       	brcs	.-8      	; 0x5726 <pop_loop>

0000572e <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    572e:	e0 91 17 09 	lds	r30, 0x0917
	cpi ZL,0
    5732:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    5734:	09 f0       	breq	.+2      	; 0x5738 <no_render+0xa>
	rjmp sync_end
    5736:	3b c0       	rjmp	.+118    	; 0x57ae <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    5738:	2f 93       	push	r18
	push r19
    573a:	3f 93       	push	r19
	push r20
    573c:	4f 93       	push	r20
	push r21
    573e:	5f 93       	push	r21
	push r22
    5740:	6f 93       	push	r22
	push r23
    5742:	7f 93       	push	r23
	push r24
    5744:	8f 93       	push	r24
	push r25
    5746:	9f 93       	push	r25
	push r26
    5748:	af 93       	push	r26
	push r27
    574a:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    574c:	78 94       	sei
	clr r1
    574e:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    5750:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    5752:	e0 93 16 09 	sts	0x0916, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5756:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    5758:	e0 93 17 09 	sts	0x0917, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    575c:	f0 91 1f 09 	lds	r31, 0x091F
	sts first_render_line,ZH
    5760:	f0 93 1d 09 	sts	0x091D, r31
	
	lds ZH,render_lines_count_tmp
    5764:	f0 91 20 09 	lds	r31, 0x0920
	sts render_lines_count,ZH
    5768:	f0 93 1e 09 	sts	0x091E, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    576c:	e0 91 19 09 	lds	r30, 0x0919
	lds ZH,pre_vsync_user_callback+1
    5770:	f0 91 1a 09 	lds	r31, 0x091A
	cp  ZL,r1
    5774:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5776:	f1 05       	cpc	r31, r1
	breq .+2 
    5778:	09 f0       	breq	.+2      	; 0x577c <no_render+0x4e>
	icall
    577a:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    577c:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    5780:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    5784:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <process_music>
	clr r1
    5788:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    578a:	e0 91 1b 09 	lds	r30, 0x091B
	lds ZH,post_vsync_user_callback+1
    578e:	f0 91 1c 09 	lds	r31, 0x091C
	cp  ZL,r1
    5792:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5794:	f1 05       	cpc	r31, r1
	breq .+2 
    5796:	09 f0       	breq	.+2      	; 0x579a <no_render+0x6c>
	icall
    5798:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    579a:	bf 91       	pop	r27
	pop r26
    579c:	af 91       	pop	r26
	pop r25
    579e:	9f 91       	pop	r25
	pop r24
    57a0:	8f 91       	pop	r24
	pop r23
    57a2:	7f 91       	pop	r23
	pop r22
    57a4:	6f 91       	pop	r22
	pop r21
    57a6:	5f 91       	pop	r21
	pop r20
    57a8:	4f 91       	pop	r20
	pop r19
    57aa:	3f 91       	pop	r19
	pop r18
    57ac:	2f 91       	pop	r18

000057ae <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    57ae:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    57b0:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    57b2:	ff 91       	pop	r31
	pop ZL
    57b4:	ef 91       	pop	r30
	pop r1
    57b6:	1f 90       	pop	r1
	pop r0
    57b8:	0f 90       	pop	r0
	reti
    57ba:	18 95       	reti

000057bc <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    57bc:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    57be:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    57c0:	00 c0       	rjmp	.+0      	; 0x57c2 <hsync_pulse+0x6>
	call update_sound
    57c2:	0e 94 ef 2b 	call	0x57de	; 0x57de <update_sound>

	lds ZL,sync_pulse
    57c6:	e0 91 17 09 	lds	r30, 0x0917
	dec ZL
    57ca:	ea 95       	dec	r30
	sts sync_pulse,ZL
    57cc:	e0 93 17 09 	sts	0x0917, r30

	ret
    57d0:	08 95       	ret

000057d2 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    57d2:	e0 91 41 09 	lds	r30, 0x0941
	sbrc ZL,0
    57d6:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    57d8:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <ProcessMusic>
#endif

	ret
    57dc:	08 95       	ret

000057de <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    57de:	0f 93       	push	r16
	push r17
    57e0:	1f 93       	push	r17
	push r18
    57e2:	2f 93       	push	r18
	push r28
    57e4:	cf 93       	push	r28
	push r29
    57e6:	df 93       	push	r29

	mov r18,ZL
    57e8:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    57ea:	00 91 43 09 	lds	r16, 0x0943
	lds r17,tr1_pos_frac
    57ee:	10 91 45 09 	lds	r17, 0x0945
	add	r17,r16	;add step to fractional part of sample pos
    57f2:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    57f4:	00 91 44 09 	lds	r16, 0x0944
	lds ZL,tr1_pos_lo
    57f8:	e0 91 46 09 	lds	r30, 0x0946
	lds ZH,tr1_pos_hi 
    57fc:	f0 91 47 09 	lds	r31, 0x0947
	adc ZL,r16	;add step to low byte of sample pos
    5800:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    5802:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    5804:	e0 93 46 09 	sts	0x0946, r30
	sts tr1_pos_frac,r17
    5808:	10 93 45 09 	sts	0x0945, r17
	lds r17,tr1_vol
    580c:	10 91 42 09 	lds	r17, 0x0942
	mulsu r16,r17;(sample*mixing vol)
    5810:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    5812:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    5814:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    5816:	d0 2d       	mov	r29, r0
	nop
    5818:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    581a:	00 91 49 09 	lds	r16, 0x0949
	lds r17,tr2_pos_frac
    581e:	10 91 4b 09 	lds	r17, 0x094B
	add	r17,r16	;add step to fractional part of sample pos
    5822:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    5824:	00 91 4a 09 	lds	r16, 0x094A
	lds ZL,tr2_pos_lo
    5828:	e0 91 4c 09 	lds	r30, 0x094C
	lds ZH,tr2_pos_hi 
    582c:	f0 91 4d 09 	lds	r31, 0x094D
	adc ZL,r16	;add step to low byte of sample pos
    5830:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    5832:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    5834:	e0 93 4c 09 	sts	0x094C, r30
	sts tr2_pos_frac,r17
    5838:	10 93 4b 09 	sts	0x094B, r17
	lds r17,tr2_vol
    583c:	10 91 48 09 	lds	r17, 0x0948

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    5840:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5842:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    5844:	20 ff       	sbrs	r18, 0
	rjmp .
    5846:	00 c0       	rjmp	.+0      	; 0x5848 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    5848:	01 03       	mulsu	r16, r17
	clr r0
    584a:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    584c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    584e:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    5850:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    5852:	00 91 4f 09 	lds	r16, 0x094F
	lds r17,tr3_pos_frac
    5856:	10 91 51 09 	lds	r17, 0x0951
	add	r17,r16				;add step to fractional part of sample pos
    585a:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    585c:	00 91 50 09 	lds	r16, 0x0950
	lds ZL,tr3_pos_lo
    5860:	e0 91 52 09 	lds	r30, 0x0952
	lds ZH,tr3_pos_hi 
    5864:	f0 91 53 09 	lds	r31, 0x0953
	adc ZL,r16				;add step to low byte of sample pos
    5868:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    586a:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    586c:	e0 93 52 09 	sts	0x0952, r30
	sts tr3_pos_frac,r17
    5870:	10 93 51 09 	sts	0x0951, r17
	lds r17,tr3_vol
    5874:	10 91 4e 09 	lds	r17, 0x094E
	mulsu r16,r17			;(sample*mixing vol)
    5878:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    587a:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    587c:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    587e:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    5880:	00 91 56 09 	lds	r16, 0x0956
	lds r17,tr4_barrel_hi
    5884:	10 91 57 09 	lds	r17, 0x0957
	lds ZL,tr4_divider
    5888:	e0 91 58 09 	lds	r30, 0x0958
	dec ZL	
    588c:	ea 95       	dec	r30
	brpl ch4_no_shift	
    588e:	92 f4       	brpl	.+36     	; 0x58b4 <ch4_no_shift>

	lds ZH,tr4_params
    5890:	f0 91 55 09 	lds	r31, 0x0955
	mov ZL,ZH
    5894:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    5896:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    5898:	00 2e       	mov	r0, r16
	lsr r0
    589a:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    589c:	00 26       	eor	r0, r16
	bst r0,0
    589e:	00 fa       	bst	r0, 0
	lsr r17
    58a0:	16 95       	lsr	r17
	ror r16
    58a2:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    58a4:	16 f9       	bld	r17, 6
	sbrs ZH,0
    58a6:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    58a8:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    58aa:	00 93 56 09 	sts	0x0956, r16
	sts tr4_barrel_hi,r17
    58ae:	10 93 57 09 	sts	0x0957, r17

	rjmp ch4_end
    58b2:	03 c0       	rjmp	.+6      	; 0x58ba <ch4_end>

000058b4 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    58b4:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    58b6:	1a 95       	dec	r17
	brne .-4
    58b8:	f1 f7       	brne	.-4      	; 0x58b6 <ch4_no_shift+0x2>

000058ba <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    58ba:	e0 93 58 09 	sts	0x0958, r30
	ldi r17,0x80 ;-128
    58be:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    58c0:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    58c2:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    58c4:	21 ff       	sbrs	r18, 1
	rjmp .
    58c6:	00 c0       	rjmp	.+0      	; 0x58c8 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    58c8:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    58ca:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    58cc:	00 91 54 09 	lds	r16, 0x0954

	mulsu r17,r16;(sample*mixing vol)
    58d0:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    58d2:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    58d4:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    58d6:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    58d8:	00 91 5d 09 	lds	r16, 0x095D
	lds r17,tr5_step_lo 
    58dc:	10 91 5b 09 	lds	r17, 0x095B
	add r16,r17
    58e0:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    58e2:	00 93 5d 09 	sts	0x095D, r16

	;add lo
	lds ZL,tr5_pos_lo
    58e6:	e0 91 5e 09 	lds	r30, 0x095E
	lds r17,tr5_step_hi 
    58ea:	10 91 5c 09 	lds	r17, 0x095C
	adc ZL,r17
    58ee:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    58f0:	f0 91 5f 09 	lds	r31, 0x095F
	ldi r16,0
    58f4:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    58f6:	f0 1f       	adc	r31, r16

	movw r16,ZL
    58f8:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    58fa:	00 90 60 09 	lds	r0, 0x0960
	lds r1,tr5_loop_len_hi	
    58fe:	10 90 61 09 	lds	r1, 0x0961
	sub r16,r0
    5902:	00 19       	sub	r16, r0
	sbc r17,r1
    5904:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    5906:	00 90 62 09 	lds	r0, 0x0962
	lds r1,tr5_loop_end_hi
    590a:	10 90 63 09 	lds	r1, 0x0963

	cp ZL,r0
    590e:	e0 15       	cp	r30, r0
	cpc ZH,r1
    5910:	f1 05       	cpc	r31, r1
	brlo .+2
    5912:	08 f0       	brcs	.+2      	; 0x5916 <ch4_end+0x5c>
	movw ZL,r16
    5914:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    5916:	e0 93 5e 09 	sts	0x095E, r30
	sts tr5_pos_hi,ZH
    591a:	f0 93 5f 09 	sts	0x095F, r31

	lpm	r16,Z	;load sample
    591e:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    5920:	10 91 5a 09 	lds	r17, 0x095A

	mulsu r16,r17;(sample*mixing vol)
    5924:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    5926:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5928:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    592a:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    592c:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    592e:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    5930:	d0 05       	cpc	r29, r0
	brlt .+2
    5932:	0c f0       	brlt	.+2      	; 0x5936 <ch4_end+0x7c>
	ldi r28,127
    5934:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    5936:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    5938:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    593a:	d0 05       	cpc	r29, r0
	brge .+2
    593c:	0c f4       	brge	.+2      	; 0x5940 <ch4_end+0x86>
	ldi r28,-128
    593e:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    5940:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    5942:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    5946:	df 91       	pop	r29
	pop r28
    5948:	cf 91       	pop	r28
	pop r18
    594a:	2f 91       	pop	r18
	pop r17
    594c:	1f 91       	pop	r17
	pop r16
    594e:	0f 91       	pop	r16
	
	ret
    5950:	08 95       	ret

00005952 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    5952:	80 93 08 09 	sts	0x0908, r24
	sts sprites_tile_banks+1,r25
    5956:	90 93 09 09 	sts	0x0909, r25
	ret
    595a:	08 95       	ret

0000595c <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    595c:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    595e:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    5960:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    5962:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    5964:	60 e1       	ldi	r22, 0x10	; 16

00005966 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    5966:	6d 93       	st	X+, r22
	sbiw r30,1
    5968:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    596a:	e9 f7       	brne	.-6      	; 0x5966 <fill_vram_loop>

	clr r1
    596c:	11 24       	eor	r1, r1

	ret
    596e:	08 95       	ret

00005970 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    5970:	50 91 12 09 	lds	r21, 0x0912
	add r20,21
    5974:	45 0f       	add	r20, r21
	rjmp SetTile	
    5976:	00 c0       	rjmp	.+0      	; 0x5978 <SetTile>

00005978 <SetTile>:

	ret

#else

	clr r25
    5978:	99 27       	eor	r25, r25
	clr r23	
    597a:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    597c:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    597e:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    5980:	08 0e       	add	r0, r24
	adc r1,r25
    5982:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    5984:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    5986:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    5988:	a0 0d       	add	r26, r0
	adc XH,r1
    598a:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    598c:	40 5f       	subi	r20, 0xF0	; 240
	st X,r20
    598e:	4c 93       	st	X, r20

	clr r1
    5990:	11 24       	eor	r1, r1

	ret
    5992:	08 95       	ret

00005994 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    5994:	80 93 12 09 	sts	0x0912, r24
	ret
    5998:	08 95       	ret

0000599a <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    599a:	80 93 10 09 	sts	0x0910, r24
	sts tile_table_hi,r25	
    599e:	90 93 11 09 	sts	0x0911, r25
	ret
    59a2:	08 95       	ret

000059a4 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    59a4:	80 91 18 09 	lds	r24, 0x0918
	andi r24,SYNC_FLAG_VSYNC
    59a8:	81 70       	andi	r24, 0x01	; 1
	ret
    59aa:	08 95       	ret

000059ac <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    59ac:	20 91 18 09 	lds	r18, 0x0918
	andi r18,~SYNC_FLAG_VSYNC
    59b0:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    59b2:	20 93 18 09 	sts	0x0918, r18
	ret
    59b6:	08 95       	ret

000059b8 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    59b8:	88 23       	and	r24, r24
	brne rj_p2
    59ba:	29 f4       	brne	.+10     	; 0x59c6 <rj_p2>
		
	lds r24,joypad1_status_lo
    59bc:	80 91 21 09 	lds	r24, 0x0921
	lds r25,joypad1_status_lo+1
    59c0:	90 91 22 09 	lds	r25, 0x0922
	ret
    59c4:	08 95       	ret

000059c6 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    59c6:	80 91 25 09 	lds	r24, 0x0925
	lds r25,joypad2_status_lo+1	
    59ca:	90 91 26 09 	lds	r25, 0x0926

	ret
    59ce:	08 95       	ret

000059d0 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    59d0:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    59d2:	7a 95       	dec	r23
	brne .-4 ;~1 us
    59d4:	f1 f7       	brne	.-4      	; 0x59d2 <WaitUs+0x2>
	nop
    59d6:	00 00       	nop
	sbiw r24,1
    59d8:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    59da:	d1 f7       	brne	.-12     	; 0x59d0 <WaitUs>

	ret
    59dc:	08 95       	ret

000059de <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    59de:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    59e0:	fe cf       	rjmp	.-4      	; 0x59de <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    59e2:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    59e4:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    59e6:	60 bd       	out	0x20, r22	; 32
   cli
    59e8:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    59ea:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    59ec:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    59ee:	78 94       	sei
   ret
    59f0:	08 95       	ret

000059f2 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    59f2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    59f4:	fe cf       	rjmp	.-4      	; 0x59f2 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    59f6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    59f8:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    59fa:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    59fc:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    59fe:	80 b5       	in	r24, 0x20	; 32
   sei
    5a00:	78 94       	sei
   ret
    5a02:	08 95       	ret

00005a04 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    5a04:	98 e0       	ldi	r25, 0x08	; 8
    5a06:	88 e1       	ldi	r24, 0x18	; 24
    5a08:	0f b6       	in	r0, 0x3f	; 63
    5a0a:	f8 94       	cli
    5a0c:	a8 95       	wdr
    5a0e:	80 93 60 00 	sts	0x0060, r24
    5a12:	0f be       	out	0x3f, r0	; 63
    5a14:	90 93 60 00 	sts	0x0060, r25
	while(1);
    5a18:	ff cf       	rjmp	.-2      	; 0x5a18 <SoftReset+0x14>

00005a1a <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    5a1a:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    5a1c:	c8 95       	lpm
    5a1e:	c8 95       	lpm
		Wait200ns();
    5a20:	c8 95       	lpm
    5a22:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    5a24:	12 98       	cbi	0x02, 2	; 2
    5a26:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	90 e0       	ldi	r25, 0x00	; 0
    5a2c:	20 e0       	ldi	r18, 0x00	; 0
    5a2e:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    5a30:	36 95       	lsr	r19
    5a32:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    5a34:	96 95       	lsr	r25
    5a36:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5a38:	c8 95       	lpm
    5a3a:	c8 95       	lpm
			Wait200ns();
    5a3c:	c8 95       	lpm
    5a3e:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    5a40:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    5a42:	00 9b       	sbis	0x00, 0	; 0
    5a44:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    5a46:	01 9b       	sbis	0x00, 1	; 0
    5a48:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    5a4a:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5a4c:	c8 95       	lpm
    5a4e:	c8 95       	lpm
			Wait200ns();
    5a50:	c8 95       	lpm
    5a52:	c8 95       	lpm
    5a54:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    5a56:	61 f7       	brne	.-40     	; 0x5a30 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    5a58:	30 93 22 09 	sts	0x0922, r19
    5a5c:	20 93 21 09 	sts	0x0921, r18
		joypad2_status_lo=p2ButtonsLo;
    5a60:	90 93 26 09 	sts	0x0926, r25
    5a64:	80 93 25 09 	sts	0x0925, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    5a68:	80 91 21 09 	lds	r24, 0x0921
    5a6c:	90 91 22 09 	lds	r25, 0x0922
    5a70:	0f 97       	sbiw	r24, 0x0f	; 15
    5a72:	31 f0       	breq	.+12     	; 0x5a80 <ReadButtons+0x66>
    5a74:	80 91 25 09 	lds	r24, 0x0925
    5a78:	90 91 26 09 	lds	r25, 0x0926
    5a7c:	0f 97       	sbiw	r24, 0x0f	; 15
    5a7e:	11 f4       	brne	.+4      	; 0x5a84 <ReadButtons+0x6a>
		SoftReset();
    5a80:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <SoftReset>
    5a84:	08 95       	ret

00005a86 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    5a86:	10 92 76 09 	sts	0x0976, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    5a8a:	00 99       	sbic	0x00, 0	; 0
    5a8c:	03 c0       	rjmp	.+6      	; 0x5a94 <ReadControllers+0xe>
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	80 93 76 09 	sts	0x0976, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    5a94:	01 99       	sbic	0x00, 1	; 0
    5a96:	05 c0       	rjmp	.+10     	; 0x5aa2 <ReadControllers+0x1c>
    5a98:	80 91 76 09 	lds	r24, 0x0976
    5a9c:	82 60       	ori	r24, 0x02	; 2
    5a9e:	80 93 76 09 	sts	0x0976, r24
			
	//read the standard buttons
	ReadButtons();
    5aa2:	0c 94 0d 2d 	jmp	0x5a1a	; 0x5a1a <ReadButtons>

00005aa6 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    5aa6:	cf 93       	push	r28
    5aa8:	df 93       	push	r29
    5aaa:	c0 e0       	ldi	r28, 0x00	; 0
    5aac:	d0 e0       	ldi	r29, 0x00	; 0
    5aae:	fe 01       	movw	r30, r28
    5ab0:	e0 55       	subi	r30, 0x50	; 80
    5ab2:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    5ab4:	64 91       	lpm	r22, Z
    5ab6:	ce 01       	movw	r24, r28
    5ab8:	0e 94 ef 2c 	call	0x59de	; 0x59de <WriteEeprom>
    5abc:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    5abe:	c0 32       	cpi	r28, 0x20	; 32
    5ac0:	d1 05       	cpc	r29, r1
    5ac2:	a9 f7       	brne	.-22     	; 0x5aae <FormatEeprom+0x8>
    5ac4:	c0 e2       	ldi	r28, 0x20	; 32
    5ac6:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    5ac8:	6f ef       	ldi	r22, 0xFF	; 255
    5aca:	ce 01       	movw	r24, r28
    5acc:	0e 94 ef 2c 	call	0x59de	; 0x59de <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    5ad0:	6f ef       	ldi	r22, 0xFF	; 255
    5ad2:	ce 01       	movw	r24, r28
    5ad4:	01 96       	adiw	r24, 0x01	; 1
    5ad6:	0e 94 ef 2c 	call	0x59de	; 0x59de <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    5ada:	a0 96       	adiw	r28, 0x20	; 32
    5adc:	c1 15       	cp	r28, r1
    5ade:	88 e0       	ldi	r24, 0x08	; 8
    5ae0:	d8 07       	cpc	r29, r24
    5ae2:	91 f7       	brne	.-28     	; 0x5ac8 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    5ae4:	df 91       	pop	r29
    5ae6:	cf 91       	pop	r28
    5ae8:	08 95       	ret

00005aea <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    5aea:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    5aec:	80 e0       	ldi	r24, 0x00	; 0
    5aee:	90 e0       	ldi	r25, 0x00	; 0
    5af0:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <ReadEeprom>
    5af4:	c8 2f       	mov	r28, r24
    5af6:	81 e0       	ldi	r24, 0x01	; 1
    5af8:	90 e0       	ldi	r25, 0x00	; 0
    5afa:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <ReadEeprom>
    5afe:	28 2f       	mov	r18, r24
    5b00:	30 e0       	ldi	r19, 0x00	; 0
    5b02:	32 2f       	mov	r19, r18
    5b04:	22 27       	eor	r18, r18
    5b06:	2c 0f       	add	r18, r28
    5b08:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    5b0a:	81 e0       	ldi	r24, 0x01	; 1
    5b0c:	2a 35       	cpi	r18, 0x5A	; 90
    5b0e:	35 45       	sbci	r19, 0x55	; 85
    5b10:	09 f0       	breq	.+2      	; 0x5b14 <isEepromFormatted+0x2a>
    5b12:	80 e0       	ldi	r24, 0x00	; 0
}
    5b14:	cf 91       	pop	r28
    5b16:	08 95       	ret

00005b18 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    5b18:	cf 92       	push	r12
    5b1a:	df 92       	push	r13
    5b1c:	ef 92       	push	r14
    5b1e:	ff 92       	push	r15
    5b20:	0f 93       	push	r16
    5b22:	1f 93       	push	r17
    5b24:	cf 93       	push	r28
    5b26:	df 93       	push	r29
    5b28:	1f 92       	push	r1
    5b2a:	cd b7       	in	r28, 0x3d	; 61
    5b2c:	de b7       	in	r29, 0x3e	; 62
    5b2e:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    5b30:	0e 94 75 2d 	call	0x5aea	; 0x5aea <isEepromFormatted>
    5b34:	88 23       	and	r24, r24
    5b36:	09 f4       	brne	.+2      	; 0x5b3a <EepromWriteBlock+0x22>
    5b38:	4d c0       	rjmp	.+154    	; 0x5bd4 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    5b3a:	f6 01       	movw	r30, r12
    5b3c:	80 81       	ld	r24, Z
    5b3e:	91 81       	ldd	r25, Z+1	; 0x01
    5b40:	8f 3f       	cpi	r24, 0xFF	; 255
    5b42:	ff ef       	ldi	r31, 0xFF	; 255
    5b44:	9f 07       	cpc	r25, r31
    5b46:	09 f4       	brne	.+2      	; 0x5b4a <EepromWriteBlock+0x32>
    5b48:	47 c0       	rjmp	.+142    	; 0x5bd8 <EepromWriteBlock+0xc0>
    5b4a:	8a 35       	cpi	r24, 0x5A	; 90
    5b4c:	95 45       	sbci	r25, 0x55	; 85
    5b4e:	09 f4       	brne	.+2      	; 0x5b52 <EepromWriteBlock+0x3a>
    5b50:	43 c0       	rjmp	.+134    	; 0x5bd8 <EepromWriteBlock+0xc0>
    5b52:	00 e2       	ldi	r16, 0x20	; 32
    5b54:	10 e0       	ldi	r17, 0x00	; 0
    5b56:	f1 2c       	mov	r15, r1
    5b58:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    5b5a:	c8 01       	movw	r24, r16
    5b5c:	49 83       	std	Y+1, r20	; 0x01
    5b5e:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <ReadEeprom>
    5b62:	e8 2e       	mov	r14, r24
    5b64:	c8 01       	movw	r24, r16
    5b66:	01 96       	adiw	r24, 0x01	; 1
    5b68:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <ReadEeprom>
    5b6c:	28 2f       	mov	r18, r24
    5b6e:	30 e0       	ldi	r19, 0x00	; 0
    5b70:	32 2f       	mov	r19, r18
    5b72:	22 27       	eor	r18, r18
    5b74:	c9 01       	movw	r24, r18
    5b76:	8e 0d       	add	r24, r14
    5b78:	91 1d       	adc	r25, r1
		if(id==block->id){
    5b7a:	f6 01       	movw	r30, r12
    5b7c:	20 81       	ld	r18, Z
    5b7e:	31 81       	ldd	r19, Z+1	; 0x01
    5b80:	49 81       	ldd	r20, Y+1	; 0x01
    5b82:	82 17       	cp	r24, r18
    5b84:	93 07       	cpc	r25, r19
    5b86:	19 f4       	brne	.+6      	; 0x5b8e <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    5b88:	ff 20       	and	r15, r15
    5b8a:	89 f0       	breq	.+34     	; 0x5bae <EepromWriteBlock+0x96>
    5b8c:	0c c0       	rjmp	.+24     	; 0x5ba6 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    5b8e:	01 96       	adiw	r24, 0x01	; 1
    5b90:	19 f4       	brne	.+6      	; 0x5b98 <EepromWriteBlock+0x80>
    5b92:	f1 10       	cpse	r15, r1
    5b94:	01 c0       	rjmp	.+2      	; 0x5b98 <EepromWriteBlock+0x80>
    5b96:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    5b98:	4f 5f       	subi	r20, 0xFF	; 255
    5b9a:	00 5e       	subi	r16, 0xE0	; 224
    5b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b9e:	40 34       	cpi	r20, 0x40	; 64
    5ba0:	e1 f6       	brne	.-72     	; 0x5b5a <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    5ba2:	ff 20       	and	r15, r15
    5ba4:	d9 f0       	breq	.+54     	; 0x5bdc <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    5ba6:	20 e2       	ldi	r18, 0x20	; 32
    5ba8:	f2 9e       	mul	r15, r18
    5baa:	80 01       	movw	r16, r0
    5bac:	11 24       	eor	r1, r1
    5bae:	76 01       	movw	r14, r12
    5bb0:	80 e2       	ldi	r24, 0x20	; 32
    5bb2:	e8 0e       	add	r14, r24
    5bb4:	f1 1c       	adc	r15, r1
    5bb6:	0c 19       	sub	r16, r12
    5bb8:	1d 09       	sbc	r17, r13
    5bba:	c6 01       	movw	r24, r12
    5bbc:	80 0f       	add	r24, r16
    5bbe:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    5bc0:	f6 01       	movw	r30, r12
    5bc2:	61 91       	ld	r22, Z+
    5bc4:	6f 01       	movw	r12, r30
    5bc6:	0e 94 ef 2c 	call	0x59de	; 0x59de <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    5bca:	ce 14       	cp	r12, r14
    5bcc:	df 04       	cpc	r13, r15
    5bce:	a9 f7       	brne	.-22     	; 0x5bba <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    5bd0:	80 e0       	ldi	r24, 0x00	; 0
    5bd2:	05 c0       	rjmp	.+10     	; 0x5bde <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    5bd4:	84 e0       	ldi	r24, 0x04	; 4
    5bd6:	03 c0       	rjmp	.+6      	; 0x5bde <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    5bd8:	81 e0       	ldi	r24, 0x01	; 1
    5bda:	01 c0       	rjmp	.+2      	; 0x5bde <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    5bdc:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    5bde:	0f 90       	pop	r0
    5be0:	df 91       	pop	r29
    5be2:	cf 91       	pop	r28
    5be4:	1f 91       	pop	r17
    5be6:	0f 91       	pop	r16
    5be8:	ff 90       	pop	r15
    5bea:	ef 90       	pop	r14
    5bec:	df 90       	pop	r13
    5bee:	cf 90       	pop	r12
    5bf0:	08 95       	ret

00005bf2 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    5bf2:	df 92       	push	r13
    5bf4:	ef 92       	push	r14
    5bf6:	ff 92       	push	r15
    5bf8:	0f 93       	push	r16
    5bfa:	1f 93       	push	r17
    5bfc:	cf 93       	push	r28
    5bfe:	df 93       	push	r29
    5c00:	7c 01       	movw	r14, r24
    5c02:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    5c04:	0e 94 75 2d 	call	0x5aea	; 0x5aea <isEepromFormatted>
    5c08:	88 23       	and	r24, r24
    5c0a:	89 f1       	breq	.+98     	; 0x5c6e <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    5c0c:	8f ef       	ldi	r24, 0xFF	; 255
    5c0e:	e8 16       	cp	r14, r24
    5c10:	f8 06       	cpc	r15, r24
    5c12:	79 f1       	breq	.+94     	; 0x5c72 <EepromReadBlock+0x80>
    5c14:	00 e0       	ldi	r16, 0x00	; 0
    5c16:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    5c18:	c8 01       	movw	r24, r16
    5c1a:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <ReadEeprom>
    5c1e:	d8 2e       	mov	r13, r24
    5c20:	c8 01       	movw	r24, r16
    5c22:	01 96       	adiw	r24, 0x01	; 1
    5c24:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <ReadEeprom>
    5c28:	28 2f       	mov	r18, r24
    5c2a:	30 e0       	ldi	r19, 0x00	; 0
    5c2c:	32 2f       	mov	r19, r18
    5c2e:	22 27       	eor	r18, r18
    5c30:	2d 0d       	add	r18, r13
    5c32:	31 1d       	adc	r19, r1
		if(id==blockId){
    5c34:	2e 15       	cp	r18, r14
    5c36:	3f 05       	cpc	r19, r15
    5c38:	39 f4       	brne	.+14     	; 0x5c48 <EepromReadBlock+0x56>
    5c3a:	7e 01       	movw	r14, r28
    5c3c:	80 e2       	ldi	r24, 0x20	; 32
    5c3e:	e8 0e       	add	r14, r24
    5c40:	f1 1c       	adc	r15, r1
    5c42:	0c 1b       	sub	r16, r28
    5c44:	1d 0b       	sbc	r17, r29
    5c46:	08 c0       	rjmp	.+16     	; 0x5c58 <EepromReadBlock+0x66>
    5c48:	00 5e       	subi	r16, 0xE0	; 224
    5c4a:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    5c4c:	01 15       	cp	r16, r1
    5c4e:	84 e0       	ldi	r24, 0x04	; 4
    5c50:	18 07       	cpc	r17, r24
    5c52:	11 f7       	brne	.-60     	; 0x5c18 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    5c54:	83 e0       	ldi	r24, 0x03	; 3
    5c56:	0e c0       	rjmp	.+28     	; 0x5c74 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    5c58:	ce 01       	movw	r24, r28
    5c5a:	80 0f       	add	r24, r16
    5c5c:	91 1f       	adc	r25, r17
    5c5e:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <ReadEeprom>
    5c62:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    5c64:	ce 15       	cp	r28, r14
    5c66:	df 05       	cpc	r29, r15
    5c68:	b9 f7       	brne	.-18     	; 0x5c58 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    5c6a:	80 e0       	ldi	r24, 0x00	; 0
    5c6c:	03 c0       	rjmp	.+6      	; 0x5c74 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    5c6e:	84 e0       	ldi	r24, 0x04	; 4
    5c70:	01 c0       	rjmp	.+2      	; 0x5c74 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    5c72:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    5c74:	df 91       	pop	r29
    5c76:	cf 91       	pop	r28
    5c78:	1f 91       	pop	r17
    5c7a:	0f 91       	pop	r16
    5c7c:	ff 90       	pop	r15
    5c7e:	ef 90       	pop	r14
    5c80:	df 90       	pop	r13
    5c82:	08 95       	ret

00005c84 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    5c84:	fc 01       	movw	r30, r24
    5c86:	45 87       	std	Z+13, r20	; 0x0d
    5c88:	08 95       	ret

00005c8a <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    5c8a:	e2 e4       	ldi	r30, 0x42	; 66
    5c8c:	f9 e0       	ldi	r31, 0x09	; 9
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	91 e0       	ldi	r25, 0x01	; 1
    5c92:	95 8b       	std	Z+21, r25	; 0x15
    5c94:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    5c96:	43 8b       	std	Z+19, r20	; 0x13
    5c98:	08 95       	ret

00005c9a <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    5c9a:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    5c9c:	90 81       	ld	r25, Z
    5c9e:	9f 75       	andi	r25, 0x5F	; 95
    5ca0:	90 83       	st	Z, r25
    5ca2:	08 95       	ret

00005ca4 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    5ca4:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    5ca6:	90 81       	ld	r25, Z
    5ca8:	90 64       	ori	r25, 0x40	; 64
    5caa:	90 83       	st	Z, r25
    5cac:	08 95       	ret

00005cae <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    5cae:	fc 01       	movw	r30, r24
    5cb0:	44 87       	std	Z+12, r20	; 0x0c
    5cb2:	08 95       	ret

00005cb4 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    5cb4:	fc 01       	movw	r30, r24
    5cb6:	47 83       	std	Z+7, r20	; 0x07
    5cb8:	08 95       	ret

00005cba <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    5cba:	fc 01       	movw	r30, r24
    5cbc:	40 87       	std	Z+8, r20	; 0x08
    5cbe:	08 95       	ret

00005cc0 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    5cc0:	1f 93       	push	r17
    5cc2:	cf 93       	push	r28
    5cc4:	df 93       	push	r29
    5cc6:	ec 01       	movw	r28, r24
    5cc8:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    5cca:	29 81       	ldd	r18, Y+1	; 0x01
    5ccc:	30 e0       	ldi	r19, 0x00	; 0
    5cce:	f9 01       	movw	r30, r18
    5cd0:	ee 0f       	add	r30, r30
    5cd2:	ff 1f       	adc	r31, r31
    5cd4:	e8 5f       	subi	r30, 0xF8	; 248
    5cd6:	fa 49       	sbci	r31, 0x9A	; 154
    5cd8:	65 91       	lpm	r22, Z+
    5cda:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    5cdc:	f9 01       	movw	r30, r18
    5cde:	e4 0f       	add	r30, r20
    5ce0:	f1 1d       	adc	r31, r1
    5ce2:	47 fd       	sbrc	r20, 7
    5ce4:	fa 95       	dec	r31
    5ce6:	ee 0f       	add	r30, r30
    5ce8:	ff 1f       	adc	r31, r31
    5cea:	e8 5f       	subi	r30, 0xF8	; 248
    5cec:	fa 49       	sbci	r31, 0x9A	; 154
    5cee:	85 91       	lpm	r24, Z+
    5cf0:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    5cf2:	86 1b       	sub	r24, r22
    5cf4:	97 0b       	sbc	r25, r23
    5cf6:	60 91 7e 09 	lds	r22, 0x097E
    5cfa:	70 e0       	ldi	r23, 0x00	; 0
    5cfc:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
	if(delta==0)delta++;
    5d00:	61 15       	cp	r22, r1
    5d02:	71 05       	cpc	r23, r1
    5d04:	11 f4       	brne	.+4      	; 0x5d0a <PatchCommand11+0x4a>
    5d06:	61 e0       	ldi	r22, 0x01	; 1
    5d08:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    5d0a:	86 e0       	ldi	r24, 0x06	; 6
    5d0c:	18 9f       	mul	r17, r24
    5d0e:	f0 01       	movw	r30, r0
    5d10:	11 24       	eor	r1, r1
    5d12:	ee 5b       	subi	r30, 0xBE	; 190
    5d14:	f6 4f       	sbci	r31, 0xF6	; 246
    5d16:	81 81       	ldd	r24, Z+1	; 0x01
    5d18:	92 81       	ldd	r25, Z+2	; 0x02
    5d1a:	86 0f       	add	r24, r22
    5d1c:	97 1f       	adc	r25, r23
    5d1e:	92 83       	std	Z+2, r25	; 0x02
    5d20:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    5d22:	7b 83       	std	Y+3, r23	; 0x03
    5d24:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    5d26:	88 81       	ld	r24, Y
    5d28:	88 60       	ori	r24, 0x08	; 8
    5d2a:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    5d2c:	89 81       	ldd	r24, Y+1	; 0x01
    5d2e:	48 0f       	add	r20, r24
    5d30:	4c 83       	std	Y+4, r20	; 0x04
}
    5d32:	df 91       	pop	r29
    5d34:	cf 91       	pop	r28
    5d36:	1f 91       	pop	r17
    5d38:	08 95       	ret

00005d3a <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    5d3a:	40 93 7e 09 	sts	0x097E, r20
    5d3e:	08 95       	ret

00005d40 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    5d40:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    5d42:	64 2f       	mov	r22, r20
    5d44:	0c 94 37 32 	jmp	0x646e	; 0x646e <SetMixerWave>

00005d48 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    5d48:	fc 01       	movw	r30, r24
    5d4a:	86 2f       	mov	r24, r22
	track->note+=param;
    5d4c:	91 81       	ldd	r25, Z+1	; 0x01
    5d4e:	64 2f       	mov	r22, r20
    5d50:	69 0f       	add	r22, r25
    5d52:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    5d54:	0c 94 20 32 	jmp	0x6440	; 0x6440 <SetMixerNote>

00005d58 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    5d58:	fc 01       	movw	r30, r24
    5d5a:	86 2f       	mov	r24, r22
	track->note-=param;
    5d5c:	91 81       	ldd	r25, Z+1	; 0x01
    5d5e:	69 2f       	mov	r22, r25
    5d60:	64 1b       	sub	r22, r20
    5d62:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    5d64:	0c 94 20 32 	jmp	0x6440	; 0x6440 <SetMixerNote>

00005d68 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    5d68:	0f 93       	push	r16
    5d6a:	1f 93       	push	r17
    5d6c:	cf 93       	push	r28
    5d6e:	df 93       	push	r29
    5d70:	1f 92       	push	r1
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
    5d76:	8c 01       	movw	r16, r24
    5d78:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    5d7a:	64 2f       	mov	r22, r20
    5d7c:	49 83       	std	Y+1, r20	; 0x01
    5d7e:	0e 94 20 32 	call	0x6440	; 0x6440 <SetMixerNote>
	track->note=param;
    5d82:	49 81       	ldd	r20, Y+1	; 0x01
    5d84:	f8 01       	movw	r30, r16
    5d86:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5d88:	80 81       	ld	r24, Z
    5d8a:	87 7f       	andi	r24, 0xF7	; 247
    5d8c:	80 83       	st	Z, r24
}
    5d8e:	0f 90       	pop	r0
    5d90:	df 91       	pop	r29
    5d92:	cf 91       	pop	r28
    5d94:	1f 91       	pop	r17
    5d96:	0f 91       	pop	r16
    5d98:	08 95       	ret

00005d9a <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    5d9a:	90 93 ea 09 	sts	0x09EA, r25
    5d9e:	80 93 e9 09 	sts	0x09E9, r24

	masterVolume=DEFAULT_MASTER_VOL;
    5da2:	8f e6       	ldi	r24, 0x6F	; 111
    5da4:	80 93 ec 09 	sts	0x09EC, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    5da8:	10 92 40 09 	sts	0x0940, r1
    5dac:	e7 e8       	ldi	r30, 0x87	; 135
    5dae:	f9 e0       	ldi	r31, 0x09	; 9

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5db0:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    5db2:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    5db4:	28 e1       	ldi	r18, 0x18	; 24
    5db6:	df 01       	movw	r26, r30
    5db8:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5dba:	8c 93       	st	X, r24
    5dbc:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    5dbe:	1c 92       	st	X, r1
    5dc0:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    5dc2:	9c 93       	st	X, r25
    5dc4:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5dc6:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    5dc8:	10 82       	st	Z, r1
    5dca:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    5dcc:	2c 93       	st	X, r18
    5dce:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    5dd0:	8c 93       	st	X, r24
    5dd2:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5dd4:	39 e0       	ldi	r19, 0x09	; 9
    5dd6:	e5 3f       	cpi	r30, 0xF5	; 245
    5dd8:	f3 07       	cpc	r31, r19
    5dda:	69 f7       	brne	.-38     	; 0x5db6 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    5ddc:	08 95       	ret

00005dde <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    5dde:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    5de0:	ed 91       	ld	r30, X+
    5de2:	fc 91       	ld	r31, X
    5de4:	11 97       	sbiw	r26, 0x01	; 1
    5de6:	9f 01       	movw	r18, r30
    5de8:	2f 5f       	subi	r18, 0xFF	; 255
    5dea:	3f 4f       	sbci	r19, 0xFF	; 255
    5dec:	11 96       	adiw	r26, 0x01	; 1
    5dee:	3c 93       	st	X, r19
    5df0:	2e 93       	st	-X, r18
    5df2:	e4 91       	lpm	r30, Z
    5df4:	e7 fd       	sbrc	r30, 7
    5df6:	03 c0       	rjmp	.+6      	; 0x5dfe <ReadVarLen+0x20>
    5df8:	8e 2f       	mov	r24, r30
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	08 95       	ret
    {
       value &= 0x7F;
    5dfe:	ef 77       	andi	r30, 0x7F	; 127
    5e00:	8e 2f       	mov	r24, r30
    5e02:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    5e04:	96 95       	lsr	r25
    5e06:	98 2f       	mov	r25, r24
    5e08:	88 27       	eor	r24, r24
    5e0a:	97 95       	ror	r25
    5e0c:	87 95       	ror	r24
    5e0e:	2f 5f       	subi	r18, 0xFF	; 255
    5e10:	3f 4f       	sbci	r19, 0xFF	; 255
    5e12:	f9 01       	movw	r30, r18
    5e14:	31 97       	sbiw	r30, 0x01	; 1
    5e16:	e4 91       	lpm	r30, Z
    5e18:	4e 2f       	mov	r20, r30
    5e1a:	4f 77       	andi	r20, 0x7F	; 127
    5e1c:	84 0f       	add	r24, r20
    5e1e:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    5e20:	e7 fd       	sbrc	r30, 7
    5e22:	f0 cf       	rjmp	.-32     	; 0x5e04 <ReadVarLen+0x26>
    5e24:	2d 93       	st	X+, r18
    5e26:	3c 93       	st	X, r19
    }


    return value;
}
    5e28:	08 95       	ret

00005e2a <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    5e2a:	cf 92       	push	r12
    5e2c:	df 92       	push	r13
    5e2e:	ff 92       	push	r15
    5e30:	0f 93       	push	r16
    5e32:	1f 93       	push	r17
    5e34:	cf 93       	push	r28
    5e36:	df 93       	push	r29
    5e38:	1f 92       	push	r1
    5e3a:	cd b7       	in	r28, 0x3d	; 61
    5e3c:	de b7       	in	r29, 0x3e	; 62
    5e3e:	18 2f       	mov	r17, r24
    5e40:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    5e42:	c8 2e       	mov	r12, r24
    5e44:	d1 2c       	mov	r13, r1
    5e46:	36 e1       	ldi	r19, 0x16	; 22
    5e48:	83 9f       	mul	r24, r19
    5e4a:	f0 01       	movw	r30, r0
    5e4c:	11 24       	eor	r1, r1
    5e4e:	e7 58       	subi	r30, 0x87	; 135
    5e50:	f6 4f       	sbci	r31, 0xF6	; 246
    5e52:	80 81       	ld	r24, Z
    5e54:	f8 2e       	mov	r15, r24
    5e56:	ff 1c       	adc	r15, r15
    5e58:	ff 24       	eor	r15, r15
    5e5a:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    5e5c:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    5e5e:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    5e60:	9f ef       	ldi	r25, 0xFF	; 255
    5e62:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    5e64:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    5e66:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    5e68:	87 7b       	andi	r24, 0xB7	; 183
    5e6a:	80 62       	ori	r24, 0x20	; 32
    5e6c:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    5e6e:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    5e70:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    5e72:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    5e74:	13 30       	cpi	r17, 0x03	; 3
    5e76:	69 f4       	brne	.+26     	; 0x5e92 <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    5e78:	f1 10       	cpse	r15, r1
    5e7a:	01 c0       	rjmp	.+2      	; 0x5e7e <TriggerCommon+0x54>
    5e7c:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    5e7e:	81 e0       	ldi	r24, 0x01	; 1
    5e80:	91 e0       	ldi	r25, 0x01	; 1
    5e82:	90 93 57 09 	sts	0x0957, r25
    5e86:	80 93 56 09 	sts	0x0956, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    5e8a:	81 e0       	ldi	r24, 0x01	; 1
    5e8c:	80 93 55 09 	sts	0x0955, r24
    5e90:	3c c0       	rjmp	.+120    	; 0x5f0a <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    5e92:	14 30       	cpi	r17, 0x04	; 4
    5e94:	09 f0       	breq	.+2      	; 0x5e98 <TriggerCommon+0x6e>
    5e96:	2f c0       	rjmp	.+94     	; 0x5ef6 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    5e98:	10 92 5d 09 	sts	0x095D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    5e9c:	80 91 e9 09 	lds	r24, 0x09E9
    5ea0:	90 91 ea 09 	lds	r25, 0x09EA
    5ea4:	e9 e0       	ldi	r30, 0x09	; 9
    5ea6:	6e 9f       	mul	r22, r30
    5ea8:	80 0d       	add	r24, r0
    5eaa:	91 1d       	adc	r25, r1
    5eac:	11 24       	eor	r1, r1
    5eae:	fc 01       	movw	r30, r24
    5eb0:	31 96       	adiw	r30, 0x01	; 1
    5eb2:	65 91       	lpm	r22, Z+
    5eb4:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    5eb6:	70 93 5f 09 	sts	0x095F, r23
    5eba:	60 93 5e 09 	sts	0x095E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    5ebe:	ac 01       	movw	r20, r24
    5ec0:	49 5f       	subi	r20, 0xF9	; 249
    5ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ec4:	fa 01       	movw	r30, r20
    5ec6:	a5 91       	lpm	r26, Z+
    5ec8:	b4 91       	lpm	r27, Z
    5eca:	05 96       	adiw	r24, 0x05	; 5
    5ecc:	fc 01       	movw	r30, r24
    5ece:	85 91       	lpm	r24, Z+
    5ed0:	94 91       	lpm	r25, Z
    5ed2:	a8 1b       	sub	r26, r24
    5ed4:	b9 0b       	sbc	r27, r25
    5ed6:	b0 93 61 09 	sts	0x0961, r27
    5eda:	a0 93 60 09 	sts	0x0960, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    5ede:	fa 01       	movw	r30, r20
    5ee0:	85 91       	lpm	r24, Z+
    5ee2:	94 91       	lpm	r25, Z
    5ee4:	68 0f       	add	r22, r24
    5ee6:	79 1f       	adc	r23, r25
    5ee8:	70 93 63 09 	sts	0x0963, r23
    5eec:	60 93 62 09 	sts	0x0962, r22
				SetMixerNote(channel,note);
    5ef0:	62 2f       	mov	r22, r18
    5ef2:	84 e0       	ldi	r24, 0x04	; 4
    5ef4:	08 c0       	rjmp	.+16     	; 0x5f06 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    5ef6:	60 e0       	ldi	r22, 0x00	; 0
    5ef8:	81 2f       	mov	r24, r17
    5efa:	29 83       	std	Y+1, r18	; 0x01
    5efc:	0e 94 37 32 	call	0x646e	; 0x646e <SetMixerWave>
			SetMixerNote(channel,note);
    5f00:	29 81       	ldd	r18, Y+1	; 0x01
    5f02:	62 2f       	mov	r22, r18
    5f04:	81 2f       	mov	r24, r17
    5f06:	0e 94 20 32 	call	0x6440	; 0x6440 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    5f0a:	86 e1       	ldi	r24, 0x16	; 22
    5f0c:	8c 9d       	mul	r24, r12
    5f0e:	f0 01       	movw	r30, r0
    5f10:	8d 9d       	mul	r24, r13
    5f12:	f0 0d       	add	r31, r0
    5f14:	11 24       	eor	r1, r1
    5f16:	e7 58       	subi	r30, 0x87	; 135
    5f18:	f6 4f       	sbci	r31, 0xF6	; 246

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    5f1a:	ff 20       	and	r15, r15
    5f1c:	11 f0       	breq	.+4      	; 0x5f22 <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    5f1e:	07 87       	std	Z+15, r16	; 0x0f
    5f20:	01 c0       	rjmp	.+2      	; 0x5f24 <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    5f22:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    5f24:	e0 91 e9 09 	lds	r30, 0x09E9
    5f28:	f0 91 ea 09 	lds	r31, 0x09EA
    5f2c:	39 e0       	ldi	r19, 0x09	; 9
    5f2e:	03 9f       	mul	r16, r19
    5f30:	e0 0d       	add	r30, r0
    5f32:	f1 1d       	adc	r31, r1
    5f34:	11 24       	eor	r1, r1
    5f36:	33 96       	adiw	r30, 0x03	; 3
    5f38:	85 91       	lpm	r24, Z+
    5f3a:	94 91       	lpm	r25, Z
	if(pos==NULL){
    5f3c:	00 97       	sbiw	r24, 0x00	; 0
    5f3e:	59 f4       	brne	.+22     	; 0x5f56 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    5f40:	86 e1       	ldi	r24, 0x16	; 22
    5f42:	8c 9d       	mul	r24, r12
    5f44:	f0 01       	movw	r30, r0
    5f46:	8d 9d       	mul	r24, r13
    5f48:	f0 0d       	add	r31, r0
    5f4a:	11 24       	eor	r1, r1
    5f4c:	e7 58       	subi	r30, 0x87	; 135
    5f4e:	f6 4f       	sbci	r31, 0xF6	; 246
    5f50:	15 8a       	std	Z+21, r1	; 0x15
    5f52:	14 8a       	std	Z+20, r1	; 0x14
    5f54:	0e c0       	rjmp	.+28     	; 0x5f72 <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    5f56:	fc 01       	movw	r30, r24
    5f58:	24 91       	lpm	r18, Z
    5f5a:	36 e1       	ldi	r19, 0x16	; 22
    5f5c:	3c 9d       	mul	r19, r12
    5f5e:	f0 01       	movw	r30, r0
    5f60:	3d 9d       	mul	r19, r13
    5f62:	f0 0d       	add	r31, r0
    5f64:	11 24       	eor	r1, r1
    5f66:	e7 58       	subi	r30, 0x87	; 135
    5f68:	f6 4f       	sbci	r31, 0xF6	; 246
    5f6a:	21 8b       	std	Z+17, r18	; 0x11
    5f6c:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    5f6e:	95 8b       	std	Z+21, r25	; 0x15
    5f70:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    5f72:	0f 90       	pop	r0
    5f74:	df 91       	pop	r29
    5f76:	cf 91       	pop	r28
    5f78:	1f 91       	pop	r17
    5f7a:	0f 91       	pop	r16
    5f7c:	ff 90       	pop	r15
    5f7e:	df 90       	pop	r13
    5f80:	cf 90       	pop	r12
    5f82:	08 95       	ret

00005f84 <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    5f84:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    5f86:	a8 2f       	mov	r26, r24
    5f88:	b0 e0       	ldi	r27, 0x00	; 0
    5f8a:	96 e1       	ldi	r25, 0x16	; 22
    5f8c:	89 9f       	mul	r24, r25
    5f8e:	f0 01       	movw	r30, r0
    5f90:	11 24       	eor	r1, r1
    5f92:	e7 58       	subi	r30, 0x87	; 135
    5f94:	f6 4f       	sbci	r31, 0xF6	; 246
    5f96:	90 81       	ld	r25, Z
    5f98:	95 ff       	sbrs	r25, 5
    5f9a:	02 c0       	rjmp	.+4      	; 0x5fa0 <TriggerNote+0x1c>
    5f9c:	97 fd       	sbrc	r25, 7
    5f9e:	28 c0       	rjmp	.+80     	; 0x5ff0 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    5fa0:	31 11       	cpse	r19, r1
    5fa2:	18 c0       	rjmp	.+48     	; 0x5fd4 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    5fa4:	86 e1       	ldi	r24, 0x16	; 22
    5fa6:	8a 9f       	mul	r24, r26
    5fa8:	f0 01       	movw	r30, r0
    5faa:	8b 9f       	mul	r24, r27
    5fac:	f0 0d       	add	r31, r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	e7 58       	subi	r30, 0x87	; 135
    5fb2:	f6 4f       	sbci	r31, 0xF6	; 246
    5fb4:	85 85       	ldd	r24, Z+13	; 0x0d
    5fb6:	81 11       	cpse	r24, r1
    5fb8:	02 c0       	rjmp	.+4      	; 0x5fbe <TriggerNote+0x3a>
    5fba:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    5fbc:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    5fbe:	86 e1       	ldi	r24, 0x16	; 22
    5fc0:	8a 9f       	mul	r24, r26
    5fc2:	f0 01       	movw	r30, r0
    5fc4:	8b 9f       	mul	r24, r27
    5fc6:	f0 0d       	add	r31, r0
    5fc8:	11 24       	eor	r1, r1
    5fca:	e7 58       	subi	r30, 0x87	; 135
    5fcc:	f6 4f       	sbci	r31, 0xF6	; 246
    5fce:	9f 7b       	andi	r25, 0xBF	; 191
    5fd0:	90 83       	st	Z, r25
    5fd2:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    5fd4:	26 e1       	ldi	r18, 0x16	; 22
    5fd6:	2a 9f       	mul	r18, r26
    5fd8:	f0 01       	movw	r30, r0
    5fda:	2b 9f       	mul	r18, r27
    5fdc:	f0 0d       	add	r31, r0
    5fde:	11 24       	eor	r1, r1
    5fe0:	e7 58       	subi	r30, 0x87	; 135
    5fe2:	f6 4f       	sbci	r31, 0xF6	; 246
    5fe4:	9f 77       	andi	r25, 0x7F	; 127
    5fe6:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    5fe8:	24 2f       	mov	r18, r20
    5fea:	43 2f       	mov	r20, r19
    5fec:	0c 94 15 2f 	jmp	0x5e2a	; 0x5e2a <TriggerCommon>
    5ff0:	08 95       	ret

00005ff2 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    5ff2:	5f 92       	push	r5
    5ff4:	6f 92       	push	r6
    5ff6:	7f 92       	push	r7
    5ff8:	8f 92       	push	r8
    5ffa:	9f 92       	push	r9
    5ffc:	af 92       	push	r10
    5ffe:	bf 92       	push	r11
    6000:	cf 92       	push	r12
    6002:	df 92       	push	r13
    6004:	ef 92       	push	r14
    6006:	ff 92       	push	r15
    6008:	0f 93       	push	r16
    600a:	1f 93       	push	r17
    600c:	cf 93       	push	r28
    600e:	df 93       	push	r29
    6010:	c9 e7       	ldi	r28, 0x79	; 121
    6012:	d9 e0       	ldi	r29, 0x09	; 9
    6014:	82 e4       	ldi	r24, 0x42	; 66
    6016:	e8 2e       	mov	r14, r24
    6018:	89 e0       	ldi	r24, 0x09	; 9
    601a:	f8 2e       	mov	r15, r24
    601c:	d7 01       	movw	r26, r14
    601e:	9e 01       	movw	r18, r28
    6020:	40 e0       	ldi	r20, 0x00	; 0
    6022:	50 e0       	ldi	r21, 0x00	; 0
    6024:	ca 01       	movw	r24, r20
    6026:	87 58       	subi	r24, 0x87	; 135
    6028:	96 4f       	sbci	r25, 0xF6	; 246
    602a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    602c:	fc 01       	movw	r30, r24
    602e:	85 85       	ldd	r24, Z+13	; 0x0d
    6030:	88 23       	and	r24, r24
    6032:	91 f0       	breq	.+36     	; 0x6058 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    6034:	64 85       	ldd	r22, Z+12	; 0x0c
    6036:	99 27       	eor	r25, r25
    6038:	87 fd       	sbrc	r24, 7
    603a:	90 95       	com	r25
    603c:	86 0f       	add	r24, r22
    603e:	91 1d       	adc	r25, r1
    6040:	8f 3f       	cpi	r24, 0xFF	; 255
    6042:	91 05       	cpc	r25, r1
    6044:	19 f0       	breq	.+6      	; 0x604c <ProcessMusic+0x5a>
    6046:	14 f0       	brlt	.+4      	; 0x604c <ProcessMusic+0x5a>
    6048:	8f ef       	ldi	r24, 0xFF	; 255
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	97 ff       	sbrs	r25, 7
    604e:	02 c0       	rjmp	.+4      	; 0x6054 <ProcessMusic+0x62>
    6050:	80 e0       	ldi	r24, 0x00	; 0
    6052:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    6054:	f6 01       	movw	r30, r12
    6056:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    6058:	f9 01       	movw	r30, r18
    605a:	10 81       	ld	r17, Z
    605c:	13 ff       	sbrs	r17, 3
    605e:	29 c0       	rjmp	.+82     	; 0x60b2 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    6060:	62 81       	ldd	r22, Z+2	; 0x02
    6062:	73 81       	ldd	r23, Z+3	; 0x03
    6064:	11 96       	adiw	r26, 0x01	; 1
    6066:	8d 91       	ld	r24, X+
    6068:	9c 91       	ld	r25, X
    606a:	12 97       	sbiw	r26, 0x02	; 2
    606c:	86 0f       	add	r24, r22
    606e:	97 1f       	adc	r25, r23
    6070:	12 96       	adiw	r26, 0x02	; 2
    6072:	9c 93       	st	X, r25
    6074:	8e 93       	st	-X, r24
    6076:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    6078:	f6 01       	movw	r30, r12
    607a:	04 81       	ldd	r16, Z+4	; 0x04
    607c:	e0 2f       	mov	r30, r16
    607e:	f0 e0       	ldi	r31, 0x00	; 0
    6080:	ee 0f       	add	r30, r30
    6082:	ff 1f       	adc	r31, r31
    6084:	e8 5f       	subi	r30, 0xF8	; 248
    6086:	fa 49       	sbci	r31, 0x9A	; 154
    6088:	c5 90       	lpm	r12, Z+
    608a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    608c:	16 16       	cp	r1, r22
    608e:	17 06       	cpc	r1, r23
    6090:	24 f4       	brge	.+8      	; 0x609a <ProcessMusic+0xa8>
    6092:	8c 15       	cp	r24, r12
    6094:	9d 05       	cpc	r25, r13
    6096:	30 f4       	brcc	.+12     	; 0x60a4 <ProcessMusic+0xb2>
    6098:	0c c0       	rjmp	.+24     	; 0x60b2 <ProcessMusic+0xc0>
    609a:	67 2b       	or	r22, r23
    609c:	51 f0       	breq	.+20     	; 0x60b2 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    609e:	c8 16       	cp	r12, r24
    60a0:	d9 06       	cpc	r13, r25
    60a2:	38 f0       	brcs	.+14     	; 0x60b2 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    60a4:	12 96       	adiw	r26, 0x02	; 2
    60a6:	dc 92       	st	X, r13
    60a8:	ce 92       	st	-X, r12
    60aa:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    60ac:	17 7f       	andi	r17, 0xF7	; 247
    60ae:	f9 01       	movw	r30, r18
    60b0:	10 83       	st	Z, r17
    60b2:	4a 5e       	subi	r20, 0xEA	; 234
    60b4:	5f 4f       	sbci	r21, 0xFF	; 255
    60b6:	2a 5e       	subi	r18, 0xEA	; 234
    60b8:	3f 4f       	sbci	r19, 0xFF	; 255
    60ba:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    60bc:	4e 36       	cpi	r20, 0x6E	; 110
    60be:	51 05       	cpc	r21, r1
    60c0:	09 f0       	breq	.+2      	; 0x60c4 <ProcessMusic+0xd2>
    60c2:	b0 cf       	rjmp	.-160    	; 0x6024 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    60c4:	80 91 40 09 	lds	r24, 0x0940
    60c8:	88 23       	and	r24, r24
    60ca:	09 f4       	brne	.+2      	; 0x60ce <ProcessMusic+0xdc>
    60cc:	cb c0       	rjmp	.+406    	; 0x6264 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    60ce:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    60d0:	80 91 e7 09 	lds	r24, 0x09E7
    60d4:	90 91 e8 09 	lds	r25, 0x09E8
    60d8:	20 91 ed 09 	lds	r18, 0x09ED
    60dc:	30 91 ee 09 	lds	r19, 0x09EE
    60e0:	82 17       	cp	r24, r18
    60e2:	93 07       	cpc	r25, r19
    60e4:	09 f0       	breq	.+2      	; 0x60e8 <ProcessMusic+0xf6>
    60e6:	b9 c0       	rjmp	.+370    	; 0x625a <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    60e8:	20 91 f0 09 	lds	r18, 0x09F0
    60ec:	30 91 f1 09 	lds	r19, 0x09F1
    60f0:	b9 01       	movw	r22, r18
    60f2:	6f 5f       	subi	r22, 0xFF	; 255
    60f4:	7f 4f       	sbci	r23, 0xFF	; 255
    60f6:	70 93 f1 09 	sts	0x09F1, r23
    60fa:	60 93 f0 09 	sts	0x09F0, r22
    60fe:	f9 01       	movw	r30, r18
    6100:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    6102:	4f 3f       	cpi	r20, 0xFF	; 255
    6104:	79 f5       	brne	.+94     	; 0x6164 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    6106:	a9 01       	movw	r20, r18
    6108:	4e 5f       	subi	r20, 0xFE	; 254
    610a:	5f 4f       	sbci	r21, 0xFF	; 255
    610c:	50 93 f1 09 	sts	0x09F1, r21
    6110:	40 93 f0 09 	sts	0x09F0, r20
    6114:	fb 01       	movw	r30, r22
    6116:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    6118:	6f 32       	cpi	r22, 0x2F	; 47
    611a:	19 f4       	brne	.+6      	; 0x6122 <ProcessMusic+0x130>
						playSong=false;
    611c:	10 92 40 09 	sts	0x0940, r1
						break;	
    6120:	9c c0       	rjmp	.+312    	; 0x625a <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    6122:	66 30       	cpi	r22, 0x06	; 6
    6124:	09 f0       	breq	.+2      	; 0x6128 <ProcessMusic+0x136>
    6126:	8c c0       	rjmp	.+280    	; 0x6240 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    6128:	fa 01       	movw	r30, r20
    612a:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    612c:	c9 01       	movw	r24, r18
    612e:	04 96       	adiw	r24, 0x04	; 4
    6130:	90 93 f1 09 	sts	0x09F1, r25
    6134:	80 93 f0 09 	sts	0x09F0, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    6138:	f9 01       	movw	r30, r18
    613a:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    613c:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    613e:	e3 35       	cpi	r30, 0x53	; 83
    6140:	29 f4       	brne	.+10     	; 0x614c <ProcessMusic+0x15a>
							loopStart=songPos;
    6142:	90 93 f3 09 	sts	0x09F3, r25
    6146:	80 93 f2 09 	sts	0x09F2, r24
    614a:	7a c0       	rjmp	.+244    	; 0x6240 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    614c:	e5 34       	cpi	r30, 0x45	; 69
    614e:	09 f0       	breq	.+2      	; 0x6152 <ProcessMusic+0x160>
    6150:	77 c0       	rjmp	.+238    	; 0x6240 <ProcessMusic+0x24e>
							songPos=loopStart;
    6152:	80 91 f2 09 	lds	r24, 0x09F2
    6156:	90 91 f3 09 	lds	r25, 0x09F3
    615a:	90 93 f1 09 	sts	0x09F1, r25
    615e:	80 93 f0 09 	sts	0x09F0, r24
    6162:	6e c0       	rjmp	.+220    	; 0x6240 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    6164:	47 fd       	sbrc	r20, 7
    6166:	40 93 eb 09 	sts	0x09EB, r20
					channel=lastStatus&0x0f;
    616a:	90 91 eb 09 	lds	r25, 0x09EB
    616e:	89 2f       	mov	r24, r25
    6170:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    6172:	47 ff       	sbrs	r20, 7
    6174:	08 c0       	rjmp	.+16     	; 0x6186 <ProcessMusic+0x194>
    6176:	2e 5f       	subi	r18, 0xFE	; 254
    6178:	3f 4f       	sbci	r19, 0xFF	; 255
    617a:	30 93 f1 09 	sts	0x09F1, r19
    617e:	20 93 f0 09 	sts	0x09F0, r18
    6182:	fb 01       	movw	r30, r22
    6184:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    6186:	90 7f       	andi	r25, 0xF0	; 240
    6188:	90 3b       	cpi	r25, 0xB0	; 176
    618a:	e1 f0       	breq	.+56     	; 0x61c4 <ProcessMusic+0x1d2>
    618c:	90 3c       	cpi	r25, 0xC0	; 192
    618e:	09 f4       	brne	.+2      	; 0x6192 <ProcessMusic+0x1a0>
    6190:	51 c0       	rjmp	.+162    	; 0x6234 <ProcessMusic+0x242>
    6192:	90 39       	cpi	r25, 0x90	; 144
    6194:	09 f0       	breq	.+2      	; 0x6198 <ProcessMusic+0x1a6>
    6196:	54 c0       	rjmp	.+168    	; 0x6240 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    6198:	e0 91 f0 09 	lds	r30, 0x09F0
    619c:	f0 91 f1 09 	lds	r31, 0x09F1
    61a0:	9f 01       	movw	r18, r30
    61a2:	2f 5f       	subi	r18, 0xFF	; 255
    61a4:	3f 4f       	sbci	r19, 0xFF	; 255
    61a6:	30 93 f1 09 	sts	0x09F1, r19
    61aa:	20 93 f0 09 	sts	0x09F0, r18
    61ae:	24 91       	lpm	r18, Z
    61b0:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    61b2:	18 9f       	mul	r17, r24
    61b4:	f0 01       	movw	r30, r0
    61b6:	11 24       	eor	r1, r1
    61b8:	e7 58       	subi	r30, 0x87	; 135
    61ba:	f6 4f       	sbci	r31, 0xF6	; 246
    61bc:	66 85       	ldd	r22, Z+14	; 0x0e
    61be:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TriggerNote>
    61c2:	3e c0       	rjmp	.+124    	; 0x6240 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    61c4:	e0 91 f0 09 	lds	r30, 0x09F0
    61c8:	f0 91 f1 09 	lds	r31, 0x09F1
    61cc:	9f 01       	movw	r18, r30
    61ce:	2f 5f       	subi	r18, 0xFF	; 255
    61d0:	3f 4f       	sbci	r19, 0xFF	; 255
    61d2:	30 93 f1 09 	sts	0x09F1, r19
    61d6:	20 93 f0 09 	sts	0x09F0, r18
    61da:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    61dc:	47 30       	cpi	r20, 0x07	; 7
    61de:	49 f4       	brne	.+18     	; 0x61f2 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    61e0:	18 9f       	mul	r17, r24
    61e2:	d0 01       	movw	r26, r0
    61e4:	11 24       	eor	r1, r1
    61e6:	a7 58       	subi	r26, 0x87	; 135
    61e8:	b6 4f       	sbci	r27, 0xF6	; 246
    61ea:	ee 0f       	add	r30, r30
    61ec:	1a 96       	adiw	r26, 0x0a	; 10
    61ee:	ec 93       	st	X, r30
    61f0:	27 c0       	rjmp	.+78     	; 0x6240 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    61f2:	4b 30       	cpi	r20, 0x0B	; 11
    61f4:	49 f4       	brne	.+18     	; 0x6208 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    61f6:	18 9f       	mul	r17, r24
    61f8:	d0 01       	movw	r26, r0
    61fa:	11 24       	eor	r1, r1
    61fc:	a7 58       	subi	r26, 0x87	; 135
    61fe:	b6 4f       	sbci	r27, 0xF6	; 246
    6200:	ee 0f       	add	r30, r30
    6202:	19 96       	adiw	r26, 0x09	; 9
    6204:	ec 93       	st	X, r30
    6206:	1c c0       	rjmp	.+56     	; 0x6240 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    6208:	4c 35       	cpi	r20, 0x5C	; 92
    620a:	49 f4       	brne	.+18     	; 0x621e <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    620c:	18 9f       	mul	r17, r24
    620e:	d0 01       	movw	r26, r0
    6210:	11 24       	eor	r1, r1
    6212:	a7 58       	subi	r26, 0x87	; 135
    6214:	b6 4f       	sbci	r27, 0xF6	; 246
    6216:	ee 0f       	add	r30, r30
    6218:	17 96       	adiw	r26, 0x07	; 7
    621a:	ec 93       	st	X, r30
    621c:	11 c0       	rjmp	.+34     	; 0x6240 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    621e:	44 36       	cpi	r20, 0x64	; 100
    6220:	79 f4       	brne	.+30     	; 0x6240 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    6222:	18 9f       	mul	r17, r24
    6224:	d0 01       	movw	r26, r0
    6226:	11 24       	eor	r1, r1
    6228:	a7 58       	subi	r26, 0x87	; 135
    622a:	b6 4f       	sbci	r27, 0xF6	; 246
    622c:	ee 0f       	add	r30, r30
    622e:	18 96       	adiw	r26, 0x08	; 8
    6230:	ec 93       	st	X, r30
    6232:	06 c0       	rjmp	.+12     	; 0x6240 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    6234:	18 9f       	mul	r17, r24
    6236:	f0 01       	movw	r30, r0
    6238:	11 24       	eor	r1, r1
    623a:	e7 58       	subi	r30, 0x87	; 135
    623c:	f6 4f       	sbci	r31, 0xF6	; 246
    623e:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    6240:	80 ef       	ldi	r24, 0xF0	; 240
    6242:	99 e0       	ldi	r25, 0x09	; 9
    6244:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <ReadVarLen>
    6248:	90 93 ee 09 	sts	0x09EE, r25
    624c:	80 93 ed 09 	sts	0x09ED, r24
				currDeltaTime=0;
    6250:	10 92 e8 09 	sts	0x09E8, r1
    6254:	10 92 e7 09 	sts	0x09E7, r1
    6258:	3b cf       	rjmp	.-394    	; 0x60d0 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    625a:	01 96       	adiw	r24, 0x01	; 1
    625c:	90 93 e8 09 	sts	0x09E8, r25
    6260:	80 93 e7 09 	sts	0x09E7, r24
    6264:	9f e7       	ldi	r25, 0x7F	; 127
    6266:	a9 2e       	mov	r10, r25
    6268:	99 e0       	ldi	r25, 0x09	; 9
    626a:	b9 2e       	mov	r11, r25
    626c:	0b e8       	ldi	r16, 0x8B	; 139
    626e:	19 e0       	ldi	r17, 0x09	; 9
    6270:	2a e8       	ldi	r18, 0x8A	; 138
    6272:	c2 2e       	mov	r12, r18
    6274:	29 e0       	ldi	r18, 0x09	; 9
    6276:	d2 2e       	mov	r13, r18
    6278:	3c e8       	ldi	r19, 0x8C	; 140
    627a:	83 2e       	mov	r8, r19
    627c:	39 e0       	ldi	r19, 0x09	; 9
    627e:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    6280:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6282:	66 24       	eor	r6, r6
    6284:	6a 94       	dec	r6
    6286:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    6288:	88 81       	ld	r24, Y
    628a:	86 fd       	sbrc	r24, 6
    628c:	43 c0       	rjmp	.+134    	; 0x6314 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    628e:	8c 89       	ldd	r24, Y+20	; 0x14
    6290:	9d 89       	ldd	r25, Y+21	; 0x15
    6292:	89 2b       	or	r24, r25
    6294:	09 f4       	brne	.+2      	; 0x6298 <ProcessMusic+0x2a6>
    6296:	3a c0       	rjmp	.+116    	; 0x630c <ProcessMusic+0x31a>
    6298:	d8 01       	movw	r26, r16
    629a:	9c 91       	ld	r25, X
    629c:	f6 01       	movw	r30, r12
    629e:	80 81       	ld	r24, Z
    62a0:	98 17       	cp	r25, r24
    62a2:	08 f4       	brcc	.+2      	; 0x62a6 <ProcessMusic+0x2b4>
    62a4:	33 c0       	rjmp	.+102    	; 0x630c <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    62a6:	d8 01       	movw	r26, r16
    62a8:	9c 91       	ld	r25, X
    62aa:	f6 01       	movw	r30, r12
    62ac:	80 81       	ld	r24, Z
    62ae:	98 13       	cpse	r25, r24
    62b0:	2d c0       	rjmp	.+90     	; 0x630c <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    62b2:	ec 89       	ldd	r30, Y+20	; 0x14
    62b4:	fd 89       	ldd	r31, Y+21	; 0x15
    62b6:	af 01       	movw	r20, r30
    62b8:	4f 5f       	subi	r20, 0xFF	; 255
    62ba:	5f 4f       	sbci	r21, 0xFF	; 255
    62bc:	5d 8b       	std	Y+21, r21	; 0x15
    62be:	4c 8b       	std	Y+20, r20	; 0x14
    62c0:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    62c2:	8f 3f       	cpi	r24, 0xFF	; 255
    62c4:	31 f4       	brne	.+12     	; 0x62d2 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    62c6:	88 81       	ld	r24, Y
    62c8:	8f 77       	andi	r24, 0x7F	; 127
    62ca:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    62cc:	1d 8a       	std	Y+21, r1	; 0x15
    62ce:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    62d0:	1d c0       	rjmp	.+58     	; 0x630c <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    62d2:	32 96       	adiw	r30, 0x02	; 2
    62d4:	fd 8b       	std	Y+21, r31	; 0x15
    62d6:	ec 8b       	std	Y+20, r30	; 0x14
    62d8:	fa 01       	movw	r30, r20
    62da:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    62dc:	e8 2f       	mov	r30, r24
    62de:	f0 e0       	ldi	r31, 0x00	; 0
    62e0:	ee 0f       	add	r30, r30
    62e2:	ff 1f       	adc	r31, r31
    62e4:	e0 53       	subi	r30, 0x30	; 48
    62e6:	ff 4f       	sbci	r31, 0xFF	; 255
    62e8:	25 91       	lpm	r18, Z+
    62ea:	34 91       	lpm	r19, Z
    62ec:	65 2d       	mov	r22, r5
    62ee:	ce 01       	movw	r24, r28
    62f0:	f9 01       	movw	r30, r18
    62f2:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    62f4:	ec 89       	ldd	r30, Y+20	; 0x14
    62f6:	fd 89       	ldd	r31, Y+21	; 0x15
    62f8:	cf 01       	movw	r24, r30
    62fa:	01 96       	adiw	r24, 0x01	; 1
    62fc:	9d 8b       	std	Y+21, r25	; 0x15
    62fe:	8c 8b       	std	Y+20, r24	; 0x14
    6300:	e4 91       	lpm	r30, Z
    6302:	d6 01       	movw	r26, r12
    6304:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    6306:	f8 01       	movw	r30, r16
    6308:	10 82       	st	Z, r1
    630a:	cd cf       	rjmp	.-102    	; 0x62a6 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    630c:	d8 01       	movw	r26, r16
    630e:	8c 91       	ld	r24, X
    6310:	8f 5f       	subi	r24, 0xFF	; 255
    6312:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    6314:	98 81       	ld	r25, Y
    6316:	95 ff       	sbrs	r25, 5
    6318:	6c c0       	rjmp	.+216    	; 0x63f2 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    631a:	f4 01       	movw	r30, r8
    631c:	80 81       	ld	r24, Z
    631e:	8f 3f       	cpi	r24, 0xFF	; 255
    6320:	11 f0       	breq	.+4      	; 0x6326 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    6322:	8f 5f       	subi	r24, 0xFF	; 255
    6324:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    6326:	97 fd       	sbrc	r25, 7
    6328:	04 c0       	rjmp	.+8      	; 0x6332 <ProcessMusic+0x340>
    632a:	f8 01       	movw	r30, r16
    632c:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    632e:	90 81       	ld	r25, Z
    6330:	01 c0       	rjmp	.+2      	; 0x6334 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    6332:	9f ef       	ldi	r25, 0xFF	; 255
    6334:	f8 01       	movw	r30, r16
    6336:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    6338:	80 81       	ld	r24, Z
    633a:	88 23       	and	r24, r24
    633c:	09 f4       	brne	.+2      	; 0x6340 <ProcessMusic+0x34e>
    633e:	4e c0       	rjmp	.+156    	; 0x63dc <ProcessMusic+0x3ea>
    6340:	31 96       	adiw	r30, 0x01	; 1
    6342:	50 81       	ld	r21, Z
    6344:	55 23       	and	r21, r21
    6346:	09 f4       	brne	.+2      	; 0x634a <ProcessMusic+0x358>
    6348:	49 c0       	rjmp	.+146    	; 0x63dc <ProcessMusic+0x3ea>
    634a:	99 23       	and	r25, r25
    634c:	09 f4       	brne	.+2      	; 0x6350 <ProcessMusic+0x35e>
    634e:	46 c0       	rjmp	.+140    	; 0x63dc <ProcessMusic+0x3ea>
    6350:	40 91 ec 09 	lds	r20, 0x09EC
    6354:	44 23       	and	r20, r20
    6356:	09 f4       	brne	.+2      	; 0x635a <ProcessMusic+0x368>
    6358:	41 c0       	rjmp	.+130    	; 0x63dc <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    635a:	89 9f       	mul	r24, r25
    635c:	c0 01       	movw	r24, r0
    635e:	11 24       	eor	r1, r1
    6360:	93 95       	inc	r25
				uVol>>=8;
    6362:	89 2f       	mov	r24, r25
    6364:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    6366:	58 9f       	mul	r21, r24
    6368:	90 01       	movw	r18, r0
    636a:	59 9f       	mul	r21, r25
    636c:	30 0d       	add	r19, r0
    636e:	11 24       	eor	r1, r1
    6370:	c9 01       	movw	r24, r18
    6372:	93 95       	inc	r25
				uVol>>=8;
    6374:	89 2f       	mov	r24, r25
    6376:	99 27       	eor	r25, r25
    6378:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    637a:	50 81       	ld	r21, Z
    637c:	58 9f       	mul	r21, r24
    637e:	90 01       	movw	r18, r0
    6380:	59 9f       	mul	r21, r25
    6382:	30 0d       	add	r19, r0
    6384:	11 24       	eor	r1, r1
    6386:	33 95       	inc	r19
				uVol>>=8;
    6388:	23 2f       	mov	r18, r19
    638a:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    638c:	42 9f       	mul	r20, r18
    638e:	c0 01       	movw	r24, r0
    6390:	43 9f       	mul	r20, r19
    6392:	90 0d       	add	r25, r0
    6394:	11 24       	eor	r1, r1
    6396:	93 95       	inc	r25
				uVol>>=8;
    6398:	89 2f       	mov	r24, r25
    639a:	99 27       	eor	r25, r25
    639c:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    639e:	20 81       	ld	r18, Z
    63a0:	22 23       	and	r18, r18
    63a2:	f1 f0       	breq	.+60     	; 0x63e0 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    63a4:	d5 01       	movw	r26, r10
    63a6:	ec 91       	ld	r30, X
    63a8:	f0 e0       	ldi	r31, 0x00	; 0
    63aa:	e0 50       	subi	r30, 0x00	; 0
    63ac:	f9 49       	sbci	r31, 0x99	; 153
    63ae:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    63b0:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    63b2:	2e 9f       	mul	r18, r30
    63b4:	f0 01       	movw	r30, r0
    63b6:	11 24       	eor	r1, r1
    63b8:	f3 95       	inc	r31
					tVol>>=8;
    63ba:	ef 2f       	mov	r30, r31
    63bc:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    63be:	a3 01       	movw	r20, r6
    63c0:	4e 1b       	sub	r20, r30
    63c2:	5f 0b       	sbc	r21, r31
    63c4:	48 9f       	mul	r20, r24
    63c6:	90 01       	movw	r18, r0
    63c8:	49 9f       	mul	r20, r25
    63ca:	30 0d       	add	r19, r0
    63cc:	58 9f       	mul	r21, r24
    63ce:	30 0d       	add	r19, r0
    63d0:	11 24       	eor	r1, r1
    63d2:	c9 01       	movw	r24, r18
    63d4:	93 95       	inc	r25
					uVol>>=8;
    63d6:	89 2f       	mov	r24, r25
    63d8:	99 27       	eor	r25, r25
    63da:	02 c0       	rjmp	.+4      	; 0x63e0 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    63dc:	80 e0       	ldi	r24, 0x00	; 0
    63de:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    63e0:	f5 01       	movw	r30, r10
    63e2:	30 81       	ld	r19, Z
    63e4:	f8 01       	movw	r30, r16
    63e6:	3a 97       	sbiw	r30, 0x0a	; 10
    63e8:	20 81       	ld	r18, Z
    63ea:	23 0f       	add	r18, r19
    63ec:	d5 01       	movw	r26, r10
    63ee:	2c 93       	st	X, r18
    63f0:	02 c0       	rjmp	.+4      	; 0x63f6 <ProcessMusic+0x404>

		}else{
			uVol=0;
    63f2:	80 e0       	ldi	r24, 0x00	; 0
    63f4:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    63f6:	f7 01       	movw	r30, r14
    63f8:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    63fa:	53 94       	inc	r5
    63fc:	66 96       	adiw	r28, 0x16	; 22
    63fe:	f6 e0       	ldi	r31, 0x06	; 6
    6400:	ef 0e       	add	r14, r31
    6402:	f1 1c       	adc	r15, r1
    6404:	86 e1       	ldi	r24, 0x16	; 22
    6406:	a8 0e       	add	r10, r24
    6408:	b1 1c       	adc	r11, r1
    640a:	0a 5e       	subi	r16, 0xEA	; 234
    640c:	1f 4f       	sbci	r17, 0xFF	; 255
    640e:	96 e1       	ldi	r25, 0x16	; 22
    6410:	c9 0e       	add	r12, r25
    6412:	d1 1c       	adc	r13, r1
    6414:	a6 e1       	ldi	r26, 0x16	; 22
    6416:	8a 0e       	add	r8, r26
    6418:	91 1c       	adc	r9, r1
    641a:	b5 e0       	ldi	r27, 0x05	; 5
    641c:	5b 12       	cpse	r5, r27
    641e:	34 cf       	rjmp	.-408    	; 0x6288 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    6420:	df 91       	pop	r29
    6422:	cf 91       	pop	r28
    6424:	1f 91       	pop	r17
    6426:	0f 91       	pop	r16
    6428:	ff 90       	pop	r15
    642a:	ef 90       	pop	r14
    642c:	df 90       	pop	r13
    642e:	cf 90       	pop	r12
    6430:	bf 90       	pop	r11
    6432:	af 90       	pop	r10
    6434:	9f 90       	pop	r9
    6436:	8f 90       	pop	r8
    6438:	7f 90       	pop	r7
    643a:	6f 90       	pop	r6
    643c:	5f 90       	pop	r5
    643e:	08 95       	ret

00006440 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    6440:	99 27       	eor	r25, r25
	clr r23
    6442:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    6444:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    6446:	09 f4       	brne	.+2      	; 0x644a <set_note_waves>
		ret
    6448:	08 95       	ret

0000644a <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    644a:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    644c:	f5 e6       	ldi	r31, 0x65	; 101
	lsl r22
    644e:	66 0f       	add	r22, r22
	rol r23
    6450:	77 1f       	adc	r23, r23
	add ZL,r22
    6452:	e6 0f       	add	r30, r22
	adc ZH,r23	
    6454:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    6456:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    6458:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    645a:	e2 e4       	ldi	r30, 0x42	; 66
	ldi ZH,hi8(mixerStruct)
    645c:	f9 e0       	ldi	r31, 0x09	; 9
	ldi r18,CHANNEL_STRUCT_SIZE
    645e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    6460:	28 9f       	mul	r18, r24
	add ZL,r0
    6462:	e0 0d       	add	r30, r0
	adc ZH,r1
    6464:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    6466:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    6468:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    646a:	11 24       	eor	r1, r1
	

	ret
    646c:	08 95       	ret

0000646e <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    646e:	99 27       	eor	r25, r25
	clr r23
    6470:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    6472:	e2 e4       	ldi	r30, 0x42	; 66
	ldi ZH,hi8(mixerStruct)
    6474:	f9 e0       	ldi	r31, 0x09	; 9
	ldi r18,CHANNEL_STRUCT_SIZE
    6476:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    6478:	28 9f       	mul	r18, r24
	add ZL,r0
    647a:	e0 0d       	add	r30, r0
	adc ZH,r1
    647c:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    647e:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    6480:	31 f4       	brne	.+12     	; 0x648e <smw1>
	lds r22,tr4_params
    6482:	60 91 55 09 	lds	r22, 0x0955
	andi r22,0xfe;
    6486:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    6488:	60 93 55 09 	sts	0x0955, r22
	rjmp esmw	
    648c:	0b c0       	rjmp	.+22     	; 0x64a4 <esmw>

0000648e <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    648e:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    6490:	31 f4       	brne	.+12     	; 0x649e <smw2>
	lds r22,tr4_params
    6492:	60 91 55 09 	lds	r22, 0x0955
	ori r22,0xfe;
    6496:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    6498:	60 93 55 09 	sts	0x0955, r22
	rjmp esmw
    649c:	03 c0       	rjmp	.+6      	; 0x64a4 <esmw>

0000649e <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    649e:	77 e6       	ldi	r23, 0x67	; 103
	add r23,r22
    64a0:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    64a2:	75 83       	std	Z+5, r23	; 0x05

000064a4 <esmw>:

esmw:
	clr r1	
    64a4:	11 24       	eor	r1, r1
	ret
    64a6:	08 95       	ret
	...

00006500 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    6500:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    6502:	80 93 41 09 	sts	0x0941, r24
	ret
    6506:	08 95       	ret

00006508 <steptable>:
    6508:	22 00       	.word	0x0022	; ????
    650a:	24 00       	.word	0x0024	; ????
    650c:	26 00       	.word	0x0026	; ????
    650e:	28 00       	.word	0x0028	; ????
    6510:	2b 00       	.word	0x002b	; ????
    6512:	2d 00       	.word	0x002d	; ????
    6514:	30 00       	.word	0x0030	; ????
    6516:	33 00       	.word	0x0033	; ????
    6518:	36 00       	.word	0x0036	; ????
    651a:	39 00       	.word	0x0039	; ????
    651c:	3d 00       	.word	0x003d	; ????
    651e:	40 00       	.word	0x0040	; ????
    6520:	44 00       	.word	0x0044	; ????
    6522:	48 00       	.word	0x0048	; ????
    6524:	4c 00       	.word	0x004c	; ????
    6526:	51 00       	.word	0x0051	; ????
    6528:	56 00       	.word	0x0056	; ????
    652a:	5b 00       	.word	0x005b	; ????
    652c:	60 00       	.word	0x0060	; ????
    652e:	66 00       	.word	0x0066	; ????
    6530:	6c 00       	.word	0x006c	; ????
    6532:	73 00       	.word	0x0073	; ????
    6534:	79 00       	.word	0x0079	; ????
    6536:	81 00       	.word	0x0081	; ????
    6538:	88 00       	.word	0x0088	; ????
    653a:	90 00       	.word	0x0090	; ????
    653c:	99 00       	.word	0x0099	; ????
    653e:	a2 00       	.word	0x00a2	; ????
    6540:	ac 00       	.word	0x00ac	; ????
    6542:	b6 00       	.word	0x00b6	; ????
    6544:	c1 00       	.word	0x00c1	; ????
    6546:	cc 00       	.word	0x00cc	; ????
    6548:	d8 00       	.word	0x00d8	; ????
    654a:	e5 00       	.word	0x00e5	; ????
    654c:	f3 00       	.word	0x00f3	; ????
    654e:	01 01       	movw	r0, r2
    6550:	10 01       	movw	r2, r0
    6552:	21 01       	movw	r4, r2
    6554:	32 01       	movw	r6, r4
    6556:	44 01       	movw	r8, r8
    6558:	57 01       	movw	r10, r14
    655a:	6c 01       	movw	r12, r24
    655c:	81 01       	movw	r16, r2
    655e:	98 01       	movw	r18, r16
    6560:	b0 01       	movw	r22, r0
    6562:	ca 01       	movw	r24, r20
    6564:	e5 01       	movw	r28, r10
    6566:	02 02       	muls	r16, r18
    6568:	21 02       	muls	r18, r17
    656a:	41 02       	muls	r20, r17
    656c:	64 02       	muls	r22, r20
    656e:	88 02       	muls	r24, r24
    6570:	ae 02       	muls	r26, r30
    6572:	d7 02       	muls	r29, r23
    6574:	03 03       	mulsu	r16, r19
    6576:	30 03       	mulsu	r19, r16
    6578:	61 03       	mulsu	r22, r17
    657a:	94 03       	fmuls	r17, r20
    657c:	cb 03       	fmulsu	r20, r19
    657e:	05 04       	cpc	r0, r5
    6580:	42 04       	cpc	r4, r2
    6582:	83 04       	cpc	r8, r3
    6584:	c7 04       	cpc	r12, r7
    6586:	10 05       	cpc	r17, r0
    6588:	5d 05       	cpc	r21, r13
    658a:	af 05       	cpc	r26, r15
    658c:	05 06       	cpc	r0, r21
    658e:	61 06       	cpc	r6, r17
    6590:	c2 06       	cpc	r12, r18
    6592:	29 07       	cpc	r18, r25
    6594:	96 07       	cpc	r25, r22
    6596:	09 08       	sbc	r0, r9
    6598:	83 08       	sbc	r8, r3
    659a:	05 09       	sbc	r16, r5
    659c:	8e 09       	sbc	r24, r14
    659e:	20 0a       	sbc	r2, r16
    65a0:	ba 0a       	sbc	r11, r26
    65a2:	5d 0b       	sbc	r21, r29
    65a4:	0a 0c       	add	r0, r10
    65a6:	c1 0c       	add	r12, r1
    65a8:	84 0d       	add	r24, r4
    65aa:	51 0e       	add	r5, r17
    65ac:	2b 0f       	add	r18, r27
    65ae:	12 10       	cpse	r1, r2
    65b0:	07 11       	cpse	r16, r7
    65b2:	0a 12       	cpse	r0, r26
    65b4:	1d 13       	cpse	r17, r29
    65b6:	40 14       	cp	r4, r0
    65b8:	74 15       	cp	r23, r4
    65ba:	ba 16       	cp	r11, r26
    65bc:	14 18       	sub	r1, r4
    65be:	83 19       	sub	r24, r3
    65c0:	07 1b       	sub	r16, r23
    65c2:	a3 1c       	adc	r10, r3
    65c4:	57 1e       	adc	r5, r23
    65c6:	24 20       	and	r2, r4
    65c8:	0e 22       	and	r0, r30
    65ca:	14 24       	eor	r1, r4
    65cc:	39 26       	eor	r3, r25
    65ce:	7f 28       	or	r7, r15
    65d0:	e8 2a       	or	r14, r24
    65d2:	75 2d       	mov	r23, r5
    65d4:	29 30       	cpi	r18, 0x09	; 9
    65d6:	06 33       	cpi	r16, 0x36	; 54
    65d8:	0f 36       	cpi	r16, 0x6F	; 111
    65da:	45 39       	cpi	r20, 0x95	; 149
    65dc:	ad 3c       	cpi	r26, 0xCD	; 205
    65de:	49 40       	sbci	r20, 0x09	; 9
    65e0:	1b 44       	sbci	r17, 0x4B	; 75
    65e2:	28 48       	sbci	r18, 0x88	; 136
    65e4:	73 4c       	sbci	r23, 0xC3	; 195
    65e6:	fe 50       	subi	r31, 0x0E	; 14
    65e8:	cf 55       	subi	r28, 0x5F	; 95
    65ea:	ea 5a       	subi	r30, 0xAA	; 170
    65ec:	51 60       	ori	r21, 0x01	; 1
    65ee:	0c 66       	ori	r16, 0x6C	; 108
    65f0:	1d 6c       	ori	r17, 0xCD	; 205
    65f2:	8b 72       	andi	r24, 0x2B	; 43
    65f4:	5a 79       	andi	r21, 0x9A	; 154
    65f6:	92 80       	ldd	r9, Z+2	; 0x02
    65f8:	37 88       	ldd	r3, Z+23	; 0x17
    65fa:	50 90 e5 98 	lds	r5, 0x98E5
    65fe:	fd a1       	ldd	r31, Y+37	; 0x25
    6600:	9f ab       	std	Y+55, r25	; 0x37
    6602:	d3 b5       	in	r29, 0x23	; 35
    6604:	a3 c0       	rjmp	.+326    	; 0x674c <waves+0x4c>
	...

00006700 <waves>:
    6700:	00 03       	mulsu	r16, r16
    6702:	06 09       	sbc	r16, r6
    6704:	0c 10       	cpse	r0, r12
    6706:	13 16       	cp	r1, r19
    6708:	19 1c       	adc	r1, r9
    670a:	1f 22       	and	r1, r31
    670c:	25 28       	or	r2, r5
    670e:	2b 2e       	mov	r2, r27
    6710:	31 33       	cpi	r19, 0x31	; 49
    6712:	36 39       	cpi	r19, 0x96	; 150
    6714:	3c 3f       	cpi	r19, 0xFC	; 252
    6716:	41 44       	sbci	r20, 0x41	; 65
    6718:	47 49       	sbci	r20, 0x97	; 151
    671a:	4c 4e       	sbci	r20, 0xEC	; 236
    671c:	51 53       	subi	r21, 0x31	; 49
    671e:	55 58       	subi	r21, 0x85	; 133
    6720:	5a 5c       	subi	r21, 0xCA	; 202
    6722:	5e 60       	ori	r21, 0x0E	; 14
    6724:	62 64       	ori	r22, 0x42	; 66
    6726:	66 68       	ori	r22, 0x86	; 134
    6728:	6a 6b       	ori	r22, 0xBA	; 186
    672a:	6d 6f       	ori	r22, 0xFD	; 253
    672c:	70 71       	andi	r23, 0x10	; 16
    672e:	73 74       	andi	r23, 0x43	; 67
    6730:	75 76       	andi	r23, 0x65	; 101
    6732:	78 79       	andi	r23, 0x98	; 152
    6734:	7a 7a       	andi	r23, 0xAA	; 170
    6736:	7b 7c       	andi	r23, 0xCB	; 203
    6738:	7d 7d       	andi	r23, 0xDD	; 221
    673a:	7e 7e       	andi	r23, 0xEE	; 238
    673c:	7e 7f       	andi	r23, 0xFE	; 254
    673e:	7f 7f       	andi	r23, 0xFF	; 255
    6740:	7f 7f       	andi	r23, 0xFF	; 255
    6742:	7f 7f       	andi	r23, 0xFF	; 255
    6744:	7e 7e       	andi	r23, 0xEE	; 238
    6746:	7e 7d       	andi	r23, 0xDE	; 222
    6748:	7d 7c       	andi	r23, 0xCD	; 205
    674a:	7b 7a       	andi	r23, 0xAB	; 171
    674c:	7a 79       	andi	r23, 0x9A	; 154
    674e:	78 76       	andi	r23, 0x68	; 104
    6750:	75 74       	andi	r23, 0x45	; 69
    6752:	73 71       	andi	r23, 0x13	; 19
    6754:	70 6f       	ori	r23, 0xF0	; 240
    6756:	6d 6b       	ori	r22, 0xBD	; 189
    6758:	6a 68       	ori	r22, 0x8A	; 138
    675a:	66 64       	ori	r22, 0x46	; 70
    675c:	62 60       	ori	r22, 0x02	; 2
    675e:	5e 5c       	subi	r21, 0xCE	; 206
    6760:	5a 58       	subi	r21, 0x8A	; 138
    6762:	55 53       	subi	r21, 0x35	; 53
    6764:	51 4e       	sbci	r21, 0xE1	; 225
    6766:	4c 49       	sbci	r20, 0x9C	; 156
    6768:	47 44       	sbci	r20, 0x47	; 71
    676a:	41 3f       	cpi	r20, 0xF1	; 241
    676c:	3c 39       	cpi	r19, 0x9C	; 156
    676e:	36 33       	cpi	r19, 0x36	; 54
    6770:	31 2e       	mov	r3, r17
    6772:	2b 28       	or	r2, r11
    6774:	25 22       	and	r2, r21
    6776:	1f 1c       	adc	r1, r15
    6778:	19 16       	cp	r1, r25
    677a:	13 10       	cpse	r1, r3
    677c:	0c 09       	sbc	r16, r12
    677e:	06 03       	mulsu	r16, r22
    6780:	00 fd       	sbrc	r16, 0
    6782:	fa f7       	brpl	.-2      	; 0x6782 <waves+0x82>
    6784:	f4 f0       	brlt	.+60     	; 0x67c2 <waves+0xc2>
    6786:	ed ea       	ldi	r30, 0xAD	; 173
    6788:	e7 e4       	ldi	r30, 0x47	; 71
    678a:	e1 de       	rcall	.-574    	; 0x654e <steptable+0x46>
    678c:	db d8       	rcall	.-3658   	; 0x5944 <ch4_end+0x8a>
    678e:	d5 d2       	rcall	.+1450   	; 0x6d3a <waves+0x63a>
    6790:	cf cd       	rjmp	.-1122   	; 0x6330 <ProcessMusic+0x33e>
    6792:	ca c7       	rjmp	.+3988   	; 0x7728 <LBCollides+0x8>
    6794:	c4 c1       	rjmp	.+904    	; 0x6b1e <waves+0x41e>
    6796:	bf bc       	out	0x2f, r11	; 47
    6798:	b9 b7       	in	r27, 0x39	; 57
    679a:	b4 b2       	in	r11, 0x14	; 20
    679c:	af ad       	ldd	r26, Y+63	; 0x3f
    679e:	ab a8       	ldd	r10, Y+51	; 0x33
    67a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    67a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    67a4:	9e 9c       	mul	r9, r14
    67a6:	9a 98       	cbi	0x13, 2	; 19
    67a8:	96 95       	lsr	r25
    67aa:	93 91       	.word	0x9193	; ????
    67ac:	90 8f       	std	Z+24, r25	; 0x18
    67ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    67b0:	8b 8a       	std	Y+19, r8	; 0x13
    67b2:	88 87       	std	Y+8, r24	; 0x08
    67b4:	86 86       	std	Z+14, r8	; 0x0e
    67b6:	85 84       	ldd	r8, Z+13	; 0x0d
    67b8:	83 83       	std	Z+3, r24	; 0x03
    67ba:	82 82       	std	Z+2, r8	; 0x02
    67bc:	82 81       	ldd	r24, Z+2	; 0x02
    67be:	81 81       	ldd	r24, Z+1	; 0x01
    67c0:	81 81       	ldd	r24, Z+1	; 0x01
    67c2:	81 81       	ldd	r24, Z+1	; 0x01
    67c4:	82 82       	std	Z+2, r8	; 0x02
    67c6:	82 83       	std	Z+2, r24	; 0x02
    67c8:	83 84       	ldd	r8, Z+11	; 0x0b
    67ca:	85 86       	std	Z+13, r8	; 0x0d
    67cc:	86 87       	std	Z+14, r24	; 0x0e
    67ce:	88 8a       	std	Y+16, r8	; 0x10
    67d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    67d2:	8d 8f       	std	Y+29, r24	; 0x1d
    67d4:	90 91 93 95 	lds	r25, 0x9593
    67d8:	96 98       	cbi	0x12, 6	; 18
    67da:	9a 9c       	mul	r9, r10
    67dc:	9e a0       	ldd	r9, Y+38	; 0x26
    67de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    67e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    67e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    67e4:	af b2       	in	r10, 0x1f	; 31
    67e6:	b4 b7       	in	r27, 0x34	; 52
    67e8:	b9 bc       	out	0x29, r11	; 41
    67ea:	bf c1       	rjmp	.+894    	; 0x6b6a <waves+0x46a>
    67ec:	c4 c7       	rjmp	.+3976   	; 0x7776 <LBLineIntersect+0x2>
    67ee:	ca cd       	rjmp	.-1132   	; 0x6384 <ProcessMusic+0x392>
    67f0:	cf d2       	rcall	.+1438   	; 0x6d90 <waves+0x690>
    67f2:	d5 d8       	rcall	.-3670   	; 0x599e <SetTileTable+0x4>
    67f4:	db de       	rcall	.-586    	; 0x65ac <steptable+0xa4>
    67f6:	e1 e4       	ldi	r30, 0x41	; 65
    67f8:	e7 ea       	ldi	r30, 0xA7	; 167
    67fa:	ed f0       	brhs	.+58     	; 0x6836 <waves+0x136>
    67fc:	f4 f7       	brge	.-4      	; 0x67fa <waves+0xfa>
    67fe:	fa fd       	.word	0xfdfa	; ????
    6800:	80 81       	ld	r24, Z
    6802:	82 83       	std	Z+2, r24	; 0x02
    6804:	84 85       	ldd	r24, Z+12	; 0x0c
    6806:	86 87       	std	Z+14, r24	; 0x0e
    6808:	88 89       	ldd	r24, Y+16	; 0x10
    680a:	8a 8b       	std	Y+18, r24	; 0x12
    680c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    680e:	8e 8f       	std	Y+30, r24	; 0x1e
    6810:	90 91 92 93 	lds	r25, 0x9392
    6814:	94 95       	.word	0x9594	; ????
    6816:	96 97       	sbiw	r26, 0x26	; 38
    6818:	98 99       	sbic	0x13, 0	; 19
    681a:	9a 9b       	sbis	0x13, 2	; 19
    681c:	9c 9d       	mul	r25, r12
    681e:	9e 9f       	mul	r25, r30
    6820:	a0 a1       	ldd	r26, Z+32	; 0x20
    6822:	a2 a3       	std	Z+34, r26	; 0x22
    6824:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6826:	a6 a7       	std	Z+46, r26	; 0x2e
    6828:	a8 a9       	ldd	r26, Y+48	; 0x30
    682a:	aa ab       	std	Y+50, r26	; 0x32
    682c:	ac ad       	ldd	r26, Y+60	; 0x3c
    682e:	ae af       	std	Y+62, r26	; 0x3e
    6830:	b0 b1       	in	r27, 0x00	; 0
    6832:	b2 b3       	in	r27, 0x12	; 18
    6834:	b4 b5       	in	r27, 0x24	; 36
    6836:	b6 b7       	in	r27, 0x36	; 54
    6838:	b8 b9       	out	0x08, r27	; 8
    683a:	ba bb       	out	0x1a, r27	; 26
    683c:	bc bd       	out	0x2c, r27	; 44
    683e:	be bf       	out	0x3e, r27	; 62
    6840:	c0 c1       	rjmp	.+896    	; 0x6bc2 <waves+0x4c2>
    6842:	c2 c3       	rjmp	.+1924   	; 0x6fc8 <waves+0x8c8>
    6844:	c4 c5       	rjmp	.+2952   	; 0x73ce <InitializeVideoMode+0xe>
    6846:	c6 c7       	rjmp	.+3980   	; 0x77d4 <LBLineIntersect+0x60>
    6848:	c8 c9       	rjmp	.-3184   	; 0x5bda <EepromWriteBlock+0xc2>
    684a:	ca cb       	rjmp	.-2156   	; 0x5fe0 <TriggerNote+0x5c>
    684c:	cc cd       	rjmp	.-1128   	; 0x63e6 <ProcessMusic+0x3f4>
    684e:	ce cf       	rjmp	.-100    	; 0x67ec <waves+0xec>
    6850:	d0 d1       	rcall	.+928    	; 0x6bf2 <waves+0x4f2>
    6852:	d2 d3       	rcall	.+1956   	; 0x6ff8 <waves+0x8f8>
    6854:	d4 d5       	rcall	.+2984   	; 0x73fe <DrawMap2+0x2a>
    6856:	d6 d7       	rcall	.+4012   	; 0x7804 <LBLineIntersect+0x90>
    6858:	d8 d9       	rcall	.-3152   	; 0x5c0a <EepromReadBlock+0x18>
    685a:	da db       	rcall	.-2124   	; 0x6010 <ProcessMusic+0x1e>
    685c:	dc dd       	rcall	.-1096   	; 0x6416 <ProcessMusic+0x424>
    685e:	de df       	rcall	.-68     	; 0x681c <waves+0x11c>
    6860:	e0 e1       	ldi	r30, 0x10	; 16
    6862:	e2 e3       	ldi	r30, 0x32	; 50
    6864:	e4 e5       	ldi	r30, 0x54	; 84
    6866:	e6 e7       	ldi	r30, 0x76	; 118
    6868:	e8 e9       	ldi	r30, 0x98	; 152
    686a:	ea eb       	ldi	r30, 0xBA	; 186
    686c:	ec ed       	ldi	r30, 0xDC	; 220
    686e:	ee ef       	ldi	r30, 0xFE	; 254
    6870:	f0 f1       	brcs	.+124    	; 0x68ee <waves+0x1ee>
    6872:	f2 f3       	brmi	.-4      	; 0x6870 <waves+0x170>
    6874:	f4 f5       	brge	.+124    	; 0x68f2 <waves+0x1f2>
    6876:	f6 f7       	brtc	.-4      	; 0x6874 <waves+0x174>
    6878:	f8 f9       	.word	0xf9f8	; ????
    687a:	fa fb       	.word	0xfbfa	; ????
    687c:	fc fd       	.word	0xfdfc	; ????
    687e:	fe ff       	.word	0xfffe	; ????
    6880:	00 01       	movw	r0, r0
    6882:	02 03       	mulsu	r16, r18
    6884:	04 05       	cpc	r16, r4
    6886:	06 07       	cpc	r16, r22
    6888:	08 09       	sbc	r16, r8
    688a:	0a 0b       	sbc	r16, r26
    688c:	0c 0d       	add	r16, r12
    688e:	0e 0f       	add	r16, r30
    6890:	10 11       	cpse	r17, r0
    6892:	12 13       	cpse	r17, r18
    6894:	14 15       	cp	r17, r4
    6896:	16 17       	cp	r17, r22
    6898:	18 19       	sub	r17, r8
    689a:	1a 1b       	sub	r17, r26
    689c:	1c 1d       	adc	r17, r12
    689e:	1e 1f       	adc	r17, r30
    68a0:	20 21       	and	r18, r0
    68a2:	22 23       	and	r18, r18
    68a4:	24 25       	eor	r18, r4
    68a6:	26 27       	eor	r18, r22
    68a8:	28 29       	or	r18, r8
    68aa:	2a 2b       	or	r18, r26
    68ac:	2c 2d       	mov	r18, r12
    68ae:	2e 2f       	mov	r18, r30
    68b0:	30 31       	cpi	r19, 0x10	; 16
    68b2:	32 33       	cpi	r19, 0x32	; 50
    68b4:	34 35       	cpi	r19, 0x54	; 84
    68b6:	36 37       	cpi	r19, 0x76	; 118
    68b8:	38 39       	cpi	r19, 0x98	; 152
    68ba:	3a 3b       	cpi	r19, 0xBA	; 186
    68bc:	3c 3d       	cpi	r19, 0xDC	; 220
    68be:	3e 3f       	cpi	r19, 0xFE	; 254
    68c0:	40 41       	sbci	r20, 0x10	; 16
    68c2:	42 43       	sbci	r20, 0x32	; 50
    68c4:	44 45       	sbci	r20, 0x54	; 84
    68c6:	46 47       	sbci	r20, 0x76	; 118
    68c8:	48 49       	sbci	r20, 0x98	; 152
    68ca:	4a 4b       	sbci	r20, 0xBA	; 186
    68cc:	4c 4d       	sbci	r20, 0xDC	; 220
    68ce:	4e 4f       	sbci	r20, 0xFE	; 254
    68d0:	50 51       	subi	r21, 0x10	; 16
    68d2:	52 53       	subi	r21, 0x32	; 50
    68d4:	54 55       	subi	r21, 0x54	; 84
    68d6:	56 57       	subi	r21, 0x76	; 118
    68d8:	58 59       	subi	r21, 0x98	; 152
    68da:	5a 5b       	subi	r21, 0xBA	; 186
    68dc:	5c 5d       	subi	r21, 0xDC	; 220
    68de:	5e 5f       	subi	r21, 0xFE	; 254
    68e0:	60 61       	ori	r22, 0x10	; 16
    68e2:	62 63       	ori	r22, 0x32	; 50
    68e4:	64 65       	ori	r22, 0x54	; 84
    68e6:	66 67       	ori	r22, 0x76	; 118
    68e8:	68 69       	ori	r22, 0x98	; 152
    68ea:	6a 6b       	ori	r22, 0xBA	; 186
    68ec:	6c 6d       	ori	r22, 0xDC	; 220
    68ee:	6e 6f       	ori	r22, 0xFE	; 254
    68f0:	70 71       	andi	r23, 0x10	; 16
    68f2:	72 73       	andi	r23, 0x32	; 50
    68f4:	74 75       	andi	r23, 0x54	; 84
    68f6:	76 77       	andi	r23, 0x76	; 118
    68f8:	78 79       	andi	r23, 0x98	; 152
    68fa:	7a 7b       	andi	r23, 0xBA	; 186
    68fc:	7c 7d       	andi	r23, 0xDC	; 220
    68fe:	7e 7f       	andi	r23, 0xFE	; 254
    6900:	00 02       	muls	r16, r16
    6902:	04 06       	cpc	r0, r20
    6904:	08 0a       	sbc	r0, r24
    6906:	0c 0e       	add	r0, r28
    6908:	10 12       	cpse	r1, r16
    690a:	14 16       	cp	r1, r20
    690c:	18 1a       	sub	r1, r24
    690e:	1c 1e       	adc	r1, r28
    6910:	20 22       	and	r2, r16
    6912:	24 26       	eor	r2, r20
    6914:	28 2a       	or	r2, r24
    6916:	2c 2e       	mov	r2, r28
    6918:	30 32       	cpi	r19, 0x20	; 32
    691a:	34 36       	cpi	r19, 0x64	; 100
    691c:	38 3a       	cpi	r19, 0xA8	; 168
    691e:	3c 3e       	cpi	r19, 0xEC	; 236
    6920:	40 42       	sbci	r20, 0x20	; 32
    6922:	44 46       	sbci	r20, 0x64	; 100
    6924:	48 4a       	sbci	r20, 0xA8	; 168
    6926:	4c 4e       	sbci	r20, 0xEC	; 236
    6928:	50 52       	subi	r21, 0x20	; 32
    692a:	54 56       	subi	r21, 0x64	; 100
    692c:	58 5a       	subi	r21, 0xA8	; 168
    692e:	5c 5e       	subi	r21, 0xEC	; 236
    6930:	60 62       	ori	r22, 0x20	; 32
    6932:	64 66       	ori	r22, 0x64	; 100
    6934:	68 6a       	ori	r22, 0xA8	; 168
    6936:	6c 6e       	ori	r22, 0xEC	; 236
    6938:	70 72       	andi	r23, 0x20	; 32
    693a:	74 76       	andi	r23, 0x64	; 100
    693c:	78 7a       	andi	r23, 0xA8	; 168
    693e:	7c 7e       	andi	r23, 0xEC	; 236
    6940:	7f 7d       	andi	r23, 0xDF	; 223
    6942:	7b 79       	andi	r23, 0x9B	; 155
    6944:	77 75       	andi	r23, 0x57	; 87
    6946:	73 71       	andi	r23, 0x13	; 19
    6948:	6f 6d       	ori	r22, 0xDF	; 223
    694a:	6b 69       	ori	r22, 0x9B	; 155
    694c:	67 65       	ori	r22, 0x57	; 87
    694e:	63 61       	ori	r22, 0x13	; 19
    6950:	5f 5d       	subi	r21, 0xDF	; 223
    6952:	5b 59       	subi	r21, 0x9B	; 155
    6954:	57 55       	subi	r21, 0x57	; 87
    6956:	53 51       	subi	r21, 0x13	; 19
    6958:	4f 4d       	sbci	r20, 0xDF	; 223
    695a:	4b 49       	sbci	r20, 0x9B	; 155
    695c:	47 45       	sbci	r20, 0x57	; 87
    695e:	43 41       	sbci	r20, 0x13	; 19
    6960:	3f 3d       	cpi	r19, 0xDF	; 223
    6962:	3b 39       	cpi	r19, 0x9B	; 155
    6964:	37 35       	cpi	r19, 0x57	; 87
    6966:	33 31       	cpi	r19, 0x13	; 19
    6968:	2f 2d       	mov	r18, r15
    696a:	2b 29       	or	r18, r11
    696c:	27 25       	eor	r18, r7
    696e:	23 21       	and	r18, r3
    6970:	1f 1d       	adc	r17, r15
    6972:	1b 19       	sub	r17, r11
    6974:	17 15       	cp	r17, r7
    6976:	13 11       	cpse	r17, r3
    6978:	0f 0d       	add	r16, r15
    697a:	0b 09       	sbc	r16, r11
    697c:	07 05       	cpc	r16, r7
    697e:	03 01       	movw	r0, r6
    6980:	ff fd       	.word	0xfdff	; ????
    6982:	fb f9       	.word	0xf9fb	; ????
    6984:	f7 f5       	brid	.+124    	; 0x6a02 <waves+0x302>
    6986:	f3 f1       	brvs	.+124    	; 0x6a04 <waves+0x304>
    6988:	ef ed       	ldi	r30, 0xDF	; 223
    698a:	eb e9       	ldi	r30, 0x9B	; 155
    698c:	e7 e5       	ldi	r30, 0x57	; 87
    698e:	e3 e1       	ldi	r30, 0x13	; 19
    6990:	df dd       	rcall	.-1090   	; 0x6550 <steptable+0x48>
    6992:	db d9       	rcall	.-3146   	; 0x5d4a <PatchCommand03+0x2>
    6994:	d7 d5       	rcall	.+2990   	; 0x7544 <doFade+0x6>
    6996:	d3 d1       	rcall	.+934    	; 0x6d3e <waves+0x63e>
    6998:	cf cd       	rjmp	.-1122   	; 0x6538 <steptable+0x30>
    699a:	cb c9       	rjmp	.-3178   	; 0x5d32 <PatchCommand11+0x72>
    699c:	c7 c5       	rjmp	.+2958   	; 0x752c <WaitVsync+0x1c>
    699e:	c3 c1       	rjmp	.+902    	; 0x6d26 <waves+0x626>
    69a0:	bf bd       	out	0x2f, r27	; 47
    69a2:	bb b9       	out	0x0b, r27	; 11
    69a4:	b7 b5       	in	r27, 0x27	; 39
    69a6:	b3 b1       	in	r27, 0x03	; 3
    69a8:	af ad       	ldd	r26, Y+63	; 0x3f
    69aa:	ab a9       	ldd	r26, Y+51	; 0x33
    69ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    69ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    69b0:	9f 9d       	mul	r25, r15
    69b2:	9b 99       	sbic	0x13, 3	; 19
    69b4:	97 95       	ror	r25
    69b6:	93 91       	.word	0x9193	; ????
    69b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    69ba:	8b 89       	ldd	r24, Y+19	; 0x13
    69bc:	87 85       	ldd	r24, Z+15	; 0x0f
    69be:	83 81       	ldd	r24, Z+3	; 0x03
    69c0:	80 82       	st	Z, r8
    69c2:	84 86       	std	Z+12, r8	; 0x0c
    69c4:	88 8a       	std	Y+16, r8	; 0x10
    69c6:	8c 8e       	std	Y+28, r8	; 0x1c
    69c8:	90 92 94 96 	sts	0x9694, r9
    69cc:	98 9a       	sbi	0x13, 0	; 19
    69ce:	9c 9e       	mul	r9, r28
    69d0:	a0 a2       	std	Z+32, r10	; 0x20
    69d2:	a4 a6       	std	Z+44, r10	; 0x2c
    69d4:	a8 aa       	std	Y+48, r10	; 0x30
    69d6:	ac ae       	std	Y+60, r10	; 0x3c
    69d8:	b0 b2       	in	r11, 0x10	; 16
    69da:	b4 b6       	in	r11, 0x34	; 52
    69dc:	b8 ba       	out	0x18, r11	; 24
    69de:	bc be       	out	0x3c, r11	; 60
    69e0:	c0 c2       	rjmp	.+1408   	; 0x6f62 <waves+0x862>
    69e2:	c4 c6       	rjmp	.+3464   	; 0x776c <LBCollides+0x4c>
    69e4:	c8 ca       	rjmp	.-2672   	; 0x5f76 <TriggerCommon+0x14c>
    69e6:	cc ce       	rjmp	.-616    	; 0x6780 <waves+0x80>
    69e8:	d0 d2       	rcall	.+1440   	; 0x6f8a <waves+0x88a>
    69ea:	d4 d6       	rcall	.+3496   	; 0x7794 <LBLineIntersect+0x20>
    69ec:	d8 da       	rcall	.-2640   	; 0x5f9e <TriggerNote+0x1a>
    69ee:	dc de       	rcall	.-584    	; 0x67a8 <waves+0xa8>
    69f0:	e0 e2       	ldi	r30, 0x20	; 32
    69f2:	e4 e6       	ldi	r30, 0x64	; 100
    69f4:	e8 ea       	ldi	r30, 0xA8	; 168
    69f6:	ec ee       	ldi	r30, 0xEC	; 236
    69f8:	f0 f2       	brcs	.-68     	; 0x69b6 <waves+0x2b6>
    69fa:	f4 f6       	brge	.-68     	; 0x69b8 <waves+0x2b8>
    69fc:	f8 fa       	.word	0xfaf8	; ????
    69fe:	fc fe       	.word	0xfefc	; ????
    6a00:	7f 7f       	andi	r23, 0xFF	; 255
    6a02:	7f 7f       	andi	r23, 0xFF	; 255
    6a04:	7f 7f       	andi	r23, 0xFF	; 255
    6a06:	7f 7f       	andi	r23, 0xFF	; 255
    6a08:	7f 7f       	andi	r23, 0xFF	; 255
    6a0a:	7f 7f       	andi	r23, 0xFF	; 255
    6a0c:	7f 7f       	andi	r23, 0xFF	; 255
    6a0e:	7f 7f       	andi	r23, 0xFF	; 255
    6a10:	7f 7f       	andi	r23, 0xFF	; 255
    6a12:	7f 7f       	andi	r23, 0xFF	; 255
    6a14:	7f 7f       	andi	r23, 0xFF	; 255
    6a16:	7f 7f       	andi	r23, 0xFF	; 255
    6a18:	7f 7f       	andi	r23, 0xFF	; 255
    6a1a:	7f 7f       	andi	r23, 0xFF	; 255
    6a1c:	7f 7f       	andi	r23, 0xFF	; 255
    6a1e:	7f 7f       	andi	r23, 0xFF	; 255
    6a20:	7f 7f       	andi	r23, 0xFF	; 255
    6a22:	7f 7f       	andi	r23, 0xFF	; 255
    6a24:	7f 7f       	andi	r23, 0xFF	; 255
    6a26:	7f 7f       	andi	r23, 0xFF	; 255
    6a28:	7f 7f       	andi	r23, 0xFF	; 255
    6a2a:	7f 7f       	andi	r23, 0xFF	; 255
    6a2c:	7f 7f       	andi	r23, 0xFF	; 255
    6a2e:	7f 7f       	andi	r23, 0xFF	; 255
    6a30:	7f 7f       	andi	r23, 0xFF	; 255
    6a32:	7f 7f       	andi	r23, 0xFF	; 255
    6a34:	7f 7f       	andi	r23, 0xFF	; 255
    6a36:	7f 7f       	andi	r23, 0xFF	; 255
    6a38:	7f 7f       	andi	r23, 0xFF	; 255
    6a3a:	7f 7f       	andi	r23, 0xFF	; 255
    6a3c:	7f 7f       	andi	r23, 0xFF	; 255
    6a3e:	7f 7f       	andi	r23, 0xFF	; 255
    6a40:	80 80       	ld	r8, Z
    6a42:	80 80       	ld	r8, Z
    6a44:	80 80       	ld	r8, Z
    6a46:	80 80       	ld	r8, Z
    6a48:	80 80       	ld	r8, Z
    6a4a:	80 80       	ld	r8, Z
    6a4c:	80 80       	ld	r8, Z
    6a4e:	80 80       	ld	r8, Z
    6a50:	80 80       	ld	r8, Z
    6a52:	80 80       	ld	r8, Z
    6a54:	80 80       	ld	r8, Z
    6a56:	80 80       	ld	r8, Z
    6a58:	80 80       	ld	r8, Z
    6a5a:	80 80       	ld	r8, Z
    6a5c:	80 80       	ld	r8, Z
    6a5e:	80 80       	ld	r8, Z
    6a60:	80 80       	ld	r8, Z
    6a62:	80 80       	ld	r8, Z
    6a64:	80 80       	ld	r8, Z
    6a66:	80 80       	ld	r8, Z
    6a68:	80 80       	ld	r8, Z
    6a6a:	80 80       	ld	r8, Z
    6a6c:	80 80       	ld	r8, Z
    6a6e:	80 80       	ld	r8, Z
    6a70:	80 80       	ld	r8, Z
    6a72:	80 80       	ld	r8, Z
    6a74:	80 80       	ld	r8, Z
    6a76:	80 80       	ld	r8, Z
    6a78:	80 80       	ld	r8, Z
    6a7a:	80 80       	ld	r8, Z
    6a7c:	80 80       	ld	r8, Z
    6a7e:	80 80       	ld	r8, Z
    6a80:	80 80       	ld	r8, Z
    6a82:	80 80       	ld	r8, Z
    6a84:	80 80       	ld	r8, Z
    6a86:	80 80       	ld	r8, Z
    6a88:	80 80       	ld	r8, Z
    6a8a:	80 80       	ld	r8, Z
    6a8c:	80 80       	ld	r8, Z
    6a8e:	80 80       	ld	r8, Z
    6a90:	80 80       	ld	r8, Z
    6a92:	80 80       	ld	r8, Z
    6a94:	80 80       	ld	r8, Z
    6a96:	80 80       	ld	r8, Z
    6a98:	80 80       	ld	r8, Z
    6a9a:	80 80       	ld	r8, Z
    6a9c:	80 80       	ld	r8, Z
    6a9e:	80 80       	ld	r8, Z
    6aa0:	80 80       	ld	r8, Z
    6aa2:	80 80       	ld	r8, Z
    6aa4:	80 80       	ld	r8, Z
    6aa6:	80 80       	ld	r8, Z
    6aa8:	80 80       	ld	r8, Z
    6aaa:	80 80       	ld	r8, Z
    6aac:	80 80       	ld	r8, Z
    6aae:	80 80       	ld	r8, Z
    6ab0:	80 80       	ld	r8, Z
    6ab2:	80 80       	ld	r8, Z
    6ab4:	80 80       	ld	r8, Z
    6ab6:	80 80       	ld	r8, Z
    6ab8:	80 80       	ld	r8, Z
    6aba:	80 80       	ld	r8, Z
    6abc:	80 80       	ld	r8, Z
    6abe:	80 80       	ld	r8, Z
    6ac0:	80 80       	ld	r8, Z
    6ac2:	80 80       	ld	r8, Z
    6ac4:	80 80       	ld	r8, Z
    6ac6:	80 80       	ld	r8, Z
    6ac8:	80 80       	ld	r8, Z
    6aca:	80 80       	ld	r8, Z
    6acc:	80 80       	ld	r8, Z
    6ace:	80 80       	ld	r8, Z
    6ad0:	80 80       	ld	r8, Z
    6ad2:	80 80       	ld	r8, Z
    6ad4:	80 80       	ld	r8, Z
    6ad6:	80 80       	ld	r8, Z
    6ad8:	80 80       	ld	r8, Z
    6ada:	80 80       	ld	r8, Z
    6adc:	80 80       	ld	r8, Z
    6ade:	80 80       	ld	r8, Z
    6ae0:	80 80       	ld	r8, Z
    6ae2:	80 80       	ld	r8, Z
    6ae4:	80 80       	ld	r8, Z
    6ae6:	80 80       	ld	r8, Z
    6ae8:	80 80       	ld	r8, Z
    6aea:	80 80       	ld	r8, Z
    6aec:	80 80       	ld	r8, Z
    6aee:	80 80       	ld	r8, Z
    6af0:	80 80       	ld	r8, Z
    6af2:	80 80       	ld	r8, Z
    6af4:	80 80       	ld	r8, Z
    6af6:	80 80       	ld	r8, Z
    6af8:	80 80       	ld	r8, Z
    6afa:	80 80       	ld	r8, Z
    6afc:	80 80       	ld	r8, Z
    6afe:	80 80       	ld	r8, Z
    6b00:	7f 7f       	andi	r23, 0xFF	; 255
    6b02:	7f 7f       	andi	r23, 0xFF	; 255
    6b04:	7f 7f       	andi	r23, 0xFF	; 255
    6b06:	7f 7f       	andi	r23, 0xFF	; 255
    6b08:	7f 7f       	andi	r23, 0xFF	; 255
    6b0a:	7f 7f       	andi	r23, 0xFF	; 255
    6b0c:	7f 7f       	andi	r23, 0xFF	; 255
    6b0e:	7f 7f       	andi	r23, 0xFF	; 255
    6b10:	7f 7f       	andi	r23, 0xFF	; 255
    6b12:	7f 7f       	andi	r23, 0xFF	; 255
    6b14:	7f 7f       	andi	r23, 0xFF	; 255
    6b16:	7f 7f       	andi	r23, 0xFF	; 255
    6b18:	7f 7f       	andi	r23, 0xFF	; 255
    6b1a:	7f 7f       	andi	r23, 0xFF	; 255
    6b1c:	7f 7f       	andi	r23, 0xFF	; 255
    6b1e:	7f 7f       	andi	r23, 0xFF	; 255
    6b20:	7f 7f       	andi	r23, 0xFF	; 255
    6b22:	7f 7f       	andi	r23, 0xFF	; 255
    6b24:	7f 7f       	andi	r23, 0xFF	; 255
    6b26:	7f 7f       	andi	r23, 0xFF	; 255
    6b28:	7f 7f       	andi	r23, 0xFF	; 255
    6b2a:	7f 7f       	andi	r23, 0xFF	; 255
    6b2c:	7f 7f       	andi	r23, 0xFF	; 255
    6b2e:	7f 7f       	andi	r23, 0xFF	; 255
    6b30:	7f 7f       	andi	r23, 0xFF	; 255
    6b32:	7f 7f       	andi	r23, 0xFF	; 255
    6b34:	7f 7f       	andi	r23, 0xFF	; 255
    6b36:	7f 7f       	andi	r23, 0xFF	; 255
    6b38:	7f 7f       	andi	r23, 0xFF	; 255
    6b3a:	7f 7f       	andi	r23, 0xFF	; 255
    6b3c:	7f 7f       	andi	r23, 0xFF	; 255
    6b3e:	7f 7f       	andi	r23, 0xFF	; 255
    6b40:	7f 7f       	andi	r23, 0xFF	; 255
    6b42:	7f 7f       	andi	r23, 0xFF	; 255
    6b44:	7f 7f       	andi	r23, 0xFF	; 255
    6b46:	7f 7f       	andi	r23, 0xFF	; 255
    6b48:	7f 7f       	andi	r23, 0xFF	; 255
    6b4a:	7f 7f       	andi	r23, 0xFF	; 255
    6b4c:	7f 7f       	andi	r23, 0xFF	; 255
    6b4e:	7f 7f       	andi	r23, 0xFF	; 255
    6b50:	7f 7f       	andi	r23, 0xFF	; 255
    6b52:	7f 7f       	andi	r23, 0xFF	; 255
    6b54:	7f 7f       	andi	r23, 0xFF	; 255
    6b56:	7f 7f       	andi	r23, 0xFF	; 255
    6b58:	7f 7f       	andi	r23, 0xFF	; 255
    6b5a:	7f 7f       	andi	r23, 0xFF	; 255
    6b5c:	7f 7f       	andi	r23, 0xFF	; 255
    6b5e:	7f 7f       	andi	r23, 0xFF	; 255
    6b60:	7f 7f       	andi	r23, 0xFF	; 255
    6b62:	7f 7f       	andi	r23, 0xFF	; 255
    6b64:	7f 7f       	andi	r23, 0xFF	; 255
    6b66:	7f 7f       	andi	r23, 0xFF	; 255
    6b68:	7f 7f       	andi	r23, 0xFF	; 255
    6b6a:	7f 7f       	andi	r23, 0xFF	; 255
    6b6c:	7f 7f       	andi	r23, 0xFF	; 255
    6b6e:	7f 7f       	andi	r23, 0xFF	; 255
    6b70:	7f 7f       	andi	r23, 0xFF	; 255
    6b72:	7f 7f       	andi	r23, 0xFF	; 255
    6b74:	7f 7f       	andi	r23, 0xFF	; 255
    6b76:	7f 7f       	andi	r23, 0xFF	; 255
    6b78:	7f 7f       	andi	r23, 0xFF	; 255
    6b7a:	7f 7f       	andi	r23, 0xFF	; 255
    6b7c:	7f 7f       	andi	r23, 0xFF	; 255
    6b7e:	7f 7f       	andi	r23, 0xFF	; 255
    6b80:	80 80       	ld	r8, Z
    6b82:	80 80       	ld	r8, Z
    6b84:	80 80       	ld	r8, Z
    6b86:	80 80       	ld	r8, Z
    6b88:	80 80       	ld	r8, Z
    6b8a:	80 80       	ld	r8, Z
    6b8c:	80 80       	ld	r8, Z
    6b8e:	80 80       	ld	r8, Z
    6b90:	80 80       	ld	r8, Z
    6b92:	80 80       	ld	r8, Z
    6b94:	80 80       	ld	r8, Z
    6b96:	80 80       	ld	r8, Z
    6b98:	80 80       	ld	r8, Z
    6b9a:	80 80       	ld	r8, Z
    6b9c:	80 80       	ld	r8, Z
    6b9e:	80 80       	ld	r8, Z
    6ba0:	80 80       	ld	r8, Z
    6ba2:	80 80       	ld	r8, Z
    6ba4:	80 80       	ld	r8, Z
    6ba6:	80 80       	ld	r8, Z
    6ba8:	80 80       	ld	r8, Z
    6baa:	80 80       	ld	r8, Z
    6bac:	80 80       	ld	r8, Z
    6bae:	80 80       	ld	r8, Z
    6bb0:	80 80       	ld	r8, Z
    6bb2:	80 80       	ld	r8, Z
    6bb4:	80 80       	ld	r8, Z
    6bb6:	80 80       	ld	r8, Z
    6bb8:	80 80       	ld	r8, Z
    6bba:	80 80       	ld	r8, Z
    6bbc:	80 80       	ld	r8, Z
    6bbe:	80 80       	ld	r8, Z
    6bc0:	80 80       	ld	r8, Z
    6bc2:	80 80       	ld	r8, Z
    6bc4:	80 80       	ld	r8, Z
    6bc6:	80 80       	ld	r8, Z
    6bc8:	80 80       	ld	r8, Z
    6bca:	80 80       	ld	r8, Z
    6bcc:	80 80       	ld	r8, Z
    6bce:	80 80       	ld	r8, Z
    6bd0:	80 80       	ld	r8, Z
    6bd2:	80 80       	ld	r8, Z
    6bd4:	80 80       	ld	r8, Z
    6bd6:	80 80       	ld	r8, Z
    6bd8:	80 80       	ld	r8, Z
    6bda:	80 80       	ld	r8, Z
    6bdc:	80 80       	ld	r8, Z
    6bde:	80 80       	ld	r8, Z
    6be0:	80 80       	ld	r8, Z
    6be2:	80 80       	ld	r8, Z
    6be4:	80 80       	ld	r8, Z
    6be6:	80 80       	ld	r8, Z
    6be8:	80 80       	ld	r8, Z
    6bea:	80 80       	ld	r8, Z
    6bec:	80 80       	ld	r8, Z
    6bee:	80 80       	ld	r8, Z
    6bf0:	80 80       	ld	r8, Z
    6bf2:	80 80       	ld	r8, Z
    6bf4:	80 80       	ld	r8, Z
    6bf6:	80 80       	ld	r8, Z
    6bf8:	80 80       	ld	r8, Z
    6bfa:	80 80       	ld	r8, Z
    6bfc:	80 80       	ld	r8, Z
    6bfe:	80 80       	ld	r8, Z
    6c00:	7f 7f       	andi	r23, 0xFF	; 255
    6c02:	7f 7f       	andi	r23, 0xFF	; 255
    6c04:	7f 7f       	andi	r23, 0xFF	; 255
    6c06:	7f 7f       	andi	r23, 0xFF	; 255
    6c08:	7f 7f       	andi	r23, 0xFF	; 255
    6c0a:	7f 7f       	andi	r23, 0xFF	; 255
    6c0c:	7f 7f       	andi	r23, 0xFF	; 255
    6c0e:	7f 7f       	andi	r23, 0xFF	; 255
    6c10:	7f 7f       	andi	r23, 0xFF	; 255
    6c12:	7f 7f       	andi	r23, 0xFF	; 255
    6c14:	7f 7f       	andi	r23, 0xFF	; 255
    6c16:	7f 7f       	andi	r23, 0xFF	; 255
    6c18:	7f 7f       	andi	r23, 0xFF	; 255
    6c1a:	7f 7f       	andi	r23, 0xFF	; 255
    6c1c:	7f 7f       	andi	r23, 0xFF	; 255
    6c1e:	7f 7f       	andi	r23, 0xFF	; 255
    6c20:	7f 7f       	andi	r23, 0xFF	; 255
    6c22:	7f 7f       	andi	r23, 0xFF	; 255
    6c24:	7f 7f       	andi	r23, 0xFF	; 255
    6c26:	7f 7f       	andi	r23, 0xFF	; 255
    6c28:	7f 7f       	andi	r23, 0xFF	; 255
    6c2a:	7f 7f       	andi	r23, 0xFF	; 255
    6c2c:	7f 7f       	andi	r23, 0xFF	; 255
    6c2e:	7f 7f       	andi	r23, 0xFF	; 255
    6c30:	7f 7f       	andi	r23, 0xFF	; 255
    6c32:	7f 7f       	andi	r23, 0xFF	; 255
    6c34:	7f 7f       	andi	r23, 0xFF	; 255
    6c36:	7f 7f       	andi	r23, 0xFF	; 255
    6c38:	7f 7f       	andi	r23, 0xFF	; 255
    6c3a:	7f 7f       	andi	r23, 0xFF	; 255
    6c3c:	7f 7f       	andi	r23, 0xFF	; 255
    6c3e:	7f 7f       	andi	r23, 0xFF	; 255
    6c40:	7f 7f       	andi	r23, 0xFF	; 255
    6c42:	7f 7f       	andi	r23, 0xFF	; 255
    6c44:	7f 7f       	andi	r23, 0xFF	; 255
    6c46:	7f 7f       	andi	r23, 0xFF	; 255
    6c48:	7f 7f       	andi	r23, 0xFF	; 255
    6c4a:	7f 7f       	andi	r23, 0xFF	; 255
    6c4c:	7f 7f       	andi	r23, 0xFF	; 255
    6c4e:	7f 7f       	andi	r23, 0xFF	; 255
    6c50:	7f 7f       	andi	r23, 0xFF	; 255
    6c52:	7f 7f       	andi	r23, 0xFF	; 255
    6c54:	7f 7f       	andi	r23, 0xFF	; 255
    6c56:	7f 7f       	andi	r23, 0xFF	; 255
    6c58:	7f 7f       	andi	r23, 0xFF	; 255
    6c5a:	7f 7f       	andi	r23, 0xFF	; 255
    6c5c:	7f 7f       	andi	r23, 0xFF	; 255
    6c5e:	7f 7f       	andi	r23, 0xFF	; 255
    6c60:	7f 7f       	andi	r23, 0xFF	; 255
    6c62:	7f 7f       	andi	r23, 0xFF	; 255
    6c64:	7f 7f       	andi	r23, 0xFF	; 255
    6c66:	7f 7f       	andi	r23, 0xFF	; 255
    6c68:	7f 7f       	andi	r23, 0xFF	; 255
    6c6a:	7f 7f       	andi	r23, 0xFF	; 255
    6c6c:	7f 7f       	andi	r23, 0xFF	; 255
    6c6e:	7f 7f       	andi	r23, 0xFF	; 255
    6c70:	7f 7f       	andi	r23, 0xFF	; 255
    6c72:	7f 7f       	andi	r23, 0xFF	; 255
    6c74:	7f 7f       	andi	r23, 0xFF	; 255
    6c76:	7f 7f       	andi	r23, 0xFF	; 255
    6c78:	7f 7f       	andi	r23, 0xFF	; 255
    6c7a:	7f 7f       	andi	r23, 0xFF	; 255
    6c7c:	7f 7f       	andi	r23, 0xFF	; 255
    6c7e:	7f 7f       	andi	r23, 0xFF	; 255
    6c80:	7f 7f       	andi	r23, 0xFF	; 255
    6c82:	7f 7f       	andi	r23, 0xFF	; 255
    6c84:	7f 7f       	andi	r23, 0xFF	; 255
    6c86:	7f 7f       	andi	r23, 0xFF	; 255
    6c88:	7f 7f       	andi	r23, 0xFF	; 255
    6c8a:	7f 7f       	andi	r23, 0xFF	; 255
    6c8c:	7f 7f       	andi	r23, 0xFF	; 255
    6c8e:	7f 7f       	andi	r23, 0xFF	; 255
    6c90:	7f 7f       	andi	r23, 0xFF	; 255
    6c92:	7f 7f       	andi	r23, 0xFF	; 255
    6c94:	7f 7f       	andi	r23, 0xFF	; 255
    6c96:	7f 7f       	andi	r23, 0xFF	; 255
    6c98:	7f 7f       	andi	r23, 0xFF	; 255
    6c9a:	7f 7f       	andi	r23, 0xFF	; 255
    6c9c:	7f 7f       	andi	r23, 0xFF	; 255
    6c9e:	7f 7f       	andi	r23, 0xFF	; 255
    6ca0:	7f 7f       	andi	r23, 0xFF	; 255
    6ca2:	7f 7f       	andi	r23, 0xFF	; 255
    6ca4:	7f 7f       	andi	r23, 0xFF	; 255
    6ca6:	7f 7f       	andi	r23, 0xFF	; 255
    6ca8:	7f 7f       	andi	r23, 0xFF	; 255
    6caa:	7f 7f       	andi	r23, 0xFF	; 255
    6cac:	7f 7f       	andi	r23, 0xFF	; 255
    6cae:	7f 7f       	andi	r23, 0xFF	; 255
    6cb0:	7f 7f       	andi	r23, 0xFF	; 255
    6cb2:	7f 7f       	andi	r23, 0xFF	; 255
    6cb4:	7f 7f       	andi	r23, 0xFF	; 255
    6cb6:	7f 7f       	andi	r23, 0xFF	; 255
    6cb8:	7f 7f       	andi	r23, 0xFF	; 255
    6cba:	7f 7f       	andi	r23, 0xFF	; 255
    6cbc:	7f 7f       	andi	r23, 0xFF	; 255
    6cbe:	7f 7f       	andi	r23, 0xFF	; 255
    6cc0:	80 80       	ld	r8, Z
    6cc2:	80 80       	ld	r8, Z
    6cc4:	80 80       	ld	r8, Z
    6cc6:	80 80       	ld	r8, Z
    6cc8:	80 80       	ld	r8, Z
    6cca:	80 80       	ld	r8, Z
    6ccc:	80 80       	ld	r8, Z
    6cce:	80 80       	ld	r8, Z
    6cd0:	80 80       	ld	r8, Z
    6cd2:	80 80       	ld	r8, Z
    6cd4:	80 80       	ld	r8, Z
    6cd6:	80 80       	ld	r8, Z
    6cd8:	80 80       	ld	r8, Z
    6cda:	80 80       	ld	r8, Z
    6cdc:	80 80       	ld	r8, Z
    6cde:	80 80       	ld	r8, Z
    6ce0:	80 80       	ld	r8, Z
    6ce2:	80 80       	ld	r8, Z
    6ce4:	80 80       	ld	r8, Z
    6ce6:	80 80       	ld	r8, Z
    6ce8:	80 80       	ld	r8, Z
    6cea:	80 80       	ld	r8, Z
    6cec:	80 80       	ld	r8, Z
    6cee:	80 80       	ld	r8, Z
    6cf0:	80 80       	ld	r8, Z
    6cf2:	80 80       	ld	r8, Z
    6cf4:	80 80       	ld	r8, Z
    6cf6:	80 80       	ld	r8, Z
    6cf8:	80 80       	ld	r8, Z
    6cfa:	80 80       	ld	r8, Z
    6cfc:	80 80       	ld	r8, Z
    6cfe:	80 80       	ld	r8, Z
    6d00:	03 09       	sbc	r16, r3
    6d02:	13 1e       	adc	r1, r19
    6d04:	28 31       	cpi	r18, 0x18	; 24
    6d06:	3a 40       	sbci	r19, 0x0A	; 10
    6d08:	46 4c       	sbci	r20, 0xC6	; 198
    6d0a:	50 54       	subi	r21, 0x40	; 64
    6d0c:	58 5b       	subi	r21, 0xB8	; 184
    6d0e:	5e 61       	ori	r21, 0x1E	; 30
    6d10:	63 65       	ori	r22, 0x53	; 83
    6d12:	67 69       	ori	r22, 0x97	; 151
    6d14:	6b 6c       	ori	r22, 0xCB	; 203
    6d16:	6e 6f       	ori	r22, 0xFE	; 254
    6d18:	70 71       	andi	r23, 0x10	; 16
    6d1a:	72 73       	andi	r23, 0x32	; 50
    6d1c:	74 75       	andi	r23, 0x54	; 84
    6d1e:	76 77       	andi	r23, 0x76	; 118
    6d20:	77 78       	andi	r23, 0x87	; 135
    6d22:	79 79       	andi	r23, 0x99	; 153
    6d24:	7a 7a       	andi	r23, 0xAA	; 170
    6d26:	7b 7b       	andi	r23, 0xBB	; 187
    6d28:	7c 7c       	andi	r23, 0xCC	; 204
    6d2a:	7c 7d       	andi	r23, 0xDC	; 220
    6d2c:	7d 7d       	andi	r23, 0xDD	; 221
    6d2e:	7e 7e       	andi	r23, 0xEE	; 238
    6d30:	7e 7e       	andi	r23, 0xEE	; 238
    6d32:	7f 7f       	andi	r23, 0xFF	; 255
    6d34:	7f 7f       	andi	r23, 0xFF	; 255
    6d36:	7f 7f       	andi	r23, 0xFF	; 255
    6d38:	7f 7f       	andi	r23, 0xFF	; 255
    6d3a:	7f 7f       	andi	r23, 0xFF	; 255
    6d3c:	7f 7f       	andi	r23, 0xFF	; 255
    6d3e:	7f 7f       	andi	r23, 0xFF	; 255
    6d40:	7f 7f       	andi	r23, 0xFF	; 255
    6d42:	7f 7f       	andi	r23, 0xFF	; 255
    6d44:	7f 7f       	andi	r23, 0xFF	; 255
    6d46:	7f 7f       	andi	r23, 0xFF	; 255
    6d48:	7f 7f       	andi	r23, 0xFF	; 255
    6d4a:	7f 7f       	andi	r23, 0xFF	; 255
    6d4c:	7f 7e       	andi	r23, 0xEF	; 239
    6d4e:	7e 7e       	andi	r23, 0xEE	; 238
    6d50:	7e 7d       	andi	r23, 0xDE	; 222
    6d52:	7d 7d       	andi	r23, 0xDD	; 221
    6d54:	7c 7c       	andi	r23, 0xCC	; 204
    6d56:	7c 7b       	andi	r23, 0xBC	; 188
    6d58:	7b 7a       	andi	r23, 0xAB	; 171
    6d5a:	7a 79       	andi	r23, 0x9A	; 154
    6d5c:	79 78       	andi	r23, 0x89	; 137
    6d5e:	77 77       	andi	r23, 0x77	; 119
    6d60:	76 75       	andi	r23, 0x56	; 86
    6d62:	74 73       	andi	r23, 0x34	; 52
    6d64:	72 71       	andi	r23, 0x12	; 18
    6d66:	70 6f       	ori	r23, 0xF0	; 240
    6d68:	6e 6c       	ori	r22, 0xCE	; 206
    6d6a:	6b 69       	ori	r22, 0x9B	; 155
    6d6c:	67 65       	ori	r22, 0x57	; 87
    6d6e:	63 61       	ori	r22, 0x13	; 19
    6d70:	5e 5b       	subi	r21, 0xBE	; 190
    6d72:	58 54       	subi	r21, 0x48	; 72
    6d74:	50 4c       	sbci	r21, 0xC0	; 192
    6d76:	46 40       	sbci	r20, 0x06	; 6
    6d78:	3a 31       	cpi	r19, 0x1A	; 26
    6d7a:	28 1e       	adc	r2, r24
    6d7c:	13 09       	sbc	r17, r3
    6d7e:	03 00       	.word	0x0003	; ????
    6d80:	c6 cc       	rjmp	.-1652   	; 0x670e <waves+0xe>
    6d82:	d5 db       	rcall	.-2134   	; 0x652e <steptable+0x26>
    6d84:	df e3       	ldi	r29, 0x3F	; 63
    6d86:	e5 e7       	ldi	r30, 0x75	; 117
    6d88:	e9 ea       	ldi	r30, 0xA9	; 169
    6d8a:	eb ec       	ldi	r30, 0xCB	; 203
    6d8c:	ed ee       	ldi	r30, 0xED	; 237
    6d8e:	ef ef       	ldi	r30, 0xFF	; 255
    6d90:	f0 f0       	brcs	.+60     	; 0x6dce <waves+0x6ce>
    6d92:	f0 f1       	brcs	.+124    	; 0x6e10 <waves+0x710>
    6d94:	f1 f1       	breq	.+124    	; 0x6e12 <waves+0x712>
    6d96:	f1 f2       	breq	.-68     	; 0x6d54 <waves+0x654>
    6d98:	f2 f2       	brmi	.-68     	; 0x6d56 <waves+0x656>
    6d9a:	f2 f2       	brmi	.-68     	; 0x6d58 <waves+0x658>
    6d9c:	f2 f2       	brmi	.-68     	; 0x6d5a <waves+0x65a>
    6d9e:	f2 f3       	brmi	.-4      	; 0x6d9c <waves+0x69c>
    6da0:	f3 f3       	brvs	.-4      	; 0x6d9e <waves+0x69e>
    6da2:	f3 f3       	brvs	.-4      	; 0x6da0 <waves+0x6a0>
    6da4:	f3 f3       	brvs	.-4      	; 0x6da2 <waves+0x6a2>
    6da6:	f3 f3       	brvs	.-4      	; 0x6da4 <waves+0x6a4>
    6da8:	f3 f3       	brvs	.-4      	; 0x6da6 <waves+0x6a6>
    6daa:	f3 f3       	brvs	.-4      	; 0x6da8 <waves+0x6a8>
    6dac:	f3 f3       	brvs	.-4      	; 0x6daa <waves+0x6aa>
    6dae:	f3 f3       	brvs	.-4      	; 0x6dac <waves+0x6ac>
    6db0:	f3 f3       	brvs	.-4      	; 0x6dae <waves+0x6ae>
    6db2:	f3 f3       	brvs	.-4      	; 0x6db0 <waves+0x6b0>
    6db4:	f3 f3       	brvs	.-4      	; 0x6db2 <waves+0x6b2>
    6db6:	f3 f3       	brvs	.-4      	; 0x6db4 <waves+0x6b4>
    6db8:	f3 f3       	brvs	.-4      	; 0x6db6 <waves+0x6b6>
    6dba:	f3 f3       	brvs	.-4      	; 0x6db8 <waves+0x6b8>
    6dbc:	f3 f3       	brvs	.-4      	; 0x6dba <waves+0x6ba>
    6dbe:	f3 f3       	brvs	.-4      	; 0x6dbc <waves+0x6bc>
    6dc0:	f3 f3       	brvs	.-4      	; 0x6dbe <waves+0x6be>
    6dc2:	f3 f3       	brvs	.-4      	; 0x6dc0 <waves+0x6c0>
    6dc4:	f3 f3       	brvs	.-4      	; 0x6dc2 <waves+0x6c2>
    6dc6:	f3 f3       	brvs	.-4      	; 0x6dc4 <waves+0x6c4>
    6dc8:	f3 f3       	brvs	.-4      	; 0x6dc6 <waves+0x6c6>
    6dca:	f3 f3       	brvs	.-4      	; 0x6dc8 <waves+0x6c8>
    6dcc:	f3 f3       	brvs	.-4      	; 0x6dca <waves+0x6ca>
    6dce:	f3 f3       	brvs	.-4      	; 0x6dcc <waves+0x6cc>
    6dd0:	f3 f3       	brvs	.-4      	; 0x6dce <waves+0x6ce>
    6dd2:	f3 f3       	brvs	.-4      	; 0x6dd0 <waves+0x6d0>
    6dd4:	f3 f3       	brvs	.-4      	; 0x6dd2 <waves+0x6d2>
    6dd6:	f3 f3       	brvs	.-4      	; 0x6dd4 <waves+0x6d4>
    6dd8:	f3 f3       	brvs	.-4      	; 0x6dd6 <waves+0x6d6>
    6dda:	f3 f3       	brvs	.-4      	; 0x6dd8 <waves+0x6d8>
    6ddc:	f3 f3       	brvs	.-4      	; 0x6dda <waves+0x6da>
    6dde:	f3 f3       	brvs	.-4      	; 0x6ddc <waves+0x6dc>
    6de0:	f2 f2       	brmi	.-68     	; 0x6d9e <waves+0x69e>
    6de2:	f2 f2       	brmi	.-68     	; 0x6da0 <waves+0x6a0>
    6de4:	f2 f2       	brmi	.-68     	; 0x6da2 <waves+0x6a2>
    6de6:	f2 f2       	brmi	.-68     	; 0x6da4 <waves+0x6a4>
    6de8:	f1 f1       	breq	.+124    	; 0x6e66 <waves+0x766>
    6dea:	f1 f1       	breq	.+124    	; 0x6e68 <waves+0x768>
    6dec:	f0 f0       	brcs	.+60     	; 0x6e2a <waves+0x72a>
    6dee:	f0 ef       	ldi	r31, 0xF0	; 240
    6df0:	ef ee       	ldi	r30, 0xEF	; 239
    6df2:	ed ec       	ldi	r30, 0xCD	; 205
    6df4:	eb ea       	ldi	r30, 0xAB	; 171
    6df6:	e9 e7       	ldi	r30, 0x79	; 121
    6df8:	e5 e3       	ldi	r30, 0x35	; 53
    6dfa:	df db       	rcall	.-2114   	; 0x65ba <steptable+0xb2>
    6dfc:	d5 cc       	rjmp	.-1622   	; 0x67a8 <waves+0xa8>
    6dfe:	c6 00       	.word	0x00c6	; ????
    6e00:	00 28       	or	r0, r0
    6e02:	3d 42       	sbci	r19, 0x2D	; 45
    6e04:	30 2d       	mov	r19, r0
    6e06:	2c 2b       	or	r18, r28
    6e08:	2c 2d       	mov	r18, r12
    6e0a:	2e 2f       	mov	r18, r30
    6e0c:	30 32       	cpi	r19, 0x20	; 32
    6e0e:	33 35       	cpi	r19, 0x53	; 83
    6e10:	37 39       	cpi	r19, 0x97	; 151
    6e12:	3b 3d       	cpi	r19, 0xDB	; 219
    6e14:	3f 41       	sbci	r19, 0x1F	; 31
    6e16:	43 45       	sbci	r20, 0x53	; 83
    6e18:	48 4a       	sbci	r20, 0xA8	; 168
    6e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    6e1c:	50 53       	subi	r21, 0x30	; 48
    6e1e:	55 57       	subi	r21, 0x75	; 117
    6e20:	59 5b       	subi	r21, 0xB9	; 185
    6e22:	5d 5f       	subi	r21, 0xFD	; 253
    6e24:	61 63       	ori	r22, 0x31	; 49
    6e26:	65 67       	ori	r22, 0x75	; 117
    6e28:	69 6b       	ori	r22, 0xB9	; 185
    6e2a:	6c 6e       	ori	r22, 0xEC	; 236
    6e2c:	70 71       	andi	r23, 0x10	; 16
    6e2e:	73 74       	andi	r23, 0x43	; 67
    6e30:	75 77       	andi	r23, 0x75	; 117
    6e32:	78 79       	andi	r23, 0x98	; 152
    6e34:	7a 7b       	andi	r23, 0xBA	; 186
    6e36:	7c 7d       	andi	r23, 0xDC	; 220
    6e38:	7d 7e       	andi	r23, 0xED	; 237
    6e3a:	7e 7f       	andi	r23, 0xFE	; 254
    6e3c:	7f 7f       	andi	r23, 0xFF	; 255
    6e3e:	7f 7f       	andi	r23, 0xFF	; 255
    6e40:	7f 7f       	andi	r23, 0xFF	; 255
    6e42:	7f 7f       	andi	r23, 0xFF	; 255
    6e44:	7f 7f       	andi	r23, 0xFF	; 255
    6e46:	7e 7e       	andi	r23, 0xEE	; 238
    6e48:	7d 7d       	andi	r23, 0xDD	; 221
    6e4a:	7c 7b       	andi	r23, 0xBC	; 188
    6e4c:	7a 79       	andi	r23, 0x9A	; 154
    6e4e:	78 77       	andi	r23, 0x78	; 120
    6e50:	75 74       	andi	r23, 0x45	; 69
    6e52:	73 71       	andi	r23, 0x13	; 19
    6e54:	70 6e       	ori	r23, 0xE0	; 224
    6e56:	6c 6b       	ori	r22, 0xBC	; 188
    6e58:	69 67       	ori	r22, 0x79	; 121
    6e5a:	65 63       	ori	r22, 0x35	; 53
    6e5c:	61 5f       	subi	r22, 0xF1	; 241
    6e5e:	5d 5b       	subi	r21, 0xBD	; 189
    6e60:	59 57       	subi	r21, 0x79	; 121
    6e62:	55 53       	subi	r21, 0x35	; 53
    6e64:	50 4e       	sbci	r21, 0xE0	; 224
    6e66:	4c 4a       	sbci	r20, 0xAC	; 172
    6e68:	48 45       	sbci	r20, 0x58	; 88
    6e6a:	43 41       	sbci	r20, 0x13	; 19
    6e6c:	3f 3d       	cpi	r19, 0xDF	; 223
    6e6e:	3b 39       	cpi	r19, 0x9B	; 155
    6e70:	37 35       	cpi	r19, 0x57	; 87
    6e72:	33 32       	cpi	r19, 0x23	; 35
    6e74:	30 2f       	mov	r19, r16
    6e76:	2e 2d       	mov	r18, r14
    6e78:	2c 2b       	or	r18, r28
    6e7a:	2c 2d       	mov	r18, r12
    6e7c:	30 42       	sbci	r19, 0x20	; 32
    6e7e:	3d 28       	or	r3, r13
    6e80:	00 e9       	ldi	r16, 0x90	; 144
    6e82:	e5 fe       	sbrs	r14, 5
    6e84:	d4 d7       	rcall	.+4008   	; 0x7e2e <render_hud+0x16>
    6e86:	d7 d7       	rcall	.+4014   	; 0x7e36 <render_hud+0x1e>
    6e88:	d6 d4       	rcall	.+2476   	; 0x7836 <LBLineIntersect+0xc2>
    6e8a:	d2 d0       	rcall	.+420    	; 0x7030 <waves+0x930>
    6e8c:	ce cc       	rjmp	.-1636   	; 0x682a <waves+0x12a>
    6e8e:	ca c8       	rjmp	.-3692   	; 0x6024 <ProcessMusic+0x32>
    6e90:	c6 c3       	rjmp	.+1932   	; 0x761e <LBGetNextFrame+0x42>
    6e92:	c1 bf       	out	0x31, r28	; 49
    6e94:	bd ba       	out	0x1d, r11	; 29
    6e96:	b8 b6       	in	r11, 0x38	; 56
    6e98:	b4 b1       	in	r27, 0x04	; 4
    6e9a:	af ad       	ldd	r26, Y+63	; 0x3f
    6e9c:	ab a9       	ldd	r26, Y+51	; 0x33
    6e9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    6ea0:	a3 a1       	ldd	r26, Z+35	; 0x23
    6ea2:	9f 9e       	mul	r9, r31
    6ea4:	9c 9a       	sbi	0x13, 4	; 19
    6ea6:	99 97       	sbiw	r26, 0x29	; 41
    6ea8:	95 94       	asr	r9
    6eaa:	93 91       	.word	0x9193	; ????
    6eac:	90 8f       	std	Z+24, r25	; 0x18
    6eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6eb0:	8b 8a       	std	Y+19, r8	; 0x13
    6eb2:	89 88       	ldd	r8, Y+17	; 0x11
    6eb4:	88 87       	std	Y+8, r24	; 0x08
    6eb6:	86 85       	ldd	r24, Z+14	; 0x0e
    6eb8:	85 84       	ldd	r8, Z+13	; 0x0d
    6eba:	84 84       	ldd	r8, Z+12	; 0x0c
    6ebc:	83 83       	std	Z+3, r24	; 0x03
    6ebe:	83 83       	std	Z+3, r24	; 0x03
    6ec0:	83 83       	std	Z+3, r24	; 0x03
    6ec2:	83 83       	std	Z+3, r24	; 0x03
    6ec4:	83 84       	ldd	r8, Z+11	; 0x0b
    6ec6:	84 84       	ldd	r8, Z+12	; 0x0c
    6ec8:	85 85       	ldd	r24, Z+13	; 0x0d
    6eca:	86 87       	std	Z+14, r24	; 0x0e
    6ecc:	88 88       	ldd	r8, Y+16	; 0x10
    6ece:	89 8a       	std	Y+17, r8	; 0x11
    6ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    6ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    6ed4:	90 91 93 94 	lds	r25, 0x9493
    6ed8:	95 97       	sbiw	r26, 0x25	; 37
    6eda:	99 9a       	sbi	0x13, 1	; 19
    6edc:	9c 9e       	mul	r9, r28
    6ede:	9f a1       	ldd	r25, Y+39	; 0x27
    6ee0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    6ee2:	a7 a9       	ldd	r26, Z+55	; 0x37
    6ee4:	ab ad       	ldd	r26, Y+59	; 0x3b
    6ee6:	af b1       	in	r26, 0x0f	; 15
    6ee8:	b4 b6       	in	r11, 0x34	; 52
    6eea:	b8 ba       	out	0x18, r11	; 24
    6eec:	bd bf       	out	0x3d, r27	; 61
    6eee:	c1 c3       	rjmp	.+1922   	; 0x7672 <LBGetJoyPadState+0x50>
    6ef0:	c6 c8       	rjmp	.-3700   	; 0x607e <ProcessMusic+0x8c>
    6ef2:	ca cc       	rjmp	.-1644   	; 0x6888 <waves+0x188>
    6ef4:	ce d0       	rcall	.+412    	; 0x7092 <waves+0x992>
    6ef6:	d2 d4       	rcall	.+2468   	; 0x789c <LBLineIntersect+0x128>
    6ef8:	d6 d7       	rcall	.+4012   	; 0x7ea6 <render_banter+0x1c>
    6efa:	d7 d7       	rcall	.+4014   	; 0x7eaa <render_banter+0x20>
    6efc:	d4 fe       	sbrs	r13, 4
    6efe:	e5 e9       	ldi	r30, 0x95	; 149
    6f00:	f9 f8       	.word	0xf8f9	; ????
    6f02:	f9 f5       	brne	.+126    	; 0x6f82 <waves+0x882>
    6f04:	eb e1       	ldi	r30, 0x1B	; 27
    6f06:	dd de       	rcall	.-582    	; 0x6cc2 <waves+0x5c2>
    6f08:	e0 e2       	ldi	r30, 0x20	; 32
    6f0a:	e4 e5       	ldi	r30, 0x54	; 84
    6f0c:	e6 e5       	ldi	r30, 0x56	; 86
    6f0e:	e4 e2       	ldi	r30, 0x24	; 36
    6f10:	de d9       	rcall	.-3140   	; 0x62ce <ProcessMusic+0x2dc>
    6f12:	d2 ca       	rjmp	.-2652   	; 0x64b8 <esmw+0x14>
    6f14:	c1 b7       	in	r28, 0x31	; 49
    6f16:	ac a2       	std	Y+36, r10	; 0x24
    6f18:	99 91       	ld	r25, Y+
    6f1a:	8a 86       	std	Y+10, r8	; 0x0a
    6f1c:	83 81       	ldd	r24, Z+3	; 0x03
    6f1e:	80 80       	ld	r8, Z
    6f20:	81 82       	std	Z+1, r8	; 0x01
    6f22:	83 85       	ldd	r24, Z+11	; 0x0b
    6f24:	86 88       	ldd	r8, Z+22	; 0x16
    6f26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    6f28:	8d 8f       	std	Y+29, r24	; 0x1d
    6f2a:	90 92 93 95 	sts	0x9593, r9
    6f2e:	96 97       	sbiw	r26, 0x26	; 38
    6f30:	98 99       	sbic	0x13, 0	; 19
    6f32:	9a 9b       	sbis	0x13, 2	; 19
    6f34:	9b 9c       	mul	r9, r11
    6f36:	9d 9d       	mul	r25, r13
    6f38:	9d 9e       	mul	r9, r29
    6f3a:	9e 9e       	mul	r9, r30
    6f3c:	9f 9f       	mul	r25, r31
    6f3e:	9f 9f       	mul	r25, r31
    6f40:	9f 9f       	mul	r25, r31
    6f42:	9f 9e       	mul	r9, r31
    6f44:	9e 9e       	mul	r9, r30
    6f46:	9d 9d       	mul	r25, r13
    6f48:	9d 9c       	mul	r9, r13
    6f4a:	9b 9b       	sbis	0x13, 3	; 19
    6f4c:	9a 99       	sbic	0x13, 2	; 19
    6f4e:	98 97       	sbiw	r26, 0x28	; 40
    6f50:	96 95       	lsr	r25
    6f52:	93 92       	.word	0x9293	; ????
    6f54:	90 8f       	std	Z+24, r25	; 0x18
    6f56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6f58:	8a 88       	ldd	r8, Y+18	; 0x12
    6f5a:	86 85       	ldd	r24, Z+14	; 0x0e
    6f5c:	83 82       	std	Z+3, r8	; 0x03
    6f5e:	81 80       	ldd	r8, Z+1	; 0x01
    6f60:	80 81       	ld	r24, Z
    6f62:	83 86       	std	Z+11, r8	; 0x0b
    6f64:	8a 91       	ld	r24, -Y
    6f66:	99 a2       	std	Y+33, r9	; 0x21
    6f68:	ac b7       	in	r26, 0x3c	; 60
    6f6a:	c1 ca       	rjmp	.-2686   	; 0x64ee <esmw+0x4a>
    6f6c:	d2 d9       	rcall	.-3164   	; 0x6312 <ProcessMusic+0x320>
    6f6e:	de e2       	ldi	r29, 0x2E	; 46
    6f70:	e4 e5       	ldi	r30, 0x54	; 84
    6f72:	e6 e5       	ldi	r30, 0x56	; 86
    6f74:	e4 e2       	ldi	r30, 0x24	; 36
    6f76:	e0 de       	rcall	.-576    	; 0x6d38 <waves+0x638>
    6f78:	dd e1       	ldi	r29, 0x1D	; 29
    6f7a:	eb f5       	brvc	.+122    	; 0x6ff6 <waves+0x8f6>
    6f7c:	f9 f8       	.word	0xf8f9	; ????
    6f7e:	f9 00       	.word	0x00f9	; ????
    6f80:	07 08       	sbc	r0, r7
    6f82:	07 0b       	sbc	r16, r23
    6f84:	15 1f       	adc	r17, r21
    6f86:	23 22       	and	r2, r19
    6f88:	20 1e       	adc	r2, r16
    6f8a:	1c 1b       	sub	r17, r28
    6f8c:	1a 1b       	sub	r17, r26
    6f8e:	1c 1e       	adc	r1, r28
    6f90:	22 27       	eor	r18, r18
    6f92:	2e 36       	cpi	r18, 0x6E	; 110
    6f94:	3f 49       	sbci	r19, 0x9F	; 159
    6f96:	54 5e       	subi	r21, 0xE4	; 228
    6f98:	67 6f       	ori	r22, 0xF7	; 247
    6f9a:	76 7a       	andi	r23, 0xA6	; 166
    6f9c:	7e 7f       	andi	r23, 0xFE	; 254
    6f9e:	7f 7f       	andi	r23, 0xFF	; 255
    6fa0:	7f 7e       	andi	r23, 0xEF	; 239
    6fa2:	7d 7b       	andi	r23, 0xBD	; 189
    6fa4:	7a 78       	andi	r23, 0x8A	; 138
    6fa6:	76 74       	andi	r23, 0x46	; 70
    6fa8:	73 71       	andi	r23, 0x13	; 19
    6faa:	70 6e       	ori	r23, 0xE0	; 224
    6fac:	6d 6b       	ori	r22, 0xBD	; 189
    6fae:	6a 69       	ori	r22, 0x9A	; 154
    6fb0:	68 67       	ori	r22, 0x78	; 120
    6fb2:	66 65       	ori	r22, 0x56	; 86
    6fb4:	65 64       	ori	r22, 0x45	; 69
    6fb6:	64 63       	ori	r22, 0x34	; 52
    6fb8:	63 62       	ori	r22, 0x23	; 35
    6fba:	62 62       	ori	r22, 0x22	; 34
    6fbc:	61 61       	ori	r22, 0x11	; 17
    6fbe:	61 61       	ori	r22, 0x11	; 17
    6fc0:	61 61       	ori	r22, 0x11	; 17
    6fc2:	61 62       	ori	r22, 0x21	; 33
    6fc4:	62 62       	ori	r22, 0x22	; 34
    6fc6:	63 63       	ori	r22, 0x33	; 51
    6fc8:	63 64       	ori	r22, 0x43	; 67
    6fca:	65 65       	ori	r22, 0x55	; 85
    6fcc:	66 67       	ori	r22, 0x76	; 118
    6fce:	68 69       	ori	r22, 0x98	; 152
    6fd0:	6a 6b       	ori	r22, 0xBA	; 186
    6fd2:	6d 6e       	ori	r22, 0xED	; 237
    6fd4:	70 71       	andi	r23, 0x10	; 16
    6fd6:	73 74       	andi	r23, 0x43	; 67
    6fd8:	76 78       	andi	r23, 0x86	; 134
    6fda:	7a 7b       	andi	r23, 0xBA	; 186
    6fdc:	7d 7e       	andi	r23, 0xED	; 237
    6fde:	7f 7f       	andi	r23, 0xFF	; 255
    6fe0:	7f 7f       	andi	r23, 0xFF	; 255
    6fe2:	7e 7a       	andi	r23, 0xAE	; 174
    6fe4:	76 6f       	ori	r23, 0xF6	; 246
    6fe6:	67 5e       	subi	r22, 0xE7	; 231
    6fe8:	54 49       	sbci	r21, 0x94	; 148
    6fea:	3f 36       	cpi	r19, 0x6F	; 111
    6fec:	2e 27       	eor	r18, r30
    6fee:	22 1e       	adc	r2, r18
    6ff0:	1c 1b       	sub	r17, r28
    6ff2:	1a 1b       	sub	r17, r26
    6ff4:	1c 1e       	adc	r1, r28
    6ff6:	20 22       	and	r2, r16
    6ff8:	23 1f       	adc	r18, r19
    6ffa:	15 0b       	sbc	r17, r21
    6ffc:	07 08       	sbc	r0, r7
    6ffe:	07 00       	.word	0x0007	; ????
    7000:	1f 31       	cpi	r17, 0x1F	; 31
    7002:	3d 44       	sbci	r19, 0x4D	; 77
    7004:	4e 53       	subi	r20, 0x3E	; 62
    7006:	54 56       	subi	r21, 0x64	; 100
    7008:	5a 5f       	subi	r21, 0xFA	; 250
    700a:	64 69       	ori	r22, 0x94	; 148
    700c:	6e 74       	andi	r22, 0x4E	; 78
    700e:	76 79       	andi	r23, 0x96	; 150
    7010:	7c 7f       	andi	r23, 0xFC	; 252
    7012:	7f 7f       	andi	r23, 0xFF	; 255
    7014:	7f 7f       	andi	r23, 0xFF	; 255
    7016:	7f 7f       	andi	r23, 0xFF	; 255
    7018:	7f 7f       	andi	r23, 0xFF	; 255
    701a:	7f 7f       	andi	r23, 0xFF	; 255
    701c:	7f 7f       	andi	r23, 0xFF	; 255
    701e:	7f 7f       	andi	r23, 0xFF	; 255
    7020:	7f 7f       	andi	r23, 0xFF	; 255
    7022:	7f 7f       	andi	r23, 0xFF	; 255
    7024:	7f 7f       	andi	r23, 0xFF	; 255
    7026:	7f 7f       	andi	r23, 0xFF	; 255
    7028:	7f 7f       	andi	r23, 0xFF	; 255
    702a:	7f 7f       	andi	r23, 0xFF	; 255
    702c:	7f 7f       	andi	r23, 0xFF	; 255
    702e:	7f 7f       	andi	r23, 0xFF	; 255
    7030:	7f 7f       	andi	r23, 0xFF	; 255
    7032:	7f 7f       	andi	r23, 0xFF	; 255
    7034:	7f 7f       	andi	r23, 0xFF	; 255
    7036:	7f 7f       	andi	r23, 0xFF	; 255
    7038:	7f 7f       	andi	r23, 0xFF	; 255
    703a:	7f 7f       	andi	r23, 0xFF	; 255
    703c:	7f 7f       	andi	r23, 0xFF	; 255
    703e:	7f 7f       	andi	r23, 0xFF	; 255
    7040:	7f 7f       	andi	r23, 0xFF	; 255
    7042:	7f 7f       	andi	r23, 0xFF	; 255
    7044:	7f 7f       	andi	r23, 0xFF	; 255
    7046:	7f 7f       	andi	r23, 0xFF	; 255
    7048:	7f 7f       	andi	r23, 0xFF	; 255
    704a:	7f 7f       	andi	r23, 0xFF	; 255
    704c:	7f 7f       	andi	r23, 0xFF	; 255
    704e:	7f 7f       	andi	r23, 0xFF	; 255
    7050:	7f 7f       	andi	r23, 0xFF	; 255
    7052:	7f 7f       	andi	r23, 0xFF	; 255
    7054:	7f 7f       	andi	r23, 0xFF	; 255
    7056:	7f 7f       	andi	r23, 0xFF	; 255
    7058:	7f 7f       	andi	r23, 0xFF	; 255
    705a:	7f 7f       	andi	r23, 0xFF	; 255
    705c:	7f 7f       	andi	r23, 0xFF	; 255
    705e:	7f 7f       	andi	r23, 0xFF	; 255
    7060:	7f 7f       	andi	r23, 0xFF	; 255
    7062:	7f 7f       	andi	r23, 0xFF	; 255
    7064:	7f 7f       	andi	r23, 0xFF	; 255
    7066:	7f 7f       	andi	r23, 0xFF	; 255
    7068:	7f 7f       	andi	r23, 0xFF	; 255
    706a:	7f 7f       	andi	r23, 0xFF	; 255
    706c:	7f 7f       	andi	r23, 0xFF	; 255
    706e:	7f 7f       	andi	r23, 0xFF	; 255
    7070:	7f 7f       	andi	r23, 0xFF	; 255
    7072:	7f 7f       	andi	r23, 0xFF	; 255
    7074:	7f 7f       	andi	r23, 0xFF	; 255
    7076:	7f 7f       	andi	r23, 0xFF	; 255
    7078:	7f 7f       	andi	r23, 0xFF	; 255
    707a:	7f 7c       	andi	r23, 0xCF	; 207
    707c:	78 71       	andi	r23, 0x18	; 24
    707e:	68 4c       	sbci	r22, 0xC8	; 200
    7080:	2c 1c       	adc	r2, r12
    7082:	12 0c       	add	r1, r2
    7084:	0a 0b       	sbc	r16, r26
    7086:	0a 05       	cpc	r16, r10
    7088:	fd f3       	brhs	.-2      	; 0x7088 <waves+0x988>
    708a:	e9 df       	rcall	.-46     	; 0x705e <waves+0x95e>
    708c:	d4 ca       	rjmp	.-2648   	; 0x6636 <steptable+0x12e>
    708e:	c0 b7       	in	r28, 0x30	; 48
    7090:	ae a6       	std	Y+46, r10	; 0x2e
    7092:	9e 97       	sbiw	r26, 0x2e	; 46
    7094:	91 8b       	std	Z+17, r25	; 0x11
    7096:	86 85       	ldd	r24, Z+14	; 0x0e
    7098:	82 80       	ldd	r8, Z+2	; 0x02
    709a:	80 80       	ld	r8, Z
    709c:	80 80       	ld	r8, Z
    709e:	80 80       	ld	r8, Z
    70a0:	80 80       	ld	r8, Z
    70a2:	80 80       	ld	r8, Z
    70a4:	80 80       	ld	r8, Z
    70a6:	80 80       	ld	r8, Z
    70a8:	80 80       	ld	r8, Z
    70aa:	80 80       	ld	r8, Z
    70ac:	80 80       	ld	r8, Z
    70ae:	80 80       	ld	r8, Z
    70b0:	80 80       	ld	r8, Z
    70b2:	80 80       	ld	r8, Z
    70b4:	80 80       	ld	r8, Z
    70b6:	80 80       	ld	r8, Z
    70b8:	80 80       	ld	r8, Z
    70ba:	80 80       	ld	r8, Z
    70bc:	80 80       	ld	r8, Z
    70be:	80 80       	ld	r8, Z
    70c0:	80 80       	ld	r8, Z
    70c2:	80 80       	ld	r8, Z
    70c4:	80 80       	ld	r8, Z
    70c6:	80 80       	ld	r8, Z
    70c8:	80 80       	ld	r8, Z
    70ca:	80 80       	ld	r8, Z
    70cc:	80 80       	ld	r8, Z
    70ce:	80 80       	ld	r8, Z
    70d0:	80 80       	ld	r8, Z
    70d2:	80 80       	ld	r8, Z
    70d4:	80 80       	ld	r8, Z
    70d6:	80 80       	ld	r8, Z
    70d8:	80 80       	ld	r8, Z
    70da:	80 80       	ld	r8, Z
    70dc:	80 80       	ld	r8, Z
    70de:	80 80       	ld	r8, Z
    70e0:	80 80       	ld	r8, Z
    70e2:	80 80       	ld	r8, Z
    70e4:	80 80       	ld	r8, Z
    70e6:	80 80       	ld	r8, Z
    70e8:	80 80       	ld	r8, Z
    70ea:	80 80       	ld	r8, Z
    70ec:	80 80       	ld	r8, Z
    70ee:	80 80       	ld	r8, Z
    70f0:	80 80       	ld	r8, Z
    70f2:	80 80       	ld	r8, Z
    70f4:	80 87       	std	Z+8, r24	; 0x08
    70f6:	91 9d       	mul	r25, r1
    70f8:	ac c4       	rjmp	.+2392   	; 0x7a52 <set_shot_animations+0x5e>
    70fa:	cb d4       	rcall	.+2454   	; 0x7a92 <init_player+0x3c>
    70fc:	dd f2       	brhs	.-74     	; 0x70b4 <waves+0x9b4>
    70fe:	fa fa       	.word	0xfafa	; ????

00007100 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    7100:	90 91 f7 09 	lds	r25, 0x09F7
    7104:	e8 ed       	ldi	r30, 0xD8	; 216
    7106:	f8 e0       	ldi	r31, 0x08	; 8
    7108:	80 e0       	ldi	r24, 0x00	; 0
    710a:	89 17       	cp	r24, r25
    710c:	49 f0       	breq	.+18     	; 0x7120 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    710e:	a0 81       	ld	r26, Z
    7110:	b1 81       	ldd	r27, Z+1	; 0x01
    7112:	a0 5a       	subi	r26, 0xA0	; 160
    7114:	be 4f       	sbci	r27, 0xFE	; 254
    7116:	22 81       	ldd	r18, Z+2	; 0x02
    7118:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    711a:	8f 5f       	subi	r24, 0xFF	; 255
    711c:	33 96       	adiw	r30, 0x03	; 3
    711e:	f5 cf       	rjmp	.-22     	; 0x710a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    7120:	08 95       	ret

00007122 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    7122:	80 93 00 01 	sts	0x0100, r24
    7126:	08 95       	ret

00007128 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    7128:	2f 92       	push	r2
    712a:	3f 92       	push	r3
    712c:	4f 92       	push	r4
    712e:	5f 92       	push	r5
    7130:	6f 92       	push	r6
    7132:	7f 92       	push	r7
    7134:	8f 92       	push	r8
    7136:	9f 92       	push	r9
    7138:	af 92       	push	r10
    713a:	bf 92       	push	r11
    713c:	cf 92       	push	r12
    713e:	df 92       	push	r13
    7140:	ef 92       	push	r14
    7142:	ff 92       	push	r15
    7144:	0f 93       	push	r16
    7146:	1f 93       	push	r17
    7148:	cf 93       	push	r28
    714a:	df 93       	push	r29
    714c:	00 d0       	rcall	.+0      	; 0x714e <ProcessSprites+0x26>
    714e:	1f 92       	push	r1
    7150:	cd b7       	in	r28, 0x3d	; 61
    7152:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    7154:	10 92 f7 09 	sts	0x09F7, r1
		if(!spritesOn) return;
    7158:	80 91 00 01 	lds	r24, 0x0100
    715c:	88 23       	and	r24, r24
    715e:	09 f4       	brne	.+2      	; 0x7162 <ProcessSprites+0x3a>
    7160:	a1 c0       	rjmp	.+322    	; 0x72a4 <ProcessSprites+0x17c>
    7162:	e8 ea       	ldi	r30, 0xA8	; 168
    7164:	ce 2e       	mov	r12, r30
    7166:	e4 e0       	ldi	r30, 0x04	; 4
    7168:	de 2e       	mov	r13, r30
    716a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    716c:	f6 01       	movw	r30, r12
    716e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    7170:	80 3f       	cpi	r24, 0xF0	; 240
    7172:	09 f4       	brne	.+2      	; 0x7176 <ProcessSprites+0x4e>
    7174:	79 c0       	rjmp	.+242    	; 0x7268 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    7176:	91 81       	ldd	r25, Z+1	; 0x01
    7178:	29 2f       	mov	r18, r25
    717a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    717c:	28 2e       	mov	r2, r24
    717e:	26 94       	lsr	r2
    7180:	26 94       	lsr	r2
    7182:	26 94       	lsr	r2
				dx=ssx&0x7;
    7184:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    7186:	19 f0       	breq	.+6      	; 0x718e <ProcessSprites+0x66>
    7188:	72 e0       	ldi	r23, 0x02	; 2
    718a:	47 2e       	mov	r4, r23
    718c:	02 c0       	rjmp	.+4      	; 0x7192 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    718e:	44 24       	eor	r4, r4
    7190:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    7192:	63 e0       	ldi	r22, 0x03	; 3
    7194:	36 95       	lsr	r19
    7196:	27 95       	ror	r18
    7198:	6a 95       	dec	r22
    719a:	e1 f7       	brne	.-8      	; 0x7194 <ProcessSprites+0x6c>
    719c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    719e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    71a0:	19 f0       	breq	.+6      	; 0x71a8 <ProcessSprites+0x80>
    71a2:	52 e0       	ldi	r21, 0x02	; 2
    71a4:	55 2e       	mov	r5, r21
    71a6:	02 c0       	rjmp	.+4      	; 0x71ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    71a8:	55 24       	eor	r5, r5
    71aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    71ac:	29 2f       	mov	r18, r25
    71ae:	30 e0       	ldi	r19, 0x00	; 0
    71b0:	32 2f       	mov	r19, r18
    71b2:	22 27       	eor	r18, r18
    71b4:	a9 01       	movw	r20, r18
    71b6:	48 0f       	add	r20, r24
    71b8:	51 1d       	adc	r21, r1
    71ba:	5b 83       	std	Y+3, r21	; 0x03
    71bc:	4a 83       	std	Y+2, r20	; 0x02
    71be:	e1 2c       	mov	r14, r1
    71c0:	f1 2c       	mov	r15, r1
    71c2:	94 ee       	ldi	r25, 0xE4	; 228
    71c4:	93 0d       	add	r25, r3
    71c6:	99 83       	std	Y+1, r25	; 0x01
    71c8:	03 2d       	mov	r16, r3
    71ca:	0e 0d       	add	r16, r14
    71cc:	0c 31       	cpi	r16, 0x1C	; 28
    71ce:	10 f0       	brcs	.+4      	; 0x71d4 <ProcessSprites+0xac>
    71d0:	09 81       	ldd	r16, Y+1	; 0x01
    71d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    71d4:	5e e1       	ldi	r21, 0x1E	; 30
    71d6:	05 9f       	mul	r16, r21
    71d8:	80 01       	movw	r16, r0
    71da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    71dc:	be 2c       	mov	r11, r14
    71de:	aa 24       	eor	r10, r10
    71e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    71e2:	ed e1       	ldi	r30, 0x1D	; 29
    71e4:	e7 15       	cp	r30, r7
    71e6:	18 f4       	brcc	.+6      	; 0x71ee <ProcessSprites+0xc6>
    71e8:	82 ee       	ldi	r24, 0xE2	; 226
    71ea:	87 0d       	add	r24, r7
    71ec:	01 c0       	rjmp	.+2      	; 0x71f0 <ProcessSprites+0xc8>
    71ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    71f0:	a8 01       	movw	r20, r16
    71f2:	48 0f       	add	r20, r24
    71f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    71f6:	ca 01       	movw	r24, r20
    71f8:	80 5a       	subi	r24, 0xA0	; 160
    71fa:	9e 4f       	sbci	r25, 0xFE	; 254
    71fc:	4c 01       	movw	r8, r24
    71fe:	fc 01       	movw	r30, r24
    7200:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    7202:	80 31       	cpi	r24, 0x10	; 16
    7204:	e0 f0       	brcs	.+56     	; 0x723e <ProcessSprites+0x116>
    7206:	60 91 f7 09 	lds	r22, 0x09F7
    720a:	60 31       	cpi	r22, 0x10	; 16
    720c:	f8 f4       	brcc	.+62     	; 0x724c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    720e:	26 2f       	mov	r18, r22
    7210:	30 e0       	ldi	r19, 0x00	; 0
    7212:	f9 01       	movw	r30, r18
    7214:	ee 0f       	add	r30, r30
    7216:	ff 1f       	adc	r31, r31
    7218:	e2 0f       	add	r30, r18
    721a:	f3 1f       	adc	r31, r19
    721c:	e8 52       	subi	r30, 0x28	; 40
    721e:	f7 4f       	sbci	r31, 0xF7	; 247
    7220:	51 83       	std	Z+1, r21	; 0x01
    7222:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    7224:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    7226:	0e 94 f7 29 	call	0x53ee	; 0x53ee <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    722a:	80 91 f7 09 	lds	r24, 0x09F7
    722e:	f4 01       	movw	r30, r8
    7230:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    7232:	91 e0       	ldi	r25, 0x01	; 1
    7234:	98 0f       	add	r25, r24
    7236:	90 93 f7 09 	sts	0x09F7, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    723a:	80 31       	cpi	r24, 0x10	; 16
    723c:	38 f4       	brcc	.+14     	; 0x724c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    723e:	2a 81       	ldd	r18, Y+2	; 0x02
    7240:	3b 81       	ldd	r19, Y+3	; 0x03
    7242:	a5 01       	movw	r20, r10
    7244:	68 2f       	mov	r22, r24
    7246:	86 2d       	mov	r24, r6
    7248:	0e 94 88 2a 	call	0x5510	; 0x5510 <BlitSprite>
    724c:	ff ef       	ldi	r31, 0xFF	; 255
    724e:	af 1a       	sub	r10, r31
    7250:	bf 0a       	sbc	r11, r31
    7252:	73 94       	inc	r7
    7254:	87 2d       	mov	r24, r7
    7256:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    7258:	84 15       	cp	r24, r4
    725a:	18 f2       	brcs	.-122    	; 0x71e2 <ProcessSprites+0xba>
    725c:	4f ef       	ldi	r20, 0xFF	; 255
    725e:	e4 1a       	sub	r14, r20
    7260:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    7262:	e5 14       	cp	r14, r5
    7264:	08 f4       	brcc	.+2      	; 0x7268 <ProcessSprites+0x140>
    7266:	b0 cf       	rjmp	.-160    	; 0x71c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    7268:	63 94       	inc	r6
    726a:	84 e0       	ldi	r24, 0x04	; 4
    726c:	c8 0e       	add	r12, r24
    726e:	d1 1c       	adc	r13, r1
    7270:	9c e0       	ldi	r25, 0x0C	; 12
    7272:	69 12       	cpse	r6, r25
    7274:	7b cf       	rjmp	.-266    	; 0x716c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    7276:	0f 90       	pop	r0
    7278:	0f 90       	pop	r0
    727a:	0f 90       	pop	r0
    727c:	df 91       	pop	r29
    727e:	cf 91       	pop	r28
    7280:	1f 91       	pop	r17
    7282:	0f 91       	pop	r16
    7284:	ff 90       	pop	r15
    7286:	ef 90       	pop	r14
    7288:	df 90       	pop	r13
    728a:	cf 90       	pop	r12
    728c:	bf 90       	pop	r11
    728e:	af 90       	pop	r10
    7290:	9f 90       	pop	r9
    7292:	8f 90       	pop	r8
    7294:	7f 90       	pop	r7
    7296:	6f 90       	pop	r6
    7298:	5f 90       	pop	r5
    729a:	4f 90       	pop	r4
    729c:	3f 90       	pop	r3
    729e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    72a0:	0c 94 80 38 	jmp	0x7100	; 0x7100 <RestoreBackground>

	}
    72a4:	0f 90       	pop	r0
    72a6:	0f 90       	pop	r0
    72a8:	0f 90       	pop	r0
    72aa:	df 91       	pop	r29
    72ac:	cf 91       	pop	r28
    72ae:	1f 91       	pop	r17
    72b0:	0f 91       	pop	r16
    72b2:	ff 90       	pop	r15
    72b4:	ef 90       	pop	r14
    72b6:	df 90       	pop	r13
    72b8:	cf 90       	pop	r12
    72ba:	bf 90       	pop	r11
    72bc:	af 90       	pop	r10
    72be:	9f 90       	pop	r9
    72c0:	8f 90       	pop	r8
    72c2:	7f 90       	pop	r7
    72c4:	6f 90       	pop	r6
    72c6:	5f 90       	pop	r5
    72c8:	4f 90       	pop	r4
    72ca:	3f 90       	pop	r3
    72cc:	2f 90       	pop	r2
    72ce:	08 95       	ret

000072d0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    72d0:	df 92       	push	r13
    72d2:	ef 92       	push	r14
    72d4:	ff 92       	push	r15
    72d6:	0f 93       	push	r16
    72d8:	1f 93       	push	r17
    72da:	cf 93       	push	r28
    72dc:	df 93       	push	r29
    72de:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    72e0:	fb 01       	movw	r30, r22
    72e2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    72e4:	31 96       	adiw	r30, 0x01	; 1
    72e6:	64 91       	lpm	r22, Z
    72e8:	5f ef       	ldi	r21, 0xFF	; 255
    72ea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    72ec:	24 2f       	mov	r18, r20
    72ee:	21 70       	andi	r18, 0x01	; 1
    72f0:	40 ff       	sbrs	r20, 0
    72f2:	04 c0       	rjmp	.+8      	; 0x72fc <MapSprite2+0x2c>
			x=(mapWidth-1);
    72f4:	95 2f       	mov	r25, r21
			dx=-1;
    72f6:	ff 24       	eor	r15, r15
    72f8:	fa 94       	dec	r15
    72fa:	03 c0       	rjmp	.+6      	; 0x7302 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    72fc:	ff 24       	eor	r15, r15
    72fe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    7300:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    7302:	41 ff       	sbrs	r20, 1
    7304:	05 c0       	rjmp	.+10     	; 0x7310 <MapSprite2+0x40>
			y=(mapHeight-1);
    7306:	7f ef       	ldi	r23, 0xFF	; 255
    7308:	76 0f       	add	r23, r22
			dy=-1;
    730a:	ee 24       	eor	r14, r14
    730c:	ea 94       	dec	r14
    730e:	03 c0       	rjmp	.+6      	; 0x7316 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    7310:	ee 24       	eor	r14, r14
    7312:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    7314:	70 e0       	ldi	r23, 0x00	; 0
    7316:	21 11       	cpse	r18, r1
    7318:	01 c0       	rjmp	.+2      	; 0x731c <MapSprite2+0x4c>
    731a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    731c:	00 e0       	ldi	r16, 0x00	; 0
    731e:	06 17       	cp	r16, r22
    7320:	09 f1       	breq	.+66     	; 0x7364 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7322:	71 03       	mulsu	r23, r17
    7324:	e0 01       	movw	r28, r0
    7326:	11 24       	eor	r1, r1
    7328:	d8 2e       	mov	r13, r24
    732a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    732c:	8d 15       	cp	r24, r13
    732e:	b1 f0       	breq	.+44     	; 0x735c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7330:	9e 01       	movw	r18, r28
    7332:	29 0f       	add	r18, r25
    7334:	31 1d       	adc	r19, r1
    7336:	97 fd       	sbrc	r25, 7
    7338:	3a 95       	dec	r19
    733a:	2e 5f       	subi	r18, 0xFE	; 254
    733c:	3f 4f       	sbci	r19, 0xFF	; 255
    733e:	fd 01       	movw	r30, r26
    7340:	e2 0f       	add	r30, r18
    7342:	f3 1f       	adc	r31, r19
    7344:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    7346:	34 e0       	ldi	r19, 0x04	; 4
    7348:	83 9f       	mul	r24, r19
    734a:	f0 01       	movw	r30, r0
    734c:	11 24       	eor	r1, r1
    734e:	e8 55       	subi	r30, 0x58	; 88
    7350:	fb 4f       	sbci	r31, 0xFB	; 251
    7352:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    7354:	8f 5f       	subi	r24, 0xFF	; 255
    7356:	43 83       	std	Z+3, r20	; 0x03
    7358:	9f 0d       	add	r25, r15
    735a:	e8 cf       	rjmp	.-48     	; 0x732c <MapSprite2+0x5c>
    735c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    735e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7360:	95 2f       	mov	r25, r21
    7362:	dd cf       	rjmp	.-70     	; 0x731e <MapSprite2+0x4e>
	    }
	}
    7364:	df 91       	pop	r29
    7366:	cf 91       	pop	r28
    7368:	1f 91       	pop	r17
    736a:	0f 91       	pop	r16
    736c:	ff 90       	pop	r15
    736e:	ef 90       	pop	r14
    7370:	df 90       	pop	r13
    7372:	08 95       	ret

00007374 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    7374:	0f 93       	push	r16
    7376:	cf 93       	push	r28
    7378:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    737a:	30 e0       	ldi	r19, 0x00	; 0
    737c:	30 17       	cp	r19, r16
    737e:	e1 f0       	breq	.+56     	; 0x73b8 <MoveSprite+0x44>
    7380:	b4 2f       	mov	r27, r20
    7382:	a0 e2       	ldi	r26, 0x20	; 32
    7384:	a4 0f       	add	r26, r20
    7386:	78 2f       	mov	r23, r24
    7388:	72 0f       	add	r23, r18
    738a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    738c:	87 17       	cp	r24, r23
    738e:	81 f0       	breq	.+32     	; 0x73b0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    7390:	c4 e0       	ldi	r28, 0x04	; 4
    7392:	8c 9f       	mul	r24, r28
    7394:	f0 01       	movw	r30, r0
    7396:	11 24       	eor	r1, r1
    7398:	e8 55       	subi	r30, 0x58	; 88
    739a:	fb 4f       	sbci	r31, 0xFB	; 251
    739c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    739e:	41 3e       	cpi	r20, 0xE1	; 225
    73a0:	51 05       	cpc	r21, r1
    73a2:	14 f0       	brlt	.+4      	; 0x73a8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    73a4:	a1 83       	std	Z+1, r26	; 0x01
    73a6:	01 c0       	rjmp	.+2      	; 0x73aa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    73a8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    73aa:	8f 5f       	subi	r24, 0xFF	; 255
    73ac:	98 5f       	subi	r25, 0xF8	; 248
    73ae:	ee cf       	rjmp	.-36     	; 0x738c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    73b0:	3f 5f       	subi	r19, 0xFF	; 255
    73b2:	48 5f       	subi	r20, 0xF8	; 248
    73b4:	5f 4f       	sbci	r21, 0xFF	; 255
    73b6:	e2 cf       	rjmp	.-60     	; 0x737c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    73b8:	cf 91       	pop	r28
    73ba:	0f 91       	pop	r16
    73bc:	08 95       	ret

000073be <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    73be:	08 95       	ret

000073c0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    73c0:	e8 ea       	ldi	r30, 0xA8	; 168
    73c2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    73c4:	80 ef       	ldi	r24, 0xF0	; 240
    73c6:	80 83       	st	Z, r24
    73c8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    73ca:	94 e0       	ldi	r25, 0x04	; 4
    73cc:	e8 3d       	cpi	r30, 0xD8	; 216
    73ce:	f9 07       	cpc	r31, r25
    73d0:	d1 f7       	brne	.-12     	; 0x73c6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    73d2:	08 95       	ret

000073d4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    73d4:	4f 92       	push	r4
    73d6:	5f 92       	push	r5
    73d8:	6f 92       	push	r6
    73da:	7f 92       	push	r7
    73dc:	8f 92       	push	r8
    73de:	9f 92       	push	r9
    73e0:	af 92       	push	r10
    73e2:	bf 92       	push	r11
    73e4:	cf 92       	push	r12
    73e6:	df 92       	push	r13
    73e8:	ef 92       	push	r14
    73ea:	ff 92       	push	r15
    73ec:	0f 93       	push	r16
    73ee:	1f 93       	push	r17
    73f0:	cf 93       	push	r28
    73f2:	df 93       	push	r29
    73f4:	68 2e       	mov	r6, r24
    73f6:	56 2e       	mov	r5, r22
    73f8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    73fa:	fa 01       	movw	r30, r20
    73fc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    73fe:	31 96       	adiw	r30, 0x01	; 1
    7400:	84 90       	lpm	r8, Z
    7402:	c7 2c       	mov	r12, r7
    7404:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    7406:	00 e0       	ldi	r16, 0x00	; 0
    7408:	10 e0       	ldi	r17, 0x00	; 0
    740a:	91 2c       	mov	r9, r1
    740c:	98 14       	cp	r9, r8
    740e:	f1 f0       	breq	.+60     	; 0x744c <DrawMap2+0x78>
    7410:	c0 e0       	ldi	r28, 0x00	; 0
    7412:	d0 e0       	ldi	r29, 0x00	; 0
    7414:	58 01       	movw	r10, r16
    7416:	f2 e0       	ldi	r31, 0x02	; 2
    7418:	af 0e       	add	r10, r31
    741a:	b1 1c       	adc	r11, r1
    741c:	49 2c       	mov	r4, r9
    741e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    7420:	c7 15       	cp	r28, r7
    7422:	80 f4       	brcc	.+32     	; 0x7444 <DrawMap2+0x70>
    7424:	95 01       	movw	r18, r10
    7426:	2c 0f       	add	r18, r28
    7428:	3d 1f       	adc	r19, r29
    742a:	f7 01       	movw	r30, r14
    742c:	e2 0f       	add	r30, r18
    742e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    7430:	24 91       	lpm	r18, Z
    7432:	42 2f       	mov	r20, r18
    7434:	50 e0       	ldi	r21, 0x00	; 0
    7436:	64 2d       	mov	r22, r4
    7438:	8c 2f       	mov	r24, r28
    743a:	86 0d       	add	r24, r6
    743c:	0e 94 bc 2c 	call	0x5978	; 0x5978 <SetTile>
    7440:	21 96       	adiw	r28, 0x01	; 1
    7442:	ee cf       	rjmp	.-36     	; 0x7420 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    7444:	93 94       	inc	r9
    7446:	0c 0d       	add	r16, r12
    7448:	1d 1d       	adc	r17, r13
    744a:	e0 cf       	rjmp	.-64     	; 0x740c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    744c:	df 91       	pop	r29
    744e:	cf 91       	pop	r28
    7450:	1f 91       	pop	r17
    7452:	0f 91       	pop	r16
    7454:	ff 90       	pop	r15
    7456:	ef 90       	pop	r14
    7458:	df 90       	pop	r13
    745a:	cf 90       	pop	r12
    745c:	bf 90       	pop	r11
    745e:	af 90       	pop	r10
    7460:	9f 90       	pop	r9
    7462:	8f 90       	pop	r8
    7464:	7f 90       	pop	r7
    7466:	6f 90       	pop	r6
    7468:	5f 90       	pop	r5
    746a:	4f 90       	pop	r4
    746c:	08 95       	ret

0000746e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    746e:	df 92       	push	r13
    7470:	ef 92       	push	r14
    7472:	ff 92       	push	r15
    7474:	0f 93       	push	r16
    7476:	1f 93       	push	r17
    7478:	cf 93       	push	r28
    747a:	df 93       	push	r29
    747c:	f6 2e       	mov	r15, r22
    747e:	04 2f       	mov	r16, r20
    7480:	d2 2e       	mov	r13, r18
    7482:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    7484:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    7486:	8a e0       	ldi	r24, 0x0A	; 10
    7488:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    748a:	01 11       	cpse	r16, r1
    748c:	02 c0       	rjmp	.+4      	; 0x7492 <PrintByte+0x24>
    748e:	11 11       	cpse	r17, r1
    7490:	07 c0       	rjmp	.+14     	; 0x74a0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    7492:	80 2f       	mov	r24, r16
    7494:	6e 2d       	mov	r22, r14
    7496:	0e 94 76 4d 	call	0x9aec	; 0x9aec <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    749a:	40 e1       	ldi	r20, 0x10	; 16
    749c:	49 0f       	add	r20, r25
    749e:	05 c0       	rjmp	.+10     	; 0x74aa <PrintByte+0x3c>
		}else{
			if(zeropad){
    74a0:	dd 20       	and	r13, r13
    74a2:	11 f0       	breq	.+4      	; 0x74a8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    74a4:	40 e1       	ldi	r20, 0x10	; 16
    74a6:	01 c0       	rjmp	.+2      	; 0x74aa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    74a8:	40 e0       	ldi	r20, 0x00	; 0
    74aa:	6f 2d       	mov	r22, r15
    74ac:	8c 2f       	mov	r24, r28
    74ae:	0e 94 b8 2c 	call	0x5970	; 0x5970 <SetFont>
			}
		}
		val=val/10;
    74b2:	80 2f       	mov	r24, r16
    74b4:	6e 2d       	mov	r22, r14
    74b6:	0e 94 76 4d 	call	0x9aec	; 0x9aec <__udivmodqi4>
    74ba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    74bc:	1f 5f       	subi	r17, 0xFF	; 255
    74be:	21 97       	sbiw	r28, 0x01	; 1
    74c0:	13 30       	cpi	r17, 0x03	; 3
    74c2:	19 f7       	brne	.-58     	; 0x748a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    74c4:	df 91       	pop	r29
    74c6:	cf 91       	pop	r28
    74c8:	1f 91       	pop	r17
    74ca:	0f 91       	pop	r16
    74cc:	ff 90       	pop	r15
    74ce:	ef 90       	pop	r14
    74d0:	df 90       	pop	r13
    74d2:	08 95       	ret

000074d4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    74d4:	0f 93       	push	r16
    74d6:	1f 93       	push	r17
    74d8:	cf 93       	push	r28
    74da:	df 93       	push	r29
    74dc:	06 2f       	mov	r16, r22
    74de:	c4 2f       	mov	r28, r20
    74e0:	d5 2f       	mov	r29, r21
    74e2:	18 2f       	mov	r17, r24
    74e4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    74e6:	fe 01       	movw	r30, r28
    74e8:	44 91       	lpm	r20, Z
		if(c!=0){
    74ea:	44 23       	and	r20, r20
    74ec:	49 f0       	breq	.+18     	; 0x7500 <Print+0x2c>
			c=((c&127)-32);			
    74ee:	4f 77       	andi	r20, 0x7F	; 127
    74f0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    74f2:	60 2f       	mov	r22, r16
    74f4:	8c 2f       	mov	r24, r28
    74f6:	81 0f       	add	r24, r17
    74f8:	0e 94 b8 2c 	call	0x5970	; 0x5970 <SetFont>
    74fc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    74fe:	f3 cf       	rjmp	.-26     	; 0x74e6 <Print+0x12>
	
}
    7500:	df 91       	pop	r29
    7502:	cf 91       	pop	r28
    7504:	1f 91       	pop	r17
    7506:	0f 91       	pop	r16
    7508:	08 95       	ret

0000750a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    750a:	40 52       	subi	r20, 0x20	; 32
    750c:	0c 94 b8 2c 	jmp	0x5970	; 0x5970 <SetFont>

00007510 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    7510:	0f 93       	push	r16
    7512:	1f 93       	push	r17
    7514:	cf 93       	push	r28
    7516:	df 93       	push	r29
    7518:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    751a:	c0 e0       	ldi	r28, 0x00	; 0
    751c:	d0 e0       	ldi	r29, 0x00	; 0
    751e:	c0 17       	cp	r28, r16
    7520:	d1 07       	cpc	r29, r17
    7522:	44 f4       	brge	.+16     	; 0x7534 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    7524:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <GetVsyncFlag>
    7528:	88 23       	and	r24, r24
    752a:	e1 f3       	breq	.-8      	; 0x7524 <WaitVsync+0x14>
		ClearVsyncFlag();		
    752c:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7530:	21 96       	adiw	r28, 0x01	; 1
    7532:	f5 cf       	rjmp	.-22     	; 0x751e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    7534:	df 91       	pop	r29
    7536:	cf 91       	pop	r28
    7538:	1f 91       	pop	r17
    753a:	0f 91       	pop	r16
    753c:	08 95       	ret

0000753e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    753e:	80 93 f5 09 	sts	0x09F5, r24
	currFadeFrame=0;
    7542:	10 92 f9 09 	sts	0x09F9, r1
	fadeActive=true;
    7546:	81 e0       	ldi	r24, 0x01	; 1
    7548:	80 93 f8 09 	sts	0x09F8, r24
		
	if(blocking){
    754c:	66 23       	and	r22, r22
    754e:	21 f0       	breq	.+8      	; 0x7558 <doFade+0x1a>
		while(fadeActive==true);
    7550:	80 91 f8 09 	lds	r24, 0x09F8
    7554:	81 11       	cpse	r24, r1
    7556:	fc cf       	rjmp	.-8      	; 0x7550 <doFade+0x12>
    7558:	08 95       	ret

0000755a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    755a:	81 11       	cpse	r24, r1
    755c:	03 c0       	rjmp	.+6      	; 0x7564 <FadeIn+0xa>
		DDRC=0xff;
    755e:	8f ef       	ldi	r24, 0xFF	; 255
    7560:	87 b9       	out	0x07, r24	; 7
		return;
    7562:	08 95       	ret
	}
	fadeStep=1;
    7564:	91 e0       	ldi	r25, 0x01	; 1
    7566:	90 93 fa 09 	sts	0x09FA, r25
	fadeDir=1;
    756a:	90 93 f6 09 	sts	0x09F6, r25
	doFade(speed,blocking);
    756e:	0c 94 9f 3a 	jmp	0x753e	; 0x753e <doFade>

00007572 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    7572:	81 11       	cpse	r24, r1
    7574:	02 c0       	rjmp	.+4      	; 0x757a <FadeOut+0x8>
		DDRC=0;
    7576:	17 b8       	out	0x07, r1	; 7
		return;
    7578:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    757a:	9c e0       	ldi	r25, 0x0C	; 12
    757c:	90 93 fa 09 	sts	0x09FA, r25
	fadeDir=-1;
    7580:	9f ef       	ldi	r25, 0xFF	; 255
    7582:	90 93 f6 09 	sts	0x09F6, r25
	doFade(speed,blocking);
    7586:	0c 94 9f 3a 	jmp	0x753e	; 0x753e <doFade>

0000758a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    758a:	80 91 f8 09 	lds	r24, 0x09F8
    758e:	88 23       	and	r24, r24
    7590:	01 f1       	breq	.+64     	; 0x75d2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    7592:	80 91 f9 09 	lds	r24, 0x09F9
    7596:	81 11       	cpse	r24, r1
    7598:	19 c0       	rjmp	.+50     	; 0x75cc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    759a:	80 91 f5 09 	lds	r24, 0x09F5
    759e:	80 93 f9 09 	sts	0x09F9, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    75a2:	e0 91 fa 09 	lds	r30, 0x09FA
    75a6:	f0 e0       	ldi	r31, 0x00	; 0
    75a8:	e7 51       	subi	r30, 0x17	; 23
    75aa:	ff 4f       	sbci	r31, 0xFF	; 255
    75ac:	e4 91       	lpm	r30, Z
    75ae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    75b0:	90 91 f6 09 	lds	r25, 0x09F6
    75b4:	80 91 fa 09 	lds	r24, 0x09FA
    75b8:	89 0f       	add	r24, r25
    75ba:	80 93 fa 09 	sts	0x09FA, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    75be:	88 23       	and	r24, r24
    75c0:	11 f0       	breq	.+4      	; 0x75c6 <ProcessFading+0x3c>
    75c2:	8d 30       	cpi	r24, 0x0D	; 13
    75c4:	31 f4       	brne	.+12     	; 0x75d2 <ProcessFading+0x48>
				fadeActive=false;
    75c6:	10 92 f8 09 	sts	0x09F8, r1
    75ca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    75cc:	81 50       	subi	r24, 0x01	; 1
    75ce:	80 93 f9 09 	sts	0x09F9, r24
    75d2:	08 95       	ret

000075d4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    75d4:	0e 94 c5 3a 	call	0x758a	; 0x758a <ProcessFading>
		ProcessSprites();
    75d8:	0c 94 94 38 	jmp	0x7128	; 0x7128 <ProcessSprites>

000075dc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    75dc:	cf 93       	push	r28
    75de:	df 93       	push	r29
    75e0:	fc 01       	movw	r30, r24
    75e2:	eb 01       	movw	r28, r22
	*looped = 0;
    75e4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    75e6:	93 81       	ldd	r25, Z+3	; 0x03
    75e8:	9f 5f       	subi	r25, 0xFF	; 255
    75ea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    75ec:	22 81       	ldd	r18, Z+2	; 0x02
    75ee:	80 81       	ld	r24, Z
    75f0:	92 17       	cp	r25, r18
    75f2:	70 f0       	brcs	.+28     	; 0x7610 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    75f4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    75f6:	90 e0       	ldi	r25, 0x00	; 0
    75f8:	01 96       	adiw	r24, 0x01	; 1
    75fa:	21 81       	ldd	r18, Z+1	; 0x01
    75fc:	62 2f       	mov	r22, r18
    75fe:	70 e0       	ldi	r23, 0x00	; 0
    7600:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    7604:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    7606:	81 11       	cpse	r24, r1
    7608:	02 c0       	rjmp	.+4      	; 0x760e <LBGetNextFrame+0x32>
    760a:	81 e0       	ldi	r24, 0x01	; 1
    760c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    760e:	80 81       	ld	r24, Z
    7610:	e8 0f       	add	r30, r24
    7612:	f1 1d       	adc	r31, r1
    7614:	e8 0f       	add	r30, r24
    7616:	f1 1d       	adc	r31, r1
    7618:	84 81       	ldd	r24, Z+4	; 0x04
    761a:	95 81       	ldd	r25, Z+5	; 0x05
}
    761c:	df 91       	pop	r29
    761e:	cf 91       	pop	r28
    7620:	08 95       	ret

00007622 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    7622:	0f 93       	push	r16
    7624:	1f 93       	push	r17
    7626:	cf 93       	push	r28
    7628:	df 93       	push	r29
    762a:	8c 01       	movw	r16, r24
    762c:	eb 01       	movw	r28, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    762e:	80 e0       	ldi	r24, 0x00	; 0
    7630:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <ReadJoypad>
    7634:	f8 01       	movw	r30, r16
    7636:	95 83       	std	Z+5, r25	; 0x05
    7638:	84 83       	std	Z+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    763a:	20 91 74 09 	lds	r18, 0x0974
    763e:	30 91 75 09 	lds	r19, 0x0975
    7642:	a9 01       	movw	r20, r18
    7644:	40 95       	com	r20
    7646:	50 95       	com	r21
    7648:	48 23       	and	r20, r24
    764a:	59 23       	and	r21, r25
    764c:	51 83       	std	Z+1, r21	; 0x01
    764e:	40 83       	st	Z, r20
	p1->released = p1_prev & (p1->held ^ p1_prev);
    7650:	ac 01       	movw	r20, r24
    7652:	40 95       	com	r20
    7654:	50 95       	com	r21
    7656:	24 23       	and	r18, r20
    7658:	35 23       	and	r19, r21
    765a:	33 83       	std	Z+3, r19	; 0x03
    765c:	22 83       	std	Z+2, r18	; 0x02
	p1_prev = p1->held;
    765e:	90 93 75 09 	sts	0x0975, r25
    7662:	80 93 74 09 	sts	0x0974, r24
	p2->held = ReadJoypad(1);
    7666:	81 e0       	ldi	r24, 0x01	; 1
    7668:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <ReadJoypad>
    766c:	9d 83       	std	Y+5, r25	; 0x05
    766e:	8c 83       	std	Y+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    7670:	20 91 72 09 	lds	r18, 0x0972
    7674:	30 91 73 09 	lds	r19, 0x0973
    7678:	a9 01       	movw	r20, r18
    767a:	40 95       	com	r20
    767c:	50 95       	com	r21
    767e:	48 23       	and	r20, r24
    7680:	59 23       	and	r21, r25
    7682:	59 83       	std	Y+1, r21	; 0x01
    7684:	48 83       	st	Y, r20
	p2->released = p2_prev & (p2->held ^ p2_prev);
    7686:	ac 01       	movw	r20, r24
    7688:	40 95       	com	r20
    768a:	50 95       	com	r21
    768c:	24 23       	and	r18, r20
    768e:	35 23       	and	r19, r21
    7690:	3b 83       	std	Y+3, r19	; 0x03
    7692:	2a 83       	std	Y+2, r18	; 0x02
	p2_prev = p2->held;
    7694:	90 93 73 09 	sts	0x0973, r25
    7698:	80 93 72 09 	sts	0x0972, r24
}
    769c:	df 91       	pop	r29
    769e:	cf 91       	pop	r28
    76a0:	1f 91       	pop	r17
    76a2:	0f 91       	pop	r16
    76a4:	08 95       	ret

000076a6 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    76a6:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    76a8:	fb 01       	movw	r30, r22
    76aa:	2e 2f       	mov	r18, r30
    76ac:	23 1b       	sub	r18, r19
    76ae:	24 17       	cp	r18, r20
    76b0:	28 f4       	brcc	.+10     	; 0x76bc <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    76b2:	21 91       	ld	r18, Z+
    76b4:	dc 01       	movw	r26, r24
    76b6:	2d 93       	st	X+, r18
    76b8:	cd 01       	movw	r24, r26
    76ba:	f7 cf       	rjmp	.-18     	; 0x76aa <LBCopyChars+0x4>
	}
}
    76bc:	08 95       	ret

000076be <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    76be:	af 92       	push	r10
    76c0:	bf 92       	push	r11
    76c2:	cf 92       	push	r12
    76c4:	df 92       	push	r13
    76c6:	ef 92       	push	r14
    76c8:	ff 92       	push	r15
    76ca:	0f 93       	push	r16
    76cc:	1f 93       	push	r17
    76ce:	cf 93       	push	r28
    76d0:	df 93       	push	r29
    76d2:	1f 92       	push	r1
    76d4:	cd b7       	in	r28, 0x3d	; 61
    76d6:	de b7       	in	r29, 0x3e	; 62
    76d8:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    76da:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    76dc:	c6 2e       	mov	r12, r22
    76de:	d1 2c       	mov	r13, r1
    76e0:	90 e0       	ldi	r25, 0x00	; 0
    76e2:	5c 01       	movw	r10, r24
    76e4:	a4 1a       	sub	r10, r20
    76e6:	b5 0a       	sbc	r11, r21
    76e8:	80 2f       	mov	r24, r16
    76ea:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    76ec:	82 17       	cp	r24, r18
    76ee:	60 f4       	brcc	.+24     	; 0x7708 <LBPrintStr+0x4a>
    76f0:	c5 01       	movw	r24, r10
    76f2:	80 0f       	add	r24, r16
    76f4:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    76f6:	f8 01       	movw	r30, r16
    76f8:	41 91       	ld	r20, Z+
    76fa:	8f 01       	movw	r16, r30
    76fc:	b6 01       	movw	r22, r12
    76fe:	29 83       	std	Y+1, r18	; 0x01
    7700:	0e 94 85 3a 	call	0x750a	; 0x750a <PrintChar>
    7704:	29 81       	ldd	r18, Y+1	; 0x01
    7706:	f0 cf       	rjmp	.-32     	; 0x76e8 <LBPrintStr+0x2a>
	}
}
    7708:	0f 90       	pop	r0
    770a:	df 91       	pop	r29
    770c:	cf 91       	pop	r28
    770e:	1f 91       	pop	r17
    7710:	0f 91       	pop	r16
    7712:	ff 90       	pop	r15
    7714:	ef 90       	pop	r14
    7716:	df 90       	pop	r13
    7718:	cf 90       	pop	r12
    771a:	bf 90       	pop	r11
    771c:	af 90       	pop	r10
    771e:	08 95       	ret

00007720 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    7720:	af 92       	push	r10
    7722:	cf 92       	push	r12
    7724:	ef 92       	push	r14
    7726:	ff 92       	push	r15
    7728:	0f 93       	push	r16
    772a:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    772c:	70 e0       	ldi	r23, 0x00	; 0
    772e:	f1 2c       	mov	r15, r1
    7730:	fb 01       	movw	r30, r22
    7732:	e2 0f       	add	r30, r18
    7734:	f1 1d       	adc	r31, r1
    7736:	ee 15       	cp	r30, r14
    7738:	ff 05       	cpc	r31, r15
    773a:	a4 f0       	brlt	.+40     	; 0x7764 <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    773c:	ea 0c       	add	r14, r10
    773e:	f1 1c       	adc	r15, r1
    7740:	e6 16       	cp	r14, r22
    7742:	f7 06       	cpc	r15, r23
    7744:	7c f0       	brlt	.+30     	; 0x7764 <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    7746:	28 2f       	mov	r18, r24
    7748:	30 e0       	ldi	r19, 0x00	; 0
    774a:	10 e0       	ldi	r17, 0x00	; 0
    774c:	c9 01       	movw	r24, r18
    774e:	84 0f       	add	r24, r20
    7750:	91 1d       	adc	r25, r1
    7752:	80 17       	cp	r24, r16
    7754:	91 07       	cpc	r25, r17
    7756:	34 f0       	brlt	.+12     	; 0x7764 <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    7758:	0c 0d       	add	r16, r12
    775a:	11 1d       	adc	r17, r1
    775c:	81 e0       	ldi	r24, 0x01	; 1
    775e:	02 17       	cp	r16, r18
    7760:	13 07       	cpc	r17, r19
    7762:	0c f4       	brge	.+2      	; 0x7766 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    7764:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    7766:	1f 91       	pop	r17
    7768:	0f 91       	pop	r16
    776a:	ff 90       	pop	r15
    776c:	ef 90       	pop	r14
    776e:	cf 90       	pop	r12
    7770:	af 90       	pop	r10
    7772:	08 95       	ret

00007774 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    7774:	2f 92       	push	r2
    7776:	3f 92       	push	r3
    7778:	4f 92       	push	r4
    777a:	5f 92       	push	r5
    777c:	6f 92       	push	r6
    777e:	7f 92       	push	r7
    7780:	8f 92       	push	r8
    7782:	9f 92       	push	r9
    7784:	af 92       	push	r10
    7786:	bf 92       	push	r11
    7788:	cf 92       	push	r12
    778a:	df 92       	push	r13
    778c:	ef 92       	push	r14
    778e:	ff 92       	push	r15
    7790:	0f 93       	push	r16
    7792:	1f 93       	push	r17
    7794:	cf 93       	push	r28
    7796:	df 93       	push	r29
    7798:	00 d0       	rcall	.+0      	; 0x779a <LBLineIntersect+0x26>
    779a:	00 d0       	rcall	.+0      	; 0x779c <LBLineIntersect+0x28>
    779c:	cd b7       	in	r28, 0x3d	; 61
    779e:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    77a0:	f1 2c       	mov	r15, r1
    77a2:	8a 2c       	mov	r8, r10
    77a4:	91 2c       	mov	r9, r1
    77a6:	8e 18       	sub	r8, r14
    77a8:	9f 08       	sbc	r9, r15
    77aa:	a8 2e       	mov	r10, r24
    77ac:	b1 2c       	mov	r11, r1
    77ae:	24 2e       	mov	r2, r20
    77b0:	31 2c       	mov	r3, r1
    77b2:	2a 18       	sub	r2, r10
    77b4:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    77b6:	10 e0       	ldi	r17, 0x00	; 0
    77b8:	d1 2c       	mov	r13, r1
    77ba:	c0 1a       	sub	r12, r16
    77bc:	d1 0a       	sbc	r13, r17
    77be:	46 2f       	mov	r20, r22
    77c0:	50 e0       	ldi	r21, 0x00	; 0
    77c2:	5c 83       	std	Y+4, r21	; 0x04
    77c4:	4b 83       	std	Y+3, r20	; 0x03
    77c6:	82 2f       	mov	r24, r18
    77c8:	90 e0       	ldi	r25, 0x00	; 0
    77ca:	9a 83       	std	Y+2, r25	; 0x02
    77cc:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    77ce:	82 9c       	mul	r8, r2
    77d0:	90 01       	movw	r18, r0
    77d2:	83 9c       	mul	r8, r3
    77d4:	30 0d       	add	r19, r0
    77d6:	92 9c       	mul	r9, r2
    77d8:	30 0d       	add	r19, r0
    77da:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    77dc:	ca 01       	movw	r24, r20
    77de:	e9 81       	ldd	r30, Y+1	; 0x01
    77e0:	fa 81       	ldd	r31, Y+2	; 0x02
    77e2:	8e 1b       	sub	r24, r30
    77e4:	9f 0b       	sbc	r25, r31
    77e6:	c8 9e       	mul	r12, r24
    77e8:	b0 01       	movw	r22, r0
    77ea:	c9 9e       	mul	r12, r25
    77ec:	70 0d       	add	r23, r0
    77ee:	d8 9e       	mul	r13, r24
    77f0:	70 0d       	add	r23, r0
    77f2:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    77f4:	62 0f       	add	r22, r18
    77f6:	73 1f       	adc	r23, r19
    77f8:	88 27       	eor	r24, r24
    77fa:	77 fd       	sbrc	r23, 7
    77fc:	80 95       	com	r24
    77fe:	98 2f       	mov	r25, r24
    7800:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    7804:	2b 01       	movw	r4, r22
    7806:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    7808:	20 e0       	ldi	r18, 0x00	; 0
    780a:	30 e0       	ldi	r19, 0x00	; 0
    780c:	a9 01       	movw	r20, r18
    780e:	0e 94 15 4e 	call	0x9c2a	; 0x9c2a <__cmpsf2>
    7812:	88 23       	and	r24, r24
    7814:	09 f4       	brne	.+2      	; 0x7818 <LBLineIntersect+0xa4>
    7816:	6c c0       	rjmp	.+216    	; 0x78f0 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    7818:	4b 81       	ldd	r20, Y+3	; 0x03
    781a:	5c 81       	ldd	r21, Y+4	; 0x04
    781c:	4e 19       	sub	r20, r14
    781e:	5f 09       	sbc	r21, r15
    7820:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    7822:	0a 19       	sub	r16, r10
    7824:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    7826:	c4 9e       	mul	r12, r20
    7828:	c0 01       	movw	r24, r0
    782a:	c5 9e       	mul	r12, r21
    782c:	90 0d       	add	r25, r0
    782e:	d4 9e       	mul	r13, r20
    7830:	90 0d       	add	r25, r0
    7832:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    7834:	80 9e       	mul	r8, r16
    7836:	b0 01       	movw	r22, r0
    7838:	81 9e       	mul	r8, r17
    783a:	70 0d       	add	r23, r0
    783c:	90 9e       	mul	r9, r16
    783e:	70 0d       	add	r23, r0
    7840:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    7842:	68 0f       	add	r22, r24
    7844:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    7846:	88 27       	eor	r24, r24
    7848:	77 fd       	sbrc	r23, 7
    784a:	80 95       	com	r24
    784c:	98 2f       	mov	r25, r24
    784e:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    7852:	a3 01       	movw	r20, r6
    7854:	92 01       	movw	r18, r4
    7856:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <__divsf3>
    785a:	4b 01       	movw	r8, r22
    785c:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    785e:	20 e0       	ldi	r18, 0x00	; 0
    7860:	30 e0       	ldi	r19, 0x00	; 0
    7862:	a9 01       	movw	r20, r18
    7864:	0e 94 15 4e 	call	0x9c2a	; 0x9c2a <__cmpsf2>
    7868:	87 fd       	sbrc	r24, 7
    786a:	42 c0       	rjmp	.+132    	; 0x78f0 <LBLineIntersect+0x17c>
    786c:	20 e0       	ldi	r18, 0x00	; 0
    786e:	30 e0       	ldi	r19, 0x00	; 0
    7870:	40 e8       	ldi	r20, 0x80	; 128
    7872:	5f e3       	ldi	r21, 0x3F	; 63
    7874:	c5 01       	movw	r24, r10
    7876:	b4 01       	movw	r22, r8
    7878:	0e 94 5f 4f 	call	0x9ebe	; 0x9ebe <__gesf2>
    787c:	18 16       	cp	r1, r24
    787e:	c4 f1       	brlt	.+112    	; 0x78f0 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    7880:	2e 9c       	mul	r2, r14
    7882:	b0 01       	movw	r22, r0
    7884:	2f 9c       	mul	r2, r15
    7886:	70 0d       	add	r23, r0
    7888:	3e 9c       	mul	r3, r14
    788a:	70 0d       	add	r23, r0
    788c:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    788e:	29 81       	ldd	r18, Y+1	; 0x01
    7890:	3a 81       	ldd	r19, Y+2	; 0x02
    7892:	8b 81       	ldd	r24, Y+3	; 0x03
    7894:	9c 81       	ldd	r25, Y+4	; 0x04
    7896:	28 1b       	sub	r18, r24
    7898:	39 0b       	sbc	r19, r25
    789a:	20 9f       	mul	r18, r16
    789c:	c0 01       	movw	r24, r0
    789e:	21 9f       	mul	r18, r17
    78a0:	90 0d       	add	r25, r0
    78a2:	30 9f       	mul	r19, r16
    78a4:	90 0d       	add	r25, r0
    78a6:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    78a8:	68 0f       	add	r22, r24
    78aa:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    78ac:	88 27       	eor	r24, r24
    78ae:	77 fd       	sbrc	r23, 7
    78b0:	80 95       	com	r24
    78b2:	98 2f       	mov	r25, r24
    78b4:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    78b8:	a3 01       	movw	r20, r6
    78ba:	92 01       	movw	r18, r4
    78bc:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <__divsf3>
    78c0:	6b 01       	movw	r12, r22
    78c2:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    78c4:	20 e0       	ldi	r18, 0x00	; 0
    78c6:	30 e0       	ldi	r19, 0x00	; 0
    78c8:	a9 01       	movw	r20, r18
    78ca:	0e 94 15 4e 	call	0x9c2a	; 0x9c2a <__cmpsf2>
    78ce:	87 fd       	sbrc	r24, 7
    78d0:	0f c0       	rjmp	.+30     	; 0x78f0 <LBLineIntersect+0x17c>
    78d2:	11 e0       	ldi	r17, 0x01	; 1
    78d4:	20 e0       	ldi	r18, 0x00	; 0
    78d6:	30 e0       	ldi	r19, 0x00	; 0
    78d8:	40 e8       	ldi	r20, 0x80	; 128
    78da:	5f e3       	ldi	r21, 0x3F	; 63
    78dc:	c7 01       	movw	r24, r14
    78de:	b6 01       	movw	r22, r12
    78e0:	0e 94 5f 4f 	call	0x9ebe	; 0x9ebe <__gesf2>
    78e4:	18 16       	cp	r1, r24
    78e6:	0c f0       	brlt	.+2      	; 0x78ea <LBLineIntersect+0x176>
    78e8:	10 e0       	ldi	r17, 0x00	; 0
    78ea:	81 e0       	ldi	r24, 0x01	; 1
    78ec:	81 27       	eor	r24, r17
    78ee:	01 c0       	rjmp	.+2      	; 0x78f2 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    78f0:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    78f2:	0f 90       	pop	r0
    78f4:	0f 90       	pop	r0
    78f6:	0f 90       	pop	r0
    78f8:	0f 90       	pop	r0
    78fa:	df 91       	pop	r29
    78fc:	cf 91       	pop	r28
    78fe:	1f 91       	pop	r17
    7900:	0f 91       	pop	r16
    7902:	ff 90       	pop	r15
    7904:	ef 90       	pop	r14
    7906:	df 90       	pop	r13
    7908:	cf 90       	pop	r12
    790a:	bf 90       	pop	r11
    790c:	af 90       	pop	r10
    790e:	9f 90       	pop	r9
    7910:	8f 90       	pop	r8
    7912:	7f 90       	pop	r7
    7914:	6f 90       	pop	r6
    7916:	5f 90       	pop	r5
    7918:	4f 90       	pop	r4
    791a:	3f 90       	pop	r3
    791c:	2f 90       	pop	r2
    791e:	08 95       	ret

00007920 <LBRandom>:

int LBRandom(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    7920:	fc 01       	movw	r30, r24
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
    7922:	90 91 71 09 	lds	r25, 0x0971
    7926:	2f ef       	ldi	r18, 0xFF	; 255
    7928:	3f e7       	ldi	r19, 0x7F	; 127
    792a:	09 2e       	mov	r0, r25
    792c:	02 c0       	rjmp	.+4      	; 0x7932 <LBRandom+0x12>
    792e:	35 95       	asr	r19
    7930:	27 95       	ror	r18
    7932:	0a 94       	dec	r0
    7934:	e2 f7       	brpl	.-8      	; 0x792e <LBRandom+0xe>
	int delta = to - from;
    7936:	6e 1b       	sub	r22, r30
    7938:	7f 0b       	sbc	r23, r31

	shift_count++;
    793a:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    793c:	90 31       	cpi	r25, 0x10	; 16
    793e:	18 f4       	brcc	.+6      	; 0x7946 <LBRandom+0x26>
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    7940:	90 93 71 09 	sts	0x0971, r25
    7944:	02 c0       	rjmp	.+4      	; 0x794a <LBRandom+0x2a>
	if (shift_count >= 16) shift_count = 0;
    7946:	10 92 71 09 	sts	0x0971, r1

	return from + ((delta + shifted) % delta);
    794a:	cb 01       	movw	r24, r22
    794c:	82 0f       	add	r24, r18
    794e:	93 1f       	adc	r25, r19
    7950:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
}
    7954:	8e 0f       	add	r24, r30
    7956:	9f 1f       	adc	r25, r31
    7958:	08 95       	ret

0000795a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    795a:	cf 93       	push	r28
    795c:	df 93       	push	r29
    795e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    7960:	c0 e0       	ldi	r28, 0x00	; 0
    7962:	cd 17       	cp	r28, r29
    7964:	31 f0       	breq	.+12     	; 0x7972 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    7966:	8f ef       	ldi	r24, 0xFF	; 255
    7968:	9f ef       	ldi	r25, 0xFF	; 255
    796a:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    796e:	cf 5f       	subi	r28, 0xFF	; 255
    7970:	f8 cf       	rjmp	.-16     	; 0x7962 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    7972:	df 91       	pop	r29
    7974:	cf 91       	pop	r28
    7976:	08 95       	ret

00007978 <init_tile_animations>:
	.select_state = SELECTING,
};

/* Initializers */
void init_tile_animations(TileAnimations* ta)
{
    7978:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    797a:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    797c:	14 86       	std	Z+12, r1	; 0x0c
    797e:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    7980:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    7982:	73 e0       	ldi	r23, 0x03	; 3
    7984:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    7986:	65 e0       	ldi	r22, 0x05	; 5
    7988:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    798a:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    798c:	47 ef       	ldi	r20, 0xF7	; 247
    798e:	50 e2       	ldi	r21, 0x20	; 32
    7990:	56 83       	std	Z+6, r21	; 0x06
    7992:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    7994:	24 ef       	ldi	r18, 0xF4	; 244
    7996:	30 e2       	ldi	r19, 0x20	; 32
    7998:	30 87       	std	Z+8, r19	; 0x08
    799a:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    799c:	81 ef       	ldi	r24, 0xF1	; 241
    799e:	90 e2       	ldi	r25, 0x20	; 32
    79a0:	92 87       	std	Z+10, r25	; 0x0a
    79a2:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    79a4:	10 8e       	std	Z+24, r1	; 0x18
    79a6:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    79a8:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    79aa:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    79ac:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    79ae:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    79b0:	52 8b       	std	Z+18, r21	; 0x12
    79b2:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    79b4:	34 8b       	std	Z+20, r19	; 0x14
    79b6:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    79b8:	96 8b       	std	Z+22, r25	; 0x16
    79ba:	85 8b       	std	Z+21, r24	; 0x15
    79bc:	08 95       	ret

000079be <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    79be:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    79c0:	84 e6       	ldi	r24, 0x64	; 100
    79c2:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    79c4:	10 82       	st	Z, r1
	s->active = 0;
    79c6:	15 86       	std	Z+13, r1	; 0x0d
	s->shot_type = shot_type;
    79c8:	62 87       	std	Z+10, r22	; 0x0a
	s->rebounds = SHOT_REBOUNDS;
    79ca:	84 e0       	ldi	r24, 0x04	; 4
    79cc:	84 87       	std	Z+12, r24	; 0x0c
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    79ce:	66 23       	and	r22, r22
    79d0:	11 f0       	breq	.+4      	; 0x79d6 <init_shot_state+0x18>
    79d2:	85 e0       	ldi	r24, 0x05	; 5
    79d4:	01 c0       	rjmp	.+2      	; 0x79d8 <init_shot_state+0x1a>
    79d6:	81 e0       	ldi	r24, 0x01	; 1
    79d8:	83 87       	std	Z+11, r24	; 0x0b
	s->shared.x = OFF_SCREEN;
    79da:	80 e0       	ldi	r24, 0x00	; 0
    79dc:	90 e0       	ldi	r25, 0x00	; 0
    79de:	a0 e7       	ldi	r26, 0x70	; 112
    79e0:	b3 e4       	ldi	r27, 0x43	; 67
    79e2:	82 83       	std	Z+2, r24	; 0x02
    79e4:	93 83       	std	Z+3, r25	; 0x03
    79e6:	a4 83       	std	Z+4, r26	; 0x04
    79e8:	b5 83       	std	Z+5, r27	; 0x05
	s->shared.y = 0;
    79ea:	16 82       	std	Z+6, r1	; 0x06
    79ec:	17 82       	std	Z+7, r1	; 0x07
    79ee:	10 86       	std	Z+8, r1	; 0x08
    79f0:	11 86       	std	Z+9, r1	; 0x09
    79f2:	08 95       	ret

000079f4 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    79f4:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    79f6:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    79f8:	82 e0       	ldi	r24, 0x02	; 2
    79fa:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    79fc:	85 e0       	ldi	r24, 0x05	; 5
    79fe:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    7a00:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    7a02:	66 23       	and	r22, r22
    7a04:	19 f0       	breq	.+6      	; 0x7a0c <set_shot_animations+0x18>
    7a06:	84 e9       	ldi	r24, 0x94	; 148
    7a08:	90 e2       	ldi	r25, 0x20	; 32
    7a0a:	02 c0       	rjmp	.+4      	; 0x7a10 <set_shot_animations+0x1c>
    7a0c:	87 e9       	ldi	r24, 0x97	; 151
    7a0e:	90 e2       	ldi	r25, 0x20	; 32
    7a10:	93 8b       	std	Z+19, r25	; 0x13
    7a12:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    7a14:	66 23       	and	r22, r22
    7a16:	19 f0       	breq	.+6      	; 0x7a1e <set_shot_animations+0x2a>
    7a18:	81 e9       	ldi	r24, 0x91	; 145
    7a1a:	90 e2       	ldi	r25, 0x20	; 32
    7a1c:	02 c0       	rjmp	.+4      	; 0x7a22 <set_shot_animations+0x2e>
    7a1e:	87 e9       	ldi	r24, 0x97	; 151
    7a20:	90 e2       	ldi	r25, 0x20	; 32
    7a22:	95 8b       	std	Z+21, r25	; 0x15
    7a24:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    7a26:	82 e0       	ldi	r24, 0x02	; 2
    7a28:	81 8f       	std	Z+25, r24	; 0x19
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    7a2a:	85 e0       	ldi	r24, 0x05	; 5
    7a2c:	82 8f       	std	Z+26, r24	; 0x1a
	s->right_anim.frame_count = 0;
    7a2e:	13 8e       	std	Z+27, r1	; 0x1b
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    7a30:	66 23       	and	r22, r22
    7a32:	19 f0       	breq	.+6      	; 0x7a3a <set_shot_animations+0x46>
    7a34:	8e e8       	ldi	r24, 0x8E	; 142
    7a36:	90 e2       	ldi	r25, 0x20	; 32
    7a38:	02 c0       	rjmp	.+4      	; 0x7a3e <set_shot_animations+0x4a>
    7a3a:	87 e9       	ldi	r24, 0x97	; 151
    7a3c:	90 e2       	ldi	r25, 0x20	; 32
    7a3e:	95 8f       	std	Z+29, r25	; 0x1d
    7a40:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    7a42:	66 23       	and	r22, r22
    7a44:	19 f0       	breq	.+6      	; 0x7a4c <set_shot_animations+0x58>
    7a46:	8b e8       	ldi	r24, 0x8B	; 139
    7a48:	90 e2       	ldi	r25, 0x20	; 32
    7a4a:	02 c0       	rjmp	.+4      	; 0x7a50 <set_shot_animations+0x5c>
    7a4c:	87 e9       	ldi	r24, 0x97	; 151
    7a4e:	90 e2       	ldi	r25, 0x20	; 32
    7a50:	97 8f       	std	Z+31, r25	; 0x1f
    7a52:	86 8f       	std	Z+30, r24	; 0x1e
    7a54:	08 95       	ret

00007a56 <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    7a56:	0f 93       	push	r16
    7a58:	1f 93       	push	r17
    7a5a:	cf 93       	push	r28
    7a5c:	df 93       	push	r29
    7a5e:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    7a60:	8a e5       	ldi	r24, 0x5A	; 90
    7a62:	8c 8b       	std	Y+20, r24	; 0x14
	p->grace_frame = FRAMES_PER_GRACE;
    7a64:	88 e7       	ldi	r24, 0x78	; 120
    7a66:	8e 8b       	std	Y+22, r24	; 0x16
	p->banter_index = 0;
    7a68:	1d 8a       	std	Y+21, r1	; 0x15
	p->score = 0;
    7a6a:	1e 86       	std	Y+14, r1	; 0x0e
	p->level_score = 0;
    7a6c:	1f 86       	std	Y+15, r1	; 0x0f
	p->shared.direction = D_UP;
    7a6e:	18 82       	st	Y, r1
	p->shared.speed = 0;
    7a70:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    7a72:	82 e3       	ldi	r24, 0x32	; 50
    7a74:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    7a76:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    7a78:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    7a7a:	1b 8a       	std	Y+19, r1	; 0x13

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    7a7c:	fe 01       	movw	r30, r28
    7a7e:	e2 5a       	subi	r30, 0xA2	; 162
    7a80:	ff 4f       	sbci	r31, 0xFF	; 255
    7a82:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    7a84:	31 96       	adiw	r30, 0x01	; 1
    7a86:	91 e0       	ldi	r25, 0x01	; 1
    7a88:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    7a8a:	31 96       	adiw	r30, 0x01	; 1
    7a8c:	85 e0       	ldi	r24, 0x05	; 5
    7a8e:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    7a90:	31 96       	adiw	r30, 0x01	; 1
    7a92:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    7a94:	31 96       	adiw	r30, 0x01	; 1
    7a96:	71 83       	std	Z+1, r23	; 0x01
    7a98:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    7a9a:	36 96       	adiw	r30, 0x06	; 6
    7a9c:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    7a9e:	31 96       	adiw	r30, 0x01	; 1
    7aa0:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    7aa2:	31 96       	adiw	r30, 0x01	; 1
    7aa4:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    7aa6:	31 96       	adiw	r30, 0x01	; 1
    7aa8:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    7aaa:	31 96       	adiw	r30, 0x01	; 1
    7aac:	51 83       	std	Z+1, r21	; 0x01
    7aae:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    7ab0:	36 96       	adiw	r30, 0x06	; 6
    7ab2:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    7ab4:	31 96       	adiw	r30, 0x01	; 1
    7ab6:	93 e0       	ldi	r25, 0x03	; 3
    7ab8:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    7aba:	31 96       	adiw	r30, 0x01	; 1
    7abc:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    7abe:	31 96       	adiw	r30, 0x01	; 1
    7ac0:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    7ac2:	31 96       	adiw	r30, 0x01	; 1
    7ac4:	86 ea       	ldi	r24, 0xA6	; 166
    7ac6:	90 e2       	ldi	r25, 0x20	; 32
    7ac8:	91 83       	std	Z+1, r25	; 0x01
    7aca:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    7acc:	32 96       	adiw	r30, 0x02	; 2
    7ace:	80 ea       	ldi	r24, 0xA0	; 160
    7ad0:	90 e2       	ldi	r25, 0x20	; 32
    7ad2:	91 83       	std	Z+1, r25	; 0x01
    7ad4:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    7ad6:	32 96       	adiw	r30, 0x02	; 2
    7ad8:	8a e9       	ldi	r24, 0x9A	; 154
    7ada:	90 e2       	ldi	r25, 0x20	; 32
    7adc:	91 83       	std	Z+1, r25	; 0x01
    7ade:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    7ae0:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    7ae2:	8e 01       	movw	r16, r28
    7ae4:	06 5e       	subi	r16, 0xE6	; 230
    7ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    7ae8:	60 e0       	ldi	r22, 0x00	; 0
    7aea:	c8 01       	movw	r24, r16
    7aec:	0e 94 df 3c 	call	0x79be	; 0x79be <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    7af0:	60 e0       	ldi	r22, 0x00	; 0
    7af2:	c8 01       	movw	r24, r16
    7af4:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <set_shot_animations>

	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    7af8:	ec 96       	adiw	r28, 0x3c	; 60
    7afa:	60 e0       	ldi	r22, 0x00	; 0
    7afc:	ce 01       	movw	r24, r28
    7afe:	0e 94 df 3c 	call	0x79be	; 0x79be <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    7b02:	60 e0       	ldi	r22, 0x00	; 0
    7b04:	ce 01       	movw	r24, r28
	}
}
    7b06:	df 91       	pop	r29
    7b08:	cf 91       	pop	r28
    7b0a:	1f 91       	pop	r17
    7b0c:	0f 91       	pop	r16
	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    7b0e:	0c 94 fa 3c 	jmp	0x79f4	; 0x79f4 <set_shot_animations>

00007b12 <player_init_shot_state>:
	}
}

void player_init_shot_state(Player* player)
{
    7b12:	cf 93       	push	r28
    7b14:	df 93       	push	r29
    7b16:	ec 01       	movw	r28, r24
	player->active_shots = 0;
    7b18:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    7b1a:	60 e0       	ldi	r22, 0x00	; 0
    7b1c:	4a 96       	adiw	r24, 0x1a	; 26
    7b1e:	0e 94 df 3c 	call	0x79be	; 0x79be <init_shot_state>
    7b22:	60 e0       	ldi	r22, 0x00	; 0
    7b24:	ce 01       	movw	r24, r28
    7b26:	cc 96       	adiw	r24, 0x3c	; 60
	}
}
    7b28:	df 91       	pop	r29
    7b2a:	cf 91       	pop	r28
void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    7b2c:	0c 94 df 3c 	jmp	0x79be	; 0x79be <init_shot_state>

00007b30 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    7b30:	e1 e0       	ldi	r30, 0x01	; 1
    7b32:	fa e0       	ldi	r31, 0x0A	; 10
    7b34:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    7b36:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    7b38:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    7b3a:	4a ec       	ldi	r20, 0xCA	; 202
    7b3c:	50 e2       	ldi	r21, 0x20	; 32
    7b3e:	66 ed       	ldi	r22, 0xD6	; 214
    7b40:	70 e2       	ldi	r23, 0x20	; 32
    7b42:	8e e1       	ldi	r24, 0x1E	; 30
    7b44:	9a e0       	ldi	r25, 0x0A	; 10
    7b46:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    7b4a:	42 eb       	ldi	r20, 0xB2	; 178
    7b4c:	50 e2       	ldi	r21, 0x20	; 32
    7b4e:	6e eb       	ldi	r22, 0xBE	; 190
    7b50:	70 e2       	ldi	r23, 0x20	; 32
    7b52:	8f e8       	ldi	r24, 0x8F	; 143
    7b54:	9d e0       	ldi	r25, 0x0D	; 13
    7b56:	0c 94 2b 3d 	jmp	0x7a56	; 0x7a56 <init_player>

00007b5a <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    7b5a:	cf 93       	push	r28
    7b5c:	df 93       	push	r29
    7b5e:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    7b60:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    7b62:	69 89       	ldd	r22, Y+17	; 0x11
    7b64:	70 e0       	ldi	r23, 0x00	; 0
    7b66:	80 e0       	ldi	r24, 0x00	; 0
    7b68:	90 e0       	ldi	r25, 0x00	; 0
    7b6a:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <__floatunsisf>
    7b6e:	6a 83       	std	Y+2, r22	; 0x02
    7b70:	7b 83       	std	Y+3, r23	; 0x03
    7b72:	8c 83       	std	Y+4, r24	; 0x04
    7b74:	9d 83       	std	Y+5, r25	; 0x05
	player->shared.y = player->spawn_y;
    7b76:	6a 89       	ldd	r22, Y+18	; 0x12
    7b78:	70 e0       	ldi	r23, 0x00	; 0
    7b7a:	80 e0       	ldi	r24, 0x00	; 0
    7b7c:	90 e0       	ldi	r25, 0x00	; 0
    7b7e:	0e 94 ad 4e 	call	0x9d5a	; 0x9d5a <__floatunsisf>
    7b82:	6e 83       	std	Y+6, r22	; 0x06
    7b84:	7f 83       	std	Y+7, r23	; 0x07
    7b86:	88 87       	std	Y+8, r24	; 0x08
    7b88:	99 87       	std	Y+9, r25	; 0x09
	player->shared.direction = D_UP;
    7b8a:	18 82       	st	Y, r1
	player->shared.speed = 0;
    7b8c:	19 82       	std	Y+1, r1	; 0x01
	
}
    7b8e:	df 91       	pop	r29
    7b90:	cf 91       	pop	r28
    7b92:	08 95       	ret

00007b94 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    7b94:	cf 93       	push	r28
    7b96:	df 93       	push	r29
    7b98:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    7b9a:	bc 01       	movw	r22, r24
    7b9c:	88 81       	ld	r24, Y
    7b9e:	99 81       	ldd	r25, Y+1	; 0x01
    7ba0:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <EepromReadBlock>
	if (status == 0x03)
    7ba4:	83 30       	cpi	r24, 0x03	; 3
    7ba6:	29 f4       	brne	.+10     	; 0x7bb2 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    7ba8:	ce 01       	movw	r24, r28
	}
}
    7baa:	df 91       	pop	r29
    7bac:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    7bae:	0c 94 8c 2d 	jmp	0x5b18	; 0x5b18 <EepromWriteBlock>
	}
}
    7bb2:	df 91       	pop	r29
    7bb4:	cf 91       	pop	r28
    7bb6:	08 95       	ret

00007bb8 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    7bb8:	61 e0       	ldi	r22, 0x01	; 1
    7bba:	83 e0       	ldi	r24, 0x03	; 3
    7bbc:	0e 94 b9 3a 	call	0x7572	; 0x7572 <FadeOut>
	ClearVram();
    7bc0:	0e 94 ae 2c 	call	0x595c	; 0x595c <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    7bc4:	60 e0       	ldi	r22, 0x00	; 0
    7bc6:	83 e0       	ldi	r24, 0x03	; 3
    7bc8:	0c 94 ad 3a 	jmp	0x755a	; 0x755a <FadeIn>

00007bcc <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    7bcc:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    7bce:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    7bd0:	40 e0       	ldi	r20, 0x00	; 0
    7bd2:	6c ed       	ldi	r22, 0xDC	; 220
    7bd4:	70 e2       	ldi	r23, 0x20	; 32
    7bd6:	8c 2f       	mov	r24, r28
    7bd8:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
    7bdc:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    7bde:	cc 30       	cpi	r28, 0x0C	; 12
    7be0:	b9 f7       	brne	.-18     	; 0x7bd0 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    7be2:	cf 91       	pop	r28
    7be4:	08 95       	ret

00007be6 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    7be6:	cf 92       	push	r12
    7be8:	df 92       	push	r13
    7bea:	ff 92       	push	r15
    7bec:	0f 93       	push	r16
    7bee:	1f 93       	push	r17
    7bf0:	cf 93       	push	r28
    7bf2:	df 93       	push	r29
    7bf4:	cd b7       	in	r28, 0x3d	; 61
    7bf6:	de b7       	in	r29, 0x3e	; 62
    7bf8:	28 97       	sbiw	r28, 0x08	; 8
    7bfa:	0f b6       	in	r0, 0x3f	; 63
    7bfc:	f8 94       	cli
    7bfe:	de bf       	out	0x3e, r29	; 62
    7c00:	0f be       	out	0x3f, r0	; 63
    7c02:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    7c04:	90 91 2c 0a 	lds	r25, 0x0A2C
    7c08:	80 91 9d 0d 	lds	r24, 0x0D9D
    7c0c:	98 17       	cp	r25, r24
    7c0e:	28 f4       	brcc	.+10     	; 0x7c1a <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    7c10:	ee e1       	ldi	r30, 0x1E	; 30
    7c12:	fa e0       	ldi	r31, 0x0A	; 10
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    7c14:	af e8       	ldi	r26, 0x8F	; 143
    7c16:	bd e0       	ldi	r27, 0x0D	; 13
    7c18:	04 c0       	rjmp	.+8      	; 0x7c22 <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    7c1a:	ef e8       	ldi	r30, 0x8F	; 143
    7c1c:	fd e0       	ldi	r31, 0x0D	; 13
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    7c1e:	ae e1       	ldi	r26, 0x1E	; 30
    7c20:	ba e0       	ldi	r27, 0x0A	; 10
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    7c22:	1a 96       	adiw	r26, 0x0a	; 10
    7c24:	8c 91       	ld	r24, X
    7c26:	1a 97       	sbiw	r26, 0x0a	; 10
    7c28:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    7c2a:	82 85       	ldd	r24, Z+10	; 0x0a
    7c2c:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    7c2e:	1e 96       	adiw	r26, 0x0e	; 14
    7c30:	8c 91       	ld	r24, X
    7c32:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    7c34:	96 85       	ldd	r25, Z+14	; 0x0e
    7c36:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    7c38:	f8 2e       	mov	r15, r24
    7c3a:	f9 1a       	sub	r15, r25
    7c3c:	00 e0       	ldi	r16, 0x00	; 0
    7c3e:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    7c40:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    7c42:	81 11       	cpse	r24, r1
    7c44:	08 c0       	rjmp	.+16     	; 0x7c56 <save_score+0x70>
    7c46:	f8 01       	movw	r30, r16
    7c48:	ec 5f       	subi	r30, 0xFC	; 252
    7c4a:	fe 4f       	sbci	r31, 0xFE	; 254
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    7c4c:	94 81       	ldd	r25, Z+4	; 0x04
    7c4e:	25 81       	ldd	r18, Z+5	; 0x05
    7c50:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    7c52:	9f 15       	cp	r25, r15
    7c54:	d0 f4       	brcc	.+52     	; 0x7c8a <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    7c56:	44 e0       	ldi	r20, 0x04	; 4
    7c58:	c8 01       	movw	r24, r16
    7c5a:	8a 5f       	subi	r24, 0xFA	; 250
    7c5c:	9e 4f       	sbci	r25, 0xFE	; 254
    7c5e:	6c 01       	movw	r12, r24
    7c60:	bc 01       	movw	r22, r24
    7c62:	ce 01       	movw	r24, r28
    7c64:	05 96       	adiw	r24, 0x05	; 5
    7c66:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    7c6a:	44 e0       	ldi	r20, 0x04	; 4
    7c6c:	be 01       	movw	r22, r28
    7c6e:	6f 5f       	subi	r22, 0xFF	; 255
    7c70:	7f 4f       	sbci	r23, 0xFF	; 255
    7c72:	c6 01       	movw	r24, r12
    7c74:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    7c78:	44 e0       	ldi	r20, 0x04	; 4
    7c7a:	be 01       	movw	r22, r28
    7c7c:	6b 5f       	subi	r22, 0xFB	; 251
    7c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c80:	ce 01       	movw	r24, r28
    7c82:	01 96       	adiw	r24, 0x01	; 1
    7c84:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <LBCopyChars>
				saved = 1;
    7c88:	81 e0       	ldi	r24, 0x01	; 1
    7c8a:	0c 5f       	subi	r16, 0xFC	; 252
    7c8c:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    7c8e:	0c 31       	cpi	r16, 0x1C	; 28
    7c90:	11 05       	cpc	r17, r1
    7c92:	b9 f6       	brne	.-82     	; 0x7c42 <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    7c94:	84 e0       	ldi	r24, 0x04	; 4
    7c96:	91 e0       	ldi	r25, 0x01	; 1
    7c98:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    7c9c:	28 96       	adiw	r28, 0x08	; 8
    7c9e:	0f b6       	in	r0, 0x3f	; 63
    7ca0:	f8 94       	cli
    7ca2:	de bf       	out	0x3e, r29	; 62
    7ca4:	0f be       	out	0x3f, r0	; 63
    7ca6:	cd bf       	out	0x3d, r28	; 61
    7ca8:	df 91       	pop	r29
    7caa:	cf 91       	pop	r28
    7cac:	1f 91       	pop	r17
    7cae:	0f 91       	pop	r16
    7cb0:	ff 90       	pop	r15
    7cb2:	df 90       	pop	r13
    7cb4:	cf 90       	pop	r12
    7cb6:	08 95       	ret

00007cb8 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    7cb8:	0f 93       	push	r16
    7cba:	1f 93       	push	r17
    7cbc:	cf 93       	push	r28
    7cbe:	df 93       	push	r29
    7cc0:	8c 01       	movw	r16, r24
    7cc2:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    7cc4:	88 81       	ld	r24, Y
    7cc6:	81 30       	cpi	r24, 0x01	; 1
    7cc8:	69 f1       	breq	.+90     	; 0x7d24 <position_shot+0x6c>
    7cca:	88 f0       	brcs	.+34     	; 0x7cee <position_shot+0x36>
    7ccc:	82 30       	cpi	r24, 0x02	; 2
    7cce:	b1 f1       	breq	.+108    	; 0x7d3c <position_shot+0x84>
    7cd0:	83 30       	cpi	r24, 0x03	; 3
    7cd2:	09 f0       	breq	.+2      	; 0x7cd6 <position_shot+0x1e>
    7cd4:	5a c0       	rjmp	.+180    	; 0x7d8a <position_shot+0xd2>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 16;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    7cd6:	20 e0       	ldi	r18, 0x00	; 0
    7cd8:	30 e0       	ldi	r19, 0x00	; 0
    7cda:	40 e0       	ldi	r20, 0x00	; 0
    7cdc:	51 e4       	ldi	r21, 0x41	; 65
    7cde:	f8 01       	movw	r30, r16
    7ce0:	62 81       	ldd	r22, Z+2	; 0x02
    7ce2:	73 81       	ldd	r23, Z+3	; 0x03
    7ce4:	84 81       	ldd	r24, Z+4	; 0x04
    7ce6:	95 81       	ldd	r25, Z+5	; 0x05
    7ce8:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    7cec:	3b c0       	rjmp	.+118    	; 0x7d64 <position_shot+0xac>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    7cee:	20 e0       	ldi	r18, 0x00	; 0
    7cf0:	30 e0       	ldi	r19, 0x00	; 0
    7cf2:	40 e8       	ldi	r20, 0x80	; 128
    7cf4:	50 e4       	ldi	r21, 0x40	; 64
    7cf6:	f8 01       	movw	r30, r16
    7cf8:	62 81       	ldd	r22, Z+2	; 0x02
    7cfa:	73 81       	ldd	r23, Z+3	; 0x03
    7cfc:	84 81       	ldd	r24, Z+4	; 0x04
    7cfe:	95 81       	ldd	r25, Z+5	; 0x05
    7d00:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    7d04:	6a 83       	std	Y+2, r22	; 0x02
    7d06:	7b 83       	std	Y+3, r23	; 0x03
    7d08:	8c 83       	std	Y+4, r24	; 0x04
    7d0a:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y - 8;
    7d0c:	20 e0       	ldi	r18, 0x00	; 0
    7d0e:	30 e0       	ldi	r19, 0x00	; 0
    7d10:	40 e0       	ldi	r20, 0x00	; 0
    7d12:	51 e4       	ldi	r21, 0x41	; 65
    7d14:	f8 01       	movw	r30, r16
    7d16:	66 81       	ldd	r22, Z+6	; 0x06
    7d18:	77 81       	ldd	r23, Z+7	; 0x07
    7d1a:	80 85       	ldd	r24, Z+8	; 0x08
    7d1c:	91 85       	ldd	r25, Z+9	; 0x09
    7d1e:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    7d22:	2f c0       	rjmp	.+94     	; 0x7d82 <position_shot+0xca>
			break;
		case D_RIGHT:
			shot->shared.x = player->shared.x + 16;
    7d24:	20 e0       	ldi	r18, 0x00	; 0
    7d26:	30 e0       	ldi	r19, 0x00	; 0
    7d28:	40 e8       	ldi	r20, 0x80	; 128
    7d2a:	51 e4       	ldi	r21, 0x41	; 65
    7d2c:	f8 01       	movw	r30, r16
    7d2e:	62 81       	ldd	r22, Z+2	; 0x02
    7d30:	73 81       	ldd	r23, Z+3	; 0x03
    7d32:	84 81       	ldd	r24, Z+4	; 0x04
    7d34:	95 81       	ldd	r25, Z+5	; 0x05
    7d36:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    7d3a:	14 c0       	rjmp	.+40     	; 0x7d64 <position_shot+0xac>
			shot->shared.y = player->shared.y + 4;
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    7d3c:	20 e0       	ldi	r18, 0x00	; 0
    7d3e:	30 e0       	ldi	r19, 0x00	; 0
    7d40:	40 e8       	ldi	r20, 0x80	; 128
    7d42:	50 e4       	ldi	r21, 0x40	; 64
    7d44:	f8 01       	movw	r30, r16
    7d46:	62 81       	ldd	r22, Z+2	; 0x02
    7d48:	73 81       	ldd	r23, Z+3	; 0x03
    7d4a:	84 81       	ldd	r24, Z+4	; 0x04
    7d4c:	95 81       	ldd	r25, Z+5	; 0x05
    7d4e:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    7d52:	6a 83       	std	Y+2, r22	; 0x02
    7d54:	7b 83       	std	Y+3, r23	; 0x03
    7d56:	8c 83       	std	Y+4, r24	; 0x04
    7d58:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 16;
    7d5a:	20 e0       	ldi	r18, 0x00	; 0
    7d5c:	30 e0       	ldi	r19, 0x00	; 0
    7d5e:	40 e8       	ldi	r20, 0x80	; 128
    7d60:	51 e4       	ldi	r21, 0x41	; 65
    7d62:	08 c0       	rjmp	.+16     	; 0x7d74 <position_shot+0xbc>
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    7d64:	6a 83       	std	Y+2, r22	; 0x02
    7d66:	7b 83       	std	Y+3, r23	; 0x03
    7d68:	8c 83       	std	Y+4, r24	; 0x04
    7d6a:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 4;
    7d6c:	20 e0       	ldi	r18, 0x00	; 0
    7d6e:	30 e0       	ldi	r19, 0x00	; 0
    7d70:	40 e8       	ldi	r20, 0x80	; 128
    7d72:	50 e4       	ldi	r21, 0x40	; 64
    7d74:	f8 01       	movw	r30, r16
    7d76:	66 81       	ldd	r22, Z+6	; 0x06
    7d78:	77 81       	ldd	r23, Z+7	; 0x07
    7d7a:	80 85       	ldd	r24, Z+8	; 0x08
    7d7c:	91 85       	ldd	r25, Z+9	; 0x09
    7d7e:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    7d82:	6e 83       	std	Y+6, r22	; 0x06
    7d84:	7f 83       	std	Y+7, r23	; 0x07
    7d86:	88 87       	std	Y+8, r24	; 0x08
    7d88:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    7d8a:	df 91       	pop	r29
    7d8c:	cf 91       	pop	r28
    7d8e:	1f 91       	pop	r17
    7d90:	0f 91       	pop	r16
    7d92:	08 95       	ret

00007d94 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    7d94:	0f 93       	push	r16
    7d96:	1f 93       	push	r17
    7d98:	cf 93       	push	r28
    7d9a:	df 93       	push	r29
    7d9c:	8c 01       	movw	r16, r24
    7d9e:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    7da0:	ac 01       	movw	r20, r24
    7da2:	45 5f       	subi	r20, 0xF5	; 245
    7da4:	5f 4f       	sbci	r21, 0xFF	; 255
    7da6:	23 e0       	ldi	r18, 0x03	; 3
    7da8:	6e e0       	ldi	r22, 0x0E	; 14
    7daa:	84 e0       	ldi	r24, 0x04	; 4
    7dac:	0e 94 5f 3b 	call	0x76be	; 0x76be <LBPrintStr>
	Print(8, 14, strOwns);
    7db0:	44 e3       	ldi	r20, 0x34	; 52
    7db2:	52 e0       	ldi	r21, 0x02	; 2
    7db4:	6e e0       	ldi	r22, 0x0E	; 14
    7db6:	70 e0       	ldi	r23, 0x00	; 0
    7db8:	88 e0       	ldi	r24, 0x08	; 8
    7dba:	90 e0       	ldi	r25, 0x00	; 0
    7dbc:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    7dc0:	ae 01       	movw	r20, r28
    7dc2:	45 5f       	subi	r20, 0xF5	; 245
    7dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    7dc6:	23 e0       	ldi	r18, 0x03	; 3
    7dc8:	6e e0       	ldi	r22, 0x0E	; 14
    7dca:	8d e0       	ldi	r24, 0x0D	; 13
    7dcc:	0e 94 5f 3b 	call	0x76be	; 0x76be <LBPrintStr>
	Print(17, 14, strBy);
    7dd0:	41 e3       	ldi	r20, 0x31	; 49
    7dd2:	52 e0       	ldi	r21, 0x02	; 2
    7dd4:	6e e0       	ldi	r22, 0x0E	; 14
    7dd6:	70 e0       	ldi	r23, 0x00	; 0
    7dd8:	81 e1       	ldi	r24, 0x11	; 17
    7dda:	90 e0       	ldi	r25, 0x00	; 0
    7ddc:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    7de0:	21 e0       	ldi	r18, 0x01	; 1
    7de2:	f8 01       	movw	r30, r16
    7de4:	47 85       	ldd	r20, Z+15	; 0x0f
    7de6:	6e e0       	ldi	r22, 0x0E	; 14
    7de8:	70 e0       	ldi	r23, 0x00	; 0
    7dea:	86 e1       	ldi	r24, 0x16	; 22
    7dec:	90 e0       	ldi	r25, 0x00	; 0
    7dee:	0e 94 37 3a 	call	0x746e	; 0x746e <PrintByte>
	PrintChar(23, 14, '-');
    7df2:	4d e2       	ldi	r20, 0x2D	; 45
    7df4:	6e e0       	ldi	r22, 0x0E	; 14
    7df6:	70 e0       	ldi	r23, 0x00	; 0
    7df8:	87 e1       	ldi	r24, 0x17	; 23
    7dfa:	90 e0       	ldi	r25, 0x00	; 0
    7dfc:	0e 94 85 3a 	call	0x750a	; 0x750a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    7e00:	21 e0       	ldi	r18, 0x01	; 1
    7e02:	4f 85       	ldd	r20, Y+15	; 0x0f
    7e04:	6e e0       	ldi	r22, 0x0E	; 14
    7e06:	70 e0       	ldi	r23, 0x00	; 0
    7e08:	8a e1       	ldi	r24, 0x1A	; 26
    7e0a:	90 e0       	ldi	r25, 0x00	; 0
}
    7e0c:	df 91       	pop	r29
    7e0e:	cf 91       	pop	r28
    7e10:	1f 91       	pop	r17
    7e12:	0f 91       	pop	r16
	Print(8, 14, strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    7e14:	0c 94 37 3a 	jmp	0x746e	; 0x746e <PrintByte>

00007e18 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    7e18:	cf 93       	push	r28
    7e1a:	df 93       	push	r29
    7e1c:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    7e1e:	ac 01       	movw	r20, r24
    7e20:	45 5f       	subi	r20, 0xF5	; 245
    7e22:	5f 4f       	sbci	r21, 0xFF	; 255
    7e24:	23 e0       	ldi	r18, 0x03	; 3
    7e26:	60 e0       	ldi	r22, 0x00	; 0
    7e28:	8a e0       	ldi	r24, 0x0A	; 10
    7e2a:	8c 0f       	add	r24, r28
    7e2c:	0e 94 5f 3b 	call	0x76be	; 0x76be <LBPrintStr>
	Print(x, 0, strScore);
    7e30:	d0 e0       	ldi	r29, 0x00	; 0
    7e32:	45 e8       	ldi	r20, 0x85	; 133
    7e34:	51 e0       	ldi	r21, 0x01	; 1
    7e36:	60 e0       	ldi	r22, 0x00	; 0
    7e38:	70 e0       	ldi	r23, 0x00	; 0
    7e3a:	ce 01       	movw	r24, r28
    7e3c:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(x, 1, strTotal);
    7e40:	4e e7       	ldi	r20, 0x7E	; 126
    7e42:	51 e0       	ldi	r21, 0x01	; 1
    7e44:	61 e0       	ldi	r22, 0x01	; 1
    7e46:	70 e0       	ldi	r23, 0x00	; 0
    7e48:	ce 01       	movw	r24, r28
	
}
    7e4a:	df 91       	pop	r29
    7e4c:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, strScore);
	Print(x, 1, strTotal);
    7e4e:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <Print>

00007e52 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    7e52:	0f 93       	push	r16
    7e54:	1f 93       	push	r17
    7e56:	cf 93       	push	r28
    7e58:	df 93       	push	r29
    7e5a:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    7e5c:	c6 2f       	mov	r28, r22
    7e5e:	d0 e0       	ldi	r29, 0x00	; 0
    7e60:	28 96       	adiw	r28, 0x08	; 8
    7e62:	20 e0       	ldi	r18, 0x00	; 0
    7e64:	fc 01       	movw	r30, r24
    7e66:	47 85       	ldd	r20, Z+15	; 0x0f
    7e68:	60 e0       	ldi	r22, 0x00	; 0
    7e6a:	70 e0       	ldi	r23, 0x00	; 0
    7e6c:	ce 01       	movw	r24, r28
    7e6e:	0e 94 37 3a 	call	0x746e	; 0x746e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    7e72:	20 e0       	ldi	r18, 0x00	; 0
    7e74:	f8 01       	movw	r30, r16
    7e76:	46 85       	ldd	r20, Z+14	; 0x0e
    7e78:	61 e0       	ldi	r22, 0x01	; 1
    7e7a:	70 e0       	ldi	r23, 0x00	; 0
    7e7c:	ce 01       	movw	r24, r28
}
    7e7e:	df 91       	pop	r29
    7e80:	cf 91       	pop	r28
    7e82:	1f 91       	pop	r17
    7e84:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    7e86:	0c 94 37 3a 	jmp	0x746e	; 0x746e <PrintByte>

00007e8a <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    7e8a:	cf 93       	push	r28
    7e8c:	df 93       	push	r29
    7e8e:	ec 01       	movw	r28, r24
    7e90:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    7e92:	9c 89       	ldd	r25, Y+20	; 0x14
    7e94:	9a 35       	cpi	r25, 0x5A	; 90
    7e96:	99 f0       	breq	.+38     	; 0x7ebe <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    7e98:	91 11       	cpse	r25, r1
    7e9a:	0c c0       	rjmp	.+24     	; 0x7eb4 <render_banter+0x2a>
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
    7e9c:	4d 89       	ldd	r20, Y+21	; 0x15
    7e9e:	9f e0       	ldi	r25, 0x0F	; 15
    7ea0:	49 9f       	mul	r20, r25
    7ea2:	a0 01       	movw	r20, r0
    7ea4:	11 24       	eor	r1, r1
    7ea6:	45 56       	subi	r20, 0x65	; 101
    7ea8:	5e 4f       	sbci	r21, 0xFE	; 254
    7eaa:	62 e0       	ldi	r22, 0x02	; 2
    7eac:	70 e0       	ldi	r23, 0x00	; 0
    7eae:	90 e0       	ldi	r25, 0x00	; 0
    7eb0:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    7eb4:	8c 89       	ldd	r24, Y+20	; 0x14
    7eb6:	8f 5f       	subi	r24, 0xFF	; 255
    7eb8:	8c 8b       	std	Y+20, r24	; 0x14
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
		}
		clear_banter = 1;
    7eba:	41 e0       	ldi	r20, 0x01	; 1
    7ebc:	0a c0       	rjmp	.+20     	; 0x7ed2 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    7ebe:	44 23       	and	r20, r20
    7ec0:	41 f0       	breq	.+16     	; 0x7ed2 <render_banter+0x48>
	{
		Print(banter_x, 2, strBanterClear);
    7ec2:	4c e8       	ldi	r20, 0x8C	; 140
    7ec4:	51 e0       	ldi	r21, 0x01	; 1
    7ec6:	62 e0       	ldi	r22, 0x02	; 2
    7ec8:	70 e0       	ldi	r23, 0x00	; 0
    7eca:	90 e0       	ldi	r25, 0x00	; 0
    7ecc:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
    7ed0:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    7ed2:	84 2f       	mov	r24, r20
    7ed4:	df 91       	pop	r29
    7ed6:	cf 91       	pop	r28
    7ed8:	08 95       	ret

00007eda <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    7eda:	ef 92       	push	r14
    7edc:	ff 92       	push	r15
    7ede:	0f 93       	push	r16
    7ee0:	1f 93       	push	r17
    7ee2:	cf 93       	push	r28
    7ee4:	df 93       	push	r29
    7ee6:	1f 92       	push	r1
    7ee8:	cd b7       	in	r28, 0x3d	; 61
    7eea:	de b7       	in	r29, 0x3e	; 62
    7eec:	7c 01       	movw	r14, r24
    7eee:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    7ef0:	fc 01       	movw	r30, r24
    7ef2:	66 81       	ldd	r22, Z+6	; 0x06
    7ef4:	77 81       	ldd	r23, Z+7	; 0x07
    7ef6:	80 85       	ldd	r24, Z+8	; 0x08
    7ef8:	91 85       	ldd	r25, Z+9	; 0x09
    7efa:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    7efe:	46 2f       	mov	r20, r22
    7f00:	f7 01       	movw	r30, r14
    7f02:	62 81       	ldd	r22, Z+2	; 0x02
    7f04:	73 81       	ldd	r23, Z+3	; 0x03
    7f06:	84 81       	ldd	r24, Z+4	; 0x04
    7f08:	95 81       	ldd	r25, Z+5	; 0x05
    7f0a:	49 83       	std	Y+1, r20	; 0x01
    7f0c:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    7f10:	02 e0       	ldi	r16, 0x02	; 2
    7f12:	22 e0       	ldi	r18, 0x02	; 2
    7f14:	49 81       	ldd	r20, Y+1	; 0x01
    7f16:	81 2f       	mov	r24, r17
    7f18:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
}
    7f1c:	0f 90       	pop	r0
    7f1e:	df 91       	pop	r29
    7f20:	cf 91       	pop	r28
    7f22:	1f 91       	pop	r17
    7f24:	0f 91       	pop	r16
    7f26:	ff 90       	pop	r15
    7f28:	ef 90       	pop	r14
    7f2a:	08 95       	ret

00007f2c <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    7f2c:	cf 92       	push	r12
    7f2e:	df 92       	push	r13
    7f30:	ff 92       	push	r15
    7f32:	0f 93       	push	r16
    7f34:	1f 93       	push	r17
    7f36:	cf 93       	push	r28
    7f38:	df 93       	push	r29
    7f3a:	1f 92       	push	r1
    7f3c:	cd b7       	in	r28, 0x3d	; 61
    7f3e:	de b7       	in	r29, 0x3e	; 62
    7f40:	fc 01       	movw	r30, r24
    7f42:	16 2f       	mov	r17, r22
	if (player->active_shots > 0)
    7f44:	80 89       	ldd	r24, Z+16	; 0x10
    7f46:	88 23       	and	r24, r24
    7f48:	19 f1       	breq	.+70     	; 0x7f90 <render_shot+0x64>
    7f4a:	6f 01       	movw	r12, r30
    7f4c:	8c e1       	ldi	r24, 0x1C	; 28
    7f4e:	c8 0e       	add	r12, r24
    7f50:	d1 1c       	adc	r13, r1
    7f52:	82 e0       	ldi	r24, 0x02	; 2
    7f54:	f8 2e       	mov	r15, r24
    7f56:	f6 0e       	add	r15, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    7f58:	f6 01       	movw	r30, r12
    7f5a:	64 81       	ldd	r22, Z+4	; 0x04
    7f5c:	75 81       	ldd	r23, Z+5	; 0x05
    7f5e:	86 81       	ldd	r24, Z+6	; 0x06
    7f60:	97 81       	ldd	r25, Z+7	; 0x07
    7f62:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    7f66:	46 2f       	mov	r20, r22
    7f68:	f6 01       	movw	r30, r12
    7f6a:	60 81       	ld	r22, Z
    7f6c:	71 81       	ldd	r23, Z+1	; 0x01
    7f6e:	82 81       	ldd	r24, Z+2	; 0x02
    7f70:	93 81       	ldd	r25, Z+3	; 0x03
    7f72:	49 83       	std	Y+1, r20	; 0x01
    7f74:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    7f78:	01 e0       	ldi	r16, 0x01	; 1
    7f7a:	21 e0       	ldi	r18, 0x01	; 1
    7f7c:	49 81       	ldd	r20, Y+1	; 0x01
    7f7e:	81 2f       	mov	r24, r17
    7f80:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
			sprite_index++;
    7f84:	1f 5f       	subi	r17, 0xFF	; 255
    7f86:	f2 e2       	ldi	r31, 0x22	; 34
    7f88:	cf 0e       	add	r12, r31
    7f8a:	d1 1c       	adc	r13, r1

void render_shot(Player* player, u8 sprite_index)
{
	if (player->active_shots > 0)
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
    7f8c:	1f 11       	cpse	r17, r15
    7f8e:	e4 cf       	rjmp	.-56     	; 0x7f58 <render_shot+0x2c>
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
			sprite_index++;
		}
	}
}
    7f90:	0f 90       	pop	r0
    7f92:	df 91       	pop	r29
    7f94:	cf 91       	pop	r28
    7f96:	1f 91       	pop	r17
    7f98:	0f 91       	pop	r16
    7f9a:	ff 90       	pop	r15
    7f9c:	df 90       	pop	r13
    7f9e:	cf 90       	pop	r12
    7fa0:	08 95       	ret

00007fa2 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    7fa2:	cf 92       	push	r12
    7fa4:	df 92       	push	r13
    7fa6:	ef 92       	push	r14
    7fa8:	ff 92       	push	r15
    7faa:	0f 93       	push	r16
    7fac:	1f 93       	push	r17
    7fae:	cf 93       	push	r28
    7fb0:	df 93       	push	r29
    7fb2:	1f 92       	push	r1
    7fb4:	cd b7       	in	r28, 0x3d	; 61
    7fb6:	de b7       	in	r29, 0x3e	; 62
    7fb8:	8c 01       	movw	r16, r24
    7fba:	0f 5f       	subi	r16, 0xFF	; 255
    7fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    7fbe:	7c 01       	movw	r14, r24
    7fc0:	29 e1       	ldi	r18, 0x19	; 25
    7fc2:	e2 0e       	add	r14, r18
    7fc4:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    7fc6:	8e e1       	ldi	r24, 0x1E	; 30
    7fc8:	c8 2e       	mov	r12, r24
    7fca:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    7fcc:	f8 01       	movw	r30, r16
    7fce:	82 85       	ldd	r24, Z+10	; 0x0a
    7fd0:	93 85       	ldd	r25, Z+11	; 0x0b
    7fd2:	89 2b       	or	r24, r25
    7fd4:	e1 f0       	breq	.+56     	; 0x800e <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    7fd6:	be 01       	movw	r22, r28
    7fd8:	6f 5f       	subi	r22, 0xFF	; 255
    7fda:	7f 4f       	sbci	r23, 0xFF	; 255
    7fdc:	c8 01       	movw	r24, r16
    7fde:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <LBGetNextFrame>
    7fe2:	9c 01       	movw	r18, r24
			if (looped)
    7fe4:	49 81       	ldd	r20, Y+1	; 0x01
    7fe6:	f8 01       	movw	r30, r16
    7fe8:	82 85       	ldd	r24, Z+10	; 0x0a
    7fea:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    7fec:	b6 01       	movw	r22, r12
    7fee:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    7ff2:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    7ff4:	44 23       	and	r20, r20
    7ff6:	41 f0       	breq	.+16     	; 0x8008 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    7ff8:	40 e0       	ldi	r20, 0x00	; 0
    7ffa:	50 e0       	ldi	r21, 0x00	; 0
    7ffc:	0e 94 bc 2c 	call	0x5978	; 0x5978 <SetTile>
				ta->anims[i].tile_index = 0;
    8000:	f8 01       	movw	r30, r16
    8002:	13 86       	std	Z+11, r1	; 0x0b
    8004:	12 86       	std	Z+10, r1	; 0x0a
    8006:	03 c0       	rjmp	.+6      	; 0x800e <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    8008:	a9 01       	movw	r20, r18
    800a:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <DrawMap2>
    800e:	04 5f       	subi	r16, 0xF4	; 244
    8010:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    8012:	0e 15       	cp	r16, r14
    8014:	1f 05       	cpc	r17, r15
    8016:	d1 f6       	brne	.-76     	; 0x7fcc <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    8018:	0f 90       	pop	r0
    801a:	df 91       	pop	r29
    801c:	cf 91       	pop	r28
    801e:	1f 91       	pop	r17
    8020:	0f 91       	pop	r16
    8022:	ff 90       	pop	r15
    8024:	ef 90       	pop	r14
    8026:	df 90       	pop	r13
    8028:	cf 90       	pop	r12
    802a:	08 95       	ret

0000802c <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    802c:	ff 92       	push	r15
    802e:	0f 93       	push	r16
    8030:	1f 93       	push	r17
    8032:	cf 93       	push	r28
    8034:	df 93       	push	r29
    8036:	1f 92       	push	r1
    8038:	cd b7       	in	r28, 0x3d	; 61
    803a:	de b7       	in	r29, 0x3e	; 62
    803c:	8c 01       	movw	r16, r24
    803e:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    8040:	fc 01       	movw	r30, r24
    8042:	83 89       	ldd	r24, Z+19	; 0x13
    8044:	80 ff       	sbrs	r24, 0
    8046:	18 c0       	rjmp	.+48     	; 0x8078 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    8048:	be 01       	movw	r22, r28
    804a:	6f 5f       	subi	r22, 0xFF	; 255
    804c:	7f 4f       	sbci	r23, 0xFF	; 255
    804e:	c8 01       	movw	r24, r16
    8050:	8e 58       	subi	r24, 0x8E	; 142
    8052:	9f 4f       	sbci	r25, 0xFF	; 255
    8054:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    8058:	29 81       	ldd	r18, Y+1	; 0x01
    805a:	22 23       	and	r18, r18
    805c:	09 f4       	brne	.+2      	; 0x8060 <tank_map+0x34>
    805e:	5a c0       	rjmp	.+180    	; 0x8114 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    8060:	f8 01       	movw	r30, r16
    8062:	83 89       	ldd	r24, Z+19	; 0x13
    8064:	91 e0       	ldi	r25, 0x01	; 1
    8066:	98 27       	eor	r25, r24
    8068:	93 8b       	std	Z+19, r25	; 0x13
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    806a:	c8 01       	movw	r24, r16
    806c:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    8070:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    8072:	8f ed       	ldi	r24, 0xDF	; 223
    8074:	90 e2       	ldi	r25, 0x20	; 32
    8076:	4f c0       	rjmp	.+158    	; 0x8116 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    8078:	f8 01       	movw	r30, r16
    807a:	96 89       	ldd	r25, Z+22	; 0x16
    807c:	98 37       	cpi	r25, 0x78	; 120
    807e:	11 f0       	breq	.+4      	; 0x8084 <tank_map+0x58>
		{
			player->grace_frame++;
    8080:	9f 5f       	subi	r25, 0xFF	; 255
    8082:	96 8b       	std	Z+22, r25	; 0x16
		}
		switch (player->shared.direction)
    8084:	f8 01       	movw	r30, r16
    8086:	90 81       	ld	r25, Z
    8088:	91 30       	cpi	r25, 0x01	; 1
    808a:	79 f0       	breq	.+30     	; 0x80aa <tank_map+0x7e>
    808c:	f8 f0       	brcs	.+62     	; 0x80cc <tank_map+0xa0>
    808e:	92 30       	cpi	r25, 0x02	; 2
    8090:	99 f0       	breq	.+38     	; 0x80b8 <tank_map+0x8c>
    8092:	93 30       	cpi	r25, 0x03	; 3
    8094:	d9 f4       	brne	.+54     	; 0x80cc <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    8096:	be 01       	movw	r22, r28
    8098:	6f 5f       	subi	r22, 0xFF	; 255
    809a:	7f 4f       	sbci	r23, 0xFF	; 255
    809c:	c8 01       	movw	r24, r16
    809e:	88 59       	subi	r24, 0x98	; 152
    80a0:	9f 4f       	sbci	r25, 0xFF	; 255
    80a2:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <LBGetNextFrame>
    80a6:	41 e0       	ldi	r20, 0x01	; 1
    80a8:	1a c0       	rjmp	.+52     	; 0x80de <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    80aa:	be 01       	movw	r22, r28
    80ac:	6f 5f       	subi	r22, 0xFF	; 255
    80ae:	7f 4f       	sbci	r23, 0xFF	; 255
    80b0:	c8 01       	movw	r24, r16
    80b2:	88 59       	subi	r24, 0x98	; 152
    80b4:	9f 4f       	sbci	r25, 0xFF	; 255
    80b6:	10 c0       	rjmp	.+32     	; 0x80d8 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    80b8:	be 01       	movw	r22, r28
    80ba:	6f 5f       	subi	r22, 0xFF	; 255
    80bc:	7f 4f       	sbci	r23, 0xFF	; 255
    80be:	c8 01       	movw	r24, r16
    80c0:	82 5a       	subi	r24, 0xA2	; 162
    80c2:	9f 4f       	sbci	r25, 0xFF	; 255
    80c4:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <LBGetNextFrame>
    80c8:	42 e0       	ldi	r20, 0x02	; 2
    80ca:	09 c0       	rjmp	.+18     	; 0x80de <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    80cc:	be 01       	movw	r22, r28
    80ce:	6f 5f       	subi	r22, 0xFF	; 255
    80d0:	7f 4f       	sbci	r23, 0xFF	; 255
    80d2:	c8 01       	movw	r24, r16
    80d4:	82 5a       	subi	r24, 0xA2	; 162
    80d6:	9f 4f       	sbci	r25, 0xFF	; 255
    80d8:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <LBGetNextFrame>
    80dc:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    80de:	f8 01       	movw	r30, r16
    80e0:	26 89       	ldd	r18, Z+22	; 0x16
    80e2:	28 37       	cpi	r18, 0x78	; 120
    80e4:	31 f0       	breq	.+12     	; 0x80f2 <tank_map+0xc6>
    80e6:	20 91 70 09 	lds	r18, 0x0970
    80ea:	22 23       	and	r18, r18
    80ec:	11 f0       	breq	.+4      	; 0x80f2 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    80ee:	8f ed       	ldi	r24, 0xDF	; 223
    80f0:	90 e2       	ldi	r25, 0x20	; 32
		}
		toggle_counter--;
    80f2:	20 91 03 01 	lds	r18, 0x0103
    80f6:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    80f8:	19 f0       	breq	.+6      	; 0x8100 <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    80fa:	20 93 03 01 	sts	0x0103, r18
    80fe:	0b c0       	rjmp	.+22     	; 0x8116 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    8100:	24 e1       	ldi	r18, 0x14	; 20
    8102:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    8106:	30 91 70 09 	lds	r19, 0x0970
    810a:	21 e0       	ldi	r18, 0x01	; 1
    810c:	23 27       	eor	r18, r19
    810e:	20 93 70 09 	sts	0x0970, r18
    8112:	01 c0       	rjmp	.+2      	; 0x8116 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    8114:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    8116:	bc 01       	movw	r22, r24
    8118:	8f 2d       	mov	r24, r15
    811a:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    811e:	84 e0       	ldi	r24, 0x04	; 4
    8120:	8f 0d       	add	r24, r15
    8122:	0f 90       	pop	r0
    8124:	df 91       	pop	r29
    8126:	cf 91       	pop	r28
    8128:	1f 91       	pop	r17
    812a:	0f 91       	pop	r16
    812c:	ff 90       	pop	r15
    812e:	08 95       	ret

00008130 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    8130:	ef 92       	push	r14
    8132:	ff 92       	push	r15
    8134:	0f 93       	push	r16
    8136:	1f 93       	push	r17
    8138:	cf 93       	push	r28
    813a:	df 93       	push	r29
    813c:	00 d0       	rcall	.+0      	; 0x813e <shot_map+0xe>
    813e:	cd b7       	in	r28, 0x3d	; 61
    8140:	de b7       	in	r29, 0x3e	; 62
    8142:	f6 2e       	mov	r15, r22
	char looped = 0;
    8144:	19 82       	std	Y+1, r1	; 0x01
    8146:	8c 01       	movw	r16, r24
    8148:	08 5d       	subi	r16, 0xD8	; 216
    814a:	1f 4f       	sbci	r17, 0xFF	; 255
    814c:	82 e0       	ldi	r24, 0x02	; 2
    814e:	e8 2e       	mov	r14, r24
    8150:	e6 0e       	add	r14, r22
	char* s_map = 0;
	u8 s_flags = 0;
    8152:	20 e0       	ldi	r18, 0x00	; 0
    8154:	f8 01       	movw	r30, r16
    8156:	31 97       	sbiw	r30, 0x01	; 1
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    8158:	80 81       	ld	r24, Z
    815a:	88 23       	and	r24, r24
    815c:	41 f1       	breq	.+80     	; 0x81ae <shot_map+0x7e>
    815e:	3d 97       	sbiw	r30, 0x0d	; 13
		{
			switch (shot->shared.direction)
    8160:	80 81       	ld	r24, Z
    8162:	81 30       	cpi	r24, 0x01	; 1
    8164:	71 f0       	breq	.+28     	; 0x8182 <shot_map+0x52>
    8166:	f0 f0       	brcs	.+60     	; 0x81a4 <shot_map+0x74>
    8168:	82 30       	cpi	r24, 0x02	; 2
    816a:	a1 f0       	breq	.+40     	; 0x8194 <shot_map+0x64>
    816c:	83 30       	cpi	r24, 0x03	; 3
    816e:	d1 f4       	brne	.+52     	; 0x81a4 <shot_map+0x74>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    8170:	be 01       	movw	r22, r28
    8172:	6f 5f       	subi	r22, 0xFF	; 255
    8174:	7f 4f       	sbci	r23, 0xFF	; 255
    8176:	c8 01       	movw	r24, r16
    8178:	0a 96       	adiw	r24, 0x0a	; 10
    817a:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <LBGetNextFrame>
    817e:	21 e0       	ldi	r18, 0x01	; 1
    8180:	18 c0       	rjmp	.+48     	; 0x81b2 <shot_map+0x82>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    8182:	be 01       	movw	r22, r28
    8184:	6f 5f       	subi	r22, 0xFF	; 255
    8186:	7f 4f       	sbci	r23, 0xFF	; 255
    8188:	c8 01       	movw	r24, r16
    818a:	0a 96       	adiw	r24, 0x0a	; 10
    818c:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <LBGetNextFrame>
    8190:	20 e0       	ldi	r18, 0x00	; 0
    8192:	0f c0       	rjmp	.+30     	; 0x81b2 <shot_map+0x82>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    8194:	be 01       	movw	r22, r28
    8196:	6f 5f       	subi	r22, 0xFF	; 255
    8198:	7f 4f       	sbci	r23, 0xFF	; 255
    819a:	c8 01       	movw	r24, r16
    819c:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <LBGetNextFrame>
    81a0:	22 e0       	ldi	r18, 0x02	; 2
    81a2:	07 c0       	rjmp	.+14     	; 0x81b2 <shot_map+0x82>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    81a4:	be 01       	movw	r22, r28
    81a6:	6f 5f       	subi	r22, 0xFF	; 255
    81a8:	7f 4f       	sbci	r23, 0xFF	; 255
    81aa:	c8 01       	movw	r24, r16
    81ac:	ef cf       	rjmp	.-34     	; 0x818c <shot_map+0x5c>
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    81ae:	8f ed       	ldi	r24, 0xDF	; 223
    81b0:	90 e2       	ldi	r25, 0x20	; 32
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    81b2:	42 2f       	mov	r20, r18
    81b4:	bc 01       	movw	r22, r24
    81b6:	8f 2d       	mov	r24, r15
    81b8:	2a 83       	std	Y+2, r18	; 0x02
    81ba:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
    81be:	f3 94       	inc	r15
    81c0:	0e 5d       	subi	r16, 0xDE	; 222
    81c2:	1f 4f       	sbci	r17, 0xFF	; 255
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    81c4:	2a 81       	ldd	r18, Y+2	; 0x02
    81c6:	fe 10       	cpse	r15, r14
    81c8:	c5 cf       	rjmp	.-118    	; 0x8154 <shot_map+0x24>
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
		sprite_index++;
	}
	return sprite_index;
}
    81ca:	8f 2d       	mov	r24, r15
    81cc:	0f 90       	pop	r0
    81ce:	0f 90       	pop	r0
    81d0:	df 91       	pop	r29
    81d2:	cf 91       	pop	r28
    81d4:	1f 91       	pop	r17
    81d6:	0f 91       	pop	r16
    81d8:	ff 90       	pop	r15
    81da:	ef 90       	pop	r14
    81dc:	08 95       	ret

000081de <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    81de:	cf 93       	push	r28
    81e0:	df 93       	push	r29
    81e2:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    81e4:	88 81       	ld	r24, Y
    81e6:	81 11       	cpse	r24, r1
    81e8:	15 c0       	rjmp	.+42     	; 0x8214 <recoil_sprite+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    81ea:	69 81       	ldd	r22, Y+1	; 0x01
    81ec:	70 e0       	ldi	r23, 0x00	; 0
    81ee:	80 e0       	ldi	r24, 0x00	; 0
    81f0:	90 e0       	ldi	r25, 0x00	; 0
    81f2:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    81f6:	25 e6       	ldi	r18, 0x65	; 101
    81f8:	38 e8       	ldi	r19, 0x88	; 136
    81fa:	48 e8       	ldi	r20, 0x88	; 136
    81fc:	5c e3       	ldi	r21, 0x3C	; 60
    81fe:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    8202:	9b 01       	movw	r18, r22
    8204:	ac 01       	movw	r20, r24
    8206:	6e 81       	ldd	r22, Y+6	; 0x06
    8208:	7f 81       	ldd	r23, Y+7	; 0x07
    820a:	88 85       	ldd	r24, Y+8	; 0x08
    820c:	99 85       	ldd	r25, Y+9	; 0x09
    820e:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    8212:	2d c0       	rjmp	.+90     	; 0x826e <recoil_sprite+0x90>
	}
	if (sprite->direction == D_RIGHT)
    8214:	81 30       	cpi	r24, 0x01	; 1
    8216:	a9 f4       	brne	.+42     	; 0x8242 <recoil_sprite+0x64>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    8218:	69 81       	ldd	r22, Y+1	; 0x01
    821a:	70 e0       	ldi	r23, 0x00	; 0
    821c:	80 e0       	ldi	r24, 0x00	; 0
    821e:	90 e0       	ldi	r25, 0x00	; 0
    8220:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    8224:	25 e6       	ldi	r18, 0x65	; 101
    8226:	38 e8       	ldi	r19, 0x88	; 136
    8228:	48 e8       	ldi	r20, 0x88	; 136
    822a:	5c e3       	ldi	r21, 0x3C	; 60
    822c:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    8230:	9b 01       	movw	r18, r22
    8232:	ac 01       	movw	r20, r24
    8234:	6a 81       	ldd	r22, Y+2	; 0x02
    8236:	7b 81       	ldd	r23, Y+3	; 0x03
    8238:	8c 81       	ldd	r24, Y+4	; 0x04
    823a:	9d 81       	ldd	r25, Y+5	; 0x05
    823c:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    8240:	31 c0       	rjmp	.+98     	; 0x82a4 <recoil_sprite+0xc6>
	}
	if (sprite->direction == D_DOWN)
    8242:	82 30       	cpi	r24, 0x02	; 2
    8244:	c9 f4       	brne	.+50     	; 0x8278 <recoil_sprite+0x9a>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    8246:	69 81       	ldd	r22, Y+1	; 0x01
    8248:	70 e0       	ldi	r23, 0x00	; 0
    824a:	80 e0       	ldi	r24, 0x00	; 0
    824c:	90 e0       	ldi	r25, 0x00	; 0
    824e:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    8252:	25 e6       	ldi	r18, 0x65	; 101
    8254:	38 e8       	ldi	r19, 0x88	; 136
    8256:	48 e8       	ldi	r20, 0x88	; 136
    8258:	5c e3       	ldi	r21, 0x3C	; 60
    825a:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    825e:	9b 01       	movw	r18, r22
    8260:	ac 01       	movw	r20, r24
    8262:	6e 81       	ldd	r22, Y+6	; 0x06
    8264:	7f 81       	ldd	r23, Y+7	; 0x07
    8266:	88 85       	ldd	r24, Y+8	; 0x08
    8268:	99 85       	ldd	r25, Y+9	; 0x09
    826a:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    826e:	6e 83       	std	Y+6, r22	; 0x06
    8270:	7f 83       	std	Y+7, r23	; 0x07
    8272:	88 87       	std	Y+8, r24	; 0x08
    8274:	99 87       	std	Y+9, r25	; 0x09
    8276:	1a c0       	rjmp	.+52     	; 0x82ac <recoil_sprite+0xce>
	}
	if (sprite->direction == D_LEFT)
    8278:	83 30       	cpi	r24, 0x03	; 3
    827a:	c1 f4       	brne	.+48     	; 0x82ac <recoil_sprite+0xce>
	{
		sprite->x += FRAME_TIME * sprite->speed;
    827c:	69 81       	ldd	r22, Y+1	; 0x01
    827e:	70 e0       	ldi	r23, 0x00	; 0
    8280:	80 e0       	ldi	r24, 0x00	; 0
    8282:	90 e0       	ldi	r25, 0x00	; 0
    8284:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    8288:	25 e6       	ldi	r18, 0x65	; 101
    828a:	38 e8       	ldi	r19, 0x88	; 136
    828c:	48 e8       	ldi	r20, 0x88	; 136
    828e:	5c e3       	ldi	r21, 0x3C	; 60
    8290:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    8294:	9b 01       	movw	r18, r22
    8296:	ac 01       	movw	r20, r24
    8298:	6a 81       	ldd	r22, Y+2	; 0x02
    829a:	7b 81       	ldd	r23, Y+3	; 0x03
    829c:	8c 81       	ldd	r24, Y+4	; 0x04
    829e:	9d 81       	ldd	r25, Y+5	; 0x05
    82a0:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    82a4:	6a 83       	std	Y+2, r22	; 0x02
    82a6:	7b 83       	std	Y+3, r23	; 0x03
    82a8:	8c 83       	std	Y+4, r24	; 0x04
    82aa:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    82ac:	df 91       	pop	r29
    82ae:	cf 91       	pop	r28
    82b0:	08 95       	ret

000082b2 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    82b2:	80 56       	subi	r24, 0x60	; 96
    82b4:	95 4f       	sbci	r25, 0xF5	; 245
    82b6:	fc 01       	movw	r30, r24
    82b8:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    82ba:	81 30       	cpi	r24, 0x01	; 1
    82bc:	21 f0       	breq	.+8      	; 0x82c6 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    82be:	82 30       	cpi	r24, 0x02	; 2
    82c0:	21 f0       	breq	.+8      	; 0x82ca <solid_square_tile+0x18>

	return 0;
    82c2:	80 e0       	ldi	r24, 0x00	; 0
    82c4:	08 95       	ret
    82c6:	81 e0       	ldi	r24, 0x01	; 1
    82c8:	08 95       	ret
    82ca:	82 e0       	ldi	r24, 0x02	; 2
}
    82cc:	08 95       	ret

000082ce <solid_directional_tile>:

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    82ce:	5f 92       	push	r5
    82d0:	6f 92       	push	r6
    82d2:	7f 92       	push	r7
    82d4:	8f 92       	push	r8
    82d6:	9f 92       	push	r9
    82d8:	af 92       	push	r10
    82da:	bf 92       	push	r11
    82dc:	cf 92       	push	r12
    82de:	df 92       	push	r13
    82e0:	ef 92       	push	r14
    82e2:	ff 92       	push	r15
    82e4:	0f 93       	push	r16
    82e6:	1f 93       	push	r17
    82e8:	cf 93       	push	r28
    82ea:	df 93       	push	r29
    82ec:	f6 2e       	mov	r15, r22
    82ee:	d4 2e       	mov	r13, r20
    82f0:	92 2e       	mov	r9, r18
    82f2:	b0 2e       	mov	r11, r16
	u8 tile = level.level_map[tile_index];
    82f4:	fc 01       	movw	r30, r24
    82f6:	e0 56       	subi	r30, 0x60	; 96
    82f8:	f5 4f       	sbci	r31, 0xF5	; 245
    82fa:	11 81       	ldd	r17, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    82fc:	6e e1       	ldi	r22, 0x1E	; 30
    82fe:	70 e0       	ldi	r23, 0x00	; 0
    8300:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    8304:	d8 2f       	mov	r29, r24
    8306:	dd 0f       	add	r29, r29
    8308:	dd 0f       	add	r29, r29
    830a:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    830c:	6d 5f       	subi	r22, 0xFD	; 253
    830e:	7f 4f       	sbci	r23, 0xFF	; 255
    8310:	c6 2f       	mov	r28, r22
    8312:	cc 0f       	add	r28, r28
    8314:	cc 0f       	add	r28, r28
    8316:	cc 0f       	add	r28, r28

	if ((tile == L_TL) || (tile == L_BR))
    8318:	13 30       	cpi	r17, 0x03	; 3
    831a:	11 f0       	breq	.+4      	; 0x8320 <solid_directional_tile+0x52>
    831c:	16 30       	cpi	r17, 0x06	; 6
    831e:	a1 f5       	brne	.+104    	; 0x8388 <solid_directional_tile+0xba>
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height)) return tile;
    8320:	6d 2c       	mov	r6, r13
    8322:	6b 0c       	add	r6, r11
    8324:	27 e0       	ldi	r18, 0x07	; 7
    8326:	72 2e       	mov	r7, r18
    8328:	7d 0e       	add	r7, r29
    832a:	37 e0       	ldi	r19, 0x07	; 7
    832c:	83 2e       	mov	r8, r19
    832e:	8c 0e       	add	r8, r28
    8330:	a6 2c       	mov	r10, r6
    8332:	cf 2c       	mov	r12, r15
    8334:	ed 2c       	mov	r14, r13
    8336:	0f 2d       	mov	r16, r15
    8338:	2c 2f       	mov	r18, r28
    833a:	47 2d       	mov	r20, r7
    833c:	68 2d       	mov	r22, r8
    833e:	8d 2f       	mov	r24, r29
    8340:	0e 94 ba 3b 	call	0x7774	; 0x7774 <LBLineIntersect>
    8344:	81 11       	cpse	r24, r1
    8346:	59 c0       	rjmp	.+178    	; 0x83fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width, y)) return tile;
    8348:	5f 2c       	mov	r5, r15
    834a:	59 0c       	add	r5, r9
    834c:	ad 2c       	mov	r10, r13
    834e:	c5 2c       	mov	r12, r5
    8350:	2c 2f       	mov	r18, r28
    8352:	47 2d       	mov	r20, r7
    8354:	68 2d       	mov	r22, r8
    8356:	8d 2f       	mov	r24, r29
    8358:	0e 94 ba 3b 	call	0x7774	; 0x7774 <LBLineIntersect>
    835c:	81 11       	cpse	r24, r1
    835e:	4d c0       	rjmp	.+154    	; 0x83fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width, y, x+width, y+height)) return tile;
    8360:	a6 2c       	mov	r10, r6
    8362:	05 2d       	mov	r16, r5
    8364:	2c 2f       	mov	r18, r28
    8366:	47 2d       	mov	r20, r7
    8368:	68 2d       	mov	r22, r8
    836a:	8d 2f       	mov	r24, r29
    836c:	0e 94 ba 3b 	call	0x7774	; 0x7774 <LBLineIntersect>
    8370:	81 11       	cpse	r24, r1
    8372:	43 c0       	rjmp	.+134    	; 0x83fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height, x+width, y+height)) return tile;
    8374:	e6 2c       	mov	r14, r6
    8376:	0f 2d       	mov	r16, r15
    8378:	2c 2f       	mov	r18, r28
    837a:	47 2d       	mov	r20, r7
    837c:	68 2d       	mov	r22, r8
    837e:	8d 2f       	mov	r24, r29
    8380:	0e 94 ba 3b 	call	0x7774	; 0x7774 <LBLineIntersect>
    8384:	81 11       	cpse	r24, r1
    8386:	39 c0       	rjmp	.+114    	; 0x83fa <solid_directional_tile+0x12c>
	}
	if ((tile == L_TR) || (tile == L_BL))
    8388:	8c ef       	ldi	r24, 0xFC	; 252
    838a:	81 0f       	add	r24, r17
    838c:	82 30       	cpi	r24, 0x02	; 2
    838e:	98 f5       	brcc	.+102    	; 0x83f6 <solid_directional_tile+0x128>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height)) return tile;
    8390:	bd 0c       	add	r11, r13
    8392:	87 e0       	ldi	r24, 0x07	; 7
    8394:	78 2e       	mov	r7, r24
    8396:	7c 0e       	add	r7, r28
    8398:	97 e0       	ldi	r25, 0x07	; 7
    839a:	89 2e       	mov	r8, r25
    839c:	8d 0e       	add	r8, r29
    839e:	ab 2c       	mov	r10, r11
    83a0:	cf 2c       	mov	r12, r15
    83a2:	ed 2c       	mov	r14, r13
    83a4:	0f 2d       	mov	r16, r15
    83a6:	27 2d       	mov	r18, r7
    83a8:	48 2d       	mov	r20, r8
    83aa:	6c 2f       	mov	r22, r28
    83ac:	8d 2f       	mov	r24, r29
    83ae:	0e 94 ba 3b 	call	0x7774	; 0x7774 <LBLineIntersect>
    83b2:	81 11       	cpse	r24, r1
    83b4:	22 c0       	rjmp	.+68     	; 0x83fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width, y)) return tile;
    83b6:	9f 0c       	add	r9, r15
    83b8:	ad 2c       	mov	r10, r13
    83ba:	c9 2c       	mov	r12, r9
    83bc:	27 2d       	mov	r18, r7
    83be:	48 2d       	mov	r20, r8
    83c0:	6c 2f       	mov	r22, r28
    83c2:	8d 2f       	mov	r24, r29
    83c4:	0e 94 ba 3b 	call	0x7774	; 0x7774 <LBLineIntersect>
    83c8:	81 11       	cpse	r24, r1
    83ca:	17 c0       	rjmp	.+46     	; 0x83fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width, y, x+width, y+height)) return tile;
    83cc:	ab 2c       	mov	r10, r11
    83ce:	09 2d       	mov	r16, r9
    83d0:	27 2d       	mov	r18, r7
    83d2:	48 2d       	mov	r20, r8
    83d4:	6c 2f       	mov	r22, r28
    83d6:	8d 2f       	mov	r24, r29
    83d8:	0e 94 ba 3b 	call	0x7774	; 0x7774 <LBLineIntersect>
    83dc:	81 11       	cpse	r24, r1
    83de:	0d c0       	rjmp	.+26     	; 0x83fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height, x+width, y+height)) return tile;
    83e0:	eb 2c       	mov	r14, r11
    83e2:	0f 2d       	mov	r16, r15
    83e4:	27 2d       	mov	r18, r7
    83e6:	48 2d       	mov	r20, r8
    83e8:	6c 2f       	mov	r22, r28
    83ea:	8d 2f       	mov	r24, r29
    83ec:	0e 94 ba 3b 	call	0x7774	; 0x7774 <LBLineIntersect>
    83f0:	81 11       	cpse	r24, r1
    83f2:	03 c0       	rjmp	.+6      	; 0x83fa <solid_directional_tile+0x12c>
    83f4:	03 c0       	rjmp	.+6      	; 0x83fc <solid_directional_tile+0x12e>
	}
	
	return 0;
    83f6:	80 e0       	ldi	r24, 0x00	; 0
    83f8:	01 c0       	rjmp	.+2      	; 0x83fc <solid_directional_tile+0x12e>
    83fa:	81 2f       	mov	r24, r17
}
    83fc:	df 91       	pop	r29
    83fe:	cf 91       	pop	r28
    8400:	1f 91       	pop	r17
    8402:	0f 91       	pop	r16
    8404:	ff 90       	pop	r15
    8406:	ef 90       	pop	r14
    8408:	df 90       	pop	r13
    840a:	cf 90       	pop	r12
    840c:	bf 90       	pop	r11
    840e:	af 90       	pop	r10
    8410:	9f 90       	pop	r9
    8412:	8f 90       	pop	r8
    8414:	7f 90       	pop	r7
    8416:	6f 90       	pop	r6
    8418:	5f 90       	pop	r5
    841a:	08 95       	ret

0000841c <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    841c:	af 92       	push	r10
    841e:	cf 92       	push	r12
    8420:	ef 92       	push	r14
    8422:	0f 93       	push	r16
    8424:	1f 93       	push	r17
    8426:	cf 93       	push	r28
    8428:	df 93       	push	r29
    842a:	ec 01       	movw	r28, r24
    842c:	8b 01       	movw	r16, r22
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
    842e:	fb 01       	movw	r30, r22
    8430:	66 81       	ldd	r22, Z+6	; 0x06
    8432:	77 81       	ldd	r23, Z+7	; 0x07
    8434:	80 85       	ldd	r24, Z+8	; 0x08
    8436:	91 85       	ldd	r25, Z+9	; 0x09
    8438:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    843c:	e6 2e       	mov	r14, r22
    843e:	f8 01       	movw	r30, r16
    8440:	62 81       	ldd	r22, Z+2	; 0x02
    8442:	73 81       	ldd	r23, Z+3	; 0x03
    8444:	84 81       	ldd	r24, Z+4	; 0x04
    8446:	95 81       	ldd	r25, Z+5	; 0x05
    8448:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    844c:	06 2f       	mov	r16, r22
    844e:	6e 81       	ldd	r22, Y+6	; 0x06
    8450:	7f 81       	ldd	r23, Y+7	; 0x07
    8452:	88 85       	ldd	r24, Y+8	; 0x08
    8454:	99 85       	ldd	r25, Y+9	; 0x09
    8456:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    845a:	16 2f       	mov	r17, r22
    845c:	6a 81       	ldd	r22, Y+2	; 0x02
    845e:	7b 81       	ldd	r23, Y+3	; 0x03
    8460:	8c 81       	ldd	r24, Y+4	; 0x04
    8462:	9d 81       	ldd	r25, Y+5	; 0x05
    8464:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    8468:	86 2f       	mov	r24, r22
    846a:	97 e0       	ldi	r25, 0x07	; 7
    846c:	a9 2e       	mov	r10, r25
    846e:	27 e0       	ldi	r18, 0x07	; 7
    8470:	c2 2e       	mov	r12, r18
    8472:	2e e0       	ldi	r18, 0x0E	; 14
    8474:	4e e0       	ldi	r20, 0x0E	; 14
    8476:	61 2f       	mov	r22, r17
    8478:	0e 94 90 3b 	call	0x7720	; 0x7720 <LBCollides>
    847c:	88 23       	and	r24, r24
    847e:	39 f0       	breq	.+14     	; 0x848e <player_shot+0x72>
    8480:	91 e0       	ldi	r25, 0x01	; 1
    8482:	8e 89       	ldd	r24, Y+22	; 0x16
    8484:	88 37       	cpi	r24, 0x78	; 120
    8486:	09 f0       	breq	.+2      	; 0x848a <player_shot+0x6e>
    8488:	90 e0       	ldi	r25, 0x00	; 0
    848a:	89 2f       	mov	r24, r25
    848c:	01 c0       	rjmp	.+2      	; 0x8490 <player_shot+0x74>
    848e:	80 e0       	ldi	r24, 0x00	; 0
}
    8490:	df 91       	pop	r29
    8492:	cf 91       	pop	r28
    8494:	1f 91       	pop	r17
    8496:	0f 91       	pop	r16
    8498:	ef 90       	pop	r14
    849a:	cf 90       	pop	r12
    849c:	af 90       	pop	r10
    849e:	08 95       	ret

000084a0 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    84a0:	cf 92       	push	r12
    84a2:	df 92       	push	r13
    84a4:	ef 92       	push	r14
    84a6:	ff 92       	push	r15
    84a8:	cf 93       	push	r28
    84aa:	df 93       	push	r29
    84ac:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    84ae:	ca 80       	ldd	r12, Y+2	; 0x02
    84b0:	db 80       	ldd	r13, Y+3	; 0x03
    84b2:	ec 80       	ldd	r14, Y+4	; 0x04
    84b4:	fd 80       	ldd	r15, Y+5	; 0x05
    84b6:	20 e0       	ldi	r18, 0x00	; 0
    84b8:	30 e0       	ldi	r19, 0x00	; 0
    84ba:	a9 01       	movw	r20, r18
    84bc:	c7 01       	movw	r24, r14
    84be:	b6 01       	movw	r22, r12
    84c0:	0e 94 15 4e 	call	0x9c2a	; 0x9c2a <__cmpsf2>
    84c4:	87 fd       	sbrc	r24, 7
    84c6:	31 c0       	rjmp	.+98     	; 0x852a <collision_detect_boundries+0x8a>
    84c8:	20 e0       	ldi	r18, 0x00	; 0
    84ca:	30 e0       	ldi	r19, 0x00	; 0
    84cc:	40 ee       	ldi	r20, 0xE0	; 224
    84ce:	50 e4       	ldi	r21, 0x40	; 64
    84d0:	c7 01       	movw	r24, r14
    84d2:	b6 01       	movw	r22, r12
    84d4:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    84d8:	20 e0       	ldi	r18, 0x00	; 0
    84da:	30 e0       	ldi	r19, 0x00	; 0
    84dc:	40 e7       	ldi	r20, 0x70	; 112
    84de:	53 e4       	ldi	r21, 0x43	; 67
    84e0:	0e 94 5f 4f 	call	0x9ebe	; 0x9ebe <__gesf2>
    84e4:	18 16       	cp	r1, r24
    84e6:	0c f1       	brlt	.+66     	; 0x852a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    84e8:	ce 80       	ldd	r12, Y+6	; 0x06
    84ea:	df 80       	ldd	r13, Y+7	; 0x07
    84ec:	e8 84       	ldd	r14, Y+8	; 0x08
    84ee:	f9 84       	ldd	r15, Y+9	; 0x09
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    84f0:	20 e0       	ldi	r18, 0x00	; 0
    84f2:	30 e0       	ldi	r19, 0x00	; 0
    84f4:	40 ec       	ldi	r20, 0xC0	; 192
    84f6:	51 e4       	ldi	r21, 0x41	; 65
    84f8:	c7 01       	movw	r24, r14
    84fa:	b6 01       	movw	r22, r12
    84fc:	0e 94 15 4e 	call	0x9c2a	; 0x9c2a <__cmpsf2>
    8500:	87 fd       	sbrc	r24, 7
    8502:	13 c0       	rjmp	.+38     	; 0x852a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    8504:	20 e0       	ldi	r18, 0x00	; 0
    8506:	30 e0       	ldi	r19, 0x00	; 0
    8508:	40 ee       	ldi	r20, 0xE0	; 224
    850a:	50 e4       	ldi	r21, 0x40	; 64
    850c:	c7 01       	movw	r24, r14
    850e:	b6 01       	movw	r22, r12
    8510:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    8514:	c1 e0       	ldi	r28, 0x01	; 1
    8516:	20 e0       	ldi	r18, 0x00	; 0
    8518:	30 e0       	ldi	r19, 0x00	; 0
    851a:	40 e6       	ldi	r20, 0x60	; 96
    851c:	53 e4       	ldi	r21, 0x43	; 67
    851e:	0e 94 5f 4f 	call	0x9ebe	; 0x9ebe <__gesf2>
    8522:	18 16       	cp	r1, r24
    8524:	1c f0       	brlt	.+6      	; 0x852c <collision_detect_boundries+0x8c>
    8526:	c0 e0       	ldi	r28, 0x00	; 0
    8528:	01 c0       	rjmp	.+2      	; 0x852c <collision_detect_boundries+0x8c>
	{
		return 1;
    852a:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    852c:	8c 2f       	mov	r24, r28
    852e:	df 91       	pop	r29
    8530:	cf 91       	pop	r28
    8532:	ff 90       	pop	r15
    8534:	ef 90       	pop	r14
    8536:	df 90       	pop	r13
    8538:	cf 90       	pop	r12
    853a:	08 95       	ret

0000853c <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    853c:	ff 92       	push	r15
    853e:	0f 93       	push	r16
    8540:	1f 93       	push	r17
    8542:	cf 93       	push	r28
    8544:	df 93       	push	r29
    8546:	8c 01       	movw	r16, r24
    8548:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    854a:	20 e0       	ldi	r18, 0x00	; 0
    854c:	30 e0       	ldi	r19, 0x00	; 0
    854e:	40 e0       	ldi	r20, 0x00	; 0
    8550:	5e e3       	ldi	r21, 0x3E	; 62
    8552:	fc 01       	movw	r30, r24
    8554:	66 81       	ldd	r22, Z+6	; 0x06
    8556:	77 81       	ldd	r23, Z+7	; 0x07
    8558:	80 85       	ldd	r24, Z+8	; 0x08
    855a:	91 85       	ldd	r25, Z+9	; 0x09
    855c:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    8560:	20 e0       	ldi	r18, 0x00	; 0
    8562:	30 e0       	ldi	r19, 0x00	; 0
    8564:	40 e4       	ldi	r20, 0x40	; 64
    8566:	50 e4       	ldi	r21, 0x40	; 64
    8568:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    856c:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    8570:	fe e1       	ldi	r31, 0x1E	; 30
    8572:	6f 9f       	mul	r22, r31
    8574:	e0 01       	movw	r28, r0
    8576:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    8578:	20 e0       	ldi	r18, 0x00	; 0
    857a:	30 e0       	ldi	r19, 0x00	; 0
    857c:	40 e0       	ldi	r20, 0x00	; 0
    857e:	5e e3       	ldi	r21, 0x3E	; 62
    8580:	f8 01       	movw	r30, r16
    8582:	62 81       	ldd	r22, Z+2	; 0x02
    8584:	73 81       	ldd	r23, Z+3	; 0x03
    8586:	84 81       	ldd	r24, Z+4	; 0x04
    8588:	95 81       	ldd	r25, Z+5	; 0x05
    858a:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    858e:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    8592:	c6 0f       	add	r28, r22
    8594:	d1 1d       	adc	r29, r1

	if (player->has_over_speed)
    8596:	f8 01       	movw	r30, r16
    8598:	81 8d       	ldd	r24, Z+25	; 0x19
    859a:	88 23       	and	r24, r24
    859c:	c9 f0       	breq	.+50     	; 0x85d0 <kill_player+0x94>
	{
		SetTile(hud_x+10, 1, 0);
    859e:	40 e0       	ldi	r20, 0x00	; 0
    85a0:	50 e0       	ldi	r21, 0x00	; 0
    85a2:	61 e0       	ldi	r22, 0x01	; 1
    85a4:	8a e0       	ldi	r24, 0x0A	; 10
    85a6:	8f 0d       	add	r24, r15
    85a8:	0e 94 bc 2c 	call	0x5978	; 0x5978 <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    85ac:	ce 01       	movw	r24, r28
    85ae:	6e e1       	ldi	r22, 0x1E	; 30
    85b0:	70 e0       	ldi	r23, 0x00	; 0
    85b2:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    85b6:	6c 5f       	subi	r22, 0xFC	; 252
    85b8:	40 e0       	ldi	r20, 0x00	; 0
    85ba:	51 e2       	ldi	r21, 0x21	; 33
    85bc:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    85c0:	87 e0       	ldi	r24, 0x07	; 7
    85c2:	fe 01       	movw	r30, r28
    85c4:	e0 56       	subi	r30, 0x60	; 96
    85c6:	f5 4f       	sbci	r31, 0xF5	; 245
    85c8:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    85ca:	82 e3       	ldi	r24, 0x32	; 50
    85cc:	f8 01       	movw	r30, r16
    85ce:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (player->has_rocket)
    85d0:	f8 01       	movw	r30, r16
    85d2:	80 8d       	ldd	r24, Z+24	; 0x18
    85d4:	88 23       	and	r24, r24
    85d6:	b1 f0       	breq	.+44     	; 0x8604 <kill_player+0xc8>
	{
		SetTile(hud_x+11, 1, 0);
    85d8:	40 e0       	ldi	r20, 0x00	; 0
    85da:	50 e0       	ldi	r21, 0x00	; 0
    85dc:	61 e0       	ldi	r22, 0x01	; 1
    85de:	8b e0       	ldi	r24, 0x0B	; 11
    85e0:	8f 0d       	add	r24, r15
    85e2:	0e 94 bc 2c 	call	0x5978	; 0x5978 <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    85e6:	ce 01       	movw	r24, r28
    85e8:	6e e1       	ldi	r22, 0x1E	; 30
    85ea:	70 e0       	ldi	r23, 0x00	; 0
    85ec:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    85f0:	6c 5f       	subi	r22, 0xFC	; 252
    85f2:	4a ef       	ldi	r20, 0xFA	; 250
    85f4:	50 e2       	ldi	r21, 0x20	; 32
    85f6:	8f 5f       	subi	r24, 0xFF	; 255
    85f8:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    85fc:	c0 56       	subi	r28, 0x60	; 96
    85fe:	d5 4f       	sbci	r29, 0xF5	; 245
    8600:	89 e0       	ldi	r24, 0x09	; 9
    8602:	88 a3       	std	Y+32, r24	; 0x20
	}
	player->has_over_speed = false;
    8604:	f8 01       	movw	r30, r16
    8606:	11 8e       	std	Z+25, r1	; 0x19
	player->has_rocket = false;
    8608:	10 8e       	std	Z+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    860a:	83 89       	ldd	r24, Z+19	; 0x13
    860c:	81 60       	ori	r24, 0x01	; 1
    860e:	83 8b       	std	Z+19, r24	; 0x13
}
    8610:	df 91       	pop	r29
    8612:	cf 91       	pop	r28
    8614:	1f 91       	pop	r17
    8616:	0f 91       	pop	r16
    8618:	ff 90       	pop	r15
    861a:	08 95       	ret

0000861c <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    861c:	fc 01       	movw	r30, r24
    861e:	8e e1       	ldi	r24, 0x1E	; 30
    8620:	48 9f       	mul	r20, r24
    8622:	a0 01       	movw	r20, r0
    8624:	11 24       	eor	r1, r1
    8626:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    8628:	64 0f       	add	r22, r20
    862a:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    862c:	21 11       	cpse	r18, r1
    862e:	05 c0       	rjmp	.+10     	; 0x863a <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    8630:	71 83       	std	Z+1, r23	; 0x01
    8632:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    8634:	6f 5f       	subi	r22, 0xFF	; 255
    8636:	7f 4f       	sbci	r23, 0xFF	; 255
    8638:	12 c0       	rjmp	.+36     	; 0x865e <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    863a:	21 30       	cpi	r18, 0x01	; 1
    863c:	19 f4       	brne	.+6      	; 0x8644 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    863e:	cb 01       	movw	r24, r22
    8640:	01 96       	adiw	r24, 0x01	; 1
    8642:	04 c0       	rjmp	.+8      	; 0x864c <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    8644:	22 30       	cpi	r18, 0x02	; 2
    8646:	39 f4       	brne	.+14     	; 0x8656 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    8648:	cb 01       	movw	r24, r22
    864a:	4e 96       	adiw	r24, 0x1e	; 30
    864c:	91 83       	std	Z+1, r25	; 0x01
    864e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    8650:	61 5e       	subi	r22, 0xE1	; 225
    8652:	7f 4f       	sbci	r23, 0xFF	; 255
    8654:	04 c0       	rjmp	.+8      	; 0x865e <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    8656:	71 83       	std	Z+1, r23	; 0x01
    8658:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    865a:	62 5e       	subi	r22, 0xE2	; 226
    865c:	7f 4f       	sbci	r23, 0xFF	; 255
    865e:	73 83       	std	Z+3, r23	; 0x03
    8660:	62 83       	std	Z+2, r22	; 0x02
    8662:	08 95       	ret

00008664 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    8664:	ef 92       	push	r14
    8666:	ff 92       	push	r15
    8668:	0f 93       	push	r16
    866a:	1f 93       	push	r17
    866c:	cf 93       	push	r28
    866e:	df 93       	push	r29
    8670:	ec 01       	movw	r28, r24
    8672:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    8674:	8e e1       	ldi	r24, 0x1E	; 30
    8676:	e8 2e       	mov	r14, r24
    8678:	f1 2c       	mov	r15, r1
    867a:	cb 01       	movw	r24, r22
    867c:	b7 01       	movw	r22, r14
    867e:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    8682:	6d 5f       	subi	r22, 0xFD	; 253
    8684:	40 e0       	ldi	r20, 0x00	; 0
    8686:	50 e0       	ldi	r21, 0x00	; 0
    8688:	0e 94 bc 2c 	call	0x5978	; 0x5978 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    868c:	88 81       	ld	r24, Y
    868e:	fe 01       	movw	r30, r28
    8690:	9c e0       	ldi	r25, 0x0C	; 12
    8692:	89 9f       	mul	r24, r25
    8694:	e0 0d       	add	r30, r0
    8696:	f1 1d       	adc	r31, r1
    8698:	11 24       	eor	r1, r1
    869a:	83 85       	ldd	r24, Z+11	; 0x0b
    869c:	94 85       	ldd	r25, Z+12	; 0x0c
    869e:	00 97       	sbiw	r24, 0x00	; 0
    86a0:	41 f0       	breq	.+16     	; 0x86b2 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    86a2:	b7 01       	movw	r22, r14
    86a4:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    86a8:	6d 5f       	subi	r22, 0xFD	; 253
    86aa:	40 e0       	ldi	r20, 0x00	; 0
    86ac:	50 e0       	ldi	r21, 0x00	; 0
    86ae:	0e 94 bc 2c 	call	0x5978	; 0x5978 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    86b2:	88 81       	ld	r24, Y
    86b4:	fe 01       	movw	r30, r28
    86b6:	9c e0       	ldi	r25, 0x0C	; 12
    86b8:	89 9f       	mul	r24, r25
    86ba:	e0 0d       	add	r30, r0
    86bc:	f1 1d       	adc	r31, r1
    86be:	11 24       	eor	r1, r1
    86c0:	14 87       	std	Z+12, r17	; 0x0c
    86c2:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    86c4:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    86c6:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    86c8:	82 30       	cpi	r24, 0x02	; 2
    86ca:	11 f0       	breq	.+4      	; 0x86d0 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    86cc:	88 83       	st	Y, r24
    86ce:	01 c0       	rjmp	.+2      	; 0x86d2 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    86d0:	18 82       	st	Y, r1
	}
}
    86d2:	df 91       	pop	r29
    86d4:	cf 91       	pop	r28
    86d6:	1f 91       	pop	r17
    86d8:	0f 91       	pop	r16
    86da:	ff 90       	pop	r15
    86dc:	ef 90       	pop	r14
    86de:	08 95       	ret

000086e0 <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    86e0:	6f 92       	push	r6
    86e2:	7f 92       	push	r7
    86e4:	8f 92       	push	r8
    86e6:	9f 92       	push	r9
    86e8:	af 92       	push	r10
    86ea:	bf 92       	push	r11
    86ec:	cf 92       	push	r12
    86ee:	df 92       	push	r13
    86f0:	ef 92       	push	r14
    86f2:	ff 92       	push	r15
    86f4:	0f 93       	push	r16
    86f6:	1f 93       	push	r17
    86f8:	cf 93       	push	r28
    86fa:	df 93       	push	r29
    86fc:	00 d0       	rcall	.+0      	; 0x86fe <collision_detect_shot+0x1e>
    86fe:	00 d0       	rcall	.+0      	; 0x8700 <collision_detect_shot+0x20>
    8700:	1f 92       	push	r1
    8702:	cd b7       	in	r28, 0x3d	; 61
    8704:	de b7       	in	r29, 0x3e	; 62
    8706:	6c 01       	movw	r12, r24
    8708:	7b 01       	movw	r14, r22
	int tiles[2] = {0, 0};
    870a:	1a 82       	std	Y+2, r1	; 0x02
    870c:	19 82       	std	Y+1, r1	; 0x01
    870e:	1c 82       	std	Y+4, r1	; 0x04
    8710:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    8712:	20 e0       	ldi	r18, 0x00	; 0
    8714:	30 e0       	ldi	r19, 0x00	; 0
    8716:	40 e0       	ldi	r20, 0x00	; 0
    8718:	5e e3       	ldi	r21, 0x3E	; 62
    871a:	fb 01       	movw	r30, r22
    871c:	66 81       	ldd	r22, Z+6	; 0x06
    871e:	77 81       	ldd	r23, Z+7	; 0x07
    8720:	80 85       	ldd	r24, Z+8	; 0x08
    8722:	91 85       	ldd	r25, Z+9	; 0x09
    8724:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    8728:	20 e0       	ldi	r18, 0x00	; 0
    872a:	30 e0       	ldi	r19, 0x00	; 0
    872c:	40 e4       	ldi	r20, 0x40	; 64
    872e:	50 e4       	ldi	r21, 0x40	; 64
    8730:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    8734:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    8738:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    873a:	20 e0       	ldi	r18, 0x00	; 0
    873c:	30 e0       	ldi	r19, 0x00	; 0
    873e:	40 e0       	ldi	r20, 0x00	; 0
    8740:	5e e3       	ldi	r21, 0x3E	; 62
    8742:	f7 01       	movw	r30, r14
    8744:	62 81       	ldd	r22, Z+2	; 0x02
    8746:	73 81       	ldd	r23, Z+3	; 0x03
    8748:	84 81       	ldd	r24, Z+4	; 0x04
    874a:	95 81       	ldd	r25, Z+5	; 0x05
    874c:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    8750:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
	u8 y = shot->shared.y / 8 - 3;
	u8 tile;
	u8 hud_x;
	Player* p = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    8754:	f7 01       	movw	r30, r14
    8756:	20 81       	ld	r18, Z
    8758:	41 2f       	mov	r20, r17
    875a:	ce 01       	movw	r24, r28
    875c:	01 96       	adiw	r24, 0x01	; 1
    875e:	0e 94 0e 43 	call	0x861c	; 0x861c <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    8762:	c7 01       	movw	r24, r14
    8764:	0e 94 50 42 	call	0x84a0	; 0x84a0 <collision_detect_boundries>
    8768:	88 23       	and	r24, r24
    876a:	51 f0       	breq	.+20     	; 0x8780 <collision_detect_shot+0xa0>
	{
		init_shot_state(shot, shot->shot_type);
    876c:	f7 01       	movw	r30, r14
    876e:	62 85       	ldd	r22, Z+10	; 0x0a
    8770:	c7 01       	movw	r24, r14
    8772:	0e 94 df 3c 	call	0x79be	; 0x79be <init_shot_state>
		player->active_shots--;
    8776:	f6 01       	movw	r30, r12
    8778:	80 89       	ldd	r24, Z+16	; 0x10
    877a:	81 50       	subi	r24, 0x01	; 1
    877c:	80 8b       	std	Z+16, r24	; 0x10
		return;
    877e:	e4 c0       	rjmp	.+456    	; 0x8948 <collision_detect_shot+0x268>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
    8780:	b7 01       	movw	r22, r14
    8782:	8e e1       	ldi	r24, 0x1E	; 30
    8784:	9a e0       	ldi	r25, 0x0A	; 10
    8786:	0e 94 0e 42 	call	0x841c	; 0x841c <player_shot>
    878a:	88 23       	and	r24, r24
    878c:	99 f0       	breq	.+38     	; 0x87b4 <collision_detect_shot+0xd4>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    878e:	80 91 9e 0d 	lds	r24, 0x0D9E
    8792:	8f 5f       	subi	r24, 0xFF	; 255
    8794:	80 93 9e 0d 	sts	0x0D9E, r24
		player2.score++;
    8798:	80 91 9d 0d 	lds	r24, 0x0D9D
    879c:	8f 5f       	subi	r24, 0xFF	; 255
    879e:	80 93 9d 0d 	sts	0x0D9D, r24
		render_score(&player2, 15);
    87a2:	6f e0       	ldi	r22, 0x0F	; 15
    87a4:	8f e8       	ldi	r24, 0x8F	; 143
    87a6:	9d e0       	ldi	r25, 0x0D	; 13
    87a8:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
	{
		p = &player1;
    87ac:	0e e1       	ldi	r16, 0x1E	; 30
    87ae:	1a e0       	ldi	r17, 0x0A	; 10
		hud_x = 0;
    87b0:	b1 2c       	mov	r11, r1
    87b2:	20 c0       	rjmp	.+64     	; 0x87f4 <collision_detect_shot+0x114>
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
    87b4:	b7 01       	movw	r22, r14
    87b6:	8f e8       	ldi	r24, 0x8F	; 143
    87b8:	9d e0       	ldi	r25, 0x0D	; 13
    87ba:	0e 94 0e 42 	call	0x841c	; 0x841c <player_shot>
    87be:	81 11       	cpse	r24, r1
    87c0:	06 c0       	rjmp	.+12     	; 0x87ce <collision_detect_shot+0xee>
    87c2:	ce 01       	movw	r24, r28
    87c4:	01 96       	adiw	r24, 0x01	; 1
    87c6:	3c 01       	movw	r6, r24
    87c8:	a1 2c       	mov	r10, r1
    87ca:	b1 2c       	mov	r11, r1
    87cc:	48 c0       	rjmp	.+144    	; 0x885e <collision_detect_shot+0x17e>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    87ce:	80 91 2d 0a 	lds	r24, 0x0A2D
    87d2:	8f 5f       	subi	r24, 0xFF	; 255
    87d4:	80 93 2d 0a 	sts	0x0A2D, r24
		player1.score++;
    87d8:	80 91 2c 0a 	lds	r24, 0x0A2C
    87dc:	8f 5f       	subi	r24, 0xFF	; 255
    87de:	80 93 2c 0a 	sts	0x0A2C, r24
		render_score(&player1, 0);
    87e2:	60 e0       	ldi	r22, 0x00	; 0
    87e4:	8e e1       	ldi	r24, 0x1E	; 30
    87e6:	9a e0       	ldi	r25, 0x0A	; 10
    87e8:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
	{
		p = &player2;
    87ec:	0f e8       	ldi	r16, 0x8F	; 143
    87ee:	1d e0       	ldi	r17, 0x0D	; 13
		hud_x = 15;
    87f0:	2f e0       	ldi	r18, 0x0F	; 15
    87f2:	b2 2e       	mov	r11, r18
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    87f4:	01 15       	cp	r16, r1
    87f6:	11 05       	cpc	r17, r1
    87f8:	21 f3       	breq	.-56     	; 0x87c2 <collision_detect_shot+0xe2>
	{
		init_shot_state(shot, shot->shot_type);
    87fa:	f7 01       	movw	r30, r14
    87fc:	62 85       	ldd	r22, Z+10	; 0x0a
    87fe:	c7 01       	movw	r24, r14
    8800:	0e 94 df 3c 	call	0x79be	; 0x79be <init_shot_state>
		player->active_shots--;
    8804:	f6 01       	movw	r30, r12
    8806:	80 89       	ldd	r24, Z+16	; 0x10
    8808:	81 50       	subi	r24, 0x01	; 1
    880a:	80 8b       	std	Z+16, r24	; 0x10
		kill_player(p, hud_x);
    880c:	6b 2d       	mov	r22, r11
    880e:	c8 01       	movw	r24, r16
    8810:	0e 94 9e 42 	call	0x853c	; 0x853c <kill_player>
		SFX_TANK_EXPLODE;
    8814:	2f ef       	ldi	r18, 0xFF	; 255
    8816:	47 e1       	ldi	r20, 0x17	; 23
    8818:	6a e0       	ldi	r22, 0x0A	; 10
    881a:	93 c0       	rjmp	.+294    	; 0x8942 <collision_detect_shot+0x262>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
			SFX_METAL;
			break;
		}
		else if (tile == L_BRICK)
    881c:	11 30       	cpi	r17, 0x01	; 1
    881e:	81 f1       	breq	.+96     	; 0x8880 <collision_detect_shot+0x1a0>
				player->active_shots--;
			}
			SFX_BRICK_EXPLODE;
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
    8820:	f7 01       	movw	r30, r14
    8822:	66 81       	ldd	r22, Z+6	; 0x06
    8824:	77 81       	ldd	r23, Z+7	; 0x07
    8826:	80 85       	ldd	r24, Z+8	; 0x08
    8828:	91 85       	ldd	r25, Z+9	; 0x09
    882a:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    882e:	46 2f       	mov	r20, r22
    8830:	f7 01       	movw	r30, r14
    8832:	62 81       	ldd	r22, Z+2	; 0x02
    8834:	73 81       	ldd	r23, Z+3	; 0x03
    8836:	84 81       	ldd	r24, Z+4	; 0x04
    8838:	95 81       	ldd	r25, Z+5	; 0x05
    883a:	4d 83       	std	Y+5, r20	; 0x05
    883c:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    8840:	07 e0       	ldi	r16, 0x07	; 7
    8842:	27 e0       	ldi	r18, 0x07	; 7
    8844:	4d 81       	ldd	r20, Y+5	; 0x05
    8846:	c4 01       	movw	r24, r8
    8848:	0e 94 67 41 	call	0x82ce	; 0x82ce <solid_directional_tile>
    884c:	81 11       	cpse	r24, r1
    884e:	40 c0       	rjmp	.+128    	; 0x88d0 <collision_detect_shot+0x1f0>
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    8850:	aa 94       	dec	r10
    8852:	ab 28       	or	r10, r11
    8854:	09 f4       	brne	.+2      	; 0x8858 <collision_detect_shot+0x178>
    8856:	78 c0       	rjmp	.+240    	; 0x8948 <collision_detect_shot+0x268>
    8858:	aa 24       	eor	r10, r10
    885a:	a3 94       	inc	r10
    885c:	b1 2c       	mov	r11, r1
	{
		tile = level.level_map[tiles[i]];
    885e:	f3 01       	movw	r30, r6
    8860:	81 90       	ld	r8, Z+
    8862:	91 90       	ld	r9, Z+
    8864:	3f 01       	movw	r6, r30
    8866:	f4 01       	movw	r30, r8
    8868:	e0 56       	subi	r30, 0x60	; 96
    886a:	f5 4f       	sbci	r31, 0xF5	; 245
    886c:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    886e:	11 23       	and	r17, r17
    8870:	79 f3       	breq	.-34     	; 0x8850 <collision_detect_shot+0x170>
		if (tile == L_METAL)
    8872:	12 30       	cpi	r17, 0x02	; 2
    8874:	99 f6       	brne	.-90     	; 0x881c <collision_detect_shot+0x13c>
		{
			recoil_sprite(&shot->shared);
    8876:	c7 01       	movw	r24, r14
    8878:	0e 94 ef 40 	call	0x81de	; 0x81de <recoil_sprite>
			init_shot_state(shot, shot->shot_type);
    887c:	f7 01       	movw	r30, r14
    887e:	56 c0       	rjmp	.+172    	; 0x892c <collision_detect_shot+0x24c>
			SFX_METAL;
			break;
		}
		else if (tile == L_BRICK)
		{
			explode_tile(&tile_animations, tiles[i]);
    8880:	b4 01       	movw	r22, r8
    8882:	85 e0       	ldi	r24, 0x05	; 5
    8884:	9a e0       	ldi	r25, 0x0A	; 10
    8886:	0e 94 32 43 	call	0x8664	; 0x8664 <explode_tile>
			recoil_sprite(&shot->shared);
    888a:	c7 01       	movw	r24, r14
    888c:	0e 94 ef 40 	call	0x81de	; 0x81de <recoil_sprite>
			level.level_map[tiles[i]] = L_EMPTY;
    8890:	aa 0c       	add	r10, r10
    8892:	bb 1c       	adc	r11, r11
    8894:	e1 e0       	ldi	r30, 0x01	; 1
    8896:	f0 e0       	ldi	r31, 0x00	; 0
    8898:	ec 0f       	add	r30, r28
    889a:	fd 1f       	adc	r31, r29
    889c:	ea 0d       	add	r30, r10
    889e:	fb 1d       	adc	r31, r11
    88a0:	01 90       	ld	r0, Z+
    88a2:	f0 81       	ld	r31, Z
    88a4:	e0 2d       	mov	r30, r0
    88a6:	e0 56       	subi	r30, 0x60	; 96
    88a8:	f5 4f       	sbci	r31, 0xF5	; 245
    88aa:	11 82       	std	Z+1, r1	; 0x01
			shot->hit_count--;
    88ac:	f7 01       	movw	r30, r14
    88ae:	83 85       	ldd	r24, Z+11	; 0x0b
    88b0:	81 50       	subi	r24, 0x01	; 1
    88b2:	83 87       	std	Z+11, r24	; 0x0b
			if (shot->hit_count <= 0)
    88b4:	81 11       	cpse	r24, r1
    88b6:	08 c0       	rjmp	.+16     	; 0x88c8 <collision_detect_shot+0x1e8>
			{
				init_shot_state(shot, shot->shot_type);
    88b8:	62 85       	ldd	r22, Z+10	; 0x0a
    88ba:	c7 01       	movw	r24, r14
    88bc:	0e 94 df 3c 	call	0x79be	; 0x79be <init_shot_state>
				player->active_shots--;
    88c0:	f6 01       	movw	r30, r12
    88c2:	80 89       	ldd	r24, Z+16	; 0x10
    88c4:	81 50       	subi	r24, 0x01	; 1
    88c6:	80 8b       	std	Z+16, r24	; 0x10
			}
			SFX_BRICK_EXPLODE;
    88c8:	2f ef       	ldi	r18, 0xFF	; 255
    88ca:	47 e1       	ldi	r20, 0x17	; 23
    88cc:	61 e0       	ldi	r22, 0x01	; 1
    88ce:	39 c0       	rjmp	.+114    	; 0x8942 <collision_detect_shot+0x262>
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
		{
			recoil_sprite(&shot->shared);
    88d0:	c7 01       	movw	r24, r14
    88d2:	0e 94 ef 40 	call	0x81de	; 0x81de <recoil_sprite>
			switch (tile)
    88d6:	14 30       	cpi	r17, 0x04	; 4
    88d8:	79 f0       	breq	.+30     	; 0x88f8 <collision_detect_shot+0x218>
    88da:	18 f4       	brcc	.+6      	; 0x88e2 <collision_detect_shot+0x202>
    88dc:	13 30       	cpi	r17, 0x03	; 3
    88de:	31 f0       	breq	.+12     	; 0x88ec <collision_detect_shot+0x20c>
    88e0:	1f c0       	rjmp	.+62     	; 0x8920 <collision_detect_shot+0x240>
    88e2:	15 30       	cpi	r17, 0x05	; 5
    88e4:	b9 f0       	breq	.+46     	; 0x8914 <collision_detect_shot+0x234>
    88e6:	16 30       	cpi	r17, 0x06	; 6
    88e8:	79 f0       	breq	.+30     	; 0x8908 <collision_detect_shot+0x228>
    88ea:	1a c0       	rjmp	.+52     	; 0x8920 <collision_detect_shot+0x240>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    88ec:	f7 01       	movw	r30, r14
    88ee:	80 81       	ld	r24, Z
    88f0:	81 11       	cpse	r24, r1
    88f2:	06 c0       	rjmp	.+12     	; 0x8900 <collision_detect_shot+0x220>
						shot->shared.direction = D_RIGHT;
    88f4:	81 e0       	ldi	r24, 0x01	; 1
    88f6:	05 c0       	rjmp	.+10     	; 0x8902 <collision_detect_shot+0x222>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    88f8:	f7 01       	movw	r30, r14
    88fa:	80 81       	ld	r24, Z
    88fc:	88 23       	and	r24, r24
    88fe:	41 f0       	breq	.+16     	; 0x8910 <collision_detect_shot+0x230>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    8900:	82 e0       	ldi	r24, 0x02	; 2
    8902:	f7 01       	movw	r30, r14
    8904:	80 83       	st	Z, r24
    8906:	0c c0       	rjmp	.+24     	; 0x8920 <collision_detect_shot+0x240>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    8908:	f7 01       	movw	r30, r14
    890a:	80 81       	ld	r24, Z
    890c:	82 30       	cpi	r24, 0x02	; 2
    890e:	31 f4       	brne	.+12     	; 0x891c <collision_detect_shot+0x23c>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    8910:	83 e0       	ldi	r24, 0x03	; 3
    8912:	f7 cf       	rjmp	.-18     	; 0x8902 <collision_detect_shot+0x222>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    8914:	f7 01       	movw	r30, r14
    8916:	80 81       	ld	r24, Z
    8918:	82 30       	cpi	r24, 0x02	; 2
    891a:	61 f3       	breq	.-40     	; 0x88f4 <collision_detect_shot+0x214>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    891c:	f7 01       	movw	r30, r14
    891e:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    8920:	f7 01       	movw	r30, r14
    8922:	84 85       	ldd	r24, Z+12	; 0x0c
    8924:	81 50       	subi	r24, 0x01	; 1
    8926:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->rebounds <= 0)
    8928:	81 11       	cpse	r24, r1
    892a:	08 c0       	rjmp	.+16     	; 0x893c <collision_detect_shot+0x25c>
			{
				init_shot_state(shot, shot->shot_type);
    892c:	62 85       	ldd	r22, Z+10	; 0x0a
    892e:	c7 01       	movw	r24, r14
    8930:	0e 94 df 3c 	call	0x79be	; 0x79be <init_shot_state>
				player->active_shots--;
    8934:	f6 01       	movw	r30, r12
    8936:	80 89       	ldd	r24, Z+16	; 0x10
    8938:	81 50       	subi	r24, 0x01	; 1
    893a:	80 8b       	std	Z+16, r24	; 0x10
			}
			SFX_METAL;
    893c:	2f ef       	ldi	r18, 0xFF	; 255
    893e:	47 e1       	ldi	r20, 0x17	; 23
    8940:	66 e0       	ldi	r22, 0x06	; 6
    8942:	84 e0       	ldi	r24, 0x04	; 4
    8944:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TriggerNote>
			break;
		}
	}
}
    8948:	0f 90       	pop	r0
    894a:	0f 90       	pop	r0
    894c:	0f 90       	pop	r0
    894e:	0f 90       	pop	r0
    8950:	0f 90       	pop	r0
    8952:	df 91       	pop	r29
    8954:	cf 91       	pop	r28
    8956:	1f 91       	pop	r17
    8958:	0f 91       	pop	r16
    895a:	ff 90       	pop	r15
    895c:	ef 90       	pop	r14
    895e:	df 90       	pop	r13
    8960:	cf 90       	pop	r12
    8962:	bf 90       	pop	r11
    8964:	af 90       	pop	r10
    8966:	9f 90       	pop	r9
    8968:	8f 90       	pop	r8
    896a:	7f 90       	pop	r7
    896c:	6f 90       	pop	r6
    896e:	08 95       	ret

00008970 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    8970:	fc 01       	movw	r30, r24
    8972:	8e e1       	ldi	r24, 0x1E	; 30
    8974:	48 9f       	mul	r20, r24
    8976:	a0 01       	movw	r20, r0
    8978:	11 24       	eor	r1, r1
    897a:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    897c:	64 0f       	add	r22, r20
    897e:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    8980:	21 11       	cpse	r18, r1
    8982:	09 c0       	rjmp	.+18     	; 0x8996 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    8984:	71 83       	std	Z+1, r23	; 0x01
    8986:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    8988:	cb 01       	movw	r24, r22
    898a:	01 96       	adiw	r24, 0x01	; 1
    898c:	93 83       	std	Z+3, r25	; 0x03
    898e:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    8990:	6e 5f       	subi	r22, 0xFE	; 254
    8992:	7f 4f       	sbci	r23, 0xFF	; 255
    8994:	1c c0       	rjmp	.+56     	; 0x89ce <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    8996:	21 30       	cpi	r18, 0x01	; 1
    8998:	31 f4       	brne	.+12     	; 0x89a6 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    899a:	cb 01       	movw	r24, r22
    899c:	02 96       	adiw	r24, 0x02	; 2
    899e:	91 83       	std	Z+1, r25	; 0x01
    89a0:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    89a2:	4e 96       	adiw	r24, 0x1e	; 30
    89a4:	07 c0       	rjmp	.+14     	; 0x89b4 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    89a6:	22 30       	cpi	r18, 0x02	; 2
    89a8:	51 f4       	brne	.+20     	; 0x89be <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    89aa:	cb 01       	movw	r24, r22
    89ac:	cc 96       	adiw	r24, 0x3c	; 60
    89ae:	91 83       	std	Z+1, r25	; 0x01
    89b0:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    89b2:	01 96       	adiw	r24, 0x01	; 1
    89b4:	93 83       	std	Z+3, r25	; 0x03
    89b6:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    89b8:	62 5c       	subi	r22, 0xC2	; 194
    89ba:	7f 4f       	sbci	r23, 0xFF	; 255
    89bc:	08 c0       	rjmp	.+16     	; 0x89ce <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    89be:	71 83       	std	Z+1, r23	; 0x01
    89c0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    89c2:	cb 01       	movw	r24, r22
    89c4:	4e 96       	adiw	r24, 0x1e	; 30
    89c6:	93 83       	std	Z+3, r25	; 0x03
    89c8:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    89ca:	64 5c       	subi	r22, 0xC4	; 196
    89cc:	7f 4f       	sbci	r23, 0xFF	; 255
    89ce:	75 83       	std	Z+5, r23	; 0x05
    89d0:	64 83       	std	Z+4, r22	; 0x04
    89d2:	08 95       	ret

000089d4 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    89d4:	2f 92       	push	r2
    89d6:	3f 92       	push	r3
    89d8:	4f 92       	push	r4
    89da:	5f 92       	push	r5
    89dc:	6f 92       	push	r6
    89de:	7f 92       	push	r7
    89e0:	8f 92       	push	r8
    89e2:	9f 92       	push	r9
    89e4:	af 92       	push	r10
    89e6:	bf 92       	push	r11
    89e8:	cf 92       	push	r12
    89ea:	df 92       	push	r13
    89ec:	ef 92       	push	r14
    89ee:	ff 92       	push	r15
    89f0:	0f 93       	push	r16
    89f2:	1f 93       	push	r17
    89f4:	cf 93       	push	r28
    89f6:	df 93       	push	r29
    89f8:	cd b7       	in	r28, 0x3d	; 61
    89fa:	de b7       	in	r29, 0x3e	; 62
    89fc:	29 97       	sbiw	r28, 0x09	; 9
    89fe:	0f b6       	in	r0, 0x3f	; 63
    8a00:	f8 94       	cli
    8a02:	de bf       	out	0x3e, r29	; 62
    8a04:	0f be       	out	0x3f, r0	; 63
    8a06:	cd bf       	out	0x3d, r28	; 61
    8a08:	7c 01       	movw	r14, r24
    8a0a:	3b 01       	movw	r6, r22
    8a0c:	14 2f       	mov	r17, r20
    8a0e:	22 2e       	mov	r2, r18
	int tiles[3] = {0,0,0};
    8a10:	1a 82       	std	Y+2, r1	; 0x02
    8a12:	19 82       	std	Y+1, r1	; 0x01
    8a14:	1c 82       	std	Y+4, r1	; 0x04
    8a16:	1b 82       	std	Y+3, r1	; 0x03
    8a18:	1e 82       	std	Y+6, r1	; 0x06
    8a1a:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    8a1c:	20 e0       	ldi	r18, 0x00	; 0
    8a1e:	30 e0       	ldi	r19, 0x00	; 0
    8a20:	40 e0       	ldi	r20, 0x00	; 0
    8a22:	5e e3       	ldi	r21, 0x3E	; 62
    8a24:	fc 01       	movw	r30, r24
    8a26:	66 81       	ldd	r22, Z+6	; 0x06
    8a28:	77 81       	ldd	r23, Z+7	; 0x07
    8a2a:	80 85       	ldd	r24, Z+8	; 0x08
    8a2c:	91 85       	ldd	r25, Z+9	; 0x09
    8a2e:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    8a32:	20 e0       	ldi	r18, 0x00	; 0
    8a34:	30 e0       	ldi	r19, 0x00	; 0
    8a36:	40 e4       	ldi	r20, 0x40	; 64
    8a38:	50 e4       	ldi	r21, 0x40	; 64
    8a3a:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    8a3e:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    8a42:	d6 2e       	mov	r13, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    8a44:	20 e0       	ldi	r18, 0x00	; 0
    8a46:	30 e0       	ldi	r19, 0x00	; 0
    8a48:	40 e0       	ldi	r20, 0x00	; 0
    8a4a:	5e e3       	ldi	r21, 0x3E	; 62
    8a4c:	f7 01       	movw	r30, r14
    8a4e:	62 81       	ldd	r22, Z+2	; 0x02
    8a50:	73 81       	ldd	r23, Z+3	; 0x03
    8a52:	84 81       	ldd	r24, Z+4	; 0x04
    8a54:	95 81       	ldd	r25, Z+5	; 0x05
    8a56:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    8a5a:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;

	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    8a5e:	f7 01       	movw	r30, r14
    8a60:	20 81       	ld	r18, Z
    8a62:	4d 2d       	mov	r20, r13
    8a64:	ce 01       	movw	r24, r28
    8a66:	01 96       	adiw	r24, 0x01	; 1
    8a68:	0e 94 b8 44 	call	0x8970	; 0x8970 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    8a6c:	c7 01       	movw	r24, r14
    8a6e:	0e 94 50 42 	call	0x84a0	; 0x84a0 <collision_detect_boundries>
    8a72:	88 23       	and	r24, r24
    8a74:	31 f0       	breq	.+12     	; 0x8a82 <collision_detect_player+0xae>
	{
		recoil_sprite(&player->shared);
    8a76:	c7 01       	movw	r24, r14
    8a78:	0e 94 ef 40 	call	0x81de	; 0x81de <recoil_sprite>
		player->shared.speed = 0;
    8a7c:	f7 01       	movw	r30, r14
    8a7e:	11 82       	std	Z+1, r1	; 0x01
    8a80:	87 c0       	rjmp	.+270    	; 0x8b90 <collision_detect_player+0x1bc>
    8a82:	ce 01       	movw	r24, r28
    8a84:	01 96       	adiw	r24, 0x01	; 1
    8a86:	6c 01       	movw	r12, r24
    8a88:	4e 01       	movw	r8, r28
    8a8a:	97 e0       	ldi	r25, 0x07	; 7
    8a8c:	89 0e       	add	r8, r25
    8a8e:	91 1c       	adc	r9, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    8a90:	8e e1       	ldi	r24, 0x1E	; 30
    8a92:	a8 2e       	mov	r10, r24
    8a94:	b1 2c       	mov	r11, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    8a96:	33 24       	eor	r3, r3
    8a98:	33 94       	inc	r3
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    8a9a:	eb e0       	ldi	r30, 0x0B	; 11
    8a9c:	e1 0f       	add	r30, r17
    8a9e:	ef 83       	std	Y+7, r30	; 0x07
		else if (level.level_map[tiles[i]] == L_SPEED)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    8aa0:	fa e0       	ldi	r31, 0x0A	; 10
    8aa2:	f1 0f       	add	r31, r17
    8aa4:	f8 87       	std	Y+8, r31	; 0x08
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_square_tile(tiles[i]) || solid_directional_tile(tiles[i], player->shared.x, player->shared.y, 7, 14))
    8aa6:	f6 01       	movw	r30, r12
    8aa8:	40 80       	ld	r4, Z
    8aaa:	51 80       	ldd	r5, Z+1	; 0x01
    8aac:	c2 01       	movw	r24, r4
    8aae:	0e 94 59 41 	call	0x82b2	; 0x82b2 <solid_square_tile>
    8ab2:	81 11       	cpse	r24, r1
    8ab4:	18 c0       	rjmp	.+48     	; 0x8ae6 <collision_detect_player+0x112>
    8ab6:	f7 01       	movw	r30, r14
    8ab8:	66 81       	ldd	r22, Z+6	; 0x06
    8aba:	77 81       	ldd	r23, Z+7	; 0x07
    8abc:	80 85       	ldd	r24, Z+8	; 0x08
    8abe:	91 85       	ldd	r25, Z+9	; 0x09
    8ac0:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    8ac4:	46 2f       	mov	r20, r22
    8ac6:	f7 01       	movw	r30, r14
    8ac8:	62 81       	ldd	r22, Z+2	; 0x02
    8aca:	73 81       	ldd	r23, Z+3	; 0x03
    8acc:	84 81       	ldd	r24, Z+4	; 0x04
    8ace:	95 81       	ldd	r25, Z+5	; 0x05
    8ad0:	49 87       	std	Y+9, r20	; 0x09
    8ad2:	0e 94 81 4e 	call	0x9d02	; 0x9d02 <__fixunssfsi>
    8ad6:	0e e0       	ldi	r16, 0x0E	; 14
    8ad8:	27 e0       	ldi	r18, 0x07	; 7
    8ada:	49 85       	ldd	r20, Y+9	; 0x09
    8adc:	c2 01       	movw	r24, r4
    8ade:	0e 94 67 41 	call	0x82ce	; 0x82ce <solid_directional_tile>
    8ae2:	88 23       	and	r24, r24
    8ae4:	31 f0       	breq	.+12     	; 0x8af2 <collision_detect_player+0x11e>
		{
			recoil_sprite(&player->shared);
    8ae6:	c7 01       	movw	r24, r14
    8ae8:	0e 94 ef 40 	call	0x81de	; 0x81de <recoil_sprite>
			player->shared.speed = 0;
    8aec:	f7 01       	movw	r30, r14
    8aee:	11 82       	std	Z+1, r1	; 0x01
    8af0:	48 c0       	rjmp	.+144    	; 0x8b82 <collision_detect_player+0x1ae>
		}
		else if (level.level_map[tiles[i]] == L_SPEED)
    8af2:	f2 01       	movw	r30, r4
    8af4:	e0 56       	subi	r30, 0x60	; 96
    8af6:	f5 4f       	sbci	r31, 0xF5	; 245
    8af8:	81 81       	ldd	r24, Z+1	; 0x01
    8afa:	87 30       	cpi	r24, 0x07	; 7
    8afc:	51 f4       	brne	.+20     	; 0x8b12 <collision_detect_player+0x13e>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    8afe:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    8b00:	80 e5       	ldi	r24, 0x50	; 80
    8b02:	f7 01       	movw	r30, r14
    8b04:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    8b06:	31 8e       	std	Z+25, r3	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    8b08:	40 e0       	ldi	r20, 0x00	; 0
    8b0a:	51 e2       	ldi	r21, 0x21	; 33
    8b0c:	61 e0       	ldi	r22, 0x01	; 1
    8b0e:	88 85       	ldd	r24, Y+8	; 0x08
    8b10:	09 c0       	rjmp	.+18     	; 0x8b24 <collision_detect_player+0x150>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
    8b12:	89 30       	cpi	r24, 0x09	; 9
    8b14:	a9 f4       	brne	.+42     	; 0x8b40 <collision_detect_player+0x16c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    8b16:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    8b18:	f7 01       	movw	r30, r14
    8b1a:	30 8e       	std	Z+24, r3	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    8b1c:	4a ef       	ldi	r20, 0xFA	; 250
    8b1e:	50 e2       	ldi	r21, 0x20	; 32
    8b20:	61 e0       	ldi	r22, 0x01	; 1
    8b22:	8f 81       	ldd	r24, Y+7	; 0x07
    8b24:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    8b28:	f6 01       	movw	r30, r12
    8b2a:	80 81       	ld	r24, Z
    8b2c:	91 81       	ldd	r25, Z+1	; 0x01
    8b2e:	b5 01       	movw	r22, r10
    8b30:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    8b34:	6d 5f       	subi	r22, 0xFD	; 253
    8b36:	40 e0       	ldi	r20, 0x00	; 0
    8b38:	50 e0       	ldi	r21, 0x00	; 0
    8b3a:	0e 94 bc 2c 	call	0x5978	; 0x5978 <SetTile>
    8b3e:	1b c0       	rjmp	.+54     	; 0x8b76 <collision_detect_player+0x1a2>
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
    8b40:	88 30       	cpi	r24, 0x08	; 8
    8b42:	f9 f4       	brne	.+62     	; 0x8b82 <collision_detect_player+0x1ae>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    8b44:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    8b46:	c2 01       	movw	r24, r4
    8b48:	b5 01       	movw	r22, r10
    8b4a:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    8b4e:	6d 5f       	subi	r22, 0xFD	; 253
    8b50:	40 e0       	ldi	r20, 0x00	; 0
    8b52:	50 e0       	ldi	r21, 0x00	; 0
    8b54:	0e 94 bc 2c 	call	0x5978	; 0x5978 <SetTile>
			player->level_score++;
    8b58:	f7 01       	movw	r30, r14
    8b5a:	87 85       	ldd	r24, Z+15	; 0x0f
    8b5c:	8f 5f       	subi	r24, 0xFF	; 255
    8b5e:	87 87       	std	Z+15, r24	; 0x0f
			player->score++;
    8b60:	86 85       	ldd	r24, Z+14	; 0x0e
    8b62:	8f 5f       	subi	r24, 0xFF	; 255
    8b64:	86 87       	std	Z+14, r24	; 0x0e
			render_score(player, hud_x);
    8b66:	61 2f       	mov	r22, r17
    8b68:	c7 01       	movw	r24, r14
    8b6a:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <render_score>
			kill_player(other_player, other_player_hud_x);
    8b6e:	62 2d       	mov	r22, r2
    8b70:	c3 01       	movw	r24, r6
    8b72:	0e 94 9e 42 	call	0x853c	; 0x853c <kill_player>
			SFX_ITEM;
    8b76:	2f ef       	ldi	r18, 0xFF	; 255
    8b78:	47 e1       	ldi	r20, 0x17	; 23
    8b7a:	63 e0       	ldi	r22, 0x03	; 3
    8b7c:	84 e0       	ldi	r24, 0x04	; 4
    8b7e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TriggerNote>
    8b82:	f2 e0       	ldi	r31, 0x02	; 2
    8b84:	cf 0e       	add	r12, r31
    8b86:	d1 1c       	adc	r13, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    8b88:	c8 14       	cp	r12, r8
    8b8a:	d9 04       	cpc	r13, r9
    8b8c:	09 f0       	breq	.+2      	; 0x8b90 <collision_detect_player+0x1bc>
    8b8e:	8b cf       	rjmp	.-234    	; 0x8aa6 <collision_detect_player+0xd2>
			render_score(player, hud_x);
			kill_player(other_player, other_player_hud_x);
			SFX_ITEM;
		}
	}
}
    8b90:	29 96       	adiw	r28, 0x09	; 9
    8b92:	0f b6       	in	r0, 0x3f	; 63
    8b94:	f8 94       	cli
    8b96:	de bf       	out	0x3e, r29	; 62
    8b98:	0f be       	out	0x3f, r0	; 63
    8b9a:	cd bf       	out	0x3d, r28	; 61
    8b9c:	df 91       	pop	r29
    8b9e:	cf 91       	pop	r28
    8ba0:	1f 91       	pop	r17
    8ba2:	0f 91       	pop	r16
    8ba4:	ff 90       	pop	r15
    8ba6:	ef 90       	pop	r14
    8ba8:	df 90       	pop	r13
    8baa:	cf 90       	pop	r12
    8bac:	bf 90       	pop	r11
    8bae:	af 90       	pop	r10
    8bb0:	9f 90       	pop	r9
    8bb2:	8f 90       	pop	r8
    8bb4:	7f 90       	pop	r7
    8bb6:	6f 90       	pop	r6
    8bb8:	5f 90       	pop	r5
    8bba:	4f 90       	pop	r4
    8bbc:	3f 90       	pop	r3
    8bbe:	2f 90       	pop	r2
    8bc0:	08 95       	ret

00008bc2 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    8bc2:	bf 92       	push	r11
    8bc4:	cf 92       	push	r12
    8bc6:	df 92       	push	r13
    8bc8:	ef 92       	push	r14
    8bca:	ff 92       	push	r15
    8bcc:	0f 93       	push	r16
    8bce:	1f 93       	push	r17
    8bd0:	cf 93       	push	r28
    8bd2:	df 93       	push	r29
    8bd4:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    8bd6:	c0 e0       	ldi	r28, 0x00	; 0
    8bd8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    8bda:	0e e1       	ldi	r16, 0x1E	; 30
    8bdc:	10 e0       	ldi	r17, 0x00	; 0
    8bde:	ce 01       	movw	r24, r28
    8be0:	b8 01       	movw	r22, r16
    8be2:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
		y = 3 + i / 30;
    8be6:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    8be8:	bb 20       	and	r11, r11
    8bea:	19 f0       	breq	.+6      	; 0x8bf2 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    8bec:	49 e0       	ldi	r20, 0x09	; 9
    8bee:	51 e2       	ldi	r21, 0x21	; 33
    8bf0:	11 c0       	rjmp	.+34     	; 0x8c14 <load_level_tiles+0x52>
    8bf2:	fe 01       	movw	r30, r28
    8bf4:	e0 56       	subi	r30, 0x60	; 96
    8bf6:	f5 4f       	sbci	r31, 0xF5	; 245
		}
		else
		{
			switch (level.level_map[i])
    8bf8:	e1 81       	ldd	r30, Z+1	; 0x01
    8bfa:	ce 2e       	mov	r12, r30
    8bfc:	d1 2c       	mov	r13, r1
    8bfe:	f6 01       	movw	r30, r12
    8c00:	31 97       	sbiw	r30, 0x01	; 1
    8c02:	e9 30       	cpi	r30, 0x09	; 9
    8c04:	f1 05       	cpc	r31, r1
    8c06:	08 f5       	brcc	.+66     	; 0x8c4a <load_level_tiles+0x88>
    8c08:	e8 5c       	subi	r30, 0xC8	; 200
    8c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    8c0c:	0c 94 aa 4d 	jmp	0x9b54	; 0x9b54 <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    8c10:	46 e0       	ldi	r20, 0x06	; 6
    8c12:	51 e2       	ldi	r21, 0x21	; 33
    8c14:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <DrawMap2>
    8c18:	1c c0       	rjmp	.+56     	; 0x8c52 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    8c1a:	43 e0       	ldi	r20, 0x03	; 3
    8c1c:	51 e2       	ldi	r21, 0x21	; 33
    8c1e:	fa cf       	rjmp	.-12     	; 0x8c14 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    8c20:	4e ee       	ldi	r20, 0xEE	; 238
    8c22:	50 e2       	ldi	r21, 0x20	; 32
    8c24:	f7 cf       	rjmp	.-18     	; 0x8c14 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    8c26:	48 ee       	ldi	r20, 0xE8	; 232
    8c28:	50 e2       	ldi	r21, 0x20	; 32
    8c2a:	f4 cf       	rjmp	.-24     	; 0x8c14 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    8c2c:	45 ee       	ldi	r20, 0xE5	; 229
    8c2e:	50 e2       	ldi	r21, 0x20	; 32
    8c30:	f1 cf       	rjmp	.-30     	; 0x8c14 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    8c32:	4b ee       	ldi	r20, 0xEB	; 235
    8c34:	50 e2       	ldi	r21, 0x20	; 32
    8c36:	ee cf       	rjmp	.-36     	; 0x8c14 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    8c38:	40 e0       	ldi	r20, 0x00	; 0
    8c3a:	51 e2       	ldi	r21, 0x21	; 33
    8c3c:	eb cf       	rjmp	.-42     	; 0x8c14 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    8c3e:	4d ef       	ldi	r20, 0xFD	; 253
    8c40:	50 e2       	ldi	r21, 0x20	; 32
    8c42:	e8 cf       	rjmp	.-48     	; 0x8c14 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    8c44:	4a ef       	ldi	r20, 0xFA	; 250
    8c46:	50 e2       	ldi	r21, 0x20	; 32
    8c48:	e5 cf       	rjmp	.-54     	; 0x8c14 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    8c4a:	40 e0       	ldi	r20, 0x00	; 0
    8c4c:	50 e0       	ldi	r21, 0x00	; 0
    8c4e:	0e 94 bc 2c 	call	0x5978	; 0x5978 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    8c52:	21 96       	adiw	r28, 0x01	; 1
    8c54:	ce 3e       	cpi	r28, 0xEE	; 238
    8c56:	82 e0       	ldi	r24, 0x02	; 2
    8c58:	d8 07       	cpc	r29, r24
    8c5a:	09 f6       	brne	.-126    	; 0x8bde <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    8c5c:	df 91       	pop	r29
    8c5e:	cf 91       	pop	r28
    8c60:	1f 91       	pop	r17
    8c62:	0f 91       	pop	r16
    8c64:	ff 90       	pop	r15
    8c66:	ef 90       	pop	r14
    8c68:	df 90       	pop	r13
    8c6a:	cf 90       	pop	r12
    8c6c:	bf 90       	pop	r11
    8c6e:	08 95       	ret

00008c70 <load_level>:

void load_level(int level_number)
{
    8c70:	9f 92       	push	r9
    8c72:	af 92       	push	r10
    8c74:	bf 92       	push	r11
    8c76:	cf 92       	push	r12
    8c78:	df 92       	push	r13
    8c7a:	ef 92       	push	r14
    8c7c:	ff 92       	push	r15
    8c7e:	0f 93       	push	r16
    8c80:	1f 93       	push	r17
    8c82:	cf 93       	push	r28
    8c84:	df 93       	push	r29
    8c86:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    8c88:	8e ee       	ldi	r24, 0xEE	; 238
    8c8a:	92 e0       	ldi	r25, 0x02	; 2
    8c8c:	c8 9f       	mul	r28, r24
    8c8e:	70 01       	movw	r14, r0
    8c90:	c9 9f       	mul	r28, r25
    8c92:	f0 0c       	add	r15, r0
    8c94:	d8 9f       	mul	r29, r24
    8c96:	f0 0c       	add	r15, r0
    8c98:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    8c9a:	83 e0       	ldi	r24, 0x03	; 3
    8c9c:	80 93 01 0a 	sts	0x0A01, r24
	clear_sprites();
    8ca0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <clear_sprites>
	game.current_level = level_number;
    8ca4:	c0 93 02 0a 	sts	0x0A02, r28
    8ca8:	81 ea       	ldi	r24, 0xA1	; 161
    8caa:	c8 2e       	mov	r12, r24
    8cac:	8a e0       	ldi	r24, 0x0A	; 10
    8cae:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    8cb0:	c0 e0       	ldi	r28, 0x00	; 0
    8cb2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    8cb4:	0e e1       	ldi	r16, 0x1E	; 30
    8cb6:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    8cb8:	92 e3       	ldi	r25, 0x32	; 50
    8cba:	99 2e       	mov	r9, r25
    8cbc:	fe 01       	movw	r30, r28
    8cbe:	ee 0d       	add	r30, r14
    8cc0:	ff 1d       	adc	r31, r15
    8cc2:	e1 5c       	subi	r30, 0xC1	; 193
    8cc4:	fc 4f       	sbci	r31, 0xFC	; 252
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    8cc6:	e4 91       	lpm	r30, Z
    8cc8:	56 01       	movw	r10, r12
    8cca:	d6 01       	movw	r26, r12
    8ccc:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    8cce:	e8 35       	cpi	r30, 0x58	; 88
    8cd0:	01 f5       	brne	.+64     	; 0x8d12 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    8cd2:	ce 01       	movw	r24, r28
    8cd4:	b8 01       	movw	r22, r16
    8cd6:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    8cda:	88 0f       	add	r24, r24
    8cdc:	88 0f       	add	r24, r24
    8cde:	88 0f       	add	r24, r24
    8ce0:	80 93 2f 0a 	sts	0x0A2F, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    8ce4:	6d 5f       	subi	r22, 0xFD	; 253
    8ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    8ce8:	66 0f       	add	r22, r22
    8cea:	66 0f       	add	r22, r22
    8cec:	66 0f       	add	r22, r22
    8cee:	60 93 30 0a 	sts	0x0A30, r22
			player1.level_score = 0;
    8cf2:	10 92 2d 0a 	sts	0x0A2D, r1
			player1.has_over_speed = false;
    8cf6:	10 92 37 0a 	sts	0x0A37, r1
			player1.has_rocket = false;
    8cfa:	10 92 36 0a 	sts	0x0A36, r1
			player1.max_speed = MAX_SPEED;
    8cfe:	90 92 35 0a 	sts	0x0A35, r9
			player_init_shot_state(&player1);
    8d02:	8e e1       	ldi	r24, 0x1E	; 30
    8d04:	9a e0       	ldi	r25, 0x0A	; 10
    8d06:	0e 94 89 3d 	call	0x7b12	; 0x7b12 <player_init_shot_state>
			player_spawn(&player1);
    8d0a:	8e e1       	ldi	r24, 0x1E	; 30
    8d0c:	9a e0       	ldi	r25, 0x0A	; 10
    8d0e:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <player_spawn>
    8d12:	bf ef       	ldi	r27, 0xFF	; 255
    8d14:	cb 1a       	sub	r12, r27
    8d16:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    8d18:	f5 01       	movw	r30, r10
    8d1a:	80 81       	ld	r24, Z
    8d1c:	83 36       	cpi	r24, 0x63	; 99
    8d1e:	01 f5       	brne	.+64     	; 0x8d60 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    8d20:	ce 01       	movw	r24, r28
    8d22:	b8 01       	movw	r22, r16
    8d24:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    8d28:	88 0f       	add	r24, r24
    8d2a:	88 0f       	add	r24, r24
    8d2c:	88 0f       	add	r24, r24
    8d2e:	80 93 a0 0d 	sts	0x0DA0, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    8d32:	6d 5f       	subi	r22, 0xFD	; 253
    8d34:	7f 4f       	sbci	r23, 0xFF	; 255
    8d36:	66 0f       	add	r22, r22
    8d38:	66 0f       	add	r22, r22
    8d3a:	66 0f       	add	r22, r22
    8d3c:	60 93 a1 0d 	sts	0x0DA1, r22
			player2.level_score = 0;
    8d40:	10 92 9e 0d 	sts	0x0D9E, r1
			player2.has_over_speed = false;
    8d44:	10 92 a8 0d 	sts	0x0DA8, r1
			player2.has_rocket = false;
    8d48:	10 92 a7 0d 	sts	0x0DA7, r1
			player2.max_speed = MAX_SPEED;
    8d4c:	90 92 a6 0d 	sts	0x0DA6, r9
			player_init_shot_state(&player2);
    8d50:	8f e8       	ldi	r24, 0x8F	; 143
    8d52:	9d e0       	ldi	r25, 0x0D	; 13
    8d54:	0e 94 89 3d 	call	0x7b12	; 0x7b12 <player_init_shot_state>
			player_spawn(&player2);
    8d58:	8f e8       	ldi	r24, 0x8F	; 143
    8d5a:	9d e0       	ldi	r25, 0x0D	; 13
    8d5c:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    8d60:	21 96       	adiw	r28, 0x01	; 1
    8d62:	ce 3e       	cpi	r28, 0xEE	; 238
    8d64:	f2 e0       	ldi	r31, 0x02	; 2
    8d66:	df 07       	cpc	r29, r31
    8d68:	09 f0       	breq	.+2      	; 0x8d6c <load_level+0xfc>
    8d6a:	a8 cf       	rjmp	.-176    	; 0x8cbc <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    8d6c:	60 e0       	ldi	r22, 0x00	; 0
    8d6e:	8e e1       	ldi	r24, 0x1E	; 30
    8d70:	9a e0       	ldi	r25, 0x0A	; 10
    8d72:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <render_hud>
	render_hud(&player2, 15);
    8d76:	6f e0       	ldi	r22, 0x0F	; 15
    8d78:	8f e8       	ldi	r24, 0x8F	; 143
    8d7a:	9d e0       	ldi	r25, 0x0D	; 13
    8d7c:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <render_hud>
	render_score(&player1, 0);
    8d80:	60 e0       	ldi	r22, 0x00	; 0
    8d82:	8e e1       	ldi	r24, 0x1E	; 30
    8d84:	9a e0       	ldi	r25, 0x0A	; 10
    8d86:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <render_score>
	render_score(&player2, 15);
    8d8a:	6f e0       	ldi	r22, 0x0F	; 15
    8d8c:	8f e8       	ldi	r24, 0x8F	; 143
    8d8e:	9d e0       	ldi	r25, 0x0D	; 13
    8d90:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <render_score>
	Print(14, 0, strVertSep);
    8d94:	40 e7       	ldi	r20, 0x70	; 112
    8d96:	52 e0       	ldi	r21, 0x02	; 2
    8d98:	60 e0       	ldi	r22, 0x00	; 0
    8d9a:	70 e0       	ldi	r23, 0x00	; 0
    8d9c:	8e e0       	ldi	r24, 0x0E	; 14
    8d9e:	90 e0       	ldi	r25, 0x00	; 0
    8da0:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(14, 1, strVertSep);
    8da4:	40 e7       	ldi	r20, 0x70	; 112
    8da6:	52 e0       	ldi	r21, 0x02	; 2
    8da8:	61 e0       	ldi	r22, 0x01	; 1
    8daa:	70 e0       	ldi	r23, 0x00	; 0
    8dac:	8e e0       	ldi	r24, 0x0E	; 14
    8dae:	90 e0       	ldi	r25, 0x00	; 0
    8db0:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(14, 2, strVertSep);
    8db4:	40 e7       	ldi	r20, 0x70	; 112
    8db6:	52 e0       	ldi	r21, 0x02	; 2
    8db8:	62 e0       	ldi	r22, 0x02	; 2
    8dba:	70 e0       	ldi	r23, 0x00	; 0
    8dbc:	8e e0       	ldi	r24, 0x0E	; 14
    8dbe:	90 e0       	ldi	r25, 0x00	; 0
    8dc0:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	load_level_tiles(false);
    8dc4:	80 e0       	ldi	r24, 0x00	; 0
    8dc6:	0e 94 e1 45 	call	0x8bc2	; 0x8bc2 <load_level_tiles>
	SFX_LEVEL_START;
    8dca:	2f ef       	ldi	r18, 0xFF	; 255
    8dcc:	47 e1       	ldi	r20, 0x17	; 23
    8dce:	65 e0       	ldi	r22, 0x05	; 5
    8dd0:	84 e0       	ldi	r24, 0x04	; 4
}
    8dd2:	df 91       	pop	r29
    8dd4:	cf 91       	pop	r28
    8dd6:	1f 91       	pop	r17
    8dd8:	0f 91       	pop	r16
    8dda:	ff 90       	pop	r15
    8ddc:	ef 90       	pop	r14
    8dde:	df 90       	pop	r13
    8de0:	cf 90       	pop	r12
    8de2:	bf 90       	pop	r11
    8de4:	af 90       	pop	r10
    8de6:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, strVertSep);
	Print(14, 1, strVertSep);
	Print(14, 2, strVertSep);
	load_level_tiles(false);
	SFX_LEVEL_START;
    8de8:	0c 94 c2 2f 	jmp	0x5f84	; 0x5f84 <TriggerNote>

00008dec <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    8dec:	cf 93       	push	r28
    8dee:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    8df0:	61 e0       	ldi	r22, 0x01	; 1
    8df2:	83 e0       	ldi	r24, 0x03	; 3
    8df4:	0e 94 b9 3a 	call	0x7572	; 0x7572 <FadeOut>
	ClearVram();
    8df8:	0e 94 ae 2c 	call	0x595c	; 0x595c <ClearVram>
	clear_sprites();
    8dfc:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <clear_sprites>
	Print(9, 12, &strLevels[index*12]);
    8e00:	8c e0       	ldi	r24, 0x0C	; 12
    8e02:	c8 9f       	mul	r28, r24
    8e04:	a0 01       	movw	r20, r0
    8e06:	11 24       	eor	r1, r1
    8e08:	4a 50       	subi	r20, 0x0A	; 10
    8e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    8e0c:	6c e0       	ldi	r22, 0x0C	; 12
    8e0e:	70 e0       	ldi	r23, 0x00	; 0
    8e10:	89 e0       	ldi	r24, 0x09	; 9
    8e12:	90 e0       	ldi	r25, 0x00	; 0
    8e14:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	FadeIn(1, true);
    8e18:	61 e0       	ldi	r22, 0x01	; 1
    8e1a:	81 e0       	ldi	r24, 0x01	; 1
    8e1c:	0e 94 ad 3a 	call	0x755a	; 0x755a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    8e20:	82 e0       	ldi	r24, 0x02	; 2
    8e22:	0e 94 ad 3c 	call	0x795a	; 0x795a <LBWaitSeconds>
	FadeOut(1, true);
    8e26:	61 e0       	ldi	r22, 0x01	; 1
    8e28:	81 e0       	ldi	r24, 0x01	; 1
    8e2a:	0e 94 b9 3a 	call	0x7572	; 0x7572 <FadeOut>
	ClearVram();
    8e2e:	0e 94 ae 2c 	call	0x595c	; 0x595c <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    8e32:	60 e0       	ldi	r22, 0x00	; 0
    8e34:	83 e0       	ldi	r24, 0x03	; 3
    8e36:	0e 94 ad 3a 	call	0x755a	; 0x755a <FadeIn>
	load_level(index);
    8e3a:	8c 2f       	mov	r24, r28
    8e3c:	90 e0       	ldi	r25, 0x00	; 0
}
    8e3e:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    8e40:	0c 94 38 46 	jmp	0x8c70	; 0x8c70 <load_level>

00008e44 <load_splash>:
	collision_detect_player(&player2, &player1, 15, 0);
}

void load_splash()
{
	game.current_screen = SPLASH;
    8e44:	10 92 01 0a 	sts	0x0A01, r1
	clear_sprites();
    8e48:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <clear_sprites>
	Print(7, 13, str1Player);
    8e4c:	45 ea       	ldi	r20, 0xA5	; 165
    8e4e:	52 e0       	ldi	r21, 0x02	; 2
    8e50:	6d e0       	ldi	r22, 0x0D	; 13
    8e52:	70 e0       	ldi	r23, 0x00	; 0
    8e54:	87 e0       	ldi	r24, 0x07	; 7
    8e56:	90 e0       	ldi	r25, 0x00	; 0
    8e58:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(7, 14, str2Player);
    8e5c:	44 e9       	ldi	r20, 0x94	; 148
    8e5e:	52 e0       	ldi	r21, 0x02	; 2
    8e60:	6e e0       	ldi	r22, 0x0E	; 14
    8e62:	70 e0       	ldi	r23, 0x00	; 0
    8e64:	87 e0       	ldi	r24, 0x07	; 7
    8e66:	90 e0       	ldi	r25, 0x00	; 0
    8e68:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(7, 15, strHighscores);
    8e6c:	4a e8       	ldi	r20, 0x8A	; 138
    8e6e:	52 e0       	ldi	r21, 0x02	; 2
    8e70:	6f e0       	ldi	r22, 0x0F	; 15
    8e72:	70 e0       	ldi	r23, 0x00	; 0
    8e74:	87 e0       	ldi	r24, 0x07	; 7
    8e76:	90 e0       	ldi	r25, 0x00	; 0
    8e78:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(4, 26, strCopyright);
    8e7c:	43 eb       	ldi	r20, 0xB3	; 179
    8e7e:	52 e0       	ldi	r21, 0x02	; 2
    8e80:	6a e1       	ldi	r22, 0x1A	; 26
    8e82:	70 e0       	ldi	r23, 0x00	; 0
    8e84:	84 e0       	ldi	r24, 0x04	; 4
    8e86:	90 e0       	ldi	r25, 0x00	; 0
    8e88:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    8e8c:	4a e4       	ldi	r20, 0x4A	; 74
    8e8e:	51 e2       	ldi	r21, 0x21	; 33
    8e90:	65 e0       	ldi	r22, 0x05	; 5
    8e92:	84 e0       	ldi	r24, 0x04	; 4
    8e94:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <DrawMap2>
	MapSprite2(0, map_ball, 0);
    8e98:	40 e0       	ldi	r20, 0x00	; 0
    8e9a:	67 e9       	ldi	r22, 0x97	; 151
    8e9c:	70 e2       	ldi	r23, 0x20	; 32
    8e9e:	80 e0       	ldi	r24, 0x00	; 0
    8ea0:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
	SFX_SPLASH;
    8ea4:	2f ef       	ldi	r18, 0xFF	; 255
    8ea6:	47 e1       	ldi	r20, 0x17	; 23
    8ea8:	69 e0       	ldi	r22, 0x09	; 9
    8eaa:	84 e0       	ldi	r24, 0x04	; 4
    8eac:	0c 94 c2 2f 	jmp	0x5f84	; 0x5f84 <TriggerNote>

00008eb0 <load_tank_rank>:
		return;
	}
}

void load_tank_rank()
{
    8eb0:	ef 92       	push	r14
    8eb2:	ff 92       	push	r15
    8eb4:	0f 93       	push	r16
    8eb6:	1f 93       	push	r17
    8eb8:	cf 93       	push	r28
    8eba:	df 93       	push	r29
    8ebc:	1f 92       	push	r1
    8ebe:	cd b7       	in	r28, 0x3d	; 61
    8ec0:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    8ec2:	81 e0       	ldi	r24, 0x01	; 1
    8ec4:	80 93 01 0a 	sts	0x0A01, r24
	clear_sprites();
    8ec8:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    8ecc:	40 e0       	ldi	r20, 0x00	; 0
    8ece:	66 ed       	ldi	r22, 0xD6	; 214
    8ed0:	70 e2       	ldi	r23, 0x20	; 32
    8ed2:	80 e0       	ldi	r24, 0x00	; 0
    8ed4:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    8ed8:	40 e0       	ldi	r20, 0x00	; 0
    8eda:	6e eb       	ldi	r22, 0xBE	; 190
    8edc:	70 e2       	ldi	r23, 0x20	; 32
    8ede:	84 e0       	ldi	r24, 0x04	; 4
    8ee0:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    8ee4:	02 e0       	ldi	r16, 0x02	; 2
    8ee6:	22 e0       	ldi	r18, 0x02	; 2
    8ee8:	48 e0       	ldi	r20, 0x08	; 8
    8eea:	68 e3       	ldi	r22, 0x38	; 56
    8eec:	80 e0       	ldi	r24, 0x00	; 0
    8eee:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    8ef2:	22 e0       	ldi	r18, 0x02	; 2
    8ef4:	48 e0       	ldi	r20, 0x08	; 8
    8ef6:	60 ea       	ldi	r22, 0xA0	; 160
    8ef8:	84 e0       	ldi	r24, 0x04	; 4
    8efa:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
	Print(10, 2, strHighscores);
    8efe:	4a e8       	ldi	r20, 0x8A	; 138
    8f00:	52 e0       	ldi	r21, 0x02	; 2
    8f02:	62 e0       	ldi	r22, 0x02	; 2
    8f04:	70 e0       	ldi	r23, 0x00	; 0
    8f06:	8a e0       	ldi	r24, 0x0A	; 10
    8f08:	90 e0       	ldi	r25, 0x00	; 0
    8f0a:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
    8f0e:	09 e0       	ldi	r16, 0x09	; 9
    8f10:	11 e0       	ldi	r17, 0x01	; 1
    8f12:	87 e0       	ldi	r24, 0x07	; 7
    8f14:	e8 2e       	mov	r14, r24
    8f16:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    8f18:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    8f1a:	20 e0       	ldi	r18, 0x00	; 0
    8f1c:	43 2f       	mov	r20, r19
    8f1e:	b7 01       	movw	r22, r14
    8f20:	82 e0       	ldi	r24, 0x02	; 2
    8f22:	90 e0       	ldi	r25, 0x00	; 0
    8f24:	39 83       	std	Y+1, r19	; 0x01
    8f26:	0e 94 37 3a 	call	0x746e	; 0x746e <PrintByte>
		PrintChar(3, y, '.');
    8f2a:	4e e2       	ldi	r20, 0x2E	; 46
    8f2c:	b7 01       	movw	r22, r14
    8f2e:	83 e0       	ldi	r24, 0x03	; 3
    8f30:	90 e0       	ldi	r25, 0x00	; 0
    8f32:	0e 94 85 3a 	call	0x750a	; 0x750a <PrintChar>
    8f36:	f8 01       	movw	r30, r16
    8f38:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    8f3a:	80 81       	ld	r24, Z
    8f3c:	93 e0       	ldi	r25, 0x03	; 3
    8f3e:	89 9f       	mul	r24, r25
    8f40:	a0 01       	movw	r20, r0
    8f42:	11 24       	eor	r1, r1
    8f44:	4a 5d       	subi	r20, 0xDA	; 218
    8f46:	5e 4f       	sbci	r21, 0xFE	; 254
    8f48:	23 e0       	ldi	r18, 0x03	; 3
    8f4a:	6e 2d       	mov	r22, r14
    8f4c:	85 e0       	ldi	r24, 0x05	; 5
    8f4e:	0e 94 5f 3b 	call	0x76be	; 0x76be <LBPrintStr>
		Print(9, y, strOwns);
    8f52:	44 e3       	ldi	r20, 0x34	; 52
    8f54:	52 e0       	ldi	r21, 0x02	; 2
    8f56:	b7 01       	movw	r22, r14
    8f58:	89 e0       	ldi	r24, 0x09	; 9
    8f5a:	90 e0       	ldi	r25, 0x00	; 0
    8f5c:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
    8f60:	f8 01       	movw	r30, r16
    8f62:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    8f64:	80 81       	ld	r24, Z
    8f66:	e3 e0       	ldi	r30, 0x03	; 3
    8f68:	8e 9f       	mul	r24, r30
    8f6a:	a0 01       	movw	r20, r0
    8f6c:	11 24       	eor	r1, r1
    8f6e:	4a 5d       	subi	r20, 0xDA	; 218
    8f70:	5e 4f       	sbci	r21, 0xFE	; 254
    8f72:	23 e0       	ldi	r18, 0x03	; 3
    8f74:	6e 2d       	mov	r22, r14
    8f76:	8e e0       	ldi	r24, 0x0E	; 14
    8f78:	0e 94 5f 3b 	call	0x76be	; 0x76be <LBPrintStr>
		Print(18, y, strBy);
    8f7c:	41 e3       	ldi	r20, 0x31	; 49
    8f7e:	52 e0       	ldi	r21, 0x02	; 2
    8f80:	b7 01       	movw	r22, r14
    8f82:	82 e1       	ldi	r24, 0x12	; 18
    8f84:	90 e0       	ldi	r25, 0x00	; 0
    8f86:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
    8f8a:	f8 01       	movw	r30, r16
    8f8c:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    8f8e:	21 e0       	ldi	r18, 0x01	; 1
    8f90:	40 81       	ld	r20, Z
    8f92:	b7 01       	movw	r22, r14
    8f94:	87 e1       	ldi	r24, 0x17	; 23
    8f96:	90 e0       	ldi	r25, 0x00	; 0
    8f98:	0e 94 37 3a 	call	0x746e	; 0x746e <PrintByte>
		PrintChar(24, y, '-');
    8f9c:	4d e2       	ldi	r20, 0x2D	; 45
    8f9e:	b7 01       	movw	r22, r14
    8fa0:	88 e1       	ldi	r24, 0x18	; 24
    8fa2:	90 e0       	ldi	r25, 0x00	; 0
    8fa4:	0e 94 85 3a 	call	0x750a	; 0x750a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    8fa8:	21 e0       	ldi	r18, 0x01	; 1
    8faa:	f8 01       	movw	r30, r16
    8fac:	40 81       	ld	r20, Z
    8fae:	b7 01       	movw	r22, r14
    8fb0:	8b e1       	ldi	r24, 0x1B	; 27
    8fb2:	90 e0       	ldi	r25, 0x00	; 0
    8fb4:	0e 94 37 3a 	call	0x746e	; 0x746e <PrintByte>
		y += 3;
		rank += 1;
    8fb8:	39 81       	ldd	r19, Y+1	; 0x01
    8fba:	3f 5f       	subi	r19, 0xFF	; 255
    8fbc:	f3 e0       	ldi	r31, 0x03	; 3
    8fbe:	ef 0e       	add	r14, r31
    8fc0:	f1 1c       	adc	r15, r1
    8fc2:	0c 5f       	subi	r16, 0xFC	; 252
    8fc4:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    8fc6:	36 30       	cpi	r19, 0x06	; 6
    8fc8:	09 f0       	breq	.+2      	; 0x8fcc <load_tank_rank+0x11c>
    8fca:	a7 cf       	rjmp	.-178    	; 0x8f1a <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    8fcc:	48 e4       	ldi	r20, 0x48	; 72
    8fce:	52 e0       	ldi	r21, 0x02	; 2
    8fd0:	67 e1       	ldi	r22, 0x17	; 23
    8fd2:	70 e0       	ldi	r23, 0x00	; 0
    8fd4:	8a e0       	ldi	r24, 0x0A	; 10
    8fd6:	90 e0       	ldi	r25, 0x00	; 0
}
    8fd8:	0f 90       	pop	r0
    8fda:	df 91       	pop	r29
    8fdc:	cf 91       	pop	r28
    8fde:	1f 91       	pop	r17
    8fe0:	0f 91       	pop	r16
    8fe2:	ff 90       	pop	r15
    8fe4:	ef 90       	pop	r14
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    8fe6:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <Print>

00008fea <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
	fade_through();
    8fea:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <fade_through>
	SetSpriteVisibility(true);
    8fee:	81 e0       	ldi	r24, 0x01	; 1
    8ff0:	0e 94 91 38 	call	0x7122	; 0x7122 <SetSpriteVisibility>
	init_game_state();
    8ff4:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <init_game_state>
	load_tank_rank();
    8ff8:	0c 94 58 47 	jmp	0x8eb0	; 0x8eb0 <load_tank_rank>

00008ffc <update_level_helper>:
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
}

void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    8ffc:	af 92       	push	r10
    8ffe:	bf 92       	push	r11
    9000:	cf 92       	push	r12
    9002:	df 92       	push	r13
    9004:	ef 92       	push	r14
    9006:	ff 92       	push	r15
    9008:	0f 93       	push	r16
    900a:	1f 93       	push	r17
    900c:	cf 93       	push	r28
    900e:	df 93       	push	r29
    9010:	8c 01       	movw	r16, r24
    9012:	eb 01       	movw	r28, r22
    9014:	7a 01       	movw	r14, r20
	Shot* shot;
	u8 next_level;

	if ((p->pressed & BTN_START))
    9016:	fc 01       	movw	r30, r24
    9018:	80 81       	ld	r24, Z
    901a:	83 ff       	sbrs	r24, 3
    901c:	0f c0       	rjmp	.+30     	; 0x903c <update_level_helper+0x40>
	{
		game.paused = game.paused ^ 1;
    901e:	90 91 03 0a 	lds	r25, 0x0A03
    9022:	81 e0       	ldi	r24, 0x01	; 1
    9024:	89 27       	eor	r24, r25
    9026:	80 93 03 0a 	sts	0x0A03, r24
		load_level_tiles(false);
    902a:	80 e0       	ldi	r24, 0x00	; 0
    902c:	0e 94 e1 45 	call	0x8bc2	; 0x8bc2 <load_level_tiles>
		SFX_NAVIGATE;
    9030:	2f ef       	ldi	r18, 0xFF	; 255
    9032:	47 e1       	ldi	r20, 0x17	; 23
    9034:	67 e0       	ldi	r22, 0x07	; 7
    9036:	84 e0       	ldi	r24, 0x04	; 4
    9038:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TriggerNote>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    903c:	20 91 03 0a 	lds	r18, 0x0A03
    9040:	f8 01       	movw	r30, r16
    9042:	80 81       	ld	r24, Z
    9044:	91 81       	ldd	r25, Z+1	; 0x01
    9046:	21 11       	cpse	r18, r1
    9048:	65 c1       	rjmp	.+714    	; 0x9314 <update_level_helper+0x318>
    904a:	2b 89       	ldd	r18, Y+19	; 0x13
    904c:	20 fd       	sbrc	r18, 0
    904e:	62 c1       	rjmp	.+708    	; 0x9314 <update_level_helper+0x318>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    9050:	93 ff       	sbrs	r25, 3
    9052:	11 c0       	rjmp	.+34     	; 0x9076 <update_level_helper+0x7a>
    9054:	8c 89       	ldd	r24, Y+20	; 0x14
    9056:	8a 35       	cpi	r24, 0x5A	; 90
    9058:	71 f4       	brne	.+28     	; 0x9076 <update_level_helper+0x7a>
		{
			player->banter_frame = 0;
    905a:	1c 8a       	std	Y+20, r1	; 0x14
			player->banter_index = (u8) LBRandom(0, 9);
    905c:	69 e0       	ldi	r22, 0x09	; 9
    905e:	70 e0       	ldi	r23, 0x00	; 0
    9060:	80 e0       	ldi	r24, 0x00	; 0
    9062:	90 e0       	ldi	r25, 0x00	; 0
    9064:	0e 94 90 3c 	call	0x7920	; 0x7920 <LBRandom>
    9068:	8d 8b       	std	Y+21, r24	; 0x15
			SFX_BANTER;
    906a:	2f ef       	ldi	r18, 0xFF	; 255
    906c:	47 e1       	ldi	r20, 0x17	; 23
    906e:	60 e0       	ldi	r22, 0x00	; 0
    9070:	84 e0       	ldi	r24, 0x04	; 4
    9072:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    9076:	6f 89       	ldd	r22, Y+23	; 0x17
    9078:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    907a:	f8 01       	movw	r30, r16
    907c:	84 81       	ldd	r24, Z+4	; 0x04
    907e:	84 ff       	sbrs	r24, 4
    9080:	15 c0       	rjmp	.+42     	; 0x90ac <update_level_helper+0xb0>
		{
			player->shared.direction = D_UP;
    9082:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    9084:	70 e0       	ldi	r23, 0x00	; 0
    9086:	80 e0       	ldi	r24, 0x00	; 0
    9088:	90 e0       	ldi	r25, 0x00	; 0
    908a:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    908e:	25 e6       	ldi	r18, 0x65	; 101
    9090:	38 e8       	ldi	r19, 0x88	; 136
    9092:	48 e8       	ldi	r20, 0x88	; 136
    9094:	5c e3       	ldi	r21, 0x3C	; 60
    9096:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    909a:	9b 01       	movw	r18, r22
    909c:	ac 01       	movw	r20, r24
    909e:	6e 81       	ldd	r22, Y+6	; 0x06
    90a0:	7f 81       	ldd	r23, Y+7	; 0x07
    90a2:	88 85       	ldd	r24, Y+8	; 0x08
    90a4:	99 85       	ldd	r25, Y+9	; 0x09
    90a6:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    90aa:	39 c0       	rjmp	.+114    	; 0x911e <update_level_helper+0x122>
			SFX_TRACKS;
		}
		else if ((p->held & BTN_RIGHT))
    90ac:	87 ff       	sbrs	r24, 7
    90ae:	20 c0       	rjmp	.+64     	; 0x90f0 <update_level_helper+0xf4>
		{
			player->shared.direction = D_RIGHT;
    90b0:	81 e0       	ldi	r24, 0x01	; 1
    90b2:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    90b4:	70 e0       	ldi	r23, 0x00	; 0
    90b6:	80 e0       	ldi	r24, 0x00	; 0
    90b8:	90 e0       	ldi	r25, 0x00	; 0
    90ba:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    90be:	25 e6       	ldi	r18, 0x65	; 101
    90c0:	38 e8       	ldi	r19, 0x88	; 136
    90c2:	48 e8       	ldi	r20, 0x88	; 136
    90c4:	5c e3       	ldi	r21, 0x3C	; 60
    90c6:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    90ca:	9b 01       	movw	r18, r22
    90cc:	ac 01       	movw	r20, r24
    90ce:	6a 81       	ldd	r22, Y+2	; 0x02
    90d0:	7b 81       	ldd	r23, Y+3	; 0x03
    90d2:	8c 81       	ldd	r24, Y+4	; 0x04
    90d4:	9d 81       	ldd	r25, Y+5	; 0x05
    90d6:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    90da:	6a 83       	std	Y+2, r22	; 0x02
    90dc:	7b 83       	std	Y+3, r23	; 0x03
    90de:	8c 83       	std	Y+4, r24	; 0x04
    90e0:	9d 83       	std	Y+5, r25	; 0x05
			SFX_TRACKS;
    90e2:	2f ef       	ldi	r18, 0xFF	; 255
    90e4:	47 e1       	ldi	r20, 0x17	; 23
    90e6:	6b e0       	ldi	r22, 0x0B	; 11
    90e8:	84 e0       	ldi	r24, 0x04	; 4
    90ea:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TriggerNote>
    90ee:	35 c0       	rjmp	.+106    	; 0x915a <update_level_helper+0x15e>
		}
		else if ((p->held & BTN_DOWN))
    90f0:	85 ff       	sbrs	r24, 5
    90f2:	1a c0       	rjmp	.+52     	; 0x9128 <update_level_helper+0x12c>
		{
			player->shared.direction = D_DOWN;
    90f4:	82 e0       	ldi	r24, 0x02	; 2
    90f6:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    90f8:	70 e0       	ldi	r23, 0x00	; 0
    90fa:	80 e0       	ldi	r24, 0x00	; 0
    90fc:	90 e0       	ldi	r25, 0x00	; 0
    90fe:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    9102:	25 e6       	ldi	r18, 0x65	; 101
    9104:	38 e8       	ldi	r19, 0x88	; 136
    9106:	48 e8       	ldi	r20, 0x88	; 136
    9108:	5c e3       	ldi	r21, 0x3C	; 60
    910a:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    910e:	9b 01       	movw	r18, r22
    9110:	ac 01       	movw	r20, r24
    9112:	6e 81       	ldd	r22, Y+6	; 0x06
    9114:	7f 81       	ldd	r23, Y+7	; 0x07
    9116:	88 85       	ldd	r24, Y+8	; 0x08
    9118:	99 85       	ldd	r25, Y+9	; 0x09
    911a:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    911e:	6e 83       	std	Y+6, r22	; 0x06
    9120:	7f 83       	std	Y+7, r23	; 0x07
    9122:	88 87       	std	Y+8, r24	; 0x08
    9124:	99 87       	std	Y+9, r25	; 0x09
    9126:	dd cf       	rjmp	.-70     	; 0x90e2 <update_level_helper+0xe6>
			SFX_TRACKS;
		}
		else if ((p->held & BTN_LEFT))
    9128:	86 ff       	sbrs	r24, 6
    912a:	16 c0       	rjmp	.+44     	; 0x9158 <update_level_helper+0x15c>
		{
			player->shared.direction = D_LEFT;
    912c:	83 e0       	ldi	r24, 0x03	; 3
    912e:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    9130:	70 e0       	ldi	r23, 0x00	; 0
    9132:	80 e0       	ldi	r24, 0x00	; 0
    9134:	90 e0       	ldi	r25, 0x00	; 0
    9136:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    913a:	25 e6       	ldi	r18, 0x65	; 101
    913c:	38 e8       	ldi	r19, 0x88	; 136
    913e:	48 e8       	ldi	r20, 0x88	; 136
    9140:	5c e3       	ldi	r21, 0x3C	; 60
    9142:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    9146:	9b 01       	movw	r18, r22
    9148:	ac 01       	movw	r20, r24
    914a:	6a 81       	ldd	r22, Y+2	; 0x02
    914c:	7b 81       	ldd	r23, Y+3	; 0x03
    914e:	8c 81       	ldd	r24, Y+4	; 0x04
    9150:	9d 81       	ldd	r25, Y+5	; 0x05
    9152:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    9156:	c1 cf       	rjmp	.-126    	; 0x90da <update_level_helper+0xde>
			SFX_TRACKS;
		}
		else
		{
			player->shared.speed = 0;
    9158:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    915a:	f8 01       	movw	r30, r16
    915c:	80 81       	ld	r24, Z
    915e:	91 81       	ldd	r25, Z+1	; 0x01
    9160:	90 ff       	sbrs	r25, 0
    9162:	50 c0       	rjmp	.+160    	; 0x9204 <update_level_helper+0x208>
    9164:	88 89       	ldd	r24, Y+16	; 0x10
    9166:	82 30       	cpi	r24, 0x02	; 2
    9168:	08 f0       	brcs	.+2      	; 0x916c <update_level_helper+0x170>
    916a:	4c c0       	rjmp	.+152    	; 0x9204 <update_level_helper+0x208>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    916c:	8f a1       	ldd	r24, Y+39	; 0x27
    916e:	81 11       	cpse	r24, r1
    9170:	06 c0       	rjmp	.+12     	; 0x917e <update_level_helper+0x182>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    9172:	8e 01       	movw	r16, r28
    9174:	06 5e       	subi	r16, 0xE6	; 230
    9176:	1f 4f       	sbci	r17, 0xFF	; 255
    9178:	a1 2c       	mov	r10, r1
    917a:	b1 2c       	mov	r11, r1
    917c:	0c c0       	rjmp	.+24     	; 0x9196 <update_level_helper+0x19a>
				if (!shot->active)
    917e:	fe 01       	movw	r30, r28
    9180:	e7 5b       	subi	r30, 0xB7	; 183
    9182:	ff 4f       	sbci	r31, 0xFF	; 255
    9184:	80 81       	ld	r24, Z
    9186:	81 11       	cpse	r24, r1
    9188:	3d c0       	rjmp	.+122    	; 0x9204 <update_level_helper+0x208>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    918a:	8e 01       	movw	r16, r28
    918c:	04 5c       	subi	r16, 0xC4	; 196
    918e:	1f 4f       	sbci	r17, 0xFF	; 255
    9190:	aa 24       	eor	r10, r10
    9192:	a3 94       	inc	r10
    9194:	b1 2c       	mov	r11, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    9196:	88 8d       	ldd	r24, Y+24	; 0x18
    9198:	88 23       	and	r24, r24
    919a:	61 f0       	breq	.+24     	; 0x91b4 <update_level_helper+0x1b8>
					{
						init_shot_state(shot, ROCKET_SHOT);
    919c:	61 e0       	ldi	r22, 0x01	; 1
    919e:	c8 01       	movw	r24, r16
    91a0:	0e 94 df 3c 	call	0x79be	; 0x79be <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    91a4:	61 e0       	ldi	r22, 0x01	; 1
    91a6:	c8 01       	movw	r24, r16
    91a8:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <set_shot_animations>
						SFX_ROCKET;
    91ac:	2f ef       	ldi	r18, 0xFF	; 255
    91ae:	47 e1       	ldi	r20, 0x17	; 23
    91b0:	68 e0       	ldi	r22, 0x08	; 8
    91b2:	0b c0       	rjmp	.+22     	; 0x91ca <update_level_helper+0x1ce>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    91b4:	60 e0       	ldi	r22, 0x00	; 0
    91b6:	c8 01       	movw	r24, r16
    91b8:	0e 94 df 3c 	call	0x79be	; 0x79be <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    91bc:	60 e0       	ldi	r22, 0x00	; 0
    91be:	c8 01       	movw	r24, r16
    91c0:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <set_shot_animations>
						SFX_CANNONBALL;
    91c4:	2f ef       	ldi	r18, 0xFF	; 255
    91c6:	47 e1       	ldi	r20, 0x17	; 23
    91c8:	62 e0       	ldi	r22, 0x02	; 2
    91ca:	84 e0       	ldi	r24, 0x04	; 4
    91cc:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TriggerNote>
					}
					player->active_shots++;
    91d0:	88 89       	ldd	r24, Y+16	; 0x10
    91d2:	8f 5f       	subi	r24, 0xFF	; 255
    91d4:	88 8b       	std	Y+16, r24	; 0x10
					shot->shared.direction = player->shared.direction;
    91d6:	82 e2       	ldi	r24, 0x22	; 34
    91d8:	8a 9d       	mul	r24, r10
    91da:	60 01       	movw	r12, r0
    91dc:	8b 9d       	mul	r24, r11
    91de:	d0 0c       	add	r13, r0
    91e0:	11 24       	eor	r1, r1
    91e2:	cc 0e       	add	r12, r28
    91e4:	dd 1e       	adc	r13, r29
    91e6:	88 81       	ld	r24, Y
    91e8:	f6 01       	movw	r30, r12
    91ea:	82 8f       	std	Z+26, r24	; 0x1a
					position_shot(player, shot);
    91ec:	b8 01       	movw	r22, r16
    91ee:	ce 01       	movw	r24, r28
    91f0:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <position_shot>
					shot->active = 1;
    91f4:	81 e0       	ldi	r24, 0x01	; 1
    91f6:	f6 01       	movw	r30, r12
    91f8:	87 a3       	std	Z+39, r24	; 0x27
					if (player->has_over_speed)
    91fa:	89 8d       	ldd	r24, Y+25	; 0x19
    91fc:	88 23       	and	r24, r24
    91fe:	11 f0       	breq	.+4      	; 0x9204 <update_level_helper+0x208>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    9200:	86 e9       	ldi	r24, 0x96	; 150
    9202:	83 8f       	std	Z+27, r24	; 0x1b
    9204:	8e 01       	movw	r16, r28
    9206:	05 5e       	subi	r16, 0xE5	; 229
    9208:	1f 4f       	sbci	r17, 0xFF	; 255
    920a:	5e 01       	movw	r10, r28
    920c:	ff e5       	ldi	r31, 0x5F	; 95
    920e:	af 0e       	add	r10, r31
    9210:	b1 1c       	adc	r11, r1

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    9212:	f8 01       	movw	r30, r16
    9214:	84 85       	ldd	r24, Z+12	; 0x0c
    9216:	88 23       	and	r24, r24
    9218:	09 f4       	brne	.+2      	; 0x921c <update_level_helper+0x220>
    921a:	75 c0       	rjmp	.+234    	; 0x9306 <update_level_helper+0x30a>
			{
				switch (shot->shared.direction)
    921c:	82 91       	ld	r24, -Z
    921e:	6f 01       	movw	r12, r30
    9220:	81 30       	cpi	r24, 0x01	; 1
    9222:	a9 f1       	breq	.+106    	; 0x928e <update_level_helper+0x292>
    9224:	e8 f0       	brcs	.+58     	; 0x9260 <update_level_helper+0x264>
    9226:	82 30       	cpi	r24, 0x02	; 2
    9228:	09 f4       	brne	.+2      	; 0x922c <update_level_helper+0x230>
    922a:	48 c0       	rjmp	.+144    	; 0x92bc <update_level_helper+0x2c0>
    922c:	83 30       	cpi	r24, 0x03	; 3
    922e:	09 f0       	breq	.+2      	; 0x9232 <update_level_helper+0x236>
    9230:	66 c0       	rjmp	.+204    	; 0x92fe <update_level_helper+0x302>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    9232:	f8 01       	movw	r30, r16
    9234:	60 81       	ld	r22, Z
    9236:	70 e0       	ldi	r23, 0x00	; 0
    9238:	80 e0       	ldi	r24, 0x00	; 0
    923a:	90 e0       	ldi	r25, 0x00	; 0
    923c:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    9240:	25 e6       	ldi	r18, 0x65	; 101
    9242:	38 e8       	ldi	r19, 0x88	; 136
    9244:	48 e8       	ldi	r20, 0x88	; 136
    9246:	5c e3       	ldi	r21, 0x3C	; 60
    9248:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    924c:	9b 01       	movw	r18, r22
    924e:	ac 01       	movw	r20, r24
    9250:	f8 01       	movw	r30, r16
    9252:	61 81       	ldd	r22, Z+1	; 0x01
    9254:	72 81       	ldd	r23, Z+2	; 0x02
    9256:	83 81       	ldd	r24, Z+3	; 0x03
    9258:	94 81       	ldd	r25, Z+4	; 0x04
    925a:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    925e:	4a c0       	rjmp	.+148    	; 0x92f4 <update_level_helper+0x2f8>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    9260:	f8 01       	movw	r30, r16
    9262:	60 81       	ld	r22, Z
    9264:	70 e0       	ldi	r23, 0x00	; 0
    9266:	80 e0       	ldi	r24, 0x00	; 0
    9268:	90 e0       	ldi	r25, 0x00	; 0
    926a:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    926e:	25 e6       	ldi	r18, 0x65	; 101
    9270:	38 e8       	ldi	r19, 0x88	; 136
    9272:	48 e8       	ldi	r20, 0x88	; 136
    9274:	5c e3       	ldi	r21, 0x3C	; 60
    9276:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    927a:	9b 01       	movw	r18, r22
    927c:	ac 01       	movw	r20, r24
    927e:	f8 01       	movw	r30, r16
    9280:	65 81       	ldd	r22, Z+5	; 0x05
    9282:	76 81       	ldd	r23, Z+6	; 0x06
    9284:	87 81       	ldd	r24, Z+7	; 0x07
    9286:	90 85       	ldd	r25, Z+8	; 0x08
    9288:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <__subsf3>
    928c:	2d c0       	rjmp	.+90     	; 0x92e8 <update_level_helper+0x2ec>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    928e:	f8 01       	movw	r30, r16
    9290:	60 81       	ld	r22, Z
    9292:	70 e0       	ldi	r23, 0x00	; 0
    9294:	80 e0       	ldi	r24, 0x00	; 0
    9296:	90 e0       	ldi	r25, 0x00	; 0
    9298:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    929c:	25 e6       	ldi	r18, 0x65	; 101
    929e:	38 e8       	ldi	r19, 0x88	; 136
    92a0:	48 e8       	ldi	r20, 0x88	; 136
    92a2:	5c e3       	ldi	r21, 0x3C	; 60
    92a4:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    92a8:	9b 01       	movw	r18, r22
    92aa:	ac 01       	movw	r20, r24
    92ac:	f8 01       	movw	r30, r16
    92ae:	61 81       	ldd	r22, Z+1	; 0x01
    92b0:	72 81       	ldd	r23, Z+2	; 0x02
    92b2:	83 81       	ldd	r24, Z+3	; 0x03
    92b4:	94 81       	ldd	r25, Z+4	; 0x04
    92b6:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    92ba:	1c c0       	rjmp	.+56     	; 0x92f4 <update_level_helper+0x2f8>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    92bc:	f8 01       	movw	r30, r16
    92be:	60 81       	ld	r22, Z
    92c0:	70 e0       	ldi	r23, 0x00	; 0
    92c2:	80 e0       	ldi	r24, 0x00	; 0
    92c4:	90 e0       	ldi	r25, 0x00	; 0
    92c6:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <__floatsisf>
    92ca:	25 e6       	ldi	r18, 0x65	; 101
    92cc:	38 e8       	ldi	r19, 0x88	; 136
    92ce:	48 e8       	ldi	r20, 0x88	; 136
    92d0:	5c e3       	ldi	r21, 0x3C	; 60
    92d2:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <__mulsf3>
    92d6:	9b 01       	movw	r18, r22
    92d8:	ac 01       	movw	r20, r24
    92da:	f8 01       	movw	r30, r16
    92dc:	65 81       	ldd	r22, Z+5	; 0x05
    92de:	76 81       	ldd	r23, Z+6	; 0x06
    92e0:	87 81       	ldd	r24, Z+7	; 0x07
    92e2:	90 85       	ldd	r25, Z+8	; 0x08
    92e4:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <__addsf3>
    92e8:	f8 01       	movw	r30, r16
    92ea:	65 83       	std	Z+5, r22	; 0x05
    92ec:	76 83       	std	Z+6, r23	; 0x06
    92ee:	87 83       	std	Z+7, r24	; 0x07
    92f0:	90 87       	std	Z+8, r25	; 0x08
    92f2:	05 c0       	rjmp	.+10     	; 0x92fe <update_level_helper+0x302>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    92f4:	f8 01       	movw	r30, r16
    92f6:	61 83       	std	Z+1, r22	; 0x01
    92f8:	72 83       	std	Z+2, r23	; 0x02
    92fa:	83 83       	std	Z+3, r24	; 0x03
    92fc:	94 83       	std	Z+4, r25	; 0x04
					default: break;
				}
				collision_detect_shot(player, shot);
    92fe:	b6 01       	movw	r22, r12
    9300:	ce 01       	movw	r24, r28
    9302:	0e 94 70 43 	call	0x86e0	; 0x86e0 <collision_detect_shot>
    9306:	0e 5d       	subi	r16, 0xDE	; 222
    9308:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		}

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
    930a:	0a 15       	cp	r16, r10
    930c:	1b 05       	cpc	r17, r11
    930e:	09 f0       	breq	.+2      	; 0x9312 <update_level_helper+0x316>
    9310:	80 cf       	rjmp	.-256    	; 0x9212 <update_level_helper+0x216>
    9312:	06 c0       	rjmp	.+12     	; 0x9320 <update_level_helper+0x324>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    9314:	91 ff       	sbrs	r25, 1
    9316:	04 c0       	rjmp	.+8      	; 0x9320 <update_level_helper+0x324>
		{
			save_score();
    9318:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <save_score>
			exit_game();
    931c:	0e 94 f5 47 	call	0x8fea	; 0x8fea <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score == MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    9320:	8f 85       	ldd	r24, Y+15	; 0x0f
    9322:	85 30       	cpi	r24, 0x05	; 5
    9324:	d1 f5       	brne	.+116    	; 0x939a <update_level_helper+0x39e>
    9326:	f7 01       	movw	r30, r14
    9328:	83 89       	ldd	r24, Z+19	; 0x13
    932a:	80 fd       	sbrc	r24, 0
    932c:	36 c0       	rjmp	.+108    	; 0x939a <update_level_helper+0x39e>
	{
		save_score();
    932e:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <save_score>
		load_level_tiles(true);
    9332:	81 e0       	ldi	r24, 0x01	; 1
    9334:	0e 94 e1 45 	call	0x8bc2	; 0x8bc2 <load_level_tiles>
		SetSpriteVisibility(false);
    9338:	80 e0       	ldi	r24, 0x00	; 0
    933a:	0e 94 91 38 	call	0x7122	; 0x7122 <SetSpriteVisibility>
		print_level_score(player, other_player);
    933e:	b7 01       	movw	r22, r14
    9340:	ce 01       	movw	r24, r28
    9342:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    9346:	82 e0       	ldi	r24, 0x02	; 2
    9348:	0e 94 ad 3c 	call	0x795a	; 0x795a <LBWaitSeconds>
		player->level_score = 0;
    934c:	1f 86       	std	Y+15, r1	; 0x0f
		other_player->level_score = 0;
    934e:	f7 01       	movw	r30, r14
    9350:	17 86       	std	Z+15, r1	; 0x0f
		next_level = game.current_level + 1;
    9352:	c0 91 02 0a 	lds	r28, 0x0A02
    9356:	cf 5f       	subi	r28, 0xFF	; 255
		SFX_LEVEL_CLEAR;
    9358:	2f ef       	ldi	r18, 0xFF	; 255
    935a:	47 e1       	ldi	r20, 0x17	; 23
    935c:	64 e0       	ldi	r22, 0x04	; 4
    935e:	84 e0       	ldi	r24, 0x04	; 4
    9360:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    9364:	ca 30       	cpi	r28, 0x0A	; 10
    9366:	60 f0       	brcs	.+24     	; 0x9380 <update_level_helper+0x384>
		else
		{
			level_transition(next_level);
		}
	}
}
    9368:	df 91       	pop	r29
    936a:	cf 91       	pop	r28
    936c:	1f 91       	pop	r17
    936e:	0f 91       	pop	r16
    9370:	ff 90       	pop	r15
    9372:	ef 90       	pop	r14
    9374:	df 90       	pop	r13
    9376:	cf 90       	pop	r12
    9378:	bf 90       	pop	r11
    937a:	af 90       	pop	r10
		other_player->level_score = 0;
		next_level = game.current_level + 1;
		SFX_LEVEL_CLEAR;
		if (next_level >= LEVEL_COUNT)
		{
			exit_game();
    937c:	0c 94 f5 47 	jmp	0x8fea	; 0x8fea <exit_game>
		}
		else
		{
			level_transition(next_level);
    9380:	8c 2f       	mov	r24, r28
		}
	}
}
    9382:	df 91       	pop	r29
    9384:	cf 91       	pop	r28
    9386:	1f 91       	pop	r17
    9388:	0f 91       	pop	r16
    938a:	ff 90       	pop	r15
    938c:	ef 90       	pop	r14
    938e:	df 90       	pop	r13
    9390:	cf 90       	pop	r12
    9392:	bf 90       	pop	r11
    9394:	af 90       	pop	r10
		{
			exit_game();
		}
		else
		{
			level_transition(next_level);
    9396:	0c 94 f6 46 	jmp	0x8dec	; 0x8dec <level_transition>
		}
	}
}
    939a:	df 91       	pop	r29
    939c:	cf 91       	pop	r28
    939e:	1f 91       	pop	r17
    93a0:	0f 91       	pop	r16
    93a2:	ff 90       	pop	r15
    93a4:	ef 90       	pop	r14
    93a6:	df 90       	pop	r13
    93a8:	cf 90       	pop	r12
    93aa:	bf 90       	pop	r11
    93ac:	af 90       	pop	r10
    93ae:	08 95       	ret

000093b0 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    93b0:	cf 92       	push	r12
    93b2:	df 92       	push	r13
    93b4:	ef 92       	push	r14
    93b6:	ff 92       	push	r15
    93b8:	1f 93       	push	r17
    93ba:	cf 93       	push	r28
    93bc:	df 93       	push	r29
    93be:	6c 01       	movw	r12, r24
    93c0:	7b 01       	movw	r14, r22
	char p2_shot_index = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;

	// Render
	if (game.paused)
    93c2:	80 91 03 0a 	lds	r24, 0x0A03
    93c6:	88 23       	and	r24, r24
    93c8:	d1 f0       	breq	.+52     	; 0x93fe <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    93ca:	80 e0       	ldi	r24, 0x00	; 0
    93cc:	0e 94 91 38 	call	0x7122	; 0x7122 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    93d0:	4c e0       	ldi	r20, 0x0C	; 12
    93d2:	51 e2       	ldi	r21, 0x21	; 33
    93d4:	6c e0       	ldi	r22, 0x0C	; 12
    93d6:	88 e0       	ldi	r24, 0x08	; 8
    93d8:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <DrawMap2>
		Print(12, 13, strPaused);
    93dc:	4e e6       	ldi	r20, 0x6E	; 110
    93de:	51 e0       	ldi	r21, 0x01	; 1
    93e0:	6d e0       	ldi	r22, 0x0D	; 13
    93e2:	70 e0       	ldi	r23, 0x00	; 0
    93e4:	8c e0       	ldi	r24, 0x0C	; 12
    93e6:	90 e0       	ldi	r25, 0x00	; 0
    93e8:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
		Print(11, 14, strExit);
    93ec:	45 e7       	ldi	r20, 0x75	; 117
    93ee:	51 e0       	ldi	r21, 0x01	; 1
    93f0:	6e e0       	ldi	r22, 0x0E	; 14
    93f2:	70 e0       	ldi	r23, 0x00	; 0
    93f4:	8b e0       	ldi	r24, 0x0B	; 11
    93f6:	90 e0       	ldi	r25, 0x00	; 0
    93f8:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
    93fc:	44 c0       	rjmp	.+136    	; 0x9486 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    93fe:	81 e0       	ldi	r24, 0x01	; 1
    9400:	0e 94 91 38 	call	0x7122	; 0x7122 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    9404:	60 e0       	ldi	r22, 0x00	; 0
    9406:	8e e1       	ldi	r24, 0x1E	; 30
    9408:	9a e0       	ldi	r25, 0x0A	; 10
    940a:	0e 94 16 40 	call	0x802c	; 0x802c <tank_map>
    940e:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    9410:	68 2f       	mov	r22, r24
    9412:	8f e8       	ldi	r24, 0x8F	; 143
    9414:	9d e0       	ldi	r25, 0x0D	; 13
    9416:	0e 94 16 40 	call	0x802c	; 0x802c <tank_map>
    941a:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    941c:	68 2f       	mov	r22, r24
    941e:	8e e1       	ldi	r24, 0x1E	; 30
    9420:	9a e0       	ldi	r25, 0x0A	; 10
    9422:	0e 94 98 40 	call	0x8130	; 0x8130 <shot_map>
    9426:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    9428:	68 2f       	mov	r22, r24
    942a:	8f e8       	ldi	r24, 0x8F	; 143
    942c:	9d e0       	ldi	r25, 0x0D	; 13
    942e:	0e 94 98 40 	call	0x8130	; 0x8130 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    9432:	40 91 02 01 	lds	r20, 0x0102
    9436:	6f e0       	ldi	r22, 0x0F	; 15
    9438:	8e e1       	ldi	r24, 0x1E	; 30
    943a:	9a e0       	ldi	r25, 0x0A	; 10
    943c:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <render_banter>
    9440:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    9444:	40 91 01 01 	lds	r20, 0x0101
    9448:	60 e0       	ldi	r22, 0x00	; 0
    944a:	8f e8       	ldi	r24, 0x8F	; 143
    944c:	9d e0       	ldi	r25, 0x0D	; 13
    944e:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <render_banter>
    9452:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    9456:	60 e0       	ldi	r22, 0x00	; 0
    9458:	8e e1       	ldi	r24, 0x1E	; 30
    945a:	9a e0       	ldi	r25, 0x0A	; 10
    945c:	0e 94 6d 3f 	call	0x7eda	; 0x7eda <render_player>
		render_player(&player2, p2_index);
    9460:	61 2f       	mov	r22, r17
    9462:	8f e8       	ldi	r24, 0x8F	; 143
    9464:	9d e0       	ldi	r25, 0x0D	; 13
    9466:	0e 94 6d 3f 	call	0x7eda	; 0x7eda <render_player>
		render_shot(&player1, p1_shot_index);
    946a:	6d 2f       	mov	r22, r29
    946c:	8e e1       	ldi	r24, 0x1E	; 30
    946e:	9a e0       	ldi	r25, 0x0A	; 10
    9470:	0e 94 96 3f 	call	0x7f2c	; 0x7f2c <render_shot>
		render_shot(&player2, p2_shot_index);
    9474:	6c 2f       	mov	r22, r28
    9476:	8f e8       	ldi	r24, 0x8F	; 143
    9478:	9d e0       	ldi	r25, 0x0D	; 13
    947a:	0e 94 96 3f 	call	0x7f2c	; 0x7f2c <render_shot>
		render_tile_explosions(&tile_animations);
    947e:	85 e0       	ldi	r24, 0x05	; 5
    9480:	9a e0       	ldi	r25, 0x0A	; 10
    9482:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    9486:	2f e0       	ldi	r18, 0x0F	; 15
    9488:	4f e8       	ldi	r20, 0x8F	; 143
    948a:	5d e0       	ldi	r21, 0x0D	; 13
    948c:	6e e1       	ldi	r22, 0x1E	; 30
    948e:	7a e0       	ldi	r23, 0x0A	; 10
    9490:	c6 01       	movw	r24, r12
    9492:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    9496:	20 e0       	ldi	r18, 0x00	; 0
    9498:	4e e1       	ldi	r20, 0x1E	; 30
    949a:	5a e0       	ldi	r21, 0x0A	; 10
    949c:	6f e8       	ldi	r22, 0x8F	; 143
    949e:	7d e0       	ldi	r23, 0x0D	; 13
    94a0:	c7 01       	movw	r24, r14
    94a2:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    94a6:	2f e0       	ldi	r18, 0x0F	; 15
    94a8:	40 e0       	ldi	r20, 0x00	; 0
    94aa:	6f e8       	ldi	r22, 0x8F	; 143
    94ac:	7d e0       	ldi	r23, 0x0D	; 13
    94ae:	8e e1       	ldi	r24, 0x1E	; 30
    94b0:	9a e0       	ldi	r25, 0x0A	; 10
    94b2:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    94b6:	20 e0       	ldi	r18, 0x00	; 0
    94b8:	4f e0       	ldi	r20, 0x0F	; 15
    94ba:	6e e1       	ldi	r22, 0x1E	; 30
    94bc:	7a e0       	ldi	r23, 0x0A	; 10
    94be:	8f e8       	ldi	r24, 0x8F	; 143
    94c0:	9d e0       	ldi	r25, 0x0D	; 13
}
    94c2:	df 91       	pop	r29
    94c4:	cf 91       	pop	r28
    94c6:	1f 91       	pop	r17
    94c8:	ff 90       	pop	r15
    94ca:	ef 90       	pop	r14
    94cc:	df 90       	pop	r13
    94ce:	cf 90       	pop	r12

	// Update
	update_level_helper(p1, &player1, &player2, 15);
	update_level_helper(p2, &player2, &player1, 0);
	collision_detect_player(&player1, &player2, 0, 15);
	collision_detect_player(&player2, &player1, 15, 0);
    94d0:	0c 94 ea 44 	jmp	0x89d4	; 0x89d4 <collision_detect_player>

000094d4 <update_tank_rank>:
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	// Update
	if (p1->pressed & BTN_X)
    94d4:	fc 01       	movw	r30, r24
    94d6:	80 81       	ld	r24, Z
    94d8:	91 81       	ldd	r25, Z+1	; 0x01
    94da:	91 ff       	sbrs	r25, 1
    94dc:	04 c0       	rjmp	.+8      	; 0x94e6 <update_tank_rank+0x12>
	{
		fade_through();
    94de:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <fade_through>
		load_splash();
    94e2:	0c 94 22 47 	jmp	0x8e44	; 0x8e44 <load_splash>
    94e6:	08 95       	ret

000094e8 <_handle_select_helper>:
	}
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    94e8:	0f 93       	push	r16
    94ea:	1f 93       	push	r17
    94ec:	cf 93       	push	r28
    94ee:	df 93       	push	r29
    94f0:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    94f2:	fb 01       	movw	r30, r22
    94f4:	20 81       	ld	r18, Z
    94f6:	31 81       	ldd	r19, Z+1	; 0x01
    94f8:	d9 01       	movw	r26, r18
    94fa:	a0 71       	andi	r26, 0x10	; 16
    94fc:	bb 27       	eor	r27, r27
    94fe:	24 ff       	sbrs	r18, 4
    9500:	09 c0       	rjmp	.+18     	; 0x9514 <_handle_select_helper+0x2c>
    9502:	8d 81       	ldd	r24, Y+5	; 0x05
    9504:	81 11       	cpse	r24, r1
    9506:	06 c0       	rjmp	.+12     	; 0x9514 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    9508:	88 81       	ld	r24, Y
    950a:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    950c:	87 ff       	sbrs	r24, 7
    950e:	0f c0       	rjmp	.+30     	; 0x952e <_handle_select_helper+0x46>
    9510:	18 82       	st	Y, r1
    9512:	95 c0       	rjmp	.+298    	; 0x963e <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    9514:	b9 01       	movw	r22, r18
    9516:	60 72       	andi	r22, 0x20	; 32
    9518:	77 27       	eor	r23, r23
    951a:	25 ff       	sbrs	r18, 5
    951c:	0a c0       	rjmp	.+20     	; 0x9532 <_handle_select_helper+0x4a>
    951e:	8d 81       	ldd	r24, Y+5	; 0x05
    9520:	81 11       	cpse	r24, r1
    9522:	07 c0       	rjmp	.+14     	; 0x9532 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    9524:	88 81       	ld	r24, Y
    9526:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    9528:	89 30       	cpi	r24, 0x09	; 9
    952a:	0c f0       	brlt	.+2      	; 0x952e <_handle_select_helper+0x46>
    952c:	88 e0       	ldi	r24, 0x08	; 8
    952e:	88 83       	st	Y, r24
    9530:	86 c0       	rjmp	.+268    	; 0x963e <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    9532:	f9 01       	movw	r30, r18
    9534:	ee 27       	eor	r30, r30
    9536:	f1 70       	andi	r31, 0x01	; 1
    9538:	30 ff       	sbrs	r19, 0
    953a:	14 c0       	rjmp	.+40     	; 0x9564 <_handle_select_helper+0x7c>
    953c:	8d 81       	ldd	r24, Y+5	; 0x05
    953e:	81 11       	cpse	r24, r1
    9540:	11 c0       	rjmp	.+34     	; 0x9564 <_handle_select_helper+0x7c>
	{
		ps->select_state = EDITING;
    9542:	81 e0       	ldi	r24, 0x01	; 1
    9544:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    9546:	69 91       	ld	r22, Y+
    9548:	f3 e0       	ldi	r31, 0x03	; 3
    954a:	6f 02       	muls	r22, r31
    954c:	b0 01       	movw	r22, r0
    954e:	11 24       	eor	r1, r1
    9550:	6a 5d       	subi	r22, 0xDA	; 218
    9552:	7e 4f       	sbci	r23, 0xFE	; 254
    9554:	43 e0       	ldi	r20, 0x03	; 3
    9556:	ce 01       	movw	r24, r28
	else if ((p->pressed & BTN_X))
	{
		fade_through();
		load_splash();
	}
}
    9558:	df 91       	pop	r29
    955a:	cf 91       	pop	r28
    955c:	1f 91       	pop	r17
    955e:	0f 91       	pop	r16
		if (ps->handle_id > 8) ps->handle_id = 8;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    9560:	0c 94 53 3b 	jmp	0x76a6	; 0x76a6 <LBCopyChars>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    9564:	27 ff       	sbrs	r18, 7
    9566:	0a c0       	rjmp	.+20     	; 0x957c <_handle_select_helper+0x94>
    9568:	8d 81       	ldd	r24, Y+5	; 0x05
    956a:	81 30       	cpi	r24, 0x01	; 1
    956c:	39 f4       	brne	.+14     	; 0x957c <_handle_select_helper+0x94>
	{
		ps->char_index++;
    956e:	8c 81       	ldd	r24, Y+4	; 0x04
    9570:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    9572:	83 30       	cpi	r24, 0x03	; 3
    9574:	0c f0       	brlt	.+2      	; 0x9578 <_handle_select_helper+0x90>
    9576:	82 e0       	ldi	r24, 0x02	; 2
    9578:	8c 83       	std	Y+4, r24	; 0x04
    957a:	61 c0       	rjmp	.+194    	; 0x963e <_handle_select_helper+0x156>
    957c:	ca 01       	movw	r24, r20
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    957e:	26 ff       	sbrs	r18, 6
    9580:	09 c0       	rjmp	.+18     	; 0x9594 <_handle_select_helper+0xac>
    9582:	4d 81       	ldd	r20, Y+5	; 0x05
    9584:	41 30       	cpi	r20, 0x01	; 1
    9586:	29 f5       	brne	.+74     	; 0x95d2 <_handle_select_helper+0xea>
	{
		ps->char_index--;
    9588:	8c 81       	ldd	r24, Y+4	; 0x04
    958a:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    958c:	87 ff       	sbrs	r24, 7
    958e:	f4 cf       	rjmp	.-24     	; 0x9578 <_handle_select_helper+0x90>
    9590:	1c 82       	std	Y+4, r1	; 0x04
    9592:	55 c0       	rjmp	.+170    	; 0x963e <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    9594:	ab 2b       	or	r26, r27
    9596:	61 f0       	breq	.+24     	; 0x95b0 <_handle_select_helper+0xc8>
    9598:	8d 81       	ldd	r24, Y+5	; 0x05
    959a:	81 30       	cpi	r24, 0x01	; 1
    959c:	e1 f5       	brne	.+120    	; 0x9616 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]--;
    959e:	8c 81       	ldd	r24, Y+4	; 0x04
    95a0:	c8 0f       	add	r28, r24
    95a2:	d1 1d       	adc	r29, r1
    95a4:	99 81       	ldd	r25, Y+1	; 0x01
    95a6:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    95a8:	91 34       	cpi	r25, 0x41	; 65
    95aa:	70 f4       	brcc	.+28     	; 0x95c8 <_handle_select_helper+0xe0>
    95ac:	81 e4       	ldi	r24, 0x41	; 65
    95ae:	0f c0       	rjmp	.+30     	; 0x95ce <_handle_select_helper+0xe6>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    95b0:	67 2b       	or	r22, r23
    95b2:	89 f0       	breq	.+34     	; 0x95d6 <_handle_select_helper+0xee>
    95b4:	8d 81       	ldd	r24, Y+5	; 0x05
    95b6:	81 30       	cpi	r24, 0x01	; 1
    95b8:	71 f5       	brne	.+92     	; 0x9616 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]++;
    95ba:	8c 81       	ldd	r24, Y+4	; 0x04
    95bc:	c8 0f       	add	r28, r24
    95be:	d1 1d       	adc	r29, r1
    95c0:	99 81       	ldd	r25, Y+1	; 0x01
    95c2:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    95c4:	9b 35       	cpi	r25, 0x5B	; 91
    95c6:	10 f4       	brcc	.+4      	; 0x95cc <_handle_select_helper+0xe4>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    95c8:	99 83       	std	Y+1, r25	; 0x01
    95ca:	39 c0       	rjmp	.+114    	; 0x963e <_handle_select_helper+0x156>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    95cc:	8a e5       	ldi	r24, 0x5A	; 90
    95ce:	89 83       	std	Y+1, r24	; 0x01
    95d0:	36 c0       	rjmp	.+108    	; 0x963e <_handle_select_helper+0x156>
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    95d2:	67 2b       	or	r22, r23
    95d4:	01 f5       	brne	.+64     	; 0x9616 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    95d6:	ef 2b       	or	r30, r31
    95d8:	f1 f0       	breq	.+60     	; 0x9616 <_handle_select_helper+0x12e>
    95da:	4d 81       	ldd	r20, Y+5	; 0x05
    95dc:	41 30       	cpi	r20, 0x01	; 1
    95de:	d9 f4       	brne	.+54     	; 0x9616 <_handle_select_helper+0x12e>
	{
		player->handle_id = ps->handle_id;
    95e0:	fe 01       	movw	r30, r28
    95e2:	21 91       	ld	r18, Z+
    95e4:	8f 01       	movw	r16, r30
    95e6:	fc 01       	movw	r30, r24
    95e8:	22 87       	std	Z+10, r18	; 0x0a
		LBCopyChars(player->handle, ps->handle, 3);
    95ea:	43 e0       	ldi	r20, 0x03	; 3
    95ec:	b8 01       	movw	r22, r16
    95ee:	0b 96       	adiw	r24, 0x0b	; 11
    95f0:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    95f4:	88 81       	ld	r24, Y
    95f6:	f3 e0       	ldi	r31, 0x03	; 3
    95f8:	8f 02       	muls	r24, r31
    95fa:	c0 01       	movw	r24, r0
    95fc:	11 24       	eor	r1, r1
    95fe:	43 e0       	ldi	r20, 0x03	; 3
    9600:	b8 01       	movw	r22, r16
    9602:	8a 5d       	subi	r24, 0xDA	; 218
    9604:	9e 4f       	sbci	r25, 0xFE	; 254
    9606:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    960a:	84 e2       	ldi	r24, 0x24	; 36
    960c:	91 e0       	ldi	r25, 0x01	; 1
    960e:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <EepromWriteBlock>
	{
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    9612:	82 e0       	ldi	r24, 0x02	; 2
    9614:	0a c0       	rjmp	.+20     	; 0x962a <_handle_select_helper+0x142>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    9616:	31 ff       	sbrs	r19, 1
    9618:	12 c0       	rjmp	.+36     	; 0x963e <_handle_select_helper+0x156>
    961a:	8d 81       	ldd	r24, Y+5	; 0x05
    961c:	81 30       	cpi	r24, 0x01	; 1
    961e:	11 f4       	brne	.+4      	; 0x9624 <_handle_select_helper+0x13c>
	{
		ps->select_state = SELECTING;
    9620:	1d 82       	std	Y+5, r1	; 0x05
    9622:	0d c0       	rjmp	.+26     	; 0x963e <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    9624:	82 30       	cpi	r24, 0x02	; 2
    9626:	19 f4       	brne	.+6      	; 0x962e <_handle_select_helper+0x146>
		{
			ps->select_state = EDITING;
    9628:	81 e0       	ldi	r24, 0x01	; 1
    962a:	8d 83       	std	Y+5, r24	; 0x05
    962c:	08 c0       	rjmp	.+16     	; 0x963e <_handle_select_helper+0x156>
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
    962e:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <fade_through>
		load_splash();
	}
}
    9632:	df 91       	pop	r29
    9634:	cf 91       	pop	r28
    9636:	1f 91       	pop	r17
    9638:	0f 91       	pop	r16
			ps->select_state = EDITING;
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
		load_splash();
    963a:	0c 94 22 47 	jmp	0x8e44	; 0x8e44 <load_splash>
	}
}
    963e:	df 91       	pop	r29
    9640:	cf 91       	pop	r28
    9642:	1f 91       	pop	r17
    9644:	0f 91       	pop	r16
    9646:	08 95       	ret

00009648 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    9648:	af 92       	push	r10
    964a:	bf 92       	push	r11
    964c:	cf 92       	push	r12
    964e:	df 92       	push	r13
    9650:	ef 92       	push	r14
    9652:	ff 92       	push	r15
    9654:	0f 93       	push	r16
    9656:	1f 93       	push	r17
    9658:	cf 93       	push	r28
    965a:	df 93       	push	r29
    965c:	00 d0       	rcall	.+0      	; 0x965e <_handle_select_render_helper+0x16>
    965e:	1f 92       	push	r1
    9660:	cd b7       	in	r28, 0x3d	; 61
    9662:	de b7       	in	r29, 0x3e	; 62
    9664:	7c 01       	movw	r14, r24
    9666:	b4 2e       	mov	r11, r20
    9668:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    966a:	80 e2       	ldi	r24, 0x20	; 32
    966c:	89 83       	std	Y+1, r24	; 0x01
    966e:	8a 83       	std	Y+2, r24	; 0x02
    9670:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    9672:	f7 01       	movw	r30, r14
    9674:	85 81       	ldd	r24, Z+5	; 0x05
    9676:	81 11       	cpse	r24, r1
    9678:	1d c0       	rjmp	.+58     	; 0x96b4 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_ball, 0);
    967a:	40 e0       	ldi	r20, 0x00	; 0
    967c:	67 e9       	ldi	r22, 0x97	; 151
    967e:	70 e2       	ldi	r23, 0x20	; 32
    9680:	82 2f       	mov	r24, r18
    9682:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    9686:	40 e0       	ldi	r20, 0x00	; 0
    9688:	6c ed       	ldi	r22, 0xDC	; 220
    968a:	70 e2       	ldi	r23, 0x20	; 32
    968c:	81 e0       	ldi	r24, 0x01	; 1
    968e:	81 0f       	add	r24, r17
    9690:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    9694:	f7 01       	movw	r30, r14
    9696:	40 81       	ld	r20, Z
    9698:	44 0f       	add	r20, r20
    969a:	44 0f       	add	r20, r20
    969c:	44 0f       	add	r20, r20
    969e:	40 5c       	subi	r20, 0xC0	; 192
    96a0:	01 e0       	ldi	r16, 0x01	; 1
    96a2:	21 e0       	ldi	r18, 0x01	; 1
    96a4:	6b 2d       	mov	r22, r11
    96a6:	66 0f       	add	r22, r22
    96a8:	66 0f       	add	r22, r22
    96aa:	66 0f       	add	r22, r22
    96ac:	81 2f       	mov	r24, r17
    96ae:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
    96b2:	6f c0       	rjmp	.+222    	; 0x9792 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    96b4:	81 30       	cpi	r24, 0x01	; 1
    96b6:	09 f0       	breq	.+2      	; 0x96ba <_handle_select_render_helper+0x72>
    96b8:	44 c0       	rjmp	.+136    	; 0x9742 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_ball, 0);
    96ba:	40 e0       	ldi	r20, 0x00	; 0
    96bc:	67 e9       	ldi	r22, 0x97	; 151
    96be:	70 e2       	ldi	r23, 0x20	; 32
    96c0:	82 2f       	mov	r24, r18
    96c2:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
		MapSprite2(idx+1, map_ball, 0);
    96c6:	aa 24       	eor	r10, r10
    96c8:	a3 94       	inc	r10
    96ca:	a1 0e       	add	r10, r17
    96cc:	40 e0       	ldi	r20, 0x00	; 0
    96ce:	67 e9       	ldi	r22, 0x97	; 151
    96d0:	70 e2       	ldi	r23, 0x20	; 32
    96d2:	8a 2d       	mov	r24, r10
    96d4:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    96d8:	cb 2c       	mov	r12, r11
    96da:	d1 2c       	mov	r13, r1
    96dc:	f5 e0       	ldi	r31, 0x05	; 5
    96de:	cf 0e       	add	r12, r31
    96e0:	d1 1c       	adc	r13, r1
    96e2:	f7 01       	movw	r30, r14
    96e4:	40 81       	ld	r20, Z
    96e6:	44 0f       	add	r20, r20
    96e8:	44 0f       	add	r20, r20
    96ea:	44 0f       	add	r20, r20
    96ec:	48 5c       	subi	r20, 0xC8	; 200
    96ee:	84 81       	ldd	r24, Z+4	; 0x04
    96f0:	b6 01       	movw	r22, r12
    96f2:	68 0f       	add	r22, r24
    96f4:	71 1d       	adc	r23, r1
    96f6:	87 fd       	sbrc	r24, 7
    96f8:	7a 95       	dec	r23
    96fa:	66 0f       	add	r22, r22
    96fc:	66 0f       	add	r22, r22
    96fe:	66 0f       	add	r22, r22
    9700:	01 e0       	ldi	r16, 0x01	; 1
    9702:	21 e0       	ldi	r18, 0x01	; 1
    9704:	81 2f       	mov	r24, r17
    9706:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    970a:	f7 01       	movw	r30, r14
    970c:	40 81       	ld	r20, Z
    970e:	44 0f       	add	r20, r20
    9710:	44 0f       	add	r20, r20
    9712:	44 0f       	add	r20, r20
    9714:	48 5b       	subi	r20, 0xB8	; 184
    9716:	84 81       	ldd	r24, Z+4	; 0x04
    9718:	c8 0e       	add	r12, r24
    971a:	d1 1c       	adc	r13, r1
    971c:	87 fd       	sbrc	r24, 7
    971e:	da 94       	dec	r13
    9720:	6c 2d       	mov	r22, r12
    9722:	66 0f       	add	r22, r22
    9724:	66 0f       	add	r22, r22
    9726:	66 0f       	add	r22, r22
    9728:	21 e0       	ldi	r18, 0x01	; 1
    972a:	8a 2d       	mov	r24, r10
    972c:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    9730:	43 e0       	ldi	r20, 0x03	; 3
    9732:	b7 01       	movw	r22, r14
    9734:	6f 5f       	subi	r22, 0xFF	; 255
    9736:	7f 4f       	sbci	r23, 0xFF	; 255
    9738:	ce 01       	movw	r24, r28
    973a:	01 96       	adiw	r24, 0x01	; 1
    973c:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <LBCopyChars>
    9740:	28 c0       	rjmp	.+80     	; 0x9792 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    9742:	82 30       	cpi	r24, 0x02	; 2
    9744:	31 f5       	brne	.+76     	; 0x9792 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    9746:	c4 2e       	mov	r12, r20
    9748:	d1 2c       	mov	r13, r1
    974a:	48 e2       	ldi	r20, 0x28	; 40
    974c:	65 e0       	ldi	r22, 0x05	; 5
    974e:	70 e0       	ldi	r23, 0x00	; 0
    9750:	c6 01       	movw	r24, r12
    9752:	06 96       	adiw	r24, 0x06	; 6
    9754:	0e 94 85 3a 	call	0x750a	; 0x750a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    9758:	23 e0       	ldi	r18, 0x03	; 3
    975a:	a7 01       	movw	r20, r14
    975c:	4f 5f       	subi	r20, 0xFF	; 255
    975e:	5f 4f       	sbci	r21, 0xFF	; 255
    9760:	65 e0       	ldi	r22, 0x05	; 5
    9762:	87 e0       	ldi	r24, 0x07	; 7
    9764:	8b 0d       	add	r24, r11
    9766:	0e 94 5f 3b 	call	0x76be	; 0x76be <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    976a:	49 e2       	ldi	r20, 0x29	; 41
    976c:	65 e0       	ldi	r22, 0x05	; 5
    976e:	70 e0       	ldi	r23, 0x00	; 0
    9770:	c6 01       	movw	r24, r12
    9772:	0a 96       	adiw	r24, 0x0a	; 10
    9774:	0e 94 85 3a 	call	0x750a	; 0x750a <PrintChar>
		MapSprite2(idx, map_none, 0);
    9778:	40 e0       	ldi	r20, 0x00	; 0
    977a:	6c ed       	ldi	r22, 0xDC	; 220
    977c:	70 e2       	ldi	r23, 0x20	; 32
    977e:	81 2f       	mov	r24, r17
    9780:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    9784:	40 e0       	ldi	r20, 0x00	; 0
    9786:	6c ed       	ldi	r22, 0xDC	; 220
    9788:	70 e2       	ldi	r23, 0x20	; 32
    978a:	81 e0       	ldi	r24, 0x01	; 1
    978c:	81 0f       	add	r24, r17
    978e:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    9792:	f7 01       	movw	r30, r14
    9794:	60 81       	ld	r22, Z
    9796:	68 5f       	subi	r22, 0xF8	; 248
    9798:	23 e0       	ldi	r18, 0x03	; 3
    979a:	ae 01       	movw	r20, r28
    979c:	4f 5f       	subi	r20, 0xFF	; 255
    979e:	5f 4f       	sbci	r21, 0xFF	; 255
    97a0:	85 e0       	ldi	r24, 0x05	; 5
    97a2:	8b 0d       	add	r24, r11
    97a4:	0e 94 5f 3b 	call	0x76be	; 0x76be <LBPrintStr>
}
    97a8:	0f 90       	pop	r0
    97aa:	0f 90       	pop	r0
    97ac:	0f 90       	pop	r0
    97ae:	df 91       	pop	r29
    97b0:	cf 91       	pop	r28
    97b2:	1f 91       	pop	r17
    97b4:	0f 91       	pop	r16
    97b6:	ff 90       	pop	r15
    97b8:	ef 90       	pop	r14
    97ba:	df 90       	pop	r13
    97bc:	cf 90       	pop	r12
    97be:	bf 90       	pop	r11
    97c0:	af 90       	pop	r10
    97c2:	08 95       	ret

000097c4 <load_handle_select>:

void load_handle_select()
{
    97c4:	8f 92       	push	r8
    97c6:	9f 92       	push	r9
    97c8:	af 92       	push	r10
    97ca:	bf 92       	push	r11
    97cc:	cf 92       	push	r12
    97ce:	df 92       	push	r13
    97d0:	ef 92       	push	r14
    97d2:	ff 92       	push	r15
    97d4:	0f 93       	push	r16
    97d6:	1f 93       	push	r17
    97d8:	cf 93       	push	r28
    97da:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    97dc:	82 e0       	ldi	r24, 0x02	; 2
    97de:	80 93 01 0a 	sts	0x0A01, r24
	clear_sprites();
    97e2:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    97e6:	40 e0       	ldi	r20, 0x00	; 0
    97e8:	66 ed       	ldi	r22, 0xD6	; 214
    97ea:	70 e2       	ldi	r23, 0x20	; 32
    97ec:	80 e0       	ldi	r24, 0x00	; 0
    97ee:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    97f2:	40 e0       	ldi	r20, 0x00	; 0
    97f4:	6e eb       	ldi	r22, 0xBE	; 190
    97f6:	70 e2       	ldi	r23, 0x20	; 32
    97f8:	84 e0       	ldi	r24, 0x04	; 4
    97fa:	0e 94 68 39 	call	0x72d0	; 0x72d0 <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    97fe:	02 e0       	ldi	r16, 0x02	; 2
    9800:	22 e0       	ldi	r18, 0x02	; 2
    9802:	40 e2       	ldi	r20, 0x20	; 32
    9804:	68 e1       	ldi	r22, 0x18	; 24
    9806:	80 e0       	ldi	r24, 0x00	; 0
    9808:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    980c:	22 e0       	ldi	r18, 0x02	; 2
    980e:	40 e2       	ldi	r20, 0x20	; 32
    9810:	60 ea       	ldi	r22, 0xA0	; 160
    9812:	84 e0       	ldi	r24, 0x04	; 4
    9814:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
	Print(9, 1, strHandlesTitle);
    9818:	4e e7       	ldi	r20, 0x7E	; 126
    981a:	52 e0       	ldi	r21, 0x02	; 2
    981c:	61 e0       	ldi	r22, 0x01	; 1
    981e:	70 e0       	ldi	r23, 0x00	; 0
    9820:	89 e0       	ldi	r24, 0x09	; 9
    9822:	90 e0       	ldi	r25, 0x00	; 0
    9824:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(6, 5, strPlayer1);
    9828:	4d e6       	ldi	r20, 0x6D	; 109
    982a:	52 e0       	ldi	r21, 0x02	; 2
    982c:	65 e0       	ldi	r22, 0x05	; 5
    982e:	70 e0       	ldi	r23, 0x00	; 0
    9830:	86 e0       	ldi	r24, 0x06	; 6
    9832:	90 e0       	ldi	r25, 0x00	; 0
    9834:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(23, 5, strPlayer2);
    9838:	4a e6       	ldi	r20, 0x6A	; 106
    983a:	52 e0       	ldi	r21, 0x02	; 2
    983c:	65 e0       	ldi	r22, 0x05	; 5
    983e:	70 e0       	ldi	r23, 0x00	; 0
    9840:	87 e1       	ldi	r24, 0x17	; 23
    9842:	90 e0       	ldi	r25, 0x00	; 0
    9844:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
    9848:	86 e2       	ldi	r24, 0x26	; 38
    984a:	e8 2e       	mov	r14, r24
    984c:	81 e0       	ldi	r24, 0x01	; 1
    984e:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    9850:	c0 e0       	ldi	r28, 0x00	; 0
    9852:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    9854:	93 e0       	ldi	r25, 0x03	; 3
    9856:	a9 2e       	mov	r10, r25
    9858:	b1 2c       	mov	r11, r1
    985a:	67 01       	movw	r12, r14
    985c:	ce 01       	movw	r24, r28
    985e:	b5 01       	movw	r22, r10
    9860:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <__divmodhi4>
    9864:	4c 01       	movw	r8, r24
    9866:	8b 01       	movw	r16, r22
    9868:	08 5f       	subi	r16, 0xF8	; 248
    986a:	1f 4f       	sbci	r17, 0xFF	; 255
    986c:	f7 01       	movw	r30, r14
    986e:	41 91       	ld	r20, Z+
    9870:	7f 01       	movw	r14, r30
    9872:	b8 01       	movw	r22, r16
    9874:	03 96       	adiw	r24, 0x03	; 3
    9876:	0e 94 85 3a 	call	0x750a	; 0x750a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    987a:	f6 01       	movw	r30, r12
    987c:	40 81       	ld	r20, Z
    987e:	b8 01       	movw	r22, r16
    9880:	c4 01       	movw	r24, r8
    9882:	44 96       	adiw	r24, 0x14	; 20
    9884:	0e 94 85 3a 	call	0x750a	; 0x750a <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, strHandlesTitle);
	Print(6, 5, strPlayer1);
	Print(23, 5, strPlayer2);
	for (int i = 0; i < 27; i += 1)
    9888:	21 96       	adiw	r28, 0x01	; 1
    988a:	cb 31       	cpi	r28, 0x1B	; 27
    988c:	d1 05       	cpc	r29, r1
    988e:	29 f7       	brne	.-54     	; 0x985a <load_handle_select+0x96>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
    9890:	4f e5       	ldi	r20, 0x5F	; 95
    9892:	52 e0       	ldi	r21, 0x02	; 2
    9894:	65 e1       	ldi	r22, 0x15	; 21
    9896:	70 e0       	ldi	r23, 0x00	; 0
    9898:	88 e0       	ldi	r24, 0x08	; 8
    989a:	90 e0       	ldi	r25, 0x00	; 0
    989c:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(8, 22, strConfirmHandle);
    98a0:	43 e5       	ldi	r20, 0x53	; 83
    98a2:	52 e0       	ldi	r21, 0x02	; 2
    98a4:	66 e1       	ldi	r22, 0x16	; 22
    98a6:	70 e0       	ldi	r23, 0x00	; 0
    98a8:	88 e0       	ldi	r24, 0x08	; 8
    98aa:	90 e0       	ldi	r25, 0x00	; 0
    98ac:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(8, 23, strCancelHandle);
    98b0:	48 e4       	ldi	r20, 0x48	; 72
    98b2:	52 e0       	ldi	r21, 0x02	; 2
    98b4:	67 e1       	ldi	r22, 0x17	; 23
    98b6:	70 e0       	ldi	r23, 0x00	; 0
    98b8:	88 e0       	ldi	r24, 0x08	; 8
    98ba:	90 e0       	ldi	r25, 0x00	; 0
    98bc:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>
	Print(8, 24, strChangeHandle);
    98c0:	49 e3       	ldi	r20, 0x39	; 57
    98c2:	52 e0       	ldi	r21, 0x02	; 2
    98c4:	68 e1       	ldi	r22, 0x18	; 24
    98c6:	70 e0       	ldi	r23, 0x00	; 0
    98c8:	88 e0       	ldi	r24, 0x08	; 8
    98ca:	90 e0       	ldi	r25, 0x00	; 0
}
    98cc:	df 91       	pop	r29
    98ce:	cf 91       	pop	r28
    98d0:	1f 91       	pop	r17
    98d2:	0f 91       	pop	r16
    98d4:	ff 90       	pop	r15
    98d6:	ef 90       	pop	r14
    98d8:	df 90       	pop	r13
    98da:	cf 90       	pop	r12
    98dc:	bf 90       	pop	r11
    98de:	af 90       	pop	r10
    98e0:	9f 90       	pop	r9
    98e2:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
	Print(8, 22, strConfirmHandle);
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
    98e4:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <Print>

000098e8 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    98e8:	0f 93       	push	r16
    98ea:	cf 93       	push	r28
    98ec:	df 93       	push	r29
    98ee:	ec 01       	movw	r28, r24
	// Render
	switch (game.selection)
    98f0:	90 91 04 0a 	lds	r25, 0x0A04
    98f4:	91 30       	cpi	r25, 0x01	; 1
    98f6:	41 f0       	breq	.+16     	; 0x9908 <update_splash+0x20>
    98f8:	92 30       	cpi	r25, 0x02	; 2
    98fa:	51 f0       	breq	.+20     	; 0x9910 <update_splash+0x28>
    98fc:	91 11       	cpse	r25, r1
    98fe:	0f c0       	rjmp	.+30     	; 0x991e <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    9900:	01 e0       	ldi	r16, 0x01	; 1
    9902:	21 e0       	ldi	r18, 0x01	; 1
    9904:	48 e6       	ldi	r20, 0x68	; 104
    9906:	07 c0       	rjmp	.+14     	; 0x9916 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    9908:	01 e0       	ldi	r16, 0x01	; 1
    990a:	21 e0       	ldi	r18, 0x01	; 1
    990c:	40 e7       	ldi	r20, 0x70	; 112
    990e:	03 c0       	rjmp	.+6      	; 0x9916 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    9910:	01 e0       	ldi	r16, 0x01	; 1
    9912:	21 e0       	ldi	r18, 0x01	; 1
    9914:	48 e7       	ldi	r20, 0x78	; 120
    9916:	60 e3       	ldi	r22, 0x30	; 48
    9918:	80 e0       	ldi	r24, 0x00	; 0
    991a:	0e 94 ba 39 	call	0x7374	; 0x7374 <MoveSprite>
			break;
	}
	Print(9, 21, strSelectHandle);
    991e:	4f e5       	ldi	r20, 0x5F	; 95
    9920:	52 e0       	ldi	r21, 0x02	; 2
    9922:	65 e1       	ldi	r22, 0x15	; 21
    9924:	70 e0       	ldi	r23, 0x00	; 0
    9926:	89 e0       	ldi	r24, 0x09	; 9
    9928:	90 e0       	ldi	r25, 0x00	; 0
    992a:	0e 94 6a 3a 	call	0x74d4	; 0x74d4 <Print>

	// Update
	if (p1->pressed & BTN_UP)
    992e:	88 81       	ld	r24, Y
    9930:	99 81       	ldd	r25, Y+1	; 0x01
    9932:	84 ff       	sbrs	r24, 4
    9934:	10 c0       	rjmp	.+32     	; 0x9956 <update_splash+0x6e>
	{
		game.selection--;
    9936:	80 91 04 0a 	lds	r24, 0x0A04
    993a:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    993c:	87 ff       	sbrs	r24, 7
    993e:	13 c0       	rjmp	.+38     	; 0x9966 <update_splash+0x7e>
    9940:	10 92 04 0a 	sts	0x0A04, r1
		SFX_NAVIGATE;
    9944:	2f ef       	ldi	r18, 0xFF	; 255
    9946:	47 e1       	ldi	r20, 0x17	; 23
    9948:	67 e0       	ldi	r22, 0x07	; 7
    994a:	84 e0       	ldi	r24, 0x04	; 4
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    994c:	df 91       	pop	r29
    994e:	cf 91       	pop	r28
    9950:	0f 91       	pop	r16
	// Update
	if (p1->pressed & BTN_UP)
	{
		game.selection--;
		if (game.selection < PVCPU) game.selection = PVCPU;
		SFX_NAVIGATE;
    9952:	0c 94 c2 2f 	jmp	0x5f84	; 0x5f84 <TriggerNote>
	}
	else if (p1->pressed & BTN_DOWN)
    9956:	85 ff       	sbrs	r24, 5
    9958:	09 c0       	rjmp	.+18     	; 0x996c <update_splash+0x84>
	{
		game.selection++;
    995a:	80 91 04 0a 	lds	r24, 0x0A04
    995e:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    9960:	83 30       	cpi	r24, 0x03	; 3
    9962:	0c f0       	brlt	.+2      	; 0x9966 <update_splash+0x7e>
    9964:	82 e0       	ldi	r24, 0x02	; 2
    9966:	80 93 04 0a 	sts	0x0A04, r24
    996a:	ec cf       	rjmp	.-40     	; 0x9944 <update_splash+0x5c>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    996c:	90 ff       	sbrs	r25, 0
    996e:	20 c0       	rjmp	.+64     	; 0x99b0 <update_splash+0xc8>
    9970:	80 91 04 0a 	lds	r24, 0x0A04
    9974:	82 30       	cpi	r24, 0x02	; 2
    9976:	78 f4       	brcc	.+30     	; 0x9996 <update_splash+0xae>
	{
		p1s.select_state = SELECTING;
    9978:	10 92 6f 09 	sts	0x096F, r1
		p2s.select_state = SELECTING;
    997c:	10 92 69 09 	sts	0x0969, r1
		fade_through();
    9980:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <fade_through>
		load_eeprom(&handles);
    9984:	84 e2       	ldi	r24, 0x24	; 36
    9986:	91 e0       	ldi	r25, 0x01	; 1
    9988:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <load_eeprom>
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    998c:	df 91       	pop	r29
    998e:	cf 91       	pop	r28
    9990:	0f 91       	pop	r16
	{
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    9992:	0c 94 e2 4b 	jmp	0x97c4	; 0x97c4 <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    9996:	82 30       	cpi	r24, 0x02	; 2
    9998:	59 f4       	brne	.+22     	; 0x99b0 <update_splash+0xc8>
	{
		fade_through();
    999a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <fade_through>
		load_eeprom(&scores);
    999e:	84 e0       	ldi	r24, 0x04	; 4
    99a0:	91 e0       	ldi	r25, 0x01	; 1
    99a2:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <load_eeprom>
		load_tank_rank();
		return;
	}
}
    99a6:	df 91       	pop	r29
    99a8:	cf 91       	pop	r28
    99aa:	0f 91       	pop	r16
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    99ac:	0c 94 58 47 	jmp	0x8eb0	; 0x8eb0 <load_tank_rank>
		return;
	}
}
    99b0:	df 91       	pop	r29
    99b2:	cf 91       	pop	r28
    99b4:	0f 91       	pop	r16
    99b6:	08 95       	ret

000099b8 <update_handle_select>:
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    99b8:	0f 93       	push	r16
    99ba:	1f 93       	push	r17
    99bc:	cf 93       	push	r28
    99be:	df 93       	push	r29
    99c0:	8c 01       	movw	r16, r24
    99c2:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    99c4:	28 e0       	ldi	r18, 0x08	; 8
    99c6:	42 e0       	ldi	r20, 0x02	; 2
    99c8:	bc 01       	movw	r22, r24
    99ca:	8a e6       	ldi	r24, 0x6A	; 106
    99cc:	99 e0       	ldi	r25, 0x09	; 9
    99ce:	0e 94 24 4b 	call	0x9648	; 0x9648 <_handle_select_render_helper>
	if (game.selection == PVP)
    99d2:	80 91 04 0a 	lds	r24, 0x0A04
    99d6:	81 30       	cpi	r24, 0x01	; 1
    99d8:	39 f4       	brne	.+14     	; 0x99e8 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 10);
    99da:	2a e0       	ldi	r18, 0x0A	; 10
    99dc:	43 e1       	ldi	r20, 0x13	; 19
    99de:	be 01       	movw	r22, r28
    99e0:	84 e6       	ldi	r24, 0x64	; 100
    99e2:	99 e0       	ldi	r25, 0x09	; 9
    99e4:	0e 94 24 4b 	call	0x9648	; 0x9648 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    99e8:	4e e1       	ldi	r20, 0x1E	; 30
    99ea:	5a e0       	ldi	r21, 0x0A	; 10
    99ec:	b8 01       	movw	r22, r16
    99ee:	8a e6       	ldi	r24, 0x6A	; 106
    99f0:	99 e0       	ldi	r25, 0x09	; 9
    99f2:	0e 94 74 4a 	call	0x94e8	; 0x94e8 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    99f6:	10 91 6f 09 	lds	r17, 0x096F
	if (game.selection == PVP)
    99fa:	80 91 04 0a 	lds	r24, 0x0A04
    99fe:	81 30       	cpi	r24, 0x01	; 1
    9a00:	19 f0       	breq	.+6      	; 0x9a08 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    9a02:	12 30       	cpi	r17, 0x02	; 2
    9a04:	69 f0       	breq	.+26     	; 0x9a20 <update_handle_select+0x68>
    9a06:	21 c0       	rjmp	.+66     	; 0x9a4a <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    9a08:	4f e8       	ldi	r20, 0x8F	; 143
    9a0a:	5d e0       	ldi	r21, 0x0D	; 13
    9a0c:	be 01       	movw	r22, r28
    9a0e:	84 e6       	ldi	r24, 0x64	; 100
    9a10:	99 e0       	ldi	r25, 0x09	; 9
    9a12:	0e 94 74 4a 	call	0x94e8	; 0x94e8 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    9a16:	80 91 69 09 	lds	r24, 0x0969
    9a1a:	82 30       	cpi	r24, 0x02	; 2
    9a1c:	b1 f4       	brne	.+44     	; 0x9a4a <update_handle_select+0x92>
    9a1e:	f1 cf       	rjmp	.-30     	; 0x9a02 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    9a20:	80 91 04 0a 	lds	r24, 0x0A04
    9a24:	81 11       	cpse	r24, r1
    9a26:	0a c0       	rjmp	.+20     	; 0x9a3c <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    9a28:	89 e0       	ldi	r24, 0x09	; 9
    9a2a:	80 93 99 0d 	sts	0x0D99, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    9a2e:	43 e0       	ldi	r20, 0x03	; 3
    9a30:	61 e4       	ldi	r22, 0x41	; 65
    9a32:	71 e0       	ldi	r23, 0x01	; 1
    9a34:	8a e9       	ldi	r24, 0x9A	; 154
    9a36:	9d e0       	ldi	r25, 0x0D	; 13
    9a38:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <LBCopyChars>
		}
		level_transition(0);
    9a3c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    9a3e:	df 91       	pop	r29
    9a40:	cf 91       	pop	r28
    9a42:	1f 91       	pop	r17
    9a44:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    9a46:	0c 94 f6 46 	jmp	0x8dec	; 0x8dec <level_transition>
	}
}
    9a4a:	df 91       	pop	r29
    9a4c:	cf 91       	pop	r28
    9a4e:	1f 91       	pop	r17
    9a50:	0f 91       	pop	r16
    9a52:	08 95       	ret

00009a54 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    9a54:	8a ec       	ldi	r24, 0xCA	; 202
    9a56:	92 e0       	ldi	r25, 0x02	; 2
    9a58:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <InitMusicPlayer>
	SetTileTable(tiles_data);
    9a5c:	8d ea       	ldi	r24, 0xAD	; 173
    9a5e:	9d e2       	ldi	r25, 0x2D	; 45
    9a60:	0e 94 cd 2c 	call	0x599a	; 0x599a <SetTileTable>
	SetSpritesTileTable(sprites_data);
    9a64:	8d ea       	ldi	r24, 0xAD	; 173
    9a66:	91 e2       	ldi	r25, 0x21	; 33
    9a68:	0e 94 a9 2c 	call	0x5952	; 0x5952 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    9a6c:	8f e2       	ldi	r24, 0x2F	; 47
    9a6e:	0e 94 ca 2c 	call	0x5994	; 0x5994 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    9a72:	60 e0       	ldi	r22, 0x00	; 0
    9a74:	83 e0       	ldi	r24, 0x03	; 3
    9a76:	0e 94 ad 3a 	call	0x755a	; 0x755a <FadeIn>
	ClearVram();
    9a7a:	0e 94 ae 2c 	call	0x595c	; 0x595c <ClearVram>
	init_game_state();
    9a7e:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <init_game_state>
	init_tile_animations(&tile_animations);
    9a82:	85 e0       	ldi	r24, 0x05	; 5
    9a84:	9a e0       	ldi	r25, 0x0A	; 10
    9a86:	0e 94 bc 3c 	call	0x7978	; 0x7978 <init_tile_animations>
	load_splash();
    9a8a:	0e 94 22 47 	call	0x8e44	; 0x8e44 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    9a8e:	81 e0       	ldi	r24, 0x01	; 1
    9a90:	90 e0       	ldi	r25, 0x00	; 0
    9a92:	0e 94 88 3a 	call	0x7510	; 0x7510 <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    9a96:	6b ef       	ldi	r22, 0xFB	; 251
    9a98:	79 e0       	ldi	r23, 0x09	; 9
    9a9a:	8a e9       	ldi	r24, 0x9A	; 154
    9a9c:	9a e0       	ldi	r25, 0x0A	; 10
    9a9e:	0e 94 11 3b 	call	0x7622	; 0x7622 <LBGetJoyPadState>
		switch (game.current_screen)
    9aa2:	80 91 01 0a 	lds	r24, 0x0A01
    9aa6:	81 30       	cpi	r24, 0x01	; 1
    9aa8:	99 f0       	breq	.+38     	; 0x9ad0 <main+0x7c>
    9aaa:	58 f0       	brcs	.+22     	; 0x9ac2 <main+0x6e>
    9aac:	82 30       	cpi	r24, 0x02	; 2
    9aae:	b9 f0       	breq	.+46     	; 0x9ade <main+0x8a>
    9ab0:	83 30       	cpi	r24, 0x03	; 3
    9ab2:	69 f7       	brne	.-38     	; 0x9a8e <main+0x3a>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				// p2 should be replaced by AI input for Player v CPU
				update_level(&p1, &p2);
    9ab4:	6b ef       	ldi	r22, 0xFB	; 251
    9ab6:	79 e0       	ldi	r23, 0x09	; 9
    9ab8:	8a e9       	ldi	r24, 0x9A	; 154
    9aba:	9a e0       	ldi	r25, 0x0A	; 10
    9abc:	0e 94 d8 49 	call	0x93b0	; 0x93b0 <update_level>
				break;
    9ac0:	e6 cf       	rjmp	.-52     	; 0x9a8e <main+0x3a>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    9ac2:	6b ef       	ldi	r22, 0xFB	; 251
    9ac4:	79 e0       	ldi	r23, 0x09	; 9
    9ac6:	8a e9       	ldi	r24, 0x9A	; 154
    9ac8:	9a e0       	ldi	r25, 0x0A	; 10
    9aca:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <update_splash>
				break;
    9ace:	df cf       	rjmp	.-66     	; 0x9a8e <main+0x3a>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    9ad0:	6b ef       	ldi	r22, 0xFB	; 251
    9ad2:	79 e0       	ldi	r23, 0x09	; 9
    9ad4:	8a e9       	ldi	r24, 0x9A	; 154
    9ad6:	9a e0       	ldi	r25, 0x0A	; 10
    9ad8:	0e 94 6a 4a 	call	0x94d4	; 0x94d4 <update_tank_rank>
				break;
    9adc:	d8 cf       	rjmp	.-80     	; 0x9a8e <main+0x3a>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    9ade:	6b ef       	ldi	r22, 0xFB	; 251
    9ae0:	79 e0       	ldi	r23, 0x09	; 9
    9ae2:	8a e9       	ldi	r24, 0x9A	; 154
    9ae4:	9a e0       	ldi	r25, 0x0A	; 10
    9ae6:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <update_handle_select>
				break;
    9aea:	d1 cf       	rjmp	.-94     	; 0x9a8e <main+0x3a>

00009aec <__udivmodqi4>:
    9aec:	99 1b       	sub	r25, r25
    9aee:	79 e0       	ldi	r23, 0x09	; 9
    9af0:	04 c0       	rjmp	.+8      	; 0x9afa <__udivmodqi4_ep>

00009af2 <__udivmodqi4_loop>:
    9af2:	99 1f       	adc	r25, r25
    9af4:	96 17       	cp	r25, r22
    9af6:	08 f0       	brcs	.+2      	; 0x9afa <__udivmodqi4_ep>
    9af8:	96 1b       	sub	r25, r22

00009afa <__udivmodqi4_ep>:
    9afa:	88 1f       	adc	r24, r24
    9afc:	7a 95       	dec	r23
    9afe:	c9 f7       	brne	.-14     	; 0x9af2 <__udivmodqi4_loop>
    9b00:	80 95       	com	r24
    9b02:	08 95       	ret

00009b04 <__udivmodhi4>:
    9b04:	aa 1b       	sub	r26, r26
    9b06:	bb 1b       	sub	r27, r27
    9b08:	51 e1       	ldi	r21, 0x11	; 17
    9b0a:	07 c0       	rjmp	.+14     	; 0x9b1a <__udivmodhi4_ep>

00009b0c <__udivmodhi4_loop>:
    9b0c:	aa 1f       	adc	r26, r26
    9b0e:	bb 1f       	adc	r27, r27
    9b10:	a6 17       	cp	r26, r22
    9b12:	b7 07       	cpc	r27, r23
    9b14:	10 f0       	brcs	.+4      	; 0x9b1a <__udivmodhi4_ep>
    9b16:	a6 1b       	sub	r26, r22
    9b18:	b7 0b       	sbc	r27, r23

00009b1a <__udivmodhi4_ep>:
    9b1a:	88 1f       	adc	r24, r24
    9b1c:	99 1f       	adc	r25, r25
    9b1e:	5a 95       	dec	r21
    9b20:	a9 f7       	brne	.-22     	; 0x9b0c <__udivmodhi4_loop>
    9b22:	80 95       	com	r24
    9b24:	90 95       	com	r25
    9b26:	bc 01       	movw	r22, r24
    9b28:	cd 01       	movw	r24, r26
    9b2a:	08 95       	ret

00009b2c <__divmodhi4>:
    9b2c:	97 fb       	bst	r25, 7
    9b2e:	07 2e       	mov	r0, r23
    9b30:	16 f4       	brtc	.+4      	; 0x9b36 <__divmodhi4+0xa>
    9b32:	00 94       	com	r0
    9b34:	07 d0       	rcall	.+14     	; 0x9b44 <__divmodhi4_neg1>
    9b36:	77 fd       	sbrc	r23, 7
    9b38:	09 d0       	rcall	.+18     	; 0x9b4c <__divmodhi4_neg2>
    9b3a:	0e 94 82 4d 	call	0x9b04	; 0x9b04 <__udivmodhi4>
    9b3e:	07 fc       	sbrc	r0, 7
    9b40:	05 d0       	rcall	.+10     	; 0x9b4c <__divmodhi4_neg2>
    9b42:	3e f4       	brtc	.+14     	; 0x9b52 <__divmodhi4_exit>

00009b44 <__divmodhi4_neg1>:
    9b44:	90 95       	com	r25
    9b46:	81 95       	neg	r24
    9b48:	9f 4f       	sbci	r25, 0xFF	; 255
    9b4a:	08 95       	ret

00009b4c <__divmodhi4_neg2>:
    9b4c:	70 95       	com	r23
    9b4e:	61 95       	neg	r22
    9b50:	7f 4f       	sbci	r23, 0xFF	; 255

00009b52 <__divmodhi4_exit>:
    9b52:	08 95       	ret

00009b54 <__tablejump2__>:
    9b54:	ee 0f       	add	r30, r30
    9b56:	ff 1f       	adc	r31, r31
    9b58:	05 90       	lpm	r0, Z+
    9b5a:	f4 91       	lpm	r31, Z
    9b5c:	e0 2d       	mov	r30, r0
    9b5e:	09 94       	ijmp

00009b60 <__subsf3>:
    9b60:	50 58       	subi	r21, 0x80	; 128

00009b62 <__addsf3>:
    9b62:	bb 27       	eor	r27, r27
    9b64:	aa 27       	eor	r26, r26
    9b66:	0e d0       	rcall	.+28     	; 0x9b84 <__addsf3x>
    9b68:	70 c1       	rjmp	.+736    	; 0x9e4a <__fp_round>
    9b6a:	61 d1       	rcall	.+706    	; 0x9e2e <__fp_pscA>
    9b6c:	30 f0       	brcs	.+12     	; 0x9b7a <__addsf3+0x18>
    9b6e:	66 d1       	rcall	.+716    	; 0x9e3c <__fp_pscB>
    9b70:	20 f0       	brcs	.+8      	; 0x9b7a <__addsf3+0x18>
    9b72:	31 f4       	brne	.+12     	; 0x9b80 <__addsf3+0x1e>
    9b74:	9f 3f       	cpi	r25, 0xFF	; 255
    9b76:	11 f4       	brne	.+4      	; 0x9b7c <__addsf3+0x1a>
    9b78:	1e f4       	brtc	.+6      	; 0x9b80 <__addsf3+0x1e>
    9b7a:	56 c1       	rjmp	.+684    	; 0x9e28 <__fp_nan>
    9b7c:	0e f4       	brtc	.+2      	; 0x9b80 <__addsf3+0x1e>
    9b7e:	e0 95       	com	r30
    9b80:	e7 fb       	bst	r30, 7
    9b82:	4c c1       	rjmp	.+664    	; 0x9e1c <__fp_inf>

00009b84 <__addsf3x>:
    9b84:	e9 2f       	mov	r30, r25
    9b86:	72 d1       	rcall	.+740    	; 0x9e6c <__fp_split3>
    9b88:	80 f3       	brcs	.-32     	; 0x9b6a <__addsf3+0x8>
    9b8a:	ba 17       	cp	r27, r26
    9b8c:	62 07       	cpc	r22, r18
    9b8e:	73 07       	cpc	r23, r19
    9b90:	84 07       	cpc	r24, r20
    9b92:	95 07       	cpc	r25, r21
    9b94:	18 f0       	brcs	.+6      	; 0x9b9c <__addsf3x+0x18>
    9b96:	71 f4       	brne	.+28     	; 0x9bb4 <__addsf3x+0x30>
    9b98:	9e f5       	brtc	.+102    	; 0x9c00 <__addsf3x+0x7c>
    9b9a:	8a c1       	rjmp	.+788    	; 0x9eb0 <__fp_zero>
    9b9c:	0e f4       	brtc	.+2      	; 0x9ba0 <__addsf3x+0x1c>
    9b9e:	e0 95       	com	r30
    9ba0:	0b 2e       	mov	r0, r27
    9ba2:	ba 2f       	mov	r27, r26
    9ba4:	a0 2d       	mov	r26, r0
    9ba6:	0b 01       	movw	r0, r22
    9ba8:	b9 01       	movw	r22, r18
    9baa:	90 01       	movw	r18, r0
    9bac:	0c 01       	movw	r0, r24
    9bae:	ca 01       	movw	r24, r20
    9bb0:	a0 01       	movw	r20, r0
    9bb2:	11 24       	eor	r1, r1
    9bb4:	ff 27       	eor	r31, r31
    9bb6:	59 1b       	sub	r21, r25
    9bb8:	99 f0       	breq	.+38     	; 0x9be0 <__addsf3x+0x5c>
    9bba:	59 3f       	cpi	r21, 0xF9	; 249
    9bbc:	50 f4       	brcc	.+20     	; 0x9bd2 <__addsf3x+0x4e>
    9bbe:	50 3e       	cpi	r21, 0xE0	; 224
    9bc0:	68 f1       	brcs	.+90     	; 0x9c1c <__addsf3x+0x98>
    9bc2:	1a 16       	cp	r1, r26
    9bc4:	f0 40       	sbci	r31, 0x00	; 0
    9bc6:	a2 2f       	mov	r26, r18
    9bc8:	23 2f       	mov	r18, r19
    9bca:	34 2f       	mov	r19, r20
    9bcc:	44 27       	eor	r20, r20
    9bce:	58 5f       	subi	r21, 0xF8	; 248
    9bd0:	f3 cf       	rjmp	.-26     	; 0x9bb8 <__addsf3x+0x34>
    9bd2:	46 95       	lsr	r20
    9bd4:	37 95       	ror	r19
    9bd6:	27 95       	ror	r18
    9bd8:	a7 95       	ror	r26
    9bda:	f0 40       	sbci	r31, 0x00	; 0
    9bdc:	53 95       	inc	r21
    9bde:	c9 f7       	brne	.-14     	; 0x9bd2 <__addsf3x+0x4e>
    9be0:	7e f4       	brtc	.+30     	; 0x9c00 <__addsf3x+0x7c>
    9be2:	1f 16       	cp	r1, r31
    9be4:	ba 0b       	sbc	r27, r26
    9be6:	62 0b       	sbc	r22, r18
    9be8:	73 0b       	sbc	r23, r19
    9bea:	84 0b       	sbc	r24, r20
    9bec:	ba f0       	brmi	.+46     	; 0x9c1c <__addsf3x+0x98>
    9bee:	91 50       	subi	r25, 0x01	; 1
    9bf0:	a1 f0       	breq	.+40     	; 0x9c1a <__addsf3x+0x96>
    9bf2:	ff 0f       	add	r31, r31
    9bf4:	bb 1f       	adc	r27, r27
    9bf6:	66 1f       	adc	r22, r22
    9bf8:	77 1f       	adc	r23, r23
    9bfa:	88 1f       	adc	r24, r24
    9bfc:	c2 f7       	brpl	.-16     	; 0x9bee <__addsf3x+0x6a>
    9bfe:	0e c0       	rjmp	.+28     	; 0x9c1c <__addsf3x+0x98>
    9c00:	ba 0f       	add	r27, r26
    9c02:	62 1f       	adc	r22, r18
    9c04:	73 1f       	adc	r23, r19
    9c06:	84 1f       	adc	r24, r20
    9c08:	48 f4       	brcc	.+18     	; 0x9c1c <__addsf3x+0x98>
    9c0a:	87 95       	ror	r24
    9c0c:	77 95       	ror	r23
    9c0e:	67 95       	ror	r22
    9c10:	b7 95       	ror	r27
    9c12:	f7 95       	ror	r31
    9c14:	9e 3f       	cpi	r25, 0xFE	; 254
    9c16:	08 f0       	brcs	.+2      	; 0x9c1a <__addsf3x+0x96>
    9c18:	b3 cf       	rjmp	.-154    	; 0x9b80 <__addsf3+0x1e>
    9c1a:	93 95       	inc	r25
    9c1c:	88 0f       	add	r24, r24
    9c1e:	08 f0       	brcs	.+2      	; 0x9c22 <__addsf3x+0x9e>
    9c20:	99 27       	eor	r25, r25
    9c22:	ee 0f       	add	r30, r30
    9c24:	97 95       	ror	r25
    9c26:	87 95       	ror	r24
    9c28:	08 95       	ret

00009c2a <__cmpsf2>:
    9c2a:	d4 d0       	rcall	.+424    	; 0x9dd4 <__fp_cmp>
    9c2c:	08 f4       	brcc	.+2      	; 0x9c30 <__cmpsf2+0x6>
    9c2e:	81 e0       	ldi	r24, 0x01	; 1
    9c30:	08 95       	ret

00009c32 <__divsf3>:
    9c32:	0c d0       	rcall	.+24     	; 0x9c4c <__divsf3x>
    9c34:	0a c1       	rjmp	.+532    	; 0x9e4a <__fp_round>
    9c36:	02 d1       	rcall	.+516    	; 0x9e3c <__fp_pscB>
    9c38:	40 f0       	brcs	.+16     	; 0x9c4a <__divsf3+0x18>
    9c3a:	f9 d0       	rcall	.+498    	; 0x9e2e <__fp_pscA>
    9c3c:	30 f0       	brcs	.+12     	; 0x9c4a <__divsf3+0x18>
    9c3e:	21 f4       	brne	.+8      	; 0x9c48 <__divsf3+0x16>
    9c40:	5f 3f       	cpi	r21, 0xFF	; 255
    9c42:	19 f0       	breq	.+6      	; 0x9c4a <__divsf3+0x18>
    9c44:	eb c0       	rjmp	.+470    	; 0x9e1c <__fp_inf>
    9c46:	51 11       	cpse	r21, r1
    9c48:	34 c1       	rjmp	.+616    	; 0x9eb2 <__fp_szero>
    9c4a:	ee c0       	rjmp	.+476    	; 0x9e28 <__fp_nan>

00009c4c <__divsf3x>:
    9c4c:	0f d1       	rcall	.+542    	; 0x9e6c <__fp_split3>
    9c4e:	98 f3       	brcs	.-26     	; 0x9c36 <__divsf3+0x4>

00009c50 <__divsf3_pse>:
    9c50:	99 23       	and	r25, r25
    9c52:	c9 f3       	breq	.-14     	; 0x9c46 <__divsf3+0x14>
    9c54:	55 23       	and	r21, r21
    9c56:	b1 f3       	breq	.-20     	; 0x9c44 <__divsf3+0x12>
    9c58:	95 1b       	sub	r25, r21
    9c5a:	55 0b       	sbc	r21, r21
    9c5c:	bb 27       	eor	r27, r27
    9c5e:	aa 27       	eor	r26, r26
    9c60:	62 17       	cp	r22, r18
    9c62:	73 07       	cpc	r23, r19
    9c64:	84 07       	cpc	r24, r20
    9c66:	38 f0       	brcs	.+14     	; 0x9c76 <__divsf3_pse+0x26>
    9c68:	9f 5f       	subi	r25, 0xFF	; 255
    9c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    9c6c:	22 0f       	add	r18, r18
    9c6e:	33 1f       	adc	r19, r19
    9c70:	44 1f       	adc	r20, r20
    9c72:	aa 1f       	adc	r26, r26
    9c74:	a9 f3       	breq	.-22     	; 0x9c60 <__divsf3_pse+0x10>
    9c76:	33 d0       	rcall	.+102    	; 0x9cde <__divsf3_pse+0x8e>
    9c78:	0e 2e       	mov	r0, r30
    9c7a:	3a f0       	brmi	.+14     	; 0x9c8a <__divsf3_pse+0x3a>
    9c7c:	e0 e8       	ldi	r30, 0x80	; 128
    9c7e:	30 d0       	rcall	.+96     	; 0x9ce0 <__divsf3_pse+0x90>
    9c80:	91 50       	subi	r25, 0x01	; 1
    9c82:	50 40       	sbci	r21, 0x00	; 0
    9c84:	e6 95       	lsr	r30
    9c86:	00 1c       	adc	r0, r0
    9c88:	ca f7       	brpl	.-14     	; 0x9c7c <__divsf3_pse+0x2c>
    9c8a:	29 d0       	rcall	.+82     	; 0x9cde <__divsf3_pse+0x8e>
    9c8c:	fe 2f       	mov	r31, r30
    9c8e:	27 d0       	rcall	.+78     	; 0x9cde <__divsf3_pse+0x8e>
    9c90:	66 0f       	add	r22, r22
    9c92:	77 1f       	adc	r23, r23
    9c94:	88 1f       	adc	r24, r24
    9c96:	bb 1f       	adc	r27, r27
    9c98:	26 17       	cp	r18, r22
    9c9a:	37 07       	cpc	r19, r23
    9c9c:	48 07       	cpc	r20, r24
    9c9e:	ab 07       	cpc	r26, r27
    9ca0:	b0 e8       	ldi	r27, 0x80	; 128
    9ca2:	09 f0       	breq	.+2      	; 0x9ca6 <__divsf3_pse+0x56>
    9ca4:	bb 0b       	sbc	r27, r27
    9ca6:	80 2d       	mov	r24, r0
    9ca8:	bf 01       	movw	r22, r30
    9caa:	ff 27       	eor	r31, r31
    9cac:	93 58       	subi	r25, 0x83	; 131
    9cae:	5f 4f       	sbci	r21, 0xFF	; 255
    9cb0:	2a f0       	brmi	.+10     	; 0x9cbc <__divsf3_pse+0x6c>
    9cb2:	9e 3f       	cpi	r25, 0xFE	; 254
    9cb4:	51 05       	cpc	r21, r1
    9cb6:	68 f0       	brcs	.+26     	; 0x9cd2 <__divsf3_pse+0x82>
    9cb8:	b1 c0       	rjmp	.+354    	; 0x9e1c <__fp_inf>
    9cba:	fb c0       	rjmp	.+502    	; 0x9eb2 <__fp_szero>
    9cbc:	5f 3f       	cpi	r21, 0xFF	; 255
    9cbe:	ec f3       	brlt	.-6      	; 0x9cba <__divsf3_pse+0x6a>
    9cc0:	98 3e       	cpi	r25, 0xE8	; 232
    9cc2:	dc f3       	brlt	.-10     	; 0x9cba <__divsf3_pse+0x6a>
    9cc4:	86 95       	lsr	r24
    9cc6:	77 95       	ror	r23
    9cc8:	67 95       	ror	r22
    9cca:	b7 95       	ror	r27
    9ccc:	f7 95       	ror	r31
    9cce:	9f 5f       	subi	r25, 0xFF	; 255
    9cd0:	c9 f7       	brne	.-14     	; 0x9cc4 <__divsf3_pse+0x74>
    9cd2:	88 0f       	add	r24, r24
    9cd4:	91 1d       	adc	r25, r1
    9cd6:	96 95       	lsr	r25
    9cd8:	87 95       	ror	r24
    9cda:	97 f9       	bld	r25, 7
    9cdc:	08 95       	ret
    9cde:	e1 e0       	ldi	r30, 0x01	; 1
    9ce0:	66 0f       	add	r22, r22
    9ce2:	77 1f       	adc	r23, r23
    9ce4:	88 1f       	adc	r24, r24
    9ce6:	bb 1f       	adc	r27, r27
    9ce8:	62 17       	cp	r22, r18
    9cea:	73 07       	cpc	r23, r19
    9cec:	84 07       	cpc	r24, r20
    9cee:	ba 07       	cpc	r27, r26
    9cf0:	20 f0       	brcs	.+8      	; 0x9cfa <__divsf3_pse+0xaa>
    9cf2:	62 1b       	sub	r22, r18
    9cf4:	73 0b       	sbc	r23, r19
    9cf6:	84 0b       	sbc	r24, r20
    9cf8:	ba 0b       	sbc	r27, r26
    9cfa:	ee 1f       	adc	r30, r30
    9cfc:	88 f7       	brcc	.-30     	; 0x9ce0 <__divsf3_pse+0x90>
    9cfe:	e0 95       	com	r30
    9d00:	08 95       	ret

00009d02 <__fixunssfsi>:
    9d02:	bc d0       	rcall	.+376    	; 0x9e7c <__fp_splitA>
    9d04:	88 f0       	brcs	.+34     	; 0x9d28 <__fixunssfsi+0x26>
    9d06:	9f 57       	subi	r25, 0x7F	; 127
    9d08:	90 f0       	brcs	.+36     	; 0x9d2e <__fixunssfsi+0x2c>
    9d0a:	b9 2f       	mov	r27, r25
    9d0c:	99 27       	eor	r25, r25
    9d0e:	b7 51       	subi	r27, 0x17	; 23
    9d10:	a0 f0       	brcs	.+40     	; 0x9d3a <__fixunssfsi+0x38>
    9d12:	d1 f0       	breq	.+52     	; 0x9d48 <__fixunssfsi+0x46>
    9d14:	66 0f       	add	r22, r22
    9d16:	77 1f       	adc	r23, r23
    9d18:	88 1f       	adc	r24, r24
    9d1a:	99 1f       	adc	r25, r25
    9d1c:	1a f0       	brmi	.+6      	; 0x9d24 <__fixunssfsi+0x22>
    9d1e:	ba 95       	dec	r27
    9d20:	c9 f7       	brne	.-14     	; 0x9d14 <__fixunssfsi+0x12>
    9d22:	12 c0       	rjmp	.+36     	; 0x9d48 <__fixunssfsi+0x46>
    9d24:	b1 30       	cpi	r27, 0x01	; 1
    9d26:	81 f0       	breq	.+32     	; 0x9d48 <__fixunssfsi+0x46>
    9d28:	c3 d0       	rcall	.+390    	; 0x9eb0 <__fp_zero>
    9d2a:	b1 e0       	ldi	r27, 0x01	; 1
    9d2c:	08 95       	ret
    9d2e:	c0 c0       	rjmp	.+384    	; 0x9eb0 <__fp_zero>
    9d30:	67 2f       	mov	r22, r23
    9d32:	78 2f       	mov	r23, r24
    9d34:	88 27       	eor	r24, r24
    9d36:	b8 5f       	subi	r27, 0xF8	; 248
    9d38:	39 f0       	breq	.+14     	; 0x9d48 <__fixunssfsi+0x46>
    9d3a:	b9 3f       	cpi	r27, 0xF9	; 249
    9d3c:	cc f3       	brlt	.-14     	; 0x9d30 <__fixunssfsi+0x2e>
    9d3e:	86 95       	lsr	r24
    9d40:	77 95       	ror	r23
    9d42:	67 95       	ror	r22
    9d44:	b3 95       	inc	r27
    9d46:	d9 f7       	brne	.-10     	; 0x9d3e <__fixunssfsi+0x3c>
    9d48:	3e f4       	brtc	.+14     	; 0x9d58 <__fixunssfsi+0x56>
    9d4a:	90 95       	com	r25
    9d4c:	80 95       	com	r24
    9d4e:	70 95       	com	r23
    9d50:	61 95       	neg	r22
    9d52:	7f 4f       	sbci	r23, 0xFF	; 255
    9d54:	8f 4f       	sbci	r24, 0xFF	; 255
    9d56:	9f 4f       	sbci	r25, 0xFF	; 255
    9d58:	08 95       	ret

00009d5a <__floatunsisf>:
    9d5a:	e8 94       	clt
    9d5c:	09 c0       	rjmp	.+18     	; 0x9d70 <__floatsisf+0x12>

00009d5e <__floatsisf>:
    9d5e:	97 fb       	bst	r25, 7
    9d60:	3e f4       	brtc	.+14     	; 0x9d70 <__floatsisf+0x12>
    9d62:	90 95       	com	r25
    9d64:	80 95       	com	r24
    9d66:	70 95       	com	r23
    9d68:	61 95       	neg	r22
    9d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    9d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    9d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d70:	99 23       	and	r25, r25
    9d72:	a9 f0       	breq	.+42     	; 0x9d9e <__floatsisf+0x40>
    9d74:	f9 2f       	mov	r31, r25
    9d76:	96 e9       	ldi	r25, 0x96	; 150
    9d78:	bb 27       	eor	r27, r27
    9d7a:	93 95       	inc	r25
    9d7c:	f6 95       	lsr	r31
    9d7e:	87 95       	ror	r24
    9d80:	77 95       	ror	r23
    9d82:	67 95       	ror	r22
    9d84:	b7 95       	ror	r27
    9d86:	f1 11       	cpse	r31, r1
    9d88:	f8 cf       	rjmp	.-16     	; 0x9d7a <__floatsisf+0x1c>
    9d8a:	fa f4       	brpl	.+62     	; 0x9dca <__floatsisf+0x6c>
    9d8c:	bb 0f       	add	r27, r27
    9d8e:	11 f4       	brne	.+4      	; 0x9d94 <__floatsisf+0x36>
    9d90:	60 ff       	sbrs	r22, 0
    9d92:	1b c0       	rjmp	.+54     	; 0x9dca <__floatsisf+0x6c>
    9d94:	6f 5f       	subi	r22, 0xFF	; 255
    9d96:	7f 4f       	sbci	r23, 0xFF	; 255
    9d98:	8f 4f       	sbci	r24, 0xFF	; 255
    9d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    9d9c:	16 c0       	rjmp	.+44     	; 0x9dca <__floatsisf+0x6c>
    9d9e:	88 23       	and	r24, r24
    9da0:	11 f0       	breq	.+4      	; 0x9da6 <__floatsisf+0x48>
    9da2:	96 e9       	ldi	r25, 0x96	; 150
    9da4:	11 c0       	rjmp	.+34     	; 0x9dc8 <__floatsisf+0x6a>
    9da6:	77 23       	and	r23, r23
    9da8:	21 f0       	breq	.+8      	; 0x9db2 <__floatsisf+0x54>
    9daa:	9e e8       	ldi	r25, 0x8E	; 142
    9dac:	87 2f       	mov	r24, r23
    9dae:	76 2f       	mov	r23, r22
    9db0:	05 c0       	rjmp	.+10     	; 0x9dbc <__floatsisf+0x5e>
    9db2:	66 23       	and	r22, r22
    9db4:	71 f0       	breq	.+28     	; 0x9dd2 <__floatsisf+0x74>
    9db6:	96 e8       	ldi	r25, 0x86	; 134
    9db8:	86 2f       	mov	r24, r22
    9dba:	70 e0       	ldi	r23, 0x00	; 0
    9dbc:	60 e0       	ldi	r22, 0x00	; 0
    9dbe:	2a f0       	brmi	.+10     	; 0x9dca <__floatsisf+0x6c>
    9dc0:	9a 95       	dec	r25
    9dc2:	66 0f       	add	r22, r22
    9dc4:	77 1f       	adc	r23, r23
    9dc6:	88 1f       	adc	r24, r24
    9dc8:	da f7       	brpl	.-10     	; 0x9dc0 <__floatsisf+0x62>
    9dca:	88 0f       	add	r24, r24
    9dcc:	96 95       	lsr	r25
    9dce:	87 95       	ror	r24
    9dd0:	97 f9       	bld	r25, 7
    9dd2:	08 95       	ret

00009dd4 <__fp_cmp>:
    9dd4:	99 0f       	add	r25, r25
    9dd6:	00 08       	sbc	r0, r0
    9dd8:	55 0f       	add	r21, r21
    9dda:	aa 0b       	sbc	r26, r26
    9ddc:	e0 e8       	ldi	r30, 0x80	; 128
    9dde:	fe ef       	ldi	r31, 0xFE	; 254
    9de0:	16 16       	cp	r1, r22
    9de2:	17 06       	cpc	r1, r23
    9de4:	e8 07       	cpc	r30, r24
    9de6:	f9 07       	cpc	r31, r25
    9de8:	c0 f0       	brcs	.+48     	; 0x9e1a <__fp_cmp+0x46>
    9dea:	12 16       	cp	r1, r18
    9dec:	13 06       	cpc	r1, r19
    9dee:	e4 07       	cpc	r30, r20
    9df0:	f5 07       	cpc	r31, r21
    9df2:	98 f0       	brcs	.+38     	; 0x9e1a <__fp_cmp+0x46>
    9df4:	62 1b       	sub	r22, r18
    9df6:	73 0b       	sbc	r23, r19
    9df8:	84 0b       	sbc	r24, r20
    9dfa:	95 0b       	sbc	r25, r21
    9dfc:	39 f4       	brne	.+14     	; 0x9e0c <__fp_cmp+0x38>
    9dfe:	0a 26       	eor	r0, r26
    9e00:	61 f0       	breq	.+24     	; 0x9e1a <__fp_cmp+0x46>
    9e02:	23 2b       	or	r18, r19
    9e04:	24 2b       	or	r18, r20
    9e06:	25 2b       	or	r18, r21
    9e08:	21 f4       	brne	.+8      	; 0x9e12 <__fp_cmp+0x3e>
    9e0a:	08 95       	ret
    9e0c:	0a 26       	eor	r0, r26
    9e0e:	09 f4       	brne	.+2      	; 0x9e12 <__fp_cmp+0x3e>
    9e10:	a1 40       	sbci	r26, 0x01	; 1
    9e12:	a6 95       	lsr	r26
    9e14:	8f ef       	ldi	r24, 0xFF	; 255
    9e16:	81 1d       	adc	r24, r1
    9e18:	81 1d       	adc	r24, r1
    9e1a:	08 95       	ret

00009e1c <__fp_inf>:
    9e1c:	97 f9       	bld	r25, 7
    9e1e:	9f 67       	ori	r25, 0x7F	; 127
    9e20:	80 e8       	ldi	r24, 0x80	; 128
    9e22:	70 e0       	ldi	r23, 0x00	; 0
    9e24:	60 e0       	ldi	r22, 0x00	; 0
    9e26:	08 95       	ret

00009e28 <__fp_nan>:
    9e28:	9f ef       	ldi	r25, 0xFF	; 255
    9e2a:	80 ec       	ldi	r24, 0xC0	; 192
    9e2c:	08 95       	ret

00009e2e <__fp_pscA>:
    9e2e:	00 24       	eor	r0, r0
    9e30:	0a 94       	dec	r0
    9e32:	16 16       	cp	r1, r22
    9e34:	17 06       	cpc	r1, r23
    9e36:	18 06       	cpc	r1, r24
    9e38:	09 06       	cpc	r0, r25
    9e3a:	08 95       	ret

00009e3c <__fp_pscB>:
    9e3c:	00 24       	eor	r0, r0
    9e3e:	0a 94       	dec	r0
    9e40:	12 16       	cp	r1, r18
    9e42:	13 06       	cpc	r1, r19
    9e44:	14 06       	cpc	r1, r20
    9e46:	05 06       	cpc	r0, r21
    9e48:	08 95       	ret

00009e4a <__fp_round>:
    9e4a:	09 2e       	mov	r0, r25
    9e4c:	03 94       	inc	r0
    9e4e:	00 0c       	add	r0, r0
    9e50:	11 f4       	brne	.+4      	; 0x9e56 <__fp_round+0xc>
    9e52:	88 23       	and	r24, r24
    9e54:	52 f0       	brmi	.+20     	; 0x9e6a <__fp_round+0x20>
    9e56:	bb 0f       	add	r27, r27
    9e58:	40 f4       	brcc	.+16     	; 0x9e6a <__fp_round+0x20>
    9e5a:	bf 2b       	or	r27, r31
    9e5c:	11 f4       	brne	.+4      	; 0x9e62 <__fp_round+0x18>
    9e5e:	60 ff       	sbrs	r22, 0
    9e60:	04 c0       	rjmp	.+8      	; 0x9e6a <__fp_round+0x20>
    9e62:	6f 5f       	subi	r22, 0xFF	; 255
    9e64:	7f 4f       	sbci	r23, 0xFF	; 255
    9e66:	8f 4f       	sbci	r24, 0xFF	; 255
    9e68:	9f 4f       	sbci	r25, 0xFF	; 255
    9e6a:	08 95       	ret

00009e6c <__fp_split3>:
    9e6c:	57 fd       	sbrc	r21, 7
    9e6e:	90 58       	subi	r25, 0x80	; 128
    9e70:	44 0f       	add	r20, r20
    9e72:	55 1f       	adc	r21, r21
    9e74:	59 f0       	breq	.+22     	; 0x9e8c <__fp_splitA+0x10>
    9e76:	5f 3f       	cpi	r21, 0xFF	; 255
    9e78:	71 f0       	breq	.+28     	; 0x9e96 <__fp_splitA+0x1a>
    9e7a:	47 95       	ror	r20

00009e7c <__fp_splitA>:
    9e7c:	88 0f       	add	r24, r24
    9e7e:	97 fb       	bst	r25, 7
    9e80:	99 1f       	adc	r25, r25
    9e82:	61 f0       	breq	.+24     	; 0x9e9c <__fp_splitA+0x20>
    9e84:	9f 3f       	cpi	r25, 0xFF	; 255
    9e86:	79 f0       	breq	.+30     	; 0x9ea6 <__fp_splitA+0x2a>
    9e88:	87 95       	ror	r24
    9e8a:	08 95       	ret
    9e8c:	12 16       	cp	r1, r18
    9e8e:	13 06       	cpc	r1, r19
    9e90:	14 06       	cpc	r1, r20
    9e92:	55 1f       	adc	r21, r21
    9e94:	f2 cf       	rjmp	.-28     	; 0x9e7a <__fp_split3+0xe>
    9e96:	46 95       	lsr	r20
    9e98:	f1 df       	rcall	.-30     	; 0x9e7c <__fp_splitA>
    9e9a:	08 c0       	rjmp	.+16     	; 0x9eac <__fp_splitA+0x30>
    9e9c:	16 16       	cp	r1, r22
    9e9e:	17 06       	cpc	r1, r23
    9ea0:	18 06       	cpc	r1, r24
    9ea2:	99 1f       	adc	r25, r25
    9ea4:	f1 cf       	rjmp	.-30     	; 0x9e88 <__fp_splitA+0xc>
    9ea6:	86 95       	lsr	r24
    9ea8:	71 05       	cpc	r23, r1
    9eaa:	61 05       	cpc	r22, r1
    9eac:	08 94       	sec
    9eae:	08 95       	ret

00009eb0 <__fp_zero>:
    9eb0:	e8 94       	clt

00009eb2 <__fp_szero>:
    9eb2:	bb 27       	eor	r27, r27
    9eb4:	66 27       	eor	r22, r22
    9eb6:	77 27       	eor	r23, r23
    9eb8:	cb 01       	movw	r24, r22
    9eba:	97 f9       	bld	r25, 7
    9ebc:	08 95       	ret

00009ebe <__gesf2>:
    9ebe:	8a df       	rcall	.-236    	; 0x9dd4 <__fp_cmp>
    9ec0:	08 f4       	brcc	.+2      	; 0x9ec4 <__gesf2+0x6>
    9ec2:	8f ef       	ldi	r24, 0xFF	; 255
    9ec4:	08 95       	ret

00009ec6 <__mulsf3>:
    9ec6:	0b d0       	rcall	.+22     	; 0x9ede <__mulsf3x>
    9ec8:	c0 cf       	rjmp	.-128    	; 0x9e4a <__fp_round>
    9eca:	b1 df       	rcall	.-158    	; 0x9e2e <__fp_pscA>
    9ecc:	28 f0       	brcs	.+10     	; 0x9ed8 <__mulsf3+0x12>
    9ece:	b6 df       	rcall	.-148    	; 0x9e3c <__fp_pscB>
    9ed0:	18 f0       	brcs	.+6      	; 0x9ed8 <__mulsf3+0x12>
    9ed2:	95 23       	and	r25, r21
    9ed4:	09 f0       	breq	.+2      	; 0x9ed8 <__mulsf3+0x12>
    9ed6:	a2 cf       	rjmp	.-188    	; 0x9e1c <__fp_inf>
    9ed8:	a7 cf       	rjmp	.-178    	; 0x9e28 <__fp_nan>
    9eda:	11 24       	eor	r1, r1
    9edc:	ea cf       	rjmp	.-44     	; 0x9eb2 <__fp_szero>

00009ede <__mulsf3x>:
    9ede:	c6 df       	rcall	.-116    	; 0x9e6c <__fp_split3>
    9ee0:	a0 f3       	brcs	.-24     	; 0x9eca <__mulsf3+0x4>

00009ee2 <__mulsf3_pse>:
    9ee2:	95 9f       	mul	r25, r21
    9ee4:	d1 f3       	breq	.-12     	; 0x9eda <__mulsf3+0x14>
    9ee6:	95 0f       	add	r25, r21
    9ee8:	50 e0       	ldi	r21, 0x00	; 0
    9eea:	55 1f       	adc	r21, r21
    9eec:	62 9f       	mul	r22, r18
    9eee:	f0 01       	movw	r30, r0
    9ef0:	72 9f       	mul	r23, r18
    9ef2:	bb 27       	eor	r27, r27
    9ef4:	f0 0d       	add	r31, r0
    9ef6:	b1 1d       	adc	r27, r1
    9ef8:	63 9f       	mul	r22, r19
    9efa:	aa 27       	eor	r26, r26
    9efc:	f0 0d       	add	r31, r0
    9efe:	b1 1d       	adc	r27, r1
    9f00:	aa 1f       	adc	r26, r26
    9f02:	64 9f       	mul	r22, r20
    9f04:	66 27       	eor	r22, r22
    9f06:	b0 0d       	add	r27, r0
    9f08:	a1 1d       	adc	r26, r1
    9f0a:	66 1f       	adc	r22, r22
    9f0c:	82 9f       	mul	r24, r18
    9f0e:	22 27       	eor	r18, r18
    9f10:	b0 0d       	add	r27, r0
    9f12:	a1 1d       	adc	r26, r1
    9f14:	62 1f       	adc	r22, r18
    9f16:	73 9f       	mul	r23, r19
    9f18:	b0 0d       	add	r27, r0
    9f1a:	a1 1d       	adc	r26, r1
    9f1c:	62 1f       	adc	r22, r18
    9f1e:	83 9f       	mul	r24, r19
    9f20:	a0 0d       	add	r26, r0
    9f22:	61 1d       	adc	r22, r1
    9f24:	22 1f       	adc	r18, r18
    9f26:	74 9f       	mul	r23, r20
    9f28:	33 27       	eor	r19, r19
    9f2a:	a0 0d       	add	r26, r0
    9f2c:	61 1d       	adc	r22, r1
    9f2e:	23 1f       	adc	r18, r19
    9f30:	84 9f       	mul	r24, r20
    9f32:	60 0d       	add	r22, r0
    9f34:	21 1d       	adc	r18, r1
    9f36:	82 2f       	mov	r24, r18
    9f38:	76 2f       	mov	r23, r22
    9f3a:	6a 2f       	mov	r22, r26
    9f3c:	11 24       	eor	r1, r1
    9f3e:	9f 57       	subi	r25, 0x7F	; 127
    9f40:	50 40       	sbci	r21, 0x00	; 0
    9f42:	8a f0       	brmi	.+34     	; 0x9f66 <__mulsf3_pse+0x84>
    9f44:	e1 f0       	breq	.+56     	; 0x9f7e <__mulsf3_pse+0x9c>
    9f46:	88 23       	and	r24, r24
    9f48:	4a f0       	brmi	.+18     	; 0x9f5c <__mulsf3_pse+0x7a>
    9f4a:	ee 0f       	add	r30, r30
    9f4c:	ff 1f       	adc	r31, r31
    9f4e:	bb 1f       	adc	r27, r27
    9f50:	66 1f       	adc	r22, r22
    9f52:	77 1f       	adc	r23, r23
    9f54:	88 1f       	adc	r24, r24
    9f56:	91 50       	subi	r25, 0x01	; 1
    9f58:	50 40       	sbci	r21, 0x00	; 0
    9f5a:	a9 f7       	brne	.-22     	; 0x9f46 <__mulsf3_pse+0x64>
    9f5c:	9e 3f       	cpi	r25, 0xFE	; 254
    9f5e:	51 05       	cpc	r21, r1
    9f60:	70 f0       	brcs	.+28     	; 0x9f7e <__mulsf3_pse+0x9c>
    9f62:	5c cf       	rjmp	.-328    	; 0x9e1c <__fp_inf>
    9f64:	a6 cf       	rjmp	.-180    	; 0x9eb2 <__fp_szero>
    9f66:	5f 3f       	cpi	r21, 0xFF	; 255
    9f68:	ec f3       	brlt	.-6      	; 0x9f64 <__mulsf3_pse+0x82>
    9f6a:	98 3e       	cpi	r25, 0xE8	; 232
    9f6c:	dc f3       	brlt	.-10     	; 0x9f64 <__mulsf3_pse+0x82>
    9f6e:	86 95       	lsr	r24
    9f70:	77 95       	ror	r23
    9f72:	67 95       	ror	r22
    9f74:	b7 95       	ror	r27
    9f76:	f7 95       	ror	r31
    9f78:	e7 95       	ror	r30
    9f7a:	9f 5f       	subi	r25, 0xFF	; 255
    9f7c:	c1 f7       	brne	.-16     	; 0x9f6e <__mulsf3_pse+0x8c>
    9f7e:	fe 2b       	or	r31, r30
    9f80:	88 0f       	add	r24, r24
    9f82:	91 1d       	adc	r25, r1
    9f84:	96 95       	lsr	r25
    9f86:	87 95       	ror	r24
    9f88:	97 f9       	bld	r25, 7
    9f8a:	08 95       	ret

00009f8c <_exit>:
    9f8c:	f8 94       	cli

00009f8e <__stop_program>:
    9f8e:	ff cf       	rjmp	.-2      	; 0x9f8e <__stop_program>
