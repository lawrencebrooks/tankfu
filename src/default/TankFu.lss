
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000e7e0  0000e8e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e7e0  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f99  00800106  00800106  0000e8e6  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000e8e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000ee64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000f0ba  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000640  00000000  00000000  0000f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009a30  00000000  00000000  0000f710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001558  00000000  00000000  00019140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000213b  00000000  00000000  0001a698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000014cc  00000000  00000000  0001c7d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d6e  00000000  00000000  0001dca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008cb1  00000000  00000000  0001fa0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000760  00000000  00000000  000286c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ce 41 	jmp	0x839c	; 0x839c <__ctors_end>
       4:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
       8:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
       c:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      10:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      14:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      18:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      1c:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      20:	0c 94 3a 46 	jmp	0x8c74	; 0x8c74 <__vector_8>
      24:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      28:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      2c:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      30:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      34:	0c 94 11 44 	jmp	0x8822	; 0x8822 <__vector_13>
      38:	0c 94 51 44 	jmp	0x88a2	; 0x88a2 <__vector_14>
      3c:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      40:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      44:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      48:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      4c:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      50:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      54:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      58:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      5c:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      60:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      64:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      68:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>
      6c:	0c 94 3b 42 	jmp	0x8476	; 0x8476 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	9c 47 9f 47 fa 47 fe 47 06 48 a7 47 ac 47 b1 47     .G.G.G.G.H.G.G.G
      ce:	0e 48 b4 47 b7 47 ba 47 f7 47                       .H.G.G.G.G

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <map_uzeboxlogo2>:
      e4:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f5 <map_uzeboxlogo>:
      f5:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     105:	00 0e 0f 10 11 12                                   ......

0000010b <logo_tileset>:
	...
     167:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     177:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     187:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     197:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1a7:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1b7:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1c7:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1d7:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1e7:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1f7:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     207:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     217:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     227:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     237:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     24f:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     25f:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     26f:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     27f:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     28f:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     29f:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2af:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2bf:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2cf:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2df:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2ef:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     2ff:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     30f:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     31f:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     32f:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     33f:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     34f:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     35f:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38b:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39b:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3ab:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bb:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cb:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3db:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3eb:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3fb:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40b:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41b:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42b:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43b:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44b:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45b:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     493:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a3:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b3:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c3:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d3:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e3:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f3:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     503:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     513:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     523:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     533:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     543:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     553:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     563:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     573:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     583:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     593:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a3:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b3:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c3:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5e7:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5f7:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     607:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     617:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     627:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     637:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     647:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     657:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     667:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     677:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     687:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     697:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6a7:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6b7:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6cf:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6df:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6ef:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     6ff:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     70f:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     71f:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     72f:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     73f:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     74f:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     75f:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     76f:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     77f:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     78f:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     79f:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7af:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7bf:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7cf:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7df:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80b:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81b:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82b:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83b:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84b:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85b:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86b:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87b:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88b:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89b:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8ab:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bb:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cb:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8db:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090b <logoInitPatches>:
     90b:	00 00 00 14 09 00 00 00 00                          .........

00000914 <initPatch>:
     914:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     924:	0a 1e 32 05 00 00 ff                                ..2....

0000092b <default_scores>:
     92b:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     93b:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

00000949 <default_handles>:
     949:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     959:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000967 <strLevels>:
     967:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     977:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     987:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     997:	20 20 20 20 20 4d 41 5a 45 20 20 20 20 20 20 00          MAZE      .
     9a7:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     9b7:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     9c7:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     9d7:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     9e7:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     9f7:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

00000a07 <strPaused>:
     a07:	50 41 55 53 45 44 00                                PAUSED.

00000a0e <strExit>:
     a0e:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

00000a17 <strTotal>:
     a17:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000a1e <strScore>:
     a1e:	53 43 4f 52 45 3a 00                                SCORE:.

00000a25 <strBanterClear>:
     a25:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000a34 <banter_map>:
     a34:	53 55 43 48 20 46 41 49 4c 20 20 20 20 20 00 4c     SUCH FAIL     .L
     a44:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 52     OL           .BR
     a54:	4f 4b 45 4e 20 42 55 54 54 4f 4e 3f 00 54 52 59     OKEN BUTTON?.TRY
     a64:	20 41 54 20 4c 45 41 53 54 20 20 00 54 4f 4f 20      AT LEAST  .TOO 
     a74:	45 41 53 59 20 20 20 20 20 20 00 59 41 57 4e 20     EASY      .YAWN 
     a84:	20 20 20 20 20 20 20 20 20 00 4e 4f 4f 42 20 20              .NOOB  
     a94:	20 20 20 20 20 20 20 20 00 54 48 41 54 27 53 20             .THAT'S 
     aa4:	49 54 3f 20 20 20 20 00 4e 45 45 44 20 48 45 4c     IT?    .NEED HEL
     ab4:	50 3f 20 20 20 20 00 50 46 46 54 20 20 20 20 20     P?    .PFFT     
     ac4:	20 20 20 20 20 00                                        .

00000aca <strFinalScore>:
     aca:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000ad6 <strBy>:
     ad6:	42 59 00                                            BY.

00000ad9 <strOwns>:
     ad9:	4f 57 4e 53 00                                      OWNS.

00000ade <strChangeHandle>:
     ade:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

00000aed <strReset>:
     aed:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     afd:	20 53 4c 20 28 35 53 29 00                           SL (5S).

00000b06 <strCancelHandle>:
     b06:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000b11 <strConfirmHandle>:
     b11:	43 4f 4e 46 49 52 4d 20 2d 20 41 00                 CONFIRM - A.

00000b1d <strSelectHandle>:
     b1d:	53 45 4c 45 43 54 20 2d 20 41 00                    SELECT - A.

00000b28 <strPlayer2>:
     b28:	50 32 00                                            P2.

00000b2b <strPlayer1>:
     b2b:	50 31 00                                            P1.

00000b2e <strVertSep>:
     b2e:	3b 00                                               ;.

00000b30 <strUnderline>:
     b30:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000b3c <strHandlesTitle>:
     b3c:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

00000b48 <strHighscores>:
     b48:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000b52 <str2Player>:
     b52:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000b63 <str1Player>:
     b63:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000b71 <strCopyright>:
     b71:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     b81:	4f 4f 4b 53 00                                      OOKS.

00000b86 <my_patches>:
     b86:	02 68 1b 00 00 4f 07 50 07 02 83 14 00 00 e3 06     .h...O.P........
     b96:	e4 06 02 3c 12 00 00 45 02 46 02 02 8b 10 00 00     ...<...E.F......
     ba6:	af 01 b0 01 02 6b 0e 00 00 1e 02 1f 02 02 f9 0c     .....k..........
     bb6:	00 00 70 01 71 01 02 3c 12 00 00 45 02 46 02 02     ..p.q..<...E.F..
     bc6:	83 14 00 00 e3 06 e4 06 00 00 00 d7 0b 00 00 00     ................
	...

00000bd7 <ad_alarm>:
     bd7:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     be7:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     bf7:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     c07:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     c17:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     c27:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     c37:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     c47:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     c57:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     c67:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     c77:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     c87:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     c97:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     ca7:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     cb7:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     cc7:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     cd7:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     ce7:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     cf7:	00 ff                                               ..

00000cf9 <ad_navigate>:
     cf9:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     d09:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     d19:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     d29:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     d39:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     d49:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     d59:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     d69:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     d79:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     d89:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     d99:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     da9:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     db9:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     dc9:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     dd9:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     de9:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     df9:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     e09:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     e19:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     e29:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     e39:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     e49:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     e59:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000e6b <ad_metal>:
     e6b:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     e7b:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     e8b:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     e9b:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     eab:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     ebb:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     ecb:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     edb:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     eeb:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     efb:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     f0b:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     f1b:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     f2b:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     f3b:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     f4b:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     f5b:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     f6b:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     f7b:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     f8b:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     f9b:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     fab:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     fbb:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     fcb:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     fdb:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     feb:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     ffb:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    100b:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    101b:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    102b:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    103b:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    104b:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    105b:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    106b:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    107b:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

0000108b <ad_item>:
    108b:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    109b:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    10ab:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    10bb:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    10cb:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    10db:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    10eb:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    10fb:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    110b:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    111b:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    112b:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    113b:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    114b:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    115b:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    116b:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    117b:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    118b:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    119b:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    11ab:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    11bb:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    11cb:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    11db:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    11eb:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    11fb:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    120b:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    121b:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    122b:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

0000123c <ad_cannonball>:
    123c:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    124c:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    125c:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    126c:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    127c:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    128c:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    129c:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    12ac:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    12bc:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    12cc:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    12dc:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    12ec:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    12fc:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    130c:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    131c:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    132c:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    133c:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    134c:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    135c:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    136c:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    137c:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    138c:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    139c:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    13ac:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    13bc:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    13cc:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    13dc:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    13ec:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    13fc:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    140c:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    141c:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    142c:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    143c:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    144c:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    145c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    146c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    147c:	ff ff ff ff ff 00 00                                .......

00001483 <ad_brick_explode>:
    1483:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    1493:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    14a3:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    14b3:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    14c3:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    14d3:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    14e3:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    14f3:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    1503:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    1513:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    1523:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    1533:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    1543:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    1553:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    1563:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    1573:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    1583:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    1593:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    15a3:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    15b3:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    15c3:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    15d3:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    15e3:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    15f3:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    1603:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    1613:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    1623:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    1633:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    1643:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    1653:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    1663:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    1673:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    1683:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    1693:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    16a3:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    16b3:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    16c3:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    16d3:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    16e3:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    16f3:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    1703:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    1713:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    1723:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    1733:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    1743:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    1753:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    1763:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    1773:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    1783:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    1793:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    17a3:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    17b3:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    17c3:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    17d3:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    17e3:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    17f3:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    1803:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    1813:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    1823:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    1833:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    1843:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    1853:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    1863:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    1873:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    1883:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    1893:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    18a3:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    18b3:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    18c3:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    18d3:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    18e3:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    18f3:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    1903:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    1913:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    1923:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    1933:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    1943:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    1953:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    1963:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    1973:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    1983:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    1993:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    19a3:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    19b3:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    19c3:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    19d3:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    19e3:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    19f3:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    1a03:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    1a13:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    1a23:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    1a33:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    1a43:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    1a53:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    1a63:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    1a73:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    1a83:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    1a93:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    1aa3:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    1ab3:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    1ac3:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    1ad3:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    1ae3:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    1af3:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    1b03:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    1b13:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    1b23:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    1b33:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    1b43:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    1b53:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    1b63:	04 04 02 01 00                                      .....

00001b68 <ad_banter>:
    1b68:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1b78:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    1b88:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    1b98:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    1ba8:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    1bb8:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    1bc8:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    1bd8:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    1be8:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    1bf8:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    1c08:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    1c18:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    1c28:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1c38:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1c48:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1c58:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1c68:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1c78:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    1c88:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    1c98:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    1ca8:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    1cb8:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    1cc8:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    1cd8:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    1ce8:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    1cf8:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    1d08:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    1d18:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    1d28:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1d38:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1d48:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1d58:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1d68:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1d78:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    1d88:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    1d98:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    1da8:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    1db8:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    1dc8:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    1dd8:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    1de8:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    1df8:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    1e08:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    1e18:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    1e28:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1e38:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1e48:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1e58:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1e68:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1e78:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    1e88:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    1e98:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    1ea8:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    1eb8:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    1ec8:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    1ed8:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    1ee8:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    1ef8:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    1f08:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    1f18:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    1f28:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1f38:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1f48:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1f58:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1f68:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1f78:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    1f88:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    1f98:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    1fa8:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    1fb8:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    1fc8:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    1fd8:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    1fe8:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    1ff8:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    2008:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    2018:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    2028:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    2038:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    2048:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    2058:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    2068:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    2078:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    2088:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    2098:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    20a8:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    20b8:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    20c8:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    20d8:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    20e8:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    20f8:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    2108:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    2118:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    2128:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    2138:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    2148:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    2158:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    2168:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    2178:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    2188:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    2198:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    21a8:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    21b8:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    21c8:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    21d8:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    21e8:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    21f8:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    2208:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    2218:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    2228:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    2238:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    2248:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    2258:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    2268:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    2278:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    2288:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    2298:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    22a8:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

000022b9 <level_data>:
    22b9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    22c9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    22f1:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    2309:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    2319:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2329:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    2345:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    2355:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2365:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    2381:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    23a1:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    23b1:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    23c1:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    23d1:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    23e1:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    23f1:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    2401:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    2411:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    2421:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    2431:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    2441:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    2451:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    2461:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    2471:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    2489:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2499:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    24b5:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    24cd:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    24e9:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    24f9:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    2509:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    2525:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    2535:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    2545:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    2565:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    2585:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2595:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25a5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25b5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25c5:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    25e1:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    25fd:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    260d:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    261d:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    262d:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    263d:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    264d:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    265d:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    266d:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    267d:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    268d:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    269d:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    26ad:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    26bd:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    26cd:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    26dd:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    26ed:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    26fd:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    270d:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    271d:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    272d:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    273d:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    274d:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    275d:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    276d:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    277d:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    278d:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    279d:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    27ad:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    27bd:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    27cd:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    27dd:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    27ed:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    27fd:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    280d:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    281d:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    282d:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    283d:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2855:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    2871:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    2881:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2891:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28a1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28b1:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    28cd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    28ed:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2909:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2929:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2945:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2965:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    297d:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    2999:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    29a9:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    29b9:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    29c9:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    29d9:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    29e9:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    29f9:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    2a09:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    2a19:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    2a29:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2a39:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2a49:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2a59:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2a69:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2a79:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2a89:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2a99:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2aa9:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    2ac5:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    2ae9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b09:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b25:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b45:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b61:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b71:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b81:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b91:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2ba1:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    2bb1:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    2bc1:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    2bd1:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    2be1:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    2bf1:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    2c01:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    2c11:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    2c21:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    2c31:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    2c41:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    2c51:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    2c61:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    2c71:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    2c81:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    2c91:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cad:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    2cc5:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    2cd5:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    2ce5:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    2cf5:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    2d0d:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    2d1d:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    2d2d:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2d3d:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    2d4d:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2d5d:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    2d75:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    2d85:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    2d95:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    2dad:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    2dbd:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    2dcd:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    2ddd:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    2ded:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    2dfd:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    2e0d:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    2e25:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    2e35:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e4d:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2e5d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e6d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e7d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e8d:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ea9:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    2ec5:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    2ee5:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    2ef5:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f05:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    2f21:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    2f41:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    2f5d:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    2f7d:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2f8d:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2f9d:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    2fad:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2fc5:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    2fd5:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    2fe5:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    2ff5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    3005:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    3015:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    3031:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3041:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    3051:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3061:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    3081:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    309d:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    30bd:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    30d5:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    30e5:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3101:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    311d:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    313d:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    314d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    315d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    316d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    317d:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    318d:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    31a5:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    31b5:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    31c5:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    31d5:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    31e5:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    31f5:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    3205:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    3215:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    3225:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    324d:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    325d:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    326d:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    327d:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    3295:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    32a5:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    32b5:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    32c5:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    32d5:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    32e5:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    32f5:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    330d:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    331d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    332d:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    333d:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    334d:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    335d:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    336d:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    337d:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    338d:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    339d:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    33ad:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    33bd:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33cd:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    33dd:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    33ed:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    3409:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    342d:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    343d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    344d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    345d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    346d:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    347d:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    3495:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    34a5:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    34b5:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    34c5:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    34d5:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    34e5:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    34f5:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    3505:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    3515:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    3525:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    3535:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    3559:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3575:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    3585:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    3595:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    35a5:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    35b5:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    35c5:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    35d5:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    35e5:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    35fd:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    360d:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3629:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3649:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    3659:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    3669:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    3679:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    3689:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    3699:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    36a9:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    36b9:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    36c9:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    36d9:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    36e9:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    36f9:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    3709:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    3719:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3729:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3739:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3749:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3759:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3775:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3791:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37b1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37cd:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    37dd:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    37ed:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3809:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3821:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    3831:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    3841:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    3851:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    3861:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    3871:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    3881:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    3891:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    38a1:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    38b1:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    38c1:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    38d1:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    38e9:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    38f9:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    3909:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    3919:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3929:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3939:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3955:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3971:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    3981:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    3991:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39ad:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39cd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39e9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a09:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a19:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a29:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a39:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    3a61:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a81:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a9d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3abd:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3acd:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    3add:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3af9:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    3b15:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3b2d:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    3b3d:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    3b4d:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    3b5d:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    3b6d:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    3b7d:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    3b8d:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    3b9d:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    3bad:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    3bbd:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    3bcd:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    3bdd:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    3bed:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    3c05:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3c25:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c41:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c61:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3c71:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    3c81:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c9d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cb9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cd9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cf5:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d05:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d15:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d25:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d35:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3d45:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3d55:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3d65:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3d75:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3d85:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    3d95:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3da5:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    3db5:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3dc5:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    3dd5:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3de5:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    3df5:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3e05:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    3e15:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    3e25:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3e35:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3e45:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3e55:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3e65:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3e75:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    3e85:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    3e95:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    3eb9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ed5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ef5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f11:	00 00 00 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
	...
    3f2d:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
	...
    3f4d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f6d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f89:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fa9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fb9:	00 07 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    3fc9:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fe5:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3ff5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................

00004005 <sprites_data>:
    4005:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    4015:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    4025:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4035:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4045:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    4055:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    4065:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    4075:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    4085:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    4095:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    40a5:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    40b5:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    40c5:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    40d5:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    40e5:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    40f5:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    4105:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4115:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    4125:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    4135:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    4145:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4155:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    4165:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    4175:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    4185:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4195:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    41a5:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    41b5:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    41c5:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    41d5:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    41e5:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    41f5:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    4205:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4215:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    4225:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    4235:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4245:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4255:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    4265:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    4275:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4285:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    4295:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    42a5:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    42b5:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    42c5:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    42d5:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    42e5:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    42f5:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    4305:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    4315:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    4325:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    4335:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    4345:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    4355:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    4365:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    4375:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    4385:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    4395:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    43a5:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    43b5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43c5:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    43d5:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    43e5:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    43f5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4405:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    4415:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    4425:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    4435:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4445:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4455:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    4465:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    4475:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    4485:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    4495:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    44a5:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    44b5:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    44c5:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    44d5:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    44e5:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    44f5:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4505:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4515:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    4525:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    4535:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    4545:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4555:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4565:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    4575:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    4585:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4595:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    45a5:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    45b5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    45c5:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    45d5:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    45e5:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    45f5:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    4605:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    4615:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    4625:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    4635:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4645:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4655:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    4665:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    4675:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4685:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4695:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    46a5:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    46b5:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    46c5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    46d5:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    46e5:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    46f5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4705:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    4715:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    4725:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    4735:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    4745:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4755:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    4765:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    4775:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    4785:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    4795:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    47a5:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    47b5:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    47c5:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    47d5:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    47e5:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    47f5:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4805:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    4815:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    4825:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    4835:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    4845:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4855:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4865:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    4875:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    4885:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    4895:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    48a5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48b5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48c5:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    48d5:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    48e5:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    48f5:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    4905:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4915:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4925:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4935:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00004945 <map_sub_turret>:
    4945:	01 01 23                                            ..#

00004948 <map_sub_shot>:
    4948:	01 01 1b                                            ...

0000494b <map_up_arrow>:
    494b:	01 01 22                                            .."

0000494e <map_down_arrow>:
    494e:	01 01 21                                            ..!

00004951 <map_right_arrow>:
    4951:	01 01 20                                            .. 

00004954 <map_rocket_right_1>:
    4954:	01 01 1a                                            ...

00004957 <map_rocket_right_0>:
    4957:	01 01 19                                            ...

0000495a <map_rocket_up_1>:
    495a:	01 01 18                                            ...

0000495d <map_rocket_up_0>:
    495d:	01 01 17                                            ...

00004960 <map_ball>:
    4960:	01 01 16                                            ...

00004963 <map_explosion_2>:
    4963:	02 02 08 09 09 08                                   ......

00004969 <map_explosion_1>:
    4969:	02 02 06 07 10 11                                   ......

0000496f <map_explosion_0>:
    496f:	02 02 04 05 0e 0f                                   ......

00004975 <map_tank2_right_0>:
    4975:	02 02 14 15 1e 1f                                   ......

0000497b <map_tank2_up_0>:
    497b:	02 02 12 13 1c 1d                                   ......

00004981 <map_tank1_right_0>:
    4981:	02 02 02 03 0c 0d                                   ......

00004987 <map_tank1_up_0>:
    4987:	02 02 00 01 0a 0b                                   ......

0000498d <map_tank_blank>:
    498d:	02 02 24 24 24 24                                   ..$$$$

00004993 <map_none>:
    4993:	01 01 24                                            ..$

00004996 <tiles_data>:
	...
    49d6:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    49e6:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    49f6:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    4a06:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    4a16:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    4a26:	ec ed ff ff ff ff f6 ec ec ed ee ff ff f6 ed ec     ................
    4a36:	ec ed ee ff f6 ee ed ec ec ed ff f6 ee ee ed ec     ................
    4a46:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    4a56:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    4a66:	ec ed ff f6 ee ff ed ec ec ed f6 3f ff ee ed ec     ...........?....
    4a76:	ec ed ee ff 3f f6 ed ec ec ed ff ee f6 ff ed ec     ....?...........
    4a86:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    4a96:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    4aa6:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    4ab6:	ec ff f6 ff ff ee ed ec ec ed ff f6 ee ee ed ec     ................
    4ac6:	ec 3f ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     .?..............
    4ad6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    4ae6:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4af6:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    4b06:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4b1e:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4b2e:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4b3e:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    4b56:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    4b66:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    4b76:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    4b86:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    4b9e:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    4bbe:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    4bd6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    4be6:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4bf6:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    4c06:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    4c16:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    4c26:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    4c36:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    4c46:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4c56:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    4c66:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    4c76:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    4c86:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    4c96:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    4ca6:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    4cb6:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    4cc6:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    4cd6:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4ce6:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4cf6:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    4d06:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    4d16:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    4d26:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    4d36:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    4d46:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    4d56:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    4d66:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    4d76:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    4d86:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    4d96:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4da6:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4db6:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    4dc6:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4dd6:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4de6:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    4df6:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    4e06:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4e16:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    4e26:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    4e36:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    4e46:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4e56:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    4e66:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4e76:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4e86:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4e96:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4ea6:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4eb6:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4ec6:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4ef6:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4f06:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f16:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    4f26:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4f36:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4f46:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4f56:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    4f66:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4f76:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4f86:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4f96:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    4fa6:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    4fb6:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4fc6:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4fd6:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    4fe6:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    4ff6:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    5006:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    5016:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5026:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5036:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5046:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5056:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5066:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    5096:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50a6:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50b6:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    50c6:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    50d6:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    50e6:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50f6:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5106:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5116:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    5156:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    5166:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    5176:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    5186:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    5196:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    51a6:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    51b6:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    51c6:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    5206:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    523e:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    524e:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    525e:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    526e:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    527e:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    528e:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    529e:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    52ae:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    52be:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    52ce:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    52de:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    52ee:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    52fe:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    530e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    531e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    532e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    533e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    534e:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    535e:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    536e:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    537e:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    538e:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    539e:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    53ae:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    53be:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    53ce:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    53de:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5416:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5426:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5436:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    545a:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    546a:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    547a:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    548a:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    549a:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    54aa:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    54ba:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    54ca:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    54da:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    54ea:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    54fa:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    550a:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    551a:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    552a:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    553a:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    554a:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    555a:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    556a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    557a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    558a:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    559a:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    55aa:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    55ba:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    55ca:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    55da:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    55ea:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    55fa:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    560a:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    561a:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    562a:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    563a:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    564a:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    565a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    566a:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    567a:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    568a:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    569a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    56aa:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    56ba:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    56ca:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    56da:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    56ea:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    56fa:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    570a:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    571a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    572a:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    573a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    574a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    575a:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    576a:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    577a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    578a:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    579a:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    57aa:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57ba:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57ca:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    57da:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    57ea:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57fa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    580a:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    581a:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    582a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    583a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    584a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    585a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    586a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    587a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    588a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    589a:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    58aa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    58ba:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    58ca:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    58da:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    58ea:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    58fa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    590a:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    591a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    592a:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    593a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    594a:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    595a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    596a:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    597a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    598a:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    599a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    59aa:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    59ba:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    59ca:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    59da:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    59ea:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    59fa:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    5a0a:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5a1a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5a2a:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    5a3a:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    5a4a:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5a5a:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    5a6a:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    5a7a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    5a8a:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    5a9a:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5aaa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5aba:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5aca:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    5ada:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5aea:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5afa:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    5b0a:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    5b1a:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b2a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b3a:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    5b4a:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5b5a:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b6a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b7a:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5b8a:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5b9a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5baa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bba:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5bca:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5bda:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5bea:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    5bfa:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5c0a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5c1a:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5c2a:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5c3a:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5c4a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5c5a:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    5c6a:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    5c7a:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5c8a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5c9a:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5caa:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    5cba:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    5cca:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    5cda:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5cea:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5cfa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d0a:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    5d1a:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    5d2a:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5d3a:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5d4a:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    5d5a:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    5d6a:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    5d7a:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    5d8a:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    5d9a:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5daa:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5dba:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5dca:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    5dda:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    5dea:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    5dfa:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5e0a:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5e1a:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5e2a:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5e3a:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5e4a:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5e5a:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    5e6a:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    5e7a:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5e8a:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    5e9a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5eaa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5eba:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5eca:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5eda:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5eea:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5efa:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f0a:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    5f1a:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f2a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f3a:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    5f4a:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5f5a:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f6a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f7a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f8a:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    5f9a:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    5faa:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    5fba:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5fca:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5fda:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5fea:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    5ffa:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    600a:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    601a:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    602a:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    603a:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    604a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    605a:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    606a:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    607a:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    608a:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    609a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    60aa:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    60ba:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    60ca:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    60da:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    60ea:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    60fa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    610a:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    611a:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    612a:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    613a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    614a:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    615a:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    616a:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    617a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    618a:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    619a:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    61aa:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    61ba:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    61ca:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    61da:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    61ea:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    61fa:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    620a:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    621a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    622a:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    623a:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    624a:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    625a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    626a:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    627a:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    628a:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    629a:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    62aa:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    62ba:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    62ca:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    62da:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    62ea:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    62fa:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    630a:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    631a:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    632a:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    633a:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    634a:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    635a:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    636a:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    637a:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    638a:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    639a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    63aa:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    63ba:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    63ca:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    63da:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    63ea:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    63fa:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    640a:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    641a:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    642a:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    643a:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    644a:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    645a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    646a:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    647a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    648a:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    649a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    64aa:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    64ba:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    64ca:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    64da:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    64ea:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    64fa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    650a:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    651a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    652a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    653a:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    654a:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    655a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    656a:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    657a:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    658a:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    659a:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    65aa:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    65ba:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    65ca:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    65da:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    65ea:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    65fa:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    660a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    661a:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    662a:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    663a:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    664a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    665a:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    666a:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    667a:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    668a:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    669a:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    66aa:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    66ba:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    66ca:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    66da:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    66ea:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    66fa:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    670a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    671a:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    672a:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    673a:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    674a:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    675a:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    676a:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    677a:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    678a:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    679a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    67aa:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    67ba:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    67ca:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    67da:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    67ea:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    67fa:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    680a:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    681a:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    682a:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    683a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    684a:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    685a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    686a:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    687a:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    688a:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    689a:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    68aa:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    68ba:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    68ca:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    68da:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    68ea:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    68fa:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    690a:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    691a:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    692a:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    693a:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    694a:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    695a:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    696a:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    697a:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    698a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    699a:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    69aa:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    69ba:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    69ca:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    69da:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    69ea:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    69fa:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a0a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6a1a:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    6a2a:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6a3a:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a4a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6a5a:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    6a6a:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6a7a:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a8a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6a9a:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6aaa:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6aba:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6aca:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    6ada:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6aea:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6afa:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6b0a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    6b1a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6b2a:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6b3a:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6b4a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6b5a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6b6a:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6b7a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b8a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6b9a:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    6baa:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6bba:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6bca:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6bda:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    6bea:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6bfa:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c0a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6c1a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6c2a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c3a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c4a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6c5a:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    6c6a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c7a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c8a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c9a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6caa:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6cba:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6cca:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    6cda:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6cea:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6cfa:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d0a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6d1a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6d2a:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    6d3a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d4a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6d5a:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6d6a:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6d7a:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    6d8a:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6d9a:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6daa:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6dba:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6dca:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6dda:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6dea:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    6dfa:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    6e0a:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    6e1a:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    6e2a:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    6e3a:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6e4a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6e5a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6e6a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6e7a:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6e8a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6e9a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6eaa:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6eba:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6eca:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6eda:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    6eea:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6efa:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6f0a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6f1a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f2a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    6f3a:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6f4a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6f5a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f6a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f7a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6f8a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6f9a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6faa:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fba:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6fca:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    6fda:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fea:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ffa:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    700a:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    701a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    702a:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    703a:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    704a:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    709e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    70ae:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    70c6:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    70de:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    70ee:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    711e:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    712e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    713e:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    7156:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    7166:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    7176:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7186:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    719e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    71ae:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    71be:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    71d6:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    71e6:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    71f6:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    7206:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    721e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    722e:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7262:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    7272:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    7282:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    729e:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    72ae:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    72be:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    72de:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    72ee:	df df df df df df df df 00 00 df df df df 00 00     ................
    72fe:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    731e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    732e:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    733e:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    737e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    738e:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    73ae:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    73fe:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7422:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    7432:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    7442:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    745e:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    746e:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    747e:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    749e:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    74ae:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    74be:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    74de:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    74ee:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    74fe:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    751e:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    752e:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    753e:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7562:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    7572:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    7582:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    759e:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    75ae:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    75be:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    75de:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    75ee:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    75fe:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    761e:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    762e:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    763e:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    765e:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    766e:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    767e:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    769e:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    76ae:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    76be:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    76e6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    76fe:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7716:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7726:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7736:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7746:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7756:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    7766:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7776:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7786:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    77a6:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    77be:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    77d6:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    77e6:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    77f6:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7806:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    781e:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    782e:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7846:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    785e:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    786e:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    787e:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    789e:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    78ae:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78be:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    78de:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    78ee:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    78fe:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    791e:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    792e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    793e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    795e:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    796e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    797e:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    799e:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    79ae:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    79be:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    79de:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    79ee:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    79fe:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7a1e:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7a2e:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    7a3e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    7a5e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7a6e:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7a7e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7a9e:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7aae:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7abe:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7ae2:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7af2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    7b02:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    7b1e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    7b2e:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    7b3e:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7b5e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7b6e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7b7e:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7b9e:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    7bae:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    7bbe:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7bde:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    7bee:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7bfe:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7c1e:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7c2e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7c3e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7c5e:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7c6e:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7c7e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7c9e:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7cae:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7cbe:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    7cde:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7cee:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7cfe:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7d1e:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7d2e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    7d3e:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7d5e:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7d6e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7d7e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7d9e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7dae:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7dbe:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    7dde:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7dee:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7dfe:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7e1e:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    7e2e:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    7e3e:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7e5e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7e6e:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    7e7e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7e9e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7eae:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    7ebe:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7ede:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    7eee:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7efe:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7f1e:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7f2e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7f3e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    7f5e:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7f6e:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    7f7e:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    7f9e:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7fae:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7fbe:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7fe2:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    7ff2:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    8046:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00008056 <map_sub_emerging>:
    8056:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8066:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    8076:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8086:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8096:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    80a6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    80b6:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    80c6:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    80d6:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    80e6:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    80f6:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    8106:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    8116:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8126:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    8136:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8146:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8156:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8166:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8176:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8186:	0d 0d 0d 0d 0d 0d                                   ......

0000818c <map_sub>:
    818c:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    819c:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    81ac:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    81bc:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    81cc:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    81dc:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    81ec:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    81fc:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    820c:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    821c:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    822c:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    823c:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    824c:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    825c:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    826c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    827c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    828c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    829c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    82ac:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    82bc:	0d 0d 0d 0d 0d 0d                                   ......

000082c2 <map_scope_2>:
    82c2:	01 01 12                                            ...

000082c5 <map_scope_1>:
    82c5:	01 01 11                                            ...

000082c8 <map_scope_0>:
    82c8:	01 01 10                                            ...

000082cb <map_blue_tank>:
    82cb:	02 02 2b 2c 31 32                                   ..+,12

000082d1 <map_green_tank>:
    82d1:	02 02 18 19 23 24                                   ....#$

000082d7 <map_fence>:
    82d7:	01 01 0f                                            ...

000082da <map_turf>:
    82da:	01 01 0e                                            ...

000082dd <map_water>:
    82dd:	01 01 0d                                            ...

000082e0 <map_metal_bl>:
    82e0:	01 01 0c                                            ...

000082e3 <map_metal_tr>:
    82e3:	01 01 0b                                            ...

000082e6 <map_metal_br>:
    82e6:	01 01 0a                                            ...

000082e9 <map_metal_tl>:
    82e9:	01 01 09                                            ...

000082ec <map_tile_exp_2>:
    82ec:	01 01 08                                            ...

000082ef <map_tile_exp_1>:
    82ef:	01 01 07                                            ...

000082f2 <map_tile_exp_0>:
    82f2:	01 01 06                                            ...

000082f5 <map_rocket_itm>:
    82f5:	01 01 04                                            ...

000082f8 <map_explode_itm>:
    82f8:	01 01 03                                            ...

000082fb <map_speed_itm>:
    82fb:	01 01 02                                            ...

000082fe <map_metal>:
    82fe:	01 01 05                                            ...

00008301 <map_brick>:
    8301:	01 01 01                                            ...

00008304 <map_splash>:
    8304:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    8314:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    8324:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    8334:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    8344:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    8354:	1a 00 00 1a 2f 30                                   ..../0

0000835a <map_pause>:
    835a:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    836a:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    837a:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    838a:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00008398 <map_tile_none>:
    8398:	01 01 00 00                                         ....

0000839c <__ctors_end>:
    839c:	11 24       	eor	r1, r1
    839e:	1f be       	out	0x3f, r1	; 63
    83a0:	cf ef       	ldi	r28, 0xFF	; 255
    83a2:	d0 e1       	ldi	r29, 0x10	; 16
    83a4:	de bf       	out	0x3e, r29	; 62
    83a6:	cd bf       	out	0x3d, r28	; 61

000083a8 <__do_copy_data>:
    83a8:	11 e0       	ldi	r17, 0x01	; 1
    83aa:	a0 e0       	ldi	r26, 0x00	; 0
    83ac:	b1 e0       	ldi	r27, 0x01	; 1
    83ae:	e0 ee       	ldi	r30, 0xE0	; 224
    83b0:	f7 ee       	ldi	r31, 0xE7	; 231
    83b2:	02 c0       	rjmp	.+4      	; 0x83b8 <__do_copy_data+0x10>
    83b4:	05 90       	lpm	r0, Z+
    83b6:	0d 92       	st	X+, r0
    83b8:	a6 30       	cpi	r26, 0x06	; 6
    83ba:	b1 07       	cpc	r27, r17
    83bc:	d9 f7       	brne	.-10     	; 0x83b4 <__do_copy_data+0xc>

000083be <__do_clear_bss>:
    83be:	10 e1       	ldi	r17, 0x10	; 16
    83c0:	a6 e0       	ldi	r26, 0x06	; 6
    83c2:	b1 e0       	ldi	r27, 0x01	; 1
    83c4:	01 c0       	rjmp	.+2      	; 0x83c8 <.do_clear_bss_start>

000083c6 <.do_clear_bss_loop>:
    83c6:	1d 92       	st	X+, r1

000083c8 <.do_clear_bss_start>:
    83c8:	af 39       	cpi	r26, 0x9F	; 159
    83ca:	b1 07       	cpc	r27, r17
    83cc:	e1 f7       	brne	.-8      	; 0x83c6 <.do_clear_bss_loop>

000083ce <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    83ce:	0e 94 1b 46 	call	0x8c36	; 0x8c36 <wdt_randomize>
#endif

    MCUSR = 0;
    83d2:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    83d4:	88 e1       	ldi	r24, 0x18	; 24
    83d6:	0f b6       	in	r0, 0x3f	; 63
    83d8:	f8 94       	cli
    83da:	80 93 60 00 	sts	0x0060, r24
    83de:	10 92 60 00 	sts	0x0060, r1
    83e2:	0f be       	out	0x3f, r0	; 63

000083e4 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    83e4:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <isEepromFormatted>
    83e8:	81 11       	cpse	r24, r1
    83ea:	02 c0       	rjmp	.+4      	; 0x83f0 <Initialize+0xc>
    83ec:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <FormatEeprom>

	cli();
    83f0:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    83f2:	81 e0       	ldi	r24, 0x01	; 1
    83f4:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    83f8:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    83fc:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    8400:	10 92 02 0b 	sts	0x0B02, r1
    8404:	10 92 08 0b 	sts	0x0B08, r1
    8408:	10 92 0e 0b 	sts	0x0B0E, r1
    840c:	10 92 14 0b 	sts	0x0B14, r1
    8410:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    8414:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    8418:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    841c:	92 e1       	ldi	r25, 0x12	; 18
    841e:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    8422:	90 ee       	ldi	r25, 0xE0	; 224
    8424:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    8428:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    842c:	94 e1       	ldi	r25, 0x14	; 20
    842e:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    8432:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    8436:	10 92 f4 0a 	sts	0x0AF4, r1
    843a:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    843e:	10 92 f8 0a 	sts	0x0AF8, r1
    8442:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    8446:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    844a:	0e 94 5f 53 	call	0xa6be	; 0xa6be <InitializeVideoMode>
    844e:	80 e7       	ldi	r24, 0x70	; 112
    8450:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    8452:	fc 01       	movw	r30, r24
    8454:	25 91       	lpm	r18, Z+
    8456:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    8458:	f9 01       	movw	r30, r18
    845a:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    845c:	30 83       	st	Z, r19
    845e:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    8460:	20 e0       	ldi	r18, 0x00	; 0
    8462:	8e 39       	cpi	r24, 0x9E	; 158
    8464:	92 07       	cpc	r25, r18
    8466:	a9 f7       	brne	.-22     	; 0x8452 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    8468:	78 94       	sei
	
	DisplayLogo();
    846a:	0e 94 1e 54 	call	0xa83c	; 0xa83c <DisplayLogo>
    846e:	0e 94 04 71 	call	0xe208	; 0xe208 <main>
    8472:	0c 94 ee 73 	jmp	0xe7dc	; 0xe7dc <_exit>

00008476 <__bad_interrupt>:
    8476:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000847a <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    847a:	0c e0       	ldi	r16, 0x0C	; 12
    847c:	0a 95       	dec	r16
    847e:	f1 f7       	brne	.-4      	; 0x847c <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    8480:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    8482:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    8484:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    8486:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    8488:	20 91 c0 0b 	lds	r18, 0x0BC0


		clr r16
    848c:	00 27       	eor	r16, r16

0000848e <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    848e:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    8490:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    8492:	ac 0f       	add	r26, r28
		adc XH,YH
    8494:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    8496:	1c 91       	ld	r17, X
		std Z+2,r17
    8498:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    849a:	02 17       	cp	r16, r18
		brsh noov
    849c:	08 f4       	brcc	.+2      	; 0x84a0 <noov>
		mov r17,r16
    849e:	10 2f       	mov	r17, r16

000084a0 <noov>:
	noov:
		st X,r17
    84a0:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    84a2:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    84a4:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    84a6:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    84a8:	90 f3       	brcs	.-28     	; 0x848e <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    84aa:	05 e2       	ldi	r16, 0x25	; 37

000084ac <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    84ac:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    84ae:	1a 95       	dec	r17
		brne .-4
    84b0:	f1 f7       	brne	.-4      	; 0x84ae <wait_loop+0x2>

		dec r16
    84b2:	0a 95       	dec	r16
		brne wait_loop
    84b4:	d9 f7       	brne	.-10     	; 0x84ac <wait_loop>

		lds r2,overlay_tile_table
    84b6:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    84ba:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    84be:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    84c2:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    84c6:	68 01       	movw	r12, r16
		movw r6,r16
    84c8:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    84ca:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    84cc:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    84ce:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    84d0:	4e 01       	movw	r8, r28
		clr r0
    84d2:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    84d4:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    84d8:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    84da:	09 f0       	breq	.+2      	; 0x84de <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    84dc:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    84de:	09 f0       	breq	.+2      	; 0x84e2 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    84e0:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    84e2:	09 f0       	breq	.+2      	; 0x84e6 <wait_loop+0x3a>
		mov r24,r19
    84e4:	83 2f       	mov	r24, r19

		breq .+2
    84e6:	09 f0       	breq	.+2      	; 0x84ea <wait_loop+0x3e>
		movw r12,r2
    84e8:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    84ea:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    84ec:	a0 2e       	mov	r10, r16
		clr r22
    84ee:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    84f0:	78 e0       	ldi	r23, 0x08	; 8

000084f2 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    84f2:	7d d2       	rcall	.+1274   	; 0x89ee <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    84f4:	3c e0       	ldi	r19, 0x0C	; 12
    84f6:	3a 95       	dec	r19
    84f8:	f1 f7       	brne	.-4      	; 0x84f6 <next_tile_line+0x4>
    84fa:	00 00       	nop
    84fc:	00 00       	nop

		;***draw line***
		call render_tile_line
    84fe:	0e 94 b0 42 	call	0x8560	; 0x8560 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    8502:	3f e0       	ldi	r19, 0x0F	; 15
    8504:	3a 95       	dec	r19
    8506:	f1 f7       	brne	.-4      	; 0x8504 <next_tile_line+0x12>
    8508:	00 00       	nop
    850a:	00 00       	nop

		dec r10
    850c:	aa 94       	dec	r10
		breq frame_end
    850e:	a9 f0       	breq	.+42     	; 0x853a <frame_end>
	
		inc r22
    8510:	63 95       	inc	r22
		lpm ;3 nop
    8512:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    8514:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    8516:	31 f0       	breq	.+12     	; 0x8524 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    8518:	33 e0       	ldi	r19, 0x03	; 3
    851a:	3a 95       	dec	r19
    851c:	f1 f7       	brne	.-4      	; 0x851a <next_tile_line+0x28>
    851e:	00 00       	nop
    8520:	00 00       	nop
		
		rjmp next_tile_line	
    8522:	e7 cf       	rjmp	.-50     	; 0x84f2 <next_tile_line>

00008524 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    8524:	66 27       	eor	r22, r22

		clr r0
    8526:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    8528:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    852a:	c3 0f       	add	r28, r19
		adc YH,r0
    852c:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    852e:	8a 95       	dec	r24
		brne .+2
    8530:	09 f4       	brne	.+2      	; 0x8534 <next_tile_row+0x10>
		movw YL,r8	;main vram
    8532:	e4 01       	movw	r28, r8
		brne .+2
    8534:	09 f4       	brne	.+2      	; 0x8538 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    8536:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    8538:	dc cf       	rjmp	.-72     	; 0x84f2 <next_tile_line>

0000853a <frame_end>:

	frame_end:

		WAIT r19,18
    853a:	36 e0       	ldi	r19, 0x06	; 6
    853c:	3a 95       	dec	r19
    853e:	f1 f7       	brne	.-4      	; 0x853c <frame_end+0x2>

		rcall hsync_pulse ;145
    8540:	56 d2       	rcall	.+1196   	; 0x89ee <hsync_pulse>
	
		clr r1
    8542:	11 24       	eor	r1, r1
		call RestoreBackground
    8544:	0e 94 00 52 	call	0xa400	; 0xa400 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    8548:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    854c:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    854e:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    8550:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    8552:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    8556:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    8558:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    855c:	11 24       	eor	r1, r1


		ret
    855e:	08 95       	ret

00008560 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    8560:	de 01       	movw	r26, r28

		mul r22,r23
    8562:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    8564:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8566:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8568:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    856a:	00 0d       	add	r16, r0
		adc r17,r1
    856c:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    856e:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    8570:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    8572:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    8574:	00 0d       	add	r16, r0
		adc r17,r1
    8576:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    8578:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    857a:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    857c:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    857e:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    8580:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    8582:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    8584:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    8586:	08 f4       	brcc	.+2      	; 0x858a <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    8588:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    858a:	04 0e       	add	r0, r20
	    adc r1,r21
    858c:	15 1e       	adc	r1, r21

		movw ZL,r0
    858e:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    8590:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    8592:	f0 f0       	brcs	.+60     	; 0x85d0 <ramloop>

00008594 <romloop>:
	

	romloop:
	    lpm r16,Z+
    8594:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8596:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    8598:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    859a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    859c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    859e:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    85a0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    85a2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    85a4:	28 31       	cpi	r18, 0x18	; 24
		nop
    85a6:	00 00       	nop

	    lpm r16,Z+
    85a8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    85aa:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    85ac:	08 f4       	brcc	.+2      	; 0x85b0 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    85ae:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    85b0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    85b2:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    85b4:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    85b6:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    85b8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    85ba:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    85bc:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    85be:	1a 95       	dec	r17
   
	    lpm r16,Z+
    85c0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    85c2:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    85c4:	05 91       	lpm	r16, Z+

		breq end	
    85c6:	31 f1       	breq	.+76     	; 0x8614 <end>
	    movw ZL,r0   	;copy next tile adress
    85c8:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    85ca:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    85cc:	18 f7       	brcc	.-58     	; 0x8594 <romloop>
	
		rjmp .
    85ce:	00 c0       	rjmp	.+0      	; 0x85d0 <ramloop>

000085d0 <ramloop>:

	ramloop:

	    ld r16,Z+
    85d0:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    85d2:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    85d4:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    85d6:	01 91       	ld	r16, Z+
		nop   
    85d8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    85da:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    85dc:	23 9f       	mul	r18, r19


	    ld r16,Z+
    85de:	01 91       	ld	r16, Z+
		nop
    85e0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    85e2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    85e4:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    85e6:	00 c0       	rjmp	.+0      	; 0x85e8 <ramloop+0x18>

	    ld r16,Z+
    85e8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    85ea:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    85ec:	08 f0       	brcs	.+2      	; 0x85f0 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    85ee:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    85f0:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    85f2:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    85f4:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    85f6:	15 1e       	adc	r1, r21
		rjmp .
    85f8:	00 c0       	rjmp	.+0      	; 0x85fa <ramloop+0x2a>
    
		ld r16,Z+		
    85fa:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    85fc:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    85fe:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    8600:	00 c0       	rjmp	.+0      	; 0x8602 <ramloop+0x32>

	    ld r16,Z+	
    8602:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    8604:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    8606:	01 91       	ld	r16, Z+

	    dec r17
    8608:	1a 95       	dec	r17
	    breq end
    860a:	21 f0       	breq	.+8      	; 0x8614 <end>
	
		movw ZL,r0
    860c:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    860e:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    8610:	08 f6       	brcc	.-126    	; 0x8594 <romloop>
		rjmp ramloop
    8612:	de cf       	rjmp	.-68     	; 0x85d0 <ramloop>

00008614 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    8614:	08 b9       	out	0x08, r16	; 8
		clr r16	
    8616:	00 27       	eor	r16, r16
		lpm	
    8618:	c8 95       	lpm
		nop
    861a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    861c:	08 b9       	out	0x08, r16	; 8

		ret
    861e:	08 95       	ret

00008620 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8620:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    8622:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    8626:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    862a:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    862c:	82 9f       	mul	r24, r18
	add ZL,r0
    862e:	e0 0d       	add	r30, r0
	adc ZH,r1
    8630:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8632:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8634:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8636:	62 9f       	mul	r22, r18
	add XL,r0
    8638:	a0 0d       	add	r26, r0
	adc XH,r1
    863a:	b1 1d       	adc	r27, r1

	clr r0
    863c:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    863e:	05 90       	lpm	r0, Z+
    8640:	0d 92       	st	X+, r0
    8642:	05 90       	lpm	r0, Z+
    8644:	0d 92       	st	X+, r0
    8646:	05 90       	lpm	r0, Z+
    8648:	0d 92       	st	X+, r0
    864a:	05 90       	lpm	r0, Z+
    864c:	0d 92       	st	X+, r0
    864e:	05 90       	lpm	r0, Z+
    8650:	0d 92       	st	X+, r0
    8652:	05 90       	lpm	r0, Z+
    8654:	0d 92       	st	X+, r0
    8656:	05 90       	lpm	r0, Z+
    8658:	0d 92       	st	X+, r0
    865a:	05 90       	lpm	r0, Z+
    865c:	0d 92       	st	X+, r0
    865e:	05 90       	lpm	r0, Z+
    8660:	0d 92       	st	X+, r0
    8662:	05 90       	lpm	r0, Z+
    8664:	0d 92       	st	X+, r0
    8666:	05 90       	lpm	r0, Z+
    8668:	0d 92       	st	X+, r0
    866a:	05 90       	lpm	r0, Z+
    866c:	0d 92       	st	X+, r0
    866e:	05 90       	lpm	r0, Z+
    8670:	0d 92       	st	X+, r0
    8672:	05 90       	lpm	r0, Z+
    8674:	0d 92       	st	X+, r0
    8676:	05 90       	lpm	r0, Z+
    8678:	0d 92       	st	X+, r0
    867a:	05 90       	lpm	r0, Z+
    867c:	0d 92       	st	X+, r0
    867e:	05 90       	lpm	r0, Z+
    8680:	0d 92       	st	X+, r0
    8682:	05 90       	lpm	r0, Z+
    8684:	0d 92       	st	X+, r0
    8686:	05 90       	lpm	r0, Z+
    8688:	0d 92       	st	X+, r0
    868a:	05 90       	lpm	r0, Z+
    868c:	0d 92       	st	X+, r0
    868e:	05 90       	lpm	r0, Z+
    8690:	0d 92       	st	X+, r0
    8692:	05 90       	lpm	r0, Z+
    8694:	0d 92       	st	X+, r0
    8696:	05 90       	lpm	r0, Z+
    8698:	0d 92       	st	X+, r0
    869a:	05 90       	lpm	r0, Z+
    869c:	0d 92       	st	X+, r0
    869e:	05 90       	lpm	r0, Z+
    86a0:	0d 92       	st	X+, r0
    86a2:	05 90       	lpm	r0, Z+
    86a4:	0d 92       	st	X+, r0
    86a6:	05 90       	lpm	r0, Z+
    86a8:	0d 92       	st	X+, r0
    86aa:	05 90       	lpm	r0, Z+
    86ac:	0d 92       	st	X+, r0
    86ae:	05 90       	lpm	r0, Z+
    86b0:	0d 92       	st	X+, r0
    86b2:	05 90       	lpm	r0, Z+
    86b4:	0d 92       	st	X+, r0
    86b6:	05 90       	lpm	r0, Z+
    86b8:	0d 92       	st	X+, r0
    86ba:	05 90       	lpm	r0, Z+
    86bc:	0d 92       	st	X+, r0
    86be:	05 90       	lpm	r0, Z+
    86c0:	0d 92       	st	X+, r0
    86c2:	05 90       	lpm	r0, Z+
    86c4:	0d 92       	st	X+, r0
    86c6:	05 90       	lpm	r0, Z+
    86c8:	0d 92       	st	X+, r0
    86ca:	05 90       	lpm	r0, Z+
    86cc:	0d 92       	st	X+, r0
    86ce:	05 90       	lpm	r0, Z+
    86d0:	0d 92       	st	X+, r0
    86d2:	05 90       	lpm	r0, Z+
    86d4:	0d 92       	st	X+, r0
    86d6:	05 90       	lpm	r0, Z+
    86d8:	0d 92       	st	X+, r0
    86da:	05 90       	lpm	r0, Z+
    86dc:	0d 92       	st	X+, r0
    86de:	05 90       	lpm	r0, Z+
    86e0:	0d 92       	st	X+, r0
    86e2:	05 90       	lpm	r0, Z+
    86e4:	0d 92       	st	X+, r0
    86e6:	05 90       	lpm	r0, Z+
    86e8:	0d 92       	st	X+, r0
    86ea:	05 90       	lpm	r0, Z+
    86ec:	0d 92       	st	X+, r0
    86ee:	05 90       	lpm	r0, Z+
    86f0:	0d 92       	st	X+, r0
    86f2:	05 90       	lpm	r0, Z+
    86f4:	0d 92       	st	X+, r0
    86f6:	05 90       	lpm	r0, Z+
    86f8:	0d 92       	st	X+, r0
    86fa:	05 90       	lpm	r0, Z+
    86fc:	0d 92       	st	X+, r0
    86fe:	05 90       	lpm	r0, Z+
    8700:	0d 92       	st	X+, r0
    8702:	05 90       	lpm	r0, Z+
    8704:	0d 92       	st	X+, r0
    8706:	05 90       	lpm	r0, Z+
    8708:	0d 92       	st	X+, r0
    870a:	05 90       	lpm	r0, Z+
    870c:	0d 92       	st	X+, r0
    870e:	05 90       	lpm	r0, Z+
    8710:	0d 92       	st	X+, r0
    8712:	05 90       	lpm	r0, Z+
    8714:	0d 92       	st	X+, r0
    8716:	05 90       	lpm	r0, Z+
    8718:	0d 92       	st	X+, r0
    871a:	05 90       	lpm	r0, Z+
    871c:	0d 92       	st	X+, r0
    871e:	05 90       	lpm	r0, Z+
    8720:	0d 92       	st	X+, r0
    8722:	05 90       	lpm	r0, Z+
    8724:	0d 92       	st	X+, r0
    8726:	05 90       	lpm	r0, Z+
    8728:	0d 92       	st	X+, r0
    872a:	05 90       	lpm	r0, Z+
    872c:	0d 92       	st	X+, r0
    872e:	05 90       	lpm	r0, Z+
    8730:	0d 92       	st	X+, r0
    8732:	05 90       	lpm	r0, Z+
    8734:	0d 92       	st	X+, r0
    8736:	05 90       	lpm	r0, Z+
    8738:	0d 92       	st	X+, r0
    873a:	05 90       	lpm	r0, Z+
    873c:	0d 92       	st	X+, r0


	clr r1
    873e:	11 24       	eor	r1, r1
	ret
    8740:	08 95       	ret

00008742 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    8742:	0f 93       	push	r16
	push r17
    8744:	1f 93       	push	r17
	push YL
    8746:	cf 93       	push	r28
	push YH
    8748:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    874a:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    874c:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    874e:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    8750:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    8752:	e0 0d       	add	r30, r0
	adc ZH,r1
    8754:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    8756:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    8758:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    875a:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    875c:	8e 9f       	mul	r24, r30
	movw r26,r0
    875e:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    8760:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    8762:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    8764:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    8766:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    8768:	00 24       	eor	r0, r0
	add YL,r1
    876a:	c1 0d       	add	r28, r1
	adc YH,r0		
    876c:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    876e:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    8770:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    8772:	ea 0f       	add	r30, r26
	adc ZH,r27
    8774:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    8776:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8778:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    877a:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    877c:	69 9f       	mul	r22, r25
	add XL,r0
    877e:	a0 0d       	add	r26, r0
	adc XH,r1
    8780:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    8782:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    8784:	dd 27       	eor	r29, r29

	cpi r20,0	
    8786:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    8788:	51 f4       	brne	.+20     	; 0x879e <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    878a:	a2 0f       	add	r26, r18
	adc XH,r1
    878c:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    878e:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    8790:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    8792:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    8794:	11 c0       	rjmp	.+34     	; 0x87b8 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    8796:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    8798:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    879a:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    879c:	0d c0       	rjmp	.+26     	; 0x87b8 <x_check_end>

0000879e <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    879e:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    87a0:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    87a2:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    87a4:	04 c0       	rjmp	.+8      	; 0x87ae <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    87a6:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    87a8:	e8 0f       	add	r30, r24
	adc ZH,r1	
    87aa:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    87ac:	05 c0       	rjmp	.+10     	; 0x87b8 <x_check_end>

000087ae <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    87ae:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    87b0:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    87b2:	e2 0f       	add	r30, r18
	adc ZH,r1
    87b4:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    87b6:	31 97       	sbiw	r30, 0x01	; 1

000087b8 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    87b8:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    87ba:	41 f4       	brne	.+16     	; 0x87cc <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    87bc:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    87be:	93 9f       	mul	r25, r19
	add XL,r0
    87c0:	a0 0d       	add	r26, r0
	adc XH,r1
    87c2:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    87c4:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    87c6:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    87c8:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    87ca:	0a c0       	rjmp	.+20     	; 0x87e0 <y_check_end>

000087cc <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    87cc:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    87ce:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    87d0:	63 2f       	mov	r22, r19
	dec r22
    87d2:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    87d4:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    87d6:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    87d8:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    87da:	56 9f       	mul	r21, r22
	add ZL,r0
    87dc:	e0 0d       	add	r30, r0
	adc ZH,r1	
    87de:	f1 1d       	adc	r31, r1

000087e0 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    87e0:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    87e2:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    87e4:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    87e6:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    87e8:	00 ff       	sbrs	r16, 0
	clr r23
    87ea:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    87ec:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    87ee:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    87f0:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    87f2:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    87f4:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    87f6:	59 1b       	sub	r21, r25

000087f8 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    87f8:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    87fa:	48 1b       	sub	r20, r24

000087fc <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    87fc:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    87fe:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    8800:	2c 93       	st	X, r18
	adiw XL,1
    8802:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    8804:	e6 0f       	add	r30, r22
	adc ZH,r23
    8806:	f7 1f       	adc	r31, r23
	dec r20
    8808:	4a 95       	dec	r20
	brne x_loop
    880a:	c1 f7       	brne	.-16     	; 0x87fc <x_loop>

	add ZL,YL		;src+=srcXdiff
    880c:	ec 0f       	add	r30, r28
	adc ZH,YH
    880e:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    8810:	a8 0f       	add	r26, r24
	adc XH,r1
    8812:	b1 1d       	adc	r27, r1
	dec r21
    8814:	5a 95       	dec	r21
	brne y_loop
    8816:	81 f7       	brne	.-32     	; 0x87f8 <y_loop>


	pop YH
    8818:	df 91       	pop	r29
	pop YL
    881a:	cf 91       	pop	r28
	pop r17
    881c:	1f 91       	pop	r17
	pop r16
    881e:	0f 91       	pop	r16
	ret
    8820:	08 95       	ret

00008822 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    8822:	0f 92       	push	r0
	push r1
    8824:	1f 92       	push	r1
	push ZL;2
    8826:	ef 93       	push	r30
	push ZH;2
    8828:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    882a:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    882c:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    882e:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    8832:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    8834:	f1 e0       	ldi	r31, 0x01	; 1

00008836 <latency_loop>:
latency_loop:
	cp ZL,ZH
    8836:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    8838:	00 f0       	brcs	.+0      	; 0x883a <latency_loop+0x4>
	inc ZH
    883a:	f3 95       	inc	r31
	cpi ZH,10
    883c:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    883e:	d8 f3       	brcs	.-10     	; 0x8836 <latency_loop>
	jmp .
    8840:	0c 94 22 44 	jmp	0x8844	; 0x8844 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    8844:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8848:	ea 95       	dec	r30
	sts sync_pulse,ZL
    884a:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    884e:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    8852:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    8854:	57 c0       	rjmp	.+174    	; 0x8904 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8856:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    8858:	98 f0       	brcs	.+38     	; 0x8880 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    885a:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    885c:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    8860:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8862:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    8866:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    8868:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    886a:	26 f4       	brtc	.+8      	; 0x8874 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    886c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    886e:	0e 94 08 45 	call	0x8a10	; 0x8a10 <update_sound>
	rjmp sync_end
    8872:	b6 c0       	rjmp	.+364    	; 0x89e0 <sync_end>

00008874 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    8874:	e5 e1       	ldi	r30, 0x15	; 21
    8876:	ea 95       	dec	r30
    8878:	f1 f7       	brne	.-4      	; 0x8876 <sync_pre_eq_no_sound_update+0x2>
    887a:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    887c:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    887e:	b0 c0       	rjmp	.+352    	; 0x89e0 <sync_end>

00008880 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    8880:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    8882:	38 f1       	brcs	.+78     	; 0x88d2 <sync_post_eq>

	rjmp .
    8884:	00 c0       	rjmp	.+0      	; 0x8886 <sync_eq+0x6>
	rjmp .
    8886:	00 c0       	rjmp	.+0      	; 0x8888 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8888:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    888a:	e0 fb       	bst	r30, 0
	ldi ZL,4
    888c:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    888e:	16 f4       	brtc	.+4      	; 0x8894 <sync_eq_skip>
	
	call update_sound
    8890:	0e 94 08 45 	call	0x8a10	; 0x8a10 <update_sound>

00008894 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8894:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    8896:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    889a:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    889c:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    88a0:	9f c0       	rjmp	.+318    	; 0x89e0 <sync_end>

000088a2 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    88a2:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    88a4:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    88a6:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    88a8:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    88ac:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    88ae:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    88b0:	00 f0       	brcs	.+0      	; 0x88b2 <__vector_14+0x10>

	cpi ZL,2
    88b2:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    88b4:	00 f0       	brcs	.+0      	; 0x88b6 <__vector_14+0x14>

	cpi ZL,3
    88b6:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    88b8:	00 f0       	brcs	.+0      	; 0x88ba <__vector_14+0x18>

	cpi ZL,4
    88ba:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    88bc:	00 f0       	brcs	.+0      	; 0x88be <__vector_14+0x1c>

	cpi ZL,5
    88be:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    88c0:	00 f0       	brcs	.+0      	; 0x88c2 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    88c2:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    88c4:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    88c6:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    88ca:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    88cc:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    88ce:	ef 91       	pop	r30
	reti
    88d0:	18 95       	reti

000088d2 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    88d2:	00 c0       	rjmp	.+0      	; 0x88d4 <sync_post_eq+0x2>

	bst ZL,0
    88d4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    88d6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    88d8:	26 f4       	brtc	.+8      	; 0x88e2 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    88da:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    88dc:	0e 94 08 45 	call	0x8a10	; 0x8a10 <update_sound>
	rjmp sync_pre_eq_cont
    88e0:	05 c0       	rjmp	.+10     	; 0x88ec <sync_pre_eq_cont>

000088e2 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    88e2:	e5 e1       	ldi	r30, 0x15	; 21
    88e4:	ea 95       	dec	r30
    88e6:	f1 f7       	brne	.-4      	; 0x88e4 <sync_post_eq_no_sound_update+0x2>
    88e8:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    88ea:	28 9a       	sbi	0x05, 0	; 5

000088ec <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    88ec:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    88f0:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    88f2:	09 f0       	breq	.+2      	; 0x88f6 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    88f4:	75 c0       	rjmp	.+234    	; 0x89e0 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    88f6:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    88f8:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    88fc:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    88fe:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    8902:	6e c0       	rjmp	.+220    	; 0x89e0 <sync_end>

00008904 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    8904:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8906:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    890a:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    890c:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    8910:	00 c0       	rjmp	.+0      	; 0x8912 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8912:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    8914:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8916:	00 c0       	rjmp	.+0      	; 0x8918 <sync_hsync+0x14>
	call update_sound
    8918:	0e 94 08 45 	call	0x8a10	; 0x8a10 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    891c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    891e:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8922:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    8924:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    8928:	ef 17       	cp	r30, r31
	brsh no_render
    892a:	d0 f4       	brcc	.+52     	; 0x8960 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    892c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    892e:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8932:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    8934:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    8938:	f0 19       	sub	r31, r0
	cp ZL,ZH
    893a:	ef 17       	cp	r30, r31
	brlo no_render
    893c:	88 f0       	brcs	.+34     	; 0x8960 <no_render>

	;push r1-r29
	ldi ZL,29
    893e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    8940:	ff 27       	eor	r31, r31

00008942 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    8942:	00 80       	ld	r0, Z
	push r0
    8944:	0f 92       	push	r0
	dec ZL
    8946:	ea 95       	dec	r30
	brne push_loop	
    8948:	e1 f7       	brne	.-8      	; 0x8942 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    894a:	06 e0       	ldi	r16, 0x06	; 6
    894c:	0a 95       	dec	r16
    894e:	f1 f7       	brne	.-4      	; 0x894c <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    8950:	0e 94 3d 42 	call	0x847a	; 0x847a <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8954:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    8956:	ff 27       	eor	r31, r31

00008958 <pop_loop>:
pop_loop:
	pop r0
    8958:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    895a:	01 92       	st	Z+, r0
	cpi ZL,30
    895c:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    895e:	e0 f3       	brcs	.-8      	; 0x8958 <pop_loop>

00008960 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8960:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    8964:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    8966:	09 f0       	breq	.+2      	; 0x896a <no_render+0xa>
	rjmp sync_end
    8968:	3b c0       	rjmp	.+118    	; 0x89e0 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    896a:	2f 93       	push	r18
	push r19
    896c:	3f 93       	push	r19
	push r20
    896e:	4f 93       	push	r20
	push r21
    8970:	5f 93       	push	r21
	push r22
    8972:	6f 93       	push	r22
	push r23
    8974:	7f 93       	push	r23
	push r24
    8976:	8f 93       	push	r24
	push r25
    8978:	9f 93       	push	r25
	push r26
    897a:	af 93       	push	r26
	push r27
    897c:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    897e:	78 94       	sei
	clr r1
    8980:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    8982:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    8984:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8988:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    898a:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    898e:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    8992:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    8996:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    899a:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    899e:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    89a2:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    89a6:	e1 15       	cp	r30, r1
	cpc ZH,r1
    89a8:	f1 05       	cpc	r31, r1
	breq .+2 
    89aa:	09 f0       	breq	.+2      	; 0x89ae <no_render+0x4e>
	icall
    89ac:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    89ae:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    89b2:	0e 94 a0 54 	call	0xa940	; 0xa940 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    89b6:	0e 94 02 45 	call	0x8a04	; 0x8a04 <process_music>
	clr r1
    89ba:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    89bc:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    89c0:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    89c4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    89c6:	f1 05       	cpc	r31, r1
	breq .+2 
    89c8:	09 f0       	breq	.+2      	; 0x89cc <no_render+0x6c>
	icall
    89ca:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    89cc:	bf 91       	pop	r27
	pop r26
    89ce:	af 91       	pop	r26
	pop r25
    89d0:	9f 91       	pop	r25
	pop r24
    89d2:	8f 91       	pop	r24
	pop r23
    89d4:	7f 91       	pop	r23
	pop r22
    89d6:	6f 91       	pop	r22
	pop r21
    89d8:	5f 91       	pop	r21
	pop r20
    89da:	4f 91       	pop	r20
	pop r19
    89dc:	3f 91       	pop	r19
	pop r18
    89de:	2f 91       	pop	r18

000089e0 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    89e0:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    89e2:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    89e4:	ff 91       	pop	r31
	pop ZL
    89e6:	ef 91       	pop	r30
	pop r1
    89e8:	1f 90       	pop	r1
	pop r0
    89ea:	0f 90       	pop	r0
	reti
    89ec:	18 95       	reti

000089ee <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    89ee:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    89f0:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    89f2:	00 c0       	rjmp	.+0      	; 0x89f4 <hsync_pulse+0x6>
	call update_sound
    89f4:	0e 94 08 45 	call	0x8a10	; 0x8a10 <update_sound>

	lds ZL,sync_pulse
    89f8:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    89fc:	ea 95       	dec	r30
	sts sync_pulse,ZL
    89fe:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    8a02:	08 95       	ret

00008a04 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8a04:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    8a08:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8a0a:	0e 94 92 49 	call	0x9324	; 0x9324 <ProcessMusic>
#endif

	ret
    8a0e:	08 95       	ret

00008a10 <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    8a10:	0f 93       	push	r16
	push r17
    8a12:	1f 93       	push	r17
	push r18
    8a14:	2f 93       	push	r18
	push r28
    8a16:	cf 93       	push	r28
	push r29
    8a18:	df 93       	push	r29

	mov r18,ZL
    8a1a:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    8a1c:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    8a20:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    8a24:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8a26:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    8a2a:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    8a2e:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    8a32:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8a34:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8a36:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    8a3a:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    8a3e:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    8a42:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8a44:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8a46:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    8a48:	d0 2d       	mov	r29, r0
	nop
    8a4a:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8a4c:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    8a50:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    8a54:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8a56:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    8a5a:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    8a5e:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    8a62:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8a64:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    8a66:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    8a6a:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    8a6e:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8a72:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8a74:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    8a76:	20 ff       	sbrs	r18, 0
	rjmp .
    8a78:	00 c0       	rjmp	.+0      	; 0x8a7a <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8a7a:	01 03       	mulsu	r16, r17
	clr r0
    8a7c:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8a7e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8a80:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    8a82:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8a84:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    8a88:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    8a8c:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8a8e:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    8a92:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    8a96:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    8a9a:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    8a9c:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    8a9e:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    8aa2:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    8aa6:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    8aaa:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    8aac:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8aae:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    8ab0:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    8ab2:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    8ab6:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    8aba:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    8abe:	ea 95       	dec	r30
	brpl ch4_no_shift	
    8ac0:	92 f4       	brpl	.+36     	; 0x8ae6 <ch4_no_shift>

	lds ZH,tr4_params
    8ac2:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    8ac6:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    8ac8:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    8aca:	00 2e       	mov	r0, r16
	lsr r0
    8acc:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    8ace:	00 26       	eor	r0, r16
	bst r0,0
    8ad0:	00 fa       	bst	r0, 0
	lsr r17
    8ad2:	16 95       	lsr	r17
	ror r16
    8ad4:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    8ad6:	16 f9       	bld	r17, 6
	sbrs ZH,0
    8ad8:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    8ada:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    8adc:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    8ae0:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    8ae4:	03 c0       	rjmp	.+6      	; 0x8aec <ch4_end>

00008ae6 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    8ae6:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    8ae8:	1a 95       	dec	r17
	brne .-4
    8aea:	f1 f7       	brne	.-4      	; 0x8ae8 <ch4_no_shift+0x2>

00008aec <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    8aec:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    8af0:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8af2:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8af4:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    8af6:	21 ff       	sbrs	r18, 1
	rjmp .
    8af8:	00 c0       	rjmp	.+0      	; 0x8afa <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    8afa:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    8afc:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8afe:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    8b02:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    8b04:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8b06:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    8b08:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    8b0a:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    8b0e:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    8b12:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    8b14:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    8b18:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    8b1c:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    8b20:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8b22:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    8b26:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    8b28:	f0 1f       	adc	r31, r16

	movw r16,ZL
    8b2a:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    8b2c:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    8b30:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    8b34:	00 19       	sub	r16, r0
	sbc r17,r1
    8b36:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    8b38:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    8b3c:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    8b40:	e0 15       	cp	r30, r0
	cpc ZH,r1
    8b42:	f1 05       	cpc	r31, r1
	brlo .+2
    8b44:	08 f0       	brcs	.+2      	; 0x8b48 <ch4_end+0x5c>
	movw ZL,r16
    8b46:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    8b48:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    8b4c:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    8b50:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8b52:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    8b56:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    8b58:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8b5a:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    8b5c:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8b5e:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8b60:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8b62:	d0 05       	cpc	r29, r0
	brlt .+2
    8b64:	0c f0       	brlt	.+2      	; 0x8b68 <ch4_end+0x7c>
	ldi r28,127
    8b66:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    8b68:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    8b6a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8b6c:	d0 05       	cpc	r29, r0
	brge .+2
    8b6e:	0c f4       	brge	.+2      	; 0x8b72 <ch4_end+0x86>
	ldi r28,-128
    8b70:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    8b72:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    8b74:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    8b78:	df 91       	pop	r29
	pop r28
    8b7a:	cf 91       	pop	r28
	pop r18
    8b7c:	2f 91       	pop	r18
	pop r17
    8b7e:	1f 91       	pop	r17
	pop r16
    8b80:	0f 91       	pop	r16
	
	ret
    8b82:	08 95       	ret

00008b84 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    8b84:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    8b88:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    8b8c:	08 95       	ret

00008b8e <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8b8e:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8b90:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    8b92:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8b94:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    8b96:	68 e1       	ldi	r22, 0x18	; 24

00008b98 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    8b98:	6d 93       	st	X+, r22
	sbiw r30,1
    8b9a:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    8b9c:	e9 f7       	brne	.-6      	; 0x8b98 <fill_vram_loop>

	clr r1
    8b9e:	11 24       	eor	r1, r1

	ret
    8ba0:	08 95       	ret

00008ba2 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    8ba2:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    8ba6:	45 0f       	add	r20, r21
	rjmp SetTile	
    8ba8:	00 c0       	rjmp	.+0      	; 0x8baa <SetTile>

00008baa <SetTile>:

	ret

#else

	clr r25
    8baa:	99 27       	eor	r25, r25
	clr r23	
    8bac:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    8bae:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    8bb0:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    8bb2:	08 0e       	add	r0, r24
	adc r1,r25
    8bb4:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    8bb6:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8bb8:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    8bba:	a0 0d       	add	r26, r0
	adc XH,r1
    8bbc:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    8bbe:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    8bc0:	4c 93       	st	X, r20

	clr r1
    8bc2:	11 24       	eor	r1, r1

	ret
    8bc4:	08 95       	ret

00008bc6 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    8bc6:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    8bca:	08 95       	ret

00008bcc <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8bcc:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    8bd0:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    8bd4:	08 95       	ret

00008bd6 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    8bd6:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    8bda:	81 70       	andi	r24, 0x01	; 1
	ret
    8bdc:	08 95       	ret

00008bde <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8bde:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    8be2:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    8be4:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    8be8:	08 95       	ret

00008bea <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8bea:	88 23       	and	r24, r24
	brne rj_p2
    8bec:	29 f4       	brne	.+10     	; 0x8bf8 <rj_p2>
		
	lds r24,joypad1_status_lo
    8bee:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    8bf2:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    8bf6:	08 95       	ret

00008bf8 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8bf8:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    8bfc:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    8c00:	08 95       	ret

00008c02 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    8c02:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    8c04:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8c06:	f1 f7       	brne	.-4      	; 0x8c04 <WaitUs+0x2>
	nop
    8c08:	00 00       	nop
	sbiw r24,1
    8c0a:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8c0c:	d1 f7       	brne	.-12     	; 0x8c02 <WaitUs>

	ret
    8c0e:	08 95       	ret

00008c10 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8c10:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    8c12:	fe cf       	rjmp	.-4      	; 0x8c10 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8c14:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8c16:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8c18:	60 bd       	out	0x20, r22	; 32
   cli
    8c1a:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8c1c:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8c1e:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    8c20:	78 94       	sei
   ret
    8c22:	08 95       	ret

00008c24 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8c24:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8c26:	fe cf       	rjmp	.-4      	; 0x8c24 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8c28:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8c2a:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8c2c:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8c2e:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    8c30:	80 b5       	in	r24, 0x20	; 32
   sei
    8c32:	78 94       	sei
   ret
    8c34:	08 95       	ret

00008c36 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8c36:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8c38:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8c3c:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8c40:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8c42:	80 93 81 00 	sts	0x0081, r24

		cli
    8c46:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8c48:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8c4a:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8c4e:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8c50:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    8c54:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    8c56:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8c5a:	90 93 60 00 	sts	0x0060, r25
	
		sei
    8c5e:	78 94       	sei

00008c60 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    8c60:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    8c64:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    8c66:	e0 f3       	brcs	.-8      	; 0x8c60 <wait>

		ret
    8c68:	08 95       	ret

00008c6a <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    8c6a:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    8c6e:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    8c72:	08 95       	ret

00008c74 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    8c74:	0f 93       	push	r16
		push r17
    8c76:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    8c78:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8c7a:	0f 93       	push	r16

		lds r16,sync_pulse
    8c7c:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    8c80:	03 95       	inc	r16
		sts sync_pulse,r16
    8c82:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    8c86:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8c88:	08 c0       	rjmp	.+16     	; 0x8c9a <__vector_8+0x26>
		lds r17,random_value
    8c8a:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8c8e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8c92:	10 27       	eor	r17, r16
		sts random_value,r17
    8c94:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    8c98:	07 c0       	rjmp	.+14     	; 0x8ca8 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    8c9a:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8c9e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8ca2:	10 27       	eor	r17, r16
		sts random_value+1,r17
    8ca4:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    8ca8:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8caa:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8cae:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8cb0:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    8cb2:	1f 91       	pop	r17
		pop r16
    8cb4:	0f 91       	pop	r16
		reti
    8cb6:	18 95       	reti

00008cb8 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8cb8:	98 e0       	ldi	r25, 0x08	; 8
    8cba:	88 e1       	ldi	r24, 0x18	; 24
    8cbc:	0f b6       	in	r0, 0x3f	; 63
    8cbe:	f8 94       	cli
    8cc0:	a8 95       	wdr
    8cc2:	80 93 60 00 	sts	0x0060, r24
    8cc6:	0f be       	out	0x3f, r0	; 63
    8cc8:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8ccc:	ff cf       	rjmp	.-2      	; 0x8ccc <SoftReset+0x14>

00008cce <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8cce:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8cd0:	c8 95       	lpm
    8cd2:	c8 95       	lpm
		Wait200ns();
    8cd4:	c8 95       	lpm
    8cd6:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    8cd8:	12 98       	cbi	0x02, 2	; 2
    8cda:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8cdc:	80 e0       	ldi	r24, 0x00	; 0
    8cde:	90 e0       	ldi	r25, 0x00	; 0
    8ce0:	20 e0       	ldi	r18, 0x00	; 0
    8ce2:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    8ce4:	36 95       	lsr	r19
    8ce6:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    8ce8:	96 95       	lsr	r25
    8cea:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8cec:	c8 95       	lpm
    8cee:	c8 95       	lpm
			Wait200ns();
    8cf0:	c8 95       	lpm
    8cf2:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    8cf4:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    8cf6:	00 9b       	sbis	0x00, 0	; 0
    8cf8:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8cfa:	01 9b       	sbis	0x00, 1	; 0
    8cfc:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8cfe:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8d00:	c8 95       	lpm
    8d02:	c8 95       	lpm
			Wait200ns();
    8d04:	c8 95       	lpm
    8d06:	c8 95       	lpm
    8d08:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8d0a:	61 f7       	brne	.-40     	; 0x8ce4 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8d0c:	30 93 f2 0a 	sts	0x0AF2, r19
    8d10:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    8d14:	90 93 f6 0a 	sts	0x0AF6, r25
    8d18:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8d1c:	80 91 f1 0a 	lds	r24, 0x0AF1
    8d20:	90 91 f2 0a 	lds	r25, 0x0AF2
    8d24:	0f 97       	sbiw	r24, 0x0f	; 15
    8d26:	31 f0       	breq	.+12     	; 0x8d34 <ReadButtons+0x66>
    8d28:	80 91 f5 0a 	lds	r24, 0x0AF5
    8d2c:	90 91 f6 0a 	lds	r25, 0x0AF6
    8d30:	0f 97       	sbiw	r24, 0x0f	; 15
    8d32:	11 f4       	brne	.+4      	; 0x8d38 <ReadButtons+0x6a>
		SoftReset();
    8d34:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <SoftReset>
    8d38:	08 95       	ret

00008d3a <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    8d3a:	10 92 3f 0b 	sts	0x0B3F, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8d3e:	00 99       	sbic	0x00, 0	; 0
    8d40:	03 c0       	rjmp	.+6      	; 0x8d48 <ReadControllers+0xe>
    8d42:	81 e0       	ldi	r24, 0x01	; 1
    8d44:	80 93 3f 0b 	sts	0x0B3F, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    8d48:	01 99       	sbic	0x00, 1	; 0
    8d4a:	05 c0       	rjmp	.+10     	; 0x8d56 <ReadControllers+0x1c>
    8d4c:	80 91 3f 0b 	lds	r24, 0x0B3F
    8d50:	82 60       	ori	r24, 0x02	; 2
    8d52:	80 93 3f 0b 	sts	0x0B3F, r24
			
	//read the standard buttons
	ReadButtons();
    8d56:	0c 94 67 46 	jmp	0x8cce	; 0x8cce <ReadButtons>

00008d5a <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8d5a:	cf 93       	push	r28
    8d5c:	df 93       	push	r29
    8d5e:	c0 e0       	ldi	r28, 0x00	; 0
    8d60:	d0 e0       	ldi	r29, 0x00	; 0
    8d62:	fe 01       	movw	r30, r28
    8d64:	e2 56       	subi	r30, 0x62	; 98
    8d66:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    8d68:	64 91       	lpm	r22, Z
    8d6a:	ce 01       	movw	r24, r28
    8d6c:	0e 94 08 46 	call	0x8c10	; 0x8c10 <WriteEeprom>
    8d70:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    8d72:	c0 32       	cpi	r28, 0x20	; 32
    8d74:	d1 05       	cpc	r29, r1
    8d76:	a9 f7       	brne	.-22     	; 0x8d62 <FormatEeprom+0x8>
    8d78:	c0 e2       	ldi	r28, 0x20	; 32
    8d7a:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8d7c:	6f ef       	ldi	r22, 0xFF	; 255
    8d7e:	ce 01       	movw	r24, r28
    8d80:	0e 94 08 46 	call	0x8c10	; 0x8c10 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    8d84:	6f ef       	ldi	r22, 0xFF	; 255
    8d86:	ce 01       	movw	r24, r28
    8d88:	01 96       	adiw	r24, 0x01	; 1
    8d8a:	0e 94 08 46 	call	0x8c10	; 0x8c10 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    8d8e:	a0 96       	adiw	r28, 0x20	; 32
    8d90:	c1 15       	cp	r28, r1
    8d92:	88 e0       	ldi	r24, 0x08	; 8
    8d94:	d8 07       	cpc	r29, r24
    8d96:	91 f7       	brne	.-28     	; 0x8d7c <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    8d98:	df 91       	pop	r29
    8d9a:	cf 91       	pop	r28
    8d9c:	08 95       	ret

00008d9e <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    8d9e:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    8da0:	80 e0       	ldi	r24, 0x00	; 0
    8da2:	90 e0       	ldi	r25, 0x00	; 0
    8da4:	0e 94 12 46 	call	0x8c24	; 0x8c24 <ReadEeprom>
    8da8:	c8 2f       	mov	r28, r24
    8daa:	81 e0       	ldi	r24, 0x01	; 1
    8dac:	90 e0       	ldi	r25, 0x00	; 0
    8dae:	0e 94 12 46 	call	0x8c24	; 0x8c24 <ReadEeprom>
    8db2:	28 2f       	mov	r18, r24
    8db4:	30 e0       	ldi	r19, 0x00	; 0
    8db6:	32 2f       	mov	r19, r18
    8db8:	22 27       	eor	r18, r18
    8dba:	2c 0f       	add	r18, r28
    8dbc:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8dbe:	81 e0       	ldi	r24, 0x01	; 1
    8dc0:	2a 35       	cpi	r18, 0x5A	; 90
    8dc2:	35 45       	sbci	r19, 0x55	; 85
    8dc4:	09 f0       	breq	.+2      	; 0x8dc8 <isEepromFormatted+0x2a>
    8dc6:	80 e0       	ldi	r24, 0x00	; 0
}
    8dc8:	cf 91       	pop	r28
    8dca:	08 95       	ret

00008dcc <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8dcc:	cf 92       	push	r12
    8dce:	df 92       	push	r13
    8dd0:	ef 92       	push	r14
    8dd2:	ff 92       	push	r15
    8dd4:	0f 93       	push	r16
    8dd6:	1f 93       	push	r17
    8dd8:	cf 93       	push	r28
    8dda:	df 93       	push	r29
    8ddc:	1f 92       	push	r1
    8dde:	cd b7       	in	r28, 0x3d	; 61
    8de0:	de b7       	in	r29, 0x3e	; 62
    8de2:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8de4:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <isEepromFormatted>
    8de8:	88 23       	and	r24, r24
    8dea:	09 f4       	brne	.+2      	; 0x8dee <EepromWriteBlock+0x22>
    8dec:	4d c0       	rjmp	.+154    	; 0x8e88 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    8dee:	f6 01       	movw	r30, r12
    8df0:	80 81       	ld	r24, Z
    8df2:	91 81       	ldd	r25, Z+1	; 0x01
    8df4:	8f 3f       	cpi	r24, 0xFF	; 255
    8df6:	ff ef       	ldi	r31, 0xFF	; 255
    8df8:	9f 07       	cpc	r25, r31
    8dfa:	09 f4       	brne	.+2      	; 0x8dfe <EepromWriteBlock+0x32>
    8dfc:	47 c0       	rjmp	.+142    	; 0x8e8c <EepromWriteBlock+0xc0>
    8dfe:	8a 35       	cpi	r24, 0x5A	; 90
    8e00:	95 45       	sbci	r25, 0x55	; 85
    8e02:	09 f4       	brne	.+2      	; 0x8e06 <EepromWriteBlock+0x3a>
    8e04:	43 c0       	rjmp	.+134    	; 0x8e8c <EepromWriteBlock+0xc0>
    8e06:	00 e2       	ldi	r16, 0x20	; 32
    8e08:	10 e0       	ldi	r17, 0x00	; 0
    8e0a:	f1 2c       	mov	r15, r1
    8e0c:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8e0e:	c8 01       	movw	r24, r16
    8e10:	49 83       	std	Y+1, r20	; 0x01
    8e12:	0e 94 12 46 	call	0x8c24	; 0x8c24 <ReadEeprom>
    8e16:	e8 2e       	mov	r14, r24
    8e18:	c8 01       	movw	r24, r16
    8e1a:	01 96       	adiw	r24, 0x01	; 1
    8e1c:	0e 94 12 46 	call	0x8c24	; 0x8c24 <ReadEeprom>
    8e20:	28 2f       	mov	r18, r24
    8e22:	30 e0       	ldi	r19, 0x00	; 0
    8e24:	32 2f       	mov	r19, r18
    8e26:	22 27       	eor	r18, r18
    8e28:	c9 01       	movw	r24, r18
    8e2a:	8e 0d       	add	r24, r14
    8e2c:	91 1d       	adc	r25, r1
		if(id==block->id){
    8e2e:	f6 01       	movw	r30, r12
    8e30:	20 81       	ld	r18, Z
    8e32:	31 81       	ldd	r19, Z+1	; 0x01
    8e34:	49 81       	ldd	r20, Y+1	; 0x01
    8e36:	82 17       	cp	r24, r18
    8e38:	93 07       	cpc	r25, r19
    8e3a:	19 f4       	brne	.+6      	; 0x8e42 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8e3c:	ff 20       	and	r15, r15
    8e3e:	89 f0       	breq	.+34     	; 0x8e62 <EepromWriteBlock+0x96>
    8e40:	0c c0       	rjmp	.+24     	; 0x8e5a <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    8e42:	01 96       	adiw	r24, 0x01	; 1
    8e44:	19 f4       	brne	.+6      	; 0x8e4c <EepromWriteBlock+0x80>
    8e46:	f1 10       	cpse	r15, r1
    8e48:	01 c0       	rjmp	.+2      	; 0x8e4c <EepromWriteBlock+0x80>
    8e4a:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    8e4c:	4f 5f       	subi	r20, 0xFF	; 255
    8e4e:	00 5e       	subi	r16, 0xE0	; 224
    8e50:	1f 4f       	sbci	r17, 0xFF	; 255
    8e52:	40 34       	cpi	r20, 0x40	; 64
    8e54:	e1 f6       	brne	.-72     	; 0x8e0e <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8e56:	ff 20       	and	r15, r15
    8e58:	d9 f0       	breq	.+54     	; 0x8e90 <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8e5a:	20 e2       	ldi	r18, 0x20	; 32
    8e5c:	f2 9e       	mul	r15, r18
    8e5e:	80 01       	movw	r16, r0
    8e60:	11 24       	eor	r1, r1
    8e62:	76 01       	movw	r14, r12
    8e64:	80 e2       	ldi	r24, 0x20	; 32
    8e66:	e8 0e       	add	r14, r24
    8e68:	f1 1c       	adc	r15, r1
    8e6a:	0c 19       	sub	r16, r12
    8e6c:	1d 09       	sbc	r17, r13
    8e6e:	c6 01       	movw	r24, r12
    8e70:	80 0f       	add	r24, r16
    8e72:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    8e74:	f6 01       	movw	r30, r12
    8e76:	61 91       	ld	r22, Z+
    8e78:	6f 01       	movw	r12, r30
    8e7a:	0e 94 08 46 	call	0x8c10	; 0x8c10 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    8e7e:	ce 14       	cp	r12, r14
    8e80:	df 04       	cpc	r13, r15
    8e82:	a9 f7       	brne	.-22     	; 0x8e6e <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    8e84:	80 e0       	ldi	r24, 0x00	; 0
    8e86:	05 c0       	rjmp	.+10     	; 0x8e92 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8e88:	84 e0       	ldi	r24, 0x04	; 4
    8e8a:	03 c0       	rjmp	.+6      	; 0x8e92 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    8e8c:	81 e0       	ldi	r24, 0x01	; 1
    8e8e:	01 c0       	rjmp	.+2      	; 0x8e92 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8e90:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    8e92:	0f 90       	pop	r0
    8e94:	df 91       	pop	r29
    8e96:	cf 91       	pop	r28
    8e98:	1f 91       	pop	r17
    8e9a:	0f 91       	pop	r16
    8e9c:	ff 90       	pop	r15
    8e9e:	ef 90       	pop	r14
    8ea0:	df 90       	pop	r13
    8ea2:	cf 90       	pop	r12
    8ea4:	08 95       	ret

00008ea6 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    8ea6:	df 92       	push	r13
    8ea8:	ef 92       	push	r14
    8eaa:	ff 92       	push	r15
    8eac:	0f 93       	push	r16
    8eae:	1f 93       	push	r17
    8eb0:	cf 93       	push	r28
    8eb2:	df 93       	push	r29
    8eb4:	7c 01       	movw	r14, r24
    8eb6:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8eb8:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <isEepromFormatted>
    8ebc:	88 23       	and	r24, r24
    8ebe:	89 f1       	breq	.+98     	; 0x8f22 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8ec0:	8f ef       	ldi	r24, 0xFF	; 255
    8ec2:	e8 16       	cp	r14, r24
    8ec4:	f8 06       	cpc	r15, r24
    8ec6:	79 f1       	breq	.+94     	; 0x8f26 <EepromReadBlock+0x80>
    8ec8:	00 e0       	ldi	r16, 0x00	; 0
    8eca:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8ecc:	c8 01       	movw	r24, r16
    8ece:	0e 94 12 46 	call	0x8c24	; 0x8c24 <ReadEeprom>
    8ed2:	d8 2e       	mov	r13, r24
    8ed4:	c8 01       	movw	r24, r16
    8ed6:	01 96       	adiw	r24, 0x01	; 1
    8ed8:	0e 94 12 46 	call	0x8c24	; 0x8c24 <ReadEeprom>
    8edc:	28 2f       	mov	r18, r24
    8ede:	30 e0       	ldi	r19, 0x00	; 0
    8ee0:	32 2f       	mov	r19, r18
    8ee2:	22 27       	eor	r18, r18
    8ee4:	2d 0d       	add	r18, r13
    8ee6:	31 1d       	adc	r19, r1
		if(id==blockId){
    8ee8:	2e 15       	cp	r18, r14
    8eea:	3f 05       	cpc	r19, r15
    8eec:	39 f4       	brne	.+14     	; 0x8efc <EepromReadBlock+0x56>
    8eee:	7e 01       	movw	r14, r28
    8ef0:	80 e2       	ldi	r24, 0x20	; 32
    8ef2:	e8 0e       	add	r14, r24
    8ef4:	f1 1c       	adc	r15, r1
    8ef6:	0c 1b       	sub	r16, r28
    8ef8:	1d 0b       	sbc	r17, r29
    8efa:	08 c0       	rjmp	.+16     	; 0x8f0c <EepromReadBlock+0x66>
    8efc:	00 5e       	subi	r16, 0xE0	; 224
    8efe:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    8f00:	01 15       	cp	r16, r1
    8f02:	84 e0       	ldi	r24, 0x04	; 4
    8f04:	18 07       	cpc	r17, r24
    8f06:	11 f7       	brne	.-60     	; 0x8ecc <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    8f08:	83 e0       	ldi	r24, 0x03	; 3
    8f0a:	0e c0       	rjmp	.+28     	; 0x8f28 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    8f0c:	ce 01       	movw	r24, r28
    8f0e:	80 0f       	add	r24, r16
    8f10:	91 1f       	adc	r25, r17
    8f12:	0e 94 12 46 	call	0x8c24	; 0x8c24 <ReadEeprom>
    8f16:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    8f18:	ce 15       	cp	r28, r14
    8f1a:	df 05       	cpc	r29, r15
    8f1c:	b9 f7       	brne	.-18     	; 0x8f0c <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    8f1e:	80 e0       	ldi	r24, 0x00	; 0
    8f20:	03 c0       	rjmp	.+6      	; 0x8f28 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8f22:	84 e0       	ldi	r24, 0x04	; 4
    8f24:	01 c0       	rjmp	.+2      	; 0x8f28 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8f26:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    8f28:	df 91       	pop	r29
    8f2a:	cf 91       	pop	r28
    8f2c:	1f 91       	pop	r17
    8f2e:	0f 91       	pop	r16
    8f30:	ff 90       	pop	r15
    8f32:	ef 90       	pop	r14
    8f34:	df 90       	pop	r13
    8f36:	08 95       	ret

00008f38 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    8f38:	fc 01       	movw	r30, r24
    8f3a:	45 87       	std	Z+13, r20	; 0x0d
    8f3c:	08 95       	ret

00008f3e <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8f3e:	e2 e0       	ldi	r30, 0x02	; 2
    8f40:	fb e0       	ldi	r31, 0x0B	; 11
    8f42:	81 e0       	ldi	r24, 0x01	; 1
    8f44:	91 e0       	ldi	r25, 0x01	; 1
    8f46:	95 8b       	std	Z+21, r25	; 0x15
    8f48:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8f4a:	43 8b       	std	Z+19, r20	; 0x13
    8f4c:	08 95       	ret

00008f4e <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    8f4e:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8f50:	90 81       	ld	r25, Z
    8f52:	9f 75       	andi	r25, 0x5F	; 95
    8f54:	90 83       	st	Z, r25
    8f56:	08 95       	ret

00008f58 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    8f58:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8f5a:	90 81       	ld	r25, Z
    8f5c:	90 64       	ori	r25, 0x40	; 64
    8f5e:	90 83       	st	Z, r25
    8f60:	08 95       	ret

00008f62 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    8f62:	fc 01       	movw	r30, r24
    8f64:	44 87       	std	Z+12, r20	; 0x0c
    8f66:	08 95       	ret

00008f68 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    8f68:	fc 01       	movw	r30, r24
    8f6a:	47 83       	std	Z+7, r20	; 0x07
    8f6c:	08 95       	ret

00008f6e <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    8f6e:	fc 01       	movw	r30, r24
    8f70:	40 87       	std	Z+8, r20	; 0x08
    8f72:	08 95       	ret

00008f74 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    8f74:	1f 93       	push	r17
    8f76:	cf 93       	push	r28
    8f78:	df 93       	push	r29
    8f7a:	ec 01       	movw	r28, r24
    8f7c:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8f7e:	29 81       	ldd	r18, Y+1	; 0x01
    8f80:	30 e0       	ldi	r19, 0x00	; 0
    8f82:	f9 01       	movw	r30, r18
    8f84:	ee 0f       	add	r30, r30
    8f86:	ff 1f       	adc	r31, r31
    8f88:	e8 5f       	subi	r30, 0xF8	; 248
    8f8a:	f7 46       	sbci	r31, 0x67	; 103
    8f8c:	65 91       	lpm	r22, Z+
    8f8e:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8f90:	f9 01       	movw	r30, r18
    8f92:	e4 0f       	add	r30, r20
    8f94:	f1 1d       	adc	r31, r1
    8f96:	47 fd       	sbrc	r20, 7
    8f98:	fa 95       	dec	r31
    8f9a:	ee 0f       	add	r30, r30
    8f9c:	ff 1f       	adc	r31, r31
    8f9e:	e8 5f       	subi	r30, 0xF8	; 248
    8fa0:	f7 46       	sbci	r31, 0x67	; 103
    8fa2:	85 91       	lpm	r24, Z+
    8fa4:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    8fa6:	86 1b       	sub	r24, r22
    8fa8:	97 0b       	sbc	r25, r23
    8faa:	60 91 47 0b 	lds	r22, 0x0B47
    8fae:	70 e0       	ldi	r23, 0x00	; 0
    8fb0:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
	if(delta==0)delta++;
    8fb4:	61 15       	cp	r22, r1
    8fb6:	71 05       	cpc	r23, r1
    8fb8:	11 f4       	brne	.+4      	; 0x8fbe <PatchCommand11+0x4a>
    8fba:	61 e0       	ldi	r22, 0x01	; 1
    8fbc:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    8fbe:	86 e0       	ldi	r24, 0x06	; 6
    8fc0:	18 9f       	mul	r17, r24
    8fc2:	f0 01       	movw	r30, r0
    8fc4:	11 24       	eor	r1, r1
    8fc6:	ee 5f       	subi	r30, 0xFE	; 254
    8fc8:	f4 4f       	sbci	r31, 0xF4	; 244
    8fca:	81 81       	ldd	r24, Z+1	; 0x01
    8fcc:	92 81       	ldd	r25, Z+2	; 0x02
    8fce:	86 0f       	add	r24, r22
    8fd0:	97 1f       	adc	r25, r23
    8fd2:	92 83       	std	Z+2, r25	; 0x02
    8fd4:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    8fd6:	7b 83       	std	Y+3, r23	; 0x03
    8fd8:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    8fda:	88 81       	ld	r24, Y
    8fdc:	88 60       	ori	r24, 0x08	; 8
    8fde:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8fe0:	89 81       	ldd	r24, Y+1	; 0x01
    8fe2:	48 0f       	add	r20, r24
    8fe4:	4c 83       	std	Y+4, r20	; 0x04
}
    8fe6:	df 91       	pop	r29
    8fe8:	cf 91       	pop	r28
    8fea:	1f 91       	pop	r17
    8fec:	08 95       	ret

00008fee <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    8fee:	40 93 47 0b 	sts	0x0B47, r20
    8ff2:	08 95       	ret

00008ff4 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    8ff4:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    8ff6:	64 2f       	mov	r22, r20
    8ff8:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <SetMixerWave>

00008ffc <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    8ffc:	fc 01       	movw	r30, r24
    8ffe:	86 2f       	mov	r24, r22
	track->note+=param;
    9000:	91 81       	ldd	r25, Z+1	; 0x01
    9002:	64 2f       	mov	r22, r20
    9004:	69 0f       	add	r22, r25
    9006:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    9008:	0c 94 bc 4b 	jmp	0x9778	; 0x9778 <SetMixerNote>

0000900c <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    900c:	fc 01       	movw	r30, r24
    900e:	86 2f       	mov	r24, r22
	track->note-=param;
    9010:	91 81       	ldd	r25, Z+1	; 0x01
    9012:	69 2f       	mov	r22, r25
    9014:	64 1b       	sub	r22, r20
    9016:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    9018:	0c 94 bc 4b 	jmp	0x9778	; 0x9778 <SetMixerNote>

0000901c <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    901c:	0f 93       	push	r16
    901e:	1f 93       	push	r17
    9020:	cf 93       	push	r28
    9022:	df 93       	push	r29
    9024:	1f 92       	push	r1
    9026:	cd b7       	in	r28, 0x3d	; 61
    9028:	de b7       	in	r29, 0x3e	; 62
    902a:	8c 01       	movw	r16, r24
    902c:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    902e:	64 2f       	mov	r22, r20
    9030:	49 83       	std	Y+1, r20	; 0x01
    9032:	0e 94 bc 4b 	call	0x9778	; 0x9778 <SetMixerNote>
	track->note=param;
    9036:	49 81       	ldd	r20, Y+1	; 0x01
    9038:	f8 01       	movw	r30, r16
    903a:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    903c:	80 81       	ld	r24, Z
    903e:	87 7f       	andi	r24, 0xF7	; 247
    9040:	80 83       	st	Z, r24
}
    9042:	0f 90       	pop	r0
    9044:	df 91       	pop	r29
    9046:	cf 91       	pop	r28
    9048:	1f 91       	pop	r17
    904a:	0f 91       	pop	r16
    904c:	08 95       	ret

0000904e <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    904e:	90 93 b3 0b 	sts	0x0BB3, r25
    9052:	80 93 b2 0b 	sts	0x0BB2, r24

	masterVolume=DEFAULT_MASTER_VOL;
    9056:	8f e6       	ldi	r24, 0x6F	; 111
    9058:	80 93 b5 0b 	sts	0x0BB5, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    905c:	10 92 00 0b 	sts	0x0B00, r1
    9060:	e0 e5       	ldi	r30, 0x50	; 80
    9062:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    9064:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    9066:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    9068:	28 e1       	ldi	r18, 0x18	; 24
    906a:	df 01       	movw	r26, r30
    906c:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    906e:	8c 93       	st	X, r24
    9070:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    9072:	1c 92       	st	X, r1
    9074:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    9076:	9c 93       	st	X, r25
    9078:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    907a:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    907c:	10 82       	st	Z, r1
    907e:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    9080:	2c 93       	st	X, r18
    9082:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    9084:	8c 93       	st	X, r24
    9086:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    9088:	3b e0       	ldi	r19, 0x0B	; 11
    908a:	ee 3b       	cpi	r30, 0xBE	; 190
    908c:	f3 07       	cpc	r31, r19
    908e:	69 f7       	brne	.-38     	; 0x906a <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    9090:	08 95       	ret

00009092 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    9092:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    9094:	ed 91       	ld	r30, X+
    9096:	fc 91       	ld	r31, X
    9098:	11 97       	sbiw	r26, 0x01	; 1
    909a:	9f 01       	movw	r18, r30
    909c:	2f 5f       	subi	r18, 0xFF	; 255
    909e:	3f 4f       	sbci	r19, 0xFF	; 255
    90a0:	11 96       	adiw	r26, 0x01	; 1
    90a2:	3c 93       	st	X, r19
    90a4:	2e 93       	st	-X, r18
    90a6:	e4 91       	lpm	r30, Z
    90a8:	e7 fd       	sbrc	r30, 7
    90aa:	03 c0       	rjmp	.+6      	; 0x90b2 <ReadVarLen+0x20>
    90ac:	8e 2f       	mov	r24, r30
    90ae:	90 e0       	ldi	r25, 0x00	; 0
    90b0:	08 95       	ret
    {
       value &= 0x7F;
    90b2:	ef 77       	andi	r30, 0x7F	; 127
    90b4:	8e 2f       	mov	r24, r30
    90b6:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    90b8:	96 95       	lsr	r25
    90ba:	98 2f       	mov	r25, r24
    90bc:	88 27       	eor	r24, r24
    90be:	97 95       	ror	r25
    90c0:	87 95       	ror	r24
    90c2:	2f 5f       	subi	r18, 0xFF	; 255
    90c4:	3f 4f       	sbci	r19, 0xFF	; 255
    90c6:	f9 01       	movw	r30, r18
    90c8:	31 97       	sbiw	r30, 0x01	; 1
    90ca:	e4 91       	lpm	r30, Z
    90cc:	4e 2f       	mov	r20, r30
    90ce:	4f 77       	andi	r20, 0x7F	; 127
    90d0:	84 0f       	add	r24, r20
    90d2:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    90d4:	e7 fd       	sbrc	r30, 7
    90d6:	f0 cf       	rjmp	.-32     	; 0x90b8 <ReadVarLen+0x26>
    90d8:	2d 93       	st	X+, r18
    90da:	3c 93       	st	X, r19
    }


    return value;
}
    90dc:	08 95       	ret

000090de <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    90de:	cf 92       	push	r12
    90e0:	df 92       	push	r13
    90e2:	ff 92       	push	r15
    90e4:	0f 93       	push	r16
    90e6:	1f 93       	push	r17
    90e8:	cf 93       	push	r28
    90ea:	df 93       	push	r29
    90ec:	1f 92       	push	r1
    90ee:	cd b7       	in	r28, 0x3d	; 61
    90f0:	de b7       	in	r29, 0x3e	; 62
    90f2:	18 2f       	mov	r17, r24
    90f4:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    90f6:	c8 2e       	mov	r12, r24
    90f8:	d1 2c       	mov	r13, r1
    90fa:	36 e1       	ldi	r19, 0x16	; 22
    90fc:	83 9f       	mul	r24, r19
    90fe:	f0 01       	movw	r30, r0
    9100:	11 24       	eor	r1, r1
    9102:	ee 5b       	subi	r30, 0xBE	; 190
    9104:	f4 4f       	sbci	r31, 0xF4	; 244
    9106:	80 81       	ld	r24, Z
    9108:	f8 2e       	mov	r15, r24
    910a:	ff 1c       	adc	r15, r15
    910c:	ff 24       	eor	r15, r15
    910e:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    9110:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    9112:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    9114:	9f ef       	ldi	r25, 0xFF	; 255
    9116:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    9118:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    911a:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    911c:	87 7b       	andi	r24, 0xB7	; 183
    911e:	80 62       	ori	r24, 0x20	; 32
    9120:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    9122:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    9124:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    9126:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    9128:	13 30       	cpi	r17, 0x03	; 3
    912a:	69 f4       	brne	.+26     	; 0x9146 <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    912c:	f1 10       	cpse	r15, r1
    912e:	01 c0       	rjmp	.+2      	; 0x9132 <TriggerCommon+0x54>
    9130:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    9132:	81 e0       	ldi	r24, 0x01	; 1
    9134:	91 e0       	ldi	r25, 0x01	; 1
    9136:	90 93 17 0b 	sts	0x0B17, r25
    913a:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    913e:	81 e0       	ldi	r24, 0x01	; 1
    9140:	80 93 15 0b 	sts	0x0B15, r24
    9144:	3c c0       	rjmp	.+120    	; 0x91be <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    9146:	14 30       	cpi	r17, 0x04	; 4
    9148:	09 f0       	breq	.+2      	; 0x914c <TriggerCommon+0x6e>
    914a:	2f c0       	rjmp	.+94     	; 0x91aa <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    914c:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    9150:	80 91 b2 0b 	lds	r24, 0x0BB2
    9154:	90 91 b3 0b 	lds	r25, 0x0BB3
    9158:	e9 e0       	ldi	r30, 0x09	; 9
    915a:	6e 9f       	mul	r22, r30
    915c:	80 0d       	add	r24, r0
    915e:	91 1d       	adc	r25, r1
    9160:	11 24       	eor	r1, r1
    9162:	fc 01       	movw	r30, r24
    9164:	31 96       	adiw	r30, 0x01	; 1
    9166:	65 91       	lpm	r22, Z+
    9168:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    916a:	70 93 1f 0b 	sts	0x0B1F, r23
    916e:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    9172:	ac 01       	movw	r20, r24
    9174:	49 5f       	subi	r20, 0xF9	; 249
    9176:	5f 4f       	sbci	r21, 0xFF	; 255
    9178:	fa 01       	movw	r30, r20
    917a:	a5 91       	lpm	r26, Z+
    917c:	b4 91       	lpm	r27, Z
    917e:	05 96       	adiw	r24, 0x05	; 5
    9180:	fc 01       	movw	r30, r24
    9182:	85 91       	lpm	r24, Z+
    9184:	94 91       	lpm	r25, Z
    9186:	a8 1b       	sub	r26, r24
    9188:	b9 0b       	sbc	r27, r25
    918a:	b0 93 21 0b 	sts	0x0B21, r27
    918e:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    9192:	fa 01       	movw	r30, r20
    9194:	85 91       	lpm	r24, Z+
    9196:	94 91       	lpm	r25, Z
    9198:	68 0f       	add	r22, r24
    919a:	79 1f       	adc	r23, r25
    919c:	70 93 23 0b 	sts	0x0B23, r23
    91a0:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    91a4:	62 2f       	mov	r22, r18
    91a6:	84 e0       	ldi	r24, 0x04	; 4
    91a8:	08 c0       	rjmp	.+16     	; 0x91ba <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    91aa:	60 e0       	ldi	r22, 0x00	; 0
    91ac:	81 2f       	mov	r24, r17
    91ae:	29 83       	std	Y+1, r18	; 0x01
    91b0:	0e 94 d3 4b 	call	0x97a6	; 0x97a6 <SetMixerWave>
			SetMixerNote(channel,note);
    91b4:	29 81       	ldd	r18, Y+1	; 0x01
    91b6:	62 2f       	mov	r22, r18
    91b8:	81 2f       	mov	r24, r17
    91ba:	0e 94 bc 4b 	call	0x9778	; 0x9778 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    91be:	86 e1       	ldi	r24, 0x16	; 22
    91c0:	8c 9d       	mul	r24, r12
    91c2:	f0 01       	movw	r30, r0
    91c4:	8d 9d       	mul	r24, r13
    91c6:	f0 0d       	add	r31, r0
    91c8:	11 24       	eor	r1, r1
    91ca:	ee 5b       	subi	r30, 0xBE	; 190
    91cc:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    91ce:	ff 20       	and	r15, r15
    91d0:	11 f0       	breq	.+4      	; 0x91d6 <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    91d2:	07 87       	std	Z+15, r16	; 0x0f
    91d4:	01 c0       	rjmp	.+2      	; 0x91d8 <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    91d6:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    91d8:	e0 91 b2 0b 	lds	r30, 0x0BB2
    91dc:	f0 91 b3 0b 	lds	r31, 0x0BB3
    91e0:	39 e0       	ldi	r19, 0x09	; 9
    91e2:	03 9f       	mul	r16, r19
    91e4:	e0 0d       	add	r30, r0
    91e6:	f1 1d       	adc	r31, r1
    91e8:	11 24       	eor	r1, r1
    91ea:	33 96       	adiw	r30, 0x03	; 3
    91ec:	85 91       	lpm	r24, Z+
    91ee:	94 91       	lpm	r25, Z
	if(pos==NULL){
    91f0:	00 97       	sbiw	r24, 0x00	; 0
    91f2:	59 f4       	brne	.+22     	; 0x920a <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    91f4:	86 e1       	ldi	r24, 0x16	; 22
    91f6:	8c 9d       	mul	r24, r12
    91f8:	f0 01       	movw	r30, r0
    91fa:	8d 9d       	mul	r24, r13
    91fc:	f0 0d       	add	r31, r0
    91fe:	11 24       	eor	r1, r1
    9200:	ee 5b       	subi	r30, 0xBE	; 190
    9202:	f4 4f       	sbci	r31, 0xF4	; 244
    9204:	15 8a       	std	Z+21, r1	; 0x15
    9206:	14 8a       	std	Z+20, r1	; 0x14
    9208:	0e c0       	rjmp	.+28     	; 0x9226 <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    920a:	fc 01       	movw	r30, r24
    920c:	24 91       	lpm	r18, Z
    920e:	36 e1       	ldi	r19, 0x16	; 22
    9210:	3c 9d       	mul	r19, r12
    9212:	f0 01       	movw	r30, r0
    9214:	3d 9d       	mul	r19, r13
    9216:	f0 0d       	add	r31, r0
    9218:	11 24       	eor	r1, r1
    921a:	ee 5b       	subi	r30, 0xBE	; 190
    921c:	f4 4f       	sbci	r31, 0xF4	; 244
    921e:	21 8b       	std	Z+17, r18	; 0x11
    9220:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    9222:	95 8b       	std	Z+21, r25	; 0x15
    9224:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    9226:	0f 90       	pop	r0
    9228:	df 91       	pop	r29
    922a:	cf 91       	pop	r28
    922c:	1f 91       	pop	r17
    922e:	0f 91       	pop	r16
    9230:	ff 90       	pop	r15
    9232:	df 90       	pop	r13
    9234:	cf 90       	pop	r12
    9236:	08 95       	ret

00009238 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    9238:	98 2f       	mov	r25, r24
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    923a:	e0 91 b2 0b 	lds	r30, 0x0BB2
    923e:	f0 91 b3 0b 	lds	r31, 0x0BB3
    9242:	29 e0       	ldi	r18, 0x09	; 9
    9244:	82 9f       	mul	r24, r18
    9246:	e0 0d       	add	r30, r0
    9248:	f1 1d       	adc	r31, r1
    924a:	11 24       	eor	r1, r1
    924c:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    924e:	e1 30       	cpi	r30, 0x01	; 1
    9250:	e9 f0       	breq	.+58     	; 0x928c <TriggerFx+0x54>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    9252:	e2 30       	cpi	r30, 0x02	; 2
    9254:	e9 f0       	breq	.+58     	; 0x9290 <TriggerFx+0x58>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    9256:	20 91 58 0b 	lds	r18, 0x0B58
    925a:	27 ff       	sbrs	r18, 7
    925c:	1d c0       	rjmp	.+58     	; 0x9298 <TriggerFx+0x60>
    925e:	20 91 67 0b 	lds	r18, 0x0B67
    9262:	28 13       	cpse	r18, r24
    9264:	02 c0       	rjmp	.+4      	; 0x926a <TriggerFx+0x32>
    9266:	41 11       	cpse	r20, r1
    9268:	17 c0       	rjmp	.+46     	; 0x9298 <TriggerFx+0x60>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    926a:	20 91 6e 0b 	lds	r18, 0x0B6E
    926e:	27 ff       	sbrs	r18, 7
    9270:	11 c0       	rjmp	.+34     	; 0x9294 <TriggerFx+0x5c>
    9272:	20 91 7d 0b 	lds	r18, 0x0B7D
    9276:	29 13       	cpse	r18, r25
    9278:	02 c0       	rjmp	.+4      	; 0x927e <TriggerFx+0x46>
    927a:	41 11       	cpse	r20, r1
    927c:	0b c0       	rjmp	.+22     	; 0x9294 <TriggerFx+0x5c>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    927e:	20 91 6b 0b 	lds	r18, 0x0B6B
    9282:	80 91 81 0b 	lds	r24, 0x0B81
    9286:	82 17       	cp	r24, r18
    9288:	28 f4       	brcc	.+10     	; 0x9294 <TriggerFx+0x5c>
    928a:	06 c0       	rjmp	.+12     	; 0x9298 <TriggerFx+0x60>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    928c:	83 e0       	ldi	r24, 0x03	; 3
    928e:	05 c0       	rjmp	.+10     	; 0x929a <TriggerFx+0x62>
	}else if(type==2){
		channel=4;
    9290:	84 e0       	ldi	r24, 0x04	; 4
    9292:	03 c0       	rjmp	.+6      	; 0x929a <TriggerFx+0x62>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    9294:	82 e0       	ldi	r24, 0x02	; 2
    9296:	01 c0       	rjmp	.+2      	; 0x929a <TriggerFx+0x62>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    9298:	81 e0       	ldi	r24, 0x01	; 1
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    929a:	26 e1       	ldi	r18, 0x16	; 22
    929c:	82 9f       	mul	r24, r18
    929e:	f0 01       	movw	r30, r0
    92a0:	11 24       	eor	r1, r1
    92a2:	ee 5b       	subi	r30, 0xBE	; 190
    92a4:	f4 4f       	sbci	r31, 0xF4	; 244
    92a6:	20 81       	ld	r18, Z
    92a8:	20 68       	ori	r18, 0x80	; 128
    92aa:	20 83       	st	Z, r18
	TriggerCommon(channel,patch,volume,80);
    92ac:	20 e5       	ldi	r18, 0x50	; 80
    92ae:	46 2f       	mov	r20, r22
    92b0:	69 2f       	mov	r22, r25
    92b2:	0c 94 6f 48 	jmp	0x90de	; 0x90de <TriggerCommon>

000092b6 <TriggerNote>:
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    92b6:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    92b8:	a8 2f       	mov	r26, r24
    92ba:	b0 e0       	ldi	r27, 0x00	; 0
    92bc:	96 e1       	ldi	r25, 0x16	; 22
    92be:	89 9f       	mul	r24, r25
    92c0:	f0 01       	movw	r30, r0
    92c2:	11 24       	eor	r1, r1
    92c4:	ee 5b       	subi	r30, 0xBE	; 190
    92c6:	f4 4f       	sbci	r31, 0xF4	; 244
    92c8:	90 81       	ld	r25, Z
    92ca:	95 ff       	sbrs	r25, 5
    92cc:	02 c0       	rjmp	.+4      	; 0x92d2 <TriggerNote+0x1c>
    92ce:	97 fd       	sbrc	r25, 7
    92d0:	28 c0       	rjmp	.+80     	; 0x9322 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    92d2:	31 11       	cpse	r19, r1
    92d4:	18 c0       	rjmp	.+48     	; 0x9306 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    92d6:	86 e1       	ldi	r24, 0x16	; 22
    92d8:	8a 9f       	mul	r24, r26
    92da:	f0 01       	movw	r30, r0
    92dc:	8b 9f       	mul	r24, r27
    92de:	f0 0d       	add	r31, r0
    92e0:	11 24       	eor	r1, r1
    92e2:	ee 5b       	subi	r30, 0xBE	; 190
    92e4:	f4 4f       	sbci	r31, 0xF4	; 244
    92e6:	85 85       	ldd	r24, Z+13	; 0x0d
    92e8:	81 11       	cpse	r24, r1
    92ea:	02 c0       	rjmp	.+4      	; 0x92f0 <TriggerNote+0x3a>
    92ec:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    92ee:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    92f0:	86 e1       	ldi	r24, 0x16	; 22
    92f2:	8a 9f       	mul	r24, r26
    92f4:	f0 01       	movw	r30, r0
    92f6:	8b 9f       	mul	r24, r27
    92f8:	f0 0d       	add	r31, r0
    92fa:	11 24       	eor	r1, r1
    92fc:	ee 5b       	subi	r30, 0xBE	; 190
    92fe:	f4 4f       	sbci	r31, 0xF4	; 244
    9300:	9f 7b       	andi	r25, 0xBF	; 191
    9302:	90 83       	st	Z, r25
    9304:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    9306:	26 e1       	ldi	r18, 0x16	; 22
    9308:	2a 9f       	mul	r18, r26
    930a:	f0 01       	movw	r30, r0
    930c:	2b 9f       	mul	r18, r27
    930e:	f0 0d       	add	r31, r0
    9310:	11 24       	eor	r1, r1
    9312:	ee 5b       	subi	r30, 0xBE	; 190
    9314:	f4 4f       	sbci	r31, 0xF4	; 244
    9316:	9f 77       	andi	r25, 0x7F	; 127
    9318:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    931a:	24 2f       	mov	r18, r20
    931c:	43 2f       	mov	r20, r19
    931e:	0c 94 6f 48 	jmp	0x90de	; 0x90de <TriggerCommon>
    9322:	08 95       	ret

00009324 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    9324:	5f 92       	push	r5
    9326:	6f 92       	push	r6
    9328:	7f 92       	push	r7
    932a:	8f 92       	push	r8
    932c:	9f 92       	push	r9
    932e:	af 92       	push	r10
    9330:	bf 92       	push	r11
    9332:	cf 92       	push	r12
    9334:	df 92       	push	r13
    9336:	ef 92       	push	r14
    9338:	ff 92       	push	r15
    933a:	0f 93       	push	r16
    933c:	1f 93       	push	r17
    933e:	cf 93       	push	r28
    9340:	df 93       	push	r29
    9342:	c2 e4       	ldi	r28, 0x42	; 66
    9344:	db e0       	ldi	r29, 0x0B	; 11
    9346:	82 e0       	ldi	r24, 0x02	; 2
    9348:	e8 2e       	mov	r14, r24
    934a:	8b e0       	ldi	r24, 0x0B	; 11
    934c:	f8 2e       	mov	r15, r24
    934e:	d7 01       	movw	r26, r14
    9350:	9e 01       	movw	r18, r28
    9352:	40 e0       	ldi	r20, 0x00	; 0
    9354:	50 e0       	ldi	r21, 0x00	; 0
    9356:	ca 01       	movw	r24, r20
    9358:	8e 5b       	subi	r24, 0xBE	; 190
    935a:	94 4f       	sbci	r25, 0xF4	; 244
    935c:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    935e:	fc 01       	movw	r30, r24
    9360:	85 85       	ldd	r24, Z+13	; 0x0d
    9362:	88 23       	and	r24, r24
    9364:	91 f0       	breq	.+36     	; 0x938a <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    9366:	64 85       	ldd	r22, Z+12	; 0x0c
    9368:	99 27       	eor	r25, r25
    936a:	87 fd       	sbrc	r24, 7
    936c:	90 95       	com	r25
    936e:	86 0f       	add	r24, r22
    9370:	91 1d       	adc	r25, r1
    9372:	8f 3f       	cpi	r24, 0xFF	; 255
    9374:	91 05       	cpc	r25, r1
    9376:	19 f0       	breq	.+6      	; 0x937e <ProcessMusic+0x5a>
    9378:	14 f0       	brlt	.+4      	; 0x937e <ProcessMusic+0x5a>
    937a:	8f ef       	ldi	r24, 0xFF	; 255
    937c:	90 e0       	ldi	r25, 0x00	; 0
    937e:	97 ff       	sbrs	r25, 7
    9380:	02 c0       	rjmp	.+4      	; 0x9386 <ProcessMusic+0x62>
    9382:	80 e0       	ldi	r24, 0x00	; 0
    9384:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    9386:	f6 01       	movw	r30, r12
    9388:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    938a:	f9 01       	movw	r30, r18
    938c:	10 81       	ld	r17, Z
    938e:	13 ff       	sbrs	r17, 3
    9390:	29 c0       	rjmp	.+82     	; 0x93e4 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    9392:	62 81       	ldd	r22, Z+2	; 0x02
    9394:	73 81       	ldd	r23, Z+3	; 0x03
    9396:	11 96       	adiw	r26, 0x01	; 1
    9398:	8d 91       	ld	r24, X+
    939a:	9c 91       	ld	r25, X
    939c:	12 97       	sbiw	r26, 0x02	; 2
    939e:	86 0f       	add	r24, r22
    93a0:	97 1f       	adc	r25, r23
    93a2:	12 96       	adiw	r26, 0x02	; 2
    93a4:	9c 93       	st	X, r25
    93a6:	8e 93       	st	-X, r24
    93a8:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    93aa:	f6 01       	movw	r30, r12
    93ac:	04 81       	ldd	r16, Z+4	; 0x04
    93ae:	e0 2f       	mov	r30, r16
    93b0:	f0 e0       	ldi	r31, 0x00	; 0
    93b2:	ee 0f       	add	r30, r30
    93b4:	ff 1f       	adc	r31, r31
    93b6:	e8 5f       	subi	r30, 0xF8	; 248
    93b8:	f7 46       	sbci	r31, 0x67	; 103
    93ba:	c5 90       	lpm	r12, Z+
    93bc:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    93be:	16 16       	cp	r1, r22
    93c0:	17 06       	cpc	r1, r23
    93c2:	24 f4       	brge	.+8      	; 0x93cc <ProcessMusic+0xa8>
    93c4:	8c 15       	cp	r24, r12
    93c6:	9d 05       	cpc	r25, r13
    93c8:	30 f4       	brcc	.+12     	; 0x93d6 <ProcessMusic+0xb2>
    93ca:	0c c0       	rjmp	.+24     	; 0x93e4 <ProcessMusic+0xc0>
    93cc:	67 2b       	or	r22, r23
    93ce:	51 f0       	breq	.+20     	; 0x93e4 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    93d0:	c8 16       	cp	r12, r24
    93d2:	d9 06       	cpc	r13, r25
    93d4:	38 f0       	brcs	.+14     	; 0x93e4 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    93d6:	12 96       	adiw	r26, 0x02	; 2
    93d8:	dc 92       	st	X, r13
    93da:	ce 92       	st	-X, r12
    93dc:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    93de:	17 7f       	andi	r17, 0xF7	; 247
    93e0:	f9 01       	movw	r30, r18
    93e2:	10 83       	st	Z, r17
    93e4:	4a 5e       	subi	r20, 0xEA	; 234
    93e6:	5f 4f       	sbci	r21, 0xFF	; 255
    93e8:	2a 5e       	subi	r18, 0xEA	; 234
    93ea:	3f 4f       	sbci	r19, 0xFF	; 255
    93ec:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    93ee:	4e 36       	cpi	r20, 0x6E	; 110
    93f0:	51 05       	cpc	r21, r1
    93f2:	09 f0       	breq	.+2      	; 0x93f6 <ProcessMusic+0xd2>
    93f4:	b0 cf       	rjmp	.-160    	; 0x9356 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    93f6:	80 91 00 0b 	lds	r24, 0x0B00
    93fa:	88 23       	and	r24, r24
    93fc:	09 f4       	brne	.+2      	; 0x9400 <ProcessMusic+0xdc>
    93fe:	cb c0       	rjmp	.+406    	; 0x9596 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    9400:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    9402:	80 91 b0 0b 	lds	r24, 0x0BB0
    9406:	90 91 b1 0b 	lds	r25, 0x0BB1
    940a:	20 91 b6 0b 	lds	r18, 0x0BB6
    940e:	30 91 b7 0b 	lds	r19, 0x0BB7
    9412:	82 17       	cp	r24, r18
    9414:	93 07       	cpc	r25, r19
    9416:	09 f0       	breq	.+2      	; 0x941a <ProcessMusic+0xf6>
    9418:	b9 c0       	rjmp	.+370    	; 0x958c <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    941a:	20 91 b9 0b 	lds	r18, 0x0BB9
    941e:	30 91 ba 0b 	lds	r19, 0x0BBA
    9422:	b9 01       	movw	r22, r18
    9424:	6f 5f       	subi	r22, 0xFF	; 255
    9426:	7f 4f       	sbci	r23, 0xFF	; 255
    9428:	70 93 ba 0b 	sts	0x0BBA, r23
    942c:	60 93 b9 0b 	sts	0x0BB9, r22
    9430:	f9 01       	movw	r30, r18
    9432:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    9434:	4f 3f       	cpi	r20, 0xFF	; 255
    9436:	79 f5       	brne	.+94     	; 0x9496 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    9438:	a9 01       	movw	r20, r18
    943a:	4e 5f       	subi	r20, 0xFE	; 254
    943c:	5f 4f       	sbci	r21, 0xFF	; 255
    943e:	50 93 ba 0b 	sts	0x0BBA, r21
    9442:	40 93 b9 0b 	sts	0x0BB9, r20
    9446:	fb 01       	movw	r30, r22
    9448:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    944a:	6f 32       	cpi	r22, 0x2F	; 47
    944c:	19 f4       	brne	.+6      	; 0x9454 <ProcessMusic+0x130>
						playSong=false;
    944e:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    9452:	9c c0       	rjmp	.+312    	; 0x958c <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    9454:	66 30       	cpi	r22, 0x06	; 6
    9456:	09 f0       	breq	.+2      	; 0x945a <ProcessMusic+0x136>
    9458:	8c c0       	rjmp	.+280    	; 0x9572 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    945a:	fa 01       	movw	r30, r20
    945c:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    945e:	c9 01       	movw	r24, r18
    9460:	04 96       	adiw	r24, 0x04	; 4
    9462:	90 93 ba 0b 	sts	0x0BBA, r25
    9466:	80 93 b9 0b 	sts	0x0BB9, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    946a:	f9 01       	movw	r30, r18
    946c:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    946e:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    9470:	e3 35       	cpi	r30, 0x53	; 83
    9472:	29 f4       	brne	.+10     	; 0x947e <ProcessMusic+0x15a>
							loopStart=songPos;
    9474:	90 93 bc 0b 	sts	0x0BBC, r25
    9478:	80 93 bb 0b 	sts	0x0BBB, r24
    947c:	7a c0       	rjmp	.+244    	; 0x9572 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    947e:	e5 34       	cpi	r30, 0x45	; 69
    9480:	09 f0       	breq	.+2      	; 0x9484 <ProcessMusic+0x160>
    9482:	77 c0       	rjmp	.+238    	; 0x9572 <ProcessMusic+0x24e>
							songPos=loopStart;
    9484:	80 91 bb 0b 	lds	r24, 0x0BBB
    9488:	90 91 bc 0b 	lds	r25, 0x0BBC
    948c:	90 93 ba 0b 	sts	0x0BBA, r25
    9490:	80 93 b9 0b 	sts	0x0BB9, r24
    9494:	6e c0       	rjmp	.+220    	; 0x9572 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    9496:	47 fd       	sbrc	r20, 7
    9498:	40 93 b4 0b 	sts	0x0BB4, r20
					channel=lastStatus&0x0f;
    949c:	90 91 b4 0b 	lds	r25, 0x0BB4
    94a0:	89 2f       	mov	r24, r25
    94a2:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    94a4:	47 ff       	sbrs	r20, 7
    94a6:	08 c0       	rjmp	.+16     	; 0x94b8 <ProcessMusic+0x194>
    94a8:	2e 5f       	subi	r18, 0xFE	; 254
    94aa:	3f 4f       	sbci	r19, 0xFF	; 255
    94ac:	30 93 ba 0b 	sts	0x0BBA, r19
    94b0:	20 93 b9 0b 	sts	0x0BB9, r18
    94b4:	fb 01       	movw	r30, r22
    94b6:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    94b8:	90 7f       	andi	r25, 0xF0	; 240
    94ba:	90 3b       	cpi	r25, 0xB0	; 176
    94bc:	e1 f0       	breq	.+56     	; 0x94f6 <ProcessMusic+0x1d2>
    94be:	90 3c       	cpi	r25, 0xC0	; 192
    94c0:	09 f4       	brne	.+2      	; 0x94c4 <ProcessMusic+0x1a0>
    94c2:	51 c0       	rjmp	.+162    	; 0x9566 <ProcessMusic+0x242>
    94c4:	90 39       	cpi	r25, 0x90	; 144
    94c6:	09 f0       	breq	.+2      	; 0x94ca <ProcessMusic+0x1a6>
    94c8:	54 c0       	rjmp	.+168    	; 0x9572 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    94ca:	e0 91 b9 0b 	lds	r30, 0x0BB9
    94ce:	f0 91 ba 0b 	lds	r31, 0x0BBA
    94d2:	9f 01       	movw	r18, r30
    94d4:	2f 5f       	subi	r18, 0xFF	; 255
    94d6:	3f 4f       	sbci	r19, 0xFF	; 255
    94d8:	30 93 ba 0b 	sts	0x0BBA, r19
    94dc:	20 93 b9 0b 	sts	0x0BB9, r18
    94e0:	24 91       	lpm	r18, Z
    94e2:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    94e4:	18 9f       	mul	r17, r24
    94e6:	f0 01       	movw	r30, r0
    94e8:	11 24       	eor	r1, r1
    94ea:	ee 5b       	subi	r30, 0xBE	; 190
    94ec:	f4 4f       	sbci	r31, 0xF4	; 244
    94ee:	66 85       	ldd	r22, Z+14	; 0x0e
    94f0:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
    94f4:	3e c0       	rjmp	.+124    	; 0x9572 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    94f6:	e0 91 b9 0b 	lds	r30, 0x0BB9
    94fa:	f0 91 ba 0b 	lds	r31, 0x0BBA
    94fe:	9f 01       	movw	r18, r30
    9500:	2f 5f       	subi	r18, 0xFF	; 255
    9502:	3f 4f       	sbci	r19, 0xFF	; 255
    9504:	30 93 ba 0b 	sts	0x0BBA, r19
    9508:	20 93 b9 0b 	sts	0x0BB9, r18
    950c:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    950e:	47 30       	cpi	r20, 0x07	; 7
    9510:	49 f4       	brne	.+18     	; 0x9524 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    9512:	18 9f       	mul	r17, r24
    9514:	d0 01       	movw	r26, r0
    9516:	11 24       	eor	r1, r1
    9518:	ae 5b       	subi	r26, 0xBE	; 190
    951a:	b4 4f       	sbci	r27, 0xF4	; 244
    951c:	ee 0f       	add	r30, r30
    951e:	1a 96       	adiw	r26, 0x0a	; 10
    9520:	ec 93       	st	X, r30
    9522:	27 c0       	rjmp	.+78     	; 0x9572 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    9524:	4b 30       	cpi	r20, 0x0B	; 11
    9526:	49 f4       	brne	.+18     	; 0x953a <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    9528:	18 9f       	mul	r17, r24
    952a:	d0 01       	movw	r26, r0
    952c:	11 24       	eor	r1, r1
    952e:	ae 5b       	subi	r26, 0xBE	; 190
    9530:	b4 4f       	sbci	r27, 0xF4	; 244
    9532:	ee 0f       	add	r30, r30
    9534:	19 96       	adiw	r26, 0x09	; 9
    9536:	ec 93       	st	X, r30
    9538:	1c c0       	rjmp	.+56     	; 0x9572 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    953a:	4c 35       	cpi	r20, 0x5C	; 92
    953c:	49 f4       	brne	.+18     	; 0x9550 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    953e:	18 9f       	mul	r17, r24
    9540:	d0 01       	movw	r26, r0
    9542:	11 24       	eor	r1, r1
    9544:	ae 5b       	subi	r26, 0xBE	; 190
    9546:	b4 4f       	sbci	r27, 0xF4	; 244
    9548:	ee 0f       	add	r30, r30
    954a:	17 96       	adiw	r26, 0x07	; 7
    954c:	ec 93       	st	X, r30
    954e:	11 c0       	rjmp	.+34     	; 0x9572 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    9550:	44 36       	cpi	r20, 0x64	; 100
    9552:	79 f4       	brne	.+30     	; 0x9572 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    9554:	18 9f       	mul	r17, r24
    9556:	d0 01       	movw	r26, r0
    9558:	11 24       	eor	r1, r1
    955a:	ae 5b       	subi	r26, 0xBE	; 190
    955c:	b4 4f       	sbci	r27, 0xF4	; 244
    955e:	ee 0f       	add	r30, r30
    9560:	18 96       	adiw	r26, 0x08	; 8
    9562:	ec 93       	st	X, r30
    9564:	06 c0       	rjmp	.+12     	; 0x9572 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    9566:	18 9f       	mul	r17, r24
    9568:	f0 01       	movw	r30, r0
    956a:	11 24       	eor	r1, r1
    956c:	ee 5b       	subi	r30, 0xBE	; 190
    956e:	f4 4f       	sbci	r31, 0xF4	; 244
    9570:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    9572:	89 eb       	ldi	r24, 0xB9	; 185
    9574:	9b e0       	ldi	r25, 0x0B	; 11
    9576:	0e 94 49 48 	call	0x9092	; 0x9092 <ReadVarLen>
    957a:	90 93 b7 0b 	sts	0x0BB7, r25
    957e:	80 93 b6 0b 	sts	0x0BB6, r24
				currDeltaTime=0;
    9582:	10 92 b1 0b 	sts	0x0BB1, r1
    9586:	10 92 b0 0b 	sts	0x0BB0, r1
    958a:	3b cf       	rjmp	.-394    	; 0x9402 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    958c:	01 96       	adiw	r24, 0x01	; 1
    958e:	90 93 b1 0b 	sts	0x0BB1, r25
    9592:	80 93 b0 0b 	sts	0x0BB0, r24
    9596:	98 e4       	ldi	r25, 0x48	; 72
    9598:	a9 2e       	mov	r10, r25
    959a:	9b e0       	ldi	r25, 0x0B	; 11
    959c:	b9 2e       	mov	r11, r25
    959e:	04 e5       	ldi	r16, 0x54	; 84
    95a0:	1b e0       	ldi	r17, 0x0B	; 11
    95a2:	23 e5       	ldi	r18, 0x53	; 83
    95a4:	c2 2e       	mov	r12, r18
    95a6:	2b e0       	ldi	r18, 0x0B	; 11
    95a8:	d2 2e       	mov	r13, r18
    95aa:	35 e5       	ldi	r19, 0x55	; 85
    95ac:	83 2e       	mov	r8, r19
    95ae:	3b e0       	ldi	r19, 0x0B	; 11
    95b0:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    95b2:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    95b4:	66 24       	eor	r6, r6
    95b6:	6a 94       	dec	r6
    95b8:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    95ba:	88 81       	ld	r24, Y
    95bc:	86 fd       	sbrc	r24, 6
    95be:	43 c0       	rjmp	.+134    	; 0x9646 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    95c0:	8c 89       	ldd	r24, Y+20	; 0x14
    95c2:	9d 89       	ldd	r25, Y+21	; 0x15
    95c4:	89 2b       	or	r24, r25
    95c6:	09 f4       	brne	.+2      	; 0x95ca <ProcessMusic+0x2a6>
    95c8:	3a c0       	rjmp	.+116    	; 0x963e <ProcessMusic+0x31a>
    95ca:	d8 01       	movw	r26, r16
    95cc:	9c 91       	ld	r25, X
    95ce:	f6 01       	movw	r30, r12
    95d0:	80 81       	ld	r24, Z
    95d2:	98 17       	cp	r25, r24
    95d4:	08 f4       	brcc	.+2      	; 0x95d8 <ProcessMusic+0x2b4>
    95d6:	33 c0       	rjmp	.+102    	; 0x963e <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    95d8:	d8 01       	movw	r26, r16
    95da:	9c 91       	ld	r25, X
    95dc:	f6 01       	movw	r30, r12
    95de:	80 81       	ld	r24, Z
    95e0:	98 13       	cpse	r25, r24
    95e2:	2d c0       	rjmp	.+90     	; 0x963e <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    95e4:	ec 89       	ldd	r30, Y+20	; 0x14
    95e6:	fd 89       	ldd	r31, Y+21	; 0x15
    95e8:	af 01       	movw	r20, r30
    95ea:	4f 5f       	subi	r20, 0xFF	; 255
    95ec:	5f 4f       	sbci	r21, 0xFF	; 255
    95ee:	5d 8b       	std	Y+21, r21	; 0x15
    95f0:	4c 8b       	std	Y+20, r20	; 0x14
    95f2:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    95f4:	8f 3f       	cpi	r24, 0xFF	; 255
    95f6:	31 f4       	brne	.+12     	; 0x9604 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    95f8:	88 81       	ld	r24, Y
    95fa:	8f 77       	andi	r24, 0x7F	; 127
    95fc:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    95fe:	1d 8a       	std	Y+21, r1	; 0x15
    9600:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    9602:	1d c0       	rjmp	.+58     	; 0x963e <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    9604:	32 96       	adiw	r30, 0x02	; 2
    9606:	fd 8b       	std	Y+21, r31	; 0x15
    9608:	ec 8b       	std	Y+20, r30	; 0x14
    960a:	fa 01       	movw	r30, r20
    960c:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    960e:	e8 2f       	mov	r30, r24
    9610:	f0 e0       	ldi	r31, 0x00	; 0
    9612:	ee 0f       	add	r30, r30
    9614:	ff 1f       	adc	r31, r31
    9616:	e2 54       	subi	r30, 0x42	; 66
    9618:	ff 4f       	sbci	r31, 0xFF	; 255
    961a:	25 91       	lpm	r18, Z+
    961c:	34 91       	lpm	r19, Z
    961e:	65 2d       	mov	r22, r5
    9620:	ce 01       	movw	r24, r28
    9622:	f9 01       	movw	r30, r18
    9624:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    9626:	ec 89       	ldd	r30, Y+20	; 0x14
    9628:	fd 89       	ldd	r31, Y+21	; 0x15
    962a:	cf 01       	movw	r24, r30
    962c:	01 96       	adiw	r24, 0x01	; 1
    962e:	9d 8b       	std	Y+21, r25	; 0x15
    9630:	8c 8b       	std	Y+20, r24	; 0x14
    9632:	e4 91       	lpm	r30, Z
    9634:	d6 01       	movw	r26, r12
    9636:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    9638:	f8 01       	movw	r30, r16
    963a:	10 82       	st	Z, r1
    963c:	cd cf       	rjmp	.-102    	; 0x95d8 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    963e:	d8 01       	movw	r26, r16
    9640:	8c 91       	ld	r24, X
    9642:	8f 5f       	subi	r24, 0xFF	; 255
    9644:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    9646:	98 81       	ld	r25, Y
    9648:	95 ff       	sbrs	r25, 5
    964a:	6c c0       	rjmp	.+216    	; 0x9724 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    964c:	f4 01       	movw	r30, r8
    964e:	80 81       	ld	r24, Z
    9650:	8f 3f       	cpi	r24, 0xFF	; 255
    9652:	11 f0       	breq	.+4      	; 0x9658 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    9654:	8f 5f       	subi	r24, 0xFF	; 255
    9656:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    9658:	97 fd       	sbrc	r25, 7
    965a:	04 c0       	rjmp	.+8      	; 0x9664 <ProcessMusic+0x340>
    965c:	f8 01       	movw	r30, r16
    965e:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    9660:	90 81       	ld	r25, Z
    9662:	01 c0       	rjmp	.+2      	; 0x9666 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    9664:	9f ef       	ldi	r25, 0xFF	; 255
    9666:	f8 01       	movw	r30, r16
    9668:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    966a:	80 81       	ld	r24, Z
    966c:	88 23       	and	r24, r24
    966e:	09 f4       	brne	.+2      	; 0x9672 <ProcessMusic+0x34e>
    9670:	4e c0       	rjmp	.+156    	; 0x970e <ProcessMusic+0x3ea>
    9672:	31 96       	adiw	r30, 0x01	; 1
    9674:	50 81       	ld	r21, Z
    9676:	55 23       	and	r21, r21
    9678:	09 f4       	brne	.+2      	; 0x967c <ProcessMusic+0x358>
    967a:	49 c0       	rjmp	.+146    	; 0x970e <ProcessMusic+0x3ea>
    967c:	99 23       	and	r25, r25
    967e:	09 f4       	brne	.+2      	; 0x9682 <ProcessMusic+0x35e>
    9680:	46 c0       	rjmp	.+140    	; 0x970e <ProcessMusic+0x3ea>
    9682:	40 91 b5 0b 	lds	r20, 0x0BB5
    9686:	44 23       	and	r20, r20
    9688:	09 f4       	brne	.+2      	; 0x968c <ProcessMusic+0x368>
    968a:	41 c0       	rjmp	.+130    	; 0x970e <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    968c:	89 9f       	mul	r24, r25
    968e:	c0 01       	movw	r24, r0
    9690:	11 24       	eor	r1, r1
    9692:	93 95       	inc	r25
				uVol>>=8;
    9694:	89 2f       	mov	r24, r25
    9696:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    9698:	58 9f       	mul	r21, r24
    969a:	90 01       	movw	r18, r0
    969c:	59 9f       	mul	r21, r25
    969e:	30 0d       	add	r19, r0
    96a0:	11 24       	eor	r1, r1
    96a2:	c9 01       	movw	r24, r18
    96a4:	93 95       	inc	r25
				uVol>>=8;
    96a6:	89 2f       	mov	r24, r25
    96a8:	99 27       	eor	r25, r25
    96aa:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    96ac:	50 81       	ld	r21, Z
    96ae:	58 9f       	mul	r21, r24
    96b0:	90 01       	movw	r18, r0
    96b2:	59 9f       	mul	r21, r25
    96b4:	30 0d       	add	r19, r0
    96b6:	11 24       	eor	r1, r1
    96b8:	33 95       	inc	r19
				uVol>>=8;
    96ba:	23 2f       	mov	r18, r19
    96bc:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    96be:	42 9f       	mul	r20, r18
    96c0:	c0 01       	movw	r24, r0
    96c2:	43 9f       	mul	r20, r19
    96c4:	90 0d       	add	r25, r0
    96c6:	11 24       	eor	r1, r1
    96c8:	93 95       	inc	r25
				uVol>>=8;
    96ca:	89 2f       	mov	r24, r25
    96cc:	99 27       	eor	r25, r25
    96ce:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    96d0:	20 81       	ld	r18, Z
    96d2:	22 23       	and	r18, r18
    96d4:	f1 f0       	breq	.+60     	; 0x9712 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    96d6:	d5 01       	movw	r26, r10
    96d8:	ec 91       	ld	r30, X
    96da:	f0 e0       	ldi	r31, 0x00	; 0
    96dc:	e0 50       	subi	r30, 0x00	; 0
    96de:	f6 46       	sbci	r31, 0x66	; 102
    96e0:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    96e2:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    96e4:	2e 9f       	mul	r18, r30
    96e6:	f0 01       	movw	r30, r0
    96e8:	11 24       	eor	r1, r1
    96ea:	f3 95       	inc	r31
					tVol>>=8;
    96ec:	ef 2f       	mov	r30, r31
    96ee:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    96f0:	a3 01       	movw	r20, r6
    96f2:	4e 1b       	sub	r20, r30
    96f4:	5f 0b       	sbc	r21, r31
    96f6:	48 9f       	mul	r20, r24
    96f8:	90 01       	movw	r18, r0
    96fa:	49 9f       	mul	r20, r25
    96fc:	30 0d       	add	r19, r0
    96fe:	58 9f       	mul	r21, r24
    9700:	30 0d       	add	r19, r0
    9702:	11 24       	eor	r1, r1
    9704:	c9 01       	movw	r24, r18
    9706:	93 95       	inc	r25
					uVol>>=8;
    9708:	89 2f       	mov	r24, r25
    970a:	99 27       	eor	r25, r25
    970c:	02 c0       	rjmp	.+4      	; 0x9712 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    970e:	80 e0       	ldi	r24, 0x00	; 0
    9710:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    9712:	f5 01       	movw	r30, r10
    9714:	30 81       	ld	r19, Z
    9716:	f8 01       	movw	r30, r16
    9718:	3a 97       	sbiw	r30, 0x0a	; 10
    971a:	20 81       	ld	r18, Z
    971c:	23 0f       	add	r18, r19
    971e:	d5 01       	movw	r26, r10
    9720:	2c 93       	st	X, r18
    9722:	02 c0       	rjmp	.+4      	; 0x9728 <ProcessMusic+0x404>

		}else{
			uVol=0;
    9724:	80 e0       	ldi	r24, 0x00	; 0
    9726:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9728:	f7 01       	movw	r30, r14
    972a:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    972c:	53 94       	inc	r5
    972e:	66 96       	adiw	r28, 0x16	; 22
    9730:	f6 e0       	ldi	r31, 0x06	; 6
    9732:	ef 0e       	add	r14, r31
    9734:	f1 1c       	adc	r15, r1
    9736:	86 e1       	ldi	r24, 0x16	; 22
    9738:	a8 0e       	add	r10, r24
    973a:	b1 1c       	adc	r11, r1
    973c:	0a 5e       	subi	r16, 0xEA	; 234
    973e:	1f 4f       	sbci	r17, 0xFF	; 255
    9740:	96 e1       	ldi	r25, 0x16	; 22
    9742:	c9 0e       	add	r12, r25
    9744:	d1 1c       	adc	r13, r1
    9746:	a6 e1       	ldi	r26, 0x16	; 22
    9748:	8a 0e       	add	r8, r26
    974a:	91 1c       	adc	r9, r1
    974c:	b5 e0       	ldi	r27, 0x05	; 5
    974e:	5b 12       	cpse	r5, r27
    9750:	34 cf       	rjmp	.-408    	; 0x95ba <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9752:	df 91       	pop	r29
    9754:	cf 91       	pop	r28
    9756:	1f 91       	pop	r17
    9758:	0f 91       	pop	r16
    975a:	ff 90       	pop	r15
    975c:	ef 90       	pop	r14
    975e:	df 90       	pop	r13
    9760:	cf 90       	pop	r12
    9762:	bf 90       	pop	r11
    9764:	af 90       	pop	r10
    9766:	9f 90       	pop	r9
    9768:	8f 90       	pop	r8
    976a:	7f 90       	pop	r7
    976c:	6f 90       	pop	r6
    976e:	5f 90       	pop	r5
    9770:	08 95       	ret

00009772 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    9772:	80 93 b5 0b 	sts	0x0BB5, r24
    9776:	08 95       	ret

00009778 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    9778:	99 27       	eor	r25, r25
	clr r23
    977a:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    977c:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    977e:	09 f4       	brne	.+2      	; 0x9782 <set_note_waves>
		ret
    9780:	08 95       	ret

00009782 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    9782:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    9784:	f8 e9       	ldi	r31, 0x98	; 152
	lsl r22
    9786:	66 0f       	add	r22, r22
	rol r23
    9788:	77 1f       	adc	r23, r23
	add ZL,r22
    978a:	e6 0f       	add	r30, r22
	adc ZH,r23	
    978c:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    978e:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    9790:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    9792:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    9794:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    9796:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    9798:	28 9f       	mul	r18, r24
	add ZL,r0
    979a:	e0 0d       	add	r30, r0
	adc ZH,r1
    979c:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    979e:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    97a0:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    97a2:	11 24       	eor	r1, r1
	

	ret
    97a4:	08 95       	ret

000097a6 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    97a6:	99 27       	eor	r25, r25
	clr r23
    97a8:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    97aa:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    97ac:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    97ae:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    97b0:	28 9f       	mul	r18, r24
	add ZL,r0
    97b2:	e0 0d       	add	r30, r0
	adc ZH,r1
    97b4:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    97b6:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    97b8:	31 f4       	brne	.+12     	; 0x97c6 <smw1>
	lds r22,tr4_params
    97ba:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    97be:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    97c0:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    97c4:	0b c0       	rjmp	.+22     	; 0x97dc <esmw>

000097c6 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    97c6:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    97c8:	31 f4       	brne	.+12     	; 0x97d6 <smw2>
	lds r22,tr4_params
    97ca:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    97ce:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    97d0:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    97d4:	03 c0       	rjmp	.+6      	; 0x97dc <esmw>

000097d6 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    97d6:	7a e9       	ldi	r23, 0x9A	; 154
	add r23,r22
    97d8:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    97da:	75 83       	std	Z+5, r23	; 0x05

000097dc <esmw>:

esmw:
	clr r1	
    97dc:	11 24       	eor	r1, r1
	ret
    97de:	08 95       	ret
	...

00009800 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9800:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9802:	80 93 01 0b 	sts	0x0B01, r24
	ret
    9806:	08 95       	ret

00009808 <steptable>:
    9808:	22 00       	.word	0x0022	; ????
    980a:	24 00       	.word	0x0024	; ????
    980c:	26 00       	.word	0x0026	; ????
    980e:	28 00       	.word	0x0028	; ????
    9810:	2b 00       	.word	0x002b	; ????
    9812:	2d 00       	.word	0x002d	; ????
    9814:	30 00       	.word	0x0030	; ????
    9816:	33 00       	.word	0x0033	; ????
    9818:	36 00       	.word	0x0036	; ????
    981a:	39 00       	.word	0x0039	; ????
    981c:	3d 00       	.word	0x003d	; ????
    981e:	40 00       	.word	0x0040	; ????
    9820:	44 00       	.word	0x0044	; ????
    9822:	48 00       	.word	0x0048	; ????
    9824:	4c 00       	.word	0x004c	; ????
    9826:	51 00       	.word	0x0051	; ????
    9828:	56 00       	.word	0x0056	; ????
    982a:	5b 00       	.word	0x005b	; ????
    982c:	60 00       	.word	0x0060	; ????
    982e:	66 00       	.word	0x0066	; ????
    9830:	6c 00       	.word	0x006c	; ????
    9832:	73 00       	.word	0x0073	; ????
    9834:	79 00       	.word	0x0079	; ????
    9836:	81 00       	.word	0x0081	; ????
    9838:	88 00       	.word	0x0088	; ????
    983a:	90 00       	.word	0x0090	; ????
    983c:	99 00       	.word	0x0099	; ????
    983e:	a2 00       	.word	0x00a2	; ????
    9840:	ac 00       	.word	0x00ac	; ????
    9842:	b6 00       	.word	0x00b6	; ????
    9844:	c1 00       	.word	0x00c1	; ????
    9846:	cc 00       	.word	0x00cc	; ????
    9848:	d8 00       	.word	0x00d8	; ????
    984a:	e5 00       	.word	0x00e5	; ????
    984c:	f3 00       	.word	0x00f3	; ????
    984e:	01 01       	movw	r0, r2
    9850:	10 01       	movw	r2, r0
    9852:	21 01       	movw	r4, r2
    9854:	32 01       	movw	r6, r4
    9856:	44 01       	movw	r8, r8
    9858:	57 01       	movw	r10, r14
    985a:	6c 01       	movw	r12, r24
    985c:	81 01       	movw	r16, r2
    985e:	98 01       	movw	r18, r16
    9860:	b0 01       	movw	r22, r0
    9862:	ca 01       	movw	r24, r20
    9864:	e5 01       	movw	r28, r10
    9866:	02 02       	muls	r16, r18
    9868:	21 02       	muls	r18, r17
    986a:	41 02       	muls	r20, r17
    986c:	64 02       	muls	r22, r20
    986e:	88 02       	muls	r24, r24
    9870:	ae 02       	muls	r26, r30
    9872:	d7 02       	muls	r29, r23
    9874:	03 03       	mulsu	r16, r19
    9876:	30 03       	mulsu	r19, r16
    9878:	61 03       	mulsu	r22, r17
    987a:	94 03       	fmuls	r17, r20
    987c:	cb 03       	fmulsu	r20, r19
    987e:	05 04       	cpc	r0, r5
    9880:	42 04       	cpc	r4, r2
    9882:	83 04       	cpc	r8, r3
    9884:	c7 04       	cpc	r12, r7
    9886:	10 05       	cpc	r17, r0
    9888:	5d 05       	cpc	r21, r13
    988a:	af 05       	cpc	r26, r15
    988c:	05 06       	cpc	r0, r21
    988e:	61 06       	cpc	r6, r17
    9890:	c2 06       	cpc	r12, r18
    9892:	29 07       	cpc	r18, r25
    9894:	96 07       	cpc	r25, r22
    9896:	09 08       	sbc	r0, r9
    9898:	83 08       	sbc	r8, r3
    989a:	05 09       	sbc	r16, r5
    989c:	8e 09       	sbc	r24, r14
    989e:	20 0a       	sbc	r2, r16
    98a0:	ba 0a       	sbc	r11, r26
    98a2:	5d 0b       	sbc	r21, r29
    98a4:	0a 0c       	add	r0, r10
    98a6:	c1 0c       	add	r12, r1
    98a8:	84 0d       	add	r24, r4
    98aa:	51 0e       	add	r5, r17
    98ac:	2b 0f       	add	r18, r27
    98ae:	12 10       	cpse	r1, r2
    98b0:	07 11       	cpse	r16, r7
    98b2:	0a 12       	cpse	r0, r26
    98b4:	1d 13       	cpse	r17, r29
    98b6:	40 14       	cp	r4, r0
    98b8:	74 15       	cp	r23, r4
    98ba:	ba 16       	cp	r11, r26
    98bc:	14 18       	sub	r1, r4
    98be:	83 19       	sub	r24, r3
    98c0:	07 1b       	sub	r16, r23
    98c2:	a3 1c       	adc	r10, r3
    98c4:	57 1e       	adc	r5, r23
    98c6:	24 20       	and	r2, r4
    98c8:	0e 22       	and	r0, r30
    98ca:	14 24       	eor	r1, r4
    98cc:	39 26       	eor	r3, r25
    98ce:	7f 28       	or	r7, r15
    98d0:	e8 2a       	or	r14, r24
    98d2:	75 2d       	mov	r23, r5
    98d4:	29 30       	cpi	r18, 0x09	; 9
    98d6:	06 33       	cpi	r16, 0x36	; 54
    98d8:	0f 36       	cpi	r16, 0x6F	; 111
    98da:	45 39       	cpi	r20, 0x95	; 149
    98dc:	ad 3c       	cpi	r26, 0xCD	; 205
    98de:	49 40       	sbci	r20, 0x09	; 9
    98e0:	1b 44       	sbci	r17, 0x4B	; 75
    98e2:	28 48       	sbci	r18, 0x88	; 136
    98e4:	73 4c       	sbci	r23, 0xC3	; 195
    98e6:	fe 50       	subi	r31, 0x0E	; 14
    98e8:	cf 55       	subi	r28, 0x5F	; 95
    98ea:	ea 5a       	subi	r30, 0xAA	; 170
    98ec:	51 60       	ori	r21, 0x01	; 1
    98ee:	0c 66       	ori	r16, 0x6C	; 108
    98f0:	1d 6c       	ori	r17, 0xCD	; 205
    98f2:	8b 72       	andi	r24, 0x2B	; 43
    98f4:	5a 79       	andi	r21, 0x9A	; 154
    98f6:	92 80       	ldd	r9, Z+2	; 0x02
    98f8:	37 88       	ldd	r3, Z+23	; 0x17
    98fa:	50 90 e5 98 	lds	r5, 0x98E5
    98fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9900:	9f ab       	std	Y+55, r25	; 0x37
    9902:	d3 b5       	in	r29, 0x23	; 35
    9904:	a3 c0       	rjmp	.+326    	; 0x9a4c <waves+0x4c>
	...

00009a00 <waves>:
    9a00:	00 03       	mulsu	r16, r16
    9a02:	06 09       	sbc	r16, r6
    9a04:	0c 10       	cpse	r0, r12
    9a06:	13 16       	cp	r1, r19
    9a08:	19 1c       	adc	r1, r9
    9a0a:	1f 22       	and	r1, r31
    9a0c:	25 28       	or	r2, r5
    9a0e:	2b 2e       	mov	r2, r27
    9a10:	31 33       	cpi	r19, 0x31	; 49
    9a12:	36 39       	cpi	r19, 0x96	; 150
    9a14:	3c 3f       	cpi	r19, 0xFC	; 252
    9a16:	41 44       	sbci	r20, 0x41	; 65
    9a18:	47 49       	sbci	r20, 0x97	; 151
    9a1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9a1c:	51 53       	subi	r21, 0x31	; 49
    9a1e:	55 58       	subi	r21, 0x85	; 133
    9a20:	5a 5c       	subi	r21, 0xCA	; 202
    9a22:	5e 60       	ori	r21, 0x0E	; 14
    9a24:	62 64       	ori	r22, 0x42	; 66
    9a26:	66 68       	ori	r22, 0x86	; 134
    9a28:	6a 6b       	ori	r22, 0xBA	; 186
    9a2a:	6d 6f       	ori	r22, 0xFD	; 253
    9a2c:	70 71       	andi	r23, 0x10	; 16
    9a2e:	73 74       	andi	r23, 0x43	; 67
    9a30:	75 76       	andi	r23, 0x65	; 101
    9a32:	78 79       	andi	r23, 0x98	; 152
    9a34:	7a 7a       	andi	r23, 0xAA	; 170
    9a36:	7b 7c       	andi	r23, 0xCB	; 203
    9a38:	7d 7d       	andi	r23, 0xDD	; 221
    9a3a:	7e 7e       	andi	r23, 0xEE	; 238
    9a3c:	7e 7f       	andi	r23, 0xFE	; 254
    9a3e:	7f 7f       	andi	r23, 0xFF	; 255
    9a40:	7f 7f       	andi	r23, 0xFF	; 255
    9a42:	7f 7f       	andi	r23, 0xFF	; 255
    9a44:	7e 7e       	andi	r23, 0xEE	; 238
    9a46:	7e 7d       	andi	r23, 0xDE	; 222
    9a48:	7d 7c       	andi	r23, 0xCD	; 205
    9a4a:	7b 7a       	andi	r23, 0xAB	; 171
    9a4c:	7a 79       	andi	r23, 0x9A	; 154
    9a4e:	78 76       	andi	r23, 0x68	; 104
    9a50:	75 74       	andi	r23, 0x45	; 69
    9a52:	73 71       	andi	r23, 0x13	; 19
    9a54:	70 6f       	ori	r23, 0xF0	; 240
    9a56:	6d 6b       	ori	r22, 0xBD	; 189
    9a58:	6a 68       	ori	r22, 0x8A	; 138
    9a5a:	66 64       	ori	r22, 0x46	; 70
    9a5c:	62 60       	ori	r22, 0x02	; 2
    9a5e:	5e 5c       	subi	r21, 0xCE	; 206
    9a60:	5a 58       	subi	r21, 0x8A	; 138
    9a62:	55 53       	subi	r21, 0x35	; 53
    9a64:	51 4e       	sbci	r21, 0xE1	; 225
    9a66:	4c 49       	sbci	r20, 0x9C	; 156
    9a68:	47 44       	sbci	r20, 0x47	; 71
    9a6a:	41 3f       	cpi	r20, 0xF1	; 241
    9a6c:	3c 39       	cpi	r19, 0x9C	; 156
    9a6e:	36 33       	cpi	r19, 0x36	; 54
    9a70:	31 2e       	mov	r3, r17
    9a72:	2b 28       	or	r2, r11
    9a74:	25 22       	and	r2, r21
    9a76:	1f 1c       	adc	r1, r15
    9a78:	19 16       	cp	r1, r25
    9a7a:	13 10       	cpse	r1, r3
    9a7c:	0c 09       	sbc	r16, r12
    9a7e:	06 03       	mulsu	r16, r22
    9a80:	00 fd       	sbrc	r16, 0
    9a82:	fa f7       	brpl	.-2      	; 0x9a82 <waves+0x82>
    9a84:	f4 f0       	brlt	.+60     	; 0x9ac2 <waves+0xc2>
    9a86:	ed ea       	ldi	r30, 0xAD	; 173
    9a88:	e7 e4       	ldi	r30, 0x47	; 71
    9a8a:	e1 de       	rcall	.-574    	; 0x984e <steptable+0x46>
    9a8c:	db d8       	rcall	.-3658   	; 0x8c44 <wdt_randomize+0xe>
    9a8e:	d5 d2       	rcall	.+1450   	; 0xa03a <waves+0x63a>
    9a90:	cf cd       	rjmp	.-1122   	; 0x9630 <ProcessMusic+0x30c>
    9a92:	ca c7       	rjmp	.+3988   	; 0xaa28 <LBGetJoyPadState+0x3e>
    9a94:	c4 c1       	rjmp	.+904    	; 0x9e1e <waves+0x41e>
    9a96:	bf bc       	out	0x2f, r11	; 47
    9a98:	b9 b7       	in	r27, 0x39	; 57
    9a9a:	b4 b2       	in	r11, 0x14	; 20
    9a9c:	af ad       	ldd	r26, Y+63	; 0x3f
    9a9e:	ab a8       	ldd	r10, Y+51	; 0x33
    9aa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    9aa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    9aa4:	9e 9c       	mul	r9, r14
    9aa6:	9a 98       	cbi	0x13, 2	; 19
    9aa8:	96 95       	lsr	r25
    9aaa:	93 91       	.word	0x9193	; ????
    9aac:	90 8f       	std	Z+24, r25	; 0x18
    9aae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9ab0:	8b 8a       	std	Y+19, r8	; 0x13
    9ab2:	88 87       	std	Y+8, r24	; 0x08
    9ab4:	86 86       	std	Z+14, r8	; 0x0e
    9ab6:	85 84       	ldd	r8, Z+13	; 0x0d
    9ab8:	83 83       	std	Z+3, r24	; 0x03
    9aba:	82 82       	std	Z+2, r8	; 0x02
    9abc:	82 81       	ldd	r24, Z+2	; 0x02
    9abe:	81 81       	ldd	r24, Z+1	; 0x01
    9ac0:	81 81       	ldd	r24, Z+1	; 0x01
    9ac2:	81 81       	ldd	r24, Z+1	; 0x01
    9ac4:	82 82       	std	Z+2, r8	; 0x02
    9ac6:	82 83       	std	Z+2, r24	; 0x02
    9ac8:	83 84       	ldd	r8, Z+11	; 0x0b
    9aca:	85 86       	std	Z+13, r8	; 0x0d
    9acc:	86 87       	std	Z+14, r24	; 0x0e
    9ace:	88 8a       	std	Y+16, r8	; 0x10
    9ad0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9ad2:	8d 8f       	std	Y+29, r24	; 0x1d
    9ad4:	90 91 93 95 	lds	r25, 0x9593
    9ad8:	96 98       	cbi	0x12, 6	; 18
    9ada:	9a 9c       	mul	r9, r10
    9adc:	9e a0       	ldd	r9, Y+38	; 0x26
    9ade:	a2 a4       	ldd	r10, Z+42	; 0x2a
    9ae0:	a6 a8       	ldd	r10, Z+54	; 0x36
    9ae2:	ab ad       	ldd	r26, Y+59	; 0x3b
    9ae4:	af b2       	in	r10, 0x1f	; 31
    9ae6:	b4 b7       	in	r27, 0x34	; 52
    9ae8:	b9 bc       	out	0x29, r11	; 41
    9aea:	bf c1       	rjmp	.+894    	; 0x9e6a <waves+0x46a>
    9aec:	c4 c7       	rjmp	.+3976   	; 0xaa76 <LBGetJoyPadState+0x8c>
    9aee:	ca cd       	rjmp	.-1132   	; 0x9684 <ProcessMusic+0x360>
    9af0:	cf d2       	rcall	.+1438   	; 0xa090 <waves+0x690>
    9af2:	d5 d8       	rcall	.-3670   	; 0x8c9e <__vector_8+0x2a>
    9af4:	db de       	rcall	.-586    	; 0x98ac <steptable+0xa4>
    9af6:	e1 e4       	ldi	r30, 0x41	; 65
    9af8:	e7 ea       	ldi	r30, 0xA7	; 167
    9afa:	ed f0       	brhs	.+58     	; 0x9b36 <waves+0x136>
    9afc:	f4 f7       	brge	.-4      	; 0x9afa <waves+0xfa>
    9afe:	fa fd       	.word	0xfdfa	; ????
    9b00:	80 81       	ld	r24, Z
    9b02:	82 83       	std	Z+2, r24	; 0x02
    9b04:	84 85       	ldd	r24, Z+12	; 0x0c
    9b06:	86 87       	std	Z+14, r24	; 0x0e
    9b08:	88 89       	ldd	r24, Y+16	; 0x10
    9b0a:	8a 8b       	std	Y+18, r24	; 0x12
    9b0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9b0e:	8e 8f       	std	Y+30, r24	; 0x1e
    9b10:	90 91 92 93 	lds	r25, 0x9392
    9b14:	94 95       	.word	0x9594	; ????
    9b16:	96 97       	sbiw	r26, 0x26	; 38
    9b18:	98 99       	sbic	0x13, 0	; 19
    9b1a:	9a 9b       	sbis	0x13, 2	; 19
    9b1c:	9c 9d       	mul	r25, r12
    9b1e:	9e 9f       	mul	r25, r30
    9b20:	a0 a1       	ldd	r26, Z+32	; 0x20
    9b22:	a2 a3       	std	Z+34, r26	; 0x22
    9b24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9b26:	a6 a7       	std	Z+46, r26	; 0x2e
    9b28:	a8 a9       	ldd	r26, Y+48	; 0x30
    9b2a:	aa ab       	std	Y+50, r26	; 0x32
    9b2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    9b2e:	ae af       	std	Y+62, r26	; 0x3e
    9b30:	b0 b1       	in	r27, 0x00	; 0
    9b32:	b2 b3       	in	r27, 0x12	; 18
    9b34:	b4 b5       	in	r27, 0x24	; 36
    9b36:	b6 b7       	in	r27, 0x36	; 54
    9b38:	b8 b9       	out	0x08, r27	; 8
    9b3a:	ba bb       	out	0x1a, r27	; 26
    9b3c:	bc bd       	out	0x2c, r27	; 44
    9b3e:	be bf       	out	0x3e, r27	; 62
    9b40:	c0 c1       	rjmp	.+896    	; 0x9ec2 <waves+0x4c2>
    9b42:	c2 c3       	rjmp	.+1924   	; 0xa2c8 <waves+0x8c8>
    9b44:	c4 c5       	rjmp	.+2952   	; 0xa6ce <InitializeVideoMode+0x10>
    9b46:	c6 c7       	rjmp	.+3980   	; 0xaad4 <LBPrintStr+0x3c>
    9b48:	c8 c9       	rjmp	.-3184   	; 0x8eda <EepromReadBlock+0x34>
    9b4a:	ca cb       	rjmp	.-2156   	; 0x92e0 <TriggerNote+0x2a>
    9b4c:	cc cd       	rjmp	.-1128   	; 0x96e6 <ProcessMusic+0x3c2>
    9b4e:	ce cf       	rjmp	.-100    	; 0x9aec <waves+0xec>
    9b50:	d0 d1       	rcall	.+928    	; 0x9ef2 <waves+0x4f2>
    9b52:	d2 d3       	rcall	.+1956   	; 0xa2f8 <waves+0x8f8>
    9b54:	d4 d5       	rcall	.+2984   	; 0xa6fe <DrawMap2+0x2c>
    9b56:	d6 d7       	rcall	.+4012   	; 0xab04 <LBCollides+0xa>
    9b58:	d8 d9       	rcall	.-3152   	; 0x8f0a <EepromReadBlock+0x64>
    9b5a:	da db       	rcall	.-2124   	; 0x9310 <TriggerNote+0x5a>
    9b5c:	dc dd       	rcall	.-1096   	; 0x9716 <ProcessMusic+0x3f2>
    9b5e:	de df       	rcall	.-68     	; 0x9b1c <waves+0x11c>
    9b60:	e0 e1       	ldi	r30, 0x10	; 16
    9b62:	e2 e3       	ldi	r30, 0x32	; 50
    9b64:	e4 e5       	ldi	r30, 0x54	; 84
    9b66:	e6 e7       	ldi	r30, 0x76	; 118
    9b68:	e8 e9       	ldi	r30, 0x98	; 152
    9b6a:	ea eb       	ldi	r30, 0xBA	; 186
    9b6c:	ec ed       	ldi	r30, 0xDC	; 220
    9b6e:	ee ef       	ldi	r30, 0xFE	; 254
    9b70:	f0 f1       	brcs	.+124    	; 0x9bee <waves+0x1ee>
    9b72:	f2 f3       	brmi	.-4      	; 0x9b70 <waves+0x170>
    9b74:	f4 f5       	brge	.+124    	; 0x9bf2 <waves+0x1f2>
    9b76:	f6 f7       	brtc	.-4      	; 0x9b74 <waves+0x174>
    9b78:	f8 f9       	.word	0xf9f8	; ????
    9b7a:	fa fb       	.word	0xfbfa	; ????
    9b7c:	fc fd       	.word	0xfdfc	; ????
    9b7e:	fe ff       	.word	0xfffe	; ????
    9b80:	00 01       	movw	r0, r0
    9b82:	02 03       	mulsu	r16, r18
    9b84:	04 05       	cpc	r16, r4
    9b86:	06 07       	cpc	r16, r22
    9b88:	08 09       	sbc	r16, r8
    9b8a:	0a 0b       	sbc	r16, r26
    9b8c:	0c 0d       	add	r16, r12
    9b8e:	0e 0f       	add	r16, r30
    9b90:	10 11       	cpse	r17, r0
    9b92:	12 13       	cpse	r17, r18
    9b94:	14 15       	cp	r17, r4
    9b96:	16 17       	cp	r17, r22
    9b98:	18 19       	sub	r17, r8
    9b9a:	1a 1b       	sub	r17, r26
    9b9c:	1c 1d       	adc	r17, r12
    9b9e:	1e 1f       	adc	r17, r30
    9ba0:	20 21       	and	r18, r0
    9ba2:	22 23       	and	r18, r18
    9ba4:	24 25       	eor	r18, r4
    9ba6:	26 27       	eor	r18, r22
    9ba8:	28 29       	or	r18, r8
    9baa:	2a 2b       	or	r18, r26
    9bac:	2c 2d       	mov	r18, r12
    9bae:	2e 2f       	mov	r18, r30
    9bb0:	30 31       	cpi	r19, 0x10	; 16
    9bb2:	32 33       	cpi	r19, 0x32	; 50
    9bb4:	34 35       	cpi	r19, 0x54	; 84
    9bb6:	36 37       	cpi	r19, 0x76	; 118
    9bb8:	38 39       	cpi	r19, 0x98	; 152
    9bba:	3a 3b       	cpi	r19, 0xBA	; 186
    9bbc:	3c 3d       	cpi	r19, 0xDC	; 220
    9bbe:	3e 3f       	cpi	r19, 0xFE	; 254
    9bc0:	40 41       	sbci	r20, 0x10	; 16
    9bc2:	42 43       	sbci	r20, 0x32	; 50
    9bc4:	44 45       	sbci	r20, 0x54	; 84
    9bc6:	46 47       	sbci	r20, 0x76	; 118
    9bc8:	48 49       	sbci	r20, 0x98	; 152
    9bca:	4a 4b       	sbci	r20, 0xBA	; 186
    9bcc:	4c 4d       	sbci	r20, 0xDC	; 220
    9bce:	4e 4f       	sbci	r20, 0xFE	; 254
    9bd0:	50 51       	subi	r21, 0x10	; 16
    9bd2:	52 53       	subi	r21, 0x32	; 50
    9bd4:	54 55       	subi	r21, 0x54	; 84
    9bd6:	56 57       	subi	r21, 0x76	; 118
    9bd8:	58 59       	subi	r21, 0x98	; 152
    9bda:	5a 5b       	subi	r21, 0xBA	; 186
    9bdc:	5c 5d       	subi	r21, 0xDC	; 220
    9bde:	5e 5f       	subi	r21, 0xFE	; 254
    9be0:	60 61       	ori	r22, 0x10	; 16
    9be2:	62 63       	ori	r22, 0x32	; 50
    9be4:	64 65       	ori	r22, 0x54	; 84
    9be6:	66 67       	ori	r22, 0x76	; 118
    9be8:	68 69       	ori	r22, 0x98	; 152
    9bea:	6a 6b       	ori	r22, 0xBA	; 186
    9bec:	6c 6d       	ori	r22, 0xDC	; 220
    9bee:	6e 6f       	ori	r22, 0xFE	; 254
    9bf0:	70 71       	andi	r23, 0x10	; 16
    9bf2:	72 73       	andi	r23, 0x32	; 50
    9bf4:	74 75       	andi	r23, 0x54	; 84
    9bf6:	76 77       	andi	r23, 0x76	; 118
    9bf8:	78 79       	andi	r23, 0x98	; 152
    9bfa:	7a 7b       	andi	r23, 0xBA	; 186
    9bfc:	7c 7d       	andi	r23, 0xDC	; 220
    9bfe:	7e 7f       	andi	r23, 0xFE	; 254
    9c00:	00 02       	muls	r16, r16
    9c02:	04 06       	cpc	r0, r20
    9c04:	08 0a       	sbc	r0, r24
    9c06:	0c 0e       	add	r0, r28
    9c08:	10 12       	cpse	r1, r16
    9c0a:	14 16       	cp	r1, r20
    9c0c:	18 1a       	sub	r1, r24
    9c0e:	1c 1e       	adc	r1, r28
    9c10:	20 22       	and	r2, r16
    9c12:	24 26       	eor	r2, r20
    9c14:	28 2a       	or	r2, r24
    9c16:	2c 2e       	mov	r2, r28
    9c18:	30 32       	cpi	r19, 0x20	; 32
    9c1a:	34 36       	cpi	r19, 0x64	; 100
    9c1c:	38 3a       	cpi	r19, 0xA8	; 168
    9c1e:	3c 3e       	cpi	r19, 0xEC	; 236
    9c20:	40 42       	sbci	r20, 0x20	; 32
    9c22:	44 46       	sbci	r20, 0x64	; 100
    9c24:	48 4a       	sbci	r20, 0xA8	; 168
    9c26:	4c 4e       	sbci	r20, 0xEC	; 236
    9c28:	50 52       	subi	r21, 0x20	; 32
    9c2a:	54 56       	subi	r21, 0x64	; 100
    9c2c:	58 5a       	subi	r21, 0xA8	; 168
    9c2e:	5c 5e       	subi	r21, 0xEC	; 236
    9c30:	60 62       	ori	r22, 0x20	; 32
    9c32:	64 66       	ori	r22, 0x64	; 100
    9c34:	68 6a       	ori	r22, 0xA8	; 168
    9c36:	6c 6e       	ori	r22, 0xEC	; 236
    9c38:	70 72       	andi	r23, 0x20	; 32
    9c3a:	74 76       	andi	r23, 0x64	; 100
    9c3c:	78 7a       	andi	r23, 0xA8	; 168
    9c3e:	7c 7e       	andi	r23, 0xEC	; 236
    9c40:	7f 7d       	andi	r23, 0xDF	; 223
    9c42:	7b 79       	andi	r23, 0x9B	; 155
    9c44:	77 75       	andi	r23, 0x57	; 87
    9c46:	73 71       	andi	r23, 0x13	; 19
    9c48:	6f 6d       	ori	r22, 0xDF	; 223
    9c4a:	6b 69       	ori	r22, 0x9B	; 155
    9c4c:	67 65       	ori	r22, 0x57	; 87
    9c4e:	63 61       	ori	r22, 0x13	; 19
    9c50:	5f 5d       	subi	r21, 0xDF	; 223
    9c52:	5b 59       	subi	r21, 0x9B	; 155
    9c54:	57 55       	subi	r21, 0x57	; 87
    9c56:	53 51       	subi	r21, 0x13	; 19
    9c58:	4f 4d       	sbci	r20, 0xDF	; 223
    9c5a:	4b 49       	sbci	r20, 0x9B	; 155
    9c5c:	47 45       	sbci	r20, 0x57	; 87
    9c5e:	43 41       	sbci	r20, 0x13	; 19
    9c60:	3f 3d       	cpi	r19, 0xDF	; 223
    9c62:	3b 39       	cpi	r19, 0x9B	; 155
    9c64:	37 35       	cpi	r19, 0x57	; 87
    9c66:	33 31       	cpi	r19, 0x13	; 19
    9c68:	2f 2d       	mov	r18, r15
    9c6a:	2b 29       	or	r18, r11
    9c6c:	27 25       	eor	r18, r7
    9c6e:	23 21       	and	r18, r3
    9c70:	1f 1d       	adc	r17, r15
    9c72:	1b 19       	sub	r17, r11
    9c74:	17 15       	cp	r17, r7
    9c76:	13 11       	cpse	r17, r3
    9c78:	0f 0d       	add	r16, r15
    9c7a:	0b 09       	sbc	r16, r11
    9c7c:	07 05       	cpc	r16, r7
    9c7e:	03 01       	movw	r0, r6
    9c80:	ff fd       	.word	0xfdff	; ????
    9c82:	fb f9       	.word	0xf9fb	; ????
    9c84:	f7 f5       	brid	.+124    	; 0x9d02 <waves+0x302>
    9c86:	f3 f1       	brvs	.+124    	; 0x9d04 <waves+0x304>
    9c88:	ef ed       	ldi	r30, 0xDF	; 223
    9c8a:	eb e9       	ldi	r30, 0x9B	; 155
    9c8c:	e7 e5       	ldi	r30, 0x57	; 87
    9c8e:	e3 e1       	ldi	r30, 0x13	; 19
    9c90:	df dd       	rcall	.-1090   	; 0x9850 <steptable+0x48>
    9c92:	db d9       	rcall	.-3146   	; 0x904a <PatchCommand08+0x2e>
    9c94:	d7 d5       	rcall	.+2990   	; 0xa844 <DisplayLogo+0x8>
    9c96:	d3 d1       	rcall	.+934    	; 0xa03e <waves+0x63e>
    9c98:	cf cd       	rjmp	.-1122   	; 0x9838 <steptable+0x30>
    9c9a:	cb c9       	rjmp	.-3178   	; 0x9032 <PatchCommand08+0x16>
    9c9c:	c7 c5       	rjmp	.+2958   	; 0xa82c <WaitVsync+0x1e>
    9c9e:	c3 c1       	rjmp	.+902    	; 0xa026 <waves+0x626>
    9ca0:	bf bd       	out	0x2f, r27	; 47
    9ca2:	bb b9       	out	0x0b, r27	; 11
    9ca4:	b7 b5       	in	r27, 0x27	; 39
    9ca6:	b3 b1       	in	r27, 0x03	; 3
    9ca8:	af ad       	ldd	r26, Y+63	; 0x3f
    9caa:	ab a9       	ldd	r26, Y+51	; 0x33
    9cac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9cae:	a3 a1       	ldd	r26, Z+35	; 0x23
    9cb0:	9f 9d       	mul	r25, r15
    9cb2:	9b 99       	sbic	0x13, 3	; 19
    9cb4:	97 95       	ror	r25
    9cb6:	93 91       	.word	0x9193	; ????
    9cb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9cba:	8b 89       	ldd	r24, Y+19	; 0x13
    9cbc:	87 85       	ldd	r24, Z+15	; 0x0f
    9cbe:	83 81       	ldd	r24, Z+3	; 0x03
    9cc0:	80 82       	st	Z, r8
    9cc2:	84 86       	std	Z+12, r8	; 0x0c
    9cc4:	88 8a       	std	Y+16, r8	; 0x10
    9cc6:	8c 8e       	std	Y+28, r8	; 0x1c
    9cc8:	90 92 94 96 	sts	0x9694, r9
    9ccc:	98 9a       	sbi	0x13, 0	; 19
    9cce:	9c 9e       	mul	r9, r28
    9cd0:	a0 a2       	std	Z+32, r10	; 0x20
    9cd2:	a4 a6       	std	Z+44, r10	; 0x2c
    9cd4:	a8 aa       	std	Y+48, r10	; 0x30
    9cd6:	ac ae       	std	Y+60, r10	; 0x3c
    9cd8:	b0 b2       	in	r11, 0x10	; 16
    9cda:	b4 b6       	in	r11, 0x34	; 52
    9cdc:	b8 ba       	out	0x18, r11	; 24
    9cde:	bc be       	out	0x3c, r11	; 60
    9ce0:	c0 c2       	rjmp	.+1408   	; 0xa262 <waves+0x862>
    9ce2:	c4 c6       	rjmp	.+3464   	; 0xaa6c <LBGetJoyPadState+0x82>
    9ce4:	c8 ca       	rjmp	.-2672   	; 0x9276 <TriggerFx+0x3e>
    9ce6:	cc ce       	rjmp	.-616    	; 0x9a80 <waves+0x80>
    9ce8:	d0 d2       	rcall	.+1440   	; 0xa28a <waves+0x88a>
    9cea:	d4 d6       	rcall	.+3496   	; 0xaa94 <LBCopyChars+0x14>
    9cec:	d8 da       	rcall	.-2640   	; 0x929e <TriggerFx+0x66>
    9cee:	dc de       	rcall	.-584    	; 0x9aa8 <waves+0xa8>
    9cf0:	e0 e2       	ldi	r30, 0x20	; 32
    9cf2:	e4 e6       	ldi	r30, 0x64	; 100
    9cf4:	e8 ea       	ldi	r30, 0xA8	; 168
    9cf6:	ec ee       	ldi	r30, 0xEC	; 236
    9cf8:	f0 f2       	brcs	.-68     	; 0x9cb6 <waves+0x2b6>
    9cfa:	f4 f6       	brge	.-68     	; 0x9cb8 <waves+0x2b8>
    9cfc:	f8 fa       	.word	0xfaf8	; ????
    9cfe:	fc fe       	.word	0xfefc	; ????
    9d00:	7f 7f       	andi	r23, 0xFF	; 255
    9d02:	7f 7f       	andi	r23, 0xFF	; 255
    9d04:	7f 7f       	andi	r23, 0xFF	; 255
    9d06:	7f 7f       	andi	r23, 0xFF	; 255
    9d08:	7f 7f       	andi	r23, 0xFF	; 255
    9d0a:	7f 7f       	andi	r23, 0xFF	; 255
    9d0c:	7f 7f       	andi	r23, 0xFF	; 255
    9d0e:	7f 7f       	andi	r23, 0xFF	; 255
    9d10:	7f 7f       	andi	r23, 0xFF	; 255
    9d12:	7f 7f       	andi	r23, 0xFF	; 255
    9d14:	7f 7f       	andi	r23, 0xFF	; 255
    9d16:	7f 7f       	andi	r23, 0xFF	; 255
    9d18:	7f 7f       	andi	r23, 0xFF	; 255
    9d1a:	7f 7f       	andi	r23, 0xFF	; 255
    9d1c:	7f 7f       	andi	r23, 0xFF	; 255
    9d1e:	7f 7f       	andi	r23, 0xFF	; 255
    9d20:	7f 7f       	andi	r23, 0xFF	; 255
    9d22:	7f 7f       	andi	r23, 0xFF	; 255
    9d24:	7f 7f       	andi	r23, 0xFF	; 255
    9d26:	7f 7f       	andi	r23, 0xFF	; 255
    9d28:	7f 7f       	andi	r23, 0xFF	; 255
    9d2a:	7f 7f       	andi	r23, 0xFF	; 255
    9d2c:	7f 7f       	andi	r23, 0xFF	; 255
    9d2e:	7f 7f       	andi	r23, 0xFF	; 255
    9d30:	7f 7f       	andi	r23, 0xFF	; 255
    9d32:	7f 7f       	andi	r23, 0xFF	; 255
    9d34:	7f 7f       	andi	r23, 0xFF	; 255
    9d36:	7f 7f       	andi	r23, 0xFF	; 255
    9d38:	7f 7f       	andi	r23, 0xFF	; 255
    9d3a:	7f 7f       	andi	r23, 0xFF	; 255
    9d3c:	7f 7f       	andi	r23, 0xFF	; 255
    9d3e:	7f 7f       	andi	r23, 0xFF	; 255
    9d40:	80 80       	ld	r8, Z
    9d42:	80 80       	ld	r8, Z
    9d44:	80 80       	ld	r8, Z
    9d46:	80 80       	ld	r8, Z
    9d48:	80 80       	ld	r8, Z
    9d4a:	80 80       	ld	r8, Z
    9d4c:	80 80       	ld	r8, Z
    9d4e:	80 80       	ld	r8, Z
    9d50:	80 80       	ld	r8, Z
    9d52:	80 80       	ld	r8, Z
    9d54:	80 80       	ld	r8, Z
    9d56:	80 80       	ld	r8, Z
    9d58:	80 80       	ld	r8, Z
    9d5a:	80 80       	ld	r8, Z
    9d5c:	80 80       	ld	r8, Z
    9d5e:	80 80       	ld	r8, Z
    9d60:	80 80       	ld	r8, Z
    9d62:	80 80       	ld	r8, Z
    9d64:	80 80       	ld	r8, Z
    9d66:	80 80       	ld	r8, Z
    9d68:	80 80       	ld	r8, Z
    9d6a:	80 80       	ld	r8, Z
    9d6c:	80 80       	ld	r8, Z
    9d6e:	80 80       	ld	r8, Z
    9d70:	80 80       	ld	r8, Z
    9d72:	80 80       	ld	r8, Z
    9d74:	80 80       	ld	r8, Z
    9d76:	80 80       	ld	r8, Z
    9d78:	80 80       	ld	r8, Z
    9d7a:	80 80       	ld	r8, Z
    9d7c:	80 80       	ld	r8, Z
    9d7e:	80 80       	ld	r8, Z
    9d80:	80 80       	ld	r8, Z
    9d82:	80 80       	ld	r8, Z
    9d84:	80 80       	ld	r8, Z
    9d86:	80 80       	ld	r8, Z
    9d88:	80 80       	ld	r8, Z
    9d8a:	80 80       	ld	r8, Z
    9d8c:	80 80       	ld	r8, Z
    9d8e:	80 80       	ld	r8, Z
    9d90:	80 80       	ld	r8, Z
    9d92:	80 80       	ld	r8, Z
    9d94:	80 80       	ld	r8, Z
    9d96:	80 80       	ld	r8, Z
    9d98:	80 80       	ld	r8, Z
    9d9a:	80 80       	ld	r8, Z
    9d9c:	80 80       	ld	r8, Z
    9d9e:	80 80       	ld	r8, Z
    9da0:	80 80       	ld	r8, Z
    9da2:	80 80       	ld	r8, Z
    9da4:	80 80       	ld	r8, Z
    9da6:	80 80       	ld	r8, Z
    9da8:	80 80       	ld	r8, Z
    9daa:	80 80       	ld	r8, Z
    9dac:	80 80       	ld	r8, Z
    9dae:	80 80       	ld	r8, Z
    9db0:	80 80       	ld	r8, Z
    9db2:	80 80       	ld	r8, Z
    9db4:	80 80       	ld	r8, Z
    9db6:	80 80       	ld	r8, Z
    9db8:	80 80       	ld	r8, Z
    9dba:	80 80       	ld	r8, Z
    9dbc:	80 80       	ld	r8, Z
    9dbe:	80 80       	ld	r8, Z
    9dc0:	80 80       	ld	r8, Z
    9dc2:	80 80       	ld	r8, Z
    9dc4:	80 80       	ld	r8, Z
    9dc6:	80 80       	ld	r8, Z
    9dc8:	80 80       	ld	r8, Z
    9dca:	80 80       	ld	r8, Z
    9dcc:	80 80       	ld	r8, Z
    9dce:	80 80       	ld	r8, Z
    9dd0:	80 80       	ld	r8, Z
    9dd2:	80 80       	ld	r8, Z
    9dd4:	80 80       	ld	r8, Z
    9dd6:	80 80       	ld	r8, Z
    9dd8:	80 80       	ld	r8, Z
    9dda:	80 80       	ld	r8, Z
    9ddc:	80 80       	ld	r8, Z
    9dde:	80 80       	ld	r8, Z
    9de0:	80 80       	ld	r8, Z
    9de2:	80 80       	ld	r8, Z
    9de4:	80 80       	ld	r8, Z
    9de6:	80 80       	ld	r8, Z
    9de8:	80 80       	ld	r8, Z
    9dea:	80 80       	ld	r8, Z
    9dec:	80 80       	ld	r8, Z
    9dee:	80 80       	ld	r8, Z
    9df0:	80 80       	ld	r8, Z
    9df2:	80 80       	ld	r8, Z
    9df4:	80 80       	ld	r8, Z
    9df6:	80 80       	ld	r8, Z
    9df8:	80 80       	ld	r8, Z
    9dfa:	80 80       	ld	r8, Z
    9dfc:	80 80       	ld	r8, Z
    9dfe:	80 80       	ld	r8, Z
    9e00:	7f 7f       	andi	r23, 0xFF	; 255
    9e02:	7f 7f       	andi	r23, 0xFF	; 255
    9e04:	7f 7f       	andi	r23, 0xFF	; 255
    9e06:	7f 7f       	andi	r23, 0xFF	; 255
    9e08:	7f 7f       	andi	r23, 0xFF	; 255
    9e0a:	7f 7f       	andi	r23, 0xFF	; 255
    9e0c:	7f 7f       	andi	r23, 0xFF	; 255
    9e0e:	7f 7f       	andi	r23, 0xFF	; 255
    9e10:	7f 7f       	andi	r23, 0xFF	; 255
    9e12:	7f 7f       	andi	r23, 0xFF	; 255
    9e14:	7f 7f       	andi	r23, 0xFF	; 255
    9e16:	7f 7f       	andi	r23, 0xFF	; 255
    9e18:	7f 7f       	andi	r23, 0xFF	; 255
    9e1a:	7f 7f       	andi	r23, 0xFF	; 255
    9e1c:	7f 7f       	andi	r23, 0xFF	; 255
    9e1e:	7f 7f       	andi	r23, 0xFF	; 255
    9e20:	7f 7f       	andi	r23, 0xFF	; 255
    9e22:	7f 7f       	andi	r23, 0xFF	; 255
    9e24:	7f 7f       	andi	r23, 0xFF	; 255
    9e26:	7f 7f       	andi	r23, 0xFF	; 255
    9e28:	7f 7f       	andi	r23, 0xFF	; 255
    9e2a:	7f 7f       	andi	r23, 0xFF	; 255
    9e2c:	7f 7f       	andi	r23, 0xFF	; 255
    9e2e:	7f 7f       	andi	r23, 0xFF	; 255
    9e30:	7f 7f       	andi	r23, 0xFF	; 255
    9e32:	7f 7f       	andi	r23, 0xFF	; 255
    9e34:	7f 7f       	andi	r23, 0xFF	; 255
    9e36:	7f 7f       	andi	r23, 0xFF	; 255
    9e38:	7f 7f       	andi	r23, 0xFF	; 255
    9e3a:	7f 7f       	andi	r23, 0xFF	; 255
    9e3c:	7f 7f       	andi	r23, 0xFF	; 255
    9e3e:	7f 7f       	andi	r23, 0xFF	; 255
    9e40:	7f 7f       	andi	r23, 0xFF	; 255
    9e42:	7f 7f       	andi	r23, 0xFF	; 255
    9e44:	7f 7f       	andi	r23, 0xFF	; 255
    9e46:	7f 7f       	andi	r23, 0xFF	; 255
    9e48:	7f 7f       	andi	r23, 0xFF	; 255
    9e4a:	7f 7f       	andi	r23, 0xFF	; 255
    9e4c:	7f 7f       	andi	r23, 0xFF	; 255
    9e4e:	7f 7f       	andi	r23, 0xFF	; 255
    9e50:	7f 7f       	andi	r23, 0xFF	; 255
    9e52:	7f 7f       	andi	r23, 0xFF	; 255
    9e54:	7f 7f       	andi	r23, 0xFF	; 255
    9e56:	7f 7f       	andi	r23, 0xFF	; 255
    9e58:	7f 7f       	andi	r23, 0xFF	; 255
    9e5a:	7f 7f       	andi	r23, 0xFF	; 255
    9e5c:	7f 7f       	andi	r23, 0xFF	; 255
    9e5e:	7f 7f       	andi	r23, 0xFF	; 255
    9e60:	7f 7f       	andi	r23, 0xFF	; 255
    9e62:	7f 7f       	andi	r23, 0xFF	; 255
    9e64:	7f 7f       	andi	r23, 0xFF	; 255
    9e66:	7f 7f       	andi	r23, 0xFF	; 255
    9e68:	7f 7f       	andi	r23, 0xFF	; 255
    9e6a:	7f 7f       	andi	r23, 0xFF	; 255
    9e6c:	7f 7f       	andi	r23, 0xFF	; 255
    9e6e:	7f 7f       	andi	r23, 0xFF	; 255
    9e70:	7f 7f       	andi	r23, 0xFF	; 255
    9e72:	7f 7f       	andi	r23, 0xFF	; 255
    9e74:	7f 7f       	andi	r23, 0xFF	; 255
    9e76:	7f 7f       	andi	r23, 0xFF	; 255
    9e78:	7f 7f       	andi	r23, 0xFF	; 255
    9e7a:	7f 7f       	andi	r23, 0xFF	; 255
    9e7c:	7f 7f       	andi	r23, 0xFF	; 255
    9e7e:	7f 7f       	andi	r23, 0xFF	; 255
    9e80:	80 80       	ld	r8, Z
    9e82:	80 80       	ld	r8, Z
    9e84:	80 80       	ld	r8, Z
    9e86:	80 80       	ld	r8, Z
    9e88:	80 80       	ld	r8, Z
    9e8a:	80 80       	ld	r8, Z
    9e8c:	80 80       	ld	r8, Z
    9e8e:	80 80       	ld	r8, Z
    9e90:	80 80       	ld	r8, Z
    9e92:	80 80       	ld	r8, Z
    9e94:	80 80       	ld	r8, Z
    9e96:	80 80       	ld	r8, Z
    9e98:	80 80       	ld	r8, Z
    9e9a:	80 80       	ld	r8, Z
    9e9c:	80 80       	ld	r8, Z
    9e9e:	80 80       	ld	r8, Z
    9ea0:	80 80       	ld	r8, Z
    9ea2:	80 80       	ld	r8, Z
    9ea4:	80 80       	ld	r8, Z
    9ea6:	80 80       	ld	r8, Z
    9ea8:	80 80       	ld	r8, Z
    9eaa:	80 80       	ld	r8, Z
    9eac:	80 80       	ld	r8, Z
    9eae:	80 80       	ld	r8, Z
    9eb0:	80 80       	ld	r8, Z
    9eb2:	80 80       	ld	r8, Z
    9eb4:	80 80       	ld	r8, Z
    9eb6:	80 80       	ld	r8, Z
    9eb8:	80 80       	ld	r8, Z
    9eba:	80 80       	ld	r8, Z
    9ebc:	80 80       	ld	r8, Z
    9ebe:	80 80       	ld	r8, Z
    9ec0:	80 80       	ld	r8, Z
    9ec2:	80 80       	ld	r8, Z
    9ec4:	80 80       	ld	r8, Z
    9ec6:	80 80       	ld	r8, Z
    9ec8:	80 80       	ld	r8, Z
    9eca:	80 80       	ld	r8, Z
    9ecc:	80 80       	ld	r8, Z
    9ece:	80 80       	ld	r8, Z
    9ed0:	80 80       	ld	r8, Z
    9ed2:	80 80       	ld	r8, Z
    9ed4:	80 80       	ld	r8, Z
    9ed6:	80 80       	ld	r8, Z
    9ed8:	80 80       	ld	r8, Z
    9eda:	80 80       	ld	r8, Z
    9edc:	80 80       	ld	r8, Z
    9ede:	80 80       	ld	r8, Z
    9ee0:	80 80       	ld	r8, Z
    9ee2:	80 80       	ld	r8, Z
    9ee4:	80 80       	ld	r8, Z
    9ee6:	80 80       	ld	r8, Z
    9ee8:	80 80       	ld	r8, Z
    9eea:	80 80       	ld	r8, Z
    9eec:	80 80       	ld	r8, Z
    9eee:	80 80       	ld	r8, Z
    9ef0:	80 80       	ld	r8, Z
    9ef2:	80 80       	ld	r8, Z
    9ef4:	80 80       	ld	r8, Z
    9ef6:	80 80       	ld	r8, Z
    9ef8:	80 80       	ld	r8, Z
    9efa:	80 80       	ld	r8, Z
    9efc:	80 80       	ld	r8, Z
    9efe:	80 80       	ld	r8, Z
    9f00:	7f 7f       	andi	r23, 0xFF	; 255
    9f02:	7f 7f       	andi	r23, 0xFF	; 255
    9f04:	7f 7f       	andi	r23, 0xFF	; 255
    9f06:	7f 7f       	andi	r23, 0xFF	; 255
    9f08:	7f 7f       	andi	r23, 0xFF	; 255
    9f0a:	7f 7f       	andi	r23, 0xFF	; 255
    9f0c:	7f 7f       	andi	r23, 0xFF	; 255
    9f0e:	7f 7f       	andi	r23, 0xFF	; 255
    9f10:	7f 7f       	andi	r23, 0xFF	; 255
    9f12:	7f 7f       	andi	r23, 0xFF	; 255
    9f14:	7f 7f       	andi	r23, 0xFF	; 255
    9f16:	7f 7f       	andi	r23, 0xFF	; 255
    9f18:	7f 7f       	andi	r23, 0xFF	; 255
    9f1a:	7f 7f       	andi	r23, 0xFF	; 255
    9f1c:	7f 7f       	andi	r23, 0xFF	; 255
    9f1e:	7f 7f       	andi	r23, 0xFF	; 255
    9f20:	7f 7f       	andi	r23, 0xFF	; 255
    9f22:	7f 7f       	andi	r23, 0xFF	; 255
    9f24:	7f 7f       	andi	r23, 0xFF	; 255
    9f26:	7f 7f       	andi	r23, 0xFF	; 255
    9f28:	7f 7f       	andi	r23, 0xFF	; 255
    9f2a:	7f 7f       	andi	r23, 0xFF	; 255
    9f2c:	7f 7f       	andi	r23, 0xFF	; 255
    9f2e:	7f 7f       	andi	r23, 0xFF	; 255
    9f30:	7f 7f       	andi	r23, 0xFF	; 255
    9f32:	7f 7f       	andi	r23, 0xFF	; 255
    9f34:	7f 7f       	andi	r23, 0xFF	; 255
    9f36:	7f 7f       	andi	r23, 0xFF	; 255
    9f38:	7f 7f       	andi	r23, 0xFF	; 255
    9f3a:	7f 7f       	andi	r23, 0xFF	; 255
    9f3c:	7f 7f       	andi	r23, 0xFF	; 255
    9f3e:	7f 7f       	andi	r23, 0xFF	; 255
    9f40:	7f 7f       	andi	r23, 0xFF	; 255
    9f42:	7f 7f       	andi	r23, 0xFF	; 255
    9f44:	7f 7f       	andi	r23, 0xFF	; 255
    9f46:	7f 7f       	andi	r23, 0xFF	; 255
    9f48:	7f 7f       	andi	r23, 0xFF	; 255
    9f4a:	7f 7f       	andi	r23, 0xFF	; 255
    9f4c:	7f 7f       	andi	r23, 0xFF	; 255
    9f4e:	7f 7f       	andi	r23, 0xFF	; 255
    9f50:	7f 7f       	andi	r23, 0xFF	; 255
    9f52:	7f 7f       	andi	r23, 0xFF	; 255
    9f54:	7f 7f       	andi	r23, 0xFF	; 255
    9f56:	7f 7f       	andi	r23, 0xFF	; 255
    9f58:	7f 7f       	andi	r23, 0xFF	; 255
    9f5a:	7f 7f       	andi	r23, 0xFF	; 255
    9f5c:	7f 7f       	andi	r23, 0xFF	; 255
    9f5e:	7f 7f       	andi	r23, 0xFF	; 255
    9f60:	7f 7f       	andi	r23, 0xFF	; 255
    9f62:	7f 7f       	andi	r23, 0xFF	; 255
    9f64:	7f 7f       	andi	r23, 0xFF	; 255
    9f66:	7f 7f       	andi	r23, 0xFF	; 255
    9f68:	7f 7f       	andi	r23, 0xFF	; 255
    9f6a:	7f 7f       	andi	r23, 0xFF	; 255
    9f6c:	7f 7f       	andi	r23, 0xFF	; 255
    9f6e:	7f 7f       	andi	r23, 0xFF	; 255
    9f70:	7f 7f       	andi	r23, 0xFF	; 255
    9f72:	7f 7f       	andi	r23, 0xFF	; 255
    9f74:	7f 7f       	andi	r23, 0xFF	; 255
    9f76:	7f 7f       	andi	r23, 0xFF	; 255
    9f78:	7f 7f       	andi	r23, 0xFF	; 255
    9f7a:	7f 7f       	andi	r23, 0xFF	; 255
    9f7c:	7f 7f       	andi	r23, 0xFF	; 255
    9f7e:	7f 7f       	andi	r23, 0xFF	; 255
    9f80:	7f 7f       	andi	r23, 0xFF	; 255
    9f82:	7f 7f       	andi	r23, 0xFF	; 255
    9f84:	7f 7f       	andi	r23, 0xFF	; 255
    9f86:	7f 7f       	andi	r23, 0xFF	; 255
    9f88:	7f 7f       	andi	r23, 0xFF	; 255
    9f8a:	7f 7f       	andi	r23, 0xFF	; 255
    9f8c:	7f 7f       	andi	r23, 0xFF	; 255
    9f8e:	7f 7f       	andi	r23, 0xFF	; 255
    9f90:	7f 7f       	andi	r23, 0xFF	; 255
    9f92:	7f 7f       	andi	r23, 0xFF	; 255
    9f94:	7f 7f       	andi	r23, 0xFF	; 255
    9f96:	7f 7f       	andi	r23, 0xFF	; 255
    9f98:	7f 7f       	andi	r23, 0xFF	; 255
    9f9a:	7f 7f       	andi	r23, 0xFF	; 255
    9f9c:	7f 7f       	andi	r23, 0xFF	; 255
    9f9e:	7f 7f       	andi	r23, 0xFF	; 255
    9fa0:	7f 7f       	andi	r23, 0xFF	; 255
    9fa2:	7f 7f       	andi	r23, 0xFF	; 255
    9fa4:	7f 7f       	andi	r23, 0xFF	; 255
    9fa6:	7f 7f       	andi	r23, 0xFF	; 255
    9fa8:	7f 7f       	andi	r23, 0xFF	; 255
    9faa:	7f 7f       	andi	r23, 0xFF	; 255
    9fac:	7f 7f       	andi	r23, 0xFF	; 255
    9fae:	7f 7f       	andi	r23, 0xFF	; 255
    9fb0:	7f 7f       	andi	r23, 0xFF	; 255
    9fb2:	7f 7f       	andi	r23, 0xFF	; 255
    9fb4:	7f 7f       	andi	r23, 0xFF	; 255
    9fb6:	7f 7f       	andi	r23, 0xFF	; 255
    9fb8:	7f 7f       	andi	r23, 0xFF	; 255
    9fba:	7f 7f       	andi	r23, 0xFF	; 255
    9fbc:	7f 7f       	andi	r23, 0xFF	; 255
    9fbe:	7f 7f       	andi	r23, 0xFF	; 255
    9fc0:	80 80       	ld	r8, Z
    9fc2:	80 80       	ld	r8, Z
    9fc4:	80 80       	ld	r8, Z
    9fc6:	80 80       	ld	r8, Z
    9fc8:	80 80       	ld	r8, Z
    9fca:	80 80       	ld	r8, Z
    9fcc:	80 80       	ld	r8, Z
    9fce:	80 80       	ld	r8, Z
    9fd0:	80 80       	ld	r8, Z
    9fd2:	80 80       	ld	r8, Z
    9fd4:	80 80       	ld	r8, Z
    9fd6:	80 80       	ld	r8, Z
    9fd8:	80 80       	ld	r8, Z
    9fda:	80 80       	ld	r8, Z
    9fdc:	80 80       	ld	r8, Z
    9fde:	80 80       	ld	r8, Z
    9fe0:	80 80       	ld	r8, Z
    9fe2:	80 80       	ld	r8, Z
    9fe4:	80 80       	ld	r8, Z
    9fe6:	80 80       	ld	r8, Z
    9fe8:	80 80       	ld	r8, Z
    9fea:	80 80       	ld	r8, Z
    9fec:	80 80       	ld	r8, Z
    9fee:	80 80       	ld	r8, Z
    9ff0:	80 80       	ld	r8, Z
    9ff2:	80 80       	ld	r8, Z
    9ff4:	80 80       	ld	r8, Z
    9ff6:	80 80       	ld	r8, Z
    9ff8:	80 80       	ld	r8, Z
    9ffa:	80 80       	ld	r8, Z
    9ffc:	80 80       	ld	r8, Z
    9ffe:	80 80       	ld	r8, Z
    a000:	03 09       	sbc	r16, r3
    a002:	13 1e       	adc	r1, r19
    a004:	28 31       	cpi	r18, 0x18	; 24
    a006:	3a 40       	sbci	r19, 0x0A	; 10
    a008:	46 4c       	sbci	r20, 0xC6	; 198
    a00a:	50 54       	subi	r21, 0x40	; 64
    a00c:	58 5b       	subi	r21, 0xB8	; 184
    a00e:	5e 61       	ori	r21, 0x1E	; 30
    a010:	63 65       	ori	r22, 0x53	; 83
    a012:	67 69       	ori	r22, 0x97	; 151
    a014:	6b 6c       	ori	r22, 0xCB	; 203
    a016:	6e 6f       	ori	r22, 0xFE	; 254
    a018:	70 71       	andi	r23, 0x10	; 16
    a01a:	72 73       	andi	r23, 0x32	; 50
    a01c:	74 75       	andi	r23, 0x54	; 84
    a01e:	76 77       	andi	r23, 0x76	; 118
    a020:	77 78       	andi	r23, 0x87	; 135
    a022:	79 79       	andi	r23, 0x99	; 153
    a024:	7a 7a       	andi	r23, 0xAA	; 170
    a026:	7b 7b       	andi	r23, 0xBB	; 187
    a028:	7c 7c       	andi	r23, 0xCC	; 204
    a02a:	7c 7d       	andi	r23, 0xDC	; 220
    a02c:	7d 7d       	andi	r23, 0xDD	; 221
    a02e:	7e 7e       	andi	r23, 0xEE	; 238
    a030:	7e 7e       	andi	r23, 0xEE	; 238
    a032:	7f 7f       	andi	r23, 0xFF	; 255
    a034:	7f 7f       	andi	r23, 0xFF	; 255
    a036:	7f 7f       	andi	r23, 0xFF	; 255
    a038:	7f 7f       	andi	r23, 0xFF	; 255
    a03a:	7f 7f       	andi	r23, 0xFF	; 255
    a03c:	7f 7f       	andi	r23, 0xFF	; 255
    a03e:	7f 7f       	andi	r23, 0xFF	; 255
    a040:	7f 7f       	andi	r23, 0xFF	; 255
    a042:	7f 7f       	andi	r23, 0xFF	; 255
    a044:	7f 7f       	andi	r23, 0xFF	; 255
    a046:	7f 7f       	andi	r23, 0xFF	; 255
    a048:	7f 7f       	andi	r23, 0xFF	; 255
    a04a:	7f 7f       	andi	r23, 0xFF	; 255
    a04c:	7f 7e       	andi	r23, 0xEF	; 239
    a04e:	7e 7e       	andi	r23, 0xEE	; 238
    a050:	7e 7d       	andi	r23, 0xDE	; 222
    a052:	7d 7d       	andi	r23, 0xDD	; 221
    a054:	7c 7c       	andi	r23, 0xCC	; 204
    a056:	7c 7b       	andi	r23, 0xBC	; 188
    a058:	7b 7a       	andi	r23, 0xAB	; 171
    a05a:	7a 79       	andi	r23, 0x9A	; 154
    a05c:	79 78       	andi	r23, 0x89	; 137
    a05e:	77 77       	andi	r23, 0x77	; 119
    a060:	76 75       	andi	r23, 0x56	; 86
    a062:	74 73       	andi	r23, 0x34	; 52
    a064:	72 71       	andi	r23, 0x12	; 18
    a066:	70 6f       	ori	r23, 0xF0	; 240
    a068:	6e 6c       	ori	r22, 0xCE	; 206
    a06a:	6b 69       	ori	r22, 0x9B	; 155
    a06c:	67 65       	ori	r22, 0x57	; 87
    a06e:	63 61       	ori	r22, 0x13	; 19
    a070:	5e 5b       	subi	r21, 0xBE	; 190
    a072:	58 54       	subi	r21, 0x48	; 72
    a074:	50 4c       	sbci	r21, 0xC0	; 192
    a076:	46 40       	sbci	r20, 0x06	; 6
    a078:	3a 31       	cpi	r19, 0x1A	; 26
    a07a:	28 1e       	adc	r2, r24
    a07c:	13 09       	sbc	r17, r3
    a07e:	03 00       	.word	0x0003	; ????
    a080:	c6 cc       	rjmp	.-1652   	; 0x9a0e <waves+0xe>
    a082:	d5 db       	rcall	.-2134   	; 0x982e <steptable+0x26>
    a084:	df e3       	ldi	r29, 0x3F	; 63
    a086:	e5 e7       	ldi	r30, 0x75	; 117
    a088:	e9 ea       	ldi	r30, 0xA9	; 169
    a08a:	eb ec       	ldi	r30, 0xCB	; 203
    a08c:	ed ee       	ldi	r30, 0xED	; 237
    a08e:	ef ef       	ldi	r30, 0xFF	; 255
    a090:	f0 f0       	brcs	.+60     	; 0xa0ce <waves+0x6ce>
    a092:	f0 f1       	brcs	.+124    	; 0xa110 <waves+0x710>
    a094:	f1 f1       	breq	.+124    	; 0xa112 <waves+0x712>
    a096:	f1 f2       	breq	.-68     	; 0xa054 <waves+0x654>
    a098:	f2 f2       	brmi	.-68     	; 0xa056 <waves+0x656>
    a09a:	f2 f2       	brmi	.-68     	; 0xa058 <waves+0x658>
    a09c:	f2 f2       	brmi	.-68     	; 0xa05a <waves+0x65a>
    a09e:	f2 f3       	brmi	.-4      	; 0xa09c <waves+0x69c>
    a0a0:	f3 f3       	brvs	.-4      	; 0xa09e <waves+0x69e>
    a0a2:	f3 f3       	brvs	.-4      	; 0xa0a0 <waves+0x6a0>
    a0a4:	f3 f3       	brvs	.-4      	; 0xa0a2 <waves+0x6a2>
    a0a6:	f3 f3       	brvs	.-4      	; 0xa0a4 <waves+0x6a4>
    a0a8:	f3 f3       	brvs	.-4      	; 0xa0a6 <waves+0x6a6>
    a0aa:	f3 f3       	brvs	.-4      	; 0xa0a8 <waves+0x6a8>
    a0ac:	f3 f3       	brvs	.-4      	; 0xa0aa <waves+0x6aa>
    a0ae:	f3 f3       	brvs	.-4      	; 0xa0ac <waves+0x6ac>
    a0b0:	f3 f3       	brvs	.-4      	; 0xa0ae <waves+0x6ae>
    a0b2:	f3 f3       	brvs	.-4      	; 0xa0b0 <waves+0x6b0>
    a0b4:	f3 f3       	brvs	.-4      	; 0xa0b2 <waves+0x6b2>
    a0b6:	f3 f3       	brvs	.-4      	; 0xa0b4 <waves+0x6b4>
    a0b8:	f3 f3       	brvs	.-4      	; 0xa0b6 <waves+0x6b6>
    a0ba:	f3 f3       	brvs	.-4      	; 0xa0b8 <waves+0x6b8>
    a0bc:	f3 f3       	brvs	.-4      	; 0xa0ba <waves+0x6ba>
    a0be:	f3 f3       	brvs	.-4      	; 0xa0bc <waves+0x6bc>
    a0c0:	f3 f3       	brvs	.-4      	; 0xa0be <waves+0x6be>
    a0c2:	f3 f3       	brvs	.-4      	; 0xa0c0 <waves+0x6c0>
    a0c4:	f3 f3       	brvs	.-4      	; 0xa0c2 <waves+0x6c2>
    a0c6:	f3 f3       	brvs	.-4      	; 0xa0c4 <waves+0x6c4>
    a0c8:	f3 f3       	brvs	.-4      	; 0xa0c6 <waves+0x6c6>
    a0ca:	f3 f3       	brvs	.-4      	; 0xa0c8 <waves+0x6c8>
    a0cc:	f3 f3       	brvs	.-4      	; 0xa0ca <waves+0x6ca>
    a0ce:	f3 f3       	brvs	.-4      	; 0xa0cc <waves+0x6cc>
    a0d0:	f3 f3       	brvs	.-4      	; 0xa0ce <waves+0x6ce>
    a0d2:	f3 f3       	brvs	.-4      	; 0xa0d0 <waves+0x6d0>
    a0d4:	f3 f3       	brvs	.-4      	; 0xa0d2 <waves+0x6d2>
    a0d6:	f3 f3       	brvs	.-4      	; 0xa0d4 <waves+0x6d4>
    a0d8:	f3 f3       	brvs	.-4      	; 0xa0d6 <waves+0x6d6>
    a0da:	f3 f3       	brvs	.-4      	; 0xa0d8 <waves+0x6d8>
    a0dc:	f3 f3       	brvs	.-4      	; 0xa0da <waves+0x6da>
    a0de:	f3 f3       	brvs	.-4      	; 0xa0dc <waves+0x6dc>
    a0e0:	f2 f2       	brmi	.-68     	; 0xa09e <waves+0x69e>
    a0e2:	f2 f2       	brmi	.-68     	; 0xa0a0 <waves+0x6a0>
    a0e4:	f2 f2       	brmi	.-68     	; 0xa0a2 <waves+0x6a2>
    a0e6:	f2 f2       	brmi	.-68     	; 0xa0a4 <waves+0x6a4>
    a0e8:	f1 f1       	breq	.+124    	; 0xa166 <waves+0x766>
    a0ea:	f1 f1       	breq	.+124    	; 0xa168 <waves+0x768>
    a0ec:	f0 f0       	brcs	.+60     	; 0xa12a <waves+0x72a>
    a0ee:	f0 ef       	ldi	r31, 0xF0	; 240
    a0f0:	ef ee       	ldi	r30, 0xEF	; 239
    a0f2:	ed ec       	ldi	r30, 0xCD	; 205
    a0f4:	eb ea       	ldi	r30, 0xAB	; 171
    a0f6:	e9 e7       	ldi	r30, 0x79	; 121
    a0f8:	e5 e3       	ldi	r30, 0x35	; 53
    a0fa:	df db       	rcall	.-2114   	; 0x98ba <steptable+0xb2>
    a0fc:	d5 cc       	rjmp	.-1622   	; 0x9aa8 <waves+0xa8>
    a0fe:	c6 00       	.word	0x00c6	; ????
    a100:	00 28       	or	r0, r0
    a102:	3d 42       	sbci	r19, 0x2D	; 45
    a104:	30 2d       	mov	r19, r0
    a106:	2c 2b       	or	r18, r28
    a108:	2c 2d       	mov	r18, r12
    a10a:	2e 2f       	mov	r18, r30
    a10c:	30 32       	cpi	r19, 0x20	; 32
    a10e:	33 35       	cpi	r19, 0x53	; 83
    a110:	37 39       	cpi	r19, 0x97	; 151
    a112:	3b 3d       	cpi	r19, 0xDB	; 219
    a114:	3f 41       	sbci	r19, 0x1F	; 31
    a116:	43 45       	sbci	r20, 0x53	; 83
    a118:	48 4a       	sbci	r20, 0xA8	; 168
    a11a:	4c 4e       	sbci	r20, 0xEC	; 236
    a11c:	50 53       	subi	r21, 0x30	; 48
    a11e:	55 57       	subi	r21, 0x75	; 117
    a120:	59 5b       	subi	r21, 0xB9	; 185
    a122:	5d 5f       	subi	r21, 0xFD	; 253
    a124:	61 63       	ori	r22, 0x31	; 49
    a126:	65 67       	ori	r22, 0x75	; 117
    a128:	69 6b       	ori	r22, 0xB9	; 185
    a12a:	6c 6e       	ori	r22, 0xEC	; 236
    a12c:	70 71       	andi	r23, 0x10	; 16
    a12e:	73 74       	andi	r23, 0x43	; 67
    a130:	75 77       	andi	r23, 0x75	; 117
    a132:	78 79       	andi	r23, 0x98	; 152
    a134:	7a 7b       	andi	r23, 0xBA	; 186
    a136:	7c 7d       	andi	r23, 0xDC	; 220
    a138:	7d 7e       	andi	r23, 0xED	; 237
    a13a:	7e 7f       	andi	r23, 0xFE	; 254
    a13c:	7f 7f       	andi	r23, 0xFF	; 255
    a13e:	7f 7f       	andi	r23, 0xFF	; 255
    a140:	7f 7f       	andi	r23, 0xFF	; 255
    a142:	7f 7f       	andi	r23, 0xFF	; 255
    a144:	7f 7f       	andi	r23, 0xFF	; 255
    a146:	7e 7e       	andi	r23, 0xEE	; 238
    a148:	7d 7d       	andi	r23, 0xDD	; 221
    a14a:	7c 7b       	andi	r23, 0xBC	; 188
    a14c:	7a 79       	andi	r23, 0x9A	; 154
    a14e:	78 77       	andi	r23, 0x78	; 120
    a150:	75 74       	andi	r23, 0x45	; 69
    a152:	73 71       	andi	r23, 0x13	; 19
    a154:	70 6e       	ori	r23, 0xE0	; 224
    a156:	6c 6b       	ori	r22, 0xBC	; 188
    a158:	69 67       	ori	r22, 0x79	; 121
    a15a:	65 63       	ori	r22, 0x35	; 53
    a15c:	61 5f       	subi	r22, 0xF1	; 241
    a15e:	5d 5b       	subi	r21, 0xBD	; 189
    a160:	59 57       	subi	r21, 0x79	; 121
    a162:	55 53       	subi	r21, 0x35	; 53
    a164:	50 4e       	sbci	r21, 0xE0	; 224
    a166:	4c 4a       	sbci	r20, 0xAC	; 172
    a168:	48 45       	sbci	r20, 0x58	; 88
    a16a:	43 41       	sbci	r20, 0x13	; 19
    a16c:	3f 3d       	cpi	r19, 0xDF	; 223
    a16e:	3b 39       	cpi	r19, 0x9B	; 155
    a170:	37 35       	cpi	r19, 0x57	; 87
    a172:	33 32       	cpi	r19, 0x23	; 35
    a174:	30 2f       	mov	r19, r16
    a176:	2e 2d       	mov	r18, r14
    a178:	2c 2b       	or	r18, r28
    a17a:	2c 2d       	mov	r18, r12
    a17c:	30 42       	sbci	r19, 0x20	; 32
    a17e:	3d 28       	or	r3, r13
    a180:	00 e9       	ldi	r16, 0x90	; 144
    a182:	e5 fe       	sbrs	r14, 5
    a184:	d4 d7       	rcall	.+4008   	; 0xb12e <save_score+0x18>
    a186:	d7 d7       	rcall	.+4014   	; 0xb136 <save_score+0x20>
    a188:	d6 d4       	rcall	.+2476   	; 0xab36 <LBCollides+0x3c>
    a18a:	d2 d0       	rcall	.+420    	; 0xa330 <waves+0x930>
    a18c:	ce cc       	rjmp	.-1636   	; 0x9b2a <waves+0x12a>
    a18e:	ca c8       	rjmp	.-3692   	; 0x9324 <ProcessMusic>
    a190:	c6 c3       	rjmp	.+1932   	; 0xa91e <ProcessFading+0x28>
    a192:	c1 bf       	out	0x31, r28	; 49
    a194:	bd ba       	out	0x1d, r11	; 29
    a196:	b8 b6       	in	r11, 0x38	; 56
    a198:	b4 b1       	in	r27, 0x04	; 4
    a19a:	af ad       	ldd	r26, Y+63	; 0x3f
    a19c:	ab a9       	ldd	r26, Y+51	; 0x33
    a19e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    a1a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    a1a2:	9f 9e       	mul	r9, r31
    a1a4:	9c 9a       	sbi	0x13, 4	; 19
    a1a6:	99 97       	sbiw	r26, 0x29	; 41
    a1a8:	95 94       	asr	r9
    a1aa:	93 91       	.word	0x9193	; ????
    a1ac:	90 8f       	std	Z+24, r25	; 0x18
    a1ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a1b0:	8b 8a       	std	Y+19, r8	; 0x13
    a1b2:	89 88       	ldd	r8, Y+17	; 0x11
    a1b4:	88 87       	std	Y+8, r24	; 0x08
    a1b6:	86 85       	ldd	r24, Z+14	; 0x0e
    a1b8:	85 84       	ldd	r8, Z+13	; 0x0d
    a1ba:	84 84       	ldd	r8, Z+12	; 0x0c
    a1bc:	83 83       	std	Z+3, r24	; 0x03
    a1be:	83 83       	std	Z+3, r24	; 0x03
    a1c0:	83 83       	std	Z+3, r24	; 0x03
    a1c2:	83 83       	std	Z+3, r24	; 0x03
    a1c4:	83 84       	ldd	r8, Z+11	; 0x0b
    a1c6:	84 84       	ldd	r8, Z+12	; 0x0c
    a1c8:	85 85       	ldd	r24, Z+13	; 0x0d
    a1ca:	86 87       	std	Z+14, r24	; 0x0e
    a1cc:	88 88       	ldd	r8, Y+16	; 0x10
    a1ce:	89 8a       	std	Y+17, r8	; 0x11
    a1d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    a1d2:	8d 8f       	std	Y+29, r24	; 0x1d
    a1d4:	90 91 93 94 	lds	r25, 0x9493
    a1d8:	95 97       	sbiw	r26, 0x25	; 37
    a1da:	99 9a       	sbi	0x13, 1	; 19
    a1dc:	9c 9e       	mul	r9, r28
    a1de:	9f a1       	ldd	r25, Y+39	; 0x27
    a1e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a1e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    a1e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    a1e6:	af b1       	in	r26, 0x0f	; 15
    a1e8:	b4 b6       	in	r11, 0x34	; 52
    a1ea:	b8 ba       	out	0x18, r11	; 24
    a1ec:	bd bf       	out	0x3d, r27	; 61
    a1ee:	c1 c3       	rjmp	.+1922   	; 0xa972 <LBGetNextFrame+0x2a>
    a1f0:	c6 c8       	rjmp	.-3700   	; 0x937e <ProcessMusic+0x5a>
    a1f2:	ca cc       	rjmp	.-1644   	; 0x9b88 <waves+0x188>
    a1f4:	ce d0       	rcall	.+412    	; 0xa392 <waves+0x992>
    a1f6:	d2 d4       	rcall	.+2468   	; 0xab9c <LBLineIntersect+0x4e>
    a1f8:	d6 d7       	rcall	.+4012   	; 0xb1a6 <save_score+0x90>
    a1fa:	d7 d7       	rcall	.+4014   	; 0xb1aa <save_score+0x94>
    a1fc:	d4 fe       	sbrs	r13, 4
    a1fe:	e5 e9       	ldi	r30, 0x95	; 149
    a200:	f9 f8       	.word	0xf8f9	; ????
    a202:	f9 f5       	brne	.+126    	; 0xa282 <waves+0x882>
    a204:	eb e1       	ldi	r30, 0x1B	; 27
    a206:	dd de       	rcall	.-582    	; 0x9fc2 <waves+0x5c2>
    a208:	e0 e2       	ldi	r30, 0x20	; 32
    a20a:	e4 e5       	ldi	r30, 0x54	; 84
    a20c:	e6 e5       	ldi	r30, 0x56	; 86
    a20e:	e4 e2       	ldi	r30, 0x24	; 36
    a210:	de d9       	rcall	.-3140   	; 0x95ce <ProcessMusic+0x2aa>
    a212:	d2 ca       	rjmp	.-2652   	; 0x97b8 <SetMixerWave+0x12>
    a214:	c1 b7       	in	r28, 0x31	; 49
    a216:	ac a2       	std	Y+36, r10	; 0x24
    a218:	99 91       	ld	r25, Y+
    a21a:	8a 86       	std	Y+10, r8	; 0x0a
    a21c:	83 81       	ldd	r24, Z+3	; 0x03
    a21e:	80 80       	ld	r8, Z
    a220:	81 82       	std	Z+1, r8	; 0x01
    a222:	83 85       	ldd	r24, Z+11	; 0x0b
    a224:	86 88       	ldd	r8, Z+22	; 0x16
    a226:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a228:	8d 8f       	std	Y+29, r24	; 0x1d
    a22a:	90 92 93 95 	sts	0x9593, r9
    a22e:	96 97       	sbiw	r26, 0x26	; 38
    a230:	98 99       	sbic	0x13, 0	; 19
    a232:	9a 9b       	sbis	0x13, 2	; 19
    a234:	9b 9c       	mul	r9, r11
    a236:	9d 9d       	mul	r25, r13
    a238:	9d 9e       	mul	r9, r29
    a23a:	9e 9e       	mul	r9, r30
    a23c:	9f 9f       	mul	r25, r31
    a23e:	9f 9f       	mul	r25, r31
    a240:	9f 9f       	mul	r25, r31
    a242:	9f 9e       	mul	r9, r31
    a244:	9e 9e       	mul	r9, r30
    a246:	9d 9d       	mul	r25, r13
    a248:	9d 9c       	mul	r9, r13
    a24a:	9b 9b       	sbis	0x13, 3	; 19
    a24c:	9a 99       	sbic	0x13, 2	; 19
    a24e:	98 97       	sbiw	r26, 0x28	; 40
    a250:	96 95       	lsr	r25
    a252:	93 92       	.word	0x9293	; ????
    a254:	90 8f       	std	Z+24, r25	; 0x18
    a256:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a258:	8a 88       	ldd	r8, Y+18	; 0x12
    a25a:	86 85       	ldd	r24, Z+14	; 0x0e
    a25c:	83 82       	std	Z+3, r8	; 0x03
    a25e:	81 80       	ldd	r8, Z+1	; 0x01
    a260:	80 81       	ld	r24, Z
    a262:	83 86       	std	Z+11, r8	; 0x0b
    a264:	8a 91       	ld	r24, -Y
    a266:	99 a2       	std	Y+33, r9	; 0x21
    a268:	ac b7       	in	r26, 0x3c	; 60
    a26a:	c1 ca       	rjmp	.-2686   	; 0x97ee <esmw+0x12>
    a26c:	d2 d9       	rcall	.-3164   	; 0x9612 <ProcessMusic+0x2ee>
    a26e:	de e2       	ldi	r29, 0x2E	; 46
    a270:	e4 e5       	ldi	r30, 0x54	; 84
    a272:	e6 e5       	ldi	r30, 0x56	; 86
    a274:	e4 e2       	ldi	r30, 0x24	; 36
    a276:	e0 de       	rcall	.-576    	; 0xa038 <waves+0x638>
    a278:	dd e1       	ldi	r29, 0x1D	; 29
    a27a:	eb f5       	brvc	.+122    	; 0xa2f6 <waves+0x8f6>
    a27c:	f9 f8       	.word	0xf8f9	; ????
    a27e:	f9 00       	.word	0x00f9	; ????
    a280:	07 08       	sbc	r0, r7
    a282:	07 0b       	sbc	r16, r23
    a284:	15 1f       	adc	r17, r21
    a286:	23 22       	and	r2, r19
    a288:	20 1e       	adc	r2, r16
    a28a:	1c 1b       	sub	r17, r28
    a28c:	1a 1b       	sub	r17, r26
    a28e:	1c 1e       	adc	r1, r28
    a290:	22 27       	eor	r18, r18
    a292:	2e 36       	cpi	r18, 0x6E	; 110
    a294:	3f 49       	sbci	r19, 0x9F	; 159
    a296:	54 5e       	subi	r21, 0xE4	; 228
    a298:	67 6f       	ori	r22, 0xF7	; 247
    a29a:	76 7a       	andi	r23, 0xA6	; 166
    a29c:	7e 7f       	andi	r23, 0xFE	; 254
    a29e:	7f 7f       	andi	r23, 0xFF	; 255
    a2a0:	7f 7e       	andi	r23, 0xEF	; 239
    a2a2:	7d 7b       	andi	r23, 0xBD	; 189
    a2a4:	7a 78       	andi	r23, 0x8A	; 138
    a2a6:	76 74       	andi	r23, 0x46	; 70
    a2a8:	73 71       	andi	r23, 0x13	; 19
    a2aa:	70 6e       	ori	r23, 0xE0	; 224
    a2ac:	6d 6b       	ori	r22, 0xBD	; 189
    a2ae:	6a 69       	ori	r22, 0x9A	; 154
    a2b0:	68 67       	ori	r22, 0x78	; 120
    a2b2:	66 65       	ori	r22, 0x56	; 86
    a2b4:	65 64       	ori	r22, 0x45	; 69
    a2b6:	64 63       	ori	r22, 0x34	; 52
    a2b8:	63 62       	ori	r22, 0x23	; 35
    a2ba:	62 62       	ori	r22, 0x22	; 34
    a2bc:	61 61       	ori	r22, 0x11	; 17
    a2be:	61 61       	ori	r22, 0x11	; 17
    a2c0:	61 61       	ori	r22, 0x11	; 17
    a2c2:	61 62       	ori	r22, 0x21	; 33
    a2c4:	62 62       	ori	r22, 0x22	; 34
    a2c6:	63 63       	ori	r22, 0x33	; 51
    a2c8:	63 64       	ori	r22, 0x43	; 67
    a2ca:	65 65       	ori	r22, 0x55	; 85
    a2cc:	66 67       	ori	r22, 0x76	; 118
    a2ce:	68 69       	ori	r22, 0x98	; 152
    a2d0:	6a 6b       	ori	r22, 0xBA	; 186
    a2d2:	6d 6e       	ori	r22, 0xED	; 237
    a2d4:	70 71       	andi	r23, 0x10	; 16
    a2d6:	73 74       	andi	r23, 0x43	; 67
    a2d8:	76 78       	andi	r23, 0x86	; 134
    a2da:	7a 7b       	andi	r23, 0xBA	; 186
    a2dc:	7d 7e       	andi	r23, 0xED	; 237
    a2de:	7f 7f       	andi	r23, 0xFF	; 255
    a2e0:	7f 7f       	andi	r23, 0xFF	; 255
    a2e2:	7e 7a       	andi	r23, 0xAE	; 174
    a2e4:	76 6f       	ori	r23, 0xF6	; 246
    a2e6:	67 5e       	subi	r22, 0xE7	; 231
    a2e8:	54 49       	sbci	r21, 0x94	; 148
    a2ea:	3f 36       	cpi	r19, 0x6F	; 111
    a2ec:	2e 27       	eor	r18, r30
    a2ee:	22 1e       	adc	r2, r18
    a2f0:	1c 1b       	sub	r17, r28
    a2f2:	1a 1b       	sub	r17, r26
    a2f4:	1c 1e       	adc	r1, r28
    a2f6:	20 22       	and	r2, r16
    a2f8:	23 1f       	adc	r18, r19
    a2fa:	15 0b       	sbc	r17, r21
    a2fc:	07 08       	sbc	r0, r7
    a2fe:	07 00       	.word	0x0007	; ????
    a300:	1f 31       	cpi	r17, 0x1F	; 31
    a302:	3d 44       	sbci	r19, 0x4D	; 77
    a304:	4e 53       	subi	r20, 0x3E	; 62
    a306:	54 56       	subi	r21, 0x64	; 100
    a308:	5a 5f       	subi	r21, 0xFA	; 250
    a30a:	64 69       	ori	r22, 0x94	; 148
    a30c:	6e 74       	andi	r22, 0x4E	; 78
    a30e:	76 79       	andi	r23, 0x96	; 150
    a310:	7c 7f       	andi	r23, 0xFC	; 252
    a312:	7f 7f       	andi	r23, 0xFF	; 255
    a314:	7f 7f       	andi	r23, 0xFF	; 255
    a316:	7f 7f       	andi	r23, 0xFF	; 255
    a318:	7f 7f       	andi	r23, 0xFF	; 255
    a31a:	7f 7f       	andi	r23, 0xFF	; 255
    a31c:	7f 7f       	andi	r23, 0xFF	; 255
    a31e:	7f 7f       	andi	r23, 0xFF	; 255
    a320:	7f 7f       	andi	r23, 0xFF	; 255
    a322:	7f 7f       	andi	r23, 0xFF	; 255
    a324:	7f 7f       	andi	r23, 0xFF	; 255
    a326:	7f 7f       	andi	r23, 0xFF	; 255
    a328:	7f 7f       	andi	r23, 0xFF	; 255
    a32a:	7f 7f       	andi	r23, 0xFF	; 255
    a32c:	7f 7f       	andi	r23, 0xFF	; 255
    a32e:	7f 7f       	andi	r23, 0xFF	; 255
    a330:	7f 7f       	andi	r23, 0xFF	; 255
    a332:	7f 7f       	andi	r23, 0xFF	; 255
    a334:	7f 7f       	andi	r23, 0xFF	; 255
    a336:	7f 7f       	andi	r23, 0xFF	; 255
    a338:	7f 7f       	andi	r23, 0xFF	; 255
    a33a:	7f 7f       	andi	r23, 0xFF	; 255
    a33c:	7f 7f       	andi	r23, 0xFF	; 255
    a33e:	7f 7f       	andi	r23, 0xFF	; 255
    a340:	7f 7f       	andi	r23, 0xFF	; 255
    a342:	7f 7f       	andi	r23, 0xFF	; 255
    a344:	7f 7f       	andi	r23, 0xFF	; 255
    a346:	7f 7f       	andi	r23, 0xFF	; 255
    a348:	7f 7f       	andi	r23, 0xFF	; 255
    a34a:	7f 7f       	andi	r23, 0xFF	; 255
    a34c:	7f 7f       	andi	r23, 0xFF	; 255
    a34e:	7f 7f       	andi	r23, 0xFF	; 255
    a350:	7f 7f       	andi	r23, 0xFF	; 255
    a352:	7f 7f       	andi	r23, 0xFF	; 255
    a354:	7f 7f       	andi	r23, 0xFF	; 255
    a356:	7f 7f       	andi	r23, 0xFF	; 255
    a358:	7f 7f       	andi	r23, 0xFF	; 255
    a35a:	7f 7f       	andi	r23, 0xFF	; 255
    a35c:	7f 7f       	andi	r23, 0xFF	; 255
    a35e:	7f 7f       	andi	r23, 0xFF	; 255
    a360:	7f 7f       	andi	r23, 0xFF	; 255
    a362:	7f 7f       	andi	r23, 0xFF	; 255
    a364:	7f 7f       	andi	r23, 0xFF	; 255
    a366:	7f 7f       	andi	r23, 0xFF	; 255
    a368:	7f 7f       	andi	r23, 0xFF	; 255
    a36a:	7f 7f       	andi	r23, 0xFF	; 255
    a36c:	7f 7f       	andi	r23, 0xFF	; 255
    a36e:	7f 7f       	andi	r23, 0xFF	; 255
    a370:	7f 7f       	andi	r23, 0xFF	; 255
    a372:	7f 7f       	andi	r23, 0xFF	; 255
    a374:	7f 7f       	andi	r23, 0xFF	; 255
    a376:	7f 7f       	andi	r23, 0xFF	; 255
    a378:	7f 7f       	andi	r23, 0xFF	; 255
    a37a:	7f 7c       	andi	r23, 0xCF	; 207
    a37c:	78 71       	andi	r23, 0x18	; 24
    a37e:	68 4c       	sbci	r22, 0xC8	; 200
    a380:	2c 1c       	adc	r2, r12
    a382:	12 0c       	add	r1, r2
    a384:	0a 0b       	sbc	r16, r26
    a386:	0a 05       	cpc	r16, r10
    a388:	fd f3       	brhs	.-2      	; 0xa388 <waves+0x988>
    a38a:	e9 df       	rcall	.-46     	; 0xa35e <waves+0x95e>
    a38c:	d4 ca       	rjmp	.-2648   	; 0x9936 <steptable+0x12e>
    a38e:	c0 b7       	in	r28, 0x30	; 48
    a390:	ae a6       	std	Y+46, r10	; 0x2e
    a392:	9e 97       	sbiw	r26, 0x2e	; 46
    a394:	91 8b       	std	Z+17, r25	; 0x11
    a396:	86 85       	ldd	r24, Z+14	; 0x0e
    a398:	82 80       	ldd	r8, Z+2	; 0x02
    a39a:	80 80       	ld	r8, Z
    a39c:	80 80       	ld	r8, Z
    a39e:	80 80       	ld	r8, Z
    a3a0:	80 80       	ld	r8, Z
    a3a2:	80 80       	ld	r8, Z
    a3a4:	80 80       	ld	r8, Z
    a3a6:	80 80       	ld	r8, Z
    a3a8:	80 80       	ld	r8, Z
    a3aa:	80 80       	ld	r8, Z
    a3ac:	80 80       	ld	r8, Z
    a3ae:	80 80       	ld	r8, Z
    a3b0:	80 80       	ld	r8, Z
    a3b2:	80 80       	ld	r8, Z
    a3b4:	80 80       	ld	r8, Z
    a3b6:	80 80       	ld	r8, Z
    a3b8:	80 80       	ld	r8, Z
    a3ba:	80 80       	ld	r8, Z
    a3bc:	80 80       	ld	r8, Z
    a3be:	80 80       	ld	r8, Z
    a3c0:	80 80       	ld	r8, Z
    a3c2:	80 80       	ld	r8, Z
    a3c4:	80 80       	ld	r8, Z
    a3c6:	80 80       	ld	r8, Z
    a3c8:	80 80       	ld	r8, Z
    a3ca:	80 80       	ld	r8, Z
    a3cc:	80 80       	ld	r8, Z
    a3ce:	80 80       	ld	r8, Z
    a3d0:	80 80       	ld	r8, Z
    a3d2:	80 80       	ld	r8, Z
    a3d4:	80 80       	ld	r8, Z
    a3d6:	80 80       	ld	r8, Z
    a3d8:	80 80       	ld	r8, Z
    a3da:	80 80       	ld	r8, Z
    a3dc:	80 80       	ld	r8, Z
    a3de:	80 80       	ld	r8, Z
    a3e0:	80 80       	ld	r8, Z
    a3e2:	80 80       	ld	r8, Z
    a3e4:	80 80       	ld	r8, Z
    a3e6:	80 80       	ld	r8, Z
    a3e8:	80 80       	ld	r8, Z
    a3ea:	80 80       	ld	r8, Z
    a3ec:	80 80       	ld	r8, Z
    a3ee:	80 80       	ld	r8, Z
    a3f0:	80 80       	ld	r8, Z
    a3f2:	80 80       	ld	r8, Z
    a3f4:	80 87       	std	Z+8, r24	; 0x08
    a3f6:	91 9d       	mul	r25, r1
    a3f8:	ac c4       	rjmp	.+2392   	; 0xad52 <LBRandom+0x58>
    a3fa:	cb d4       	rcall	.+2454   	; 0xad92 <init_scores+0x10>
    a3fc:	dd f2       	brhs	.-74     	; 0xa3b4 <waves+0x9b4>
    a3fe:	fa fa       	.word	0xfafa	; ????

0000a400 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a400:	90 91 c0 0b 	lds	r25, 0x0BC0
    a404:	e0 e9       	ldi	r30, 0x90	; 144
    a406:	fa e0       	ldi	r31, 0x0A	; 10
    a408:	80 e0       	ldi	r24, 0x00	; 0
    a40a:	89 17       	cp	r24, r25
    a40c:	49 f0       	breq	.+18     	; 0xa420 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    a40e:	a0 81       	ld	r26, Z
    a410:	b1 81       	ldd	r27, Z+1	; 0x01
    a412:	a0 5e       	subi	r26, 0xE0	; 224
    a414:	be 4f       	sbci	r27, 0xFE	; 254
    a416:	22 81       	ldd	r18, Z+2	; 0x02
    a418:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a41a:	8f 5f       	subi	r24, 0xFF	; 255
    a41c:	33 96       	adiw	r30, 0x03	; 3
    a41e:	f5 cf       	rjmp	.-22     	; 0xa40a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    a420:	08 95       	ret

0000a422 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    a422:	80 93 00 01 	sts	0x0100, r24
    a426:	08 95       	ret

0000a428 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    a428:	2f 92       	push	r2
    a42a:	3f 92       	push	r3
    a42c:	4f 92       	push	r4
    a42e:	5f 92       	push	r5
    a430:	6f 92       	push	r6
    a432:	7f 92       	push	r7
    a434:	8f 92       	push	r8
    a436:	9f 92       	push	r9
    a438:	af 92       	push	r10
    a43a:	bf 92       	push	r11
    a43c:	cf 92       	push	r12
    a43e:	df 92       	push	r13
    a440:	ef 92       	push	r14
    a442:	ff 92       	push	r15
    a444:	0f 93       	push	r16
    a446:	1f 93       	push	r17
    a448:	cf 93       	push	r28
    a44a:	df 93       	push	r29
    a44c:	00 d0       	rcall	.+0      	; 0xa44e <ProcessSprites+0x26>
    a44e:	1f 92       	push	r1
    a450:	cd b7       	in	r28, 0x3d	; 61
    a452:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    a454:	10 92 c0 0b 	sts	0x0BC0, r1
		if(!spritesOn) return;
    a458:	80 91 00 01 	lds	r24, 0x0100
    a45c:	88 23       	and	r24, r24
    a45e:	09 f4       	brne	.+2      	; 0xa462 <ProcessSprites+0x3a>
    a460:	a1 c0       	rjmp	.+322    	; 0xa5a4 <ProcessSprites+0x17c>
    a462:	e8 e6       	ldi	r30, 0x68	; 104
    a464:	ce 2e       	mov	r12, r30
    a466:	e4 e0       	ldi	r30, 0x04	; 4
    a468:	de 2e       	mov	r13, r30
    a46a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    a46c:	f6 01       	movw	r30, r12
    a46e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    a470:	80 3f       	cpi	r24, 0xF0	; 240
    a472:	09 f4       	brne	.+2      	; 0xa476 <ProcessSprites+0x4e>
    a474:	79 c0       	rjmp	.+242    	; 0xa568 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    a476:	91 81       	ldd	r25, Z+1	; 0x01
    a478:	29 2f       	mov	r18, r25
    a47a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    a47c:	28 2e       	mov	r2, r24
    a47e:	26 94       	lsr	r2
    a480:	26 94       	lsr	r2
    a482:	26 94       	lsr	r2
				dx=ssx&0x7;
    a484:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    a486:	19 f0       	breq	.+6      	; 0xa48e <ProcessSprites+0x66>
    a488:	72 e0       	ldi	r23, 0x02	; 2
    a48a:	47 2e       	mov	r4, r23
    a48c:	02 c0       	rjmp	.+4      	; 0xa492 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    a48e:	44 24       	eor	r4, r4
    a490:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    a492:	63 e0       	ldi	r22, 0x03	; 3
    a494:	36 95       	lsr	r19
    a496:	27 95       	ror	r18
    a498:	6a 95       	dec	r22
    a49a:	e1 f7       	brne	.-8      	; 0xa494 <ProcessSprites+0x6c>
    a49c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    a49e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    a4a0:	19 f0       	breq	.+6      	; 0xa4a8 <ProcessSprites+0x80>
    a4a2:	52 e0       	ldi	r21, 0x02	; 2
    a4a4:	55 2e       	mov	r5, r21
    a4a6:	02 c0       	rjmp	.+4      	; 0xa4ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    a4a8:	55 24       	eor	r5, r5
    a4aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a4ac:	29 2f       	mov	r18, r25
    a4ae:	30 e0       	ldi	r19, 0x00	; 0
    a4b0:	32 2f       	mov	r19, r18
    a4b2:	22 27       	eor	r18, r18
    a4b4:	a9 01       	movw	r20, r18
    a4b6:	48 0f       	add	r20, r24
    a4b8:	51 1d       	adc	r21, r1
    a4ba:	5b 83       	std	Y+3, r21	; 0x03
    a4bc:	4a 83       	std	Y+2, r20	; 0x02
    a4be:	e1 2c       	mov	r14, r1
    a4c0:	f1 2c       	mov	r15, r1
    a4c2:	94 ee       	ldi	r25, 0xE4	; 228
    a4c4:	93 0d       	add	r25, r3
    a4c6:	99 83       	std	Y+1, r25	; 0x01
    a4c8:	03 2d       	mov	r16, r3
    a4ca:	0e 0d       	add	r16, r14
    a4cc:	0c 31       	cpi	r16, 0x1C	; 28
    a4ce:	10 f0       	brcs	.+4      	; 0xa4d4 <ProcessSprites+0xac>
    a4d0:	09 81       	ldd	r16, Y+1	; 0x01
    a4d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a4d4:	5e e1       	ldi	r21, 0x1E	; 30
    a4d6:	05 9f       	mul	r16, r21
    a4d8:	80 01       	movw	r16, r0
    a4da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a4dc:	be 2c       	mov	r11, r14
    a4de:	aa 24       	eor	r10, r10
    a4e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    a4e2:	ed e1       	ldi	r30, 0x1D	; 29
    a4e4:	e7 15       	cp	r30, r7
    a4e6:	18 f4       	brcc	.+6      	; 0xa4ee <ProcessSprites+0xc6>
    a4e8:	82 ee       	ldi	r24, 0xE2	; 226
    a4ea:	87 0d       	add	r24, r7
    a4ec:	01 c0       	rjmp	.+2      	; 0xa4f0 <ProcessSprites+0xc8>
    a4ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a4f0:	a8 01       	movw	r20, r16
    a4f2:	48 0f       	add	r20, r24
    a4f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    a4f6:	ca 01       	movw	r24, r20
    a4f8:	80 5e       	subi	r24, 0xE0	; 224
    a4fa:	9e 4f       	sbci	r25, 0xFE	; 254
    a4fc:	4c 01       	movw	r8, r24
    a4fe:	fc 01       	movw	r30, r24
    a500:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    a502:	88 31       	cpi	r24, 0x18	; 24
    a504:	e0 f0       	brcs	.+56     	; 0xa53e <ProcessSprites+0x116>
    a506:	60 91 c0 0b 	lds	r22, 0x0BC0
    a50a:	68 31       	cpi	r22, 0x18	; 24
    a50c:	f8 f4       	brcc	.+62     	; 0xa54c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    a50e:	26 2f       	mov	r18, r22
    a510:	30 e0       	ldi	r19, 0x00	; 0
    a512:	f9 01       	movw	r30, r18
    a514:	ee 0f       	add	r30, r30
    a516:	ff 1f       	adc	r31, r31
    a518:	e2 0f       	add	r30, r18
    a51a:	f3 1f       	adc	r31, r19
    a51c:	e0 57       	subi	r30, 0x70	; 112
    a51e:	f5 4f       	sbci	r31, 0xF5	; 245
    a520:	51 83       	std	Z+1, r21	; 0x01
    a522:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    a524:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    a526:	0e 94 10 43 	call	0x8620	; 0x8620 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    a52a:	80 91 c0 0b 	lds	r24, 0x0BC0
    a52e:	f4 01       	movw	r30, r8
    a530:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    a532:	91 e0       	ldi	r25, 0x01	; 1
    a534:	98 0f       	add	r25, r24
    a536:	90 93 c0 0b 	sts	0x0BC0, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    a53a:	88 31       	cpi	r24, 0x18	; 24
    a53c:	38 f4       	brcc	.+14     	; 0xa54c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a53e:	2a 81       	ldd	r18, Y+2	; 0x02
    a540:	3b 81       	ldd	r19, Y+3	; 0x03
    a542:	a5 01       	movw	r20, r10
    a544:	68 2f       	mov	r22, r24
    a546:	86 2d       	mov	r24, r6
    a548:	0e 94 a1 43 	call	0x8742	; 0x8742 <BlitSprite>
    a54c:	ff ef       	ldi	r31, 0xFF	; 255
    a54e:	af 1a       	sub	r10, r31
    a550:	bf 0a       	sbc	r11, r31
    a552:	73 94       	inc	r7
    a554:	87 2d       	mov	r24, r7
    a556:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    a558:	84 15       	cp	r24, r4
    a55a:	18 f2       	brcs	.-122    	; 0xa4e2 <ProcessSprites+0xba>
    a55c:	4f ef       	ldi	r20, 0xFF	; 255
    a55e:	e4 1a       	sub	r14, r20
    a560:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    a562:	e5 14       	cp	r14, r5
    a564:	08 f4       	brcc	.+2      	; 0xa568 <ProcessSprites+0x140>
    a566:	b0 cf       	rjmp	.-160    	; 0xa4c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    a568:	63 94       	inc	r6
    a56a:	84 e0       	ldi	r24, 0x04	; 4
    a56c:	c8 0e       	add	r12, r24
    a56e:	d1 1c       	adc	r13, r1
    a570:	9a e0       	ldi	r25, 0x0A	; 10
    a572:	69 12       	cpse	r6, r25
    a574:	7b cf       	rjmp	.-266    	; 0xa46c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    a576:	0f 90       	pop	r0
    a578:	0f 90       	pop	r0
    a57a:	0f 90       	pop	r0
    a57c:	df 91       	pop	r29
    a57e:	cf 91       	pop	r28
    a580:	1f 91       	pop	r17
    a582:	0f 91       	pop	r16
    a584:	ff 90       	pop	r15
    a586:	ef 90       	pop	r14
    a588:	df 90       	pop	r13
    a58a:	cf 90       	pop	r12
    a58c:	bf 90       	pop	r11
    a58e:	af 90       	pop	r10
    a590:	9f 90       	pop	r9
    a592:	8f 90       	pop	r8
    a594:	7f 90       	pop	r7
    a596:	6f 90       	pop	r6
    a598:	5f 90       	pop	r5
    a59a:	4f 90       	pop	r4
    a59c:	3f 90       	pop	r3
    a59e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    a5a0:	0c 94 00 52 	jmp	0xa400	; 0xa400 <RestoreBackground>

	}
    a5a4:	0f 90       	pop	r0
    a5a6:	0f 90       	pop	r0
    a5a8:	0f 90       	pop	r0
    a5aa:	df 91       	pop	r29
    a5ac:	cf 91       	pop	r28
    a5ae:	1f 91       	pop	r17
    a5b0:	0f 91       	pop	r16
    a5b2:	ff 90       	pop	r15
    a5b4:	ef 90       	pop	r14
    a5b6:	df 90       	pop	r13
    a5b8:	cf 90       	pop	r12
    a5ba:	bf 90       	pop	r11
    a5bc:	af 90       	pop	r10
    a5be:	9f 90       	pop	r9
    a5c0:	8f 90       	pop	r8
    a5c2:	7f 90       	pop	r7
    a5c4:	6f 90       	pop	r6
    a5c6:	5f 90       	pop	r5
    a5c8:	4f 90       	pop	r4
    a5ca:	3f 90       	pop	r3
    a5cc:	2f 90       	pop	r2
    a5ce:	08 95       	ret

0000a5d0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    a5d0:	df 92       	push	r13
    a5d2:	ef 92       	push	r14
    a5d4:	ff 92       	push	r15
    a5d6:	0f 93       	push	r16
    a5d8:	1f 93       	push	r17
    a5da:	cf 93       	push	r28
    a5dc:	df 93       	push	r29
    a5de:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    a5e0:	fb 01       	movw	r30, r22
    a5e2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    a5e4:	31 96       	adiw	r30, 0x01	; 1
    a5e6:	64 91       	lpm	r22, Z
    a5e8:	5f ef       	ldi	r21, 0xFF	; 255
    a5ea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    a5ec:	24 2f       	mov	r18, r20
    a5ee:	21 70       	andi	r18, 0x01	; 1
    a5f0:	40 ff       	sbrs	r20, 0
    a5f2:	04 c0       	rjmp	.+8      	; 0xa5fc <MapSprite2+0x2c>
			x=(mapWidth-1);
    a5f4:	95 2f       	mov	r25, r21
			dx=-1;
    a5f6:	ff 24       	eor	r15, r15
    a5f8:	fa 94       	dec	r15
    a5fa:	03 c0       	rjmp	.+6      	; 0xa602 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    a5fc:	ff 24       	eor	r15, r15
    a5fe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    a600:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    a602:	41 ff       	sbrs	r20, 1
    a604:	05 c0       	rjmp	.+10     	; 0xa610 <MapSprite2+0x40>
			y=(mapHeight-1);
    a606:	7f ef       	ldi	r23, 0xFF	; 255
    a608:	76 0f       	add	r23, r22
			dy=-1;
    a60a:	ee 24       	eor	r14, r14
    a60c:	ea 94       	dec	r14
    a60e:	03 c0       	rjmp	.+6      	; 0xa616 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    a610:	ee 24       	eor	r14, r14
    a612:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    a614:	70 e0       	ldi	r23, 0x00	; 0
    a616:	21 11       	cpse	r18, r1
    a618:	01 c0       	rjmp	.+2      	; 0xa61c <MapSprite2+0x4c>
    a61a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a61c:	00 e0       	ldi	r16, 0x00	; 0
    a61e:	06 17       	cp	r16, r22
    a620:	09 f1       	breq	.+66     	; 0xa664 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a622:	71 03       	mulsu	r23, r17
    a624:	e0 01       	movw	r28, r0
    a626:	11 24       	eor	r1, r1
    a628:	d8 2e       	mov	r13, r24
    a62a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    a62c:	8d 15       	cp	r24, r13
    a62e:	b1 f0       	breq	.+44     	; 0xa65c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a630:	9e 01       	movw	r18, r28
    a632:	29 0f       	add	r18, r25
    a634:	31 1d       	adc	r19, r1
    a636:	97 fd       	sbrc	r25, 7
    a638:	3a 95       	dec	r19
    a63a:	2e 5f       	subi	r18, 0xFE	; 254
    a63c:	3f 4f       	sbci	r19, 0xFF	; 255
    a63e:	fd 01       	movw	r30, r26
    a640:	e2 0f       	add	r30, r18
    a642:	f3 1f       	adc	r31, r19
    a644:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    a646:	34 e0       	ldi	r19, 0x04	; 4
    a648:	83 9f       	mul	r24, r19
    a64a:	f0 01       	movw	r30, r0
    a64c:	11 24       	eor	r1, r1
    a64e:	e8 59       	subi	r30, 0x98	; 152
    a650:	fb 4f       	sbci	r31, 0xFB	; 251
    a652:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    a654:	8f 5f       	subi	r24, 0xFF	; 255
    a656:	43 83       	std	Z+3, r20	; 0x03
    a658:	9f 0d       	add	r25, r15
    a65a:	e8 cf       	rjmp	.-48     	; 0xa62c <MapSprite2+0x5c>
    a65c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a65e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a660:	95 2f       	mov	r25, r21
    a662:	dd cf       	rjmp	.-70     	; 0xa61e <MapSprite2+0x4e>
	    }
	}
    a664:	df 91       	pop	r29
    a666:	cf 91       	pop	r28
    a668:	1f 91       	pop	r17
    a66a:	0f 91       	pop	r16
    a66c:	ff 90       	pop	r15
    a66e:	ef 90       	pop	r14
    a670:	df 90       	pop	r13
    a672:	08 95       	ret

0000a674 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    a674:	0f 93       	push	r16
    a676:	cf 93       	push	r28
    a678:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    a67a:	30 e0       	ldi	r19, 0x00	; 0
    a67c:	30 17       	cp	r19, r16
    a67e:	e1 f0       	breq	.+56     	; 0xa6b8 <MoveSprite+0x44>
    a680:	b4 2f       	mov	r27, r20
    a682:	a0 e2       	ldi	r26, 0x20	; 32
    a684:	a4 0f       	add	r26, r20
    a686:	78 2f       	mov	r23, r24
    a688:	72 0f       	add	r23, r18
    a68a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    a68c:	87 17       	cp	r24, r23
    a68e:	81 f0       	breq	.+32     	; 0xa6b0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    a690:	c4 e0       	ldi	r28, 0x04	; 4
    a692:	8c 9f       	mul	r24, r28
    a694:	f0 01       	movw	r30, r0
    a696:	11 24       	eor	r1, r1
    a698:	e8 59       	subi	r30, 0x98	; 152
    a69a:	fb 4f       	sbci	r31, 0xFB	; 251
    a69c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    a69e:	41 3e       	cpi	r20, 0xE1	; 225
    a6a0:	51 05       	cpc	r21, r1
    a6a2:	14 f0       	brlt	.+4      	; 0xa6a8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    a6a4:	a1 83       	std	Z+1, r26	; 0x01
    a6a6:	01 c0       	rjmp	.+2      	; 0xa6aa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a6a8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    a6aa:	8f 5f       	subi	r24, 0xFF	; 255
    a6ac:	98 5f       	subi	r25, 0xF8	; 248
    a6ae:	ee cf       	rjmp	.-36     	; 0xa68c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    a6b0:	3f 5f       	subi	r19, 0xFF	; 255
    a6b2:	48 5f       	subi	r20, 0xF8	; 248
    a6b4:	5f 4f       	sbci	r21, 0xFF	; 255
    a6b6:	e2 cf       	rjmp	.-60     	; 0xa67c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    a6b8:	cf 91       	pop	r28
    a6ba:	0f 91       	pop	r16
    a6bc:	08 95       	ret

0000a6be <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    a6be:	e8 e6       	ldi	r30, 0x68	; 104
    a6c0:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    a6c2:	80 ef       	ldi	r24, 0xF0	; 240
    a6c4:	80 83       	st	Z, r24
    a6c6:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    a6c8:	94 e0       	ldi	r25, 0x04	; 4
    a6ca:	e0 39       	cpi	r30, 0x90	; 144
    a6cc:	f9 07       	cpc	r31, r25
    a6ce:	d1 f7       	brne	.-12     	; 0xa6c4 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    a6d0:	08 95       	ret

0000a6d2 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    a6d2:	4f 92       	push	r4
    a6d4:	5f 92       	push	r5
    a6d6:	6f 92       	push	r6
    a6d8:	7f 92       	push	r7
    a6da:	8f 92       	push	r8
    a6dc:	9f 92       	push	r9
    a6de:	af 92       	push	r10
    a6e0:	bf 92       	push	r11
    a6e2:	cf 92       	push	r12
    a6e4:	df 92       	push	r13
    a6e6:	ef 92       	push	r14
    a6e8:	ff 92       	push	r15
    a6ea:	0f 93       	push	r16
    a6ec:	1f 93       	push	r17
    a6ee:	cf 93       	push	r28
    a6f0:	df 93       	push	r29
    a6f2:	68 2e       	mov	r6, r24
    a6f4:	56 2e       	mov	r5, r22
    a6f6:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a6f8:	fa 01       	movw	r30, r20
    a6fa:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a6fc:	31 96       	adiw	r30, 0x01	; 1
    a6fe:	84 90       	lpm	r8, Z
    a700:	c7 2c       	mov	r12, r7
    a702:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    a704:	00 e0       	ldi	r16, 0x00	; 0
    a706:	10 e0       	ldi	r17, 0x00	; 0
    a708:	91 2c       	mov	r9, r1
    a70a:	98 14       	cp	r9, r8
    a70c:	f1 f0       	breq	.+60     	; 0xa74a <DrawMap2+0x78>
    a70e:	c0 e0       	ldi	r28, 0x00	; 0
    a710:	d0 e0       	ldi	r29, 0x00	; 0
    a712:	58 01       	movw	r10, r16
    a714:	f2 e0       	ldi	r31, 0x02	; 2
    a716:	af 0e       	add	r10, r31
    a718:	b1 1c       	adc	r11, r1
    a71a:	49 2c       	mov	r4, r9
    a71c:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    a71e:	c7 15       	cp	r28, r7
    a720:	80 f4       	brcc	.+32     	; 0xa742 <DrawMap2+0x70>
    a722:	95 01       	movw	r18, r10
    a724:	2c 0f       	add	r18, r28
    a726:	3d 1f       	adc	r19, r29
    a728:	f7 01       	movw	r30, r14
    a72a:	e2 0f       	add	r30, r18
    a72c:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    a72e:	24 91       	lpm	r18, Z
    a730:	42 2f       	mov	r20, r18
    a732:	50 e0       	ldi	r21, 0x00	; 0
    a734:	64 2d       	mov	r22, r4
    a736:	8c 2f       	mov	r24, r28
    a738:	86 0d       	add	r24, r6
    a73a:	0e 94 d5 45 	call	0x8baa	; 0x8baa <SetTile>
    a73e:	21 96       	adiw	r28, 0x01	; 1
    a740:	ee cf       	rjmp	.-36     	; 0xa71e <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    a742:	93 94       	inc	r9
    a744:	0c 0d       	add	r16, r12
    a746:	1d 1d       	adc	r17, r13
    a748:	e0 cf       	rjmp	.-64     	; 0xa70a <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    a74a:	df 91       	pop	r29
    a74c:	cf 91       	pop	r28
    a74e:	1f 91       	pop	r17
    a750:	0f 91       	pop	r16
    a752:	ff 90       	pop	r15
    a754:	ef 90       	pop	r14
    a756:	df 90       	pop	r13
    a758:	cf 90       	pop	r12
    a75a:	bf 90       	pop	r11
    a75c:	af 90       	pop	r10
    a75e:	9f 90       	pop	r9
    a760:	8f 90       	pop	r8
    a762:	7f 90       	pop	r7
    a764:	6f 90       	pop	r6
    a766:	5f 90       	pop	r5
    a768:	4f 90       	pop	r4
    a76a:	08 95       	ret

0000a76c <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    a76c:	df 92       	push	r13
    a76e:	ef 92       	push	r14
    a770:	ff 92       	push	r15
    a772:	0f 93       	push	r16
    a774:	1f 93       	push	r17
    a776:	cf 93       	push	r28
    a778:	df 93       	push	r29
    a77a:	f6 2e       	mov	r15, r22
    a77c:	04 2f       	mov	r16, r20
    a77e:	d2 2e       	mov	r13, r18
    a780:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    a782:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    a784:	8a e0       	ldi	r24, 0x0A	; 10
    a786:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    a788:	01 11       	cpse	r16, r1
    a78a:	02 c0       	rjmp	.+4      	; 0xa790 <PrintByte+0x24>
    a78c:	11 11       	cpse	r17, r1
    a78e:	07 c0       	rjmp	.+14     	; 0xa79e <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    a790:	80 2f       	mov	r24, r16
    a792:	6e 2d       	mov	r22, r14
    a794:	0e 94 96 71 	call	0xe32c	; 0xe32c <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    a798:	40 e1       	ldi	r20, 0x10	; 16
    a79a:	49 0f       	add	r20, r25
    a79c:	05 c0       	rjmp	.+10     	; 0xa7a8 <PrintByte+0x3c>
		}else{
			if(zeropad){
    a79e:	dd 20       	and	r13, r13
    a7a0:	11 f0       	breq	.+4      	; 0xa7a6 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    a7a2:	40 e1       	ldi	r20, 0x10	; 16
    a7a4:	01 c0       	rjmp	.+2      	; 0xa7a8 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    a7a6:	40 e0       	ldi	r20, 0x00	; 0
    a7a8:	6f 2d       	mov	r22, r15
    a7aa:	8c 2f       	mov	r24, r28
    a7ac:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <SetFont>
			}
		}
		val=val/10;
    a7b0:	80 2f       	mov	r24, r16
    a7b2:	6e 2d       	mov	r22, r14
    a7b4:	0e 94 96 71 	call	0xe32c	; 0xe32c <__udivmodqi4>
    a7b8:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    a7ba:	1f 5f       	subi	r17, 0xFF	; 255
    a7bc:	21 97       	sbiw	r28, 0x01	; 1
    a7be:	13 30       	cpi	r17, 0x03	; 3
    a7c0:	19 f7       	brne	.-58     	; 0xa788 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    a7c2:	df 91       	pop	r29
    a7c4:	cf 91       	pop	r28
    a7c6:	1f 91       	pop	r17
    a7c8:	0f 91       	pop	r16
    a7ca:	ff 90       	pop	r15
    a7cc:	ef 90       	pop	r14
    a7ce:	df 90       	pop	r13
    a7d0:	08 95       	ret

0000a7d2 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    a7d2:	0f 93       	push	r16
    a7d4:	1f 93       	push	r17
    a7d6:	cf 93       	push	r28
    a7d8:	df 93       	push	r29
    a7da:	06 2f       	mov	r16, r22
    a7dc:	c4 2f       	mov	r28, r20
    a7de:	d5 2f       	mov	r29, r21
    a7e0:	18 2f       	mov	r17, r24
    a7e2:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    a7e4:	fe 01       	movw	r30, r28
    a7e6:	44 91       	lpm	r20, Z
		if(c!=0){
    a7e8:	44 23       	and	r20, r20
    a7ea:	49 f0       	breq	.+18     	; 0xa7fe <Print+0x2c>
			c=((c&127)-32);			
    a7ec:	4f 77       	andi	r20, 0x7F	; 127
    a7ee:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    a7f0:	60 2f       	mov	r22, r16
    a7f2:	8c 2f       	mov	r24, r28
    a7f4:	81 0f       	add	r24, r17
    a7f6:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <SetFont>
    a7fa:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    a7fc:	f3 cf       	rjmp	.-26     	; 0xa7e4 <Print+0x12>
	
}
    a7fe:	df 91       	pop	r29
    a800:	cf 91       	pop	r28
    a802:	1f 91       	pop	r17
    a804:	0f 91       	pop	r16
    a806:	08 95       	ret

0000a808 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    a808:	40 52       	subi	r20, 0x20	; 32
    a80a:	0c 94 d1 45 	jmp	0x8ba2	; 0x8ba2 <SetFont>

0000a80e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a80e:	0f 93       	push	r16
    a810:	1f 93       	push	r17
    a812:	cf 93       	push	r28
    a814:	df 93       	push	r29
    a816:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a818:	c0 e0       	ldi	r28, 0x00	; 0
    a81a:	d0 e0       	ldi	r29, 0x00	; 0
    a81c:	c0 17       	cp	r28, r16
    a81e:	d1 07       	cpc	r29, r17
    a820:	44 f4       	brge	.+16     	; 0xa832 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    a822:	0e 94 eb 45 	call	0x8bd6	; 0x8bd6 <GetVsyncFlag>
    a826:	88 23       	and	r24, r24
    a828:	e1 f3       	breq	.-8      	; 0xa822 <WaitVsync+0x14>
		ClearVsyncFlag();		
    a82a:	0e 94 ef 45 	call	0x8bde	; 0x8bde <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a82e:	21 96       	adiw	r28, 0x01	; 1
    a830:	f5 cf       	rjmp	.-22     	; 0xa81c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a832:	df 91       	pop	r29
    a834:	cf 91       	pop	r28
    a836:	1f 91       	pop	r17
    a838:	0f 91       	pop	r16
    a83a:	08 95       	ret

0000a83c <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    a83c:	8b e0       	ldi	r24, 0x0B	; 11
    a83e:	99 e0       	ldi	r25, 0x09	; 9
    a840:	0e 94 27 48 	call	0x904e	; 0x904e <InitMusicPlayer>
			SetTileTable(logo_tileset);
    a844:	8b e0       	ldi	r24, 0x0B	; 11
    a846:	91 e0       	ldi	r25, 0x01	; 1
    a848:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <SetTileTable>
			
			//draw logo
			ClearVram();
    a84c:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <ClearVram>
			WaitVsync(15);		
    a850:	8f e0       	ldi	r24, 0x0F	; 15
    a852:	90 e0       	ldi	r25, 0x00	; 0
    a854:	0e 94 07 54 	call	0xa80e	; 0xa80e <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    a858:	41 e0       	ldi	r20, 0x01	; 1
    a85a:	6f ef       	ldi	r22, 0xFF	; 255
    a85c:	80 e0       	ldi	r24, 0x00	; 0
    a85e:	0e 94 1c 49 	call	0x9238	; 0x9238 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a862:	45 ef       	ldi	r20, 0xF5	; 245
    a864:	50 e0       	ldi	r21, 0x00	; 0
    a866:	6c e0       	ldi	r22, 0x0C	; 12
    a868:	8c e0       	ldi	r24, 0x0C	; 12
    a86a:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
			WaitVsync(3);
    a86e:	83 e0       	ldi	r24, 0x03	; 3
    a870:	90 e0       	ldi	r25, 0x00	; 0
    a872:	0e 94 07 54 	call	0xa80e	; 0xa80e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    a876:	44 ee       	ldi	r20, 0xE4	; 228
    a878:	50 e0       	ldi	r21, 0x00	; 0
    a87a:	6c e0       	ldi	r22, 0x0C	; 12
    a87c:	8c e0       	ldi	r24, 0x0C	; 12
    a87e:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
			WaitVsync(2);
    a882:	82 e0       	ldi	r24, 0x02	; 2
    a884:	90 e0       	ldi	r25, 0x00	; 0
    a886:	0e 94 07 54 	call	0xa80e	; 0xa80e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a88a:	45 ef       	ldi	r20, 0xF5	; 245
    a88c:	50 e0       	ldi	r21, 0x00	; 0
    a88e:	6c e0       	ldi	r22, 0x0C	; 12
    a890:	8c e0       	ldi	r24, 0x0C	; 12
    a892:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    a896:	81 e4       	ldi	r24, 0x41	; 65
    a898:	90 e0       	ldi	r25, 0x00	; 0
    a89a:	0e 94 07 54 	call	0xa80e	; 0xa80e <WaitVsync>
			ClearVram();
    a89e:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <ClearVram>
			WaitVsync(20);
    a8a2:	84 e1       	ldi	r24, 0x14	; 20
    a8a4:	90 e0       	ldi	r25, 0x00	; 0
    a8a6:	0c 94 07 54 	jmp	0xa80e	; 0xa80e <WaitVsync>

0000a8aa <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a8aa:	80 93 be 0b 	sts	0x0BBE, r24
	currFadeFrame=0;
    a8ae:	10 92 c2 0b 	sts	0x0BC2, r1
	fadeActive=true;
    a8b2:	81 e0       	ldi	r24, 0x01	; 1
    a8b4:	80 93 c1 0b 	sts	0x0BC1, r24
		
	if(blocking){
    a8b8:	66 23       	and	r22, r22
    a8ba:	21 f0       	breq	.+8      	; 0xa8c4 <doFade+0x1a>
		while(fadeActive==true);
    a8bc:	80 91 c1 0b 	lds	r24, 0x0BC1
    a8c0:	81 11       	cpse	r24, r1
    a8c2:	fc cf       	rjmp	.-8      	; 0xa8bc <doFade+0x12>
    a8c4:	08 95       	ret

0000a8c6 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a8c6:	81 11       	cpse	r24, r1
    a8c8:	03 c0       	rjmp	.+6      	; 0xa8d0 <FadeIn+0xa>
		DDRC=0xff;
    a8ca:	8f ef       	ldi	r24, 0xFF	; 255
    a8cc:	87 b9       	out	0x07, r24	; 7
		return;
    a8ce:	08 95       	ret
	}
	fadeStep=1;
    a8d0:	91 e0       	ldi	r25, 0x01	; 1
    a8d2:	90 93 c3 0b 	sts	0x0BC3, r25
	fadeDir=1;
    a8d6:	90 93 bf 0b 	sts	0x0BBF, r25
	doFade(speed,blocking);
    a8da:	0c 94 55 54 	jmp	0xa8aa	; 0xa8aa <doFade>

0000a8de <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a8de:	81 11       	cpse	r24, r1
    a8e0:	02 c0       	rjmp	.+4      	; 0xa8e6 <FadeOut+0x8>
		DDRC=0;
    a8e2:	17 b8       	out	0x07, r1	; 7
		return;
    a8e4:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a8e6:	9c e0       	ldi	r25, 0x0C	; 12
    a8e8:	90 93 c3 0b 	sts	0x0BC3, r25
	fadeDir=-1;
    a8ec:	9f ef       	ldi	r25, 0xFF	; 255
    a8ee:	90 93 bf 0b 	sts	0x0BBF, r25
	doFade(speed,blocking);
    a8f2:	0c 94 55 54 	jmp	0xa8aa	; 0xa8aa <doFade>

0000a8f6 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a8f6:	80 91 c1 0b 	lds	r24, 0x0BC1
    a8fa:	88 23       	and	r24, r24
    a8fc:	01 f1       	breq	.+64     	; 0xa93e <ProcessFading+0x48>
		if(currFadeFrame==0){
    a8fe:	80 91 c2 0b 	lds	r24, 0x0BC2
    a902:	81 11       	cpse	r24, r1
    a904:	19 c0       	rjmp	.+50     	; 0xa938 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    a906:	80 91 be 0b 	lds	r24, 0x0BBE
    a90a:	80 93 c2 0b 	sts	0x0BC2, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a90e:	e0 91 c3 0b 	lds	r30, 0x0BC3
    a912:	f0 e0       	ldi	r31, 0x00	; 0
    a914:	e9 52       	subi	r30, 0x29	; 41
    a916:	ff 4f       	sbci	r31, 0xFF	; 255
    a918:	e4 91       	lpm	r30, Z
    a91a:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a91c:	90 91 bf 0b 	lds	r25, 0x0BBF
    a920:	80 91 c3 0b 	lds	r24, 0x0BC3
    a924:	89 0f       	add	r24, r25
    a926:	80 93 c3 0b 	sts	0x0BC3, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a92a:	88 23       	and	r24, r24
    a92c:	11 f0       	breq	.+4      	; 0xa932 <ProcessFading+0x3c>
    a92e:	8d 30       	cpi	r24, 0x0D	; 13
    a930:	31 f4       	brne	.+12     	; 0xa93e <ProcessFading+0x48>
				fadeActive=false;
    a932:	10 92 c1 0b 	sts	0x0BC1, r1
    a936:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a938:	81 50       	subi	r24, 0x01	; 1
    a93a:	80 93 c2 0b 	sts	0x0BC2, r24
    a93e:	08 95       	ret

0000a940 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    a940:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <ProcessFading>
		ProcessSprites();
    a944:	0c 94 14 52 	jmp	0xa428	; 0xa428 <ProcessSprites>

0000a948 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    a948:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a94a:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a94c:	93 81       	ldd	r25, Z+3	; 0x03
    a94e:	9f 5f       	subi	r25, 0xFF	; 255
    a950:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a952:	22 81       	ldd	r18, Z+2	; 0x02
    a954:	80 81       	ld	r24, Z
    a956:	92 17       	cp	r25, r18
    a958:	38 f4       	brcc	.+14     	; 0xa968 <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    a95a:	e8 0f       	add	r30, r24
    a95c:	f1 1d       	adc	r31, r1
    a95e:	e8 0f       	add	r30, r24
    a960:	f1 1d       	adc	r31, r1
    a962:	86 81       	ldd	r24, Z+6	; 0x06
    a964:	97 81       	ldd	r25, Z+7	; 0x07
    a966:	08 95       	ret
	}
	anim->frame_count = 0;
    a968:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a96a:	90 e0       	ldi	r25, 0x00	; 0
    a96c:	01 96       	adiw	r24, 0x01	; 1
    a96e:	61 81       	ldd	r22, Z+1	; 0x01
    a970:	70 e0       	ldi	r23, 0x00	; 0
    a972:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    a976:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a978:	81 11       	cpse	r24, r1
    a97a:	02 c0       	rjmp	.+4      	; 0xa980 <LBGetNextFrame+0x38>
    a97c:	21 e0       	ldi	r18, 0x01	; 1
    a97e:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    a980:	99 27       	eor	r25, r25
    a982:	03 96       	adiw	r24, 0x03	; 3
    a984:	88 0f       	add	r24, r24
    a986:	99 1f       	adc	r25, r25
    a988:	e8 0f       	add	r30, r24
    a98a:	f9 1f       	adc	r31, r25
    a98c:	80 81       	ld	r24, Z
    a98e:	91 81       	ldd	r25, Z+1	; 0x01
}
    a990:	08 95       	ret

0000a992 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    a992:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a994:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a996:	93 81       	ldd	r25, Z+3	; 0x03
    a998:	9f 5f       	subi	r25, 0xFF	; 255
    a99a:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a99c:	22 81       	ldd	r18, Z+2	; 0x02
    a99e:	80 81       	ld	r24, Z
    a9a0:	92 17       	cp	r25, r18
    a9a2:	e0 f0       	brcs	.+56     	; 0xa9dc <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    a9a4:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    a9a6:	95 81       	ldd	r25, Z+5	; 0x05
    a9a8:	99 23       	and	r25, r25
    a9aa:	49 f0       	breq	.+18     	; 0xa9be <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    a9ac:	81 50       	subi	r24, 0x01	; 1
    a9ae:	10 f0       	brcs	.+4      	; 0xa9b4 <LBGetNextFrameReverse+0x22>
    a9b0:	80 83       	st	Z, r24
    a9b2:	13 c0       	rjmp	.+38     	; 0xa9da <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    a9b4:	10 82       	st	Z, r1
			anim->looped = 1;
    a9b6:	81 e0       	ldi	r24, 0x01	; 1
    a9b8:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    a9ba:	15 82       	std	Z+5, r1	; 0x05
    a9bc:	0e c0       	rjmp	.+28     	; 0xa9da <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a9be:	21 81       	ldd	r18, Z+1	; 0x01
    a9c0:	90 e0       	ldi	r25, 0x00	; 0
    a9c2:	01 96       	adiw	r24, 0x01	; 1
    a9c4:	62 2f       	mov	r22, r18
    a9c6:	70 e0       	ldi	r23, 0x00	; 0
    a9c8:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    a9cc:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    a9ce:	81 11       	cpse	r24, r1
    a9d0:	04 c0       	rjmp	.+8      	; 0xa9da <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    a9d2:	81 e0       	ldi	r24, 0x01	; 1
    a9d4:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    a9d6:	21 50       	subi	r18, 0x01	; 1
    a9d8:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    a9da:	80 81       	ld	r24, Z
    a9dc:	e8 0f       	add	r30, r24
    a9de:	f1 1d       	adc	r31, r1
    a9e0:	e8 0f       	add	r30, r24
    a9e2:	f1 1d       	adc	r31, r1
    a9e4:	86 81       	ldd	r24, Z+6	; 0x06
    a9e6:	97 81       	ldd	r25, Z+7	; 0x07
}
    a9e8:	08 95       	ret

0000a9ea <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a9ea:	0f 93       	push	r16
    a9ec:	1f 93       	push	r17
    a9ee:	cf 93       	push	r28
    a9f0:	df 93       	push	r29
    a9f2:	1f 92       	push	r1
    a9f4:	cd b7       	in	r28, 0x3d	; 61
    a9f6:	de b7       	in	r29, 0x3e	; 62
    a9f8:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    a9fa:	86 2f       	mov	r24, r22
    a9fc:	69 83       	std	Y+1, r22	; 0x01
    a9fe:	0e 94 f5 45 	call	0x8bea	; 0x8bea <ReadJoypad>
    aa02:	d8 01       	movw	r26, r16
    aa04:	15 96       	adiw	r26, 0x05	; 5
    aa06:	9c 93       	st	X, r25
    aa08:	8e 93       	st	-X, r24
    aa0a:	14 97       	sbiw	r26, 0x04	; 4
    aa0c:	69 81       	ldd	r22, Y+1	; 0x01
    aa0e:	e6 2f       	mov	r30, r22
    aa10:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    aa12:	00 97       	sbiw	r24, 0x00	; 0
    aa14:	51 f0       	breq	.+20     	; 0xaa2a <LBGetJoyPadState+0x40>
    aa16:	df 01       	movw	r26, r30
    aa18:	aa 0f       	add	r26, r26
    aa1a:	bb 1f       	adc	r27, r27
    aa1c:	a5 5c       	subi	r26, 0xC5	; 197
    aa1e:	b4 4f       	sbci	r27, 0xF4	; 244
    aa20:	2d 91       	ld	r18, X+
    aa22:	3c 91       	ld	r19, X
    aa24:	82 17       	cp	r24, r18
    aa26:	93 07       	cpc	r25, r19
    aa28:	21 f0       	breq	.+8      	; 0xaa32 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    aa2a:	d8 01       	movw	r26, r16
    aa2c:	16 96       	adiw	r26, 0x06	; 6
    aa2e:	1c 92       	st	X, r1
    aa30:	07 c0       	rjmp	.+14     	; 0xaa40 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    aa32:	d8 01       	movw	r26, r16
    aa34:	16 96       	adiw	r26, 0x06	; 6
    aa36:	2c 91       	ld	r18, X
    aa38:	16 97       	sbiw	r26, 0x06	; 6
    aa3a:	2f 5f       	subi	r18, 0xFF	; 255
    aa3c:	16 96       	adiw	r26, 0x06	; 6
    aa3e:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    aa40:	ee 0f       	add	r30, r30
    aa42:	ff 1f       	adc	r31, r31
    aa44:	e5 5c       	subi	r30, 0xC5	; 197
    aa46:	f4 4f       	sbci	r31, 0xF4	; 244
    aa48:	20 81       	ld	r18, Z
    aa4a:	31 81       	ldd	r19, Z+1	; 0x01
    aa4c:	a9 01       	movw	r20, r18
    aa4e:	40 95       	com	r20
    aa50:	50 95       	com	r21
    aa52:	48 23       	and	r20, r24
    aa54:	59 23       	and	r21, r25
    aa56:	d8 01       	movw	r26, r16
    aa58:	11 96       	adiw	r26, 0x01	; 1
    aa5a:	5c 93       	st	X, r21
    aa5c:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    aa5e:	ac 01       	movw	r20, r24
    aa60:	40 95       	com	r20
    aa62:	50 95       	com	r21
    aa64:	24 23       	and	r18, r20
    aa66:	35 23       	and	r19, r21
    aa68:	13 96       	adiw	r26, 0x03	; 3
    aa6a:	3c 93       	st	X, r19
    aa6c:	2e 93       	st	-X, r18
    aa6e:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    aa70:	91 83       	std	Z+1, r25	; 0x01
    aa72:	80 83       	st	Z, r24
}
    aa74:	0f 90       	pop	r0
    aa76:	df 91       	pop	r29
    aa78:	cf 91       	pop	r28
    aa7a:	1f 91       	pop	r17
    aa7c:	0f 91       	pop	r16
    aa7e:	08 95       	ret

0000aa80 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    aa80:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    aa82:	fb 01       	movw	r30, r22
    aa84:	2e 2f       	mov	r18, r30
    aa86:	23 1b       	sub	r18, r19
    aa88:	24 17       	cp	r18, r20
    aa8a:	28 f4       	brcc	.+10     	; 0xaa96 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    aa8c:	21 91       	ld	r18, Z+
    aa8e:	dc 01       	movw	r26, r24
    aa90:	2d 93       	st	X+, r18
    aa92:	cd 01       	movw	r24, r26
    aa94:	f7 cf       	rjmp	.-18     	; 0xaa84 <LBCopyChars+0x4>
	}
}
    aa96:	08 95       	ret

0000aa98 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    aa98:	af 92       	push	r10
    aa9a:	bf 92       	push	r11
    aa9c:	cf 92       	push	r12
    aa9e:	df 92       	push	r13
    aaa0:	ef 92       	push	r14
    aaa2:	ff 92       	push	r15
    aaa4:	0f 93       	push	r16
    aaa6:	1f 93       	push	r17
    aaa8:	cf 93       	push	r28
    aaaa:	df 93       	push	r29
    aaac:	1f 92       	push	r1
    aaae:	cd b7       	in	r28, 0x3d	; 61
    aab0:	de b7       	in	r29, 0x3e	; 62
    aab2:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    aab4:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    aab6:	c6 2e       	mov	r12, r22
    aab8:	d1 2c       	mov	r13, r1
    aaba:	90 e0       	ldi	r25, 0x00	; 0
    aabc:	5c 01       	movw	r10, r24
    aabe:	a4 1a       	sub	r10, r20
    aac0:	b5 0a       	sbc	r11, r21
    aac2:	80 2f       	mov	r24, r16
    aac4:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    aac6:	82 17       	cp	r24, r18
    aac8:	60 f4       	brcc	.+24     	; 0xaae2 <LBPrintStr+0x4a>
    aaca:	c5 01       	movw	r24, r10
    aacc:	80 0f       	add	r24, r16
    aace:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    aad0:	f8 01       	movw	r30, r16
    aad2:	41 91       	ld	r20, Z+
    aad4:	8f 01       	movw	r16, r30
    aad6:	b6 01       	movw	r22, r12
    aad8:	29 83       	std	Y+1, r18	; 0x01
    aada:	0e 94 04 54 	call	0xa808	; 0xa808 <PrintChar>
    aade:	29 81       	ldd	r18, Y+1	; 0x01
    aae0:	f0 cf       	rjmp	.-32     	; 0xaac2 <LBPrintStr+0x2a>
	}
}
    aae2:	0f 90       	pop	r0
    aae4:	df 91       	pop	r29
    aae6:	cf 91       	pop	r28
    aae8:	1f 91       	pop	r17
    aaea:	0f 91       	pop	r16
    aaec:	ff 90       	pop	r15
    aaee:	ef 90       	pop	r14
    aaf0:	df 90       	pop	r13
    aaf2:	cf 90       	pop	r12
    aaf4:	bf 90       	pop	r11
    aaf6:	af 90       	pop	r10
    aaf8:	08 95       	ret

0000aafa <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    aafa:	af 92       	push	r10
    aafc:	cf 92       	push	r12
    aafe:	ef 92       	push	r14
    ab00:	ff 92       	push	r15
    ab02:	0f 93       	push	r16
    ab04:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    ab06:	70 e0       	ldi	r23, 0x00	; 0
    ab08:	f1 2c       	mov	r15, r1
    ab0a:	fb 01       	movw	r30, r22
    ab0c:	e2 0f       	add	r30, r18
    ab0e:	f1 1d       	adc	r31, r1
    ab10:	ee 16       	cp	r14, r30
    ab12:	ff 06       	cpc	r15, r31
    ab14:	a4 f4       	brge	.+40     	; 0xab3e <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    ab16:	ea 0c       	add	r14, r10
    ab18:	f1 1c       	adc	r15, r1
    ab1a:	6e 15       	cp	r22, r14
    ab1c:	7f 05       	cpc	r23, r15
    ab1e:	7c f4       	brge	.+30     	; 0xab3e <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    ab20:	28 2f       	mov	r18, r24
    ab22:	30 e0       	ldi	r19, 0x00	; 0
    ab24:	10 e0       	ldi	r17, 0x00	; 0
    ab26:	c9 01       	movw	r24, r18
    ab28:	84 0f       	add	r24, r20
    ab2a:	91 1d       	adc	r25, r1
    ab2c:	08 17       	cp	r16, r24
    ab2e:	19 07       	cpc	r17, r25
    ab30:	34 f4       	brge	.+12     	; 0xab3e <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    ab32:	0c 0d       	add	r16, r12
    ab34:	11 1d       	adc	r17, r1
    ab36:	81 e0       	ldi	r24, 0x01	; 1
    ab38:	20 17       	cp	r18, r16
    ab3a:	31 07       	cpc	r19, r17
    ab3c:	0c f0       	brlt	.+2      	; 0xab40 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    ab3e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    ab40:	1f 91       	pop	r17
    ab42:	0f 91       	pop	r16
    ab44:	ff 90       	pop	r15
    ab46:	ef 90       	pop	r14
    ab48:	cf 90       	pop	r12
    ab4a:	af 90       	pop	r10
    ab4c:	08 95       	ret

0000ab4e <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    ab4e:	2f 92       	push	r2
    ab50:	3f 92       	push	r3
    ab52:	4f 92       	push	r4
    ab54:	5f 92       	push	r5
    ab56:	6f 92       	push	r6
    ab58:	7f 92       	push	r7
    ab5a:	8f 92       	push	r8
    ab5c:	9f 92       	push	r9
    ab5e:	af 92       	push	r10
    ab60:	bf 92       	push	r11
    ab62:	cf 92       	push	r12
    ab64:	df 92       	push	r13
    ab66:	ef 92       	push	r14
    ab68:	ff 92       	push	r15
    ab6a:	0f 93       	push	r16
    ab6c:	1f 93       	push	r17
    ab6e:	cf 93       	push	r28
    ab70:	df 93       	push	r29
    ab72:	00 d0       	rcall	.+0      	; 0xab74 <LBLineIntersect+0x26>
    ab74:	00 d0       	rcall	.+0      	; 0xab76 <LBLineIntersect+0x28>
    ab76:	cd b7       	in	r28, 0x3d	; 61
    ab78:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    ab7a:	f1 2c       	mov	r15, r1
    ab7c:	8a 2c       	mov	r8, r10
    ab7e:	91 2c       	mov	r9, r1
    ab80:	8e 18       	sub	r8, r14
    ab82:	9f 08       	sbc	r9, r15
    ab84:	a8 2e       	mov	r10, r24
    ab86:	b1 2c       	mov	r11, r1
    ab88:	24 2e       	mov	r2, r20
    ab8a:	31 2c       	mov	r3, r1
    ab8c:	2a 18       	sub	r2, r10
    ab8e:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    ab90:	10 e0       	ldi	r17, 0x00	; 0
    ab92:	d1 2c       	mov	r13, r1
    ab94:	c0 1a       	sub	r12, r16
    ab96:	d1 0a       	sbc	r13, r17
    ab98:	46 2f       	mov	r20, r22
    ab9a:	50 e0       	ldi	r21, 0x00	; 0
    ab9c:	5c 83       	std	Y+4, r21	; 0x04
    ab9e:	4b 83       	std	Y+3, r20	; 0x03
    aba0:	82 2f       	mov	r24, r18
    aba2:	90 e0       	ldi	r25, 0x00	; 0
    aba4:	9a 83       	std	Y+2, r25	; 0x02
    aba6:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    aba8:	82 9c       	mul	r8, r2
    abaa:	90 01       	movw	r18, r0
    abac:	83 9c       	mul	r8, r3
    abae:	30 0d       	add	r19, r0
    abb0:	92 9c       	mul	r9, r2
    abb2:	30 0d       	add	r19, r0
    abb4:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    abb6:	ca 01       	movw	r24, r20
    abb8:	e9 81       	ldd	r30, Y+1	; 0x01
    abba:	fa 81       	ldd	r31, Y+2	; 0x02
    abbc:	8e 1b       	sub	r24, r30
    abbe:	9f 0b       	sbc	r25, r31
    abc0:	c8 9e       	mul	r12, r24
    abc2:	b0 01       	movw	r22, r0
    abc4:	c9 9e       	mul	r12, r25
    abc6:	70 0d       	add	r23, r0
    abc8:	d8 9e       	mul	r13, r24
    abca:	70 0d       	add	r23, r0
    abcc:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    abce:	62 0f       	add	r22, r18
    abd0:	73 1f       	adc	r23, r19
    abd2:	88 27       	eor	r24, r24
    abd4:	77 fd       	sbrc	r23, 7
    abd6:	80 95       	com	r24
    abd8:	98 2f       	mov	r25, r24
    abda:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    abde:	2b 01       	movw	r4, r22
    abe0:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    abe2:	20 e0       	ldi	r18, 0x00	; 0
    abe4:	30 e0       	ldi	r19, 0x00	; 0
    abe6:	a9 01       	movw	r20, r18
    abe8:	0e 94 2f 72 	call	0xe45e	; 0xe45e <__cmpsf2>
    abec:	88 23       	and	r24, r24
    abee:	09 f4       	brne	.+2      	; 0xabf2 <LBLineIntersect+0xa4>
    abf0:	6c c0       	rjmp	.+216    	; 0xacca <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    abf2:	4b 81       	ldd	r20, Y+3	; 0x03
    abf4:	5c 81       	ldd	r21, Y+4	; 0x04
    abf6:	4e 19       	sub	r20, r14
    abf8:	5f 09       	sbc	r21, r15
    abfa:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    abfc:	0a 19       	sub	r16, r10
    abfe:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    ac00:	c4 9e       	mul	r12, r20
    ac02:	c0 01       	movw	r24, r0
    ac04:	c5 9e       	mul	r12, r21
    ac06:	90 0d       	add	r25, r0
    ac08:	d4 9e       	mul	r13, r20
    ac0a:	90 0d       	add	r25, r0
    ac0c:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    ac0e:	80 9e       	mul	r8, r16
    ac10:	b0 01       	movw	r22, r0
    ac12:	81 9e       	mul	r8, r17
    ac14:	70 0d       	add	r23, r0
    ac16:	90 9e       	mul	r9, r16
    ac18:	70 0d       	add	r23, r0
    ac1a:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    ac1c:	68 0f       	add	r22, r24
    ac1e:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    ac20:	88 27       	eor	r24, r24
    ac22:	77 fd       	sbrc	r23, 7
    ac24:	80 95       	com	r24
    ac26:	98 2f       	mov	r25, r24
    ac28:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    ac2c:	a3 01       	movw	r20, r6
    ac2e:	92 01       	movw	r18, r4
    ac30:	0e 94 33 72 	call	0xe466	; 0xe466 <__divsf3>
    ac34:	4b 01       	movw	r8, r22
    ac36:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    ac38:	20 e0       	ldi	r18, 0x00	; 0
    ac3a:	30 e0       	ldi	r19, 0x00	; 0
    ac3c:	a9 01       	movw	r20, r18
    ac3e:	0e 94 2f 72 	call	0xe45e	; 0xe45e <__cmpsf2>
    ac42:	87 fd       	sbrc	r24, 7
    ac44:	42 c0       	rjmp	.+132    	; 0xacca <LBLineIntersect+0x17c>
    ac46:	20 e0       	ldi	r18, 0x00	; 0
    ac48:	30 e0       	ldi	r19, 0x00	; 0
    ac4a:	40 e8       	ldi	r20, 0x80	; 128
    ac4c:	5f e3       	ldi	r21, 0x3F	; 63
    ac4e:	c5 01       	movw	r24, r10
    ac50:	b4 01       	movw	r22, r8
    ac52:	0e 94 7e 73 	call	0xe6fc	; 0xe6fc <__gesf2>
    ac56:	18 16       	cp	r1, r24
    ac58:	c4 f1       	brlt	.+112    	; 0xacca <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    ac5a:	2e 9c       	mul	r2, r14
    ac5c:	b0 01       	movw	r22, r0
    ac5e:	2f 9c       	mul	r2, r15
    ac60:	70 0d       	add	r23, r0
    ac62:	3e 9c       	mul	r3, r14
    ac64:	70 0d       	add	r23, r0
    ac66:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    ac68:	29 81       	ldd	r18, Y+1	; 0x01
    ac6a:	3a 81       	ldd	r19, Y+2	; 0x02
    ac6c:	8b 81       	ldd	r24, Y+3	; 0x03
    ac6e:	9c 81       	ldd	r25, Y+4	; 0x04
    ac70:	28 1b       	sub	r18, r24
    ac72:	39 0b       	sbc	r19, r25
    ac74:	20 9f       	mul	r18, r16
    ac76:	c0 01       	movw	r24, r0
    ac78:	21 9f       	mul	r18, r17
    ac7a:	90 0d       	add	r25, r0
    ac7c:	30 9f       	mul	r19, r16
    ac7e:	90 0d       	add	r25, r0
    ac80:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    ac82:	68 0f       	add	r22, r24
    ac84:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    ac86:	88 27       	eor	r24, r24
    ac88:	77 fd       	sbrc	r23, 7
    ac8a:	80 95       	com	r24
    ac8c:	98 2f       	mov	r25, r24
    ac8e:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    ac92:	a3 01       	movw	r20, r6
    ac94:	92 01       	movw	r18, r4
    ac96:	0e 94 33 72 	call	0xe466	; 0xe466 <__divsf3>
    ac9a:	6b 01       	movw	r12, r22
    ac9c:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    ac9e:	20 e0       	ldi	r18, 0x00	; 0
    aca0:	30 e0       	ldi	r19, 0x00	; 0
    aca2:	a9 01       	movw	r20, r18
    aca4:	0e 94 2f 72 	call	0xe45e	; 0xe45e <__cmpsf2>
    aca8:	87 fd       	sbrc	r24, 7
    acaa:	0f c0       	rjmp	.+30     	; 0xacca <LBLineIntersect+0x17c>
    acac:	11 e0       	ldi	r17, 0x01	; 1
    acae:	20 e0       	ldi	r18, 0x00	; 0
    acb0:	30 e0       	ldi	r19, 0x00	; 0
    acb2:	40 e8       	ldi	r20, 0x80	; 128
    acb4:	5f e3       	ldi	r21, 0x3F	; 63
    acb6:	c7 01       	movw	r24, r14
    acb8:	b6 01       	movw	r22, r12
    acba:	0e 94 7e 73 	call	0xe6fc	; 0xe6fc <__gesf2>
    acbe:	18 16       	cp	r1, r24
    acc0:	0c f0       	brlt	.+2      	; 0xacc4 <LBLineIntersect+0x176>
    acc2:	10 e0       	ldi	r17, 0x00	; 0
    acc4:	81 e0       	ldi	r24, 0x01	; 1
    acc6:	81 27       	eor	r24, r17
    acc8:	01 c0       	rjmp	.+2      	; 0xaccc <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    acca:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    accc:	0f 90       	pop	r0
    acce:	0f 90       	pop	r0
    acd0:	0f 90       	pop	r0
    acd2:	0f 90       	pop	r0
    acd4:	df 91       	pop	r29
    acd6:	cf 91       	pop	r28
    acd8:	1f 91       	pop	r17
    acda:	0f 91       	pop	r16
    acdc:	ff 90       	pop	r15
    acde:	ef 90       	pop	r14
    ace0:	df 90       	pop	r13
    ace2:	cf 90       	pop	r12
    ace4:	bf 90       	pop	r11
    ace6:	af 90       	pop	r10
    ace8:	9f 90       	pop	r9
    acea:	8f 90       	pop	r8
    acec:	7f 90       	pop	r7
    acee:	6f 90       	pop	r6
    acf0:	5f 90       	pop	r5
    acf2:	4f 90       	pop	r4
    acf4:	3f 90       	pop	r3
    acf6:	2f 90       	pop	r2
    acf8:	08 95       	ret

0000acfa <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    acfa:	0f 93       	push	r16
    acfc:	1f 93       	push	r17
    acfe:	cf 93       	push	r28
    ad00:	df 93       	push	r29
    ad02:	8c 01       	movw	r16, r24
    ad04:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    ad06:	80 91 39 0b 	lds	r24, 0x0B39
    ad0a:	90 91 3a 0b 	lds	r25, 0x0B3A
    ad0e:	89 2b       	or	r24, r25
    ad10:	31 f4       	brne	.+12     	; 0xad1e <LBRandom+0x24>
    ad12:	0e 94 35 46 	call	0x8c6a	; 0x8c6a <GetRandomSeed>
    ad16:	90 93 3a 0b 	sts	0x0B3A, r25
    ad1a:	80 93 39 0b 	sts	0x0B39, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    ad1e:	90 91 38 0b 	lds	r25, 0x0B38
    ad22:	20 91 39 0b 	lds	r18, 0x0B39
    ad26:	30 91 3a 0b 	lds	r19, 0x0B3A
    ad2a:	09 2e       	mov	r0, r25
    ad2c:	02 c0       	rjmp	.+4      	; 0xad32 <LBRandom+0x38>
    ad2e:	36 95       	lsr	r19
    ad30:	27 95       	ror	r18
    ad32:	0a 94       	dec	r0
    ad34:	e2 f7       	brpl	.-8      	; 0xad2e <LBRandom+0x34>
	unsigned int delta = to - from;
    ad36:	be 01       	movw	r22, r28
    ad38:	60 1b       	sub	r22, r16
    ad3a:	71 0b       	sbc	r23, r17

	shift_count++;
    ad3c:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    ad3e:	90 31       	cpi	r25, 0x10	; 16
    ad40:	18 f4       	brcc	.+6      	; 0xad48 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    ad42:	90 93 38 0b 	sts	0x0B38, r25
    ad46:	02 c0       	rjmp	.+4      	; 0xad4c <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    ad48:	10 92 38 0b 	sts	0x0B38, r1

	return from + ((delta + shifted) % delta);
    ad4c:	cb 01       	movw	r24, r22
    ad4e:	82 0f       	add	r24, r18
    ad50:	93 1f       	adc	r25, r19
    ad52:	0e 94 a2 71 	call	0xe344	; 0xe344 <__udivmodhi4>
}
    ad56:	80 0f       	add	r24, r16
    ad58:	91 1f       	adc	r25, r17
    ad5a:	df 91       	pop	r29
    ad5c:	cf 91       	pop	r28
    ad5e:	1f 91       	pop	r17
    ad60:	0f 91       	pop	r16
    ad62:	08 95       	ret

0000ad64 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    ad64:	cf 93       	push	r28
    ad66:	df 93       	push	r29
    ad68:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    ad6a:	c0 e0       	ldi	r28, 0x00	; 0
    ad6c:	cd 17       	cp	r28, r29
    ad6e:	31 f0       	breq	.+12     	; 0xad7c <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    ad70:	8f ef       	ldi	r24, 0xFF	; 255
    ad72:	9f ef       	ldi	r25, 0xFF	; 255
    ad74:	0e 94 01 46 	call	0x8c02	; 0x8c02 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    ad78:	cf 5f       	subi	r28, 0xFF	; 255
    ad7a:	f8 cf       	rjmp	.-16     	; 0xad6c <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    ad7c:	df 91       	pop	r29
    ad7e:	cf 91       	pop	r28
    ad80:	08 95       	ret

0000ad82 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    ad82:	21 e9       	ldi	r18, 0x91	; 145
    ad84:	30 e0       	ldi	r19, 0x00	; 0
    ad86:	fc 01       	movw	r30, r24
    ad88:	21 93       	st	Z+, r18
    ad8a:	31 93       	st	Z+, r19
    ad8c:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    ad8e:	4e e1       	ldi	r20, 0x1E	; 30
    ad90:	50 e0       	ldi	r21, 0x00	; 0
    ad92:	6b e2       	ldi	r22, 0x2B	; 43
    ad94:	79 e0       	ldi	r23, 0x09	; 9
    ad96:	0c 94 e5 73 	jmp	0xe7ca	; 0xe7ca <memcpy_P>

0000ad9a <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    ad9a:	20 e9       	ldi	r18, 0x90	; 144
    ad9c:	30 e0       	ldi	r19, 0x00	; 0
    ad9e:	fc 01       	movw	r30, r24
    ada0:	21 93       	st	Z+, r18
    ada2:	31 93       	st	Z+, r19
    ada4:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    ada6:	4e e1       	ldi	r20, 0x1E	; 30
    ada8:	50 e0       	ldi	r21, 0x00	; 0
    adaa:	69 e4       	ldi	r22, 0x49	; 73
    adac:	79 e0       	ldi	r23, 0x09	; 9
    adae:	0c 94 e5 73 	jmp	0xe7ca	; 0xe7ca <memcpy_P>

0000adb2 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    adb2:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    adb4:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    adb6:	16 86       	std	Z+14, r1	; 0x0e
    adb8:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    adba:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    adbc:	73 e0       	ldi	r23, 0x03	; 3
    adbe:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    adc0:	65 e0       	ldi	r22, 0x05	; 5
    adc2:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    adc4:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    adc6:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    adc8:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    adca:	42 ef       	ldi	r20, 0xF2	; 242
    adcc:	52 e8       	ldi	r21, 0x82	; 130
    adce:	50 87       	std	Z+8, r21	; 0x08
    add0:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    add2:	2f ee       	ldi	r18, 0xEF	; 239
    add4:	32 e8       	ldi	r19, 0x82	; 130
    add6:	32 87       	std	Z+10, r19	; 0x0a
    add8:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    adda:	8c ee       	ldi	r24, 0xEC	; 236
    addc:	92 e8       	ldi	r25, 0x82	; 130
    adde:	94 87       	std	Z+12, r25	; 0x0c
    ade0:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    ade2:	14 8e       	std	Z+28, r1	; 0x1c
    ade4:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    ade6:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    ade8:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    adea:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    adec:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    adee:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    adf0:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    adf2:	56 8b       	std	Z+22, r21	; 0x16
    adf4:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    adf6:	30 8f       	std	Z+24, r19	; 0x18
    adf8:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    adfa:	92 8f       	std	Z+26, r25	; 0x1a
    adfc:	81 8f       	std	Z+25, r24	; 0x19
    adfe:	08 95       	ret

0000ae00 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    ae00:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    ae02:	15 86       	std	Z+13, r1	; 0x0d
    ae04:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    ae06:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    ae08:	83 e0       	ldi	r24, 0x03	; 3
    ae0a:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    ae0c:	8e e1       	ldi	r24, 0x1E	; 30
    ae0e:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    ae10:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    ae12:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    ae14:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    ae16:	88 ec       	ldi	r24, 0xC8	; 200
    ae18:	92 e8       	ldi	r25, 0x82	; 130
    ae1a:	97 83       	std	Z+7, r25	; 0x07
    ae1c:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    ae1e:	85 ec       	ldi	r24, 0xC5	; 197
    ae20:	92 e8       	ldi	r25, 0x82	; 130
    ae22:	91 87       	std	Z+9, r25	; 0x09
    ae24:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    ae26:	82 ec       	ldi	r24, 0xC2	; 194
    ae28:	92 e8       	ldi	r25, 0x82	; 130
    ae2a:	93 87       	std	Z+11, r25	; 0x0b
    ae2c:	82 87       	std	Z+10, r24	; 0x0a
    ae2e:	08 95       	ret

0000ae30 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    ae30:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    ae32:	15 86       	std	Z+13, r1	; 0x0d
    ae34:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    ae36:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    ae38:	82 e0       	ldi	r24, 0x02	; 2
    ae3a:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    ae3c:	8c e3       	ldi	r24, 0x3C	; 60
    ae3e:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    ae40:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    ae42:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    ae44:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    ae46:	86 e5       	ldi	r24, 0x56	; 86
    ae48:	90 e8       	ldi	r25, 0x80	; 128
    ae4a:	97 83       	std	Z+7, r25	; 0x07
    ae4c:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    ae4e:	8c e8       	ldi	r24, 0x8C	; 140
    ae50:	91 e8       	ldi	r25, 0x81	; 129
    ae52:	91 87       	std	Z+9, r25	; 0x09
    ae54:	80 87       	std	Z+8, r24	; 0x08
    ae56:	08 95       	ret

0000ae58 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    ae58:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    ae5a:	88 e7       	ldi	r24, 0x78	; 120
    ae5c:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    ae5e:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    ae60:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    ae62:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    ae64:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    ae66:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    ae68:	84 e0       	ldi	r24, 0x04	; 4
    ae6a:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    ae6c:	66 23       	and	r22, r22
    ae6e:	11 f0       	breq	.+4      	; 0xae74 <init_shot_state+0x1c>
    ae70:	85 e0       	ldi	r24, 0x05	; 5
    ae72:	01 c0       	rjmp	.+2      	; 0xae76 <init_shot_state+0x1e>
    ae74:	81 e0       	ldi	r24, 0x01	; 1
    ae76:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    ae78:	80 e0       	ldi	r24, 0x00	; 0
    ae7a:	90 e0       	ldi	r25, 0x00	; 0
    ae7c:	a0 e7       	ldi	r26, 0x70	; 112
    ae7e:	b3 e4       	ldi	r27, 0x43	; 67
    ae80:	83 83       	std	Z+3, r24	; 0x03
    ae82:	94 83       	std	Z+4, r25	; 0x04
    ae84:	a5 83       	std	Z+5, r26	; 0x05
    ae86:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    ae88:	17 82       	std	Z+7, r1	; 0x07
    ae8a:	10 86       	std	Z+8, r1	; 0x08
    ae8c:	11 86       	std	Z+9, r1	; 0x09
    ae8e:	12 86       	std	Z+10, r1	; 0x0a
    ae90:	08 95       	ret

0000ae92 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    ae92:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    ae94:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    ae96:	82 e0       	ldi	r24, 0x02	; 2
    ae98:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    ae9a:	85 e0       	ldi	r24, 0x05	; 5
    ae9c:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    ae9e:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    aea0:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    aea2:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    aea4:	61 11       	cpse	r22, r1
    aea6:	03 c0       	rjmp	.+6      	; 0xaeae <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    aea8:	80 e6       	ldi	r24, 0x60	; 96
    aeaa:	99 e4       	ldi	r25, 0x49	; 73
    aeac:	13 c0       	rjmp	.+38     	; 0xaed4 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    aeae:	61 30       	cpi	r22, 0x01	; 1
    aeb0:	79 f4       	brne	.+30     	; 0xaed0 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    aeb2:	8d e5       	ldi	r24, 0x5D	; 93
    aeb4:	99 e4       	ldi	r25, 0x49	; 73
    aeb6:	97 8b       	std	Z+23, r25	; 0x17
    aeb8:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    aeba:	8a e5       	ldi	r24, 0x5A	; 90
    aebc:	99 e4       	ldi	r25, 0x49	; 73
    aebe:	91 8f       	std	Z+25, r25	; 0x19
    aec0:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    aec2:	87 e5       	ldi	r24, 0x57	; 87
    aec4:	99 e4       	ldi	r25, 0x49	; 73
    aec6:	93 a3       	std	Z+35, r25	; 0x23
    aec8:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    aeca:	84 e5       	ldi	r24, 0x54	; 84
    aecc:	99 e4       	ldi	r25, 0x49	; 73
    aece:	08 c0       	rjmp	.+16     	; 0xaee0 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    aed0:	88 e4       	ldi	r24, 0x48	; 72
    aed2:	99 e4       	ldi	r25, 0x49	; 73
    aed4:	97 8b       	std	Z+23, r25	; 0x17
    aed6:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    aed8:	91 8f       	std	Z+25, r25	; 0x19
    aeda:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    aedc:	93 a3       	std	Z+35, r25	; 0x23
    aede:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    aee0:	95 a3       	std	Z+37, r25	; 0x25
    aee2:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    aee4:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    aee6:	82 e0       	ldi	r24, 0x02	; 2
    aee8:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    aeea:	85 e0       	ldi	r24, 0x05	; 5
    aeec:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    aeee:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    aef0:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    aef2:	11 a2       	std	Z+33, r1	; 0x21
    aef4:	08 95       	ret

0000aef6 <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    aef6:	0f 93       	push	r16
    aef8:	1f 93       	push	r17
    aefa:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    aefc:	84 e0       	ldi	r24, 0x04	; 4
    aefe:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    af00:	93 e0       	ldi	r25, 0x03	; 3
    af02:	90 83       	st	Z, r25
	t->shared.recoiled = 0;
    af04:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    af06:	9a e5       	ldi	r25, 0x5A	; 90
    af08:	91 83       	std	Z+1, r25	; 0x01
	t->shared.x = x;
    af0a:	43 83       	std	Z+3, r20	; 0x03
    af0c:	54 83       	std	Z+4, r21	; 0x04
    af0e:	65 83       	std	Z+5, r22	; 0x05
    af10:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    af12:	07 83       	std	Z+7, r16	; 0x07
    af14:	10 87       	std	Z+8, r17	; 0x08
    af16:	21 87       	std	Z+9, r18	; 0x09
    af18:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    af1a:	98 ec       	ldi	r25, 0xC8	; 200
    af1c:	95 87       	std	Z+13, r25	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    af1e:	92 e0       	ldi	r25, 0x02	; 2
    af20:	94 87       	std	Z+12, r25	; 0x0c
		t->shot[i].shared.recoiled = 0;
    af22:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    af24:	40 e0       	ldi	r20, 0x00	; 0
    af26:	50 e0       	ldi	r21, 0x00	; 0
    af28:	60 e7       	ldi	r22, 0x70	; 112
    af2a:	73 e4       	ldi	r23, 0x43	; 67
    af2c:	47 87       	std	Z+15, r20	; 0x0f
    af2e:	50 8b       	std	Z+16, r21	; 0x10
    af30:	61 8b       	std	Z+17, r22	; 0x11
    af32:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    af34:	13 8a       	std	Z+19, r1	; 0x13
    af36:	14 8a       	std	Z+20, r1	; 0x14
    af38:	15 8a       	std	Z+21, r1	; 0x15
    af3a:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    af3c:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 0;
    af3e:	13 8e       	std	Z+27, r1	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    af40:	97 8b       	std	Z+23, r25	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    af42:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    af44:	81 e0       	ldi	r24, 0x01	; 1
    af46:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    af48:	62 e0       	ldi	r22, 0x02	; 2
    af4a:	cf 01       	movw	r24, r30
    af4c:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    af4e:	1f 91       	pop	r17
    af50:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 0;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    af52:	0c 94 49 57 	jmp	0xae92	; 0xae92 <set_shot_animations>

0000af56 <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    af56:	0f 93       	push	r16
    af58:	1f 93       	push	r17
    af5a:	cf 93       	push	r28
    af5c:	df 93       	push	r29
    af5e:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    af60:	8a e5       	ldi	r24, 0x5A	; 90
    af62:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    af64:	88 e7       	ldi	r24, 0x78	; 120
    af66:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    af68:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    af6a:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    af6c:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    af6e:	18 82       	st	Y, r1
	p->shared.speed = 0;
    af70:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    af72:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    af74:	82 e3       	ldi	r24, 0x32	; 50
    af76:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    af78:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    af7a:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    af7c:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    af7e:	fe 01       	movw	r30, r28
    af80:	ec 5a       	subi	r30, 0xAC	; 172
    af82:	ff 4f       	sbci	r31, 0xFF	; 255
    af84:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    af86:	31 96       	adiw	r30, 0x01	; 1
    af88:	91 e0       	ldi	r25, 0x01	; 1
    af8a:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    af8c:	31 96       	adiw	r30, 0x01	; 1
    af8e:	85 e0       	ldi	r24, 0x05	; 5
    af90:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    af92:	31 96       	adiw	r30, 0x01	; 1
    af94:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    af96:	31 96       	adiw	r30, 0x01	; 1
    af98:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    af9a:	31 96       	adiw	r30, 0x01	; 1
    af9c:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    af9e:	31 96       	adiw	r30, 0x01	; 1
    afa0:	71 83       	std	Z+1, r23	; 0x01
    afa2:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    afa4:	36 96       	adiw	r30, 0x06	; 6
    afa6:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    afa8:	31 96       	adiw	r30, 0x01	; 1
    afaa:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    afac:	31 96       	adiw	r30, 0x01	; 1
    afae:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    afb0:	31 96       	adiw	r30, 0x01	; 1
    afb2:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    afb4:	31 96       	adiw	r30, 0x01	; 1
    afb6:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    afb8:	31 96       	adiw	r30, 0x01	; 1
    afba:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    afbc:	31 96       	adiw	r30, 0x01	; 1
    afbe:	51 83       	std	Z+1, r21	; 0x01
    afc0:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    afc2:	36 96       	adiw	r30, 0x06	; 6
    afc4:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    afc6:	31 96       	adiw	r30, 0x01	; 1
    afc8:	93 e0       	ldi	r25, 0x03	; 3
    afca:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    afcc:	31 96       	adiw	r30, 0x01	; 1
    afce:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    afd0:	31 96       	adiw	r30, 0x01	; 1
    afd2:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    afd4:	31 96       	adiw	r30, 0x01	; 1
    afd6:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    afd8:	31 96       	adiw	r30, 0x01	; 1
    afda:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    afdc:	31 96       	adiw	r30, 0x01	; 1
    afde:	8f e6       	ldi	r24, 0x6F	; 111
    afe0:	99 e4       	ldi	r25, 0x49	; 73
    afe2:	91 83       	std	Z+1, r25	; 0x01
    afe4:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    afe6:	32 96       	adiw	r30, 0x02	; 2
    afe8:	89 e6       	ldi	r24, 0x69	; 105
    afea:	99 e4       	ldi	r25, 0x49	; 73
    afec:	91 83       	std	Z+1, r25	; 0x01
    afee:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    aff0:	32 96       	adiw	r30, 0x02	; 2
    aff2:	83 e6       	ldi	r24, 0x63	; 99
    aff4:	99 e4       	ldi	r25, 0x49	; 73
    aff6:	91 83       	std	Z+1, r25	; 0x01
    aff8:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    affa:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    affc:	8e 01       	movw	r16, r28
    affe:	04 5d       	subi	r16, 0xD4	; 212
    b000:	1f 4f       	sbci	r17, 0xFF	; 255
    b002:	60 e0       	ldi	r22, 0x00	; 0
    b004:	c8 01       	movw	r24, r16
    b006:	0e 94 2c 57 	call	0xae58	; 0xae58 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    b00a:	60 e0       	ldi	r22, 0x00	; 0
    b00c:	c8 01       	movw	r24, r16
    b00e:	0e 94 49 57 	call	0xae92	; 0xae92 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    b012:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    b014:	1d 8e       	std	Y+29, r1	; 0x1d
    b016:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    b018:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    b01a:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    b01c:	1c a2       	std	Y+36, r1	; 0x24
    b01e:	1d a2       	std	Y+37, r1	; 0x25
    b020:	1e a2       	std	Y+38, r1	; 0x26
    b022:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    b024:	18 a6       	std	Y+40, r1	; 0x28
    b026:	19 a6       	std	Y+41, r1	; 0x29
    b028:	1a a6       	std	Y+42, r1	; 0x2a
    b02a:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    b02c:	1f 8e       	std	Y+31, r1	; 0x1f
    b02e:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    b030:	19 a2       	std	Y+33, r1	; 0x21
    b032:	18 a2       	std	Y+32, r1	; 0x20
}
    b034:	df 91       	pop	r29
    b036:	cf 91       	pop	r28
    b038:	1f 91       	pop	r17
    b03a:	0f 91       	pop	r16
    b03c:	08 95       	ret

0000b03e <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    b03e:	fc 01       	movw	r30, r24
    b040:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    b042:	60 e0       	ldi	r22, 0x00	; 0
    b044:	8c 96       	adiw	r24, 0x2c	; 44
    b046:	0c 94 2c 57 	jmp	0xae58	; 0xae58 <init_shot_state>

0000b04a <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    b04a:	eb e0       	ldi	r30, 0x0B	; 11
    b04c:	fc e0       	ldi	r31, 0x0C	; 12
    b04e:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    b050:	14 86       	std	Z+12, r1	; 0x0c
	game.paused = 0;
    b052:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    b054:	13 86       	std	Z+11, r1	; 0x0b
    b056:	12 86       	std	Z+10, r1	; 0x0a
	game.boss_fight_status = 0;
    b058:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    b05a:	17 82       	std	Z+7, r1	; 0x07
    b05c:	16 82       	std	Z+6, r1	; 0x06
	game.boss_fight_joypad = 0;
    b05e:	11 86       	std	Z+9, r1	; 0x09
    b060:	10 86       	std	Z+8, r1	; 0x08
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    b062:	82 e0       	ldi	r24, 0x02	; 2
    b064:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    b066:	14 82       	std	Z+4, r1	; 0x04
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    b068:	41 e8       	ldi	r20, 0x81	; 129
    b06a:	59 e4       	ldi	r21, 0x49	; 73
    b06c:	67 e8       	ldi	r22, 0x87	; 135
    b06e:	79 e4       	ldi	r23, 0x49	; 73
    b070:	85 e3       	ldi	r24, 0x35	; 53
    b072:	9c e0       	ldi	r25, 0x0C	; 12
    b074:	0e 94 ab 57 	call	0xaf56	; 0xaf56 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    b078:	45 e7       	ldi	r20, 0x75	; 117
    b07a:	59 e4       	ldi	r21, 0x49	; 73
    b07c:	6b e7       	ldi	r22, 0x7B	; 123
    b07e:	79 e4       	ldi	r23, 0x49	; 73
    b080:	83 ea       	ldi	r24, 0xA3	; 163
    b082:	9f e0       	ldi	r25, 0x0F	; 15
    b084:	0c 94 ab 57 	jmp	0xaf56	; 0xaf56 <init_player>

0000b088 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    b088:	cf 93       	push	r28
    b08a:	df 93       	push	r29
    b08c:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    b08e:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    b090:	6a 89       	ldd	r22, Y+18	; 0x12
    b092:	70 e0       	ldi	r23, 0x00	; 0
    b094:	80 e0       	ldi	r24, 0x00	; 0
    b096:	90 e0       	ldi	r25, 0x00	; 0
    b098:	0e 94 cc 72 	call	0xe598	; 0xe598 <__floatunsisf>
    b09c:	6b 83       	std	Y+3, r22	; 0x03
    b09e:	7c 83       	std	Y+4, r23	; 0x04
    b0a0:	8d 83       	std	Y+5, r24	; 0x05
    b0a2:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    b0a4:	6b 89       	ldd	r22, Y+19	; 0x13
    b0a6:	70 e0       	ldi	r23, 0x00	; 0
    b0a8:	80 e0       	ldi	r24, 0x00	; 0
    b0aa:	90 e0       	ldi	r25, 0x00	; 0
    b0ac:	0e 94 cc 72 	call	0xe598	; 0xe598 <__floatunsisf>
    b0b0:	6f 83       	std	Y+7, r22	; 0x07
    b0b2:	78 87       	std	Y+8, r23	; 0x08
    b0b4:	89 87       	std	Y+9, r24	; 0x09
    b0b6:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    b0b8:	18 82       	st	Y, r1
	player->shared.speed = 0;
    b0ba:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    b0bc:	1a 82       	std	Y+2, r1	; 0x02
	
}
    b0be:	df 91       	pop	r29
    b0c0:	cf 91       	pop	r28
    b0c2:	08 95       	ret

0000b0c4 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b0c4:	cf 93       	push	r28
    b0c6:	df 93       	push	r29
    b0c8:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b0ca:	bc 01       	movw	r22, r24
    b0cc:	88 81       	ld	r24, Y
    b0ce:	99 81       	ldd	r25, Y+1	; 0x01
    b0d0:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <EepromReadBlock>
	if (status == 0x03)
    b0d4:	83 30       	cpi	r24, 0x03	; 3
    b0d6:	29 f4       	brne	.+10     	; 0xb0e2 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b0d8:	ce 01       	movw	r24, r28
	}
}
    b0da:	df 91       	pop	r29
    b0dc:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b0de:	0c 94 e6 46 	jmp	0x8dcc	; 0x8dcc <EepromWriteBlock>
	}
}
    b0e2:	df 91       	pop	r29
    b0e4:	cf 91       	pop	r28
    b0e6:	08 95       	ret

0000b0e8 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b0e8:	61 e0       	ldi	r22, 0x01	; 1
    b0ea:	83 e0       	ldi	r24, 0x03	; 3
    b0ec:	0e 94 6f 54 	call	0xa8de	; 0xa8de <FadeOut>
	ClearVram();
    b0f0:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b0f4:	60 e0       	ldi	r22, 0x00	; 0
    b0f6:	83 e0       	ldi	r24, 0x03	; 3
    b0f8:	0c 94 63 54 	jmp	0xa8c6	; 0xa8c6 <FadeIn>

0000b0fc <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    b0fc:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    b0fe:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    b100:	40 e0       	ldi	r20, 0x00	; 0
    b102:	63 e9       	ldi	r22, 0x93	; 147
    b104:	79 e4       	ldi	r23, 0x49	; 73
    b106:	8c 2f       	mov	r24, r28
    b108:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
    b10c:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    b10e:	ca 30       	cpi	r28, 0x0A	; 10
    b110:	b9 f7       	brne	.-18     	; 0xb100 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    b112:	cf 91       	pop	r28
    b114:	08 95       	ret

0000b116 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    b116:	cf 92       	push	r12
    b118:	df 92       	push	r13
    b11a:	ff 92       	push	r15
    b11c:	0f 93       	push	r16
    b11e:	1f 93       	push	r17
    b120:	cf 93       	push	r28
    b122:	df 93       	push	r29
    b124:	cd b7       	in	r28, 0x3d	; 61
    b126:	de b7       	in	r29, 0x3e	; 62
    b128:	2a 97       	sbiw	r28, 0x0a	; 10
    b12a:	0f b6       	in	r0, 0x3f	; 63
    b12c:	f8 94       	cli
    b12e:	de bf       	out	0x3e, r29	; 62
    b130:	0f be       	out	0x3f, r0	; 63
    b132:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    b134:	90 91 44 0c 	lds	r25, 0x0C44
    b138:	80 91 b2 0f 	lds	r24, 0x0FB2
    b13c:	98 17       	cp	r25, r24
    b13e:	28 f4       	brcc	.+10     	; 0xb14a <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    b140:	e5 e3       	ldi	r30, 0x35	; 53
    b142:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    b144:	a3 ea       	ldi	r26, 0xA3	; 163
    b146:	bf e0       	ldi	r27, 0x0F	; 15
    b148:	04 c0       	rjmp	.+8      	; 0xb152 <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    b14a:	e3 ea       	ldi	r30, 0xA3	; 163
    b14c:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    b14e:	a5 e3       	ldi	r26, 0x35	; 53
    b150:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    b152:	1b 96       	adiw	r26, 0x0b	; 11
    b154:	8c 91       	ld	r24, X
    b156:	1b 97       	sbiw	r26, 0x0b	; 11
    b158:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    b15a:	83 85       	ldd	r24, Z+11	; 0x0b
    b15c:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    b15e:	1f 96       	adiw	r26, 0x0f	; 15
    b160:	8c 91       	ld	r24, X
    b162:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    b164:	97 85       	ldd	r25, Z+15	; 0x0f
    b166:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = 0;
    b168:	1d 82       	std	Y+5, r1	; 0x05
	save_delta = p_win->score - p_lose->score;
    b16a:	f8 2e       	mov	r15, r24
    b16c:	f9 1a       	sub	r15, r25
    b16e:	00 e0       	ldi	r16, 0x00	; 0
    b170:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    b172:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    b174:	81 11       	cpse	r24, r1
    b176:	08 c0       	rjmp	.+16     	; 0xb188 <save_score+0x72>
    b178:	f8 01       	movw	r30, r16
    b17a:	ec 53       	subi	r30, 0x3C	; 60
    b17c:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    b17e:	94 81       	ldd	r25, Z+4	; 0x04
    b180:	25 81       	ldd	r18, Z+5	; 0x05
    b182:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    b184:	9f 15       	cp	r25, r15
    b186:	d0 f4       	brcc	.+52     	; 0xb1bc <save_score+0xa6>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    b188:	45 e0       	ldi	r20, 0x05	; 5
    b18a:	c8 01       	movw	r24, r16
    b18c:	8a 53       	subi	r24, 0x3A	; 58
    b18e:	94 4f       	sbci	r25, 0xF4	; 244
    b190:	6c 01       	movw	r12, r24
    b192:	bc 01       	movw	r22, r24
    b194:	ce 01       	movw	r24, r28
    b196:	06 96       	adiw	r24, 0x06	; 6
    b198:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    b19c:	45 e0       	ldi	r20, 0x05	; 5
    b19e:	be 01       	movw	r22, r28
    b1a0:	6f 5f       	subi	r22, 0xFF	; 255
    b1a2:	7f 4f       	sbci	r23, 0xFF	; 255
    b1a4:	c6 01       	movw	r24, r12
    b1a6:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    b1aa:	45 e0       	ldi	r20, 0x05	; 5
    b1ac:	be 01       	movw	r22, r28
    b1ae:	6a 5f       	subi	r22, 0xFA	; 250
    b1b0:	7f 4f       	sbci	r23, 0xFF	; 255
    b1b2:	ce 01       	movw	r24, r28
    b1b4:	01 96       	adiw	r24, 0x01	; 1
    b1b6:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
				saved = 1;
    b1ba:	81 e0       	ldi	r24, 0x01	; 1
    b1bc:	0b 5f       	subi	r16, 0xFB	; 251
    b1be:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    b1c0:	0e 31       	cpi	r16, 0x1E	; 30
    b1c2:	11 05       	cpc	r17, r1
    b1c4:	b9 f6       	brne	.-82     	; 0xb174 <save_score+0x5e>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b1c6:	84 ec       	ldi	r24, 0xC4	; 196
    b1c8:	9b e0       	ldi	r25, 0x0B	; 11
    b1ca:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    b1ce:	2a 96       	adiw	r28, 0x0a	; 10
    b1d0:	0f b6       	in	r0, 0x3f	; 63
    b1d2:	f8 94       	cli
    b1d4:	de bf       	out	0x3e, r29	; 62
    b1d6:	0f be       	out	0x3f, r0	; 63
    b1d8:	cd bf       	out	0x3d, r28	; 61
    b1da:	df 91       	pop	r29
    b1dc:	cf 91       	pop	r28
    b1de:	1f 91       	pop	r17
    b1e0:	0f 91       	pop	r16
    b1e2:	ff 90       	pop	r15
    b1e4:	df 90       	pop	r13
    b1e6:	cf 90       	pop	r12
    b1e8:	08 95       	ret

0000b1ea <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    b1ea:	0f 93       	push	r16
    b1ec:	1f 93       	push	r17
    b1ee:	cf 93       	push	r28
    b1f0:	df 93       	push	r29
    b1f2:	8c 01       	movw	r16, r24
    b1f4:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    b1f6:	88 81       	ld	r24, Y
    b1f8:	81 30       	cpi	r24, 0x01	; 1
    b1fa:	69 f1       	breq	.+90     	; 0xb256 <position_shot+0x6c>
    b1fc:	98 f0       	brcs	.+38     	; 0xb224 <position_shot+0x3a>
    b1fe:	82 30       	cpi	r24, 0x02	; 2
    b200:	f1 f1       	breq	.+124    	; 0xb27e <position_shot+0x94>
    b202:	83 30       	cpi	r24, 0x03	; 3
    b204:	09 f0       	breq	.+2      	; 0xb208 <position_shot+0x1e>
    b206:	59 c0       	rjmp	.+178    	; 0xb2ba <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    b208:	f8 01       	movw	r30, r16
    b20a:	83 81       	ldd	r24, Z+3	; 0x03
    b20c:	94 81       	ldd	r25, Z+4	; 0x04
    b20e:	a5 81       	ldd	r26, Z+5	; 0x05
    b210:	b6 81       	ldd	r27, Z+6	; 0x06
    b212:	8b 83       	std	Y+3, r24	; 0x03
    b214:	9c 83       	std	Y+4, r25	; 0x04
    b216:	ad 83       	std	Y+5, r26	; 0x05
    b218:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    b21a:	20 e0       	ldi	r18, 0x00	; 0
    b21c:	30 e0       	ldi	r19, 0x00	; 0
    b21e:	40 e8       	ldi	r20, 0x80	; 128
    b220:	50 e4       	ldi	r21, 0x40	; 64
    b222:	41 c0       	rjmp	.+130    	; 0xb2a6 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    b224:	20 e0       	ldi	r18, 0x00	; 0
    b226:	30 e0       	ldi	r19, 0x00	; 0
    b228:	40 e8       	ldi	r20, 0x80	; 128
    b22a:	50 e4       	ldi	r21, 0x40	; 64
    b22c:	f8 01       	movw	r30, r16
    b22e:	63 81       	ldd	r22, Z+3	; 0x03
    b230:	74 81       	ldd	r23, Z+4	; 0x04
    b232:	85 81       	ldd	r24, Z+5	; 0x05
    b234:	96 81       	ldd	r25, Z+6	; 0x06
    b236:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    b23a:	6b 83       	std	Y+3, r22	; 0x03
    b23c:	7c 83       	std	Y+4, r23	; 0x04
    b23e:	8d 83       	std	Y+5, r24	; 0x05
    b240:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    b242:	f8 01       	movw	r30, r16
    b244:	87 81       	ldd	r24, Z+7	; 0x07
    b246:	90 85       	ldd	r25, Z+8	; 0x08
    b248:	a1 85       	ldd	r26, Z+9	; 0x09
    b24a:	b2 85       	ldd	r27, Z+10	; 0x0a
    b24c:	8f 83       	std	Y+7, r24	; 0x07
    b24e:	98 87       	std	Y+8, r25	; 0x08
    b250:	a9 87       	std	Y+9, r26	; 0x09
    b252:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    b254:	32 c0       	rjmp	.+100    	; 0xb2ba <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    b256:	20 e0       	ldi	r18, 0x00	; 0
    b258:	30 e0       	ldi	r19, 0x00	; 0
    b25a:	40 e0       	ldi	r20, 0x00	; 0
    b25c:	51 e4       	ldi	r21, 0x41	; 65
    b25e:	f8 01       	movw	r30, r16
    b260:	63 81       	ldd	r22, Z+3	; 0x03
    b262:	74 81       	ldd	r23, Z+4	; 0x04
    b264:	85 81       	ldd	r24, Z+5	; 0x05
    b266:	96 81       	ldd	r25, Z+6	; 0x06
    b268:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    b26c:	6b 83       	std	Y+3, r22	; 0x03
    b26e:	7c 83       	std	Y+4, r23	; 0x04
    b270:	8d 83       	std	Y+5, r24	; 0x05
    b272:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    b274:	20 e0       	ldi	r18, 0x00	; 0
    b276:	30 e0       	ldi	r19, 0x00	; 0
    b278:	40 e8       	ldi	r20, 0x80	; 128
    b27a:	50 e4       	ldi	r21, 0x40	; 64
    b27c:	13 c0       	rjmp	.+38     	; 0xb2a4 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    b27e:	20 e0       	ldi	r18, 0x00	; 0
    b280:	30 e0       	ldi	r19, 0x00	; 0
    b282:	40 e8       	ldi	r20, 0x80	; 128
    b284:	50 e4       	ldi	r21, 0x40	; 64
    b286:	f8 01       	movw	r30, r16
    b288:	63 81       	ldd	r22, Z+3	; 0x03
    b28a:	74 81       	ldd	r23, Z+4	; 0x04
    b28c:	85 81       	ldd	r24, Z+5	; 0x05
    b28e:	96 81       	ldd	r25, Z+6	; 0x06
    b290:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    b294:	6b 83       	std	Y+3, r22	; 0x03
    b296:	7c 83       	std	Y+4, r23	; 0x04
    b298:	8d 83       	std	Y+5, r24	; 0x05
    b29a:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    b29c:	20 e0       	ldi	r18, 0x00	; 0
    b29e:	30 e0       	ldi	r19, 0x00	; 0
    b2a0:	40 e0       	ldi	r20, 0x00	; 0
    b2a2:	51 e4       	ldi	r21, 0x41	; 65
    b2a4:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    b2a6:	67 81       	ldd	r22, Z+7	; 0x07
    b2a8:	70 85       	ldd	r23, Z+8	; 0x08
    b2aa:	81 85       	ldd	r24, Z+9	; 0x09
    b2ac:	92 85       	ldd	r25, Z+10	; 0x0a
    b2ae:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    b2b2:	6f 83       	std	Y+7, r22	; 0x07
    b2b4:	78 87       	std	Y+8, r23	; 0x08
    b2b6:	89 87       	std	Y+9, r24	; 0x09
    b2b8:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    b2ba:	df 91       	pop	r29
    b2bc:	cf 91       	pop	r28
    b2be:	1f 91       	pop	r17
    b2c0:	0f 91       	pop	r16
    b2c2:	08 95       	ret

0000b2c4 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    b2c4:	0f 93       	push	r16
    b2c6:	1f 93       	push	r17
    b2c8:	cf 93       	push	r28
    b2ca:	df 93       	push	r29
    b2cc:	8c 01       	movw	r16, r24
    b2ce:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    b2d0:	ac 01       	movw	r20, r24
    b2d2:	44 5f       	subi	r20, 0xF4	; 244
    b2d4:	5f 4f       	sbci	r21, 0xFF	; 255
    b2d6:	23 e0       	ldi	r18, 0x03	; 3
    b2d8:	6e e0       	ldi	r22, 0x0E	; 14
    b2da:	84 e0       	ldi	r24, 0x04	; 4
    b2dc:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    b2e0:	49 ed       	ldi	r20, 0xD9	; 217
    b2e2:	5a e0       	ldi	r21, 0x0A	; 10
    b2e4:	6e e0       	ldi	r22, 0x0E	; 14
    b2e6:	70 e0       	ldi	r23, 0x00	; 0
    b2e8:	88 e0       	ldi	r24, 0x08	; 8
    b2ea:	90 e0       	ldi	r25, 0x00	; 0
    b2ec:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    b2f0:	ae 01       	movw	r20, r28
    b2f2:	44 5f       	subi	r20, 0xF4	; 244
    b2f4:	5f 4f       	sbci	r21, 0xFF	; 255
    b2f6:	23 e0       	ldi	r18, 0x03	; 3
    b2f8:	6e e0       	ldi	r22, 0x0E	; 14
    b2fa:	8d e0       	ldi	r24, 0x0D	; 13
    b2fc:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    b300:	46 ed       	ldi	r20, 0xD6	; 214
    b302:	5a e0       	ldi	r21, 0x0A	; 10
    b304:	6e e0       	ldi	r22, 0x0E	; 14
    b306:	70 e0       	ldi	r23, 0x00	; 0
    b308:	81 e1       	ldi	r24, 0x11	; 17
    b30a:	90 e0       	ldi	r25, 0x00	; 0
    b30c:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    b310:	21 e0       	ldi	r18, 0x01	; 1
    b312:	f8 01       	movw	r30, r16
    b314:	40 89       	ldd	r20, Z+16	; 0x10
    b316:	6e e0       	ldi	r22, 0x0E	; 14
    b318:	70 e0       	ldi	r23, 0x00	; 0
    b31a:	86 e1       	ldi	r24, 0x16	; 22
    b31c:	90 e0       	ldi	r25, 0x00	; 0
    b31e:	0e 94 b6 53 	call	0xa76c	; 0xa76c <PrintByte>
	PrintChar(23, 14, '-');
    b322:	4d e2       	ldi	r20, 0x2D	; 45
    b324:	6e e0       	ldi	r22, 0x0E	; 14
    b326:	70 e0       	ldi	r23, 0x00	; 0
    b328:	87 e1       	ldi	r24, 0x17	; 23
    b32a:	90 e0       	ldi	r25, 0x00	; 0
    b32c:	0e 94 04 54 	call	0xa808	; 0xa808 <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    b330:	21 e0       	ldi	r18, 0x01	; 1
    b332:	48 89       	ldd	r20, Y+16	; 0x10
    b334:	6e e0       	ldi	r22, 0x0E	; 14
    b336:	70 e0       	ldi	r23, 0x00	; 0
    b338:	8a e1       	ldi	r24, 0x1A	; 26
    b33a:	90 e0       	ldi	r25, 0x00	; 0
}
    b33c:	df 91       	pop	r29
    b33e:	cf 91       	pop	r28
    b340:	1f 91       	pop	r17
    b342:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    b344:	0c 94 b6 53 	jmp	0xa76c	; 0xa76c <PrintByte>

0000b348 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    b348:	0f 93       	push	r16
    b34a:	1f 93       	push	r17
    b34c:	cf 93       	push	r28
    b34e:	df 93       	push	r29
    b350:	8c 01       	movw	r16, r24
    b352:	eb 01       	movw	r28, r22
    Print(9, 13, (char*) strFinalScore);
    b354:	4a ec       	ldi	r20, 0xCA	; 202
    b356:	5a e0       	ldi	r21, 0x0A	; 10
    b358:	6d e0       	ldi	r22, 0x0D	; 13
    b35a:	70 e0       	ldi	r23, 0x00	; 0
    b35c:	89 e0       	ldi	r24, 0x09	; 9
    b35e:	90 e0       	ldi	r25, 0x00	; 0
    b360:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    b364:	a8 01       	movw	r20, r16
    b366:	44 5f       	subi	r20, 0xF4	; 244
    b368:	5f 4f       	sbci	r21, 0xFF	; 255
    b36a:	23 e0       	ldi	r18, 0x03	; 3
    b36c:	6e e0       	ldi	r22, 0x0E	; 14
    b36e:	84 e0       	ldi	r24, 0x04	; 4
    b370:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    b374:	49 ed       	ldi	r20, 0xD9	; 217
    b376:	5a e0       	ldi	r21, 0x0A	; 10
    b378:	6e e0       	ldi	r22, 0x0E	; 14
    b37a:	70 e0       	ldi	r23, 0x00	; 0
    b37c:	88 e0       	ldi	r24, 0x08	; 8
    b37e:	90 e0       	ldi	r25, 0x00	; 0
    b380:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    b384:	ae 01       	movw	r20, r28
    b386:	44 5f       	subi	r20, 0xF4	; 244
    b388:	5f 4f       	sbci	r21, 0xFF	; 255
    b38a:	23 e0       	ldi	r18, 0x03	; 3
    b38c:	6e e0       	ldi	r22, 0x0E	; 14
    b38e:	8d e0       	ldi	r24, 0x0D	; 13
    b390:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    b394:	46 ed       	ldi	r20, 0xD6	; 214
    b396:	5a e0       	ldi	r21, 0x0A	; 10
    b398:	6e e0       	ldi	r22, 0x0E	; 14
    b39a:	70 e0       	ldi	r23, 0x00	; 0
    b39c:	81 e1       	ldi	r24, 0x11	; 17
    b39e:	90 e0       	ldi	r25, 0x00	; 0
    b3a0:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
    PrintByte(22, 14, winner->score ,true);
    b3a4:	21 e0       	ldi	r18, 0x01	; 1
    b3a6:	f8 01       	movw	r30, r16
    b3a8:	47 85       	ldd	r20, Z+15	; 0x0f
    b3aa:	6e e0       	ldi	r22, 0x0E	; 14
    b3ac:	70 e0       	ldi	r23, 0x00	; 0
    b3ae:	86 e1       	ldi	r24, 0x16	; 22
    b3b0:	90 e0       	ldi	r25, 0x00	; 0
    b3b2:	0e 94 b6 53 	call	0xa76c	; 0xa76c <PrintByte>
    PrintChar(23, 14, '-');
    b3b6:	4d e2       	ldi	r20, 0x2D	; 45
    b3b8:	6e e0       	ldi	r22, 0x0E	; 14
    b3ba:	70 e0       	ldi	r23, 0x00	; 0
    b3bc:	87 e1       	ldi	r24, 0x17	; 23
    b3be:	90 e0       	ldi	r25, 0x00	; 0
    b3c0:	0e 94 04 54 	call	0xa808	; 0xa808 <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    b3c4:	21 e0       	ldi	r18, 0x01	; 1
    b3c6:	4f 85       	ldd	r20, Y+15	; 0x0f
    b3c8:	6e e0       	ldi	r22, 0x0E	; 14
    b3ca:	70 e0       	ldi	r23, 0x00	; 0
    b3cc:	8a e1       	ldi	r24, 0x1A	; 26
    b3ce:	90 e0       	ldi	r25, 0x00	; 0
}
    b3d0:	df 91       	pop	r29
    b3d2:	cf 91       	pop	r28
    b3d4:	1f 91       	pop	r17
    b3d6:	0f 91       	pop	r16
    Print(8, 14, (char*) strOwns);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, (char*) strBy);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    b3d8:	0c 94 b6 53 	jmp	0xa76c	; 0xa76c <PrintByte>

0000b3dc <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    b3dc:	cf 93       	push	r28
    b3de:	df 93       	push	r29
    b3e0:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    b3e2:	ac 01       	movw	r20, r24
    b3e4:	44 5f       	subi	r20, 0xF4	; 244
    b3e6:	5f 4f       	sbci	r21, 0xFF	; 255
    b3e8:	23 e0       	ldi	r18, 0x03	; 3
    b3ea:	60 e0       	ldi	r22, 0x00	; 0
    b3ec:	8a e0       	ldi	r24, 0x0A	; 10
    b3ee:	8c 0f       	add	r24, r28
    b3f0:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    b3f4:	d0 e0       	ldi	r29, 0x00	; 0
    b3f6:	4e e1       	ldi	r20, 0x1E	; 30
    b3f8:	5a e0       	ldi	r21, 0x0A	; 10
    b3fa:	60 e0       	ldi	r22, 0x00	; 0
    b3fc:	70 e0       	ldi	r23, 0x00	; 0
    b3fe:	ce 01       	movw	r24, r28
    b400:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(x, 1, (char*) strTotal);
    b404:	47 e1       	ldi	r20, 0x17	; 23
    b406:	5a e0       	ldi	r21, 0x0A	; 10
    b408:	61 e0       	ldi	r22, 0x01	; 1
    b40a:	70 e0       	ldi	r23, 0x00	; 0
    b40c:	ce 01       	movw	r24, r28
	
}
    b40e:	df 91       	pop	r29
    b410:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    b412:	0c 94 e9 53 	jmp	0xa7d2	; 0xa7d2 <Print>

0000b416 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    b416:	0f 93       	push	r16
    b418:	1f 93       	push	r17
    b41a:	cf 93       	push	r28
    b41c:	df 93       	push	r29
    b41e:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    b420:	c6 2f       	mov	r28, r22
    b422:	d0 e0       	ldi	r29, 0x00	; 0
    b424:	28 96       	adiw	r28, 0x08	; 8
    b426:	20 e0       	ldi	r18, 0x00	; 0
    b428:	fc 01       	movw	r30, r24
    b42a:	40 89       	ldd	r20, Z+16	; 0x10
    b42c:	60 e0       	ldi	r22, 0x00	; 0
    b42e:	70 e0       	ldi	r23, 0x00	; 0
    b430:	ce 01       	movw	r24, r28
    b432:	0e 94 b6 53 	call	0xa76c	; 0xa76c <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    b436:	20 e0       	ldi	r18, 0x00	; 0
    b438:	f8 01       	movw	r30, r16
    b43a:	47 85       	ldd	r20, Z+15	; 0x0f
    b43c:	61 e0       	ldi	r22, 0x01	; 1
    b43e:	70 e0       	ldi	r23, 0x00	; 0
    b440:	ce 01       	movw	r24, r28
}
    b442:	df 91       	pop	r29
    b444:	cf 91       	pop	r28
    b446:	1f 91       	pop	r17
    b448:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    b44a:	0c 94 b6 53 	jmp	0xa76c	; 0xa76c <PrintByte>

0000b44e <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    b44e:	cf 93       	push	r28
    b450:	df 93       	push	r29
    b452:	ec 01       	movw	r28, r24
    b454:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    b456:	9d 89       	ldd	r25, Y+21	; 0x15
    b458:	9a 35       	cpi	r25, 0x5A	; 90
    b45a:	99 f0       	breq	.+38     	; 0xb482 <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    b45c:	91 11       	cpse	r25, r1
    b45e:	0c c0       	rjmp	.+24     	; 0xb478 <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    b460:	4e 89       	ldd	r20, Y+22	; 0x16
    b462:	9f e0       	ldi	r25, 0x0F	; 15
    b464:	49 9f       	mul	r20, r25
    b466:	a0 01       	movw	r20, r0
    b468:	11 24       	eor	r1, r1
    b46a:	4c 5c       	subi	r20, 0xCC	; 204
    b46c:	55 4f       	sbci	r21, 0xF5	; 245
    b46e:	62 e0       	ldi	r22, 0x02	; 2
    b470:	70 e0       	ldi	r23, 0x00	; 0
    b472:	90 e0       	ldi	r25, 0x00	; 0
    b474:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    b478:	8d 89       	ldd	r24, Y+21	; 0x15
    b47a:	8f 5f       	subi	r24, 0xFF	; 255
    b47c:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    b47e:	41 e0       	ldi	r20, 0x01	; 1
    b480:	0a c0       	rjmp	.+20     	; 0xb496 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    b482:	44 23       	and	r20, r20
    b484:	41 f0       	breq	.+16     	; 0xb496 <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    b486:	45 e2       	ldi	r20, 0x25	; 37
    b488:	5a e0       	ldi	r21, 0x0A	; 10
    b48a:	62 e0       	ldi	r22, 0x02	; 2
    b48c:	70 e0       	ldi	r23, 0x00	; 0
    b48e:	90 e0       	ldi	r25, 0x00	; 0
    b490:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
    b494:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    b496:	84 2f       	mov	r24, r20
    b498:	df 91       	pop	r29
    b49a:	cf 91       	pop	r28
    b49c:	08 95       	ret

0000b49e <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    b49e:	ef 92       	push	r14
    b4a0:	ff 92       	push	r15
    b4a2:	0f 93       	push	r16
    b4a4:	1f 93       	push	r17
    b4a6:	cf 93       	push	r28
    b4a8:	df 93       	push	r29
    b4aa:	1f 92       	push	r1
    b4ac:	cd b7       	in	r28, 0x3d	; 61
    b4ae:	de b7       	in	r29, 0x3e	; 62
    b4b0:	7c 01       	movw	r14, r24
    b4b2:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    b4b4:	fc 01       	movw	r30, r24
    b4b6:	67 81       	ldd	r22, Z+7	; 0x07
    b4b8:	70 85       	ldd	r23, Z+8	; 0x08
    b4ba:	81 85       	ldd	r24, Z+9	; 0x09
    b4bc:	92 85       	ldd	r25, Z+10	; 0x0a
    b4be:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    b4c2:	46 2f       	mov	r20, r22
    b4c4:	f7 01       	movw	r30, r14
    b4c6:	63 81       	ldd	r22, Z+3	; 0x03
    b4c8:	74 81       	ldd	r23, Z+4	; 0x04
    b4ca:	85 81       	ldd	r24, Z+5	; 0x05
    b4cc:	96 81       	ldd	r25, Z+6	; 0x06
    b4ce:	49 83       	std	Y+1, r20	; 0x01
    b4d0:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    b4d4:	02 e0       	ldi	r16, 0x02	; 2
    b4d6:	22 e0       	ldi	r18, 0x02	; 2
    b4d8:	49 81       	ldd	r20, Y+1	; 0x01
    b4da:	81 2f       	mov	r24, r17
    b4dc:	0e 94 3a 53 	call	0xa674	; 0xa674 <MoveSprite>
}
    b4e0:	0f 90       	pop	r0
    b4e2:	df 91       	pop	r29
    b4e4:	cf 91       	pop	r28
    b4e6:	1f 91       	pop	r17
    b4e8:	0f 91       	pop	r16
    b4ea:	ff 90       	pop	r15
    b4ec:	ef 90       	pop	r14
    b4ee:	08 95       	ret

0000b4f0 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    b4f0:	ef 92       	push	r14
    b4f2:	ff 92       	push	r15
    b4f4:	0f 93       	push	r16
    b4f6:	1f 93       	push	r17
    b4f8:	cf 93       	push	r28
    b4fa:	df 93       	push	r29
    b4fc:	1f 92       	push	r1
    b4fe:	cd b7       	in	r28, 0x3d	; 61
    b500:	de b7       	in	r29, 0x3e	; 62
    b502:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    b504:	81 89       	ldd	r24, Z+17	; 0x11
    b506:	88 23       	and	r24, r24
    b508:	b9 f0       	breq	.+46     	; 0xb538 <render_shot+0x48>
    b50a:	16 2f       	mov	r17, r22
    b50c:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    b50e:	63 a9       	ldd	r22, Z+51	; 0x33
    b510:	74 a9       	ldd	r23, Z+52	; 0x34
    b512:	85 a9       	ldd	r24, Z+53	; 0x35
    b514:	96 a9       	ldd	r25, Z+54	; 0x36
    b516:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    b51a:	46 2f       	mov	r20, r22
    b51c:	f7 01       	movw	r30, r14
    b51e:	67 a5       	ldd	r22, Z+47	; 0x2f
    b520:	70 a9       	ldd	r23, Z+48	; 0x30
    b522:	81 a9       	ldd	r24, Z+49	; 0x31
    b524:	92 a9       	ldd	r25, Z+50	; 0x32
    b526:	49 83       	std	Y+1, r20	; 0x01
    b528:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    b52c:	01 e0       	ldi	r16, 0x01	; 1
    b52e:	21 e0       	ldi	r18, 0x01	; 1
    b530:	49 81       	ldd	r20, Y+1	; 0x01
    b532:	81 2f       	mov	r24, r17
    b534:	0e 94 3a 53 	call	0xa674	; 0xa674 <MoveSprite>
			sprite_index++;
		}
	}
}
    b538:	0f 90       	pop	r0
    b53a:	df 91       	pop	r29
    b53c:	cf 91       	pop	r28
    b53e:	1f 91       	pop	r17
    b540:	0f 91       	pop	r16
    b542:	ff 90       	pop	r15
    b544:	ef 90       	pop	r14
    b546:	08 95       	ret

0000b548 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    b548:	ef 92       	push	r14
    b54a:	ff 92       	push	r15
    b54c:	0f 93       	push	r16
    b54e:	1f 93       	push	r17
    b550:	cf 93       	push	r28
    b552:	df 93       	push	r29
    b554:	ec 01       	movw	r28, r24
    b556:	25 96       	adiw	r28, 0x05	; 5
    b558:	8c 01       	movw	r16, r24
    b55a:	0f 5d       	subi	r16, 0xDF	; 223
    b55c:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    b55e:	8e e1       	ldi	r24, 0x1E	; 30
    b560:	e8 2e       	mov	r14, r24
    b562:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    b564:	88 85       	ldd	r24, Y+8	; 0x08
    b566:	99 85       	ldd	r25, Y+9	; 0x09
    b568:	89 2b       	or	r24, r25
    b56a:	c1 f0       	breq	.+48     	; 0xb59c <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    b56c:	ce 01       	movw	r24, r28
    b56e:	04 97       	sbiw	r24, 0x04	; 4
    b570:	0e 94 a4 54 	call	0xa948	; 0xa948 <LBGetNextFrame>
    b574:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    b576:	48 81       	ld	r20, Y
    b578:	88 85       	ldd	r24, Y+8	; 0x08
    b57a:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b57c:	b7 01       	movw	r22, r14
    b57e:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    b582:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    b584:	44 23       	and	r20, r20
    b586:	39 f0       	breq	.+14     	; 0xb596 <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b588:	40 e0       	ldi	r20, 0x00	; 0
    b58a:	50 e0       	ldi	r21, 0x00	; 0
    b58c:	0e 94 d5 45 	call	0x8baa	; 0x8baa <SetTile>
				ta->anims[i].tile_index = 0;
    b590:	19 86       	std	Y+9, r1	; 0x09
    b592:	18 86       	std	Y+8, r1	; 0x08
    b594:	03 c0       	rjmp	.+6      	; 0xb59c <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    b596:	a9 01       	movw	r20, r18
    b598:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
    b59c:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    b59e:	c0 17       	cp	r28, r16
    b5a0:	d1 07       	cpc	r29, r17
    b5a2:	01 f7       	brne	.-64     	; 0xb564 <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    b5a4:	df 91       	pop	r29
    b5a6:	cf 91       	pop	r28
    b5a8:	1f 91       	pop	r17
    b5aa:	0f 91       	pop	r16
    b5ac:	ff 90       	pop	r15
    b5ae:	ef 90       	pop	r14
    b5b0:	08 95       	ret

0000b5b2 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    b5b2:	cf 93       	push	r28
    b5b4:	df 93       	push	r29
    b5b6:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    b5b8:	0e 94 c9 54 	call	0xa992	; 0xa992 <LBGetNextFrameReverse>
    b5bc:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    b5be:	4c 81       	ldd	r20, Y+4	; 0x04
    b5c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    b5c2:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b5c4:	6e e1       	ldi	r22, 0x1E	; 30
    b5c6:	70 e0       	ldi	r23, 0x00	; 0
    b5c8:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    b5cc:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    b5ce:	44 23       	and	r20, r20
    b5d0:	19 f0       	breq	.+6      	; 0xb5d8 <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b5d2:	4d ed       	ldi	r20, 0xDD	; 221
    b5d4:	52 e8       	ldi	r21, 0x82	; 130
    b5d6:	01 c0       	rjmp	.+2      	; 0xb5da <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    b5d8:	a9 01       	movw	r20, r18
    b5da:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
	}
	return ta->anim.looped;
}
    b5de:	8c 81       	ldd	r24, Y+4	; 0x04
    b5e0:	df 91       	pop	r29
    b5e2:	cf 91       	pop	r28
    b5e4:	08 95       	ret

0000b5e6 <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    b5e6:	1f 93       	push	r17
    b5e8:	cf 93       	push	r28
    b5ea:	df 93       	push	r29
    b5ec:	ec 01       	movw	r28, r24
    b5ee:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
    b5f0:	8c 89       	ldd	r24, Y+20	; 0x14
    b5f2:	80 ff       	sbrs	r24, 0
    b5f4:	17 c0       	rjmp	.+46     	; 0xb624 <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    b5f6:	ce 01       	movw	r24, r28
    b5f8:	84 59       	subi	r24, 0x94	; 148
    b5fa:	9f 4f       	sbci	r25, 0xFF	; 255
    b5fc:	0e 94 a4 54 	call	0xa948	; 0xa948 <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    b600:	fe 01       	movw	r30, r28
    b602:	e0 59       	subi	r30, 0x90	; 144
    b604:	ff 4f       	sbci	r31, 0xFF	; 255
    b606:	20 81       	ld	r18, Z
    b608:	22 23       	and	r18, r18
    b60a:	09 f4       	brne	.+2      	; 0xb60e <tank_map+0x28>
    b60c:	4a c0       	rjmp	.+148    	; 0xb6a2 <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    b60e:	8c 89       	ldd	r24, Y+20	; 0x14
    b610:	91 e0       	ldi	r25, 0x01	; 1
    b612:	98 27       	eor	r25, r24
    b614:	9c 8b       	std	Y+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    b616:	ce 01       	movw	r24, r28
    b618:	0e 94 44 58 	call	0xb088	; 0xb088 <player_spawn>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b61c:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    b61e:	8d e8       	ldi	r24, 0x8D	; 141
    b620:	99 e4       	ldi	r25, 0x49	; 73
    b622:	40 c0       	rjmp	.+128    	; 0xb6a4 <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    b624:	9f 89       	ldd	r25, Y+23	; 0x17
    b626:	98 37       	cpi	r25, 0x78	; 120
    b628:	11 f0       	breq	.+4      	; 0xb62e <tank_map+0x48>
		{
			player->grace_frame++;
    b62a:	9f 5f       	subi	r25, 0xFF	; 255
    b62c:	9f 8b       	std	Y+23, r25	; 0x17
		}
		switch (player->shared.direction)
    b62e:	98 81       	ld	r25, Y
    b630:	91 30       	cpi	r25, 0x01	; 1
    b632:	61 f0       	breq	.+24     	; 0xb64c <tank_map+0x66>
    b634:	b0 f0       	brcs	.+44     	; 0xb662 <tank_map+0x7c>
    b636:	92 30       	cpi	r25, 0x02	; 2
    b638:	69 f0       	breq	.+26     	; 0xb654 <tank_map+0x6e>
    b63a:	93 30       	cpi	r25, 0x03	; 3
    b63c:	91 f4       	brne	.+36     	; 0xb662 <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    b63e:	ce 01       	movw	r24, r28
    b640:	80 5a       	subi	r24, 0xA0	; 160
    b642:	9f 4f       	sbci	r25, 0xFF	; 255
    b644:	0e 94 a4 54 	call	0xa948	; 0xa948 <LBGetNextFrame>
    b648:	41 e0       	ldi	r20, 0x01	; 1
    b64a:	11 c0       	rjmp	.+34     	; 0xb66e <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    b64c:	ce 01       	movw	r24, r28
    b64e:	80 5a       	subi	r24, 0xA0	; 160
    b650:	9f 4f       	sbci	r25, 0xFF	; 255
    b652:	0a c0       	rjmp	.+20     	; 0xb668 <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    b654:	ce 01       	movw	r24, r28
    b656:	8c 5a       	subi	r24, 0xAC	; 172
    b658:	9f 4f       	sbci	r25, 0xFF	; 255
    b65a:	0e 94 a4 54 	call	0xa948	; 0xa948 <LBGetNextFrame>
    b65e:	42 e0       	ldi	r20, 0x02	; 2
    b660:	06 c0       	rjmp	.+12     	; 0xb66e <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    b662:	ce 01       	movw	r24, r28
    b664:	8c 5a       	subi	r24, 0xAC	; 172
    b666:	9f 4f       	sbci	r25, 0xFF	; 255
    b668:	0e 94 a4 54 	call	0xa948	; 0xa948 <LBGetNextFrame>
    b66c:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    b66e:	2f 89       	ldd	r18, Y+23	; 0x17
    b670:	28 37       	cpi	r18, 0x78	; 120
    b672:	31 f0       	breq	.+12     	; 0xb680 <tank_map+0x9a>
    b674:	20 91 37 0b 	lds	r18, 0x0B37
    b678:	22 23       	and	r18, r18
    b67a:	11 f0       	breq	.+4      	; 0xb680 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    b67c:	8d e8       	ldi	r24, 0x8D	; 141
    b67e:	99 e4       	ldi	r25, 0x49	; 73
		}
		toggle_counter--;
    b680:	20 91 03 01 	lds	r18, 0x0103
    b684:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    b686:	19 f0       	breq	.+6      	; 0xb68e <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    b688:	20 93 03 01 	sts	0x0103, r18
    b68c:	0b c0       	rjmp	.+22     	; 0xb6a4 <tank_map+0xbe>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    b68e:	24 e1       	ldi	r18, 0x14	; 20
    b690:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    b694:	30 91 37 0b 	lds	r19, 0x0B37
    b698:	21 e0       	ldi	r18, 0x01	; 1
    b69a:	23 27       	eor	r18, r19
    b69c:	20 93 37 0b 	sts	0x0B37, r18
    b6a0:	01 c0       	rjmp	.+2      	; 0xb6a4 <tank_map+0xbe>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b6a2:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    b6a4:	bc 01       	movw	r22, r24
    b6a6:	81 2f       	mov	r24, r17
    b6a8:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    b6ac:	84 e0       	ldi	r24, 0x04	; 4
    b6ae:	81 0f       	add	r24, r17
    b6b0:	df 91       	pop	r29
    b6b2:	cf 91       	pop	r28
    b6b4:	1f 91       	pop	r17
    b6b6:	08 95       	ret

0000b6b8 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    b6b8:	cf 93       	push	r28
    b6ba:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    b6bc:	fc 01       	movw	r30, r24
    b6be:	22 ad       	ldd	r18, Z+58	; 0x3a
    b6c0:	22 23       	and	r18, r18
    b6c2:	d9 f0       	breq	.+54     	; 0xb6fa <shot_map+0x42>
		{
			switch (shot->shared.direction)
    b6c4:	24 a5       	ldd	r18, Z+44	; 0x2c
    b6c6:	21 30       	cpi	r18, 0x01	; 1
    b6c8:	59 f0       	breq	.+22     	; 0xb6e0 <shot_map+0x28>
    b6ca:	a8 f0       	brcs	.+42     	; 0xb6f6 <shot_map+0x3e>
    b6cc:	22 30       	cpi	r18, 0x02	; 2
    b6ce:	71 f0       	breq	.+28     	; 0xb6ec <shot_map+0x34>
    b6d0:	23 30       	cpi	r18, 0x03	; 3
    b6d2:	89 f4       	brne	.+34     	; 0xb6f6 <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    b6d4:	88 5b       	subi	r24, 0xB8	; 184
    b6d6:	9f 4f       	sbci	r25, 0xFF	; 255
    b6d8:	0e 94 a4 54 	call	0xa948	; 0xa948 <LBGetNextFrame>
    b6dc:	41 e0       	ldi	r20, 0x01	; 1
    b6de:	10 c0       	rjmp	.+32     	; 0xb700 <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    b6e0:	88 5b       	subi	r24, 0xB8	; 184
    b6e2:	9f 4f       	sbci	r25, 0xFF	; 255
    b6e4:	0e 94 a4 54 	call	0xa948	; 0xa948 <LBGetNextFrame>
    b6e8:	40 e0       	ldi	r20, 0x00	; 0
    b6ea:	0a c0       	rjmp	.+20     	; 0xb700 <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    b6ec:	cc 96       	adiw	r24, 0x3c	; 60
    b6ee:	0e 94 a4 54 	call	0xa948	; 0xa948 <LBGetNextFrame>
    b6f2:	42 e0       	ldi	r20, 0x02	; 2
    b6f4:	05 c0       	rjmp	.+10     	; 0xb700 <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    b6f6:	cc 96       	adiw	r24, 0x3c	; 60
    b6f8:	f5 cf       	rjmp	.-22     	; 0xb6e4 <shot_map+0x2c>
    b6fa:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    b6fc:	8d e8       	ldi	r24, 0x8D	; 141
    b6fe:	99 e4       	ldi	r25, 0x49	; 73
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    b700:	bc 01       	movw	r22, r24
    b702:	8c 2f       	mov	r24, r28
    b704:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    b708:	81 e0       	ldi	r24, 0x01	; 1
    b70a:	8c 0f       	add	r24, r28
    b70c:	cf 91       	pop	r28
    b70e:	08 95       	ret

0000b710 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    b710:	cf 93       	push	r28
    b712:	df 93       	push	r29
    b714:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    b716:	88 81       	ld	r24, Y
    b718:	81 11       	cpse	r24, r1
    b71a:	0b c0       	rjmp	.+22     	; 0xb732 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    b71c:	6f 81       	ldd	r22, Y+7	; 0x07
    b71e:	78 85       	ldd	r23, Y+8	; 0x08
    b720:	89 85       	ldd	r24, Y+9	; 0x09
    b722:	9a 85       	ldd	r25, Y+10	; 0x0a
    b724:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    b728:	66 95       	lsr	r22
    b72a:	66 95       	lsr	r22
    b72c:	66 95       	lsr	r22
    b72e:	6f 5f       	subi	r22, 0xFF	; 255
    b730:	1d c0       	rjmp	.+58     	; 0xb76c <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    b732:	81 30       	cpi	r24, 0x01	; 1
    b734:	69 f4       	brne	.+26     	; 0xb750 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    b736:	20 e0       	ldi	r18, 0x00	; 0
    b738:	30 e0       	ldi	r19, 0x00	; 0
    b73a:	40 e0       	ldi	r20, 0x00	; 0
    b73c:	5e e3       	ldi	r21, 0x3E	; 62
    b73e:	6b 81       	ldd	r22, Y+3	; 0x03
    b740:	7c 81       	ldd	r23, Y+4	; 0x04
    b742:	8d 81       	ldd	r24, Y+5	; 0x05
    b744:	9e 81       	ldd	r25, Y+6	; 0x06
    b746:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    b74a:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    b74e:	27 c0       	rjmp	.+78     	; 0xb79e <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    b750:	82 30       	cpi	r24, 0x02	; 2
    b752:	d9 f4       	brne	.+54     	; 0xb78a <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    b754:	20 e0       	ldi	r18, 0x00	; 0
    b756:	30 e0       	ldi	r19, 0x00	; 0
    b758:	40 e0       	ldi	r20, 0x00	; 0
    b75a:	5e e3       	ldi	r21, 0x3E	; 62
    b75c:	6f 81       	ldd	r22, Y+7	; 0x07
    b75e:	78 85       	ldd	r23, Y+8	; 0x08
    b760:	89 85       	ldd	r24, Y+9	; 0x09
    b762:	9a 85       	ldd	r25, Y+10	; 0x0a
    b764:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    b768:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
		sprite->y = tile * 8;
    b76c:	88 e0       	ldi	r24, 0x08	; 8
    b76e:	68 9f       	mul	r22, r24
    b770:	b0 01       	movw	r22, r0
    b772:	11 24       	eor	r1, r1
    b774:	88 27       	eor	r24, r24
    b776:	77 fd       	sbrc	r23, 7
    b778:	80 95       	com	r24
    b77a:	98 2f       	mov	r25, r24
    b77c:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    b780:	6f 83       	std	Y+7, r22	; 0x07
    b782:	78 87       	std	Y+8, r23	; 0x08
    b784:	89 87       	std	Y+9, r24	; 0x09
    b786:	9a 87       	std	Y+10, r25	; 0x0a
    b788:	18 c0       	rjmp	.+48     	; 0xb7ba <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    b78a:	6b 81       	ldd	r22, Y+3	; 0x03
    b78c:	7c 81       	ldd	r23, Y+4	; 0x04
    b78e:	8d 81       	ldd	r24, Y+5	; 0x05
    b790:	9e 81       	ldd	r25, Y+6	; 0x06
    b792:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    b796:	66 95       	lsr	r22
    b798:	66 95       	lsr	r22
    b79a:	66 95       	lsr	r22
    b79c:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    b79e:	88 e0       	ldi	r24, 0x08	; 8
    b7a0:	68 9f       	mul	r22, r24
    b7a2:	b0 01       	movw	r22, r0
    b7a4:	11 24       	eor	r1, r1
    b7a6:	88 27       	eor	r24, r24
    b7a8:	77 fd       	sbrc	r23, 7
    b7aa:	80 95       	com	r24
    b7ac:	98 2f       	mov	r25, r24
    b7ae:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    b7b2:	6b 83       	std	Y+3, r22	; 0x03
    b7b4:	7c 83       	std	Y+4, r23	; 0x04
    b7b6:	8d 83       	std	Y+5, r24	; 0x05
    b7b8:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b7ba:	81 e0       	ldi	r24, 0x01	; 1
    b7bc:	8a 83       	std	Y+2, r24	; 0x02
}
    b7be:	df 91       	pop	r29
    b7c0:	cf 91       	pop	r28
    b7c2:	08 95       	ret

0000b7c4 <recoil_sprite_fine>:

void recoil_sprite_fine(SpriteShared* sprite)
{	
    b7c4:	cf 93       	push	r28
    b7c6:	df 93       	push	r29
    b7c8:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    b7ca:	88 81       	ld	r24, Y
    b7cc:	69 81       	ldd	r22, Y+1	; 0x01
	{
		sprite->y += FRAME_TIME * sprite->speed;
    b7ce:	70 e0       	ldi	r23, 0x00	; 0
	sprite->recoiled = 1;
}

void recoil_sprite_fine(SpriteShared* sprite)
{	
	if (sprite->direction == D_UP)
    b7d0:	81 11       	cpse	r24, r1
    b7d2:	13 c0       	rjmp	.+38     	; 0xb7fa <recoil_sprite_fine+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    b7d4:	80 e0       	ldi	r24, 0x00	; 0
    b7d6:	90 e0       	ldi	r25, 0x00	; 0
    b7d8:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    b7dc:	25 e6       	ldi	r18, 0x65	; 101
    b7de:	38 e8       	ldi	r19, 0x88	; 136
    b7e0:	48 e8       	ldi	r20, 0x88	; 136
    b7e2:	5c e3       	ldi	r21, 0x3C	; 60
    b7e4:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    b7e8:	9b 01       	movw	r18, r22
    b7ea:	ac 01       	movw	r20, r24
    b7ec:	6f 81       	ldd	r22, Y+7	; 0x07
    b7ee:	78 85       	ldd	r23, Y+8	; 0x08
    b7f0:	89 85       	ldd	r24, Y+9	; 0x09
    b7f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    b7f4:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    b7f8:	29 c0       	rjmp	.+82     	; 0xb84c <recoil_sprite_fine+0x88>
	}
	else if (sprite->direction == D_RIGHT)
    b7fa:	81 30       	cpi	r24, 0x01	; 1
    b7fc:	99 f4       	brne	.+38     	; 0xb824 <recoil_sprite_fine+0x60>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    b7fe:	80 e0       	ldi	r24, 0x00	; 0
    b800:	90 e0       	ldi	r25, 0x00	; 0
    b802:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    b806:	25 e6       	ldi	r18, 0x65	; 101
    b808:	38 e8       	ldi	r19, 0x88	; 136
    b80a:	48 e8       	ldi	r20, 0x88	; 136
    b80c:	5c e3       	ldi	r21, 0x3C	; 60
    b80e:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    b812:	9b 01       	movw	r18, r22
    b814:	ac 01       	movw	r20, r24
    b816:	6b 81       	ldd	r22, Y+3	; 0x03
    b818:	7c 81       	ldd	r23, Y+4	; 0x04
    b81a:	8d 81       	ldd	r24, Y+5	; 0x05
    b81c:	9e 81       	ldd	r25, Y+6	; 0x06
    b81e:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    b822:	2b c0       	rjmp	.+86     	; 0xb87a <recoil_sprite_fine+0xb6>
	}
	else if (sprite->direction == D_DOWN)
    b824:	82 30       	cpi	r24, 0x02	; 2
    b826:	b9 f4       	brne	.+46     	; 0xb856 <recoil_sprite_fine+0x92>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    b828:	80 e0       	ldi	r24, 0x00	; 0
    b82a:	90 e0       	ldi	r25, 0x00	; 0
    b82c:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    b830:	25 e6       	ldi	r18, 0x65	; 101
    b832:	38 e8       	ldi	r19, 0x88	; 136
    b834:	48 e8       	ldi	r20, 0x88	; 136
    b836:	5c e3       	ldi	r21, 0x3C	; 60
    b838:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    b83c:	9b 01       	movw	r18, r22
    b83e:	ac 01       	movw	r20, r24
    b840:	6f 81       	ldd	r22, Y+7	; 0x07
    b842:	78 85       	ldd	r23, Y+8	; 0x08
    b844:	89 85       	ldd	r24, Y+9	; 0x09
    b846:	9a 85       	ldd	r25, Y+10	; 0x0a
    b848:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    b84c:	6f 83       	std	Y+7, r22	; 0x07
    b84e:	78 87       	std	Y+8, r23	; 0x08
    b850:	89 87       	std	Y+9, r24	; 0x09
    b852:	9a 87       	std	Y+10, r25	; 0x0a
    b854:	16 c0       	rjmp	.+44     	; 0xb882 <recoil_sprite_fine+0xbe>
	}
	else
	{
		sprite->x += FRAME_TIME * sprite->speed;
    b856:	80 e0       	ldi	r24, 0x00	; 0
    b858:	90 e0       	ldi	r25, 0x00	; 0
    b85a:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    b85e:	25 e6       	ldi	r18, 0x65	; 101
    b860:	38 e8       	ldi	r19, 0x88	; 136
    b862:	48 e8       	ldi	r20, 0x88	; 136
    b864:	5c e3       	ldi	r21, 0x3C	; 60
    b866:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    b86a:	9b 01       	movw	r18, r22
    b86c:	ac 01       	movw	r20, r24
    b86e:	6b 81       	ldd	r22, Y+3	; 0x03
    b870:	7c 81       	ldd	r23, Y+4	; 0x04
    b872:	8d 81       	ldd	r24, Y+5	; 0x05
    b874:	9e 81       	ldd	r25, Y+6	; 0x06
    b876:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    b87a:	6b 83       	std	Y+3, r22	; 0x03
    b87c:	7c 83       	std	Y+4, r23	; 0x04
    b87e:	8d 83       	std	Y+5, r24	; 0x05
    b880:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b882:	81 e0       	ldi	r24, 0x01	; 1
    b884:	8a 83       	std	Y+2, r24	; 0x02
}
    b886:	df 91       	pop	r29
    b888:	cf 91       	pop	r28
    b88a:	08 95       	ret

0000b88c <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b88c:	8c 54       	subi	r24, 0x4C	; 76
    b88e:	93 4f       	sbci	r25, 0xF3	; 243
    b890:	fc 01       	movw	r30, r24
    b892:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b894:	81 30       	cpi	r24, 0x01	; 1
    b896:	31 f0       	breq	.+12     	; 0xb8a4 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    b898:	82 30       	cpi	r24, 0x02	; 2
    b89a:	31 f0       	breq	.+12     	; 0xb8a8 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    b89c:	87 33       	cpi	r24, 0x37	; 55
    b89e:	31 f0       	breq	.+12     	; 0xb8ac <solid_square_tile+0x20>

	return 0;
    b8a0:	80 e0       	ldi	r24, 0x00	; 0
    b8a2:	08 95       	ret
    b8a4:	81 e0       	ldi	r24, 0x01	; 1
    b8a6:	08 95       	ret
    b8a8:	82 e0       	ldi	r24, 0x02	; 2
    b8aa:	08 95       	ret
    b8ac:	87 e3       	ldi	r24, 0x37	; 55
}
    b8ae:	08 95       	ret

0000b8b0 <solid_tile>:

u8 solid_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b8b0:	8c 54       	subi	r24, 0x4C	; 76
    b8b2:	93 4f       	sbci	r25, 0xF3	; 243
    b8b4:	fc 01       	movw	r30, r24
    b8b6:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b8b8:	81 30       	cpi	r24, 0x01	; 1
    b8ba:	71 f0       	breq	.+28     	; 0xb8d8 <solid_tile+0x28>
	if (tile == L_METAL) return tile;
    b8bc:	82 30       	cpi	r24, 0x02	; 2
    b8be:	71 f0       	breq	.+28     	; 0xb8dc <solid_tile+0x2c>
	if (tile == L_FENCE) return tile;
    b8c0:	87 33       	cpi	r24, 0x37	; 55
    b8c2:	71 f0       	breq	.+28     	; 0xb8e0 <solid_tile+0x30>
	if (tile == L_TL) return tile;
    b8c4:	83 30       	cpi	r24, 0x03	; 3
    b8c6:	71 f0       	breq	.+28     	; 0xb8e4 <solid_tile+0x34>
	if (tile == L_BR) return tile;
    b8c8:	86 30       	cpi	r24, 0x06	; 6
    b8ca:	71 f0       	breq	.+28     	; 0xb8e8 <solid_tile+0x38>
	if (tile == L_TR) return tile;
    b8cc:	84 30       	cpi	r24, 0x04	; 4
    b8ce:	71 f0       	breq	.+28     	; 0xb8ec <solid_tile+0x3c>
	if (tile == L_BL) return tile;
    b8d0:	85 30       	cpi	r24, 0x05	; 5
    b8d2:	71 f0       	breq	.+28     	; 0xb8f0 <solid_tile+0x40>

	return 0;
    b8d4:	80 e0       	ldi	r24, 0x00	; 0
    b8d6:	08 95       	ret
    b8d8:	81 e0       	ldi	r24, 0x01	; 1
    b8da:	08 95       	ret
    b8dc:	82 e0       	ldi	r24, 0x02	; 2
    b8de:	08 95       	ret
    b8e0:	87 e3       	ldi	r24, 0x37	; 55
    b8e2:	08 95       	ret
    b8e4:	83 e0       	ldi	r24, 0x03	; 3
    b8e6:	08 95       	ret
    b8e8:	86 e0       	ldi	r24, 0x06	; 6
    b8ea:	08 95       	ret
    b8ec:	84 e0       	ldi	r24, 0x04	; 4
    b8ee:	08 95       	ret
    b8f0:	85 e0       	ldi	r24, 0x05	; 5
}
    b8f2:	08 95       	ret

0000b8f4 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b8f4:	8c 54       	subi	r24, 0x4C	; 76
    b8f6:	93 4f       	sbci	r25, 0xF3	; 243
    b8f8:	fc 01       	movw	r30, r24
    b8fa:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    b8fc:	83 30       	cpi	r24, 0x03	; 3
    b8fe:	41 f0       	breq	.+16     	; 0xb910 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    b900:	86 30       	cpi	r24, 0x06	; 6
    b902:	41 f0       	breq	.+16     	; 0xb914 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    b904:	84 30       	cpi	r24, 0x04	; 4
    b906:	41 f0       	breq	.+16     	; 0xb918 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    b908:	85 30       	cpi	r24, 0x05	; 5
    b90a:	41 f0       	breq	.+16     	; 0xb91c <solid_directional_tile+0x28>
	
	return 0;
    b90c:	80 e0       	ldi	r24, 0x00	; 0
    b90e:	08 95       	ret
    b910:	83 e0       	ldi	r24, 0x03	; 3
    b912:	08 95       	ret
    b914:	86 e0       	ldi	r24, 0x06	; 6
    b916:	08 95       	ret
    b918:	84 e0       	ldi	r24, 0x04	; 4
    b91a:	08 95       	ret
    b91c:	85 e0       	ldi	r24, 0x05	; 5
}
    b91e:	08 95       	ret

0000b920 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    b920:	7f 92       	push	r7
    b922:	8f 92       	push	r8
    b924:	9f 92       	push	r9
    b926:	af 92       	push	r10
    b928:	bf 92       	push	r11
    b92a:	cf 92       	push	r12
    b92c:	df 92       	push	r13
    b92e:	ef 92       	push	r14
    b930:	ff 92       	push	r15
    b932:	0f 93       	push	r16
    b934:	1f 93       	push	r17
    b936:	cf 93       	push	r28
    b938:	df 93       	push	r29
    b93a:	b6 2e       	mov	r11, r22
    b93c:	94 2e       	mov	r9, r20
    b93e:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    b940:	fc 01       	movw	r30, r24
    b942:	ec 54       	subi	r30, 0x4C	; 76
    b944:	f3 4f       	sbci	r31, 0xF3	; 243
    b946:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    b948:	6e e1       	ldi	r22, 0x1E	; 30
    b94a:	70 e0       	ldi	r23, 0x00	; 0
    b94c:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    b950:	f8 2e       	mov	r15, r24
    b952:	ff 0c       	add	r15, r15
    b954:	ff 0c       	add	r15, r15
    b956:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    b958:	6d 5f       	subi	r22, 0xFD	; 253
    b95a:	7f 4f       	sbci	r23, 0xFF	; 255
    b95c:	16 2f       	mov	r17, r22
    b95e:	11 0f       	add	r17, r17
    b960:	11 0f       	add	r17, r17
    b962:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    b964:	83 e0       	ldi	r24, 0x03	; 3
    b966:	d8 16       	cp	r13, r24
    b968:	19 f0       	breq	.+6      	; 0xb970 <collides_directional_tile+0x50>
    b96a:	86 e0       	ldi	r24, 0x06	; 6
    b96c:	d8 12       	cpse	r13, r24
    b96e:	31 c0       	rjmp	.+98     	; 0xb9d2 <collides_directional_tile+0xb2>
    b970:	cf ef       	ldi	r28, 0xFF	; 255
    b972:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    b974:	c9 0d       	add	r28, r9
    b976:	27 e0       	ldi	r18, 0x07	; 7
    b978:	72 2e       	mov	r7, r18
    b97a:	7f 0c       	add	r7, r15
    b97c:	37 e0       	ldi	r19, 0x07	; 7
    b97e:	83 2e       	mov	r8, r19
    b980:	81 0e       	add	r8, r17
    b982:	ac 2e       	mov	r10, r28
    b984:	cb 2c       	mov	r12, r11
    b986:	e9 2c       	mov	r14, r9
    b988:	0b 2d       	mov	r16, r11
    b98a:	21 2f       	mov	r18, r17
    b98c:	47 2d       	mov	r20, r7
    b98e:	68 2d       	mov	r22, r8
    b990:	8f 2d       	mov	r24, r15
    b992:	0e 94 a7 55 	call	0xab4e	; 0xab4e <LBLineIntersect>
    b996:	81 11       	cpse	r24, r1
    b998:	58 c0       	rjmp	.+176    	; 0xba4a <collides_directional_tile+0x12a>
    b99a:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    b99c:	db 0d       	add	r29, r11
    b99e:	a9 2c       	mov	r10, r9
    b9a0:	cd 2e       	mov	r12, r29
    b9a2:	21 2f       	mov	r18, r17
    b9a4:	47 2d       	mov	r20, r7
    b9a6:	68 2d       	mov	r22, r8
    b9a8:	8f 2d       	mov	r24, r15
    b9aa:	0e 94 a7 55 	call	0xab4e	; 0xab4e <LBLineIntersect>
    b9ae:	81 11       	cpse	r24, r1
    b9b0:	4c c0       	rjmp	.+152    	; 0xba4a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    b9b2:	ac 2e       	mov	r10, r28
    b9b4:	0d 2f       	mov	r16, r29
    b9b6:	21 2f       	mov	r18, r17
    b9b8:	47 2d       	mov	r20, r7
    b9ba:	68 2d       	mov	r22, r8
    b9bc:	8f 2d       	mov	r24, r15
    b9be:	0e 94 a7 55 	call	0xab4e	; 0xab4e <LBLineIntersect>
    b9c2:	81 11       	cpse	r24, r1
    b9c4:	42 c0       	rjmp	.+132    	; 0xba4a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    b9c6:	ec 2e       	mov	r14, r28
    b9c8:	0b 2d       	mov	r16, r11
    b9ca:	21 2f       	mov	r18, r17
    b9cc:	47 2d       	mov	r20, r7
    b9ce:	68 2d       	mov	r22, r8
    b9d0:	34 c0       	rjmp	.+104    	; 0xba3a <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    b9d2:	8c ef       	ldi	r24, 0xFC	; 252
    b9d4:	8d 0d       	add	r24, r13
    b9d6:	82 30       	cpi	r24, 0x02	; 2
    b9d8:	b0 f5       	brcc	.+108    	; 0xba46 <collides_directional_tile+0x126>
    b9da:	cf ef       	ldi	r28, 0xFF	; 255
    b9dc:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    b9de:	c4 0f       	add	r28, r20
    b9e0:	87 e0       	ldi	r24, 0x07	; 7
    b9e2:	78 2e       	mov	r7, r24
    b9e4:	71 0e       	add	r7, r17
    b9e6:	97 e0       	ldi	r25, 0x07	; 7
    b9e8:	89 2e       	mov	r8, r25
    b9ea:	8f 0c       	add	r8, r15
    b9ec:	ac 2e       	mov	r10, r28
    b9ee:	cb 2c       	mov	r12, r11
    b9f0:	e4 2e       	mov	r14, r20
    b9f2:	0b 2d       	mov	r16, r11
    b9f4:	27 2d       	mov	r18, r7
    b9f6:	48 2d       	mov	r20, r8
    b9f8:	61 2f       	mov	r22, r17
    b9fa:	8f 2d       	mov	r24, r15
    b9fc:	0e 94 a7 55 	call	0xab4e	; 0xab4e <LBLineIntersect>
    ba00:	81 11       	cpse	r24, r1
    ba02:	23 c0       	rjmp	.+70     	; 0xba4a <collides_directional_tile+0x12a>
    ba04:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    ba06:	db 0d       	add	r29, r11
    ba08:	a9 2c       	mov	r10, r9
    ba0a:	cd 2e       	mov	r12, r29
    ba0c:	27 2d       	mov	r18, r7
    ba0e:	48 2d       	mov	r20, r8
    ba10:	61 2f       	mov	r22, r17
    ba12:	8f 2d       	mov	r24, r15
    ba14:	0e 94 a7 55 	call	0xab4e	; 0xab4e <LBLineIntersect>
    ba18:	81 11       	cpse	r24, r1
    ba1a:	17 c0       	rjmp	.+46     	; 0xba4a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    ba1c:	ac 2e       	mov	r10, r28
    ba1e:	0d 2f       	mov	r16, r29
    ba20:	27 2d       	mov	r18, r7
    ba22:	48 2d       	mov	r20, r8
    ba24:	61 2f       	mov	r22, r17
    ba26:	8f 2d       	mov	r24, r15
    ba28:	0e 94 a7 55 	call	0xab4e	; 0xab4e <LBLineIntersect>
    ba2c:	81 11       	cpse	r24, r1
    ba2e:	0d c0       	rjmp	.+26     	; 0xba4a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    ba30:	ec 2e       	mov	r14, r28
    ba32:	0b 2d       	mov	r16, r11
    ba34:	27 2d       	mov	r18, r7
    ba36:	48 2d       	mov	r20, r8
    ba38:	61 2f       	mov	r22, r17
    ba3a:	8f 2d       	mov	r24, r15
    ba3c:	0e 94 a7 55 	call	0xab4e	; 0xab4e <LBLineIntersect>
    ba40:	81 11       	cpse	r24, r1
    ba42:	03 c0       	rjmp	.+6      	; 0xba4a <collides_directional_tile+0x12a>
    ba44:	03 c0       	rjmp	.+6      	; 0xba4c <collides_directional_tile+0x12c>
	}
	
	return 0;
    ba46:	80 e0       	ldi	r24, 0x00	; 0
    ba48:	01 c0       	rjmp	.+2      	; 0xba4c <collides_directional_tile+0x12c>
    ba4a:	8d 2d       	mov	r24, r13
}
    ba4c:	df 91       	pop	r29
    ba4e:	cf 91       	pop	r28
    ba50:	1f 91       	pop	r17
    ba52:	0f 91       	pop	r16
    ba54:	ff 90       	pop	r15
    ba56:	ef 90       	pop	r14
    ba58:	df 90       	pop	r13
    ba5a:	cf 90       	pop	r12
    ba5c:	bf 90       	pop	r11
    ba5e:	af 90       	pop	r10
    ba60:	9f 90       	pop	r9
    ba62:	8f 90       	pop	r8
    ba64:	7f 90       	pop	r7
    ba66:	08 95       	ret

0000ba68 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    ba68:	8f 92       	push	r8
    ba6a:	9f 92       	push	r9
    ba6c:	af 92       	push	r10
    ba6e:	cf 92       	push	r12
    ba70:	ef 92       	push	r14
    ba72:	0f 93       	push	r16
    ba74:	1f 93       	push	r17
    ba76:	cf 93       	push	r28
    ba78:	df 93       	push	r29
    ba7a:	4c 01       	movw	r8, r24
    ba7c:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    ba7e:	20 e0       	ldi	r18, 0x00	; 0
    ba80:	30 e0       	ldi	r19, 0x00	; 0
    ba82:	40 e0       	ldi	r20, 0x00	; 0
    ba84:	50 e4       	ldi	r21, 0x40	; 64
    ba86:	6f 81       	ldd	r22, Y+7	; 0x07
    ba88:	78 85       	ldd	r23, Y+8	; 0x08
    ba8a:	89 85       	ldd	r24, Y+9	; 0x09
    ba8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ba8e:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    ba92:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    ba96:	e6 2e       	mov	r14, r22
    ba98:	20 e0       	ldi	r18, 0x00	; 0
    ba9a:	30 e0       	ldi	r19, 0x00	; 0
    ba9c:	40 e0       	ldi	r20, 0x00	; 0
    ba9e:	50 e4       	ldi	r21, 0x40	; 64
    baa0:	6b 81       	ldd	r22, Y+3	; 0x03
    baa2:	7c 81       	ldd	r23, Y+4	; 0x04
    baa4:	8d 81       	ldd	r24, Y+5	; 0x05
    baa6:	9e 81       	ldd	r25, Y+6	; 0x06
    baa8:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    baac:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    bab0:	06 2f       	mov	r16, r22
    bab2:	20 e0       	ldi	r18, 0x00	; 0
    bab4:	30 e0       	ldi	r19, 0x00	; 0
    bab6:	40 e8       	ldi	r20, 0x80	; 128
    bab8:	5f e3       	ldi	r21, 0x3F	; 63
    baba:	f4 01       	movw	r30, r8
    babc:	67 81       	ldd	r22, Z+7	; 0x07
    babe:	70 85       	ldd	r23, Z+8	; 0x08
    bac0:	81 85       	ldd	r24, Z+9	; 0x09
    bac2:	92 85       	ldd	r25, Z+10	; 0x0a
    bac4:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    bac8:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    bacc:	16 2f       	mov	r17, r22
    bace:	20 e0       	ldi	r18, 0x00	; 0
    bad0:	30 e0       	ldi	r19, 0x00	; 0
    bad2:	40 e8       	ldi	r20, 0x80	; 128
    bad4:	5f e3       	ldi	r21, 0x3F	; 63
    bad6:	f4 01       	movw	r30, r8
    bad8:	63 81       	ldd	r22, Z+3	; 0x03
    bada:	74 81       	ldd	r23, Z+4	; 0x04
    badc:	85 81       	ldd	r24, Z+5	; 0x05
    bade:	96 81       	ldd	r25, Z+6	; 0x06
    bae0:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    bae4:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    bae8:	86 2f       	mov	r24, r22
    baea:	94 e0       	ldi	r25, 0x04	; 4
    baec:	a9 2e       	mov	r10, r25
    baee:	24 e0       	ldi	r18, 0x04	; 4
    baf0:	c2 2e       	mov	r12, r18
    baf2:	2e e0       	ldi	r18, 0x0E	; 14
    baf4:	4e e0       	ldi	r20, 0x0E	; 14
    baf6:	61 2f       	mov	r22, r17
    baf8:	0e 94 7d 55 	call	0xaafa	; 0xaafa <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    bafc:	88 23       	and	r24, r24
    bafe:	41 f0       	breq	.+16     	; 0xbb10 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    bb00:	f4 01       	movw	r30, r8
    bb02:	87 89       	ldd	r24, Z+23	; 0x17
    bb04:	88 37       	cpi	r24, 0x78	; 120
    bb06:	21 f4       	brne	.+8      	; 0xbb10 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    bb08:	81 e0       	ldi	r24, 0x01	; 1
    bb0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    bb0c:	99 30       	cpi	r25, 0x09	; 9
    bb0e:	08 f4       	brcc	.+2      	; 0xbb12 <player_shot+0xaa>
    bb10:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    bb12:	df 91       	pop	r29
    bb14:	cf 91       	pop	r28
    bb16:	1f 91       	pop	r17
    bb18:	0f 91       	pop	r16
    bb1a:	ef 90       	pop	r14
    bb1c:	cf 90       	pop	r12
    bb1e:	af 90       	pop	r10
    bb20:	9f 90       	pop	r9
    bb22:	8f 90       	pop	r8
    bb24:	08 95       	ret

0000bb26 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    bb26:	cf 92       	push	r12
    bb28:	df 92       	push	r13
    bb2a:	ef 92       	push	r14
    bb2c:	ff 92       	push	r15
    bb2e:	cf 93       	push	r28
    bb30:	df 93       	push	r29
    bb32:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    bb34:	cb 80       	ldd	r12, Y+3	; 0x03
    bb36:	dc 80       	ldd	r13, Y+4	; 0x04
    bb38:	ed 80       	ldd	r14, Y+5	; 0x05
    bb3a:	fe 80       	ldd	r15, Y+6	; 0x06
    bb3c:	20 e0       	ldi	r18, 0x00	; 0
    bb3e:	30 e0       	ldi	r19, 0x00	; 0
    bb40:	a9 01       	movw	r20, r18
    bb42:	c7 01       	movw	r24, r14
    bb44:	b6 01       	movw	r22, r12
    bb46:	0e 94 2f 72 	call	0xe45e	; 0xe45e <__cmpsf2>
    bb4a:	87 fd       	sbrc	r24, 7
    bb4c:	31 c0       	rjmp	.+98     	; 0xbbb0 <collision_detect_boundries+0x8a>
    bb4e:	20 e0       	ldi	r18, 0x00	; 0
    bb50:	30 e0       	ldi	r19, 0x00	; 0
    bb52:	40 e0       	ldi	r20, 0x00	; 0
    bb54:	51 e4       	ldi	r21, 0x41	; 65
    bb56:	c7 01       	movw	r24, r14
    bb58:	b6 01       	movw	r22, r12
    bb5a:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    bb5e:	20 e0       	ldi	r18, 0x00	; 0
    bb60:	30 e0       	ldi	r19, 0x00	; 0
    bb62:	40 e7       	ldi	r20, 0x70	; 112
    bb64:	53 e4       	ldi	r21, 0x43	; 67
    bb66:	0e 94 7e 73 	call	0xe6fc	; 0xe6fc <__gesf2>
    bb6a:	18 16       	cp	r1, r24
    bb6c:	0c f1       	brlt	.+66     	; 0xbbb0 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    bb6e:	cf 80       	ldd	r12, Y+7	; 0x07
    bb70:	d8 84       	ldd	r13, Y+8	; 0x08
    bb72:	e9 84       	ldd	r14, Y+9	; 0x09
    bb74:	fa 84       	ldd	r15, Y+10	; 0x0a
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    bb76:	20 e0       	ldi	r18, 0x00	; 0
    bb78:	30 e0       	ldi	r19, 0x00	; 0
    bb7a:	40 ec       	ldi	r20, 0xC0	; 192
    bb7c:	51 e4       	ldi	r21, 0x41	; 65
    bb7e:	c7 01       	movw	r24, r14
    bb80:	b6 01       	movw	r22, r12
    bb82:	0e 94 2f 72 	call	0xe45e	; 0xe45e <__cmpsf2>
    bb86:	87 fd       	sbrc	r24, 7
    bb88:	13 c0       	rjmp	.+38     	; 0xbbb0 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    bb8a:	20 e0       	ldi	r18, 0x00	; 0
    bb8c:	30 e0       	ldi	r19, 0x00	; 0
    bb8e:	40 e0       	ldi	r20, 0x00	; 0
    bb90:	51 e4       	ldi	r21, 0x41	; 65
    bb92:	c7 01       	movw	r24, r14
    bb94:	b6 01       	movw	r22, r12
    bb96:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    bb9a:	c1 e0       	ldi	r28, 0x01	; 1
    bb9c:	20 e0       	ldi	r18, 0x00	; 0
    bb9e:	30 e0       	ldi	r19, 0x00	; 0
    bba0:	40 e6       	ldi	r20, 0x60	; 96
    bba2:	53 e4       	ldi	r21, 0x43	; 67
    bba4:	0e 94 7e 73 	call	0xe6fc	; 0xe6fc <__gesf2>
    bba8:	18 16       	cp	r1, r24
    bbaa:	1c f0       	brlt	.+6      	; 0xbbb2 <collision_detect_boundries+0x8c>
    bbac:	c0 e0       	ldi	r28, 0x00	; 0
    bbae:	01 c0       	rjmp	.+2      	; 0xbbb2 <collision_detect_boundries+0x8c>
	{
		return 1;
    bbb0:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    bbb2:	8c 2f       	mov	r24, r28
    bbb4:	df 91       	pop	r29
    bbb6:	cf 91       	pop	r28
    bbb8:	ff 90       	pop	r15
    bbba:	ef 90       	pop	r14
    bbbc:	df 90       	pop	r13
    bbbe:	cf 90       	pop	r12
    bbc0:	08 95       	ret

0000bbc2 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    bbc2:	0f 93       	push	r16
    bbc4:	1f 93       	push	r17
    bbc6:	cf 93       	push	r28
    bbc8:	9b 01       	movw	r18, r22
    bbca:	c4 2f       	mov	r28, r20
	if (level.level_map[tile_index] == L_EMPTY)
    bbcc:	8c 01       	movw	r16, r24
    bbce:	0c 54       	subi	r16, 0x4C	; 76
    bbd0:	13 4f       	sbci	r17, 0xF3	; 243
    bbd2:	f8 01       	movw	r30, r16
    bbd4:	41 81       	ldd	r20, Z+1	; 0x01
    bbd6:	41 11       	cpse	r20, r1
    bbd8:	06 c0       	rjmp	.+12     	; 0xbbe6 <drop_item+0x24>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30, map);
    bbda:	6e e1       	ldi	r22, 0x1E	; 30
    bbdc:	70 e0       	ldi	r23, 0x00	; 0
    bbde:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    bbe2:	6d 5f       	subi	r22, 0xFD	; 253
    bbe4:	19 c0       	rjmp	.+50     	; 0xbc18 <drop_item+0x56>
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    bbe6:	8c 01       	movw	r16, r24
    bbe8:	0b 54       	subi	r16, 0x4B	; 75
    bbea:	13 4f       	sbci	r17, 0xF3	; 243
    bbec:	f8 01       	movw	r30, r16
    bbee:	41 81       	ldd	r20, Z+1	; 0x01
    bbf0:	41 11       	cpse	r20, r1
    bbf2:	06 c0       	rjmp	.+12     	; 0xbc00 <drop_item+0x3e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30, map);
    bbf4:	6e e1       	ldi	r22, 0x1E	; 30
    bbf6:	70 e0       	ldi	r23, 0x00	; 0
    bbf8:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    bbfc:	6d 5f       	subi	r22, 0xFD	; 253
    bbfe:	1a c0       	rjmp	.+52     	; 0xbc34 <drop_item+0x72>
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    bc00:	8c 01       	movw	r16, r24
    bc02:	0e 52       	subi	r16, 0x2E	; 46
    bc04:	13 4f       	sbci	r17, 0xF3	; 243
    bc06:	f8 01       	movw	r30, r16
    bc08:	41 81       	ldd	r20, Z+1	; 0x01
    bc0a:	41 11       	cpse	r20, r1
    bc0c:	07 c0       	rjmp	.+14     	; 0xbc1c <drop_item+0x5a>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map);
    bc0e:	6e e1       	ldi	r22, 0x1E	; 30
    bc10:	70 e0       	ldi	r23, 0x00	; 0
    bc12:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    bc16:	6c 5f       	subi	r22, 0xFC	; 252
    bc18:	a9 01       	movw	r20, r18
    bc1a:	0e c0       	rjmp	.+28     	; 0xbc38 <drop_item+0x76>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    bc1c:	8c 01       	movw	r16, r24
    bc1e:	0d 52       	subi	r16, 0x2D	; 45
    bc20:	13 4f       	sbci	r17, 0xF3	; 243
    bc22:	f8 01       	movw	r30, r16
    bc24:	41 81       	ldd	r20, Z+1	; 0x01
    bc26:	41 11       	cpse	r20, r1
    bc28:	0b c0       	rjmp	.+22     	; 0xbc40 <drop_item+0x7e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map);
    bc2a:	6e e1       	ldi	r22, 0x1E	; 30
    bc2c:	70 e0       	ldi	r23, 0x00	; 0
    bc2e:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    bc32:	6c 5f       	subi	r22, 0xFC	; 252
    bc34:	a9 01       	movw	r20, r18
    bc36:	8f 5f       	subi	r24, 0xFF	; 255
    bc38:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
		level.level_map[tile_index+31] = item_type;
    bc3c:	f8 01       	movw	r30, r16
    bc3e:	c1 83       	std	Z+1, r28	; 0x01
	}
}
    bc40:	cf 91       	pop	r28
    bc42:	1f 91       	pop	r17
    bc44:	0f 91       	pop	r16
    bc46:	08 95       	ret

0000bc48 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    bc48:	ff 92       	push	r15
    bc4a:	0f 93       	push	r16
    bc4c:	1f 93       	push	r17
    bc4e:	cf 93       	push	r28
    bc50:	df 93       	push	r29
    bc52:	ec 01       	movw	r28, r24
    bc54:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    bc56:	20 e0       	ldi	r18, 0x00	; 0
    bc58:	30 e0       	ldi	r19, 0x00	; 0
    bc5a:	40 e0       	ldi	r20, 0x00	; 0
    bc5c:	5e e3       	ldi	r21, 0x3E	; 62
    bc5e:	6f 81       	ldd	r22, Y+7	; 0x07
    bc60:	78 85       	ldd	r23, Y+8	; 0x08
    bc62:	89 85       	ldd	r24, Y+9	; 0x09
    bc64:	9a 85       	ldd	r25, Y+10	; 0x0a
    bc66:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    bc6a:	20 e0       	ldi	r18, 0x00	; 0
    bc6c:	30 e0       	ldi	r19, 0x00	; 0
    bc6e:	40 e4       	ldi	r20, 0x40	; 64
    bc70:	50 e4       	ldi	r21, 0x40	; 64
    bc72:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    bc76:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    bc7a:	8e e1       	ldi	r24, 0x1E	; 30
    bc7c:	68 9f       	mul	r22, r24
    bc7e:	80 01       	movw	r16, r0
    bc80:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    bc82:	20 e0       	ldi	r18, 0x00	; 0
    bc84:	30 e0       	ldi	r19, 0x00	; 0
    bc86:	40 e0       	ldi	r20, 0x00	; 0
    bc88:	5e e3       	ldi	r21, 0x3E	; 62
    bc8a:	6b 81       	ldd	r22, Y+3	; 0x03
    bc8c:	7c 81       	ldd	r23, Y+4	; 0x04
    bc8e:	8d 81       	ldd	r24, Y+5	; 0x05
    bc90:	9e 81       	ldd	r25, Y+6	; 0x06
    bc92:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    bc96:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    bc9a:	06 0f       	add	r16, r22
    bc9c:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    bc9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    bca0:	88 23       	and	r24, r24
    bca2:	79 f0       	breq	.+30     	; 0xbcc2 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    bca4:	40 e0       	ldi	r20, 0x00	; 0
    bca6:	50 e0       	ldi	r21, 0x00	; 0
    bca8:	61 e0       	ldi	r22, 0x01	; 1
    bcaa:	8a e0       	ldi	r24, 0x0A	; 10
    bcac:	8f 0d       	add	r24, r15
    bcae:	0e 94 d5 45 	call	0x8baa	; 0x8baa <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    bcb2:	47 e0       	ldi	r20, 0x07	; 7
    bcb4:	6b ef       	ldi	r22, 0xFB	; 251
    bcb6:	72 e8       	ldi	r23, 0x82	; 130
    bcb8:	c8 01       	movw	r24, r16
    bcba:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <drop_item>
		player->max_speed = MAX_SPEED;
    bcbe:	82 e3       	ldi	r24, 0x32	; 50
    bcc0:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    bcc2:	89 8d       	ldd	r24, Y+25	; 0x19
    bcc4:	88 23       	and	r24, r24
    bcc6:	69 f0       	breq	.+26     	; 0xbce2 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    bcc8:	40 e0       	ldi	r20, 0x00	; 0
    bcca:	50 e0       	ldi	r21, 0x00	; 0
    bccc:	61 e0       	ldi	r22, 0x01	; 1
    bcce:	8b e0       	ldi	r24, 0x0B	; 11
    bcd0:	8f 0d       	add	r24, r15
    bcd2:	0e 94 d5 45 	call	0x8baa	; 0x8baa <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    bcd6:	49 e0       	ldi	r20, 0x09	; 9
    bcd8:	65 ef       	ldi	r22, 0xF5	; 245
    bcda:	72 e8       	ldi	r23, 0x82	; 130
    bcdc:	c8 01       	movw	r24, r16
    bcde:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <drop_item>
	}
	player->has_over_speed = false;
    bce2:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    bce4:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    bce6:	8c 89       	ldd	r24, Y+20	; 0x14
    bce8:	81 60       	ori	r24, 0x01	; 1
    bcea:	8c 8b       	std	Y+20, r24	; 0x14
}
    bcec:	df 91       	pop	r29
    bcee:	cf 91       	pop	r28
    bcf0:	1f 91       	pop	r17
    bcf2:	0f 91       	pop	r16
    bcf4:	ff 90       	pop	r15
    bcf6:	08 95       	ret

0000bcf8 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    bcf8:	fc 01       	movw	r30, r24
    bcfa:	8e e1       	ldi	r24, 0x1E	; 30
    bcfc:	48 9f       	mul	r20, r24
    bcfe:	a0 01       	movw	r20, r0
    bd00:	11 24       	eor	r1, r1
    bd02:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    bd04:	64 0f       	add	r22, r20
    bd06:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    bd08:	21 11       	cpse	r18, r1
    bd0a:	05 c0       	rjmp	.+10     	; 0xbd16 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    bd0c:	71 83       	std	Z+1, r23	; 0x01
    bd0e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    bd10:	6f 5f       	subi	r22, 0xFF	; 255
    bd12:	7f 4f       	sbci	r23, 0xFF	; 255
    bd14:	12 c0       	rjmp	.+36     	; 0xbd3a <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    bd16:	21 30       	cpi	r18, 0x01	; 1
    bd18:	19 f4       	brne	.+6      	; 0xbd20 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    bd1a:	cb 01       	movw	r24, r22
    bd1c:	01 96       	adiw	r24, 0x01	; 1
    bd1e:	04 c0       	rjmp	.+8      	; 0xbd28 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    bd20:	22 30       	cpi	r18, 0x02	; 2
    bd22:	39 f4       	brne	.+14     	; 0xbd32 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    bd24:	cb 01       	movw	r24, r22
    bd26:	4e 96       	adiw	r24, 0x1e	; 30
    bd28:	91 83       	std	Z+1, r25	; 0x01
    bd2a:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    bd2c:	61 5e       	subi	r22, 0xE1	; 225
    bd2e:	7f 4f       	sbci	r23, 0xFF	; 255
    bd30:	04 c0       	rjmp	.+8      	; 0xbd3a <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    bd32:	71 83       	std	Z+1, r23	; 0x01
    bd34:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    bd36:	62 5e       	subi	r22, 0xE2	; 226
    bd38:	7f 4f       	sbci	r23, 0xFF	; 255
    bd3a:	73 83       	std	Z+3, r23	; 0x03
    bd3c:	62 83       	std	Z+2, r22	; 0x02
    bd3e:	08 95       	ret

0000bd40 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    bd40:	ef 92       	push	r14
    bd42:	ff 92       	push	r15
    bd44:	0f 93       	push	r16
    bd46:	1f 93       	push	r17
    bd48:	cf 93       	push	r28
    bd4a:	df 93       	push	r29
    bd4c:	ec 01       	movw	r28, r24
    bd4e:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    bd50:	8e e1       	ldi	r24, 0x1E	; 30
    bd52:	e8 2e       	mov	r14, r24
    bd54:	f1 2c       	mov	r15, r1
    bd56:	cb 01       	movw	r24, r22
    bd58:	b7 01       	movw	r22, r14
    bd5a:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    bd5e:	6d 5f       	subi	r22, 0xFD	; 253
    bd60:	40 e0       	ldi	r20, 0x00	; 0
    bd62:	50 e0       	ldi	r21, 0x00	; 0
    bd64:	0e 94 d5 45 	call	0x8baa	; 0x8baa <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    bd68:	88 81       	ld	r24, Y
    bd6a:	fe 01       	movw	r30, r28
    bd6c:	9e e0       	ldi	r25, 0x0E	; 14
    bd6e:	89 9f       	mul	r24, r25
    bd70:	e0 0d       	add	r30, r0
    bd72:	f1 1d       	adc	r31, r1
    bd74:	11 24       	eor	r1, r1
    bd76:	85 85       	ldd	r24, Z+13	; 0x0d
    bd78:	96 85       	ldd	r25, Z+14	; 0x0e
    bd7a:	00 97       	sbiw	r24, 0x00	; 0
    bd7c:	41 f0       	breq	.+16     	; 0xbd8e <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    bd7e:	b7 01       	movw	r22, r14
    bd80:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    bd84:	6d 5f       	subi	r22, 0xFD	; 253
    bd86:	40 e0       	ldi	r20, 0x00	; 0
    bd88:	50 e0       	ldi	r21, 0x00	; 0
    bd8a:	0e 94 d5 45 	call	0x8baa	; 0x8baa <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    bd8e:	88 81       	ld	r24, Y
    bd90:	fe 01       	movw	r30, r28
    bd92:	9e e0       	ldi	r25, 0x0E	; 14
    bd94:	89 9f       	mul	r24, r25
    bd96:	e0 0d       	add	r30, r0
    bd98:	f1 1d       	adc	r31, r1
    bd9a:	11 24       	eor	r1, r1
    bd9c:	16 87       	std	Z+14, r17	; 0x0e
    bd9e:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    bda0:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    bda2:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    bda4:	82 30       	cpi	r24, 0x02	; 2
    bda6:	11 f0       	breq	.+4      	; 0xbdac <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    bda8:	88 83       	st	Y, r24
    bdaa:	01 c0       	rjmp	.+2      	; 0xbdae <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    bdac:	18 82       	st	Y, r1
	}
}
    bdae:	df 91       	pop	r29
    bdb0:	cf 91       	pop	r28
    bdb2:	1f 91       	pop	r17
    bdb4:	0f 91       	pop	r16
    bdb6:	ff 90       	pop	r15
    bdb8:	ef 90       	pop	r14
    bdba:	08 95       	ret

0000bdbc <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    bdbc:	fb 01       	movw	r30, r22
	switch (tile_type)
    bdbe:	84 30       	cpi	r24, 0x04	; 4
    bdc0:	71 f0       	breq	.+28     	; 0xbdde <richochet+0x22>
    bdc2:	18 f4       	brcc	.+6      	; 0xbdca <richochet+0xe>
    bdc4:	83 30       	cpi	r24, 0x03	; 3
    bdc6:	31 f0       	breq	.+12     	; 0xbdd4 <richochet+0x18>
    bdc8:	08 95       	ret
    bdca:	85 30       	cpi	r24, 0x05	; 5
    bdcc:	99 f0       	breq	.+38     	; 0xbdf4 <richochet+0x38>
    bdce:	86 30       	cpi	r24, 0x06	; 6
    bdd0:	59 f0       	breq	.+22     	; 0xbde8 <richochet+0x2c>
    bdd2:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    bdd4:	80 81       	ld	r24, Z
    bdd6:	8d 7f       	andi	r24, 0xFD	; 253
    bdd8:	29 f4       	brne	.+10     	; 0xbde4 <richochet+0x28>
				sprite->direction = D_RIGHT;
    bdda:	81 e0       	ldi	r24, 0x01	; 1
    bddc:	09 c0       	rjmp	.+18     	; 0xbdf0 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    bdde:	80 81       	ld	r24, Z
    bde0:	8d 7f       	andi	r24, 0xFD	; 253
    bde2:	29 f0       	breq	.+10     	; 0xbdee <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    bde4:	82 e0       	ldi	r24, 0x02	; 2
    bde6:	04 c0       	rjmp	.+8      	; 0xbdf0 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    bde8:	80 81       	ld	r24, Z
    bdea:	8d 7f       	andi	r24, 0xFD	; 253
    bdec:	31 f4       	brne	.+12     	; 0xbdfa <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    bdee:	83 e0       	ldi	r24, 0x03	; 3
    bdf0:	80 83       	st	Z, r24
    bdf2:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    bdf4:	80 81       	ld	r24, Z
    bdf6:	8d 7f       	andi	r24, 0xFD	; 253
    bdf8:	81 f3       	breq	.-32     	; 0xbdda <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    bdfa:	10 82       	st	Z, r1
    bdfc:	08 95       	ret

0000bdfe <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    bdfe:	2f 92       	push	r2
    be00:	3f 92       	push	r3
    be02:	4f 92       	push	r4
    be04:	5f 92       	push	r5
    be06:	6f 92       	push	r6
    be08:	7f 92       	push	r7
    be0a:	8f 92       	push	r8
    be0c:	9f 92       	push	r9
    be0e:	af 92       	push	r10
    be10:	bf 92       	push	r11
    be12:	cf 92       	push	r12
    be14:	df 92       	push	r13
    be16:	ef 92       	push	r14
    be18:	ff 92       	push	r15
    be1a:	0f 93       	push	r16
    be1c:	1f 93       	push	r17
    be1e:	cf 93       	push	r28
    be20:	df 93       	push	r29
    be22:	00 d0       	rcall	.+0      	; 0xbe24 <collision_detect_shot+0x26>
    be24:	00 d0       	rcall	.+0      	; 0xbe26 <collision_detect_shot+0x28>
    be26:	1f 92       	push	r1
    be28:	cd b7       	in	r28, 0x3d	; 61
    be2a:	de b7       	in	r29, 0x3e	; 62
    be2c:	3c 01       	movw	r6, r24
    be2e:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    be30:	1a 82       	std	Y+2, r1	; 0x02
    be32:	19 82       	std	Y+1, r1	; 0x01
    be34:	1c 82       	std	Y+4, r1	; 0x04
    be36:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    be38:	20 e0       	ldi	r18, 0x00	; 0
    be3a:	30 e0       	ldi	r19, 0x00	; 0
    be3c:	40 e0       	ldi	r20, 0x00	; 0
    be3e:	5e e3       	ldi	r21, 0x3E	; 62
    be40:	db 01       	movw	r26, r22
    be42:	17 96       	adiw	r26, 0x07	; 7
    be44:	6d 91       	ld	r22, X+
    be46:	7d 91       	ld	r23, X+
    be48:	8d 91       	ld	r24, X+
    be4a:	9c 91       	ld	r25, X
    be4c:	1a 97       	sbiw	r26, 0x0a	; 10
    be4e:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    be52:	20 e0       	ldi	r18, 0x00	; 0
    be54:	30 e0       	ldi	r19, 0x00	; 0
    be56:	40 e4       	ldi	r20, 0x40	; 64
    be58:	50 e4       	ldi	r21, 0x40	; 64
    be5a:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    be5e:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    be62:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    be64:	20 e0       	ldi	r18, 0x00	; 0
    be66:	30 e0       	ldi	r19, 0x00	; 0
    be68:	40 e0       	ldi	r20, 0x00	; 0
    be6a:	5e e3       	ldi	r21, 0x3E	; 62
    be6c:	f4 01       	movw	r30, r8
    be6e:	63 81       	ldd	r22, Z+3	; 0x03
    be70:	74 81       	ldd	r23, Z+4	; 0x04
    be72:	85 81       	ldd	r24, Z+5	; 0x05
    be74:	96 81       	ldd	r25, Z+6	; 0x06
    be76:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    be7a:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    be7e:	d4 01       	movw	r26, r8
    be80:	2c 91       	ld	r18, X
    be82:	41 2f       	mov	r20, r17
    be84:	ce 01       	movw	r24, r28
    be86:	01 96       	adiw	r24, 0x01	; 1
    be88:	0e 94 7c 5e 	call	0xbcf8	; 0xbcf8 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    be8c:	c4 01       	movw	r24, r8
    be8e:	0e 94 93 5d 	call	0xbb26	; 0xbb26 <collision_detect_boundries>
    be92:	88 23       	and	r24, r24
    be94:	69 f0       	breq	.+26     	; 0xbeb0 <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    be96:	f4 01       	movw	r30, r8
    be98:	63 85       	ldd	r22, Z+11	; 0x0b
    be9a:	c4 01       	movw	r24, r8
    be9c:	0e 94 2c 57 	call	0xae58	; 0xae58 <init_shot_state>
		player->active_shots--;
    bea0:	d3 01       	movw	r26, r6
    bea2:	51 96       	adiw	r26, 0x11	; 17
    bea4:	8c 91       	ld	r24, X
    bea6:	51 97       	sbiw	r26, 0x11	; 17
    bea8:	81 50       	subi	r24, 0x01	; 1
    beaa:	51 96       	adiw	r26, 0x11	; 17
    beac:	8c 93       	st	X, r24
		return;
    beae:	78 c1       	rjmp	.+752    	; 0xc1a0 <collision_detect_shot+0x3a2>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    beb0:	b4 01       	movw	r22, r8
    beb2:	85 e3       	ldi	r24, 0x35	; 53
    beb4:	9c e0       	ldi	r25, 0x0C	; 12
    beb6:	0e 94 34 5d 	call	0xba68	; 0xba68 <player_shot>
    beba:	88 23       	and	r24, r24
    bebc:	b9 f0       	breq	.+46     	; 0xbeec <collision_detect_shot+0xee>
    bebe:	80 91 49 0c 	lds	r24, 0x0C49
    bec2:	80 fd       	sbrc	r24, 0
    bec4:	13 c0       	rjmp	.+38     	; 0xbeec <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    bec6:	80 91 b3 0f 	lds	r24, 0x0FB3
    beca:	8f 5f       	subi	r24, 0xFF	; 255
    becc:	80 93 b3 0f 	sts	0x0FB3, r24
		player2.score++;
    bed0:	80 91 b2 0f 	lds	r24, 0x0FB2
    bed4:	8f 5f       	subi	r24, 0xFF	; 255
    bed6:	80 93 b2 0f 	sts	0x0FB2, r24
		render_score(&player2, 15);
    beda:	6f e0       	ldi	r22, 0x0F	; 15
    bedc:	83 ea       	ldi	r24, 0xA3	; 163
    bede:	9f e0       	ldi	r25, 0x0F	; 15
    bee0:	0e 94 0b 5a 	call	0xb416	; 0xb416 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    bee4:	05 e3       	ldi	r16, 0x35	; 53
    bee6:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    bee8:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    beea:	2d c0       	rjmp	.+90     	; 0xbf46 <collision_detect_shot+0x148>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    beec:	b4 01       	movw	r22, r8
    beee:	83 ea       	ldi	r24, 0xA3	; 163
    bef0:	9f e0       	ldi	r25, 0x0F	; 15
    bef2:	0e 94 34 5d 	call	0xba68	; 0xba68 <player_shot>
    bef6:	81 11       	cpse	r24, r1
    bef8:	0b c0       	rjmp	.+22     	; 0xbf10 <collision_detect_shot+0x112>
    befa:	fe 01       	movw	r30, r28
    befc:	31 96       	adiw	r30, 0x01	; 1
    befe:	2f 01       	movw	r4, r30
    bf00:	1d 82       	std	Y+5, r1	; 0x05
    bf02:	f1 2c       	mov	r15, r1
    bf04:	d1 2c       	mov	r13, r1
    bf06:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    bf08:	6e e1       	ldi	r22, 0x1E	; 30
    bf0a:	26 2e       	mov	r2, r22
    bf0c:	31 2c       	mov	r3, r1
    bf0e:	62 c0       	rjmp	.+196    	; 0xbfd4 <collision_detect_shot+0x1d6>
		hud_x = 0;
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    bf10:	80 91 b7 0f 	lds	r24, 0x0FB7
    bf14:	80 fd       	sbrc	r24, 0
    bf16:	f1 cf       	rjmp	.-30     	; 0xbefa <collision_detect_shot+0xfc>
    bf18:	80 91 0e 0c 	lds	r24, 0x0C0E
    bf1c:	81 11       	cpse	r24, r1
    bf1e:	ed cf       	rjmp	.-38     	; 0xbefa <collision_detect_shot+0xfc>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    bf20:	80 91 45 0c 	lds	r24, 0x0C45
    bf24:	8f 5f       	subi	r24, 0xFF	; 255
    bf26:	80 93 45 0c 	sts	0x0C45, r24
		player1.score++;
    bf2a:	80 91 44 0c 	lds	r24, 0x0C44
    bf2e:	8f 5f       	subi	r24, 0xFF	; 255
    bf30:	80 93 44 0c 	sts	0x0C44, r24
		render_score(&player1, 0);
    bf34:	60 e0       	ldi	r22, 0x00	; 0
    bf36:	85 e3       	ldi	r24, 0x35	; 53
    bf38:	9c e0       	ldi	r25, 0x0C	; 12
    bf3a:	0e 94 0b 5a 	call	0xb416	; 0xb416 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    bf3e:	03 ea       	ldi	r16, 0xA3	; 163
    bf40:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    bf42:	5f e0       	ldi	r21, 0x0F	; 15
    bf44:	f5 2e       	mov	r15, r21
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    bf46:	01 15       	cp	r16, r1
    bf48:	11 05       	cpc	r17, r1
    bf4a:	b9 f2       	breq	.-82     	; 0xbefa <collision_detect_shot+0xfc>
	{
		init_shot_state(shot, shot->shot_type);
    bf4c:	d4 01       	movw	r26, r8
    bf4e:	1b 96       	adiw	r26, 0x0b	; 11
    bf50:	6c 91       	ld	r22, X
    bf52:	c4 01       	movw	r24, r8
    bf54:	0e 94 2c 57 	call	0xae58	; 0xae58 <init_shot_state>
		player->active_shots--;
    bf58:	f3 01       	movw	r30, r6
    bf5a:	81 89       	ldd	r24, Z+17	; 0x11
    bf5c:	81 50       	subi	r24, 0x01	; 1
    bf5e:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    bf60:	6f 2d       	mov	r22, r15
    bf62:	c8 01       	movw	r24, r16
    bf64:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <kill_player>
		SFX_TANK_EXPLODE;
    bf68:	2f ef       	ldi	r18, 0xFF	; 255
    bf6a:	40 e1       	ldi	r20, 0x10	; 16
    bf6c:	67 e0       	ldi	r22, 0x07	; 7
    bf6e:	10 c1       	rjmp	.+544    	; 0xc190 <collision_detect_shot+0x392>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    bf70:	c5 01       	movw	r24, r10
    bf72:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <solid_directional_tile>
    bf76:	88 23       	and	r24, r24
    bf78:	c1 f1       	breq	.+112    	; 0xbfea <collision_detect_shot+0x1ec>
    bf7a:	20 e0       	ldi	r18, 0x00	; 0
    bf7c:	30 e0       	ldi	r19, 0x00	; 0
    bf7e:	40 e0       	ldi	r20, 0x00	; 0
    bf80:	50 e4       	ldi	r21, 0x40	; 64
    bf82:	f4 01       	movw	r30, r8
    bf84:	67 81       	ldd	r22, Z+7	; 0x07
    bf86:	70 85       	ldd	r23, Z+8	; 0x08
    bf88:	81 85       	ldd	r24, Z+9	; 0x09
    bf8a:	92 85       	ldd	r25, Z+10	; 0x0a
    bf8c:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    bf90:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    bf94:	c6 2e       	mov	r12, r22
    bf96:	20 e0       	ldi	r18, 0x00	; 0
    bf98:	30 e0       	ldi	r19, 0x00	; 0
    bf9a:	40 e0       	ldi	r20, 0x00	; 0
    bf9c:	50 e4       	ldi	r21, 0x40	; 64
    bf9e:	d4 01       	movw	r26, r8
    bfa0:	13 96       	adiw	r26, 0x03	; 3
    bfa2:	6d 91       	ld	r22, X+
    bfa4:	7d 91       	ld	r23, X+
    bfa6:	8d 91       	ld	r24, X+
    bfa8:	9c 91       	ld	r25, X
    bfaa:	16 97       	sbiw	r26, 0x06	; 6
    bfac:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    bfb0:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    bfb4:	04 e0       	ldi	r16, 0x04	; 4
    bfb6:	24 e0       	ldi	r18, 0x04	; 4
    bfb8:	4c 2d       	mov	r20, r12
    bfba:	c5 01       	movw	r24, r10
    bfbc:	0e 94 90 5c 	call	0xb920	; 0xb920 <collides_directional_tile>
    bfc0:	88 23       	and	r24, r24
    bfc2:	99 f0       	breq	.+38     	; 0xbfea <collision_detect_shot+0x1ec>
		{
			hit = hit | HIT_ANGLE;
    bfc4:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    bfc6:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    bfc8:	bd 81       	ldd	r27, Y+5	; 0x05
    bfca:	b1 30       	cpi	r27, 0x01	; 1
    bfcc:	09 f4       	brne	.+2      	; 0xbfd0 <collision_detect_shot+0x1d2>
    bfce:	88 c0       	rjmp	.+272    	; 0xc0e0 <collision_detect_shot+0x2e2>
    bfd0:	f1 e0       	ldi	r31, 0x01	; 1
    bfd2:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    bfd4:	d2 01       	movw	r26, r4
    bfd6:	ad 90       	ld	r10, X+
    bfd8:	bd 90       	ld	r11, X+
    bfda:	2d 01       	movw	r4, r26
    bfdc:	f5 01       	movw	r30, r10
    bfde:	ec 54       	subi	r30, 0x4C	; 76
    bfe0:	f3 4f       	sbci	r31, 0xF3	; 243
    bfe2:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    bfe4:	ee 20       	and	r14, r14
    bfe6:	81 f3       	breq	.-32     	; 0xbfc8 <collision_detect_shot+0x1ca>
    bfe8:	c3 cf       	rjmp	.-122    	; 0xbf70 <collision_detect_shot+0x172>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    bfea:	b1 e0       	ldi	r27, 0x01	; 1
    bfec:	eb 12       	cpse	r14, r27
    bfee:	3b c0       	rjmp	.+118    	; 0xc066 <collision_detect_shot+0x268>
    bff0:	c5 01       	movw	r24, r10
    bff2:	b1 01       	movw	r22, r2
    bff4:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    bff8:	6d 5f       	subi	r22, 0xFD	; 253
    bffa:	7f 4f       	sbci	r23, 0xFF	; 255
    bffc:	e6 2e       	mov	r14, r22
    bffe:	ee 0c       	add	r14, r14
    c000:	ee 0c       	add	r14, r14
    c002:	ee 0c       	add	r14, r14
    c004:	08 2f       	mov	r16, r24
    c006:	00 0f       	add	r16, r16
    c008:	00 0f       	add	r16, r16
    c00a:	00 0f       	add	r16, r16
    c00c:	20 e0       	ldi	r18, 0x00	; 0
    c00e:	30 e0       	ldi	r19, 0x00	; 0
    c010:	40 e0       	ldi	r20, 0x00	; 0
    c012:	50 e4       	ldi	r21, 0x40	; 64
    c014:	f4 01       	movw	r30, r8
    c016:	67 81       	ldd	r22, Z+7	; 0x07
    c018:	70 85       	ldd	r23, Z+8	; 0x08
    c01a:	81 85       	ldd	r24, Z+9	; 0x09
    c01c:	92 85       	ldd	r25, Z+10	; 0x0a
    c01e:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    c022:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c026:	b6 2e       	mov	r11, r22
    c028:	20 e0       	ldi	r18, 0x00	; 0
    c02a:	30 e0       	ldi	r19, 0x00	; 0
    c02c:	40 e0       	ldi	r20, 0x00	; 0
    c02e:	50 e4       	ldi	r21, 0x40	; 64
    c030:	d4 01       	movw	r26, r8
    c032:	13 96       	adiw	r26, 0x03	; 3
    c034:	6d 91       	ld	r22, X+
    c036:	7d 91       	ld	r23, X+
    c038:	8d 91       	ld	r24, X+
    c03a:	9c 91       	ld	r25, X
    c03c:	16 97       	sbiw	r26, 0x06	; 6
    c03e:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    c042:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c046:	86 2f       	mov	r24, r22
    c048:	38 e0       	ldi	r19, 0x08	; 8
    c04a:	a3 2e       	mov	r10, r19
    c04c:	48 e0       	ldi	r20, 0x08	; 8
    c04e:	c4 2e       	mov	r12, r20
    c050:	24 e0       	ldi	r18, 0x04	; 4
    c052:	44 e0       	ldi	r20, 0x04	; 4
    c054:	6b 2d       	mov	r22, r11
    c056:	0e 94 7d 55 	call	0xaafa	; 0xaafa <LBCollides>
    c05a:	88 23       	and	r24, r24
    c05c:	09 f4       	brne	.+2      	; 0xc060 <collision_detect_shot+0x262>
    c05e:	b4 cf       	rjmp	.-152    	; 0xbfc8 <collision_detect_shot+0x1ca>
		{
			hit = hit | HIT_BRICK;
    c060:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    c062:	dd 80       	ldd	r13, Y+5	; 0x05
    c064:	b1 cf       	rjmp	.-158    	; 0xbfc8 <collision_detect_shot+0x1ca>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c066:	b2 e0       	ldi	r27, 0x02	; 2
    c068:	eb 12       	cpse	r14, r27
    c06a:	ae cf       	rjmp	.-164    	; 0xbfc8 <collision_detect_shot+0x1ca>
    c06c:	c5 01       	movw	r24, r10
    c06e:	b1 01       	movw	r22, r2
    c070:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    c074:	6d 5f       	subi	r22, 0xFD	; 253
    c076:	7f 4f       	sbci	r23, 0xFF	; 255
    c078:	e6 2e       	mov	r14, r22
    c07a:	ee 0c       	add	r14, r14
    c07c:	ee 0c       	add	r14, r14
    c07e:	ee 0c       	add	r14, r14
    c080:	08 2f       	mov	r16, r24
    c082:	00 0f       	add	r16, r16
    c084:	00 0f       	add	r16, r16
    c086:	00 0f       	add	r16, r16
    c088:	20 e0       	ldi	r18, 0x00	; 0
    c08a:	30 e0       	ldi	r19, 0x00	; 0
    c08c:	40 e0       	ldi	r20, 0x00	; 0
    c08e:	50 e4       	ldi	r21, 0x40	; 64
    c090:	f4 01       	movw	r30, r8
    c092:	67 81       	ldd	r22, Z+7	; 0x07
    c094:	70 85       	ldd	r23, Z+8	; 0x08
    c096:	81 85       	ldd	r24, Z+9	; 0x09
    c098:	92 85       	ldd	r25, Z+10	; 0x0a
    c09a:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    c09e:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c0a2:	b6 2e       	mov	r11, r22
    c0a4:	20 e0       	ldi	r18, 0x00	; 0
    c0a6:	30 e0       	ldi	r19, 0x00	; 0
    c0a8:	40 e0       	ldi	r20, 0x00	; 0
    c0aa:	50 e4       	ldi	r21, 0x40	; 64
    c0ac:	d4 01       	movw	r26, r8
    c0ae:	13 96       	adiw	r26, 0x03	; 3
    c0b0:	6d 91       	ld	r22, X+
    c0b2:	7d 91       	ld	r23, X+
    c0b4:	8d 91       	ld	r24, X+
    c0b6:	9c 91       	ld	r25, X
    c0b8:	16 97       	sbiw	r26, 0x06	; 6
    c0ba:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    c0be:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c0c2:	86 2f       	mov	r24, r22
    c0c4:	98 e0       	ldi	r25, 0x08	; 8
    c0c6:	a9 2e       	mov	r10, r25
    c0c8:	28 e0       	ldi	r18, 0x08	; 8
    c0ca:	c2 2e       	mov	r12, r18
    c0cc:	24 e0       	ldi	r18, 0x04	; 4
    c0ce:	44 e0       	ldi	r20, 0x04	; 4
    c0d0:	6b 2d       	mov	r22, r11
    c0d2:	0e 94 7d 55 	call	0xaafa	; 0xaafa <LBCollides>
    c0d6:	88 23       	and	r24, r24
    c0d8:	09 f4       	brne	.+2      	; 0xc0dc <collision_detect_shot+0x2de>
    c0da:	76 cf       	rjmp	.-276    	; 0xbfc8 <collision_detect_shot+0x1ca>
        {
		    hit = hit | HIT_METAL;
    c0dc:	11 60       	ori	r17, 0x01	; 1
    c0de:	74 cf       	rjmp	.-280    	; 0xbfc8 <collision_detect_shot+0x1ca>
        }
	}
	
	if (hit & HIT_ANGLE)
    c0e0:	12 ff       	sbrs	r17, 2
    c0e2:	24 c0       	rjmp	.+72     	; 0xc12c <collision_detect_shot+0x32e>
	{
		recoil_sprite_fine(&shot->shared);
    c0e4:	c4 01       	movw	r24, r8
    c0e6:	0e 94 e2 5b 	call	0xb7c4	; 0xb7c4 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    c0ea:	b4 01       	movw	r22, r8
    c0ec:	8f 2d       	mov	r24, r15
    c0ee:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <richochet>
		shot->rebounds--;
    c0f2:	f4 01       	movw	r30, r8
    c0f4:	85 85       	ldd	r24, Z+13	; 0x0d
    c0f6:	81 50       	subi	r24, 0x01	; 1
    c0f8:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    c0fa:	81 11       	cpse	r24, r1
    c0fc:	0b c0       	rjmp	.+22     	; 0xc114 <collision_detect_shot+0x316>
		{
			init_shot_state(shot, shot->shot_type);
    c0fe:	63 85       	ldd	r22, Z+11	; 0x0b
    c100:	c4 01       	movw	r24, r8
    c102:	0e 94 2c 57 	call	0xae58	; 0xae58 <init_shot_state>
			player->active_shots--;
    c106:	d3 01       	movw	r26, r6
    c108:	51 96       	adiw	r26, 0x11	; 17
    c10a:	8c 91       	ld	r24, X
    c10c:	51 97       	sbiw	r26, 0x11	; 17
    c10e:	81 50       	subi	r24, 0x01	; 1
    c110:	51 96       	adiw	r26, 0x11	; 17
    c112:	8c 93       	st	X, r24
		}
		SFX_METAL;
    c114:	80 91 49 0c 	lds	r24, 0x0C49
    c118:	80 fd       	sbrc	r24, 0
    c11a:	42 c0       	rjmp	.+132    	; 0xc1a0 <collision_detect_shot+0x3a2>
    c11c:	80 91 b7 0f 	lds	r24, 0x0FB7
    c120:	80 fd       	sbrc	r24, 0
    c122:	3e c0       	rjmp	.+124    	; 0xc1a0 <collision_detect_shot+0x3a2>
    c124:	2f ef       	ldi	r18, 0xFF	; 255
    c126:	47 e1       	ldi	r20, 0x17	; 23
    c128:	64 e0       	ldi	r22, 0x04	; 4
    c12a:	32 c0       	rjmp	.+100    	; 0xc190 <collision_detect_shot+0x392>
	}
	else if (hit & HIT_BRICK)
    c12c:	11 ff       	sbrs	r17, 1
    c12e:	34 c0       	rjmp	.+104    	; 0xc198 <collision_detect_shot+0x39a>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    c130:	fe 01       	movw	r30, r28
    c132:	31 96       	adiw	r30, 0x01	; 1
    c134:	7f 01       	movw	r14, r30
    c136:	ed 0c       	add	r14, r13
    c138:	f1 1c       	adc	r15, r1
    c13a:	ed 0c       	add	r14, r13
    c13c:	f1 1c       	adc	r15, r1
    c13e:	d7 01       	movw	r26, r14
    c140:	6d 91       	ld	r22, X+
    c142:	7c 91       	ld	r23, X
    c144:	88 e1       	ldi	r24, 0x18	; 24
    c146:	9c e0       	ldi	r25, 0x0C	; 12
    c148:	0e 94 a0 5e 	call	0xbd40	; 0xbd40 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    c14c:	d7 01       	movw	r26, r14
    c14e:	ed 91       	ld	r30, X+
    c150:	fc 91       	ld	r31, X
    c152:	ec 54       	subi	r30, 0x4C	; 76
    c154:	f3 4f       	sbci	r31, 0xF3	; 243
    c156:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    c158:	f4 01       	movw	r30, r8
    c15a:	84 85       	ldd	r24, Z+12	; 0x0c
    c15c:	81 50       	subi	r24, 0x01	; 1
    c15e:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    c160:	81 11       	cpse	r24, r1
    c162:	0b c0       	rjmp	.+22     	; 0xc17a <collision_detect_shot+0x37c>
		{
			init_shot_state(shot, shot->shot_type);
    c164:	63 85       	ldd	r22, Z+11	; 0x0b
    c166:	c4 01       	movw	r24, r8
    c168:	0e 94 2c 57 	call	0xae58	; 0xae58 <init_shot_state>
			player->active_shots--;
    c16c:	d3 01       	movw	r26, r6
    c16e:	51 96       	adiw	r26, 0x11	; 17
    c170:	8c 91       	ld	r24, X
    c172:	51 97       	sbiw	r26, 0x11	; 17
    c174:	81 50       	subi	r24, 0x01	; 1
    c176:	51 96       	adiw	r26, 0x11	; 17
    c178:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    c17a:	80 91 49 0c 	lds	r24, 0x0C49
    c17e:	80 fd       	sbrc	r24, 0
    c180:	0f c0       	rjmp	.+30     	; 0xc1a0 <collision_detect_shot+0x3a2>
    c182:	80 91 b7 0f 	lds	r24, 0x0FB7
    c186:	80 fd       	sbrc	r24, 0
    c188:	0b c0       	rjmp	.+22     	; 0xc1a0 <collision_detect_shot+0x3a2>
    c18a:	2f ed       	ldi	r18, 0xDF	; 223
    c18c:	47 e1       	ldi	r20, 0x17	; 23
    c18e:	61 e0       	ldi	r22, 0x01	; 1
    c190:	84 e0       	ldi	r24, 0x04	; 4
    c192:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
    c196:	04 c0       	rjmp	.+8      	; 0xc1a0 <collision_detect_shot+0x3a2>
	}
	else if (hit & HIT_METAL)
    c198:	10 ff       	sbrs	r17, 0
    c19a:	02 c0       	rjmp	.+4      	; 0xc1a0 <collision_detect_shot+0x3a2>
	{
        init_shot_state(shot, shot->shot_type);
    c19c:	f4 01       	movw	r30, r8
    c19e:	af cf       	rjmp	.-162    	; 0xc0fe <collision_detect_shot+0x300>
        player->active_shots--;
        SFX_METAL;
	}
}
    c1a0:	0f 90       	pop	r0
    c1a2:	0f 90       	pop	r0
    c1a4:	0f 90       	pop	r0
    c1a6:	0f 90       	pop	r0
    c1a8:	0f 90       	pop	r0
    c1aa:	df 91       	pop	r29
    c1ac:	cf 91       	pop	r28
    c1ae:	1f 91       	pop	r17
    c1b0:	0f 91       	pop	r16
    c1b2:	ff 90       	pop	r15
    c1b4:	ef 90       	pop	r14
    c1b6:	df 90       	pop	r13
    c1b8:	cf 90       	pop	r12
    c1ba:	bf 90       	pop	r11
    c1bc:	af 90       	pop	r10
    c1be:	9f 90       	pop	r9
    c1c0:	8f 90       	pop	r8
    c1c2:	7f 90       	pop	r7
    c1c4:	6f 90       	pop	r6
    c1c6:	5f 90       	pop	r5
    c1c8:	4f 90       	pop	r4
    c1ca:	3f 90       	pop	r3
    c1cc:	2f 90       	pop	r2
    c1ce:	08 95       	ret

0000c1d0 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    c1d0:	fc 01       	movw	r30, r24
    c1d2:	8e e1       	ldi	r24, 0x1E	; 30
    c1d4:	48 9f       	mul	r20, r24
    c1d6:	a0 01       	movw	r20, r0
    c1d8:	11 24       	eor	r1, r1
    c1da:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    c1dc:	64 0f       	add	r22, r20
    c1de:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    c1e0:	21 11       	cpse	r18, r1
    c1e2:	09 c0       	rjmp	.+18     	; 0xc1f6 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    c1e4:	71 83       	std	Z+1, r23	; 0x01
    c1e6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    c1e8:	cb 01       	movw	r24, r22
    c1ea:	01 96       	adiw	r24, 0x01	; 1
    c1ec:	93 83       	std	Z+3, r25	; 0x03
    c1ee:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c1f0:	6e 5f       	subi	r22, 0xFE	; 254
    c1f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c1f4:	1c c0       	rjmp	.+56     	; 0xc22e <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    c1f6:	21 30       	cpi	r18, 0x01	; 1
    c1f8:	31 f4       	brne	.+12     	; 0xc206 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    c1fa:	cb 01       	movw	r24, r22
    c1fc:	02 96       	adiw	r24, 0x02	; 2
    c1fe:	91 83       	std	Z+1, r25	; 0x01
    c200:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    c202:	4e 96       	adiw	r24, 0x1e	; 30
    c204:	07 c0       	rjmp	.+14     	; 0xc214 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    c206:	22 30       	cpi	r18, 0x02	; 2
    c208:	51 f4       	brne	.+20     	; 0xc21e <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    c20a:	cb 01       	movw	r24, r22
    c20c:	cc 96       	adiw	r24, 0x3c	; 60
    c20e:	91 83       	std	Z+1, r25	; 0x01
    c210:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    c212:	01 96       	adiw	r24, 0x01	; 1
    c214:	93 83       	std	Z+3, r25	; 0x03
    c216:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c218:	62 5c       	subi	r22, 0xC2	; 194
    c21a:	7f 4f       	sbci	r23, 0xFF	; 255
    c21c:	08 c0       	rjmp	.+16     	; 0xc22e <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    c21e:	71 83       	std	Z+1, r23	; 0x01
    c220:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    c222:	cb 01       	movw	r24, r22
    c224:	4e 96       	adiw	r24, 0x1e	; 30
    c226:	93 83       	std	Z+3, r25	; 0x03
    c228:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    c22a:	64 5c       	subi	r22, 0xC4	; 196
    c22c:	7f 4f       	sbci	r23, 0xFF	; 255
    c22e:	75 83       	std	Z+5, r23	; 0x05
    c230:	64 83       	std	Z+4, r22	; 0x04
    c232:	08 95       	ret

0000c234 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    c234:	1f 93       	push	r17
    c236:	cf 93       	push	r28
    c238:	df 93       	push	r29
    c23a:	fc 01       	movw	r30, r24
    c23c:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    c23e:	54 96       	adiw	r26, 0x14	; 20
    c240:	8c 91       	ld	r24, X
    c242:	54 97       	sbiw	r26, 0x14	; 20
    c244:	80 fd       	sbrc	r24, 0
    c246:	13 c0       	rjmp	.+38     	; 0xc26e <explode_player+0x3a>
    c248:	12 2f       	mov	r17, r18
    c24a:	64 2f       	mov	r22, r20
    c24c:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    c24e:	80 89       	ldd	r24, Z+16	; 0x10
    c250:	8f 5f       	subi	r24, 0xFF	; 255
    c252:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    c254:	87 85       	ldd	r24, Z+15	; 0x0f
    c256:	8f 5f       	subi	r24, 0xFF	; 255
    c258:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    c25a:	cf 01       	movw	r24, r30
    c25c:	0e 94 0b 5a 	call	0xb416	; 0xb416 <render_score>
		kill_player(other_player, other_player_hud_x);
    c260:	61 2f       	mov	r22, r17
    c262:	ce 01       	movw	r24, r28
	}
}
    c264:	df 91       	pop	r29
    c266:	cf 91       	pop	r28
    c268:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    c26a:	0c 94 24 5e 	jmp	0xbc48	; 0xbc48 <kill_player>
	}
}
    c26e:	df 91       	pop	r29
    c270:	cf 91       	pop	r28
    c272:	1f 91       	pop	r17
    c274:	08 95       	ret

0000c276 <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    c276:	2f 92       	push	r2
    c278:	3f 92       	push	r3
    c27a:	4f 92       	push	r4
    c27c:	5f 92       	push	r5
    c27e:	6f 92       	push	r6
    c280:	7f 92       	push	r7
    c282:	8f 92       	push	r8
    c284:	9f 92       	push	r9
    c286:	af 92       	push	r10
    c288:	bf 92       	push	r11
    c28a:	cf 92       	push	r12
    c28c:	df 92       	push	r13
    c28e:	ef 92       	push	r14
    c290:	ff 92       	push	r15
    c292:	0f 93       	push	r16
    c294:	1f 93       	push	r17
    c296:	cf 93       	push	r28
    c298:	df 93       	push	r29
    c29a:	cd b7       	in	r28, 0x3d	; 61
    c29c:	de b7       	in	r29, 0x3e	; 62
    c29e:	2b 97       	sbiw	r28, 0x0b	; 11
    c2a0:	0f b6       	in	r0, 0x3f	; 63
    c2a2:	f8 94       	cli
    c2a4:	de bf       	out	0x3e, r29	; 62
    c2a6:	0f be       	out	0x3f, r0	; 63
    c2a8:	cd bf       	out	0x3d, r28	; 61
    c2aa:	4c 01       	movw	r8, r24
    c2ac:	06 2f       	mov	r16, r22
	int tiles[3] = {0,0,0};
    c2ae:	1a 82       	std	Y+2, r1	; 0x02
    c2b0:	19 82       	std	Y+1, r1	; 0x01
    c2b2:	1c 82       	std	Y+4, r1	; 0x04
    c2b4:	1b 82       	std	Y+3, r1	; 0x03
    c2b6:	1e 82       	std	Y+6, r1	; 0x06
    c2b8:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    c2ba:	20 e0       	ldi	r18, 0x00	; 0
    c2bc:	30 e0       	ldi	r19, 0x00	; 0
    c2be:	40 e0       	ldi	r20, 0x00	; 0
    c2c0:	5e e3       	ldi	r21, 0x3E	; 62
    c2c2:	dc 01       	movw	r26, r24
    c2c4:	17 96       	adiw	r26, 0x07	; 7
    c2c6:	6d 91       	ld	r22, X+
    c2c8:	7d 91       	ld	r23, X+
    c2ca:	8d 91       	ld	r24, X+
    c2cc:	9c 91       	ld	r25, X
    c2ce:	1a 97       	sbiw	r26, 0x0a	; 10
    c2d0:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    c2d4:	20 e0       	ldi	r18, 0x00	; 0
    c2d6:	30 e0       	ldi	r19, 0x00	; 0
    c2d8:	40 e4       	ldi	r20, 0x40	; 64
    c2da:	50 e4       	ldi	r21, 0x40	; 64
    c2dc:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    c2e0:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c2e4:	16 2f       	mov	r17, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    c2e6:	20 e0       	ldi	r18, 0x00	; 0
    c2e8:	30 e0       	ldi	r19, 0x00	; 0
    c2ea:	40 e0       	ldi	r20, 0x00	; 0
    c2ec:	5e e3       	ldi	r21, 0x3E	; 62
    c2ee:	f4 01       	movw	r30, r8
    c2f0:	63 81       	ldd	r22, Z+3	; 0x03
    c2f2:	74 81       	ldd	r23, Z+4	; 0x04
    c2f4:	85 81       	ldd	r24, Z+5	; 0x05
    c2f6:	96 81       	ldd	r25, Z+6	; 0x06
    c2f8:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    c2fc:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	u8 hit_water = 0;
	char explode = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    c300:	d4 01       	movw	r26, r8
    c302:	2c 91       	ld	r18, X
    c304:	41 2f       	mov	r20, r17
    c306:	ce 01       	movw	r24, r28
    c308:	01 96       	adiw	r24, 0x01	; 1
    c30a:	0e 94 e8 60 	call	0xc1d0	; 0xc1d0 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c30e:	c4 01       	movw	r24, r8
    c310:	0e 94 93 5d 	call	0xbb26	; 0xbb26 <collision_detect_boundries>
    c314:	88 23       	and	r24, r24
    c316:	39 f0       	breq	.+14     	; 0xc326 <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    c318:	c4 01       	movw	r24, r8
    c31a:	0e 94 88 5b 	call	0xb710	; 0xb710 <recoil_sprite>
		player->shared.speed = 0;
    c31e:	f4 01       	movw	r30, r8
    c320:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    c322:	10 e0       	ldi	r17, 0x00	; 0
    c324:	46 c1       	rjmp	.+652    	; 0xc5b2 <collision_detect_player+0x33c>
    c326:	ce 01       	movw	r24, r28
    c328:	01 96       	adiw	r24, 0x01	; 1
    c32a:	3c 01       	movw	r6, r24
    c32c:	de 01       	movw	r26, r28
    c32e:	17 96       	adiw	r26, 0x07	; 7
    c330:	b8 87       	std	Y+8, r27	; 0x08
    c332:	af 83       	std	Y+7, r26	; 0x07
	char explode = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c334:	10 e0       	ldi	r17, 0x00	; 0
    c336:	f1 2c       	mov	r15, r1
		}
		
		if (!hit_water)
		{
			player->max_speed = MAX_SPEED;
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    c338:	51 e4       	ldi	r21, 0x41	; 65
    c33a:	d5 2e       	mov	r13, r21
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    c33c:	6e e1       	ldi	r22, 0x1E	; 30
    c33e:	26 2e       	mov	r2, r22
    c340:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c342:	bb e0       	ldi	r27, 0x0B	; 11
    c344:	b0 0f       	add	r27, r16
    c346:	b9 87       	std	Y+9, r27	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c348:	06 5f       	subi	r16, 0xF6	; 246
    c34a:	0a 87       	std	Y+10, r16	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    c34c:	f3 01       	movw	r30, r6
    c34e:	40 80       	ld	r4, Z
    c350:	51 80       	ldd	r5, Z+1	; 0x01
    c352:	c2 01       	movw	r24, r4
    c354:	0e 94 7a 5c 	call	0xb8f4	; 0xb8f4 <solid_directional_tile>
    c358:	88 23       	and	r24, r24
    c35a:	49 f1       	breq	.+82     	; 0xc3ae <collision_detect_player+0x138>
    c35c:	d4 01       	movw	r26, r8
    c35e:	17 96       	adiw	r26, 0x07	; 7
    c360:	6d 91       	ld	r22, X+
    c362:	7d 91       	ld	r23, X+
    c364:	8d 91       	ld	r24, X+
    c366:	9c 91       	ld	r25, X
    c368:	1a 97       	sbiw	r26, 0x0a	; 10
    c36a:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c36e:	46 2f       	mov	r20, r22
    c370:	f4 01       	movw	r30, r8
    c372:	63 81       	ldd	r22, Z+3	; 0x03
    c374:	74 81       	ldd	r23, Z+4	; 0x04
    c376:	85 81       	ldd	r24, Z+5	; 0x05
    c378:	96 81       	ldd	r25, Z+6	; 0x06
    c37a:	4b 87       	std	Y+11, r20	; 0x0b
    c37c:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c380:	00 e1       	ldi	r16, 0x10	; 16
    c382:	20 e1       	ldi	r18, 0x10	; 16
    c384:	4b 85       	ldd	r20, Y+11	; 0x0b
    c386:	c2 01       	movw	r24, r4
    c388:	0e 94 90 5c 	call	0xb920	; 0xb920 <collides_directional_tile>
    c38c:	88 23       	and	r24, r24
    c38e:	79 f0       	breq	.+30     	; 0xc3ae <collision_detect_player+0x138>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(&player->shared);
    c390:	d4 01       	movw	r26, r8
    c392:	1b 96       	adiw	r26, 0x0b	; 11
    c394:	8c 91       	ld	r24, X
    c396:	89 30       	cpi	r24, 0x09	; 9
    c398:	21 f4       	brne	.+8      	; 0xc3a2 <collision_detect_player+0x12c>
    c39a:	c4 01       	movw	r24, r8
    c39c:	0e 94 88 5b 	call	0xb710	; 0xb710 <recoil_sprite>
    c3a0:	03 c0       	rjmp	.+6      	; 0xc3a8 <collision_detect_player+0x132>
    c3a2:	c4 01       	movw	r24, r8
    c3a4:	0e 94 e2 5b 	call	0xb7c4	; 0xb7c4 <recoil_sprite_fine>
			player->shared.speed = 0;
    c3a8:	f4 01       	movw	r30, r8
    c3aa:	11 82       	std	Z+1, r1	; 0x01
    c3ac:	ed c0       	rjmp	.+474    	; 0xc588 <collision_detect_player+0x312>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    c3ae:	c2 01       	movw	r24, r4
    c3b0:	0e 94 46 5c 	call	0xb88c	; 0xb88c <solid_square_tile>
    c3b4:	88 23       	and	r24, r24
    c3b6:	91 f1       	breq	.+100    	; 0xc41c <collision_detect_player+0x1a6>
    c3b8:	c2 01       	movw	r24, r4
    c3ba:	b1 01       	movw	r22, r2
    c3bc:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    c3c0:	6d 5f       	subi	r22, 0xFD	; 253
    c3c2:	7f 4f       	sbci	r23, 0xFF	; 255
    c3c4:	e6 2e       	mov	r14, r22
    c3c6:	ee 0c       	add	r14, r14
    c3c8:	ee 0c       	add	r14, r14
    c3ca:	ee 0c       	add	r14, r14
    c3cc:	08 2f       	mov	r16, r24
    c3ce:	00 0f       	add	r16, r16
    c3d0:	00 0f       	add	r16, r16
    c3d2:	00 0f       	add	r16, r16
    c3d4:	d4 01       	movw	r26, r8
    c3d6:	17 96       	adiw	r26, 0x07	; 7
    c3d8:	6d 91       	ld	r22, X+
    c3da:	7d 91       	ld	r23, X+
    c3dc:	8d 91       	ld	r24, X+
    c3de:	9c 91       	ld	r25, X
    c3e0:	1a 97       	sbiw	r26, 0x0a	; 10
    c3e2:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c3e6:	b6 2e       	mov	r11, r22
    c3e8:	f4 01       	movw	r30, r8
    c3ea:	63 81       	ldd	r22, Z+3	; 0x03
    c3ec:	74 81       	ldd	r23, Z+4	; 0x04
    c3ee:	85 81       	ldd	r24, Z+5	; 0x05
    c3f0:	96 81       	ldd	r25, Z+6	; 0x06
    c3f2:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c3f6:	86 2f       	mov	r24, r22
    c3f8:	38 e0       	ldi	r19, 0x08	; 8
    c3fa:	a3 2e       	mov	r10, r19
    c3fc:	48 e0       	ldi	r20, 0x08	; 8
    c3fe:	c4 2e       	mov	r12, r20
    c400:	20 e1       	ldi	r18, 0x10	; 16
    c402:	40 e1       	ldi	r20, 0x10	; 16
    c404:	6b 2d       	mov	r22, r11
    c406:	0e 94 7d 55 	call	0xaafa	; 0xaafa <LBCollides>
    c40a:	88 23       	and	r24, r24
    c40c:	39 f0       	breq	.+14     	; 0xc41c <collision_detect_player+0x1a6>
		{
			recoil_sprite(&player->shared);
    c40e:	c4 01       	movw	r24, r8
    c410:	0e 94 88 5b 	call	0xb710	; 0xb710 <recoil_sprite>
			player->shared.speed = 0;
    c414:	d4 01       	movw	r26, r8
    c416:	11 96       	adiw	r26, 0x01	; 1
    c418:	1c 92       	st	X, r1
    c41a:	b6 c0       	rjmp	.+364    	; 0xc588 <collision_detect_player+0x312>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    c41c:	f2 01       	movw	r30, r4
    c41e:	ec 54       	subi	r30, 0x4C	; 76
    c420:	f3 4f       	sbci	r31, 0xF3	; 243
    c422:	81 81       	ldd	r24, Z+1	; 0x01
    c424:	8d 34       	cpi	r24, 0x4D	; 77
    c426:	81 f5       	brne	.+96     	; 0xc488 <collision_detect_player+0x212>
    c428:	c2 01       	movw	r24, r4
    c42a:	b1 01       	movw	r22, r2
    c42c:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    c430:	6d 5f       	subi	r22, 0xFD	; 253
    c432:	7f 4f       	sbci	r23, 0xFF	; 255
    c434:	e6 2e       	mov	r14, r22
    c436:	ee 0c       	add	r14, r14
    c438:	ee 0c       	add	r14, r14
    c43a:	ee 0c       	add	r14, r14
    c43c:	08 2f       	mov	r16, r24
    c43e:	00 0f       	add	r16, r16
    c440:	00 0f       	add	r16, r16
    c442:	00 0f       	add	r16, r16
    c444:	f4 01       	movw	r30, r8
    c446:	67 81       	ldd	r22, Z+7	; 0x07
    c448:	70 85       	ldd	r23, Z+8	; 0x08
    c44a:	81 85       	ldd	r24, Z+9	; 0x09
    c44c:	92 85       	ldd	r25, Z+10	; 0x0a
    c44e:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c452:	b6 2e       	mov	r11, r22
    c454:	d4 01       	movw	r26, r8
    c456:	13 96       	adiw	r26, 0x03	; 3
    c458:	6d 91       	ld	r22, X+
    c45a:	7d 91       	ld	r23, X+
    c45c:	8d 91       	ld	r24, X+
    c45e:	9c 91       	ld	r25, X
    c460:	16 97       	sbiw	r26, 0x06	; 6
    c462:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c466:	86 2f       	mov	r24, r22
    c468:	98 e0       	ldi	r25, 0x08	; 8
    c46a:	a9 2e       	mov	r10, r25
    c46c:	28 e0       	ldi	r18, 0x08	; 8
    c46e:	c2 2e       	mov	r12, r18
    c470:	20 e1       	ldi	r18, 0x10	; 16
    c472:	40 e1       	ldi	r20, 0x10	; 16
    c474:	6b 2d       	mov	r22, r11
    c476:	0e 94 7d 55 	call	0xaafa	; 0xaafa <LBCollides>
    c47a:	88 23       	and	r24, r24
    c47c:	09 f4       	brne	.+2      	; 0xc480 <collision_detect_player+0x20a>
    c47e:	84 c0       	rjmp	.+264    	; 0xc588 <collision_detect_player+0x312>
		{
			player->max_speed = WATER_SPEED;
    c480:	89 e1       	ldi	r24, 0x19	; 25
    c482:	f4 01       	movw	r30, r8
    c484:	80 8f       	std	Z+24, r24	; 0x18
    c486:	8a c0       	rjmp	.+276    	; 0xc59c <collision_detect_player+0x326>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    c488:	8c 32       	cpi	r24, 0x2C	; 44
    c48a:	f1 f4       	brne	.+60     	; 0xc4c8 <collision_detect_player+0x252>
    c48c:	c2 01       	movw	r24, r4
    c48e:	b1 01       	movw	r22, r2
    c490:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    c494:	6d 5f       	subi	r22, 0xFD	; 253
    c496:	7f 4f       	sbci	r23, 0xFF	; 255
    c498:	e6 2e       	mov	r14, r22
    c49a:	ee 0c       	add	r14, r14
    c49c:	ee 0c       	add	r14, r14
    c49e:	ee 0c       	add	r14, r14
    c4a0:	08 2f       	mov	r16, r24
    c4a2:	00 0f       	add	r16, r16
    c4a4:	00 0f       	add	r16, r16
    c4a6:	00 0f       	add	r16, r16
    c4a8:	d4 01       	movw	r26, r8
    c4aa:	17 96       	adiw	r26, 0x07	; 7
    c4ac:	6d 91       	ld	r22, X+
    c4ae:	7d 91       	ld	r23, X+
    c4b0:	8d 91       	ld	r24, X+
    c4b2:	9c 91       	ld	r25, X
    c4b4:	1a 97       	sbiw	r26, 0x0a	; 10
    c4b6:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c4ba:	b6 2e       	mov	r11, r22
    c4bc:	f4 01       	movw	r30, r8
    c4be:	63 81       	ldd	r22, Z+3	; 0x03
    c4c0:	74 81       	ldd	r23, Z+4	; 0x04
    c4c2:	85 81       	ldd	r24, Z+5	; 0x05
    c4c4:	96 81       	ldd	r25, Z+6	; 0x06
    c4c6:	cd cf       	rjmp	.-102    	; 0xc462 <collision_detect_player+0x1ec>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    c4c8:	87 30       	cpi	r24, 0x07	; 7
    c4ca:	91 f4       	brne	.+36     	; 0xc4f0 <collision_detect_player+0x27a>
    c4cc:	d4 01       	movw	r26, r8
    c4ce:	54 96       	adiw	r26, 0x14	; 20
    c4d0:	8c 91       	ld	r24, X
    c4d2:	54 97       	sbiw	r26, 0x14	; 20
    c4d4:	80 fd       	sbrc	r24, 0
    c4d6:	58 c0       	rjmp	.+176    	; 0xc588 <collision_detect_player+0x312>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c4d8:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c4da:	58 96       	adiw	r26, 0x18	; 24
    c4dc:	dc 92       	st	X, r13
    c4de:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    c4e0:	e1 e0       	ldi	r30, 0x01	; 1
    c4e2:	5a 96       	adiw	r26, 0x1a	; 26
    c4e4:	ec 93       	st	X, r30
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c4e6:	4b ef       	ldi	r20, 0xFB	; 251
    c4e8:	52 e8       	ldi	r21, 0x82	; 130
    c4ea:	61 e0       	ldi	r22, 0x01	; 1
    c4ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    c4ee:	10 c0       	rjmp	.+32     	; 0xc510 <collision_detect_player+0x29a>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    c4f0:	89 30       	cpi	r24, 0x09	; 9
    c4f2:	51 f5       	brne	.+84     	; 0xc548 <collision_detect_player+0x2d2>
    c4f4:	d4 01       	movw	r26, r8
    c4f6:	54 96       	adiw	r26, 0x14	; 20
    c4f8:	8c 91       	ld	r24, X
    c4fa:	54 97       	sbiw	r26, 0x14	; 20
    c4fc:	80 fd       	sbrc	r24, 0
    c4fe:	44 c0       	rjmp	.+136    	; 0xc588 <collision_detect_player+0x312>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c500:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c502:	e1 e0       	ldi	r30, 0x01	; 1
    c504:	59 96       	adiw	r26, 0x19	; 25
    c506:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c508:	45 ef       	ldi	r20, 0xF5	; 245
    c50a:	52 e8       	ldi	r21, 0x82	; 130
    c50c:	61 e0       	ldi	r22, 0x01	; 1
    c50e:	89 85       	ldd	r24, Y+9	; 0x09
    c510:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    c514:	d3 01       	movw	r26, r6
    c516:	8d 91       	ld	r24, X+
    c518:	9c 91       	ld	r25, X
    c51a:	b1 01       	movw	r22, r2
    c51c:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    c520:	6d 5f       	subi	r22, 0xFD	; 253
    c522:	40 e0       	ldi	r20, 0x00	; 0
    c524:	50 e0       	ldi	r21, 0x00	; 0
    c526:	0e 94 d5 45 	call	0x8baa	; 0x8baa <SetTile>
			SFX_ITEM;
    c52a:	80 91 49 0c 	lds	r24, 0x0C49
    c52e:	80 fd       	sbrc	r24, 0
    c530:	2b c0       	rjmp	.+86     	; 0xc588 <collision_detect_player+0x312>
    c532:	80 91 b7 0f 	lds	r24, 0x0FB7
    c536:	80 fd       	sbrc	r24, 0
    c538:	27 c0       	rjmp	.+78     	; 0xc588 <collision_detect_player+0x312>
    c53a:	2f ef       	ldi	r18, 0xFF	; 255
    c53c:	47 e1       	ldi	r20, 0x17	; 23
    c53e:	63 e0       	ldi	r22, 0x03	; 3
    c540:	84 e0       	ldi	r24, 0x04	; 4
    c542:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
    c546:	20 c0       	rjmp	.+64     	; 0xc588 <collision_detect_player+0x312>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    c548:	88 30       	cpi	r24, 0x08	; 8
    c54a:	f1 f4       	brne	.+60     	; 0xc588 <collision_detect_player+0x312>
    c54c:	d4 01       	movw	r26, r8
    c54e:	54 96       	adiw	r26, 0x14	; 20
    c550:	8c 91       	ld	r24, X
    c552:	80 fd       	sbrc	r24, 0
    c554:	19 c0       	rjmp	.+50     	; 0xc588 <collision_detect_player+0x312>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c556:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    c558:	c2 01       	movw	r24, r4
    c55a:	b1 01       	movw	r22, r2
    c55c:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    c560:	6d 5f       	subi	r22, 0xFD	; 253
    c562:	40 e0       	ldi	r20, 0x00	; 0
    c564:	50 e0       	ldi	r21, 0x00	; 0
    c566:	0e 94 d5 45 	call	0x8baa	; 0x8baa <SetTile>
			SFX_ITEM;
    c56a:	80 91 49 0c 	lds	r24, 0x0C49
    c56e:	80 fd       	sbrc	r24, 0
    c570:	0a c0       	rjmp	.+20     	; 0xc586 <collision_detect_player+0x310>
    c572:	80 91 b7 0f 	lds	r24, 0x0FB7
    c576:	80 fd       	sbrc	r24, 0
    c578:	06 c0       	rjmp	.+12     	; 0xc586 <collision_detect_player+0x310>
    c57a:	2f ef       	ldi	r18, 0xFF	; 255
    c57c:	47 e1       	ldi	r20, 0x17	; 23
    c57e:	63 e0       	ldi	r22, 0x03	; 3
    c580:	84 e0       	ldi	r24, 0x04	; 4
    c582:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
			explode = 1;
    c586:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		if (!hit_water)
    c588:	f1 10       	cpse	r15, r1
    c58a:	08 c0       	rjmp	.+16     	; 0xc59c <collision_detect_player+0x326>
		{
			player->max_speed = MAX_SPEED;
    c58c:	82 e3       	ldi	r24, 0x32	; 50
    c58e:	f4 01       	movw	r30, r8
    c590:	80 8f       	std	Z+24, r24	; 0x18
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    c592:	82 8d       	ldd	r24, Z+26	; 0x1a
    c594:	88 23       	and	r24, r24
    c596:	21 f0       	breq	.+8      	; 0xc5a0 <collision_detect_player+0x32a>
    c598:	d0 8e       	std	Z+24, r13	; 0x18
    c59a:	02 c0       	rjmp	.+4      	; 0xc5a0 <collision_detect_player+0x32a>
    c59c:	ff 24       	eor	r15, r15
    c59e:	f3 94       	inc	r15
    c5a0:	92 e0       	ldi	r25, 0x02	; 2
    c5a2:	69 0e       	add	r6, r25
    c5a4:	71 1c       	adc	r7, r1
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    c5a6:	af 81       	ldd	r26, Y+7	; 0x07
    c5a8:	b8 85       	ldd	r27, Y+8	; 0x08
    c5aa:	6a 16       	cp	r6, r26
    c5ac:	7b 06       	cpc	r7, r27
    c5ae:	09 f0       	breq	.+2      	; 0xc5b2 <collision_detect_player+0x33c>
    c5b0:	cd ce       	rjmp	.-614    	; 0xc34c <collision_detect_player+0xd6>
			player->max_speed = MAX_SPEED;
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	return explode;
}
    c5b2:	81 2f       	mov	r24, r17
    c5b4:	2b 96       	adiw	r28, 0x0b	; 11
    c5b6:	0f b6       	in	r0, 0x3f	; 63
    c5b8:	f8 94       	cli
    c5ba:	de bf       	out	0x3e, r29	; 62
    c5bc:	0f be       	out	0x3f, r0	; 63
    c5be:	cd bf       	out	0x3d, r28	; 61
    c5c0:	df 91       	pop	r29
    c5c2:	cf 91       	pop	r28
    c5c4:	1f 91       	pop	r17
    c5c6:	0f 91       	pop	r16
    c5c8:	ff 90       	pop	r15
    c5ca:	ef 90       	pop	r14
    c5cc:	df 90       	pop	r13
    c5ce:	cf 90       	pop	r12
    c5d0:	bf 90       	pop	r11
    c5d2:	af 90       	pop	r10
    c5d4:	9f 90       	pop	r9
    c5d6:	8f 90       	pop	r8
    c5d8:	7f 90       	pop	r7
    c5da:	6f 90       	pop	r6
    c5dc:	5f 90       	pop	r5
    c5de:	4f 90       	pop	r4
    c5e0:	3f 90       	pop	r3
    c5e2:	2f 90       	pop	r2
    c5e4:	08 95       	ret

0000c5e6 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    c5e6:	ef 92       	push	r14
    c5e8:	ff 92       	push	r15
    c5ea:	1f 93       	push	r17
    c5ec:	cf 93       	push	r28
    c5ee:	df 93       	push	r29
    c5f0:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c5f2:	c0 e0       	ldi	r28, 0x00	; 0
    c5f4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    c5f6:	8e e1       	ldi	r24, 0x1E	; 30
    c5f8:	e8 2e       	mov	r14, r24
    c5fa:	f1 2c       	mov	r15, r1
    c5fc:	ce 01       	movw	r24, r28
    c5fe:	b7 01       	movw	r22, r14
    c600:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
		y = 3 + i / 30;
    c604:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    c606:	11 23       	and	r17, r17
    c608:	19 f0       	breq	.+6      	; 0xc610 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    c60a:	48 e9       	ldi	r20, 0x98	; 152
    c60c:	53 e8       	ldi	r21, 0x83	; 131
    c60e:	2d c0       	rjmp	.+90     	; 0xc66a <load_level_tiles+0x84>
    c610:	fe 01       	movw	r30, r28
    c612:	ec 54       	subi	r30, 0x4C	; 76
    c614:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    c616:	91 81       	ldd	r25, Z+1	; 0x01
    c618:	97 30       	cpi	r25, 0x07	; 7
    c61a:	99 f1       	breq	.+102    	; 0xc682 <load_level_tiles+0x9c>
    c61c:	88 f4       	brcc	.+34     	; 0xc640 <load_level_tiles+0x5a>
    c61e:	93 30       	cpi	r25, 0x03	; 3
    c620:	39 f1       	breq	.+78     	; 0xc670 <load_level_tiles+0x8a>
    c622:	40 f4       	brcc	.+16     	; 0xc634 <load_level_tiles+0x4e>
    c624:	91 30       	cpi	r25, 0x01	; 1
    c626:	f9 f0       	breq	.+62     	; 0xc666 <load_level_tiles+0x80>
    c628:	92 30       	cpi	r25, 0x02	; 2
    c62a:	09 f0       	breq	.+2      	; 0xc62e <load_level_tiles+0x48>
    c62c:	3f c0       	rjmp	.+126    	; 0xc6ac <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    c62e:	4e ef       	ldi	r20, 0xFE	; 254
    c630:	52 e8       	ldi	r21, 0x82	; 130
    c632:	1b c0       	rjmp	.+54     	; 0xc66a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c634:	95 30       	cpi	r25, 0x05	; 5
    c636:	f9 f0       	breq	.+62     	; 0xc676 <load_level_tiles+0x90>
    c638:	08 f5       	brcc	.+66     	; 0xc67c <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    c63a:	43 ee       	ldi	r20, 0xE3	; 227
    c63c:	52 e8       	ldi	r21, 0x82	; 130
    c63e:	15 c0       	rjmp	.+42     	; 0xc66a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c640:	9c 32       	cpi	r25, 0x2C	; 44
    c642:	59 f1       	breq	.+86     	; 0xc69a <load_level_tiles+0xb4>
    c644:	38 f4       	brcc	.+14     	; 0xc654 <load_level_tiles+0x6e>
    c646:	98 30       	cpi	r25, 0x08	; 8
    c648:	f9 f0       	breq	.+62     	; 0xc688 <load_level_tiles+0xa2>
    c64a:	99 30       	cpi	r25, 0x09	; 9
    c64c:	79 f5       	brne	.+94     	; 0xc6ac <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    c64e:	45 ef       	ldi	r20, 0xF5	; 245
    c650:	52 e8       	ldi	r21, 0x82	; 130
    c652:	0b c0       	rjmp	.+22     	; 0xc66a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c654:	92 34       	cpi	r25, 0x42	; 66
    c656:	d9 f0       	breq	.+54     	; 0xc68e <load_level_tiles+0xa8>
    c658:	9d 34       	cpi	r25, 0x4D	; 77
    c65a:	e1 f0       	breq	.+56     	; 0xc694 <load_level_tiles+0xae>
    c65c:	97 33       	cpi	r25, 0x37	; 55
    c65e:	31 f5       	brne	.+76     	; 0xc6ac <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    c660:	47 ed       	ldi	r20, 0xD7	; 215
    c662:	52 e8       	ldi	r21, 0x82	; 130
    c664:	02 c0       	rjmp	.+4      	; 0xc66a <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    c666:	41 e0       	ldi	r20, 0x01	; 1
    c668:	53 e8       	ldi	r21, 0x83	; 131
    c66a:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
    c66e:	22 c0       	rjmp	.+68     	; 0xc6b4 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    c670:	49 ee       	ldi	r20, 0xE9	; 233
    c672:	52 e8       	ldi	r21, 0x82	; 130
    c674:	fa cf       	rjmp	.-12     	; 0xc66a <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    c676:	40 ee       	ldi	r20, 0xE0	; 224
    c678:	52 e8       	ldi	r21, 0x82	; 130
    c67a:	f7 cf       	rjmp	.-18     	; 0xc66a <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    c67c:	46 ee       	ldi	r20, 0xE6	; 230
    c67e:	52 e8       	ldi	r21, 0x82	; 130
    c680:	f4 cf       	rjmp	.-24     	; 0xc66a <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    c682:	4b ef       	ldi	r20, 0xFB	; 251
    c684:	52 e8       	ldi	r21, 0x82	; 130
    c686:	f1 cf       	rjmp	.-30     	; 0xc66a <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    c688:	48 ef       	ldi	r20, 0xF8	; 248
    c68a:	52 e8       	ldi	r21, 0x82	; 130
    c68c:	ee cf       	rjmp	.-36     	; 0xc66a <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    c68e:	4a ed       	ldi	r20, 0xDA	; 218
    c690:	52 e8       	ldi	r21, 0x82	; 130
    c692:	eb cf       	rjmp	.-42     	; 0xc66a <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    c694:	4d ed       	ldi	r20, 0xDD	; 221
    c696:	52 e8       	ldi	r21, 0x82	; 130
    c698:	e8 cf       	rjmp	.-48     	; 0xc66a <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    c69a:	4d ed       	ldi	r20, 0xDD	; 221
    c69c:	52 e8       	ldi	r21, 0x82	; 130
    c69e:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
    c6a2:	d0 93 36 10 	sts	0x1036, r29
    c6a6:	c0 93 35 10 	sts	0x1035, r28
    c6aa:	04 c0       	rjmp	.+8      	; 0xc6b4 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    c6ac:	40 e0       	ldi	r20, 0x00	; 0
    c6ae:	50 e0       	ldi	r21, 0x00	; 0
    c6b0:	0e 94 d5 45 	call	0x8baa	; 0x8baa <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c6b4:	21 96       	adiw	r28, 0x01	; 1
    c6b6:	ce 3e       	cpi	r28, 0xEE	; 238
    c6b8:	82 e0       	ldi	r24, 0x02	; 2
    c6ba:	d8 07       	cpc	r29, r24
    c6bc:	09 f0       	breq	.+2      	; 0xc6c0 <load_level_tiles+0xda>
    c6be:	9e cf       	rjmp	.-196    	; 0xc5fc <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    c6c0:	df 91       	pop	r29
    c6c2:	cf 91       	pop	r28
    c6c4:	1f 91       	pop	r17
    c6c6:	ff 90       	pop	r15
    c6c8:	ef 90       	pop	r14
    c6ca:	08 95       	ret

0000c6cc <load_level>:

void load_level(int level_number)
{
    c6cc:	9f 92       	push	r9
    c6ce:	af 92       	push	r10
    c6d0:	bf 92       	push	r11
    c6d2:	cf 92       	push	r12
    c6d4:	df 92       	push	r13
    c6d6:	ef 92       	push	r14
    c6d8:	ff 92       	push	r15
    c6da:	0f 93       	push	r16
    c6dc:	1f 93       	push	r17
    c6de:	cf 93       	push	r28
    c6e0:	df 93       	push	r29
    c6e2:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    c6e4:	8e ee       	ldi	r24, 0xEE	; 238
    c6e6:	92 e0       	ldi	r25, 0x02	; 2
    c6e8:	c8 9f       	mul	r28, r24
    c6ea:	70 01       	movw	r14, r0
    c6ec:	c9 9f       	mul	r28, r25
    c6ee:	f0 0c       	add	r15, r0
    c6f0:	d8 9f       	mul	r29, r24
    c6f2:	f0 0c       	add	r15, r0
    c6f4:	11 24       	eor	r1, r1

	game.scope_counter = 0;
    c6f6:	10 92 16 0c 	sts	0x0C16, r1
    c6fa:	10 92 15 0c 	sts	0x0C15, r1
	init_tile_animations(&tile_animations);
    c6fe:	88 e1       	ldi	r24, 0x18	; 24
    c700:	9c e0       	ldi	r25, 0x0C	; 12
    c702:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <init_tile_animations>
	init_scope_animation(&scope_animation);
    c706:	89 e2       	ldi	r24, 0x29	; 41
    c708:	90 e1       	ldi	r25, 0x10	; 16
    c70a:	0e 94 00 57 	call	0xae00	; 0xae00 <init_scope_animation>
	init_sub_animation(&sub_animation);
    c70e:	8b e1       	ldi	r24, 0x1B	; 27
    c710:	90 e1       	ldi	r25, 0x10	; 16
    c712:	0e 94 18 57 	call	0xae30	; 0xae30 <init_sub_animation>
	game.current_screen = LEVEL;
    c716:	83 e0       	ldi	r24, 0x03	; 3
    c718:	80 93 0b 0c 	sts	0x0C0B, r24
	clear_sprites();
    c71c:	0e 94 7e 58 	call	0xb0fc	; 0xb0fc <clear_sprites>
	game.current_level = level_number;
    c720:	c0 93 0c 0c 	sts	0x0C0C, r28
    c724:	85 eb       	ldi	r24, 0xB5	; 181
    c726:	c8 2e       	mov	r12, r24
    c728:	8c e0       	ldi	r24, 0x0C	; 12
    c72a:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    c72c:	c0 e0       	ldi	r28, 0x00	; 0
    c72e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    c730:	0e e1       	ldi	r16, 0x1E	; 30
    c732:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    c734:	92 e3       	ldi	r25, 0x32	; 50
    c736:	99 2e       	mov	r9, r25
    c738:	fe 01       	movw	r30, r28
    c73a:	ee 0d       	add	r30, r14
    c73c:	ff 1d       	adc	r31, r15
    c73e:	e7 54       	subi	r30, 0x47	; 71
    c740:	fd 4d       	sbci	r31, 0xDD	; 221
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    c742:	e4 91       	lpm	r30, Z
    c744:	56 01       	movw	r10, r12
    c746:	d6 01       	movw	r26, r12
    c748:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    c74a:	e8 35       	cpi	r30, 0x58	; 88
    c74c:	01 f5       	brne	.+64     	; 0xc78e <load_level+0xc2>
		{
			player1.spawn_x = (i % 30) * 8;
    c74e:	ce 01       	movw	r24, r28
    c750:	b8 01       	movw	r22, r16
    c752:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    c756:	88 0f       	add	r24, r24
    c758:	88 0f       	add	r24, r24
    c75a:	88 0f       	add	r24, r24
    c75c:	80 93 47 0c 	sts	0x0C47, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    c760:	6d 5f       	subi	r22, 0xFD	; 253
    c762:	7f 4f       	sbci	r23, 0xFF	; 255
    c764:	66 0f       	add	r22, r22
    c766:	66 0f       	add	r22, r22
    c768:	66 0f       	add	r22, r22
    c76a:	60 93 48 0c 	sts	0x0C48, r22
			player1.level_score = 0;
    c76e:	10 92 45 0c 	sts	0x0C45, r1
			player1.has_over_speed = false;
    c772:	10 92 4f 0c 	sts	0x0C4F, r1
			player1.has_rocket = false;
    c776:	10 92 4e 0c 	sts	0x0C4E, r1
			player1.max_speed = MAX_SPEED;
    c77a:	90 92 4d 0c 	sts	0x0C4D, r9
			player_init_shot_state(&player1);
    c77e:	85 e3       	ldi	r24, 0x35	; 53
    c780:	9c e0       	ldi	r25, 0x0C	; 12
    c782:	0e 94 1f 58 	call	0xb03e	; 0xb03e <player_init_shot_state>
			player_spawn(&player1);
    c786:	85 e3       	ldi	r24, 0x35	; 53
    c788:	9c e0       	ldi	r25, 0x0C	; 12
    c78a:	0e 94 44 58 	call	0xb088	; 0xb088 <player_spawn>
    c78e:	bf ef       	ldi	r27, 0xFF	; 255
    c790:	cb 1a       	sub	r12, r27
    c792:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    c794:	f5 01       	movw	r30, r10
    c796:	80 81       	ld	r24, Z
    c798:	83 36       	cpi	r24, 0x63	; 99
    c79a:	01 f5       	brne	.+64     	; 0xc7dc <load_level+0x110>
		{
			player2.spawn_x = (i % 30) * 8;
    c79c:	ce 01       	movw	r24, r28
    c79e:	b8 01       	movw	r22, r16
    c7a0:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    c7a4:	88 0f       	add	r24, r24
    c7a6:	88 0f       	add	r24, r24
    c7a8:	88 0f       	add	r24, r24
    c7aa:	80 93 b5 0f 	sts	0x0FB5, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    c7ae:	6d 5f       	subi	r22, 0xFD	; 253
    c7b0:	7f 4f       	sbci	r23, 0xFF	; 255
    c7b2:	66 0f       	add	r22, r22
    c7b4:	66 0f       	add	r22, r22
    c7b6:	66 0f       	add	r22, r22
    c7b8:	60 93 b6 0f 	sts	0x0FB6, r22
			player2.level_score = 0;
    c7bc:	10 92 b3 0f 	sts	0x0FB3, r1
			player2.has_over_speed = false;
    c7c0:	10 92 bd 0f 	sts	0x0FBD, r1
			player2.has_rocket = false;
    c7c4:	10 92 bc 0f 	sts	0x0FBC, r1
			player2.max_speed = MAX_SPEED;
    c7c8:	90 92 bb 0f 	sts	0x0FBB, r9
			player_init_shot_state(&player2);
    c7cc:	83 ea       	ldi	r24, 0xA3	; 163
    c7ce:	9f e0       	ldi	r25, 0x0F	; 15
    c7d0:	0e 94 1f 58 	call	0xb03e	; 0xb03e <player_init_shot_state>
			player_spawn(&player2);
    c7d4:	83 ea       	ldi	r24, 0xA3	; 163
    c7d6:	9f e0       	ldi	r25, 0x0F	; 15
    c7d8:	0e 94 44 58 	call	0xb088	; 0xb088 <player_spawn>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    c7dc:	21 96       	adiw	r28, 0x01	; 1
    c7de:	ce 3e       	cpi	r28, 0xEE	; 238
    c7e0:	f2 e0       	ldi	r31, 0x02	; 2
    c7e2:	df 07       	cpc	r29, r31
    c7e4:	09 f0       	breq	.+2      	; 0xc7e8 <load_level+0x11c>
    c7e6:	a8 cf       	rjmp	.-176    	; 0xc738 <load_level+0x6c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    c7e8:	60 e0       	ldi	r22, 0x00	; 0
    c7ea:	85 e3       	ldi	r24, 0x35	; 53
    c7ec:	9c e0       	ldi	r25, 0x0C	; 12
    c7ee:	0e 94 ee 59 	call	0xb3dc	; 0xb3dc <render_hud>
	render_hud(&player2, 15);
    c7f2:	6f e0       	ldi	r22, 0x0F	; 15
    c7f4:	83 ea       	ldi	r24, 0xA3	; 163
    c7f6:	9f e0       	ldi	r25, 0x0F	; 15
    c7f8:	0e 94 ee 59 	call	0xb3dc	; 0xb3dc <render_hud>
	render_score(&player1, 0);
    c7fc:	60 e0       	ldi	r22, 0x00	; 0
    c7fe:	85 e3       	ldi	r24, 0x35	; 53
    c800:	9c e0       	ldi	r25, 0x0C	; 12
    c802:	0e 94 0b 5a 	call	0xb416	; 0xb416 <render_score>
	render_score(&player2, 15);
    c806:	6f e0       	ldi	r22, 0x0F	; 15
    c808:	83 ea       	ldi	r24, 0xA3	; 163
    c80a:	9f e0       	ldi	r25, 0x0F	; 15
    c80c:	0e 94 0b 5a 	call	0xb416	; 0xb416 <render_score>
	Print(14, 0, (char*) strVertSep);
    c810:	4e e2       	ldi	r20, 0x2E	; 46
    c812:	5b e0       	ldi	r21, 0x0B	; 11
    c814:	60 e0       	ldi	r22, 0x00	; 0
    c816:	70 e0       	ldi	r23, 0x00	; 0
    c818:	8e e0       	ldi	r24, 0x0E	; 14
    c81a:	90 e0       	ldi	r25, 0x00	; 0
    c81c:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(14, 1, (char*) strVertSep);
    c820:	4e e2       	ldi	r20, 0x2E	; 46
    c822:	5b e0       	ldi	r21, 0x0B	; 11
    c824:	61 e0       	ldi	r22, 0x01	; 1
    c826:	70 e0       	ldi	r23, 0x00	; 0
    c828:	8e e0       	ldi	r24, 0x0E	; 14
    c82a:	90 e0       	ldi	r25, 0x00	; 0
    c82c:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(14, 2, (char*) strVertSep);
    c830:	4e e2       	ldi	r20, 0x2E	; 46
    c832:	5b e0       	ldi	r21, 0x0B	; 11
    c834:	62 e0       	ldi	r22, 0x02	; 2
    c836:	70 e0       	ldi	r23, 0x00	; 0
    c838:	8e e0       	ldi	r24, 0x0E	; 14
    c83a:	90 e0       	ldi	r25, 0x00	; 0
    c83c:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	load_level_tiles(false);
    c840:	80 e0       	ldi	r24, 0x00	; 0
}
    c842:	df 91       	pop	r29
    c844:	cf 91       	pop	r28
    c846:	1f 91       	pop	r17
    c848:	0f 91       	pop	r16
    c84a:	ff 90       	pop	r15
    c84c:	ef 90       	pop	r14
    c84e:	df 90       	pop	r13
    c850:	cf 90       	pop	r12
    c852:	bf 90       	pop	r11
    c854:	af 90       	pop	r10
    c856:	9f 90       	pop	r9
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    c858:	0c 94 f3 62 	jmp	0xc5e6	; 0xc5e6 <load_level_tiles>

0000c85c <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    c85c:	cf 93       	push	r28
    c85e:	df 93       	push	r29
    c860:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    c862:	61 e0       	ldi	r22, 0x01	; 1
    c864:	83 e0       	ldi	r24, 0x03	; 3
    c866:	0e 94 6f 54 	call	0xa8de	; 0xa8de <FadeOut>
	ClearVram();
    c86a:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <ClearVram>
	clear_sprites();
    c86e:	0e 94 7e 58 	call	0xb0fc	; 0xb0fc <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    c872:	d0 e0       	ldi	r29, 0x00	; 0
    c874:	ae 01       	movw	r20, r28
    c876:	84 e0       	ldi	r24, 0x04	; 4
    c878:	44 0f       	add	r20, r20
    c87a:	55 1f       	adc	r21, r21
    c87c:	8a 95       	dec	r24
    c87e:	e1 f7       	brne	.-8      	; 0xc878 <level_transition+0x1c>
    c880:	49 59       	subi	r20, 0x99	; 153
    c882:	56 4f       	sbci	r21, 0xF6	; 246
    c884:	6c e0       	ldi	r22, 0x0C	; 12
    c886:	70 e0       	ldi	r23, 0x00	; 0
    c888:	88 e0       	ldi	r24, 0x08	; 8
    c88a:	90 e0       	ldi	r25, 0x00	; 0
    c88c:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	FadeIn(1, true);
    c890:	61 e0       	ldi	r22, 0x01	; 1
    c892:	81 e0       	ldi	r24, 0x01	; 1
    c894:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    c898:	82 e0       	ldi	r24, 0x02	; 2
    c89a:	0e 94 b2 56 	call	0xad64	; 0xad64 <LBWaitSeconds>
	FadeOut(1, true);
    c89e:	61 e0       	ldi	r22, 0x01	; 1
    c8a0:	81 e0       	ldi	r24, 0x01	; 1
    c8a2:	0e 94 6f 54 	call	0xa8de	; 0xa8de <FadeOut>
	ClearVram();
    c8a6:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c8aa:	60 e0       	ldi	r22, 0x00	; 0
    c8ac:	83 e0       	ldi	r24, 0x03	; 3
    c8ae:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <FadeIn>
	load_level(index);
    c8b2:	ce 01       	movw	r24, r28
}
    c8b4:	df 91       	pop	r29
    c8b6:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    c8b8:	0c 94 66 63 	jmp	0xc6cc	; 0xc6cc <load_level>

0000c8bc <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    c8bc:	89 e2       	ldi	r24, 0x29	; 41
    c8be:	90 e1       	ldi	r25, 0x10	; 16
    c8c0:	0e 94 d9 5a 	call	0xb5b2	; 0xb5b2 <render_scope>
    c8c4:	88 23       	and	r24, r24
    c8c6:	41 f0       	breq	.+16     	; 0xc8d8 <render_boss_fight_scope_load+0x1c>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    c8c8:	82 e0       	ldi	r24, 0x02	; 2
    c8ca:	80 93 0e 0c 	sts	0x0C0E, r24
		SFX_ALARM;
    c8ce:	41 e0       	ldi	r20, 0x01	; 1
    c8d0:	6f ef       	ldi	r22, 0xFF	; 255
    c8d2:	88 e0       	ldi	r24, 0x08	; 8
    c8d4:	0c 94 1c 49 	jmp	0x9238	; 0x9238 <TriggerFx>
    c8d8:	08 95       	ret

0000c8da <render_boss_fight_sub_load>:
	}
}

void render_boss_fight_sub_load()
{
    c8da:	0f 93       	push	r16
    c8dc:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c8de:	8b e1       	ldi	r24, 0x1B	; 27
    c8e0:	90 e1       	ldi	r25, 0x10	; 16
    c8e2:	0e 94 c9 54 	call	0xa992	; 0xa992 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    c8e6:	ac 01       	movw	r20, r24
    c8e8:	64 e0       	ldi	r22, 0x04	; 4
    c8ea:	81 e0       	ldi	r24, 0x01	; 1
    c8ec:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
	if (sub_animation.anim.reversing)
    c8f0:	80 91 20 10 	lds	r24, 0x1020
    c8f4:	88 23       	and	r24, r24
    c8f6:	d9 f0       	breq	.+54     	; 0xc92e <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    c8f8:	84 e0       	ldi	r24, 0x04	; 4
    c8fa:	80 93 0e 0c 	sts	0x0C0E, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    c8fe:	00 e0       	ldi	r16, 0x00	; 0
    c900:	10 e0       	ldi	r17, 0x00	; 0
    c902:	20 e9       	ldi	r18, 0x90	; 144
    c904:	32 e4       	ldi	r19, 0x42	; 66
    c906:	40 e0       	ldi	r20, 0x00	; 0
    c908:	50 e0       	ldi	r21, 0x00	; 0
    c90a:	60 ec       	ldi	r22, 0xC0	; 192
    c90c:	72 e4       	ldi	r23, 0x42	; 66
    c90e:	8b e6       	ldi	r24, 0x6B	; 107
    c910:	90 e1       	ldi	r25, 0x10	; 16
    c912:	0e 94 7b 57 	call	0xaef6	; 0xaef6 <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    c916:	00 e0       	ldi	r16, 0x00	; 0
    c918:	10 e0       	ldi	r17, 0x00	; 0
    c91a:	20 e9       	ldi	r18, 0x90	; 144
    c91c:	32 e4       	ldi	r19, 0x42	; 66
    c91e:	40 e0       	ldi	r20, 0x00	; 0
    c920:	50 e0       	ldi	r21, 0x00	; 0
    c922:	60 e4       	ldi	r22, 0x40	; 64
    c924:	73 e4       	ldi	r23, 0x43	; 67
    c926:	87 e3       	ldi	r24, 0x37	; 55
    c928:	90 e1       	ldi	r25, 0x10	; 16
    c92a:	0e 94 7b 57 	call	0xaef6	; 0xaef6 <init_turret>
	}
}
    c92e:	1f 91       	pop	r17
    c930:	0f 91       	pop	r16
    c932:	08 95       	ret

0000c934 <render_boss_turret>:
{
	
}

void render_boss_turret(Turret* t, u8 sprite_index)
{
    c934:	ef 92       	push	r14
    c936:	ff 92       	push	r15
    c938:	0f 93       	push	r16
    c93a:	1f 93       	push	r17
    c93c:	cf 93       	push	r28
    c93e:	df 93       	push	r29
    c940:	1f 92       	push	r1
    c942:	cd b7       	in	r28, 0x3d	; 61
    c944:	de b7       	in	r29, 0x3e	; 62
    c946:	7c 01       	movw	r14, r24
    c948:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    c94a:	fc 01       	movw	r30, r24
    c94c:	67 81       	ldd	r22, Z+7	; 0x07
    c94e:	70 85       	ldd	r23, Z+8	; 0x08
    c950:	81 85       	ldd	r24, Z+9	; 0x09
    c952:	92 85       	ldd	r25, Z+10	; 0x0a
    c954:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c958:	46 2f       	mov	r20, r22
    c95a:	f7 01       	movw	r30, r14
    c95c:	63 81       	ldd	r22, Z+3	; 0x03
    c95e:	74 81       	ldd	r23, Z+4	; 0x04
    c960:	85 81       	ldd	r24, Z+5	; 0x05
    c962:	96 81       	ldd	r25, Z+6	; 0x06
    c964:	49 83       	std	Y+1, r20	; 0x01
    c966:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c96a:	01 e0       	ldi	r16, 0x01	; 1
    c96c:	21 e0       	ldi	r18, 0x01	; 1
    c96e:	49 81       	ldd	r20, Y+1	; 0x01
    c970:	81 2f       	mov	r24, r17
    c972:	0e 94 3a 53 	call	0xa674	; 0xa674 <MoveSprite>
}
    c976:	0f 90       	pop	r0
    c978:	df 91       	pop	r29
    c97a:	cf 91       	pop	r28
    c97c:	1f 91       	pop	r17
    c97e:	0f 91       	pop	r16
    c980:	ff 90       	pop	r15
    c982:	ef 90       	pop	r14
    c984:	08 95       	ret

0000c986 <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, u8 sprite_index)
{
    c986:	ef 92       	push	r14
    c988:	ff 92       	push	r15
    c98a:	0f 93       	push	r16
    c98c:	1f 93       	push	r17
    c98e:	cf 93       	push	r28
    c990:	df 93       	push	r29
    c992:	1f 92       	push	r1
    c994:	cd b7       	in	r28, 0x3d	; 61
    c996:	de b7       	in	r29, 0x3e	; 62
    c998:	7c 01       	movw	r14, r24
    c99a:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    c99c:	fc 01       	movw	r30, r24
    c99e:	63 89       	ldd	r22, Z+19	; 0x13
    c9a0:	74 89       	ldd	r23, Z+20	; 0x14
    c9a2:	85 89       	ldd	r24, Z+21	; 0x15
    c9a4:	96 89       	ldd	r25, Z+22	; 0x16
    c9a6:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c9aa:	46 2f       	mov	r20, r22
    c9ac:	f7 01       	movw	r30, r14
    c9ae:	67 85       	ldd	r22, Z+15	; 0x0f
    c9b0:	70 89       	ldd	r23, Z+16	; 0x10
    c9b2:	81 89       	ldd	r24, Z+17	; 0x11
    c9b4:	92 89       	ldd	r25, Z+18	; 0x12
    c9b6:	49 83       	std	Y+1, r20	; 0x01
    c9b8:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    c9bc:	01 e0       	ldi	r16, 0x01	; 1
    c9be:	21 e0       	ldi	r18, 0x01	; 1
    c9c0:	49 81       	ldd	r20, Y+1	; 0x01
    c9c2:	81 2f       	mov	r24, r17
    c9c4:	0e 94 3a 53 	call	0xa674	; 0xa674 <MoveSprite>
}
    c9c8:	0f 90       	pop	r0
    c9ca:	df 91       	pop	r29
    c9cc:	cf 91       	pop	r28
    c9ce:	1f 91       	pop	r17
    c9d0:	0f 91       	pop	r16
    c9d2:	ff 90       	pop	r15
    c9d4:	ef 90       	pop	r14
    c9d6:	08 95       	ret

0000c9d8 <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    c9d8:	cf 92       	push	r12
    c9da:	df 92       	push	r13
    c9dc:	ef 92       	push	r14
    c9de:	ff 92       	push	r15
    c9e0:	cf 93       	push	r28
    c9e2:	df 93       	push	r29
    c9e4:	ec 01       	movw	r28, r24
	if (t->shared.direction == D_LEFT)
    c9e6:	88 81       	ld	r24, Y
    c9e8:	83 30       	cpi	r24, 0x03	; 3
    c9ea:	a1 f4       	brne	.+40     	; 0xca14 <update_turret+0x3c>
	{
		if (t->shared.x < left_limit)
    c9ec:	cb 80       	ldd	r12, Y+3	; 0x03
    c9ee:	dc 80       	ldd	r13, Y+4	; 0x04
    c9f0:	ed 80       	ldd	r14, Y+5	; 0x05
    c9f2:	fe 80       	ldd	r15, Y+6	; 0x06
    c9f4:	70 e0       	ldi	r23, 0x00	; 0
    c9f6:	80 e0       	ldi	r24, 0x00	; 0
    c9f8:	90 e0       	ldi	r25, 0x00	; 0
    c9fa:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    c9fe:	9b 01       	movw	r18, r22
    ca00:	ac 01       	movw	r20, r24
    ca02:	c7 01       	movw	r24, r14
    ca04:	b6 01       	movw	r22, r12
    ca06:	0e 94 2f 72 	call	0xe45e	; 0xe45e <__cmpsf2>
    ca0a:	87 ff       	sbrs	r24, 7
    ca0c:	19 c0       	rjmp	.+50     	; 0xca40 <update_turret+0x68>
		{
			t->shared.direction = D_RIGHT;
    ca0e:	81 e0       	ldi	r24, 0x01	; 1
    ca10:	88 83       	st	Y, r24
    ca12:	1f c0       	rjmp	.+62     	; 0xca52 <update_turret+0x7a>
		else
		{
			t->shared.x -= FRAME_TIME*BOSS_TURRET_SPEED;
		}
	}
	else if (t->shared.direction == D_RIGHT)
    ca14:	81 30       	cpi	r24, 0x01	; 1
    ca16:	49 f5       	brne	.+82     	; 0xca6a <update_turret+0x92>
	{
		if (t->shared.x > right_limit)
    ca18:	cb 80       	ldd	r12, Y+3	; 0x03
    ca1a:	dc 80       	ldd	r13, Y+4	; 0x04
    ca1c:	ed 80       	ldd	r14, Y+5	; 0x05
    ca1e:	fe 80       	ldd	r15, Y+6	; 0x06
    ca20:	64 2f       	mov	r22, r20
    ca22:	70 e0       	ldi	r23, 0x00	; 0
    ca24:	80 e0       	ldi	r24, 0x00	; 0
    ca26:	90 e0       	ldi	r25, 0x00	; 0
    ca28:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    ca2c:	9b 01       	movw	r18, r22
    ca2e:	ac 01       	movw	r20, r24
    ca30:	c7 01       	movw	r24, r14
    ca32:	b6 01       	movw	r22, r12
    ca34:	0e 94 7e 73 	call	0xe6fc	; 0xe6fc <__gesf2>
    ca38:	18 16       	cp	r1, r24
    ca3a:	5c f4       	brge	.+22     	; 0xca52 <update_turret+0x7a>
		{
			t->shared.direction = D_LEFT;
    ca3c:	83 e0       	ldi	r24, 0x03	; 3
    ca3e:	88 83       	st	Y, r24
			t->shared.x -= FRAME_TIME*BOSS_TURRET_SPEED;
    ca40:	2e ec       	ldi	r18, 0xCE	; 206
    ca42:	3f ef       	ldi	r19, 0xFF	; 255
    ca44:	4f eb       	ldi	r20, 0xBF	; 191
    ca46:	5f e3       	ldi	r21, 0x3F	; 63
    ca48:	c7 01       	movw	r24, r14
    ca4a:	b6 01       	movw	r22, r12
    ca4c:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    ca50:	08 c0       	rjmp	.+16     	; 0xca62 <update_turret+0x8a>
		}
		else
		{
			t->shared.x += FRAME_TIME*BOSS_TURRET_SPEED;
    ca52:	2e ec       	ldi	r18, 0xCE	; 206
    ca54:	3f ef       	ldi	r19, 0xFF	; 255
    ca56:	4f eb       	ldi	r20, 0xBF	; 191
    ca58:	5f e3       	ldi	r21, 0x3F	; 63
    ca5a:	c7 01       	movw	r24, r14
    ca5c:	b6 01       	movw	r22, r12
    ca5e:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    ca62:	6b 83       	std	Y+3, r22	; 0x03
    ca64:	7c 83       	std	Y+4, r23	; 0x04
    ca66:	8d 83       	std	Y+5, r24	; 0x05
    ca68:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    ca6a:	df 91       	pop	r29
    ca6c:	cf 91       	pop	r28
    ca6e:	ff 90       	pop	r15
    ca70:	ef 90       	pop	r14
    ca72:	df 90       	pop	r13
    ca74:	cf 90       	pop	r12
    ca76:	08 95       	ret

0000ca78 <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    ca78:	0f 93       	push	r16
    ca7a:	1f 93       	push	r17
    ca7c:	cf 93       	push	r28
    ca7e:	df 93       	push	r29
    ca80:	8c 01       	movw	r16, r24
    ca82:	eb 01       	movw	r28, r22
	if (!s->active)
    ca84:	8e 85       	ldd	r24, Y+14	; 0x0e
    ca86:	81 11       	cpse	r24, r1
    ca88:	20 c0       	rjmp	.+64     	; 0xcaca <update_turret_shot+0x52>
	{
		s->active = 1;
    ca8a:	81 e0       	ldi	r24, 0x01	; 1
    ca8c:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    ca8e:	20 e0       	ldi	r18, 0x00	; 0
    ca90:	30 e0       	ldi	r19, 0x00	; 0
    ca92:	40 e4       	ldi	r20, 0x40	; 64
    ca94:	50 e4       	ldi	r21, 0x40	; 64
    ca96:	f8 01       	movw	r30, r16
    ca98:	63 81       	ldd	r22, Z+3	; 0x03
    ca9a:	74 81       	ldd	r23, Z+4	; 0x04
    ca9c:	85 81       	ldd	r24, Z+5	; 0x05
    ca9e:	96 81       	ldd	r25, Z+6	; 0x06
    caa0:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    caa4:	6b 83       	std	Y+3, r22	; 0x03
    caa6:	7c 83       	std	Y+4, r23	; 0x04
    caa8:	8d 83       	std	Y+5, r24	; 0x05
    caaa:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    caac:	20 e0       	ldi	r18, 0x00	; 0
    caae:	30 e0       	ldi	r19, 0x00	; 0
    cab0:	40 e4       	ldi	r20, 0x40	; 64
    cab2:	50 e4       	ldi	r21, 0x40	; 64
    cab4:	f8 01       	movw	r30, r16
    cab6:	67 81       	ldd	r22, Z+7	; 0x07
    cab8:	70 85       	ldd	r23, Z+8	; 0x08
    caba:	81 85       	ldd	r24, Z+9	; 0x09
    cabc:	92 85       	ldd	r25, Z+10	; 0x0a
    cabe:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    cac2:	6f 83       	std	Y+7, r22	; 0x07
    cac4:	78 87       	std	Y+8, r23	; 0x08
    cac6:	89 87       	std	Y+9, r24	; 0x09
    cac8:	9a 87       	std	Y+10, r25	; 0x0a
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    caca:	2e e1       	ldi	r18, 0x1E	; 30
    cacc:	35 e5       	ldi	r19, 0x55	; 85
    cace:	45 e5       	ldi	r20, 0x55	; 85
    cad0:	50 e4       	ldi	r21, 0x40	; 64
    cad2:	6f 81       	ldd	r22, Y+7	; 0x07
    cad4:	78 85       	ldd	r23, Y+8	; 0x08
    cad6:	89 85       	ldd	r24, Y+9	; 0x09
    cad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    cada:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    cade:	6f 83       	std	Y+7, r22	; 0x07
    cae0:	78 87       	std	Y+8, r23	; 0x08
    cae2:	89 87       	std	Y+9, r24	; 0x09
    cae4:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (collision_detect_boundries(&s->shared))
    cae6:	ce 01       	movw	r24, r28
    cae8:	0e 94 93 5d 	call	0xbb26	; 0xbb26 <collision_detect_boundries>
    caec:	88 23       	and	r24, r24
    caee:	11 f0       	breq	.+4      	; 0xcaf4 <update_turret_shot+0x7c>
	{
		s->active = 0;
    caf0:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    caf2:	28 c0       	rjmp	.+80     	; 0xcb44 <update_turret_shot+0xcc>
	}
	
	/* Player interaction */
	if (player_shot(game.boss_fight_player, s) && !(player1.flags & EXPLODING_FLAG))
    caf4:	00 91 11 0c 	lds	r16, 0x0C11
    caf8:	10 91 12 0c 	lds	r17, 0x0C12
    cafc:	be 01       	movw	r22, r28
    cafe:	c8 01       	movw	r24, r16
    cb00:	0e 94 34 5d 	call	0xba68	; 0xba68 <player_shot>
    cb04:	88 23       	and	r24, r24
    cb06:	f1 f0       	breq	.+60     	; 0xcb44 <update_turret_shot+0xcc>
    cb08:	80 91 49 0c 	lds	r24, 0x0C49
    cb0c:	80 fd       	sbrc	r24, 0
    cb0e:	1a c0       	rjmp	.+52     	; 0xcb44 <update_turret_shot+0xcc>
	{
		game.boss_fight_player_lives--;
    cb10:	90 91 10 0c 	lds	r25, 0x0C10
    cb14:	91 50       	subi	r25, 0x01	; 1
    cb16:	90 93 10 0c 	sts	0x0C10, r25
		if (game.boss_fight_player_lives == 0)
    cb1a:	91 11       	cpse	r25, r1
    cb1c:	03 c0       	rjmp	.+6      	; 0xcb24 <update_turret_shot+0xac>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    cb1e:	80 e1       	ldi	r24, 0x10	; 16
    cb20:	80 93 0e 0c 	sts	0x0C0E, r24
		}
		s->active = 0;
    cb24:	1e 86       	std	Y+14, r1	; 0x0e
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    cb26:	60 91 0f 0c 	lds	r22, 0x0C0F
    cb2a:	c8 01       	movw	r24, r16
    cb2c:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <kill_player>
		SFX_TANK_EXPLODE;
    cb30:	2f ef       	ldi	r18, 0xFF	; 255
    cb32:	40 e1       	ldi	r20, 0x10	; 16
    cb34:	67 e0       	ldi	r22, 0x07	; 7
    cb36:	84 e0       	ldi	r24, 0x04	; 4
	}
}
    cb38:	df 91       	pop	r29
    cb3a:	cf 91       	pop	r28
    cb3c:	1f 91       	pop	r17
    cb3e:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		SFX_TANK_EXPLODE;
    cb40:	0c 94 5b 49 	jmp	0x92b6	; 0x92b6 <TriggerNote>
	}
}
    cb44:	df 91       	pop	r29
    cb46:	cf 91       	pop	r28
    cb48:	1f 91       	pop	r17
    cb4a:	0f 91       	pop	r16
    cb4c:	08 95       	ret

0000cb4e <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    cb4e:	10 92 0b 0c 	sts	0x0C0B, r1
	clear_sprites();
    cb52:	0e 94 7e 58 	call	0xb0fc	; 0xb0fc <clear_sprites>
	Print(7, 13, (char*) str1Player);
    cb56:	43 e6       	ldi	r20, 0x63	; 99
    cb58:	5b e0       	ldi	r21, 0x0B	; 11
    cb5a:	6d e0       	ldi	r22, 0x0D	; 13
    cb5c:	70 e0       	ldi	r23, 0x00	; 0
    cb5e:	87 e0       	ldi	r24, 0x07	; 7
    cb60:	90 e0       	ldi	r25, 0x00	; 0
    cb62:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(7, 14, (char*) str2Player);
    cb66:	42 e5       	ldi	r20, 0x52	; 82
    cb68:	5b e0       	ldi	r21, 0x0B	; 11
    cb6a:	6e e0       	ldi	r22, 0x0E	; 14
    cb6c:	70 e0       	ldi	r23, 0x00	; 0
    cb6e:	87 e0       	ldi	r24, 0x07	; 7
    cb70:	90 e0       	ldi	r25, 0x00	; 0
    cb72:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(7, 15, (char*) strHighscores);
    cb76:	48 e4       	ldi	r20, 0x48	; 72
    cb78:	5b e0       	ldi	r21, 0x0B	; 11
    cb7a:	6f e0       	ldi	r22, 0x0F	; 15
    cb7c:	70 e0       	ldi	r23, 0x00	; 0
    cb7e:	87 e0       	ldi	r24, 0x07	; 7
    cb80:	90 e0       	ldi	r25, 0x00	; 0
    cb82:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(5, 26, (char*) strCopyright);
    cb86:	41 e7       	ldi	r20, 0x71	; 113
    cb88:	5b e0       	ldi	r21, 0x0B	; 11
    cb8a:	6a e1       	ldi	r22, 0x1A	; 26
    cb8c:	70 e0       	ldi	r23, 0x00	; 0
    cb8e:	85 e0       	ldi	r24, 0x05	; 5
    cb90:	90 e0       	ldi	r25, 0x00	; 0
    cb92:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    cb96:	44 e0       	ldi	r20, 0x04	; 4
    cb98:	53 e8       	ldi	r21, 0x83	; 131
    cb9a:	65 e0       	ldi	r22, 0x05	; 5
    cb9c:	84 e0       	ldi	r24, 0x04	; 4
    cb9e:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
	MapSprite2(0, map_right_arrow, 0);
    cba2:	40 e0       	ldi	r20, 0x00	; 0
    cba4:	61 e5       	ldi	r22, 0x51	; 81
    cba6:	79 e4       	ldi	r23, 0x49	; 73
    cba8:	80 e0       	ldi	r24, 0x00	; 0
    cbaa:	0c 94 e8 52 	jmp	0xa5d0	; 0xa5d0 <MapSprite2>

0000cbae <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    cbae:	ef 92       	push	r14
    cbb0:	ff 92       	push	r15
    cbb2:	0f 93       	push	r16
    cbb4:	1f 93       	push	r17
    cbb6:	cf 93       	push	r28
    cbb8:	df 93       	push	r29
    cbba:	1f 92       	push	r1
    cbbc:	cd b7       	in	r28, 0x3d	; 61
    cbbe:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    cbc0:	81 e0       	ldi	r24, 0x01	; 1
    cbc2:	80 93 0b 0c 	sts	0x0C0B, r24
	clear_sprites();
    cbc6:	0e 94 7e 58 	call	0xb0fc	; 0xb0fc <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    cbca:	41 ed       	ldi	r20, 0xD1	; 209
    cbcc:	52 e8       	ldi	r21, 0x82	; 130
    cbce:	61 e0       	ldi	r22, 0x01	; 1
    cbd0:	87 e0       	ldi	r24, 0x07	; 7
    cbd2:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
	DrawMap2(20, 1, map_blue_tank);
    cbd6:	4b ec       	ldi	r20, 0xCB	; 203
    cbd8:	52 e8       	ldi	r21, 0x82	; 130
    cbda:	61 e0       	ldi	r22, 0x01	; 1
    cbdc:	84 e1       	ldi	r24, 0x14	; 20
    cbde:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
	Print(10, 2, (char*) strHighscores);
    cbe2:	48 e4       	ldi	r20, 0x48	; 72
    cbe4:	5b e0       	ldi	r21, 0x0B	; 11
    cbe6:	62 e0       	ldi	r22, 0x02	; 2
    cbe8:	70 e0       	ldi	r23, 0x00	; 0
    cbea:	8a e0       	ldi	r24, 0x0A	; 10
    cbec:	90 e0       	ldi	r25, 0x00	; 0
    cbee:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
    cbf2:	09 ec       	ldi	r16, 0xC9	; 201
    cbf4:	1b e0       	ldi	r17, 0x0B	; 11
    cbf6:	87 e0       	ldi	r24, 0x07	; 7
    cbf8:	e8 2e       	mov	r14, r24
    cbfa:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    cbfc:	31 e0       	ldi	r19, 0x01	; 1
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    cbfe:	20 e0       	ldi	r18, 0x00	; 0
    cc00:	43 2f       	mov	r20, r19
    cc02:	b7 01       	movw	r22, r14
    cc04:	82 e0       	ldi	r24, 0x02	; 2
    cc06:	90 e0       	ldi	r25, 0x00	; 0
    cc08:	39 83       	std	Y+1, r19	; 0x01
    cc0a:	0e 94 b6 53 	call	0xa76c	; 0xa76c <PrintByte>
		PrintChar(3, y, '.');
    cc0e:	4e e2       	ldi	r20, 0x2E	; 46
    cc10:	b7 01       	movw	r22, r14
    cc12:	83 e0       	ldi	r24, 0x03	; 3
    cc14:	90 e0       	ldi	r25, 0x00	; 0
    cc16:	0e 94 04 54 	call	0xa808	; 0xa808 <PrintChar>
    cc1a:	f8 01       	movw	r30, r16
    cc1c:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    cc1e:	80 81       	ld	r24, Z
    cc20:	93 e0       	ldi	r25, 0x03	; 3
    cc22:	89 9f       	mul	r24, r25
    cc24:	a0 01       	movw	r20, r0
    cc26:	11 24       	eor	r1, r1
    cc28:	43 51       	subi	r20, 0x13	; 19
    cc2a:	54 4f       	sbci	r21, 0xF4	; 244
    cc2c:	23 e0       	ldi	r18, 0x03	; 3
    cc2e:	6e 2d       	mov	r22, r14
    cc30:	85 e0       	ldi	r24, 0x05	; 5
    cc32:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    cc36:	49 ed       	ldi	r20, 0xD9	; 217
    cc38:	5a e0       	ldi	r21, 0x0A	; 10
    cc3a:	b7 01       	movw	r22, r14
    cc3c:	89 e0       	ldi	r24, 0x09	; 9
    cc3e:	90 e0       	ldi	r25, 0x00	; 0
    cc40:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
    cc44:	f8 01       	movw	r30, r16
    cc46:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    cc48:	80 81       	ld	r24, Z
    cc4a:	e3 e0       	ldi	r30, 0x03	; 3
    cc4c:	8e 9f       	mul	r24, r30
    cc4e:	a0 01       	movw	r20, r0
    cc50:	11 24       	eor	r1, r1
    cc52:	43 51       	subi	r20, 0x13	; 19
    cc54:	54 4f       	sbci	r21, 0xF4	; 244
    cc56:	23 e0       	ldi	r18, 0x03	; 3
    cc58:	6e 2d       	mov	r22, r14
    cc5a:	8e e0       	ldi	r24, 0x0E	; 14
    cc5c:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <LBPrintStr>
		Print(18, y, (char*) strBy);
    cc60:	46 ed       	ldi	r20, 0xD6	; 214
    cc62:	5a e0       	ldi	r21, 0x0A	; 10
    cc64:	b7 01       	movw	r22, r14
    cc66:	82 e1       	ldi	r24, 0x12	; 18
    cc68:	90 e0       	ldi	r25, 0x00	; 0
    cc6a:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
    cc6e:	f8 01       	movw	r30, r16
    cc70:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    cc72:	21 e0       	ldi	r18, 0x01	; 1
    cc74:	40 81       	ld	r20, Z
    cc76:	b7 01       	movw	r22, r14
    cc78:	87 e1       	ldi	r24, 0x17	; 23
    cc7a:	90 e0       	ldi	r25, 0x00	; 0
    cc7c:	0e 94 b6 53 	call	0xa76c	; 0xa76c <PrintByte>
		PrintChar(24, y, '-');
    cc80:	4d e2       	ldi	r20, 0x2D	; 45
    cc82:	b7 01       	movw	r22, r14
    cc84:	88 e1       	ldi	r24, 0x18	; 24
    cc86:	90 e0       	ldi	r25, 0x00	; 0
    cc88:	0e 94 04 54 	call	0xa808	; 0xa808 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    cc8c:	21 e0       	ldi	r18, 0x01	; 1
    cc8e:	f8 01       	movw	r30, r16
    cc90:	40 81       	ld	r20, Z
    cc92:	b7 01       	movw	r22, r14
    cc94:	8b e1       	ldi	r24, 0x1B	; 27
    cc96:	90 e0       	ldi	r25, 0x00	; 0
    cc98:	0e 94 b6 53 	call	0xa76c	; 0xa76c <PrintByte>
		y += 3;
		rank += 1;
    cc9c:	39 81       	ldd	r19, Y+1	; 0x01
    cc9e:	3f 5f       	subi	r19, 0xFF	; 255
    cca0:	f3 e0       	ldi	r31, 0x03	; 3
    cca2:	ef 0e       	add	r14, r31
    cca4:	f1 1c       	adc	r15, r1
    cca6:	0b 5f       	subi	r16, 0xFB	; 251
    cca8:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    ccaa:	36 30       	cpi	r19, 0x06	; 6
    ccac:	09 f0       	breq	.+2      	; 0xccb0 <load_tank_rank+0x102>
    ccae:	a7 cf       	rjmp	.-178    	; 0xcbfe <load_tank_rank+0x50>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
    ccb0:	4d ee       	ldi	r20, 0xED	; 237
    ccb2:	5a e0       	ldi	r21, 0x0A	; 10
    ccb4:	66 e1       	ldi	r22, 0x16	; 22
    ccb6:	70 e0       	ldi	r23, 0x00	; 0
    ccb8:	83 e0       	ldi	r24, 0x03	; 3
    ccba:	90 e0       	ldi	r25, 0x00	; 0
    ccbc:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(10, 24, (char*) strCancelHandle);
    ccc0:	46 e0       	ldi	r20, 0x06	; 6
    ccc2:	5b e0       	ldi	r21, 0x0B	; 11
    ccc4:	68 e1       	ldi	r22, 0x18	; 24
    ccc6:	70 e0       	ldi	r23, 0x00	; 0
    ccc8:	8a e0       	ldi	r24, 0x0A	; 10
    ccca:	90 e0       	ldi	r25, 0x00	; 0
}
    cccc:	0f 90       	pop	r0
    ccce:	df 91       	pop	r29
    ccd0:	cf 91       	pop	r28
    ccd2:	1f 91       	pop	r17
    ccd4:	0f 91       	pop	r16
    ccd6:	ff 90       	pop	r15
    ccd8:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    ccda:	0c 94 e9 53 	jmp	0xa7d2	; 0xa7d2 <Print>

0000ccde <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    ccde:	0e 94 8b 58 	call	0xb116	; 0xb116 <save_score>
	fade_through();
    cce2:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <fade_through>
	SetSpriteVisibility(true);
    cce6:	81 e0       	ldi	r24, 0x01	; 1
    cce8:	0e 94 11 52 	call	0xa422	; 0xa422 <SetSpriteVisibility>
	init_game_state();
    ccec:	0e 94 25 58 	call	0xb04a	; 0xb04a <init_game_state>
	load_tank_rank();
    ccf0:	0c 94 d7 65 	jmp	0xcbae	; 0xcbae <load_tank_rank>

0000ccf4 <update_player>:
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
}

void update_player(JoyPadState* p, Player* player)
{
    ccf4:	bf 92       	push	r11
    ccf6:	cf 92       	push	r12
    ccf8:	df 92       	push	r13
    ccfa:	ef 92       	push	r14
    ccfc:	ff 92       	push	r15
    ccfe:	0f 93       	push	r16
    cd00:	1f 93       	push	r17
    cd02:	cf 93       	push	r28
    cd04:	df 93       	push	r29
    cd06:	8c 01       	movw	r16, r24
    cd08:	eb 01       	movw	r28, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    cd0a:	1a 82       	std	Y+2, r1	; 0x02
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    cd0c:	fc 01       	movw	r30, r24
    cd0e:	80 81       	ld	r24, Z
    cd10:	83 ff       	sbrs	r24, 3
    cd12:	13 c0       	rjmp	.+38     	; 0xcd3a <update_player+0x46>
    cd14:	80 91 0e 0c 	lds	r24, 0x0C0E
    cd18:	81 11       	cpse	r24, r1
    cd1a:	0f c0       	rjmp	.+30     	; 0xcd3a <update_player+0x46>
	{
		SFX_NAVIGATE;
    cd1c:	2f ef       	ldi	r18, 0xFF	; 255
    cd1e:	47 e1       	ldi	r20, 0x17	; 23
    cd20:	65 e0       	ldi	r22, 0x05	; 5
    cd22:	84 e0       	ldi	r24, 0x04	; 4
    cd24:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
		game.paused = game.paused ^ 1;
    cd28:	90 91 0d 0c 	lds	r25, 0x0C0D
    cd2c:	81 e0       	ldi	r24, 0x01	; 1
    cd2e:	89 27       	eor	r24, r25
    cd30:	80 93 0d 0c 	sts	0x0C0D, r24
		load_level_tiles(false);
    cd34:	80 e0       	ldi	r24, 0x00	; 0
    cd36:	0e 94 f3 62 	call	0xc5e6	; 0xc5e6 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    cd3a:	20 91 0d 0c 	lds	r18, 0x0C0D
    cd3e:	f8 01       	movw	r30, r16
    cd40:	80 81       	ld	r24, Z
    cd42:	91 81       	ldd	r25, Z+1	; 0x01
    cd44:	21 11       	cpse	r18, r1
    cd46:	72 c1       	rjmp	.+740    	; 0xd02c <update_player+0x338>
    cd48:	2c 89       	ldd	r18, Y+20	; 0x14
    cd4a:	20 fd       	sbrc	r18, 0
    cd4c:	6f c1       	rjmp	.+734    	; 0xd02c <update_player+0x338>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    cd4e:	93 ff       	sbrs	r25, 3
    cd50:	19 c0       	rjmp	.+50     	; 0xcd84 <update_player+0x90>
    cd52:	8d 89       	ldd	r24, Y+21	; 0x15
    cd54:	8a 35       	cpi	r24, 0x5A	; 90
    cd56:	b1 f4       	brne	.+44     	; 0xcd84 <update_player+0x90>
		{
			player->banter_frame = 0;
    cd58:	1d 8a       	std	Y+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    cd5a:	69 e0       	ldi	r22, 0x09	; 9
    cd5c:	70 e0       	ldi	r23, 0x00	; 0
    cd5e:	80 e0       	ldi	r24, 0x00	; 0
    cd60:	90 e0       	ldi	r25, 0x00	; 0
    cd62:	0e 94 7d 56 	call	0xacfa	; 0xacfa <LBRandom>
    cd66:	8e 8b       	std	Y+22, r24	; 0x16
			SFX_BANTER;
    cd68:	80 91 49 0c 	lds	r24, 0x0C49
    cd6c:	80 fd       	sbrc	r24, 0
    cd6e:	0a c0       	rjmp	.+20     	; 0xcd84 <update_player+0x90>
    cd70:	80 91 b7 0f 	lds	r24, 0x0FB7
    cd74:	80 fd       	sbrc	r24, 0
    cd76:	06 c0       	rjmp	.+12     	; 0xcd84 <update_player+0x90>
    cd78:	2f e5       	ldi	r18, 0x5F	; 95
    cd7a:	4e e1       	ldi	r20, 0x1E	; 30
    cd7c:	60 e0       	ldi	r22, 0x00	; 0
    cd7e:	84 e0       	ldi	r24, 0x04	; 4
    cd80:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    cd84:	68 8d       	ldd	r22, Y+24	; 0x18
    cd86:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    cd88:	f8 01       	movw	r30, r16
    cd8a:	84 81       	ldd	r24, Z+4	; 0x04
    cd8c:	84 ff       	sbrs	r24, 4
    cd8e:	15 c0       	rjmp	.+42     	; 0xcdba <update_player+0xc6>
		{
			player->shared.direction = D_UP;
    cd90:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    cd92:	70 e0       	ldi	r23, 0x00	; 0
    cd94:	80 e0       	ldi	r24, 0x00	; 0
    cd96:	90 e0       	ldi	r25, 0x00	; 0
    cd98:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    cd9c:	25 e6       	ldi	r18, 0x65	; 101
    cd9e:	38 e8       	ldi	r19, 0x88	; 136
    cda0:	48 e8       	ldi	r20, 0x88	; 136
    cda2:	5c e3       	ldi	r21, 0x3C	; 60
    cda4:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    cda8:	9b 01       	movw	r18, r22
    cdaa:	ac 01       	movw	r20, r24
    cdac:	6f 81       	ldd	r22, Y+7	; 0x07
    cdae:	78 85       	ldd	r23, Y+8	; 0x08
    cdb0:	89 85       	ldd	r24, Y+9	; 0x09
    cdb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    cdb4:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    cdb8:	2f c0       	rjmp	.+94     	; 0xce18 <update_player+0x124>
		}
		else if ((p->held & BTN_RIGHT))
    cdba:	87 ff       	sbrs	r24, 7
    cdbc:	16 c0       	rjmp	.+44     	; 0xcdea <update_player+0xf6>
		{
			player->shared.direction = D_RIGHT;
    cdbe:	81 e0       	ldi	r24, 0x01	; 1
    cdc0:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    cdc2:	70 e0       	ldi	r23, 0x00	; 0
    cdc4:	80 e0       	ldi	r24, 0x00	; 0
    cdc6:	90 e0       	ldi	r25, 0x00	; 0
    cdc8:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    cdcc:	25 e6       	ldi	r18, 0x65	; 101
    cdce:	38 e8       	ldi	r19, 0x88	; 136
    cdd0:	48 e8       	ldi	r20, 0x88	; 136
    cdd2:	5c e3       	ldi	r21, 0x3C	; 60
    cdd4:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    cdd8:	9b 01       	movw	r18, r22
    cdda:	ac 01       	movw	r20, r24
    cddc:	6b 81       	ldd	r22, Y+3	; 0x03
    cdde:	7c 81       	ldd	r23, Y+4	; 0x04
    cde0:	8d 81       	ldd	r24, Y+5	; 0x05
    cde2:	9e 81       	ldd	r25, Y+6	; 0x06
    cde4:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    cde8:	33 c0       	rjmp	.+102    	; 0xce50 <update_player+0x15c>
		}
		else if ((p->held & BTN_DOWN))
    cdea:	85 ff       	sbrs	r24, 5
    cdec:	1a c0       	rjmp	.+52     	; 0xce22 <update_player+0x12e>
		{
			player->shared.direction = D_DOWN;
    cdee:	82 e0       	ldi	r24, 0x02	; 2
    cdf0:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    cdf2:	70 e0       	ldi	r23, 0x00	; 0
    cdf4:	80 e0       	ldi	r24, 0x00	; 0
    cdf6:	90 e0       	ldi	r25, 0x00	; 0
    cdf8:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    cdfc:	25 e6       	ldi	r18, 0x65	; 101
    cdfe:	38 e8       	ldi	r19, 0x88	; 136
    ce00:	48 e8       	ldi	r20, 0x88	; 136
    ce02:	5c e3       	ldi	r21, 0x3C	; 60
    ce04:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    ce08:	9b 01       	movw	r18, r22
    ce0a:	ac 01       	movw	r20, r24
    ce0c:	6f 81       	ldd	r22, Y+7	; 0x07
    ce0e:	78 85       	ldd	r23, Y+8	; 0x08
    ce10:	89 85       	ldd	r24, Y+9	; 0x09
    ce12:	9a 85       	ldd	r25, Y+10	; 0x0a
    ce14:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    ce18:	6f 83       	std	Y+7, r22	; 0x07
    ce1a:	78 87       	std	Y+8, r23	; 0x08
    ce1c:	89 87       	std	Y+9, r24	; 0x09
    ce1e:	9a 87       	std	Y+10, r25	; 0x0a
    ce20:	1d c0       	rjmp	.+58     	; 0xce5c <update_player+0x168>
		}
		else if ((p->held & BTN_LEFT))
    ce22:	86 ff       	sbrs	r24, 6
    ce24:	1a c0       	rjmp	.+52     	; 0xce5a <update_player+0x166>
		{
			player->shared.direction = D_LEFT;
    ce26:	83 e0       	ldi	r24, 0x03	; 3
    ce28:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    ce2a:	70 e0       	ldi	r23, 0x00	; 0
    ce2c:	80 e0       	ldi	r24, 0x00	; 0
    ce2e:	90 e0       	ldi	r25, 0x00	; 0
    ce30:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    ce34:	25 e6       	ldi	r18, 0x65	; 101
    ce36:	38 e8       	ldi	r19, 0x88	; 136
    ce38:	48 e8       	ldi	r20, 0x88	; 136
    ce3a:	5c e3       	ldi	r21, 0x3C	; 60
    ce3c:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    ce40:	9b 01       	movw	r18, r22
    ce42:	ac 01       	movw	r20, r24
    ce44:	6b 81       	ldd	r22, Y+3	; 0x03
    ce46:	7c 81       	ldd	r23, Y+4	; 0x04
    ce48:	8d 81       	ldd	r24, Y+5	; 0x05
    ce4a:	9e 81       	ldd	r25, Y+6	; 0x06
    ce4c:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    ce50:	6b 83       	std	Y+3, r22	; 0x03
    ce52:	7c 83       	std	Y+4, r23	; 0x04
    ce54:	8d 83       	std	Y+5, r24	; 0x05
    ce56:	9e 83       	std	Y+6, r25	; 0x06
    ce58:	01 c0       	rjmp	.+2      	; 0xce5c <update_player+0x168>
		}
		else
		{
			player->shared.speed = 0;
    ce5a:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    ce5c:	f8 01       	movw	r30, r16
    ce5e:	80 81       	ld	r24, Z
    ce60:	91 81       	ldd	r25, Z+1	; 0x01
    ce62:	8e 01       	movw	r16, r28
    ce64:	04 5d       	subi	r16, 0xD4	; 212
    ce66:	1f 4f       	sbci	r17, 0xFF	; 255
    ce68:	90 ff       	sbrs	r25, 0
    ce6a:	43 c0       	rjmp	.+134    	; 0xcef2 <update_player+0x1fe>
    ce6c:	89 89       	ldd	r24, Y+17	; 0x11
    ce6e:	81 11       	cpse	r24, r1
    ce70:	40 c0       	rjmp	.+128    	; 0xcef2 <update_player+0x1fe>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    ce72:	8a ad       	ldd	r24, Y+58	; 0x3a
    ce74:	81 11       	cpse	r24, r1
    ce76:	3d c0       	rjmp	.+122    	; 0xcef2 <update_player+0x1fe>
				{
					if (player->has_rocket)
    ce78:	89 8d       	ldd	r24, Y+25	; 0x19
    ce7a:	88 23       	and	r24, r24
    ce7c:	a1 f0       	breq	.+40     	; 0xcea6 <update_player+0x1b2>
					{
						init_shot_state(shot, ROCKET_SHOT);
    ce7e:	61 e0       	ldi	r22, 0x01	; 1
    ce80:	c8 01       	movw	r24, r16
    ce82:	0e 94 2c 57 	call	0xae58	; 0xae58 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    ce86:	61 e0       	ldi	r22, 0x01	; 1
    ce88:	c8 01       	movw	r24, r16
    ce8a:	0e 94 49 57 	call	0xae92	; 0xae92 <set_shot_animations>
						SFX_ROCKET;
    ce8e:	80 91 49 0c 	lds	r24, 0x0C49
    ce92:	80 fd       	sbrc	r24, 0
    ce94:	1e c0       	rjmp	.+60     	; 0xced2 <update_player+0x1de>
    ce96:	80 91 b7 0f 	lds	r24, 0x0FB7
    ce9a:	80 fd       	sbrc	r24, 0
    ce9c:	1a c0       	rjmp	.+52     	; 0xced2 <update_player+0x1de>
    ce9e:	2f ef       	ldi	r18, 0xFF	; 255
    cea0:	47 e1       	ldi	r20, 0x17	; 23
    cea2:	66 e0       	ldi	r22, 0x06	; 6
    cea4:	13 c0       	rjmp	.+38     	; 0xcecc <update_player+0x1d8>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    cea6:	60 e0       	ldi	r22, 0x00	; 0
    cea8:	c8 01       	movw	r24, r16
    ceaa:	0e 94 2c 57 	call	0xae58	; 0xae58 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    ceae:	60 e0       	ldi	r22, 0x00	; 0
    ceb0:	c8 01       	movw	r24, r16
    ceb2:	0e 94 49 57 	call	0xae92	; 0xae92 <set_shot_animations>
						SFX_CANNONBALL;
    ceb6:	80 91 49 0c 	lds	r24, 0x0C49
    ceba:	80 fd       	sbrc	r24, 0
    cebc:	0a c0       	rjmp	.+20     	; 0xced2 <update_player+0x1de>
    cebe:	80 91 b7 0f 	lds	r24, 0x0FB7
    cec2:	80 fd       	sbrc	r24, 0
    cec4:	06 c0       	rjmp	.+12     	; 0xced2 <update_player+0x1de>
    cec6:	2f ef       	ldi	r18, 0xFF	; 255
    cec8:	47 e1       	ldi	r20, 0x17	; 23
    ceca:	62 e0       	ldi	r22, 0x02	; 2
    cecc:	84 e0       	ldi	r24, 0x04	; 4
    cece:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
					}
					player->active_shots++;
    ced2:	89 89       	ldd	r24, Y+17	; 0x11
    ced4:	8f 5f       	subi	r24, 0xFF	; 255
    ced6:	89 8b       	std	Y+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    ced8:	88 81       	ld	r24, Y
    ceda:	8c a7       	std	Y+44, r24	; 0x2c
					position_shot(player, shot);
    cedc:	b8 01       	movw	r22, r16
    cede:	ce 01       	movw	r24, r28
    cee0:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <position_shot>
					shot->active = 1;
    cee4:	81 e0       	ldi	r24, 0x01	; 1
    cee6:	8a af       	std	Y+58, r24	; 0x3a
					if (player->has_over_speed)
    cee8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ceea:	88 23       	and	r24, r24
    ceec:	11 f0       	breq	.+4      	; 0xcef2 <update_player+0x1fe>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    ceee:	8a ea       	ldi	r24, 0xAA	; 170
    cef0:	8d a7       	std	Y+45, r24	; 0x2d

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    cef2:	8a ad       	ldd	r24, Y+58	; 0x3a
    cef4:	88 23       	and	r24, r24
    cef6:	09 f4       	brne	.+2      	; 0xcefa <update_player+0x206>
    cef8:	ac c0       	rjmp	.+344    	; 0xd052 <update_player+0x35e>
			{
				switch (shot->shared.direction)
    cefa:	8c a5       	ldd	r24, Y+44	; 0x2c
    cefc:	81 30       	cpi	r24, 0x01	; 1
    cefe:	89 f1       	breq	.+98     	; 0xcf62 <update_player+0x26e>
    cf00:	d8 f0       	brcs	.+54     	; 0xcf38 <update_player+0x244>
    cf02:	82 30       	cpi	r24, 0x02	; 2
    cf04:	09 f4       	brne	.+2      	; 0xcf08 <update_player+0x214>
    cf06:	42 c0       	rjmp	.+132    	; 0xcf8c <update_player+0x298>
    cf08:	83 30       	cpi	r24, 0x03	; 3
    cf0a:	09 f0       	breq	.+2      	; 0xcf0e <update_player+0x21a>
    cf0c:	5c c0       	rjmp	.+184    	; 0xcfc6 <update_player+0x2d2>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    cf0e:	6d a5       	ldd	r22, Y+45	; 0x2d
    cf10:	70 e0       	ldi	r23, 0x00	; 0
    cf12:	80 e0       	ldi	r24, 0x00	; 0
    cf14:	90 e0       	ldi	r25, 0x00	; 0
    cf16:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    cf1a:	25 e6       	ldi	r18, 0x65	; 101
    cf1c:	38 e8       	ldi	r19, 0x88	; 136
    cf1e:	48 e8       	ldi	r20, 0x88	; 136
    cf20:	5c e3       	ldi	r21, 0x3C	; 60
    cf22:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    cf26:	9b 01       	movw	r18, r22
    cf28:	ac 01       	movw	r20, r24
    cf2a:	6f a5       	ldd	r22, Y+47	; 0x2f
    cf2c:	78 a9       	ldd	r23, Y+48	; 0x30
    cf2e:	89 a9       	ldd	r24, Y+49	; 0x31
    cf30:	9a a9       	ldd	r25, Y+50	; 0x32
    cf32:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    cf36:	43 c0       	rjmp	.+134    	; 0xcfbe <update_player+0x2ca>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    cf38:	6d a5       	ldd	r22, Y+45	; 0x2d
    cf3a:	70 e0       	ldi	r23, 0x00	; 0
    cf3c:	80 e0       	ldi	r24, 0x00	; 0
    cf3e:	90 e0       	ldi	r25, 0x00	; 0
    cf40:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    cf44:	25 e6       	ldi	r18, 0x65	; 101
    cf46:	38 e8       	ldi	r19, 0x88	; 136
    cf48:	48 e8       	ldi	r20, 0x88	; 136
    cf4a:	5c e3       	ldi	r21, 0x3C	; 60
    cf4c:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    cf50:	9b 01       	movw	r18, r22
    cf52:	ac 01       	movw	r20, r24
    cf54:	6b a9       	ldd	r22, Y+51	; 0x33
    cf56:	7c a9       	ldd	r23, Y+52	; 0x34
    cf58:	8d a9       	ldd	r24, Y+53	; 0x35
    cf5a:	9e a9       	ldd	r25, Y+54	; 0x36
    cf5c:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    cf60:	29 c0       	rjmp	.+82     	; 0xcfb4 <update_player+0x2c0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    cf62:	6d a5       	ldd	r22, Y+45	; 0x2d
    cf64:	70 e0       	ldi	r23, 0x00	; 0
    cf66:	80 e0       	ldi	r24, 0x00	; 0
    cf68:	90 e0       	ldi	r25, 0x00	; 0
    cf6a:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    cf6e:	25 e6       	ldi	r18, 0x65	; 101
    cf70:	38 e8       	ldi	r19, 0x88	; 136
    cf72:	48 e8       	ldi	r20, 0x88	; 136
    cf74:	5c e3       	ldi	r21, 0x3C	; 60
    cf76:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    cf7a:	9b 01       	movw	r18, r22
    cf7c:	ac 01       	movw	r20, r24
    cf7e:	6f a5       	ldd	r22, Y+47	; 0x2f
    cf80:	78 a9       	ldd	r23, Y+48	; 0x30
    cf82:	89 a9       	ldd	r24, Y+49	; 0x31
    cf84:	9a a9       	ldd	r25, Y+50	; 0x32
    cf86:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    cf8a:	19 c0       	rjmp	.+50     	; 0xcfbe <update_player+0x2ca>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    cf8c:	6d a5       	ldd	r22, Y+45	; 0x2d
    cf8e:	70 e0       	ldi	r23, 0x00	; 0
    cf90:	80 e0       	ldi	r24, 0x00	; 0
    cf92:	90 e0       	ldi	r25, 0x00	; 0
    cf94:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    cf98:	25 e6       	ldi	r18, 0x65	; 101
    cf9a:	38 e8       	ldi	r19, 0x88	; 136
    cf9c:	48 e8       	ldi	r20, 0x88	; 136
    cf9e:	5c e3       	ldi	r21, 0x3C	; 60
    cfa0:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    cfa4:	9b 01       	movw	r18, r22
    cfa6:	ac 01       	movw	r20, r24
    cfa8:	6b a9       	ldd	r22, Y+51	; 0x33
    cfaa:	7c a9       	ldd	r23, Y+52	; 0x34
    cfac:	8d a9       	ldd	r24, Y+53	; 0x35
    cfae:	9e a9       	ldd	r25, Y+54	; 0x36
    cfb0:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    cfb4:	6b ab       	std	Y+51, r22	; 0x33
    cfb6:	7c ab       	std	Y+52, r23	; 0x34
    cfb8:	8d ab       	std	Y+53, r24	; 0x35
    cfba:	9e ab       	std	Y+54, r25	; 0x36
    cfbc:	04 c0       	rjmp	.+8      	; 0xcfc6 <update_player+0x2d2>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    cfbe:	6f a7       	std	Y+47, r22	; 0x2f
    cfc0:	78 ab       	std	Y+48, r23	; 0x30
    cfc2:	89 ab       	std	Y+49, r24	; 0x31
    cfc4:	9a ab       	std	Y+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    cfc6:	bb ac       	ldd	r11, Y+59	; 0x3b
    cfc8:	6b 2d       	mov	r22, r11
    cfca:	70 e0       	ldi	r23, 0x00	; 0
    cfcc:	80 e0       	ldi	r24, 0x00	; 0
    cfce:	90 e0       	ldi	r25, 0x00	; 0
    cfd0:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    cfd4:	6b 01       	movw	r12, r22
    cfd6:	7c 01       	movw	r14, r24
    cfd8:	f8 e0       	ldi	r31, 0x08	; 8
    cfda:	fb 15       	cp	r31, r11
    cfdc:	80 f0       	brcs	.+32     	; 0xcffe <update_player+0x30a>
    cfde:	8d a5       	ldd	r24, Y+45	; 0x2d
    cfe0:	68 2f       	mov	r22, r24
    cfe2:	70 e0       	ldi	r23, 0x00	; 0
    cfe4:	80 e0       	ldi	r24, 0x00	; 0
    cfe6:	90 e0       	ldi	r25, 0x00	; 0
    cfe8:	0e 94 ce 72 	call	0xe59c	; 0xe59c <__floatsisf>
    cfec:	25 e6       	ldi	r18, 0x65	; 101
    cfee:	38 e8       	ldi	r19, 0x88	; 136
    cff0:	48 e8       	ldi	r20, 0x88	; 136
    cff2:	5c e3       	ldi	r21, 0x3C	; 60
    cff4:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    cff8:	9b 01       	movw	r18, r22
    cffa:	ac 01       	movw	r20, r24
    cffc:	03 c0       	rjmp	.+6      	; 0xd004 <update_player+0x310>
    cffe:	20 e0       	ldi	r18, 0x00	; 0
    d000:	30 e0       	ldi	r19, 0x00	; 0
    d002:	a9 01       	movw	r20, r18
    d004:	c7 01       	movw	r24, r14
    d006:	b6 01       	movw	r22, r12
    d008:	0e 94 cb 71 	call	0xe396	; 0xe396 <__addsf3>
    d00c:	0e 94 a0 72 	call	0xe540	; 0xe540 <__fixunssfsi>
    d010:	6b af       	std	Y+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    d012:	b8 01       	movw	r22, r16
    d014:	ce 01       	movw	r24, r28
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    d016:	df 91       	pop	r29
    d018:	cf 91       	pop	r28
    d01a:	1f 91       	pop	r17
    d01c:	0f 91       	pop	r16
    d01e:	ff 90       	pop	r15
    d020:	ef 90       	pop	r14
    d022:	df 90       	pop	r13
    d024:	cf 90       	pop	r12
    d026:	bf 90       	pop	r11
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
				collision_detect_shot(player, shot);
    d028:	0c 94 ff 5e 	jmp	0xbdfe	; 0xbdfe <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d02c:	91 ff       	sbrs	r25, 1
    d02e:	11 c0       	rjmp	.+34     	; 0xd052 <update_player+0x35e>
		{
			SFX_NAVIGATE;
    d030:	2f ef       	ldi	r18, 0xFF	; 255
    d032:	47 e1       	ldi	r20, 0x17	; 23
    d034:	65 e0       	ldi	r22, 0x05	; 5
    d036:	84 e0       	ldi	r24, 0x04	; 4
    d038:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
			exit_game();
		}
	}
}
    d03c:	df 91       	pop	r29
    d03e:	cf 91       	pop	r28
    d040:	1f 91       	pop	r17
    d042:	0f 91       	pop	r16
    d044:	ff 90       	pop	r15
    d046:	ef 90       	pop	r14
    d048:	df 90       	pop	r13
    d04a:	cf 90       	pop	r12
    d04c:	bf 90       	pop	r11
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    d04e:	0c 94 6f 66 	jmp	0xccde	; 0xccde <exit_game>
		}
	}
}
    d052:	df 91       	pop	r29
    d054:	cf 91       	pop	r28
    d056:	1f 91       	pop	r17
    d058:	0f 91       	pop	r16
    d05a:	ff 90       	pop	r15
    d05c:	ef 90       	pop	r14
    d05e:	df 90       	pop	r13
    d060:	cf 90       	pop	r12
    d062:	bf 90       	pop	r11
    d064:	08 95       	ret

0000d066 <update_level_helper>:

void update_level_helper(JoyPadState* p, Player* player, JoyPadState* op, Player* other_player, u8 hud_x, u8 ohud_x)
{
    d066:	8f 92       	push	r8
    d068:	9f 92       	push	r9
    d06a:	af 92       	push	r10
    d06c:	bf 92       	push	r11
    d06e:	cf 92       	push	r12
    d070:	df 92       	push	r13
    d072:	ef 92       	push	r14
    d074:	0f 93       	push	r16
    d076:	1f 93       	push	r17
    d078:	cf 93       	push	r28
    d07a:	df 93       	push	r29
    d07c:	5c 01       	movw	r10, r24
    d07e:	eb 01       	movw	r28, r22
    d080:	4a 01       	movw	r8, r20
    d082:	69 01       	movw	r12, r18
	u8 next_level;
	Player* tmp;
	
	update_player(p, player);
    d084:	0e 94 7a 66 	call	0xccf4	; 0xccf4 <update_player>
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    d088:	88 89       	ldd	r24, Y+16	; 0x10
    d08a:	82 30       	cpi	r24, 0x02	; 2
    d08c:	08 f4       	brcc	.+2      	; 0xd090 <update_level_helper+0x2a>
    d08e:	6f c0       	rjmp	.+222    	; 0xd16e <update_level_helper+0x108>
    d090:	f6 01       	movw	r30, r12
    d092:	84 89       	ldd	r24, Z+20	; 0x14
    d094:	80 fd       	sbrc	r24, 0
    d096:	6b c0       	rjmp	.+214    	; 0xd16e <update_level_helper+0x108>
	{
	    next_level = game.current_level + 1;
    d098:	10 91 0c 0c 	lds	r17, 0x0C0C
    d09c:	1f 5f       	subi	r17, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    d09e:	1a 30       	cpi	r17, 0x0A	; 10
    d0a0:	48 f1       	brcs	.+82     	; 0xd0f4 <update_level_helper+0x8e>
    d0a2:	87 85       	ldd	r24, Z+15	; 0x0f
    d0a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    d0a6:	89 17       	cp	r24, r25
    d0a8:	09 f4       	brne	.+2      	; 0xd0ac <update_level_helper+0x46>
    d0aa:	61 c0       	rjmp	.+194    	; 0xd16e <update_level_helper+0x108>
		
		// Load boss fight
		if (next_level >= LEVEL_COUNT && game.boss_fight_status == 0)
    d0ac:	20 91 0e 0c 	lds	r18, 0x0C0E
    d0b0:	21 11       	cpse	r18, r1
    d0b2:	20 c0       	rjmp	.+64     	; 0xd0f4 <update_level_helper+0x8e>
		{
			game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    d0b4:	21 e0       	ldi	r18, 0x01	; 1
    d0b6:	20 93 0e 0c 	sts	0x0C0E, r18
			game.boss_fight_player = player;
    d0ba:	d0 93 12 0c 	sts	0x0C12, r29
    d0be:	c0 93 11 0c 	sts	0x0C11, r28
			game.boss_fight_joypad = p;
    d0c2:	b0 92 14 0c 	sts	0x0C14, r11
    d0c6:	a0 92 13 0c 	sts	0x0C13, r10
			game.boss_fight_player_hud = hud_x;
    d0ca:	00 93 0f 0c 	sts	0x0C0F, r16
			if (other_player->score > player->score)
    d0ce:	98 17       	cp	r25, r24
    d0d0:	50 f4       	brcc	.+20     	; 0xd0e6 <update_level_helper+0x80>
			{
				game.boss_fight_player = other_player;
    d0d2:	d0 92 12 0c 	sts	0x0C12, r13
    d0d6:	c0 92 11 0c 	sts	0x0C11, r12
				game.boss_fight_joypad = op;
    d0da:	90 92 14 0c 	sts	0x0C14, r9
    d0de:	80 92 13 0c 	sts	0x0C13, r8
				game.boss_fight_player_hud = ohud_x;
    d0e2:	e0 92 0f 0c 	sts	0x0C0F, r14
			}
			scope_animation.tile_index = 15 + 5*30;
    d0e6:	85 ea       	ldi	r24, 0xA5	; 165
    d0e8:	90 e0       	ldi	r25, 0x00	; 0
    d0ea:	90 93 36 10 	sts	0x1036, r25
    d0ee:	80 93 35 10 	sts	0x1035, r24
    d0f2:	3d c0       	rjmp	.+122    	; 0xd16e <update_level_helper+0x108>
			return;
		}

		load_level_tiles(true);
    d0f4:	81 e0       	ldi	r24, 0x01	; 1
    d0f6:	0e 94 f3 62 	call	0xc5e6	; 0xc5e6 <load_level_tiles>
		SetSpriteVisibility(false);
    d0fa:	80 e0       	ldi	r24, 0x00	; 0
    d0fc:	0e 94 11 52 	call	0xa422	; 0xa422 <SetSpriteVisibility>
		print_level_score(player, other_player);
    d100:	b6 01       	movw	r22, r12
    d102:	ce 01       	movw	r24, r28
    d104:	0e 94 62 59 	call	0xb2c4	; 0xb2c4 <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    d108:	82 e0       	ldi	r24, 0x02	; 2
    d10a:	0e 94 b2 56 	call	0xad64	; 0xad64 <LBWaitSeconds>
		player->level_score = 0;
    d10e:	18 8a       	std	Y+16, r1	; 0x10
		other_player->level_score = 0;
    d110:	f6 01       	movw	r30, r12
    d112:	10 8a       	std	Z+16, r1	; 0x10
		if (next_level >= LEVEL_COUNT)
    d114:	1a 30       	cpi	r17, 0x0A	; 10
    d116:	e8 f0       	brcs	.+58     	; 0xd152 <update_level_helper+0xec>
		{
		    if (other_player->score > player->score)
    d118:	97 85       	ldd	r25, Z+15	; 0x0f
    d11a:	8f 85       	ldd	r24, Y+15	; 0x0f
    d11c:	89 17       	cp	r24, r25
    d11e:	28 f4       	brcc	.+10     	; 0xd12a <update_level_helper+0xc4>
    d120:	9c 2f       	mov	r25, r28
    d122:	8d 2f       	mov	r24, r29
		    {
		        tmp = player;
		        player = other_player;
    d124:	e6 01       	movw	r28, r12
		        other_player = tmp;
    d126:	c9 2e       	mov	r12, r25
    d128:	d8 2e       	mov	r13, r24
		    }
		    print_final_score(player, other_player);
    d12a:	b6 01       	movw	r22, r12
    d12c:	ce 01       	movw	r24, r28
    d12e:	0e 94 a4 59 	call	0xb348	; 0xb348 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    d132:	82 e0       	ldi	r24, 0x02	; 2
    d134:	0e 94 b2 56 	call	0xad64	; 0xad64 <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    d138:	df 91       	pop	r29
    d13a:	cf 91       	pop	r28
    d13c:	1f 91       	pop	r17
    d13e:	0f 91       	pop	r16
    d140:	ef 90       	pop	r14
    d142:	df 90       	pop	r13
    d144:	cf 90       	pop	r12
    d146:	bf 90       	pop	r11
    d148:	af 90       	pop	r10
    d14a:	9f 90       	pop	r9
    d14c:	8f 90       	pop	r8
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    d14e:	0c 94 6f 66 	jmp	0xccde	; 0xccde <exit_game>
		}
		else
		{
			level_transition(next_level);
    d152:	81 2f       	mov	r24, r17
		}
	}
}
    d154:	df 91       	pop	r29
    d156:	cf 91       	pop	r28
    d158:	1f 91       	pop	r17
    d15a:	0f 91       	pop	r16
    d15c:	ef 90       	pop	r14
    d15e:	df 90       	pop	r13
    d160:	cf 90       	pop	r12
    d162:	bf 90       	pop	r11
    d164:	af 90       	pop	r10
    d166:	9f 90       	pop	r9
    d168:	8f 90       	pop	r8
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    d16a:	0c 94 2e 64 	jmp	0xc85c	; 0xc85c <level_transition>
		}
	}
}
    d16e:	df 91       	pop	r29
    d170:	cf 91       	pop	r28
    d172:	1f 91       	pop	r17
    d174:	0f 91       	pop	r16
    d176:	ef 90       	pop	r14
    d178:	df 90       	pop	r13
    d17a:	cf 90       	pop	r12
    d17c:	bf 90       	pop	r11
    d17e:	af 90       	pop	r10
    d180:	9f 90       	pop	r9
    d182:	8f 90       	pop	r8
    d184:	08 95       	ret

0000d186 <update_level>:
		SFX_TANK_EXPLODE;
	}
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    d186:	cf 92       	push	r12
    d188:	df 92       	push	r13
    d18a:	ef 92       	push	r14
    d18c:	ff 92       	push	r15
    d18e:	0f 93       	push	r16
    d190:	1f 93       	push	r17
    d192:	cf 93       	push	r28
    d194:	df 93       	push	r29
    d196:	6c 01       	movw	r12, r24
    d198:	eb 01       	movw	r28, r22
	u16 held = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	if (game.paused)
    d19a:	80 91 0d 0c 	lds	r24, 0x0C0D
    d19e:	88 23       	and	r24, r24
    d1a0:	21 f1       	breq	.+72     	; 0xd1ea <update_level+0x64>
	{
		// Render
		SetSpriteVisibility(false);
    d1a2:	80 e0       	ldi	r24, 0x00	; 0
    d1a4:	0e 94 11 52 	call	0xa422	; 0xa422 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    d1a8:	4a e5       	ldi	r20, 0x5A	; 90
    d1aa:	53 e8       	ldi	r21, 0x83	; 131
    d1ac:	6c e0       	ldi	r22, 0x0C	; 12
    d1ae:	88 e0       	ldi	r24, 0x08	; 8
    d1b0:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
		Print(12, 13, (char*) strPaused);
    d1b4:	47 e0       	ldi	r20, 0x07	; 7
    d1b6:	5a e0       	ldi	r21, 0x0A	; 10
    d1b8:	6d e0       	ldi	r22, 0x0D	; 13
    d1ba:	70 e0       	ldi	r23, 0x00	; 0
    d1bc:	8c e0       	ldi	r24, 0x0C	; 12
    d1be:	90 e0       	ldi	r25, 0x00	; 0
    d1c0:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
		Print(11, 14, (char*) strExit);
    d1c4:	4e e0       	ldi	r20, 0x0E	; 14
    d1c6:	5a e0       	ldi	r21, 0x0A	; 10
    d1c8:	6e e0       	ldi	r22, 0x0E	; 14
    d1ca:	70 e0       	ldi	r23, 0x00	; 0
    d1cc:	8b e0       	ldi	r24, 0x0B	; 11
    d1ce:	90 e0       	ldi	r25, 0x00	; 0
    d1d0:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
		
		// Update
		update_player(p1, &player1);
    d1d4:	65 e3       	ldi	r22, 0x35	; 53
    d1d6:	7c e0       	ldi	r23, 0x0C	; 12
    d1d8:	c6 01       	movw	r24, r12
    d1da:	0e 94 7a 66 	call	0xccf4	; 0xccf4 <update_player>
		update_player(p2, &player2);
    d1de:	63 ea       	ldi	r22, 0xA3	; 163
    d1e0:	7f e0       	ldi	r23, 0x0F	; 15
    d1e2:	ce 01       	movw	r24, r28
    d1e4:	0e 94 7a 66 	call	0xccf4	; 0xccf4 <update_player>
    d1e8:	6a c1       	rjmp	.+724    	; 0xd4be <update_level+0x338>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    d1ea:	90 91 0e 0c 	lds	r25, 0x0C0E
	{
		// Render
		SetSpriteVisibility(true);
    d1ee:	81 e0       	ldi	r24, 0x01	; 1
		
		// Update
		update_player(p1, &player1);
		update_player(p2, &player2);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    d1f0:	91 30       	cpi	r25, 0x01	; 1
    d1f2:	29 f4       	brne	.+10     	; 0xd1fe <update_level+0x78>
	{
		// Render
		SetSpriteVisibility(true);
    d1f4:	0e 94 11 52 	call	0xa422	; 0xa422 <SetSpriteVisibility>
		render_boss_fight_scope_load();
    d1f8:	0e 94 5e 64 	call	0xc8bc	; 0xc8bc <render_boss_fight_scope_load>
    d1fc:	07 c0       	rjmp	.+14     	; 0xd20c <update_level+0x86>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    d1fe:	92 30       	cpi	r25, 0x02	; 2
    d200:	09 f0       	breq	.+2      	; 0xd204 <update_level+0x7e>
    d202:	50 c0       	rjmp	.+160    	; 0xd2a4 <update_level+0x11e>
	{
		// Render
		SetSpriteVisibility(true);
    d204:	0e 94 11 52 	call	0xa422	; 0xa422 <SetSpriteVisibility>
		render_boss_fight_sub_load();
    d208:	0e 94 6d 64 	call	0xc8da	; 0xc8da <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d20c:	60 e0       	ldi	r22, 0x00	; 0
    d20e:	80 91 11 0c 	lds	r24, 0x0C11
    d212:	90 91 12 0c 	lds	r25, 0x0C12
    d216:	0e 94 f3 5a 	call	0xb5e6	; 0xb5e6 <tank_map>
    d21a:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d21c:	40 e0       	ldi	r20, 0x00	; 0
    d21e:	6d e8       	ldi	r22, 0x8D	; 141
    d220:	79 e4       	ldi	r23, 0x49	; 73
    d222:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d226:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d228:	6c 2f       	mov	r22, r28
    d22a:	80 91 11 0c 	lds	r24, 0x0C11
    d22e:	90 91 12 0c 	lds	r25, 0x0C12
    d232:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <shot_map>
    d236:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d238:	40 e0       	ldi	r20, 0x00	; 0
    d23a:	63 e9       	ldi	r22, 0x93	; 147
    d23c:	79 e4       	ldi	r23, 0x49	; 73
    d23e:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d242:	6c 2f       	mov	r22, r28
    d244:	80 91 11 0c 	lds	r24, 0x0C11
    d248:	90 91 12 0c 	lds	r25, 0x0C12
    d24c:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d250:	60 e0       	ldi	r22, 0x00	; 0
    d252:	80 91 11 0c 	lds	r24, 0x0C11
    d256:	90 91 12 0c 	lds	r25, 0x0C12
    d25a:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d25e:	6c 2f       	mov	r22, r28
    d260:	80 91 11 0c 	lds	r24, 0x0C11
    d264:	90 91 12 0c 	lds	r25, 0x0C12
    d268:	0e 94 78 5a 	call	0xb4f0	; 0xb4f0 <render_shot>
		render_shot(&player2, p2_shot_index);
    d26c:	6d 2f       	mov	r22, r29
    d26e:	83 ea       	ldi	r24, 0xA3	; 163
    d270:	9f e0       	ldi	r25, 0x0F	; 15
    d272:	0e 94 78 5a 	call	0xb4f0	; 0xb4f0 <render_shot>
		render_tile_explosions(&tile_animations);
    d276:	88 e1       	ldi	r24, 0x18	; 24
    d278:	9c e0       	ldi	r25, 0x0C	; 12
    d27a:	0e 94 a4 5a 	call	0xb548	; 0xb548 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d27e:	60 91 11 0c 	lds	r22, 0x0C11
    d282:	70 91 12 0c 	lds	r23, 0x0C12
    d286:	80 91 13 0c 	lds	r24, 0x0C13
    d28a:	90 91 14 0c 	lds	r25, 0x0C14
    d28e:	0e 94 7a 66 	call	0xccf4	; 0xccf4 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d292:	60 91 0f 0c 	lds	r22, 0x0C0F
    d296:	80 91 11 0c 	lds	r24, 0x0C11
    d29a:	90 91 12 0c 	lds	r25, 0x0C12
    d29e:	0e 94 3b 61 	call	0xc276	; 0xc276 <collision_detect_player>
    d2a2:	0d c1       	rjmp	.+538    	; 0xd4be <update_level+0x338>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    d2a4:	94 30       	cpi	r25, 0x04	; 4
    d2a6:	09 f0       	breq	.+2      	; 0xd2aa <update_level+0x124>
    d2a8:	6e c0       	rjmp	.+220    	; 0xd386 <update_level+0x200>
	{
		// Render
		SetSpriteVisibility(true);
    d2aa:	0e 94 11 52 	call	0xa422	; 0xa422 <SetSpriteVisibility>
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    d2ae:	60 e0       	ldi	r22, 0x00	; 0
    d2b0:	80 91 11 0c 	lds	r24, 0x0C11
    d2b4:	90 91 12 0c 	lds	r25, 0x0C12
    d2b8:	0e 94 f3 5a 	call	0xb5e6	; 0xb5e6 <tank_map>
    d2bc:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    d2be:	68 2f       	mov	r22, r24
    d2c0:	80 91 11 0c 	lds	r24, 0x0C11
    d2c4:	90 91 12 0c 	lds	r25, 0x0C12
    d2c8:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <shot_map>
    d2cc:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    d2ce:	01 e0       	ldi	r16, 0x01	; 1
    d2d0:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    d2d2:	12 e0       	ldi	r17, 0x02	; 2
    d2d4:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    d2d6:	d3 e0       	ldi	r29, 0x03	; 3
    d2d8:	d8 0f       	add	r29, r24
		MapSprite2(t1_index, map_sub_turret, 0);
    d2da:	40 e0       	ldi	r20, 0x00	; 0
    d2dc:	65 e4       	ldi	r22, 0x45	; 69
    d2de:	79 e4       	ldi	r23, 0x49	; 73
    d2e0:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		MapSprite2(t1_shot_index, map_sub_shot, 0);
    d2e4:	40 e0       	ldi	r20, 0x00	; 0
    d2e6:	68 e4       	ldi	r22, 0x48	; 72
    d2e8:	79 e4       	ldi	r23, 0x49	; 73
    d2ea:	80 2f       	mov	r24, r16
    d2ec:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		MapSprite2(t2_index, map_sub_turret, 0);
    d2f0:	40 e0       	ldi	r20, 0x00	; 0
    d2f2:	65 e4       	ldi	r22, 0x45	; 69
    d2f4:	79 e4       	ldi	r23, 0x49	; 73
    d2f6:	81 2f       	mov	r24, r17
    d2f8:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		MapSprite2(t2_shot_index, map_sub_shot, 0);
    d2fc:	40 e0       	ldi	r20, 0x00	; 0
    d2fe:	68 e4       	ldi	r22, 0x48	; 72
    d300:	79 e4       	ldi	r23, 0x49	; 73
    d302:	8d 2f       	mov	r24, r29
    d304:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    d308:	60 e0       	ldi	r22, 0x00	; 0
    d30a:	80 91 11 0c 	lds	r24, 0x0C11
    d30e:	90 91 12 0c 	lds	r25, 0x0C12
    d312:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d316:	6f 2d       	mov	r22, r15
    d318:	80 91 11 0c 	lds	r24, 0x0C11
    d31c:	90 91 12 0c 	lds	r25, 0x0C12
    d320:	0e 94 78 5a 	call	0xb4f0	; 0xb4f0 <render_shot>
		render_tile_explosions(&tile_animations);
    d324:	88 e1       	ldi	r24, 0x18	; 24
    d326:	9c e0       	ldi	r25, 0x0C	; 12
    d328:	0e 94 a4 5a 	call	0xb548	; 0xb548 <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    d32c:	6c 2f       	mov	r22, r28
    d32e:	8b e6       	ldi	r24, 0x6B	; 107
    d330:	90 e1       	ldi	r25, 0x10	; 16
    d332:	0e 94 9a 64 	call	0xc934	; 0xc934 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    d336:	60 2f       	mov	r22, r16
    d338:	8b e6       	ldi	r24, 0x6B	; 107
    d33a:	90 e1       	ldi	r25, 0x10	; 16
    d33c:	0e 94 c3 64 	call	0xc986	; 0xc986 <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    d340:	61 2f       	mov	r22, r17
    d342:	87 e3       	ldi	r24, 0x37	; 55
    d344:	90 e1       	ldi	r25, 0x10	; 16
    d346:	0e 94 9a 64 	call	0xc934	; 0xc934 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    d34a:	6d 2f       	mov	r22, r29
    d34c:	87 e3       	ldi	r24, 0x37	; 55
    d34e:	90 e1       	ldi	r25, 0x10	; 16
    d350:	0e 94 c3 64 	call	0xc986	; 0xc986 <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    d354:	40 e6       	ldi	r20, 0x60	; 96
    d356:	68 e2       	ldi	r22, 0x28	; 40
    d358:	8b e6       	ldi	r24, 0x6B	; 107
    d35a:	90 e1       	ldi	r25, 0x10	; 16
    d35c:	0e 94 ec 64 	call	0xc9d8	; 0xc9d8 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    d360:	40 ec       	ldi	r20, 0xC0	; 192
    d362:	68 e8       	ldi	r22, 0x88	; 136
    d364:	87 e3       	ldi	r24, 0x37	; 55
    d366:	90 e1       	ldi	r25, 0x10	; 16
    d368:	0e 94 ec 64 	call	0xc9d8	; 0xc9d8 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    d36c:	67 e7       	ldi	r22, 0x77	; 119
    d36e:	70 e1       	ldi	r23, 0x10	; 16
    d370:	8b e6       	ldi	r24, 0x6B	; 107
    d372:	90 e1       	ldi	r25, 0x10	; 16
    d374:	0e 94 3c 65 	call	0xca78	; 0xca78 <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    d378:	63 e4       	ldi	r22, 0x43	; 67
    d37a:	70 e1       	ldi	r23, 0x10	; 16
    d37c:	87 e3       	ldi	r24, 0x37	; 55
    d37e:	90 e1       	ldi	r25, 0x10	; 16
    d380:	0e 94 3c 65 	call	0xca78	; 0xca78 <update_turret_shot>
    d384:	7c cf       	rjmp	.-264    	; 0xd27e <update_level+0xf8>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    d386:	90 32       	cpi	r25, 0x20	; 32
    d388:	19 f4       	brne	.+6      	; 0xd390 <update_level+0x20a>
	{
		// Render
		SetSpriteVisibility(true);
    d38a:	0e 94 11 52 	call	0xa422	; 0xa422 <SetSpriteVisibility>
    d38e:	77 cf       	rjmp	.-274    	; 0xd27e <update_level+0xf8>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else
	{
		SetSpriteVisibility(true);
    d390:	0e 94 11 52 	call	0xa422	; 0xa422 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    d394:	60 e0       	ldi	r22, 0x00	; 0
    d396:	85 e3       	ldi	r24, 0x35	; 53
    d398:	9c e0       	ldi	r25, 0x0C	; 12
    d39a:	0e 94 f3 5a 	call	0xb5e6	; 0xb5e6 <tank_map>
    d39e:	f8 2e       	mov	r15, r24
		p1_shot_index = tank_map(&player2, p2_index);
    d3a0:	68 2f       	mov	r22, r24
    d3a2:	83 ea       	ldi	r24, 0xA3	; 163
    d3a4:	9f e0       	ldi	r25, 0x0F	; 15
    d3a6:	0e 94 f3 5a 	call	0xb5e6	; 0xb5e6 <tank_map>
    d3aa:	08 2f       	mov	r16, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    d3ac:	68 2f       	mov	r22, r24
    d3ae:	85 e3       	ldi	r24, 0x35	; 53
    d3b0:	9c e0       	ldi	r25, 0x0C	; 12
    d3b2:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <shot_map>
    d3b6:	18 2f       	mov	r17, r24
		shot_map(&player2, p2_shot_index);
    d3b8:	68 2f       	mov	r22, r24
    d3ba:	83 ea       	ldi	r24, 0xA3	; 163
    d3bc:	9f e0       	ldi	r25, 0x0F	; 15
    d3be:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    d3c2:	40 91 02 01 	lds	r20, 0x0102
    d3c6:	6f e0       	ldi	r22, 0x0F	; 15
    d3c8:	85 e3       	ldi	r24, 0x35	; 53
    d3ca:	9c e0       	ldi	r25, 0x0C	; 12
    d3cc:	0e 94 27 5a 	call	0xb44e	; 0xb44e <render_banter>
    d3d0:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    d3d4:	40 91 01 01 	lds	r20, 0x0101
    d3d8:	60 e0       	ldi	r22, 0x00	; 0
    d3da:	83 ea       	ldi	r24, 0xA3	; 163
    d3dc:	9f e0       	ldi	r25, 0x0F	; 15
    d3de:	0e 94 27 5a 	call	0xb44e	; 0xb44e <render_banter>
    d3e2:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    d3e6:	60 e0       	ldi	r22, 0x00	; 0
    d3e8:	85 e3       	ldi	r24, 0x35	; 53
    d3ea:	9c e0       	ldi	r25, 0x0C	; 12
    d3ec:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <render_player>
		render_player(&player2, p2_index);
    d3f0:	6f 2d       	mov	r22, r15
    d3f2:	83 ea       	ldi	r24, 0xA3	; 163
    d3f4:	9f e0       	ldi	r25, 0x0F	; 15
    d3f6:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <render_player>
		render_shot(&player1, p1_shot_index);
    d3fa:	60 2f       	mov	r22, r16
    d3fc:	85 e3       	ldi	r24, 0x35	; 53
    d3fe:	9c e0       	ldi	r25, 0x0C	; 12
    d400:	0e 94 78 5a 	call	0xb4f0	; 0xb4f0 <render_shot>
		render_shot(&player2, p2_shot_index);
    d404:	61 2f       	mov	r22, r17
    d406:	83 ea       	ldi	r24, 0xA3	; 163
    d408:	9f e0       	ldi	r25, 0x0F	; 15
    d40a:	0e 94 78 5a 	call	0xb4f0	; 0xb4f0 <render_shot>
		render_tile_explosions(&tile_animations);
    d40e:	88 e1       	ldi	r24, 0x18	; 24
    d410:	9c e0       	ldi	r25, 0x0C	; 12
    d412:	0e 94 a4 5a 	call	0xb548	; 0xb548 <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    d416:	80 91 15 0c 	lds	r24, 0x0C15
    d41a:	90 91 16 0c 	lds	r25, 0x0C16
    d41e:	89 3e       	cpi	r24, 0xE9	; 233
    d420:	93 40       	sbci	r25, 0x03	; 3
    d422:	88 f0       	brcs	.+34     	; 0xd446 <update_level+0x2c0>
    d424:	80 91 35 10 	lds	r24, 0x1035
    d428:	90 91 36 10 	lds	r25, 0x1036
    d42c:	18 16       	cp	r1, r24
    d42e:	19 06       	cpc	r1, r25
    d430:	54 f4       	brge	.+20     	; 0xd446 <update_level+0x2c0>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    d432:	89 e2       	ldi	r24, 0x29	; 41
    d434:	90 e1       	ldi	r25, 0x10	; 16
    d436:	0e 94 d9 5a 	call	0xb5b2	; 0xb5b2 <render_scope>
    d43a:	88 23       	and	r24, r24
    d43c:	21 f0       	breq	.+8      	; 0xd446 <update_level+0x2c0>
    d43e:	10 92 16 0c 	sts	0x0C16, r1
    d442:	10 92 15 0c 	sts	0x0C15, r1
		}
		game.scope_counter++;
    d446:	80 91 15 0c 	lds	r24, 0x0C15
    d44a:	90 91 16 0c 	lds	r25, 0x0C16
    d44e:	01 96       	adiw	r24, 0x01	; 1
    d450:	90 93 16 0c 	sts	0x0C16, r25
    d454:	80 93 15 0c 	sts	0x0C15, r24
		
		// Update
		update_level_helper(p1, &player1, p2, &player2, 0, 15);
    d458:	8f e0       	ldi	r24, 0x0F	; 15
    d45a:	e8 2e       	mov	r14, r24
    d45c:	00 e0       	ldi	r16, 0x00	; 0
    d45e:	23 ea       	ldi	r18, 0xA3	; 163
    d460:	3f e0       	ldi	r19, 0x0F	; 15
    d462:	ae 01       	movw	r20, r28
    d464:	65 e3       	ldi	r22, 0x35	; 53
    d466:	7c e0       	ldi	r23, 0x0C	; 12
    d468:	c6 01       	movw	r24, r12
    d46a:	0e 94 33 68 	call	0xd066	; 0xd066 <update_level_helper>
		update_level_helper(p2, &player2, p1, &player1, 15, 0);
    d46e:	e1 2c       	mov	r14, r1
    d470:	0f e0       	ldi	r16, 0x0F	; 15
    d472:	25 e3       	ldi	r18, 0x35	; 53
    d474:	3c e0       	ldi	r19, 0x0C	; 12
    d476:	a6 01       	movw	r20, r12
    d478:	63 ea       	ldi	r22, 0xA3	; 163
    d47a:	7f e0       	ldi	r23, 0x0F	; 15
    d47c:	ce 01       	movw	r24, r28
    d47e:	0e 94 33 68 	call	0xd066	; 0xd066 <update_level_helper>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    d482:	60 e0       	ldi	r22, 0x00	; 0
    d484:	85 e3       	ldi	r24, 0x35	; 53
    d486:	9c e0       	ldi	r25, 0x0C	; 12
    d488:	0e 94 3b 61 	call	0xc276	; 0xc276 <collision_detect_player>
    d48c:	88 23       	and	r24, r24
    d48e:	41 f0       	breq	.+16     	; 0xd4a0 <update_level+0x31a>
    d490:	2f e0       	ldi	r18, 0x0F	; 15
    d492:	40 e0       	ldi	r20, 0x00	; 0
    d494:	63 ea       	ldi	r22, 0xA3	; 163
    d496:	7f e0       	ldi	r23, 0x0F	; 15
    d498:	85 e3       	ldi	r24, 0x35	; 53
    d49a:	9c e0       	ldi	r25, 0x0C	; 12
    d49c:	0e 94 1a 61 	call	0xc234	; 0xc234 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    d4a0:	6f e0       	ldi	r22, 0x0F	; 15
    d4a2:	83 ea       	ldi	r24, 0xA3	; 163
    d4a4:	9f e0       	ldi	r25, 0x0F	; 15
    d4a6:	0e 94 3b 61 	call	0xc276	; 0xc276 <collision_detect_player>
    d4aa:	88 23       	and	r24, r24
    d4ac:	41 f0       	breq	.+16     	; 0xd4be <update_level+0x338>
    d4ae:	20 e0       	ldi	r18, 0x00	; 0
    d4b0:	4f e0       	ldi	r20, 0x0F	; 15
    d4b2:	65 e3       	ldi	r22, 0x35	; 53
    d4b4:	7c e0       	ldi	r23, 0x0C	; 12
    d4b6:	83 ea       	ldi	r24, 0xA3	; 163
    d4b8:	9f e0       	ldi	r25, 0x0F	; 15
    d4ba:	0e 94 1a 61 	call	0xc234	; 0xc234 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    d4be:	80 91 17 0c 	lds	r24, 0x0C17
    d4c2:	83 30       	cpi	r24, 0x03	; 3
    d4c4:	69 f4       	brne	.+26     	; 0xd4e0 <update_level+0x35a>
	{
		demo_counter++;
    d4c6:	80 91 35 0b 	lds	r24, 0x0B35
    d4ca:	90 91 36 0b 	lds	r25, 0x0B36
    d4ce:	01 96       	adiw	r24, 0x01	; 1
    d4d0:	90 93 36 0b 	sts	0x0B36, r25
    d4d4:	80 93 35 0b 	sts	0x0B35, r24
		held = ReadJoypad(0);
    d4d8:	80 e0       	ldi	r24, 0x00	; 0
    d4da:	0e 94 f5 45 	call	0x8bea	; 0x8bea <ReadJoypad>
    d4de:	02 c0       	rjmp	.+4      	; 0xd4e4 <update_level+0x35e>
	char p2_shot_index = 0;
	char t1_index = 0;
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;
    d4e0:	80 e0       	ldi	r24, 0x00	; 0
    d4e2:	90 e0       	ldi	r25, 0x00	; 0
	if (game.selection == CPUVCPU) 
	{
		demo_counter++;
		held = ReadJoypad(0);
	}
	if (game.selection == CPUVCPU &&
    d4e4:	20 91 17 0c 	lds	r18, 0x0C17
    d4e8:	23 30       	cpi	r18, 0x03	; 3
    d4ea:	e9 f4       	brne	.+58     	; 0xd526 <update_level+0x3a0>
    d4ec:	8f 70       	andi	r24, 0x0F	; 15
    d4ee:	9e 70       	andi	r25, 0x0E	; 14
	    (((held & BTN_X) ||
		 (held & BTN_START) ||
		 (held & BTN_SL) ||
		 (held & BTN_SR) ||
		 (held & BTN_SELECT) ||
		 (held & BTN_Y) ||
    d4f0:	89 2b       	or	r24, r25
    d4f2:	39 f4       	brne	.+14     	; 0xd502 <update_level+0x37c>
		 (held & BTN_B)) ||
    d4f4:	80 91 35 0b 	lds	r24, 0x0B35
    d4f8:	90 91 36 0b 	lds	r25, 0x0B36
    d4fc:	88 30       	cpi	r24, 0x08	; 8
    d4fe:	97 40       	sbci	r25, 0x07	; 7
    d500:	90 f0       	brcs	.+36     	; 0xd526 <update_level+0x3a0>
		demo_counter >= DEMO_LENGTH)
		)
	{
		demo_counter = 0;
    d502:	10 92 36 0b 	sts	0x0B36, r1
    d506:	10 92 35 0b 	sts	0x0B35, r1
		fade_through();
    d50a:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <fade_through>
		init_game_state();
    d50e:	0e 94 25 58 	call	0xb04a	; 0xb04a <init_game_state>
		load_splash();
	}
}
    d512:	df 91       	pop	r29
    d514:	cf 91       	pop	r28
    d516:	1f 91       	pop	r17
    d518:	0f 91       	pop	r16
    d51a:	ff 90       	pop	r15
    d51c:	ef 90       	pop	r14
    d51e:	df 90       	pop	r13
    d520:	cf 90       	pop	r12
		)
	{
		demo_counter = 0;
		fade_through();
		init_game_state();
		load_splash();
    d522:	0c 94 a7 65 	jmp	0xcb4e	; 0xcb4e <load_splash>
	}
}
    d526:	df 91       	pop	r29
    d528:	cf 91       	pop	r28
    d52a:	1f 91       	pop	r17
    d52c:	0f 91       	pop	r16
    d52e:	ff 90       	pop	r15
    d530:	ef 90       	pop	r14
    d532:	df 90       	pop	r13
    d534:	cf 90       	pop	r12
    d536:	08 95       	ret

0000d538 <update_tank_rank>:
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    d538:	cf 93       	push	r28
    d53a:	df 93       	push	r29
    d53c:	ec 01       	movw	r28, r24
	static u16 tank_rank_counter = 0;
	
	// Update
	if (p1->pressed & BTN_X)
    d53e:	88 81       	ld	r24, Y
    d540:	99 81       	ldd	r25, Y+1	; 0x01
    d542:	91 ff       	sbrs	r25, 1
    d544:	0e c0       	rjmp	.+28     	; 0xd562 <update_tank_rank+0x2a>
	{
		tank_rank_counter = 0;
    d546:	10 92 31 0b 	sts	0x0B31, r1
    d54a:	10 92 30 0b 	sts	0x0B30, r1
		SFX_NAVIGATE;
    d54e:	2f ef       	ldi	r18, 0xFF	; 255
    d550:	47 e1       	ldi	r20, 0x17	; 23
    d552:	65 e0       	ldi	r22, 0x05	; 5
    d554:	84 e0       	ldi	r24, 0x04	; 4
    d556:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
		fade_through();
    d55a:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <fade_through>
		load_splash();
    d55e:	0e 94 a7 65 	call	0xcb4e	; 0xcb4e <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    d562:	8c 81       	ldd	r24, Y+4	; 0x04
    d564:	9d 81       	ldd	r25, Y+5	; 0x05
    d566:	92 ff       	sbrs	r25, 2
    d568:	1f c0       	rjmp	.+62     	; 0xd5a8 <update_tank_rank+0x70>
    d56a:	8e 81       	ldd	r24, Y+6	; 0x06
    d56c:	8f 3f       	cpi	r24, 0xFF	; 255
    d56e:	e1 f4       	brne	.+56     	; 0xd5a8 <update_tank_rank+0x70>
	{
		tank_rank_counter = 0;
    d570:	10 92 31 0b 	sts	0x0B31, r1
    d574:	10 92 30 0b 	sts	0x0B30, r1
	    SFX_NAVIGATE;
    d578:	2f ef       	ldi	r18, 0xFF	; 255
    d57a:	47 e1       	ldi	r20, 0x17	; 23
    d57c:	65 e0       	ldi	r22, 0x05	; 5
    d57e:	84 e0       	ldi	r24, 0x04	; 4
    d580:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
	    init_scores(&scores);
    d584:	84 ec       	ldi	r24, 0xC4	; 196
    d586:	9b e0       	ldi	r25, 0x0B	; 11
    d588:	0e 94 c1 56 	call	0xad82	; 0xad82 <init_scores>
	    init_handles(&handles);
    d58c:	8b ee       	ldi	r24, 0xEB	; 235
    d58e:	9b e0       	ldi	r25, 0x0B	; 11
    d590:	0e 94 cd 56 	call	0xad9a	; 0xad9a <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d594:	84 ec       	ldi	r24, 0xC4	; 196
    d596:	9b e0       	ldi	r25, 0x0B	; 11
    d598:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <EepromWriteBlock>
    d59c:	8b ee       	ldi	r24, 0xEB	; 235
    d59e:	9b e0       	ldi	r25, 0x0B	; 11
    d5a0:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    d5a4:	0e 94 d7 65 	call	0xcbae	; 0xcbae <load_tank_rank>
	}
	
	if (tank_rank_counter > TANK_RANK_LENGTH)
    d5a8:	80 91 30 0b 	lds	r24, 0x0B30
    d5ac:	90 91 31 0b 	lds	r25, 0x0B31
    d5b0:	85 38       	cpi	r24, 0x85	; 133
    d5b2:	93 40       	sbci	r25, 0x03	; 3
    d5b4:	70 f0       	brcs	.+28     	; 0xd5d2 <update_tank_rank+0x9a>
	{
		tank_rank_counter = 0;
    d5b6:	10 92 31 0b 	sts	0x0B31, r1
    d5ba:	10 92 30 0b 	sts	0x0B30, r1
		SFX_NAVIGATE;
    d5be:	2f ef       	ldi	r18, 0xFF	; 255
    d5c0:	47 e1       	ldi	r20, 0x17	; 23
    d5c2:	65 e0       	ldi	r22, 0x05	; 5
    d5c4:	84 e0       	ldi	r24, 0x04	; 4
    d5c6:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
		fade_through();
    d5ca:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <fade_through>
		load_splash();
    d5ce:	0e 94 a7 65 	call	0xcb4e	; 0xcb4e <load_splash>
	}
	tank_rank_counter++;
    d5d2:	80 91 30 0b 	lds	r24, 0x0B30
    d5d6:	90 91 31 0b 	lds	r25, 0x0B31
    d5da:	01 96       	adiw	r24, 0x01	; 1
    d5dc:	90 93 31 0b 	sts	0x0B31, r25
    d5e0:	80 93 30 0b 	sts	0x0B30, r24
}
    d5e4:	df 91       	pop	r29
    d5e6:	cf 91       	pop	r28
    d5e8:	08 95       	ret

0000d5ea <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    d5ea:	0f 93       	push	r16
    d5ec:	1f 93       	push	r17
    d5ee:	cf 93       	push	r28
    d5f0:	df 93       	push	r29
    d5f2:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    d5f4:	fb 01       	movw	r30, r22
    d5f6:	20 81       	ld	r18, Z
    d5f8:	31 81       	ldd	r19, Z+1	; 0x01
    d5fa:	f9 01       	movw	r30, r18
    d5fc:	e0 71       	andi	r30, 0x10	; 16
    d5fe:	ff 27       	eor	r31, r31
    d600:	24 ff       	sbrs	r18, 4
    d602:	09 c0       	rjmp	.+18     	; 0xd616 <_handle_select_helper+0x2c>
    d604:	8d 81       	ldd	r24, Y+5	; 0x05
    d606:	81 11       	cpse	r24, r1
    d608:	06 c0       	rjmp	.+12     	; 0xd616 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    d60a:	88 81       	ld	r24, Y
    d60c:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d60e:	87 ff       	sbrs	r24, 7
    d610:	0f c0       	rjmp	.+30     	; 0xd630 <_handle_select_helper+0x46>
    d612:	18 82       	st	Y, r1
    d614:	25 c0       	rjmp	.+74     	; 0xd660 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    d616:	b9 01       	movw	r22, r18
    d618:	60 72       	andi	r22, 0x20	; 32
    d61a:	77 27       	eor	r23, r23
    d61c:	25 ff       	sbrs	r18, 5
    d61e:	0a c0       	rjmp	.+20     	; 0xd634 <_handle_select_helper+0x4a>
    d620:	8d 81       	ldd	r24, Y+5	; 0x05
    d622:	81 11       	cpse	r24, r1
    d624:	07 c0       	rjmp	.+14     	; 0xd634 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    d626:	88 81       	ld	r24, Y
    d628:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d62a:	89 30       	cpi	r24, 0x09	; 9
    d62c:	0c f0       	brlt	.+2      	; 0xd630 <_handle_select_helper+0x46>
    d62e:	88 e0       	ldi	r24, 0x08	; 8
    d630:	88 83       	st	Y, r24
    d632:	16 c0       	rjmp	.+44     	; 0xd660 <_handle_select_helper+0x76>
    d634:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    d636:	a9 01       	movw	r20, r18
    d638:	44 27       	eor	r20, r20
    d63a:	51 70       	andi	r21, 0x01	; 1
    d63c:	30 ff       	sbrs	r19, 0
    d63e:	1a c0       	rjmp	.+52     	; 0xd674 <_handle_select_helper+0x8a>
    d640:	ad 81       	ldd	r26, Y+5	; 0x05
    d642:	a1 11       	cpse	r26, r1
    d644:	17 c0       	rjmp	.+46     	; 0xd674 <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    d646:	81 e0       	ldi	r24, 0x01	; 1
    d648:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    d64a:	69 91       	ld	r22, Y+
    d64c:	f3 e0       	ldi	r31, 0x03	; 3
    d64e:	6f 02       	muls	r22, r31
    d650:	b0 01       	movw	r22, r0
    d652:	11 24       	eor	r1, r1
    d654:	63 51       	subi	r22, 0x13	; 19
    d656:	74 4f       	sbci	r23, 0xF4	; 244
    d658:	43 e0       	ldi	r20, 0x03	; 3
    d65a:	ce 01       	movw	r24, r28
    d65c:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
		SFX_NAVIGATE;
    d660:	2f ef       	ldi	r18, 0xFF	; 255
    d662:	47 e1       	ldi	r20, 0x17	; 23
    d664:	65 e0       	ldi	r22, 0x05	; 5
    d666:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    d668:	df 91       	pop	r29
    d66a:	cf 91       	pop	r28
    d66c:	1f 91       	pop	r17
    d66e:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    d670:	0c 94 5b 49 	jmp	0x92b6	; 0x92b6 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    d674:	27 ff       	sbrs	r18, 7
    d676:	09 c0       	rjmp	.+18     	; 0xd68a <_handle_select_helper+0xa0>
    d678:	ad 81       	ldd	r26, Y+5	; 0x05
    d67a:	a1 30       	cpi	r26, 0x01	; 1
    d67c:	31 f4       	brne	.+12     	; 0xd68a <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    d67e:	8c 81       	ldd	r24, Y+4	; 0x04
    d680:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    d682:	83 30       	cpi	r24, 0x03	; 3
    d684:	5c f0       	brlt	.+22     	; 0xd69c <_handle_select_helper+0xb2>
    d686:	82 e0       	ldi	r24, 0x02	; 2
    d688:	09 c0       	rjmp	.+18     	; 0xd69c <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    d68a:	26 ff       	sbrs	r18, 6
    d68c:	0b c0       	rjmp	.+22     	; 0xd6a4 <_handle_select_helper+0xba>
    d68e:	ed 81       	ldd	r30, Y+5	; 0x05
    d690:	e1 30       	cpi	r30, 0x01	; 1
    d692:	41 f5       	brne	.+80     	; 0xd6e4 <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    d694:	8c 81       	ldd	r24, Y+4	; 0x04
    d696:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    d698:	87 fd       	sbrc	r24, 7
    d69a:	02 c0       	rjmp	.+4      	; 0xd6a0 <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    d69c:	8c 83       	std	Y+4, r24	; 0x04
    d69e:	e0 cf       	rjmp	.-64     	; 0xd660 <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    d6a0:	1c 82       	std	Y+4, r1	; 0x04
    d6a2:	de cf       	rjmp	.-68     	; 0xd660 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    d6a4:	ef 2b       	or	r30, r31
    d6a6:	69 f0       	breq	.+26     	; 0xd6c2 <_handle_select_helper+0xd8>
    d6a8:	8d 81       	ldd	r24, Y+5	; 0x05
    d6aa:	81 30       	cpi	r24, 0x01	; 1
    d6ac:	09 f0       	breq	.+2      	; 0xd6b0 <_handle_select_helper+0xc6>
    d6ae:	43 c0       	rjmp	.+134    	; 0xd736 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    d6b0:	8c 81       	ldd	r24, Y+4	; 0x04
    d6b2:	c8 0f       	add	r28, r24
    d6b4:	d1 1d       	adc	r29, r1
    d6b6:	99 81       	ldd	r25, Y+1	; 0x01
    d6b8:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    d6ba:	91 34       	cpi	r25, 0x41	; 65
    d6bc:	70 f4       	brcc	.+28     	; 0xd6da <_handle_select_helper+0xf0>
    d6be:	81 e4       	ldi	r24, 0x41	; 65
    d6c0:	0f c0       	rjmp	.+30     	; 0xd6e0 <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d6c2:	67 2b       	or	r22, r23
    d6c4:	89 f0       	breq	.+34     	; 0xd6e8 <_handle_select_helper+0xfe>
    d6c6:	8d 81       	ldd	r24, Y+5	; 0x05
    d6c8:	81 30       	cpi	r24, 0x01	; 1
    d6ca:	a9 f5       	brne	.+106    	; 0xd736 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    d6cc:	8c 81       	ldd	r24, Y+4	; 0x04
    d6ce:	c8 0f       	add	r28, r24
    d6d0:	d1 1d       	adc	r29, r1
    d6d2:	99 81       	ldd	r25, Y+1	; 0x01
    d6d4:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d6d6:	9b 35       	cpi	r25, 0x5B	; 91
    d6d8:	10 f4       	brcc	.+4      	; 0xd6de <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    d6da:	99 83       	std	Y+1, r25	; 0x01
    d6dc:	c1 cf       	rjmp	.-126    	; 0xd660 <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d6de:	8a e5       	ldi	r24, 0x5A	; 90
    d6e0:	89 83       	std	Y+1, r24	; 0x01
    d6e2:	be cf       	rjmp	.-132    	; 0xd660 <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d6e4:	67 2b       	or	r22, r23
    d6e6:	39 f5       	brne	.+78     	; 0xd736 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    d6e8:	45 2b       	or	r20, r21
    d6ea:	29 f1       	breq	.+74     	; 0xd736 <_handle_select_helper+0x14c>
    d6ec:	4d 81       	ldd	r20, Y+5	; 0x05
    d6ee:	41 30       	cpi	r20, 0x01	; 1
    d6f0:	11 f5       	brne	.+68     	; 0xd736 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    d6f2:	fe 01       	movw	r30, r28
    d6f4:	21 91       	ld	r18, Z+
    d6f6:	8f 01       	movw	r16, r30
    d6f8:	fc 01       	movw	r30, r24
    d6fa:	23 87       	std	Z+11, r18	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    d6fc:	43 e0       	ldi	r20, 0x03	; 3
    d6fe:	b8 01       	movw	r22, r16
    d700:	0c 96       	adiw	r24, 0x0c	; 12
    d702:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    d706:	88 81       	ld	r24, Y
    d708:	f3 e0       	ldi	r31, 0x03	; 3
    d70a:	8f 02       	muls	r24, r31
    d70c:	c0 01       	movw	r24, r0
    d70e:	11 24       	eor	r1, r1
    d710:	43 e0       	ldi	r20, 0x03	; 3
    d712:	b8 01       	movw	r22, r16
    d714:	83 51       	subi	r24, 0x13	; 19
    d716:	94 4f       	sbci	r25, 0xF4	; 244
    d718:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
		SFX_NAVIGATE;
    d71c:	2f ef       	ldi	r18, 0xFF	; 255
    d71e:	47 e1       	ldi	r20, 0x17	; 23
    d720:	65 e0       	ldi	r22, 0x05	; 5
    d722:	84 e0       	ldi	r24, 0x04	; 4
    d724:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d728:	8b ee       	ldi	r24, 0xEB	; 235
    d72a:	9b e0       	ldi	r25, 0x0B	; 11
    d72c:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    d730:	82 e0       	ldi	r24, 0x02	; 2
    d732:	8d 83       	std	Y+5, r24	; 0x05
    d734:	1a c0       	rjmp	.+52     	; 0xd76a <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    d736:	31 ff       	sbrs	r19, 1
    d738:	18 c0       	rjmp	.+48     	; 0xd76a <_handle_select_helper+0x180>
    d73a:	8d 81       	ldd	r24, Y+5	; 0x05
    d73c:	81 30       	cpi	r24, 0x01	; 1
    d73e:	11 f4       	brne	.+4      	; 0xd744 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    d740:	1d 82       	std	Y+5, r1	; 0x05
    d742:	8e cf       	rjmp	.-228    	; 0xd660 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    d744:	82 30       	cpi	r24, 0x02	; 2
    d746:	19 f4       	brne	.+6      	; 0xd74e <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    d748:	81 e0       	ldi	r24, 0x01	; 1
    d74a:	8d 83       	std	Y+5, r24	; 0x05
    d74c:	89 cf       	rjmp	.-238    	; 0xd660 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    d74e:	2f ef       	ldi	r18, 0xFF	; 255
    d750:	47 e1       	ldi	r20, 0x17	; 23
    d752:	65 e0       	ldi	r22, 0x05	; 5
    d754:	84 e0       	ldi	r24, 0x04	; 4
    d756:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
		fade_through();
    d75a:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <fade_through>
		load_splash();
	}
}
    d75e:	df 91       	pop	r29
    d760:	cf 91       	pop	r28
    d762:	1f 91       	pop	r17
    d764:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    d766:	0c 94 a7 65 	jmp	0xcb4e	; 0xcb4e <load_splash>
	}
}
    d76a:	df 91       	pop	r29
    d76c:	cf 91       	pop	r28
    d76e:	1f 91       	pop	r17
    d770:	0f 91       	pop	r16
    d772:	08 95       	ret

0000d774 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    d774:	af 92       	push	r10
    d776:	bf 92       	push	r11
    d778:	cf 92       	push	r12
    d77a:	df 92       	push	r13
    d77c:	ef 92       	push	r14
    d77e:	ff 92       	push	r15
    d780:	0f 93       	push	r16
    d782:	1f 93       	push	r17
    d784:	cf 93       	push	r28
    d786:	df 93       	push	r29
    d788:	00 d0       	rcall	.+0      	; 0xd78a <_handle_select_render_helper+0x16>
    d78a:	1f 92       	push	r1
    d78c:	cd b7       	in	r28, 0x3d	; 61
    d78e:	de b7       	in	r29, 0x3e	; 62
    d790:	7c 01       	movw	r14, r24
    d792:	b4 2e       	mov	r11, r20
    d794:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    d796:	80 e2       	ldi	r24, 0x20	; 32
    d798:	89 83       	std	Y+1, r24	; 0x01
    d79a:	8a 83       	std	Y+2, r24	; 0x02
    d79c:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    d79e:	f7 01       	movw	r30, r14
    d7a0:	85 81       	ldd	r24, Z+5	; 0x05
    d7a2:	81 11       	cpse	r24, r1
    d7a4:	1d c0       	rjmp	.+58     	; 0xd7e0 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    d7a6:	40 e0       	ldi	r20, 0x00	; 0
    d7a8:	61 e5       	ldi	r22, 0x51	; 81
    d7aa:	79 e4       	ldi	r23, 0x49	; 73
    d7ac:	82 2f       	mov	r24, r18
    d7ae:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d7b2:	40 e0       	ldi	r20, 0x00	; 0
    d7b4:	63 e9       	ldi	r22, 0x93	; 147
    d7b6:	79 e4       	ldi	r23, 0x49	; 73
    d7b8:	81 e0       	ldi	r24, 0x01	; 1
    d7ba:	81 0f       	add	r24, r17
    d7bc:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    d7c0:	f7 01       	movw	r30, r14
    d7c2:	40 81       	ld	r20, Z
    d7c4:	44 0f       	add	r20, r20
    d7c6:	44 0f       	add	r20, r20
    d7c8:	44 0f       	add	r20, r20
    d7ca:	40 5c       	subi	r20, 0xC0	; 192
    d7cc:	01 e0       	ldi	r16, 0x01	; 1
    d7ce:	21 e0       	ldi	r18, 0x01	; 1
    d7d0:	6b 2d       	mov	r22, r11
    d7d2:	66 0f       	add	r22, r22
    d7d4:	66 0f       	add	r22, r22
    d7d6:	66 0f       	add	r22, r22
    d7d8:	81 2f       	mov	r24, r17
    d7da:	0e 94 3a 53 	call	0xa674	; 0xa674 <MoveSprite>
    d7de:	6f c0       	rjmp	.+222    	; 0xd8be <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    d7e0:	81 30       	cpi	r24, 0x01	; 1
    d7e2:	09 f0       	breq	.+2      	; 0xd7e6 <_handle_select_render_helper+0x72>
    d7e4:	44 c0       	rjmp	.+136    	; 0xd86e <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    d7e6:	40 e0       	ldi	r20, 0x00	; 0
    d7e8:	6e e4       	ldi	r22, 0x4E	; 78
    d7ea:	79 e4       	ldi	r23, 0x49	; 73
    d7ec:	82 2f       	mov	r24, r18
    d7ee:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    d7f2:	aa 24       	eor	r10, r10
    d7f4:	a3 94       	inc	r10
    d7f6:	a1 0e       	add	r10, r17
    d7f8:	40 e0       	ldi	r20, 0x00	; 0
    d7fa:	6b e4       	ldi	r22, 0x4B	; 75
    d7fc:	79 e4       	ldi	r23, 0x49	; 73
    d7fe:	8a 2d       	mov	r24, r10
    d800:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    d804:	cb 2c       	mov	r12, r11
    d806:	d1 2c       	mov	r13, r1
    d808:	f5 e0       	ldi	r31, 0x05	; 5
    d80a:	cf 0e       	add	r12, r31
    d80c:	d1 1c       	adc	r13, r1
    d80e:	f7 01       	movw	r30, r14
    d810:	40 81       	ld	r20, Z
    d812:	44 0f       	add	r20, r20
    d814:	44 0f       	add	r20, r20
    d816:	44 0f       	add	r20, r20
    d818:	48 5c       	subi	r20, 0xC8	; 200
    d81a:	84 81       	ldd	r24, Z+4	; 0x04
    d81c:	b6 01       	movw	r22, r12
    d81e:	68 0f       	add	r22, r24
    d820:	71 1d       	adc	r23, r1
    d822:	87 fd       	sbrc	r24, 7
    d824:	7a 95       	dec	r23
    d826:	66 0f       	add	r22, r22
    d828:	66 0f       	add	r22, r22
    d82a:	66 0f       	add	r22, r22
    d82c:	01 e0       	ldi	r16, 0x01	; 1
    d82e:	21 e0       	ldi	r18, 0x01	; 1
    d830:	81 2f       	mov	r24, r17
    d832:	0e 94 3a 53 	call	0xa674	; 0xa674 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    d836:	f7 01       	movw	r30, r14
    d838:	40 81       	ld	r20, Z
    d83a:	44 0f       	add	r20, r20
    d83c:	44 0f       	add	r20, r20
    d83e:	44 0f       	add	r20, r20
    d840:	48 5b       	subi	r20, 0xB8	; 184
    d842:	84 81       	ldd	r24, Z+4	; 0x04
    d844:	c8 0e       	add	r12, r24
    d846:	d1 1c       	adc	r13, r1
    d848:	87 fd       	sbrc	r24, 7
    d84a:	da 94       	dec	r13
    d84c:	6c 2d       	mov	r22, r12
    d84e:	66 0f       	add	r22, r22
    d850:	66 0f       	add	r22, r22
    d852:	66 0f       	add	r22, r22
    d854:	21 e0       	ldi	r18, 0x01	; 1
    d856:	8a 2d       	mov	r24, r10
    d858:	0e 94 3a 53 	call	0xa674	; 0xa674 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    d85c:	43 e0       	ldi	r20, 0x03	; 3
    d85e:	b7 01       	movw	r22, r14
    d860:	6f 5f       	subi	r22, 0xFF	; 255
    d862:	7f 4f       	sbci	r23, 0xFF	; 255
    d864:	ce 01       	movw	r24, r28
    d866:	01 96       	adiw	r24, 0x01	; 1
    d868:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
    d86c:	28 c0       	rjmp	.+80     	; 0xd8be <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    d86e:	82 30       	cpi	r24, 0x02	; 2
    d870:	31 f5       	brne	.+76     	; 0xd8be <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    d872:	c4 2e       	mov	r12, r20
    d874:	d1 2c       	mov	r13, r1
    d876:	48 e2       	ldi	r20, 0x28	; 40
    d878:	65 e0       	ldi	r22, 0x05	; 5
    d87a:	70 e0       	ldi	r23, 0x00	; 0
    d87c:	c6 01       	movw	r24, r12
    d87e:	06 96       	adiw	r24, 0x06	; 6
    d880:	0e 94 04 54 	call	0xa808	; 0xa808 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    d884:	23 e0       	ldi	r18, 0x03	; 3
    d886:	a7 01       	movw	r20, r14
    d888:	4f 5f       	subi	r20, 0xFF	; 255
    d88a:	5f 4f       	sbci	r21, 0xFF	; 255
    d88c:	65 e0       	ldi	r22, 0x05	; 5
    d88e:	87 e0       	ldi	r24, 0x07	; 7
    d890:	8b 0d       	add	r24, r11
    d892:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    d896:	49 e2       	ldi	r20, 0x29	; 41
    d898:	65 e0       	ldi	r22, 0x05	; 5
    d89a:	70 e0       	ldi	r23, 0x00	; 0
    d89c:	c6 01       	movw	r24, r12
    d89e:	0a 96       	adiw	r24, 0x0a	; 10
    d8a0:	0e 94 04 54 	call	0xa808	; 0xa808 <PrintChar>
		MapSprite2(idx, map_none, 0);
    d8a4:	40 e0       	ldi	r20, 0x00	; 0
    d8a6:	63 e9       	ldi	r22, 0x93	; 147
    d8a8:	79 e4       	ldi	r23, 0x49	; 73
    d8aa:	81 2f       	mov	r24, r17
    d8ac:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d8b0:	40 e0       	ldi	r20, 0x00	; 0
    d8b2:	63 e9       	ldi	r22, 0x93	; 147
    d8b4:	79 e4       	ldi	r23, 0x49	; 73
    d8b6:	81 e0       	ldi	r24, 0x01	; 1
    d8b8:	81 0f       	add	r24, r17
    d8ba:	0e 94 e8 52 	call	0xa5d0	; 0xa5d0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    d8be:	f7 01       	movw	r30, r14
    d8c0:	60 81       	ld	r22, Z
    d8c2:	68 5f       	subi	r22, 0xF8	; 248
    d8c4:	23 e0       	ldi	r18, 0x03	; 3
    d8c6:	ae 01       	movw	r20, r28
    d8c8:	4f 5f       	subi	r20, 0xFF	; 255
    d8ca:	5f 4f       	sbci	r21, 0xFF	; 255
    d8cc:	85 e0       	ldi	r24, 0x05	; 5
    d8ce:	8b 0d       	add	r24, r11
    d8d0:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <LBPrintStr>
}
    d8d4:	0f 90       	pop	r0
    d8d6:	0f 90       	pop	r0
    d8d8:	0f 90       	pop	r0
    d8da:	df 91       	pop	r29
    d8dc:	cf 91       	pop	r28
    d8de:	1f 91       	pop	r17
    d8e0:	0f 91       	pop	r16
    d8e2:	ff 90       	pop	r15
    d8e4:	ef 90       	pop	r14
    d8e6:	df 90       	pop	r13
    d8e8:	cf 90       	pop	r12
    d8ea:	bf 90       	pop	r11
    d8ec:	af 90       	pop	r10
    d8ee:	08 95       	ret

0000d8f0 <load_handle_select>:

void load_handle_select()
{
    d8f0:	8f 92       	push	r8
    d8f2:	9f 92       	push	r9
    d8f4:	af 92       	push	r10
    d8f6:	bf 92       	push	r11
    d8f8:	cf 92       	push	r12
    d8fa:	df 92       	push	r13
    d8fc:	ef 92       	push	r14
    d8fe:	ff 92       	push	r15
    d900:	0f 93       	push	r16
    d902:	1f 93       	push	r17
    d904:	cf 93       	push	r28
    d906:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    d908:	82 e0       	ldi	r24, 0x02	; 2
    d90a:	80 93 0b 0c 	sts	0x0C0B, r24
	clear_sprites();
    d90e:	0e 94 7e 58 	call	0xb0fc	; 0xb0fc <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    d912:	41 ed       	ldi	r20, 0xD1	; 209
    d914:	52 e8       	ldi	r21, 0x82	; 130
    d916:	64 e0       	ldi	r22, 0x04	; 4
    d918:	83 e0       	ldi	r24, 0x03	; 3
    d91a:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
	DrawMap2(20, 4, map_blue_tank);
    d91e:	4b ec       	ldi	r20, 0xCB	; 203
    d920:	52 e8       	ldi	r21, 0x82	; 130
    d922:	64 e0       	ldi	r22, 0x04	; 4
    d924:	84 e1       	ldi	r24, 0x14	; 20
    d926:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <DrawMap2>
	Print(9, 1, (char*) strHandlesTitle);
    d92a:	4c e3       	ldi	r20, 0x3C	; 60
    d92c:	5b e0       	ldi	r21, 0x0B	; 11
    d92e:	61 e0       	ldi	r22, 0x01	; 1
    d930:	70 e0       	ldi	r23, 0x00	; 0
    d932:	89 e0       	ldi	r24, 0x09	; 9
    d934:	90 e0       	ldi	r25, 0x00	; 0
    d936:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(6, 5, (char*) strPlayer1);
    d93a:	4b e2       	ldi	r20, 0x2B	; 43
    d93c:	5b e0       	ldi	r21, 0x0B	; 11
    d93e:	65 e0       	ldi	r22, 0x05	; 5
    d940:	70 e0       	ldi	r23, 0x00	; 0
    d942:	86 e0       	ldi	r24, 0x06	; 6
    d944:	90 e0       	ldi	r25, 0x00	; 0
    d946:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(23, 5, (char*) strPlayer2);
    d94a:	48 e2       	ldi	r20, 0x28	; 40
    d94c:	5b e0       	ldi	r21, 0x0B	; 11
    d94e:	65 e0       	ldi	r22, 0x05	; 5
    d950:	70 e0       	ldi	r23, 0x00	; 0
    d952:	87 e1       	ldi	r24, 0x17	; 23
    d954:	90 e0       	ldi	r25, 0x00	; 0
    d956:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
    d95a:	8d ee       	ldi	r24, 0xED	; 237
    d95c:	e8 2e       	mov	r14, r24
    d95e:	8b e0       	ldi	r24, 0x0B	; 11
    d960:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    d962:	c0 e0       	ldi	r28, 0x00	; 0
    d964:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    d966:	93 e0       	ldi	r25, 0x03	; 3
    d968:	a9 2e       	mov	r10, r25
    d96a:	b1 2c       	mov	r11, r1
    d96c:	67 01       	movw	r12, r14
    d96e:	ce 01       	movw	r24, r28
    d970:	b5 01       	movw	r22, r10
    d972:	0e 94 b6 71 	call	0xe36c	; 0xe36c <__divmodhi4>
    d976:	4c 01       	movw	r8, r24
    d978:	8b 01       	movw	r16, r22
    d97a:	08 5f       	subi	r16, 0xF8	; 248
    d97c:	1f 4f       	sbci	r17, 0xFF	; 255
    d97e:	f7 01       	movw	r30, r14
    d980:	41 91       	ld	r20, Z+
    d982:	7f 01       	movw	r14, r30
    d984:	b8 01       	movw	r22, r16
    d986:	03 96       	adiw	r24, 0x03	; 3
    d988:	0e 94 04 54 	call	0xa808	; 0xa808 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    d98c:	f6 01       	movw	r30, r12
    d98e:	40 81       	ld	r20, Z
    d990:	b8 01       	movw	r22, r16
    d992:	c4 01       	movw	r24, r8
    d994:	44 96       	adiw	r24, 0x14	; 20
    d996:	0e 94 04 54 	call	0xa808	; 0xa808 <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    d99a:	21 96       	adiw	r28, 0x01	; 1
    d99c:	cb 31       	cpi	r28, 0x1B	; 27
    d99e:	d1 05       	cpc	r29, r1
    d9a0:	29 f7       	brne	.-54     	; 0xd96c <load_handle_select+0x7c>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
    d9a2:	4d e1       	ldi	r20, 0x1D	; 29
    d9a4:	5b e0       	ldi	r21, 0x0B	; 11
    d9a6:	65 e1       	ldi	r22, 0x15	; 21
    d9a8:	70 e0       	ldi	r23, 0x00	; 0
    d9aa:	88 e0       	ldi	r24, 0x08	; 8
    d9ac:	90 e0       	ldi	r25, 0x00	; 0
    d9ae:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(8, 22, (char*) strConfirmHandle);
    d9b2:	41 e1       	ldi	r20, 0x11	; 17
    d9b4:	5b e0       	ldi	r21, 0x0B	; 11
    d9b6:	66 e1       	ldi	r22, 0x16	; 22
    d9b8:	70 e0       	ldi	r23, 0x00	; 0
    d9ba:	88 e0       	ldi	r24, 0x08	; 8
    d9bc:	90 e0       	ldi	r25, 0x00	; 0
    d9be:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(8, 23, (char*) strCancelHandle);
    d9c2:	46 e0       	ldi	r20, 0x06	; 6
    d9c4:	5b e0       	ldi	r21, 0x0B	; 11
    d9c6:	67 e1       	ldi	r22, 0x17	; 23
    d9c8:	70 e0       	ldi	r23, 0x00	; 0
    d9ca:	88 e0       	ldi	r24, 0x08	; 8
    d9cc:	90 e0       	ldi	r25, 0x00	; 0
    d9ce:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>
	Print(8, 24, (char*) strChangeHandle);
    d9d2:	4e ed       	ldi	r20, 0xDE	; 222
    d9d4:	5a e0       	ldi	r21, 0x0A	; 10
    d9d6:	68 e1       	ldi	r22, 0x18	; 24
    d9d8:	70 e0       	ldi	r23, 0x00	; 0
    d9da:	88 e0       	ldi	r24, 0x08	; 8
    d9dc:	90 e0       	ldi	r25, 0x00	; 0
}
    d9de:	df 91       	pop	r29
    d9e0:	cf 91       	pop	r28
    d9e2:	1f 91       	pop	r17
    d9e4:	0f 91       	pop	r16
    d9e6:	ff 90       	pop	r15
    d9e8:	ef 90       	pop	r14
    d9ea:	df 90       	pop	r13
    d9ec:	cf 90       	pop	r12
    d9ee:	bf 90       	pop	r11
    d9f0:	af 90       	pop	r10
    d9f2:	9f 90       	pop	r9
    d9f4:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
	Print(8, 22, (char*) strConfirmHandle);
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
    d9f6:	0c 94 e9 53 	jmp	0xa7d2	; 0xa7d2 <Print>

0000d9fa <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    d9fa:	0f 93       	push	r16
    d9fc:	cf 93       	push	r28
    d9fe:	df 93       	push	r29
    da00:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	// Render
	switch (game.selection)
    da02:	90 91 17 0c 	lds	r25, 0x0C17
    da06:	91 30       	cpi	r25, 0x01	; 1
    da08:	41 f0       	breq	.+16     	; 0xda1a <update_splash+0x20>
    da0a:	92 30       	cpi	r25, 0x02	; 2
    da0c:	51 f0       	breq	.+20     	; 0xda22 <update_splash+0x28>
    da0e:	91 11       	cpse	r25, r1
    da10:	0f c0       	rjmp	.+30     	; 0xda30 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    da12:	01 e0       	ldi	r16, 0x01	; 1
    da14:	21 e0       	ldi	r18, 0x01	; 1
    da16:	48 e6       	ldi	r20, 0x68	; 104
    da18:	07 c0       	rjmp	.+14     	; 0xda28 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    da1a:	01 e0       	ldi	r16, 0x01	; 1
    da1c:	21 e0       	ldi	r18, 0x01	; 1
    da1e:	40 e7       	ldi	r20, 0x70	; 112
    da20:	03 c0       	rjmp	.+6      	; 0xda28 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    da22:	01 e0       	ldi	r16, 0x01	; 1
    da24:	21 e0       	ldi	r18, 0x01	; 1
    da26:	48 e7       	ldi	r20, 0x78	; 120
    da28:	60 e3       	ldi	r22, 0x30	; 48
    da2a:	80 e0       	ldi	r24, 0x00	; 0
    da2c:	0e 94 3a 53 	call	0xa674	; 0xa674 <MoveSprite>
			break;
	}
	Print(9, 21, (char*) strSelectHandle);
    da30:	4d e1       	ldi	r20, 0x1D	; 29
    da32:	5b e0       	ldi	r21, 0x0B	; 11
    da34:	65 e1       	ldi	r22, 0x15	; 21
    da36:	70 e0       	ldi	r23, 0x00	; 0
    da38:	89 e0       	ldi	r24, 0x09	; 9
    da3a:	90 e0       	ldi	r25, 0x00	; 0
    da3c:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    da40:	88 81       	ld	r24, Y
    da42:	99 81       	ldd	r25, Y+1	; 0x01
    da44:	00 97       	sbiw	r24, 0x00	; 0
    da46:	21 f0       	breq	.+8      	; 0xda50 <update_splash+0x56>
    da48:	10 92 34 0b 	sts	0x0B34, r1
    da4c:	10 92 33 0b 	sts	0x0B33, r1
	
	if (p1->pressed & BTN_UP)
    da50:	84 ff       	sbrs	r24, 4
    da52:	0e c0       	rjmp	.+28     	; 0xda70 <update_splash+0x76>
	{
		game.selection--;
    da54:	80 91 17 0c 	lds	r24, 0x0C17
    da58:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    da5a:	87 ff       	sbrs	r24, 7
    da5c:	11 c0       	rjmp	.+34     	; 0xda80 <update_splash+0x86>
    da5e:	10 92 17 0c 	sts	0x0C17, r1
		SFX_NAVIGATE;
    da62:	2f ef       	ldi	r18, 0xFF	; 255
    da64:	47 e1       	ldi	r20, 0x17	; 23
    da66:	65 e0       	ldi	r22, 0x05	; 5
    da68:	84 e0       	ldi	r24, 0x04	; 4
    da6a:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
    da6e:	8e c0       	rjmp	.+284    	; 0xdb8c <update_splash+0x192>
	}
	else if (p1->pressed & BTN_DOWN)
    da70:	85 ff       	sbrs	r24, 5
    da72:	09 c0       	rjmp	.+18     	; 0xda86 <update_splash+0x8c>
	{
		game.selection++;
    da74:	80 91 17 0c 	lds	r24, 0x0C17
    da78:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    da7a:	83 30       	cpi	r24, 0x03	; 3
    da7c:	0c f0       	brlt	.+2      	; 0xda80 <update_splash+0x86>
    da7e:	82 e0       	ldi	r24, 0x02	; 2
    da80:	80 93 17 0c 	sts	0x0C17, r24
    da84:	ee cf       	rjmp	.-36     	; 0xda62 <update_splash+0x68>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    da86:	90 ff       	sbrs	r25, 0
    da88:	34 c0       	rjmp	.+104    	; 0xdaf2 <update_splash+0xf8>
    da8a:	80 91 17 0c 	lds	r24, 0x0C17
    da8e:	82 30       	cpi	r24, 0x02	; 2
    da90:	c8 f4       	brcc	.+50     	; 0xdac4 <update_splash+0xca>
	{
		demo_counter = 0;
    da92:	10 92 34 0b 	sts	0x0B34, r1
    da96:	10 92 33 0b 	sts	0x0B33, r1
		p1s.select_state = SELECTING;
    da9a:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    da9e:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    daa2:	2f ef       	ldi	r18, 0xFF	; 255
    daa4:	47 e1       	ldi	r20, 0x17	; 23
    daa6:	65 e0       	ldi	r22, 0x05	; 5
    daa8:	84 e0       	ldi	r24, 0x04	; 4
    daaa:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
		fade_through();
    daae:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <fade_through>
		load_eeprom(&handles);
    dab2:	8b ee       	ldi	r24, 0xEB	; 235
    dab4:	9b e0       	ldi	r25, 0x0B	; 11
    dab6:	0e 94 62 58 	call	0xb0c4	; 0xb0c4 <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    daba:	df 91       	pop	r29
    dabc:	cf 91       	pop	r28
    dabe:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    dac0:	0c 94 78 6c 	jmp	0xd8f0	; 0xd8f0 <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    dac4:	82 30       	cpi	r24, 0x02	; 2
    dac6:	a9 f4       	brne	.+42     	; 0xdaf2 <update_splash+0xf8>
	{
		demo_counter = 0;
    dac8:	10 92 34 0b 	sts	0x0B34, r1
    dacc:	10 92 33 0b 	sts	0x0B33, r1
		SFX_NAVIGATE;
    dad0:	2f ef       	ldi	r18, 0xFF	; 255
    dad2:	47 e1       	ldi	r20, 0x17	; 23
    dad4:	65 e0       	ldi	r22, 0x05	; 5
    dad6:	84 e0       	ldi	r24, 0x04	; 4
    dad8:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
		fade_through();
    dadc:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <fade_through>
		load_eeprom(&scores);
    dae0:	84 ec       	ldi	r24, 0xC4	; 196
    dae2:	9b e0       	ldi	r25, 0x0B	; 11
    dae4:	0e 94 62 58 	call	0xb0c4	; 0xb0c4 <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    dae8:	df 91       	pop	r29
    daea:	cf 91       	pop	r28
    daec:	0f 91       	pop	r16
	{
		demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    daee:	0c 94 d7 65 	jmp	0xcbae	; 0xcbae <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    daf2:	80 91 33 0b 	lds	r24, 0x0B33
    daf6:	90 91 34 0b 	lds	r25, 0x0B34
    dafa:	88 35       	cpi	r24, 0x58	; 88
    dafc:	92 40       	sbci	r25, 0x02	; 2
    dafe:	08 f4       	brcc	.+2      	; 0xdb02 <update_splash+0x108>
    db00:	45 c0       	rjmp	.+138    	; 0xdb8c <update_splash+0x192>
	{
		demo_counter = 0;
    db02:	10 92 34 0b 	sts	0x0B34, r1
    db06:	10 92 33 0b 	sts	0x0B33, r1
		if (demo_choice % 2 == 0)
    db0a:	80 91 32 0b 	lds	r24, 0x0B32
    db0e:	80 fd       	sbrc	r24, 0
    db10:	29 c0       	rjmp	.+82     	; 0xdb64 <update_splash+0x16a>
		{
			game.selection = CPUVCPU;
    db12:	83 e0       	ldi	r24, 0x03	; 3
    db14:	80 93 17 0c 	sts	0x0C17, r24
			player1.handle_id = 9;
    db18:	c9 e0       	ldi	r28, 0x09	; 9
    db1a:	c0 93 40 0c 	sts	0x0C40, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    db1e:	43 e0       	ldi	r20, 0x03	; 3
    db20:	68 e0       	ldi	r22, 0x08	; 8
    db22:	7c e0       	ldi	r23, 0x0C	; 12
    db24:	81 e4       	ldi	r24, 0x41	; 65
    db26:	9c e0       	ldi	r25, 0x0C	; 12
    db28:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
			player2.handle_id = 9;
    db2c:	c0 93 ae 0f 	sts	0x0FAE, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    db30:	43 e0       	ldi	r20, 0x03	; 3
    db32:	68 e0       	ldi	r22, 0x08	; 8
    db34:	7c e0       	ldi	r23, 0x0C	; 12
    db36:	8f ea       	ldi	r24, 0xAF	; 175
    db38:	9f e0       	ldi	r25, 0x0F	; 15
    db3a:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
			SFX_NAVIGATE;
    db3e:	2f ef       	ldi	r18, 0xFF	; 255
    db40:	47 e1       	ldi	r20, 0x17	; 23
    db42:	65 e0       	ldi	r22, 0x05	; 5
    db44:	84 e0       	ldi	r24, 0x04	; 4
    db46:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
			clear_sprites();
    db4a:	0e 94 7e 58 	call	0xb0fc	; 0xb0fc <clear_sprites>
			fade_through();
    db4e:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <fade_through>
			level_transition(LBRandom(0, 9));
    db52:	69 e0       	ldi	r22, 0x09	; 9
    db54:	70 e0       	ldi	r23, 0x00	; 0
    db56:	80 e0       	ldi	r24, 0x00	; 0
    db58:	90 e0       	ldi	r25, 0x00	; 0
    db5a:	0e 94 7d 56 	call	0xacfa	; 0xacfa <LBRandom>
    db5e:	0e 94 2e 64 	call	0xc85c	; 0xc85c <level_transition>
    db62:	0e c0       	rjmp	.+28     	; 0xdb80 <update_splash+0x186>
		}
		else
		{
			SFX_NAVIGATE;
    db64:	2f ef       	ldi	r18, 0xFF	; 255
    db66:	47 e1       	ldi	r20, 0x17	; 23
    db68:	65 e0       	ldi	r22, 0x05	; 5
    db6a:	84 e0       	ldi	r24, 0x04	; 4
    db6c:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <TriggerNote>
			fade_through();
    db70:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <fade_through>
			load_eeprom(&scores);
    db74:	84 ec       	ldi	r24, 0xC4	; 196
    db76:	9b e0       	ldi	r25, 0x0B	; 11
    db78:	0e 94 62 58 	call	0xb0c4	; 0xb0c4 <load_eeprom>
			load_tank_rank();
    db7c:	0e 94 d7 65 	call	0xcbae	; 0xcbae <load_tank_rank>
		}
		demo_choice++;
    db80:	80 91 32 0b 	lds	r24, 0x0B32
    db84:	8f 5f       	subi	r24, 0xFF	; 255
    db86:	80 93 32 0b 	sts	0x0B32, r24
		return;
    db8a:	09 c0       	rjmp	.+18     	; 0xdb9e <update_splash+0x1a4>
		
	}
	demo_counter++;
    db8c:	80 91 33 0b 	lds	r24, 0x0B33
    db90:	90 91 34 0b 	lds	r25, 0x0B34
    db94:	01 96       	adiw	r24, 0x01	; 1
    db96:	90 93 34 0b 	sts	0x0B34, r25
    db9a:	80 93 33 0b 	sts	0x0B33, r24
}
    db9e:	df 91       	pop	r29
    dba0:	cf 91       	pop	r28
    dba2:	0f 91       	pop	r16
    dba4:	08 95       	ret

0000dba6 <update_handle_select>:
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    dba6:	0f 93       	push	r16
    dba8:	1f 93       	push	r17
    dbaa:	cf 93       	push	r28
    dbac:	df 93       	push	r29
    dbae:	8c 01       	movw	r16, r24
    dbb0:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    dbb2:	26 e0       	ldi	r18, 0x06	; 6
    dbb4:	42 e0       	ldi	r20, 0x02	; 2
    dbb6:	bc 01       	movw	r22, r24
    dbb8:	8a e2       	ldi	r24, 0x2A	; 42
    dbba:	9b e0       	ldi	r25, 0x0B	; 11
    dbbc:	0e 94 ba 6b 	call	0xd774	; 0xd774 <_handle_select_render_helper>
	if (game.selection == PVP)
    dbc0:	80 91 17 0c 	lds	r24, 0x0C17
    dbc4:	81 30       	cpi	r24, 0x01	; 1
    dbc6:	39 f4       	brne	.+14     	; 0xdbd6 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    dbc8:	28 e0       	ldi	r18, 0x08	; 8
    dbca:	43 e1       	ldi	r20, 0x13	; 19
    dbcc:	be 01       	movw	r22, r28
    dbce:	84 e2       	ldi	r24, 0x24	; 36
    dbd0:	9b e0       	ldi	r25, 0x0B	; 11
    dbd2:	0e 94 ba 6b 	call	0xd774	; 0xd774 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    dbd6:	45 e3       	ldi	r20, 0x35	; 53
    dbd8:	5c e0       	ldi	r21, 0x0C	; 12
    dbda:	b8 01       	movw	r22, r16
    dbdc:	8a e2       	ldi	r24, 0x2A	; 42
    dbde:	9b e0       	ldi	r25, 0x0B	; 11
    dbe0:	0e 94 f5 6a 	call	0xd5ea	; 0xd5ea <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    dbe4:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    dbe8:	80 91 17 0c 	lds	r24, 0x0C17
    dbec:	81 30       	cpi	r24, 0x01	; 1
    dbee:	19 f0       	breq	.+6      	; 0xdbf6 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    dbf0:	12 30       	cpi	r17, 0x02	; 2
    dbf2:	69 f0       	breq	.+26     	; 0xdc0e <update_handle_select+0x68>
    dbf4:	21 c0       	rjmp	.+66     	; 0xdc38 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    dbf6:	43 ea       	ldi	r20, 0xA3	; 163
    dbf8:	5f e0       	ldi	r21, 0x0F	; 15
    dbfa:	be 01       	movw	r22, r28
    dbfc:	84 e2       	ldi	r24, 0x24	; 36
    dbfe:	9b e0       	ldi	r25, 0x0B	; 11
    dc00:	0e 94 f5 6a 	call	0xd5ea	; 0xd5ea <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    dc04:	80 91 29 0b 	lds	r24, 0x0B29
    dc08:	82 30       	cpi	r24, 0x02	; 2
    dc0a:	b1 f4       	brne	.+44     	; 0xdc38 <update_handle_select+0x92>
    dc0c:	f1 cf       	rjmp	.-30     	; 0xdbf0 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    dc0e:	80 91 17 0c 	lds	r24, 0x0C17
    dc12:	81 11       	cpse	r24, r1
    dc14:	0a c0       	rjmp	.+20     	; 0xdc2a <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    dc16:	89 e0       	ldi	r24, 0x09	; 9
    dc18:	80 93 ae 0f 	sts	0x0FAE, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    dc1c:	43 e0       	ldi	r20, 0x03	; 3
    dc1e:	68 e0       	ldi	r22, 0x08	; 8
    dc20:	7c e0       	ldi	r23, 0x0C	; 12
    dc22:	8f ea       	ldi	r24, 0xAF	; 175
    dc24:	9f e0       	ldi	r25, 0x0F	; 15
    dc26:	0e 94 40 55 	call	0xaa80	; 0xaa80 <LBCopyChars>
		}
		level_transition(9);
    dc2a:	89 e0       	ldi	r24, 0x09	; 9
	}
}
    dc2c:	df 91       	pop	r29
    dc2e:	cf 91       	pop	r28
    dc30:	1f 91       	pop	r17
    dc32:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(9);
    dc34:	0c 94 2e 64 	jmp	0xc85c	; 0xc85c <level_transition>
	}
}
    dc38:	df 91       	pop	r29
    dc3a:	cf 91       	pop	r28
    dc3c:	1f 91       	pop	r17
    dc3e:	0f 91       	pop	r16
    dc40:	08 95       	ret

0000dc42 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    dc42:	00 97       	sbiw	r24, 0x00	; 0
    dc44:	41 f0       	breq	.+16     	; 0xdc56 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    dc46:	81 30       	cpi	r24, 0x01	; 1
    dc48:	91 05       	cpc	r25, r1
    dc4a:	41 f0       	breq	.+16     	; 0xdc5c <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    dc4c:	82 30       	cpi	r24, 0x02	; 2
    dc4e:	91 05       	cpc	r25, r1
    dc50:	41 f0       	breq	.+16     	; 0xdc62 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    dc52:	03 97       	sbiw	r24, 0x03	; 3
    dc54:	49 f0       	breq	.+18     	; 0xdc68 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    dc56:	80 e1       	ldi	r24, 0x10	; 16
    dc58:	90 e0       	ldi	r25, 0x00	; 0
    dc5a:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    dc5c:	80 e2       	ldi	r24, 0x20	; 32
    dc5e:	90 e0       	ldi	r25, 0x00	; 0
    dc60:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    dc62:	80 e4       	ldi	r24, 0x40	; 64
    dc64:	90 e0       	ldi	r25, 0x00	; 0
    dc66:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    dc68:	80 e8       	ldi	r24, 0x80	; 128
    dc6a:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    dc6c:	08 95       	ret

0000dc6e <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    dc6e:	8f 92       	push	r8
    dc70:	9f 92       	push	r9
    dc72:	af 92       	push	r10
    dc74:	bf 92       	push	r11
    dc76:	cf 92       	push	r12
    dc78:	df 92       	push	r13
    dc7a:	ef 92       	push	r14
    dc7c:	ff 92       	push	r15
    dc7e:	0f 93       	push	r16
    dc80:	1f 93       	push	r17
    dc82:	cf 93       	push	r28
    dc84:	df 93       	push	r29
    dc86:	e8 2e       	mov	r14, r24
    dc88:	d6 2e       	mov	r13, r22
    dc8a:	f4 2e       	mov	r15, r20
    dc8c:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    dc8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    dc90:	88 23       	and	r24, r24
    dc92:	09 f4       	brne	.+2      	; 0xdc96 <crash_and_turn+0x28>
    dc94:	a8 c0       	rjmp	.+336    	; 0xdde6 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    dc96:	f8 01       	movw	r30, r16
    dc98:	c4 80       	ldd	r12, Z+4	; 0x04
    dc9a:	c4 fe       	sbrs	r12, 4
    dc9c:	23 c0       	rjmp	.+70     	; 0xdce4 <crash_and_turn+0x76>
    dc9e:	fe e1       	ldi	r31, 0x1E	; 30
    dca0:	6f 02       	muls	r22, r31
    dca2:	40 01       	movw	r8, r0
    dca4:	11 24       	eor	r1, r1
    dca6:	ae 2c       	mov	r10, r14
    dca8:	bb 24       	eor	r11, r11
    dcaa:	a7 fc       	sbrc	r10, 7
    dcac:	b0 94       	com	r11
    dcae:	c4 01       	movw	r24, r8
    dcb0:	8a 0d       	add	r24, r10
    dcb2:	9b 1d       	adc	r25, r11
    dcb4:	01 97       	sbiw	r24, 0x01	; 1
    dcb6:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dcba:	81 11       	cpse	r24, r1
    dcbc:	13 c0       	rjmp	.+38     	; 0xdce4 <crash_and_turn+0x76>
    dcbe:	c4 01       	movw	r24, r8
    dcc0:	8a 0d       	add	r24, r10
    dcc2:	9b 1d       	adc	r25, r11
    dcc4:	4d 96       	adiw	r24, 0x1d	; 29
    dcc6:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dcca:	81 11       	cpse	r24, r1
    dccc:	0b c0       	rjmp	.+22     	; 0xdce4 <crash_and_turn+0x76>
    dcce:	c4 01       	movw	r24, r8
    dcd0:	8a 0d       	add	r24, r10
    dcd2:	9b 1d       	adc	r25, r11
    dcd4:	cb 96       	adiw	r24, 0x3b	; 59
    dcd6:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dcda:	81 11       	cpse	r24, r1
    dcdc:	03 c0       	rjmp	.+6      	; 0xdce4 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    dcde:	80 e4       	ldi	r24, 0x40	; 64
    dce0:	90 e0       	ldi	r25, 0x00	; 0
    dce2:	6f c0       	rjmp	.+222    	; 0xddc2 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    dce4:	c6 fe       	sbrs	r12, 6
    dce6:	23 c0       	rjmp	.+70     	; 0xdd2e <crash_and_turn+0xc0>
    dce8:	8d 2d       	mov	r24, r13
    dcea:	99 27       	eor	r25, r25
    dcec:	87 fd       	sbrc	r24, 7
    dcee:	90 95       	com	r25
    dcf0:	02 96       	adiw	r24, 0x02	; 2
    dcf2:	2e e1       	ldi	r18, 0x1E	; 30
    dcf4:	28 9f       	mul	r18, r24
    dcf6:	50 01       	movw	r10, r0
    dcf8:	29 9f       	mul	r18, r25
    dcfa:	b0 0c       	add	r11, r0
    dcfc:	11 24       	eor	r1, r1
    dcfe:	ae 0c       	add	r10, r14
    dd00:	b1 1c       	adc	r11, r1
    dd02:	e7 fc       	sbrc	r14, 7
    dd04:	ba 94       	dec	r11
    dd06:	c5 01       	movw	r24, r10
    dd08:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dd0c:	81 11       	cpse	r24, r1
    dd0e:	0f c0       	rjmp	.+30     	; 0xdd2e <crash_and_turn+0xc0>
    dd10:	c5 01       	movw	r24, r10
    dd12:	01 96       	adiw	r24, 0x01	; 1
    dd14:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dd18:	81 11       	cpse	r24, r1
    dd1a:	09 c0       	rjmp	.+18     	; 0xdd2e <crash_and_turn+0xc0>
    dd1c:	c5 01       	movw	r24, r10
    dd1e:	02 96       	adiw	r24, 0x02	; 2
    dd20:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dd24:	81 11       	cpse	r24, r1
    dd26:	03 c0       	rjmp	.+6      	; 0xdd2e <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    dd28:	80 e2       	ldi	r24, 0x20	; 32
    dd2a:	90 e0       	ldi	r25, 0x00	; 0
    dd2c:	4a c0       	rjmp	.+148    	; 0xddc2 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    dd2e:	c5 fe       	sbrs	r12, 5
    dd30:	24 c0       	rjmp	.+72     	; 0xdd7a <crash_and_turn+0x10c>
    dd32:	fd 2d       	mov	r31, r13
    dd34:	8e e1       	ldi	r24, 0x1E	; 30
    dd36:	f8 02       	muls	r31, r24
    dd38:	40 01       	movw	r8, r0
    dd3a:	11 24       	eor	r1, r1
    dd3c:	ae 2c       	mov	r10, r14
    dd3e:	bb 24       	eor	r11, r11
    dd40:	a7 fc       	sbrc	r10, 7
    dd42:	b0 94       	com	r11
    dd44:	c4 01       	movw	r24, r8
    dd46:	8a 0d       	add	r24, r10
    dd48:	9b 1d       	adc	r25, r11
    dd4a:	02 96       	adiw	r24, 0x02	; 2
    dd4c:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dd50:	81 11       	cpse	r24, r1
    dd52:	13 c0       	rjmp	.+38     	; 0xdd7a <crash_and_turn+0x10c>
    dd54:	c4 01       	movw	r24, r8
    dd56:	8a 0d       	add	r24, r10
    dd58:	9b 1d       	adc	r25, r11
    dd5a:	80 96       	adiw	r24, 0x20	; 32
    dd5c:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dd60:	81 11       	cpse	r24, r1
    dd62:	0b c0       	rjmp	.+22     	; 0xdd7a <crash_and_turn+0x10c>
    dd64:	c4 01       	movw	r24, r8
    dd66:	8a 0d       	add	r24, r10
    dd68:	9b 1d       	adc	r25, r11
    dd6a:	ce 96       	adiw	r24, 0x3e	; 62
    dd6c:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dd70:	81 11       	cpse	r24, r1
    dd72:	03 c0       	rjmp	.+6      	; 0xdd7a <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    dd74:	80 e8       	ldi	r24, 0x80	; 128
    dd76:	90 e0       	ldi	r25, 0x00	; 0
    dd78:	24 c0       	rjmp	.+72     	; 0xddc2 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    dd7a:	c7 fe       	sbrs	r12, 7
    dd7c:	29 c0       	rjmp	.+82     	; 0xddd0 <crash_and_turn+0x162>
    dd7e:	8d 2d       	mov	r24, r13
    dd80:	99 27       	eor	r25, r25
    dd82:	87 fd       	sbrc	r24, 7
    dd84:	90 95       	com	r25
    dd86:	01 97       	sbiw	r24, 0x01	; 1
    dd88:	2e e1       	ldi	r18, 0x1E	; 30
    dd8a:	28 9f       	mul	r18, r24
    dd8c:	50 01       	movw	r10, r0
    dd8e:	29 9f       	mul	r18, r25
    dd90:	b0 0c       	add	r11, r0
    dd92:	11 24       	eor	r1, r1
    dd94:	ae 0c       	add	r10, r14
    dd96:	b1 1c       	adc	r11, r1
    dd98:	e7 fc       	sbrc	r14, 7
    dd9a:	ba 94       	dec	r11
    dd9c:	c5 01       	movw	r24, r10
    dd9e:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    dda2:	81 11       	cpse	r24, r1
    dda4:	15 c0       	rjmp	.+42     	; 0xddd0 <crash_and_turn+0x162>
    dda6:	c5 01       	movw	r24, r10
    dda8:	01 96       	adiw	r24, 0x01	; 1
    ddaa:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    ddae:	81 11       	cpse	r24, r1
    ddb0:	0f c0       	rjmp	.+30     	; 0xddd0 <crash_and_turn+0x162>
    ddb2:	c5 01       	movw	r24, r10
    ddb4:	02 96       	adiw	r24, 0x02	; 2
    ddb6:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <solid_tile>
    ddba:	81 11       	cpse	r24, r1
    ddbc:	09 c0       	rjmp	.+18     	; 0xddd0 <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    ddbe:	80 e1       	ldi	r24, 0x10	; 16
    ddc0:	90 e0       	ldi	r25, 0x00	; 0
    ddc2:	f8 01       	movw	r30, r16
    ddc4:	95 83       	std	Z+5, r25	; 0x05
    ddc6:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    ddc8:	ce 01       	movw	r24, r28
    ddca:	0e 94 88 5b 	call	0xb710	; 0xb710 <recoil_sprite>
			recoiled = 0;
    ddce:	f1 2c       	mov	r15, r1
		}
		if (player->goal_direction & p->held)
    ddd0:	f8 01       	movw	r30, r16
    ddd2:	24 81       	ldd	r18, Z+4	; 0x04
    ddd4:	35 81       	ldd	r19, Z+5	; 0x05
    ddd6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    ddd8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    ddda:	82 23       	and	r24, r18
    dddc:	93 23       	and	r25, r19
    ddde:	89 2b       	or	r24, r25
    dde0:	11 f0       	breq	.+4      	; 0xdde6 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    dde2:	1b 8e       	std	Y+27, r1	; 0x1b
			recoiled = 0;
    dde4:	f1 2c       	mov	r15, r1
		}
	}
	if ((p->held & BTN_LEFT) && recoiled)
    dde6:	f8 01       	movw	r30, r16
    dde8:	84 81       	ldd	r24, Z+4	; 0x04
    ddea:	86 ff       	sbrs	r24, 6
    ddec:	05 c0       	rjmp	.+10     	; 0xddf8 <crash_and_turn+0x18a>
    ddee:	ff 20       	and	r15, r15
    ddf0:	19 f0       	breq	.+6      	; 0xddf8 <crash_and_turn+0x18a>
	{
		p->held = BTN_UP;
    ddf2:	80 e1       	ldi	r24, 0x10	; 16
    ddf4:	90 e0       	ldi	r25, 0x00	; 0
    ddf6:	15 c0       	rjmp	.+42     	; 0xde22 <crash_and_turn+0x1b4>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_UP) && recoiled)
    ddf8:	84 ff       	sbrs	r24, 4
    ddfa:	05 c0       	rjmp	.+10     	; 0xde06 <crash_and_turn+0x198>
    ddfc:	ff 20       	and	r15, r15
    ddfe:	19 f0       	breq	.+6      	; 0xde06 <crash_and_turn+0x198>
	{
		p->held = BTN_RIGHT;
    de00:	80 e8       	ldi	r24, 0x80	; 128
    de02:	90 e0       	ldi	r25, 0x00	; 0
    de04:	0d c0       	rjmp	.+26     	; 0xde20 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_RIGHT) && recoiled)
    de06:	87 ff       	sbrs	r24, 7
    de08:	05 c0       	rjmp	.+10     	; 0xde14 <crash_and_turn+0x1a6>
    de0a:	ff 20       	and	r15, r15
    de0c:	19 f0       	breq	.+6      	; 0xde14 <crash_and_turn+0x1a6>
	{
		p->held = BTN_DOWN;
    de0e:	80 e2       	ldi	r24, 0x20	; 32
    de10:	90 e0       	ldi	r25, 0x00	; 0
    de12:	06 c0       	rjmp	.+12     	; 0xde20 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_DOWN) && recoiled)
    de14:	85 ff       	sbrs	r24, 5
    de16:	09 c0       	rjmp	.+18     	; 0xde2a <crash_and_turn+0x1bc>
    de18:	ff 20       	and	r15, r15
    de1a:	39 f0       	breq	.+14     	; 0xde2a <crash_and_turn+0x1bc>
	{
		p->held = BTN_LEFT;
    de1c:	80 e4       	ldi	r24, 0x40	; 64
    de1e:	90 e0       	ldi	r25, 0x00	; 0
    de20:	f8 01       	movw	r30, r16
    de22:	95 83       	std	Z+5, r25	; 0x05
    de24:	84 83       	std	Z+4, r24	; 0x04
		player->feeling_my_way = 1;
    de26:	81 e0       	ldi	r24, 0x01	; 1
    de28:	8b 8f       	std	Y+27, r24	; 0x1b
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    de2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    de2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    de2e:	80 31       	cpi	r24, 0x10	; 16
    de30:	91 05       	cpc	r25, r1
    de32:	19 f0       	breq	.+6      	; 0xde3a <crash_and_turn+0x1cc>
    de34:	80 32       	cpi	r24, 0x20	; 32
    de36:	91 05       	cpc	r25, r1
    de38:	19 f4       	brne	.+6      	; 0xde40 <crash_and_turn+0x1d2>
    de3a:	2a a1       	ldd	r18, Y+34	; 0x22
    de3c:	d2 16       	cp	r13, r18
    de3e:	59 f0       	breq	.+22     	; 0xde56 <crash_and_turn+0x1e8>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    de40:	80 34       	cpi	r24, 0x40	; 64
    de42:	91 05       	cpc	r25, r1
    de44:	19 f0       	breq	.+6      	; 0xde4c <crash_and_turn+0x1de>
    de46:	80 38       	cpi	r24, 0x80	; 128
    de48:	91 05       	cpc	r25, r1
    de4a:	39 f4       	brne	.+14     	; 0xde5a <crash_and_turn+0x1ec>
    de4c:	81 e0       	ldi	r24, 0x01	; 1
    de4e:	9a a1       	ldd	r25, Y+34	; 0x22
    de50:	e9 12       	cpse	r14, r25
    de52:	03 c0       	rjmp	.+6      	; 0xde5a <crash_and_turn+0x1ec>
    de54:	03 c0       	rjmp	.+6      	; 0xde5c <crash_and_turn+0x1ee>
	{
		p->held = BTN_LEFT;
		player->feeling_my_way = 1;
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    de56:	81 e0       	ldi	r24, 0x01	; 1
    de58:	01 c0       	rjmp	.+2      	; 0xde5c <crash_and_turn+0x1ee>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    de5a:	80 e0       	ldi	r24, 0x00	; 0
}
    de5c:	df 91       	pop	r29
    de5e:	cf 91       	pop	r28
    de60:	1f 91       	pop	r17
    de62:	0f 91       	pop	r16
    de64:	ff 90       	pop	r15
    de66:	ef 90       	pop	r14
    de68:	df 90       	pop	r13
    de6a:	cf 90       	pop	r12
    de6c:	bf 90       	pop	r11
    de6e:	af 90       	pop	r10
    de70:	9f 90       	pop	r9
    de72:	8f 90       	pop	r8
    de74:	08 95       	ret

0000de76 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    de76:	48 2f       	mov	r20, r24
    de78:	55 27       	eor	r21, r21
    de7a:	47 fd       	sbrc	r20, 7
    de7c:	50 95       	com	r21
    de7e:	57 ff       	sbrs	r21, 7
    de80:	03 c0       	rjmp	.+6      	; 0xde88 <get_cpu_goal_direction+0x12>
    de82:	51 95       	neg	r21
    de84:	41 95       	neg	r20
    de86:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    de88:	26 2f       	mov	r18, r22
    de8a:	33 27       	eor	r19, r19
    de8c:	27 fd       	sbrc	r18, 7
    de8e:	30 95       	com	r19
    de90:	37 ff       	sbrs	r19, 7
    de92:	03 c0       	rjmp	.+6      	; 0xde9a <get_cpu_goal_direction+0x24>
    de94:	31 95       	neg	r19
    de96:	21 95       	neg	r18
    de98:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    de9a:	24 17       	cp	r18, r20
    de9c:	2c f4       	brge	.+10     	; 0xdea8 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    de9e:	18 16       	cp	r1, r24
    dea0:	44 f4       	brge	.+16     	; 0xdeb2 <get_cpu_goal_direction+0x3c>
    dea2:	80 e8       	ldi	r24, 0x80	; 128
    dea4:	90 e0       	ldi	r25, 0x00	; 0
    dea6:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    dea8:	16 16       	cp	r1, r22
    deaa:	34 f4       	brge	.+12     	; 0xdeb8 <get_cpu_goal_direction+0x42>
    deac:	80 e2       	ldi	r24, 0x20	; 32
    deae:	90 e0       	ldi	r25, 0x00	; 0
    deb0:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    deb2:	80 e4       	ldi	r24, 0x40	; 64
    deb4:	90 e0       	ldi	r25, 0x00	; 0
    deb6:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    deb8:	80 e1       	ldi	r24, 0x10	; 16
    deba:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    debc:	08 95       	ret

0000debe <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    debe:	2f 92       	push	r2
    dec0:	3f 92       	push	r3
    dec2:	4f 92       	push	r4
    dec4:	5f 92       	push	r5
    dec6:	6f 92       	push	r6
    dec8:	7f 92       	push	r7
    deca:	8f 92       	push	r8
    decc:	9f 92       	push	r9
    dece:	af 92       	push	r10
    ded0:	bf 92       	push	r11
    ded2:	cf 92       	push	r12
    ded4:	df 92       	push	r13
    ded6:	ef 92       	push	r14
    ded8:	ff 92       	push	r15
    deda:	0f 93       	push	r16
    dedc:	1f 93       	push	r17
    dede:	cf 93       	push	r28
    dee0:	df 93       	push	r29
    dee2:	00 d0       	rcall	.+0      	; 0xdee4 <get_cpu_joypad_state+0x26>
    dee4:	00 d0       	rcall	.+0      	; 0xdee6 <get_cpu_joypad_state+0x28>
    dee6:	00 d0       	rcall	.+0      	; 0xdee8 <get_cpu_joypad_state+0x2a>
    dee8:	cd b7       	in	r28, 0x3d	; 61
    deea:	de b7       	in	r29, 0x3e	; 62
    deec:	1c 01       	movw	r2, r24
    deee:	8a 01       	movw	r16, r20
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    def0:	db 01       	movw	r26, r22
    def2:	13 96       	adiw	r26, 0x03	; 3
    def4:	8d 91       	ld	r24, X+
    def6:	9d 91       	ld	r25, X+
    def8:	0d 90       	ld	r0, X+
    defa:	bc 91       	ld	r27, X
    defc:	a0 2d       	mov	r26, r0
    defe:	89 83       	std	Y+1, r24	; 0x01
    df00:	9a 83       	std	Y+2, r25	; 0x02
    df02:	ab 83       	std	Y+3, r26	; 0x03
    df04:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    df06:	fb 01       	movw	r30, r22
    df08:	47 80       	ldd	r4, Z+7	; 0x07
    df0a:	50 84       	ldd	r5, Z+8	; 0x08
    df0c:	61 84       	ldd	r6, Z+9	; 0x09
    df0e:	72 84       	ldd	r7, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    df10:	d1 01       	movw	r26, r2
    df12:	13 96       	adiw	r26, 0x03	; 3
    df14:	8d 90       	ld	r8, X+
    df16:	9d 90       	ld	r9, X+
    df18:	ad 90       	ld	r10, X+
    df1a:	bc 90       	ld	r11, X
    df1c:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    df1e:	17 96       	adiw	r26, 0x07	; 7
    df20:	cd 90       	ld	r12, X+
    df22:	dd 90       	ld	r13, X+
    df24:	ed 90       	ld	r14, X+
    df26:	fc 90       	ld	r15, X
    df28:	1a 97       	sbiw	r26, 0x0a	; 10
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    df2a:	57 96       	adiw	r26, 0x17	; 23
    df2c:	8c 91       	ld	r24, X
    df2e:	81 11       	cpse	r24, r1
    df30:	04 c0       	rjmp	.+8      	; 0xdf3a <get_cpu_joypad_state+0x7c>
	{
		p->held = 0;
    df32:	fa 01       	movw	r30, r20
    df34:	15 82       	std	Z+5, r1	; 0x05
    df36:	14 82       	std	Z+4, r1	; 0x04
		return;
    df38:	4e c1       	rjmp	.+668    	; 0xe1d6 <get_cpu_joypad_state+0x318>
	}
	
	// Shot
	if (p->pressed & BTN_A)
    df3a:	da 01       	movw	r26, r20
    df3c:	8d 91       	ld	r24, X+
    df3e:	9c 91       	ld	r25, X
    df40:	11 97       	sbiw	r26, 0x01	; 1
    df42:	90 ff       	sbrs	r25, 0
    df44:	02 c0       	rjmp	.+4      	; 0xdf4a <get_cpu_joypad_state+0x8c>
	{
		p->pressed = 0;
    df46:	1d 92       	st	X+, r1
    df48:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    df4a:	20 91 04 01 	lds	r18, 0x0104
    df4e:	30 91 05 01 	lds	r19, 0x0105
    df52:	c9 01       	movw	r24, r18
    df54:	6a e0       	ldi	r22, 0x0A	; 10
    df56:	70 e0       	ldi	r23, 0x00	; 0
    df58:	0e 94 a2 71 	call	0xe344	; 0xe344 <__udivmodhi4>
    df5c:	89 2b       	or	r24, r25
    df5e:	49 f4       	brne	.+18     	; 0xdf72 <get_cpu_joypad_state+0xb4>
    df60:	f1 01       	movw	r30, r2
    df62:	87 89       	ldd	r24, Z+23	; 0x17
    df64:	83 33       	cpi	r24, 0x33	; 51
    df66:	28 f0       	brcs	.+10     	; 0xdf72 <get_cpu_joypad_state+0xb4>
	{
		p->pressed = BTN_A;
    df68:	80 e0       	ldi	r24, 0x00	; 0
    df6a:	91 e0       	ldi	r25, 0x01	; 1
    df6c:	d8 01       	movw	r26, r16
    df6e:	8d 93       	st	X+, r24
    df70:	9c 93       	st	X, r25
    df72:	3e 82       	std	Y+6, r3	; 0x06
    df74:	2d 82       	std	Y+5, r2	; 0x05
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    df76:	c9 01       	movw	r24, r18
    df78:	64 eb       	ldi	r22, 0xB4	; 180
    df7a:	70 e0       	ldi	r23, 0x00	; 0
    df7c:	0e 94 a2 71 	call	0xe344	; 0xe344 <__udivmodhi4>
    df80:	89 2b       	or	r24, r25
    df82:	41 f0       	breq	.+16     	; 0xdf94 <get_cpu_joypad_state+0xd6>
    df84:	f1 01       	movw	r30, r2
    df86:	87 89       	ldd	r24, Z+23	; 0x17
    df88:	8a 30       	cpi	r24, 0x0A	; 10
    df8a:	21 f0       	breq	.+8      	; 0xdf94 <get_cpu_joypad_state+0xd6>
    df8c:	83 a1       	ldd	r24, Z+35	; 0x23
    df8e:	88 23       	and	r24, r24
    df90:	09 f4       	brne	.+2      	; 0xdf94 <get_cpu_joypad_state+0xd6>
    df92:	7e c0       	rjmp	.+252    	; 0xe090 <get_cpu_joypad_state+0x1d2>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    df94:	20 e0       	ldi	r18, 0x00	; 0
    df96:	30 e0       	ldi	r19, 0x00	; 0
    df98:	40 e0       	ldi	r20, 0x00	; 0
    df9a:	5e e3       	ldi	r21, 0x3E	; 62
    df9c:	69 81       	ldd	r22, Y+1	; 0x01
    df9e:	7a 81       	ldd	r23, Y+2	; 0x02
    dfa0:	8b 81       	ldd	r24, Y+3	; 0x03
    dfa2:	9c 81       	ldd	r25, Y+4	; 0x04
    dfa4:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    dfa8:	0e 94 9b 72 	call	0xe536	; 0xe536 <__fixsfsi>
    dfac:	36 2e       	mov	r3, r22
	goal_y = other_player->shared.y / 8 - 3;
    dfae:	20 e0       	ldi	r18, 0x00	; 0
    dfb0:	30 e0       	ldi	r19, 0x00	; 0
    dfb2:	40 e0       	ldi	r20, 0x00	; 0
    dfb4:	5e e3       	ldi	r21, 0x3E	; 62
    dfb6:	c3 01       	movw	r24, r6
    dfb8:	b2 01       	movw	r22, r4
    dfba:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    dfbe:	20 e0       	ldi	r18, 0x00	; 0
    dfc0:	30 e0       	ldi	r19, 0x00	; 0
    dfc2:	40 e4       	ldi	r20, 0x40	; 64
    dfc4:	50 e4       	ldi	r21, 0x40	; 64
    dfc6:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    dfca:	0e 94 9b 72 	call	0xe536	; 0xe536 <__fixsfsi>
    dfce:	76 2e       	mov	r7, r22
	player_x = player->shared.x / 8;
    dfd0:	20 e0       	ldi	r18, 0x00	; 0
    dfd2:	30 e0       	ldi	r19, 0x00	; 0
    dfd4:	40 e0       	ldi	r20, 0x00	; 0
    dfd6:	5e e3       	ldi	r21, 0x3E	; 62
    dfd8:	c5 01       	movw	r24, r10
    dfda:	b4 01       	movw	r22, r8
    dfdc:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    dfe0:	0e 94 9b 72 	call	0xe536	; 0xe536 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    dfe4:	b3 2c       	mov	r11, r3
    dfe6:	b6 1a       	sub	r11, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    dfe8:	20 e0       	ldi	r18, 0x00	; 0
    dfea:	30 e0       	ldi	r19, 0x00	; 0
    dfec:	40 e0       	ldi	r20, 0x00	; 0
    dfee:	5e e3       	ldi	r21, 0x3E	; 62
    dff0:	c7 01       	movw	r24, r14
    dff2:	b6 01       	movw	r22, r12
    dff4:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    dff8:	20 e0       	ldi	r18, 0x00	; 0
    dffa:	30 e0       	ldi	r19, 0x00	; 0
    dffc:	40 e4       	ldi	r20, 0x40	; 64
    dffe:	50 e4       	ldi	r21, 0x40	; 64
    e000:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    e004:	0e 94 9b 72 	call	0xe536	; 0xe536 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    e008:	f7 2d       	mov	r31, r7
    e00a:	f6 1b       	sub	r31, r22
    e00c:	6f 2f       	mov	r22, r31
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    e00e:	ad 81       	ldd	r26, Y+5	; 0x05
    e010:	be 81       	ldd	r27, Y+6	; 0x06
    e012:	93 96       	adiw	r26, 0x23	; 35
    e014:	1c 92       	st	X, r1
    e016:	93 97       	sbiw	r26, 0x23	; 35
		player->feeling_my_way = 0;
    e018:	5b 96       	adiw	r26, 0x1b	; 27
    e01a:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    e01c:	82 e0       	ldi	r24, 0x02	; 2
    e01e:	8b 0d       	add	r24, r11
    e020:	85 30       	cpi	r24, 0x05	; 5
    e022:	d8 f4       	brcc	.+54     	; 0xe05a <get_cpu_joypad_state+0x19c>
    e024:	fe 3f       	cpi	r31, 0xFE	; 254
    e026:	cc f0       	brlt	.+50     	; 0xe05a <get_cpu_joypad_state+0x19c>
    e028:	f3 30       	cpi	r31, 0x03	; 3
    e02a:	bc f4       	brge	.+46     	; 0xe05a <get_cpu_joypad_state+0x19c>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    e02c:	64 e0       	ldi	r22, 0x04	; 4
    e02e:	70 e0       	ldi	r23, 0x00	; 0
    e030:	80 e0       	ldi	r24, 0x00	; 0
    e032:	90 e0       	ldi	r25, 0x00	; 0
    e034:	0e 94 7d 56 	call	0xacfa	; 0xacfa <LBRandom>
    e038:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <button_map>
    e03c:	ed 81       	ldd	r30, Y+5	; 0x05
    e03e:	fe 81       	ldd	r31, Y+6	; 0x06
    e040:	95 8f       	std	Z+29, r25	; 0x1d
    e042:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = LBRandom(5, 18);
    e044:	62 e1       	ldi	r22, 0x12	; 18
    e046:	70 e0       	ldi	r23, 0x00	; 0
    e048:	85 e0       	ldi	r24, 0x05	; 5
    e04a:	90 e0       	ldi	r25, 0x00	; 0
    e04c:	0e 94 7d 56 	call	0xacfa	; 0xacfa <LBRandom>
    e050:	ad 81       	ldd	r26, Y+5	; 0x05
    e052:	be 81       	ldd	r27, Y+6	; 0x06
    e054:	92 96       	adiw	r26, 0x22	; 34
    e056:	8c 93       	st	X, r24
    e058:	12 c0       	rjmp	.+36     	; 0xe07e <get_cpu_joypad_state+0x1c0>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    e05a:	8b 2d       	mov	r24, r11
    e05c:	0e 94 3b 6f 	call	0xde76	; 0xde76 <get_cpu_goal_direction>
    e060:	ed 81       	ldd	r30, Y+5	; 0x05
    e062:	fe 81       	ldd	r31, Y+6	; 0x06
    e064:	95 8f       	std	Z+29, r25	; 0x1d
    e066:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    e068:	80 31       	cpi	r24, 0x10	; 16
    e06a:	91 05       	cpc	r25, r1
    e06c:	21 f0       	breq	.+8      	; 0xe076 <get_cpu_joypad_state+0x1b8>
    e06e:	80 97       	sbiw	r24, 0x20	; 32
    e070:	11 f0       	breq	.+4      	; 0xe076 <get_cpu_joypad_state+0x1b8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    e072:	32 a2       	std	Z+34, r3	; 0x22
    e074:	04 c0       	rjmp	.+8      	; 0xe07e <get_cpu_joypad_state+0x1c0>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    e076:	ad 81       	ldd	r26, Y+5	; 0x05
    e078:	be 81       	ldd	r27, Y+6	; 0x06
    e07a:	92 96       	adiw	r26, 0x22	; 34
    e07c:	7c 92       	st	X, r7
		}
		p->held = player->goal_direction;
    e07e:	ed 81       	ldd	r30, Y+5	; 0x05
    e080:	fe 81       	ldd	r31, Y+6	; 0x06
    e082:	84 8d       	ldd	r24, Z+28	; 0x1c
    e084:	95 8d       	ldd	r25, Z+29	; 0x1d
    e086:	d8 01       	movw	r26, r16
    e088:	15 96       	adiw	r26, 0x05	; 5
    e08a:	9c 93       	st	X, r25
    e08c:	8e 93       	st	-X, r24
    e08e:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    e090:	ed 81       	ldd	r30, Y+5	; 0x05
    e092:	fe 81       	ldd	r31, Y+6	; 0x06
    e094:	c3 80       	ldd	r12, Z+3	; 0x03
    e096:	d4 80       	ldd	r13, Z+4	; 0x04
    e098:	e5 80       	ldd	r14, Z+5	; 0x05
    e09a:	f6 80       	ldd	r15, Z+6	; 0x06
    e09c:	24 a1       	ldd	r18, Z+36	; 0x24
    e09e:	35 a1       	ldd	r19, Z+37	; 0x25
    e0a0:	46 a1       	ldd	r20, Z+38	; 0x26
    e0a2:	57 a1       	ldd	r21, Z+39	; 0x27
    e0a4:	c7 01       	movw	r24, r14
    e0a6:	b6 01       	movw	r22, r12
    e0a8:	0e 94 2f 72 	call	0xe45e	; 0xe45e <__cmpsf2>
    e0ac:	88 23       	and	r24, r24
    e0ae:	39 f0       	breq	.+14     	; 0xe0be <get_cpu_joypad_state+0x200>
		player->deadlock_count_x = 0;
    e0b0:	ad 81       	ldd	r26, Y+5	; 0x05
    e0b2:	be 81       	ldd	r27, Y+6	; 0x06
    e0b4:	5f 96       	adiw	r26, 0x1f	; 31
    e0b6:	1c 92       	st	X, r1
    e0b8:	1e 92       	st	-X, r1
    e0ba:	5e 97       	sbiw	r26, 0x1e	; 30
    e0bc:	07 c0       	rjmp	.+14     	; 0xe0cc <get_cpu_joypad_state+0x20e>
	else 
		player->deadlock_count_x++;
    e0be:	ed 81       	ldd	r30, Y+5	; 0x05
    e0c0:	fe 81       	ldd	r31, Y+6	; 0x06
    e0c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    e0c4:	97 8d       	ldd	r25, Z+31	; 0x1f
    e0c6:	01 96       	adiw	r24, 0x01	; 1
    e0c8:	97 8f       	std	Z+31, r25	; 0x1f
    e0ca:	86 8f       	std	Z+30, r24	; 0x1e
	if (player->shared.y != player->old_y)
    e0cc:	ad 81       	ldd	r26, Y+5	; 0x05
    e0ce:	be 81       	ldd	r27, Y+6	; 0x06
    e0d0:	17 96       	adiw	r26, 0x07	; 7
    e0d2:	8d 90       	ld	r8, X+
    e0d4:	9d 90       	ld	r9, X+
    e0d6:	ad 90       	ld	r10, X+
    e0d8:	bc 90       	ld	r11, X
    e0da:	1a 97       	sbiw	r26, 0x0a	; 10
    e0dc:	98 96       	adiw	r26, 0x28	; 40
    e0de:	2d 91       	ld	r18, X+
    e0e0:	3d 91       	ld	r19, X+
    e0e2:	4d 91       	ld	r20, X+
    e0e4:	5c 91       	ld	r21, X
    e0e6:	9b 97       	sbiw	r26, 0x2b	; 43
    e0e8:	c5 01       	movw	r24, r10
    e0ea:	b4 01       	movw	r22, r8
    e0ec:	0e 94 2f 72 	call	0xe45e	; 0xe45e <__cmpsf2>
    e0f0:	88 23       	and	r24, r24
    e0f2:	29 f0       	breq	.+10     	; 0xe0fe <get_cpu_joypad_state+0x240>
		player->deadlock_count_y = 0;
    e0f4:	ed 81       	ldd	r30, Y+5	; 0x05
    e0f6:	fe 81       	ldd	r31, Y+6	; 0x06
    e0f8:	11 a2       	std	Z+33, r1	; 0x21
    e0fa:	10 a2       	std	Z+32, r1	; 0x20
    e0fc:	0b c0       	rjmp	.+22     	; 0xe114 <get_cpu_joypad_state+0x256>
	else
		player->deadlock_count_y++;
    e0fe:	ad 81       	ldd	r26, Y+5	; 0x05
    e100:	be 81       	ldd	r27, Y+6	; 0x06
    e102:	90 96       	adiw	r26, 0x20	; 32
    e104:	8d 91       	ld	r24, X+
    e106:	9c 91       	ld	r25, X
    e108:	91 97       	sbiw	r26, 0x21	; 33
    e10a:	01 96       	adiw	r24, 0x01	; 1
    e10c:	91 96       	adiw	r26, 0x21	; 33
    e10e:	9c 93       	st	X, r25
    e110:	8e 93       	st	-X, r24
    e112:	90 97       	sbiw	r26, 0x20	; 32
	player->old_x = player->shared.x;
    e114:	ed 81       	ldd	r30, Y+5	; 0x05
    e116:	fe 81       	ldd	r31, Y+6	; 0x06
    e118:	c4 a2       	std	Z+36, r12	; 0x24
    e11a:	d5 a2       	std	Z+37, r13	; 0x25
    e11c:	e6 a2       	std	Z+38, r14	; 0x26
    e11e:	f7 a2       	std	Z+39, r15	; 0x27
	player->old_y = player->shared.y;
    e120:	80 a6       	std	Z+40, r8	; 0x28
    e122:	91 a6       	std	Z+41, r9	; 0x29
    e124:	a2 a6       	std	Z+42, r10	; 0x2a
    e126:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    e128:	86 8d       	ldd	r24, Z+30	; 0x1e
    e12a:	97 8d       	ldd	r25, Z+31	; 0x1f
    e12c:	80 34       	cpi	r24, 0x40	; 64
    e12e:	91 40       	sbci	r25, 0x01	; 1
    e130:	90 f0       	brcs	.+36     	; 0xe156 <get_cpu_joypad_state+0x298>
	{
		p->held = button_map(LBRandom(2, 4));
    e132:	64 e0       	ldi	r22, 0x04	; 4
    e134:	70 e0       	ldi	r23, 0x00	; 0
    e136:	82 e0       	ldi	r24, 0x02	; 2
    e138:	90 e0       	ldi	r25, 0x00	; 0
    e13a:	0e 94 7d 56 	call	0xacfa	; 0xacfa <LBRandom>
    e13e:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <button_map>
    e142:	f8 01       	movw	r30, r16
    e144:	95 83       	std	Z+5, r25	; 0x05
    e146:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_x = 0;
    e148:	ad 81       	ldd	r26, Y+5	; 0x05
    e14a:	be 81       	ldd	r27, Y+6	; 0x06
    e14c:	5f 96       	adiw	r26, 0x1f	; 31
    e14e:	1c 92       	st	X, r1
    e150:	1e 92       	st	-X, r1
    e152:	5e 97       	sbiw	r26, 0x1e	; 30
    e154:	40 c0       	rjmp	.+128    	; 0xe1d6 <get_cpu_joypad_state+0x318>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    e156:	ed 81       	ldd	r30, Y+5	; 0x05
    e158:	fe 81       	ldd	r31, Y+6	; 0x06
    e15a:	80 a1       	ldd	r24, Z+32	; 0x20
    e15c:	91 a1       	ldd	r25, Z+33	; 0x21
    e15e:	80 34       	cpi	r24, 0x40	; 64
    e160:	91 40       	sbci	r25, 0x01	; 1
    e162:	90 f0       	brcs	.+36     	; 0xe188 <get_cpu_joypad_state+0x2ca>
	{
		p->held = button_map(LBRandom(0, 2));
    e164:	62 e0       	ldi	r22, 0x02	; 2
    e166:	70 e0       	ldi	r23, 0x00	; 0
    e168:	80 e0       	ldi	r24, 0x00	; 0
    e16a:	90 e0       	ldi	r25, 0x00	; 0
    e16c:	0e 94 7d 56 	call	0xacfa	; 0xacfa <LBRandom>
    e170:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <button_map>
    e174:	d8 01       	movw	r26, r16
    e176:	15 96       	adiw	r26, 0x05	; 5
    e178:	9c 93       	st	X, r25
    e17a:	8e 93       	st	-X, r24
    e17c:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_y = 0;
    e17e:	ed 81       	ldd	r30, Y+5	; 0x05
    e180:	fe 81       	ldd	r31, Y+6	; 0x06
    e182:	11 a2       	std	Z+33, r1	; 0x21
    e184:	10 a2       	std	Z+32, r1	; 0x20
    e186:	27 c0       	rjmp	.+78     	; 0xe1d6 <get_cpu_joypad_state+0x318>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    e188:	20 e0       	ldi	r18, 0x00	; 0
    e18a:	30 e0       	ldi	r19, 0x00	; 0
    e18c:	40 e0       	ldi	r20, 0x00	; 0
    e18e:	5e e3       	ldi	r21, 0x3E	; 62
    e190:	c5 01       	movw	r24, r10
    e192:	b4 01       	movw	r22, r8
    e194:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    e198:	20 e0       	ldi	r18, 0x00	; 0
    e19a:	30 e0       	ldi	r19, 0x00	; 0
    e19c:	40 e4       	ldi	r20, 0x40	; 64
    e19e:	50 e4       	ldi	r21, 0x40	; 64
    e1a0:	0e 94 ca 71 	call	0xe394	; 0xe394 <__subsf3>
    e1a4:	0e 94 9b 72 	call	0xe536	; 0xe536 <__fixsfsi>
    e1a8:	b6 2e       	mov	r11, r22
    e1aa:	20 e0       	ldi	r18, 0x00	; 0
    e1ac:	30 e0       	ldi	r19, 0x00	; 0
    e1ae:	40 e0       	ldi	r20, 0x00	; 0
    e1b0:	5e e3       	ldi	r21, 0x3E	; 62
    e1b2:	c7 01       	movw	r24, r14
    e1b4:	b6 01       	movw	r22, r12
    e1b6:	0e 94 82 73 	call	0xe704	; 0xe704 <__mulsf3>
    e1ba:	0e 94 9b 72 	call	0xe536	; 0xe536 <__fixsfsi>
    e1be:	86 2f       	mov	r24, r22
    e1c0:	2d 81       	ldd	r18, Y+5	; 0x05
    e1c2:	3e 81       	ldd	r19, Y+6	; 0x06
    e1c4:	d9 01       	movw	r26, r18
    e1c6:	12 96       	adiw	r26, 0x02	; 2
    e1c8:	4c 91       	ld	r20, X
    e1ca:	6b 2d       	mov	r22, r11
    e1cc:	0e 94 37 6e 	call	0xdc6e	; 0xdc6e <crash_and_turn>
    e1d0:	ed 81       	ldd	r30, Y+5	; 0x05
    e1d2:	fe 81       	ldd	r31, Y+6	; 0x06
    e1d4:	83 a3       	std	Z+35, r24	; 0x23
}
    e1d6:	26 96       	adiw	r28, 0x06	; 6
    e1d8:	0f b6       	in	r0, 0x3f	; 63
    e1da:	f8 94       	cli
    e1dc:	de bf       	out	0x3e, r29	; 62
    e1de:	0f be       	out	0x3f, r0	; 63
    e1e0:	cd bf       	out	0x3d, r28	; 61
    e1e2:	df 91       	pop	r29
    e1e4:	cf 91       	pop	r28
    e1e6:	1f 91       	pop	r17
    e1e8:	0f 91       	pop	r16
    e1ea:	ff 90       	pop	r15
    e1ec:	ef 90       	pop	r14
    e1ee:	df 90       	pop	r13
    e1f0:	cf 90       	pop	r12
    e1f2:	bf 90       	pop	r11
    e1f4:	af 90       	pop	r10
    e1f6:	9f 90       	pop	r9
    e1f8:	8f 90       	pop	r8
    e1fa:	7f 90       	pop	r7
    e1fc:	6f 90       	pop	r6
    e1fe:	5f 90       	pop	r5
    e200:	4f 90       	pop	r4
    e202:	3f 90       	pop	r3
    e204:	2f 90       	pop	r2
    e206:	08 95       	ret

0000e208 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    e208:	86 e8       	ldi	r24, 0x86	; 134
    e20a:	9b e0       	ldi	r25, 0x0B	; 11
    e20c:	0e 94 27 48 	call	0x904e	; 0x904e <InitMusicPlayer>
	SetMasterVolume(0xff);
    e210:	8f ef       	ldi	r24, 0xFF	; 255
    e212:	0e 94 b9 4b 	call	0x9772	; 0x9772 <SetMasterVolume>
	SetTileTable(tiles_data);
    e216:	86 e9       	ldi	r24, 0x96	; 150
    e218:	99 e4       	ldi	r25, 0x49	; 73
    e21a:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e21e:	85 e0       	ldi	r24, 0x05	; 5
    e220:	90 e4       	ldi	r25, 0x40	; 64
    e222:	0e 94 c2 45 	call	0x8b84	; 0x8b84 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    e226:	8b e9       	ldi	r24, 0x9B	; 155
    e228:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    e22c:	60 e0       	ldi	r22, 0x00	; 0
    e22e:	83 e0       	ldi	r24, 0x03	; 3
    e230:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <FadeIn>
	ClearVram();
    e234:	0e 94 c7 45 	call	0x8b8e	; 0x8b8e <ClearVram>
	init_scores(&scores);
    e238:	84 ec       	ldi	r24, 0xC4	; 196
    e23a:	9b e0       	ldi	r25, 0x0B	; 11
    e23c:	0e 94 c1 56 	call	0xad82	; 0xad82 <init_scores>
	init_handles(&handles);
    e240:	8b ee       	ldi	r24, 0xEB	; 235
    e242:	9b e0       	ldi	r25, 0x0B	; 11
    e244:	0e 94 cd 56 	call	0xad9a	; 0xad9a <init_handles>
	init_game_state();
    e248:	0e 94 25 58 	call	0xb04a	; 0xb04a <init_game_state>
	load_splash();
    e24c:	0e 94 a7 65 	call	0xcb4e	; 0xcb4e <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    e250:	81 e0       	ldi	r24, 0x01	; 1
    e252:	90 e0       	ldi	r25, 0x00	; 0
    e254:	0e 94 07 54 	call	0xa80e	; 0xa80e <WaitVsync>
		switch (game.current_screen)
    e258:	80 91 0b 0c 	lds	r24, 0x0C0B
    e25c:	81 30       	cpi	r24, 0x01	; 1
    e25e:	91 f0       	breq	.+36     	; 0xe284 <main+0x7c>
    e260:	28 f0       	brcs	.+10     	; 0xe26c <main+0x64>
    e262:	82 30       	cpi	r24, 0x02	; 2
    e264:	d9 f0       	breq	.+54     	; 0xe29c <main+0x94>
    e266:	83 30       	cpi	r24, 0x03	; 3
    e268:	51 f1       	breq	.+84     	; 0xe2be <main+0xb6>
    e26a:	56 c0       	rjmp	.+172    	; 0xe318 <main+0x110>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    e26c:	60 e0       	ldi	r22, 0x00	; 0
    e26e:	8d ea       	ldi	r24, 0xAD	; 173
    e270:	9c e0       	ldi	r25, 0x0C	; 12
    e272:	0e 94 f5 54 	call	0xa9ea	; 0xa9ea <LBGetJoyPadState>
				update_splash(&p1, &p2);
    e276:	64 ee       	ldi	r22, 0xE4	; 228
    e278:	7b e0       	ldi	r23, 0x0B	; 11
    e27a:	8d ea       	ldi	r24, 0xAD	; 173
    e27c:	9c e0       	ldi	r25, 0x0C	; 12
    e27e:	0e 94 fd 6c 	call	0xd9fa	; 0xd9fa <update_splash>
				break;
    e282:	4a c0       	rjmp	.+148    	; 0xe318 <main+0x110>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    e284:	60 e0       	ldi	r22, 0x00	; 0
    e286:	8d ea       	ldi	r24, 0xAD	; 173
    e288:	9c e0       	ldi	r25, 0x0C	; 12
    e28a:	0e 94 f5 54 	call	0xa9ea	; 0xa9ea <LBGetJoyPadState>
				update_tank_rank(&p1, &p2);
    e28e:	64 ee       	ldi	r22, 0xE4	; 228
    e290:	7b e0       	ldi	r23, 0x0B	; 11
    e292:	8d ea       	ldi	r24, 0xAD	; 173
    e294:	9c e0       	ldi	r25, 0x0C	; 12
    e296:	0e 94 9c 6a 	call	0xd538	; 0xd538 <update_tank_rank>
				break;
    e29a:	3e c0       	rjmp	.+124    	; 0xe318 <main+0x110>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    e29c:	60 e0       	ldi	r22, 0x00	; 0
    e29e:	8d ea       	ldi	r24, 0xAD	; 173
    e2a0:	9c e0       	ldi	r25, 0x0C	; 12
    e2a2:	0e 94 f5 54 	call	0xa9ea	; 0xa9ea <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    e2a6:	61 e0       	ldi	r22, 0x01	; 1
    e2a8:	84 ee       	ldi	r24, 0xE4	; 228
    e2aa:	9b e0       	ldi	r25, 0x0B	; 11
    e2ac:	0e 94 f5 54 	call	0xa9ea	; 0xa9ea <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    e2b0:	64 ee       	ldi	r22, 0xE4	; 228
    e2b2:	7b e0       	ldi	r23, 0x0B	; 11
    e2b4:	8d ea       	ldi	r24, 0xAD	; 173
    e2b6:	9c e0       	ldi	r25, 0x0C	; 12
    e2b8:	0e 94 d3 6d 	call	0xdba6	; 0xdba6 <update_handle_select>
				break;
    e2bc:	2d c0       	rjmp	.+90     	; 0xe318 <main+0x110>
			case LEVEL:
				if (game.selection == PVCPU)
    e2be:	80 91 17 0c 	lds	r24, 0x0C17
    e2c2:	81 11       	cpse	r24, r1
    e2c4:	06 c0       	rjmp	.+12     	; 0xe2d2 <main+0xca>
				{
					LBGetJoyPadState(&p1, 0);
    e2c6:	60 e0       	ldi	r22, 0x00	; 0
    e2c8:	8d ea       	ldi	r24, 0xAD	; 173
    e2ca:	9c e0       	ldi	r25, 0x0C	; 12
    e2cc:	0e 94 f5 54 	call	0xa9ea	; 0xa9ea <LBGetJoyPadState>
    e2d0:	0a c0       	rjmp	.+20     	; 0xe2e6 <main+0xde>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    e2d2:	83 30       	cpi	r24, 0x03	; 3
    e2d4:	89 f4       	brne	.+34     	; 0xe2f8 <main+0xf0>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    e2d6:	4d ea       	ldi	r20, 0xAD	; 173
    e2d8:	5c e0       	ldi	r21, 0x0C	; 12
    e2da:	63 ea       	ldi	r22, 0xA3	; 163
    e2dc:	7f e0       	ldi	r23, 0x0F	; 15
    e2de:	85 e3       	ldi	r24, 0x35	; 53
    e2e0:	9c e0       	ldi	r25, 0x0C	; 12
    e2e2:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    e2e6:	44 ee       	ldi	r20, 0xE4	; 228
    e2e8:	5b e0       	ldi	r21, 0x0B	; 11
    e2ea:	65 e3       	ldi	r22, 0x35	; 53
    e2ec:	7c e0       	ldi	r23, 0x0C	; 12
    e2ee:	83 ea       	ldi	r24, 0xA3	; 163
    e2f0:	9f e0       	ldi	r25, 0x0F	; 15
    e2f2:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <get_cpu_joypad_state>
    e2f6:	0a c0       	rjmp	.+20     	; 0xe30c <main+0x104>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e2f8:	60 e0       	ldi	r22, 0x00	; 0
    e2fa:	8d ea       	ldi	r24, 0xAD	; 173
    e2fc:	9c e0       	ldi	r25, 0x0C	; 12
    e2fe:	0e 94 f5 54 	call	0xa9ea	; 0xa9ea <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e302:	61 e0       	ldi	r22, 0x01	; 1
    e304:	84 ee       	ldi	r24, 0xE4	; 228
    e306:	9b e0       	ldi	r25, 0x0B	; 11
    e308:	0e 94 f5 54 	call	0xa9ea	; 0xa9ea <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    e30c:	64 ee       	ldi	r22, 0xE4	; 228
    e30e:	7b e0       	ldi	r23, 0x0B	; 11
    e310:	8d ea       	ldi	r24, 0xAD	; 173
    e312:	9c e0       	ldi	r25, 0x0C	; 12
    e314:	0e 94 c3 68 	call	0xd186	; 0xd186 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e318:	80 91 04 01 	lds	r24, 0x0104
    e31c:	90 91 05 01 	lds	r25, 0x0105
    e320:	01 96       	adiw	r24, 0x01	; 1
    e322:	90 93 05 01 	sts	0x0105, r25
    e326:	80 93 04 01 	sts	0x0104, r24
	}
    e32a:	92 cf       	rjmp	.-220    	; 0xe250 <main+0x48>

0000e32c <__udivmodqi4>:
    e32c:	99 1b       	sub	r25, r25
    e32e:	79 e0       	ldi	r23, 0x09	; 9
    e330:	04 c0       	rjmp	.+8      	; 0xe33a <__udivmodqi4_ep>

0000e332 <__udivmodqi4_loop>:
    e332:	99 1f       	adc	r25, r25
    e334:	96 17       	cp	r25, r22
    e336:	08 f0       	brcs	.+2      	; 0xe33a <__udivmodqi4_ep>
    e338:	96 1b       	sub	r25, r22

0000e33a <__udivmodqi4_ep>:
    e33a:	88 1f       	adc	r24, r24
    e33c:	7a 95       	dec	r23
    e33e:	c9 f7       	brne	.-14     	; 0xe332 <__udivmodqi4_loop>
    e340:	80 95       	com	r24
    e342:	08 95       	ret

0000e344 <__udivmodhi4>:
    e344:	aa 1b       	sub	r26, r26
    e346:	bb 1b       	sub	r27, r27
    e348:	51 e1       	ldi	r21, 0x11	; 17
    e34a:	07 c0       	rjmp	.+14     	; 0xe35a <__udivmodhi4_ep>

0000e34c <__udivmodhi4_loop>:
    e34c:	aa 1f       	adc	r26, r26
    e34e:	bb 1f       	adc	r27, r27
    e350:	a6 17       	cp	r26, r22
    e352:	b7 07       	cpc	r27, r23
    e354:	10 f0       	brcs	.+4      	; 0xe35a <__udivmodhi4_ep>
    e356:	a6 1b       	sub	r26, r22
    e358:	b7 0b       	sbc	r27, r23

0000e35a <__udivmodhi4_ep>:
    e35a:	88 1f       	adc	r24, r24
    e35c:	99 1f       	adc	r25, r25
    e35e:	5a 95       	dec	r21
    e360:	a9 f7       	brne	.-22     	; 0xe34c <__udivmodhi4_loop>
    e362:	80 95       	com	r24
    e364:	90 95       	com	r25
    e366:	bc 01       	movw	r22, r24
    e368:	cd 01       	movw	r24, r26
    e36a:	08 95       	ret

0000e36c <__divmodhi4>:
    e36c:	97 fb       	bst	r25, 7
    e36e:	07 2e       	mov	r0, r23
    e370:	16 f4       	brtc	.+4      	; 0xe376 <__divmodhi4+0xa>
    e372:	00 94       	com	r0
    e374:	07 d0       	rcall	.+14     	; 0xe384 <__divmodhi4_neg1>
    e376:	77 fd       	sbrc	r23, 7
    e378:	09 d0       	rcall	.+18     	; 0xe38c <__divmodhi4_neg2>
    e37a:	0e 94 a2 71 	call	0xe344	; 0xe344 <__udivmodhi4>
    e37e:	07 fc       	sbrc	r0, 7
    e380:	05 d0       	rcall	.+10     	; 0xe38c <__divmodhi4_neg2>
    e382:	3e f4       	brtc	.+14     	; 0xe392 <__divmodhi4_exit>

0000e384 <__divmodhi4_neg1>:
    e384:	90 95       	com	r25
    e386:	81 95       	neg	r24
    e388:	9f 4f       	sbci	r25, 0xFF	; 255
    e38a:	08 95       	ret

0000e38c <__divmodhi4_neg2>:
    e38c:	70 95       	com	r23
    e38e:	61 95       	neg	r22
    e390:	7f 4f       	sbci	r23, 0xFF	; 255

0000e392 <__divmodhi4_exit>:
    e392:	08 95       	ret

0000e394 <__subsf3>:
    e394:	50 58       	subi	r21, 0x80	; 128

0000e396 <__addsf3>:
    e396:	bb 27       	eor	r27, r27
    e398:	aa 27       	eor	r26, r26
    e39a:	0e d0       	rcall	.+28     	; 0xe3b8 <__addsf3x>
    e39c:	75 c1       	rjmp	.+746    	; 0xe688 <__fp_round>
    e39e:	66 d1       	rcall	.+716    	; 0xe66c <__fp_pscA>
    e3a0:	30 f0       	brcs	.+12     	; 0xe3ae <__addsf3+0x18>
    e3a2:	6b d1       	rcall	.+726    	; 0xe67a <__fp_pscB>
    e3a4:	20 f0       	brcs	.+8      	; 0xe3ae <__addsf3+0x18>
    e3a6:	31 f4       	brne	.+12     	; 0xe3b4 <__addsf3+0x1e>
    e3a8:	9f 3f       	cpi	r25, 0xFF	; 255
    e3aa:	11 f4       	brne	.+4      	; 0xe3b0 <__addsf3+0x1a>
    e3ac:	1e f4       	brtc	.+6      	; 0xe3b4 <__addsf3+0x1e>
    e3ae:	5b c1       	rjmp	.+694    	; 0xe666 <__fp_nan>
    e3b0:	0e f4       	brtc	.+2      	; 0xe3b4 <__addsf3+0x1e>
    e3b2:	e0 95       	com	r30
    e3b4:	e7 fb       	bst	r30, 7
    e3b6:	51 c1       	rjmp	.+674    	; 0xe65a <__fp_inf>

0000e3b8 <__addsf3x>:
    e3b8:	e9 2f       	mov	r30, r25
    e3ba:	77 d1       	rcall	.+750    	; 0xe6aa <__fp_split3>
    e3bc:	80 f3       	brcs	.-32     	; 0xe39e <__addsf3+0x8>
    e3be:	ba 17       	cp	r27, r26
    e3c0:	62 07       	cpc	r22, r18
    e3c2:	73 07       	cpc	r23, r19
    e3c4:	84 07       	cpc	r24, r20
    e3c6:	95 07       	cpc	r25, r21
    e3c8:	18 f0       	brcs	.+6      	; 0xe3d0 <__addsf3x+0x18>
    e3ca:	71 f4       	brne	.+28     	; 0xe3e8 <__addsf3x+0x30>
    e3cc:	9e f5       	brtc	.+102    	; 0xe434 <__addsf3x+0x7c>
    e3ce:	8f c1       	rjmp	.+798    	; 0xe6ee <__fp_zero>
    e3d0:	0e f4       	brtc	.+2      	; 0xe3d4 <__addsf3x+0x1c>
    e3d2:	e0 95       	com	r30
    e3d4:	0b 2e       	mov	r0, r27
    e3d6:	ba 2f       	mov	r27, r26
    e3d8:	a0 2d       	mov	r26, r0
    e3da:	0b 01       	movw	r0, r22
    e3dc:	b9 01       	movw	r22, r18
    e3de:	90 01       	movw	r18, r0
    e3e0:	0c 01       	movw	r0, r24
    e3e2:	ca 01       	movw	r24, r20
    e3e4:	a0 01       	movw	r20, r0
    e3e6:	11 24       	eor	r1, r1
    e3e8:	ff 27       	eor	r31, r31
    e3ea:	59 1b       	sub	r21, r25
    e3ec:	99 f0       	breq	.+38     	; 0xe414 <__addsf3x+0x5c>
    e3ee:	59 3f       	cpi	r21, 0xF9	; 249
    e3f0:	50 f4       	brcc	.+20     	; 0xe406 <__addsf3x+0x4e>
    e3f2:	50 3e       	cpi	r21, 0xE0	; 224
    e3f4:	68 f1       	brcs	.+90     	; 0xe450 <__addsf3x+0x98>
    e3f6:	1a 16       	cp	r1, r26
    e3f8:	f0 40       	sbci	r31, 0x00	; 0
    e3fa:	a2 2f       	mov	r26, r18
    e3fc:	23 2f       	mov	r18, r19
    e3fe:	34 2f       	mov	r19, r20
    e400:	44 27       	eor	r20, r20
    e402:	58 5f       	subi	r21, 0xF8	; 248
    e404:	f3 cf       	rjmp	.-26     	; 0xe3ec <__addsf3x+0x34>
    e406:	46 95       	lsr	r20
    e408:	37 95       	ror	r19
    e40a:	27 95       	ror	r18
    e40c:	a7 95       	ror	r26
    e40e:	f0 40       	sbci	r31, 0x00	; 0
    e410:	53 95       	inc	r21
    e412:	c9 f7       	brne	.-14     	; 0xe406 <__addsf3x+0x4e>
    e414:	7e f4       	brtc	.+30     	; 0xe434 <__addsf3x+0x7c>
    e416:	1f 16       	cp	r1, r31
    e418:	ba 0b       	sbc	r27, r26
    e41a:	62 0b       	sbc	r22, r18
    e41c:	73 0b       	sbc	r23, r19
    e41e:	84 0b       	sbc	r24, r20
    e420:	ba f0       	brmi	.+46     	; 0xe450 <__addsf3x+0x98>
    e422:	91 50       	subi	r25, 0x01	; 1
    e424:	a1 f0       	breq	.+40     	; 0xe44e <__addsf3x+0x96>
    e426:	ff 0f       	add	r31, r31
    e428:	bb 1f       	adc	r27, r27
    e42a:	66 1f       	adc	r22, r22
    e42c:	77 1f       	adc	r23, r23
    e42e:	88 1f       	adc	r24, r24
    e430:	c2 f7       	brpl	.-16     	; 0xe422 <__addsf3x+0x6a>
    e432:	0e c0       	rjmp	.+28     	; 0xe450 <__addsf3x+0x98>
    e434:	ba 0f       	add	r27, r26
    e436:	62 1f       	adc	r22, r18
    e438:	73 1f       	adc	r23, r19
    e43a:	84 1f       	adc	r24, r20
    e43c:	48 f4       	brcc	.+18     	; 0xe450 <__addsf3x+0x98>
    e43e:	87 95       	ror	r24
    e440:	77 95       	ror	r23
    e442:	67 95       	ror	r22
    e444:	b7 95       	ror	r27
    e446:	f7 95       	ror	r31
    e448:	9e 3f       	cpi	r25, 0xFE	; 254
    e44a:	08 f0       	brcs	.+2      	; 0xe44e <__addsf3x+0x96>
    e44c:	b3 cf       	rjmp	.-154    	; 0xe3b4 <__addsf3+0x1e>
    e44e:	93 95       	inc	r25
    e450:	88 0f       	add	r24, r24
    e452:	08 f0       	brcs	.+2      	; 0xe456 <__addsf3x+0x9e>
    e454:	99 27       	eor	r25, r25
    e456:	ee 0f       	add	r30, r30
    e458:	97 95       	ror	r25
    e45a:	87 95       	ror	r24
    e45c:	08 95       	ret

0000e45e <__cmpsf2>:
    e45e:	d9 d0       	rcall	.+434    	; 0xe612 <__fp_cmp>
    e460:	08 f4       	brcc	.+2      	; 0xe464 <__cmpsf2+0x6>
    e462:	81 e0       	ldi	r24, 0x01	; 1
    e464:	08 95       	ret

0000e466 <__divsf3>:
    e466:	0c d0       	rcall	.+24     	; 0xe480 <__divsf3x>
    e468:	0f c1       	rjmp	.+542    	; 0xe688 <__fp_round>
    e46a:	07 d1       	rcall	.+526    	; 0xe67a <__fp_pscB>
    e46c:	40 f0       	brcs	.+16     	; 0xe47e <__divsf3+0x18>
    e46e:	fe d0       	rcall	.+508    	; 0xe66c <__fp_pscA>
    e470:	30 f0       	brcs	.+12     	; 0xe47e <__divsf3+0x18>
    e472:	21 f4       	brne	.+8      	; 0xe47c <__divsf3+0x16>
    e474:	5f 3f       	cpi	r21, 0xFF	; 255
    e476:	19 f0       	breq	.+6      	; 0xe47e <__divsf3+0x18>
    e478:	f0 c0       	rjmp	.+480    	; 0xe65a <__fp_inf>
    e47a:	51 11       	cpse	r21, r1
    e47c:	39 c1       	rjmp	.+626    	; 0xe6f0 <__fp_szero>
    e47e:	f3 c0       	rjmp	.+486    	; 0xe666 <__fp_nan>

0000e480 <__divsf3x>:
    e480:	14 d1       	rcall	.+552    	; 0xe6aa <__fp_split3>
    e482:	98 f3       	brcs	.-26     	; 0xe46a <__divsf3+0x4>

0000e484 <__divsf3_pse>:
    e484:	99 23       	and	r25, r25
    e486:	c9 f3       	breq	.-14     	; 0xe47a <__divsf3+0x14>
    e488:	55 23       	and	r21, r21
    e48a:	b1 f3       	breq	.-20     	; 0xe478 <__divsf3+0x12>
    e48c:	95 1b       	sub	r25, r21
    e48e:	55 0b       	sbc	r21, r21
    e490:	bb 27       	eor	r27, r27
    e492:	aa 27       	eor	r26, r26
    e494:	62 17       	cp	r22, r18
    e496:	73 07       	cpc	r23, r19
    e498:	84 07       	cpc	r24, r20
    e49a:	38 f0       	brcs	.+14     	; 0xe4aa <__divsf3_pse+0x26>
    e49c:	9f 5f       	subi	r25, 0xFF	; 255
    e49e:	5f 4f       	sbci	r21, 0xFF	; 255
    e4a0:	22 0f       	add	r18, r18
    e4a2:	33 1f       	adc	r19, r19
    e4a4:	44 1f       	adc	r20, r20
    e4a6:	aa 1f       	adc	r26, r26
    e4a8:	a9 f3       	breq	.-22     	; 0xe494 <__divsf3_pse+0x10>
    e4aa:	33 d0       	rcall	.+102    	; 0xe512 <__divsf3_pse+0x8e>
    e4ac:	0e 2e       	mov	r0, r30
    e4ae:	3a f0       	brmi	.+14     	; 0xe4be <__divsf3_pse+0x3a>
    e4b0:	e0 e8       	ldi	r30, 0x80	; 128
    e4b2:	30 d0       	rcall	.+96     	; 0xe514 <__divsf3_pse+0x90>
    e4b4:	91 50       	subi	r25, 0x01	; 1
    e4b6:	50 40       	sbci	r21, 0x00	; 0
    e4b8:	e6 95       	lsr	r30
    e4ba:	00 1c       	adc	r0, r0
    e4bc:	ca f7       	brpl	.-14     	; 0xe4b0 <__divsf3_pse+0x2c>
    e4be:	29 d0       	rcall	.+82     	; 0xe512 <__divsf3_pse+0x8e>
    e4c0:	fe 2f       	mov	r31, r30
    e4c2:	27 d0       	rcall	.+78     	; 0xe512 <__divsf3_pse+0x8e>
    e4c4:	66 0f       	add	r22, r22
    e4c6:	77 1f       	adc	r23, r23
    e4c8:	88 1f       	adc	r24, r24
    e4ca:	bb 1f       	adc	r27, r27
    e4cc:	26 17       	cp	r18, r22
    e4ce:	37 07       	cpc	r19, r23
    e4d0:	48 07       	cpc	r20, r24
    e4d2:	ab 07       	cpc	r26, r27
    e4d4:	b0 e8       	ldi	r27, 0x80	; 128
    e4d6:	09 f0       	breq	.+2      	; 0xe4da <__divsf3_pse+0x56>
    e4d8:	bb 0b       	sbc	r27, r27
    e4da:	80 2d       	mov	r24, r0
    e4dc:	bf 01       	movw	r22, r30
    e4de:	ff 27       	eor	r31, r31
    e4e0:	93 58       	subi	r25, 0x83	; 131
    e4e2:	5f 4f       	sbci	r21, 0xFF	; 255
    e4e4:	2a f0       	brmi	.+10     	; 0xe4f0 <__divsf3_pse+0x6c>
    e4e6:	9e 3f       	cpi	r25, 0xFE	; 254
    e4e8:	51 05       	cpc	r21, r1
    e4ea:	68 f0       	brcs	.+26     	; 0xe506 <__divsf3_pse+0x82>
    e4ec:	b6 c0       	rjmp	.+364    	; 0xe65a <__fp_inf>
    e4ee:	00 c1       	rjmp	.+512    	; 0xe6f0 <__fp_szero>
    e4f0:	5f 3f       	cpi	r21, 0xFF	; 255
    e4f2:	ec f3       	brlt	.-6      	; 0xe4ee <__divsf3_pse+0x6a>
    e4f4:	98 3e       	cpi	r25, 0xE8	; 232
    e4f6:	dc f3       	brlt	.-10     	; 0xe4ee <__divsf3_pse+0x6a>
    e4f8:	86 95       	lsr	r24
    e4fa:	77 95       	ror	r23
    e4fc:	67 95       	ror	r22
    e4fe:	b7 95       	ror	r27
    e500:	f7 95       	ror	r31
    e502:	9f 5f       	subi	r25, 0xFF	; 255
    e504:	c9 f7       	brne	.-14     	; 0xe4f8 <__divsf3_pse+0x74>
    e506:	88 0f       	add	r24, r24
    e508:	91 1d       	adc	r25, r1
    e50a:	96 95       	lsr	r25
    e50c:	87 95       	ror	r24
    e50e:	97 f9       	bld	r25, 7
    e510:	08 95       	ret
    e512:	e1 e0       	ldi	r30, 0x01	; 1
    e514:	66 0f       	add	r22, r22
    e516:	77 1f       	adc	r23, r23
    e518:	88 1f       	adc	r24, r24
    e51a:	bb 1f       	adc	r27, r27
    e51c:	62 17       	cp	r22, r18
    e51e:	73 07       	cpc	r23, r19
    e520:	84 07       	cpc	r24, r20
    e522:	ba 07       	cpc	r27, r26
    e524:	20 f0       	brcs	.+8      	; 0xe52e <__divsf3_pse+0xaa>
    e526:	62 1b       	sub	r22, r18
    e528:	73 0b       	sbc	r23, r19
    e52a:	84 0b       	sbc	r24, r20
    e52c:	ba 0b       	sbc	r27, r26
    e52e:	ee 1f       	adc	r30, r30
    e530:	88 f7       	brcc	.-30     	; 0xe514 <__divsf3_pse+0x90>
    e532:	e0 95       	com	r30
    e534:	08 95       	ret

0000e536 <__fixsfsi>:
    e536:	04 d0       	rcall	.+8      	; 0xe540 <__fixunssfsi>
    e538:	68 94       	set
    e53a:	b1 11       	cpse	r27, r1
    e53c:	d9 c0       	rjmp	.+434    	; 0xe6f0 <__fp_szero>
    e53e:	08 95       	ret

0000e540 <__fixunssfsi>:
    e540:	bc d0       	rcall	.+376    	; 0xe6ba <__fp_splitA>
    e542:	88 f0       	brcs	.+34     	; 0xe566 <__fixunssfsi+0x26>
    e544:	9f 57       	subi	r25, 0x7F	; 127
    e546:	90 f0       	brcs	.+36     	; 0xe56c <__fixunssfsi+0x2c>
    e548:	b9 2f       	mov	r27, r25
    e54a:	99 27       	eor	r25, r25
    e54c:	b7 51       	subi	r27, 0x17	; 23
    e54e:	a0 f0       	brcs	.+40     	; 0xe578 <__fixunssfsi+0x38>
    e550:	d1 f0       	breq	.+52     	; 0xe586 <__fixunssfsi+0x46>
    e552:	66 0f       	add	r22, r22
    e554:	77 1f       	adc	r23, r23
    e556:	88 1f       	adc	r24, r24
    e558:	99 1f       	adc	r25, r25
    e55a:	1a f0       	brmi	.+6      	; 0xe562 <__fixunssfsi+0x22>
    e55c:	ba 95       	dec	r27
    e55e:	c9 f7       	brne	.-14     	; 0xe552 <__fixunssfsi+0x12>
    e560:	12 c0       	rjmp	.+36     	; 0xe586 <__fixunssfsi+0x46>
    e562:	b1 30       	cpi	r27, 0x01	; 1
    e564:	81 f0       	breq	.+32     	; 0xe586 <__fixunssfsi+0x46>
    e566:	c3 d0       	rcall	.+390    	; 0xe6ee <__fp_zero>
    e568:	b1 e0       	ldi	r27, 0x01	; 1
    e56a:	08 95       	ret
    e56c:	c0 c0       	rjmp	.+384    	; 0xe6ee <__fp_zero>
    e56e:	67 2f       	mov	r22, r23
    e570:	78 2f       	mov	r23, r24
    e572:	88 27       	eor	r24, r24
    e574:	b8 5f       	subi	r27, 0xF8	; 248
    e576:	39 f0       	breq	.+14     	; 0xe586 <__fixunssfsi+0x46>
    e578:	b9 3f       	cpi	r27, 0xF9	; 249
    e57a:	cc f3       	brlt	.-14     	; 0xe56e <__fixunssfsi+0x2e>
    e57c:	86 95       	lsr	r24
    e57e:	77 95       	ror	r23
    e580:	67 95       	ror	r22
    e582:	b3 95       	inc	r27
    e584:	d9 f7       	brne	.-10     	; 0xe57c <__fixunssfsi+0x3c>
    e586:	3e f4       	brtc	.+14     	; 0xe596 <__fixunssfsi+0x56>
    e588:	90 95       	com	r25
    e58a:	80 95       	com	r24
    e58c:	70 95       	com	r23
    e58e:	61 95       	neg	r22
    e590:	7f 4f       	sbci	r23, 0xFF	; 255
    e592:	8f 4f       	sbci	r24, 0xFF	; 255
    e594:	9f 4f       	sbci	r25, 0xFF	; 255
    e596:	08 95       	ret

0000e598 <__floatunsisf>:
    e598:	e8 94       	clt
    e59a:	09 c0       	rjmp	.+18     	; 0xe5ae <__floatsisf+0x12>

0000e59c <__floatsisf>:
    e59c:	97 fb       	bst	r25, 7
    e59e:	3e f4       	brtc	.+14     	; 0xe5ae <__floatsisf+0x12>
    e5a0:	90 95       	com	r25
    e5a2:	80 95       	com	r24
    e5a4:	70 95       	com	r23
    e5a6:	61 95       	neg	r22
    e5a8:	7f 4f       	sbci	r23, 0xFF	; 255
    e5aa:	8f 4f       	sbci	r24, 0xFF	; 255
    e5ac:	9f 4f       	sbci	r25, 0xFF	; 255
    e5ae:	99 23       	and	r25, r25
    e5b0:	a9 f0       	breq	.+42     	; 0xe5dc <__floatsisf+0x40>
    e5b2:	f9 2f       	mov	r31, r25
    e5b4:	96 e9       	ldi	r25, 0x96	; 150
    e5b6:	bb 27       	eor	r27, r27
    e5b8:	93 95       	inc	r25
    e5ba:	f6 95       	lsr	r31
    e5bc:	87 95       	ror	r24
    e5be:	77 95       	ror	r23
    e5c0:	67 95       	ror	r22
    e5c2:	b7 95       	ror	r27
    e5c4:	f1 11       	cpse	r31, r1
    e5c6:	f8 cf       	rjmp	.-16     	; 0xe5b8 <__floatsisf+0x1c>
    e5c8:	fa f4       	brpl	.+62     	; 0xe608 <__floatsisf+0x6c>
    e5ca:	bb 0f       	add	r27, r27
    e5cc:	11 f4       	brne	.+4      	; 0xe5d2 <__floatsisf+0x36>
    e5ce:	60 ff       	sbrs	r22, 0
    e5d0:	1b c0       	rjmp	.+54     	; 0xe608 <__floatsisf+0x6c>
    e5d2:	6f 5f       	subi	r22, 0xFF	; 255
    e5d4:	7f 4f       	sbci	r23, 0xFF	; 255
    e5d6:	8f 4f       	sbci	r24, 0xFF	; 255
    e5d8:	9f 4f       	sbci	r25, 0xFF	; 255
    e5da:	16 c0       	rjmp	.+44     	; 0xe608 <__floatsisf+0x6c>
    e5dc:	88 23       	and	r24, r24
    e5de:	11 f0       	breq	.+4      	; 0xe5e4 <__floatsisf+0x48>
    e5e0:	96 e9       	ldi	r25, 0x96	; 150
    e5e2:	11 c0       	rjmp	.+34     	; 0xe606 <__floatsisf+0x6a>
    e5e4:	77 23       	and	r23, r23
    e5e6:	21 f0       	breq	.+8      	; 0xe5f0 <__floatsisf+0x54>
    e5e8:	9e e8       	ldi	r25, 0x8E	; 142
    e5ea:	87 2f       	mov	r24, r23
    e5ec:	76 2f       	mov	r23, r22
    e5ee:	05 c0       	rjmp	.+10     	; 0xe5fa <__floatsisf+0x5e>
    e5f0:	66 23       	and	r22, r22
    e5f2:	71 f0       	breq	.+28     	; 0xe610 <__floatsisf+0x74>
    e5f4:	96 e8       	ldi	r25, 0x86	; 134
    e5f6:	86 2f       	mov	r24, r22
    e5f8:	70 e0       	ldi	r23, 0x00	; 0
    e5fa:	60 e0       	ldi	r22, 0x00	; 0
    e5fc:	2a f0       	brmi	.+10     	; 0xe608 <__floatsisf+0x6c>
    e5fe:	9a 95       	dec	r25
    e600:	66 0f       	add	r22, r22
    e602:	77 1f       	adc	r23, r23
    e604:	88 1f       	adc	r24, r24
    e606:	da f7       	brpl	.-10     	; 0xe5fe <__floatsisf+0x62>
    e608:	88 0f       	add	r24, r24
    e60a:	96 95       	lsr	r25
    e60c:	87 95       	ror	r24
    e60e:	97 f9       	bld	r25, 7
    e610:	08 95       	ret

0000e612 <__fp_cmp>:
    e612:	99 0f       	add	r25, r25
    e614:	00 08       	sbc	r0, r0
    e616:	55 0f       	add	r21, r21
    e618:	aa 0b       	sbc	r26, r26
    e61a:	e0 e8       	ldi	r30, 0x80	; 128
    e61c:	fe ef       	ldi	r31, 0xFE	; 254
    e61e:	16 16       	cp	r1, r22
    e620:	17 06       	cpc	r1, r23
    e622:	e8 07       	cpc	r30, r24
    e624:	f9 07       	cpc	r31, r25
    e626:	c0 f0       	brcs	.+48     	; 0xe658 <__fp_cmp+0x46>
    e628:	12 16       	cp	r1, r18
    e62a:	13 06       	cpc	r1, r19
    e62c:	e4 07       	cpc	r30, r20
    e62e:	f5 07       	cpc	r31, r21
    e630:	98 f0       	brcs	.+38     	; 0xe658 <__fp_cmp+0x46>
    e632:	62 1b       	sub	r22, r18
    e634:	73 0b       	sbc	r23, r19
    e636:	84 0b       	sbc	r24, r20
    e638:	95 0b       	sbc	r25, r21
    e63a:	39 f4       	brne	.+14     	; 0xe64a <__fp_cmp+0x38>
    e63c:	0a 26       	eor	r0, r26
    e63e:	61 f0       	breq	.+24     	; 0xe658 <__fp_cmp+0x46>
    e640:	23 2b       	or	r18, r19
    e642:	24 2b       	or	r18, r20
    e644:	25 2b       	or	r18, r21
    e646:	21 f4       	brne	.+8      	; 0xe650 <__fp_cmp+0x3e>
    e648:	08 95       	ret
    e64a:	0a 26       	eor	r0, r26
    e64c:	09 f4       	brne	.+2      	; 0xe650 <__fp_cmp+0x3e>
    e64e:	a1 40       	sbci	r26, 0x01	; 1
    e650:	a6 95       	lsr	r26
    e652:	8f ef       	ldi	r24, 0xFF	; 255
    e654:	81 1d       	adc	r24, r1
    e656:	81 1d       	adc	r24, r1
    e658:	08 95       	ret

0000e65a <__fp_inf>:
    e65a:	97 f9       	bld	r25, 7
    e65c:	9f 67       	ori	r25, 0x7F	; 127
    e65e:	80 e8       	ldi	r24, 0x80	; 128
    e660:	70 e0       	ldi	r23, 0x00	; 0
    e662:	60 e0       	ldi	r22, 0x00	; 0
    e664:	08 95       	ret

0000e666 <__fp_nan>:
    e666:	9f ef       	ldi	r25, 0xFF	; 255
    e668:	80 ec       	ldi	r24, 0xC0	; 192
    e66a:	08 95       	ret

0000e66c <__fp_pscA>:
    e66c:	00 24       	eor	r0, r0
    e66e:	0a 94       	dec	r0
    e670:	16 16       	cp	r1, r22
    e672:	17 06       	cpc	r1, r23
    e674:	18 06       	cpc	r1, r24
    e676:	09 06       	cpc	r0, r25
    e678:	08 95       	ret

0000e67a <__fp_pscB>:
    e67a:	00 24       	eor	r0, r0
    e67c:	0a 94       	dec	r0
    e67e:	12 16       	cp	r1, r18
    e680:	13 06       	cpc	r1, r19
    e682:	14 06       	cpc	r1, r20
    e684:	05 06       	cpc	r0, r21
    e686:	08 95       	ret

0000e688 <__fp_round>:
    e688:	09 2e       	mov	r0, r25
    e68a:	03 94       	inc	r0
    e68c:	00 0c       	add	r0, r0
    e68e:	11 f4       	brne	.+4      	; 0xe694 <__fp_round+0xc>
    e690:	88 23       	and	r24, r24
    e692:	52 f0       	brmi	.+20     	; 0xe6a8 <__fp_round+0x20>
    e694:	bb 0f       	add	r27, r27
    e696:	40 f4       	brcc	.+16     	; 0xe6a8 <__fp_round+0x20>
    e698:	bf 2b       	or	r27, r31
    e69a:	11 f4       	brne	.+4      	; 0xe6a0 <__fp_round+0x18>
    e69c:	60 ff       	sbrs	r22, 0
    e69e:	04 c0       	rjmp	.+8      	; 0xe6a8 <__fp_round+0x20>
    e6a0:	6f 5f       	subi	r22, 0xFF	; 255
    e6a2:	7f 4f       	sbci	r23, 0xFF	; 255
    e6a4:	8f 4f       	sbci	r24, 0xFF	; 255
    e6a6:	9f 4f       	sbci	r25, 0xFF	; 255
    e6a8:	08 95       	ret

0000e6aa <__fp_split3>:
    e6aa:	57 fd       	sbrc	r21, 7
    e6ac:	90 58       	subi	r25, 0x80	; 128
    e6ae:	44 0f       	add	r20, r20
    e6b0:	55 1f       	adc	r21, r21
    e6b2:	59 f0       	breq	.+22     	; 0xe6ca <__fp_splitA+0x10>
    e6b4:	5f 3f       	cpi	r21, 0xFF	; 255
    e6b6:	71 f0       	breq	.+28     	; 0xe6d4 <__fp_splitA+0x1a>
    e6b8:	47 95       	ror	r20

0000e6ba <__fp_splitA>:
    e6ba:	88 0f       	add	r24, r24
    e6bc:	97 fb       	bst	r25, 7
    e6be:	99 1f       	adc	r25, r25
    e6c0:	61 f0       	breq	.+24     	; 0xe6da <__fp_splitA+0x20>
    e6c2:	9f 3f       	cpi	r25, 0xFF	; 255
    e6c4:	79 f0       	breq	.+30     	; 0xe6e4 <__fp_splitA+0x2a>
    e6c6:	87 95       	ror	r24
    e6c8:	08 95       	ret
    e6ca:	12 16       	cp	r1, r18
    e6cc:	13 06       	cpc	r1, r19
    e6ce:	14 06       	cpc	r1, r20
    e6d0:	55 1f       	adc	r21, r21
    e6d2:	f2 cf       	rjmp	.-28     	; 0xe6b8 <__fp_split3+0xe>
    e6d4:	46 95       	lsr	r20
    e6d6:	f1 df       	rcall	.-30     	; 0xe6ba <__fp_splitA>
    e6d8:	08 c0       	rjmp	.+16     	; 0xe6ea <__fp_splitA+0x30>
    e6da:	16 16       	cp	r1, r22
    e6dc:	17 06       	cpc	r1, r23
    e6de:	18 06       	cpc	r1, r24
    e6e0:	99 1f       	adc	r25, r25
    e6e2:	f1 cf       	rjmp	.-30     	; 0xe6c6 <__fp_splitA+0xc>
    e6e4:	86 95       	lsr	r24
    e6e6:	71 05       	cpc	r23, r1
    e6e8:	61 05       	cpc	r22, r1
    e6ea:	08 94       	sec
    e6ec:	08 95       	ret

0000e6ee <__fp_zero>:
    e6ee:	e8 94       	clt

0000e6f0 <__fp_szero>:
    e6f0:	bb 27       	eor	r27, r27
    e6f2:	66 27       	eor	r22, r22
    e6f4:	77 27       	eor	r23, r23
    e6f6:	cb 01       	movw	r24, r22
    e6f8:	97 f9       	bld	r25, 7
    e6fa:	08 95       	ret

0000e6fc <__gesf2>:
    e6fc:	8a df       	rcall	.-236    	; 0xe612 <__fp_cmp>
    e6fe:	08 f4       	brcc	.+2      	; 0xe702 <__gesf2+0x6>
    e700:	8f ef       	ldi	r24, 0xFF	; 255
    e702:	08 95       	ret

0000e704 <__mulsf3>:
    e704:	0b d0       	rcall	.+22     	; 0xe71c <__mulsf3x>
    e706:	c0 cf       	rjmp	.-128    	; 0xe688 <__fp_round>
    e708:	b1 df       	rcall	.-158    	; 0xe66c <__fp_pscA>
    e70a:	28 f0       	brcs	.+10     	; 0xe716 <__mulsf3+0x12>
    e70c:	b6 df       	rcall	.-148    	; 0xe67a <__fp_pscB>
    e70e:	18 f0       	brcs	.+6      	; 0xe716 <__mulsf3+0x12>
    e710:	95 23       	and	r25, r21
    e712:	09 f0       	breq	.+2      	; 0xe716 <__mulsf3+0x12>
    e714:	a2 cf       	rjmp	.-188    	; 0xe65a <__fp_inf>
    e716:	a7 cf       	rjmp	.-178    	; 0xe666 <__fp_nan>
    e718:	11 24       	eor	r1, r1
    e71a:	ea cf       	rjmp	.-44     	; 0xe6f0 <__fp_szero>

0000e71c <__mulsf3x>:
    e71c:	c6 df       	rcall	.-116    	; 0xe6aa <__fp_split3>
    e71e:	a0 f3       	brcs	.-24     	; 0xe708 <__mulsf3+0x4>

0000e720 <__mulsf3_pse>:
    e720:	95 9f       	mul	r25, r21
    e722:	d1 f3       	breq	.-12     	; 0xe718 <__mulsf3+0x14>
    e724:	95 0f       	add	r25, r21
    e726:	50 e0       	ldi	r21, 0x00	; 0
    e728:	55 1f       	adc	r21, r21
    e72a:	62 9f       	mul	r22, r18
    e72c:	f0 01       	movw	r30, r0
    e72e:	72 9f       	mul	r23, r18
    e730:	bb 27       	eor	r27, r27
    e732:	f0 0d       	add	r31, r0
    e734:	b1 1d       	adc	r27, r1
    e736:	63 9f       	mul	r22, r19
    e738:	aa 27       	eor	r26, r26
    e73a:	f0 0d       	add	r31, r0
    e73c:	b1 1d       	adc	r27, r1
    e73e:	aa 1f       	adc	r26, r26
    e740:	64 9f       	mul	r22, r20
    e742:	66 27       	eor	r22, r22
    e744:	b0 0d       	add	r27, r0
    e746:	a1 1d       	adc	r26, r1
    e748:	66 1f       	adc	r22, r22
    e74a:	82 9f       	mul	r24, r18
    e74c:	22 27       	eor	r18, r18
    e74e:	b0 0d       	add	r27, r0
    e750:	a1 1d       	adc	r26, r1
    e752:	62 1f       	adc	r22, r18
    e754:	73 9f       	mul	r23, r19
    e756:	b0 0d       	add	r27, r0
    e758:	a1 1d       	adc	r26, r1
    e75a:	62 1f       	adc	r22, r18
    e75c:	83 9f       	mul	r24, r19
    e75e:	a0 0d       	add	r26, r0
    e760:	61 1d       	adc	r22, r1
    e762:	22 1f       	adc	r18, r18
    e764:	74 9f       	mul	r23, r20
    e766:	33 27       	eor	r19, r19
    e768:	a0 0d       	add	r26, r0
    e76a:	61 1d       	adc	r22, r1
    e76c:	23 1f       	adc	r18, r19
    e76e:	84 9f       	mul	r24, r20
    e770:	60 0d       	add	r22, r0
    e772:	21 1d       	adc	r18, r1
    e774:	82 2f       	mov	r24, r18
    e776:	76 2f       	mov	r23, r22
    e778:	6a 2f       	mov	r22, r26
    e77a:	11 24       	eor	r1, r1
    e77c:	9f 57       	subi	r25, 0x7F	; 127
    e77e:	50 40       	sbci	r21, 0x00	; 0
    e780:	8a f0       	brmi	.+34     	; 0xe7a4 <__mulsf3_pse+0x84>
    e782:	e1 f0       	breq	.+56     	; 0xe7bc <__mulsf3_pse+0x9c>
    e784:	88 23       	and	r24, r24
    e786:	4a f0       	brmi	.+18     	; 0xe79a <__mulsf3_pse+0x7a>
    e788:	ee 0f       	add	r30, r30
    e78a:	ff 1f       	adc	r31, r31
    e78c:	bb 1f       	adc	r27, r27
    e78e:	66 1f       	adc	r22, r22
    e790:	77 1f       	adc	r23, r23
    e792:	88 1f       	adc	r24, r24
    e794:	91 50       	subi	r25, 0x01	; 1
    e796:	50 40       	sbci	r21, 0x00	; 0
    e798:	a9 f7       	brne	.-22     	; 0xe784 <__mulsf3_pse+0x64>
    e79a:	9e 3f       	cpi	r25, 0xFE	; 254
    e79c:	51 05       	cpc	r21, r1
    e79e:	70 f0       	brcs	.+28     	; 0xe7bc <__mulsf3_pse+0x9c>
    e7a0:	5c cf       	rjmp	.-328    	; 0xe65a <__fp_inf>
    e7a2:	a6 cf       	rjmp	.-180    	; 0xe6f0 <__fp_szero>
    e7a4:	5f 3f       	cpi	r21, 0xFF	; 255
    e7a6:	ec f3       	brlt	.-6      	; 0xe7a2 <__mulsf3_pse+0x82>
    e7a8:	98 3e       	cpi	r25, 0xE8	; 232
    e7aa:	dc f3       	brlt	.-10     	; 0xe7a2 <__mulsf3_pse+0x82>
    e7ac:	86 95       	lsr	r24
    e7ae:	77 95       	ror	r23
    e7b0:	67 95       	ror	r22
    e7b2:	b7 95       	ror	r27
    e7b4:	f7 95       	ror	r31
    e7b6:	e7 95       	ror	r30
    e7b8:	9f 5f       	subi	r25, 0xFF	; 255
    e7ba:	c1 f7       	brne	.-16     	; 0xe7ac <__mulsf3_pse+0x8c>
    e7bc:	fe 2b       	or	r31, r30
    e7be:	88 0f       	add	r24, r24
    e7c0:	91 1d       	adc	r25, r1
    e7c2:	96 95       	lsr	r25
    e7c4:	87 95       	ror	r24
    e7c6:	97 f9       	bld	r25, 7
    e7c8:	08 95       	ret

0000e7ca <memcpy_P>:
    e7ca:	fb 01       	movw	r30, r22
    e7cc:	dc 01       	movw	r26, r24
    e7ce:	02 c0       	rjmp	.+4      	; 0xe7d4 <memcpy_P+0xa>
    e7d0:	05 90       	lpm	r0, Z+
    e7d2:	0d 92       	st	X+, r0
    e7d4:	41 50       	subi	r20, 0x01	; 1
    e7d6:	50 40       	sbci	r21, 0x00	; 0
    e7d8:	d8 f7       	brcc	.-10     	; 0xe7d0 <memcpy_P+0x6>
    e7da:	08 95       	ret

0000e7dc <_exit>:
    e7dc:	f8 94       	cli

0000e7de <__stop_program>:
    e7de:	ff cf       	rjmp	.-2      	; 0xe7de <__stop_program>
