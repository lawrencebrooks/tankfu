
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000e340  0000e440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e340  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f9f  00800104  00800104  0000e444  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000e444  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000ec16  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006e0  00000000  00000000  0000ec28  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a035  00000000  00000000  0000f308  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001640  00000000  00000000  0001933d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000023ab  00000000  00000000  0001a97d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000166c  00000000  00000000  0001cd28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001e51  00000000  00000000  0001e394  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000091f9  00000000  00000000  000201e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007c8  00000000  00000000  000293e0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 3b 	jmp	0x76a8	; 0x76a8 <__ctors_end>
       4:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
       8:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
       c:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      10:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      14:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      18:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      1c:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      20:	0c 94 3e 40 	jmp	0x807c	; 0x807c <__vector_8>
      24:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      28:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      2c:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      30:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      34:	0c 94 0d 3e 	jmp	0x7c1a	; 0x7c1a <__vector_13>
      38:	0c 94 4c 3e 	jmp	0x7c98	; 0x7c98 <__vector_14>
      3c:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      40:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      44:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      48:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      4c:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      50:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      54:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      58:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      5c:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      60:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      64:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      68:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>
      6c:	0c 94 bd 3b 	jmp	0x777a	; 0x777a <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	e7 41 ea 41 46 42 4a 42 51 42 f2 41 f7 41 fc 41     .A.AFBJBQB.A.A.A
      ce:	59 42 ff 41 02 42 05 42 40 42 43 42 69 42           YB.A.B.B@BCBiB

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <strCredits>:
      e8:	54 41 4e 4b 20 46 55 20 56 32 2e 30 20 46 4f 52     TANK FU V2.0 FOR
      f8:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     108:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     118:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     128:	4f 4b 53 00 23 00                                   OKS.#.

0000012e <default_scores>:
     12e:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     13e:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000014c <default_handles>:
     14c:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     15c:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000016a <strLevels>:
     16a:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     17a:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     18a:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     19a:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     1aa:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     1ba:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     1ca:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     1da:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     1ea:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     1fa:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     20a:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

0000021a <strPaused>:
     21a:	50 41 55 53 45 44 00                                PAUSED.

00000221 <strExit>:
     221:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

0000022a <strTotal>:
     22a:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000231 <strScore>:
     231:	53 43 4f 52 45 3a 00                                SCORE:.

00000238 <strFinalScore>:
     238:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000244 <strBy>:
     244:	42 59 00                                            BY.

00000247 <strOwns>:
     247:	4f 57 4e 53 00                                      OWNS.

0000024c <strChangeHandle>:
     24c:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

0000025b <strPlayer2>:
     25b:	50 32 00                                            P2.

0000025e <strPlayer1>:
     25e:	50 31 00                                            P1.

00000261 <strVertSep>:
     261:	3b 00                                               ;.

00000263 <strUnderline>:
     263:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000026f <strHandlesTitle>:
     26f:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

0000027b <strHighscores>:
     27b:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000285 <strCopyright>:
     285:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     295:	4f 4f 4b 53 00                                      OOKS.

0000029a <strSelectHandle>:
     29a:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

000002a9 <strCancelHandle>:
     2a9:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

000002b4 <strReset>:
     2b4:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     2c4:	20 53 4c 20 28 35 53 29 00                           SL (5S).

000002cd <strConfirmHandle>:
     2cd:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     2dd:	54 00                                               T.

000002df <str2Player>:
     2df:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

000002f0 <str1Player>:
     2f0:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

000002fe <my_patches>:
     2fe:	02 f2 0b 00 00 e3 06 e4 06 02 ab 09 00 00 45 02     ..............E.
     30e:	46 02 02 fa 07 00 00 af 01 b0 01 02 da 05 00 00     F...............
     31e:	1e 02 1f 02 02 68 04 00 00 70 01 71 01 02 ab 09     .....h...p.q....
     32e:	00 00 45 02 46 02 02 f2 0b 00 00 e3 06 e4 06 00     ..E.F...........
     33e:	00 00 46 03 00 00 00 00                             ..F.....

00000346 <ad_alarm>:
     346:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     356:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     366:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     376:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     386:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     396:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     3a6:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     3b6:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     3c6:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     3d6:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     3e6:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     3f6:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     406:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     416:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     426:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     436:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     446:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     456:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     466:	00 ff                                               ..

00000468 <ad_navigate>:
     468:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     478:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     488:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     498:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     4a8:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     4b8:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     4c8:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     4d8:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     4e8:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     4f8:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     508:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     518:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     528:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     538:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     548:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     558:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     568:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     578:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     588:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     598:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     5a8:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     5b8:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     5c8:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

000005da <ad_metal>:
     5da:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     5ea:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     5fa:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     60a:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     61a:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     62a:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     63a:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     64a:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     65a:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     66a:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     67a:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     68a:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     69a:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     6aa:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     6ba:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     6ca:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     6da:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     6ea:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     6fa:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     70a:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     71a:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     72a:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     73a:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     74a:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     75a:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     76a:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     77a:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     78a:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     79a:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     7aa:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     7ba:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     7ca:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     7da:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     7ea:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

000007fa <ad_item>:
     7fa:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     80a:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     81a:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     82a:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     83a:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     84a:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     85a:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     86a:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     87a:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     88a:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     89a:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     8aa:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     8ba:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     8ca:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     8da:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     8ea:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     8fa:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     90a:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     91a:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     92a:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     93a:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     94a:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     95a:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     96a:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     97a:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     98a:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     99a:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

000009ab <ad_cannonball>:
     9ab:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     9bb:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     9cb:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     9db:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     9eb:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     9fb:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     a0b:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     a1b:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     a2b:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     a3b:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     a4b:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     a5b:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     a6b:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     a7b:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     a8b:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     a9b:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     aab:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     abb:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     acb:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     adb:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     aeb:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     afb:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     b0b:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     b1b:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     b2b:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     b3b:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     b4b:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     b5b:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     b6b:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     b7b:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     b8b:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     b9b:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     bab:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     bbb:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     bcb:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     bdb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     beb:	ff ff ff ff ff 00 00                                .......

00000bf2 <ad_brick_explode>:
     bf2:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     c02:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     c12:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     c22:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     c32:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     c42:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     c52:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     c62:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     c72:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     c82:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     c92:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     ca2:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     cb2:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     cc2:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     cd2:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     ce2:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     cf2:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     d02:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     d12:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     d22:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     d32:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     d42:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     d52:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     d62:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     d72:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     d82:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     d92:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     da2:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     db2:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     dc2:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     dd2:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     de2:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
     df2:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
     e02:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
     e12:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
     e22:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
     e32:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
     e42:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
     e52:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
     e62:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
     e72:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
     e82:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
     e92:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
     ea2:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
     eb2:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
     ec2:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
     ed2:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
     ee2:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
     ef2:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
     f02:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
     f12:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
     f22:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
     f32:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
     f42:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
     f52:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
     f62:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
     f72:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
     f82:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
     f92:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
     fa2:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
     fb2:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
     fc2:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
     fd2:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
     fe2:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
     ff2:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    1002:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    1012:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    1022:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    1032:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    1042:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    1052:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    1062:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    1072:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    1082:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    1092:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    10a2:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    10b2:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    10c2:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    10d2:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    10e2:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    10f2:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    1102:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    1112:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    1122:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    1132:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    1142:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    1152:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    1162:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    1172:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    1182:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    1192:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    11a2:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    11b2:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    11c2:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    11d2:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    11e2:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    11f2:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    1202:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    1212:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    1222:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    1232:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    1242:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    1252:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    1262:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    1272:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    1282:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    1292:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    12a2:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    12b2:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    12c2:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    12d2:	04 04 02 01 00                                      .....

000012d7 <level_data>:
    12d7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    12e7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    130f:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    1327:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    1337:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1347:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    1363:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    1373:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1383:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    139f:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    13bf:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    13cf:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    13df:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    13ef:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    13ff:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    140f:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    141f:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    142f:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    143f:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    144f:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    145f:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    146f:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    147f:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    148f:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    14a7:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    14b7:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    14d3:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    14eb:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1507:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    1517:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1527:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    1543:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    1553:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1563:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    1583:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    15a3:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    15b3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    15c3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    15d3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    15e3:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    15ff:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    161b:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    162b:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    163b:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    164b:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    165b:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    166b:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    167b:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    168b:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    169b:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    16ab:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    16bb:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    16cb:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    16db:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    16eb:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    16fb:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    170b:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    171b:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    172b:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    173b:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    174b:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    175b:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    176b:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    177b:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    178b:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    179b:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    17ab:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    17bb:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    17cb:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    17db:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    17eb:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    17fb:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    180b:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    181b:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    182b:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    183b:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    184b:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    185b:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1873:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    188f:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    189f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    18af:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    18bf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    18cf:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18eb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    190b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1927:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1947:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1963:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1983:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    199b:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    19b7:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    19c7:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    19d7:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    19e7:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    19f7:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    1a07:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    1a17:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    1a27:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    1a37:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    1a47:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    1a57:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    1a67:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    1a77:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    1a87:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    1a97:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1aa7:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1ab7:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ac7:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    1ae3:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1b07:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b27:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b43:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b63:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b7f:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b8f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b9f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1baf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1bbf:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    1bcf:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    1bdf:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    1bef:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    1bff:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    1c0f:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    1c1f:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    1c2f:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    1c3f:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    1c4f:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    1c5f:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    1c6f:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    1c7f:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    1c8f:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    1c9f:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    1caf:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ccb:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1ce3:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    1cf3:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    1d03:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    1d13:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    1d2b:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    1d3b:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1d4b:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1d5b:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1d6b:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1d7b:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    1d93:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    1da3:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    1db3:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    1dcb:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    1ddb:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    1deb:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    1dfb:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    1e0b:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    1e1b:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    1e2b:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    1e43:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    1e53:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e6b:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    1e7b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e8b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e9b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1eab:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ec7:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    1ee3:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    1f03:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    1f13:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1f23:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    1f3f:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    1f5f:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    1f7b:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    1f9b:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    1fab:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1fbb:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    1fcb:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    1fe3:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    1ff3:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    2003:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    2013:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    2023:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2033:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    204f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    205f:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    206f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    207f:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    209f:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    20bb:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    20db:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    20f3:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2103:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    211f:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    213b:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    215b:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    216b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    217b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    218b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    219b:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    21ab:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    21c3:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    21d3:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    21e3:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    21f3:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    2203:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    2213:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2223:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    2233:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2243:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    226b:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    227b:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    228b:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    229b:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    22b3:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    22c3:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    22d3:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    22e3:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    22f3:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    2303:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    2313:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    232b:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    233b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    234b:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    235b:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    236b:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    237b:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    238b:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    239b:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    23ab:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    23bb:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    23cb:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    23db:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    23eb:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    23fb:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    240b:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2427:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    244b:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    245b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    246b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    247b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    248b:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    249b:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    24b3:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    24c3:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    24d3:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    24e3:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    24f3:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2503:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    2513:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    2523:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2533:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2543:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2553:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2577:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2593:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    25a3:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    25b3:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    25c3:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    25d3:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    25e3:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    25f3:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2603:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    261b:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    262b:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2647:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2667:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    2677:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2687:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    2697:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    26a7:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    26b7:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    26c7:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    26d7:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    26e7:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    26f7:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2707:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2717:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2727:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2737:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2747:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2757:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2767:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2777:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2793:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27af:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27cf:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27eb:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    27fb:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    280b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2827:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    283f:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    284f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    285f:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    286f:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    287f:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    288f:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    289f:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    28af:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    28bf:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    28cf:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    28df:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    28ef:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    2907:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    2917:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2927:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    2937:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2947:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    2957:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2973:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    298f:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    299f:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    29af:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29cb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29eb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a07:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a27:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2a37:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2a47:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2a57:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    2a7f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a9f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2abb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2adb:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2aeb:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2afb:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b17:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    2b33:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2b4b:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2b5b:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2b6b:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    2b7b:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    2b8b:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    2b9b:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    2bab:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    2bbb:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    2bcb:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    2bdb:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    2beb:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    2bfb:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    2c0b:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    2c23:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2c43:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c5f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c7f:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2c8f:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2c9f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cbb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cd7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cf7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d13:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2d23:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2d33:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2d43:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2d53:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2d63:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2d7b:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2d8b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2d9b:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    2dab:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    2dbb:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2dcb:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    2ddb:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2df3:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2e03:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2e13:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    2e23:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    2e33:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2e43:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e5f:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    2e6f:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    2e7f:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    2e8f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    2e9f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    2eaf:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    2ebf:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2ecf:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    2edf:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    2eef:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    2f13:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    2f23:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2f33:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    2f43:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2f5b:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2f6b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2f7b:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    2f8b:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    2f9b:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    2fab:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2fbb:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2fd3:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2fe3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2ff3:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    3003:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3013:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3023:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3033:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    3043:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3053:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3063:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3073:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    3083:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3093:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    30a3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    30b3:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    30c3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    30d3:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    30e3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    30f3:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    3103:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    3113:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3123:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3133:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3143:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3153:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3163:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    3173:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3183:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    3193:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    31a3:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    31c3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31e3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31ff:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    321f:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    3237:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    325b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3277:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3297:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32b3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    32c3:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32d3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32ef:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    32ff:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    330f:	02 02                                               ..

00003311 <sprites_data>:
    3311:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3321:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    3331:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    3341:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    3351:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3361:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    3371:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    3381:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    3391:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    33a1:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    33b1:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    33c1:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    33d1:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    33e1:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    33f1:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3401:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3411:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3421:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    3431:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    3441:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3451:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3461:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3471:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3481:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3491:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    34a1:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    34b1:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    34c1:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    34d1:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    34e1:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    34f1:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3501:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3511:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3521:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3531:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3541:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3551:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3561:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3571:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3581:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3591:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    35a1:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    35b1:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    35c1:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    35d1:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    35e1:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    35f1:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3601:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3611:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3621:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3631:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3641:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3651:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3661:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3671:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3681:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3691:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    36a1:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    36b1:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    36c1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    36d1:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    36e1:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    36f1:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3701:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3711:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3721:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3731:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3741:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3751:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3761:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3771:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3781:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3791:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    37a1:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    37b1:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    37c1:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    37d1:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    37e1:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    37f1:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3801:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3811:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3821:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3831:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3841:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3851:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3861:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3871:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3881:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3891:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    38a1:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    38b1:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    38c1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    38d1:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    38e1:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    38f1:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    3901:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    3911:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3921:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3931:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    3941:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3951:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3961:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    3971:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    3981:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3991:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    39a1:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    39b1:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    39c1:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39d1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39e1:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    39f1:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    3a01:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a11:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3a21:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    3a31:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    3a41:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    3a51:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3a61:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    3a71:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    3a81:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    3a91:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3aa1:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3ab1:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    3ac1:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3ad1:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3ae1:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3af1:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3b01:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3b11:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    3b21:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    3b31:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    3b41:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    3b51:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b61:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b71:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    3b81:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    3b91:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    3ba1:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    3bb1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bc1:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bd1:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    3be1:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    3bf1:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    3c01:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    3c11:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c21:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c31:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c41:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00003c51 <map_sub_turret>:
    3c51:	01 01 23                                            ..#

00003c54 <map_sub_shot>:
    3c54:	01 01 1b                                            ...

00003c57 <map_up_arrow>:
    3c57:	01 01 22                                            .."

00003c5a <map_down_arrow>:
    3c5a:	01 01 21                                            ..!

00003c5d <map_right_arrow>:
    3c5d:	01 01 20                                            .. 

00003c60 <map_rocket_right_1>:
    3c60:	01 01 1a                                            ...

00003c63 <map_rocket_right_0>:
    3c63:	01 01 19                                            ...

00003c66 <map_rocket_up_1>:
    3c66:	01 01 18                                            ...

00003c69 <map_rocket_up_0>:
    3c69:	01 01 17                                            ...

00003c6c <map_ball>:
    3c6c:	01 01 16                                            ...

00003c6f <map_explosion_2>:
    3c6f:	02 02 08 09 09 08                                   ......

00003c75 <map_explosion_1>:
    3c75:	02 02 06 07 10 11                                   ......

00003c7b <map_explosion_0>:
    3c7b:	02 02 04 05 0e 0f                                   ......

00003c81 <map_tank2_right_0>:
    3c81:	02 02 14 15 1e 1f                                   ......

00003c87 <map_tank2_up_0>:
    3c87:	02 02 12 13 1c 1d                                   ......

00003c8d <map_tank1_right_0>:
    3c8d:	02 02 02 03 0c 0d                                   ......

00003c93 <map_tank1_up_0>:
    3c93:	02 02 00 01 0a 0b                                   ......

00003c99 <map_tank_blank>:
    3c99:	02 02 24 24 24 24                                   ..$$$$

00003c9f <map_none>:
    3c9f:	01 01 24                                            ..$

00003ca2 <tiles_data>:
	...
    3ce2:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    3cf2:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    3d02:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    3d12:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    3d22:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    3d32:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    3d42:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    3d52:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    3d62:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    3d72:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    3d82:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    3d92:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    3da2:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    3db2:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    3dc2:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    3dd2:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    3de2:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    3df2:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    3e02:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    3e12:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    3e2a:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    3e3a:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3e4a:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    3e62:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    3e72:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    3e82:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    3e92:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    3eaa:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    3eca:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    3ee2:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    3ef2:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    3f02:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    3f12:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    3f22:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    3f32:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    3f42:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    3f52:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3f62:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    3f72:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    3f82:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    3f92:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    3fa2:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    3fb2:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    3fc2:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    3fd2:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    3fe2:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    3ff2:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4002:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    4012:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    4022:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    4032:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    4042:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    4052:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    4062:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    4072:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    4082:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    4092:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    40a2:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    40b2:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    40c2:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    40d2:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    40e2:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    40f2:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    4102:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    4112:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4122:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    4132:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    4142:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    4152:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4162:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    4172:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4182:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4192:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    41a2:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    41b2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    41c2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    41d2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4202:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4212:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4222:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    4232:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4242:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4252:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4262:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    4272:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4282:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4292:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    42a2:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    42b2:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    42c2:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    42d2:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    42e2:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    42f2:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    4302:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    4312:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    4322:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4332:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4342:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4352:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4362:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4372:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    43a2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    43b2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    43c2:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    43d2:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    43e2:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    43f2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4402:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4412:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4422:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    4462:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4472:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    4482:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4492:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    44a2:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    44b2:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    44c2:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    44d2:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    4512:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    454a:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    455a:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    456a:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    457a:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    458a:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    459a:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    45aa:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    45ba:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    45ca:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    45da:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    45ea:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    45fa:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    460a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    461a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    462a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    463a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    464a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    465a:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    466a:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    467a:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    468a:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    469a:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    46aa:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    46ba:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    46ca:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    46da:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    46ea:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4722:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4732:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4742:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    4766:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    4776:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    4786:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    4796:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    47a6:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    47b6:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    47c6:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    47d6:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    47e6:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    47f6:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4806:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4816:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    4826:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4836:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4846:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4856:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    4866:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    4876:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4886:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4896:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    48a6:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    48b6:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    48c6:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    48d6:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    48e6:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    48f6:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    4906:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    4916:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    4926:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    4936:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    4946:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    4956:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    4966:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4976:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4986:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    4996:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    49a6:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    49b6:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    49c6:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    49d6:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    49e6:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    49f6:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4a06:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    4a16:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4a26:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4a36:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4a46:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4a56:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4a66:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    4a76:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4a86:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4a96:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4aa6:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    4ab6:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ac6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ad6:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4ae6:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4af6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b06:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b16:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    4b26:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    4b36:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b46:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4b56:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4b66:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b76:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b86:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4b96:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    4ba6:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4bb6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4bc6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4bd6:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4be6:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4bf6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c06:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    4c16:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    4c26:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4c36:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    4c46:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c56:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4c66:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4c76:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4c86:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c96:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    4ca6:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4cb6:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    4cc6:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    4cd6:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    4ce6:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4cf6:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    4d06:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    4d16:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4d26:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4d36:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    4d46:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    4d56:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4d66:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    4d76:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    4d86:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    4d96:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    4da6:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4db6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4dc6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4dd6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    4de6:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4df6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e06:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    4e16:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    4e26:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e36:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e46:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    4e56:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4e66:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e76:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e86:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4e96:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4ea6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4eb6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ec6:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4ed6:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    4ee6:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    4ef6:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    4f06:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4f16:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4f26:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4f36:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4f46:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4f56:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4f66:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    4f76:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    4f86:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4f96:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4fa6:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4fb6:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    4fc6:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    4fd6:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    4fe6:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ff6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5006:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5016:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    5026:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    5036:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5046:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5056:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    5066:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    5076:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    5086:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    5096:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    50a6:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    50b6:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    50c6:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    50d6:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    50e6:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    50f6:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    5106:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5116:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5126:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5136:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5146:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5156:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5166:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    5176:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    5186:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5196:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    51a6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    51b6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    51c6:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    51d6:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    51e6:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    51f6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5206:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5216:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    5226:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5236:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5246:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    5256:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5266:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5276:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5286:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5296:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    52a6:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    52b6:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    52c6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52d6:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    52e6:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52f6:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    5306:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    5316:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    5326:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    5336:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    5346:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5356:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    5366:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5376:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    5386:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    5396:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    53a6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53b6:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    53c6:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    53d6:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    53e6:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    53f6:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5406:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5416:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    5426:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5436:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5446:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5456:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5466:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5476:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5486:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5496:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    54a6:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    54b6:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    54c6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    54d6:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    54e6:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    54f6:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    5506:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    5516:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5526:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5536:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5546:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5556:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5566:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5576:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5586:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5596:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    55a6:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    55b6:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    55c6:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    55d6:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    55e6:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    55f6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5606:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5616:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    5626:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    5636:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    5646:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    5656:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    5666:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    5676:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    5686:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    5696:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    56a6:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    56b6:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    56c6:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    56d6:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    56e6:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    56f6:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5706:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5716:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    5726:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5736:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5746:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    5756:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    5766:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5776:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5786:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5796:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    57a6:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    57b6:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    57c6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    57d6:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    57e6:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    57f6:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5806:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5816:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5826:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5836:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5846:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    5856:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5866:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5876:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5886:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    5896:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    58a6:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    58b6:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    58c6:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    58d6:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    58e6:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    58f6:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5906:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5916:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    5926:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5936:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5946:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5956:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5966:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    5976:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    5986:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    5996:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    59a6:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    59b6:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    59c6:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    59d6:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    59e6:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    59f6:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5a06:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5a16:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5a26:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5a36:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    5a46:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    5a56:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5a66:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    5a76:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a86:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5a96:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5aa6:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5ab6:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ac6:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5ad6:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    5ae6:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5af6:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b06:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b16:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5b26:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5b36:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b46:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b56:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5b66:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5b76:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b86:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b96:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5ba6:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5bb6:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bc6:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5bd6:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    5be6:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    5bf6:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c06:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c16:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5c26:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c36:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c46:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    5c56:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5c66:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    5c76:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c86:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5c96:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    5ca6:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5cb6:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5cc6:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5cd6:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    5ce6:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    5cf6:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    5d06:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5d16:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5d26:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    5d36:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    5d46:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5d56:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5d66:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    5d76:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5d86:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5d96:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5da6:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5db6:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5dc6:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5dd6:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    5de6:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5df6:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5e06:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5e16:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    5e26:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5e36:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5e46:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5e56:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5e66:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5e76:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    5e86:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5e96:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5ea6:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    5eb6:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    5ec6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5ed6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5ee6:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    5ef6:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f06:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f16:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5f26:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    5f36:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f46:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f56:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5f66:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    5f76:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f86:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f96:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5fa6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5fb6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5fc6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5fd6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    5fe6:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    5ff6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6006:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6016:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6026:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6036:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    6046:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6056:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6066:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6076:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6086:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    6096:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    60a6:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    60b6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    60c6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    60d6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    60e6:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    60f6:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    6106:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    6116:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    6126:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    6136:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    6146:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6156:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6166:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6176:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6186:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6196:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    61a6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61b6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61c6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61d6:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    61e6:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    61f6:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6206:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6216:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6226:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6236:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    6246:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6256:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6266:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6276:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6286:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6296:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    62a6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62b6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62c6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    62d6:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    62e6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62f6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6306:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    6316:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6326:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6336:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6346:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    6356:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    63aa:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    63ba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    63d2:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    63ea:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    63fa:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    642a:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    643a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    644a:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    6462:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    6472:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    6482:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6492:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    64aa:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    64ba:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    64ca:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    64e2:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    64f2:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    6502:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    6512:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    652a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    653a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    656e:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    657e:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    658e:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    65aa:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    65ba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    65ca:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    65ea:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    65fa:	df df df df df df df df 00 00 df df df df 00 00     ................
    660a:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    662a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    663a:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    664a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    668a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    669a:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    66ba:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    670a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    672e:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    673e:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    674e:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    676a:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    677a:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    678a:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    67aa:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    67ba:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    67ca:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    67ea:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    67fa:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    680a:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    682a:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    683a:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    684a:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    686e:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    687e:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    688e:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    68aa:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    68ba:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    68ca:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    68ea:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    68fa:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    690a:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    692a:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    693a:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    694a:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    696a:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    697a:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    698a:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    69aa:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    69ba:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    69ca:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    69f2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6a0a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6a22:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a32:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a42:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a52:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a62:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    6a72:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6a82:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    6a92:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6ab2:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6aca:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6ae2:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    6af2:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    6b02:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6b12:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6b2a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6b3a:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6b52:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6b6a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6b7a:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    6b8a:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    6baa:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6bba:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6bca:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6bea:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6bfa:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6c0a:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6c2a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6c3a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6c4a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6c6a:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    6c7a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6c8a:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6caa:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6cba:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6cca:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6cea:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6cfa:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6d0a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6d2a:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6d3a:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    6d4a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    6d6a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6d7a:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6d8a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6daa:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6dba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6dca:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6dee:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6dfe:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    6e0e:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    6e2a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6e3a:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    6e4a:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6e6a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6e7a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6e8a:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6eaa:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    6eba:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    6eca:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    6eea:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    6efa:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    6f0a:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6f2a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6f3a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6f4a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6f6a:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6f7a:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6f8a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6faa:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6fba:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6fca:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    6fea:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6ffa:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    700a:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    702a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    703a:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    704a:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    706a:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    707a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    708a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    70aa:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    70ba:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    70ca:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    70ea:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    70fa:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    710a:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    712a:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    713a:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    714a:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    716a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    717a:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    718a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    71aa:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    71ba:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    71ca:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    71ea:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    71fa:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    720a:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    722a:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    723a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    724a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    726a:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    727a:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    728a:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    72aa:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    72ba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    72ca:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    72ee:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    72fe:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    7352:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00007362 <map_sub_emerging>:
    7362:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7372:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    7382:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7392:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    73a2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    73b2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    73c2:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    73d2:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    73e2:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    73f2:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    7402:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    7412:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    7422:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7432:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7442:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7452:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7462:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7472:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7482:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7492:	0d 0d 0d 0d 0d 0d                                   ......

00007498 <map_sub>:
    7498:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    74a8:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    74b8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    74c8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    74d8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    74e8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    74f8:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    7508:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    7518:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    7528:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    7538:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    7548:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    7558:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7568:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7578:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7588:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7598:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75a8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75b8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75c8:	0d 0d 0d 0d 0d 0d                                   ......

000075ce <map_scope_2>:
    75ce:	01 01 12                                            ...

000075d1 <map_scope_1>:
    75d1:	01 01 11                                            ...

000075d4 <map_scope_0>:
    75d4:	01 01 10                                            ...

000075d7 <map_blue_tank>:
    75d7:	02 02 2b 2c 31 32                                   ..+,12

000075dd <map_green_tank>:
    75dd:	02 02 18 19 23 24                                   ....#$

000075e3 <map_fence>:
    75e3:	01 01 0f                                            ...

000075e6 <map_turf>:
    75e6:	01 01 0e                                            ...

000075e9 <map_water>:
    75e9:	01 01 0d                                            ...

000075ec <map_metal_bl>:
    75ec:	01 01 0c                                            ...

000075ef <map_metal_tr>:
    75ef:	01 01 0b                                            ...

000075f2 <map_metal_br>:
    75f2:	01 01 0a                                            ...

000075f5 <map_metal_tl>:
    75f5:	01 01 09                                            ...

000075f8 <map_tile_exp_2>:
    75f8:	01 01 08                                            ...

000075fb <map_tile_exp_1>:
    75fb:	01 01 07                                            ...

000075fe <map_tile_exp_0>:
    75fe:	01 01 06                                            ...

00007601 <map_rocket_itm>:
    7601:	01 01 04                                            ...

00007604 <map_explode_itm>:
    7604:	01 01 03                                            ...

00007607 <map_speed_itm>:
    7607:	01 01 02                                            ...

0000760a <map_metal>:
    760a:	01 01 05                                            ...

0000760d <map_brick>:
    760d:	01 01 01                                            ...

00007610 <map_splash>:
    7610:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    7620:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    7630:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    7640:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    7650:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    7660:	1a 00 00 1a 2f 30                                   ..../0

00007666 <map_pause>:
    7666:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    7676:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    7686:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    7696:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000076a4 <map_tile_none>:
    76a4:	01 01 00 00                                         ....

000076a8 <__ctors_end>:
    76a8:	11 24       	eor	r1, r1
    76aa:	1f be       	out	0x3f, r1	; 63
    76ac:	cf ef       	ldi	r28, 0xFF	; 255
    76ae:	d0 e1       	ldi	r29, 0x10	; 16
    76b0:	de bf       	out	0x3e, r29	; 62
    76b2:	cd bf       	out	0x3d, r28	; 61

000076b4 <__do_copy_data>:
    76b4:	11 e0       	ldi	r17, 0x01	; 1
    76b6:	a0 e0       	ldi	r26, 0x00	; 0
    76b8:	b1 e0       	ldi	r27, 0x01	; 1
    76ba:	e0 e4       	ldi	r30, 0x40	; 64
    76bc:	f3 ee       	ldi	r31, 0xE3	; 227
    76be:	02 c0       	rjmp	.+4      	; 0x76c4 <__do_copy_data+0x10>
    76c0:	05 90       	lpm	r0, Z+
    76c2:	0d 92       	st	X+, r0
    76c4:	a4 30       	cpi	r26, 0x04	; 4
    76c6:	b1 07       	cpc	r27, r17
    76c8:	d9 f7       	brne	.-10     	; 0x76c0 <__do_copy_data+0xc>

000076ca <__do_clear_bss>:
    76ca:	10 e1       	ldi	r17, 0x10	; 16
    76cc:	a4 e0       	ldi	r26, 0x04	; 4
    76ce:	b1 e0       	ldi	r27, 0x01	; 1
    76d0:	01 c0       	rjmp	.+2      	; 0x76d4 <.do_clear_bss_start>

000076d2 <.do_clear_bss_loop>:
    76d2:	1d 92       	st	X+, r1

000076d4 <.do_clear_bss_start>:
    76d4:	a3 3a       	cpi	r26, 0xA3	; 163
    76d6:	b1 07       	cpc	r27, r17
    76d8:	e1 f7       	brne	.-8      	; 0x76d2 <.do_clear_bss_loop>

000076da <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    76da:	0e 94 11 40 	call	0x8022	; 0x8022 <wdt_randomize>
#endif

    MCUSR = 0;
    76de:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    76e0:	88 e1       	ldi	r24, 0x18	; 24
    76e2:	0f b6       	in	r0, 0x3f	; 63
    76e4:	f8 94       	cli
    76e6:	80 93 60 00 	sts	0x0060, r24
    76ea:	10 92 60 00 	sts	0x0060, r1
    76ee:	0f be       	out	0x3f, r0	; 63

000076f0 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    76f0:	0e 94 d3 40 	call	0x81a6	; 0x81a6 <isEepromFormatted>
    76f4:	81 11       	cpse	r24, r1
    76f6:	02 c0       	rjmp	.+4      	; 0x76fc <Initialize+0xc>
    76f8:	0e 94 b1 40 	call	0x8162	; 0x8162 <FormatEeprom>

	cli();
    76fc:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    76fe:	81 e0       	ldi	r24, 0x01	; 1
    7700:	80 93 18 0b 	sts	0x0B18, r24
		tr4_barrel_hi=1;		
    7704:	80 93 19 0b 	sts	0x0B19, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7708:	80 93 17 0b 	sts	0x0B17, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    770c:	10 92 04 0b 	sts	0x0B04, r1
    7710:	10 92 0a 0b 	sts	0x0B0A, r1
    7714:	10 92 10 0b 	sts	0x0B10, r1
    7718:	10 92 16 0b 	sts	0x0B16, r1
    771c:	10 92 1c 0b 	sts	0x0B1C, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7720:	10 92 ea 0a 	sts	0x0AEA, r1
	sync_flags=0;
    7724:	10 92 ec 0a 	sts	0x0AEC, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7728:	92 e1       	ldi	r25, 0x12	; 18
    772a:	90 93 eb 0a 	sts	0x0AEB, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    772e:	90 ee       	ldi	r25, 0xE0	; 224
    7730:	90 93 f2 0a 	sts	0x0AF2, r25
	first_render_line=FIRST_RENDER_LINE;
    7734:	94 e1       	ldi	r25, 0x14	; 20
    7736:	90 93 f1 0a 	sts	0x0AF1, r25

	joypad1_status_hi=0;
    773a:	10 92 f6 0a 	sts	0x0AF6, r1
    773e:	10 92 f5 0a 	sts	0x0AF5, r1
	joypad2_status_hi=0;
    7742:	10 92 fa 0a 	sts	0x0AFA, r1
    7746:	10 92 f9 0a 	sts	0x0AF9, r1
	sound_enabled=1;
    774a:	80 93 03 0b 	sts	0x0B03, r24

	InitializeVideoMode();
    774e:	0e 94 de 4d 	call	0x9bbc	; 0x9bbc <InitializeVideoMode>
    7752:	80 e7       	ldi	r24, 0x70	; 112
    7754:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7756:	fc 01       	movw	r30, r24
    7758:	25 91       	lpm	r18, Z+
    775a:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    775c:	f9 01       	movw	r30, r18
    775e:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7760:	30 83       	st	Z, r19
    7762:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7764:	20 e0       	ldi	r18, 0x00	; 0
    7766:	8e 39       	cpi	r24, 0x9E	; 158
    7768:	92 07       	cpc	r25, r18
    776a:	a9 f7       	brne	.-22     	; 0x7756 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    776c:	78 94       	sei
	
	DisplayLogo();
    776e:	0e 94 dd 4d 	call	0x9bba	; 0x9bba <DisplayLogo>
    7772:	0e 94 a7 6e 	call	0xdd4e	; 0xdd4e <main>
    7776:	0c 94 9e 71 	jmp	0xe33c	; 0xe33c <_exit>

0000777a <__bad_interrupt>:
    777a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000777e <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    777e:	0b e9       	ldi	r16, 0x9B	; 155
    7780:	0a 95       	dec	r16
    7782:	f1 f7       	brne	.-4      	; 0x7780 <sub_video_mode3+0x2>
		dec r19
		brne 1b

#else

		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1
    7784:	10 e0       	ldi	r17, 0x00	; 0
    7786:	1a 95       	dec	r17
    7788:	f1 f7       	brne	.-4      	; 0x7786 <sub_video_mode3+0x8>
    778a:	1e e1       	ldi	r17, 0x1E	; 30
    778c:	1a 95       	dec	r17
    778e:	f1 f7       	brne	.-4      	; 0x778c <sub_video_mode3+0xe>

#endif


		lds r2,overlay_tile_table
    7790:	20 90 e7 0a 	lds	r2, 0x0AE7
		lds r3,overlay_tile_table+1
    7794:	30 90 e8 0a 	lds	r3, 0x0AE8
		lds r16,tile_table_lo 
    7798:	00 91 e3 0a 	lds	r16, 0x0AE3
		lds r17,tile_table_hi
    779c:	10 91 e4 0a 	lds	r17, 0x0AE4
		movw r12,r16
    77a0:	68 01       	movw	r12, r16
		movw r6,r16
    77a2:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    77a4:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    77a6:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    77a8:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    77aa:	4e 01       	movw	r8, r28
		clr r0
    77ac:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    77ae:	30 91 e6 0a 	lds	r19, 0x0AE6
		cpi r19,0
    77b2:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    77b4:	09 f0       	breq	.+2      	; 0x77b8 <sub_video_mode3+0x3a>
		ldi YL,lo8(overlay_vram)
    77b6:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    77b8:	09 f0       	breq	.+2      	; 0x77bc <sub_video_mode3+0x3e>
		ldi YH,hi8(overlay_vram)
    77ba:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    77bc:	09 f0       	breq	.+2      	; 0x77c0 <sub_video_mode3+0x42>
		mov r24,r19
    77be:	83 2f       	mov	r24, r19

		breq .+2
    77c0:	09 f0       	breq	.+2      	; 0x77c4 <sub_video_mode3+0x46>
		movw r12,r2
    77c2:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    77c4:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    77c6:	a0 2e       	mov	r10, r16
		clr r22
    77c8:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    77ca:	78 e0       	ldi	r23, 0x08	; 8

000077cc <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    77cc:	06 d3       	rcall	.+1548   	; 0x7dda <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    77ce:	3c e0       	ldi	r19, 0x0C	; 12
    77d0:	3a 95       	dec	r19
    77d2:	f1 f7       	brne	.-4      	; 0x77d0 <next_tile_line+0x4>
    77d4:	00 c0       	rjmp	.+0      	; 0x77d6 <next_tile_line+0xa>

		;***draw line***
		call render_tile_line
    77d6:	0e 94 17 3c 	call	0x782e	; 0x782e <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    77da:	3f e0       	ldi	r19, 0x0F	; 15
    77dc:	3a 95       	dec	r19
    77de:	f1 f7       	brne	.-4      	; 0x77dc <next_tile_line+0x10>
    77e0:	00 c0       	rjmp	.+0      	; 0x77e2 <next_tile_line+0x16>

		dec r10
    77e2:	aa 94       	dec	r10
		breq frame_end
    77e4:	a1 f0       	breq	.+40     	; 0x780e <frame_end>
	
		inc r22
    77e6:	63 95       	inc	r22
		lpm ;3 nop
    77e8:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    77ea:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    77ec:	29 f0       	breq	.+10     	; 0x77f8 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    77ee:	33 e0       	ldi	r19, 0x03	; 3
    77f0:	3a 95       	dec	r19
    77f2:	f1 f7       	brne	.-4      	; 0x77f0 <next_tile_line+0x24>
    77f4:	00 c0       	rjmp	.+0      	; 0x77f6 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    77f6:	ea cf       	rjmp	.-44     	; 0x77cc <next_tile_line>

000077f8 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    77f8:	66 27       	eor	r22, r22

		clr r0
    77fa:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    77fc:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    77fe:	c3 0f       	add	r28, r19
		adc YH,r0
    7800:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    7802:	8a 95       	dec	r24
		brne .+2
    7804:	09 f4       	brne	.+2      	; 0x7808 <next_tile_row+0x10>
		movw YL,r8	;main vram
    7806:	e4 01       	movw	r28, r8
		brne .+2
    7808:	09 f4       	brne	.+2      	; 0x780c <next_tile_row+0x14>
		movw r12,r6	;main tile table
    780a:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    780c:	df cf       	rjmp	.-66     	; 0x77cc <next_tile_line>

0000780e <frame_end>:

	frame_end:

		WAIT r19,18
    780e:	36 e0       	ldi	r19, 0x06	; 6
    7810:	3a 95       	dec	r19
    7812:	f1 f7       	brne	.-4      	; 0x7810 <frame_end+0x2>

		rcall hsync_pulse ;145
    7814:	e2 d2       	rcall	.+1476   	; 0x7dda <hsync_pulse>
		clr r1
		call RestoreBackground
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    7816:	e0 91 ec 0a 	lds	r30, 0x0AEC
		ldi r20,SYNC_FLAG_FIELD
    781a:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    781c:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    781e:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    7820:	e0 93 ec 0a 	sts	0x0AEC, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    7824:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    7826:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    782a:	11 24       	eor	r1, r1


		ret
    782c:	08 95       	ret

0000782e <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    782e:	de 01       	movw	r26, r28

		mul r22,r23
    7830:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    7832:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7834:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7836:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    7838:	00 0d       	add	r16, r0
		adc r17,r1
    783a:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    783c:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    783e:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    7840:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    7842:	00 0d       	add	r16, r0
		adc r17,r1
    7844:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    7846:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    7848:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    784a:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    784c:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    784e:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    7850:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    7852:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    7854:	08 f4       	brcc	.+2      	; 0x7858 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    7856:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    7858:	04 0e       	add	r0, r20
	    adc r1,r21
    785a:	15 1e       	adc	r1, r21

		movw ZL,r0
    785c:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    785e:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    7860:	f0 f0       	brcs	.+60     	; 0x789e <ramloop>

00007862 <romloop>:
	

	romloop:
	    lpm r16,Z+
    7862:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7864:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    7866:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    7868:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    786a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    786c:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    786e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7870:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7872:	28 31       	cpi	r18, 0x18	; 24
		nop
    7874:	00 00       	nop

	    lpm r16,Z+
    7876:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7878:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    787a:	08 f4       	brcc	.+2      	; 0x787e <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    787c:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    787e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7880:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    7882:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    7884:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    7886:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7888:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    788a:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    788c:	1a 95       	dec	r17
   
	    lpm r16,Z+
    788e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7890:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    7892:	05 91       	lpm	r16, Z+

		breq end	
    7894:	31 f1       	breq	.+76     	; 0x78e2 <end>
	    movw ZL,r0   	;copy next tile adress
    7896:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7898:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    789a:	18 f7       	brcc	.-58     	; 0x7862 <romloop>
	
		rjmp .
    789c:	00 c0       	rjmp	.+0      	; 0x789e <ramloop>

0000789e <ramloop>:

	ramloop:

	    ld r16,Z+
    789e:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    78a0:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    78a2:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    78a4:	01 91       	ld	r16, Z+
		nop   
    78a6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    78a8:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    78aa:	23 9f       	mul	r18, r19


	    ld r16,Z+
    78ac:	01 91       	ld	r16, Z+
		nop
    78ae:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    78b0:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    78b2:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    78b4:	00 c0       	rjmp	.+0      	; 0x78b6 <ramloop+0x18>

	    ld r16,Z+
    78b6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    78b8:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    78ba:	08 f0       	brcs	.+2      	; 0x78be <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    78bc:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    78be:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    78c0:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    78c2:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    78c4:	15 1e       	adc	r1, r21
		rjmp .
    78c6:	00 c0       	rjmp	.+0      	; 0x78c8 <ramloop+0x2a>
    
		ld r16,Z+		
    78c8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    78ca:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    78cc:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    78ce:	00 c0       	rjmp	.+0      	; 0x78d0 <ramloop+0x32>

	    ld r16,Z+	
    78d0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    78d2:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    78d4:	01 91       	ld	r16, Z+

	    dec r17
    78d6:	1a 95       	dec	r17
	    breq end
    78d8:	21 f0       	breq	.+8      	; 0x78e2 <end>
	
		movw ZL,r0
    78da:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    78dc:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    78de:	08 f6       	brcc	.-126    	; 0x7862 <romloop>
		rjmp ramloop
    78e0:	de cf       	rjmp	.-68     	; 0x789e <ramloop>

000078e2 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    78e2:	08 b9       	out	0x08, r16	; 8
		clr r16	
    78e4:	00 27       	eor	r16, r16
		lpm	
    78e6:	c8 95       	lpm
		nop
    78e8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    78ea:	08 b9       	out	0x08, r16	; 8

		ret
    78ec:	08 95       	ret

000078ee <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    78ee:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    78f0:	e0 91 e3 0a 	lds	r30, 0x0AE3
	lds ZH,tile_table_hi
    78f4:	f0 91 e4 0a 	lds	r31, 0x0AE4
	mul r24,r18
    78f8:	82 9f       	mul	r24, r18
	add ZL,r0
    78fa:	e0 0d       	add	r30, r0
	adc ZH,r1
    78fc:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    78fe:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    7900:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    7902:	62 9f       	mul	r22, r18
	add XL,r0
    7904:	a0 0d       	add	r26, r0
	adc XH,r1
    7906:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    7908:	15 90       	lpm	r1, Z+
    790a:	1d 92       	st	X+, r1
    790c:	15 90       	lpm	r1, Z+
    790e:	1d 92       	st	X+, r1
    7910:	15 90       	lpm	r1, Z+
    7912:	1d 92       	st	X+, r1
    7914:	15 90       	lpm	r1, Z+
    7916:	1d 92       	st	X+, r1
    7918:	15 90       	lpm	r1, Z+
    791a:	1d 92       	st	X+, r1
    791c:	15 90       	lpm	r1, Z+
    791e:	1d 92       	st	X+, r1
    7920:	15 90       	lpm	r1, Z+
    7922:	1d 92       	st	X+, r1
    7924:	15 90       	lpm	r1, Z+
    7926:	1d 92       	st	X+, r1
    7928:	15 90       	lpm	r1, Z+
    792a:	1d 92       	st	X+, r1
    792c:	15 90       	lpm	r1, Z+
    792e:	1d 92       	st	X+, r1
    7930:	15 90       	lpm	r1, Z+
    7932:	1d 92       	st	X+, r1
    7934:	15 90       	lpm	r1, Z+
    7936:	1d 92       	st	X+, r1
    7938:	15 90       	lpm	r1, Z+
    793a:	1d 92       	st	X+, r1
    793c:	15 90       	lpm	r1, Z+
    793e:	1d 92       	st	X+, r1
    7940:	15 90       	lpm	r1, Z+
    7942:	1d 92       	st	X+, r1
    7944:	15 90       	lpm	r1, Z+
    7946:	1d 92       	st	X+, r1
    7948:	15 90       	lpm	r1, Z+
    794a:	1d 92       	st	X+, r1
    794c:	15 90       	lpm	r1, Z+
    794e:	1d 92       	st	X+, r1
    7950:	15 90       	lpm	r1, Z+
    7952:	1d 92       	st	X+, r1
    7954:	15 90       	lpm	r1, Z+
    7956:	1d 92       	st	X+, r1
    7958:	15 90       	lpm	r1, Z+
    795a:	1d 92       	st	X+, r1
    795c:	15 90       	lpm	r1, Z+
    795e:	1d 92       	st	X+, r1
    7960:	15 90       	lpm	r1, Z+
    7962:	1d 92       	st	X+, r1
    7964:	15 90       	lpm	r1, Z+
    7966:	1d 92       	st	X+, r1
    7968:	15 90       	lpm	r1, Z+
    796a:	1d 92       	st	X+, r1
    796c:	15 90       	lpm	r1, Z+
    796e:	1d 92       	st	X+, r1
    7970:	15 90       	lpm	r1, Z+
    7972:	1d 92       	st	X+, r1
    7974:	15 90       	lpm	r1, Z+
    7976:	1d 92       	st	X+, r1
    7978:	15 90       	lpm	r1, Z+
    797a:	1d 92       	st	X+, r1
    797c:	15 90       	lpm	r1, Z+
    797e:	1d 92       	st	X+, r1
    7980:	15 90       	lpm	r1, Z+
    7982:	1d 92       	st	X+, r1
    7984:	15 90       	lpm	r1, Z+
    7986:	1d 92       	st	X+, r1
    7988:	15 90       	lpm	r1, Z+
    798a:	1d 92       	st	X+, r1
    798c:	15 90       	lpm	r1, Z+
    798e:	1d 92       	st	X+, r1
    7990:	15 90       	lpm	r1, Z+
    7992:	1d 92       	st	X+, r1
    7994:	15 90       	lpm	r1, Z+
    7996:	1d 92       	st	X+, r1
    7998:	15 90       	lpm	r1, Z+
    799a:	1d 92       	st	X+, r1
    799c:	15 90       	lpm	r1, Z+
    799e:	1d 92       	st	X+, r1
    79a0:	15 90       	lpm	r1, Z+
    79a2:	1d 92       	st	X+, r1
    79a4:	15 90       	lpm	r1, Z+
    79a6:	1d 92       	st	X+, r1
    79a8:	15 90       	lpm	r1, Z+
    79aa:	1d 92       	st	X+, r1
    79ac:	15 90       	lpm	r1, Z+
    79ae:	1d 92       	st	X+, r1
    79b0:	15 90       	lpm	r1, Z+
    79b2:	1d 92       	st	X+, r1
    79b4:	15 90       	lpm	r1, Z+
    79b6:	1d 92       	st	X+, r1
    79b8:	15 90       	lpm	r1, Z+
    79ba:	1d 92       	st	X+, r1
    79bc:	15 90       	lpm	r1, Z+
    79be:	1d 92       	st	X+, r1
    79c0:	15 90       	lpm	r1, Z+
    79c2:	1d 92       	st	X+, r1
    79c4:	15 90       	lpm	r1, Z+
    79c6:	1d 92       	st	X+, r1
    79c8:	15 90       	lpm	r1, Z+
    79ca:	1d 92       	st	X+, r1
    79cc:	15 90       	lpm	r1, Z+
    79ce:	1d 92       	st	X+, r1
    79d0:	15 90       	lpm	r1, Z+
    79d2:	1d 92       	st	X+, r1
    79d4:	15 90       	lpm	r1, Z+
    79d6:	1d 92       	st	X+, r1
    79d8:	15 90       	lpm	r1, Z+
    79da:	1d 92       	st	X+, r1
    79dc:	15 90       	lpm	r1, Z+
    79de:	1d 92       	st	X+, r1
    79e0:	15 90       	lpm	r1, Z+
    79e2:	1d 92       	st	X+, r1
    79e4:	15 90       	lpm	r1, Z+
    79e6:	1d 92       	st	X+, r1
    79e8:	15 90       	lpm	r1, Z+
    79ea:	1d 92       	st	X+, r1
    79ec:	15 90       	lpm	r1, Z+
    79ee:	1d 92       	st	X+, r1
    79f0:	15 90       	lpm	r1, Z+
    79f2:	1d 92       	st	X+, r1
    79f4:	15 90       	lpm	r1, Z+
    79f6:	1d 92       	st	X+, r1
    79f8:	15 90       	lpm	r1, Z+
    79fa:	1d 92       	st	X+, r1
    79fc:	15 90       	lpm	r1, Z+
    79fe:	1d 92       	st	X+, r1
    7a00:	15 90       	lpm	r1, Z+
    7a02:	1d 92       	st	X+, r1
    7a04:	15 90       	lpm	r1, Z+
    7a06:	1d 92       	st	X+, r1
	clr r1
    7a08:	11 24       	eor	r1, r1
	ret
    7a0a:	08 95       	ret

00007a0c <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7a0c:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    7a0e:	e0 e9       	ldi	r30, 0x90	; 144
	ldi ZH,hi8(ram_tiles)
    7a10:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    7a12:	82 9f       	mul	r24, r18
	add ZL,r0
    7a14:	e0 0d       	add	r30, r0
	adc ZH,r1
    7a16:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7a18:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    7a1a:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    7a1c:	62 9f       	mul	r22, r18
	add XL,r0
    7a1e:	a0 0d       	add	r26, r0
	adc XH,r1
    7a20:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7a22:	11 90       	ld	r1, Z+
    7a24:	1d 92       	st	X+, r1
    7a26:	11 90       	ld	r1, Z+
    7a28:	1d 92       	st	X+, r1
    7a2a:	11 90       	ld	r1, Z+
    7a2c:	1d 92       	st	X+, r1
    7a2e:	11 90       	ld	r1, Z+
    7a30:	1d 92       	st	X+, r1
    7a32:	11 90       	ld	r1, Z+
    7a34:	1d 92       	st	X+, r1
    7a36:	11 90       	ld	r1, Z+
    7a38:	1d 92       	st	X+, r1
    7a3a:	11 90       	ld	r1, Z+
    7a3c:	1d 92       	st	X+, r1
    7a3e:	11 90       	ld	r1, Z+
    7a40:	1d 92       	st	X+, r1
    7a42:	11 90       	ld	r1, Z+
    7a44:	1d 92       	st	X+, r1
    7a46:	11 90       	ld	r1, Z+
    7a48:	1d 92       	st	X+, r1
    7a4a:	11 90       	ld	r1, Z+
    7a4c:	1d 92       	st	X+, r1
    7a4e:	11 90       	ld	r1, Z+
    7a50:	1d 92       	st	X+, r1
    7a52:	11 90       	ld	r1, Z+
    7a54:	1d 92       	st	X+, r1
    7a56:	11 90       	ld	r1, Z+
    7a58:	1d 92       	st	X+, r1
    7a5a:	11 90       	ld	r1, Z+
    7a5c:	1d 92       	st	X+, r1
    7a5e:	11 90       	ld	r1, Z+
    7a60:	1d 92       	st	X+, r1
    7a62:	11 90       	ld	r1, Z+
    7a64:	1d 92       	st	X+, r1
    7a66:	11 90       	ld	r1, Z+
    7a68:	1d 92       	st	X+, r1
    7a6a:	11 90       	ld	r1, Z+
    7a6c:	1d 92       	st	X+, r1
    7a6e:	11 90       	ld	r1, Z+
    7a70:	1d 92       	st	X+, r1
    7a72:	11 90       	ld	r1, Z+
    7a74:	1d 92       	st	X+, r1
    7a76:	11 90       	ld	r1, Z+
    7a78:	1d 92       	st	X+, r1
    7a7a:	11 90       	ld	r1, Z+
    7a7c:	1d 92       	st	X+, r1
    7a7e:	11 90       	ld	r1, Z+
    7a80:	1d 92       	st	X+, r1
    7a82:	11 90       	ld	r1, Z+
    7a84:	1d 92       	st	X+, r1
    7a86:	11 90       	ld	r1, Z+
    7a88:	1d 92       	st	X+, r1
    7a8a:	11 90       	ld	r1, Z+
    7a8c:	1d 92       	st	X+, r1
    7a8e:	11 90       	ld	r1, Z+
    7a90:	1d 92       	st	X+, r1
    7a92:	11 90       	ld	r1, Z+
    7a94:	1d 92       	st	X+, r1
    7a96:	11 90       	ld	r1, Z+
    7a98:	1d 92       	st	X+, r1
    7a9a:	11 90       	ld	r1, Z+
    7a9c:	1d 92       	st	X+, r1
    7a9e:	11 90       	ld	r1, Z+
    7aa0:	1d 92       	st	X+, r1
    7aa2:	11 90       	ld	r1, Z+
    7aa4:	1d 92       	st	X+, r1
    7aa6:	11 90       	ld	r1, Z+
    7aa8:	1d 92       	st	X+, r1
    7aaa:	11 90       	ld	r1, Z+
    7aac:	1d 92       	st	X+, r1
    7aae:	11 90       	ld	r1, Z+
    7ab0:	1d 92       	st	X+, r1
    7ab2:	11 90       	ld	r1, Z+
    7ab4:	1d 92       	st	X+, r1
    7ab6:	11 90       	ld	r1, Z+
    7ab8:	1d 92       	st	X+, r1
    7aba:	11 90       	ld	r1, Z+
    7abc:	1d 92       	st	X+, r1
    7abe:	11 90       	ld	r1, Z+
    7ac0:	1d 92       	st	X+, r1
    7ac2:	11 90       	ld	r1, Z+
    7ac4:	1d 92       	st	X+, r1
    7ac6:	11 90       	ld	r1, Z+
    7ac8:	1d 92       	st	X+, r1
    7aca:	11 90       	ld	r1, Z+
    7acc:	1d 92       	st	X+, r1
    7ace:	11 90       	ld	r1, Z+
    7ad0:	1d 92       	st	X+, r1
    7ad2:	11 90       	ld	r1, Z+
    7ad4:	1d 92       	st	X+, r1
    7ad6:	11 90       	ld	r1, Z+
    7ad8:	1d 92       	st	X+, r1
    7ada:	11 90       	ld	r1, Z+
    7adc:	1d 92       	st	X+, r1
    7ade:	11 90       	ld	r1, Z+
    7ae0:	1d 92       	st	X+, r1
    7ae2:	11 90       	ld	r1, Z+
    7ae4:	1d 92       	st	X+, r1
    7ae6:	11 90       	ld	r1, Z+
    7ae8:	1d 92       	st	X+, r1
    7aea:	11 90       	ld	r1, Z+
    7aec:	1d 92       	st	X+, r1
    7aee:	11 90       	ld	r1, Z+
    7af0:	1d 92       	st	X+, r1
    7af2:	11 90       	ld	r1, Z+
    7af4:	1d 92       	st	X+, r1
    7af6:	11 90       	ld	r1, Z+
    7af8:	1d 92       	st	X+, r1
    7afa:	11 90       	ld	r1, Z+
    7afc:	1d 92       	st	X+, r1
    7afe:	11 90       	ld	r1, Z+
    7b00:	1d 92       	st	X+, r1
    7b02:	11 90       	ld	r1, Z+
    7b04:	1d 92       	st	X+, r1
    7b06:	11 90       	ld	r1, Z+
    7b08:	1d 92       	st	X+, r1
    7b0a:	11 90       	ld	r1, Z+
    7b0c:	1d 92       	st	X+, r1
    7b0e:	11 90       	ld	r1, Z+
    7b10:	1d 92       	st	X+, r1
    7b12:	11 90       	ld	r1, Z+
    7b14:	1d 92       	st	X+, r1
    7b16:	11 90       	ld	r1, Z+
    7b18:	1d 92       	st	X+, r1
    7b1a:	11 90       	ld	r1, Z+
    7b1c:	1d 92       	st	X+, r1
    7b1e:	11 90       	ld	r1, Z+
    7b20:	1d 92       	st	X+, r1
	clr r1
    7b22:	11 24       	eor	r1, r1
	ret
    7b24:	08 95       	ret

00007b26 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    7b26:	e0 91 d9 0a 	lds	r30, 0x0AD9
	mov   r24,     ZL
    7b2a:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    7b2c:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    7b2e:	e8 0f       	add	r30, r24
	clr   ZH
    7b30:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    7b32:	e0 57       	subi	r30, 0x70	; 112
	sbci  ZH,      hi8(-(ram_tiles_restore))
    7b34:	f5 4f       	sbci	r31, 0xF5	; 245

	lds   r0,      free_tile_index
    7b36:	00 90 d8 0a 	lds	r0, 0x0AD8
	sub   r24,     r0
    7b3a:	80 19       	sub	r24, r0
	brcc  rbg_exit
    7b3c:	30 f4       	brcc	.+12     	; 0x7b4a <rbg_exit>

00007b3e <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    7b3e:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    7b40:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    7b42:	01 90       	ld	r0, Z+
	st    X,       r0
    7b44:	0c 92       	st	X, r0
	inc   r24
    7b46:	83 95       	inc	r24
	brne  rbg_loop
    7b48:	d1 f7       	brne	.-12     	; 0x7b3e <rbg_loop>

00007b4a <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    7b4a:	08 95       	ret

00007b4c <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    7b4c:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    7b4e:	79 9f       	mul	r23, r25
	mov   XL,      r1
    7b50:	a1 2d       	mov	r26, r1
	clr   XH
    7b52:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    7b54:	a5 52       	subi	r26, 0x25	; 37
	sbci  XH,      hi8(-(sprites_tile_banks))
    7b56:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    7b58:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    7b5a:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7b5c:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    7b5e:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    7b60:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7b62:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    7b64:	89 9f       	mul	r24, r25
	movw  XL,      r0
    7b66:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7b68:	a0 57       	subi	r26, 0x70	; 112
	sbci  XH,      hi8(-(ram_tiles))
    7b6a:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    7b6c:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    7b6e:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    7b70:	09 c0       	rjmp	.+18     	; 0x7b84 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    7b72:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    7b74:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7b76:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7b78:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7b7a:	0a c0       	rjmp	.+20     	; 0x7b90 <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    7b7c:	17 96       	adiw	r26, 0x07	; 7

00007b7e <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    7b7e:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    7b80:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    7b82:	08 c0       	rjmp	.+16     	; 0x7b94 <x_check_end>

00007b84 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    7b84:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7b86:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7b88:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7b8a:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    7b8c:	f8 cf       	rjmp	.-16     	; 0x7b7e <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    7b8e:	11 97       	sbiw	r26, 0x01	; 1

00007b90 <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    7b90:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    7b92:	b9 1f       	adc	r27, r25

00007b94 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    7b94:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7b96:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7b98:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7b9a:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7b9c:	09 c0       	rjmp	.+18     	; 0x7bb0 <y_2nd_tile>

	mul   r22,     r19
    7b9e:	63 9f       	mul	r22, r19
	add   XL,      r0
    7ba0:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    7ba2:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7ba4:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7ba6:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7ba8:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7baa:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    7bac:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    7bae:	08 c0       	rjmp	.+16     	; 0x7bc0 <y_check_end>

00007bb0 <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    7bb0:	13 2e       	mov	r1, r19
	dec   r1
    7bb2:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    7bb4:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    7bb6:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    7bb8:	61 9d       	mul	r22, r1
	add   ZL,      r0
    7bba:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7bbc:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    7bbe:	13 2e       	mov	r1, r19

00007bc0 <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7bc0:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    7bc2:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    7bc4:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    7bc6:	05 c0       	rjmp	.+10     	; 0x7bd2 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    7bc8:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    7bca:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    7bcc:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    7bce:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    7bd0:	04 c0       	rjmp	.+8      	; 0x7bda <x_diff_end>

00007bd2 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    7bd2:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    7bd4:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    7bd6:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    7bd8:	6f ef       	ldi	r22, 0xFF	; 255

00007bda <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    7bda:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    7bdc:	04 2e       	mov	r0, r20
	lsr   r20
    7bde:	46 95       	lsr	r20
	brcc  x_loop1
    7be0:	30 f4       	brcc	.+12     	; 0x7bee <x_loop1>
	breq  x_loopx
    7be2:	61 f0       	breq	.+24     	; 0x7bfc <x_loopx>

00007be4 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7be4:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7be6:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7be8:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7bea:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7bec:	b7 1f       	adc	r27, r23

00007bee <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7bee:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7bf0:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7bf2:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7bf4:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7bf6:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    7bf8:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    7bfa:	a1 f7       	brne	.-24     	; 0x7be4 <x_loop0>

00007bfc <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7bfc:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7bfe:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7c00:	2c 93       	st	X, r18

	dec   r1
    7c02:	1a 94       	dec	r1
	breq  loop_e
    7c04:	49 f0       	breq	.+18     	; 0x7c18 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    7c06:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    7c08:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    7c0a:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    7c0c:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    7c0e:	40 2d       	mov	r20, r0
	lsr   r20
    7c10:	46 95       	lsr	r20
	brcc  x_loop1
    7c12:	68 f7       	brcc	.-38     	; 0x7bee <x_loop1>
	brne  x_loop0
    7c14:	39 f7       	brne	.-50     	; 0x7be4 <x_loop0>
	rjmp  x_loopx
    7c16:	f2 cf       	rjmp	.-28     	; 0x7bfc <x_loopx>

00007c18 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    7c18:	08 95       	ret

00007c1a <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    7c1a:	0f 92       	push	r0
	push  r1
    7c1c:	1f 92       	push	r1
	push  ZL
    7c1e:	ef 93       	push	r30
	push  ZH
    7c20:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    7c22:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    7c24:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    7c28:	ff 93       	push	r31

	sbrc  ZL,      2
    7c2a:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    7c2c:	04 c0       	rjmp	.+8      	; 0x7c36 <__vector_13+0x1c>
	sbrc  ZL,      1
    7c2e:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    7c30:	02 c0       	rjmp	.+4      	; 0x7c36 <__vector_13+0x1c>
	nop
    7c32:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    7c34:	00 c0       	rjmp	.+0      	; 0x7c36 <__vector_13+0x1c>
	sbrs  ZL,      0
    7c36:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7c38:	00 c0       	rjmp	.+0      	; 0x7c3a <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    7c3a:	e0 91 eb 0a 	lds	r30, 0x0AEB
	dec ZL
    7c3e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7c40:	e0 93 eb 0a 	sts	0x0AEB, r30

	;process sync phases
	lds ZH,sync_phase
    7c44:	f0 91 ea 0a 	lds	r31, 0x0AEA
	sbrc ZH,0
    7c48:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7c4a:	51 c0       	rjmp	.+162    	; 0x7cee <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7c4c:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7c4e:	98 f0       	brcs	.+38     	; 0x7c76 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7c50:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7c52:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7c56:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7c58:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7c5c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7c5e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7c60:	26 f4       	brtc	.+8      	; 0x7c6a <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7c62:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7c64:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <update_sound>
	rjmp sync_end
    7c68:	b1 c0       	rjmp	.+354    	; 0x7dcc <sync_end>

00007c6a <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7c6a:	e5 e1       	ldi	r30, 0x15	; 21
    7c6c:	ea 95       	dec	r30
    7c6e:	f1 f7       	brne	.-4      	; 0x7c6c <sync_pre_eq_no_sound_update+0x2>
    7c70:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7c72:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7c74:	ab c0       	rjmp	.+342    	; 0x7dcc <sync_end>

00007c76 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7c76:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7c78:	08 f1       	brcs	.+66     	; 0x7cbc <sync_post_eq>

	rjmp .
    7c7a:	00 c0       	rjmp	.+0      	; 0x7c7c <sync_eq+0x6>
	rjmp .
    7c7c:	00 c0       	rjmp	.+0      	; 0x7c7e <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7c7e:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7c80:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7c82:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7c84:	16 f4       	brtc	.+4      	; 0x7c8a <sync_eq_skip>
	
	call update_sound
    7c86:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <update_sound>

00007c8a <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7c8a:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7c8c:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7c90:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7c92:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7c96:	9a c0       	rjmp	.+308    	; 0x7dcc <sync_end>

00007c98 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    7c98:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7c9a:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    7c9e:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    7ca0:	04 c0       	rjmp	.+8      	; 0x7caa <__vector_14+0x12>
	sbrc  ZL,      1
    7ca2:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    7ca4:	02 c0       	rjmp	.+4      	; 0x7caa <__vector_14+0x12>
	nop
    7ca6:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    7ca8:	00 c0       	rjmp	.+0      	; 0x7caa <__vector_14+0x12>
	sbrs  ZL,      0
    7caa:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7cac:	00 c0       	rjmp	.+0      	; 0x7cae <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    7cae:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    7cb0:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    7cb2:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    7cb4:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    7cb8:	ef 91       	pop	r30
	reti
    7cba:	18 95       	reti

00007cbc <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7cbc:	00 c0       	rjmp	.+0      	; 0x7cbe <sync_post_eq+0x2>

	bst ZL,0
    7cbe:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7cc0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7cc2:	26 f4       	brtc	.+8      	; 0x7ccc <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7cc4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7cc6:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <update_sound>
	rjmp sync_pre_eq_cont
    7cca:	05 c0       	rjmp	.+10     	; 0x7cd6 <sync_pre_eq_cont>

00007ccc <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7ccc:	e5 e1       	ldi	r30, 0x15	; 21
    7cce:	ea 95       	dec	r30
    7cd0:	f1 f7       	brne	.-4      	; 0x7cce <sync_post_eq_no_sound_update+0x2>
    7cd2:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7cd4:	28 9a       	sbi	0x05, 0	; 5

00007cd6 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7cd6:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cpi ZL,0
    7cda:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7cdc:	09 f0       	breq	.+2      	; 0x7ce0 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7cde:	76 c0       	rjmp	.+236    	; 0x7dcc <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7ce0:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7ce2:	e0 93 eb 0a 	sts	0x0AEB, r30
	ldi ZL,1
    7ce6:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7ce8:	e0 93 ea 0a 	sts	0x0AEA, r30
	
	rjmp sync_end
    7cec:	6f c0       	rjmp	.+222    	; 0x7dcc <sync_end>

00007cee <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7cee:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7cf0:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7cf4:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7cf6:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7cfa:	00 c0       	rjmp	.+0      	; 0x7cfc <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7cfc:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7cfe:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7d00:	00 c0       	rjmp	.+0      	; 0x7d02 <sync_hsync+0x14>
	call update_sound
    7d02:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7d06:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7d08:	00 90 f1 0a 	lds	r0, 0x0AF1
	sub ZH,r0				
    7d0c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7d0e:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cp ZL,ZH
    7d12:	ef 17       	cp	r30, r31
	brsh no_render
    7d14:	d0 f4       	brcc	.+52     	; 0x7d4a <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7d16:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7d18:	00 90 f1 0a 	lds	r0, 0x0AF1
	sub ZH,r0				
    7d1c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7d1e:	00 90 f2 0a 	lds	r0, 0x0AF2
	sub ZH,r0			
    7d22:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7d24:	ef 17       	cp	r30, r31
	brlo no_render
    7d26:	88 f0       	brcs	.+34     	; 0x7d4a <no_render>

	;push r1-r29
	ldi ZL,29
    7d28:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7d2a:	ff 27       	eor	r31, r31

00007d2c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7d2c:	00 80       	ld	r0, Z
	push r0
    7d2e:	0f 92       	push	r0
	dec ZL
    7d30:	ea 95       	dec	r30
	brne push_loop	
    7d32:	e1 f7       	brne	.-8      	; 0x7d2c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7d34:	06 e0       	ldi	r16, 0x06	; 6
    7d36:	0a 95       	dec	r16
    7d38:	f1 f7       	brne	.-4      	; 0x7d36 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7d3a:	0e 94 bf 3b 	call	0x777e	; 0x777e <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7d3e:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7d40:	ff 27       	eor	r31, r31

00007d42 <pop_loop>:
pop_loop:
	pop r0
    7d42:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7d44:	01 92       	st	Z+, r0
	cpi ZL,30
    7d46:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7d48:	e0 f3       	brcs	.-8      	; 0x7d42 <pop_loop>

00007d4a <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7d4a:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cpi ZL,0
    7d4e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7d50:	09 f0       	breq	.+2      	; 0x7d54 <no_render+0xa>
	rjmp sync_end
    7d52:	3c c0       	rjmp	.+120    	; 0x7dcc <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7d54:	2f 93       	push	r18
	push r19
    7d56:	3f 93       	push	r19
	push r20
    7d58:	4f 93       	push	r20
	push r21
    7d5a:	5f 93       	push	r21
	push r22
    7d5c:	6f 93       	push	r22
	push r23
    7d5e:	7f 93       	push	r23
	push r24
    7d60:	8f 93       	push	r24
	push r25
    7d62:	9f 93       	push	r25
	push r26
    7d64:	af 93       	push	r26
	push r27
    7d66:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7d68:	78 94       	sei
	clr r1
    7d6a:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7d6c:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7d6e:	e0 93 ea 0a 	sts	0x0AEA, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7d72:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7d74:	e0 93 eb 0a 	sts	0x0AEB, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7d78:	80 91 fb 0a 	lds	r24, 0x0AFB
	lds r25,vsync_counter+1
    7d7c:	90 91 fc 0a 	lds	r25, 0x0AFC
	adiw r24,1
    7d80:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7d82:	80 93 fb 0a 	sts	0x0AFB, r24
	sts vsync_counter+1,r25
    7d86:	90 93 fc 0a 	sts	0x0AFC, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7d8a:	e0 91 ed 0a 	lds	r30, 0x0AED
	lds ZH,pre_vsync_user_callback+1
    7d8e:	f0 91 ee 0a 	lds	r31, 0x0AEE
	cp  ZL,r1
    7d92:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7d94:	f1 05       	cpc	r31, r1
	breq .+2 
    7d96:	09 f0       	breq	.+2      	; 0x7d9a <no_render+0x50>
	icall
    7d98:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7d9a:	0e 94 a1 40 	call	0x8142	; 0x8142 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7d9e:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7da2:	0e 94 f8 3e 	call	0x7df0	; 0x7df0 <process_music>
	clr r1
    7da6:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7da8:	e0 91 ef 0a 	lds	r30, 0x0AEF
	lds ZH,post_vsync_user_callback+1
    7dac:	f0 91 f0 0a 	lds	r31, 0x0AF0
	cp  ZL,r1
    7db0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7db2:	f1 05       	cpc	r31, r1
	breq .+2 
    7db4:	09 f0       	breq	.+2      	; 0x7db8 <no_render+0x6e>
	icall
    7db6:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7db8:	bf 91       	pop	r27
	pop r26
    7dba:	af 91       	pop	r26
	pop r25
    7dbc:	9f 91       	pop	r25
	pop r24
    7dbe:	8f 91       	pop	r24
	pop r23
    7dc0:	7f 91       	pop	r23
	pop r22
    7dc2:	6f 91       	pop	r22
	pop r21
    7dc4:	5f 91       	pop	r21
	pop r20
    7dc6:	4f 91       	pop	r20
	pop r19
    7dc8:	3f 91       	pop	r19
	pop r18
    7dca:	2f 91       	pop	r18

00007dcc <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7dcc:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7dce:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7dd0:	ff 91       	pop	r31
	pop ZL
    7dd2:	ef 91       	pop	r30
	pop r1
    7dd4:	1f 90       	pop	r1
	pop r0
    7dd6:	0f 90       	pop	r0
	reti
    7dd8:	18 95       	reti

00007dda <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7dda:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7ddc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7dde:	00 c0       	rjmp	.+0      	; 0x7de0 <hsync_pulse+0x6>
	call update_sound
    7de0:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <update_sound>

	lds ZL,sync_pulse
    7de4:	e0 91 eb 0a 	lds	r30, 0x0AEB
	dec ZL
    7de8:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7dea:	e0 93 eb 0a 	sts	0x0AEB, r30

	ret
    7dee:	08 95       	ret

00007df0 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7df0:	e0 91 03 0b 	lds	r30, 0x0B03
	sbrc ZL,0
    7df4:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7df6:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <ProcessMusic>
#endif

	ret
    7dfa:	08 95       	ret

00007dfc <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7dfc:	0f 93       	push	r16
	push r17
    7dfe:	1f 93       	push	r17
	push r18
    7e00:	2f 93       	push	r18
	push r28
    7e02:	cf 93       	push	r28
	push r29
    7e04:	df 93       	push	r29

	mov r18,ZL
    7e06:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7e08:	00 91 05 0b 	lds	r16, 0x0B05
	lds r17,tr1_pos_frac
    7e0c:	10 91 07 0b 	lds	r17, 0x0B07
	add	r17,r16	;add step to fractional part of sample pos
    7e10:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7e12:	00 91 06 0b 	lds	r16, 0x0B06
	lds ZL,tr1_pos_lo
    7e16:	e0 91 08 0b 	lds	r30, 0x0B08
	lds ZH,tr1_pos_hi 
    7e1a:	f0 91 09 0b 	lds	r31, 0x0B09
	adc ZL,r16	;add step to low byte of sample pos
    7e1e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7e20:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7e22:	e0 93 08 0b 	sts	0x0B08, r30
	sts tr1_pos_frac,r17
    7e26:	10 93 07 0b 	sts	0x0B07, r17
	lds r17,tr1_vol
    7e2a:	10 91 04 0b 	lds	r17, 0x0B04
	mulsu r16,r17;(sample*mixing vol)
    7e2e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7e30:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7e32:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7e34:	d0 2d       	mov	r29, r0
	nop
    7e36:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7e38:	00 91 0b 0b 	lds	r16, 0x0B0B
	lds r17,tr2_pos_frac
    7e3c:	10 91 0d 0b 	lds	r17, 0x0B0D
	add	r17,r16	;add step to fractional part of sample pos
    7e40:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7e42:	00 91 0c 0b 	lds	r16, 0x0B0C
	lds ZL,tr2_pos_lo
    7e46:	e0 91 0e 0b 	lds	r30, 0x0B0E
	lds ZH,tr2_pos_hi 
    7e4a:	f0 91 0f 0b 	lds	r31, 0x0B0F
	adc ZL,r16	;add step to low byte of sample pos
    7e4e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7e50:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7e52:	e0 93 0e 0b 	sts	0x0B0E, r30
	sts tr2_pos_frac,r17
    7e56:	10 93 0d 0b 	sts	0x0B0D, r17
	lds r17,tr2_vol
    7e5a:	10 91 0a 0b 	lds	r17, 0x0B0A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7e5e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7e60:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7e62:	20 ff       	sbrs	r18, 0
	rjmp .
    7e64:	00 c0       	rjmp	.+0      	; 0x7e66 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7e66:	01 03       	mulsu	r16, r17
	clr r0
    7e68:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7e6a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7e6c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7e6e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7e70:	00 91 11 0b 	lds	r16, 0x0B11
	lds r17,tr3_pos_frac
    7e74:	10 91 13 0b 	lds	r17, 0x0B13
	add	r17,r16				;add step to fractional part of sample pos
    7e78:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7e7a:	00 91 12 0b 	lds	r16, 0x0B12
	lds ZL,tr3_pos_lo
    7e7e:	e0 91 14 0b 	lds	r30, 0x0B14
	lds ZH,tr3_pos_hi 
    7e82:	f0 91 15 0b 	lds	r31, 0x0B15
	adc ZL,r16				;add step to low byte of sample pos
    7e86:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7e88:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7e8a:	e0 93 14 0b 	sts	0x0B14, r30
	sts tr3_pos_frac,r17
    7e8e:	10 93 13 0b 	sts	0x0B13, r17
	lds r17,tr3_vol
    7e92:	10 91 10 0b 	lds	r17, 0x0B10
	mulsu r16,r17			;(sample*mixing vol)
    7e96:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7e98:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7e9a:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7e9c:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7e9e:	00 91 18 0b 	lds	r16, 0x0B18
	lds r17,tr4_barrel_hi
    7ea2:	10 91 19 0b 	lds	r17, 0x0B19
	lds ZL,tr4_divider
    7ea6:	e0 91 1a 0b 	lds	r30, 0x0B1A
	dec ZL	
    7eaa:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7eac:	92 f4       	brpl	.+36     	; 0x7ed2 <ch4_no_shift>

	lds ZH,tr4_params
    7eae:	f0 91 17 0b 	lds	r31, 0x0B17
	mov ZL,ZH
    7eb2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7eb4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7eb6:	00 2e       	mov	r0, r16
	lsr r0
    7eb8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7eba:	00 26       	eor	r0, r16
	bst r0,0
    7ebc:	00 fa       	bst	r0, 0
	lsr r17
    7ebe:	16 95       	lsr	r17
	ror r16
    7ec0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7ec2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7ec4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7ec6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7ec8:	00 93 18 0b 	sts	0x0B18, r16
	sts tr4_barrel_hi,r17
    7ecc:	10 93 19 0b 	sts	0x0B19, r17

	rjmp ch4_end
    7ed0:	03 c0       	rjmp	.+6      	; 0x7ed8 <ch4_end>

00007ed2 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7ed2:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7ed4:	1a 95       	dec	r17
	brne .-4
    7ed6:	f1 f7       	brne	.-4      	; 0x7ed4 <ch4_no_shift+0x2>

00007ed8 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7ed8:	e0 93 1a 0b 	sts	0x0B1A, r30
	ldi r17,0x80 ;-128
    7edc:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7ede:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7ee0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7ee2:	21 ff       	sbrs	r18, 1
	rjmp .
    7ee4:	00 c0       	rjmp	.+0      	; 0x7ee6 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7ee6:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7ee8:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7eea:	00 91 16 0b 	lds	r16, 0x0B16

	mulsu r17,r16;(sample*mixing vol)
    7eee:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7ef0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7ef2:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7ef4:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7ef6:	00 91 1f 0b 	lds	r16, 0x0B1F
	lds r17,tr5_step_lo 
    7efa:	10 91 1d 0b 	lds	r17, 0x0B1D
	add r16,r17
    7efe:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7f00:	00 93 1f 0b 	sts	0x0B1F, r16

	;add lo
	lds ZL,tr5_pos_lo
    7f04:	e0 91 20 0b 	lds	r30, 0x0B20
	lds r17,tr5_step_hi 
    7f08:	10 91 1e 0b 	lds	r17, 0x0B1E
	adc ZL,r17
    7f0c:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7f0e:	f0 91 21 0b 	lds	r31, 0x0B21
	ldi r16,0
    7f12:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7f14:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7f16:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7f18:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_len_hi	
    7f1c:	10 90 23 0b 	lds	r1, 0x0B23
	sub r16,r0
    7f20:	00 19       	sub	r16, r0
	sbc r17,r1
    7f22:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7f24:	00 90 24 0b 	lds	r0, 0x0B24
	lds r1,tr5_loop_end_hi
    7f28:	10 90 25 0b 	lds	r1, 0x0B25

	cp ZL,r0
    7f2c:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7f2e:	f1 05       	cpc	r31, r1
	brlo .+2
    7f30:	08 f0       	brcs	.+2      	; 0x7f34 <ch4_end+0x5c>
	movw ZL,r16
    7f32:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7f34:	e0 93 20 0b 	sts	0x0B20, r30
	sts tr5_pos_hi,ZH
    7f38:	f0 93 21 0b 	sts	0x0B21, r31

	lpm	r16,Z	;load sample
    7f3c:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    7f3e:	10 91 1c 0b 	lds	r17, 0x0B1C

	mulsu r16,r17;(sample*mixing vol)
    7f42:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7f44:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7f46:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7f48:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7f4a:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7f4c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7f4e:	d0 05       	cpc	r29, r0
	brlt .+2
    7f50:	0c f0       	brlt	.+2      	; 0x7f54 <ch4_end+0x7c>
	ldi r28,127
    7f52:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7f54:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7f56:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7f58:	d0 05       	cpc	r29, r0
	brge .+2
    7f5a:	0c f4       	brge	.+2      	; 0x7f5e <ch4_end+0x86>
	ldi r28,-128
    7f5c:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7f5e:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7f60:	c0 93 b3 00 	sts	0x00B3, r28

00007f64 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7f64:	df 91       	pop	r29
	pop r28
    7f66:	cf 91       	pop	r28
	pop r18
    7f68:	2f 91       	pop	r18
	pop r17
    7f6a:	1f 91       	pop	r17
	pop r16
    7f6c:	0f 91       	pop	r16
	
	ret
    7f6e:	08 95       	ret

00007f70 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7f70:	80 93 db 0a 	sts	0x0ADB, r24
	sts sprites_tile_banks+1,r25
    7f74:	90 93 dc 0a 	sts	0x0ADC, r25
	ret
    7f78:	08 95       	ret

00007f7a <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7f7a:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7f7c:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7f7e:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    7f80:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7f82:	68 e1       	ldi	r22, 0x18	; 24

00007f84 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7f84:	6d 93       	st	X+, r22
	sbiw r30,1
    7f86:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7f88:	e9 f7       	brne	.-6      	; 0x7f84 <fill_vram_loop>

	clr r1
    7f8a:	11 24       	eor	r1, r1

	ret
    7f8c:	08 95       	ret

00007f8e <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7f8e:	50 91 e5 0a 	lds	r21, 0x0AE5
	add r20,21
    7f92:	45 0f       	add	r20, r21
	rjmp SetTile	
    7f94:	00 c0       	rjmp	.+0      	; 0x7f96 <SetTile>

00007f96 <SetTile>:

	ret

#else

	clr r25
    7f96:	99 27       	eor	r25, r25
	clr r23	
    7f98:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    7f9a:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    7f9c:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    7f9e:	08 0e       	add	r0, r24
	adc r1,r25
    7fa0:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    7fa2:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    7fa4:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    7fa6:	a0 0d       	add	r26, r0
	adc XH,r1
    7fa8:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    7faa:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    7fac:	4c 93       	st	X, r20

	clr r1
    7fae:	11 24       	eor	r1, r1

	ret
    7fb0:	08 95       	ret

00007fb2 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    7fb2:	80 93 e5 0a 	sts	0x0AE5, r24
	ret
    7fb6:	08 95       	ret

00007fb8 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7fb8:	80 93 e3 0a 	sts	0x0AE3, r24
	sts tile_table_hi,r25	
    7fbc:	90 93 e4 0a 	sts	0x0AE4, r25
	ret
    7fc0:	08 95       	ret

00007fc2 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7fc2:	80 91 ec 0a 	lds	r24, 0x0AEC
	andi r24,SYNC_FLAG_VSYNC
    7fc6:	81 70       	andi	r24, 0x01	; 1
	ret
    7fc8:	08 95       	ret

00007fca <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7fca:	20 91 ec 0a 	lds	r18, 0x0AEC
	andi r18,~SYNC_FLAG_VSYNC
    7fce:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7fd0:	20 93 ec 0a 	sts	0x0AEC, r18
	ret
    7fd4:	08 95       	ret

00007fd6 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7fd6:	88 23       	and	r24, r24
	brne rj_p2
    7fd8:	29 f4       	brne	.+10     	; 0x7fe4 <rj_p2>
		
	lds r24,joypad1_status_lo
    7fda:	80 91 f3 0a 	lds	r24, 0x0AF3
	lds r25,joypad1_status_lo+1
    7fde:	90 91 f4 0a 	lds	r25, 0x0AF4
	ret
    7fe2:	08 95       	ret

00007fe4 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7fe4:	80 91 f7 0a 	lds	r24, 0x0AF7
	lds r25,joypad2_status_lo+1	
    7fe8:	90 91 f8 0a 	lds	r25, 0x0AF8

	ret
    7fec:	08 95       	ret

00007fee <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7fee:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7ff0:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7ff2:	f1 f7       	brne	.-4      	; 0x7ff0 <WaitUs+0x2>
	nop
    7ff4:	00 00       	nop
	sbiw r24,1
    7ff6:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7ff8:	d1 f7       	brne	.-12     	; 0x7fee <WaitUs>

	ret
    7ffa:	08 95       	ret

00007ffc <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7ffc:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7ffe:	fe cf       	rjmp	.-4      	; 0x7ffc <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8000:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8002:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8004:	60 bd       	out	0x20, r22	; 32
   cli
    8006:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8008:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    800a:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    800c:	78 94       	sei
   ret
    800e:	08 95       	ret

00008010 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8010:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8012:	fe cf       	rjmp	.-4      	; 0x8010 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8014:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8016:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8018:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    801a:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    801c:	80 b5       	in	r24, 0x20	; 32
   sei
    801e:	78 94       	sei
   ret
    8020:	08 95       	ret

00008022 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8022:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8024:	80 93 eb 0a 	sts	0x0AEB, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    8028:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    802c:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    8030:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    8034:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    8038:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    803c:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    8040:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8044:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8048:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    804a:	80 93 81 00 	sts	0x0081, r24

		cli
    804e:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8050:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8052:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8056:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8058:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    805c:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    805e:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8062:	90 93 60 00 	sts	0x0060, r25
	
		sei
    8066:	78 94       	sei

00008068 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    8068:	80 91 eb 0a 	lds	r24, 0x0AEB
		cpi r24,8
    806c:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    806e:	e0 f3       	brcs	.-8      	; 0x8068 <wait>

		ret
    8070:	08 95       	ret

00008072 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    8072:	80 91 fd 0a 	lds	r24, 0x0AFD
		lds r25,random_value+1
    8076:	90 91 fe 0a 	lds	r25, 0x0AFE
		ret
    807a:	08 95       	ret

0000807c <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    807c:	0f 93       	push	r16
		push r17
    807e:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    8080:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8082:	0f 93       	push	r16

		lds r16,sync_pulse
    8084:	00 91 eb 0a 	lds	r16, 0x0AEB
		inc r16
    8088:	03 95       	inc	r16
		sts sync_pulse,r16
    808a:	00 93 eb 0a 	sts	0x0AEB, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    808e:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8090:	08 c0       	rjmp	.+16     	; 0x80a2 <__vector_8+0x26>
		lds r17,random_value
    8092:	10 91 fd 0a 	lds	r17, 0x0AFD
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8096:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    809a:	10 27       	eor	r17, r16
		sts random_value,r17
    809c:	10 93 fd 0a 	sts	0x0AFD, r17
		rjmp 2f
    80a0:	07 c0       	rjmp	.+14     	; 0x80b0 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    80a2:	10 91 fe 0a 	lds	r17, 0x0AFE
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    80a6:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    80aa:	10 27       	eor	r17, r16
		sts random_value+1,r17
    80ac:	10 93 fe 0a 	sts	0x0AFE, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    80b0:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    80b2:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    80b6:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    80b8:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    80ba:	1f 91       	pop	r17
		pop r16
    80bc:	0f 91       	pop	r16
		reti
    80be:	18 95       	reti

000080c0 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    80c0:	98 e0       	ldi	r25, 0x08	; 8
    80c2:	88 e1       	ldi	r24, 0x18	; 24
    80c4:	0f b6       	in	r0, 0x3f	; 63
    80c6:	f8 94       	cli
    80c8:	a8 95       	wdr
    80ca:	80 93 60 00 	sts	0x0060, r24
    80ce:	0f be       	out	0x3f, r0	; 63
    80d0:	90 93 60 00 	sts	0x0060, r25
	while(1);
    80d4:	ff cf       	rjmp	.-2      	; 0x80d4 <SoftReset+0x14>

000080d6 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    80d6:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    80d8:	c8 95       	lpm
    80da:	c8 95       	lpm
		Wait200ns();
    80dc:	c8 95       	lpm
    80de:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    80e0:	12 98       	cbi	0x02, 2	; 2
    80e2:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    80e4:	80 e0       	ldi	r24, 0x00	; 0
    80e6:	90 e0       	ldi	r25, 0x00	; 0
    80e8:	20 e0       	ldi	r18, 0x00	; 0
    80ea:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    80ec:	36 95       	lsr	r19
    80ee:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    80f0:	96 95       	lsr	r25
    80f2:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    80f4:	c8 95       	lpm
    80f6:	c8 95       	lpm
			Wait200ns();
    80f8:	c8 95       	lpm
    80fa:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    80fc:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    80fe:	00 9b       	sbis	0x00, 0	; 0
    8100:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8102:	01 9b       	sbis	0x00, 1	; 0
    8104:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8106:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8108:	c8 95       	lpm
    810a:	c8 95       	lpm
			Wait200ns();
    810c:	c8 95       	lpm
    810e:	c8 95       	lpm
    8110:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8112:	61 f7       	brne	.-40     	; 0x80ec <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8114:	30 93 f4 0a 	sts	0x0AF4, r19
    8118:	20 93 f3 0a 	sts	0x0AF3, r18
		joypad2_status_lo=p2ButtonsLo;
    811c:	90 93 f8 0a 	sts	0x0AF8, r25
    8120:	80 93 f7 0a 	sts	0x0AF7, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8124:	80 91 f3 0a 	lds	r24, 0x0AF3
    8128:	90 91 f4 0a 	lds	r25, 0x0AF4
    812c:	0f 97       	sbiw	r24, 0x0f	; 15
    812e:	31 f0       	breq	.+12     	; 0x813c <ReadButtons+0x66>
    8130:	80 91 f7 0a 	lds	r24, 0x0AF7
    8134:	90 91 f8 0a 	lds	r25, 0x0AF8
    8138:	0f 97       	sbiw	r24, 0x0f	; 15
    813a:	11 f4       	brne	.+4      	; 0x8140 <ReadButtons+0x6a>
		SoftReset();
    813c:	0e 94 60 40 	call	0x80c0	; 0x80c0 <SoftReset>
    8140:	08 95       	ret

00008142 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8142:	10 92 36 0b 	sts	0x0B36, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8146:	00 99       	sbic	0x00, 0	; 0
    8148:	03 c0       	rjmp	.+6      	; 0x8150 <ReadControllers+0xe>
    814a:	81 e0       	ldi	r24, 0x01	; 1
    814c:	80 93 36 0b 	sts	0x0B36, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    8150:	01 99       	sbic	0x00, 1	; 0
    8152:	05 c0       	rjmp	.+10     	; 0x815e <ReadControllers+0x1c>
    8154:	80 91 36 0b 	lds	r24, 0x0B36
    8158:	82 60       	ori	r24, 0x02	; 2
    815a:	80 93 36 0b 	sts	0x0B36, r24
			
	//read the standard buttons
	ReadButtons();
    815e:	0c 94 6b 40 	jmp	0x80d6	; 0x80d6 <ReadButtons>

00008162 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8162:	cf 93       	push	r28
    8164:	df 93       	push	r29
    8166:	c0 e0       	ldi	r28, 0x00	; 0
    8168:	d0 e0       	ldi	r29, 0x00	; 0
    816a:	fe 01       	movw	r30, r28
    816c:	e2 56       	subi	r30, 0x62	; 98
    816e:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    8170:	64 91       	lpm	r22, Z
    8172:	ce 01       	movw	r24, r28
    8174:	0e 94 fe 3f 	call	0x7ffc	; 0x7ffc <WriteEeprom>
    8178:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    817a:	c0 32       	cpi	r28, 0x20	; 32
    817c:	d1 05       	cpc	r29, r1
    817e:	a9 f7       	brne	.-22     	; 0x816a <FormatEeprom+0x8>
    8180:	c0 e2       	ldi	r28, 0x20	; 32
    8182:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8184:	6f ef       	ldi	r22, 0xFF	; 255
    8186:	ce 01       	movw	r24, r28
    8188:	0e 94 fe 3f 	call	0x7ffc	; 0x7ffc <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    818c:	6f ef       	ldi	r22, 0xFF	; 255
    818e:	ce 01       	movw	r24, r28
    8190:	01 96       	adiw	r24, 0x01	; 1
    8192:	0e 94 fe 3f 	call	0x7ffc	; 0x7ffc <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    8196:	a0 96       	adiw	r28, 0x20	; 32
    8198:	c1 15       	cp	r28, r1
    819a:	88 e0       	ldi	r24, 0x08	; 8
    819c:	d8 07       	cpc	r29, r24
    819e:	91 f7       	brne	.-28     	; 0x8184 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    81a0:	df 91       	pop	r29
    81a2:	cf 91       	pop	r28
    81a4:	08 95       	ret

000081a6 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    81a6:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    81a8:	80 e0       	ldi	r24, 0x00	; 0
    81aa:	90 e0       	ldi	r25, 0x00	; 0
    81ac:	0e 94 08 40 	call	0x8010	; 0x8010 <ReadEeprom>
    81b0:	c8 2f       	mov	r28, r24
    81b2:	81 e0       	ldi	r24, 0x01	; 1
    81b4:	90 e0       	ldi	r25, 0x00	; 0
    81b6:	0e 94 08 40 	call	0x8010	; 0x8010 <ReadEeprom>
    81ba:	28 2f       	mov	r18, r24
    81bc:	30 e0       	ldi	r19, 0x00	; 0
    81be:	32 2f       	mov	r19, r18
    81c0:	22 27       	eor	r18, r18
    81c2:	2c 0f       	add	r18, r28
    81c4:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    81c6:	81 e0       	ldi	r24, 0x01	; 1
    81c8:	2a 35       	cpi	r18, 0x5A	; 90
    81ca:	35 45       	sbci	r19, 0x55	; 85
    81cc:	09 f0       	breq	.+2      	; 0x81d0 <isEepromFormatted+0x2a>
    81ce:	80 e0       	ldi	r24, 0x00	; 0
}
    81d0:	cf 91       	pop	r28
    81d2:	08 95       	ret

000081d4 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    81d4:	8f 92       	push	r8
    81d6:	9f 92       	push	r9
    81d8:	af 92       	push	r10
    81da:	bf 92       	push	r11
    81dc:	cf 92       	push	r12
    81de:	df 92       	push	r13
    81e0:	ef 92       	push	r14
    81e2:	ff 92       	push	r15
    81e4:	0f 93       	push	r16
    81e6:	1f 93       	push	r17
    81e8:	cf 93       	push	r28
    81ea:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    81ec:	fb 01       	movw	r30, r22
    81ee:	11 82       	std	Z+1, r1	; 0x01
    81f0:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    81f2:	8f 3f       	cpi	r24, 0xFF	; 255
    81f4:	ff ef       	ldi	r31, 0xFF	; 255
    81f6:	9f 07       	cpc	r25, r31
    81f8:	89 f1       	breq	.+98     	; 0x825c <EepromBlockExists+0x88>
    81fa:	6a 01       	movw	r12, r20
    81fc:	8b 01       	movw	r16, r22
    81fe:	7c 01       	movw	r14, r24
    8200:	a1 2c       	mov	r10, r1
    8202:	b1 2c       	mov	r11, r1
    8204:	c0 e0       	ldi	r28, 0x00	; 0
    8206:	d3 e0       	ldi	r29, 0x03	; 3
    8208:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    820a:	c5 01       	movw	r24, r10
    820c:	0e 94 08 40 	call	0x8010	; 0x8010 <ReadEeprom>
    8210:	88 2e       	mov	r8, r24
    8212:	c5 01       	movw	r24, r10
    8214:	01 96       	adiw	r24, 0x01	; 1
    8216:	0e 94 08 40 	call	0x8010	; 0x8010 <ReadEeprom>
    821a:	28 2f       	mov	r18, r24
    821c:	30 e0       	ldi	r19, 0x00	; 0
    821e:	32 2f       	mov	r19, r18
    8220:	22 27       	eor	r18, r18
    8222:	28 0d       	add	r18, r8
    8224:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    8226:	2e 15       	cp	r18, r14
    8228:	3f 05       	cpc	r19, r15
    822a:	29 f4       	brne	.+10     	; 0x8236 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    822c:	f8 01       	movw	r30, r16
    822e:	b1 82       	std	Z+1, r11	; 0x01
    8230:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8232:	d0 e0       	ldi	r29, 0x00	; 0
    8234:	0b c0       	rjmp	.+22     	; 0x824c <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    8236:	2f 3f       	cpi	r18, 0xFF	; 255
    8238:	3f 4f       	sbci	r19, 0xFF	; 255
    823a:	41 f4       	brne	.+16     	; 0x824c <EepromBlockExists+0x78>
    823c:	91 10       	cpse	r9, r1
    823e:	06 c0       	rjmp	.+12     	; 0x824c <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    8240:	c1 14       	cp	r12, r1
    8242:	d1 04       	cpc	r13, r1
    8244:	11 f0       	breq	.+4      	; 0x824a <EepromBlockExists+0x76>
    8246:	f6 01       	movw	r30, r12
    8248:	c0 83       	st	Z, r28
    824a:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    824c:	cf 5f       	subi	r28, 0xFF	; 255
    824e:	f0 e2       	ldi	r31, 0x20	; 32
    8250:	af 0e       	add	r10, r31
    8252:	b1 1c       	adc	r11, r1
    8254:	c0 34       	cpi	r28, 0x40	; 64
    8256:	c9 f6       	brne	.-78     	; 0x820a <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    8258:	8d 2f       	mov	r24, r29
    825a:	01 c0       	rjmp	.+2      	; 0x825e <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    825c:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    825e:	df 91       	pop	r29
    8260:	cf 91       	pop	r28
    8262:	1f 91       	pop	r17
    8264:	0f 91       	pop	r16
    8266:	ff 90       	pop	r15
    8268:	ef 90       	pop	r14
    826a:	df 90       	pop	r13
    826c:	cf 90       	pop	r12
    826e:	bf 90       	pop	r11
    8270:	af 90       	pop	r10
    8272:	9f 90       	pop	r9
    8274:	8f 90       	pop	r8
    8276:	08 95       	ret

00008278 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8278:	ef 92       	push	r14
    827a:	ff 92       	push	r15
    827c:	0f 93       	push	r16
    827e:	1f 93       	push	r17
    8280:	cf 93       	push	r28
    8282:	df 93       	push	r29
    8284:	00 d0       	rcall	.+0      	; 0x8286 <EepromWriteBlock+0xe>
    8286:	1f 92       	push	r1
    8288:	cd b7       	in	r28, 0x3d	; 61
    828a:	de b7       	in	r29, 0x3e	; 62
    828c:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    828e:	1a 82       	std	Y+2, r1	; 0x02
    8290:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    8292:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    8294:	ae 01       	movw	r20, r28
    8296:	4d 5f       	subi	r20, 0xFD	; 253
    8298:	5f 4f       	sbci	r21, 0xFF	; 255
    829a:	be 01       	movw	r22, r28
    829c:	6f 5f       	subi	r22, 0xFF	; 255
    829e:	7f 4f       	sbci	r23, 0xFF	; 255
    82a0:	fc 01       	movw	r30, r24
    82a2:	80 81       	ld	r24, Z
    82a4:	91 81       	ldd	r25, Z+1	; 0x01
    82a6:	0e 94 ea 40 	call	0x81d4	; 0x81d4 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    82aa:	88 23       	and	r24, r24
    82ac:	11 f0       	breq	.+4      	; 0x82b2 <EepromWriteBlock+0x3a>
    82ae:	83 30       	cpi	r24, 0x03	; 3
    82b0:	19 f5       	brne	.+70     	; 0x82f8 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    82b2:	89 81       	ldd	r24, Y+1	; 0x01
    82b4:	9a 81       	ldd	r25, Y+2	; 0x02
    82b6:	89 2b       	or	r24, r25
    82b8:	49 f4       	brne	.+18     	; 0x82cc <EepromWriteBlock+0x54>
    82ba:	8b 81       	ldd	r24, Y+3	; 0x03
    82bc:	88 23       	and	r24, r24
    82be:	d9 f0       	breq	.+54     	; 0x82f6 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    82c0:	f0 e2       	ldi	r31, 0x20	; 32
    82c2:	8f 9f       	mul	r24, r31
    82c4:	c0 01       	movw	r24, r0
    82c6:	11 24       	eor	r1, r1
    82c8:	9a 83       	std	Y+2, r25	; 0x02
    82ca:	89 83       	std	Y+1, r24	; 0x01
    82cc:	78 01       	movw	r14, r16
    82ce:	20 e2       	ldi	r18, 0x20	; 32
    82d0:	e2 0e       	add	r14, r18
    82d2:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    82d4:	f8 01       	movw	r30, r16
    82d6:	61 91       	ld	r22, Z+
    82d8:	8f 01       	movw	r16, r30
    82da:	89 81       	ldd	r24, Y+1	; 0x01
    82dc:	9a 81       	ldd	r25, Y+2	; 0x02
    82de:	9c 01       	movw	r18, r24
    82e0:	2f 5f       	subi	r18, 0xFF	; 255
    82e2:	3f 4f       	sbci	r19, 0xFF	; 255
    82e4:	3a 83       	std	Y+2, r19	; 0x02
    82e6:	29 83       	std	Y+1, r18	; 0x01
    82e8:	0e 94 fe 3f 	call	0x7ffc	; 0x7ffc <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    82ec:	0e 15       	cp	r16, r14
    82ee:	1f 05       	cpc	r17, r15
    82f0:	89 f7       	brne	.-30     	; 0x82d4 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    82f2:	80 e0       	ldi	r24, 0x00	; 0
    82f4:	01 c0       	rjmp	.+2      	; 0x82f8 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    82f6:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    82f8:	0f 90       	pop	r0
    82fa:	0f 90       	pop	r0
    82fc:	0f 90       	pop	r0
    82fe:	df 91       	pop	r29
    8300:	cf 91       	pop	r28
    8302:	1f 91       	pop	r17
    8304:	0f 91       	pop	r16
    8306:	ff 90       	pop	r15
    8308:	ef 90       	pop	r14
    830a:	08 95       	ret

0000830c <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    830c:	cf 92       	push	r12
    830e:	df 92       	push	r13
    8310:	ff 92       	push	r15
    8312:	0f 93       	push	r16
    8314:	1f 93       	push	r17
    8316:	cf 93       	push	r28
    8318:	df 93       	push	r29
    831a:	00 d0       	rcall	.+0      	; 0x831c <EepromReadBlock+0x10>
    831c:	cd b7       	in	r28, 0x3d	; 61
    831e:	de b7       	in	r29, 0x3e	; 62
    8320:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8322:	40 e0       	ldi	r20, 0x00	; 0
    8324:	50 e0       	ldi	r21, 0x00	; 0
    8326:	be 01       	movw	r22, r28
    8328:	6f 5f       	subi	r22, 0xFF	; 255
    832a:	7f 4f       	sbci	r23, 0xFF	; 255
    832c:	0e 94 ea 40 	call	0x81d4	; 0x81d4 <EepromBlockExists>
    8330:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8332:	81 11       	cpse	r24, r1
    8334:	13 c0       	rjmp	.+38     	; 0x835c <EepromReadBlock+0x50>
    8336:	68 01       	movw	r12, r16
    8338:	80 e2       	ldi	r24, 0x20	; 32
    833a:	c8 0e       	add	r12, r24
    833c:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    833e:	89 81       	ldd	r24, Y+1	; 0x01
    8340:	9a 81       	ldd	r25, Y+2	; 0x02
    8342:	9c 01       	movw	r18, r24
    8344:	2f 5f       	subi	r18, 0xFF	; 255
    8346:	3f 4f       	sbci	r19, 0xFF	; 255
    8348:	3a 83       	std	Y+2, r19	; 0x02
    834a:	29 83       	std	Y+1, r18	; 0x01
    834c:	0e 94 08 40 	call	0x8010	; 0x8010 <ReadEeprom>
    8350:	f8 01       	movw	r30, r16
    8352:	81 93       	st	Z+, r24
    8354:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8356:	ec 15       	cp	r30, r12
    8358:	fd 05       	cpc	r31, r13
    835a:	89 f7       	brne	.-30     	; 0x833e <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    835c:	8f 2d       	mov	r24, r15
    835e:	0f 90       	pop	r0
    8360:	0f 90       	pop	r0
    8362:	df 91       	pop	r29
    8364:	cf 91       	pop	r28
    8366:	1f 91       	pop	r17
    8368:	0f 91       	pop	r16
    836a:	ff 90       	pop	r15
    836c:	df 90       	pop	r13
    836e:	cf 90       	pop	r12
    8370:	08 95       	ret

00008372 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8372:	00 97       	sbiw	r24, 0x00	; 0
    8374:	21 f0       	breq	.+8      	; 0x837e <GetPrngNumber+0xc>
    8376:	90 93 01 0b 	sts	0x0B01, r25
    837a:	80 93 00 0b 	sts	0x0B00, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    837e:	20 91 00 0b 	lds	r18, 0x0B00
    8382:	30 91 01 0b 	lds	r19, 0x0B01
    8386:	a9 01       	movw	r20, r18
    8388:	56 95       	lsr	r21
    838a:	47 95       	ror	r20
    838c:	56 95       	lsr	r21
    838e:	47 95       	ror	r20
    8390:	c9 01       	movw	r24, r18
    8392:	63 e0       	ldi	r22, 0x03	; 3
    8394:	96 95       	lsr	r25
    8396:	87 95       	ror	r24
    8398:	6a 95       	dec	r22
    839a:	e1 f7       	brne	.-8      	; 0x8394 <GetPrngNumber+0x22>
    839c:	84 27       	eor	r24, r20
    839e:	95 27       	eor	r25, r21
    83a0:	82 27       	eor	r24, r18
    83a2:	93 27       	eor	r25, r19
    83a4:	a9 01       	movw	r20, r18
    83a6:	75 e0       	ldi	r23, 0x05	; 5
    83a8:	56 95       	lsr	r21
    83aa:	47 95       	ror	r20
    83ac:	7a 95       	dec	r23
    83ae:	e1 f7       	brne	.-8      	; 0x83a8 <GetPrngNumber+0x36>
    83b0:	84 27       	eor	r24, r20
    83b2:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    83b4:	99 27       	eor	r25, r25
    83b6:	86 95       	lsr	r24
    83b8:	97 95       	ror	r25
    83ba:	88 27       	eor	r24, r24
    83bc:	36 95       	lsr	r19
    83be:	27 95       	ror	r18
    83c0:	82 2b       	or	r24, r18
    83c2:	93 2b       	or	r25, r19
    83c4:	90 93 01 0b 	sts	0x0B01, r25
    83c8:	80 93 00 0b 	sts	0x0B00, r24
	return prng_state;   
}
    83cc:	08 95       	ret

000083ce <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    83ce:	fc 01       	movw	r30, r24
    83d0:	67 87       	std	Z+15, r22	; 0x0f
    83d2:	08 95       	ret

000083d4 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    83d4:	e4 e0       	ldi	r30, 0x04	; 4
    83d6:	fb e0       	ldi	r31, 0x0B	; 11
    83d8:	81 e0       	ldi	r24, 0x01	; 1
    83da:	91 e0       	ldi	r25, 0x01	; 1
    83dc:	95 8b       	std	Z+21, r25	; 0x15
    83de:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    83e0:	63 8b       	std	Z+19, r22	; 0x13
    83e2:	08 95       	ret

000083e4 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    83e4:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    83e6:	90 81       	ld	r25, Z
    83e8:	9f 75       	andi	r25, 0x5F	; 95
    83ea:	90 83       	st	Z, r25
    83ec:	08 95       	ret

000083ee <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    83ee:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    83f0:	90 81       	ld	r25, Z
    83f2:	90 64       	ori	r25, 0x40	; 64
    83f4:	90 83       	st	Z, r25
    83f6:	08 95       	ret

000083f8 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    83f8:	fc 01       	movw	r30, r24
    83fa:	66 87       	std	Z+14, r22	; 0x0e
    83fc:	08 95       	ret

000083fe <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    83fe:	fc 01       	movw	r30, r24
    8400:	62 87       	std	Z+10, r22	; 0x0a
    8402:	08 95       	ret

00008404 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8404:	fc 01       	movw	r30, r24
    8406:	63 87       	std	Z+11, r22	; 0x0b
    8408:	08 95       	ret

0000840a <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    840a:	cf 93       	push	r28
    840c:	df 93       	push	r29
    840e:	ec 01       	movw	r28, r24
    8410:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8412:	29 81       	ldd	r18, Y+1	; 0x01
    8414:	30 e0       	ldi	r19, 0x00	; 0
    8416:	f9 01       	movw	r30, r18
    8418:	ee 0f       	add	r30, r30
    841a:	ff 1f       	adc	r31, r31
    841c:	e8 5f       	subi	r30, 0xF8	; 248
    841e:	f2 47       	sbci	r31, 0x72	; 114
    8420:	65 91       	lpm	r22, Z+
    8422:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8424:	f9 01       	movw	r30, r18
    8426:	e4 0f       	add	r30, r20
    8428:	f1 1d       	adc	r31, r1
    842a:	47 fd       	sbrc	r20, 7
    842c:	fa 95       	dec	r31
    842e:	ee 0f       	add	r30, r30
    8430:	ff 1f       	adc	r31, r31
    8432:	e8 5f       	subi	r30, 0xF8	; 248
    8434:	f2 47       	sbci	r31, 0x72	; 114
    8436:	85 91       	lpm	r24, Z+
    8438:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    843a:	86 1b       	sub	r24, r22
    843c:	97 0b       	sbc	r25, r23
    843e:	68 85       	ldd	r22, Y+8	; 0x08
    8440:	70 e0       	ldi	r23, 0x00	; 0
    8442:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
	if(delta==0)delta++;
    8446:	61 15       	cp	r22, r1
    8448:	71 05       	cpc	r23, r1
    844a:	11 f4       	brne	.+4      	; 0x8450 <PatchCommand11+0x46>
    844c:	61 e0       	ldi	r22, 0x01	; 1
    844e:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8450:	ea 81       	ldd	r30, Y+2	; 0x02
    8452:	86 e0       	ldi	r24, 0x06	; 6
    8454:	e8 9f       	mul	r30, r24
    8456:	f0 01       	movw	r30, r0
    8458:	11 24       	eor	r1, r1
    845a:	ec 5f       	subi	r30, 0xFC	; 252
    845c:	f4 4f       	sbci	r31, 0xF4	; 244
    845e:	81 81       	ldd	r24, Z+1	; 0x01
    8460:	92 81       	ldd	r25, Z+2	; 0x02
    8462:	86 0f       	add	r24, r22
    8464:	97 1f       	adc	r25, r23
    8466:	92 83       	std	Z+2, r25	; 0x02
    8468:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    846a:	7e 83       	std	Y+6, r23	; 0x06
    846c:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    846e:	88 81       	ld	r24, Y
    8470:	88 60       	ori	r24, 0x08	; 8
    8472:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8474:	89 81       	ldd	r24, Y+1	; 0x01
    8476:	48 0f       	add	r20, r24
    8478:	4f 83       	std	Y+7, r20	; 0x07
}
    847a:	df 91       	pop	r29
    847c:	cf 91       	pop	r28
    847e:	08 95       	ret

00008480 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8480:	fc 01       	movw	r30, r24
    8482:	60 87       	std	Z+8, r22	; 0x08
    8484:	08 95       	ret

00008486 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8486:	fc 01       	movw	r30, r24
    8488:	64 83       	std	Z+4, r22	; 0x04
    848a:	08 95       	ret

0000848c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    848c:	fc 01       	movw	r30, r24
    848e:	82 81       	ldd	r24, Z+2	; 0x02
    8490:	0c 94 2a 46 	jmp	0x8c54	; 0x8c54 <SetMixerWave>

00008494 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8494:	fc 01       	movw	r30, r24
	track->note+=param;
    8496:	91 81       	ldd	r25, Z+1	; 0x01
    8498:	69 0f       	add	r22, r25
    849a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    849c:	82 81       	ldd	r24, Z+2	; 0x02
    849e:	0c 94 13 46 	jmp	0x8c26	; 0x8c26 <SetMixerNote>

000084a2 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    84a2:	fc 01       	movw	r30, r24
	track->note-=param;
    84a4:	91 81       	ldd	r25, Z+1	; 0x01
    84a6:	96 1b       	sub	r25, r22
    84a8:	69 2f       	mov	r22, r25
    84aa:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    84ac:	82 81       	ldd	r24, Z+2	; 0x02
    84ae:	0c 94 13 46 	jmp	0x8c26	; 0x8c26 <SetMixerNote>

000084b2 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    84b2:	1f 93       	push	r17
    84b4:	cf 93       	push	r28
    84b6:	df 93       	push	r29
    84b8:	ec 01       	movw	r28, r24
    84ba:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    84bc:	8a 81       	ldd	r24, Y+2	; 0x02
    84be:	0e 94 13 46 	call	0x8c26	; 0x8c26 <SetMixerNote>
	track->note=param;
    84c2:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    84c4:	88 81       	ld	r24, Y
    84c6:	87 7f       	andi	r24, 0xF7	; 247
    84c8:	88 83       	st	Y, r24
}
    84ca:	df 91       	pop	r29
    84cc:	cf 91       	pop	r28
    84ce:	1f 91       	pop	r17
    84d0:	08 95       	ret

000084d2 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    84d2:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    84d4:	14 96       	adiw	r26, 0x04	; 4
    84d6:	8c 91       	ld	r24, X
    84d8:	14 97       	sbiw	r26, 0x04	; 4
    84da:	88 23       	and	r24, r24
    84dc:	19 f1       	breq	.+70     	; 0x8524 <PatchCommand14+0x52>
    84de:	55 96       	adiw	r26, 0x15	; 21
    84e0:	2d 91       	ld	r18, X+
    84e2:	3c 91       	ld	r19, X
    84e4:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    84e6:	66 23       	and	r22, r22
    84e8:	79 f0       	breq	.+30     	; 0x8508 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    84ea:	77 27       	eor	r23, r23
    84ec:	67 fd       	sbrc	r22, 7
    84ee:	70 95       	com	r23
    84f0:	6f 5f       	subi	r22, 0xFF	; 255
    84f2:	7f 4f       	sbci	r23, 0xFF	; 255
    84f4:	ab 01       	movw	r20, r22
    84f6:	44 0f       	add	r20, r20
    84f8:	55 1f       	adc	r21, r21
    84fa:	64 0f       	add	r22, r20
    84fc:	75 1f       	adc	r23, r21
    84fe:	26 1b       	sub	r18, r22
    8500:	37 0b       	sbc	r19, r23
    8502:	09 c0       	rjmp	.+18     	; 0x8516 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8504:	ef 3f       	cpi	r30, 0xFF	; 255
    8506:	39 f0       	breq	.+14     	; 0x8516 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8508:	23 50       	subi	r18, 0x03	; 3
    850a:	31 09       	sbc	r19, r1
    850c:	f9 01       	movw	r30, r18
    850e:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    8510:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8512:	ed 30       	cpi	r30, 0x0D	; 13
    8514:	b9 f7       	brne	.-18     	; 0x8504 <PatchCommand14+0x32>
    8516:	56 96       	adiw	r26, 0x16	; 22
    8518:	3c 93       	st	X, r19
    851a:	2e 93       	st	-X, r18
    851c:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    851e:	81 50       	subi	r24, 0x01	; 1
    8520:	14 96       	adiw	r26, 0x04	; 4
    8522:	8c 93       	st	X, r24
    8524:	08 95       	ret

00008526 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8526:	90 93 af 0b 	sts	0x0BAF, r25
    852a:	80 93 ae 0b 	sts	0x0BAE, r24

	masterVolume=DEFAULT_MASTER_VOL;
    852e:	8f e6       	ldi	r24, 0x6F	; 111
    8530:	80 93 b1 0b 	sts	0x0BB1, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8534:	10 92 02 0b 	sts	0x0B02, r1
    8538:	e9 e4       	ldi	r30, 0x49	; 73
    853a:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    853c:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    853e:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8540:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8542:	28 e1       	ldi	r18, 0x18	; 24
    8544:	df 01       	movw	r26, r30
    8546:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8548:	8c 93       	st	X, r24
    854a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    854c:	9c 93       	st	X, r25
    854e:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8550:	1c 92       	st	X, r1
    8552:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8554:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8556:	10 82       	st	Z, r1
    8558:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    855a:	2c 93       	st	X, r18
    855c:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    855e:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8560:	8f 5f       	subi	r24, 0xFF	; 255
    8562:	77 96       	adiw	r30, 0x17	; 23
    8564:	85 30       	cpi	r24, 0x05	; 5
    8566:	71 f7       	brne	.-36     	; 0x8544 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8568:	08 95       	ret

0000856a <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    856a:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    856c:	ed 91       	ld	r30, X+
    856e:	fc 91       	ld	r31, X
    8570:	11 97       	sbiw	r26, 0x01	; 1
    8572:	9f 01       	movw	r18, r30
    8574:	2f 5f       	subi	r18, 0xFF	; 255
    8576:	3f 4f       	sbci	r19, 0xFF	; 255
    8578:	11 96       	adiw	r26, 0x01	; 1
    857a:	3c 93       	st	X, r19
    857c:	2e 93       	st	-X, r18
    857e:	e4 91       	lpm	r30, Z
    8580:	e7 fd       	sbrc	r30, 7
    8582:	03 c0       	rjmp	.+6      	; 0x858a <ReadVarLen+0x20>
    8584:	8e 2f       	mov	r24, r30
    8586:	90 e0       	ldi	r25, 0x00	; 0
    8588:	08 95       	ret
    {
       value &= 0x7F;
    858a:	ef 77       	andi	r30, 0x7F	; 127
    858c:	8e 2f       	mov	r24, r30
    858e:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8590:	96 95       	lsr	r25
    8592:	98 2f       	mov	r25, r24
    8594:	88 27       	eor	r24, r24
    8596:	97 95       	ror	r25
    8598:	87 95       	ror	r24
    859a:	2f 5f       	subi	r18, 0xFF	; 255
    859c:	3f 4f       	sbci	r19, 0xFF	; 255
    859e:	f9 01       	movw	r30, r18
    85a0:	31 97       	sbiw	r30, 0x01	; 1
    85a2:	e4 91       	lpm	r30, Z
    85a4:	4e 2f       	mov	r20, r30
    85a6:	4f 77       	andi	r20, 0x7F	; 127
    85a8:	84 0f       	add	r24, r20
    85aa:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    85ac:	e7 fd       	sbrc	r30, 7
    85ae:	f0 cf       	rjmp	.-32     	; 0x8590 <ReadVarLen+0x26>
    85b0:	2d 93       	st	X+, r18
    85b2:	3c 93       	st	X, r19
    }


    return value;
}
    85b4:	08 95       	ret

000085b6 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    85b6:	ef 92       	push	r14
    85b8:	ff 92       	push	r15
    85ba:	0f 93       	push	r16
    85bc:	1f 93       	push	r17
    85be:	cf 93       	push	r28
    85c0:	df 93       	push	r29
    85c2:	1f 92       	push	r1
    85c4:	cd b7       	in	r28, 0x3d	; 61
    85c6:	de b7       	in	r29, 0x3e	; 62
    85c8:	7c 01       	movw	r14, r24
    85ca:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    85cc:	fc 01       	movw	r30, r24
    85ce:	80 81       	ld	r24, Z
    85d0:	08 2f       	mov	r16, r24
    85d2:	00 1f       	adc	r16, r16
    85d4:	00 27       	eor	r16, r16
    85d6:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    85d8:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    85da:	9f ef       	ldi	r25, 0xFF	; 255
    85dc:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    85de:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    85e0:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    85e2:	87 7b       	andi	r24, 0xB7	; 183
    85e4:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    85e6:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    85e8:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    85ea:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    85ec:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    85ee:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    85f0:	82 81       	ldd	r24, Z+2	; 0x02
    85f2:	83 30       	cpi	r24, 0x03	; 3
    85f4:	69 f4       	brne	.+26     	; 0x8610 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    85f6:	01 11       	cpse	r16, r1
    85f8:	01 c0       	rjmp	.+2      	; 0x85fc <TriggerCommon+0x46>
    85fa:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    85fc:	81 e0       	ldi	r24, 0x01	; 1
    85fe:	91 e0       	ldi	r25, 0x01	; 1
    8600:	90 93 19 0b 	sts	0x0B19, r25
    8604:	80 93 18 0b 	sts	0x0B18, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8608:	81 e0       	ldi	r24, 0x01	; 1
    860a:	80 93 17 0b 	sts	0x0B17, r24
    860e:	39 c0       	rjmp	.+114    	; 0x8682 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8610:	84 30       	cpi	r24, 0x04	; 4
    8612:	69 f5       	brne	.+90     	; 0x866e <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8614:	10 92 1f 0b 	sts	0x0B1F, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8618:	80 91 ae 0b 	lds	r24, 0x0BAE
    861c:	90 91 af 0b 	lds	r25, 0x0BAF
    8620:	f9 e0       	ldi	r31, 0x09	; 9
    8622:	6f 9f       	mul	r22, r31
    8624:	80 0d       	add	r24, r0
    8626:	91 1d       	adc	r25, r1
    8628:	11 24       	eor	r1, r1
    862a:	fc 01       	movw	r30, r24
    862c:	31 96       	adiw	r30, 0x01	; 1
    862e:	a5 91       	lpm	r26, Z+
    8630:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8632:	b0 93 21 0b 	sts	0x0B21, r27
    8636:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    863a:	ac 01       	movw	r20, r24
    863c:	49 5f       	subi	r20, 0xF9	; 249
    863e:	5f 4f       	sbci	r21, 0xFF	; 255
    8640:	fa 01       	movw	r30, r20
    8642:	65 91       	lpm	r22, Z+
    8644:	74 91       	lpm	r23, Z
    8646:	05 96       	adiw	r24, 0x05	; 5
    8648:	fc 01       	movw	r30, r24
    864a:	85 91       	lpm	r24, Z+
    864c:	94 91       	lpm	r25, Z
    864e:	68 1b       	sub	r22, r24
    8650:	79 0b       	sbc	r23, r25
    8652:	70 93 23 0b 	sts	0x0B23, r23
    8656:	60 93 22 0b 	sts	0x0B22, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    865a:	fa 01       	movw	r30, r20
    865c:	85 91       	lpm	r24, Z+
    865e:	94 91       	lpm	r25, Z
    8660:	a8 0f       	add	r26, r24
    8662:	b9 1f       	adc	r27, r25
    8664:	b0 93 25 0b 	sts	0x0B25, r27
    8668:	a0 93 24 0b 	sts	0x0B24, r26
    866c:	05 c0       	rjmp	.+10     	; 0x8678 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    866e:	60 e0       	ldi	r22, 0x00	; 0
    8670:	29 83       	std	Y+1, r18	; 0x01
    8672:	0e 94 2a 46 	call	0x8c54	; 0x8c54 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8676:	29 81       	ldd	r18, Y+1	; 0x01
    8678:	62 2f       	mov	r22, r18
    867a:	f7 01       	movw	r30, r14
    867c:	82 81       	ldd	r24, Z+2	; 0x02
    867e:	0e 94 13 46 	call	0x8c26	; 0x8c26 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8682:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8684:	00 23       	and	r16, r16
    8686:	11 f0       	breq	.+4      	; 0x868c <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8688:	11 8b       	std	Z+17, r17	; 0x11
    868a:	01 c0       	rjmp	.+2      	; 0x868e <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    868c:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    868e:	e0 91 ae 0b 	lds	r30, 0x0BAE
    8692:	f0 91 af 0b 	lds	r31, 0x0BAF
    8696:	39 e0       	ldi	r19, 0x09	; 9
    8698:	13 9f       	mul	r17, r19
    869a:	e0 0d       	add	r30, r0
    869c:	f1 1d       	adc	r31, r1
    869e:	11 24       	eor	r1, r1
    86a0:	33 96       	adiw	r30, 0x03	; 3
    86a2:	85 91       	lpm	r24, Z+
    86a4:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    86a6:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    86a8:	00 97       	sbiw	r24, 0x00	; 0
    86aa:	19 f4       	brne	.+6      	; 0x86b2 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    86ac:	16 8a       	std	Z+22, r1	; 0x16
    86ae:	15 8a       	std	Z+21, r1	; 0x15
    86b0:	08 c0       	rjmp	.+16     	; 0x86c2 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    86b2:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    86b4:	fc 01       	movw	r30, r24
    86b6:	24 91       	lpm	r18, Z
    86b8:	f7 01       	movw	r30, r14
    86ba:	22 8b       	std	Z+18, r18	; 0x12
    86bc:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    86be:	96 8b       	std	Z+22, r25	; 0x16
    86c0:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    86c2:	0f 90       	pop	r0
    86c4:	df 91       	pop	r29
    86c6:	cf 91       	pop	r28
    86c8:	1f 91       	pop	r17
    86ca:	0f 91       	pop	r16
    86cc:	ff 90       	pop	r15
    86ce:	ef 90       	pop	r14
    86d0:	08 95       	ret

000086d2 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    86d2:	cf 93       	push	r28
    86d4:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    86d6:	e0 91 ae 0b 	lds	r30, 0x0BAE
    86da:	f0 91 af 0b 	lds	r31, 0x0BAF
    86de:	99 e0       	ldi	r25, 0x09	; 9
    86e0:	89 9f       	mul	r24, r25
    86e2:	e0 0d       	add	r30, r0
    86e4:	f1 1d       	adc	r31, r1
    86e6:	11 24       	eor	r1, r1
    86e8:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    86ea:	e1 30       	cpi	r30, 0x01	; 1
    86ec:	e9 f0       	breq	.+58     	; 0x8728 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    86ee:	e2 30       	cpi	r30, 0x02	; 2
    86f0:	e9 f0       	breq	.+58     	; 0x872c <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    86f2:	20 91 50 0b 	lds	r18, 0x0B50
    86f6:	27 ff       	sbrs	r18, 7
    86f8:	1d c0       	rjmp	.+58     	; 0x8734 <TriggerFx+0x62>
    86fa:	20 91 61 0b 	lds	r18, 0x0B61
    86fe:	28 13       	cpse	r18, r24
    8700:	02 c0       	rjmp	.+4      	; 0x8706 <TriggerFx+0x34>
    8702:	41 11       	cpse	r20, r1
    8704:	17 c0       	rjmp	.+46     	; 0x8734 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8706:	20 91 67 0b 	lds	r18, 0x0B67
    870a:	27 ff       	sbrs	r18, 7
    870c:	11 c0       	rjmp	.+34     	; 0x8730 <TriggerFx+0x5e>
    870e:	20 91 78 0b 	lds	r18, 0x0B78
    8712:	28 13       	cpse	r18, r24
    8714:	02 c0       	rjmp	.+4      	; 0x871a <TriggerFx+0x48>
    8716:	41 11       	cpse	r20, r1
    8718:	0b c0       	rjmp	.+22     	; 0x8730 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    871a:	20 91 64 0b 	lds	r18, 0x0B64
    871e:	90 91 7b 0b 	lds	r25, 0x0B7B
    8722:	92 17       	cp	r25, r18
    8724:	28 f4       	brcc	.+10     	; 0x8730 <TriggerFx+0x5e>
    8726:	06 c0       	rjmp	.+12     	; 0x8734 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8728:	c3 e0       	ldi	r28, 0x03	; 3
    872a:	05 c0       	rjmp	.+10     	; 0x8736 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    872c:	c4 e0       	ldi	r28, 0x04	; 4
    872e:	03 c0       	rjmp	.+6      	; 0x8736 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8730:	c2 e0       	ldi	r28, 0x02	; 2
    8732:	01 c0       	rjmp	.+2      	; 0x8736 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8734:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8736:	97 e1       	ldi	r25, 0x17	; 23
    8738:	c9 9f       	mul	r28, r25
    873a:	e0 01       	movw	r28, r0
    873c:	11 24       	eor	r1, r1
    873e:	c7 5c       	subi	r28, 0xC7	; 199
    8740:	d4 4f       	sbci	r29, 0xF4	; 244
    8742:	90 e8       	ldi	r25, 0x80	; 128
    8744:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8746:	1e 8a       	std	Y+22, r1	; 0x16
    8748:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    874a:	20 e5       	ldi	r18, 0x50	; 80
    874c:	46 2f       	mov	r20, r22
    874e:	68 2f       	mov	r22, r24
    8750:	ce 01       	movw	r24, r28
    8752:	0e 94 db 42 	call	0x85b6	; 0x85b6 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8756:	88 81       	ld	r24, Y
    8758:	80 62       	ori	r24, 0x20	; 32
    875a:	88 83       	st	Y, r24
}
    875c:	df 91       	pop	r29
    875e:	cf 91       	pop	r28
    8760:	08 95       	ret

00008762 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8762:	cf 93       	push	r28
    8764:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8766:	a8 2f       	mov	r26, r24
    8768:	b0 e0       	ldi	r27, 0x00	; 0
    876a:	97 e1       	ldi	r25, 0x17	; 23
    876c:	89 9f       	mul	r24, r25
    876e:	f0 01       	movw	r30, r0
    8770:	11 24       	eor	r1, r1
    8772:	e7 5c       	subi	r30, 0xC7	; 199
    8774:	f4 4f       	sbci	r31, 0xF4	; 244
    8776:	80 81       	ld	r24, Z
    8778:	85 ff       	sbrs	r24, 5
    877a:	02 c0       	rjmp	.+4      	; 0x8780 <TriggerNote+0x1e>
    877c:	87 fd       	sbrc	r24, 7
    877e:	2e c0       	rjmp	.+92     	; 0x87dc <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8780:	21 11       	cpse	r18, r1
    8782:	18 c0       	rjmp	.+48     	; 0x87b4 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8784:	97 e1       	ldi	r25, 0x17	; 23
    8786:	9a 9f       	mul	r25, r26
    8788:	f0 01       	movw	r30, r0
    878a:	9b 9f       	mul	r25, r27
    878c:	f0 0d       	add	r31, r0
    878e:	11 24       	eor	r1, r1
    8790:	e7 5c       	subi	r30, 0xC7	; 199
    8792:	f4 4f       	sbci	r31, 0xF4	; 244
    8794:	97 85       	ldd	r25, Z+15	; 0x0f
    8796:	91 11       	cpse	r25, r1
    8798:	02 c0       	rjmp	.+4      	; 0x879e <TriggerNote+0x3c>
    879a:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    879c:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    879e:	97 e1       	ldi	r25, 0x17	; 23
    87a0:	9a 9f       	mul	r25, r26
    87a2:	f0 01       	movw	r30, r0
    87a4:	9b 9f       	mul	r25, r27
    87a6:	f0 0d       	add	r31, r0
    87a8:	11 24       	eor	r1, r1
    87aa:	e7 5c       	subi	r30, 0xC7	; 199
    87ac:	f4 4f       	sbci	r31, 0xF4	; 244
    87ae:	8f 7b       	andi	r24, 0xBF	; 191
    87b0:	80 83       	st	Z, r24
    87b2:	14 c0       	rjmp	.+40     	; 0x87dc <TriggerNote+0x7a>
    87b4:	82 2f       	mov	r24, r18
    87b6:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    87b8:	97 e1       	ldi	r25, 0x17	; 23
    87ba:	9a 9f       	mul	r25, r26
    87bc:	e0 01       	movw	r28, r0
    87be:	9b 9f       	mul	r25, r27
    87c0:	d0 0d       	add	r29, r0
    87c2:	11 24       	eor	r1, r1
    87c4:	c7 5c       	subi	r28, 0xC7	; 199
    87c6:	d4 4f       	sbci	r29, 0xF4	; 244
    87c8:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    87ca:	1e 8a       	std	Y+22, r1	; 0x16
    87cc:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    87ce:	48 2f       	mov	r20, r24
    87d0:	ce 01       	movw	r24, r28
    87d2:	0e 94 db 42 	call	0x85b6	; 0x85b6 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    87d6:	88 81       	ld	r24, Y
    87d8:	80 62       	ori	r24, 0x20	; 32
    87da:	88 83       	st	Y, r24
		}

	}
}
    87dc:	df 91       	pop	r29
    87de:	cf 91       	pop	r28
    87e0:	08 95       	ret

000087e2 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    87e2:	6f 92       	push	r6
    87e4:	7f 92       	push	r7
    87e6:	8f 92       	push	r8
    87e8:	9f 92       	push	r9
    87ea:	af 92       	push	r10
    87ec:	bf 92       	push	r11
    87ee:	cf 92       	push	r12
    87f0:	df 92       	push	r13
    87f2:	ef 92       	push	r14
    87f4:	ff 92       	push	r15
    87f6:	0f 93       	push	r16
    87f8:	1f 93       	push	r17
    87fa:	cf 93       	push	r28
    87fc:	df 93       	push	r29
    87fe:	c9 e3       	ldi	r28, 0x39	; 57
    8800:	db e0       	ldi	r29, 0x0B	; 11
    8802:	04 e0       	ldi	r16, 0x04	; 4
    8804:	1b e0       	ldi	r17, 0x0B	; 11
    8806:	d8 01       	movw	r26, r16
    8808:	9e 01       	movw	r18, r28
    880a:	40 e0       	ldi	r20, 0x00	; 0
    880c:	50 e0       	ldi	r21, 0x00	; 0
    880e:	ca 01       	movw	r24, r20
    8810:	87 5c       	subi	r24, 0xC7	; 199
    8812:	94 4f       	sbci	r25, 0xF4	; 244
    8814:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8816:	fc 01       	movw	r30, r24
    8818:	87 85       	ldd	r24, Z+15	; 0x0f
    881a:	88 23       	and	r24, r24
    881c:	91 f0       	breq	.+36     	; 0x8842 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    881e:	66 85       	ldd	r22, Z+14	; 0x0e
    8820:	99 27       	eor	r25, r25
    8822:	87 fd       	sbrc	r24, 7
    8824:	90 95       	com	r25
    8826:	86 0f       	add	r24, r22
    8828:	91 1d       	adc	r25, r1
    882a:	8f 3f       	cpi	r24, 0xFF	; 255
    882c:	91 05       	cpc	r25, r1
    882e:	19 f0       	breq	.+6      	; 0x8836 <ProcessMusic+0x54>
    8830:	14 f0       	brlt	.+4      	; 0x8836 <ProcessMusic+0x54>
    8832:	8f ef       	ldi	r24, 0xFF	; 255
    8834:	90 e0       	ldi	r25, 0x00	; 0
    8836:	97 ff       	sbrs	r25, 7
    8838:	02 c0       	rjmp	.+4      	; 0x883e <ProcessMusic+0x5c>
    883a:	80 e0       	ldi	r24, 0x00	; 0
    883c:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    883e:	f6 01       	movw	r30, r12
    8840:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8842:	f9 01       	movw	r30, r18
    8844:	f0 80       	ld	r15, Z
    8846:	f3 fe       	sbrs	r15, 3
    8848:	2a c0       	rjmp	.+84     	; 0x889e <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    884a:	65 81       	ldd	r22, Z+5	; 0x05
    884c:	76 81       	ldd	r23, Z+6	; 0x06
    884e:	11 96       	adiw	r26, 0x01	; 1
    8850:	8d 91       	ld	r24, X+
    8852:	9c 91       	ld	r25, X
    8854:	12 97       	sbiw	r26, 0x02	; 2
    8856:	86 0f       	add	r24, r22
    8858:	97 1f       	adc	r25, r23
    885a:	12 96       	adiw	r26, 0x02	; 2
    885c:	9c 93       	st	X, r25
    885e:	8e 93       	st	-X, r24
    8860:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8862:	f6 01       	movw	r30, r12
    8864:	e7 80       	ldd	r14, Z+7	; 0x07
    8866:	ee 2d       	mov	r30, r14
    8868:	f0 e0       	ldi	r31, 0x00	; 0
    886a:	ee 0f       	add	r30, r30
    886c:	ff 1f       	adc	r31, r31
    886e:	e8 5f       	subi	r30, 0xF8	; 248
    8870:	f2 47       	sbci	r31, 0x72	; 114
    8872:	c5 90       	lpm	r12, Z+
    8874:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8876:	16 16       	cp	r1, r22
    8878:	17 06       	cpc	r1, r23
    887a:	24 f4       	brge	.+8      	; 0x8884 <ProcessMusic+0xa2>
    887c:	8c 15       	cp	r24, r12
    887e:	9d 05       	cpc	r25, r13
    8880:	30 f4       	brcc	.+12     	; 0x888e <ProcessMusic+0xac>
    8882:	0d c0       	rjmp	.+26     	; 0x889e <ProcessMusic+0xbc>
    8884:	67 2b       	or	r22, r23
    8886:	59 f0       	breq	.+22     	; 0x889e <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8888:	c8 16       	cp	r12, r24
    888a:	d9 06       	cpc	r13, r25
    888c:	40 f0       	brcs	.+16     	; 0x889e <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    888e:	12 96       	adiw	r26, 0x02	; 2
    8890:	dc 92       	st	X, r13
    8892:	ce 92       	st	-X, r12
    8894:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8896:	8f 2d       	mov	r24, r15
    8898:	87 7f       	andi	r24, 0xF7	; 247
    889a:	f9 01       	movw	r30, r18
    889c:	80 83       	st	Z, r24
    889e:	49 5e       	subi	r20, 0xE9	; 233
    88a0:	5f 4f       	sbci	r21, 0xFF	; 255
    88a2:	29 5e       	subi	r18, 0xE9	; 233
    88a4:	3f 4f       	sbci	r19, 0xFF	; 255
    88a6:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    88a8:	43 37       	cpi	r20, 0x73	; 115
    88aa:	51 05       	cpc	r21, r1
    88ac:	09 f0       	breq	.+2      	; 0x88b0 <ProcessMusic+0xce>
    88ae:	af cf       	rjmp	.-162    	; 0x880e <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    88b0:	80 91 02 0b 	lds	r24, 0x0B02
    88b4:	88 23       	and	r24, r24
    88b6:	09 f4       	brne	.+2      	; 0x88ba <ProcessMusic+0xd8>
    88b8:	cc c0       	rjmp	.+408    	; 0x8a52 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    88ba:	57 e1       	ldi	r21, 0x17	; 23
    88bc:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    88be:	80 91 ac 0b 	lds	r24, 0x0BAC
    88c2:	90 91 ad 0b 	lds	r25, 0x0BAD
    88c6:	20 91 b2 0b 	lds	r18, 0x0BB2
    88ca:	30 91 b3 0b 	lds	r19, 0x0BB3
    88ce:	82 17       	cp	r24, r18
    88d0:	93 07       	cpc	r25, r19
    88d2:	09 f0       	breq	.+2      	; 0x88d6 <ProcessMusic+0xf4>
    88d4:	b9 c0       	rjmp	.+370    	; 0x8a48 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    88d6:	20 91 b5 0b 	lds	r18, 0x0BB5
    88da:	30 91 b6 0b 	lds	r19, 0x0BB6
    88de:	b9 01       	movw	r22, r18
    88e0:	6f 5f       	subi	r22, 0xFF	; 255
    88e2:	7f 4f       	sbci	r23, 0xFF	; 255
    88e4:	70 93 b6 0b 	sts	0x0BB6, r23
    88e8:	60 93 b5 0b 	sts	0x0BB5, r22
    88ec:	f9 01       	movw	r30, r18
    88ee:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    88f0:	4f 3f       	cpi	r20, 0xFF	; 255
    88f2:	79 f5       	brne	.+94     	; 0x8952 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    88f4:	a9 01       	movw	r20, r18
    88f6:	4e 5f       	subi	r20, 0xFE	; 254
    88f8:	5f 4f       	sbci	r21, 0xFF	; 255
    88fa:	50 93 b6 0b 	sts	0x0BB6, r21
    88fe:	40 93 b5 0b 	sts	0x0BB5, r20
    8902:	fb 01       	movw	r30, r22
    8904:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8906:	6f 32       	cpi	r22, 0x2F	; 47
    8908:	19 f4       	brne	.+6      	; 0x8910 <ProcessMusic+0x12e>
						playSong=false;
    890a:	10 92 02 0b 	sts	0x0B02, r1
						break;	
    890e:	9c c0       	rjmp	.+312    	; 0x8a48 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8910:	66 30       	cpi	r22, 0x06	; 6
    8912:	09 f0       	breq	.+2      	; 0x8916 <ProcessMusic+0x134>
    8914:	8c c0       	rjmp	.+280    	; 0x8a2e <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8916:	fa 01       	movw	r30, r20
    8918:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    891a:	c9 01       	movw	r24, r18
    891c:	04 96       	adiw	r24, 0x04	; 4
    891e:	90 93 b6 0b 	sts	0x0BB6, r25
    8922:	80 93 b5 0b 	sts	0x0BB5, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8926:	f9 01       	movw	r30, r18
    8928:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    892a:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    892c:	e3 35       	cpi	r30, 0x53	; 83
    892e:	29 f4       	brne	.+10     	; 0x893a <ProcessMusic+0x158>
							loopStart=songPos;
    8930:	90 93 b8 0b 	sts	0x0BB8, r25
    8934:	80 93 b7 0b 	sts	0x0BB7, r24
    8938:	7a c0       	rjmp	.+244    	; 0x8a2e <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    893a:	e5 34       	cpi	r30, 0x45	; 69
    893c:	09 f0       	breq	.+2      	; 0x8940 <ProcessMusic+0x15e>
    893e:	77 c0       	rjmp	.+238    	; 0x8a2e <ProcessMusic+0x24c>
							songPos=loopStart;
    8940:	80 91 b7 0b 	lds	r24, 0x0BB7
    8944:	90 91 b8 0b 	lds	r25, 0x0BB8
    8948:	90 93 b6 0b 	sts	0x0BB6, r25
    894c:	80 93 b5 0b 	sts	0x0BB5, r24
    8950:	6e c0       	rjmp	.+220    	; 0x8a2e <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8952:	47 fd       	sbrc	r20, 7
    8954:	40 93 b0 0b 	sts	0x0BB0, r20
					channel=lastStatus&0x0f;
    8958:	90 91 b0 0b 	lds	r25, 0x0BB0
    895c:	89 2f       	mov	r24, r25
    895e:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8960:	47 ff       	sbrs	r20, 7
    8962:	08 c0       	rjmp	.+16     	; 0x8974 <ProcessMusic+0x192>
    8964:	2e 5f       	subi	r18, 0xFE	; 254
    8966:	3f 4f       	sbci	r19, 0xFF	; 255
    8968:	30 93 b6 0b 	sts	0x0BB6, r19
    896c:	20 93 b5 0b 	sts	0x0BB5, r18
    8970:	fb 01       	movw	r30, r22
    8972:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8974:	90 7f       	andi	r25, 0xF0	; 240
    8976:	90 3b       	cpi	r25, 0xB0	; 176
    8978:	e1 f0       	breq	.+56     	; 0x89b2 <ProcessMusic+0x1d0>
    897a:	90 3c       	cpi	r25, 0xC0	; 192
    897c:	09 f4       	brne	.+2      	; 0x8980 <ProcessMusic+0x19e>
    897e:	51 c0       	rjmp	.+162    	; 0x8a22 <ProcessMusic+0x240>
    8980:	90 39       	cpi	r25, 0x90	; 144
    8982:	09 f0       	breq	.+2      	; 0x8986 <ProcessMusic+0x1a4>
    8984:	54 c0       	rjmp	.+168    	; 0x8a2e <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8986:	e0 91 b5 0b 	lds	r30, 0x0BB5
    898a:	f0 91 b6 0b 	lds	r31, 0x0BB6
    898e:	9f 01       	movw	r18, r30
    8990:	2f 5f       	subi	r18, 0xFF	; 255
    8992:	3f 4f       	sbci	r19, 0xFF	; 255
    8994:	30 93 b6 0b 	sts	0x0BB6, r19
    8998:	20 93 b5 0b 	sts	0x0BB5, r18
    899c:	24 91       	lpm	r18, Z
    899e:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    89a0:	f8 9e       	mul	r15, r24
    89a2:	f0 01       	movw	r30, r0
    89a4:	11 24       	eor	r1, r1
    89a6:	e7 5c       	subi	r30, 0xC7	; 199
    89a8:	f4 4f       	sbci	r31, 0xF4	; 244
    89aa:	60 89       	ldd	r22, Z+16	; 0x10
    89ac:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
    89b0:	3e c0       	rjmp	.+124    	; 0x8a2e <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    89b2:	e0 91 b5 0b 	lds	r30, 0x0BB5
    89b6:	f0 91 b6 0b 	lds	r31, 0x0BB6
    89ba:	9f 01       	movw	r18, r30
    89bc:	2f 5f       	subi	r18, 0xFF	; 255
    89be:	3f 4f       	sbci	r19, 0xFF	; 255
    89c0:	30 93 b6 0b 	sts	0x0BB6, r19
    89c4:	20 93 b5 0b 	sts	0x0BB5, r18
    89c8:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    89ca:	47 30       	cpi	r20, 0x07	; 7
    89cc:	49 f4       	brne	.+18     	; 0x89e0 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    89ce:	f8 9e       	mul	r15, r24
    89d0:	d0 01       	movw	r26, r0
    89d2:	11 24       	eor	r1, r1
    89d4:	a7 5c       	subi	r26, 0xC7	; 199
    89d6:	b4 4f       	sbci	r27, 0xF4	; 244
    89d8:	ee 0f       	add	r30, r30
    89da:	1c 96       	adiw	r26, 0x0c	; 12
    89dc:	ec 93       	st	X, r30
    89de:	27 c0       	rjmp	.+78     	; 0x8a2e <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    89e0:	4b 30       	cpi	r20, 0x0B	; 11
    89e2:	49 f4       	brne	.+18     	; 0x89f6 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    89e4:	f8 9e       	mul	r15, r24
    89e6:	d0 01       	movw	r26, r0
    89e8:	11 24       	eor	r1, r1
    89ea:	a7 5c       	subi	r26, 0xC7	; 199
    89ec:	b4 4f       	sbci	r27, 0xF4	; 244
    89ee:	ee 0f       	add	r30, r30
    89f0:	13 96       	adiw	r26, 0x03	; 3
    89f2:	ec 93       	st	X, r30
    89f4:	1c c0       	rjmp	.+56     	; 0x8a2e <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    89f6:	4c 35       	cpi	r20, 0x5C	; 92
    89f8:	49 f4       	brne	.+18     	; 0x8a0c <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    89fa:	f8 9e       	mul	r15, r24
    89fc:	d0 01       	movw	r26, r0
    89fe:	11 24       	eor	r1, r1
    8a00:	a7 5c       	subi	r26, 0xC7	; 199
    8a02:	b4 4f       	sbci	r27, 0xF4	; 244
    8a04:	ee 0f       	add	r30, r30
    8a06:	1a 96       	adiw	r26, 0x0a	; 10
    8a08:	ec 93       	st	X, r30
    8a0a:	11 c0       	rjmp	.+34     	; 0x8a2e <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8a0c:	44 36       	cpi	r20, 0x64	; 100
    8a0e:	79 f4       	brne	.+30     	; 0x8a2e <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8a10:	f8 9e       	mul	r15, r24
    8a12:	d0 01       	movw	r26, r0
    8a14:	11 24       	eor	r1, r1
    8a16:	a7 5c       	subi	r26, 0xC7	; 199
    8a18:	b4 4f       	sbci	r27, 0xF4	; 244
    8a1a:	ee 0f       	add	r30, r30
    8a1c:	1b 96       	adiw	r26, 0x0b	; 11
    8a1e:	ec 93       	st	X, r30
    8a20:	06 c0       	rjmp	.+12     	; 0x8a2e <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8a22:	f8 9e       	mul	r15, r24
    8a24:	f0 01       	movw	r30, r0
    8a26:	11 24       	eor	r1, r1
    8a28:	e7 5c       	subi	r30, 0xC7	; 199
    8a2a:	f4 4f       	sbci	r31, 0xF4	; 244
    8a2c:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8a2e:	85 eb       	ldi	r24, 0xB5	; 181
    8a30:	9b e0       	ldi	r25, 0x0B	; 11
    8a32:	0e 94 b5 42 	call	0x856a	; 0x856a <ReadVarLen>
    8a36:	90 93 b3 0b 	sts	0x0BB3, r25
    8a3a:	80 93 b2 0b 	sts	0x0BB2, r24
				currDeltaTime=0;
    8a3e:	10 92 ad 0b 	sts	0x0BAD, r1
    8a42:	10 92 ac 0b 	sts	0x0BAC, r1
    8a46:	3b cf       	rjmp	.-394    	; 0x88be <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8a48:	01 96       	adiw	r24, 0x01	; 1
    8a4a:	90 93 ad 0b 	sts	0x0BAD, r25
    8a4e:	80 93 ac 0b 	sts	0x0BAC, r24
    8a52:	92 e4       	ldi	r25, 0x42	; 66
    8a54:	a9 2e       	mov	r10, r25
    8a56:	9b e0       	ldi	r25, 0x0B	; 11
    8a58:	b9 2e       	mov	r11, r25
    8a5a:	2c e4       	ldi	r18, 0x4C	; 76
    8a5c:	c2 2e       	mov	r12, r18
    8a5e:	2b e0       	ldi	r18, 0x0B	; 11
    8a60:	d2 2e       	mov	r13, r18
    8a62:	3d e4       	ldi	r19, 0x4D	; 77
    8a64:	e3 2e       	mov	r14, r19
    8a66:	3b e0       	ldi	r19, 0x0B	; 11
    8a68:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8a6a:	66 24       	eor	r6, r6
    8a6c:	6a 94       	dec	r6
    8a6e:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8a70:	88 81       	ld	r24, Y
    8a72:	85 ff       	sbrs	r24, 5
    8a74:	42 c0       	rjmp	.+132    	; 0x8afa <ProcessMusic+0x318>
    8a76:	2d 89       	ldd	r18, Y+21	; 0x15
    8a78:	3e 89       	ldd	r19, Y+22	; 0x16
    8a7a:	23 2b       	or	r18, r19
    8a7c:	09 f4       	brne	.+2      	; 0x8a80 <ProcessMusic+0x29e>
    8a7e:	3d c0       	rjmp	.+122    	; 0x8afa <ProcessMusic+0x318>
    8a80:	86 fd       	sbrc	r24, 6
    8a82:	3b c0       	rjmp	.+118    	; 0x8afa <ProcessMusic+0x318>
    8a84:	47 01       	movw	r8, r14
    8a86:	f2 e0       	ldi	r31, 0x02	; 2
    8a88:	8f 1a       	sub	r8, r31
    8a8a:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8a8c:	d6 01       	movw	r26, r12
    8a8e:	9c 91       	ld	r25, X
    8a90:	f4 01       	movw	r30, r8
    8a92:	80 81       	ld	r24, Z
    8a94:	98 13       	cpse	r25, r24
    8a96:	2e c0       	rjmp	.+92     	; 0x8af4 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8a98:	ed 89       	ldd	r30, Y+21	; 0x15
    8a9a:	fe 89       	ldd	r31, Y+22	; 0x16
    8a9c:	bf 01       	movw	r22, r30
    8a9e:	6f 5f       	subi	r22, 0xFF	; 255
    8aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    8aa2:	7e 8b       	std	Y+22, r23	; 0x16
    8aa4:	6d 8b       	std	Y+21, r22	; 0x15
    8aa6:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    8aaa:	31 f4       	brne	.+12     	; 0x8ab8 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8aac:	88 81       	ld	r24, Y
    8aae:	8f 77       	andi	r24, 0x7F	; 127
    8ab0:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8ab2:	1e 8a       	std	Y+22, r1	; 0x16
    8ab4:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8ab6:	1e c0       	rjmp	.+60     	; 0x8af4 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8ab8:	9f 01       	movw	r18, r30
    8aba:	2e 5f       	subi	r18, 0xFE	; 254
    8abc:	3f 4f       	sbci	r19, 0xFF	; 255
    8abe:	3e 8b       	std	Y+22, r19	; 0x16
    8ac0:	2d 8b       	std	Y+21, r18	; 0x15
    8ac2:	fb 01       	movw	r30, r22
    8ac4:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8ac6:	e8 2f       	mov	r30, r24
    8ac8:	f0 e0       	ldi	r31, 0x00	; 0
    8aca:	ee 0f       	add	r30, r30
    8acc:	ff 1f       	adc	r31, r31
    8ace:	e2 54       	subi	r30, 0x42	; 66
    8ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    8ad2:	25 91       	lpm	r18, Z+
    8ad4:	34 91       	lpm	r19, Z
    8ad6:	ce 01       	movw	r24, r28
    8ad8:	f9 01       	movw	r30, r18
    8ada:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8adc:	ed 89       	ldd	r30, Y+21	; 0x15
    8ade:	fe 89       	ldd	r31, Y+22	; 0x16
    8ae0:	cf 01       	movw	r24, r30
    8ae2:	01 96       	adiw	r24, 0x01	; 1
    8ae4:	9e 8b       	std	Y+22, r25	; 0x16
    8ae6:	8d 8b       	std	Y+21, r24	; 0x15
    8ae8:	e4 91       	lpm	r30, Z
    8aea:	d4 01       	movw	r26, r8
    8aec:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8aee:	f6 01       	movw	r30, r12
    8af0:	10 82       	st	Z, r1
    8af2:	cc cf       	rjmp	.-104    	; 0x8a8c <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8af4:	9f 5f       	subi	r25, 0xFF	; 255
    8af6:	d6 01       	movw	r26, r12
    8af8:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8afa:	98 81       	ld	r25, Y
    8afc:	95 ff       	sbrs	r25, 5
    8afe:	6c c0       	rjmp	.+216    	; 0x8bd8 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8b00:	f7 01       	movw	r30, r14
    8b02:	80 81       	ld	r24, Z
    8b04:	8f 3f       	cpi	r24, 0xFF	; 255
    8b06:	11 f0       	breq	.+4      	; 0x8b0c <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8b08:	8f 5f       	subi	r24, 0xFF	; 255
    8b0a:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8b0c:	97 fd       	sbrc	r25, 7
    8b0e:	04 c0       	rjmp	.+8      	; 0x8b18 <ProcessMusic+0x336>
    8b10:	f7 01       	movw	r30, r14
    8b12:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8b14:	90 81       	ld	r25, Z
    8b16:	01 c0       	rjmp	.+2      	; 0x8b1a <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8b18:	9f ef       	ldi	r25, 0xFF	; 255
    8b1a:	f7 01       	movw	r30, r14
    8b1c:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8b1e:	80 81       	ld	r24, Z
    8b20:	88 23       	and	r24, r24
    8b22:	09 f4       	brne	.+2      	; 0x8b26 <ProcessMusic+0x344>
    8b24:	4e c0       	rjmp	.+156    	; 0x8bc2 <ProcessMusic+0x3e0>
    8b26:	31 96       	adiw	r30, 0x01	; 1
    8b28:	50 81       	ld	r21, Z
    8b2a:	55 23       	and	r21, r21
    8b2c:	09 f4       	brne	.+2      	; 0x8b30 <ProcessMusic+0x34e>
    8b2e:	49 c0       	rjmp	.+146    	; 0x8bc2 <ProcessMusic+0x3e0>
    8b30:	99 23       	and	r25, r25
    8b32:	09 f4       	brne	.+2      	; 0x8b36 <ProcessMusic+0x354>
    8b34:	46 c0       	rjmp	.+140    	; 0x8bc2 <ProcessMusic+0x3e0>
    8b36:	40 91 b1 0b 	lds	r20, 0x0BB1
    8b3a:	44 23       	and	r20, r20
    8b3c:	09 f4       	brne	.+2      	; 0x8b40 <ProcessMusic+0x35e>
    8b3e:	41 c0       	rjmp	.+130    	; 0x8bc2 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8b40:	89 9f       	mul	r24, r25
    8b42:	c0 01       	movw	r24, r0
    8b44:	11 24       	eor	r1, r1
    8b46:	93 95       	inc	r25
				uVol>>=8;
    8b48:	89 2f       	mov	r24, r25
    8b4a:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8b4c:	58 9f       	mul	r21, r24
    8b4e:	90 01       	movw	r18, r0
    8b50:	59 9f       	mul	r21, r25
    8b52:	30 0d       	add	r19, r0
    8b54:	11 24       	eor	r1, r1
    8b56:	c9 01       	movw	r24, r18
    8b58:	93 95       	inc	r25
				uVol>>=8;
    8b5a:	89 2f       	mov	r24, r25
    8b5c:	99 27       	eor	r25, r25
    8b5e:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8b60:	50 81       	ld	r21, Z
    8b62:	58 9f       	mul	r21, r24
    8b64:	90 01       	movw	r18, r0
    8b66:	59 9f       	mul	r21, r25
    8b68:	30 0d       	add	r19, r0
    8b6a:	11 24       	eor	r1, r1
    8b6c:	33 95       	inc	r19
					uVol>>=8;
    8b6e:	23 2f       	mov	r18, r19
    8b70:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8b72:	42 9f       	mul	r20, r18
    8b74:	c0 01       	movw	r24, r0
    8b76:	43 9f       	mul	r20, r19
    8b78:	90 0d       	add	r25, r0
    8b7a:	11 24       	eor	r1, r1
    8b7c:	93 95       	inc	r25
				uVol>>=8;
    8b7e:	89 2f       	mov	r24, r25
    8b80:	99 27       	eor	r25, r25
    8b82:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8b84:	20 81       	ld	r18, Z
    8b86:	22 23       	and	r18, r18
    8b88:	f1 f0       	breq	.+60     	; 0x8bc6 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8b8a:	d5 01       	movw	r26, r10
    8b8c:	ec 91       	ld	r30, X
    8b8e:	f0 e0       	ldi	r31, 0x00	; 0
    8b90:	e0 50       	subi	r30, 0x00	; 0
    8b92:	f1 47       	sbci	r31, 0x71	; 113
    8b94:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8b96:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8b98:	2e 9f       	mul	r18, r30
    8b9a:	f0 01       	movw	r30, r0
    8b9c:	11 24       	eor	r1, r1
    8b9e:	f3 95       	inc	r31
					tVol>>=8;
    8ba0:	ef 2f       	mov	r30, r31
    8ba2:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8ba4:	a3 01       	movw	r20, r6
    8ba6:	4e 1b       	sub	r20, r30
    8ba8:	5f 0b       	sbc	r21, r31
    8baa:	48 9f       	mul	r20, r24
    8bac:	90 01       	movw	r18, r0
    8bae:	49 9f       	mul	r20, r25
    8bb0:	30 0d       	add	r19, r0
    8bb2:	58 9f       	mul	r21, r24
    8bb4:	30 0d       	add	r19, r0
    8bb6:	11 24       	eor	r1, r1
    8bb8:	c9 01       	movw	r24, r18
    8bba:	93 95       	inc	r25
					uVol>>=8;
    8bbc:	89 2f       	mov	r24, r25
    8bbe:	99 27       	eor	r25, r25
    8bc0:	02 c0       	rjmp	.+4      	; 0x8bc6 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8bc2:	80 e0       	ldi	r24, 0x00	; 0
    8bc4:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8bc6:	f5 01       	movw	r30, r10
    8bc8:	30 81       	ld	r19, Z
    8bca:	f7 01       	movw	r30, r14
    8bcc:	39 97       	sbiw	r30, 0x09	; 9
    8bce:	20 81       	ld	r18, Z
    8bd0:	23 0f       	add	r18, r19
    8bd2:	d5 01       	movw	r26, r10
    8bd4:	2c 93       	st	X, r18
    8bd6:	02 c0       	rjmp	.+4      	; 0x8bdc <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8bd8:	80 e0       	ldi	r24, 0x00	; 0
    8bda:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8bdc:	f8 01       	movw	r30, r16
    8bde:	80 83       	st	Z, r24
    8be0:	67 96       	adiw	r28, 0x17	; 23
    8be2:	0a 5f       	subi	r16, 0xFA	; 250
    8be4:	1f 4f       	sbci	r17, 0xFF	; 255
    8be6:	f7 e1       	ldi	r31, 0x17	; 23
    8be8:	af 0e       	add	r10, r31
    8bea:	b1 1c       	adc	r11, r1
    8bec:	87 e1       	ldi	r24, 0x17	; 23
    8bee:	c8 0e       	add	r12, r24
    8bf0:	d1 1c       	adc	r13, r1
    8bf2:	97 e1       	ldi	r25, 0x17	; 23
    8bf4:	e9 0e       	add	r14, r25
    8bf6:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8bf8:	ab e0       	ldi	r26, 0x0B	; 11
    8bfa:	cc 3a       	cpi	r28, 0xAC	; 172
    8bfc:	da 07       	cpc	r29, r26
    8bfe:	09 f0       	breq	.+2      	; 0x8c02 <ProcessMusic+0x420>
    8c00:	37 cf       	rjmp	.-402    	; 0x8a70 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8c02:	df 91       	pop	r29
    8c04:	cf 91       	pop	r28
    8c06:	1f 91       	pop	r17
    8c08:	0f 91       	pop	r16
    8c0a:	ff 90       	pop	r15
    8c0c:	ef 90       	pop	r14
    8c0e:	df 90       	pop	r13
    8c10:	cf 90       	pop	r12
    8c12:	bf 90       	pop	r11
    8c14:	af 90       	pop	r10
    8c16:	9f 90       	pop	r9
    8c18:	8f 90       	pop	r8
    8c1a:	7f 90       	pop	r7
    8c1c:	6f 90       	pop	r6
    8c1e:	08 95       	ret

00008c20 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8c20:	80 93 b1 0b 	sts	0x0BB1, r24
    8c24:	08 95       	ret

00008c26 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8c26:	99 27       	eor	r25, r25
	clr r23
    8c28:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8c2a:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8c2c:	09 f4       	brne	.+2      	; 0x8c30 <set_note_waves>
		ret
    8c2e:	08 95       	ret

00008c30 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8c30:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8c32:	fd e8       	ldi	r31, 0x8D	; 141
	lsl r22
    8c34:	66 0f       	add	r22, r22
	rol r23
    8c36:	77 1f       	adc	r23, r23
	add ZL,r22
    8c38:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8c3a:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8c3c:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8c3e:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8c40:	e4 e0       	ldi	r30, 0x04	; 4
	ldi ZH,hi8(mixerStruct)
    8c42:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    8c44:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8c46:	28 9f       	mul	r18, r24
	add ZL,r0
    8c48:	e0 0d       	add	r30, r0
	adc ZH,r1
    8c4a:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8c4c:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8c4e:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8c50:	11 24       	eor	r1, r1
	

	ret
    8c52:	08 95       	ret

00008c54 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8c54:	99 27       	eor	r25, r25
	clr r23
    8c56:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8c58:	e4 e0       	ldi	r30, 0x04	; 4
	ldi ZH,hi8(mixerStruct)
    8c5a:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    8c5c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8c5e:	28 9f       	mul	r18, r24
	add ZL,r0
    8c60:	e0 0d       	add	r30, r0
	adc ZH,r1
    8c62:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8c64:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8c66:	31 f4       	brne	.+12     	; 0x8c74 <smw1>
	lds r22,tr4_params
    8c68:	60 91 17 0b 	lds	r22, 0x0B17
	andi r22,0xfe;
    8c6c:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8c6e:	60 93 17 0b 	sts	0x0B17, r22
	rjmp esmw	
    8c72:	0b c0       	rjmp	.+22     	; 0x8c8a <esmw>

00008c74 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8c74:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8c76:	31 f4       	brne	.+12     	; 0x8c84 <smw2>
	lds r22,tr4_params
    8c78:	60 91 17 0b 	lds	r22, 0x0B17
	ori r22,0xfe;
    8c7c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8c7e:	60 93 17 0b 	sts	0x0B17, r22
	rjmp esmw
    8c82:	03 c0       	rjmp	.+6      	; 0x8c8a <esmw>

00008c84 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8c84:	7f e8       	ldi	r23, 0x8F	; 143
	add r23,r22
    8c86:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8c88:	75 83       	std	Z+5, r23	; 0x05

00008c8a <esmw>:

esmw:
	clr r1	
    8c8a:	11 24       	eor	r1, r1
	ret
    8c8c:	08 95       	ret
	...

00008d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8d02:	80 93 03 0b 	sts	0x0B03, r24
	ret
    8d06:	08 95       	ret

00008d08 <steptable>:
    8d08:	22 00       	.word	0x0022	; ????
    8d0a:	24 00       	.word	0x0024	; ????
    8d0c:	26 00       	.word	0x0026	; ????
    8d0e:	28 00       	.word	0x0028	; ????
    8d10:	2b 00       	.word	0x002b	; ????
    8d12:	2d 00       	.word	0x002d	; ????
    8d14:	30 00       	.word	0x0030	; ????
    8d16:	33 00       	.word	0x0033	; ????
    8d18:	36 00       	.word	0x0036	; ????
    8d1a:	39 00       	.word	0x0039	; ????
    8d1c:	3d 00       	.word	0x003d	; ????
    8d1e:	40 00       	.word	0x0040	; ????
    8d20:	44 00       	.word	0x0044	; ????
    8d22:	48 00       	.word	0x0048	; ????
    8d24:	4c 00       	.word	0x004c	; ????
    8d26:	51 00       	.word	0x0051	; ????
    8d28:	56 00       	.word	0x0056	; ????
    8d2a:	5b 00       	.word	0x005b	; ????
    8d2c:	60 00       	.word	0x0060	; ????
    8d2e:	66 00       	.word	0x0066	; ????
    8d30:	6c 00       	.word	0x006c	; ????
    8d32:	73 00       	.word	0x0073	; ????
    8d34:	79 00       	.word	0x0079	; ????
    8d36:	81 00       	.word	0x0081	; ????
    8d38:	88 00       	.word	0x0088	; ????
    8d3a:	90 00       	.word	0x0090	; ????
    8d3c:	99 00       	.word	0x0099	; ????
    8d3e:	a2 00       	.word	0x00a2	; ????
    8d40:	ac 00       	.word	0x00ac	; ????
    8d42:	b6 00       	.word	0x00b6	; ????
    8d44:	c1 00       	.word	0x00c1	; ????
    8d46:	cc 00       	.word	0x00cc	; ????
    8d48:	d8 00       	.word	0x00d8	; ????
    8d4a:	e5 00       	.word	0x00e5	; ????
    8d4c:	f3 00       	.word	0x00f3	; ????
    8d4e:	01 01       	movw	r0, r2
    8d50:	10 01       	movw	r2, r0
    8d52:	21 01       	movw	r4, r2
    8d54:	32 01       	movw	r6, r4
    8d56:	44 01       	movw	r8, r8
    8d58:	57 01       	movw	r10, r14
    8d5a:	6c 01       	movw	r12, r24
    8d5c:	81 01       	movw	r16, r2
    8d5e:	98 01       	movw	r18, r16
    8d60:	b0 01       	movw	r22, r0
    8d62:	ca 01       	movw	r24, r20
    8d64:	e5 01       	movw	r28, r10
    8d66:	02 02       	muls	r16, r18
    8d68:	21 02       	muls	r18, r17
    8d6a:	41 02       	muls	r20, r17
    8d6c:	64 02       	muls	r22, r20
    8d6e:	88 02       	muls	r24, r24
    8d70:	ae 02       	muls	r26, r30
    8d72:	d7 02       	muls	r29, r23
    8d74:	03 03       	mulsu	r16, r19
    8d76:	30 03       	mulsu	r19, r16
    8d78:	61 03       	mulsu	r22, r17
    8d7a:	94 03       	fmuls	r17, r20
    8d7c:	cb 03       	fmulsu	r20, r19
    8d7e:	05 04       	cpc	r0, r5
    8d80:	42 04       	cpc	r4, r2
    8d82:	83 04       	cpc	r8, r3
    8d84:	c7 04       	cpc	r12, r7
    8d86:	10 05       	cpc	r17, r0
    8d88:	5d 05       	cpc	r21, r13
    8d8a:	af 05       	cpc	r26, r15
    8d8c:	05 06       	cpc	r0, r21
    8d8e:	61 06       	cpc	r6, r17
    8d90:	c2 06       	cpc	r12, r18
    8d92:	29 07       	cpc	r18, r25
    8d94:	96 07       	cpc	r25, r22
    8d96:	09 08       	sbc	r0, r9
    8d98:	83 08       	sbc	r8, r3
    8d9a:	05 09       	sbc	r16, r5
    8d9c:	8e 09       	sbc	r24, r14
    8d9e:	20 0a       	sbc	r2, r16
    8da0:	ba 0a       	sbc	r11, r26
    8da2:	5d 0b       	sbc	r21, r29
    8da4:	0a 0c       	add	r0, r10
    8da6:	c1 0c       	add	r12, r1
    8da8:	84 0d       	add	r24, r4
    8daa:	51 0e       	add	r5, r17
    8dac:	2b 0f       	add	r18, r27
    8dae:	12 10       	cpse	r1, r2
    8db0:	07 11       	cpse	r16, r7
    8db2:	0a 12       	cpse	r0, r26
    8db4:	1d 13       	cpse	r17, r29
    8db6:	40 14       	cp	r4, r0
    8db8:	74 15       	cp	r23, r4
    8dba:	ba 16       	cp	r11, r26
    8dbc:	14 18       	sub	r1, r4
    8dbe:	83 19       	sub	r24, r3
    8dc0:	07 1b       	sub	r16, r23
    8dc2:	a3 1c       	adc	r10, r3
    8dc4:	57 1e       	adc	r5, r23
    8dc6:	24 20       	and	r2, r4
    8dc8:	0e 22       	and	r0, r30
    8dca:	14 24       	eor	r1, r4
    8dcc:	39 26       	eor	r3, r25
    8dce:	7f 28       	or	r7, r15
    8dd0:	e8 2a       	or	r14, r24
    8dd2:	75 2d       	mov	r23, r5
    8dd4:	29 30       	cpi	r18, 0x09	; 9
    8dd6:	06 33       	cpi	r16, 0x36	; 54
    8dd8:	0f 36       	cpi	r16, 0x6F	; 111
    8dda:	45 39       	cpi	r20, 0x95	; 149
    8ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    8dde:	49 40       	sbci	r20, 0x09	; 9
    8de0:	1b 44       	sbci	r17, 0x4B	; 75
    8de2:	28 48       	sbci	r18, 0x88	; 136
    8de4:	73 4c       	sbci	r23, 0xC3	; 195
    8de6:	fe 50       	subi	r31, 0x0E	; 14
    8de8:	cf 55       	subi	r28, 0x5F	; 95
    8dea:	ea 5a       	subi	r30, 0xAA	; 170
    8dec:	51 60       	ori	r21, 0x01	; 1
    8dee:	0c 66       	ori	r16, 0x6C	; 108
    8df0:	1d 6c       	ori	r17, 0xCD	; 205
    8df2:	8b 72       	andi	r24, 0x2B	; 43
    8df4:	5a 79       	andi	r21, 0x9A	; 154
    8df6:	92 80       	ldd	r9, Z+2	; 0x02
    8df8:	37 88       	ldd	r3, Z+23	; 0x17
    8dfa:	50 90 e5 98 	lds	r5, 0x98E5
    8dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    8e00:	9f ab       	std	Y+55, r25	; 0x37
    8e02:	d3 b5       	in	r29, 0x23	; 35
    8e04:	a3 c0       	rjmp	.+326    	; 0x8f4c <waves+0x4c>
	...

00008f00 <waves>:
    8f00:	00 03       	mulsu	r16, r16
    8f02:	06 09       	sbc	r16, r6
    8f04:	0c 10       	cpse	r0, r12
    8f06:	13 16       	cp	r1, r19
    8f08:	19 1c       	adc	r1, r9
    8f0a:	1f 22       	and	r1, r31
    8f0c:	25 28       	or	r2, r5
    8f0e:	2b 2e       	mov	r2, r27
    8f10:	31 33       	cpi	r19, 0x31	; 49
    8f12:	36 39       	cpi	r19, 0x96	; 150
    8f14:	3c 3f       	cpi	r19, 0xFC	; 252
    8f16:	41 44       	sbci	r20, 0x41	; 65
    8f18:	47 49       	sbci	r20, 0x97	; 151
    8f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8f1c:	51 53       	subi	r21, 0x31	; 49
    8f1e:	55 58       	subi	r21, 0x85	; 133
    8f20:	5a 5c       	subi	r21, 0xCA	; 202
    8f22:	5e 60       	ori	r21, 0x0E	; 14
    8f24:	62 64       	ori	r22, 0x42	; 66
    8f26:	66 68       	ori	r22, 0x86	; 134
    8f28:	6a 6b       	ori	r22, 0xBA	; 186
    8f2a:	6d 6f       	ori	r22, 0xFD	; 253
    8f2c:	70 71       	andi	r23, 0x10	; 16
    8f2e:	73 74       	andi	r23, 0x43	; 67
    8f30:	75 76       	andi	r23, 0x65	; 101
    8f32:	78 79       	andi	r23, 0x98	; 152
    8f34:	7a 7a       	andi	r23, 0xAA	; 170
    8f36:	7b 7c       	andi	r23, 0xCB	; 203
    8f38:	7d 7d       	andi	r23, 0xDD	; 221
    8f3a:	7e 7e       	andi	r23, 0xEE	; 238
    8f3c:	7e 7f       	andi	r23, 0xFE	; 254
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	7f 7f       	andi	r23, 0xFF	; 255
    8f42:	7f 7f       	andi	r23, 0xFF	; 255
    8f44:	7e 7e       	andi	r23, 0xEE	; 238
    8f46:	7e 7d       	andi	r23, 0xDE	; 222
    8f48:	7d 7c       	andi	r23, 0xCD	; 205
    8f4a:	7b 7a       	andi	r23, 0xAB	; 171
    8f4c:	7a 79       	andi	r23, 0x9A	; 154
    8f4e:	78 76       	andi	r23, 0x68	; 104
    8f50:	75 74       	andi	r23, 0x45	; 69
    8f52:	73 71       	andi	r23, 0x13	; 19
    8f54:	70 6f       	ori	r23, 0xF0	; 240
    8f56:	6d 6b       	ori	r22, 0xBD	; 189
    8f58:	6a 68       	ori	r22, 0x8A	; 138
    8f5a:	66 64       	ori	r22, 0x46	; 70
    8f5c:	62 60       	ori	r22, 0x02	; 2
    8f5e:	5e 5c       	subi	r21, 0xCE	; 206
    8f60:	5a 58       	subi	r21, 0x8A	; 138
    8f62:	55 53       	subi	r21, 0x35	; 53
    8f64:	51 4e       	sbci	r21, 0xE1	; 225
    8f66:	4c 49       	sbci	r20, 0x9C	; 156
    8f68:	47 44       	sbci	r20, 0x47	; 71
    8f6a:	41 3f       	cpi	r20, 0xF1	; 241
    8f6c:	3c 39       	cpi	r19, 0x9C	; 156
    8f6e:	36 33       	cpi	r19, 0x36	; 54
    8f70:	31 2e       	mov	r3, r17
    8f72:	2b 28       	or	r2, r11
    8f74:	25 22       	and	r2, r21
    8f76:	1f 1c       	adc	r1, r15
    8f78:	19 16       	cp	r1, r25
    8f7a:	13 10       	cpse	r1, r3
    8f7c:	0c 09       	sbc	r16, r12
    8f7e:	06 03       	mulsu	r16, r22
    8f80:	00 fd       	sbrc	r16, 0
    8f82:	fa f7       	brpl	.-2      	; 0x8f82 <waves+0x82>
    8f84:	f4 f0       	brlt	.+60     	; 0x8fc2 <waves+0xc2>
    8f86:	ed ea       	ldi	r30, 0xAD	; 173
    8f88:	e7 e4       	ldi	r30, 0x47	; 71
    8f8a:	e1 de       	rcall	.-574    	; 0x8d4e <steptable+0x46>
    8f8c:	db d8       	rcall	.-3658   	; 0x8144 <ReadControllers+0x2>
    8f8e:	d5 d2       	rcall	.+1450   	; 0x953a <waves+0x63a>
    8f90:	cf cd       	rjmp	.-1122   	; 0x8b30 <ProcessMusic+0x34e>
    8f92:	ca c7       	rjmp	.+3988   	; 0x9f28 <LBCopyChars+0x14>
    8f94:	c4 c1       	rjmp	.+904    	; 0x931e <waves+0x41e>
    8f96:	bf bc       	out	0x2f, r11	; 47
    8f98:	b9 b7       	in	r27, 0x39	; 57
    8f9a:	b4 b2       	in	r11, 0x14	; 20
    8f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8fa4:	9e 9c       	mul	r9, r14
    8fa6:	9a 98       	cbi	0x13, 2	; 19
    8fa8:	96 95       	lsr	r25
    8faa:	93 91       	.word	0x9193	; ????
    8fac:	90 8f       	std	Z+24, r25	; 0x18
    8fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8fb0:	8b 8a       	std	Y+19, r8	; 0x13
    8fb2:	88 87       	std	Y+8, r24	; 0x08
    8fb4:	86 86       	std	Z+14, r8	; 0x0e
    8fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8fb8:	83 83       	std	Z+3, r24	; 0x03
    8fba:	82 82       	std	Z+2, r8	; 0x02
    8fbc:	82 81       	ldd	r24, Z+2	; 0x02
    8fbe:	81 81       	ldd	r24, Z+1	; 0x01
    8fc0:	81 81       	ldd	r24, Z+1	; 0x01
    8fc2:	81 81       	ldd	r24, Z+1	; 0x01
    8fc4:	82 82       	std	Z+2, r8	; 0x02
    8fc6:	82 83       	std	Z+2, r24	; 0x02
    8fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8fca:	85 86       	std	Z+13, r8	; 0x0d
    8fcc:	86 87       	std	Z+14, r24	; 0x0e
    8fce:	88 8a       	std	Y+16, r8	; 0x10
    8fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8fd4:	90 91 93 95 	lds	r25, 0x9593
    8fd8:	96 98       	cbi	0x12, 6	; 18
    8fda:	9a 9c       	mul	r9, r10
    8fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    8fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8fe4:	af b2       	in	r10, 0x1f	; 31
    8fe6:	b4 b7       	in	r27, 0x34	; 52
    8fe8:	b9 bc       	out	0x29, r11	; 41
    8fea:	bf c1       	rjmp	.+894    	; 0x936a <waves+0x46a>
    8fec:	c4 c7       	rjmp	.+3976   	; 0x9f76 <LBPrintStr+0x4a>
    8fee:	ca cd       	rjmp	.-1132   	; 0x8b84 <ProcessMusic+0x3a2>
    8ff0:	cf d2       	rcall	.+1438   	; 0x9590 <waves+0x690>
    8ff2:	d5 d8       	rcall	.-3670   	; 0x819e <FormatEeprom+0x3c>
    8ff4:	db de       	rcall	.-586    	; 0x8dac <steptable+0xa4>
    8ff6:	e1 e4       	ldi	r30, 0x41	; 65
    8ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    8ffa:	ed f0       	brhs	.+58     	; 0x9036 <waves+0x136>
    8ffc:	f4 f7       	brge	.-4      	; 0x8ffa <waves+0xfa>
    8ffe:	fa fd       	.word	0xfdfa	; ????
    9000:	80 81       	ld	r24, Z
    9002:	82 83       	std	Z+2, r24	; 0x02
    9004:	84 85       	ldd	r24, Z+12	; 0x0c
    9006:	86 87       	std	Z+14, r24	; 0x0e
    9008:	88 89       	ldd	r24, Y+16	; 0x10
    900a:	8a 8b       	std	Y+18, r24	; 0x12
    900c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    900e:	8e 8f       	std	Y+30, r24	; 0x1e
    9010:	90 91 92 93 	lds	r25, 0x9392
    9014:	94 95       	.word	0x9594	; ????
    9016:	96 97       	sbiw	r26, 0x26	; 38
    9018:	98 99       	sbic	0x13, 0	; 19
    901a:	9a 9b       	sbis	0x13, 2	; 19
    901c:	9c 9d       	mul	r25, r12
    901e:	9e 9f       	mul	r25, r30
    9020:	a0 a1       	ldd	r26, Z+32	; 0x20
    9022:	a2 a3       	std	Z+34, r26	; 0x22
    9024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9026:	a6 a7       	std	Z+46, r26	; 0x2e
    9028:	a8 a9       	ldd	r26, Y+48	; 0x30
    902a:	aa ab       	std	Y+50, r26	; 0x32
    902c:	ac ad       	ldd	r26, Y+60	; 0x3c
    902e:	ae af       	std	Y+62, r26	; 0x3e
    9030:	b0 b1       	in	r27, 0x00	; 0
    9032:	b2 b3       	in	r27, 0x12	; 18
    9034:	b4 b5       	in	r27, 0x24	; 36
    9036:	b6 b7       	in	r27, 0x36	; 54
    9038:	b8 b9       	out	0x08, r27	; 8
    903a:	ba bb       	out	0x1a, r27	; 26
    903c:	bc bd       	out	0x2c, r27	; 44
    903e:	be bf       	out	0x3e, r27	; 62
    9040:	c0 c1       	rjmp	.+896    	; 0x93c2 <waves+0x4c2>
    9042:	c2 c3       	rjmp	.+1924   	; 0x97c8 <waves+0x8c8>
    9044:	c4 c5       	rjmp	.+2952   	; 0x9bce <InitializeVideoMode+0x12>
    9046:	c6 c7       	rjmp	.+3980   	; 0x9fd4 <LBCollides+0x46>
    9048:	c8 c9       	rjmp	.-3184   	; 0x83da <PatchCommand01+0x6>
    904a:	ca cb       	rjmp	.-2156   	; 0x87e0 <TriggerNote+0x7e>
    904c:	cc cd       	rjmp	.-1128   	; 0x8be6 <ProcessMusic+0x404>
    904e:	ce cf       	rjmp	.-100    	; 0x8fec <waves+0xec>
    9050:	d0 d1       	rcall	.+928    	; 0x93f2 <waves+0x4f2>
    9052:	d2 d3       	rcall	.+1956   	; 0x97f8 <waves+0x8f8>
    9054:	d4 d5       	rcall	.+2984   	; 0x9bfe <DrawMap+0x26>
    9056:	d6 d7       	rcall	.+4012   	; 0xa004 <LBLineIntersect+0x22>
    9058:	d8 d9       	rcall	.-3152   	; 0x840a <PatchCommand11>
    905a:	da db       	rcall	.-2124   	; 0x8810 <ProcessMusic+0x2e>
    905c:	dc dd       	rcall	.-1096   	; 0x8c16 <ProcessMusic+0x434>
    905e:	de df       	rcall	.-68     	; 0x901c <waves+0x11c>
    9060:	e0 e1       	ldi	r30, 0x10	; 16
    9062:	e2 e3       	ldi	r30, 0x32	; 50
    9064:	e4 e5       	ldi	r30, 0x54	; 84
    9066:	e6 e7       	ldi	r30, 0x76	; 118
    9068:	e8 e9       	ldi	r30, 0x98	; 152
    906a:	ea eb       	ldi	r30, 0xBA	; 186
    906c:	ec ed       	ldi	r30, 0xDC	; 220
    906e:	ee ef       	ldi	r30, 0xFE	; 254
    9070:	f0 f1       	brcs	.+124    	; 0x90ee <waves+0x1ee>
    9072:	f2 f3       	brmi	.-4      	; 0x9070 <waves+0x170>
    9074:	f4 f5       	brge	.+124    	; 0x90f2 <waves+0x1f2>
    9076:	f6 f7       	brtc	.-4      	; 0x9074 <waves+0x174>
    9078:	f8 f9       	.word	0xf9f8	; ????
    907a:	fa fb       	.word	0xfbfa	; ????
    907c:	fc fd       	.word	0xfdfc	; ????
    907e:	fe ff       	.word	0xfffe	; ????
    9080:	00 01       	movw	r0, r0
    9082:	02 03       	mulsu	r16, r18
    9084:	04 05       	cpc	r16, r4
    9086:	06 07       	cpc	r16, r22
    9088:	08 09       	sbc	r16, r8
    908a:	0a 0b       	sbc	r16, r26
    908c:	0c 0d       	add	r16, r12
    908e:	0e 0f       	add	r16, r30
    9090:	10 11       	cpse	r17, r0
    9092:	12 13       	cpse	r17, r18
    9094:	14 15       	cp	r17, r4
    9096:	16 17       	cp	r17, r22
    9098:	18 19       	sub	r17, r8
    909a:	1a 1b       	sub	r17, r26
    909c:	1c 1d       	adc	r17, r12
    909e:	1e 1f       	adc	r17, r30
    90a0:	20 21       	and	r18, r0
    90a2:	22 23       	and	r18, r18
    90a4:	24 25       	eor	r18, r4
    90a6:	26 27       	eor	r18, r22
    90a8:	28 29       	or	r18, r8
    90aa:	2a 2b       	or	r18, r26
    90ac:	2c 2d       	mov	r18, r12
    90ae:	2e 2f       	mov	r18, r30
    90b0:	30 31       	cpi	r19, 0x10	; 16
    90b2:	32 33       	cpi	r19, 0x32	; 50
    90b4:	34 35       	cpi	r19, 0x54	; 84
    90b6:	36 37       	cpi	r19, 0x76	; 118
    90b8:	38 39       	cpi	r19, 0x98	; 152
    90ba:	3a 3b       	cpi	r19, 0xBA	; 186
    90bc:	3c 3d       	cpi	r19, 0xDC	; 220
    90be:	3e 3f       	cpi	r19, 0xFE	; 254
    90c0:	40 41       	sbci	r20, 0x10	; 16
    90c2:	42 43       	sbci	r20, 0x32	; 50
    90c4:	44 45       	sbci	r20, 0x54	; 84
    90c6:	46 47       	sbci	r20, 0x76	; 118
    90c8:	48 49       	sbci	r20, 0x98	; 152
    90ca:	4a 4b       	sbci	r20, 0xBA	; 186
    90cc:	4c 4d       	sbci	r20, 0xDC	; 220
    90ce:	4e 4f       	sbci	r20, 0xFE	; 254
    90d0:	50 51       	subi	r21, 0x10	; 16
    90d2:	52 53       	subi	r21, 0x32	; 50
    90d4:	54 55       	subi	r21, 0x54	; 84
    90d6:	56 57       	subi	r21, 0x76	; 118
    90d8:	58 59       	subi	r21, 0x98	; 152
    90da:	5a 5b       	subi	r21, 0xBA	; 186
    90dc:	5c 5d       	subi	r21, 0xDC	; 220
    90de:	5e 5f       	subi	r21, 0xFE	; 254
    90e0:	60 61       	ori	r22, 0x10	; 16
    90e2:	62 63       	ori	r22, 0x32	; 50
    90e4:	64 65       	ori	r22, 0x54	; 84
    90e6:	66 67       	ori	r22, 0x76	; 118
    90e8:	68 69       	ori	r22, 0x98	; 152
    90ea:	6a 6b       	ori	r22, 0xBA	; 186
    90ec:	6c 6d       	ori	r22, 0xDC	; 220
    90ee:	6e 6f       	ori	r22, 0xFE	; 254
    90f0:	70 71       	andi	r23, 0x10	; 16
    90f2:	72 73       	andi	r23, 0x32	; 50
    90f4:	74 75       	andi	r23, 0x54	; 84
    90f6:	76 77       	andi	r23, 0x76	; 118
    90f8:	78 79       	andi	r23, 0x98	; 152
    90fa:	7a 7b       	andi	r23, 0xBA	; 186
    90fc:	7c 7d       	andi	r23, 0xDC	; 220
    90fe:	7e 7f       	andi	r23, 0xFE	; 254
    9100:	00 02       	muls	r16, r16
    9102:	04 06       	cpc	r0, r20
    9104:	08 0a       	sbc	r0, r24
    9106:	0c 0e       	add	r0, r28
    9108:	10 12       	cpse	r1, r16
    910a:	14 16       	cp	r1, r20
    910c:	18 1a       	sub	r1, r24
    910e:	1c 1e       	adc	r1, r28
    9110:	20 22       	and	r2, r16
    9112:	24 26       	eor	r2, r20
    9114:	28 2a       	or	r2, r24
    9116:	2c 2e       	mov	r2, r28
    9118:	30 32       	cpi	r19, 0x20	; 32
    911a:	34 36       	cpi	r19, 0x64	; 100
    911c:	38 3a       	cpi	r19, 0xA8	; 168
    911e:	3c 3e       	cpi	r19, 0xEC	; 236
    9120:	40 42       	sbci	r20, 0x20	; 32
    9122:	44 46       	sbci	r20, 0x64	; 100
    9124:	48 4a       	sbci	r20, 0xA8	; 168
    9126:	4c 4e       	sbci	r20, 0xEC	; 236
    9128:	50 52       	subi	r21, 0x20	; 32
    912a:	54 56       	subi	r21, 0x64	; 100
    912c:	58 5a       	subi	r21, 0xA8	; 168
    912e:	5c 5e       	subi	r21, 0xEC	; 236
    9130:	60 62       	ori	r22, 0x20	; 32
    9132:	64 66       	ori	r22, 0x64	; 100
    9134:	68 6a       	ori	r22, 0xA8	; 168
    9136:	6c 6e       	ori	r22, 0xEC	; 236
    9138:	70 72       	andi	r23, 0x20	; 32
    913a:	74 76       	andi	r23, 0x64	; 100
    913c:	78 7a       	andi	r23, 0xA8	; 168
    913e:	7c 7e       	andi	r23, 0xEC	; 236
    9140:	7f 7d       	andi	r23, 0xDF	; 223
    9142:	7b 79       	andi	r23, 0x9B	; 155
    9144:	77 75       	andi	r23, 0x57	; 87
    9146:	73 71       	andi	r23, 0x13	; 19
    9148:	6f 6d       	ori	r22, 0xDF	; 223
    914a:	6b 69       	ori	r22, 0x9B	; 155
    914c:	67 65       	ori	r22, 0x57	; 87
    914e:	63 61       	ori	r22, 0x13	; 19
    9150:	5f 5d       	subi	r21, 0xDF	; 223
    9152:	5b 59       	subi	r21, 0x9B	; 155
    9154:	57 55       	subi	r21, 0x57	; 87
    9156:	53 51       	subi	r21, 0x13	; 19
    9158:	4f 4d       	sbci	r20, 0xDF	; 223
    915a:	4b 49       	sbci	r20, 0x9B	; 155
    915c:	47 45       	sbci	r20, 0x57	; 87
    915e:	43 41       	sbci	r20, 0x13	; 19
    9160:	3f 3d       	cpi	r19, 0xDF	; 223
    9162:	3b 39       	cpi	r19, 0x9B	; 155
    9164:	37 35       	cpi	r19, 0x57	; 87
    9166:	33 31       	cpi	r19, 0x13	; 19
    9168:	2f 2d       	mov	r18, r15
    916a:	2b 29       	or	r18, r11
    916c:	27 25       	eor	r18, r7
    916e:	23 21       	and	r18, r3
    9170:	1f 1d       	adc	r17, r15
    9172:	1b 19       	sub	r17, r11
    9174:	17 15       	cp	r17, r7
    9176:	13 11       	cpse	r17, r3
    9178:	0f 0d       	add	r16, r15
    917a:	0b 09       	sbc	r16, r11
    917c:	07 05       	cpc	r16, r7
    917e:	03 01       	movw	r0, r6
    9180:	ff fd       	.word	0xfdff	; ????
    9182:	fb f9       	.word	0xf9fb	; ????
    9184:	f7 f5       	brid	.+124    	; 0x9202 <waves+0x302>
    9186:	f3 f1       	brvs	.+124    	; 0x9204 <waves+0x304>
    9188:	ef ed       	ldi	r30, 0xDF	; 223
    918a:	eb e9       	ldi	r30, 0x9B	; 155
    918c:	e7 e5       	ldi	r30, 0x57	; 87
    918e:	e3 e1       	ldi	r30, 0x13	; 19
    9190:	df dd       	rcall	.-1090   	; 0x8d50 <steptable+0x48>
    9192:	db d9       	rcall	.-3146   	; 0x854a <InitMusicPlayer+0x24>
    9194:	d7 d5       	rcall	.+2990   	; 0x9d44 <doFade+0x2>
    9196:	d3 d1       	rcall	.+934    	; 0x953e <waves+0x63e>
    9198:	cf cd       	rjmp	.-1122   	; 0x8d38 <steptable+0x30>
    919a:	cb c9       	rjmp	.-3178   	; 0x8532 <InitMusicPlayer+0xc>
    919c:	c7 c5       	rjmp	.+2958   	; 0x9d2c <WaitVsync+0x18>
    919e:	c3 c1       	rjmp	.+902    	; 0x9526 <waves+0x626>
    91a0:	bf bd       	out	0x2f, r27	; 47
    91a2:	bb b9       	out	0x0b, r27	; 11
    91a4:	b7 b5       	in	r27, 0x27	; 39
    91a6:	b3 b1       	in	r27, 0x03	; 3
    91a8:	af ad       	ldd	r26, Y+63	; 0x3f
    91aa:	ab a9       	ldd	r26, Y+51	; 0x33
    91ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    91ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    91b0:	9f 9d       	mul	r25, r15
    91b2:	9b 99       	sbic	0x13, 3	; 19
    91b4:	97 95       	ror	r25
    91b6:	93 91       	.word	0x9193	; ????
    91b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    91ba:	8b 89       	ldd	r24, Y+19	; 0x13
    91bc:	87 85       	ldd	r24, Z+15	; 0x0f
    91be:	83 81       	ldd	r24, Z+3	; 0x03
    91c0:	80 82       	st	Z, r8
    91c2:	84 86       	std	Z+12, r8	; 0x0c
    91c4:	88 8a       	std	Y+16, r8	; 0x10
    91c6:	8c 8e       	std	Y+28, r8	; 0x1c
    91c8:	90 92 94 96 	sts	0x9694, r9
    91cc:	98 9a       	sbi	0x13, 0	; 19
    91ce:	9c 9e       	mul	r9, r28
    91d0:	a0 a2       	std	Z+32, r10	; 0x20
    91d2:	a4 a6       	std	Z+44, r10	; 0x2c
    91d4:	a8 aa       	std	Y+48, r10	; 0x30
    91d6:	ac ae       	std	Y+60, r10	; 0x3c
    91d8:	b0 b2       	in	r11, 0x10	; 16
    91da:	b4 b6       	in	r11, 0x34	; 52
    91dc:	b8 ba       	out	0x18, r11	; 24
    91de:	bc be       	out	0x3c, r11	; 60
    91e0:	c0 c2       	rjmp	.+1408   	; 0x9762 <waves+0x862>
    91e2:	c4 c6       	rjmp	.+3464   	; 0x9f6c <LBPrintStr+0x40>
    91e4:	c8 ca       	rjmp	.-2672   	; 0x8776 <TriggerNote+0x14>
    91e6:	cc ce       	rjmp	.-616    	; 0x8f80 <waves+0x80>
    91e8:	d0 d2       	rcall	.+1440   	; 0x978a <waves+0x88a>
    91ea:	d4 d6       	rcall	.+3496   	; 0x9f94 <LBCollides+0x6>
    91ec:	d8 da       	rcall	.-2640   	; 0x879e <TriggerNote+0x3c>
    91ee:	dc de       	rcall	.-584    	; 0x8fa8 <waves+0xa8>
    91f0:	e0 e2       	ldi	r30, 0x20	; 32
    91f2:	e4 e6       	ldi	r30, 0x64	; 100
    91f4:	e8 ea       	ldi	r30, 0xA8	; 168
    91f6:	ec ee       	ldi	r30, 0xEC	; 236
    91f8:	f0 f2       	brcs	.-68     	; 0x91b6 <waves+0x2b6>
    91fa:	f4 f6       	brge	.-68     	; 0x91b8 <waves+0x2b8>
    91fc:	f8 fa       	.word	0xfaf8	; ????
    91fe:	fc fe       	.word	0xfefc	; ????
    9200:	7f 7f       	andi	r23, 0xFF	; 255
    9202:	7f 7f       	andi	r23, 0xFF	; 255
    9204:	7f 7f       	andi	r23, 0xFF	; 255
    9206:	7f 7f       	andi	r23, 0xFF	; 255
    9208:	7f 7f       	andi	r23, 0xFF	; 255
    920a:	7f 7f       	andi	r23, 0xFF	; 255
    920c:	7f 7f       	andi	r23, 0xFF	; 255
    920e:	7f 7f       	andi	r23, 0xFF	; 255
    9210:	7f 7f       	andi	r23, 0xFF	; 255
    9212:	7f 7f       	andi	r23, 0xFF	; 255
    9214:	7f 7f       	andi	r23, 0xFF	; 255
    9216:	7f 7f       	andi	r23, 0xFF	; 255
    9218:	7f 7f       	andi	r23, 0xFF	; 255
    921a:	7f 7f       	andi	r23, 0xFF	; 255
    921c:	7f 7f       	andi	r23, 0xFF	; 255
    921e:	7f 7f       	andi	r23, 0xFF	; 255
    9220:	7f 7f       	andi	r23, 0xFF	; 255
    9222:	7f 7f       	andi	r23, 0xFF	; 255
    9224:	7f 7f       	andi	r23, 0xFF	; 255
    9226:	7f 7f       	andi	r23, 0xFF	; 255
    9228:	7f 7f       	andi	r23, 0xFF	; 255
    922a:	7f 7f       	andi	r23, 0xFF	; 255
    922c:	7f 7f       	andi	r23, 0xFF	; 255
    922e:	7f 7f       	andi	r23, 0xFF	; 255
    9230:	7f 7f       	andi	r23, 0xFF	; 255
    9232:	7f 7f       	andi	r23, 0xFF	; 255
    9234:	7f 7f       	andi	r23, 0xFF	; 255
    9236:	7f 7f       	andi	r23, 0xFF	; 255
    9238:	7f 7f       	andi	r23, 0xFF	; 255
    923a:	7f 7f       	andi	r23, 0xFF	; 255
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	80 80       	ld	r8, Z
    9242:	80 80       	ld	r8, Z
    9244:	80 80       	ld	r8, Z
    9246:	80 80       	ld	r8, Z
    9248:	80 80       	ld	r8, Z
    924a:	80 80       	ld	r8, Z
    924c:	80 80       	ld	r8, Z
    924e:	80 80       	ld	r8, Z
    9250:	80 80       	ld	r8, Z
    9252:	80 80       	ld	r8, Z
    9254:	80 80       	ld	r8, Z
    9256:	80 80       	ld	r8, Z
    9258:	80 80       	ld	r8, Z
    925a:	80 80       	ld	r8, Z
    925c:	80 80       	ld	r8, Z
    925e:	80 80       	ld	r8, Z
    9260:	80 80       	ld	r8, Z
    9262:	80 80       	ld	r8, Z
    9264:	80 80       	ld	r8, Z
    9266:	80 80       	ld	r8, Z
    9268:	80 80       	ld	r8, Z
    926a:	80 80       	ld	r8, Z
    926c:	80 80       	ld	r8, Z
    926e:	80 80       	ld	r8, Z
    9270:	80 80       	ld	r8, Z
    9272:	80 80       	ld	r8, Z
    9274:	80 80       	ld	r8, Z
    9276:	80 80       	ld	r8, Z
    9278:	80 80       	ld	r8, Z
    927a:	80 80       	ld	r8, Z
    927c:	80 80       	ld	r8, Z
    927e:	80 80       	ld	r8, Z
    9280:	80 80       	ld	r8, Z
    9282:	80 80       	ld	r8, Z
    9284:	80 80       	ld	r8, Z
    9286:	80 80       	ld	r8, Z
    9288:	80 80       	ld	r8, Z
    928a:	80 80       	ld	r8, Z
    928c:	80 80       	ld	r8, Z
    928e:	80 80       	ld	r8, Z
    9290:	80 80       	ld	r8, Z
    9292:	80 80       	ld	r8, Z
    9294:	80 80       	ld	r8, Z
    9296:	80 80       	ld	r8, Z
    9298:	80 80       	ld	r8, Z
    929a:	80 80       	ld	r8, Z
    929c:	80 80       	ld	r8, Z
    929e:	80 80       	ld	r8, Z
    92a0:	80 80       	ld	r8, Z
    92a2:	80 80       	ld	r8, Z
    92a4:	80 80       	ld	r8, Z
    92a6:	80 80       	ld	r8, Z
    92a8:	80 80       	ld	r8, Z
    92aa:	80 80       	ld	r8, Z
    92ac:	80 80       	ld	r8, Z
    92ae:	80 80       	ld	r8, Z
    92b0:	80 80       	ld	r8, Z
    92b2:	80 80       	ld	r8, Z
    92b4:	80 80       	ld	r8, Z
    92b6:	80 80       	ld	r8, Z
    92b8:	80 80       	ld	r8, Z
    92ba:	80 80       	ld	r8, Z
    92bc:	80 80       	ld	r8, Z
    92be:	80 80       	ld	r8, Z
    92c0:	80 80       	ld	r8, Z
    92c2:	80 80       	ld	r8, Z
    92c4:	80 80       	ld	r8, Z
    92c6:	80 80       	ld	r8, Z
    92c8:	80 80       	ld	r8, Z
    92ca:	80 80       	ld	r8, Z
    92cc:	80 80       	ld	r8, Z
    92ce:	80 80       	ld	r8, Z
    92d0:	80 80       	ld	r8, Z
    92d2:	80 80       	ld	r8, Z
    92d4:	80 80       	ld	r8, Z
    92d6:	80 80       	ld	r8, Z
    92d8:	80 80       	ld	r8, Z
    92da:	80 80       	ld	r8, Z
    92dc:	80 80       	ld	r8, Z
    92de:	80 80       	ld	r8, Z
    92e0:	80 80       	ld	r8, Z
    92e2:	80 80       	ld	r8, Z
    92e4:	80 80       	ld	r8, Z
    92e6:	80 80       	ld	r8, Z
    92e8:	80 80       	ld	r8, Z
    92ea:	80 80       	ld	r8, Z
    92ec:	80 80       	ld	r8, Z
    92ee:	80 80       	ld	r8, Z
    92f0:	80 80       	ld	r8, Z
    92f2:	80 80       	ld	r8, Z
    92f4:	80 80       	ld	r8, Z
    92f6:	80 80       	ld	r8, Z
    92f8:	80 80       	ld	r8, Z
    92fa:	80 80       	ld	r8, Z
    92fc:	80 80       	ld	r8, Z
    92fe:	80 80       	ld	r8, Z
    9300:	7f 7f       	andi	r23, 0xFF	; 255
    9302:	7f 7f       	andi	r23, 0xFF	; 255
    9304:	7f 7f       	andi	r23, 0xFF	; 255
    9306:	7f 7f       	andi	r23, 0xFF	; 255
    9308:	7f 7f       	andi	r23, 0xFF	; 255
    930a:	7f 7f       	andi	r23, 0xFF	; 255
    930c:	7f 7f       	andi	r23, 0xFF	; 255
    930e:	7f 7f       	andi	r23, 0xFF	; 255
    9310:	7f 7f       	andi	r23, 0xFF	; 255
    9312:	7f 7f       	andi	r23, 0xFF	; 255
    9314:	7f 7f       	andi	r23, 0xFF	; 255
    9316:	7f 7f       	andi	r23, 0xFF	; 255
    9318:	7f 7f       	andi	r23, 0xFF	; 255
    931a:	7f 7f       	andi	r23, 0xFF	; 255
    931c:	7f 7f       	andi	r23, 0xFF	; 255
    931e:	7f 7f       	andi	r23, 0xFF	; 255
    9320:	7f 7f       	andi	r23, 0xFF	; 255
    9322:	7f 7f       	andi	r23, 0xFF	; 255
    9324:	7f 7f       	andi	r23, 0xFF	; 255
    9326:	7f 7f       	andi	r23, 0xFF	; 255
    9328:	7f 7f       	andi	r23, 0xFF	; 255
    932a:	7f 7f       	andi	r23, 0xFF	; 255
    932c:	7f 7f       	andi	r23, 0xFF	; 255
    932e:	7f 7f       	andi	r23, 0xFF	; 255
    9330:	7f 7f       	andi	r23, 0xFF	; 255
    9332:	7f 7f       	andi	r23, 0xFF	; 255
    9334:	7f 7f       	andi	r23, 0xFF	; 255
    9336:	7f 7f       	andi	r23, 0xFF	; 255
    9338:	7f 7f       	andi	r23, 0xFF	; 255
    933a:	7f 7f       	andi	r23, 0xFF	; 255
    933c:	7f 7f       	andi	r23, 0xFF	; 255
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	7f 7f       	andi	r23, 0xFF	; 255
    9342:	7f 7f       	andi	r23, 0xFF	; 255
    9344:	7f 7f       	andi	r23, 0xFF	; 255
    9346:	7f 7f       	andi	r23, 0xFF	; 255
    9348:	7f 7f       	andi	r23, 0xFF	; 255
    934a:	7f 7f       	andi	r23, 0xFF	; 255
    934c:	7f 7f       	andi	r23, 0xFF	; 255
    934e:	7f 7f       	andi	r23, 0xFF	; 255
    9350:	7f 7f       	andi	r23, 0xFF	; 255
    9352:	7f 7f       	andi	r23, 0xFF	; 255
    9354:	7f 7f       	andi	r23, 0xFF	; 255
    9356:	7f 7f       	andi	r23, 0xFF	; 255
    9358:	7f 7f       	andi	r23, 0xFF	; 255
    935a:	7f 7f       	andi	r23, 0xFF	; 255
    935c:	7f 7f       	andi	r23, 0xFF	; 255
    935e:	7f 7f       	andi	r23, 0xFF	; 255
    9360:	7f 7f       	andi	r23, 0xFF	; 255
    9362:	7f 7f       	andi	r23, 0xFF	; 255
    9364:	7f 7f       	andi	r23, 0xFF	; 255
    9366:	7f 7f       	andi	r23, 0xFF	; 255
    9368:	7f 7f       	andi	r23, 0xFF	; 255
    936a:	7f 7f       	andi	r23, 0xFF	; 255
    936c:	7f 7f       	andi	r23, 0xFF	; 255
    936e:	7f 7f       	andi	r23, 0xFF	; 255
    9370:	7f 7f       	andi	r23, 0xFF	; 255
    9372:	7f 7f       	andi	r23, 0xFF	; 255
    9374:	7f 7f       	andi	r23, 0xFF	; 255
    9376:	7f 7f       	andi	r23, 0xFF	; 255
    9378:	7f 7f       	andi	r23, 0xFF	; 255
    937a:	7f 7f       	andi	r23, 0xFF	; 255
    937c:	7f 7f       	andi	r23, 0xFF	; 255
    937e:	7f 7f       	andi	r23, 0xFF	; 255
    9380:	80 80       	ld	r8, Z
    9382:	80 80       	ld	r8, Z
    9384:	80 80       	ld	r8, Z
    9386:	80 80       	ld	r8, Z
    9388:	80 80       	ld	r8, Z
    938a:	80 80       	ld	r8, Z
    938c:	80 80       	ld	r8, Z
    938e:	80 80       	ld	r8, Z
    9390:	80 80       	ld	r8, Z
    9392:	80 80       	ld	r8, Z
    9394:	80 80       	ld	r8, Z
    9396:	80 80       	ld	r8, Z
    9398:	80 80       	ld	r8, Z
    939a:	80 80       	ld	r8, Z
    939c:	80 80       	ld	r8, Z
    939e:	80 80       	ld	r8, Z
    93a0:	80 80       	ld	r8, Z
    93a2:	80 80       	ld	r8, Z
    93a4:	80 80       	ld	r8, Z
    93a6:	80 80       	ld	r8, Z
    93a8:	80 80       	ld	r8, Z
    93aa:	80 80       	ld	r8, Z
    93ac:	80 80       	ld	r8, Z
    93ae:	80 80       	ld	r8, Z
    93b0:	80 80       	ld	r8, Z
    93b2:	80 80       	ld	r8, Z
    93b4:	80 80       	ld	r8, Z
    93b6:	80 80       	ld	r8, Z
    93b8:	80 80       	ld	r8, Z
    93ba:	80 80       	ld	r8, Z
    93bc:	80 80       	ld	r8, Z
    93be:	80 80       	ld	r8, Z
    93c0:	80 80       	ld	r8, Z
    93c2:	80 80       	ld	r8, Z
    93c4:	80 80       	ld	r8, Z
    93c6:	80 80       	ld	r8, Z
    93c8:	80 80       	ld	r8, Z
    93ca:	80 80       	ld	r8, Z
    93cc:	80 80       	ld	r8, Z
    93ce:	80 80       	ld	r8, Z
    93d0:	80 80       	ld	r8, Z
    93d2:	80 80       	ld	r8, Z
    93d4:	80 80       	ld	r8, Z
    93d6:	80 80       	ld	r8, Z
    93d8:	80 80       	ld	r8, Z
    93da:	80 80       	ld	r8, Z
    93dc:	80 80       	ld	r8, Z
    93de:	80 80       	ld	r8, Z
    93e0:	80 80       	ld	r8, Z
    93e2:	80 80       	ld	r8, Z
    93e4:	80 80       	ld	r8, Z
    93e6:	80 80       	ld	r8, Z
    93e8:	80 80       	ld	r8, Z
    93ea:	80 80       	ld	r8, Z
    93ec:	80 80       	ld	r8, Z
    93ee:	80 80       	ld	r8, Z
    93f0:	80 80       	ld	r8, Z
    93f2:	80 80       	ld	r8, Z
    93f4:	80 80       	ld	r8, Z
    93f6:	80 80       	ld	r8, Z
    93f8:	80 80       	ld	r8, Z
    93fa:	80 80       	ld	r8, Z
    93fc:	80 80       	ld	r8, Z
    93fe:	80 80       	ld	r8, Z
    9400:	7f 7f       	andi	r23, 0xFF	; 255
    9402:	7f 7f       	andi	r23, 0xFF	; 255
    9404:	7f 7f       	andi	r23, 0xFF	; 255
    9406:	7f 7f       	andi	r23, 0xFF	; 255
    9408:	7f 7f       	andi	r23, 0xFF	; 255
    940a:	7f 7f       	andi	r23, 0xFF	; 255
    940c:	7f 7f       	andi	r23, 0xFF	; 255
    940e:	7f 7f       	andi	r23, 0xFF	; 255
    9410:	7f 7f       	andi	r23, 0xFF	; 255
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7f 7f       	andi	r23, 0xFF	; 255
    9448:	7f 7f       	andi	r23, 0xFF	; 255
    944a:	7f 7f       	andi	r23, 0xFF	; 255
    944c:	7f 7f       	andi	r23, 0xFF	; 255
    944e:	7f 7f       	andi	r23, 0xFF	; 255
    9450:	7f 7f       	andi	r23, 0xFF	; 255
    9452:	7f 7f       	andi	r23, 0xFF	; 255
    9454:	7f 7f       	andi	r23, 0xFF	; 255
    9456:	7f 7f       	andi	r23, 0xFF	; 255
    9458:	7f 7f       	andi	r23, 0xFF	; 255
    945a:	7f 7f       	andi	r23, 0xFF	; 255
    945c:	7f 7f       	andi	r23, 0xFF	; 255
    945e:	7f 7f       	andi	r23, 0xFF	; 255
    9460:	7f 7f       	andi	r23, 0xFF	; 255
    9462:	7f 7f       	andi	r23, 0xFF	; 255
    9464:	7f 7f       	andi	r23, 0xFF	; 255
    9466:	7f 7f       	andi	r23, 0xFF	; 255
    9468:	7f 7f       	andi	r23, 0xFF	; 255
    946a:	7f 7f       	andi	r23, 0xFF	; 255
    946c:	7f 7f       	andi	r23, 0xFF	; 255
    946e:	7f 7f       	andi	r23, 0xFF	; 255
    9470:	7f 7f       	andi	r23, 0xFF	; 255
    9472:	7f 7f       	andi	r23, 0xFF	; 255
    9474:	7f 7f       	andi	r23, 0xFF	; 255
    9476:	7f 7f       	andi	r23, 0xFF	; 255
    9478:	7f 7f       	andi	r23, 0xFF	; 255
    947a:	7f 7f       	andi	r23, 0xFF	; 255
    947c:	7f 7f       	andi	r23, 0xFF	; 255
    947e:	7f 7f       	andi	r23, 0xFF	; 255
    9480:	7f 7f       	andi	r23, 0xFF	; 255
    9482:	7f 7f       	andi	r23, 0xFF	; 255
    9484:	7f 7f       	andi	r23, 0xFF	; 255
    9486:	7f 7f       	andi	r23, 0xFF	; 255
    9488:	7f 7f       	andi	r23, 0xFF	; 255
    948a:	7f 7f       	andi	r23, 0xFF	; 255
    948c:	7f 7f       	andi	r23, 0xFF	; 255
    948e:	7f 7f       	andi	r23, 0xFF	; 255
    9490:	7f 7f       	andi	r23, 0xFF	; 255
    9492:	7f 7f       	andi	r23, 0xFF	; 255
    9494:	7f 7f       	andi	r23, 0xFF	; 255
    9496:	7f 7f       	andi	r23, 0xFF	; 255
    9498:	7f 7f       	andi	r23, 0xFF	; 255
    949a:	7f 7f       	andi	r23, 0xFF	; 255
    949c:	7f 7f       	andi	r23, 0xFF	; 255
    949e:	7f 7f       	andi	r23, 0xFF	; 255
    94a0:	7f 7f       	andi	r23, 0xFF	; 255
    94a2:	7f 7f       	andi	r23, 0xFF	; 255
    94a4:	7f 7f       	andi	r23, 0xFF	; 255
    94a6:	7f 7f       	andi	r23, 0xFF	; 255
    94a8:	7f 7f       	andi	r23, 0xFF	; 255
    94aa:	7f 7f       	andi	r23, 0xFF	; 255
    94ac:	7f 7f       	andi	r23, 0xFF	; 255
    94ae:	7f 7f       	andi	r23, 0xFF	; 255
    94b0:	7f 7f       	andi	r23, 0xFF	; 255
    94b2:	7f 7f       	andi	r23, 0xFF	; 255
    94b4:	7f 7f       	andi	r23, 0xFF	; 255
    94b6:	7f 7f       	andi	r23, 0xFF	; 255
    94b8:	7f 7f       	andi	r23, 0xFF	; 255
    94ba:	7f 7f       	andi	r23, 0xFF	; 255
    94bc:	7f 7f       	andi	r23, 0xFF	; 255
    94be:	7f 7f       	andi	r23, 0xFF	; 255
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 80       	ld	r8, Z
    94f6:	80 80       	ld	r8, Z
    94f8:	80 80       	ld	r8, Z
    94fa:	80 80       	ld	r8, Z
    94fc:	80 80       	ld	r8, Z
    94fe:	80 80       	ld	r8, Z
    9500:	03 09       	sbc	r16, r3
    9502:	13 1e       	adc	r1, r19
    9504:	28 31       	cpi	r18, 0x18	; 24
    9506:	3a 40       	sbci	r19, 0x0A	; 10
    9508:	46 4c       	sbci	r20, 0xC6	; 198
    950a:	50 54       	subi	r21, 0x40	; 64
    950c:	58 5b       	subi	r21, 0xB8	; 184
    950e:	5e 61       	ori	r21, 0x1E	; 30
    9510:	63 65       	ori	r22, 0x53	; 83
    9512:	67 69       	ori	r22, 0x97	; 151
    9514:	6b 6c       	ori	r22, 0xCB	; 203
    9516:	6e 6f       	ori	r22, 0xFE	; 254
    9518:	70 71       	andi	r23, 0x10	; 16
    951a:	72 73       	andi	r23, 0x32	; 50
    951c:	74 75       	andi	r23, 0x54	; 84
    951e:	76 77       	andi	r23, 0x76	; 118
    9520:	77 78       	andi	r23, 0x87	; 135
    9522:	79 79       	andi	r23, 0x99	; 153
    9524:	7a 7a       	andi	r23, 0xAA	; 170
    9526:	7b 7b       	andi	r23, 0xBB	; 187
    9528:	7c 7c       	andi	r23, 0xCC	; 204
    952a:	7c 7d       	andi	r23, 0xDC	; 220
    952c:	7d 7d       	andi	r23, 0xDD	; 221
    952e:	7e 7e       	andi	r23, 0xEE	; 238
    9530:	7e 7e       	andi	r23, 0xEE	; 238
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	7f 7f       	andi	r23, 0xFF	; 255
    9542:	7f 7f       	andi	r23, 0xFF	; 255
    9544:	7f 7f       	andi	r23, 0xFF	; 255
    9546:	7f 7f       	andi	r23, 0xFF	; 255
    9548:	7f 7f       	andi	r23, 0xFF	; 255
    954a:	7f 7f       	andi	r23, 0xFF	; 255
    954c:	7f 7e       	andi	r23, 0xEF	; 239
    954e:	7e 7e       	andi	r23, 0xEE	; 238
    9550:	7e 7d       	andi	r23, 0xDE	; 222
    9552:	7d 7d       	andi	r23, 0xDD	; 221
    9554:	7c 7c       	andi	r23, 0xCC	; 204
    9556:	7c 7b       	andi	r23, 0xBC	; 188
    9558:	7b 7a       	andi	r23, 0xAB	; 171
    955a:	7a 79       	andi	r23, 0x9A	; 154
    955c:	79 78       	andi	r23, 0x89	; 137
    955e:	77 77       	andi	r23, 0x77	; 119
    9560:	76 75       	andi	r23, 0x56	; 86
    9562:	74 73       	andi	r23, 0x34	; 52
    9564:	72 71       	andi	r23, 0x12	; 18
    9566:	70 6f       	ori	r23, 0xF0	; 240
    9568:	6e 6c       	ori	r22, 0xCE	; 206
    956a:	6b 69       	ori	r22, 0x9B	; 155
    956c:	67 65       	ori	r22, 0x57	; 87
    956e:	63 61       	ori	r22, 0x13	; 19
    9570:	5e 5b       	subi	r21, 0xBE	; 190
    9572:	58 54       	subi	r21, 0x48	; 72
    9574:	50 4c       	sbci	r21, 0xC0	; 192
    9576:	46 40       	sbci	r20, 0x06	; 6
    9578:	3a 31       	cpi	r19, 0x1A	; 26
    957a:	28 1e       	adc	r2, r24
    957c:	13 09       	sbc	r17, r3
    957e:	03 00       	.word	0x0003	; ????
    9580:	c6 cc       	rjmp	.-1652   	; 0x8f0e <waves+0xe>
    9582:	d5 db       	rcall	.-2134   	; 0x8d2e <steptable+0x26>
    9584:	df e3       	ldi	r29, 0x3F	; 63
    9586:	e5 e7       	ldi	r30, 0x75	; 117
    9588:	e9 ea       	ldi	r30, 0xA9	; 169
    958a:	eb ec       	ldi	r30, 0xCB	; 203
    958c:	ed ee       	ldi	r30, 0xED	; 237
    958e:	ef ef       	ldi	r30, 0xFF	; 255
    9590:	f0 f0       	brcs	.+60     	; 0x95ce <waves+0x6ce>
    9592:	f0 f1       	brcs	.+124    	; 0x9610 <waves+0x710>
    9594:	f1 f1       	breq	.+124    	; 0x9612 <waves+0x712>
    9596:	f1 f2       	breq	.-68     	; 0x9554 <waves+0x654>
    9598:	f2 f2       	brmi	.-68     	; 0x9556 <waves+0x656>
    959a:	f2 f2       	brmi	.-68     	; 0x9558 <waves+0x658>
    959c:	f2 f2       	brmi	.-68     	; 0x955a <waves+0x65a>
    959e:	f2 f3       	brmi	.-4      	; 0x959c <waves+0x69c>
    95a0:	f3 f3       	brvs	.-4      	; 0x959e <waves+0x69e>
    95a2:	f3 f3       	brvs	.-4      	; 0x95a0 <waves+0x6a0>
    95a4:	f3 f3       	brvs	.-4      	; 0x95a2 <waves+0x6a2>
    95a6:	f3 f3       	brvs	.-4      	; 0x95a4 <waves+0x6a4>
    95a8:	f3 f3       	brvs	.-4      	; 0x95a6 <waves+0x6a6>
    95aa:	f3 f3       	brvs	.-4      	; 0x95a8 <waves+0x6a8>
    95ac:	f3 f3       	brvs	.-4      	; 0x95aa <waves+0x6aa>
    95ae:	f3 f3       	brvs	.-4      	; 0x95ac <waves+0x6ac>
    95b0:	f3 f3       	brvs	.-4      	; 0x95ae <waves+0x6ae>
    95b2:	f3 f3       	brvs	.-4      	; 0x95b0 <waves+0x6b0>
    95b4:	f3 f3       	brvs	.-4      	; 0x95b2 <waves+0x6b2>
    95b6:	f3 f3       	brvs	.-4      	; 0x95b4 <waves+0x6b4>
    95b8:	f3 f3       	brvs	.-4      	; 0x95b6 <waves+0x6b6>
    95ba:	f3 f3       	brvs	.-4      	; 0x95b8 <waves+0x6b8>
    95bc:	f3 f3       	brvs	.-4      	; 0x95ba <waves+0x6ba>
    95be:	f3 f3       	brvs	.-4      	; 0x95bc <waves+0x6bc>
    95c0:	f3 f3       	brvs	.-4      	; 0x95be <waves+0x6be>
    95c2:	f3 f3       	brvs	.-4      	; 0x95c0 <waves+0x6c0>
    95c4:	f3 f3       	brvs	.-4      	; 0x95c2 <waves+0x6c2>
    95c6:	f3 f3       	brvs	.-4      	; 0x95c4 <waves+0x6c4>
    95c8:	f3 f3       	brvs	.-4      	; 0x95c6 <waves+0x6c6>
    95ca:	f3 f3       	brvs	.-4      	; 0x95c8 <waves+0x6c8>
    95cc:	f3 f3       	brvs	.-4      	; 0x95ca <waves+0x6ca>
    95ce:	f3 f3       	brvs	.-4      	; 0x95cc <waves+0x6cc>
    95d0:	f3 f3       	brvs	.-4      	; 0x95ce <waves+0x6ce>
    95d2:	f3 f3       	brvs	.-4      	; 0x95d0 <waves+0x6d0>
    95d4:	f3 f3       	brvs	.-4      	; 0x95d2 <waves+0x6d2>
    95d6:	f3 f3       	brvs	.-4      	; 0x95d4 <waves+0x6d4>
    95d8:	f3 f3       	brvs	.-4      	; 0x95d6 <waves+0x6d6>
    95da:	f3 f3       	brvs	.-4      	; 0x95d8 <waves+0x6d8>
    95dc:	f3 f3       	brvs	.-4      	; 0x95da <waves+0x6da>
    95de:	f3 f3       	brvs	.-4      	; 0x95dc <waves+0x6dc>
    95e0:	f2 f2       	brmi	.-68     	; 0x959e <waves+0x69e>
    95e2:	f2 f2       	brmi	.-68     	; 0x95a0 <waves+0x6a0>
    95e4:	f2 f2       	brmi	.-68     	; 0x95a2 <waves+0x6a2>
    95e6:	f2 f2       	brmi	.-68     	; 0x95a4 <waves+0x6a4>
    95e8:	f1 f1       	breq	.+124    	; 0x9666 <waves+0x766>
    95ea:	f1 f1       	breq	.+124    	; 0x9668 <waves+0x768>
    95ec:	f0 f0       	brcs	.+60     	; 0x962a <waves+0x72a>
    95ee:	f0 ef       	ldi	r31, 0xF0	; 240
    95f0:	ef ee       	ldi	r30, 0xEF	; 239
    95f2:	ed ec       	ldi	r30, 0xCD	; 205
    95f4:	eb ea       	ldi	r30, 0xAB	; 171
    95f6:	e9 e7       	ldi	r30, 0x79	; 121
    95f8:	e5 e3       	ldi	r30, 0x35	; 53
    95fa:	df db       	rcall	.-2114   	; 0x8dba <steptable+0xb2>
    95fc:	d5 cc       	rjmp	.-1622   	; 0x8fa8 <waves+0xa8>
    95fe:	c6 00       	.word	0x00c6	; ????
    9600:	00 28       	or	r0, r0
    9602:	3d 42       	sbci	r19, 0x2D	; 45
    9604:	30 2d       	mov	r19, r0
    9606:	2c 2b       	or	r18, r28
    9608:	2c 2d       	mov	r18, r12
    960a:	2e 2f       	mov	r18, r30
    960c:	30 32       	cpi	r19, 0x20	; 32
    960e:	33 35       	cpi	r19, 0x53	; 83
    9610:	37 39       	cpi	r19, 0x97	; 151
    9612:	3b 3d       	cpi	r19, 0xDB	; 219
    9614:	3f 41       	sbci	r19, 0x1F	; 31
    9616:	43 45       	sbci	r20, 0x53	; 83
    9618:	48 4a       	sbci	r20, 0xA8	; 168
    961a:	4c 4e       	sbci	r20, 0xEC	; 236
    961c:	50 53       	subi	r21, 0x30	; 48
    961e:	55 57       	subi	r21, 0x75	; 117
    9620:	59 5b       	subi	r21, 0xB9	; 185
    9622:	5d 5f       	subi	r21, 0xFD	; 253
    9624:	61 63       	ori	r22, 0x31	; 49
    9626:	65 67       	ori	r22, 0x75	; 117
    9628:	69 6b       	ori	r22, 0xB9	; 185
    962a:	6c 6e       	ori	r22, 0xEC	; 236
    962c:	70 71       	andi	r23, 0x10	; 16
    962e:	73 74       	andi	r23, 0x43	; 67
    9630:	75 77       	andi	r23, 0x75	; 117
    9632:	78 79       	andi	r23, 0x98	; 152
    9634:	7a 7b       	andi	r23, 0xBA	; 186
    9636:	7c 7d       	andi	r23, 0xDC	; 220
    9638:	7d 7e       	andi	r23, 0xED	; 237
    963a:	7e 7f       	andi	r23, 0xFE	; 254
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	7f 7f       	andi	r23, 0xFF	; 255
    9642:	7f 7f       	andi	r23, 0xFF	; 255
    9644:	7f 7f       	andi	r23, 0xFF	; 255
    9646:	7e 7e       	andi	r23, 0xEE	; 238
    9648:	7d 7d       	andi	r23, 0xDD	; 221
    964a:	7c 7b       	andi	r23, 0xBC	; 188
    964c:	7a 79       	andi	r23, 0x9A	; 154
    964e:	78 77       	andi	r23, 0x78	; 120
    9650:	75 74       	andi	r23, 0x45	; 69
    9652:	73 71       	andi	r23, 0x13	; 19
    9654:	70 6e       	ori	r23, 0xE0	; 224
    9656:	6c 6b       	ori	r22, 0xBC	; 188
    9658:	69 67       	ori	r22, 0x79	; 121
    965a:	65 63       	ori	r22, 0x35	; 53
    965c:	61 5f       	subi	r22, 0xF1	; 241
    965e:	5d 5b       	subi	r21, 0xBD	; 189
    9660:	59 57       	subi	r21, 0x79	; 121
    9662:	55 53       	subi	r21, 0x35	; 53
    9664:	50 4e       	sbci	r21, 0xE0	; 224
    9666:	4c 4a       	sbci	r20, 0xAC	; 172
    9668:	48 45       	sbci	r20, 0x58	; 88
    966a:	43 41       	sbci	r20, 0x13	; 19
    966c:	3f 3d       	cpi	r19, 0xDF	; 223
    966e:	3b 39       	cpi	r19, 0x9B	; 155
    9670:	37 35       	cpi	r19, 0x57	; 87
    9672:	33 32       	cpi	r19, 0x23	; 35
    9674:	30 2f       	mov	r19, r16
    9676:	2e 2d       	mov	r18, r14
    9678:	2c 2b       	or	r18, r28
    967a:	2c 2d       	mov	r18, r12
    967c:	30 42       	sbci	r19, 0x20	; 32
    967e:	3d 28       	or	r3, r13
    9680:	00 e9       	ldi	r16, 0x90	; 144
    9682:	e5 fe       	sbrs	r14, 5
    9684:	d4 d7       	rcall	.+4008   	; 0xa62e <save_score+0x6e>
    9686:	d7 d7       	rcall	.+4014   	; 0xa636 <save_score+0x76>
    9688:	d6 d4       	rcall	.+2476   	; 0xa036 <LBLineIntersect+0x54>
    968a:	d2 d0       	rcall	.+420    	; 0x9830 <waves+0x930>
    968c:	ce cc       	rjmp	.-1636   	; 0x902a <waves+0x12a>
    968e:	ca c8       	rjmp	.-3692   	; 0x8824 <ProcessMusic+0x42>
    9690:	c6 c3       	rjmp	.+1932   	; 0x9e1e <LBGetNextFrame+0x42>
    9692:	c1 bf       	out	0x31, r28	; 49
    9694:	bd ba       	out	0x1d, r11	; 29
    9696:	b8 b6       	in	r11, 0x38	; 56
    9698:	b4 b1       	in	r27, 0x04	; 4
    969a:	af ad       	ldd	r26, Y+63	; 0x3f
    969c:	ab a9       	ldd	r26, Y+51	; 0x33
    969e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    96a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    96a2:	9f 9e       	mul	r9, r31
    96a4:	9c 9a       	sbi	0x13, 4	; 19
    96a6:	99 97       	sbiw	r26, 0x29	; 41
    96a8:	95 94       	asr	r9
    96aa:	93 91       	.word	0x9193	; ????
    96ac:	90 8f       	std	Z+24, r25	; 0x18
    96ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    96b0:	8b 8a       	std	Y+19, r8	; 0x13
    96b2:	89 88       	ldd	r8, Y+17	; 0x11
    96b4:	88 87       	std	Y+8, r24	; 0x08
    96b6:	86 85       	ldd	r24, Z+14	; 0x0e
    96b8:	85 84       	ldd	r8, Z+13	; 0x0d
    96ba:	84 84       	ldd	r8, Z+12	; 0x0c
    96bc:	83 83       	std	Z+3, r24	; 0x03
    96be:	83 83       	std	Z+3, r24	; 0x03
    96c0:	83 83       	std	Z+3, r24	; 0x03
    96c2:	83 83       	std	Z+3, r24	; 0x03
    96c4:	83 84       	ldd	r8, Z+11	; 0x0b
    96c6:	84 84       	ldd	r8, Z+12	; 0x0c
    96c8:	85 85       	ldd	r24, Z+13	; 0x0d
    96ca:	86 87       	std	Z+14, r24	; 0x0e
    96cc:	88 88       	ldd	r8, Y+16	; 0x10
    96ce:	89 8a       	std	Y+17, r8	; 0x11
    96d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    96d2:	8d 8f       	std	Y+29, r24	; 0x1d
    96d4:	90 91 93 94 	lds	r25, 0x9493
    96d8:	95 97       	sbiw	r26, 0x25	; 37
    96da:	99 9a       	sbi	0x13, 1	; 19
    96dc:	9c 9e       	mul	r9, r28
    96de:	9f a1       	ldd	r25, Y+39	; 0x27
    96e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    96e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    96e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    96e6:	af b1       	in	r26, 0x0f	; 15
    96e8:	b4 b6       	in	r11, 0x34	; 52
    96ea:	b8 ba       	out	0x18, r11	; 24
    96ec:	bd bf       	out	0x3d, r27	; 61
    96ee:	c1 c3       	rjmp	.+1922   	; 0x9e72 <LBGetNextFrameReverse+0x4c>
    96f0:	c6 c8       	rjmp	.-3700   	; 0x887e <ProcessMusic+0x9c>
    96f2:	ca cc       	rjmp	.-1644   	; 0x9088 <waves+0x188>
    96f4:	ce d0       	rcall	.+412    	; 0x9892 <waves+0x992>
    96f6:	d2 d4       	rcall	.+2468   	; 0xa09c <LBLineIntersect+0xba>
    96f8:	d6 d7       	rcall	.+4012   	; 0xa6a6 <position_shot+0x6>
    96fa:	d7 d7       	rcall	.+4014   	; 0xa6aa <position_shot+0xa>
    96fc:	d4 fe       	sbrs	r13, 4
    96fe:	e5 e9       	ldi	r30, 0x95	; 149
    9700:	f9 f8       	.word	0xf8f9	; ????
    9702:	f9 f5       	brne	.+126    	; 0x9782 <waves+0x882>
    9704:	eb e1       	ldi	r30, 0x1B	; 27
    9706:	dd de       	rcall	.-582    	; 0x94c2 <waves+0x5c2>
    9708:	e0 e2       	ldi	r30, 0x20	; 32
    970a:	e4 e5       	ldi	r30, 0x54	; 84
    970c:	e6 e5       	ldi	r30, 0x56	; 86
    970e:	e4 e2       	ldi	r30, 0x24	; 36
    9710:	de d9       	rcall	.-3140   	; 0x8ace <ProcessMusic+0x2ec>
    9712:	d2 ca       	rjmp	.-2652   	; 0x8cb8 <esmw+0x2e>
    9714:	c1 b7       	in	r28, 0x31	; 49
    9716:	ac a2       	std	Y+36, r10	; 0x24
    9718:	99 91       	ld	r25, Y+
    971a:	8a 86       	std	Y+10, r8	; 0x0a
    971c:	83 81       	ldd	r24, Z+3	; 0x03
    971e:	80 80       	ld	r8, Z
    9720:	81 82       	std	Z+1, r8	; 0x01
    9722:	83 85       	ldd	r24, Z+11	; 0x0b
    9724:	86 88       	ldd	r8, Z+22	; 0x16
    9726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9728:	8d 8f       	std	Y+29, r24	; 0x1d
    972a:	90 92 93 95 	sts	0x9593, r9
    972e:	96 97       	sbiw	r26, 0x26	; 38
    9730:	98 99       	sbic	0x13, 0	; 19
    9732:	9a 9b       	sbis	0x13, 2	; 19
    9734:	9b 9c       	mul	r9, r11
    9736:	9d 9d       	mul	r25, r13
    9738:	9d 9e       	mul	r9, r29
    973a:	9e 9e       	mul	r9, r30
    973c:	9f 9f       	mul	r25, r31
    973e:	9f 9f       	mul	r25, r31
    9740:	9f 9f       	mul	r25, r31
    9742:	9f 9e       	mul	r9, r31
    9744:	9e 9e       	mul	r9, r30
    9746:	9d 9d       	mul	r25, r13
    9748:	9d 9c       	mul	r9, r13
    974a:	9b 9b       	sbis	0x13, 3	; 19
    974c:	9a 99       	sbic	0x13, 2	; 19
    974e:	98 97       	sbiw	r26, 0x28	; 40
    9750:	96 95       	lsr	r25
    9752:	93 92       	.word	0x9293	; ????
    9754:	90 8f       	std	Z+24, r25	; 0x18
    9756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9758:	8a 88       	ldd	r8, Y+18	; 0x12
    975a:	86 85       	ldd	r24, Z+14	; 0x0e
    975c:	83 82       	std	Z+3, r8	; 0x03
    975e:	81 80       	ldd	r8, Z+1	; 0x01
    9760:	80 81       	ld	r24, Z
    9762:	83 86       	std	Z+11, r8	; 0x0b
    9764:	8a 91       	ld	r24, -Y
    9766:	99 a2       	std	Y+33, r9	; 0x21
    9768:	ac b7       	in	r26, 0x3c	; 60
    976a:	c1 ca       	rjmp	.-2686   	; 0x8cee <esmw+0x64>
    976c:	d2 d9       	rcall	.-3164   	; 0x8b12 <ProcessMusic+0x330>
    976e:	de e2       	ldi	r29, 0x2E	; 46
    9770:	e4 e5       	ldi	r30, 0x54	; 84
    9772:	e6 e5       	ldi	r30, 0x56	; 86
    9774:	e4 e2       	ldi	r30, 0x24	; 36
    9776:	e0 de       	rcall	.-576    	; 0x9538 <waves+0x638>
    9778:	dd e1       	ldi	r29, 0x1D	; 29
    977a:	eb f5       	brvc	.+122    	; 0x97f6 <waves+0x8f6>
    977c:	f9 f8       	.word	0xf8f9	; ????
    977e:	f9 00       	.word	0x00f9	; ????
    9780:	07 08       	sbc	r0, r7
    9782:	07 0b       	sbc	r16, r23
    9784:	15 1f       	adc	r17, r21
    9786:	23 22       	and	r2, r19
    9788:	20 1e       	adc	r2, r16
    978a:	1c 1b       	sub	r17, r28
    978c:	1a 1b       	sub	r17, r26
    978e:	1c 1e       	adc	r1, r28
    9790:	22 27       	eor	r18, r18
    9792:	2e 36       	cpi	r18, 0x6E	; 110
    9794:	3f 49       	sbci	r19, 0x9F	; 159
    9796:	54 5e       	subi	r21, 0xE4	; 228
    9798:	67 6f       	ori	r22, 0xF7	; 247
    979a:	76 7a       	andi	r23, 0xA6	; 166
    979c:	7e 7f       	andi	r23, 0xFE	; 254
    979e:	7f 7f       	andi	r23, 0xFF	; 255
    97a0:	7f 7e       	andi	r23, 0xEF	; 239
    97a2:	7d 7b       	andi	r23, 0xBD	; 189
    97a4:	7a 78       	andi	r23, 0x8A	; 138
    97a6:	76 74       	andi	r23, 0x46	; 70
    97a8:	73 71       	andi	r23, 0x13	; 19
    97aa:	70 6e       	ori	r23, 0xE0	; 224
    97ac:	6d 6b       	ori	r22, 0xBD	; 189
    97ae:	6a 69       	ori	r22, 0x9A	; 154
    97b0:	68 67       	ori	r22, 0x78	; 120
    97b2:	66 65       	ori	r22, 0x56	; 86
    97b4:	65 64       	ori	r22, 0x45	; 69
    97b6:	64 63       	ori	r22, 0x34	; 52
    97b8:	63 62       	ori	r22, 0x23	; 35
    97ba:	62 62       	ori	r22, 0x22	; 34
    97bc:	61 61       	ori	r22, 0x11	; 17
    97be:	61 61       	ori	r22, 0x11	; 17
    97c0:	61 61       	ori	r22, 0x11	; 17
    97c2:	61 62       	ori	r22, 0x21	; 33
    97c4:	62 62       	ori	r22, 0x22	; 34
    97c6:	63 63       	ori	r22, 0x33	; 51
    97c8:	63 64       	ori	r22, 0x43	; 67
    97ca:	65 65       	ori	r22, 0x55	; 85
    97cc:	66 67       	ori	r22, 0x76	; 118
    97ce:	68 69       	ori	r22, 0x98	; 152
    97d0:	6a 6b       	ori	r22, 0xBA	; 186
    97d2:	6d 6e       	ori	r22, 0xED	; 237
    97d4:	70 71       	andi	r23, 0x10	; 16
    97d6:	73 74       	andi	r23, 0x43	; 67
    97d8:	76 78       	andi	r23, 0x86	; 134
    97da:	7a 7b       	andi	r23, 0xBA	; 186
    97dc:	7d 7e       	andi	r23, 0xED	; 237
    97de:	7f 7f       	andi	r23, 0xFF	; 255
    97e0:	7f 7f       	andi	r23, 0xFF	; 255
    97e2:	7e 7a       	andi	r23, 0xAE	; 174
    97e4:	76 6f       	ori	r23, 0xF6	; 246
    97e6:	67 5e       	subi	r22, 0xE7	; 231
    97e8:	54 49       	sbci	r21, 0x94	; 148
    97ea:	3f 36       	cpi	r19, 0x6F	; 111
    97ec:	2e 27       	eor	r18, r30
    97ee:	22 1e       	adc	r2, r18
    97f0:	1c 1b       	sub	r17, r28
    97f2:	1a 1b       	sub	r17, r26
    97f4:	1c 1e       	adc	r1, r28
    97f6:	20 22       	and	r2, r16
    97f8:	23 1f       	adc	r18, r19
    97fa:	15 0b       	sbc	r17, r21
    97fc:	07 08       	sbc	r0, r7
    97fe:	07 00       	.word	0x0007	; ????
    9800:	1f 31       	cpi	r17, 0x1F	; 31
    9802:	3d 44       	sbci	r19, 0x4D	; 77
    9804:	4e 53       	subi	r20, 0x3E	; 62
    9806:	54 56       	subi	r21, 0x64	; 100
    9808:	5a 5f       	subi	r21, 0xFA	; 250
    980a:	64 69       	ori	r22, 0x94	; 148
    980c:	6e 74       	andi	r22, 0x4E	; 78
    980e:	76 79       	andi	r23, 0x96	; 150
    9810:	7c 7f       	andi	r23, 0xFC	; 252
    9812:	7f 7f       	andi	r23, 0xFF	; 255
    9814:	7f 7f       	andi	r23, 0xFF	; 255
    9816:	7f 7f       	andi	r23, 0xFF	; 255
    9818:	7f 7f       	andi	r23, 0xFF	; 255
    981a:	7f 7f       	andi	r23, 0xFF	; 255
    981c:	7f 7f       	andi	r23, 0xFF	; 255
    981e:	7f 7f       	andi	r23, 0xFF	; 255
    9820:	7f 7f       	andi	r23, 0xFF	; 255
    9822:	7f 7f       	andi	r23, 0xFF	; 255
    9824:	7f 7f       	andi	r23, 0xFF	; 255
    9826:	7f 7f       	andi	r23, 0xFF	; 255
    9828:	7f 7f       	andi	r23, 0xFF	; 255
    982a:	7f 7f       	andi	r23, 0xFF	; 255
    982c:	7f 7f       	andi	r23, 0xFF	; 255
    982e:	7f 7f       	andi	r23, 0xFF	; 255
    9830:	7f 7f       	andi	r23, 0xFF	; 255
    9832:	7f 7f       	andi	r23, 0xFF	; 255
    9834:	7f 7f       	andi	r23, 0xFF	; 255
    9836:	7f 7f       	andi	r23, 0xFF	; 255
    9838:	7f 7f       	andi	r23, 0xFF	; 255
    983a:	7f 7f       	andi	r23, 0xFF	; 255
    983c:	7f 7f       	andi	r23, 0xFF	; 255
    983e:	7f 7f       	andi	r23, 0xFF	; 255
    9840:	7f 7f       	andi	r23, 0xFF	; 255
    9842:	7f 7f       	andi	r23, 0xFF	; 255
    9844:	7f 7f       	andi	r23, 0xFF	; 255
    9846:	7f 7f       	andi	r23, 0xFF	; 255
    9848:	7f 7f       	andi	r23, 0xFF	; 255
    984a:	7f 7f       	andi	r23, 0xFF	; 255
    984c:	7f 7f       	andi	r23, 0xFF	; 255
    984e:	7f 7f       	andi	r23, 0xFF	; 255
    9850:	7f 7f       	andi	r23, 0xFF	; 255
    9852:	7f 7f       	andi	r23, 0xFF	; 255
    9854:	7f 7f       	andi	r23, 0xFF	; 255
    9856:	7f 7f       	andi	r23, 0xFF	; 255
    9858:	7f 7f       	andi	r23, 0xFF	; 255
    985a:	7f 7f       	andi	r23, 0xFF	; 255
    985c:	7f 7f       	andi	r23, 0xFF	; 255
    985e:	7f 7f       	andi	r23, 0xFF	; 255
    9860:	7f 7f       	andi	r23, 0xFF	; 255
    9862:	7f 7f       	andi	r23, 0xFF	; 255
    9864:	7f 7f       	andi	r23, 0xFF	; 255
    9866:	7f 7f       	andi	r23, 0xFF	; 255
    9868:	7f 7f       	andi	r23, 0xFF	; 255
    986a:	7f 7f       	andi	r23, 0xFF	; 255
    986c:	7f 7f       	andi	r23, 0xFF	; 255
    986e:	7f 7f       	andi	r23, 0xFF	; 255
    9870:	7f 7f       	andi	r23, 0xFF	; 255
    9872:	7f 7f       	andi	r23, 0xFF	; 255
    9874:	7f 7f       	andi	r23, 0xFF	; 255
    9876:	7f 7f       	andi	r23, 0xFF	; 255
    9878:	7f 7f       	andi	r23, 0xFF	; 255
    987a:	7f 7c       	andi	r23, 0xCF	; 207
    987c:	78 71       	andi	r23, 0x18	; 24
    987e:	68 4c       	sbci	r22, 0xC8	; 200
    9880:	2c 1c       	adc	r2, r12
    9882:	12 0c       	add	r1, r2
    9884:	0a 0b       	sbc	r16, r26
    9886:	0a 05       	cpc	r16, r10
    9888:	fd f3       	brhs	.-2      	; 0x9888 <waves+0x988>
    988a:	e9 df       	rcall	.-46     	; 0x985e <waves+0x95e>
    988c:	d4 ca       	rjmp	.-2648   	; 0x8e36 <steptable+0x12e>
    988e:	c0 b7       	in	r28, 0x30	; 48
    9890:	ae a6       	std	Y+46, r10	; 0x2e
    9892:	9e 97       	sbiw	r26, 0x2e	; 46
    9894:	91 8b       	std	Z+17, r25	; 0x11
    9896:	86 85       	ldd	r24, Z+14	; 0x0e
    9898:	82 80       	ldd	r8, Z+2	; 0x02
    989a:	80 80       	ld	r8, Z
    989c:	80 80       	ld	r8, Z
    989e:	80 80       	ld	r8, Z
    98a0:	80 80       	ld	r8, Z
    98a2:	80 80       	ld	r8, Z
    98a4:	80 80       	ld	r8, Z
    98a6:	80 80       	ld	r8, Z
    98a8:	80 80       	ld	r8, Z
    98aa:	80 80       	ld	r8, Z
    98ac:	80 80       	ld	r8, Z
    98ae:	80 80       	ld	r8, Z
    98b0:	80 80       	ld	r8, Z
    98b2:	80 80       	ld	r8, Z
    98b4:	80 80       	ld	r8, Z
    98b6:	80 80       	ld	r8, Z
    98b8:	80 80       	ld	r8, Z
    98ba:	80 80       	ld	r8, Z
    98bc:	80 80       	ld	r8, Z
    98be:	80 80       	ld	r8, Z
    98c0:	80 80       	ld	r8, Z
    98c2:	80 80       	ld	r8, Z
    98c4:	80 80       	ld	r8, Z
    98c6:	80 80       	ld	r8, Z
    98c8:	80 80       	ld	r8, Z
    98ca:	80 80       	ld	r8, Z
    98cc:	80 80       	ld	r8, Z
    98ce:	80 80       	ld	r8, Z
    98d0:	80 80       	ld	r8, Z
    98d2:	80 80       	ld	r8, Z
    98d4:	80 80       	ld	r8, Z
    98d6:	80 80       	ld	r8, Z
    98d8:	80 80       	ld	r8, Z
    98da:	80 80       	ld	r8, Z
    98dc:	80 80       	ld	r8, Z
    98de:	80 80       	ld	r8, Z
    98e0:	80 80       	ld	r8, Z
    98e2:	80 80       	ld	r8, Z
    98e4:	80 80       	ld	r8, Z
    98e6:	80 80       	ld	r8, Z
    98e8:	80 80       	ld	r8, Z
    98ea:	80 80       	ld	r8, Z
    98ec:	80 80       	ld	r8, Z
    98ee:	80 80       	ld	r8, Z
    98f0:	80 80       	ld	r8, Z
    98f2:	80 80       	ld	r8, Z
    98f4:	80 87       	std	Z+8, r24	; 0x08
    98f6:	91 9d       	mul	r25, r1
    98f8:	ac c4       	rjmp	.+2392   	; 0xa252 <init_tile_animations+0x2c>
    98fa:	cb d4       	rcall	.+2454   	; 0xa292 <init_scope_animation+0x1e>
    98fc:	dd f2       	brhs	.-74     	; 0x98b4 <waves+0x9b4>
    98fe:	fa fa       	.word	0xfafa	; ????

00009900 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    9900:	2f 92       	push	r2
    9902:	3f 92       	push	r3
    9904:	4f 92       	push	r4
    9906:	5f 92       	push	r5
    9908:	6f 92       	push	r6
    990a:	7f 92       	push	r7
    990c:	8f 92       	push	r8
    990e:	9f 92       	push	r9
    9910:	af 92       	push	r10
    9912:	bf 92       	push	r11
    9914:	cf 92       	push	r12
    9916:	df 92       	push	r13
    9918:	ef 92       	push	r14
    991a:	ff 92       	push	r15
    991c:	0f 93       	push	r16
    991e:	1f 93       	push	r17
    9920:	cf 93       	push	r28
    9922:	df 93       	push	r29
    9924:	00 d0       	rcall	.+0      	; 0x9926 <ProcessSprites+0x26>
    9926:	00 d0       	rcall	.+0      	; 0x9928 <ProcessSprites+0x28>
    9928:	00 d0       	rcall	.+0      	; 0x992a <ProcessSprites+0x2a>
    992a:	cd b7       	in	r28, 0x3d	; 61
    992c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    992e:	80 91 00 01 	lds	r24, 0x0100
    9932:	88 23       	and	r24, r24
    9934:	09 f4       	brne	.+2      	; 0x9938 <ProcessSprites+0x38>
    9936:	b1 c0       	rjmp	.+354    	; 0x9a9a <ProcessSprites+0x19a>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    9938:	80 91 da 0a 	lds	r24, 0x0ADA
    993c:	80 93 d9 0a 	sts	0x0AD9, r24
	free_tile_index = user_ram_tiles_c;
    9940:	80 93 d8 0a 	sts	0x0AD8, r24
    9944:	00 e0       	ldi	r16, 0x00	; 0
    9946:	10 e0       	ldi	r17, 0x00	; 0
    9948:	f8 01       	movw	r30, r16
    994a:	e8 59       	subi	r30, 0x98	; 152
    994c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    994e:	81 81       	ldd	r24, Z+1	; 0x01
    9950:	90 81       	ld	r25, Z
    9952:	32 81       	ldd	r19, Z+2	; 0x02
    9954:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    9956:	28 e0       	ldi	r18, 0x08	; 8
    9958:	29 0f       	add	r18, r25
    995a:	26 95       	lsr	r18
    995c:	26 95       	lsr	r18
    995e:	26 95       	lsr	r18
    9960:	33 24       	eor	r3, r3
    9962:	3a 94       	dec	r3
    9964:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    9966:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    9968:	19 f0       	breq	.+6      	; 0x9970 <ProcessSprites+0x70>
    996a:	e2 e0       	ldi	r30, 0x02	; 2
    996c:	2e 2e       	mov	r2, r30
    996e:	02 c0       	rjmp	.+4      	; 0x9974 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    9970:	22 24       	eor	r2, r2
    9972:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    9974:	28 e0       	ldi	r18, 0x08	; 8
    9976:	28 0f       	add	r18, r24
    9978:	52 2e       	mov	r5, r18
    997a:	56 94       	lsr	r5
    997c:	56 94       	lsr	r5
    997e:	56 94       	lsr	r5
    9980:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    9982:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    9984:	19 f0       	breq	.+6      	; 0x998c <ProcessSprites+0x8c>
    9986:	22 e0       	ldi	r18, 0x02	; 2
    9988:	29 83       	std	Y+1, r18	; 0x01
    998a:	02 c0       	rjmp	.+4      	; 0x9990 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    998c:	e1 e0       	ldi	r30, 0x01	; 1
    998e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    9990:	68 2e       	mov	r6, r24
    9992:	71 2c       	mov	r7, r1
    9994:	76 2c       	mov	r7, r6
    9996:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    9998:	69 0e       	add	r6, r25
    999a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    999c:	50 e0       	ldi	r21, 0x00	; 0
    999e:	54 2f       	mov	r21, r20
    99a0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    99a2:	ca 01       	movw	r24, r20
    99a4:	83 0f       	add	r24, r19
    99a6:	91 1d       	adc	r25, r1
    99a8:	9b 83       	std	Y+3, r25	; 0x03
    99aa:	8a 83       	std	Y+2, r24	; 0x02
    99ac:	e1 2c       	mov	r14, r1
    99ae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    99b0:	9e e1       	ldi	r25, 0x1E	; 30
    99b2:	59 9e       	mul	r5, r25
    99b4:	50 01       	movw	r10, r0
    99b6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    99b8:	9e 2c       	mov	r9, r14
    99ba:	88 24       	eor	r8, r8
    99bc:	43 2c       	mov	r4, r3
    99be:	c1 2c       	mov	r12, r1
    99c0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    99c2:	ed e1       	ldi	r30, 0x1D	; 29
    99c4:	e4 15       	cp	r30, r4
    99c6:	08 f4       	brcc	.+2      	; 0x99ca <ProcessSprites+0xca>
    99c8:	53 c0       	rjmp	.+166    	; 0x9a70 <ProcessSprites+0x170>
    99ca:	fb e1       	ldi	r31, 0x1B	; 27
    99cc:	f5 15       	cp	r31, r5
    99ce:	08 f4       	brcc	.+2      	; 0x99d2 <ProcessSprites+0xd2>
    99d0:	4f c0       	rjmp	.+158    	; 0x9a70 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    99d2:	c5 01       	movw	r24, r10
    99d4:	84 0d       	add	r24, r4
    99d6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    99d8:	9c 01       	movw	r18, r24
    99da:	20 5e       	subi	r18, 0xE0	; 224
    99dc:	3e 4f       	sbci	r19, 0xFE	; 254
    99de:	3e 83       	std	Y+6, r19	; 0x06
    99e0:	2d 83       	std	Y+5, r18	; 0x05
    99e2:	f9 01       	movw	r30, r18
    99e4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    99e6:	81 e0       	ldi	r24, 0x01	; 1
    99e8:	98 31       	cpi	r25, 0x18	; 24
    99ea:	08 f4       	brcc	.+2      	; 0x99ee <ProcessSprites+0xee>
    99ec:	80 e0       	ldi	r24, 0x00	; 0
    99ee:	21 e0       	ldi	r18, 0x01	; 1
    99f0:	30 91 d9 0a 	lds	r19, 0x0AD9
    99f4:	93 17       	cp	r25, r19
    99f6:	18 f0       	brcs	.+6      	; 0x99fe <ProcessSprites+0xfe>
    99f8:	20 e0       	ldi	r18, 0x00	; 0
    99fa:	88 23       	and	r24, r24
    99fc:	61 f1       	breq	.+88     	; 0x9a56 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    99fe:	60 91 d8 0a 	lds	r22, 0x0AD8
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    9a02:	68 31       	cpi	r22, 0x18	; 24
    9a04:	30 f5       	brcc	.+76     	; 0x9a52 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    9a06:	88 23       	and	r24, r24
    9a08:	31 f0       	breq	.+12     	; 0x9a16 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    9a0a:	88 ee       	ldi	r24, 0xE8	; 232
    9a0c:	89 0f       	add	r24, r25
    9a0e:	9c 83       	std	Y+4, r25	; 0x04
    9a10:	0e 94 77 3c 	call	0x78ee	; 0x78ee <CopyFlashTile>
    9a14:	06 c0       	rjmp	.+12     	; 0x9a22 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    9a16:	22 23       	and	r18, r18
    9a18:	29 f0       	breq	.+10     	; 0x9a24 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    9a1a:	89 2f       	mov	r24, r25
    9a1c:	9c 83       	std	Y+4, r25	; 0x04
    9a1e:	0e 94 06 3d 	call	0x7a0c	; 0x7a0c <CopyRamTile>
    9a22:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    9a24:	80 91 d8 0a 	lds	r24, 0x0AD8
    9a28:	e8 2f       	mov	r30, r24
    9a2a:	f0 e0       	ldi	r31, 0x00	; 0
    9a2c:	9f 01       	movw	r18, r30
    9a2e:	22 0f       	add	r18, r18
    9a30:	33 1f       	adc	r19, r19
    9a32:	e2 0f       	add	r30, r18
    9a34:	f3 1f       	adc	r31, r19
    9a36:	e0 57       	subi	r30, 0x70	; 112
    9a38:	f5 4f       	sbci	r31, 0xF5	; 245
    9a3a:	2d 81       	ldd	r18, Y+5	; 0x05
    9a3c:	3e 81       	ldd	r19, Y+6	; 0x06
    9a3e:	31 83       	std	Z+1, r19	; 0x01
    9a40:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    9a42:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    9a44:	f9 01       	movw	r30, r18
    9a46:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    9a48:	91 e0       	ldi	r25, 0x01	; 1
    9a4a:	98 0f       	add	r25, r24
    9a4c:	90 93 d8 0a 	sts	0x0AD8, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    9a50:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    9a52:	98 31       	cpi	r25, 0x18	; 24
    9a54:	68 f4       	brcc	.+26     	; 0x9a70 <ProcessSprites+0x170>
    9a56:	80 91 d9 0a 	lds	r24, 0x0AD9
    9a5a:	98 17       	cp	r25, r24
    9a5c:	48 f0       	brcs	.+18     	; 0x9a70 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    9a5e:	93 01       	movw	r18, r6
    9a60:	a6 01       	movw	r20, r12
    9a62:	48 0d       	add	r20, r8
    9a64:	59 1d       	adc	r21, r9
    9a66:	6a 81       	ldd	r22, Y+2	; 0x02
    9a68:	7b 81       	ldd	r23, Y+3	; 0x03
    9a6a:	89 2f       	mov	r24, r25
    9a6c:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <BlitSpritePart>
    9a70:	ff ef       	ldi	r31, 0xFF	; 255
    9a72:	cf 1a       	sub	r12, r31
    9a74:	df 0a       	sbc	r13, r31
    9a76:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    9a78:	c2 14       	cp	r12, r2
    9a7a:	08 f4       	brcc	.+2      	; 0x9a7e <ProcessSprites+0x17e>
    9a7c:	a2 cf       	rjmp	.-188    	; 0x99c2 <ProcessSprites+0xc2>
    9a7e:	2f ef       	ldi	r18, 0xFF	; 255
    9a80:	e2 1a       	sub	r14, r18
    9a82:	f2 0a       	sbc	r15, r18
    9a84:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    9a86:	99 81       	ldd	r25, Y+1	; 0x01
    9a88:	e9 16       	cp	r14, r25
    9a8a:	08 f4       	brcc	.+2      	; 0x9a8e <ProcessSprites+0x18e>
    9a8c:	91 cf       	rjmp	.-222    	; 0x99b0 <ProcessSprites+0xb0>
    9a8e:	0c 5f       	subi	r16, 0xFC	; 252
    9a90:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    9a92:	08 32       	cpi	r16, 0x28	; 40
    9a94:	11 05       	cpc	r17, r1
    9a96:	09 f0       	breq	.+2      	; 0x9a9a <ProcessSprites+0x19a>
    9a98:	57 cf       	rjmp	.-338    	; 0x9948 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    9a9a:	26 96       	adiw	r28, 0x06	; 6
    9a9c:	0f b6       	in	r0, 0x3f	; 63
    9a9e:	f8 94       	cli
    9aa0:	de bf       	out	0x3e, r29	; 62
    9aa2:	0f be       	out	0x3f, r0	; 63
    9aa4:	cd bf       	out	0x3d, r28	; 61
    9aa6:	df 91       	pop	r29
    9aa8:	cf 91       	pop	r28
    9aaa:	1f 91       	pop	r17
    9aac:	0f 91       	pop	r16
    9aae:	ff 90       	pop	r15
    9ab0:	ef 90       	pop	r14
    9ab2:	df 90       	pop	r13
    9ab4:	cf 90       	pop	r12
    9ab6:	bf 90       	pop	r11
    9ab8:	af 90       	pop	r10
    9aba:	9f 90       	pop	r9
    9abc:	8f 90       	pop	r8
    9abe:	7f 90       	pop	r7
    9ac0:	6f 90       	pop	r6
    9ac2:	5f 90       	pop	r5
    9ac4:	4f 90       	pop	r4
    9ac6:	3f 90       	pop	r3
    9ac8:	2f 90       	pop	r2
    9aca:	08 95       	ret

00009acc <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    9acc:	df 92       	push	r13
    9ace:	ef 92       	push	r14
    9ad0:	ff 92       	push	r15
    9ad2:	0f 93       	push	r16
    9ad4:	1f 93       	push	r17
    9ad6:	cf 93       	push	r28
    9ad8:	df 93       	push	r29
    9ada:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    9adc:	fb 01       	movw	r30, r22
    9ade:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    9ae0:	31 96       	adiw	r30, 0x01	; 1
    9ae2:	64 91       	lpm	r22, Z
    9ae4:	5f ef       	ldi	r21, 0xFF	; 255
    9ae6:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    9ae8:	24 2f       	mov	r18, r20
    9aea:	21 70       	andi	r18, 0x01	; 1
    9aec:	40 ff       	sbrs	r20, 0
    9aee:	04 c0       	rjmp	.+8      	; 0x9af8 <MapSprite2+0x2c>
			x=(mapWidth-1);
    9af0:	95 2f       	mov	r25, r21
			dx=-1;
    9af2:	ff 24       	eor	r15, r15
    9af4:	fa 94       	dec	r15
    9af6:	03 c0       	rjmp	.+6      	; 0x9afe <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    9af8:	ff 24       	eor	r15, r15
    9afa:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    9afc:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    9afe:	41 ff       	sbrs	r20, 1
    9b00:	05 c0       	rjmp	.+10     	; 0x9b0c <MapSprite2+0x40>
			y=(mapHeight-1);
    9b02:	7f ef       	ldi	r23, 0xFF	; 255
    9b04:	76 0f       	add	r23, r22
			dy=-1;
    9b06:	ee 24       	eor	r14, r14
    9b08:	ea 94       	dec	r14
    9b0a:	03 c0       	rjmp	.+6      	; 0x9b12 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    9b0c:	ee 24       	eor	r14, r14
    9b0e:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9b10:	70 e0       	ldi	r23, 0x00	; 0
    9b12:	21 11       	cpse	r18, r1
    9b14:	01 c0       	rjmp	.+2      	; 0x9b18 <MapSprite2+0x4c>
    9b16:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9b18:	00 e0       	ldi	r16, 0x00	; 0
    9b1a:	06 17       	cp	r16, r22
    9b1c:	09 f1       	breq	.+66     	; 0x9b60 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9b1e:	71 03       	mulsu	r23, r17
    9b20:	e0 01       	movw	r28, r0
    9b22:	11 24       	eor	r1, r1
    9b24:	d8 2e       	mov	r13, r24
    9b26:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    9b28:	8d 15       	cp	r24, r13
    9b2a:	b1 f0       	breq	.+44     	; 0x9b58 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9b2c:	9e 01       	movw	r18, r28
    9b2e:	29 0f       	add	r18, r25
    9b30:	31 1d       	adc	r19, r1
    9b32:	97 fd       	sbrc	r25, 7
    9b34:	3a 95       	dec	r19
    9b36:	2e 5f       	subi	r18, 0xFE	; 254
    9b38:	3f 4f       	sbci	r19, 0xFF	; 255
    9b3a:	fd 01       	movw	r30, r26
    9b3c:	e2 0f       	add	r30, r18
    9b3e:	f3 1f       	adc	r31, r19
    9b40:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9b42:	34 e0       	ldi	r19, 0x04	; 4
    9b44:	83 9f       	mul	r24, r19
    9b46:	f0 01       	movw	r30, r0
    9b48:	11 24       	eor	r1, r1
    9b4a:	e8 59       	subi	r30, 0x98	; 152
    9b4c:	fb 4f       	sbci	r31, 0xFB	; 251
    9b4e:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9b50:	8f 5f       	subi	r24, 0xFF	; 255
    9b52:	43 83       	std	Z+3, r20	; 0x03
    9b54:	9f 0d       	add	r25, r15
    9b56:	e8 cf       	rjmp	.-48     	; 0x9b28 <MapSprite2+0x5c>
    9b58:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9b5a:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9b5c:	95 2f       	mov	r25, r21
    9b5e:	dd cf       	rjmp	.-70     	; 0x9b1a <MapSprite2+0x4e>
	    }
	}
    9b60:	df 91       	pop	r29
    9b62:	cf 91       	pop	r28
    9b64:	1f 91       	pop	r17
    9b66:	0f 91       	pop	r16
    9b68:	ff 90       	pop	r15
    9b6a:	ef 90       	pop	r14
    9b6c:	df 90       	pop	r13
    9b6e:	08 95       	ret

00009b70 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    9b70:	0f 93       	push	r16
    9b72:	cf 93       	push	r28
    9b74:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    9b76:	30 e0       	ldi	r19, 0x00	; 0
    9b78:	30 17       	cp	r19, r16
    9b7a:	e1 f0       	breq	.+56     	; 0x9bb4 <MoveSprite+0x44>
    9b7c:	b4 2f       	mov	r27, r20
    9b7e:	a0 e2       	ldi	r26, 0x20	; 32
    9b80:	a4 0f       	add	r26, r20
    9b82:	78 2f       	mov	r23, r24
    9b84:	72 0f       	add	r23, r18
    9b86:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    9b88:	87 17       	cp	r24, r23
    9b8a:	81 f0       	breq	.+32     	; 0x9bac <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    9b8c:	c4 e0       	ldi	r28, 0x04	; 4
    9b8e:	8c 9f       	mul	r24, r28
    9b90:	f0 01       	movw	r30, r0
    9b92:	11 24       	eor	r1, r1
    9b94:	e8 59       	subi	r30, 0x98	; 152
    9b96:	fb 4f       	sbci	r31, 0xFB	; 251
    9b98:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    9b9a:	41 3e       	cpi	r20, 0xE1	; 225
    9b9c:	51 05       	cpc	r21, r1
    9b9e:	14 f0       	brlt	.+4      	; 0x9ba4 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    9ba0:	a1 83       	std	Z+1, r26	; 0x01
    9ba2:	01 c0       	rjmp	.+2      	; 0x9ba6 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9ba4:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    9ba6:	8f 5f       	subi	r24, 0xFF	; 255
    9ba8:	98 5f       	subi	r25, 0xF8	; 248
    9baa:	ee cf       	rjmp	.-36     	; 0x9b88 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    9bac:	3f 5f       	subi	r19, 0xFF	; 255
    9bae:	48 5f       	subi	r20, 0xF8	; 248
    9bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    9bb2:	e2 cf       	rjmp	.-60     	; 0x9b78 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    9bb4:	cf 91       	pop	r28
    9bb6:	0f 91       	pop	r16
    9bb8:	08 95       	ret

00009bba <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    9bba:	08 95       	ret

00009bbc <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9bbc:	e8 e6       	ldi	r30, 0x68	; 104
    9bbe:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9bc0:	80 ef       	ldi	r24, 0xF0	; 240
    9bc2:	80 83       	st	Z, r24
    9bc4:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    9bc6:	94 e0       	ldi	r25, 0x04	; 4
    9bc8:	e0 39       	cpi	r30, 0x90	; 144
    9bca:	f9 07       	cpc	r31, r25
    9bcc:	d1 f7       	brne	.-12     	; 0x9bc2 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    9bce:	10 92 d8 0a 	sts	0x0AD8, r1
		user_ram_tiles_c_tmp = 0U;
    9bd2:	10 92 da 0a 	sts	0x0ADA, r1
    9bd6:	08 95       	ret

00009bd8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9bd8:	4f 92       	push	r4
    9bda:	5f 92       	push	r5
    9bdc:	6f 92       	push	r6
    9bde:	7f 92       	push	r7
    9be0:	8f 92       	push	r8
    9be2:	9f 92       	push	r9
    9be4:	af 92       	push	r10
    9be6:	bf 92       	push	r11
    9be8:	cf 92       	push	r12
    9bea:	df 92       	push	r13
    9bec:	ef 92       	push	r14
    9bee:	ff 92       	push	r15
    9bf0:	0f 93       	push	r16
    9bf2:	1f 93       	push	r17
    9bf4:	cf 93       	push	r28
    9bf6:	df 93       	push	r29
    9bf8:	68 2e       	mov	r6, r24
    9bfa:	56 2e       	mov	r5, r22
    9bfc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9bfe:	fa 01       	movw	r30, r20
    9c00:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9c02:	31 96       	adiw	r30, 0x01	; 1
    9c04:	84 90       	lpm	r8, Z
    9c06:	c7 2c       	mov	r12, r7
    9c08:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9c0a:	00 e0       	ldi	r16, 0x00	; 0
    9c0c:	10 e0       	ldi	r17, 0x00	; 0
    9c0e:	91 2c       	mov	r9, r1
    9c10:	98 14       	cp	r9, r8
    9c12:	f1 f0       	breq	.+60     	; 0x9c50 <DrawMap+0x78>
    9c14:	c0 e0       	ldi	r28, 0x00	; 0
    9c16:	d0 e0       	ldi	r29, 0x00	; 0
    9c18:	58 01       	movw	r10, r16
    9c1a:	f2 e0       	ldi	r31, 0x02	; 2
    9c1c:	af 0e       	add	r10, r31
    9c1e:	b1 1c       	adc	r11, r1
    9c20:	49 2c       	mov	r4, r9
    9c22:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    9c24:	c7 15       	cp	r28, r7
    9c26:	80 f4       	brcc	.+32     	; 0x9c48 <DrawMap+0x70>
    9c28:	95 01       	movw	r18, r10
    9c2a:	2c 0f       	add	r18, r28
    9c2c:	3d 1f       	adc	r19, r29
    9c2e:	f7 01       	movw	r30, r14
    9c30:	e2 0f       	add	r30, r18
    9c32:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9c34:	24 91       	lpm	r18, Z
    9c36:	42 2f       	mov	r20, r18
    9c38:	50 e0       	ldi	r21, 0x00	; 0
    9c3a:	64 2d       	mov	r22, r4
    9c3c:	8c 2f       	mov	r24, r28
    9c3e:	86 0d       	add	r24, r6
    9c40:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <SetTile>
    9c44:	21 96       	adiw	r28, 0x01	; 1
    9c46:	ee cf       	rjmp	.-36     	; 0x9c24 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9c48:	93 94       	inc	r9
    9c4a:	0c 0d       	add	r16, r12
    9c4c:	1d 1d       	adc	r17, r13
    9c4e:	e0 cf       	rjmp	.-64     	; 0x9c10 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9c50:	df 91       	pop	r29
    9c52:	cf 91       	pop	r28
    9c54:	1f 91       	pop	r17
    9c56:	0f 91       	pop	r16
    9c58:	ff 90       	pop	r15
    9c5a:	ef 90       	pop	r14
    9c5c:	df 90       	pop	r13
    9c5e:	cf 90       	pop	r12
    9c60:	bf 90       	pop	r11
    9c62:	af 90       	pop	r10
    9c64:	9f 90       	pop	r9
    9c66:	8f 90       	pop	r8
    9c68:	7f 90       	pop	r7
    9c6a:	6f 90       	pop	r6
    9c6c:	5f 90       	pop	r5
    9c6e:	4f 90       	pop	r4
    9c70:	08 95       	ret

00009c72 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    9c72:	df 92       	push	r13
    9c74:	ef 92       	push	r14
    9c76:	ff 92       	push	r15
    9c78:	0f 93       	push	r16
    9c7a:	1f 93       	push	r17
    9c7c:	cf 93       	push	r28
    9c7e:	df 93       	push	r29
    9c80:	f6 2e       	mov	r15, r22
    9c82:	04 2f       	mov	r16, r20
    9c84:	d2 2e       	mov	r13, r18
    9c86:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    9c88:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    9c8a:	8a e0       	ldi	r24, 0x0A	; 10
    9c8c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    9c8e:	01 11       	cpse	r16, r1
    9c90:	02 c0       	rjmp	.+4      	; 0x9c96 <PrintByte+0x24>
    9c92:	11 11       	cpse	r17, r1
    9c94:	07 c0       	rjmp	.+14     	; 0x9ca4 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    9c96:	80 2f       	mov	r24, r16
    9c98:	6e 2d       	mov	r22, r14
    9c9a:	0e 94 3b 6f 	call	0xde76	; 0xde76 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    9c9e:	40 e1       	ldi	r20, 0x10	; 16
    9ca0:	49 0f       	add	r20, r25
    9ca2:	05 c0       	rjmp	.+10     	; 0x9cae <PrintByte+0x3c>
		}else{
			if(zeropad){
    9ca4:	dd 20       	and	r13, r13
    9ca6:	11 f0       	breq	.+4      	; 0x9cac <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    9ca8:	40 e1       	ldi	r20, 0x10	; 16
    9caa:	01 c0       	rjmp	.+2      	; 0x9cae <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    9cac:	40 e0       	ldi	r20, 0x00	; 0
    9cae:	6f 2d       	mov	r22, r15
    9cb0:	8c 2f       	mov	r24, r28
    9cb2:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <SetFont>
			}
		}
		val=val/10;
    9cb6:	80 2f       	mov	r24, r16
    9cb8:	6e 2d       	mov	r22, r14
    9cba:	0e 94 3b 6f 	call	0xde76	; 0xde76 <__udivmodqi4>
    9cbe:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    9cc0:	1f 5f       	subi	r17, 0xFF	; 255
    9cc2:	21 97       	sbiw	r28, 0x01	; 1
    9cc4:	13 30       	cpi	r17, 0x03	; 3
    9cc6:	19 f7       	brne	.-58     	; 0x9c8e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    9cc8:	df 91       	pop	r29
    9cca:	cf 91       	pop	r28
    9ccc:	1f 91       	pop	r17
    9cce:	0f 91       	pop	r16
    9cd0:	ff 90       	pop	r15
    9cd2:	ef 90       	pop	r14
    9cd4:	df 90       	pop	r13
    9cd6:	08 95       	ret

00009cd8 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    9cd8:	0f 93       	push	r16
    9cda:	1f 93       	push	r17
    9cdc:	cf 93       	push	r28
    9cde:	df 93       	push	r29
    9ce0:	06 2f       	mov	r16, r22
    9ce2:	c4 2f       	mov	r28, r20
    9ce4:	d5 2f       	mov	r29, r21
    9ce6:	18 2f       	mov	r17, r24
    9ce8:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    9cea:	fe 01       	movw	r30, r28
    9cec:	44 91       	lpm	r20, Z
		if(c!=0){
    9cee:	44 23       	and	r20, r20
    9cf0:	49 f0       	breq	.+18     	; 0x9d04 <Print+0x2c>
			c=((c&127)-32);			
    9cf2:	4f 77       	andi	r20, 0x7F	; 127
    9cf4:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    9cf6:	60 2f       	mov	r22, r16
    9cf8:	8c 2f       	mov	r24, r28
    9cfa:	81 0f       	add	r24, r17
    9cfc:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <SetFont>
    9d00:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9d02:	f3 cf       	rjmp	.-26     	; 0x9cea <Print+0x12>
	
}
    9d04:	df 91       	pop	r29
    9d06:	cf 91       	pop	r28
    9d08:	1f 91       	pop	r17
    9d0a:	0f 91       	pop	r16
    9d0c:	08 95       	ret

00009d0e <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    9d0e:	40 52       	subi	r20, 0x20	; 32
    9d10:	0c 94 c7 3f 	jmp	0x7f8e	; 0x7f8e <SetFont>

00009d14 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9d14:	0f 93       	push	r16
    9d16:	1f 93       	push	r17
    9d18:	cf 93       	push	r28
    9d1a:	df 93       	push	r29
    9d1c:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9d1e:	c0 e0       	ldi	r28, 0x00	; 0
    9d20:	d0 e0       	ldi	r29, 0x00	; 0
    9d22:	c0 17       	cp	r28, r16
    9d24:	d1 07       	cpc	r29, r17
    9d26:	44 f4       	brge	.+16     	; 0x9d38 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9d28:	0e 94 e1 3f 	call	0x7fc2	; 0x7fc2 <GetVsyncFlag>
    9d2c:	88 23       	and	r24, r24
    9d2e:	e1 f3       	breq	.-8      	; 0x9d28 <WaitVsync+0x14>
		ClearVsyncFlag();		
    9d30:	0e 94 e5 3f 	call	0x7fca	; 0x7fca <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9d34:	21 96       	adiw	r28, 0x01	; 1
    9d36:	f5 cf       	rjmp	.-22     	; 0x9d22 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9d38:	df 91       	pop	r29
    9d3a:	cf 91       	pop	r28
    9d3c:	1f 91       	pop	r17
    9d3e:	0f 91       	pop	r16
    9d40:	08 95       	ret

00009d42 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9d42:	80 93 ba 0b 	sts	0x0BBA, r24
	currFadeFrame=0;
    9d46:	10 92 bd 0b 	sts	0x0BBD, r1
	fadeActive=true;
    9d4a:	81 e0       	ldi	r24, 0x01	; 1
    9d4c:	80 93 bc 0b 	sts	0x0BBC, r24
		
	if(blocking){
    9d50:	66 23       	and	r22, r22
    9d52:	21 f0       	breq	.+8      	; 0x9d5c <doFade+0x1a>
		while(fadeActive==true);
    9d54:	80 91 bc 0b 	lds	r24, 0x0BBC
    9d58:	81 11       	cpse	r24, r1
    9d5a:	fc cf       	rjmp	.-8      	; 0x9d54 <doFade+0x12>
    9d5c:	08 95       	ret

00009d5e <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9d5e:	81 11       	cpse	r24, r1
    9d60:	03 c0       	rjmp	.+6      	; 0x9d68 <FadeIn+0xa>
		DDRC=0xff;
    9d62:	8f ef       	ldi	r24, 0xFF	; 255
    9d64:	87 b9       	out	0x07, r24	; 7
		return;
    9d66:	08 95       	ret
	}
	fadeStep=1;
    9d68:	91 e0       	ldi	r25, 0x01	; 1
    9d6a:	90 93 be 0b 	sts	0x0BBE, r25
	fadeDir=1;
    9d6e:	90 93 bb 0b 	sts	0x0BBB, r25
	doFade(speed,blocking);
    9d72:	0c 94 a1 4e 	jmp	0x9d42	; 0x9d42 <doFade>

00009d76 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9d76:	81 11       	cpse	r24, r1
    9d78:	02 c0       	rjmp	.+4      	; 0x9d7e <FadeOut+0x8>
		DDRC=0;
    9d7a:	17 b8       	out	0x07, r1	; 7
		return;
    9d7c:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9d7e:	9c e0       	ldi	r25, 0x0C	; 12
    9d80:	90 93 be 0b 	sts	0x0BBE, r25
	fadeDir=-1;
    9d84:	9f ef       	ldi	r25, 0xFF	; 255
    9d86:	90 93 bb 0b 	sts	0x0BBB, r25
	doFade(speed,blocking);
    9d8a:	0c 94 a1 4e 	jmp	0x9d42	; 0x9d42 <doFade>

00009d8e <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9d8e:	80 91 bc 0b 	lds	r24, 0x0BBC
    9d92:	88 23       	and	r24, r24
    9d94:	01 f1       	breq	.+64     	; 0x9dd6 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9d96:	80 91 bd 0b 	lds	r24, 0x0BBD
    9d9a:	81 11       	cpse	r24, r1
    9d9c:	19 c0       	rjmp	.+50     	; 0x9dd0 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9d9e:	80 91 ba 0b 	lds	r24, 0x0BBA
    9da2:	80 93 bd 0b 	sts	0x0BBD, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9da6:	e0 91 be 0b 	lds	r30, 0x0BBE
    9daa:	f0 e0       	ldi	r31, 0x00	; 0
    9dac:	e5 52       	subi	r30, 0x25	; 37
    9dae:	ff 4f       	sbci	r31, 0xFF	; 255
    9db0:	e4 91       	lpm	r30, Z
    9db2:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9db4:	90 91 bb 0b 	lds	r25, 0x0BBB
    9db8:	80 91 be 0b 	lds	r24, 0x0BBE
    9dbc:	89 0f       	add	r24, r25
    9dbe:	80 93 be 0b 	sts	0x0BBE, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9dc2:	88 23       	and	r24, r24
    9dc4:	11 f0       	breq	.+4      	; 0x9dca <ProcessFading+0x3c>
    9dc6:	8d 30       	cpi	r24, 0x0D	; 13
    9dc8:	31 f4       	brne	.+12     	; 0x9dd6 <ProcessFading+0x48>
				fadeActive=false;
    9dca:	10 92 bc 0b 	sts	0x0BBC, r1
    9dce:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9dd0:	81 50       	subi	r24, 0x01	; 1
    9dd2:	80 93 bd 0b 	sts	0x0BBD, r24
    9dd6:	08 95       	ret

00009dd8 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    9dd8:	0c 94 c7 4e 	jmp	0x9d8e	; 0x9d8e <ProcessFading>

00009ddc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    9ddc:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9dde:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9de0:	93 81       	ldd	r25, Z+3	; 0x03
    9de2:	9f 5f       	subi	r25, 0xFF	; 255
    9de4:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9de6:	22 81       	ldd	r18, Z+2	; 0x02
    9de8:	80 81       	ld	r24, Z
    9dea:	92 17       	cp	r25, r18
    9dec:	38 f4       	brcc	.+14     	; 0x9dfc <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    9dee:	e8 0f       	add	r30, r24
    9df0:	f1 1d       	adc	r31, r1
    9df2:	e8 0f       	add	r30, r24
    9df4:	f1 1d       	adc	r31, r1
    9df6:	86 81       	ldd	r24, Z+6	; 0x06
    9df8:	97 81       	ldd	r25, Z+7	; 0x07
    9dfa:	08 95       	ret
	}
	anim->frame_count = 0;
    9dfc:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9dfe:	90 e0       	ldi	r25, 0x00	; 0
    9e00:	01 96       	adiw	r24, 0x01	; 1
    9e02:	61 81       	ldd	r22, Z+1	; 0x01
    9e04:	70 e0       	ldi	r23, 0x00	; 0
    9e06:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    9e0a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9e0c:	81 11       	cpse	r24, r1
    9e0e:	02 c0       	rjmp	.+4      	; 0x9e14 <LBGetNextFrame+0x38>
    9e10:	21 e0       	ldi	r18, 0x01	; 1
    9e12:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    9e14:	99 27       	eor	r25, r25
    9e16:	03 96       	adiw	r24, 0x03	; 3
    9e18:	88 0f       	add	r24, r24
    9e1a:	99 1f       	adc	r25, r25
    9e1c:	e8 0f       	add	r30, r24
    9e1e:	f9 1f       	adc	r31, r25
    9e20:	80 81       	ld	r24, Z
    9e22:	91 81       	ldd	r25, Z+1	; 0x01
}
    9e24:	08 95       	ret

00009e26 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    9e26:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9e28:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9e2a:	93 81       	ldd	r25, Z+3	; 0x03
    9e2c:	9f 5f       	subi	r25, 0xFF	; 255
    9e2e:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9e30:	22 81       	ldd	r18, Z+2	; 0x02
    9e32:	80 81       	ld	r24, Z
    9e34:	92 17       	cp	r25, r18
    9e36:	e0 f0       	brcs	.+56     	; 0x9e70 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    9e38:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    9e3a:	95 81       	ldd	r25, Z+5	; 0x05
    9e3c:	99 23       	and	r25, r25
    9e3e:	49 f0       	breq	.+18     	; 0x9e52 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    9e40:	81 50       	subi	r24, 0x01	; 1
    9e42:	10 f0       	brcs	.+4      	; 0x9e48 <LBGetNextFrameReverse+0x22>
    9e44:	80 83       	st	Z, r24
    9e46:	13 c0       	rjmp	.+38     	; 0x9e6e <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    9e48:	10 82       	st	Z, r1
			anim->looped = 1;
    9e4a:	81 e0       	ldi	r24, 0x01	; 1
    9e4c:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    9e4e:	15 82       	std	Z+5, r1	; 0x05
    9e50:	0e c0       	rjmp	.+28     	; 0x9e6e <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9e52:	21 81       	ldd	r18, Z+1	; 0x01
    9e54:	90 e0       	ldi	r25, 0x00	; 0
    9e56:	01 96       	adiw	r24, 0x01	; 1
    9e58:	62 2f       	mov	r22, r18
    9e5a:	70 e0       	ldi	r23, 0x00	; 0
    9e5c:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    9e60:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    9e62:	81 11       	cpse	r24, r1
    9e64:	04 c0       	rjmp	.+8      	; 0x9e6e <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    9e66:	81 e0       	ldi	r24, 0x01	; 1
    9e68:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    9e6a:	21 50       	subi	r18, 0x01	; 1
    9e6c:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    9e6e:	80 81       	ld	r24, Z
    9e70:	e8 0f       	add	r30, r24
    9e72:	f1 1d       	adc	r31, r1
    9e74:	e8 0f       	add	r30, r24
    9e76:	f1 1d       	adc	r31, r1
    9e78:	86 81       	ldd	r24, Z+6	; 0x06
    9e7a:	97 81       	ldd	r25, Z+7	; 0x07
}
    9e7c:	08 95       	ret

00009e7e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9e7e:	0f 93       	push	r16
    9e80:	1f 93       	push	r17
    9e82:	cf 93       	push	r28
    9e84:	df 93       	push	r29
    9e86:	1f 92       	push	r1
    9e88:	cd b7       	in	r28, 0x3d	; 61
    9e8a:	de b7       	in	r29, 0x3e	; 62
    9e8c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    9e8e:	86 2f       	mov	r24, r22
    9e90:	69 83       	std	Y+1, r22	; 0x01
    9e92:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <ReadJoypad>
    9e96:	d8 01       	movw	r26, r16
    9e98:	15 96       	adiw	r26, 0x05	; 5
    9e9a:	9c 93       	st	X, r25
    9e9c:	8e 93       	st	-X, r24
    9e9e:	14 97       	sbiw	r26, 0x04	; 4
    9ea0:	69 81       	ldd	r22, Y+1	; 0x01
    9ea2:	e6 2f       	mov	r30, r22
    9ea4:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9ea6:	00 97       	sbiw	r24, 0x00	; 0
    9ea8:	51 f0       	breq	.+20     	; 0x9ebe <LBGetJoyPadState+0x40>
    9eaa:	df 01       	movw	r26, r30
    9eac:	aa 0f       	add	r26, r26
    9eae:	bb 1f       	adc	r27, r27
    9eb0:	ae 5c       	subi	r26, 0xCE	; 206
    9eb2:	b4 4f       	sbci	r27, 0xF4	; 244
    9eb4:	2d 91       	ld	r18, X+
    9eb6:	3c 91       	ld	r19, X
    9eb8:	82 17       	cp	r24, r18
    9eba:	93 07       	cpc	r25, r19
    9ebc:	21 f0       	breq	.+8      	; 0x9ec6 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9ebe:	d8 01       	movw	r26, r16
    9ec0:	16 96       	adiw	r26, 0x06	; 6
    9ec2:	1c 92       	st	X, r1
    9ec4:	07 c0       	rjmp	.+14     	; 0x9ed4 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9ec6:	d8 01       	movw	r26, r16
    9ec8:	16 96       	adiw	r26, 0x06	; 6
    9eca:	2c 91       	ld	r18, X
    9ecc:	16 97       	sbiw	r26, 0x06	; 6
    9ece:	2f 5f       	subi	r18, 0xFF	; 255
    9ed0:	16 96       	adiw	r26, 0x06	; 6
    9ed2:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9ed4:	ee 0f       	add	r30, r30
    9ed6:	ff 1f       	adc	r31, r31
    9ed8:	ee 5c       	subi	r30, 0xCE	; 206
    9eda:	f4 4f       	sbci	r31, 0xF4	; 244
    9edc:	20 81       	ld	r18, Z
    9ede:	31 81       	ldd	r19, Z+1	; 0x01
    9ee0:	a9 01       	movw	r20, r18
    9ee2:	40 95       	com	r20
    9ee4:	50 95       	com	r21
    9ee6:	48 23       	and	r20, r24
    9ee8:	59 23       	and	r21, r25
    9eea:	d8 01       	movw	r26, r16
    9eec:	11 96       	adiw	r26, 0x01	; 1
    9eee:	5c 93       	st	X, r21
    9ef0:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9ef2:	ac 01       	movw	r20, r24
    9ef4:	40 95       	com	r20
    9ef6:	50 95       	com	r21
    9ef8:	24 23       	and	r18, r20
    9efa:	35 23       	and	r19, r21
    9efc:	13 96       	adiw	r26, 0x03	; 3
    9efe:	3c 93       	st	X, r19
    9f00:	2e 93       	st	-X, r18
    9f02:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9f04:	91 83       	std	Z+1, r25	; 0x01
    9f06:	80 83       	st	Z, r24
}
    9f08:	0f 90       	pop	r0
    9f0a:	df 91       	pop	r29
    9f0c:	cf 91       	pop	r28
    9f0e:	1f 91       	pop	r17
    9f10:	0f 91       	pop	r16
    9f12:	08 95       	ret

00009f14 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    9f14:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    9f16:	fb 01       	movw	r30, r22
    9f18:	2e 2f       	mov	r18, r30
    9f1a:	23 1b       	sub	r18, r19
    9f1c:	24 17       	cp	r18, r20
    9f1e:	28 f4       	brcc	.+10     	; 0x9f2a <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    9f20:	21 91       	ld	r18, Z+
    9f22:	dc 01       	movw	r26, r24
    9f24:	2d 93       	st	X+, r18
    9f26:	cd 01       	movw	r24, r26
    9f28:	f7 cf       	rjmp	.-18     	; 0x9f18 <LBCopyChars+0x4>
	}
}
    9f2a:	08 95       	ret

00009f2c <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    9f2c:	af 92       	push	r10
    9f2e:	bf 92       	push	r11
    9f30:	cf 92       	push	r12
    9f32:	df 92       	push	r13
    9f34:	ef 92       	push	r14
    9f36:	ff 92       	push	r15
    9f38:	0f 93       	push	r16
    9f3a:	1f 93       	push	r17
    9f3c:	cf 93       	push	r28
    9f3e:	df 93       	push	r29
    9f40:	1f 92       	push	r1
    9f42:	cd b7       	in	r28, 0x3d	; 61
    9f44:	de b7       	in	r29, 0x3e	; 62
    9f46:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    9f48:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    9f4a:	c6 2e       	mov	r12, r22
    9f4c:	d1 2c       	mov	r13, r1
    9f4e:	90 e0       	ldi	r25, 0x00	; 0
    9f50:	5c 01       	movw	r10, r24
    9f52:	a4 1a       	sub	r10, r20
    9f54:	b5 0a       	sbc	r11, r21
    9f56:	80 2f       	mov	r24, r16
    9f58:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    9f5a:	82 17       	cp	r24, r18
    9f5c:	60 f4       	brcc	.+24     	; 0x9f76 <LBPrintStr+0x4a>
    9f5e:	c5 01       	movw	r24, r10
    9f60:	80 0f       	add	r24, r16
    9f62:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    9f64:	f8 01       	movw	r30, r16
    9f66:	41 91       	ld	r20, Z+
    9f68:	8f 01       	movw	r16, r30
    9f6a:	b6 01       	movw	r22, r12
    9f6c:	29 83       	std	Y+1, r18	; 0x01
    9f6e:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
    9f72:	29 81       	ldd	r18, Y+1	; 0x01
    9f74:	f0 cf       	rjmp	.-32     	; 0x9f56 <LBPrintStr+0x2a>
	}
}
    9f76:	0f 90       	pop	r0
    9f78:	df 91       	pop	r29
    9f7a:	cf 91       	pop	r28
    9f7c:	1f 91       	pop	r17
    9f7e:	0f 91       	pop	r16
    9f80:	ff 90       	pop	r15
    9f82:	ef 90       	pop	r14
    9f84:	df 90       	pop	r13
    9f86:	cf 90       	pop	r12
    9f88:	bf 90       	pop	r11
    9f8a:	af 90       	pop	r10
    9f8c:	08 95       	ret

00009f8e <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9f8e:	af 92       	push	r10
    9f90:	cf 92       	push	r12
    9f92:	ef 92       	push	r14
    9f94:	ff 92       	push	r15
    9f96:	0f 93       	push	r16
    9f98:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9f9a:	70 e0       	ldi	r23, 0x00	; 0
    9f9c:	f1 2c       	mov	r15, r1
    9f9e:	fb 01       	movw	r30, r22
    9fa0:	e2 0f       	add	r30, r18
    9fa2:	f1 1d       	adc	r31, r1
    9fa4:	ee 16       	cp	r14, r30
    9fa6:	ff 06       	cpc	r15, r31
    9fa8:	a4 f4       	brge	.+40     	; 0x9fd2 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9faa:	ea 0c       	add	r14, r10
    9fac:	f1 1c       	adc	r15, r1
    9fae:	6e 15       	cp	r22, r14
    9fb0:	7f 05       	cpc	r23, r15
    9fb2:	7c f4       	brge	.+30     	; 0x9fd2 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9fb4:	28 2f       	mov	r18, r24
    9fb6:	30 e0       	ldi	r19, 0x00	; 0
    9fb8:	10 e0       	ldi	r17, 0x00	; 0
    9fba:	c9 01       	movw	r24, r18
    9fbc:	84 0f       	add	r24, r20
    9fbe:	91 1d       	adc	r25, r1
    9fc0:	08 17       	cp	r16, r24
    9fc2:	19 07       	cpc	r17, r25
    9fc4:	34 f4       	brge	.+12     	; 0x9fd2 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9fc6:	0c 0d       	add	r16, r12
    9fc8:	11 1d       	adc	r17, r1
    9fca:	81 e0       	ldi	r24, 0x01	; 1
    9fcc:	20 17       	cp	r18, r16
    9fce:	31 07       	cpc	r19, r17
    9fd0:	0c f0       	brlt	.+2      	; 0x9fd4 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9fd2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9fd4:	1f 91       	pop	r17
    9fd6:	0f 91       	pop	r16
    9fd8:	ff 90       	pop	r15
    9fda:	ef 90       	pop	r14
    9fdc:	cf 90       	pop	r12
    9fde:	af 90       	pop	r10
    9fe0:	08 95       	ret

00009fe2 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    9fe2:	2f 92       	push	r2
    9fe4:	3f 92       	push	r3
    9fe6:	4f 92       	push	r4
    9fe8:	5f 92       	push	r5
    9fea:	6f 92       	push	r6
    9fec:	7f 92       	push	r7
    9fee:	8f 92       	push	r8
    9ff0:	9f 92       	push	r9
    9ff2:	af 92       	push	r10
    9ff4:	bf 92       	push	r11
    9ff6:	cf 92       	push	r12
    9ff8:	df 92       	push	r13
    9ffa:	ef 92       	push	r14
    9ffc:	ff 92       	push	r15
    9ffe:	0f 93       	push	r16
    a000:	1f 93       	push	r17
    a002:	cf 93       	push	r28
    a004:	df 93       	push	r29
    a006:	00 d0       	rcall	.+0      	; 0xa008 <LBLineIntersect+0x26>
    a008:	00 d0       	rcall	.+0      	; 0xa00a <LBLineIntersect+0x28>
    a00a:	cd b7       	in	r28, 0x3d	; 61
    a00c:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a00e:	f1 2c       	mov	r15, r1
    a010:	8a 2c       	mov	r8, r10
    a012:	91 2c       	mov	r9, r1
    a014:	8e 18       	sub	r8, r14
    a016:	9f 08       	sbc	r9, r15
    a018:	a8 2e       	mov	r10, r24
    a01a:	b1 2c       	mov	r11, r1
    a01c:	24 2e       	mov	r2, r20
    a01e:	31 2c       	mov	r3, r1
    a020:	2a 18       	sub	r2, r10
    a022:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a024:	10 e0       	ldi	r17, 0x00	; 0
    a026:	d1 2c       	mov	r13, r1
    a028:	c0 1a       	sub	r12, r16
    a02a:	d1 0a       	sbc	r13, r17
    a02c:	46 2f       	mov	r20, r22
    a02e:	50 e0       	ldi	r21, 0x00	; 0
    a030:	5c 83       	std	Y+4, r21	; 0x04
    a032:	4b 83       	std	Y+3, r20	; 0x03
    a034:	82 2f       	mov	r24, r18
    a036:	90 e0       	ldi	r25, 0x00	; 0
    a038:	9a 83       	std	Y+2, r25	; 0x02
    a03a:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a03c:	82 9c       	mul	r8, r2
    a03e:	90 01       	movw	r18, r0
    a040:	83 9c       	mul	r8, r3
    a042:	30 0d       	add	r19, r0
    a044:	92 9c       	mul	r9, r2
    a046:	30 0d       	add	r19, r0
    a048:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a04a:	ca 01       	movw	r24, r20
    a04c:	e9 81       	ldd	r30, Y+1	; 0x01
    a04e:	fa 81       	ldd	r31, Y+2	; 0x02
    a050:	8e 1b       	sub	r24, r30
    a052:	9f 0b       	sbc	r25, r31
    a054:	c8 9e       	mul	r12, r24
    a056:	b0 01       	movw	r22, r0
    a058:	c9 9e       	mul	r12, r25
    a05a:	70 0d       	add	r23, r0
    a05c:	d8 9e       	mul	r13, r24
    a05e:	70 0d       	add	r23, r0
    a060:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a062:	62 0f       	add	r22, r18
    a064:	73 1f       	adc	r23, r19
    a066:	88 27       	eor	r24, r24
    a068:	77 fd       	sbrc	r23, 7
    a06a:	80 95       	com	r24
    a06c:	98 2f       	mov	r25, r24
    a06e:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    a072:	2b 01       	movw	r4, r22
    a074:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a076:	20 e0       	ldi	r18, 0x00	; 0
    a078:	30 e0       	ldi	r19, 0x00	; 0
    a07a:	a9 01       	movw	r20, r18
    a07c:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    a080:	88 23       	and	r24, r24
    a082:	09 f4       	brne	.+2      	; 0xa086 <LBLineIntersect+0xa4>
    a084:	6c c0       	rjmp	.+216    	; 0xa15e <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a086:	4b 81       	ldd	r20, Y+3	; 0x03
    a088:	5c 81       	ldd	r21, Y+4	; 0x04
    a08a:	4e 19       	sub	r20, r14
    a08c:	5f 09       	sbc	r21, r15
    a08e:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a090:	0a 19       	sub	r16, r10
    a092:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a094:	c4 9e       	mul	r12, r20
    a096:	c0 01       	movw	r24, r0
    a098:	c5 9e       	mul	r12, r21
    a09a:	90 0d       	add	r25, r0
    a09c:	d4 9e       	mul	r13, r20
    a09e:	90 0d       	add	r25, r0
    a0a0:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a0a2:	80 9e       	mul	r8, r16
    a0a4:	b0 01       	movw	r22, r0
    a0a6:	81 9e       	mul	r8, r17
    a0a8:	70 0d       	add	r23, r0
    a0aa:	90 9e       	mul	r9, r16
    a0ac:	70 0d       	add	r23, r0
    a0ae:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a0b0:	68 0f       	add	r22, r24
    a0b2:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a0b4:	88 27       	eor	r24, r24
    a0b6:	77 fd       	sbrc	r23, 7
    a0b8:	80 95       	com	r24
    a0ba:	98 2f       	mov	r25, r24
    a0bc:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a0c0:	a3 01       	movw	r20, r6
    a0c2:	92 01       	movw	r18, r4
    a0c4:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__divsf3>
    a0c8:	4b 01       	movw	r8, r22
    a0ca:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a0cc:	20 e0       	ldi	r18, 0x00	; 0
    a0ce:	30 e0       	ldi	r19, 0x00	; 0
    a0d0:	a9 01       	movw	r20, r18
    a0d2:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    a0d6:	87 fd       	sbrc	r24, 7
    a0d8:	42 c0       	rjmp	.+132    	; 0xa15e <LBLineIntersect+0x17c>
    a0da:	20 e0       	ldi	r18, 0x00	; 0
    a0dc:	30 e0       	ldi	r19, 0x00	; 0
    a0de:	40 e8       	ldi	r20, 0x80	; 128
    a0e0:	5f e3       	ldi	r21, 0x3F	; 63
    a0e2:	c5 01       	movw	r24, r10
    a0e4:	b4 01       	movw	r22, r8
    a0e6:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    a0ea:	18 16       	cp	r1, r24
    a0ec:	c4 f1       	brlt	.+112    	; 0xa15e <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a0ee:	2e 9c       	mul	r2, r14
    a0f0:	b0 01       	movw	r22, r0
    a0f2:	2f 9c       	mul	r2, r15
    a0f4:	70 0d       	add	r23, r0
    a0f6:	3e 9c       	mul	r3, r14
    a0f8:	70 0d       	add	r23, r0
    a0fa:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a0fc:	29 81       	ldd	r18, Y+1	; 0x01
    a0fe:	3a 81       	ldd	r19, Y+2	; 0x02
    a100:	8b 81       	ldd	r24, Y+3	; 0x03
    a102:	9c 81       	ldd	r25, Y+4	; 0x04
    a104:	28 1b       	sub	r18, r24
    a106:	39 0b       	sbc	r19, r25
    a108:	20 9f       	mul	r18, r16
    a10a:	c0 01       	movw	r24, r0
    a10c:	21 9f       	mul	r18, r17
    a10e:	90 0d       	add	r25, r0
    a110:	30 9f       	mul	r19, r16
    a112:	90 0d       	add	r25, r0
    a114:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a116:	68 0f       	add	r22, r24
    a118:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a11a:	88 27       	eor	r24, r24
    a11c:	77 fd       	sbrc	r23, 7
    a11e:	80 95       	com	r24
    a120:	98 2f       	mov	r25, r24
    a122:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a126:	a3 01       	movw	r20, r6
    a128:	92 01       	movw	r18, r4
    a12a:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__divsf3>
    a12e:	6b 01       	movw	r12, r22
    a130:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a132:	20 e0       	ldi	r18, 0x00	; 0
    a134:	30 e0       	ldi	r19, 0x00	; 0
    a136:	a9 01       	movw	r20, r18
    a138:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    a13c:	87 fd       	sbrc	r24, 7
    a13e:	0f c0       	rjmp	.+30     	; 0xa15e <LBLineIntersect+0x17c>
    a140:	11 e0       	ldi	r17, 0x01	; 1
    a142:	20 e0       	ldi	r18, 0x00	; 0
    a144:	30 e0       	ldi	r19, 0x00	; 0
    a146:	40 e8       	ldi	r20, 0x80	; 128
    a148:	5f e3       	ldi	r21, 0x3F	; 63
    a14a:	c7 01       	movw	r24, r14
    a14c:	b6 01       	movw	r22, r12
    a14e:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    a152:	18 16       	cp	r1, r24
    a154:	0c f0       	brlt	.+2      	; 0xa158 <LBLineIntersect+0x176>
    a156:	10 e0       	ldi	r17, 0x00	; 0
    a158:	81 e0       	ldi	r24, 0x01	; 1
    a15a:	81 27       	eor	r24, r17
    a15c:	01 c0       	rjmp	.+2      	; 0xa160 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a15e:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    a160:	0f 90       	pop	r0
    a162:	0f 90       	pop	r0
    a164:	0f 90       	pop	r0
    a166:	0f 90       	pop	r0
    a168:	df 91       	pop	r29
    a16a:	cf 91       	pop	r28
    a16c:	1f 91       	pop	r17
    a16e:	0f 91       	pop	r16
    a170:	ff 90       	pop	r15
    a172:	ef 90       	pop	r14
    a174:	df 90       	pop	r13
    a176:	cf 90       	pop	r12
    a178:	bf 90       	pop	r11
    a17a:	af 90       	pop	r10
    a17c:	9f 90       	pop	r9
    a17e:	8f 90       	pop	r8
    a180:	7f 90       	pop	r7
    a182:	6f 90       	pop	r6
    a184:	5f 90       	pop	r5
    a186:	4f 90       	pop	r4
    a188:	3f 90       	pop	r3
    a18a:	2f 90       	pop	r2
    a18c:	08 95       	ret

0000a18e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a18e:	1f 93       	push	r17
    a190:	cf 93       	push	r28
    a192:	df 93       	push	r29
    a194:	1f 92       	push	r1
    a196:	cd b7       	in	r28, 0x3d	; 61
    a198:	de b7       	in	r29, 0x3e	; 62
    a19a:	18 2f       	mov	r17, r24
    u8 tmp = GetPrngNumber(0) % 256;
    a19c:	80 e0       	ldi	r24, 0x00	; 0
    a19e:	90 e0       	ldi	r25, 0x00	; 0
    a1a0:	69 83       	std	Y+1, r22	; 0x01
    a1a2:	0e 94 b9 41 	call	0x8372	; 0x8372 <GetPrngNumber>
    a1a6:	99 27       	eor	r25, r25
    return ((tmp) % (to - from + 1)) + from;
    a1a8:	69 81       	ldd	r22, Y+1	; 0x01
    a1aa:	70 e0       	ldi	r23, 0x00	; 0
    a1ac:	61 1b       	sub	r22, r17
    a1ae:	71 09       	sbc	r23, r1
    a1b0:	6f 5f       	subi	r22, 0xFF	; 255
    a1b2:	7f 4f       	sbci	r23, 0xFF	; 255
    a1b4:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
}
    a1b8:	81 0f       	add	r24, r17
    a1ba:	0f 90       	pop	r0
    a1bc:	df 91       	pop	r29
    a1be:	cf 91       	pop	r28
    a1c0:	1f 91       	pop	r17
    a1c2:	08 95       	ret

0000a1c4 <LBWaitSeconds>:
	WaitUs(micro_seconds);
#endif
}

void LBWaitSeconds(u8 seconds)
{
    a1c4:	cf 93       	push	r28
    a1c6:	df 93       	push	r29
    a1c8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a1ca:	c0 e0       	ldi	r28, 0x00	; 0
    a1cc:	cd 17       	cp	r28, r29
    a1ce:	31 f0       	breq	.+12     	; 0xa1dc <LBWaitSeconds+0x18>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    a1d0:	8f ef       	ldi	r24, 0xFF	; 255
    a1d2:	9f ef       	ldi	r25, 0xFF	; 255
    a1d4:	0e 94 f7 3f 	call	0x7fee	; 0x7fee <WaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a1d8:	cf 5f       	subi	r28, 0xFF	; 255
    a1da:	f8 cf       	rjmp	.-16     	; 0xa1cc <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    a1dc:	df 91       	pop	r29
    a1de:	cf 91       	pop	r28
    a1e0:	08 95       	ret

0000a1e2 <LBHideAllSprites>:

void LBHideAllSprites()
{
    a1e2:	e8 e6       	ldi	r30, 0x68	; 104
    a1e4:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
    a1e6:	80 ef       	ldi	r24, 0xF0	; 240
    a1e8:	80 83       	st	Z, r24
    a1ea:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    a1ec:	94 e0       	ldi	r25, 0x04	; 4
    a1ee:	e0 39       	cpi	r30, 0x90	; 144
    a1f0:	f9 07       	cpc	r31, r25
    a1f2:	d1 f7       	brne	.-12     	; 0xa1e8 <LBHideAllSprites+0x6>
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
	}
}
    a1f4:	08 95       	ret

0000a1f6 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    a1f6:	2b e8       	ldi	r18, 0x8B	; 139
    a1f8:	30 e0       	ldi	r19, 0x00	; 0
    a1fa:	fc 01       	movw	r30, r24
    a1fc:	21 93       	st	Z+, r18
    a1fe:	31 93       	st	Z+, r19
    a200:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    a202:	4e e1       	ldi	r20, 0x1E	; 30
    a204:	50 e0       	ldi	r21, 0x00	; 0
    a206:	6e e2       	ldi	r22, 0x2E	; 46
    a208:	71 e0       	ldi	r23, 0x01	; 1
    a20a:	0c 94 8a 71 	jmp	0xe314	; 0xe314 <memcpy_P>

0000a20e <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    a20e:	2a e8       	ldi	r18, 0x8A	; 138
    a210:	30 e0       	ldi	r19, 0x00	; 0
    a212:	fc 01       	movw	r30, r24
    a214:	21 93       	st	Z+, r18
    a216:	31 93       	st	Z+, r19
    a218:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    a21a:	4e e1       	ldi	r20, 0x1E	; 30
    a21c:	50 e0       	ldi	r21, 0x00	; 0
    a21e:	6c e4       	ldi	r22, 0x4C	; 76
    a220:	71 e0       	ldi	r23, 0x01	; 1
    a222:	0c 94 8a 71 	jmp	0xe314	; 0xe314 <memcpy_P>

0000a226 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    a226:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    a228:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a22a:	16 86       	std	Z+14, r1	; 0x0e
    a22c:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    a22e:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    a230:	73 e0       	ldi	r23, 0x03	; 3
    a232:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a234:	65 e0       	ldi	r22, 0x05	; 5
    a236:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    a238:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    a23a:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    a23c:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a23e:	4e ef       	ldi	r20, 0xFE	; 254
    a240:	55 e7       	ldi	r21, 0x75	; 117
    a242:	50 87       	std	Z+8, r21	; 0x08
    a244:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a246:	2b ef       	ldi	r18, 0xFB	; 251
    a248:	35 e7       	ldi	r19, 0x75	; 117
    a24a:	32 87       	std	Z+10, r19	; 0x0a
    a24c:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a24e:	88 ef       	ldi	r24, 0xF8	; 248
    a250:	95 e7       	ldi	r25, 0x75	; 117
    a252:	94 87       	std	Z+12, r25	; 0x0c
    a254:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a256:	14 8e       	std	Z+28, r1	; 0x1c
    a258:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    a25a:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    a25c:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a25e:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    a260:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    a262:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    a264:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a266:	56 8b       	std	Z+22, r21	; 0x16
    a268:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a26a:	30 8f       	std	Z+24, r19	; 0x18
    a26c:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a26e:	92 8f       	std	Z+26, r25	; 0x1a
    a270:	81 8f       	std	Z+25, r24	; 0x19
    a272:	08 95       	ret

0000a274 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    a274:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a276:	15 86       	std	Z+13, r1	; 0x0d
    a278:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a27a:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    a27c:	83 e0       	ldi	r24, 0x03	; 3
    a27e:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    a280:	8e e1       	ldi	r24, 0x1E	; 30
    a282:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a284:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a286:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a288:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    a28a:	84 ed       	ldi	r24, 0xD4	; 212
    a28c:	95 e7       	ldi	r25, 0x75	; 117
    a28e:	97 83       	std	Z+7, r25	; 0x07
    a290:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    a292:	81 ed       	ldi	r24, 0xD1	; 209
    a294:	95 e7       	ldi	r25, 0x75	; 117
    a296:	91 87       	std	Z+9, r25	; 0x09
    a298:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    a29a:	8e ec       	ldi	r24, 0xCE	; 206
    a29c:	95 e7       	ldi	r25, 0x75	; 117
    a29e:	93 87       	std	Z+11, r25	; 0x0b
    a2a0:	82 87       	std	Z+10, r24	; 0x0a
    a2a2:	08 95       	ret

0000a2a4 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    a2a4:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a2a6:	15 86       	std	Z+13, r1	; 0x0d
    a2a8:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a2aa:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    a2ac:	82 e0       	ldi	r24, 0x02	; 2
    a2ae:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    a2b0:	8c e3       	ldi	r24, 0x3C	; 60
    a2b2:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a2b4:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a2b6:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a2b8:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    a2ba:	82 e6       	ldi	r24, 0x62	; 98
    a2bc:	93 e7       	ldi	r25, 0x73	; 115
    a2be:	97 83       	std	Z+7, r25	; 0x07
    a2c0:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    a2c2:	88 e9       	ldi	r24, 0x98	; 152
    a2c4:	94 e7       	ldi	r25, 0x74	; 116
    a2c6:	91 87       	std	Z+9, r25	; 0x09
    a2c8:	80 87       	std	Z+8, r24	; 0x08
    a2ca:	08 95       	ret

0000a2cc <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    a2cc:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    a2ce:	88 e7       	ldi	r24, 0x78	; 120
    a2d0:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    a2d2:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    a2d4:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    a2d6:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    a2d8:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    a2da:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    a2dc:	84 e0       	ldi	r24, 0x04	; 4
    a2de:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    a2e0:	66 23       	and	r22, r22
    a2e2:	11 f0       	breq	.+4      	; 0xa2e8 <init_shot_state+0x1c>
    a2e4:	85 e0       	ldi	r24, 0x05	; 5
    a2e6:	01 c0       	rjmp	.+2      	; 0xa2ea <init_shot_state+0x1e>
    a2e8:	81 e0       	ldi	r24, 0x01	; 1
    a2ea:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    a2ec:	80 e0       	ldi	r24, 0x00	; 0
    a2ee:	90 e0       	ldi	r25, 0x00	; 0
    a2f0:	a0 e7       	ldi	r26, 0x70	; 112
    a2f2:	b3 e4       	ldi	r27, 0x43	; 67
    a2f4:	83 83       	std	Z+3, r24	; 0x03
    a2f6:	94 83       	std	Z+4, r25	; 0x04
    a2f8:	a5 83       	std	Z+5, r26	; 0x05
    a2fa:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    a2fc:	17 82       	std	Z+7, r1	; 0x07
    a2fe:	10 86       	std	Z+8, r1	; 0x08
    a300:	11 86       	std	Z+9, r1	; 0x09
    a302:	12 86       	std	Z+10, r1	; 0x0a
    a304:	08 95       	ret

0000a306 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    a306:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    a308:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    a30a:	82 e0       	ldi	r24, 0x02	; 2
    a30c:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    a30e:	85 e0       	ldi	r24, 0x05	; 5
    a310:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    a312:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    a314:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    a316:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    a318:	61 11       	cpse	r22, r1
    a31a:	03 c0       	rjmp	.+6      	; 0xa322 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    a31c:	8c e6       	ldi	r24, 0x6C	; 108
    a31e:	9c e3       	ldi	r25, 0x3C	; 60
    a320:	13 c0       	rjmp	.+38     	; 0xa348 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    a322:	61 30       	cpi	r22, 0x01	; 1
    a324:	79 f4       	brne	.+30     	; 0xa344 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    a326:	89 e6       	ldi	r24, 0x69	; 105
    a328:	9c e3       	ldi	r25, 0x3C	; 60
    a32a:	97 8b       	std	Z+23, r25	; 0x17
    a32c:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    a32e:	86 e6       	ldi	r24, 0x66	; 102
    a330:	9c e3       	ldi	r25, 0x3C	; 60
    a332:	91 8f       	std	Z+25, r25	; 0x19
    a334:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    a336:	83 e6       	ldi	r24, 0x63	; 99
    a338:	9c e3       	ldi	r25, 0x3C	; 60
    a33a:	93 a3       	std	Z+35, r25	; 0x23
    a33c:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    a33e:	80 e6       	ldi	r24, 0x60	; 96
    a340:	9c e3       	ldi	r25, 0x3C	; 60
    a342:	08 c0       	rjmp	.+16     	; 0xa354 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    a344:	84 e5       	ldi	r24, 0x54	; 84
    a346:	9c e3       	ldi	r25, 0x3C	; 60
    a348:	97 8b       	std	Z+23, r25	; 0x17
    a34a:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    a34c:	91 8f       	std	Z+25, r25	; 0x19
    a34e:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    a350:	93 a3       	std	Z+35, r25	; 0x23
    a352:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    a354:	95 a3       	std	Z+37, r25	; 0x25
    a356:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    a358:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    a35a:	82 e0       	ldi	r24, 0x02	; 2
    a35c:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    a35e:	85 e0       	ldi	r24, 0x05	; 5
    a360:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    a362:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    a364:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    a366:	11 a2       	std	Z+33, r1	; 0x21
    a368:	08 95       	ret

0000a36a <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    a36a:	0f 93       	push	r16
    a36c:	1f 93       	push	r17
    a36e:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    a370:	85 e0       	ldi	r24, 0x05	; 5
    a372:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    a374:	83 e0       	ldi	r24, 0x03	; 3
    a376:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    a378:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    a37a:	8a e5       	ldi	r24, 0x5A	; 90
    a37c:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    a37e:	43 83       	std	Z+3, r20	; 0x03
    a380:	54 83       	std	Z+4, r21	; 0x04
    a382:	65 83       	std	Z+5, r22	; 0x05
    a384:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    a386:	07 83       	std	Z+7, r16	; 0x07
    a388:	10 87       	std	Z+8, r17	; 0x08
    a38a:	21 87       	std	Z+9, r18	; 0x09
    a38c:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    a38e:	8a ef       	ldi	r24, 0xFA	; 250
    a390:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    a392:	82 e0       	ldi	r24, 0x02	; 2
    a394:	84 87       	std	Z+12, r24	; 0x0c
		t->shot[i].shared.recoiled = 0;
    a396:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    a398:	40 e0       	ldi	r20, 0x00	; 0
    a39a:	50 e0       	ldi	r21, 0x00	; 0
    a39c:	60 e7       	ldi	r22, 0x70	; 112
    a39e:	73 e4       	ldi	r23, 0x43	; 67
    a3a0:	47 87       	std	Z+15, r20	; 0x0f
    a3a2:	50 8b       	std	Z+16, r21	; 0x10
    a3a4:	61 8b       	std	Z+17, r22	; 0x11
    a3a6:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    a3a8:	13 8a       	std	Z+19, r1	; 0x13
    a3aa:	14 8a       	std	Z+20, r1	; 0x14
    a3ac:	15 8a       	std	Z+21, r1	; 0x15
    a3ae:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    a3b0:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 100;
    a3b2:	94 e6       	ldi	r25, 0x64	; 100
    a3b4:	93 8f       	std	Z+27, r25	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    a3b6:	87 8b       	std	Z+23, r24	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    a3b8:	84 e0       	ldi	r24, 0x04	; 4
    a3ba:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    a3bc:	81 e0       	ldi	r24, 0x01	; 1
    a3be:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    a3c0:	62 e0       	ldi	r22, 0x02	; 2
    a3c2:	cf 01       	movw	r24, r30
    a3c4:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    a3c6:	1f 91       	pop	r17
    a3c8:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    a3ca:	0c 94 83 51 	jmp	0xa306	; 0xa306 <set_shot_animations>

0000a3ce <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    a3ce:	0f 93       	push	r16
    a3d0:	1f 93       	push	r17
    a3d2:	cf 93       	push	r28
    a3d4:	df 93       	push	r29
    a3d6:	ec 01       	movw	r28, r24
	p->grace_frame = FRAMES_PER_GRACE;
    a3d8:	88 e7       	ldi	r24, 0x78	; 120
    a3da:	8e 8b       	std	Y+22, r24	; 0x16
	p->score = 0;
    a3dc:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    a3de:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    a3e0:	18 82       	st	Y, r1
	p->shared.speed = 0;
    a3e2:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    a3e4:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    a3e6:	82 e3       	ldi	r24, 0x32	; 50
    a3e8:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    a3ea:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    a3ec:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    a3ee:	1d 8a       	std	Y+21, r1	; 0x15

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    a3f0:	fe 01       	movw	r30, r28
    a3f2:	eb 5a       	subi	r30, 0xAB	; 171
    a3f4:	ff 4f       	sbci	r31, 0xFF	; 255
    a3f6:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    a3f8:	31 96       	adiw	r30, 0x01	; 1
    a3fa:	91 e0       	ldi	r25, 0x01	; 1
    a3fc:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    a3fe:	31 96       	adiw	r30, 0x01	; 1
    a400:	85 e0       	ldi	r24, 0x05	; 5
    a402:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    a404:	31 96       	adiw	r30, 0x01	; 1
    a406:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    a408:	31 96       	adiw	r30, 0x01	; 1
    a40a:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    a40c:	31 96       	adiw	r30, 0x01	; 1
    a40e:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    a410:	31 96       	adiw	r30, 0x01	; 1
    a412:	71 83       	std	Z+1, r23	; 0x01
    a414:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    a416:	36 96       	adiw	r30, 0x06	; 6
    a418:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    a41a:	31 96       	adiw	r30, 0x01	; 1
    a41c:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    a41e:	31 96       	adiw	r30, 0x01	; 1
    a420:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    a422:	31 96       	adiw	r30, 0x01	; 1
    a424:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    a426:	31 96       	adiw	r30, 0x01	; 1
    a428:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    a42a:	31 96       	adiw	r30, 0x01	; 1
    a42c:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    a42e:	31 96       	adiw	r30, 0x01	; 1
    a430:	51 83       	std	Z+1, r21	; 0x01
    a432:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    a434:	36 96       	adiw	r30, 0x06	; 6
    a436:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    a438:	31 96       	adiw	r30, 0x01	; 1
    a43a:	93 e0       	ldi	r25, 0x03	; 3
    a43c:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    a43e:	31 96       	adiw	r30, 0x01	; 1
    a440:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    a442:	31 96       	adiw	r30, 0x01	; 1
    a444:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    a446:	31 96       	adiw	r30, 0x01	; 1
    a448:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    a44a:	31 96       	adiw	r30, 0x01	; 1
    a44c:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    a44e:	31 96       	adiw	r30, 0x01	; 1
    a450:	8b e7       	ldi	r24, 0x7B	; 123
    a452:	9c e3       	ldi	r25, 0x3C	; 60
    a454:	91 83       	std	Z+1, r25	; 0x01
    a456:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    a458:	32 96       	adiw	r30, 0x02	; 2
    a45a:	85 e7       	ldi	r24, 0x75	; 117
    a45c:	9c e3       	ldi	r25, 0x3C	; 60
    a45e:	91 83       	std	Z+1, r25	; 0x01
    a460:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    a462:	32 96       	adiw	r30, 0x02	; 2
    a464:	8f e6       	ldi	r24, 0x6F	; 111
    a466:	9c e3       	ldi	r25, 0x3C	; 60
    a468:	91 83       	std	Z+1, r25	; 0x01
    a46a:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    a46c:	19 8a       	std	Y+17, r1	; 0x11
	p->old_active_shots = 0;
    a46e:	1a 8a       	std	Y+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    a470:	8e 01       	movw	r16, r28
    a472:	03 5d       	subi	r16, 0xD3	; 211
    a474:	1f 4f       	sbci	r17, 0xFF	; 255
    a476:	60 e0       	ldi	r22, 0x00	; 0
    a478:	c8 01       	movw	r24, r16
    a47a:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    a47e:	60 e0       	ldi	r22, 0x00	; 0
    a480:	c8 01       	movw	r24, r16
    a482:	0e 94 83 51 	call	0xa306	; 0xa306 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    a486:	1a 8e       	std	Y+26, r1	; 0x1a
	p->goal_direction = 0;
    a488:	1e 8e       	std	Y+30, r1	; 0x1e
    a48a:	1d 8e       	std	Y+29, r1	; 0x1d
	p->goal = 0;
    a48c:	1b a2       	std	Y+35, r1	; 0x23
	p->goal_reached = 0;
    a48e:	1c a2       	std	Y+36, r1	; 0x24
	p->old_x = 0;
    a490:	1d a2       	std	Y+37, r1	; 0x25
    a492:	1e a2       	std	Y+38, r1	; 0x26
    a494:	1f a2       	std	Y+39, r1	; 0x27
    a496:	18 a6       	std	Y+40, r1	; 0x28
	p->old_y = 0;
    a498:	19 a6       	std	Y+41, r1	; 0x29
    a49a:	1a a6       	std	Y+42, r1	; 0x2a
    a49c:	1b a6       	std	Y+43, r1	; 0x2b
    a49e:	1c a6       	std	Y+44, r1	; 0x2c
	p->deadlock_count_x = 0;
    a4a0:	18 a2       	std	Y+32, r1	; 0x20
    a4a2:	1f 8e       	std	Y+31, r1	; 0x1f
	p->deadlock_count_y = 0;
    a4a4:	1a a2       	std	Y+34, r1	; 0x22
    a4a6:	19 a2       	std	Y+33, r1	; 0x21
}
    a4a8:	df 91       	pop	r29
    a4aa:	cf 91       	pop	r28
    a4ac:	1f 91       	pop	r17
    a4ae:	0f 91       	pop	r16
    a4b0:	08 95       	ret

0000a4b2 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    a4b2:	fc 01       	movw	r30, r24
    a4b4:	11 8a       	std	Z+17, r1	; 0x11
	player->old_active_shots = 0;
    a4b6:	12 8a       	std	Z+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    a4b8:	60 e0       	ldi	r22, 0x00	; 0
    a4ba:	8d 96       	adiw	r24, 0x2d	; 45
    a4bc:	0c 94 66 51 	jmp	0xa2cc	; 0xa2cc <init_shot_state>

0000a4c0 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    a4c0:	e6 e0       	ldi	r30, 0x06	; 6
    a4c2:	fc e0       	ldi	r31, 0x0C	; 12
    a4c4:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    a4c6:	13 8a       	std	Z+19, r1	; 0x13
	game.paused = 0;
    a4c8:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    a4ca:	14 86       	std	Z+12, r1	; 0x0c
    a4cc:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    a4ce:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    a4d0:	10 8a       	std	Z+16, r1	; 0x10
    a4d2:	17 86       	std	Z+15, r1	; 0x0f
	game.boss_fight_joypad = 0;
    a4d4:	12 8a       	std	Z+18, r1	; 0x12
    a4d6:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    a4d8:	82 e0       	ldi	r24, 0x02	; 2
    a4da:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    a4dc:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    a4de:	84 e1       	ldi	r24, 0x14	; 20
    a4e0:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    a4e2:	17 82       	std	Z+7, r1	; 0x07
	game.demo_counter = 0;
    a4e4:	12 86       	std	Z+10, r1	; 0x0a
    a4e6:	11 86       	std	Z+9, r1	; 0x09
	game.demo_choice = 0;
    a4e8:	10 86       	std	Z+8, r1	; 0x08
	game.tank_rank_counter = 0;
    a4ea:	16 86       	std	Z+14, r1	; 0x0e
    a4ec:	15 86       	std	Z+13, r1	; 0x0d
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    a4ee:	4d e8       	ldi	r20, 0x8D	; 141
    a4f0:	5c e3       	ldi	r21, 0x3C	; 60
    a4f2:	63 e9       	ldi	r22, 0x93	; 147
    a4f4:	7c e3       	ldi	r23, 0x3C	; 60
    a4f6:	87 e3       	ldi	r24, 0x37	; 55
    a4f8:	9c e0       	ldi	r25, 0x0C	; 12
    a4fa:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    a4fe:	41 e8       	ldi	r20, 0x81	; 129
    a500:	5c e3       	ldi	r21, 0x3C	; 60
    a502:	67 e8       	ldi	r22, 0x87	; 135
    a504:	7c e3       	ldi	r23, 0x3C	; 60
    a506:	86 ea       	ldi	r24, 0xA6	; 166
    a508:	9f e0       	ldi	r25, 0x0F	; 15
    a50a:	0c 94 e7 51 	jmp	0xa3ce	; 0xa3ce <init_player>

0000a50e <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    a50e:	cf 93       	push	r28
    a510:	df 93       	push	r29
    a512:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    a514:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    a516:	6b 89       	ldd	r22, Y+19	; 0x13
    a518:	70 e0       	ldi	r23, 0x00	; 0
    a51a:	80 e0       	ldi	r24, 0x00	; 0
    a51c:	90 e0       	ldi	r25, 0x00	; 0
    a51e:	0e 94 71 70 	call	0xe0e2	; 0xe0e2 <__floatunsisf>
    a522:	6b 83       	std	Y+3, r22	; 0x03
    a524:	7c 83       	std	Y+4, r23	; 0x04
    a526:	8d 83       	std	Y+5, r24	; 0x05
    a528:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    a52a:	6c 89       	ldd	r22, Y+20	; 0x14
    a52c:	70 e0       	ldi	r23, 0x00	; 0
    a52e:	80 e0       	ldi	r24, 0x00	; 0
    a530:	90 e0       	ldi	r25, 0x00	; 0
    a532:	0e 94 71 70 	call	0xe0e2	; 0xe0e2 <__floatunsisf>
    a536:	6f 83       	std	Y+7, r22	; 0x07
    a538:	78 87       	std	Y+8, r23	; 0x08
    a53a:	89 87       	std	Y+9, r24	; 0x09
    a53c:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    a53e:	18 82       	st	Y, r1
	player->shared.speed = 0;
    a540:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    a542:	1a 82       	std	Y+2, r1	; 0x02
	player->tank_tactic = LBRandom(0, 2);
    a544:	62 e0       	ldi	r22, 0x02	; 2
    a546:	80 e0       	ldi	r24, 0x00	; 0
    a548:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBRandom>
    a54c:	8b 8f       	std	Y+27, r24	; 0x1b
	player->shot_tactic = LBRandom(0, 2);
    a54e:	62 e0       	ldi	r22, 0x02	; 2
    a550:	80 e0       	ldi	r24, 0x00	; 0
    a552:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBRandom>
    a556:	8c 8f       	std	Y+28, r24	; 0x1c
	
}
    a558:	df 91       	pop	r29
    a55a:	cf 91       	pop	r28
    a55c:	08 95       	ret

0000a55e <waitForVSync>:

void waitForVSync()
{
    ProcessSprites();
    a55e:	0e 94 80 4c 	call	0x9900	; 0x9900 <ProcessSprites>
    WaitVsync(1);
    a562:	81 e0       	ldi	r24, 0x01	; 1
    a564:	90 e0       	ldi	r25, 0x00	; 0
    a566:	0e 94 8a 4e 	call	0x9d14	; 0x9d14 <WaitVsync>
    RestoreBackground();
    a56a:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <RestoreBackground>

0000a56e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    a56e:	cf 93       	push	r28
    a570:	df 93       	push	r29
    a572:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    a574:	bc 01       	movw	r22, r24
    a576:	88 81       	ld	r24, Y
    a578:	99 81       	ldd	r25, Y+1	; 0x01
    a57a:	0e 94 86 41 	call	0x830c	; 0x830c <EepromReadBlock>
	if (status == 0x03)
    a57e:	83 30       	cpi	r24, 0x03	; 3
    a580:	29 f4       	brne	.+10     	; 0xa58c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    a582:	ce 01       	movw	r24, r28
	}
}
    a584:	df 91       	pop	r29
    a586:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    a588:	0c 94 3c 41 	jmp	0x8278	; 0x8278 <EepromWriteBlock>
	}
}
    a58c:	df 91       	pop	r29
    a58e:	cf 91       	pop	r28
    a590:	08 95       	ret

0000a592 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    a592:	61 e0       	ldi	r22, 0x01	; 1
    a594:	83 e0       	ldi	r24, 0x03	; 3
    a596:	0e 94 bb 4e 	call	0x9d76	; 0x9d76 <FadeOut>
	ClearVram();
    a59a:	0e 94 bd 3f 	call	0x7f7a	; 0x7f7a <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    a59e:	60 e0       	ldi	r22, 0x00	; 0
    a5a0:	83 e0       	ldi	r24, 0x03	; 3
    a5a2:	0c 94 af 4e 	jmp	0x9d5e	; 0x9d5e <FadeIn>

0000a5a6 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    a5a6:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    a5a8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    a5aa:	40 e0       	ldi	r20, 0x00	; 0
    a5ac:	6f e9       	ldi	r22, 0x9F	; 159
    a5ae:	7c e3       	ldi	r23, 0x3C	; 60
    a5b0:	8c 2f       	mov	r24, r28
    a5b2:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
    a5b6:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    a5b8:	ca 30       	cpi	r28, 0x0A	; 10
    a5ba:	b9 f7       	brne	.-18     	; 0xa5aa <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    a5bc:	cf 91       	pop	r28
    a5be:	08 95       	ret

0000a5c0 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    a5c0:	cf 92       	push	r12
    a5c2:	df 92       	push	r13
    a5c4:	ff 92       	push	r15
    a5c6:	0f 93       	push	r16
    a5c8:	1f 93       	push	r17
    a5ca:	cf 93       	push	r28
    a5cc:	df 93       	push	r29
    a5ce:	cd b7       	in	r28, 0x3d	; 61
    a5d0:	de b7       	in	r29, 0x3e	; 62
    a5d2:	2a 97       	sbiw	r28, 0x0a	; 10
    a5d4:	0f b6       	in	r0, 0x3f	; 63
    a5d6:	f8 94       	cli
    a5d8:	de bf       	out	0x3e, r29	; 62
    a5da:	0f be       	out	0x3f, r0	; 63
    a5dc:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    a5de:	90 91 46 0c 	lds	r25, 0x0C46
    a5e2:	80 91 b5 0f 	lds	r24, 0x0FB5
    a5e6:	98 17       	cp	r25, r24
    a5e8:	28 f4       	brcc	.+10     	; 0xa5f4 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    a5ea:	e7 e3       	ldi	r30, 0x37	; 55
    a5ec:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    a5ee:	a6 ea       	ldi	r26, 0xA6	; 166
    a5f0:	bf e0       	ldi	r27, 0x0F	; 15
    a5f2:	04 c0       	rjmp	.+8      	; 0xa5fc <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    a5f4:	e6 ea       	ldi	r30, 0xA6	; 166
    a5f6:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    a5f8:	a7 e3       	ldi	r26, 0x37	; 55
    a5fa:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    a5fc:	1b 96       	adiw	r26, 0x0b	; 11
    a5fe:	8c 91       	ld	r24, X
    a600:	1b 97       	sbiw	r26, 0x0b	; 11
    a602:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    a604:	83 85       	ldd	r24, Z+11	; 0x0b
    a606:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    a608:	1f 96       	adiw	r26, 0x0f	; 15
    a60a:	8c 91       	ld	r24, X
    a60c:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    a60e:	97 85       	ldd	r25, Z+15	; 0x0f
    a610:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    a612:	21 e0       	ldi	r18, 0x01	; 1
    a614:	30 91 09 0c 	lds	r19, 0x0C09
    a618:	38 30       	cpi	r19, 0x08	; 8
    a61a:	09 f0       	breq	.+2      	; 0xa61e <save_score+0x5e>
    a61c:	20 e0       	ldi	r18, 0x00	; 0
    a61e:	2d 83       	std	Y+5, r18	; 0x05
	save_delta = p_win->score - p_lose->score;
    a620:	f8 2e       	mov	r15, r24
    a622:	f9 1a       	sub	r15, r25
    a624:	00 e0       	ldi	r16, 0x00	; 0
    a626:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    a628:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    a62a:	81 11       	cpse	r24, r1
    a62c:	08 c0       	rjmp	.+16     	; 0xa63e <save_score+0x7e>
    a62e:	f8 01       	movw	r30, r16
    a630:	e1 54       	subi	r30, 0x41	; 65
    a632:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    a634:	94 81       	ldd	r25, Z+4	; 0x04
    a636:	25 81       	ldd	r18, Z+5	; 0x05
    a638:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    a63a:	9f 15       	cp	r25, r15
    a63c:	d0 f4       	brcc	.+52     	; 0xa672 <save_score+0xb2>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    a63e:	45 e0       	ldi	r20, 0x05	; 5
    a640:	c8 01       	movw	r24, r16
    a642:	8f 53       	subi	r24, 0x3F	; 63
    a644:	94 4f       	sbci	r25, 0xF4	; 244
    a646:	6c 01       	movw	r12, r24
    a648:	bc 01       	movw	r22, r24
    a64a:	ce 01       	movw	r24, r28
    a64c:	06 96       	adiw	r24, 0x06	; 6
    a64e:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    a652:	45 e0       	ldi	r20, 0x05	; 5
    a654:	be 01       	movw	r22, r28
    a656:	6f 5f       	subi	r22, 0xFF	; 255
    a658:	7f 4f       	sbci	r23, 0xFF	; 255
    a65a:	c6 01       	movw	r24, r12
    a65c:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    a660:	45 e0       	ldi	r20, 0x05	; 5
    a662:	be 01       	movw	r22, r28
    a664:	6a 5f       	subi	r22, 0xFA	; 250
    a666:	7f 4f       	sbci	r23, 0xFF	; 255
    a668:	ce 01       	movw	r24, r28
    a66a:	01 96       	adiw	r24, 0x01	; 1
    a66c:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
				saved = 1;
    a670:	81 e0       	ldi	r24, 0x01	; 1
    a672:	0b 5f       	subi	r16, 0xFB	; 251
    a674:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    a676:	0e 31       	cpi	r16, 0x1E	; 30
    a678:	11 05       	cpc	r17, r1
    a67a:	b9 f6       	brne	.-82     	; 0xa62a <save_score+0x6a>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a67c:	8f eb       	ldi	r24, 0xBF	; 191
    a67e:	9b e0       	ldi	r25, 0x0B	; 11
    a680:	0e 94 3c 41 	call	0x8278	; 0x8278 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    a684:	2a 96       	adiw	r28, 0x0a	; 10
    a686:	0f b6       	in	r0, 0x3f	; 63
    a688:	f8 94       	cli
    a68a:	de bf       	out	0x3e, r29	; 62
    a68c:	0f be       	out	0x3f, r0	; 63
    a68e:	cd bf       	out	0x3d, r28	; 61
    a690:	df 91       	pop	r29
    a692:	cf 91       	pop	r28
    a694:	1f 91       	pop	r17
    a696:	0f 91       	pop	r16
    a698:	ff 90       	pop	r15
    a69a:	df 90       	pop	r13
    a69c:	cf 90       	pop	r12
    a69e:	08 95       	ret

0000a6a0 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    a6a0:	0f 93       	push	r16
    a6a2:	1f 93       	push	r17
    a6a4:	cf 93       	push	r28
    a6a6:	df 93       	push	r29
    a6a8:	8c 01       	movw	r16, r24
    a6aa:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    a6ac:	88 81       	ld	r24, Y
    a6ae:	81 30       	cpi	r24, 0x01	; 1
    a6b0:	69 f1       	breq	.+90     	; 0xa70c <position_shot+0x6c>
    a6b2:	98 f0       	brcs	.+38     	; 0xa6da <position_shot+0x3a>
    a6b4:	82 30       	cpi	r24, 0x02	; 2
    a6b6:	f1 f1       	breq	.+124    	; 0xa734 <position_shot+0x94>
    a6b8:	83 30       	cpi	r24, 0x03	; 3
    a6ba:	09 f0       	breq	.+2      	; 0xa6be <position_shot+0x1e>
    a6bc:	59 c0       	rjmp	.+178    	; 0xa770 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    a6be:	f8 01       	movw	r30, r16
    a6c0:	83 81       	ldd	r24, Z+3	; 0x03
    a6c2:	94 81       	ldd	r25, Z+4	; 0x04
    a6c4:	a5 81       	ldd	r26, Z+5	; 0x05
    a6c6:	b6 81       	ldd	r27, Z+6	; 0x06
    a6c8:	8b 83       	std	Y+3, r24	; 0x03
    a6ca:	9c 83       	std	Y+4, r25	; 0x04
    a6cc:	ad 83       	std	Y+5, r26	; 0x05
    a6ce:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    a6d0:	20 e0       	ldi	r18, 0x00	; 0
    a6d2:	30 e0       	ldi	r19, 0x00	; 0
    a6d4:	40 e8       	ldi	r20, 0x80	; 128
    a6d6:	50 e4       	ldi	r21, 0x40	; 64
    a6d8:	41 c0       	rjmp	.+130    	; 0xa75c <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    a6da:	20 e0       	ldi	r18, 0x00	; 0
    a6dc:	30 e0       	ldi	r19, 0x00	; 0
    a6de:	40 e8       	ldi	r20, 0x80	; 128
    a6e0:	50 e4       	ldi	r21, 0x40	; 64
    a6e2:	f8 01       	movw	r30, r16
    a6e4:	63 81       	ldd	r22, Z+3	; 0x03
    a6e6:	74 81       	ldd	r23, Z+4	; 0x04
    a6e8:	85 81       	ldd	r24, Z+5	; 0x05
    a6ea:	96 81       	ldd	r25, Z+6	; 0x06
    a6ec:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    a6f0:	6b 83       	std	Y+3, r22	; 0x03
    a6f2:	7c 83       	std	Y+4, r23	; 0x04
    a6f4:	8d 83       	std	Y+5, r24	; 0x05
    a6f6:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    a6f8:	f8 01       	movw	r30, r16
    a6fa:	87 81       	ldd	r24, Z+7	; 0x07
    a6fc:	90 85       	ldd	r25, Z+8	; 0x08
    a6fe:	a1 85       	ldd	r26, Z+9	; 0x09
    a700:	b2 85       	ldd	r27, Z+10	; 0x0a
    a702:	8f 83       	std	Y+7, r24	; 0x07
    a704:	98 87       	std	Y+8, r25	; 0x08
    a706:	a9 87       	std	Y+9, r26	; 0x09
    a708:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    a70a:	32 c0       	rjmp	.+100    	; 0xa770 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    a70c:	20 e0       	ldi	r18, 0x00	; 0
    a70e:	30 e0       	ldi	r19, 0x00	; 0
    a710:	40 e0       	ldi	r20, 0x00	; 0
    a712:	51 e4       	ldi	r21, 0x41	; 65
    a714:	f8 01       	movw	r30, r16
    a716:	63 81       	ldd	r22, Z+3	; 0x03
    a718:	74 81       	ldd	r23, Z+4	; 0x04
    a71a:	85 81       	ldd	r24, Z+5	; 0x05
    a71c:	96 81       	ldd	r25, Z+6	; 0x06
    a71e:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    a722:	6b 83       	std	Y+3, r22	; 0x03
    a724:	7c 83       	std	Y+4, r23	; 0x04
    a726:	8d 83       	std	Y+5, r24	; 0x05
    a728:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    a72a:	20 e0       	ldi	r18, 0x00	; 0
    a72c:	30 e0       	ldi	r19, 0x00	; 0
    a72e:	40 e8       	ldi	r20, 0x80	; 128
    a730:	50 e4       	ldi	r21, 0x40	; 64
    a732:	13 c0       	rjmp	.+38     	; 0xa75a <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    a734:	20 e0       	ldi	r18, 0x00	; 0
    a736:	30 e0       	ldi	r19, 0x00	; 0
    a738:	40 e8       	ldi	r20, 0x80	; 128
    a73a:	50 e4       	ldi	r21, 0x40	; 64
    a73c:	f8 01       	movw	r30, r16
    a73e:	63 81       	ldd	r22, Z+3	; 0x03
    a740:	74 81       	ldd	r23, Z+4	; 0x04
    a742:	85 81       	ldd	r24, Z+5	; 0x05
    a744:	96 81       	ldd	r25, Z+6	; 0x06
    a746:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    a74a:	6b 83       	std	Y+3, r22	; 0x03
    a74c:	7c 83       	std	Y+4, r23	; 0x04
    a74e:	8d 83       	std	Y+5, r24	; 0x05
    a750:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    a752:	20 e0       	ldi	r18, 0x00	; 0
    a754:	30 e0       	ldi	r19, 0x00	; 0
    a756:	40 e0       	ldi	r20, 0x00	; 0
    a758:	51 e4       	ldi	r21, 0x41	; 65
    a75a:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    a75c:	67 81       	ldd	r22, Z+7	; 0x07
    a75e:	70 85       	ldd	r23, Z+8	; 0x08
    a760:	81 85       	ldd	r24, Z+9	; 0x09
    a762:	92 85       	ldd	r25, Z+10	; 0x0a
    a764:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    a768:	6f 83       	std	Y+7, r22	; 0x07
    a76a:	78 87       	std	Y+8, r23	; 0x08
    a76c:	89 87       	std	Y+9, r24	; 0x09
    a76e:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    a770:	df 91       	pop	r29
    a772:	cf 91       	pop	r28
    a774:	1f 91       	pop	r17
    a776:	0f 91       	pop	r16
    a778:	08 95       	ret

0000a77a <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    a77a:	0f 93       	push	r16
    a77c:	1f 93       	push	r17
    a77e:	cf 93       	push	r28
    a780:	df 93       	push	r29
    a782:	8c 01       	movw	r16, r24
    a784:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    a786:	ac 01       	movw	r20, r24
    a788:	44 5f       	subi	r20, 0xF4	; 244
    a78a:	5f 4f       	sbci	r21, 0xFF	; 255
    a78c:	23 e0       	ldi	r18, 0x03	; 3
    a78e:	6e e0       	ldi	r22, 0x0E	; 14
    a790:	84 e0       	ldi	r24, 0x04	; 4
    a792:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    a796:	47 e4       	ldi	r20, 0x47	; 71
    a798:	52 e0       	ldi	r21, 0x02	; 2
    a79a:	6e e0       	ldi	r22, 0x0E	; 14
    a79c:	70 e0       	ldi	r23, 0x00	; 0
    a79e:	88 e0       	ldi	r24, 0x08	; 8
    a7a0:	90 e0       	ldi	r25, 0x00	; 0
    a7a2:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a7a6:	ae 01       	movw	r20, r28
    a7a8:	44 5f       	subi	r20, 0xF4	; 244
    a7aa:	5f 4f       	sbci	r21, 0xFF	; 255
    a7ac:	23 e0       	ldi	r18, 0x03	; 3
    a7ae:	6e e0       	ldi	r22, 0x0E	; 14
    a7b0:	8d e0       	ldi	r24, 0x0D	; 13
    a7b2:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
	Print(17, 14, (char*) strBy);
    a7b6:	44 e4       	ldi	r20, 0x44	; 68
    a7b8:	52 e0       	ldi	r21, 0x02	; 2
    a7ba:	6e e0       	ldi	r22, 0x0E	; 14
    a7bc:	70 e0       	ldi	r23, 0x00	; 0
    a7be:	81 e1       	ldi	r24, 0x11	; 17
    a7c0:	90 e0       	ldi	r25, 0x00	; 0
    a7c2:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    a7c6:	21 e0       	ldi	r18, 0x01	; 1
    a7c8:	f8 01       	movw	r30, r16
    a7ca:	40 89       	ldd	r20, Z+16	; 0x10
    a7cc:	6e e0       	ldi	r22, 0x0E	; 14
    a7ce:	70 e0       	ldi	r23, 0x00	; 0
    a7d0:	86 e1       	ldi	r24, 0x16	; 22
    a7d2:	90 e0       	ldi	r25, 0x00	; 0
    a7d4:	0e 94 39 4e 	call	0x9c72	; 0x9c72 <PrintByte>
	PrintChar(23, 14, '-');
    a7d8:	4d e2       	ldi	r20, 0x2D	; 45
    a7da:	6e e0       	ldi	r22, 0x0E	; 14
    a7dc:	70 e0       	ldi	r23, 0x00	; 0
    a7de:	87 e1       	ldi	r24, 0x17	; 23
    a7e0:	90 e0       	ldi	r25, 0x00	; 0
    a7e2:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    a7e6:	21 e0       	ldi	r18, 0x01	; 1
    a7e8:	48 89       	ldd	r20, Y+16	; 0x10
    a7ea:	6e e0       	ldi	r22, 0x0E	; 14
    a7ec:	70 e0       	ldi	r23, 0x00	; 0
    a7ee:	8a e1       	ldi	r24, 0x1A	; 26
    a7f0:	90 e0       	ldi	r25, 0x00	; 0
}
    a7f2:	df 91       	pop	r29
    a7f4:	cf 91       	pop	r28
    a7f6:	1f 91       	pop	r17
    a7f8:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    a7fa:	0c 94 39 4e 	jmp	0x9c72	; 0x9c72 <PrintByte>

0000a7fe <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a7fe:	0f 93       	push	r16
    a800:	1f 93       	push	r17
    a802:	cf 93       	push	r28
    a804:	df 93       	push	r29
    a806:	8c 01       	movw	r16, r24
    a808:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    a80a:	48 e3       	ldi	r20, 0x38	; 56
    a80c:	52 e0       	ldi	r21, 0x02	; 2
    a80e:	6c e0       	ldi	r22, 0x0C	; 12
    a810:	70 e0       	ldi	r23, 0x00	; 0
    a812:	89 e0       	ldi	r24, 0x09	; 9
    a814:	90 e0       	ldi	r25, 0x00	; 0
    a816:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a81a:	a8 01       	movw	r20, r16
    a81c:	44 5f       	subi	r20, 0xF4	; 244
    a81e:	5f 4f       	sbci	r21, 0xFF	; 255
    a820:	23 e0       	ldi	r18, 0x03	; 3
    a822:	6e e0       	ldi	r22, 0x0E	; 14
    a824:	84 e0       	ldi	r24, 0x04	; 4
    a826:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    a82a:	47 e4       	ldi	r20, 0x47	; 71
    a82c:	52 e0       	ldi	r21, 0x02	; 2
    a82e:	6e e0       	ldi	r22, 0x0E	; 14
    a830:	70 e0       	ldi	r23, 0x00	; 0
    a832:	88 e0       	ldi	r24, 0x08	; 8
    a834:	90 e0       	ldi	r25, 0x00	; 0
    a836:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a83a:	ae 01       	movw	r20, r28
    a83c:	44 5f       	subi	r20, 0xF4	; 244
    a83e:	5f 4f       	sbci	r21, 0xFF	; 255
    a840:	23 e0       	ldi	r18, 0x03	; 3
    a842:	6e e0       	ldi	r22, 0x0E	; 14
    a844:	8d e0       	ldi	r24, 0x0D	; 13
    a846:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
    Print(17, 14, (char*) strBy);
    a84a:	44 e4       	ldi	r20, 0x44	; 68
    a84c:	52 e0       	ldi	r21, 0x02	; 2
    a84e:	6e e0       	ldi	r22, 0x0E	; 14
    a850:	70 e0       	ldi	r23, 0x00	; 0
    a852:	81 e1       	ldi	r24, 0x11	; 17
    a854:	90 e0       	ldi	r25, 0x00	; 0
    a856:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
    PrintByte(22, 14, winner->score ,true);
    a85a:	21 e0       	ldi	r18, 0x01	; 1
    a85c:	f8 01       	movw	r30, r16
    a85e:	47 85       	ldd	r20, Z+15	; 0x0f
    a860:	6e e0       	ldi	r22, 0x0E	; 14
    a862:	70 e0       	ldi	r23, 0x00	; 0
    a864:	86 e1       	ldi	r24, 0x16	; 22
    a866:	90 e0       	ldi	r25, 0x00	; 0
    a868:	0e 94 39 4e 	call	0x9c72	; 0x9c72 <PrintByte>
    PrintChar(23, 14, '-');
    a86c:	4d e2       	ldi	r20, 0x2D	; 45
    a86e:	6e e0       	ldi	r22, 0x0E	; 14
    a870:	70 e0       	ldi	r23, 0x00	; 0
    a872:	87 e1       	ldi	r24, 0x17	; 23
    a874:	90 e0       	ldi	r25, 0x00	; 0
    a876:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    a87a:	21 e0       	ldi	r18, 0x01	; 1
    a87c:	4f 85       	ldd	r20, Y+15	; 0x0f
    a87e:	6e e0       	ldi	r22, 0x0E	; 14
    a880:	70 e0       	ldi	r23, 0x00	; 0
    a882:	8a e1       	ldi	r24, 0x1A	; 26
    a884:	90 e0       	ldi	r25, 0x00	; 0
    a886:	0e 94 39 4e 	call	0x9c72	; 0x9c72 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    a88a:	80 91 09 0c 	lds	r24, 0x0C09
    a88e:	88 30       	cpi	r24, 0x08	; 8
    a890:	59 f4       	brne	.+22     	; 0xa8a8 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    a892:	4a e2       	ldi	r20, 0x2A	; 42
    a894:	6e e0       	ldi	r22, 0x0E	; 14
    a896:	70 e0       	ldi	r23, 0x00	; 0
    a898:	8c e1       	ldi	r24, 0x1C	; 28
    a89a:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    a89c:	df 91       	pop	r29
    a89e:	cf 91       	pop	r28
    a8a0:	1f 91       	pop	r17
    a8a2:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    a8a4:	0c 94 87 4e 	jmp	0x9d0e	; 0x9d0e <PrintChar>
	}
}
    a8a8:	df 91       	pop	r29
    a8aa:	cf 91       	pop	r28
    a8ac:	1f 91       	pop	r17
    a8ae:	0f 91       	pop	r16
    a8b0:	08 95       	ret

0000a8b2 <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    a8b2:	fc 01       	movw	r30, r24
    a8b4:	20 81       	ld	r18, Z
    a8b6:	31 81       	ldd	r19, Z+1	; 0x01
    a8b8:	21 70       	andi	r18, 0x01	; 1
    a8ba:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    a8bc:	81 e0       	ldi	r24, 0x01	; 1
    a8be:	23 2b       	or	r18, r19
    a8c0:	09 f4       	brne	.+2      	; 0xa8c4 <shoot_pressed+0x12>
    a8c2:	80 e0       	ldi	r24, 0x00	; 0
}
    a8c4:	08 95       	ret

0000a8c6 <get_delta>:

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a8c6:	fc 01       	movw	r30, r24
    a8c8:	83 a1       	ldd	r24, Z+35	; 0x23
    a8ca:	fb 01       	movw	r30, r22
    a8cc:	61 81       	ldd	r22, Z+1	; 0x01
		return FRAME_TIME * s->speed;
    a8ce:	70 e0       	ldi	r23, 0x00	; 0
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a8d0:	81 11       	cpse	r24, r1
    a8d2:	09 c0       	rjmp	.+18     	; 0xa8e6 <get_delta+0x20>
		return FRAME_TIME * s->speed;
    a8d4:	80 e0       	ldi	r24, 0x00	; 0
    a8d6:	90 e0       	ldi	r25, 0x00	; 0
    a8d8:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    a8dc:	25 e6       	ldi	r18, 0x65	; 101
    a8de:	38 e8       	ldi	r19, 0x88	; 136
    a8e0:	48 e8       	ldi	r20, 0x88	; 136
    a8e2:	5c e3       	ldi	r21, 0x3C	; 60
    a8e4:	0e c0       	rjmp	.+28     	; 0xa902 <get_delta+0x3c>
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
    a8e6:	80 e0       	ldi	r24, 0x00	; 0
    a8e8:	90 e0       	ldi	r25, 0x00	; 0
    a8ea:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    a8ee:	25 e6       	ldi	r18, 0x65	; 101
    a8f0:	38 e8       	ldi	r19, 0x88	; 136
    a8f2:	48 e8       	ldi	r20, 0x88	; 136
    a8f4:	5c e3       	ldi	r21, 0x3C	; 60
    a8f6:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    a8fa:	23 e3       	ldi	r18, 0x33	; 51
    a8fc:	33 e3       	ldi	r19, 0x33	; 51
    a8fe:	43 eb       	ldi	r20, 0xB3	; 179
    a900:	5f e3       	ldi	r21, 0x3F	; 63
    a902:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
}
    a906:	08 95       	ret

0000a908 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a908:	cf 93       	push	r28
    a90a:	df 93       	push	r29
    a90c:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a90e:	ac 01       	movw	r20, r24
    a910:	44 5f       	subi	r20, 0xF4	; 244
    a912:	5f 4f       	sbci	r21, 0xFF	; 255
    a914:	23 e0       	ldi	r18, 0x03	; 3
    a916:	60 e0       	ldi	r22, 0x00	; 0
    a918:	8a e0       	ldi	r24, 0x0A	; 10
    a91a:	8c 0f       	add	r24, r28
    a91c:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
	Print(x, 0, (char*) strScore);
    a920:	d0 e0       	ldi	r29, 0x00	; 0
    a922:	41 e3       	ldi	r20, 0x31	; 49
    a924:	52 e0       	ldi	r21, 0x02	; 2
    a926:	60 e0       	ldi	r22, 0x00	; 0
    a928:	70 e0       	ldi	r23, 0x00	; 0
    a92a:	ce 01       	movw	r24, r28
    a92c:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(x, 1, (char*) strTotal);
    a930:	4a e2       	ldi	r20, 0x2A	; 42
    a932:	52 e0       	ldi	r21, 0x02	; 2
    a934:	61 e0       	ldi	r22, 0x01	; 1
    a936:	70 e0       	ldi	r23, 0x00	; 0
    a938:	ce 01       	movw	r24, r28
	
}
    a93a:	df 91       	pop	r29
    a93c:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    a93e:	0c 94 6c 4e 	jmp	0x9cd8	; 0x9cd8 <Print>

0000a942 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a942:	0f 93       	push	r16
    a944:	1f 93       	push	r17
    a946:	cf 93       	push	r28
    a948:	df 93       	push	r29
    a94a:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    a94c:	c6 2f       	mov	r28, r22
    a94e:	d0 e0       	ldi	r29, 0x00	; 0
    a950:	28 96       	adiw	r28, 0x08	; 8
    a952:	20 e0       	ldi	r18, 0x00	; 0
    a954:	fc 01       	movw	r30, r24
    a956:	40 89       	ldd	r20, Z+16	; 0x10
    a958:	60 e0       	ldi	r22, 0x00	; 0
    a95a:	70 e0       	ldi	r23, 0x00	; 0
    a95c:	ce 01       	movw	r24, r28
    a95e:	0e 94 39 4e 	call	0x9c72	; 0x9c72 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    a962:	20 e0       	ldi	r18, 0x00	; 0
    a964:	f8 01       	movw	r30, r16
    a966:	47 85       	ldd	r20, Z+15	; 0x0f
    a968:	61 e0       	ldi	r22, 0x01	; 1
    a96a:	70 e0       	ldi	r23, 0x00	; 0
    a96c:	ce 01       	movw	r24, r28
}
    a96e:	df 91       	pop	r29
    a970:	cf 91       	pop	r28
    a972:	1f 91       	pop	r17
    a974:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    a976:	0c 94 39 4e 	jmp	0x9c72	; 0x9c72 <PrintByte>

0000a97a <render_player>:
}

void render_player(Player* player, u8 sprite_index)
{
    a97a:	ef 92       	push	r14
    a97c:	ff 92       	push	r15
    a97e:	0f 93       	push	r16
    a980:	1f 93       	push	r17
    a982:	cf 93       	push	r28
    a984:	df 93       	push	r29
    a986:	1f 92       	push	r1
    a988:	cd b7       	in	r28, 0x3d	; 61
    a98a:	de b7       	in	r29, 0x3e	; 62
    a98c:	7c 01       	movw	r14, r24
    a98e:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    a990:	fc 01       	movw	r30, r24
    a992:	67 81       	ldd	r22, Z+7	; 0x07
    a994:	70 85       	ldd	r23, Z+8	; 0x08
    a996:	81 85       	ldd	r24, Z+9	; 0x09
    a998:	92 85       	ldd	r25, Z+10	; 0x0a
    a99a:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    a99e:	46 2f       	mov	r20, r22
    a9a0:	f7 01       	movw	r30, r14
    a9a2:	63 81       	ldd	r22, Z+3	; 0x03
    a9a4:	74 81       	ldd	r23, Z+4	; 0x04
    a9a6:	85 81       	ldd	r24, Z+5	; 0x05
    a9a8:	96 81       	ldd	r25, Z+6	; 0x06
    a9aa:	49 83       	std	Y+1, r20	; 0x01
    a9ac:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    a9b0:	02 e0       	ldi	r16, 0x02	; 2
    a9b2:	22 e0       	ldi	r18, 0x02	; 2
    a9b4:	49 81       	ldd	r20, Y+1	; 0x01
    a9b6:	81 2f       	mov	r24, r17
    a9b8:	0e 94 b8 4d 	call	0x9b70	; 0x9b70 <MoveSprite>
}
    a9bc:	0f 90       	pop	r0
    a9be:	df 91       	pop	r29
    a9c0:	cf 91       	pop	r28
    a9c2:	1f 91       	pop	r17
    a9c4:	0f 91       	pop	r16
    a9c6:	ff 90       	pop	r15
    a9c8:	ef 90       	pop	r14
    a9ca:	08 95       	ret

0000a9cc <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    a9cc:	ef 92       	push	r14
    a9ce:	ff 92       	push	r15
    a9d0:	0f 93       	push	r16
    a9d2:	1f 93       	push	r17
    a9d4:	cf 93       	push	r28
    a9d6:	df 93       	push	r29
    a9d8:	1f 92       	push	r1
    a9da:	cd b7       	in	r28, 0x3d	; 61
    a9dc:	de b7       	in	r29, 0x3e	; 62
    a9de:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    a9e0:	81 89       	ldd	r24, Z+17	; 0x11
    a9e2:	88 23       	and	r24, r24
    a9e4:	b9 f0       	breq	.+46     	; 0xaa14 <render_shot+0x48>
    a9e6:	16 2f       	mov	r17, r22
    a9e8:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    a9ea:	64 a9       	ldd	r22, Z+52	; 0x34
    a9ec:	75 a9       	ldd	r23, Z+53	; 0x35
    a9ee:	86 a9       	ldd	r24, Z+54	; 0x36
    a9f0:	97 a9       	ldd	r25, Z+55	; 0x37
    a9f2:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    a9f6:	46 2f       	mov	r20, r22
    a9f8:	f7 01       	movw	r30, r14
    a9fa:	60 a9       	ldd	r22, Z+48	; 0x30
    a9fc:	71 a9       	ldd	r23, Z+49	; 0x31
    a9fe:	82 a9       	ldd	r24, Z+50	; 0x32
    aa00:	93 a9       	ldd	r25, Z+51	; 0x33
    aa02:	49 83       	std	Y+1, r20	; 0x01
    aa04:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    aa08:	01 e0       	ldi	r16, 0x01	; 1
    aa0a:	21 e0       	ldi	r18, 0x01	; 1
    aa0c:	49 81       	ldd	r20, Y+1	; 0x01
    aa0e:	81 2f       	mov	r24, r17
    aa10:	0e 94 b8 4d 	call	0x9b70	; 0x9b70 <MoveSprite>
			sprite_index++;
		}
	}
}
    aa14:	0f 90       	pop	r0
    aa16:	df 91       	pop	r29
    aa18:	cf 91       	pop	r28
    aa1a:	1f 91       	pop	r17
    aa1c:	0f 91       	pop	r16
    aa1e:	ff 90       	pop	r15
    aa20:	ef 90       	pop	r14
    aa22:	08 95       	ret

0000aa24 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    aa24:	ef 92       	push	r14
    aa26:	ff 92       	push	r15
    aa28:	0f 93       	push	r16
    aa2a:	1f 93       	push	r17
    aa2c:	cf 93       	push	r28
    aa2e:	df 93       	push	r29
    aa30:	ec 01       	movw	r28, r24
    aa32:	25 96       	adiw	r28, 0x05	; 5
    aa34:	8c 01       	movw	r16, r24
    aa36:	0f 5d       	subi	r16, 0xDF	; 223
    aa38:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    aa3a:	8e e1       	ldi	r24, 0x1E	; 30
    aa3c:	e8 2e       	mov	r14, r24
    aa3e:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    aa40:	88 85       	ldd	r24, Y+8	; 0x08
    aa42:	99 85       	ldd	r25, Y+9	; 0x09
    aa44:	89 2b       	or	r24, r25
    aa46:	c1 f0       	breq	.+48     	; 0xaa78 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    aa48:	ce 01       	movw	r24, r28
    aa4a:	04 97       	sbiw	r24, 0x04	; 4
    aa4c:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <LBGetNextFrame>
    aa50:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    aa52:	48 81       	ld	r20, Y
    aa54:	88 85       	ldd	r24, Y+8	; 0x08
    aa56:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    aa58:	b7 01       	movw	r22, r14
    aa5a:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    aa5e:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    aa60:	44 23       	and	r20, r20
    aa62:	39 f0       	breq	.+14     	; 0xaa72 <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    aa64:	40 e0       	ldi	r20, 0x00	; 0
    aa66:	50 e0       	ldi	r21, 0x00	; 0
    aa68:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <SetTile>
				ta->anims[i].tile_index = 0;
    aa6c:	19 86       	std	Y+9, r1	; 0x09
    aa6e:	18 86       	std	Y+8, r1	; 0x08
    aa70:	03 c0       	rjmp	.+6      	; 0xaa78 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    aa72:	a9 01       	movw	r20, r18
    aa74:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
    aa78:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    aa7a:	c0 17       	cp	r28, r16
    aa7c:	d1 07       	cpc	r29, r17
    aa7e:	01 f7       	brne	.-64     	; 0xaa40 <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    aa80:	df 91       	pop	r29
    aa82:	cf 91       	pop	r28
    aa84:	1f 91       	pop	r17
    aa86:	0f 91       	pop	r16
    aa88:	ff 90       	pop	r15
    aa8a:	ef 90       	pop	r14
    aa8c:	08 95       	ret

0000aa8e <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    aa8e:	cf 93       	push	r28
    aa90:	df 93       	push	r29
    aa92:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    aa94:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <LBGetNextFrameReverse>
    aa98:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    aa9a:	4c 81       	ldd	r20, Y+4	; 0x04
    aa9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa9e:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    aaa0:	6e e1       	ldi	r22, 0x1E	; 30
    aaa2:	70 e0       	ldi	r23, 0x00	; 0
    aaa4:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    aaa8:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    aaaa:	44 23       	and	r20, r20
    aaac:	19 f0       	breq	.+6      	; 0xaab4 <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    aaae:	49 ee       	ldi	r20, 0xE9	; 233
    aab0:	55 e7       	ldi	r21, 0x75	; 117
    aab2:	01 c0       	rjmp	.+2      	; 0xaab6 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    aab4:	a9 01       	movw	r20, r18
    aab6:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
	}
	return ta->anim.looped;
}
    aaba:	8c 81       	ldd	r24, Y+4	; 0x04
    aabc:	df 91       	pop	r29
    aabe:	cf 91       	pop	r28
    aac0:	08 95       	ret

0000aac2 <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    aac2:	1f 93       	push	r17
    aac4:	cf 93       	push	r28
    aac6:	df 93       	push	r29
    aac8:	ec 01       	movw	r28, r24
    aaca:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
    aacc:	8d 89       	ldd	r24, Y+21	; 0x15
    aace:	80 ff       	sbrs	r24, 0
    aad0:	17 c0       	rjmp	.+46     	; 0xab00 <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    aad2:	ce 01       	movw	r24, r28
    aad4:	83 59       	subi	r24, 0x93	; 147
    aad6:	9f 4f       	sbci	r25, 0xFF	; 255
    aad8:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    aadc:	fe 01       	movw	r30, r28
    aade:	ef 58       	subi	r30, 0x8F	; 143
    aae0:	ff 4f       	sbci	r31, 0xFF	; 255
    aae2:	20 81       	ld	r18, Z
    aae4:	22 23       	and	r18, r18
    aae6:	09 f4       	brne	.+2      	; 0xaaea <tank_map+0x28>
    aae8:	4a c0       	rjmp	.+148    	; 0xab7e <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    aaea:	8d 89       	ldd	r24, Y+21	; 0x15
    aaec:	91 e0       	ldi	r25, 0x01	; 1
    aaee:	98 27       	eor	r25, r24
    aaf0:	9d 8b       	std	Y+21, r25	; 0x15
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    aaf2:	ce 01       	movw	r24, r28
    aaf4:	0e 94 87 52 	call	0xa50e	; 0xa50e <player_spawn>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    aaf8:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    aafa:	89 e9       	ldi	r24, 0x99	; 153
    aafc:	9c e3       	ldi	r25, 0x3C	; 60
    aafe:	40 c0       	rjmp	.+128    	; 0xab80 <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    ab00:	9e 89       	ldd	r25, Y+22	; 0x16
    ab02:	98 37       	cpi	r25, 0x78	; 120
    ab04:	11 f0       	breq	.+4      	; 0xab0a <tank_map+0x48>
		{
			player->grace_frame++;
    ab06:	9f 5f       	subi	r25, 0xFF	; 255
    ab08:	9e 8b       	std	Y+22, r25	; 0x16
		}
		switch (player->shared.direction)
    ab0a:	98 81       	ld	r25, Y
    ab0c:	91 30       	cpi	r25, 0x01	; 1
    ab0e:	61 f0       	breq	.+24     	; 0xab28 <tank_map+0x66>
    ab10:	b0 f0       	brcs	.+44     	; 0xab3e <tank_map+0x7c>
    ab12:	92 30       	cpi	r25, 0x02	; 2
    ab14:	69 f0       	breq	.+26     	; 0xab30 <tank_map+0x6e>
    ab16:	93 30       	cpi	r25, 0x03	; 3
    ab18:	91 f4       	brne	.+36     	; 0xab3e <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    ab1a:	ce 01       	movw	r24, r28
    ab1c:	8f 59       	subi	r24, 0x9F	; 159
    ab1e:	9f 4f       	sbci	r25, 0xFF	; 255
    ab20:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <LBGetNextFrame>
    ab24:	41 e0       	ldi	r20, 0x01	; 1
    ab26:	11 c0       	rjmp	.+34     	; 0xab4a <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    ab28:	ce 01       	movw	r24, r28
    ab2a:	8f 59       	subi	r24, 0x9F	; 159
    ab2c:	9f 4f       	sbci	r25, 0xFF	; 255
    ab2e:	0a c0       	rjmp	.+20     	; 0xab44 <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    ab30:	ce 01       	movw	r24, r28
    ab32:	8b 5a       	subi	r24, 0xAB	; 171
    ab34:	9f 4f       	sbci	r25, 0xFF	; 255
    ab36:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <LBGetNextFrame>
    ab3a:	42 e0       	ldi	r20, 0x02	; 2
    ab3c:	06 c0       	rjmp	.+12     	; 0xab4a <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    ab3e:	ce 01       	movw	r24, r28
    ab40:	8b 5a       	subi	r24, 0xAB	; 171
    ab42:	9f 4f       	sbci	r25, 0xFF	; 255
    ab44:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <LBGetNextFrame>
    ab48:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    ab4a:	2e 89       	ldd	r18, Y+22	; 0x16
    ab4c:	28 37       	cpi	r18, 0x78	; 120
    ab4e:	31 f0       	breq	.+12     	; 0xab5c <tank_map+0x9a>
    ab50:	20 91 0d 0c 	lds	r18, 0x0C0D
    ab54:	22 23       	and	r18, r18
    ab56:	11 f0       	breq	.+4      	; 0xab5c <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    ab58:	89 e9       	ldi	r24, 0x99	; 153
    ab5a:	9c e3       	ldi	r25, 0x3C	; 60
		}
		game.toggle_counter--;
    ab5c:	20 91 0c 0c 	lds	r18, 0x0C0C
    ab60:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    ab62:	19 f0       	breq	.+6      	; 0xab6a <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    ab64:	20 93 0c 0c 	sts	0x0C0C, r18
    ab68:	0b c0       	rjmp	.+22     	; 0xab80 <tank_map+0xbe>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    ab6a:	24 e1       	ldi	r18, 0x14	; 20
    ab6c:	20 93 0c 0c 	sts	0x0C0C, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    ab70:	30 91 0d 0c 	lds	r19, 0x0C0D
    ab74:	21 e0       	ldi	r18, 0x01	; 1
    ab76:	23 27       	eor	r18, r19
    ab78:	20 93 0d 0c 	sts	0x0C0D, r18
    ab7c:	01 c0       	rjmp	.+2      	; 0xab80 <tank_map+0xbe>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    ab7e:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    ab80:	bc 01       	movw	r22, r24
    ab82:	81 2f       	mov	r24, r17
    ab84:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    ab88:	84 e0       	ldi	r24, 0x04	; 4
    ab8a:	81 0f       	add	r24, r17
    ab8c:	df 91       	pop	r29
    ab8e:	cf 91       	pop	r28
    ab90:	1f 91       	pop	r17
    ab92:	08 95       	ret

0000ab94 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    ab94:	cf 93       	push	r28
    ab96:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    ab98:	fc 01       	movw	r30, r24
    ab9a:	23 ad       	ldd	r18, Z+59	; 0x3b
    ab9c:	22 23       	and	r18, r18
    ab9e:	d9 f0       	breq	.+54     	; 0xabd6 <shot_map+0x42>
		{
			switch (shot->shared.direction)
    aba0:	25 a5       	ldd	r18, Z+45	; 0x2d
    aba2:	21 30       	cpi	r18, 0x01	; 1
    aba4:	59 f0       	breq	.+22     	; 0xabbc <shot_map+0x28>
    aba6:	a8 f0       	brcs	.+42     	; 0xabd2 <shot_map+0x3e>
    aba8:	22 30       	cpi	r18, 0x02	; 2
    abaa:	71 f0       	breq	.+28     	; 0xabc8 <shot_map+0x34>
    abac:	23 30       	cpi	r18, 0x03	; 3
    abae:	89 f4       	brne	.+34     	; 0xabd2 <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    abb0:	87 5b       	subi	r24, 0xB7	; 183
    abb2:	9f 4f       	sbci	r25, 0xFF	; 255
    abb4:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <LBGetNextFrame>
    abb8:	41 e0       	ldi	r20, 0x01	; 1
    abba:	10 c0       	rjmp	.+32     	; 0xabdc <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    abbc:	87 5b       	subi	r24, 0xB7	; 183
    abbe:	9f 4f       	sbci	r25, 0xFF	; 255
    abc0:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <LBGetNextFrame>
    abc4:	40 e0       	ldi	r20, 0x00	; 0
    abc6:	0a c0       	rjmp	.+20     	; 0xabdc <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    abc8:	cd 96       	adiw	r24, 0x3d	; 61
    abca:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <LBGetNextFrame>
    abce:	42 e0       	ldi	r20, 0x02	; 2
    abd0:	05 c0       	rjmp	.+10     	; 0xabdc <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    abd2:	cd 96       	adiw	r24, 0x3d	; 61
    abd4:	f5 cf       	rjmp	.-22     	; 0xabc0 <shot_map+0x2c>
    abd6:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    abd8:	89 e9       	ldi	r24, 0x99	; 153
    abda:	9c e3       	ldi	r25, 0x3C	; 60
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    abdc:	bc 01       	movw	r22, r24
    abde:	8c 2f       	mov	r24, r28
    abe0:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    abe4:	81 e0       	ldi	r24, 0x01	; 1
    abe6:	8c 0f       	add	r24, r28
    abe8:	cf 91       	pop	r28
    abea:	08 95       	ret

0000abec <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    abec:	cf 93       	push	r28
    abee:	df 93       	push	r29
    abf0:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    abf2:	88 81       	ld	r24, Y
    abf4:	81 11       	cpse	r24, r1
    abf6:	0b c0       	rjmp	.+22     	; 0xac0e <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    abf8:	6f 81       	ldd	r22, Y+7	; 0x07
    abfa:	78 85       	ldd	r23, Y+8	; 0x08
    abfc:	89 85       	ldd	r24, Y+9	; 0x09
    abfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac00:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    ac04:	66 95       	lsr	r22
    ac06:	66 95       	lsr	r22
    ac08:	66 95       	lsr	r22
    ac0a:	6f 5f       	subi	r22, 0xFF	; 255
    ac0c:	1d c0       	rjmp	.+58     	; 0xac48 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    ac0e:	81 30       	cpi	r24, 0x01	; 1
    ac10:	69 f4       	brne	.+26     	; 0xac2c <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    ac12:	20 e0       	ldi	r18, 0x00	; 0
    ac14:	30 e0       	ldi	r19, 0x00	; 0
    ac16:	40 e0       	ldi	r20, 0x00	; 0
    ac18:	5e e3       	ldi	r21, 0x3E	; 62
    ac1a:	6b 81       	ldd	r22, Y+3	; 0x03
    ac1c:	7c 81       	ldd	r23, Y+4	; 0x04
    ac1e:	8d 81       	ldd	r24, Y+5	; 0x05
    ac20:	9e 81       	ldd	r25, Y+6	; 0x06
    ac22:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    ac26:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    ac2a:	27 c0       	rjmp	.+78     	; 0xac7a <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    ac2c:	82 30       	cpi	r24, 0x02	; 2
    ac2e:	d9 f4       	brne	.+54     	; 0xac66 <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    ac30:	20 e0       	ldi	r18, 0x00	; 0
    ac32:	30 e0       	ldi	r19, 0x00	; 0
    ac34:	40 e0       	ldi	r20, 0x00	; 0
    ac36:	5e e3       	ldi	r21, 0x3E	; 62
    ac38:	6f 81       	ldd	r22, Y+7	; 0x07
    ac3a:	78 85       	ldd	r23, Y+8	; 0x08
    ac3c:	89 85       	ldd	r24, Y+9	; 0x09
    ac3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac40:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    ac44:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
		sprite->y = tile * 8;
    ac48:	88 e0       	ldi	r24, 0x08	; 8
    ac4a:	68 9f       	mul	r22, r24
    ac4c:	b0 01       	movw	r22, r0
    ac4e:	11 24       	eor	r1, r1
    ac50:	88 27       	eor	r24, r24
    ac52:	77 fd       	sbrc	r23, 7
    ac54:	80 95       	com	r24
    ac56:	98 2f       	mov	r25, r24
    ac58:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    ac5c:	6f 83       	std	Y+7, r22	; 0x07
    ac5e:	78 87       	std	Y+8, r23	; 0x08
    ac60:	89 87       	std	Y+9, r24	; 0x09
    ac62:	9a 87       	std	Y+10, r25	; 0x0a
    ac64:	18 c0       	rjmp	.+48     	; 0xac96 <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    ac66:	6b 81       	ldd	r22, Y+3	; 0x03
    ac68:	7c 81       	ldd	r23, Y+4	; 0x04
    ac6a:	8d 81       	ldd	r24, Y+5	; 0x05
    ac6c:	9e 81       	ldd	r25, Y+6	; 0x06
    ac6e:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    ac72:	66 95       	lsr	r22
    ac74:	66 95       	lsr	r22
    ac76:	66 95       	lsr	r22
    ac78:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    ac7a:	88 e0       	ldi	r24, 0x08	; 8
    ac7c:	68 9f       	mul	r22, r24
    ac7e:	b0 01       	movw	r22, r0
    ac80:	11 24       	eor	r1, r1
    ac82:	88 27       	eor	r24, r24
    ac84:	77 fd       	sbrc	r23, 7
    ac86:	80 95       	com	r24
    ac88:	98 2f       	mov	r25, r24
    ac8a:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    ac8e:	6b 83       	std	Y+3, r22	; 0x03
    ac90:	7c 83       	std	Y+4, r23	; 0x04
    ac92:	8d 83       	std	Y+5, r24	; 0x05
    ac94:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    ac96:	81 e0       	ldi	r24, 0x01	; 1
    ac98:	8a 83       	std	Y+2, r24	; 0x02
}
    ac9a:	df 91       	pop	r29
    ac9c:	cf 91       	pop	r28
    ac9e:	08 95       	ret

0000aca0 <recoil_sprite_fine>:

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    aca0:	cf 93       	push	r28
    aca2:	df 93       	push	r29
    aca4:	eb 01       	movw	r28, r22
	float speed = get_delta(p, sprite);
    aca6:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    acaa:	9b 01       	movw	r18, r22
    acac:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    acae:	88 81       	ld	r24, Y
    acb0:	81 11       	cpse	r24, r1
    acb2:	07 c0       	rjmp	.+14     	; 0xacc2 <recoil_sprite_fine+0x22>
	{
		sprite->y += speed;
    acb4:	6f 81       	ldd	r22, Y+7	; 0x07
    acb6:	78 85       	ldd	r23, Y+8	; 0x08
    acb8:	89 85       	ldd	r24, Y+9	; 0x09
    acba:	9a 85       	ldd	r25, Y+10	; 0x0a
    acbc:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    acc0:	11 c0       	rjmp	.+34     	; 0xace4 <recoil_sprite_fine+0x44>
	}
	else if (sprite->direction == D_RIGHT)
    acc2:	81 30       	cpi	r24, 0x01	; 1
    acc4:	39 f4       	brne	.+14     	; 0xacd4 <recoil_sprite_fine+0x34>
	{
		sprite->x -= speed;
    acc6:	6b 81       	ldd	r22, Y+3	; 0x03
    acc8:	7c 81       	ldd	r23, Y+4	; 0x04
    acca:	8d 81       	ldd	r24, Y+5	; 0x05
    accc:	9e 81       	ldd	r25, Y+6	; 0x06
    acce:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    acd2:	13 c0       	rjmp	.+38     	; 0xacfa <recoil_sprite_fine+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    acd4:	82 30       	cpi	r24, 0x02	; 2
    acd6:	59 f4       	brne	.+22     	; 0xacee <recoil_sprite_fine+0x4e>
	{
		sprite->y -= speed;
    acd8:	6f 81       	ldd	r22, Y+7	; 0x07
    acda:	78 85       	ldd	r23, Y+8	; 0x08
    acdc:	89 85       	ldd	r24, Y+9	; 0x09
    acde:	9a 85       	ldd	r25, Y+10	; 0x0a
    ace0:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    ace4:	6f 83       	std	Y+7, r22	; 0x07
    ace6:	78 87       	std	Y+8, r23	; 0x08
    ace8:	89 87       	std	Y+9, r24	; 0x09
    acea:	9a 87       	std	Y+10, r25	; 0x0a
    acec:	0a c0       	rjmp	.+20     	; 0xad02 <recoil_sprite_fine+0x62>
	}
	else
	{
		sprite->x += speed;
    acee:	6b 81       	ldd	r22, Y+3	; 0x03
    acf0:	7c 81       	ldd	r23, Y+4	; 0x04
    acf2:	8d 81       	ldd	r24, Y+5	; 0x05
    acf4:	9e 81       	ldd	r25, Y+6	; 0x06
    acf6:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    acfa:	6b 83       	std	Y+3, r22	; 0x03
    acfc:	7c 83       	std	Y+4, r23	; 0x04
    acfe:	8d 83       	std	Y+5, r24	; 0x05
    ad00:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    ad02:	81 e0       	ldi	r24, 0x01	; 1
    ad04:	8a 83       	std	Y+2, r24	; 0x02
}
    ad06:	df 91       	pop	r29
    ad08:	cf 91       	pop	r28
    ad0a:	08 95       	ret

0000ad0c <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    ad0c:	89 54       	subi	r24, 0x49	; 73
    ad0e:	93 4f       	sbci	r25, 0xF3	; 243
    ad10:	fc 01       	movw	r30, r24
    ad12:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    ad14:	81 30       	cpi	r24, 0x01	; 1
    ad16:	31 f0       	breq	.+12     	; 0xad24 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    ad18:	82 30       	cpi	r24, 0x02	; 2
    ad1a:	31 f0       	breq	.+12     	; 0xad28 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    ad1c:	87 33       	cpi	r24, 0x37	; 55
    ad1e:	31 f0       	breq	.+12     	; 0xad2c <solid_square_tile+0x20>

	return 0;
    ad20:	80 e0       	ldi	r24, 0x00	; 0
    ad22:	08 95       	ret
    ad24:	81 e0       	ldi	r24, 0x01	; 1
    ad26:	08 95       	ret
    ad28:	82 e0       	ldi	r24, 0x02	; 2
    ad2a:	08 95       	ret
    ad2c:	87 e3       	ldi	r24, 0x37	; 55
}
    ad2e:	08 95       	ret

0000ad30 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    ad30:	89 54       	subi	r24, 0x49	; 73
    ad32:	93 4f       	sbci	r25, 0xF3	; 243
    ad34:	fc 01       	movw	r30, r24
    ad36:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    ad38:	83 30       	cpi	r24, 0x03	; 3
    ad3a:	41 f0       	breq	.+16     	; 0xad4c <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    ad3c:	86 30       	cpi	r24, 0x06	; 6
    ad3e:	41 f0       	breq	.+16     	; 0xad50 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    ad40:	84 30       	cpi	r24, 0x04	; 4
    ad42:	41 f0       	breq	.+16     	; 0xad54 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    ad44:	85 30       	cpi	r24, 0x05	; 5
    ad46:	41 f0       	breq	.+16     	; 0xad58 <solid_directional_tile+0x28>
	
	return 0;
    ad48:	80 e0       	ldi	r24, 0x00	; 0
    ad4a:	08 95       	ret
    ad4c:	83 e0       	ldi	r24, 0x03	; 3
    ad4e:	08 95       	ret
    ad50:	86 e0       	ldi	r24, 0x06	; 6
    ad52:	08 95       	ret
    ad54:	84 e0       	ldi	r24, 0x04	; 4
    ad56:	08 95       	ret
    ad58:	85 e0       	ldi	r24, 0x05	; 5
}
    ad5a:	08 95       	ret

0000ad5c <solid_tile>:

u8 solid_tile(int tile_index)
{
    ad5c:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    ad5e:	fc 01       	movw	r30, r24
    ad60:	e9 54       	subi	r30, 0x49	; 73
    ad62:	f3 4f       	sbci	r31, 0xF3	; 243
    ad64:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    ad66:	91 30       	cpi	r25, 0x01	; 1
    ad68:	39 f0       	breq	.+14     	; 0xad78 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    ad6a:	92 30       	cpi	r25, 0x02	; 2
    ad6c:	39 f0       	breq	.+14     	; 0xad7c <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    ad6e:	97 33       	cpi	r25, 0x37	; 55
    ad70:	39 f0       	breq	.+14     	; 0xad80 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    ad72:	c9 01       	movw	r24, r18
    ad74:	0c 94 98 56 	jmp	0xad30	; 0xad30 <solid_directional_tile>
    ad78:	81 e0       	ldi	r24, 0x01	; 1
    ad7a:	08 95       	ret
    ad7c:	82 e0       	ldi	r24, 0x02	; 2
    ad7e:	08 95       	ret
    ad80:	87 e3       	ldi	r24, 0x37	; 55
}
    ad82:	08 95       	ret

0000ad84 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    ad84:	7f 92       	push	r7
    ad86:	8f 92       	push	r8
    ad88:	9f 92       	push	r9
    ad8a:	af 92       	push	r10
    ad8c:	bf 92       	push	r11
    ad8e:	cf 92       	push	r12
    ad90:	df 92       	push	r13
    ad92:	ef 92       	push	r14
    ad94:	ff 92       	push	r15
    ad96:	0f 93       	push	r16
    ad98:	1f 93       	push	r17
    ad9a:	cf 93       	push	r28
    ad9c:	df 93       	push	r29
    ad9e:	b6 2e       	mov	r11, r22
    ada0:	94 2e       	mov	r9, r20
    ada2:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    ada4:	fc 01       	movw	r30, r24
    ada6:	e9 54       	subi	r30, 0x49	; 73
    ada8:	f3 4f       	sbci	r31, 0xF3	; 243
    adaa:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    adac:	6e e1       	ldi	r22, 0x1E	; 30
    adae:	70 e0       	ldi	r23, 0x00	; 0
    adb0:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    adb4:	f8 2e       	mov	r15, r24
    adb6:	ff 0c       	add	r15, r15
    adb8:	ff 0c       	add	r15, r15
    adba:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    adbc:	6d 5f       	subi	r22, 0xFD	; 253
    adbe:	7f 4f       	sbci	r23, 0xFF	; 255
    adc0:	16 2f       	mov	r17, r22
    adc2:	11 0f       	add	r17, r17
    adc4:	11 0f       	add	r17, r17
    adc6:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    adc8:	83 e0       	ldi	r24, 0x03	; 3
    adca:	d8 16       	cp	r13, r24
    adcc:	19 f0       	breq	.+6      	; 0xadd4 <collides_directional_tile+0x50>
    adce:	86 e0       	ldi	r24, 0x06	; 6
    add0:	d8 12       	cpse	r13, r24
    add2:	31 c0       	rjmp	.+98     	; 0xae36 <collides_directional_tile+0xb2>
    add4:	cf ef       	ldi	r28, 0xFF	; 255
    add6:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    add8:	c9 0d       	add	r28, r9
    adda:	27 e0       	ldi	r18, 0x07	; 7
    addc:	72 2e       	mov	r7, r18
    adde:	7f 0c       	add	r7, r15
    ade0:	37 e0       	ldi	r19, 0x07	; 7
    ade2:	83 2e       	mov	r8, r19
    ade4:	81 0e       	add	r8, r17
    ade6:	ac 2e       	mov	r10, r28
    ade8:	cb 2c       	mov	r12, r11
    adea:	e9 2c       	mov	r14, r9
    adec:	0b 2d       	mov	r16, r11
    adee:	21 2f       	mov	r18, r17
    adf0:	47 2d       	mov	r20, r7
    adf2:	68 2d       	mov	r22, r8
    adf4:	8f 2d       	mov	r24, r15
    adf6:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <LBLineIntersect>
    adfa:	81 11       	cpse	r24, r1
    adfc:	58 c0       	rjmp	.+176    	; 0xaeae <collides_directional_tile+0x12a>
    adfe:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    ae00:	db 0d       	add	r29, r11
    ae02:	a9 2c       	mov	r10, r9
    ae04:	cd 2e       	mov	r12, r29
    ae06:	21 2f       	mov	r18, r17
    ae08:	47 2d       	mov	r20, r7
    ae0a:	68 2d       	mov	r22, r8
    ae0c:	8f 2d       	mov	r24, r15
    ae0e:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <LBLineIntersect>
    ae12:	81 11       	cpse	r24, r1
    ae14:	4c c0       	rjmp	.+152    	; 0xaeae <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    ae16:	ac 2e       	mov	r10, r28
    ae18:	0d 2f       	mov	r16, r29
    ae1a:	21 2f       	mov	r18, r17
    ae1c:	47 2d       	mov	r20, r7
    ae1e:	68 2d       	mov	r22, r8
    ae20:	8f 2d       	mov	r24, r15
    ae22:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <LBLineIntersect>
    ae26:	81 11       	cpse	r24, r1
    ae28:	42 c0       	rjmp	.+132    	; 0xaeae <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    ae2a:	ec 2e       	mov	r14, r28
    ae2c:	0b 2d       	mov	r16, r11
    ae2e:	21 2f       	mov	r18, r17
    ae30:	47 2d       	mov	r20, r7
    ae32:	68 2d       	mov	r22, r8
    ae34:	34 c0       	rjmp	.+104    	; 0xae9e <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    ae36:	8c ef       	ldi	r24, 0xFC	; 252
    ae38:	8d 0d       	add	r24, r13
    ae3a:	82 30       	cpi	r24, 0x02	; 2
    ae3c:	b0 f5       	brcc	.+108    	; 0xaeaa <collides_directional_tile+0x126>
    ae3e:	cf ef       	ldi	r28, 0xFF	; 255
    ae40:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    ae42:	c4 0f       	add	r28, r20
    ae44:	87 e0       	ldi	r24, 0x07	; 7
    ae46:	78 2e       	mov	r7, r24
    ae48:	71 0e       	add	r7, r17
    ae4a:	97 e0       	ldi	r25, 0x07	; 7
    ae4c:	89 2e       	mov	r8, r25
    ae4e:	8f 0c       	add	r8, r15
    ae50:	ac 2e       	mov	r10, r28
    ae52:	cb 2c       	mov	r12, r11
    ae54:	e4 2e       	mov	r14, r20
    ae56:	0b 2d       	mov	r16, r11
    ae58:	27 2d       	mov	r18, r7
    ae5a:	48 2d       	mov	r20, r8
    ae5c:	61 2f       	mov	r22, r17
    ae5e:	8f 2d       	mov	r24, r15
    ae60:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <LBLineIntersect>
    ae64:	81 11       	cpse	r24, r1
    ae66:	23 c0       	rjmp	.+70     	; 0xaeae <collides_directional_tile+0x12a>
    ae68:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    ae6a:	db 0d       	add	r29, r11
    ae6c:	a9 2c       	mov	r10, r9
    ae6e:	cd 2e       	mov	r12, r29
    ae70:	27 2d       	mov	r18, r7
    ae72:	48 2d       	mov	r20, r8
    ae74:	61 2f       	mov	r22, r17
    ae76:	8f 2d       	mov	r24, r15
    ae78:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <LBLineIntersect>
    ae7c:	81 11       	cpse	r24, r1
    ae7e:	17 c0       	rjmp	.+46     	; 0xaeae <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    ae80:	ac 2e       	mov	r10, r28
    ae82:	0d 2f       	mov	r16, r29
    ae84:	27 2d       	mov	r18, r7
    ae86:	48 2d       	mov	r20, r8
    ae88:	61 2f       	mov	r22, r17
    ae8a:	8f 2d       	mov	r24, r15
    ae8c:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <LBLineIntersect>
    ae90:	81 11       	cpse	r24, r1
    ae92:	0d c0       	rjmp	.+26     	; 0xaeae <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    ae94:	ec 2e       	mov	r14, r28
    ae96:	0b 2d       	mov	r16, r11
    ae98:	27 2d       	mov	r18, r7
    ae9a:	48 2d       	mov	r20, r8
    ae9c:	61 2f       	mov	r22, r17
    ae9e:	8f 2d       	mov	r24, r15
    aea0:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <LBLineIntersect>
    aea4:	81 11       	cpse	r24, r1
    aea6:	03 c0       	rjmp	.+6      	; 0xaeae <collides_directional_tile+0x12a>
    aea8:	03 c0       	rjmp	.+6      	; 0xaeb0 <collides_directional_tile+0x12c>
	}
	
	return 0;
    aeaa:	80 e0       	ldi	r24, 0x00	; 0
    aeac:	01 c0       	rjmp	.+2      	; 0xaeb0 <collides_directional_tile+0x12c>
    aeae:	8d 2d       	mov	r24, r13
}
    aeb0:	df 91       	pop	r29
    aeb2:	cf 91       	pop	r28
    aeb4:	1f 91       	pop	r17
    aeb6:	0f 91       	pop	r16
    aeb8:	ff 90       	pop	r15
    aeba:	ef 90       	pop	r14
    aebc:	df 90       	pop	r13
    aebe:	cf 90       	pop	r12
    aec0:	bf 90       	pop	r11
    aec2:	af 90       	pop	r10
    aec4:	9f 90       	pop	r9
    aec6:	8f 90       	pop	r8
    aec8:	7f 90       	pop	r7
    aeca:	08 95       	ret

0000aecc <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    aecc:	8f 92       	push	r8
    aece:	9f 92       	push	r9
    aed0:	af 92       	push	r10
    aed2:	cf 92       	push	r12
    aed4:	ef 92       	push	r14
    aed6:	0f 93       	push	r16
    aed8:	1f 93       	push	r17
    aeda:	cf 93       	push	r28
    aedc:	df 93       	push	r29
    aede:	4c 01       	movw	r8, r24
    aee0:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    aee2:	20 e0       	ldi	r18, 0x00	; 0
    aee4:	30 e0       	ldi	r19, 0x00	; 0
    aee6:	40 e0       	ldi	r20, 0x00	; 0
    aee8:	50 e4       	ldi	r21, 0x40	; 64
    aeea:	6f 81       	ldd	r22, Y+7	; 0x07
    aeec:	78 85       	ldd	r23, Y+8	; 0x08
    aeee:	89 85       	ldd	r24, Y+9	; 0x09
    aef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    aef2:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    aef6:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    aefa:	e6 2e       	mov	r14, r22
    aefc:	20 e0       	ldi	r18, 0x00	; 0
    aefe:	30 e0       	ldi	r19, 0x00	; 0
    af00:	40 e0       	ldi	r20, 0x00	; 0
    af02:	50 e4       	ldi	r21, 0x40	; 64
    af04:	6b 81       	ldd	r22, Y+3	; 0x03
    af06:	7c 81       	ldd	r23, Y+4	; 0x04
    af08:	8d 81       	ldd	r24, Y+5	; 0x05
    af0a:	9e 81       	ldd	r25, Y+6	; 0x06
    af0c:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    af10:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    af14:	06 2f       	mov	r16, r22
    af16:	20 e0       	ldi	r18, 0x00	; 0
    af18:	30 e0       	ldi	r19, 0x00	; 0
    af1a:	40 e8       	ldi	r20, 0x80	; 128
    af1c:	5f e3       	ldi	r21, 0x3F	; 63
    af1e:	f4 01       	movw	r30, r8
    af20:	67 81       	ldd	r22, Z+7	; 0x07
    af22:	70 85       	ldd	r23, Z+8	; 0x08
    af24:	81 85       	ldd	r24, Z+9	; 0x09
    af26:	92 85       	ldd	r25, Z+10	; 0x0a
    af28:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    af2c:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    af30:	16 2f       	mov	r17, r22
    af32:	20 e0       	ldi	r18, 0x00	; 0
    af34:	30 e0       	ldi	r19, 0x00	; 0
    af36:	40 e8       	ldi	r20, 0x80	; 128
    af38:	5f e3       	ldi	r21, 0x3F	; 63
    af3a:	f4 01       	movw	r30, r8
    af3c:	63 81       	ldd	r22, Z+3	; 0x03
    af3e:	74 81       	ldd	r23, Z+4	; 0x04
    af40:	85 81       	ldd	r24, Z+5	; 0x05
    af42:	96 81       	ldd	r25, Z+6	; 0x06
    af44:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    af48:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    af4c:	86 2f       	mov	r24, r22
    af4e:	94 e0       	ldi	r25, 0x04	; 4
    af50:	a9 2e       	mov	r10, r25
    af52:	24 e0       	ldi	r18, 0x04	; 4
    af54:	c2 2e       	mov	r12, r18
    af56:	2e e0       	ldi	r18, 0x0E	; 14
    af58:	4e e0       	ldi	r20, 0x0E	; 14
    af5a:	61 2f       	mov	r22, r17
    af5c:	0e 94 c7 4f 	call	0x9f8e	; 0x9f8e <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    af60:	88 23       	and	r24, r24
    af62:	41 f0       	breq	.+16     	; 0xaf74 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    af64:	f4 01       	movw	r30, r8
    af66:	86 89       	ldd	r24, Z+22	; 0x16
    af68:	88 37       	cpi	r24, 0x78	; 120
    af6a:	21 f4       	brne	.+8      	; 0xaf74 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    af6c:	81 e0       	ldi	r24, 0x01	; 1
    af6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    af70:	99 30       	cpi	r25, 0x09	; 9
    af72:	08 f4       	brcc	.+2      	; 0xaf76 <player_shot+0xaa>
    af74:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    af76:	df 91       	pop	r29
    af78:	cf 91       	pop	r28
    af7a:	1f 91       	pop	r17
    af7c:	0f 91       	pop	r16
    af7e:	ef 90       	pop	r14
    af80:	cf 90       	pop	r12
    af82:	af 90       	pop	r10
    af84:	9f 90       	pop	r9
    af86:	8f 90       	pop	r8
    af88:	08 95       	ret

0000af8a <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    af8a:	af 92       	push	r10
    af8c:	cf 92       	push	r12
    af8e:	ef 92       	push	r14
    af90:	0f 93       	push	r16
    af92:	1f 93       	push	r17
    af94:	cf 93       	push	r28
    af96:	df 93       	push	r29
    af98:	ec 01       	movw	r28, r24
    af9a:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    af9c:	20 e0       	ldi	r18, 0x00	; 0
    af9e:	30 e0       	ldi	r19, 0x00	; 0
    afa0:	40 e0       	ldi	r20, 0x00	; 0
    afa2:	50 e4       	ldi	r21, 0x40	; 64
    afa4:	fb 01       	movw	r30, r22
    afa6:	67 81       	ldd	r22, Z+7	; 0x07
    afa8:	70 85       	ldd	r23, Z+8	; 0x08
    afaa:	81 85       	ldd	r24, Z+9	; 0x09
    afac:	92 85       	ldd	r25, Z+10	; 0x0a
    afae:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    afb2:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    afb6:	e6 2e       	mov	r14, r22
    afb8:	20 e0       	ldi	r18, 0x00	; 0
    afba:	30 e0       	ldi	r19, 0x00	; 0
    afbc:	40 e0       	ldi	r20, 0x00	; 0
    afbe:	50 e4       	ldi	r21, 0x40	; 64
    afc0:	f8 01       	movw	r30, r16
    afc2:	63 81       	ldd	r22, Z+3	; 0x03
    afc4:	74 81       	ldd	r23, Z+4	; 0x04
    afc6:	85 81       	ldd	r24, Z+5	; 0x05
    afc8:	96 81       	ldd	r25, Z+6	; 0x06
    afca:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    afce:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    afd2:	06 2f       	mov	r16, r22
    afd4:	6f 81       	ldd	r22, Y+7	; 0x07
    afd6:	78 85       	ldd	r23, Y+8	; 0x08
    afd8:	89 85       	ldd	r24, Y+9	; 0x09
    afda:	9a 85       	ldd	r25, Y+10	; 0x0a
    afdc:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    afe0:	16 2f       	mov	r17, r22
    afe2:	6b 81       	ldd	r22, Y+3	; 0x03
    afe4:	7c 81       	ldd	r23, Y+4	; 0x04
    afe6:	8d 81       	ldd	r24, Y+5	; 0x05
    afe8:	9e 81       	ldd	r25, Y+6	; 0x06
    afea:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    afee:	86 2f       	mov	r24, r22
    aff0:	94 e0       	ldi	r25, 0x04	; 4
    aff2:	a9 2e       	mov	r10, r25
    aff4:	24 e0       	ldi	r18, 0x04	; 4
    aff6:	c2 2e       	mov	r12, r18
    aff8:	28 e0       	ldi	r18, 0x08	; 8
    affa:	48 e0       	ldi	r20, 0x08	; 8
    affc:	61 2f       	mov	r22, r17
    affe:	0e 94 c7 4f 	call	0x9f8e	; 0x9f8e <LBCollides>
    b002:	88 23       	and	r24, r24
    b004:	39 f0       	breq	.+14     	; 0xb014 <turret_shot+0x8a>
    b006:	91 e0       	ldi	r25, 0x01	; 1
    b008:	8b 85       	ldd	r24, Y+11	; 0x0b
    b00a:	81 11       	cpse	r24, r1
    b00c:	01 c0       	rjmp	.+2      	; 0xb010 <turret_shot+0x86>
    b00e:	90 e0       	ldi	r25, 0x00	; 0
    b010:	89 2f       	mov	r24, r25
    b012:	01 c0       	rjmp	.+2      	; 0xb016 <turret_shot+0x8c>
    b014:	80 e0       	ldi	r24, 0x00	; 0
}
    b016:	df 91       	pop	r29
    b018:	cf 91       	pop	r28
    b01a:	1f 91       	pop	r17
    b01c:	0f 91       	pop	r16
    b01e:	ef 90       	pop	r14
    b020:	cf 90       	pop	r12
    b022:	af 90       	pop	r10
    b024:	08 95       	ret

0000b026 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    b026:	cf 92       	push	r12
    b028:	df 92       	push	r13
    b02a:	ef 92       	push	r14
    b02c:	ff 92       	push	r15
    b02e:	cf 93       	push	r28
    b030:	df 93       	push	r29
    b032:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b034:	cb 80       	ldd	r12, Y+3	; 0x03
    b036:	dc 80       	ldd	r13, Y+4	; 0x04
    b038:	ed 80       	ldd	r14, Y+5	; 0x05
    b03a:	fe 80       	ldd	r15, Y+6	; 0x06
    b03c:	20 e0       	ldi	r18, 0x00	; 0
    b03e:	30 e0       	ldi	r19, 0x00	; 0
    b040:	a9 01       	movw	r20, r18
    b042:	c7 01       	movw	r24, r14
    b044:	b6 01       	movw	r22, r12
    b046:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    b04a:	87 fd       	sbrc	r24, 7
    b04c:	31 c0       	rjmp	.+98     	; 0xb0b0 <collision_detect_boundries+0x8a>
    b04e:	20 e0       	ldi	r18, 0x00	; 0
    b050:	30 e0       	ldi	r19, 0x00	; 0
    b052:	40 e0       	ldi	r20, 0x00	; 0
    b054:	51 e4       	ldi	r21, 0x41	; 65
    b056:	c7 01       	movw	r24, r14
    b058:	b6 01       	movw	r22, r12
    b05a:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b05e:	20 e0       	ldi	r18, 0x00	; 0
    b060:	30 e0       	ldi	r19, 0x00	; 0
    b062:	40 e7       	ldi	r20, 0x70	; 112
    b064:	53 e4       	ldi	r21, 0x43	; 67
    b066:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    b06a:	18 16       	cp	r1, r24
    b06c:	0c f1       	brlt	.+66     	; 0xb0b0 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b06e:	cf 80       	ldd	r12, Y+7	; 0x07
    b070:	d8 84       	ldd	r13, Y+8	; 0x08
    b072:	e9 84       	ldd	r14, Y+9	; 0x09
    b074:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b076:	20 e0       	ldi	r18, 0x00	; 0
    b078:	30 e0       	ldi	r19, 0x00	; 0
    b07a:	40 ec       	ldi	r20, 0xC0	; 192
    b07c:	51 e4       	ldi	r21, 0x41	; 65
    b07e:	c7 01       	movw	r24, r14
    b080:	b6 01       	movw	r22, r12
    b082:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    b086:	87 fd       	sbrc	r24, 7
    b088:	13 c0       	rjmp	.+38     	; 0xb0b0 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b08a:	20 e0       	ldi	r18, 0x00	; 0
    b08c:	30 e0       	ldi	r19, 0x00	; 0
    b08e:	40 e0       	ldi	r20, 0x00	; 0
    b090:	51 e4       	ldi	r21, 0x41	; 65
    b092:	c7 01       	movw	r24, r14
    b094:	b6 01       	movw	r22, r12
    b096:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b09a:	c1 e0       	ldi	r28, 0x01	; 1
    b09c:	20 e0       	ldi	r18, 0x00	; 0
    b09e:	30 e0       	ldi	r19, 0x00	; 0
    b0a0:	40 e6       	ldi	r20, 0x60	; 96
    b0a2:	53 e4       	ldi	r21, 0x43	; 67
    b0a4:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    b0a8:	18 16       	cp	r1, r24
    b0aa:	1c f0       	brlt	.+6      	; 0xb0b2 <collision_detect_boundries+0x8c>
    b0ac:	c0 e0       	ldi	r28, 0x00	; 0
    b0ae:	01 c0       	rjmp	.+2      	; 0xb0b2 <collision_detect_boundries+0x8c>
	{
		return 1;
    b0b0:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    b0b2:	8c 2f       	mov	r24, r28
    b0b4:	df 91       	pop	r29
    b0b6:	cf 91       	pop	r28
    b0b8:	ff 90       	pop	r15
    b0ba:	ef 90       	pop	r14
    b0bc:	df 90       	pop	r13
    b0be:	cf 90       	pop	r12
    b0c0:	08 95       	ret

0000b0c2 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    b0c2:	1f 93       	push	r17
    b0c4:	cf 93       	push	r28
    b0c6:	df 93       	push	r29
    b0c8:	9c 01       	movw	r18, r24
    b0ca:	fb 01       	movw	r30, r22
    b0cc:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    b0ce:	6e e1       	ldi	r22, 0x1E	; 30
    b0d0:	70 e0       	ldi	r23, 0x00	; 0
    b0d2:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    b0d6:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    b0d8:	63 e0       	ldi	r22, 0x03	; 3
    b0da:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    b0dc:	e9 01       	movw	r28, r18
    b0de:	c9 54       	subi	r28, 0x49	; 73
    b0e0:	d3 4f       	sbci	r29, 0xF3	; 243
    b0e2:	49 81       	ldd	r20, Y+1	; 0x01
    b0e4:	44 23       	and	r20, r20
    b0e6:	71 f0       	breq	.+28     	; 0xb104 <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    b0e8:	e9 01       	movw	r28, r18
    b0ea:	c8 54       	subi	r28, 0x48	; 72
    b0ec:	d3 4f       	sbci	r29, 0xF3	; 243
    b0ee:	49 81       	ldd	r20, Y+1	; 0x01
    b0f0:	44 23       	and	r20, r20
    b0f2:	91 f0       	breq	.+36     	; 0xb118 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    b0f4:	e9 01       	movw	r28, r18
    b0f6:	cb 52       	subi	r28, 0x2B	; 43
    b0f8:	d3 4f       	sbci	r29, 0xF3	; 243
    b0fa:	49 81       	ldd	r20, Y+1	; 0x01
    b0fc:	41 11       	cpse	r20, r1
    b0fe:	04 c0       	rjmp	.+8      	; 0xb108 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    b100:	64 e0       	ldi	r22, 0x04	; 4
    b102:	69 0f       	add	r22, r25
    b104:	af 01       	movw	r20, r30
    b106:	0a c0       	rjmp	.+20     	; 0xb11c <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    b108:	e9 01       	movw	r28, r18
    b10a:	ca 52       	subi	r28, 0x2A	; 42
    b10c:	d3 4f       	sbci	r29, 0xF3	; 243
    b10e:	29 81       	ldd	r18, Y+1	; 0x01
    b110:	21 11       	cpse	r18, r1
    b112:	07 c0       	rjmp	.+14     	; 0xb122 <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    b114:	64 e0       	ldi	r22, 0x04	; 4
    b116:	69 0f       	add	r22, r25
    b118:	af 01       	movw	r20, r30
    b11a:	8f 5f       	subi	r24, 0xFF	; 255
    b11c:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
		level.level_map[tile_index+31] = item_type;
    b120:	19 83       	std	Y+1, r17	; 0x01
	}
}
    b122:	df 91       	pop	r29
    b124:	cf 91       	pop	r28
    b126:	1f 91       	pop	r17
    b128:	08 95       	ret

0000b12a <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    b12a:	ff 92       	push	r15
    b12c:	0f 93       	push	r16
    b12e:	1f 93       	push	r17
    b130:	cf 93       	push	r28
    b132:	df 93       	push	r29
    b134:	ec 01       	movw	r28, r24
    b136:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    b138:	20 e0       	ldi	r18, 0x00	; 0
    b13a:	30 e0       	ldi	r19, 0x00	; 0
    b13c:	40 e0       	ldi	r20, 0x00	; 0
    b13e:	5e e3       	ldi	r21, 0x3E	; 62
    b140:	6f 81       	ldd	r22, Y+7	; 0x07
    b142:	78 85       	ldd	r23, Y+8	; 0x08
    b144:	89 85       	ldd	r24, Y+9	; 0x09
    b146:	9a 85       	ldd	r25, Y+10	; 0x0a
    b148:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    b14c:	20 e0       	ldi	r18, 0x00	; 0
    b14e:	30 e0       	ldi	r19, 0x00	; 0
    b150:	40 e4       	ldi	r20, 0x40	; 64
    b152:	50 e4       	ldi	r21, 0x40	; 64
    b154:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    b158:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
	int tile_index = (y * 30) + x;
    b15c:	8e e1       	ldi	r24, 0x1E	; 30
    b15e:	68 9f       	mul	r22, r24
    b160:	80 01       	movw	r16, r0
    b162:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    b164:	20 e0       	ldi	r18, 0x00	; 0
    b166:	30 e0       	ldi	r19, 0x00	; 0
    b168:	40 e0       	ldi	r20, 0x00	; 0
    b16a:	5e e3       	ldi	r21, 0x3E	; 62
    b16c:	6b 81       	ldd	r22, Y+3	; 0x03
    b16e:	7c 81       	ldd	r23, Y+4	; 0x04
    b170:	8d 81       	ldd	r24, Y+5	; 0x05
    b172:	9e 81       	ldd	r25, Y+6	; 0x06
    b174:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    b178:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    b17c:	06 0f       	add	r16, r22
    b17e:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    b180:	89 8d       	ldd	r24, Y+25	; 0x19
    b182:	88 23       	and	r24, r24
    b184:	79 f0       	breq	.+30     	; 0xb1a4 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    b186:	40 e0       	ldi	r20, 0x00	; 0
    b188:	50 e0       	ldi	r21, 0x00	; 0
    b18a:	61 e0       	ldi	r22, 0x01	; 1
    b18c:	8a e0       	ldi	r24, 0x0A	; 10
    b18e:	8f 0d       	add	r24, r15
    b190:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    b194:	47 e0       	ldi	r20, 0x07	; 7
    b196:	67 e0       	ldi	r22, 0x07	; 7
    b198:	76 e7       	ldi	r23, 0x76	; 118
    b19a:	c8 01       	movw	r24, r16
    b19c:	0e 94 61 58 	call	0xb0c2	; 0xb0c2 <drop_item>
		player->max_speed = MAX_SPEED;
    b1a0:	82 e3       	ldi	r24, 0x32	; 50
    b1a2:	8f 8b       	std	Y+23, r24	; 0x17
	}
	if (player->has_rocket)
    b1a4:	88 8d       	ldd	r24, Y+24	; 0x18
    b1a6:	88 23       	and	r24, r24
    b1a8:	69 f0       	breq	.+26     	; 0xb1c4 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    b1aa:	40 e0       	ldi	r20, 0x00	; 0
    b1ac:	50 e0       	ldi	r21, 0x00	; 0
    b1ae:	61 e0       	ldi	r22, 0x01	; 1
    b1b0:	8b e0       	ldi	r24, 0x0B	; 11
    b1b2:	8f 0d       	add	r24, r15
    b1b4:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    b1b8:	49 e0       	ldi	r20, 0x09	; 9
    b1ba:	61 e0       	ldi	r22, 0x01	; 1
    b1bc:	76 e7       	ldi	r23, 0x76	; 118
    b1be:	c8 01       	movw	r24, r16
    b1c0:	0e 94 61 58 	call	0xb0c2	; 0xb0c2 <drop_item>
	}
	player->has_over_speed = false;
    b1c4:	19 8e       	std	Y+25, r1	; 0x19
	player->has_rocket = false;
    b1c6:	18 8e       	std	Y+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    b1c8:	8d 89       	ldd	r24, Y+21	; 0x15
    b1ca:	81 60       	ori	r24, 0x01	; 1
    b1cc:	8d 8b       	std	Y+21, r24	; 0x15
}
    b1ce:	df 91       	pop	r29
    b1d0:	cf 91       	pop	r28
    b1d2:	1f 91       	pop	r17
    b1d4:	0f 91       	pop	r16
    b1d6:	ff 90       	pop	r15
    b1d8:	08 95       	ret

0000b1da <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    b1da:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    b1dc:	70 e0       	ldi	r23, 0x00	; 0
    b1de:	8e e1       	ldi	r24, 0x1E	; 30
    b1e0:	48 9f       	mul	r20, r24
    b1e2:	60 0d       	add	r22, r0
    b1e4:	71 1d       	adc	r23, r1
    b1e6:	11 24       	eor	r1, r1
	if (direction == D_UP)
    b1e8:	21 11       	cpse	r18, r1
    b1ea:	05 c0       	rjmp	.+10     	; 0xb1f6 <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    b1ec:	71 83       	std	Z+1, r23	; 0x01
    b1ee:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    b1f0:	6f 5f       	subi	r22, 0xFF	; 255
    b1f2:	7f 4f       	sbci	r23, 0xFF	; 255
    b1f4:	0c c0       	rjmp	.+24     	; 0xb20e <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    b1f6:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    b1f8:	21 30       	cpi	r18, 0x01	; 1
    b1fa:	11 f4       	brne	.+4      	; 0xb200 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    b1fc:	01 96       	adiw	r24, 0x01	; 1
    b1fe:	03 c0       	rjmp	.+6      	; 0xb206 <get_interesting_tile_indexes_shot+0x2c>
    b200:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    b202:	22 30       	cpi	r18, 0x02	; 2
    b204:	39 f4       	brne	.+14     	; 0xb214 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    b206:	91 83       	std	Z+1, r25	; 0x01
    b208:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    b20a:	61 5e       	subi	r22, 0xE1	; 225
    b20c:	7f 4f       	sbci	r23, 0xFF	; 255
    b20e:	73 83       	std	Z+3, r23	; 0x03
    b210:	62 83       	std	Z+2, r22	; 0x02
    b212:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    b214:	71 83       	std	Z+1, r23	; 0x01
    b216:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    b218:	93 83       	std	Z+3, r25	; 0x03
    b21a:	82 83       	std	Z+2, r24	; 0x02
    b21c:	08 95       	ret

0000b21e <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    b21e:	ef 92       	push	r14
    b220:	ff 92       	push	r15
    b222:	0f 93       	push	r16
    b224:	1f 93       	push	r17
    b226:	cf 93       	push	r28
    b228:	df 93       	push	r29
    b22a:	ec 01       	movw	r28, r24
    b22c:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    b22e:	8e e1       	ldi	r24, 0x1E	; 30
    b230:	e8 2e       	mov	r14, r24
    b232:	f1 2c       	mov	r15, r1
    b234:	cb 01       	movw	r24, r22
    b236:	b7 01       	movw	r22, r14
    b238:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    b23c:	6d 5f       	subi	r22, 0xFD	; 253
    b23e:	40 e0       	ldi	r20, 0x00	; 0
    b240:	50 e0       	ldi	r21, 0x00	; 0
    b242:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    b246:	88 81       	ld	r24, Y
    b248:	fe 01       	movw	r30, r28
    b24a:	9e e0       	ldi	r25, 0x0E	; 14
    b24c:	89 9f       	mul	r24, r25
    b24e:	e0 0d       	add	r30, r0
    b250:	f1 1d       	adc	r31, r1
    b252:	11 24       	eor	r1, r1
    b254:	85 85       	ldd	r24, Z+13	; 0x0d
    b256:	96 85       	ldd	r25, Z+14	; 0x0e
    b258:	00 97       	sbiw	r24, 0x00	; 0
    b25a:	41 f0       	breq	.+16     	; 0xb26c <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    b25c:	b7 01       	movw	r22, r14
    b25e:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    b262:	6d 5f       	subi	r22, 0xFD	; 253
    b264:	40 e0       	ldi	r20, 0x00	; 0
    b266:	50 e0       	ldi	r21, 0x00	; 0
    b268:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    b26c:	88 81       	ld	r24, Y
    b26e:	fe 01       	movw	r30, r28
    b270:	9e e0       	ldi	r25, 0x0E	; 14
    b272:	89 9f       	mul	r24, r25
    b274:	e0 0d       	add	r30, r0
    b276:	f1 1d       	adc	r31, r1
    b278:	11 24       	eor	r1, r1
    b27a:	16 87       	std	Z+14, r17	; 0x0e
    b27c:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    b27e:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    b280:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    b282:	82 30       	cpi	r24, 0x02	; 2
    b284:	11 f0       	breq	.+4      	; 0xb28a <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    b286:	88 83       	st	Y, r24
    b288:	01 c0       	rjmp	.+2      	; 0xb28c <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    b28a:	18 82       	st	Y, r1
	}
}
    b28c:	df 91       	pop	r29
    b28e:	cf 91       	pop	r28
    b290:	1f 91       	pop	r17
    b292:	0f 91       	pop	r16
    b294:	ff 90       	pop	r15
    b296:	ef 90       	pop	r14
    b298:	08 95       	ret

0000b29a <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    b29a:	fb 01       	movw	r30, r22
	switch (tile_type)
    b29c:	84 30       	cpi	r24, 0x04	; 4
    b29e:	71 f0       	breq	.+28     	; 0xb2bc <richochet+0x22>
    b2a0:	18 f4       	brcc	.+6      	; 0xb2a8 <richochet+0xe>
    b2a2:	83 30       	cpi	r24, 0x03	; 3
    b2a4:	31 f0       	breq	.+12     	; 0xb2b2 <richochet+0x18>
    b2a6:	08 95       	ret
    b2a8:	85 30       	cpi	r24, 0x05	; 5
    b2aa:	99 f0       	breq	.+38     	; 0xb2d2 <richochet+0x38>
    b2ac:	86 30       	cpi	r24, 0x06	; 6
    b2ae:	59 f0       	breq	.+22     	; 0xb2c6 <richochet+0x2c>
    b2b0:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b2b2:	80 81       	ld	r24, Z
    b2b4:	8d 7f       	andi	r24, 0xFD	; 253
    b2b6:	29 f4       	brne	.+10     	; 0xb2c2 <richochet+0x28>
				sprite->direction = D_RIGHT;
    b2b8:	81 e0       	ldi	r24, 0x01	; 1
    b2ba:	09 c0       	rjmp	.+18     	; 0xb2ce <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b2bc:	80 81       	ld	r24, Z
    b2be:	8d 7f       	andi	r24, 0xFD	; 253
    b2c0:	29 f0       	breq	.+10     	; 0xb2cc <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    b2c2:	82 e0       	ldi	r24, 0x02	; 2
    b2c4:	04 c0       	rjmp	.+8      	; 0xb2ce <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b2c6:	80 81       	ld	r24, Z
    b2c8:	8d 7f       	andi	r24, 0xFD	; 253
    b2ca:	31 f4       	brne	.+12     	; 0xb2d8 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    b2cc:	83 e0       	ldi	r24, 0x03	; 3
    b2ce:	80 83       	st	Z, r24
    b2d0:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b2d2:	80 81       	ld	r24, Z
    b2d4:	8d 7f       	andi	r24, 0xFD	; 253
    b2d6:	81 f3       	breq	.-32     	; 0xb2b8 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    b2d8:	10 82       	st	Z, r1
    b2da:	08 95       	ret

0000b2dc <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    b2dc:	2f 92       	push	r2
    b2de:	3f 92       	push	r3
    b2e0:	4f 92       	push	r4
    b2e2:	5f 92       	push	r5
    b2e4:	6f 92       	push	r6
    b2e6:	7f 92       	push	r7
    b2e8:	8f 92       	push	r8
    b2ea:	9f 92       	push	r9
    b2ec:	af 92       	push	r10
    b2ee:	bf 92       	push	r11
    b2f0:	cf 92       	push	r12
    b2f2:	df 92       	push	r13
    b2f4:	ef 92       	push	r14
    b2f6:	ff 92       	push	r15
    b2f8:	0f 93       	push	r16
    b2fa:	1f 93       	push	r17
    b2fc:	cf 93       	push	r28
    b2fe:	df 93       	push	r29
    b300:	00 d0       	rcall	.+0      	; 0xb302 <collision_detect_shot+0x26>
    b302:	00 d0       	rcall	.+0      	; 0xb304 <collision_detect_shot+0x28>
    b304:	1f 92       	push	r1
    b306:	cd b7       	in	r28, 0x3d	; 61
    b308:	de b7       	in	r29, 0x3e	; 62
    b30a:	3c 01       	movw	r6, r24
    b30c:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    b30e:	1a 82       	std	Y+2, r1	; 0x02
    b310:	19 82       	std	Y+1, r1	; 0x01
    b312:	1c 82       	std	Y+4, r1	; 0x04
    b314:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    b316:	20 e0       	ldi	r18, 0x00	; 0
    b318:	30 e0       	ldi	r19, 0x00	; 0
    b31a:	40 e0       	ldi	r20, 0x00	; 0
    b31c:	5e e3       	ldi	r21, 0x3E	; 62
    b31e:	db 01       	movw	r26, r22
    b320:	17 96       	adiw	r26, 0x07	; 7
    b322:	6d 91       	ld	r22, X+
    b324:	7d 91       	ld	r23, X+
    b326:	8d 91       	ld	r24, X+
    b328:	9c 91       	ld	r25, X
    b32a:	1a 97       	sbiw	r26, 0x0a	; 10
    b32c:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    b330:	20 e0       	ldi	r18, 0x00	; 0
    b332:	30 e0       	ldi	r19, 0x00	; 0
    b334:	40 e4       	ldi	r20, 0x40	; 64
    b336:	50 e4       	ldi	r21, 0x40	; 64
    b338:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    b33c:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    b340:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    b342:	20 e0       	ldi	r18, 0x00	; 0
    b344:	30 e0       	ldi	r19, 0x00	; 0
    b346:	40 e0       	ldi	r20, 0x00	; 0
    b348:	5e e3       	ldi	r21, 0x3E	; 62
    b34a:	f4 01       	movw	r30, r8
    b34c:	63 81       	ldd	r22, Z+3	; 0x03
    b34e:	74 81       	ldd	r23, Z+4	; 0x04
    b350:	85 81       	ldd	r24, Z+5	; 0x05
    b352:	96 81       	ldd	r25, Z+6	; 0x06
    b354:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    b358:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    b35c:	d4 01       	movw	r26, r8
    b35e:	2c 91       	ld	r18, X
    b360:	41 2f       	mov	r20, r17
    b362:	ce 01       	movw	r24, r28
    b364:	01 96       	adiw	r24, 0x01	; 1
    b366:	0e 94 ed 58 	call	0xb1da	; 0xb1da <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    b36a:	c4 01       	movw	r24, r8
    b36c:	0e 94 13 58 	call	0xb026	; 0xb026 <collision_detect_boundries>
    b370:	88 23       	and	r24, r24
    b372:	69 f0       	breq	.+26     	; 0xb38e <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    b374:	f4 01       	movw	r30, r8
    b376:	63 85       	ldd	r22, Z+11	; 0x0b
    b378:	c4 01       	movw	r24, r8
    b37a:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <init_shot_state>
		player->active_shots--;
    b37e:	d3 01       	movw	r26, r6
    b380:	51 96       	adiw	r26, 0x11	; 17
    b382:	8c 91       	ld	r24, X
    b384:	51 97       	sbiw	r26, 0x11	; 17
    b386:	81 50       	subi	r24, 0x01	; 1
    b388:	51 96       	adiw	r26, 0x11	; 17
    b38a:	8c 93       	st	X, r24
		return;
    b38c:	ab c1       	rjmp	.+854    	; 0xb6e4 <collision_detect_shot+0x408>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    b38e:	b4 01       	movw	r22, r8
    b390:	87 e3       	ldi	r24, 0x37	; 55
    b392:	9c e0       	ldi	r25, 0x0C	; 12
    b394:	0e 94 66 57 	call	0xaecc	; 0xaecc <player_shot>
    b398:	88 23       	and	r24, r24
    b39a:	b9 f0       	breq	.+46     	; 0xb3ca <collision_detect_shot+0xee>
    b39c:	80 91 4c 0c 	lds	r24, 0x0C4C
    b3a0:	80 fd       	sbrc	r24, 0
    b3a2:	13 c0       	rjmp	.+38     	; 0xb3ca <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    b3a4:	80 91 b6 0f 	lds	r24, 0x0FB6
    b3a8:	8f 5f       	subi	r24, 0xFF	; 255
    b3aa:	80 93 b6 0f 	sts	0x0FB6, r24
		player2.score++;
    b3ae:	80 91 b5 0f 	lds	r24, 0x0FB5
    b3b2:	8f 5f       	subi	r24, 0xFF	; 255
    b3b4:	80 93 b5 0f 	sts	0x0FB5, r24
		render_score(&player2, 15);
    b3b8:	6f e0       	ldi	r22, 0x0F	; 15
    b3ba:	86 ea       	ldi	r24, 0xA6	; 166
    b3bc:	9f e0       	ldi	r25, 0x0F	; 15
    b3be:	0e 94 a1 54 	call	0xa942	; 0xa942 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    b3c2:	07 e3       	ldi	r16, 0x37	; 55
    b3c4:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    b3c6:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    b3c8:	54 c0       	rjmp	.+168    	; 0xb472 <collision_detect_shot+0x196>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    b3ca:	b4 01       	movw	r22, r8
    b3cc:	86 ea       	ldi	r24, 0xA6	; 166
    b3ce:	9f e0       	ldi	r25, 0x0F	; 15
    b3d0:	0e 94 66 57 	call	0xaecc	; 0xaecc <player_shot>
    b3d4:	90 91 09 0c 	lds	r25, 0x0C09
    b3d8:	88 23       	and	r24, r24
    b3da:	d1 f0       	breq	.+52     	; 0xb410 <collision_detect_shot+0x134>
    b3dc:	80 91 bb 0f 	lds	r24, 0x0FBB
    b3e0:	80 fd       	sbrc	r24, 0
    b3e2:	16 c0       	rjmp	.+44     	; 0xb410 <collision_detect_shot+0x134>
    b3e4:	91 11       	cpse	r25, r1
    b3e6:	14 c0       	rjmp	.+40     	; 0xb410 <collision_detect_shot+0x134>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    b3e8:	80 91 47 0c 	lds	r24, 0x0C47
    b3ec:	8f 5f       	subi	r24, 0xFF	; 255
    b3ee:	80 93 47 0c 	sts	0x0C47, r24
		player1.score++;
    b3f2:	80 91 46 0c 	lds	r24, 0x0C46
    b3f6:	8f 5f       	subi	r24, 0xFF	; 255
    b3f8:	80 93 46 0c 	sts	0x0C46, r24
		render_score(&player1, 0);
    b3fc:	60 e0       	ldi	r22, 0x00	; 0
    b3fe:	87 e3       	ldi	r24, 0x37	; 55
    b400:	9c e0       	ldi	r25, 0x0C	; 12
    b402:	0e 94 a1 54 	call	0xa942	; 0xa942 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    b406:	06 ea       	ldi	r16, 0xA6	; 166
    b408:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    b40a:	6f e0       	ldi	r22, 0x0F	; 15
    b40c:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
    b40e:	31 c0       	rjmp	.+98     	; 0xb472 <collision_detect_shot+0x196>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    b410:	94 30       	cpi	r25, 0x04	; 4
    b412:	91 f5       	brne	.+100    	; 0xb478 <collision_detect_shot+0x19c>
	{
		if (turret_shot(&turret1, shot))
    b414:	b4 01       	movw	r22, r8
    b416:	8f e6       	ldi	r24, 0x6F	; 111
    b418:	90 e1       	ldi	r25, 0x10	; 16
    b41a:	0e 94 c5 57 	call	0xaf8a	; 0xaf8a <turret_shot>
    b41e:	88 23       	and	r24, r24
    b420:	41 f0       	breq	.+16     	; 0xb432 <collision_detect_shot+0x156>
		{
			turret1.lives--;
    b422:	80 91 7a 10 	lds	r24, 0x107A
    b426:	81 50       	subi	r24, 0x01	; 1
    b428:	80 93 7a 10 	sts	0x107A, r24
			init_shot_state(shot, shot->shot_type);
    b42c:	f4 01       	movw	r30, r8
    b42e:	63 85       	ldd	r22, Z+11	; 0x0b
    b430:	0f c0       	rjmp	.+30     	; 0xb450 <collision_detect_shot+0x174>
			game.boss_fight_player->active_shots--;
			SFX_TANK_EXPLODE;
		}
		else if (turret_shot(&turret2, shot))
    b432:	b4 01       	movw	r22, r8
    b434:	8b e3       	ldi	r24, 0x3B	; 59
    b436:	90 e1       	ldi	r25, 0x10	; 16
    b438:	0e 94 c5 57 	call	0xaf8a	; 0xaf8a <turret_shot>
    b43c:	88 23       	and	r24, r24
    b43e:	e1 f0       	breq	.+56     	; 0xb478 <collision_detect_shot+0x19c>
		{
			turret2.lives--;
    b440:	80 91 46 10 	lds	r24, 0x1046
    b444:	81 50       	subi	r24, 0x01	; 1
    b446:	80 93 46 10 	sts	0x1046, r24
			init_shot_state(shot, shot->shot_type);
    b44a:	d4 01       	movw	r26, r8
    b44c:	1b 96       	adiw	r26, 0x0b	; 11
    b44e:	6c 91       	ld	r22, X
    b450:	c4 01       	movw	r24, r8
    b452:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <init_shot_state>
			game.boss_fight_player->active_shots--;
    b456:	e0 91 15 0c 	lds	r30, 0x0C15
    b45a:	f0 91 16 0c 	lds	r31, 0x0C16
    b45e:	81 89       	ldd	r24, Z+17	; 0x11
    b460:	81 50       	subi	r24, 0x01	; 1
    b462:	81 8b       	std	Z+17, r24	; 0x11
			SFX_TANK_EXPLODE;
    b464:	2f ef       	ldi	r18, 0xFF	; 255
    b466:	40 e1       	ldi	r20, 0x10	; 16
    b468:	66 e0       	ldi	r22, 0x06	; 6
    b46a:	84 e0       	ldi	r24, 0x04	; 4
    b46c:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
    b470:	03 c0       	rjmp	.+6      	; 0xb478 <collision_detect_shot+0x19c>
		}
	}
	if (p)
    b472:	01 15       	cp	r16, r1
    b474:	11 05       	cpc	r17, r1
    b476:	59 f4       	brne	.+22     	; 0xb48e <collision_detect_shot+0x1b2>
    b478:	fe 01       	movw	r30, r28
    b47a:	31 96       	adiw	r30, 0x01	; 1
    b47c:	2f 01       	movw	r4, r30
    b47e:	1d 82       	std	Y+5, r1	; 0x05
    b480:	f1 2c       	mov	r15, r1
    b482:	d1 2c       	mov	r13, r1
    b484:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b486:	5e e1       	ldi	r21, 0x1E	; 30
    b488:	25 2e       	mov	r2, r21
    b48a:	31 2c       	mov	r3, r1
    b48c:	44 c0       	rjmp	.+136    	; 0xb516 <collision_detect_shot+0x23a>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    b48e:	d4 01       	movw	r26, r8
    b490:	1b 96       	adiw	r26, 0x0b	; 11
    b492:	6c 91       	ld	r22, X
    b494:	c4 01       	movw	r24, r8
    b496:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <init_shot_state>
		player->active_shots--;
    b49a:	f3 01       	movw	r30, r6
    b49c:	81 89       	ldd	r24, Z+17	; 0x11
    b49e:	81 50       	subi	r24, 0x01	; 1
    b4a0:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    b4a2:	6f 2d       	mov	r22, r15
    b4a4:	c8 01       	movw	r24, r16
    b4a6:	0e 94 95 58 	call	0xb12a	; 0xb12a <kill_player>
		SFX_TANK_EXPLODE;
    b4aa:	2f ef       	ldi	r18, 0xFF	; 255
    b4ac:	40 e1       	ldi	r20, 0x10	; 16
    b4ae:	66 e0       	ldi	r22, 0x06	; 6
    b4b0:	11 c1       	rjmp	.+546    	; 0xb6d4 <collision_detect_shot+0x3f8>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    b4b2:	c5 01       	movw	r24, r10
    b4b4:	0e 94 98 56 	call	0xad30	; 0xad30 <solid_directional_tile>
    b4b8:	88 23       	and	r24, r24
    b4ba:	c1 f1       	breq	.+112    	; 0xb52c <collision_detect_shot+0x250>
    b4bc:	20 e0       	ldi	r18, 0x00	; 0
    b4be:	30 e0       	ldi	r19, 0x00	; 0
    b4c0:	40 e0       	ldi	r20, 0x00	; 0
    b4c2:	50 e4       	ldi	r21, 0x40	; 64
    b4c4:	f4 01       	movw	r30, r8
    b4c6:	67 81       	ldd	r22, Z+7	; 0x07
    b4c8:	70 85       	ldd	r23, Z+8	; 0x08
    b4ca:	81 85       	ldd	r24, Z+9	; 0x09
    b4cc:	92 85       	ldd	r25, Z+10	; 0x0a
    b4ce:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b4d2:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    b4d6:	c6 2e       	mov	r12, r22
    b4d8:	20 e0       	ldi	r18, 0x00	; 0
    b4da:	30 e0       	ldi	r19, 0x00	; 0
    b4dc:	40 e0       	ldi	r20, 0x00	; 0
    b4de:	50 e4       	ldi	r21, 0x40	; 64
    b4e0:	d4 01       	movw	r26, r8
    b4e2:	13 96       	adiw	r26, 0x03	; 3
    b4e4:	6d 91       	ld	r22, X+
    b4e6:	7d 91       	ld	r23, X+
    b4e8:	8d 91       	ld	r24, X+
    b4ea:	9c 91       	ld	r25, X
    b4ec:	16 97       	sbiw	r26, 0x06	; 6
    b4ee:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b4f2:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    b4f6:	04 e0       	ldi	r16, 0x04	; 4
    b4f8:	24 e0       	ldi	r18, 0x04	; 4
    b4fa:	4c 2d       	mov	r20, r12
    b4fc:	c5 01       	movw	r24, r10
    b4fe:	0e 94 c2 56 	call	0xad84	; 0xad84 <collides_directional_tile>
    b502:	88 23       	and	r24, r24
    b504:	99 f0       	breq	.+38     	; 0xb52c <collision_detect_shot+0x250>
		{
			hit = hit | HIT_ANGLE;
    b506:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    b508:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    b50a:	bd 81       	ldd	r27, Y+5	; 0x05
    b50c:	b1 30       	cpi	r27, 0x01	; 1
    b50e:	09 f4       	brne	.+2      	; 0xb512 <collision_detect_shot+0x236>
    b510:	88 c0       	rjmp	.+272    	; 0xb622 <collision_detect_shot+0x346>
    b512:	f1 e0       	ldi	r31, 0x01	; 1
    b514:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    b516:	d2 01       	movw	r26, r4
    b518:	ad 90       	ld	r10, X+
    b51a:	bd 90       	ld	r11, X+
    b51c:	2d 01       	movw	r4, r26
    b51e:	f5 01       	movw	r30, r10
    b520:	e9 54       	subi	r30, 0x49	; 73
    b522:	f3 4f       	sbci	r31, 0xF3	; 243
    b524:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    b526:	ee 20       	and	r14, r14
    b528:	81 f3       	breq	.-32     	; 0xb50a <collision_detect_shot+0x22e>
    b52a:	c3 cf       	rjmp	.-122    	; 0xb4b2 <collision_detect_shot+0x1d6>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b52c:	b1 e0       	ldi	r27, 0x01	; 1
    b52e:	eb 12       	cpse	r14, r27
    b530:	3b c0       	rjmp	.+118    	; 0xb5a8 <collision_detect_shot+0x2cc>
    b532:	c5 01       	movw	r24, r10
    b534:	b1 01       	movw	r22, r2
    b536:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    b53a:	6d 5f       	subi	r22, 0xFD	; 253
    b53c:	7f 4f       	sbci	r23, 0xFF	; 255
    b53e:	e6 2e       	mov	r14, r22
    b540:	ee 0c       	add	r14, r14
    b542:	ee 0c       	add	r14, r14
    b544:	ee 0c       	add	r14, r14
    b546:	08 2f       	mov	r16, r24
    b548:	00 0f       	add	r16, r16
    b54a:	00 0f       	add	r16, r16
    b54c:	00 0f       	add	r16, r16
    b54e:	20 e0       	ldi	r18, 0x00	; 0
    b550:	30 e0       	ldi	r19, 0x00	; 0
    b552:	40 e0       	ldi	r20, 0x00	; 0
    b554:	50 e4       	ldi	r21, 0x40	; 64
    b556:	f4 01       	movw	r30, r8
    b558:	67 81       	ldd	r22, Z+7	; 0x07
    b55a:	70 85       	ldd	r23, Z+8	; 0x08
    b55c:	81 85       	ldd	r24, Z+9	; 0x09
    b55e:	92 85       	ldd	r25, Z+10	; 0x0a
    b560:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b564:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    b568:	b6 2e       	mov	r11, r22
    b56a:	20 e0       	ldi	r18, 0x00	; 0
    b56c:	30 e0       	ldi	r19, 0x00	; 0
    b56e:	40 e0       	ldi	r20, 0x00	; 0
    b570:	50 e4       	ldi	r21, 0x40	; 64
    b572:	d4 01       	movw	r26, r8
    b574:	13 96       	adiw	r26, 0x03	; 3
    b576:	6d 91       	ld	r22, X+
    b578:	7d 91       	ld	r23, X+
    b57a:	8d 91       	ld	r24, X+
    b57c:	9c 91       	ld	r25, X
    b57e:	16 97       	sbiw	r26, 0x06	; 6
    b580:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b584:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    b588:	86 2f       	mov	r24, r22
    b58a:	38 e0       	ldi	r19, 0x08	; 8
    b58c:	a3 2e       	mov	r10, r19
    b58e:	48 e0       	ldi	r20, 0x08	; 8
    b590:	c4 2e       	mov	r12, r20
    b592:	24 e0       	ldi	r18, 0x04	; 4
    b594:	44 e0       	ldi	r20, 0x04	; 4
    b596:	6b 2d       	mov	r22, r11
    b598:	0e 94 c7 4f 	call	0x9f8e	; 0x9f8e <LBCollides>
    b59c:	88 23       	and	r24, r24
    b59e:	09 f4       	brne	.+2      	; 0xb5a2 <collision_detect_shot+0x2c6>
    b5a0:	b4 cf       	rjmp	.-152    	; 0xb50a <collision_detect_shot+0x22e>
		{
			hit = hit | HIT_BRICK;
    b5a2:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    b5a4:	dd 80       	ldd	r13, Y+5	; 0x05
    b5a6:	b1 cf       	rjmp	.-158    	; 0xb50a <collision_detect_shot+0x22e>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b5a8:	b2 e0       	ldi	r27, 0x02	; 2
    b5aa:	eb 12       	cpse	r14, r27
    b5ac:	ae cf       	rjmp	.-164    	; 0xb50a <collision_detect_shot+0x22e>
    b5ae:	c5 01       	movw	r24, r10
    b5b0:	b1 01       	movw	r22, r2
    b5b2:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    b5b6:	6d 5f       	subi	r22, 0xFD	; 253
    b5b8:	7f 4f       	sbci	r23, 0xFF	; 255
    b5ba:	e6 2e       	mov	r14, r22
    b5bc:	ee 0c       	add	r14, r14
    b5be:	ee 0c       	add	r14, r14
    b5c0:	ee 0c       	add	r14, r14
    b5c2:	08 2f       	mov	r16, r24
    b5c4:	00 0f       	add	r16, r16
    b5c6:	00 0f       	add	r16, r16
    b5c8:	00 0f       	add	r16, r16
    b5ca:	20 e0       	ldi	r18, 0x00	; 0
    b5cc:	30 e0       	ldi	r19, 0x00	; 0
    b5ce:	40 e0       	ldi	r20, 0x00	; 0
    b5d0:	50 e4       	ldi	r21, 0x40	; 64
    b5d2:	f4 01       	movw	r30, r8
    b5d4:	67 81       	ldd	r22, Z+7	; 0x07
    b5d6:	70 85       	ldd	r23, Z+8	; 0x08
    b5d8:	81 85       	ldd	r24, Z+9	; 0x09
    b5da:	92 85       	ldd	r25, Z+10	; 0x0a
    b5dc:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b5e0:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    b5e4:	b6 2e       	mov	r11, r22
    b5e6:	20 e0       	ldi	r18, 0x00	; 0
    b5e8:	30 e0       	ldi	r19, 0x00	; 0
    b5ea:	40 e0       	ldi	r20, 0x00	; 0
    b5ec:	50 e4       	ldi	r21, 0x40	; 64
    b5ee:	d4 01       	movw	r26, r8
    b5f0:	13 96       	adiw	r26, 0x03	; 3
    b5f2:	6d 91       	ld	r22, X+
    b5f4:	7d 91       	ld	r23, X+
    b5f6:	8d 91       	ld	r24, X+
    b5f8:	9c 91       	ld	r25, X
    b5fa:	16 97       	sbiw	r26, 0x06	; 6
    b5fc:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b600:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    b604:	86 2f       	mov	r24, r22
    b606:	98 e0       	ldi	r25, 0x08	; 8
    b608:	a9 2e       	mov	r10, r25
    b60a:	28 e0       	ldi	r18, 0x08	; 8
    b60c:	c2 2e       	mov	r12, r18
    b60e:	24 e0       	ldi	r18, 0x04	; 4
    b610:	44 e0       	ldi	r20, 0x04	; 4
    b612:	6b 2d       	mov	r22, r11
    b614:	0e 94 c7 4f 	call	0x9f8e	; 0x9f8e <LBCollides>
    b618:	88 23       	and	r24, r24
    b61a:	09 f4       	brne	.+2      	; 0xb61e <collision_detect_shot+0x342>
    b61c:	76 cf       	rjmp	.-276    	; 0xb50a <collision_detect_shot+0x22e>
        {
		    hit = hit | HIT_METAL;
    b61e:	11 60       	ori	r17, 0x01	; 1
    b620:	74 cf       	rjmp	.-280    	; 0xb50a <collision_detect_shot+0x22e>
        }
	}
	
	if (hit & HIT_ANGLE)
    b622:	12 ff       	sbrs	r17, 2
    b624:	25 c0       	rjmp	.+74     	; 0xb670 <collision_detect_shot+0x394>
	{
		recoil_sprite_fine(player, &shot->shared);
    b626:	b4 01       	movw	r22, r8
    b628:	c3 01       	movw	r24, r6
    b62a:	0e 94 50 56 	call	0xaca0	; 0xaca0 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    b62e:	b4 01       	movw	r22, r8
    b630:	8f 2d       	mov	r24, r15
    b632:	0e 94 4d 59 	call	0xb29a	; 0xb29a <richochet>
		shot->rebounds--;
    b636:	f4 01       	movw	r30, r8
    b638:	85 85       	ldd	r24, Z+13	; 0x0d
    b63a:	81 50       	subi	r24, 0x01	; 1
    b63c:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    b63e:	81 11       	cpse	r24, r1
    b640:	0b c0       	rjmp	.+22     	; 0xb658 <collision_detect_shot+0x37c>
		{
			init_shot_state(shot, shot->shot_type);
    b642:	63 85       	ldd	r22, Z+11	; 0x0b
    b644:	c4 01       	movw	r24, r8
    b646:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <init_shot_state>
			player->active_shots--;
    b64a:	d3 01       	movw	r26, r6
    b64c:	51 96       	adiw	r26, 0x11	; 17
    b64e:	8c 91       	ld	r24, X
    b650:	51 97       	sbiw	r26, 0x11	; 17
    b652:	81 50       	subi	r24, 0x01	; 1
    b654:	51 96       	adiw	r26, 0x11	; 17
    b656:	8c 93       	st	X, r24
		}
		SFX_METAL;
    b658:	80 91 4c 0c 	lds	r24, 0x0C4C
    b65c:	80 fd       	sbrc	r24, 0
    b65e:	42 c0       	rjmp	.+132    	; 0xb6e4 <collision_detect_shot+0x408>
    b660:	80 91 bb 0f 	lds	r24, 0x0FBB
    b664:	80 fd       	sbrc	r24, 0
    b666:	3e c0       	rjmp	.+124    	; 0xb6e4 <collision_detect_shot+0x408>
    b668:	2f ef       	ldi	r18, 0xFF	; 255
    b66a:	47 e1       	ldi	r20, 0x17	; 23
    b66c:	63 e0       	ldi	r22, 0x03	; 3
    b66e:	32 c0       	rjmp	.+100    	; 0xb6d4 <collision_detect_shot+0x3f8>
	}
	else if (hit & HIT_BRICK)
    b670:	11 ff       	sbrs	r17, 1
    b672:	34 c0       	rjmp	.+104    	; 0xb6dc <collision_detect_shot+0x400>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    b674:	fe 01       	movw	r30, r28
    b676:	31 96       	adiw	r30, 0x01	; 1
    b678:	7f 01       	movw	r14, r30
    b67a:	ed 0c       	add	r14, r13
    b67c:	f1 1c       	adc	r15, r1
    b67e:	ed 0c       	add	r14, r13
    b680:	f1 1c       	adc	r15, r1
    b682:	d7 01       	movw	r26, r14
    b684:	6d 91       	ld	r22, X+
    b686:	7c 91       	ld	r23, X
    b688:	8a e1       	ldi	r24, 0x1A	; 26
    b68a:	9c e0       	ldi	r25, 0x0C	; 12
    b68c:	0e 94 0f 59 	call	0xb21e	; 0xb21e <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    b690:	d7 01       	movw	r26, r14
    b692:	ed 91       	ld	r30, X+
    b694:	fc 91       	ld	r31, X
    b696:	e9 54       	subi	r30, 0x49	; 73
    b698:	f3 4f       	sbci	r31, 0xF3	; 243
    b69a:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    b69c:	f4 01       	movw	r30, r8
    b69e:	84 85       	ldd	r24, Z+12	; 0x0c
    b6a0:	81 50       	subi	r24, 0x01	; 1
    b6a2:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    b6a4:	81 11       	cpse	r24, r1
    b6a6:	0b c0       	rjmp	.+22     	; 0xb6be <collision_detect_shot+0x3e2>
		{
			init_shot_state(shot, shot->shot_type);
    b6a8:	63 85       	ldd	r22, Z+11	; 0x0b
    b6aa:	c4 01       	movw	r24, r8
    b6ac:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <init_shot_state>
			player->active_shots--;
    b6b0:	d3 01       	movw	r26, r6
    b6b2:	51 96       	adiw	r26, 0x11	; 17
    b6b4:	8c 91       	ld	r24, X
    b6b6:	51 97       	sbiw	r26, 0x11	; 17
    b6b8:	81 50       	subi	r24, 0x01	; 1
    b6ba:	51 96       	adiw	r26, 0x11	; 17
    b6bc:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    b6be:	80 91 4c 0c 	lds	r24, 0x0C4C
    b6c2:	80 fd       	sbrc	r24, 0
    b6c4:	0f c0       	rjmp	.+30     	; 0xb6e4 <collision_detect_shot+0x408>
    b6c6:	80 91 bb 0f 	lds	r24, 0x0FBB
    b6ca:	80 fd       	sbrc	r24, 0
    b6cc:	0b c0       	rjmp	.+22     	; 0xb6e4 <collision_detect_shot+0x408>
    b6ce:	2f ed       	ldi	r18, 0xDF	; 223
    b6d0:	47 e1       	ldi	r20, 0x17	; 23
    b6d2:	60 e0       	ldi	r22, 0x00	; 0
    b6d4:	84 e0       	ldi	r24, 0x04	; 4
    b6d6:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
    b6da:	04 c0       	rjmp	.+8      	; 0xb6e4 <collision_detect_shot+0x408>
	}
	else if (hit & HIT_METAL)
    b6dc:	10 ff       	sbrs	r17, 0
    b6de:	02 c0       	rjmp	.+4      	; 0xb6e4 <collision_detect_shot+0x408>
	{
        init_shot_state(shot, shot->shot_type);
    b6e0:	f4 01       	movw	r30, r8
    b6e2:	af cf       	rjmp	.-162    	; 0xb642 <collision_detect_shot+0x366>
        player->active_shots--;
        SFX_METAL;
	}
}
    b6e4:	0f 90       	pop	r0
    b6e6:	0f 90       	pop	r0
    b6e8:	0f 90       	pop	r0
    b6ea:	0f 90       	pop	r0
    b6ec:	0f 90       	pop	r0
    b6ee:	df 91       	pop	r29
    b6f0:	cf 91       	pop	r28
    b6f2:	1f 91       	pop	r17
    b6f4:	0f 91       	pop	r16
    b6f6:	ff 90       	pop	r15
    b6f8:	ef 90       	pop	r14
    b6fa:	df 90       	pop	r13
    b6fc:	cf 90       	pop	r12
    b6fe:	bf 90       	pop	r11
    b700:	af 90       	pop	r10
    b702:	9f 90       	pop	r9
    b704:	8f 90       	pop	r8
    b706:	7f 90       	pop	r7
    b708:	6f 90       	pop	r6
    b70a:	5f 90       	pop	r5
    b70c:	4f 90       	pop	r4
    b70e:	3f 90       	pop	r3
    b710:	2f 90       	pop	r2
    b712:	08 95       	ret

0000b714 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    b714:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    b716:	70 e0       	ldi	r23, 0x00	; 0
    b718:	8e e1       	ldi	r24, 0x1E	; 30
    b71a:	48 9f       	mul	r20, r24
    b71c:	60 0d       	add	r22, r0
    b71e:	71 1d       	adc	r23, r1
    b720:	11 24       	eor	r1, r1
	if (direction == D_UP)
    b722:	21 11       	cpse	r18, r1
    b724:	09 c0       	rjmp	.+18     	; 0xb738 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    b726:	71 83       	std	Z+1, r23	; 0x01
    b728:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    b72a:	cb 01       	movw	r24, r22
    b72c:	01 96       	adiw	r24, 0x01	; 1
    b72e:	93 83       	std	Z+3, r25	; 0x03
    b730:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    b732:	6e 5f       	subi	r22, 0xFE	; 254
    b734:	7f 4f       	sbci	r23, 0xFF	; 255
    b736:	12 c0       	rjmp	.+36     	; 0xb75c <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    b738:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    b73a:	21 30       	cpi	r18, 0x01	; 1
    b73c:	29 f4       	brne	.+10     	; 0xb748 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    b73e:	02 96       	adiw	r24, 0x02	; 2
    b740:	91 83       	std	Z+1, r25	; 0x01
    b742:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    b744:	4e 96       	adiw	r24, 0x1e	; 30
    b746:	06 c0       	rjmp	.+12     	; 0xb754 <get_interesting_tile_indexes+0x40>
    b748:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    b74a:	22 30       	cpi	r18, 0x02	; 2
    b74c:	51 f4       	brne	.+20     	; 0xb762 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    b74e:	91 83       	std	Z+1, r25	; 0x01
    b750:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    b752:	01 96       	adiw	r24, 0x01	; 1
    b754:	93 83       	std	Z+3, r25	; 0x03
    b756:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    b758:	62 5c       	subi	r22, 0xC2	; 194
    b75a:	7f 4f       	sbci	r23, 0xFF	; 255
    b75c:	75 83       	std	Z+5, r23	; 0x05
    b75e:	64 83       	std	Z+4, r22	; 0x04
    b760:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    b762:	71 83       	std	Z+1, r23	; 0x01
    b764:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    b766:	62 5e       	subi	r22, 0xE2	; 226
    b768:	7f 4f       	sbci	r23, 0xFF	; 255
    b76a:	73 83       	std	Z+3, r23	; 0x03
    b76c:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    b76e:	95 83       	std	Z+5, r25	; 0x05
    b770:	84 83       	std	Z+4, r24	; 0x04
    b772:	08 95       	ret

0000b774 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    b774:	1f 93       	push	r17
    b776:	cf 93       	push	r28
    b778:	df 93       	push	r29
    b77a:	fc 01       	movw	r30, r24
    b77c:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    b77e:	55 96       	adiw	r26, 0x15	; 21
    b780:	8c 91       	ld	r24, X
    b782:	55 97       	sbiw	r26, 0x15	; 21
    b784:	80 fd       	sbrc	r24, 0
    b786:	13 c0       	rjmp	.+38     	; 0xb7ae <explode_player+0x3a>
    b788:	12 2f       	mov	r17, r18
    b78a:	64 2f       	mov	r22, r20
    b78c:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    b78e:	80 89       	ldd	r24, Z+16	; 0x10
    b790:	8f 5f       	subi	r24, 0xFF	; 255
    b792:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    b794:	87 85       	ldd	r24, Z+15	; 0x0f
    b796:	8f 5f       	subi	r24, 0xFF	; 255
    b798:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    b79a:	cf 01       	movw	r24, r30
    b79c:	0e 94 a1 54 	call	0xa942	; 0xa942 <render_score>
		kill_player(other_player, other_player_hud_x);
    b7a0:	61 2f       	mov	r22, r17
    b7a2:	ce 01       	movw	r24, r28
	}
}
    b7a4:	df 91       	pop	r29
    b7a6:	cf 91       	pop	r28
    b7a8:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    b7aa:	0c 94 95 58 	jmp	0xb12a	; 0xb12a <kill_player>
	}
}
    b7ae:	df 91       	pop	r29
    b7b0:	cf 91       	pop	r28
    b7b2:	1f 91       	pop	r17
    b7b4:	08 95       	ret

0000b7b6 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    b7b6:	cf 92       	push	r12
    b7b8:	df 92       	push	r13
    b7ba:	ef 92       	push	r14
    b7bc:	ff 92       	push	r15
    b7be:	cf 93       	push	r28
    b7c0:	df 93       	push	r29
    b7c2:	ec 01       	movw	r28, r24
    b7c4:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    b7c6:	98 81       	ld	r25, Y
    b7c8:	9d 7f       	andi	r25, 0xFD	; 253
    b7ca:	09 f0       	breq	.+2      	; 0xb7ce <slide+0x18>
    b7cc:	54 c0       	rjmp	.+168    	; 0xb876 <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    b7ce:	ca 01       	movw	r24, r20
    b7d0:	6e e1       	ldi	r22, 0x1E	; 30
    b7d2:	70 e0       	ldi	r23, 0x00	; 0
    b7d4:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    b7d8:	88 0f       	add	r24, r24
    b7da:	88 0f       	add	r24, r24
    b7dc:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    b7de:	21 11       	cpse	r18, r1
    b7e0:	22 c0       	rjmp	.+68     	; 0xb826 <slide+0x70>
    b7e2:	cb 80       	ldd	r12, Y+3	; 0x03
    b7e4:	dc 80       	ldd	r13, Y+4	; 0x04
    b7e6:	ed 80       	ldd	r14, Y+5	; 0x05
    b7e8:	fe 80       	ldd	r15, Y+6	; 0x06
    b7ea:	68 2f       	mov	r22, r24
    b7ec:	70 e0       	ldi	r23, 0x00	; 0
    b7ee:	80 e0       	ldi	r24, 0x00	; 0
    b7f0:	90 e0       	ldi	r25, 0x00	; 0
    b7f2:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    b7f6:	9b 01       	movw	r18, r22
    b7f8:	ac 01       	movw	r20, r24
    b7fa:	c7 01       	movw	r24, r14
    b7fc:	b6 01       	movw	r22, r12
    b7fe:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    b802:	20 e0       	ldi	r18, 0x00	; 0
    b804:	30 e0       	ldi	r19, 0x00	; 0
    b806:	40 e8       	ldi	r20, 0x80	; 128
    b808:	50 e4       	ldi	r21, 0x40	; 64
    b80a:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    b80e:	18 16       	cp	r1, r24
    b810:	0c f0       	brlt	.+2      	; 0xb814 <slide+0x5e>
    b812:	85 c0       	rjmp	.+266    	; 0xb91e <slide+0x168>
			player->shared.x++; 
    b814:	20 e0       	ldi	r18, 0x00	; 0
    b816:	30 e0       	ldi	r19, 0x00	; 0
    b818:	40 e8       	ldi	r20, 0x80	; 128
    b81a:	5f e3       	ldi	r21, 0x3F	; 63
    b81c:	c7 01       	movw	r24, r14
    b81e:	b6 01       	movw	r22, r12
    b820:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b824:	23 c0       	rjmp	.+70     	; 0xb86c <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    b826:	22 30       	cpi	r18, 0x02	; 2
    b828:	09 f0       	breq	.+2      	; 0xb82c <slide+0x76>
    b82a:	79 c0       	rjmp	.+242    	; 0xb91e <slide+0x168>
    b82c:	cb 80       	ldd	r12, Y+3	; 0x03
    b82e:	dc 80       	ldd	r13, Y+4	; 0x04
    b830:	ed 80       	ldd	r14, Y+5	; 0x05
    b832:	fe 80       	ldd	r15, Y+6	; 0x06
    b834:	68 2f       	mov	r22, r24
    b836:	70 e0       	ldi	r23, 0x00	; 0
    b838:	80 e0       	ldi	r24, 0x00	; 0
    b83a:	90 e0       	ldi	r25, 0x00	; 0
    b83c:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    b840:	9b 01       	movw	r18, r22
    b842:	ac 01       	movw	r20, r24
    b844:	c7 01       	movw	r24, r14
    b846:	b6 01       	movw	r22, r12
    b848:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    b84c:	20 e0       	ldi	r18, 0x00	; 0
    b84e:	30 e0       	ldi	r19, 0x00	; 0
    b850:	40 e4       	ldi	r20, 0x40	; 64
    b852:	51 ec       	ldi	r21, 0xC1	; 193
    b854:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    b858:	87 ff       	sbrs	r24, 7
    b85a:	61 c0       	rjmp	.+194    	; 0xb91e <slide+0x168>
			player->shared.x--;
    b85c:	20 e0       	ldi	r18, 0x00	; 0
    b85e:	30 e0       	ldi	r19, 0x00	; 0
    b860:	40 e8       	ldi	r20, 0x80	; 128
    b862:	5f e3       	ldi	r21, 0x3F	; 63
    b864:	c7 01       	movw	r24, r14
    b866:	b6 01       	movw	r22, r12
    b868:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    b86c:	6b 83       	std	Y+3, r22	; 0x03
    b86e:	7c 83       	std	Y+4, r23	; 0x04
    b870:	8d 83       	std	Y+5, r24	; 0x05
    b872:	9e 83       	std	Y+6, r25	; 0x06
    b874:	54 c0       	rjmp	.+168    	; 0xb91e <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    b876:	ca 01       	movw	r24, r20
    b878:	6e e1       	ldi	r22, 0x1E	; 30
    b87a:	70 e0       	ldi	r23, 0x00	; 0
    b87c:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    b880:	ab 01       	movw	r20, r22
    b882:	4d 5f       	subi	r20, 0xFD	; 253
    b884:	5f 4f       	sbci	r21, 0xFF	; 255
    b886:	44 0f       	add	r20, r20
    b888:	44 0f       	add	r20, r20
    b88a:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    b88c:	21 11       	cpse	r18, r1
    b88e:	21 c0       	rjmp	.+66     	; 0xb8d2 <slide+0x11c>
    b890:	cf 80       	ldd	r12, Y+7	; 0x07
    b892:	d8 84       	ldd	r13, Y+8	; 0x08
    b894:	e9 84       	ldd	r14, Y+9	; 0x09
    b896:	fa 84       	ldd	r15, Y+10	; 0x0a
    b898:	64 2f       	mov	r22, r20
    b89a:	70 e0       	ldi	r23, 0x00	; 0
    b89c:	80 e0       	ldi	r24, 0x00	; 0
    b89e:	90 e0       	ldi	r25, 0x00	; 0
    b8a0:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    b8a4:	9b 01       	movw	r18, r22
    b8a6:	ac 01       	movw	r20, r24
    b8a8:	c7 01       	movw	r24, r14
    b8aa:	b6 01       	movw	r22, r12
    b8ac:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    b8b0:	20 e0       	ldi	r18, 0x00	; 0
    b8b2:	30 e0       	ldi	r19, 0x00	; 0
    b8b4:	40 e8       	ldi	r20, 0x80	; 128
    b8b6:	50 e4       	ldi	r21, 0x40	; 64
    b8b8:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    b8bc:	18 16       	cp	r1, r24
    b8be:	7c f5       	brge	.+94     	; 0xb91e <slide+0x168>
			player->shared.y++;
    b8c0:	20 e0       	ldi	r18, 0x00	; 0
    b8c2:	30 e0       	ldi	r19, 0x00	; 0
    b8c4:	40 e8       	ldi	r20, 0x80	; 128
    b8c6:	5f e3       	ldi	r21, 0x3F	; 63
    b8c8:	c7 01       	movw	r24, r14
    b8ca:	b6 01       	movw	r22, r12
    b8cc:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    b8d0:	22 c0       	rjmp	.+68     	; 0xb916 <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    b8d2:	22 30       	cpi	r18, 0x02	; 2
    b8d4:	21 f5       	brne	.+72     	; 0xb91e <slide+0x168>
    b8d6:	cf 80       	ldd	r12, Y+7	; 0x07
    b8d8:	d8 84       	ldd	r13, Y+8	; 0x08
    b8da:	e9 84       	ldd	r14, Y+9	; 0x09
    b8dc:	fa 84       	ldd	r15, Y+10	; 0x0a
    b8de:	64 2f       	mov	r22, r20
    b8e0:	70 e0       	ldi	r23, 0x00	; 0
    b8e2:	80 e0       	ldi	r24, 0x00	; 0
    b8e4:	90 e0       	ldi	r25, 0x00	; 0
    b8e6:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    b8ea:	9b 01       	movw	r18, r22
    b8ec:	ac 01       	movw	r20, r24
    b8ee:	c7 01       	movw	r24, r14
    b8f0:	b6 01       	movw	r22, r12
    b8f2:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    b8f6:	20 e0       	ldi	r18, 0x00	; 0
    b8f8:	30 e0       	ldi	r19, 0x00	; 0
    b8fa:	40 e4       	ldi	r20, 0x40	; 64
    b8fc:	51 ec       	ldi	r21, 0xC1	; 193
    b8fe:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    b902:	87 ff       	sbrs	r24, 7
    b904:	0c c0       	rjmp	.+24     	; 0xb91e <slide+0x168>
			player->shared.y--;
    b906:	20 e0       	ldi	r18, 0x00	; 0
    b908:	30 e0       	ldi	r19, 0x00	; 0
    b90a:	40 e8       	ldi	r20, 0x80	; 128
    b90c:	5f e3       	ldi	r21, 0x3F	; 63
    b90e:	c7 01       	movw	r24, r14
    b910:	b6 01       	movw	r22, r12
    b912:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    b916:	6f 83       	std	Y+7, r22	; 0x07
    b918:	78 87       	std	Y+8, r23	; 0x08
    b91a:	89 87       	std	Y+9, r24	; 0x09
    b91c:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    b91e:	df 91       	pop	r29
    b920:	cf 91       	pop	r28
    b922:	ff 90       	pop	r15
    b924:	ef 90       	pop	r14
    b926:	df 90       	pop	r13
    b928:	cf 90       	pop	r12
    b92a:	08 95       	ret

0000b92c <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    b92c:	2f 92       	push	r2
    b92e:	3f 92       	push	r3
    b930:	4f 92       	push	r4
    b932:	5f 92       	push	r5
    b934:	6f 92       	push	r6
    b936:	7f 92       	push	r7
    b938:	8f 92       	push	r8
    b93a:	9f 92       	push	r9
    b93c:	af 92       	push	r10
    b93e:	bf 92       	push	r11
    b940:	cf 92       	push	r12
    b942:	df 92       	push	r13
    b944:	ef 92       	push	r14
    b946:	ff 92       	push	r15
    b948:	0f 93       	push	r16
    b94a:	1f 93       	push	r17
    b94c:	cf 93       	push	r28
    b94e:	df 93       	push	r29
    b950:	cd b7       	in	r28, 0x3d	; 61
    b952:	de b7       	in	r29, 0x3e	; 62
    b954:	2b 97       	sbiw	r28, 0x0b	; 11
    b956:	0f b6       	in	r0, 0x3f	; 63
    b958:	f8 94       	cli
    b95a:	de bf       	out	0x3e, r29	; 62
    b95c:	0f be       	out	0x3f, r0	; 63
    b95e:	cd bf       	out	0x3d, r28	; 61
    b960:	4c 01       	movw	r8, r24
    b962:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    b964:	1a 82       	std	Y+2, r1	; 0x02
    b966:	19 82       	std	Y+1, r1	; 0x01
    b968:	1c 82       	std	Y+4, r1	; 0x04
    b96a:	1b 82       	std	Y+3, r1	; 0x03
    b96c:	1e 82       	std	Y+6, r1	; 0x06
    b96e:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    b970:	20 e0       	ldi	r18, 0x00	; 0
    b972:	30 e0       	ldi	r19, 0x00	; 0
    b974:	40 e0       	ldi	r20, 0x00	; 0
    b976:	5e e3       	ldi	r21, 0x3E	; 62
    b978:	dc 01       	movw	r26, r24
    b97a:	17 96       	adiw	r26, 0x07	; 7
    b97c:	6d 91       	ld	r22, X+
    b97e:	7d 91       	ld	r23, X+
    b980:	8d 91       	ld	r24, X+
    b982:	9c 91       	ld	r25, X
    b984:	1a 97       	sbiw	r26, 0x0a	; 10
    b986:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    b98a:	20 e0       	ldi	r18, 0x00	; 0
    b98c:	30 e0       	ldi	r19, 0x00	; 0
    b98e:	40 e4       	ldi	r20, 0x40	; 64
    b990:	50 e4       	ldi	r21, 0x40	; 64
    b992:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    b996:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    b99a:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    b99c:	20 e0       	ldi	r18, 0x00	; 0
    b99e:	30 e0       	ldi	r19, 0x00	; 0
    b9a0:	40 e0       	ldi	r20, 0x00	; 0
    b9a2:	5e e3       	ldi	r21, 0x3E	; 62
    b9a4:	f4 01       	movw	r30, r8
    b9a6:	63 81       	ldd	r22, Z+3	; 0x03
    b9a8:	74 81       	ldd	r23, Z+4	; 0x04
    b9aa:	85 81       	ldd	r24, Z+5	; 0x05
    b9ac:	96 81       	ldd	r25, Z+6	; 0x06
    b9ae:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    b9b2:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    b9b6:	d4 01       	movw	r26, r8
    b9b8:	2c 91       	ld	r18, X
    b9ba:	40 2f       	mov	r20, r16
    b9bc:	ce 01       	movw	r24, r28
    b9be:	01 96       	adiw	r24, 0x01	; 1
    b9c0:	0e 94 8a 5b 	call	0xb714	; 0xb714 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    b9c4:	c4 01       	movw	r24, r8
    b9c6:	0e 94 13 58 	call	0xb026	; 0xb026 <collision_detect_boundries>
    b9ca:	88 23       	and	r24, r24
    b9cc:	39 f0       	breq	.+14     	; 0xb9dc <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    b9ce:	c4 01       	movw	r24, r8
    b9d0:	0e 94 f6 55 	call	0xabec	; 0xabec <recoil_sprite>
		player->shared.speed = 0;
    b9d4:	f4 01       	movw	r30, r8
    b9d6:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    b9d8:	d1 2c       	mov	r13, r1
    b9da:	2c c1       	rjmp	.+600    	; 0xbc34 <collision_detect_player+0x308>
    b9dc:	ce 01       	movw	r24, r28
    b9de:	01 96       	adiw	r24, 0x01	; 1
    b9e0:	98 87       	std	Y+8, r25	; 0x08
    b9e2:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    b9e4:	41 2c       	mov	r4, r1
    b9e6:	51 2c       	mov	r5, r1
    b9e8:	b1 2c       	mov	r11, r1
    b9ea:	d1 2c       	mov	r13, r1
    b9ec:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    b9ee:	9b e0       	ldi	r25, 0x0B	; 11
    b9f0:	91 0f       	add	r25, r17
    b9f2:	99 87       	std	Y+9, r25	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    b9f4:	16 5f       	subi	r17, 0xF6	; 246
    b9f6:	1a 87       	std	Y+10, r17	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    b9f8:	af 81       	ldd	r26, Y+7	; 0x07
    b9fa:	b8 85       	ldd	r27, Y+8	; 0x08
    b9fc:	6d 90       	ld	r6, X+
    b9fe:	7d 90       	ld	r7, X+
    ba00:	b8 87       	std	Y+8, r27	; 0x08
    ba02:	af 83       	std	Y+7, r26	; 0x07
    ba04:	c3 01       	movw	r24, r6
    ba06:	6e e1       	ldi	r22, 0x1E	; 30
    ba08:	70 e0       	ldi	r23, 0x00	; 0
    ba0a:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    ba0e:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    ba10:	13 e0       	ldi	r17, 0x03	; 3
    ba12:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    ba14:	c3 01       	movw	r24, r6
    ba16:	0e 94 98 56 	call	0xad30	; 0xad30 <solid_directional_tile>
    ba1a:	88 23       	and	r24, r24
    ba1c:	51 f1       	breq	.+84     	; 0xba72 <collision_detect_player+0x146>
    ba1e:	f4 01       	movw	r30, r8
    ba20:	67 81       	ldd	r22, Z+7	; 0x07
    ba22:	70 85       	ldd	r23, Z+8	; 0x08
    ba24:	81 85       	ldd	r24, Z+9	; 0x09
    ba26:	92 85       	ldd	r25, Z+10	; 0x0a
    ba28:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    ba2c:	46 2f       	mov	r20, r22
    ba2e:	d4 01       	movw	r26, r8
    ba30:	13 96       	adiw	r26, 0x03	; 3
    ba32:	6d 91       	ld	r22, X+
    ba34:	7d 91       	ld	r23, X+
    ba36:	8d 91       	ld	r24, X+
    ba38:	9c 91       	ld	r25, X
    ba3a:	16 97       	sbiw	r26, 0x06	; 6
    ba3c:	4b 87       	std	Y+11, r20	; 0x0b
    ba3e:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    ba42:	00 e1       	ldi	r16, 0x10	; 16
    ba44:	20 e1       	ldi	r18, 0x10	; 16
    ba46:	4b 85       	ldd	r20, Y+11	; 0x0b
    ba48:	c3 01       	movw	r24, r6
    ba4a:	0e 94 c2 56 	call	0xad84	; 0xad84 <collides_directional_tile>
    ba4e:	88 23       	and	r24, r24
    ba50:	81 f0       	breq	.+32     	; 0xba72 <collision_detect_player+0x146>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    ba52:	f4 01       	movw	r30, r8
    ba54:	83 85       	ldd	r24, Z+11	; 0x0b
    ba56:	89 30       	cpi	r24, 0x09	; 9
    ba58:	21 f4       	brne	.+8      	; 0xba62 <collision_detect_player+0x136>
    ba5a:	c4 01       	movw	r24, r8
    ba5c:	0e 94 f6 55 	call	0xabec	; 0xabec <recoil_sprite>
    ba60:	04 c0       	rjmp	.+8      	; 0xba6a <collision_detect_player+0x13e>
    ba62:	b4 01       	movw	r22, r8
    ba64:	c4 01       	movw	r24, r8
    ba66:	0e 94 50 56 	call	0xaca0	; 0xaca0 <recoil_sprite_fine>
			player->shared.speed = 0;
    ba6a:	d4 01       	movw	r26, r8
    ba6c:	11 96       	adiw	r26, 0x01	; 1
    ba6e:	1c 92       	st	X, r1
    ba70:	bc c0       	rjmp	.+376    	; 0xbbea <collision_detect_player+0x2be>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    ba72:	c3 01       	movw	r24, r6
    ba74:	0e 94 86 56 	call	0xad0c	; 0xad0c <solid_square_tile>
    ba78:	88 23       	and	r24, r24
    ba7a:	51 f1       	breq	.+84     	; 0xbad0 <collision_detect_player+0x1a4>
    ba7c:	f4 01       	movw	r30, r8
    ba7e:	67 81       	ldd	r22, Z+7	; 0x07
    ba80:	70 85       	ldd	r23, Z+8	; 0x08
    ba82:	81 85       	ldd	r24, Z+9	; 0x09
    ba84:	92 85       	ldd	r25, Z+10	; 0x0a
    ba86:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    ba8a:	26 2e       	mov	r2, r22
    ba8c:	d4 01       	movw	r26, r8
    ba8e:	13 96       	adiw	r26, 0x03	; 3
    ba90:	6d 91       	ld	r22, X+
    ba92:	7d 91       	ld	r23, X+
    ba94:	8d 91       	ld	r24, X+
    ba96:	9c 91       	ld	r25, X
    ba98:	16 97       	sbiw	r26, 0x06	; 6
    ba9a:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    ba9e:	86 2f       	mov	r24, r22
    baa0:	38 e0       	ldi	r19, 0x08	; 8
    baa2:	a3 2e       	mov	r10, r19
    baa4:	48 e0       	ldi	r20, 0x08	; 8
    baa6:	c4 2e       	mov	r12, r20
    baa8:	e1 2e       	mov	r14, r17
    baaa:	ee 0c       	add	r14, r14
    baac:	ee 0c       	add	r14, r14
    baae:	ee 0c       	add	r14, r14
    bab0:	0f 2d       	mov	r16, r15
    bab2:	00 0f       	add	r16, r16
    bab4:	00 0f       	add	r16, r16
    bab6:	00 0f       	add	r16, r16
    bab8:	20 e1       	ldi	r18, 0x10	; 16
    baba:	40 e1       	ldi	r20, 0x10	; 16
    babc:	62 2d       	mov	r22, r2
    babe:	0e 94 c7 4f 	call	0x9f8e	; 0x9f8e <LBCollides>
    bac2:	88 23       	and	r24, r24
    bac4:	29 f0       	breq	.+10     	; 0xbad0 <collision_detect_player+0x1a4>
		{
			collision_count++;
    bac6:	53 94       	inc	r5
			collision_tile = i;
			player->shared.speed = 0;
    bac8:	f4 01       	movw	r30, r8
    baca:	11 82       	std	Z+1, r1	; 0x01
    bacc:	b4 2c       	mov	r11, r4
    bace:	8d c0       	rjmp	.+282    	; 0xbbea <collision_detect_player+0x2be>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    bad0:	f3 01       	movw	r30, r6
    bad2:	e9 54       	subi	r30, 0x49	; 73
    bad4:	f3 4f       	sbci	r31, 0xF3	; 243
    bad6:	81 81       	ldd	r24, Z+1	; 0x01
    bad8:	8d 34       	cpi	r24, 0x4D	; 77
    bada:	59 f5       	brne	.+86     	; 0xbb32 <collision_detect_player+0x206>
    badc:	e1 2e       	mov	r14, r17
    bade:	ee 0c       	add	r14, r14
    bae0:	ee 0c       	add	r14, r14
    bae2:	ee 0c       	add	r14, r14
    bae4:	0f 2d       	mov	r16, r15
    bae6:	00 0f       	add	r16, r16
    bae8:	00 0f       	add	r16, r16
    baea:	00 0f       	add	r16, r16
    baec:	d4 01       	movw	r26, r8
    baee:	17 96       	adiw	r26, 0x07	; 7
    baf0:	6d 91       	ld	r22, X+
    baf2:	7d 91       	ld	r23, X+
    baf4:	8d 91       	ld	r24, X+
    baf6:	9c 91       	ld	r25, X
    baf8:	1a 97       	sbiw	r26, 0x0a	; 10
    bafa:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    bafe:	76 2e       	mov	r7, r22
    bb00:	f4 01       	movw	r30, r8
    bb02:	63 81       	ldd	r22, Z+3	; 0x03
    bb04:	74 81       	ldd	r23, Z+4	; 0x04
    bb06:	85 81       	ldd	r24, Z+5	; 0x05
    bb08:	96 81       	ldd	r25, Z+6	; 0x06
    bb0a:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    bb0e:	86 2f       	mov	r24, r22
    bb10:	98 e0       	ldi	r25, 0x08	; 8
    bb12:	a9 2e       	mov	r10, r25
    bb14:	28 e0       	ldi	r18, 0x08	; 8
    bb16:	c2 2e       	mov	r12, r18
    bb18:	20 e1       	ldi	r18, 0x10	; 16
    bb1a:	40 e1       	ldi	r20, 0x10	; 16
    bb1c:	67 2d       	mov	r22, r7
    bb1e:	0e 94 c7 4f 	call	0x9f8e	; 0x9f8e <LBCollides>
    bb22:	88 23       	and	r24, r24
    bb24:	09 f4       	brne	.+2      	; 0xbb28 <collision_detect_player+0x1fc>
    bb26:	61 c0       	rjmp	.+194    	; 0xbbea <collision_detect_player+0x2be>
		{
			player->max_speed = WATER_SPEED;
    bb28:	e9 e1       	ldi	r30, 0x19	; 25
    bb2a:	d4 01       	movw	r26, r8
    bb2c:	57 96       	adiw	r26, 0x17	; 23
    bb2e:	ec 93       	st	X, r30
    bb30:	67 c0       	rjmp	.+206    	; 0xbc00 <collision_detect_player+0x2d4>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    bb32:	8c 32       	cpi	r24, 0x2C	; 44
    bb34:	99 f2       	breq	.-90     	; 0xbadc <collision_detect_player+0x1b0>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    bb36:	87 30       	cpi	r24, 0x07	; 7
    bb38:	99 f4       	brne	.+38     	; 0xbb60 <collision_detect_player+0x234>
    bb3a:	d4 01       	movw	r26, r8
    bb3c:	55 96       	adiw	r26, 0x15	; 21
    bb3e:	8c 91       	ld	r24, X
    bb40:	55 97       	sbiw	r26, 0x15	; 21
    bb42:	80 fd       	sbrc	r24, 0
    bb44:	52 c0       	rjmp	.+164    	; 0xbbea <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    bb46:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    bb48:	e1 e4       	ldi	r30, 0x41	; 65
    bb4a:	57 96       	adiw	r26, 0x17	; 23
    bb4c:	ec 93       	st	X, r30
    bb4e:	57 97       	sbiw	r26, 0x17	; 23
			player->has_over_speed = true;
    bb50:	f1 e0       	ldi	r31, 0x01	; 1
    bb52:	59 96       	adiw	r26, 0x19	; 25
    bb54:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    bb56:	47 e0       	ldi	r20, 0x07	; 7
    bb58:	56 e7       	ldi	r21, 0x76	; 118
    bb5a:	61 e0       	ldi	r22, 0x01	; 1
    bb5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    bb5e:	10 c0       	rjmp	.+32     	; 0xbb80 <collision_detect_player+0x254>
			SetTile(tile_x, tile_y, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    bb60:	89 30       	cpi	r24, 0x09	; 9
    bb62:	29 f5       	brne	.+74     	; 0xbbae <collision_detect_player+0x282>
    bb64:	d4 01       	movw	r26, r8
    bb66:	55 96       	adiw	r26, 0x15	; 21
    bb68:	8c 91       	ld	r24, X
    bb6a:	55 97       	sbiw	r26, 0x15	; 21
    bb6c:	80 fd       	sbrc	r24, 0
    bb6e:	3d c0       	rjmp	.+122    	; 0xbbea <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    bb70:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    bb72:	e1 e0       	ldi	r30, 0x01	; 1
    bb74:	58 96       	adiw	r26, 0x18	; 24
    bb76:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    bb78:	41 e0       	ldi	r20, 0x01	; 1
    bb7a:	56 e7       	ldi	r21, 0x76	; 118
    bb7c:	61 e0       	ldi	r22, 0x01	; 1
    bb7e:	89 85       	ldd	r24, Y+9	; 0x09
    bb80:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
			SetTile(tile_x, tile_y, 0);
    bb84:	40 e0       	ldi	r20, 0x00	; 0
    bb86:	50 e0       	ldi	r21, 0x00	; 0
    bb88:	61 2f       	mov	r22, r17
    bb8a:	8f 2d       	mov	r24, r15
    bb8c:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <SetTile>
			SFX_ITEM;
    bb90:	80 91 4c 0c 	lds	r24, 0x0C4C
    bb94:	80 fd       	sbrc	r24, 0
    bb96:	29 c0       	rjmp	.+82     	; 0xbbea <collision_detect_player+0x2be>
    bb98:	80 91 bb 0f 	lds	r24, 0x0FBB
    bb9c:	80 fd       	sbrc	r24, 0
    bb9e:	25 c0       	rjmp	.+74     	; 0xbbea <collision_detect_player+0x2be>
    bba0:	2f ef       	ldi	r18, 0xFF	; 255
    bba2:	47 e1       	ldi	r20, 0x17	; 23
    bba4:	62 e0       	ldi	r22, 0x02	; 2
    bba6:	84 e0       	ldi	r24, 0x04	; 4
    bba8:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
    bbac:	1e c0       	rjmp	.+60     	; 0xbbea <collision_detect_player+0x2be>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    bbae:	88 30       	cpi	r24, 0x08	; 8
    bbb0:	e1 f4       	brne	.+56     	; 0xbbea <collision_detect_player+0x2be>
    bbb2:	d4 01       	movw	r26, r8
    bbb4:	55 96       	adiw	r26, 0x15	; 21
    bbb6:	8c 91       	ld	r24, X
    bbb8:	80 fd       	sbrc	r24, 0
    bbba:	17 c0       	rjmp	.+46     	; 0xbbea <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    bbbc:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    bbbe:	40 e0       	ldi	r20, 0x00	; 0
    bbc0:	50 e0       	ldi	r21, 0x00	; 0
    bbc2:	61 2f       	mov	r22, r17
    bbc4:	8f 2d       	mov	r24, r15
    bbc6:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <SetTile>
			SFX_ITEM;
    bbca:	80 91 4c 0c 	lds	r24, 0x0C4C
    bbce:	80 fd       	sbrc	r24, 0
    bbd0:	0a c0       	rjmp	.+20     	; 0xbbe6 <collision_detect_player+0x2ba>
    bbd2:	80 91 bb 0f 	lds	r24, 0x0FBB
    bbd6:	80 fd       	sbrc	r24, 0
    bbd8:	06 c0       	rjmp	.+12     	; 0xbbe6 <collision_detect_player+0x2ba>
    bbda:	2f ef       	ldi	r18, 0xFF	; 255
    bbdc:	47 e1       	ldi	r20, 0x17	; 23
    bbde:	62 e0       	ldi	r22, 0x02	; 2
    bbe0:	84 e0       	ldi	r24, 0x04	; 4
    bbe2:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
			explode = 1;
    bbe6:	dd 24       	eor	r13, r13
    bbe8:	d3 94       	inc	r13
		}
		
		if (!hit_water)
    bbea:	31 10       	cpse	r3, r1
    bbec:	09 c0       	rjmp	.+18     	; 0xbc00 <collision_detect_player+0x2d4>
		{
			player->max_speed = MAX_SPEED;
    bbee:	82 e3       	ldi	r24, 0x32	; 50
    bbf0:	f4 01       	movw	r30, r8
    bbf2:	87 8b       	std	Z+23, r24	; 0x17
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    bbf4:	81 8d       	ldd	r24, Z+25	; 0x19
    bbf6:	88 23       	and	r24, r24
    bbf8:	29 f0       	breq	.+10     	; 0xbc04 <collision_detect_player+0x2d8>
    bbfa:	91 e4       	ldi	r25, 0x41	; 65
    bbfc:	97 8b       	std	Z+23, r25	; 0x17
    bbfe:	02 c0       	rjmp	.+4      	; 0xbc04 <collision_detect_player+0x2d8>
    bc00:	33 24       	eor	r3, r3
    bc02:	33 94       	inc	r3
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    bc04:	43 94       	inc	r4
    bc06:	a3 e0       	ldi	r26, 0x03	; 3
    bc08:	4a 12       	cpse	r4, r26
    bc0a:	f6 ce       	rjmp	.-532    	; 0xb9f8 <collision_detect_player+0xcc>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    bc0c:	55 20       	and	r5, r5
    bc0e:	91 f0       	breq	.+36     	; 0xbc34 <collision_detect_player+0x308>
    bc10:	c4 01       	movw	r24, r8
    bc12:	0e 94 f6 55 	call	0xabec	; 0xabec <recoil_sprite>
	if (collision_count == 1)
    bc16:	b1 e0       	ldi	r27, 0x01	; 1
    bc18:	5b 12       	cpse	r5, r27
    bc1a:	0c c0       	rjmp	.+24     	; 0xbc34 <collision_detect_player+0x308>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    bc1c:	fe 01       	movw	r30, r28
    bc1e:	31 96       	adiw	r30, 0x01	; 1
    bc20:	eb 0d       	add	r30, r11
    bc22:	f1 1d       	adc	r31, r1
    bc24:	eb 0d       	add	r30, r11
    bc26:	f1 1d       	adc	r31, r1
    bc28:	40 81       	ld	r20, Z
    bc2a:	51 81       	ldd	r21, Z+1	; 0x01
    bc2c:	6b 2d       	mov	r22, r11
    bc2e:	c4 01       	movw	r24, r8
    bc30:	0e 94 db 5b 	call	0xb7b6	; 0xb7b6 <slide>
	}
	return explode;
}
    bc34:	8d 2d       	mov	r24, r13
    bc36:	2b 96       	adiw	r28, 0x0b	; 11
    bc38:	0f b6       	in	r0, 0x3f	; 63
    bc3a:	f8 94       	cli
    bc3c:	de bf       	out	0x3e, r29	; 62
    bc3e:	0f be       	out	0x3f, r0	; 63
    bc40:	cd bf       	out	0x3d, r28	; 61
    bc42:	df 91       	pop	r29
    bc44:	cf 91       	pop	r28
    bc46:	1f 91       	pop	r17
    bc48:	0f 91       	pop	r16
    bc4a:	ff 90       	pop	r15
    bc4c:	ef 90       	pop	r14
    bc4e:	df 90       	pop	r13
    bc50:	cf 90       	pop	r12
    bc52:	bf 90       	pop	r11
    bc54:	af 90       	pop	r10
    bc56:	9f 90       	pop	r9
    bc58:	8f 90       	pop	r8
    bc5a:	7f 90       	pop	r7
    bc5c:	6f 90       	pop	r6
    bc5e:	5f 90       	pop	r5
    bc60:	4f 90       	pop	r4
    bc62:	3f 90       	pop	r3
    bc64:	2f 90       	pop	r2
    bc66:	08 95       	ret

0000bc68 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    bc68:	ef 92       	push	r14
    bc6a:	ff 92       	push	r15
    bc6c:	1f 93       	push	r17
    bc6e:	cf 93       	push	r28
    bc70:	df 93       	push	r29
    bc72:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    bc74:	c0 e0       	ldi	r28, 0x00	; 0
    bc76:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    bc78:	8e e1       	ldi	r24, 0x1E	; 30
    bc7a:	e8 2e       	mov	r14, r24
    bc7c:	f1 2c       	mov	r15, r1
    bc7e:	ce 01       	movw	r24, r28
    bc80:	b7 01       	movw	r22, r14
    bc82:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
		y = 3 + i / 30;
    bc86:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    bc88:	11 23       	and	r17, r17
    bc8a:	19 f0       	breq	.+6      	; 0xbc92 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    bc8c:	44 ea       	ldi	r20, 0xA4	; 164
    bc8e:	56 e7       	ldi	r21, 0x76	; 118
    bc90:	2d c0       	rjmp	.+90     	; 0xbcec <load_level_tiles+0x84>
    bc92:	fe 01       	movw	r30, r28
    bc94:	e9 54       	subi	r30, 0x49	; 73
    bc96:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    bc98:	91 81       	ldd	r25, Z+1	; 0x01
    bc9a:	97 30       	cpi	r25, 0x07	; 7
    bc9c:	99 f1       	breq	.+102    	; 0xbd04 <load_level_tiles+0x9c>
    bc9e:	88 f4       	brcc	.+34     	; 0xbcc2 <load_level_tiles+0x5a>
    bca0:	93 30       	cpi	r25, 0x03	; 3
    bca2:	39 f1       	breq	.+78     	; 0xbcf2 <load_level_tiles+0x8a>
    bca4:	40 f4       	brcc	.+16     	; 0xbcb6 <load_level_tiles+0x4e>
    bca6:	91 30       	cpi	r25, 0x01	; 1
    bca8:	f9 f0       	breq	.+62     	; 0xbce8 <load_level_tiles+0x80>
    bcaa:	92 30       	cpi	r25, 0x02	; 2
    bcac:	09 f0       	breq	.+2      	; 0xbcb0 <load_level_tiles+0x48>
    bcae:	3f c0       	rjmp	.+126    	; 0xbd2e <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    bcb0:	4a e0       	ldi	r20, 0x0A	; 10
    bcb2:	56 e7       	ldi	r21, 0x76	; 118
    bcb4:	1b c0       	rjmp	.+54     	; 0xbcec <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bcb6:	95 30       	cpi	r25, 0x05	; 5
    bcb8:	f9 f0       	breq	.+62     	; 0xbcf8 <load_level_tiles+0x90>
    bcba:	08 f5       	brcc	.+66     	; 0xbcfe <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    bcbc:	4f ee       	ldi	r20, 0xEF	; 239
    bcbe:	55 e7       	ldi	r21, 0x75	; 117
    bcc0:	15 c0       	rjmp	.+42     	; 0xbcec <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bcc2:	9c 32       	cpi	r25, 0x2C	; 44
    bcc4:	59 f1       	breq	.+86     	; 0xbd1c <load_level_tiles+0xb4>
    bcc6:	38 f4       	brcc	.+14     	; 0xbcd6 <load_level_tiles+0x6e>
    bcc8:	98 30       	cpi	r25, 0x08	; 8
    bcca:	f9 f0       	breq	.+62     	; 0xbd0a <load_level_tiles+0xa2>
    bccc:	99 30       	cpi	r25, 0x09	; 9
    bcce:	79 f5       	brne	.+94     	; 0xbd2e <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    bcd0:	41 e0       	ldi	r20, 0x01	; 1
    bcd2:	56 e7       	ldi	r21, 0x76	; 118
    bcd4:	0b c0       	rjmp	.+22     	; 0xbcec <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bcd6:	92 34       	cpi	r25, 0x42	; 66
    bcd8:	d9 f0       	breq	.+54     	; 0xbd10 <load_level_tiles+0xa8>
    bcda:	9d 34       	cpi	r25, 0x4D	; 77
    bcdc:	e1 f0       	breq	.+56     	; 0xbd16 <load_level_tiles+0xae>
    bcde:	97 33       	cpi	r25, 0x37	; 55
    bce0:	31 f5       	brne	.+76     	; 0xbd2e <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    bce2:	43 ee       	ldi	r20, 0xE3	; 227
    bce4:	55 e7       	ldi	r21, 0x75	; 117
    bce6:	02 c0       	rjmp	.+4      	; 0xbcec <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    bce8:	4d e0       	ldi	r20, 0x0D	; 13
    bcea:	56 e7       	ldi	r21, 0x76	; 118
    bcec:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
    bcf0:	22 c0       	rjmp	.+68     	; 0xbd36 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    bcf2:	45 ef       	ldi	r20, 0xF5	; 245
    bcf4:	55 e7       	ldi	r21, 0x75	; 117
    bcf6:	fa cf       	rjmp	.-12     	; 0xbcec <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    bcf8:	4c ee       	ldi	r20, 0xEC	; 236
    bcfa:	55 e7       	ldi	r21, 0x75	; 117
    bcfc:	f7 cf       	rjmp	.-18     	; 0xbcec <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    bcfe:	42 ef       	ldi	r20, 0xF2	; 242
    bd00:	55 e7       	ldi	r21, 0x75	; 117
    bd02:	f4 cf       	rjmp	.-24     	; 0xbcec <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    bd04:	47 e0       	ldi	r20, 0x07	; 7
    bd06:	56 e7       	ldi	r21, 0x76	; 118
    bd08:	f1 cf       	rjmp	.-30     	; 0xbcec <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    bd0a:	44 e0       	ldi	r20, 0x04	; 4
    bd0c:	56 e7       	ldi	r21, 0x76	; 118
    bd0e:	ee cf       	rjmp	.-36     	; 0xbcec <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    bd10:	46 ee       	ldi	r20, 0xE6	; 230
    bd12:	55 e7       	ldi	r21, 0x75	; 117
    bd14:	eb cf       	rjmp	.-42     	; 0xbcec <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    bd16:	49 ee       	ldi	r20, 0xE9	; 233
    bd18:	55 e7       	ldi	r21, 0x75	; 117
    bd1a:	e8 cf       	rjmp	.-48     	; 0xbcec <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    bd1c:	49 ee       	ldi	r20, 0xE9	; 233
    bd1e:	55 e7       	ldi	r21, 0x75	; 117
    bd20:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
    bd24:	d0 93 3a 10 	sts	0x103A, r29
    bd28:	c0 93 39 10 	sts	0x1039, r28
    bd2c:	04 c0       	rjmp	.+8      	; 0xbd36 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    bd2e:	40 e0       	ldi	r20, 0x00	; 0
    bd30:	50 e0       	ldi	r21, 0x00	; 0
    bd32:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    bd36:	21 96       	adiw	r28, 0x01	; 1
    bd38:	ce 3e       	cpi	r28, 0xEE	; 238
    bd3a:	82 e0       	ldi	r24, 0x02	; 2
    bd3c:	d8 07       	cpc	r29, r24
    bd3e:	09 f0       	breq	.+2      	; 0xbd42 <load_level_tiles+0xda>
    bd40:	9e cf       	rjmp	.-196    	; 0xbc7e <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    bd42:	df 91       	pop	r29
    bd44:	cf 91       	pop	r28
    bd46:	1f 91       	pop	r17
    bd48:	ff 90       	pop	r15
    bd4a:	ef 90       	pop	r14
    bd4c:	08 95       	ret

0000bd4e <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    bd4e:	cf 93       	push	r28
    bd50:	df 93       	push	r29
    bd52:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    bd54:	6b 8b       	std	Y+19, r22	; 0x13
	p->spawn_y = y;
    bd56:	4c 8b       	std	Y+20, r20	; 0x14
	p->level_score = 0;
    bd58:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    bd5a:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    bd5c:	18 8e       	std	Y+24, r1	; 0x18
	p->max_speed = MAX_SPEED;
    bd5e:	82 e3       	ldi	r24, 0x32	; 50
    bd60:	8f 8b       	std	Y+23, r24	; 0x17
	player_init_shot_state(p);
    bd62:	ce 01       	movw	r24, r28
    bd64:	0e 94 59 52 	call	0xa4b2	; 0xa4b2 <player_init_shot_state>
	player_spawn(p);
    bd68:	ce 01       	movw	r24, r28
}
    bd6a:	df 91       	pop	r29
    bd6c:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    bd6e:	0c 94 87 52 	jmp	0xa50e	; 0xa50e <player_spawn>

0000bd72 <load_level>:
}

void load_level(int level_number)
{
    bd72:	8f 92       	push	r8
    bd74:	9f 92       	push	r9
    bd76:	af 92       	push	r10
    bd78:	bf 92       	push	r11
    bd7a:	cf 92       	push	r12
    bd7c:	df 92       	push	r13
    bd7e:	ef 92       	push	r14
    bd80:	ff 92       	push	r15
    bd82:	0f 93       	push	r16
    bd84:	1f 93       	push	r17
    bd86:	cf 93       	push	r28
    bd88:	df 93       	push	r29
    bd8a:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    bd8c:	8e ee       	ldi	r24, 0xEE	; 238
    bd8e:	92 e0       	ldi	r25, 0x02	; 2
    bd90:	c8 9f       	mul	r28, r24
    bd92:	70 01       	movw	r14, r0
    bd94:	c9 9f       	mul	r28, r25
    bd96:	f0 0c       	add	r15, r0
    bd98:	d8 9f       	mul	r29, r24
    bd9a:	f0 0c       	add	r15, r0
    bd9c:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    bd9e:	10 92 12 0c 	sts	0x0C12, r1
    bda2:	10 92 11 0c 	sts	0x0C11, r1
	init_tile_animations(&tile_animations);
    bda6:	8a e1       	ldi	r24, 0x1A	; 26
    bda8:	9c e0       	ldi	r25, 0x0C	; 12
    bdaa:	0e 94 13 51 	call	0xa226	; 0xa226 <init_tile_animations>
	init_scope_animation(&scope_animation);
    bdae:	8d e2       	ldi	r24, 0x2D	; 45
    bdb0:	90 e1       	ldi	r25, 0x10	; 16
    bdb2:	0e 94 3a 51 	call	0xa274	; 0xa274 <init_scope_animation>
	init_sub_animation(&sub_animation);
    bdb6:	8f e1       	ldi	r24, 0x1F	; 31
    bdb8:	90 e1       	ldi	r25, 0x10	; 16
    bdba:	0e 94 52 51 	call	0xa2a4	; 0xa2a4 <init_sub_animation>
	game.current_screen = LEVEL;
    bdbe:	83 e0       	ldi	r24, 0x03	; 3
    bdc0:	80 93 06 0c 	sts	0x0C06, r24
	clear_sprites();
    bdc4:	0e 94 d3 52 	call	0xa5a6	; 0xa5a6 <clear_sprites>
	game.current_level = level_number;
    bdc8:	c0 93 07 0c 	sts	0x0C07, r28
    bdcc:	88 eb       	ldi	r24, 0xB8	; 184
    bdce:	a8 2e       	mov	r10, r24
    bdd0:	8c e0       	ldi	r24, 0x0C	; 12
    bdd2:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    bdd4:	00 e0       	ldi	r16, 0x00	; 0
    bdd6:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    bdd8:	9e e1       	ldi	r25, 0x1E	; 30
    bdda:	c9 2e       	mov	r12, r25
    bddc:	d1 2c       	mov	r13, r1
    bdde:	c8 01       	movw	r24, r16
    bde0:	b6 01       	movw	r22, r12
    bde2:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    bde6:	d8 2f       	mov	r29, r24
    bde8:	dd 0f       	add	r29, r29
    bdea:	dd 0f       	add	r29, r29
    bdec:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    bdee:	ab 01       	movw	r20, r22
    bdf0:	4d 5f       	subi	r20, 0xFD	; 253
    bdf2:	5f 4f       	sbci	r21, 0xFF	; 255
    bdf4:	c4 2f       	mov	r28, r20
    bdf6:	cc 0f       	add	r28, r28
    bdf8:	cc 0f       	add	r28, r28
    bdfa:	cc 0f       	add	r28, r28
    bdfc:	f8 01       	movw	r30, r16
    bdfe:	ee 0d       	add	r30, r14
    be00:	ff 1d       	adc	r31, r15
    be02:	e9 52       	subi	r30, 0x29	; 41
    be04:	fd 4e       	sbci	r31, 0xED	; 237
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    be06:	e4 91       	lpm	r30, Z
    be08:	45 01       	movw	r8, r10
    be0a:	d5 01       	movw	r26, r10
    be0c:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    be0e:	e8 35       	cpi	r30, 0x58	; 88
    be10:	31 f4       	brne	.+12     	; 0xbe1e <load_level+0xac>
		{
			prep_player(&player1, x, y);
    be12:	4c 2f       	mov	r20, r28
    be14:	6d 2f       	mov	r22, r29
    be16:	87 e3       	ldi	r24, 0x37	; 55
    be18:	9c e0       	ldi	r25, 0x0C	; 12
    be1a:	0e 94 a7 5e 	call	0xbd4e	; 0xbd4e <prep_player>
    be1e:	bf ef       	ldi	r27, 0xFF	; 255
    be20:	ab 1a       	sub	r10, r27
    be22:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    be24:	f4 01       	movw	r30, r8
    be26:	80 81       	ld	r24, Z
    be28:	83 36       	cpi	r24, 0x63	; 99
    be2a:	31 f4       	brne	.+12     	; 0xbe38 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    be2c:	4c 2f       	mov	r20, r28
    be2e:	6d 2f       	mov	r22, r29
    be30:	86 ea       	ldi	r24, 0xA6	; 166
    be32:	9f e0       	ldi	r25, 0x0F	; 15
    be34:	0e 94 a7 5e 	call	0xbd4e	; 0xbd4e <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    be38:	0f 5f       	subi	r16, 0xFF	; 255
    be3a:	1f 4f       	sbci	r17, 0xFF	; 255
    be3c:	0e 3e       	cpi	r16, 0xEE	; 238
    be3e:	f2 e0       	ldi	r31, 0x02	; 2
    be40:	1f 07       	cpc	r17, r31
    be42:	69 f6       	brne	.-102    	; 0xbdde <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    be44:	60 e0       	ldi	r22, 0x00	; 0
    be46:	87 e3       	ldi	r24, 0x37	; 55
    be48:	9c e0       	ldi	r25, 0x0C	; 12
    be4a:	0e 94 84 54 	call	0xa908	; 0xa908 <render_hud>
	render_hud(&player2, 15);
    be4e:	6f e0       	ldi	r22, 0x0F	; 15
    be50:	86 ea       	ldi	r24, 0xA6	; 166
    be52:	9f e0       	ldi	r25, 0x0F	; 15
    be54:	0e 94 84 54 	call	0xa908	; 0xa908 <render_hud>
	render_score(&player1, 0);
    be58:	60 e0       	ldi	r22, 0x00	; 0
    be5a:	87 e3       	ldi	r24, 0x37	; 55
    be5c:	9c e0       	ldi	r25, 0x0C	; 12
    be5e:	0e 94 a1 54 	call	0xa942	; 0xa942 <render_score>
	render_score(&player2, 15);
    be62:	6f e0       	ldi	r22, 0x0F	; 15
    be64:	86 ea       	ldi	r24, 0xA6	; 166
    be66:	9f e0       	ldi	r25, 0x0F	; 15
    be68:	0e 94 a1 54 	call	0xa942	; 0xa942 <render_score>
	Print(14, 0, (char*) strVertSep);
    be6c:	41 e6       	ldi	r20, 0x61	; 97
    be6e:	52 e0       	ldi	r21, 0x02	; 2
    be70:	60 e0       	ldi	r22, 0x00	; 0
    be72:	70 e0       	ldi	r23, 0x00	; 0
    be74:	8e e0       	ldi	r24, 0x0E	; 14
    be76:	90 e0       	ldi	r25, 0x00	; 0
    be78:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(14, 1, (char*) strVertSep);
    be7c:	41 e6       	ldi	r20, 0x61	; 97
    be7e:	52 e0       	ldi	r21, 0x02	; 2
    be80:	61 e0       	ldi	r22, 0x01	; 1
    be82:	70 e0       	ldi	r23, 0x00	; 0
    be84:	8e e0       	ldi	r24, 0x0E	; 14
    be86:	90 e0       	ldi	r25, 0x00	; 0
    be88:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(14, 2, (char*) strVertSep);
    be8c:	41 e6       	ldi	r20, 0x61	; 97
    be8e:	52 e0       	ldi	r21, 0x02	; 2
    be90:	62 e0       	ldi	r22, 0x02	; 2
    be92:	70 e0       	ldi	r23, 0x00	; 0
    be94:	8e e0       	ldi	r24, 0x0E	; 14
    be96:	90 e0       	ldi	r25, 0x00	; 0
    be98:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	load_level_tiles(false);
    be9c:	80 e0       	ldi	r24, 0x00	; 0
}
    be9e:	df 91       	pop	r29
    bea0:	cf 91       	pop	r28
    bea2:	1f 91       	pop	r17
    bea4:	0f 91       	pop	r16
    bea6:	ff 90       	pop	r15
    bea8:	ef 90       	pop	r14
    beaa:	df 90       	pop	r13
    beac:	cf 90       	pop	r12
    beae:	bf 90       	pop	r11
    beb0:	af 90       	pop	r10
    beb2:	9f 90       	pop	r9
    beb4:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    beb6:	0c 94 34 5e 	jmp	0xbc68	; 0xbc68 <load_level_tiles>

0000beba <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    beba:	cf 93       	push	r28
    bebc:	df 93       	push	r29
    bebe:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    bec0:	61 e0       	ldi	r22, 0x01	; 1
    bec2:	83 e0       	ldi	r24, 0x03	; 3
    bec4:	0e 94 bb 4e 	call	0x9d76	; 0x9d76 <FadeOut>
	ClearVram();
    bec8:	0e 94 bd 3f 	call	0x7f7a	; 0x7f7a <ClearVram>
	clear_sprites();
    becc:	0e 94 d3 52 	call	0xa5a6	; 0xa5a6 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    bed0:	d0 e0       	ldi	r29, 0x00	; 0
    bed2:	ae 01       	movw	r20, r28
    bed4:	84 e0       	ldi	r24, 0x04	; 4
    bed6:	44 0f       	add	r20, r20
    bed8:	55 1f       	adc	r21, r21
    beda:	8a 95       	dec	r24
    bedc:	e1 f7       	brne	.-8      	; 0xbed6 <level_transition+0x1c>
    bede:	46 59       	subi	r20, 0x96	; 150
    bee0:	5e 4f       	sbci	r21, 0xFE	; 254
    bee2:	6c e0       	ldi	r22, 0x0C	; 12
    bee4:	70 e0       	ldi	r23, 0x00	; 0
    bee6:	88 e0       	ldi	r24, 0x08	; 8
    bee8:	90 e0       	ldi	r25, 0x00	; 0
    beea:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	FadeIn(1, true);
    beee:	61 e0       	ldi	r22, 0x01	; 1
    bef0:	81 e0       	ldi	r24, 0x01	; 1
    bef2:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    bef6:	84 e0       	ldi	r24, 0x04	; 4
    bef8:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBWaitSeconds>
	FadeOut(1, true);
    befc:	61 e0       	ldi	r22, 0x01	; 1
    befe:	81 e0       	ldi	r24, 0x01	; 1
    bf00:	0e 94 bb 4e 	call	0x9d76	; 0x9d76 <FadeOut>
	ClearVram();
    bf04:	0e 94 bd 3f 	call	0x7f7a	; 0x7f7a <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    bf08:	60 e0       	ldi	r22, 0x00	; 0
    bf0a:	83 e0       	ldi	r24, 0x03	; 3
    bf0c:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <FadeIn>
	load_level(index);
    bf10:	ce 01       	movw	r24, r28
}
    bf12:	df 91       	pop	r29
    bf14:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    bf16:	0c 94 b9 5e 	jmp	0xbd72	; 0xbd72 <load_level>

0000bf1a <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    bf1a:	8d e2       	ldi	r24, 0x2D	; 45
    bf1c:	90 e1       	ldi	r25, 0x10	; 16
    bf1e:	0e 94 47 55 	call	0xaa8e	; 0xaa8e <render_scope>
    bf22:	88 23       	and	r24, r24
    bf24:	41 f0       	breq	.+16     	; 0xbf36 <render_boss_fight_scope_load+0x1c>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    bf26:	82 e0       	ldi	r24, 0x02	; 2
    bf28:	80 93 09 0c 	sts	0x0C09, r24
		SFX_ALARM;
    bf2c:	41 e0       	ldi	r20, 0x01	; 1
    bf2e:	6f ef       	ldi	r22, 0xFF	; 255
    bf30:	87 e0       	ldi	r24, 0x07	; 7
    bf32:	0c 94 69 43 	jmp	0x86d2	; 0x86d2 <TriggerFx>
    bf36:	08 95       	ret

0000bf38 <render_boss_fight_sub_load>:
	}
}

void render_boss_fight_sub_load()
{
    bf38:	0f 93       	push	r16
    bf3a:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    bf3c:	8f e1       	ldi	r24, 0x1F	; 31
    bf3e:	90 e1       	ldi	r25, 0x10	; 16
    bf40:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    bf44:	ac 01       	movw	r20, r24
    bf46:	64 e0       	ldi	r22, 0x04	; 4
    bf48:	81 e0       	ldi	r24, 0x01	; 1
    bf4a:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
	if (sub_animation.anim.reversing)
    bf4e:	80 91 24 10 	lds	r24, 0x1024
    bf52:	88 23       	and	r24, r24
    bf54:	d9 f0       	breq	.+54     	; 0xbf8c <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    bf56:	84 e0       	ldi	r24, 0x04	; 4
    bf58:	80 93 09 0c 	sts	0x0C09, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    bf5c:	00 e0       	ldi	r16, 0x00	; 0
    bf5e:	10 e0       	ldi	r17, 0x00	; 0
    bf60:	20 e9       	ldi	r18, 0x90	; 144
    bf62:	32 e4       	ldi	r19, 0x42	; 66
    bf64:	40 e0       	ldi	r20, 0x00	; 0
    bf66:	50 e0       	ldi	r21, 0x00	; 0
    bf68:	60 ec       	ldi	r22, 0xC0	; 192
    bf6a:	72 e4       	ldi	r23, 0x42	; 66
    bf6c:	8f e6       	ldi	r24, 0x6F	; 111
    bf6e:	90 e1       	ldi	r25, 0x10	; 16
    bf70:	0e 94 b5 51 	call	0xa36a	; 0xa36a <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    bf74:	00 e0       	ldi	r16, 0x00	; 0
    bf76:	10 e0       	ldi	r17, 0x00	; 0
    bf78:	20 e9       	ldi	r18, 0x90	; 144
    bf7a:	32 e4       	ldi	r19, 0x42	; 66
    bf7c:	40 e0       	ldi	r20, 0x00	; 0
    bf7e:	50 e0       	ldi	r21, 0x00	; 0
    bf80:	60 e4       	ldi	r22, 0x40	; 64
    bf82:	73 e4       	ldi	r23, 0x43	; 67
    bf84:	8b e3       	ldi	r24, 0x3B	; 59
    bf86:	90 e1       	ldi	r25, 0x10	; 16
    bf88:	0e 94 b5 51 	call	0xa36a	; 0xa36a <init_turret>
	}
}
    bf8c:	1f 91       	pop	r17
    bf8e:	0f 91       	pop	r16
    bf90:	08 95       	ret

0000bf92 <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    bf92:	8f e1       	ldi	r24, 0x1F	; 31
    bf94:	90 e1       	ldi	r25, 0x10	; 16
    bf96:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    bf9a:	20 91 1f 10 	lds	r18, 0x101F
    bf9e:	21 11       	cpse	r18, r1
    bfa0:	05 c0       	rjmp	.+10     	; 0xbfac <render_boss_fight_sub_sinking+0x1a>
    bfa2:	ac 01       	movw	r20, r24
    bfa4:	64 e0       	ldi	r22, 0x04	; 4
    bfa6:	81 e0       	ldi	r24, 0x01	; 1
    bfa8:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
	if (sub_animation.anim.looped)
    bfac:	80 91 23 10 	lds	r24, 0x1023
    bfb0:	88 23       	and	r24, r24
    bfb2:	19 f0       	breq	.+6      	; 0xbfba <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    bfb4:	88 e0       	ldi	r24, 0x08	; 8
    bfb6:	80 93 09 0c 	sts	0x0C09, r24
    bfba:	08 95       	ret

0000bfbc <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    bfbc:	ef 92       	push	r14
    bfbe:	ff 92       	push	r15
    bfc0:	0f 93       	push	r16
    bfc2:	1f 93       	push	r17
    bfc4:	cf 93       	push	r28
    bfc6:	df 93       	push	r29
    bfc8:	1f 92       	push	r1
    bfca:	cd b7       	in	r28, 0x3d	; 61
    bfcc:	de b7       	in	r29, 0x3e	; 62
    bfce:	7c 01       	movw	r14, r24
    bfd0:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    bfd2:	fc 01       	movw	r30, r24
    bfd4:	67 81       	ldd	r22, Z+7	; 0x07
    bfd6:	70 85       	ldd	r23, Z+8	; 0x08
    bfd8:	81 85       	ldd	r24, Z+9	; 0x09
    bfda:	92 85       	ldd	r25, Z+10	; 0x0a
    bfdc:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    bfe0:	46 2f       	mov	r20, r22
    bfe2:	f7 01       	movw	r30, r14
    bfe4:	63 81       	ldd	r22, Z+3	; 0x03
    bfe6:	74 81       	ldd	r23, Z+4	; 0x04
    bfe8:	85 81       	ldd	r24, Z+5	; 0x05
    bfea:	96 81       	ldd	r25, Z+6	; 0x06
    bfec:	49 83       	std	Y+1, r20	; 0x01
    bfee:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    bff2:	01 e0       	ldi	r16, 0x01	; 1
    bff4:	21 e0       	ldi	r18, 0x01	; 1
    bff6:	49 81       	ldd	r20, Y+1	; 0x01
    bff8:	81 2f       	mov	r24, r17
    bffa:	0e 94 b8 4d 	call	0x9b70	; 0x9b70 <MoveSprite>
}
    bffe:	0f 90       	pop	r0
    c000:	df 91       	pop	r29
    c002:	cf 91       	pop	r28
    c004:	1f 91       	pop	r17
    c006:	0f 91       	pop	r16
    c008:	ff 90       	pop	r15
    c00a:	ef 90       	pop	r14
    c00c:	08 95       	ret

0000c00e <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    c00e:	ef 92       	push	r14
    c010:	ff 92       	push	r15
    c012:	0f 93       	push	r16
    c014:	1f 93       	push	r17
    c016:	cf 93       	push	r28
    c018:	df 93       	push	r29
    c01a:	1f 92       	push	r1
    c01c:	cd b7       	in	r28, 0x3d	; 61
    c01e:	de b7       	in	r29, 0x3e	; 62
    c020:	7c 01       	movw	r14, r24
    c022:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    c024:	fc 01       	movw	r30, r24
    c026:	63 89       	ldd	r22, Z+19	; 0x13
    c028:	74 89       	ldd	r23, Z+20	; 0x14
    c02a:	85 89       	ldd	r24, Z+21	; 0x15
    c02c:	96 89       	ldd	r25, Z+22	; 0x16
    c02e:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    c032:	46 2f       	mov	r20, r22
    c034:	f7 01       	movw	r30, r14
    c036:	67 85       	ldd	r22, Z+15	; 0x0f
    c038:	70 89       	ldd	r23, Z+16	; 0x10
    c03a:	81 89       	ldd	r24, Z+17	; 0x11
    c03c:	92 89       	ldd	r25, Z+18	; 0x12
    c03e:	49 83       	std	Y+1, r20	; 0x01
    c040:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    c044:	01 e0       	ldi	r16, 0x01	; 1
    c046:	21 e0       	ldi	r18, 0x01	; 1
    c048:	49 81       	ldd	r20, Y+1	; 0x01
    c04a:	81 2f       	mov	r24, r17
    c04c:	0e 94 b8 4d 	call	0x9b70	; 0x9b70 <MoveSprite>
}
    c050:	0f 90       	pop	r0
    c052:	df 91       	pop	r29
    c054:	cf 91       	pop	r28
    c056:	1f 91       	pop	r17
    c058:	0f 91       	pop	r16
    c05a:	ff 90       	pop	r15
    c05c:	ef 90       	pop	r14
    c05e:	08 95       	ret

0000c060 <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    c060:	cf 92       	push	r12
    c062:	df 92       	push	r13
    c064:	ef 92       	push	r14
    c066:	ff 92       	push	r15
    c068:	cf 93       	push	r28
    c06a:	df 93       	push	r29
    c06c:	ec 01       	movw	r28, r24
    c06e:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    c070:	cb 80       	ldd	r12, Y+3	; 0x03
    c072:	dc 80       	ldd	r13, Y+4	; 0x04
    c074:	ed 80       	ldd	r14, Y+5	; 0x05
    c076:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    c078:	6f 81       	ldd	r22, Y+7	; 0x07
    c07a:	78 85       	ldd	r23, Y+8	; 0x08
    c07c:	89 85       	ldd	r24, Y+9	; 0x09
    c07e:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    c080:	2b 85       	ldd	r18, Y+11	; 0x0b
    c082:	21 11       	cpse	r18, r1
    c084:	27 c0       	rjmp	.+78     	; 0xc0d4 <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    c086:	20 e0       	ldi	r18, 0x00	; 0
    c088:	30 e0       	ldi	r19, 0x00	; 0
    c08a:	40 e0       	ldi	r20, 0x00	; 0
    c08c:	5e e3       	ldi	r21, 0x3E	; 62
    c08e:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    c092:	20 e0       	ldi	r18, 0x00	; 0
    c094:	30 e0       	ldi	r19, 0x00	; 0
    c096:	40 e4       	ldi	r20, 0x40	; 64
    c098:	50 e4       	ldi	r21, 0x40	; 64
    c09a:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    c09e:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
	int tile_index = (y * 30) + x;
    c0a2:	8e e1       	ldi	r24, 0x1E	; 30
    c0a4:	68 9f       	mul	r22, r24
    c0a6:	e0 01       	movw	r28, r0
    c0a8:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    c0aa:	20 e0       	ldi	r18, 0x00	; 0
    c0ac:	30 e0       	ldi	r19, 0x00	; 0
    c0ae:	40 e0       	ldi	r20, 0x00	; 0
    c0b0:	5e e3       	ldi	r21, 0x3E	; 62
    c0b2:	c7 01       	movw	r24, r14
    c0b4:	b6 01       	movw	r22, r12
    c0b6:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    c0ba:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    c0be:	c6 0f       	add	r28, r22
    c0c0:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    c0c2:	be 01       	movw	r22, r28
    c0c4:	8a e1       	ldi	r24, 0x1A	; 26
    c0c6:	9c e0       	ldi	r25, 0x0C	; 12
    c0c8:	0e 94 0f 59 	call	0xb21e	; 0xb21e <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    c0cc:	c9 54       	subi	r28, 0x49	; 73
    c0ce:	d3 4f       	sbci	r29, 0xF3	; 243
    c0d0:	19 82       	std	Y+1, r1	; 0x01
    c0d2:	54 c0       	rjmp	.+168    	; 0xc17c <update_turret+0x11c>
	}
	else if (t->shared.direction == D_LEFT)
    c0d4:	98 81       	ld	r25, Y
    c0d6:	93 30       	cpi	r25, 0x03	; 3
    c0d8:	19 f5       	brne	.+70     	; 0xc120 <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    c0da:	63 2f       	mov	r22, r19
    c0dc:	70 e0       	ldi	r23, 0x00	; 0
    c0de:	80 e0       	ldi	r24, 0x00	; 0
    c0e0:	90 e0       	ldi	r25, 0x00	; 0
    c0e2:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    c0e6:	9b 01       	movw	r18, r22
    c0e8:	ac 01       	movw	r20, r24
    c0ea:	c7 01       	movw	r24, r14
    c0ec:	b6 01       	movw	r22, r12
    c0ee:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    c0f2:	87 ff       	sbrs	r24, 7
    c0f4:	02 c0       	rjmp	.+4      	; 0xc0fa <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    c0f6:	81 e0       	ldi	r24, 0x01	; 1
    c0f8:	24 c0       	rjmp	.+72     	; 0xc142 <update_turret+0xe2>
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    c0fa:	69 81       	ldd	r22, Y+1	; 0x01
    c0fc:	70 e0       	ldi	r23, 0x00	; 0
    c0fe:	80 e0       	ldi	r24, 0x00	; 0
    c100:	90 e0       	ldi	r25, 0x00	; 0
    c102:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    c106:	25 e6       	ldi	r18, 0x65	; 101
    c108:	38 e8       	ldi	r19, 0x88	; 136
    c10a:	48 e8       	ldi	r20, 0x88	; 136
    c10c:	5c e3       	ldi	r21, 0x3C	; 60
    c10e:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    c112:	9b 01       	movw	r18, r22
    c114:	ac 01       	movw	r20, r24
    c116:	c7 01       	movw	r24, r14
    c118:	b6 01       	movw	r22, r12
    c11a:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    c11e:	2a c0       	rjmp	.+84     	; 0xc174 <update_turret+0x114>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    c120:	91 30       	cpi	r25, 0x01	; 1
    c122:	61 f5       	brne	.+88     	; 0xc17c <update_turret+0x11c>
	{
		if (t->shared.x > right_limit)
    c124:	64 2f       	mov	r22, r20
    c126:	70 e0       	ldi	r23, 0x00	; 0
    c128:	80 e0       	ldi	r24, 0x00	; 0
    c12a:	90 e0       	ldi	r25, 0x00	; 0
    c12c:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    c130:	9b 01       	movw	r18, r22
    c132:	ac 01       	movw	r20, r24
    c134:	c7 01       	movw	r24, r14
    c136:	b6 01       	movw	r22, r12
    c138:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    c13c:	18 16       	cp	r1, r24
    c13e:	44 f4       	brge	.+16     	; 0xc150 <update_turret+0xf0>
		{
			t->shared.direction = D_LEFT;
    c140:	83 e0       	ldi	r24, 0x03	; 3
    c142:	88 83       	st	Y, r24
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
    c144:	6c e8       	ldi	r22, 0x8C	; 140
    c146:	8a e5       	ldi	r24, 0x5A	; 90
    c148:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBRandom>
    c14c:	89 83       	std	Y+1, r24	; 0x01
    c14e:	16 c0       	rjmp	.+44     	; 0xc17c <update_turret+0x11c>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    c150:	69 81       	ldd	r22, Y+1	; 0x01
    c152:	70 e0       	ldi	r23, 0x00	; 0
    c154:	80 e0       	ldi	r24, 0x00	; 0
    c156:	90 e0       	ldi	r25, 0x00	; 0
    c158:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    c15c:	25 e6       	ldi	r18, 0x65	; 101
    c15e:	38 e8       	ldi	r19, 0x88	; 136
    c160:	48 e8       	ldi	r20, 0x88	; 136
    c162:	5c e3       	ldi	r21, 0x3C	; 60
    c164:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    c168:	9b 01       	movw	r18, r22
    c16a:	ac 01       	movw	r20, r24
    c16c:	c7 01       	movw	r24, r14
    c16e:	b6 01       	movw	r22, r12
    c170:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c174:	6b 83       	std	Y+3, r22	; 0x03
    c176:	7c 83       	std	Y+4, r23	; 0x04
    c178:	8d 83       	std	Y+5, r24	; 0x05
    c17a:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    c17c:	df 91       	pop	r29
    c17e:	cf 91       	pop	r28
    c180:	ff 90       	pop	r15
    c182:	ef 90       	pop	r14
    c184:	df 90       	pop	r13
    c186:	cf 90       	pop	r12
    c188:	08 95       	ret

0000c18a <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    c18a:	0f 93       	push	r16
    c18c:	1f 93       	push	r17
    c18e:	cf 93       	push	r28
    c190:	df 93       	push	r29
    c192:	8c 01       	movw	r16, r24
    c194:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    c196:	fc 01       	movw	r30, r24
    c198:	83 85       	ldd	r24, Z+11	; 0x0b
    c19a:	81 11       	cpse	r24, r1
    c19c:	02 c0       	rjmp	.+4      	; 0xc1a2 <update_turret_shot+0x18>
	{
		s->active = 0;
    c19e:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    c1a0:	76 c0       	rjmp	.+236    	; 0xc28e <update_turret_shot+0x104>
	}
	if (!s->active)
    c1a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    c1a4:	81 11       	cpse	r24, r1
    c1a6:	2e c0       	rjmp	.+92     	; 0xc204 <update_turret_shot+0x7a>
	{
		s->active = 1;
    c1a8:	81 e0       	ldi	r24, 0x01	; 1
    c1aa:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    c1ac:	20 e0       	ldi	r18, 0x00	; 0
    c1ae:	30 e0       	ldi	r19, 0x00	; 0
    c1b0:	40 e4       	ldi	r20, 0x40	; 64
    c1b2:	50 e4       	ldi	r21, 0x40	; 64
    c1b4:	f8 01       	movw	r30, r16
    c1b6:	63 81       	ldd	r22, Z+3	; 0x03
    c1b8:	74 81       	ldd	r23, Z+4	; 0x04
    c1ba:	85 81       	ldd	r24, Z+5	; 0x05
    c1bc:	96 81       	ldd	r25, Z+6	; 0x06
    c1be:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c1c2:	6b 83       	std	Y+3, r22	; 0x03
    c1c4:	7c 83       	std	Y+4, r23	; 0x04
    c1c6:	8d 83       	std	Y+5, r24	; 0x05
    c1c8:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    c1ca:	20 e0       	ldi	r18, 0x00	; 0
    c1cc:	30 e0       	ldi	r19, 0x00	; 0
    c1ce:	40 e4       	ldi	r20, 0x40	; 64
    c1d0:	50 e4       	ldi	r21, 0x40	; 64
    c1d2:	f8 01       	movw	r30, r16
    c1d4:	67 81       	ldd	r22, Z+7	; 0x07
    c1d6:	70 85       	ldd	r23, Z+8	; 0x08
    c1d8:	81 85       	ldd	r24, Z+9	; 0x09
    c1da:	92 85       	ldd	r25, Z+10	; 0x0a
    c1dc:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c1e0:	6f 83       	std	Y+7, r22	; 0x07
    c1e2:	78 87       	std	Y+8, r23	; 0x08
    c1e4:	89 87       	std	Y+9, r24	; 0x09
    c1e6:	9a 87       	std	Y+10, r25	; 0x0a
		SFX_CANNONBALL;
    c1e8:	80 91 4c 0c 	lds	r24, 0x0C4C
    c1ec:	80 fd       	sbrc	r24, 0
    c1ee:	0a c0       	rjmp	.+20     	; 0xc204 <update_turret_shot+0x7a>
    c1f0:	80 91 bb 0f 	lds	r24, 0x0FBB
    c1f4:	80 fd       	sbrc	r24, 0
    c1f6:	06 c0       	rjmp	.+12     	; 0xc204 <update_turret_shot+0x7a>
    c1f8:	2f ef       	ldi	r18, 0xFF	; 255
    c1fa:	47 e1       	ldi	r20, 0x17	; 23
    c1fc:	61 e0       	ldi	r22, 0x01	; 1
    c1fe:	84 e0       	ldi	r24, 0x04	; 4
    c200:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    c204:	23 e3       	ldi	r18, 0x33	; 51
    c206:	35 e5       	ldi	r19, 0x55	; 85
    c208:	45 e8       	ldi	r20, 0x85	; 133
    c20a:	50 e4       	ldi	r21, 0x40	; 64
    c20c:	6f 81       	ldd	r22, Y+7	; 0x07
    c20e:	78 85       	ldd	r23, Y+8	; 0x08
    c210:	89 85       	ldd	r24, Y+9	; 0x09
    c212:	9a 85       	ldd	r25, Y+10	; 0x0a
    c214:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c218:	6f 83       	std	Y+7, r22	; 0x07
    c21a:	78 87       	std	Y+8, r23	; 0x08
    c21c:	89 87       	std	Y+9, r24	; 0x09
    c21e:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    c220:	20 e0       	ldi	r18, 0x00	; 0
    c222:	30 e0       	ldi	r19, 0x00	; 0
    c224:	40 e0       	ldi	r20, 0x00	; 0
    c226:	51 e4       	ldi	r21, 0x41	; 65
    c228:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c22c:	20 e0       	ldi	r18, 0x00	; 0
    c22e:	30 e0       	ldi	r19, 0x00	; 0
    c230:	48 e5       	ldi	r20, 0x58	; 88
    c232:	53 e4       	ldi	r21, 0x43	; 67
    c234:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    c238:	18 16       	cp	r1, r24
    c23a:	0c f4       	brge	.+2      	; 0xc23e <update_turret_shot+0xb4>
    c23c:	b0 cf       	rjmp	.-160    	; 0xc19e <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG))
    c23e:	00 91 15 0c 	lds	r16, 0x0C15
    c242:	10 91 16 0c 	lds	r17, 0x0C16
    c246:	be 01       	movw	r22, r28
    c248:	c8 01       	movw	r24, r16
    c24a:	0e 94 66 57 	call	0xaecc	; 0xaecc <player_shot>
    c24e:	88 23       	and	r24, r24
    c250:	f1 f0       	breq	.+60     	; 0xc28e <update_turret_shot+0x104>
    c252:	f8 01       	movw	r30, r16
    c254:	85 89       	ldd	r24, Z+21	; 0x15
    c256:	80 fd       	sbrc	r24, 0
    c258:	1a c0       	rjmp	.+52     	; 0xc28e <update_turret_shot+0x104>
	{
		game.boss_fight_player_lives--;
    c25a:	90 91 0b 0c 	lds	r25, 0x0C0B
    c25e:	91 50       	subi	r25, 0x01	; 1
    c260:	90 93 0b 0c 	sts	0x0C0B, r25
		if (game.boss_fight_player_lives <= 0)
    c264:	91 11       	cpse	r25, r1
    c266:	03 c0       	rjmp	.+6      	; 0xc26e <update_turret_shot+0xe4>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    c268:	80 e1       	ldi	r24, 0x10	; 16
    c26a:	80 93 09 0c 	sts	0x0C09, r24
		}
		s->active = 0;
    c26e:	1e 86       	std	Y+14, r1	; 0x0e
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    c270:	60 91 0a 0c 	lds	r22, 0x0C0A
    c274:	c8 01       	movw	r24, r16
    c276:	0e 94 95 58 	call	0xb12a	; 0xb12a <kill_player>
		SFX_TANK_EXPLODE;
    c27a:	2f ef       	ldi	r18, 0xFF	; 255
    c27c:	40 e1       	ldi	r20, 0x10	; 16
    c27e:	66 e0       	ldi	r22, 0x06	; 6
    c280:	84 e0       	ldi	r24, 0x04	; 4
	}
}
    c282:	df 91       	pop	r29
    c284:	cf 91       	pop	r28
    c286:	1f 91       	pop	r17
    c288:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		SFX_TANK_EXPLODE;
    c28a:	0c 94 b1 43 	jmp	0x8762	; 0x8762 <TriggerNote>
	}
}
    c28e:	df 91       	pop	r29
    c290:	cf 91       	pop	r28
    c292:	1f 91       	pop	r17
    c294:	0f 91       	pop	r16
    c296:	08 95       	ret

0000c298 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    c298:	10 92 06 0c 	sts	0x0C06, r1
	clear_sprites();
    c29c:	0e 94 d3 52 	call	0xa5a6	; 0xa5a6 <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else	
	Print(7, 13, (char*) str1Player);
    c2a0:	40 ef       	ldi	r20, 0xF0	; 240
    c2a2:	52 e0       	ldi	r21, 0x02	; 2
    c2a4:	6d e0       	ldi	r22, 0x0D	; 13
    c2a6:	70 e0       	ldi	r23, 0x00	; 0
    c2a8:	87 e0       	ldi	r24, 0x07	; 7
    c2aa:	90 e0       	ldi	r25, 0x00	; 0
    c2ac:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(7, 14, (char*) str2Player);
    c2b0:	4f ed       	ldi	r20, 0xDF	; 223
    c2b2:	52 e0       	ldi	r21, 0x02	; 2
    c2b4:	6e e0       	ldi	r22, 0x0E	; 14
    c2b6:	70 e0       	ldi	r23, 0x00	; 0
    c2b8:	87 e0       	ldi	r24, 0x07	; 7
    c2ba:	90 e0       	ldi	r25, 0x00	; 0
    c2bc:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(7, 15, (char*) strHighscores);
    c2c0:	4b e7       	ldi	r20, 0x7B	; 123
    c2c2:	52 e0       	ldi	r21, 0x02	; 2
    c2c4:	6f e0       	ldi	r22, 0x0F	; 15
    c2c6:	70 e0       	ldi	r23, 0x00	; 0
    c2c8:	87 e0       	ldi	r24, 0x07	; 7
    c2ca:	90 e0       	ldi	r25, 0x00	; 0
    c2cc:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(7, 13, (char*) str1Player);
    c2d0:	40 ef       	ldi	r20, 0xF0	; 240
    c2d2:	52 e0       	ldi	r21, 0x02	; 2
    c2d4:	6d e0       	ldi	r22, 0x0D	; 13
    c2d6:	70 e0       	ldi	r23, 0x00	; 0
    c2d8:	87 e0       	ldi	r24, 0x07	; 7
    c2da:	90 e0       	ldi	r25, 0x00	; 0
    c2dc:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(5, 26, (char*) strCopyright);
    c2e0:	45 e8       	ldi	r20, 0x85	; 133
    c2e2:	52 e0       	ldi	r21, 0x02	; 2
    c2e4:	6a e1       	ldi	r22, 0x1A	; 26
    c2e6:	70 e0       	ldi	r23, 0x00	; 0
    c2e8:	85 e0       	ldi	r24, 0x05	; 5
    c2ea:	90 e0       	ldi	r25, 0x00	; 0
    c2ec:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	MapSprite2(0, map_right_arrow, 0);
    c2f0:	40 e0       	ldi	r20, 0x00	; 0
    c2f2:	6d e5       	ldi	r22, 0x5D	; 93
    c2f4:	7c e3       	ldi	r23, 0x3C	; 60
    c2f6:	80 e0       	ldi	r24, 0x00	; 0
    c2f8:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    c2fc:	40 e1       	ldi	r20, 0x10	; 16
    c2fe:	56 e7       	ldi	r21, 0x76	; 118
    c300:	65 e0       	ldi	r22, 0x05	; 5
    c302:	84 e0       	ldi	r24, 0x04	; 4
    c304:	0c 94 ec 4d 	jmp	0x9bd8	; 0x9bd8 <DrawMap>

0000c308 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    c308:	fc 01       	movw	r30, r24
    c30a:	20 81       	ld	r18, Z
    c30c:	31 81       	ldd	r19, Z+1	; 0x01
    c30e:	28 70       	andi	r18, 0x08	; 8
    c310:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &p2) return p1.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    c312:	81 e0       	ldi	r24, 0x01	; 1
    c314:	23 2b       	or	r18, r19
    c316:	09 f4       	brne	.+2      	; 0xc31a <select_pressed+0x12>
    c318:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    c31a:	08 95       	ret

0000c31c <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    c31c:	ff 92       	push	r15
    c31e:	0f 93       	push	r16
    c320:	1f 93       	push	r17
    c322:	cf 93       	push	r28
    c324:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    c326:	81 e0       	ldi	r24, 0x01	; 1
    c328:	80 93 06 0c 	sts	0x0C06, r24
	clear_sprites();
    c32c:	0e 94 d3 52 	call	0xa5a6	; 0xa5a6 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    c330:	4d ed       	ldi	r20, 0xDD	; 221
    c332:	55 e7       	ldi	r21, 0x75	; 117
    c334:	61 e0       	ldi	r22, 0x01	; 1
    c336:	87 e0       	ldi	r24, 0x07	; 7
    c338:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    c33c:	47 ed       	ldi	r20, 0xD7	; 215
    c33e:	55 e7       	ldi	r21, 0x75	; 117
    c340:	61 e0       	ldi	r22, 0x01	; 1
    c342:	84 e1       	ldi	r24, 0x14	; 20
    c344:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
	Print(10, 2, (char*) strHighscores);
    c348:	4b e7       	ldi	r20, 0x7B	; 123
    c34a:	52 e0       	ldi	r21, 0x02	; 2
    c34c:	62 e0       	ldi	r22, 0x02	; 2
    c34e:	70 e0       	ldi	r23, 0x00	; 0
    c350:	8a e0       	ldi	r24, 0x0A	; 10
    c352:	90 e0       	ldi	r25, 0x00	; 0
    c354:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
    c358:	05 ec       	ldi	r16, 0xC5	; 197
    c35a:	1b e0       	ldi	r17, 0x0B	; 11
    c35c:	c7 e0       	ldi	r28, 0x07	; 7
    c35e:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    c360:	ff 24       	eor	r15, r15
    c362:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    c364:	20 e0       	ldi	r18, 0x00	; 0
    c366:	4f 2d       	mov	r20, r15
    c368:	be 01       	movw	r22, r28
    c36a:	82 e0       	ldi	r24, 0x02	; 2
    c36c:	90 e0       	ldi	r25, 0x00	; 0
    c36e:	0e 94 39 4e 	call	0x9c72	; 0x9c72 <PrintByte>
		PrintChar(3, y, '.');
    c372:	4e e2       	ldi	r20, 0x2E	; 46
    c374:	be 01       	movw	r22, r28
    c376:	83 e0       	ldi	r24, 0x03	; 3
    c378:	90 e0       	ldi	r25, 0x00	; 0
    c37a:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
    c37e:	f8 01       	movw	r30, r16
    c380:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    c382:	80 81       	ld	r24, Z
    c384:	93 e0       	ldi	r25, 0x03	; 3
    c386:	89 9f       	mul	r24, r25
    c388:	a0 01       	movw	r20, r0
    c38a:	11 24       	eor	r1, r1
    c38c:	48 51       	subi	r20, 0x18	; 24
    c38e:	54 4f       	sbci	r21, 0xF4	; 244
    c390:	23 e0       	ldi	r18, 0x03	; 3
    c392:	6c 2f       	mov	r22, r28
    c394:	85 e0       	ldi	r24, 0x05	; 5
    c396:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
		Print(9, y, (char*) strOwns);
    c39a:	47 e4       	ldi	r20, 0x47	; 71
    c39c:	52 e0       	ldi	r21, 0x02	; 2
    c39e:	be 01       	movw	r22, r28
    c3a0:	89 e0       	ldi	r24, 0x09	; 9
    c3a2:	90 e0       	ldi	r25, 0x00	; 0
    c3a4:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
    c3a8:	f8 01       	movw	r30, r16
    c3aa:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    c3ac:	80 81       	ld	r24, Z
    c3ae:	e3 e0       	ldi	r30, 0x03	; 3
    c3b0:	8e 9f       	mul	r24, r30
    c3b2:	a0 01       	movw	r20, r0
    c3b4:	11 24       	eor	r1, r1
    c3b6:	48 51       	subi	r20, 0x18	; 24
    c3b8:	54 4f       	sbci	r21, 0xF4	; 244
    c3ba:	23 e0       	ldi	r18, 0x03	; 3
    c3bc:	6c 2f       	mov	r22, r28
    c3be:	8e e0       	ldi	r24, 0x0E	; 14
    c3c0:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
		Print(18, y, (char*) strBy);
    c3c4:	44 e4       	ldi	r20, 0x44	; 68
    c3c6:	52 e0       	ldi	r21, 0x02	; 2
    c3c8:	be 01       	movw	r22, r28
    c3ca:	82 e1       	ldi	r24, 0x12	; 18
    c3cc:	90 e0       	ldi	r25, 0x00	; 0
    c3ce:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    c3d2:	21 e0       	ldi	r18, 0x01	; 1
    c3d4:	f8 01       	movw	r30, r16
    c3d6:	32 97       	sbiw	r30, 0x02	; 2
    c3d8:	40 81       	ld	r20, Z
    c3da:	be 01       	movw	r22, r28
    c3dc:	87 e1       	ldi	r24, 0x17	; 23
    c3de:	90 e0       	ldi	r25, 0x00	; 0
    c3e0:	0e 94 39 4e 	call	0x9c72	; 0x9c72 <PrintByte>
		PrintChar(24, y, '-');
    c3e4:	4d e2       	ldi	r20, 0x2D	; 45
    c3e6:	be 01       	movw	r22, r28
    c3e8:	88 e1       	ldi	r24, 0x18	; 24
    c3ea:	90 e0       	ldi	r25, 0x00	; 0
    c3ec:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    c3f0:	21 e0       	ldi	r18, 0x01	; 1
    c3f2:	f8 01       	movw	r30, r16
    c3f4:	31 97       	sbiw	r30, 0x01	; 1
    c3f6:	40 81       	ld	r20, Z
    c3f8:	be 01       	movw	r22, r28
    c3fa:	8b e1       	ldi	r24, 0x1B	; 27
    c3fc:	90 e0       	ldi	r25, 0x00	; 0
    c3fe:	0e 94 39 4e 	call	0x9c72	; 0x9c72 <PrintByte>
		if (scores.data[i+4])
    c402:	f8 01       	movw	r30, r16
    c404:	80 81       	ld	r24, Z
    c406:	88 23       	and	r24, r24
    c408:	11 f0       	breq	.+4      	; 0xc40e <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    c40a:	4a e2       	ldi	r20, 0x2A	; 42
    c40c:	01 c0       	rjmp	.+2      	; 0xc410 <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    c40e:	40 e2       	ldi	r20, 0x20	; 32
    c410:	be 01       	movw	r22, r28
    c412:	8d e1       	ldi	r24, 0x1D	; 29
    c414:	90 e0       	ldi	r25, 0x00	; 0
    c416:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
		y += 3;
		rank += 1;
    c41a:	f3 94       	inc	r15
    c41c:	23 96       	adiw	r28, 0x03	; 3
    c41e:	0b 5f       	subi	r16, 0xFB	; 251
    c420:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    c422:	f6 e0       	ldi	r31, 0x06	; 6
    c424:	ff 12       	cpse	r15, r31
    c426:	9e cf       	rjmp	.-196    	; 0xc364 <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    c428:	44 eb       	ldi	r20, 0xB4	; 180
    c42a:	52 e0       	ldi	r21, 0x02	; 2
    c42c:	66 e1       	ldi	r22, 0x16	; 22
    c42e:	70 e0       	ldi	r23, 0x00	; 0
    c430:	83 e0       	ldi	r24, 0x03	; 3
    c432:	90 e0       	ldi	r25, 0x00	; 0
    c434:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(10, 24, (char*) strCancelHandle);
    c438:	49 ea       	ldi	r20, 0xA9	; 169
    c43a:	52 e0       	ldi	r21, 0x02	; 2
    c43c:	68 e1       	ldi	r22, 0x18	; 24
    c43e:	70 e0       	ldi	r23, 0x00	; 0
    c440:	8a e0       	ldi	r24, 0x0A	; 10
    c442:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    c444:	df 91       	pop	r29
    c446:	cf 91       	pop	r28
    c448:	1f 91       	pop	r17
    c44a:	0f 91       	pop	r16
    c44c:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    c44e:	0c 94 6c 4e 	jmp	0x9cd8	; 0x9cd8 <Print>

0000c452 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    c452:	0e 94 e0 52 	call	0xa5c0	; 0xa5c0 <save_score>
	fade_through();
    c456:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
	init_game_state();
    c45a:	0e 94 60 52 	call	0xa4c0	; 0xa4c0 <init_game_state>
	load_tank_rank();
    c45e:	0c 94 8e 61 	jmp	0xc31c	; 0xc31c <load_tank_rank>

0000c462 <update_player>:
		return FRAME_TIME * s->speed;
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
}

void update_player(JoyPadState* p, Player* player)
{
    c462:	cf 92       	push	r12
    c464:	df 92       	push	r13
    c466:	ef 92       	push	r14
    c468:	ff 92       	push	r15
    c46a:	0f 93       	push	r16
    c46c:	1f 93       	push	r17
    c46e:	cf 93       	push	r28
    c470:	df 93       	push	r29
    c472:	00 d0       	rcall	.+0      	; 0xc474 <update_player+0x12>
    c474:	00 d0       	rcall	.+0      	; 0xc476 <update_player+0x14>
    c476:	cd b7       	in	r28, 0x3d	; 61
    c478:	de b7       	in	r29, 0x3e	; 62
    c47a:	7c 01       	movw	r14, r24
    c47c:	6b 01       	movw	r12, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    c47e:	fb 01       	movw	r30, r22
    c480:	12 82       	std	Z+2, r1	; 0x02
	player->old_active_shots = player->active_shots;
    c482:	81 89       	ldd	r24, Z+17	; 0x11
    c484:	82 8b       	std	Z+18, r24	; 0x12
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    c486:	f7 01       	movw	r30, r14
    c488:	80 81       	ld	r24, Z
    c48a:	83 ff       	sbrs	r24, 3
    c48c:	13 c0       	rjmp	.+38     	; 0xc4b4 <update_player+0x52>
    c48e:	80 91 09 0c 	lds	r24, 0x0C09
    c492:	81 11       	cpse	r24, r1
    c494:	0f c0       	rjmp	.+30     	; 0xc4b4 <update_player+0x52>
	{
#if JAMMA
#else
		SFX_NAVIGATE;
    c496:	2f ef       	ldi	r18, 0xFF	; 255
    c498:	47 e1       	ldi	r20, 0x17	; 23
    c49a:	64 e0       	ldi	r22, 0x04	; 4
    c49c:	84 e0       	ldi	r24, 0x04	; 4
    c49e:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
		game.paused = game.paused ^ 1;
    c4a2:	90 91 08 0c 	lds	r25, 0x0C08
    c4a6:	81 e0       	ldi	r24, 0x01	; 1
    c4a8:	89 27       	eor	r24, r25
    c4aa:	80 93 08 0c 	sts	0x0C08, r24
		load_level_tiles(false);
    c4ae:	80 e0       	ldi	r24, 0x00	; 0
    c4b0:	0e 94 34 5e 	call	0xbc68	; 0xbc68 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    c4b4:	80 91 08 0c 	lds	r24, 0x0C08
    c4b8:	81 11       	cpse	r24, r1
    c4ba:	ae c0       	rjmp	.+348    	; 0xc618 <update_player+0x1b6>
    c4bc:	f6 01       	movw	r30, r12
    c4be:	85 89       	ldd	r24, Z+21	; 0x15
    c4c0:	80 fd       	sbrc	r24, 0
    c4c2:	aa c0       	rjmp	.+340    	; 0xc618 <update_player+0x1b6>
	{
		player->shared.speed = player->max_speed;
    c4c4:	87 89       	ldd	r24, Z+23	; 0x17
    c4c6:	81 83       	std	Z+1, r24	; 0x01
		if ((p->held & BTN_UP))
    c4c8:	f7 01       	movw	r30, r14
    c4ca:	84 81       	ldd	r24, Z+4	; 0x04
    c4cc:	84 ff       	sbrs	r24, 4
    c4ce:	10 c0       	rjmp	.+32     	; 0xc4f0 <update_player+0x8e>
		{
			player->shared.direction = D_UP;
    c4d0:	f6 01       	movw	r30, r12
    c4d2:	10 82       	st	Z, r1
			player->shared.y -= get_delta(player, &player->shared);
    c4d4:	b6 01       	movw	r22, r12
    c4d6:	c6 01       	movw	r24, r12
    c4d8:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    c4dc:	9b 01       	movw	r18, r22
    c4de:	ac 01       	movw	r20, r24
    c4e0:	f6 01       	movw	r30, r12
    c4e2:	67 81       	ldd	r22, Z+7	; 0x07
    c4e4:	70 85       	ldd	r23, Z+8	; 0x08
    c4e6:	81 85       	ldd	r24, Z+9	; 0x09
    c4e8:	92 85       	ldd	r25, Z+10	; 0x0a
    c4ea:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    c4ee:	25 c0       	rjmp	.+74     	; 0xc53a <update_player+0xd8>
		}
		else if ((p->held & BTN_RIGHT))
    c4f0:	87 ff       	sbrs	r24, 7
    c4f2:	11 c0       	rjmp	.+34     	; 0xc516 <update_player+0xb4>
		{
			player->shared.direction = D_RIGHT;
    c4f4:	81 e0       	ldi	r24, 0x01	; 1
    c4f6:	f6 01       	movw	r30, r12
    c4f8:	80 83       	st	Z, r24
			player->shared.x += get_delta(player, &player->shared);
    c4fa:	b6 01       	movw	r22, r12
    c4fc:	c6 01       	movw	r24, r12
    c4fe:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    c502:	9b 01       	movw	r18, r22
    c504:	ac 01       	movw	r20, r24
    c506:	f6 01       	movw	r30, r12
    c508:	63 81       	ldd	r22, Z+3	; 0x03
    c50a:	74 81       	ldd	r23, Z+4	; 0x04
    c50c:	85 81       	ldd	r24, Z+5	; 0x05
    c50e:	96 81       	ldd	r25, Z+6	; 0x06
    c510:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c514:	2a c0       	rjmp	.+84     	; 0xc56a <update_player+0x108>
		}
		else if ((p->held & BTN_DOWN))
    c516:	85 ff       	sbrs	r24, 5
    c518:	16 c0       	rjmp	.+44     	; 0xc546 <update_player+0xe4>
		{
			player->shared.direction = D_DOWN;
    c51a:	82 e0       	ldi	r24, 0x02	; 2
    c51c:	f6 01       	movw	r30, r12
    c51e:	80 83       	st	Z, r24
			player->shared.y += get_delta(player, &player->shared);
    c520:	b6 01       	movw	r22, r12
    c522:	c6 01       	movw	r24, r12
    c524:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    c528:	9b 01       	movw	r18, r22
    c52a:	ac 01       	movw	r20, r24
    c52c:	f6 01       	movw	r30, r12
    c52e:	67 81       	ldd	r22, Z+7	; 0x07
    c530:	70 85       	ldd	r23, Z+8	; 0x08
    c532:	81 85       	ldd	r24, Z+9	; 0x09
    c534:	92 85       	ldd	r25, Z+10	; 0x0a
    c536:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c53a:	f6 01       	movw	r30, r12
    c53c:	67 83       	std	Z+7, r22	; 0x07
    c53e:	70 87       	std	Z+8, r23	; 0x08
    c540:	81 87       	std	Z+9, r24	; 0x09
    c542:	92 87       	std	Z+10, r25	; 0x0a
    c544:	1a c0       	rjmp	.+52     	; 0xc57a <update_player+0x118>
		}
		else if ((p->held & BTN_LEFT))
    c546:	86 ff       	sbrs	r24, 6
    c548:	16 c0       	rjmp	.+44     	; 0xc576 <update_player+0x114>
		{
			player->shared.direction = D_LEFT;
    c54a:	83 e0       	ldi	r24, 0x03	; 3
    c54c:	f6 01       	movw	r30, r12
    c54e:	80 83       	st	Z, r24
			player->shared.x -= get_delta(player, &player->shared);
    c550:	b6 01       	movw	r22, r12
    c552:	c6 01       	movw	r24, r12
    c554:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    c558:	9b 01       	movw	r18, r22
    c55a:	ac 01       	movw	r20, r24
    c55c:	f6 01       	movw	r30, r12
    c55e:	63 81       	ldd	r22, Z+3	; 0x03
    c560:	74 81       	ldd	r23, Z+4	; 0x04
    c562:	85 81       	ldd	r24, Z+5	; 0x05
    c564:	96 81       	ldd	r25, Z+6	; 0x06
    c566:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    c56a:	f6 01       	movw	r30, r12
    c56c:	63 83       	std	Z+3, r22	; 0x03
    c56e:	74 83       	std	Z+4, r23	; 0x04
    c570:	85 83       	std	Z+5, r24	; 0x05
    c572:	96 83       	std	Z+6, r25	; 0x06
    c574:	02 c0       	rjmp	.+4      	; 0xc57a <update_player+0x118>
		}
		else
		{
			player->shared.speed = 0;
    c576:	f6 01       	movw	r30, r12
    c578:	11 82       	std	Z+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    c57a:	c7 01       	movw	r24, r14
    c57c:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <shoot_pressed>
    c580:	88 23       	and	r24, r24
    c582:	09 f4       	brne	.+2      	; 0xc586 <update_player+0x124>
    c584:	49 c0       	rjmp	.+146    	; 0xc618 <update_player+0x1b6>
    c586:	f6 01       	movw	r30, r12
    c588:	81 89       	ldd	r24, Z+17	; 0x11
    c58a:	81 11       	cpse	r24, r1
    c58c:	45 c0       	rjmp	.+138    	; 0xc618 <update_player+0x1b6>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    c58e:	83 ad       	ldd	r24, Z+59	; 0x3b
    c590:	81 11       	cpse	r24, r1
    c592:	42 c0       	rjmp	.+132    	; 0xc618 <update_player+0x1b6>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    c594:	86 01       	movw	r16, r12
    c596:	03 5d       	subi	r16, 0xD3	; 211
    c598:	1f 4f       	sbci	r17, 0xFF	; 255
				if (!shot->active)
				{
					if (player->has_rocket)
    c59a:	80 8d       	ldd	r24, Z+24	; 0x18
    c59c:	88 23       	and	r24, r24
    c59e:	a1 f0       	breq	.+40     	; 0xc5c8 <update_player+0x166>
					{
						init_shot_state(shot, ROCKET_SHOT);
    c5a0:	61 e0       	ldi	r22, 0x01	; 1
    c5a2:	c8 01       	movw	r24, r16
    c5a4:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    c5a8:	61 e0       	ldi	r22, 0x01	; 1
    c5aa:	c8 01       	movw	r24, r16
    c5ac:	0e 94 83 51 	call	0xa306	; 0xa306 <set_shot_animations>
						SFX_ROCKET;
    c5b0:	80 91 4c 0c 	lds	r24, 0x0C4C
    c5b4:	80 fd       	sbrc	r24, 0
    c5b6:	1e c0       	rjmp	.+60     	; 0xc5f4 <update_player+0x192>
    c5b8:	80 91 bb 0f 	lds	r24, 0x0FBB
    c5bc:	80 fd       	sbrc	r24, 0
    c5be:	1a c0       	rjmp	.+52     	; 0xc5f4 <update_player+0x192>
    c5c0:	2f ef       	ldi	r18, 0xFF	; 255
    c5c2:	47 e1       	ldi	r20, 0x17	; 23
    c5c4:	65 e0       	ldi	r22, 0x05	; 5
    c5c6:	13 c0       	rjmp	.+38     	; 0xc5ee <update_player+0x18c>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    c5c8:	60 e0       	ldi	r22, 0x00	; 0
    c5ca:	c8 01       	movw	r24, r16
    c5cc:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    c5d0:	60 e0       	ldi	r22, 0x00	; 0
    c5d2:	c8 01       	movw	r24, r16
    c5d4:	0e 94 83 51 	call	0xa306	; 0xa306 <set_shot_animations>
						SFX_CANNONBALL;
    c5d8:	80 91 4c 0c 	lds	r24, 0x0C4C
    c5dc:	80 fd       	sbrc	r24, 0
    c5de:	0a c0       	rjmp	.+20     	; 0xc5f4 <update_player+0x192>
    c5e0:	80 91 bb 0f 	lds	r24, 0x0FBB
    c5e4:	80 fd       	sbrc	r24, 0
    c5e6:	06 c0       	rjmp	.+12     	; 0xc5f4 <update_player+0x192>
    c5e8:	2f ef       	ldi	r18, 0xFF	; 255
    c5ea:	47 e1       	ldi	r20, 0x17	; 23
    c5ec:	61 e0       	ldi	r22, 0x01	; 1
    c5ee:	84 e0       	ldi	r24, 0x04	; 4
    c5f0:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
					}
					player->active_shots++;
    c5f4:	f6 01       	movw	r30, r12
    c5f6:	81 89       	ldd	r24, Z+17	; 0x11
    c5f8:	8f 5f       	subi	r24, 0xFF	; 255
    c5fa:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    c5fc:	80 81       	ld	r24, Z
    c5fe:	85 a7       	std	Z+45, r24	; 0x2d
					position_shot(player, shot);
    c600:	b8 01       	movw	r22, r16
    c602:	c6 01       	movw	r24, r12
    c604:	0e 94 50 53 	call	0xa6a0	; 0xa6a0 <position_shot>
					shot->active = 1;
    c608:	81 e0       	ldi	r24, 0x01	; 1
    c60a:	f6 01       	movw	r30, r12
    c60c:	83 af       	std	Z+59, r24	; 0x3b
					if (player->has_over_speed)
    c60e:	81 8d       	ldd	r24, Z+25	; 0x19
    c610:	88 23       	and	r24, r24
    c612:	11 f0       	breq	.+4      	; 0xc618 <update_player+0x1b6>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    c614:	8a ea       	ldi	r24, 0xAA	; 170
    c616:	86 a7       	std	Z+46, r24	; 0x2e
				}
			}
		}
	}
	
	if (!game.paused)
    c618:	80 91 08 0c 	lds	r24, 0x0C08
    c61c:	81 11       	cpse	r24, r1
    c61e:	86 c0       	rjmp	.+268    	; 0xc72c <update_player+0x2ca>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    c620:	86 01       	movw	r16, r12
    c622:	03 5d       	subi	r16, 0xD3	; 211
    c624:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    c626:	f6 01       	movw	r30, r12
    c628:	83 ad       	ldd	r24, Z+59	; 0x3b
    c62a:	88 23       	and	r24, r24
    c62c:	09 f4       	brne	.+2      	; 0xc630 <update_player+0x1ce>
    c62e:	97 c0       	rjmp	.+302    	; 0xc75e <update_player+0x2fc>
			{
				switch (shot->shared.direction)
    c630:	85 a5       	ldd	r24, Z+45	; 0x2d
    c632:	81 30       	cpi	r24, 0x01	; 1
    c634:	11 f1       	breq	.+68     	; 0xc67a <update_player+0x218>
    c636:	98 f0       	brcs	.+38     	; 0xc65e <update_player+0x1fc>
    c638:	82 30       	cpi	r24, 0x02	; 2
    c63a:	69 f1       	breq	.+90     	; 0xc696 <update_player+0x234>
    c63c:	83 30       	cpi	r24, 0x03	; 3
    c63e:	09 f0       	breq	.+2      	; 0xc642 <update_player+0x1e0>
    c640:	42 c0       	rjmp	.+132    	; 0xc6c6 <update_player+0x264>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    c642:	b8 01       	movw	r22, r16
    c644:	c6 01       	movw	r24, r12
    c646:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    c64a:	9b 01       	movw	r18, r22
    c64c:	ac 01       	movw	r20, r24
    c64e:	f6 01       	movw	r30, r12
    c650:	60 a9       	ldd	r22, Z+48	; 0x30
    c652:	71 a9       	ldd	r23, Z+49	; 0x31
    c654:	82 a9       	ldd	r24, Z+50	; 0x32
    c656:	93 a9       	ldd	r25, Z+51	; 0x33
    c658:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    c65c:	2f c0       	rjmp	.+94     	; 0xc6bc <update_player+0x25a>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    c65e:	b8 01       	movw	r22, r16
    c660:	c6 01       	movw	r24, r12
    c662:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    c666:	9b 01       	movw	r18, r22
    c668:	ac 01       	movw	r20, r24
    c66a:	f6 01       	movw	r30, r12
    c66c:	64 a9       	ldd	r22, Z+52	; 0x34
    c66e:	75 a9       	ldd	r23, Z+53	; 0x35
    c670:	86 a9       	ldd	r24, Z+54	; 0x36
    c672:	97 a9       	ldd	r25, Z+55	; 0x37
    c674:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    c678:	1b c0       	rjmp	.+54     	; 0xc6b0 <update_player+0x24e>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    c67a:	b8 01       	movw	r22, r16
    c67c:	c6 01       	movw	r24, r12
    c67e:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    c682:	9b 01       	movw	r18, r22
    c684:	ac 01       	movw	r20, r24
    c686:	f6 01       	movw	r30, r12
    c688:	60 a9       	ldd	r22, Z+48	; 0x30
    c68a:	71 a9       	ldd	r23, Z+49	; 0x31
    c68c:	82 a9       	ldd	r24, Z+50	; 0x32
    c68e:	93 a9       	ldd	r25, Z+51	; 0x33
    c690:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c694:	13 c0       	rjmp	.+38     	; 0xc6bc <update_player+0x25a>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    c696:	b8 01       	movw	r22, r16
    c698:	c6 01       	movw	r24, r12
    c69a:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    c69e:	9b 01       	movw	r18, r22
    c6a0:	ac 01       	movw	r20, r24
    c6a2:	f6 01       	movw	r30, r12
    c6a4:	64 a9       	ldd	r22, Z+52	; 0x34
    c6a6:	75 a9       	ldd	r23, Z+53	; 0x35
    c6a8:	86 a9       	ldd	r24, Z+54	; 0x36
    c6aa:	97 a9       	ldd	r25, Z+55	; 0x37
    c6ac:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c6b0:	f6 01       	movw	r30, r12
    c6b2:	64 ab       	std	Z+52, r22	; 0x34
    c6b4:	75 ab       	std	Z+53, r23	; 0x35
    c6b6:	86 ab       	std	Z+54, r24	; 0x36
    c6b8:	97 ab       	std	Z+55, r25	; 0x37
    c6ba:	05 c0       	rjmp	.+10     	; 0xc6c6 <update_player+0x264>
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    c6bc:	f6 01       	movw	r30, r12
    c6be:	60 ab       	std	Z+48, r22	; 0x30
    c6c0:	71 ab       	std	Z+49, r23	; 0x31
    c6c2:	82 ab       	std	Z+50, r24	; 0x32
    c6c4:	93 ab       	std	Z+51, r25	; 0x33
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    c6c6:	f6 01       	movw	r30, r12
    c6c8:	f4 ac       	ldd	r15, Z+60	; 0x3c
    c6ca:	f8 e0       	ldi	r31, 0x08	; 8
    c6cc:	ff 15       	cp	r31, r15
    c6ce:	38 f0       	brcs	.+14     	; 0xc6de <update_player+0x27c>
    c6d0:	b8 01       	movw	r22, r16
    c6d2:	c6 01       	movw	r24, r12
    c6d4:	0e 94 63 54 	call	0xa8c6	; 0xa8c6 <get_delta>
    c6d8:	9b 01       	movw	r18, r22
    c6da:	ac 01       	movw	r20, r24
    c6dc:	03 c0       	rjmp	.+6      	; 0xc6e4 <update_player+0x282>
    c6de:	20 e0       	ldi	r18, 0x00	; 0
    c6e0:	30 e0       	ldi	r19, 0x00	; 0
    c6e2:	a9 01       	movw	r20, r18
    c6e4:	6f 2d       	mov	r22, r15
    c6e6:	70 e0       	ldi	r23, 0x00	; 0
    c6e8:	80 e0       	ldi	r24, 0x00	; 0
    c6ea:	90 e0       	ldi	r25, 0x00	; 0
    c6ec:	29 83       	std	Y+1, r18	; 0x01
    c6ee:	3a 83       	std	Y+2, r19	; 0x02
    c6f0:	4b 83       	std	Y+3, r20	; 0x03
    c6f2:	5c 83       	std	Y+4, r21	; 0x04
    c6f4:	0e 94 73 70 	call	0xe0e6	; 0xe0e6 <__floatsisf>
    c6f8:	29 81       	ldd	r18, Y+1	; 0x01
    c6fa:	3a 81       	ldd	r19, Y+2	; 0x02
    c6fc:	4b 81       	ldd	r20, Y+3	; 0x03
    c6fe:	5c 81       	ldd	r21, Y+4	; 0x04
    c700:	0e 94 70 6f 	call	0xdee0	; 0xdee0 <__addsf3>
    c704:	0e 94 45 70 	call	0xe08a	; 0xe08a <__fixunssfsi>
    c708:	f6 01       	movw	r30, r12
    c70a:	64 af       	std	Z+60, r22	; 0x3c
				collision_detect_shot(player, shot);
    c70c:	b8 01       	movw	r22, r16
    c70e:	c6 01       	movw	r24, r12
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    c710:	0f 90       	pop	r0
    c712:	0f 90       	pop	r0
    c714:	0f 90       	pop	r0
    c716:	0f 90       	pop	r0
    c718:	df 91       	pop	r29
    c71a:	cf 91       	pop	r28
    c71c:	1f 91       	pop	r17
    c71e:	0f 91       	pop	r16
    c720:	ff 90       	pop	r15
    c722:	ef 90       	pop	r14
    c724:	df 90       	pop	r13
    c726:	cf 90       	pop	r12
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    c728:	0c 94 6e 59 	jmp	0xb2dc	; 0xb2dc <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    c72c:	f7 01       	movw	r30, r14
    c72e:	80 81       	ld	r24, Z
    c730:	91 81       	ldd	r25, Z+1	; 0x01
    c732:	91 ff       	sbrs	r25, 1
    c734:	14 c0       	rjmp	.+40     	; 0xc75e <update_player+0x2fc>
		{
			SFX_NAVIGATE;
    c736:	2f ef       	ldi	r18, 0xFF	; 255
    c738:	47 e1       	ldi	r20, 0x17	; 23
    c73a:	64 e0       	ldi	r22, 0x04	; 4
    c73c:	84 e0       	ldi	r24, 0x04	; 4
    c73e:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
			exit_game();
		}
	}
}
    c742:	0f 90       	pop	r0
    c744:	0f 90       	pop	r0
    c746:	0f 90       	pop	r0
    c748:	0f 90       	pop	r0
    c74a:	df 91       	pop	r29
    c74c:	cf 91       	pop	r28
    c74e:	1f 91       	pop	r17
    c750:	0f 91       	pop	r16
    c752:	ff 90       	pop	r15
    c754:	ef 90       	pop	r14
    c756:	df 90       	pop	r13
    c758:	cf 90       	pop	r12
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    c75a:	0c 94 29 62 	jmp	0xc452	; 0xc452 <exit_game>
		}
	}
}
    c75e:	0f 90       	pop	r0
    c760:	0f 90       	pop	r0
    c762:	0f 90       	pop	r0
    c764:	0f 90       	pop	r0
    c766:	df 91       	pop	r29
    c768:	cf 91       	pop	r28
    c76a:	1f 91       	pop	r17
    c76c:	0f 91       	pop	r16
    c76e:	ff 90       	pop	r15
    c770:	ef 90       	pop	r14
    c772:	df 90       	pop	r13
    c774:	cf 90       	pop	r12
    c776:	08 95       	ret

0000c778 <resolve_scoring>:

void resolve_scoring()
{
    c778:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    c77a:	c0 91 07 0c 	lds	r28, 0x0C07
    c77e:	80 91 47 0c 	lds	r24, 0x0C47
    c782:	ca 30       	cpi	r28, 0x0A	; 10
    c784:	80 f5       	brcc	.+96     	; 0xc7e6 <resolve_scoring+0x6e>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    c786:	8a 30       	cpi	r24, 0x0A	; 10
    c788:	70 f0       	brcs	.+28     	; 0xc7a6 <resolve_scoring+0x2e>
    c78a:	80 91 bb 0f 	lds	r24, 0x0FBB
    c78e:	80 fd       	sbrc	r24, 0
    c790:	0a c0       	rjmp	.+20     	; 0xc7a6 <resolve_scoring+0x2e>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    c792:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBHideAllSprites>
			load_level_tiles(true);
    c796:	81 e0       	ldi	r24, 0x01	; 1
    c798:	0e 94 34 5e 	call	0xbc68	; 0xbc68 <load_level_tiles>
			print_level_score(&player1, &player2);
    c79c:	66 ea       	ldi	r22, 0xA6	; 166
    c79e:	7f e0       	ldi	r23, 0x0F	; 15
    c7a0:	87 e3       	ldi	r24, 0x37	; 55
    c7a2:	9c e0       	ldi	r25, 0x0C	; 12
    c7a4:	12 c0       	rjmp	.+36     	; 0xc7ca <resolve_scoring+0x52>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    c7a6:	80 91 b6 0f 	lds	r24, 0x0FB6
    c7aa:	8a 30       	cpi	r24, 0x0A	; 10
    c7ac:	08 f4       	brcc	.+2      	; 0xc7b0 <resolve_scoring+0x38>
    c7ae:	a7 c0       	rjmp	.+334    	; 0xc8fe <resolve_scoring+0x186>
    c7b0:	80 91 4c 0c 	lds	r24, 0x0C4C
    c7b4:	80 fd       	sbrc	r24, 0
    c7b6:	a3 c0       	rjmp	.+326    	; 0xc8fe <resolve_scoring+0x186>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    c7b8:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBHideAllSprites>
			load_level_tiles(true);
    c7bc:	81 e0       	ldi	r24, 0x01	; 1
    c7be:	0e 94 34 5e 	call	0xbc68	; 0xbc68 <load_level_tiles>
			print_level_score(&player2, &player1);
    c7c2:	67 e3       	ldi	r22, 0x37	; 55
    c7c4:	7c e0       	ldi	r23, 0x0C	; 12
    c7c6:	86 ea       	ldi	r24, 0xA6	; 166
    c7c8:	9f e0       	ldi	r25, 0x0F	; 15
    c7ca:	0e 94 bd 53 	call	0xa77a	; 0xa77a <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    c7ce:	84 e0       	ldi	r24, 0x04	; 4
    c7d0:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBWaitSeconds>
			player1.level_score = 0;
    c7d4:	10 92 47 0c 	sts	0x0C47, r1
			player2.level_score = 0;
    c7d8:	10 92 b6 0f 	sts	0x0FB6, r1
			level_transition(next_level);
    c7dc:	81 e0       	ldi	r24, 0x01	; 1
    c7de:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    c7e0:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    c7e2:	0c 94 5d 5f 	jmp	0xbeba	; 0xbeba <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    c7e6:	8a 30       	cpi	r24, 0x0A	; 10
    c7e8:	28 f4       	brcc	.+10     	; 0xc7f4 <resolve_scoring+0x7c>
    c7ea:	80 91 b6 0f 	lds	r24, 0x0FB6
    c7ee:	8a 30       	cpi	r24, 0x0A	; 10
    c7f0:	08 f4       	brcc	.+2      	; 0xc7f4 <resolve_scoring+0x7c>
    c7f2:	85 c0       	rjmp	.+266    	; 0xc8fe <resolve_scoring+0x186>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    c7f4:	90 91 46 0c 	lds	r25, 0x0C46
    c7f8:	80 91 b5 0f 	lds	r24, 0x0FB5
    c7fc:	98 17       	cp	r25, r24
    c7fe:	09 f4       	brne	.+2      	; 0xc802 <resolve_scoring+0x8a>
    c800:	7e c0       	rjmp	.+252    	; 0xc8fe <resolve_scoring+0x186>
			
			if (game.boss_fight_status == 0)
    c802:	20 91 09 0c 	lds	r18, 0x0C09
    c806:	21 11       	cpse	r18, r1
    c808:	46 c0       	rjmp	.+140    	; 0xc896 <resolve_scoring+0x11e>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    c80a:	c1 e0       	ldi	r28, 0x01	; 1
    c80c:	c0 93 09 0c 	sts	0x0C09, r28
				if (player1.score > player2.score)
    c810:	89 17       	cp	r24, r25
    c812:	e8 f4       	brcc	.+58     	; 0xc84e <resolve_scoring+0xd6>
				{
					game.boss_fight_player = &player1;
    c814:	87 e3       	ldi	r24, 0x37	; 55
    c816:	9c e0       	ldi	r25, 0x0C	; 12
    c818:	90 93 16 0c 	sts	0x0C16, r25
    c81c:	80 93 15 0c 	sts	0x0C15, r24
					game.boss_fight_joypad = &p1;
    c820:	80 eb       	ldi	r24, 0xB0	; 176
    c822:	9c e0       	ldi	r25, 0x0C	; 12
    c824:	90 93 18 0c 	sts	0x0C18, r25
    c828:	80 93 17 0c 	sts	0x0C17, r24
					game.boss_fight_player_hud = 0;
    c82c:	10 92 0a 0c 	sts	0x0C0A, r1
					kill_player(&player2, 15);
    c830:	6f e0       	ldi	r22, 0x0F	; 15
    c832:	86 ea       	ldi	r24, 0xA6	; 166
    c834:	9f e0       	ldi	r25, 0x0F	; 15
    c836:	0e 94 95 58 	call	0xb12a	; 0xb12a <kill_player>
					player_spawn(&player2);
    c83a:	86 ea       	ldi	r24, 0xA6	; 166
    c83c:	9f e0       	ldi	r25, 0x0F	; 15
    c83e:	0e 94 87 52 	call	0xa50e	; 0xa50e <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    c842:	80 91 bb 0f 	lds	r24, 0x0FBB
    c846:	c8 27       	eor	r28, r24
    c848:	c0 93 bb 0f 	sts	0x0FBB, r28
    c84c:	1d c0       	rjmp	.+58     	; 0xc888 <resolve_scoring+0x110>
				}
				else
				{
					game.boss_fight_player = &player2;
    c84e:	86 ea       	ldi	r24, 0xA6	; 166
    c850:	9f e0       	ldi	r25, 0x0F	; 15
    c852:	90 93 16 0c 	sts	0x0C16, r25
    c856:	80 93 15 0c 	sts	0x0C15, r24
					game.boss_fight_joypad = &p2;
    c85a:	8f ed       	ldi	r24, 0xDF	; 223
    c85c:	9b e0       	ldi	r25, 0x0B	; 11
    c85e:	90 93 18 0c 	sts	0x0C18, r25
    c862:	80 93 17 0c 	sts	0x0C17, r24
					game.boss_fight_player_hud = 15;
    c866:	8f e0       	ldi	r24, 0x0F	; 15
    c868:	80 93 0a 0c 	sts	0x0C0A, r24
					kill_player(&player1, 0);
    c86c:	60 e0       	ldi	r22, 0x00	; 0
    c86e:	87 e3       	ldi	r24, 0x37	; 55
    c870:	9c e0       	ldi	r25, 0x0C	; 12
    c872:	0e 94 95 58 	call	0xb12a	; 0xb12a <kill_player>
					player_spawn(&player1);
    c876:	87 e3       	ldi	r24, 0x37	; 55
    c878:	9c e0       	ldi	r25, 0x0C	; 12
    c87a:	0e 94 87 52 	call	0xa50e	; 0xa50e <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    c87e:	80 91 4c 0c 	lds	r24, 0x0C4C
    c882:	c8 27       	eor	r28, r24
    c884:	c0 93 4c 0c 	sts	0x0C4C, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    c888:	85 ea       	ldi	r24, 0xA5	; 165
    c88a:	90 e0       	ldi	r25, 0x00	; 0
    c88c:	90 93 3a 10 	sts	0x103A, r25
    c890:	80 93 39 10 	sts	0x1039, r24
				return;
    c894:	34 c0       	rjmp	.+104    	; 0xc8fe <resolve_scoring+0x186>
			}
			
			// Print level score
			LBHideAllSprites();
    c896:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBHideAllSprites>
			load_level_tiles(true);
    c89a:	81 e0       	ldi	r24, 0x01	; 1
    c89c:	0e 94 34 5e 	call	0xbc68	; 0xbc68 <load_level_tiles>
			if (player1.level_score > player2.level_score)
    c8a0:	90 91 47 0c 	lds	r25, 0x0C47
    c8a4:	80 91 b6 0f 	lds	r24, 0x0FB6
    c8a8:	89 17       	cp	r24, r25
    c8aa:	28 f4       	brcc	.+10     	; 0xc8b6 <resolve_scoring+0x13e>
				print_level_score(&player1, &player2);
    c8ac:	66 ea       	ldi	r22, 0xA6	; 166
    c8ae:	7f e0       	ldi	r23, 0x0F	; 15
    c8b0:	87 e3       	ldi	r24, 0x37	; 55
    c8b2:	9c e0       	ldi	r25, 0x0C	; 12
    c8b4:	04 c0       	rjmp	.+8      	; 0xc8be <resolve_scoring+0x146>
			else
				print_level_score(&player2, &player1);
    c8b6:	67 e3       	ldi	r22, 0x37	; 55
    c8b8:	7c e0       	ldi	r23, 0x0C	; 12
    c8ba:	86 ea       	ldi	r24, 0xA6	; 166
    c8bc:	9f e0       	ldi	r25, 0x0F	; 15
    c8be:	0e 94 bd 53 	call	0xa77a	; 0xa77a <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    c8c2:	84 e0       	ldi	r24, 0x04	; 4
    c8c4:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBWaitSeconds>
			player1.level_score = 0;
    c8c8:	10 92 47 0c 	sts	0x0C47, r1
			player2.level_score = 0;
    c8cc:	10 92 b6 0f 	sts	0x0FB6, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    c8d0:	90 91 46 0c 	lds	r25, 0x0C46
    c8d4:	80 91 b5 0f 	lds	r24, 0x0FB5
    c8d8:	89 17       	cp	r24, r25
    c8da:	28 f4       	brcc	.+10     	; 0xc8e6 <resolve_scoring+0x16e>
				print_final_score(&player1, &player2);
    c8dc:	66 ea       	ldi	r22, 0xA6	; 166
    c8de:	7f e0       	ldi	r23, 0x0F	; 15
    c8e0:	87 e3       	ldi	r24, 0x37	; 55
    c8e2:	9c e0       	ldi	r25, 0x0C	; 12
    c8e4:	04 c0       	rjmp	.+8      	; 0xc8ee <resolve_scoring+0x176>
			else
				print_final_score(&player2, &player1);
    c8e6:	67 e3       	ldi	r22, 0x37	; 55
    c8e8:	7c e0       	ldi	r23, 0x0C	; 12
    c8ea:	86 ea       	ldi	r24, 0xA6	; 166
    c8ec:	9f e0       	ldi	r25, 0x0F	; 15
    c8ee:	0e 94 ff 53 	call	0xa7fe	; 0xa7fe <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    c8f2:	84 e0       	ldi	r24, 0x04	; 4
    c8f4:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBWaitSeconds>
			exit_game();
		}
	}
}
    c8f8:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    c8fa:	0c 94 29 62 	jmp	0xc452	; 0xc452 <exit_game>
		}
	}
}
    c8fe:	cf 91       	pop	r28
    c900:	08 95       	ret

0000c902 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    c902:	df 92       	push	r13
    c904:	ef 92       	push	r14
    c906:	ff 92       	push	r15
    c908:	0f 93       	push	r16
    c90a:	1f 93       	push	r17
    c90c:	cf 93       	push	r28
    c90e:	df 93       	push	r29
    c910:	8c 01       	movw	r16, r24
    c912:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    c914:	80 91 08 0c 	lds	r24, 0x0C08
    c918:	88 23       	and	r24, r24
    c91a:	19 f1       	breq	.+70     	; 0xc962 <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    c91c:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    c920:	46 e6       	ldi	r20, 0x66	; 102
    c922:	56 e7       	ldi	r21, 0x76	; 118
    c924:	6c e0       	ldi	r22, 0x0C	; 12
    c926:	88 e0       	ldi	r24, 0x08	; 8
    c928:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
		Print(12, 13, (char*) strPaused);
    c92c:	4a e1       	ldi	r20, 0x1A	; 26
    c92e:	52 e0       	ldi	r21, 0x02	; 2
    c930:	6d e0       	ldi	r22, 0x0D	; 13
    c932:	70 e0       	ldi	r23, 0x00	; 0
    c934:	8c e0       	ldi	r24, 0x0C	; 12
    c936:	90 e0       	ldi	r25, 0x00	; 0
    c938:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
		Print(11, 14, (char*) strExit);
    c93c:	41 e2       	ldi	r20, 0x21	; 33
    c93e:	52 e0       	ldi	r21, 0x02	; 2
    c940:	6e e0       	ldi	r22, 0x0E	; 14
    c942:	70 e0       	ldi	r23, 0x00	; 0
    c944:	8b e0       	ldi	r24, 0x0B	; 11
    c946:	90 e0       	ldi	r25, 0x00	; 0
    c948:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
		
		// Update
		update_player(p1, &player1);
    c94c:	67 e3       	ldi	r22, 0x37	; 55
    c94e:	7c e0       	ldi	r23, 0x0C	; 12
    c950:	c8 01       	movw	r24, r16
    c952:	0e 94 31 62 	call	0xc462	; 0xc462 <update_player>
		update_player(p2, &player2);
    c956:	66 ea       	ldi	r22, 0xA6	; 166
    c958:	7f e0       	ldi	r23, 0x0F	; 15
    c95a:	ce 01       	movw	r24, r28
    c95c:	0e 94 31 62 	call	0xc462	; 0xc462 <update_player>
    c960:	c6 c1       	rjmp	.+908    	; 0xccee <update_level+0x3ec>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    c962:	90 91 09 0c 	lds	r25, 0x0C09
    c966:	91 30       	cpi	r25, 0x01	; 1
    c968:	19 f4       	brne	.+6      	; 0xc970 <update_level+0x6e>
	{
		// Render
		render_boss_fight_scope_load();
    c96a:	0e 94 8d 5f 	call	0xbf1a	; 0xbf1a <render_boss_fight_scope_load>
    c96e:	05 c0       	rjmp	.+10     	; 0xc97a <update_level+0x78>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    c970:	92 30       	cpi	r25, 0x02	; 2
    c972:	09 f0       	breq	.+2      	; 0xc976 <update_level+0x74>
    c974:	4e c0       	rjmp	.+156    	; 0xca12 <update_level+0x110>
	{
		// Render
		render_boss_fight_sub_load();
    c976:	0e 94 9c 5f 	call	0xbf38	; 0xbf38 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    c97a:	60 e0       	ldi	r22, 0x00	; 0
    c97c:	80 91 15 0c 	lds	r24, 0x0C15
    c980:	90 91 16 0c 	lds	r25, 0x0C16
    c984:	0e 94 61 55 	call	0xaac2	; 0xaac2 <tank_map>
    c988:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    c98a:	40 e0       	ldi	r20, 0x00	; 0
    c98c:	69 e9       	ldi	r22, 0x99	; 153
    c98e:	7c e3       	ldi	r23, 0x3C	; 60
    c990:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		p1_shot_index = p2_index + 4;
    c994:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    c996:	6c 2f       	mov	r22, r28
    c998:	80 91 15 0c 	lds	r24, 0x0C15
    c99c:	90 91 16 0c 	lds	r25, 0x0C16
    c9a0:	0e 94 ca 55 	call	0xab94	; 0xab94 <shot_map>
    c9a4:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    c9a6:	40 e0       	ldi	r20, 0x00	; 0
    c9a8:	6f e9       	ldi	r22, 0x9F	; 159
    c9aa:	7c e3       	ldi	r23, 0x3C	; 60
    c9ac:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    c9b0:	6c 2f       	mov	r22, r28
    c9b2:	80 91 15 0c 	lds	r24, 0x0C15
    c9b6:	90 91 16 0c 	lds	r25, 0x0C16
    c9ba:	0e 94 ca 55 	call	0xab94	; 0xab94 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    c9be:	60 e0       	ldi	r22, 0x00	; 0
    c9c0:	80 91 15 0c 	lds	r24, 0x0C15
    c9c4:	90 91 16 0c 	lds	r25, 0x0C16
    c9c8:	0e 94 bd 54 	call	0xa97a	; 0xa97a <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    c9cc:	6c 2f       	mov	r22, r28
    c9ce:	80 91 15 0c 	lds	r24, 0x0C15
    c9d2:	90 91 16 0c 	lds	r25, 0x0C16
    c9d6:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <render_shot>
		render_shot(&player2, p2_shot_index);
    c9da:	6d 2f       	mov	r22, r29
    c9dc:	86 ea       	ldi	r24, 0xA6	; 166
    c9de:	9f e0       	ldi	r25, 0x0F	; 15
    c9e0:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <render_shot>
		render_tile_explosions(&tile_animations);
    c9e4:	8a e1       	ldi	r24, 0x1A	; 26
    c9e6:	9c e0       	ldi	r25, 0x0C	; 12
    c9e8:	0e 94 12 55 	call	0xaa24	; 0xaa24 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    c9ec:	60 91 15 0c 	lds	r22, 0x0C15
    c9f0:	70 91 16 0c 	lds	r23, 0x0C16
    c9f4:	80 91 17 0c 	lds	r24, 0x0C17
    c9f8:	90 91 18 0c 	lds	r25, 0x0C18
    c9fc:	0e 94 31 62 	call	0xc462	; 0xc462 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    ca00:	60 91 0a 0c 	lds	r22, 0x0C0A
    ca04:	80 91 15 0c 	lds	r24, 0x0C15
    ca08:	90 91 16 0c 	lds	r25, 0x0C16
    ca0c:	0e 94 96 5c 	call	0xb92c	; 0xb92c <collision_detect_player>
    ca10:	6e c1       	rjmp	.+732    	; 0xccee <update_level+0x3ec>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    ca12:	94 30       	cpi	r25, 0x04	; 4
    ca14:	09 f0       	breq	.+2      	; 0xca18 <update_level+0x116>
    ca16:	94 c0       	rjmp	.+296    	; 0xcb40 <update_level+0x23e>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    ca18:	80 91 7a 10 	lds	r24, 0x107A
    ca1c:	81 11       	cpse	r24, r1
    ca1e:	07 c0       	rjmp	.+14     	; 0xca2e <update_level+0x12c>
    ca20:	80 91 46 10 	lds	r24, 0x1046
    ca24:	81 11       	cpse	r24, r1
    ca26:	03 c0       	rjmp	.+6      	; 0xca2e <update_level+0x12c>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    ca28:	80 e2       	ldi	r24, 0x20	; 32
    ca2a:	80 93 09 0c 	sts	0x0C09, r24
		}
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    ca2e:	60 e0       	ldi	r22, 0x00	; 0
    ca30:	80 91 15 0c 	lds	r24, 0x0C15
    ca34:	90 91 16 0c 	lds	r25, 0x0C16
    ca38:	0e 94 61 55 	call	0xaac2	; 0xaac2 <tank_map>
    ca3c:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    ca3e:	68 2f       	mov	r22, r24
    ca40:	80 91 15 0c 	lds	r24, 0x0C15
    ca44:	90 91 16 0c 	lds	r25, 0x0C16
    ca48:	0e 94 ca 55 	call	0xab94	; 0xab94 <shot_map>
    ca4c:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    ca4e:	01 e0       	ldi	r16, 0x01	; 1
    ca50:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    ca52:	12 e0       	ldi	r17, 0x02	; 2
    ca54:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    ca56:	d3 e0       	ldi	r29, 0x03	; 3
    ca58:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ca5a:	80 91 7a 10 	lds	r24, 0x107A
    ca5e:	88 23       	and	r24, r24
    ca60:	19 f0       	breq	.+6      	; 0xca68 <update_level+0x166>
	return (char*) map_sub_turret;
    ca62:	61 e5       	ldi	r22, 0x51	; 81
    ca64:	7c e3       	ldi	r23, 0x3C	; 60
    ca66:	02 c0       	rjmp	.+4      	; 0xca6c <update_level+0x16a>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ca68:	6f e9       	ldi	r22, 0x9F	; 159
    ca6a:	7c e3       	ldi	r23, 0x3C	; 60
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    ca6c:	40 e0       	ldi	r20, 0x00	; 0
    ca6e:	8c 2f       	mov	r24, r28
    ca70:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ca74:	80 91 7a 10 	lds	r24, 0x107A
    ca78:	88 23       	and	r24, r24
    ca7a:	19 f0       	breq	.+6      	; 0xca82 <update_level+0x180>
	return (char*) map_sub_shot;
    ca7c:	64 e5       	ldi	r22, 0x54	; 84
    ca7e:	7c e3       	ldi	r23, 0x3C	; 60
    ca80:	02 c0       	rjmp	.+4      	; 0xca86 <update_level+0x184>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ca82:	6f e9       	ldi	r22, 0x9F	; 159
    ca84:	7c e3       	ldi	r23, 0x3C	; 60
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    ca86:	40 e0       	ldi	r20, 0x00	; 0
    ca88:	80 2f       	mov	r24, r16
    ca8a:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ca8e:	80 91 46 10 	lds	r24, 0x1046
    ca92:	88 23       	and	r24, r24
    ca94:	19 f0       	breq	.+6      	; 0xca9c <update_level+0x19a>
	return (char*) map_sub_turret;
    ca96:	61 e5       	ldi	r22, 0x51	; 81
    ca98:	7c e3       	ldi	r23, 0x3C	; 60
    ca9a:	02 c0       	rjmp	.+4      	; 0xcaa0 <update_level+0x19e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ca9c:	6f e9       	ldi	r22, 0x9F	; 159
    ca9e:	7c e3       	ldi	r23, 0x3C	; 60
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    caa0:	40 e0       	ldi	r20, 0x00	; 0
    caa2:	81 2f       	mov	r24, r17
    caa4:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    caa8:	80 91 46 10 	lds	r24, 0x1046
    caac:	88 23       	and	r24, r24
    caae:	19 f0       	breq	.+6      	; 0xcab6 <update_level+0x1b4>
	return (char*) map_sub_shot;
    cab0:	64 e5       	ldi	r22, 0x54	; 84
    cab2:	7c e3       	ldi	r23, 0x3C	; 60
    cab4:	02 c0       	rjmp	.+4      	; 0xcaba <update_level+0x1b8>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cab6:	6f e9       	ldi	r22, 0x9F	; 159
    cab8:	7c e3       	ldi	r23, 0x3C	; 60
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    caba:	40 e0       	ldi	r20, 0x00	; 0
    cabc:	8d 2f       	mov	r24, r29
    cabe:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    cac2:	60 e0       	ldi	r22, 0x00	; 0
    cac4:	80 91 15 0c 	lds	r24, 0x0C15
    cac8:	90 91 16 0c 	lds	r25, 0x0C16
    cacc:	0e 94 bd 54 	call	0xa97a	; 0xa97a <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    cad0:	6f 2d       	mov	r22, r15
    cad2:	80 91 15 0c 	lds	r24, 0x0C15
    cad6:	90 91 16 0c 	lds	r25, 0x0C16
    cada:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <render_shot>
		render_tile_explosions(&tile_animations);
    cade:	8a e1       	ldi	r24, 0x1A	; 26
    cae0:	9c e0       	ldi	r25, 0x0C	; 12
    cae2:	0e 94 12 55 	call	0xaa24	; 0xaa24 <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    cae6:	6c 2f       	mov	r22, r28
    cae8:	8f e6       	ldi	r24, 0x6F	; 111
    caea:	90 e1       	ldi	r25, 0x10	; 16
    caec:	0e 94 de 5f 	call	0xbfbc	; 0xbfbc <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    caf0:	60 2f       	mov	r22, r16
    caf2:	8f e6       	ldi	r24, 0x6F	; 111
    caf4:	90 e1       	ldi	r25, 0x10	; 16
    caf6:	0e 94 07 60 	call	0xc00e	; 0xc00e <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    cafa:	61 2f       	mov	r22, r17
    cafc:	8b e3       	ldi	r24, 0x3B	; 59
    cafe:	90 e1       	ldi	r25, 0x10	; 16
    cb00:	0e 94 de 5f 	call	0xbfbc	; 0xbfbc <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    cb04:	6d 2f       	mov	r22, r29
    cb06:	8b e3       	ldi	r24, 0x3B	; 59
    cb08:	90 e1       	ldi	r25, 0x10	; 16
    cb0a:	0e 94 07 60 	call	0xc00e	; 0xc00e <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    cb0e:	40 e6       	ldi	r20, 0x60	; 96
    cb10:	68 e2       	ldi	r22, 0x28	; 40
    cb12:	8f e6       	ldi	r24, 0x6F	; 111
    cb14:	90 e1       	ldi	r25, 0x10	; 16
    cb16:	0e 94 30 60 	call	0xc060	; 0xc060 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    cb1a:	40 ec       	ldi	r20, 0xC0	; 192
    cb1c:	68 e8       	ldi	r22, 0x88	; 136
    cb1e:	8b e3       	ldi	r24, 0x3B	; 59
    cb20:	90 e1       	ldi	r25, 0x10	; 16
    cb22:	0e 94 30 60 	call	0xc060	; 0xc060 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    cb26:	6b e7       	ldi	r22, 0x7B	; 123
    cb28:	70 e1       	ldi	r23, 0x10	; 16
    cb2a:	8f e6       	ldi	r24, 0x6F	; 111
    cb2c:	90 e1       	ldi	r25, 0x10	; 16
    cb2e:	0e 94 c5 60 	call	0xc18a	; 0xc18a <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    cb32:	67 e4       	ldi	r22, 0x47	; 71
    cb34:	70 e1       	ldi	r23, 0x10	; 16
    cb36:	8b e3       	ldi	r24, 0x3B	; 59
    cb38:	90 e1       	ldi	r25, 0x10	; 16
    cb3a:	0e 94 c5 60 	call	0xc18a	; 0xc18a <update_turret_shot>
    cb3e:	56 cf       	rjmp	.-340    	; 0xc9ec <update_level+0xea>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    cb40:	90 32       	cpi	r25, 0x20	; 32
    cb42:	09 f0       	breq	.+2      	; 0xcb46 <update_level+0x244>
    cb44:	55 c0       	rjmp	.+170    	; 0xcbf0 <update_level+0x2ee>
	{
		// Render
		render_boss_fight_sub_sinking();
    cb46:	0e 94 c9 5f 	call	0xbf92	; 0xbf92 <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    cb4a:	60 e0       	ldi	r22, 0x00	; 0
    cb4c:	80 91 15 0c 	lds	r24, 0x0C15
    cb50:	90 91 16 0c 	lds	r25, 0x0C16
    cb54:	0e 94 61 55 	call	0xaac2	; 0xaac2 <tank_map>
    cb58:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    cb5a:	40 e0       	ldi	r20, 0x00	; 0
    cb5c:	69 e9       	ldi	r22, 0x99	; 153
    cb5e:	7c e3       	ldi	r23, 0x3C	; 60
    cb60:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		p1_shot_index = p2_index + 4;
    cb64:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    cb66:	6c 2f       	mov	r22, r28
    cb68:	80 91 15 0c 	lds	r24, 0x0C15
    cb6c:	90 91 16 0c 	lds	r25, 0x0C16
    cb70:	0e 94 ca 55 	call	0xab94	; 0xab94 <shot_map>
    cb74:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    cb76:	40 e0       	ldi	r20, 0x00	; 0
    cb78:	6f e9       	ldi	r22, 0x9F	; 159
    cb7a:	7c e3       	ldi	r23, 0x3C	; 60
    cb7c:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    cb80:	6c 2f       	mov	r22, r28
    cb82:	80 91 15 0c 	lds	r24, 0x0C15
    cb86:	90 91 16 0c 	lds	r25, 0x0C16
    cb8a:	0e 94 ca 55 	call	0xab94	; 0xab94 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    cb8e:	60 e0       	ldi	r22, 0x00	; 0
    cb90:	80 91 15 0c 	lds	r24, 0x0C15
    cb94:	90 91 16 0c 	lds	r25, 0x0C16
    cb98:	0e 94 bd 54 	call	0xa97a	; 0xa97a <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    cb9c:	6c 2f       	mov	r22, r28
    cb9e:	80 91 15 0c 	lds	r24, 0x0C15
    cba2:	90 91 16 0c 	lds	r25, 0x0C16
    cba6:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <render_shot>
		render_shot(&player2, p2_shot_index);
    cbaa:	6d 2f       	mov	r22, r29
    cbac:	86 ea       	ldi	r24, 0xA6	; 166
    cbae:	9f e0       	ldi	r25, 0x0F	; 15
    cbb0:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <render_shot>
		render_tile_explosions(&tile_animations);
    cbb4:	8a e1       	ldi	r24, 0x1A	; 26
    cbb6:	9c e0       	ldi	r25, 0x0C	; 12
    cbb8:	0e 94 12 55 	call	0xaa24	; 0xaa24 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    cbbc:	60 91 15 0c 	lds	r22, 0x0C15
    cbc0:	70 91 16 0c 	lds	r23, 0x0C16
    cbc4:	80 91 17 0c 	lds	r24, 0x0C17
    cbc8:	90 91 18 0c 	lds	r25, 0x0C18
    cbcc:	0e 94 31 62 	call	0xc462	; 0xc462 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    cbd0:	60 91 0a 0c 	lds	r22, 0x0C0A
    cbd4:	80 91 15 0c 	lds	r24, 0x0C15
    cbd8:	90 91 16 0c 	lds	r25, 0x0C16
    cbdc:	0e 94 96 5c 	call	0xb92c	; 0xb92c <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    cbe0:	80 91 09 0c 	lds	r24, 0x0C09
    cbe4:	80 32       	cpi	r24, 0x20	; 32
    cbe6:	09 f4       	brne	.+2      	; 0xcbea <update_level+0x2e8>
    cbe8:	82 c0       	rjmp	.+260    	; 0xccee <update_level+0x3ec>
		{
			resolve_scoring();
    cbea:	0e 94 bc 63 	call	0xc778	; 0xc778 <resolve_scoring>
    cbee:	7f c0       	rjmp	.+254    	; 0xccee <update_level+0x3ec>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    cbf0:	90 31       	cpi	r25, 0x10	; 16
    cbf2:	d9 f3       	breq	.-10     	; 0xcbea <update_level+0x2e8>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    cbf4:	91 11       	cpse	r25, r1
    cbf6:	7b c0       	rjmp	.+246    	; 0xccee <update_level+0x3ec>
	{
		p2_index = tank_map(&player1, p1_index);
    cbf8:	60 e0       	ldi	r22, 0x00	; 0
    cbfa:	87 e3       	ldi	r24, 0x37	; 55
    cbfc:	9c e0       	ldi	r25, 0x0C	; 12
    cbfe:	0e 94 61 55 	call	0xaac2	; 0xaac2 <tank_map>
    cc02:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    cc04:	68 2f       	mov	r22, r24
    cc06:	86 ea       	ldi	r24, 0xA6	; 166
    cc08:	9f e0       	ldi	r25, 0x0F	; 15
    cc0a:	0e 94 61 55 	call	0xaac2	; 0xaac2 <tank_map>
    cc0e:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    cc10:	68 2f       	mov	r22, r24
    cc12:	87 e3       	ldi	r24, 0x37	; 55
    cc14:	9c e0       	ldi	r25, 0x0C	; 12
    cc16:	0e 94 ca 55 	call	0xab94	; 0xab94 <shot_map>
    cc1a:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    cc1c:	68 2f       	mov	r22, r24
    cc1e:	86 ea       	ldi	r24, 0xA6	; 166
    cc20:	9f e0       	ldi	r25, 0x0F	; 15
    cc22:	0e 94 ca 55 	call	0xab94	; 0xab94 <shot_map>
		render_player(&player1, p1_index);
    cc26:	60 e0       	ldi	r22, 0x00	; 0
    cc28:	87 e3       	ldi	r24, 0x37	; 55
    cc2a:	9c e0       	ldi	r25, 0x0C	; 12
    cc2c:	0e 94 bd 54 	call	0xa97a	; 0xa97a <render_player>
		render_player(&player2, p2_index);
    cc30:	6d 2d       	mov	r22, r13
    cc32:	86 ea       	ldi	r24, 0xA6	; 166
    cc34:	9f e0       	ldi	r25, 0x0F	; 15
    cc36:	0e 94 bd 54 	call	0xa97a	; 0xa97a <render_player>
		render_shot(&player1, p1_shot_index);
    cc3a:	6e 2d       	mov	r22, r14
    cc3c:	87 e3       	ldi	r24, 0x37	; 55
    cc3e:	9c e0       	ldi	r25, 0x0C	; 12
    cc40:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <render_shot>
		render_shot(&player2, p2_shot_index);
    cc44:	6f 2d       	mov	r22, r15
    cc46:	86 ea       	ldi	r24, 0xA6	; 166
    cc48:	9f e0       	ldi	r25, 0x0F	; 15
    cc4a:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <render_shot>
		render_tile_explosions(&tile_animations);
    cc4e:	8a e1       	ldi	r24, 0x1A	; 26
    cc50:	9c e0       	ldi	r25, 0x0C	; 12
    cc52:	0e 94 12 55 	call	0xaa24	; 0xaa24 <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    cc56:	80 91 11 0c 	lds	r24, 0x0C11
    cc5a:	90 91 12 0c 	lds	r25, 0x0C12
    cc5e:	89 3e       	cpi	r24, 0xE9	; 233
    cc60:	93 40       	sbci	r25, 0x03	; 3
    cc62:	88 f0       	brcs	.+34     	; 0xcc86 <update_level+0x384>
    cc64:	80 91 39 10 	lds	r24, 0x1039
    cc68:	90 91 3a 10 	lds	r25, 0x103A
    cc6c:	18 16       	cp	r1, r24
    cc6e:	19 06       	cpc	r1, r25
    cc70:	54 f4       	brge	.+20     	; 0xcc86 <update_level+0x384>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    cc72:	8d e2       	ldi	r24, 0x2D	; 45
    cc74:	90 e1       	ldi	r25, 0x10	; 16
    cc76:	0e 94 47 55 	call	0xaa8e	; 0xaa8e <render_scope>
    cc7a:	88 23       	and	r24, r24
    cc7c:	21 f0       	breq	.+8      	; 0xcc86 <update_level+0x384>
    cc7e:	10 92 12 0c 	sts	0x0C12, r1
    cc82:	10 92 11 0c 	sts	0x0C11, r1
		}
		game.scope_counter++;
    cc86:	20 91 11 0c 	lds	r18, 0x0C11
    cc8a:	30 91 12 0c 	lds	r19, 0x0C12
    cc8e:	2f 5f       	subi	r18, 0xFF	; 255
    cc90:	3f 4f       	sbci	r19, 0xFF	; 255
    cc92:	30 93 12 0c 	sts	0x0C12, r19
    cc96:	20 93 11 0c 	sts	0x0C11, r18
		
		// Update
		update_player(p1, &player1);
    cc9a:	67 e3       	ldi	r22, 0x37	; 55
    cc9c:	7c e0       	ldi	r23, 0x0C	; 12
    cc9e:	c8 01       	movw	r24, r16
    cca0:	0e 94 31 62 	call	0xc462	; 0xc462 <update_player>
		update_player(p2, &player2);
    cca4:	66 ea       	ldi	r22, 0xA6	; 166
    cca6:	7f e0       	ldi	r23, 0x0F	; 15
    cca8:	ce 01       	movw	r24, r28
    ccaa:	0e 94 31 62 	call	0xc462	; 0xc462 <update_player>
		resolve_scoring();
    ccae:	0e 94 bc 63 	call	0xc778	; 0xc778 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    ccb2:	60 e0       	ldi	r22, 0x00	; 0
    ccb4:	87 e3       	ldi	r24, 0x37	; 55
    ccb6:	9c e0       	ldi	r25, 0x0C	; 12
    ccb8:	0e 94 96 5c 	call	0xb92c	; 0xb92c <collision_detect_player>
    ccbc:	88 23       	and	r24, r24
    ccbe:	41 f0       	breq	.+16     	; 0xccd0 <update_level+0x3ce>
    ccc0:	2f e0       	ldi	r18, 0x0F	; 15
    ccc2:	40 e0       	ldi	r20, 0x00	; 0
    ccc4:	66 ea       	ldi	r22, 0xA6	; 166
    ccc6:	7f e0       	ldi	r23, 0x0F	; 15
    ccc8:	87 e3       	ldi	r24, 0x37	; 55
    ccca:	9c e0       	ldi	r25, 0x0C	; 12
    cccc:	0e 94 ba 5b 	call	0xb774	; 0xb774 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    ccd0:	6f e0       	ldi	r22, 0x0F	; 15
    ccd2:	86 ea       	ldi	r24, 0xA6	; 166
    ccd4:	9f e0       	ldi	r25, 0x0F	; 15
    ccd6:	0e 94 96 5c 	call	0xb92c	; 0xb92c <collision_detect_player>
    ccda:	88 23       	and	r24, r24
    ccdc:	41 f0       	breq	.+16     	; 0xccee <update_level+0x3ec>
    ccde:	20 e0       	ldi	r18, 0x00	; 0
    cce0:	4f e0       	ldi	r20, 0x0F	; 15
    cce2:	67 e3       	ldi	r22, 0x37	; 55
    cce4:	7c e0       	ldi	r23, 0x0C	; 12
    cce6:	86 ea       	ldi	r24, 0xA6	; 166
    cce8:	9f e0       	ldi	r25, 0x0F	; 15
    ccea:	0e 94 ba 5b 	call	0xb774	; 0xb774 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    ccee:	80 91 19 0c 	lds	r24, 0x0C19
    ccf2:	83 30       	cpi	r24, 0x03	; 3
    ccf4:	71 f5       	brne	.+92     	; 0xcd52 <update_level+0x450>
	{
		game.demo_counter++;
    ccf6:	80 91 0f 0c 	lds	r24, 0x0C0F
    ccfa:	90 91 10 0c 	lds	r25, 0x0C10
    ccfe:	01 96       	adiw	r24, 0x01	; 1
    cd00:	90 93 10 0c 	sts	0x0C10, r25
    cd04:	80 93 0f 0c 	sts	0x0C0F, r24
		held = ReadJoypad(0);
    cd08:	80 e0       	ldi	r24, 0x00	; 0
    cd0a:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    cd0e:	80 e0       	ldi	r24, 0x00	; 0
    cd10:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <ReadJoypad>
    cd14:	89 2b       	or	r24, r25
    cd16:	89 f0       	breq	.+34     	; 0xcd3a <update_level+0x438>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    cd18:	10 92 10 0c 	sts	0x0C10, r1
    cd1c:	10 92 0f 0c 	sts	0x0C0F, r1
			fade_through();
    cd20:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
			init_game_state();
    cd24:	0e 94 60 52 	call	0xa4c0	; 0xa4c0 <init_game_state>
			load_splash();
#endif
		}
	}
}
    cd28:	df 91       	pop	r29
    cd2a:	cf 91       	pop	r28
    cd2c:	1f 91       	pop	r17
    cd2e:	0f 91       	pop	r16
    cd30:	ff 90       	pop	r15
    cd32:	ef 90       	pop	r14
    cd34:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    cd36:	0c 94 4c 61 	jmp	0xc298	; 0xc298 <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    cd3a:	81 e0       	ldi	r24, 0x01	; 1
    cd3c:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <ReadJoypad>
    cd40:	89 2b       	or	r24, r25
    cd42:	51 f7       	brne	.-44     	; 0xcd18 <update_level+0x416>
    cd44:	80 91 0f 0c 	lds	r24, 0x0C0F
    cd48:	90 91 10 0c 	lds	r25, 0x0C10
    cd4c:	88 30       	cpi	r24, 0x08	; 8
    cd4e:	97 40       	sbci	r25, 0x07	; 7
    cd50:	18 f7       	brcc	.-58     	; 0xcd18 <update_level+0x416>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    cd52:	df 91       	pop	r29
    cd54:	cf 91       	pop	r28
    cd56:	1f 91       	pop	r17
    cd58:	0f 91       	pop	r16
    cd5a:	ff 90       	pop	r15
    cd5c:	ef 90       	pop	r14
    cd5e:	df 90       	pop	r13
    cd60:	08 95       	ret

0000cd62 <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    cd62:	cf 93       	push	r28
    cd64:	df 93       	push	r29
    cd66:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    cd68:	88 81       	ld	r24, Y
    cd6a:	99 81       	ldd	r25, Y+1	; 0x01
    cd6c:	91 ff       	sbrs	r25, 1
    cd6e:	0e c0       	rjmp	.+28     	; 0xcd8c <update_tank_rank+0x2a>
	{
		game.tank_rank_counter = 0;
    cd70:	10 92 14 0c 	sts	0x0C14, r1
    cd74:	10 92 13 0c 	sts	0x0C13, r1
		SFX_NAVIGATE;
    cd78:	2f ef       	ldi	r18, 0xFF	; 255
    cd7a:	47 e1       	ldi	r20, 0x17	; 23
    cd7c:	64 e0       	ldi	r22, 0x04	; 4
    cd7e:	84 e0       	ldi	r24, 0x04	; 4
    cd80:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
		fade_through();
    cd84:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
		load_splash();
    cd88:	0e 94 4c 61 	call	0xc298	; 0xc298 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    cd8c:	8c 81       	ldd	r24, Y+4	; 0x04
    cd8e:	9d 81       	ldd	r25, Y+5	; 0x05
    cd90:	92 ff       	sbrs	r25, 2
    cd92:	1f c0       	rjmp	.+62     	; 0xcdd2 <update_tank_rank+0x70>
    cd94:	8e 81       	ldd	r24, Y+6	; 0x06
    cd96:	8f 3f       	cpi	r24, 0xFF	; 255
    cd98:	e1 f4       	brne	.+56     	; 0xcdd2 <update_tank_rank+0x70>
	{
		game.tank_rank_counter = 0;
    cd9a:	10 92 14 0c 	sts	0x0C14, r1
    cd9e:	10 92 13 0c 	sts	0x0C13, r1
	    SFX_NAVIGATE;
    cda2:	2f ef       	ldi	r18, 0xFF	; 255
    cda4:	47 e1       	ldi	r20, 0x17	; 23
    cda6:	64 e0       	ldi	r22, 0x04	; 4
    cda8:	84 e0       	ldi	r24, 0x04	; 4
    cdaa:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
	    init_scores(&scores);
    cdae:	8f eb       	ldi	r24, 0xBF	; 191
    cdb0:	9b e0       	ldi	r25, 0x0B	; 11
    cdb2:	0e 94 fb 50 	call	0xa1f6	; 0xa1f6 <init_scores>
	    init_handles(&handles);
    cdb6:	86 ee       	ldi	r24, 0xE6	; 230
    cdb8:	9b e0       	ldi	r25, 0x0B	; 11
    cdba:	0e 94 07 51 	call	0xa20e	; 0xa20e <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    cdbe:	8f eb       	ldi	r24, 0xBF	; 191
    cdc0:	9b e0       	ldi	r25, 0x0B	; 11
    cdc2:	0e 94 3c 41 	call	0x8278	; 0x8278 <EepromWriteBlock>
    cdc6:	86 ee       	ldi	r24, 0xE6	; 230
    cdc8:	9b e0       	ldi	r25, 0x0B	; 11
    cdca:	0e 94 3c 41 	call	0x8278	; 0x8278 <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    cdce:	0e 94 8e 61 	call	0xc31c	; 0xc31c <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    cdd2:	80 91 13 0c 	lds	r24, 0x0C13
    cdd6:	90 91 14 0c 	lds	r25, 0x0C14
    cdda:	85 38       	cpi	r24, 0x85	; 133
    cddc:	93 40       	sbci	r25, 0x03	; 3
    cdde:	70 f0       	brcs	.+28     	; 0xcdfc <update_tank_rank+0x9a>
	{
		game.tank_rank_counter = 0;
    cde0:	10 92 14 0c 	sts	0x0C14, r1
    cde4:	10 92 13 0c 	sts	0x0C13, r1
		SFX_NAVIGATE;
    cde8:	2f ef       	ldi	r18, 0xFF	; 255
    cdea:	47 e1       	ldi	r20, 0x17	; 23
    cdec:	64 e0       	ldi	r22, 0x04	; 4
    cdee:	84 e0       	ldi	r24, 0x04	; 4
    cdf0:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
		fade_through();
    cdf4:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
		load_splash();
    cdf8:	0e 94 4c 61 	call	0xc298	; 0xc298 <load_splash>
	}
	game.tank_rank_counter++;
    cdfc:	80 91 13 0c 	lds	r24, 0x0C13
    ce00:	90 91 14 0c 	lds	r25, 0x0C14
    ce04:	01 96       	adiw	r24, 0x01	; 1
    ce06:	90 93 14 0c 	sts	0x0C14, r25
    ce0a:	80 93 13 0c 	sts	0x0C13, r24
#endif
}
    ce0e:	df 91       	pop	r29
    ce10:	cf 91       	pop	r28
    ce12:	08 95       	ret

0000ce14 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    ce14:	af 92       	push	r10
    ce16:	bf 92       	push	r11
    ce18:	cf 92       	push	r12
    ce1a:	df 92       	push	r13
    ce1c:	ef 92       	push	r14
    ce1e:	ff 92       	push	r15
    ce20:	0f 93       	push	r16
    ce22:	1f 93       	push	r17
    ce24:	cf 93       	push	r28
    ce26:	df 93       	push	r29
    ce28:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    ce2a:	fb 01       	movw	r30, r22
    ce2c:	00 81       	ld	r16, Z
    ce2e:	11 81       	ldd	r17, Z+1	; 0x01
    ce30:	68 01       	movw	r12, r16
    ce32:	f0 e1       	ldi	r31, 0x10	; 16
    ce34:	cf 22       	and	r12, r31
    ce36:	dd 24       	eor	r13, r13
    ce38:	04 ff       	sbrs	r16, 4
    ce3a:	09 c0       	rjmp	.+18     	; 0xce4e <_handle_select_helper+0x3a>
    ce3c:	8d 81       	ldd	r24, Y+5	; 0x05
    ce3e:	81 11       	cpse	r24, r1
    ce40:	06 c0       	rjmp	.+12     	; 0xce4e <_handle_select_helper+0x3a>
	{
		ps->handle_id--;
    ce42:	88 81       	ld	r24, Y
    ce44:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    ce46:	87 ff       	sbrs	r24, 7
    ce48:	10 c0       	rjmp	.+32     	; 0xce6a <_handle_select_helper+0x56>
    ce4a:	18 82       	st	Y, r1
    ce4c:	26 c0       	rjmp	.+76     	; 0xce9a <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    ce4e:	58 01       	movw	r10, r16
    ce50:	20 e2       	ldi	r18, 0x20	; 32
    ce52:	a2 22       	and	r10, r18
    ce54:	bb 24       	eor	r11, r11
    ce56:	05 ff       	sbrs	r16, 5
    ce58:	0a c0       	rjmp	.+20     	; 0xce6e <_handle_select_helper+0x5a>
    ce5a:	8d 81       	ldd	r24, Y+5	; 0x05
    ce5c:	81 11       	cpse	r24, r1
    ce5e:	07 c0       	rjmp	.+14     	; 0xce6e <_handle_select_helper+0x5a>
	{
		ps->handle_id++;
    ce60:	88 81       	ld	r24, Y
    ce62:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    ce64:	89 30       	cpi	r24, 0x09	; 9
    ce66:	0c f0       	brlt	.+2      	; 0xce6a <_handle_select_helper+0x56>
    ce68:	88 e0       	ldi	r24, 0x08	; 8
    ce6a:	88 83       	st	Y, r24
    ce6c:	16 c0       	rjmp	.+44     	; 0xce9a <_handle_select_helper+0x86>
    ce6e:	7a 01       	movw	r14, r20
    ce70:	cb 01       	movw	r24, r22
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
    ce72:	0e 94 84 61 	call	0xc308	; 0xc308 <select_pressed>
    ce76:	88 23       	and	r24, r24
    ce78:	01 f1       	breq	.+64     	; 0xceba <_handle_select_helper+0xa6>
    ce7a:	9d 81       	ldd	r25, Y+5	; 0x05
    ce7c:	91 11       	cpse	r25, r1
    ce7e:	1d c0       	rjmp	.+58     	; 0xceba <_handle_select_helper+0xa6>
	{
		ps->select_state = EDITING;
    ce80:	81 e0       	ldi	r24, 0x01	; 1
    ce82:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    ce84:	69 91       	ld	r22, Y+
    ce86:	83 e0       	ldi	r24, 0x03	; 3
    ce88:	68 02       	muls	r22, r24
    ce8a:	b0 01       	movw	r22, r0
    ce8c:	11 24       	eor	r1, r1
    ce8e:	68 51       	subi	r22, 0x18	; 24
    ce90:	74 4f       	sbci	r23, 0xF4	; 244
    ce92:	43 e0       	ldi	r20, 0x03	; 3
    ce94:	ce 01       	movw	r24, r28
    ce96:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
		SFX_NAVIGATE;
    ce9a:	2f ef       	ldi	r18, 0xFF	; 255
    ce9c:	47 e1       	ldi	r20, 0x17	; 23
    ce9e:	64 e0       	ldi	r22, 0x04	; 4
    cea0:	84 e0       	ldi	r24, 0x04	; 4
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
#endif
}
    cea2:	df 91       	pop	r29
    cea4:	cf 91       	pop	r28
    cea6:	1f 91       	pop	r17
    cea8:	0f 91       	pop	r16
    ceaa:	ff 90       	pop	r15
    ceac:	ef 90       	pop	r14
    ceae:	df 90       	pop	r13
    ceb0:	cf 90       	pop	r12
    ceb2:	bf 90       	pop	r11
    ceb4:	af 90       	pop	r10
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    ceb6:	0c 94 b1 43 	jmp	0x8762	; 0x8762 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    ceba:	07 ff       	sbrs	r16, 7
    cebc:	09 c0       	rjmp	.+18     	; 0xced0 <_handle_select_helper+0xbc>
    cebe:	9d 81       	ldd	r25, Y+5	; 0x05
    cec0:	91 30       	cpi	r25, 0x01	; 1
    cec2:	31 f4       	brne	.+12     	; 0xced0 <_handle_select_helper+0xbc>
	{
		ps->char_index++;
    cec4:	8c 81       	ldd	r24, Y+4	; 0x04
    cec6:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    cec8:	83 30       	cpi	r24, 0x03	; 3
    ceca:	5c f0       	brlt	.+22     	; 0xcee2 <_handle_select_helper+0xce>
    cecc:	82 e0       	ldi	r24, 0x02	; 2
    cece:	09 c0       	rjmp	.+18     	; 0xcee2 <_handle_select_helper+0xce>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    ced0:	06 ff       	sbrs	r16, 6
    ced2:	0b c0       	rjmp	.+22     	; 0xceea <_handle_select_helper+0xd6>
    ced4:	9d 81       	ldd	r25, Y+5	; 0x05
    ced6:	91 30       	cpi	r25, 0x01	; 1
    ced8:	41 f5       	brne	.+80     	; 0xcf2a <_handle_select_helper+0x116>
	{
		ps->char_index--;
    ceda:	8c 81       	ldd	r24, Y+4	; 0x04
    cedc:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    cede:	87 fd       	sbrc	r24, 7
    cee0:	02 c0       	rjmp	.+4      	; 0xcee6 <_handle_select_helper+0xd2>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    cee2:	8c 83       	std	Y+4, r24	; 0x04
    cee4:	da cf       	rjmp	.-76     	; 0xce9a <_handle_select_helper+0x86>
		if (ps->char_index < 0) ps->char_index = 0;
    cee6:	1c 82       	std	Y+4, r1	; 0x04
    cee8:	d8 cf       	rjmp	.-80     	; 0xce9a <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    ceea:	cd 28       	or	r12, r13
    ceec:	69 f0       	breq	.+26     	; 0xcf08 <_handle_select_helper+0xf4>
    ceee:	8d 81       	ldd	r24, Y+5	; 0x05
    cef0:	81 30       	cpi	r24, 0x01	; 1
    cef2:	09 f0       	breq	.+2      	; 0xcef6 <_handle_select_helper+0xe2>
    cef4:	44 c0       	rjmp	.+136    	; 0xcf7e <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]--;
    cef6:	8c 81       	ldd	r24, Y+4	; 0x04
    cef8:	c8 0f       	add	r28, r24
    cefa:	d1 1d       	adc	r29, r1
    cefc:	99 81       	ldd	r25, Y+1	; 0x01
    cefe:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    cf00:	91 34       	cpi	r25, 0x41	; 65
    cf02:	70 f4       	brcc	.+28     	; 0xcf20 <_handle_select_helper+0x10c>
    cf04:	81 e4       	ldi	r24, 0x41	; 65
    cf06:	0f c0       	rjmp	.+30     	; 0xcf26 <_handle_select_helper+0x112>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    cf08:	ab 28       	or	r10, r11
    cf0a:	89 f0       	breq	.+34     	; 0xcf2e <_handle_select_helper+0x11a>
    cf0c:	8d 81       	ldd	r24, Y+5	; 0x05
    cf0e:	81 30       	cpi	r24, 0x01	; 1
    cf10:	b1 f5       	brne	.+108    	; 0xcf7e <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
    cf12:	8c 81       	ldd	r24, Y+4	; 0x04
    cf14:	c8 0f       	add	r28, r24
    cf16:	d1 1d       	adc	r29, r1
    cf18:	99 81       	ldd	r25, Y+1	; 0x01
    cf1a:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    cf1c:	9b 35       	cpi	r25, 0x5B	; 91
    cf1e:	10 f4       	brcc	.+4      	; 0xcf24 <_handle_select_helper+0x110>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    cf20:	99 83       	std	Y+1, r25	; 0x01
    cf22:	bb cf       	rjmp	.-138    	; 0xce9a <_handle_select_helper+0x86>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    cf24:	8a e5       	ldi	r24, 0x5A	; 90
    cf26:	89 83       	std	Y+1, r24	; 0x01
    cf28:	b8 cf       	rjmp	.-144    	; 0xce9a <_handle_select_helper+0x86>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    cf2a:	ab 28       	or	r10, r11
    cf2c:	41 f5       	brne	.+80     	; 0xcf7e <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    cf2e:	88 23       	and	r24, r24
    cf30:	31 f1       	breq	.+76     	; 0xcf7e <_handle_select_helper+0x16a>
    cf32:	8d 81       	ldd	r24, Y+5	; 0x05
    cf34:	81 30       	cpi	r24, 0x01	; 1
    cf36:	19 f5       	brne	.+70     	; 0xcf7e <_handle_select_helper+0x16a>
	{
		player->handle_id = ps->handle_id;
    cf38:	fe 01       	movw	r30, r28
    cf3a:	81 91       	ld	r24, Z+
    cf3c:	8f 01       	movw	r16, r30
    cf3e:	f7 01       	movw	r30, r14
    cf40:	83 87       	std	Z+11, r24	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    cf42:	43 e0       	ldi	r20, 0x03	; 3
    cf44:	b8 01       	movw	r22, r16
    cf46:	c7 01       	movw	r24, r14
    cf48:	0c 96       	adiw	r24, 0x0c	; 12
    cf4a:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    cf4e:	88 81       	ld	r24, Y
    cf50:	f3 e0       	ldi	r31, 0x03	; 3
    cf52:	8f 02       	muls	r24, r31
    cf54:	c0 01       	movw	r24, r0
    cf56:	11 24       	eor	r1, r1
    cf58:	43 e0       	ldi	r20, 0x03	; 3
    cf5a:	b8 01       	movw	r22, r16
    cf5c:	88 51       	subi	r24, 0x18	; 24
    cf5e:	94 4f       	sbci	r25, 0xF4	; 244
    cf60:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
		SFX_NAVIGATE;
    cf64:	2f ef       	ldi	r18, 0xFF	; 255
    cf66:	47 e1       	ldi	r20, 0x17	; 23
    cf68:	64 e0       	ldi	r22, 0x04	; 4
    cf6a:	84 e0       	ldi	r24, 0x04	; 4
    cf6c:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    cf70:	86 ee       	ldi	r24, 0xE6	; 230
    cf72:	9b e0       	ldi	r25, 0x0B	; 11
    cf74:	0e 94 3c 41 	call	0x8278	; 0x8278 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    cf78:	82 e0       	ldi	r24, 0x02	; 2
    cf7a:	8d 83       	std	Y+5, r24	; 0x05
    cf7c:	20 c0       	rjmp	.+64     	; 0xcfbe <_handle_select_helper+0x1aa>
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    cf7e:	11 ff       	sbrs	r17, 1
    cf80:	1e c0       	rjmp	.+60     	; 0xcfbe <_handle_select_helper+0x1aa>
    cf82:	8d 81       	ldd	r24, Y+5	; 0x05
    cf84:	81 30       	cpi	r24, 0x01	; 1
    cf86:	11 f4       	brne	.+4      	; 0xcf8c <_handle_select_helper+0x178>
	{
		ps->select_state = SELECTING;
    cf88:	1d 82       	std	Y+5, r1	; 0x05
    cf8a:	87 cf       	rjmp	.-242    	; 0xce9a <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    cf8c:	82 30       	cpi	r24, 0x02	; 2
    cf8e:	19 f4       	brne	.+6      	; 0xcf96 <_handle_select_helper+0x182>
	{
		ps->select_state = EDITING;
    cf90:	81 e0       	ldi	r24, 0x01	; 1
    cf92:	8d 83       	std	Y+5, r24	; 0x05
    cf94:	82 cf       	rjmp	.-252    	; 0xce9a <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    cf96:	2f ef       	ldi	r18, 0xFF	; 255
    cf98:	47 e1       	ldi	r20, 0x17	; 23
    cf9a:	64 e0       	ldi	r22, 0x04	; 4
    cf9c:	84 e0       	ldi	r24, 0x04	; 4
    cf9e:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
		fade_through();
    cfa2:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
		load_splash();
	}
#endif
}
    cfa6:	df 91       	pop	r29
    cfa8:	cf 91       	pop	r28
    cfaa:	1f 91       	pop	r17
    cfac:	0f 91       	pop	r16
    cfae:	ff 90       	pop	r15
    cfb0:	ef 90       	pop	r14
    cfb2:	df 90       	pop	r13
    cfb4:	cf 90       	pop	r12
    cfb6:	bf 90       	pop	r11
    cfb8:	af 90       	pop	r10
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    cfba:	0c 94 4c 61 	jmp	0xc298	; 0xc298 <load_splash>
	}
#endif
}
    cfbe:	df 91       	pop	r29
    cfc0:	cf 91       	pop	r28
    cfc2:	1f 91       	pop	r17
    cfc4:	0f 91       	pop	r16
    cfc6:	ff 90       	pop	r15
    cfc8:	ef 90       	pop	r14
    cfca:	df 90       	pop	r13
    cfcc:	cf 90       	pop	r12
    cfce:	bf 90       	pop	r11
    cfd0:	af 90       	pop	r10
    cfd2:	08 95       	ret

0000cfd4 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    cfd4:	af 92       	push	r10
    cfd6:	bf 92       	push	r11
    cfd8:	cf 92       	push	r12
    cfda:	df 92       	push	r13
    cfdc:	ef 92       	push	r14
    cfde:	ff 92       	push	r15
    cfe0:	0f 93       	push	r16
    cfe2:	1f 93       	push	r17
    cfe4:	cf 93       	push	r28
    cfe6:	df 93       	push	r29
    cfe8:	00 d0       	rcall	.+0      	; 0xcfea <_handle_select_render_helper+0x16>
    cfea:	1f 92       	push	r1
    cfec:	cd b7       	in	r28, 0x3d	; 61
    cfee:	de b7       	in	r29, 0x3e	; 62
    cff0:	7c 01       	movw	r14, r24
    cff2:	b4 2e       	mov	r11, r20
    cff4:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    cff6:	80 e2       	ldi	r24, 0x20	; 32
    cff8:	89 83       	std	Y+1, r24	; 0x01
    cffa:	8a 83       	std	Y+2, r24	; 0x02
    cffc:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    cffe:	f7 01       	movw	r30, r14
    d000:	85 81       	ldd	r24, Z+5	; 0x05
    d002:	81 11       	cpse	r24, r1
    d004:	1d c0       	rjmp	.+58     	; 0xd040 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    d006:	40 e0       	ldi	r20, 0x00	; 0
    d008:	6d e5       	ldi	r22, 0x5D	; 93
    d00a:	7c e3       	ldi	r23, 0x3C	; 60
    d00c:	82 2f       	mov	r24, r18
    d00e:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d012:	40 e0       	ldi	r20, 0x00	; 0
    d014:	6f e9       	ldi	r22, 0x9F	; 159
    d016:	7c e3       	ldi	r23, 0x3C	; 60
    d018:	81 e0       	ldi	r24, 0x01	; 1
    d01a:	81 0f       	add	r24, r17
    d01c:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    d020:	f7 01       	movw	r30, r14
    d022:	40 81       	ld	r20, Z
    d024:	44 0f       	add	r20, r20
    d026:	44 0f       	add	r20, r20
    d028:	44 0f       	add	r20, r20
    d02a:	40 5c       	subi	r20, 0xC0	; 192
    d02c:	01 e0       	ldi	r16, 0x01	; 1
    d02e:	21 e0       	ldi	r18, 0x01	; 1
    d030:	6b 2d       	mov	r22, r11
    d032:	66 0f       	add	r22, r22
    d034:	66 0f       	add	r22, r22
    d036:	66 0f       	add	r22, r22
    d038:	81 2f       	mov	r24, r17
    d03a:	0e 94 b8 4d 	call	0x9b70	; 0x9b70 <MoveSprite>
    d03e:	6f c0       	rjmp	.+222    	; 0xd11e <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    d040:	81 30       	cpi	r24, 0x01	; 1
    d042:	09 f0       	breq	.+2      	; 0xd046 <_handle_select_render_helper+0x72>
    d044:	44 c0       	rjmp	.+136    	; 0xd0ce <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    d046:	40 e0       	ldi	r20, 0x00	; 0
    d048:	6a e5       	ldi	r22, 0x5A	; 90
    d04a:	7c e3       	ldi	r23, 0x3C	; 60
    d04c:	82 2f       	mov	r24, r18
    d04e:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    d052:	aa 24       	eor	r10, r10
    d054:	a3 94       	inc	r10
    d056:	a1 0e       	add	r10, r17
    d058:	40 e0       	ldi	r20, 0x00	; 0
    d05a:	67 e5       	ldi	r22, 0x57	; 87
    d05c:	7c e3       	ldi	r23, 0x3C	; 60
    d05e:	8a 2d       	mov	r24, r10
    d060:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    d064:	cb 2c       	mov	r12, r11
    d066:	d1 2c       	mov	r13, r1
    d068:	f5 e0       	ldi	r31, 0x05	; 5
    d06a:	cf 0e       	add	r12, r31
    d06c:	d1 1c       	adc	r13, r1
    d06e:	f7 01       	movw	r30, r14
    d070:	40 81       	ld	r20, Z
    d072:	44 0f       	add	r20, r20
    d074:	44 0f       	add	r20, r20
    d076:	44 0f       	add	r20, r20
    d078:	48 5c       	subi	r20, 0xC8	; 200
    d07a:	84 81       	ldd	r24, Z+4	; 0x04
    d07c:	b6 01       	movw	r22, r12
    d07e:	68 0f       	add	r22, r24
    d080:	71 1d       	adc	r23, r1
    d082:	87 fd       	sbrc	r24, 7
    d084:	7a 95       	dec	r23
    d086:	66 0f       	add	r22, r22
    d088:	66 0f       	add	r22, r22
    d08a:	66 0f       	add	r22, r22
    d08c:	01 e0       	ldi	r16, 0x01	; 1
    d08e:	21 e0       	ldi	r18, 0x01	; 1
    d090:	81 2f       	mov	r24, r17
    d092:	0e 94 b8 4d 	call	0x9b70	; 0x9b70 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    d096:	f7 01       	movw	r30, r14
    d098:	40 81       	ld	r20, Z
    d09a:	44 0f       	add	r20, r20
    d09c:	44 0f       	add	r20, r20
    d09e:	44 0f       	add	r20, r20
    d0a0:	48 5b       	subi	r20, 0xB8	; 184
    d0a2:	84 81       	ldd	r24, Z+4	; 0x04
    d0a4:	c8 0e       	add	r12, r24
    d0a6:	d1 1c       	adc	r13, r1
    d0a8:	87 fd       	sbrc	r24, 7
    d0aa:	da 94       	dec	r13
    d0ac:	6c 2d       	mov	r22, r12
    d0ae:	66 0f       	add	r22, r22
    d0b0:	66 0f       	add	r22, r22
    d0b2:	66 0f       	add	r22, r22
    d0b4:	21 e0       	ldi	r18, 0x01	; 1
    d0b6:	8a 2d       	mov	r24, r10
    d0b8:	0e 94 b8 4d 	call	0x9b70	; 0x9b70 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    d0bc:	43 e0       	ldi	r20, 0x03	; 3
    d0be:	b7 01       	movw	r22, r14
    d0c0:	6f 5f       	subi	r22, 0xFF	; 255
    d0c2:	7f 4f       	sbci	r23, 0xFF	; 255
    d0c4:	ce 01       	movw	r24, r28
    d0c6:	01 96       	adiw	r24, 0x01	; 1
    d0c8:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
    d0cc:	28 c0       	rjmp	.+80     	; 0xd11e <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    d0ce:	82 30       	cpi	r24, 0x02	; 2
    d0d0:	31 f5       	brne	.+76     	; 0xd11e <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    d0d2:	c4 2e       	mov	r12, r20
    d0d4:	d1 2c       	mov	r13, r1
    d0d6:	48 e2       	ldi	r20, 0x28	; 40
    d0d8:	65 e0       	ldi	r22, 0x05	; 5
    d0da:	70 e0       	ldi	r23, 0x00	; 0
    d0dc:	c6 01       	movw	r24, r12
    d0de:	06 96       	adiw	r24, 0x06	; 6
    d0e0:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    d0e4:	23 e0       	ldi	r18, 0x03	; 3
    d0e6:	a7 01       	movw	r20, r14
    d0e8:	4f 5f       	subi	r20, 0xFF	; 255
    d0ea:	5f 4f       	sbci	r21, 0xFF	; 255
    d0ec:	65 e0       	ldi	r22, 0x05	; 5
    d0ee:	87 e0       	ldi	r24, 0x07	; 7
    d0f0:	8b 0d       	add	r24, r11
    d0f2:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    d0f6:	49 e2       	ldi	r20, 0x29	; 41
    d0f8:	65 e0       	ldi	r22, 0x05	; 5
    d0fa:	70 e0       	ldi	r23, 0x00	; 0
    d0fc:	c6 01       	movw	r24, r12
    d0fe:	0a 96       	adiw	r24, 0x0a	; 10
    d100:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
		MapSprite2(idx, map_none, 0);
    d104:	40 e0       	ldi	r20, 0x00	; 0
    d106:	6f e9       	ldi	r22, 0x9F	; 159
    d108:	7c e3       	ldi	r23, 0x3C	; 60
    d10a:	81 2f       	mov	r24, r17
    d10c:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d110:	40 e0       	ldi	r20, 0x00	; 0
    d112:	6f e9       	ldi	r22, 0x9F	; 159
    d114:	7c e3       	ldi	r23, 0x3C	; 60
    d116:	81 e0       	ldi	r24, 0x01	; 1
    d118:	81 0f       	add	r24, r17
    d11a:	0e 94 66 4d 	call	0x9acc	; 0x9acc <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    d11e:	f7 01       	movw	r30, r14
    d120:	60 81       	ld	r22, Z
    d122:	68 5f       	subi	r22, 0xF8	; 248
    d124:	23 e0       	ldi	r18, 0x03	; 3
    d126:	ae 01       	movw	r20, r28
    d128:	4f 5f       	subi	r20, 0xFF	; 255
    d12a:	5f 4f       	sbci	r21, 0xFF	; 255
    d12c:	85 e0       	ldi	r24, 0x05	; 5
    d12e:	8b 0d       	add	r24, r11
    d130:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
}
    d134:	0f 90       	pop	r0
    d136:	0f 90       	pop	r0
    d138:	0f 90       	pop	r0
    d13a:	df 91       	pop	r29
    d13c:	cf 91       	pop	r28
    d13e:	1f 91       	pop	r17
    d140:	0f 91       	pop	r16
    d142:	ff 90       	pop	r15
    d144:	ef 90       	pop	r14
    d146:	df 90       	pop	r13
    d148:	cf 90       	pop	r12
    d14a:	bf 90       	pop	r11
    d14c:	af 90       	pop	r10
    d14e:	08 95       	ret

0000d150 <load_handle_select>:

void load_handle_select()
{
    d150:	8f 92       	push	r8
    d152:	9f 92       	push	r9
    d154:	af 92       	push	r10
    d156:	bf 92       	push	r11
    d158:	cf 92       	push	r12
    d15a:	df 92       	push	r13
    d15c:	ef 92       	push	r14
    d15e:	ff 92       	push	r15
    d160:	0f 93       	push	r16
    d162:	1f 93       	push	r17
    d164:	cf 93       	push	r28
    d166:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    d168:	82 e0       	ldi	r24, 0x02	; 2
    d16a:	80 93 06 0c 	sts	0x0C06, r24
	clear_sprites();
    d16e:	0e 94 d3 52 	call	0xa5a6	; 0xa5a6 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    d172:	4d ed       	ldi	r20, 0xDD	; 221
    d174:	55 e7       	ldi	r21, 0x75	; 117
    d176:	64 e0       	ldi	r22, 0x04	; 4
    d178:	83 e0       	ldi	r24, 0x03	; 3
    d17a:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    d17e:	47 ed       	ldi	r20, 0xD7	; 215
    d180:	55 e7       	ldi	r21, 0x75	; 117
    d182:	64 e0       	ldi	r22, 0x04	; 4
    d184:	84 e1       	ldi	r24, 0x14	; 20
    d186:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    d18a:	4f e6       	ldi	r20, 0x6F	; 111
    d18c:	52 e0       	ldi	r21, 0x02	; 2
    d18e:	61 e0       	ldi	r22, 0x01	; 1
    d190:	70 e0       	ldi	r23, 0x00	; 0
    d192:	89 e0       	ldi	r24, 0x09	; 9
    d194:	90 e0       	ldi	r25, 0x00	; 0
    d196:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(6, 5, (char*) strPlayer1);
    d19a:	4e e5       	ldi	r20, 0x5E	; 94
    d19c:	52 e0       	ldi	r21, 0x02	; 2
    d19e:	65 e0       	ldi	r22, 0x05	; 5
    d1a0:	70 e0       	ldi	r23, 0x00	; 0
    d1a2:	86 e0       	ldi	r24, 0x06	; 6
    d1a4:	90 e0       	ldi	r25, 0x00	; 0
    d1a6:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(23, 5, (char*) strPlayer2);
    d1aa:	4b e5       	ldi	r20, 0x5B	; 91
    d1ac:	52 e0       	ldi	r21, 0x02	; 2
    d1ae:	65 e0       	ldi	r22, 0x05	; 5
    d1b0:	70 e0       	ldi	r23, 0x00	; 0
    d1b2:	87 e1       	ldi	r24, 0x17	; 23
    d1b4:	90 e0       	ldi	r25, 0x00	; 0
    d1b6:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
    d1ba:	88 ee       	ldi	r24, 0xE8	; 232
    d1bc:	e8 2e       	mov	r14, r24
    d1be:	8b e0       	ldi	r24, 0x0B	; 11
    d1c0:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    d1c2:	c0 e0       	ldi	r28, 0x00	; 0
    d1c4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    d1c6:	93 e0       	ldi	r25, 0x03	; 3
    d1c8:	a9 2e       	mov	r10, r25
    d1ca:	b1 2c       	mov	r11, r1
    d1cc:	67 01       	movw	r12, r14
    d1ce:	ce 01       	movw	r24, r28
    d1d0:	b5 01       	movw	r22, r10
    d1d2:	0e 94 5b 6f 	call	0xdeb6	; 0xdeb6 <__divmodhi4>
    d1d6:	4c 01       	movw	r8, r24
    d1d8:	8b 01       	movw	r16, r22
    d1da:	08 5f       	subi	r16, 0xF8	; 248
    d1dc:	1f 4f       	sbci	r17, 0xFF	; 255
    d1de:	f7 01       	movw	r30, r14
    d1e0:	41 91       	ld	r20, Z+
    d1e2:	7f 01       	movw	r14, r30
    d1e4:	b8 01       	movw	r22, r16
    d1e6:	03 96       	adiw	r24, 0x03	; 3
    d1e8:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    d1ec:	f6 01       	movw	r30, r12
    d1ee:	40 81       	ld	r20, Z
    d1f0:	b8 01       	movw	r22, r16
    d1f2:	c4 01       	movw	r24, r8
    d1f4:	44 96       	adiw	r24, 0x14	; 20
    d1f6:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    d1fa:	21 96       	adiw	r28, 0x01	; 1
    d1fc:	cb 31       	cpi	r28, 0x1B	; 27
    d1fe:	d1 05       	cpc	r29, r1
    d200:	29 f7       	brne	.-54     	; 0xd1cc <load_handle_select+0x7c>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    d202:	4a e9       	ldi	r20, 0x9A	; 154
    d204:	52 e0       	ldi	r21, 0x02	; 2
    d206:	65 e1       	ldi	r22, 0x15	; 21
    d208:	70 e0       	ldi	r23, 0x00	; 0
    d20a:	85 e0       	ldi	r24, 0x05	; 5
    d20c:	90 e0       	ldi	r25, 0x00	; 0
    d20e:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    d212:	4d ec       	ldi	r20, 0xCD	; 205
    d214:	52 e0       	ldi	r21, 0x02	; 2
    d216:	66 e1       	ldi	r22, 0x16	; 22
    d218:	70 e0       	ldi	r23, 0x00	; 0
    d21a:	85 e0       	ldi	r24, 0x05	; 5
    d21c:	90 e0       	ldi	r25, 0x00	; 0
    d21e:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(5, 23, (char*) strCancelHandle);
    d222:	49 ea       	ldi	r20, 0xA9	; 169
    d224:	52 e0       	ldi	r21, 0x02	; 2
    d226:	67 e1       	ldi	r22, 0x17	; 23
    d228:	70 e0       	ldi	r23, 0x00	; 0
    d22a:	85 e0       	ldi	r24, 0x05	; 5
    d22c:	90 e0       	ldi	r25, 0x00	; 0
    d22e:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>
	Print(5, 24, (char*) strChangeHandle);
    d232:	4c e4       	ldi	r20, 0x4C	; 76
    d234:	52 e0       	ldi	r21, 0x02	; 2
    d236:	68 e1       	ldi	r22, 0x18	; 24
    d238:	70 e0       	ldi	r23, 0x00	; 0
    d23a:	85 e0       	ldi	r24, 0x05	; 5
    d23c:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    d23e:	df 91       	pop	r29
    d240:	cf 91       	pop	r28
    d242:	1f 91       	pop	r17
    d244:	0f 91       	pop	r16
    d246:	ff 90       	pop	r15
    d248:	ef 90       	pop	r14
    d24a:	df 90       	pop	r13
    d24c:	cf 90       	pop	r12
    d24e:	bf 90       	pop	r11
    d250:	af 90       	pop	r10
    d252:	9f 90       	pop	r9
    d254:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    d256:	0c 94 6c 4e 	jmp	0x9cd8	; 0x9cd8 <Print>

0000d25a <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    d25a:	0f 93       	push	r16
    d25c:	cf 93       	push	r28
    d25e:	df 93       	push	r29
    d260:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    d262:	90 91 19 0c 	lds	r25, 0x0C19
    d266:	91 30       	cpi	r25, 0x01	; 1
    d268:	41 f0       	breq	.+16     	; 0xd27a <update_splash+0x20>
    d26a:	92 30       	cpi	r25, 0x02	; 2
    d26c:	51 f0       	breq	.+20     	; 0xd282 <update_splash+0x28>
    d26e:	91 11       	cpse	r25, r1
    d270:	0f c0       	rjmp	.+30     	; 0xd290 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    d272:	01 e0       	ldi	r16, 0x01	; 1
    d274:	21 e0       	ldi	r18, 0x01	; 1
    d276:	48 e6       	ldi	r20, 0x68	; 104
    d278:	07 c0       	rjmp	.+14     	; 0xd288 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    d27a:	01 e0       	ldi	r16, 0x01	; 1
    d27c:	21 e0       	ldi	r18, 0x01	; 1
    d27e:	40 e7       	ldi	r20, 0x70	; 112
    d280:	03 c0       	rjmp	.+6      	; 0xd288 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    d282:	01 e0       	ldi	r16, 0x01	; 1
    d284:	21 e0       	ldi	r18, 0x01	; 1
    d286:	48 e7       	ldi	r20, 0x78	; 120
    d288:	60 e3       	ldi	r22, 0x30	; 48
    d28a:	80 e0       	ldi	r24, 0x00	; 0
    d28c:	0e 94 b8 4d 	call	0x9b70	; 0x9b70 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    d290:	4a e9       	ldi	r20, 0x9A	; 154
    d292:	52 e0       	ldi	r21, 0x02	; 2
    d294:	65 e1       	ldi	r22, 0x15	; 21
    d296:	70 e0       	ldi	r23, 0x00	; 0
    d298:	86 e0       	ldi	r24, 0x06	; 6
    d29a:	90 e0       	ldi	r25, 0x00	; 0
    d29c:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    d2a0:	28 81       	ld	r18, Y
    d2a2:	39 81       	ldd	r19, Y+1	; 0x01
    d2a4:	21 15       	cp	r18, r1
    d2a6:	31 05       	cpc	r19, r1
    d2a8:	21 f0       	breq	.+8      	; 0xd2b2 <update_splash+0x58>
    d2aa:	10 92 10 0c 	sts	0x0C10, r1
    d2ae:	10 92 0f 0c 	sts	0x0C0F, r1
	
	if (p1->pressed & BTN_UP)
    d2b2:	24 ff       	sbrs	r18, 4
    d2b4:	0e c0       	rjmp	.+28     	; 0xd2d2 <update_splash+0x78>
	{
		game.selection--;
    d2b6:	80 91 19 0c 	lds	r24, 0x0C19
    d2ba:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    d2bc:	87 ff       	sbrs	r24, 7
    d2be:	11 c0       	rjmp	.+34     	; 0xd2e2 <update_splash+0x88>
    d2c0:	10 92 19 0c 	sts	0x0C19, r1
		SFX_NAVIGATE;
    d2c4:	2f ef       	ldi	r18, 0xFF	; 255
    d2c6:	47 e1       	ldi	r20, 0x17	; 23
    d2c8:	64 e0       	ldi	r22, 0x04	; 4
    d2ca:	84 e0       	ldi	r24, 0x04	; 4
    d2cc:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
    d2d0:	8f c0       	rjmp	.+286    	; 0xd3f0 <update_splash+0x196>
	}
	else if (p1->pressed & BTN_DOWN)
    d2d2:	25 ff       	sbrs	r18, 5
    d2d4:	09 c0       	rjmp	.+18     	; 0xd2e8 <update_splash+0x8e>
	{
		game.selection++;
    d2d6:	80 91 19 0c 	lds	r24, 0x0C19
    d2da:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    d2dc:	83 30       	cpi	r24, 0x03	; 3
    d2de:	0c f0       	brlt	.+2      	; 0xd2e2 <update_splash+0x88>
    d2e0:	82 e0       	ldi	r24, 0x02	; 2
    d2e2:	80 93 19 0c 	sts	0x0C19, r24
    d2e6:	ee cf       	rjmp	.-36     	; 0xd2c4 <update_splash+0x6a>
		SFX_NAVIGATE;
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    d2e8:	ce 01       	movw	r24, r28
    d2ea:	0e 94 84 61 	call	0xc308	; 0xc308 <select_pressed>
    d2ee:	88 23       	and	r24, r24
    d2f0:	a1 f1       	breq	.+104    	; 0xd35a <update_splash+0x100>
    d2f2:	80 91 19 0c 	lds	r24, 0x0C19
    d2f6:	82 30       	cpi	r24, 0x02	; 2
    d2f8:	c8 f4       	brcc	.+50     	; 0xd32c <update_splash+0xd2>
	{
		game.demo_counter = 0;
    d2fa:	10 92 10 0c 	sts	0x0C10, r1
    d2fe:	10 92 0f 0c 	sts	0x0C0F, r1
		p1s.select_state = SELECTING;
    d302:	10 92 31 0b 	sts	0x0B31, r1
		p2s.select_state = SELECTING;
    d306:	10 92 2b 0b 	sts	0x0B2B, r1
		SFX_NAVIGATE;
    d30a:	2f ef       	ldi	r18, 0xFF	; 255
    d30c:	47 e1       	ldi	r20, 0x17	; 23
    d30e:	64 e0       	ldi	r22, 0x04	; 4
    d310:	84 e0       	ldi	r24, 0x04	; 4
    d312:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
		fade_through();
    d316:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
		load_eeprom(&handles);
    d31a:	86 ee       	ldi	r24, 0xE6	; 230
    d31c:	9b e0       	ldi	r25, 0x0B	; 11
    d31e:	0e 94 b7 52 	call	0xa56e	; 0xa56e <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    d322:	df 91       	pop	r29
    d324:	cf 91       	pop	r28
    d326:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    d328:	0c 94 a8 68 	jmp	0xd150	; 0xd150 <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    d32c:	82 30       	cpi	r24, 0x02	; 2
    d32e:	a9 f4       	brne	.+42     	; 0xd35a <update_splash+0x100>
	{
		game.demo_counter = 0;
    d330:	10 92 10 0c 	sts	0x0C10, r1
    d334:	10 92 0f 0c 	sts	0x0C0F, r1
		SFX_NAVIGATE;
    d338:	2f ef       	ldi	r18, 0xFF	; 255
    d33a:	47 e1       	ldi	r20, 0x17	; 23
    d33c:	64 e0       	ldi	r22, 0x04	; 4
    d33e:	84 e0       	ldi	r24, 0x04	; 4
    d340:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
		fade_through();
    d344:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
		load_eeprom(&scores);
    d348:	8f eb       	ldi	r24, 0xBF	; 191
    d34a:	9b e0       	ldi	r25, 0x0B	; 11
    d34c:	0e 94 b7 52 	call	0xa56e	; 0xa56e <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    d350:	df 91       	pop	r29
    d352:	cf 91       	pop	r28
    d354:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    d356:	0c 94 8e 61 	jmp	0xc31c	; 0xc31c <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    d35a:	80 91 0f 0c 	lds	r24, 0x0C0F
    d35e:	90 91 10 0c 	lds	r25, 0x0C10
    d362:	88 35       	cpi	r24, 0x58	; 88
    d364:	92 40       	sbci	r25, 0x02	; 2
    d366:	08 f4       	brcc	.+2      	; 0xd36a <update_splash+0x110>
    d368:	43 c0       	rjmp	.+134    	; 0xd3f0 <update_splash+0x196>
	{
		game.demo_counter = 0;
    d36a:	10 92 10 0c 	sts	0x0C10, r1
    d36e:	10 92 0f 0c 	sts	0x0C0F, r1
		if (game.demo_choice % 2 == 0)
    d372:	80 91 0e 0c 	lds	r24, 0x0C0E
    d376:	80 fd       	sbrc	r24, 0
    d378:	27 c0       	rjmp	.+78     	; 0xd3c8 <update_splash+0x16e>
		{
			game.selection = CPUVCPU;
    d37a:	83 e0       	ldi	r24, 0x03	; 3
    d37c:	80 93 19 0c 	sts	0x0C19, r24
			player1.handle_id = 9;
    d380:	c9 e0       	ldi	r28, 0x09	; 9
    d382:	c0 93 42 0c 	sts	0x0C42, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    d386:	43 e0       	ldi	r20, 0x03	; 3
    d388:	63 e0       	ldi	r22, 0x03	; 3
    d38a:	7c e0       	ldi	r23, 0x0C	; 12
    d38c:	83 e4       	ldi	r24, 0x43	; 67
    d38e:	9c e0       	ldi	r25, 0x0C	; 12
    d390:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
			player2.handle_id = 9;
    d394:	c0 93 b1 0f 	sts	0x0FB1, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d398:	43 e0       	ldi	r20, 0x03	; 3
    d39a:	63 e0       	ldi	r22, 0x03	; 3
    d39c:	7c e0       	ldi	r23, 0x0C	; 12
    d39e:	82 eb       	ldi	r24, 0xB2	; 178
    d3a0:	9f e0       	ldi	r25, 0x0F	; 15
    d3a2:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
			SFX_NAVIGATE;
    d3a6:	2f ef       	ldi	r18, 0xFF	; 255
    d3a8:	47 e1       	ldi	r20, 0x17	; 23
    d3aa:	64 e0       	ldi	r22, 0x04	; 4
    d3ac:	84 e0       	ldi	r24, 0x04	; 4
    d3ae:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
			clear_sprites();
    d3b2:	0e 94 d3 52 	call	0xa5a6	; 0xa5a6 <clear_sprites>
			fade_through();
    d3b6:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
			level_transition(LBRandom(0, 10));
    d3ba:	6a e0       	ldi	r22, 0x0A	; 10
    d3bc:	80 e0       	ldi	r24, 0x00	; 0
    d3be:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBRandom>
    d3c2:	0e 94 5d 5f 	call	0xbeba	; 0xbeba <level_transition>
    d3c6:	0e c0       	rjmp	.+28     	; 0xd3e4 <update_splash+0x18a>
		}
		else
		{
			SFX_NAVIGATE;
    d3c8:	2f ef       	ldi	r18, 0xFF	; 255
    d3ca:	47 e1       	ldi	r20, 0x17	; 23
    d3cc:	64 e0       	ldi	r22, 0x04	; 4
    d3ce:	84 e0       	ldi	r24, 0x04	; 4
    d3d0:	0e 94 b1 43 	call	0x8762	; 0x8762 <TriggerNote>
			fade_through();
    d3d4:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
			load_eeprom(&scores);
    d3d8:	8f eb       	ldi	r24, 0xBF	; 191
    d3da:	9b e0       	ldi	r25, 0x0B	; 11
    d3dc:	0e 94 b7 52 	call	0xa56e	; 0xa56e <load_eeprom>
			load_tank_rank();
    d3e0:	0e 94 8e 61 	call	0xc31c	; 0xc31c <load_tank_rank>
		}
		game.demo_choice++;
    d3e4:	80 91 0e 0c 	lds	r24, 0x0C0E
    d3e8:	8f 5f       	subi	r24, 0xFF	; 255
    d3ea:	80 93 0e 0c 	sts	0x0C0E, r24
		return;
    d3ee:	09 c0       	rjmp	.+18     	; 0xd402 <update_splash+0x1a8>
		
	}
	game.demo_counter++;
    d3f0:	80 91 0f 0c 	lds	r24, 0x0C0F
    d3f4:	90 91 10 0c 	lds	r25, 0x0C10
    d3f8:	01 96       	adiw	r24, 0x01	; 1
    d3fa:	90 93 10 0c 	sts	0x0C10, r25
    d3fe:	80 93 0f 0c 	sts	0x0C0F, r24
#endif
}
    d402:	df 91       	pop	r29
    d404:	cf 91       	pop	r28
    d406:	0f 91       	pop	r16
    d408:	08 95       	ret

0000d40a <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    d40a:	0f 93       	push	r16
    d40c:	1f 93       	push	r17
    d40e:	cf 93       	push	r28
    d410:	df 93       	push	r29
    d412:	8c 01       	movw	r16, r24
    d414:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    d416:	26 e0       	ldi	r18, 0x06	; 6
    d418:	42 e0       	ldi	r20, 0x02	; 2
    d41a:	bc 01       	movw	r22, r24
    d41c:	8c e2       	ldi	r24, 0x2C	; 44
    d41e:	9b e0       	ldi	r25, 0x0B	; 11
    d420:	0e 94 ea 67 	call	0xcfd4	; 0xcfd4 <_handle_select_render_helper>
	if (game.selection == PVP)
    d424:	80 91 19 0c 	lds	r24, 0x0C19
    d428:	81 30       	cpi	r24, 0x01	; 1
    d42a:	39 f4       	brne	.+14     	; 0xd43a <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    d42c:	28 e0       	ldi	r18, 0x08	; 8
    d42e:	43 e1       	ldi	r20, 0x13	; 19
    d430:	be 01       	movw	r22, r28
    d432:	86 e2       	ldi	r24, 0x26	; 38
    d434:	9b e0       	ldi	r25, 0x0B	; 11
    d436:	0e 94 ea 67 	call	0xcfd4	; 0xcfd4 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    d43a:	47 e3       	ldi	r20, 0x37	; 55
    d43c:	5c e0       	ldi	r21, 0x0C	; 12
    d43e:	b8 01       	movw	r22, r16
    d440:	8c e2       	ldi	r24, 0x2C	; 44
    d442:	9b e0       	ldi	r25, 0x0B	; 11
    d444:	0e 94 0a 67 	call	0xce14	; 0xce14 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    d448:	10 91 31 0b 	lds	r17, 0x0B31
	if (game.selection == PVP)
    d44c:	80 91 19 0c 	lds	r24, 0x0C19
    d450:	81 30       	cpi	r24, 0x01	; 1
    d452:	19 f0       	breq	.+6      	; 0xd45a <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    d454:	12 30       	cpi	r17, 0x02	; 2
    d456:	69 f0       	breq	.+26     	; 0xd472 <update_handle_select+0x68>
    d458:	21 c0       	rjmp	.+66     	; 0xd49c <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    d45a:	46 ea       	ldi	r20, 0xA6	; 166
    d45c:	5f e0       	ldi	r21, 0x0F	; 15
    d45e:	be 01       	movw	r22, r28
    d460:	86 e2       	ldi	r24, 0x26	; 38
    d462:	9b e0       	ldi	r25, 0x0B	; 11
    d464:	0e 94 0a 67 	call	0xce14	; 0xce14 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    d468:	80 91 2b 0b 	lds	r24, 0x0B2B
    d46c:	82 30       	cpi	r24, 0x02	; 2
    d46e:	b1 f4       	brne	.+44     	; 0xd49c <update_handle_select+0x92>
    d470:	f1 cf       	rjmp	.-30     	; 0xd454 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    d472:	80 91 19 0c 	lds	r24, 0x0C19
    d476:	81 11       	cpse	r24, r1
    d478:	0a c0       	rjmp	.+20     	; 0xd48e <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    d47a:	89 e0       	ldi	r24, 0x09	; 9
    d47c:	80 93 b1 0f 	sts	0x0FB1, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d480:	43 e0       	ldi	r20, 0x03	; 3
    d482:	63 e0       	ldi	r22, 0x03	; 3
    d484:	7c e0       	ldi	r23, 0x0C	; 12
    d486:	82 eb       	ldi	r24, 0xB2	; 178
    d488:	9f e0       	ldi	r25, 0x0F	; 15
    d48a:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <LBCopyChars>
		}
		level_transition(0);
    d48e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    d490:	df 91       	pop	r29
    d492:	cf 91       	pop	r28
    d494:	1f 91       	pop	r17
    d496:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    d498:	0c 94 5d 5f 	jmp	0xbeba	; 0xbeba <level_transition>
	}
}
    d49c:	df 91       	pop	r29
    d49e:	cf 91       	pop	r28
    d4a0:	1f 91       	pop	r17
    d4a2:	0f 91       	pop	r16
    d4a4:	08 95       	ret

0000d4a6 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d4a6:	00 97       	sbiw	r24, 0x00	; 0
    d4a8:	41 f0       	breq	.+16     	; 0xd4ba <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    d4aa:	81 30       	cpi	r24, 0x01	; 1
    d4ac:	91 05       	cpc	r25, r1
    d4ae:	41 f0       	breq	.+16     	; 0xd4c0 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    d4b0:	82 30       	cpi	r24, 0x02	; 2
    d4b2:	91 05       	cpc	r25, r1
    d4b4:	41 f0       	breq	.+16     	; 0xd4c6 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    d4b6:	03 97       	sbiw	r24, 0x03	; 3
    d4b8:	49 f0       	breq	.+18     	; 0xd4cc <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d4ba:	80 e1       	ldi	r24, 0x10	; 16
    d4bc:	90 e0       	ldi	r25, 0x00	; 0
    d4be:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    d4c0:	80 e2       	ldi	r24, 0x20	; 32
    d4c2:	90 e0       	ldi	r25, 0x00	; 0
    d4c4:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    d4c6:	80 e4       	ldi	r24, 0x40	; 64
    d4c8:	90 e0       	ldi	r25, 0x00	; 0
    d4ca:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    d4cc:	80 e8       	ldi	r24, 0x80	; 128
    d4ce:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    d4d0:	08 95       	ret

0000d4d2 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    d4d2:	8f 92       	push	r8
    d4d4:	9f 92       	push	r9
    d4d6:	af 92       	push	r10
    d4d8:	bf 92       	push	r11
    d4da:	cf 92       	push	r12
    d4dc:	df 92       	push	r13
    d4de:	ef 92       	push	r14
    d4e0:	ff 92       	push	r15
    d4e2:	0f 93       	push	r16
    d4e4:	1f 93       	push	r17
    d4e6:	cf 93       	push	r28
    d4e8:	df 93       	push	r29
    d4ea:	f8 2e       	mov	r15, r24
    d4ec:	e6 2e       	mov	r14, r22
    d4ee:	d4 2e       	mov	r13, r20
    d4f0:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    d4f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    d4f4:	88 23       	and	r24, r24
    d4f6:	09 f4       	brne	.+2      	; 0xd4fa <crash_and_turn+0x28>
    d4f8:	a8 c0       	rjmp	.+336    	; 0xd64a <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    d4fa:	f8 01       	movw	r30, r16
    d4fc:	c4 80       	ldd	r12, Z+4	; 0x04
    d4fe:	c4 fe       	sbrs	r12, 4
    d500:	23 c0       	rjmp	.+70     	; 0xd548 <crash_and_turn+0x76>
    d502:	fe e1       	ldi	r31, 0x1E	; 30
    d504:	6f 02       	muls	r22, r31
    d506:	40 01       	movw	r8, r0
    d508:	11 24       	eor	r1, r1
    d50a:	af 2c       	mov	r10, r15
    d50c:	bb 24       	eor	r11, r11
    d50e:	a7 fc       	sbrc	r10, 7
    d510:	b0 94       	com	r11
    d512:	c4 01       	movw	r24, r8
    d514:	8a 0d       	add	r24, r10
    d516:	9b 1d       	adc	r25, r11
    d518:	01 97       	sbiw	r24, 0x01	; 1
    d51a:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d51e:	81 11       	cpse	r24, r1
    d520:	13 c0       	rjmp	.+38     	; 0xd548 <crash_and_turn+0x76>
    d522:	c4 01       	movw	r24, r8
    d524:	8a 0d       	add	r24, r10
    d526:	9b 1d       	adc	r25, r11
    d528:	4d 96       	adiw	r24, 0x1d	; 29
    d52a:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d52e:	81 11       	cpse	r24, r1
    d530:	0b c0       	rjmp	.+22     	; 0xd548 <crash_and_turn+0x76>
    d532:	c4 01       	movw	r24, r8
    d534:	8a 0d       	add	r24, r10
    d536:	9b 1d       	adc	r25, r11
    d538:	cb 96       	adiw	r24, 0x3b	; 59
    d53a:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d53e:	81 11       	cpse	r24, r1
    d540:	03 c0       	rjmp	.+6      	; 0xd548 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    d542:	80 e4       	ldi	r24, 0x40	; 64
    d544:	90 e0       	ldi	r25, 0x00	; 0
    d546:	6f c0       	rjmp	.+222    	; 0xd626 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    d548:	c6 fe       	sbrs	r12, 6
    d54a:	23 c0       	rjmp	.+70     	; 0xd592 <crash_and_turn+0xc0>
    d54c:	8e 2d       	mov	r24, r14
    d54e:	99 27       	eor	r25, r25
    d550:	87 fd       	sbrc	r24, 7
    d552:	90 95       	com	r25
    d554:	02 96       	adiw	r24, 0x02	; 2
    d556:	2e e1       	ldi	r18, 0x1E	; 30
    d558:	28 9f       	mul	r18, r24
    d55a:	50 01       	movw	r10, r0
    d55c:	29 9f       	mul	r18, r25
    d55e:	b0 0c       	add	r11, r0
    d560:	11 24       	eor	r1, r1
    d562:	af 0c       	add	r10, r15
    d564:	b1 1c       	adc	r11, r1
    d566:	f7 fc       	sbrc	r15, 7
    d568:	ba 94       	dec	r11
    d56a:	c5 01       	movw	r24, r10
    d56c:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d570:	81 11       	cpse	r24, r1
    d572:	0f c0       	rjmp	.+30     	; 0xd592 <crash_and_turn+0xc0>
    d574:	c5 01       	movw	r24, r10
    d576:	01 96       	adiw	r24, 0x01	; 1
    d578:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d57c:	81 11       	cpse	r24, r1
    d57e:	09 c0       	rjmp	.+18     	; 0xd592 <crash_and_turn+0xc0>
    d580:	c5 01       	movw	r24, r10
    d582:	02 96       	adiw	r24, 0x02	; 2
    d584:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d588:	81 11       	cpse	r24, r1
    d58a:	03 c0       	rjmp	.+6      	; 0xd592 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    d58c:	80 e2       	ldi	r24, 0x20	; 32
    d58e:	90 e0       	ldi	r25, 0x00	; 0
    d590:	4a c0       	rjmp	.+148    	; 0xd626 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    d592:	c5 fe       	sbrs	r12, 5
    d594:	24 c0       	rjmp	.+72     	; 0xd5de <crash_and_turn+0x10c>
    d596:	fe 2d       	mov	r31, r14
    d598:	8e e1       	ldi	r24, 0x1E	; 30
    d59a:	f8 02       	muls	r31, r24
    d59c:	40 01       	movw	r8, r0
    d59e:	11 24       	eor	r1, r1
    d5a0:	af 2c       	mov	r10, r15
    d5a2:	bb 24       	eor	r11, r11
    d5a4:	a7 fc       	sbrc	r10, 7
    d5a6:	b0 94       	com	r11
    d5a8:	c4 01       	movw	r24, r8
    d5aa:	8a 0d       	add	r24, r10
    d5ac:	9b 1d       	adc	r25, r11
    d5ae:	02 96       	adiw	r24, 0x02	; 2
    d5b0:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d5b4:	81 11       	cpse	r24, r1
    d5b6:	13 c0       	rjmp	.+38     	; 0xd5de <crash_and_turn+0x10c>
    d5b8:	c4 01       	movw	r24, r8
    d5ba:	8a 0d       	add	r24, r10
    d5bc:	9b 1d       	adc	r25, r11
    d5be:	80 96       	adiw	r24, 0x20	; 32
    d5c0:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d5c4:	81 11       	cpse	r24, r1
    d5c6:	0b c0       	rjmp	.+22     	; 0xd5de <crash_and_turn+0x10c>
    d5c8:	c4 01       	movw	r24, r8
    d5ca:	8a 0d       	add	r24, r10
    d5cc:	9b 1d       	adc	r25, r11
    d5ce:	ce 96       	adiw	r24, 0x3e	; 62
    d5d0:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d5d4:	81 11       	cpse	r24, r1
    d5d6:	03 c0       	rjmp	.+6      	; 0xd5de <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    d5d8:	80 e8       	ldi	r24, 0x80	; 128
    d5da:	90 e0       	ldi	r25, 0x00	; 0
    d5dc:	24 c0       	rjmp	.+72     	; 0xd626 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    d5de:	c7 fe       	sbrs	r12, 7
    d5e0:	29 c0       	rjmp	.+82     	; 0xd634 <crash_and_turn+0x162>
    d5e2:	8e 2d       	mov	r24, r14
    d5e4:	99 27       	eor	r25, r25
    d5e6:	87 fd       	sbrc	r24, 7
    d5e8:	90 95       	com	r25
    d5ea:	01 97       	sbiw	r24, 0x01	; 1
    d5ec:	2e e1       	ldi	r18, 0x1E	; 30
    d5ee:	28 9f       	mul	r18, r24
    d5f0:	50 01       	movw	r10, r0
    d5f2:	29 9f       	mul	r18, r25
    d5f4:	b0 0c       	add	r11, r0
    d5f6:	11 24       	eor	r1, r1
    d5f8:	af 0c       	add	r10, r15
    d5fa:	b1 1c       	adc	r11, r1
    d5fc:	f7 fc       	sbrc	r15, 7
    d5fe:	ba 94       	dec	r11
    d600:	c5 01       	movw	r24, r10
    d602:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d606:	81 11       	cpse	r24, r1
    d608:	15 c0       	rjmp	.+42     	; 0xd634 <crash_and_turn+0x162>
    d60a:	c5 01       	movw	r24, r10
    d60c:	01 96       	adiw	r24, 0x01	; 1
    d60e:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d612:	81 11       	cpse	r24, r1
    d614:	0f c0       	rjmp	.+30     	; 0xd634 <crash_and_turn+0x162>
    d616:	c5 01       	movw	r24, r10
    d618:	02 96       	adiw	r24, 0x02	; 2
    d61a:	0e 94 ae 56 	call	0xad5c	; 0xad5c <solid_tile>
    d61e:	81 11       	cpse	r24, r1
    d620:	09 c0       	rjmp	.+18     	; 0xd634 <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    d622:	80 e1       	ldi	r24, 0x10	; 16
    d624:	90 e0       	ldi	r25, 0x00	; 0
    d626:	f8 01       	movw	r30, r16
    d628:	95 83       	std	Z+5, r25	; 0x05
    d62a:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    d62c:	ce 01       	movw	r24, r28
    d62e:	0e 94 f6 55 	call	0xabec	; 0xabec <recoil_sprite>
			recoiled = 0;
    d632:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    d634:	f8 01       	movw	r30, r16
    d636:	24 81       	ldd	r18, Z+4	; 0x04
    d638:	35 81       	ldd	r19, Z+5	; 0x05
    d63a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d63c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    d63e:	82 23       	and	r24, r18
    d640:	93 23       	and	r25, r19
    d642:	89 2b       	or	r24, r25
    d644:	11 f0       	breq	.+4      	; 0xd64a <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    d646:	1a 8e       	std	Y+26, r1	; 0x1a
    d648:	1c c0       	rjmp	.+56     	; 0xd682 <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    d64a:	dd 20       	and	r13, r13
    d64c:	d1 f0       	breq	.+52     	; 0xd682 <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    d64e:	f8 01       	movw	r30, r16
    d650:	84 81       	ldd	r24, Z+4	; 0x04
    d652:	86 ff       	sbrs	r24, 6
    d654:	03 c0       	rjmp	.+6      	; 0xd65c <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    d656:	80 e1       	ldi	r24, 0x10	; 16
    d658:	90 e0       	ldi	r25, 0x00	; 0
    d65a:	0f c0       	rjmp	.+30     	; 0xd67a <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    d65c:	84 ff       	sbrs	r24, 4
    d65e:	03 c0       	rjmp	.+6      	; 0xd666 <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    d660:	80 e8       	ldi	r24, 0x80	; 128
    d662:	90 e0       	ldi	r25, 0x00	; 0
    d664:	09 c0       	rjmp	.+18     	; 0xd678 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    d666:	87 ff       	sbrs	r24, 7
    d668:	03 c0       	rjmp	.+6      	; 0xd670 <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    d66a:	80 e2       	ldi	r24, 0x20	; 32
    d66c:	90 e0       	ldi	r25, 0x00	; 0
    d66e:	04 c0       	rjmp	.+8      	; 0xd678 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    d670:	85 ff       	sbrs	r24, 5
    d672:	07 c0       	rjmp	.+14     	; 0xd682 <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    d674:	80 e4       	ldi	r24, 0x40	; 64
    d676:	90 e0       	ldi	r25, 0x00	; 0
    d678:	f8 01       	movw	r30, r16
    d67a:	95 83       	std	Z+5, r25	; 0x05
    d67c:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    d67e:	81 e0       	ldi	r24, 0x01	; 1
    d680:	8a 8f       	std	Y+26, r24	; 0x1a
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    d682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d684:	9e 8d       	ldd	r25, Y+30	; 0x1e
    d686:	80 31       	cpi	r24, 0x10	; 16
    d688:	91 05       	cpc	r25, r1
    d68a:	19 f0       	breq	.+6      	; 0xd692 <crash_and_turn+0x1c0>
    d68c:	80 32       	cpi	r24, 0x20	; 32
    d68e:	91 05       	cpc	r25, r1
    d690:	19 f4       	brne	.+6      	; 0xd698 <crash_and_turn+0x1c6>
    d692:	2b a1       	ldd	r18, Y+35	; 0x23
    d694:	e2 16       	cp	r14, r18
    d696:	59 f0       	breq	.+22     	; 0xd6ae <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    d698:	80 34       	cpi	r24, 0x40	; 64
    d69a:	91 05       	cpc	r25, r1
    d69c:	19 f0       	breq	.+6      	; 0xd6a4 <crash_and_turn+0x1d2>
    d69e:	80 38       	cpi	r24, 0x80	; 128
    d6a0:	91 05       	cpc	r25, r1
    d6a2:	39 f4       	brne	.+14     	; 0xd6b2 <crash_and_turn+0x1e0>
    d6a4:	81 e0       	ldi	r24, 0x01	; 1
    d6a6:	9b a1       	ldd	r25, Y+35	; 0x23
    d6a8:	f9 12       	cpse	r15, r25
    d6aa:	03 c0       	rjmp	.+6      	; 0xd6b2 <crash_and_turn+0x1e0>
    d6ac:	03 c0       	rjmp	.+6      	; 0xd6b4 <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    d6ae:	81 e0       	ldi	r24, 0x01	; 1
    d6b0:	01 c0       	rjmp	.+2      	; 0xd6b4 <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    d6b2:	80 e0       	ldi	r24, 0x00	; 0
}
    d6b4:	df 91       	pop	r29
    d6b6:	cf 91       	pop	r28
    d6b8:	1f 91       	pop	r17
    d6ba:	0f 91       	pop	r16
    d6bc:	ff 90       	pop	r15
    d6be:	ef 90       	pop	r14
    d6c0:	df 90       	pop	r13
    d6c2:	cf 90       	pop	r12
    d6c4:	bf 90       	pop	r11
    d6c6:	af 90       	pop	r10
    d6c8:	9f 90       	pop	r9
    d6ca:	8f 90       	pop	r8
    d6cc:	08 95       	ret

0000d6ce <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    d6ce:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    d6d0:	26 2f       	mov	r18, r22
    d6d2:	33 27       	eor	r19, r19
    d6d4:	27 fd       	sbrc	r18, 7
    d6d6:	30 95       	com	r19
    d6d8:	37 ff       	sbrs	r19, 7
    d6da:	03 c0       	rjmp	.+6      	; 0xd6e2 <get_cpu_goal_direction+0x14>
    d6dc:	31 95       	neg	r19
    d6de:	21 95       	neg	r18
    d6e0:	31 09       	sbc	r19, r1
    d6e2:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    d6e4:	24 2f       	mov	r18, r20
    d6e6:	33 27       	eor	r19, r19
    d6e8:	27 fd       	sbrc	r18, 7
    d6ea:	30 95       	com	r19
    d6ec:	37 ff       	sbrs	r19, 7
    d6ee:	03 c0       	rjmp	.+6      	; 0xd6f6 <get_cpu_goal_direction+0x28>
    d6f0:	31 95       	neg	r19
    d6f2:	21 95       	neg	r18
    d6f4:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    d6f6:	83 8d       	ldd	r24, Z+27	; 0x1b
    d6f8:	81 11       	cpse	r24, r1
    d6fa:	08 c0       	rjmp	.+16     	; 0xd70c <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    d6fc:	29 17       	cp	r18, r25
    d6fe:	1c f4       	brge	.+6      	; 0xd706 <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    d700:	16 16       	cp	r1, r22
    d702:	94 f0       	brlt	.+36     	; 0xd728 <get_cpu_goal_direction+0x5a>
    d704:	0b c0       	rjmp	.+22     	; 0xd71c <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    d706:	14 16       	cp	r1, r20
    d708:	94 f0       	brlt	.+36     	; 0xd72e <get_cpu_goal_direction+0x60>
    d70a:	0b c0       	rjmp	.+22     	; 0xd722 <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    d70c:	29 17       	cp	r18, r25
    d70e:	1c f4       	brge	.+6      	; 0xd716 <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    d710:	16 16       	cp	r1, r22
    d712:	24 f0       	brlt	.+8      	; 0xd71c <get_cpu_goal_direction+0x4e>
    d714:	09 c0       	rjmp	.+18     	; 0xd728 <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    d716:	14 16       	cp	r1, r20
    d718:	24 f0       	brlt	.+8      	; 0xd722 <get_cpu_goal_direction+0x54>
    d71a:	09 c0       	rjmp	.+18     	; 0xd72e <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    d71c:	80 e4       	ldi	r24, 0x40	; 64
    d71e:	90 e0       	ldi	r25, 0x00	; 0
    d720:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    d722:	80 e1       	ldi	r24, 0x10	; 16
    d724:	90 e0       	ldi	r25, 0x00	; 0
    d726:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    d728:	80 e8       	ldi	r24, 0x80	; 128
    d72a:	90 e0       	ldi	r25, 0x00	; 0
    d72c:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    d72e:	80 e2       	ldi	r24, 0x20	; 32
    d730:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    d732:	08 95       	ret

0000d734 <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    d734:	2f 92       	push	r2
    d736:	3f 92       	push	r3
    d738:	4f 92       	push	r4
    d73a:	5f 92       	push	r5
    d73c:	7f 92       	push	r7
    d73e:	8f 92       	push	r8
    d740:	9f 92       	push	r9
    d742:	af 92       	push	r10
    d744:	bf 92       	push	r11
    d746:	cf 92       	push	r12
    d748:	df 92       	push	r13
    d74a:	ef 92       	push	r14
    d74c:	ff 92       	push	r15
    d74e:	0f 93       	push	r16
    d750:	1f 93       	push	r17
    d752:	cf 93       	push	r28
    d754:	df 93       	push	r29
    d756:	cd b7       	in	r28, 0x3d	; 61
    d758:	de b7       	in	r29, 0x3e	; 62
    d75a:	2a 97       	sbiw	r28, 0x0a	; 10
    d75c:	0f b6       	in	r0, 0x3f	; 63
    d75e:	f8 94       	cli
    d760:	de bf       	out	0x3e, r29	; 62
    d762:	0f be       	out	0x3f, r0	; 63
    d764:	cd bf       	out	0x3d, r28	; 61
    d766:	9c 01       	movw	r18, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    d768:	db 01       	movw	r26, r22
    d76a:	13 96       	adiw	r26, 0x03	; 3
    d76c:	8d 91       	ld	r24, X+
    d76e:	9d 91       	ld	r25, X+
    d770:	0d 90       	ld	r0, X+
    d772:	bc 91       	ld	r27, X
    d774:	a0 2d       	mov	r26, r0
    d776:	89 83       	std	Y+1, r24	; 0x01
    d778:	9a 83       	std	Y+2, r25	; 0x02
    d77a:	ab 83       	std	Y+3, r26	; 0x03
    d77c:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    d77e:	fb 01       	movw	r30, r22
    d780:	87 80       	ldd	r8, Z+7	; 0x07
    d782:	90 84       	ldd	r9, Z+8	; 0x08
    d784:	a1 84       	ldd	r10, Z+9	; 0x09
    d786:	b2 84       	ldd	r11, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    d788:	d9 01       	movw	r26, r18
    d78a:	13 96       	adiw	r26, 0x03	; 3
    d78c:	cd 90       	ld	r12, X+
    d78e:	dd 90       	ld	r13, X+
    d790:	ed 90       	ld	r14, X+
    d792:	fc 90       	ld	r15, X
    d794:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    d796:	17 96       	adiw	r26, 0x07	; 7
    d798:	8d 91       	ld	r24, X+
    d79a:	9d 91       	ld	r25, X+
    d79c:	0d 90       	ld	r0, X+
    d79e:	bc 91       	ld	r27, X
    d7a0:	a0 2d       	mov	r26, r0
    d7a2:	8d 83       	std	Y+5, r24	; 0x05
    d7a4:	9e 83       	std	Y+6, r25	; 0x06
    d7a6:	af 83       	std	Y+7, r26	; 0x07
    d7a8:	b8 87       	std	Y+8, r27	; 0x08
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    d7aa:	f9 01       	movw	r30, r18
    d7ac:	86 89       	ldd	r24, Z+22	; 0x16
    d7ae:	81 11       	cpse	r24, r1
    d7b0:	06 c0       	rjmp	.+12     	; 0xd7be <get_cpu_joypad_state+0x8a>
	{
		p->held = 0;
    d7b2:	da 01       	movw	r26, r20
    d7b4:	15 96       	adiw	r26, 0x05	; 5
    d7b6:	1c 92       	st	X, r1
    d7b8:	1e 92       	st	-X, r1
    d7ba:	14 97       	sbiw	r26, 0x04	; 4
		return;
    d7bc:	57 c2       	rjmp	.+1198   	; 0xdc6c <get_cpu_joypad_state+0x538>
    d7be:	2a 01       	movw	r4, r20
    d7c0:	1b 01       	movw	r2, r22
    d7c2:	3a 87       	std	Y+10, r19	; 0x0a
    d7c4:	29 87       	std	Y+9, r18	; 0x09
	}
	
	// Shot
	if (shoot_pressed(p))
    d7c6:	ca 01       	movw	r24, r20
    d7c8:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <shoot_pressed>
    d7cc:	88 23       	and	r24, r24
    d7ce:	19 f0       	breq	.+6      	; 0xd7d6 <get_cpu_joypad_state+0xa2>
	{
		p->pressed = 0;
    d7d0:	f2 01       	movw	r30, r4
    d7d2:	11 82       	std	Z+1, r1	; 0x01
    d7d4:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    d7d6:	20 91 01 01 	lds	r18, 0x0101
    d7da:	30 91 02 01 	lds	r19, 0x0102
    d7de:	c9 01       	movw	r24, r18
    d7e0:	6a e0       	ldi	r22, 0x0A	; 10
    d7e2:	70 e0       	ldi	r23, 0x00	; 0
    d7e4:	0e 94 47 6f 	call	0xde8e	; 0xde8e <__udivmodhi4>
    d7e8:	89 2b       	or	r24, r25
    d7ea:	59 f4       	brne	.+22     	; 0xd802 <get_cpu_joypad_state+0xce>
    d7ec:	a9 85       	ldd	r26, Y+9	; 0x09
    d7ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    d7f0:	56 96       	adiw	r26, 0x16	; 22
    d7f2:	8c 91       	ld	r24, X
    d7f4:	83 33       	cpi	r24, 0x33	; 51
    d7f6:	28 f0       	brcs	.+10     	; 0xd802 <get_cpu_joypad_state+0xce>
	{
		p->pressed = BTN_B;
    d7f8:	81 e0       	ldi	r24, 0x01	; 1
    d7fa:	90 e0       	ldi	r25, 0x00	; 0
    d7fc:	f2 01       	movw	r30, r4
    d7fe:	91 83       	std	Z+1, r25	; 0x01
    d800:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    d802:	c9 01       	movw	r24, r18
    d804:	64 eb       	ldi	r22, 0xB4	; 180
    d806:	70 e0       	ldi	r23, 0x00	; 0
    d808:	0e 94 47 6f 	call	0xde8e	; 0xde8e <__udivmodhi4>
    d80c:	89 2b       	or	r24, r25
    d80e:	61 f0       	breq	.+24     	; 0xd828 <get_cpu_joypad_state+0xf4>
    d810:	a9 85       	ldd	r26, Y+9	; 0x09
    d812:	ba 85       	ldd	r27, Y+10	; 0x0a
    d814:	56 96       	adiw	r26, 0x16	; 22
    d816:	8c 91       	ld	r24, X
    d818:	56 97       	sbiw	r26, 0x16	; 22
    d81a:	8a 30       	cpi	r24, 0x0A	; 10
    d81c:	29 f0       	breq	.+10     	; 0xd828 <get_cpu_joypad_state+0xf4>
    d81e:	94 96       	adiw	r26, 0x24	; 36
    d820:	8c 91       	ld	r24, X
    d822:	88 23       	and	r24, r24
    d824:	09 f4       	brne	.+2      	; 0xd828 <get_cpu_joypad_state+0xf4>
    d826:	7e c0       	rjmp	.+252    	; 0xd924 <get_cpu_joypad_state+0x1f0>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    d828:	20 e0       	ldi	r18, 0x00	; 0
    d82a:	30 e0       	ldi	r19, 0x00	; 0
    d82c:	40 e0       	ldi	r20, 0x00	; 0
    d82e:	5e e3       	ldi	r21, 0x3E	; 62
    d830:	69 81       	ldd	r22, Y+1	; 0x01
    d832:	7a 81       	ldd	r23, Y+2	; 0x02
    d834:	8b 81       	ldd	r24, Y+3	; 0x03
    d836:	9c 81       	ldd	r25, Y+4	; 0x04
    d838:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    d83c:	0e 94 40 70 	call	0xe080	; 0xe080 <__fixsfsi>
    d840:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    d842:	20 e0       	ldi	r18, 0x00	; 0
    d844:	30 e0       	ldi	r19, 0x00	; 0
    d846:	40 e0       	ldi	r20, 0x00	; 0
    d848:	5e e3       	ldi	r21, 0x3E	; 62
    d84a:	c5 01       	movw	r24, r10
    d84c:	b4 01       	movw	r22, r8
    d84e:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    d852:	20 e0       	ldi	r18, 0x00	; 0
    d854:	30 e0       	ldi	r19, 0x00	; 0
    d856:	40 e4       	ldi	r20, 0x40	; 64
    d858:	50 e4       	ldi	r21, 0x40	; 64
    d85a:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    d85e:	0e 94 40 70 	call	0xe080	; 0xe080 <__fixsfsi>
    d862:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    d864:	20 e0       	ldi	r18, 0x00	; 0
    d866:	30 e0       	ldi	r19, 0x00	; 0
    d868:	40 e0       	ldi	r20, 0x00	; 0
    d86a:	5e e3       	ldi	r21, 0x3E	; 62
    d86c:	c7 01       	movw	r24, r14
    d86e:	b6 01       	movw	r22, r12
    d870:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    d874:	0e 94 40 70 	call	0xe080	; 0xe080 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    d878:	f7 2c       	mov	r15, r7
    d87a:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    d87c:	20 e0       	ldi	r18, 0x00	; 0
    d87e:	30 e0       	ldi	r19, 0x00	; 0
    d880:	40 e0       	ldi	r20, 0x00	; 0
    d882:	5e e3       	ldi	r21, 0x3E	; 62
    d884:	6d 81       	ldd	r22, Y+5	; 0x05
    d886:	7e 81       	ldd	r23, Y+6	; 0x06
    d888:	8f 81       	ldd	r24, Y+7	; 0x07
    d88a:	98 85       	ldd	r25, Y+8	; 0x08
    d88c:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    d890:	20 e0       	ldi	r18, 0x00	; 0
    d892:	30 e0       	ldi	r19, 0x00	; 0
    d894:	40 e4       	ldi	r20, 0x40	; 64
    d896:	50 e4       	ldi	r21, 0x40	; 64
    d898:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    d89c:	0e 94 40 70 	call	0xe080	; 0xe080 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    d8a0:	4b 2d       	mov	r20, r11
    d8a2:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    d8a4:	e9 85       	ldd	r30, Y+9	; 0x09
    d8a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    d8a8:	14 a2       	std	Z+36, r1	; 0x24
		player->feeling_my_way = 0;
    d8aa:	12 8e       	std	Z+26, r1	; 0x1a
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    d8ac:	82 e0       	ldi	r24, 0x02	; 2
    d8ae:	8f 0d       	add	r24, r15
    d8b0:	85 30       	cpi	r24, 0x05	; 5
    d8b2:	c8 f4       	brcc	.+50     	; 0xd8e6 <get_cpu_joypad_state+0x1b2>
    d8b4:	4e 3f       	cpi	r20, 0xFE	; 254
    d8b6:	bc f0       	brlt	.+46     	; 0xd8e6 <get_cpu_joypad_state+0x1b2>
    d8b8:	43 30       	cpi	r20, 0x03	; 3
    d8ba:	ac f4       	brge	.+42     	; 0xd8e6 <get_cpu_joypad_state+0x1b2>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    d8bc:	64 e0       	ldi	r22, 0x04	; 4
    d8be:	80 e0       	ldi	r24, 0x00	; 0
    d8c0:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBRandom>
    d8c4:	90 e0       	ldi	r25, 0x00	; 0
    d8c6:	0e 94 53 6a 	call	0xd4a6	; 0xd4a6 <button_map>
    d8ca:	a9 85       	ldd	r26, Y+9	; 0x09
    d8cc:	ba 85       	ldd	r27, Y+10	; 0x0a
    d8ce:	5e 96       	adiw	r26, 0x1e	; 30
    d8d0:	9c 93       	st	X, r25
    d8d2:	8e 93       	st	-X, r24
    d8d4:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = LBRandom(5, 18);
    d8d6:	62 e1       	ldi	r22, 0x12	; 18
    d8d8:	85 e0       	ldi	r24, 0x05	; 5
    d8da:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBRandom>
    d8de:	e9 85       	ldd	r30, Y+9	; 0x09
    d8e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    d8e2:	83 a3       	std	Z+35, r24	; 0x23
    d8e4:	16 c0       	rjmp	.+44     	; 0xd912 <get_cpu_joypad_state+0x1de>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    d8e6:	6f 2d       	mov	r22, r15
    d8e8:	89 85       	ldd	r24, Y+9	; 0x09
    d8ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    d8ec:	0e 94 67 6b 	call	0xd6ce	; 0xd6ce <get_cpu_goal_direction>
    d8f0:	a9 85       	ldd	r26, Y+9	; 0x09
    d8f2:	ba 85       	ldd	r27, Y+10	; 0x0a
    d8f4:	5e 96       	adiw	r26, 0x1e	; 30
    d8f6:	9c 93       	st	X, r25
    d8f8:	8e 93       	st	-X, r24
    d8fa:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    d8fc:	80 31       	cpi	r24, 0x10	; 16
    d8fe:	91 05       	cpc	r25, r1
    d900:	29 f0       	breq	.+10     	; 0xd90c <get_cpu_joypad_state+0x1d8>
    d902:	80 97       	sbiw	r24, 0x20	; 32
    d904:	19 f0       	breq	.+6      	; 0xd90c <get_cpu_joypad_state+0x1d8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
    d906:	93 96       	adiw	r26, 0x23	; 35
    d908:	7c 92       	st	X, r7
    d90a:	03 c0       	rjmp	.+6      	; 0xd912 <get_cpu_joypad_state+0x1de>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    d90c:	e9 85       	ldd	r30, Y+9	; 0x09
    d90e:	fa 85       	ldd	r31, Y+10	; 0x0a
    d910:	b3 a2       	std	Z+35, r11	; 0x23
		}
		p->held = player->goal_direction;
    d912:	a9 85       	ldd	r26, Y+9	; 0x09
    d914:	ba 85       	ldd	r27, Y+10	; 0x0a
    d916:	5d 96       	adiw	r26, 0x1d	; 29
    d918:	8d 91       	ld	r24, X+
    d91a:	9c 91       	ld	r25, X
    d91c:	5e 97       	sbiw	r26, 0x1e	; 30
    d91e:	f2 01       	movw	r30, r4
    d920:	95 83       	std	Z+5, r25	; 0x05
    d922:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    d924:	a9 85       	ldd	r26, Y+9	; 0x09
    d926:	ba 85       	ldd	r27, Y+10	; 0x0a
    d928:	13 96       	adiw	r26, 0x03	; 3
    d92a:	cd 90       	ld	r12, X+
    d92c:	dd 90       	ld	r13, X+
    d92e:	ed 90       	ld	r14, X+
    d930:	fc 90       	ld	r15, X
    d932:	16 97       	sbiw	r26, 0x06	; 6
    d934:	95 96       	adiw	r26, 0x25	; 37
    d936:	2d 91       	ld	r18, X+
    d938:	3d 91       	ld	r19, X+
    d93a:	4d 91       	ld	r20, X+
    d93c:	5c 91       	ld	r21, X
    d93e:	98 97       	sbiw	r26, 0x28	; 40
    d940:	c7 01       	movw	r24, r14
    d942:	b6 01       	movw	r22, r12
    d944:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    d948:	88 23       	and	r24, r24
    d94a:	29 f0       	breq	.+10     	; 0xd956 <get_cpu_joypad_state+0x222>
		player->deadlock_count_x = 0;
    d94c:	e9 85       	ldd	r30, Y+9	; 0x09
    d94e:	fa 85       	ldd	r31, Y+10	; 0x0a
    d950:	10 a2       	std	Z+32, r1	; 0x20
    d952:	17 8e       	std	Z+31, r1	; 0x1f
    d954:	0b c0       	rjmp	.+22     	; 0xd96c <get_cpu_joypad_state+0x238>
	else 
		player->deadlock_count_x++;
    d956:	a9 85       	ldd	r26, Y+9	; 0x09
    d958:	ba 85       	ldd	r27, Y+10	; 0x0a
    d95a:	5f 96       	adiw	r26, 0x1f	; 31
    d95c:	8d 91       	ld	r24, X+
    d95e:	9c 91       	ld	r25, X
    d960:	90 97       	sbiw	r26, 0x20	; 32
    d962:	01 96       	adiw	r24, 0x01	; 1
    d964:	90 96       	adiw	r26, 0x20	; 32
    d966:	9c 93       	st	X, r25
    d968:	8e 93       	st	-X, r24
    d96a:	5f 97       	sbiw	r26, 0x1f	; 31
	if (player->shared.y != player->old_y)
    d96c:	e9 85       	ldd	r30, Y+9	; 0x09
    d96e:	fa 85       	ldd	r31, Y+10	; 0x0a
    d970:	87 80       	ldd	r8, Z+7	; 0x07
    d972:	90 84       	ldd	r9, Z+8	; 0x08
    d974:	a1 84       	ldd	r10, Z+9	; 0x09
    d976:	b2 84       	ldd	r11, Z+10	; 0x0a
    d978:	21 a5       	ldd	r18, Z+41	; 0x29
    d97a:	32 a5       	ldd	r19, Z+42	; 0x2a
    d97c:	43 a5       	ldd	r20, Z+43	; 0x2b
    d97e:	54 a5       	ldd	r21, Z+44	; 0x2c
    d980:	c5 01       	movw	r24, r10
    d982:	b4 01       	movw	r22, r8
    d984:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    d988:	88 23       	and	r24, r24
    d98a:	39 f0       	breq	.+14     	; 0xd99a <get_cpu_joypad_state+0x266>
		player->deadlock_count_y = 0;
    d98c:	a9 85       	ldd	r26, Y+9	; 0x09
    d98e:	ba 85       	ldd	r27, Y+10	; 0x0a
    d990:	92 96       	adiw	r26, 0x22	; 34
    d992:	1c 92       	st	X, r1
    d994:	1e 92       	st	-X, r1
    d996:	91 97       	sbiw	r26, 0x21	; 33
    d998:	07 c0       	rjmp	.+14     	; 0xd9a8 <get_cpu_joypad_state+0x274>
	else
		player->deadlock_count_y++;
    d99a:	e9 85       	ldd	r30, Y+9	; 0x09
    d99c:	fa 85       	ldd	r31, Y+10	; 0x0a
    d99e:	81 a1       	ldd	r24, Z+33	; 0x21
    d9a0:	92 a1       	ldd	r25, Z+34	; 0x22
    d9a2:	01 96       	adiw	r24, 0x01	; 1
    d9a4:	92 a3       	std	Z+34, r25	; 0x22
    d9a6:	81 a3       	std	Z+33, r24	; 0x21
	player->old_x = player->shared.x;
    d9a8:	a9 85       	ldd	r26, Y+9	; 0x09
    d9aa:	ba 85       	ldd	r27, Y+10	; 0x0a
    d9ac:	95 96       	adiw	r26, 0x25	; 37
    d9ae:	cd 92       	st	X+, r12
    d9b0:	dd 92       	st	X+, r13
    d9b2:	ed 92       	st	X+, r14
    d9b4:	fc 92       	st	X, r15
    d9b6:	98 97       	sbiw	r26, 0x28	; 40
	player->old_y = player->shared.y;
    d9b8:	fd 01       	movw	r30, r26
    d9ba:	81 a6       	std	Z+41, r8	; 0x29
    d9bc:	92 a6       	std	Z+42, r9	; 0x2a
    d9be:	a3 a6       	std	Z+43, r10	; 0x2b
    d9c0:	b4 a6       	std	Z+44, r11	; 0x2c
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    d9c2:	87 8d       	ldd	r24, Z+31	; 0x1f
    d9c4:	90 a1       	ldd	r25, Z+32	; 0x20
    d9c6:	80 34       	cpi	r24, 0x40	; 64
    d9c8:	91 40       	sbci	r25, 0x01	; 1
    d9ca:	88 f0       	brcs	.+34     	; 0xd9ee <get_cpu_joypad_state+0x2ba>
	{
		p->held = button_map(LBRandom(2, 4));
    d9cc:	64 e0       	ldi	r22, 0x04	; 4
    d9ce:	82 e0       	ldi	r24, 0x02	; 2
    d9d0:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBRandom>
    d9d4:	90 e0       	ldi	r25, 0x00	; 0
    d9d6:	0e 94 53 6a 	call	0xd4a6	; 0xd4a6 <button_map>
    d9da:	d2 01       	movw	r26, r4
    d9dc:	15 96       	adiw	r26, 0x05	; 5
    d9de:	9c 93       	st	X, r25
    d9e0:	8e 93       	st	-X, r24
    d9e2:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    d9e4:	e9 85       	ldd	r30, Y+9	; 0x09
    d9e6:	fa 85       	ldd	r31, Y+10	; 0x0a
    d9e8:	10 a2       	std	Z+32, r1	; 0x20
    d9ea:	17 8e       	std	Z+31, r1	; 0x1f
    d9ec:	42 c0       	rjmp	.+132    	; 0xda72 <get_cpu_joypad_state+0x33e>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    d9ee:	a9 85       	ldd	r26, Y+9	; 0x09
    d9f0:	ba 85       	ldd	r27, Y+10	; 0x0a
    d9f2:	91 96       	adiw	r26, 0x21	; 33
    d9f4:	8d 91       	ld	r24, X+
    d9f6:	9c 91       	ld	r25, X
    d9f8:	92 97       	sbiw	r26, 0x22	; 34
    d9fa:	80 34       	cpi	r24, 0x40	; 64
    d9fc:	91 40       	sbci	r25, 0x01	; 1
    d9fe:	88 f0       	brcs	.+34     	; 0xda22 <get_cpu_joypad_state+0x2ee>
	{
		p->held = button_map(LBRandom(0, 2));
    da00:	62 e0       	ldi	r22, 0x02	; 2
    da02:	80 e0       	ldi	r24, 0x00	; 0
    da04:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBRandom>
    da08:	90 e0       	ldi	r25, 0x00	; 0
    da0a:	0e 94 53 6a 	call	0xd4a6	; 0xd4a6 <button_map>
    da0e:	f2 01       	movw	r30, r4
    da10:	95 83       	std	Z+5, r25	; 0x05
    da12:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    da14:	a9 85       	ldd	r26, Y+9	; 0x09
    da16:	ba 85       	ldd	r27, Y+10	; 0x0a
    da18:	92 96       	adiw	r26, 0x22	; 34
    da1a:	1c 92       	st	X, r1
    da1c:	1e 92       	st	-X, r1
    da1e:	91 97       	sbiw	r26, 0x21	; 33
    da20:	28 c0       	rjmp	.+80     	; 0xda72 <get_cpu_joypad_state+0x33e>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    da22:	20 e0       	ldi	r18, 0x00	; 0
    da24:	30 e0       	ldi	r19, 0x00	; 0
    da26:	40 e0       	ldi	r20, 0x00	; 0
    da28:	5e e3       	ldi	r21, 0x3E	; 62
    da2a:	c5 01       	movw	r24, r10
    da2c:	b4 01       	movw	r22, r8
    da2e:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    da32:	20 e0       	ldi	r18, 0x00	; 0
    da34:	30 e0       	ldi	r19, 0x00	; 0
    da36:	40 e4       	ldi	r20, 0x40	; 64
    da38:	50 e4       	ldi	r21, 0x40	; 64
    da3a:	0e 94 6f 6f 	call	0xdede	; 0xdede <__subsf3>
    da3e:	0e 94 40 70 	call	0xe080	; 0xe080 <__fixsfsi>
    da42:	b6 2e       	mov	r11, r22
    da44:	20 e0       	ldi	r18, 0x00	; 0
    da46:	30 e0       	ldi	r19, 0x00	; 0
    da48:	40 e0       	ldi	r20, 0x00	; 0
    da4a:	5e e3       	ldi	r21, 0x3E	; 62
    da4c:	c7 01       	movw	r24, r14
    da4e:	b6 01       	movw	r22, r12
    da50:	0e 94 27 71 	call	0xe24e	; 0xe24e <__mulsf3>
    da54:	0e 94 40 70 	call	0xe080	; 0xe080 <__fixsfsi>
    da58:	86 2f       	mov	r24, r22
    da5a:	82 01       	movw	r16, r4
    da5c:	29 85       	ldd	r18, Y+9	; 0x09
    da5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    da60:	f9 01       	movw	r30, r18
    da62:	42 81       	ldd	r20, Z+2	; 0x02
    da64:	6b 2d       	mov	r22, r11
    da66:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <crash_and_turn>
    da6a:	a9 85       	ldd	r26, Y+9	; 0x09
    da6c:	ba 85       	ldd	r27, Y+10	; 0x0a
    da6e:	94 96       	adiw	r26, 0x24	; 36
    da70:	8c 93       	st	X, r24
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    da72:	e9 85       	ldd	r30, Y+9	; 0x09
    da74:	fa 85       	ldd	r31, Y+10	; 0x0a
    da76:	84 8d       	ldd	r24, Z+28	; 0x1c
    da78:	81 30       	cpi	r24, 0x01	; 1
    da7a:	09 f0       	breq	.+2      	; 0xda7e <get_cpu_joypad_state+0x34a>
    da7c:	f7 c0       	rjmp	.+494    	; 0xdc6c <get_cpu_joypad_state+0x538>
    da7e:	d1 01       	movw	r26, r2
    da80:	52 96       	adiw	r26, 0x12	; 18
    da82:	9c 91       	ld	r25, X
    da84:	52 97       	sbiw	r26, 0x12	; 18
    da86:	51 96       	adiw	r26, 0x11	; 17
    da88:	8c 91       	ld	r24, X
    da8a:	51 97       	sbiw	r26, 0x11	; 17
    da8c:	98 17       	cp	r25, r24
    da8e:	08 f0       	brcs	.+2      	; 0xda92 <get_cpu_joypad_state+0x35e>
    da90:	ed c0       	rjmp	.+474    	; 0xdc6c <get_cpu_joypad_state+0x538>
	{
		if (other_player->shared.y < player->shared.y && other_player->shared.x < player->shared.x)
    da92:	17 96       	adiw	r26, 0x07	; 7
    da94:	cd 90       	ld	r12, X+
    da96:	dd 90       	ld	r13, X+
    da98:	ed 90       	ld	r14, X+
    da9a:	fc 90       	ld	r15, X
    da9c:	1a 97       	sbiw	r26, 0x0a	; 10
    da9e:	87 80       	ldd	r8, Z+7	; 0x07
    daa0:	90 84       	ldd	r9, Z+8	; 0x08
    daa2:	a1 84       	ldd	r10, Z+9	; 0x09
    daa4:	b2 84       	ldd	r11, Z+10	; 0x0a
    daa6:	a5 01       	movw	r20, r10
    daa8:	94 01       	movw	r18, r8
    daaa:	c7 01       	movw	r24, r14
    daac:	b6 01       	movw	r22, r12
    daae:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    dab2:	87 ff       	sbrs	r24, 7
    dab4:	64 c0       	rjmp	.+200    	; 0xdb7e <get_cpu_joypad_state+0x44a>
    dab6:	e9 85       	ldd	r30, Y+9	; 0x09
    dab8:	fa 85       	ldd	r31, Y+10	; 0x0a
    daba:	23 81       	ldd	r18, Z+3	; 0x03
    dabc:	34 81       	ldd	r19, Z+4	; 0x04
    dabe:	45 81       	ldd	r20, Z+5	; 0x05
    dac0:	56 81       	ldd	r21, Z+6	; 0x06
    dac2:	d1 01       	movw	r26, r2
    dac4:	13 96       	adiw	r26, 0x03	; 3
    dac6:	6d 91       	ld	r22, X+
    dac8:	7d 91       	ld	r23, X+
    daca:	8d 91       	ld	r24, X+
    dacc:	9c 91       	ld	r25, X
    dace:	16 97       	sbiw	r26, 0x06	; 6
    dad0:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    dad4:	87 ff       	sbrs	r24, 7
    dad6:	27 c0       	rjmp	.+78     	; 0xdb26 <get_cpu_joypad_state+0x3f2>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_LEFT)
    dad8:	f1 01       	movw	r30, r2
    dada:	80 81       	ld	r24, Z
    dadc:	82 30       	cpi	r24, 0x02	; 2
    dade:	79 f4       	brne	.+30     	; 0xdafe <get_cpu_joypad_state+0x3ca>
    dae0:	a9 85       	ldd	r26, Y+9	; 0x09
    dae2:	ba 85       	ldd	r27, Y+10	; 0x0a
    dae4:	8c 91       	ld	r24, X
    dae6:	83 30       	cpi	r24, 0x03	; 3
    dae8:	51 f4       	brne	.+20     	; 0xdafe <get_cpu_joypad_state+0x3ca>
			{
				p->held = BTN_RIGHT;
    daea:	80 e8       	ldi	r24, 0x80	; 128
    daec:	90 e0       	ldi	r25, 0x00	; 0
    daee:	f2 01       	movw	r30, r4
    daf0:	95 83       	std	Z+5, r25	; 0x05
    daf2:	84 83       	std	Z+4, r24	; 0x04
				player->goal_reached = 0;
    daf4:	94 96       	adiw	r26, 0x24	; 36
    daf6:	1c 92       	st	X, r1
    daf8:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    dafa:	5a 96       	adiw	r26, 0x1a	; 26
    dafc:	1c 92       	st	X, r1
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_UP)
    dafe:	d1 01       	movw	r26, r2
    db00:	8c 91       	ld	r24, X
    db02:	81 30       	cpi	r24, 0x01	; 1
    db04:	09 f0       	breq	.+2      	; 0xdb08 <get_cpu_joypad_state+0x3d4>
    db06:	b2 c0       	rjmp	.+356    	; 0xdc6c <get_cpu_joypad_state+0x538>
    db08:	e9 85       	ldd	r30, Y+9	; 0x09
    db0a:	fa 85       	ldd	r31, Y+10	; 0x0a
    db0c:	80 81       	ld	r24, Z
    db0e:	81 11       	cpse	r24, r1
    db10:	ad c0       	rjmp	.+346    	; 0xdc6c <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    db12:	a9 85       	ldd	r26, Y+9	; 0x09
    db14:	ba 85       	ldd	r27, Y+10	; 0x0a
    db16:	94 96       	adiw	r26, 0x24	; 36
    db18:	1c 92       	st	X, r1
    db1a:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    db1c:	5a 96       	adiw	r26, 0x1a	; 26
    db1e:	1c 92       	st	X, r1
				p->held = BTN_DOWN;
    db20:	80 e2       	ldi	r24, 0x20	; 32
    db22:	90 e0       	ldi	r25, 0x00	; 0
    db24:	6c c0       	rjmp	.+216    	; 0xdbfe <get_cpu_joypad_state+0x4ca>
			}
		}
		else if (other_player->shared.y < player->shared.y && other_player->shared.x > player->shared.x)
    db26:	a9 85       	ldd	r26, Y+9	; 0x09
    db28:	ba 85       	ldd	r27, Y+10	; 0x0a
    db2a:	13 96       	adiw	r26, 0x03	; 3
    db2c:	2d 91       	ld	r18, X+
    db2e:	3d 91       	ld	r19, X+
    db30:	4d 91       	ld	r20, X+
    db32:	5c 91       	ld	r21, X
    db34:	16 97       	sbiw	r26, 0x06	; 6
    db36:	f1 01       	movw	r30, r2
    db38:	63 81       	ldd	r22, Z+3	; 0x03
    db3a:	74 81       	ldd	r23, Z+4	; 0x04
    db3c:	85 81       	ldd	r24, Z+5	; 0x05
    db3e:	96 81       	ldd	r25, Z+6	; 0x06
    db40:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    db44:	18 16       	cp	r1, r24
    db46:	dc f4       	brge	.+54     	; 0xdb7e <get_cpu_joypad_state+0x44a>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_RIGHT)
    db48:	d1 01       	movw	r26, r2
    db4a:	8c 91       	ld	r24, X
    db4c:	82 30       	cpi	r24, 0x02	; 2
    db4e:	71 f4       	brne	.+28     	; 0xdb6c <get_cpu_joypad_state+0x438>
    db50:	e9 85       	ldd	r30, Y+9	; 0x09
    db52:	fa 85       	ldd	r31, Y+10	; 0x0a
    db54:	80 81       	ld	r24, Z
    db56:	81 30       	cpi	r24, 0x01	; 1
    db58:	49 f4       	brne	.+18     	; 0xdb6c <get_cpu_joypad_state+0x438>
			{
				player->goal_reached = 0;
    db5a:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    db5c:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    db5e:	80 e4       	ldi	r24, 0x40	; 64
    db60:	90 e0       	ldi	r25, 0x00	; 0
    db62:	d2 01       	movw	r26, r4
    db64:	15 96       	adiw	r26, 0x05	; 5
    db66:	9c 93       	st	X, r25
    db68:	8e 93       	st	-X, r24
    db6a:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_UP)
    db6c:	f1 01       	movw	r30, r2
    db6e:	80 81       	ld	r24, Z
    db70:	83 30       	cpi	r24, 0x03	; 3
    db72:	09 f0       	breq	.+2      	; 0xdb76 <get_cpu_joypad_state+0x442>
    db74:	7b c0       	rjmp	.+246    	; 0xdc6c <get_cpu_joypad_state+0x538>
    db76:	a9 85       	ldd	r26, Y+9	; 0x09
    db78:	ba 85       	ldd	r27, Y+10	; 0x0a
    db7a:	8c 91       	ld	r24, X
    db7c:	c8 cf       	rjmp	.-112    	; 0xdb0e <get_cpu_joypad_state+0x3da>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x < player->shared.x)
    db7e:	a5 01       	movw	r20, r10
    db80:	94 01       	movw	r18, r8
    db82:	c7 01       	movw	r24, r14
    db84:	b6 01       	movw	r22, r12
    db86:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    db8a:	18 16       	cp	r1, r24
    db8c:	e4 f5       	brge	.+120    	; 0xdc06 <get_cpu_joypad_state+0x4d2>
    db8e:	e9 85       	ldd	r30, Y+9	; 0x09
    db90:	fa 85       	ldd	r31, Y+10	; 0x0a
    db92:	23 81       	ldd	r18, Z+3	; 0x03
    db94:	34 81       	ldd	r19, Z+4	; 0x04
    db96:	45 81       	ldd	r20, Z+5	; 0x05
    db98:	56 81       	ldd	r21, Z+6	; 0x06
    db9a:	d1 01       	movw	r26, r2
    db9c:	13 96       	adiw	r26, 0x03	; 3
    db9e:	6d 91       	ld	r22, X+
    dba0:	7d 91       	ld	r23, X+
    dba2:	8d 91       	ld	r24, X+
    dba4:	9c 91       	ld	r25, X
    dba6:	16 97       	sbiw	r26, 0x06	; 6
    dba8:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__cmpsf2>
    dbac:	87 ff       	sbrs	r24, 7
    dbae:	33 c0       	rjmp	.+102    	; 0xdc16 <get_cpu_joypad_state+0x4e2>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_LEFT)
    dbb0:	f1 01       	movw	r30, r2
    dbb2:	80 81       	ld	r24, Z
    dbb4:	81 11       	cpse	r24, r1
    dbb6:	0f c0       	rjmp	.+30     	; 0xdbd6 <get_cpu_joypad_state+0x4a2>
    dbb8:	a9 85       	ldd	r26, Y+9	; 0x09
    dbba:	ba 85       	ldd	r27, Y+10	; 0x0a
    dbbc:	8c 91       	ld	r24, X
    dbbe:	83 30       	cpi	r24, 0x03	; 3
    dbc0:	51 f4       	brne	.+20     	; 0xdbd6 <get_cpu_joypad_state+0x4a2>
			{
				player->goal_reached = 0;
    dbc2:	94 96       	adiw	r26, 0x24	; 36
    dbc4:	1c 92       	st	X, r1
    dbc6:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    dbc8:	5a 96       	adiw	r26, 0x1a	; 26
    dbca:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    dbcc:	80 e8       	ldi	r24, 0x80	; 128
    dbce:	90 e0       	ldi	r25, 0x00	; 0
    dbd0:	f2 01       	movw	r30, r4
    dbd2:	95 83       	std	Z+5, r25	; 0x05
    dbd4:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_DOWN)
    dbd6:	d1 01       	movw	r26, r2
    dbd8:	8c 91       	ld	r24, X
    dbda:	81 30       	cpi	r24, 0x01	; 1
    dbdc:	09 f0       	breq	.+2      	; 0xdbe0 <get_cpu_joypad_state+0x4ac>
    dbde:	46 c0       	rjmp	.+140    	; 0xdc6c <get_cpu_joypad_state+0x538>
    dbe0:	e9 85       	ldd	r30, Y+9	; 0x09
    dbe2:	fa 85       	ldd	r31, Y+10	; 0x0a
    dbe4:	80 81       	ld	r24, Z
    dbe6:	82 30       	cpi	r24, 0x02	; 2
    dbe8:	09 f0       	breq	.+2      	; 0xdbec <get_cpu_joypad_state+0x4b8>
    dbea:	40 c0       	rjmp	.+128    	; 0xdc6c <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    dbec:	a9 85       	ldd	r26, Y+9	; 0x09
    dbee:	ba 85       	ldd	r27, Y+10	; 0x0a
    dbf0:	94 96       	adiw	r26, 0x24	; 36
    dbf2:	1c 92       	st	X, r1
    dbf4:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    dbf6:	5a 96       	adiw	r26, 0x1a	; 26
    dbf8:	1c 92       	st	X, r1
				p->held = BTN_UP;
    dbfa:	80 e1       	ldi	r24, 0x10	; 16
    dbfc:	90 e0       	ldi	r25, 0x00	; 0
    dbfe:	f2 01       	movw	r30, r4
    dc00:	95 83       	std	Z+5, r25	; 0x05
    dc02:	84 83       	std	Z+4, r24	; 0x04
    dc04:	33 c0       	rjmp	.+102    	; 0xdc6c <get_cpu_joypad_state+0x538>
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x > player->shared.x)
    dc06:	a5 01       	movw	r20, r10
    dc08:	94 01       	movw	r18, r8
    dc0a:	c7 01       	movw	r24, r14
    dc0c:	b6 01       	movw	r22, r12
    dc0e:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    dc12:	18 16       	cp	r1, r24
    dc14:	5c f5       	brge	.+86     	; 0xdc6c <get_cpu_joypad_state+0x538>
    dc16:	a9 85       	ldd	r26, Y+9	; 0x09
    dc18:	ba 85       	ldd	r27, Y+10	; 0x0a
    dc1a:	13 96       	adiw	r26, 0x03	; 3
    dc1c:	2d 91       	ld	r18, X+
    dc1e:	3d 91       	ld	r19, X+
    dc20:	4d 91       	ld	r20, X+
    dc22:	5c 91       	ld	r21, X
    dc24:	16 97       	sbiw	r26, 0x06	; 6
    dc26:	f1 01       	movw	r30, r2
    dc28:	63 81       	ldd	r22, Z+3	; 0x03
    dc2a:	74 81       	ldd	r23, Z+4	; 0x04
    dc2c:	85 81       	ldd	r24, Z+5	; 0x05
    dc2e:	96 81       	ldd	r25, Z+6	; 0x06
    dc30:	0e 94 23 71 	call	0xe246	; 0xe246 <__gesf2>
    dc34:	18 16       	cp	r1, r24
    dc36:	d4 f4       	brge	.+52     	; 0xdc6c <get_cpu_joypad_state+0x538>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_RIGHT)
    dc38:	d1 01       	movw	r26, r2
    dc3a:	8c 91       	ld	r24, X
    dc3c:	81 11       	cpse	r24, r1
    dc3e:	0e c0       	rjmp	.+28     	; 0xdc5c <get_cpu_joypad_state+0x528>
    dc40:	e9 85       	ldd	r30, Y+9	; 0x09
    dc42:	fa 85       	ldd	r31, Y+10	; 0x0a
    dc44:	80 81       	ld	r24, Z
    dc46:	81 30       	cpi	r24, 0x01	; 1
    dc48:	49 f4       	brne	.+18     	; 0xdc5c <get_cpu_joypad_state+0x528>
			{
				player->goal_reached = 0;
    dc4a:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    dc4c:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    dc4e:	80 e4       	ldi	r24, 0x40	; 64
    dc50:	90 e0       	ldi	r25, 0x00	; 0
    dc52:	d2 01       	movw	r26, r4
    dc54:	15 96       	adiw	r26, 0x05	; 5
    dc56:	9c 93       	st	X, r25
    dc58:	8e 93       	st	-X, r24
    dc5a:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_DOWN){
    dc5c:	f1 01       	movw	r30, r2
    dc5e:	80 81       	ld	r24, Z
    dc60:	83 30       	cpi	r24, 0x03	; 3
    dc62:	21 f4       	brne	.+8      	; 0xdc6c <get_cpu_joypad_state+0x538>
    dc64:	a9 85       	ldd	r26, Y+9	; 0x09
    dc66:	ba 85       	ldd	r27, Y+10	; 0x0a
    dc68:	8c 91       	ld	r24, X
    dc6a:	bd cf       	rjmp	.-134    	; 0xdbe6 <get_cpu_joypad_state+0x4b2>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    dc6c:	2a 96       	adiw	r28, 0x0a	; 10
    dc6e:	0f b6       	in	r0, 0x3f	; 63
    dc70:	f8 94       	cli
    dc72:	de bf       	out	0x3e, r29	; 62
    dc74:	0f be       	out	0x3f, r0	; 63
    dc76:	cd bf       	out	0x3d, r28	; 61
    dc78:	df 91       	pop	r29
    dc7a:	cf 91       	pop	r28
    dc7c:	1f 91       	pop	r17
    dc7e:	0f 91       	pop	r16
    dc80:	ff 90       	pop	r15
    dc82:	ef 90       	pop	r14
    dc84:	df 90       	pop	r13
    dc86:	cf 90       	pop	r12
    dc88:	bf 90       	pop	r11
    dc8a:	af 90       	pop	r10
    dc8c:	9f 90       	pop	r9
    dc8e:	8f 90       	pop	r8
    dc90:	7f 90       	pop	r7
    dc92:	5f 90       	pop	r5
    dc94:	4f 90       	pop	r4
    dc96:	3f 90       	pop	r3
    dc98:	2f 90       	pop	r2
    dc9a:	08 95       	ret

0000dc9c <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    dc9c:	bf 92       	push	r11
    dc9e:	cf 92       	push	r12
    dca0:	df 92       	push	r13
    dca2:	ef 92       	push	r14
    dca4:	ff 92       	push	r15
    dca6:	0f 93       	push	r16
    dca8:	1f 93       	push	r17
    dcaa:	cf 93       	push	r28
    dcac:	df 93       	push	r29
    dcae:	1f 92       	push	r1
    dcb0:	cd b7       	in	r28, 0x3d	; 61
    dcb2:	de b7       	in	r29, 0x3e	; 62
    dcb4:	8c 01       	movw	r16, r24
    dcb6:	f6 2e       	mov	r15, r22
    dcb8:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    dcba:	8f e0       	ldi	r24, 0x0F	; 15
    dcbc:	b8 2e       	mov	r11, r24
}
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    dcbe:	f8 01       	movw	r30, r16
    dcc0:	84 91       	lpm	r24, Z
    dcc2:	83 32       	cpi	r24, 0x23	; 35
    dcc4:	59 f1       	breq	.+86     	; 0xdd1c <stream_text_middle+0x80>
	{
		ln = strnlen_P(dialogue, 255);
    dcc6:	6f ef       	ldi	r22, 0xFF	; 255
    dcc8:	70 e0       	ldi	r23, 0x00	; 0
    dcca:	c8 01       	movw	r24, r16
    dccc:	0e 94 93 71 	call	0xe326	; 0xe326 <strnlen_P>
		x = 15 - ln / 2;
    dcd0:	86 95       	lsr	r24
    dcd2:	eb 2c       	mov	r14, r11
    dcd4:	e8 1a       	sub	r14, r24
    dcd6:	e0 1a       	sub	r14, r16
    dcd8:	8e 2d       	mov	r24, r14
    dcda:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    dcdc:	0f 5f       	subi	r16, 0xFF	; 255
    dcde:	1f 4f       	sbci	r17, 0xFF	; 255
    dce0:	f8 01       	movw	r30, r16
    dce2:	31 97       	sbiw	r30, 0x01	; 1
    dce4:	e4 91       	lpm	r30, Z
    dce6:	e9 83       	std	Y+1, r30	; 0x01
    dce8:	ee 23       	and	r30, r30
    dcea:	b1 f0       	breq	.+44     	; 0xdd18 <stream_text_middle+0x7c>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    dcec:	21 e0       	ldi	r18, 0x01	; 1
    dcee:	ae 01       	movw	r20, r28
    dcf0:	4f 5f       	subi	r20, 0xFF	; 255
    dcf2:	5f 4f       	sbci	r21, 0xFF	; 255
    dcf4:	6f 2d       	mov	r22, r15
    dcf6:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <LBPrintStr>
			LBGetJoyPadState(&p1, 0);
    dcfa:	60 e0       	ldi	r22, 0x00	; 0
    dcfc:	80 eb       	ldi	r24, 0xB0	; 176
    dcfe:	9c e0       	ldi	r25, 0x0C	; 12
    dd00:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBGetJoyPadState>
			if (!(p1.held & BTN_A)) LBWaitUs(delay);
    dd04:	80 91 b4 0c 	lds	r24, 0x0CB4
    dd08:	90 91 b5 0c 	lds	r25, 0x0CB5
    dd0c:	90 fd       	sbrc	r25, 0
    dd0e:	e4 cf       	rjmp	.-56     	; 0xdcd8 <stream_text_middle+0x3c>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    dd10:	c6 01       	movw	r24, r12
    dd12:	0e 94 f7 3f 	call	0x7fee	; 0x7fee <WaitUs>
    dd16:	e0 cf       	rjmp	.-64     	; 0xdcd8 <stream_text_middle+0x3c>
		}
		y++;
    dd18:	f3 94       	inc	r15
    dd1a:	d1 cf       	rjmp	.-94     	; 0xdcbe <stream_text_middle+0x22>
	}
}
    dd1c:	0f 90       	pop	r0
    dd1e:	df 91       	pop	r29
    dd20:	cf 91       	pop	r28
    dd22:	1f 91       	pop	r17
    dd24:	0f 91       	pop	r16
    dd26:	ff 90       	pop	r15
    dd28:	ef 90       	pop	r14
    dd2a:	df 90       	pop	r13
    dd2c:	cf 90       	pop	r12
    dd2e:	bf 90       	pop	r11
    dd30:	08 95       	ret

0000dd32 <load_credits>:

void load_credits()
{
	fade_through();
    dd32:	0e 94 c9 52 	call	0xa592	; 0xa592 <fade_through>
	stream_text_middle((const char*) strCredits, 5, 100);
    dd36:	44 e6       	ldi	r20, 0x64	; 100
    dd38:	50 e0       	ldi	r21, 0x00	; 0
    dd3a:	65 e0       	ldi	r22, 0x05	; 5
    dd3c:	88 ee       	ldi	r24, 0xE8	; 232
    dd3e:	90 e0       	ldi	r25, 0x00	; 0
    dd40:	0e 94 4e 6e 	call	0xdc9c	; 0xdc9c <stream_text_middle>
	LBWaitSeconds(4);
    dd44:	84 e0       	ldi	r24, 0x04	; 4
    dd46:	0e 94 e2 50 	call	0xa1c4	; 0xa1c4 <LBWaitSeconds>
	fade_through();
    dd4a:	0c 94 c9 52 	jmp	0xa592	; 0xa592 <fade_through>

0000dd4e <main>:
#endif

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    dd4e:	0e 94 39 40 	call	0x8072	; 0x8072 <GetTrueRandomSeed>
    dd52:	0e 94 b9 41 	call	0x8372	; 0x8372 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    dd56:	8e ef       	ldi	r24, 0xFE	; 254
    dd58:	92 e0       	ldi	r25, 0x02	; 2
    dd5a:	0e 94 93 42 	call	0x8526	; 0x8526 <InitMusicPlayer>
	SetMasterVolume(0xff);
    dd5e:	8f ef       	ldi	r24, 0xFF	; 255
    dd60:	0e 94 10 46 	call	0x8c20	; 0x8c20 <SetMasterVolume>
	SetTileTable(tiles_data);
    dd64:	82 ea       	ldi	r24, 0xA2	; 162
    dd66:	9c e3       	ldi	r25, 0x3C	; 60
    dd68:	0e 94 dc 3f 	call	0x7fb8	; 0x7fb8 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    dd6c:	81 e1       	ldi	r24, 0x11	; 17
    dd6e:	93 e3       	ldi	r25, 0x33	; 51
    dd70:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    dd74:	8b e9       	ldi	r24, 0x9B	; 155
    dd76:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    dd7a:	60 e0       	ldi	r22, 0x00	; 0
    dd7c:	83 e0       	ldi	r24, 0x03	; 3
    dd7e:	0e 94 af 4e 	call	0x9d5e	; 0x9d5e <FadeIn>
	ClearVram();
    dd82:	0e 94 bd 3f 	call	0x7f7a	; 0x7f7a <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    dd86:	8f eb       	ldi	r24, 0xBF	; 191
    dd88:	9b e0       	ldi	r25, 0x0B	; 11
    dd8a:	0e 94 fb 50 	call	0xa1f6	; 0xa1f6 <init_scores>
	init_handles(&handles);
    dd8e:	86 ee       	ldi	r24, 0xE6	; 230
    dd90:	9b e0       	ldi	r25, 0x0B	; 11
    dd92:	0e 94 07 51 	call	0xa20e	; 0xa20e <init_handles>
	init_game_state();
    dd96:	0e 94 60 52 	call	0xa4c0	; 0xa4c0 <init_game_state>
	load_credits();
    dd9a:	0e 94 99 6e 	call	0xdd32	; 0xdd32 <load_credits>
	load_splash();
    dd9e:	0e 94 4c 61 	call	0xc298	; 0xc298 <load_splash>
	
	while (1)
	{
		waitForVSync();
    dda2:	0e 94 af 52 	call	0xa55e	; 0xa55e <waitForVSync>
		switch (game.current_screen)
    dda6:	80 91 06 0c 	lds	r24, 0x0C06
    ddaa:	81 30       	cpi	r24, 0x01	; 1
    ddac:	91 f0       	breq	.+36     	; 0xddd2 <main+0x84>
    ddae:	28 f0       	brcs	.+10     	; 0xddba <main+0x6c>
    ddb0:	82 30       	cpi	r24, 0x02	; 2
    ddb2:	c9 f0       	breq	.+50     	; 0xdde6 <main+0x98>
    ddb4:	83 30       	cpi	r24, 0x03	; 3
    ddb6:	41 f1       	breq	.+80     	; 0xde08 <main+0xba>
    ddb8:	54 c0       	rjmp	.+168    	; 0xde62 <main+0x114>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    ddba:	60 e0       	ldi	r22, 0x00	; 0
    ddbc:	80 eb       	ldi	r24, 0xB0	; 176
    ddbe:	9c e0       	ldi	r25, 0x0C	; 12
    ddc0:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBGetJoyPadState>
				update_splash(&p1, &p2);
    ddc4:	6f ed       	ldi	r22, 0xDF	; 223
    ddc6:	7b e0       	ldi	r23, 0x0B	; 11
    ddc8:	80 eb       	ldi	r24, 0xB0	; 176
    ddca:	9c e0       	ldi	r25, 0x0C	; 12
    ddcc:	0e 94 2d 69 	call	0xd25a	; 0xd25a <update_splash>
				break;
    ddd0:	48 c0       	rjmp	.+144    	; 0xde62 <main+0x114>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    ddd2:	60 e0       	ldi	r22, 0x00	; 0
    ddd4:	80 eb       	ldi	r24, 0xB0	; 176
    ddd6:	9c e0       	ldi	r25, 0x0C	; 12
    ddd8:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBGetJoyPadState>
				update_tank_rank(&p1);
    dddc:	80 eb       	ldi	r24, 0xB0	; 176
    ddde:	9c e0       	ldi	r25, 0x0C	; 12
    dde0:	0e 94 b1 66 	call	0xcd62	; 0xcd62 <update_tank_rank>
				break;
    dde4:	3e c0       	rjmp	.+124    	; 0xde62 <main+0x114>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    dde6:	60 e0       	ldi	r22, 0x00	; 0
    dde8:	80 eb       	ldi	r24, 0xB0	; 176
    ddea:	9c e0       	ldi	r25, 0x0C	; 12
    ddec:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    ddf0:	61 e0       	ldi	r22, 0x01	; 1
    ddf2:	8f ed       	ldi	r24, 0xDF	; 223
    ddf4:	9b e0       	ldi	r25, 0x0B	; 11
    ddf6:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    ddfa:	6f ed       	ldi	r22, 0xDF	; 223
    ddfc:	7b e0       	ldi	r23, 0x0B	; 11
    ddfe:	80 eb       	ldi	r24, 0xB0	; 176
    de00:	9c e0       	ldi	r25, 0x0C	; 12
    de02:	0e 94 05 6a 	call	0xd40a	; 0xd40a <update_handle_select>
				break;
    de06:	2d c0       	rjmp	.+90     	; 0xde62 <main+0x114>
			case LEVEL:
				if (game.selection == PVCPU)
    de08:	80 91 19 0c 	lds	r24, 0x0C19
    de0c:	81 11       	cpse	r24, r1
    de0e:	06 c0       	rjmp	.+12     	; 0xde1c <main+0xce>
				{
					LBGetJoyPadState(&p1, 0);
    de10:	60 e0       	ldi	r22, 0x00	; 0
    de12:	80 eb       	ldi	r24, 0xB0	; 176
    de14:	9c e0       	ldi	r25, 0x0C	; 12
    de16:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBGetJoyPadState>
    de1a:	0a c0       	rjmp	.+20     	; 0xde30 <main+0xe2>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    de1c:	83 30       	cpi	r24, 0x03	; 3
    de1e:	89 f4       	brne	.+34     	; 0xde42 <main+0xf4>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    de20:	40 eb       	ldi	r20, 0xB0	; 176
    de22:	5c e0       	ldi	r21, 0x0C	; 12
    de24:	66 ea       	ldi	r22, 0xA6	; 166
    de26:	7f e0       	ldi	r23, 0x0F	; 15
    de28:	87 e3       	ldi	r24, 0x37	; 55
    de2a:	9c e0       	ldi	r25, 0x0C	; 12
    de2c:	0e 94 9a 6b 	call	0xd734	; 0xd734 <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    de30:	4f ed       	ldi	r20, 0xDF	; 223
    de32:	5b e0       	ldi	r21, 0x0B	; 11
    de34:	67 e3       	ldi	r22, 0x37	; 55
    de36:	7c e0       	ldi	r23, 0x0C	; 12
    de38:	86 ea       	ldi	r24, 0xA6	; 166
    de3a:	9f e0       	ldi	r25, 0x0F	; 15
    de3c:	0e 94 9a 6b 	call	0xd734	; 0xd734 <get_cpu_joypad_state>
    de40:	0a c0       	rjmp	.+20     	; 0xde56 <main+0x108>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    de42:	60 e0       	ldi	r22, 0x00	; 0
    de44:	80 eb       	ldi	r24, 0xB0	; 176
    de46:	9c e0       	ldi	r25, 0x0C	; 12
    de48:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    de4c:	61 e0       	ldi	r22, 0x01	; 1
    de4e:	8f ed       	ldi	r24, 0xDF	; 223
    de50:	9b e0       	ldi	r25, 0x0B	; 11
    de52:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    de56:	6f ed       	ldi	r22, 0xDF	; 223
    de58:	7b e0       	ldi	r23, 0x0B	; 11
    de5a:	80 eb       	ldi	r24, 0xB0	; 176
    de5c:	9c e0       	ldi	r25, 0x0C	; 12
    de5e:	0e 94 81 64 	call	0xc902	; 0xc902 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    de62:	80 91 01 01 	lds	r24, 0x0101
    de66:	90 91 02 01 	lds	r25, 0x0102
    de6a:	01 96       	adiw	r24, 0x01	; 1
    de6c:	90 93 02 01 	sts	0x0102, r25
    de70:	80 93 01 01 	sts	0x0101, r24
	}
    de74:	96 cf       	rjmp	.-212    	; 0xdda2 <main+0x54>

0000de76 <__udivmodqi4>:
    de76:	99 1b       	sub	r25, r25
    de78:	79 e0       	ldi	r23, 0x09	; 9
    de7a:	04 c0       	rjmp	.+8      	; 0xde84 <__udivmodqi4_ep>

0000de7c <__udivmodqi4_loop>:
    de7c:	99 1f       	adc	r25, r25
    de7e:	96 17       	cp	r25, r22
    de80:	08 f0       	brcs	.+2      	; 0xde84 <__udivmodqi4_ep>
    de82:	96 1b       	sub	r25, r22

0000de84 <__udivmodqi4_ep>:
    de84:	88 1f       	adc	r24, r24
    de86:	7a 95       	dec	r23
    de88:	c9 f7       	brne	.-14     	; 0xde7c <__udivmodqi4_loop>
    de8a:	80 95       	com	r24
    de8c:	08 95       	ret

0000de8e <__udivmodhi4>:
    de8e:	aa 1b       	sub	r26, r26
    de90:	bb 1b       	sub	r27, r27
    de92:	51 e1       	ldi	r21, 0x11	; 17
    de94:	07 c0       	rjmp	.+14     	; 0xdea4 <__udivmodhi4_ep>

0000de96 <__udivmodhi4_loop>:
    de96:	aa 1f       	adc	r26, r26
    de98:	bb 1f       	adc	r27, r27
    de9a:	a6 17       	cp	r26, r22
    de9c:	b7 07       	cpc	r27, r23
    de9e:	10 f0       	brcs	.+4      	; 0xdea4 <__udivmodhi4_ep>
    dea0:	a6 1b       	sub	r26, r22
    dea2:	b7 0b       	sbc	r27, r23

0000dea4 <__udivmodhi4_ep>:
    dea4:	88 1f       	adc	r24, r24
    dea6:	99 1f       	adc	r25, r25
    dea8:	5a 95       	dec	r21
    deaa:	a9 f7       	brne	.-22     	; 0xde96 <__udivmodhi4_loop>
    deac:	80 95       	com	r24
    deae:	90 95       	com	r25
    deb0:	bc 01       	movw	r22, r24
    deb2:	cd 01       	movw	r24, r26
    deb4:	08 95       	ret

0000deb6 <__divmodhi4>:
    deb6:	97 fb       	bst	r25, 7
    deb8:	07 2e       	mov	r0, r23
    deba:	16 f4       	brtc	.+4      	; 0xdec0 <__divmodhi4+0xa>
    debc:	00 94       	com	r0
    debe:	07 d0       	rcall	.+14     	; 0xdece <__divmodhi4_neg1>
    dec0:	77 fd       	sbrc	r23, 7
    dec2:	09 d0       	rcall	.+18     	; 0xded6 <__divmodhi4_neg2>
    dec4:	0e 94 47 6f 	call	0xde8e	; 0xde8e <__udivmodhi4>
    dec8:	07 fc       	sbrc	r0, 7
    deca:	05 d0       	rcall	.+10     	; 0xded6 <__divmodhi4_neg2>
    decc:	3e f4       	brtc	.+14     	; 0xdedc <__divmodhi4_exit>

0000dece <__divmodhi4_neg1>:
    dece:	90 95       	com	r25
    ded0:	81 95       	neg	r24
    ded2:	9f 4f       	sbci	r25, 0xFF	; 255
    ded4:	08 95       	ret

0000ded6 <__divmodhi4_neg2>:
    ded6:	70 95       	com	r23
    ded8:	61 95       	neg	r22
    deda:	7f 4f       	sbci	r23, 0xFF	; 255

0000dedc <__divmodhi4_exit>:
    dedc:	08 95       	ret

0000dede <__subsf3>:
    dede:	50 58       	subi	r21, 0x80	; 128

0000dee0 <__addsf3>:
    dee0:	bb 27       	eor	r27, r27
    dee2:	aa 27       	eor	r26, r26
    dee4:	0e d0       	rcall	.+28     	; 0xdf02 <__addsf3x>
    dee6:	75 c1       	rjmp	.+746    	; 0xe1d2 <__fp_round>
    dee8:	66 d1       	rcall	.+716    	; 0xe1b6 <__fp_pscA>
    deea:	30 f0       	brcs	.+12     	; 0xdef8 <__addsf3+0x18>
    deec:	6b d1       	rcall	.+726    	; 0xe1c4 <__fp_pscB>
    deee:	20 f0       	brcs	.+8      	; 0xdef8 <__addsf3+0x18>
    def0:	31 f4       	brne	.+12     	; 0xdefe <__addsf3+0x1e>
    def2:	9f 3f       	cpi	r25, 0xFF	; 255
    def4:	11 f4       	brne	.+4      	; 0xdefa <__addsf3+0x1a>
    def6:	1e f4       	brtc	.+6      	; 0xdefe <__addsf3+0x1e>
    def8:	5b c1       	rjmp	.+694    	; 0xe1b0 <__fp_nan>
    defa:	0e f4       	brtc	.+2      	; 0xdefe <__addsf3+0x1e>
    defc:	e0 95       	com	r30
    defe:	e7 fb       	bst	r30, 7
    df00:	51 c1       	rjmp	.+674    	; 0xe1a4 <__fp_inf>

0000df02 <__addsf3x>:
    df02:	e9 2f       	mov	r30, r25
    df04:	77 d1       	rcall	.+750    	; 0xe1f4 <__fp_split3>
    df06:	80 f3       	brcs	.-32     	; 0xdee8 <__addsf3+0x8>
    df08:	ba 17       	cp	r27, r26
    df0a:	62 07       	cpc	r22, r18
    df0c:	73 07       	cpc	r23, r19
    df0e:	84 07       	cpc	r24, r20
    df10:	95 07       	cpc	r25, r21
    df12:	18 f0       	brcs	.+6      	; 0xdf1a <__addsf3x+0x18>
    df14:	71 f4       	brne	.+28     	; 0xdf32 <__addsf3x+0x30>
    df16:	9e f5       	brtc	.+102    	; 0xdf7e <__addsf3x+0x7c>
    df18:	8f c1       	rjmp	.+798    	; 0xe238 <__fp_zero>
    df1a:	0e f4       	brtc	.+2      	; 0xdf1e <__addsf3x+0x1c>
    df1c:	e0 95       	com	r30
    df1e:	0b 2e       	mov	r0, r27
    df20:	ba 2f       	mov	r27, r26
    df22:	a0 2d       	mov	r26, r0
    df24:	0b 01       	movw	r0, r22
    df26:	b9 01       	movw	r22, r18
    df28:	90 01       	movw	r18, r0
    df2a:	0c 01       	movw	r0, r24
    df2c:	ca 01       	movw	r24, r20
    df2e:	a0 01       	movw	r20, r0
    df30:	11 24       	eor	r1, r1
    df32:	ff 27       	eor	r31, r31
    df34:	59 1b       	sub	r21, r25
    df36:	99 f0       	breq	.+38     	; 0xdf5e <__addsf3x+0x5c>
    df38:	59 3f       	cpi	r21, 0xF9	; 249
    df3a:	50 f4       	brcc	.+20     	; 0xdf50 <__addsf3x+0x4e>
    df3c:	50 3e       	cpi	r21, 0xE0	; 224
    df3e:	68 f1       	brcs	.+90     	; 0xdf9a <__addsf3x+0x98>
    df40:	1a 16       	cp	r1, r26
    df42:	f0 40       	sbci	r31, 0x00	; 0
    df44:	a2 2f       	mov	r26, r18
    df46:	23 2f       	mov	r18, r19
    df48:	34 2f       	mov	r19, r20
    df4a:	44 27       	eor	r20, r20
    df4c:	58 5f       	subi	r21, 0xF8	; 248
    df4e:	f3 cf       	rjmp	.-26     	; 0xdf36 <__addsf3x+0x34>
    df50:	46 95       	lsr	r20
    df52:	37 95       	ror	r19
    df54:	27 95       	ror	r18
    df56:	a7 95       	ror	r26
    df58:	f0 40       	sbci	r31, 0x00	; 0
    df5a:	53 95       	inc	r21
    df5c:	c9 f7       	brne	.-14     	; 0xdf50 <__addsf3x+0x4e>
    df5e:	7e f4       	brtc	.+30     	; 0xdf7e <__addsf3x+0x7c>
    df60:	1f 16       	cp	r1, r31
    df62:	ba 0b       	sbc	r27, r26
    df64:	62 0b       	sbc	r22, r18
    df66:	73 0b       	sbc	r23, r19
    df68:	84 0b       	sbc	r24, r20
    df6a:	ba f0       	brmi	.+46     	; 0xdf9a <__addsf3x+0x98>
    df6c:	91 50       	subi	r25, 0x01	; 1
    df6e:	a1 f0       	breq	.+40     	; 0xdf98 <__addsf3x+0x96>
    df70:	ff 0f       	add	r31, r31
    df72:	bb 1f       	adc	r27, r27
    df74:	66 1f       	adc	r22, r22
    df76:	77 1f       	adc	r23, r23
    df78:	88 1f       	adc	r24, r24
    df7a:	c2 f7       	brpl	.-16     	; 0xdf6c <__addsf3x+0x6a>
    df7c:	0e c0       	rjmp	.+28     	; 0xdf9a <__addsf3x+0x98>
    df7e:	ba 0f       	add	r27, r26
    df80:	62 1f       	adc	r22, r18
    df82:	73 1f       	adc	r23, r19
    df84:	84 1f       	adc	r24, r20
    df86:	48 f4       	brcc	.+18     	; 0xdf9a <__addsf3x+0x98>
    df88:	87 95       	ror	r24
    df8a:	77 95       	ror	r23
    df8c:	67 95       	ror	r22
    df8e:	b7 95       	ror	r27
    df90:	f7 95       	ror	r31
    df92:	9e 3f       	cpi	r25, 0xFE	; 254
    df94:	08 f0       	brcs	.+2      	; 0xdf98 <__addsf3x+0x96>
    df96:	b3 cf       	rjmp	.-154    	; 0xdefe <__addsf3+0x1e>
    df98:	93 95       	inc	r25
    df9a:	88 0f       	add	r24, r24
    df9c:	08 f0       	brcs	.+2      	; 0xdfa0 <__addsf3x+0x9e>
    df9e:	99 27       	eor	r25, r25
    dfa0:	ee 0f       	add	r30, r30
    dfa2:	97 95       	ror	r25
    dfa4:	87 95       	ror	r24
    dfa6:	08 95       	ret

0000dfa8 <__cmpsf2>:
    dfa8:	d9 d0       	rcall	.+434    	; 0xe15c <__fp_cmp>
    dfaa:	08 f4       	brcc	.+2      	; 0xdfae <__cmpsf2+0x6>
    dfac:	81 e0       	ldi	r24, 0x01	; 1
    dfae:	08 95       	ret

0000dfb0 <__divsf3>:
    dfb0:	0c d0       	rcall	.+24     	; 0xdfca <__divsf3x>
    dfb2:	0f c1       	rjmp	.+542    	; 0xe1d2 <__fp_round>
    dfb4:	07 d1       	rcall	.+526    	; 0xe1c4 <__fp_pscB>
    dfb6:	40 f0       	brcs	.+16     	; 0xdfc8 <__divsf3+0x18>
    dfb8:	fe d0       	rcall	.+508    	; 0xe1b6 <__fp_pscA>
    dfba:	30 f0       	brcs	.+12     	; 0xdfc8 <__divsf3+0x18>
    dfbc:	21 f4       	brne	.+8      	; 0xdfc6 <__divsf3+0x16>
    dfbe:	5f 3f       	cpi	r21, 0xFF	; 255
    dfc0:	19 f0       	breq	.+6      	; 0xdfc8 <__divsf3+0x18>
    dfc2:	f0 c0       	rjmp	.+480    	; 0xe1a4 <__fp_inf>
    dfc4:	51 11       	cpse	r21, r1
    dfc6:	39 c1       	rjmp	.+626    	; 0xe23a <__fp_szero>
    dfc8:	f3 c0       	rjmp	.+486    	; 0xe1b0 <__fp_nan>

0000dfca <__divsf3x>:
    dfca:	14 d1       	rcall	.+552    	; 0xe1f4 <__fp_split3>
    dfcc:	98 f3       	brcs	.-26     	; 0xdfb4 <__divsf3+0x4>

0000dfce <__divsf3_pse>:
    dfce:	99 23       	and	r25, r25
    dfd0:	c9 f3       	breq	.-14     	; 0xdfc4 <__divsf3+0x14>
    dfd2:	55 23       	and	r21, r21
    dfd4:	b1 f3       	breq	.-20     	; 0xdfc2 <__divsf3+0x12>
    dfd6:	95 1b       	sub	r25, r21
    dfd8:	55 0b       	sbc	r21, r21
    dfda:	bb 27       	eor	r27, r27
    dfdc:	aa 27       	eor	r26, r26
    dfde:	62 17       	cp	r22, r18
    dfe0:	73 07       	cpc	r23, r19
    dfe2:	84 07       	cpc	r24, r20
    dfe4:	38 f0       	brcs	.+14     	; 0xdff4 <__divsf3_pse+0x26>
    dfe6:	9f 5f       	subi	r25, 0xFF	; 255
    dfe8:	5f 4f       	sbci	r21, 0xFF	; 255
    dfea:	22 0f       	add	r18, r18
    dfec:	33 1f       	adc	r19, r19
    dfee:	44 1f       	adc	r20, r20
    dff0:	aa 1f       	adc	r26, r26
    dff2:	a9 f3       	breq	.-22     	; 0xdfde <__divsf3_pse+0x10>
    dff4:	33 d0       	rcall	.+102    	; 0xe05c <__divsf3_pse+0x8e>
    dff6:	0e 2e       	mov	r0, r30
    dff8:	3a f0       	brmi	.+14     	; 0xe008 <__divsf3_pse+0x3a>
    dffa:	e0 e8       	ldi	r30, 0x80	; 128
    dffc:	30 d0       	rcall	.+96     	; 0xe05e <__divsf3_pse+0x90>
    dffe:	91 50       	subi	r25, 0x01	; 1
    e000:	50 40       	sbci	r21, 0x00	; 0
    e002:	e6 95       	lsr	r30
    e004:	00 1c       	adc	r0, r0
    e006:	ca f7       	brpl	.-14     	; 0xdffa <__divsf3_pse+0x2c>
    e008:	29 d0       	rcall	.+82     	; 0xe05c <__divsf3_pse+0x8e>
    e00a:	fe 2f       	mov	r31, r30
    e00c:	27 d0       	rcall	.+78     	; 0xe05c <__divsf3_pse+0x8e>
    e00e:	66 0f       	add	r22, r22
    e010:	77 1f       	adc	r23, r23
    e012:	88 1f       	adc	r24, r24
    e014:	bb 1f       	adc	r27, r27
    e016:	26 17       	cp	r18, r22
    e018:	37 07       	cpc	r19, r23
    e01a:	48 07       	cpc	r20, r24
    e01c:	ab 07       	cpc	r26, r27
    e01e:	b0 e8       	ldi	r27, 0x80	; 128
    e020:	09 f0       	breq	.+2      	; 0xe024 <__divsf3_pse+0x56>
    e022:	bb 0b       	sbc	r27, r27
    e024:	80 2d       	mov	r24, r0
    e026:	bf 01       	movw	r22, r30
    e028:	ff 27       	eor	r31, r31
    e02a:	93 58       	subi	r25, 0x83	; 131
    e02c:	5f 4f       	sbci	r21, 0xFF	; 255
    e02e:	2a f0       	brmi	.+10     	; 0xe03a <__divsf3_pse+0x6c>
    e030:	9e 3f       	cpi	r25, 0xFE	; 254
    e032:	51 05       	cpc	r21, r1
    e034:	68 f0       	brcs	.+26     	; 0xe050 <__divsf3_pse+0x82>
    e036:	b6 c0       	rjmp	.+364    	; 0xe1a4 <__fp_inf>
    e038:	00 c1       	rjmp	.+512    	; 0xe23a <__fp_szero>
    e03a:	5f 3f       	cpi	r21, 0xFF	; 255
    e03c:	ec f3       	brlt	.-6      	; 0xe038 <__divsf3_pse+0x6a>
    e03e:	98 3e       	cpi	r25, 0xE8	; 232
    e040:	dc f3       	brlt	.-10     	; 0xe038 <__divsf3_pse+0x6a>
    e042:	86 95       	lsr	r24
    e044:	77 95       	ror	r23
    e046:	67 95       	ror	r22
    e048:	b7 95       	ror	r27
    e04a:	f7 95       	ror	r31
    e04c:	9f 5f       	subi	r25, 0xFF	; 255
    e04e:	c9 f7       	brne	.-14     	; 0xe042 <__divsf3_pse+0x74>
    e050:	88 0f       	add	r24, r24
    e052:	91 1d       	adc	r25, r1
    e054:	96 95       	lsr	r25
    e056:	87 95       	ror	r24
    e058:	97 f9       	bld	r25, 7
    e05a:	08 95       	ret
    e05c:	e1 e0       	ldi	r30, 0x01	; 1
    e05e:	66 0f       	add	r22, r22
    e060:	77 1f       	adc	r23, r23
    e062:	88 1f       	adc	r24, r24
    e064:	bb 1f       	adc	r27, r27
    e066:	62 17       	cp	r22, r18
    e068:	73 07       	cpc	r23, r19
    e06a:	84 07       	cpc	r24, r20
    e06c:	ba 07       	cpc	r27, r26
    e06e:	20 f0       	brcs	.+8      	; 0xe078 <__divsf3_pse+0xaa>
    e070:	62 1b       	sub	r22, r18
    e072:	73 0b       	sbc	r23, r19
    e074:	84 0b       	sbc	r24, r20
    e076:	ba 0b       	sbc	r27, r26
    e078:	ee 1f       	adc	r30, r30
    e07a:	88 f7       	brcc	.-30     	; 0xe05e <__divsf3_pse+0x90>
    e07c:	e0 95       	com	r30
    e07e:	08 95       	ret

0000e080 <__fixsfsi>:
    e080:	04 d0       	rcall	.+8      	; 0xe08a <__fixunssfsi>
    e082:	68 94       	set
    e084:	b1 11       	cpse	r27, r1
    e086:	d9 c0       	rjmp	.+434    	; 0xe23a <__fp_szero>
    e088:	08 95       	ret

0000e08a <__fixunssfsi>:
    e08a:	bc d0       	rcall	.+376    	; 0xe204 <__fp_splitA>
    e08c:	88 f0       	brcs	.+34     	; 0xe0b0 <__fixunssfsi+0x26>
    e08e:	9f 57       	subi	r25, 0x7F	; 127
    e090:	90 f0       	brcs	.+36     	; 0xe0b6 <__fixunssfsi+0x2c>
    e092:	b9 2f       	mov	r27, r25
    e094:	99 27       	eor	r25, r25
    e096:	b7 51       	subi	r27, 0x17	; 23
    e098:	a0 f0       	brcs	.+40     	; 0xe0c2 <__fixunssfsi+0x38>
    e09a:	d1 f0       	breq	.+52     	; 0xe0d0 <__fixunssfsi+0x46>
    e09c:	66 0f       	add	r22, r22
    e09e:	77 1f       	adc	r23, r23
    e0a0:	88 1f       	adc	r24, r24
    e0a2:	99 1f       	adc	r25, r25
    e0a4:	1a f0       	brmi	.+6      	; 0xe0ac <__fixunssfsi+0x22>
    e0a6:	ba 95       	dec	r27
    e0a8:	c9 f7       	brne	.-14     	; 0xe09c <__fixunssfsi+0x12>
    e0aa:	12 c0       	rjmp	.+36     	; 0xe0d0 <__fixunssfsi+0x46>
    e0ac:	b1 30       	cpi	r27, 0x01	; 1
    e0ae:	81 f0       	breq	.+32     	; 0xe0d0 <__fixunssfsi+0x46>
    e0b0:	c3 d0       	rcall	.+390    	; 0xe238 <__fp_zero>
    e0b2:	b1 e0       	ldi	r27, 0x01	; 1
    e0b4:	08 95       	ret
    e0b6:	c0 c0       	rjmp	.+384    	; 0xe238 <__fp_zero>
    e0b8:	67 2f       	mov	r22, r23
    e0ba:	78 2f       	mov	r23, r24
    e0bc:	88 27       	eor	r24, r24
    e0be:	b8 5f       	subi	r27, 0xF8	; 248
    e0c0:	39 f0       	breq	.+14     	; 0xe0d0 <__fixunssfsi+0x46>
    e0c2:	b9 3f       	cpi	r27, 0xF9	; 249
    e0c4:	cc f3       	brlt	.-14     	; 0xe0b8 <__fixunssfsi+0x2e>
    e0c6:	86 95       	lsr	r24
    e0c8:	77 95       	ror	r23
    e0ca:	67 95       	ror	r22
    e0cc:	b3 95       	inc	r27
    e0ce:	d9 f7       	brne	.-10     	; 0xe0c6 <__fixunssfsi+0x3c>
    e0d0:	3e f4       	brtc	.+14     	; 0xe0e0 <__fixunssfsi+0x56>
    e0d2:	90 95       	com	r25
    e0d4:	80 95       	com	r24
    e0d6:	70 95       	com	r23
    e0d8:	61 95       	neg	r22
    e0da:	7f 4f       	sbci	r23, 0xFF	; 255
    e0dc:	8f 4f       	sbci	r24, 0xFF	; 255
    e0de:	9f 4f       	sbci	r25, 0xFF	; 255
    e0e0:	08 95       	ret

0000e0e2 <__floatunsisf>:
    e0e2:	e8 94       	clt
    e0e4:	09 c0       	rjmp	.+18     	; 0xe0f8 <__floatsisf+0x12>

0000e0e6 <__floatsisf>:
    e0e6:	97 fb       	bst	r25, 7
    e0e8:	3e f4       	brtc	.+14     	; 0xe0f8 <__floatsisf+0x12>
    e0ea:	90 95       	com	r25
    e0ec:	80 95       	com	r24
    e0ee:	70 95       	com	r23
    e0f0:	61 95       	neg	r22
    e0f2:	7f 4f       	sbci	r23, 0xFF	; 255
    e0f4:	8f 4f       	sbci	r24, 0xFF	; 255
    e0f6:	9f 4f       	sbci	r25, 0xFF	; 255
    e0f8:	99 23       	and	r25, r25
    e0fa:	a9 f0       	breq	.+42     	; 0xe126 <__floatsisf+0x40>
    e0fc:	f9 2f       	mov	r31, r25
    e0fe:	96 e9       	ldi	r25, 0x96	; 150
    e100:	bb 27       	eor	r27, r27
    e102:	93 95       	inc	r25
    e104:	f6 95       	lsr	r31
    e106:	87 95       	ror	r24
    e108:	77 95       	ror	r23
    e10a:	67 95       	ror	r22
    e10c:	b7 95       	ror	r27
    e10e:	f1 11       	cpse	r31, r1
    e110:	f8 cf       	rjmp	.-16     	; 0xe102 <__floatsisf+0x1c>
    e112:	fa f4       	brpl	.+62     	; 0xe152 <__floatsisf+0x6c>
    e114:	bb 0f       	add	r27, r27
    e116:	11 f4       	brne	.+4      	; 0xe11c <__floatsisf+0x36>
    e118:	60 ff       	sbrs	r22, 0
    e11a:	1b c0       	rjmp	.+54     	; 0xe152 <__floatsisf+0x6c>
    e11c:	6f 5f       	subi	r22, 0xFF	; 255
    e11e:	7f 4f       	sbci	r23, 0xFF	; 255
    e120:	8f 4f       	sbci	r24, 0xFF	; 255
    e122:	9f 4f       	sbci	r25, 0xFF	; 255
    e124:	16 c0       	rjmp	.+44     	; 0xe152 <__floatsisf+0x6c>
    e126:	88 23       	and	r24, r24
    e128:	11 f0       	breq	.+4      	; 0xe12e <__floatsisf+0x48>
    e12a:	96 e9       	ldi	r25, 0x96	; 150
    e12c:	11 c0       	rjmp	.+34     	; 0xe150 <__floatsisf+0x6a>
    e12e:	77 23       	and	r23, r23
    e130:	21 f0       	breq	.+8      	; 0xe13a <__floatsisf+0x54>
    e132:	9e e8       	ldi	r25, 0x8E	; 142
    e134:	87 2f       	mov	r24, r23
    e136:	76 2f       	mov	r23, r22
    e138:	05 c0       	rjmp	.+10     	; 0xe144 <__floatsisf+0x5e>
    e13a:	66 23       	and	r22, r22
    e13c:	71 f0       	breq	.+28     	; 0xe15a <__floatsisf+0x74>
    e13e:	96 e8       	ldi	r25, 0x86	; 134
    e140:	86 2f       	mov	r24, r22
    e142:	70 e0       	ldi	r23, 0x00	; 0
    e144:	60 e0       	ldi	r22, 0x00	; 0
    e146:	2a f0       	brmi	.+10     	; 0xe152 <__floatsisf+0x6c>
    e148:	9a 95       	dec	r25
    e14a:	66 0f       	add	r22, r22
    e14c:	77 1f       	adc	r23, r23
    e14e:	88 1f       	adc	r24, r24
    e150:	da f7       	brpl	.-10     	; 0xe148 <__floatsisf+0x62>
    e152:	88 0f       	add	r24, r24
    e154:	96 95       	lsr	r25
    e156:	87 95       	ror	r24
    e158:	97 f9       	bld	r25, 7
    e15a:	08 95       	ret

0000e15c <__fp_cmp>:
    e15c:	99 0f       	add	r25, r25
    e15e:	00 08       	sbc	r0, r0
    e160:	55 0f       	add	r21, r21
    e162:	aa 0b       	sbc	r26, r26
    e164:	e0 e8       	ldi	r30, 0x80	; 128
    e166:	fe ef       	ldi	r31, 0xFE	; 254
    e168:	16 16       	cp	r1, r22
    e16a:	17 06       	cpc	r1, r23
    e16c:	e8 07       	cpc	r30, r24
    e16e:	f9 07       	cpc	r31, r25
    e170:	c0 f0       	brcs	.+48     	; 0xe1a2 <__fp_cmp+0x46>
    e172:	12 16       	cp	r1, r18
    e174:	13 06       	cpc	r1, r19
    e176:	e4 07       	cpc	r30, r20
    e178:	f5 07       	cpc	r31, r21
    e17a:	98 f0       	brcs	.+38     	; 0xe1a2 <__fp_cmp+0x46>
    e17c:	62 1b       	sub	r22, r18
    e17e:	73 0b       	sbc	r23, r19
    e180:	84 0b       	sbc	r24, r20
    e182:	95 0b       	sbc	r25, r21
    e184:	39 f4       	brne	.+14     	; 0xe194 <__fp_cmp+0x38>
    e186:	0a 26       	eor	r0, r26
    e188:	61 f0       	breq	.+24     	; 0xe1a2 <__fp_cmp+0x46>
    e18a:	23 2b       	or	r18, r19
    e18c:	24 2b       	or	r18, r20
    e18e:	25 2b       	or	r18, r21
    e190:	21 f4       	brne	.+8      	; 0xe19a <__fp_cmp+0x3e>
    e192:	08 95       	ret
    e194:	0a 26       	eor	r0, r26
    e196:	09 f4       	brne	.+2      	; 0xe19a <__fp_cmp+0x3e>
    e198:	a1 40       	sbci	r26, 0x01	; 1
    e19a:	a6 95       	lsr	r26
    e19c:	8f ef       	ldi	r24, 0xFF	; 255
    e19e:	81 1d       	adc	r24, r1
    e1a0:	81 1d       	adc	r24, r1
    e1a2:	08 95       	ret

0000e1a4 <__fp_inf>:
    e1a4:	97 f9       	bld	r25, 7
    e1a6:	9f 67       	ori	r25, 0x7F	; 127
    e1a8:	80 e8       	ldi	r24, 0x80	; 128
    e1aa:	70 e0       	ldi	r23, 0x00	; 0
    e1ac:	60 e0       	ldi	r22, 0x00	; 0
    e1ae:	08 95       	ret

0000e1b0 <__fp_nan>:
    e1b0:	9f ef       	ldi	r25, 0xFF	; 255
    e1b2:	80 ec       	ldi	r24, 0xC0	; 192
    e1b4:	08 95       	ret

0000e1b6 <__fp_pscA>:
    e1b6:	00 24       	eor	r0, r0
    e1b8:	0a 94       	dec	r0
    e1ba:	16 16       	cp	r1, r22
    e1bc:	17 06       	cpc	r1, r23
    e1be:	18 06       	cpc	r1, r24
    e1c0:	09 06       	cpc	r0, r25
    e1c2:	08 95       	ret

0000e1c4 <__fp_pscB>:
    e1c4:	00 24       	eor	r0, r0
    e1c6:	0a 94       	dec	r0
    e1c8:	12 16       	cp	r1, r18
    e1ca:	13 06       	cpc	r1, r19
    e1cc:	14 06       	cpc	r1, r20
    e1ce:	05 06       	cpc	r0, r21
    e1d0:	08 95       	ret

0000e1d2 <__fp_round>:
    e1d2:	09 2e       	mov	r0, r25
    e1d4:	03 94       	inc	r0
    e1d6:	00 0c       	add	r0, r0
    e1d8:	11 f4       	brne	.+4      	; 0xe1de <__fp_round+0xc>
    e1da:	88 23       	and	r24, r24
    e1dc:	52 f0       	brmi	.+20     	; 0xe1f2 <__fp_round+0x20>
    e1de:	bb 0f       	add	r27, r27
    e1e0:	40 f4       	brcc	.+16     	; 0xe1f2 <__fp_round+0x20>
    e1e2:	bf 2b       	or	r27, r31
    e1e4:	11 f4       	brne	.+4      	; 0xe1ea <__fp_round+0x18>
    e1e6:	60 ff       	sbrs	r22, 0
    e1e8:	04 c0       	rjmp	.+8      	; 0xe1f2 <__fp_round+0x20>
    e1ea:	6f 5f       	subi	r22, 0xFF	; 255
    e1ec:	7f 4f       	sbci	r23, 0xFF	; 255
    e1ee:	8f 4f       	sbci	r24, 0xFF	; 255
    e1f0:	9f 4f       	sbci	r25, 0xFF	; 255
    e1f2:	08 95       	ret

0000e1f4 <__fp_split3>:
    e1f4:	57 fd       	sbrc	r21, 7
    e1f6:	90 58       	subi	r25, 0x80	; 128
    e1f8:	44 0f       	add	r20, r20
    e1fa:	55 1f       	adc	r21, r21
    e1fc:	59 f0       	breq	.+22     	; 0xe214 <__fp_splitA+0x10>
    e1fe:	5f 3f       	cpi	r21, 0xFF	; 255
    e200:	71 f0       	breq	.+28     	; 0xe21e <__fp_splitA+0x1a>
    e202:	47 95       	ror	r20

0000e204 <__fp_splitA>:
    e204:	88 0f       	add	r24, r24
    e206:	97 fb       	bst	r25, 7
    e208:	99 1f       	adc	r25, r25
    e20a:	61 f0       	breq	.+24     	; 0xe224 <__fp_splitA+0x20>
    e20c:	9f 3f       	cpi	r25, 0xFF	; 255
    e20e:	79 f0       	breq	.+30     	; 0xe22e <__fp_splitA+0x2a>
    e210:	87 95       	ror	r24
    e212:	08 95       	ret
    e214:	12 16       	cp	r1, r18
    e216:	13 06       	cpc	r1, r19
    e218:	14 06       	cpc	r1, r20
    e21a:	55 1f       	adc	r21, r21
    e21c:	f2 cf       	rjmp	.-28     	; 0xe202 <__fp_split3+0xe>
    e21e:	46 95       	lsr	r20
    e220:	f1 df       	rcall	.-30     	; 0xe204 <__fp_splitA>
    e222:	08 c0       	rjmp	.+16     	; 0xe234 <__fp_splitA+0x30>
    e224:	16 16       	cp	r1, r22
    e226:	17 06       	cpc	r1, r23
    e228:	18 06       	cpc	r1, r24
    e22a:	99 1f       	adc	r25, r25
    e22c:	f1 cf       	rjmp	.-30     	; 0xe210 <__fp_splitA+0xc>
    e22e:	86 95       	lsr	r24
    e230:	71 05       	cpc	r23, r1
    e232:	61 05       	cpc	r22, r1
    e234:	08 94       	sec
    e236:	08 95       	ret

0000e238 <__fp_zero>:
    e238:	e8 94       	clt

0000e23a <__fp_szero>:
    e23a:	bb 27       	eor	r27, r27
    e23c:	66 27       	eor	r22, r22
    e23e:	77 27       	eor	r23, r23
    e240:	cb 01       	movw	r24, r22
    e242:	97 f9       	bld	r25, 7
    e244:	08 95       	ret

0000e246 <__gesf2>:
    e246:	8a df       	rcall	.-236    	; 0xe15c <__fp_cmp>
    e248:	08 f4       	brcc	.+2      	; 0xe24c <__gesf2+0x6>
    e24a:	8f ef       	ldi	r24, 0xFF	; 255
    e24c:	08 95       	ret

0000e24e <__mulsf3>:
    e24e:	0b d0       	rcall	.+22     	; 0xe266 <__mulsf3x>
    e250:	c0 cf       	rjmp	.-128    	; 0xe1d2 <__fp_round>
    e252:	b1 df       	rcall	.-158    	; 0xe1b6 <__fp_pscA>
    e254:	28 f0       	brcs	.+10     	; 0xe260 <__mulsf3+0x12>
    e256:	b6 df       	rcall	.-148    	; 0xe1c4 <__fp_pscB>
    e258:	18 f0       	brcs	.+6      	; 0xe260 <__mulsf3+0x12>
    e25a:	95 23       	and	r25, r21
    e25c:	09 f0       	breq	.+2      	; 0xe260 <__mulsf3+0x12>
    e25e:	a2 cf       	rjmp	.-188    	; 0xe1a4 <__fp_inf>
    e260:	a7 cf       	rjmp	.-178    	; 0xe1b0 <__fp_nan>
    e262:	11 24       	eor	r1, r1
    e264:	ea cf       	rjmp	.-44     	; 0xe23a <__fp_szero>

0000e266 <__mulsf3x>:
    e266:	c6 df       	rcall	.-116    	; 0xe1f4 <__fp_split3>
    e268:	a0 f3       	brcs	.-24     	; 0xe252 <__mulsf3+0x4>

0000e26a <__mulsf3_pse>:
    e26a:	95 9f       	mul	r25, r21
    e26c:	d1 f3       	breq	.-12     	; 0xe262 <__mulsf3+0x14>
    e26e:	95 0f       	add	r25, r21
    e270:	50 e0       	ldi	r21, 0x00	; 0
    e272:	55 1f       	adc	r21, r21
    e274:	62 9f       	mul	r22, r18
    e276:	f0 01       	movw	r30, r0
    e278:	72 9f       	mul	r23, r18
    e27a:	bb 27       	eor	r27, r27
    e27c:	f0 0d       	add	r31, r0
    e27e:	b1 1d       	adc	r27, r1
    e280:	63 9f       	mul	r22, r19
    e282:	aa 27       	eor	r26, r26
    e284:	f0 0d       	add	r31, r0
    e286:	b1 1d       	adc	r27, r1
    e288:	aa 1f       	adc	r26, r26
    e28a:	64 9f       	mul	r22, r20
    e28c:	66 27       	eor	r22, r22
    e28e:	b0 0d       	add	r27, r0
    e290:	a1 1d       	adc	r26, r1
    e292:	66 1f       	adc	r22, r22
    e294:	82 9f       	mul	r24, r18
    e296:	22 27       	eor	r18, r18
    e298:	b0 0d       	add	r27, r0
    e29a:	a1 1d       	adc	r26, r1
    e29c:	62 1f       	adc	r22, r18
    e29e:	73 9f       	mul	r23, r19
    e2a0:	b0 0d       	add	r27, r0
    e2a2:	a1 1d       	adc	r26, r1
    e2a4:	62 1f       	adc	r22, r18
    e2a6:	83 9f       	mul	r24, r19
    e2a8:	a0 0d       	add	r26, r0
    e2aa:	61 1d       	adc	r22, r1
    e2ac:	22 1f       	adc	r18, r18
    e2ae:	74 9f       	mul	r23, r20
    e2b0:	33 27       	eor	r19, r19
    e2b2:	a0 0d       	add	r26, r0
    e2b4:	61 1d       	adc	r22, r1
    e2b6:	23 1f       	adc	r18, r19
    e2b8:	84 9f       	mul	r24, r20
    e2ba:	60 0d       	add	r22, r0
    e2bc:	21 1d       	adc	r18, r1
    e2be:	82 2f       	mov	r24, r18
    e2c0:	76 2f       	mov	r23, r22
    e2c2:	6a 2f       	mov	r22, r26
    e2c4:	11 24       	eor	r1, r1
    e2c6:	9f 57       	subi	r25, 0x7F	; 127
    e2c8:	50 40       	sbci	r21, 0x00	; 0
    e2ca:	8a f0       	brmi	.+34     	; 0xe2ee <__mulsf3_pse+0x84>
    e2cc:	e1 f0       	breq	.+56     	; 0xe306 <__mulsf3_pse+0x9c>
    e2ce:	88 23       	and	r24, r24
    e2d0:	4a f0       	brmi	.+18     	; 0xe2e4 <__mulsf3_pse+0x7a>
    e2d2:	ee 0f       	add	r30, r30
    e2d4:	ff 1f       	adc	r31, r31
    e2d6:	bb 1f       	adc	r27, r27
    e2d8:	66 1f       	adc	r22, r22
    e2da:	77 1f       	adc	r23, r23
    e2dc:	88 1f       	adc	r24, r24
    e2de:	91 50       	subi	r25, 0x01	; 1
    e2e0:	50 40       	sbci	r21, 0x00	; 0
    e2e2:	a9 f7       	brne	.-22     	; 0xe2ce <__mulsf3_pse+0x64>
    e2e4:	9e 3f       	cpi	r25, 0xFE	; 254
    e2e6:	51 05       	cpc	r21, r1
    e2e8:	70 f0       	brcs	.+28     	; 0xe306 <__mulsf3_pse+0x9c>
    e2ea:	5c cf       	rjmp	.-328    	; 0xe1a4 <__fp_inf>
    e2ec:	a6 cf       	rjmp	.-180    	; 0xe23a <__fp_szero>
    e2ee:	5f 3f       	cpi	r21, 0xFF	; 255
    e2f0:	ec f3       	brlt	.-6      	; 0xe2ec <__mulsf3_pse+0x82>
    e2f2:	98 3e       	cpi	r25, 0xE8	; 232
    e2f4:	dc f3       	brlt	.-10     	; 0xe2ec <__mulsf3_pse+0x82>
    e2f6:	86 95       	lsr	r24
    e2f8:	77 95       	ror	r23
    e2fa:	67 95       	ror	r22
    e2fc:	b7 95       	ror	r27
    e2fe:	f7 95       	ror	r31
    e300:	e7 95       	ror	r30
    e302:	9f 5f       	subi	r25, 0xFF	; 255
    e304:	c1 f7       	brne	.-16     	; 0xe2f6 <__mulsf3_pse+0x8c>
    e306:	fe 2b       	or	r31, r30
    e308:	88 0f       	add	r24, r24
    e30a:	91 1d       	adc	r25, r1
    e30c:	96 95       	lsr	r25
    e30e:	87 95       	ror	r24
    e310:	97 f9       	bld	r25, 7
    e312:	08 95       	ret

0000e314 <memcpy_P>:
    e314:	fb 01       	movw	r30, r22
    e316:	dc 01       	movw	r26, r24
    e318:	02 c0       	rjmp	.+4      	; 0xe31e <memcpy_P+0xa>
    e31a:	05 90       	lpm	r0, Z+
    e31c:	0d 92       	st	X+, r0
    e31e:	41 50       	subi	r20, 0x01	; 1
    e320:	50 40       	sbci	r21, 0x00	; 0
    e322:	d8 f7       	brcc	.-10     	; 0xe31a <memcpy_P+0x6>
    e324:	08 95       	ret

0000e326 <strnlen_P>:
    e326:	fc 01       	movw	r30, r24
    e328:	05 90       	lpm	r0, Z+
    e32a:	61 50       	subi	r22, 0x01	; 1
    e32c:	70 40       	sbci	r23, 0x00	; 0
    e32e:	01 10       	cpse	r0, r1
    e330:	d8 f7       	brcc	.-10     	; 0xe328 <strnlen_P+0x2>
    e332:	80 95       	com	r24
    e334:	90 95       	com	r25
    e336:	8e 0f       	add	r24, r30
    e338:	9f 1f       	adc	r25, r31
    e33a:	08 95       	ret

0000e33c <_exit>:
    e33c:	f8 94       	cli

0000e33e <__stop_program>:
    e33e:	ff cf       	rjmp	.-2      	; 0xe33e <__stop_program>
