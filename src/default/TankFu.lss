
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000eeba  0000efba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000eeba  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f15  00800154  00800154  0000f014  2**5
                  ALLOC
  3 .stab         000009b4  00000000  00000000  0000f010  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000034b  00000000  00000000  0000f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000fd0f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000810  00000000  00000000  0000fd20  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c2b5  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001738  00000000  00000000  0001c7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002940  00000000  00000000  0001df1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001a64  00000000  00000000  00020860  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002380  00000000  00000000  000222c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ab1c  00000000  00000000  00024644  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000928  00000000  00000000  0002f160  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 35 	jmp	0x6b60	; 0x6b60 <__ctors_end>
       4:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
       8:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
       c:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      10:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      14:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      18:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      1c:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      20:	0c 94 ac 3a 	jmp	0x7558	; 0x7558 <__vector_8>
      24:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      28:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      2c:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      30:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      34:	0c 94 6b 38 	jmp	0x70d6	; 0x70d6 <__vector_13>
      38:	0c 94 aa 38 	jmp	0x7154	; 0x7154 <__vector_14>
      3c:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      40:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      44:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      48:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      4c:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      50:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      54:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      58:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      5c:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      60:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      64:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      68:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>
      6c:	0c 94 1b 36 	jmp	0x6c36	; 0x6c36 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	90 3c 93 3c ef 3c f3 3c fa 3c 9b 3c a0 3c a5 3c     .<.<.<.<.<.<.<.<
      ce:	02 3d a8 3c ab 3c ae 3c e9 3c ec 3c 12 3d           .=.<.<.<.<.<.=

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <__c.2843>:
      e8:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

000000f5 <__c.2839>:
      f5:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

00000104 <__c.2841>:
     104:	4f 4b 0d 0a 00                                      OK...

00000109 <__c.2835>:
     109:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     119:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 31 22 2c     ","192.168.4.1",
     129:	32 32 33 33 2c 31 30 30 31 0d 0a 00                 2233,1001...

00000135 <__c.2837>:
     135:	4f 4b 0d 0a 00                                      OK...

0000013a <__c.2831>:
     13a:	41 54 2b 43 49 50 53 54 41 5f 43 55 52 3d 22 31     AT+CIPSTA_CUR="1
     14a:	39 32 2e 31 36 38 2e 34 2e 32 22 0d 0a 00           92.168.4.2"...

00000158 <__c.2833>:
     158:	4f 4b 0d 0a 00                                      OK...

0000015d <__c.2829>:
     15d:	4f 4b 0d 0a 00                                      OK...

00000162 <__c.2825>:
     162:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 31 0d     AT+CWMODE_CUR=1.
     172:	0a 00                                               ..

00000174 <__c.2827>:
     174:	4f 4b 0d 0a 00                                      OK...

00000179 <__c.2819>:
     179:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

00000186 <__c.2815>:
     186:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

00000195 <__c.2817>:
     195:	4f 4b 0d 0a 00                                      OK...

0000019a <__c.2811>:
     19a:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     1aa:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 32 22 2c     ","192.168.4.2",
     1ba:	31 30 30 31 2c 32 32 33 33 2c 30 0d 0a 00           1001,2233,0...

000001c8 <__c.2813>:
     1c8:	4f 4b 0d 0a 00                                      OK...

000001cd <__c.2809>:
     1cd:	4f 4b 0d 0a 00                                      OK...

000001d2 <__c.2802>:
     1d2:	4f 4b 0d 0a 00                                      OK...

000001d7 <__c.2800>:
     1d7:	41 54 2b 43 49 50 41 50 4d 41 43 5f 43 55 52 3f     AT+CIPAPMAC_CUR?
     1e7:	0d 0a 00                                            ...

000001ea <__c.2796>:
     1ea:	41 54 2b 43 49 50 41 50 5f 43 55 52 3d 22 31 39     AT+CIPAP_CUR="19
     1fa:	32 2e 31 36 38 2e 34 2e 31 22 0d 0a 00              2.168.4.1"...

00000207 <__c.2798>:
     207:	4f 4b 0d 0a 00                                      OK...

0000020c <__c.2792>:
     20c:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 32 0d     AT+CWMODE_CUR=2.
     21c:	0a 00                                               ..

0000021e <__c.2794>:
     21e:	4f 4b 0d 0a 00                                      OK...

00000223 <__c.2776>:
     223:	41 54 2b 43 57 51 41 50 0d 0a 00                    AT+CWQAP...

0000022e <__c.2778>:
     22e:	4f 4b 0d 0a 00                                      OK...

00000233 <__c.2772>:
     233:	41 54 2b 43 49 50 43 4c 4f 53 45 0d 0a 00           AT+CIPCLOSE...

00000241 <__c.2774>:
     241:	4f 4b 0d 0a 00                                      OK...

00000246 <__c.2768>:
     246:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 0d 0a 00        AT+CIPMODE=0...

00000255 <__c.2770>:
     255:	4f 4b 0d 0a 00                                      OK...

0000025a <__c.2763>:
     25a:	2b 2b 2b 00                                         +++.

0000025e <__c.2730>:
     25e:	41 54 2b 55 41 52 54 5f 43 55 52 3d 31 34 34 30     AT+UART_CUR=1440
     26e:	30 2c 38 2c 31 2c 30 2c 30 0d 0a 00                 0,8,1,0,0...

0000027a <__c.2732>:
     27a:	4f 4b 0d 0a 00                                      OK...

0000027f <__c.2724>:
     27f:	41 54 0d 0a 00                                      AT...

00000284 <__c.2726>:
     284:	4f 4b 0d 0a 00                                      OK...

00000289 <bauds>:
     289:	72 01 f6 00 b8 00 5c 00 3c 00 2c 00 1e 00           r.....\.<.,...

00000297 <strCredits>:
     297:	54 41 4e 4b 20 46 55 20 56 33 2e 30 20 46 4f 52     TANK FU V3.0 FOR
     2a7:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     2b7:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     2c7:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     2d7:	4f 4b 53 00 00 00 00 00 4c 4f 4f 4b 49 4e 47 20     OKS.....LOOKING 
     2e7:	46 4f 52 20 57 49 46 49 20 44 45 56 49 43 45 2e     FOR WIFI DEVICE.
     2f7:	2e 2e 00 23 00                                      ...#.

000002fc <default_scores>:
     2fc:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     30c:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000031a <default_handles>:
     31a:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     32a:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000338 <strLevels>:
     338:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     348:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     358:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     368:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     378:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     388:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     398:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     3a8:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     3b8:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     3c8:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     3d8:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

000003e8 <strPaused>:
     3e8:	50 41 55 53 45 44 00                                PAUSED.

000003ef <strExit>:
     3ef:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

000003f8 <strTotal>:
     3f8:	54 4f 54 41 4c 3a 00                                TOTAL:.

000003ff <strScore>:
     3ff:	53 43 4f 52 45 3a 00                                SCORE:.

00000406 <strFinalScore>:
     406:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000412 <strBy>:
     412:	42 59 00                                            BY.

00000415 <strOwns>:
     415:	4f 57 4e 53 00                                      OWNS.

0000041a <strChangeHandle>:
     41a:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

00000429 <strPlayer2>:
     429:	50 32 00                                            P2.

0000042c <strPlayer1>:
     42c:	50 31 00                                            P1.

0000042f <strVertSep>:
     42f:	3b 00                                               ;.

00000431 <strUnderline>:
     431:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000043d <strHandlesTitle>:
     43d:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

00000449 <strHighscores>:
     449:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000453 <strCopyright>:
     453:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     463:	4f 4f 4b 53 00                                      OOKS.

00000468 <strSelectHandle>:
     468:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

00000477 <strCancelHandle>:
     477:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000482 <strReset>:
     482:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     492:	20 53 4c 20 28 35 53 29 00                           SL (5S).

0000049b <strConfirmHandle>:
     49b:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     4ab:	54 00                                               T.

000004ad <strNetworkError>:
     4ad:	4e 45 54 57 4f 52 4b 20 45 52 52 4f 52 00           NETWORK ERROR.

000004bb <strEnterGameId>:
     4bb:	45 4e 54 45 52 20 48 4f 53 54 20 47 41 4d 45 20     ENTER HOST GAME 
     4cb:	49 44 00                                            ID.

000004ce <strConnecting>:
     4ce:	43 4f 4e 4e 45 43 54 49 4e 47 2e 2e 2e 00           CONNECTING....

000004dc <strWaitingForNetOppenent>:
     4dc:	57 41 49 54 49 4e 47 20 4f 4e 20 4c 41 4e 20 4f     WAITING ON LAN O
     4ec:	50 50 4f 4e 45 4e 54 2e 2e 2e 00                    PPONENT....

000004f7 <strShareGameId>:
     4f7:	53 48 41 52 45 20 59 4f 55 52 20 47 41 4d 45 20     SHARE YOUR GAME 
     507:	49 44 00                                            ID.

0000050a <strJoinNetGame>:
     50a:	4a 4f 49 4e 20 4c 41 4e 20 47 41 4d 45 00           JOIN LAN GAME.

00000518 <strHostNetGame>:
     518:	48 4f 53 54 20 4c 41 4e 20 47 41 4d 45 00           HOST LAN GAME.

00000526 <str2Player>:
     526:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000537 <str1Player>:
     537:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000545 <my_patches>:
     545:	00 00 00 4d 06 00 00 00 00 00 00 00 36 06 00 00     ...M........6...
     555:	00 00 00 00 00 25 06 00 00 00 00 00 00 00 25 06     .....%........%.
     565:	00 00 00 00 00 00 00 25 06 00 00 00 00 00 00 00     .......%........
     575:	36 06 00 00 00 00 00 00 00 be 06 00 00 00 00 00     6...............
     585:	00 00 8d 05 00 00 00 00                             ........

0000058d <ad_alarm>:
     58d:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     59d:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     5ad:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     5bd:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     5cd:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     5dd:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     5ed:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     5fd:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     60d:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     61d:	01 03 01 01 05 00 00 ff                             ........

00000625 <ad_navigate>:
     625:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
     635:	ff                                                  .

00000636 <ad_cannonball>:
     636:	00 07 7f 00 08 32 00 02 03 00 00 f0 00 0c 0c 00     .....2..........
     646:	0b e8 08 00 e0 00 ff                                .......

0000064d <ad_brick_explode>:
     64d:	00 07 7f 00 02 03 00 00 ff 00 07 64 00 08 32 01     ...........d..2.
     65d:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     66d:	04 01 04 04 01 04 04 01 04 04 03 07 50 00 08 2d     ............P..-
     67d:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     68d:	04 04 01 04 04 01 04 04 01 04 04 03 07 3c 00 08     .............<..
     69d:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     6ad:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     6bd:	ff                                                  .

000006be <ad_tank_explode>:
     6be:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
     6ce:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     6de:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
     6ee:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     6fe:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
     70e:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
     71e:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
     72e:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     73e:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
     74e:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     75e:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
     76e:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     77e:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     78e:	ff                                                  .

0000078f <level_data>:
     78f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     79f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     7c7:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
     7df:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
     7ef:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7ff:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
     81b:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
     82b:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     83b:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
     857:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
     877:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
     887:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
     897:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
     8a7:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     8b7:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
     8c7:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
     8d7:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     8e7:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
     8f7:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
     907:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
     917:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
     927:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
     937:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
     947:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
     95f:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     96f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
     98b:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
     9a3:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
     9bf:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
     9cf:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     9df:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
     9fb:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
     a0b:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     a1b:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
     a3b:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
     a5b:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a6b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a7b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a8b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a9b:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ab7:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ad3:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     ae3:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
     af3:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     b03:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     b13:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
     b23:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
     b33:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
     b43:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     b53:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
     b63:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     b73:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     b83:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
     b93:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
     ba3:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
     bb3:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
     bc3:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
     bd3:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
     be3:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
     bf3:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
     c03:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
     c13:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
     c23:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
     c33:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     c43:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
     c53:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     c63:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     c73:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
     c83:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
     c93:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
     ca3:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
     cb3:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     cc3:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
     cd3:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     ce3:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     cf3:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
     d03:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
     d13:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d2b:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     d47:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
     d57:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d67:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d77:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d87:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     da3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     dc3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ddf:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     dff:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e1b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e3b:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     e53:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     e6f:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     e7f:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
     e8f:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
     e9f:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
     eaf:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     ebf:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
     ecf:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
     edf:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
     eef:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
     eff:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
     f0f:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
     f1f:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
     f2f:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
     f3f:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
     f4f:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f5f:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     f6f:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f7f:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     f9b:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
     fbf:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     fdf:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ffb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    101b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1037:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1047:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1057:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1067:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1077:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    1087:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    1097:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    10a7:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    10b7:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    10c7:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    10d7:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    10e7:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    10f7:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    1107:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    1117:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    1127:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    1137:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    1147:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    1157:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    1167:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1183:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    119b:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    11ab:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    11bb:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    11cb:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    11e3:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    11f3:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1203:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1213:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1223:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1233:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    124b:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    125b:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    126b:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    1283:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    1293:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    12a3:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    12b3:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    12c3:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    12d3:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    12e3:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    12fb:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    130b:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1323:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    1333:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1343:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1353:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1363:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    137f:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    139b:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    13bb:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    13cb:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13db:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    13f7:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    1417:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    1433:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    1453:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    1463:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1473:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    1483:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    149b:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    14ab:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    14bb:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    14cb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    14db:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    14eb:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    1507:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1517:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    1527:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1537:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    1557:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    1573:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    1593:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    15ab:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    15bb:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    15d7:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    15f3:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    1613:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1623:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1633:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1643:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1653:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    1663:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    167b:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    168b:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    169b:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    16ab:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    16bb:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    16cb:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    16db:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    16eb:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    16fb:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    1723:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1733:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1743:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    1753:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    176b:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    177b:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    178b:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    179b:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    17ab:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    17bb:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    17cb:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    17e3:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    17f3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1803:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    1813:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1823:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1833:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    1843:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1853:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    1863:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    1873:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    1883:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    1893:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    18a3:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    18b3:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    18c3:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    18df:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1903:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1913:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1923:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1933:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1943:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    1953:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    196b:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    197b:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    198b:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    199b:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    19ab:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    19bb:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    19cb:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    19db:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    19eb:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    19fb:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1a0b:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1a2f:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a4b:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    1a5b:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    1a6b:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    1a7b:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    1a8b:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    1a9b:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    1aab:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1abb:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1ad3:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1ae3:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1aff:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b1f:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1b2f:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1b3f:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1b4f:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1b5f:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    1b6f:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    1b7f:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    1b8f:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1b9f:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    1baf:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    1bbf:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    1bcf:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    1bdf:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    1bef:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1bff:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c0f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c1f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c2f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c4b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c67:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c87:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ca3:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1cb3:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1cc3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cdf:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cf7:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1d07:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1d17:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    1d27:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    1d37:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    1d47:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    1d57:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    1d67:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    1d77:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    1d87:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    1d97:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    1da7:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    1dbf:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    1dcf:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    1ddf:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    1def:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1dff:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    1e0f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e2b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e47:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1e57:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1e67:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e83:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ea3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ebf:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1edf:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1eef:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1eff:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f0f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1f37:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f57:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f73:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f93:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1fa3:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1fb3:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fcf:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1feb:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2003:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2013:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2023:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    2033:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    2043:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    2053:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    2063:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    2073:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    2083:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    2093:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    20a3:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    20b3:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    20c3:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    20db:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    20fb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2117:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2137:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2147:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2157:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2173:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    218f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21af:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21cb:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21db:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21eb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21fb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    220b:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    221b:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2233:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2243:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2253:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    2263:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    2273:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2283:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    2293:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    22ab:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    22bb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    22cb:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    22db:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    22eb:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    22fb:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2317:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    2327:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    2337:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    2347:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    2357:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    2367:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    2377:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2387:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    2397:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    23a7:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    23cb:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    23db:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    23eb:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    23fb:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2413:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2423:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2433:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    2443:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    2453:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    2463:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2473:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    248b:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    249b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    24ab:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    24bb:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24cb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24db:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24eb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    24fb:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    250b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    251b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    252b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    253b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    254b:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    255b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    256b:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    257b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    258b:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    259b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25ab:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    25bb:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    25cb:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    25db:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    25eb:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25fb:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    260b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    261b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    262b:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    263b:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    264b:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    265b:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    267b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    269b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26b7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26d7:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    26ef:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    2713:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    272f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    274f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    276b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    277b:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    278b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27a7:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    27b7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    27c7:	02 02                                               ..

000027c9 <sprites_data>:
    27c9:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    27d9:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    27e9:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    27f9:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    2809:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2819:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    2829:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    2839:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    2849:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2859:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    2869:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2879:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2889:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2899:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    28a9:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    28b9:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    28c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28d9:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    28e9:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    28f9:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2909:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2919:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2929:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2939:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2949:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2959:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    2969:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    2979:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2989:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2999:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    29a9:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    29b9:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    29c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29d9:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    29e9:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    29f9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a09:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a19:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2a29:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2a39:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a49:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    2a59:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    2a69:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    2a79:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    2a89:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    2a99:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    2aa9:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2ab9:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2ac9:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2ad9:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2ae9:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2af9:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2b09:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2b19:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2b29:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2b39:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2b49:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2b59:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2b69:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2b79:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b89:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2b99:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2ba9:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2bb9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bc9:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2bd9:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2be9:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2bf9:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c09:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c19:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2c29:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2c39:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2c49:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2c59:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    2c69:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    2c79:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2c89:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    2c99:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    2ca9:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    2cb9:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2cc9:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2cd9:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    2ce9:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    2cf9:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    2d09:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2d19:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2d29:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    2d39:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    2d49:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d59:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    2d69:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    2d79:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d89:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2d99:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2da9:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    2db9:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    2dc9:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2dd9:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2de9:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    2df9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e09:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2e19:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    2e29:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    2e39:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e49:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2e59:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    2e69:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    2e79:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e89:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e99:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    2ea9:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    2eb9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ec9:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2ed9:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    2ee9:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    2ef9:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    2f09:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2f19:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    2f29:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    2f39:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    2f49:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2f59:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2f69:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    2f79:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2f89:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    2f99:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2fa9:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2fb9:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2fc9:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2fd9:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2fe9:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2ff9:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    3009:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3019:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3029:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    3039:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    3049:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    3059:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    3069:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3079:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3089:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    3099:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    30a9:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    30b9:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    30c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30d9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30e9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30f9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00003109 <map_sub_turret>:
    3109:	01 01 23                                            ..#

0000310c <map_sub_shot>:
    310c:	01 01 1b                                            ...

0000310f <map_up_arrow>:
    310f:	01 01 22                                            .."

00003112 <map_down_arrow>:
    3112:	01 01 21                                            ..!

00003115 <map_right_arrow>:
    3115:	01 01 20                                            .. 

00003118 <map_rocket_right_1>:
    3118:	01 01 1a                                            ...

0000311b <map_rocket_right_0>:
    311b:	01 01 19                                            ...

0000311e <map_rocket_up_1>:
    311e:	01 01 18                                            ...

00003121 <map_rocket_up_0>:
    3121:	01 01 17                                            ...

00003124 <map_ball>:
    3124:	01 01 16                                            ...

00003127 <map_explosion_2>:
    3127:	02 02 08 09 09 08                                   ......

0000312d <map_explosion_1>:
    312d:	02 02 06 07 10 11                                   ......

00003133 <map_explosion_0>:
    3133:	02 02 04 05 0e 0f                                   ......

00003139 <map_tank2_right_0>:
    3139:	02 02 14 15 1e 1f                                   ......

0000313f <map_tank2_up_0>:
    313f:	02 02 12 13 1c 1d                                   ......

00003145 <map_tank1_right_0>:
    3145:	02 02 02 03 0c 0d                                   ......

0000314b <map_tank1_up_0>:
    314b:	02 02 00 01 0a 0b                                   ......

00003151 <map_tank_blank>:
    3151:	02 02 24 24 24 24                                   ..$$$$

00003157 <map_none>:
    3157:	01 01 24                                            ..$

0000315a <tiles_data>:
	...
    319a:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    31aa:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    31ba:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    31ca:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    31da:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    31ea:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    31fa:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    320a:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    321a:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    322a:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    323a:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    324a:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    325a:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    326a:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    327a:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    328a:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    329a:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    32aa:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    32ba:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    32ca:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    32e2:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    32f2:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3302:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    331a:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    332a:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    333a:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    334a:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    3362:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    3382:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    339a:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    33aa:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    33ba:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    33ca:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    33da:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    33ea:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    33fa:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    340a:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    341a:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    342a:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    343a:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    344a:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    345a:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    346a:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    347a:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    348a:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    349a:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    34aa:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    34ba:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    34ca:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    34da:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    34ea:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    34fa:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    350a:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    351a:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    352a:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    353a:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    354a:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    355a:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    356a:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    357a:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    358a:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    359a:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    35aa:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    35ba:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    35ca:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    35da:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    35ea:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    35fa:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    360a:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    361a:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    362a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    363a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    364a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    365a:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    366a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    367a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    368a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    36ba:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    36ca:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    36da:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    36ea:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    36fa:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    370a:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    371a:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    372a:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    373a:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    374a:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    375a:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    376a:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    377a:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    378a:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    379a:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    37aa:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    37ba:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    37ca:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    37da:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    37ea:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    37fa:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    380a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    381a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    382a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    385a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    386a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    387a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    388a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    389a:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    38aa:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38ba:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38ca:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38da:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    391a:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    392a:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    393a:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    394a:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    395a:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    396a:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    397a:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    398a:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    39ca:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    3a02:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    3a12:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    3a22:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    3a32:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    3a42:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    3a52:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    3a62:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    3a72:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    3a82:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    3a92:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    3aa2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ab2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ac2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ad2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ae2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3af2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b02:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b12:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    3b22:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    3b32:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    3b42:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    3b52:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    3b62:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    3b72:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    3b82:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    3b92:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    3ba2:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3bda:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3bea:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3bfa:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    3c1e:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    3c2e:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    3c3e:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    3c4e:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    3c5e:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    3c6e:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    3c7e:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    3c8e:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    3c9e:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3cae:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3cbe:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3cce:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    3cde:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3cee:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3cfe:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d0e:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    3d1e:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    3d2e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d3e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d4e:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    3d5e:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    3d6e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d7e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d8e:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    3d9e:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    3dae:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    3dbe:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    3dce:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    3dde:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    3dee:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    3dfe:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    3e0e:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    3e1e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e2e:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3e3e:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    3e4e:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    3e5e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e6e:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3e7e:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    3e8e:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    3e9e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3eae:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3ebe:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    3ece:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    3ede:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3eee:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3efe:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f0e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    3f1e:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    3f2e:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3f3e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f4e:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3f5e:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    3f6e:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f7e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f8e:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3f9e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    3fae:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fbe:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fce:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    3fde:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    3fee:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3ffe:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    400e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    401e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    402e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    403e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    404e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    405e:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    406e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    407e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    408e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    409e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    40ae:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    40be:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    40ce:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    40de:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    40ee:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    40fe:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    410e:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    411e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    412e:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    413e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    414e:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    415e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    416e:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    417e:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    418e:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    419e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    41ae:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    41be:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    41ce:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    41de:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    41ee:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    41fe:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    420e:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    421e:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    422e:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    423e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    424e:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    425e:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    426e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    427e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    428e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    429e:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42ae:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42be:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    42ce:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    42de:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42ee:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42fe:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    430e:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    431e:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    432e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    433e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    434e:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    435e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    436e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    437e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    438e:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    439e:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    43ae:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    43be:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    43ce:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    43de:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    43ee:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    43fe:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    440e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    441e:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    442e:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    443e:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    444e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    445e:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    446e:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    447e:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    448e:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    449e:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44ae:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44be:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44ce:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    44de:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    44ee:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    44fe:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    450e:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    451e:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    452e:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    453e:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    454e:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    455e:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    456e:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    457e:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    458e:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    459e:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    45ae:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    45be:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    45ce:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    45de:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    45ee:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    45fe:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    460e:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    461e:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    462e:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    463e:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    464e:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    465e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    466e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    467e:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    468e:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    469e:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46ae:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46be:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    46ce:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    46de:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46ee:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46fe:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    470e:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    471e:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    472e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    473e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    474e:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    475e:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    476e:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    477e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    478e:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    479e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    47ae:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    47be:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    47ce:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    47de:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    47ee:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    47fe:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    480e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    481e:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    482e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    483e:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    484e:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    485e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    486e:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    487e:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    488e:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    489e:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    48ae:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    48be:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    48ce:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    48de:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    48ee:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    48fe:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    490e:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    491e:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    492e:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    493e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    494e:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    495e:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    496e:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    497e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    498e:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    499e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    49ae:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    49be:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    49ce:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    49de:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    49ee:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    49fe:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a0e:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a1e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4a2e:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4a3e:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a4e:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a5e:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    4a6e:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    4a7e:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    4a8e:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    4a9e:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    4aae:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4abe:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4ace:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    4ade:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    4aee:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    4afe:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    4b0e:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    4b1e:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    4b2e:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    4b3e:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    4b4e:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4b5e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4b6e:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    4b7e:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    4b8e:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    4b9e:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4bae:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4bbe:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4bce:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    4bde:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4bee:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4bfe:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    4c0e:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    4c1e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c2e:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c3e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c4e:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    4c5e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c6e:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c7e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4c8e:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4c9e:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    4cae:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4cbe:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4cce:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4cde:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4cee:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    4cfe:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    4d0e:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4d1e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d2e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4d3e:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    4d4e:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    4d5e:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    4d6e:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    4d7e:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4d8e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    4d9e:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    4dae:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4dbe:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4dce:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    4dde:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4dee:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4dfe:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e0e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4e1e:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    4e2e:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    4e3e:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    4e4e:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    4e5e:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    4e6e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4e7e:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e8e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    4e9e:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    4eae:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4ebe:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4ece:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4ede:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4eee:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    4efe:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    4f0e:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f1e:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    4f2e:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f3e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f4e:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f5e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4f6e:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f7e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f8e:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    4f9e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4fae:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fbe:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fce:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4fde:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4fee:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ffe:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    500e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    501e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    502e:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    503e:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    504e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    505e:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    506e:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    507e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    508e:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    509e:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    50ae:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50be:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    50ce:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    50de:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    50ee:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    50fe:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    510e:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    511e:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    512e:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    513e:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    514e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    515e:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    516e:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    517e:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    518e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    519e:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    51ae:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    51be:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    51ce:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    51de:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    51ee:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    51fe:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    520e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    521e:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    522e:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    523e:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    524e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    525e:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    526e:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    527e:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    528e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    529e:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52ae:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    52be:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    52ce:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    52de:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52ee:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    52fe:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    530e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    531e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    532e:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    533e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    534e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    535e:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    536e:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    537e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    538e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    539e:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    53ae:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53be:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53ce:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    53de:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    53ee:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53fe:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    540e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    541e:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    542e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    543e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    544e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    545e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    546e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    547e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    548e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    549e:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    54ae:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54be:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54ce:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    54de:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    54ee:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    54fe:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    550e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    551e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    552e:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    553e:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    554e:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    555e:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    556e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    557e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    558e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    559e:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    55ae:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    55be:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    55ce:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    55de:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    55ee:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    55fe:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    560e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    561e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    562e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    563e:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    564e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    565e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    566e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    567e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    568e:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    569e:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    56ae:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    56be:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    56ce:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    56de:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56ee:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    56fe:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    570e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    571e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    572e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    573e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    574e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    575e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    576e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    577e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    578e:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    579e:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57ae:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57be:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    57ce:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    57de:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57ee:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57fe:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    580e:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    5862:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5872:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    588a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    58a2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    58b2:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    58e2:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    58f2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5902:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    591a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    592a:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    593a:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    594a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5962:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5972:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5982:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    599a:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    59aa:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    59ba:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    59ca:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    59e2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    59f2:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a26:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5a36:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5a46:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    5a62:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    5a72:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a82:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    5aa2:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    5ab2:	df df df df df df df df 00 00 df df df df 00 00     ................
    5ac2:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    5ae2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5af2:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5b02:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b42:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5b52:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b72:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5bc2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5be6:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5bf6:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    5c06:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5c22:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5c32:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    5c42:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5c62:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    5c72:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    5c82:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    5ca2:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5cb2:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5cc2:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    5ce2:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    5cf2:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    5d02:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5d26:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    5d36:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    5d46:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    5d62:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    5d72:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    5d82:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5da2:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    5db2:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    5dc2:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5de2:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    5df2:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5e02:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    5e22:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e32:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e42:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5e62:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e72:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    5e82:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    5eaa:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5ec2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5eda:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5eea:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5efa:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f0a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f1a:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    5f2a:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5f3a:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5f4a:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f6a:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f82:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f9a:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    5faa:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5fba:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5fca:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5fe2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5ff2:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    600a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6022:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6032:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    6042:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    6062:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6072:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6082:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    60a2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60b2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60c2:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    60e2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60f2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6102:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6122:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    6132:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6142:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6162:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6172:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6182:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    61a2:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61b2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    61c2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    61e2:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61f2:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    6202:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    6222:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6232:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6242:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6262:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6272:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6282:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    62a6:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    62b6:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    62c6:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    62e2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    62f2:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    6302:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6322:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6332:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6342:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6362:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    6372:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    6382:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    63a2:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    63b2:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    63c2:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    63e2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    63f2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6402:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6422:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6432:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6442:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6462:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6472:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6482:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    64a2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    64b2:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    64c2:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    64e2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    64f2:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6502:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6522:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6532:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6542:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6562:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6572:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6582:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    65a2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65b2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65c2:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    65e2:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    65f2:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    6602:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    6622:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6632:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    6642:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6662:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6672:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    6682:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    66a2:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    66b2:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    66c2:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    66e2:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    66f2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6702:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    6722:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6732:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    6742:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    6762:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6772:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6782:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    67a6:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    67b6:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    680a:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

0000681a <map_sub_emerging>:
    681a:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    682a:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    683a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    684a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    685a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    686a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    687a:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    688a:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    689a:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    68aa:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    68ba:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    68ca:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    68da:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68ea:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    68fa:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    690a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    691a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    692a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    693a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    694a:	0d 0d 0d 0d 0d 0d                                   ......

00006950 <map_sub>:
    6950:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6960:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    6970:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6980:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6990:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69a0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    69b0:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    69c0:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    69d0:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    69e0:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    69f0:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    6a00:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    6a10:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a20:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    6a30:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a40:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a50:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a60:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a70:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a80:	0d 0d 0d 0d 0d 0d                                   ......

00006a86 <map_scope_2>:
    6a86:	01 01 12                                            ...

00006a89 <map_scope_1>:
    6a89:	01 01 11                                            ...

00006a8c <map_scope_0>:
    6a8c:	01 01 10                                            ...

00006a8f <map_blue_tank>:
    6a8f:	02 02 2b 2c 31 32                                   ..+,12

00006a95 <map_green_tank>:
    6a95:	02 02 18 19 23 24                                   ....#$

00006a9b <map_fence>:
    6a9b:	01 01 0f                                            ...

00006a9e <map_turf>:
    6a9e:	01 01 0e                                            ...

00006aa1 <map_water>:
    6aa1:	01 01 0d                                            ...

00006aa4 <map_metal_bl>:
    6aa4:	01 01 0c                                            ...

00006aa7 <map_metal_tr>:
    6aa7:	01 01 0b                                            ...

00006aaa <map_metal_br>:
    6aaa:	01 01 0a                                            ...

00006aad <map_metal_tl>:
    6aad:	01 01 09                                            ...

00006ab0 <map_tile_exp_2>:
    6ab0:	01 01 08                                            ...

00006ab3 <map_tile_exp_1>:
    6ab3:	01 01 07                                            ...

00006ab6 <map_tile_exp_0>:
    6ab6:	01 01 06                                            ...

00006ab9 <map_rocket_itm>:
    6ab9:	01 01 04                                            ...

00006abc <map_explode_itm>:
    6abc:	01 01 03                                            ...

00006abf <map_speed_itm>:
    6abf:	01 01 02                                            ...

00006ac2 <map_metal>:
    6ac2:	01 01 05                                            ...

00006ac5 <map_brick>:
    6ac5:	01 01 01                                            ...

00006ac8 <map_splash>:
    6ac8:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    6ad8:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    6ae8:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    6af8:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    6b08:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    6b18:	1a 00 00 1a 2f 30                                   ..../0

00006b1e <map_pause>:
    6b1e:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    6b2e:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    6b3e:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    6b4e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00006b5c <map_tile_none>:
    6b5c:	01 01 00 00                                         ....

00006b60 <__ctors_end>:
    6b60:	11 24       	eor	r1, r1
    6b62:	1f be       	out	0x3f, r1	; 63
    6b64:	cf ef       	ldi	r28, 0xFF	; 255
    6b66:	d0 e1       	ldi	r29, 0x10	; 16
    6b68:	de bf       	out	0x3e, r29	; 62
    6b6a:	cd bf       	out	0x3d, r28	; 61

00006b6c <__do_copy_data>:
    6b6c:	11 e0       	ldi	r17, 0x01	; 1
    6b6e:	a0 e0       	ldi	r26, 0x00	; 0
    6b70:	b1 e0       	ldi	r27, 0x01	; 1
    6b72:	ea eb       	ldi	r30, 0xBA	; 186
    6b74:	fe ee       	ldi	r31, 0xEE	; 238
    6b76:	02 c0       	rjmp	.+4      	; 0x6b7c <__do_copy_data+0x10>
    6b78:	05 90       	lpm	r0, Z+
    6b7a:	0d 92       	st	X+, r0
    6b7c:	a4 35       	cpi	r26, 0x54	; 84
    6b7e:	b1 07       	cpc	r27, r17
    6b80:	d9 f7       	brne	.-10     	; 0x6b78 <__do_copy_data+0xc>

00006b82 <__do_clear_bss>:
    6b82:	10 e1       	ldi	r17, 0x10	; 16
    6b84:	a4 e5       	ldi	r26, 0x54	; 84
    6b86:	b1 e0       	ldi	r27, 0x01	; 1
    6b88:	01 c0       	rjmp	.+2      	; 0x6b8c <.do_clear_bss_start>

00006b8a <.do_clear_bss_loop>:
    6b8a:	1d 92       	st	X+, r1

00006b8c <.do_clear_bss_start>:
    6b8c:	a9 36       	cpi	r26, 0x69	; 105
    6b8e:	b1 07       	cpc	r27, r17
    6b90:	e1 f7       	brne	.-8      	; 0x6b8a <.do_clear_bss_loop>

00006b92 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6b92:	0e 94 7f 3a 	call	0x74fe	; 0x74fe <wdt_randomize>
#endif

    MCUSR = 0;
    6b96:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6b98:	88 e1       	ldi	r24, 0x18	; 24
    6b9a:	0f b6       	in	r0, 0x3f	; 63
    6b9c:	f8 94       	cli
    6b9e:	80 93 60 00 	sts	0x0060, r24
    6ba2:	10 92 60 00 	sts	0x0060, r1
    6ba6:	0f be       	out	0x3f, r0	; 63

00006ba8 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6ba8:	0e 94 41 3b 	call	0x7682	; 0x7682 <isEepromFormatted>
    6bac:	81 11       	cpse	r24, r1
    6bae:	02 c0       	rjmp	.+4      	; 0x6bb4 <Initialize+0xc>
    6bb0:	0e 94 1f 3b 	call	0x763e	; 0x763e <FormatEeprom>

	cli();
    6bb4:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6bb6:	c1 e0       	ldi	r28, 0x01	; 1
    6bb8:	c0 93 58 0a 	sts	0x0A58, r28
		tr4_barrel_hi=1;		
    6bbc:	c0 93 59 0a 	sts	0x0A59, r28
		tr4_params=0b00000001; //15 bits no divider (1)
    6bc0:	c0 93 57 0a 	sts	0x0A57, r28
	#endif

	#if UART == 1
		InitUartRxBuffer();
    6bc4:	0e 94 44 3c 	call	0x7888	; 0x7888 <InitUartRxBuffer>
		InitUartTxBuffer();
    6bc8:	0e 94 5d 3c 	call	0x78ba	; 0x78ba <InitUartTxBuffer>
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6bcc:	10 92 44 0a 	sts	0x0A44, r1
    6bd0:	10 92 4a 0a 	sts	0x0A4A, r1
    6bd4:	10 92 50 0a 	sts	0x0A50, r1
    6bd8:	10 92 56 0a 	sts	0x0A56, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6bdc:	10 92 1e 0a 	sts	0x0A1E, r1
	sync_flags=0;
    6be0:	10 92 20 0a 	sts	0x0A20, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6be4:	82 e1       	ldi	r24, 0x12	; 18
    6be6:	80 93 1f 0a 	sts	0x0A1F, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6bea:	80 ee       	ldi	r24, 0xE0	; 224
    6bec:	80 93 26 0a 	sts	0x0A26, r24
	first_render_line=FIRST_RENDER_LINE;
    6bf0:	84 e1       	ldi	r24, 0x14	; 20
    6bf2:	80 93 25 0a 	sts	0x0A25, r24

	joypad1_status_hi=0;
    6bf6:	10 92 2a 0a 	sts	0x0A2A, r1
    6bfa:	10 92 29 0a 	sts	0x0A29, r1
	joypad2_status_hi=0;
    6bfe:	10 92 2e 0a 	sts	0x0A2E, r1
    6c02:	10 92 2d 0a 	sts	0x0A2D, r1
	sound_enabled=1;
    6c06:	c0 93 43 0a 	sts	0x0A43, r28

	InitializeVideoMode();
    6c0a:	0e 94 5e 48 	call	0x90bc	; 0x90bc <InitializeVideoMode>
    6c0e:	80 e7       	ldi	r24, 0x70	; 112
    6c10:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6c12:	fc 01       	movw	r30, r24
    6c14:	25 91       	lpm	r18, Z+
    6c16:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6c18:	f9 01       	movw	r30, r18
    6c1a:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6c1c:	30 83       	st	Z, r19
    6c1e:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6c20:	20 e0       	ldi	r18, 0x00	; 0
    6c22:	8e 39       	cpi	r24, 0x9E	; 158
    6c24:	92 07       	cpc	r25, r18
    6c26:	a9 f7       	brne	.-22     	; 0x6c12 <Initialize+0x6a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6c28:	78 94       	sei
	
	DisplayLogo();
    6c2a:	0e 94 5d 48 	call	0x90ba	; 0x90ba <DisplayLogo>
    6c2e:	0e 94 ef 70 	call	0xe1de	; 0xe1de <main>
    6c32:	0c 94 5b 77 	jmp	0xeeb6	; 0xeeb6 <_exit>

00006c36 <__bad_interrupt>:
    6c36:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006c3a <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    6c3a:	0b e9       	ldi	r16, 0x9B	; 155
    6c3c:	0a 95       	dec	r16
    6c3e:	f1 f7       	brne	.-4      	; 0x6c3c <sub_video_mode3+0x2>
		dec r19
		brne 1b

#else

		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1
    6c40:	10 e0       	ldi	r17, 0x00	; 0
    6c42:	1a 95       	dec	r17
    6c44:	f1 f7       	brne	.-4      	; 0x6c42 <sub_video_mode3+0x8>
    6c46:	1e e1       	ldi	r17, 0x1E	; 30
    6c48:	1a 95       	dec	r17
    6c4a:	f1 f7       	brne	.-4      	; 0x6c48 <sub_video_mode3+0xe>

#endif


		lds r2,overlay_tile_table
    6c4c:	20 90 1b 0a 	lds	r2, 0x0A1B
		lds r3,overlay_tile_table+1
    6c50:	30 90 1c 0a 	lds	r3, 0x0A1C
		lds r16,tile_table_lo 
    6c54:	00 91 17 0a 	lds	r16, 0x0A17
		lds r17,tile_table_hi
    6c58:	10 91 18 0a 	lds	r17, 0x0A18
		movw r12,r16
    6c5c:	68 01       	movw	r12, r16
		movw r6,r16
    6c5e:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6c60:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6c62:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6c64:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6c66:	4e 01       	movw	r8, r28
		clr r0
    6c68:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6c6a:	30 91 1a 0a 	lds	r19, 0x0A1A
		cpi r19,0
    6c6e:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6c70:	09 f0       	breq	.+2      	; 0x6c74 <sub_video_mode3+0x3a>
		ldi YL,lo8(overlay_vram)
    6c72:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    6c74:	09 f0       	breq	.+2      	; 0x6c78 <sub_video_mode3+0x3e>
		ldi YH,hi8(overlay_vram)
    6c76:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6c78:	09 f0       	breq	.+2      	; 0x6c7c <sub_video_mode3+0x42>
		mov r24,r19
    6c7a:	83 2f       	mov	r24, r19

		breq .+2
    6c7c:	09 f0       	breq	.+2      	; 0x6c80 <sub_video_mode3+0x46>
		movw r12,r2
    6c7e:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6c80:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6c82:	a0 2e       	mov	r10, r16
		clr r22
    6c84:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6c86:	78 e0       	ldi	r23, 0x08	; 8

00006c88 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6c88:	07 d3       	rcall	.+1550   	; 0x7298 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6c8a:	3c e0       	ldi	r19, 0x0C	; 12
    6c8c:	3a 95       	dec	r19
    6c8e:	f1 f7       	brne	.-4      	; 0x6c8c <next_tile_line+0x4>
    6c90:	00 00       	nop

		;***draw line***
		call render_tile_line
    6c92:	0e 94 75 36 	call	0x6cea	; 0x6cea <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6c96:	3f e0       	ldi	r19, 0x0F	; 15
    6c98:	3a 95       	dec	r19
    6c9a:	f1 f7       	brne	.-4      	; 0x6c98 <next_tile_line+0x10>
    6c9c:	00 c0       	rjmp	.+0      	; 0x6c9e <next_tile_line+0x16>

		dec r10
    6c9e:	aa 94       	dec	r10
		breq frame_end
    6ca0:	a1 f0       	breq	.+40     	; 0x6cca <frame_end>
	
		inc r22
    6ca2:	63 95       	inc	r22
		lpm ;3 nop
    6ca4:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6ca6:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6ca8:	29 f0       	breq	.+10     	; 0x6cb4 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6caa:	33 e0       	ldi	r19, 0x03	; 3
    6cac:	3a 95       	dec	r19
    6cae:	f1 f7       	brne	.-4      	; 0x6cac <next_tile_line+0x24>
    6cb0:	00 c0       	rjmp	.+0      	; 0x6cb2 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    6cb2:	ea cf       	rjmp	.-44     	; 0x6c88 <next_tile_line>

00006cb4 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6cb4:	66 27       	eor	r22, r22

		clr r0
    6cb6:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6cb8:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6cba:	c3 0f       	add	r28, r19
		adc YH,r0
    6cbc:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6cbe:	8a 95       	dec	r24
		brne .+2
    6cc0:	09 f4       	brne	.+2      	; 0x6cc4 <next_tile_row+0x10>
		movw YL,r8	;main vram
    6cc2:	e4 01       	movw	r28, r8
		brne .+2
    6cc4:	09 f4       	brne	.+2      	; 0x6cc8 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6cc6:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6cc8:	df cf       	rjmp	.-66     	; 0x6c88 <next_tile_line>

00006cca <frame_end>:

	frame_end:

		WAIT r19,18
    6cca:	36 e0       	ldi	r19, 0x06	; 6
    6ccc:	3a 95       	dec	r19
    6cce:	f1 f7       	brne	.-4      	; 0x6ccc <frame_end+0x2>

		rcall hsync_pulse ;145
    6cd0:	e3 d2       	rcall	.+1478   	; 0x7298 <hsync_pulse>
		clr r1
		call RestoreBackground
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    6cd2:	e0 91 20 0a 	lds	r30, 0x0A20
		ldi r20,SYNC_FLAG_FIELD
    6cd6:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6cd8:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6cda:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6cdc:	e0 93 20 0a 	sts	0x0A20, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6ce0:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6ce2:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6ce6:	11 24       	eor	r1, r1


		ret
    6ce8:	08 95       	ret

00006cea <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6cea:	de 01       	movw	r26, r28

		mul r22,r23
    6cec:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6cee:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6cf0:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6cf2:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    6cf4:	00 0d       	add	r16, r0
		adc r17,r1
    6cf6:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6cf8:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6cfa:	00 ed       	ldi	r16, 0xD0	; 208
		ldi r17,hi8(ram_tiles)
    6cfc:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6cfe:	00 0d       	add	r16, r0
		adc r17,r1
    6d00:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6d02:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6d04:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6d06:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6d08:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6d0a:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6d0c:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6d0e:	24 31       	cpi	r18, 0x14	; 20
		brcc .+2
    6d10:	08 f4       	brcc	.+2      	; 0x6d14 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6d12:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6d14:	04 0e       	add	r0, r20
	    adc r1,r21
    6d16:	15 1e       	adc	r1, r21

		movw ZL,r0
    6d18:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6d1a:	24 31       	cpi	r18, 0x14	; 20
		brcs ramloop
    6d1c:	f0 f0       	brcs	.+60     	; 0x6d5a <ramloop>

00006d1e <romloop>:
	

	romloop:
	    lpm r16,Z+
    6d1e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6d20:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6d22:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6d24:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6d26:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6d28:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6d2a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6d2c:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6d2e:	24 31       	cpi	r18, 0x14	; 20
		nop
    6d30:	00 00       	nop

	    lpm r16,Z+
    6d32:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6d34:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6d36:	08 f4       	brcc	.+2      	; 0x6d3a <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6d38:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6d3a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6d3c:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6d3e:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6d40:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6d42:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6d44:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6d46:	24 31       	cpi	r18, 0x14	; 20
		dec r17			;decrement tiles to draw on line
    6d48:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6d4a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6d4c:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6d4e:	05 91       	lpm	r16, Z+

		breq end	
    6d50:	31 f1       	breq	.+76     	; 0x6d9e <end>
	    movw ZL,r0   	;copy next tile adress
    6d52:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6d54:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6d56:	18 f7       	brcc	.-58     	; 0x6d1e <romloop>
	
		rjmp .
    6d58:	00 c0       	rjmp	.+0      	; 0x6d5a <ramloop>

00006d5a <ramloop>:

	ramloop:

	    ld r16,Z+
    6d5a:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6d5c:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6d5e:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6d60:	01 91       	ld	r16, Z+
		nop   
    6d62:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6d64:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6d66:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6d68:	01 91       	ld	r16, Z+
		nop
    6d6a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6d6c:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6d6e:	24 31       	cpi	r18, 0x14	; 20
   		rjmp .
    6d70:	00 c0       	rjmp	.+0      	; 0x6d72 <ramloop+0x18>

	    ld r16,Z+
    6d72:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6d74:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6d76:	08 f0       	brcs	.+2      	; 0x6d7a <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6d78:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6d7a:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6d7c:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6d7e:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6d80:	15 1e       	adc	r1, r21
		rjmp .
    6d82:	00 c0       	rjmp	.+0      	; 0x6d84 <ramloop+0x2a>
    
		ld r16,Z+		
    6d84:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6d86:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6d88:	24 31       	cpi	r18, 0x14	; 20
		rjmp .  
    6d8a:	00 c0       	rjmp	.+0      	; 0x6d8c <ramloop+0x32>

	    ld r16,Z+	
    6d8c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6d8e:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6d90:	01 91       	ld	r16, Z+

	    dec r17
    6d92:	1a 95       	dec	r17
	    breq end
    6d94:	21 f0       	breq	.+8      	; 0x6d9e <end>
	
		movw ZL,r0
    6d96:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6d98:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6d9a:	08 f6       	brcc	.-126    	; 0x6d1e <romloop>
		rjmp ramloop
    6d9c:	de cf       	rjmp	.-68     	; 0x6d5a <ramloop>

00006d9e <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6d9e:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6da0:	00 27       	eor	r16, r16
		lpm	
    6da2:	c8 95       	lpm
		nop
    6da4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6da6:	08 b9       	out	0x08, r16	; 8

		ret
    6da8:	08 95       	ret

00006daa <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6daa:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6dac:	e0 91 17 0a 	lds	r30, 0x0A17
	lds ZH,tile_table_hi
    6db0:	f0 91 18 0a 	lds	r31, 0x0A18
	mul r24,r18
    6db4:	82 9f       	mul	r24, r18
	add ZL,r0
    6db6:	e0 0d       	add	r30, r0
	adc ZH,r1
    6db8:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6dba:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6dbc:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6dbe:	62 9f       	mul	r22, r18
	add XL,r0
    6dc0:	a0 0d       	add	r26, r0
	adc XH,r1
    6dc2:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6dc4:	15 90       	lpm	r1, Z+
    6dc6:	1d 92       	st	X+, r1
    6dc8:	15 90       	lpm	r1, Z+
    6dca:	1d 92       	st	X+, r1
    6dcc:	15 90       	lpm	r1, Z+
    6dce:	1d 92       	st	X+, r1
    6dd0:	15 90       	lpm	r1, Z+
    6dd2:	1d 92       	st	X+, r1
    6dd4:	15 90       	lpm	r1, Z+
    6dd6:	1d 92       	st	X+, r1
    6dd8:	15 90       	lpm	r1, Z+
    6dda:	1d 92       	st	X+, r1
    6ddc:	15 90       	lpm	r1, Z+
    6dde:	1d 92       	st	X+, r1
    6de0:	15 90       	lpm	r1, Z+
    6de2:	1d 92       	st	X+, r1
    6de4:	15 90       	lpm	r1, Z+
    6de6:	1d 92       	st	X+, r1
    6de8:	15 90       	lpm	r1, Z+
    6dea:	1d 92       	st	X+, r1
    6dec:	15 90       	lpm	r1, Z+
    6dee:	1d 92       	st	X+, r1
    6df0:	15 90       	lpm	r1, Z+
    6df2:	1d 92       	st	X+, r1
    6df4:	15 90       	lpm	r1, Z+
    6df6:	1d 92       	st	X+, r1
    6df8:	15 90       	lpm	r1, Z+
    6dfa:	1d 92       	st	X+, r1
    6dfc:	15 90       	lpm	r1, Z+
    6dfe:	1d 92       	st	X+, r1
    6e00:	15 90       	lpm	r1, Z+
    6e02:	1d 92       	st	X+, r1
    6e04:	15 90       	lpm	r1, Z+
    6e06:	1d 92       	st	X+, r1
    6e08:	15 90       	lpm	r1, Z+
    6e0a:	1d 92       	st	X+, r1
    6e0c:	15 90       	lpm	r1, Z+
    6e0e:	1d 92       	st	X+, r1
    6e10:	15 90       	lpm	r1, Z+
    6e12:	1d 92       	st	X+, r1
    6e14:	15 90       	lpm	r1, Z+
    6e16:	1d 92       	st	X+, r1
    6e18:	15 90       	lpm	r1, Z+
    6e1a:	1d 92       	st	X+, r1
    6e1c:	15 90       	lpm	r1, Z+
    6e1e:	1d 92       	st	X+, r1
    6e20:	15 90       	lpm	r1, Z+
    6e22:	1d 92       	st	X+, r1
    6e24:	15 90       	lpm	r1, Z+
    6e26:	1d 92       	st	X+, r1
    6e28:	15 90       	lpm	r1, Z+
    6e2a:	1d 92       	st	X+, r1
    6e2c:	15 90       	lpm	r1, Z+
    6e2e:	1d 92       	st	X+, r1
    6e30:	15 90       	lpm	r1, Z+
    6e32:	1d 92       	st	X+, r1
    6e34:	15 90       	lpm	r1, Z+
    6e36:	1d 92       	st	X+, r1
    6e38:	15 90       	lpm	r1, Z+
    6e3a:	1d 92       	st	X+, r1
    6e3c:	15 90       	lpm	r1, Z+
    6e3e:	1d 92       	st	X+, r1
    6e40:	15 90       	lpm	r1, Z+
    6e42:	1d 92       	st	X+, r1
    6e44:	15 90       	lpm	r1, Z+
    6e46:	1d 92       	st	X+, r1
    6e48:	15 90       	lpm	r1, Z+
    6e4a:	1d 92       	st	X+, r1
    6e4c:	15 90       	lpm	r1, Z+
    6e4e:	1d 92       	st	X+, r1
    6e50:	15 90       	lpm	r1, Z+
    6e52:	1d 92       	st	X+, r1
    6e54:	15 90       	lpm	r1, Z+
    6e56:	1d 92       	st	X+, r1
    6e58:	15 90       	lpm	r1, Z+
    6e5a:	1d 92       	st	X+, r1
    6e5c:	15 90       	lpm	r1, Z+
    6e5e:	1d 92       	st	X+, r1
    6e60:	15 90       	lpm	r1, Z+
    6e62:	1d 92       	st	X+, r1
    6e64:	15 90       	lpm	r1, Z+
    6e66:	1d 92       	st	X+, r1
    6e68:	15 90       	lpm	r1, Z+
    6e6a:	1d 92       	st	X+, r1
    6e6c:	15 90       	lpm	r1, Z+
    6e6e:	1d 92       	st	X+, r1
    6e70:	15 90       	lpm	r1, Z+
    6e72:	1d 92       	st	X+, r1
    6e74:	15 90       	lpm	r1, Z+
    6e76:	1d 92       	st	X+, r1
    6e78:	15 90       	lpm	r1, Z+
    6e7a:	1d 92       	st	X+, r1
    6e7c:	15 90       	lpm	r1, Z+
    6e7e:	1d 92       	st	X+, r1
    6e80:	15 90       	lpm	r1, Z+
    6e82:	1d 92       	st	X+, r1
    6e84:	15 90       	lpm	r1, Z+
    6e86:	1d 92       	st	X+, r1
    6e88:	15 90       	lpm	r1, Z+
    6e8a:	1d 92       	st	X+, r1
    6e8c:	15 90       	lpm	r1, Z+
    6e8e:	1d 92       	st	X+, r1
    6e90:	15 90       	lpm	r1, Z+
    6e92:	1d 92       	st	X+, r1
    6e94:	15 90       	lpm	r1, Z+
    6e96:	1d 92       	st	X+, r1
    6e98:	15 90       	lpm	r1, Z+
    6e9a:	1d 92       	st	X+, r1
    6e9c:	15 90       	lpm	r1, Z+
    6e9e:	1d 92       	st	X+, r1
    6ea0:	15 90       	lpm	r1, Z+
    6ea2:	1d 92       	st	X+, r1
    6ea4:	15 90       	lpm	r1, Z+
    6ea6:	1d 92       	st	X+, r1
    6ea8:	15 90       	lpm	r1, Z+
    6eaa:	1d 92       	st	X+, r1
    6eac:	15 90       	lpm	r1, Z+
    6eae:	1d 92       	st	X+, r1
    6eb0:	15 90       	lpm	r1, Z+
    6eb2:	1d 92       	st	X+, r1
    6eb4:	15 90       	lpm	r1, Z+
    6eb6:	1d 92       	st	X+, r1
    6eb8:	15 90       	lpm	r1, Z+
    6eba:	1d 92       	st	X+, r1
    6ebc:	15 90       	lpm	r1, Z+
    6ebe:	1d 92       	st	X+, r1
    6ec0:	15 90       	lpm	r1, Z+
    6ec2:	1d 92       	st	X+, r1
	clr r1
    6ec4:	11 24       	eor	r1, r1
	ret
    6ec6:	08 95       	ret

00006ec8 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6ec8:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6eca:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(ram_tiles)
    6ecc:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    6ece:	82 9f       	mul	r24, r18
	add ZL,r0
    6ed0:	e0 0d       	add	r30, r0
	adc ZH,r1
    6ed2:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6ed4:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6ed6:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6ed8:	62 9f       	mul	r22, r18
	add XL,r0
    6eda:	a0 0d       	add	r26, r0
	adc XH,r1
    6edc:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6ede:	11 90       	ld	r1, Z+
    6ee0:	1d 92       	st	X+, r1
    6ee2:	11 90       	ld	r1, Z+
    6ee4:	1d 92       	st	X+, r1
    6ee6:	11 90       	ld	r1, Z+
    6ee8:	1d 92       	st	X+, r1
    6eea:	11 90       	ld	r1, Z+
    6eec:	1d 92       	st	X+, r1
    6eee:	11 90       	ld	r1, Z+
    6ef0:	1d 92       	st	X+, r1
    6ef2:	11 90       	ld	r1, Z+
    6ef4:	1d 92       	st	X+, r1
    6ef6:	11 90       	ld	r1, Z+
    6ef8:	1d 92       	st	X+, r1
    6efa:	11 90       	ld	r1, Z+
    6efc:	1d 92       	st	X+, r1
    6efe:	11 90       	ld	r1, Z+
    6f00:	1d 92       	st	X+, r1
    6f02:	11 90       	ld	r1, Z+
    6f04:	1d 92       	st	X+, r1
    6f06:	11 90       	ld	r1, Z+
    6f08:	1d 92       	st	X+, r1
    6f0a:	11 90       	ld	r1, Z+
    6f0c:	1d 92       	st	X+, r1
    6f0e:	11 90       	ld	r1, Z+
    6f10:	1d 92       	st	X+, r1
    6f12:	11 90       	ld	r1, Z+
    6f14:	1d 92       	st	X+, r1
    6f16:	11 90       	ld	r1, Z+
    6f18:	1d 92       	st	X+, r1
    6f1a:	11 90       	ld	r1, Z+
    6f1c:	1d 92       	st	X+, r1
    6f1e:	11 90       	ld	r1, Z+
    6f20:	1d 92       	st	X+, r1
    6f22:	11 90       	ld	r1, Z+
    6f24:	1d 92       	st	X+, r1
    6f26:	11 90       	ld	r1, Z+
    6f28:	1d 92       	st	X+, r1
    6f2a:	11 90       	ld	r1, Z+
    6f2c:	1d 92       	st	X+, r1
    6f2e:	11 90       	ld	r1, Z+
    6f30:	1d 92       	st	X+, r1
    6f32:	11 90       	ld	r1, Z+
    6f34:	1d 92       	st	X+, r1
    6f36:	11 90       	ld	r1, Z+
    6f38:	1d 92       	st	X+, r1
    6f3a:	11 90       	ld	r1, Z+
    6f3c:	1d 92       	st	X+, r1
    6f3e:	11 90       	ld	r1, Z+
    6f40:	1d 92       	st	X+, r1
    6f42:	11 90       	ld	r1, Z+
    6f44:	1d 92       	st	X+, r1
    6f46:	11 90       	ld	r1, Z+
    6f48:	1d 92       	st	X+, r1
    6f4a:	11 90       	ld	r1, Z+
    6f4c:	1d 92       	st	X+, r1
    6f4e:	11 90       	ld	r1, Z+
    6f50:	1d 92       	st	X+, r1
    6f52:	11 90       	ld	r1, Z+
    6f54:	1d 92       	st	X+, r1
    6f56:	11 90       	ld	r1, Z+
    6f58:	1d 92       	st	X+, r1
    6f5a:	11 90       	ld	r1, Z+
    6f5c:	1d 92       	st	X+, r1
    6f5e:	11 90       	ld	r1, Z+
    6f60:	1d 92       	st	X+, r1
    6f62:	11 90       	ld	r1, Z+
    6f64:	1d 92       	st	X+, r1
    6f66:	11 90       	ld	r1, Z+
    6f68:	1d 92       	st	X+, r1
    6f6a:	11 90       	ld	r1, Z+
    6f6c:	1d 92       	st	X+, r1
    6f6e:	11 90       	ld	r1, Z+
    6f70:	1d 92       	st	X+, r1
    6f72:	11 90       	ld	r1, Z+
    6f74:	1d 92       	st	X+, r1
    6f76:	11 90       	ld	r1, Z+
    6f78:	1d 92       	st	X+, r1
    6f7a:	11 90       	ld	r1, Z+
    6f7c:	1d 92       	st	X+, r1
    6f7e:	11 90       	ld	r1, Z+
    6f80:	1d 92       	st	X+, r1
    6f82:	11 90       	ld	r1, Z+
    6f84:	1d 92       	st	X+, r1
    6f86:	11 90       	ld	r1, Z+
    6f88:	1d 92       	st	X+, r1
    6f8a:	11 90       	ld	r1, Z+
    6f8c:	1d 92       	st	X+, r1
    6f8e:	11 90       	ld	r1, Z+
    6f90:	1d 92       	st	X+, r1
    6f92:	11 90       	ld	r1, Z+
    6f94:	1d 92       	st	X+, r1
    6f96:	11 90       	ld	r1, Z+
    6f98:	1d 92       	st	X+, r1
    6f9a:	11 90       	ld	r1, Z+
    6f9c:	1d 92       	st	X+, r1
    6f9e:	11 90       	ld	r1, Z+
    6fa0:	1d 92       	st	X+, r1
    6fa2:	11 90       	ld	r1, Z+
    6fa4:	1d 92       	st	X+, r1
    6fa6:	11 90       	ld	r1, Z+
    6fa8:	1d 92       	st	X+, r1
    6faa:	11 90       	ld	r1, Z+
    6fac:	1d 92       	st	X+, r1
    6fae:	11 90       	ld	r1, Z+
    6fb0:	1d 92       	st	X+, r1
    6fb2:	11 90       	ld	r1, Z+
    6fb4:	1d 92       	st	X+, r1
    6fb6:	11 90       	ld	r1, Z+
    6fb8:	1d 92       	st	X+, r1
    6fba:	11 90       	ld	r1, Z+
    6fbc:	1d 92       	st	X+, r1
    6fbe:	11 90       	ld	r1, Z+
    6fc0:	1d 92       	st	X+, r1
    6fc2:	11 90       	ld	r1, Z+
    6fc4:	1d 92       	st	X+, r1
    6fc6:	11 90       	ld	r1, Z+
    6fc8:	1d 92       	st	X+, r1
    6fca:	11 90       	ld	r1, Z+
    6fcc:	1d 92       	st	X+, r1
    6fce:	11 90       	ld	r1, Z+
    6fd0:	1d 92       	st	X+, r1
    6fd2:	11 90       	ld	r1, Z+
    6fd4:	1d 92       	st	X+, r1
    6fd6:	11 90       	ld	r1, Z+
    6fd8:	1d 92       	st	X+, r1
    6fda:	11 90       	ld	r1, Z+
    6fdc:	1d 92       	st	X+, r1
	clr r1
    6fde:	11 24       	eor	r1, r1
	ret
    6fe0:	08 95       	ret

00006fe2 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    6fe2:	e0 91 0d 0a 	lds	r30, 0x0A0D
	mov   r24,     ZL
    6fe6:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    6fe8:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    6fea:	e8 0f       	add	r30, r24
	clr   ZH
    6fec:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    6fee:	e0 53       	subi	r30, 0x30	; 48
	sbci  ZH,      hi8(-(ram_tiles_restore))
    6ff0:	f6 4f       	sbci	r31, 0xF6	; 246

	lds   r0,      free_tile_index
    6ff2:	00 90 0c 0a 	lds	r0, 0x0A0C
	sub   r24,     r0
    6ff6:	80 19       	sub	r24, r0
	brcc  rbg_exit
    6ff8:	30 f4       	brcc	.+12     	; 0x7006 <rbg_exit>

00006ffa <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    6ffa:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    6ffc:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    6ffe:	01 90       	ld	r0, Z+
	st    X,       r0
    7000:	0c 92       	st	X, r0
	inc   r24
    7002:	83 95       	inc	r24
	brne  rbg_loop
    7004:	d1 f7       	brne	.-12     	; 0x6ffa <rbg_loop>

00007006 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    7006:	08 95       	ret

00007008 <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    7008:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    700a:	79 9f       	mul	r23, r25
	mov   XL,      r1
    700c:	a1 2d       	mov	r26, r1
	clr   XH
    700e:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    7010:	a1 5f       	subi	r26, 0xF1	; 241
	sbci  XH,      hi8(-(sprites_tile_banks))
    7012:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    7014:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    7016:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7018:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    701a:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    701c:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    701e:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    7020:	89 9f       	mul	r24, r25
	movw  XL,      r0
    7022:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7024:	a0 53       	subi	r26, 0x30	; 48
	sbci  XH,      hi8(-(ram_tiles))
    7026:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    7028:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    702a:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    702c:	09 c0       	rjmp	.+18     	; 0x7040 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    702e:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    7030:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7032:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7034:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7036:	0a c0       	rjmp	.+20     	; 0x704c <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    7038:	17 96       	adiw	r26, 0x07	; 7

0000703a <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    703a:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    703c:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    703e:	08 c0       	rjmp	.+16     	; 0x7050 <x_check_end>

00007040 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    7040:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7042:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7044:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7046:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    7048:	f8 cf       	rjmp	.-16     	; 0x703a <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    704a:	11 97       	sbiw	r26, 0x01	; 1

0000704c <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    704c:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    704e:	b9 1f       	adc	r27, r25

00007050 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    7050:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7052:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7054:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7056:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7058:	09 c0       	rjmp	.+18     	; 0x706c <y_2nd_tile>

	mul   r22,     r19
    705a:	63 9f       	mul	r22, r19
	add   XL,      r0
    705c:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    705e:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7060:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7062:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7064:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7066:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    7068:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    706a:	08 c0       	rjmp	.+16     	; 0x707c <y_check_end>

0000706c <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    706c:	13 2e       	mov	r1, r19
	dec   r1
    706e:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    7070:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    7072:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    7074:	61 9d       	mul	r22, r1
	add   ZL,      r0
    7076:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7078:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    707a:	13 2e       	mov	r1, r19

0000707c <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    707c:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    707e:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    7080:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    7082:	05 c0       	rjmp	.+10     	; 0x708e <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    7084:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    7086:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    7088:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    708a:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    708c:	04 c0       	rjmp	.+8      	; 0x7096 <x_diff_end>

0000708e <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    708e:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    7090:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    7092:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    7094:	6f ef       	ldi	r22, 0xFF	; 255

00007096 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    7096:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    7098:	04 2e       	mov	r0, r20
	lsr   r20
    709a:	46 95       	lsr	r20
	brcc  x_loop1
    709c:	30 f4       	brcc	.+12     	; 0x70aa <x_loop1>
	breq  x_loopx
    709e:	61 f0       	breq	.+24     	; 0x70b8 <x_loopx>

000070a0 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70a0:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70a2:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70a4:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    70a6:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    70a8:	b7 1f       	adc	r27, r23

000070aa <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70aa:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70ac:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70ae:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    70b0:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    70b2:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    70b4:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    70b6:	a1 f7       	brne	.-24     	; 0x70a0 <x_loop0>

000070b8 <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70b8:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70ba:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70bc:	2c 93       	st	X, r18

	dec   r1
    70be:	1a 94       	dec	r1
	breq  loop_e
    70c0:	49 f0       	breq	.+18     	; 0x70d4 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    70c2:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    70c4:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    70c6:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    70c8:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    70ca:	40 2d       	mov	r20, r0
	lsr   r20
    70cc:	46 95       	lsr	r20
	brcc  x_loop1
    70ce:	68 f7       	brcc	.-38     	; 0x70aa <x_loop1>
	brne  x_loop0
    70d0:	39 f7       	brne	.-50     	; 0x70a0 <x_loop0>
	rjmp  x_loopx
    70d2:	f2 cf       	rjmp	.-28     	; 0x70b8 <x_loopx>

000070d4 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    70d4:	08 95       	ret

000070d6 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    70d6:	0f 92       	push	r0
	push  r1
    70d8:	1f 92       	push	r1
	push  ZL
    70da:	ef 93       	push	r30
	push  ZH
    70dc:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    70de:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    70e0:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    70e4:	ff 93       	push	r31

	sbrc  ZL,      2
    70e6:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    70e8:	04 c0       	rjmp	.+8      	; 0x70f2 <__vector_13+0x1c>
	sbrc  ZL,      1
    70ea:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    70ec:	02 c0       	rjmp	.+4      	; 0x70f2 <__vector_13+0x1c>
	nop
    70ee:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    70f0:	00 c0       	rjmp	.+0      	; 0x70f2 <__vector_13+0x1c>
	sbrs  ZL,      0
    70f2:	e0 ff       	sbrs	r30, 0
	rjmp  .
    70f4:	00 c0       	rjmp	.+0      	; 0x70f6 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    70f6:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    70fa:	ea 95       	dec	r30
	sts sync_pulse,ZL
    70fc:	e0 93 1f 0a 	sts	0x0A1F, r30

	;process sync phases
	lds ZH,sync_phase
    7100:	f0 91 1e 0a 	lds	r31, 0x0A1E
	sbrc ZH,0
    7104:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7106:	51 c0       	rjmp	.+162    	; 0x71aa <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7108:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    710a:	98 f0       	brcs	.+38     	; 0x7132 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    710c:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    710e:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7112:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7114:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7118:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    711a:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    711c:	26 f4       	brtc	.+8      	; 0x7126 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    711e:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7120:	0e 94 5d 39 	call	0x72ba	; 0x72ba <update_sound>
	rjmp sync_end
    7124:	b2 c0       	rjmp	.+356    	; 0x728a <sync_end>

00007126 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7126:	e5 e1       	ldi	r30, 0x15	; 21
    7128:	ea 95       	dec	r30
    712a:	f1 f7       	brne	.-4      	; 0x7128 <sync_pre_eq_no_sound_update+0x2>
    712c:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    712e:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7130:	ac c0       	rjmp	.+344    	; 0x728a <sync_end>

00007132 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7132:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7134:	08 f1       	brcs	.+66     	; 0x7178 <sync_post_eq>

	rjmp .
    7136:	00 c0       	rjmp	.+0      	; 0x7138 <sync_eq+0x6>
	rjmp .
    7138:	00 c0       	rjmp	.+0      	; 0x713a <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    713a:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    713c:	e0 fb       	bst	r30, 0
	ldi ZL,4
    713e:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7140:	16 f4       	brtc	.+4      	; 0x7146 <sync_eq_skip>
	
	call update_sound
    7142:	0e 94 5d 39 	call	0x72ba	; 0x72ba <update_sound>

00007146 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7146:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7148:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    714c:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    714e:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7152:	9b c0       	rjmp	.+310    	; 0x728a <sync_end>

00007154 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    7154:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7156:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    715a:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    715c:	04 c0       	rjmp	.+8      	; 0x7166 <__vector_14+0x12>
	sbrc  ZL,      1
    715e:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    7160:	02 c0       	rjmp	.+4      	; 0x7166 <__vector_14+0x12>
	nop
    7162:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    7164:	00 c0       	rjmp	.+0      	; 0x7166 <__vector_14+0x12>
	sbrs  ZL,      0
    7166:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7168:	00 c0       	rjmp	.+0      	; 0x716a <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    716a:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    716c:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    716e:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    7170:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    7174:	ef 91       	pop	r30
	reti
    7176:	18 95       	reti

00007178 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7178:	00 c0       	rjmp	.+0      	; 0x717a <sync_post_eq+0x2>

	bst ZL,0
    717a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    717c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    717e:	26 f4       	brtc	.+8      	; 0x7188 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7180:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7182:	0e 94 5d 39 	call	0x72ba	; 0x72ba <update_sound>
	rjmp sync_pre_eq_cont
    7186:	05 c0       	rjmp	.+10     	; 0x7192 <sync_pre_eq_cont>

00007188 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7188:	e5 e1       	ldi	r30, 0x15	; 21
    718a:	ea 95       	dec	r30
    718c:	f1 f7       	brne	.-4      	; 0x718a <sync_post_eq_no_sound_update+0x2>
    718e:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7190:	28 9a       	sbi	0x05, 0	; 5

00007192 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7192:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    7196:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7198:	09 f0       	breq	.+2      	; 0x719c <sync_pre_eq_cont+0xa>
	rjmp sync_end
    719a:	77 c0       	rjmp	.+238    	; 0x728a <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    719c:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    719e:	e0 93 1f 0a 	sts	0x0A1F, r30
	ldi ZL,1
    71a2:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    71a4:	e0 93 1e 0a 	sts	0x0A1E, r30
	
	rjmp sync_end
    71a8:	70 c0       	rjmp	.+224    	; 0x728a <sync_end>

000071aa <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    71aa:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    71ac:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    71b0:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    71b2:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    71b6:	00 c0       	rjmp	.+0      	; 0x71b8 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71b8:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    71ba:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    71bc:	00 c0       	rjmp	.+0      	; 0x71be <sync_hsync+0x14>
	call update_sound
    71be:	0e 94 5d 39 	call	0x72ba	; 0x72ba <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    71c2:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    71c4:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    71c8:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    71ca:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cp ZL,ZH
    71ce:	ef 17       	cp	r30, r31
	brsh no_render
    71d0:	d8 f4       	brcc	.+54     	; 0x7208 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    71d2:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    71d4:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    71d8:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    71da:	00 90 26 0a 	lds	r0, 0x0A26
	sub ZH,r0			
    71de:	f0 19       	sub	r31, r0
	cp ZL,ZH
    71e0:	ef 17       	cp	r30, r31
	brlo no_render
    71e2:	90 f0       	brcs	.+36     	; 0x7208 <no_render>

	;push r1-r29
	ldi ZL,29
    71e4:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    71e6:	ff 27       	eor	r31, r31

000071e8 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    71e8:	00 80       	ld	r0, Z
	push r0
    71ea:	0f 92       	push	r0
	dec ZL
    71ec:	ea 95       	dec	r30
	brne push_loop	
    71ee:	e1 f7       	brne	.-8      	; 0x71e8 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    71f0:	05 e0       	ldi	r16, 0x05	; 5
    71f2:	0a 95       	dec	r16
    71f4:	f1 f7       	brne	.-4      	; 0x71f2 <push_loop+0xa>
    71f6:	00 c0       	rjmp	.+0      	; 0x71f8 <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    71f8:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    71fc:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    71fe:	ff 27       	eor	r31, r31

00007200 <pop_loop>:
pop_loop:
	pop r0
    7200:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7202:	01 92       	st	Z+, r0
	cpi ZL,30
    7204:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7206:	e0 f3       	brcs	.-8      	; 0x7200 <pop_loop>

00007208 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7208:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    720c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    720e:	09 f0       	breq	.+2      	; 0x7212 <no_render+0xa>
	rjmp sync_end
    7210:	3c c0       	rjmp	.+120    	; 0x728a <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7212:	2f 93       	push	r18
	push r19
    7214:	3f 93       	push	r19
	push r20
    7216:	4f 93       	push	r20
	push r21
    7218:	5f 93       	push	r21
	push r22
    721a:	6f 93       	push	r22
	push r23
    721c:	7f 93       	push	r23
	push r24
    721e:	8f 93       	push	r24
	push r25
    7220:	9f 93       	push	r25
	push r26
    7222:	af 93       	push	r26
	push r27
    7224:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7226:	78 94       	sei
	clr r1
    7228:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    722a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    722c:	e0 93 1e 0a 	sts	0x0A1E, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7230:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7232:	e0 93 1f 0a 	sts	0x0A1F, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7236:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    723a:	90 91 30 0a 	lds	r25, 0x0A30
	adiw r24,1
    723e:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7240:	80 93 2f 0a 	sts	0x0A2F, r24
	sts vsync_counter+1,r25
    7244:	90 93 30 0a 	sts	0x0A30, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7248:	e0 91 21 0a 	lds	r30, 0x0A21
	lds ZH,pre_vsync_user_callback+1
    724c:	f0 91 22 0a 	lds	r31, 0x0A22
	cp  ZL,r1
    7250:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7252:	f1 05       	cpc	r31, r1
	breq .+2 
    7254:	09 f0       	breq	.+2      	; 0x7258 <no_render+0x50>
	icall
    7256:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7258:	0e 94 0f 3b 	call	0x761e	; 0x761e <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    725c:	0e 94 6c 49 	call	0x92d8	; 0x92d8 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7260:	0e 94 57 39 	call	0x72ae	; 0x72ae <process_music>
	clr r1
    7264:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7266:	e0 91 23 0a 	lds	r30, 0x0A23
	lds ZH,post_vsync_user_callback+1
    726a:	f0 91 24 0a 	lds	r31, 0x0A24
	cp  ZL,r1
    726e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7270:	f1 05       	cpc	r31, r1
	breq .+2 
    7272:	09 f0       	breq	.+2      	; 0x7276 <no_render+0x6e>
	icall
    7274:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7276:	bf 91       	pop	r27
	pop r26
    7278:	af 91       	pop	r26
	pop r25
    727a:	9f 91       	pop	r25
	pop r24
    727c:	8f 91       	pop	r24
	pop r23
    727e:	7f 91       	pop	r23
	pop r22
    7280:	6f 91       	pop	r22
	pop r21
    7282:	5f 91       	pop	r21
	pop r20
    7284:	4f 91       	pop	r20
	pop r19
    7286:	3f 91       	pop	r19
	pop r18
    7288:	2f 91       	pop	r18

0000728a <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    728a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    728c:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    728e:	ff 91       	pop	r31
	pop ZL
    7290:	ef 91       	pop	r30
	pop r1
    7292:	1f 90       	pop	r1
	pop r0
    7294:	0f 90       	pop	r0
	reti
    7296:	18 95       	reti

00007298 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7298:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    729a:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    729c:	00 c0       	rjmp	.+0      	; 0x729e <hsync_pulse+0x6>
	call update_sound
    729e:	0e 94 5d 39 	call	0x72ba	; 0x72ba <update_sound>

	lds ZL,sync_pulse
    72a2:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    72a6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    72a8:	e0 93 1f 0a 	sts	0x0A1F, r30

	ret
    72ac:	08 95       	ret

000072ae <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    72ae:	e0 91 43 0a 	lds	r30, 0x0A43
	sbrc ZL,0
    72b2:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    72b4:	0e 94 6b 3e 	call	0x7cd6	; 0x7cd6 <ProcessMusic>
#endif

	ret
    72b8:	08 95       	ret

000072ba <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    72ba:	0f 93       	push	r16
	push r17
    72bc:	1f 93       	push	r17
	push r18
    72be:	2f 93       	push	r18
	push r28
    72c0:	cf 93       	push	r28
	push r29
    72c2:	df 93       	push	r29

	mov r18,ZL
    72c4:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    72c6:	00 91 45 0a 	lds	r16, 0x0A45
	lds r17,tr1_pos_frac
    72ca:	10 91 47 0a 	lds	r17, 0x0A47
	add	r17,r16	;add step to fractional part of sample pos
    72ce:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    72d0:	00 91 46 0a 	lds	r16, 0x0A46
	lds ZL,tr1_pos_lo
    72d4:	e0 91 48 0a 	lds	r30, 0x0A48
	lds ZH,tr1_pos_hi 
    72d8:	f0 91 49 0a 	lds	r31, 0x0A49
	adc ZL,r16	;add step to low byte of sample pos
    72dc:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    72de:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    72e0:	e0 93 48 0a 	sts	0x0A48, r30
	sts tr1_pos_frac,r17
    72e4:	10 93 47 0a 	sts	0x0A47, r17
	lds r17,tr1_vol
    72e8:	10 91 44 0a 	lds	r17, 0x0A44
	mulsu r16,r17;(sample*mixing vol)
    72ec:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    72ee:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    72f0:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    72f2:	d0 2d       	mov	r29, r0
	nop
    72f4:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    72f6:	00 91 4b 0a 	lds	r16, 0x0A4B
	lds r17,tr2_pos_frac
    72fa:	10 91 4d 0a 	lds	r17, 0x0A4D
	add	r17,r16	;add step to fractional part of sample pos
    72fe:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7300:	00 91 4c 0a 	lds	r16, 0x0A4C
	lds ZL,tr2_pos_lo
    7304:	e0 91 4e 0a 	lds	r30, 0x0A4E
	lds ZH,tr2_pos_hi 
    7308:	f0 91 4f 0a 	lds	r31, 0x0A4F
	adc ZL,r16	;add step to low byte of sample pos
    730c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    730e:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7310:	e0 93 4e 0a 	sts	0x0A4E, r30
	sts tr2_pos_frac,r17
    7314:	10 93 4d 0a 	sts	0x0A4D, r17
	lds r17,tr2_vol
    7318:	10 91 4a 0a 	lds	r17, 0x0A4A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    731c:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    731e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7320:	20 ff       	sbrs	r18, 0
	rjmp .
    7322:	00 c0       	rjmp	.+0      	; 0x7324 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7324:	01 03       	mulsu	r16, r17
	clr r0
    7326:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7328:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    732a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    732c:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    732e:	00 91 51 0a 	lds	r16, 0x0A51
	lds r17,tr3_pos_frac
    7332:	10 91 53 0a 	lds	r17, 0x0A53
	add	r17,r16				;add step to fractional part of sample pos
    7336:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7338:	00 91 52 0a 	lds	r16, 0x0A52
	lds ZL,tr3_pos_lo
    733c:	e0 91 54 0a 	lds	r30, 0x0A54
	lds ZH,tr3_pos_hi 
    7340:	f0 91 55 0a 	lds	r31, 0x0A55
	adc ZL,r16				;add step to low byte of sample pos
    7344:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7346:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7348:	e0 93 54 0a 	sts	0x0A54, r30
	sts tr3_pos_frac,r17
    734c:	10 93 53 0a 	sts	0x0A53, r17
	lds r17,tr3_vol
    7350:	10 91 50 0a 	lds	r17, 0x0A50
	mulsu r16,r17			;(sample*mixing vol)
    7354:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7356:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7358:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    735a:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    735c:	00 91 58 0a 	lds	r16, 0x0A58
	lds r17,tr4_barrel_hi
    7360:	10 91 59 0a 	lds	r17, 0x0A59
	lds ZL,tr4_divider
    7364:	e0 91 5a 0a 	lds	r30, 0x0A5A
	dec ZL	
    7368:	ea 95       	dec	r30
	brpl ch4_no_shift	
    736a:	92 f4       	brpl	.+36     	; 0x7390 <ch4_no_shift>

	lds ZH,tr4_params
    736c:	f0 91 57 0a 	lds	r31, 0x0A57
	mov ZL,ZH
    7370:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7372:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7374:	00 2e       	mov	r0, r16
	lsr r0
    7376:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7378:	00 26       	eor	r0, r16
	bst r0,0
    737a:	00 fa       	bst	r0, 0
	lsr r17
    737c:	16 95       	lsr	r17
	ror r16
    737e:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7380:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7382:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7384:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7386:	00 93 58 0a 	sts	0x0A58, r16
	sts tr4_barrel_hi,r17
    738a:	10 93 59 0a 	sts	0x0A59, r17

	rjmp ch4_end
    738e:	03 c0       	rjmp	.+6      	; 0x7396 <ch4_end>

00007390 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7390:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7392:	1a 95       	dec	r17
	brne .-4
    7394:	f1 f7       	brne	.-4      	; 0x7392 <ch4_no_shift+0x2>

00007396 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7396:	e0 93 5a 0a 	sts	0x0A5A, r30
	ldi r17,0x80 ;-128
    739a:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    739c:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    739e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    73a0:	21 ff       	sbrs	r18, 1
	rjmp .
    73a2:	00 c0       	rjmp	.+0      	; 0x73a4 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    73a4:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    73a6:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    73a8:	00 91 56 0a 	lds	r16, 0x0A56

	mulsu r17,r16;(sample*mixing vol)
    73ac:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    73ae:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    73b0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    73b2:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    73b4:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    73b6:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    73b8:	d0 05       	cpc	r29, r0
	brlt .+2
    73ba:	0c f0       	brlt	.+2      	; 0x73be <ch4_end+0x28>
	ldi r28,127
    73bc:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    73be:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    73c0:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    73c2:	d0 05       	cpc	r29, r0
	brge .+2
    73c4:	0c f4       	brge	.+2      	; 0x73c8 <ch4_end+0x32>
	ldi r28,-128
    73c6:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    73c8:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    73ca:	c0 93 b3 00 	sts	0x00B3, r28
	

#if UART == 1
	;read UART data (23 cycles)
	
	ldi ZL,lo8(uart_rx_buf)
    73ce:	e4 ea       	ldi	r30, 0xA4	; 164
	ldi ZH,hi8(uart_rx_buf)
    73d0:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_rx_head
    73d2:	00 91 a1 0a 	lds	r16, 0x0AA1

	clr r0
    73d6:	00 24       	eor	r0, r0
	add ZL,r16
    73d8:	e0 0f       	add	r30, r16
	adc ZH,r0
    73da:	f0 1d       	adc	r31, r0

	lds r17,_SFR_MEM_ADDR(UCSR0A)	
    73dc:	10 91 c0 00 	lds	r17, 0x00C0

	sbrs r17,RXC0	;data in?
    73e0:	17 ff       	sbrs	r17, 7
	rjmp 1f
    73e2:	08 c0       	rjmp	.+16     	; 0x73f4 <ch4_end+0x5e>

	lds r18,_SFR_MEM_ADDR(UDR0)
    73e4:	20 91 c6 00 	lds	r18, 0x00C6
	st Z,r18
    73e8:	20 83       	st	Z, r18
	inc r16
    73ea:	03 95       	inc	r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
    73ec:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_rx_head,r16
    73ee:	00 93 a1 0a 	sts	0x0AA1, r16
	rjmp uart_tx
    73f2:	03 c0       	rjmp	.+6      	; 0x73fa <uart_tx>
1:
	WAIT r28,9
    73f4:	c3 e0       	ldi	r28, 0x03	; 3
    73f6:	ca 95       	dec	r28
    73f8:	f1 f7       	brne	.-4      	; 0x73f6 <ch4_end+0x60>

000073fa <uart_tx>:

uart_tx:
	;send UART data (24 cycles)
	
	ldi ZL,lo8(uart_tx_buf)
    73fa:	e0 e6       	ldi	r30, 0x60	; 96
	ldi ZH,hi8(uart_tx_buf)
    73fc:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_tx_tail
    73fe:	00 91 e4 0a 	lds	r16, 0x0AE4
	lds r29,uart_tx_head
    7402:	d0 91 a2 0a 	lds	r29, 0x0AA2
	
	add ZL,r16
    7406:	e0 0f       	add	r30, r16
	adc ZH,r0	;r0=0
    7408:	f0 1d       	adc	r31, r0

	lds r28,_SFR_MEM_ADDR(UCSR0A)
    740a:	c0 91 c0 00 	lds	r28, 0x00C0
	andi r28,(1<<UDRE0)	 	//UCSR0A & (1<<UDRE0)
    740e:	c0 72       	andi	r28, 0x20	; 32

	;if(ring_head == ring_tail || (UCSR0A & (1<<UDRE0)==0 ), nothing to send
	sub r29,r16
    7410:	d0 1b       	sub	r29, r16
	mul r28,r29
    7412:	cd 9f       	mul	r28, r29
	breq 1f		
    7414:	41 f0       	breq	.+16     	; 0x7426 <uart_tx+0x2c>

	ld r18,Z
    7416:	20 81       	ld	r18, Z
	sts _SFR_MEM_ADDR(UDR0),r18	;TCNT1=0x134
    7418:	20 93 c6 00 	sts	0x00C6, r18
	inc r16
    741c:	03 95       	inc	r16
	andi r16,(UART_TX_BUFFER_SIZE-1) ;wrap
    741e:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_tx_tail,r16
    7420:	00 93 e4 0a 	sts	0x0AE4, r16
	rjmp update_sound_end
    7424:	03 c0       	rjmp	.+6      	; 0x742c <update_sound_end>
1:
	WAIT r28,9
    7426:	c3 e0       	ldi	r28, 0x03	; 3
    7428:	ca 95       	dec	r28
    742a:	f1 f7       	brne	.-4      	; 0x7428 <uart_tx+0x2e>

0000742c <update_sound_end>:
#endif


update_sound_end:

	pop r29
    742c:	df 91       	pop	r29
	pop r28
    742e:	cf 91       	pop	r28
	pop r18
    7430:	2f 91       	pop	r18
	pop r17
    7432:	1f 91       	pop	r17
	pop r16
    7434:	0f 91       	pop	r16
	
	ret
    7436:	08 95       	ret

00007438 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7438:	80 93 0f 0a 	sts	0x0A0F, r24
	sts sprites_tile_banks+1,r25
    743c:	90 93 10 0a 	sts	0x0A10, r25
	ret
    7440:	08 95       	ret

00007442 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7442:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7444:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7446:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    7448:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    744a:	64 e1       	ldi	r22, 0x14	; 20

0000744c <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    744c:	6d 93       	st	X+, r22
	sbiw r30,1
    744e:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7450:	e9 f7       	brne	.-6      	; 0x744c <fill_vram_loop>

	clr r1
    7452:	11 24       	eor	r1, r1

	ret
    7454:	08 95       	ret

00007456 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7456:	50 91 19 0a 	lds	r21, 0x0A19
	add r20,21
    745a:	45 0f       	add	r20, r21
	rjmp SetTile	
    745c:	00 c0       	rjmp	.+0      	; 0x745e <SetTile>

0000745e <SetTile>:

	ret

#else

	clr r25
    745e:	99 27       	eor	r25, r25
	clr r23	
    7460:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    7462:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    7464:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    7466:	08 0e       	add	r0, r24
	adc r1,r25
    7468:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    746a:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    746c:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    746e:	a0 0d       	add	r26, r0
	adc XH,r1
    7470:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    7472:	4c 5e       	subi	r20, 0xEC	; 236
	st X,r20
    7474:	4c 93       	st	X, r20

	clr r1
    7476:	11 24       	eor	r1, r1

	ret
    7478:	08 95       	ret

0000747a <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    747a:	80 93 19 0a 	sts	0x0A19, r24
	ret
    747e:	08 95       	ret

00007480 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7480:	80 93 17 0a 	sts	0x0A17, r24
	sts tile_table_hi,r25	
    7484:	90 93 18 0a 	sts	0x0A18, r25
	ret
    7488:	08 95       	ret

0000748a <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    748a:	80 91 20 0a 	lds	r24, 0x0A20
	andi r24,SYNC_FLAG_VSYNC
    748e:	81 70       	andi	r24, 0x01	; 1
	ret
    7490:	08 95       	ret

00007492 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7492:	20 91 20 0a 	lds	r18, 0x0A20
	andi r18,~SYNC_FLAG_VSYNC
    7496:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7498:	20 93 20 0a 	sts	0x0A20, r18
	ret
    749c:	08 95       	ret

0000749e <GetVsyncCounter>:
; C-callable
; returns: (unsigned int) r25:r24
;************************************
.section .text.GetVsyncCounter
GetVsyncCounter:
	lds r24,vsync_counter
    749e:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    74a2:	90 91 30 0a 	lds	r25, 0x0A30
	ret
    74a6:	08 95       	ret

000074a8 <ClearVsyncCounter>:
;
; C-callable
;************************************
.section .text.ClearVsyncCounter
ClearVsyncCounter:
	sts vsync_counter,r1
    74a8:	10 92 2f 0a 	sts	0x0A2F, r1
	sts vsync_counter+1,r1
    74ac:	10 92 30 0a 	sts	0x0A30, r1
	ret
    74b0:	08 95       	ret

000074b2 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    74b2:	88 23       	and	r24, r24
	brne rj_p2
    74b4:	29 f4       	brne	.+10     	; 0x74c0 <rj_p2>
		
	lds r24,joypad1_status_lo
    74b6:	80 91 27 0a 	lds	r24, 0x0A27
	lds r25,joypad1_status_lo+1
    74ba:	90 91 28 0a 	lds	r25, 0x0A28
	ret
    74be:	08 95       	ret

000074c0 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    74c0:	80 91 2b 0a 	lds	r24, 0x0A2B
	lds r25,joypad2_status_lo+1	
    74c4:	90 91 2c 0a 	lds	r25, 0x0A2C

	ret
    74c8:	08 95       	ret

000074ca <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    74ca:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    74cc:	7a 95       	dec	r23
	brne .-4 ;~1 us
    74ce:	f1 f7       	brne	.-4      	; 0x74cc <WaitUs+0x2>
	nop
    74d0:	00 00       	nop
	sbiw r24,1
    74d2:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    74d4:	d1 f7       	brne	.-12     	; 0x74ca <WaitUs>

	ret
    74d6:	08 95       	ret

000074d8 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    74d8:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    74da:	fe cf       	rjmp	.-4      	; 0x74d8 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    74dc:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    74de:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    74e0:	60 bd       	out	0x20, r22	; 32
   cli
    74e2:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    74e4:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    74e6:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    74e8:	78 94       	sei
   ret
    74ea:	08 95       	ret

000074ec <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    74ec:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    74ee:	fe cf       	rjmp	.-4      	; 0x74ec <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    74f0:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    74f2:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    74f4:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    74f6:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    74f8:	80 b5       	in	r24, 0x20	; 32
   sei
    74fa:	78 94       	sei
   ret
    74fc:	08 95       	ret

000074fe <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    74fe:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7500:	80 93 1f 0a 	sts	0x0A1F, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7504:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7508:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    750c:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7510:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7514:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7518:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    751c:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7520:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7524:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7526:	80 93 81 00 	sts	0x0081, r24

		cli
    752a:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    752c:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    752e:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7532:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7534:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7538:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    753a:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    753e:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7542:	78 94       	sei

00007544 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7544:	80 91 1f 0a 	lds	r24, 0x0A1F
		cpi r24,8
    7548:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    754a:	e0 f3       	brcs	.-8      	; 0x7544 <wait>

		ret
    754c:	08 95       	ret

0000754e <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    754e:	80 91 31 0a 	lds	r24, 0x0A31
		lds r25,random_value+1
    7552:	90 91 32 0a 	lds	r25, 0x0A32
		ret
    7556:	08 95       	ret

00007558 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7558:	0f 93       	push	r16
		push r17
    755a:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    755c:	0f b7       	in	r16, 0x3f	; 63
		push r16
    755e:	0f 93       	push	r16

		lds r16,sync_pulse
    7560:	00 91 1f 0a 	lds	r16, 0x0A1F
		inc r16
    7564:	03 95       	inc	r16
		sts sync_pulse,r16
    7566:	00 93 1f 0a 	sts	0x0A1F, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    756a:	00 fd       	sbrc	r16, 0
		rjmp 1f
    756c:	08 c0       	rjmp	.+16     	; 0x757e <__vector_8+0x26>
		lds r17,random_value
    756e:	10 91 31 0a 	lds	r17, 0x0A31
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7572:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7576:	10 27       	eor	r17, r16
		sts random_value,r17
    7578:	10 93 31 0a 	sts	0x0A31, r17
		rjmp 2f
    757c:	07 c0       	rjmp	.+14     	; 0x758c <__vector_8+0x34>
	1:
		lds r17,random_value+1
    757e:	10 91 32 0a 	lds	r17, 0x0A32
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7582:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7586:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7588:	10 93 32 0a 	sts	0x0A32, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    758c:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    758e:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7592:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7594:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7596:	1f 91       	pop	r17
		pop r16
    7598:	0f 91       	pop	r16
		reti
    759a:	18 95       	reti

0000759c <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    759c:	98 e0       	ldi	r25, 0x08	; 8
    759e:	88 e1       	ldi	r24, 0x18	; 24
    75a0:	0f b6       	in	r0, 0x3f	; 63
    75a2:	f8 94       	cli
    75a4:	a8 95       	wdr
    75a6:	80 93 60 00 	sts	0x0060, r24
    75aa:	0f be       	out	0x3f, r0	; 63
    75ac:	90 93 60 00 	sts	0x0060, r25
	while(1);
    75b0:	ff cf       	rjmp	.-2      	; 0x75b0 <SoftReset+0x14>

000075b2 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    75b2:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    75b4:	c8 95       	lpm
    75b6:	c8 95       	lpm
		Wait200ns();
    75b8:	c8 95       	lpm
    75ba:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    75bc:	12 98       	cbi	0x02, 2	; 2
    75be:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    75c0:	80 e0       	ldi	r24, 0x00	; 0
    75c2:	90 e0       	ldi	r25, 0x00	; 0
    75c4:	20 e0       	ldi	r18, 0x00	; 0
    75c6:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    75c8:	36 95       	lsr	r19
    75ca:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    75cc:	96 95       	lsr	r25
    75ce:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    75d0:	c8 95       	lpm
    75d2:	c8 95       	lpm
			Wait200ns();
    75d4:	c8 95       	lpm
    75d6:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    75d8:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    75da:	00 9b       	sbis	0x00, 0	; 0
    75dc:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    75de:	01 9b       	sbis	0x00, 1	; 0
    75e0:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    75e2:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    75e4:	c8 95       	lpm
    75e6:	c8 95       	lpm
			Wait200ns();
    75e8:	c8 95       	lpm
    75ea:	c8 95       	lpm
    75ec:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    75ee:	61 f7       	brne	.-40     	; 0x75c8 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    75f0:	30 93 28 0a 	sts	0x0A28, r19
    75f4:	20 93 27 0a 	sts	0x0A27, r18
		joypad2_status_lo=p2ButtonsLo;
    75f8:	90 93 2c 0a 	sts	0x0A2C, r25
    75fc:	80 93 2b 0a 	sts	0x0A2B, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7600:	80 91 27 0a 	lds	r24, 0x0A27
    7604:	90 91 28 0a 	lds	r25, 0x0A28
    7608:	0f 97       	sbiw	r24, 0x0f	; 15
    760a:	31 f0       	breq	.+12     	; 0x7618 <ReadButtons+0x66>
    760c:	80 91 2b 0a 	lds	r24, 0x0A2B
    7610:	90 91 2c 0a 	lds	r25, 0x0A2C
    7614:	0f 97       	sbiw	r24, 0x0f	; 15
    7616:	11 f4       	brne	.+4      	; 0x761c <ReadButtons+0x6a>
		SoftReset();
    7618:	0e 94 ce 3a 	call	0x759c	; 0x759c <SoftReset>
    761c:	08 95       	ret

0000761e <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    761e:	10 92 a0 0a 	sts	0x0AA0, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7622:	00 99       	sbic	0x00, 0	; 0
    7624:	03 c0       	rjmp	.+6      	; 0x762c <ReadControllers+0xe>
    7626:	81 e0       	ldi	r24, 0x01	; 1
    7628:	80 93 a0 0a 	sts	0x0AA0, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    762c:	01 99       	sbic	0x00, 1	; 0
    762e:	05 c0       	rjmp	.+10     	; 0x763a <ReadControllers+0x1c>
    7630:	80 91 a0 0a 	lds	r24, 0x0AA0
    7634:	82 60       	ori	r24, 0x02	; 2
    7636:	80 93 a0 0a 	sts	0x0AA0, r24
			
	//read the standard buttons
	ReadButtons();
    763a:	0c 94 d9 3a 	jmp	0x75b2	; 0x75b2 <ReadButtons>

0000763e <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    763e:	cf 93       	push	r28
    7640:	df 93       	push	r29
    7642:	c0 e0       	ldi	r28, 0x00	; 0
    7644:	d0 e0       	ldi	r29, 0x00	; 0
    7646:	fe 01       	movw	r30, r28
    7648:	e2 56       	subi	r30, 0x62	; 98
    764a:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    764c:	64 91       	lpm	r22, Z
    764e:	ce 01       	movw	r24, r28
    7650:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <WriteEeprom>
    7654:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7656:	c0 32       	cpi	r28, 0x20	; 32
    7658:	d1 05       	cpc	r29, r1
    765a:	a9 f7       	brne	.-22     	; 0x7646 <FormatEeprom+0x8>
    765c:	c0 e2       	ldi	r28, 0x20	; 32
    765e:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7660:	6f ef       	ldi	r22, 0xFF	; 255
    7662:	ce 01       	movw	r24, r28
    7664:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7668:	6f ef       	ldi	r22, 0xFF	; 255
    766a:	ce 01       	movw	r24, r28
    766c:	01 96       	adiw	r24, 0x01	; 1
    766e:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7672:	a0 96       	adiw	r28, 0x20	; 32
    7674:	c1 15       	cp	r28, r1
    7676:	88 e0       	ldi	r24, 0x08	; 8
    7678:	d8 07       	cpc	r29, r24
    767a:	91 f7       	brne	.-28     	; 0x7660 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    767c:	df 91       	pop	r29
    767e:	cf 91       	pop	r28
    7680:	08 95       	ret

00007682 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7682:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7684:	80 e0       	ldi	r24, 0x00	; 0
    7686:	90 e0       	ldi	r25, 0x00	; 0
    7688:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ReadEeprom>
    768c:	c8 2f       	mov	r28, r24
    768e:	81 e0       	ldi	r24, 0x01	; 1
    7690:	90 e0       	ldi	r25, 0x00	; 0
    7692:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ReadEeprom>
    7696:	28 2f       	mov	r18, r24
    7698:	30 e0       	ldi	r19, 0x00	; 0
    769a:	32 2f       	mov	r19, r18
    769c:	22 27       	eor	r18, r18
    769e:	2c 0f       	add	r18, r28
    76a0:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    76a2:	81 e0       	ldi	r24, 0x01	; 1
    76a4:	2a 35       	cpi	r18, 0x5A	; 90
    76a6:	35 45       	sbci	r19, 0x55	; 85
    76a8:	09 f0       	breq	.+2      	; 0x76ac <isEepromFormatted+0x2a>
    76aa:	80 e0       	ldi	r24, 0x00	; 0
}
    76ac:	cf 91       	pop	r28
    76ae:	08 95       	ret

000076b0 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    76b0:	8f 92       	push	r8
    76b2:	9f 92       	push	r9
    76b4:	af 92       	push	r10
    76b6:	bf 92       	push	r11
    76b8:	cf 92       	push	r12
    76ba:	df 92       	push	r13
    76bc:	ef 92       	push	r14
    76be:	ff 92       	push	r15
    76c0:	0f 93       	push	r16
    76c2:	1f 93       	push	r17
    76c4:	cf 93       	push	r28
    76c6:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    76c8:	fb 01       	movw	r30, r22
    76ca:	11 82       	std	Z+1, r1	; 0x01
    76cc:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    76ce:	8f 3f       	cpi	r24, 0xFF	; 255
    76d0:	ff ef       	ldi	r31, 0xFF	; 255
    76d2:	9f 07       	cpc	r25, r31
    76d4:	89 f1       	breq	.+98     	; 0x7738 <EepromBlockExists+0x88>
    76d6:	6a 01       	movw	r12, r20
    76d8:	8b 01       	movw	r16, r22
    76da:	7c 01       	movw	r14, r24
    76dc:	a1 2c       	mov	r10, r1
    76de:	b1 2c       	mov	r11, r1
    76e0:	c0 e0       	ldi	r28, 0x00	; 0
    76e2:	d3 e0       	ldi	r29, 0x03	; 3
    76e4:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    76e6:	c5 01       	movw	r24, r10
    76e8:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ReadEeprom>
    76ec:	88 2e       	mov	r8, r24
    76ee:	c5 01       	movw	r24, r10
    76f0:	01 96       	adiw	r24, 0x01	; 1
    76f2:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ReadEeprom>
    76f6:	28 2f       	mov	r18, r24
    76f8:	30 e0       	ldi	r19, 0x00	; 0
    76fa:	32 2f       	mov	r19, r18
    76fc:	22 27       	eor	r18, r18
    76fe:	28 0d       	add	r18, r8
    7700:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7702:	2e 15       	cp	r18, r14
    7704:	3f 05       	cpc	r19, r15
    7706:	29 f4       	brne	.+10     	; 0x7712 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7708:	f8 01       	movw	r30, r16
    770a:	b1 82       	std	Z+1, r11	; 0x01
    770c:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    770e:	d0 e0       	ldi	r29, 0x00	; 0
    7710:	0b c0       	rjmp	.+22     	; 0x7728 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7712:	2f 3f       	cpi	r18, 0xFF	; 255
    7714:	3f 4f       	sbci	r19, 0xFF	; 255
    7716:	41 f4       	brne	.+16     	; 0x7728 <EepromBlockExists+0x78>
    7718:	91 10       	cpse	r9, r1
    771a:	06 c0       	rjmp	.+12     	; 0x7728 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    771c:	c1 14       	cp	r12, r1
    771e:	d1 04       	cpc	r13, r1
    7720:	11 f0       	breq	.+4      	; 0x7726 <EepromBlockExists+0x76>
    7722:	f6 01       	movw	r30, r12
    7724:	c0 83       	st	Z, r28
    7726:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7728:	cf 5f       	subi	r28, 0xFF	; 255
    772a:	f0 e2       	ldi	r31, 0x20	; 32
    772c:	af 0e       	add	r10, r31
    772e:	b1 1c       	adc	r11, r1
    7730:	c0 34       	cpi	r28, 0x40	; 64
    7732:	c9 f6       	brne	.-78     	; 0x76e6 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7734:	8d 2f       	mov	r24, r29
    7736:	01 c0       	rjmp	.+2      	; 0x773a <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7738:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    773a:	df 91       	pop	r29
    773c:	cf 91       	pop	r28
    773e:	1f 91       	pop	r17
    7740:	0f 91       	pop	r16
    7742:	ff 90       	pop	r15
    7744:	ef 90       	pop	r14
    7746:	df 90       	pop	r13
    7748:	cf 90       	pop	r12
    774a:	bf 90       	pop	r11
    774c:	af 90       	pop	r10
    774e:	9f 90       	pop	r9
    7750:	8f 90       	pop	r8
    7752:	08 95       	ret

00007754 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7754:	ef 92       	push	r14
    7756:	ff 92       	push	r15
    7758:	0f 93       	push	r16
    775a:	1f 93       	push	r17
    775c:	cf 93       	push	r28
    775e:	df 93       	push	r29
    7760:	00 d0       	rcall	.+0      	; 0x7762 <EepromWriteBlock+0xe>
    7762:	1f 92       	push	r1
    7764:	cd b7       	in	r28, 0x3d	; 61
    7766:	de b7       	in	r29, 0x3e	; 62
    7768:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    776a:	1a 82       	std	Y+2, r1	; 0x02
    776c:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    776e:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    7770:	ae 01       	movw	r20, r28
    7772:	4d 5f       	subi	r20, 0xFD	; 253
    7774:	5f 4f       	sbci	r21, 0xFF	; 255
    7776:	be 01       	movw	r22, r28
    7778:	6f 5f       	subi	r22, 0xFF	; 255
    777a:	7f 4f       	sbci	r23, 0xFF	; 255
    777c:	fc 01       	movw	r30, r24
    777e:	80 81       	ld	r24, Z
    7780:	91 81       	ldd	r25, Z+1	; 0x01
    7782:	0e 94 58 3b 	call	0x76b0	; 0x76b0 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7786:	88 23       	and	r24, r24
    7788:	11 f0       	breq	.+4      	; 0x778e <EepromWriteBlock+0x3a>
    778a:	83 30       	cpi	r24, 0x03	; 3
    778c:	19 f5       	brne	.+70     	; 0x77d4 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    778e:	89 81       	ldd	r24, Y+1	; 0x01
    7790:	9a 81       	ldd	r25, Y+2	; 0x02
    7792:	89 2b       	or	r24, r25
    7794:	49 f4       	brne	.+18     	; 0x77a8 <EepromWriteBlock+0x54>
    7796:	8b 81       	ldd	r24, Y+3	; 0x03
    7798:	88 23       	and	r24, r24
    779a:	d9 f0       	breq	.+54     	; 0x77d2 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    779c:	f0 e2       	ldi	r31, 0x20	; 32
    779e:	8f 9f       	mul	r24, r31
    77a0:	c0 01       	movw	r24, r0
    77a2:	11 24       	eor	r1, r1
    77a4:	9a 83       	std	Y+2, r25	; 0x02
    77a6:	89 83       	std	Y+1, r24	; 0x01
    77a8:	78 01       	movw	r14, r16
    77aa:	20 e2       	ldi	r18, 0x20	; 32
    77ac:	e2 0e       	add	r14, r18
    77ae:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    77b0:	f8 01       	movw	r30, r16
    77b2:	61 91       	ld	r22, Z+
    77b4:	8f 01       	movw	r16, r30
    77b6:	89 81       	ldd	r24, Y+1	; 0x01
    77b8:	9a 81       	ldd	r25, Y+2	; 0x02
    77ba:	9c 01       	movw	r18, r24
    77bc:	2f 5f       	subi	r18, 0xFF	; 255
    77be:	3f 4f       	sbci	r19, 0xFF	; 255
    77c0:	3a 83       	std	Y+2, r19	; 0x02
    77c2:	29 83       	std	Y+1, r18	; 0x01
    77c4:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    77c8:	0e 15       	cp	r16, r14
    77ca:	1f 05       	cpc	r17, r15
    77cc:	89 f7       	brne	.-30     	; 0x77b0 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    77ce:	80 e0       	ldi	r24, 0x00	; 0
    77d0:	01 c0       	rjmp	.+2      	; 0x77d4 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    77d2:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    77d4:	0f 90       	pop	r0
    77d6:	0f 90       	pop	r0
    77d8:	0f 90       	pop	r0
    77da:	df 91       	pop	r29
    77dc:	cf 91       	pop	r28
    77de:	1f 91       	pop	r17
    77e0:	0f 91       	pop	r16
    77e2:	ff 90       	pop	r15
    77e4:	ef 90       	pop	r14
    77e6:	08 95       	ret

000077e8 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    77e8:	cf 92       	push	r12
    77ea:	df 92       	push	r13
    77ec:	ff 92       	push	r15
    77ee:	0f 93       	push	r16
    77f0:	1f 93       	push	r17
    77f2:	cf 93       	push	r28
    77f4:	df 93       	push	r29
    77f6:	00 d0       	rcall	.+0      	; 0x77f8 <EepromReadBlock+0x10>
    77f8:	cd b7       	in	r28, 0x3d	; 61
    77fa:	de b7       	in	r29, 0x3e	; 62
    77fc:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    77fe:	40 e0       	ldi	r20, 0x00	; 0
    7800:	50 e0       	ldi	r21, 0x00	; 0
    7802:	be 01       	movw	r22, r28
    7804:	6f 5f       	subi	r22, 0xFF	; 255
    7806:	7f 4f       	sbci	r23, 0xFF	; 255
    7808:	0e 94 58 3b 	call	0x76b0	; 0x76b0 <EepromBlockExists>
    780c:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    780e:	81 11       	cpse	r24, r1
    7810:	13 c0       	rjmp	.+38     	; 0x7838 <EepromReadBlock+0x50>
    7812:	68 01       	movw	r12, r16
    7814:	80 e2       	ldi	r24, 0x20	; 32
    7816:	c8 0e       	add	r12, r24
    7818:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    781a:	89 81       	ldd	r24, Y+1	; 0x01
    781c:	9a 81       	ldd	r25, Y+2	; 0x02
    781e:	9c 01       	movw	r18, r24
    7820:	2f 5f       	subi	r18, 0xFF	; 255
    7822:	3f 4f       	sbci	r19, 0xFF	; 255
    7824:	3a 83       	std	Y+2, r19	; 0x02
    7826:	29 83       	std	Y+1, r18	; 0x01
    7828:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ReadEeprom>
    782c:	f8 01       	movw	r30, r16
    782e:	81 93       	st	Z+, r24
    7830:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7832:	ec 15       	cp	r30, r12
    7834:	fd 05       	cpc	r31, r13
    7836:	89 f7       	brne	.-30     	; 0x781a <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    7838:	8f 2d       	mov	r24, r15
    783a:	0f 90       	pop	r0
    783c:	0f 90       	pop	r0
    783e:	df 91       	pop	r29
    7840:	cf 91       	pop	r28
    7842:	1f 91       	pop	r17
    7844:	0f 91       	pop	r16
    7846:	ff 90       	pop	r15
    7848:	df 90       	pop	r13
    784a:	cf 90       	pop	r12
    784c:	08 95       	ret

0000784e <UartUnreadCount>:
		uart_rx_tail&=(UART_RX_BUFFER_SIZE-1);		//wrap pointer to buffer size
	}

	//obsolete
	u8 UartUnreadCount(){
		return uart_rx_head-uart_rx_tail;
    784e:	80 91 a1 0a 	lds	r24, 0x0AA1
    7852:	90 91 a3 0a 	lds	r25, 0x0AA3
	}
    7856:	89 1b       	sub	r24, r25
    7858:	08 95       	ret

0000785a <UartReadChar>:
		return (uart_rx_tail==uart_rx_head);
	}

	s16 UartReadChar(){

		if(uart_rx_head != uart_rx_tail){
    785a:	90 91 a1 0a 	lds	r25, 0x0AA1
    785e:	80 91 a3 0a 	lds	r24, 0x0AA3
    7862:	98 17       	cp	r25, r24
    7864:	71 f0       	breq	.+28     	; 0x7882 <UartReadChar+0x28>

			u8 data=uart_rx_buf[uart_rx_tail];
    7866:	e0 91 a3 0a 	lds	r30, 0x0AA3
    786a:	f0 e0       	ldi	r31, 0x00	; 0
    786c:	ec 55       	subi	r30, 0x5C	; 92
    786e:	f5 4f       	sbci	r31, 0xF5	; 245
    7870:	80 81       	ld	r24, Z
			uart_rx_tail=((uart_rx_tail+1) & (UART_RX_BUFFER_SIZE-1));	//wrap pointer to buffer size			
    7872:	90 91 a3 0a 	lds	r25, 0x0AA3
    7876:	9f 5f       	subi	r25, 0xFF	; 255
    7878:	9f 73       	andi	r25, 0x3F	; 63
    787a:	90 93 a3 0a 	sts	0x0AA3, r25
			return (data&0xff);
    787e:	90 e0       	ldi	r25, 0x00	; 0
    7880:	08 95       	ret

		}else{
			return -1;	//no data in buffer
    7882:	8f ef       	ldi	r24, 0xFF	; 255
    7884:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
    7886:	08 95       	ret

00007888 <InitUartRxBuffer>:

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    7888:	10 92 a3 0a 	sts	0x0AA3, r1
		uart_rx_head=0;
    788c:	10 92 a1 0a 	sts	0x0AA1, r1
    7890:	08 95       	ret

00007892 <UartSendChar>:
		return (next_head == uart_tx_tail);
	}

	s8 UartSendChar(u8 data){

 		u8 next_head = ((uart_tx_head + 1) & (UART_TX_BUFFER_SIZE-1));
    7892:	90 91 a2 0a 	lds	r25, 0x0AA2
    7896:	9f 5f       	subi	r25, 0xFF	; 255
    7898:	9f 73       	andi	r25, 0x3F	; 63

		if (next_head != uart_tx_tail) {
    789a:	20 91 e4 0a 	lds	r18, 0x0AE4
    789e:	92 17       	cp	r25, r18
    78a0:	51 f0       	breq	.+20     	; 0x78b6 <UartSendChar+0x24>
			uart_tx_buf[uart_tx_head]=data;
    78a2:	e0 91 a2 0a 	lds	r30, 0x0AA2
    78a6:	f0 e0       	ldi	r31, 0x00	; 0
    78a8:	e0 5a       	subi	r30, 0xA0	; 160
    78aa:	f5 4f       	sbci	r31, 0xF5	; 245
    78ac:	80 83       	st	Z, r24
			uart_tx_head=next_head;		
    78ae:	90 93 a2 0a 	sts	0x0AA2, r25
			return 0;
    78b2:	80 e0       	ldi	r24, 0x00	; 0
    78b4:	08 95       	ret
		}else{
			return -1; //buffer full
    78b6:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
    78b8:	08 95       	ret

000078ba <InitUartTxBuffer>:

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    78ba:	10 92 e4 0a 	sts	0x0AE4, r1
		uart_tx_head=0;
    78be:	10 92 a2 0a 	sts	0x0AA2, r1
    78c2:	08 95       	ret

000078c4 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    78c4:	00 97       	sbiw	r24, 0x00	; 0
    78c6:	21 f0       	breq	.+8      	; 0x78d0 <GetPrngNumber+0xc>
    78c8:	90 93 41 0a 	sts	0x0A41, r25
    78cc:	80 93 40 0a 	sts	0x0A40, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    78d0:	20 91 40 0a 	lds	r18, 0x0A40
    78d4:	30 91 41 0a 	lds	r19, 0x0A41
    78d8:	a9 01       	movw	r20, r18
    78da:	56 95       	lsr	r21
    78dc:	47 95       	ror	r20
    78de:	56 95       	lsr	r21
    78e0:	47 95       	ror	r20
    78e2:	c9 01       	movw	r24, r18
    78e4:	63 e0       	ldi	r22, 0x03	; 3
    78e6:	96 95       	lsr	r25
    78e8:	87 95       	ror	r24
    78ea:	6a 95       	dec	r22
    78ec:	e1 f7       	brne	.-8      	; 0x78e6 <GetPrngNumber+0x22>
    78ee:	84 27       	eor	r24, r20
    78f0:	95 27       	eor	r25, r21
    78f2:	82 27       	eor	r24, r18
    78f4:	93 27       	eor	r25, r19
    78f6:	a9 01       	movw	r20, r18
    78f8:	75 e0       	ldi	r23, 0x05	; 5
    78fa:	56 95       	lsr	r21
    78fc:	47 95       	ror	r20
    78fe:	7a 95       	dec	r23
    7900:	e1 f7       	brne	.-8      	; 0x78fa <GetPrngNumber+0x36>
    7902:	84 27       	eor	r24, r20
    7904:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    7906:	99 27       	eor	r25, r25
    7908:	86 95       	lsr	r24
    790a:	97 95       	ror	r25
    790c:	88 27       	eor	r24, r24
    790e:	36 95       	lsr	r19
    7910:	27 95       	ror	r18
    7912:	82 2b       	or	r24, r18
    7914:	93 2b       	or	r25, r19
    7916:	90 93 41 0a 	sts	0x0A41, r25
    791a:	80 93 40 0a 	sts	0x0A40, r24
	return prng_state;   
}
    791e:	08 95       	ret

00007920 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    7920:	fc 01       	movw	r30, r24
    7922:	67 87       	std	Z+15, r22	; 0x0f
    7924:	08 95       	ret

00007926 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7926:	e4 e4       	ldi	r30, 0x44	; 68
    7928:	fa e0       	ldi	r31, 0x0A	; 10
    792a:	81 e0       	ldi	r24, 0x01	; 1
    792c:	91 e0       	ldi	r25, 0x01	; 1
    792e:	95 8b       	std	Z+21, r25	; 0x15
    7930:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7932:	63 8b       	std	Z+19, r22	; 0x13
    7934:	08 95       	ret

00007936 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    7936:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    7938:	90 81       	ld	r25, Z
    793a:	9f 75       	andi	r25, 0x5F	; 95
    793c:	90 83       	st	Z, r25
    793e:	08 95       	ret

00007940 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    7940:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7942:	90 81       	ld	r25, Z
    7944:	90 64       	ori	r25, 0x40	; 64
    7946:	90 83       	st	Z, r25
    7948:	08 95       	ret

0000794a <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    794a:	fc 01       	movw	r30, r24
    794c:	66 87       	std	Z+14, r22	; 0x0e
    794e:	08 95       	ret

00007950 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    7950:	fc 01       	movw	r30, r24
    7952:	62 87       	std	Z+10, r22	; 0x0a
    7954:	08 95       	ret

00007956 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    7956:	fc 01       	movw	r30, r24
    7958:	63 87       	std	Z+11, r22	; 0x0b
    795a:	08 95       	ret

0000795c <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    795c:	cf 93       	push	r28
    795e:	df 93       	push	r29
    7960:	ec 01       	movw	r28, r24
    7962:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7964:	29 81       	ldd	r18, Y+1	; 0x01
    7966:	30 e0       	ldi	r19, 0x00	; 0
    7968:	f9 01       	movw	r30, r18
    796a:	ee 0f       	add	r30, r30
    796c:	ff 1f       	adc	r31, r31
    796e:	e8 5f       	subi	r30, 0xF8	; 248
    7970:	fd 47       	sbci	r31, 0x7D	; 125
    7972:	65 91       	lpm	r22, Z+
    7974:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7976:	f9 01       	movw	r30, r18
    7978:	e4 0f       	add	r30, r20
    797a:	f1 1d       	adc	r31, r1
    797c:	47 fd       	sbrc	r20, 7
    797e:	fa 95       	dec	r31
    7980:	ee 0f       	add	r30, r30
    7982:	ff 1f       	adc	r31, r31
    7984:	e8 5f       	subi	r30, 0xF8	; 248
    7986:	fd 47       	sbci	r31, 0x7D	; 125
    7988:	85 91       	lpm	r24, Z+
    798a:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    798c:	86 1b       	sub	r24, r22
    798e:	97 0b       	sbc	r25, r23
    7990:	68 85       	ldd	r22, Y+8	; 0x08
    7992:	70 e0       	ldi	r23, 0x00	; 0
    7994:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
	if(delta==0)delta++;
    7998:	61 15       	cp	r22, r1
    799a:	71 05       	cpc	r23, r1
    799c:	11 f4       	brne	.+4      	; 0x79a2 <PatchCommand11+0x46>
    799e:	61 e0       	ldi	r22, 0x01	; 1
    79a0:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    79a2:	ea 81       	ldd	r30, Y+2	; 0x02
    79a4:	86 e0       	ldi	r24, 0x06	; 6
    79a6:	e8 9f       	mul	r30, r24
    79a8:	f0 01       	movw	r30, r0
    79aa:	11 24       	eor	r1, r1
    79ac:	ec 5b       	subi	r30, 0xBC	; 188
    79ae:	f5 4f       	sbci	r31, 0xF5	; 245
    79b0:	81 81       	ldd	r24, Z+1	; 0x01
    79b2:	92 81       	ldd	r25, Z+2	; 0x02
    79b4:	86 0f       	add	r24, r22
    79b6:	97 1f       	adc	r25, r23
    79b8:	92 83       	std	Z+2, r25	; 0x02
    79ba:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    79bc:	7e 83       	std	Y+6, r23	; 0x06
    79be:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    79c0:	88 81       	ld	r24, Y
    79c2:	88 60       	ori	r24, 0x08	; 8
    79c4:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    79c6:	89 81       	ldd	r24, Y+1	; 0x01
    79c8:	48 0f       	add	r20, r24
    79ca:	4f 83       	std	Y+7, r20	; 0x07
}
    79cc:	df 91       	pop	r29
    79ce:	cf 91       	pop	r28
    79d0:	08 95       	ret

000079d2 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    79d2:	fc 01       	movw	r30, r24
    79d4:	60 87       	std	Z+8, r22	; 0x08
    79d6:	08 95       	ret

000079d8 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    79d8:	fc 01       	movw	r30, r24
    79da:	64 83       	std	Z+4, r22	; 0x04
    79dc:	08 95       	ret

000079de <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    79de:	fc 01       	movw	r30, r24
    79e0:	82 81       	ldd	r24, Z+2	; 0x02
    79e2:	0c 94 a4 40 	jmp	0x8148	; 0x8148 <SetMixerWave>

000079e6 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    79e6:	fc 01       	movw	r30, r24
	track->note+=param;
    79e8:	91 81       	ldd	r25, Z+1	; 0x01
    79ea:	69 0f       	add	r22, r25
    79ec:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    79ee:	82 81       	ldd	r24, Z+2	; 0x02
    79f0:	0c 94 8d 40 	jmp	0x811a	; 0x811a <SetMixerNote>

000079f4 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    79f4:	fc 01       	movw	r30, r24
	track->note-=param;
    79f6:	91 81       	ldd	r25, Z+1	; 0x01
    79f8:	96 1b       	sub	r25, r22
    79fa:	69 2f       	mov	r22, r25
    79fc:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    79fe:	82 81       	ldd	r24, Z+2	; 0x02
    7a00:	0c 94 8d 40 	jmp	0x811a	; 0x811a <SetMixerNote>

00007a04 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    7a04:	1f 93       	push	r17
    7a06:	cf 93       	push	r28
    7a08:	df 93       	push	r29
    7a0a:	ec 01       	movw	r28, r24
    7a0c:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    7a10:	0e 94 8d 40 	call	0x811a	; 0x811a <SetMixerNote>
	track->note=param;
    7a14:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7a16:	88 81       	ld	r24, Y
    7a18:	87 7f       	andi	r24, 0xF7	; 247
    7a1a:	88 83       	st	Y, r24
}
    7a1c:	df 91       	pop	r29
    7a1e:	cf 91       	pop	r28
    7a20:	1f 91       	pop	r17
    7a22:	08 95       	ret

00007a24 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7a24:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7a26:	14 96       	adiw	r26, 0x04	; 4
    7a28:	8c 91       	ld	r24, X
    7a2a:	14 97       	sbiw	r26, 0x04	; 4
    7a2c:	88 23       	and	r24, r24
    7a2e:	19 f1       	breq	.+70     	; 0x7a76 <PatchCommand14+0x52>
    7a30:	55 96       	adiw	r26, 0x15	; 21
    7a32:	2d 91       	ld	r18, X+
    7a34:	3c 91       	ld	r19, X
    7a36:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    7a38:	66 23       	and	r22, r22
    7a3a:	79 f0       	breq	.+30     	; 0x7a5a <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7a3c:	77 27       	eor	r23, r23
    7a3e:	67 fd       	sbrc	r22, 7
    7a40:	70 95       	com	r23
    7a42:	6f 5f       	subi	r22, 0xFF	; 255
    7a44:	7f 4f       	sbci	r23, 0xFF	; 255
    7a46:	ab 01       	movw	r20, r22
    7a48:	44 0f       	add	r20, r20
    7a4a:	55 1f       	adc	r21, r21
    7a4c:	64 0f       	add	r22, r20
    7a4e:	75 1f       	adc	r23, r21
    7a50:	26 1b       	sub	r18, r22
    7a52:	37 0b       	sbc	r19, r23
    7a54:	09 c0       	rjmp	.+18     	; 0x7a68 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7a56:	ef 3f       	cpi	r30, 0xFF	; 255
    7a58:	39 f0       	breq	.+14     	; 0x7a68 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7a5a:	23 50       	subi	r18, 0x03	; 3
    7a5c:	31 09       	sbc	r19, r1
    7a5e:	f9 01       	movw	r30, r18
    7a60:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7a62:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7a64:	ed 30       	cpi	r30, 0x0D	; 13
    7a66:	b9 f7       	brne	.-18     	; 0x7a56 <PatchCommand14+0x32>
    7a68:	56 96       	adiw	r26, 0x16	; 22
    7a6a:	3c 93       	st	X, r19
    7a6c:	2e 93       	st	-X, r18
    7a6e:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    7a70:	81 50       	subi	r24, 0x01	; 1
    7a72:	14 96       	adiw	r26, 0x04	; 4
    7a74:	8c 93       	st	X, r24
    7a76:	08 95       	ret

00007a78 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7a78:	90 93 46 0b 	sts	0x0B46, r25
    7a7c:	80 93 45 0b 	sts	0x0B45, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7a80:	8f e6       	ldi	r24, 0x6F	; 111
    7a82:	80 93 48 0b 	sts	0x0B48, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7a86:	10 92 42 0a 	sts	0x0A42, r1
    7a8a:	e7 ef       	ldi	r30, 0xF7	; 247
    7a8c:	fa e0       	ldi	r31, 0x0A	; 10

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7a8e:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7a90:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7a92:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7a94:	28 e1       	ldi	r18, 0x18	; 24
    7a96:	df 01       	movw	r26, r30
    7a98:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    7a9a:	8c 93       	st	X, r24
    7a9c:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7a9e:	9c 93       	st	X, r25
    7aa0:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    7aa2:	1c 92       	st	X, r1
    7aa4:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7aa6:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    7aa8:	10 82       	st	Z, r1
    7aaa:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    7aac:	2c 93       	st	X, r18
    7aae:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7ab0:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7ab2:	8f 5f       	subi	r24, 0xFF	; 255
    7ab4:	77 96       	adiw	r30, 0x17	; 23
    7ab6:	84 30       	cpi	r24, 0x04	; 4
    7ab8:	71 f7       	brne	.-36     	; 0x7a96 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7aba:	08 95       	ret

00007abc <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7abc:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7abe:	ed 91       	ld	r30, X+
    7ac0:	fc 91       	ld	r31, X
    7ac2:	11 97       	sbiw	r26, 0x01	; 1
    7ac4:	9f 01       	movw	r18, r30
    7ac6:	2f 5f       	subi	r18, 0xFF	; 255
    7ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    7aca:	11 96       	adiw	r26, 0x01	; 1
    7acc:	3c 93       	st	X, r19
    7ace:	2e 93       	st	-X, r18
    7ad0:	e4 91       	lpm	r30, Z
    7ad2:	e7 fd       	sbrc	r30, 7
    7ad4:	03 c0       	rjmp	.+6      	; 0x7adc <ReadVarLen+0x20>
    7ad6:	8e 2f       	mov	r24, r30
    7ad8:	90 e0       	ldi	r25, 0x00	; 0
    7ada:	08 95       	ret
    {
       value &= 0x7F;
    7adc:	ef 77       	andi	r30, 0x7F	; 127
    7ade:	8e 2f       	mov	r24, r30
    7ae0:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7ae2:	96 95       	lsr	r25
    7ae4:	98 2f       	mov	r25, r24
    7ae6:	88 27       	eor	r24, r24
    7ae8:	97 95       	ror	r25
    7aea:	87 95       	ror	r24
    7aec:	2f 5f       	subi	r18, 0xFF	; 255
    7aee:	3f 4f       	sbci	r19, 0xFF	; 255
    7af0:	f9 01       	movw	r30, r18
    7af2:	31 97       	sbiw	r30, 0x01	; 1
    7af4:	e4 91       	lpm	r30, Z
    7af6:	4e 2f       	mov	r20, r30
    7af8:	4f 77       	andi	r20, 0x7F	; 127
    7afa:	84 0f       	add	r24, r20
    7afc:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7afe:	e7 fd       	sbrc	r30, 7
    7b00:	f0 cf       	rjmp	.-32     	; 0x7ae2 <ReadVarLen+0x26>
    7b02:	2d 93       	st	X+, r18
    7b04:	3c 93       	st	X, r19
    }


    return value;
}
    7b06:	08 95       	ret

00007b08 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7b08:	ef 92       	push	r14
    7b0a:	ff 92       	push	r15
    7b0c:	0f 93       	push	r16
    7b0e:	1f 93       	push	r17
    7b10:	cf 93       	push	r28
    7b12:	df 93       	push	r29
    7b14:	1f 92       	push	r1
    7b16:	cd b7       	in	r28, 0x3d	; 61
    7b18:	de b7       	in	r29, 0x3e	; 62
    7b1a:	7c 01       	movw	r14, r24
    7b1c:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7b1e:	fc 01       	movw	r30, r24
    7b20:	80 81       	ld	r24, Z
    7b22:	08 2f       	mov	r16, r24
    7b24:	00 1f       	adc	r16, r16
    7b26:	00 27       	eor	r16, r16
    7b28:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    7b2a:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7b2c:	9f ef       	ldi	r25, 0xFF	; 255
    7b2e:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7b30:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7b32:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7b34:	87 7b       	andi	r24, 0xB7	; 183
    7b36:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7b38:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    7b3a:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    7b3c:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7b3e:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7b40:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7b42:	82 81       	ldd	r24, Z+2	; 0x02
    7b44:	83 30       	cpi	r24, 0x03	; 3
    7b46:	69 f4       	brne	.+26     	; 0x7b62 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    7b48:	01 11       	cpse	r16, r1
    7b4a:	01 c0       	rjmp	.+2      	; 0x7b4e <TriggerCommon+0x46>
    7b4c:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7b4e:	81 e0       	ldi	r24, 0x01	; 1
    7b50:	91 e0       	ldi	r25, 0x01	; 1
    7b52:	90 93 59 0a 	sts	0x0A59, r25
    7b56:	80 93 58 0a 	sts	0x0A58, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7b5a:	81 e0       	ldi	r24, 0x01	; 1
    7b5c:	80 93 57 0a 	sts	0x0A57, r24
    7b60:	0a c0       	rjmp	.+20     	; 0x7b76 <TriggerCommon+0x6e>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7b62:	60 e0       	ldi	r22, 0x00	; 0
    7b64:	29 83       	std	Y+1, r18	; 0x01
    7b66:	0e 94 a4 40 	call	0x8148	; 0x8148 <SetMixerWave>
			SetMixerNote(track->channel,note);
    7b6a:	29 81       	ldd	r18, Y+1	; 0x01
    7b6c:	62 2f       	mov	r22, r18
    7b6e:	f7 01       	movw	r30, r14
    7b70:	82 81       	ldd	r24, Z+2	; 0x02
    7b72:	0e 94 8d 40 	call	0x811a	; 0x811a <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7b76:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7b78:	00 23       	and	r16, r16
    7b7a:	11 f0       	breq	.+4      	; 0x7b80 <TriggerCommon+0x78>
		track->fxPatchNo=patch;
    7b7c:	11 8b       	std	Z+17, r17	; 0x11
    7b7e:	01 c0       	rjmp	.+2      	; 0x7b82 <TriggerCommon+0x7a>
	}else{
		track->patchNo=patch;	
    7b80:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7b82:	e0 91 45 0b 	lds	r30, 0x0B45
    7b86:	f0 91 46 0b 	lds	r31, 0x0B46
    7b8a:	89 e0       	ldi	r24, 0x09	; 9
    7b8c:	18 9f       	mul	r17, r24
    7b8e:	e0 0d       	add	r30, r0
    7b90:	f1 1d       	adc	r31, r1
    7b92:	11 24       	eor	r1, r1
    7b94:	33 96       	adiw	r30, 0x03	; 3
    7b96:	85 91       	lpm	r24, Z+
    7b98:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7b9a:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7b9c:	00 97       	sbiw	r24, 0x00	; 0
    7b9e:	19 f4       	brne	.+6      	; 0x7ba6 <TriggerCommon+0x9e>
		track->patchCommandStreamPos=NULL;
    7ba0:	16 8a       	std	Z+22, r1	; 0x16
    7ba2:	15 8a       	std	Z+21, r1	; 0x15
    7ba4:	08 c0       	rjmp	.+16     	; 0x7bb6 <TriggerCommon+0xae>
	}else{
		track->patchCurrDeltaTime=0;
    7ba6:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7ba8:	fc 01       	movw	r30, r24
    7baa:	24 91       	lpm	r18, Z
    7bac:	f7 01       	movw	r30, r14
    7bae:	22 8b       	std	Z+18, r18	; 0x12
    7bb0:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7bb2:	96 8b       	std	Z+22, r25	; 0x16
    7bb4:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7bb6:	0f 90       	pop	r0
    7bb8:	df 91       	pop	r29
    7bba:	cf 91       	pop	r28
    7bbc:	1f 91       	pop	r17
    7bbe:	0f 91       	pop	r16
    7bc0:	ff 90       	pop	r15
    7bc2:	ef 90       	pop	r14
    7bc4:	08 95       	ret

00007bc6 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7bc6:	cf 93       	push	r28
    7bc8:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7bca:	e0 91 45 0b 	lds	r30, 0x0B45
    7bce:	f0 91 46 0b 	lds	r31, 0x0B46
    7bd2:	99 e0       	ldi	r25, 0x09	; 9
    7bd4:	89 9f       	mul	r24, r25
    7bd6:	e0 0d       	add	r30, r0
    7bd8:	f1 1d       	adc	r31, r1
    7bda:	11 24       	eor	r1, r1
    7bdc:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7bde:	e1 30       	cpi	r30, 0x01	; 1
    7be0:	e9 f0       	breq	.+58     	; 0x7c1c <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7be2:	e2 30       	cpi	r30, 0x02	; 2
    7be4:	e9 f0       	breq	.+58     	; 0x7c20 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7be6:	20 91 fe 0a 	lds	r18, 0x0AFE
    7bea:	27 ff       	sbrs	r18, 7
    7bec:	1d c0       	rjmp	.+58     	; 0x7c28 <TriggerFx+0x62>
    7bee:	20 91 0f 0b 	lds	r18, 0x0B0F
    7bf2:	28 13       	cpse	r18, r24
    7bf4:	02 c0       	rjmp	.+4      	; 0x7bfa <TriggerFx+0x34>
    7bf6:	41 11       	cpse	r20, r1
    7bf8:	17 c0       	rjmp	.+46     	; 0x7c28 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7bfa:	20 91 15 0b 	lds	r18, 0x0B15
    7bfe:	27 ff       	sbrs	r18, 7
    7c00:	11 c0       	rjmp	.+34     	; 0x7c24 <TriggerFx+0x5e>
    7c02:	20 91 26 0b 	lds	r18, 0x0B26
    7c06:	28 13       	cpse	r18, r24
    7c08:	02 c0       	rjmp	.+4      	; 0x7c0e <TriggerFx+0x48>
    7c0a:	41 11       	cpse	r20, r1
    7c0c:	0b c0       	rjmp	.+22     	; 0x7c24 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7c0e:	20 91 12 0b 	lds	r18, 0x0B12
    7c12:	90 91 29 0b 	lds	r25, 0x0B29
    7c16:	92 17       	cp	r25, r18
    7c18:	28 f4       	brcc	.+10     	; 0x7c24 <TriggerFx+0x5e>
    7c1a:	06 c0       	rjmp	.+12     	; 0x7c28 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7c1c:	c3 e0       	ldi	r28, 0x03	; 3
    7c1e:	05 c0       	rjmp	.+10     	; 0x7c2a <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7c20:	c4 e0       	ldi	r28, 0x04	; 4
    7c22:	03 c0       	rjmp	.+6      	; 0x7c2a <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7c24:	c2 e0       	ldi	r28, 0x02	; 2
    7c26:	01 c0       	rjmp	.+2      	; 0x7c2a <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7c28:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7c2a:	97 e1       	ldi	r25, 0x17	; 23
    7c2c:	c9 9f       	mul	r28, r25
    7c2e:	e0 01       	movw	r28, r0
    7c30:	11 24       	eor	r1, r1
    7c32:	c9 51       	subi	r28, 0x19	; 25
    7c34:	d5 4f       	sbci	r29, 0xF5	; 245
    7c36:	90 e8       	ldi	r25, 0x80	; 128
    7c38:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7c3a:	1e 8a       	std	Y+22, r1	; 0x16
    7c3c:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7c3e:	20 e5       	ldi	r18, 0x50	; 80
    7c40:	46 2f       	mov	r20, r22
    7c42:	68 2f       	mov	r22, r24
    7c44:	ce 01       	movw	r24, r28
    7c46:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7c4a:	88 81       	ld	r24, Y
    7c4c:	80 62       	ori	r24, 0x20	; 32
    7c4e:	88 83       	st	Y, r24
}
    7c50:	df 91       	pop	r29
    7c52:	cf 91       	pop	r28
    7c54:	08 95       	ret

00007c56 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7c56:	cf 93       	push	r28
    7c58:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7c5a:	a8 2f       	mov	r26, r24
    7c5c:	b0 e0       	ldi	r27, 0x00	; 0
    7c5e:	97 e1       	ldi	r25, 0x17	; 23
    7c60:	89 9f       	mul	r24, r25
    7c62:	f0 01       	movw	r30, r0
    7c64:	11 24       	eor	r1, r1
    7c66:	e9 51       	subi	r30, 0x19	; 25
    7c68:	f5 4f       	sbci	r31, 0xF5	; 245
    7c6a:	80 81       	ld	r24, Z
    7c6c:	85 ff       	sbrs	r24, 5
    7c6e:	02 c0       	rjmp	.+4      	; 0x7c74 <TriggerNote+0x1e>
    7c70:	87 fd       	sbrc	r24, 7
    7c72:	2e c0       	rjmp	.+92     	; 0x7cd0 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7c74:	21 11       	cpse	r18, r1
    7c76:	18 c0       	rjmp	.+48     	; 0x7ca8 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7c78:	97 e1       	ldi	r25, 0x17	; 23
    7c7a:	9a 9f       	mul	r25, r26
    7c7c:	f0 01       	movw	r30, r0
    7c7e:	9b 9f       	mul	r25, r27
    7c80:	f0 0d       	add	r31, r0
    7c82:	11 24       	eor	r1, r1
    7c84:	e9 51       	subi	r30, 0x19	; 25
    7c86:	f5 4f       	sbci	r31, 0xF5	; 245
    7c88:	97 85       	ldd	r25, Z+15	; 0x0f
    7c8a:	91 11       	cpse	r25, r1
    7c8c:	02 c0       	rjmp	.+4      	; 0x7c92 <TriggerNote+0x3c>
    7c8e:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7c90:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7c92:	97 e1       	ldi	r25, 0x17	; 23
    7c94:	9a 9f       	mul	r25, r26
    7c96:	f0 01       	movw	r30, r0
    7c98:	9b 9f       	mul	r25, r27
    7c9a:	f0 0d       	add	r31, r0
    7c9c:	11 24       	eor	r1, r1
    7c9e:	e9 51       	subi	r30, 0x19	; 25
    7ca0:	f5 4f       	sbci	r31, 0xF5	; 245
    7ca2:	8f 7b       	andi	r24, 0xBF	; 191
    7ca4:	80 83       	st	Z, r24
    7ca6:	14 c0       	rjmp	.+40     	; 0x7cd0 <TriggerNote+0x7a>
    7ca8:	82 2f       	mov	r24, r18
    7caa:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7cac:	97 e1       	ldi	r25, 0x17	; 23
    7cae:	9a 9f       	mul	r25, r26
    7cb0:	e0 01       	movw	r28, r0
    7cb2:	9b 9f       	mul	r25, r27
    7cb4:	d0 0d       	add	r29, r0
    7cb6:	11 24       	eor	r1, r1
    7cb8:	c9 51       	subi	r28, 0x19	; 25
    7cba:	d5 4f       	sbci	r29, 0xF5	; 245
    7cbc:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7cbe:	1e 8a       	std	Y+22, r1	; 0x16
    7cc0:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7cc2:	48 2f       	mov	r20, r24
    7cc4:	ce 01       	movw	r24, r28
    7cc6:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7cca:	88 81       	ld	r24, Y
    7ccc:	80 62       	ori	r24, 0x20	; 32
    7cce:	88 83       	st	Y, r24
		}

	}
}
    7cd0:	df 91       	pop	r29
    7cd2:	cf 91       	pop	r28
    7cd4:	08 95       	ret

00007cd6 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7cd6:	6f 92       	push	r6
    7cd8:	7f 92       	push	r7
    7cda:	8f 92       	push	r8
    7cdc:	9f 92       	push	r9
    7cde:	af 92       	push	r10
    7ce0:	bf 92       	push	r11
    7ce2:	cf 92       	push	r12
    7ce4:	df 92       	push	r13
    7ce6:	ef 92       	push	r14
    7ce8:	ff 92       	push	r15
    7cea:	0f 93       	push	r16
    7cec:	1f 93       	push	r17
    7cee:	cf 93       	push	r28
    7cf0:	df 93       	push	r29
    7cf2:	c7 ee       	ldi	r28, 0xE7	; 231
    7cf4:	da e0       	ldi	r29, 0x0A	; 10
    7cf6:	04 e4       	ldi	r16, 0x44	; 68
    7cf8:	1a e0       	ldi	r17, 0x0A	; 10
    7cfa:	d8 01       	movw	r26, r16
    7cfc:	9e 01       	movw	r18, r28
    7cfe:	40 e0       	ldi	r20, 0x00	; 0
    7d00:	50 e0       	ldi	r21, 0x00	; 0
    7d02:	ca 01       	movw	r24, r20
    7d04:	89 51       	subi	r24, 0x19	; 25
    7d06:	95 4f       	sbci	r25, 0xF5	; 245
    7d08:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7d0a:	fc 01       	movw	r30, r24
    7d0c:	87 85       	ldd	r24, Z+15	; 0x0f
    7d0e:	88 23       	and	r24, r24
    7d10:	91 f0       	breq	.+36     	; 0x7d36 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7d12:	66 85       	ldd	r22, Z+14	; 0x0e
    7d14:	99 27       	eor	r25, r25
    7d16:	87 fd       	sbrc	r24, 7
    7d18:	90 95       	com	r25
    7d1a:	86 0f       	add	r24, r22
    7d1c:	91 1d       	adc	r25, r1
    7d1e:	8f 3f       	cpi	r24, 0xFF	; 255
    7d20:	91 05       	cpc	r25, r1
    7d22:	19 f0       	breq	.+6      	; 0x7d2a <ProcessMusic+0x54>
    7d24:	14 f0       	brlt	.+4      	; 0x7d2a <ProcessMusic+0x54>
    7d26:	8f ef       	ldi	r24, 0xFF	; 255
    7d28:	90 e0       	ldi	r25, 0x00	; 0
    7d2a:	97 ff       	sbrs	r25, 7
    7d2c:	02 c0       	rjmp	.+4      	; 0x7d32 <ProcessMusic+0x5c>
    7d2e:	80 e0       	ldi	r24, 0x00	; 0
    7d30:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7d32:	f6 01       	movw	r30, r12
    7d34:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7d36:	f9 01       	movw	r30, r18
    7d38:	f0 80       	ld	r15, Z
    7d3a:	f3 fe       	sbrs	r15, 3
    7d3c:	2a c0       	rjmp	.+84     	; 0x7d92 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7d3e:	65 81       	ldd	r22, Z+5	; 0x05
    7d40:	76 81       	ldd	r23, Z+6	; 0x06
    7d42:	11 96       	adiw	r26, 0x01	; 1
    7d44:	8d 91       	ld	r24, X+
    7d46:	9c 91       	ld	r25, X
    7d48:	12 97       	sbiw	r26, 0x02	; 2
    7d4a:	86 0f       	add	r24, r22
    7d4c:	97 1f       	adc	r25, r23
    7d4e:	12 96       	adiw	r26, 0x02	; 2
    7d50:	9c 93       	st	X, r25
    7d52:	8e 93       	st	-X, r24
    7d54:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7d56:	f6 01       	movw	r30, r12
    7d58:	e7 80       	ldd	r14, Z+7	; 0x07
    7d5a:	ee 2d       	mov	r30, r14
    7d5c:	f0 e0       	ldi	r31, 0x00	; 0
    7d5e:	ee 0f       	add	r30, r30
    7d60:	ff 1f       	adc	r31, r31
    7d62:	e8 5f       	subi	r30, 0xF8	; 248
    7d64:	fd 47       	sbci	r31, 0x7D	; 125
    7d66:	c5 90       	lpm	r12, Z+
    7d68:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7d6a:	16 16       	cp	r1, r22
    7d6c:	17 06       	cpc	r1, r23
    7d6e:	24 f4       	brge	.+8      	; 0x7d78 <ProcessMusic+0xa2>
    7d70:	8c 15       	cp	r24, r12
    7d72:	9d 05       	cpc	r25, r13
    7d74:	30 f4       	brcc	.+12     	; 0x7d82 <ProcessMusic+0xac>
    7d76:	0d c0       	rjmp	.+26     	; 0x7d92 <ProcessMusic+0xbc>
    7d78:	67 2b       	or	r22, r23
    7d7a:	59 f0       	breq	.+22     	; 0x7d92 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7d7c:	c8 16       	cp	r12, r24
    7d7e:	d9 06       	cpc	r13, r25
    7d80:	40 f0       	brcs	.+16     	; 0x7d92 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7d82:	12 96       	adiw	r26, 0x02	; 2
    7d84:	dc 92       	st	X, r13
    7d86:	ce 92       	st	-X, r12
    7d88:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7d8a:	8f 2d       	mov	r24, r15
    7d8c:	87 7f       	andi	r24, 0xF7	; 247
    7d8e:	f9 01       	movw	r30, r18
    7d90:	80 83       	st	Z, r24
    7d92:	49 5e       	subi	r20, 0xE9	; 233
    7d94:	5f 4f       	sbci	r21, 0xFF	; 255
    7d96:	29 5e       	subi	r18, 0xE9	; 233
    7d98:	3f 4f       	sbci	r19, 0xFF	; 255
    7d9a:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7d9c:	4c 35       	cpi	r20, 0x5C	; 92
    7d9e:	51 05       	cpc	r21, r1
    7da0:	09 f0       	breq	.+2      	; 0x7da4 <ProcessMusic+0xce>
    7da2:	af cf       	rjmp	.-162    	; 0x7d02 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7da4:	80 91 42 0a 	lds	r24, 0x0A42
    7da8:	88 23       	and	r24, r24
    7daa:	09 f4       	brne	.+2      	; 0x7dae <ProcessMusic+0xd8>
    7dac:	cc c0       	rjmp	.+408    	; 0x7f46 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7dae:	57 e1       	ldi	r21, 0x17	; 23
    7db0:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7db2:	80 91 43 0b 	lds	r24, 0x0B43
    7db6:	90 91 44 0b 	lds	r25, 0x0B44
    7dba:	20 91 49 0b 	lds	r18, 0x0B49
    7dbe:	30 91 4a 0b 	lds	r19, 0x0B4A
    7dc2:	82 17       	cp	r24, r18
    7dc4:	93 07       	cpc	r25, r19
    7dc6:	09 f0       	breq	.+2      	; 0x7dca <ProcessMusic+0xf4>
    7dc8:	b9 c0       	rjmp	.+370    	; 0x7f3c <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    7dca:	20 91 4c 0b 	lds	r18, 0x0B4C
    7dce:	30 91 4d 0b 	lds	r19, 0x0B4D
    7dd2:	b9 01       	movw	r22, r18
    7dd4:	6f 5f       	subi	r22, 0xFF	; 255
    7dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    7dd8:	70 93 4d 0b 	sts	0x0B4D, r23
    7ddc:	60 93 4c 0b 	sts	0x0B4C, r22
    7de0:	f9 01       	movw	r30, r18
    7de2:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7de4:	4f 3f       	cpi	r20, 0xFF	; 255
    7de6:	79 f5       	brne	.+94     	; 0x7e46 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7de8:	a9 01       	movw	r20, r18
    7dea:	4e 5f       	subi	r20, 0xFE	; 254
    7dec:	5f 4f       	sbci	r21, 0xFF	; 255
    7dee:	50 93 4d 0b 	sts	0x0B4D, r21
    7df2:	40 93 4c 0b 	sts	0x0B4C, r20
    7df6:	fb 01       	movw	r30, r22
    7df8:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7dfa:	6f 32       	cpi	r22, 0x2F	; 47
    7dfc:	19 f4       	brne	.+6      	; 0x7e04 <ProcessMusic+0x12e>
						playSong=false;
    7dfe:	10 92 42 0a 	sts	0x0A42, r1
						break;	
    7e02:	9c c0       	rjmp	.+312    	; 0x7f3c <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7e04:	66 30       	cpi	r22, 0x06	; 6
    7e06:	09 f0       	breq	.+2      	; 0x7e0a <ProcessMusic+0x134>
    7e08:	8c c0       	rjmp	.+280    	; 0x7f22 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    7e0a:	fa 01       	movw	r30, r20
    7e0c:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7e0e:	c9 01       	movw	r24, r18
    7e10:	04 96       	adiw	r24, 0x04	; 4
    7e12:	90 93 4d 0b 	sts	0x0B4D, r25
    7e16:	80 93 4c 0b 	sts	0x0B4C, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7e1a:	f9 01       	movw	r30, r18
    7e1c:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7e1e:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7e20:	e3 35       	cpi	r30, 0x53	; 83
    7e22:	29 f4       	brne	.+10     	; 0x7e2e <ProcessMusic+0x158>
							loopStart=songPos;
    7e24:	90 93 4f 0b 	sts	0x0B4F, r25
    7e28:	80 93 4e 0b 	sts	0x0B4E, r24
    7e2c:	7a c0       	rjmp	.+244    	; 0x7f22 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7e2e:	e5 34       	cpi	r30, 0x45	; 69
    7e30:	09 f0       	breq	.+2      	; 0x7e34 <ProcessMusic+0x15e>
    7e32:	77 c0       	rjmp	.+238    	; 0x7f22 <ProcessMusic+0x24c>
							songPos=loopStart;
    7e34:	80 91 4e 0b 	lds	r24, 0x0B4E
    7e38:	90 91 4f 0b 	lds	r25, 0x0B4F
    7e3c:	90 93 4d 0b 	sts	0x0B4D, r25
    7e40:	80 93 4c 0b 	sts	0x0B4C, r24
    7e44:	6e c0       	rjmp	.+220    	; 0x7f22 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7e46:	47 fd       	sbrc	r20, 7
    7e48:	40 93 47 0b 	sts	0x0B47, r20
					channel=lastStatus&0x0f;
    7e4c:	90 91 47 0b 	lds	r25, 0x0B47
    7e50:	89 2f       	mov	r24, r25
    7e52:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7e54:	47 ff       	sbrs	r20, 7
    7e56:	08 c0       	rjmp	.+16     	; 0x7e68 <ProcessMusic+0x192>
    7e58:	2e 5f       	subi	r18, 0xFE	; 254
    7e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    7e5c:	30 93 4d 0b 	sts	0x0B4D, r19
    7e60:	20 93 4c 0b 	sts	0x0B4C, r18
    7e64:	fb 01       	movw	r30, r22
    7e66:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7e68:	90 7f       	andi	r25, 0xF0	; 240
    7e6a:	90 3b       	cpi	r25, 0xB0	; 176
    7e6c:	e1 f0       	breq	.+56     	; 0x7ea6 <ProcessMusic+0x1d0>
    7e6e:	90 3c       	cpi	r25, 0xC0	; 192
    7e70:	09 f4       	brne	.+2      	; 0x7e74 <ProcessMusic+0x19e>
    7e72:	51 c0       	rjmp	.+162    	; 0x7f16 <ProcessMusic+0x240>
    7e74:	90 39       	cpi	r25, 0x90	; 144
    7e76:	09 f0       	breq	.+2      	; 0x7e7a <ProcessMusic+0x1a4>
    7e78:	54 c0       	rjmp	.+168    	; 0x7f22 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7e7a:	e0 91 4c 0b 	lds	r30, 0x0B4C
    7e7e:	f0 91 4d 0b 	lds	r31, 0x0B4D
    7e82:	9f 01       	movw	r18, r30
    7e84:	2f 5f       	subi	r18, 0xFF	; 255
    7e86:	3f 4f       	sbci	r19, 0xFF	; 255
    7e88:	30 93 4d 0b 	sts	0x0B4D, r19
    7e8c:	20 93 4c 0b 	sts	0x0B4C, r18
    7e90:	24 91       	lpm	r18, Z
    7e92:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7e94:	f8 9e       	mul	r15, r24
    7e96:	f0 01       	movw	r30, r0
    7e98:	11 24       	eor	r1, r1
    7e9a:	e9 51       	subi	r30, 0x19	; 25
    7e9c:	f5 4f       	sbci	r31, 0xF5	; 245
    7e9e:	60 89       	ldd	r22, Z+16	; 0x10
    7ea0:	0e 94 2b 3e 	call	0x7c56	; 0x7c56 <TriggerNote>
    7ea4:	3e c0       	rjmp	.+124    	; 0x7f22 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7ea6:	e0 91 4c 0b 	lds	r30, 0x0B4C
    7eaa:	f0 91 4d 0b 	lds	r31, 0x0B4D
    7eae:	9f 01       	movw	r18, r30
    7eb0:	2f 5f       	subi	r18, 0xFF	; 255
    7eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    7eb4:	30 93 4d 0b 	sts	0x0B4D, r19
    7eb8:	20 93 4c 0b 	sts	0x0B4C, r18
    7ebc:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7ebe:	47 30       	cpi	r20, 0x07	; 7
    7ec0:	49 f4       	brne	.+18     	; 0x7ed4 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7ec2:	f8 9e       	mul	r15, r24
    7ec4:	d0 01       	movw	r26, r0
    7ec6:	11 24       	eor	r1, r1
    7ec8:	a9 51       	subi	r26, 0x19	; 25
    7eca:	b5 4f       	sbci	r27, 0xF5	; 245
    7ecc:	ee 0f       	add	r30, r30
    7ece:	1c 96       	adiw	r26, 0x0c	; 12
    7ed0:	ec 93       	st	X, r30
    7ed2:	27 c0       	rjmp	.+78     	; 0x7f22 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7ed4:	4b 30       	cpi	r20, 0x0B	; 11
    7ed6:	49 f4       	brne	.+18     	; 0x7eea <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7ed8:	f8 9e       	mul	r15, r24
    7eda:	d0 01       	movw	r26, r0
    7edc:	11 24       	eor	r1, r1
    7ede:	a9 51       	subi	r26, 0x19	; 25
    7ee0:	b5 4f       	sbci	r27, 0xF5	; 245
    7ee2:	ee 0f       	add	r30, r30
    7ee4:	13 96       	adiw	r26, 0x03	; 3
    7ee6:	ec 93       	st	X, r30
    7ee8:	1c c0       	rjmp	.+56     	; 0x7f22 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7eea:	4c 35       	cpi	r20, 0x5C	; 92
    7eec:	49 f4       	brne	.+18     	; 0x7f00 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7eee:	f8 9e       	mul	r15, r24
    7ef0:	d0 01       	movw	r26, r0
    7ef2:	11 24       	eor	r1, r1
    7ef4:	a9 51       	subi	r26, 0x19	; 25
    7ef6:	b5 4f       	sbci	r27, 0xF5	; 245
    7ef8:	ee 0f       	add	r30, r30
    7efa:	1a 96       	adiw	r26, 0x0a	; 10
    7efc:	ec 93       	st	X, r30
    7efe:	11 c0       	rjmp	.+34     	; 0x7f22 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7f00:	44 36       	cpi	r20, 0x64	; 100
    7f02:	79 f4       	brne	.+30     	; 0x7f22 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7f04:	f8 9e       	mul	r15, r24
    7f06:	d0 01       	movw	r26, r0
    7f08:	11 24       	eor	r1, r1
    7f0a:	a9 51       	subi	r26, 0x19	; 25
    7f0c:	b5 4f       	sbci	r27, 0xF5	; 245
    7f0e:	ee 0f       	add	r30, r30
    7f10:	1b 96       	adiw	r26, 0x0b	; 11
    7f12:	ec 93       	st	X, r30
    7f14:	06 c0       	rjmp	.+12     	; 0x7f22 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7f16:	f8 9e       	mul	r15, r24
    7f18:	f0 01       	movw	r30, r0
    7f1a:	11 24       	eor	r1, r1
    7f1c:	e9 51       	subi	r30, 0x19	; 25
    7f1e:	f5 4f       	sbci	r31, 0xF5	; 245
    7f20:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7f22:	8c e4       	ldi	r24, 0x4C	; 76
    7f24:	9b e0       	ldi	r25, 0x0B	; 11
    7f26:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <ReadVarLen>
    7f2a:	90 93 4a 0b 	sts	0x0B4A, r25
    7f2e:	80 93 49 0b 	sts	0x0B49, r24
				currDeltaTime=0;
    7f32:	10 92 44 0b 	sts	0x0B44, r1
    7f36:	10 92 43 0b 	sts	0x0B43, r1
    7f3a:	3b cf       	rjmp	.-394    	; 0x7db2 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7f3c:	01 96       	adiw	r24, 0x01	; 1
    7f3e:	90 93 44 0b 	sts	0x0B44, r25
    7f42:	80 93 43 0b 	sts	0x0B43, r24
    7f46:	90 ef       	ldi	r25, 0xF0	; 240
    7f48:	a9 2e       	mov	r10, r25
    7f4a:	9a e0       	ldi	r25, 0x0A	; 10
    7f4c:	b9 2e       	mov	r11, r25
    7f4e:	2a ef       	ldi	r18, 0xFA	; 250
    7f50:	c2 2e       	mov	r12, r18
    7f52:	2a e0       	ldi	r18, 0x0A	; 10
    7f54:	d2 2e       	mov	r13, r18
    7f56:	3b ef       	ldi	r19, 0xFB	; 251
    7f58:	e3 2e       	mov	r14, r19
    7f5a:	3a e0       	ldi	r19, 0x0A	; 10
    7f5c:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7f5e:	66 24       	eor	r6, r6
    7f60:	6a 94       	dec	r6
    7f62:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7f64:	88 81       	ld	r24, Y
    7f66:	85 ff       	sbrs	r24, 5
    7f68:	42 c0       	rjmp	.+132    	; 0x7fee <ProcessMusic+0x318>
    7f6a:	2d 89       	ldd	r18, Y+21	; 0x15
    7f6c:	3e 89       	ldd	r19, Y+22	; 0x16
    7f6e:	23 2b       	or	r18, r19
    7f70:	09 f4       	brne	.+2      	; 0x7f74 <ProcessMusic+0x29e>
    7f72:	3d c0       	rjmp	.+122    	; 0x7fee <ProcessMusic+0x318>
    7f74:	86 fd       	sbrc	r24, 6
    7f76:	3b c0       	rjmp	.+118    	; 0x7fee <ProcessMusic+0x318>
    7f78:	47 01       	movw	r8, r14
    7f7a:	f2 e0       	ldi	r31, 0x02	; 2
    7f7c:	8f 1a       	sub	r8, r31
    7f7e:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7f80:	d6 01       	movw	r26, r12
    7f82:	9c 91       	ld	r25, X
    7f84:	f4 01       	movw	r30, r8
    7f86:	80 81       	ld	r24, Z
    7f88:	98 13       	cpse	r25, r24
    7f8a:	2e c0       	rjmp	.+92     	; 0x7fe8 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7f8c:	ed 89       	ldd	r30, Y+21	; 0x15
    7f8e:	fe 89       	ldd	r31, Y+22	; 0x16
    7f90:	bf 01       	movw	r22, r30
    7f92:	6f 5f       	subi	r22, 0xFF	; 255
    7f94:	7f 4f       	sbci	r23, 0xFF	; 255
    7f96:	7e 8b       	std	Y+22, r23	; 0x16
    7f98:	6d 8b       	std	Y+21, r22	; 0x15
    7f9a:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7f9c:	8f 3f       	cpi	r24, 0xFF	; 255
    7f9e:	31 f4       	brne	.+12     	; 0x7fac <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7fa0:	88 81       	ld	r24, Y
    7fa2:	8f 77       	andi	r24, 0x7F	; 127
    7fa4:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7fa6:	1e 8a       	std	Y+22, r1	; 0x16
    7fa8:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7faa:	1e c0       	rjmp	.+60     	; 0x7fe8 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7fac:	9f 01       	movw	r18, r30
    7fae:	2e 5f       	subi	r18, 0xFE	; 254
    7fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    7fb2:	3e 8b       	std	Y+22, r19	; 0x16
    7fb4:	2d 8b       	std	Y+21, r18	; 0x15
    7fb6:	fb 01       	movw	r30, r22
    7fb8:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7fba:	e8 2f       	mov	r30, r24
    7fbc:	f0 e0       	ldi	r31, 0x00	; 0
    7fbe:	ee 0f       	add	r30, r30
    7fc0:	ff 1f       	adc	r31, r31
    7fc2:	e2 54       	subi	r30, 0x42	; 66
    7fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    7fc6:	25 91       	lpm	r18, Z+
    7fc8:	34 91       	lpm	r19, Z
    7fca:	ce 01       	movw	r24, r28
    7fcc:	f9 01       	movw	r30, r18
    7fce:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7fd0:	ed 89       	ldd	r30, Y+21	; 0x15
    7fd2:	fe 89       	ldd	r31, Y+22	; 0x16
    7fd4:	cf 01       	movw	r24, r30
    7fd6:	01 96       	adiw	r24, 0x01	; 1
    7fd8:	9e 8b       	std	Y+22, r25	; 0x16
    7fda:	8d 8b       	std	Y+21, r24	; 0x15
    7fdc:	e4 91       	lpm	r30, Z
    7fde:	d4 01       	movw	r26, r8
    7fe0:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    7fe2:	f6 01       	movw	r30, r12
    7fe4:	10 82       	st	Z, r1
    7fe6:	cc cf       	rjmp	.-104    	; 0x7f80 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    7fe8:	9f 5f       	subi	r25, 0xFF	; 255
    7fea:	d6 01       	movw	r26, r12
    7fec:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    7fee:	98 81       	ld	r25, Y
    7ff0:	95 ff       	sbrs	r25, 5
    7ff2:	6c c0       	rjmp	.+216    	; 0x80cc <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    7ff4:	f7 01       	movw	r30, r14
    7ff6:	80 81       	ld	r24, Z
    7ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    7ffa:	11 f0       	breq	.+4      	; 0x8000 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    7ffc:	8f 5f       	subi	r24, 0xFF	; 255
    7ffe:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8000:	97 fd       	sbrc	r25, 7
    8002:	04 c0       	rjmp	.+8      	; 0x800c <ProcessMusic+0x336>
    8004:	f7 01       	movw	r30, r14
    8006:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8008:	90 81       	ld	r25, Z
    800a:	01 c0       	rjmp	.+2      	; 0x800e <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    800c:	9f ef       	ldi	r25, 0xFF	; 255
    800e:	f7 01       	movw	r30, r14
    8010:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8012:	80 81       	ld	r24, Z
    8014:	88 23       	and	r24, r24
    8016:	09 f4       	brne	.+2      	; 0x801a <ProcessMusic+0x344>
    8018:	4e c0       	rjmp	.+156    	; 0x80b6 <ProcessMusic+0x3e0>
    801a:	31 96       	adiw	r30, 0x01	; 1
    801c:	50 81       	ld	r21, Z
    801e:	55 23       	and	r21, r21
    8020:	09 f4       	brne	.+2      	; 0x8024 <ProcessMusic+0x34e>
    8022:	49 c0       	rjmp	.+146    	; 0x80b6 <ProcessMusic+0x3e0>
    8024:	99 23       	and	r25, r25
    8026:	09 f4       	brne	.+2      	; 0x802a <ProcessMusic+0x354>
    8028:	46 c0       	rjmp	.+140    	; 0x80b6 <ProcessMusic+0x3e0>
    802a:	40 91 48 0b 	lds	r20, 0x0B48
    802e:	44 23       	and	r20, r20
    8030:	09 f4       	brne	.+2      	; 0x8034 <ProcessMusic+0x35e>
    8032:	41 c0       	rjmp	.+130    	; 0x80b6 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8034:	89 9f       	mul	r24, r25
    8036:	c0 01       	movw	r24, r0
    8038:	11 24       	eor	r1, r1
    803a:	93 95       	inc	r25
				uVol>>=8;
    803c:	89 2f       	mov	r24, r25
    803e:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8040:	58 9f       	mul	r21, r24
    8042:	90 01       	movw	r18, r0
    8044:	59 9f       	mul	r21, r25
    8046:	30 0d       	add	r19, r0
    8048:	11 24       	eor	r1, r1
    804a:	c9 01       	movw	r24, r18
    804c:	93 95       	inc	r25
				uVol>>=8;
    804e:	89 2f       	mov	r24, r25
    8050:	99 27       	eor	r25, r25
    8052:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8054:	50 81       	ld	r21, Z
    8056:	58 9f       	mul	r21, r24
    8058:	90 01       	movw	r18, r0
    805a:	59 9f       	mul	r21, r25
    805c:	30 0d       	add	r19, r0
    805e:	11 24       	eor	r1, r1
    8060:	33 95       	inc	r19
					uVol>>=8;
    8062:	23 2f       	mov	r18, r19
    8064:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8066:	42 9f       	mul	r20, r18
    8068:	c0 01       	movw	r24, r0
    806a:	43 9f       	mul	r20, r19
    806c:	90 0d       	add	r25, r0
    806e:	11 24       	eor	r1, r1
    8070:	93 95       	inc	r25
				uVol>>=8;
    8072:	89 2f       	mov	r24, r25
    8074:	99 27       	eor	r25, r25
    8076:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8078:	20 81       	ld	r18, Z
    807a:	22 23       	and	r18, r18
    807c:	f1 f0       	breq	.+60     	; 0x80ba <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    807e:	d5 01       	movw	r26, r10
    8080:	ec 91       	ld	r30, X
    8082:	f0 e0       	ldi	r31, 0x00	; 0
    8084:	e0 50       	subi	r30, 0x00	; 0
    8086:	fc 47       	sbci	r31, 0x7C	; 124
    8088:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    808a:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    808c:	2e 9f       	mul	r18, r30
    808e:	f0 01       	movw	r30, r0
    8090:	11 24       	eor	r1, r1
    8092:	f3 95       	inc	r31
					tVol>>=8;
    8094:	ef 2f       	mov	r30, r31
    8096:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8098:	a3 01       	movw	r20, r6
    809a:	4e 1b       	sub	r20, r30
    809c:	5f 0b       	sbc	r21, r31
    809e:	48 9f       	mul	r20, r24
    80a0:	90 01       	movw	r18, r0
    80a2:	49 9f       	mul	r20, r25
    80a4:	30 0d       	add	r19, r0
    80a6:	58 9f       	mul	r21, r24
    80a8:	30 0d       	add	r19, r0
    80aa:	11 24       	eor	r1, r1
    80ac:	c9 01       	movw	r24, r18
    80ae:	93 95       	inc	r25
					uVol>>=8;
    80b0:	89 2f       	mov	r24, r25
    80b2:	99 27       	eor	r25, r25
    80b4:	02 c0       	rjmp	.+4      	; 0x80ba <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    80b6:	80 e0       	ldi	r24, 0x00	; 0
    80b8:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    80ba:	f5 01       	movw	r30, r10
    80bc:	30 81       	ld	r19, Z
    80be:	f7 01       	movw	r30, r14
    80c0:	39 97       	sbiw	r30, 0x09	; 9
    80c2:	20 81       	ld	r18, Z
    80c4:	23 0f       	add	r18, r19
    80c6:	d5 01       	movw	r26, r10
    80c8:	2c 93       	st	X, r18
    80ca:	02 c0       	rjmp	.+4      	; 0x80d0 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    80cc:	80 e0       	ldi	r24, 0x00	; 0
    80ce:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    80d0:	f8 01       	movw	r30, r16
    80d2:	80 83       	st	Z, r24
    80d4:	67 96       	adiw	r28, 0x17	; 23
    80d6:	0a 5f       	subi	r16, 0xFA	; 250
    80d8:	1f 4f       	sbci	r17, 0xFF	; 255
    80da:	f7 e1       	ldi	r31, 0x17	; 23
    80dc:	af 0e       	add	r10, r31
    80de:	b1 1c       	adc	r11, r1
    80e0:	87 e1       	ldi	r24, 0x17	; 23
    80e2:	c8 0e       	add	r12, r24
    80e4:	d1 1c       	adc	r13, r1
    80e6:	97 e1       	ldi	r25, 0x17	; 23
    80e8:	e9 0e       	add	r14, r25
    80ea:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    80ec:	ab e0       	ldi	r26, 0x0B	; 11
    80ee:	c3 34       	cpi	r28, 0x43	; 67
    80f0:	da 07       	cpc	r29, r26
    80f2:	09 f0       	breq	.+2      	; 0x80f6 <ProcessMusic+0x420>
    80f4:	37 cf       	rjmp	.-402    	; 0x7f64 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    80f6:	df 91       	pop	r29
    80f8:	cf 91       	pop	r28
    80fa:	1f 91       	pop	r17
    80fc:	0f 91       	pop	r16
    80fe:	ff 90       	pop	r15
    8100:	ef 90       	pop	r14
    8102:	df 90       	pop	r13
    8104:	cf 90       	pop	r12
    8106:	bf 90       	pop	r11
    8108:	af 90       	pop	r10
    810a:	9f 90       	pop	r9
    810c:	8f 90       	pop	r8
    810e:	7f 90       	pop	r7
    8110:	6f 90       	pop	r6
    8112:	08 95       	ret

00008114 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8114:	80 93 48 0b 	sts	0x0B48, r24
    8118:	08 95       	ret

0000811a <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    811a:	99 27       	eor	r25, r25
	clr r23
    811c:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    811e:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8120:	09 f4       	brne	.+2      	; 0x8124 <set_note_waves>
		ret
    8122:	08 95       	ret

00008124 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8124:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8126:	f2 e8       	ldi	r31, 0x82	; 130
	lsl r22
    8128:	66 0f       	add	r22, r22
	rol r23
    812a:	77 1f       	adc	r23, r23
	add ZL,r22
    812c:	e6 0f       	add	r30, r22
	adc ZH,r23	
    812e:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8130:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8132:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8134:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    8136:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8138:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    813a:	28 9f       	mul	r18, r24
	add ZL,r0
    813c:	e0 0d       	add	r30, r0
	adc ZH,r1
    813e:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8140:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8142:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8144:	11 24       	eor	r1, r1
	

	ret
    8146:	08 95       	ret

00008148 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8148:	99 27       	eor	r25, r25
	clr r23
    814a:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    814c:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    814e:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8150:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8152:	28 9f       	mul	r18, r24
	add ZL,r0
    8154:	e0 0d       	add	r30, r0
	adc ZH,r1
    8156:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8158:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    815a:	31 f4       	brne	.+12     	; 0x8168 <smw1>
	lds r22,tr4_params
    815c:	60 91 57 0a 	lds	r22, 0x0A57
	andi r22,0xfe;
    8160:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8162:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw	
    8166:	0b c0       	rjmp	.+22     	; 0x817e <esmw>

00008168 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8168:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    816a:	31 f4       	brne	.+12     	; 0x8178 <smw2>
	lds r22,tr4_params
    816c:	60 91 57 0a 	lds	r22, 0x0A57
	ori r22,0xfe;
    8170:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8172:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw
    8176:	03 c0       	rjmp	.+6      	; 0x817e <esmw>

00008178 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8178:	74 e8       	ldi	r23, 0x84	; 132
	add r23,r22
    817a:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    817c:	75 83       	std	Z+5, r23	; 0x05

0000817e <esmw>:

esmw:
	clr r1	
    817e:	11 24       	eor	r1, r1
	ret
    8180:	08 95       	ret
	...

00008200 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8200:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8202:	80 93 43 0a 	sts	0x0A43, r24
	ret
    8206:	08 95       	ret

00008208 <steptable>:
    8208:	22 00       	.word	0x0022	; ????
    820a:	24 00       	.word	0x0024	; ????
    820c:	26 00       	.word	0x0026	; ????
    820e:	28 00       	.word	0x0028	; ????
    8210:	2b 00       	.word	0x002b	; ????
    8212:	2d 00       	.word	0x002d	; ????
    8214:	30 00       	.word	0x0030	; ????
    8216:	33 00       	.word	0x0033	; ????
    8218:	36 00       	.word	0x0036	; ????
    821a:	39 00       	.word	0x0039	; ????
    821c:	3d 00       	.word	0x003d	; ????
    821e:	40 00       	.word	0x0040	; ????
    8220:	44 00       	.word	0x0044	; ????
    8222:	48 00       	.word	0x0048	; ????
    8224:	4c 00       	.word	0x004c	; ????
    8226:	51 00       	.word	0x0051	; ????
    8228:	56 00       	.word	0x0056	; ????
    822a:	5b 00       	.word	0x005b	; ????
    822c:	60 00       	.word	0x0060	; ????
    822e:	66 00       	.word	0x0066	; ????
    8230:	6c 00       	.word	0x006c	; ????
    8232:	73 00       	.word	0x0073	; ????
    8234:	79 00       	.word	0x0079	; ????
    8236:	81 00       	.word	0x0081	; ????
    8238:	88 00       	.word	0x0088	; ????
    823a:	90 00       	.word	0x0090	; ????
    823c:	99 00       	.word	0x0099	; ????
    823e:	a2 00       	.word	0x00a2	; ????
    8240:	ac 00       	.word	0x00ac	; ????
    8242:	b6 00       	.word	0x00b6	; ????
    8244:	c1 00       	.word	0x00c1	; ????
    8246:	cc 00       	.word	0x00cc	; ????
    8248:	d8 00       	.word	0x00d8	; ????
    824a:	e5 00       	.word	0x00e5	; ????
    824c:	f3 00       	.word	0x00f3	; ????
    824e:	01 01       	movw	r0, r2
    8250:	10 01       	movw	r2, r0
    8252:	21 01       	movw	r4, r2
    8254:	32 01       	movw	r6, r4
    8256:	44 01       	movw	r8, r8
    8258:	57 01       	movw	r10, r14
    825a:	6c 01       	movw	r12, r24
    825c:	81 01       	movw	r16, r2
    825e:	98 01       	movw	r18, r16
    8260:	b0 01       	movw	r22, r0
    8262:	ca 01       	movw	r24, r20
    8264:	e5 01       	movw	r28, r10
    8266:	02 02       	muls	r16, r18
    8268:	21 02       	muls	r18, r17
    826a:	41 02       	muls	r20, r17
    826c:	64 02       	muls	r22, r20
    826e:	88 02       	muls	r24, r24
    8270:	ae 02       	muls	r26, r30
    8272:	d7 02       	muls	r29, r23
    8274:	03 03       	mulsu	r16, r19
    8276:	30 03       	mulsu	r19, r16
    8278:	61 03       	mulsu	r22, r17
    827a:	94 03       	fmuls	r17, r20
    827c:	cb 03       	fmulsu	r20, r19
    827e:	05 04       	cpc	r0, r5
    8280:	42 04       	cpc	r4, r2
    8282:	83 04       	cpc	r8, r3
    8284:	c7 04       	cpc	r12, r7
    8286:	10 05       	cpc	r17, r0
    8288:	5d 05       	cpc	r21, r13
    828a:	af 05       	cpc	r26, r15
    828c:	05 06       	cpc	r0, r21
    828e:	61 06       	cpc	r6, r17
    8290:	c2 06       	cpc	r12, r18
    8292:	29 07       	cpc	r18, r25
    8294:	96 07       	cpc	r25, r22
    8296:	09 08       	sbc	r0, r9
    8298:	83 08       	sbc	r8, r3
    829a:	05 09       	sbc	r16, r5
    829c:	8e 09       	sbc	r24, r14
    829e:	20 0a       	sbc	r2, r16
    82a0:	ba 0a       	sbc	r11, r26
    82a2:	5d 0b       	sbc	r21, r29
    82a4:	0a 0c       	add	r0, r10
    82a6:	c1 0c       	add	r12, r1
    82a8:	84 0d       	add	r24, r4
    82aa:	51 0e       	add	r5, r17
    82ac:	2b 0f       	add	r18, r27
    82ae:	12 10       	cpse	r1, r2
    82b0:	07 11       	cpse	r16, r7
    82b2:	0a 12       	cpse	r0, r26
    82b4:	1d 13       	cpse	r17, r29
    82b6:	40 14       	cp	r4, r0
    82b8:	74 15       	cp	r23, r4
    82ba:	ba 16       	cp	r11, r26
    82bc:	14 18       	sub	r1, r4
    82be:	83 19       	sub	r24, r3
    82c0:	07 1b       	sub	r16, r23
    82c2:	a3 1c       	adc	r10, r3
    82c4:	57 1e       	adc	r5, r23
    82c6:	24 20       	and	r2, r4
    82c8:	0e 22       	and	r0, r30
    82ca:	14 24       	eor	r1, r4
    82cc:	39 26       	eor	r3, r25
    82ce:	7f 28       	or	r7, r15
    82d0:	e8 2a       	or	r14, r24
    82d2:	75 2d       	mov	r23, r5
    82d4:	29 30       	cpi	r18, 0x09	; 9
    82d6:	06 33       	cpi	r16, 0x36	; 54
    82d8:	0f 36       	cpi	r16, 0x6F	; 111
    82da:	45 39       	cpi	r20, 0x95	; 149
    82dc:	ad 3c       	cpi	r26, 0xCD	; 205
    82de:	49 40       	sbci	r20, 0x09	; 9
    82e0:	1b 44       	sbci	r17, 0x4B	; 75
    82e2:	28 48       	sbci	r18, 0x88	; 136
    82e4:	73 4c       	sbci	r23, 0xC3	; 195
    82e6:	fe 50       	subi	r31, 0x0E	; 14
    82e8:	cf 55       	subi	r28, 0x5F	; 95
    82ea:	ea 5a       	subi	r30, 0xAA	; 170
    82ec:	51 60       	ori	r21, 0x01	; 1
    82ee:	0c 66       	ori	r16, 0x6C	; 108
    82f0:	1d 6c       	ori	r17, 0xCD	; 205
    82f2:	8b 72       	andi	r24, 0x2B	; 43
    82f4:	5a 79       	andi	r21, 0x9A	; 154
    82f6:	92 80       	ldd	r9, Z+2	; 0x02
    82f8:	37 88       	ldd	r3, Z+23	; 0x17
    82fa:	50 90 e5 98 	lds	r5, 0x98E5
    82fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8300:	9f ab       	std	Y+55, r25	; 0x37
    8302:	d3 b5       	in	r29, 0x23	; 35
    8304:	a3 c0       	rjmp	.+326    	; 0x844c <waves+0x4c>
	...

00008400 <waves>:
    8400:	00 03       	mulsu	r16, r16
    8402:	06 09       	sbc	r16, r6
    8404:	0c 10       	cpse	r0, r12
    8406:	13 16       	cp	r1, r19
    8408:	19 1c       	adc	r1, r9
    840a:	1f 22       	and	r1, r31
    840c:	25 28       	or	r2, r5
    840e:	2b 2e       	mov	r2, r27
    8410:	31 33       	cpi	r19, 0x31	; 49
    8412:	36 39       	cpi	r19, 0x96	; 150
    8414:	3c 3f       	cpi	r19, 0xFC	; 252
    8416:	41 44       	sbci	r20, 0x41	; 65
    8418:	47 49       	sbci	r20, 0x97	; 151
    841a:	4c 4e       	sbci	r20, 0xEC	; 236
    841c:	51 53       	subi	r21, 0x31	; 49
    841e:	55 58       	subi	r21, 0x85	; 133
    8420:	5a 5c       	subi	r21, 0xCA	; 202
    8422:	5e 60       	ori	r21, 0x0E	; 14
    8424:	62 64       	ori	r22, 0x42	; 66
    8426:	66 68       	ori	r22, 0x86	; 134
    8428:	6a 6b       	ori	r22, 0xBA	; 186
    842a:	6d 6f       	ori	r22, 0xFD	; 253
    842c:	70 71       	andi	r23, 0x10	; 16
    842e:	73 74       	andi	r23, 0x43	; 67
    8430:	75 76       	andi	r23, 0x65	; 101
    8432:	78 79       	andi	r23, 0x98	; 152
    8434:	7a 7a       	andi	r23, 0xAA	; 170
    8436:	7b 7c       	andi	r23, 0xCB	; 203
    8438:	7d 7d       	andi	r23, 0xDD	; 221
    843a:	7e 7e       	andi	r23, 0xEE	; 238
    843c:	7e 7f       	andi	r23, 0xFE	; 254
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7e 7e       	andi	r23, 0xEE	; 238
    8446:	7e 7d       	andi	r23, 0xDE	; 222
    8448:	7d 7c       	andi	r23, 0xCD	; 205
    844a:	7b 7a       	andi	r23, 0xAB	; 171
    844c:	7a 79       	andi	r23, 0x9A	; 154
    844e:	78 76       	andi	r23, 0x68	; 104
    8450:	75 74       	andi	r23, 0x45	; 69
    8452:	73 71       	andi	r23, 0x13	; 19
    8454:	70 6f       	ori	r23, 0xF0	; 240
    8456:	6d 6b       	ori	r22, 0xBD	; 189
    8458:	6a 68       	ori	r22, 0x8A	; 138
    845a:	66 64       	ori	r22, 0x46	; 70
    845c:	62 60       	ori	r22, 0x02	; 2
    845e:	5e 5c       	subi	r21, 0xCE	; 206
    8460:	5a 58       	subi	r21, 0x8A	; 138
    8462:	55 53       	subi	r21, 0x35	; 53
    8464:	51 4e       	sbci	r21, 0xE1	; 225
    8466:	4c 49       	sbci	r20, 0x9C	; 156
    8468:	47 44       	sbci	r20, 0x47	; 71
    846a:	41 3f       	cpi	r20, 0xF1	; 241
    846c:	3c 39       	cpi	r19, 0x9C	; 156
    846e:	36 33       	cpi	r19, 0x36	; 54
    8470:	31 2e       	mov	r3, r17
    8472:	2b 28       	or	r2, r11
    8474:	25 22       	and	r2, r21
    8476:	1f 1c       	adc	r1, r15
    8478:	19 16       	cp	r1, r25
    847a:	13 10       	cpse	r1, r3
    847c:	0c 09       	sbc	r16, r12
    847e:	06 03       	mulsu	r16, r22
    8480:	00 fd       	sbrc	r16, 0
    8482:	fa f7       	brpl	.-2      	; 0x8482 <waves+0x82>
    8484:	f4 f0       	brlt	.+60     	; 0x84c2 <waves+0xc2>
    8486:	ed ea       	ldi	r30, 0xAD	; 173
    8488:	e7 e4       	ldi	r30, 0x47	; 71
    848a:	e1 de       	rcall	.-574    	; 0x824e <steptable+0x46>
    848c:	db d8       	rcall	.-3658   	; 0x7644 <FormatEeprom+0x6>
    848e:	d5 d2       	rcall	.+1450   	; 0x8a3a <waves+0x63a>
    8490:	cf cd       	rjmp	.-1122   	; 0x8030 <ProcessMusic+0x35a>
    8492:	ca c7       	rjmp	.+3988   	; 0x9428 <wifiGetPBT+0xa>
    8494:	c4 c1       	rjmp	.+904    	; 0x881e <waves+0x41e>
    8496:	bf bc       	out	0x2f, r11	; 47
    8498:	b9 b7       	in	r27, 0x39	; 57
    849a:	b4 b2       	in	r11, 0x14	; 20
    849c:	af ad       	ldd	r26, Y+63	; 0x3f
    849e:	ab a8       	ldd	r10, Y+51	; 0x33
    84a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    84a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    84a4:	9e 9c       	mul	r9, r14
    84a6:	9a 98       	cbi	0x13, 2	; 19
    84a8:	96 95       	lsr	r25
    84aa:	93 91       	.word	0x9193	; ????
    84ac:	90 8f       	std	Z+24, r25	; 0x18
    84ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    84b0:	8b 8a       	std	Y+19, r8	; 0x13
    84b2:	88 87       	std	Y+8, r24	; 0x08
    84b4:	86 86       	std	Z+14, r8	; 0x0e
    84b6:	85 84       	ldd	r8, Z+13	; 0x0d
    84b8:	83 83       	std	Z+3, r24	; 0x03
    84ba:	82 82       	std	Z+2, r8	; 0x02
    84bc:	82 81       	ldd	r24, Z+2	; 0x02
    84be:	81 81       	ldd	r24, Z+1	; 0x01
    84c0:	81 81       	ldd	r24, Z+1	; 0x01
    84c2:	81 81       	ldd	r24, Z+1	; 0x01
    84c4:	82 82       	std	Z+2, r8	; 0x02
    84c6:	82 83       	std	Z+2, r24	; 0x02
    84c8:	83 84       	ldd	r8, Z+11	; 0x0b
    84ca:	85 86       	std	Z+13, r8	; 0x0d
    84cc:	86 87       	std	Z+14, r24	; 0x0e
    84ce:	88 8a       	std	Y+16, r8	; 0x10
    84d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    84d2:	8d 8f       	std	Y+29, r24	; 0x1d
    84d4:	90 91 93 95 	lds	r25, 0x9593
    84d8:	96 98       	cbi	0x12, 6	; 18
    84da:	9a 9c       	mul	r9, r10
    84dc:	9e a0       	ldd	r9, Y+38	; 0x26
    84de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    84e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    84e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    84e4:	af b2       	in	r10, 0x1f	; 31
    84e6:	b4 b7       	in	r27, 0x34	; 52
    84e8:	b9 bc       	out	0x29, r11	; 41
    84ea:	bf c1       	rjmp	.+894    	; 0x886a <waves+0x46a>
    84ec:	c4 c7       	rjmp	.+3976   	; 0x9476 <wifiGetPBT+0x58>
    84ee:	ca cd       	rjmp	.-1132   	; 0x8084 <ProcessMusic+0x3ae>
    84f0:	cf d2       	rcall	.+1438   	; 0x8a90 <waves+0x690>
    84f2:	d5 d8       	rcall	.-3670   	; 0x769e <isEepromFormatted+0x1c>
    84f4:	db de       	rcall	.-586    	; 0x82ac <steptable+0xa4>
    84f6:	e1 e4       	ldi	r30, 0x41	; 65
    84f8:	e7 ea       	ldi	r30, 0xA7	; 167
    84fa:	ed f0       	brhs	.+58     	; 0x8536 <waves+0x136>
    84fc:	f4 f7       	brge	.-4      	; 0x84fa <waves+0xfa>
    84fe:	fa fd       	.word	0xfdfa	; ????
    8500:	80 81       	ld	r24, Z
    8502:	82 83       	std	Z+2, r24	; 0x02
    8504:	84 85       	ldd	r24, Z+12	; 0x0c
    8506:	86 87       	std	Z+14, r24	; 0x0e
    8508:	88 89       	ldd	r24, Y+16	; 0x10
    850a:	8a 8b       	std	Y+18, r24	; 0x12
    850c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    850e:	8e 8f       	std	Y+30, r24	; 0x1e
    8510:	90 91 92 93 	lds	r25, 0x9392
    8514:	94 95       	.word	0x9594	; ????
    8516:	96 97       	sbiw	r26, 0x26	; 38
    8518:	98 99       	sbic	0x13, 0	; 19
    851a:	9a 9b       	sbis	0x13, 2	; 19
    851c:	9c 9d       	mul	r25, r12
    851e:	9e 9f       	mul	r25, r30
    8520:	a0 a1       	ldd	r26, Z+32	; 0x20
    8522:	a2 a3       	std	Z+34, r26	; 0x22
    8524:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8526:	a6 a7       	std	Z+46, r26	; 0x2e
    8528:	a8 a9       	ldd	r26, Y+48	; 0x30
    852a:	aa ab       	std	Y+50, r26	; 0x32
    852c:	ac ad       	ldd	r26, Y+60	; 0x3c
    852e:	ae af       	std	Y+62, r26	; 0x3e
    8530:	b0 b1       	in	r27, 0x00	; 0
    8532:	b2 b3       	in	r27, 0x12	; 18
    8534:	b4 b5       	in	r27, 0x24	; 36
    8536:	b6 b7       	in	r27, 0x36	; 54
    8538:	b8 b9       	out	0x08, r27	; 8
    853a:	ba bb       	out	0x1a, r27	; 26
    853c:	bc bd       	out	0x2c, r27	; 44
    853e:	be bf       	out	0x3e, r27	; 62
    8540:	c0 c1       	rjmp	.+896    	; 0x88c2 <waves+0x4c2>
    8542:	c2 c3       	rjmp	.+1924   	; 0x8cc8 <waves+0x8c8>
    8544:	c4 c5       	rjmp	.+2952   	; 0x90ce <InitializeVideoMode+0x12>
    8546:	c6 c7       	rjmp	.+3980   	; 0x94d4 <wifiRequest+0x1e>
    8548:	c8 c9       	rjmp	.-3184   	; 0x78da <GetPrngNumber+0x16>
    854a:	ca cb       	rjmp	.-2156   	; 0x7ce0 <ProcessMusic+0xa>
    854c:	cc cd       	rjmp	.-1128   	; 0x80e6 <ProcessMusic+0x410>
    854e:	ce cf       	rjmp	.-100    	; 0x84ec <waves+0xec>
    8550:	d0 d1       	rcall	.+928    	; 0x88f2 <waves+0x4f2>
    8552:	d2 d3       	rcall	.+1956   	; 0x8cf8 <waves+0x8f8>
    8554:	d4 d5       	rcall	.+2984   	; 0x90fe <DrawMap+0x26>
    8556:	d6 d7       	rcall	.+4012   	; 0x9504 <wifiRequestPT+0x2a>
    8558:	d8 d9       	rcall	.-3152   	; 0x790a <GetPrngNumber+0x46>
    855a:	da db       	rcall	.-2124   	; 0x7d10 <ProcessMusic+0x3a>
    855c:	dc dd       	rcall	.-1096   	; 0x8116 <SetMasterVolume+0x2>
    855e:	de df       	rcall	.-68     	; 0x851c <waves+0x11c>
    8560:	e0 e1       	ldi	r30, 0x10	; 16
    8562:	e2 e3       	ldi	r30, 0x32	; 50
    8564:	e4 e5       	ldi	r30, 0x54	; 84
    8566:	e6 e7       	ldi	r30, 0x76	; 118
    8568:	e8 e9       	ldi	r30, 0x98	; 152
    856a:	ea eb       	ldi	r30, 0xBA	; 186
    856c:	ec ed       	ldi	r30, 0xDC	; 220
    856e:	ee ef       	ldi	r30, 0xFE	; 254
    8570:	f0 f1       	brcs	.+124    	; 0x85ee <waves+0x1ee>
    8572:	f2 f3       	brmi	.-4      	; 0x8570 <waves+0x170>
    8574:	f4 f5       	brge	.+124    	; 0x85f2 <waves+0x1f2>
    8576:	f6 f7       	brtc	.-4      	; 0x8574 <waves+0x174>
    8578:	f8 f9       	.word	0xf9f8	; ????
    857a:	fa fb       	.word	0xfbfa	; ????
    857c:	fc fd       	.word	0xfdfc	; ????
    857e:	fe ff       	.word	0xfffe	; ????
    8580:	00 01       	movw	r0, r0
    8582:	02 03       	mulsu	r16, r18
    8584:	04 05       	cpc	r16, r4
    8586:	06 07       	cpc	r16, r22
    8588:	08 09       	sbc	r16, r8
    858a:	0a 0b       	sbc	r16, r26
    858c:	0c 0d       	add	r16, r12
    858e:	0e 0f       	add	r16, r30
    8590:	10 11       	cpse	r17, r0
    8592:	12 13       	cpse	r17, r18
    8594:	14 15       	cp	r17, r4
    8596:	16 17       	cp	r17, r22
    8598:	18 19       	sub	r17, r8
    859a:	1a 1b       	sub	r17, r26
    859c:	1c 1d       	adc	r17, r12
    859e:	1e 1f       	adc	r17, r30
    85a0:	20 21       	and	r18, r0
    85a2:	22 23       	and	r18, r18
    85a4:	24 25       	eor	r18, r4
    85a6:	26 27       	eor	r18, r22
    85a8:	28 29       	or	r18, r8
    85aa:	2a 2b       	or	r18, r26
    85ac:	2c 2d       	mov	r18, r12
    85ae:	2e 2f       	mov	r18, r30
    85b0:	30 31       	cpi	r19, 0x10	; 16
    85b2:	32 33       	cpi	r19, 0x32	; 50
    85b4:	34 35       	cpi	r19, 0x54	; 84
    85b6:	36 37       	cpi	r19, 0x76	; 118
    85b8:	38 39       	cpi	r19, 0x98	; 152
    85ba:	3a 3b       	cpi	r19, 0xBA	; 186
    85bc:	3c 3d       	cpi	r19, 0xDC	; 220
    85be:	3e 3f       	cpi	r19, 0xFE	; 254
    85c0:	40 41       	sbci	r20, 0x10	; 16
    85c2:	42 43       	sbci	r20, 0x32	; 50
    85c4:	44 45       	sbci	r20, 0x54	; 84
    85c6:	46 47       	sbci	r20, 0x76	; 118
    85c8:	48 49       	sbci	r20, 0x98	; 152
    85ca:	4a 4b       	sbci	r20, 0xBA	; 186
    85cc:	4c 4d       	sbci	r20, 0xDC	; 220
    85ce:	4e 4f       	sbci	r20, 0xFE	; 254
    85d0:	50 51       	subi	r21, 0x10	; 16
    85d2:	52 53       	subi	r21, 0x32	; 50
    85d4:	54 55       	subi	r21, 0x54	; 84
    85d6:	56 57       	subi	r21, 0x76	; 118
    85d8:	58 59       	subi	r21, 0x98	; 152
    85da:	5a 5b       	subi	r21, 0xBA	; 186
    85dc:	5c 5d       	subi	r21, 0xDC	; 220
    85de:	5e 5f       	subi	r21, 0xFE	; 254
    85e0:	60 61       	ori	r22, 0x10	; 16
    85e2:	62 63       	ori	r22, 0x32	; 50
    85e4:	64 65       	ori	r22, 0x54	; 84
    85e6:	66 67       	ori	r22, 0x76	; 118
    85e8:	68 69       	ori	r22, 0x98	; 152
    85ea:	6a 6b       	ori	r22, 0xBA	; 186
    85ec:	6c 6d       	ori	r22, 0xDC	; 220
    85ee:	6e 6f       	ori	r22, 0xFE	; 254
    85f0:	70 71       	andi	r23, 0x10	; 16
    85f2:	72 73       	andi	r23, 0x32	; 50
    85f4:	74 75       	andi	r23, 0x54	; 84
    85f6:	76 77       	andi	r23, 0x76	; 118
    85f8:	78 79       	andi	r23, 0x98	; 152
    85fa:	7a 7b       	andi	r23, 0xBA	; 186
    85fc:	7c 7d       	andi	r23, 0xDC	; 220
    85fe:	7e 7f       	andi	r23, 0xFE	; 254
    8600:	00 02       	muls	r16, r16
    8602:	04 06       	cpc	r0, r20
    8604:	08 0a       	sbc	r0, r24
    8606:	0c 0e       	add	r0, r28
    8608:	10 12       	cpse	r1, r16
    860a:	14 16       	cp	r1, r20
    860c:	18 1a       	sub	r1, r24
    860e:	1c 1e       	adc	r1, r28
    8610:	20 22       	and	r2, r16
    8612:	24 26       	eor	r2, r20
    8614:	28 2a       	or	r2, r24
    8616:	2c 2e       	mov	r2, r28
    8618:	30 32       	cpi	r19, 0x20	; 32
    861a:	34 36       	cpi	r19, 0x64	; 100
    861c:	38 3a       	cpi	r19, 0xA8	; 168
    861e:	3c 3e       	cpi	r19, 0xEC	; 236
    8620:	40 42       	sbci	r20, 0x20	; 32
    8622:	44 46       	sbci	r20, 0x64	; 100
    8624:	48 4a       	sbci	r20, 0xA8	; 168
    8626:	4c 4e       	sbci	r20, 0xEC	; 236
    8628:	50 52       	subi	r21, 0x20	; 32
    862a:	54 56       	subi	r21, 0x64	; 100
    862c:	58 5a       	subi	r21, 0xA8	; 168
    862e:	5c 5e       	subi	r21, 0xEC	; 236
    8630:	60 62       	ori	r22, 0x20	; 32
    8632:	64 66       	ori	r22, 0x64	; 100
    8634:	68 6a       	ori	r22, 0xA8	; 168
    8636:	6c 6e       	ori	r22, 0xEC	; 236
    8638:	70 72       	andi	r23, 0x20	; 32
    863a:	74 76       	andi	r23, 0x64	; 100
    863c:	78 7a       	andi	r23, 0xA8	; 168
    863e:	7c 7e       	andi	r23, 0xEC	; 236
    8640:	7f 7d       	andi	r23, 0xDF	; 223
    8642:	7b 79       	andi	r23, 0x9B	; 155
    8644:	77 75       	andi	r23, 0x57	; 87
    8646:	73 71       	andi	r23, 0x13	; 19
    8648:	6f 6d       	ori	r22, 0xDF	; 223
    864a:	6b 69       	ori	r22, 0x9B	; 155
    864c:	67 65       	ori	r22, 0x57	; 87
    864e:	63 61       	ori	r22, 0x13	; 19
    8650:	5f 5d       	subi	r21, 0xDF	; 223
    8652:	5b 59       	subi	r21, 0x9B	; 155
    8654:	57 55       	subi	r21, 0x57	; 87
    8656:	53 51       	subi	r21, 0x13	; 19
    8658:	4f 4d       	sbci	r20, 0xDF	; 223
    865a:	4b 49       	sbci	r20, 0x9B	; 155
    865c:	47 45       	sbci	r20, 0x57	; 87
    865e:	43 41       	sbci	r20, 0x13	; 19
    8660:	3f 3d       	cpi	r19, 0xDF	; 223
    8662:	3b 39       	cpi	r19, 0x9B	; 155
    8664:	37 35       	cpi	r19, 0x57	; 87
    8666:	33 31       	cpi	r19, 0x13	; 19
    8668:	2f 2d       	mov	r18, r15
    866a:	2b 29       	or	r18, r11
    866c:	27 25       	eor	r18, r7
    866e:	23 21       	and	r18, r3
    8670:	1f 1d       	adc	r17, r15
    8672:	1b 19       	sub	r17, r11
    8674:	17 15       	cp	r17, r7
    8676:	13 11       	cpse	r17, r3
    8678:	0f 0d       	add	r16, r15
    867a:	0b 09       	sbc	r16, r11
    867c:	07 05       	cpc	r16, r7
    867e:	03 01       	movw	r0, r6
    8680:	ff fd       	.word	0xfdff	; ????
    8682:	fb f9       	.word	0xf9fb	; ????
    8684:	f7 f5       	brid	.+124    	; 0x8702 <waves+0x302>
    8686:	f3 f1       	brvs	.+124    	; 0x8704 <waves+0x304>
    8688:	ef ed       	ldi	r30, 0xDF	; 223
    868a:	eb e9       	ldi	r30, 0x9B	; 155
    868c:	e7 e5       	ldi	r30, 0x57	; 87
    868e:	e3 e1       	ldi	r30, 0x13	; 19
    8690:	df dd       	rcall	.-1090   	; 0x8250 <steptable+0x48>
    8692:	db d9       	rcall	.-3146   	; 0x7a4a <PatchCommand14+0x26>
    8694:	d7 d5       	rcall	.+2990   	; 0x9244 <doFade+0x2>
    8696:	d3 d1       	rcall	.+934    	; 0x8a3e <waves+0x63e>
    8698:	cf cd       	rjmp	.-1122   	; 0x8238 <steptable+0x30>
    869a:	cb c9       	rjmp	.-3178   	; 0x7a32 <PatchCommand14+0xe>
    869c:	c7 c5       	rjmp	.+2958   	; 0x922c <WaitVsync+0x18>
    869e:	c3 c1       	rjmp	.+902    	; 0x8a26 <waves+0x626>
    86a0:	bf bd       	out	0x2f, r27	; 47
    86a2:	bb b9       	out	0x0b, r27	; 11
    86a4:	b7 b5       	in	r27, 0x27	; 39
    86a6:	b3 b1       	in	r27, 0x03	; 3
    86a8:	af ad       	ldd	r26, Y+63	; 0x3f
    86aa:	ab a9       	ldd	r26, Y+51	; 0x33
    86ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    86ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    86b0:	9f 9d       	mul	r25, r15
    86b2:	9b 99       	sbic	0x13, 3	; 19
    86b4:	97 95       	ror	r25
    86b6:	93 91       	.word	0x9193	; ????
    86b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    86ba:	8b 89       	ldd	r24, Y+19	; 0x13
    86bc:	87 85       	ldd	r24, Z+15	; 0x0f
    86be:	83 81       	ldd	r24, Z+3	; 0x03
    86c0:	80 82       	st	Z, r8
    86c2:	84 86       	std	Z+12, r8	; 0x0c
    86c4:	88 8a       	std	Y+16, r8	; 0x10
    86c6:	8c 8e       	std	Y+28, r8	; 0x1c
    86c8:	90 92 94 96 	sts	0x9694, r9
    86cc:	98 9a       	sbi	0x13, 0	; 19
    86ce:	9c 9e       	mul	r9, r28
    86d0:	a0 a2       	std	Z+32, r10	; 0x20
    86d2:	a4 a6       	std	Z+44, r10	; 0x2c
    86d4:	a8 aa       	std	Y+48, r10	; 0x30
    86d6:	ac ae       	std	Y+60, r10	; 0x3c
    86d8:	b0 b2       	in	r11, 0x10	; 16
    86da:	b4 b6       	in	r11, 0x34	; 52
    86dc:	b8 ba       	out	0x18, r11	; 24
    86de:	bc be       	out	0x3c, r11	; 60
    86e0:	c0 c2       	rjmp	.+1408   	; 0x8c62 <waves+0x862>
    86e2:	c4 c6       	rjmp	.+3464   	; 0x946c <wifiGetPBT+0x4e>
    86e4:	c8 ca       	rjmp	.-2672   	; 0x7c76 <TriggerNote+0x20>
    86e6:	cc ce       	rjmp	.-616    	; 0x8480 <waves+0x80>
    86e8:	d0 d2       	rcall	.+1440   	; 0x8c8a <waves+0x88a>
    86ea:	d4 d6       	rcall	.+3496   	; 0x9494 <wifiRequestP+0x2>
    86ec:	d8 da       	rcall	.-2640   	; 0x7c9e <TriggerNote+0x48>
    86ee:	dc de       	rcall	.-584    	; 0x84a8 <waves+0xa8>
    86f0:	e0 e2       	ldi	r30, 0x20	; 32
    86f2:	e4 e6       	ldi	r30, 0x64	; 100
    86f4:	e8 ea       	ldi	r30, 0xA8	; 168
    86f6:	ec ee       	ldi	r30, 0xEC	; 236
    86f8:	f0 f2       	brcs	.-68     	; 0x86b6 <waves+0x2b6>
    86fa:	f4 f6       	brge	.-68     	; 0x86b8 <waves+0x2b8>
    86fc:	f8 fa       	.word	0xfaf8	; ????
    86fe:	fc fe       	.word	0xfefc	; ????
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	80 80       	ld	r8, Z
    8742:	80 80       	ld	r8, Z
    8744:	80 80       	ld	r8, Z
    8746:	80 80       	ld	r8, Z
    8748:	80 80       	ld	r8, Z
    874a:	80 80       	ld	r8, Z
    874c:	80 80       	ld	r8, Z
    874e:	80 80       	ld	r8, Z
    8750:	80 80       	ld	r8, Z
    8752:	80 80       	ld	r8, Z
    8754:	80 80       	ld	r8, Z
    8756:	80 80       	ld	r8, Z
    8758:	80 80       	ld	r8, Z
    875a:	80 80       	ld	r8, Z
    875c:	80 80       	ld	r8, Z
    875e:	80 80       	ld	r8, Z
    8760:	80 80       	ld	r8, Z
    8762:	80 80       	ld	r8, Z
    8764:	80 80       	ld	r8, Z
    8766:	80 80       	ld	r8, Z
    8768:	80 80       	ld	r8, Z
    876a:	80 80       	ld	r8, Z
    876c:	80 80       	ld	r8, Z
    876e:	80 80       	ld	r8, Z
    8770:	80 80       	ld	r8, Z
    8772:	80 80       	ld	r8, Z
    8774:	80 80       	ld	r8, Z
    8776:	80 80       	ld	r8, Z
    8778:	80 80       	ld	r8, Z
    877a:	80 80       	ld	r8, Z
    877c:	80 80       	ld	r8, Z
    877e:	80 80       	ld	r8, Z
    8780:	80 80       	ld	r8, Z
    8782:	80 80       	ld	r8, Z
    8784:	80 80       	ld	r8, Z
    8786:	80 80       	ld	r8, Z
    8788:	80 80       	ld	r8, Z
    878a:	80 80       	ld	r8, Z
    878c:	80 80       	ld	r8, Z
    878e:	80 80       	ld	r8, Z
    8790:	80 80       	ld	r8, Z
    8792:	80 80       	ld	r8, Z
    8794:	80 80       	ld	r8, Z
    8796:	80 80       	ld	r8, Z
    8798:	80 80       	ld	r8, Z
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7f 7f       	andi	r23, 0xFF	; 255
    8848:	7f 7f       	andi	r23, 0xFF	; 255
    884a:	7f 7f       	andi	r23, 0xFF	; 255
    884c:	7f 7f       	andi	r23, 0xFF	; 255
    884e:	7f 7f       	andi	r23, 0xFF	; 255
    8850:	7f 7f       	andi	r23, 0xFF	; 255
    8852:	7f 7f       	andi	r23, 0xFF	; 255
    8854:	7f 7f       	andi	r23, 0xFF	; 255
    8856:	7f 7f       	andi	r23, 0xFF	; 255
    8858:	7f 7f       	andi	r23, 0xFF	; 255
    885a:	7f 7f       	andi	r23, 0xFF	; 255
    885c:	7f 7f       	andi	r23, 0xFF	; 255
    885e:	7f 7f       	andi	r23, 0xFF	; 255
    8860:	7f 7f       	andi	r23, 0xFF	; 255
    8862:	7f 7f       	andi	r23, 0xFF	; 255
    8864:	7f 7f       	andi	r23, 0xFF	; 255
    8866:	7f 7f       	andi	r23, 0xFF	; 255
    8868:	7f 7f       	andi	r23, 0xFF	; 255
    886a:	7f 7f       	andi	r23, 0xFF	; 255
    886c:	7f 7f       	andi	r23, 0xFF	; 255
    886e:	7f 7f       	andi	r23, 0xFF	; 255
    8870:	7f 7f       	andi	r23, 0xFF	; 255
    8872:	7f 7f       	andi	r23, 0xFF	; 255
    8874:	7f 7f       	andi	r23, 0xFF	; 255
    8876:	7f 7f       	andi	r23, 0xFF	; 255
    8878:	7f 7f       	andi	r23, 0xFF	; 255
    887a:	7f 7f       	andi	r23, 0xFF	; 255
    887c:	7f 7f       	andi	r23, 0xFF	; 255
    887e:	7f 7f       	andi	r23, 0xFF	; 255
    8880:	80 80       	ld	r8, Z
    8882:	80 80       	ld	r8, Z
    8884:	80 80       	ld	r8, Z
    8886:	80 80       	ld	r8, Z
    8888:	80 80       	ld	r8, Z
    888a:	80 80       	ld	r8, Z
    888c:	80 80       	ld	r8, Z
    888e:	80 80       	ld	r8, Z
    8890:	80 80       	ld	r8, Z
    8892:	80 80       	ld	r8, Z
    8894:	80 80       	ld	r8, Z
    8896:	80 80       	ld	r8, Z
    8898:	80 80       	ld	r8, Z
    889a:	80 80       	ld	r8, Z
    889c:	80 80       	ld	r8, Z
    889e:	80 80       	ld	r8, Z
    88a0:	80 80       	ld	r8, Z
    88a2:	80 80       	ld	r8, Z
    88a4:	80 80       	ld	r8, Z
    88a6:	80 80       	ld	r8, Z
    88a8:	80 80       	ld	r8, Z
    88aa:	80 80       	ld	r8, Z
    88ac:	80 80       	ld	r8, Z
    88ae:	80 80       	ld	r8, Z
    88b0:	80 80       	ld	r8, Z
    88b2:	80 80       	ld	r8, Z
    88b4:	80 80       	ld	r8, Z
    88b6:	80 80       	ld	r8, Z
    88b8:	80 80       	ld	r8, Z
    88ba:	80 80       	ld	r8, Z
    88bc:	80 80       	ld	r8, Z
    88be:	80 80       	ld	r8, Z
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z
    8900:	7f 7f       	andi	r23, 0xFF	; 255
    8902:	7f 7f       	andi	r23, 0xFF	; 255
    8904:	7f 7f       	andi	r23, 0xFF	; 255
    8906:	7f 7f       	andi	r23, 0xFF	; 255
    8908:	7f 7f       	andi	r23, 0xFF	; 255
    890a:	7f 7f       	andi	r23, 0xFF	; 255
    890c:	7f 7f       	andi	r23, 0xFF	; 255
    890e:	7f 7f       	andi	r23, 0xFF	; 255
    8910:	7f 7f       	andi	r23, 0xFF	; 255
    8912:	7f 7f       	andi	r23, 0xFF	; 255
    8914:	7f 7f       	andi	r23, 0xFF	; 255
    8916:	7f 7f       	andi	r23, 0xFF	; 255
    8918:	7f 7f       	andi	r23, 0xFF	; 255
    891a:	7f 7f       	andi	r23, 0xFF	; 255
    891c:	7f 7f       	andi	r23, 0xFF	; 255
    891e:	7f 7f       	andi	r23, 0xFF	; 255
    8920:	7f 7f       	andi	r23, 0xFF	; 255
    8922:	7f 7f       	andi	r23, 0xFF	; 255
    8924:	7f 7f       	andi	r23, 0xFF	; 255
    8926:	7f 7f       	andi	r23, 0xFF	; 255
    8928:	7f 7f       	andi	r23, 0xFF	; 255
    892a:	7f 7f       	andi	r23, 0xFF	; 255
    892c:	7f 7f       	andi	r23, 0xFF	; 255
    892e:	7f 7f       	andi	r23, 0xFF	; 255
    8930:	7f 7f       	andi	r23, 0xFF	; 255
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7f       	andi	r23, 0xFF	; 255
    894e:	7f 7f       	andi	r23, 0xFF	; 255
    8950:	7f 7f       	andi	r23, 0xFF	; 255
    8952:	7f 7f       	andi	r23, 0xFF	; 255
    8954:	7f 7f       	andi	r23, 0xFF	; 255
    8956:	7f 7f       	andi	r23, 0xFF	; 255
    8958:	7f 7f       	andi	r23, 0xFF	; 255
    895a:	7f 7f       	andi	r23, 0xFF	; 255
    895c:	7f 7f       	andi	r23, 0xFF	; 255
    895e:	7f 7f       	andi	r23, 0xFF	; 255
    8960:	7f 7f       	andi	r23, 0xFF	; 255
    8962:	7f 7f       	andi	r23, 0xFF	; 255
    8964:	7f 7f       	andi	r23, 0xFF	; 255
    8966:	7f 7f       	andi	r23, 0xFF	; 255
    8968:	7f 7f       	andi	r23, 0xFF	; 255
    896a:	7f 7f       	andi	r23, 0xFF	; 255
    896c:	7f 7f       	andi	r23, 0xFF	; 255
    896e:	7f 7f       	andi	r23, 0xFF	; 255
    8970:	7f 7f       	andi	r23, 0xFF	; 255
    8972:	7f 7f       	andi	r23, 0xFF	; 255
    8974:	7f 7f       	andi	r23, 0xFF	; 255
    8976:	7f 7f       	andi	r23, 0xFF	; 255
    8978:	7f 7f       	andi	r23, 0xFF	; 255
    897a:	7f 7f       	andi	r23, 0xFF	; 255
    897c:	7f 7f       	andi	r23, 0xFF	; 255
    897e:	7f 7f       	andi	r23, 0xFF	; 255
    8980:	7f 7f       	andi	r23, 0xFF	; 255
    8982:	7f 7f       	andi	r23, 0xFF	; 255
    8984:	7f 7f       	andi	r23, 0xFF	; 255
    8986:	7f 7f       	andi	r23, 0xFF	; 255
    8988:	7f 7f       	andi	r23, 0xFF	; 255
    898a:	7f 7f       	andi	r23, 0xFF	; 255
    898c:	7f 7f       	andi	r23, 0xFF	; 255
    898e:	7f 7f       	andi	r23, 0xFF	; 255
    8990:	7f 7f       	andi	r23, 0xFF	; 255
    8992:	7f 7f       	andi	r23, 0xFF	; 255
    8994:	7f 7f       	andi	r23, 0xFF	; 255
    8996:	7f 7f       	andi	r23, 0xFF	; 255
    8998:	7f 7f       	andi	r23, 0xFF	; 255
    899a:	7f 7f       	andi	r23, 0xFF	; 255
    899c:	7f 7f       	andi	r23, 0xFF	; 255
    899e:	7f 7f       	andi	r23, 0xFF	; 255
    89a0:	7f 7f       	andi	r23, 0xFF	; 255
    89a2:	7f 7f       	andi	r23, 0xFF	; 255
    89a4:	7f 7f       	andi	r23, 0xFF	; 255
    89a6:	7f 7f       	andi	r23, 0xFF	; 255
    89a8:	7f 7f       	andi	r23, 0xFF	; 255
    89aa:	7f 7f       	andi	r23, 0xFF	; 255
    89ac:	7f 7f       	andi	r23, 0xFF	; 255
    89ae:	7f 7f       	andi	r23, 0xFF	; 255
    89b0:	7f 7f       	andi	r23, 0xFF	; 255
    89b2:	7f 7f       	andi	r23, 0xFF	; 255
    89b4:	7f 7f       	andi	r23, 0xFF	; 255
    89b6:	7f 7f       	andi	r23, 0xFF	; 255
    89b8:	7f 7f       	andi	r23, 0xFF	; 255
    89ba:	7f 7f       	andi	r23, 0xFF	; 255
    89bc:	7f 7f       	andi	r23, 0xFF	; 255
    89be:	7f 7f       	andi	r23, 0xFF	; 255
    89c0:	80 80       	ld	r8, Z
    89c2:	80 80       	ld	r8, Z
    89c4:	80 80       	ld	r8, Z
    89c6:	80 80       	ld	r8, Z
    89c8:	80 80       	ld	r8, Z
    89ca:	80 80       	ld	r8, Z
    89cc:	80 80       	ld	r8, Z
    89ce:	80 80       	ld	r8, Z
    89d0:	80 80       	ld	r8, Z
    89d2:	80 80       	ld	r8, Z
    89d4:	80 80       	ld	r8, Z
    89d6:	80 80       	ld	r8, Z
    89d8:	80 80       	ld	r8, Z
    89da:	80 80       	ld	r8, Z
    89dc:	80 80       	ld	r8, Z
    89de:	80 80       	ld	r8, Z
    89e0:	80 80       	ld	r8, Z
    89e2:	80 80       	ld	r8, Z
    89e4:	80 80       	ld	r8, Z
    89e6:	80 80       	ld	r8, Z
    89e8:	80 80       	ld	r8, Z
    89ea:	80 80       	ld	r8, Z
    89ec:	80 80       	ld	r8, Z
    89ee:	80 80       	ld	r8, Z
    89f0:	80 80       	ld	r8, Z
    89f2:	80 80       	ld	r8, Z
    89f4:	80 80       	ld	r8, Z
    89f6:	80 80       	ld	r8, Z
    89f8:	80 80       	ld	r8, Z
    89fa:	80 80       	ld	r8, Z
    89fc:	80 80       	ld	r8, Z
    89fe:	80 80       	ld	r8, Z
    8a00:	03 09       	sbc	r16, r3
    8a02:	13 1e       	adc	r1, r19
    8a04:	28 31       	cpi	r18, 0x18	; 24
    8a06:	3a 40       	sbci	r19, 0x0A	; 10
    8a08:	46 4c       	sbci	r20, 0xC6	; 198
    8a0a:	50 54       	subi	r21, 0x40	; 64
    8a0c:	58 5b       	subi	r21, 0xB8	; 184
    8a0e:	5e 61       	ori	r21, 0x1E	; 30
    8a10:	63 65       	ori	r22, 0x53	; 83
    8a12:	67 69       	ori	r22, 0x97	; 151
    8a14:	6b 6c       	ori	r22, 0xCB	; 203
    8a16:	6e 6f       	ori	r22, 0xFE	; 254
    8a18:	70 71       	andi	r23, 0x10	; 16
    8a1a:	72 73       	andi	r23, 0x32	; 50
    8a1c:	74 75       	andi	r23, 0x54	; 84
    8a1e:	76 77       	andi	r23, 0x76	; 118
    8a20:	77 78       	andi	r23, 0x87	; 135
    8a22:	79 79       	andi	r23, 0x99	; 153
    8a24:	7a 7a       	andi	r23, 0xAA	; 170
    8a26:	7b 7b       	andi	r23, 0xBB	; 187
    8a28:	7c 7c       	andi	r23, 0xCC	; 204
    8a2a:	7c 7d       	andi	r23, 0xDC	; 220
    8a2c:	7d 7d       	andi	r23, 0xDD	; 221
    8a2e:	7e 7e       	andi	r23, 0xEE	; 238
    8a30:	7e 7e       	andi	r23, 0xEE	; 238
    8a32:	7f 7f       	andi	r23, 0xFF	; 255
    8a34:	7f 7f       	andi	r23, 0xFF	; 255
    8a36:	7f 7f       	andi	r23, 0xFF	; 255
    8a38:	7f 7f       	andi	r23, 0xFF	; 255
    8a3a:	7f 7f       	andi	r23, 0xFF	; 255
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7f 7f       	andi	r23, 0xFF	; 255
    8a48:	7f 7f       	andi	r23, 0xFF	; 255
    8a4a:	7f 7f       	andi	r23, 0xFF	; 255
    8a4c:	7f 7e       	andi	r23, 0xEF	; 239
    8a4e:	7e 7e       	andi	r23, 0xEE	; 238
    8a50:	7e 7d       	andi	r23, 0xDE	; 222
    8a52:	7d 7d       	andi	r23, 0xDD	; 221
    8a54:	7c 7c       	andi	r23, 0xCC	; 204
    8a56:	7c 7b       	andi	r23, 0xBC	; 188
    8a58:	7b 7a       	andi	r23, 0xAB	; 171
    8a5a:	7a 79       	andi	r23, 0x9A	; 154
    8a5c:	79 78       	andi	r23, 0x89	; 137
    8a5e:	77 77       	andi	r23, 0x77	; 119
    8a60:	76 75       	andi	r23, 0x56	; 86
    8a62:	74 73       	andi	r23, 0x34	; 52
    8a64:	72 71       	andi	r23, 0x12	; 18
    8a66:	70 6f       	ori	r23, 0xF0	; 240
    8a68:	6e 6c       	ori	r22, 0xCE	; 206
    8a6a:	6b 69       	ori	r22, 0x9B	; 155
    8a6c:	67 65       	ori	r22, 0x57	; 87
    8a6e:	63 61       	ori	r22, 0x13	; 19
    8a70:	5e 5b       	subi	r21, 0xBE	; 190
    8a72:	58 54       	subi	r21, 0x48	; 72
    8a74:	50 4c       	sbci	r21, 0xC0	; 192
    8a76:	46 40       	sbci	r20, 0x06	; 6
    8a78:	3a 31       	cpi	r19, 0x1A	; 26
    8a7a:	28 1e       	adc	r2, r24
    8a7c:	13 09       	sbc	r17, r3
    8a7e:	03 00       	.word	0x0003	; ????
    8a80:	c6 cc       	rjmp	.-1652   	; 0x840e <waves+0xe>
    8a82:	d5 db       	rcall	.-2134   	; 0x822e <steptable+0x26>
    8a84:	df e3       	ldi	r29, 0x3F	; 63
    8a86:	e5 e7       	ldi	r30, 0x75	; 117
    8a88:	e9 ea       	ldi	r30, 0xA9	; 169
    8a8a:	eb ec       	ldi	r30, 0xCB	; 203
    8a8c:	ed ee       	ldi	r30, 0xED	; 237
    8a8e:	ef ef       	ldi	r30, 0xFF	; 255
    8a90:	f0 f0       	brcs	.+60     	; 0x8ace <waves+0x6ce>
    8a92:	f0 f1       	brcs	.+124    	; 0x8b10 <waves+0x710>
    8a94:	f1 f1       	breq	.+124    	; 0x8b12 <waves+0x712>
    8a96:	f1 f2       	breq	.-68     	; 0x8a54 <waves+0x654>
    8a98:	f2 f2       	brmi	.-68     	; 0x8a56 <waves+0x656>
    8a9a:	f2 f2       	brmi	.-68     	; 0x8a58 <waves+0x658>
    8a9c:	f2 f2       	brmi	.-68     	; 0x8a5a <waves+0x65a>
    8a9e:	f2 f3       	brmi	.-4      	; 0x8a9c <waves+0x69c>
    8aa0:	f3 f3       	brvs	.-4      	; 0x8a9e <waves+0x69e>
    8aa2:	f3 f3       	brvs	.-4      	; 0x8aa0 <waves+0x6a0>
    8aa4:	f3 f3       	brvs	.-4      	; 0x8aa2 <waves+0x6a2>
    8aa6:	f3 f3       	brvs	.-4      	; 0x8aa4 <waves+0x6a4>
    8aa8:	f3 f3       	brvs	.-4      	; 0x8aa6 <waves+0x6a6>
    8aaa:	f3 f3       	brvs	.-4      	; 0x8aa8 <waves+0x6a8>
    8aac:	f3 f3       	brvs	.-4      	; 0x8aaa <waves+0x6aa>
    8aae:	f3 f3       	brvs	.-4      	; 0x8aac <waves+0x6ac>
    8ab0:	f3 f3       	brvs	.-4      	; 0x8aae <waves+0x6ae>
    8ab2:	f3 f3       	brvs	.-4      	; 0x8ab0 <waves+0x6b0>
    8ab4:	f3 f3       	brvs	.-4      	; 0x8ab2 <waves+0x6b2>
    8ab6:	f3 f3       	brvs	.-4      	; 0x8ab4 <waves+0x6b4>
    8ab8:	f3 f3       	brvs	.-4      	; 0x8ab6 <waves+0x6b6>
    8aba:	f3 f3       	brvs	.-4      	; 0x8ab8 <waves+0x6b8>
    8abc:	f3 f3       	brvs	.-4      	; 0x8aba <waves+0x6ba>
    8abe:	f3 f3       	brvs	.-4      	; 0x8abc <waves+0x6bc>
    8ac0:	f3 f3       	brvs	.-4      	; 0x8abe <waves+0x6be>
    8ac2:	f3 f3       	brvs	.-4      	; 0x8ac0 <waves+0x6c0>
    8ac4:	f3 f3       	brvs	.-4      	; 0x8ac2 <waves+0x6c2>
    8ac6:	f3 f3       	brvs	.-4      	; 0x8ac4 <waves+0x6c4>
    8ac8:	f3 f3       	brvs	.-4      	; 0x8ac6 <waves+0x6c6>
    8aca:	f3 f3       	brvs	.-4      	; 0x8ac8 <waves+0x6c8>
    8acc:	f3 f3       	brvs	.-4      	; 0x8aca <waves+0x6ca>
    8ace:	f3 f3       	brvs	.-4      	; 0x8acc <waves+0x6cc>
    8ad0:	f3 f3       	brvs	.-4      	; 0x8ace <waves+0x6ce>
    8ad2:	f3 f3       	brvs	.-4      	; 0x8ad0 <waves+0x6d0>
    8ad4:	f3 f3       	brvs	.-4      	; 0x8ad2 <waves+0x6d2>
    8ad6:	f3 f3       	brvs	.-4      	; 0x8ad4 <waves+0x6d4>
    8ad8:	f3 f3       	brvs	.-4      	; 0x8ad6 <waves+0x6d6>
    8ada:	f3 f3       	brvs	.-4      	; 0x8ad8 <waves+0x6d8>
    8adc:	f3 f3       	brvs	.-4      	; 0x8ada <waves+0x6da>
    8ade:	f3 f3       	brvs	.-4      	; 0x8adc <waves+0x6dc>
    8ae0:	f2 f2       	brmi	.-68     	; 0x8a9e <waves+0x69e>
    8ae2:	f2 f2       	brmi	.-68     	; 0x8aa0 <waves+0x6a0>
    8ae4:	f2 f2       	brmi	.-68     	; 0x8aa2 <waves+0x6a2>
    8ae6:	f2 f2       	brmi	.-68     	; 0x8aa4 <waves+0x6a4>
    8ae8:	f1 f1       	breq	.+124    	; 0x8b66 <waves+0x766>
    8aea:	f1 f1       	breq	.+124    	; 0x8b68 <waves+0x768>
    8aec:	f0 f0       	brcs	.+60     	; 0x8b2a <waves+0x72a>
    8aee:	f0 ef       	ldi	r31, 0xF0	; 240
    8af0:	ef ee       	ldi	r30, 0xEF	; 239
    8af2:	ed ec       	ldi	r30, 0xCD	; 205
    8af4:	eb ea       	ldi	r30, 0xAB	; 171
    8af6:	e9 e7       	ldi	r30, 0x79	; 121
    8af8:	e5 e3       	ldi	r30, 0x35	; 53
    8afa:	df db       	rcall	.-2114   	; 0x82ba <steptable+0xb2>
    8afc:	d5 cc       	rjmp	.-1622   	; 0x84a8 <waves+0xa8>
    8afe:	c6 00       	.word	0x00c6	; ????
    8b00:	00 28       	or	r0, r0
    8b02:	3d 42       	sbci	r19, 0x2D	; 45
    8b04:	30 2d       	mov	r19, r0
    8b06:	2c 2b       	or	r18, r28
    8b08:	2c 2d       	mov	r18, r12
    8b0a:	2e 2f       	mov	r18, r30
    8b0c:	30 32       	cpi	r19, 0x20	; 32
    8b0e:	33 35       	cpi	r19, 0x53	; 83
    8b10:	37 39       	cpi	r19, 0x97	; 151
    8b12:	3b 3d       	cpi	r19, 0xDB	; 219
    8b14:	3f 41       	sbci	r19, 0x1F	; 31
    8b16:	43 45       	sbci	r20, 0x53	; 83
    8b18:	48 4a       	sbci	r20, 0xA8	; 168
    8b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8b1c:	50 53       	subi	r21, 0x30	; 48
    8b1e:	55 57       	subi	r21, 0x75	; 117
    8b20:	59 5b       	subi	r21, 0xB9	; 185
    8b22:	5d 5f       	subi	r21, 0xFD	; 253
    8b24:	61 63       	ori	r22, 0x31	; 49
    8b26:	65 67       	ori	r22, 0x75	; 117
    8b28:	69 6b       	ori	r22, 0xB9	; 185
    8b2a:	6c 6e       	ori	r22, 0xEC	; 236
    8b2c:	70 71       	andi	r23, 0x10	; 16
    8b2e:	73 74       	andi	r23, 0x43	; 67
    8b30:	75 77       	andi	r23, 0x75	; 117
    8b32:	78 79       	andi	r23, 0x98	; 152
    8b34:	7a 7b       	andi	r23, 0xBA	; 186
    8b36:	7c 7d       	andi	r23, 0xDC	; 220
    8b38:	7d 7e       	andi	r23, 0xED	; 237
    8b3a:	7e 7f       	andi	r23, 0xFE	; 254
    8b3c:	7f 7f       	andi	r23, 0xFF	; 255
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7f 7f       	andi	r23, 0xFF	; 255
    8b46:	7e 7e       	andi	r23, 0xEE	; 238
    8b48:	7d 7d       	andi	r23, 0xDD	; 221
    8b4a:	7c 7b       	andi	r23, 0xBC	; 188
    8b4c:	7a 79       	andi	r23, 0x9A	; 154
    8b4e:	78 77       	andi	r23, 0x78	; 120
    8b50:	75 74       	andi	r23, 0x45	; 69
    8b52:	73 71       	andi	r23, 0x13	; 19
    8b54:	70 6e       	ori	r23, 0xE0	; 224
    8b56:	6c 6b       	ori	r22, 0xBC	; 188
    8b58:	69 67       	ori	r22, 0x79	; 121
    8b5a:	65 63       	ori	r22, 0x35	; 53
    8b5c:	61 5f       	subi	r22, 0xF1	; 241
    8b5e:	5d 5b       	subi	r21, 0xBD	; 189
    8b60:	59 57       	subi	r21, 0x79	; 121
    8b62:	55 53       	subi	r21, 0x35	; 53
    8b64:	50 4e       	sbci	r21, 0xE0	; 224
    8b66:	4c 4a       	sbci	r20, 0xAC	; 172
    8b68:	48 45       	sbci	r20, 0x58	; 88
    8b6a:	43 41       	sbci	r20, 0x13	; 19
    8b6c:	3f 3d       	cpi	r19, 0xDF	; 223
    8b6e:	3b 39       	cpi	r19, 0x9B	; 155
    8b70:	37 35       	cpi	r19, 0x57	; 87
    8b72:	33 32       	cpi	r19, 0x23	; 35
    8b74:	30 2f       	mov	r19, r16
    8b76:	2e 2d       	mov	r18, r14
    8b78:	2c 2b       	or	r18, r28
    8b7a:	2c 2d       	mov	r18, r12
    8b7c:	30 42       	sbci	r19, 0x20	; 32
    8b7e:	3d 28       	or	r3, r13
    8b80:	00 e9       	ldi	r16, 0x90	; 144
    8b82:	e5 fe       	sbrs	r14, 5
    8b84:	d4 d7       	rcall	.+4008   	; 0x9b2e <LBLineIntersect+0x160>
    8b86:	d7 d7       	rcall	.+4014   	; 0x9b36 <LBLineIntersect+0x168>
    8b88:	d6 d4       	rcall	.+2476   	; 0x9536 <initWifi+0x1e>
    8b8a:	d2 d0       	rcall	.+420    	; 0x8d30 <waves+0x930>
    8b8c:	ce cc       	rjmp	.-1636   	; 0x852a <waves+0x12a>
    8b8e:	ca c8       	rjmp	.-3692   	; 0x7d24 <ProcessMusic+0x4e>
    8b90:	c6 c3       	rjmp	.+1932   	; 0x931e <wifiSend+0xe>
    8b92:	c1 bf       	out	0x31, r28	; 49
    8b94:	bd ba       	out	0x1d, r11	; 29
    8b96:	b8 b6       	in	r11, 0x38	; 56
    8b98:	b4 b1       	in	r27, 0x04	; 4
    8b9a:	af ad       	ldd	r26, Y+63	; 0x3f
    8b9c:	ab a9       	ldd	r26, Y+51	; 0x33
    8b9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8ba0:	a3 a1       	ldd	r26, Z+35	; 0x23
    8ba2:	9f 9e       	mul	r9, r31
    8ba4:	9c 9a       	sbi	0x13, 4	; 19
    8ba6:	99 97       	sbiw	r26, 0x29	; 41
    8ba8:	95 94       	asr	r9
    8baa:	93 91       	.word	0x9193	; ????
    8bac:	90 8f       	std	Z+24, r25	; 0x18
    8bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8bb0:	8b 8a       	std	Y+19, r8	; 0x13
    8bb2:	89 88       	ldd	r8, Y+17	; 0x11
    8bb4:	88 87       	std	Y+8, r24	; 0x08
    8bb6:	86 85       	ldd	r24, Z+14	; 0x0e
    8bb8:	85 84       	ldd	r8, Z+13	; 0x0d
    8bba:	84 84       	ldd	r8, Z+12	; 0x0c
    8bbc:	83 83       	std	Z+3, r24	; 0x03
    8bbe:	83 83       	std	Z+3, r24	; 0x03
    8bc0:	83 83       	std	Z+3, r24	; 0x03
    8bc2:	83 83       	std	Z+3, r24	; 0x03
    8bc4:	83 84       	ldd	r8, Z+11	; 0x0b
    8bc6:	84 84       	ldd	r8, Z+12	; 0x0c
    8bc8:	85 85       	ldd	r24, Z+13	; 0x0d
    8bca:	86 87       	std	Z+14, r24	; 0x0e
    8bcc:	88 88       	ldd	r8, Y+16	; 0x10
    8bce:	89 8a       	std	Y+17, r8	; 0x11
    8bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8bd4:	90 91 93 94 	lds	r25, 0x9493
    8bd8:	95 97       	sbiw	r26, 0x25	; 37
    8bda:	99 9a       	sbi	0x13, 1	; 19
    8bdc:	9c 9e       	mul	r9, r28
    8bde:	9f a1       	ldd	r25, Y+39	; 0x27
    8be0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8be2:	a7 a9       	ldd	r26, Z+55	; 0x37
    8be4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8be6:	af b1       	in	r26, 0x0f	; 15
    8be8:	b4 b6       	in	r11, 0x34	; 52
    8bea:	b8 ba       	out	0x18, r11	; 24
    8bec:	bd bf       	out	0x3d, r27	; 61
    8bee:	c1 c3       	rjmp	.+1922   	; 0x9372 <wifiGetIfAvailable+0xc>
    8bf0:	c6 c8       	rjmp	.-3700   	; 0x7d7e <ProcessMusic+0xa8>
    8bf2:	ca cc       	rjmp	.-1644   	; 0x8588 <waves+0x188>
    8bf4:	ce d0       	rcall	.+412    	; 0x8d92 <waves+0x992>
    8bf6:	d2 d4       	rcall	.+2468   	; 0x959c <initWifi+0x84>
    8bf8:	d6 d7       	rcall	.+4012   	; 0x9ba6 <LBRandom+0x2c>
    8bfa:	d7 d7       	rcall	.+4014   	; 0x9baa <LBRandom+0x30>
    8bfc:	d4 fe       	sbrs	r13, 4
    8bfe:	e5 e9       	ldi	r30, 0x95	; 149
    8c00:	f9 f8       	.word	0xf8f9	; ????
    8c02:	f9 f5       	brne	.+126    	; 0x8c82 <waves+0x882>
    8c04:	eb e1       	ldi	r30, 0x1B	; 27
    8c06:	dd de       	rcall	.-582    	; 0x89c2 <waves+0x5c2>
    8c08:	e0 e2       	ldi	r30, 0x20	; 32
    8c0a:	e4 e5       	ldi	r30, 0x54	; 84
    8c0c:	e6 e5       	ldi	r30, 0x56	; 86
    8c0e:	e4 e2       	ldi	r30, 0x24	; 36
    8c10:	de d9       	rcall	.-3140   	; 0x7fce <ProcessMusic+0x2f8>
    8c12:	d2 ca       	rjmp	.-2652   	; 0x81b8 <esmw+0x3a>
    8c14:	c1 b7       	in	r28, 0x31	; 49
    8c16:	ac a2       	std	Y+36, r10	; 0x24
    8c18:	99 91       	ld	r25, Y+
    8c1a:	8a 86       	std	Y+10, r8	; 0x0a
    8c1c:	83 81       	ldd	r24, Z+3	; 0x03
    8c1e:	80 80       	ld	r8, Z
    8c20:	81 82       	std	Z+1, r8	; 0x01
    8c22:	83 85       	ldd	r24, Z+11	; 0x0b
    8c24:	86 88       	ldd	r8, Z+22	; 0x16
    8c26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8c28:	8d 8f       	std	Y+29, r24	; 0x1d
    8c2a:	90 92 93 95 	sts	0x9593, r9
    8c2e:	96 97       	sbiw	r26, 0x26	; 38
    8c30:	98 99       	sbic	0x13, 0	; 19
    8c32:	9a 9b       	sbis	0x13, 2	; 19
    8c34:	9b 9c       	mul	r9, r11
    8c36:	9d 9d       	mul	r25, r13
    8c38:	9d 9e       	mul	r9, r29
    8c3a:	9e 9e       	mul	r9, r30
    8c3c:	9f 9f       	mul	r25, r31
    8c3e:	9f 9f       	mul	r25, r31
    8c40:	9f 9f       	mul	r25, r31
    8c42:	9f 9e       	mul	r9, r31
    8c44:	9e 9e       	mul	r9, r30
    8c46:	9d 9d       	mul	r25, r13
    8c48:	9d 9c       	mul	r9, r13
    8c4a:	9b 9b       	sbis	0x13, 3	; 19
    8c4c:	9a 99       	sbic	0x13, 2	; 19
    8c4e:	98 97       	sbiw	r26, 0x28	; 40
    8c50:	96 95       	lsr	r25
    8c52:	93 92       	.word	0x9293	; ????
    8c54:	90 8f       	std	Z+24, r25	; 0x18
    8c56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8c58:	8a 88       	ldd	r8, Y+18	; 0x12
    8c5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8c5c:	83 82       	std	Z+3, r8	; 0x03
    8c5e:	81 80       	ldd	r8, Z+1	; 0x01
    8c60:	80 81       	ld	r24, Z
    8c62:	83 86       	std	Z+11, r8	; 0x0b
    8c64:	8a 91       	ld	r24, -Y
    8c66:	99 a2       	std	Y+33, r9	; 0x21
    8c68:	ac b7       	in	r26, 0x3c	; 60
    8c6a:	c1 ca       	rjmp	.-2686   	; 0x81ee <esmw+0x70>
    8c6c:	d2 d9       	rcall	.-3164   	; 0x8012 <ProcessMusic+0x33c>
    8c6e:	de e2       	ldi	r29, 0x2E	; 46
    8c70:	e4 e5       	ldi	r30, 0x54	; 84
    8c72:	e6 e5       	ldi	r30, 0x56	; 86
    8c74:	e4 e2       	ldi	r30, 0x24	; 36
    8c76:	e0 de       	rcall	.-576    	; 0x8a38 <waves+0x638>
    8c78:	dd e1       	ldi	r29, 0x1D	; 29
    8c7a:	eb f5       	brvc	.+122    	; 0x8cf6 <waves+0x8f6>
    8c7c:	f9 f8       	.word	0xf8f9	; ????
    8c7e:	f9 00       	.word	0x00f9	; ????
    8c80:	07 08       	sbc	r0, r7
    8c82:	07 0b       	sbc	r16, r23
    8c84:	15 1f       	adc	r17, r21
    8c86:	23 22       	and	r2, r19
    8c88:	20 1e       	adc	r2, r16
    8c8a:	1c 1b       	sub	r17, r28
    8c8c:	1a 1b       	sub	r17, r26
    8c8e:	1c 1e       	adc	r1, r28
    8c90:	22 27       	eor	r18, r18
    8c92:	2e 36       	cpi	r18, 0x6E	; 110
    8c94:	3f 49       	sbci	r19, 0x9F	; 159
    8c96:	54 5e       	subi	r21, 0xE4	; 228
    8c98:	67 6f       	ori	r22, 0xF7	; 247
    8c9a:	76 7a       	andi	r23, 0xA6	; 166
    8c9c:	7e 7f       	andi	r23, 0xFE	; 254
    8c9e:	7f 7f       	andi	r23, 0xFF	; 255
    8ca0:	7f 7e       	andi	r23, 0xEF	; 239
    8ca2:	7d 7b       	andi	r23, 0xBD	; 189
    8ca4:	7a 78       	andi	r23, 0x8A	; 138
    8ca6:	76 74       	andi	r23, 0x46	; 70
    8ca8:	73 71       	andi	r23, 0x13	; 19
    8caa:	70 6e       	ori	r23, 0xE0	; 224
    8cac:	6d 6b       	ori	r22, 0xBD	; 189
    8cae:	6a 69       	ori	r22, 0x9A	; 154
    8cb0:	68 67       	ori	r22, 0x78	; 120
    8cb2:	66 65       	ori	r22, 0x56	; 86
    8cb4:	65 64       	ori	r22, 0x45	; 69
    8cb6:	64 63       	ori	r22, 0x34	; 52
    8cb8:	63 62       	ori	r22, 0x23	; 35
    8cba:	62 62       	ori	r22, 0x22	; 34
    8cbc:	61 61       	ori	r22, 0x11	; 17
    8cbe:	61 61       	ori	r22, 0x11	; 17
    8cc0:	61 61       	ori	r22, 0x11	; 17
    8cc2:	61 62       	ori	r22, 0x21	; 33
    8cc4:	62 62       	ori	r22, 0x22	; 34
    8cc6:	63 63       	ori	r22, 0x33	; 51
    8cc8:	63 64       	ori	r22, 0x43	; 67
    8cca:	65 65       	ori	r22, 0x55	; 85
    8ccc:	66 67       	ori	r22, 0x76	; 118
    8cce:	68 69       	ori	r22, 0x98	; 152
    8cd0:	6a 6b       	ori	r22, 0xBA	; 186
    8cd2:	6d 6e       	ori	r22, 0xED	; 237
    8cd4:	70 71       	andi	r23, 0x10	; 16
    8cd6:	73 74       	andi	r23, 0x43	; 67
    8cd8:	76 78       	andi	r23, 0x86	; 134
    8cda:	7a 7b       	andi	r23, 0xBA	; 186
    8cdc:	7d 7e       	andi	r23, 0xED	; 237
    8cde:	7f 7f       	andi	r23, 0xFF	; 255
    8ce0:	7f 7f       	andi	r23, 0xFF	; 255
    8ce2:	7e 7a       	andi	r23, 0xAE	; 174
    8ce4:	76 6f       	ori	r23, 0xF6	; 246
    8ce6:	67 5e       	subi	r22, 0xE7	; 231
    8ce8:	54 49       	sbci	r21, 0x94	; 148
    8cea:	3f 36       	cpi	r19, 0x6F	; 111
    8cec:	2e 27       	eor	r18, r30
    8cee:	22 1e       	adc	r2, r18
    8cf0:	1c 1b       	sub	r17, r28
    8cf2:	1a 1b       	sub	r17, r26
    8cf4:	1c 1e       	adc	r1, r28
    8cf6:	20 22       	and	r2, r16
    8cf8:	23 1f       	adc	r18, r19
    8cfa:	15 0b       	sbc	r17, r21
    8cfc:	07 08       	sbc	r0, r7
    8cfe:	07 00       	.word	0x0007	; ????
    8d00:	1f 31       	cpi	r17, 0x1F	; 31
    8d02:	3d 44       	sbci	r19, 0x4D	; 77
    8d04:	4e 53       	subi	r20, 0x3E	; 62
    8d06:	54 56       	subi	r21, 0x64	; 100
    8d08:	5a 5f       	subi	r21, 0xFA	; 250
    8d0a:	64 69       	ori	r22, 0x94	; 148
    8d0c:	6e 74       	andi	r22, 0x4E	; 78
    8d0e:	76 79       	andi	r23, 0x96	; 150
    8d10:	7c 7f       	andi	r23, 0xFC	; 252
    8d12:	7f 7f       	andi	r23, 0xFF	; 255
    8d14:	7f 7f       	andi	r23, 0xFF	; 255
    8d16:	7f 7f       	andi	r23, 0xFF	; 255
    8d18:	7f 7f       	andi	r23, 0xFF	; 255
    8d1a:	7f 7f       	andi	r23, 0xFF	; 255
    8d1c:	7f 7f       	andi	r23, 0xFF	; 255
    8d1e:	7f 7f       	andi	r23, 0xFF	; 255
    8d20:	7f 7f       	andi	r23, 0xFF	; 255
    8d22:	7f 7f       	andi	r23, 0xFF	; 255
    8d24:	7f 7f       	andi	r23, 0xFF	; 255
    8d26:	7f 7f       	andi	r23, 0xFF	; 255
    8d28:	7f 7f       	andi	r23, 0xFF	; 255
    8d2a:	7f 7f       	andi	r23, 0xFF	; 255
    8d2c:	7f 7f       	andi	r23, 0xFF	; 255
    8d2e:	7f 7f       	andi	r23, 0xFF	; 255
    8d30:	7f 7f       	andi	r23, 0xFF	; 255
    8d32:	7f 7f       	andi	r23, 0xFF	; 255
    8d34:	7f 7f       	andi	r23, 0xFF	; 255
    8d36:	7f 7f       	andi	r23, 0xFF	; 255
    8d38:	7f 7f       	andi	r23, 0xFF	; 255
    8d3a:	7f 7f       	andi	r23, 0xFF	; 255
    8d3c:	7f 7f       	andi	r23, 0xFF	; 255
    8d3e:	7f 7f       	andi	r23, 0xFF	; 255
    8d40:	7f 7f       	andi	r23, 0xFF	; 255
    8d42:	7f 7f       	andi	r23, 0xFF	; 255
    8d44:	7f 7f       	andi	r23, 0xFF	; 255
    8d46:	7f 7f       	andi	r23, 0xFF	; 255
    8d48:	7f 7f       	andi	r23, 0xFF	; 255
    8d4a:	7f 7f       	andi	r23, 0xFF	; 255
    8d4c:	7f 7f       	andi	r23, 0xFF	; 255
    8d4e:	7f 7f       	andi	r23, 0xFF	; 255
    8d50:	7f 7f       	andi	r23, 0xFF	; 255
    8d52:	7f 7f       	andi	r23, 0xFF	; 255
    8d54:	7f 7f       	andi	r23, 0xFF	; 255
    8d56:	7f 7f       	andi	r23, 0xFF	; 255
    8d58:	7f 7f       	andi	r23, 0xFF	; 255
    8d5a:	7f 7f       	andi	r23, 0xFF	; 255
    8d5c:	7f 7f       	andi	r23, 0xFF	; 255
    8d5e:	7f 7f       	andi	r23, 0xFF	; 255
    8d60:	7f 7f       	andi	r23, 0xFF	; 255
    8d62:	7f 7f       	andi	r23, 0xFF	; 255
    8d64:	7f 7f       	andi	r23, 0xFF	; 255
    8d66:	7f 7f       	andi	r23, 0xFF	; 255
    8d68:	7f 7f       	andi	r23, 0xFF	; 255
    8d6a:	7f 7f       	andi	r23, 0xFF	; 255
    8d6c:	7f 7f       	andi	r23, 0xFF	; 255
    8d6e:	7f 7f       	andi	r23, 0xFF	; 255
    8d70:	7f 7f       	andi	r23, 0xFF	; 255
    8d72:	7f 7f       	andi	r23, 0xFF	; 255
    8d74:	7f 7f       	andi	r23, 0xFF	; 255
    8d76:	7f 7f       	andi	r23, 0xFF	; 255
    8d78:	7f 7f       	andi	r23, 0xFF	; 255
    8d7a:	7f 7c       	andi	r23, 0xCF	; 207
    8d7c:	78 71       	andi	r23, 0x18	; 24
    8d7e:	68 4c       	sbci	r22, 0xC8	; 200
    8d80:	2c 1c       	adc	r2, r12
    8d82:	12 0c       	add	r1, r2
    8d84:	0a 0b       	sbc	r16, r26
    8d86:	0a 05       	cpc	r16, r10
    8d88:	fd f3       	brhs	.-2      	; 0x8d88 <waves+0x988>
    8d8a:	e9 df       	rcall	.-46     	; 0x8d5e <waves+0x95e>
    8d8c:	d4 ca       	rjmp	.-2648   	; 0x8336 <steptable+0x12e>
    8d8e:	c0 b7       	in	r28, 0x30	; 48
    8d90:	ae a6       	std	Y+46, r10	; 0x2e
    8d92:	9e 97       	sbiw	r26, 0x2e	; 46
    8d94:	91 8b       	std	Z+17, r25	; 0x11
    8d96:	86 85       	ldd	r24, Z+14	; 0x0e
    8d98:	82 80       	ldd	r8, Z+2	; 0x02
    8d9a:	80 80       	ld	r8, Z
    8d9c:	80 80       	ld	r8, Z
    8d9e:	80 80       	ld	r8, Z
    8da0:	80 80       	ld	r8, Z
    8da2:	80 80       	ld	r8, Z
    8da4:	80 80       	ld	r8, Z
    8da6:	80 80       	ld	r8, Z
    8da8:	80 80       	ld	r8, Z
    8daa:	80 80       	ld	r8, Z
    8dac:	80 80       	ld	r8, Z
    8dae:	80 80       	ld	r8, Z
    8db0:	80 80       	ld	r8, Z
    8db2:	80 80       	ld	r8, Z
    8db4:	80 80       	ld	r8, Z
    8db6:	80 80       	ld	r8, Z
    8db8:	80 80       	ld	r8, Z
    8dba:	80 80       	ld	r8, Z
    8dbc:	80 80       	ld	r8, Z
    8dbe:	80 80       	ld	r8, Z
    8dc0:	80 80       	ld	r8, Z
    8dc2:	80 80       	ld	r8, Z
    8dc4:	80 80       	ld	r8, Z
    8dc6:	80 80       	ld	r8, Z
    8dc8:	80 80       	ld	r8, Z
    8dca:	80 80       	ld	r8, Z
    8dcc:	80 80       	ld	r8, Z
    8dce:	80 80       	ld	r8, Z
    8dd0:	80 80       	ld	r8, Z
    8dd2:	80 80       	ld	r8, Z
    8dd4:	80 80       	ld	r8, Z
    8dd6:	80 80       	ld	r8, Z
    8dd8:	80 80       	ld	r8, Z
    8dda:	80 80       	ld	r8, Z
    8ddc:	80 80       	ld	r8, Z
    8dde:	80 80       	ld	r8, Z
    8de0:	80 80       	ld	r8, Z
    8de2:	80 80       	ld	r8, Z
    8de4:	80 80       	ld	r8, Z
    8de6:	80 80       	ld	r8, Z
    8de8:	80 80       	ld	r8, Z
    8dea:	80 80       	ld	r8, Z
    8dec:	80 80       	ld	r8, Z
    8dee:	80 80       	ld	r8, Z
    8df0:	80 80       	ld	r8, Z
    8df2:	80 80       	ld	r8, Z
    8df4:	80 87       	std	Z+8, r24	; 0x08
    8df6:	91 9d       	mul	r25, r1
    8df8:	ac c4       	rjmp	.+2392   	; 0x9752 <joinNetGame+0x28>
    8dfa:	cb d4       	rcall	.+2454   	; 0x9792 <joinNetGame+0x68>
    8dfc:	dd f2       	brhs	.-74     	; 0x8db4 <waves+0x9b4>
    8dfe:	fa fa       	.word	0xfafa	; ????

00008e00 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    8e00:	2f 92       	push	r2
    8e02:	3f 92       	push	r3
    8e04:	4f 92       	push	r4
    8e06:	5f 92       	push	r5
    8e08:	6f 92       	push	r6
    8e0a:	7f 92       	push	r7
    8e0c:	8f 92       	push	r8
    8e0e:	9f 92       	push	r9
    8e10:	af 92       	push	r10
    8e12:	bf 92       	push	r11
    8e14:	cf 92       	push	r12
    8e16:	df 92       	push	r13
    8e18:	ef 92       	push	r14
    8e1a:	ff 92       	push	r15
    8e1c:	0f 93       	push	r16
    8e1e:	1f 93       	push	r17
    8e20:	cf 93       	push	r28
    8e22:	df 93       	push	r29
    8e24:	00 d0       	rcall	.+0      	; 0x8e26 <ProcessSprites+0x26>
    8e26:	00 d0       	rcall	.+0      	; 0x8e28 <ProcessSprites+0x28>
    8e28:	00 d0       	rcall	.+0      	; 0x8e2a <ProcessSprites+0x2a>
    8e2a:	cd b7       	in	r28, 0x3d	; 61
    8e2c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    8e2e:	80 91 00 01 	lds	r24, 0x0100
    8e32:	88 23       	and	r24, r24
    8e34:	09 f4       	brne	.+2      	; 0x8e38 <ProcessSprites+0x38>
    8e36:	b1 c0       	rjmp	.+354    	; 0x8f9a <ProcessSprites+0x19a>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    8e38:	80 91 0e 0a 	lds	r24, 0x0A0E
    8e3c:	80 93 0d 0a 	sts	0x0A0D, r24
	free_tile_index = user_ram_tiles_c;
    8e40:	80 93 0c 0a 	sts	0x0A0C, r24
    8e44:	00 e0       	ldi	r16, 0x00	; 0
    8e46:	10 e0       	ldi	r17, 0x00	; 0
    8e48:	f8 01       	movw	r30, r16
    8e4a:	e8 55       	subi	r30, 0x58	; 88
    8e4c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    8e4e:	81 81       	ldd	r24, Z+1	; 0x01
    8e50:	90 81       	ld	r25, Z
    8e52:	32 81       	ldd	r19, Z+2	; 0x02
    8e54:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    8e56:	28 e0       	ldi	r18, 0x08	; 8
    8e58:	29 0f       	add	r18, r25
    8e5a:	26 95       	lsr	r18
    8e5c:	26 95       	lsr	r18
    8e5e:	26 95       	lsr	r18
    8e60:	33 24       	eor	r3, r3
    8e62:	3a 94       	dec	r3
    8e64:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    8e66:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    8e68:	19 f0       	breq	.+6      	; 0x8e70 <ProcessSprites+0x70>
    8e6a:	e2 e0       	ldi	r30, 0x02	; 2
    8e6c:	2e 2e       	mov	r2, r30
    8e6e:	02 c0       	rjmp	.+4      	; 0x8e74 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    8e70:	22 24       	eor	r2, r2
    8e72:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    8e74:	28 e0       	ldi	r18, 0x08	; 8
    8e76:	28 0f       	add	r18, r24
    8e78:	52 2e       	mov	r5, r18
    8e7a:	56 94       	lsr	r5
    8e7c:	56 94       	lsr	r5
    8e7e:	56 94       	lsr	r5
    8e80:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    8e82:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    8e84:	19 f0       	breq	.+6      	; 0x8e8c <ProcessSprites+0x8c>
    8e86:	22 e0       	ldi	r18, 0x02	; 2
    8e88:	29 83       	std	Y+1, r18	; 0x01
    8e8a:	02 c0       	rjmp	.+4      	; 0x8e90 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    8e8c:	e1 e0       	ldi	r30, 0x01	; 1
    8e8e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    8e90:	68 2e       	mov	r6, r24
    8e92:	71 2c       	mov	r7, r1
    8e94:	76 2c       	mov	r7, r6
    8e96:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8e98:	69 0e       	add	r6, r25
    8e9a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    8e9c:	50 e0       	ldi	r21, 0x00	; 0
    8e9e:	54 2f       	mov	r21, r20
    8ea0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8ea2:	ca 01       	movw	r24, r20
    8ea4:	83 0f       	add	r24, r19
    8ea6:	91 1d       	adc	r25, r1
    8ea8:	9b 83       	std	Y+3, r25	; 0x03
    8eaa:	8a 83       	std	Y+2, r24	; 0x02
    8eac:	e1 2c       	mov	r14, r1
    8eae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8eb0:	9e e1       	ldi	r25, 0x1E	; 30
    8eb2:	59 9e       	mul	r5, r25
    8eb4:	50 01       	movw	r10, r0
    8eb6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    8eb8:	9e 2c       	mov	r9, r14
    8eba:	88 24       	eor	r8, r8
    8ebc:	43 2c       	mov	r4, r3
    8ebe:	c1 2c       	mov	r12, r1
    8ec0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    8ec2:	ed e1       	ldi	r30, 0x1D	; 29
    8ec4:	e4 15       	cp	r30, r4
    8ec6:	08 f4       	brcc	.+2      	; 0x8eca <ProcessSprites+0xca>
    8ec8:	53 c0       	rjmp	.+166    	; 0x8f70 <ProcessSprites+0x170>
    8eca:	fb e1       	ldi	r31, 0x1B	; 27
    8ecc:	f5 15       	cp	r31, r5
    8ece:	08 f4       	brcc	.+2      	; 0x8ed2 <ProcessSprites+0xd2>
    8ed0:	4f c0       	rjmp	.+158    	; 0x8f70 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8ed2:	c5 01       	movw	r24, r10
    8ed4:	84 0d       	add	r24, r4
    8ed6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    8ed8:	9c 01       	movw	r18, r24
    8eda:	20 5a       	subi	r18, 0xA0	; 160
    8edc:	3e 4f       	sbci	r19, 0xFE	; 254
    8ede:	3e 83       	std	Y+6, r19	; 0x06
    8ee0:	2d 83       	std	Y+5, r18	; 0x05
    8ee2:	f9 01       	movw	r30, r18
    8ee4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    8ee6:	81 e0       	ldi	r24, 0x01	; 1
    8ee8:	94 31       	cpi	r25, 0x14	; 20
    8eea:	08 f4       	brcc	.+2      	; 0x8eee <ProcessSprites+0xee>
    8eec:	80 e0       	ldi	r24, 0x00	; 0
    8eee:	21 e0       	ldi	r18, 0x01	; 1
    8ef0:	30 91 0d 0a 	lds	r19, 0x0A0D
    8ef4:	93 17       	cp	r25, r19
    8ef6:	18 f0       	brcs	.+6      	; 0x8efe <ProcessSprites+0xfe>
    8ef8:	20 e0       	ldi	r18, 0x00	; 0
    8efa:	88 23       	and	r24, r24
    8efc:	61 f1       	breq	.+88     	; 0x8f56 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    8efe:	60 91 0c 0a 	lds	r22, 0x0A0C
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    8f02:	64 31       	cpi	r22, 0x14	; 20
    8f04:	30 f5       	brcc	.+76     	; 0x8f52 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    8f06:	88 23       	and	r24, r24
    8f08:	31 f0       	breq	.+12     	; 0x8f16 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    8f0a:	8c ee       	ldi	r24, 0xEC	; 236
    8f0c:	89 0f       	add	r24, r25
    8f0e:	9c 83       	std	Y+4, r25	; 0x04
    8f10:	0e 94 d5 36 	call	0x6daa	; 0x6daa <CopyFlashTile>
    8f14:	06 c0       	rjmp	.+12     	; 0x8f22 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    8f16:	22 23       	and	r18, r18
    8f18:	29 f0       	breq	.+10     	; 0x8f24 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    8f1a:	89 2f       	mov	r24, r25
    8f1c:	9c 83       	std	Y+4, r25	; 0x04
    8f1e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <CopyRamTile>
    8f22:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    8f24:	80 91 0c 0a 	lds	r24, 0x0A0C
    8f28:	e8 2f       	mov	r30, r24
    8f2a:	f0 e0       	ldi	r31, 0x00	; 0
    8f2c:	9f 01       	movw	r18, r30
    8f2e:	22 0f       	add	r18, r18
    8f30:	33 1f       	adc	r19, r19
    8f32:	e2 0f       	add	r30, r18
    8f34:	f3 1f       	adc	r31, r19
    8f36:	e0 53       	subi	r30, 0x30	; 48
    8f38:	f6 4f       	sbci	r31, 0xF6	; 246
    8f3a:	2d 81       	ldd	r18, Y+5	; 0x05
    8f3c:	3e 81       	ldd	r19, Y+6	; 0x06
    8f3e:	31 83       	std	Z+1, r19	; 0x01
    8f40:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    8f42:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    8f44:	f9 01       	movw	r30, r18
    8f46:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    8f48:	91 e0       	ldi	r25, 0x01	; 1
    8f4a:	98 0f       	add	r25, r24
    8f4c:	90 93 0c 0a 	sts	0x0A0C, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    8f50:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    8f52:	94 31       	cpi	r25, 0x14	; 20
    8f54:	68 f4       	brcc	.+26     	; 0x8f70 <ProcessSprites+0x170>
    8f56:	80 91 0d 0a 	lds	r24, 0x0A0D
    8f5a:	98 17       	cp	r25, r24
    8f5c:	48 f0       	brcs	.+18     	; 0x8f70 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8f5e:	93 01       	movw	r18, r6
    8f60:	a6 01       	movw	r20, r12
    8f62:	48 0d       	add	r20, r8
    8f64:	59 1d       	adc	r21, r9
    8f66:	6a 81       	ldd	r22, Y+2	; 0x02
    8f68:	7b 81       	ldd	r23, Y+3	; 0x03
    8f6a:	89 2f       	mov	r24, r25
    8f6c:	0e 94 04 38 	call	0x7008	; 0x7008 <BlitSpritePart>
    8f70:	ff ef       	ldi	r31, 0xFF	; 255
    8f72:	cf 1a       	sub	r12, r31
    8f74:	df 0a       	sbc	r13, r31
    8f76:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    8f78:	c2 14       	cp	r12, r2
    8f7a:	08 f4       	brcc	.+2      	; 0x8f7e <ProcessSprites+0x17e>
    8f7c:	a2 cf       	rjmp	.-188    	; 0x8ec2 <ProcessSprites+0xc2>
    8f7e:	2f ef       	ldi	r18, 0xFF	; 255
    8f80:	e2 1a       	sub	r14, r18
    8f82:	f2 0a       	sbc	r15, r18
    8f84:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    8f86:	99 81       	ldd	r25, Y+1	; 0x01
    8f88:	e9 16       	cp	r14, r25
    8f8a:	08 f4       	brcc	.+2      	; 0x8f8e <ProcessSprites+0x18e>
    8f8c:	91 cf       	rjmp	.-222    	; 0x8eb0 <ProcessSprites+0xb0>
    8f8e:	0c 5f       	subi	r16, 0xFC	; 252
    8f90:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    8f92:	08 32       	cpi	r16, 0x28	; 40
    8f94:	11 05       	cpc	r17, r1
    8f96:	09 f0       	breq	.+2      	; 0x8f9a <ProcessSprites+0x19a>
    8f98:	57 cf       	rjmp	.-338    	; 0x8e48 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    8f9a:	26 96       	adiw	r28, 0x06	; 6
    8f9c:	0f b6       	in	r0, 0x3f	; 63
    8f9e:	f8 94       	cli
    8fa0:	de bf       	out	0x3e, r29	; 62
    8fa2:	0f be       	out	0x3f, r0	; 63
    8fa4:	cd bf       	out	0x3d, r28	; 61
    8fa6:	df 91       	pop	r29
    8fa8:	cf 91       	pop	r28
    8faa:	1f 91       	pop	r17
    8fac:	0f 91       	pop	r16
    8fae:	ff 90       	pop	r15
    8fb0:	ef 90       	pop	r14
    8fb2:	df 90       	pop	r13
    8fb4:	cf 90       	pop	r12
    8fb6:	bf 90       	pop	r11
    8fb8:	af 90       	pop	r10
    8fba:	9f 90       	pop	r9
    8fbc:	8f 90       	pop	r8
    8fbe:	7f 90       	pop	r7
    8fc0:	6f 90       	pop	r6
    8fc2:	5f 90       	pop	r5
    8fc4:	4f 90       	pop	r4
    8fc6:	3f 90       	pop	r3
    8fc8:	2f 90       	pop	r2
    8fca:	08 95       	ret

00008fcc <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    8fcc:	df 92       	push	r13
    8fce:	ef 92       	push	r14
    8fd0:	ff 92       	push	r15
    8fd2:	0f 93       	push	r16
    8fd4:	1f 93       	push	r17
    8fd6:	cf 93       	push	r28
    8fd8:	df 93       	push	r29
    8fda:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8fdc:	fb 01       	movw	r30, r22
    8fde:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8fe0:	31 96       	adiw	r30, 0x01	; 1
    8fe2:	64 91       	lpm	r22, Z
    8fe4:	5f ef       	ldi	r21, 0xFF	; 255
    8fe6:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    8fe8:	24 2f       	mov	r18, r20
    8fea:	21 70       	andi	r18, 0x01	; 1
    8fec:	40 ff       	sbrs	r20, 0
    8fee:	04 c0       	rjmp	.+8      	; 0x8ff8 <MapSprite2+0x2c>
			x=(mapWidth-1);
    8ff0:	95 2f       	mov	r25, r21
			dx=-1;
    8ff2:	ff 24       	eor	r15, r15
    8ff4:	fa 94       	dec	r15
    8ff6:	03 c0       	rjmp	.+6      	; 0x8ffe <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    8ff8:	ff 24       	eor	r15, r15
    8ffa:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8ffc:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8ffe:	41 ff       	sbrs	r20, 1
    9000:	05 c0       	rjmp	.+10     	; 0x900c <MapSprite2+0x40>
			y=(mapHeight-1);
    9002:	7f ef       	ldi	r23, 0xFF	; 255
    9004:	76 0f       	add	r23, r22
			dy=-1;
    9006:	ee 24       	eor	r14, r14
    9008:	ea 94       	dec	r14
    900a:	03 c0       	rjmp	.+6      	; 0x9012 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    900c:	ee 24       	eor	r14, r14
    900e:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9010:	70 e0       	ldi	r23, 0x00	; 0
    9012:	21 11       	cpse	r18, r1
    9014:	01 c0       	rjmp	.+2      	; 0x9018 <MapSprite2+0x4c>
    9016:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9018:	00 e0       	ldi	r16, 0x00	; 0
    901a:	06 17       	cp	r16, r22
    901c:	09 f1       	breq	.+66     	; 0x9060 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    901e:	71 03       	mulsu	r23, r17
    9020:	e0 01       	movw	r28, r0
    9022:	11 24       	eor	r1, r1
    9024:	d8 2e       	mov	r13, r24
    9026:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    9028:	8d 15       	cp	r24, r13
    902a:	b1 f0       	breq	.+44     	; 0x9058 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    902c:	9e 01       	movw	r18, r28
    902e:	29 0f       	add	r18, r25
    9030:	31 1d       	adc	r19, r1
    9032:	97 fd       	sbrc	r25, 7
    9034:	3a 95       	dec	r19
    9036:	2e 5f       	subi	r18, 0xFE	; 254
    9038:	3f 4f       	sbci	r19, 0xFF	; 255
    903a:	fd 01       	movw	r30, r26
    903c:	e2 0f       	add	r30, r18
    903e:	f3 1f       	adc	r31, r19
    9040:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9042:	34 e0       	ldi	r19, 0x04	; 4
    9044:	83 9f       	mul	r24, r19
    9046:	f0 01       	movw	r30, r0
    9048:	11 24       	eor	r1, r1
    904a:	e8 55       	subi	r30, 0x58	; 88
    904c:	fb 4f       	sbci	r31, 0xFB	; 251
    904e:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9050:	8f 5f       	subi	r24, 0xFF	; 255
    9052:	43 83       	std	Z+3, r20	; 0x03
    9054:	9f 0d       	add	r25, r15
    9056:	e8 cf       	rjmp	.-48     	; 0x9028 <MapSprite2+0x5c>
    9058:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    905a:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    905c:	95 2f       	mov	r25, r21
    905e:	dd cf       	rjmp	.-70     	; 0x901a <MapSprite2+0x4e>
	    }
	}
    9060:	df 91       	pop	r29
    9062:	cf 91       	pop	r28
    9064:	1f 91       	pop	r17
    9066:	0f 91       	pop	r16
    9068:	ff 90       	pop	r15
    906a:	ef 90       	pop	r14
    906c:	df 90       	pop	r13
    906e:	08 95       	ret

00009070 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    9070:	0f 93       	push	r16
    9072:	cf 93       	push	r28
    9074:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    9076:	30 e0       	ldi	r19, 0x00	; 0
    9078:	30 17       	cp	r19, r16
    907a:	e1 f0       	breq	.+56     	; 0x90b4 <MoveSprite+0x44>
    907c:	b4 2f       	mov	r27, r20
    907e:	a0 e2       	ldi	r26, 0x20	; 32
    9080:	a4 0f       	add	r26, r20
    9082:	78 2f       	mov	r23, r24
    9084:	72 0f       	add	r23, r18
    9086:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    9088:	87 17       	cp	r24, r23
    908a:	81 f0       	breq	.+32     	; 0x90ac <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    908c:	c4 e0       	ldi	r28, 0x04	; 4
    908e:	8c 9f       	mul	r24, r28
    9090:	f0 01       	movw	r30, r0
    9092:	11 24       	eor	r1, r1
    9094:	e8 55       	subi	r30, 0x58	; 88
    9096:	fb 4f       	sbci	r31, 0xFB	; 251
    9098:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    909a:	41 3e       	cpi	r20, 0xE1	; 225
    909c:	51 05       	cpc	r21, r1
    909e:	14 f0       	brlt	.+4      	; 0x90a4 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    90a0:	a1 83       	std	Z+1, r26	; 0x01
    90a2:	01 c0       	rjmp	.+2      	; 0x90a6 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    90a4:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    90a6:	8f 5f       	subi	r24, 0xFF	; 255
    90a8:	98 5f       	subi	r25, 0xF8	; 248
    90aa:	ee cf       	rjmp	.-36     	; 0x9088 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    90ac:	3f 5f       	subi	r19, 0xFF	; 255
    90ae:	48 5f       	subi	r20, 0xF8	; 248
    90b0:	5f 4f       	sbci	r21, 0xFF	; 255
    90b2:	e2 cf       	rjmp	.-60     	; 0x9078 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    90b4:	cf 91       	pop	r28
    90b6:	0f 91       	pop	r16
    90b8:	08 95       	ret

000090ba <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    90ba:	08 95       	ret

000090bc <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    90bc:	e8 ea       	ldi	r30, 0xA8	; 168
    90be:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    90c0:	80 ef       	ldi	r24, 0xF0	; 240
    90c2:	80 83       	st	Z, r24
    90c4:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    90c6:	94 e0       	ldi	r25, 0x04	; 4
    90c8:	e0 3d       	cpi	r30, 0xD0	; 208
    90ca:	f9 07       	cpc	r31, r25
    90cc:	d1 f7       	brne	.-12     	; 0x90c2 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    90ce:	10 92 0c 0a 	sts	0x0A0C, r1
		user_ram_tiles_c_tmp = 0U;
    90d2:	10 92 0e 0a 	sts	0x0A0E, r1
    90d6:	08 95       	ret

000090d8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    90d8:	4f 92       	push	r4
    90da:	5f 92       	push	r5
    90dc:	6f 92       	push	r6
    90de:	7f 92       	push	r7
    90e0:	8f 92       	push	r8
    90e2:	9f 92       	push	r9
    90e4:	af 92       	push	r10
    90e6:	bf 92       	push	r11
    90e8:	cf 92       	push	r12
    90ea:	df 92       	push	r13
    90ec:	ef 92       	push	r14
    90ee:	ff 92       	push	r15
    90f0:	0f 93       	push	r16
    90f2:	1f 93       	push	r17
    90f4:	cf 93       	push	r28
    90f6:	df 93       	push	r29
    90f8:	68 2e       	mov	r6, r24
    90fa:	56 2e       	mov	r5, r22
    90fc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    90fe:	fa 01       	movw	r30, r20
    9100:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9102:	31 96       	adiw	r30, 0x01	; 1
    9104:	84 90       	lpm	r8, Z
    9106:	c7 2c       	mov	r12, r7
    9108:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    910a:	00 e0       	ldi	r16, 0x00	; 0
    910c:	10 e0       	ldi	r17, 0x00	; 0
    910e:	91 2c       	mov	r9, r1
    9110:	98 14       	cp	r9, r8
    9112:	f1 f0       	breq	.+60     	; 0x9150 <DrawMap+0x78>
    9114:	c0 e0       	ldi	r28, 0x00	; 0
    9116:	d0 e0       	ldi	r29, 0x00	; 0
    9118:	58 01       	movw	r10, r16
    911a:	f2 e0       	ldi	r31, 0x02	; 2
    911c:	af 0e       	add	r10, r31
    911e:	b1 1c       	adc	r11, r1
    9120:	49 2c       	mov	r4, r9
    9122:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    9124:	c7 15       	cp	r28, r7
    9126:	80 f4       	brcc	.+32     	; 0x9148 <DrawMap+0x70>
    9128:	95 01       	movw	r18, r10
    912a:	2c 0f       	add	r18, r28
    912c:	3d 1f       	adc	r19, r29
    912e:	f7 01       	movw	r30, r14
    9130:	e2 0f       	add	r30, r18
    9132:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9134:	24 91       	lpm	r18, Z
    9136:	42 2f       	mov	r20, r18
    9138:	50 e0       	ldi	r21, 0x00	; 0
    913a:	64 2d       	mov	r22, r4
    913c:	8c 2f       	mov	r24, r28
    913e:	86 0d       	add	r24, r6
    9140:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
    9144:	21 96       	adiw	r28, 0x01	; 1
    9146:	ee cf       	rjmp	.-36     	; 0x9124 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9148:	93 94       	inc	r9
    914a:	0c 0d       	add	r16, r12
    914c:	1d 1d       	adc	r17, r13
    914e:	e0 cf       	rjmp	.-64     	; 0x9110 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9150:	df 91       	pop	r29
    9152:	cf 91       	pop	r28
    9154:	1f 91       	pop	r17
    9156:	0f 91       	pop	r16
    9158:	ff 90       	pop	r15
    915a:	ef 90       	pop	r14
    915c:	df 90       	pop	r13
    915e:	cf 90       	pop	r12
    9160:	bf 90       	pop	r11
    9162:	af 90       	pop	r10
    9164:	9f 90       	pop	r9
    9166:	8f 90       	pop	r8
    9168:	7f 90       	pop	r7
    916a:	6f 90       	pop	r6
    916c:	5f 90       	pop	r5
    916e:	4f 90       	pop	r4
    9170:	08 95       	ret

00009172 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    9172:	df 92       	push	r13
    9174:	ef 92       	push	r14
    9176:	ff 92       	push	r15
    9178:	0f 93       	push	r16
    917a:	1f 93       	push	r17
    917c:	cf 93       	push	r28
    917e:	df 93       	push	r29
    9180:	f6 2e       	mov	r15, r22
    9182:	04 2f       	mov	r16, r20
    9184:	d2 2e       	mov	r13, r18
    9186:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    9188:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    918a:	8a e0       	ldi	r24, 0x0A	; 10
    918c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    918e:	01 11       	cpse	r16, r1
    9190:	02 c0       	rjmp	.+4      	; 0x9196 <PrintByte+0x24>
    9192:	11 11       	cpse	r17, r1
    9194:	07 c0       	rjmp	.+14     	; 0x91a4 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    9196:	80 2f       	mov	r24, r16
    9198:	6e 2d       	mov	r22, r14
    919a:	0e 94 13 72 	call	0xe426	; 0xe426 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    919e:	40 e1       	ldi	r20, 0x10	; 16
    91a0:	49 0f       	add	r20, r25
    91a2:	05 c0       	rjmp	.+10     	; 0x91ae <PrintByte+0x3c>
		}else{
			if(zeropad){
    91a4:	dd 20       	and	r13, r13
    91a6:	11 f0       	breq	.+4      	; 0x91ac <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    91a8:	40 e1       	ldi	r20, 0x10	; 16
    91aa:	01 c0       	rjmp	.+2      	; 0x91ae <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    91ac:	40 e0       	ldi	r20, 0x00	; 0
    91ae:	6f 2d       	mov	r22, r15
    91b0:	8c 2f       	mov	r24, r28
    91b2:	0e 94 2b 3a 	call	0x7456	; 0x7456 <SetFont>
			}
		}
		val=val/10;
    91b6:	80 2f       	mov	r24, r16
    91b8:	6e 2d       	mov	r22, r14
    91ba:	0e 94 13 72 	call	0xe426	; 0xe426 <__udivmodqi4>
    91be:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    91c0:	1f 5f       	subi	r17, 0xFF	; 255
    91c2:	21 97       	sbiw	r28, 0x01	; 1
    91c4:	13 30       	cpi	r17, 0x03	; 3
    91c6:	19 f7       	brne	.-58     	; 0x918e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    91c8:	df 91       	pop	r29
    91ca:	cf 91       	pop	r28
    91cc:	1f 91       	pop	r17
    91ce:	0f 91       	pop	r16
    91d0:	ff 90       	pop	r15
    91d2:	ef 90       	pop	r14
    91d4:	df 90       	pop	r13
    91d6:	08 95       	ret

000091d8 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    91d8:	0f 93       	push	r16
    91da:	1f 93       	push	r17
    91dc:	cf 93       	push	r28
    91de:	df 93       	push	r29
    91e0:	06 2f       	mov	r16, r22
    91e2:	c4 2f       	mov	r28, r20
    91e4:	d5 2f       	mov	r29, r21
    91e6:	18 2f       	mov	r17, r24
    91e8:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    91ea:	fe 01       	movw	r30, r28
    91ec:	44 91       	lpm	r20, Z
		if(c!=0){
    91ee:	44 23       	and	r20, r20
    91f0:	49 f0       	breq	.+18     	; 0x9204 <Print+0x2c>
			c=((c&127)-32);			
    91f2:	4f 77       	andi	r20, 0x7F	; 127
    91f4:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    91f6:	60 2f       	mov	r22, r16
    91f8:	8c 2f       	mov	r24, r28
    91fa:	81 0f       	add	r24, r17
    91fc:	0e 94 2b 3a 	call	0x7456	; 0x7456 <SetFont>
    9200:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9202:	f3 cf       	rjmp	.-26     	; 0x91ea <Print+0x12>
	
}
    9204:	df 91       	pop	r29
    9206:	cf 91       	pop	r28
    9208:	1f 91       	pop	r17
    920a:	0f 91       	pop	r16
    920c:	08 95       	ret

0000920e <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    920e:	40 52       	subi	r20, 0x20	; 32
    9210:	0c 94 2b 3a 	jmp	0x7456	; 0x7456 <SetFont>

00009214 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9214:	0f 93       	push	r16
    9216:	1f 93       	push	r17
    9218:	cf 93       	push	r28
    921a:	df 93       	push	r29
    921c:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    921e:	c0 e0       	ldi	r28, 0x00	; 0
    9220:	d0 e0       	ldi	r29, 0x00	; 0
    9222:	c0 17       	cp	r28, r16
    9224:	d1 07       	cpc	r29, r17
    9226:	44 f4       	brge	.+16     	; 0x9238 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9228:	0e 94 45 3a 	call	0x748a	; 0x748a <GetVsyncFlag>
    922c:	88 23       	and	r24, r24
    922e:	e1 f3       	breq	.-8      	; 0x9228 <WaitVsync+0x14>
		ClearVsyncFlag();		
    9230:	0e 94 49 3a 	call	0x7492	; 0x7492 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9234:	21 96       	adiw	r28, 0x01	; 1
    9236:	f5 cf       	rjmp	.-22     	; 0x9222 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9238:	df 91       	pop	r29
    923a:	cf 91       	pop	r28
    923c:	1f 91       	pop	r17
    923e:	0f 91       	pop	r16
    9240:	08 95       	ret

00009242 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9242:	80 93 51 0b 	sts	0x0B51, r24
	currFadeFrame=0;
    9246:	10 92 54 0b 	sts	0x0B54, r1
	fadeActive=true;
    924a:	81 e0       	ldi	r24, 0x01	; 1
    924c:	80 93 53 0b 	sts	0x0B53, r24
		
	if(blocking){
    9250:	66 23       	and	r22, r22
    9252:	21 f0       	breq	.+8      	; 0x925c <doFade+0x1a>
		while(fadeActive==true);
    9254:	80 91 53 0b 	lds	r24, 0x0B53
    9258:	81 11       	cpse	r24, r1
    925a:	fc cf       	rjmp	.-8      	; 0x9254 <doFade+0x12>
    925c:	08 95       	ret

0000925e <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    925e:	81 11       	cpse	r24, r1
    9260:	03 c0       	rjmp	.+6      	; 0x9268 <FadeIn+0xa>
		DDRC=0xff;
    9262:	8f ef       	ldi	r24, 0xFF	; 255
    9264:	87 b9       	out	0x07, r24	; 7
		return;
    9266:	08 95       	ret
	}
	fadeStep=1;
    9268:	91 e0       	ldi	r25, 0x01	; 1
    926a:	90 93 55 0b 	sts	0x0B55, r25
	fadeDir=1;
    926e:	90 93 52 0b 	sts	0x0B52, r25
	doFade(speed,blocking);
    9272:	0c 94 21 49 	jmp	0x9242	; 0x9242 <doFade>

00009276 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9276:	81 11       	cpse	r24, r1
    9278:	02 c0       	rjmp	.+4      	; 0x927e <FadeOut+0x8>
		DDRC=0;
    927a:	17 b8       	out	0x07, r1	; 7
		return;
    927c:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    927e:	9c e0       	ldi	r25, 0x0C	; 12
    9280:	90 93 55 0b 	sts	0x0B55, r25
	fadeDir=-1;
    9284:	9f ef       	ldi	r25, 0xFF	; 255
    9286:	90 93 52 0b 	sts	0x0B52, r25
	doFade(speed,blocking);
    928a:	0c 94 21 49 	jmp	0x9242	; 0x9242 <doFade>

0000928e <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    928e:	80 91 53 0b 	lds	r24, 0x0B53
    9292:	88 23       	and	r24, r24
    9294:	01 f1       	breq	.+64     	; 0x92d6 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9296:	80 91 54 0b 	lds	r24, 0x0B54
    929a:	81 11       	cpse	r24, r1
    929c:	19 c0       	rjmp	.+50     	; 0x92d0 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    929e:	80 91 51 0b 	lds	r24, 0x0B51
    92a2:	80 93 54 0b 	sts	0x0B54, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    92a6:	e0 91 55 0b 	lds	r30, 0x0B55
    92aa:	f0 e0       	ldi	r31, 0x00	; 0
    92ac:	e5 52       	subi	r30, 0x25	; 37
    92ae:	ff 4f       	sbci	r31, 0xFF	; 255
    92b0:	e4 91       	lpm	r30, Z
    92b2:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    92b4:	90 91 52 0b 	lds	r25, 0x0B52
    92b8:	80 91 55 0b 	lds	r24, 0x0B55
    92bc:	89 0f       	add	r24, r25
    92be:	80 93 55 0b 	sts	0x0B55, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    92c2:	88 23       	and	r24, r24
    92c4:	11 f0       	breq	.+4      	; 0x92ca <ProcessFading+0x3c>
    92c6:	8d 30       	cpi	r24, 0x0D	; 13
    92c8:	31 f4       	brne	.+12     	; 0x92d6 <ProcessFading+0x48>
				fadeActive=false;
    92ca:	10 92 53 0b 	sts	0x0B53, r1
    92ce:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    92d0:	81 50       	subi	r24, 0x01	; 1
    92d2:	80 93 54 0b 	sts	0x0B54, r24
    92d6:	08 95       	ret

000092d8 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    92d8:	0c 94 47 49 	jmp	0x928e	; 0x928e <ProcessFading>

000092dc <LBPlaySound.part.6>:
void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    92dc:	41 e0       	ldi	r20, 0x01	; 1
    92de:	6f ef       	ldi	r22, 0xFF	; 255
    92e0:	0c 94 e3 3d 	jmp	0x7bc6	; 0x7bc6 <TriggerFx>

000092e4 <wifiSendP>:
#define WIFI_TIMEOUT 1
#define WIFI_NODATA 2

#define TIMEOUT 10*60

u8 wifiSendP(const char* str){
    92e4:	1f 93       	push	r17
    92e6:	cf 93       	push	r28
    92e8:	df 93       	push	r29
    92ea:	ec 01       	movw	r28, r24

	char c;
	while(str!=NULL){
    92ec:	20 97       	sbiw	r28, 0x00	; 0
    92ee:	59 f0       	breq	.+22     	; 0x9306 <wifiSendP+0x22>
		c=pgm_read_byte(str);
    92f0:	fe 01       	movw	r30, r28
    92f2:	14 91       	lpm	r17, Z
		if(c==0)break;
    92f4:	11 23       	and	r17, r17
    92f6:	39 f0       	breq	.+14     	; 0x9306 <wifiSendP+0x22>
		while(UartSendChar(c)==-1); //block if buffer full
    92f8:	81 2f       	mov	r24, r17
    92fa:	0e 94 49 3c 	call	0x7892	; 0x7892 <UartSendChar>
    92fe:	8f 3f       	cpi	r24, 0xFF	; 255
    9300:	d9 f3       	breq	.-10     	; 0x92f8 <wifiSendP+0x14>
		str++;
    9302:	21 96       	adiw	r28, 0x01	; 1
    9304:	f3 cf       	rjmp	.-26     	; 0x92ec <wifiSendP+0x8>
	};

	return WIFI_OK;
}
    9306:	80 e0       	ldi	r24, 0x00	; 0
    9308:	df 91       	pop	r29
    930a:	cf 91       	pop	r28
    930c:	1f 91       	pop	r17
    930e:	08 95       	ret

00009310 <wifiSend>:

u8 wifiSend(char* str){
    9310:	1f 93       	push	r17
    9312:	cf 93       	push	r28
    9314:	df 93       	push	r29
    9316:	ec 01       	movw	r28, r24

	char c;
	while(str!=NULL){
    9318:	20 97       	sbiw	r28, 0x00	; 0
    931a:	49 f0       	breq	.+18     	; 0x932e <wifiSend+0x1e>
		c=*str;
    931c:	19 91       	ld	r17, Y+
		if(c==0)break;
    931e:	11 23       	and	r17, r17
    9320:	31 f0       	breq	.+12     	; 0x932e <wifiSend+0x1e>
		while(UartSendChar(c)==-1); //block if buffer full
    9322:	81 2f       	mov	r24, r17
    9324:	0e 94 49 3c 	call	0x7892	; 0x7892 <UartSendChar>
    9328:	8f 3f       	cpi	r24, 0xFF	; 255
    932a:	d9 f3       	breq	.-10     	; 0x9322 <wifiSend+0x12>
    932c:	f5 cf       	rjmp	.-22     	; 0x9318 <wifiSend+0x8>
		str++;
	};
	return WIFI_OK;
}
    932e:	80 e0       	ldi	r24, 0x00	; 0
    9330:	df 91       	pop	r29
    9332:	cf 91       	pop	r28
    9334:	1f 91       	pop	r17
    9336:	08 95       	ret

00009338 <wifiSendBinary>:

u8 wifiSendBinary(char* str, u8 sz){
    9338:	0f 93       	push	r16
    933a:	1f 93       	push	r17
    933c:	cf 93       	push	r28
    933e:	df 93       	push	r29

	char c;
	while(sz--){
    9340:	c8 2f       	mov	r28, r24
    9342:	d9 2f       	mov	r29, r25
    9344:	16 2f       	mov	r17, r22
    9346:	18 0f       	add	r17, r24
    9348:	1c 17       	cp	r17, r28
    934a:	39 f0       	breq	.+14     	; 0x935a <wifiSendBinary+0x22>
		c=*str;
    934c:	09 91       	ld	r16, Y+
		while(UartSendChar(c)==-1); //block if buffer full
    934e:	80 2f       	mov	r24, r16
    9350:	0e 94 49 3c 	call	0x7892	; 0x7892 <UartSendChar>
    9354:	8f 3f       	cpi	r24, 0xFF	; 255
    9356:	d9 f3       	breq	.-10     	; 0x934e <wifiSendBinary+0x16>
    9358:	f7 cf       	rjmp	.-18     	; 0x9348 <wifiSendBinary+0x10>
		str++;
	};
	return WIFI_OK;
}
    935a:	80 e0       	ldi	r24, 0x00	; 0
    935c:	df 91       	pop	r29
    935e:	cf 91       	pop	r28
    9360:	1f 91       	pop	r17
    9362:	0f 91       	pop	r16
    9364:	08 95       	ret

00009366 <wifiGetIfAvailable>:

u8 wifiGetIfAvailable(void* buffer, u8 expectedSize) {
    9366:	ef 92       	push	r14
    9368:	ff 92       	push	r15
    936a:	1f 93       	push	r17
    936c:	cf 93       	push	r28
    936e:	df 93       	push	r29
    9370:	00 d0       	rcall	.+0      	; 0x9372 <wifiGetIfAvailable+0xc>
    9372:	cd b7       	in	r28, 0x3d	; 61
    9374:	de b7       	in	r29, 0x3e	; 62
    9376:	18 2f       	mov	r17, r24
	if (UartUnreadCount() < expectedSize) {
    9378:	69 83       	std	Y+1, r22	; 0x01
    937a:	9a 83       	std	Y+2, r25	; 0x02
    937c:	0e 94 27 3c 	call	0x784e	; 0x784e <UartUnreadCount>
    9380:	69 81       	ldd	r22, Y+1	; 0x01
    9382:	9a 81       	ldd	r25, Y+2	; 0x02
    9384:	86 17       	cp	r24, r22
    9386:	68 f0       	brcs	.+26     	; 0x93a2 <wifiGetIfAvailable+0x3c>
    9388:	e1 2e       	mov	r14, r17
    938a:	f9 2e       	mov	r15, r25
    938c:	16 0f       	add	r17, r22
		return WIFI_NODATA;
	}
	while (expectedSize--) {
    938e:	1e 15       	cp	r17, r14
    9390:	31 f0       	breq	.+12     	; 0x939e <wifiGetIfAvailable+0x38>
		*((char*)buffer) = UartReadChar() & 0xff;
    9392:	0e 94 2d 3c 	call	0x785a	; 0x785a <UartReadChar>
    9396:	f7 01       	movw	r30, r14
    9398:	81 93       	st	Z+, r24
    939a:	7f 01       	movw	r14, r30
    939c:	f8 cf       	rjmp	.-16     	; 0x938e <wifiGetIfAvailable+0x28>

u8 wifiGetIfAvailable(void* buffer, u8 expectedSize) {
	if (UartUnreadCount() < expectedSize) {
		return WIFI_NODATA;
	}
	while (expectedSize--) {
    939e:	80 e0       	ldi	r24, 0x00	; 0
    93a0:	01 c0       	rjmp	.+2      	; 0x93a4 <wifiGetIfAvailable+0x3e>
	return WIFI_OK;
}

u8 wifiGetIfAvailable(void* buffer, u8 expectedSize) {
	if (UartUnreadCount() < expectedSize) {
		return WIFI_NODATA;
    93a2:	82 e0       	ldi	r24, 0x02	; 2
	while (expectedSize--) {
		*((char*)buffer) = UartReadChar() & 0xff;
		buffer++;
	}
	return WIFI_OK;
}
    93a4:	0f 90       	pop	r0
    93a6:	0f 90       	pop	r0
    93a8:	df 91       	pop	r29
    93aa:	cf 91       	pop	r28
    93ac:	1f 91       	pop	r17
    93ae:	ff 90       	pop	r15
    93b0:	ef 90       	pop	r14
    93b2:	08 95       	ret

000093b4 <wifiGetPB>:

u8 wifiGetPB(const char* str, char* rxbuf){
    93b4:	ef 92       	push	r14
    93b6:	ff 92       	push	r15
    93b8:	0f 93       	push	r16
    93ba:	1f 93       	push	r17
    93bc:	cf 93       	push	r28
    93be:	df 93       	push	r29
    93c0:	f8 2e       	mov	r15, r24
    93c2:	e9 2e       	mov	r14, r25
    93c4:	8b 01       	movw	r16, r22
	u8 c;
	s16 r;
	const char* p=str;
	char* buf=rxbuf;
	ClearVsyncCounter();
    93c6:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <ClearVsyncCounter>
}

u8 wifiGetPB(const char* str, char* rxbuf){
	u8 c;
	s16 r;
	const char* p=str;
    93ca:	cf 2d       	mov	r28, r15
    93cc:	de 2d       	mov	r29, r14
	char* buf=rxbuf;
	ClearVsyncCounter();

	while(1){

		r=UartReadChar();
    93ce:	0e 94 2d 3c 	call	0x785a	; 0x785a <UartReadChar>
		if(r!=-1){
    93d2:	8f 3f       	cpi	r24, 0xFF	; 255
    93d4:	ef ef       	ldi	r30, 0xFF	; 255
    93d6:	9e 07       	cpc	r25, r30
    93d8:	99 f0       	breq	.+38     	; 0x9400 <wifiGetPB+0x4c>

			c=r&(0xff);
    93da:	28 2f       	mov	r18, r24

			if(buf!=NULL){
    93dc:	01 15       	cp	r16, r1
    93de:	11 05       	cpc	r17, r1
    93e0:	19 f0       	breq	.+6      	; 0x93e8 <wifiGetPB+0x34>
				*buf=c;
    93e2:	f8 01       	movw	r30, r16
    93e4:	81 93       	st	Z+, r24
    93e6:	8f 01       	movw	r16, r30
				buf++;
			}

			if(c==pgm_read_byte(p)){
    93e8:	fe 01       	movw	r30, r28
    93ea:	84 91       	lpm	r24, Z
    93ec:	28 13       	cpse	r18, r24
    93ee:	06 c0       	rjmp	.+12     	; 0x93fc <wifiGetPB+0x48>
				p++;
    93f0:	21 96       	adiw	r28, 0x01	; 1
				if(pgm_read_byte(p)==0){
    93f2:	fe 01       	movw	r30, r28
    93f4:	84 91       	lpm	r24, Z
    93f6:	81 11       	cpse	r24, r1
    93f8:	03 c0       	rjmp	.+6      	; 0x9400 <wifiGetPB+0x4c>
    93fa:	09 c0       	rjmp	.+18     	; 0x940e <wifiGetPB+0x5a>
					return WIFI_OK;
				}
			}else{
				//reset string compare
				p=str;
    93fc:	cf 2d       	mov	r28, r15
    93fe:	de 2d       	mov	r29, r14
			}
		}

		if(GetVsyncCounter()>TIMEOUT){
    9400:	0e 94 4f 3a 	call	0x749e	; 0x749e <GetVsyncCounter>
    9404:	89 35       	cpi	r24, 0x59	; 89
    9406:	92 40       	sbci	r25, 0x02	; 2
    9408:	10 f3       	brcs	.-60     	; 0x93ce <wifiGetPB+0x1a>
			return WIFI_TIMEOUT;
    940a:	81 e0       	ldi	r24, 0x01	; 1
    940c:	01 c0       	rjmp	.+2      	; 0x9410 <wifiGetPB+0x5c>
			}

			if(c==pgm_read_byte(p)){
				p++;
				if(pgm_read_byte(p)==0){
					return WIFI_OK;
    940e:	80 e0       	ldi	r24, 0x00	; 0
		if(GetVsyncCounter()>TIMEOUT){
			return WIFI_TIMEOUT;
		}
	}

}
    9410:	df 91       	pop	r29
    9412:	cf 91       	pop	r28
    9414:	1f 91       	pop	r17
    9416:	0f 91       	pop	r16
    9418:	ff 90       	pop	r15
    941a:	ef 90       	pop	r14
    941c:	08 95       	ret

0000941e <wifiGetPBT>:

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    941e:	cf 92       	push	r12
    9420:	df 92       	push	r13
    9422:	ef 92       	push	r14
    9424:	ff 92       	push	r15
    9426:	0f 93       	push	r16
    9428:	1f 93       	push	r17
    942a:	cf 93       	push	r28
    942c:	df 93       	push	r29
    942e:	f8 2e       	mov	r15, r24
    9430:	e9 2e       	mov	r14, r25
    9432:	8b 01       	movw	r16, r22
    9434:	6a 01       	movw	r12, r20
    u8 c;
    s16 r;
    const char* p=str;
    char* buf=rxbuf;
    ClearVsyncCounter();
    9436:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <ClearVsyncCounter>
}

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    u8 c;
    s16 r;
    const char* p=str;
    943a:	cf 2d       	mov	r28, r15
    943c:	de 2d       	mov	r29, r14
    char* buf=rxbuf;
    ClearVsyncCounter();

    while(1){

        r=UartReadChar();
    943e:	0e 94 2d 3c 	call	0x785a	; 0x785a <UartReadChar>
        if(r!=-1){
    9442:	8f 3f       	cpi	r24, 0xFF	; 255
    9444:	ef ef       	ldi	r30, 0xFF	; 255
    9446:	9e 07       	cpc	r25, r30
    9448:	99 f0       	breq	.+38     	; 0x9470 <wifiGetPBT+0x52>

            c=r&(0xff);
    944a:	28 2f       	mov	r18, r24

            if(buf!=NULL){
    944c:	01 15       	cp	r16, r1
    944e:	11 05       	cpc	r17, r1
    9450:	19 f0       	breq	.+6      	; 0x9458 <wifiGetPBT+0x3a>
                *buf=c;
    9452:	f8 01       	movw	r30, r16
    9454:	81 93       	st	Z+, r24
    9456:	8f 01       	movw	r16, r30
                buf++;
            }

            if(c==pgm_read_byte(p)){
    9458:	fe 01       	movw	r30, r28
    945a:	84 91       	lpm	r24, Z
    945c:	28 13       	cpse	r18, r24
    945e:	06 c0       	rjmp	.+12     	; 0x946c <wifiGetPBT+0x4e>
                p++;
    9460:	21 96       	adiw	r28, 0x01	; 1
                if(pgm_read_byte(p)==0){
    9462:	fe 01       	movw	r30, r28
    9464:	84 91       	lpm	r24, Z
    9466:	81 11       	cpse	r24, r1
    9468:	03 c0       	rjmp	.+6      	; 0x9470 <wifiGetPBT+0x52>
    946a:	09 c0       	rjmp	.+18     	; 0x947e <wifiGetPBT+0x60>
                    return WIFI_OK;
                }
            }else{
                //reset string compare
                p=str;
    946c:	cf 2d       	mov	r28, r15
    946e:	de 2d       	mov	r29, r14
            }
        }

        if(GetVsyncCounter()>wifi_timeout){
    9470:	0e 94 4f 3a 	call	0x749e	; 0x749e <GetVsyncCounter>
    9474:	c8 16       	cp	r12, r24
    9476:	d9 06       	cpc	r13, r25
    9478:	10 f7       	brcc	.-60     	; 0x943e <wifiGetPBT+0x20>
            return WIFI_TIMEOUT;
    947a:	81 e0       	ldi	r24, 0x01	; 1
    947c:	01 c0       	rjmp	.+2      	; 0x9480 <wifiGetPBT+0x62>
            }

            if(c==pgm_read_byte(p)){
                p++;
                if(pgm_read_byte(p)==0){
                    return WIFI_OK;
    947e:	80 e0       	ldi	r24, 0x00	; 0
        if(GetVsyncCounter()>wifi_timeout){
            return WIFI_TIMEOUT;
        }
    }

}
    9480:	df 91       	pop	r29
    9482:	cf 91       	pop	r28
    9484:	1f 91       	pop	r17
    9486:	0f 91       	pop	r16
    9488:	ff 90       	pop	r15
    948a:	ef 90       	pop	r14
    948c:	df 90       	pop	r13
    948e:	cf 90       	pop	r12
    9490:	08 95       	ret

00009492 <wifiRequestP>:

	return WIFI_OK;
}


u8 wifiRequestP(const char* strToSend, const char* strToWait){
    9492:	cf 93       	push	r28
    9494:	df 93       	push	r29
    9496:	eb 01       	movw	r28, r22
	wifiSendP(strToSend);
    9498:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    949c:	60 e0       	ldi	r22, 0x00	; 0
    949e:	70 e0       	ldi	r23, 0x00	; 0
    94a0:	ce 01       	movw	r24, r28
    94a2:	0e 94 da 49 	call	0x93b4	; 0x93b4 <wifiGetPB>
    94a6:	91 e0       	ldi	r25, 0x01	; 1
    94a8:	81 30       	cpi	r24, 0x01	; 1
    94aa:	09 f0       	breq	.+2      	; 0x94ae <wifiRequestP+0x1c>
    94ac:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    94ae:	89 2f       	mov	r24, r25
    94b0:	df 91       	pop	r29
    94b2:	cf 91       	pop	r28
    94b4:	08 95       	ret

000094b6 <wifiRequest>:

u8 wifiRequest(char* strToSend, const char* strToWait){
    94b6:	cf 93       	push	r28
    94b8:	df 93       	push	r29
    94ba:	eb 01       	movw	r28, r22
	wifiSend(strToSend);
    94bc:	0e 94 88 49 	call	0x9310	; 0x9310 <wifiSend>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    94c0:	60 e0       	ldi	r22, 0x00	; 0
    94c2:	70 e0       	ldi	r23, 0x00	; 0
    94c4:	ce 01       	movw	r24, r28
    94c6:	0e 94 da 49 	call	0x93b4	; 0x93b4 <wifiGetPB>
    94ca:	91 e0       	ldi	r25, 0x01	; 1
    94cc:	81 30       	cpi	r24, 0x01	; 1
    94ce:	09 f0       	breq	.+2      	; 0x94d2 <wifiRequest+0x1c>
    94d0:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    94d2:	89 2f       	mov	r24, r25
    94d4:	df 91       	pop	r29
    94d6:	cf 91       	pop	r28
    94d8:	08 95       	ret

000094da <wifiRequestPT>:

u8 wifiRequestPT(const char* strToSend, const char* strToWait, u16 wifi_timeout){
    94da:	0f 93       	push	r16
    94dc:	1f 93       	push	r17
    94de:	cf 93       	push	r28
    94e0:	df 93       	push	r29
    94e2:	00 d0       	rcall	.+0      	; 0x94e4 <wifiRequestPT+0xa>
    94e4:	cd b7       	in	r28, 0x3d	; 61
    94e6:	de b7       	in	r29, 0x3e	; 62
    94e8:	8b 01       	movw	r16, r22
    wifiSendP(strToSend);
    94ea:	49 83       	std	Y+1, r20	; 0x01
    94ec:	5a 83       	std	Y+2, r21	; 0x02
    94ee:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
    if(wifiGetPBT(strToWait, NULL, wifi_timeout)==WIFI_TIMEOUT){
    94f2:	49 81       	ldd	r20, Y+1	; 0x01
    94f4:	5a 81       	ldd	r21, Y+2	; 0x02
    94f6:	60 e0       	ldi	r22, 0x00	; 0
    94f8:	70 e0       	ldi	r23, 0x00	; 0
    94fa:	c8 01       	movw	r24, r16
    94fc:	0e 94 0f 4a 	call	0x941e	; 0x941e <wifiGetPBT>
    9500:	91 e0       	ldi	r25, 0x01	; 1
    9502:	81 30       	cpi	r24, 0x01	; 1
    9504:	09 f0       	breq	.+2      	; 0x9508 <wifiRequestPT+0x2e>
    9506:	90 e0       	ldi	r25, 0x00	; 0
        return WIFI_TIMEOUT;
    }

    return WIFI_OK;
}
    9508:	89 2f       	mov	r24, r25
    950a:	0f 90       	pop	r0
    950c:	0f 90       	pop	r0
    950e:	df 91       	pop	r29
    9510:	cf 91       	pop	r28
    9512:	1f 91       	pop	r17
    9514:	0f 91       	pop	r16
    9516:	08 95       	ret

00009518 <initWifi>:

const u16 bauds[] PROGMEM = {370,246,184,92,60,44,30};
u8 initWifi(){
    9518:	1f 93       	push	r17
    951a:	cf 93       	push	r28
    951c:	df 93       	push	r29
    s8 i = 0;
    u8 result;
    UCSR0A=(1<<U2X0); // double speed mode
    951e:	82 e0       	ldi	r24, 0x02	; 2
    9520:	80 93 c0 00 	sts	0x00C0, r24
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    9524:	86 e0       	ldi	r24, 0x06	; 6
    9526:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    952a:	88 e1       	ldi	r24, 0x18	; 24
    952c:	80 93 c1 00 	sts	0x00C1, r24
    return WIFI_OK;
}

const u16 bauds[] PROGMEM = {370,246,184,92,60,44,30};
u8 initWifi(){
    s8 i = 0;
    9530:	d0 e0       	ldi	r29, 0x00	; 0
    u8 result;
    UCSR0A=(1<<U2X0); // double speed mode
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    do {
        UBRR0L=pgm_read_byte(((u8*) &(bauds[i % 7])));
    9532:	17 e0       	ldi	r17, 0x07	; 7
    9534:	8d 2f       	mov	r24, r29
    9536:	61 2f       	mov	r22, r17
    9538:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodqi4>
    953c:	e9 2f       	mov	r30, r25
    953e:	ee 0f       	add	r30, r30
    9540:	ff 0b       	sbc	r31, r31
    9542:	e7 57       	subi	r30, 0x77	; 119
    9544:	fd 4f       	sbci	r31, 0xFD	; 253
    9546:	84 91       	lpm	r24, Z
    9548:	80 93 c4 00 	sts	0x00C4, r24
        UBRR0H=pgm_read_byte(((u8*) &(bauds[i % 7]))+1);
    954c:	31 96       	adiw	r30, 0x01	; 1
    954e:	e4 91       	lpm	r30, Z
    9550:	e0 93 c5 00 	sts	0x00C5, r30
        WaitVsync(1);
    9554:	81 e0       	ldi	r24, 0x01	; 1
    9556:	90 e0       	ldi	r25, 0x00	; 0
    9558:	0e 94 0a 49 	call	0x9214	; 0x9214 <WaitVsync>
        result = wifiRequestPT(PSTR("AT\r\n"),PSTR("OK\r\n"), 30); 
    955c:	4e e1       	ldi	r20, 0x1E	; 30
    955e:	50 e0       	ldi	r21, 0x00	; 0
    9560:	64 e8       	ldi	r22, 0x84	; 132
    9562:	72 e0       	ldi	r23, 0x02	; 2
    9564:	8f e7       	ldi	r24, 0x7F	; 127
    9566:	92 e0       	ldi	r25, 0x02	; 2
    9568:	0e 94 6d 4a 	call	0x94da	; 0x94da <wifiRequestPT>
    956c:	c8 2f       	mov	r28, r24
    956e:	df 5f       	subi	r29, 0xFF	; 255
        i++;
    } while ((result != WIFI_OK) && (i < 14));
    9570:	88 23       	and	r24, r24
    9572:	19 f0       	breq	.+6      	; 0x957a <initWifi+0x62>
    9574:	de 30       	cpi	r29, 0x0E	; 14
    9576:	f1 f6       	brne	.-68     	; 0x9534 <initWifi+0x1c>
    9578:	19 c0       	rjmp	.+50     	; 0x95ac <initWifi+0x94>
    if (result == WIFI_OK) {
        result = wifiRequestPT(PSTR("AT+UART_CUR=14400,8,1,0,0\r\n"),PSTR("OK\r\n"), 2*60); 
    957a:	48 e7       	ldi	r20, 0x78	; 120
    957c:	50 e0       	ldi	r21, 0x00	; 0
    957e:	6a e7       	ldi	r22, 0x7A	; 122
    9580:	72 e0       	ldi	r23, 0x02	; 2
    9582:	8e e5       	ldi	r24, 0x5E	; 94
    9584:	92 e0       	ldi	r25, 0x02	; 2
    9586:	0e 94 6d 4a 	call	0x94da	; 0x94da <wifiRequestPT>
    958a:	c8 2f       	mov	r28, r24
        if (result == WIFI_OK) {
    958c:	81 11       	cpse	r24, r1
    958e:	0e c0       	rjmp	.+28     	; 0x95ac <initWifi+0x94>
            UBRR0L=pgm_read_byte(((u8*) &(bauds[1])));
    9590:	eb e8       	ldi	r30, 0x8B	; 139
    9592:	f2 e0       	ldi	r31, 0x02	; 2
    9594:	e4 91       	lpm	r30, Z
    9596:	e0 93 c4 00 	sts	0x00C4, r30
            UBRR0H=pgm_read_byte(((u8*) &(bauds[1]))+1); 
    959a:	ec e8       	ldi	r30, 0x8C	; 140
    959c:	f2 e0       	ldi	r31, 0x02	; 2
    959e:	e4 91       	lpm	r30, Z
    95a0:	e0 93 c5 00 	sts	0x00C5, r30
            WaitVsync(1);
    95a4:	81 e0       	ldi	r24, 0x01	; 1
    95a6:	90 e0       	ldi	r25, 0x00	; 0
    95a8:	0e 94 0a 49 	call	0x9214	; 0x9214 <WaitVsync>
        }
    }
    return result;
}
    95ac:	8c 2f       	mov	r24, r28
    95ae:	df 91       	pop	r29
    95b0:	cf 91       	pop	r28
    95b2:	1f 91       	pop	r17
    95b4:	08 95       	ret

000095b6 <cleanupWifi>:
	float pos_x;
	float pos_y;
	u8 zero;
} NetMessage;

u8 cleanupWifi() {
    95b6:	cf 93       	push	r28
	u8 counter = 0;
	wifiSendP(PSTR("+++"));
    95b8:	8a e5       	ldi	r24, 0x5A	; 90
    95ba:	92 e0       	ldi	r25, 0x02	; 2
    95bc:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	while(counter++ < 5) WaitUs(65535);
    95c0:	c6 e0       	ldi	r28, 0x06	; 6
    95c2:	c1 50       	subi	r28, 0x01	; 1
    95c4:	29 f0       	breq	.+10     	; 0x95d0 <cleanupWifi+0x1a>
    95c6:	8f ef       	ldi	r24, 0xFF	; 255
    95c8:	9f ef       	ldi	r25, 0xFF	; 255
    95ca:	0e 94 65 3a 	call	0x74ca	; 0x74ca <WaitUs>
    95ce:	f9 cf       	rjmp	.-14     	; 0x95c2 <cleanupWifi+0xc>
	InitUartTxBuffer();
    95d0:	0e 94 5d 3c 	call	0x78ba	; 0x78ba <InitUartTxBuffer>
	InitUartRxBuffer();
    95d4:	0e 94 44 3c 	call	0x7888	; 0x7888 <InitUartRxBuffer>
	wifiRequestPT(PSTR("AT+CIPMODE=0\r\n"),PSTR("OK\r\n"), 1*60);
    95d8:	4c e3       	ldi	r20, 0x3C	; 60
    95da:	50 e0       	ldi	r21, 0x00	; 0
    95dc:	65 e5       	ldi	r22, 0x55	; 85
    95de:	72 e0       	ldi	r23, 0x02	; 2
    95e0:	86 e4       	ldi	r24, 0x46	; 70
    95e2:	92 e0       	ldi	r25, 0x02	; 2
    95e4:	0e 94 6d 4a 	call	0x94da	; 0x94da <wifiRequestPT>
	wifiRequestPT(PSTR("AT+CIPCLOSE\r\n"),PSTR("OK\r\n"), 1*60);
    95e8:	4c e3       	ldi	r20, 0x3C	; 60
    95ea:	50 e0       	ldi	r21, 0x00	; 0
    95ec:	61 e4       	ldi	r22, 0x41	; 65
    95ee:	72 e0       	ldi	r23, 0x02	; 2
    95f0:	83 e3       	ldi	r24, 0x33	; 51
    95f2:	92 e0       	ldi	r25, 0x02	; 2
    95f4:	0e 94 6d 4a 	call	0x94da	; 0x94da <wifiRequestPT>
	wifiRequestPT(PSTR("AT+CWQAP\r\n"),PSTR("OK\r\n"), 1*60);
    95f8:	4c e3       	ldi	r20, 0x3C	; 60
    95fa:	50 e0       	ldi	r21, 0x00	; 0
    95fc:	6e e2       	ldi	r22, 0x2E	; 46
    95fe:	72 e0       	ldi	r23, 0x02	; 2
    9600:	83 e2       	ldi	r24, 0x23	; 35
    9602:	92 e0       	ldi	r25, 0x02	; 2
    9604:	0e 94 6d 4a 	call	0x94da	; 0x94da <wifiRequestPT>
	return WIFI_OK;
}
    9608:	80 e0       	ldi	r24, 0x00	; 0
    960a:	cf 91       	pop	r28
    960c:	08 95       	ret

0000960e <activateNet>:

u8 activateNet() {
	cleanupWifi();
    960e:	0e 94 db 4a 	call	0x95b6	; 0x95b6 <cleanupWifi>
	InitUartTxBuffer();
    9612:	0e 94 5d 3c 	call	0x78ba	; 0x78ba <InitUartTxBuffer>
	InitUartRxBuffer();
    9616:	0e 94 44 3c 	call	0x7888	; 0x7888 <InitUartRxBuffer>
	return initWifi();
    961a:	0c 94 8c 4a 	jmp	0x9518	; 0x9518 <initWifi>

0000961e <sendNetMessage>:
}

u8 sendNetMessage(NetMessage* msg) {
	return wifiSendBinary((char *) msg, sizeof(*msg));
    961e:	6c e1       	ldi	r22, 0x1C	; 28
    9620:	0c 94 9c 49 	jmp	0x9338	; 0x9338 <wifiSendBinary>

00009624 <getNetMessage>:
}

u8 getNetMessage(NetMessage* msg) {
	return wifiGetIfAvailable(msg, sizeof(*msg));
    9624:	6c e1       	ldi	r22, 0x1C	; 28
    9626:	0c 94 b3 49 	jmp	0x9366	; 0x9366 <wifiGetIfAvailable>

0000962a <hostNetGame>:
}

u8 hostNetGame(char* ssid) {
    962a:	ef 92       	push	r14
    962c:	ff 92       	push	r15
    962e:	0f 93       	push	r16
    9630:	1f 93       	push	r17
    9632:	cf 93       	push	r28
    9634:	df 93       	push	r29
    9636:	cd b7       	in	r28, 0x3d	; 61
    9638:	de b7       	in	r29, 0x3e	; 62
    963a:	c0 54       	subi	r28, 0x40	; 64
    963c:	d1 09       	sbc	r29, r1
    963e:	0f b6       	in	r0, 0x3f	; 63
    9640:	f8 94       	cli
    9642:	de bf       	out	0x3e, r29	; 62
    9644:	0f be       	out	0x3f, r0	; 63
    9646:	cd bf       	out	0x3d, r28	; 61
    9648:	8c 01       	movw	r16, r24
	char buf[64];
	
	// Set SoftAP mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=2\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    964a:	6e e1       	ldi	r22, 0x1E	; 30
    964c:	72 e0       	ldi	r23, 0x02	; 2
    964e:	8c e0       	ldi	r24, 0x0C	; 12
    9650:	92 e0       	ldi	r25, 0x02	; 2
    9652:	0e 94 49 4a 	call	0x9492	; 0x9492 <wifiRequestP>
    9656:	81 11       	cpse	r24, r1
    9658:	42 c0       	rjmp	.+132    	; 0x96de <hostNetGame+0xb4>
	// Set SopftAP IP address
	if (wifiRequestP(PSTR("AT+CIPAP_CUR=\"192.168.4.1\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    965a:	67 e0       	ldi	r22, 0x07	; 7
    965c:	72 e0       	ldi	r23, 0x02	; 2
    965e:	8a ee       	ldi	r24, 0xEA	; 234
    9660:	91 e0       	ldi	r25, 0x01	; 1
    9662:	0e 94 49 4a 	call	0x9492	; 0x9492 <wifiRequestP>
    9666:	81 11       	cpse	r24, r1
    9668:	3a c0       	rjmp	.+116    	; 0x96de <hostNetGame+0xb4>
	// Get SoftAP MAC address...
	wifiSendP(PSTR("AT+CIPAPMAC_CUR?\r\n"));
    966a:	87 ed       	ldi	r24, 0xD7	; 215
    966c:	91 e0       	ldi	r25, 0x01	; 1
    966e:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
    9672:	ce 01       	movw	r24, r28
    9674:	01 96       	adiw	r24, 0x01	; 1
    9676:	7c 01       	movw	r14, r24
    9678:	bc 01       	movw	r22, r24
    967a:	82 ed       	ldi	r24, 0xD2	; 210
    967c:	91 e0       	ldi	r25, 0x01	; 1
    967e:	0e 94 da 49 	call	0x93b4	; 0x93b4 <wifiGetPB>
    9682:	81 30       	cpi	r24, 0x01	; 1
    9684:	91 f0       	breq	.+36     	; 0x96aa <hostNetGame+0x80>
		ssid[0] = 'T';
    9686:	84 e5       	ldi	r24, 0x54	; 84
    9688:	f8 01       	movw	r30, r16
    968a:	80 83       	st	Z, r24
		ssid[1] = 'F';
    968c:	86 e4       	ldi	r24, 0x46	; 70
    968e:	81 83       	std	Z+1, r24	; 0x01
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9690:	8c a5       	ldd	r24, Y+44	; 0x2c
    9692:	82 83       	std	Z+2, r24	; 0x02
		   ssid[idx++] = buf[i+1];
    9694:	8d a5       	ldd	r24, Y+45	; 0x2d
    9696:	83 83       	std	Z+3, r24	; 0x03
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9698:	8f a5       	ldd	r24, Y+47	; 0x2f
    969a:	84 83       	std	Z+4, r24	; 0x04
		   ssid[idx++] = buf[i+1];
    969c:	88 a9       	ldd	r24, Y+48	; 0x30
    969e:	85 83       	std	Z+5, r24	; 0x05
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    96a0:	8a a9       	ldd	r24, Y+50	; 0x32
    96a2:	86 83       	std	Z+6, r24	; 0x06
		   ssid[idx++] = buf[i+1];
    96a4:	8b a9       	ldd	r24, Y+51	; 0x33
    96a6:	87 83       	std	Z+7, r24	; 0x07
		}
		ssid[8] = 0;
    96a8:	10 86       	std	Z+8, r1	; 0x08
	}
	ssid = strupr(ssid);
    96aa:	c8 01       	movw	r24, r16
    96ac:	0e 94 84 74 	call	0xe908	; 0xe908 <strupr>
	sprintf(buf, "AT+CWSAP_CUR=\"%s\",\"T4nkFuN3t\",5,3,1\r\n", ssid);
    96b0:	9f 93       	push	r25
    96b2:	8f 93       	push	r24
    96b4:	8d e0       	ldi	r24, 0x0D	; 13
    96b6:	91 e0       	ldi	r25, 0x01	; 1
    96b8:	9f 93       	push	r25
    96ba:	8f 93       	push	r24
    96bc:	ff 92       	push	r15
    96be:	ef 92       	push	r14
    96c0:	0e 94 8e 74 	call	0xe91c	; 0xe91c <sprintf>
	
	// Setup local access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    96c4:	6d ec       	ldi	r22, 0xCD	; 205
    96c6:	71 e0       	ldi	r23, 0x01	; 1
    96c8:	c7 01       	movw	r24, r14
    96ca:	0e 94 5b 4a 	call	0x94b6	; 0x94b6 <wifiRequest>
    96ce:	0f 90       	pop	r0
    96d0:	0f 90       	pop	r0
    96d2:	0f 90       	pop	r0
    96d4:	0f 90       	pop	r0
    96d6:	0f 90       	pop	r0
    96d8:	0f 90       	pop	r0
    96da:	88 23       	and	r24, r24
    96dc:	11 f0       	breq	.+4      	; 0x96e2 <hostNetGame+0xb8>
    96de:	11 e0       	ldi	r17, 0x01	; 1
    96e0:	15 c0       	rjmp	.+42     	; 0x970c <hostNetGame+0xe2>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.2\",1001,2233,0\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    96e2:	68 ec       	ldi	r22, 0xC8	; 200
    96e4:	71 e0       	ldi	r23, 0x01	; 1
    96e6:	8a e9       	ldi	r24, 0x9A	; 154
    96e8:	91 e0       	ldi	r25, 0x01	; 1
    96ea:	0e 94 49 4a 	call	0x9492	; 0x9492 <wifiRequestP>
    96ee:	81 11       	cpse	r24, r1
    96f0:	f6 cf       	rjmp	.-20     	; 0x96de <hostNetGame+0xb4>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    96f2:	65 e9       	ldi	r22, 0x95	; 149
    96f4:	71 e0       	ldi	r23, 0x01	; 1
    96f6:	86 e8       	ldi	r24, 0x86	; 134
    96f8:	91 e0       	ldi	r25, 0x01	; 1
    96fa:	0e 94 49 4a 	call	0x9492	; 0x9492 <wifiRequestP>
    96fe:	18 2f       	mov	r17, r24
    9700:	81 11       	cpse	r24, r1
    9702:	ed cf       	rjmp	.-38     	; 0x96de <hostNetGame+0xb4>
	wifiSendP(PSTR("AT+CIPSEND\r\n"));
    9704:	89 e7       	ldi	r24, 0x79	; 121
    9706:	91 e0       	ldi	r25, 0x01	; 1
    9708:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	return WIFI_OK;
}
    970c:	81 2f       	mov	r24, r17
    970e:	c0 5c       	subi	r28, 0xC0	; 192
    9710:	df 4f       	sbci	r29, 0xFF	; 255
    9712:	0f b6       	in	r0, 0x3f	; 63
    9714:	f8 94       	cli
    9716:	de bf       	out	0x3e, r29	; 62
    9718:	0f be       	out	0x3f, r0	; 63
    971a:	cd bf       	out	0x3d, r28	; 61
    971c:	df 91       	pop	r29
    971e:	cf 91       	pop	r28
    9720:	1f 91       	pop	r17
    9722:	0f 91       	pop	r16
    9724:	ff 90       	pop	r15
    9726:	ef 90       	pop	r14
    9728:	08 95       	ret

0000972a <joinNetGame>:

u8 joinNetGame(char* ssid) {
    972a:	0f 93       	push	r16
    972c:	1f 93       	push	r17
    972e:	cf 93       	push	r28
    9730:	df 93       	push	r29
    9732:	cd b7       	in	r28, 0x3d	; 61
    9734:	de b7       	in	r29, 0x3e	; 62
    9736:	c0 54       	subi	r28, 0x40	; 64
    9738:	d1 09       	sbc	r29, r1
    973a:	0f b6       	in	r0, 0x3f	; 63
    973c:	f8 94       	cli
    973e:	de bf       	out	0x3e, r29	; 62
    9740:	0f be       	out	0x3f, r0	; 63
    9742:	cd bf       	out	0x3d, r28	; 61
	char buf[64];
	
	sprintf(buf, "AT+CWJAP_CUR=\"%s\",\"T4nkFuN3t\"\r\n", ssid);
    9744:	9f 93       	push	r25
    9746:	8f 93       	push	r24
    9748:	83 e3       	ldi	r24, 0x33	; 51
    974a:	91 e0       	ldi	r25, 0x01	; 1
    974c:	9f 93       	push	r25
    974e:	8f 93       	push	r24
    9750:	8e 01       	movw	r16, r28
    9752:	0f 5f       	subi	r16, 0xFF	; 255
    9754:	1f 4f       	sbci	r17, 0xFF	; 255
    9756:	1f 93       	push	r17
    9758:	0f 93       	push	r16
    975a:	0e 94 8e 74 	call	0xe91c	; 0xe91c <sprintf>
	
	// Set Station mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    975e:	64 e7       	ldi	r22, 0x74	; 116
    9760:	71 e0       	ldi	r23, 0x01	; 1
    9762:	82 e6       	ldi	r24, 0x62	; 98
    9764:	91 e0       	ldi	r25, 0x01	; 1
    9766:	0e 94 49 4a 	call	0x9492	; 0x9492 <wifiRequestP>
    976a:	0f 90       	pop	r0
    976c:	0f 90       	pop	r0
    976e:	0f 90       	pop	r0
    9770:	0f 90       	pop	r0
    9772:	0f 90       	pop	r0
    9774:	0f 90       	pop	r0
    9776:	88 23       	and	r24, r24
    9778:	11 f0       	breq	.+4      	; 0x977e <joinNetGame+0x54>
    977a:	11 e0       	ldi	r17, 0x01	; 1
    977c:	24 c0       	rjmp	.+72     	; 0x97c6 <joinNetGame+0x9c>
	// Connect to access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    977e:	6d e5       	ldi	r22, 0x5D	; 93
    9780:	71 e0       	ldi	r23, 0x01	; 1
    9782:	c8 01       	movw	r24, r16
    9784:	0e 94 5b 4a 	call	0x94b6	; 0x94b6 <wifiRequest>
    9788:	81 11       	cpse	r24, r1
    978a:	f7 cf       	rjmp	.-18     	; 0x977a <joinNetGame+0x50>
	// Set station IP address
	if (wifiRequestP(PSTR("AT+CIPSTA_CUR=\"192.168.4.2\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    978c:	68 e5       	ldi	r22, 0x58	; 88
    978e:	71 e0       	ldi	r23, 0x01	; 1
    9790:	8a e3       	ldi	r24, 0x3A	; 58
    9792:	91 e0       	ldi	r25, 0x01	; 1
    9794:	0e 94 49 4a 	call	0x9492	; 0x9492 <wifiRequestP>
    9798:	81 11       	cpse	r24, r1
    979a:	ef cf       	rjmp	.-34     	; 0x977a <joinNetGame+0x50>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.1\",2233,1001\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    979c:	65 e3       	ldi	r22, 0x35	; 53
    979e:	71 e0       	ldi	r23, 0x01	; 1
    97a0:	89 e0       	ldi	r24, 0x09	; 9
    97a2:	91 e0       	ldi	r25, 0x01	; 1
    97a4:	0e 94 49 4a 	call	0x9492	; 0x9492 <wifiRequestP>
    97a8:	81 11       	cpse	r24, r1
    97aa:	e7 cf       	rjmp	.-50     	; 0x977a <joinNetGame+0x50>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    97ac:	64 e0       	ldi	r22, 0x04	; 4
    97ae:	71 e0       	ldi	r23, 0x01	; 1
    97b0:	85 ef       	ldi	r24, 0xF5	; 245
    97b2:	90 e0       	ldi	r25, 0x00	; 0
    97b4:	0e 94 49 4a 	call	0x9492	; 0x9492 <wifiRequestP>
    97b8:	18 2f       	mov	r17, r24
    97ba:	81 11       	cpse	r24, r1
    97bc:	de cf       	rjmp	.-68     	; 0x977a <joinNetGame+0x50>
	wifiSendP(PSTR("AT+CIPSEND\r\n"));
    97be:	88 ee       	ldi	r24, 0xE8	; 232
    97c0:	90 e0       	ldi	r25, 0x00	; 0
    97c2:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	return WIFI_OK;
}
    97c6:	81 2f       	mov	r24, r17
    97c8:	c0 5c       	subi	r28, 0xC0	; 192
    97ca:	df 4f       	sbci	r29, 0xFF	; 255
    97cc:	0f b6       	in	r0, 0x3f	; 63
    97ce:	f8 94       	cli
    97d0:	de bf       	out	0x3e, r29	; 62
    97d2:	0f be       	out	0x3f, r0	; 63
    97d4:	cd bf       	out	0x3d, r28	; 61
    97d6:	df 91       	pop	r29
    97d8:	cf 91       	pop	r28
    97da:	1f 91       	pop	r17
    97dc:	0f 91       	pop	r16
    97de:	08 95       	ret

000097e0 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    97e0:	fc 01       	movw	r30, r24
	anim->looped = 0;
    97e2:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    97e4:	93 81       	ldd	r25, Z+3	; 0x03
    97e6:	9f 5f       	subi	r25, 0xFF	; 255
    97e8:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    97ea:	22 81       	ldd	r18, Z+2	; 0x02
    97ec:	80 81       	ld	r24, Z
    97ee:	92 17       	cp	r25, r18
    97f0:	38 f4       	brcc	.+14     	; 0x9800 <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    97f2:	e8 0f       	add	r30, r24
    97f4:	f1 1d       	adc	r31, r1
    97f6:	e8 0f       	add	r30, r24
    97f8:	f1 1d       	adc	r31, r1
    97fa:	86 81       	ldd	r24, Z+6	; 0x06
    97fc:	97 81       	ldd	r25, Z+7	; 0x07
    97fe:	08 95       	ret
	}
	anim->frame_count = 0;
    9800:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9802:	90 e0       	ldi	r25, 0x00	; 0
    9804:	01 96       	adiw	r24, 0x01	; 1
    9806:	61 81       	ldd	r22, Z+1	; 0x01
    9808:	70 e0       	ldi	r23, 0x00	; 0
    980a:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    980e:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9810:	81 11       	cpse	r24, r1
    9812:	02 c0       	rjmp	.+4      	; 0x9818 <LBGetNextFrame+0x38>
    9814:	21 e0       	ldi	r18, 0x01	; 1
    9816:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    9818:	99 27       	eor	r25, r25
    981a:	03 96       	adiw	r24, 0x03	; 3
    981c:	88 0f       	add	r24, r24
    981e:	99 1f       	adc	r25, r25
    9820:	e8 0f       	add	r30, r24
    9822:	f9 1f       	adc	r31, r25
    9824:	80 81       	ld	r24, Z
    9826:	91 81       	ldd	r25, Z+1	; 0x01
}
    9828:	08 95       	ret

0000982a <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    982a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    982c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    982e:	93 81       	ldd	r25, Z+3	; 0x03
    9830:	9f 5f       	subi	r25, 0xFF	; 255
    9832:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9834:	22 81       	ldd	r18, Z+2	; 0x02
    9836:	80 81       	ld	r24, Z
    9838:	92 17       	cp	r25, r18
    983a:	e0 f0       	brcs	.+56     	; 0x9874 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    983c:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    983e:	95 81       	ldd	r25, Z+5	; 0x05
    9840:	99 23       	and	r25, r25
    9842:	49 f0       	breq	.+18     	; 0x9856 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    9844:	81 50       	subi	r24, 0x01	; 1
    9846:	10 f0       	brcs	.+4      	; 0x984c <LBGetNextFrameReverse+0x22>
    9848:	80 83       	st	Z, r24
    984a:	13 c0       	rjmp	.+38     	; 0x9872 <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    984c:	10 82       	st	Z, r1
			anim->looped = 1;
    984e:	81 e0       	ldi	r24, 0x01	; 1
    9850:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    9852:	15 82       	std	Z+5, r1	; 0x05
    9854:	0e c0       	rjmp	.+28     	; 0x9872 <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9856:	21 81       	ldd	r18, Z+1	; 0x01
    9858:	90 e0       	ldi	r25, 0x00	; 0
    985a:	01 96       	adiw	r24, 0x01	; 1
    985c:	62 2f       	mov	r22, r18
    985e:	70 e0       	ldi	r23, 0x00	; 0
    9860:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    9864:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    9866:	81 11       	cpse	r24, r1
    9868:	04 c0       	rjmp	.+8      	; 0x9872 <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    986a:	81 e0       	ldi	r24, 0x01	; 1
    986c:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    986e:	21 50       	subi	r18, 0x01	; 1
    9870:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    9872:	80 81       	ld	r24, Z
    9874:	e8 0f       	add	r30, r24
    9876:	f1 1d       	adc	r31, r1
    9878:	e8 0f       	add	r30, r24
    987a:	f1 1d       	adc	r31, r1
    987c:	86 81       	ldd	r24, Z+6	; 0x06
    987e:	97 81       	ldd	r25, Z+7	; 0x07
}
    9880:	08 95       	ret

00009882 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9882:	0f 93       	push	r16
    9884:	1f 93       	push	r17
    9886:	cf 93       	push	r28
    9888:	df 93       	push	r29
    988a:	1f 92       	push	r1
    988c:	cd b7       	in	r28, 0x3d	; 61
    988e:	de b7       	in	r29, 0x3e	; 62
    9890:	8c 01       	movw	r16, r24
	p->held = ReadJoypad(index);
    9892:	86 2f       	mov	r24, r22
    9894:	69 83       	std	Y+1, r22	; 0x01
    9896:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <ReadJoypad>
    989a:	d8 01       	movw	r26, r16
    989c:	15 96       	adiw	r26, 0x05	; 5
    989e:	9c 93       	st	X, r25
    98a0:	8e 93       	st	-X, r24
    98a2:	14 97       	sbiw	r26, 0x04	; 4
    98a4:	69 81       	ldd	r22, Y+1	; 0x01
    98a6:	e6 2f       	mov	r30, r22
    98a8:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    98aa:	00 97       	sbiw	r24, 0x00	; 0
    98ac:	51 f0       	breq	.+20     	; 0x98c2 <LBGetJoyPadState+0x40>
    98ae:	df 01       	movw	r26, r30
    98b0:	aa 0f       	add	r26, r26
    98b2:	bb 1f       	adc	r27, r27
    98b4:	a4 5a       	subi	r26, 0xA4	; 164
    98b6:	b5 4f       	sbci	r27, 0xF5	; 245
    98b8:	2d 91       	ld	r18, X+
    98ba:	3c 91       	ld	r19, X
    98bc:	82 17       	cp	r24, r18
    98be:	93 07       	cpc	r25, r19
    98c0:	21 f0       	breq	.+8      	; 0x98ca <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    98c2:	d8 01       	movw	r26, r16
    98c4:	16 96       	adiw	r26, 0x06	; 6
    98c6:	1c 92       	st	X, r1
    98c8:	07 c0       	rjmp	.+14     	; 0x98d8 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    98ca:	d8 01       	movw	r26, r16
    98cc:	16 96       	adiw	r26, 0x06	; 6
    98ce:	2c 91       	ld	r18, X
    98d0:	16 97       	sbiw	r26, 0x06	; 6
    98d2:	2f 5f       	subi	r18, 0xFF	; 255
    98d4:	16 96       	adiw	r26, 0x06	; 6
    98d6:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    98d8:	ee 0f       	add	r30, r30
    98da:	ff 1f       	adc	r31, r31
    98dc:	e4 5a       	subi	r30, 0xA4	; 164
    98de:	f5 4f       	sbci	r31, 0xF5	; 245
    98e0:	20 81       	ld	r18, Z
    98e2:	31 81       	ldd	r19, Z+1	; 0x01
    98e4:	a9 01       	movw	r20, r18
    98e6:	40 95       	com	r20
    98e8:	50 95       	com	r21
    98ea:	48 23       	and	r20, r24
    98ec:	59 23       	and	r21, r25
    98ee:	d8 01       	movw	r26, r16
    98f0:	11 96       	adiw	r26, 0x01	; 1
    98f2:	5c 93       	st	X, r21
    98f4:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    98f6:	ac 01       	movw	r20, r24
    98f8:	40 95       	com	r20
    98fa:	50 95       	com	r21
    98fc:	24 23       	and	r18, r20
    98fe:	35 23       	and	r19, r21
    9900:	13 96       	adiw	r26, 0x03	; 3
    9902:	3c 93       	st	X, r19
    9904:	2e 93       	st	-X, r18
    9906:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9908:	91 83       	std	Z+1, r25	; 0x01
    990a:	80 83       	st	Z, r24
}
    990c:	0f 90       	pop	r0
    990e:	df 91       	pop	r29
    9910:	cf 91       	pop	r28
    9912:	1f 91       	pop	r17
    9914:	0f 91       	pop	r16
    9916:	08 95       	ret

00009918 <LBPrintStr>:
	}
}
*/

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    9918:	af 92       	push	r10
    991a:	bf 92       	push	r11
    991c:	cf 92       	push	r12
    991e:	df 92       	push	r13
    9920:	ef 92       	push	r14
    9922:	ff 92       	push	r15
    9924:	0f 93       	push	r16
    9926:	1f 93       	push	r17
    9928:	cf 93       	push	r28
    992a:	df 93       	push	r29
    992c:	1f 92       	push	r1
    992e:	cd b7       	in	r28, 0x3d	; 61
    9930:	de b7       	in	r29, 0x3e	; 62
    9932:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    9934:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    9936:	c6 2e       	mov	r12, r22
    9938:	d1 2c       	mov	r13, r1
    993a:	90 e0       	ldi	r25, 0x00	; 0
    993c:	5c 01       	movw	r10, r24
    993e:	a4 1a       	sub	r10, r20
    9940:	b5 0a       	sbc	r11, r21
    9942:	80 2f       	mov	r24, r16
    9944:	8e 19       	sub	r24, r14
}
*/

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    9946:	82 17       	cp	r24, r18
    9948:	60 f4       	brcc	.+24     	; 0x9962 <LBPrintStr+0x4a>
    994a:	c5 01       	movw	r24, r10
    994c:	80 0f       	add	r24, r16
    994e:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    9950:	f8 01       	movw	r30, r16
    9952:	41 91       	ld	r20, Z+
    9954:	8f 01       	movw	r16, r30
    9956:	b6 01       	movw	r22, r12
    9958:	29 83       	std	Y+1, r18	; 0x01
    995a:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
    995e:	29 81       	ldd	r18, Y+1	; 0x01
    9960:	f0 cf       	rjmp	.-32     	; 0x9942 <LBPrintStr+0x2a>
	}
}
    9962:	0f 90       	pop	r0
    9964:	df 91       	pop	r29
    9966:	cf 91       	pop	r28
    9968:	1f 91       	pop	r17
    996a:	0f 91       	pop	r16
    996c:	ff 90       	pop	r15
    996e:	ef 90       	pop	r14
    9970:	df 90       	pop	r13
    9972:	cf 90       	pop	r12
    9974:	bf 90       	pop	r11
    9976:	af 90       	pop	r10
    9978:	08 95       	ret

0000997a <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    997a:	af 92       	push	r10
    997c:	cf 92       	push	r12
    997e:	ef 92       	push	r14
    9980:	ff 92       	push	r15
    9982:	0f 93       	push	r16
    9984:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9986:	70 e0       	ldi	r23, 0x00	; 0
    9988:	f1 2c       	mov	r15, r1
    998a:	fb 01       	movw	r30, r22
    998c:	e2 0f       	add	r30, r18
    998e:	f1 1d       	adc	r31, r1
    9990:	ee 16       	cp	r14, r30
    9992:	ff 06       	cpc	r15, r31
    9994:	a4 f4       	brge	.+40     	; 0x99be <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9996:	ea 0c       	add	r14, r10
    9998:	f1 1c       	adc	r15, r1
    999a:	6e 15       	cp	r22, r14
    999c:	7f 05       	cpc	r23, r15
    999e:	7c f4       	brge	.+30     	; 0x99be <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    99a0:	28 2f       	mov	r18, r24
    99a2:	30 e0       	ldi	r19, 0x00	; 0
    99a4:	10 e0       	ldi	r17, 0x00	; 0
    99a6:	c9 01       	movw	r24, r18
    99a8:	84 0f       	add	r24, r20
    99aa:	91 1d       	adc	r25, r1
    99ac:	08 17       	cp	r16, r24
    99ae:	19 07       	cpc	r17, r25
    99b0:	34 f4       	brge	.+12     	; 0x99be <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    99b2:	0c 0d       	add	r16, r12
    99b4:	11 1d       	adc	r17, r1
    99b6:	81 e0       	ldi	r24, 0x01	; 1
    99b8:	20 17       	cp	r18, r16
    99ba:	31 07       	cpc	r19, r17
    99bc:	0c f0       	brlt	.+2      	; 0x99c0 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    99be:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    99c0:	1f 91       	pop	r17
    99c2:	0f 91       	pop	r16
    99c4:	ff 90       	pop	r15
    99c6:	ef 90       	pop	r14
    99c8:	cf 90       	pop	r12
    99ca:	af 90       	pop	r10
    99cc:	08 95       	ret

000099ce <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    99ce:	2f 92       	push	r2
    99d0:	3f 92       	push	r3
    99d2:	4f 92       	push	r4
    99d4:	5f 92       	push	r5
    99d6:	6f 92       	push	r6
    99d8:	7f 92       	push	r7
    99da:	8f 92       	push	r8
    99dc:	9f 92       	push	r9
    99de:	af 92       	push	r10
    99e0:	bf 92       	push	r11
    99e2:	cf 92       	push	r12
    99e4:	df 92       	push	r13
    99e6:	ef 92       	push	r14
    99e8:	ff 92       	push	r15
    99ea:	0f 93       	push	r16
    99ec:	1f 93       	push	r17
    99ee:	cf 93       	push	r28
    99f0:	df 93       	push	r29
    99f2:	00 d0       	rcall	.+0      	; 0x99f4 <LBLineIntersect+0x26>
    99f4:	00 d0       	rcall	.+0      	; 0x99f6 <LBLineIntersect+0x28>
    99f6:	cd b7       	in	r28, 0x3d	; 61
    99f8:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    99fa:	f1 2c       	mov	r15, r1
    99fc:	8a 2c       	mov	r8, r10
    99fe:	91 2c       	mov	r9, r1
    9a00:	8e 18       	sub	r8, r14
    9a02:	9f 08       	sbc	r9, r15
    9a04:	a8 2e       	mov	r10, r24
    9a06:	b1 2c       	mov	r11, r1
    9a08:	24 2e       	mov	r2, r20
    9a0a:	31 2c       	mov	r3, r1
    9a0c:	2a 18       	sub	r2, r10
    9a0e:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    9a10:	10 e0       	ldi	r17, 0x00	; 0
    9a12:	d1 2c       	mov	r13, r1
    9a14:	c0 1a       	sub	r12, r16
    9a16:	d1 0a       	sbc	r13, r17
    9a18:	46 2f       	mov	r20, r22
    9a1a:	50 e0       	ldi	r21, 0x00	; 0
    9a1c:	5c 83       	std	Y+4, r21	; 0x04
    9a1e:	4b 83       	std	Y+3, r20	; 0x03
    9a20:	82 2f       	mov	r24, r18
    9a22:	90 e0       	ldi	r25, 0x00	; 0
    9a24:	9a 83       	std	Y+2, r25	; 0x02
    9a26:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9a28:	82 9c       	mul	r8, r2
    9a2a:	90 01       	movw	r18, r0
    9a2c:	83 9c       	mul	r8, r3
    9a2e:	30 0d       	add	r19, r0
    9a30:	92 9c       	mul	r9, r2
    9a32:	30 0d       	add	r19, r0
    9a34:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    9a36:	ca 01       	movw	r24, r20
    9a38:	e9 81       	ldd	r30, Y+1	; 0x01
    9a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    9a3c:	8e 1b       	sub	r24, r30
    9a3e:	9f 0b       	sbc	r25, r31
    9a40:	c8 9e       	mul	r12, r24
    9a42:	b0 01       	movw	r22, r0
    9a44:	c9 9e       	mul	r12, r25
    9a46:	70 0d       	add	r23, r0
    9a48:	d8 9e       	mul	r13, r24
    9a4a:	70 0d       	add	r23, r0
    9a4c:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9a4e:	62 0f       	add	r22, r18
    9a50:	73 1f       	adc	r23, r19
    9a52:	88 27       	eor	r24, r24
    9a54:	77 fd       	sbrc	r23, 7
    9a56:	80 95       	com	r24
    9a58:	98 2f       	mov	r25, r24
    9a5a:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    9a5e:	2b 01       	movw	r4, r22
    9a60:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9a62:	20 e0       	ldi	r18, 0x00	; 0
    9a64:	30 e0       	ldi	r19, 0x00	; 0
    9a66:	a9 01       	movw	r20, r18
    9a68:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    9a6c:	88 23       	and	r24, r24
    9a6e:	09 f4       	brne	.+2      	; 0x9a72 <LBLineIntersect+0xa4>
    9a70:	6c c0       	rjmp	.+216    	; 0x9b4a <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a72:	4b 81       	ldd	r20, Y+3	; 0x03
    9a74:	5c 81       	ldd	r21, Y+4	; 0x04
    9a76:	4e 19       	sub	r20, r14
    9a78:	5f 09       	sbc	r21, r15
    9a7a:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9a7c:	0a 19       	sub	r16, r10
    9a7e:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a80:	c4 9e       	mul	r12, r20
    9a82:	c0 01       	movw	r24, r0
    9a84:	c5 9e       	mul	r12, r21
    9a86:	90 0d       	add	r25, r0
    9a88:	d4 9e       	mul	r13, r20
    9a8a:	90 0d       	add	r25, r0
    9a8c:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9a8e:	80 9e       	mul	r8, r16
    9a90:	b0 01       	movw	r22, r0
    9a92:	81 9e       	mul	r8, r17
    9a94:	70 0d       	add	r23, r0
    9a96:	90 9e       	mul	r9, r16
    9a98:	70 0d       	add	r23, r0
    9a9a:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a9c:	68 0f       	add	r22, r24
    9a9e:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9aa0:	88 27       	eor	r24, r24
    9aa2:	77 fd       	sbrc	r23, 7
    9aa4:	80 95       	com	r24
    9aa6:	98 2f       	mov	r25, r24
    9aa8:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9aac:	a3 01       	movw	r20, r6
    9aae:	92 01       	movw	r18, r4
    9ab0:	0e 94 be 72 	call	0xe57c	; 0xe57c <__divsf3>
    9ab4:	4b 01       	movw	r8, r22
    9ab6:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9ab8:	20 e0       	ldi	r18, 0x00	; 0
    9aba:	30 e0       	ldi	r19, 0x00	; 0
    9abc:	a9 01       	movw	r20, r18
    9abe:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    9ac2:	87 fd       	sbrc	r24, 7
    9ac4:	42 c0       	rjmp	.+132    	; 0x9b4a <LBLineIntersect+0x17c>
    9ac6:	20 e0       	ldi	r18, 0x00	; 0
    9ac8:	30 e0       	ldi	r19, 0x00	; 0
    9aca:	40 e8       	ldi	r20, 0x80	; 128
    9acc:	5f e3       	ldi	r21, 0x3F	; 63
    9ace:	c5 01       	movw	r24, r10
    9ad0:	b4 01       	movw	r22, r8
    9ad2:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    9ad6:	18 16       	cp	r1, r24
    9ad8:	c4 f1       	brlt	.+112    	; 0x9b4a <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9ada:	2e 9c       	mul	r2, r14
    9adc:	b0 01       	movw	r22, r0
    9ade:	2f 9c       	mul	r2, r15
    9ae0:	70 0d       	add	r23, r0
    9ae2:	3e 9c       	mul	r3, r14
    9ae4:	70 0d       	add	r23, r0
    9ae6:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    9ae8:	29 81       	ldd	r18, Y+1	; 0x01
    9aea:	3a 81       	ldd	r19, Y+2	; 0x02
    9aec:	8b 81       	ldd	r24, Y+3	; 0x03
    9aee:	9c 81       	ldd	r25, Y+4	; 0x04
    9af0:	28 1b       	sub	r18, r24
    9af2:	39 0b       	sbc	r19, r25
    9af4:	20 9f       	mul	r18, r16
    9af6:	c0 01       	movw	r24, r0
    9af8:	21 9f       	mul	r18, r17
    9afa:	90 0d       	add	r25, r0
    9afc:	30 9f       	mul	r19, r16
    9afe:	90 0d       	add	r25, r0
    9b00:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9b02:	68 0f       	add	r22, r24
    9b04:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    9b06:	88 27       	eor	r24, r24
    9b08:	77 fd       	sbrc	r23, 7
    9b0a:	80 95       	com	r24
    9b0c:	98 2f       	mov	r25, r24
    9b0e:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9b12:	a3 01       	movw	r20, r6
    9b14:	92 01       	movw	r18, r4
    9b16:	0e 94 be 72 	call	0xe57c	; 0xe57c <__divsf3>
    9b1a:	6b 01       	movw	r12, r22
    9b1c:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9b1e:	20 e0       	ldi	r18, 0x00	; 0
    9b20:	30 e0       	ldi	r19, 0x00	; 0
    9b22:	a9 01       	movw	r20, r18
    9b24:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    9b28:	87 fd       	sbrc	r24, 7
    9b2a:	0f c0       	rjmp	.+30     	; 0x9b4a <LBLineIntersect+0x17c>
    9b2c:	11 e0       	ldi	r17, 0x01	; 1
    9b2e:	20 e0       	ldi	r18, 0x00	; 0
    9b30:	30 e0       	ldi	r19, 0x00	; 0
    9b32:	40 e8       	ldi	r20, 0x80	; 128
    9b34:	5f e3       	ldi	r21, 0x3F	; 63
    9b36:	c7 01       	movw	r24, r14
    9b38:	b6 01       	movw	r22, r12
    9b3a:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    9b3e:	18 16       	cp	r1, r24
    9b40:	0c f0       	brlt	.+2      	; 0x9b44 <LBLineIntersect+0x176>
    9b42:	10 e0       	ldi	r17, 0x00	; 0
    9b44:	81 e0       	ldi	r24, 0x01	; 1
    9b46:	81 27       	eor	r24, r17
    9b48:	01 c0       	rjmp	.+2      	; 0x9b4c <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9b4a:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    9b4c:	0f 90       	pop	r0
    9b4e:	0f 90       	pop	r0
    9b50:	0f 90       	pop	r0
    9b52:	0f 90       	pop	r0
    9b54:	df 91       	pop	r29
    9b56:	cf 91       	pop	r28
    9b58:	1f 91       	pop	r17
    9b5a:	0f 91       	pop	r16
    9b5c:	ff 90       	pop	r15
    9b5e:	ef 90       	pop	r14
    9b60:	df 90       	pop	r13
    9b62:	cf 90       	pop	r12
    9b64:	bf 90       	pop	r11
    9b66:	af 90       	pop	r10
    9b68:	9f 90       	pop	r9
    9b6a:	8f 90       	pop	r8
    9b6c:	7f 90       	pop	r7
    9b6e:	6f 90       	pop	r6
    9b70:	5f 90       	pop	r5
    9b72:	4f 90       	pop	r4
    9b74:	3f 90       	pop	r3
    9b76:	2f 90       	pop	r2
    9b78:	08 95       	ret

00009b7a <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9b7a:	1f 93       	push	r17
    9b7c:	cf 93       	push	r28
    9b7e:	df 93       	push	r29
    9b80:	1f 92       	push	r1
    9b82:	cd b7       	in	r28, 0x3d	; 61
    9b84:	de b7       	in	r29, 0x3e	; 62
    9b86:	18 2f       	mov	r17, r24
    u8 tmp = GetPrngNumber(0) % 256;
    9b88:	80 e0       	ldi	r24, 0x00	; 0
    9b8a:	90 e0       	ldi	r25, 0x00	; 0
    9b8c:	69 83       	std	Y+1, r22	; 0x01
    9b8e:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <GetPrngNumber>
    9b92:	99 27       	eor	r25, r25
    return ((tmp) % (to - from + 1)) + from;
    9b94:	69 81       	ldd	r22, Y+1	; 0x01
    9b96:	70 e0       	ldi	r23, 0x00	; 0
    9b98:	61 1b       	sub	r22, r17
    9b9a:	71 09       	sbc	r23, r1
    9b9c:	6f 5f       	subi	r22, 0xFF	; 255
    9b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    9ba0:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
}
    9ba4:	81 0f       	add	r24, r17
    9ba6:	0f 90       	pop	r0
    9ba8:	df 91       	pop	r29
    9baa:	cf 91       	pop	r28
    9bac:	1f 91       	pop	r17
    9bae:	08 95       	ret

00009bb0 <LBWaitSeconds>:
	WaitUs(micro_seconds);
#endif
}

void LBWaitSeconds(u8 seconds)
{
    9bb0:	cf 93       	push	r28
    9bb2:	df 93       	push	r29
    9bb4:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9bb6:	c0 e0       	ldi	r28, 0x00	; 0
    9bb8:	cd 17       	cp	r28, r29
    9bba:	31 f0       	breq	.+12     	; 0x9bc8 <LBWaitSeconds+0x18>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    9bbc:	8f ef       	ldi	r24, 0xFF	; 255
    9bbe:	9f ef       	ldi	r25, 0xFF	; 255
    9bc0:	0e 94 65 3a 	call	0x74ca	; 0x74ca <WaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9bc4:	cf 5f       	subi	r28, 0xFF	; 255
    9bc6:	f8 cf       	rjmp	.-16     	; 0x9bb8 <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    9bc8:	df 91       	pop	r29
    9bca:	cf 91       	pop	r28
    9bcc:	08 95       	ret

00009bce <LBHideAllSprites>:

void LBHideAllSprites()
{
    9bce:	e8 ea       	ldi	r30, 0xA8	; 168
    9bd0:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
    9bd2:	80 ef       	ldi	r24, 0xF0	; 240
    9bd4:	80 83       	st	Z, r24
    9bd6:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    9bd8:	94 e0       	ldi	r25, 0x04	; 4
    9bda:	e0 3d       	cpi	r30, 0xD0	; 208
    9bdc:	f9 07       	cpc	r31, r25
    9bde:	d1 f7       	brne	.-12     	; 0x9bd4 <LBHideAllSprites+0x6>
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
	}
}
    9be0:	08 95       	ret

00009be2 <LBPlaySound>:


void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
    9be2:	82 2f       	mov	r24, r18
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    9be4:	26 30       	cpi	r18, 0x06	; 6
    9be6:	11 f4       	brne	.+4      	; 0x9bec <LBPlaySound+0xa>
    9be8:	0c 94 6e 49 	jmp	0x92dc	; 0x92dc <LBPlaySound.part.6>
    9bec:	46 2b       	or	r20, r22
	else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
    9bee:	40 fd       	sbrc	r20, 0
    9bf0:	04 c0       	rjmp	.+8      	; 0x9bfa <LBPlaySound+0x18>
    9bf2:	41 e0       	ldi	r20, 0x01	; 1
    9bf4:	6f ef       	ldi	r22, 0xFF	; 255
    9bf6:	0c 94 e3 3d 	jmp	0x7bc6	; 0x7bc6 <TriggerFx>
    9bfa:	08 95       	ret

00009bfc <init_scores>:
HandleSelectState p2s;

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    9bfc:	2b e8       	ldi	r18, 0x8B	; 139
    9bfe:	30 e0       	ldi	r19, 0x00	; 0
    9c00:	fc 01       	movw	r30, r24
    9c02:	21 93       	st	Z+, r18
    9c04:	31 93       	st	Z+, r19
    9c06:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    9c08:	4e e1       	ldi	r20, 0x1E	; 30
    9c0a:	50 e0       	ldi	r21, 0x00	; 0
    9c0c:	6c ef       	ldi	r22, 0xFC	; 252
    9c0e:	72 e0       	ldi	r23, 0x02	; 2
    9c10:	0c 94 70 74 	jmp	0xe8e0	; 0xe8e0 <memcpy_P>

00009c14 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    9c14:	2a e8       	ldi	r18, 0x8A	; 138
    9c16:	30 e0       	ldi	r19, 0x00	; 0
    9c18:	fc 01       	movw	r30, r24
    9c1a:	21 93       	st	Z+, r18
    9c1c:	31 93       	st	Z+, r19
    9c1e:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    9c20:	4e e1       	ldi	r20, 0x1E	; 30
    9c22:	50 e0       	ldi	r21, 0x00	; 0
    9c24:	6a e1       	ldi	r22, 0x1A	; 26
    9c26:	73 e0       	ldi	r23, 0x03	; 3
    9c28:	0c 94 70 74 	jmp	0xe8e0	; 0xe8e0 <memcpy_P>

00009c2c <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    9c2c:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    9c2e:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9c30:	16 86       	std	Z+14, r1	; 0x0e
    9c32:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    9c34:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    9c36:	73 e0       	ldi	r23, 0x03	; 3
    9c38:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9c3a:	65 e0       	ldi	r22, 0x05	; 5
    9c3c:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    9c3e:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    9c40:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    9c42:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9c44:	46 eb       	ldi	r20, 0xB6	; 182
    9c46:	5a e6       	ldi	r21, 0x6A	; 106
    9c48:	50 87       	std	Z+8, r21	; 0x08
    9c4a:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9c4c:	23 eb       	ldi	r18, 0xB3	; 179
    9c4e:	3a e6       	ldi	r19, 0x6A	; 106
    9c50:	32 87       	std	Z+10, r19	; 0x0a
    9c52:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9c54:	80 eb       	ldi	r24, 0xB0	; 176
    9c56:	9a e6       	ldi	r25, 0x6A	; 106
    9c58:	94 87       	std	Z+12, r25	; 0x0c
    9c5a:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9c5c:	14 8e       	std	Z+28, r1	; 0x1c
    9c5e:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    9c60:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    9c62:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9c64:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    9c66:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    9c68:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    9c6a:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9c6c:	56 8b       	std	Z+22, r21	; 0x16
    9c6e:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9c70:	30 8f       	std	Z+24, r19	; 0x18
    9c72:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9c74:	92 8f       	std	Z+26, r25	; 0x1a
    9c76:	81 8f       	std	Z+25, r24	; 0x19
    9c78:	08 95       	ret

00009c7a <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    9c7a:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9c7c:	15 86       	std	Z+13, r1	; 0x0d
    9c7e:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9c80:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    9c82:	83 e0       	ldi	r24, 0x03	; 3
    9c84:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    9c86:	8e e1       	ldi	r24, 0x1E	; 30
    9c88:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9c8a:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9c8c:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9c8e:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    9c90:	8c e8       	ldi	r24, 0x8C	; 140
    9c92:	9a e6       	ldi	r25, 0x6A	; 106
    9c94:	97 83       	std	Z+7, r25	; 0x07
    9c96:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    9c98:	89 e8       	ldi	r24, 0x89	; 137
    9c9a:	9a e6       	ldi	r25, 0x6A	; 106
    9c9c:	91 87       	std	Z+9, r25	; 0x09
    9c9e:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    9ca0:	86 e8       	ldi	r24, 0x86	; 134
    9ca2:	9a e6       	ldi	r25, 0x6A	; 106
    9ca4:	93 87       	std	Z+11, r25	; 0x0b
    9ca6:	82 87       	std	Z+10, r24	; 0x0a
    9ca8:	08 95       	ret

00009caa <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    9caa:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9cac:	15 86       	std	Z+13, r1	; 0x0d
    9cae:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9cb0:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    9cb2:	82 e0       	ldi	r24, 0x02	; 2
    9cb4:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    9cb6:	8c e3       	ldi	r24, 0x3C	; 60
    9cb8:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9cba:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9cbc:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9cbe:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    9cc0:	8a e1       	ldi	r24, 0x1A	; 26
    9cc2:	98 e6       	ldi	r25, 0x68	; 104
    9cc4:	97 83       	std	Z+7, r25	; 0x07
    9cc6:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    9cc8:	80 e5       	ldi	r24, 0x50	; 80
    9cca:	99 e6       	ldi	r25, 0x69	; 105
    9ccc:	91 87       	std	Z+9, r25	; 0x09
    9cce:	80 87       	std	Z+8, r24	; 0x08
    9cd0:	08 95       	ret

00009cd2 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9cd2:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9cd4:	88 e7       	ldi	r24, 0x78	; 120
    9cd6:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9cd8:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9cda:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    9cdc:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    9cde:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    9ce0:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    9ce2:	84 e0       	ldi	r24, 0x04	; 4
    9ce4:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9ce6:	66 23       	and	r22, r22
    9ce8:	11 f0       	breq	.+4      	; 0x9cee <init_shot_state+0x1c>
    9cea:	85 e0       	ldi	r24, 0x05	; 5
    9cec:	01 c0       	rjmp	.+2      	; 0x9cf0 <init_shot_state+0x1e>
    9cee:	81 e0       	ldi	r24, 0x01	; 1
    9cf0:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    9cf2:	80 e0       	ldi	r24, 0x00	; 0
    9cf4:	90 e0       	ldi	r25, 0x00	; 0
    9cf6:	a0 e7       	ldi	r26, 0x70	; 112
    9cf8:	b3 e4       	ldi	r27, 0x43	; 67
    9cfa:	83 83       	std	Z+3, r24	; 0x03
    9cfc:	94 83       	std	Z+4, r25	; 0x04
    9cfe:	a5 83       	std	Z+5, r26	; 0x05
    9d00:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    9d02:	17 82       	std	Z+7, r1	; 0x07
    9d04:	10 86       	std	Z+8, r1	; 0x08
    9d06:	11 86       	std	Z+9, r1	; 0x09
    9d08:	12 86       	std	Z+10, r1	; 0x0a
    9d0a:	08 95       	ret

00009d0c <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9d0c:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    9d0e:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    9d10:	82 e0       	ldi	r24, 0x02	; 2
    9d12:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9d14:	85 e0       	ldi	r24, 0x05	; 5
    9d16:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    9d18:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    9d1a:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    9d1c:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    9d1e:	61 11       	cpse	r22, r1
    9d20:	03 c0       	rjmp	.+6      	; 0x9d28 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    9d22:	84 e2       	ldi	r24, 0x24	; 36
    9d24:	91 e3       	ldi	r25, 0x31	; 49
    9d26:	13 c0       	rjmp	.+38     	; 0x9d4e <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    9d28:	61 30       	cpi	r22, 0x01	; 1
    9d2a:	79 f4       	brne	.+30     	; 0x9d4a <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    9d2c:	81 e2       	ldi	r24, 0x21	; 33
    9d2e:	91 e3       	ldi	r25, 0x31	; 49
    9d30:	97 8b       	std	Z+23, r25	; 0x17
    9d32:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    9d34:	8e e1       	ldi	r24, 0x1E	; 30
    9d36:	91 e3       	ldi	r25, 0x31	; 49
    9d38:	91 8f       	std	Z+25, r25	; 0x19
    9d3a:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    9d3c:	8b e1       	ldi	r24, 0x1B	; 27
    9d3e:	91 e3       	ldi	r25, 0x31	; 49
    9d40:	93 a3       	std	Z+35, r25	; 0x23
    9d42:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    9d44:	88 e1       	ldi	r24, 0x18	; 24
    9d46:	91 e3       	ldi	r25, 0x31	; 49
    9d48:	08 c0       	rjmp	.+16     	; 0x9d5a <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    9d4a:	8c e0       	ldi	r24, 0x0C	; 12
    9d4c:	91 e3       	ldi	r25, 0x31	; 49
    9d4e:	97 8b       	std	Z+23, r25	; 0x17
    9d50:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    9d52:	91 8f       	std	Z+25, r25	; 0x19
    9d54:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    9d56:	93 a3       	std	Z+35, r25	; 0x23
    9d58:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    9d5a:	95 a3       	std	Z+37, r25	; 0x25
    9d5c:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    9d5e:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    9d60:	82 e0       	ldi	r24, 0x02	; 2
    9d62:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9d64:	85 e0       	ldi	r24, 0x05	; 5
    9d66:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    9d68:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    9d6a:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    9d6c:	11 a2       	std	Z+33, r1	; 0x21
    9d6e:	08 95       	ret

00009d70 <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    9d70:	0f 93       	push	r16
    9d72:	1f 93       	push	r17
    9d74:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    9d76:	85 e0       	ldi	r24, 0x05	; 5
    9d78:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    9d7a:	83 e0       	ldi	r24, 0x03	; 3
    9d7c:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    9d7e:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    9d80:	8a e5       	ldi	r24, 0x5A	; 90
    9d82:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    9d84:	43 83       	std	Z+3, r20	; 0x03
    9d86:	54 83       	std	Z+4, r21	; 0x04
    9d88:	65 83       	std	Z+5, r22	; 0x05
    9d8a:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    9d8c:	07 83       	std	Z+7, r16	; 0x07
    9d8e:	10 87       	std	Z+8, r17	; 0x08
    9d90:	21 87       	std	Z+9, r18	; 0x09
    9d92:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    9d94:	8a ef       	ldi	r24, 0xFA	; 250
    9d96:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    9d98:	82 e0       	ldi	r24, 0x02	; 2
    9d9a:	84 87       	std	Z+12, r24	; 0x0c
		t->shot[i].shared.recoiled = 0;
    9d9c:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    9d9e:	40 e0       	ldi	r20, 0x00	; 0
    9da0:	50 e0       	ldi	r21, 0x00	; 0
    9da2:	60 e7       	ldi	r22, 0x70	; 112
    9da4:	73 e4       	ldi	r23, 0x43	; 67
    9da6:	47 87       	std	Z+15, r20	; 0x0f
    9da8:	50 8b       	std	Z+16, r21	; 0x10
    9daa:	61 8b       	std	Z+17, r22	; 0x11
    9dac:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    9dae:	13 8a       	std	Z+19, r1	; 0x13
    9db0:	14 8a       	std	Z+20, r1	; 0x14
    9db2:	15 8a       	std	Z+21, r1	; 0x15
    9db4:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    9db6:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 100;
    9db8:	94 e6       	ldi	r25, 0x64	; 100
    9dba:	93 8f       	std	Z+27, r25	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    9dbc:	87 8b       	std	Z+23, r24	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    9dbe:	84 e0       	ldi	r24, 0x04	; 4
    9dc0:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    9dc2:	81 e0       	ldi	r24, 0x01	; 1
    9dc4:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    9dc6:	62 e0       	ldi	r22, 0x02	; 2
    9dc8:	cf 01       	movw	r24, r30
    9dca:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    9dcc:	1f 91       	pop	r17
    9dce:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    9dd0:	0c 94 86 4e 	jmp	0x9d0c	; 0x9d0c <set_shot_animations>

00009dd4 <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    9dd4:	0f 93       	push	r16
    9dd6:	1f 93       	push	r17
    9dd8:	cf 93       	push	r28
    9dda:	df 93       	push	r29
    9ddc:	ec 01       	movw	r28, r24
	p->grace_frame = FRAMES_PER_GRACE;
    9dde:	88 e7       	ldi	r24, 0x78	; 120
    9de0:	8e 8b       	std	Y+22, r24	; 0x16
	p->score = 0;
    9de2:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    9de4:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    9de6:	18 82       	st	Y, r1
	p->shared.speed = 0;
    9de8:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    9dea:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    9dec:	82 e3       	ldi	r24, 0x32	; 50
    9dee:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    9df0:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    9df2:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    9df4:	1d 8a       	std	Y+21, r1	; 0x15

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    9df6:	fe 01       	movw	r30, r28
    9df8:	e8 5a       	subi	r30, 0xA8	; 168
    9dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    9dfc:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    9dfe:	31 96       	adiw	r30, 0x01	; 1
    9e00:	91 e0       	ldi	r25, 0x01	; 1
    9e02:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9e04:	31 96       	adiw	r30, 0x01	; 1
    9e06:	85 e0       	ldi	r24, 0x05	; 5
    9e08:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9e0a:	31 96       	adiw	r30, 0x01	; 1
    9e0c:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    9e0e:	31 96       	adiw	r30, 0x01	; 1
    9e10:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    9e12:	31 96       	adiw	r30, 0x01	; 1
    9e14:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    9e16:	31 96       	adiw	r30, 0x01	; 1
    9e18:	71 83       	std	Z+1, r23	; 0x01
    9e1a:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9e1c:	36 96       	adiw	r30, 0x06	; 6
    9e1e:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9e20:	31 96       	adiw	r30, 0x01	; 1
    9e22:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9e24:	31 96       	adiw	r30, 0x01	; 1
    9e26:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    9e28:	31 96       	adiw	r30, 0x01	; 1
    9e2a:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    9e2c:	31 96       	adiw	r30, 0x01	; 1
    9e2e:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    9e30:	31 96       	adiw	r30, 0x01	; 1
    9e32:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9e34:	31 96       	adiw	r30, 0x01	; 1
    9e36:	51 83       	std	Z+1, r21	; 0x01
    9e38:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9e3a:	36 96       	adiw	r30, 0x06	; 6
    9e3c:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9e3e:	31 96       	adiw	r30, 0x01	; 1
    9e40:	93 e0       	ldi	r25, 0x03	; 3
    9e42:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9e44:	31 96       	adiw	r30, 0x01	; 1
    9e46:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9e48:	31 96       	adiw	r30, 0x01	; 1
    9e4a:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    9e4c:	31 96       	adiw	r30, 0x01	; 1
    9e4e:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    9e50:	31 96       	adiw	r30, 0x01	; 1
    9e52:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9e54:	31 96       	adiw	r30, 0x01	; 1
    9e56:	83 e3       	ldi	r24, 0x33	; 51
    9e58:	91 e3       	ldi	r25, 0x31	; 49
    9e5a:	91 83       	std	Z+1, r25	; 0x01
    9e5c:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9e5e:	32 96       	adiw	r30, 0x02	; 2
    9e60:	8d e2       	ldi	r24, 0x2D	; 45
    9e62:	91 e3       	ldi	r25, 0x31	; 49
    9e64:	91 83       	std	Z+1, r25	; 0x01
    9e66:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    9e68:	32 96       	adiw	r30, 0x02	; 2
    9e6a:	87 e2       	ldi	r24, 0x27	; 39
    9e6c:	91 e3       	ldi	r25, 0x31	; 49
    9e6e:	91 83       	std	Z+1, r25	; 0x01
    9e70:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9e72:	19 8a       	std	Y+17, r1	; 0x11
	p->old_active_shots = 0;
    9e74:	1a 8a       	std	Y+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9e76:	8e 01       	movw	r16, r28
    9e78:	00 5d       	subi	r16, 0xD0	; 208
    9e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    9e7c:	60 e0       	ldi	r22, 0x00	; 0
    9e7e:	c8 01       	movw	r24, r16
    9e80:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9e84:	60 e0       	ldi	r22, 0x00	; 0
    9e86:	c8 01       	movw	r24, r16
    9e88:	0e 94 86 4e 	call	0x9d0c	; 0x9d0c <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9e8c:	1a 8e       	std	Y+26, r1	; 0x1a
	p->goal_direction = 0;
    9e8e:	1e 8e       	std	Y+30, r1	; 0x1e
    9e90:	1d 8e       	std	Y+29, r1	; 0x1d
	p->goal = 0;
    9e92:	1b a2       	std	Y+35, r1	; 0x23
	p->goal_reached = 0;
    9e94:	1c a2       	std	Y+36, r1	; 0x24
	p->old_x = 0;
    9e96:	18 a6       	std	Y+40, r1	; 0x28
    9e98:	19 a6       	std	Y+41, r1	; 0x29
    9e9a:	1a a6       	std	Y+42, r1	; 0x2a
    9e9c:	1b a6       	std	Y+43, r1	; 0x2b
	p->old_y = 0;
    9e9e:	1c a6       	std	Y+44, r1	; 0x2c
    9ea0:	1d a6       	std	Y+45, r1	; 0x2d
    9ea2:	1e a6       	std	Y+46, r1	; 0x2e
    9ea4:	1f a6       	std	Y+47, r1	; 0x2f
	p->deadlock_count_x = 0;
    9ea6:	18 a2       	std	Y+32, r1	; 0x20
    9ea8:	1f 8e       	std	Y+31, r1	; 0x1f
	p->deadlock_count_y = 0;
    9eaa:	1a a2       	std	Y+34, r1	; 0x22
    9eac:	19 a2       	std	Y+33, r1	; 0x21
}
    9eae:	df 91       	pop	r29
    9eb0:	cf 91       	pop	r28
    9eb2:	1f 91       	pop	r17
    9eb4:	0f 91       	pop	r16
    9eb6:	08 95       	ret

00009eb8 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    9eb8:	fc 01       	movw	r30, r24
    9eba:	11 8a       	std	Z+17, r1	; 0x11
	player->old_active_shots = 0;
    9ebc:	12 8a       	std	Z+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    9ebe:	60 e0       	ldi	r22, 0x00	; 0
    9ec0:	c0 96       	adiw	r24, 0x30	; 48
    9ec2:	0c 94 69 4e 	jmp	0x9cd2	; 0x9cd2 <init_shot_state>

00009ec6 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    9ec6:	e3 ea       	ldi	r30, 0xA3	; 163
    9ec8:	fb e0       	ldi	r31, 0x0B	; 11
    9eca:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    9ecc:	13 8a       	std	Z+19, r1	; 0x13
	game.paused = 0;
    9ece:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    9ed0:	14 86       	std	Z+12, r1	; 0x0c
    9ed2:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    9ed4:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    9ed6:	10 8a       	std	Z+16, r1	; 0x10
    9ed8:	17 86       	std	Z+15, r1	; 0x0f
	game.boss_fight_joypad = 0;
    9eda:	12 8a       	std	Z+18, r1	; 0x12
    9edc:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    9ede:	82 e0       	ldi	r24, 0x02	; 2
    9ee0:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    9ee2:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    9ee4:	84 e1       	ldi	r24, 0x14	; 20
    9ee6:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    9ee8:	17 82       	std	Z+7, r1	; 0x07
	game.demo_counter = 0;
    9eea:	12 86       	std	Z+10, r1	; 0x0a
    9eec:	11 86       	std	Z+9, r1	; 0x09
	game.demo_choice = 0;
    9eee:	10 86       	std	Z+8, r1	; 0x08
	game.tank_rank_counter = 0;
    9ef0:	16 86       	std	Z+14, r1	; 0x0e
    9ef2:	15 86       	std	Z+13, r1	; 0x0d
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    9ef4:	45 e4       	ldi	r20, 0x45	; 69
    9ef6:	51 e3       	ldi	r21, 0x31	; 49
    9ef8:	6b e4       	ldi	r22, 0x4B	; 75
    9efa:	71 e3       	ldi	r23, 0x31	; 49
    9efc:	85 ed       	ldi	r24, 0xD5	; 213
    9efe:	9b e0       	ldi	r25, 0x0B	; 11
    9f00:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    9f04:	49 e3       	ldi	r20, 0x39	; 57
    9f06:	51 e3       	ldi	r21, 0x31	; 49
    9f08:	6f e3       	ldi	r22, 0x3F	; 63
    9f0a:	71 e3       	ldi	r23, 0x31	; 49
    9f0c:	87 e4       	ldi	r24, 0x47	; 71
    9f0e:	9f e0       	ldi	r25, 0x0F	; 15
    9f10:	0c 94 ea 4e 	jmp	0x9dd4	; 0x9dd4 <init_player>

00009f14 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    9f14:	cf 93       	push	r28
    9f16:	df 93       	push	r29
    9f18:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    9f1a:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    9f1c:	6b 89       	ldd	r22, Y+19	; 0x13
    9f1e:	70 e0       	ldi	r23, 0x00	; 0
    9f20:	80 e0       	ldi	r24, 0x00	; 0
    9f22:	90 e0       	ldi	r25, 0x00	; 0
    9f24:	0e 94 57 73 	call	0xe6ae	; 0xe6ae <__floatunsisf>
    9f28:	6b 83       	std	Y+3, r22	; 0x03
    9f2a:	7c 83       	std	Y+4, r23	; 0x04
    9f2c:	8d 83       	std	Y+5, r24	; 0x05
    9f2e:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    9f30:	6c 89       	ldd	r22, Y+20	; 0x14
    9f32:	70 e0       	ldi	r23, 0x00	; 0
    9f34:	80 e0       	ldi	r24, 0x00	; 0
    9f36:	90 e0       	ldi	r25, 0x00	; 0
    9f38:	0e 94 57 73 	call	0xe6ae	; 0xe6ae <__floatunsisf>
    9f3c:	6f 83       	std	Y+7, r22	; 0x07
    9f3e:	78 87       	std	Y+8, r23	; 0x08
    9f40:	89 87       	std	Y+9, r24	; 0x09
    9f42:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    9f44:	18 82       	st	Y, r1
	player->shared.speed = 0;
    9f46:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    9f48:	1a 82       	std	Y+2, r1	; 0x02
	player->tank_tactic = LBRandom(0, 2);
    9f4a:	62 e0       	ldi	r22, 0x02	; 2
    9f4c:	80 e0       	ldi	r24, 0x00	; 0
    9f4e:	0e 94 bd 4d 	call	0x9b7a	; 0x9b7a <LBRandom>
    9f52:	8b 8f       	std	Y+27, r24	; 0x1b
	player->shot_tactic = LBRandom(0, 2);
    9f54:	62 e0       	ldi	r22, 0x02	; 2
    9f56:	80 e0       	ldi	r24, 0x00	; 0
    9f58:	0e 94 bd 4d 	call	0x9b7a	; 0x9b7a <LBRandom>
    9f5c:	8c 8f       	std	Y+28, r24	; 0x1c
	
}
    9f5e:	df 91       	pop	r29
    9f60:	cf 91       	pop	r28
    9f62:	08 95       	ret

00009f64 <waitForVSync>:

void waitForVSync()
{
    ProcessSprites();
    9f64:	0e 94 00 47 	call	0x8e00	; 0x8e00 <ProcessSprites>
    WaitVsync(1);
    9f68:	81 e0       	ldi	r24, 0x01	; 1
    9f6a:	90 e0       	ldi	r25, 0x00	; 0
    9f6c:	0e 94 0a 49 	call	0x9214	; 0x9214 <WaitVsync>
    RestoreBackground();
    9f70:	0c 94 f1 37 	jmp	0x6fe2	; 0x6fe2 <RestoreBackground>

00009f74 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9f74:	cf 93       	push	r28
    9f76:	df 93       	push	r29
    9f78:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9f7a:	bc 01       	movw	r22, r24
    9f7c:	88 81       	ld	r24, Y
    9f7e:	99 81       	ldd	r25, Y+1	; 0x01
    9f80:	0e 94 f4 3b 	call	0x77e8	; 0x77e8 <EepromReadBlock>
	if (status == 0x03)
    9f84:	83 30       	cpi	r24, 0x03	; 3
    9f86:	29 f4       	brne	.+10     	; 0x9f92 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9f88:	ce 01       	movw	r24, r28
	}
}
    9f8a:	df 91       	pop	r29
    9f8c:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9f8e:	0c 94 aa 3b 	jmp	0x7754	; 0x7754 <EepromWriteBlock>
	}
}
    9f92:	df 91       	pop	r29
    9f94:	cf 91       	pop	r28
    9f96:	08 95       	ret

00009f98 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9f98:	61 e0       	ldi	r22, 0x01	; 1
    9f9a:	83 e0       	ldi	r24, 0x03	; 3
    9f9c:	0e 94 3b 49 	call	0x9276	; 0x9276 <FadeOut>
	ClearVram();
    9fa0:	0e 94 21 3a 	call	0x7442	; 0x7442 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9fa4:	60 e0       	ldi	r22, 0x00	; 0
    9fa6:	83 e0       	ldi	r24, 0x03	; 3
    9fa8:	0c 94 2f 49 	jmp	0x925e	; 0x925e <FadeIn>

00009fac <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9fac:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9fae:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    9fb0:	40 e0       	ldi	r20, 0x00	; 0
    9fb2:	67 e5       	ldi	r22, 0x57	; 87
    9fb4:	71 e3       	ldi	r23, 0x31	; 49
    9fb6:	8c 2f       	mov	r24, r28
    9fb8:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
    9fbc:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9fbe:	ca 30       	cpi	r28, 0x0A	; 10
    9fc0:	b9 f7       	brne	.-18     	; 0x9fb0 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9fc2:	cf 91       	pop	r28
    9fc4:	08 95       	ret

00009fc6 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9fc6:	8f 92       	push	r8
    9fc8:	9f 92       	push	r9
    9fca:	bf 92       	push	r11
    9fcc:	cf 92       	push	r12
    9fce:	df 92       	push	r13
    9fd0:	ef 92       	push	r14
    9fd2:	ff 92       	push	r15
    9fd4:	0f 93       	push	r16
    9fd6:	1f 93       	push	r17
    9fd8:	cf 93       	push	r28
    9fda:	df 93       	push	r29
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    9fdc:	90 91 e4 0b 	lds	r25, 0x0BE4
    9fe0:	80 91 56 0f 	lds	r24, 0x0F56
    9fe4:	98 17       	cp	r25, r24
    9fe6:	28 f4       	brcc	.+10     	; 0x9ff2 <save_score+0x2c>
	{
		p_win = &player2;
		p_lose = &player1;
    9fe8:	e5 ed       	ldi	r30, 0xD5	; 213
    9fea:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    9fec:	a7 e4       	ldi	r26, 0x47	; 71
    9fee:	bf e0       	ldi	r27, 0x0F	; 15
    9ff0:	04 c0       	rjmp	.+8      	; 0x9ffa <save_score+0x34>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9ff2:	e7 e4       	ldi	r30, 0x47	; 71
    9ff4:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9ff6:	a5 ed       	ldi	r26, 0xD5	; 213
    9ff8:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    9ffa:	1b 96       	adiw	r26, 0x0b	; 11
    9ffc:	1c 91       	ld	r17, X
    9ffe:	1b 97       	sbiw	r26, 0x0b	; 11
	save_score[1] = p_lose->handle_id;
    a000:	73 85       	ldd	r23, Z+11	; 0x0b
	save_score[2] = p_win->score;
    a002:	1f 96       	adiw	r26, 0x0f	; 15
    a004:	6c 91       	ld	r22, X
	save_score[3] = p_lose->score;
    a006:	57 85       	ldd	r21, Z+15	; 0x0f
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    a008:	41 e0       	ldi	r20, 0x01	; 1
    a00a:	80 91 a6 0b 	lds	r24, 0x0BA6
    a00e:	88 30       	cpi	r24, 0x08	; 8
    a010:	09 f0       	breq	.+2      	; 0xa014 <save_score+0x4e>
    a012:	40 e0       	ldi	r20, 0x00	; 0
	save_delta = p_win->score - p_lose->score;
    a014:	d6 2e       	mov	r13, r22
    a016:	d5 1a       	sub	r13, r21
    a018:	28 e5       	ldi	r18, 0x58	; 88
    a01a:	3b e0       	ldi	r19, 0x0B	; 11
    a01c:	89 e5       	ldi	r24, 0x59	; 89
    a01e:	9b e0       	ldi	r25, 0x0B	; 11
    a020:	ea e5       	ldi	r30, 0x5A	; 90
    a022:	fb e0       	ldi	r31, 0x0B	; 11
    a024:	cb e5       	ldi	r28, 0x5B	; 91
    a026:	db e0       	ldi	r29, 0x0B	; 11
    a028:	ac e5       	ldi	r26, 0x5C	; 92
    a02a:	8a 2e       	mov	r8, r26
    a02c:	ab e0       	ldi	r26, 0x0B	; 11
    a02e:	9a 2e       	mov	r9, r26
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    a030:	00 e0       	ldi	r16, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    a032:	00 23       	and	r16, r16
    a034:	a1 f0       	breq	.+40     	; 0xa05e <save_score+0x98>
		{
			memcpy(tmp_score, &scores.data[i], 5);
    a036:	d9 01       	movw	r26, r18
    a038:	0c 91       	ld	r16, X
    a03a:	dc 01       	movw	r26, r24
    a03c:	fc 90       	ld	r15, X
    a03e:	e0 80       	ld	r14, Z
    a040:	c8 80       	ld	r12, Y
    a042:	d4 01       	movw	r26, r8
    a044:	bc 90       	ld	r11, X
			memcpy(&scores.data[i], save_score, 5);
    a046:	d9 01       	movw	r26, r18
    a048:	1c 93       	st	X, r17
    a04a:	dc 01       	movw	r26, r24
    a04c:	7c 93       	st	X, r23
    a04e:	60 83       	st	Z, r22
    a050:	58 83       	st	Y, r21
    a052:	d4 01       	movw	r26, r8
    a054:	4c 93       	st	X, r20
			memcpy(save_score, tmp_score, 5);
    a056:	4b 2d       	mov	r20, r11
    a058:	5c 2d       	mov	r21, r12
    a05a:	b7 01       	movw	r22, r14
    a05c:	18 c0       	rjmp	.+48     	; 0xa08e <save_score+0xc8>
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    a05e:	f0 80       	ld	r15, Z
    a060:	e8 80       	ld	r14, Y
    a062:	cf 2c       	mov	r12, r15
    a064:	ce 18       	sub	r12, r14
			if (save_delta > cur_delta)
    a066:	cd 14       	cp	r12, r13
    a068:	a0 f4       	brcc	.+40     	; 0xa092 <save_score+0xcc>
			{
				memcpy(tmp_score, &scores.data[i], 5);
    a06a:	d9 01       	movw	r26, r18
    a06c:	0c 91       	ld	r16, X
    a06e:	dc 01       	movw	r26, r24
    a070:	cc 90       	ld	r12, X
    a072:	d4 01       	movw	r26, r8
    a074:	bc 90       	ld	r11, X
				memcpy(&scores.data[i], save_score, 5);
    a076:	d9 01       	movw	r26, r18
    a078:	1c 93       	st	X, r17
    a07a:	dc 01       	movw	r26, r24
    a07c:	7c 93       	st	X, r23
    a07e:	60 83       	st	Z, r22
    a080:	58 83       	st	Y, r21
    a082:	d4 01       	movw	r26, r8
    a084:	4c 93       	st	X, r20
				memcpy(save_score, tmp_score, 5);
    a086:	4b 2d       	mov	r20, r11
    a088:	5e 2d       	mov	r21, r14
    a08a:	6f 2d       	mov	r22, r15
    a08c:	7c 2d       	mov	r23, r12
    a08e:	10 2f       	mov	r17, r16
				saved = 1;
    a090:	01 e0       	ldi	r16, 0x01	; 1
    a092:	2b 5f       	subi	r18, 0xFB	; 251
    a094:	3f 4f       	sbci	r19, 0xFF	; 255
    a096:	05 96       	adiw	r24, 0x05	; 5
    a098:	35 96       	adiw	r30, 0x05	; 5
    a09a:	25 96       	adiw	r28, 0x05	; 5
    a09c:	b5 e0       	ldi	r27, 0x05	; 5
    a09e:	8b 0e       	add	r8, r27
    a0a0:	91 1c       	adc	r9, r1
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    a0a2:	ab e0       	ldi	r26, 0x0B	; 11
    a0a4:	e8 37       	cpi	r30, 0x78	; 120
    a0a6:	fa 07       	cpc	r31, r26
    a0a8:	21 f6       	brne	.-120    	; 0xa032 <save_score+0x6c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a0aa:	86 e5       	ldi	r24, 0x56	; 86
    a0ac:	9b e0       	ldi	r25, 0x0B	; 11
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    a0ae:	df 91       	pop	r29
    a0b0:	cf 91       	pop	r28
    a0b2:	1f 91       	pop	r17
    a0b4:	0f 91       	pop	r16
    a0b6:	ff 90       	pop	r15
    a0b8:	ef 90       	pop	r14
    a0ba:	df 90       	pop	r13
    a0bc:	cf 90       	pop	r12
    a0be:	bf 90       	pop	r11
    a0c0:	9f 90       	pop	r9
    a0c2:	8f 90       	pop	r8
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a0c4:	0c 94 aa 3b 	jmp	0x7754	; 0x7754 <EepromWriteBlock>

0000a0c8 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    a0c8:	0f 93       	push	r16
    a0ca:	1f 93       	push	r17
    a0cc:	cf 93       	push	r28
    a0ce:	df 93       	push	r29
    a0d0:	8c 01       	movw	r16, r24
    a0d2:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    a0d4:	88 81       	ld	r24, Y
    a0d6:	81 30       	cpi	r24, 0x01	; 1
    a0d8:	69 f1       	breq	.+90     	; 0xa134 <position_shot+0x6c>
    a0da:	98 f0       	brcs	.+38     	; 0xa102 <position_shot+0x3a>
    a0dc:	82 30       	cpi	r24, 0x02	; 2
    a0de:	f1 f1       	breq	.+124    	; 0xa15c <position_shot+0x94>
    a0e0:	83 30       	cpi	r24, 0x03	; 3
    a0e2:	09 f0       	breq	.+2      	; 0xa0e6 <position_shot+0x1e>
    a0e4:	59 c0       	rjmp	.+178    	; 0xa198 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    a0e6:	f8 01       	movw	r30, r16
    a0e8:	83 81       	ldd	r24, Z+3	; 0x03
    a0ea:	94 81       	ldd	r25, Z+4	; 0x04
    a0ec:	a5 81       	ldd	r26, Z+5	; 0x05
    a0ee:	b6 81       	ldd	r27, Z+6	; 0x06
    a0f0:	8b 83       	std	Y+3, r24	; 0x03
    a0f2:	9c 83       	std	Y+4, r25	; 0x04
    a0f4:	ad 83       	std	Y+5, r26	; 0x05
    a0f6:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    a0f8:	20 e0       	ldi	r18, 0x00	; 0
    a0fa:	30 e0       	ldi	r19, 0x00	; 0
    a0fc:	40 e8       	ldi	r20, 0x80	; 128
    a0fe:	50 e4       	ldi	r21, 0x40	; 64
    a100:	41 c0       	rjmp	.+130    	; 0xa184 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    a102:	20 e0       	ldi	r18, 0x00	; 0
    a104:	30 e0       	ldi	r19, 0x00	; 0
    a106:	40 e8       	ldi	r20, 0x80	; 128
    a108:	50 e4       	ldi	r21, 0x40	; 64
    a10a:	f8 01       	movw	r30, r16
    a10c:	63 81       	ldd	r22, Z+3	; 0x03
    a10e:	74 81       	ldd	r23, Z+4	; 0x04
    a110:	85 81       	ldd	r24, Z+5	; 0x05
    a112:	96 81       	ldd	r25, Z+6	; 0x06
    a114:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a118:	6b 83       	std	Y+3, r22	; 0x03
    a11a:	7c 83       	std	Y+4, r23	; 0x04
    a11c:	8d 83       	std	Y+5, r24	; 0x05
    a11e:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    a120:	f8 01       	movw	r30, r16
    a122:	87 81       	ldd	r24, Z+7	; 0x07
    a124:	90 85       	ldd	r25, Z+8	; 0x08
    a126:	a1 85       	ldd	r26, Z+9	; 0x09
    a128:	b2 85       	ldd	r27, Z+10	; 0x0a
    a12a:	8f 83       	std	Y+7, r24	; 0x07
    a12c:	98 87       	std	Y+8, r25	; 0x08
    a12e:	a9 87       	std	Y+9, r26	; 0x09
    a130:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    a132:	32 c0       	rjmp	.+100    	; 0xa198 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    a134:	20 e0       	ldi	r18, 0x00	; 0
    a136:	30 e0       	ldi	r19, 0x00	; 0
    a138:	40 e0       	ldi	r20, 0x00	; 0
    a13a:	51 e4       	ldi	r21, 0x41	; 65
    a13c:	f8 01       	movw	r30, r16
    a13e:	63 81       	ldd	r22, Z+3	; 0x03
    a140:	74 81       	ldd	r23, Z+4	; 0x04
    a142:	85 81       	ldd	r24, Z+5	; 0x05
    a144:	96 81       	ldd	r25, Z+6	; 0x06
    a146:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a14a:	6b 83       	std	Y+3, r22	; 0x03
    a14c:	7c 83       	std	Y+4, r23	; 0x04
    a14e:	8d 83       	std	Y+5, r24	; 0x05
    a150:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    a152:	20 e0       	ldi	r18, 0x00	; 0
    a154:	30 e0       	ldi	r19, 0x00	; 0
    a156:	40 e8       	ldi	r20, 0x80	; 128
    a158:	50 e4       	ldi	r21, 0x40	; 64
    a15a:	13 c0       	rjmp	.+38     	; 0xa182 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    a15c:	20 e0       	ldi	r18, 0x00	; 0
    a15e:	30 e0       	ldi	r19, 0x00	; 0
    a160:	40 e8       	ldi	r20, 0x80	; 128
    a162:	50 e4       	ldi	r21, 0x40	; 64
    a164:	f8 01       	movw	r30, r16
    a166:	63 81       	ldd	r22, Z+3	; 0x03
    a168:	74 81       	ldd	r23, Z+4	; 0x04
    a16a:	85 81       	ldd	r24, Z+5	; 0x05
    a16c:	96 81       	ldd	r25, Z+6	; 0x06
    a16e:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a172:	6b 83       	std	Y+3, r22	; 0x03
    a174:	7c 83       	std	Y+4, r23	; 0x04
    a176:	8d 83       	std	Y+5, r24	; 0x05
    a178:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    a17a:	20 e0       	ldi	r18, 0x00	; 0
    a17c:	30 e0       	ldi	r19, 0x00	; 0
    a17e:	40 e0       	ldi	r20, 0x00	; 0
    a180:	51 e4       	ldi	r21, 0x41	; 65
    a182:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    a184:	67 81       	ldd	r22, Z+7	; 0x07
    a186:	70 85       	ldd	r23, Z+8	; 0x08
    a188:	81 85       	ldd	r24, Z+9	; 0x09
    a18a:	92 85       	ldd	r25, Z+10	; 0x0a
    a18c:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a190:	6f 83       	std	Y+7, r22	; 0x07
    a192:	78 87       	std	Y+8, r23	; 0x08
    a194:	89 87       	std	Y+9, r24	; 0x09
    a196:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    a198:	df 91       	pop	r29
    a19a:	cf 91       	pop	r28
    a19c:	1f 91       	pop	r17
    a19e:	0f 91       	pop	r16
    a1a0:	08 95       	ret

0000a1a2 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    a1a2:	0f 93       	push	r16
    a1a4:	1f 93       	push	r17
    a1a6:	cf 93       	push	r28
    a1a8:	df 93       	push	r29
    a1aa:	8c 01       	movw	r16, r24
    a1ac:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    a1ae:	ac 01       	movw	r20, r24
    a1b0:	44 5f       	subi	r20, 0xF4	; 244
    a1b2:	5f 4f       	sbci	r21, 0xFF	; 255
    a1b4:	23 e0       	ldi	r18, 0x03	; 3
    a1b6:	6e e0       	ldi	r22, 0x0E	; 14
    a1b8:	84 e0       	ldi	r24, 0x04	; 4
    a1ba:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    a1be:	45 e1       	ldi	r20, 0x15	; 21
    a1c0:	54 e0       	ldi	r21, 0x04	; 4
    a1c2:	6e e0       	ldi	r22, 0x0E	; 14
    a1c4:	70 e0       	ldi	r23, 0x00	; 0
    a1c6:	88 e0       	ldi	r24, 0x08	; 8
    a1c8:	90 e0       	ldi	r25, 0x00	; 0
    a1ca:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a1ce:	ae 01       	movw	r20, r28
    a1d0:	44 5f       	subi	r20, 0xF4	; 244
    a1d2:	5f 4f       	sbci	r21, 0xFF	; 255
    a1d4:	23 e0       	ldi	r18, 0x03	; 3
    a1d6:	6e e0       	ldi	r22, 0x0E	; 14
    a1d8:	8d e0       	ldi	r24, 0x0D	; 13
    a1da:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    a1de:	42 e1       	ldi	r20, 0x12	; 18
    a1e0:	54 e0       	ldi	r21, 0x04	; 4
    a1e2:	6e e0       	ldi	r22, 0x0E	; 14
    a1e4:	70 e0       	ldi	r23, 0x00	; 0
    a1e6:	81 e1       	ldi	r24, 0x11	; 17
    a1e8:	90 e0       	ldi	r25, 0x00	; 0
    a1ea:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    a1ee:	21 e0       	ldi	r18, 0x01	; 1
    a1f0:	f8 01       	movw	r30, r16
    a1f2:	40 89       	ldd	r20, Z+16	; 0x10
    a1f4:	6e e0       	ldi	r22, 0x0E	; 14
    a1f6:	70 e0       	ldi	r23, 0x00	; 0
    a1f8:	86 e1       	ldi	r24, 0x16	; 22
    a1fa:	90 e0       	ldi	r25, 0x00	; 0
    a1fc:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
	PrintChar(23, 14, '-');
    a200:	4d e2       	ldi	r20, 0x2D	; 45
    a202:	6e e0       	ldi	r22, 0x0E	; 14
    a204:	70 e0       	ldi	r23, 0x00	; 0
    a206:	87 e1       	ldi	r24, 0x17	; 23
    a208:	90 e0       	ldi	r25, 0x00	; 0
    a20a:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    a20e:	21 e0       	ldi	r18, 0x01	; 1
    a210:	48 89       	ldd	r20, Y+16	; 0x10
    a212:	6e e0       	ldi	r22, 0x0E	; 14
    a214:	70 e0       	ldi	r23, 0x00	; 0
    a216:	8a e1       	ldi	r24, 0x1A	; 26
    a218:	90 e0       	ldi	r25, 0x00	; 0
}
    a21a:	df 91       	pop	r29
    a21c:	cf 91       	pop	r28
    a21e:	1f 91       	pop	r17
    a220:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    a222:	0c 94 b9 48 	jmp	0x9172	; 0x9172 <PrintByte>

0000a226 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a226:	0f 93       	push	r16
    a228:	1f 93       	push	r17
    a22a:	cf 93       	push	r28
    a22c:	df 93       	push	r29
    a22e:	8c 01       	movw	r16, r24
    a230:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    a232:	46 e0       	ldi	r20, 0x06	; 6
    a234:	54 e0       	ldi	r21, 0x04	; 4
    a236:	6c e0       	ldi	r22, 0x0C	; 12
    a238:	70 e0       	ldi	r23, 0x00	; 0
    a23a:	89 e0       	ldi	r24, 0x09	; 9
    a23c:	90 e0       	ldi	r25, 0x00	; 0
    a23e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a242:	a8 01       	movw	r20, r16
    a244:	44 5f       	subi	r20, 0xF4	; 244
    a246:	5f 4f       	sbci	r21, 0xFF	; 255
    a248:	23 e0       	ldi	r18, 0x03	; 3
    a24a:	6e e0       	ldi	r22, 0x0E	; 14
    a24c:	84 e0       	ldi	r24, 0x04	; 4
    a24e:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    a252:	45 e1       	ldi	r20, 0x15	; 21
    a254:	54 e0       	ldi	r21, 0x04	; 4
    a256:	6e e0       	ldi	r22, 0x0E	; 14
    a258:	70 e0       	ldi	r23, 0x00	; 0
    a25a:	88 e0       	ldi	r24, 0x08	; 8
    a25c:	90 e0       	ldi	r25, 0x00	; 0
    a25e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a262:	ae 01       	movw	r20, r28
    a264:	44 5f       	subi	r20, 0xF4	; 244
    a266:	5f 4f       	sbci	r21, 0xFF	; 255
    a268:	23 e0       	ldi	r18, 0x03	; 3
    a26a:	6e e0       	ldi	r22, 0x0E	; 14
    a26c:	8d e0       	ldi	r24, 0x0D	; 13
    a26e:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    a272:	42 e1       	ldi	r20, 0x12	; 18
    a274:	54 e0       	ldi	r21, 0x04	; 4
    a276:	6e e0       	ldi	r22, 0x0E	; 14
    a278:	70 e0       	ldi	r23, 0x00	; 0
    a27a:	81 e1       	ldi	r24, 0x11	; 17
    a27c:	90 e0       	ldi	r25, 0x00	; 0
    a27e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    PrintByte(22, 14, winner->score ,true);
    a282:	21 e0       	ldi	r18, 0x01	; 1
    a284:	f8 01       	movw	r30, r16
    a286:	47 85       	ldd	r20, Z+15	; 0x0f
    a288:	6e e0       	ldi	r22, 0x0E	; 14
    a28a:	70 e0       	ldi	r23, 0x00	; 0
    a28c:	86 e1       	ldi	r24, 0x16	; 22
    a28e:	90 e0       	ldi	r25, 0x00	; 0
    a290:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
    PrintChar(23, 14, '-');
    a294:	4d e2       	ldi	r20, 0x2D	; 45
    a296:	6e e0       	ldi	r22, 0x0E	; 14
    a298:	70 e0       	ldi	r23, 0x00	; 0
    a29a:	87 e1       	ldi	r24, 0x17	; 23
    a29c:	90 e0       	ldi	r25, 0x00	; 0
    a29e:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    a2a2:	21 e0       	ldi	r18, 0x01	; 1
    a2a4:	4f 85       	ldd	r20, Y+15	; 0x0f
    a2a6:	6e e0       	ldi	r22, 0x0E	; 14
    a2a8:	70 e0       	ldi	r23, 0x00	; 0
    a2aa:	8a e1       	ldi	r24, 0x1A	; 26
    a2ac:	90 e0       	ldi	r25, 0x00	; 0
    a2ae:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    a2b2:	80 91 a6 0b 	lds	r24, 0x0BA6
    a2b6:	88 30       	cpi	r24, 0x08	; 8
    a2b8:	59 f4       	brne	.+22     	; 0xa2d0 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    a2ba:	4a e2       	ldi	r20, 0x2A	; 42
    a2bc:	6e e0       	ldi	r22, 0x0E	; 14
    a2be:	70 e0       	ldi	r23, 0x00	; 0
    a2c0:	8c e1       	ldi	r24, 0x1C	; 28
    a2c2:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    a2c4:	df 91       	pop	r29
    a2c6:	cf 91       	pop	r28
    a2c8:	1f 91       	pop	r17
    a2ca:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    a2cc:	0c 94 07 49 	jmp	0x920e	; 0x920e <PrintChar>
	}
}
    a2d0:	df 91       	pop	r29
    a2d2:	cf 91       	pop	r28
    a2d4:	1f 91       	pop	r17
    a2d6:	0f 91       	pop	r16
    a2d8:	08 95       	ret

0000a2da <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    a2da:	fc 01       	movw	r30, r24
    a2dc:	20 81       	ld	r18, Z
    a2de:	31 81       	ldd	r19, Z+1	; 0x01
    a2e0:	21 70       	andi	r18, 0x01	; 1
    a2e2:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    a2e4:	81 e0       	ldi	r24, 0x01	; 1
    a2e6:	23 2b       	or	r18, r19
    a2e8:	09 f4       	brne	.+2      	; 0xa2ec <shoot_pressed+0x12>
    a2ea:	80 e0       	ldi	r24, 0x00	; 0
}
    a2ec:	08 95       	ret

0000a2ee <get_delta>:

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a2ee:	fc 01       	movw	r30, r24
    a2f0:	83 a1       	ldd	r24, Z+35	; 0x23
    a2f2:	fb 01       	movw	r30, r22
    a2f4:	61 81       	ldd	r22, Z+1	; 0x01
		return FRAME_TIME * s->speed;
    a2f6:	70 e0       	ldi	r23, 0x00	; 0
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a2f8:	81 11       	cpse	r24, r1
    a2fa:	09 c0       	rjmp	.+18     	; 0xa30e <get_delta+0x20>
		return FRAME_TIME * s->speed;
    a2fc:	80 e0       	ldi	r24, 0x00	; 0
    a2fe:	90 e0       	ldi	r25, 0x00	; 0
    a300:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    a304:	25 e6       	ldi	r18, 0x65	; 101
    a306:	38 e8       	ldi	r19, 0x88	; 136
    a308:	48 e8       	ldi	r20, 0x88	; 136
    a30a:	5c e3       	ldi	r21, 0x3C	; 60
    a30c:	0e c0       	rjmp	.+28     	; 0xa32a <get_delta+0x3c>
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
    a30e:	80 e0       	ldi	r24, 0x00	; 0
    a310:	90 e0       	ldi	r25, 0x00	; 0
    a312:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    a316:	25 e6       	ldi	r18, 0x65	; 101
    a318:	38 e8       	ldi	r19, 0x88	; 136
    a31a:	48 e8       	ldi	r20, 0x88	; 136
    a31c:	5c e3       	ldi	r21, 0x3C	; 60
    a31e:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    a322:	23 e3       	ldi	r18, 0x33	; 51
    a324:	33 e3       	ldi	r19, 0x33	; 51
    a326:	43 eb       	ldi	r20, 0xB3	; 179
    a328:	5f e3       	ldi	r21, 0x3F	; 63
    a32a:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
}
    a32e:	08 95       	ret

0000a330 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a330:	cf 93       	push	r28
    a332:	df 93       	push	r29
    a334:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a336:	ac 01       	movw	r20, r24
    a338:	44 5f       	subi	r20, 0xF4	; 244
    a33a:	5f 4f       	sbci	r21, 0xFF	; 255
    a33c:	23 e0       	ldi	r18, 0x03	; 3
    a33e:	60 e0       	ldi	r22, 0x00	; 0
    a340:	8a e0       	ldi	r24, 0x0A	; 10
    a342:	8c 0f       	add	r24, r28
    a344:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    a348:	d0 e0       	ldi	r29, 0x00	; 0
    a34a:	4f ef       	ldi	r20, 0xFF	; 255
    a34c:	53 e0       	ldi	r21, 0x03	; 3
    a34e:	60 e0       	ldi	r22, 0x00	; 0
    a350:	70 e0       	ldi	r23, 0x00	; 0
    a352:	ce 01       	movw	r24, r28
    a354:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(x, 1, (char*) strTotal);
    a358:	48 ef       	ldi	r20, 0xF8	; 248
    a35a:	53 e0       	ldi	r21, 0x03	; 3
    a35c:	61 e0       	ldi	r22, 0x01	; 1
    a35e:	70 e0       	ldi	r23, 0x00	; 0
    a360:	ce 01       	movw	r24, r28
	
}
    a362:	df 91       	pop	r29
    a364:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    a366:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>

0000a36a <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a36a:	0f 93       	push	r16
    a36c:	1f 93       	push	r17
    a36e:	cf 93       	push	r28
    a370:	df 93       	push	r29
    a372:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    a374:	c6 2f       	mov	r28, r22
    a376:	d0 e0       	ldi	r29, 0x00	; 0
    a378:	28 96       	adiw	r28, 0x08	; 8
    a37a:	20 e0       	ldi	r18, 0x00	; 0
    a37c:	fc 01       	movw	r30, r24
    a37e:	40 89       	ldd	r20, Z+16	; 0x10
    a380:	60 e0       	ldi	r22, 0x00	; 0
    a382:	70 e0       	ldi	r23, 0x00	; 0
    a384:	ce 01       	movw	r24, r28
    a386:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    a38a:	20 e0       	ldi	r18, 0x00	; 0
    a38c:	f8 01       	movw	r30, r16
    a38e:	47 85       	ldd	r20, Z+15	; 0x0f
    a390:	61 e0       	ldi	r22, 0x01	; 1
    a392:	70 e0       	ldi	r23, 0x00	; 0
    a394:	ce 01       	movw	r24, r28
}
    a396:	df 91       	pop	r29
    a398:	cf 91       	pop	r28
    a39a:	1f 91       	pop	r17
    a39c:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    a39e:	0c 94 b9 48 	jmp	0x9172	; 0x9172 <PrintByte>

0000a3a2 <render_player>:
}

void render_player(Player* player, u8 sprite_index)
{
    a3a2:	ef 92       	push	r14
    a3a4:	ff 92       	push	r15
    a3a6:	0f 93       	push	r16
    a3a8:	1f 93       	push	r17
    a3aa:	cf 93       	push	r28
    a3ac:	df 93       	push	r29
    a3ae:	1f 92       	push	r1
    a3b0:	cd b7       	in	r28, 0x3d	; 61
    a3b2:	de b7       	in	r29, 0x3e	; 62
    a3b4:	7c 01       	movw	r14, r24
    a3b6:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    a3b8:	fc 01       	movw	r30, r24
    a3ba:	67 81       	ldd	r22, Z+7	; 0x07
    a3bc:	70 85       	ldd	r23, Z+8	; 0x08
    a3be:	81 85       	ldd	r24, Z+9	; 0x09
    a3c0:	92 85       	ldd	r25, Z+10	; 0x0a
    a3c2:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a3c6:	46 2f       	mov	r20, r22
    a3c8:	f7 01       	movw	r30, r14
    a3ca:	63 81       	ldd	r22, Z+3	; 0x03
    a3cc:	74 81       	ldd	r23, Z+4	; 0x04
    a3ce:	85 81       	ldd	r24, Z+5	; 0x05
    a3d0:	96 81       	ldd	r25, Z+6	; 0x06
    a3d2:	49 83       	std	Y+1, r20	; 0x01
    a3d4:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a3d8:	02 e0       	ldi	r16, 0x02	; 2
    a3da:	22 e0       	ldi	r18, 0x02	; 2
    a3dc:	49 81       	ldd	r20, Y+1	; 0x01
    a3de:	81 2f       	mov	r24, r17
    a3e0:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
}
    a3e4:	0f 90       	pop	r0
    a3e6:	df 91       	pop	r29
    a3e8:	cf 91       	pop	r28
    a3ea:	1f 91       	pop	r17
    a3ec:	0f 91       	pop	r16
    a3ee:	ff 90       	pop	r15
    a3f0:	ef 90       	pop	r14
    a3f2:	08 95       	ret

0000a3f4 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    a3f4:	ef 92       	push	r14
    a3f6:	ff 92       	push	r15
    a3f8:	0f 93       	push	r16
    a3fa:	1f 93       	push	r17
    a3fc:	cf 93       	push	r28
    a3fe:	df 93       	push	r29
    a400:	1f 92       	push	r1
    a402:	cd b7       	in	r28, 0x3d	; 61
    a404:	de b7       	in	r29, 0x3e	; 62
    a406:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    a408:	81 89       	ldd	r24, Z+17	; 0x11
    a40a:	88 23       	and	r24, r24
    a40c:	b9 f0       	breq	.+46     	; 0xa43c <render_shot+0x48>
    a40e:	16 2f       	mov	r17, r22
    a410:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    a412:	67 a9       	ldd	r22, Z+55	; 0x37
    a414:	70 ad       	ldd	r23, Z+56	; 0x38
    a416:	81 ad       	ldd	r24, Z+57	; 0x39
    a418:	92 ad       	ldd	r25, Z+58	; 0x3a
    a41a:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a41e:	46 2f       	mov	r20, r22
    a420:	f7 01       	movw	r30, r14
    a422:	63 a9       	ldd	r22, Z+51	; 0x33
    a424:	74 a9       	ldd	r23, Z+52	; 0x34
    a426:	85 a9       	ldd	r24, Z+53	; 0x35
    a428:	96 a9       	ldd	r25, Z+54	; 0x36
    a42a:	49 83       	std	Y+1, r20	; 0x01
    a42c:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a430:	01 e0       	ldi	r16, 0x01	; 1
    a432:	21 e0       	ldi	r18, 0x01	; 1
    a434:	49 81       	ldd	r20, Y+1	; 0x01
    a436:	81 2f       	mov	r24, r17
    a438:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
			sprite_index++;
		}
	}
}
    a43c:	0f 90       	pop	r0
    a43e:	df 91       	pop	r29
    a440:	cf 91       	pop	r28
    a442:	1f 91       	pop	r17
    a444:	0f 91       	pop	r16
    a446:	ff 90       	pop	r15
    a448:	ef 90       	pop	r14
    a44a:	08 95       	ret

0000a44c <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    a44c:	ef 92       	push	r14
    a44e:	ff 92       	push	r15
    a450:	0f 93       	push	r16
    a452:	1f 93       	push	r17
    a454:	cf 93       	push	r28
    a456:	df 93       	push	r29
    a458:	ec 01       	movw	r28, r24
    a45a:	25 96       	adiw	r28, 0x05	; 5
    a45c:	8c 01       	movw	r16, r24
    a45e:	0f 5d       	subi	r16, 0xDF	; 223
    a460:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    a462:	8e e1       	ldi	r24, 0x1E	; 30
    a464:	e8 2e       	mov	r14, r24
    a466:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    a468:	88 85       	ldd	r24, Y+8	; 0x08
    a46a:	99 85       	ldd	r25, Y+9	; 0x09
    a46c:	89 2b       	or	r24, r25
    a46e:	c1 f0       	breq	.+48     	; 0xa4a0 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    a470:	ce 01       	movw	r24, r28
    a472:	04 97       	sbiw	r24, 0x04	; 4
    a474:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <LBGetNextFrame>
    a478:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    a47a:	48 81       	ld	r20, Y
    a47c:	88 85       	ldd	r24, Y+8	; 0x08
    a47e:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a480:	b7 01       	movw	r22, r14
    a482:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    a486:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    a488:	44 23       	and	r20, r20
    a48a:	39 f0       	breq	.+14     	; 0xa49a <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a48c:	40 e0       	ldi	r20, 0x00	; 0
    a48e:	50 e0       	ldi	r21, 0x00	; 0
    a490:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
				ta->anims[i].tile_index = 0;
    a494:	19 86       	std	Y+9, r1	; 0x09
    a496:	18 86       	std	Y+8, r1	; 0x08
    a498:	03 c0       	rjmp	.+6      	; 0xa4a0 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    a49a:	a9 01       	movw	r20, r18
    a49c:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
    a4a0:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    a4a2:	c0 17       	cp	r28, r16
    a4a4:	d1 07       	cpc	r29, r17
    a4a6:	01 f7       	brne	.-64     	; 0xa468 <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    a4a8:	df 91       	pop	r29
    a4aa:	cf 91       	pop	r28
    a4ac:	1f 91       	pop	r17
    a4ae:	0f 91       	pop	r16
    a4b0:	ff 90       	pop	r15
    a4b2:	ef 90       	pop	r14
    a4b4:	08 95       	ret

0000a4b6 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    a4b6:	cf 93       	push	r28
    a4b8:	df 93       	push	r29
    a4ba:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    a4bc:	0e 94 15 4c 	call	0x982a	; 0x982a <LBGetNextFrameReverse>
    a4c0:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    a4c2:	4c 81       	ldd	r20, Y+4	; 0x04
    a4c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    a4c6:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a4c8:	6e e1       	ldi	r22, 0x1E	; 30
    a4ca:	70 e0       	ldi	r23, 0x00	; 0
    a4cc:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    a4d0:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    a4d2:	44 23       	and	r20, r20
    a4d4:	19 f0       	breq	.+6      	; 0xa4dc <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a4d6:	41 ea       	ldi	r20, 0xA1	; 161
    a4d8:	5a e6       	ldi	r21, 0x6A	; 106
    a4da:	01 c0       	rjmp	.+2      	; 0xa4de <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    a4dc:	a9 01       	movw	r20, r18
    a4de:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	}
	return ta->anim.looped;
}
    a4e2:	8c 81       	ldd	r24, Y+4	; 0x04
    a4e4:	df 91       	pop	r29
    a4e6:	cf 91       	pop	r28
    a4e8:	08 95       	ret

0000a4ea <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    a4ea:	1f 93       	push	r17
    a4ec:	cf 93       	push	r28
    a4ee:	df 93       	push	r29
    a4f0:	ec 01       	movw	r28, r24
    a4f2:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
    a4f4:	8d 89       	ldd	r24, Y+21	; 0x15
    a4f6:	80 ff       	sbrs	r24, 0
    a4f8:	17 c0       	rjmp	.+46     	; 0xa528 <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    a4fa:	ce 01       	movw	r24, r28
    a4fc:	80 59       	subi	r24, 0x90	; 144
    a4fe:	9f 4f       	sbci	r25, 0xFF	; 255
    a500:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    a504:	fe 01       	movw	r30, r28
    a506:	ec 58       	subi	r30, 0x8C	; 140
    a508:	ff 4f       	sbci	r31, 0xFF	; 255
    a50a:	20 81       	ld	r18, Z
    a50c:	22 23       	and	r18, r18
    a50e:	09 f4       	brne	.+2      	; 0xa512 <tank_map+0x28>
    a510:	4a c0       	rjmp	.+148    	; 0xa5a6 <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    a512:	8d 89       	ldd	r24, Y+21	; 0x15
    a514:	91 e0       	ldi	r25, 0x01	; 1
    a516:	98 27       	eor	r25, r24
    a518:	9d 8b       	std	Y+21, r25	; 0x15
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    a51a:	ce 01       	movw	r24, r28
    a51c:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <player_spawn>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a520:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    a522:	81 e5       	ldi	r24, 0x51	; 81
    a524:	91 e3       	ldi	r25, 0x31	; 49
    a526:	40 c0       	rjmp	.+128    	; 0xa5a8 <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    a528:	9e 89       	ldd	r25, Y+22	; 0x16
    a52a:	98 37       	cpi	r25, 0x78	; 120
    a52c:	11 f0       	breq	.+4      	; 0xa532 <tank_map+0x48>
		{
			player->grace_frame++;
    a52e:	9f 5f       	subi	r25, 0xFF	; 255
    a530:	9e 8b       	std	Y+22, r25	; 0x16
		}
		switch (player->shared.direction)
    a532:	98 81       	ld	r25, Y
    a534:	91 30       	cpi	r25, 0x01	; 1
    a536:	61 f0       	breq	.+24     	; 0xa550 <tank_map+0x66>
    a538:	b0 f0       	brcs	.+44     	; 0xa566 <tank_map+0x7c>
    a53a:	92 30       	cpi	r25, 0x02	; 2
    a53c:	69 f0       	breq	.+26     	; 0xa558 <tank_map+0x6e>
    a53e:	93 30       	cpi	r25, 0x03	; 3
    a540:	91 f4       	brne	.+36     	; 0xa566 <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    a542:	ce 01       	movw	r24, r28
    a544:	8c 59       	subi	r24, 0x9C	; 156
    a546:	9f 4f       	sbci	r25, 0xFF	; 255
    a548:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <LBGetNextFrame>
    a54c:	41 e0       	ldi	r20, 0x01	; 1
    a54e:	11 c0       	rjmp	.+34     	; 0xa572 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    a550:	ce 01       	movw	r24, r28
    a552:	8c 59       	subi	r24, 0x9C	; 156
    a554:	9f 4f       	sbci	r25, 0xFF	; 255
    a556:	0a c0       	rjmp	.+20     	; 0xa56c <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    a558:	ce 01       	movw	r24, r28
    a55a:	88 5a       	subi	r24, 0xA8	; 168
    a55c:	9f 4f       	sbci	r25, 0xFF	; 255
    a55e:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <LBGetNextFrame>
    a562:	42 e0       	ldi	r20, 0x02	; 2
    a564:	06 c0       	rjmp	.+12     	; 0xa572 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    a566:	ce 01       	movw	r24, r28
    a568:	88 5a       	subi	r24, 0xA8	; 168
    a56a:	9f 4f       	sbci	r25, 0xFF	; 255
    a56c:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <LBGetNextFrame>
    a570:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    a572:	2e 89       	ldd	r18, Y+22	; 0x16
    a574:	28 37       	cpi	r18, 0x78	; 120
    a576:	31 f0       	breq	.+12     	; 0xa584 <tank_map+0x9a>
    a578:	20 91 aa 0b 	lds	r18, 0x0BAA
    a57c:	22 23       	and	r18, r18
    a57e:	11 f0       	breq	.+4      	; 0xa584 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    a580:	81 e5       	ldi	r24, 0x51	; 81
    a582:	91 e3       	ldi	r25, 0x31	; 49
		}
		game.toggle_counter--;
    a584:	20 91 a9 0b 	lds	r18, 0x0BA9
    a588:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    a58a:	19 f0       	breq	.+6      	; 0xa592 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    a58c:	20 93 a9 0b 	sts	0x0BA9, r18
    a590:	0b c0       	rjmp	.+22     	; 0xa5a8 <tank_map+0xbe>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    a592:	24 e1       	ldi	r18, 0x14	; 20
    a594:	20 93 a9 0b 	sts	0x0BA9, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    a598:	30 91 aa 0b 	lds	r19, 0x0BAA
    a59c:	21 e0       	ldi	r18, 0x01	; 1
    a59e:	23 27       	eor	r18, r19
    a5a0:	20 93 aa 0b 	sts	0x0BAA, r18
    a5a4:	01 c0       	rjmp	.+2      	; 0xa5a8 <tank_map+0xbe>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a5a6:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    a5a8:	bc 01       	movw	r22, r24
    a5aa:	81 2f       	mov	r24, r17
    a5ac:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    a5b0:	84 e0       	ldi	r24, 0x04	; 4
    a5b2:	81 0f       	add	r24, r17
    a5b4:	df 91       	pop	r29
    a5b6:	cf 91       	pop	r28
    a5b8:	1f 91       	pop	r17
    a5ba:	08 95       	ret

0000a5bc <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    a5bc:	cf 93       	push	r28
    a5be:	fc 01       	movw	r30, r24
    a5c0:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    a5c2:	86 ad       	ldd	r24, Z+62	; 0x3e
    a5c4:	88 23       	and	r24, r24
    a5c6:	09 f1       	breq	.+66     	; 0xa60a <shot_map+0x4e>
		{
			switch (shot->shared.direction)
    a5c8:	90 a9       	ldd	r25, Z+48	; 0x30
    a5ca:	91 30       	cpi	r25, 0x01	; 1
    a5cc:	61 f0       	breq	.+24     	; 0xa5e6 <shot_map+0x2a>
    a5ce:	c8 f0       	brcs	.+50     	; 0xa602 <shot_map+0x46>
    a5d0:	92 30       	cpi	r25, 0x02	; 2
    a5d2:	81 f0       	breq	.+32     	; 0xa5f4 <shot_map+0x38>
    a5d4:	93 30       	cpi	r25, 0x03	; 3
    a5d6:	a9 f4       	brne	.+42     	; 0xa602 <shot_map+0x46>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    a5d8:	cf 01       	movw	r24, r30
    a5da:	84 5b       	subi	r24, 0xB4	; 180
    a5dc:	9f 4f       	sbci	r25, 0xFF	; 255
    a5de:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <LBGetNextFrame>
    a5e2:	41 e0       	ldi	r20, 0x01	; 1
    a5e4:	15 c0       	rjmp	.+42     	; 0xa610 <shot_map+0x54>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    a5e6:	cf 01       	movw	r24, r30
    a5e8:	84 5b       	subi	r24, 0xB4	; 180
    a5ea:	9f 4f       	sbci	r25, 0xFF	; 255
    a5ec:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <LBGetNextFrame>
    a5f0:	40 e0       	ldi	r20, 0x00	; 0
    a5f2:	0e c0       	rjmp	.+28     	; 0xa610 <shot_map+0x54>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    a5f4:	cf 01       	movw	r24, r30
    a5f6:	80 5c       	subi	r24, 0xC0	; 192
    a5f8:	9f 4f       	sbci	r25, 0xFF	; 255
    a5fa:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <LBGetNextFrame>
    a5fe:	42 e0       	ldi	r20, 0x02	; 2
    a600:	07 c0       	rjmp	.+14     	; 0xa610 <shot_map+0x54>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    a602:	cf 01       	movw	r24, r30
    a604:	80 5c       	subi	r24, 0xC0	; 192
    a606:	9f 4f       	sbci	r25, 0xFF	; 255
    a608:	f1 cf       	rjmp	.-30     	; 0xa5ec <shot_map+0x30>
    a60a:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    a60c:	81 e5       	ldi	r24, 0x51	; 81
    a60e:	91 e3       	ldi	r25, 0x31	; 49
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    a610:	bc 01       	movw	r22, r24
    a612:	8c 2f       	mov	r24, r28
    a614:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    a618:	81 e0       	ldi	r24, 0x01	; 1
    a61a:	8c 0f       	add	r24, r28
    a61c:	cf 91       	pop	r28
    a61e:	08 95       	ret

0000a620 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    a620:	cf 93       	push	r28
    a622:	df 93       	push	r29
    a624:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    a626:	88 81       	ld	r24, Y
    a628:	81 11       	cpse	r24, r1
    a62a:	0b c0       	rjmp	.+22     	; 0xa642 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    a62c:	6f 81       	ldd	r22, Y+7	; 0x07
    a62e:	78 85       	ldd	r23, Y+8	; 0x08
    a630:	89 85       	ldd	r24, Y+9	; 0x09
    a632:	9a 85       	ldd	r25, Y+10	; 0x0a
    a634:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a638:	66 95       	lsr	r22
    a63a:	66 95       	lsr	r22
    a63c:	66 95       	lsr	r22
    a63e:	6f 5f       	subi	r22, 0xFF	; 255
    a640:	1d c0       	rjmp	.+58     	; 0xa67c <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    a642:	81 30       	cpi	r24, 0x01	; 1
    a644:	69 f4       	brne	.+26     	; 0xa660 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    a646:	20 e0       	ldi	r18, 0x00	; 0
    a648:	30 e0       	ldi	r19, 0x00	; 0
    a64a:	40 e0       	ldi	r20, 0x00	; 0
    a64c:	5e e3       	ldi	r21, 0x3E	; 62
    a64e:	6b 81       	ldd	r22, Y+3	; 0x03
    a650:	7c 81       	ldd	r23, Y+4	; 0x04
    a652:	8d 81       	ldd	r24, Y+5	; 0x05
    a654:	9e 81       	ldd	r25, Y+6	; 0x06
    a656:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    a65a:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a65e:	27 c0       	rjmp	.+78     	; 0xa6ae <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    a660:	82 30       	cpi	r24, 0x02	; 2
    a662:	d9 f4       	brne	.+54     	; 0xa69a <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    a664:	20 e0       	ldi	r18, 0x00	; 0
    a666:	30 e0       	ldi	r19, 0x00	; 0
    a668:	40 e0       	ldi	r20, 0x00	; 0
    a66a:	5e e3       	ldi	r21, 0x3E	; 62
    a66c:	6f 81       	ldd	r22, Y+7	; 0x07
    a66e:	78 85       	ldd	r23, Y+8	; 0x08
    a670:	89 85       	ldd	r24, Y+9	; 0x09
    a672:	9a 85       	ldd	r25, Y+10	; 0x0a
    a674:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    a678:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
		sprite->y = tile * 8;
    a67c:	88 e0       	ldi	r24, 0x08	; 8
    a67e:	68 9f       	mul	r22, r24
    a680:	b0 01       	movw	r22, r0
    a682:	11 24       	eor	r1, r1
    a684:	88 27       	eor	r24, r24
    a686:	77 fd       	sbrc	r23, 7
    a688:	80 95       	com	r24
    a68a:	98 2f       	mov	r25, r24
    a68c:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    a690:	6f 83       	std	Y+7, r22	; 0x07
    a692:	78 87       	std	Y+8, r23	; 0x08
    a694:	89 87       	std	Y+9, r24	; 0x09
    a696:	9a 87       	std	Y+10, r25	; 0x0a
    a698:	18 c0       	rjmp	.+48     	; 0xa6ca <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    a69a:	6b 81       	ldd	r22, Y+3	; 0x03
    a69c:	7c 81       	ldd	r23, Y+4	; 0x04
    a69e:	8d 81       	ldd	r24, Y+5	; 0x05
    a6a0:	9e 81       	ldd	r25, Y+6	; 0x06
    a6a2:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a6a6:	66 95       	lsr	r22
    a6a8:	66 95       	lsr	r22
    a6aa:	66 95       	lsr	r22
    a6ac:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    a6ae:	88 e0       	ldi	r24, 0x08	; 8
    a6b0:	68 9f       	mul	r22, r24
    a6b2:	b0 01       	movw	r22, r0
    a6b4:	11 24       	eor	r1, r1
    a6b6:	88 27       	eor	r24, r24
    a6b8:	77 fd       	sbrc	r23, 7
    a6ba:	80 95       	com	r24
    a6bc:	98 2f       	mov	r25, r24
    a6be:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    a6c2:	6b 83       	std	Y+3, r22	; 0x03
    a6c4:	7c 83       	std	Y+4, r23	; 0x04
    a6c6:	8d 83       	std	Y+5, r24	; 0x05
    a6c8:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    a6ca:	81 e0       	ldi	r24, 0x01	; 1
    a6cc:	8a 83       	std	Y+2, r24	; 0x02
}
    a6ce:	df 91       	pop	r29
    a6d0:	cf 91       	pop	r28
    a6d2:	08 95       	ret

0000a6d4 <recoil_sprite_fine>:

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    a6d4:	cf 93       	push	r28
    a6d6:	df 93       	push	r29
    a6d8:	eb 01       	movw	r28, r22
	float speed = get_delta(p, sprite);
    a6da:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    a6de:	9b 01       	movw	r18, r22
    a6e0:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    a6e2:	88 81       	ld	r24, Y
    a6e4:	81 11       	cpse	r24, r1
    a6e6:	07 c0       	rjmp	.+14     	; 0xa6f6 <recoil_sprite_fine+0x22>
	{
		sprite->y += speed;
    a6e8:	6f 81       	ldd	r22, Y+7	; 0x07
    a6ea:	78 85       	ldd	r23, Y+8	; 0x08
    a6ec:	89 85       	ldd	r24, Y+9	; 0x09
    a6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    a6f0:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a6f4:	11 c0       	rjmp	.+34     	; 0xa718 <recoil_sprite_fine+0x44>
	}
	else if (sprite->direction == D_RIGHT)
    a6f6:	81 30       	cpi	r24, 0x01	; 1
    a6f8:	39 f4       	brne	.+14     	; 0xa708 <recoil_sprite_fine+0x34>
	{
		sprite->x -= speed;
    a6fa:	6b 81       	ldd	r22, Y+3	; 0x03
    a6fc:	7c 81       	ldd	r23, Y+4	; 0x04
    a6fe:	8d 81       	ldd	r24, Y+5	; 0x05
    a700:	9e 81       	ldd	r25, Y+6	; 0x06
    a702:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    a706:	13 c0       	rjmp	.+38     	; 0xa72e <recoil_sprite_fine+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    a708:	82 30       	cpi	r24, 0x02	; 2
    a70a:	59 f4       	brne	.+22     	; 0xa722 <recoil_sprite_fine+0x4e>
	{
		sprite->y -= speed;
    a70c:	6f 81       	ldd	r22, Y+7	; 0x07
    a70e:	78 85       	ldd	r23, Y+8	; 0x08
    a710:	89 85       	ldd	r24, Y+9	; 0x09
    a712:	9a 85       	ldd	r25, Y+10	; 0x0a
    a714:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    a718:	6f 83       	std	Y+7, r22	; 0x07
    a71a:	78 87       	std	Y+8, r23	; 0x08
    a71c:	89 87       	std	Y+9, r24	; 0x09
    a71e:	9a 87       	std	Y+10, r25	; 0x0a
    a720:	0a c0       	rjmp	.+20     	; 0xa736 <recoil_sprite_fine+0x62>
	}
	else
	{
		sprite->x += speed;
    a722:	6b 81       	ldd	r22, Y+3	; 0x03
    a724:	7c 81       	ldd	r23, Y+4	; 0x04
    a726:	8d 81       	ldd	r24, Y+5	; 0x05
    a728:	9e 81       	ldd	r25, Y+6	; 0x06
    a72a:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a72e:	6b 83       	std	Y+3, r22	; 0x03
    a730:	7c 83       	std	Y+4, r23	; 0x04
    a732:	8d 83       	std	Y+5, r24	; 0x05
    a734:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    a736:	81 e0       	ldi	r24, 0x01	; 1
    a738:	8a 83       	std	Y+2, r24	; 0x02
}
    a73a:	df 91       	pop	r29
    a73c:	cf 91       	pop	r28
    a73e:	08 95       	ret

0000a740 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a740:	88 5a       	subi	r24, 0xA8	; 168
    a742:	93 4f       	sbci	r25, 0xF3	; 243
    a744:	fc 01       	movw	r30, r24
    a746:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a748:	81 30       	cpi	r24, 0x01	; 1
    a74a:	31 f0       	breq	.+12     	; 0xa758 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    a74c:	82 30       	cpi	r24, 0x02	; 2
    a74e:	31 f0       	breq	.+12     	; 0xa75c <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    a750:	87 33       	cpi	r24, 0x37	; 55
    a752:	31 f0       	breq	.+12     	; 0xa760 <solid_square_tile+0x20>

	return 0;
    a754:	80 e0       	ldi	r24, 0x00	; 0
    a756:	08 95       	ret
    a758:	81 e0       	ldi	r24, 0x01	; 1
    a75a:	08 95       	ret
    a75c:	82 e0       	ldi	r24, 0x02	; 2
    a75e:	08 95       	ret
    a760:	87 e3       	ldi	r24, 0x37	; 55
}
    a762:	08 95       	ret

0000a764 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a764:	88 5a       	subi	r24, 0xA8	; 168
    a766:	93 4f       	sbci	r25, 0xF3	; 243
    a768:	fc 01       	movw	r30, r24
    a76a:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    a76c:	83 30       	cpi	r24, 0x03	; 3
    a76e:	41 f0       	breq	.+16     	; 0xa780 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    a770:	86 30       	cpi	r24, 0x06	; 6
    a772:	41 f0       	breq	.+16     	; 0xa784 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    a774:	84 30       	cpi	r24, 0x04	; 4
    a776:	41 f0       	breq	.+16     	; 0xa788 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    a778:	85 30       	cpi	r24, 0x05	; 5
    a77a:	41 f0       	breq	.+16     	; 0xa78c <solid_directional_tile+0x28>
	
	return 0;
    a77c:	80 e0       	ldi	r24, 0x00	; 0
    a77e:	08 95       	ret
    a780:	83 e0       	ldi	r24, 0x03	; 3
    a782:	08 95       	ret
    a784:	86 e0       	ldi	r24, 0x06	; 6
    a786:	08 95       	ret
    a788:	84 e0       	ldi	r24, 0x04	; 4
    a78a:	08 95       	ret
    a78c:	85 e0       	ldi	r24, 0x05	; 5
}
    a78e:	08 95       	ret

0000a790 <solid_tile>:

u8 solid_tile(int tile_index)
{
    a790:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    a792:	fc 01       	movw	r30, r24
    a794:	e8 5a       	subi	r30, 0xA8	; 168
    a796:	f3 4f       	sbci	r31, 0xF3	; 243
    a798:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a79a:	91 30       	cpi	r25, 0x01	; 1
    a79c:	39 f0       	breq	.+14     	; 0xa7ac <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    a79e:	92 30       	cpi	r25, 0x02	; 2
    a7a0:	39 f0       	breq	.+14     	; 0xa7b0 <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    a7a2:	97 33       	cpi	r25, 0x37	; 55
    a7a4:	39 f0       	breq	.+14     	; 0xa7b4 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    a7a6:	c9 01       	movw	r24, r18
    a7a8:	0c 94 b2 53 	jmp	0xa764	; 0xa764 <solid_directional_tile>
    a7ac:	81 e0       	ldi	r24, 0x01	; 1
    a7ae:	08 95       	ret
    a7b0:	82 e0       	ldi	r24, 0x02	; 2
    a7b2:	08 95       	ret
    a7b4:	87 e3       	ldi	r24, 0x37	; 55
}
    a7b6:	08 95       	ret

0000a7b8 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    a7b8:	7f 92       	push	r7
    a7ba:	8f 92       	push	r8
    a7bc:	9f 92       	push	r9
    a7be:	af 92       	push	r10
    a7c0:	bf 92       	push	r11
    a7c2:	cf 92       	push	r12
    a7c4:	df 92       	push	r13
    a7c6:	ef 92       	push	r14
    a7c8:	ff 92       	push	r15
    a7ca:	0f 93       	push	r16
    a7cc:	1f 93       	push	r17
    a7ce:	cf 93       	push	r28
    a7d0:	df 93       	push	r29
    a7d2:	b6 2e       	mov	r11, r22
    a7d4:	94 2e       	mov	r9, r20
    a7d6:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    a7d8:	fc 01       	movw	r30, r24
    a7da:	e8 5a       	subi	r30, 0xA8	; 168
    a7dc:	f3 4f       	sbci	r31, 0xF3	; 243
    a7de:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    a7e0:	6e e1       	ldi	r22, 0x1E	; 30
    a7e2:	70 e0       	ldi	r23, 0x00	; 0
    a7e4:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    a7e8:	f8 2e       	mov	r15, r24
    a7ea:	ff 0c       	add	r15, r15
    a7ec:	ff 0c       	add	r15, r15
    a7ee:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    a7f0:	6d 5f       	subi	r22, 0xFD	; 253
    a7f2:	7f 4f       	sbci	r23, 0xFF	; 255
    a7f4:	16 2f       	mov	r17, r22
    a7f6:	11 0f       	add	r17, r17
    a7f8:	11 0f       	add	r17, r17
    a7fa:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    a7fc:	83 e0       	ldi	r24, 0x03	; 3
    a7fe:	d8 16       	cp	r13, r24
    a800:	19 f0       	breq	.+6      	; 0xa808 <collides_directional_tile+0x50>
    a802:	86 e0       	ldi	r24, 0x06	; 6
    a804:	d8 12       	cpse	r13, r24
    a806:	31 c0       	rjmp	.+98     	; 0xa86a <collides_directional_tile+0xb2>
    a808:	cf ef       	ldi	r28, 0xFF	; 255
    a80a:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    a80c:	c9 0d       	add	r28, r9
    a80e:	27 e0       	ldi	r18, 0x07	; 7
    a810:	72 2e       	mov	r7, r18
    a812:	7f 0c       	add	r7, r15
    a814:	37 e0       	ldi	r19, 0x07	; 7
    a816:	83 2e       	mov	r8, r19
    a818:	81 0e       	add	r8, r17
    a81a:	ac 2e       	mov	r10, r28
    a81c:	cb 2c       	mov	r12, r11
    a81e:	e9 2c       	mov	r14, r9
    a820:	0b 2d       	mov	r16, r11
    a822:	21 2f       	mov	r18, r17
    a824:	47 2d       	mov	r20, r7
    a826:	68 2d       	mov	r22, r8
    a828:	8f 2d       	mov	r24, r15
    a82a:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <LBLineIntersect>
    a82e:	81 11       	cpse	r24, r1
    a830:	58 c0       	rjmp	.+176    	; 0xa8e2 <collides_directional_tile+0x12a>
    a832:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    a834:	db 0d       	add	r29, r11
    a836:	a9 2c       	mov	r10, r9
    a838:	cd 2e       	mov	r12, r29
    a83a:	21 2f       	mov	r18, r17
    a83c:	47 2d       	mov	r20, r7
    a83e:	68 2d       	mov	r22, r8
    a840:	8f 2d       	mov	r24, r15
    a842:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <LBLineIntersect>
    a846:	81 11       	cpse	r24, r1
    a848:	4c c0       	rjmp	.+152    	; 0xa8e2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    a84a:	ac 2e       	mov	r10, r28
    a84c:	0d 2f       	mov	r16, r29
    a84e:	21 2f       	mov	r18, r17
    a850:	47 2d       	mov	r20, r7
    a852:	68 2d       	mov	r22, r8
    a854:	8f 2d       	mov	r24, r15
    a856:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <LBLineIntersect>
    a85a:	81 11       	cpse	r24, r1
    a85c:	42 c0       	rjmp	.+132    	; 0xa8e2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    a85e:	ec 2e       	mov	r14, r28
    a860:	0b 2d       	mov	r16, r11
    a862:	21 2f       	mov	r18, r17
    a864:	47 2d       	mov	r20, r7
    a866:	68 2d       	mov	r22, r8
    a868:	34 c0       	rjmp	.+104    	; 0xa8d2 <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    a86a:	8c ef       	ldi	r24, 0xFC	; 252
    a86c:	8d 0d       	add	r24, r13
    a86e:	82 30       	cpi	r24, 0x02	; 2
    a870:	b0 f5       	brcc	.+108    	; 0xa8de <collides_directional_tile+0x126>
    a872:	cf ef       	ldi	r28, 0xFF	; 255
    a874:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    a876:	c4 0f       	add	r28, r20
    a878:	87 e0       	ldi	r24, 0x07	; 7
    a87a:	78 2e       	mov	r7, r24
    a87c:	71 0e       	add	r7, r17
    a87e:	97 e0       	ldi	r25, 0x07	; 7
    a880:	89 2e       	mov	r8, r25
    a882:	8f 0c       	add	r8, r15
    a884:	ac 2e       	mov	r10, r28
    a886:	cb 2c       	mov	r12, r11
    a888:	e4 2e       	mov	r14, r20
    a88a:	0b 2d       	mov	r16, r11
    a88c:	27 2d       	mov	r18, r7
    a88e:	48 2d       	mov	r20, r8
    a890:	61 2f       	mov	r22, r17
    a892:	8f 2d       	mov	r24, r15
    a894:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <LBLineIntersect>
    a898:	81 11       	cpse	r24, r1
    a89a:	23 c0       	rjmp	.+70     	; 0xa8e2 <collides_directional_tile+0x12a>
    a89c:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    a89e:	db 0d       	add	r29, r11
    a8a0:	a9 2c       	mov	r10, r9
    a8a2:	cd 2e       	mov	r12, r29
    a8a4:	27 2d       	mov	r18, r7
    a8a6:	48 2d       	mov	r20, r8
    a8a8:	61 2f       	mov	r22, r17
    a8aa:	8f 2d       	mov	r24, r15
    a8ac:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <LBLineIntersect>
    a8b0:	81 11       	cpse	r24, r1
    a8b2:	17 c0       	rjmp	.+46     	; 0xa8e2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    a8b4:	ac 2e       	mov	r10, r28
    a8b6:	0d 2f       	mov	r16, r29
    a8b8:	27 2d       	mov	r18, r7
    a8ba:	48 2d       	mov	r20, r8
    a8bc:	61 2f       	mov	r22, r17
    a8be:	8f 2d       	mov	r24, r15
    a8c0:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <LBLineIntersect>
    a8c4:	81 11       	cpse	r24, r1
    a8c6:	0d c0       	rjmp	.+26     	; 0xa8e2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    a8c8:	ec 2e       	mov	r14, r28
    a8ca:	0b 2d       	mov	r16, r11
    a8cc:	27 2d       	mov	r18, r7
    a8ce:	48 2d       	mov	r20, r8
    a8d0:	61 2f       	mov	r22, r17
    a8d2:	8f 2d       	mov	r24, r15
    a8d4:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <LBLineIntersect>
    a8d8:	81 11       	cpse	r24, r1
    a8da:	03 c0       	rjmp	.+6      	; 0xa8e2 <collides_directional_tile+0x12a>
    a8dc:	03 c0       	rjmp	.+6      	; 0xa8e4 <collides_directional_tile+0x12c>
	}
	
	return 0;
    a8de:	80 e0       	ldi	r24, 0x00	; 0
    a8e0:	01 c0       	rjmp	.+2      	; 0xa8e4 <collides_directional_tile+0x12c>
    a8e2:	8d 2d       	mov	r24, r13
}
    a8e4:	df 91       	pop	r29
    a8e6:	cf 91       	pop	r28
    a8e8:	1f 91       	pop	r17
    a8ea:	0f 91       	pop	r16
    a8ec:	ff 90       	pop	r15
    a8ee:	ef 90       	pop	r14
    a8f0:	df 90       	pop	r13
    a8f2:	cf 90       	pop	r12
    a8f4:	bf 90       	pop	r11
    a8f6:	af 90       	pop	r10
    a8f8:	9f 90       	pop	r9
    a8fa:	8f 90       	pop	r8
    a8fc:	7f 90       	pop	r7
    a8fe:	08 95       	ret

0000a900 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    a900:	8f 92       	push	r8
    a902:	9f 92       	push	r9
    a904:	af 92       	push	r10
    a906:	cf 92       	push	r12
    a908:	ef 92       	push	r14
    a90a:	0f 93       	push	r16
    a90c:	1f 93       	push	r17
    a90e:	cf 93       	push	r28
    a910:	df 93       	push	r29
    a912:	4c 01       	movw	r8, r24
    a914:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a916:	20 e0       	ldi	r18, 0x00	; 0
    a918:	30 e0       	ldi	r19, 0x00	; 0
    a91a:	40 e0       	ldi	r20, 0x00	; 0
    a91c:	50 e4       	ldi	r21, 0x40	; 64
    a91e:	6f 81       	ldd	r22, Y+7	; 0x07
    a920:	78 85       	ldd	r23, Y+8	; 0x08
    a922:	89 85       	ldd	r24, Y+9	; 0x09
    a924:	9a 85       	ldd	r25, Y+10	; 0x0a
    a926:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a92a:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a92e:	e6 2e       	mov	r14, r22
    a930:	20 e0       	ldi	r18, 0x00	; 0
    a932:	30 e0       	ldi	r19, 0x00	; 0
    a934:	40 e0       	ldi	r20, 0x00	; 0
    a936:	50 e4       	ldi	r21, 0x40	; 64
    a938:	6b 81       	ldd	r22, Y+3	; 0x03
    a93a:	7c 81       	ldd	r23, Y+4	; 0x04
    a93c:	8d 81       	ldd	r24, Y+5	; 0x05
    a93e:	9e 81       	ldd	r25, Y+6	; 0x06
    a940:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a944:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a948:	06 2f       	mov	r16, r22
    a94a:	20 e0       	ldi	r18, 0x00	; 0
    a94c:	30 e0       	ldi	r19, 0x00	; 0
    a94e:	40 e8       	ldi	r20, 0x80	; 128
    a950:	5f e3       	ldi	r21, 0x3F	; 63
    a952:	f4 01       	movw	r30, r8
    a954:	67 81       	ldd	r22, Z+7	; 0x07
    a956:	70 85       	ldd	r23, Z+8	; 0x08
    a958:	81 85       	ldd	r24, Z+9	; 0x09
    a95a:	92 85       	ldd	r25, Z+10	; 0x0a
    a95c:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a960:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a964:	16 2f       	mov	r17, r22
    a966:	20 e0       	ldi	r18, 0x00	; 0
    a968:	30 e0       	ldi	r19, 0x00	; 0
    a96a:	40 e8       	ldi	r20, 0x80	; 128
    a96c:	5f e3       	ldi	r21, 0x3F	; 63
    a96e:	f4 01       	movw	r30, r8
    a970:	63 81       	ldd	r22, Z+3	; 0x03
    a972:	74 81       	ldd	r23, Z+4	; 0x04
    a974:	85 81       	ldd	r24, Z+5	; 0x05
    a976:	96 81       	ldd	r25, Z+6	; 0x06
    a978:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a97c:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a980:	86 2f       	mov	r24, r22
    a982:	94 e0       	ldi	r25, 0x04	; 4
    a984:	a9 2e       	mov	r10, r25
    a986:	24 e0       	ldi	r18, 0x04	; 4
    a988:	c2 2e       	mov	r12, r18
    a98a:	2e e0       	ldi	r18, 0x0E	; 14
    a98c:	4e e0       	ldi	r20, 0x0E	; 14
    a98e:	61 2f       	mov	r22, r17
    a990:	0e 94 bd 4c 	call	0x997a	; 0x997a <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a994:	88 23       	and	r24, r24
    a996:	41 f0       	breq	.+16     	; 0xa9a8 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a998:	f4 01       	movw	r30, r8
    a99a:	86 89       	ldd	r24, Z+22	; 0x16
    a99c:	88 37       	cpi	r24, 0x78	; 120
    a99e:	21 f4       	brne	.+8      	; 0xa9a8 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a9a0:	81 e0       	ldi	r24, 0x01	; 1
    a9a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    a9a4:	99 30       	cpi	r25, 0x09	; 9
    a9a6:	08 f4       	brcc	.+2      	; 0xa9aa <player_shot+0xaa>
    a9a8:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    a9aa:	df 91       	pop	r29
    a9ac:	cf 91       	pop	r28
    a9ae:	1f 91       	pop	r17
    a9b0:	0f 91       	pop	r16
    a9b2:	ef 90       	pop	r14
    a9b4:	cf 90       	pop	r12
    a9b6:	af 90       	pop	r10
    a9b8:	9f 90       	pop	r9
    a9ba:	8f 90       	pop	r8
    a9bc:	08 95       	ret

0000a9be <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    a9be:	af 92       	push	r10
    a9c0:	cf 92       	push	r12
    a9c2:	ef 92       	push	r14
    a9c4:	0f 93       	push	r16
    a9c6:	1f 93       	push	r17
    a9c8:	cf 93       	push	r28
    a9ca:	df 93       	push	r29
    a9cc:	ec 01       	movw	r28, r24
    a9ce:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    a9d0:	20 e0       	ldi	r18, 0x00	; 0
    a9d2:	30 e0       	ldi	r19, 0x00	; 0
    a9d4:	40 e0       	ldi	r20, 0x00	; 0
    a9d6:	50 e4       	ldi	r21, 0x40	; 64
    a9d8:	fb 01       	movw	r30, r22
    a9da:	67 81       	ldd	r22, Z+7	; 0x07
    a9dc:	70 85       	ldd	r23, Z+8	; 0x08
    a9de:	81 85       	ldd	r24, Z+9	; 0x09
    a9e0:	92 85       	ldd	r25, Z+10	; 0x0a
    a9e2:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    a9e6:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    a9ea:	e6 2e       	mov	r14, r22
    a9ec:	20 e0       	ldi	r18, 0x00	; 0
    a9ee:	30 e0       	ldi	r19, 0x00	; 0
    a9f0:	40 e0       	ldi	r20, 0x00	; 0
    a9f2:	50 e4       	ldi	r21, 0x40	; 64
    a9f4:	f8 01       	movw	r30, r16
    a9f6:	63 81       	ldd	r22, Z+3	; 0x03
    a9f8:	74 81       	ldd	r23, Z+4	; 0x04
    a9fa:	85 81       	ldd	r24, Z+5	; 0x05
    a9fc:	96 81       	ldd	r25, Z+6	; 0x06
    a9fe:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    aa02:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    aa06:	06 2f       	mov	r16, r22
    aa08:	6f 81       	ldd	r22, Y+7	; 0x07
    aa0a:	78 85       	ldd	r23, Y+8	; 0x08
    aa0c:	89 85       	ldd	r24, Y+9	; 0x09
    aa0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    aa10:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    aa14:	16 2f       	mov	r17, r22
    aa16:	6b 81       	ldd	r22, Y+3	; 0x03
    aa18:	7c 81       	ldd	r23, Y+4	; 0x04
    aa1a:	8d 81       	ldd	r24, Y+5	; 0x05
    aa1c:	9e 81       	ldd	r25, Y+6	; 0x06
    aa1e:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    aa22:	86 2f       	mov	r24, r22
    aa24:	94 e0       	ldi	r25, 0x04	; 4
    aa26:	a9 2e       	mov	r10, r25
    aa28:	24 e0       	ldi	r18, 0x04	; 4
    aa2a:	c2 2e       	mov	r12, r18
    aa2c:	28 e0       	ldi	r18, 0x08	; 8
    aa2e:	48 e0       	ldi	r20, 0x08	; 8
    aa30:	61 2f       	mov	r22, r17
    aa32:	0e 94 bd 4c 	call	0x997a	; 0x997a <LBCollides>
    aa36:	88 23       	and	r24, r24
    aa38:	39 f0       	breq	.+14     	; 0xaa48 <turret_shot+0x8a>
    aa3a:	91 e0       	ldi	r25, 0x01	; 1
    aa3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    aa3e:	81 11       	cpse	r24, r1
    aa40:	01 c0       	rjmp	.+2      	; 0xaa44 <turret_shot+0x86>
    aa42:	90 e0       	ldi	r25, 0x00	; 0
    aa44:	89 2f       	mov	r24, r25
    aa46:	01 c0       	rjmp	.+2      	; 0xaa4a <turret_shot+0x8c>
    aa48:	80 e0       	ldi	r24, 0x00	; 0
}
    aa4a:	df 91       	pop	r29
    aa4c:	cf 91       	pop	r28
    aa4e:	1f 91       	pop	r17
    aa50:	0f 91       	pop	r16
    aa52:	ef 90       	pop	r14
    aa54:	cf 90       	pop	r12
    aa56:	af 90       	pop	r10
    aa58:	08 95       	ret

0000aa5a <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    aa5a:	cf 92       	push	r12
    aa5c:	df 92       	push	r13
    aa5e:	ef 92       	push	r14
    aa60:	ff 92       	push	r15
    aa62:	cf 93       	push	r28
    aa64:	df 93       	push	r29
    aa66:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    aa68:	cb 80       	ldd	r12, Y+3	; 0x03
    aa6a:	dc 80       	ldd	r13, Y+4	; 0x04
    aa6c:	ed 80       	ldd	r14, Y+5	; 0x05
    aa6e:	fe 80       	ldd	r15, Y+6	; 0x06
    aa70:	20 e0       	ldi	r18, 0x00	; 0
    aa72:	30 e0       	ldi	r19, 0x00	; 0
    aa74:	a9 01       	movw	r20, r18
    aa76:	c7 01       	movw	r24, r14
    aa78:	b6 01       	movw	r22, r12
    aa7a:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    aa7e:	87 fd       	sbrc	r24, 7
    aa80:	31 c0       	rjmp	.+98     	; 0xaae4 <collision_detect_boundries+0x8a>
    aa82:	20 e0       	ldi	r18, 0x00	; 0
    aa84:	30 e0       	ldi	r19, 0x00	; 0
    aa86:	40 e0       	ldi	r20, 0x00	; 0
    aa88:	51 e4       	ldi	r21, 0x41	; 65
    aa8a:	c7 01       	movw	r24, r14
    aa8c:	b6 01       	movw	r22, r12
    aa8e:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    aa92:	20 e0       	ldi	r18, 0x00	; 0
    aa94:	30 e0       	ldi	r19, 0x00	; 0
    aa96:	40 e7       	ldi	r20, 0x70	; 112
    aa98:	53 e4       	ldi	r21, 0x43	; 67
    aa9a:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    aa9e:	18 16       	cp	r1, r24
    aaa0:	0c f1       	brlt	.+66     	; 0xaae4 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    aaa2:	cf 80       	ldd	r12, Y+7	; 0x07
    aaa4:	d8 84       	ldd	r13, Y+8	; 0x08
    aaa6:	e9 84       	ldd	r14, Y+9	; 0x09
    aaa8:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    aaaa:	20 e0       	ldi	r18, 0x00	; 0
    aaac:	30 e0       	ldi	r19, 0x00	; 0
    aaae:	40 ec       	ldi	r20, 0xC0	; 192
    aab0:	51 e4       	ldi	r21, 0x41	; 65
    aab2:	c7 01       	movw	r24, r14
    aab4:	b6 01       	movw	r22, r12
    aab6:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    aaba:	87 fd       	sbrc	r24, 7
    aabc:	13 c0       	rjmp	.+38     	; 0xaae4 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    aabe:	20 e0       	ldi	r18, 0x00	; 0
    aac0:	30 e0       	ldi	r19, 0x00	; 0
    aac2:	40 e0       	ldi	r20, 0x00	; 0
    aac4:	51 e4       	ldi	r21, 0x41	; 65
    aac6:	c7 01       	movw	r24, r14
    aac8:	b6 01       	movw	r22, r12
    aaca:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    aace:	c1 e0       	ldi	r28, 0x01	; 1
    aad0:	20 e0       	ldi	r18, 0x00	; 0
    aad2:	30 e0       	ldi	r19, 0x00	; 0
    aad4:	40 e6       	ldi	r20, 0x60	; 96
    aad6:	53 e4       	ldi	r21, 0x43	; 67
    aad8:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    aadc:	18 16       	cp	r1, r24
    aade:	1c f0       	brlt	.+6      	; 0xaae6 <collision_detect_boundries+0x8c>
    aae0:	c0 e0       	ldi	r28, 0x00	; 0
    aae2:	01 c0       	rjmp	.+2      	; 0xaae6 <collision_detect_boundries+0x8c>
	{
		return 1;
    aae4:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    aae6:	8c 2f       	mov	r24, r28
    aae8:	df 91       	pop	r29
    aaea:	cf 91       	pop	r28
    aaec:	ff 90       	pop	r15
    aaee:	ef 90       	pop	r14
    aaf0:	df 90       	pop	r13
    aaf2:	cf 90       	pop	r12
    aaf4:	08 95       	ret

0000aaf6 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    aaf6:	1f 93       	push	r17
    aaf8:	cf 93       	push	r28
    aafa:	df 93       	push	r29
    aafc:	9c 01       	movw	r18, r24
    aafe:	fb 01       	movw	r30, r22
    ab00:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    ab02:	6e e1       	ldi	r22, 0x1E	; 30
    ab04:	70 e0       	ldi	r23, 0x00	; 0
    ab06:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    ab0a:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    ab0c:	63 e0       	ldi	r22, 0x03	; 3
    ab0e:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    ab10:	e9 01       	movw	r28, r18
    ab12:	c8 5a       	subi	r28, 0xA8	; 168
    ab14:	d3 4f       	sbci	r29, 0xF3	; 243
    ab16:	49 81       	ldd	r20, Y+1	; 0x01
    ab18:	44 23       	and	r20, r20
    ab1a:	71 f0       	breq	.+28     	; 0xab38 <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    ab1c:	e9 01       	movw	r28, r18
    ab1e:	c7 5a       	subi	r28, 0xA7	; 167
    ab20:	d3 4f       	sbci	r29, 0xF3	; 243
    ab22:	49 81       	ldd	r20, Y+1	; 0x01
    ab24:	44 23       	and	r20, r20
    ab26:	91 f0       	breq	.+36     	; 0xab4c <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    ab28:	e9 01       	movw	r28, r18
    ab2a:	ca 58       	subi	r28, 0x8A	; 138
    ab2c:	d3 4f       	sbci	r29, 0xF3	; 243
    ab2e:	49 81       	ldd	r20, Y+1	; 0x01
    ab30:	41 11       	cpse	r20, r1
    ab32:	04 c0       	rjmp	.+8      	; 0xab3c <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    ab34:	64 e0       	ldi	r22, 0x04	; 4
    ab36:	69 0f       	add	r22, r25
    ab38:	af 01       	movw	r20, r30
    ab3a:	0a c0       	rjmp	.+20     	; 0xab50 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    ab3c:	e9 01       	movw	r28, r18
    ab3e:	c9 58       	subi	r28, 0x89	; 137
    ab40:	d3 4f       	sbci	r29, 0xF3	; 243
    ab42:	29 81       	ldd	r18, Y+1	; 0x01
    ab44:	21 11       	cpse	r18, r1
    ab46:	07 c0       	rjmp	.+14     	; 0xab56 <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    ab48:	64 e0       	ldi	r22, 0x04	; 4
    ab4a:	69 0f       	add	r22, r25
    ab4c:	af 01       	movw	r20, r30
    ab4e:	8f 5f       	subi	r24, 0xFF	; 255
    ab50:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
		level.level_map[tile_index+31] = item_type;
    ab54:	19 83       	std	Y+1, r17	; 0x01
	}
}
    ab56:	df 91       	pop	r29
    ab58:	cf 91       	pop	r28
    ab5a:	1f 91       	pop	r17
    ab5c:	08 95       	ret

0000ab5e <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    ab5e:	ff 92       	push	r15
    ab60:	0f 93       	push	r16
    ab62:	1f 93       	push	r17
    ab64:	cf 93       	push	r28
    ab66:	df 93       	push	r29
    ab68:	ec 01       	movw	r28, r24
    ab6a:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    ab6c:	20 e0       	ldi	r18, 0x00	; 0
    ab6e:	30 e0       	ldi	r19, 0x00	; 0
    ab70:	40 e0       	ldi	r20, 0x00	; 0
    ab72:	5e e3       	ldi	r21, 0x3E	; 62
    ab74:	6f 81       	ldd	r22, Y+7	; 0x07
    ab76:	78 85       	ldd	r23, Y+8	; 0x08
    ab78:	89 85       	ldd	r24, Y+9	; 0x09
    ab7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    ab7c:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    ab80:	20 e0       	ldi	r18, 0x00	; 0
    ab82:	30 e0       	ldi	r19, 0x00	; 0
    ab84:	40 e4       	ldi	r20, 0x40	; 64
    ab86:	50 e4       	ldi	r21, 0x40	; 64
    ab88:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    ab8c:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    ab90:	8e e1       	ldi	r24, 0x1E	; 30
    ab92:	68 9f       	mul	r22, r24
    ab94:	80 01       	movw	r16, r0
    ab96:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    ab98:	20 e0       	ldi	r18, 0x00	; 0
    ab9a:	30 e0       	ldi	r19, 0x00	; 0
    ab9c:	40 e0       	ldi	r20, 0x00	; 0
    ab9e:	5e e3       	ldi	r21, 0x3E	; 62
    aba0:	6b 81       	ldd	r22, Y+3	; 0x03
    aba2:	7c 81       	ldd	r23, Y+4	; 0x04
    aba4:	8d 81       	ldd	r24, Y+5	; 0x05
    aba6:	9e 81       	ldd	r25, Y+6	; 0x06
    aba8:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    abac:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    abb0:	06 0f       	add	r16, r22
    abb2:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    abb4:	89 8d       	ldd	r24, Y+25	; 0x19
    abb6:	88 23       	and	r24, r24
    abb8:	79 f0       	breq	.+30     	; 0xabd8 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    abba:	40 e0       	ldi	r20, 0x00	; 0
    abbc:	50 e0       	ldi	r21, 0x00	; 0
    abbe:	61 e0       	ldi	r22, 0x01	; 1
    abc0:	8a e0       	ldi	r24, 0x0A	; 10
    abc2:	8f 0d       	add	r24, r15
    abc4:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    abc8:	47 e0       	ldi	r20, 0x07	; 7
    abca:	6f eb       	ldi	r22, 0xBF	; 191
    abcc:	7a e6       	ldi	r23, 0x6A	; 106
    abce:	c8 01       	movw	r24, r16
    abd0:	0e 94 7b 55 	call	0xaaf6	; 0xaaf6 <drop_item>
		player->max_speed = MAX_SPEED;
    abd4:	82 e3       	ldi	r24, 0x32	; 50
    abd6:	8f 8b       	std	Y+23, r24	; 0x17
	}
	if (player->has_rocket)
    abd8:	88 8d       	ldd	r24, Y+24	; 0x18
    abda:	88 23       	and	r24, r24
    abdc:	69 f0       	breq	.+26     	; 0xabf8 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    abde:	40 e0       	ldi	r20, 0x00	; 0
    abe0:	50 e0       	ldi	r21, 0x00	; 0
    abe2:	61 e0       	ldi	r22, 0x01	; 1
    abe4:	8b e0       	ldi	r24, 0x0B	; 11
    abe6:	8f 0d       	add	r24, r15
    abe8:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    abec:	49 e0       	ldi	r20, 0x09	; 9
    abee:	69 eb       	ldi	r22, 0xB9	; 185
    abf0:	7a e6       	ldi	r23, 0x6A	; 106
    abf2:	c8 01       	movw	r24, r16
    abf4:	0e 94 7b 55 	call	0xaaf6	; 0xaaf6 <drop_item>
	}
	player->has_over_speed = false;
    abf8:	19 8e       	std	Y+25, r1	; 0x19
	player->has_rocket = false;
    abfa:	18 8e       	std	Y+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    abfc:	8d 89       	ldd	r24, Y+21	; 0x15
    abfe:	81 60       	ori	r24, 0x01	; 1
    ac00:	8d 8b       	std	Y+21, r24	; 0x15
}
    ac02:	df 91       	pop	r29
    ac04:	cf 91       	pop	r28
    ac06:	1f 91       	pop	r17
    ac08:	0f 91       	pop	r16
    ac0a:	ff 90       	pop	r15
    ac0c:	08 95       	ret

0000ac0e <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    ac0e:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    ac10:	70 e0       	ldi	r23, 0x00	; 0
    ac12:	8e e1       	ldi	r24, 0x1E	; 30
    ac14:	48 9f       	mul	r20, r24
    ac16:	60 0d       	add	r22, r0
    ac18:	71 1d       	adc	r23, r1
    ac1a:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ac1c:	21 11       	cpse	r18, r1
    ac1e:	05 c0       	rjmp	.+10     	; 0xac2a <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    ac20:	71 83       	std	Z+1, r23	; 0x01
    ac22:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ac24:	6f 5f       	subi	r22, 0xFF	; 255
    ac26:	7f 4f       	sbci	r23, 0xFF	; 255
    ac28:	0c c0       	rjmp	.+24     	; 0xac42 <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    ac2a:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    ac2c:	21 30       	cpi	r18, 0x01	; 1
    ac2e:	11 f4       	brne	.+4      	; 0xac34 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    ac30:	01 96       	adiw	r24, 0x01	; 1
    ac32:	03 c0       	rjmp	.+6      	; 0xac3a <get_interesting_tile_indexes_shot+0x2c>
    ac34:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    ac36:	22 30       	cpi	r18, 0x02	; 2
    ac38:	39 f4       	brne	.+14     	; 0xac48 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    ac3a:	91 83       	std	Z+1, r25	; 0x01
    ac3c:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    ac3e:	61 5e       	subi	r22, 0xE1	; 225
    ac40:	7f 4f       	sbci	r23, 0xFF	; 255
    ac42:	73 83       	std	Z+3, r23	; 0x03
    ac44:	62 83       	std	Z+2, r22	; 0x02
    ac46:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    ac48:	71 83       	std	Z+1, r23	; 0x01
    ac4a:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    ac4c:	93 83       	std	Z+3, r25	; 0x03
    ac4e:	82 83       	std	Z+2, r24	; 0x02
    ac50:	08 95       	ret

0000ac52 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    ac52:	ef 92       	push	r14
    ac54:	ff 92       	push	r15
    ac56:	0f 93       	push	r16
    ac58:	1f 93       	push	r17
    ac5a:	cf 93       	push	r28
    ac5c:	df 93       	push	r29
    ac5e:	ec 01       	movw	r28, r24
    ac60:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    ac62:	8e e1       	ldi	r24, 0x1E	; 30
    ac64:	e8 2e       	mov	r14, r24
    ac66:	f1 2c       	mov	r15, r1
    ac68:	cb 01       	movw	r24, r22
    ac6a:	b7 01       	movw	r22, r14
    ac6c:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    ac70:	6d 5f       	subi	r22, 0xFD	; 253
    ac72:	40 e0       	ldi	r20, 0x00	; 0
    ac74:	50 e0       	ldi	r21, 0x00	; 0
    ac76:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    ac7a:	88 81       	ld	r24, Y
    ac7c:	fe 01       	movw	r30, r28
    ac7e:	9e e0       	ldi	r25, 0x0E	; 14
    ac80:	89 9f       	mul	r24, r25
    ac82:	e0 0d       	add	r30, r0
    ac84:	f1 1d       	adc	r31, r1
    ac86:	11 24       	eor	r1, r1
    ac88:	85 85       	ldd	r24, Z+13	; 0x0d
    ac8a:	96 85       	ldd	r25, Z+14	; 0x0e
    ac8c:	00 97       	sbiw	r24, 0x00	; 0
    ac8e:	41 f0       	breq	.+16     	; 0xaca0 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    ac90:	b7 01       	movw	r22, r14
    ac92:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    ac96:	6d 5f       	subi	r22, 0xFD	; 253
    ac98:	40 e0       	ldi	r20, 0x00	; 0
    ac9a:	50 e0       	ldi	r21, 0x00	; 0
    ac9c:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    aca0:	88 81       	ld	r24, Y
    aca2:	fe 01       	movw	r30, r28
    aca4:	9e e0       	ldi	r25, 0x0E	; 14
    aca6:	89 9f       	mul	r24, r25
    aca8:	e0 0d       	add	r30, r0
    acaa:	f1 1d       	adc	r31, r1
    acac:	11 24       	eor	r1, r1
    acae:	16 87       	std	Z+14, r17	; 0x0e
    acb0:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    acb2:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    acb4:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    acb6:	82 30       	cpi	r24, 0x02	; 2
    acb8:	11 f0       	breq	.+4      	; 0xacbe <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    acba:	88 83       	st	Y, r24
    acbc:	01 c0       	rjmp	.+2      	; 0xacc0 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    acbe:	18 82       	st	Y, r1
	}
}
    acc0:	df 91       	pop	r29
    acc2:	cf 91       	pop	r28
    acc4:	1f 91       	pop	r17
    acc6:	0f 91       	pop	r16
    acc8:	ff 90       	pop	r15
    acca:	ef 90       	pop	r14
    accc:	08 95       	ret

0000acce <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    acce:	fb 01       	movw	r30, r22
	switch (tile_type)
    acd0:	84 30       	cpi	r24, 0x04	; 4
    acd2:	71 f0       	breq	.+28     	; 0xacf0 <richochet+0x22>
    acd4:	18 f4       	brcc	.+6      	; 0xacdc <richochet+0xe>
    acd6:	83 30       	cpi	r24, 0x03	; 3
    acd8:	31 f0       	breq	.+12     	; 0xace6 <richochet+0x18>
    acda:	08 95       	ret
    acdc:	85 30       	cpi	r24, 0x05	; 5
    acde:	99 f0       	breq	.+38     	; 0xad06 <richochet+0x38>
    ace0:	86 30       	cpi	r24, 0x06	; 6
    ace2:	59 f0       	breq	.+22     	; 0xacfa <richochet+0x2c>
    ace4:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ace6:	80 81       	ld	r24, Z
    ace8:	8d 7f       	andi	r24, 0xFD	; 253
    acea:	29 f4       	brne	.+10     	; 0xacf6 <richochet+0x28>
				sprite->direction = D_RIGHT;
    acec:	81 e0       	ldi	r24, 0x01	; 1
    acee:	09 c0       	rjmp	.+18     	; 0xad02 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    acf0:	80 81       	ld	r24, Z
    acf2:	8d 7f       	andi	r24, 0xFD	; 253
    acf4:	29 f0       	breq	.+10     	; 0xad00 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    acf6:	82 e0       	ldi	r24, 0x02	; 2
    acf8:	04 c0       	rjmp	.+8      	; 0xad02 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    acfa:	80 81       	ld	r24, Z
    acfc:	8d 7f       	andi	r24, 0xFD	; 253
    acfe:	31 f4       	brne	.+12     	; 0xad0c <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    ad00:	83 e0       	ldi	r24, 0x03	; 3
    ad02:	80 83       	st	Z, r24
    ad04:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ad06:	80 81       	ld	r24, Z
    ad08:	8d 7f       	andi	r24, 0xFD	; 253
    ad0a:	81 f3       	breq	.-32     	; 0xacec <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    ad0c:	10 82       	st	Z, r1
    ad0e:	08 95       	ret

0000ad10 <get_interesting_tile_indexes>:
        LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_METAL);
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    ad10:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    ad12:	70 e0       	ldi	r23, 0x00	; 0
    ad14:	8e e1       	ldi	r24, 0x1E	; 30
    ad16:	48 9f       	mul	r20, r24
    ad18:	60 0d       	add	r22, r0
    ad1a:	71 1d       	adc	r23, r1
    ad1c:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ad1e:	21 11       	cpse	r18, r1
    ad20:	09 c0       	rjmp	.+18     	; 0xad34 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    ad22:	71 83       	std	Z+1, r23	; 0x01
    ad24:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ad26:	cb 01       	movw	r24, r22
    ad28:	01 96       	adiw	r24, 0x01	; 1
    ad2a:	93 83       	std	Z+3, r25	; 0x03
    ad2c:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    ad2e:	6e 5f       	subi	r22, 0xFE	; 254
    ad30:	7f 4f       	sbci	r23, 0xFF	; 255
    ad32:	12 c0       	rjmp	.+36     	; 0xad58 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    ad34:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    ad36:	21 30       	cpi	r18, 0x01	; 1
    ad38:	29 f4       	brne	.+10     	; 0xad44 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    ad3a:	02 96       	adiw	r24, 0x02	; 2
    ad3c:	91 83       	std	Z+1, r25	; 0x01
    ad3e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    ad40:	4e 96       	adiw	r24, 0x1e	; 30
    ad42:	06 c0       	rjmp	.+12     	; 0xad50 <get_interesting_tile_indexes+0x40>
    ad44:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    ad46:	22 30       	cpi	r18, 0x02	; 2
    ad48:	51 f4       	brne	.+20     	; 0xad5e <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    ad4a:	91 83       	std	Z+1, r25	; 0x01
    ad4c:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    ad4e:	01 96       	adiw	r24, 0x01	; 1
    ad50:	93 83       	std	Z+3, r25	; 0x03
    ad52:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    ad54:	62 5c       	subi	r22, 0xC2	; 194
    ad56:	7f 4f       	sbci	r23, 0xFF	; 255
    ad58:	75 83       	std	Z+5, r23	; 0x05
    ad5a:	64 83       	std	Z+4, r22	; 0x04
    ad5c:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    ad5e:	71 83       	std	Z+1, r23	; 0x01
    ad60:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    ad62:	62 5e       	subi	r22, 0xE2	; 226
    ad64:	7f 4f       	sbci	r23, 0xFF	; 255
    ad66:	73 83       	std	Z+3, r23	; 0x03
    ad68:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    ad6a:	95 83       	std	Z+5, r25	; 0x05
    ad6c:	84 83       	std	Z+4, r24	; 0x04
    ad6e:	08 95       	ret

0000ad70 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    ad70:	1f 93       	push	r17
    ad72:	cf 93       	push	r28
    ad74:	df 93       	push	r29
    ad76:	fc 01       	movw	r30, r24
    ad78:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    ad7a:	55 96       	adiw	r26, 0x15	; 21
    ad7c:	8c 91       	ld	r24, X
    ad7e:	55 97       	sbiw	r26, 0x15	; 21
    ad80:	80 fd       	sbrc	r24, 0
    ad82:	13 c0       	rjmp	.+38     	; 0xadaa <explode_player+0x3a>
    ad84:	12 2f       	mov	r17, r18
    ad86:	64 2f       	mov	r22, r20
    ad88:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    ad8a:	80 89       	ldd	r24, Z+16	; 0x10
    ad8c:	8f 5f       	subi	r24, 0xFF	; 255
    ad8e:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    ad90:	87 85       	ldd	r24, Z+15	; 0x0f
    ad92:	8f 5f       	subi	r24, 0xFF	; 255
    ad94:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    ad96:	cf 01       	movw	r24, r30
    ad98:	0e 94 b5 51 	call	0xa36a	; 0xa36a <render_score>
		kill_player(other_player, other_player_hud_x);
    ad9c:	61 2f       	mov	r22, r17
    ad9e:	ce 01       	movw	r24, r28
	}
}
    ada0:	df 91       	pop	r29
    ada2:	cf 91       	pop	r28
    ada4:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    ada6:	0c 94 af 55 	jmp	0xab5e	; 0xab5e <kill_player>
	}
}
    adaa:	df 91       	pop	r29
    adac:	cf 91       	pop	r28
    adae:	1f 91       	pop	r17
    adb0:	08 95       	ret

0000adb2 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    adb2:	cf 92       	push	r12
    adb4:	df 92       	push	r13
    adb6:	ef 92       	push	r14
    adb8:	ff 92       	push	r15
    adba:	cf 93       	push	r28
    adbc:	df 93       	push	r29
    adbe:	ec 01       	movw	r28, r24
    adc0:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    adc2:	98 81       	ld	r25, Y
    adc4:	9d 7f       	andi	r25, 0xFD	; 253
    adc6:	09 f0       	breq	.+2      	; 0xadca <slide+0x18>
    adc8:	54 c0       	rjmp	.+168    	; 0xae72 <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    adca:	ca 01       	movw	r24, r20
    adcc:	6e e1       	ldi	r22, 0x1E	; 30
    adce:	70 e0       	ldi	r23, 0x00	; 0
    add0:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    add4:	88 0f       	add	r24, r24
    add6:	88 0f       	add	r24, r24
    add8:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    adda:	21 11       	cpse	r18, r1
    addc:	22 c0       	rjmp	.+68     	; 0xae22 <slide+0x70>
    adde:	cb 80       	ldd	r12, Y+3	; 0x03
    ade0:	dc 80       	ldd	r13, Y+4	; 0x04
    ade2:	ed 80       	ldd	r14, Y+5	; 0x05
    ade4:	fe 80       	ldd	r15, Y+6	; 0x06
    ade6:	68 2f       	mov	r22, r24
    ade8:	70 e0       	ldi	r23, 0x00	; 0
    adea:	80 e0       	ldi	r24, 0x00	; 0
    adec:	90 e0       	ldi	r25, 0x00	; 0
    adee:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    adf2:	9b 01       	movw	r18, r22
    adf4:	ac 01       	movw	r20, r24
    adf6:	c7 01       	movw	r24, r14
    adf8:	b6 01       	movw	r22, r12
    adfa:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    adfe:	20 e0       	ldi	r18, 0x00	; 0
    ae00:	30 e0       	ldi	r19, 0x00	; 0
    ae02:	40 e8       	ldi	r20, 0x80	; 128
    ae04:	50 e4       	ldi	r21, 0x40	; 64
    ae06:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    ae0a:	18 16       	cp	r1, r24
    ae0c:	0c f0       	brlt	.+2      	; 0xae10 <slide+0x5e>
    ae0e:	85 c0       	rjmp	.+266    	; 0xaf1a <slide+0x168>
			player->shared.x++; 
    ae10:	20 e0       	ldi	r18, 0x00	; 0
    ae12:	30 e0       	ldi	r19, 0x00	; 0
    ae14:	40 e8       	ldi	r20, 0x80	; 128
    ae16:	5f e3       	ldi	r21, 0x3F	; 63
    ae18:	c7 01       	movw	r24, r14
    ae1a:	b6 01       	movw	r22, r12
    ae1c:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    ae20:	23 c0       	rjmp	.+70     	; 0xae68 <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    ae22:	22 30       	cpi	r18, 0x02	; 2
    ae24:	09 f0       	breq	.+2      	; 0xae28 <slide+0x76>
    ae26:	79 c0       	rjmp	.+242    	; 0xaf1a <slide+0x168>
    ae28:	cb 80       	ldd	r12, Y+3	; 0x03
    ae2a:	dc 80       	ldd	r13, Y+4	; 0x04
    ae2c:	ed 80       	ldd	r14, Y+5	; 0x05
    ae2e:	fe 80       	ldd	r15, Y+6	; 0x06
    ae30:	68 2f       	mov	r22, r24
    ae32:	70 e0       	ldi	r23, 0x00	; 0
    ae34:	80 e0       	ldi	r24, 0x00	; 0
    ae36:	90 e0       	ldi	r25, 0x00	; 0
    ae38:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    ae3c:	9b 01       	movw	r18, r22
    ae3e:	ac 01       	movw	r20, r24
    ae40:	c7 01       	movw	r24, r14
    ae42:	b6 01       	movw	r22, r12
    ae44:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    ae48:	20 e0       	ldi	r18, 0x00	; 0
    ae4a:	30 e0       	ldi	r19, 0x00	; 0
    ae4c:	40 e4       	ldi	r20, 0x40	; 64
    ae4e:	51 ec       	ldi	r21, 0xC1	; 193
    ae50:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    ae54:	87 ff       	sbrs	r24, 7
    ae56:	61 c0       	rjmp	.+194    	; 0xaf1a <slide+0x168>
			player->shared.x--;
    ae58:	20 e0       	ldi	r18, 0x00	; 0
    ae5a:	30 e0       	ldi	r19, 0x00	; 0
    ae5c:	40 e8       	ldi	r20, 0x80	; 128
    ae5e:	5f e3       	ldi	r21, 0x3F	; 63
    ae60:	c7 01       	movw	r24, r14
    ae62:	b6 01       	movw	r22, r12
    ae64:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    ae68:	6b 83       	std	Y+3, r22	; 0x03
    ae6a:	7c 83       	std	Y+4, r23	; 0x04
    ae6c:	8d 83       	std	Y+5, r24	; 0x05
    ae6e:	9e 83       	std	Y+6, r25	; 0x06
    ae70:	54 c0       	rjmp	.+168    	; 0xaf1a <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    ae72:	ca 01       	movw	r24, r20
    ae74:	6e e1       	ldi	r22, 0x1E	; 30
    ae76:	70 e0       	ldi	r23, 0x00	; 0
    ae78:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    ae7c:	ab 01       	movw	r20, r22
    ae7e:	4d 5f       	subi	r20, 0xFD	; 253
    ae80:	5f 4f       	sbci	r21, 0xFF	; 255
    ae82:	44 0f       	add	r20, r20
    ae84:	44 0f       	add	r20, r20
    ae86:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    ae88:	21 11       	cpse	r18, r1
    ae8a:	21 c0       	rjmp	.+66     	; 0xaece <slide+0x11c>
    ae8c:	cf 80       	ldd	r12, Y+7	; 0x07
    ae8e:	d8 84       	ldd	r13, Y+8	; 0x08
    ae90:	e9 84       	ldd	r14, Y+9	; 0x09
    ae92:	fa 84       	ldd	r15, Y+10	; 0x0a
    ae94:	64 2f       	mov	r22, r20
    ae96:	70 e0       	ldi	r23, 0x00	; 0
    ae98:	80 e0       	ldi	r24, 0x00	; 0
    ae9a:	90 e0       	ldi	r25, 0x00	; 0
    ae9c:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    aea0:	9b 01       	movw	r18, r22
    aea2:	ac 01       	movw	r20, r24
    aea4:	c7 01       	movw	r24, r14
    aea6:	b6 01       	movw	r22, r12
    aea8:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    aeac:	20 e0       	ldi	r18, 0x00	; 0
    aeae:	30 e0       	ldi	r19, 0x00	; 0
    aeb0:	40 e8       	ldi	r20, 0x80	; 128
    aeb2:	50 e4       	ldi	r21, 0x40	; 64
    aeb4:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    aeb8:	18 16       	cp	r1, r24
    aeba:	7c f5       	brge	.+94     	; 0xaf1a <slide+0x168>
			player->shared.y++;
    aebc:	20 e0       	ldi	r18, 0x00	; 0
    aebe:	30 e0       	ldi	r19, 0x00	; 0
    aec0:	40 e8       	ldi	r20, 0x80	; 128
    aec2:	5f e3       	ldi	r21, 0x3F	; 63
    aec4:	c7 01       	movw	r24, r14
    aec6:	b6 01       	movw	r22, r12
    aec8:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    aecc:	22 c0       	rjmp	.+68     	; 0xaf12 <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    aece:	22 30       	cpi	r18, 0x02	; 2
    aed0:	21 f5       	brne	.+72     	; 0xaf1a <slide+0x168>
    aed2:	cf 80       	ldd	r12, Y+7	; 0x07
    aed4:	d8 84       	ldd	r13, Y+8	; 0x08
    aed6:	e9 84       	ldd	r14, Y+9	; 0x09
    aed8:	fa 84       	ldd	r15, Y+10	; 0x0a
    aeda:	64 2f       	mov	r22, r20
    aedc:	70 e0       	ldi	r23, 0x00	; 0
    aede:	80 e0       	ldi	r24, 0x00	; 0
    aee0:	90 e0       	ldi	r25, 0x00	; 0
    aee2:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    aee6:	9b 01       	movw	r18, r22
    aee8:	ac 01       	movw	r20, r24
    aeea:	c7 01       	movw	r24, r14
    aeec:	b6 01       	movw	r22, r12
    aeee:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    aef2:	20 e0       	ldi	r18, 0x00	; 0
    aef4:	30 e0       	ldi	r19, 0x00	; 0
    aef6:	40 e4       	ldi	r20, 0x40	; 64
    aef8:	51 ec       	ldi	r21, 0xC1	; 193
    aefa:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    aefe:	87 ff       	sbrs	r24, 7
    af00:	0c c0       	rjmp	.+24     	; 0xaf1a <slide+0x168>
			player->shared.y--;
    af02:	20 e0       	ldi	r18, 0x00	; 0
    af04:	30 e0       	ldi	r19, 0x00	; 0
    af06:	40 e8       	ldi	r20, 0x80	; 128
    af08:	5f e3       	ldi	r21, 0x3F	; 63
    af0a:	c7 01       	movw	r24, r14
    af0c:	b6 01       	movw	r22, r12
    af0e:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    af12:	6f 83       	std	Y+7, r22	; 0x07
    af14:	78 87       	std	Y+8, r23	; 0x08
    af16:	89 87       	std	Y+9, r24	; 0x09
    af18:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    af1a:	df 91       	pop	r29
    af1c:	cf 91       	pop	r28
    af1e:	ff 90       	pop	r15
    af20:	ef 90       	pop	r14
    af22:	df 90       	pop	r13
    af24:	cf 90       	pop	r12
    af26:	08 95       	ret

0000af28 <load_level_tiles>:
	}
	return explode;
}

void load_level_tiles(u8 blank)
{
    af28:	ef 92       	push	r14
    af2a:	ff 92       	push	r15
    af2c:	1f 93       	push	r17
    af2e:	cf 93       	push	r28
    af30:	df 93       	push	r29
    af32:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    af34:	c0 e0       	ldi	r28, 0x00	; 0
    af36:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    af38:	8e e1       	ldi	r24, 0x1E	; 30
    af3a:	e8 2e       	mov	r14, r24
    af3c:	f1 2c       	mov	r15, r1
    af3e:	ce 01       	movw	r24, r28
    af40:	b7 01       	movw	r22, r14
    af42:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
		y = 3 + i / 30;
    af46:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    af48:	11 23       	and	r17, r17
    af4a:	19 f0       	breq	.+6      	; 0xaf52 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    af4c:	4c e5       	ldi	r20, 0x5C	; 92
    af4e:	5b e6       	ldi	r21, 0x6B	; 107
    af50:	2d c0       	rjmp	.+90     	; 0xafac <load_level_tiles+0x84>
    af52:	fe 01       	movw	r30, r28
    af54:	e8 5a       	subi	r30, 0xA8	; 168
    af56:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    af58:	91 81       	ldd	r25, Z+1	; 0x01
    af5a:	97 30       	cpi	r25, 0x07	; 7
    af5c:	99 f1       	breq	.+102    	; 0xafc4 <load_level_tiles+0x9c>
    af5e:	88 f4       	brcc	.+34     	; 0xaf82 <load_level_tiles+0x5a>
    af60:	93 30       	cpi	r25, 0x03	; 3
    af62:	39 f1       	breq	.+78     	; 0xafb2 <load_level_tiles+0x8a>
    af64:	40 f4       	brcc	.+16     	; 0xaf76 <load_level_tiles+0x4e>
    af66:	91 30       	cpi	r25, 0x01	; 1
    af68:	f9 f0       	breq	.+62     	; 0xafa8 <load_level_tiles+0x80>
    af6a:	92 30       	cpi	r25, 0x02	; 2
    af6c:	09 f0       	breq	.+2      	; 0xaf70 <load_level_tiles+0x48>
    af6e:	3f c0       	rjmp	.+126    	; 0xafee <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    af70:	42 ec       	ldi	r20, 0xC2	; 194
    af72:	5a e6       	ldi	r21, 0x6A	; 106
    af74:	1b c0       	rjmp	.+54     	; 0xafac <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    af76:	95 30       	cpi	r25, 0x05	; 5
    af78:	f9 f0       	breq	.+62     	; 0xafb8 <load_level_tiles+0x90>
    af7a:	08 f5       	brcc	.+66     	; 0xafbe <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    af7c:	47 ea       	ldi	r20, 0xA7	; 167
    af7e:	5a e6       	ldi	r21, 0x6A	; 106
    af80:	15 c0       	rjmp	.+42     	; 0xafac <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    af82:	9c 32       	cpi	r25, 0x2C	; 44
    af84:	59 f1       	breq	.+86     	; 0xafdc <load_level_tiles+0xb4>
    af86:	38 f4       	brcc	.+14     	; 0xaf96 <load_level_tiles+0x6e>
    af88:	98 30       	cpi	r25, 0x08	; 8
    af8a:	f9 f0       	breq	.+62     	; 0xafca <load_level_tiles+0xa2>
    af8c:	99 30       	cpi	r25, 0x09	; 9
    af8e:	79 f5       	brne	.+94     	; 0xafee <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    af90:	49 eb       	ldi	r20, 0xB9	; 185
    af92:	5a e6       	ldi	r21, 0x6A	; 106
    af94:	0b c0       	rjmp	.+22     	; 0xafac <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    af96:	92 34       	cpi	r25, 0x42	; 66
    af98:	d9 f0       	breq	.+54     	; 0xafd0 <load_level_tiles+0xa8>
    af9a:	9d 34       	cpi	r25, 0x4D	; 77
    af9c:	e1 f0       	breq	.+56     	; 0xafd6 <load_level_tiles+0xae>
    af9e:	97 33       	cpi	r25, 0x37	; 55
    afa0:	31 f5       	brne	.+76     	; 0xafee <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    afa2:	4b e9       	ldi	r20, 0x9B	; 155
    afa4:	5a e6       	ldi	r21, 0x6A	; 106
    afa6:	02 c0       	rjmp	.+4      	; 0xafac <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    afa8:	45 ec       	ldi	r20, 0xC5	; 197
    afaa:	5a e6       	ldi	r21, 0x6A	; 106
    afac:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
    afb0:	22 c0       	rjmp	.+68     	; 0xaff6 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    afb2:	4d ea       	ldi	r20, 0xAD	; 173
    afb4:	5a e6       	ldi	r21, 0x6A	; 106
    afb6:	fa cf       	rjmp	.-12     	; 0xafac <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    afb8:	44 ea       	ldi	r20, 0xA4	; 164
    afba:	5a e6       	ldi	r21, 0x6A	; 106
    afbc:	f7 cf       	rjmp	.-18     	; 0xafac <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    afbe:	4a ea       	ldi	r20, 0xAA	; 170
    afc0:	5a e6       	ldi	r21, 0x6A	; 106
    afc2:	f4 cf       	rjmp	.-24     	; 0xafac <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    afc4:	4f eb       	ldi	r20, 0xBF	; 191
    afc6:	5a e6       	ldi	r21, 0x6A	; 106
    afc8:	f1 cf       	rjmp	.-30     	; 0xafac <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    afca:	4c eb       	ldi	r20, 0xBC	; 188
    afcc:	5a e6       	ldi	r21, 0x6A	; 106
    afce:	ee cf       	rjmp	.-36     	; 0xafac <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    afd0:	4e e9       	ldi	r20, 0x9E	; 158
    afd2:	5a e6       	ldi	r21, 0x6A	; 106
    afd4:	eb cf       	rjmp	.-42     	; 0xafac <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    afd6:	41 ea       	ldi	r20, 0xA1	; 161
    afd8:	5a e6       	ldi	r21, 0x6A	; 106
    afda:	e8 cf       	rjmp	.-48     	; 0xafac <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    afdc:	41 ea       	ldi	r20, 0xA1	; 161
    afde:	5a e6       	ldi	r21, 0x6A	; 106
    afe0:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
    afe4:	d0 93 de 0f 	sts	0x0FDE, r29
    afe8:	c0 93 dd 0f 	sts	0x0FDD, r28
    afec:	04 c0       	rjmp	.+8      	; 0xaff6 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    afee:	40 e0       	ldi	r20, 0x00	; 0
    aff0:	50 e0       	ldi	r21, 0x00	; 0
    aff2:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    aff6:	21 96       	adiw	r28, 0x01	; 1
    aff8:	ce 3e       	cpi	r28, 0xEE	; 238
    affa:	82 e0       	ldi	r24, 0x02	; 2
    affc:	d8 07       	cpc	r29, r24
    affe:	09 f0       	breq	.+2      	; 0xb002 <load_level_tiles+0xda>
    b000:	9e cf       	rjmp	.-196    	; 0xaf3e <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    b002:	df 91       	pop	r29
    b004:	cf 91       	pop	r28
    b006:	1f 91       	pop	r17
    b008:	ff 90       	pop	r15
    b00a:	ef 90       	pop	r14
    b00c:	08 95       	ret

0000b00e <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    b00e:	cf 93       	push	r28
    b010:	df 93       	push	r29
    b012:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    b014:	6b 8b       	std	Y+19, r22	; 0x13
	p->spawn_y = y;
    b016:	4c 8b       	std	Y+20, r20	; 0x14
	p->level_score = 0;
    b018:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    b01a:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    b01c:	18 8e       	std	Y+24, r1	; 0x18
	p->max_speed = MAX_SPEED;
    b01e:	82 e3       	ldi	r24, 0x32	; 50
    b020:	8f 8b       	std	Y+23, r24	; 0x17
	player_init_shot_state(p);
    b022:	ce 01       	movw	r24, r28
    b024:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <player_init_shot_state>
	player_spawn(p);
    b028:	ce 01       	movw	r24, r28
}
    b02a:	df 91       	pop	r29
    b02c:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    b02e:	0c 94 8a 4f 	jmp	0x9f14	; 0x9f14 <player_spawn>

0000b032 <load_level>:
}

void load_level(int level_number)
{
    b032:	8f 92       	push	r8
    b034:	9f 92       	push	r9
    b036:	af 92       	push	r10
    b038:	bf 92       	push	r11
    b03a:	cf 92       	push	r12
    b03c:	df 92       	push	r13
    b03e:	ef 92       	push	r14
    b040:	ff 92       	push	r15
    b042:	0f 93       	push	r16
    b044:	1f 93       	push	r17
    b046:	cf 93       	push	r28
    b048:	df 93       	push	r29
    b04a:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    b04c:	8e ee       	ldi	r24, 0xEE	; 238
    b04e:	92 e0       	ldi	r25, 0x02	; 2
    b050:	c8 9f       	mul	r28, r24
    b052:	70 01       	movw	r14, r0
    b054:	c9 9f       	mul	r28, r25
    b056:	f0 0c       	add	r15, r0
    b058:	d8 9f       	mul	r29, r24
    b05a:	f0 0c       	add	r15, r0
    b05c:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    b05e:	10 92 af 0b 	sts	0x0BAF, r1
    b062:	10 92 ae 0b 	sts	0x0BAE, r1
	init_tile_animations(&tile_animations);
    b066:	87 eb       	ldi	r24, 0xB7	; 183
    b068:	9b e0       	ldi	r25, 0x0B	; 11
    b06a:	0e 94 16 4e 	call	0x9c2c	; 0x9c2c <init_tile_animations>
	init_scope_animation(&scope_animation);
    b06e:	81 ed       	ldi	r24, 0xD1	; 209
    b070:	9f e0       	ldi	r25, 0x0F	; 15
    b072:	0e 94 3d 4e 	call	0x9c7a	; 0x9c7a <init_scope_animation>
	init_sub_animation(&sub_animation);
    b076:	83 ec       	ldi	r24, 0xC3	; 195
    b078:	9f e0       	ldi	r25, 0x0F	; 15
    b07a:	0e 94 55 4e 	call	0x9caa	; 0x9caa <init_sub_animation>
	game.current_screen = LEVEL;
    b07e:	83 e0       	ldi	r24, 0x03	; 3
    b080:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    b084:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <clear_sprites>
	game.current_level = level_number;
    b088:	c0 93 a4 0b 	sts	0x0BA4, r28
    b08c:	89 e5       	ldi	r24, 0x59	; 89
    b08e:	a8 2e       	mov	r10, r24
    b090:	8c e0       	ldi	r24, 0x0C	; 12
    b092:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    b094:	00 e0       	ldi	r16, 0x00	; 0
    b096:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    b098:	9e e1       	ldi	r25, 0x1E	; 30
    b09a:	c9 2e       	mov	r12, r25
    b09c:	d1 2c       	mov	r13, r1
    b09e:	c8 01       	movw	r24, r16
    b0a0:	b6 01       	movw	r22, r12
    b0a2:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    b0a6:	d8 2f       	mov	r29, r24
    b0a8:	dd 0f       	add	r29, r29
    b0aa:	dd 0f       	add	r29, r29
    b0ac:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    b0ae:	ab 01       	movw	r20, r22
    b0b0:	4d 5f       	subi	r20, 0xFD	; 253
    b0b2:	5f 4f       	sbci	r21, 0xFF	; 255
    b0b4:	c4 2f       	mov	r28, r20
    b0b6:	cc 0f       	add	r28, r28
    b0b8:	cc 0f       	add	r28, r28
    b0ba:	cc 0f       	add	r28, r28
    b0bc:	f8 01       	movw	r30, r16
    b0be:	ee 0d       	add	r30, r14
    b0c0:	ff 1d       	adc	r31, r15
    b0c2:	e1 57       	subi	r30, 0x71	; 113
    b0c4:	f8 4f       	sbci	r31, 0xF8	; 248
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    b0c6:	e4 91       	lpm	r30, Z
    b0c8:	45 01       	movw	r8, r10
    b0ca:	d5 01       	movw	r26, r10
    b0cc:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    b0ce:	e8 35       	cpi	r30, 0x58	; 88
    b0d0:	31 f4       	brne	.+12     	; 0xb0de <load_level+0xac>
		{
			prep_player(&player1, x, y);
    b0d2:	4c 2f       	mov	r20, r28
    b0d4:	6d 2f       	mov	r22, r29
    b0d6:	85 ed       	ldi	r24, 0xD5	; 213
    b0d8:	9b e0       	ldi	r25, 0x0B	; 11
    b0da:	0e 94 07 58 	call	0xb00e	; 0xb00e <prep_player>
    b0de:	bf ef       	ldi	r27, 0xFF	; 255
    b0e0:	ab 1a       	sub	r10, r27
    b0e2:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    b0e4:	f4 01       	movw	r30, r8
    b0e6:	80 81       	ld	r24, Z
    b0e8:	83 36       	cpi	r24, 0x63	; 99
    b0ea:	31 f4       	brne	.+12     	; 0xb0f8 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    b0ec:	4c 2f       	mov	r20, r28
    b0ee:	6d 2f       	mov	r22, r29
    b0f0:	87 e4       	ldi	r24, 0x47	; 71
    b0f2:	9f e0       	ldi	r25, 0x0F	; 15
    b0f4:	0e 94 07 58 	call	0xb00e	; 0xb00e <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    b0f8:	0f 5f       	subi	r16, 0xFF	; 255
    b0fa:	1f 4f       	sbci	r17, 0xFF	; 255
    b0fc:	0e 3e       	cpi	r16, 0xEE	; 238
    b0fe:	f2 e0       	ldi	r31, 0x02	; 2
    b100:	1f 07       	cpc	r17, r31
    b102:	69 f6       	brne	.-102    	; 0xb09e <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    b104:	60 e0       	ldi	r22, 0x00	; 0
    b106:	85 ed       	ldi	r24, 0xD5	; 213
    b108:	9b e0       	ldi	r25, 0x0B	; 11
    b10a:	0e 94 98 51 	call	0xa330	; 0xa330 <render_hud>
	render_hud(&player2, 15);
    b10e:	6f e0       	ldi	r22, 0x0F	; 15
    b110:	87 e4       	ldi	r24, 0x47	; 71
    b112:	9f e0       	ldi	r25, 0x0F	; 15
    b114:	0e 94 98 51 	call	0xa330	; 0xa330 <render_hud>
	render_score(&player1, 0);
    b118:	60 e0       	ldi	r22, 0x00	; 0
    b11a:	85 ed       	ldi	r24, 0xD5	; 213
    b11c:	9b e0       	ldi	r25, 0x0B	; 11
    b11e:	0e 94 b5 51 	call	0xa36a	; 0xa36a <render_score>
	render_score(&player2, 15);
    b122:	6f e0       	ldi	r22, 0x0F	; 15
    b124:	87 e4       	ldi	r24, 0x47	; 71
    b126:	9f e0       	ldi	r25, 0x0F	; 15
    b128:	0e 94 b5 51 	call	0xa36a	; 0xa36a <render_score>
	Print(14, 0, (char*) strVertSep);
    b12c:	4f e2       	ldi	r20, 0x2F	; 47
    b12e:	54 e0       	ldi	r21, 0x04	; 4
    b130:	60 e0       	ldi	r22, 0x00	; 0
    b132:	70 e0       	ldi	r23, 0x00	; 0
    b134:	8e e0       	ldi	r24, 0x0E	; 14
    b136:	90 e0       	ldi	r25, 0x00	; 0
    b138:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(14, 1, (char*) strVertSep);
    b13c:	4f e2       	ldi	r20, 0x2F	; 47
    b13e:	54 e0       	ldi	r21, 0x04	; 4
    b140:	61 e0       	ldi	r22, 0x01	; 1
    b142:	70 e0       	ldi	r23, 0x00	; 0
    b144:	8e e0       	ldi	r24, 0x0E	; 14
    b146:	90 e0       	ldi	r25, 0x00	; 0
    b148:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(14, 2, (char*) strVertSep);
    b14c:	4f e2       	ldi	r20, 0x2F	; 47
    b14e:	54 e0       	ldi	r21, 0x04	; 4
    b150:	62 e0       	ldi	r22, 0x02	; 2
    b152:	70 e0       	ldi	r23, 0x00	; 0
    b154:	8e e0       	ldi	r24, 0x0E	; 14
    b156:	90 e0       	ldi	r25, 0x00	; 0
    b158:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	load_level_tiles(false);
    b15c:	80 e0       	ldi	r24, 0x00	; 0
}
    b15e:	df 91       	pop	r29
    b160:	cf 91       	pop	r28
    b162:	1f 91       	pop	r17
    b164:	0f 91       	pop	r16
    b166:	ff 90       	pop	r15
    b168:	ef 90       	pop	r14
    b16a:	df 90       	pop	r13
    b16c:	cf 90       	pop	r12
    b16e:	bf 90       	pop	r11
    b170:	af 90       	pop	r10
    b172:	9f 90       	pop	r9
    b174:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    b176:	0c 94 94 57 	jmp	0xaf28	; 0xaf28 <load_level_tiles>

0000b17a <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    b17a:	cf 93       	push	r28
    b17c:	df 93       	push	r29
    b17e:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    b180:	61 e0       	ldi	r22, 0x01	; 1
    b182:	83 e0       	ldi	r24, 0x03	; 3
    b184:	0e 94 3b 49 	call	0x9276	; 0x9276 <FadeOut>
	ClearVram();
    b188:	0e 94 21 3a 	call	0x7442	; 0x7442 <ClearVram>
	clear_sprites();
    b18c:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    b190:	d0 e0       	ldi	r29, 0x00	; 0
    b192:	ae 01       	movw	r20, r28
    b194:	84 e0       	ldi	r24, 0x04	; 4
    b196:	44 0f       	add	r20, r20
    b198:	55 1f       	adc	r21, r21
    b19a:	8a 95       	dec	r24
    b19c:	e1 f7       	brne	.-8      	; 0xb196 <level_transition+0x1c>
    b19e:	48 5c       	subi	r20, 0xC8	; 200
    b1a0:	5c 4f       	sbci	r21, 0xFC	; 252
    b1a2:	6c e0       	ldi	r22, 0x0C	; 12
    b1a4:	70 e0       	ldi	r23, 0x00	; 0
    b1a6:	88 e0       	ldi	r24, 0x08	; 8
    b1a8:	90 e0       	ldi	r25, 0x00	; 0
    b1aa:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	FadeIn(1, true);
    b1ae:	61 e0       	ldi	r22, 0x01	; 1
    b1b0:	81 e0       	ldi	r24, 0x01	; 1
    b1b2:	0e 94 2f 49 	call	0x925e	; 0x925e <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    b1b6:	84 e0       	ldi	r24, 0x04	; 4
    b1b8:	0e 94 d8 4d 	call	0x9bb0	; 0x9bb0 <LBWaitSeconds>
	FadeOut(1, true);
    b1bc:	61 e0       	ldi	r22, 0x01	; 1
    b1be:	81 e0       	ldi	r24, 0x01	; 1
    b1c0:	0e 94 3b 49 	call	0x9276	; 0x9276 <FadeOut>
	ClearVram();
    b1c4:	0e 94 21 3a 	call	0x7442	; 0x7442 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b1c8:	60 e0       	ldi	r22, 0x00	; 0
    b1ca:	83 e0       	ldi	r24, 0x03	; 3
    b1cc:	0e 94 2f 49 	call	0x925e	; 0x925e <FadeIn>
	load_level(index);
    b1d0:	ce 01       	movw	r24, r28
}
    b1d2:	df 91       	pop	r29
    b1d4:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    b1d6:	0c 94 19 58 	jmp	0xb032	; 0xb032 <load_level>

0000b1da <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    b1da:	81 ed       	ldi	r24, 0xD1	; 209
    b1dc:	9f e0       	ldi	r25, 0x0F	; 15
    b1de:	0e 94 5b 52 	call	0xa4b6	; 0xa4b6 <render_scope>
    b1e2:	88 23       	and	r24, r24
    b1e4:	61 f0       	breq	.+24     	; 0xb1fe <render_boss_fight_scope_load+0x24>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    b1e6:	82 e0       	ldi	r24, 0x02	; 2
    b1e8:	80 93 a6 0b 	sts	0x0BA6, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ALARM);
    b1ec:	27 e0       	ldi	r18, 0x07	; 7
    b1ee:	40 91 5c 0f 	lds	r20, 0x0F5C
    b1f2:	60 91 ea 0b 	lds	r22, 0x0BEA
    b1f6:	80 91 b6 0b 	lds	r24, 0x0BB6
    b1fa:	0c 94 f1 4d 	jmp	0x9be2	; 0x9be2 <LBPlaySound>
    b1fe:	08 95       	ret

0000b200 <render_boss_fight_sub_load>:
	}
}

void render_boss_fight_sub_load()
{
    b200:	0f 93       	push	r16
    b202:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b204:	83 ec       	ldi	r24, 0xC3	; 195
    b206:	9f e0       	ldi	r25, 0x0F	; 15
    b208:	0e 94 15 4c 	call	0x982a	; 0x982a <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    b20c:	ac 01       	movw	r20, r24
    b20e:	64 e0       	ldi	r22, 0x04	; 4
    b210:	81 e0       	ldi	r24, 0x01	; 1
    b212:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	if (sub_animation.anim.reversing)
    b216:	80 91 c8 0f 	lds	r24, 0x0FC8
    b21a:	88 23       	and	r24, r24
    b21c:	d9 f0       	breq	.+54     	; 0xb254 <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    b21e:	84 e0       	ldi	r24, 0x04	; 4
    b220:	80 93 a6 0b 	sts	0x0BA6, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    b224:	00 e0       	ldi	r16, 0x00	; 0
    b226:	10 e0       	ldi	r17, 0x00	; 0
    b228:	20 e9       	ldi	r18, 0x90	; 144
    b22a:	32 e4       	ldi	r19, 0x42	; 66
    b22c:	40 e0       	ldi	r20, 0x00	; 0
    b22e:	50 e0       	ldi	r21, 0x00	; 0
    b230:	60 ec       	ldi	r22, 0xC0	; 192
    b232:	72 e4       	ldi	r23, 0x42	; 66
    b234:	85 e3       	ldi	r24, 0x35	; 53
    b236:	90 e1       	ldi	r25, 0x10	; 16
    b238:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    b23c:	00 e0       	ldi	r16, 0x00	; 0
    b23e:	10 e0       	ldi	r17, 0x00	; 0
    b240:	20 e9       	ldi	r18, 0x90	; 144
    b242:	32 e4       	ldi	r19, 0x42	; 66
    b244:	40 e0       	ldi	r20, 0x00	; 0
    b246:	50 e0       	ldi	r21, 0x00	; 0
    b248:	60 e4       	ldi	r22, 0x40	; 64
    b24a:	73 e4       	ldi	r23, 0x43	; 67
    b24c:	81 e0       	ldi	r24, 0x01	; 1
    b24e:	90 e1       	ldi	r25, 0x10	; 16
    b250:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <init_turret>
	}
}
    b254:	1f 91       	pop	r17
    b256:	0f 91       	pop	r16
    b258:	08 95       	ret

0000b25a <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b25a:	83 ec       	ldi	r24, 0xC3	; 195
    b25c:	9f e0       	ldi	r25, 0x0F	; 15
    b25e:	0e 94 15 4c 	call	0x982a	; 0x982a <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    b262:	20 91 c3 0f 	lds	r18, 0x0FC3
    b266:	21 11       	cpse	r18, r1
    b268:	05 c0       	rjmp	.+10     	; 0xb274 <render_boss_fight_sub_sinking+0x1a>
    b26a:	ac 01       	movw	r20, r24
    b26c:	64 e0       	ldi	r22, 0x04	; 4
    b26e:	81 e0       	ldi	r24, 0x01	; 1
    b270:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	if (sub_animation.anim.looped)
    b274:	80 91 c7 0f 	lds	r24, 0x0FC7
    b278:	88 23       	and	r24, r24
    b27a:	19 f0       	breq	.+6      	; 0xb282 <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    b27c:	88 e0       	ldi	r24, 0x08	; 8
    b27e:	80 93 a6 0b 	sts	0x0BA6, r24
    b282:	08 95       	ret

0000b284 <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    b284:	ef 92       	push	r14
    b286:	ff 92       	push	r15
    b288:	0f 93       	push	r16
    b28a:	1f 93       	push	r17
    b28c:	cf 93       	push	r28
    b28e:	df 93       	push	r29
    b290:	1f 92       	push	r1
    b292:	cd b7       	in	r28, 0x3d	; 61
    b294:	de b7       	in	r29, 0x3e	; 62
    b296:	7c 01       	movw	r14, r24
    b298:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    b29a:	fc 01       	movw	r30, r24
    b29c:	67 81       	ldd	r22, Z+7	; 0x07
    b29e:	70 85       	ldd	r23, Z+8	; 0x08
    b2a0:	81 85       	ldd	r24, Z+9	; 0x09
    b2a2:	92 85       	ldd	r25, Z+10	; 0x0a
    b2a4:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    b2a8:	46 2f       	mov	r20, r22
    b2aa:	f7 01       	movw	r30, r14
    b2ac:	63 81       	ldd	r22, Z+3	; 0x03
    b2ae:	74 81       	ldd	r23, Z+4	; 0x04
    b2b0:	85 81       	ldd	r24, Z+5	; 0x05
    b2b2:	96 81       	ldd	r25, Z+6	; 0x06
    b2b4:	49 83       	std	Y+1, r20	; 0x01
    b2b6:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    b2ba:	01 e0       	ldi	r16, 0x01	; 1
    b2bc:	21 e0       	ldi	r18, 0x01	; 1
    b2be:	49 81       	ldd	r20, Y+1	; 0x01
    b2c0:	81 2f       	mov	r24, r17
    b2c2:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
}
    b2c6:	0f 90       	pop	r0
    b2c8:	df 91       	pop	r29
    b2ca:	cf 91       	pop	r28
    b2cc:	1f 91       	pop	r17
    b2ce:	0f 91       	pop	r16
    b2d0:	ff 90       	pop	r15
    b2d2:	ef 90       	pop	r14
    b2d4:	08 95       	ret

0000b2d6 <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    b2d6:	ef 92       	push	r14
    b2d8:	ff 92       	push	r15
    b2da:	0f 93       	push	r16
    b2dc:	1f 93       	push	r17
    b2de:	cf 93       	push	r28
    b2e0:	df 93       	push	r29
    b2e2:	1f 92       	push	r1
    b2e4:	cd b7       	in	r28, 0x3d	; 61
    b2e6:	de b7       	in	r29, 0x3e	; 62
    b2e8:	7c 01       	movw	r14, r24
    b2ea:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    b2ec:	fc 01       	movw	r30, r24
    b2ee:	63 89       	ldd	r22, Z+19	; 0x13
    b2f0:	74 89       	ldd	r23, Z+20	; 0x14
    b2f2:	85 89       	ldd	r24, Z+21	; 0x15
    b2f4:	96 89       	ldd	r25, Z+22	; 0x16
    b2f6:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    b2fa:	46 2f       	mov	r20, r22
    b2fc:	f7 01       	movw	r30, r14
    b2fe:	67 85       	ldd	r22, Z+15	; 0x0f
    b300:	70 89       	ldd	r23, Z+16	; 0x10
    b302:	81 89       	ldd	r24, Z+17	; 0x11
    b304:	92 89       	ldd	r25, Z+18	; 0x12
    b306:	49 83       	std	Y+1, r20	; 0x01
    b308:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    b30c:	01 e0       	ldi	r16, 0x01	; 1
    b30e:	21 e0       	ldi	r18, 0x01	; 1
    b310:	49 81       	ldd	r20, Y+1	; 0x01
    b312:	81 2f       	mov	r24, r17
    b314:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
}
    b318:	0f 90       	pop	r0
    b31a:	df 91       	pop	r29
    b31c:	cf 91       	pop	r28
    b31e:	1f 91       	pop	r17
    b320:	0f 91       	pop	r16
    b322:	ff 90       	pop	r15
    b324:	ef 90       	pop	r14
    b326:	08 95       	ret

0000b328 <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    b328:	cf 92       	push	r12
    b32a:	df 92       	push	r13
    b32c:	ef 92       	push	r14
    b32e:	ff 92       	push	r15
    b330:	cf 93       	push	r28
    b332:	df 93       	push	r29
    b334:	ec 01       	movw	r28, r24
    b336:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    b338:	cb 80       	ldd	r12, Y+3	; 0x03
    b33a:	dc 80       	ldd	r13, Y+4	; 0x04
    b33c:	ed 80       	ldd	r14, Y+5	; 0x05
    b33e:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    b340:	6f 81       	ldd	r22, Y+7	; 0x07
    b342:	78 85       	ldd	r23, Y+8	; 0x08
    b344:	89 85       	ldd	r24, Y+9	; 0x09
    b346:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    b348:	2b 85       	ldd	r18, Y+11	; 0x0b
    b34a:	21 11       	cpse	r18, r1
    b34c:	27 c0       	rjmp	.+78     	; 0xb39c <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    b34e:	20 e0       	ldi	r18, 0x00	; 0
    b350:	30 e0       	ldi	r19, 0x00	; 0
    b352:	40 e0       	ldi	r20, 0x00	; 0
    b354:	5e e3       	ldi	r21, 0x3E	; 62
    b356:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    b35a:	20 e0       	ldi	r18, 0x00	; 0
    b35c:	30 e0       	ldi	r19, 0x00	; 0
    b35e:	40 e4       	ldi	r20, 0x40	; 64
    b360:	50 e4       	ldi	r21, 0x40	; 64
    b362:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    b366:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    b36a:	8e e1       	ldi	r24, 0x1E	; 30
    b36c:	68 9f       	mul	r22, r24
    b36e:	e0 01       	movw	r28, r0
    b370:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    b372:	20 e0       	ldi	r18, 0x00	; 0
    b374:	30 e0       	ldi	r19, 0x00	; 0
    b376:	40 e0       	ldi	r20, 0x00	; 0
    b378:	5e e3       	ldi	r21, 0x3E	; 62
    b37a:	c7 01       	movw	r24, r14
    b37c:	b6 01       	movw	r22, r12
    b37e:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    b382:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    b386:	c6 0f       	add	r28, r22
    b388:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    b38a:	be 01       	movw	r22, r28
    b38c:	87 eb       	ldi	r24, 0xB7	; 183
    b38e:	9b e0       	ldi	r25, 0x0B	; 11
    b390:	0e 94 29 56 	call	0xac52	; 0xac52 <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    b394:	c8 5a       	subi	r28, 0xA8	; 168
    b396:	d3 4f       	sbci	r29, 0xF3	; 243
    b398:	19 82       	std	Y+1, r1	; 0x01
    b39a:	51 c0       	rjmp	.+162    	; 0xb43e <update_turret+0x116>
	}
	else if (t->shared.direction == D_LEFT)
    b39c:	98 81       	ld	r25, Y
    b39e:	93 30       	cpi	r25, 0x03	; 3
    b3a0:	19 f5       	brne	.+70     	; 0xb3e8 <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    b3a2:	63 2f       	mov	r22, r19
    b3a4:	70 e0       	ldi	r23, 0x00	; 0
    b3a6:	80 e0       	ldi	r24, 0x00	; 0
    b3a8:	90 e0       	ldi	r25, 0x00	; 0
    b3aa:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    b3ae:	9b 01       	movw	r18, r22
    b3b0:	ac 01       	movw	r20, r24
    b3b2:	c7 01       	movw	r24, r14
    b3b4:	b6 01       	movw	r22, r12
    b3b6:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    b3ba:	87 ff       	sbrs	r24, 7
    b3bc:	02 c0       	rjmp	.+4      	; 0xb3c2 <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    b3be:	81 e0       	ldi	r24, 0x01	; 1
    b3c0:	24 c0       	rjmp	.+72     	; 0xb40a <update_turret+0xe2>
			t->shared.speed = BOSS_TURRET_SPEED;
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    b3c2:	69 81       	ldd	r22, Y+1	; 0x01
    b3c4:	70 e0       	ldi	r23, 0x00	; 0
    b3c6:	80 e0       	ldi	r24, 0x00	; 0
    b3c8:	90 e0       	ldi	r25, 0x00	; 0
    b3ca:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    b3ce:	25 e6       	ldi	r18, 0x65	; 101
    b3d0:	38 e8       	ldi	r19, 0x88	; 136
    b3d2:	48 e8       	ldi	r20, 0x88	; 136
    b3d4:	5c e3       	ldi	r21, 0x3C	; 60
    b3d6:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    b3da:	9b 01       	movw	r18, r22
    b3dc:	ac 01       	movw	r20, r24
    b3de:	c7 01       	movw	r24, r14
    b3e0:	b6 01       	movw	r22, r12
    b3e2:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    b3e6:	27 c0       	rjmp	.+78     	; 0xb436 <update_turret+0x10e>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    b3e8:	91 30       	cpi	r25, 0x01	; 1
    b3ea:	49 f5       	brne	.+82     	; 0xb43e <update_turret+0x116>
	{
		if (t->shared.x > right_limit)
    b3ec:	64 2f       	mov	r22, r20
    b3ee:	70 e0       	ldi	r23, 0x00	; 0
    b3f0:	80 e0       	ldi	r24, 0x00	; 0
    b3f2:	90 e0       	ldi	r25, 0x00	; 0
    b3f4:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    b3f8:	9b 01       	movw	r18, r22
    b3fa:	ac 01       	movw	r20, r24
    b3fc:	c7 01       	movw	r24, r14
    b3fe:	b6 01       	movw	r22, r12
    b400:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    b404:	18 16       	cp	r1, r24
    b406:	2c f4       	brge	.+10     	; 0xb412 <update_turret+0xea>
		{
			t->shared.direction = D_LEFT;
    b408:	83 e0       	ldi	r24, 0x03	; 3
    b40a:	88 83       	st	Y, r24
			t->shared.speed = BOSS_TURRET_SPEED;
    b40c:	8a e5       	ldi	r24, 0x5A	; 90
    b40e:	89 83       	std	Y+1, r24	; 0x01
    b410:	16 c0       	rjmp	.+44     	; 0xb43e <update_turret+0x116>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    b412:	69 81       	ldd	r22, Y+1	; 0x01
    b414:	70 e0       	ldi	r23, 0x00	; 0
    b416:	80 e0       	ldi	r24, 0x00	; 0
    b418:	90 e0       	ldi	r25, 0x00	; 0
    b41a:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    b41e:	25 e6       	ldi	r18, 0x65	; 101
    b420:	38 e8       	ldi	r19, 0x88	; 136
    b422:	48 e8       	ldi	r20, 0x88	; 136
    b424:	5c e3       	ldi	r21, 0x3C	; 60
    b426:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    b42a:	9b 01       	movw	r18, r22
    b42c:	ac 01       	movw	r20, r24
    b42e:	c7 01       	movw	r24, r14
    b430:	b6 01       	movw	r22, r12
    b432:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    b436:	6b 83       	std	Y+3, r22	; 0x03
    b438:	7c 83       	std	Y+4, r23	; 0x04
    b43a:	8d 83       	std	Y+5, r24	; 0x05
    b43c:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    b43e:	df 91       	pop	r29
    b440:	cf 91       	pop	r28
    b442:	ff 90       	pop	r15
    b444:	ef 90       	pop	r14
    b446:	df 90       	pop	r13
    b448:	cf 90       	pop	r12
    b44a:	08 95       	ret

0000b44c <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    b44c:	10 92 a3 0b 	sts	0x0BA3, r1
	clear_sprites();
    b450:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else
	if (wifi_status == WIFI_OK)
    b454:	80 91 d4 0b 	lds	r24, 0x0BD4
    b458:	81 11       	cpse	r24, r1
    b45a:	02 c0       	rjmp	.+4      	; 0xb460 <load_splash+0x14>
	{
		cleanupWifi();
    b45c:	0e 94 db 4a 	call	0x95b6	; 0x95b6 <cleanupWifi>
	}
	Print(7, 13, (char*) str1Player);
    b460:	47 e3       	ldi	r20, 0x37	; 55
    b462:	55 e0       	ldi	r21, 0x05	; 5
    b464:	6d e0       	ldi	r22, 0x0D	; 13
    b466:	70 e0       	ldi	r23, 0x00	; 0
    b468:	87 e0       	ldi	r24, 0x07	; 7
    b46a:	90 e0       	ldi	r25, 0x00	; 0
    b46c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(7, 14, (char*) str2Player);
    b470:	46 e2       	ldi	r20, 0x26	; 38
    b472:	55 e0       	ldi	r21, 0x05	; 5
    b474:	6e e0       	ldi	r22, 0x0E	; 14
    b476:	70 e0       	ldi	r23, 0x00	; 0
    b478:	87 e0       	ldi	r24, 0x07	; 7
    b47a:	90 e0       	ldi	r25, 0x00	; 0
    b47c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	if (wifi_status == WIFI_OK) {
    b480:	80 91 d4 0b 	lds	r24, 0x0BD4
    b484:	81 11       	cpse	r24, r1
    b486:	10 c0       	rjmp	.+32     	; 0xb4a8 <load_splash+0x5c>
		Print(7, 15, (char*) strHostNetGame);
    b488:	48 e1       	ldi	r20, 0x18	; 24
    b48a:	55 e0       	ldi	r21, 0x05	; 5
    b48c:	6f e0       	ldi	r22, 0x0F	; 15
    b48e:	70 e0       	ldi	r23, 0x00	; 0
    b490:	87 e0       	ldi	r24, 0x07	; 7
    b492:	90 e0       	ldi	r25, 0x00	; 0
    b494:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		Print(7, 16, (char*) strJoinNetGame);
    b498:	4a e0       	ldi	r20, 0x0A	; 10
    b49a:	55 e0       	ldi	r21, 0x05	; 5
    b49c:	60 e1       	ldi	r22, 0x10	; 16
    b49e:	70 e0       	ldi	r23, 0x00	; 0
    b4a0:	87 e0       	ldi	r24, 0x07	; 7
    b4a2:	90 e0       	ldi	r25, 0x00	; 0
    b4a4:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	}
	Print(7, 17, (char*) strHighscores);
    b4a8:	49 e4       	ldi	r20, 0x49	; 73
    b4aa:	54 e0       	ldi	r21, 0x04	; 4
    b4ac:	61 e1       	ldi	r22, 0x11	; 17
    b4ae:	70 e0       	ldi	r23, 0x00	; 0
    b4b0:	87 e0       	ldi	r24, 0x07	; 7
    b4b2:	90 e0       	ldi	r25, 0x00	; 0
    b4b4:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(5, 26, (char*) strCopyright);
    b4b8:	43 e5       	ldi	r20, 0x53	; 83
    b4ba:	54 e0       	ldi	r21, 0x04	; 4
    b4bc:	6a e1       	ldi	r22, 0x1A	; 26
    b4be:	70 e0       	ldi	r23, 0x00	; 0
    b4c0:	85 e0       	ldi	r24, 0x05	; 5
    b4c2:	90 e0       	ldi	r25, 0x00	; 0
    b4c4:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	MapSprite2(0, map_right_arrow, 0);
    b4c8:	40 e0       	ldi	r20, 0x00	; 0
    b4ca:	65 e1       	ldi	r22, 0x15	; 21
    b4cc:	71 e3       	ldi	r23, 0x31	; 49
    b4ce:	80 e0       	ldi	r24, 0x00	; 0
    b4d0:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    b4d4:	48 ec       	ldi	r20, 0xC8	; 200
    b4d6:	5a e6       	ldi	r21, 0x6A	; 106
    b4d8:	65 e0       	ldi	r22, 0x05	; 5
    b4da:	84 e0       	ldi	r24, 0x04	; 4
    b4dc:	0c 94 6c 48 	jmp	0x90d8	; 0x90d8 <DrawMap>

0000b4e0 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    b4e0:	fc 01       	movw	r30, r24
    b4e2:	20 81       	ld	r18, Z
    b4e4:	31 81       	ldd	r19, Z+1	; 0x01
    b4e6:	28 70       	andi	r18, 0x08	; 8
    b4e8:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &p2) return p1.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b4ea:	81 e0       	ldi	r24, 0x01	; 1
    b4ec:	23 2b       	or	r18, r19
    b4ee:	09 f4       	brne	.+2      	; 0xb4f2 <select_pressed+0x12>
    b4f0:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    b4f2:	08 95       	ret

0000b4f4 <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    b4f4:	ff 92       	push	r15
    b4f6:	0f 93       	push	r16
    b4f8:	1f 93       	push	r17
    b4fa:	cf 93       	push	r28
    b4fc:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    b4fe:	81 e0       	ldi	r24, 0x01	; 1
    b500:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    b504:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    b508:	45 e9       	ldi	r20, 0x95	; 149
    b50a:	5a e6       	ldi	r21, 0x6A	; 106
    b50c:	61 e0       	ldi	r22, 0x01	; 1
    b50e:	87 e0       	ldi	r24, 0x07	; 7
    b510:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    b514:	4f e8       	ldi	r20, 0x8F	; 143
    b516:	5a e6       	ldi	r21, 0x6A	; 106
    b518:	61 e0       	ldi	r22, 0x01	; 1
    b51a:	84 e1       	ldi	r24, 0x14	; 20
    b51c:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	Print(10, 2, (char*) strHighscores);
    b520:	49 e4       	ldi	r20, 0x49	; 73
    b522:	54 e0       	ldi	r21, 0x04	; 4
    b524:	62 e0       	ldi	r22, 0x02	; 2
    b526:	70 e0       	ldi	r23, 0x00	; 0
    b528:	8a e0       	ldi	r24, 0x0A	; 10
    b52a:	90 e0       	ldi	r25, 0x00	; 0
    b52c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    b530:	0c e5       	ldi	r16, 0x5C	; 92
    b532:	1b e0       	ldi	r17, 0x0B	; 11
    b534:	c7 e0       	ldi	r28, 0x07	; 7
    b536:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    b538:	ff 24       	eor	r15, r15
    b53a:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    b53c:	20 e0       	ldi	r18, 0x00	; 0
    b53e:	4f 2d       	mov	r20, r15
    b540:	be 01       	movw	r22, r28
    b542:	82 e0       	ldi	r24, 0x02	; 2
    b544:	90 e0       	ldi	r25, 0x00	; 0
    b546:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
		PrintChar(3, y, '.');
    b54a:	4e e2       	ldi	r20, 0x2E	; 46
    b54c:	be 01       	movw	r22, r28
    b54e:	83 e0       	ldi	r24, 0x03	; 3
    b550:	90 e0       	ldi	r25, 0x00	; 0
    b552:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
    b556:	f8 01       	movw	r30, r16
    b558:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    b55a:	80 81       	ld	r24, Z
    b55c:	93 e0       	ldi	r25, 0x03	; 3
    b55e:	89 9f       	mul	r24, r25
    b560:	a0 01       	movw	r20, r0
    b562:	11 24       	eor	r1, r1
    b564:	4b 57       	subi	r20, 0x7B	; 123
    b566:	54 4f       	sbci	r21, 0xF4	; 244
    b568:	23 e0       	ldi	r18, 0x03	; 3
    b56a:	6c 2f       	mov	r22, r28
    b56c:	85 e0       	ldi	r24, 0x05	; 5
    b56e:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    b572:	45 e1       	ldi	r20, 0x15	; 21
    b574:	54 e0       	ldi	r21, 0x04	; 4
    b576:	be 01       	movw	r22, r28
    b578:	89 e0       	ldi	r24, 0x09	; 9
    b57a:	90 e0       	ldi	r25, 0x00	; 0
    b57c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    b580:	f8 01       	movw	r30, r16
    b582:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    b584:	80 81       	ld	r24, Z
    b586:	e3 e0       	ldi	r30, 0x03	; 3
    b588:	8e 9f       	mul	r24, r30
    b58a:	a0 01       	movw	r20, r0
    b58c:	11 24       	eor	r1, r1
    b58e:	4b 57       	subi	r20, 0x7B	; 123
    b590:	54 4f       	sbci	r21, 0xF4	; 244
    b592:	23 e0       	ldi	r18, 0x03	; 3
    b594:	6c 2f       	mov	r22, r28
    b596:	8e e0       	ldi	r24, 0x0E	; 14
    b598:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
		Print(18, y, (char*) strBy);
    b59c:	42 e1       	ldi	r20, 0x12	; 18
    b59e:	54 e0       	ldi	r21, 0x04	; 4
    b5a0:	be 01       	movw	r22, r28
    b5a2:	82 e1       	ldi	r24, 0x12	; 18
    b5a4:	90 e0       	ldi	r25, 0x00	; 0
    b5a6:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    b5aa:	21 e0       	ldi	r18, 0x01	; 1
    b5ac:	f8 01       	movw	r30, r16
    b5ae:	32 97       	sbiw	r30, 0x02	; 2
    b5b0:	40 81       	ld	r20, Z
    b5b2:	be 01       	movw	r22, r28
    b5b4:	87 e1       	ldi	r24, 0x17	; 23
    b5b6:	90 e0       	ldi	r25, 0x00	; 0
    b5b8:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
		PrintChar(24, y, '-');
    b5bc:	4d e2       	ldi	r20, 0x2D	; 45
    b5be:	be 01       	movw	r22, r28
    b5c0:	88 e1       	ldi	r24, 0x18	; 24
    b5c2:	90 e0       	ldi	r25, 0x00	; 0
    b5c4:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    b5c8:	21 e0       	ldi	r18, 0x01	; 1
    b5ca:	f8 01       	movw	r30, r16
    b5cc:	31 97       	sbiw	r30, 0x01	; 1
    b5ce:	40 81       	ld	r20, Z
    b5d0:	be 01       	movw	r22, r28
    b5d2:	8b e1       	ldi	r24, 0x1B	; 27
    b5d4:	90 e0       	ldi	r25, 0x00	; 0
    b5d6:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
		if (scores.data[i+4])
    b5da:	f8 01       	movw	r30, r16
    b5dc:	80 81       	ld	r24, Z
    b5de:	88 23       	and	r24, r24
    b5e0:	11 f0       	breq	.+4      	; 0xb5e6 <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    b5e2:	4a e2       	ldi	r20, 0x2A	; 42
    b5e4:	01 c0       	rjmp	.+2      	; 0xb5e8 <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    b5e6:	40 e2       	ldi	r20, 0x20	; 32
    b5e8:	be 01       	movw	r22, r28
    b5ea:	8d e1       	ldi	r24, 0x1D	; 29
    b5ec:	90 e0       	ldi	r25, 0x00	; 0
    b5ee:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		y += 3;
		rank += 1;
    b5f2:	f3 94       	inc	r15
    b5f4:	23 96       	adiw	r28, 0x03	; 3
    b5f6:	0b 5f       	subi	r16, 0xFB	; 251
    b5f8:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    b5fa:	f6 e0       	ldi	r31, 0x06	; 6
    b5fc:	ff 12       	cpse	r15, r31
    b5fe:	9e cf       	rjmp	.-196    	; 0xb53c <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    b600:	42 e8       	ldi	r20, 0x82	; 130
    b602:	54 e0       	ldi	r21, 0x04	; 4
    b604:	66 e1       	ldi	r22, 0x16	; 22
    b606:	70 e0       	ldi	r23, 0x00	; 0
    b608:	83 e0       	ldi	r24, 0x03	; 3
    b60a:	90 e0       	ldi	r25, 0x00	; 0
    b60c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(10, 24, (char*) strCancelHandle);
    b610:	47 e7       	ldi	r20, 0x77	; 119
    b612:	54 e0       	ldi	r21, 0x04	; 4
    b614:	68 e1       	ldi	r22, 0x18	; 24
    b616:	70 e0       	ldi	r23, 0x00	; 0
    b618:	8a e0       	ldi	r24, 0x0A	; 10
    b61a:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    b61c:	df 91       	pop	r29
    b61e:	cf 91       	pop	r28
    b620:	1f 91       	pop	r17
    b622:	0f 91       	pop	r16
    b624:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    b626:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>

0000b62a <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b62a:	0e 94 e3 4f 	call	0x9fc6	; 0x9fc6 <save_score>
	fade_through();
    b62e:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
	init_game_state();
    b632:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <init_game_state>
	load_tank_rank();
    b636:	0c 94 7a 5a 	jmp	0xb4f4	; 0xb4f4 <load_tank_rank>

0000b63a <resolve_scoring>:
		}
	}
}

void resolve_scoring()
{
    b63a:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    b63c:	c0 91 a4 0b 	lds	r28, 0x0BA4
    b640:	80 91 e5 0b 	lds	r24, 0x0BE5
    b644:	ca 30       	cpi	r28, 0x0A	; 10
    b646:	80 f5       	brcc	.+96     	; 0xb6a8 <resolve_scoring+0x6e>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    b648:	8a 30       	cpi	r24, 0x0A	; 10
    b64a:	70 f0       	brcs	.+28     	; 0xb668 <resolve_scoring+0x2e>
    b64c:	80 91 5c 0f 	lds	r24, 0x0F5C
    b650:	80 fd       	sbrc	r24, 0
    b652:	0a c0       	rjmp	.+20     	; 0xb668 <resolve_scoring+0x2e>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    b654:	0e 94 e7 4d 	call	0x9bce	; 0x9bce <LBHideAllSprites>
			load_level_tiles(true);
    b658:	81 e0       	ldi	r24, 0x01	; 1
    b65a:	0e 94 94 57 	call	0xaf28	; 0xaf28 <load_level_tiles>
			print_level_score(&player1, &player2);
    b65e:	67 e4       	ldi	r22, 0x47	; 71
    b660:	7f e0       	ldi	r23, 0x0F	; 15
    b662:	85 ed       	ldi	r24, 0xD5	; 213
    b664:	9b e0       	ldi	r25, 0x0B	; 11
    b666:	12 c0       	rjmp	.+36     	; 0xb68c <resolve_scoring+0x52>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    b668:	80 91 57 0f 	lds	r24, 0x0F57
    b66c:	8a 30       	cpi	r24, 0x0A	; 10
    b66e:	08 f4       	brcc	.+2      	; 0xb672 <resolve_scoring+0x38>
    b670:	a7 c0       	rjmp	.+334    	; 0xb7c0 <resolve_scoring+0x186>
    b672:	80 91 ea 0b 	lds	r24, 0x0BEA
    b676:	80 fd       	sbrc	r24, 0
    b678:	a3 c0       	rjmp	.+326    	; 0xb7c0 <resolve_scoring+0x186>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    b67a:	0e 94 e7 4d 	call	0x9bce	; 0x9bce <LBHideAllSprites>
			load_level_tiles(true);
    b67e:	81 e0       	ldi	r24, 0x01	; 1
    b680:	0e 94 94 57 	call	0xaf28	; 0xaf28 <load_level_tiles>
			print_level_score(&player2, &player1);
    b684:	65 ed       	ldi	r22, 0xD5	; 213
    b686:	7b e0       	ldi	r23, 0x0B	; 11
    b688:	87 e4       	ldi	r24, 0x47	; 71
    b68a:	9f e0       	ldi	r25, 0x0F	; 15
    b68c:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    b690:	84 e0       	ldi	r24, 0x04	; 4
    b692:	0e 94 d8 4d 	call	0x9bb0	; 0x9bb0 <LBWaitSeconds>
			player1.level_score = 0;
    b696:	10 92 e5 0b 	sts	0x0BE5, r1
			player2.level_score = 0;
    b69a:	10 92 57 0f 	sts	0x0F57, r1
			level_transition(next_level);
    b69e:	81 e0       	ldi	r24, 0x01	; 1
    b6a0:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    b6a2:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    b6a4:	0c 94 bd 58 	jmp	0xb17a	; 0xb17a <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    b6a8:	8a 30       	cpi	r24, 0x0A	; 10
    b6aa:	28 f4       	brcc	.+10     	; 0xb6b6 <resolve_scoring+0x7c>
    b6ac:	80 91 57 0f 	lds	r24, 0x0F57
    b6b0:	8a 30       	cpi	r24, 0x0A	; 10
    b6b2:	08 f4       	brcc	.+2      	; 0xb6b6 <resolve_scoring+0x7c>
    b6b4:	85 c0       	rjmp	.+266    	; 0xb7c0 <resolve_scoring+0x186>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    b6b6:	90 91 e4 0b 	lds	r25, 0x0BE4
    b6ba:	80 91 56 0f 	lds	r24, 0x0F56
    b6be:	98 17       	cp	r25, r24
    b6c0:	09 f4       	brne	.+2      	; 0xb6c4 <resolve_scoring+0x8a>
    b6c2:	7e c0       	rjmp	.+252    	; 0xb7c0 <resolve_scoring+0x186>
			
			if (game.boss_fight_status == 0)
    b6c4:	20 91 a6 0b 	lds	r18, 0x0BA6
    b6c8:	21 11       	cpse	r18, r1
    b6ca:	46 c0       	rjmp	.+140    	; 0xb758 <resolve_scoring+0x11e>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    b6cc:	c1 e0       	ldi	r28, 0x01	; 1
    b6ce:	c0 93 a6 0b 	sts	0x0BA6, r28
				if (player1.score > player2.score)
    b6d2:	89 17       	cp	r24, r25
    b6d4:	e8 f4       	brcc	.+58     	; 0xb710 <resolve_scoring+0xd6>
				{
					game.boss_fight_player = &player1;
    b6d6:	85 ed       	ldi	r24, 0xD5	; 213
    b6d8:	9b e0       	ldi	r25, 0x0B	; 11
    b6da:	90 93 b3 0b 	sts	0x0BB3, r25
    b6de:	80 93 b2 0b 	sts	0x0BB2, r24
					game.boss_fight_joypad = &p1;
    b6e2:	81 e5       	ldi	r24, 0x51	; 81
    b6e4:	9c e0       	ldi	r25, 0x0C	; 12
    b6e6:	90 93 b5 0b 	sts	0x0BB5, r25
    b6ea:	80 93 b4 0b 	sts	0x0BB4, r24
					game.boss_fight_player_hud = 0;
    b6ee:	10 92 a7 0b 	sts	0x0BA7, r1
					kill_player(&player2, 15);
    b6f2:	6f e0       	ldi	r22, 0x0F	; 15
    b6f4:	87 e4       	ldi	r24, 0x47	; 71
    b6f6:	9f e0       	ldi	r25, 0x0F	; 15
    b6f8:	0e 94 af 55 	call	0xab5e	; 0xab5e <kill_player>
					player_spawn(&player2);
    b6fc:	87 e4       	ldi	r24, 0x47	; 71
    b6fe:	9f e0       	ldi	r25, 0x0F	; 15
    b700:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    b704:	80 91 5c 0f 	lds	r24, 0x0F5C
    b708:	c8 27       	eor	r28, r24
    b70a:	c0 93 5c 0f 	sts	0x0F5C, r28
    b70e:	1d c0       	rjmp	.+58     	; 0xb74a <resolve_scoring+0x110>
				}
				else
				{
					game.boss_fight_player = &player2;
    b710:	87 e4       	ldi	r24, 0x47	; 71
    b712:	9f e0       	ldi	r25, 0x0F	; 15
    b714:	90 93 b3 0b 	sts	0x0BB3, r25
    b718:	80 93 b2 0b 	sts	0x0BB2, r24
					game.boss_fight_joypad = &p2;
    b71c:	86 e7       	ldi	r24, 0x76	; 118
    b71e:	9b e0       	ldi	r25, 0x0B	; 11
    b720:	90 93 b5 0b 	sts	0x0BB5, r25
    b724:	80 93 b4 0b 	sts	0x0BB4, r24
					game.boss_fight_player_hud = 15;
    b728:	8f e0       	ldi	r24, 0x0F	; 15
    b72a:	80 93 a7 0b 	sts	0x0BA7, r24
					kill_player(&player1, 0);
    b72e:	60 e0       	ldi	r22, 0x00	; 0
    b730:	85 ed       	ldi	r24, 0xD5	; 213
    b732:	9b e0       	ldi	r25, 0x0B	; 11
    b734:	0e 94 af 55 	call	0xab5e	; 0xab5e <kill_player>
					player_spawn(&player1);
    b738:	85 ed       	ldi	r24, 0xD5	; 213
    b73a:	9b e0       	ldi	r25, 0x0B	; 11
    b73c:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    b740:	80 91 ea 0b 	lds	r24, 0x0BEA
    b744:	c8 27       	eor	r28, r24
    b746:	c0 93 ea 0b 	sts	0x0BEA, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    b74a:	85 ea       	ldi	r24, 0xA5	; 165
    b74c:	90 e0       	ldi	r25, 0x00	; 0
    b74e:	90 93 de 0f 	sts	0x0FDE, r25
    b752:	80 93 dd 0f 	sts	0x0FDD, r24
				return;
    b756:	34 c0       	rjmp	.+104    	; 0xb7c0 <resolve_scoring+0x186>
			}
			
			// Print level score
			LBHideAllSprites();
    b758:	0e 94 e7 4d 	call	0x9bce	; 0x9bce <LBHideAllSprites>
			load_level_tiles(true);
    b75c:	81 e0       	ldi	r24, 0x01	; 1
    b75e:	0e 94 94 57 	call	0xaf28	; 0xaf28 <load_level_tiles>
			if (player1.level_score > player2.level_score)
    b762:	90 91 e5 0b 	lds	r25, 0x0BE5
    b766:	80 91 57 0f 	lds	r24, 0x0F57
    b76a:	89 17       	cp	r24, r25
    b76c:	28 f4       	brcc	.+10     	; 0xb778 <resolve_scoring+0x13e>
				print_level_score(&player1, &player2);
    b76e:	67 e4       	ldi	r22, 0x47	; 71
    b770:	7f e0       	ldi	r23, 0x0F	; 15
    b772:	85 ed       	ldi	r24, 0xD5	; 213
    b774:	9b e0       	ldi	r25, 0x0B	; 11
    b776:	04 c0       	rjmp	.+8      	; 0xb780 <resolve_scoring+0x146>
			else
				print_level_score(&player2, &player1);
    b778:	65 ed       	ldi	r22, 0xD5	; 213
    b77a:	7b e0       	ldi	r23, 0x0B	; 11
    b77c:	87 e4       	ldi	r24, 0x47	; 71
    b77e:	9f e0       	ldi	r25, 0x0F	; 15
    b780:	0e 94 d1 50 	call	0xa1a2	; 0xa1a2 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    b784:	84 e0       	ldi	r24, 0x04	; 4
    b786:	0e 94 d8 4d 	call	0x9bb0	; 0x9bb0 <LBWaitSeconds>
			player1.level_score = 0;
    b78a:	10 92 e5 0b 	sts	0x0BE5, r1
			player2.level_score = 0;
    b78e:	10 92 57 0f 	sts	0x0F57, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    b792:	90 91 e4 0b 	lds	r25, 0x0BE4
    b796:	80 91 56 0f 	lds	r24, 0x0F56
    b79a:	89 17       	cp	r24, r25
    b79c:	28 f4       	brcc	.+10     	; 0xb7a8 <resolve_scoring+0x16e>
				print_final_score(&player1, &player2);
    b79e:	67 e4       	ldi	r22, 0x47	; 71
    b7a0:	7f e0       	ldi	r23, 0x0F	; 15
    b7a2:	85 ed       	ldi	r24, 0xD5	; 213
    b7a4:	9b e0       	ldi	r25, 0x0B	; 11
    b7a6:	04 c0       	rjmp	.+8      	; 0xb7b0 <resolve_scoring+0x176>
			else
				print_final_score(&player2, &player1);
    b7a8:	65 ed       	ldi	r22, 0xD5	; 213
    b7aa:	7b e0       	ldi	r23, 0x0B	; 11
    b7ac:	87 e4       	ldi	r24, 0x47	; 71
    b7ae:	9f e0       	ldi	r25, 0x0F	; 15
    b7b0:	0e 94 13 51 	call	0xa226	; 0xa226 <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    b7b4:	84 e0       	ldi	r24, 0x04	; 4
    b7b6:	0e 94 d8 4d 	call	0x9bb0	; 0x9bb0 <LBWaitSeconds>
			exit_game();
		}
	}
}
    b7ba:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    b7bc:	0c 94 15 5b 	jmp	0xb62a	; 0xb62a <exit_game>
		}
	}
}
    b7c0:	cf 91       	pop	r28
    b7c2:	08 95       	ret

0000b7c4 <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    b7c4:	cf 93       	push	r28
    b7c6:	df 93       	push	r29
    b7c8:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    b7ca:	88 81       	ld	r24, Y
    b7cc:	99 81       	ldd	r25, Y+1	; 0x01
    b7ce:	91 ff       	sbrs	r25, 1
    b7d0:	11 c0       	rjmp	.+34     	; 0xb7f4 <update_tank_rank+0x30>
	{
		game.tank_rank_counter = 0;
    b7d2:	10 92 b1 0b 	sts	0x0BB1, r1
    b7d6:	10 92 b0 0b 	sts	0x0BB0, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b7da:	24 e0       	ldi	r18, 0x04	; 4
    b7dc:	40 91 5c 0f 	lds	r20, 0x0F5C
    b7e0:	60 91 ea 0b 	lds	r22, 0x0BEA
    b7e4:	80 91 b6 0b 	lds	r24, 0x0BB6
    b7e8:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    b7ec:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
		load_splash();
    b7f0:	0e 94 26 5a 	call	0xb44c	; 0xb44c <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    b7f4:	8c 81       	ldd	r24, Y+4	; 0x04
    b7f6:	9d 81       	ldd	r25, Y+5	; 0x05
    b7f8:	92 ff       	sbrs	r25, 2
    b7fa:	22 c0       	rjmp	.+68     	; 0xb840 <update_tank_rank+0x7c>
    b7fc:	8e 81       	ldd	r24, Y+6	; 0x06
    b7fe:	8f 3f       	cpi	r24, 0xFF	; 255
    b800:	f9 f4       	brne	.+62     	; 0xb840 <update_tank_rank+0x7c>
	{
		game.tank_rank_counter = 0;
    b802:	10 92 b1 0b 	sts	0x0BB1, r1
    b806:	10 92 b0 0b 	sts	0x0BB0, r1
	    LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b80a:	24 e0       	ldi	r18, 0x04	; 4
    b80c:	40 91 5c 0f 	lds	r20, 0x0F5C
    b810:	60 91 ea 0b 	lds	r22, 0x0BEA
    b814:	80 91 b6 0b 	lds	r24, 0x0BB6
    b818:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
	    init_scores(&scores);
    b81c:	86 e5       	ldi	r24, 0x56	; 86
    b81e:	9b e0       	ldi	r25, 0x0B	; 11
    b820:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <init_scores>
	    init_handles(&handles);
    b824:	83 e8       	ldi	r24, 0x83	; 131
    b826:	9b e0       	ldi	r25, 0x0B	; 11
    b828:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b82c:	86 e5       	ldi	r24, 0x56	; 86
    b82e:	9b e0       	ldi	r25, 0x0B	; 11
    b830:	0e 94 aa 3b 	call	0x7754	; 0x7754 <EepromWriteBlock>
    b834:	83 e8       	ldi	r24, 0x83	; 131
    b836:	9b e0       	ldi	r25, 0x0B	; 11
    b838:	0e 94 aa 3b 	call	0x7754	; 0x7754 <EepromWriteBlock>
	    LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    b83c:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    b840:	80 91 b0 0b 	lds	r24, 0x0BB0
    b844:	90 91 b1 0b 	lds	r25, 0x0BB1
    b848:	85 38       	cpi	r24, 0x85	; 133
    b84a:	93 40       	sbci	r25, 0x03	; 3
    b84c:	88 f0       	brcs	.+34     	; 0xb870 <update_tank_rank+0xac>
	{
		game.tank_rank_counter = 0;
    b84e:	10 92 b1 0b 	sts	0x0BB1, r1
    b852:	10 92 b0 0b 	sts	0x0BB0, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b856:	24 e0       	ldi	r18, 0x04	; 4
    b858:	40 91 5c 0f 	lds	r20, 0x0F5C
    b85c:	60 91 ea 0b 	lds	r22, 0x0BEA
    b860:	80 91 b6 0b 	lds	r24, 0x0BB6
    b864:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    b868:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
		load_splash();
    b86c:	0e 94 26 5a 	call	0xb44c	; 0xb44c <load_splash>
	}
	game.tank_rank_counter++;
    b870:	80 91 b0 0b 	lds	r24, 0x0BB0
    b874:	90 91 b1 0b 	lds	r25, 0x0BB1
    b878:	01 96       	adiw	r24, 0x01	; 1
    b87a:	90 93 b1 0b 	sts	0x0BB1, r25
    b87e:	80 93 b0 0b 	sts	0x0BB0, r24
#endif
}
    b882:	df 91       	pop	r29
    b884:	cf 91       	pop	r28
    b886:	08 95       	ret

0000b888 <_handle_select_render_helper>:
	}
#endif
}

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    b888:	af 92       	push	r10
    b88a:	bf 92       	push	r11
    b88c:	cf 92       	push	r12
    b88e:	df 92       	push	r13
    b890:	ef 92       	push	r14
    b892:	ff 92       	push	r15
    b894:	0f 93       	push	r16
    b896:	1f 93       	push	r17
    b898:	cf 93       	push	r28
    b89a:	df 93       	push	r29
    b89c:	00 d0       	rcall	.+0      	; 0xb89e <_handle_select_render_helper+0x16>
    b89e:	1f 92       	push	r1
    b8a0:	cd b7       	in	r28, 0x3d	; 61
    b8a2:	de b7       	in	r29, 0x3e	; 62
    b8a4:	7c 01       	movw	r14, r24
    b8a6:	b4 2e       	mov	r11, r20
    b8a8:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    b8aa:	80 e2       	ldi	r24, 0x20	; 32
    b8ac:	89 83       	std	Y+1, r24	; 0x01
    b8ae:	8a 83       	std	Y+2, r24	; 0x02
    b8b0:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    b8b2:	f7 01       	movw	r30, r14
    b8b4:	85 81       	ldd	r24, Z+5	; 0x05
    b8b6:	81 11       	cpse	r24, r1
    b8b8:	1d c0       	rjmp	.+58     	; 0xb8f4 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    b8ba:	40 e0       	ldi	r20, 0x00	; 0
    b8bc:	65 e1       	ldi	r22, 0x15	; 21
    b8be:	71 e3       	ldi	r23, 0x31	; 49
    b8c0:	82 2f       	mov	r24, r18
    b8c2:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b8c6:	40 e0       	ldi	r20, 0x00	; 0
    b8c8:	67 e5       	ldi	r22, 0x57	; 87
    b8ca:	71 e3       	ldi	r23, 0x31	; 49
    b8cc:	81 e0       	ldi	r24, 0x01	; 1
    b8ce:	81 0f       	add	r24, r17
    b8d0:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    b8d4:	f7 01       	movw	r30, r14
    b8d6:	40 81       	ld	r20, Z
    b8d8:	44 0f       	add	r20, r20
    b8da:	44 0f       	add	r20, r20
    b8dc:	44 0f       	add	r20, r20
    b8de:	40 5c       	subi	r20, 0xC0	; 192
    b8e0:	01 e0       	ldi	r16, 0x01	; 1
    b8e2:	21 e0       	ldi	r18, 0x01	; 1
    b8e4:	6b 2d       	mov	r22, r11
    b8e6:	66 0f       	add	r22, r22
    b8e8:	66 0f       	add	r22, r22
    b8ea:	66 0f       	add	r22, r22
    b8ec:	81 2f       	mov	r24, r17
    b8ee:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
    b8f2:	6e c0       	rjmp	.+220    	; 0xb9d0 <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == EDITING)
    b8f4:	81 30       	cpi	r24, 0x01	; 1
    b8f6:	09 f0       	breq	.+2      	; 0xb8fa <_handle_select_render_helper+0x72>
    b8f8:	43 c0       	rjmp	.+134    	; 0xb980 <_handle_select_render_helper+0xf8>
	{
		MapSprite2(idx, map_down_arrow, 0);
    b8fa:	40 e0       	ldi	r20, 0x00	; 0
    b8fc:	62 e1       	ldi	r22, 0x12	; 18
    b8fe:	71 e3       	ldi	r23, 0x31	; 49
    b900:	82 2f       	mov	r24, r18
    b902:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    b906:	aa 24       	eor	r10, r10
    b908:	a3 94       	inc	r10
    b90a:	a1 0e       	add	r10, r17
    b90c:	40 e0       	ldi	r20, 0x00	; 0
    b90e:	6f e0       	ldi	r22, 0x0F	; 15
    b910:	71 e3       	ldi	r23, 0x31	; 49
    b912:	8a 2d       	mov	r24, r10
    b914:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    b918:	cb 2c       	mov	r12, r11
    b91a:	d1 2c       	mov	r13, r1
    b91c:	f5 e0       	ldi	r31, 0x05	; 5
    b91e:	cf 0e       	add	r12, r31
    b920:	d1 1c       	adc	r13, r1
    b922:	f7 01       	movw	r30, r14
    b924:	40 81       	ld	r20, Z
    b926:	44 0f       	add	r20, r20
    b928:	44 0f       	add	r20, r20
    b92a:	44 0f       	add	r20, r20
    b92c:	48 5c       	subi	r20, 0xC8	; 200
    b92e:	84 81       	ldd	r24, Z+4	; 0x04
    b930:	b6 01       	movw	r22, r12
    b932:	68 0f       	add	r22, r24
    b934:	71 1d       	adc	r23, r1
    b936:	87 fd       	sbrc	r24, 7
    b938:	7a 95       	dec	r23
    b93a:	66 0f       	add	r22, r22
    b93c:	66 0f       	add	r22, r22
    b93e:	66 0f       	add	r22, r22
    b940:	01 e0       	ldi	r16, 0x01	; 1
    b942:	21 e0       	ldi	r18, 0x01	; 1
    b944:	81 2f       	mov	r24, r17
    b946:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    b94a:	f7 01       	movw	r30, r14
    b94c:	40 81       	ld	r20, Z
    b94e:	44 0f       	add	r20, r20
    b950:	44 0f       	add	r20, r20
    b952:	44 0f       	add	r20, r20
    b954:	48 5b       	subi	r20, 0xB8	; 184
    b956:	84 81       	ldd	r24, Z+4	; 0x04
    b958:	c8 0e       	add	r12, r24
    b95a:	d1 1c       	adc	r13, r1
    b95c:	87 fd       	sbrc	r24, 7
    b95e:	da 94       	dec	r13
    b960:	6c 2d       	mov	r22, r12
    b962:	66 0f       	add	r22, r22
    b964:	66 0f       	add	r22, r22
    b966:	66 0f       	add	r22, r22
    b968:	21 e0       	ldi	r18, 0x01	; 1
    b96a:	8a 2d       	mov	r24, r10
    b96c:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
		memcpy(tmp, ps->handle, 3);
    b970:	f7 01       	movw	r30, r14
    b972:	81 81       	ldd	r24, Z+1	; 0x01
    b974:	92 81       	ldd	r25, Z+2	; 0x02
    b976:	a3 81       	ldd	r26, Z+3	; 0x03
    b978:	89 83       	std	Y+1, r24	; 0x01
    b97a:	9a 83       	std	Y+2, r25	; 0x02
    b97c:	ab 83       	std	Y+3, r26	; 0x03
    b97e:	28 c0       	rjmp	.+80     	; 0xb9d0 <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == CONFIRMED)
    b980:	82 30       	cpi	r24, 0x02	; 2
    b982:	31 f5       	brne	.+76     	; 0xb9d0 <_handle_select_render_helper+0x148>
	{
		PrintChar(x_offset+6, 5, '(');
    b984:	c4 2e       	mov	r12, r20
    b986:	d1 2c       	mov	r13, r1
    b988:	48 e2       	ldi	r20, 0x28	; 40
    b98a:	65 e0       	ldi	r22, 0x05	; 5
    b98c:	70 e0       	ldi	r23, 0x00	; 0
    b98e:	c6 01       	movw	r24, r12
    b990:	06 96       	adiw	r24, 0x06	; 6
    b992:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b996:	23 e0       	ldi	r18, 0x03	; 3
    b998:	a7 01       	movw	r20, r14
    b99a:	4f 5f       	subi	r20, 0xFF	; 255
    b99c:	5f 4f       	sbci	r21, 0xFF	; 255
    b99e:	65 e0       	ldi	r22, 0x05	; 5
    b9a0:	87 e0       	ldi	r24, 0x07	; 7
    b9a2:	8b 0d       	add	r24, r11
    b9a4:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b9a8:	49 e2       	ldi	r20, 0x29	; 41
    b9aa:	65 e0       	ldi	r22, 0x05	; 5
    b9ac:	70 e0       	ldi	r23, 0x00	; 0
    b9ae:	c6 01       	movw	r24, r12
    b9b0:	0a 96       	adiw	r24, 0x0a	; 10
    b9b2:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		MapSprite2(idx, map_none, 0);
    b9b6:	40 e0       	ldi	r20, 0x00	; 0
    b9b8:	67 e5       	ldi	r22, 0x57	; 87
    b9ba:	71 e3       	ldi	r23, 0x31	; 49
    b9bc:	81 2f       	mov	r24, r17
    b9be:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b9c2:	40 e0       	ldi	r20, 0x00	; 0
    b9c4:	67 e5       	ldi	r22, 0x57	; 87
    b9c6:	71 e3       	ldi	r23, 0x31	; 49
    b9c8:	81 e0       	ldi	r24, 0x01	; 1
    b9ca:	81 0f       	add	r24, r17
    b9cc:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b9d0:	f7 01       	movw	r30, r14
    b9d2:	60 81       	ld	r22, Z
    b9d4:	68 5f       	subi	r22, 0xF8	; 248
    b9d6:	23 e0       	ldi	r18, 0x03	; 3
    b9d8:	ae 01       	movw	r20, r28
    b9da:	4f 5f       	subi	r20, 0xFF	; 255
    b9dc:	5f 4f       	sbci	r21, 0xFF	; 255
    b9de:	85 e0       	ldi	r24, 0x05	; 5
    b9e0:	8b 0d       	add	r24, r11
    b9e2:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
}
    b9e6:	0f 90       	pop	r0
    b9e8:	0f 90       	pop	r0
    b9ea:	0f 90       	pop	r0
    b9ec:	df 91       	pop	r29
    b9ee:	cf 91       	pop	r28
    b9f0:	1f 91       	pop	r17
    b9f2:	0f 91       	pop	r16
    b9f4:	ff 90       	pop	r15
    b9f6:	ef 90       	pop	r14
    b9f8:	df 90       	pop	r13
    b9fa:	cf 90       	pop	r12
    b9fc:	bf 90       	pop	r11
    b9fe:	af 90       	pop	r10
    ba00:	08 95       	ret

0000ba02 <load_handle_select>:

void load_handle_select()
{
    ba02:	8f 92       	push	r8
    ba04:	9f 92       	push	r9
    ba06:	af 92       	push	r10
    ba08:	bf 92       	push	r11
    ba0a:	cf 92       	push	r12
    ba0c:	df 92       	push	r13
    ba0e:	ef 92       	push	r14
    ba10:	ff 92       	push	r15
    ba12:	0f 93       	push	r16
    ba14:	1f 93       	push	r17
    ba16:	cf 93       	push	r28
    ba18:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    ba1a:	82 e0       	ldi	r24, 0x02	; 2
    ba1c:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    ba20:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    ba24:	45 e9       	ldi	r20, 0x95	; 149
    ba26:	5a e6       	ldi	r21, 0x6A	; 106
    ba28:	64 e0       	ldi	r22, 0x04	; 4
    ba2a:	83 e0       	ldi	r24, 0x03	; 3
    ba2c:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    ba30:	4f e8       	ldi	r20, 0x8F	; 143
    ba32:	5a e6       	ldi	r21, 0x6A	; 106
    ba34:	64 e0       	ldi	r22, 0x04	; 4
    ba36:	84 e1       	ldi	r24, 0x14	; 20
    ba38:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    ba3c:	4d e3       	ldi	r20, 0x3D	; 61
    ba3e:	54 e0       	ldi	r21, 0x04	; 4
    ba40:	61 e0       	ldi	r22, 0x01	; 1
    ba42:	70 e0       	ldi	r23, 0x00	; 0
    ba44:	89 e0       	ldi	r24, 0x09	; 9
    ba46:	90 e0       	ldi	r25, 0x00	; 0
    ba48:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(6, 5, (char*) strPlayer1);
    ba4c:	4c e2       	ldi	r20, 0x2C	; 44
    ba4e:	54 e0       	ldi	r21, 0x04	; 4
    ba50:	65 e0       	ldi	r22, 0x05	; 5
    ba52:	70 e0       	ldi	r23, 0x00	; 0
    ba54:	86 e0       	ldi	r24, 0x06	; 6
    ba56:	90 e0       	ldi	r25, 0x00	; 0
    ba58:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(23, 5, (char*) strPlayer2);
    ba5c:	49 e2       	ldi	r20, 0x29	; 41
    ba5e:	54 e0       	ldi	r21, 0x04	; 4
    ba60:	65 e0       	ldi	r22, 0x05	; 5
    ba62:	70 e0       	ldi	r23, 0x00	; 0
    ba64:	87 e1       	ldi	r24, 0x17	; 23
    ba66:	90 e0       	ldi	r25, 0x00	; 0
    ba68:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    ba6c:	85 e8       	ldi	r24, 0x85	; 133
    ba6e:	e8 2e       	mov	r14, r24
    ba70:	8b e0       	ldi	r24, 0x0B	; 11
    ba72:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    ba74:	c0 e0       	ldi	r28, 0x00	; 0
    ba76:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    ba78:	93 e0       	ldi	r25, 0x03	; 3
    ba7a:	a9 2e       	mov	r10, r25
    ba7c:	b1 2c       	mov	r11, r1
    ba7e:	67 01       	movw	r12, r14
    ba80:	ce 01       	movw	r24, r28
    ba82:	b5 01       	movw	r22, r10
    ba84:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    ba88:	4c 01       	movw	r8, r24
    ba8a:	8b 01       	movw	r16, r22
    ba8c:	08 5f       	subi	r16, 0xF8	; 248
    ba8e:	1f 4f       	sbci	r17, 0xFF	; 255
    ba90:	f7 01       	movw	r30, r14
    ba92:	41 91       	ld	r20, Z+
    ba94:	7f 01       	movw	r14, r30
    ba96:	b8 01       	movw	r22, r16
    ba98:	03 96       	adiw	r24, 0x03	; 3
    ba9a:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    ba9e:	f6 01       	movw	r30, r12
    baa0:	40 81       	ld	r20, Z
    baa2:	b8 01       	movw	r22, r16
    baa4:	c4 01       	movw	r24, r8
    baa6:	44 96       	adiw	r24, 0x14	; 20
    baa8:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    baac:	21 96       	adiw	r28, 0x01	; 1
    baae:	cb 31       	cpi	r28, 0x1B	; 27
    bab0:	d1 05       	cpc	r29, r1
    bab2:	29 f7       	brne	.-54     	; 0xba7e <load_handle_select+0x7c>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    bab4:	48 e6       	ldi	r20, 0x68	; 104
    bab6:	54 e0       	ldi	r21, 0x04	; 4
    bab8:	65 e1       	ldi	r22, 0x15	; 21
    baba:	70 e0       	ldi	r23, 0x00	; 0
    babc:	85 e0       	ldi	r24, 0x05	; 5
    babe:	90 e0       	ldi	r25, 0x00	; 0
    bac0:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    bac4:	4b e9       	ldi	r20, 0x9B	; 155
    bac6:	54 e0       	ldi	r21, 0x04	; 4
    bac8:	66 e1       	ldi	r22, 0x16	; 22
    baca:	70 e0       	ldi	r23, 0x00	; 0
    bacc:	85 e0       	ldi	r24, 0x05	; 5
    bace:	90 e0       	ldi	r25, 0x00	; 0
    bad0:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(5, 23, (char*) strCancelHandle);
    bad4:	47 e7       	ldi	r20, 0x77	; 119
    bad6:	54 e0       	ldi	r21, 0x04	; 4
    bad8:	67 e1       	ldi	r22, 0x17	; 23
    bada:	70 e0       	ldi	r23, 0x00	; 0
    badc:	85 e0       	ldi	r24, 0x05	; 5
    bade:	90 e0       	ldi	r25, 0x00	; 0
    bae0:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(5, 24, (char*) strChangeHandle);
    bae4:	4a e1       	ldi	r20, 0x1A	; 26
    bae6:	54 e0       	ldi	r21, 0x04	; 4
    bae8:	68 e1       	ldi	r22, 0x18	; 24
    baea:	70 e0       	ldi	r23, 0x00	; 0
    baec:	85 e0       	ldi	r24, 0x05	; 5
    baee:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    baf0:	df 91       	pop	r29
    baf2:	cf 91       	pop	r28
    baf4:	1f 91       	pop	r17
    baf6:	0f 91       	pop	r16
    baf8:	ff 90       	pop	r15
    bafa:	ef 90       	pop	r14
    bafc:	df 90       	pop	r13
    bafe:	cf 90       	pop	r12
    bb00:	bf 90       	pop	r11
    bb02:	af 90       	pop	r10
    bb04:	9f 90       	pop	r9
    bb06:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    bb08:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>

0000bb0c <load_host_net_game>:
#if JAMMA
#else

void load_host_net_game()
{
	game.current_screen = HOST_NET_GAME;
    bb0c:	84 e0       	ldi	r24, 0x04	; 4
    bb0e:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    bb12:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <clear_sprites>
	if (hostNetGame((char*)gameId) == WIFI_OK)
    bb16:	84 e0       	ldi	r24, 0x04	; 4
    bb18:	91 e0       	ldi	r25, 0x01	; 1
    bb1a:	0e 94 15 4b 	call	0x962a	; 0x962a <hostNetGame>
    bb1e:	81 11       	cpse	r24, r1
    bb20:	24 c0       	rjmp	.+72     	; 0xbb6a <load_host_net_game+0x5e>
	{
		Print(5, 1, (char*) strShareGameId);
    bb22:	47 ef       	ldi	r20, 0xF7	; 247
    bb24:	54 e0       	ldi	r21, 0x04	; 4
    bb26:	61 e0       	ldi	r22, 0x01	; 1
    bb28:	70 e0       	ldi	r23, 0x00	; 0
    bb2a:	85 e0       	ldi	r24, 0x05	; 5
    bb2c:	90 e0       	ldi	r25, 0x00	; 0
    bb2e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		LBPrintStr(10, 10, gameId, 8);
    bb32:	28 e0       	ldi	r18, 0x08	; 8
    bb34:	44 e0       	ldi	r20, 0x04	; 4
    bb36:	51 e0       	ldi	r21, 0x01	; 1
    bb38:	6a e0       	ldi	r22, 0x0A	; 10
    bb3a:	8a e0       	ldi	r24, 0x0A	; 10
    bb3c:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
		Print(2, 18, (char*) strWaitingForNetOppenent);
    bb40:	4c ed       	ldi	r20, 0xDC	; 220
    bb42:	54 e0       	ldi	r21, 0x04	; 4
    bb44:	62 e1       	ldi	r22, 0x12	; 18
    bb46:	70 e0       	ldi	r23, 0x00	; 0
    bb48:	82 e0       	ldi	r24, 0x02	; 2
    bb4a:	90 e0       	ldi	r25, 0x00	; 0
    bb4c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		DrawMap2(7, 10, map_green_tank);
    bb50:	45 e9       	ldi	r20, 0x95	; 149
    bb52:	5a e6       	ldi	r21, 0x6A	; 106
    bb54:	6a e0       	ldi	r22, 0x0A	; 10
    bb56:	87 e0       	ldi	r24, 0x07	; 7
    bb58:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
		DrawMap2(19, 10, map_blue_tank);
    bb5c:	4f e8       	ldi	r20, 0x8F	; 143
    bb5e:	5a e6       	ldi	r21, 0x6A	; 106
    bb60:	6a e0       	ldi	r22, 0x0A	; 10
    bb62:	83 e1       	ldi	r24, 0x13	; 19
    bb64:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
    bb68:	08 c0       	rjmp	.+16     	; 0xbb7a <load_host_net_game+0x6e>
	}
	else
	{
		Print(7, 10, (char*) strNetworkError);
    bb6a:	4d ea       	ldi	r20, 0xAD	; 173
    bb6c:	54 e0       	ldi	r21, 0x04	; 4
    bb6e:	6a e0       	ldi	r22, 0x0A	; 10
    bb70:	70 e0       	ldi	r23, 0x00	; 0
    bb72:	87 e0       	ldi	r24, 0x07	; 7
    bb74:	90 e0       	ldi	r25, 0x00	; 0
    bb76:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	}
	Print(9, 23, (char*) strCancelHandle);
    bb7a:	47 e7       	ldi	r20, 0x77	; 119
    bb7c:	54 e0       	ldi	r21, 0x04	; 4
    bb7e:	67 e1       	ldi	r22, 0x17	; 23
    bb80:	70 e0       	ldi	r23, 0x00	; 0
    bb82:	89 e0       	ldi	r24, 0x09	; 9
    bb84:	90 e0       	ldi	r25, 0x00	; 0
    bb86:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>

0000bb8a <update_host_net_game>:
}

void update_host_net_game(JoyPadState* p1)
{
	if (p1->pressed & BTN_X)
    bb8a:	fc 01       	movw	r30, r24
    bb8c:	80 81       	ld	r24, Z
    bb8e:	91 81       	ldd	r25, Z+1	; 0x01
    bb90:	91 ff       	sbrs	r25, 1
    bb92:	0d c0       	rjmp	.+26     	; 0xbbae <update_host_net_game+0x24>
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bb94:	24 e0       	ldi	r18, 0x04	; 4
    bb96:	40 91 5c 0f 	lds	r20, 0x0F5C
    bb9a:	60 91 ea 0b 	lds	r22, 0x0BEA
    bb9e:	80 91 b6 0b 	lds	r24, 0x0BB6
    bba2:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    bba6:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
		load_splash();
    bbaa:	0c 94 26 5a 	jmp	0xb44c	; 0xb44c <load_splash>
	} 
	else if (netMessage.code == NETJOINED)
    bbae:	80 91 df 0f 	lds	r24, 0x0FDF
    bbb2:	8b 30       	cpi	r24, 0x0B	; 11
    bbb4:	c9 f4       	brne	.+50     	; 0xbbe8 <update_host_net_game+0x5e>
	{
		game.demo_counter = 0;
    bbb6:	10 92 ad 0b 	sts	0x0BAD, r1
    bbba:	10 92 ac 0b 	sts	0x0BAC, r1
		p1s.select_state = SELECTING;
    bbbe:	10 92 00 10 	sts	0x1000, r1
		p2s.select_state = SELECTING;
    bbc2:	10 92 82 0b 	sts	0x0B82, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bbc6:	24 e0       	ldi	r18, 0x04	; 4
    bbc8:	40 91 5c 0f 	lds	r20, 0x0F5C
    bbcc:	60 91 ea 0b 	lds	r22, 0x0BEA
    bbd0:	80 91 b6 0b 	lds	r24, 0x0BB6
    bbd4:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    bbd8:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
		load_eeprom(&handles);
    bbdc:	83 e8       	ldi	r24, 0x83	; 131
    bbde:	9b e0       	ldi	r25, 0x0B	; 11
    bbe0:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <load_eeprom>
		load_handle_select();
    bbe4:	0c 94 01 5d 	jmp	0xba02	; 0xba02 <load_handle_select>
    bbe8:	08 95       	ret

0000bbea <load_join_net_game>:
	}
}

void load_join_net_game()
{
	game.current_screen = JOIN_NET_GAME;
    bbea:	85 e0       	ldi	r24, 0x05	; 5
    bbec:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    bbf0:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <clear_sprites>
	Print(5, 1, (char*) strEnterGameId);
    bbf4:	4b eb       	ldi	r20, 0xBB	; 187
    bbf6:	54 e0       	ldi	r21, 0x04	; 4
    bbf8:	61 e0       	ldi	r22, 0x01	; 1
    bbfa:	70 e0       	ldi	r23, 0x00	; 0
    bbfc:	85 e0       	ldi	r24, 0x05	; 5
    bbfe:	90 e0       	ldi	r25, 0x00	; 0
    bc00:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	LBPrintStr(10, 10, gameId, 8);
    bc04:	28 e0       	ldi	r18, 0x08	; 8
    bc06:	44 e0       	ldi	r20, 0x04	; 4
    bc08:	51 e0       	ldi	r21, 0x01	; 1
    bc0a:	6a e0       	ldi	r22, 0x0A	; 10
    bc0c:	8a e0       	ldi	r24, 0x0A	; 10
    bc0e:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
	DrawMap2(7, 10, map_green_tank);
    bc12:	45 e9       	ldi	r20, 0x95	; 149
    bc14:	5a e6       	ldi	r21, 0x6A	; 106
    bc16:	6a e0       	ldi	r22, 0x0A	; 10
    bc18:	87 e0       	ldi	r24, 0x07	; 7
    bc1a:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	DrawMap2(19, 10, map_blue_tank);
    bc1e:	4f e8       	ldi	r20, 0x8F	; 143
    bc20:	5a e6       	ldi	r21, 0x6A	; 106
    bc22:	6a e0       	ldi	r22, 0x0A	; 10
    bc24:	83 e1       	ldi	r24, 0x13	; 19
    bc26:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	Print(5, 22, (char*) strConfirmHandle);
    bc2a:	4b e9       	ldi	r20, 0x9B	; 155
    bc2c:	54 e0       	ldi	r21, 0x04	; 4
    bc2e:	66 e1       	ldi	r22, 0x16	; 22
    bc30:	70 e0       	ldi	r23, 0x00	; 0
    bc32:	85 e0       	ldi	r24, 0x05	; 5
    bc34:	90 e0       	ldi	r25, 0x00	; 0
    bc36:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(9, 23, (char*) strCancelHandle);
    bc3a:	47 e7       	ldi	r20, 0x77	; 119
    bc3c:	54 e0       	ldi	r21, 0x04	; 4
    bc3e:	67 e1       	ldi	r22, 0x17	; 23
    bc40:	70 e0       	ldi	r23, 0x00	; 0
    bc42:	89 e0       	ldi	r24, 0x09	; 9
    bc44:	90 e0       	ldi	r25, 0x00	; 0
    bc46:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	gameIdIndex = 2;
    bc4a:	82 e0       	ldi	r24, 0x02	; 2
    bc4c:	80 93 03 01 	sts	0x0103, r24
    bc50:	08 95       	ret

0000bc52 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    bc52:	0f 93       	push	r16
    bc54:	cf 93       	push	r28
    bc56:	df 93       	push	r29
    bc58:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    bc5a:	90 91 b6 0b 	lds	r25, 0x0BB6
    bc5e:	92 30       	cpi	r25, 0x02	; 2
    bc60:	a9 f0       	breq	.+42     	; 0xbc8c <update_splash+0x3a>
    bc62:	44 f4       	brge	.+16     	; 0xbc74 <update_splash+0x22>
    bc64:	99 23       	and	r25, r25
    bc66:	71 f0       	breq	.+28     	; 0xbc84 <update_splash+0x32>
    bc68:	91 30       	cpi	r25, 0x01	; 1
    bc6a:	d9 f4       	brne	.+54     	; 0xbca2 <update_splash+0x50>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    bc6c:	01 e0       	ldi	r16, 0x01	; 1
    bc6e:	21 e0       	ldi	r18, 0x01	; 1
    bc70:	40 e7       	ldi	r20, 0x70	; 112
    bc72:	13 c0       	rjmp	.+38     	; 0xbc9a <update_splash+0x48>
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    bc74:	93 30       	cpi	r25, 0x03	; 3
    bc76:	71 f0       	breq	.+28     	; 0xbc94 <update_splash+0x42>
    bc78:	94 30       	cpi	r25, 0x04	; 4
    bc7a:	99 f4       	brne	.+38     	; 0xbca2 <update_splash+0x50>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    bc7c:	01 e0       	ldi	r16, 0x01	; 1
    bc7e:	21 e0       	ldi	r18, 0x01	; 1
    bc80:	48 e8       	ldi	r20, 0x88	; 136
    bc82:	0b c0       	rjmp	.+22     	; 0xbc9a <update_splash+0x48>
	game.demo_counter++;
#else
	switch (game.selection)
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    bc84:	01 e0       	ldi	r16, 0x01	; 1
    bc86:	21 e0       	ldi	r18, 0x01	; 1
    bc88:	48 e6       	ldi	r20, 0x68	; 104
    bc8a:	07 c0       	rjmp	.+14     	; 0xbc9a <update_splash+0x48>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
			break;
		case HOSTNETGAME:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    bc8c:	01 e0       	ldi	r16, 0x01	; 1
    bc8e:	21 e0       	ldi	r18, 0x01	; 1
    bc90:	48 e7       	ldi	r20, 0x78	; 120
    bc92:	03 c0       	rjmp	.+6      	; 0xbc9a <update_splash+0x48>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
    bc94:	01 e0       	ldi	r16, 0x01	; 1
    bc96:	21 e0       	ldi	r18, 0x01	; 1
    bc98:	40 e8       	ldi	r20, 0x80	; 128
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    bc9a:	60 e3       	ldi	r22, 0x30	; 48
    bc9c:	80 e0       	ldi	r24, 0x00	; 0
    bc9e:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    bca2:	48 e6       	ldi	r20, 0x68	; 104
    bca4:	54 e0       	ldi	r21, 0x04	; 4
    bca6:	65 e1       	ldi	r22, 0x15	; 21
    bca8:	70 e0       	ldi	r23, 0x00	; 0
    bcaa:	86 e0       	ldi	r24, 0x06	; 6
    bcac:	90 e0       	ldi	r25, 0x00	; 0
    bcae:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    bcb2:	28 81       	ld	r18, Y
    bcb4:	39 81       	ldd	r19, Y+1	; 0x01
    bcb6:	21 15       	cp	r18, r1
    bcb8:	31 05       	cpc	r19, r1
    bcba:	21 f0       	breq	.+8      	; 0xbcc4 <update_splash+0x72>
    bcbc:	10 92 ad 0b 	sts	0x0BAD, r1
    bcc0:	10 92 ac 0b 	sts	0x0BAC, r1
	
	if (p1->pressed & BTN_UP)
    bcc4:	24 ff       	sbrs	r18, 4
    bcc6:	16 c0       	rjmp	.+44     	; 0xbcf4 <update_splash+0xa2>
	{
		game.selection--;
    bcc8:	80 91 b6 0b 	lds	r24, 0x0BB6
    bccc:	9f ef       	ldi	r25, 0xFF	; 255
    bcce:	98 0f       	add	r25, r24
    bcd0:	90 93 b6 0b 	sts	0x0BB6, r25
		if (game.selection == JOINNETGAME && wifi_status != WIFI_OK) game.selection -= 2;
    bcd4:	93 30       	cpi	r25, 0x03	; 3
    bcd6:	39 f4       	brne	.+14     	; 0xbce6 <update_splash+0x94>
    bcd8:	90 91 d4 0b 	lds	r25, 0x0BD4
    bcdc:	99 23       	and	r25, r25
    bcde:	19 f0       	breq	.+6      	; 0xbce6 <update_splash+0x94>
    bce0:	83 50       	subi	r24, 0x03	; 3
    bce2:	80 93 b6 0b 	sts	0x0BB6, r24
		if (game.selection < PVCPU) game.selection = PVCPU;
    bce6:	80 91 b6 0b 	lds	r24, 0x0BB6
    bcea:	87 ff       	sbrs	r24, 7
    bcec:	1b c0       	rjmp	.+54     	; 0xbd24 <update_splash+0xd2>
    bcee:	10 92 b6 0b 	sts	0x0BB6, r1
    bcf2:	18 c0       	rjmp	.+48     	; 0xbd24 <update_splash+0xd2>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if (p1->pressed & BTN_DOWN)
    bcf4:	25 ff       	sbrs	r18, 5
    bcf6:	20 c0       	rjmp	.+64     	; 0xbd38 <update_splash+0xe6>
	{
		game.selection++;
    bcf8:	80 91 b6 0b 	lds	r24, 0x0BB6
    bcfc:	91 e0       	ldi	r25, 0x01	; 1
    bcfe:	98 0f       	add	r25, r24
    bd00:	90 93 b6 0b 	sts	0x0BB6, r25
		if (game.selection == HOSTNETGAME && wifi_status != WIFI_OK) game.selection += 2;
    bd04:	92 30       	cpi	r25, 0x02	; 2
    bd06:	39 f4       	brne	.+14     	; 0xbd16 <update_splash+0xc4>
    bd08:	90 91 d4 0b 	lds	r25, 0x0BD4
    bd0c:	99 23       	and	r25, r25
    bd0e:	19 f0       	breq	.+6      	; 0xbd16 <update_splash+0xc4>
    bd10:	8d 5f       	subi	r24, 0xFD	; 253
    bd12:	80 93 b6 0b 	sts	0x0BB6, r24
		if (game.selection > TR) game.selection = TR;
    bd16:	80 91 b6 0b 	lds	r24, 0x0BB6
    bd1a:	85 30       	cpi	r24, 0x05	; 5
    bd1c:	1c f0       	brlt	.+6      	; 0xbd24 <update_splash+0xd2>
    bd1e:	84 e0       	ldi	r24, 0x04	; 4
    bd20:	80 93 b6 0b 	sts	0x0BB6, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bd24:	24 e0       	ldi	r18, 0x04	; 4
    bd26:	40 91 5c 0f 	lds	r20, 0x0F5C
    bd2a:	60 91 ea 0b 	lds	r22, 0x0BEA
    bd2e:	80 91 b6 0b 	lds	r24, 0x0BB6
    bd32:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
    bd36:	b8 c0       	rjmp	.+368    	; 0xbea8 <update_splash+0x256>
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    bd38:	ce 01       	movw	r24, r28
    bd3a:	0e 94 70 5a 	call	0xb4e0	; 0xb4e0 <select_pressed>
    bd3e:	88 23       	and	r24, r24
    bd40:	09 f4       	brne	.+2      	; 0xbd44 <update_splash+0xf2>
    bd42:	5e c0       	rjmp	.+188    	; 0xbe00 <update_splash+0x1ae>
    bd44:	80 91 b6 0b 	lds	r24, 0x0BB6
    bd48:	82 30       	cpi	r24, 0x02	; 2
    bd4a:	d0 f4       	brcc	.+52     	; 0xbd80 <update_splash+0x12e>
	{
		game.demo_counter = 0;
    bd4c:	10 92 ad 0b 	sts	0x0BAD, r1
    bd50:	10 92 ac 0b 	sts	0x0BAC, r1
		p1s.select_state = SELECTING;
    bd54:	10 92 00 10 	sts	0x1000, r1
		p2s.select_state = SELECTING;
    bd58:	10 92 82 0b 	sts	0x0B82, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bd5c:	24 e0       	ldi	r18, 0x04	; 4
    bd5e:	40 91 5c 0f 	lds	r20, 0x0F5C
    bd62:	60 91 ea 0b 	lds	r22, 0x0BEA
    bd66:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    bd6a:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
		load_eeprom(&handles);
    bd6e:	83 e8       	ldi	r24, 0x83	; 131
    bd70:	9b e0       	ldi	r25, 0x0B	; 11
    bd72:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bd76:	df 91       	pop	r29
    bd78:	cf 91       	pop	r28
    bd7a:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    bd7c:	0c 94 01 5d 	jmp	0xba02	; 0xba02 <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
    bd80:	82 30       	cpi	r24, 0x02	; 2
    bd82:	91 f4       	brne	.+36     	; 0xbda8 <update_splash+0x156>
	{
		game.demo_counter = 0;
    bd84:	10 92 ad 0b 	sts	0x0BAD, r1
    bd88:	10 92 ac 0b 	sts	0x0BAC, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bd8c:	24 e0       	ldi	r18, 0x04	; 4
    bd8e:	40 91 5c 0f 	lds	r20, 0x0F5C
    bd92:	60 91 ea 0b 	lds	r22, 0x0BEA
    bd96:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    bd9a:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bd9e:	df 91       	pop	r29
    bda0:	cf 91       	pop	r28
    bda2:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_host_net_game();
    bda4:	0c 94 86 5d 	jmp	0xbb0c	; 0xbb0c <load_host_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
    bda8:	83 30       	cpi	r24, 0x03	; 3
    bdaa:	91 f4       	brne	.+36     	; 0xbdd0 <update_splash+0x17e>
	{
		game.demo_counter = 0;
    bdac:	10 92 ad 0b 	sts	0x0BAD, r1
    bdb0:	10 92 ac 0b 	sts	0x0BAC, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bdb4:	24 e0       	ldi	r18, 0x04	; 4
    bdb6:	40 91 5c 0f 	lds	r20, 0x0F5C
    bdba:	60 91 ea 0b 	lds	r22, 0x0BEA
    bdbe:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    bdc2:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bdc6:	df 91       	pop	r29
    bdc8:	cf 91       	pop	r28
    bdca:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_join_net_game();
    bdcc:	0c 94 f5 5d 	jmp	0xbbea	; 0xbbea <load_join_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    bdd0:	84 30       	cpi	r24, 0x04	; 4
    bdd2:	b1 f4       	brne	.+44     	; 0xbe00 <update_splash+0x1ae>
	{
		game.demo_counter = 0;
    bdd4:	10 92 ad 0b 	sts	0x0BAD, r1
    bdd8:	10 92 ac 0b 	sts	0x0BAC, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bddc:	24 e0       	ldi	r18, 0x04	; 4
    bdde:	40 91 5c 0f 	lds	r20, 0x0F5C
    bde2:	60 91 ea 0b 	lds	r22, 0x0BEA
    bde6:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    bdea:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
		load_eeprom(&scores);
    bdee:	86 e5       	ldi	r24, 0x56	; 86
    bdf0:	9b e0       	ldi	r25, 0x0B	; 11
    bdf2:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bdf6:	df 91       	pop	r29
    bdf8:	cf 91       	pop	r28
    bdfa:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    bdfc:	0c 94 7a 5a 	jmp	0xb4f4	; 0xb4f4 <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    be00:	80 91 ac 0b 	lds	r24, 0x0BAC
    be04:	90 91 ad 0b 	lds	r25, 0x0BAD
    be08:	88 35       	cpi	r24, 0x58	; 88
    be0a:	92 40       	sbci	r25, 0x02	; 2
    be0c:	08 f4       	brcc	.+2      	; 0xbe10 <update_splash+0x1be>
    be0e:	4c c0       	rjmp	.+152    	; 0xbea8 <update_splash+0x256>
	{
		game.demo_counter = 0;
    be10:	10 92 ad 0b 	sts	0x0BAD, r1
    be14:	10 92 ac 0b 	sts	0x0BAC, r1
		if (game.demo_choice % 2 == 0)
    be18:	80 91 ab 0b 	lds	r24, 0x0BAB
    be1c:	80 fd       	sbrc	r24, 0
    be1e:	2d c0       	rjmp	.+90     	; 0xbe7a <update_splash+0x228>
		{
			game.selection = CPUVCPU;
    be20:	86 e0       	ldi	r24, 0x06	; 6
    be22:	80 93 b6 0b 	sts	0x0BB6, r24
			player1.handle_id = 9;
    be26:	29 e0       	ldi	r18, 0x09	; 9
    be28:	20 93 e0 0b 	sts	0x0BE0, r18
			memcpy(player1.handle, &handles.data[9*3], 3);
    be2c:	80 91 a0 0b 	lds	r24, 0x0BA0
    be30:	90 91 a1 0b 	lds	r25, 0x0BA1
    be34:	a0 91 a2 0b 	lds	r26, 0x0BA2
    be38:	80 93 e1 0b 	sts	0x0BE1, r24
    be3c:	90 93 e2 0b 	sts	0x0BE2, r25
    be40:	a0 93 e3 0b 	sts	0x0BE3, r26
			player2.handle_id = 9;
    be44:	20 93 52 0f 	sts	0x0F52, r18
			memcpy(player2.handle, &handles.data[9*3], 3);
    be48:	80 93 53 0f 	sts	0x0F53, r24
    be4c:	90 93 54 0f 	sts	0x0F54, r25
    be50:	a0 93 55 0f 	sts	0x0F55, r26
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    be54:	24 e0       	ldi	r18, 0x04	; 4
    be56:	40 91 5c 0f 	lds	r20, 0x0F5C
    be5a:	60 91 ea 0b 	lds	r22, 0x0BEA
    be5e:	86 e0       	ldi	r24, 0x06	; 6
    be60:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
			clear_sprites();
    be64:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <clear_sprites>
			fade_through();
    be68:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
			level_transition(LBRandom(0, 10));
    be6c:	6a e0       	ldi	r22, 0x0A	; 10
    be6e:	80 e0       	ldi	r24, 0x00	; 0
    be70:	0e 94 bd 4d 	call	0x9b7a	; 0x9b7a <LBRandom>
    be74:	0e 94 bd 58 	call	0xb17a	; 0xb17a <level_transition>
    be78:	11 c0       	rjmp	.+34     	; 0xbe9c <update_splash+0x24a>
		}
		else
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    be7a:	24 e0       	ldi	r18, 0x04	; 4
    be7c:	40 91 5c 0f 	lds	r20, 0x0F5C
    be80:	60 91 ea 0b 	lds	r22, 0x0BEA
    be84:	80 91 b6 0b 	lds	r24, 0x0BB6
    be88:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
			fade_through();
    be8c:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
			load_eeprom(&scores);
    be90:	86 e5       	ldi	r24, 0x56	; 86
    be92:	9b e0       	ldi	r25, 0x0B	; 11
    be94:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <load_eeprom>
			load_tank_rank();
    be98:	0e 94 7a 5a 	call	0xb4f4	; 0xb4f4 <load_tank_rank>
		}
		game.demo_choice++;
    be9c:	80 91 ab 0b 	lds	r24, 0x0BAB
    bea0:	8f 5f       	subi	r24, 0xFF	; 255
    bea2:	80 93 ab 0b 	sts	0x0BAB, r24
		return;
    bea6:	09 c0       	rjmp	.+18     	; 0xbeba <update_splash+0x268>
		
	}
	game.demo_counter++;
    bea8:	80 91 ac 0b 	lds	r24, 0x0BAC
    beac:	90 91 ad 0b 	lds	r25, 0x0BAD
    beb0:	01 96       	adiw	r24, 0x01	; 1
    beb2:	90 93 ad 0b 	sts	0x0BAD, r25
    beb6:	80 93 ac 0b 	sts	0x0BAC, r24
#endif
}
    beba:	df 91       	pop	r29
    bebc:	cf 91       	pop	r28
    bebe:	0f 91       	pop	r16
    bec0:	08 95       	ret

0000bec2 <update_join_net_game>:
	Print(9, 23, (char*) strCancelHandle);
	gameIdIndex = 2;
}

void update_join_net_game(JoyPadState* p1)
{
    bec2:	ef 92       	push	r14
    bec4:	ff 92       	push	r15
    bec6:	0f 93       	push	r16
    bec8:	cf 93       	push	r28
    beca:	df 93       	push	r29
    becc:	7c 01       	movw	r14, r24
	MapSprite2(0, map_down_arrow, 0);
    bece:	40 e0       	ldi	r20, 0x00	; 0
    bed0:	62 e1       	ldi	r22, 0x12	; 18
    bed2:	71 e3       	ldi	r23, 0x31	; 49
    bed4:	80 e0       	ldi	r24, 0x00	; 0
    bed6:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	MapSprite2(1, map_up_arrow, 0);
    beda:	40 e0       	ldi	r20, 0x00	; 0
    bedc:	6f e0       	ldi	r22, 0x0F	; 15
    bede:	71 e3       	ldi	r23, 0x31	; 49
    bee0:	81 e0       	ldi	r24, 0x01	; 1
    bee2:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	MoveSprite(0, 8*10 + gameIdIndex*8, 9*8, 1, 1);
    bee6:	60 91 03 01 	lds	r22, 0x0103
    beea:	66 0f       	add	r22, r22
    beec:	66 0f       	add	r22, r22
    beee:	66 0f       	add	r22, r22
    bef0:	60 5b       	subi	r22, 0xB0	; 176
    bef2:	01 e0       	ldi	r16, 0x01	; 1
    bef4:	21 e0       	ldi	r18, 0x01	; 1
    bef6:	48 e4       	ldi	r20, 0x48	; 72
    bef8:	80 e0       	ldi	r24, 0x00	; 0
    befa:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
	MoveSprite(1, 8*10 + gameIdIndex*8, 11*8, 1, 1);
    befe:	60 91 03 01 	lds	r22, 0x0103
    bf02:	66 0f       	add	r22, r22
    bf04:	66 0f       	add	r22, r22
    bf06:	66 0f       	add	r22, r22
    bf08:	60 5b       	subi	r22, 0xB0	; 176
    bf0a:	21 e0       	ldi	r18, 0x01	; 1
    bf0c:	48 e5       	ldi	r20, 0x58	; 88
    bf0e:	81 e0       	ldi	r24, 0x01	; 1
    bf10:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
	LBPrintStr(10, 10, (u8*) gameId, 8);
    bf14:	28 e0       	ldi	r18, 0x08	; 8
    bf16:	44 e0       	ldi	r20, 0x04	; 4
    bf18:	51 e0       	ldi	r21, 0x01	; 1
    bf1a:	6a e0       	ldi	r22, 0x0A	; 10
    bf1c:	8a e0       	ldi	r24, 0x0A	; 10
    bf1e:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
		
	if (p1->pressed & BTN_X)
    bf22:	f7 01       	movw	r30, r14
    bf24:	c0 81       	ld	r28, Z
    bf26:	d1 81       	ldd	r29, Z+1	; 0x01
    bf28:	d1 ff       	sbrs	r29, 1
    bf2a:	12 c0       	rjmp	.+36     	; 0xbf50 <update_join_net_game+0x8e>
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bf2c:	24 e0       	ldi	r18, 0x04	; 4
    bf2e:	40 91 5c 0f 	lds	r20, 0x0F5C
    bf32:	60 91 ea 0b 	lds	r22, 0x0BEA
    bf36:	80 91 b6 0b 	lds	r24, 0x0BB6
    bf3a:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    bf3e:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
}
    bf42:	df 91       	pop	r29
    bf44:	cf 91       	pop	r28
    bf46:	0f 91       	pop	r16
    bf48:	ff 90       	pop	r15
    bf4a:	ef 90       	pop	r14
		
	if (p1->pressed & BTN_X)
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_splash();
    bf4c:	0c 94 26 5a 	jmp	0xb44c	; 0xb44c <load_splash>
	}
	else if (select_pressed(p1))
    bf50:	c7 01       	movw	r24, r14
    bf52:	0e 94 70 5a 	call	0xb4e0	; 0xb4e0 <select_pressed>
    bf56:	88 23       	and	r24, r24
    bf58:	09 f4       	brne	.+2      	; 0xbf5c <update_join_net_game+0x9a>
    bf5a:	40 c0       	rjmp	.+128    	; 0xbfdc <update_join_net_game+0x11a>
	{
		Print(7, 18, (char*) strConnecting);
    bf5c:	4e ec       	ldi	r20, 0xCE	; 206
    bf5e:	54 e0       	ldi	r21, 0x04	; 4
    bf60:	62 e1       	ldi	r22, 0x12	; 18
    bf62:	70 e0       	ldi	r23, 0x00	; 0
    bf64:	87 e0       	ldi	r24, 0x07	; 7
    bf66:	90 e0       	ldi	r25, 0x00	; 0
    bf68:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		if (joinNetGame((char*)gameId) == WIFI_OK)
    bf6c:	84 e0       	ldi	r24, 0x04	; 4
    bf6e:	91 e0       	ldi	r25, 0x01	; 1
    bf70:	0e 94 95 4b 	call	0x972a	; 0x972a <joinNetGame>
    bf74:	81 11       	cpse	r24, r1
    bf76:	25 c0       	rjmp	.+74     	; 0xbfc2 <update_join_net_game+0x100>
		{
			netMessage.code = NETJOINED;
    bf78:	8b e0       	ldi	r24, 0x0B	; 11
    bf7a:	80 93 df 0f 	sts	0x0FDF, r24
			sendNetMessage(&netMessage);
    bf7e:	8f ed       	ldi	r24, 0xDF	; 223
    bf80:	9f e0       	ldi	r25, 0x0F	; 15
    bf82:	0e 94 0f 4b 	call	0x961e	; 0x961e <sendNetMessage>
			game.demo_counter = 0;
    bf86:	10 92 ad 0b 	sts	0x0BAD, r1
    bf8a:	10 92 ac 0b 	sts	0x0BAC, r1
			p1s.select_state = SELECTING;
    bf8e:	10 92 00 10 	sts	0x1000, r1
			p2s.select_state = SELECTING;
    bf92:	10 92 82 0b 	sts	0x0B82, r1
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bf96:	24 e0       	ldi	r18, 0x04	; 4
    bf98:	40 91 5c 0f 	lds	r20, 0x0F5C
    bf9c:	60 91 ea 0b 	lds	r22, 0x0BEA
    bfa0:	80 91 b6 0b 	lds	r24, 0x0BB6
    bfa4:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
			fade_through();
    bfa8:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
			load_eeprom(&handles);
    bfac:	83 e8       	ldi	r24, 0x83	; 131
    bfae:	9b e0       	ldi	r25, 0x0B	; 11
    bfb0:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <load_eeprom>
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
}
    bfb4:	df 91       	pop	r29
    bfb6:	cf 91       	pop	r28
    bfb8:	0f 91       	pop	r16
    bfba:	ff 90       	pop	r15
    bfbc:	ef 90       	pop	r14
			p1s.select_state = SELECTING;
			p2s.select_state = SELECTING;
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			fade_through();
			load_eeprom(&handles);
			load_handle_select();
    bfbe:	0c 94 01 5d 	jmp	0xba02	; 0xba02 <load_handle_select>
		}
		else
		{
			Print(7, 18, (char*) strNetworkError);
    bfc2:	4d ea       	ldi	r20, 0xAD	; 173
    bfc4:	54 e0       	ldi	r21, 0x04	; 4
    bfc6:	62 e1       	ldi	r22, 0x12	; 18
    bfc8:	70 e0       	ldi	r23, 0x00	; 0
    bfca:	87 e0       	ldi	r24, 0x07	; 7
    bfcc:	90 e0       	ldi	r25, 0x00	; 0
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
}
    bfce:	df 91       	pop	r29
    bfd0:	cf 91       	pop	r28
    bfd2:	0f 91       	pop	r16
    bfd4:	ff 90       	pop	r15
    bfd6:	ef 90       	pop	r14
			load_eeprom(&handles);
			load_handle_select();
		}
		else
		{
			Print(7, 18, (char*) strNetworkError);
    bfd8:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>
		}
	}
	else if ((p1->pressed & BTN_UP))
    bfdc:	c4 ff       	sbrs	r28, 4
    bfde:	13 c0       	rjmp	.+38     	; 0xc006 <update_join_net_game+0x144>
	{
		gameId[gameIdIndex]--;
    bfe0:	e0 91 03 01 	lds	r30, 0x0103
    bfe4:	f0 e0       	ldi	r31, 0x00	; 0
    bfe6:	ec 5f       	subi	r30, 0xFC	; 252
    bfe8:	fe 4f       	sbci	r31, 0xFE	; 254
    bfea:	80 81       	ld	r24, Z
		if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    bfec:	95 ec       	ldi	r25, 0xC5	; 197
    bfee:	98 0f       	add	r25, r24
    bff0:	97 30       	cpi	r25, 0x07	; 7
    bff2:	10 f0       	brcs	.+4      	; 0xbff8 <update_join_net_game+0x136>
			Print(7, 18, (char*) strNetworkError);
		}
	}
	else if ((p1->pressed & BTN_UP))
	{
		gameId[gameIdIndex]--;
    bff4:	81 50       	subi	r24, 0x01	; 1
    bff6:	01 c0       	rjmp	.+2      	; 0xbffa <update_join_net_game+0x138>
		if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    bff8:	89 e3       	ldi	r24, 0x39	; 57
    bffa:	80 83       	st	Z, r24
		if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
    bffc:	80 81       	ld	r24, Z
    bffe:	80 33       	cpi	r24, 0x30	; 48
    c000:	58 f5       	brcc	.+86     	; 0xc058 <update_join_net_game+0x196>
    c002:	8a e5       	ldi	r24, 0x5A	; 90
    c004:	14 c0       	rjmp	.+40     	; 0xc02e <update_join_net_game+0x16c>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_DOWN))
    c006:	c5 ff       	sbrs	r28, 5
    c008:	14 c0       	rjmp	.+40     	; 0xc032 <update_join_net_game+0x170>
	{
		gameId[gameIdIndex]++;
    c00a:	e0 91 03 01 	lds	r30, 0x0103
    c00e:	f0 e0       	ldi	r31, 0x00	; 0
    c010:	ec 5f       	subi	r30, 0xFC	; 252
    c012:	fe 4f       	sbci	r31, 0xFE	; 254
    c014:	80 81       	ld	r24, Z
		if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    c016:	97 ec       	ldi	r25, 0xC7	; 199
    c018:	98 0f       	add	r25, r24
    c01a:	97 30       	cpi	r25, 0x07	; 7
    c01c:	10 f0       	brcs	.+4      	; 0xc022 <update_join_net_game+0x160>
		if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_DOWN))
	{
		gameId[gameIdIndex]++;
    c01e:	8f 5f       	subi	r24, 0xFF	; 255
    c020:	01 c0       	rjmp	.+2      	; 0xc024 <update_join_net_game+0x162>
		if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    c022:	81 e4       	ldi	r24, 0x41	; 65
    c024:	80 83       	st	Z, r24
		if (gameId[gameIdIndex] > 'Z') gameId[gameIdIndex] = '0';
    c026:	80 81       	ld	r24, Z
    c028:	8b 35       	cpi	r24, 0x5B	; 91
    c02a:	b0 f0       	brcs	.+44     	; 0xc058 <update_join_net_game+0x196>
    c02c:	80 e3       	ldi	r24, 0x30	; 48
    c02e:	80 83       	st	Z, r24
    c030:	13 c0       	rjmp	.+38     	; 0xc058 <update_join_net_game+0x196>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_RIGHT))
    c032:	c7 ff       	sbrs	r28, 7
    c034:	07 c0       	rjmp	.+14     	; 0xc044 <update_join_net_game+0x182>
	{
		gameIdIndex++;
    c036:	80 91 03 01 	lds	r24, 0x0103
    c03a:	8f 5f       	subi	r24, 0xFF	; 255
		if (gameIdIndex > 7) gameIdIndex = 7;
    c03c:	88 30       	cpi	r24, 0x08	; 8
    c03e:	50 f0       	brcs	.+20     	; 0xc054 <update_join_net_game+0x192>
    c040:	87 e0       	ldi	r24, 0x07	; 7
    c042:	08 c0       	rjmp	.+16     	; 0xc054 <update_join_net_game+0x192>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_LEFT))
    c044:	c6 ff       	sbrs	r28, 6
    c046:	16 c0       	rjmp	.+44     	; 0xc074 <update_join_net_game+0x1b2>
	{
		gameIdIndex--;
    c048:	80 91 03 01 	lds	r24, 0x0103
    c04c:	81 50       	subi	r24, 0x01	; 1
		if (gameIdIndex < 2) gameIdIndex= 2;
    c04e:	82 30       	cpi	r24, 0x02	; 2
    c050:	08 f4       	brcc	.+2      	; 0xc054 <update_join_net_game+0x192>
    c052:	82 e0       	ldi	r24, 0x02	; 2
    c054:	80 93 03 01 	sts	0x0103, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    c058:	24 e0       	ldi	r18, 0x04	; 4
    c05a:	40 91 5c 0f 	lds	r20, 0x0F5C
    c05e:	60 91 ea 0b 	lds	r22, 0x0BEA
    c062:	80 91 b6 0b 	lds	r24, 0x0BB6
	}
}
    c066:	df 91       	pop	r29
    c068:	cf 91       	pop	r28
    c06a:	0f 91       	pop	r16
    c06c:	ff 90       	pop	r15
    c06e:	ef 90       	pop	r14
	}
	else if ((p1->pressed & BTN_LEFT))
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    c070:	0c 94 f1 4d 	jmp	0x9be2	; 0x9be2 <LBPlaySound>
	}
}
    c074:	df 91       	pop	r29
    c076:	cf 91       	pop	r28
    c078:	0f 91       	pop	r16
    c07a:	ff 90       	pop	r15
    c07c:	ef 90       	pop	r14
    c07e:	08 95       	ret

0000c080 <button_map>:
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    c080:	00 97       	sbiw	r24, 0x00	; 0
    c082:	41 f0       	breq	.+16     	; 0xc094 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    c084:	81 30       	cpi	r24, 0x01	; 1
    c086:	91 05       	cpc	r25, r1
    c088:	41 f0       	breq	.+16     	; 0xc09a <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    c08a:	82 30       	cpi	r24, 0x02	; 2
    c08c:	91 05       	cpc	r25, r1
    c08e:	41 f0       	breq	.+16     	; 0xc0a0 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    c090:	03 97       	sbiw	r24, 0x03	; 3
    c092:	49 f0       	breq	.+18     	; 0xc0a6 <button_map+0x26>
}
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    c094:	80 e1       	ldi	r24, 0x10	; 16
    c096:	90 e0       	ldi	r25, 0x00	; 0
    c098:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    c09a:	80 e2       	ldi	r24, 0x20	; 32
    c09c:	90 e0       	ldi	r25, 0x00	; 0
    c09e:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    c0a0:	80 e4       	ldi	r24, 0x40	; 64
    c0a2:	90 e0       	ldi	r25, 0x00	; 0
    c0a4:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    c0a6:	80 e8       	ldi	r24, 0x80	; 128
    c0a8:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    c0aa:	08 95       	ret

0000c0ac <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    c0ac:	8f 92       	push	r8
    c0ae:	9f 92       	push	r9
    c0b0:	af 92       	push	r10
    c0b2:	bf 92       	push	r11
    c0b4:	cf 92       	push	r12
    c0b6:	df 92       	push	r13
    c0b8:	ef 92       	push	r14
    c0ba:	ff 92       	push	r15
    c0bc:	0f 93       	push	r16
    c0be:	1f 93       	push	r17
    c0c0:	cf 93       	push	r28
    c0c2:	df 93       	push	r29
    c0c4:	f8 2e       	mov	r15, r24
    c0c6:	e6 2e       	mov	r14, r22
    c0c8:	d4 2e       	mov	r13, r20
    c0ca:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    c0cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c0ce:	88 23       	and	r24, r24
    c0d0:	09 f4       	brne	.+2      	; 0xc0d4 <crash_and_turn+0x28>
    c0d2:	a8 c0       	rjmp	.+336    	; 0xc224 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    c0d4:	f8 01       	movw	r30, r16
    c0d6:	c4 80       	ldd	r12, Z+4	; 0x04
    c0d8:	c4 fe       	sbrs	r12, 4
    c0da:	23 c0       	rjmp	.+70     	; 0xc122 <crash_and_turn+0x76>
    c0dc:	fe e1       	ldi	r31, 0x1E	; 30
    c0de:	6f 02       	muls	r22, r31
    c0e0:	40 01       	movw	r8, r0
    c0e2:	11 24       	eor	r1, r1
    c0e4:	af 2c       	mov	r10, r15
    c0e6:	bb 24       	eor	r11, r11
    c0e8:	a7 fc       	sbrc	r10, 7
    c0ea:	b0 94       	com	r11
    c0ec:	c4 01       	movw	r24, r8
    c0ee:	8a 0d       	add	r24, r10
    c0f0:	9b 1d       	adc	r25, r11
    c0f2:	01 97       	sbiw	r24, 0x01	; 1
    c0f4:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c0f8:	81 11       	cpse	r24, r1
    c0fa:	13 c0       	rjmp	.+38     	; 0xc122 <crash_and_turn+0x76>
    c0fc:	c4 01       	movw	r24, r8
    c0fe:	8a 0d       	add	r24, r10
    c100:	9b 1d       	adc	r25, r11
    c102:	4d 96       	adiw	r24, 0x1d	; 29
    c104:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c108:	81 11       	cpse	r24, r1
    c10a:	0b c0       	rjmp	.+22     	; 0xc122 <crash_and_turn+0x76>
    c10c:	c4 01       	movw	r24, r8
    c10e:	8a 0d       	add	r24, r10
    c110:	9b 1d       	adc	r25, r11
    c112:	cb 96       	adiw	r24, 0x3b	; 59
    c114:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c118:	81 11       	cpse	r24, r1
    c11a:	03 c0       	rjmp	.+6      	; 0xc122 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    c11c:	80 e4       	ldi	r24, 0x40	; 64
    c11e:	90 e0       	ldi	r25, 0x00	; 0
    c120:	6f c0       	rjmp	.+222    	; 0xc200 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    c122:	c6 fe       	sbrs	r12, 6
    c124:	23 c0       	rjmp	.+70     	; 0xc16c <crash_and_turn+0xc0>
    c126:	8e 2d       	mov	r24, r14
    c128:	99 27       	eor	r25, r25
    c12a:	87 fd       	sbrc	r24, 7
    c12c:	90 95       	com	r25
    c12e:	02 96       	adiw	r24, 0x02	; 2
    c130:	2e e1       	ldi	r18, 0x1E	; 30
    c132:	28 9f       	mul	r18, r24
    c134:	50 01       	movw	r10, r0
    c136:	29 9f       	mul	r18, r25
    c138:	b0 0c       	add	r11, r0
    c13a:	11 24       	eor	r1, r1
    c13c:	af 0c       	add	r10, r15
    c13e:	b1 1c       	adc	r11, r1
    c140:	f7 fc       	sbrc	r15, 7
    c142:	ba 94       	dec	r11
    c144:	c5 01       	movw	r24, r10
    c146:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c14a:	81 11       	cpse	r24, r1
    c14c:	0f c0       	rjmp	.+30     	; 0xc16c <crash_and_turn+0xc0>
    c14e:	c5 01       	movw	r24, r10
    c150:	01 96       	adiw	r24, 0x01	; 1
    c152:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c156:	81 11       	cpse	r24, r1
    c158:	09 c0       	rjmp	.+18     	; 0xc16c <crash_and_turn+0xc0>
    c15a:	c5 01       	movw	r24, r10
    c15c:	02 96       	adiw	r24, 0x02	; 2
    c15e:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c162:	81 11       	cpse	r24, r1
    c164:	03 c0       	rjmp	.+6      	; 0xc16c <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    c166:	80 e2       	ldi	r24, 0x20	; 32
    c168:	90 e0       	ldi	r25, 0x00	; 0
    c16a:	4a c0       	rjmp	.+148    	; 0xc200 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    c16c:	c5 fe       	sbrs	r12, 5
    c16e:	24 c0       	rjmp	.+72     	; 0xc1b8 <crash_and_turn+0x10c>
    c170:	fe 2d       	mov	r31, r14
    c172:	8e e1       	ldi	r24, 0x1E	; 30
    c174:	f8 02       	muls	r31, r24
    c176:	40 01       	movw	r8, r0
    c178:	11 24       	eor	r1, r1
    c17a:	af 2c       	mov	r10, r15
    c17c:	bb 24       	eor	r11, r11
    c17e:	a7 fc       	sbrc	r10, 7
    c180:	b0 94       	com	r11
    c182:	c4 01       	movw	r24, r8
    c184:	8a 0d       	add	r24, r10
    c186:	9b 1d       	adc	r25, r11
    c188:	02 96       	adiw	r24, 0x02	; 2
    c18a:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c18e:	81 11       	cpse	r24, r1
    c190:	13 c0       	rjmp	.+38     	; 0xc1b8 <crash_and_turn+0x10c>
    c192:	c4 01       	movw	r24, r8
    c194:	8a 0d       	add	r24, r10
    c196:	9b 1d       	adc	r25, r11
    c198:	80 96       	adiw	r24, 0x20	; 32
    c19a:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c19e:	81 11       	cpse	r24, r1
    c1a0:	0b c0       	rjmp	.+22     	; 0xc1b8 <crash_and_turn+0x10c>
    c1a2:	c4 01       	movw	r24, r8
    c1a4:	8a 0d       	add	r24, r10
    c1a6:	9b 1d       	adc	r25, r11
    c1a8:	ce 96       	adiw	r24, 0x3e	; 62
    c1aa:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c1ae:	81 11       	cpse	r24, r1
    c1b0:	03 c0       	rjmp	.+6      	; 0xc1b8 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    c1b2:	80 e8       	ldi	r24, 0x80	; 128
    c1b4:	90 e0       	ldi	r25, 0x00	; 0
    c1b6:	24 c0       	rjmp	.+72     	; 0xc200 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    c1b8:	c7 fe       	sbrs	r12, 7
    c1ba:	29 c0       	rjmp	.+82     	; 0xc20e <crash_and_turn+0x162>
    c1bc:	8e 2d       	mov	r24, r14
    c1be:	99 27       	eor	r25, r25
    c1c0:	87 fd       	sbrc	r24, 7
    c1c2:	90 95       	com	r25
    c1c4:	01 97       	sbiw	r24, 0x01	; 1
    c1c6:	2e e1       	ldi	r18, 0x1E	; 30
    c1c8:	28 9f       	mul	r18, r24
    c1ca:	50 01       	movw	r10, r0
    c1cc:	29 9f       	mul	r18, r25
    c1ce:	b0 0c       	add	r11, r0
    c1d0:	11 24       	eor	r1, r1
    c1d2:	af 0c       	add	r10, r15
    c1d4:	b1 1c       	adc	r11, r1
    c1d6:	f7 fc       	sbrc	r15, 7
    c1d8:	ba 94       	dec	r11
    c1da:	c5 01       	movw	r24, r10
    c1dc:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c1e0:	81 11       	cpse	r24, r1
    c1e2:	15 c0       	rjmp	.+42     	; 0xc20e <crash_and_turn+0x162>
    c1e4:	c5 01       	movw	r24, r10
    c1e6:	01 96       	adiw	r24, 0x01	; 1
    c1e8:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c1ec:	81 11       	cpse	r24, r1
    c1ee:	0f c0       	rjmp	.+30     	; 0xc20e <crash_and_turn+0x162>
    c1f0:	c5 01       	movw	r24, r10
    c1f2:	02 96       	adiw	r24, 0x02	; 2
    c1f4:	0e 94 c8 53 	call	0xa790	; 0xa790 <solid_tile>
    c1f8:	81 11       	cpse	r24, r1
    c1fa:	09 c0       	rjmp	.+18     	; 0xc20e <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    c1fc:	80 e1       	ldi	r24, 0x10	; 16
    c1fe:	90 e0       	ldi	r25, 0x00	; 0
    c200:	f8 01       	movw	r30, r16
    c202:	95 83       	std	Z+5, r25	; 0x05
    c204:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    c206:	ce 01       	movw	r24, r28
    c208:	0e 94 10 53 	call	0xa620	; 0xa620 <recoil_sprite>
			recoiled = 0;
    c20c:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    c20e:	f8 01       	movw	r30, r16
    c210:	24 81       	ldd	r18, Z+4	; 0x04
    c212:	35 81       	ldd	r19, Z+5	; 0x05
    c214:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c216:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c218:	82 23       	and	r24, r18
    c21a:	93 23       	and	r25, r19
    c21c:	89 2b       	or	r24, r25
    c21e:	11 f0       	breq	.+4      	; 0xc224 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    c220:	1a 8e       	std	Y+26, r1	; 0x1a
    c222:	1c c0       	rjmp	.+56     	; 0xc25c <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    c224:	dd 20       	and	r13, r13
    c226:	d1 f0       	breq	.+52     	; 0xc25c <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    c228:	f8 01       	movw	r30, r16
    c22a:	84 81       	ldd	r24, Z+4	; 0x04
    c22c:	86 ff       	sbrs	r24, 6
    c22e:	03 c0       	rjmp	.+6      	; 0xc236 <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    c230:	80 e1       	ldi	r24, 0x10	; 16
    c232:	90 e0       	ldi	r25, 0x00	; 0
    c234:	0f c0       	rjmp	.+30     	; 0xc254 <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    c236:	84 ff       	sbrs	r24, 4
    c238:	03 c0       	rjmp	.+6      	; 0xc240 <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    c23a:	80 e8       	ldi	r24, 0x80	; 128
    c23c:	90 e0       	ldi	r25, 0x00	; 0
    c23e:	09 c0       	rjmp	.+18     	; 0xc252 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    c240:	87 ff       	sbrs	r24, 7
    c242:	03 c0       	rjmp	.+6      	; 0xc24a <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    c244:	80 e2       	ldi	r24, 0x20	; 32
    c246:	90 e0       	ldi	r25, 0x00	; 0
    c248:	04 c0       	rjmp	.+8      	; 0xc252 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    c24a:	85 ff       	sbrs	r24, 5
    c24c:	07 c0       	rjmp	.+14     	; 0xc25c <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    c24e:	80 e4       	ldi	r24, 0x40	; 64
    c250:	90 e0       	ldi	r25, 0x00	; 0
    c252:	f8 01       	movw	r30, r16
    c254:	95 83       	std	Z+5, r25	; 0x05
    c256:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    c258:	81 e0       	ldi	r24, 0x01	; 1
    c25a:	8a 8f       	std	Y+26, r24	; 0x1a
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c25c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c25e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c260:	80 31       	cpi	r24, 0x10	; 16
    c262:	91 05       	cpc	r25, r1
    c264:	19 f0       	breq	.+6      	; 0xc26c <crash_and_turn+0x1c0>
    c266:	80 32       	cpi	r24, 0x20	; 32
    c268:	91 05       	cpc	r25, r1
    c26a:	19 f4       	brne	.+6      	; 0xc272 <crash_and_turn+0x1c6>
    c26c:	2b a1       	ldd	r18, Y+35	; 0x23
    c26e:	e2 16       	cp	r14, r18
    c270:	59 f0       	breq	.+22     	; 0xc288 <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    c272:	80 34       	cpi	r24, 0x40	; 64
    c274:	91 05       	cpc	r25, r1
    c276:	19 f0       	breq	.+6      	; 0xc27e <crash_and_turn+0x1d2>
    c278:	80 38       	cpi	r24, 0x80	; 128
    c27a:	91 05       	cpc	r25, r1
    c27c:	39 f4       	brne	.+14     	; 0xc28c <crash_and_turn+0x1e0>
    c27e:	81 e0       	ldi	r24, 0x01	; 1
    c280:	9b a1       	ldd	r25, Y+35	; 0x23
    c282:	f9 12       	cpse	r15, r25
    c284:	03 c0       	rjmp	.+6      	; 0xc28c <crash_and_turn+0x1e0>
    c286:	03 c0       	rjmp	.+6      	; 0xc28e <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c288:	81 e0       	ldi	r24, 0x01	; 1
    c28a:	01 c0       	rjmp	.+2      	; 0xc28e <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    c28c:	80 e0       	ldi	r24, 0x00	; 0
}
    c28e:	df 91       	pop	r29
    c290:	cf 91       	pop	r28
    c292:	1f 91       	pop	r17
    c294:	0f 91       	pop	r16
    c296:	ff 90       	pop	r15
    c298:	ef 90       	pop	r14
    c29a:	df 90       	pop	r13
    c29c:	cf 90       	pop	r12
    c29e:	bf 90       	pop	r11
    c2a0:	af 90       	pop	r10
    c2a2:	9f 90       	pop	r9
    c2a4:	8f 90       	pop	r8
    c2a6:	08 95       	ret

0000c2a8 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    c2a8:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    c2aa:	26 2f       	mov	r18, r22
    c2ac:	33 27       	eor	r19, r19
    c2ae:	27 fd       	sbrc	r18, 7
    c2b0:	30 95       	com	r19
    c2b2:	37 ff       	sbrs	r19, 7
    c2b4:	03 c0       	rjmp	.+6      	; 0xc2bc <get_cpu_goal_direction+0x14>
    c2b6:	31 95       	neg	r19
    c2b8:	21 95       	neg	r18
    c2ba:	31 09       	sbc	r19, r1
    c2bc:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    c2be:	24 2f       	mov	r18, r20
    c2c0:	33 27       	eor	r19, r19
    c2c2:	27 fd       	sbrc	r18, 7
    c2c4:	30 95       	com	r19
    c2c6:	37 ff       	sbrs	r19, 7
    c2c8:	03 c0       	rjmp	.+6      	; 0xc2d0 <get_cpu_goal_direction+0x28>
    c2ca:	31 95       	neg	r19
    c2cc:	21 95       	neg	r18
    c2ce:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    c2d0:	83 8d       	ldd	r24, Z+27	; 0x1b
    c2d2:	81 11       	cpse	r24, r1
    c2d4:	08 c0       	rjmp	.+16     	; 0xc2e6 <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    c2d6:	29 17       	cp	r18, r25
    c2d8:	1c f4       	brge	.+6      	; 0xc2e0 <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    c2da:	16 16       	cp	r1, r22
    c2dc:	94 f0       	brlt	.+36     	; 0xc302 <get_cpu_goal_direction+0x5a>
    c2de:	0b c0       	rjmp	.+22     	; 0xc2f6 <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    c2e0:	14 16       	cp	r1, r20
    c2e2:	94 f0       	brlt	.+36     	; 0xc308 <get_cpu_goal_direction+0x60>
    c2e4:	0b c0       	rjmp	.+22     	; 0xc2fc <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    c2e6:	29 17       	cp	r18, r25
    c2e8:	1c f4       	brge	.+6      	; 0xc2f0 <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    c2ea:	16 16       	cp	r1, r22
    c2ec:	24 f0       	brlt	.+8      	; 0xc2f6 <get_cpu_goal_direction+0x4e>
    c2ee:	09 c0       	rjmp	.+18     	; 0xc302 <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    c2f0:	14 16       	cp	r1, r20
    c2f2:	24 f0       	brlt	.+8      	; 0xc2fc <get_cpu_goal_direction+0x54>
    c2f4:	09 c0       	rjmp	.+18     	; 0xc308 <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    c2f6:	80 e4       	ldi	r24, 0x40	; 64
    c2f8:	90 e0       	ldi	r25, 0x00	; 0
    c2fa:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    c2fc:	80 e1       	ldi	r24, 0x10	; 16
    c2fe:	90 e0       	ldi	r25, 0x00	; 0
    c300:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    c302:	80 e8       	ldi	r24, 0x80	; 128
    c304:	90 e0       	ldi	r25, 0x00	; 0
    c306:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    c308:	80 e2       	ldi	r24, 0x20	; 32
    c30a:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    c30c:	08 95       	ret

0000c30e <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    c30e:	2f 92       	push	r2
    c310:	3f 92       	push	r3
    c312:	4f 92       	push	r4
    c314:	5f 92       	push	r5
    c316:	7f 92       	push	r7
    c318:	8f 92       	push	r8
    c31a:	9f 92       	push	r9
    c31c:	af 92       	push	r10
    c31e:	bf 92       	push	r11
    c320:	cf 92       	push	r12
    c322:	df 92       	push	r13
    c324:	ef 92       	push	r14
    c326:	ff 92       	push	r15
    c328:	0f 93       	push	r16
    c32a:	1f 93       	push	r17
    c32c:	cf 93       	push	r28
    c32e:	df 93       	push	r29
    c330:	cd b7       	in	r28, 0x3d	; 61
    c332:	de b7       	in	r29, 0x3e	; 62
    c334:	2a 97       	sbiw	r28, 0x0a	; 10
    c336:	0f b6       	in	r0, 0x3f	; 63
    c338:	f8 94       	cli
    c33a:	de bf       	out	0x3e, r29	; 62
    c33c:	0f be       	out	0x3f, r0	; 63
    c33e:	cd bf       	out	0x3d, r28	; 61
    c340:	9c 01       	movw	r18, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    c342:	db 01       	movw	r26, r22
    c344:	13 96       	adiw	r26, 0x03	; 3
    c346:	8d 91       	ld	r24, X+
    c348:	9d 91       	ld	r25, X+
    c34a:	0d 90       	ld	r0, X+
    c34c:	bc 91       	ld	r27, X
    c34e:	a0 2d       	mov	r26, r0
    c350:	89 83       	std	Y+1, r24	; 0x01
    c352:	9a 83       	std	Y+2, r25	; 0x02
    c354:	ab 83       	std	Y+3, r26	; 0x03
    c356:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    c358:	fb 01       	movw	r30, r22
    c35a:	87 80       	ldd	r8, Z+7	; 0x07
    c35c:	90 84       	ldd	r9, Z+8	; 0x08
    c35e:	a1 84       	ldd	r10, Z+9	; 0x09
    c360:	b2 84       	ldd	r11, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    c362:	d9 01       	movw	r26, r18
    c364:	13 96       	adiw	r26, 0x03	; 3
    c366:	cd 90       	ld	r12, X+
    c368:	dd 90       	ld	r13, X+
    c36a:	ed 90       	ld	r14, X+
    c36c:	fc 90       	ld	r15, X
    c36e:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    c370:	17 96       	adiw	r26, 0x07	; 7
    c372:	8d 91       	ld	r24, X+
    c374:	9d 91       	ld	r25, X+
    c376:	0d 90       	ld	r0, X+
    c378:	bc 91       	ld	r27, X
    c37a:	a0 2d       	mov	r26, r0
    c37c:	8d 83       	std	Y+5, r24	; 0x05
    c37e:	9e 83       	std	Y+6, r25	; 0x06
    c380:	af 83       	std	Y+7, r26	; 0x07
    c382:	b8 87       	std	Y+8, r27	; 0x08
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    c384:	f9 01       	movw	r30, r18
    c386:	86 89       	ldd	r24, Z+22	; 0x16
    c388:	81 11       	cpse	r24, r1
    c38a:	06 c0       	rjmp	.+12     	; 0xc398 <get_cpu_joypad_state+0x8a>
	{
		p->held = 0;
    c38c:	da 01       	movw	r26, r20
    c38e:	15 96       	adiw	r26, 0x05	; 5
    c390:	1c 92       	st	X, r1
    c392:	1e 92       	st	-X, r1
    c394:	14 97       	sbiw	r26, 0x04	; 4
		return;
    c396:	57 c2       	rjmp	.+1198   	; 0xc846 <get_cpu_joypad_state+0x538>
    c398:	2a 01       	movw	r4, r20
    c39a:	1b 01       	movw	r2, r22
    c39c:	3a 87       	std	Y+10, r19	; 0x0a
    c39e:	29 87       	std	Y+9, r18	; 0x09
	}
	
	// Shot
	if (shoot_pressed(p))
    c3a0:	ca 01       	movw	r24, r20
    c3a2:	0e 94 6d 51 	call	0xa2da	; 0xa2da <shoot_pressed>
    c3a6:	88 23       	and	r24, r24
    c3a8:	19 f0       	breq	.+6      	; 0xc3b0 <get_cpu_joypad_state+0xa2>
	{
		p->pressed = 0;
    c3aa:	f2 01       	movw	r30, r4
    c3ac:	11 82       	std	Z+1, r1	; 0x01
    c3ae:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    c3b0:	20 91 01 01 	lds	r18, 0x0101
    c3b4:	30 91 02 01 	lds	r19, 0x0102
    c3b8:	c9 01       	movw	r24, r18
    c3ba:	6a e0       	ldi	r22, 0x0A	; 10
    c3bc:	70 e0       	ldi	r23, 0x00	; 0
    c3be:	0e 94 2d 72 	call	0xe45a	; 0xe45a <__udivmodhi4>
    c3c2:	89 2b       	or	r24, r25
    c3c4:	59 f4       	brne	.+22     	; 0xc3dc <get_cpu_joypad_state+0xce>
    c3c6:	a9 85       	ldd	r26, Y+9	; 0x09
    c3c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    c3ca:	56 96       	adiw	r26, 0x16	; 22
    c3cc:	8c 91       	ld	r24, X
    c3ce:	83 33       	cpi	r24, 0x33	; 51
    c3d0:	28 f0       	brcs	.+10     	; 0xc3dc <get_cpu_joypad_state+0xce>
	{
		p->pressed = BTN_B;
    c3d2:	81 e0       	ldi	r24, 0x01	; 1
    c3d4:	90 e0       	ldi	r25, 0x00	; 0
    c3d6:	f2 01       	movw	r30, r4
    c3d8:	91 83       	std	Z+1, r25	; 0x01
    c3da:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    c3dc:	c9 01       	movw	r24, r18
    c3de:	64 eb       	ldi	r22, 0xB4	; 180
    c3e0:	70 e0       	ldi	r23, 0x00	; 0
    c3e2:	0e 94 2d 72 	call	0xe45a	; 0xe45a <__udivmodhi4>
    c3e6:	89 2b       	or	r24, r25
    c3e8:	61 f0       	breq	.+24     	; 0xc402 <get_cpu_joypad_state+0xf4>
    c3ea:	a9 85       	ldd	r26, Y+9	; 0x09
    c3ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    c3ee:	56 96       	adiw	r26, 0x16	; 22
    c3f0:	8c 91       	ld	r24, X
    c3f2:	56 97       	sbiw	r26, 0x16	; 22
    c3f4:	8a 30       	cpi	r24, 0x0A	; 10
    c3f6:	29 f0       	breq	.+10     	; 0xc402 <get_cpu_joypad_state+0xf4>
    c3f8:	94 96       	adiw	r26, 0x24	; 36
    c3fa:	8c 91       	ld	r24, X
    c3fc:	88 23       	and	r24, r24
    c3fe:	09 f4       	brne	.+2      	; 0xc402 <get_cpu_joypad_state+0xf4>
    c400:	7e c0       	rjmp	.+252    	; 0xc4fe <get_cpu_joypad_state+0x1f0>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    c402:	20 e0       	ldi	r18, 0x00	; 0
    c404:	30 e0       	ldi	r19, 0x00	; 0
    c406:	40 e0       	ldi	r20, 0x00	; 0
    c408:	5e e3       	ldi	r21, 0x3E	; 62
    c40a:	69 81       	ldd	r22, Y+1	; 0x01
    c40c:	7a 81       	ldd	r23, Y+2	; 0x02
    c40e:	8b 81       	ldd	r24, Y+3	; 0x03
    c410:	9c 81       	ldd	r25, Y+4	; 0x04
    c412:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    c416:	0e 94 26 73 	call	0xe64c	; 0xe64c <__fixsfsi>
    c41a:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    c41c:	20 e0       	ldi	r18, 0x00	; 0
    c41e:	30 e0       	ldi	r19, 0x00	; 0
    c420:	40 e0       	ldi	r20, 0x00	; 0
    c422:	5e e3       	ldi	r21, 0x3E	; 62
    c424:	c5 01       	movw	r24, r10
    c426:	b4 01       	movw	r22, r8
    c428:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    c42c:	20 e0       	ldi	r18, 0x00	; 0
    c42e:	30 e0       	ldi	r19, 0x00	; 0
    c430:	40 e4       	ldi	r20, 0x40	; 64
    c432:	50 e4       	ldi	r21, 0x40	; 64
    c434:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    c438:	0e 94 26 73 	call	0xe64c	; 0xe64c <__fixsfsi>
    c43c:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    c43e:	20 e0       	ldi	r18, 0x00	; 0
    c440:	30 e0       	ldi	r19, 0x00	; 0
    c442:	40 e0       	ldi	r20, 0x00	; 0
    c444:	5e e3       	ldi	r21, 0x3E	; 62
    c446:	c7 01       	movw	r24, r14
    c448:	b6 01       	movw	r22, r12
    c44a:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    c44e:	0e 94 26 73 	call	0xe64c	; 0xe64c <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    c452:	f7 2c       	mov	r15, r7
    c454:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    c456:	20 e0       	ldi	r18, 0x00	; 0
    c458:	30 e0       	ldi	r19, 0x00	; 0
    c45a:	40 e0       	ldi	r20, 0x00	; 0
    c45c:	5e e3       	ldi	r21, 0x3E	; 62
    c45e:	6d 81       	ldd	r22, Y+5	; 0x05
    c460:	7e 81       	ldd	r23, Y+6	; 0x06
    c462:	8f 81       	ldd	r24, Y+7	; 0x07
    c464:	98 85       	ldd	r25, Y+8	; 0x08
    c466:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    c46a:	20 e0       	ldi	r18, 0x00	; 0
    c46c:	30 e0       	ldi	r19, 0x00	; 0
    c46e:	40 e4       	ldi	r20, 0x40	; 64
    c470:	50 e4       	ldi	r21, 0x40	; 64
    c472:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    c476:	0e 94 26 73 	call	0xe64c	; 0xe64c <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    c47a:	4b 2d       	mov	r20, r11
    c47c:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    c47e:	e9 85       	ldd	r30, Y+9	; 0x09
    c480:	fa 85       	ldd	r31, Y+10	; 0x0a
    c482:	14 a2       	std	Z+36, r1	; 0x24
		player->feeling_my_way = 0;
    c484:	12 8e       	std	Z+26, r1	; 0x1a
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    c486:	82 e0       	ldi	r24, 0x02	; 2
    c488:	8f 0d       	add	r24, r15
    c48a:	85 30       	cpi	r24, 0x05	; 5
    c48c:	c8 f4       	brcc	.+50     	; 0xc4c0 <get_cpu_joypad_state+0x1b2>
    c48e:	4e 3f       	cpi	r20, 0xFE	; 254
    c490:	bc f0       	brlt	.+46     	; 0xc4c0 <get_cpu_joypad_state+0x1b2>
    c492:	43 30       	cpi	r20, 0x03	; 3
    c494:	ac f4       	brge	.+42     	; 0xc4c0 <get_cpu_joypad_state+0x1b2>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    c496:	64 e0       	ldi	r22, 0x04	; 4
    c498:	80 e0       	ldi	r24, 0x00	; 0
    c49a:	0e 94 bd 4d 	call	0x9b7a	; 0x9b7a <LBRandom>
    c49e:	90 e0       	ldi	r25, 0x00	; 0
    c4a0:	0e 94 40 60 	call	0xc080	; 0xc080 <button_map>
    c4a4:	a9 85       	ldd	r26, Y+9	; 0x09
    c4a6:	ba 85       	ldd	r27, Y+10	; 0x0a
    c4a8:	5e 96       	adiw	r26, 0x1e	; 30
    c4aa:	9c 93       	st	X, r25
    c4ac:	8e 93       	st	-X, r24
    c4ae:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = LBRandom(5, 18);
    c4b0:	62 e1       	ldi	r22, 0x12	; 18
    c4b2:	85 e0       	ldi	r24, 0x05	; 5
    c4b4:	0e 94 bd 4d 	call	0x9b7a	; 0x9b7a <LBRandom>
    c4b8:	e9 85       	ldd	r30, Y+9	; 0x09
    c4ba:	fa 85       	ldd	r31, Y+10	; 0x0a
    c4bc:	83 a3       	std	Z+35, r24	; 0x23
    c4be:	16 c0       	rjmp	.+44     	; 0xc4ec <get_cpu_joypad_state+0x1de>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    c4c0:	6f 2d       	mov	r22, r15
    c4c2:	89 85       	ldd	r24, Y+9	; 0x09
    c4c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    c4c6:	0e 94 54 61 	call	0xc2a8	; 0xc2a8 <get_cpu_goal_direction>
    c4ca:	a9 85       	ldd	r26, Y+9	; 0x09
    c4cc:	ba 85       	ldd	r27, Y+10	; 0x0a
    c4ce:	5e 96       	adiw	r26, 0x1e	; 30
    c4d0:	9c 93       	st	X, r25
    c4d2:	8e 93       	st	-X, r24
    c4d4:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c4d6:	80 31       	cpi	r24, 0x10	; 16
    c4d8:	91 05       	cpc	r25, r1
    c4da:	29 f0       	breq	.+10     	; 0xc4e6 <get_cpu_joypad_state+0x1d8>
    c4dc:	80 97       	sbiw	r24, 0x20	; 32
    c4de:	19 f0       	breq	.+6      	; 0xc4e6 <get_cpu_joypad_state+0x1d8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
    c4e0:	93 96       	adiw	r26, 0x23	; 35
    c4e2:	7c 92       	st	X, r7
    c4e4:	03 c0       	rjmp	.+6      	; 0xc4ec <get_cpu_joypad_state+0x1de>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c4e6:	e9 85       	ldd	r30, Y+9	; 0x09
    c4e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    c4ea:	b3 a2       	std	Z+35, r11	; 0x23
		}
		p->held = player->goal_direction;
    c4ec:	a9 85       	ldd	r26, Y+9	; 0x09
    c4ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    c4f0:	5d 96       	adiw	r26, 0x1d	; 29
    c4f2:	8d 91       	ld	r24, X+
    c4f4:	9c 91       	ld	r25, X
    c4f6:	5e 97       	sbiw	r26, 0x1e	; 30
    c4f8:	f2 01       	movw	r30, r4
    c4fa:	95 83       	std	Z+5, r25	; 0x05
    c4fc:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    c4fe:	a9 85       	ldd	r26, Y+9	; 0x09
    c500:	ba 85       	ldd	r27, Y+10	; 0x0a
    c502:	13 96       	adiw	r26, 0x03	; 3
    c504:	cd 90       	ld	r12, X+
    c506:	dd 90       	ld	r13, X+
    c508:	ed 90       	ld	r14, X+
    c50a:	fc 90       	ld	r15, X
    c50c:	16 97       	sbiw	r26, 0x06	; 6
    c50e:	98 96       	adiw	r26, 0x28	; 40
    c510:	2d 91       	ld	r18, X+
    c512:	3d 91       	ld	r19, X+
    c514:	4d 91       	ld	r20, X+
    c516:	5c 91       	ld	r21, X
    c518:	9b 97       	sbiw	r26, 0x2b	; 43
    c51a:	c7 01       	movw	r24, r14
    c51c:	b6 01       	movw	r22, r12
    c51e:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    c522:	88 23       	and	r24, r24
    c524:	29 f0       	breq	.+10     	; 0xc530 <get_cpu_joypad_state+0x222>
		player->deadlock_count_x = 0;
    c526:	e9 85       	ldd	r30, Y+9	; 0x09
    c528:	fa 85       	ldd	r31, Y+10	; 0x0a
    c52a:	10 a2       	std	Z+32, r1	; 0x20
    c52c:	17 8e       	std	Z+31, r1	; 0x1f
    c52e:	0b c0       	rjmp	.+22     	; 0xc546 <get_cpu_joypad_state+0x238>
	else 
		player->deadlock_count_x++;
    c530:	a9 85       	ldd	r26, Y+9	; 0x09
    c532:	ba 85       	ldd	r27, Y+10	; 0x0a
    c534:	5f 96       	adiw	r26, 0x1f	; 31
    c536:	8d 91       	ld	r24, X+
    c538:	9c 91       	ld	r25, X
    c53a:	90 97       	sbiw	r26, 0x20	; 32
    c53c:	01 96       	adiw	r24, 0x01	; 1
    c53e:	90 96       	adiw	r26, 0x20	; 32
    c540:	9c 93       	st	X, r25
    c542:	8e 93       	st	-X, r24
    c544:	5f 97       	sbiw	r26, 0x1f	; 31
	if (player->shared.y != player->old_y)
    c546:	e9 85       	ldd	r30, Y+9	; 0x09
    c548:	fa 85       	ldd	r31, Y+10	; 0x0a
    c54a:	87 80       	ldd	r8, Z+7	; 0x07
    c54c:	90 84       	ldd	r9, Z+8	; 0x08
    c54e:	a1 84       	ldd	r10, Z+9	; 0x09
    c550:	b2 84       	ldd	r11, Z+10	; 0x0a
    c552:	24 a5       	ldd	r18, Z+44	; 0x2c
    c554:	35 a5       	ldd	r19, Z+45	; 0x2d
    c556:	46 a5       	ldd	r20, Z+46	; 0x2e
    c558:	57 a5       	ldd	r21, Z+47	; 0x2f
    c55a:	c5 01       	movw	r24, r10
    c55c:	b4 01       	movw	r22, r8
    c55e:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    c562:	88 23       	and	r24, r24
    c564:	39 f0       	breq	.+14     	; 0xc574 <get_cpu_joypad_state+0x266>
		player->deadlock_count_y = 0;
    c566:	a9 85       	ldd	r26, Y+9	; 0x09
    c568:	ba 85       	ldd	r27, Y+10	; 0x0a
    c56a:	92 96       	adiw	r26, 0x22	; 34
    c56c:	1c 92       	st	X, r1
    c56e:	1e 92       	st	-X, r1
    c570:	91 97       	sbiw	r26, 0x21	; 33
    c572:	07 c0       	rjmp	.+14     	; 0xc582 <get_cpu_joypad_state+0x274>
	else
		player->deadlock_count_y++;
    c574:	e9 85       	ldd	r30, Y+9	; 0x09
    c576:	fa 85       	ldd	r31, Y+10	; 0x0a
    c578:	81 a1       	ldd	r24, Z+33	; 0x21
    c57a:	92 a1       	ldd	r25, Z+34	; 0x22
    c57c:	01 96       	adiw	r24, 0x01	; 1
    c57e:	92 a3       	std	Z+34, r25	; 0x22
    c580:	81 a3       	std	Z+33, r24	; 0x21
	player->old_x = player->shared.x;
    c582:	a9 85       	ldd	r26, Y+9	; 0x09
    c584:	ba 85       	ldd	r27, Y+10	; 0x0a
    c586:	98 96       	adiw	r26, 0x28	; 40
    c588:	cd 92       	st	X+, r12
    c58a:	dd 92       	st	X+, r13
    c58c:	ed 92       	st	X+, r14
    c58e:	fc 92       	st	X, r15
    c590:	9b 97       	sbiw	r26, 0x2b	; 43
	player->old_y = player->shared.y;
    c592:	fd 01       	movw	r30, r26
    c594:	84 a6       	std	Z+44, r8	; 0x2c
    c596:	95 a6       	std	Z+45, r9	; 0x2d
    c598:	a6 a6       	std	Z+46, r10	; 0x2e
    c59a:	b7 a6       	std	Z+47, r11	; 0x2f
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    c59c:	87 8d       	ldd	r24, Z+31	; 0x1f
    c59e:	90 a1       	ldd	r25, Z+32	; 0x20
    c5a0:	80 34       	cpi	r24, 0x40	; 64
    c5a2:	91 40       	sbci	r25, 0x01	; 1
    c5a4:	88 f0       	brcs	.+34     	; 0xc5c8 <get_cpu_joypad_state+0x2ba>
	{
		p->held = button_map(LBRandom(2, 4));
    c5a6:	64 e0       	ldi	r22, 0x04	; 4
    c5a8:	82 e0       	ldi	r24, 0x02	; 2
    c5aa:	0e 94 bd 4d 	call	0x9b7a	; 0x9b7a <LBRandom>
    c5ae:	90 e0       	ldi	r25, 0x00	; 0
    c5b0:	0e 94 40 60 	call	0xc080	; 0xc080 <button_map>
    c5b4:	d2 01       	movw	r26, r4
    c5b6:	15 96       	adiw	r26, 0x05	; 5
    c5b8:	9c 93       	st	X, r25
    c5ba:	8e 93       	st	-X, r24
    c5bc:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    c5be:	e9 85       	ldd	r30, Y+9	; 0x09
    c5c0:	fa 85       	ldd	r31, Y+10	; 0x0a
    c5c2:	10 a2       	std	Z+32, r1	; 0x20
    c5c4:	17 8e       	std	Z+31, r1	; 0x1f
    c5c6:	42 c0       	rjmp	.+132    	; 0xc64c <get_cpu_joypad_state+0x33e>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    c5c8:	a9 85       	ldd	r26, Y+9	; 0x09
    c5ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    c5cc:	91 96       	adiw	r26, 0x21	; 33
    c5ce:	8d 91       	ld	r24, X+
    c5d0:	9c 91       	ld	r25, X
    c5d2:	92 97       	sbiw	r26, 0x22	; 34
    c5d4:	80 34       	cpi	r24, 0x40	; 64
    c5d6:	91 40       	sbci	r25, 0x01	; 1
    c5d8:	88 f0       	brcs	.+34     	; 0xc5fc <get_cpu_joypad_state+0x2ee>
	{
		p->held = button_map(LBRandom(0, 2));
    c5da:	62 e0       	ldi	r22, 0x02	; 2
    c5dc:	80 e0       	ldi	r24, 0x00	; 0
    c5de:	0e 94 bd 4d 	call	0x9b7a	; 0x9b7a <LBRandom>
    c5e2:	90 e0       	ldi	r25, 0x00	; 0
    c5e4:	0e 94 40 60 	call	0xc080	; 0xc080 <button_map>
    c5e8:	f2 01       	movw	r30, r4
    c5ea:	95 83       	std	Z+5, r25	; 0x05
    c5ec:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    c5ee:	a9 85       	ldd	r26, Y+9	; 0x09
    c5f0:	ba 85       	ldd	r27, Y+10	; 0x0a
    c5f2:	92 96       	adiw	r26, 0x22	; 34
    c5f4:	1c 92       	st	X, r1
    c5f6:	1e 92       	st	-X, r1
    c5f8:	91 97       	sbiw	r26, 0x21	; 33
    c5fa:	28 c0       	rjmp	.+80     	; 0xc64c <get_cpu_joypad_state+0x33e>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    c5fc:	20 e0       	ldi	r18, 0x00	; 0
    c5fe:	30 e0       	ldi	r19, 0x00	; 0
    c600:	40 e0       	ldi	r20, 0x00	; 0
    c602:	5e e3       	ldi	r21, 0x3E	; 62
    c604:	c5 01       	movw	r24, r10
    c606:	b4 01       	movw	r22, r8
    c608:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    c60c:	20 e0       	ldi	r18, 0x00	; 0
    c60e:	30 e0       	ldi	r19, 0x00	; 0
    c610:	40 e4       	ldi	r20, 0x40	; 64
    c612:	50 e4       	ldi	r21, 0x40	; 64
    c614:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    c618:	0e 94 26 73 	call	0xe64c	; 0xe64c <__fixsfsi>
    c61c:	b6 2e       	mov	r11, r22
    c61e:	20 e0       	ldi	r18, 0x00	; 0
    c620:	30 e0       	ldi	r19, 0x00	; 0
    c622:	40 e0       	ldi	r20, 0x00	; 0
    c624:	5e e3       	ldi	r21, 0x3E	; 62
    c626:	c7 01       	movw	r24, r14
    c628:	b6 01       	movw	r22, r12
    c62a:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    c62e:	0e 94 26 73 	call	0xe64c	; 0xe64c <__fixsfsi>
    c632:	86 2f       	mov	r24, r22
    c634:	82 01       	movw	r16, r4
    c636:	29 85       	ldd	r18, Y+9	; 0x09
    c638:	3a 85       	ldd	r19, Y+10	; 0x0a
    c63a:	f9 01       	movw	r30, r18
    c63c:	42 81       	ldd	r20, Z+2	; 0x02
    c63e:	6b 2d       	mov	r22, r11
    c640:	0e 94 56 60 	call	0xc0ac	; 0xc0ac <crash_and_turn>
    c644:	a9 85       	ldd	r26, Y+9	; 0x09
    c646:	ba 85       	ldd	r27, Y+10	; 0x0a
    c648:	94 96       	adiw	r26, 0x24	; 36
    c64a:	8c 93       	st	X, r24
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    c64c:	e9 85       	ldd	r30, Y+9	; 0x09
    c64e:	fa 85       	ldd	r31, Y+10	; 0x0a
    c650:	84 8d       	ldd	r24, Z+28	; 0x1c
    c652:	81 30       	cpi	r24, 0x01	; 1
    c654:	09 f0       	breq	.+2      	; 0xc658 <get_cpu_joypad_state+0x34a>
    c656:	f7 c0       	rjmp	.+494    	; 0xc846 <get_cpu_joypad_state+0x538>
    c658:	d1 01       	movw	r26, r2
    c65a:	52 96       	adiw	r26, 0x12	; 18
    c65c:	9c 91       	ld	r25, X
    c65e:	52 97       	sbiw	r26, 0x12	; 18
    c660:	51 96       	adiw	r26, 0x11	; 17
    c662:	8c 91       	ld	r24, X
    c664:	51 97       	sbiw	r26, 0x11	; 17
    c666:	98 17       	cp	r25, r24
    c668:	08 f0       	brcs	.+2      	; 0xc66c <get_cpu_joypad_state+0x35e>
    c66a:	ed c0       	rjmp	.+474    	; 0xc846 <get_cpu_joypad_state+0x538>
	{
		if (other_player->shared.y < player->shared.y && other_player->shared.x < player->shared.x)
    c66c:	17 96       	adiw	r26, 0x07	; 7
    c66e:	cd 90       	ld	r12, X+
    c670:	dd 90       	ld	r13, X+
    c672:	ed 90       	ld	r14, X+
    c674:	fc 90       	ld	r15, X
    c676:	1a 97       	sbiw	r26, 0x0a	; 10
    c678:	87 80       	ldd	r8, Z+7	; 0x07
    c67a:	90 84       	ldd	r9, Z+8	; 0x08
    c67c:	a1 84       	ldd	r10, Z+9	; 0x09
    c67e:	b2 84       	ldd	r11, Z+10	; 0x0a
    c680:	a5 01       	movw	r20, r10
    c682:	94 01       	movw	r18, r8
    c684:	c7 01       	movw	r24, r14
    c686:	b6 01       	movw	r22, r12
    c688:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    c68c:	87 ff       	sbrs	r24, 7
    c68e:	64 c0       	rjmp	.+200    	; 0xc758 <get_cpu_joypad_state+0x44a>
    c690:	e9 85       	ldd	r30, Y+9	; 0x09
    c692:	fa 85       	ldd	r31, Y+10	; 0x0a
    c694:	23 81       	ldd	r18, Z+3	; 0x03
    c696:	34 81       	ldd	r19, Z+4	; 0x04
    c698:	45 81       	ldd	r20, Z+5	; 0x05
    c69a:	56 81       	ldd	r21, Z+6	; 0x06
    c69c:	d1 01       	movw	r26, r2
    c69e:	13 96       	adiw	r26, 0x03	; 3
    c6a0:	6d 91       	ld	r22, X+
    c6a2:	7d 91       	ld	r23, X+
    c6a4:	8d 91       	ld	r24, X+
    c6a6:	9c 91       	ld	r25, X
    c6a8:	16 97       	sbiw	r26, 0x06	; 6
    c6aa:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    c6ae:	87 ff       	sbrs	r24, 7
    c6b0:	27 c0       	rjmp	.+78     	; 0xc700 <get_cpu_joypad_state+0x3f2>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_LEFT)
    c6b2:	f1 01       	movw	r30, r2
    c6b4:	80 81       	ld	r24, Z
    c6b6:	82 30       	cpi	r24, 0x02	; 2
    c6b8:	79 f4       	brne	.+30     	; 0xc6d8 <get_cpu_joypad_state+0x3ca>
    c6ba:	a9 85       	ldd	r26, Y+9	; 0x09
    c6bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    c6be:	8c 91       	ld	r24, X
    c6c0:	83 30       	cpi	r24, 0x03	; 3
    c6c2:	51 f4       	brne	.+20     	; 0xc6d8 <get_cpu_joypad_state+0x3ca>
			{
				p->held = BTN_RIGHT;
    c6c4:	80 e8       	ldi	r24, 0x80	; 128
    c6c6:	90 e0       	ldi	r25, 0x00	; 0
    c6c8:	f2 01       	movw	r30, r4
    c6ca:	95 83       	std	Z+5, r25	; 0x05
    c6cc:	84 83       	std	Z+4, r24	; 0x04
				player->goal_reached = 0;
    c6ce:	94 96       	adiw	r26, 0x24	; 36
    c6d0:	1c 92       	st	X, r1
    c6d2:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c6d4:	5a 96       	adiw	r26, 0x1a	; 26
    c6d6:	1c 92       	st	X, r1
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_UP)
    c6d8:	d1 01       	movw	r26, r2
    c6da:	8c 91       	ld	r24, X
    c6dc:	81 30       	cpi	r24, 0x01	; 1
    c6de:	09 f0       	breq	.+2      	; 0xc6e2 <get_cpu_joypad_state+0x3d4>
    c6e0:	b2 c0       	rjmp	.+356    	; 0xc846 <get_cpu_joypad_state+0x538>
    c6e2:	e9 85       	ldd	r30, Y+9	; 0x09
    c6e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    c6e6:	80 81       	ld	r24, Z
    c6e8:	81 11       	cpse	r24, r1
    c6ea:	ad c0       	rjmp	.+346    	; 0xc846 <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    c6ec:	a9 85       	ldd	r26, Y+9	; 0x09
    c6ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    c6f0:	94 96       	adiw	r26, 0x24	; 36
    c6f2:	1c 92       	st	X, r1
    c6f4:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c6f6:	5a 96       	adiw	r26, 0x1a	; 26
    c6f8:	1c 92       	st	X, r1
				p->held = BTN_DOWN;
    c6fa:	80 e2       	ldi	r24, 0x20	; 32
    c6fc:	90 e0       	ldi	r25, 0x00	; 0
    c6fe:	6c c0       	rjmp	.+216    	; 0xc7d8 <get_cpu_joypad_state+0x4ca>
			}
		}
		else if (other_player->shared.y < player->shared.y && other_player->shared.x > player->shared.x)
    c700:	a9 85       	ldd	r26, Y+9	; 0x09
    c702:	ba 85       	ldd	r27, Y+10	; 0x0a
    c704:	13 96       	adiw	r26, 0x03	; 3
    c706:	2d 91       	ld	r18, X+
    c708:	3d 91       	ld	r19, X+
    c70a:	4d 91       	ld	r20, X+
    c70c:	5c 91       	ld	r21, X
    c70e:	16 97       	sbiw	r26, 0x06	; 6
    c710:	f1 01       	movw	r30, r2
    c712:	63 81       	ldd	r22, Z+3	; 0x03
    c714:	74 81       	ldd	r23, Z+4	; 0x04
    c716:	85 81       	ldd	r24, Z+5	; 0x05
    c718:	96 81       	ldd	r25, Z+6	; 0x06
    c71a:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    c71e:	18 16       	cp	r1, r24
    c720:	dc f4       	brge	.+54     	; 0xc758 <get_cpu_joypad_state+0x44a>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_RIGHT)
    c722:	d1 01       	movw	r26, r2
    c724:	8c 91       	ld	r24, X
    c726:	82 30       	cpi	r24, 0x02	; 2
    c728:	71 f4       	brne	.+28     	; 0xc746 <get_cpu_joypad_state+0x438>
    c72a:	e9 85       	ldd	r30, Y+9	; 0x09
    c72c:	fa 85       	ldd	r31, Y+10	; 0x0a
    c72e:	80 81       	ld	r24, Z
    c730:	81 30       	cpi	r24, 0x01	; 1
    c732:	49 f4       	brne	.+18     	; 0xc746 <get_cpu_joypad_state+0x438>
			{
				player->goal_reached = 0;
    c734:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    c736:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    c738:	80 e4       	ldi	r24, 0x40	; 64
    c73a:	90 e0       	ldi	r25, 0x00	; 0
    c73c:	d2 01       	movw	r26, r4
    c73e:	15 96       	adiw	r26, 0x05	; 5
    c740:	9c 93       	st	X, r25
    c742:	8e 93       	st	-X, r24
    c744:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_UP)
    c746:	f1 01       	movw	r30, r2
    c748:	80 81       	ld	r24, Z
    c74a:	83 30       	cpi	r24, 0x03	; 3
    c74c:	09 f0       	breq	.+2      	; 0xc750 <get_cpu_joypad_state+0x442>
    c74e:	7b c0       	rjmp	.+246    	; 0xc846 <get_cpu_joypad_state+0x538>
    c750:	a9 85       	ldd	r26, Y+9	; 0x09
    c752:	ba 85       	ldd	r27, Y+10	; 0x0a
    c754:	8c 91       	ld	r24, X
    c756:	c8 cf       	rjmp	.-112    	; 0xc6e8 <get_cpu_joypad_state+0x3da>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x < player->shared.x)
    c758:	a5 01       	movw	r20, r10
    c75a:	94 01       	movw	r18, r8
    c75c:	c7 01       	movw	r24, r14
    c75e:	b6 01       	movw	r22, r12
    c760:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    c764:	18 16       	cp	r1, r24
    c766:	e4 f5       	brge	.+120    	; 0xc7e0 <get_cpu_joypad_state+0x4d2>
    c768:	e9 85       	ldd	r30, Y+9	; 0x09
    c76a:	fa 85       	ldd	r31, Y+10	; 0x0a
    c76c:	23 81       	ldd	r18, Z+3	; 0x03
    c76e:	34 81       	ldd	r19, Z+4	; 0x04
    c770:	45 81       	ldd	r20, Z+5	; 0x05
    c772:	56 81       	ldd	r21, Z+6	; 0x06
    c774:	d1 01       	movw	r26, r2
    c776:	13 96       	adiw	r26, 0x03	; 3
    c778:	6d 91       	ld	r22, X+
    c77a:	7d 91       	ld	r23, X+
    c77c:	8d 91       	ld	r24, X+
    c77e:	9c 91       	ld	r25, X
    c780:	16 97       	sbiw	r26, 0x06	; 6
    c782:	0e 94 ba 72 	call	0xe574	; 0xe574 <__cmpsf2>
    c786:	87 ff       	sbrs	r24, 7
    c788:	33 c0       	rjmp	.+102    	; 0xc7f0 <get_cpu_joypad_state+0x4e2>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_LEFT)
    c78a:	f1 01       	movw	r30, r2
    c78c:	80 81       	ld	r24, Z
    c78e:	81 11       	cpse	r24, r1
    c790:	0f c0       	rjmp	.+30     	; 0xc7b0 <get_cpu_joypad_state+0x4a2>
    c792:	a9 85       	ldd	r26, Y+9	; 0x09
    c794:	ba 85       	ldd	r27, Y+10	; 0x0a
    c796:	8c 91       	ld	r24, X
    c798:	83 30       	cpi	r24, 0x03	; 3
    c79a:	51 f4       	brne	.+20     	; 0xc7b0 <get_cpu_joypad_state+0x4a2>
			{
				player->goal_reached = 0;
    c79c:	94 96       	adiw	r26, 0x24	; 36
    c79e:	1c 92       	st	X, r1
    c7a0:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c7a2:	5a 96       	adiw	r26, 0x1a	; 26
    c7a4:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    c7a6:	80 e8       	ldi	r24, 0x80	; 128
    c7a8:	90 e0       	ldi	r25, 0x00	; 0
    c7aa:	f2 01       	movw	r30, r4
    c7ac:	95 83       	std	Z+5, r25	; 0x05
    c7ae:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_DOWN)
    c7b0:	d1 01       	movw	r26, r2
    c7b2:	8c 91       	ld	r24, X
    c7b4:	81 30       	cpi	r24, 0x01	; 1
    c7b6:	09 f0       	breq	.+2      	; 0xc7ba <get_cpu_joypad_state+0x4ac>
    c7b8:	46 c0       	rjmp	.+140    	; 0xc846 <get_cpu_joypad_state+0x538>
    c7ba:	e9 85       	ldd	r30, Y+9	; 0x09
    c7bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    c7be:	80 81       	ld	r24, Z
    c7c0:	82 30       	cpi	r24, 0x02	; 2
    c7c2:	09 f0       	breq	.+2      	; 0xc7c6 <get_cpu_joypad_state+0x4b8>
    c7c4:	40 c0       	rjmp	.+128    	; 0xc846 <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    c7c6:	a9 85       	ldd	r26, Y+9	; 0x09
    c7c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    c7ca:	94 96       	adiw	r26, 0x24	; 36
    c7cc:	1c 92       	st	X, r1
    c7ce:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c7d0:	5a 96       	adiw	r26, 0x1a	; 26
    c7d2:	1c 92       	st	X, r1
				p->held = BTN_UP;
    c7d4:	80 e1       	ldi	r24, 0x10	; 16
    c7d6:	90 e0       	ldi	r25, 0x00	; 0
    c7d8:	f2 01       	movw	r30, r4
    c7da:	95 83       	std	Z+5, r25	; 0x05
    c7dc:	84 83       	std	Z+4, r24	; 0x04
    c7de:	33 c0       	rjmp	.+102    	; 0xc846 <get_cpu_joypad_state+0x538>
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x > player->shared.x)
    c7e0:	a5 01       	movw	r20, r10
    c7e2:	94 01       	movw	r18, r8
    c7e4:	c7 01       	movw	r24, r14
    c7e6:	b6 01       	movw	r22, r12
    c7e8:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    c7ec:	18 16       	cp	r1, r24
    c7ee:	5c f5       	brge	.+86     	; 0xc846 <get_cpu_joypad_state+0x538>
    c7f0:	a9 85       	ldd	r26, Y+9	; 0x09
    c7f2:	ba 85       	ldd	r27, Y+10	; 0x0a
    c7f4:	13 96       	adiw	r26, 0x03	; 3
    c7f6:	2d 91       	ld	r18, X+
    c7f8:	3d 91       	ld	r19, X+
    c7fa:	4d 91       	ld	r20, X+
    c7fc:	5c 91       	ld	r21, X
    c7fe:	16 97       	sbiw	r26, 0x06	; 6
    c800:	f1 01       	movw	r30, r2
    c802:	63 81       	ldd	r22, Z+3	; 0x03
    c804:	74 81       	ldd	r23, Z+4	; 0x04
    c806:	85 81       	ldd	r24, Z+5	; 0x05
    c808:	96 81       	ldd	r25, Z+6	; 0x06
    c80a:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    c80e:	18 16       	cp	r1, r24
    c810:	d4 f4       	brge	.+52     	; 0xc846 <get_cpu_joypad_state+0x538>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_RIGHT)
    c812:	d1 01       	movw	r26, r2
    c814:	8c 91       	ld	r24, X
    c816:	81 11       	cpse	r24, r1
    c818:	0e c0       	rjmp	.+28     	; 0xc836 <get_cpu_joypad_state+0x528>
    c81a:	e9 85       	ldd	r30, Y+9	; 0x09
    c81c:	fa 85       	ldd	r31, Y+10	; 0x0a
    c81e:	80 81       	ld	r24, Z
    c820:	81 30       	cpi	r24, 0x01	; 1
    c822:	49 f4       	brne	.+18     	; 0xc836 <get_cpu_joypad_state+0x528>
			{
				player->goal_reached = 0;
    c824:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    c826:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    c828:	80 e4       	ldi	r24, 0x40	; 64
    c82a:	90 e0       	ldi	r25, 0x00	; 0
    c82c:	d2 01       	movw	r26, r4
    c82e:	15 96       	adiw	r26, 0x05	; 5
    c830:	9c 93       	st	X, r25
    c832:	8e 93       	st	-X, r24
    c834:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_DOWN){
    c836:	f1 01       	movw	r30, r2
    c838:	80 81       	ld	r24, Z
    c83a:	83 30       	cpi	r24, 0x03	; 3
    c83c:	21 f4       	brne	.+8      	; 0xc846 <get_cpu_joypad_state+0x538>
    c83e:	a9 85       	ldd	r26, Y+9	; 0x09
    c840:	ba 85       	ldd	r27, Y+10	; 0x0a
    c842:	8c 91       	ld	r24, X
    c844:	bd cf       	rjmp	.-134    	; 0xc7c0 <get_cpu_joypad_state+0x4b2>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    c846:	2a 96       	adiw	r28, 0x0a	; 10
    c848:	0f b6       	in	r0, 0x3f	; 63
    c84a:	f8 94       	cli
    c84c:	de bf       	out	0x3e, r29	; 62
    c84e:	0f be       	out	0x3f, r0	; 63
    c850:	cd bf       	out	0x3d, r28	; 61
    c852:	df 91       	pop	r29
    c854:	cf 91       	pop	r28
    c856:	1f 91       	pop	r17
    c858:	0f 91       	pop	r16
    c85a:	ff 90       	pop	r15
    c85c:	ef 90       	pop	r14
    c85e:	df 90       	pop	r13
    c860:	cf 90       	pop	r12
    c862:	bf 90       	pop	r11
    c864:	af 90       	pop	r10
    c866:	9f 90       	pop	r9
    c868:	8f 90       	pop	r8
    c86a:	7f 90       	pop	r7
    c86c:	5f 90       	pop	r5
    c86e:	4f 90       	pop	r4
    c870:	3f 90       	pop	r3
    c872:	2f 90       	pop	r2
    c874:	08 95       	ret

0000c876 <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    c876:	bf 92       	push	r11
    c878:	cf 92       	push	r12
    c87a:	df 92       	push	r13
    c87c:	ef 92       	push	r14
    c87e:	ff 92       	push	r15
    c880:	0f 93       	push	r16
    c882:	1f 93       	push	r17
    c884:	cf 93       	push	r28
    c886:	df 93       	push	r29
    c888:	1f 92       	push	r1
    c88a:	cd b7       	in	r28, 0x3d	; 61
    c88c:	de b7       	in	r29, 0x3e	; 62
    c88e:	8c 01       	movw	r16, r24
    c890:	f6 2e       	mov	r15, r22
    c892:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    c894:	8f e0       	ldi	r24, 0x0F	; 15
    c896:	b8 2e       	mov	r11, r24
}
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c898:	f8 01       	movw	r30, r16
    c89a:	84 91       	lpm	r24, Z
    c89c:	83 32       	cpi	r24, 0x23	; 35
    c89e:	01 f1       	breq	.+64     	; 0xc8e0 <stream_text_middle+0x6a>
	{
		ln = strnlen_P(dialogue, 255);
    c8a0:	6f ef       	ldi	r22, 0xFF	; 255
    c8a2:	70 e0       	ldi	r23, 0x00	; 0
    c8a4:	c8 01       	movw	r24, r16
    c8a6:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <strnlen_P>
		x = 15 - ln / 2;
    c8aa:	86 95       	lsr	r24
    c8ac:	eb 2c       	mov	r14, r11
    c8ae:	e8 1a       	sub	r14, r24
    c8b0:	e0 1a       	sub	r14, r16
    c8b2:	8e 2d       	mov	r24, r14
    c8b4:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c8b6:	0f 5f       	subi	r16, 0xFF	; 255
    c8b8:	1f 4f       	sbci	r17, 0xFF	; 255
    c8ba:	f8 01       	movw	r30, r16
    c8bc:	31 97       	sbiw	r30, 0x01	; 1
    c8be:	e4 91       	lpm	r30, Z
    c8c0:	e9 83       	std	Y+1, r30	; 0x01
    c8c2:	ee 23       	and	r30, r30
    c8c4:	59 f0       	breq	.+22     	; 0xc8dc <stream_text_middle+0x66>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    c8c6:	21 e0       	ldi	r18, 0x01	; 1
    c8c8:	ae 01       	movw	r20, r28
    c8ca:	4f 5f       	subi	r20, 0xFF	; 255
    c8cc:	5f 4f       	sbci	r21, 0xFF	; 255
    c8ce:	6f 2d       	mov	r22, r15
    c8d0:	0e 94 8c 4c 	call	0x9918	; 0x9918 <LBPrintStr>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    c8d4:	c6 01       	movw	r24, r12
    c8d6:	0e 94 65 3a 	call	0x74ca	; 0x74ca <WaitUs>
    c8da:	eb cf       	rjmp	.-42     	; 0xc8b2 <stream_text_middle+0x3c>
			LBWaitUs(delay);
		}
		y++;
    c8dc:	f3 94       	inc	r15
    c8de:	dc cf       	rjmp	.-72     	; 0xc898 <stream_text_middle+0x22>
	}
}
    c8e0:	0f 90       	pop	r0
    c8e2:	df 91       	pop	r29
    c8e4:	cf 91       	pop	r28
    c8e6:	1f 91       	pop	r17
    c8e8:	0f 91       	pop	r16
    c8ea:	ff 90       	pop	r15
    c8ec:	ef 90       	pop	r14
    c8ee:	df 90       	pop	r13
    c8f0:	cf 90       	pop	r12
    c8f2:	bf 90       	pop	r11
    c8f4:	08 95       	ret

0000c8f6 <load_credits>:

void load_credits()
{
	fade_through();
    c8f6:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
	stream_text_middle((const char*) strCredits, 5, 100);
    c8fa:	44 e6       	ldi	r20, 0x64	; 100
    c8fc:	50 e0       	ldi	r21, 0x00	; 0
    c8fe:	65 e0       	ldi	r22, 0x05	; 5
    c900:	87 e9       	ldi	r24, 0x97	; 151
    c902:	92 e0       	ldi	r25, 0x02	; 2
    c904:	0e 94 3b 64 	call	0xc876	; 0xc876 <stream_text_middle>
#if JAMMA
	wifi_status = WIFI_TIMEOUT;
#else
	wifi_status = activateNet();
    c908:	0e 94 07 4b 	call	0x960e	; 0x960e <activateNet>
    c90c:	80 93 d4 0b 	sts	0x0BD4, r24
#endif
	LBWaitSeconds(4);
    c910:	84 e0       	ldi	r24, 0x04	; 4
    c912:	0e 94 d8 4d 	call	0x9bb0	; 0x9bb0 <LBWaitSeconds>
	fade_through();
    c916:	0c 94 cc 4f 	jmp	0x9f98	; 0x9f98 <fade_through>

0000c91a <send_net_message>:
		send_net_message(code, 0, 0);
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
    c91a:	0f 93       	push	r16
    c91c:	1f 93       	push	r17
    c91e:	cf 93       	push	r28
    c920:	df 93       	push	r29
	Player* player = &player1;
	Player* otherPlayer = &player2;
	JoyPadState* state = &p1;
	HandleSelectState* handle_select = &p1s;
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    c922:	90 91 b6 0b 	lds	r25, 0x0BB6
    c926:	2e ef       	ldi	r18, 0xFE	; 254
    c928:	29 0f       	add	r18, r25
    c92a:	22 30       	cpi	r18, 0x02	; 2
    c92c:	08 f0       	brcs	.+2      	; 0xc930 <send_net_message+0x16>
    c92e:	81 c0       	rjmp	.+258    	; 0xca32 <send_net_message+0x118>
	
	netMessage.hud_x = 15;
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
    c930:	2d ef       	ldi	r18, 0xFD	; 253
    c932:	28 0f       	add	r18, r24
    c934:	23 30       	cpi	r18, 0x03	; 3
    c936:	88 f4       	brcc	.+34     	; 0xc95a <send_net_message+0x40>
    c938:	10 92 e8 0f 	sts	0x0FE8, r1
	if (game.selection == JOINNETGAME)
    c93c:	93 30       	cpi	r25, 0x03	; 3
    c93e:	49 f0       	breq	.+18     	; 0xc952 <send_net_message+0x38>
void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
	Player* otherPlayer = &player2;
	JoyPadState* state = &p1;
	HandleSelectState* handle_select = &p1s;
    c940:	ab ef       	ldi	r26, 0xFB	; 251
    c942:	bf e0       	ldi	r27, 0x0F	; 15

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
	Player* otherPlayer = &player2;
	JoyPadState* state = &p1;
    c944:	21 e5       	ldi	r18, 0x51	; 81
    c946:	3c e0       	ldi	r19, 0x0C	; 12
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
	Player* otherPlayer = &player2;
    c948:	07 e4       	ldi	r16, 0x47	; 71
    c94a:	1f e0       	ldi	r17, 0x0F	; 15
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
    c94c:	e5 ed       	ldi	r30, 0xD5	; 213
    c94e:	fb e0       	ldi	r31, 0x0B	; 11
    c950:	14 c0       	rjmp	.+40     	; 0xc97a <send_net_message+0x60>
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
		handle_select = &p2s;
		netMessage.hud_x = 0;
		if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 15;
    c952:	9f e0       	ldi	r25, 0x0F	; 15
    c954:	90 93 e8 0f 	sts	0x0FE8, r25
    c958:	08 c0       	rjmp	.+16     	; 0xc96a <send_net_message+0x50>
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	
	netMessage.hud_x = 15;
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
	if (game.selection == JOINNETGAME)
    c95a:	93 30       	cpi	r25, 0x03	; 3
    c95c:	21 f0       	breq	.+8      	; 0xc966 <send_net_message+0x4c>
	JoyPadState* state = &p1;
	HandleSelectState* handle_select = &p1s;
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	
	netMessage.hud_x = 15;
    c95e:	9f e0       	ldi	r25, 0x0F	; 15
    c960:	90 93 e8 0f 	sts	0x0FE8, r25
    c964:	ed cf       	rjmp	.-38     	; 0xc940 <send_net_message+0x26>
	{
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
		handle_select = &p2s;
		netMessage.hud_x = 0;
    c966:	10 92 e8 0f 	sts	0x0FE8, r1
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
		handle_select = &p2s;
    c96a:	ad e7       	ldi	r26, 0x7D	; 125
    c96c:	bb e0       	ldi	r27, 0x0B	; 11
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
    c96e:	26 e7       	ldi	r18, 0x76	; 118
    c970:	3b e0       	ldi	r19, 0x0B	; 11
	netMessage.hud_x = 15;
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
		otherPlayer = &player1;
    c972:	05 ed       	ldi	r16, 0xD5	; 213
    c974:	1b e0       	ldi	r17, 0x0B	; 11
	
	netMessage.hud_x = 15;
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
    c976:	e7 e4       	ldi	r30, 0x47	; 71
    c978:	ff e0       	ldi	r31, 0x0F	; 15
		state = &p2;
		handle_select = &p2s;
		netMessage.hud_x = 0;
		if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 15;
	}
	netMessage.code = code;
    c97a:	80 93 df 0f 	sts	0x0FDF, r24
	netMessage.held = state->held;
    c97e:	e9 01       	movw	r28, r18
    c980:	8c 81       	ldd	r24, Y+4	; 0x04
    c982:	9d 81       	ldd	r25, Y+5	; 0x05
    c984:	90 93 e1 0f 	sts	0x0FE1, r25
    c988:	80 93 e0 0f 	sts	0x0FE0, r24
	netMessage.pressed = state->pressed;
    c98c:	88 81       	ld	r24, Y
    c98e:	99 81       	ldd	r25, Y+1	; 0x01
    c990:	90 93 e3 0f 	sts	0x0FE3, r25
    c994:	80 93 e2 0f 	sts	0x0FE2, r24
	netMessage.object_pos_x = object_pos_x;
    c998:	60 93 e4 0f 	sts	0x0FE4, r22
	netMessage.object_pos_y = object_pos_y;
    c99c:	40 93 e5 0f 	sts	0x0FE5, r20
	netMessage.score = otherPlayer->score;
    c9a0:	e8 01       	movw	r28, r16
    c9a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    c9a4:	80 93 e6 0f 	sts	0x0FE6, r24
	netMessage.level_score = otherPlayer->level_score;
    c9a8:	88 89       	ldd	r24, Y+16	; 0x10
    c9aa:	80 93 e7 0f 	sts	0x0FE7, r24
	netMessage.pos_x = player->shared.x;
    c9ae:	43 81       	ldd	r20, Z+3	; 0x03
    c9b0:	54 81       	ldd	r21, Z+4	; 0x04
    c9b2:	65 81       	ldd	r22, Z+5	; 0x05
    c9b4:	76 81       	ldd	r23, Z+6	; 0x06
    c9b6:	40 93 f2 0f 	sts	0x0FF2, r20
    c9ba:	50 93 f3 0f 	sts	0x0FF3, r21
    c9be:	60 93 f4 0f 	sts	0x0FF4, r22
    c9c2:	70 93 f5 0f 	sts	0x0FF5, r23
	netMessage.pos_y = player->shared.y;
    c9c6:	47 81       	ldd	r20, Z+7	; 0x07
    c9c8:	50 85       	ldd	r21, Z+8	; 0x08
    c9ca:	61 85       	ldd	r22, Z+9	; 0x09
    c9cc:	72 85       	ldd	r23, Z+10	; 0x0a
    c9ce:	40 93 f6 0f 	sts	0x0FF6, r20
    c9d2:	50 93 f7 0f 	sts	0x0FF7, r21
    c9d6:	60 93 f8 0f 	sts	0x0FF8, r22
    c9da:	70 93 f9 0f 	sts	0x0FF9, r23
	netMessage.speed = player->shared.speed;
    c9de:	81 81       	ldd	r24, Z+1	; 0x01
    c9e0:	80 93 f0 0f 	sts	0x0FF0, r24
	netMessage.direction = player->shared.direction;
    c9e4:	80 81       	ld	r24, Z
    c9e6:	80 93 ef 0f 	sts	0x0FEF, r24
	netMessage.recoiled = player->shared.recoiled;
    c9ea:	82 81       	ldd	r24, Z+2	; 0x02
    c9ec:	80 93 f1 0f 	sts	0x0FF1, r24
	netMessage.handle_id = handle_select->handle_id;
    c9f0:	8c 91       	ld	r24, X
    c9f2:	80 93 e9 0f 	sts	0x0FE9, r24
	netMessage.char_index = handle_select->char_index;
    c9f6:	14 96       	adiw	r26, 0x04	; 4
    c9f8:	8c 91       	ld	r24, X
    c9fa:	14 97       	sbiw	r26, 0x04	; 4
    c9fc:	80 93 ed 0f 	sts	0x0FED, r24
	netMessage.select_state = handle_select->select_state;
    ca00:	15 96       	adiw	r26, 0x05	; 5
    ca02:	8c 91       	ld	r24, X
    ca04:	15 97       	sbiw	r26, 0x05	; 5
    ca06:	80 93 ee 0f 	sts	0x0FEE, r24
	memcpy(netMessage.handle, handle_select->handle, 3);
    ca0a:	11 96       	adiw	r26, 0x01	; 1
    ca0c:	8d 91       	ld	r24, X+
    ca0e:	9d 91       	ld	r25, X+
    ca10:	ac 91       	ld	r26, X
    ca12:	80 93 ea 0f 	sts	0x0FEA, r24
    ca16:	90 93 eb 0f 	sts	0x0FEB, r25
    ca1a:	a0 93 ec 0f 	sts	0x0FEC, r26
	netMessage.zero = 0;
    ca1e:	10 92 fa 0f 	sts	0x0FFA, r1
	sendNetMessage(&netMessage);
    ca22:	8f ed       	ldi	r24, 0xDF	; 223
    ca24:	9f e0       	ldi	r25, 0x0F	; 15
}
    ca26:	df 91       	pop	r29
    ca28:	cf 91       	pop	r28
    ca2a:	1f 91       	pop	r17
    ca2c:	0f 91       	pop	r16
	netMessage.handle_id = handle_select->handle_id;
	netMessage.char_index = handle_select->char_index;
	netMessage.select_state = handle_select->select_state;
	memcpy(netMessage.handle, handle_select->handle, 3);
	netMessage.zero = 0;
	sendNetMessage(&netMessage);
    ca2e:	0c 94 0f 4b 	jmp	0x961e	; 0x961e <sendNetMessage>
}
    ca32:	df 91       	pop	r29
    ca34:	cf 91       	pop	r28
    ca36:	1f 91       	pop	r17
    ca38:	0f 91       	pop	r16
    ca3a:	08 95       	ret

0000ca3c <send_smart_net_message>:
} 
#endif


void send_smart_net_message(Player* player, JoyPadState* p, u8 code)
{
    ca3c:	34 2f       	mov	r19, r20
	if (game.selection == HOSTNETGAME && player == &player1)
    ca3e:	20 91 b6 0b 	lds	r18, 0x0BB6
    ca42:	22 30       	cpi	r18, 0x02	; 2
    ca44:	41 f4       	brne	.+16     	; 0xca56 <send_smart_net_message+0x1a>
    ca46:	85 5d       	subi	r24, 0xD5	; 213
    ca48:	9b 40       	sbci	r25, 0x0B	; 11
    ca4a:	51 f4       	brne	.+20     	; 0xca60 <send_smart_net_message+0x24>
	{
		send_net_message(code, 0, 0);
    ca4c:	40 e0       	ldi	r20, 0x00	; 0
    ca4e:	60 e0       	ldi	r22, 0x00	; 0
    ca50:	83 2f       	mov	r24, r19
    ca52:	0c 94 8d 64 	jmp	0xc91a	; 0xc91a <send_net_message>
	}
	else if (game.selection == JOINNETGAME && player == &player2)
    ca56:	23 30       	cpi	r18, 0x03	; 3
    ca58:	19 f4       	brne	.+6      	; 0xca60 <send_smart_net_message+0x24>
    ca5a:	87 54       	subi	r24, 0x47	; 71
    ca5c:	9f 40       	sbci	r25, 0x0F	; 15
    ca5e:	b1 f3       	breq	.-20     	; 0xca4c <send_smart_net_message+0x10>
    ca60:	08 95       	ret

0000ca62 <get_net_message>:
	netMessage.zero = 0;
	sendNetMessage(&netMessage);
}

void get_net_message()
{
    ca62:	df 92       	push	r13
    ca64:	ef 92       	push	r14
    ca66:	ff 92       	push	r15
    ca68:	0f 93       	push	r16
    ca6a:	1f 93       	push	r17
    ca6c:	cf 93       	push	r28
    ca6e:	df 93       	push	r29
	Player* player = &player2;
	Player* otherPlayer = &player1;
	u8 otherPlayerHudx = 0;
	HandleSelectState* handle_select = &p2s;
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    ca70:	80 91 b6 0b 	lds	r24, 0x0BB6
    ca74:	9e ef       	ldi	r25, 0xFE	; 254
    ca76:	98 0f       	add	r25, r24
    ca78:	92 30       	cpi	r25, 0x02	; 2
    ca7a:	08 f0       	brcs	.+2      	; 0xca7e <get_net_message+0x1c>
    ca7c:	2a c1       	rjmp	.+596    	; 0xccd2 <get_net_message+0x270>
	
	netMessage.code = NETNODATA;
    ca7e:	9c e0       	ldi	r25, 0x0C	; 12
    ca80:	90 93 df 0f 	sts	0x0FDF, r25
	if (game.selection == JOINNETGAME)
    ca84:	83 30       	cpi	r24, 0x03	; 3
    ca86:	59 f4       	brne	.+22     	; 0xca9e <get_net_message+0x3c>
	{
		player = &player1;
		handle_select = &p1s;
    ca88:	9b ef       	ldi	r25, 0xFB	; 251
    ca8a:	e9 2e       	mov	r14, r25
    ca8c:	9f e0       	ldi	r25, 0x0F	; 15
    ca8e:	f9 2e       	mov	r15, r25
		otherPlayer = &player2;
		otherPlayerHudx = 15;
    ca90:	2f e0       	ldi	r18, 0x0F	; 15
    ca92:	d2 2e       	mov	r13, r18
	netMessage.code = NETNODATA;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		handle_select = &p1s;
		otherPlayer = &player2;
    ca94:	07 e4       	ldi	r16, 0x47	; 71
    ca96:	1f e0       	ldi	r17, 0x0F	; 15
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	
	netMessage.code = NETNODATA;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
    ca98:	c5 ed       	ldi	r28, 0xD5	; 213
    ca9a:	db e0       	ldi	r29, 0x0B	; 11
    ca9c:	09 c0       	rjmp	.+18     	; 0xcab0 <get_net_message+0x4e>
void get_net_message()
{
	Player* player = &player2;
	Player* otherPlayer = &player1;
	u8 otherPlayerHudx = 0;
	HandleSelectState* handle_select = &p2s;
    ca9e:	8d e7       	ldi	r24, 0x7D	; 125
    caa0:	e8 2e       	mov	r14, r24
    caa2:	8b e0       	ldi	r24, 0x0B	; 11
    caa4:	f8 2e       	mov	r15, r24

void get_net_message()
{
	Player* player = &player2;
	Player* otherPlayer = &player1;
	u8 otherPlayerHudx = 0;
    caa6:	d1 2c       	mov	r13, r1
}

void get_net_message()
{
	Player* player = &player2;
	Player* otherPlayer = &player1;
    caa8:	05 ed       	ldi	r16, 0xD5	; 213
    caaa:	1b e0       	ldi	r17, 0x0B	; 11
	sendNetMessage(&netMessage);
}

void get_net_message()
{
	Player* player = &player2;
    caac:	c7 e4       	ldi	r28, 0x47	; 71
    caae:	df e0       	ldi	r29, 0x0F	; 15
		player = &player1;
		handle_select = &p1s;
		otherPlayer = &player2;
		otherPlayerHudx = 15;
	}
	if (getNetMessage(&netMessage) != WIFI_NODATA)
    cab0:	8f ed       	ldi	r24, 0xDF	; 223
    cab2:	9f e0       	ldi	r25, 0x0F	; 15
    cab4:	0e 94 12 4b 	call	0x9624	; 0x9624 <getNetMessage>
    cab8:	82 30       	cpi	r24, 0x02	; 2
    caba:	09 f4       	brne	.+2      	; 0xcabe <get_net_message+0x5c>
    cabc:	06 c1       	rjmp	.+524    	; 0xccca <get_net_message+0x268>
	{
		otherPlayer->score = netMessage.score;
    cabe:	80 91 e6 0f 	lds	r24, 0x0FE6
    cac2:	f8 01       	movw	r30, r16
    cac4:	87 87       	std	Z+15, r24	; 0x0f
		otherPlayer->level_score = netMessage.score;
    cac6:	80 8b       	std	Z+16, r24	; 0x10
		player->shared.x = netMessage.pos_x;
    cac8:	80 91 f2 0f 	lds	r24, 0x0FF2
    cacc:	90 91 f3 0f 	lds	r25, 0x0FF3
    cad0:	a0 91 f4 0f 	lds	r26, 0x0FF4
    cad4:	b0 91 f5 0f 	lds	r27, 0x0FF5
    cad8:	8b 83       	std	Y+3, r24	; 0x03
    cada:	9c 83       	std	Y+4, r25	; 0x04
    cadc:	ad 83       	std	Y+5, r26	; 0x05
    cade:	be 83       	std	Y+6, r27	; 0x06
		player->shared.y = netMessage.pos_y;
    cae0:	80 91 f6 0f 	lds	r24, 0x0FF6
    cae4:	90 91 f7 0f 	lds	r25, 0x0FF7
    cae8:	a0 91 f8 0f 	lds	r26, 0x0FF8
    caec:	b0 91 f9 0f 	lds	r27, 0x0FF9
    caf0:	8f 83       	std	Y+7, r24	; 0x07
    caf2:	98 87       	std	Y+8, r25	; 0x08
    caf4:	a9 87       	std	Y+9, r26	; 0x09
    caf6:	ba 87       	std	Y+10, r27	; 0x0a
		player->shared.speed = netMessage.speed;
    caf8:	80 91 f0 0f 	lds	r24, 0x0FF0
    cafc:	89 83       	std	Y+1, r24	; 0x01
		player->shared.direction = netMessage.direction;
    cafe:	80 91 ef 0f 	lds	r24, 0x0FEF
    cb02:	88 83       	st	Y, r24
		player->shared.recoiled = netMessage.recoiled;
    cb04:	80 91 f1 0f 	lds	r24, 0x0FF1
    cb08:	8a 83       	std	Y+2, r24	; 0x02
		handle_select->handle_id = netMessage.handle_id;
    cb0a:	80 91 e9 0f 	lds	r24, 0x0FE9
    cb0e:	f7 01       	movw	r30, r14
    cb10:	80 83       	st	Z, r24
		handle_select->char_index = netMessage.char_index;
    cb12:	80 91 ed 0f 	lds	r24, 0x0FED
    cb16:	84 83       	std	Z+4, r24	; 0x04
		handle_select->select_state = netMessage.select_state;
    cb18:	80 91 ee 0f 	lds	r24, 0x0FEE
    cb1c:	85 83       	std	Z+5, r24	; 0x05
		memcpy(handle_select->handle, netMessage.handle, 3);
    cb1e:	80 91 ea 0f 	lds	r24, 0x0FEA
    cb22:	90 91 eb 0f 	lds	r25, 0x0FEB
    cb26:	a0 91 ec 0f 	lds	r26, 0x0FEC
    cb2a:	81 83       	std	Z+1, r24	; 0x01
    cb2c:	92 83       	std	Z+2, r25	; 0x02
    cb2e:	a3 83       	std	Z+3, r26	; 0x03
		
		// Act on message code
		if (netMessage.code == NETHIT)
    cb30:	80 91 df 0f 	lds	r24, 0x0FDF
    cb34:	81 11       	cpse	r24, r1
    cb36:	13 c0       	rjmp	.+38     	; 0xcb5e <get_net_message+0xfc>
		{
			render_score(otherPlayer, netMessage.hud_x);
    cb38:	60 91 e8 0f 	lds	r22, 0x0FE8
    cb3c:	c8 01       	movw	r24, r16
    cb3e:	0e 94 b5 51 	call	0xa36a	; 0xa36a <render_score>
			init_shot_state(&otherPlayer->shot[0], otherPlayer->shot[0].shot_type);
    cb42:	f8 01       	movw	r30, r16
    cb44:	63 ad       	ldd	r22, Z+59	; 0x3b
    cb46:	c8 01       	movw	r24, r16
    cb48:	c0 96       	adiw	r24, 0x30	; 48
    cb4a:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
			otherPlayer->active_shots--;
    cb4e:	f8 01       	movw	r30, r16
    cb50:	81 89       	ldd	r24, Z+17	; 0x11
    cb52:	81 50       	subi	r24, 0x01	; 1
    cb54:	81 8b       	std	Z+17, r24	; 0x11
			kill_player(player, netMessage.hud_x);
    cb56:	60 91 e8 0f 	lds	r22, 0x0FE8
    cb5a:	ce 01       	movw	r24, r28
    cb5c:	12 c0       	rjmp	.+36     	; 0xcb82 <get_net_message+0x120>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage.code == NETTURRETHIT)
    cb5e:	81 30       	cpi	r24, 0x01	; 1
    cb60:	e1 f4       	brne	.+56     	; 0xcb9a <get_net_message+0x138>
		{
			game.boss_fight_player_lives--;
    cb62:	80 91 a8 0b 	lds	r24, 0x0BA8
    cb66:	81 50       	subi	r24, 0x01	; 1
    cb68:	80 93 a8 0b 	sts	0x0BA8, r24
			if (game.boss_fight_player_lives <= 0)
    cb6c:	81 11       	cpse	r24, r1
    cb6e:	03 c0       	rjmp	.+6      	; 0xcb76 <get_net_message+0x114>
			{
				game.boss_fight_status = BOSS_FIGHT_LOST;
    cb70:	80 e1       	ldi	r24, 0x10	; 16
    cb72:	80 93 a6 0b 	sts	0x0BA6, r24
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    cb76:	60 91 a7 0b 	lds	r22, 0x0BA7
    cb7a:	80 91 b2 0b 	lds	r24, 0x0BB2
    cb7e:	90 91 b3 0b 	lds	r25, 0x0BB3
    cb82:	0e 94 af 55 	call	0xab5e	; 0xab5e <kill_player>
    cb86:	86 e0       	ldi	r24, 0x06	; 6
	}
	else
	{
		netMessage.pressed = 0;
	}
}
    cb88:	df 91       	pop	r29
    cb8a:	cf 91       	pop	r28
    cb8c:	1f 91       	pop	r17
    cb8e:	0f 91       	pop	r16
    cb90:	ff 90       	pop	r15
    cb92:	ef 90       	pop	r14
    cb94:	df 90       	pop	r13
    cb96:	0c 94 6e 49 	jmp	0x92dc	; 0x92dc <LBPlaySound.part.6>
				game.boss_fight_status = BOSS_FIGHT_LOST;
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage.code == NETITEMSPEED)
    cb9a:	83 30       	cpi	r24, 0x03	; 3
    cb9c:	c1 f4       	brne	.+48     	; 0xcbce <get_net_message+0x16c>
		{
			level.level_map[netMessage.object_pos_y * 30 + netMessage.object_pos_x] = L_EMPTY;
    cb9e:	e0 91 e5 0f 	lds	r30, 0x0FE5
    cba2:	8e e1       	ldi	r24, 0x1E	; 30
    cba4:	e8 9f       	mul	r30, r24
    cba6:	f0 01       	movw	r30, r0
    cba8:	11 24       	eor	r1, r1
    cbaa:	80 91 e4 0f 	lds	r24, 0x0FE4
    cbae:	e8 5a       	subi	r30, 0xA8	; 168
    cbb0:	f3 4f       	sbci	r31, 0xF3	; 243
    cbb2:	e8 0f       	add	r30, r24
    cbb4:	f1 1d       	adc	r31, r1
    cbb6:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    cbb8:	81 e4       	ldi	r24, 0x41	; 65
    cbba:	8f 8b       	std	Y+23, r24	; 0x17
			player->has_over_speed = true;
    cbbc:	81 e0       	ldi	r24, 0x01	; 1
    cbbe:	89 8f       	std	Y+25, r24	; 0x19
			DrawMap2(netMessage.hud_x+10, 1, map_speed_itm);
    cbc0:	80 91 e8 0f 	lds	r24, 0x0FE8
    cbc4:	4f eb       	ldi	r20, 0xBF	; 191
    cbc6:	5a e6       	ldi	r21, 0x6A	; 106
    cbc8:	61 e0       	ldi	r22, 0x01	; 1
    cbca:	86 5f       	subi	r24, 0xF6	; 246
    cbcc:	17 c0       	rjmp	.+46     	; 0xcbfc <get_net_message+0x19a>
			SetTile(netMessage.object_pos_x, netMessage.object_pos_y, 0);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
		}
		else if (netMessage.code == NETITEMROCKET)
    cbce:	84 30       	cpi	r24, 0x04	; 4
    cbd0:	01 f5       	brne	.+64     	; 0xcc12 <get_net_message+0x1b0>
		{
			level.level_map[netMessage.object_pos_y * 30 + netMessage.object_pos_x] = L_EMPTY;
    cbd2:	e0 91 e5 0f 	lds	r30, 0x0FE5
    cbd6:	9e e1       	ldi	r25, 0x1E	; 30
    cbd8:	e9 9f       	mul	r30, r25
    cbda:	f0 01       	movw	r30, r0
    cbdc:	11 24       	eor	r1, r1
    cbde:	80 91 e4 0f 	lds	r24, 0x0FE4
    cbe2:	e8 5a       	subi	r30, 0xA8	; 168
    cbe4:	f3 4f       	sbci	r31, 0xF3	; 243
    cbe6:	e8 0f       	add	r30, r24
    cbe8:	f1 1d       	adc	r31, r1
    cbea:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    cbec:	81 e0       	ldi	r24, 0x01	; 1
    cbee:	88 8f       	std	Y+24, r24	; 0x18
			DrawMap2(netMessage.hud_x+11, 1, map_rocket_itm);
    cbf0:	80 91 e8 0f 	lds	r24, 0x0FE8
    cbf4:	49 eb       	ldi	r20, 0xB9	; 185
    cbf6:	5a e6       	ldi	r21, 0x6A	; 106
    cbf8:	61 e0       	ldi	r22, 0x01	; 1
    cbfa:	85 5f       	subi	r24, 0xF5	; 245
    cbfc:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
			SetTile(netMessage.object_pos_x, netMessage.object_pos_y, 0);
    cc00:	40 e0       	ldi	r20, 0x00	; 0
    cc02:	50 e0       	ldi	r21, 0x00	; 0
    cc04:	60 91 e5 0f 	lds	r22, 0x0FE5
    cc08:	80 91 e4 0f 	lds	r24, 0x0FE4
    cc0c:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
    cc10:	20 c0       	rjmp	.+64     	; 0xcc52 <get_net_message+0x1f0>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
		}
		else if (netMessage.code == NETITEMBOMB)
    cc12:	85 30       	cpi	r24, 0x05	; 5
    cc14:	01 f5       	brne	.+64     	; 0xcc56 <get_net_message+0x1f4>
		{
			level.level_map[netMessage.object_pos_y * 30 + netMessage.object_pos_x] = L_EMPTY;
    cc16:	60 91 e5 0f 	lds	r22, 0x0FE5
    cc1a:	80 91 e4 0f 	lds	r24, 0x0FE4
    cc1e:	9e e1       	ldi	r25, 0x1E	; 30
    cc20:	69 9f       	mul	r22, r25
    cc22:	f0 01       	movw	r30, r0
    cc24:	11 24       	eor	r1, r1
    cc26:	e8 5a       	subi	r30, 0xA8	; 168
    cc28:	f3 4f       	sbci	r31, 0xF3	; 243
    cc2a:	e8 0f       	add	r30, r24
    cc2c:	f1 1d       	adc	r31, r1
    cc2e:	11 82       	std	Z+1, r1	; 0x01
			SetTile(netMessage.object_pos_x, netMessage.object_pos_y, 0);
    cc30:	40 e0       	ldi	r20, 0x00	; 0
    cc32:	50 e0       	ldi	r21, 0x00	; 0
    cc34:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
			if (!(otherPlayer->flags & EXPLODING_FLAG))
    cc38:	f8 01       	movw	r30, r16
    cc3a:	85 89       	ldd	r24, Z+21	; 0x15
    cc3c:	80 fd       	sbrc	r24, 0
    cc3e:	09 c0       	rjmp	.+18     	; 0xcc52 <get_net_message+0x1f0>
			{
				render_score(player, netMessage.hud_x);
    cc40:	60 91 e8 0f 	lds	r22, 0x0FE8
    cc44:	ce 01       	movw	r24, r28
    cc46:	0e 94 b5 51 	call	0xa36a	; 0xa36a <render_score>
				kill_player(otherPlayer, otherPlayerHudx);
    cc4a:	6d 2d       	mov	r22, r13
    cc4c:	c8 01       	movw	r24, r16
    cc4e:	0e 94 af 55 	call	0xab5e	; 0xab5e <kill_player>
			}
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
    cc52:	22 e0       	ldi	r18, 0x02	; 2
    cc54:	2b c0       	rjmp	.+86     	; 0xccac <get_net_message+0x24a>
		}
		else if (netMessage.code == NETBLOCKHIT)
    cc56:	87 30       	cpi	r24, 0x07	; 7
    cc58:	e1 f5       	brne	.+120    	; 0xccd2 <get_net_message+0x270>
		{
			explode_tile(&tile_animations, netMessage.object_pos_y * 30 + netMessage.object_pos_x);
    cc5a:	80 91 e5 0f 	lds	r24, 0x0FE5
    cc5e:	60 91 e4 0f 	lds	r22, 0x0FE4
    cc62:	70 e0       	ldi	r23, 0x00	; 0
    cc64:	fe e1       	ldi	r31, 0x1E	; 30
    cc66:	8f 9f       	mul	r24, r31
    cc68:	60 0d       	add	r22, r0
    cc6a:	71 1d       	adc	r23, r1
    cc6c:	11 24       	eor	r1, r1
    cc6e:	87 eb       	ldi	r24, 0xB7	; 183
    cc70:	9b e0       	ldi	r25, 0x0B	; 11
    cc72:	0e 94 29 56 	call	0xac52	; 0xac52 <explode_tile>
			level.level_map[netMessage.object_pos_y * 30 + netMessage.object_pos_x] = L_EMPTY;
    cc76:	e0 91 e5 0f 	lds	r30, 0x0FE5
    cc7a:	8e e1       	ldi	r24, 0x1E	; 30
    cc7c:	e8 9f       	mul	r30, r24
    cc7e:	f0 01       	movw	r30, r0
    cc80:	11 24       	eor	r1, r1
    cc82:	80 91 e4 0f 	lds	r24, 0x0FE4
    cc86:	e8 5a       	subi	r30, 0xA8	; 168
    cc88:	f3 4f       	sbci	r31, 0xF3	; 243
    cc8a:	e8 0f       	add	r30, r24
    cc8c:	f1 1d       	adc	r31, r1
    cc8e:	11 82       	std	Z+1, r1	; 0x01
			player->shot[0].hit_count--;
    cc90:	8c ad       	ldd	r24, Y+60	; 0x3c
    cc92:	81 50       	subi	r24, 0x01	; 1
    cc94:	8c af       	std	Y+60, r24	; 0x3c
			if (player->shot[0].hit_count <= 0)
    cc96:	81 11       	cpse	r24, r1
    cc98:	08 c0       	rjmp	.+16     	; 0xccaa <get_net_message+0x248>
			{
				init_shot_state(&player->shot[0], player->shot[0].shot_type);
    cc9a:	6b ad       	ldd	r22, Y+59	; 0x3b
    cc9c:	ce 01       	movw	r24, r28
    cc9e:	c0 96       	adiw	r24, 0x30	; 48
    cca0:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
				player->active_shots--;
    cca4:	89 89       	ldd	r24, Y+17	; 0x11
    cca6:	81 50       	subi	r24, 0x01	; 1
    cca8:	89 8b       	std	Y+17, r24	; 0x11
			}
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_BRICK_EXPLODE);
    ccaa:	20 e0       	ldi	r18, 0x00	; 0
    ccac:	40 91 5c 0f 	lds	r20, 0x0F5C
    ccb0:	60 91 ea 0b 	lds	r22, 0x0BEA
    ccb4:	80 91 b6 0b 	lds	r24, 0x0BB6
	}
	else
	{
		netMessage.pressed = 0;
	}
}
    ccb8:	df 91       	pop	r29
    ccba:	cf 91       	pop	r28
    ccbc:	1f 91       	pop	r17
    ccbe:	0f 91       	pop	r16
    ccc0:	ff 90       	pop	r15
    ccc2:	ef 90       	pop	r14
    ccc4:	df 90       	pop	r13
			if (player->shot[0].hit_count <= 0)
			{
				init_shot_state(&player->shot[0], player->shot[0].shot_type);
				player->active_shots--;
			}
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_BRICK_EXPLODE);
    ccc6:	0c 94 f1 4d 	jmp	0x9be2	; 0x9be2 <LBPlaySound>
		}
	}
	else
	{
		netMessage.pressed = 0;
    ccca:	10 92 e3 0f 	sts	0x0FE3, r1
    ccce:	10 92 e2 0f 	sts	0x0FE2, r1
	}
}
    ccd2:	df 91       	pop	r29
    ccd4:	cf 91       	pop	r28
    ccd6:	1f 91       	pop	r17
    ccd8:	0f 91       	pop	r16
    ccda:	ff 90       	pop	r15
    ccdc:	ef 90       	pop	r14
    ccde:	df 90       	pop	r13
    cce0:	08 95       	ret

0000cce2 <is_net_player>:

u8 is_net_player(Player* player)
{
    cce2:	9c 01       	movw	r18, r24
	if (game.selection == HOSTNETGAME && player == &player2) return 1;
    cce4:	80 91 b6 0b 	lds	r24, 0x0BB6
    cce8:	82 30       	cpi	r24, 0x02	; 2
    ccea:	29 f4       	brne	.+10     	; 0xccf6 <is_net_player+0x14>
    ccec:	81 e0       	ldi	r24, 0x01	; 1
    ccee:	27 54       	subi	r18, 0x47	; 71
    ccf0:	3f 40       	sbci	r19, 0x0F	; 15
    ccf2:	39 f4       	brne	.+14     	; 0xcd02 <is_net_player+0x20>
    ccf4:	07 c0       	rjmp	.+14     	; 0xcd04 <is_net_player+0x22>
	if (game.selection == JOINNETGAME && player == &player1) return 1;
    ccf6:	83 30       	cpi	r24, 0x03	; 3
    ccf8:	21 f4       	brne	.+8      	; 0xcd02 <is_net_player+0x20>
    ccfa:	81 e0       	ldi	r24, 0x01	; 1
    ccfc:	25 5d       	subi	r18, 0xD5	; 213
    ccfe:	3b 40       	sbci	r19, 0x0B	; 11
    cd00:	09 f0       	breq	.+2      	; 0xcd04 <is_net_player+0x22>
	return 0;
    cd02:	80 e0       	ldi	r24, 0x00	; 0
}
    cd04:	08 95       	ret

0000cd06 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    cd06:	2f 92       	push	r2
    cd08:	3f 92       	push	r3
    cd0a:	4f 92       	push	r4
    cd0c:	5f 92       	push	r5
    cd0e:	6f 92       	push	r6
    cd10:	7f 92       	push	r7
    cd12:	8f 92       	push	r8
    cd14:	9f 92       	push	r9
    cd16:	af 92       	push	r10
    cd18:	bf 92       	push	r11
    cd1a:	cf 92       	push	r12
    cd1c:	df 92       	push	r13
    cd1e:	ef 92       	push	r14
    cd20:	ff 92       	push	r15
    cd22:	0f 93       	push	r16
    cd24:	1f 93       	push	r17
    cd26:	cf 93       	push	r28
    cd28:	df 93       	push	r29
    cd2a:	00 d0       	rcall	.+0      	; 0xcd2c <collision_detect_shot+0x26>
    cd2c:	00 d0       	rcall	.+0      	; 0xcd2e <collision_detect_shot+0x28>
    cd2e:	1f 92       	push	r1
    cd30:	cd b7       	in	r28, 0x3d	; 61
    cd32:	de b7       	in	r29, 0x3e	; 62
    cd34:	3c 01       	movw	r6, r24
    cd36:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    cd38:	1a 82       	std	Y+2, r1	; 0x02
    cd3a:	19 82       	std	Y+1, r1	; 0x01
    cd3c:	1c 82       	std	Y+4, r1	; 0x04
    cd3e:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    cd40:	20 e0       	ldi	r18, 0x00	; 0
    cd42:	30 e0       	ldi	r19, 0x00	; 0
    cd44:	40 e0       	ldi	r20, 0x00	; 0
    cd46:	5e e3       	ldi	r21, 0x3E	; 62
    cd48:	db 01       	movw	r26, r22
    cd4a:	17 96       	adiw	r26, 0x07	; 7
    cd4c:	6d 91       	ld	r22, X+
    cd4e:	7d 91       	ld	r23, X+
    cd50:	8d 91       	ld	r24, X+
    cd52:	9c 91       	ld	r25, X
    cd54:	1a 97       	sbiw	r26, 0x0a	; 10
    cd56:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    cd5a:	20 e0       	ldi	r18, 0x00	; 0
    cd5c:	30 e0       	ldi	r19, 0x00	; 0
    cd5e:	40 e4       	ldi	r20, 0x40	; 64
    cd60:	50 e4       	ldi	r21, 0x40	; 64
    cd62:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    cd66:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    cd6a:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    cd6c:	20 e0       	ldi	r18, 0x00	; 0
    cd6e:	30 e0       	ldi	r19, 0x00	; 0
    cd70:	40 e0       	ldi	r20, 0x00	; 0
    cd72:	5e e3       	ldi	r21, 0x3E	; 62
    cd74:	f4 01       	movw	r30, r8
    cd76:	63 81       	ldd	r22, Z+3	; 0x03
    cd78:	74 81       	ldd	r23, Z+4	; 0x04
    cd7a:	85 81       	ldd	r24, Z+5	; 0x05
    cd7c:	96 81       	ldd	r25, Z+6	; 0x06
    cd7e:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    cd82:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    cd86:	d4 01       	movw	r26, r8
    cd88:	2c 91       	ld	r18, X
    cd8a:	41 2f       	mov	r20, r17
    cd8c:	ce 01       	movw	r24, r28
    cd8e:	01 96       	adiw	r24, 0x01	; 1
    cd90:	0e 94 07 56 	call	0xac0e	; 0xac0e <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    cd94:	c4 01       	movw	r24, r8
    cd96:	0e 94 2d 55 	call	0xaa5a	; 0xaa5a <collision_detect_boundries>
    cd9a:	88 23       	and	r24, r24
    cd9c:	69 f0       	breq	.+26     	; 0xcdb8 <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    cd9e:	f4 01       	movw	r30, r8
    cda0:	63 85       	ldd	r22, Z+11	; 0x0b
    cda2:	c4 01       	movw	r24, r8
    cda4:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
		player->active_shots--;
    cda8:	d3 01       	movw	r26, r6
    cdaa:	51 96       	adiw	r26, 0x11	; 17
    cdac:	8c 91       	ld	r24, X
    cdae:	51 97       	sbiw	r26, 0x11	; 17
    cdb0:	81 50       	subi	r24, 0x01	; 1
    cdb2:	51 96       	adiw	r26, 0x11	; 17
    cdb4:	8c 93       	st	X, r24
		return;
    cdb6:	c7 c1       	rjmp	.+910    	; 0xd146 <collision_detect_shot+0x440>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG) && !is_net_player(&player1))
    cdb8:	b4 01       	movw	r22, r8
    cdba:	85 ed       	ldi	r24, 0xD5	; 213
    cdbc:	9b e0       	ldi	r25, 0x0B	; 11
    cdbe:	0e 94 80 54 	call	0xa900	; 0xa900 <player_shot>
    cdc2:	88 23       	and	r24, r24
    cdc4:	11 f1       	breq	.+68     	; 0xce0a <collision_detect_shot+0x104>
    cdc6:	80 91 ea 0b 	lds	r24, 0x0BEA
    cdca:	80 fd       	sbrc	r24, 0
    cdcc:	1e c0       	rjmp	.+60     	; 0xce0a <collision_detect_shot+0x104>
    cdce:	85 ed       	ldi	r24, 0xD5	; 213
    cdd0:	9b e0       	ldi	r25, 0x0B	; 11
    cdd2:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    cdd6:	81 11       	cpse	r24, r1
    cdd8:	18 c0       	rjmp	.+48     	; 0xce0a <collision_detect_shot+0x104>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    cdda:	80 91 57 0f 	lds	r24, 0x0F57
    cdde:	8f 5f       	subi	r24, 0xFF	; 255
    cde0:	80 93 57 0f 	sts	0x0F57, r24
		player2.score++;
    cde4:	80 91 56 0f 	lds	r24, 0x0F56
    cde8:	8f 5f       	subi	r24, 0xFF	; 255
    cdea:	80 93 56 0f 	sts	0x0F56, r24
		render_score(&player2, 15);
    cdee:	6f e0       	ldi	r22, 0x0F	; 15
    cdf0:	87 e4       	ldi	r24, 0x47	; 71
    cdf2:	9f e0       	ldi	r25, 0x0F	; 15
    cdf4:	0e 94 b5 51 	call	0xa36a	; 0xa36a <render_score>
		send_net_message(NETHIT, 0, 0);
    cdf8:	40 e0       	ldi	r20, 0x00	; 0
    cdfa:	60 e0       	ldi	r22, 0x00	; 0
    cdfc:	80 e0       	ldi	r24, 0x00	; 0
    cdfe:	0e 94 8d 64 	call	0xc91a	; 0xc91a <send_net_message>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG) && !is_net_player(&player1))
	{
		p = &player1;
    ce02:	05 ed       	ldi	r16, 0xD5	; 213
    ce04:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    ce06:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0);
    ce08:	5c c0       	rjmp	.+184    	; 0xcec2 <collision_detect_shot+0x1bc>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
    ce0a:	b4 01       	movw	r22, r8
    ce0c:	87 e4       	ldi	r24, 0x47	; 71
    ce0e:	9f e0       	ldi	r25, 0x0F	; 15
    ce10:	0e 94 80 54 	call	0xa900	; 0xa900 <player_shot>
    ce14:	90 91 a6 0b 	lds	r25, 0x0BA6
    ce18:	88 23       	and	r24, r24
    ce1a:	29 f1       	breq	.+74     	; 0xce66 <collision_detect_shot+0x160>
    ce1c:	80 91 5c 0f 	lds	r24, 0x0F5C
    ce20:	80 fd       	sbrc	r24, 0
    ce22:	21 c0       	rjmp	.+66     	; 0xce66 <collision_detect_shot+0x160>
    ce24:	91 11       	cpse	r25, r1
    ce26:	1f c0       	rjmp	.+62     	; 0xce66 <collision_detect_shot+0x160>
    ce28:	87 e4       	ldi	r24, 0x47	; 71
    ce2a:	9f e0       	ldi	r25, 0x0F	; 15
    ce2c:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    ce30:	81 11       	cpse	r24, r1
    ce32:	4a c0       	rjmp	.+148    	; 0xcec8 <collision_detect_shot+0x1c2>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    ce34:	80 91 e5 0b 	lds	r24, 0x0BE5
    ce38:	8f 5f       	subi	r24, 0xFF	; 255
    ce3a:	80 93 e5 0b 	sts	0x0BE5, r24
		player1.score++;
    ce3e:	80 91 e4 0b 	lds	r24, 0x0BE4
    ce42:	8f 5f       	subi	r24, 0xFF	; 255
    ce44:	80 93 e4 0b 	sts	0x0BE4, r24
		render_score(&player1, 0);
    ce48:	60 e0       	ldi	r22, 0x00	; 0
    ce4a:	85 ed       	ldi	r24, 0xD5	; 213
    ce4c:	9b e0       	ldi	r25, 0x0B	; 11
    ce4e:	0e 94 b5 51 	call	0xa36a	; 0xa36a <render_score>
		send_net_message(NETHIT, 0, 0);
    ce52:	40 e0       	ldi	r20, 0x00	; 0
    ce54:	60 e0       	ldi	r22, 0x00	; 0
    ce56:	80 e0       	ldi	r24, 0x00	; 0
    ce58:	0e 94 8d 64 	call	0xc91a	; 0xc91a <send_net_message>
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
	{
		p = &player2;
    ce5c:	07 e4       	ldi	r16, 0x47	; 71
    ce5e:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    ce60:	6f e0       	ldi	r22, 0x0F	; 15
    ce62:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
		send_net_message(NETHIT, 0, 0);
    ce64:	2e c0       	rjmp	.+92     	; 0xcec2 <collision_detect_shot+0x1bc>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    ce66:	94 30       	cpi	r25, 0x04	; 4
    ce68:	79 f5       	brne	.+94     	; 0xcec8 <collision_detect_shot+0x1c2>
	{
		if (turret_shot(&turret1, shot))
    ce6a:	b4 01       	movw	r22, r8
    ce6c:	85 e3       	ldi	r24, 0x35	; 53
    ce6e:	90 e1       	ldi	r25, 0x10	; 16
    ce70:	0e 94 df 54 	call	0xa9be	; 0xa9be <turret_shot>
    ce74:	88 23       	and	r24, r24
    ce76:	41 f0       	breq	.+16     	; 0xce88 <collision_detect_shot+0x182>
		{
			turret1.lives--;
    ce78:	80 91 40 10 	lds	r24, 0x1040
    ce7c:	81 50       	subi	r24, 0x01	; 1
    ce7e:	80 93 40 10 	sts	0x1040, r24
			init_shot_state(shot, shot->shot_type);
    ce82:	f4 01       	movw	r30, r8
    ce84:	63 85       	ldd	r22, Z+11	; 0x0b
    ce86:	0f c0       	rjmp	.+30     	; 0xcea6 <collision_detect_shot+0x1a0>
			game.boss_fight_player->active_shots--;
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
		else if (turret_shot(&turret2, shot))
    ce88:	b4 01       	movw	r22, r8
    ce8a:	81 e0       	ldi	r24, 0x01	; 1
    ce8c:	90 e1       	ldi	r25, 0x10	; 16
    ce8e:	0e 94 df 54 	call	0xa9be	; 0xa9be <turret_shot>
    ce92:	88 23       	and	r24, r24
    ce94:	c9 f0       	breq	.+50     	; 0xcec8 <collision_detect_shot+0x1c2>
		{
			turret2.lives--;
    ce96:	80 91 0c 10 	lds	r24, 0x100C
    ce9a:	81 50       	subi	r24, 0x01	; 1
    ce9c:	80 93 0c 10 	sts	0x100C, r24
			init_shot_state(shot, shot->shot_type);
    cea0:	d4 01       	movw	r26, r8
    cea2:	1b 96       	adiw	r26, 0x0b	; 11
    cea4:	6c 91       	ld	r22, X
    cea6:	c4 01       	movw	r24, r8
    cea8:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
			game.boss_fight_player->active_shots--;
    ceac:	e0 91 b2 0b 	lds	r30, 0x0BB2
    ceb0:	f0 91 b3 0b 	lds	r31, 0x0BB3
    ceb4:	81 89       	ldd	r24, Z+17	; 0x11
    ceb6:	81 50       	subi	r24, 0x01	; 1
    ceb8:	81 8b       	std	Z+17, r24	; 0x11
    ceba:	86 e0       	ldi	r24, 0x06	; 6
    cebc:	0e 94 6e 49 	call	0x92dc	; 0x92dc <LBPlaySound.part.6>
    cec0:	03 c0       	rjmp	.+6      	; 0xcec8 <collision_detect_shot+0x1c2>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
	}
	if (p)
    cec2:	01 15       	cp	r16, r1
    cec4:	11 05       	cpc	r17, r1
    cec6:	59 f4       	brne	.+22     	; 0xcede <collision_detect_shot+0x1d8>
    cec8:	fe 01       	movw	r30, r28
    ceca:	31 96       	adiw	r30, 0x01	; 1
    cecc:	2f 01       	movw	r4, r30
    cece:	1d 82       	std	Y+5, r1	; 0x05
    ced0:	d1 2c       	mov	r13, r1
    ced2:	f1 2c       	mov	r15, r1
    ced4:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    ced6:	5e e1       	ldi	r21, 0x1E	; 30
    ced8:	25 2e       	mov	r2, r21
    ceda:	31 2c       	mov	r3, r1
    cedc:	44 c0       	rjmp	.+136    	; 0xcf66 <collision_detect_shot+0x260>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    cede:	d4 01       	movw	r26, r8
    cee0:	1b 96       	adiw	r26, 0x0b	; 11
    cee2:	6c 91       	ld	r22, X
    cee4:	c4 01       	movw	r24, r8
    cee6:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
		player->active_shots--;
    ceea:	f3 01       	movw	r30, r6
    ceec:	81 89       	ldd	r24, Z+17	; 0x11
    ceee:	81 50       	subi	r24, 0x01	; 1
    cef0:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    cef2:	6f 2d       	mov	r22, r15
    cef4:	c8 01       	movw	r24, r16
    cef6:	0e 94 af 55 	call	0xab5e	; 0xab5e <kill_player>
    cefa:	86 e0       	ldi	r24, 0x06	; 6
    cefc:	0e 94 6e 49 	call	0x92dc	; 0x92dc <LBPlaySound.part.6>
    cf00:	22 c1       	rjmp	.+580    	; 0xd146 <collision_detect_shot+0x440>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    cf02:	c5 01       	movw	r24, r10
    cf04:	0e 94 b2 53 	call	0xa764	; 0xa764 <solid_directional_tile>
    cf08:	88 23       	and	r24, r24
    cf0a:	c1 f1       	breq	.+112    	; 0xcf7c <collision_detect_shot+0x276>
    cf0c:	20 e0       	ldi	r18, 0x00	; 0
    cf0e:	30 e0       	ldi	r19, 0x00	; 0
    cf10:	40 e0       	ldi	r20, 0x00	; 0
    cf12:	50 e4       	ldi	r21, 0x40	; 64
    cf14:	f4 01       	movw	r30, r8
    cf16:	67 81       	ldd	r22, Z+7	; 0x07
    cf18:	70 85       	ldd	r23, Z+8	; 0x08
    cf1a:	81 85       	ldd	r24, Z+9	; 0x09
    cf1c:	92 85       	ldd	r25, Z+10	; 0x0a
    cf1e:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    cf22:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    cf26:	c6 2e       	mov	r12, r22
    cf28:	20 e0       	ldi	r18, 0x00	; 0
    cf2a:	30 e0       	ldi	r19, 0x00	; 0
    cf2c:	40 e0       	ldi	r20, 0x00	; 0
    cf2e:	50 e4       	ldi	r21, 0x40	; 64
    cf30:	d4 01       	movw	r26, r8
    cf32:	13 96       	adiw	r26, 0x03	; 3
    cf34:	6d 91       	ld	r22, X+
    cf36:	7d 91       	ld	r23, X+
    cf38:	8d 91       	ld	r24, X+
    cf3a:	9c 91       	ld	r25, X
    cf3c:	16 97       	sbiw	r26, 0x06	; 6
    cf3e:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    cf42:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    cf46:	04 e0       	ldi	r16, 0x04	; 4
    cf48:	24 e0       	ldi	r18, 0x04	; 4
    cf4a:	4c 2d       	mov	r20, r12
    cf4c:	c5 01       	movw	r24, r10
    cf4e:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <collides_directional_tile>
    cf52:	88 23       	and	r24, r24
    cf54:	99 f0       	breq	.+38     	; 0xcf7c <collision_detect_shot+0x276>
		{
			hit = hit | HIT_ANGLE;
    cf56:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    cf58:	de 2c       	mov	r13, r14
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    cf5a:	bd 81       	ldd	r27, Y+5	; 0x05
    cf5c:	b1 30       	cpi	r27, 0x01	; 1
    cf5e:	09 f4       	brne	.+2      	; 0xcf62 <collision_detect_shot+0x25c>
    cf60:	88 c0       	rjmp	.+272    	; 0xd072 <collision_detect_shot+0x36c>
    cf62:	f1 e0       	ldi	r31, 0x01	; 1
    cf64:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    cf66:	d2 01       	movw	r26, r4
    cf68:	ad 90       	ld	r10, X+
    cf6a:	bd 90       	ld	r11, X+
    cf6c:	2d 01       	movw	r4, r26
    cf6e:	f5 01       	movw	r30, r10
    cf70:	e8 5a       	subi	r30, 0xA8	; 168
    cf72:	f3 4f       	sbci	r31, 0xF3	; 243
    cf74:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    cf76:	ee 20       	and	r14, r14
    cf78:	81 f3       	breq	.-32     	; 0xcf5a <collision_detect_shot+0x254>
    cf7a:	c3 cf       	rjmp	.-122    	; 0xcf02 <collision_detect_shot+0x1fc>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    cf7c:	b1 e0       	ldi	r27, 0x01	; 1
    cf7e:	eb 12       	cpse	r14, r27
    cf80:	3b c0       	rjmp	.+118    	; 0xcff8 <collision_detect_shot+0x2f2>
    cf82:	c5 01       	movw	r24, r10
    cf84:	b1 01       	movw	r22, r2
    cf86:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    cf8a:	6d 5f       	subi	r22, 0xFD	; 253
    cf8c:	7f 4f       	sbci	r23, 0xFF	; 255
    cf8e:	e6 2e       	mov	r14, r22
    cf90:	ee 0c       	add	r14, r14
    cf92:	ee 0c       	add	r14, r14
    cf94:	ee 0c       	add	r14, r14
    cf96:	08 2f       	mov	r16, r24
    cf98:	00 0f       	add	r16, r16
    cf9a:	00 0f       	add	r16, r16
    cf9c:	00 0f       	add	r16, r16
    cf9e:	20 e0       	ldi	r18, 0x00	; 0
    cfa0:	30 e0       	ldi	r19, 0x00	; 0
    cfa2:	40 e0       	ldi	r20, 0x00	; 0
    cfa4:	50 e4       	ldi	r21, 0x40	; 64
    cfa6:	f4 01       	movw	r30, r8
    cfa8:	67 81       	ldd	r22, Z+7	; 0x07
    cfaa:	70 85       	ldd	r23, Z+8	; 0x08
    cfac:	81 85       	ldd	r24, Z+9	; 0x09
    cfae:	92 85       	ldd	r25, Z+10	; 0x0a
    cfb0:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    cfb4:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    cfb8:	b6 2e       	mov	r11, r22
    cfba:	20 e0       	ldi	r18, 0x00	; 0
    cfbc:	30 e0       	ldi	r19, 0x00	; 0
    cfbe:	40 e0       	ldi	r20, 0x00	; 0
    cfc0:	50 e4       	ldi	r21, 0x40	; 64
    cfc2:	d4 01       	movw	r26, r8
    cfc4:	13 96       	adiw	r26, 0x03	; 3
    cfc6:	6d 91       	ld	r22, X+
    cfc8:	7d 91       	ld	r23, X+
    cfca:	8d 91       	ld	r24, X+
    cfcc:	9c 91       	ld	r25, X
    cfce:	16 97       	sbiw	r26, 0x06	; 6
    cfd0:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    cfd4:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    cfd8:	86 2f       	mov	r24, r22
    cfda:	38 e0       	ldi	r19, 0x08	; 8
    cfdc:	a3 2e       	mov	r10, r19
    cfde:	48 e0       	ldi	r20, 0x08	; 8
    cfe0:	c4 2e       	mov	r12, r20
    cfe2:	24 e0       	ldi	r18, 0x04	; 4
    cfe4:	44 e0       	ldi	r20, 0x04	; 4
    cfe6:	6b 2d       	mov	r22, r11
    cfe8:	0e 94 bd 4c 	call	0x997a	; 0x997a <LBCollides>
    cfec:	88 23       	and	r24, r24
    cfee:	09 f4       	brne	.+2      	; 0xcff2 <collision_detect_shot+0x2ec>
    cff0:	b4 cf       	rjmp	.-152    	; 0xcf5a <collision_detect_shot+0x254>
		{
			hit = hit | HIT_BRICK;
    cff2:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    cff4:	fd 80       	ldd	r15, Y+5	; 0x05
    cff6:	b1 cf       	rjmp	.-158    	; 0xcf5a <collision_detect_shot+0x254>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    cff8:	b2 e0       	ldi	r27, 0x02	; 2
    cffa:	eb 12       	cpse	r14, r27
    cffc:	ae cf       	rjmp	.-164    	; 0xcf5a <collision_detect_shot+0x254>
    cffe:	c5 01       	movw	r24, r10
    d000:	b1 01       	movw	r22, r2
    d002:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    d006:	6d 5f       	subi	r22, 0xFD	; 253
    d008:	7f 4f       	sbci	r23, 0xFF	; 255
    d00a:	e6 2e       	mov	r14, r22
    d00c:	ee 0c       	add	r14, r14
    d00e:	ee 0c       	add	r14, r14
    d010:	ee 0c       	add	r14, r14
    d012:	08 2f       	mov	r16, r24
    d014:	00 0f       	add	r16, r16
    d016:	00 0f       	add	r16, r16
    d018:	00 0f       	add	r16, r16
    d01a:	20 e0       	ldi	r18, 0x00	; 0
    d01c:	30 e0       	ldi	r19, 0x00	; 0
    d01e:	40 e0       	ldi	r20, 0x00	; 0
    d020:	50 e4       	ldi	r21, 0x40	; 64
    d022:	f4 01       	movw	r30, r8
    d024:	67 81       	ldd	r22, Z+7	; 0x07
    d026:	70 85       	ldd	r23, Z+8	; 0x08
    d028:	81 85       	ldd	r24, Z+9	; 0x09
    d02a:	92 85       	ldd	r25, Z+10	; 0x0a
    d02c:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d030:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d034:	b6 2e       	mov	r11, r22
    d036:	20 e0       	ldi	r18, 0x00	; 0
    d038:	30 e0       	ldi	r19, 0x00	; 0
    d03a:	40 e0       	ldi	r20, 0x00	; 0
    d03c:	50 e4       	ldi	r21, 0x40	; 64
    d03e:	d4 01       	movw	r26, r8
    d040:	13 96       	adiw	r26, 0x03	; 3
    d042:	6d 91       	ld	r22, X+
    d044:	7d 91       	ld	r23, X+
    d046:	8d 91       	ld	r24, X+
    d048:	9c 91       	ld	r25, X
    d04a:	16 97       	sbiw	r26, 0x06	; 6
    d04c:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d050:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d054:	86 2f       	mov	r24, r22
    d056:	98 e0       	ldi	r25, 0x08	; 8
    d058:	a9 2e       	mov	r10, r25
    d05a:	28 e0       	ldi	r18, 0x08	; 8
    d05c:	c2 2e       	mov	r12, r18
    d05e:	24 e0       	ldi	r18, 0x04	; 4
    d060:	44 e0       	ldi	r20, 0x04	; 4
    d062:	6b 2d       	mov	r22, r11
    d064:	0e 94 bd 4c 	call	0x997a	; 0x997a <LBCollides>
    d068:	88 23       	and	r24, r24
    d06a:	09 f4       	brne	.+2      	; 0xd06e <collision_detect_shot+0x368>
    d06c:	76 cf       	rjmp	.-276    	; 0xcf5a <collision_detect_shot+0x254>
        {
		    hit = hit | HIT_METAL;
    d06e:	11 60       	ori	r17, 0x01	; 1
    d070:	74 cf       	rjmp	.-280    	; 0xcf5a <collision_detect_shot+0x254>
        }
	}
	
	if (hit & HIT_ANGLE)
    d072:	12 ff       	sbrs	r17, 2
    d074:	0f c0       	rjmp	.+30     	; 0xd094 <collision_detect_shot+0x38e>
	{
		recoil_sprite_fine(player, &shot->shared);
    d076:	b4 01       	movw	r22, r8
    d078:	c3 01       	movw	r24, r6
    d07a:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    d07e:	b4 01       	movw	r22, r8
    d080:	8d 2d       	mov	r24, r13
    d082:	0e 94 67 56 	call	0xacce	; 0xacce <richochet>
		shot->rebounds--;
    d086:	f4 01       	movw	r30, r8
    d088:	85 85       	ldd	r24, Z+13	; 0x0d
    d08a:	81 50       	subi	r24, 0x01	; 1
    d08c:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    d08e:	81 11       	cpse	r24, r1
    d090:	51 c0       	rjmp	.+162    	; 0xd134 <collision_detect_shot+0x42e>
    d092:	45 c0       	rjmp	.+138    	; 0xd11e <collision_detect_shot+0x418>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_METAL);
	}
	else if ((hit & HIT_BRICK) && !is_net_player(player))
    d094:	11 ff       	sbrs	r17, 1
    d096:	40 c0       	rjmp	.+128    	; 0xd118 <collision_detect_shot+0x412>
    d098:	c3 01       	movw	r24, r6
    d09a:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    d09e:	81 11       	cpse	r24, r1
    d0a0:	3b c0       	rjmp	.+118    	; 0xd118 <collision_detect_shot+0x412>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    d0a2:	ef 2c       	mov	r14, r15
    d0a4:	f1 2c       	mov	r15, r1
    d0a6:	ee 0c       	add	r14, r14
    d0a8:	ff 1c       	adc	r15, r15
    d0aa:	01 e0       	ldi	r16, 0x01	; 1
    d0ac:	10 e0       	ldi	r17, 0x00	; 0
    d0ae:	0c 0f       	add	r16, r28
    d0b0:	1d 1f       	adc	r17, r29
    d0b2:	0e 0d       	add	r16, r14
    d0b4:	1f 1d       	adc	r17, r15
    d0b6:	f8 01       	movw	r30, r16
    d0b8:	60 81       	ld	r22, Z
    d0ba:	71 81       	ldd	r23, Z+1	; 0x01
    d0bc:	87 eb       	ldi	r24, 0xB7	; 183
    d0be:	9b e0       	ldi	r25, 0x0B	; 11
    d0c0:	0e 94 29 56 	call	0xac52	; 0xac52 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    d0c4:	d8 01       	movw	r26, r16
    d0c6:	ed 91       	ld	r30, X+
    d0c8:	fc 91       	ld	r31, X
    d0ca:	e8 5a       	subi	r30, 0xA8	; 168
    d0cc:	f3 4f       	sbci	r31, 0xF3	; 243
    d0ce:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    d0d0:	f4 01       	movw	r30, r8
    d0d2:	84 85       	ldd	r24, Z+12	; 0x0c
    d0d4:	81 50       	subi	r24, 0x01	; 1
    d0d6:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    d0d8:	81 11       	cpse	r24, r1
    d0da:	0b c0       	rjmp	.+22     	; 0xd0f2 <collision_detect_shot+0x3ec>
		{
			init_shot_state(shot, shot->shot_type);
    d0dc:	63 85       	ldd	r22, Z+11	; 0x0b
    d0de:	c4 01       	movw	r24, r8
    d0e0:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
			player->active_shots--;
    d0e4:	d3 01       	movw	r26, r6
    d0e6:	51 96       	adiw	r26, 0x11	; 17
    d0e8:	8c 91       	ld	r24, X
    d0ea:	51 97       	sbiw	r26, 0x11	; 17
    d0ec:	81 50       	subi	r24, 0x01	; 1
    d0ee:	51 96       	adiw	r26, 0x11	; 17
    d0f0:	8c 93       	st	X, r24
		}
		send_net_message(NETBLOCKHIT, tiles[brick_index] % 30, tiles[brick_index] / 30);
    d0f2:	e1 e0       	ldi	r30, 0x01	; 1
    d0f4:	f0 e0       	ldi	r31, 0x00	; 0
    d0f6:	ec 0f       	add	r30, r28
    d0f8:	fd 1f       	adc	r31, r29
    d0fa:	ee 0d       	add	r30, r14
    d0fc:	ff 1d       	adc	r31, r15
    d0fe:	80 81       	ld	r24, Z
    d100:	91 81       	ldd	r25, Z+1	; 0x01
    d102:	6e e1       	ldi	r22, 0x1E	; 30
    d104:	70 e0       	ldi	r23, 0x00	; 0
    d106:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    d10a:	46 2f       	mov	r20, r22
    d10c:	68 2f       	mov	r22, r24
    d10e:	87 e0       	ldi	r24, 0x07	; 7
    d110:	0e 94 8d 64 	call	0xc91a	; 0xc91a <send_net_message>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_BRICK_EXPLODE);
    d114:	20 e0       	ldi	r18, 0x00	; 0
    d116:	0f c0       	rjmp	.+30     	; 0xd136 <collision_detect_shot+0x430>
	}
	else if (hit & HIT_METAL)
    d118:	10 ff       	sbrs	r17, 0
    d11a:	15 c0       	rjmp	.+42     	; 0xd146 <collision_detect_shot+0x440>
	{
        init_shot_state(shot, shot->shot_type);
    d11c:	f4 01       	movw	r30, r8
    d11e:	63 85       	ldd	r22, Z+11	; 0x0b
    d120:	c4 01       	movw	r24, r8
    d122:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
        player->active_shots--;
    d126:	d3 01       	movw	r26, r6
    d128:	51 96       	adiw	r26, 0x11	; 17
    d12a:	8c 91       	ld	r24, X
    d12c:	51 97       	sbiw	r26, 0x11	; 17
    d12e:	81 50       	subi	r24, 0x01	; 1
    d130:	51 96       	adiw	r26, 0x11	; 17
    d132:	8c 93       	st	X, r24
        LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_METAL);
    d134:	23 e0       	ldi	r18, 0x03	; 3
    d136:	40 91 5c 0f 	lds	r20, 0x0F5C
    d13a:	60 91 ea 0b 	lds	r22, 0x0BEA
    d13e:	80 91 b6 0b 	lds	r24, 0x0BB6
    d142:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
	}
}
    d146:	0f 90       	pop	r0
    d148:	0f 90       	pop	r0
    d14a:	0f 90       	pop	r0
    d14c:	0f 90       	pop	r0
    d14e:	0f 90       	pop	r0
    d150:	df 91       	pop	r29
    d152:	cf 91       	pop	r28
    d154:	1f 91       	pop	r17
    d156:	0f 91       	pop	r16
    d158:	ff 90       	pop	r15
    d15a:	ef 90       	pop	r14
    d15c:	df 90       	pop	r13
    d15e:	cf 90       	pop	r12
    d160:	bf 90       	pop	r11
    d162:	af 90       	pop	r10
    d164:	9f 90       	pop	r9
    d166:	8f 90       	pop	r8
    d168:	7f 90       	pop	r7
    d16a:	6f 90       	pop	r6
    d16c:	5f 90       	pop	r5
    d16e:	4f 90       	pop	r4
    d170:	3f 90       	pop	r3
    d172:	2f 90       	pop	r2
    d174:	08 95       	ret

0000d176 <update_player>:
		return FRAME_TIME * s->speed;
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
}

void update_player(JoyPadState* p, Player* player)
{
    d176:	cf 92       	push	r12
    d178:	df 92       	push	r13
    d17a:	ef 92       	push	r14
    d17c:	ff 92       	push	r15
    d17e:	0f 93       	push	r16
    d180:	1f 93       	push	r17
    d182:	cf 93       	push	r28
    d184:	df 93       	push	r29
    d186:	00 d0       	rcall	.+0      	; 0xd188 <update_player+0x12>
    d188:	00 d0       	rcall	.+0      	; 0xd18a <update_player+0x14>
    d18a:	cd b7       	in	r28, 0x3d	; 61
    d18c:	de b7       	in	r29, 0x3e	; 62
    d18e:	8c 01       	movw	r16, r24
    d190:	6b 01       	movw	r12, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    d192:	fb 01       	movw	r30, r22
    d194:	12 82       	std	Z+2, r1	; 0x02
	player->old_active_shots = player->active_shots;
    d196:	81 89       	ldd	r24, Z+17	; 0x11
    d198:	82 8b       	std	Z+18, r24	; 0x12
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    d19a:	f8 01       	movw	r30, r16
    d19c:	80 81       	ld	r24, Z
    d19e:	83 ff       	sbrs	r24, 3
    d1a0:	1b c0       	rjmp	.+54     	; 0xd1d8 <update_player+0x62>
    d1a2:	80 91 a6 0b 	lds	r24, 0x0BA6
    d1a6:	81 11       	cpse	r24, r1
    d1a8:	17 c0       	rjmp	.+46     	; 0xd1d8 <update_player+0x62>
	{
#if JAMMA
#else
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    d1aa:	24 e0       	ldi	r18, 0x04	; 4
    d1ac:	40 91 5c 0f 	lds	r20, 0x0F5C
    d1b0:	60 91 ea 0b 	lds	r22, 0x0BEA
    d1b4:	80 91 b6 0b 	lds	r24, 0x0BB6
    d1b8:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		send_smart_net_message(player, p, NETPAUSETOGGLE);
    d1bc:	48 e0       	ldi	r20, 0x08	; 8
    d1be:	b8 01       	movw	r22, r16
    d1c0:	c6 01       	movw	r24, r12
    d1c2:	0e 94 1e 65 	call	0xca3c	; 0xca3c <send_smart_net_message>
		game.paused = game.paused ^ 1;
    d1c6:	90 91 a5 0b 	lds	r25, 0x0BA5
    d1ca:	81 e0       	ldi	r24, 0x01	; 1
    d1cc:	89 27       	eor	r24, r25
    d1ce:	80 93 a5 0b 	sts	0x0BA5, r24
		load_level_tiles(false);
    d1d2:	80 e0       	ldi	r24, 0x00	; 0
    d1d4:	0e 94 94 57 	call	0xaf28	; 0xaf28 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    d1d8:	80 91 a5 0b 	lds	r24, 0x0BA5
    d1dc:	81 11       	cpse	r24, r1
    d1de:	a6 c0       	rjmp	.+332    	; 0xd32c <update_player+0x1b6>
    d1e0:	f6 01       	movw	r30, r12
    d1e2:	85 89       	ldd	r24, Z+21	; 0x15
    d1e4:	80 fd       	sbrc	r24, 0
    d1e6:	a2 c0       	rjmp	.+324    	; 0xd32c <update_player+0x1b6>
	{
		player->shared.speed = player->max_speed;
    d1e8:	87 89       	ldd	r24, Z+23	; 0x17
    d1ea:	81 83       	std	Z+1, r24	; 0x01
		if ((p->held & BTN_UP))
    d1ec:	f8 01       	movw	r30, r16
    d1ee:	84 81       	ldd	r24, Z+4	; 0x04
    d1f0:	84 ff       	sbrs	r24, 4
    d1f2:	10 c0       	rjmp	.+32     	; 0xd214 <update_player+0x9e>
		{
			player->shared.direction = D_UP;
    d1f4:	f6 01       	movw	r30, r12
    d1f6:	10 82       	st	Z, r1
			player->shared.y -= get_delta(player, &player->shared);
    d1f8:	b6 01       	movw	r22, r12
    d1fa:	c6 01       	movw	r24, r12
    d1fc:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    d200:	9b 01       	movw	r18, r22
    d202:	ac 01       	movw	r20, r24
    d204:	f6 01       	movw	r30, r12
    d206:	67 81       	ldd	r22, Z+7	; 0x07
    d208:	70 85       	ldd	r23, Z+8	; 0x08
    d20a:	81 85       	ldd	r24, Z+9	; 0x09
    d20c:	92 85       	ldd	r25, Z+10	; 0x0a
    d20e:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    d212:	25 c0       	rjmp	.+74     	; 0xd25e <update_player+0xe8>
		}
		else if ((p->held & BTN_RIGHT))
    d214:	87 ff       	sbrs	r24, 7
    d216:	11 c0       	rjmp	.+34     	; 0xd23a <update_player+0xc4>
		{
			player->shared.direction = D_RIGHT;
    d218:	81 e0       	ldi	r24, 0x01	; 1
    d21a:	f6 01       	movw	r30, r12
    d21c:	80 83       	st	Z, r24
			player->shared.x += get_delta(player, &player->shared);
    d21e:	b6 01       	movw	r22, r12
    d220:	c6 01       	movw	r24, r12
    d222:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    d226:	9b 01       	movw	r18, r22
    d228:	ac 01       	movw	r20, r24
    d22a:	f6 01       	movw	r30, r12
    d22c:	63 81       	ldd	r22, Z+3	; 0x03
    d22e:	74 81       	ldd	r23, Z+4	; 0x04
    d230:	85 81       	ldd	r24, Z+5	; 0x05
    d232:	96 81       	ldd	r25, Z+6	; 0x06
    d234:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d238:	2a c0       	rjmp	.+84     	; 0xd28e <update_player+0x118>
		}
		else if ((p->held & BTN_DOWN))
    d23a:	85 ff       	sbrs	r24, 5
    d23c:	16 c0       	rjmp	.+44     	; 0xd26a <update_player+0xf4>
		{
			player->shared.direction = D_DOWN;
    d23e:	82 e0       	ldi	r24, 0x02	; 2
    d240:	f6 01       	movw	r30, r12
    d242:	80 83       	st	Z, r24
			player->shared.y += get_delta(player, &player->shared);
    d244:	b6 01       	movw	r22, r12
    d246:	c6 01       	movw	r24, r12
    d248:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    d24c:	9b 01       	movw	r18, r22
    d24e:	ac 01       	movw	r20, r24
    d250:	f6 01       	movw	r30, r12
    d252:	67 81       	ldd	r22, Z+7	; 0x07
    d254:	70 85       	ldd	r23, Z+8	; 0x08
    d256:	81 85       	ldd	r24, Z+9	; 0x09
    d258:	92 85       	ldd	r25, Z+10	; 0x0a
    d25a:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d25e:	f6 01       	movw	r30, r12
    d260:	67 83       	std	Z+7, r22	; 0x07
    d262:	70 87       	std	Z+8, r23	; 0x08
    d264:	81 87       	std	Z+9, r24	; 0x09
    d266:	92 87       	std	Z+10, r25	; 0x0a
    d268:	1a c0       	rjmp	.+52     	; 0xd29e <update_player+0x128>
		}
		else if ((p->held & BTN_LEFT))
    d26a:	86 ff       	sbrs	r24, 6
    d26c:	16 c0       	rjmp	.+44     	; 0xd29a <update_player+0x124>
		{
			player->shared.direction = D_LEFT;
    d26e:	83 e0       	ldi	r24, 0x03	; 3
    d270:	f6 01       	movw	r30, r12
    d272:	80 83       	st	Z, r24
			player->shared.x -= get_delta(player, &player->shared);
    d274:	b6 01       	movw	r22, r12
    d276:	c6 01       	movw	r24, r12
    d278:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    d27c:	9b 01       	movw	r18, r22
    d27e:	ac 01       	movw	r20, r24
    d280:	f6 01       	movw	r30, r12
    d282:	63 81       	ldd	r22, Z+3	; 0x03
    d284:	74 81       	ldd	r23, Z+4	; 0x04
    d286:	85 81       	ldd	r24, Z+5	; 0x05
    d288:	96 81       	ldd	r25, Z+6	; 0x06
    d28a:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    d28e:	f6 01       	movw	r30, r12
    d290:	63 83       	std	Z+3, r22	; 0x03
    d292:	74 83       	std	Z+4, r23	; 0x04
    d294:	85 83       	std	Z+5, r24	; 0x05
    d296:	96 83       	std	Z+6, r25	; 0x06
    d298:	02 c0       	rjmp	.+4      	; 0xd29e <update_player+0x128>
		}
		else
		{
			player->shared.speed = 0;
    d29a:	f6 01       	movw	r30, r12
    d29c:	11 82       	std	Z+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    d29e:	c8 01       	movw	r24, r16
    d2a0:	0e 94 6d 51 	call	0xa2da	; 0xa2da <shoot_pressed>
    d2a4:	88 23       	and	r24, r24
    d2a6:	09 f4       	brne	.+2      	; 0xd2aa <update_player+0x134>
    d2a8:	41 c0       	rjmp	.+130    	; 0xd32c <update_player+0x1b6>
    d2aa:	f6 01       	movw	r30, r12
    d2ac:	81 89       	ldd	r24, Z+17	; 0x11
    d2ae:	81 11       	cpse	r24, r1
    d2b0:	3d c0       	rjmp	.+122    	; 0xd32c <update_player+0x1b6>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    d2b2:	86 ad       	ldd	r24, Z+62	; 0x3e
    d2b4:	81 11       	cpse	r24, r1
    d2b6:	3a c0       	rjmp	.+116    	; 0xd32c <update_player+0x1b6>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    d2b8:	76 01       	movw	r14, r12
    d2ba:	f0 e3       	ldi	r31, 0x30	; 48
    d2bc:	ef 0e       	add	r14, r31
    d2be:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					send_smart_net_message(player, p, NETSHOOT);
    d2c0:	42 e0       	ldi	r20, 0x02	; 2
    d2c2:	b8 01       	movw	r22, r16
    d2c4:	c6 01       	movw	r24, r12
    d2c6:	0e 94 1e 65 	call	0xca3c	; 0xca3c <send_smart_net_message>
					if (player->has_rocket)
    d2ca:	f6 01       	movw	r30, r12
    d2cc:	80 8d       	ldd	r24, Z+24	; 0x18
    d2ce:	88 23       	and	r24, r24
    d2d0:	51 f0       	breq	.+20     	; 0xd2e6 <update_player+0x170>
					{
						init_shot_state(shot, ROCKET_SHOT);
    d2d2:	61 e0       	ldi	r22, 0x01	; 1
    d2d4:	c7 01       	movw	r24, r14
    d2d6:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    d2da:	61 e0       	ldi	r22, 0x01	; 1
    d2dc:	c7 01       	movw	r24, r14
    d2de:	0e 94 86 4e 	call	0x9d0c	; 0x9d0c <set_shot_animations>
						LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ROCKET);
    d2e2:	25 e0       	ldi	r18, 0x05	; 5
    d2e4:	09 c0       	rjmp	.+18     	; 0xd2f8 <update_player+0x182>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    d2e6:	60 e0       	ldi	r22, 0x00	; 0
    d2e8:	c7 01       	movw	r24, r14
    d2ea:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    d2ee:	60 e0       	ldi	r22, 0x00	; 0
    d2f0:	c7 01       	movw	r24, r14
    d2f2:	0e 94 86 4e 	call	0x9d0c	; 0x9d0c <set_shot_animations>
						LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_CANNONBALL);
    d2f6:	21 e0       	ldi	r18, 0x01	; 1
    d2f8:	40 91 5c 0f 	lds	r20, 0x0F5C
    d2fc:	60 91 ea 0b 	lds	r22, 0x0BEA
    d300:	80 91 b6 0b 	lds	r24, 0x0BB6
    d304:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
					}
					player->active_shots++;
    d308:	f6 01       	movw	r30, r12
    d30a:	81 89       	ldd	r24, Z+17	; 0x11
    d30c:	8f 5f       	subi	r24, 0xFF	; 255
    d30e:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    d310:	80 81       	ld	r24, Z
    d312:	80 ab       	std	Z+48, r24	; 0x30
					position_shot(player, shot);
    d314:	b7 01       	movw	r22, r14
    d316:	c6 01       	movw	r24, r12
    d318:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <position_shot>
					shot->active = 1;
    d31c:	81 e0       	ldi	r24, 0x01	; 1
    d31e:	f6 01       	movw	r30, r12
    d320:	86 af       	std	Z+62, r24	; 0x3e
					if (player->has_over_speed)
    d322:	81 8d       	ldd	r24, Z+25	; 0x19
    d324:	88 23       	and	r24, r24
    d326:	11 f0       	breq	.+4      	; 0xd32c <update_player+0x1b6>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    d328:	8a ea       	ldi	r24, 0xAA	; 170
    d32a:	81 ab       	std	Z+49, r24	; 0x31
				}
			}
		}
	}
	
	if (!game.paused)
    d32c:	80 91 a5 0b 	lds	r24, 0x0BA5
    d330:	81 11       	cpse	r24, r1
    d332:	86 c0       	rjmp	.+268    	; 0xd440 <update_player+0x2ca>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    d334:	86 01       	movw	r16, r12
    d336:	00 5d       	subi	r16, 0xD0	; 208
    d338:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    d33a:	f6 01       	movw	r30, r12
    d33c:	86 ad       	ldd	r24, Z+62	; 0x3e
    d33e:	88 23       	and	r24, r24
    d340:	09 f4       	brne	.+2      	; 0xd344 <update_player+0x1ce>
    d342:	9f c0       	rjmp	.+318    	; 0xd482 <update_player+0x30c>
			{
				switch (shot->shared.direction)
    d344:	80 a9       	ldd	r24, Z+48	; 0x30
    d346:	81 30       	cpi	r24, 0x01	; 1
    d348:	11 f1       	breq	.+68     	; 0xd38e <update_player+0x218>
    d34a:	98 f0       	brcs	.+38     	; 0xd372 <update_player+0x1fc>
    d34c:	82 30       	cpi	r24, 0x02	; 2
    d34e:	69 f1       	breq	.+90     	; 0xd3aa <update_player+0x234>
    d350:	83 30       	cpi	r24, 0x03	; 3
    d352:	09 f0       	breq	.+2      	; 0xd356 <update_player+0x1e0>
    d354:	42 c0       	rjmp	.+132    	; 0xd3da <update_player+0x264>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d356:	b8 01       	movw	r22, r16
    d358:	c6 01       	movw	r24, r12
    d35a:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    d35e:	9b 01       	movw	r18, r22
    d360:	ac 01       	movw	r20, r24
    d362:	f6 01       	movw	r30, r12
    d364:	63 a9       	ldd	r22, Z+51	; 0x33
    d366:	74 a9       	ldd	r23, Z+52	; 0x34
    d368:	85 a9       	ldd	r24, Z+53	; 0x35
    d36a:	96 a9       	ldd	r25, Z+54	; 0x36
    d36c:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    d370:	2f c0       	rjmp	.+94     	; 0xd3d0 <update_player+0x25a>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    d372:	b8 01       	movw	r22, r16
    d374:	c6 01       	movw	r24, r12
    d376:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    d37a:	9b 01       	movw	r18, r22
    d37c:	ac 01       	movw	r20, r24
    d37e:	f6 01       	movw	r30, r12
    d380:	67 a9       	ldd	r22, Z+55	; 0x37
    d382:	70 ad       	ldd	r23, Z+56	; 0x38
    d384:	81 ad       	ldd	r24, Z+57	; 0x39
    d386:	92 ad       	ldd	r25, Z+58	; 0x3a
    d388:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    d38c:	1b c0       	rjmp	.+54     	; 0xd3c4 <update_player+0x24e>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    d38e:	b8 01       	movw	r22, r16
    d390:	c6 01       	movw	r24, r12
    d392:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    d396:	9b 01       	movw	r18, r22
    d398:	ac 01       	movw	r20, r24
    d39a:	f6 01       	movw	r30, r12
    d39c:	63 a9       	ldd	r22, Z+51	; 0x33
    d39e:	74 a9       	ldd	r23, Z+52	; 0x34
    d3a0:	85 a9       	ldd	r24, Z+53	; 0x35
    d3a2:	96 a9       	ldd	r25, Z+54	; 0x36
    d3a4:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d3a8:	13 c0       	rjmp	.+38     	; 0xd3d0 <update_player+0x25a>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    d3aa:	b8 01       	movw	r22, r16
    d3ac:	c6 01       	movw	r24, r12
    d3ae:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    d3b2:	9b 01       	movw	r18, r22
    d3b4:	ac 01       	movw	r20, r24
    d3b6:	f6 01       	movw	r30, r12
    d3b8:	67 a9       	ldd	r22, Z+55	; 0x37
    d3ba:	70 ad       	ldd	r23, Z+56	; 0x38
    d3bc:	81 ad       	ldd	r24, Z+57	; 0x39
    d3be:	92 ad       	ldd	r25, Z+58	; 0x3a
    d3c0:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d3c4:	f6 01       	movw	r30, r12
    d3c6:	67 ab       	std	Z+55, r22	; 0x37
    d3c8:	70 af       	std	Z+56, r23	; 0x38
    d3ca:	81 af       	std	Z+57, r24	; 0x39
    d3cc:	92 af       	std	Z+58, r25	; 0x3a
    d3ce:	05 c0       	rjmp	.+10     	; 0xd3da <update_player+0x264>
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d3d0:	f6 01       	movw	r30, r12
    d3d2:	63 ab       	std	Z+51, r22	; 0x33
    d3d4:	74 ab       	std	Z+52, r23	; 0x34
    d3d6:	85 ab       	std	Z+53, r24	; 0x35
    d3d8:	96 ab       	std	Z+54, r25	; 0x36
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    d3da:	f6 01       	movw	r30, r12
    d3dc:	f7 ac       	ldd	r15, Z+63	; 0x3f
    d3de:	f8 e0       	ldi	r31, 0x08	; 8
    d3e0:	ff 15       	cp	r31, r15
    d3e2:	38 f0       	brcs	.+14     	; 0xd3f2 <update_player+0x27c>
    d3e4:	b8 01       	movw	r22, r16
    d3e6:	c6 01       	movw	r24, r12
    d3e8:	0e 94 77 51 	call	0xa2ee	; 0xa2ee <get_delta>
    d3ec:	9b 01       	movw	r18, r22
    d3ee:	ac 01       	movw	r20, r24
    d3f0:	03 c0       	rjmp	.+6      	; 0xd3f8 <update_player+0x282>
    d3f2:	20 e0       	ldi	r18, 0x00	; 0
    d3f4:	30 e0       	ldi	r19, 0x00	; 0
    d3f6:	a9 01       	movw	r20, r18
    d3f8:	6f 2d       	mov	r22, r15
    d3fa:	70 e0       	ldi	r23, 0x00	; 0
    d3fc:	80 e0       	ldi	r24, 0x00	; 0
    d3fe:	90 e0       	ldi	r25, 0x00	; 0
    d400:	29 83       	std	Y+1, r18	; 0x01
    d402:	3a 83       	std	Y+2, r19	; 0x02
    d404:	4b 83       	std	Y+3, r20	; 0x03
    d406:	5c 83       	std	Y+4, r21	; 0x04
    d408:	0e 94 59 73 	call	0xe6b2	; 0xe6b2 <__floatsisf>
    d40c:	29 81       	ldd	r18, Y+1	; 0x01
    d40e:	3a 81       	ldd	r19, Y+2	; 0x02
    d410:	4b 81       	ldd	r20, Y+3	; 0x03
    d412:	5c 81       	ldd	r21, Y+4	; 0x04
    d414:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d418:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d41c:	f6 01       	movw	r30, r12
    d41e:	67 af       	std	Z+63, r22	; 0x3f
				collision_detect_shot(player, shot);
    d420:	b8 01       	movw	r22, r16
    d422:	c6 01       	movw	r24, r12
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			exit_game();
			send_smart_net_message(player, p, NETEXIT);
		}
	}
}
    d424:	0f 90       	pop	r0
    d426:	0f 90       	pop	r0
    d428:	0f 90       	pop	r0
    d42a:	0f 90       	pop	r0
    d42c:	df 91       	pop	r29
    d42e:	cf 91       	pop	r28
    d430:	1f 91       	pop	r17
    d432:	0f 91       	pop	r16
    d434:	ff 90       	pop	r15
    d436:	ef 90       	pop	r14
    d438:	df 90       	pop	r13
    d43a:	cf 90       	pop	r12
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    d43c:	0c 94 83 66 	jmp	0xcd06	; 0xcd06 <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d440:	f8 01       	movw	r30, r16
    d442:	80 81       	ld	r24, Z
    d444:	91 81       	ldd	r25, Z+1	; 0x01
    d446:	91 ff       	sbrs	r25, 1
    d448:	1c c0       	rjmp	.+56     	; 0xd482 <update_player+0x30c>
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    d44a:	24 e0       	ldi	r18, 0x04	; 4
    d44c:	40 91 5c 0f 	lds	r20, 0x0F5C
    d450:	60 91 ea 0b 	lds	r22, 0x0BEA
    d454:	80 91 b6 0b 	lds	r24, 0x0BB6
    d458:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
			exit_game();
    d45c:	0e 94 15 5b 	call	0xb62a	; 0xb62a <exit_game>
			send_smart_net_message(player, p, NETEXIT);
    d460:	49 e0       	ldi	r20, 0x09	; 9
    d462:	b8 01       	movw	r22, r16
    d464:	c6 01       	movw	r24, r12
		}
	}
}
    d466:	0f 90       	pop	r0
    d468:	0f 90       	pop	r0
    d46a:	0f 90       	pop	r0
    d46c:	0f 90       	pop	r0
    d46e:	df 91       	pop	r29
    d470:	cf 91       	pop	r28
    d472:	1f 91       	pop	r17
    d474:	0f 91       	pop	r16
    d476:	ff 90       	pop	r15
    d478:	ef 90       	pop	r14
    d47a:	df 90       	pop	r13
    d47c:	cf 90       	pop	r12
	{
		if (p->pressed & BTN_X)
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			exit_game();
			send_smart_net_message(player, p, NETEXIT);
    d47e:	0c 94 1e 65 	jmp	0xca3c	; 0xca3c <send_smart_net_message>
		}
	}
}
    d482:	0f 90       	pop	r0
    d484:	0f 90       	pop	r0
    d486:	0f 90       	pop	r0
    d488:	0f 90       	pop	r0
    d48a:	df 91       	pop	r29
    d48c:	cf 91       	pop	r28
    d48e:	1f 91       	pop	r17
    d490:	0f 91       	pop	r16
    d492:	ff 90       	pop	r15
    d494:	ef 90       	pop	r14
    d496:	df 90       	pop	r13
    d498:	cf 90       	pop	r12
    d49a:	08 95       	ret

0000d49c <collision_detect_player>:
			player->shared.y--;
	}
}

char collision_detect_player(Player* player, u8 hud_x)
{
    d49c:	2f 92       	push	r2
    d49e:	3f 92       	push	r3
    d4a0:	4f 92       	push	r4
    d4a2:	5f 92       	push	r5
    d4a4:	6f 92       	push	r6
    d4a6:	7f 92       	push	r7
    d4a8:	8f 92       	push	r8
    d4aa:	9f 92       	push	r9
    d4ac:	af 92       	push	r10
    d4ae:	bf 92       	push	r11
    d4b0:	cf 92       	push	r12
    d4b2:	df 92       	push	r13
    d4b4:	ef 92       	push	r14
    d4b6:	ff 92       	push	r15
    d4b8:	0f 93       	push	r16
    d4ba:	1f 93       	push	r17
    d4bc:	cf 93       	push	r28
    d4be:	df 93       	push	r29
    d4c0:	cd b7       	in	r28, 0x3d	; 61
    d4c2:	de b7       	in	r29, 0x3e	; 62
    d4c4:	2a 97       	sbiw	r28, 0x0a	; 10
    d4c6:	0f b6       	in	r0, 0x3f	; 63
    d4c8:	f8 94       	cli
    d4ca:	de bf       	out	0x3e, r29	; 62
    d4cc:	0f be       	out	0x3f, r0	; 63
    d4ce:	cd bf       	out	0x3d, r28	; 61
    d4d0:	4c 01       	movw	r8, r24
    d4d2:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    d4d4:	1a 82       	std	Y+2, r1	; 0x02
    d4d6:	19 82       	std	Y+1, r1	; 0x01
    d4d8:	1c 82       	std	Y+4, r1	; 0x04
    d4da:	1b 82       	std	Y+3, r1	; 0x03
    d4dc:	1e 82       	std	Y+6, r1	; 0x06
    d4de:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    d4e0:	20 e0       	ldi	r18, 0x00	; 0
    d4e2:	30 e0       	ldi	r19, 0x00	; 0
    d4e4:	40 e0       	ldi	r20, 0x00	; 0
    d4e6:	5e e3       	ldi	r21, 0x3E	; 62
    d4e8:	dc 01       	movw	r26, r24
    d4ea:	17 96       	adiw	r26, 0x07	; 7
    d4ec:	6d 91       	ld	r22, X+
    d4ee:	7d 91       	ld	r23, X+
    d4f0:	8d 91       	ld	r24, X+
    d4f2:	9c 91       	ld	r25, X
    d4f4:	1a 97       	sbiw	r26, 0x0a	; 10
    d4f6:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    d4fa:	20 e0       	ldi	r18, 0x00	; 0
    d4fc:	30 e0       	ldi	r19, 0x00	; 0
    d4fe:	40 e4       	ldi	r20, 0x40	; 64
    d500:	50 e4       	ldi	r21, 0x40	; 64
    d502:	0e 94 55 72 	call	0xe4aa	; 0xe4aa <__subsf3>
    d506:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d50a:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    d50c:	20 e0       	ldi	r18, 0x00	; 0
    d50e:	30 e0       	ldi	r19, 0x00	; 0
    d510:	40 e0       	ldi	r20, 0x00	; 0
    d512:	5e e3       	ldi	r21, 0x3E	; 62
    d514:	f4 01       	movw	r30, r8
    d516:	63 81       	ldd	r22, Z+3	; 0x03
    d518:	74 81       	ldd	r23, Z+4	; 0x04
    d51a:	85 81       	ldd	r24, Z+5	; 0x05
    d51c:	96 81       	ldd	r25, Z+6	; 0x06
    d51e:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__mulsf3>
    d522:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    d526:	d4 01       	movw	r26, r8
    d528:	2c 91       	ld	r18, X
    d52a:	40 2f       	mov	r20, r16
    d52c:	ce 01       	movw	r24, r28
    d52e:	01 96       	adiw	r24, 0x01	; 1
    d530:	0e 94 88 56 	call	0xad10	; 0xad10 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    d534:	c4 01       	movw	r24, r8
    d536:	0e 94 2d 55 	call	0xaa5a	; 0xaa5a <collision_detect_boundries>
    d53a:	88 23       	and	r24, r24
    d53c:	39 f0       	breq	.+14     	; 0xd54c <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    d53e:	c4 01       	movw	r24, r8
    d540:	0e 94 10 53 	call	0xa620	; 0xa620 <recoil_sprite>
		player->shared.speed = 0;
    d544:	f4 01       	movw	r30, r8
    d546:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    d548:	21 2c       	mov	r2, r1
    d54a:	4f c1       	rjmp	.+670    	; 0xd7ea <collision_detect_player+0x34e>
    d54c:	ce 01       	movw	r24, r28
    d54e:	01 96       	adiw	r24, 0x01	; 1
    d550:	2c 01       	movw	r4, r24
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    d552:	31 2c       	mov	r3, r1
    d554:	b1 2c       	mov	r11, r1
    d556:	d1 2c       	mov	r13, r1
    d558:	21 2c       	mov	r2, r1
    d55a:	1f 82       	std	Y+7, r1	; 0x07
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y);
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d55c:	9b e0       	ldi	r25, 0x0B	; 11
    d55e:	91 0f       	add	r25, r17
    d560:	98 87       	std	Y+8, r25	; 0x08
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y);
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d562:	16 5f       	subi	r17, 0xF6	; 246
    d564:	19 87       	std	Y+9, r17	; 0x09
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    d566:	d2 01       	movw	r26, r4
    d568:	6d 90       	ld	r6, X+
    d56a:	7c 90       	ld	r7, X
    d56c:	c3 01       	movw	r24, r6
    d56e:	6e e1       	ldi	r22, 0x1E	; 30
    d570:	70 e0       	ldi	r23, 0x00	; 0
    d572:	0e 94 41 72 	call	0xe482	; 0xe482 <__divmodhi4>
    d576:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    d578:	13 e0       	ldi	r17, 0x03	; 3
    d57a:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    d57c:	c3 01       	movw	r24, r6
    d57e:	0e 94 b2 53 	call	0xa764	; 0xa764 <solid_directional_tile>
    d582:	88 23       	and	r24, r24
    d584:	51 f1       	breq	.+84     	; 0xd5da <collision_detect_player+0x13e>
    d586:	f4 01       	movw	r30, r8
    d588:	67 81       	ldd	r22, Z+7	; 0x07
    d58a:	70 85       	ldd	r23, Z+8	; 0x08
    d58c:	81 85       	ldd	r24, Z+9	; 0x09
    d58e:	92 85       	ldd	r25, Z+10	; 0x0a
    d590:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d594:	46 2f       	mov	r20, r22
    d596:	d4 01       	movw	r26, r8
    d598:	13 96       	adiw	r26, 0x03	; 3
    d59a:	6d 91       	ld	r22, X+
    d59c:	7d 91       	ld	r23, X+
    d59e:	8d 91       	ld	r24, X+
    d5a0:	9c 91       	ld	r25, X
    d5a2:	16 97       	sbiw	r26, 0x06	; 6
    d5a4:	4a 87       	std	Y+10, r20	; 0x0a
    d5a6:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d5aa:	00 e1       	ldi	r16, 0x10	; 16
    d5ac:	20 e1       	ldi	r18, 0x10	; 16
    d5ae:	4a 85       	ldd	r20, Y+10	; 0x0a
    d5b0:	c3 01       	movw	r24, r6
    d5b2:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <collides_directional_tile>
    d5b6:	88 23       	and	r24, r24
    d5b8:	81 f0       	breq	.+32     	; 0xd5da <collision_detect_player+0x13e>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    d5ba:	f4 01       	movw	r30, r8
    d5bc:	83 85       	ldd	r24, Z+11	; 0x0b
    d5be:	89 30       	cpi	r24, 0x09	; 9
    d5c0:	21 f4       	brne	.+8      	; 0xd5ca <collision_detect_player+0x12e>
    d5c2:	c4 01       	movw	r24, r8
    d5c4:	0e 94 10 53 	call	0xa620	; 0xa620 <recoil_sprite>
    d5c8:	04 c0       	rjmp	.+8      	; 0xd5d2 <collision_detect_player+0x136>
    d5ca:	b4 01       	movw	r22, r8
    d5cc:	c4 01       	movw	r24, r8
    d5ce:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <recoil_sprite_fine>
			player->shared.speed = 0;
    d5d2:	d4 01       	movw	r26, r8
    d5d4:	11 96       	adiw	r26, 0x01	; 1
    d5d6:	1c 92       	st	X, r1
    d5d8:	df c0       	rjmp	.+446    	; 0xd798 <collision_detect_player+0x2fc>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    d5da:	c3 01       	movw	r24, r6
    d5dc:	0e 94 a0 53 	call	0xa740	; 0xa740 <solid_square_tile>
    d5e0:	88 23       	and	r24, r24
    d5e2:	61 f1       	breq	.+88     	; 0xd63c <collision_detect_player+0x1a0>
    d5e4:	f4 01       	movw	r30, r8
    d5e6:	67 81       	ldd	r22, Z+7	; 0x07
    d5e8:	70 85       	ldd	r23, Z+8	; 0x08
    d5ea:	81 85       	ldd	r24, Z+9	; 0x09
    d5ec:	92 85       	ldd	r25, Z+10	; 0x0a
    d5ee:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d5f2:	36 2f       	mov	r19, r22
    d5f4:	d4 01       	movw	r26, r8
    d5f6:	13 96       	adiw	r26, 0x03	; 3
    d5f8:	6d 91       	ld	r22, X+
    d5fa:	7d 91       	ld	r23, X+
    d5fc:	8d 91       	ld	r24, X+
    d5fe:	9c 91       	ld	r25, X
    d600:	16 97       	sbiw	r26, 0x06	; 6
    d602:	3a 87       	std	Y+10, r19	; 0x0a
    d604:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d608:	86 2f       	mov	r24, r22
    d60a:	38 e0       	ldi	r19, 0x08	; 8
    d60c:	a3 2e       	mov	r10, r19
    d60e:	48 e0       	ldi	r20, 0x08	; 8
    d610:	c4 2e       	mov	r12, r20
    d612:	e1 2e       	mov	r14, r17
    d614:	ee 0c       	add	r14, r14
    d616:	ee 0c       	add	r14, r14
    d618:	ee 0c       	add	r14, r14
    d61a:	0f 2d       	mov	r16, r15
    d61c:	00 0f       	add	r16, r16
    d61e:	00 0f       	add	r16, r16
    d620:	00 0f       	add	r16, r16
    d622:	20 e1       	ldi	r18, 0x10	; 16
    d624:	40 e1       	ldi	r20, 0x10	; 16
    d626:	3a 85       	ldd	r19, Y+10	; 0x0a
    d628:	63 2f       	mov	r22, r19
    d62a:	0e 94 bd 4c 	call	0x997a	; 0x997a <LBCollides>
    d62e:	88 23       	and	r24, r24
    d630:	29 f0       	breq	.+10     	; 0xd63c <collision_detect_player+0x1a0>
		{
			collision_count++;
    d632:	b3 94       	inc	r11
			collision_tile = i;
			player->shared.speed = 0;
    d634:	f4 01       	movw	r30, r8
    d636:	11 82       	std	Z+1, r1	; 0x01
    d638:	d3 2c       	mov	r13, r3
    d63a:	ae c0       	rjmp	.+348    	; 0xd798 <collision_detect_player+0x2fc>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    d63c:	f3 01       	movw	r30, r6
    d63e:	e8 5a       	subi	r30, 0xA8	; 168
    d640:	f3 4f       	sbci	r31, 0xF3	; 243
    d642:	81 81       	ldd	r24, Z+1	; 0x01
    d644:	8d 34       	cpi	r24, 0x4D	; 77
    d646:	69 f5       	brne	.+90     	; 0xd6a2 <collision_detect_player+0x206>
    d648:	e1 2e       	mov	r14, r17
    d64a:	ee 0c       	add	r14, r14
    d64c:	ee 0c       	add	r14, r14
    d64e:	ee 0c       	add	r14, r14
    d650:	0f 2d       	mov	r16, r15
    d652:	00 0f       	add	r16, r16
    d654:	00 0f       	add	r16, r16
    d656:	00 0f       	add	r16, r16
    d658:	d4 01       	movw	r26, r8
    d65a:	17 96       	adiw	r26, 0x07	; 7
    d65c:	6d 91       	ld	r22, X+
    d65e:	7d 91       	ld	r23, X+
    d660:	8d 91       	ld	r24, X+
    d662:	9c 91       	ld	r25, X
    d664:	1a 97       	sbiw	r26, 0x0a	; 10
    d666:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d66a:	76 2e       	mov	r7, r22
    d66c:	f4 01       	movw	r30, r8
    d66e:	63 81       	ldd	r22, Z+3	; 0x03
    d670:	74 81       	ldd	r23, Z+4	; 0x04
    d672:	85 81       	ldd	r24, Z+5	; 0x05
    d674:	96 81       	ldd	r25, Z+6	; 0x06
    d676:	0e 94 2b 73 	call	0xe656	; 0xe656 <__fixunssfsi>
    d67a:	86 2f       	mov	r24, r22
    d67c:	98 e0       	ldi	r25, 0x08	; 8
    d67e:	a9 2e       	mov	r10, r25
    d680:	28 e0       	ldi	r18, 0x08	; 8
    d682:	c2 2e       	mov	r12, r18
    d684:	20 e1       	ldi	r18, 0x10	; 16
    d686:	40 e1       	ldi	r20, 0x10	; 16
    d688:	67 2d       	mov	r22, r7
    d68a:	0e 94 bd 4c 	call	0x997a	; 0x997a <LBCollides>
    d68e:	88 23       	and	r24, r24
    d690:	09 f4       	brne	.+2      	; 0xd694 <collision_detect_player+0x1f8>
    d692:	82 c0       	rjmp	.+260    	; 0xd798 <collision_detect_player+0x2fc>
		{
			player->max_speed = WATER_SPEED;
    d694:	e9 e1       	ldi	r30, 0x19	; 25
    d696:	d4 01       	movw	r26, r8
    d698:	57 96       	adiw	r26, 0x17	; 23
    d69a:	ec 93       	st	X, r30
    d69c:	f1 e0       	ldi	r31, 0x01	; 1
    d69e:	ff 83       	std	Y+7, r31	; 0x07
    d6a0:	89 c0       	rjmp	.+274    	; 0xd7b4 <collision_detect_player+0x318>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    d6a2:	8c 32       	cpi	r24, 0x2C	; 44
    d6a4:	89 f2       	breq	.-94     	; 0xd648 <collision_detect_player+0x1ac>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
    d6a6:	87 30       	cpi	r24, 0x07	; 7
    d6a8:	f9 f4       	brne	.+62     	; 0xd6e8 <collision_detect_player+0x24c>
    d6aa:	d4 01       	movw	r26, r8
    d6ac:	55 96       	adiw	r26, 0x15	; 21
    d6ae:	8c 91       	ld	r24, X
    d6b0:	80 fd       	sbrc	r24, 0
    d6b2:	72 c0       	rjmp	.+228    	; 0xd798 <collision_detect_player+0x2fc>
    d6b4:	c4 01       	movw	r24, r8
    d6b6:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    d6ba:	81 11       	cpse	r24, r1
    d6bc:	6d c0       	rjmp	.+218    	; 0xd798 <collision_detect_player+0x2fc>
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y);
    d6be:	41 2f       	mov	r20, r17
    d6c0:	6f 2d       	mov	r22, r15
    d6c2:	83 e0       	ldi	r24, 0x03	; 3
    d6c4:	0e 94 8d 64 	call	0xc91a	; 0xc91a <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d6c8:	d2 01       	movw	r26, r4
    d6ca:	ed 91       	ld	r30, X+
    d6cc:	fc 91       	ld	r31, X
    d6ce:	e8 5a       	subi	r30, 0xA8	; 168
    d6d0:	f3 4f       	sbci	r31, 0xF3	; 243
    d6d2:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    d6d4:	81 e4       	ldi	r24, 0x41	; 65
    d6d6:	f4 01       	movw	r30, r8
    d6d8:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    d6da:	91 e0       	ldi	r25, 0x01	; 1
    d6dc:	91 8f       	std	Z+25, r25	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d6de:	4f eb       	ldi	r20, 0xBF	; 191
    d6e0:	5a e6       	ldi	r21, 0x6A	; 106
    d6e2:	61 e0       	ldi	r22, 0x01	; 1
    d6e4:	89 85       	ldd	r24, Y+9	; 0x09
    d6e6:	1e c0       	rjmp	.+60     	; 0xd724 <collision_detect_player+0x288>
			SetTile(tile_x, tile_y, 0);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
    d6e8:	89 30       	cpi	r24, 0x09	; 9
    d6ea:	71 f5       	brne	.+92     	; 0xd748 <collision_detect_player+0x2ac>
    d6ec:	d4 01       	movw	r26, r8
    d6ee:	55 96       	adiw	r26, 0x15	; 21
    d6f0:	8c 91       	ld	r24, X
    d6f2:	80 fd       	sbrc	r24, 0
    d6f4:	51 c0       	rjmp	.+162    	; 0xd798 <collision_detect_player+0x2fc>
    d6f6:	c4 01       	movw	r24, r8
    d6f8:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    d6fc:	81 11       	cpse	r24, r1
    d6fe:	4c c0       	rjmp	.+152    	; 0xd798 <collision_detect_player+0x2fc>
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y);
    d700:	41 2f       	mov	r20, r17
    d702:	6f 2d       	mov	r22, r15
    d704:	84 e0       	ldi	r24, 0x04	; 4
    d706:	0e 94 8d 64 	call	0xc91a	; 0xc91a <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d70a:	d2 01       	movw	r26, r4
    d70c:	ed 91       	ld	r30, X+
    d70e:	fc 91       	ld	r31, X
    d710:	e8 5a       	subi	r30, 0xA8	; 168
    d712:	f3 4f       	sbci	r31, 0xF3	; 243
    d714:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    d716:	81 e0       	ldi	r24, 0x01	; 1
    d718:	f4 01       	movw	r30, r8
    d71a:	80 8f       	std	Z+24, r24	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d71c:	49 eb       	ldi	r20, 0xB9	; 185
    d71e:	5a e6       	ldi	r21, 0x6A	; 106
    d720:	61 e0       	ldi	r22, 0x01	; 1
    d722:	88 85       	ldd	r24, Y+8	; 0x08
    d724:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
			SetTile(tile_x, tile_y, 0);
    d728:	40 e0       	ldi	r20, 0x00	; 0
    d72a:	50 e0       	ldi	r21, 0x00	; 0
    d72c:	61 2f       	mov	r22, r17
    d72e:	8f 2d       	mov	r24, r15
    d730:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
    d734:	22 e0       	ldi	r18, 0x02	; 2
    d736:	40 91 5c 0f 	lds	r20, 0x0F5C
    d73a:	60 91 ea 0b 	lds	r22, 0x0BEA
    d73e:	80 91 b6 0b 	lds	r24, 0x0BB6
    d742:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
    d746:	28 c0       	rjmp	.+80     	; 0xd798 <collision_detect_player+0x2fc>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
    d748:	88 30       	cpi	r24, 0x08	; 8
    d74a:	31 f5       	brne	.+76     	; 0xd798 <collision_detect_player+0x2fc>
    d74c:	d4 01       	movw	r26, r8
    d74e:	55 96       	adiw	r26, 0x15	; 21
    d750:	8c 91       	ld	r24, X
    d752:	80 fd       	sbrc	r24, 0
    d754:	21 c0       	rjmp	.+66     	; 0xd798 <collision_detect_player+0x2fc>
    d756:	c4 01       	movw	r24, r8
    d758:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    d75c:	81 11       	cpse	r24, r1
    d75e:	1c c0       	rjmp	.+56     	; 0xd798 <collision_detect_player+0x2fc>
		{
			send_net_message(NETITEMBOMB, tile_x, tile_y);
    d760:	41 2f       	mov	r20, r17
    d762:	6f 2d       	mov	r22, r15
    d764:	85 e0       	ldi	r24, 0x05	; 5
    d766:	0e 94 8d 64 	call	0xc91a	; 0xc91a <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d76a:	d2 01       	movw	r26, r4
    d76c:	ed 91       	ld	r30, X+
    d76e:	fc 91       	ld	r31, X
    d770:	e8 5a       	subi	r30, 0xA8	; 168
    d772:	f3 4f       	sbci	r31, 0xF3	; 243
    d774:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    d776:	40 e0       	ldi	r20, 0x00	; 0
    d778:	50 e0       	ldi	r21, 0x00	; 0
    d77a:	61 2f       	mov	r22, r17
    d77c:	8f 2d       	mov	r24, r15
    d77e:	0e 94 2f 3a 	call	0x745e	; 0x745e <SetTile>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
    d782:	22 e0       	ldi	r18, 0x02	; 2
    d784:	40 91 5c 0f 	lds	r20, 0x0F5C
    d788:	60 91 ea 0b 	lds	r22, 0x0BEA
    d78c:	80 91 b6 0b 	lds	r24, 0x0BB6
    d790:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
			explode = 1;
    d794:	22 24       	eor	r2, r2
    d796:	23 94       	inc	r2
		}
		
		if (!hit_water)
    d798:	bf 81       	ldd	r27, Y+7	; 0x07
    d79a:	b1 11       	cpse	r27, r1
    d79c:	09 c0       	rjmp	.+18     	; 0xd7b0 <collision_detect_player+0x314>
		{
			player->max_speed = MAX_SPEED;
    d79e:	82 e3       	ldi	r24, 0x32	; 50
    d7a0:	f4 01       	movw	r30, r8
    d7a2:	87 8b       	std	Z+23, r24	; 0x17
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    d7a4:	81 8d       	ldd	r24, Z+25	; 0x19
    d7a6:	88 23       	and	r24, r24
    d7a8:	29 f0       	breq	.+10     	; 0xd7b4 <collision_detect_player+0x318>
    d7aa:	91 e4       	ldi	r25, 0x41	; 65
    d7ac:	97 8b       	std	Z+23, r25	; 0x17
    d7ae:	02 c0       	rjmp	.+4      	; 0xd7b4 <collision_detect_player+0x318>
    d7b0:	a1 e0       	ldi	r26, 0x01	; 1
    d7b2:	af 83       	std	Y+7, r26	; 0x07
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    d7b4:	33 94       	inc	r3
    d7b6:	b2 e0       	ldi	r27, 0x02	; 2
    d7b8:	4b 0e       	add	r4, r27
    d7ba:	51 1c       	adc	r5, r1
    d7bc:	e3 e0       	ldi	r30, 0x03	; 3
    d7be:	3e 12       	cpse	r3, r30
    d7c0:	d2 ce       	rjmp	.-604    	; 0xd566 <collision_detect_player+0xca>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    d7c2:	bb 20       	and	r11, r11
    d7c4:	91 f0       	breq	.+36     	; 0xd7ea <collision_detect_player+0x34e>
    d7c6:	c4 01       	movw	r24, r8
    d7c8:	0e 94 10 53 	call	0xa620	; 0xa620 <recoil_sprite>
	if (collision_count == 1)
    d7cc:	f1 e0       	ldi	r31, 0x01	; 1
    d7ce:	bf 12       	cpse	r11, r31
    d7d0:	0c c0       	rjmp	.+24     	; 0xd7ea <collision_detect_player+0x34e>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    d7d2:	fe 01       	movw	r30, r28
    d7d4:	31 96       	adiw	r30, 0x01	; 1
    d7d6:	ed 0d       	add	r30, r13
    d7d8:	f1 1d       	adc	r31, r1
    d7da:	ed 0d       	add	r30, r13
    d7dc:	f1 1d       	adc	r31, r1
    d7de:	40 81       	ld	r20, Z
    d7e0:	51 81       	ldd	r21, Z+1	; 0x01
    d7e2:	6d 2d       	mov	r22, r13
    d7e4:	c4 01       	movw	r24, r8
    d7e6:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <slide>
	}
	return explode;
}
    d7ea:	82 2d       	mov	r24, r2
    d7ec:	2a 96       	adiw	r28, 0x0a	; 10
    d7ee:	0f b6       	in	r0, 0x3f	; 63
    d7f0:	f8 94       	cli
    d7f2:	de bf       	out	0x3e, r29	; 62
    d7f4:	0f be       	out	0x3f, r0	; 63
    d7f6:	cd bf       	out	0x3d, r28	; 61
    d7f8:	df 91       	pop	r29
    d7fa:	cf 91       	pop	r28
    d7fc:	1f 91       	pop	r17
    d7fe:	0f 91       	pop	r16
    d800:	ff 90       	pop	r15
    d802:	ef 90       	pop	r14
    d804:	df 90       	pop	r13
    d806:	cf 90       	pop	r12
    d808:	bf 90       	pop	r11
    d80a:	af 90       	pop	r10
    d80c:	9f 90       	pop	r9
    d80e:	8f 90       	pop	r8
    d810:	7f 90       	pop	r7
    d812:	6f 90       	pop	r6
    d814:	5f 90       	pop	r5
    d816:	4f 90       	pop	r4
    d818:	3f 90       	pop	r3
    d81a:	2f 90       	pop	r2
    d81c:	08 95       	ret

0000d81e <update_turret_shot>:
		}
	}
}

void update_turret_shot(Turret* t, Shot* s)
{	
    d81e:	0f 93       	push	r16
    d820:	1f 93       	push	r17
    d822:	cf 93       	push	r28
    d824:	df 93       	push	r29
    d826:	8c 01       	movw	r16, r24
    d828:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    d82a:	fc 01       	movw	r30, r24
    d82c:	83 85       	ldd	r24, Z+11	; 0x0b
    d82e:	81 11       	cpse	r24, r1
    d830:	02 c0       	rjmp	.+4      	; 0xd836 <update_turret_shot+0x18>
	{
		s->active = 0;
    d832:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    d834:	77 c0       	rjmp	.+238    	; 0xd924 <update_turret_shot+0x106>
	}
	if (!s->active)
    d836:	8e 85       	ldd	r24, Y+14	; 0x0e
    d838:	81 11       	cpse	r24, r1
    d83a:	29 c0       	rjmp	.+82     	; 0xd88e <update_turret_shot+0x70>
	{
		s->active = 1;
    d83c:	81 e0       	ldi	r24, 0x01	; 1
    d83e:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    d840:	20 e0       	ldi	r18, 0x00	; 0
    d842:	30 e0       	ldi	r19, 0x00	; 0
    d844:	40 e4       	ldi	r20, 0x40	; 64
    d846:	50 e4       	ldi	r21, 0x40	; 64
    d848:	f8 01       	movw	r30, r16
    d84a:	63 81       	ldd	r22, Z+3	; 0x03
    d84c:	74 81       	ldd	r23, Z+4	; 0x04
    d84e:	85 81       	ldd	r24, Z+5	; 0x05
    d850:	96 81       	ldd	r25, Z+6	; 0x06
    d852:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d856:	6b 83       	std	Y+3, r22	; 0x03
    d858:	7c 83       	std	Y+4, r23	; 0x04
    d85a:	8d 83       	std	Y+5, r24	; 0x05
    d85c:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    d85e:	20 e0       	ldi	r18, 0x00	; 0
    d860:	30 e0       	ldi	r19, 0x00	; 0
    d862:	40 e4       	ldi	r20, 0x40	; 64
    d864:	50 e4       	ldi	r21, 0x40	; 64
    d866:	f8 01       	movw	r30, r16
    d868:	67 81       	ldd	r22, Z+7	; 0x07
    d86a:	70 85       	ldd	r23, Z+8	; 0x08
    d86c:	81 85       	ldd	r24, Z+9	; 0x09
    d86e:	92 85       	ldd	r25, Z+10	; 0x0a
    d870:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d874:	6f 83       	std	Y+7, r22	; 0x07
    d876:	78 87       	std	Y+8, r23	; 0x08
    d878:	89 87       	std	Y+9, r24	; 0x09
    d87a:	9a 87       	std	Y+10, r25	; 0x0a
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_CANNONBALL);
    d87c:	21 e0       	ldi	r18, 0x01	; 1
    d87e:	40 91 5c 0f 	lds	r20, 0x0F5C
    d882:	60 91 ea 0b 	lds	r22, 0x0BEA
    d886:	80 91 b6 0b 	lds	r24, 0x0BB6
    d88a:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    d88e:	23 e3       	ldi	r18, 0x33	; 51
    d890:	35 e5       	ldi	r19, 0x55	; 85
    d892:	45 e8       	ldi	r20, 0x85	; 133
    d894:	50 e4       	ldi	r21, 0x40	; 64
    d896:	6f 81       	ldd	r22, Y+7	; 0x07
    d898:	78 85       	ldd	r23, Y+8	; 0x08
    d89a:	89 85       	ldd	r24, Y+9	; 0x09
    d89c:	9a 85       	ldd	r25, Y+10	; 0x0a
    d89e:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d8a2:	6f 83       	std	Y+7, r22	; 0x07
    d8a4:	78 87       	std	Y+8, r23	; 0x08
    d8a6:	89 87       	std	Y+9, r24	; 0x09
    d8a8:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    d8aa:	20 e0       	ldi	r18, 0x00	; 0
    d8ac:	30 e0       	ldi	r19, 0x00	; 0
    d8ae:	40 e0       	ldi	r20, 0x00	; 0
    d8b0:	51 e4       	ldi	r21, 0x41	; 65
    d8b2:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__addsf3>
    d8b6:	20 e0       	ldi	r18, 0x00	; 0
    d8b8:	30 e0       	ldi	r19, 0x00	; 0
    d8ba:	48 e5       	ldi	r20, 0x58	; 88
    d8bc:	53 e4       	ldi	r21, 0x43	; 67
    d8be:	0e 94 09 74 	call	0xe812	; 0xe812 <__gesf2>
    d8c2:	18 16       	cp	r1, r24
    d8c4:	0c f4       	brge	.+2      	; 0xd8c8 <update_turret_shot+0xaa>
    d8c6:	b5 cf       	rjmp	.-150    	; 0xd832 <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */	
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG) && !is_net_player(game.boss_fight_player))
    d8c8:	00 91 b2 0b 	lds	r16, 0x0BB2
    d8cc:	10 91 b3 0b 	lds	r17, 0x0BB3
    d8d0:	be 01       	movw	r22, r28
    d8d2:	c8 01       	movw	r24, r16
    d8d4:	0e 94 80 54 	call	0xa900	; 0xa900 <player_shot>
    d8d8:	88 23       	and	r24, r24
    d8da:	21 f1       	breq	.+72     	; 0xd924 <update_turret_shot+0x106>
    d8dc:	f8 01       	movw	r30, r16
    d8de:	85 89       	ldd	r24, Z+21	; 0x15
    d8e0:	80 fd       	sbrc	r24, 0
    d8e2:	20 c0       	rjmp	.+64     	; 0xd924 <update_turret_shot+0x106>
    d8e4:	c8 01       	movw	r24, r16
    d8e6:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    d8ea:	81 11       	cpse	r24, r1
    d8ec:	1b c0       	rjmp	.+54     	; 0xd924 <update_turret_shot+0x106>
	{
		game.boss_fight_player_lives--;
    d8ee:	80 91 a8 0b 	lds	r24, 0x0BA8
    d8f2:	81 50       	subi	r24, 0x01	; 1
    d8f4:	80 93 a8 0b 	sts	0x0BA8, r24
		if (game.boss_fight_player_lives <= 0)
    d8f8:	81 11       	cpse	r24, r1
    d8fa:	03 c0       	rjmp	.+6      	; 0xd902 <update_turret_shot+0xe4>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    d8fc:	80 e1       	ldi	r24, 0x10	; 16
    d8fe:	80 93 a6 0b 	sts	0x0BA6, r24
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    d902:	60 91 a7 0b 	lds	r22, 0x0BA7
    d906:	c8 01       	movw	r24, r16
    d908:	0e 94 af 55 	call	0xab5e	; 0xab5e <kill_player>
    d90c:	86 e0       	ldi	r24, 0x06	; 6
    d90e:	0e 94 6e 49 	call	0x92dc	; 0x92dc <LBPlaySound.part.6>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETTURRETHIT, 0, 0);
    d912:	40 e0       	ldi	r20, 0x00	; 0
    d914:	60 e0       	ldi	r22, 0x00	; 0
    d916:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    d918:	df 91       	pop	r29
    d91a:	cf 91       	pop	r28
    d91c:	1f 91       	pop	r17
    d91e:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETTURRETHIT, 0, 0);
    d920:	0c 94 8d 64 	jmp	0xc91a	; 0xc91a <send_net_message>
	}
}
    d924:	df 91       	pop	r29
    d926:	cf 91       	pop	r28
    d928:	1f 91       	pop	r17
    d92a:	0f 91       	pop	r16
    d92c:	08 95       	ret

0000d92e <_handle_select_helper>:
#endif
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{	
    d92e:	7f 92       	push	r7
    d930:	8f 92       	push	r8
    d932:	9f 92       	push	r9
    d934:	af 92       	push	r10
    d936:	bf 92       	push	r11
    d938:	cf 92       	push	r12
    d93a:	df 92       	push	r13
    d93c:	ef 92       	push	r14
    d93e:	ff 92       	push	r15
    d940:	0f 93       	push	r16
    d942:	1f 93       	push	r17
    d944:	cf 93       	push	r28
    d946:	df 93       	push	r29
    d948:	ec 01       	movw	r28, r24
    d94a:	7b 01       	movw	r14, r22
    d94c:	8a 01       	movw	r16, r20
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING) && !is_net_player(player))
    d94e:	fb 01       	movw	r30, r22
    d950:	c0 80       	ld	r12, Z
    d952:	d1 80       	ldd	r13, Z+1	; 0x01
    d954:	46 01       	movw	r8, r12
    d956:	f0 e1       	ldi	r31, 0x10	; 16
    d958:	8f 22       	and	r8, r31
    d95a:	99 24       	eor	r9, r9
    d95c:	c4 fe       	sbrs	r12, 4
    d95e:	0e c0       	rjmp	.+28     	; 0xd97c <_handle_select_helper+0x4e>
    d960:	8d 81       	ldd	r24, Y+5	; 0x05
    d962:	81 11       	cpse	r24, r1
    d964:	0b c0       	rjmp	.+22     	; 0xd97c <_handle_select_helper+0x4e>
    d966:	ca 01       	movw	r24, r20
    d968:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    d96c:	81 11       	cpse	r24, r1
    d96e:	06 c0       	rjmp	.+12     	; 0xd97c <_handle_select_helper+0x4e>
	{
		ps->handle_id--;
    d970:	88 81       	ld	r24, Y
    d972:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d974:	87 ff       	sbrs	r24, 7
    d976:	15 c0       	rjmp	.+42     	; 0xd9a2 <_handle_select_helper+0x74>
    d978:	18 82       	st	Y, r1
    d97a:	14 c0       	rjmp	.+40     	; 0xd9a4 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING) && !is_net_player(player))
    d97c:	56 01       	movw	r10, r12
    d97e:	80 e2       	ldi	r24, 0x20	; 32
    d980:	a8 22       	and	r10, r24
    d982:	bb 24       	eor	r11, r11
    d984:	c5 fe       	sbrs	r12, 5
    d986:	18 c0       	rjmp	.+48     	; 0xd9b8 <_handle_select_helper+0x8a>
    d988:	8d 81       	ldd	r24, Y+5	; 0x05
    d98a:	81 11       	cpse	r24, r1
    d98c:	15 c0       	rjmp	.+42     	; 0xd9b8 <_handle_select_helper+0x8a>
    d98e:	c8 01       	movw	r24, r16
    d990:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    d994:	81 11       	cpse	r24, r1
    d996:	10 c0       	rjmp	.+32     	; 0xd9b8 <_handle_select_helper+0x8a>
	{
		ps->handle_id++;
    d998:	88 81       	ld	r24, Y
    d99a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d99c:	89 30       	cpi	r24, 0x09	; 9
    d99e:	0c f0       	brlt	.+2      	; 0xd9a2 <_handle_select_helper+0x74>
    d9a0:	88 e0       	ldi	r24, 0x08	; 8
    d9a2:	88 83       	st	Y, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    d9a4:	24 e0       	ldi	r18, 0x04	; 4
    d9a6:	40 91 5c 0f 	lds	r20, 0x0F5C
    d9aa:	60 91 ea 0b 	lds	r22, 0x0BEA
    d9ae:	80 91 b6 0b 	lds	r24, 0x0BB6
    d9b2:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
    d9b6:	b3 c0       	rjmp	.+358    	; 0xdb1e <_handle_select_helper+0x1f0>
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING) && !is_net_player(player))
    d9b8:	c7 01       	movw	r24, r14
    d9ba:	0e 94 70 5a 	call	0xb4e0	; 0xb4e0 <select_pressed>
    d9be:	78 2e       	mov	r7, r24
    d9c0:	88 23       	and	r24, r24
    d9c2:	c1 f0       	breq	.+48     	; 0xd9f4 <_handle_select_helper+0xc6>
    d9c4:	8d 81       	ldd	r24, Y+5	; 0x05
    d9c6:	81 11       	cpse	r24, r1
    d9c8:	15 c0       	rjmp	.+42     	; 0xd9f4 <_handle_select_helper+0xc6>
    d9ca:	c8 01       	movw	r24, r16
    d9cc:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    d9d0:	81 11       	cpse	r24, r1
    d9d2:	10 c0       	rjmp	.+32     	; 0xd9f4 <_handle_select_helper+0xc6>
	{
		ps->select_state = EDITING;
    d9d4:	81 e0       	ldi	r24, 0x01	; 1
    d9d6:	8d 83       	std	Y+5, r24	; 0x05
		memcpy(ps->handle, &handles.data[ps->handle_id*3], 3);
    d9d8:	e8 81       	ld	r30, Y
    d9da:	83 e0       	ldi	r24, 0x03	; 3
    d9dc:	e8 02       	muls	r30, r24
    d9de:	f0 01       	movw	r30, r0
    d9e0:	11 24       	eor	r1, r1
    d9e2:	eb 57       	subi	r30, 0x7B	; 123
    d9e4:	f4 4f       	sbci	r31, 0xF4	; 244
    d9e6:	80 81       	ld	r24, Z
    d9e8:	91 81       	ldd	r25, Z+1	; 0x01
    d9ea:	a2 81       	ldd	r26, Z+2	; 0x02
    d9ec:	89 83       	std	Y+1, r24	; 0x01
    d9ee:	9a 83       	std	Y+2, r25	; 0x02
    d9f0:	ab 83       	std	Y+3, r26	; 0x03
    d9f2:	d8 cf       	rjmp	.-80     	; 0xd9a4 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING) && !is_net_player(player))
    d9f4:	c7 fe       	sbrs	r12, 7
    d9f6:	0f c0       	rjmp	.+30     	; 0xda16 <_handle_select_helper+0xe8>
    d9f8:	8d 81       	ldd	r24, Y+5	; 0x05
    d9fa:	81 30       	cpi	r24, 0x01	; 1
    d9fc:	61 f4       	brne	.+24     	; 0xda16 <_handle_select_helper+0xe8>
    d9fe:	c8 01       	movw	r24, r16
    da00:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    da04:	81 11       	cpse	r24, r1
    da06:	07 c0       	rjmp	.+14     	; 0xda16 <_handle_select_helper+0xe8>
	{
		ps->char_index++;
    da08:	8c 81       	ldd	r24, Y+4	; 0x04
    da0a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    da0c:	83 30       	cpi	r24, 0x03	; 3
    da0e:	0c f0       	brlt	.+2      	; 0xda12 <_handle_select_helper+0xe4>
    da10:	82 e0       	ldi	r24, 0x02	; 2
    da12:	8c 83       	std	Y+4, r24	; 0x04
    da14:	c7 cf       	rjmp	.-114    	; 0xd9a4 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING) && !is_net_player(player))
    da16:	c6 fe       	sbrs	r12, 6
    da18:	0f c0       	rjmp	.+30     	; 0xda38 <_handle_select_helper+0x10a>
    da1a:	8d 81       	ldd	r24, Y+5	; 0x05
    da1c:	81 30       	cpi	r24, 0x01	; 1
    da1e:	09 f0       	breq	.+2      	; 0xda22 <_handle_select_helper+0xf4>
    da20:	90 c0       	rjmp	.+288    	; 0xdb42 <_handle_select_helper+0x214>
    da22:	c8 01       	movw	r24, r16
    da24:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    da28:	81 11       	cpse	r24, r1
    da2a:	2f c0       	rjmp	.+94     	; 0xda8a <_handle_select_helper+0x15c>
	{
		ps->char_index--;
    da2c:	8c 81       	ldd	r24, Y+4	; 0x04
    da2e:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    da30:	87 ff       	sbrs	r24, 7
    da32:	ef cf       	rjmp	.-34     	; 0xda12 <_handle_select_helper+0xe4>
    da34:	1c 82       	std	Y+4, r1	; 0x04
    da36:	b6 cf       	rjmp	.-148    	; 0xd9a4 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    da38:	89 28       	or	r8, r9
    da3a:	91 f0       	breq	.+36     	; 0xda60 <_handle_select_helper+0x132>
    da3c:	8d 81       	ldd	r24, Y+5	; 0x05
    da3e:	81 30       	cpi	r24, 0x01	; 1
    da40:	09 f0       	breq	.+2      	; 0xda44 <_handle_select_helper+0x116>
    da42:	54 c0       	rjmp	.+168    	; 0xdaec <_handle_select_helper+0x1be>
    da44:	c8 01       	movw	r24, r16
    da46:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    da4a:	81 11       	cpse	r24, r1
    da4c:	20 c0       	rjmp	.+64     	; 0xda8e <_handle_select_helper+0x160>
	{
		ps->handle[(u8) ps->char_index]--;
    da4e:	8c 81       	ldd	r24, Y+4	; 0x04
    da50:	c8 0f       	add	r28, r24
    da52:	d1 1d       	adc	r29, r1
    da54:	89 81       	ldd	r24, Y+1	; 0x01
    da56:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    da58:	81 34       	cpi	r24, 0x41	; 65
    da5a:	a8 f4       	brcc	.+42     	; 0xda86 <_handle_select_helper+0x158>
    da5c:	81 e4       	ldi	r24, 0x41	; 65
    da5e:	13 c0       	rjmp	.+38     	; 0xda86 <_handle_select_helper+0x158>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    da60:	ab 28       	or	r10, r11
    da62:	b9 f0       	breq	.+46     	; 0xda92 <_handle_select_helper+0x164>
    da64:	8d 81       	ldd	r24, Y+5	; 0x05
    da66:	81 30       	cpi	r24, 0x01	; 1
    da68:	09 f0       	breq	.+2      	; 0xda6c <_handle_select_helper+0x13e>
    da6a:	40 c0       	rjmp	.+128    	; 0xdaec <_handle_select_helper+0x1be>
    da6c:	c8 01       	movw	r24, r16
    da6e:	0e 94 71 66 	call	0xcce2	; 0xcce2 <is_net_player>
    da72:	81 11       	cpse	r24, r1
    da74:	39 c0       	rjmp	.+114    	; 0xdae8 <_handle_select_helper+0x1ba>
	{
		ps->handle[(u8) ps->char_index]++;
    da76:	8c 81       	ldd	r24, Y+4	; 0x04
    da78:	c8 0f       	add	r28, r24
    da7a:	d1 1d       	adc	r29, r1
    da7c:	89 81       	ldd	r24, Y+1	; 0x01
    da7e:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    da80:	8b 35       	cpi	r24, 0x5B	; 91
    da82:	08 f0       	brcs	.+2      	; 0xda86 <_handle_select_helper+0x158>
    da84:	8a e5       	ldi	r24, 0x5A	; 90
    da86:	89 83       	std	Y+1, r24	; 0x01
    da88:	8d cf       	rjmp	.-230    	; 0xd9a4 <_handle_select_helper+0x76>
		ps->char_index--;
		if (ps->char_index < 0) ps->char_index = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    da8a:	89 28       	or	r8, r9
    da8c:	d9 f6       	brne	.-74     	; 0xda44 <_handle_select_helper+0x116>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    da8e:	ab 28       	or	r10, r11
    da90:	69 f7       	brne	.-38     	; 0xda6c <_handle_select_helper+0x13e>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    da92:	77 20       	and	r7, r7
    da94:	59 f1       	breq	.+86     	; 0xdaec <_handle_select_helper+0x1be>
    da96:	8d 81       	ldd	r24, Y+5	; 0x05
    da98:	81 30       	cpi	r24, 0x01	; 1
    da9a:	41 f5       	brne	.+80     	; 0xdaec <_handle_select_helper+0x1be>
	{
		player->handle_id = ps->handle_id;
    da9c:	88 81       	ld	r24, Y
    da9e:	f8 01       	movw	r30, r16
    daa0:	83 87       	std	Z+11, r24	; 0x0b
		memcpy(player->handle, ps->handle, 3);
    daa2:	89 81       	ldd	r24, Y+1	; 0x01
    daa4:	9a 81       	ldd	r25, Y+2	; 0x02
    daa6:	ab 81       	ldd	r26, Y+3	; 0x03
    daa8:	84 87       	std	Z+12, r24	; 0x0c
    daaa:	95 87       	std	Z+13, r25	; 0x0d
    daac:	a6 87       	std	Z+14, r26	; 0x0e
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
    daae:	e8 81       	ld	r30, Y
    dab0:	83 e0       	ldi	r24, 0x03	; 3
    dab2:	e8 02       	muls	r30, r24
    dab4:	f0 01       	movw	r30, r0
    dab6:	11 24       	eor	r1, r1
    dab8:	eb 57       	subi	r30, 0x7B	; 123
    daba:	f4 4f       	sbci	r31, 0xF4	; 244
    dabc:	89 81       	ldd	r24, Y+1	; 0x01
    dabe:	9a 81       	ldd	r25, Y+2	; 0x02
    dac0:	ab 81       	ldd	r26, Y+3	; 0x03
    dac2:	80 83       	st	Z, r24
    dac4:	91 83       	std	Z+1, r25	; 0x01
    dac6:	a2 83       	std	Z+2, r26	; 0x02
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    dac8:	24 e0       	ldi	r18, 0x04	; 4
    daca:	40 91 5c 0f 	lds	r20, 0x0F5C
    dace:	60 91 ea 0b 	lds	r22, 0x0BEA
    dad2:	80 91 b6 0b 	lds	r24, 0x0BB6
    dad6:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    dada:	83 e8       	ldi	r24, 0x83	; 131
    dadc:	9b e0       	ldi	r25, 0x0B	; 11
    dade:	0e 94 aa 3b 	call	0x7754	; 0x7754 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		memcpy(player->handle, ps->handle, 3);
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    dae2:	82 e0       	ldi	r24, 0x02	; 2
    dae4:	8d 83       	std	Y+5, r24	; 0x05
    dae6:	1b c0       	rjmp	.+54     	; 0xdb1e <_handle_select_helper+0x1f0>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    dae8:	71 10       	cpse	r7, r1
    daea:	d8 cf       	rjmp	.-80     	; 0xda9c <_handle_select_helper+0x16e>
		ps->select_state = CONFIRMED;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    daec:	d1 fe       	sbrs	r13, 1
    daee:	2c c0       	rjmp	.+88     	; 0xdb48 <_handle_select_helper+0x21a>
    daf0:	8d 81       	ldd	r24, Y+5	; 0x05
    daf2:	81 30       	cpi	r24, 0x01	; 1
    daf4:	11 f4       	brne	.+4      	; 0xdafa <_handle_select_helper+0x1cc>
	{
		ps->select_state = SELECTING;
    daf6:	1d 82       	std	Y+5, r1	; 0x05
    daf8:	55 cf       	rjmp	.-342    	; 0xd9a4 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    dafa:	82 30       	cpi	r24, 0x02	; 2
    dafc:	19 f4       	brne	.+6      	; 0xdb04 <_handle_select_helper+0x1d6>
	{
		ps->select_state = EDITING;
    dafe:	81 e0       	ldi	r24, 0x01	; 1
    db00:	8d 83       	std	Y+5, r24	; 0x05
    db02:	50 cf       	rjmp	.-352    	; 0xd9a4 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_X))
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    db04:	24 e0       	ldi	r18, 0x04	; 4
    db06:	40 91 5c 0f 	lds	r20, 0x0F5C
    db0a:	60 91 ea 0b 	lds	r22, 0x0BEA
    db0e:	80 91 b6 0b 	lds	r24, 0x0BB6
    db12:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <LBPlaySound>
		fade_through();
    db16:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
		load_splash();
    db1a:	0e 94 26 5a 	call	0xb44c	; 0xb44c <load_splash>
		send_smart_net_message(player, p, NETHANDLESELECT);
    db1e:	4a e0       	ldi	r20, 0x0A	; 10
    db20:	b7 01       	movw	r22, r14
    db22:	c8 01       	movw	r24, r16
	}
#endif
}
    db24:	df 91       	pop	r29
    db26:	cf 91       	pop	r28
    db28:	1f 91       	pop	r17
    db2a:	0f 91       	pop	r16
    db2c:	ff 90       	pop	r15
    db2e:	ef 90       	pop	r14
    db30:	df 90       	pop	r13
    db32:	cf 90       	pop	r12
    db34:	bf 90       	pop	r11
    db36:	af 90       	pop	r10
    db38:	9f 90       	pop	r9
    db3a:	8f 90       	pop	r8
    db3c:	7f 90       	pop	r7
	else if ((p->pressed & BTN_X))
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_splash();
		send_smart_net_message(player, p, NETHANDLESELECT);
    db3e:	0c 94 1e 65 	jmp	0xca3c	; 0xca3c <send_smart_net_message>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    db42:	ab 28       	or	r10, r11
    db44:	99 f6       	brne	.-90     	; 0xdaec <_handle_select_helper+0x1be>
    db46:	a5 cf       	rjmp	.-182    	; 0xda92 <_handle_select_helper+0x164>
		fade_through();
		load_splash();
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
#endif
}
    db48:	df 91       	pop	r29
    db4a:	cf 91       	pop	r28
    db4c:	1f 91       	pop	r17
    db4e:	0f 91       	pop	r16
    db50:	ff 90       	pop	r15
    db52:	ef 90       	pop	r14
    db54:	df 90       	pop	r13
    db56:	cf 90       	pop	r12
    db58:	bf 90       	pop	r11
    db5a:	af 90       	pop	r10
    db5c:	9f 90       	pop	r9
    db5e:	8f 90       	pop	r8
    db60:	7f 90       	pop	r7
    db62:	08 95       	ret

0000db64 <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    db64:	0f 93       	push	r16
    db66:	1f 93       	push	r17
    db68:	cf 93       	push	r28
    db6a:	df 93       	push	r29
    db6c:	ec 01       	movw	r28, r24
    db6e:	8b 01       	movw	r16, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    db70:	26 e0       	ldi	r18, 0x06	; 6
    db72:	42 e0       	ldi	r20, 0x02	; 2
    db74:	bc 01       	movw	r22, r24
    db76:	8b ef       	ldi	r24, 0xFB	; 251
    db78:	9f e0       	ldi	r25, 0x0F	; 15
    db7a:	0e 94 44 5c 	call	0xb888	; 0xb888 <_handle_select_render_helper>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    db7e:	80 91 b6 0b 	lds	r24, 0x0BB6
    db82:	88 23       	and	r24, r24
    db84:	49 f0       	breq	.+18     	; 0xdb98 <update_handle_select+0x34>
    db86:	86 30       	cpi	r24, 0x06	; 6
    db88:	39 f0       	breq	.+14     	; 0xdb98 <update_handle_select+0x34>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    db8a:	28 e0       	ldi	r18, 0x08	; 8
    db8c:	43 e1       	ldi	r20, 0x13	; 19
    db8e:	b8 01       	movw	r22, r16
    db90:	8d e7       	ldi	r24, 0x7D	; 125
    db92:	9b e0       	ldi	r25, 0x0B	; 11
    db94:	0e 94 44 5c 	call	0xb888	; 0xb888 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    db98:	45 ed       	ldi	r20, 0xD5	; 213
    db9a:	5b e0       	ldi	r21, 0x0B	; 11
    db9c:	be 01       	movw	r22, r28
    db9e:	8b ef       	ldi	r24, 0xFB	; 251
    dba0:	9f e0       	ldi	r25, 0x0F	; 15
    dba2:	0e 94 97 6c 	call	0xd92e	; 0xd92e <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    dba6:	c1 e0       	ldi	r28, 0x01	; 1
    dba8:	80 91 00 10 	lds	r24, 0x1000
    dbac:	82 30       	cpi	r24, 0x02	; 2
    dbae:	09 f0       	breq	.+2      	; 0xdbb2 <update_handle_select+0x4e>
    dbb0:	c0 e0       	ldi	r28, 0x00	; 0
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    dbb2:	80 91 b6 0b 	lds	r24, 0x0BB6
    dbb6:	88 23       	and	r24, r24
    dbb8:	49 f1       	breq	.+82     	; 0xdc0c <update_handle_select+0xa8>
    dbba:	86 30       	cpi	r24, 0x06	; 6
    dbbc:	51 f1       	breq	.+84     	; 0xdc12 <update_handle_select+0xae>
	{
		_handle_select_helper(&p2s, p2, &player2);
    dbbe:	47 e4       	ldi	r20, 0x47	; 71
    dbc0:	5f e0       	ldi	r21, 0x0F	; 15
    dbc2:	b8 01       	movw	r22, r16
    dbc4:	8d e7       	ldi	r24, 0x7D	; 125
    dbc6:	9b e0       	ldi	r25, 0x0B	; 11
    dbc8:	0e 94 97 6c 	call	0xd92e	; 0xd92e <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    dbcc:	80 91 82 0b 	lds	r24, 0x0B82
    dbd0:	82 30       	cpi	r24, 0x02	; 2
    dbd2:	09 f5       	brne	.+66     	; 0xdc16 <update_handle_select+0xb2>
	}
	if (start_game)
    dbd4:	cc 23       	and	r28, r28
    dbd6:	f9 f0       	breq	.+62     	; 0xdc16 <update_handle_select+0xb2>
	{
		if (game.selection == PVCPU)
    dbd8:	80 91 b6 0b 	lds	r24, 0x0BB6
    dbdc:	81 11       	cpse	r24, r1
    dbde:	0f c0       	rjmp	.+30     	; 0xdbfe <update_handle_select+0x9a>
		{
			player2.handle_id = 9;
    dbe0:	89 e0       	ldi	r24, 0x09	; 9
    dbe2:	80 93 52 0f 	sts	0x0F52, r24
			memcpy(player2.handle, &handles.data[9*3], 3);
    dbe6:	80 91 a0 0b 	lds	r24, 0x0BA0
    dbea:	90 91 a1 0b 	lds	r25, 0x0BA1
    dbee:	a0 91 a2 0b 	lds	r26, 0x0BA2
    dbf2:	80 93 53 0f 	sts	0x0F53, r24
    dbf6:	90 93 54 0f 	sts	0x0F54, r25
    dbfa:	a0 93 55 0f 	sts	0x0F55, r26
		}
		level_transition(0);
    dbfe:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    dc00:	df 91       	pop	r29
    dc02:	cf 91       	pop	r28
    dc04:	1f 91       	pop	r17
    dc06:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    dc08:	0c 94 bd 58 	jmp	0xb17a	; 0xb17a <level_transition>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    dc0c:	c1 11       	cpse	r28, r1
    dc0e:	e8 cf       	rjmp	.-48     	; 0xdbe0 <update_handle_select+0x7c>
    dc10:	02 c0       	rjmp	.+4      	; 0xdc16 <update_handle_select+0xb2>
    dc12:	c1 11       	cpse	r28, r1
    dc14:	f4 cf       	rjmp	.-24     	; 0xdbfe <update_handle_select+0x9a>
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
	}
}
    dc16:	df 91       	pop	r29
    dc18:	cf 91       	pop	r28
    dc1a:	1f 91       	pop	r17
    dc1c:	0f 91       	pop	r16
    dc1e:	08 95       	ret

0000dc20 <record_player_posture>:
	if (game.selection == JOINNETGAME && player == &player1) return 1;
	return 0;
}

void record_player_posture(Player* player)
{
    dc20:	fc 01       	movw	r30, r24
	player->old_direction = player->shared.direction;
    dc22:	80 81       	ld	r24, Z
    dc24:	85 a3       	std	Z+37, r24	; 0x25
	player->old_speed = player->shared.speed;
    dc26:	81 81       	ldd	r24, Z+1	; 0x01
    dc28:	86 a3       	std	Z+38, r24	; 0x26
	player->old_recoiled = player->shared.recoiled;
    dc2a:	82 81       	ldd	r24, Z+2	; 0x02
    dc2c:	87 a3       	std	Z+39, r24	; 0x27
    dc2e:	08 95       	ret

0000dc30 <player_posture_changed>:
}

u8 player_posture_changed(Player* player)
{
    dc30:	fc 01       	movw	r30, r24
	if (player->old_direction != player->shared.direction) return 1;
    dc32:	95 a1       	ldd	r25, Z+37	; 0x25
    dc34:	80 81       	ld	r24, Z
    dc36:	98 13       	cpse	r25, r24
    dc38:	0b c0       	rjmp	.+22     	; 0xdc50 <player_posture_changed+0x20>
	if (player->old_speed != player->shared.speed) return 1;
    dc3a:	96 a1       	ldd	r25, Z+38	; 0x26
    dc3c:	81 81       	ldd	r24, Z+1	; 0x01
    dc3e:	98 13       	cpse	r25, r24
    dc40:	07 c0       	rjmp	.+14     	; 0xdc50 <player_posture_changed+0x20>
	if (player->old_recoiled != player->shared.recoiled) return 1;
    dc42:	81 e0       	ldi	r24, 0x01	; 1
    dc44:	27 a1       	ldd	r18, Z+39	; 0x27
    dc46:	92 81       	ldd	r25, Z+2	; 0x02
    dc48:	29 13       	cpse	r18, r25
    dc4a:	03 c0       	rjmp	.+6      	; 0xdc52 <player_posture_changed+0x22>
    dc4c:	80 e0       	ldi	r24, 0x00	; 0
    dc4e:	08 95       	ret
	player->old_recoiled = player->shared.recoiled;
}

u8 player_posture_changed(Player* player)
{
	if (player->old_direction != player->shared.direction) return 1;
    dc50:	81 e0       	ldi	r24, 0x01	; 1
	if (player->old_speed != player->shared.speed) return 1;
	if (player->old_recoiled != player->shared.recoiled) return 1;
	return 0;
}
    dc52:	08 95       	ret

0000dc54 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    dc54:	df 92       	push	r13
    dc56:	ef 92       	push	r14
    dc58:	ff 92       	push	r15
    dc5a:	0f 93       	push	r16
    dc5c:	1f 93       	push	r17
    dc5e:	cf 93       	push	r28
    dc60:	df 93       	push	r29
    dc62:	8c 01       	movw	r16, r24
    dc64:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    dc66:	80 91 a5 0b 	lds	r24, 0x0BA5
    dc6a:	88 23       	and	r24, r24
    dc6c:	19 f1       	breq	.+70     	; 0xdcb4 <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    dc6e:	0e 94 e7 4d 	call	0x9bce	; 0x9bce <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    dc72:	4e e1       	ldi	r20, 0x1E	; 30
    dc74:	5b e6       	ldi	r21, 0x6B	; 107
    dc76:	6c e0       	ldi	r22, 0x0C	; 12
    dc78:	88 e0       	ldi	r24, 0x08	; 8
    dc7a:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
		Print(12, 13, (char*) strPaused);
    dc7e:	48 ee       	ldi	r20, 0xE8	; 232
    dc80:	53 e0       	ldi	r21, 0x03	; 3
    dc82:	6d e0       	ldi	r22, 0x0D	; 13
    dc84:	70 e0       	ldi	r23, 0x00	; 0
    dc86:	8c e0       	ldi	r24, 0x0C	; 12
    dc88:	90 e0       	ldi	r25, 0x00	; 0
    dc8a:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		Print(11, 14, (char*) strExit);
    dc8e:	4f ee       	ldi	r20, 0xEF	; 239
    dc90:	53 e0       	ldi	r21, 0x03	; 3
    dc92:	6e e0       	ldi	r22, 0x0E	; 14
    dc94:	70 e0       	ldi	r23, 0x00	; 0
    dc96:	8b e0       	ldi	r24, 0x0B	; 11
    dc98:	90 e0       	ldi	r25, 0x00	; 0
    dc9a:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		
		// Update
		update_player(p1, &player1);
    dc9e:	65 ed       	ldi	r22, 0xD5	; 213
    dca0:	7b e0       	ldi	r23, 0x0B	; 11
    dca2:	c8 01       	movw	r24, r16
    dca4:	0e 94 bb 68 	call	0xd176	; 0xd176 <update_player>
		update_player(p2, &player2);
    dca8:	67 e4       	ldi	r22, 0x47	; 71
    dcaa:	7f e0       	ldi	r23, 0x0F	; 15
    dcac:	ce 01       	movw	r24, r28
    dcae:	0e 94 bb 68 	call	0xd176	; 0xd176 <update_player>
    dcb2:	5b c2       	rjmp	.+1206   	; 0xe16a <update_level+0x516>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    dcb4:	90 91 a6 0b 	lds	r25, 0x0BA6
    dcb8:	91 30       	cpi	r25, 0x01	; 1
    dcba:	09 f0       	breq	.+2      	; 0xdcbe <update_level+0x6a>
    dcbc:	54 c0       	rjmp	.+168    	; 0xdd66 <update_level+0x112>
	{
		// Render
		record_player_posture(game.boss_fight_player);
    dcbe:	80 91 b2 0b 	lds	r24, 0x0BB2
    dcc2:	90 91 b3 0b 	lds	r25, 0x0BB3
    dcc6:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <record_player_posture>
		render_boss_fight_scope_load();
    dcca:	0e 94 ed 58 	call	0xb1da	; 0xb1da <render_boss_fight_scope_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    dcce:	60 e0       	ldi	r22, 0x00	; 0
    dcd0:	80 91 b2 0b 	lds	r24, 0x0BB2
    dcd4:	90 91 b3 0b 	lds	r25, 0x0BB3
    dcd8:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <tank_map>
    dcdc:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    dcde:	40 e0       	ldi	r20, 0x00	; 0
    dce0:	61 e5       	ldi	r22, 0x51	; 81
    dce2:	71 e3       	ldi	r23, 0x31	; 49
    dce4:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		p1_shot_index = p2_index + 4;
    dce8:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    dcea:	6c 2f       	mov	r22, r28
    dcec:	80 91 b2 0b 	lds	r24, 0x0BB2
    dcf0:	90 91 b3 0b 	lds	r25, 0x0BB3
    dcf4:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <shot_map>
    dcf8:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    dcfa:	40 e0       	ldi	r20, 0x00	; 0
    dcfc:	67 e5       	ldi	r22, 0x57	; 87
    dcfe:	71 e3       	ldi	r23, 0x31	; 49
    dd00:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    dd04:	6c 2f       	mov	r22, r28
    dd06:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd0a:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd0e:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <shot_map>
		render_player(game.boss_fight_player, p1_index);
    dd12:	60 e0       	ldi	r22, 0x00	; 0
    dd14:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd18:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd1c:	0e 94 d1 51 	call	0xa3a2	; 0xa3a2 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    dd20:	6c 2f       	mov	r22, r28
    dd22:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd26:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd2a:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <render_shot>
		render_shot(&player2, p2_shot_index);
    dd2e:	6d 2f       	mov	r22, r29
    dd30:	87 e4       	ldi	r24, 0x47	; 71
    dd32:	9f e0       	ldi	r25, 0x0F	; 15
    dd34:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <render_shot>
		render_tile_explosions(&tile_animations);
    dd38:	87 eb       	ldi	r24, 0xB7	; 183
    dd3a:	9b e0       	ldi	r25, 0x0B	; 11
    dd3c:	0e 94 26 52 	call	0xa44c	; 0xa44c <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    dd40:	60 91 b2 0b 	lds	r22, 0x0BB2
    dd44:	70 91 b3 0b 	lds	r23, 0x0BB3
    dd48:	80 91 b4 0b 	lds	r24, 0x0BB4
    dd4c:	90 91 b5 0b 	lds	r25, 0x0BB5
    dd50:	0e 94 bb 68 	call	0xd176	; 0xd176 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    dd54:	60 91 a7 0b 	lds	r22, 0x0BA7
    dd58:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd5c:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd60:	0e 94 4e 6a 	call	0xd49c	; 0xd49c <collision_detect_player>
    dd64:	02 c2       	rjmp	.+1028   	; 0xe16a <update_level+0x516>
		
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    dd66:	92 30       	cpi	r25, 0x02	; 2
    dd68:	09 f0       	breq	.+2      	; 0xdd6c <update_level+0x118>
    dd6a:	42 c0       	rjmp	.+132    	; 0xddf0 <update_level+0x19c>
	{
		// Render
		record_player_posture(game.boss_fight_player);
    dd6c:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd70:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd74:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <record_player_posture>
		render_boss_fight_sub_load();
    dd78:	0e 94 00 59 	call	0xb200	; 0xb200 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    dd7c:	60 e0       	ldi	r22, 0x00	; 0
    dd7e:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd82:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd86:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <tank_map>
    dd8a:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    dd8c:	40 e0       	ldi	r20, 0x00	; 0
    dd8e:	61 e5       	ldi	r22, 0x51	; 81
    dd90:	71 e3       	ldi	r23, 0x31	; 49
    dd92:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		p1_shot_index = p2_index + 4;
    dd96:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    dd98:	6c 2f       	mov	r22, r28
    dd9a:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd9e:	90 91 b3 0b 	lds	r25, 0x0BB3
    dda2:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <shot_map>
    dda6:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    dda8:	40 e0       	ldi	r20, 0x00	; 0
    ddaa:	67 e5       	ldi	r22, 0x57	; 87
    ddac:	71 e3       	ldi	r23, 0x31	; 49
    ddae:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    ddb2:	6c 2f       	mov	r22, r28
    ddb4:	80 91 b2 0b 	lds	r24, 0x0BB2
    ddb8:	90 91 b3 0b 	lds	r25, 0x0BB3
    ddbc:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <shot_map>
		render_player(game.boss_fight_player, p1_index);
    ddc0:	60 e0       	ldi	r22, 0x00	; 0
    ddc2:	80 91 b2 0b 	lds	r24, 0x0BB2
    ddc6:	90 91 b3 0b 	lds	r25, 0x0BB3
    ddca:	0e 94 d1 51 	call	0xa3a2	; 0xa3a2 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    ddce:	6c 2f       	mov	r22, r28
    ddd0:	80 91 b2 0b 	lds	r24, 0x0BB2
    ddd4:	90 91 b3 0b 	lds	r25, 0x0BB3
    ddd8:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <render_shot>
		render_shot(&player2, p2_shot_index);
    dddc:	6d 2f       	mov	r22, r29
    ddde:	87 e4       	ldi	r24, 0x47	; 71
    dde0:	9f e0       	ldi	r25, 0x0F	; 15
    dde2:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <render_shot>
		render_tile_explosions(&tile_animations);
    dde6:	87 eb       	ldi	r24, 0xB7	; 183
    dde8:	9b e0       	ldi	r25, 0x0B	; 11
    ddea:	0e 94 26 52 	call	0xa44c	; 0xa44c <render_tile_explosions>
    ddee:	9c c0       	rjmp	.+312    	; 0xdf28 <update_level+0x2d4>
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
		if (player_posture_changed(game.boss_fight_player)) send_smart_net_message(game.boss_fight_player, game.boss_fight_joypad, NETPOSCHANGE);
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    ddf0:	94 30       	cpi	r25, 0x04	; 4
    ddf2:	09 f0       	breq	.+2      	; 0xddf6 <update_level+0x1a2>
    ddf4:	ac c0       	rjmp	.+344    	; 0xdf4e <update_level+0x2fa>
	{
		
		record_player_posture(game.boss_fight_player);
    ddf6:	80 91 b2 0b 	lds	r24, 0x0BB2
    ddfa:	90 91 b3 0b 	lds	r25, 0x0BB3
    ddfe:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <record_player_posture>
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    de02:	80 91 40 10 	lds	r24, 0x1040
    de06:	81 11       	cpse	r24, r1
    de08:	07 c0       	rjmp	.+14     	; 0xde18 <update_level+0x1c4>
    de0a:	80 91 0c 10 	lds	r24, 0x100C
    de0e:	81 11       	cpse	r24, r1
    de10:	03 c0       	rjmp	.+6      	; 0xde18 <update_level+0x1c4>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    de12:	80 e2       	ldi	r24, 0x20	; 32
    de14:	80 93 a6 0b 	sts	0x0BA6, r24
		}
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    de18:	60 e0       	ldi	r22, 0x00	; 0
    de1a:	80 91 b2 0b 	lds	r24, 0x0BB2
    de1e:	90 91 b3 0b 	lds	r25, 0x0BB3
    de22:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <tank_map>
    de26:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    de28:	68 2f       	mov	r22, r24
    de2a:	80 91 b2 0b 	lds	r24, 0x0BB2
    de2e:	90 91 b3 0b 	lds	r25, 0x0BB3
    de32:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <shot_map>
    de36:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    de38:	01 e0       	ldi	r16, 0x01	; 1
    de3a:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    de3c:	12 e0       	ldi	r17, 0x02	; 2
    de3e:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    de40:	d3 e0       	ldi	r29, 0x03	; 3
    de42:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de44:	80 91 40 10 	lds	r24, 0x1040
    de48:	88 23       	and	r24, r24
    de4a:	19 f0       	breq	.+6      	; 0xde52 <update_level+0x1fe>
	return (char*) map_sub_turret;
    de4c:	69 e0       	ldi	r22, 0x09	; 9
    de4e:	71 e3       	ldi	r23, 0x31	; 49
    de50:	02 c0       	rjmp	.+4      	; 0xde56 <update_level+0x202>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de52:	67 e5       	ldi	r22, 0x57	; 87
    de54:	71 e3       	ldi	r23, 0x31	; 49
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    de56:	40 e0       	ldi	r20, 0x00	; 0
    de58:	8c 2f       	mov	r24, r28
    de5a:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de5e:	80 91 40 10 	lds	r24, 0x1040
    de62:	88 23       	and	r24, r24
    de64:	19 f0       	breq	.+6      	; 0xde6c <update_level+0x218>
	return (char*) map_sub_shot;
    de66:	6c e0       	ldi	r22, 0x0C	; 12
    de68:	71 e3       	ldi	r23, 0x31	; 49
    de6a:	02 c0       	rjmp	.+4      	; 0xde70 <update_level+0x21c>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de6c:	67 e5       	ldi	r22, 0x57	; 87
    de6e:	71 e3       	ldi	r23, 0x31	; 49
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    de70:	40 e0       	ldi	r20, 0x00	; 0
    de72:	80 2f       	mov	r24, r16
    de74:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de78:	80 91 0c 10 	lds	r24, 0x100C
    de7c:	88 23       	and	r24, r24
    de7e:	19 f0       	breq	.+6      	; 0xde86 <update_level+0x232>
	return (char*) map_sub_turret;
    de80:	69 e0       	ldi	r22, 0x09	; 9
    de82:	71 e3       	ldi	r23, 0x31	; 49
    de84:	02 c0       	rjmp	.+4      	; 0xde8a <update_level+0x236>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de86:	67 e5       	ldi	r22, 0x57	; 87
    de88:	71 e3       	ldi	r23, 0x31	; 49
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    de8a:	40 e0       	ldi	r20, 0x00	; 0
    de8c:	81 2f       	mov	r24, r17
    de8e:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de92:	80 91 0c 10 	lds	r24, 0x100C
    de96:	88 23       	and	r24, r24
    de98:	19 f0       	breq	.+6      	; 0xdea0 <update_level+0x24c>
	return (char*) map_sub_shot;
    de9a:	6c e0       	ldi	r22, 0x0C	; 12
    de9c:	71 e3       	ldi	r23, 0x31	; 49
    de9e:	02 c0       	rjmp	.+4      	; 0xdea4 <update_level+0x250>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    dea0:	67 e5       	ldi	r22, 0x57	; 87
    dea2:	71 e3       	ldi	r23, 0x31	; 49
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    dea4:	40 e0       	ldi	r20, 0x00	; 0
    dea6:	8d 2f       	mov	r24, r29
    dea8:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    deac:	60 e0       	ldi	r22, 0x00	; 0
    deae:	80 91 b2 0b 	lds	r24, 0x0BB2
    deb2:	90 91 b3 0b 	lds	r25, 0x0BB3
    deb6:	0e 94 d1 51 	call	0xa3a2	; 0xa3a2 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    deba:	6f 2d       	mov	r22, r15
    debc:	80 91 b2 0b 	lds	r24, 0x0BB2
    dec0:	90 91 b3 0b 	lds	r25, 0x0BB3
    dec4:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <render_shot>
		render_tile_explosions(&tile_animations);
    dec8:	87 eb       	ldi	r24, 0xB7	; 183
    deca:	9b e0       	ldi	r25, 0x0B	; 11
    decc:	0e 94 26 52 	call	0xa44c	; 0xa44c <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    ded0:	6c 2f       	mov	r22, r28
    ded2:	85 e3       	ldi	r24, 0x35	; 53
    ded4:	90 e1       	ldi	r25, 0x10	; 16
    ded6:	0e 94 42 59 	call	0xb284	; 0xb284 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    deda:	60 2f       	mov	r22, r16
    dedc:	85 e3       	ldi	r24, 0x35	; 53
    dede:	90 e1       	ldi	r25, 0x10	; 16
    dee0:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    dee4:	61 2f       	mov	r22, r17
    dee6:	81 e0       	ldi	r24, 0x01	; 1
    dee8:	90 e1       	ldi	r25, 0x10	; 16
    deea:	0e 94 42 59 	call	0xb284	; 0xb284 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    deee:	6d 2f       	mov	r22, r29
    def0:	81 e0       	ldi	r24, 0x01	; 1
    def2:	90 e1       	ldi	r25, 0x10	; 16
    def4:	0e 94 6b 59 	call	0xb2d6	; 0xb2d6 <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    def8:	40 e6       	ldi	r20, 0x60	; 96
    defa:	68 e2       	ldi	r22, 0x28	; 40
    defc:	85 e3       	ldi	r24, 0x35	; 53
    defe:	90 e1       	ldi	r25, 0x10	; 16
    df00:	0e 94 94 59 	call	0xb328	; 0xb328 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    df04:	40 ec       	ldi	r20, 0xC0	; 192
    df06:	68 e8       	ldi	r22, 0x88	; 136
    df08:	81 e0       	ldi	r24, 0x01	; 1
    df0a:	90 e1       	ldi	r25, 0x10	; 16
    df0c:	0e 94 94 59 	call	0xb328	; 0xb328 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    df10:	61 e4       	ldi	r22, 0x41	; 65
    df12:	70 e1       	ldi	r23, 0x10	; 16
    df14:	85 e3       	ldi	r24, 0x35	; 53
    df16:	90 e1       	ldi	r25, 0x10	; 16
    df18:	0e 94 0f 6c 	call	0xd81e	; 0xd81e <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    df1c:	6d e0       	ldi	r22, 0x0D	; 13
    df1e:	70 e1       	ldi	r23, 0x10	; 16
    df20:	81 e0       	ldi	r24, 0x01	; 1
    df22:	90 e1       	ldi	r25, 0x10	; 16
    df24:	0e 94 0f 6c 	call	0xd81e	; 0xd81e <update_turret_shot>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    df28:	60 91 b2 0b 	lds	r22, 0x0BB2
    df2c:	70 91 b3 0b 	lds	r23, 0x0BB3
    df30:	80 91 b4 0b 	lds	r24, 0x0BB4
    df34:	90 91 b5 0b 	lds	r25, 0x0BB5
    df38:	0e 94 bb 68 	call	0xd176	; 0xd176 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    df3c:	60 91 a7 0b 	lds	r22, 0x0BA7
    df40:	80 91 b2 0b 	lds	r24, 0x0BB2
    df44:	90 91 b3 0b 	lds	r25, 0x0BB3
    df48:	0e 94 4e 6a 	call	0xd49c	; 0xd49c <collision_detect_player>
    df4c:	5c c0       	rjmp	.+184    	; 0xe006 <update_level+0x3b2>
		if (player_posture_changed(game.boss_fight_player)) send_smart_net_message(game.boss_fight_player, game.boss_fight_joypad, NETPOSCHANGE);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    df4e:	90 32       	cpi	r25, 0x20	; 32
    df50:	09 f0       	breq	.+2      	; 0xdf54 <update_level+0x300>
    df52:	6a c0       	rjmp	.+212    	; 0xe028 <update_level+0x3d4>
	{
		// Render
		record_player_posture(game.boss_fight_player);
    df54:	80 91 b2 0b 	lds	r24, 0x0BB2
    df58:	90 91 b3 0b 	lds	r25, 0x0BB3
    df5c:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <record_player_posture>
		render_boss_fight_sub_sinking();
    df60:	0e 94 2d 59 	call	0xb25a	; 0xb25a <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    df64:	60 e0       	ldi	r22, 0x00	; 0
    df66:	80 91 b2 0b 	lds	r24, 0x0BB2
    df6a:	90 91 b3 0b 	lds	r25, 0x0BB3
    df6e:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <tank_map>
    df72:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    df74:	40 e0       	ldi	r20, 0x00	; 0
    df76:	61 e5       	ldi	r22, 0x51	; 81
    df78:	71 e3       	ldi	r23, 0x31	; 49
    df7a:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		p1_shot_index = p2_index + 4;
    df7e:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    df80:	6c 2f       	mov	r22, r28
    df82:	80 91 b2 0b 	lds	r24, 0x0BB2
    df86:	90 91 b3 0b 	lds	r25, 0x0BB3
    df8a:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <shot_map>
    df8e:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    df90:	40 e0       	ldi	r20, 0x00	; 0
    df92:	67 e5       	ldi	r22, 0x57	; 87
    df94:	71 e3       	ldi	r23, 0x31	; 49
    df96:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    df9a:	6c 2f       	mov	r22, r28
    df9c:	80 91 b2 0b 	lds	r24, 0x0BB2
    dfa0:	90 91 b3 0b 	lds	r25, 0x0BB3
    dfa4:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <shot_map>
		render_player(game.boss_fight_player, p1_index);
    dfa8:	60 e0       	ldi	r22, 0x00	; 0
    dfaa:	80 91 b2 0b 	lds	r24, 0x0BB2
    dfae:	90 91 b3 0b 	lds	r25, 0x0BB3
    dfb2:	0e 94 d1 51 	call	0xa3a2	; 0xa3a2 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    dfb6:	6c 2f       	mov	r22, r28
    dfb8:	80 91 b2 0b 	lds	r24, 0x0BB2
    dfbc:	90 91 b3 0b 	lds	r25, 0x0BB3
    dfc0:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <render_shot>
		render_shot(&player2, p2_shot_index);
    dfc4:	6d 2f       	mov	r22, r29
    dfc6:	87 e4       	ldi	r24, 0x47	; 71
    dfc8:	9f e0       	ldi	r25, 0x0F	; 15
    dfca:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <render_shot>
		render_tile_explosions(&tile_animations);
    dfce:	87 eb       	ldi	r24, 0xB7	; 183
    dfd0:	9b e0       	ldi	r25, 0x0B	; 11
    dfd2:	0e 94 26 52 	call	0xa44c	; 0xa44c <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    dfd6:	60 91 b2 0b 	lds	r22, 0x0BB2
    dfda:	70 91 b3 0b 	lds	r23, 0x0BB3
    dfde:	80 91 b4 0b 	lds	r24, 0x0BB4
    dfe2:	90 91 b5 0b 	lds	r25, 0x0BB5
    dfe6:	0e 94 bb 68 	call	0xd176	; 0xd176 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    dfea:	60 91 a7 0b 	lds	r22, 0x0BA7
    dfee:	80 91 b2 0b 	lds	r24, 0x0BB2
    dff2:	90 91 b3 0b 	lds	r25, 0x0BB3
    dff6:	0e 94 4e 6a 	call	0xd49c	; 0xd49c <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    dffa:	80 91 a6 0b 	lds	r24, 0x0BA6
    dffe:	80 32       	cpi	r24, 0x20	; 32
    e000:	11 f0       	breq	.+4      	; 0xe006 <update_level+0x3b2>
		{
			resolve_scoring();
    e002:	0e 94 1d 5b 	call	0xb63a	; 0xb63a <resolve_scoring>
		}
		if (player_posture_changed(game.boss_fight_player)) send_smart_net_message(game.boss_fight_player, game.boss_fight_joypad, NETPOSCHANGE);
    e006:	c0 91 b2 0b 	lds	r28, 0x0BB2
    e00a:	d0 91 b3 0b 	lds	r29, 0x0BB3
    e00e:	ce 01       	movw	r24, r28
    e010:	0e 94 18 6e 	call	0xdc30	; 0xdc30 <player_posture_changed>
    e014:	88 23       	and	r24, r24
    e016:	09 f4       	brne	.+2      	; 0xe01a <update_level+0x3c6>
    e018:	a8 c0       	rjmp	.+336    	; 0xe16a <update_level+0x516>
    e01a:	60 91 b4 0b 	lds	r22, 0x0BB4
    e01e:	70 91 b5 0b 	lds	r23, 0x0BB5
    e022:	46 e0       	ldi	r20, 0x06	; 6
    e024:	ce 01       	movw	r24, r28
    e026:	9f c0       	rjmp	.+318    	; 0xe166 <update_level+0x512>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    e028:	90 31       	cpi	r25, 0x10	; 16
    e02a:	19 f4       	brne	.+6      	; 0xe032 <update_level+0x3de>
	{
		resolve_scoring();
    e02c:	0e 94 1d 5b 	call	0xb63a	; 0xb63a <resolve_scoring>
    e030:	9c c0       	rjmp	.+312    	; 0xe16a <update_level+0x516>
	}
	else if (game.boss_fight_status == 0)
    e032:	91 11       	cpse	r25, r1
    e034:	9a c0       	rjmp	.+308    	; 0xe16a <update_level+0x516>
	{
		record_player_posture(&player1);
    e036:	85 ed       	ldi	r24, 0xD5	; 213
    e038:	9b e0       	ldi	r25, 0x0B	; 11
    e03a:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <record_player_posture>
		record_player_posture(&player2);
    e03e:	87 e4       	ldi	r24, 0x47	; 71
    e040:	9f e0       	ldi	r25, 0x0F	; 15
    e042:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <record_player_posture>
		p2_index = tank_map(&player1, p1_index);
    e046:	60 e0       	ldi	r22, 0x00	; 0
    e048:	85 ed       	ldi	r24, 0xD5	; 213
    e04a:	9b e0       	ldi	r25, 0x0B	; 11
    e04c:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <tank_map>
    e050:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    e052:	68 2f       	mov	r22, r24
    e054:	87 e4       	ldi	r24, 0x47	; 71
    e056:	9f e0       	ldi	r25, 0x0F	; 15
    e058:	0e 94 75 52 	call	0xa4ea	; 0xa4ea <tank_map>
    e05c:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    e05e:	68 2f       	mov	r22, r24
    e060:	85 ed       	ldi	r24, 0xD5	; 213
    e062:	9b e0       	ldi	r25, 0x0B	; 11
    e064:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <shot_map>
    e068:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    e06a:	68 2f       	mov	r22, r24
    e06c:	87 e4       	ldi	r24, 0x47	; 71
    e06e:	9f e0       	ldi	r25, 0x0F	; 15
    e070:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <shot_map>
		render_player(&player1, p1_index);
    e074:	60 e0       	ldi	r22, 0x00	; 0
    e076:	85 ed       	ldi	r24, 0xD5	; 213
    e078:	9b e0       	ldi	r25, 0x0B	; 11
    e07a:	0e 94 d1 51 	call	0xa3a2	; 0xa3a2 <render_player>
		render_player(&player2, p2_index);
    e07e:	6d 2d       	mov	r22, r13
    e080:	87 e4       	ldi	r24, 0x47	; 71
    e082:	9f e0       	ldi	r25, 0x0F	; 15
    e084:	0e 94 d1 51 	call	0xa3a2	; 0xa3a2 <render_player>
		render_shot(&player1, p1_shot_index);
    e088:	6e 2d       	mov	r22, r14
    e08a:	85 ed       	ldi	r24, 0xD5	; 213
    e08c:	9b e0       	ldi	r25, 0x0B	; 11
    e08e:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <render_shot>
		render_shot(&player2, p2_shot_index);
    e092:	6f 2d       	mov	r22, r15
    e094:	87 e4       	ldi	r24, 0x47	; 71
    e096:	9f e0       	ldi	r25, 0x0F	; 15
    e098:	0e 94 fa 51 	call	0xa3f4	; 0xa3f4 <render_shot>
		render_tile_explosions(&tile_animations);
    e09c:	87 eb       	ldi	r24, 0xB7	; 183
    e09e:	9b e0       	ldi	r25, 0x0B	; 11
    e0a0:	0e 94 26 52 	call	0xa44c	; 0xa44c <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    e0a4:	80 91 ae 0b 	lds	r24, 0x0BAE
    e0a8:	90 91 af 0b 	lds	r25, 0x0BAF
    e0ac:	89 3e       	cpi	r24, 0xE9	; 233
    e0ae:	93 40       	sbci	r25, 0x03	; 3
    e0b0:	88 f0       	brcs	.+34     	; 0xe0d4 <update_level+0x480>
    e0b2:	80 91 dd 0f 	lds	r24, 0x0FDD
    e0b6:	90 91 de 0f 	lds	r25, 0x0FDE
    e0ba:	18 16       	cp	r1, r24
    e0bc:	19 06       	cpc	r1, r25
    e0be:	54 f4       	brge	.+20     	; 0xe0d4 <update_level+0x480>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    e0c0:	81 ed       	ldi	r24, 0xD1	; 209
    e0c2:	9f e0       	ldi	r25, 0x0F	; 15
    e0c4:	0e 94 5b 52 	call	0xa4b6	; 0xa4b6 <render_scope>
    e0c8:	88 23       	and	r24, r24
    e0ca:	21 f0       	breq	.+8      	; 0xe0d4 <update_level+0x480>
    e0cc:	10 92 af 0b 	sts	0x0BAF, r1
    e0d0:	10 92 ae 0b 	sts	0x0BAE, r1
		}
		game.scope_counter++;
    e0d4:	80 91 ae 0b 	lds	r24, 0x0BAE
    e0d8:	90 91 af 0b 	lds	r25, 0x0BAF
    e0dc:	01 96       	adiw	r24, 0x01	; 1
    e0de:	90 93 af 0b 	sts	0x0BAF, r25
    e0e2:	80 93 ae 0b 	sts	0x0BAE, r24
		
		// Update
		update_player(p1, &player1);
    e0e6:	65 ed       	ldi	r22, 0xD5	; 213
    e0e8:	7b e0       	ldi	r23, 0x0B	; 11
    e0ea:	c8 01       	movw	r24, r16
    e0ec:	0e 94 bb 68 	call	0xd176	; 0xd176 <update_player>
		update_player(p2, &player2);
    e0f0:	67 e4       	ldi	r22, 0x47	; 71
    e0f2:	7f e0       	ldi	r23, 0x0F	; 15
    e0f4:	ce 01       	movw	r24, r28
    e0f6:	0e 94 bb 68 	call	0xd176	; 0xd176 <update_player>
		resolve_scoring();
    e0fa:	0e 94 1d 5b 	call	0xb63a	; 0xb63a <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    e0fe:	60 e0       	ldi	r22, 0x00	; 0
    e100:	85 ed       	ldi	r24, 0xD5	; 213
    e102:	9b e0       	ldi	r25, 0x0B	; 11
    e104:	0e 94 4e 6a 	call	0xd49c	; 0xd49c <collision_detect_player>
    e108:	88 23       	and	r24, r24
    e10a:	41 f0       	breq	.+16     	; 0xe11c <update_level+0x4c8>
    e10c:	2f e0       	ldi	r18, 0x0F	; 15
    e10e:	40 e0       	ldi	r20, 0x00	; 0
    e110:	67 e4       	ldi	r22, 0x47	; 71
    e112:	7f e0       	ldi	r23, 0x0F	; 15
    e114:	85 ed       	ldi	r24, 0xD5	; 213
    e116:	9b e0       	ldi	r25, 0x0B	; 11
    e118:	0e 94 b8 56 	call	0xad70	; 0xad70 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    e11c:	6f e0       	ldi	r22, 0x0F	; 15
    e11e:	87 e4       	ldi	r24, 0x47	; 71
    e120:	9f e0       	ldi	r25, 0x0F	; 15
    e122:	0e 94 4e 6a 	call	0xd49c	; 0xd49c <collision_detect_player>
    e126:	88 23       	and	r24, r24
    e128:	41 f0       	breq	.+16     	; 0xe13a <update_level+0x4e6>
    e12a:	20 e0       	ldi	r18, 0x00	; 0
    e12c:	4f e0       	ldi	r20, 0x0F	; 15
    e12e:	65 ed       	ldi	r22, 0xD5	; 213
    e130:	7b e0       	ldi	r23, 0x0B	; 11
    e132:	87 e4       	ldi	r24, 0x47	; 71
    e134:	9f e0       	ldi	r25, 0x0F	; 15
    e136:	0e 94 b8 56 	call	0xad70	; 0xad70 <explode_player>
		if (player_posture_changed(&player1)) send_smart_net_message(&player1, p1, NETPOSCHANGE);
    e13a:	85 ed       	ldi	r24, 0xD5	; 213
    e13c:	9b e0       	ldi	r25, 0x0B	; 11
    e13e:	0e 94 18 6e 	call	0xdc30	; 0xdc30 <player_posture_changed>
    e142:	88 23       	and	r24, r24
    e144:	31 f0       	breq	.+12     	; 0xe152 <update_level+0x4fe>
    e146:	46 e0       	ldi	r20, 0x06	; 6
    e148:	b8 01       	movw	r22, r16
    e14a:	85 ed       	ldi	r24, 0xD5	; 213
    e14c:	9b e0       	ldi	r25, 0x0B	; 11
    e14e:	0e 94 1e 65 	call	0xca3c	; 0xca3c <send_smart_net_message>
		if (player_posture_changed(&player2)) send_smart_net_message(&player2, p2, NETPOSCHANGE);
    e152:	87 e4       	ldi	r24, 0x47	; 71
    e154:	9f e0       	ldi	r25, 0x0F	; 15
    e156:	0e 94 18 6e 	call	0xdc30	; 0xdc30 <player_posture_changed>
    e15a:	88 23       	and	r24, r24
    e15c:	31 f0       	breq	.+12     	; 0xe16a <update_level+0x516>
    e15e:	46 e0       	ldi	r20, 0x06	; 6
    e160:	be 01       	movw	r22, r28
    e162:	87 e4       	ldi	r24, 0x47	; 71
    e164:	9f e0       	ldi	r25, 0x0F	; 15
    e166:	0e 94 1e 65 	call	0xca3c	; 0xca3c <send_smart_net_message>
	}
	
	if (game.selection == CPUVCPU) 
    e16a:	80 91 b6 0b 	lds	r24, 0x0BB6
    e16e:	86 30       	cpi	r24, 0x06	; 6
    e170:	71 f5       	brne	.+92     	; 0xe1ce <update_level+0x57a>
	{
		game.demo_counter++;
    e172:	80 91 ac 0b 	lds	r24, 0x0BAC
    e176:	90 91 ad 0b 	lds	r25, 0x0BAD
    e17a:	01 96       	adiw	r24, 0x01	; 1
    e17c:	90 93 ad 0b 	sts	0x0BAD, r25
    e180:	80 93 ac 0b 	sts	0x0BAC, r24
		held = ReadJoypad(0);
    e184:	80 e0       	ldi	r24, 0x00	; 0
    e186:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    e18a:	80 e0       	ldi	r24, 0x00	; 0
    e18c:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <ReadJoypad>
    e190:	89 2b       	or	r24, r25
    e192:	89 f0       	breq	.+34     	; 0xe1b6 <update_level+0x562>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    e194:	10 92 ad 0b 	sts	0x0BAD, r1
    e198:	10 92 ac 0b 	sts	0x0BAC, r1
			fade_through();
    e19c:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <fade_through>
			init_game_state();
    e1a0:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <init_game_state>
			load_splash();
#endif
		}
	}
}
    e1a4:	df 91       	pop	r29
    e1a6:	cf 91       	pop	r28
    e1a8:	1f 91       	pop	r17
    e1aa:	0f 91       	pop	r16
    e1ac:	ff 90       	pop	r15
    e1ae:	ef 90       	pop	r14
    e1b0:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    e1b2:	0c 94 26 5a 	jmp	0xb44c	; 0xb44c <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    e1b6:	81 e0       	ldi	r24, 0x01	; 1
    e1b8:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <ReadJoypad>
    e1bc:	89 2b       	or	r24, r25
    e1be:	51 f7       	brne	.-44     	; 0xe194 <update_level+0x540>
    e1c0:	80 91 ac 0b 	lds	r24, 0x0BAC
    e1c4:	90 91 ad 0b 	lds	r25, 0x0BAD
    e1c8:	88 30       	cpi	r24, 0x08	; 8
    e1ca:	97 40       	sbci	r25, 0x07	; 7
    e1cc:	18 f7       	brcc	.-58     	; 0xe194 <update_level+0x540>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    e1ce:	df 91       	pop	r29
    e1d0:	cf 91       	pop	r28
    e1d2:	1f 91       	pop	r17
    e1d4:	0f 91       	pop	r16
    e1d6:	ff 90       	pop	r15
    e1d8:	ef 90       	pop	r14
    e1da:	df 90       	pop	r13
    e1dc:	08 95       	ret

0000e1de <main>:
}

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    e1de:	0e 94 a7 3a 	call	0x754e	; 0x754e <GetTrueRandomSeed>
    e1e2:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e1e6:	85 e4       	ldi	r24, 0x45	; 69
    e1e8:	95 e0       	ldi	r25, 0x05	; 5
    e1ea:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <InitMusicPlayer>
	SetMasterVolume(0xff);
    e1ee:	8f ef       	ldi	r24, 0xFF	; 255
    e1f0:	0e 94 8a 40 	call	0x8114	; 0x8114 <SetMasterVolume>
	SetTileTable(tiles_data);
    e1f4:	8a e5       	ldi	r24, 0x5A	; 90
    e1f6:	91 e3       	ldi	r25, 0x31	; 49
    e1f8:	0e 94 40 3a 	call	0x7480	; 0x7480 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e1fc:	89 ec       	ldi	r24, 0xC9	; 201
    e1fe:	97 e2       	ldi	r25, 0x27	; 39
    e200:	0e 94 1c 3a 	call	0x7438	; 0x7438 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    e204:	8b e9       	ldi	r24, 0x9B	; 155
    e206:	0e 94 3d 3a 	call	0x747a	; 0x747a <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    e20a:	60 e0       	ldi	r22, 0x00	; 0
    e20c:	83 e0       	ldi	r24, 0x03	; 3
    e20e:	0e 94 2f 49 	call	0x925e	; 0x925e <FadeIn>
	ClearVram();
    e212:	0e 94 21 3a 	call	0x7442	; 0x7442 <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    e216:	86 e5       	ldi	r24, 0x56	; 86
    e218:	9b e0       	ldi	r25, 0x0B	; 11
    e21a:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <init_scores>
	init_handles(&handles);
    e21e:	83 e8       	ldi	r24, 0x83	; 131
    e220:	9b e0       	ldi	r25, 0x0B	; 11
    e222:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <init_handles>
	init_game_state();
    e226:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <init_game_state>
	load_credits();
    e22a:	0e 94 7b 64 	call	0xc8f6	; 0xc8f6 <load_credits>
	load_splash();
    e22e:	0e 94 26 5a 	call	0xb44c	; 0xb44c <load_splash>
	
	while (1)
	{
		waitForVSync();
    e232:	0e 94 b2 4f 	call	0x9f64	; 0x9f64 <waitForVSync>
		get_net_message();
    e236:	0e 94 31 65 	call	0xca62	; 0xca62 <get_net_message>
		switch (game.current_screen)
    e23a:	80 91 a3 0b 	lds	r24, 0x0BA3
    e23e:	82 30       	cpi	r24, 0x02	; 2
    e240:	71 f1       	breq	.+92     	; 0xe29e <main+0xc0>
    e242:	78 f4       	brcc	.+30     	; 0xe262 <main+0x84>
    e244:	88 23       	and	r24, r24
    e246:	f9 f0       	breq	.+62     	; 0xe286 <main+0xa8>
    e248:	81 30       	cpi	r24, 0x01	; 1
    e24a:	09 f0       	breq	.+2      	; 0xe24e <main+0x70>
    e24c:	e2 c0       	rjmp	.+452    	; 0xe412 <main+0x234>
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
				update_splash(&p1, &p2);
				break;
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    e24e:	60 e0       	ldi	r22, 0x00	; 0
    e250:	81 e5       	ldi	r24, 0x51	; 81
    e252:	9c e0       	ldi	r25, 0x0C	; 12
    e254:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
				update_tank_rank(&p1);
    e258:	81 e5       	ldi	r24, 0x51	; 81
    e25a:	9c e0       	ldi	r25, 0x0C	; 12
    e25c:	0e 94 e2 5b 	call	0xb7c4	; 0xb7c4 <update_tank_rank>
				break;
    e260:	d8 c0       	rjmp	.+432    	; 0xe412 <main+0x234>
	
	while (1)
	{
		waitForVSync();
		get_net_message();
		switch (game.current_screen)
    e262:	84 30       	cpi	r24, 0x04	; 4
    e264:	09 f4       	brne	.+2      	; 0xe268 <main+0x8a>
    e266:	66 c0       	rjmp	.+204    	; 0xe334 <main+0x156>
    e268:	08 f4       	brcc	.+2      	; 0xe26c <main+0x8e>
    e26a:	6e c0       	rjmp	.+220    	; 0xe348 <main+0x16a>
    e26c:	85 30       	cpi	r24, 0x05	; 5
    e26e:	09 f0       	breq	.+2      	; 0xe272 <main+0x94>
    e270:	d0 c0       	rjmp	.+416    	; 0xe412 <main+0x234>
			case HOST_NET_GAME:
				LBGetJoyPadState(&p1, 0);
				update_host_net_game(&p1);
				break;
			case JOIN_NET_GAME:
				LBGetJoyPadState(&p1, 0);
    e272:	60 e0       	ldi	r22, 0x00	; 0
    e274:	81 e5       	ldi	r24, 0x51	; 81
    e276:	9c e0       	ldi	r25, 0x0C	; 12
    e278:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
				update_join_net_game(&p1);
    e27c:	81 e5       	ldi	r24, 0x51	; 81
    e27e:	9c e0       	ldi	r25, 0x0C	; 12
    e280:	0e 94 61 5f 	call	0xbec2	; 0xbec2 <update_join_net_game>
				break;
    e284:	c6 c0       	rjmp	.+396    	; 0xe412 <main+0x234>
		waitForVSync();
		get_net_message();
		switch (game.current_screen)
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    e286:	60 e0       	ldi	r22, 0x00	; 0
    e288:	81 e5       	ldi	r24, 0x51	; 81
    e28a:	9c e0       	ldi	r25, 0x0C	; 12
    e28c:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
				update_splash(&p1, &p2);
    e290:	66 e7       	ldi	r22, 0x76	; 118
    e292:	7b e0       	ldi	r23, 0x0B	; 11
    e294:	81 e5       	ldi	r24, 0x51	; 81
    e296:	9c e0       	ldi	r25, 0x0C	; 12
    e298:	0e 94 29 5e 	call	0xbc52	; 0xbc52 <update_splash>
				break;
    e29c:	ba c0       	rjmp	.+372    	; 0xe412 <main+0x234>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
				update_tank_rank(&p1);
				break;
			case HANDLE_SELECT:
				if (game.selection == HOSTNETGAME)
    e29e:	80 91 b6 0b 	lds	r24, 0x0BB6
    e2a2:	82 30       	cpi	r24, 0x02	; 2
    e2a4:	e1 f4       	brne	.+56     	; 0xe2de <main+0x100>
				{
					LBGetJoyPadState(&p1, 0);
    e2a6:	60 e0       	ldi	r22, 0x00	; 0
    e2a8:	81 e5       	ldi	r24, 0x51	; 81
    e2aa:	9c e0       	ldi	r25, 0x0C	; 12
    e2ac:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
void LBGetJoyPadStateNet(JoyPadState* p, unsigned char index, NetMessage* netMessage)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = netMessage->held;
    e2b0:	80 91 e0 0f 	lds	r24, 0x0FE0
    e2b4:	90 91 e1 0f 	lds	r25, 0x0FE1
    e2b8:	90 93 7b 0b 	sts	0x0B7B, r25
    e2bc:	80 93 7a 0b 	sts	0x0B7A, r24
	p->pressed = netMessage->pressed;
    e2c0:	80 91 e2 0f 	lds	r24, 0x0FE2
    e2c4:	90 91 e3 0f 	lds	r25, 0x0FE3
    e2c8:	90 93 77 0b 	sts	0x0B77, r25
    e2cc:	80 93 76 0b 	sts	0x0B76, r24
	p->held_cycles = 0;
    e2d0:	10 92 7c 0b 	sts	0x0B7C, r1
	p->released = 0;
    e2d4:	10 92 79 0b 	sts	0x0B79, r1
    e2d8:	10 92 78 0b 	sts	0x0B78, r1
    e2dc:	24 c0       	rjmp	.+72     	; 0xe326 <main+0x148>
					LBGetJoyPadStateNet(&p2, 1, &netMessage);
				}
				else if (game.selection == JOINNETGAME)
    e2de:	83 30       	cpi	r24, 0x03	; 3
    e2e0:	c1 f4       	brne	.+48     	; 0xe312 <main+0x134>
void LBGetJoyPadStateNet(JoyPadState* p, unsigned char index, NetMessage* netMessage)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = netMessage->held;
    e2e2:	80 91 e0 0f 	lds	r24, 0x0FE0
    e2e6:	90 91 e1 0f 	lds	r25, 0x0FE1
    e2ea:	90 93 56 0c 	sts	0x0C56, r25
    e2ee:	80 93 55 0c 	sts	0x0C55, r24
	p->pressed = netMessage->pressed;
    e2f2:	80 91 e2 0f 	lds	r24, 0x0FE2
    e2f6:	90 91 e3 0f 	lds	r25, 0x0FE3
    e2fa:	90 93 52 0c 	sts	0x0C52, r25
    e2fe:	80 93 51 0c 	sts	0x0C51, r24
	p->held_cycles = 0;
    e302:	10 92 57 0c 	sts	0x0C57, r1
	p->released = 0;
    e306:	10 92 54 0c 	sts	0x0C54, r1
    e30a:	10 92 53 0c 	sts	0x0C53, r1
				{
					LBGetJoyPadStateNet(&p1, 1, &netMessage);
					LBGetJoyPadState(&p2, 0);
    e30e:	60 e0       	ldi	r22, 0x00	; 0
    e310:	06 c0       	rjmp	.+12     	; 0xe31e <main+0x140>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e312:	60 e0       	ldi	r22, 0x00	; 0
    e314:	81 e5       	ldi	r24, 0x51	; 81
    e316:	9c e0       	ldi	r25, 0x0C	; 12
    e318:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e31c:	61 e0       	ldi	r22, 0x01	; 1
    e31e:	86 e7       	ldi	r24, 0x76	; 118
    e320:	9b e0       	ldi	r25, 0x0B	; 11
    e322:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
				}
				update_handle_select(&p1, &p2);
    e326:	66 e7       	ldi	r22, 0x76	; 118
    e328:	7b e0       	ldi	r23, 0x0B	; 11
    e32a:	81 e5       	ldi	r24, 0x51	; 81
    e32c:	9c e0       	ldi	r25, 0x0C	; 12
    e32e:	0e 94 b2 6d 	call	0xdb64	; 0xdb64 <update_handle_select>
				break;
    e332:	6f c0       	rjmp	.+222    	; 0xe412 <main+0x234>
#if JAMMA
#else
			case HOST_NET_GAME:
				LBGetJoyPadState(&p1, 0);
    e334:	60 e0       	ldi	r22, 0x00	; 0
    e336:	81 e5       	ldi	r24, 0x51	; 81
    e338:	9c e0       	ldi	r25, 0x0C	; 12
    e33a:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
				update_host_net_game(&p1);
    e33e:	81 e5       	ldi	r24, 0x51	; 81
    e340:	9c e0       	ldi	r25, 0x0C	; 12
    e342:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <update_host_net_game>
				break;
    e346:	65 c0       	rjmp	.+202    	; 0xe412 <main+0x234>
				LBGetJoyPadState(&p1, 0);
				update_join_net_game(&p1);
				break;
#endif
			case LEVEL:
				if (game.selection == PVCPU)
    e348:	80 91 b6 0b 	lds	r24, 0x0BB6
    e34c:	81 11       	cpse	r24, r1
    e34e:	06 c0       	rjmp	.+12     	; 0xe35c <main+0x17e>
				{
					LBGetJoyPadState(&p1, 0);
    e350:	60 e0       	ldi	r22, 0x00	; 0
    e352:	81 e5       	ldi	r24, 0x51	; 81
    e354:	9c e0       	ldi	r25, 0x0C	; 12
    e356:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
    e35a:	0a c0       	rjmp	.+20     	; 0xe370 <main+0x192>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    e35c:	86 30       	cpi	r24, 0x06	; 6
    e35e:	89 f4       	brne	.+34     	; 0xe382 <main+0x1a4>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    e360:	41 e5       	ldi	r20, 0x51	; 81
    e362:	5c e0       	ldi	r21, 0x0C	; 12
    e364:	67 e4       	ldi	r22, 0x47	; 71
    e366:	7f e0       	ldi	r23, 0x0F	; 15
    e368:	85 ed       	ldi	r24, 0xD5	; 213
    e36a:	9b e0       	ldi	r25, 0x0B	; 11
    e36c:	0e 94 87 61 	call	0xc30e	; 0xc30e <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    e370:	46 e7       	ldi	r20, 0x76	; 118
    e372:	5b e0       	ldi	r21, 0x0B	; 11
    e374:	65 ed       	ldi	r22, 0xD5	; 213
    e376:	7b e0       	ldi	r23, 0x0B	; 11
    e378:	87 e4       	ldi	r24, 0x47	; 71
    e37a:	9f e0       	ldi	r25, 0x0F	; 15
    e37c:	0e 94 87 61 	call	0xc30e	; 0xc30e <get_cpu_joypad_state>
    e380:	42 c0       	rjmp	.+132    	; 0xe406 <main+0x228>
				}
				else if (game.selection == HOSTNETGAME)
    e382:	82 30       	cpi	r24, 0x02	; 2
    e384:	e1 f4       	brne	.+56     	; 0xe3be <main+0x1e0>
				{
					LBGetJoyPadState(&p1, 0);
    e386:	60 e0       	ldi	r22, 0x00	; 0
    e388:	81 e5       	ldi	r24, 0x51	; 81
    e38a:	9c e0       	ldi	r25, 0x0C	; 12
    e38c:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
void LBGetJoyPadStateNet(JoyPadState* p, unsigned char index, NetMessage* netMessage)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = netMessage->held;
    e390:	80 91 e0 0f 	lds	r24, 0x0FE0
    e394:	90 91 e1 0f 	lds	r25, 0x0FE1
    e398:	90 93 7b 0b 	sts	0x0B7B, r25
    e39c:	80 93 7a 0b 	sts	0x0B7A, r24
	p->pressed = netMessage->pressed;
    e3a0:	80 91 e2 0f 	lds	r24, 0x0FE2
    e3a4:	90 91 e3 0f 	lds	r25, 0x0FE3
    e3a8:	90 93 77 0b 	sts	0x0B77, r25
    e3ac:	80 93 76 0b 	sts	0x0B76, r24
	p->held_cycles = 0;
    e3b0:	10 92 7c 0b 	sts	0x0B7C, r1
	p->released = 0;
    e3b4:	10 92 79 0b 	sts	0x0B79, r1
    e3b8:	10 92 78 0b 	sts	0x0B78, r1
    e3bc:	24 c0       	rjmp	.+72     	; 0xe406 <main+0x228>
					LBGetJoyPadStateNet(&p2, 1, &netMessage);
				}
				else if (game.selection == JOINNETGAME)
    e3be:	83 30       	cpi	r24, 0x03	; 3
    e3c0:	c1 f4       	brne	.+48     	; 0xe3f2 <main+0x214>
void LBGetJoyPadStateNet(JoyPadState* p, unsigned char index, NetMessage* netMessage)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = netMessage->held;
    e3c2:	80 91 e0 0f 	lds	r24, 0x0FE0
    e3c6:	90 91 e1 0f 	lds	r25, 0x0FE1
    e3ca:	90 93 56 0c 	sts	0x0C56, r25
    e3ce:	80 93 55 0c 	sts	0x0C55, r24
	p->pressed = netMessage->pressed;
    e3d2:	80 91 e2 0f 	lds	r24, 0x0FE2
    e3d6:	90 91 e3 0f 	lds	r25, 0x0FE3
    e3da:	90 93 52 0c 	sts	0x0C52, r25
    e3de:	80 93 51 0c 	sts	0x0C51, r24
	p->held_cycles = 0;
    e3e2:	10 92 57 0c 	sts	0x0C57, r1
	p->released = 0;
    e3e6:	10 92 54 0c 	sts	0x0C54, r1
    e3ea:	10 92 53 0c 	sts	0x0C53, r1
				{
					LBGetJoyPadStateNet(&p1, 1, &netMessage);
					LBGetJoyPadState(&p2, 0);
    e3ee:	60 e0       	ldi	r22, 0x00	; 0
    e3f0:	06 c0       	rjmp	.+12     	; 0xe3fe <main+0x220>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e3f2:	60 e0       	ldi	r22, 0x00	; 0
    e3f4:	81 e5       	ldi	r24, 0x51	; 81
    e3f6:	9c e0       	ldi	r25, 0x0C	; 12
    e3f8:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e3fc:	61 e0       	ldi	r22, 0x01	; 1
    e3fe:	86 e7       	ldi	r24, 0x76	; 118
    e400:	9b e0       	ldi	r25, 0x0B	; 11
    e402:	0e 94 41 4c 	call	0x9882	; 0x9882 <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    e406:	66 e7       	ldi	r22, 0x76	; 118
    e408:	7b e0       	ldi	r23, 0x0B	; 11
    e40a:	81 e5       	ldi	r24, 0x51	; 81
    e40c:	9c e0       	ldi	r25, 0x0C	; 12
    e40e:	0e 94 2a 6e 	call	0xdc54	; 0xdc54 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e412:	80 91 01 01 	lds	r24, 0x0101
    e416:	90 91 02 01 	lds	r25, 0x0102
    e41a:	01 96       	adiw	r24, 0x01	; 1
    e41c:	90 93 02 01 	sts	0x0102, r25
    e420:	80 93 01 01 	sts	0x0101, r24
	}
    e424:	06 cf       	rjmp	.-500    	; 0xe232 <main+0x54>

0000e426 <__udivmodqi4>:
    e426:	99 1b       	sub	r25, r25
    e428:	79 e0       	ldi	r23, 0x09	; 9
    e42a:	04 c0       	rjmp	.+8      	; 0xe434 <__udivmodqi4_ep>

0000e42c <__udivmodqi4_loop>:
    e42c:	99 1f       	adc	r25, r25
    e42e:	96 17       	cp	r25, r22
    e430:	08 f0       	brcs	.+2      	; 0xe434 <__udivmodqi4_ep>
    e432:	96 1b       	sub	r25, r22

0000e434 <__udivmodqi4_ep>:
    e434:	88 1f       	adc	r24, r24
    e436:	7a 95       	dec	r23
    e438:	c9 f7       	brne	.-14     	; 0xe42c <__udivmodqi4_loop>
    e43a:	80 95       	com	r24
    e43c:	08 95       	ret

0000e43e <__divmodqi4>:
    e43e:	87 fb       	bst	r24, 7
    e440:	08 2e       	mov	r0, r24
    e442:	06 26       	eor	r0, r22
    e444:	87 fd       	sbrc	r24, 7
    e446:	81 95       	neg	r24
    e448:	67 fd       	sbrc	r22, 7
    e44a:	61 95       	neg	r22
    e44c:	0e 94 13 72 	call	0xe426	; 0xe426 <__udivmodqi4>
    e450:	0e f4       	brtc	.+2      	; 0xe454 <__divmodqi4_1>
    e452:	91 95       	neg	r25

0000e454 <__divmodqi4_1>:
    e454:	07 fc       	sbrc	r0, 7
    e456:	81 95       	neg	r24

0000e458 <__divmodqi4_exit>:
    e458:	08 95       	ret

0000e45a <__udivmodhi4>:
    e45a:	aa 1b       	sub	r26, r26
    e45c:	bb 1b       	sub	r27, r27
    e45e:	51 e1       	ldi	r21, 0x11	; 17
    e460:	07 c0       	rjmp	.+14     	; 0xe470 <__udivmodhi4_ep>

0000e462 <__udivmodhi4_loop>:
    e462:	aa 1f       	adc	r26, r26
    e464:	bb 1f       	adc	r27, r27
    e466:	a6 17       	cp	r26, r22
    e468:	b7 07       	cpc	r27, r23
    e46a:	10 f0       	brcs	.+4      	; 0xe470 <__udivmodhi4_ep>
    e46c:	a6 1b       	sub	r26, r22
    e46e:	b7 0b       	sbc	r27, r23

0000e470 <__udivmodhi4_ep>:
    e470:	88 1f       	adc	r24, r24
    e472:	99 1f       	adc	r25, r25
    e474:	5a 95       	dec	r21
    e476:	a9 f7       	brne	.-22     	; 0xe462 <__udivmodhi4_loop>
    e478:	80 95       	com	r24
    e47a:	90 95       	com	r25
    e47c:	bc 01       	movw	r22, r24
    e47e:	cd 01       	movw	r24, r26
    e480:	08 95       	ret

0000e482 <__divmodhi4>:
    e482:	97 fb       	bst	r25, 7
    e484:	07 2e       	mov	r0, r23
    e486:	16 f4       	brtc	.+4      	; 0xe48c <__divmodhi4+0xa>
    e488:	00 94       	com	r0
    e48a:	07 d0       	rcall	.+14     	; 0xe49a <__divmodhi4_neg1>
    e48c:	77 fd       	sbrc	r23, 7
    e48e:	09 d0       	rcall	.+18     	; 0xe4a2 <__divmodhi4_neg2>
    e490:	0e 94 2d 72 	call	0xe45a	; 0xe45a <__udivmodhi4>
    e494:	07 fc       	sbrc	r0, 7
    e496:	05 d0       	rcall	.+10     	; 0xe4a2 <__divmodhi4_neg2>
    e498:	3e f4       	brtc	.+14     	; 0xe4a8 <__divmodhi4_exit>

0000e49a <__divmodhi4_neg1>:
    e49a:	90 95       	com	r25
    e49c:	81 95       	neg	r24
    e49e:	9f 4f       	sbci	r25, 0xFF	; 255
    e4a0:	08 95       	ret

0000e4a2 <__divmodhi4_neg2>:
    e4a2:	70 95       	com	r23
    e4a4:	61 95       	neg	r22
    e4a6:	7f 4f       	sbci	r23, 0xFF	; 255

0000e4a8 <__divmodhi4_exit>:
    e4a8:	08 95       	ret

0000e4aa <__subsf3>:
    e4aa:	50 58       	subi	r21, 0x80	; 128

0000e4ac <__addsf3>:
    e4ac:	bb 27       	eor	r27, r27
    e4ae:	aa 27       	eor	r26, r26
    e4b0:	0e d0       	rcall	.+28     	; 0xe4ce <__addsf3x>
    e4b2:	75 c1       	rjmp	.+746    	; 0xe79e <__fp_round>
    e4b4:	66 d1       	rcall	.+716    	; 0xe782 <__fp_pscA>
    e4b6:	30 f0       	brcs	.+12     	; 0xe4c4 <__addsf3+0x18>
    e4b8:	6b d1       	rcall	.+726    	; 0xe790 <__fp_pscB>
    e4ba:	20 f0       	brcs	.+8      	; 0xe4c4 <__addsf3+0x18>
    e4bc:	31 f4       	brne	.+12     	; 0xe4ca <__addsf3+0x1e>
    e4be:	9f 3f       	cpi	r25, 0xFF	; 255
    e4c0:	11 f4       	brne	.+4      	; 0xe4c6 <__addsf3+0x1a>
    e4c2:	1e f4       	brtc	.+6      	; 0xe4ca <__addsf3+0x1e>
    e4c4:	5b c1       	rjmp	.+694    	; 0xe77c <__fp_nan>
    e4c6:	0e f4       	brtc	.+2      	; 0xe4ca <__addsf3+0x1e>
    e4c8:	e0 95       	com	r30
    e4ca:	e7 fb       	bst	r30, 7
    e4cc:	51 c1       	rjmp	.+674    	; 0xe770 <__fp_inf>

0000e4ce <__addsf3x>:
    e4ce:	e9 2f       	mov	r30, r25
    e4d0:	77 d1       	rcall	.+750    	; 0xe7c0 <__fp_split3>
    e4d2:	80 f3       	brcs	.-32     	; 0xe4b4 <__addsf3+0x8>
    e4d4:	ba 17       	cp	r27, r26
    e4d6:	62 07       	cpc	r22, r18
    e4d8:	73 07       	cpc	r23, r19
    e4da:	84 07       	cpc	r24, r20
    e4dc:	95 07       	cpc	r25, r21
    e4de:	18 f0       	brcs	.+6      	; 0xe4e6 <__addsf3x+0x18>
    e4e0:	71 f4       	brne	.+28     	; 0xe4fe <__addsf3x+0x30>
    e4e2:	9e f5       	brtc	.+102    	; 0xe54a <__addsf3x+0x7c>
    e4e4:	8f c1       	rjmp	.+798    	; 0xe804 <__fp_zero>
    e4e6:	0e f4       	brtc	.+2      	; 0xe4ea <__addsf3x+0x1c>
    e4e8:	e0 95       	com	r30
    e4ea:	0b 2e       	mov	r0, r27
    e4ec:	ba 2f       	mov	r27, r26
    e4ee:	a0 2d       	mov	r26, r0
    e4f0:	0b 01       	movw	r0, r22
    e4f2:	b9 01       	movw	r22, r18
    e4f4:	90 01       	movw	r18, r0
    e4f6:	0c 01       	movw	r0, r24
    e4f8:	ca 01       	movw	r24, r20
    e4fa:	a0 01       	movw	r20, r0
    e4fc:	11 24       	eor	r1, r1
    e4fe:	ff 27       	eor	r31, r31
    e500:	59 1b       	sub	r21, r25
    e502:	99 f0       	breq	.+38     	; 0xe52a <__addsf3x+0x5c>
    e504:	59 3f       	cpi	r21, 0xF9	; 249
    e506:	50 f4       	brcc	.+20     	; 0xe51c <__addsf3x+0x4e>
    e508:	50 3e       	cpi	r21, 0xE0	; 224
    e50a:	68 f1       	brcs	.+90     	; 0xe566 <__addsf3x+0x98>
    e50c:	1a 16       	cp	r1, r26
    e50e:	f0 40       	sbci	r31, 0x00	; 0
    e510:	a2 2f       	mov	r26, r18
    e512:	23 2f       	mov	r18, r19
    e514:	34 2f       	mov	r19, r20
    e516:	44 27       	eor	r20, r20
    e518:	58 5f       	subi	r21, 0xF8	; 248
    e51a:	f3 cf       	rjmp	.-26     	; 0xe502 <__addsf3x+0x34>
    e51c:	46 95       	lsr	r20
    e51e:	37 95       	ror	r19
    e520:	27 95       	ror	r18
    e522:	a7 95       	ror	r26
    e524:	f0 40       	sbci	r31, 0x00	; 0
    e526:	53 95       	inc	r21
    e528:	c9 f7       	brne	.-14     	; 0xe51c <__addsf3x+0x4e>
    e52a:	7e f4       	brtc	.+30     	; 0xe54a <__addsf3x+0x7c>
    e52c:	1f 16       	cp	r1, r31
    e52e:	ba 0b       	sbc	r27, r26
    e530:	62 0b       	sbc	r22, r18
    e532:	73 0b       	sbc	r23, r19
    e534:	84 0b       	sbc	r24, r20
    e536:	ba f0       	brmi	.+46     	; 0xe566 <__addsf3x+0x98>
    e538:	91 50       	subi	r25, 0x01	; 1
    e53a:	a1 f0       	breq	.+40     	; 0xe564 <__addsf3x+0x96>
    e53c:	ff 0f       	add	r31, r31
    e53e:	bb 1f       	adc	r27, r27
    e540:	66 1f       	adc	r22, r22
    e542:	77 1f       	adc	r23, r23
    e544:	88 1f       	adc	r24, r24
    e546:	c2 f7       	brpl	.-16     	; 0xe538 <__addsf3x+0x6a>
    e548:	0e c0       	rjmp	.+28     	; 0xe566 <__addsf3x+0x98>
    e54a:	ba 0f       	add	r27, r26
    e54c:	62 1f       	adc	r22, r18
    e54e:	73 1f       	adc	r23, r19
    e550:	84 1f       	adc	r24, r20
    e552:	48 f4       	brcc	.+18     	; 0xe566 <__addsf3x+0x98>
    e554:	87 95       	ror	r24
    e556:	77 95       	ror	r23
    e558:	67 95       	ror	r22
    e55a:	b7 95       	ror	r27
    e55c:	f7 95       	ror	r31
    e55e:	9e 3f       	cpi	r25, 0xFE	; 254
    e560:	08 f0       	brcs	.+2      	; 0xe564 <__addsf3x+0x96>
    e562:	b3 cf       	rjmp	.-154    	; 0xe4ca <__addsf3+0x1e>
    e564:	93 95       	inc	r25
    e566:	88 0f       	add	r24, r24
    e568:	08 f0       	brcs	.+2      	; 0xe56c <__addsf3x+0x9e>
    e56a:	99 27       	eor	r25, r25
    e56c:	ee 0f       	add	r30, r30
    e56e:	97 95       	ror	r25
    e570:	87 95       	ror	r24
    e572:	08 95       	ret

0000e574 <__cmpsf2>:
    e574:	d9 d0       	rcall	.+434    	; 0xe728 <__fp_cmp>
    e576:	08 f4       	brcc	.+2      	; 0xe57a <__cmpsf2+0x6>
    e578:	81 e0       	ldi	r24, 0x01	; 1
    e57a:	08 95       	ret

0000e57c <__divsf3>:
    e57c:	0c d0       	rcall	.+24     	; 0xe596 <__divsf3x>
    e57e:	0f c1       	rjmp	.+542    	; 0xe79e <__fp_round>
    e580:	07 d1       	rcall	.+526    	; 0xe790 <__fp_pscB>
    e582:	40 f0       	brcs	.+16     	; 0xe594 <__divsf3+0x18>
    e584:	fe d0       	rcall	.+508    	; 0xe782 <__fp_pscA>
    e586:	30 f0       	brcs	.+12     	; 0xe594 <__divsf3+0x18>
    e588:	21 f4       	brne	.+8      	; 0xe592 <__divsf3+0x16>
    e58a:	5f 3f       	cpi	r21, 0xFF	; 255
    e58c:	19 f0       	breq	.+6      	; 0xe594 <__divsf3+0x18>
    e58e:	f0 c0       	rjmp	.+480    	; 0xe770 <__fp_inf>
    e590:	51 11       	cpse	r21, r1
    e592:	39 c1       	rjmp	.+626    	; 0xe806 <__fp_szero>
    e594:	f3 c0       	rjmp	.+486    	; 0xe77c <__fp_nan>

0000e596 <__divsf3x>:
    e596:	14 d1       	rcall	.+552    	; 0xe7c0 <__fp_split3>
    e598:	98 f3       	brcs	.-26     	; 0xe580 <__divsf3+0x4>

0000e59a <__divsf3_pse>:
    e59a:	99 23       	and	r25, r25
    e59c:	c9 f3       	breq	.-14     	; 0xe590 <__divsf3+0x14>
    e59e:	55 23       	and	r21, r21
    e5a0:	b1 f3       	breq	.-20     	; 0xe58e <__divsf3+0x12>
    e5a2:	95 1b       	sub	r25, r21
    e5a4:	55 0b       	sbc	r21, r21
    e5a6:	bb 27       	eor	r27, r27
    e5a8:	aa 27       	eor	r26, r26
    e5aa:	62 17       	cp	r22, r18
    e5ac:	73 07       	cpc	r23, r19
    e5ae:	84 07       	cpc	r24, r20
    e5b0:	38 f0       	brcs	.+14     	; 0xe5c0 <__divsf3_pse+0x26>
    e5b2:	9f 5f       	subi	r25, 0xFF	; 255
    e5b4:	5f 4f       	sbci	r21, 0xFF	; 255
    e5b6:	22 0f       	add	r18, r18
    e5b8:	33 1f       	adc	r19, r19
    e5ba:	44 1f       	adc	r20, r20
    e5bc:	aa 1f       	adc	r26, r26
    e5be:	a9 f3       	breq	.-22     	; 0xe5aa <__divsf3_pse+0x10>
    e5c0:	33 d0       	rcall	.+102    	; 0xe628 <__divsf3_pse+0x8e>
    e5c2:	0e 2e       	mov	r0, r30
    e5c4:	3a f0       	brmi	.+14     	; 0xe5d4 <__divsf3_pse+0x3a>
    e5c6:	e0 e8       	ldi	r30, 0x80	; 128
    e5c8:	30 d0       	rcall	.+96     	; 0xe62a <__divsf3_pse+0x90>
    e5ca:	91 50       	subi	r25, 0x01	; 1
    e5cc:	50 40       	sbci	r21, 0x00	; 0
    e5ce:	e6 95       	lsr	r30
    e5d0:	00 1c       	adc	r0, r0
    e5d2:	ca f7       	brpl	.-14     	; 0xe5c6 <__divsf3_pse+0x2c>
    e5d4:	29 d0       	rcall	.+82     	; 0xe628 <__divsf3_pse+0x8e>
    e5d6:	fe 2f       	mov	r31, r30
    e5d8:	27 d0       	rcall	.+78     	; 0xe628 <__divsf3_pse+0x8e>
    e5da:	66 0f       	add	r22, r22
    e5dc:	77 1f       	adc	r23, r23
    e5de:	88 1f       	adc	r24, r24
    e5e0:	bb 1f       	adc	r27, r27
    e5e2:	26 17       	cp	r18, r22
    e5e4:	37 07       	cpc	r19, r23
    e5e6:	48 07       	cpc	r20, r24
    e5e8:	ab 07       	cpc	r26, r27
    e5ea:	b0 e8       	ldi	r27, 0x80	; 128
    e5ec:	09 f0       	breq	.+2      	; 0xe5f0 <__divsf3_pse+0x56>
    e5ee:	bb 0b       	sbc	r27, r27
    e5f0:	80 2d       	mov	r24, r0
    e5f2:	bf 01       	movw	r22, r30
    e5f4:	ff 27       	eor	r31, r31
    e5f6:	93 58       	subi	r25, 0x83	; 131
    e5f8:	5f 4f       	sbci	r21, 0xFF	; 255
    e5fa:	2a f0       	brmi	.+10     	; 0xe606 <__divsf3_pse+0x6c>
    e5fc:	9e 3f       	cpi	r25, 0xFE	; 254
    e5fe:	51 05       	cpc	r21, r1
    e600:	68 f0       	brcs	.+26     	; 0xe61c <__divsf3_pse+0x82>
    e602:	b6 c0       	rjmp	.+364    	; 0xe770 <__fp_inf>
    e604:	00 c1       	rjmp	.+512    	; 0xe806 <__fp_szero>
    e606:	5f 3f       	cpi	r21, 0xFF	; 255
    e608:	ec f3       	brlt	.-6      	; 0xe604 <__divsf3_pse+0x6a>
    e60a:	98 3e       	cpi	r25, 0xE8	; 232
    e60c:	dc f3       	brlt	.-10     	; 0xe604 <__divsf3_pse+0x6a>
    e60e:	86 95       	lsr	r24
    e610:	77 95       	ror	r23
    e612:	67 95       	ror	r22
    e614:	b7 95       	ror	r27
    e616:	f7 95       	ror	r31
    e618:	9f 5f       	subi	r25, 0xFF	; 255
    e61a:	c9 f7       	brne	.-14     	; 0xe60e <__divsf3_pse+0x74>
    e61c:	88 0f       	add	r24, r24
    e61e:	91 1d       	adc	r25, r1
    e620:	96 95       	lsr	r25
    e622:	87 95       	ror	r24
    e624:	97 f9       	bld	r25, 7
    e626:	08 95       	ret
    e628:	e1 e0       	ldi	r30, 0x01	; 1
    e62a:	66 0f       	add	r22, r22
    e62c:	77 1f       	adc	r23, r23
    e62e:	88 1f       	adc	r24, r24
    e630:	bb 1f       	adc	r27, r27
    e632:	62 17       	cp	r22, r18
    e634:	73 07       	cpc	r23, r19
    e636:	84 07       	cpc	r24, r20
    e638:	ba 07       	cpc	r27, r26
    e63a:	20 f0       	brcs	.+8      	; 0xe644 <__divsf3_pse+0xaa>
    e63c:	62 1b       	sub	r22, r18
    e63e:	73 0b       	sbc	r23, r19
    e640:	84 0b       	sbc	r24, r20
    e642:	ba 0b       	sbc	r27, r26
    e644:	ee 1f       	adc	r30, r30
    e646:	88 f7       	brcc	.-30     	; 0xe62a <__divsf3_pse+0x90>
    e648:	e0 95       	com	r30
    e64a:	08 95       	ret

0000e64c <__fixsfsi>:
    e64c:	04 d0       	rcall	.+8      	; 0xe656 <__fixunssfsi>
    e64e:	68 94       	set
    e650:	b1 11       	cpse	r27, r1
    e652:	d9 c0       	rjmp	.+434    	; 0xe806 <__fp_szero>
    e654:	08 95       	ret

0000e656 <__fixunssfsi>:
    e656:	bc d0       	rcall	.+376    	; 0xe7d0 <__fp_splitA>
    e658:	88 f0       	brcs	.+34     	; 0xe67c <__fixunssfsi+0x26>
    e65a:	9f 57       	subi	r25, 0x7F	; 127
    e65c:	90 f0       	brcs	.+36     	; 0xe682 <__fixunssfsi+0x2c>
    e65e:	b9 2f       	mov	r27, r25
    e660:	99 27       	eor	r25, r25
    e662:	b7 51       	subi	r27, 0x17	; 23
    e664:	a0 f0       	brcs	.+40     	; 0xe68e <__fixunssfsi+0x38>
    e666:	d1 f0       	breq	.+52     	; 0xe69c <__fixunssfsi+0x46>
    e668:	66 0f       	add	r22, r22
    e66a:	77 1f       	adc	r23, r23
    e66c:	88 1f       	adc	r24, r24
    e66e:	99 1f       	adc	r25, r25
    e670:	1a f0       	brmi	.+6      	; 0xe678 <__fixunssfsi+0x22>
    e672:	ba 95       	dec	r27
    e674:	c9 f7       	brne	.-14     	; 0xe668 <__fixunssfsi+0x12>
    e676:	12 c0       	rjmp	.+36     	; 0xe69c <__fixunssfsi+0x46>
    e678:	b1 30       	cpi	r27, 0x01	; 1
    e67a:	81 f0       	breq	.+32     	; 0xe69c <__fixunssfsi+0x46>
    e67c:	c3 d0       	rcall	.+390    	; 0xe804 <__fp_zero>
    e67e:	b1 e0       	ldi	r27, 0x01	; 1
    e680:	08 95       	ret
    e682:	c0 c0       	rjmp	.+384    	; 0xe804 <__fp_zero>
    e684:	67 2f       	mov	r22, r23
    e686:	78 2f       	mov	r23, r24
    e688:	88 27       	eor	r24, r24
    e68a:	b8 5f       	subi	r27, 0xF8	; 248
    e68c:	39 f0       	breq	.+14     	; 0xe69c <__fixunssfsi+0x46>
    e68e:	b9 3f       	cpi	r27, 0xF9	; 249
    e690:	cc f3       	brlt	.-14     	; 0xe684 <__fixunssfsi+0x2e>
    e692:	86 95       	lsr	r24
    e694:	77 95       	ror	r23
    e696:	67 95       	ror	r22
    e698:	b3 95       	inc	r27
    e69a:	d9 f7       	brne	.-10     	; 0xe692 <__fixunssfsi+0x3c>
    e69c:	3e f4       	brtc	.+14     	; 0xe6ac <__fixunssfsi+0x56>
    e69e:	90 95       	com	r25
    e6a0:	80 95       	com	r24
    e6a2:	70 95       	com	r23
    e6a4:	61 95       	neg	r22
    e6a6:	7f 4f       	sbci	r23, 0xFF	; 255
    e6a8:	8f 4f       	sbci	r24, 0xFF	; 255
    e6aa:	9f 4f       	sbci	r25, 0xFF	; 255
    e6ac:	08 95       	ret

0000e6ae <__floatunsisf>:
    e6ae:	e8 94       	clt
    e6b0:	09 c0       	rjmp	.+18     	; 0xe6c4 <__floatsisf+0x12>

0000e6b2 <__floatsisf>:
    e6b2:	97 fb       	bst	r25, 7
    e6b4:	3e f4       	brtc	.+14     	; 0xe6c4 <__floatsisf+0x12>
    e6b6:	90 95       	com	r25
    e6b8:	80 95       	com	r24
    e6ba:	70 95       	com	r23
    e6bc:	61 95       	neg	r22
    e6be:	7f 4f       	sbci	r23, 0xFF	; 255
    e6c0:	8f 4f       	sbci	r24, 0xFF	; 255
    e6c2:	9f 4f       	sbci	r25, 0xFF	; 255
    e6c4:	99 23       	and	r25, r25
    e6c6:	a9 f0       	breq	.+42     	; 0xe6f2 <__floatsisf+0x40>
    e6c8:	f9 2f       	mov	r31, r25
    e6ca:	96 e9       	ldi	r25, 0x96	; 150
    e6cc:	bb 27       	eor	r27, r27
    e6ce:	93 95       	inc	r25
    e6d0:	f6 95       	lsr	r31
    e6d2:	87 95       	ror	r24
    e6d4:	77 95       	ror	r23
    e6d6:	67 95       	ror	r22
    e6d8:	b7 95       	ror	r27
    e6da:	f1 11       	cpse	r31, r1
    e6dc:	f8 cf       	rjmp	.-16     	; 0xe6ce <__floatsisf+0x1c>
    e6de:	fa f4       	brpl	.+62     	; 0xe71e <__floatsisf+0x6c>
    e6e0:	bb 0f       	add	r27, r27
    e6e2:	11 f4       	brne	.+4      	; 0xe6e8 <__floatsisf+0x36>
    e6e4:	60 ff       	sbrs	r22, 0
    e6e6:	1b c0       	rjmp	.+54     	; 0xe71e <__floatsisf+0x6c>
    e6e8:	6f 5f       	subi	r22, 0xFF	; 255
    e6ea:	7f 4f       	sbci	r23, 0xFF	; 255
    e6ec:	8f 4f       	sbci	r24, 0xFF	; 255
    e6ee:	9f 4f       	sbci	r25, 0xFF	; 255
    e6f0:	16 c0       	rjmp	.+44     	; 0xe71e <__floatsisf+0x6c>
    e6f2:	88 23       	and	r24, r24
    e6f4:	11 f0       	breq	.+4      	; 0xe6fa <__floatsisf+0x48>
    e6f6:	96 e9       	ldi	r25, 0x96	; 150
    e6f8:	11 c0       	rjmp	.+34     	; 0xe71c <__floatsisf+0x6a>
    e6fa:	77 23       	and	r23, r23
    e6fc:	21 f0       	breq	.+8      	; 0xe706 <__floatsisf+0x54>
    e6fe:	9e e8       	ldi	r25, 0x8E	; 142
    e700:	87 2f       	mov	r24, r23
    e702:	76 2f       	mov	r23, r22
    e704:	05 c0       	rjmp	.+10     	; 0xe710 <__floatsisf+0x5e>
    e706:	66 23       	and	r22, r22
    e708:	71 f0       	breq	.+28     	; 0xe726 <__floatsisf+0x74>
    e70a:	96 e8       	ldi	r25, 0x86	; 134
    e70c:	86 2f       	mov	r24, r22
    e70e:	70 e0       	ldi	r23, 0x00	; 0
    e710:	60 e0       	ldi	r22, 0x00	; 0
    e712:	2a f0       	brmi	.+10     	; 0xe71e <__floatsisf+0x6c>
    e714:	9a 95       	dec	r25
    e716:	66 0f       	add	r22, r22
    e718:	77 1f       	adc	r23, r23
    e71a:	88 1f       	adc	r24, r24
    e71c:	da f7       	brpl	.-10     	; 0xe714 <__floatsisf+0x62>
    e71e:	88 0f       	add	r24, r24
    e720:	96 95       	lsr	r25
    e722:	87 95       	ror	r24
    e724:	97 f9       	bld	r25, 7
    e726:	08 95       	ret

0000e728 <__fp_cmp>:
    e728:	99 0f       	add	r25, r25
    e72a:	00 08       	sbc	r0, r0
    e72c:	55 0f       	add	r21, r21
    e72e:	aa 0b       	sbc	r26, r26
    e730:	e0 e8       	ldi	r30, 0x80	; 128
    e732:	fe ef       	ldi	r31, 0xFE	; 254
    e734:	16 16       	cp	r1, r22
    e736:	17 06       	cpc	r1, r23
    e738:	e8 07       	cpc	r30, r24
    e73a:	f9 07       	cpc	r31, r25
    e73c:	c0 f0       	brcs	.+48     	; 0xe76e <__fp_cmp+0x46>
    e73e:	12 16       	cp	r1, r18
    e740:	13 06       	cpc	r1, r19
    e742:	e4 07       	cpc	r30, r20
    e744:	f5 07       	cpc	r31, r21
    e746:	98 f0       	brcs	.+38     	; 0xe76e <__fp_cmp+0x46>
    e748:	62 1b       	sub	r22, r18
    e74a:	73 0b       	sbc	r23, r19
    e74c:	84 0b       	sbc	r24, r20
    e74e:	95 0b       	sbc	r25, r21
    e750:	39 f4       	brne	.+14     	; 0xe760 <__fp_cmp+0x38>
    e752:	0a 26       	eor	r0, r26
    e754:	61 f0       	breq	.+24     	; 0xe76e <__fp_cmp+0x46>
    e756:	23 2b       	or	r18, r19
    e758:	24 2b       	or	r18, r20
    e75a:	25 2b       	or	r18, r21
    e75c:	21 f4       	brne	.+8      	; 0xe766 <__fp_cmp+0x3e>
    e75e:	08 95       	ret
    e760:	0a 26       	eor	r0, r26
    e762:	09 f4       	brne	.+2      	; 0xe766 <__fp_cmp+0x3e>
    e764:	a1 40       	sbci	r26, 0x01	; 1
    e766:	a6 95       	lsr	r26
    e768:	8f ef       	ldi	r24, 0xFF	; 255
    e76a:	81 1d       	adc	r24, r1
    e76c:	81 1d       	adc	r24, r1
    e76e:	08 95       	ret

0000e770 <__fp_inf>:
    e770:	97 f9       	bld	r25, 7
    e772:	9f 67       	ori	r25, 0x7F	; 127
    e774:	80 e8       	ldi	r24, 0x80	; 128
    e776:	70 e0       	ldi	r23, 0x00	; 0
    e778:	60 e0       	ldi	r22, 0x00	; 0
    e77a:	08 95       	ret

0000e77c <__fp_nan>:
    e77c:	9f ef       	ldi	r25, 0xFF	; 255
    e77e:	80 ec       	ldi	r24, 0xC0	; 192
    e780:	08 95       	ret

0000e782 <__fp_pscA>:
    e782:	00 24       	eor	r0, r0
    e784:	0a 94       	dec	r0
    e786:	16 16       	cp	r1, r22
    e788:	17 06       	cpc	r1, r23
    e78a:	18 06       	cpc	r1, r24
    e78c:	09 06       	cpc	r0, r25
    e78e:	08 95       	ret

0000e790 <__fp_pscB>:
    e790:	00 24       	eor	r0, r0
    e792:	0a 94       	dec	r0
    e794:	12 16       	cp	r1, r18
    e796:	13 06       	cpc	r1, r19
    e798:	14 06       	cpc	r1, r20
    e79a:	05 06       	cpc	r0, r21
    e79c:	08 95       	ret

0000e79e <__fp_round>:
    e79e:	09 2e       	mov	r0, r25
    e7a0:	03 94       	inc	r0
    e7a2:	00 0c       	add	r0, r0
    e7a4:	11 f4       	brne	.+4      	; 0xe7aa <__fp_round+0xc>
    e7a6:	88 23       	and	r24, r24
    e7a8:	52 f0       	brmi	.+20     	; 0xe7be <__fp_round+0x20>
    e7aa:	bb 0f       	add	r27, r27
    e7ac:	40 f4       	brcc	.+16     	; 0xe7be <__fp_round+0x20>
    e7ae:	bf 2b       	or	r27, r31
    e7b0:	11 f4       	brne	.+4      	; 0xe7b6 <__fp_round+0x18>
    e7b2:	60 ff       	sbrs	r22, 0
    e7b4:	04 c0       	rjmp	.+8      	; 0xe7be <__fp_round+0x20>
    e7b6:	6f 5f       	subi	r22, 0xFF	; 255
    e7b8:	7f 4f       	sbci	r23, 0xFF	; 255
    e7ba:	8f 4f       	sbci	r24, 0xFF	; 255
    e7bc:	9f 4f       	sbci	r25, 0xFF	; 255
    e7be:	08 95       	ret

0000e7c0 <__fp_split3>:
    e7c0:	57 fd       	sbrc	r21, 7
    e7c2:	90 58       	subi	r25, 0x80	; 128
    e7c4:	44 0f       	add	r20, r20
    e7c6:	55 1f       	adc	r21, r21
    e7c8:	59 f0       	breq	.+22     	; 0xe7e0 <__fp_splitA+0x10>
    e7ca:	5f 3f       	cpi	r21, 0xFF	; 255
    e7cc:	71 f0       	breq	.+28     	; 0xe7ea <__fp_splitA+0x1a>
    e7ce:	47 95       	ror	r20

0000e7d0 <__fp_splitA>:
    e7d0:	88 0f       	add	r24, r24
    e7d2:	97 fb       	bst	r25, 7
    e7d4:	99 1f       	adc	r25, r25
    e7d6:	61 f0       	breq	.+24     	; 0xe7f0 <__fp_splitA+0x20>
    e7d8:	9f 3f       	cpi	r25, 0xFF	; 255
    e7da:	79 f0       	breq	.+30     	; 0xe7fa <__fp_splitA+0x2a>
    e7dc:	87 95       	ror	r24
    e7de:	08 95       	ret
    e7e0:	12 16       	cp	r1, r18
    e7e2:	13 06       	cpc	r1, r19
    e7e4:	14 06       	cpc	r1, r20
    e7e6:	55 1f       	adc	r21, r21
    e7e8:	f2 cf       	rjmp	.-28     	; 0xe7ce <__fp_split3+0xe>
    e7ea:	46 95       	lsr	r20
    e7ec:	f1 df       	rcall	.-30     	; 0xe7d0 <__fp_splitA>
    e7ee:	08 c0       	rjmp	.+16     	; 0xe800 <__fp_splitA+0x30>
    e7f0:	16 16       	cp	r1, r22
    e7f2:	17 06       	cpc	r1, r23
    e7f4:	18 06       	cpc	r1, r24
    e7f6:	99 1f       	adc	r25, r25
    e7f8:	f1 cf       	rjmp	.-30     	; 0xe7dc <__fp_splitA+0xc>
    e7fa:	86 95       	lsr	r24
    e7fc:	71 05       	cpc	r23, r1
    e7fe:	61 05       	cpc	r22, r1
    e800:	08 94       	sec
    e802:	08 95       	ret

0000e804 <__fp_zero>:
    e804:	e8 94       	clt

0000e806 <__fp_szero>:
    e806:	bb 27       	eor	r27, r27
    e808:	66 27       	eor	r22, r22
    e80a:	77 27       	eor	r23, r23
    e80c:	cb 01       	movw	r24, r22
    e80e:	97 f9       	bld	r25, 7
    e810:	08 95       	ret

0000e812 <__gesf2>:
    e812:	8a df       	rcall	.-236    	; 0xe728 <__fp_cmp>
    e814:	08 f4       	brcc	.+2      	; 0xe818 <__gesf2+0x6>
    e816:	8f ef       	ldi	r24, 0xFF	; 255
    e818:	08 95       	ret

0000e81a <__mulsf3>:
    e81a:	0b d0       	rcall	.+22     	; 0xe832 <__mulsf3x>
    e81c:	c0 cf       	rjmp	.-128    	; 0xe79e <__fp_round>
    e81e:	b1 df       	rcall	.-158    	; 0xe782 <__fp_pscA>
    e820:	28 f0       	brcs	.+10     	; 0xe82c <__mulsf3+0x12>
    e822:	b6 df       	rcall	.-148    	; 0xe790 <__fp_pscB>
    e824:	18 f0       	brcs	.+6      	; 0xe82c <__mulsf3+0x12>
    e826:	95 23       	and	r25, r21
    e828:	09 f0       	breq	.+2      	; 0xe82c <__mulsf3+0x12>
    e82a:	a2 cf       	rjmp	.-188    	; 0xe770 <__fp_inf>
    e82c:	a7 cf       	rjmp	.-178    	; 0xe77c <__fp_nan>
    e82e:	11 24       	eor	r1, r1
    e830:	ea cf       	rjmp	.-44     	; 0xe806 <__fp_szero>

0000e832 <__mulsf3x>:
    e832:	c6 df       	rcall	.-116    	; 0xe7c0 <__fp_split3>
    e834:	a0 f3       	brcs	.-24     	; 0xe81e <__mulsf3+0x4>

0000e836 <__mulsf3_pse>:
    e836:	95 9f       	mul	r25, r21
    e838:	d1 f3       	breq	.-12     	; 0xe82e <__mulsf3+0x14>
    e83a:	95 0f       	add	r25, r21
    e83c:	50 e0       	ldi	r21, 0x00	; 0
    e83e:	55 1f       	adc	r21, r21
    e840:	62 9f       	mul	r22, r18
    e842:	f0 01       	movw	r30, r0
    e844:	72 9f       	mul	r23, r18
    e846:	bb 27       	eor	r27, r27
    e848:	f0 0d       	add	r31, r0
    e84a:	b1 1d       	adc	r27, r1
    e84c:	63 9f       	mul	r22, r19
    e84e:	aa 27       	eor	r26, r26
    e850:	f0 0d       	add	r31, r0
    e852:	b1 1d       	adc	r27, r1
    e854:	aa 1f       	adc	r26, r26
    e856:	64 9f       	mul	r22, r20
    e858:	66 27       	eor	r22, r22
    e85a:	b0 0d       	add	r27, r0
    e85c:	a1 1d       	adc	r26, r1
    e85e:	66 1f       	adc	r22, r22
    e860:	82 9f       	mul	r24, r18
    e862:	22 27       	eor	r18, r18
    e864:	b0 0d       	add	r27, r0
    e866:	a1 1d       	adc	r26, r1
    e868:	62 1f       	adc	r22, r18
    e86a:	73 9f       	mul	r23, r19
    e86c:	b0 0d       	add	r27, r0
    e86e:	a1 1d       	adc	r26, r1
    e870:	62 1f       	adc	r22, r18
    e872:	83 9f       	mul	r24, r19
    e874:	a0 0d       	add	r26, r0
    e876:	61 1d       	adc	r22, r1
    e878:	22 1f       	adc	r18, r18
    e87a:	74 9f       	mul	r23, r20
    e87c:	33 27       	eor	r19, r19
    e87e:	a0 0d       	add	r26, r0
    e880:	61 1d       	adc	r22, r1
    e882:	23 1f       	adc	r18, r19
    e884:	84 9f       	mul	r24, r20
    e886:	60 0d       	add	r22, r0
    e888:	21 1d       	adc	r18, r1
    e88a:	82 2f       	mov	r24, r18
    e88c:	76 2f       	mov	r23, r22
    e88e:	6a 2f       	mov	r22, r26
    e890:	11 24       	eor	r1, r1
    e892:	9f 57       	subi	r25, 0x7F	; 127
    e894:	50 40       	sbci	r21, 0x00	; 0
    e896:	8a f0       	brmi	.+34     	; 0xe8ba <__mulsf3_pse+0x84>
    e898:	e1 f0       	breq	.+56     	; 0xe8d2 <__mulsf3_pse+0x9c>
    e89a:	88 23       	and	r24, r24
    e89c:	4a f0       	brmi	.+18     	; 0xe8b0 <__mulsf3_pse+0x7a>
    e89e:	ee 0f       	add	r30, r30
    e8a0:	ff 1f       	adc	r31, r31
    e8a2:	bb 1f       	adc	r27, r27
    e8a4:	66 1f       	adc	r22, r22
    e8a6:	77 1f       	adc	r23, r23
    e8a8:	88 1f       	adc	r24, r24
    e8aa:	91 50       	subi	r25, 0x01	; 1
    e8ac:	50 40       	sbci	r21, 0x00	; 0
    e8ae:	a9 f7       	brne	.-22     	; 0xe89a <__mulsf3_pse+0x64>
    e8b0:	9e 3f       	cpi	r25, 0xFE	; 254
    e8b2:	51 05       	cpc	r21, r1
    e8b4:	70 f0       	brcs	.+28     	; 0xe8d2 <__mulsf3_pse+0x9c>
    e8b6:	5c cf       	rjmp	.-328    	; 0xe770 <__fp_inf>
    e8b8:	a6 cf       	rjmp	.-180    	; 0xe806 <__fp_szero>
    e8ba:	5f 3f       	cpi	r21, 0xFF	; 255
    e8bc:	ec f3       	brlt	.-6      	; 0xe8b8 <__mulsf3_pse+0x82>
    e8be:	98 3e       	cpi	r25, 0xE8	; 232
    e8c0:	dc f3       	brlt	.-10     	; 0xe8b8 <__mulsf3_pse+0x82>
    e8c2:	86 95       	lsr	r24
    e8c4:	77 95       	ror	r23
    e8c6:	67 95       	ror	r22
    e8c8:	b7 95       	ror	r27
    e8ca:	f7 95       	ror	r31
    e8cc:	e7 95       	ror	r30
    e8ce:	9f 5f       	subi	r25, 0xFF	; 255
    e8d0:	c1 f7       	brne	.-16     	; 0xe8c2 <__mulsf3_pse+0x8c>
    e8d2:	fe 2b       	or	r31, r30
    e8d4:	88 0f       	add	r24, r24
    e8d6:	91 1d       	adc	r25, r1
    e8d8:	96 95       	lsr	r25
    e8da:	87 95       	ror	r24
    e8dc:	97 f9       	bld	r25, 7
    e8de:	08 95       	ret

0000e8e0 <memcpy_P>:
    e8e0:	fb 01       	movw	r30, r22
    e8e2:	dc 01       	movw	r26, r24
    e8e4:	02 c0       	rjmp	.+4      	; 0xe8ea <memcpy_P+0xa>
    e8e6:	05 90       	lpm	r0, Z+
    e8e8:	0d 92       	st	X+, r0
    e8ea:	41 50       	subi	r20, 0x01	; 1
    e8ec:	50 40       	sbci	r21, 0x00	; 0
    e8ee:	d8 f7       	brcc	.-10     	; 0xe8e6 <memcpy_P+0x6>
    e8f0:	08 95       	ret

0000e8f2 <strnlen_P>:
    e8f2:	fc 01       	movw	r30, r24
    e8f4:	05 90       	lpm	r0, Z+
    e8f6:	61 50       	subi	r22, 0x01	; 1
    e8f8:	70 40       	sbci	r23, 0x00	; 0
    e8fa:	01 10       	cpse	r0, r1
    e8fc:	d8 f7       	brcc	.-10     	; 0xe8f4 <strnlen_P+0x2>
    e8fe:	80 95       	com	r24
    e900:	90 95       	com	r25
    e902:	8e 0f       	add	r24, r30
    e904:	9f 1f       	adc	r25, r31
    e906:	08 95       	ret

0000e908 <strupr>:
    e908:	dc 01       	movw	r26, r24
    e90a:	6c 91       	ld	r22, X
    e90c:	61 56       	subi	r22, 0x61	; 97
    e90e:	6a 31       	cpi	r22, 0x1A	; 26
    e910:	08 f0       	brcs	.+2      	; 0xe914 <strupr+0xc>
    e912:	60 5e       	subi	r22, 0xE0	; 224
    e914:	6f 5b       	subi	r22, 0xBF	; 191
    e916:	6d 93       	st	X+, r22
    e918:	c1 f7       	brne	.-16     	; 0xe90a <strupr+0x2>
    e91a:	08 95       	ret

0000e91c <sprintf>:
    e91c:	ae e0       	ldi	r26, 0x0E	; 14
    e91e:	b0 e0       	ldi	r27, 0x00	; 0
    e920:	e4 e9       	ldi	r30, 0x94	; 148
    e922:	f4 e7       	ldi	r31, 0x74	; 116
    e924:	0c 94 32 77 	jmp	0xee64	; 0xee64 <__prologue_saves__+0x1c>
    e928:	0d 89       	ldd	r16, Y+21	; 0x15
    e92a:	1e 89       	ldd	r17, Y+22	; 0x16
    e92c:	86 e0       	ldi	r24, 0x06	; 6
    e92e:	8c 83       	std	Y+4, r24	; 0x04
    e930:	1a 83       	std	Y+2, r17	; 0x02
    e932:	09 83       	std	Y+1, r16	; 0x01
    e934:	8f ef       	ldi	r24, 0xFF	; 255
    e936:	9f e7       	ldi	r25, 0x7F	; 127
    e938:	9e 83       	std	Y+6, r25	; 0x06
    e93a:	8d 83       	std	Y+5, r24	; 0x05
    e93c:	ae 01       	movw	r20, r28
    e93e:	47 5e       	subi	r20, 0xE7	; 231
    e940:	5f 4f       	sbci	r21, 0xFF	; 255
    e942:	6f 89       	ldd	r22, Y+23	; 0x17
    e944:	78 8d       	ldd	r23, Y+24	; 0x18
    e946:	ce 01       	movw	r24, r28
    e948:	01 96       	adiw	r24, 0x01	; 1
    e94a:	0e 94 b1 74 	call	0xe962	; 0xe962 <vfprintf>
    e94e:	2f 81       	ldd	r18, Y+7	; 0x07
    e950:	38 85       	ldd	r19, Y+8	; 0x08
    e952:	f8 01       	movw	r30, r16
    e954:	e2 0f       	add	r30, r18
    e956:	f3 1f       	adc	r31, r19
    e958:	10 82       	st	Z, r1
    e95a:	2e 96       	adiw	r28, 0x0e	; 14
    e95c:	e4 e0       	ldi	r30, 0x04	; 4
    e95e:	0c 94 4e 77 	jmp	0xee9c	; 0xee9c <__epilogue_restores__+0x1c>

0000e962 <vfprintf>:
    e962:	ac e0       	ldi	r26, 0x0C	; 12
    e964:	b0 e0       	ldi	r27, 0x00	; 0
    e966:	e7 eb       	ldi	r30, 0xB7	; 183
    e968:	f4 e7       	ldi	r31, 0x74	; 116
    e96a:	0c 94 24 77 	jmp	0xee48	; 0xee48 <__prologue_saves__>
    e96e:	7c 01       	movw	r14, r24
    e970:	6b 01       	movw	r12, r22
    e972:	8a 01       	movw	r16, r20
    e974:	fc 01       	movw	r30, r24
    e976:	17 82       	std	Z+7, r1	; 0x07
    e978:	16 82       	std	Z+6, r1	; 0x06
    e97a:	83 81       	ldd	r24, Z+3	; 0x03
    e97c:	81 ff       	sbrs	r24, 1
    e97e:	bd c1       	rjmp	.+890    	; 0xecfa <vfprintf+0x398>
    e980:	ce 01       	movw	r24, r28
    e982:	01 96       	adiw	r24, 0x01	; 1
    e984:	4c 01       	movw	r8, r24
    e986:	f7 01       	movw	r30, r14
    e988:	93 81       	ldd	r25, Z+3	; 0x03
    e98a:	f6 01       	movw	r30, r12
    e98c:	93 fd       	sbrc	r25, 3
    e98e:	85 91       	lpm	r24, Z+
    e990:	93 ff       	sbrs	r25, 3
    e992:	81 91       	ld	r24, Z+
    e994:	6f 01       	movw	r12, r30
    e996:	88 23       	and	r24, r24
    e998:	09 f4       	brne	.+2      	; 0xe99c <vfprintf+0x3a>
    e99a:	ab c1       	rjmp	.+854    	; 0xecf2 <vfprintf+0x390>
    e99c:	85 32       	cpi	r24, 0x25	; 37
    e99e:	39 f4       	brne	.+14     	; 0xe9ae <vfprintf+0x4c>
    e9a0:	93 fd       	sbrc	r25, 3
    e9a2:	85 91       	lpm	r24, Z+
    e9a4:	93 ff       	sbrs	r25, 3
    e9a6:	81 91       	ld	r24, Z+
    e9a8:	6f 01       	movw	r12, r30
    e9aa:	85 32       	cpi	r24, 0x25	; 37
    e9ac:	29 f4       	brne	.+10     	; 0xe9b8 <vfprintf+0x56>
    e9ae:	b7 01       	movw	r22, r14
    e9b0:	90 e0       	ldi	r25, 0x00	; 0
    e9b2:	0e 94 8e 76 	call	0xed1c	; 0xed1c <fputc>
    e9b6:	e7 cf       	rjmp	.-50     	; 0xe986 <vfprintf+0x24>
    e9b8:	51 2c       	mov	r5, r1
    e9ba:	31 2c       	mov	r3, r1
    e9bc:	20 e0       	ldi	r18, 0x00	; 0
    e9be:	20 32       	cpi	r18, 0x20	; 32
    e9c0:	a0 f4       	brcc	.+40     	; 0xe9ea <vfprintf+0x88>
    e9c2:	8b 32       	cpi	r24, 0x2B	; 43
    e9c4:	69 f0       	breq	.+26     	; 0xe9e0 <vfprintf+0x7e>
    e9c6:	30 f4       	brcc	.+12     	; 0xe9d4 <vfprintf+0x72>
    e9c8:	80 32       	cpi	r24, 0x20	; 32
    e9ca:	59 f0       	breq	.+22     	; 0xe9e2 <vfprintf+0x80>
    e9cc:	83 32       	cpi	r24, 0x23	; 35
    e9ce:	69 f4       	brne	.+26     	; 0xe9ea <vfprintf+0x88>
    e9d0:	20 61       	ori	r18, 0x10	; 16
    e9d2:	2c c0       	rjmp	.+88     	; 0xea2c <vfprintf+0xca>
    e9d4:	8d 32       	cpi	r24, 0x2D	; 45
    e9d6:	39 f0       	breq	.+14     	; 0xe9e6 <vfprintf+0x84>
    e9d8:	80 33       	cpi	r24, 0x30	; 48
    e9da:	39 f4       	brne	.+14     	; 0xe9ea <vfprintf+0x88>
    e9dc:	21 60       	ori	r18, 0x01	; 1
    e9de:	26 c0       	rjmp	.+76     	; 0xea2c <vfprintf+0xca>
    e9e0:	22 60       	ori	r18, 0x02	; 2
    e9e2:	24 60       	ori	r18, 0x04	; 4
    e9e4:	23 c0       	rjmp	.+70     	; 0xea2c <vfprintf+0xca>
    e9e6:	28 60       	ori	r18, 0x08	; 8
    e9e8:	21 c0       	rjmp	.+66     	; 0xea2c <vfprintf+0xca>
    e9ea:	27 fd       	sbrc	r18, 7
    e9ec:	27 c0       	rjmp	.+78     	; 0xea3c <vfprintf+0xda>
    e9ee:	30 ed       	ldi	r19, 0xD0	; 208
    e9f0:	38 0f       	add	r19, r24
    e9f2:	3a 30       	cpi	r19, 0x0A	; 10
    e9f4:	78 f4       	brcc	.+30     	; 0xea14 <vfprintf+0xb2>
    e9f6:	26 ff       	sbrs	r18, 6
    e9f8:	06 c0       	rjmp	.+12     	; 0xea06 <vfprintf+0xa4>
    e9fa:	fa e0       	ldi	r31, 0x0A	; 10
    e9fc:	5f 9e       	mul	r5, r31
    e9fe:	30 0d       	add	r19, r0
    ea00:	11 24       	eor	r1, r1
    ea02:	53 2e       	mov	r5, r19
    ea04:	13 c0       	rjmp	.+38     	; 0xea2c <vfprintf+0xca>
    ea06:	8a e0       	ldi	r24, 0x0A	; 10
    ea08:	38 9e       	mul	r3, r24
    ea0a:	30 0d       	add	r19, r0
    ea0c:	11 24       	eor	r1, r1
    ea0e:	33 2e       	mov	r3, r19
    ea10:	20 62       	ori	r18, 0x20	; 32
    ea12:	0c c0       	rjmp	.+24     	; 0xea2c <vfprintf+0xca>
    ea14:	8e 32       	cpi	r24, 0x2E	; 46
    ea16:	21 f4       	brne	.+8      	; 0xea20 <vfprintf+0xbe>
    ea18:	26 fd       	sbrc	r18, 6
    ea1a:	6b c1       	rjmp	.+726    	; 0xecf2 <vfprintf+0x390>
    ea1c:	20 64       	ori	r18, 0x40	; 64
    ea1e:	06 c0       	rjmp	.+12     	; 0xea2c <vfprintf+0xca>
    ea20:	8c 36       	cpi	r24, 0x6C	; 108
    ea22:	11 f4       	brne	.+4      	; 0xea28 <vfprintf+0xc6>
    ea24:	20 68       	ori	r18, 0x80	; 128
    ea26:	02 c0       	rjmp	.+4      	; 0xea2c <vfprintf+0xca>
    ea28:	88 36       	cpi	r24, 0x68	; 104
    ea2a:	41 f4       	brne	.+16     	; 0xea3c <vfprintf+0xda>
    ea2c:	f6 01       	movw	r30, r12
    ea2e:	93 fd       	sbrc	r25, 3
    ea30:	85 91       	lpm	r24, Z+
    ea32:	93 ff       	sbrs	r25, 3
    ea34:	81 91       	ld	r24, Z+
    ea36:	6f 01       	movw	r12, r30
    ea38:	81 11       	cpse	r24, r1
    ea3a:	c1 cf       	rjmp	.-126    	; 0xe9be <vfprintf+0x5c>
    ea3c:	98 2f       	mov	r25, r24
    ea3e:	9f 7d       	andi	r25, 0xDF	; 223
    ea40:	95 54       	subi	r25, 0x45	; 69
    ea42:	93 30       	cpi	r25, 0x03	; 3
    ea44:	28 f4       	brcc	.+10     	; 0xea50 <vfprintf+0xee>
    ea46:	0c 5f       	subi	r16, 0xFC	; 252
    ea48:	1f 4f       	sbci	r17, 0xFF	; 255
    ea4a:	ff e3       	ldi	r31, 0x3F	; 63
    ea4c:	f9 83       	std	Y+1, r31	; 0x01
    ea4e:	0d c0       	rjmp	.+26     	; 0xea6a <vfprintf+0x108>
    ea50:	83 36       	cpi	r24, 0x63	; 99
    ea52:	31 f0       	breq	.+12     	; 0xea60 <vfprintf+0xfe>
    ea54:	83 37       	cpi	r24, 0x73	; 115
    ea56:	71 f0       	breq	.+28     	; 0xea74 <vfprintf+0x112>
    ea58:	83 35       	cpi	r24, 0x53	; 83
    ea5a:	09 f0       	breq	.+2      	; 0xea5e <vfprintf+0xfc>
    ea5c:	5b c0       	rjmp	.+182    	; 0xeb14 <vfprintf+0x1b2>
    ea5e:	22 c0       	rjmp	.+68     	; 0xeaa4 <vfprintf+0x142>
    ea60:	f8 01       	movw	r30, r16
    ea62:	80 81       	ld	r24, Z
    ea64:	89 83       	std	Y+1, r24	; 0x01
    ea66:	0e 5f       	subi	r16, 0xFE	; 254
    ea68:	1f 4f       	sbci	r17, 0xFF	; 255
    ea6a:	44 24       	eor	r4, r4
    ea6c:	43 94       	inc	r4
    ea6e:	51 2c       	mov	r5, r1
    ea70:	54 01       	movw	r10, r8
    ea72:	15 c0       	rjmp	.+42     	; 0xea9e <vfprintf+0x13c>
    ea74:	38 01       	movw	r6, r16
    ea76:	f2 e0       	ldi	r31, 0x02	; 2
    ea78:	6f 0e       	add	r6, r31
    ea7a:	71 1c       	adc	r7, r1
    ea7c:	f8 01       	movw	r30, r16
    ea7e:	a0 80       	ld	r10, Z
    ea80:	b1 80       	ldd	r11, Z+1	; 0x01
    ea82:	26 ff       	sbrs	r18, 6
    ea84:	03 c0       	rjmp	.+6      	; 0xea8c <vfprintf+0x12a>
    ea86:	65 2d       	mov	r22, r5
    ea88:	70 e0       	ldi	r23, 0x00	; 0
    ea8a:	02 c0       	rjmp	.+4      	; 0xea90 <vfprintf+0x12e>
    ea8c:	6f ef       	ldi	r22, 0xFF	; 255
    ea8e:	7f ef       	ldi	r23, 0xFF	; 255
    ea90:	c5 01       	movw	r24, r10
    ea92:	2c 87       	std	Y+12, r18	; 0x0c
    ea94:	0e 94 83 76 	call	0xed06	; 0xed06 <strnlen>
    ea98:	2c 01       	movw	r4, r24
    ea9a:	83 01       	movw	r16, r6
    ea9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    ea9e:	2f 77       	andi	r18, 0x7F	; 127
    eaa0:	22 2e       	mov	r2, r18
    eaa2:	17 c0       	rjmp	.+46     	; 0xead2 <vfprintf+0x170>
    eaa4:	38 01       	movw	r6, r16
    eaa6:	f2 e0       	ldi	r31, 0x02	; 2
    eaa8:	6f 0e       	add	r6, r31
    eaaa:	71 1c       	adc	r7, r1
    eaac:	f8 01       	movw	r30, r16
    eaae:	a0 80       	ld	r10, Z
    eab0:	b1 80       	ldd	r11, Z+1	; 0x01
    eab2:	26 ff       	sbrs	r18, 6
    eab4:	03 c0       	rjmp	.+6      	; 0xeabc <vfprintf+0x15a>
    eab6:	65 2d       	mov	r22, r5
    eab8:	70 e0       	ldi	r23, 0x00	; 0
    eaba:	02 c0       	rjmp	.+4      	; 0xeac0 <vfprintf+0x15e>
    eabc:	6f ef       	ldi	r22, 0xFF	; 255
    eabe:	7f ef       	ldi	r23, 0xFF	; 255
    eac0:	c5 01       	movw	r24, r10
    eac2:	2c 87       	std	Y+12, r18	; 0x0c
    eac4:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <strnlen_P>
    eac8:	2c 01       	movw	r4, r24
    eaca:	2c 85       	ldd	r18, Y+12	; 0x0c
    eacc:	20 68       	ori	r18, 0x80	; 128
    eace:	22 2e       	mov	r2, r18
    ead0:	83 01       	movw	r16, r6
    ead2:	23 fc       	sbrc	r2, 3
    ead4:	1b c0       	rjmp	.+54     	; 0xeb0c <vfprintf+0x1aa>
    ead6:	83 2d       	mov	r24, r3
    ead8:	90 e0       	ldi	r25, 0x00	; 0
    eada:	48 16       	cp	r4, r24
    eadc:	59 06       	cpc	r5, r25
    eade:	b0 f4       	brcc	.+44     	; 0xeb0c <vfprintf+0x1aa>
    eae0:	b7 01       	movw	r22, r14
    eae2:	80 e2       	ldi	r24, 0x20	; 32
    eae4:	90 e0       	ldi	r25, 0x00	; 0
    eae6:	0e 94 8e 76 	call	0xed1c	; 0xed1c <fputc>
    eaea:	3a 94       	dec	r3
    eaec:	f4 cf       	rjmp	.-24     	; 0xead6 <vfprintf+0x174>
    eaee:	f5 01       	movw	r30, r10
    eaf0:	27 fc       	sbrc	r2, 7
    eaf2:	85 91       	lpm	r24, Z+
    eaf4:	27 fe       	sbrs	r2, 7
    eaf6:	81 91       	ld	r24, Z+
    eaf8:	5f 01       	movw	r10, r30
    eafa:	b7 01       	movw	r22, r14
    eafc:	90 e0       	ldi	r25, 0x00	; 0
    eafe:	0e 94 8e 76 	call	0xed1c	; 0xed1c <fputc>
    eb02:	31 10       	cpse	r3, r1
    eb04:	3a 94       	dec	r3
    eb06:	f1 e0       	ldi	r31, 0x01	; 1
    eb08:	4f 1a       	sub	r4, r31
    eb0a:	51 08       	sbc	r5, r1
    eb0c:	41 14       	cp	r4, r1
    eb0e:	51 04       	cpc	r5, r1
    eb10:	71 f7       	brne	.-36     	; 0xeaee <vfprintf+0x18c>
    eb12:	e5 c0       	rjmp	.+458    	; 0xecde <vfprintf+0x37c>
    eb14:	84 36       	cpi	r24, 0x64	; 100
    eb16:	11 f0       	breq	.+4      	; 0xeb1c <vfprintf+0x1ba>
    eb18:	89 36       	cpi	r24, 0x69	; 105
    eb1a:	39 f5       	brne	.+78     	; 0xeb6a <vfprintf+0x208>
    eb1c:	f8 01       	movw	r30, r16
    eb1e:	27 ff       	sbrs	r18, 7
    eb20:	07 c0       	rjmp	.+14     	; 0xeb30 <vfprintf+0x1ce>
    eb22:	60 81       	ld	r22, Z
    eb24:	71 81       	ldd	r23, Z+1	; 0x01
    eb26:	82 81       	ldd	r24, Z+2	; 0x02
    eb28:	93 81       	ldd	r25, Z+3	; 0x03
    eb2a:	0c 5f       	subi	r16, 0xFC	; 252
    eb2c:	1f 4f       	sbci	r17, 0xFF	; 255
    eb2e:	08 c0       	rjmp	.+16     	; 0xeb40 <vfprintf+0x1de>
    eb30:	60 81       	ld	r22, Z
    eb32:	71 81       	ldd	r23, Z+1	; 0x01
    eb34:	88 27       	eor	r24, r24
    eb36:	77 fd       	sbrc	r23, 7
    eb38:	80 95       	com	r24
    eb3a:	98 2f       	mov	r25, r24
    eb3c:	0e 5f       	subi	r16, 0xFE	; 254
    eb3e:	1f 4f       	sbci	r17, 0xFF	; 255
    eb40:	2f 76       	andi	r18, 0x6F	; 111
    eb42:	72 2e       	mov	r7, r18
    eb44:	97 ff       	sbrs	r25, 7
    eb46:	09 c0       	rjmp	.+18     	; 0xeb5a <vfprintf+0x1f8>
    eb48:	90 95       	com	r25
    eb4a:	80 95       	com	r24
    eb4c:	70 95       	com	r23
    eb4e:	61 95       	neg	r22
    eb50:	7f 4f       	sbci	r23, 0xFF	; 255
    eb52:	8f 4f       	sbci	r24, 0xFF	; 255
    eb54:	9f 4f       	sbci	r25, 0xFF	; 255
    eb56:	20 68       	ori	r18, 0x80	; 128
    eb58:	72 2e       	mov	r7, r18
    eb5a:	2a e0       	ldi	r18, 0x0A	; 10
    eb5c:	30 e0       	ldi	r19, 0x00	; 0
    eb5e:	a4 01       	movw	r20, r8
    eb60:	0e 94 c6 76 	call	0xed8c	; 0xed8c <__ultoa_invert>
    eb64:	a8 2e       	mov	r10, r24
    eb66:	a8 18       	sub	r10, r8
    eb68:	44 c0       	rjmp	.+136    	; 0xebf2 <vfprintf+0x290>
    eb6a:	85 37       	cpi	r24, 0x75	; 117
    eb6c:	29 f4       	brne	.+10     	; 0xeb78 <vfprintf+0x216>
    eb6e:	2f 7e       	andi	r18, 0xEF	; 239
    eb70:	b2 2e       	mov	r11, r18
    eb72:	2a e0       	ldi	r18, 0x0A	; 10
    eb74:	30 e0       	ldi	r19, 0x00	; 0
    eb76:	25 c0       	rjmp	.+74     	; 0xebc2 <vfprintf+0x260>
    eb78:	f2 2f       	mov	r31, r18
    eb7a:	f9 7f       	andi	r31, 0xF9	; 249
    eb7c:	bf 2e       	mov	r11, r31
    eb7e:	8f 36       	cpi	r24, 0x6F	; 111
    eb80:	c1 f0       	breq	.+48     	; 0xebb2 <vfprintf+0x250>
    eb82:	18 f4       	brcc	.+6      	; 0xeb8a <vfprintf+0x228>
    eb84:	88 35       	cpi	r24, 0x58	; 88
    eb86:	79 f0       	breq	.+30     	; 0xeba6 <vfprintf+0x244>
    eb88:	b4 c0       	rjmp	.+360    	; 0xecf2 <vfprintf+0x390>
    eb8a:	80 37       	cpi	r24, 0x70	; 112
    eb8c:	19 f0       	breq	.+6      	; 0xeb94 <vfprintf+0x232>
    eb8e:	88 37       	cpi	r24, 0x78	; 120
    eb90:	21 f0       	breq	.+8      	; 0xeb9a <vfprintf+0x238>
    eb92:	af c0       	rjmp	.+350    	; 0xecf2 <vfprintf+0x390>
    eb94:	2f 2f       	mov	r18, r31
    eb96:	20 61       	ori	r18, 0x10	; 16
    eb98:	b2 2e       	mov	r11, r18
    eb9a:	b4 fe       	sbrs	r11, 4
    eb9c:	0d c0       	rjmp	.+26     	; 0xebb8 <vfprintf+0x256>
    eb9e:	8b 2d       	mov	r24, r11
    eba0:	84 60       	ori	r24, 0x04	; 4
    eba2:	b8 2e       	mov	r11, r24
    eba4:	09 c0       	rjmp	.+18     	; 0xebb8 <vfprintf+0x256>
    eba6:	24 ff       	sbrs	r18, 4
    eba8:	0a c0       	rjmp	.+20     	; 0xebbe <vfprintf+0x25c>
    ebaa:	9f 2f       	mov	r25, r31
    ebac:	96 60       	ori	r25, 0x06	; 6
    ebae:	b9 2e       	mov	r11, r25
    ebb0:	06 c0       	rjmp	.+12     	; 0xebbe <vfprintf+0x25c>
    ebb2:	28 e0       	ldi	r18, 0x08	; 8
    ebb4:	30 e0       	ldi	r19, 0x00	; 0
    ebb6:	05 c0       	rjmp	.+10     	; 0xebc2 <vfprintf+0x260>
    ebb8:	20 e1       	ldi	r18, 0x10	; 16
    ebba:	30 e0       	ldi	r19, 0x00	; 0
    ebbc:	02 c0       	rjmp	.+4      	; 0xebc2 <vfprintf+0x260>
    ebbe:	20 e1       	ldi	r18, 0x10	; 16
    ebc0:	32 e0       	ldi	r19, 0x02	; 2
    ebc2:	f8 01       	movw	r30, r16
    ebc4:	b7 fe       	sbrs	r11, 7
    ebc6:	07 c0       	rjmp	.+14     	; 0xebd6 <vfprintf+0x274>
    ebc8:	60 81       	ld	r22, Z
    ebca:	71 81       	ldd	r23, Z+1	; 0x01
    ebcc:	82 81       	ldd	r24, Z+2	; 0x02
    ebce:	93 81       	ldd	r25, Z+3	; 0x03
    ebd0:	0c 5f       	subi	r16, 0xFC	; 252
    ebd2:	1f 4f       	sbci	r17, 0xFF	; 255
    ebd4:	06 c0       	rjmp	.+12     	; 0xebe2 <vfprintf+0x280>
    ebd6:	60 81       	ld	r22, Z
    ebd8:	71 81       	ldd	r23, Z+1	; 0x01
    ebda:	80 e0       	ldi	r24, 0x00	; 0
    ebdc:	90 e0       	ldi	r25, 0x00	; 0
    ebde:	0e 5f       	subi	r16, 0xFE	; 254
    ebe0:	1f 4f       	sbci	r17, 0xFF	; 255
    ebe2:	a4 01       	movw	r20, r8
    ebe4:	0e 94 c6 76 	call	0xed8c	; 0xed8c <__ultoa_invert>
    ebe8:	a8 2e       	mov	r10, r24
    ebea:	a8 18       	sub	r10, r8
    ebec:	fb 2d       	mov	r31, r11
    ebee:	ff 77       	andi	r31, 0x7F	; 127
    ebf0:	7f 2e       	mov	r7, r31
    ebf2:	76 fe       	sbrs	r7, 6
    ebf4:	0b c0       	rjmp	.+22     	; 0xec0c <vfprintf+0x2aa>
    ebf6:	37 2d       	mov	r19, r7
    ebf8:	3e 7f       	andi	r19, 0xFE	; 254
    ebfa:	a5 14       	cp	r10, r5
    ebfc:	50 f4       	brcc	.+20     	; 0xec12 <vfprintf+0x2b0>
    ebfe:	74 fe       	sbrs	r7, 4
    ec00:	0a c0       	rjmp	.+20     	; 0xec16 <vfprintf+0x2b4>
    ec02:	72 fc       	sbrc	r7, 2
    ec04:	08 c0       	rjmp	.+16     	; 0xec16 <vfprintf+0x2b4>
    ec06:	37 2d       	mov	r19, r7
    ec08:	3e 7e       	andi	r19, 0xEE	; 238
    ec0a:	05 c0       	rjmp	.+10     	; 0xec16 <vfprintf+0x2b4>
    ec0c:	ba 2c       	mov	r11, r10
    ec0e:	37 2d       	mov	r19, r7
    ec10:	03 c0       	rjmp	.+6      	; 0xec18 <vfprintf+0x2b6>
    ec12:	ba 2c       	mov	r11, r10
    ec14:	01 c0       	rjmp	.+2      	; 0xec18 <vfprintf+0x2b6>
    ec16:	b5 2c       	mov	r11, r5
    ec18:	34 ff       	sbrs	r19, 4
    ec1a:	0d c0       	rjmp	.+26     	; 0xec36 <vfprintf+0x2d4>
    ec1c:	fe 01       	movw	r30, r28
    ec1e:	ea 0d       	add	r30, r10
    ec20:	f1 1d       	adc	r31, r1
    ec22:	80 81       	ld	r24, Z
    ec24:	80 33       	cpi	r24, 0x30	; 48
    ec26:	11 f4       	brne	.+4      	; 0xec2c <vfprintf+0x2ca>
    ec28:	39 7e       	andi	r19, 0xE9	; 233
    ec2a:	09 c0       	rjmp	.+18     	; 0xec3e <vfprintf+0x2dc>
    ec2c:	32 ff       	sbrs	r19, 2
    ec2e:	06 c0       	rjmp	.+12     	; 0xec3c <vfprintf+0x2da>
    ec30:	b3 94       	inc	r11
    ec32:	b3 94       	inc	r11
    ec34:	04 c0       	rjmp	.+8      	; 0xec3e <vfprintf+0x2dc>
    ec36:	83 2f       	mov	r24, r19
    ec38:	86 78       	andi	r24, 0x86	; 134
    ec3a:	09 f0       	breq	.+2      	; 0xec3e <vfprintf+0x2dc>
    ec3c:	b3 94       	inc	r11
    ec3e:	33 fd       	sbrc	r19, 3
    ec40:	13 c0       	rjmp	.+38     	; 0xec68 <vfprintf+0x306>
    ec42:	30 ff       	sbrs	r19, 0
    ec44:	06 c0       	rjmp	.+12     	; 0xec52 <vfprintf+0x2f0>
    ec46:	5a 2c       	mov	r5, r10
    ec48:	b3 14       	cp	r11, r3
    ec4a:	18 f4       	brcc	.+6      	; 0xec52 <vfprintf+0x2f0>
    ec4c:	53 0c       	add	r5, r3
    ec4e:	5b 18       	sub	r5, r11
    ec50:	b3 2c       	mov	r11, r3
    ec52:	b3 14       	cp	r11, r3
    ec54:	68 f4       	brcc	.+26     	; 0xec70 <vfprintf+0x30e>
    ec56:	b7 01       	movw	r22, r14
    ec58:	80 e2       	ldi	r24, 0x20	; 32
    ec5a:	90 e0       	ldi	r25, 0x00	; 0
    ec5c:	3c 87       	std	Y+12, r19	; 0x0c
    ec5e:	0e 94 8e 76 	call	0xed1c	; 0xed1c <fputc>
    ec62:	b3 94       	inc	r11
    ec64:	3c 85       	ldd	r19, Y+12	; 0x0c
    ec66:	f5 cf       	rjmp	.-22     	; 0xec52 <vfprintf+0x2f0>
    ec68:	b3 14       	cp	r11, r3
    ec6a:	10 f4       	brcc	.+4      	; 0xec70 <vfprintf+0x30e>
    ec6c:	3b 18       	sub	r3, r11
    ec6e:	01 c0       	rjmp	.+2      	; 0xec72 <vfprintf+0x310>
    ec70:	31 2c       	mov	r3, r1
    ec72:	34 ff       	sbrs	r19, 4
    ec74:	12 c0       	rjmp	.+36     	; 0xec9a <vfprintf+0x338>
    ec76:	b7 01       	movw	r22, r14
    ec78:	80 e3       	ldi	r24, 0x30	; 48
    ec7a:	90 e0       	ldi	r25, 0x00	; 0
    ec7c:	3c 87       	std	Y+12, r19	; 0x0c
    ec7e:	0e 94 8e 76 	call	0xed1c	; 0xed1c <fputc>
    ec82:	3c 85       	ldd	r19, Y+12	; 0x0c
    ec84:	32 ff       	sbrs	r19, 2
    ec86:	17 c0       	rjmp	.+46     	; 0xecb6 <vfprintf+0x354>
    ec88:	31 fd       	sbrc	r19, 1
    ec8a:	03 c0       	rjmp	.+6      	; 0xec92 <vfprintf+0x330>
    ec8c:	88 e7       	ldi	r24, 0x78	; 120
    ec8e:	90 e0       	ldi	r25, 0x00	; 0
    ec90:	02 c0       	rjmp	.+4      	; 0xec96 <vfprintf+0x334>
    ec92:	88 e5       	ldi	r24, 0x58	; 88
    ec94:	90 e0       	ldi	r25, 0x00	; 0
    ec96:	b7 01       	movw	r22, r14
    ec98:	0c c0       	rjmp	.+24     	; 0xecb2 <vfprintf+0x350>
    ec9a:	83 2f       	mov	r24, r19
    ec9c:	86 78       	andi	r24, 0x86	; 134
    ec9e:	59 f0       	breq	.+22     	; 0xecb6 <vfprintf+0x354>
    eca0:	31 ff       	sbrs	r19, 1
    eca2:	02 c0       	rjmp	.+4      	; 0xeca8 <vfprintf+0x346>
    eca4:	8b e2       	ldi	r24, 0x2B	; 43
    eca6:	01 c0       	rjmp	.+2      	; 0xecaa <vfprintf+0x348>
    eca8:	80 e2       	ldi	r24, 0x20	; 32
    ecaa:	37 fd       	sbrc	r19, 7
    ecac:	8d e2       	ldi	r24, 0x2D	; 45
    ecae:	b7 01       	movw	r22, r14
    ecb0:	90 e0       	ldi	r25, 0x00	; 0
    ecb2:	0e 94 8e 76 	call	0xed1c	; 0xed1c <fputc>
    ecb6:	a5 14       	cp	r10, r5
    ecb8:	38 f4       	brcc	.+14     	; 0xecc8 <vfprintf+0x366>
    ecba:	b7 01       	movw	r22, r14
    ecbc:	80 e3       	ldi	r24, 0x30	; 48
    ecbe:	90 e0       	ldi	r25, 0x00	; 0
    ecc0:	0e 94 8e 76 	call	0xed1c	; 0xed1c <fputc>
    ecc4:	5a 94       	dec	r5
    ecc6:	f7 cf       	rjmp	.-18     	; 0xecb6 <vfprintf+0x354>
    ecc8:	aa 94       	dec	r10
    ecca:	f4 01       	movw	r30, r8
    eccc:	ea 0d       	add	r30, r10
    ecce:	f1 1d       	adc	r31, r1
    ecd0:	80 81       	ld	r24, Z
    ecd2:	b7 01       	movw	r22, r14
    ecd4:	90 e0       	ldi	r25, 0x00	; 0
    ecd6:	0e 94 8e 76 	call	0xed1c	; 0xed1c <fputc>
    ecda:	a1 10       	cpse	r10, r1
    ecdc:	f5 cf       	rjmp	.-22     	; 0xecc8 <vfprintf+0x366>
    ecde:	33 20       	and	r3, r3
    ece0:	09 f4       	brne	.+2      	; 0xece4 <vfprintf+0x382>
    ece2:	51 ce       	rjmp	.-862    	; 0xe986 <vfprintf+0x24>
    ece4:	b7 01       	movw	r22, r14
    ece6:	80 e2       	ldi	r24, 0x20	; 32
    ece8:	90 e0       	ldi	r25, 0x00	; 0
    ecea:	0e 94 8e 76 	call	0xed1c	; 0xed1c <fputc>
    ecee:	3a 94       	dec	r3
    ecf0:	f6 cf       	rjmp	.-20     	; 0xecde <vfprintf+0x37c>
    ecf2:	f7 01       	movw	r30, r14
    ecf4:	86 81       	ldd	r24, Z+6	; 0x06
    ecf6:	97 81       	ldd	r25, Z+7	; 0x07
    ecf8:	02 c0       	rjmp	.+4      	; 0xecfe <vfprintf+0x39c>
    ecfa:	8f ef       	ldi	r24, 0xFF	; 255
    ecfc:	9f ef       	ldi	r25, 0xFF	; 255
    ecfe:	2c 96       	adiw	r28, 0x0c	; 12
    ed00:	e2 e1       	ldi	r30, 0x12	; 18
    ed02:	0c 94 40 77 	jmp	0xee80	; 0xee80 <__epilogue_restores__>

0000ed06 <strnlen>:
    ed06:	fc 01       	movw	r30, r24
    ed08:	61 50       	subi	r22, 0x01	; 1
    ed0a:	70 40       	sbci	r23, 0x00	; 0
    ed0c:	01 90       	ld	r0, Z+
    ed0e:	01 10       	cpse	r0, r1
    ed10:	d8 f7       	brcc	.-10     	; 0xed08 <strnlen+0x2>
    ed12:	80 95       	com	r24
    ed14:	90 95       	com	r25
    ed16:	8e 0f       	add	r24, r30
    ed18:	9f 1f       	adc	r25, r31
    ed1a:	08 95       	ret

0000ed1c <fputc>:
    ed1c:	0f 93       	push	r16
    ed1e:	1f 93       	push	r17
    ed20:	cf 93       	push	r28
    ed22:	df 93       	push	r29
    ed24:	fb 01       	movw	r30, r22
    ed26:	23 81       	ldd	r18, Z+3	; 0x03
    ed28:	21 fd       	sbrc	r18, 1
    ed2a:	03 c0       	rjmp	.+6      	; 0xed32 <fputc+0x16>
    ed2c:	8f ef       	ldi	r24, 0xFF	; 255
    ed2e:	9f ef       	ldi	r25, 0xFF	; 255
    ed30:	28 c0       	rjmp	.+80     	; 0xed82 <fputc+0x66>
    ed32:	22 ff       	sbrs	r18, 2
    ed34:	16 c0       	rjmp	.+44     	; 0xed62 <fputc+0x46>
    ed36:	46 81       	ldd	r20, Z+6	; 0x06
    ed38:	57 81       	ldd	r21, Z+7	; 0x07
    ed3a:	24 81       	ldd	r18, Z+4	; 0x04
    ed3c:	35 81       	ldd	r19, Z+5	; 0x05
    ed3e:	42 17       	cp	r20, r18
    ed40:	53 07       	cpc	r21, r19
    ed42:	44 f4       	brge	.+16     	; 0xed54 <fputc+0x38>
    ed44:	a0 81       	ld	r26, Z
    ed46:	b1 81       	ldd	r27, Z+1	; 0x01
    ed48:	9d 01       	movw	r18, r26
    ed4a:	2f 5f       	subi	r18, 0xFF	; 255
    ed4c:	3f 4f       	sbci	r19, 0xFF	; 255
    ed4e:	31 83       	std	Z+1, r19	; 0x01
    ed50:	20 83       	st	Z, r18
    ed52:	8c 93       	st	X, r24
    ed54:	26 81       	ldd	r18, Z+6	; 0x06
    ed56:	37 81       	ldd	r19, Z+7	; 0x07
    ed58:	2f 5f       	subi	r18, 0xFF	; 255
    ed5a:	3f 4f       	sbci	r19, 0xFF	; 255
    ed5c:	37 83       	std	Z+7, r19	; 0x07
    ed5e:	26 83       	std	Z+6, r18	; 0x06
    ed60:	10 c0       	rjmp	.+32     	; 0xed82 <fputc+0x66>
    ed62:	eb 01       	movw	r28, r22
    ed64:	09 2f       	mov	r16, r25
    ed66:	18 2f       	mov	r17, r24
    ed68:	00 84       	ldd	r0, Z+8	; 0x08
    ed6a:	f1 85       	ldd	r31, Z+9	; 0x09
    ed6c:	e0 2d       	mov	r30, r0
    ed6e:	09 95       	icall
    ed70:	89 2b       	or	r24, r25
    ed72:	e1 f6       	brne	.-72     	; 0xed2c <fputc+0x10>
    ed74:	8e 81       	ldd	r24, Y+6	; 0x06
    ed76:	9f 81       	ldd	r25, Y+7	; 0x07
    ed78:	01 96       	adiw	r24, 0x01	; 1
    ed7a:	9f 83       	std	Y+7, r25	; 0x07
    ed7c:	8e 83       	std	Y+6, r24	; 0x06
    ed7e:	81 2f       	mov	r24, r17
    ed80:	90 2f       	mov	r25, r16
    ed82:	df 91       	pop	r29
    ed84:	cf 91       	pop	r28
    ed86:	1f 91       	pop	r17
    ed88:	0f 91       	pop	r16
    ed8a:	08 95       	ret

0000ed8c <__ultoa_invert>:
    ed8c:	fa 01       	movw	r30, r20
    ed8e:	aa 27       	eor	r26, r26
    ed90:	28 30       	cpi	r18, 0x08	; 8
    ed92:	51 f1       	breq	.+84     	; 0xede8 <__ultoa_invert+0x5c>
    ed94:	20 31       	cpi	r18, 0x10	; 16
    ed96:	81 f1       	breq	.+96     	; 0xedf8 <__ultoa_invert+0x6c>
    ed98:	e8 94       	clt
    ed9a:	6f 93       	push	r22
    ed9c:	6e 7f       	andi	r22, 0xFE	; 254
    ed9e:	6e 5f       	subi	r22, 0xFE	; 254
    eda0:	7f 4f       	sbci	r23, 0xFF	; 255
    eda2:	8f 4f       	sbci	r24, 0xFF	; 255
    eda4:	9f 4f       	sbci	r25, 0xFF	; 255
    eda6:	af 4f       	sbci	r26, 0xFF	; 255
    eda8:	b1 e0       	ldi	r27, 0x01	; 1
    edaa:	3e d0       	rcall	.+124    	; 0xee28 <__ultoa_invert+0x9c>
    edac:	b4 e0       	ldi	r27, 0x04	; 4
    edae:	3c d0       	rcall	.+120    	; 0xee28 <__ultoa_invert+0x9c>
    edb0:	67 0f       	add	r22, r23
    edb2:	78 1f       	adc	r23, r24
    edb4:	89 1f       	adc	r24, r25
    edb6:	9a 1f       	adc	r25, r26
    edb8:	a1 1d       	adc	r26, r1
    edba:	68 0f       	add	r22, r24
    edbc:	79 1f       	adc	r23, r25
    edbe:	8a 1f       	adc	r24, r26
    edc0:	91 1d       	adc	r25, r1
    edc2:	a1 1d       	adc	r26, r1
    edc4:	6a 0f       	add	r22, r26
    edc6:	71 1d       	adc	r23, r1
    edc8:	81 1d       	adc	r24, r1
    edca:	91 1d       	adc	r25, r1
    edcc:	a1 1d       	adc	r26, r1
    edce:	20 d0       	rcall	.+64     	; 0xee10 <__ultoa_invert+0x84>
    edd0:	09 f4       	brne	.+2      	; 0xedd4 <__ultoa_invert+0x48>
    edd2:	68 94       	set
    edd4:	3f 91       	pop	r19
    edd6:	2a e0       	ldi	r18, 0x0A	; 10
    edd8:	26 9f       	mul	r18, r22
    edda:	11 24       	eor	r1, r1
    eddc:	30 19       	sub	r19, r0
    edde:	30 5d       	subi	r19, 0xD0	; 208
    ede0:	31 93       	st	Z+, r19
    ede2:	de f6       	brtc	.-74     	; 0xed9a <__ultoa_invert+0xe>
    ede4:	cf 01       	movw	r24, r30
    ede6:	08 95       	ret
    ede8:	46 2f       	mov	r20, r22
    edea:	47 70       	andi	r20, 0x07	; 7
    edec:	40 5d       	subi	r20, 0xD0	; 208
    edee:	41 93       	st	Z+, r20
    edf0:	b3 e0       	ldi	r27, 0x03	; 3
    edf2:	0f d0       	rcall	.+30     	; 0xee12 <__ultoa_invert+0x86>
    edf4:	c9 f7       	brne	.-14     	; 0xede8 <__ultoa_invert+0x5c>
    edf6:	f6 cf       	rjmp	.-20     	; 0xede4 <__ultoa_invert+0x58>
    edf8:	46 2f       	mov	r20, r22
    edfa:	4f 70       	andi	r20, 0x0F	; 15
    edfc:	40 5d       	subi	r20, 0xD0	; 208
    edfe:	4a 33       	cpi	r20, 0x3A	; 58
    ee00:	18 f0       	brcs	.+6      	; 0xee08 <__ultoa_invert+0x7c>
    ee02:	49 5d       	subi	r20, 0xD9	; 217
    ee04:	31 fd       	sbrc	r19, 1
    ee06:	40 52       	subi	r20, 0x20	; 32
    ee08:	41 93       	st	Z+, r20
    ee0a:	02 d0       	rcall	.+4      	; 0xee10 <__ultoa_invert+0x84>
    ee0c:	a9 f7       	brne	.-22     	; 0xedf8 <__ultoa_invert+0x6c>
    ee0e:	ea cf       	rjmp	.-44     	; 0xede4 <__ultoa_invert+0x58>
    ee10:	b4 e0       	ldi	r27, 0x04	; 4
    ee12:	a6 95       	lsr	r26
    ee14:	97 95       	ror	r25
    ee16:	87 95       	ror	r24
    ee18:	77 95       	ror	r23
    ee1a:	67 95       	ror	r22
    ee1c:	ba 95       	dec	r27
    ee1e:	c9 f7       	brne	.-14     	; 0xee12 <__ultoa_invert+0x86>
    ee20:	00 97       	sbiw	r24, 0x00	; 0
    ee22:	61 05       	cpc	r22, r1
    ee24:	71 05       	cpc	r23, r1
    ee26:	08 95       	ret
    ee28:	9b 01       	movw	r18, r22
    ee2a:	ac 01       	movw	r20, r24
    ee2c:	0a 2e       	mov	r0, r26
    ee2e:	06 94       	lsr	r0
    ee30:	57 95       	ror	r21
    ee32:	47 95       	ror	r20
    ee34:	37 95       	ror	r19
    ee36:	27 95       	ror	r18
    ee38:	ba 95       	dec	r27
    ee3a:	c9 f7       	brne	.-14     	; 0xee2e <__ultoa_invert+0xa2>
    ee3c:	62 0f       	add	r22, r18
    ee3e:	73 1f       	adc	r23, r19
    ee40:	84 1f       	adc	r24, r20
    ee42:	95 1f       	adc	r25, r21
    ee44:	a0 1d       	adc	r26, r0
    ee46:	08 95       	ret

0000ee48 <__prologue_saves__>:
    ee48:	2f 92       	push	r2
    ee4a:	3f 92       	push	r3
    ee4c:	4f 92       	push	r4
    ee4e:	5f 92       	push	r5
    ee50:	6f 92       	push	r6
    ee52:	7f 92       	push	r7
    ee54:	8f 92       	push	r8
    ee56:	9f 92       	push	r9
    ee58:	af 92       	push	r10
    ee5a:	bf 92       	push	r11
    ee5c:	cf 92       	push	r12
    ee5e:	df 92       	push	r13
    ee60:	ef 92       	push	r14
    ee62:	ff 92       	push	r15
    ee64:	0f 93       	push	r16
    ee66:	1f 93       	push	r17
    ee68:	cf 93       	push	r28
    ee6a:	df 93       	push	r29
    ee6c:	cd b7       	in	r28, 0x3d	; 61
    ee6e:	de b7       	in	r29, 0x3e	; 62
    ee70:	ca 1b       	sub	r28, r26
    ee72:	db 0b       	sbc	r29, r27
    ee74:	0f b6       	in	r0, 0x3f	; 63
    ee76:	f8 94       	cli
    ee78:	de bf       	out	0x3e, r29	; 62
    ee7a:	0f be       	out	0x3f, r0	; 63
    ee7c:	cd bf       	out	0x3d, r28	; 61
    ee7e:	09 94       	ijmp

0000ee80 <__epilogue_restores__>:
    ee80:	2a 88       	ldd	r2, Y+18	; 0x12
    ee82:	39 88       	ldd	r3, Y+17	; 0x11
    ee84:	48 88       	ldd	r4, Y+16	; 0x10
    ee86:	5f 84       	ldd	r5, Y+15	; 0x0f
    ee88:	6e 84       	ldd	r6, Y+14	; 0x0e
    ee8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    ee8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    ee8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    ee90:	aa 84       	ldd	r10, Y+10	; 0x0a
    ee92:	b9 84       	ldd	r11, Y+9	; 0x09
    ee94:	c8 84       	ldd	r12, Y+8	; 0x08
    ee96:	df 80       	ldd	r13, Y+7	; 0x07
    ee98:	ee 80       	ldd	r14, Y+6	; 0x06
    ee9a:	fd 80       	ldd	r15, Y+5	; 0x05
    ee9c:	0c 81       	ldd	r16, Y+4	; 0x04
    ee9e:	1b 81       	ldd	r17, Y+3	; 0x03
    eea0:	aa 81       	ldd	r26, Y+2	; 0x02
    eea2:	b9 81       	ldd	r27, Y+1	; 0x01
    eea4:	ce 0f       	add	r28, r30
    eea6:	d1 1d       	adc	r29, r1
    eea8:	0f b6       	in	r0, 0x3f	; 63
    eeaa:	f8 94       	cli
    eeac:	de bf       	out	0x3e, r29	; 62
    eeae:	0f be       	out	0x3f, r0	; 63
    eeb0:	cd bf       	out	0x3d, r28	; 61
    eeb2:	ed 01       	movw	r28, r26
    eeb4:	08 95       	ret

0000eeb6 <_exit>:
    eeb6:	f8 94       	cli

0000eeb8 <__stop_program>:
    eeb8:	ff cf       	rjmp	.-2      	; 0xeeb8 <__stop_program>
