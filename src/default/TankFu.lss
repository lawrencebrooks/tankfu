
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000c616  0000c716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000c616  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ef1  00800106  00800106  0000c726  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000c71c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000cc98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000ceee  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005d0  00000000  00000000  0000cf00  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008b9d  00000000  00000000  0000d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152d  00000000  00000000  0001606d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ebc  00000000  00000000  0001759a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001354  00000000  00000000  00019458  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001b3e  00000000  00000000  0001a7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007e92  00000000  00000000  0001c2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000688  00000000  00000000  00024180  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 34 	jmp	0x6942	; 0x6942 <__ctors_end>
       4:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
       8:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
       c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      10:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      14:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      18:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      1c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      20:	0c 94 0d 39 	jmp	0x721a	; 0x721a <__vector_8>
      24:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      28:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      2c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      30:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      34:	0c 94 e4 36 	jmp	0x6dc8	; 0x6dc8 <__vector_13>
      38:	0c 94 24 37 	jmp	0x6e48	; 0x6e48 <__vector_14>
      3c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      40:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      44:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      48:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      4c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      50:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      54:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      58:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      5c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      60:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      64:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      68:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>
      6c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	6f 3a 72 3a cd 3a d1 3a d9 3a 7a 3a 7f 3a 84 3a     o:r:.:.:.:z:.:.:
      ce:	e1 3a 87 3a 8a 3a 8d 3a ca 3a                       .:.:.:.:.:

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <default_scores>:
      e4:	00 01 14 0d 01 02 14 0e 02 03 14 0f 03 04 14 10     ................
      f4:	04 05 14 11 05 06 14 12 06 00 14 13 00 00           ..............

00000102 <default_handles>:
     102:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     112:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000120 <strLevels>:
     120:	20 20 20 42 6f 6f 74 20 43 61 6d 70 20 20 20 00        Boot Camp   .
     130:	20 54 68 65 20 42 72 69 63 6b 79 61 72 64 20 00      The Brickyard .
     140:	20 20 20 56 65 6c 6f 63 69 74 79 20 20 20 20 00        Velocity    .
     150:	20 20 20 20 20 4d 61 7a 65 20 20 20 20 20 20 00          Maze      .
     160:	20 20 20 52 69 63 68 6f 63 68 65 74 20 20 20 00        Richochet   .
     170:	20 54 68 65 20 48 6f 6e 65 79 20 50 6f 74 20 00      The Honey Pot .
     180:	20 20 46 6f 63 61 6c 20 50 6f 69 6e 74 20 20 00       Focal Point  .
     190:	49 74 27 73 20 4e 6f 74 20 46 61 69 72 21 20 00     It's Not Fair! .
     1a0:	20 20 4d 75 63 68 20 42 65 74 74 65 72 20 20 00       Much Better  .
     1b0:	20 20 54 68 65 20 48 61 72 62 6f 75 72 20 20 00       The Harbour  .

000001c0 <strPaused>:
     1c0:	50 61 75 73 65 64 00                                Paused.

000001c7 <strExit>:
     1c7:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

000001d0 <strTotal>:
     1d0:	54 6f 74 61 6c 3a 00                                Total:.

000001d7 <strScore>:
     1d7:	53 63 6f 72 65 3a 00                                Score:.

000001de <strBanterClear>:
     1de:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

000001ed <banter_map>:
     1ed:	53 75 63 68 20 46 61 69 6c 20 20 20 20 20 00 4c     Such Fail     .L
     1fd:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     20d:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     21d:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     22d:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     23d:	2a 20 20 20 20 20 20 20 20 00 4e 6f 6f 62 20 20     *        .Noob  
     24d:	20 20 20 20 20 20 20 20 00 54 68 61 74 27 73 20             .That's 
     25d:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     26d:	70 3f 20 20 20 20 00 50 66 66 74 20 20 20 20 20     p?    .Pfft     
     27d:	20 20 20 20 20 00                                        .

00000283 <strFinalScore>:
     283:	46 69 6e 61 6c 20 53 63 6f 72 65 00                 Final Score.

0000028f <strBy>:
     28f:	42 79 00                                            By.

00000292 <strOwns>:
     292:	4f 77 6e 73 00                                      Owns.

00000297 <strChangeHandle>:
     297:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

000002a6 <strReset>:
     2a6:	52 65 73 65 74 20 44 65 66 61 75 6c 74 73 20 2d     Reset Defaults -
     2b6:	20 53 4c 20 28 35 73 29 00                           SL (5s).

000002bf <strCancelHandle>:
     2bf:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

000002ca <strConfirmHandle>:
     2ca:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

000002d6 <strSelectHandle>:
     2d6:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

000002e1 <strPlayer2>:
     2e1:	50 32 00                                            P2.

000002e4 <strPlayer1>:
     2e4:	50 31 00                                            P1.

000002e7 <strVertSep>:
     2e7:	7c 00                                               |.

000002e9 <strUnderline>:
     2e9:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

000002f5 <strHandlesTitle>:
     2f5:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

00000301 <strHighscores>:
     301:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

0000030b <str2Player>:
     30b:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

0000031c <str1Player>:
     31c:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

0000032a <strCopyright>:
     32a:	32 30 31 35 20 4c 61 77 72 65 6e 63 65 20 42 72     2015 Lawrence Br
     33a:	6f 6f 6b 73 00                                      ooks.

0000033f <my_patches>:
     33f:	02 31 12 00 00 4f 07 50 07 02 4c 0b 00 00 e3 06     .1...O.P..L.....
     34f:	e4 06 02 05 09 00 00 45 02 46 02 02 54 07 00 00     .......E.F..T...
     35f:	af 01 b0 01 02 52 07 00 00 00 00 01 00 02 50 07     .....R........P.
     36f:	00 00 00 00 01 00 02 30 05 00 00 1e 02 1f 02 02     .......0........
     37f:	be 03 00 00 70 01 71 01 02 05 09 00 00 45 02 46     ....p.q......E.F
     38f:	02 02 ba 03 00 00 00 00 01 00 02 4c 0b 00 00 e3     ...........L....
     39f:	06 e4 06 02 b6 03 00 00 00 00 01 00 02 b4 03 00     ................
     3af:	00 00 00 00 00                                      .....

000003b4 <ad_silence>:
	...

000003b6 <ad_tracks>:
	...

000003b8 <ad_tank_explode>:
	...

000003ba <ad_splash>:
	...

000003bc <ad_rocket>:
	...

000003be <ad_navigate>:
     3be:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     3ce:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     3de:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     3ee:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     3fe:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     40e:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     41e:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     42e:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     43e:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     44e:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     45e:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     46e:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     47e:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     48e:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     49e:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     4ae:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     4be:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     4ce:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     4de:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     4ee:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     4fe:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     50e:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     51e:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000530 <ad_metal>:
     530:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     540:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     550:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     560:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     570:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     580:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     590:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     5a0:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     5b0:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     5c0:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     5d0:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     5e0:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     5f0:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     600:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     610:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     620:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     630:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     640:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     650:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     660:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     670:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     680:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     690:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     6a0:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     6b0:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     6c0:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     6d0:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     6e0:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     6f0:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     700:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     710:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     720:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     730:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     740:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

00000750 <ad_level_start>:
	...

00000752 <ad_level_clear>:
	...

00000754 <ad_item>:
     754:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     764:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     774:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     784:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     794:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     7a4:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     7b4:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     7c4:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     7d4:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     7e4:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     7f4:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     804:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     814:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     824:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     834:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     844:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     854:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     864:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     874:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     884:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     894:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     8a4:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     8b4:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     8c4:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     8d4:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     8e4:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     8f4:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00000905 <ad_cannonball>:
     905:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     915:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     925:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     935:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     945:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     955:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     965:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     975:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     985:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     995:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     9a5:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     9b5:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     9c5:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     9d5:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     9e5:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     9f5:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     a05:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     a15:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     a25:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     a35:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     a45:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     a55:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     a65:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     a75:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     a85:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     a95:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     aa5:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     ab5:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     ac5:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     ad5:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     ae5:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     af5:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     b05:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     b15:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     b25:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     b35:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b45:	ff ff ff ff ff 00 00                                .......

00000b4c <ad_brick_explode>:
     b4c:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     b5c:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     b6c:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     b7c:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     b8c:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     b9c:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     bac:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     bbc:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     bcc:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     bdc:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     bec:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     bfc:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     c0c:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     c1c:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     c2c:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     c3c:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     c4c:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     c5c:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     c6c:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     c7c:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     c8c:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     c9c:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     cac:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     cbc:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     ccc:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     cdc:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     cec:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     cfc:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     d0c:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     d1c:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     d2c:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     d3c:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
     d4c:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
     d5c:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
     d6c:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
     d7c:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
     d8c:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
     d9c:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
     dac:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
     dbc:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
     dcc:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
     ddc:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
     dec:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
     dfc:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
     e0c:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
     e1c:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
     e2c:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
     e3c:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
     e4c:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
     e5c:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
     e6c:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
     e7c:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
     e8c:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
     e9c:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
     eac:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
     ebc:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
     ecc:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
     edc:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
     eec:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
     efc:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
     f0c:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
     f1c:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
     f2c:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
     f3c:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
     f4c:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
     f5c:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
     f6c:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
     f7c:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
     f8c:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
     f9c:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
     fac:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
     fbc:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
     fcc:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
     fdc:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
     fec:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
     ffc:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    100c:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    101c:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    102c:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    103c:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    104c:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    105c:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    106c:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    107c:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    108c:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    109c:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    10ac:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    10bc:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    10cc:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    10dc:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    10ec:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    10fc:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    110c:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    111c:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    112c:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    113c:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    114c:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    115c:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    116c:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    117c:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    118c:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    119c:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    11ac:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    11bc:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    11cc:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    11dc:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    11ec:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    11fc:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    120c:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    121c:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    122c:	04 04 02 01 00                                      .....

00001231 <ad_banter>:
    1231:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1241:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    1251:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    1261:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    1271:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    1281:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    1291:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    12a1:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    12b1:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    12c1:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    12d1:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    12e1:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    12f1:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1301:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1311:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1321:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1331:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1341:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    1351:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    1361:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    1371:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    1381:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    1391:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    13a1:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    13b1:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    13c1:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    13d1:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    13e1:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    13f1:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1401:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1411:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1421:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1431:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1441:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    1451:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    1461:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    1471:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    1481:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    1491:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    14a1:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    14b1:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    14c1:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    14d1:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    14e1:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    14f1:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1501:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1511:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1521:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1531:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1541:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    1551:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    1561:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    1571:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    1581:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    1591:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    15a1:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    15b1:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    15c1:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    15d1:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    15e1:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    15f1:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1601:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1611:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1621:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1631:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1641:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    1651:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    1661:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    1671:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    1681:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    1691:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    16a1:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    16b1:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    16c1:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    16d1:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    16e1:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    16f1:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    1701:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    1711:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    1721:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    1731:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    1741:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    1751:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    1761:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    1771:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    1781:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    1791:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    17a1:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    17b1:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    17c1:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    17d1:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    17e1:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    17f1:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    1801:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    1811:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    1821:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    1831:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    1841:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    1851:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    1861:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    1871:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    1881:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    1891:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    18a1:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    18b1:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    18c1:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    18d1:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    18e1:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    18f1:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    1901:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    1911:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    1921:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    1931:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    1941:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    1951:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    1961:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    1971:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

00001982 <level_data>:
    1982:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1992:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    19ba:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    19d2:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    19e2:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    19f2:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    1a0e:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    1a1e:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1a2e:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    1a4a:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    1a6a:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    1a7a:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    1a8a:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    1a9a:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    1aaa:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    1aba:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    1aca:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    1ada:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    1aea:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    1afa:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    1b0a:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    1b1a:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    1b2a:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    1b3a:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    1b52:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1b62:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    1b7e:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    1b96:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1bb2:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    1bc2:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1bd2:	06 02 02 02 02 05 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1bee:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    1bfe:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1c0e:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    1c2e:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1c4e:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c5e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c6e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c7e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c8e:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1caa:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cc6:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1cd6:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1ce6:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1cf6:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1d06:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    1d16:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    1d26:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    1d36:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1d46:	00 00 01 01 01 00 00 01 01 42 4d 4d 42 01 01 00     .........BMMB...
    1d56:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1d66:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1d76:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    1d86:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    1d96:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    1da6:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    1db6:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    1dc6:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    1dd6:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1de6:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    1df6:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    1e06:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    1e16:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1e26:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1e36:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    1e46:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1e56:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1e66:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    1e76:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    1e86:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    1e96:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1ea6:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1eb6:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    1ec6:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1ed6:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1ee6:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    1ef6:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    1f06:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f1e:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1f3a:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    1f4a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f5a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f6a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f7a:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f96:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fb6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fd2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ff2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    200e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    202e:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    2046:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    2062:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2072:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    2082:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    2092:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    20a2:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    20b2:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    20c2:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    20d2:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    20e2:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    20f2:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2102:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2112:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2122:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2132:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2142:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2152:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2162:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2172:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    218e:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    21b2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21d2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21ee:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    220e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    222a:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    223a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    224a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    225a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    226a:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    227a:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    228a:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    229a:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    22aa:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    22ba:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    22ca:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    22da:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    22ea:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    22fa:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    230a:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    231a:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    232a:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    233a:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    234a:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    235a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2376:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    238e:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    239e:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    23ae:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    23be:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    23d6:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    23e6:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    23f6:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2406:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    2416:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2426:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    243e:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d     .......BMMM..MMM
    244e:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    245e:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    2476:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    2486:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    2496:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    24a6:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    24b6:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    24c6:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    24d6:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    24ee:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    24fe:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2516:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2526:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2536:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2546:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2556:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    2572:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    258e:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    25ae:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    25be:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25ce:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    25ea:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    260a:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    2626:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    2646:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2656:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2666:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    2676:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    268e:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    269e:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    26ae:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    26be:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    26ce:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    26de:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    26fa:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    270a:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    271a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    272a:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    274a:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    2766:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    2786:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    279e:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    27ae:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27ca:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    27e6:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    2806:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2816:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2826:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2836:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2846:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    2856:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    286e:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    287e:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    288e:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    289e:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    28ae:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    28be:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    28ce:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    28de:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    28ee:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    2916:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2926:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2936:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    2946:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    295e:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    296e:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    297e:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    298e:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    299e:	4d 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     MMMM............
    29ae:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    29be:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    29d6:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    29e6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    29f6:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2a06:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    2a16:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2a26:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    2a36:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    2a46:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    2a56:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    2a66:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    2a76:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    2a86:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2a96:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    2aa6:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    2ab6:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2ad2:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2af6:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b06:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b16:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b26:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b36:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    2b46:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2b5e:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    2b6e:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    2b7e:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2b8e:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    2b9e:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2bae:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    2bbe:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    2bce:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2bde:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2bee:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2bfe:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2c22:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c3e:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    2c4e:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    2c5e:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    2c6e:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    2c7e:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    2c8e:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    2c9e:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2cae:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2cc6:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2cd6:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cf2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d12:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    2d22:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2d32:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    2d42:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2d52:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    2d62:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    2d72:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    2d82:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2d92:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    2da2:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2db2:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2dc2:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2dd2:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2de2:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2df2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e02:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e12:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e22:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e3e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e5a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e7a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e96:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2ea6:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2eb6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ed2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2eea:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    2efa:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    2f0a:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    2f1a:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    2f2a:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    2f3a:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    2f4a:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    2f5a:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    2f6a:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    2f7a:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    2f8a:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 4d 4d     .............BMM
    2f9a:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    2fb2:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    2fc2:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2fd2:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    2fe2:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ff2:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3002:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    301e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    303a:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    304a:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    305a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3076:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3096:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30b2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30d2:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    30e2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    30f2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3102:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    312a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    314a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3166:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3186:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3196:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    31a6:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31c2:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    31de:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    31f6:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    3206:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    3216:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    3226:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    3236:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    3246:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    3256:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    3266:	00 42 4d 4d 42 00 00 00 00 00 00 00 00 00 00 00     .BMMB...........
    3276:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    3286:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    3296:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    32a6:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    32b6:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    32ce:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    32ee:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    330a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    332a:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    333a:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    334a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3366:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3382:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33a2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33be:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33ce:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33de:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33ee:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33fe:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    340e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    341e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    342e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    343e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    344e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    345e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    346e:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    347e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    348e:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    349e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    34ae:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    34be:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    34ce:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    34de:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    34ee:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    34fe:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    350e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    351e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    352e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    353e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 42 42 42 42 42     MMMMMMMMM..BBBBB
    354e:	42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42     BBBBBBBBBBBBBBBB
    355e:	42 42 42 42 42 42 42 02 02 00 00 00 00 00 00 00     BBBBBBB.........
	...
    3582:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    359e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35be:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35da:	00 00 00 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
	...
    35f6:	63 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     c...............
	...
    3616:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3636:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3652:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3672:	00 02 02 00 00 00 00 00 00 00 00 00 00 07 00 00     ................
    3682:	00 00 00 00 09 00 00 00 00 00 00 00 00 00 00 02     ................
    3692:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    36ae:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    36be:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................

000036ce <sprites_data>:
    36ce:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    36de:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    36ee:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    36fe:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    370e:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    371e:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    372e:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    373e:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    374e:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    375e:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    376e:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    377e:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    378e:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    379e:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    37ae:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    37be:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    37ce:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    37de:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    37ee:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    37fe:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    380e:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    381e:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    382e:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    383e:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    384e:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    385e:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    386e:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    387e:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    388e:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    389e:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    38ae:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    38be:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    38ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    38de:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    38ee:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    38fe:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    390e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    391e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    392e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    393e:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    394e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    395e:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    396e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    397e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    398e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    399e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    39ae:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    39be:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    39ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39de:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    39ee:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    39fe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a0e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a1e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3a2e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3a3e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a4e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a5e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a6e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a7e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a8e:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3a9e:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3aae:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3abe:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3ace:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3ade:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3aee:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3afe:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3b0e:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3b1e:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3b2e:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3b3e:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3b4e:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3b5e:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3b6e:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3b7e:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3b8e:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3b9e:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3bae:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3bbe:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3bce:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3bde:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3bee:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3bfe:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3c0e:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3c1e:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3c2e:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    3c3e:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3c4e:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3c5e:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3c6e:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    3c7e:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3c8e:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3c9e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3cae:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3cbe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3cce:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3cde:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3cee:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3cfe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d0e:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3d1e:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3d2e:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3d3e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3d4e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3d5e:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3d6e:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3d7e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3d8e:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3d9e:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3dae:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3dbe:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3dce:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3dde:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3dee:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3dfe:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3e0e:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3e1e:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3e2e:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    3e3e:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3e4e:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3e5e:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    3e6e:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3e7e:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3e8e:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3e9e:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3eae:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3ebe:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3ece:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3ede:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3eee:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3efe:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3f0e:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3f1e:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    3f2e:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3f3e:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3f4e:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3f5e:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3f6e:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3f7e:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3f8e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f9e:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    3fae:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    3fbe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3fce:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3fde:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3fee:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    3ffe:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    400e:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    401e:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    402e:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    403e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    404e:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    405e:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    406e:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    407e:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    408e:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    409e:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    40ae:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    40be:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40ce:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    40de:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    40ee:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    40fe:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    410e:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    411e:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    412e:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    413e:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    414e:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    415e:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    416e:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    417e:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    418e:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    419e:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    41ae:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    41be:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    41ce:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    41de:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    41ee:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    41fe:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    420e:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    421e:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    422e:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    423e:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    424e:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    425e:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    426e:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    427e:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    428e:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    429e:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    42ae:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    42be:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    42ce:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    42de:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    42ee:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    42fe:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    430e:	fe fe fe fe fe fe fe fe fe fe fe 7f fe fe fe fe     ................
    431e:	fe fe 7f 7f fe fe fe fe fe 7f 7f 7f fe fe fe fe     ................
    432e:	ff 7f 7f 7f fe fe fe fe fe ff 7f 7f fe fe fe fe     ................
    433e:	fe fe ff 7f fe fe fe fe fe fe fe ff fe fe fe fe     ................
    434e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    435e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    436e:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    437e:	fe fe 7f 7f ff fe fe fe fe fe fe ff fe fe fe fe     ................
    438e:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    439e:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    43ae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43be:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

000043ce <map_up_arrow>:
    43ce:	01 01 33                                            ..3

000043d1 <map_down_arrow>:
    43d1:	01 01 32                                            ..2

000043d4 <map_left_arrow>:
    43d4:	01 01 31                                            ..1

000043d7 <map_right_arrow>:
    43d7:	01 01 30                                            ..0

000043da <map_rocket_right_1>:
    43da:	01 01 27                                            ..'

000043dd <map_rocket_right_0>:
    43dd:	01 01 26                                            ..&

000043e0 <map_rocket_up_1>:
    43e0:	01 01 25                                            ..%

000043e3 <map_rocket_up_0>:
    43e3:	01 01 24                                            ..$

000043e6 <map_ball>:
    43e6:	01 01 23                                            ..#

000043e9 <map_explosion_2>:
    43e9:	02 02 0c 0d 0d 0c                                   ......

000043ef <map_explosion_1>:
    43ef:	02 02 0a 0b 19 1a                                   ......

000043f5 <map_explosion_0>:
    43f5:	02 02 08 09 17 18                                   ......

000043fb <map_tank2_right_1>:
    43fb:	02 02 21 22 2e 2f                                   ..!"./

00004401 <map_tank2_right_0>:
    4401:	02 02 1f 20 2c 2d                                   ... ,-

00004407 <map_tank2_up_1>:
    4407:	02 02 1d 1e 2a 2b                                   ....*+

0000440d <map_tank2_up_0>:
    440d:	02 02 1b 1c 28 29                                   ....()

00004413 <map_tank1_right_1>:
    4413:	02 02 06 07 15 16                                   ......

00004419 <map_tank1_right_0>:
    4419:	02 02 04 05 13 14                                   ......

0000441f <map_tank1_up_1>:
    441f:	02 02 02 03 11 12                                   ......

00004425 <map_tank1_up_0>:
    4425:	02 02 00 01 0f 10                                   ......

0000442b <map_tank_blank>:
    442b:	02 02 0e 0e 0e 0e                                   ......

00004431 <map_none>:
    4431:	01 01 0e                                            ...

00004434 <tiles_data>:
	...
    4474:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    4484:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    4494:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    44a4:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    44b4:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    44c4:	ec ed ff ff ff ff f6 ec ec ed ee ff ff f6 ed ec     ................
    44d4:	ec ed ee ff f6 ee ed ec ec ed ff f6 ee ee ed ec     ................
    44e4:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    44f4:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    4504:	ec ed ff f6 ee ff ed ec ec ed f6 3f ff ee ed ec     ...........?....
    4514:	ec ed ee ff 3f f6 ed ec ec ed ff ee f6 ff ed ec     ....?...........
    4524:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    4534:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    4544:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    4554:	ec ff f6 ff ff ee ed ec ec ed ff f6 ee ee ed ec     ................
    4564:	ec 3f ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     .?..............
    4574:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    4584:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4594:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    45a4:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    45bc:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    45cc:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    45dc:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    45f4:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    4604:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    4614:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    4624:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    463c:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    465c:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    4674:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    4684:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4694:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    46a4:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    46b4:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    46c4:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    46d4:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    46e4:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    46f4:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    4704:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    4714:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    4724:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    4734:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    4744:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    4754:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    4764:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    4774:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4784:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4794:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    47a4:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    47b4:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    47c4:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    47d4:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    47e4:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    47f4:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    4804:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4814:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4824:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4834:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4844:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4854:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4864:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4894:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    48a4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    48b4:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    48c4:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    48d4:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    48e4:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    48f4:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    4904:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4914:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4924:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4934:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    4944:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    4954:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4964:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4974:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    4984:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    4994:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    49a4:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    49b4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    49c4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    49d4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    49e4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    49f4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4a04:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4a34:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4a44:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4a54:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4a64:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4a74:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    4a84:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4a94:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4aa4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4ab4:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    4afc:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4b0c:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    4b1c:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4b2c:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 00 00     ................
    4b3c:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4b4c:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    4b5c:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4b6c:	f0 f0 f0 e1 e1 e1 00 00 00 00 00 00 00 00 00 00     ................
	...
    4bac:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4bdc:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4bec:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    4bfc:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    4c0c:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    4c1c:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    4c2c:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    4c3c:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    4c4c:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    4c5c:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    4c6c:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    4c7c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c8c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c9c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4cac:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4cbc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4ccc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4cdc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4cec:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    4cfc:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    4d0c:	00 00 00 00 00 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    4d1c:	00 00 00 00 e1 e1 e1 e1 00 00 f5 90 f5 90 f5 90     ................
    4d2c:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    4d3c:	f0 f5 f0 f5 f5 f5 f5 f5 f0 f0 f0 e1 e1 e1 00 00     ................
    4d4c:	e1 e1 e1 e1 e1 e1 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    4d5c:	e1 e1 e1 e1 e1 00 00 00 f5 90 f5 90 f5 90 f5 00     ................
    4d6c:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    4d7c:	f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00 00 00     ................
	...
    4db4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4dc4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4dd4:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    4df8:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    4e08:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    4e18:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    4e28:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    4e38:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    4e48:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    4e58:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    4e68:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    4e78:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4e88:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4e98:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4ea8:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    4eb8:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4ec8:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4ed8:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4ee8:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 f5 90     ((..((((((......
    4ef8:	f5 90 f5 90 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4f34:	f5 90 f5 90 f5 90 f5 00 00 00 00 00 00 00 00 00     ................
	...
    4f7c:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4f8c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f9c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4fac:	28 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     ((((((((.(((((((
    4fbc:	7f 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     .(((((((((((((((
    4fcc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4fdc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4fec:	28 28 28 28 28 28 28 28 90 90 90 e1 e1 e1 f0 f5     ((((((((........
    4ffc:	f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1 e1 e1 e1 e1     ................
    500c:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 00 00     ................
    501c:	f5 f5 f5 e1 e1 00 00 00 90 90 90 00 00 00 00 00     ................
    502c:	f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1 e1 90 90 90     ................
    503c:	f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    504c:	e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1 e1 90 90 90     ................
    505c:	00 00 00 e1 e1 f5 f5 f5 00 00 00 00 00 90 90 90     ................
    506c:	00 00 00 00 00 f5 f5 f5 00 00 00 00 00 00 00 00     ................
	...
    50bc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    50cc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    50e4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    50fc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    510c:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    513c:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    514c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    515c:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    5174:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    5184:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    5194:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    51a4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    51bc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    51cc:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    51dc:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    51f4:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    5204:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    5214:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    5224:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    523c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    524c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5280:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5290:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    52a0:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    52bc:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    52cc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    52dc:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    52fc:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    530c:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    531c:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    533c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    534c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    535c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    539c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    53ac:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    53cc:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    541c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5440:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5450:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    5460:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    547c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    548c:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    549c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    54bc:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    54cc:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    54dc:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    54fc:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    550c:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    551c:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    553c:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    554c:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    555c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5580:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    5590:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    55a0:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    55bc:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    55cc:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    55dc:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    55fc:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    560c:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    561c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    563c:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    564c:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    565c:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    567c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    568c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    569c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    56bc:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    56cc:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    56dc:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    5704:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    571c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5744:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    575c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    576c:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    577c:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    578c:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    579c:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    57c4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    57dc:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    57f4:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    5804:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5814:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5824:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    583c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    584c:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5864:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    587c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    588c:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    589c:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    58bc:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    58cc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    58dc:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    58fc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    590c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    591c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    593c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    594c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    595c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    597c:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    598c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    599c:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    59bc:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    59cc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    59dc:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    59fc:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5a0c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5a1c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5a3c:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5a4c:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    5a5c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    5a7c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5a8c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5a9c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5abc:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5acc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5adc:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5b00:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5b10:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    5b20:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    5b3c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5b4c:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    5b5c:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5b7c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5b8c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5b9c:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5bbc:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    5bcc:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5bdc:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5bfc:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5c0c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5c1c:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5c3c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c4c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5c5c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5c7c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c8c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5c9c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5cbc:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5ccc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5cdc:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    5cfc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5d0c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5d1c:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5d3c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5d4c:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5d5c:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5d7c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5d8c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5d9c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5dbc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5dcc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5ddc:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    5dfc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5e0c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5e1c:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5e3c:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    5e4c:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5e5c:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5e7c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5e8c:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    5e9c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5ebc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5ecc:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5edc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5efc:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5f0c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5f1c:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5f3c:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5f4c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f5c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    5f7c:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5f8c:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f9c:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5fbc:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5fcc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5fdc:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6000:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    6010:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    6064:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    607c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    608c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    609c:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    60c4:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    60d4:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60e4:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    60fc:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    610c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    611c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6144:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6154:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6164:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6180:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    6190:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    61a0:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    61c4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    61d4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61e4:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6200:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    6210:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6220:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    6244:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6254:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    6264:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    627c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    628c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    629c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    62bc:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    62cc:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    62dc:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6300:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    6310:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6320:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    6330:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    6340:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    6350:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    6360:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    637c:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    638c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    639c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    63c4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    63d4:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    63e4:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6404:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6414:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6424:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6444:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6454:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6464:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6484:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6494:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    64a4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    64c4:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64d4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    64e4:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    6504:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6514:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6524:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6544:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6554:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6564:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    657c:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    658c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    659c:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    65c4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65d4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65e4:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6604:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6614:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    6624:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6644:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    6654:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    6664:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6684:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    6694:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    66a4:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    66c4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    66d4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    66e4:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6704:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    6714:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6724:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    673c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    674c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    675c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6774:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6784:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6794:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    67a4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    67bc:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    67cc:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    67dc:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    67f8:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    6808:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    6818:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    6828:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    6838:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6848:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    6858:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

00006874 <map_blue_tank>:
    6874:	02 02 27 28 2f 30                                   ..'(/0

0000687a <map_green_tank>:
    687a:	02 02 14 15 1f 20                                   ..... 

00006880 <map_turf>:
    6880:	01 01 0e                                            ...

00006883 <map_water>:
    6883:	01 01 0d                                            ...

00006886 <map_metal_bl>:
    6886:	01 01 0c                                            ...

00006889 <map_metal_tr>:
    6889:	01 01 0b                                            ...

0000688c <map_metal_br>:
    688c:	01 01 0a                                            ...

0000688f <map_metal_tl>:
    688f:	01 01 09                                            ...

00006892 <map_tile_exp_2>:
    6892:	01 01 08                                            ...

00006895 <map_tile_exp_1>:
    6895:	01 01 07                                            ...

00006898 <map_tile_exp_0>:
    6898:	01 01 06                                            ...

0000689b <map_rocket_itm>:
    689b:	01 01 04                                            ...

0000689e <map_explode_itm>:
    689e:	01 01 03                                            ...

000068a1 <map_speed_itm>:
    68a1:	01 01 02                                            ...

000068a4 <map_metal>:
    68a4:	01 01 05                                            ...

000068a7 <map_brick>:
    68a7:	01 01 01                                            ...

000068aa <map_splash>:
    68aa:	15 04 0f 10 10 0f 10 10 0f 11 11 0f 12 13 00 00     ................
    68ba:	00 0f 10 10 0f 00 0f 00 16 00 16 00 16 16 17 18     ................
    68ca:	16 19 1a 1b 1c 1d 16 1e 00 16 00 16 00 16 00 16     ................
    68da:	10 21 16 00 16 16 22 00 23 24 25 16 26 00 16 00     .!....".#$%.&...
    68ea:	16 00 16 00 16 00 16 16 00 16 16 29 2a 2b 2c 00     ...........)*+,.
    68fa:	16 00 00 16 2d 2e                                   ....-.

00006900 <map_pause>:
    6900:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    6910:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    6920:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    6930:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

0000693e <map_tile_none>:
    693e:	01 01 00 00                                         ....

00006942 <__ctors_end>:
    6942:	11 24       	eor	r1, r1
    6944:	1f be       	out	0x3f, r1	; 63
    6946:	cf ef       	ldi	r28, 0xFF	; 255
    6948:	d0 e1       	ldi	r29, 0x10	; 16
    694a:	de bf       	out	0x3e, r29	; 62
    694c:	cd bf       	out	0x3d, r28	; 61

0000694e <__do_copy_data>:
    694e:	11 e0       	ldi	r17, 0x01	; 1
    6950:	a0 e0       	ldi	r26, 0x00	; 0
    6952:	b1 e0       	ldi	r27, 0x01	; 1
    6954:	e6 e1       	ldi	r30, 0x16	; 22
    6956:	f6 ec       	ldi	r31, 0xC6	; 198
    6958:	02 c0       	rjmp	.+4      	; 0x695e <__do_copy_data+0x10>
    695a:	05 90       	lpm	r0, Z+
    695c:	0d 92       	st	X+, r0
    695e:	a6 30       	cpi	r26, 0x06	; 6
    6960:	b1 07       	cpc	r27, r17
    6962:	d9 f7       	brne	.-10     	; 0x695a <__do_copy_data+0xc>

00006964 <__do_clear_bss>:
    6964:	1f e0       	ldi	r17, 0x0F	; 15
    6966:	a6 e0       	ldi	r26, 0x06	; 6
    6968:	b1 e0       	ldi	r27, 0x01	; 1
    696a:	01 c0       	rjmp	.+2      	; 0x696e <.do_clear_bss_start>

0000696c <.do_clear_bss_loop>:
    696c:	1d 92       	st	X+, r1

0000696e <.do_clear_bss_start>:
    696e:	a7 3f       	cpi	r26, 0xF7	; 247
    6970:	b1 07       	cpc	r27, r17
    6972:	e1 f7       	brne	.-8      	; 0x696c <.do_clear_bss_loop>

00006974 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6974:	0e 94 ee 38 	call	0x71dc	; 0x71dc <wdt_randomize>
#endif

    MCUSR = 0;
    6978:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    697a:	88 e1       	ldi	r24, 0x18	; 24
    697c:	0f b6       	in	r0, 0x3f	; 63
    697e:	f8 94       	cli
    6980:	80 93 60 00 	sts	0x0060, r24
    6984:	10 92 60 00 	sts	0x0060, r1
    6988:	0f be       	out	0x3f, r0	; 63

0000698a <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    698a:	0e 94 a2 39 	call	0x7344	; 0x7344 <isEepromFormatted>
    698e:	81 11       	cpse	r24, r1
    6990:	02 c0       	rjmp	.+4      	; 0x6996 <Initialize+0xc>
    6992:	0e 94 80 39 	call	0x7300	; 0x7300 <FormatEeprom>

	cli();
    6996:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6998:	81 e0       	ldi	r24, 0x01	; 1
    699a:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    699e:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    69a2:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    69a6:	10 92 02 0b 	sts	0x0B02, r1
    69aa:	10 92 08 0b 	sts	0x0B08, r1
    69ae:	10 92 0e 0b 	sts	0x0B0E, r1
    69b2:	10 92 14 0b 	sts	0x0B14, r1
    69b6:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    69ba:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    69be:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    69c2:	92 e1       	ldi	r25, 0x12	; 18
    69c4:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    69c8:	90 ee       	ldi	r25, 0xE0	; 224
    69ca:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    69ce:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    69d2:	94 e1       	ldi	r25, 0x14	; 20
    69d4:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    69d8:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    69dc:	10 92 f4 0a 	sts	0x0AF4, r1
    69e0:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    69e4:	10 92 f8 0a 	sts	0x0AF8, r1
    69e8:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    69ec:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    69f0:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <InitializeVideoMode>
    69f4:	80 e7       	ldi	r24, 0x70	; 112
    69f6:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    69f8:	fc 01       	movw	r30, r24
    69fa:	25 91       	lpm	r18, Z+
    69fc:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    69fe:	f9 01       	movw	r30, r18
    6a00:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6a02:	30 83       	st	Z, r19
    6a04:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6a06:	20 e0       	ldi	r18, 0x00	; 0
    6a08:	8e 39       	cpi	r24, 0x9E	; 158
    6a0a:	92 07       	cpc	r25, r18
    6a0c:	a9 f7       	brne	.-22     	; 0x69f8 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6a0e:	78 94       	sei
	
	DisplayLogo();
    6a10:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <DisplayLogo>
    6a14:	0e 94 1b 60 	call	0xc036	; 0xc036 <main>
    6a18:	0c 94 09 63 	jmp	0xc612	; 0xc612 <_exit>

00006a1c <__bad_interrupt>:
    6a1c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006a20 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    6a20:	0c e0       	ldi	r16, 0x0C	; 12
    6a22:	0a 95       	dec	r16
    6a24:	f1 f7       	brne	.-4      	; 0x6a22 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    6a26:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    6a28:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    6a2a:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    6a2c:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6a2e:	20 91 bd 0b 	lds	r18, 0x0BBD


		clr r16
    6a32:	00 27       	eor	r16, r16

00006a34 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    6a34:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    6a36:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    6a38:	ac 0f       	add	r26, r28
		adc XH,YH
    6a3a:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    6a3c:	1c 91       	ld	r17, X
		std Z+2,r17
    6a3e:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    6a40:	02 17       	cp	r16, r18
		brsh noov
    6a42:	08 f4       	brcc	.+2      	; 0x6a46 <noov>
		mov r17,r16
    6a44:	10 2f       	mov	r17, r16

00006a46 <noov>:
	noov:
		st X,r17
    6a46:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    6a48:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    6a4a:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    6a4c:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    6a4e:	90 f3       	brcs	.-28     	; 0x6a34 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    6a50:	05 e2       	ldi	r16, 0x25	; 37

00006a52 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    6a52:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    6a54:	1a 95       	dec	r17
		brne .-4
    6a56:	f1 f7       	brne	.-4      	; 0x6a54 <wait_loop+0x2>

		dec r16
    6a58:	0a 95       	dec	r16
		brne wait_loop
    6a5a:	d9 f7       	brne	.-10     	; 0x6a52 <wait_loop>

		lds r2,overlay_tile_table
    6a5c:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    6a60:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    6a64:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    6a68:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    6a6c:	68 01       	movw	r12, r16
		movw r6,r16
    6a6e:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6a70:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6a72:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    6a74:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6a76:	4e 01       	movw	r8, r28
		clr r0
    6a78:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6a7a:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    6a7e:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6a80:	09 f0       	breq	.+2      	; 0x6a84 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    6a82:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    6a84:	09 f0       	breq	.+2      	; 0x6a88 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    6a86:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6a88:	09 f0       	breq	.+2      	; 0x6a8c <wait_loop+0x3a>
		mov r24,r19
    6a8a:	83 2f       	mov	r24, r19

		breq .+2
    6a8c:	09 f0       	breq	.+2      	; 0x6a90 <wait_loop+0x3e>
		movw r12,r2
    6a8e:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6a90:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6a92:	a0 2e       	mov	r10, r16
		clr r22
    6a94:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6a96:	78 e0       	ldi	r23, 0x08	; 8

00006a98 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6a98:	7d d2       	rcall	.+1274   	; 0x6f94 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6a9a:	3c e0       	ldi	r19, 0x0C	; 12
    6a9c:	3a 95       	dec	r19
    6a9e:	f1 f7       	brne	.-4      	; 0x6a9c <next_tile_line+0x4>
    6aa0:	00 00       	nop
    6aa2:	00 00       	nop

		;***draw line***
		call render_tile_line
    6aa4:	0e 94 83 35 	call	0x6b06	; 0x6b06 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6aa8:	3f e0       	ldi	r19, 0x0F	; 15
    6aaa:	3a 95       	dec	r19
    6aac:	f1 f7       	brne	.-4      	; 0x6aaa <next_tile_line+0x12>
    6aae:	00 00       	nop
    6ab0:	00 00       	nop

		dec r10
    6ab2:	aa 94       	dec	r10
		breq frame_end
    6ab4:	a9 f0       	breq	.+42     	; 0x6ae0 <frame_end>
	
		inc r22
    6ab6:	63 95       	inc	r22
		lpm ;3 nop
    6ab8:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6aba:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6abc:	31 f0       	breq	.+12     	; 0x6aca <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6abe:	33 e0       	ldi	r19, 0x03	; 3
    6ac0:	3a 95       	dec	r19
    6ac2:	f1 f7       	brne	.-4      	; 0x6ac0 <next_tile_line+0x28>
    6ac4:	00 00       	nop
    6ac6:	00 00       	nop
		
		rjmp next_tile_line	
    6ac8:	e7 cf       	rjmp	.-50     	; 0x6a98 <next_tile_line>

00006aca <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6aca:	66 27       	eor	r22, r22

		clr r0
    6acc:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6ace:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6ad0:	c3 0f       	add	r28, r19
		adc YH,r0
    6ad2:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6ad4:	8a 95       	dec	r24
		brne .+2
    6ad6:	09 f4       	brne	.+2      	; 0x6ada <next_tile_row+0x10>
		movw YL,r8	;main vram
    6ad8:	e4 01       	movw	r28, r8
		brne .+2
    6ada:	09 f4       	brne	.+2      	; 0x6ade <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6adc:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6ade:	dc cf       	rjmp	.-72     	; 0x6a98 <next_tile_line>

00006ae0 <frame_end>:

	frame_end:

		WAIT r19,18
    6ae0:	36 e0       	ldi	r19, 0x06	; 6
    6ae2:	3a 95       	dec	r19
    6ae4:	f1 f7       	brne	.-4      	; 0x6ae2 <frame_end+0x2>

		rcall hsync_pulse ;145
    6ae6:	56 d2       	rcall	.+1196   	; 0x6f94 <hsync_pulse>
	
		clr r1
    6ae8:	11 24       	eor	r1, r1
		call RestoreBackground
    6aea:	0e 94 00 45 	call	0x8a00	; 0x8a00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6aee:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    6af2:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6af4:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6af6:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6af8:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6afc:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6afe:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6b02:	11 24       	eor	r1, r1


		ret
    6b04:	08 95       	ret

00006b06 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6b06:	de 01       	movw	r26, r28

		mul r22,r23
    6b08:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6b0a:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6b0c:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6b0e:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    6b10:	00 0d       	add	r16, r0
		adc r17,r1
    6b12:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6b14:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6b16:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    6b18:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6b1a:	00 0d       	add	r16, r0
		adc r17,r1
    6b1c:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6b1e:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6b20:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6b22:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6b24:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6b26:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6b28:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6b2a:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    6b2c:	08 f4       	brcc	.+2      	; 0x6b30 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6b2e:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6b30:	04 0e       	add	r0, r20
	    adc r1,r21
    6b32:	15 1e       	adc	r1, r21

		movw ZL,r0
    6b34:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6b36:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    6b38:	f0 f0       	brcs	.+60     	; 0x6b76 <ramloop>

00006b3a <romloop>:
	

	romloop:
	    lpm r16,Z+
    6b3a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6b3c:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6b3e:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6b40:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6b42:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6b44:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6b46:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6b48:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6b4a:	28 31       	cpi	r18, 0x18	; 24
		nop
    6b4c:	00 00       	nop

	    lpm r16,Z+
    6b4e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6b50:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6b52:	08 f4       	brcc	.+2      	; 0x6b56 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6b54:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6b56:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6b58:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6b5a:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6b5c:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6b5e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6b60:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6b62:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    6b64:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6b66:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6b68:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6b6a:	05 91       	lpm	r16, Z+

		breq end	
    6b6c:	31 f1       	breq	.+76     	; 0x6bba <end>
	    movw ZL,r0   	;copy next tile adress
    6b6e:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6b70:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6b72:	18 f7       	brcc	.-58     	; 0x6b3a <romloop>
	
		rjmp .
    6b74:	00 c0       	rjmp	.+0      	; 0x6b76 <ramloop>

00006b76 <ramloop>:

	ramloop:

	    ld r16,Z+
    6b76:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6b78:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6b7a:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6b7c:	01 91       	ld	r16, Z+
		nop   
    6b7e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6b80:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6b82:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6b84:	01 91       	ld	r16, Z+
		nop
    6b86:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6b88:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6b8a:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    6b8c:	00 c0       	rjmp	.+0      	; 0x6b8e <ramloop+0x18>

	    ld r16,Z+
    6b8e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6b90:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6b92:	08 f0       	brcs	.+2      	; 0x6b96 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6b94:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6b96:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6b98:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6b9a:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6b9c:	15 1e       	adc	r1, r21
		rjmp .
    6b9e:	00 c0       	rjmp	.+0      	; 0x6ba0 <ramloop+0x2a>
    
		ld r16,Z+		
    6ba0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6ba2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6ba4:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    6ba6:	00 c0       	rjmp	.+0      	; 0x6ba8 <ramloop+0x32>

	    ld r16,Z+	
    6ba8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6baa:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6bac:	01 91       	ld	r16, Z+

	    dec r17
    6bae:	1a 95       	dec	r17
	    breq end
    6bb0:	21 f0       	breq	.+8      	; 0x6bba <end>
	
		movw ZL,r0
    6bb2:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6bb4:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6bb6:	08 f6       	brcc	.-126    	; 0x6b3a <romloop>
		rjmp ramloop
    6bb8:	de cf       	rjmp	.-68     	; 0x6b76 <ramloop>

00006bba <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6bba:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6bbc:	00 27       	eor	r16, r16
		lpm	
    6bbe:	c8 95       	lpm
		nop
    6bc0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6bc2:	08 b9       	out	0x08, r16	; 8

		ret
    6bc4:	08 95       	ret

00006bc6 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6bc6:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6bc8:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    6bcc:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    6bd0:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    6bd2:	82 9f       	mul	r24, r18
	add ZL,r0
    6bd4:	e0 0d       	add	r30, r0
	adc ZH,r1
    6bd6:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6bd8:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    6bda:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6bdc:	62 9f       	mul	r22, r18
	add XL,r0
    6bde:	a0 0d       	add	r26, r0
	adc XH,r1
    6be0:	b1 1d       	adc	r27, r1

	clr r0
    6be2:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    6be4:	05 90       	lpm	r0, Z+
    6be6:	0d 92       	st	X+, r0
    6be8:	05 90       	lpm	r0, Z+
    6bea:	0d 92       	st	X+, r0
    6bec:	05 90       	lpm	r0, Z+
    6bee:	0d 92       	st	X+, r0
    6bf0:	05 90       	lpm	r0, Z+
    6bf2:	0d 92       	st	X+, r0
    6bf4:	05 90       	lpm	r0, Z+
    6bf6:	0d 92       	st	X+, r0
    6bf8:	05 90       	lpm	r0, Z+
    6bfa:	0d 92       	st	X+, r0
    6bfc:	05 90       	lpm	r0, Z+
    6bfe:	0d 92       	st	X+, r0
    6c00:	05 90       	lpm	r0, Z+
    6c02:	0d 92       	st	X+, r0
    6c04:	05 90       	lpm	r0, Z+
    6c06:	0d 92       	st	X+, r0
    6c08:	05 90       	lpm	r0, Z+
    6c0a:	0d 92       	st	X+, r0
    6c0c:	05 90       	lpm	r0, Z+
    6c0e:	0d 92       	st	X+, r0
    6c10:	05 90       	lpm	r0, Z+
    6c12:	0d 92       	st	X+, r0
    6c14:	05 90       	lpm	r0, Z+
    6c16:	0d 92       	st	X+, r0
    6c18:	05 90       	lpm	r0, Z+
    6c1a:	0d 92       	st	X+, r0
    6c1c:	05 90       	lpm	r0, Z+
    6c1e:	0d 92       	st	X+, r0
    6c20:	05 90       	lpm	r0, Z+
    6c22:	0d 92       	st	X+, r0
    6c24:	05 90       	lpm	r0, Z+
    6c26:	0d 92       	st	X+, r0
    6c28:	05 90       	lpm	r0, Z+
    6c2a:	0d 92       	st	X+, r0
    6c2c:	05 90       	lpm	r0, Z+
    6c2e:	0d 92       	st	X+, r0
    6c30:	05 90       	lpm	r0, Z+
    6c32:	0d 92       	st	X+, r0
    6c34:	05 90       	lpm	r0, Z+
    6c36:	0d 92       	st	X+, r0
    6c38:	05 90       	lpm	r0, Z+
    6c3a:	0d 92       	st	X+, r0
    6c3c:	05 90       	lpm	r0, Z+
    6c3e:	0d 92       	st	X+, r0
    6c40:	05 90       	lpm	r0, Z+
    6c42:	0d 92       	st	X+, r0
    6c44:	05 90       	lpm	r0, Z+
    6c46:	0d 92       	st	X+, r0
    6c48:	05 90       	lpm	r0, Z+
    6c4a:	0d 92       	st	X+, r0
    6c4c:	05 90       	lpm	r0, Z+
    6c4e:	0d 92       	st	X+, r0
    6c50:	05 90       	lpm	r0, Z+
    6c52:	0d 92       	st	X+, r0
    6c54:	05 90       	lpm	r0, Z+
    6c56:	0d 92       	st	X+, r0
    6c58:	05 90       	lpm	r0, Z+
    6c5a:	0d 92       	st	X+, r0
    6c5c:	05 90       	lpm	r0, Z+
    6c5e:	0d 92       	st	X+, r0
    6c60:	05 90       	lpm	r0, Z+
    6c62:	0d 92       	st	X+, r0
    6c64:	05 90       	lpm	r0, Z+
    6c66:	0d 92       	st	X+, r0
    6c68:	05 90       	lpm	r0, Z+
    6c6a:	0d 92       	st	X+, r0
    6c6c:	05 90       	lpm	r0, Z+
    6c6e:	0d 92       	st	X+, r0
    6c70:	05 90       	lpm	r0, Z+
    6c72:	0d 92       	st	X+, r0
    6c74:	05 90       	lpm	r0, Z+
    6c76:	0d 92       	st	X+, r0
    6c78:	05 90       	lpm	r0, Z+
    6c7a:	0d 92       	st	X+, r0
    6c7c:	05 90       	lpm	r0, Z+
    6c7e:	0d 92       	st	X+, r0
    6c80:	05 90       	lpm	r0, Z+
    6c82:	0d 92       	st	X+, r0
    6c84:	05 90       	lpm	r0, Z+
    6c86:	0d 92       	st	X+, r0
    6c88:	05 90       	lpm	r0, Z+
    6c8a:	0d 92       	st	X+, r0
    6c8c:	05 90       	lpm	r0, Z+
    6c8e:	0d 92       	st	X+, r0
    6c90:	05 90       	lpm	r0, Z+
    6c92:	0d 92       	st	X+, r0
    6c94:	05 90       	lpm	r0, Z+
    6c96:	0d 92       	st	X+, r0
    6c98:	05 90       	lpm	r0, Z+
    6c9a:	0d 92       	st	X+, r0
    6c9c:	05 90       	lpm	r0, Z+
    6c9e:	0d 92       	st	X+, r0
    6ca0:	05 90       	lpm	r0, Z+
    6ca2:	0d 92       	st	X+, r0
    6ca4:	05 90       	lpm	r0, Z+
    6ca6:	0d 92       	st	X+, r0
    6ca8:	05 90       	lpm	r0, Z+
    6caa:	0d 92       	st	X+, r0
    6cac:	05 90       	lpm	r0, Z+
    6cae:	0d 92       	st	X+, r0
    6cb0:	05 90       	lpm	r0, Z+
    6cb2:	0d 92       	st	X+, r0
    6cb4:	05 90       	lpm	r0, Z+
    6cb6:	0d 92       	st	X+, r0
    6cb8:	05 90       	lpm	r0, Z+
    6cba:	0d 92       	st	X+, r0
    6cbc:	05 90       	lpm	r0, Z+
    6cbe:	0d 92       	st	X+, r0
    6cc0:	05 90       	lpm	r0, Z+
    6cc2:	0d 92       	st	X+, r0
    6cc4:	05 90       	lpm	r0, Z+
    6cc6:	0d 92       	st	X+, r0
    6cc8:	05 90       	lpm	r0, Z+
    6cca:	0d 92       	st	X+, r0
    6ccc:	05 90       	lpm	r0, Z+
    6cce:	0d 92       	st	X+, r0
    6cd0:	05 90       	lpm	r0, Z+
    6cd2:	0d 92       	st	X+, r0
    6cd4:	05 90       	lpm	r0, Z+
    6cd6:	0d 92       	st	X+, r0
    6cd8:	05 90       	lpm	r0, Z+
    6cda:	0d 92       	st	X+, r0
    6cdc:	05 90       	lpm	r0, Z+
    6cde:	0d 92       	st	X+, r0
    6ce0:	05 90       	lpm	r0, Z+
    6ce2:	0d 92       	st	X+, r0


	clr r1
    6ce4:	11 24       	eor	r1, r1
	ret
    6ce6:	08 95       	ret

00006ce8 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6ce8:	0f 93       	push	r16
	push r17
    6cea:	1f 93       	push	r17
	push YL
    6cec:	cf 93       	push	r28
	push YH
    6cee:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6cf0:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6cf2:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6cf4:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    6cf6:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6cf8:	e0 0d       	add	r30, r0
	adc ZH,r1
    6cfa:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6cfc:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6cfe:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6d00:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6d02:	8e 9f       	mul	r24, r30
	movw r26,r0
    6d04:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6d06:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6d08:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6d0a:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    6d0c:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    6d0e:	00 24       	eor	r0, r0
	add YL,r1
    6d10:	c1 0d       	add	r28, r1
	adc YH,r0		
    6d12:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6d14:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6d16:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6d18:	ea 0f       	add	r30, r26
	adc ZH,r27
    6d1a:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6d1c:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    6d1e:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6d20:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6d22:	69 9f       	mul	r22, r25
	add XL,r0
    6d24:	a0 0d       	add	r26, r0
	adc XH,r1
    6d26:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6d28:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6d2a:	dd 27       	eor	r29, r29

	cpi r20,0	
    6d2c:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6d2e:	51 f4       	brne	.+20     	; 0x6d44 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6d30:	a2 0f       	add	r26, r18
	adc XH,r1
    6d32:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6d34:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6d36:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6d38:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6d3a:	11 c0       	rjmp	.+34     	; 0x6d5e <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6d3c:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6d3e:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6d40:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6d42:	0d c0       	rjmp	.+26     	; 0x6d5e <x_check_end>

00006d44 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6d44:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6d46:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6d48:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6d4a:	04 c0       	rjmp	.+8      	; 0x6d54 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6d4c:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6d4e:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6d50:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6d52:	05 c0       	rjmp	.+10     	; 0x6d5e <x_check_end>

00006d54 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6d54:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6d56:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6d58:	e2 0f       	add	r30, r18
	adc ZH,r1
    6d5a:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6d5c:	31 97       	sbiw	r30, 0x01	; 1

00006d5e <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6d5e:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6d60:	41 f4       	brne	.+16     	; 0x6d72 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6d62:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6d64:	93 9f       	mul	r25, r19
	add XL,r0
    6d66:	a0 0d       	add	r26, r0
	adc XH,r1
    6d68:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6d6a:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    6d6c:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    6d6e:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    6d70:	0a c0       	rjmp	.+20     	; 0x6d86 <y_check_end>

00006d72 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6d72:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6d74:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6d76:	63 2f       	mov	r22, r19
	dec r22
    6d78:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6d7a:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6d7c:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6d7e:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6d80:	56 9f       	mul	r21, r22
	add ZL,r0
    6d82:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6d84:	f1 1d       	adc	r31, r1

00006d86 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6d86:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6d88:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6d8a:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6d8c:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6d8e:	00 ff       	sbrs	r16, 0
	clr r23
    6d90:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6d92:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6d94:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6d96:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6d98:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6d9a:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6d9c:	59 1b       	sub	r21, r25

00006d9e <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6d9e:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6da0:	48 1b       	sub	r20, r24

00006da2 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6da2:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6da4:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6da6:	2c 93       	st	X, r18
	adiw XL,1
    6da8:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6daa:	e6 0f       	add	r30, r22
	adc ZH,r23
    6dac:	f7 1f       	adc	r31, r23
	dec r20
    6dae:	4a 95       	dec	r20
	brne x_loop
    6db0:	c1 f7       	brne	.-16     	; 0x6da2 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6db2:	ec 0f       	add	r30, r28
	adc ZH,YH
    6db4:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6db6:	a8 0f       	add	r26, r24
	adc XH,r1
    6db8:	b1 1d       	adc	r27, r1
	dec r21
    6dba:	5a 95       	dec	r21
	brne y_loop
    6dbc:	81 f7       	brne	.-32     	; 0x6d9e <y_loop>


	pop YH
    6dbe:	df 91       	pop	r29
	pop YL
    6dc0:	cf 91       	pop	r28
	pop r17
    6dc2:	1f 91       	pop	r17
	pop r16
    6dc4:	0f 91       	pop	r16
	ret
    6dc6:	08 95       	ret

00006dc8 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6dc8:	0f 92       	push	r0
	push r1
    6dca:	1f 92       	push	r1
	push ZL;2
    6dcc:	ef 93       	push	r30
	push ZH;2
    6dce:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6dd0:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6dd2:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6dd4:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6dd8:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6dda:	f1 e0       	ldi	r31, 0x01	; 1

00006ddc <latency_loop>:
latency_loop:
	cp ZL,ZH
    6ddc:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6dde:	00 f0       	brcs	.+0      	; 0x6de0 <latency_loop+0x4>
	inc ZH
    6de0:	f3 95       	inc	r31
	cpi ZH,10
    6de2:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6de4:	d8 f3       	brcs	.-10     	; 0x6ddc <latency_loop>
	jmp .
    6de6:	0c 94 f5 36 	jmp	0x6dea	; 0x6dea <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    6dea:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    6dee:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6df0:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    6df4:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    6df8:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6dfa:	57 c0       	rjmp	.+174    	; 0x6eaa <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6dfc:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6dfe:	98 f0       	brcs	.+38     	; 0x6e26 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6e00:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6e02:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6e06:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6e08:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6e0c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6e0e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6e10:	26 f4       	brtc	.+8      	; 0x6e1a <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6e12:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6e14:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <update_sound>
	rjmp sync_end
    6e18:	b6 c0       	rjmp	.+364    	; 0x6f86 <sync_end>

00006e1a <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6e1a:	e5 e1       	ldi	r30, 0x15	; 21
    6e1c:	ea 95       	dec	r30
    6e1e:	f1 f7       	brne	.-4      	; 0x6e1c <sync_pre_eq_no_sound_update+0x2>
    6e20:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6e22:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6e24:	b0 c0       	rjmp	.+352    	; 0x6f86 <sync_end>

00006e26 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6e26:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6e28:	38 f1       	brcs	.+78     	; 0x6e78 <sync_post_eq>

	rjmp .
    6e2a:	00 c0       	rjmp	.+0      	; 0x6e2c <sync_eq+0x6>
	rjmp .
    6e2c:	00 c0       	rjmp	.+0      	; 0x6e2e <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6e2e:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6e30:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6e32:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6e34:	16 f4       	brtc	.+4      	; 0x6e3a <sync_eq_skip>
	
	call update_sound
    6e36:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <update_sound>

00006e3a <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6e3a:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6e3c:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6e40:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6e42:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6e46:	9f c0       	rjmp	.+318    	; 0x6f86 <sync_end>

00006e48 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6e48:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6e4a:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6e4c:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6e4e:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6e52:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6e54:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6e56:	00 f0       	brcs	.+0      	; 0x6e58 <__vector_14+0x10>

	cpi ZL,2
    6e58:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6e5a:	00 f0       	brcs	.+0      	; 0x6e5c <__vector_14+0x14>

	cpi ZL,3
    6e5c:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6e5e:	00 f0       	brcs	.+0      	; 0x6e60 <__vector_14+0x18>

	cpi ZL,4
    6e60:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6e62:	00 f0       	brcs	.+0      	; 0x6e64 <__vector_14+0x1c>

	cpi ZL,5
    6e64:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6e66:	00 f0       	brcs	.+0      	; 0x6e68 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6e68:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6e6a:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6e6c:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6e70:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6e72:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6e74:	ef 91       	pop	r30
	reti
    6e76:	18 95       	reti

00006e78 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6e78:	00 c0       	rjmp	.+0      	; 0x6e7a <sync_post_eq+0x2>

	bst ZL,0
    6e7a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6e7c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6e7e:	26 f4       	brtc	.+8      	; 0x6e88 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6e80:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6e82:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <update_sound>
	rjmp sync_pre_eq_cont
    6e86:	05 c0       	rjmp	.+10     	; 0x6e92 <sync_pre_eq_cont>

00006e88 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6e88:	e5 e1       	ldi	r30, 0x15	; 21
    6e8a:	ea 95       	dec	r30
    6e8c:	f1 f7       	brne	.-4      	; 0x6e8a <sync_post_eq_no_sound_update+0x2>
    6e8e:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6e90:	28 9a       	sbi	0x05, 0	; 5

00006e92 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6e92:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    6e96:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6e98:	09 f0       	breq	.+2      	; 0x6e9c <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6e9a:	75 c0       	rjmp	.+234    	; 0x6f86 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6e9c:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6e9e:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    6ea2:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6ea4:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    6ea8:	6e c0       	rjmp	.+220    	; 0x6f86 <sync_end>

00006eaa <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6eaa:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6eac:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6eb0:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6eb2:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6eb6:	00 c0       	rjmp	.+0      	; 0x6eb8 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6eb8:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6eba:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6ebc:	00 c0       	rjmp	.+0      	; 0x6ebe <sync_hsync+0x14>
	call update_sound
    6ebe:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6ec2:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6ec4:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    6ec8:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6eca:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    6ece:	ef 17       	cp	r30, r31
	brsh no_render
    6ed0:	d0 f4       	brcc	.+52     	; 0x6f06 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6ed2:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6ed4:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    6ed8:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6eda:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    6ede:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6ee0:	ef 17       	cp	r30, r31
	brlo no_render
    6ee2:	88 f0       	brcs	.+34     	; 0x6f06 <no_render>

	;push r1-r29
	ldi ZL,29
    6ee4:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6ee6:	ff 27       	eor	r31, r31

00006ee8 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6ee8:	00 80       	ld	r0, Z
	push r0
    6eea:	0f 92       	push	r0
	dec ZL
    6eec:	ea 95       	dec	r30
	brne push_loop	
    6eee:	e1 f7       	brne	.-8      	; 0x6ee8 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6ef0:	06 e0       	ldi	r16, 0x06	; 6
    6ef2:	0a 95       	dec	r16
    6ef4:	f1 f7       	brne	.-4      	; 0x6ef2 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6ef6:	0e 94 10 35 	call	0x6a20	; 0x6a20 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6efa:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6efc:	ff 27       	eor	r31, r31

00006efe <pop_loop>:
pop_loop:
	pop r0
    6efe:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6f00:	01 92       	st	Z+, r0
	cpi ZL,30
    6f02:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6f04:	e0 f3       	brcs	.-8      	; 0x6efe <pop_loop>

00006f06 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6f06:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    6f0a:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6f0c:	09 f0       	breq	.+2      	; 0x6f10 <no_render+0xa>
	rjmp sync_end
    6f0e:	3b c0       	rjmp	.+118    	; 0x6f86 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6f10:	2f 93       	push	r18
	push r19
    6f12:	3f 93       	push	r19
	push r20
    6f14:	4f 93       	push	r20
	push r21
    6f16:	5f 93       	push	r21
	push r22
    6f18:	6f 93       	push	r22
	push r23
    6f1a:	7f 93       	push	r23
	push r24
    6f1c:	8f 93       	push	r24
	push r25
    6f1e:	9f 93       	push	r25
	push r26
    6f20:	af 93       	push	r26
	push r27
    6f22:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6f24:	78 94       	sei
	clr r1
    6f26:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6f28:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6f2a:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6f2e:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6f30:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    6f34:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    6f38:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    6f3c:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    6f40:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6f44:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    6f48:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    6f4c:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6f4e:	f1 05       	cpc	r31, r1
	breq .+2 
    6f50:	09 f0       	breq	.+2      	; 0x6f54 <no_render+0x4e>
	icall
    6f52:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6f54:	0e 94 70 39 	call	0x72e0	; 0x72e0 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6f58:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6f5c:	0e 94 d5 37 	call	0x6faa	; 0x6faa <process_music>
	clr r1
    6f60:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6f62:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    6f66:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    6f6a:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6f6c:	f1 05       	cpc	r31, r1
	breq .+2 
    6f6e:	09 f0       	breq	.+2      	; 0x6f72 <no_render+0x6c>
	icall
    6f70:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6f72:	bf 91       	pop	r27
	pop r26
    6f74:	af 91       	pop	r26
	pop r25
    6f76:	9f 91       	pop	r25
	pop r24
    6f78:	8f 91       	pop	r24
	pop r23
    6f7a:	7f 91       	pop	r23
	pop r22
    6f7c:	6f 91       	pop	r22
	pop r21
    6f7e:	5f 91       	pop	r21
	pop r20
    6f80:	4f 91       	pop	r20
	pop r19
    6f82:	3f 91       	pop	r19
	pop r18
    6f84:	2f 91       	pop	r18

00006f86 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6f86:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6f88:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6f8a:	ff 91       	pop	r31
	pop ZL
    6f8c:	ef 91       	pop	r30
	pop r1
    6f8e:	1f 90       	pop	r1
	pop r0
    6f90:	0f 90       	pop	r0
	reti
    6f92:	18 95       	reti

00006f94 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6f94:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6f96:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6f98:	00 c0       	rjmp	.+0      	; 0x6f9a <hsync_pulse+0x6>
	call update_sound
    6f9a:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <update_sound>

	lds ZL,sync_pulse
    6f9e:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    6fa2:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6fa4:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    6fa8:	08 95       	ret

00006faa <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6faa:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    6fae:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6fb0:	0e 94 26 3c 	call	0x784c	; 0x784c <ProcessMusic>
#endif

	ret
    6fb4:	08 95       	ret

00006fb6 <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    6fb6:	0f 93       	push	r16
	push r17
    6fb8:	1f 93       	push	r17
	push r18
    6fba:	2f 93       	push	r18
	push r28
    6fbc:	cf 93       	push	r28
	push r29
    6fbe:	df 93       	push	r29

	mov r18,ZL
    6fc0:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6fc2:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    6fc6:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    6fca:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6fcc:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    6fd0:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    6fd4:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    6fd8:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6fda:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6fdc:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    6fe0:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    6fe4:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    6fe8:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6fea:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6fec:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6fee:	d0 2d       	mov	r29, r0
	nop
    6ff0:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6ff2:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    6ff6:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    6ffa:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6ffc:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    7000:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    7004:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    7008:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    700a:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    700c:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    7010:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    7014:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7018:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    701a:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    701c:	20 ff       	sbrs	r18, 0
	rjmp .
    701e:	00 c0       	rjmp	.+0      	; 0x7020 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7020:	01 03       	mulsu	r16, r17
	clr r0
    7022:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7024:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7026:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7028:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    702a:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    702e:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    7032:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7034:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    7038:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    703c:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    7040:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7042:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7044:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    7048:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    704c:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    7050:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7052:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7054:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7056:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7058:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    705c:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    7060:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    7064:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7066:	92 f4       	brpl	.+36     	; 0x708c <ch4_no_shift>

	lds ZH,tr4_params
    7068:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    706c:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    706e:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7070:	00 2e       	mov	r0, r16
	lsr r0
    7072:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7074:	00 26       	eor	r0, r16
	bst r0,0
    7076:	00 fa       	bst	r0, 0
	lsr r17
    7078:	16 95       	lsr	r17
	ror r16
    707a:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    707c:	16 f9       	bld	r17, 6
	sbrs ZH,0
    707e:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7080:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7082:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    7086:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    708a:	03 c0       	rjmp	.+6      	; 0x7092 <ch4_end>

0000708c <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    708c:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    708e:	1a 95       	dec	r17
	brne .-4
    7090:	f1 f7       	brne	.-4      	; 0x708e <ch4_no_shift+0x2>

00007092 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7092:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    7096:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7098:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    709a:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    709c:	21 ff       	sbrs	r18, 1
	rjmp .
    709e:	00 c0       	rjmp	.+0      	; 0x70a0 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    70a0:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    70a2:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    70a4:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    70a8:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    70aa:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    70ac:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    70ae:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    70b0:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    70b4:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    70b8:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    70ba:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    70be:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    70c2:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    70c6:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    70c8:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    70cc:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    70ce:	f0 1f       	adc	r31, r16

	movw r16,ZL
    70d0:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    70d2:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    70d6:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    70da:	00 19       	sub	r16, r0
	sbc r17,r1
    70dc:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    70de:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    70e2:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    70e6:	e0 15       	cp	r30, r0
	cpc ZH,r1
    70e8:	f1 05       	cpc	r31, r1
	brlo .+2
    70ea:	08 f0       	brcs	.+2      	; 0x70ee <ch4_end+0x5c>
	movw ZL,r16
    70ec:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    70ee:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    70f2:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    70f6:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    70f8:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    70fc:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    70fe:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7100:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7102:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7104:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7106:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7108:	d0 05       	cpc	r29, r0
	brlt .+2
    710a:	0c f0       	brlt	.+2      	; 0x710e <ch4_end+0x7c>
	ldi r28,127
    710c:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    710e:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7110:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7112:	d0 05       	cpc	r29, r0
	brge .+2
    7114:	0c f4       	brge	.+2      	; 0x7118 <ch4_end+0x86>
	ldi r28,-128
    7116:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7118:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    711a:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    711e:	df 91       	pop	r29
	pop r28
    7120:	cf 91       	pop	r28
	pop r18
    7122:	2f 91       	pop	r18
	pop r17
    7124:	1f 91       	pop	r17
	pop r16
    7126:	0f 91       	pop	r16
	
	ret
    7128:	08 95       	ret

0000712a <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    712a:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    712e:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    7132:	08 95       	ret

00007134 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7134:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7136:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7138:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    713a:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    713c:	68 e1       	ldi	r22, 0x18	; 24

0000713e <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    713e:	6d 93       	st	X+, r22
	sbiw r30,1
    7140:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7142:	e9 f7       	brne	.-6      	; 0x713e <fill_vram_loop>

	clr r1
    7144:	11 24       	eor	r1, r1

	ret
    7146:	08 95       	ret

00007148 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7148:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    714c:	45 0f       	add	r20, r21
	rjmp SetTile	
    714e:	00 c0       	rjmp	.+0      	; 0x7150 <SetTile>

00007150 <SetTile>:

	ret

#else

	clr r25
    7150:	99 27       	eor	r25, r25
	clr r23	
    7152:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    7154:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    7156:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    7158:	08 0e       	add	r0, r24
	adc r1,r25
    715a:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    715c:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    715e:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    7160:	a0 0d       	add	r26, r0
	adc XH,r1
    7162:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    7164:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    7166:	4c 93       	st	X, r20

	clr r1
    7168:	11 24       	eor	r1, r1

	ret
    716a:	08 95       	ret

0000716c <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    716c:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    7170:	08 95       	ret

00007172 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7172:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    7176:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    717a:	08 95       	ret

0000717c <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    717c:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    7180:	81 70       	andi	r24, 0x01	; 1
	ret
    7182:	08 95       	ret

00007184 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7184:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    7188:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    718a:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    718e:	08 95       	ret

00007190 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7190:	88 23       	and	r24, r24
	brne rj_p2
    7192:	29 f4       	brne	.+10     	; 0x719e <rj_p2>
		
	lds r24,joypad1_status_lo
    7194:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    7198:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    719c:	08 95       	ret

0000719e <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    719e:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    71a2:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    71a6:	08 95       	ret

000071a8 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    71a8:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    71aa:	7a 95       	dec	r23
	brne .-4 ;~1 us
    71ac:	f1 f7       	brne	.-4      	; 0x71aa <WaitUs+0x2>
	nop
    71ae:	00 00       	nop
	sbiw r24,1
    71b0:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    71b2:	d1 f7       	brne	.-12     	; 0x71a8 <WaitUs>

	ret
    71b4:	08 95       	ret

000071b6 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    71b6:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    71b8:	fe cf       	rjmp	.-4      	; 0x71b6 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    71ba:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    71bc:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    71be:	60 bd       	out	0x20, r22	; 32
   cli
    71c0:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    71c2:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    71c4:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    71c6:	78 94       	sei
   ret
    71c8:	08 95       	ret

000071ca <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    71ca:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    71cc:	fe cf       	rjmp	.-4      	; 0x71ca <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    71ce:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    71d0:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    71d2:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    71d4:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    71d6:	80 b5       	in	r24, 0x20	; 32
   sei
    71d8:	78 94       	sei
   ret
    71da:	08 95       	ret

000071dc <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    71dc:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    71de:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    71e2:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    71e6:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    71e8:	80 93 81 00 	sts	0x0081, r24

		cli
    71ec:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    71ee:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    71f0:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    71f4:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    71f6:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    71fa:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    71fc:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7200:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7204:	78 94       	sei

00007206 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7206:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    720a:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    720c:	e0 f3       	brcs	.-8      	; 0x7206 <wait>

		ret
    720e:	08 95       	ret

00007210 <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    7210:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    7214:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    7218:	08 95       	ret

0000721a <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    721a:	0f 93       	push	r16
		push r17
    721c:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    721e:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7220:	0f 93       	push	r16

		lds r16,sync_pulse
    7222:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    7226:	03 95       	inc	r16
		sts sync_pulse,r16
    7228:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    722c:	00 fd       	sbrc	r16, 0
		rjmp 1f
    722e:	08 c0       	rjmp	.+16     	; 0x7240 <__vector_8+0x26>
		lds r17,random_value
    7230:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7234:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7238:	10 27       	eor	r17, r16
		sts random_value,r17
    723a:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    723e:	07 c0       	rjmp	.+14     	; 0x724e <__vector_8+0x34>
	1:
		lds r17,random_value+1
    7240:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7244:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7248:	10 27       	eor	r17, r16
		sts random_value+1,r17
    724a:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    724e:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    7250:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7254:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7256:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7258:	1f 91       	pop	r17
		pop r16
    725a:	0f 91       	pop	r16
		reti
    725c:	18 95       	reti

0000725e <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    725e:	98 e0       	ldi	r25, 0x08	; 8
    7260:	88 e1       	ldi	r24, 0x18	; 24
    7262:	0f b6       	in	r0, 0x3f	; 63
    7264:	f8 94       	cli
    7266:	a8 95       	wdr
    7268:	80 93 60 00 	sts	0x0060, r24
    726c:	0f be       	out	0x3f, r0	; 63
    726e:	90 93 60 00 	sts	0x0060, r25
	while(1);
    7272:	ff cf       	rjmp	.-2      	; 0x7272 <SoftReset+0x14>

00007274 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7274:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7276:	c8 95       	lpm
    7278:	c8 95       	lpm
		Wait200ns();
    727a:	c8 95       	lpm
    727c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    727e:	12 98       	cbi	0x02, 2	; 2
    7280:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7282:	80 e0       	ldi	r24, 0x00	; 0
    7284:	90 e0       	ldi	r25, 0x00	; 0
    7286:	20 e0       	ldi	r18, 0x00	; 0
    7288:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    728a:	36 95       	lsr	r19
    728c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    728e:	96 95       	lsr	r25
    7290:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7292:	c8 95       	lpm
    7294:	c8 95       	lpm
			Wait200ns();
    7296:	c8 95       	lpm
    7298:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    729a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    729c:	00 9b       	sbis	0x00, 0	; 0
    729e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    72a0:	01 9b       	sbis	0x00, 1	; 0
    72a2:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    72a4:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    72a6:	c8 95       	lpm
    72a8:	c8 95       	lpm
			Wait200ns();
    72aa:	c8 95       	lpm
    72ac:	c8 95       	lpm
    72ae:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    72b0:	61 f7       	brne	.-40     	; 0x728a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    72b2:	30 93 f2 0a 	sts	0x0AF2, r19
    72b6:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    72ba:	90 93 f6 0a 	sts	0x0AF6, r25
    72be:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    72c2:	80 91 f1 0a 	lds	r24, 0x0AF1
    72c6:	90 91 f2 0a 	lds	r25, 0x0AF2
    72ca:	0f 97       	sbiw	r24, 0x0f	; 15
    72cc:	31 f0       	breq	.+12     	; 0x72da <ReadButtons+0x66>
    72ce:	80 91 f5 0a 	lds	r24, 0x0AF5
    72d2:	90 91 f6 0a 	lds	r25, 0x0AF6
    72d6:	0f 97       	sbiw	r24, 0x0f	; 15
    72d8:	11 f4       	brne	.+4      	; 0x72de <ReadButtons+0x6a>
		SoftReset();
    72da:	0e 94 2f 39 	call	0x725e	; 0x725e <SoftReset>
    72de:	08 95       	ret

000072e0 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    72e0:	10 92 3c 0b 	sts	0x0B3C, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    72e4:	00 99       	sbic	0x00, 0	; 0
    72e6:	03 c0       	rjmp	.+6      	; 0x72ee <ReadControllers+0xe>
    72e8:	81 e0       	ldi	r24, 0x01	; 1
    72ea:	80 93 3c 0b 	sts	0x0B3C, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    72ee:	01 99       	sbic	0x00, 1	; 0
    72f0:	05 c0       	rjmp	.+10     	; 0x72fc <ReadControllers+0x1c>
    72f2:	80 91 3c 0b 	lds	r24, 0x0B3C
    72f6:	82 60       	ori	r24, 0x02	; 2
    72f8:	80 93 3c 0b 	sts	0x0B3C, r24
			
	//read the standard buttons
	ReadButtons();
    72fc:	0c 94 3a 39 	jmp	0x7274	; 0x7274 <ReadButtons>

00007300 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7300:	cf 93       	push	r28
    7302:	df 93       	push	r29
    7304:	c0 e0       	ldi	r28, 0x00	; 0
    7306:	d0 e0       	ldi	r29, 0x00	; 0
    7308:	fe 01       	movw	r30, r28
    730a:	e2 56       	subi	r30, 0x62	; 98
    730c:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    730e:	64 91       	lpm	r22, Z
    7310:	ce 01       	movw	r24, r28
    7312:	0e 94 db 38 	call	0x71b6	; 0x71b6 <WriteEeprom>
    7316:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7318:	c0 32       	cpi	r28, 0x20	; 32
    731a:	d1 05       	cpc	r29, r1
    731c:	a9 f7       	brne	.-22     	; 0x7308 <FormatEeprom+0x8>
    731e:	c0 e2       	ldi	r28, 0x20	; 32
    7320:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7322:	6f ef       	ldi	r22, 0xFF	; 255
    7324:	ce 01       	movw	r24, r28
    7326:	0e 94 db 38 	call	0x71b6	; 0x71b6 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    732a:	6f ef       	ldi	r22, 0xFF	; 255
    732c:	ce 01       	movw	r24, r28
    732e:	01 96       	adiw	r24, 0x01	; 1
    7330:	0e 94 db 38 	call	0x71b6	; 0x71b6 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7334:	a0 96       	adiw	r28, 0x20	; 32
    7336:	c1 15       	cp	r28, r1
    7338:	88 e0       	ldi	r24, 0x08	; 8
    733a:	d8 07       	cpc	r29, r24
    733c:	91 f7       	brne	.-28     	; 0x7322 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    733e:	df 91       	pop	r29
    7340:	cf 91       	pop	r28
    7342:	08 95       	ret

00007344 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7344:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7346:	80 e0       	ldi	r24, 0x00	; 0
    7348:	90 e0       	ldi	r25, 0x00	; 0
    734a:	0e 94 e5 38 	call	0x71ca	; 0x71ca <ReadEeprom>
    734e:	c8 2f       	mov	r28, r24
    7350:	81 e0       	ldi	r24, 0x01	; 1
    7352:	90 e0       	ldi	r25, 0x00	; 0
    7354:	0e 94 e5 38 	call	0x71ca	; 0x71ca <ReadEeprom>
    7358:	28 2f       	mov	r18, r24
    735a:	30 e0       	ldi	r19, 0x00	; 0
    735c:	32 2f       	mov	r19, r18
    735e:	22 27       	eor	r18, r18
    7360:	2c 0f       	add	r18, r28
    7362:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7364:	81 e0       	ldi	r24, 0x01	; 1
    7366:	2a 35       	cpi	r18, 0x5A	; 90
    7368:	35 45       	sbci	r19, 0x55	; 85
    736a:	09 f0       	breq	.+2      	; 0x736e <isEepromFormatted+0x2a>
    736c:	80 e0       	ldi	r24, 0x00	; 0
}
    736e:	cf 91       	pop	r28
    7370:	08 95       	ret

00007372 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7372:	cf 92       	push	r12
    7374:	df 92       	push	r13
    7376:	ef 92       	push	r14
    7378:	ff 92       	push	r15
    737a:	0f 93       	push	r16
    737c:	1f 93       	push	r17
    737e:	cf 93       	push	r28
    7380:	df 93       	push	r29
    7382:	1f 92       	push	r1
    7384:	cd b7       	in	r28, 0x3d	; 61
    7386:	de b7       	in	r29, 0x3e	; 62
    7388:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    738a:	0e 94 a2 39 	call	0x7344	; 0x7344 <isEepromFormatted>
    738e:	88 23       	and	r24, r24
    7390:	09 f4       	brne	.+2      	; 0x7394 <EepromWriteBlock+0x22>
    7392:	4d c0       	rjmp	.+154    	; 0x742e <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7394:	f6 01       	movw	r30, r12
    7396:	80 81       	ld	r24, Z
    7398:	91 81       	ldd	r25, Z+1	; 0x01
    739a:	8f 3f       	cpi	r24, 0xFF	; 255
    739c:	ff ef       	ldi	r31, 0xFF	; 255
    739e:	9f 07       	cpc	r25, r31
    73a0:	09 f4       	brne	.+2      	; 0x73a4 <EepromWriteBlock+0x32>
    73a2:	47 c0       	rjmp	.+142    	; 0x7432 <EepromWriteBlock+0xc0>
    73a4:	8a 35       	cpi	r24, 0x5A	; 90
    73a6:	95 45       	sbci	r25, 0x55	; 85
    73a8:	09 f4       	brne	.+2      	; 0x73ac <EepromWriteBlock+0x3a>
    73aa:	43 c0       	rjmp	.+134    	; 0x7432 <EepromWriteBlock+0xc0>
    73ac:	00 e2       	ldi	r16, 0x20	; 32
    73ae:	10 e0       	ldi	r17, 0x00	; 0
    73b0:	f1 2c       	mov	r15, r1
    73b2:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    73b4:	c8 01       	movw	r24, r16
    73b6:	49 83       	std	Y+1, r20	; 0x01
    73b8:	0e 94 e5 38 	call	0x71ca	; 0x71ca <ReadEeprom>
    73bc:	e8 2e       	mov	r14, r24
    73be:	c8 01       	movw	r24, r16
    73c0:	01 96       	adiw	r24, 0x01	; 1
    73c2:	0e 94 e5 38 	call	0x71ca	; 0x71ca <ReadEeprom>
    73c6:	28 2f       	mov	r18, r24
    73c8:	30 e0       	ldi	r19, 0x00	; 0
    73ca:	32 2f       	mov	r19, r18
    73cc:	22 27       	eor	r18, r18
    73ce:	c9 01       	movw	r24, r18
    73d0:	8e 0d       	add	r24, r14
    73d2:	91 1d       	adc	r25, r1
		if(id==block->id){
    73d4:	f6 01       	movw	r30, r12
    73d6:	20 81       	ld	r18, Z
    73d8:	31 81       	ldd	r19, Z+1	; 0x01
    73da:	49 81       	ldd	r20, Y+1	; 0x01
    73dc:	82 17       	cp	r24, r18
    73de:	93 07       	cpc	r25, r19
    73e0:	19 f4       	brne	.+6      	; 0x73e8 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    73e2:	ff 20       	and	r15, r15
    73e4:	89 f0       	breq	.+34     	; 0x7408 <EepromWriteBlock+0x96>
    73e6:	0c c0       	rjmp	.+24     	; 0x7400 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    73e8:	01 96       	adiw	r24, 0x01	; 1
    73ea:	19 f4       	brne	.+6      	; 0x73f2 <EepromWriteBlock+0x80>
    73ec:	f1 10       	cpse	r15, r1
    73ee:	01 c0       	rjmp	.+2      	; 0x73f2 <EepromWriteBlock+0x80>
    73f0:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    73f2:	4f 5f       	subi	r20, 0xFF	; 255
    73f4:	00 5e       	subi	r16, 0xE0	; 224
    73f6:	1f 4f       	sbci	r17, 0xFF	; 255
    73f8:	40 34       	cpi	r20, 0x40	; 64
    73fa:	e1 f6       	brne	.-72     	; 0x73b4 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    73fc:	ff 20       	and	r15, r15
    73fe:	d9 f0       	breq	.+54     	; 0x7436 <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7400:	20 e2       	ldi	r18, 0x20	; 32
    7402:	f2 9e       	mul	r15, r18
    7404:	80 01       	movw	r16, r0
    7406:	11 24       	eor	r1, r1
    7408:	76 01       	movw	r14, r12
    740a:	80 e2       	ldi	r24, 0x20	; 32
    740c:	e8 0e       	add	r14, r24
    740e:	f1 1c       	adc	r15, r1
    7410:	0c 19       	sub	r16, r12
    7412:	1d 09       	sbc	r17, r13
    7414:	c6 01       	movw	r24, r12
    7416:	80 0f       	add	r24, r16
    7418:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    741a:	f6 01       	movw	r30, r12
    741c:	61 91       	ld	r22, Z+
    741e:	6f 01       	movw	r12, r30
    7420:	0e 94 db 38 	call	0x71b6	; 0x71b6 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7424:	ce 14       	cp	r12, r14
    7426:	df 04       	cpc	r13, r15
    7428:	a9 f7       	brne	.-22     	; 0x7414 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    742a:	80 e0       	ldi	r24, 0x00	; 0
    742c:	05 c0       	rjmp	.+10     	; 0x7438 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    742e:	84 e0       	ldi	r24, 0x04	; 4
    7430:	03 c0       	rjmp	.+6      	; 0x7438 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7432:	81 e0       	ldi	r24, 0x01	; 1
    7434:	01 c0       	rjmp	.+2      	; 0x7438 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7436:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    7438:	0f 90       	pop	r0
    743a:	df 91       	pop	r29
    743c:	cf 91       	pop	r28
    743e:	1f 91       	pop	r17
    7440:	0f 91       	pop	r16
    7442:	ff 90       	pop	r15
    7444:	ef 90       	pop	r14
    7446:	df 90       	pop	r13
    7448:	cf 90       	pop	r12
    744a:	08 95       	ret

0000744c <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    744c:	df 92       	push	r13
    744e:	ef 92       	push	r14
    7450:	ff 92       	push	r15
    7452:	0f 93       	push	r16
    7454:	1f 93       	push	r17
    7456:	cf 93       	push	r28
    7458:	df 93       	push	r29
    745a:	7c 01       	movw	r14, r24
    745c:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    745e:	0e 94 a2 39 	call	0x7344	; 0x7344 <isEepromFormatted>
    7462:	88 23       	and	r24, r24
    7464:	89 f1       	breq	.+98     	; 0x74c8 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7466:	8f ef       	ldi	r24, 0xFF	; 255
    7468:	e8 16       	cp	r14, r24
    746a:	f8 06       	cpc	r15, r24
    746c:	79 f1       	breq	.+94     	; 0x74cc <EepromReadBlock+0x80>
    746e:	00 e0       	ldi	r16, 0x00	; 0
    7470:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7472:	c8 01       	movw	r24, r16
    7474:	0e 94 e5 38 	call	0x71ca	; 0x71ca <ReadEeprom>
    7478:	d8 2e       	mov	r13, r24
    747a:	c8 01       	movw	r24, r16
    747c:	01 96       	adiw	r24, 0x01	; 1
    747e:	0e 94 e5 38 	call	0x71ca	; 0x71ca <ReadEeprom>
    7482:	28 2f       	mov	r18, r24
    7484:	30 e0       	ldi	r19, 0x00	; 0
    7486:	32 2f       	mov	r19, r18
    7488:	22 27       	eor	r18, r18
    748a:	2d 0d       	add	r18, r13
    748c:	31 1d       	adc	r19, r1
		if(id==blockId){
    748e:	2e 15       	cp	r18, r14
    7490:	3f 05       	cpc	r19, r15
    7492:	39 f4       	brne	.+14     	; 0x74a2 <EepromReadBlock+0x56>
    7494:	7e 01       	movw	r14, r28
    7496:	80 e2       	ldi	r24, 0x20	; 32
    7498:	e8 0e       	add	r14, r24
    749a:	f1 1c       	adc	r15, r1
    749c:	0c 1b       	sub	r16, r28
    749e:	1d 0b       	sbc	r17, r29
    74a0:	08 c0       	rjmp	.+16     	; 0x74b2 <EepromReadBlock+0x66>
    74a2:	00 5e       	subi	r16, 0xE0	; 224
    74a4:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    74a6:	01 15       	cp	r16, r1
    74a8:	84 e0       	ldi	r24, 0x04	; 4
    74aa:	18 07       	cpc	r17, r24
    74ac:	11 f7       	brne	.-60     	; 0x7472 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    74ae:	83 e0       	ldi	r24, 0x03	; 3
    74b0:	0e c0       	rjmp	.+28     	; 0x74ce <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    74b2:	ce 01       	movw	r24, r28
    74b4:	80 0f       	add	r24, r16
    74b6:	91 1f       	adc	r25, r17
    74b8:	0e 94 e5 38 	call	0x71ca	; 0x71ca <ReadEeprom>
    74bc:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    74be:	ce 15       	cp	r28, r14
    74c0:	df 05       	cpc	r29, r15
    74c2:	b9 f7       	brne	.-18     	; 0x74b2 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    74c4:	80 e0       	ldi	r24, 0x00	; 0
    74c6:	03 c0       	rjmp	.+6      	; 0x74ce <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    74c8:	84 e0       	ldi	r24, 0x04	; 4
    74ca:	01 c0       	rjmp	.+2      	; 0x74ce <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    74cc:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    74ce:	df 91       	pop	r29
    74d0:	cf 91       	pop	r28
    74d2:	1f 91       	pop	r17
    74d4:	0f 91       	pop	r16
    74d6:	ff 90       	pop	r15
    74d8:	ef 90       	pop	r14
    74da:	df 90       	pop	r13
    74dc:	08 95       	ret

000074de <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    74de:	fc 01       	movw	r30, r24
    74e0:	45 87       	std	Z+13, r20	; 0x0d
    74e2:	08 95       	ret

000074e4 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    74e4:	e2 e0       	ldi	r30, 0x02	; 2
    74e6:	fb e0       	ldi	r31, 0x0B	; 11
    74e8:	81 e0       	ldi	r24, 0x01	; 1
    74ea:	91 e0       	ldi	r25, 0x01	; 1
    74ec:	95 8b       	std	Z+21, r25	; 0x15
    74ee:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    74f0:	43 8b       	std	Z+19, r20	; 0x13
    74f2:	08 95       	ret

000074f4 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    74f4:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    74f6:	90 81       	ld	r25, Z
    74f8:	9f 75       	andi	r25, 0x5F	; 95
    74fa:	90 83       	st	Z, r25
    74fc:	08 95       	ret

000074fe <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    74fe:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7500:	90 81       	ld	r25, Z
    7502:	90 64       	ori	r25, 0x40	; 64
    7504:	90 83       	st	Z, r25
    7506:	08 95       	ret

00007508 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    7508:	fc 01       	movw	r30, r24
    750a:	44 87       	std	Z+12, r20	; 0x0c
    750c:	08 95       	ret

0000750e <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    750e:	fc 01       	movw	r30, r24
    7510:	47 83       	std	Z+7, r20	; 0x07
    7512:	08 95       	ret

00007514 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    7514:	fc 01       	movw	r30, r24
    7516:	40 87       	std	Z+8, r20	; 0x08
    7518:	08 95       	ret

0000751a <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    751a:	1f 93       	push	r17
    751c:	cf 93       	push	r28
    751e:	df 93       	push	r29
    7520:	ec 01       	movw	r28, r24
    7522:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7524:	29 81       	ldd	r18, Y+1	; 0x01
    7526:	30 e0       	ldi	r19, 0x00	; 0
    7528:	f9 01       	movw	r30, r18
    752a:	ee 0f       	add	r30, r30
    752c:	ff 1f       	adc	r31, r31
    752e:	e8 5f       	subi	r30, 0xF8	; 248
    7530:	f1 48       	sbci	r31, 0x81	; 129
    7532:	65 91       	lpm	r22, Z+
    7534:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7536:	f9 01       	movw	r30, r18
    7538:	e4 0f       	add	r30, r20
    753a:	f1 1d       	adc	r31, r1
    753c:	47 fd       	sbrc	r20, 7
    753e:	fa 95       	dec	r31
    7540:	ee 0f       	add	r30, r30
    7542:	ff 1f       	adc	r31, r31
    7544:	e8 5f       	subi	r30, 0xF8	; 248
    7546:	f1 48       	sbci	r31, 0x81	; 129
    7548:	85 91       	lpm	r24, Z+
    754a:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    754c:	86 1b       	sub	r24, r22
    754e:	97 0b       	sbc	r25, r23
    7550:	60 91 44 0b 	lds	r22, 0x0B44
    7554:	70 e0       	ldi	r23, 0x00	; 0
    7556:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
	if(delta==0)delta++;
    755a:	61 15       	cp	r22, r1
    755c:	71 05       	cpc	r23, r1
    755e:	11 f4       	brne	.+4      	; 0x7564 <PatchCommand11+0x4a>
    7560:	61 e0       	ldi	r22, 0x01	; 1
    7562:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    7564:	86 e0       	ldi	r24, 0x06	; 6
    7566:	18 9f       	mul	r17, r24
    7568:	f0 01       	movw	r30, r0
    756a:	11 24       	eor	r1, r1
    756c:	ee 5f       	subi	r30, 0xFE	; 254
    756e:	f4 4f       	sbci	r31, 0xF4	; 244
    7570:	81 81       	ldd	r24, Z+1	; 0x01
    7572:	92 81       	ldd	r25, Z+2	; 0x02
    7574:	86 0f       	add	r24, r22
    7576:	97 1f       	adc	r25, r23
    7578:	92 83       	std	Z+2, r25	; 0x02
    757a:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    757c:	7b 83       	std	Y+3, r23	; 0x03
    757e:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    7580:	88 81       	ld	r24, Y
    7582:	88 60       	ori	r24, 0x08	; 8
    7584:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    7586:	89 81       	ldd	r24, Y+1	; 0x01
    7588:	48 0f       	add	r20, r24
    758a:	4c 83       	std	Y+4, r20	; 0x04
}
    758c:	df 91       	pop	r29
    758e:	cf 91       	pop	r28
    7590:	1f 91       	pop	r17
    7592:	08 95       	ret

00007594 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    7594:	40 93 44 0b 	sts	0x0B44, r20
    7598:	08 95       	ret

0000759a <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    759a:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    759c:	64 2f       	mov	r22, r20
    759e:	0c 94 67 3e 	jmp	0x7cce	; 0x7cce <SetMixerWave>

000075a2 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    75a2:	fc 01       	movw	r30, r24
    75a4:	86 2f       	mov	r24, r22
	track->note+=param;
    75a6:	91 81       	ldd	r25, Z+1	; 0x01
    75a8:	64 2f       	mov	r22, r20
    75aa:	69 0f       	add	r22, r25
    75ac:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    75ae:	0c 94 50 3e 	jmp	0x7ca0	; 0x7ca0 <SetMixerNote>

000075b2 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    75b2:	fc 01       	movw	r30, r24
    75b4:	86 2f       	mov	r24, r22
	track->note-=param;
    75b6:	91 81       	ldd	r25, Z+1	; 0x01
    75b8:	69 2f       	mov	r22, r25
    75ba:	64 1b       	sub	r22, r20
    75bc:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    75be:	0c 94 50 3e 	jmp	0x7ca0	; 0x7ca0 <SetMixerNote>

000075c2 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    75c2:	0f 93       	push	r16
    75c4:	1f 93       	push	r17
    75c6:	cf 93       	push	r28
    75c8:	df 93       	push	r29
    75ca:	1f 92       	push	r1
    75cc:	cd b7       	in	r28, 0x3d	; 61
    75ce:	de b7       	in	r29, 0x3e	; 62
    75d0:	8c 01       	movw	r16, r24
    75d2:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    75d4:	64 2f       	mov	r22, r20
    75d6:	49 83       	std	Y+1, r20	; 0x01
    75d8:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <SetMixerNote>
	track->note=param;
    75dc:	49 81       	ldd	r20, Y+1	; 0x01
    75de:	f8 01       	movw	r30, r16
    75e0:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    75e2:	80 81       	ld	r24, Z
    75e4:	87 7f       	andi	r24, 0xF7	; 247
    75e6:	80 83       	st	Z, r24
}
    75e8:	0f 90       	pop	r0
    75ea:	df 91       	pop	r29
    75ec:	cf 91       	pop	r28
    75ee:	1f 91       	pop	r17
    75f0:	0f 91       	pop	r16
    75f2:	08 95       	ret

000075f4 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    75f4:	90 93 b0 0b 	sts	0x0BB0, r25
    75f8:	80 93 af 0b 	sts	0x0BAF, r24

	masterVolume=DEFAULT_MASTER_VOL;
    75fc:	8f e6       	ldi	r24, 0x6F	; 111
    75fe:	80 93 b2 0b 	sts	0x0BB2, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7602:	10 92 00 0b 	sts	0x0B00, r1
    7606:	ed e4       	ldi	r30, 0x4D	; 77
    7608:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    760a:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    760c:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    760e:	28 e1       	ldi	r18, 0x18	; 24
    7610:	df 01       	movw	r26, r30
    7612:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7614:	8c 93       	st	X, r24
    7616:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    7618:	1c 92       	st	X, r1
    761a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    761c:	9c 93       	st	X, r25
    761e:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7620:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    7622:	10 82       	st	Z, r1
    7624:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    7626:	2c 93       	st	X, r18
    7628:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    762a:	8c 93       	st	X, r24
    762c:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    762e:	3b e0       	ldi	r19, 0x0B	; 11
    7630:	eb 3b       	cpi	r30, 0xBB	; 187
    7632:	f3 07       	cpc	r31, r19
    7634:	69 f7       	brne	.-38     	; 0x7610 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7636:	08 95       	ret

00007638 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7638:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    763a:	ed 91       	ld	r30, X+
    763c:	fc 91       	ld	r31, X
    763e:	11 97       	sbiw	r26, 0x01	; 1
    7640:	9f 01       	movw	r18, r30
    7642:	2f 5f       	subi	r18, 0xFF	; 255
    7644:	3f 4f       	sbci	r19, 0xFF	; 255
    7646:	11 96       	adiw	r26, 0x01	; 1
    7648:	3c 93       	st	X, r19
    764a:	2e 93       	st	-X, r18
    764c:	e4 91       	lpm	r30, Z
    764e:	e7 fd       	sbrc	r30, 7
    7650:	03 c0       	rjmp	.+6      	; 0x7658 <ReadVarLen+0x20>
    7652:	8e 2f       	mov	r24, r30
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	08 95       	ret
    {
       value &= 0x7F;
    7658:	ef 77       	andi	r30, 0x7F	; 127
    765a:	8e 2f       	mov	r24, r30
    765c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    765e:	96 95       	lsr	r25
    7660:	98 2f       	mov	r25, r24
    7662:	88 27       	eor	r24, r24
    7664:	97 95       	ror	r25
    7666:	87 95       	ror	r24
    7668:	2f 5f       	subi	r18, 0xFF	; 255
    766a:	3f 4f       	sbci	r19, 0xFF	; 255
    766c:	f9 01       	movw	r30, r18
    766e:	31 97       	sbiw	r30, 0x01	; 1
    7670:	e4 91       	lpm	r30, Z
    7672:	4e 2f       	mov	r20, r30
    7674:	4f 77       	andi	r20, 0x7F	; 127
    7676:	84 0f       	add	r24, r20
    7678:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    767a:	e7 fd       	sbrc	r30, 7
    767c:	f0 cf       	rjmp	.-32     	; 0x765e <ReadVarLen+0x26>
    767e:	2d 93       	st	X+, r18
    7680:	3c 93       	st	X, r19
    }


    return value;
}
    7682:	08 95       	ret

00007684 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    7684:	cf 92       	push	r12
    7686:	df 92       	push	r13
    7688:	ff 92       	push	r15
    768a:	0f 93       	push	r16
    768c:	1f 93       	push	r17
    768e:	cf 93       	push	r28
    7690:	df 93       	push	r29
    7692:	1f 92       	push	r1
    7694:	cd b7       	in	r28, 0x3d	; 61
    7696:	de b7       	in	r29, 0x3e	; 62
    7698:	18 2f       	mov	r17, r24
    769a:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    769c:	c8 2e       	mov	r12, r24
    769e:	d1 2c       	mov	r13, r1
    76a0:	36 e1       	ldi	r19, 0x16	; 22
    76a2:	83 9f       	mul	r24, r19
    76a4:	f0 01       	movw	r30, r0
    76a6:	11 24       	eor	r1, r1
    76a8:	e1 5c       	subi	r30, 0xC1	; 193
    76aa:	f4 4f       	sbci	r31, 0xF4	; 244
    76ac:	80 81       	ld	r24, Z
    76ae:	f8 2e       	mov	r15, r24
    76b0:	ff 1c       	adc	r15, r15
    76b2:	ff 24       	eor	r15, r15
    76b4:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    76b6:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    76b8:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    76ba:	9f ef       	ldi	r25, 0xFF	; 255
    76bc:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    76be:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    76c0:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    76c2:	87 7b       	andi	r24, 0xB7	; 183
    76c4:	80 62       	ori	r24, 0x20	; 32
    76c6:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    76c8:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    76ca:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    76cc:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    76ce:	13 30       	cpi	r17, 0x03	; 3
    76d0:	69 f4       	brne	.+26     	; 0x76ec <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    76d2:	f1 10       	cpse	r15, r1
    76d4:	01 c0       	rjmp	.+2      	; 0x76d8 <TriggerCommon+0x54>
    76d6:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    76d8:	81 e0       	ldi	r24, 0x01	; 1
    76da:	91 e0       	ldi	r25, 0x01	; 1
    76dc:	90 93 17 0b 	sts	0x0B17, r25
    76e0:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    76e4:	81 e0       	ldi	r24, 0x01	; 1
    76e6:	80 93 15 0b 	sts	0x0B15, r24
    76ea:	3c c0       	rjmp	.+120    	; 0x7764 <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    76ec:	14 30       	cpi	r17, 0x04	; 4
    76ee:	09 f0       	breq	.+2      	; 0x76f2 <TriggerCommon+0x6e>
    76f0:	2f c0       	rjmp	.+94     	; 0x7750 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    76f2:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    76f6:	80 91 af 0b 	lds	r24, 0x0BAF
    76fa:	90 91 b0 0b 	lds	r25, 0x0BB0
    76fe:	e9 e0       	ldi	r30, 0x09	; 9
    7700:	6e 9f       	mul	r22, r30
    7702:	80 0d       	add	r24, r0
    7704:	91 1d       	adc	r25, r1
    7706:	11 24       	eor	r1, r1
    7708:	fc 01       	movw	r30, r24
    770a:	31 96       	adiw	r30, 0x01	; 1
    770c:	65 91       	lpm	r22, Z+
    770e:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    7710:	70 93 1f 0b 	sts	0x0B1F, r23
    7714:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    7718:	ac 01       	movw	r20, r24
    771a:	49 5f       	subi	r20, 0xF9	; 249
    771c:	5f 4f       	sbci	r21, 0xFF	; 255
    771e:	fa 01       	movw	r30, r20
    7720:	a5 91       	lpm	r26, Z+
    7722:	b4 91       	lpm	r27, Z
    7724:	05 96       	adiw	r24, 0x05	; 5
    7726:	fc 01       	movw	r30, r24
    7728:	85 91       	lpm	r24, Z+
    772a:	94 91       	lpm	r25, Z
    772c:	a8 1b       	sub	r26, r24
    772e:	b9 0b       	sbc	r27, r25
    7730:	b0 93 21 0b 	sts	0x0B21, r27
    7734:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7738:	fa 01       	movw	r30, r20
    773a:	85 91       	lpm	r24, Z+
    773c:	94 91       	lpm	r25, Z
    773e:	68 0f       	add	r22, r24
    7740:	79 1f       	adc	r23, r25
    7742:	70 93 23 0b 	sts	0x0B23, r23
    7746:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    774a:	62 2f       	mov	r22, r18
    774c:	84 e0       	ldi	r24, 0x04	; 4
    774e:	08 c0       	rjmp	.+16     	; 0x7760 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    7750:	60 e0       	ldi	r22, 0x00	; 0
    7752:	81 2f       	mov	r24, r17
    7754:	29 83       	std	Y+1, r18	; 0x01
    7756:	0e 94 67 3e 	call	0x7cce	; 0x7cce <SetMixerWave>
			SetMixerNote(channel,note);
    775a:	29 81       	ldd	r18, Y+1	; 0x01
    775c:	62 2f       	mov	r22, r18
    775e:	81 2f       	mov	r24, r17
    7760:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7764:	86 e1       	ldi	r24, 0x16	; 22
    7766:	8c 9d       	mul	r24, r12
    7768:	f0 01       	movw	r30, r0
    776a:	8d 9d       	mul	r24, r13
    776c:	f0 0d       	add	r31, r0
    776e:	11 24       	eor	r1, r1
    7770:	e1 5c       	subi	r30, 0xC1	; 193
    7772:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7774:	ff 20       	and	r15, r15
    7776:	11 f0       	breq	.+4      	; 0x777c <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    7778:	07 87       	std	Z+15, r16	; 0x0f
    777a:	01 c0       	rjmp	.+2      	; 0x777e <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    777c:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    777e:	e0 91 af 0b 	lds	r30, 0x0BAF
    7782:	f0 91 b0 0b 	lds	r31, 0x0BB0
    7786:	39 e0       	ldi	r19, 0x09	; 9
    7788:	03 9f       	mul	r16, r19
    778a:	e0 0d       	add	r30, r0
    778c:	f1 1d       	adc	r31, r1
    778e:	11 24       	eor	r1, r1
    7790:	33 96       	adiw	r30, 0x03	; 3
    7792:	85 91       	lpm	r24, Z+
    7794:	94 91       	lpm	r25, Z
	if(pos==NULL){
    7796:	00 97       	sbiw	r24, 0x00	; 0
    7798:	59 f4       	brne	.+22     	; 0x77b0 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    779a:	86 e1       	ldi	r24, 0x16	; 22
    779c:	8c 9d       	mul	r24, r12
    779e:	f0 01       	movw	r30, r0
    77a0:	8d 9d       	mul	r24, r13
    77a2:	f0 0d       	add	r31, r0
    77a4:	11 24       	eor	r1, r1
    77a6:	e1 5c       	subi	r30, 0xC1	; 193
    77a8:	f4 4f       	sbci	r31, 0xF4	; 244
    77aa:	15 8a       	std	Z+21, r1	; 0x15
    77ac:	14 8a       	std	Z+20, r1	; 0x14
    77ae:	0e c0       	rjmp	.+28     	; 0x77cc <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    77b0:	fc 01       	movw	r30, r24
    77b2:	24 91       	lpm	r18, Z
    77b4:	36 e1       	ldi	r19, 0x16	; 22
    77b6:	3c 9d       	mul	r19, r12
    77b8:	f0 01       	movw	r30, r0
    77ba:	3d 9d       	mul	r19, r13
    77bc:	f0 0d       	add	r31, r0
    77be:	11 24       	eor	r1, r1
    77c0:	e1 5c       	subi	r30, 0xC1	; 193
    77c2:	f4 4f       	sbci	r31, 0xF4	; 244
    77c4:	21 8b       	std	Z+17, r18	; 0x11
    77c6:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    77c8:	95 8b       	std	Z+21, r25	; 0x15
    77ca:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    77cc:	0f 90       	pop	r0
    77ce:	df 91       	pop	r29
    77d0:	cf 91       	pop	r28
    77d2:	1f 91       	pop	r17
    77d4:	0f 91       	pop	r16
    77d6:	ff 90       	pop	r15
    77d8:	df 90       	pop	r13
    77da:	cf 90       	pop	r12
    77dc:	08 95       	ret

000077de <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    77de:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    77e0:	a8 2f       	mov	r26, r24
    77e2:	b0 e0       	ldi	r27, 0x00	; 0
    77e4:	96 e1       	ldi	r25, 0x16	; 22
    77e6:	89 9f       	mul	r24, r25
    77e8:	f0 01       	movw	r30, r0
    77ea:	11 24       	eor	r1, r1
    77ec:	e1 5c       	subi	r30, 0xC1	; 193
    77ee:	f4 4f       	sbci	r31, 0xF4	; 244
    77f0:	90 81       	ld	r25, Z
    77f2:	95 ff       	sbrs	r25, 5
    77f4:	02 c0       	rjmp	.+4      	; 0x77fa <TriggerNote+0x1c>
    77f6:	97 fd       	sbrc	r25, 7
    77f8:	28 c0       	rjmp	.+80     	; 0x784a <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    77fa:	31 11       	cpse	r19, r1
    77fc:	18 c0       	rjmp	.+48     	; 0x782e <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    77fe:	86 e1       	ldi	r24, 0x16	; 22
    7800:	8a 9f       	mul	r24, r26
    7802:	f0 01       	movw	r30, r0
    7804:	8b 9f       	mul	r24, r27
    7806:	f0 0d       	add	r31, r0
    7808:	11 24       	eor	r1, r1
    780a:	e1 5c       	subi	r30, 0xC1	; 193
    780c:	f4 4f       	sbci	r31, 0xF4	; 244
    780e:	85 85       	ldd	r24, Z+13	; 0x0d
    7810:	81 11       	cpse	r24, r1
    7812:	02 c0       	rjmp	.+4      	; 0x7818 <TriggerNote+0x3a>
    7814:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    7816:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7818:	86 e1       	ldi	r24, 0x16	; 22
    781a:	8a 9f       	mul	r24, r26
    781c:	f0 01       	movw	r30, r0
    781e:	8b 9f       	mul	r24, r27
    7820:	f0 0d       	add	r31, r0
    7822:	11 24       	eor	r1, r1
    7824:	e1 5c       	subi	r30, 0xC1	; 193
    7826:	f4 4f       	sbci	r31, 0xF4	; 244
    7828:	9f 7b       	andi	r25, 0xBF	; 191
    782a:	90 83       	st	Z, r25
    782c:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    782e:	26 e1       	ldi	r18, 0x16	; 22
    7830:	2a 9f       	mul	r18, r26
    7832:	f0 01       	movw	r30, r0
    7834:	2b 9f       	mul	r18, r27
    7836:	f0 0d       	add	r31, r0
    7838:	11 24       	eor	r1, r1
    783a:	e1 5c       	subi	r30, 0xC1	; 193
    783c:	f4 4f       	sbci	r31, 0xF4	; 244
    783e:	9f 77       	andi	r25, 0x7F	; 127
    7840:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    7842:	24 2f       	mov	r18, r20
    7844:	43 2f       	mov	r20, r19
    7846:	0c 94 42 3b 	jmp	0x7684	; 0x7684 <TriggerCommon>
    784a:	08 95       	ret

0000784c <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    784c:	5f 92       	push	r5
    784e:	6f 92       	push	r6
    7850:	7f 92       	push	r7
    7852:	8f 92       	push	r8
    7854:	9f 92       	push	r9
    7856:	af 92       	push	r10
    7858:	bf 92       	push	r11
    785a:	cf 92       	push	r12
    785c:	df 92       	push	r13
    785e:	ef 92       	push	r14
    7860:	ff 92       	push	r15
    7862:	0f 93       	push	r16
    7864:	1f 93       	push	r17
    7866:	cf 93       	push	r28
    7868:	df 93       	push	r29
    786a:	cf e3       	ldi	r28, 0x3F	; 63
    786c:	db e0       	ldi	r29, 0x0B	; 11
    786e:	82 e0       	ldi	r24, 0x02	; 2
    7870:	e8 2e       	mov	r14, r24
    7872:	8b e0       	ldi	r24, 0x0B	; 11
    7874:	f8 2e       	mov	r15, r24
    7876:	d7 01       	movw	r26, r14
    7878:	9e 01       	movw	r18, r28
    787a:	40 e0       	ldi	r20, 0x00	; 0
    787c:	50 e0       	ldi	r21, 0x00	; 0
    787e:	ca 01       	movw	r24, r20
    7880:	81 5c       	subi	r24, 0xC1	; 193
    7882:	94 4f       	sbci	r25, 0xF4	; 244
    7884:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7886:	fc 01       	movw	r30, r24
    7888:	85 85       	ldd	r24, Z+13	; 0x0d
    788a:	88 23       	and	r24, r24
    788c:	91 f0       	breq	.+36     	; 0x78b2 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    788e:	64 85       	ldd	r22, Z+12	; 0x0c
    7890:	99 27       	eor	r25, r25
    7892:	87 fd       	sbrc	r24, 7
    7894:	90 95       	com	r25
    7896:	86 0f       	add	r24, r22
    7898:	91 1d       	adc	r25, r1
    789a:	8f 3f       	cpi	r24, 0xFF	; 255
    789c:	91 05       	cpc	r25, r1
    789e:	19 f0       	breq	.+6      	; 0x78a6 <ProcessMusic+0x5a>
    78a0:	14 f0       	brlt	.+4      	; 0x78a6 <ProcessMusic+0x5a>
    78a2:	8f ef       	ldi	r24, 0xFF	; 255
    78a4:	90 e0       	ldi	r25, 0x00	; 0
    78a6:	97 ff       	sbrs	r25, 7
    78a8:	02 c0       	rjmp	.+4      	; 0x78ae <ProcessMusic+0x62>
    78aa:	80 e0       	ldi	r24, 0x00	; 0
    78ac:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    78ae:	f6 01       	movw	r30, r12
    78b0:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    78b2:	f9 01       	movw	r30, r18
    78b4:	10 81       	ld	r17, Z
    78b6:	13 ff       	sbrs	r17, 3
    78b8:	29 c0       	rjmp	.+82     	; 0x790c <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    78ba:	62 81       	ldd	r22, Z+2	; 0x02
    78bc:	73 81       	ldd	r23, Z+3	; 0x03
    78be:	11 96       	adiw	r26, 0x01	; 1
    78c0:	8d 91       	ld	r24, X+
    78c2:	9c 91       	ld	r25, X
    78c4:	12 97       	sbiw	r26, 0x02	; 2
    78c6:	86 0f       	add	r24, r22
    78c8:	97 1f       	adc	r25, r23
    78ca:	12 96       	adiw	r26, 0x02	; 2
    78cc:	9c 93       	st	X, r25
    78ce:	8e 93       	st	-X, r24
    78d0:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    78d2:	f6 01       	movw	r30, r12
    78d4:	04 81       	ldd	r16, Z+4	; 0x04
    78d6:	e0 2f       	mov	r30, r16
    78d8:	f0 e0       	ldi	r31, 0x00	; 0
    78da:	ee 0f       	add	r30, r30
    78dc:	ff 1f       	adc	r31, r31
    78de:	e8 5f       	subi	r30, 0xF8	; 248
    78e0:	f1 48       	sbci	r31, 0x81	; 129
    78e2:	c5 90       	lpm	r12, Z+
    78e4:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    78e6:	16 16       	cp	r1, r22
    78e8:	17 06       	cpc	r1, r23
    78ea:	24 f4       	brge	.+8      	; 0x78f4 <ProcessMusic+0xa8>
    78ec:	8c 15       	cp	r24, r12
    78ee:	9d 05       	cpc	r25, r13
    78f0:	30 f4       	brcc	.+12     	; 0x78fe <ProcessMusic+0xb2>
    78f2:	0c c0       	rjmp	.+24     	; 0x790c <ProcessMusic+0xc0>
    78f4:	67 2b       	or	r22, r23
    78f6:	51 f0       	breq	.+20     	; 0x790c <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    78f8:	c8 16       	cp	r12, r24
    78fa:	d9 06       	cpc	r13, r25
    78fc:	38 f0       	brcs	.+14     	; 0x790c <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    78fe:	12 96       	adiw	r26, 0x02	; 2
    7900:	dc 92       	st	X, r13
    7902:	ce 92       	st	-X, r12
    7904:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7906:	17 7f       	andi	r17, 0xF7	; 247
    7908:	f9 01       	movw	r30, r18
    790a:	10 83       	st	Z, r17
    790c:	4a 5e       	subi	r20, 0xEA	; 234
    790e:	5f 4f       	sbci	r21, 0xFF	; 255
    7910:	2a 5e       	subi	r18, 0xEA	; 234
    7912:	3f 4f       	sbci	r19, 0xFF	; 255
    7914:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7916:	4e 36       	cpi	r20, 0x6E	; 110
    7918:	51 05       	cpc	r21, r1
    791a:	09 f0       	breq	.+2      	; 0x791e <ProcessMusic+0xd2>
    791c:	b0 cf       	rjmp	.-160    	; 0x787e <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    791e:	80 91 00 0b 	lds	r24, 0x0B00
    7922:	88 23       	and	r24, r24
    7924:	09 f4       	brne	.+2      	; 0x7928 <ProcessMusic+0xdc>
    7926:	cb c0       	rjmp	.+406    	; 0x7abe <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7928:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    792a:	80 91 ad 0b 	lds	r24, 0x0BAD
    792e:	90 91 ae 0b 	lds	r25, 0x0BAE
    7932:	20 91 b3 0b 	lds	r18, 0x0BB3
    7936:	30 91 b4 0b 	lds	r19, 0x0BB4
    793a:	82 17       	cp	r24, r18
    793c:	93 07       	cpc	r25, r19
    793e:	09 f0       	breq	.+2      	; 0x7942 <ProcessMusic+0xf6>
    7940:	b9 c0       	rjmp	.+370    	; 0x7ab4 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    7942:	20 91 b6 0b 	lds	r18, 0x0BB6
    7946:	30 91 b7 0b 	lds	r19, 0x0BB7
    794a:	b9 01       	movw	r22, r18
    794c:	6f 5f       	subi	r22, 0xFF	; 255
    794e:	7f 4f       	sbci	r23, 0xFF	; 255
    7950:	70 93 b7 0b 	sts	0x0BB7, r23
    7954:	60 93 b6 0b 	sts	0x0BB6, r22
    7958:	f9 01       	movw	r30, r18
    795a:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    795c:	4f 3f       	cpi	r20, 0xFF	; 255
    795e:	79 f5       	brne	.+94     	; 0x79be <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7960:	a9 01       	movw	r20, r18
    7962:	4e 5f       	subi	r20, 0xFE	; 254
    7964:	5f 4f       	sbci	r21, 0xFF	; 255
    7966:	50 93 b7 0b 	sts	0x0BB7, r21
    796a:	40 93 b6 0b 	sts	0x0BB6, r20
    796e:	fb 01       	movw	r30, r22
    7970:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7972:	6f 32       	cpi	r22, 0x2F	; 47
    7974:	19 f4       	brne	.+6      	; 0x797c <ProcessMusic+0x130>
						playSong=false;
    7976:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    797a:	9c c0       	rjmp	.+312    	; 0x7ab4 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    797c:	66 30       	cpi	r22, 0x06	; 6
    797e:	09 f0       	breq	.+2      	; 0x7982 <ProcessMusic+0x136>
    7980:	8c c0       	rjmp	.+280    	; 0x7a9a <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    7982:	fa 01       	movw	r30, r20
    7984:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7986:	c9 01       	movw	r24, r18
    7988:	04 96       	adiw	r24, 0x04	; 4
    798a:	90 93 b7 0b 	sts	0x0BB7, r25
    798e:	80 93 b6 0b 	sts	0x0BB6, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7992:	f9 01       	movw	r30, r18
    7994:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7996:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7998:	e3 35       	cpi	r30, 0x53	; 83
    799a:	29 f4       	brne	.+10     	; 0x79a6 <ProcessMusic+0x15a>
							loopStart=songPos;
    799c:	90 93 b9 0b 	sts	0x0BB9, r25
    79a0:	80 93 b8 0b 	sts	0x0BB8, r24
    79a4:	7a c0       	rjmp	.+244    	; 0x7a9a <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    79a6:	e5 34       	cpi	r30, 0x45	; 69
    79a8:	09 f0       	breq	.+2      	; 0x79ac <ProcessMusic+0x160>
    79aa:	77 c0       	rjmp	.+238    	; 0x7a9a <ProcessMusic+0x24e>
							songPos=loopStart;
    79ac:	80 91 b8 0b 	lds	r24, 0x0BB8
    79b0:	90 91 b9 0b 	lds	r25, 0x0BB9
    79b4:	90 93 b7 0b 	sts	0x0BB7, r25
    79b8:	80 93 b6 0b 	sts	0x0BB6, r24
    79bc:	6e c0       	rjmp	.+220    	; 0x7a9a <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    79be:	47 fd       	sbrc	r20, 7
    79c0:	40 93 b1 0b 	sts	0x0BB1, r20
					channel=lastStatus&0x0f;
    79c4:	90 91 b1 0b 	lds	r25, 0x0BB1
    79c8:	89 2f       	mov	r24, r25
    79ca:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    79cc:	47 ff       	sbrs	r20, 7
    79ce:	08 c0       	rjmp	.+16     	; 0x79e0 <ProcessMusic+0x194>
    79d0:	2e 5f       	subi	r18, 0xFE	; 254
    79d2:	3f 4f       	sbci	r19, 0xFF	; 255
    79d4:	30 93 b7 0b 	sts	0x0BB7, r19
    79d8:	20 93 b6 0b 	sts	0x0BB6, r18
    79dc:	fb 01       	movw	r30, r22
    79de:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    79e0:	90 7f       	andi	r25, 0xF0	; 240
    79e2:	90 3b       	cpi	r25, 0xB0	; 176
    79e4:	e1 f0       	breq	.+56     	; 0x7a1e <ProcessMusic+0x1d2>
    79e6:	90 3c       	cpi	r25, 0xC0	; 192
    79e8:	09 f4       	brne	.+2      	; 0x79ec <ProcessMusic+0x1a0>
    79ea:	51 c0       	rjmp	.+162    	; 0x7a8e <ProcessMusic+0x242>
    79ec:	90 39       	cpi	r25, 0x90	; 144
    79ee:	09 f0       	breq	.+2      	; 0x79f2 <ProcessMusic+0x1a6>
    79f0:	54 c0       	rjmp	.+168    	; 0x7a9a <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    79f2:	e0 91 b6 0b 	lds	r30, 0x0BB6
    79f6:	f0 91 b7 0b 	lds	r31, 0x0BB7
    79fa:	9f 01       	movw	r18, r30
    79fc:	2f 5f       	subi	r18, 0xFF	; 255
    79fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7a00:	30 93 b7 0b 	sts	0x0BB7, r19
    7a04:	20 93 b6 0b 	sts	0x0BB6, r18
    7a08:	24 91       	lpm	r18, Z
    7a0a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7a0c:	18 9f       	mul	r17, r24
    7a0e:	f0 01       	movw	r30, r0
    7a10:	11 24       	eor	r1, r1
    7a12:	e1 5c       	subi	r30, 0xC1	; 193
    7a14:	f4 4f       	sbci	r31, 0xF4	; 244
    7a16:	66 85       	ldd	r22, Z+14	; 0x0e
    7a18:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
    7a1c:	3e c0       	rjmp	.+124    	; 0x7a9a <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7a1e:	e0 91 b6 0b 	lds	r30, 0x0BB6
    7a22:	f0 91 b7 0b 	lds	r31, 0x0BB7
    7a26:	9f 01       	movw	r18, r30
    7a28:	2f 5f       	subi	r18, 0xFF	; 255
    7a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a2c:	30 93 b7 0b 	sts	0x0BB7, r19
    7a30:	20 93 b6 0b 	sts	0x0BB6, r18
    7a34:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7a36:	47 30       	cpi	r20, 0x07	; 7
    7a38:	49 f4       	brne	.+18     	; 0x7a4c <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    7a3a:	18 9f       	mul	r17, r24
    7a3c:	d0 01       	movw	r26, r0
    7a3e:	11 24       	eor	r1, r1
    7a40:	a1 5c       	subi	r26, 0xC1	; 193
    7a42:	b4 4f       	sbci	r27, 0xF4	; 244
    7a44:	ee 0f       	add	r30, r30
    7a46:	1a 96       	adiw	r26, 0x0a	; 10
    7a48:	ec 93       	st	X, r30
    7a4a:	27 c0       	rjmp	.+78     	; 0x7a9a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    7a4c:	4b 30       	cpi	r20, 0x0B	; 11
    7a4e:	49 f4       	brne	.+18     	; 0x7a62 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    7a50:	18 9f       	mul	r17, r24
    7a52:	d0 01       	movw	r26, r0
    7a54:	11 24       	eor	r1, r1
    7a56:	a1 5c       	subi	r26, 0xC1	; 193
    7a58:	b4 4f       	sbci	r27, 0xF4	; 244
    7a5a:	ee 0f       	add	r30, r30
    7a5c:	19 96       	adiw	r26, 0x09	; 9
    7a5e:	ec 93       	st	X, r30
    7a60:	1c c0       	rjmp	.+56     	; 0x7a9a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    7a62:	4c 35       	cpi	r20, 0x5C	; 92
    7a64:	49 f4       	brne	.+18     	; 0x7a78 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    7a66:	18 9f       	mul	r17, r24
    7a68:	d0 01       	movw	r26, r0
    7a6a:	11 24       	eor	r1, r1
    7a6c:	a1 5c       	subi	r26, 0xC1	; 193
    7a6e:	b4 4f       	sbci	r27, 0xF4	; 244
    7a70:	ee 0f       	add	r30, r30
    7a72:	17 96       	adiw	r26, 0x07	; 7
    7a74:	ec 93       	st	X, r30
    7a76:	11 c0       	rjmp	.+34     	; 0x7a9a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7a78:	44 36       	cpi	r20, 0x64	; 100
    7a7a:	79 f4       	brne	.+30     	; 0x7a9a <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    7a7c:	18 9f       	mul	r17, r24
    7a7e:	d0 01       	movw	r26, r0
    7a80:	11 24       	eor	r1, r1
    7a82:	a1 5c       	subi	r26, 0xC1	; 193
    7a84:	b4 4f       	sbci	r27, 0xF4	; 244
    7a86:	ee 0f       	add	r30, r30
    7a88:	18 96       	adiw	r26, 0x08	; 8
    7a8a:	ec 93       	st	X, r30
    7a8c:	06 c0       	rjmp	.+12     	; 0x7a9a <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7a8e:	18 9f       	mul	r17, r24
    7a90:	f0 01       	movw	r30, r0
    7a92:	11 24       	eor	r1, r1
    7a94:	e1 5c       	subi	r30, 0xC1	; 193
    7a96:	f4 4f       	sbci	r31, 0xF4	; 244
    7a98:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7a9a:	86 eb       	ldi	r24, 0xB6	; 182
    7a9c:	9b e0       	ldi	r25, 0x0B	; 11
    7a9e:	0e 94 1c 3b 	call	0x7638	; 0x7638 <ReadVarLen>
    7aa2:	90 93 b4 0b 	sts	0x0BB4, r25
    7aa6:	80 93 b3 0b 	sts	0x0BB3, r24
				currDeltaTime=0;
    7aaa:	10 92 ae 0b 	sts	0x0BAE, r1
    7aae:	10 92 ad 0b 	sts	0x0BAD, r1
    7ab2:	3b cf       	rjmp	.-394    	; 0x792a <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7ab4:	01 96       	adiw	r24, 0x01	; 1
    7ab6:	90 93 ae 0b 	sts	0x0BAE, r25
    7aba:	80 93 ad 0b 	sts	0x0BAD, r24
    7abe:	95 e4       	ldi	r25, 0x45	; 69
    7ac0:	a9 2e       	mov	r10, r25
    7ac2:	9b e0       	ldi	r25, 0x0B	; 11
    7ac4:	b9 2e       	mov	r11, r25
    7ac6:	01 e5       	ldi	r16, 0x51	; 81
    7ac8:	1b e0       	ldi	r17, 0x0B	; 11
    7aca:	20 e5       	ldi	r18, 0x50	; 80
    7acc:	c2 2e       	mov	r12, r18
    7ace:	2b e0       	ldi	r18, 0x0B	; 11
    7ad0:	d2 2e       	mov	r13, r18
    7ad2:	32 e5       	ldi	r19, 0x52	; 82
    7ad4:	83 2e       	mov	r8, r19
    7ad6:	3b e0       	ldi	r19, 0x0B	; 11
    7ad8:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    7ada:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7adc:	66 24       	eor	r6, r6
    7ade:	6a 94       	dec	r6
    7ae0:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    7ae2:	88 81       	ld	r24, Y
    7ae4:	86 fd       	sbrc	r24, 6
    7ae6:	43 c0       	rjmp	.+134    	; 0x7b6e <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    7ae8:	8c 89       	ldd	r24, Y+20	; 0x14
    7aea:	9d 89       	ldd	r25, Y+21	; 0x15
    7aec:	89 2b       	or	r24, r25
    7aee:	09 f4       	brne	.+2      	; 0x7af2 <ProcessMusic+0x2a6>
    7af0:	3a c0       	rjmp	.+116    	; 0x7b66 <ProcessMusic+0x31a>
    7af2:	d8 01       	movw	r26, r16
    7af4:	9c 91       	ld	r25, X
    7af6:	f6 01       	movw	r30, r12
    7af8:	80 81       	ld	r24, Z
    7afa:	98 17       	cp	r25, r24
    7afc:	08 f4       	brcc	.+2      	; 0x7b00 <ProcessMusic+0x2b4>
    7afe:	33 c0       	rjmp	.+102    	; 0x7b66 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    7b00:	d8 01       	movw	r26, r16
    7b02:	9c 91       	ld	r25, X
    7b04:	f6 01       	movw	r30, r12
    7b06:	80 81       	ld	r24, Z
    7b08:	98 13       	cpse	r25, r24
    7b0a:	2d c0       	rjmp	.+90     	; 0x7b66 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    7b0c:	ec 89       	ldd	r30, Y+20	; 0x14
    7b0e:	fd 89       	ldd	r31, Y+21	; 0x15
    7b10:	af 01       	movw	r20, r30
    7b12:	4f 5f       	subi	r20, 0xFF	; 255
    7b14:	5f 4f       	sbci	r21, 0xFF	; 255
    7b16:	5d 8b       	std	Y+21, r21	; 0x15
    7b18:	4c 8b       	std	Y+20, r20	; 0x14
    7b1a:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    7b1c:	8f 3f       	cpi	r24, 0xFF	; 255
    7b1e:	31 f4       	brne	.+12     	; 0x7b2c <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7b20:	88 81       	ld	r24, Y
    7b22:	8f 77       	andi	r24, 0x7F	; 127
    7b24:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    7b26:	1d 8a       	std	Y+21, r1	; 0x15
    7b28:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    7b2a:	1d c0       	rjmp	.+58     	; 0x7b66 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    7b2c:	32 96       	adiw	r30, 0x02	; 2
    7b2e:	fd 8b       	std	Y+21, r31	; 0x15
    7b30:	ec 8b       	std	Y+20, r30	; 0x14
    7b32:	fa 01       	movw	r30, r20
    7b34:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    7b36:	e8 2f       	mov	r30, r24
    7b38:	f0 e0       	ldi	r31, 0x00	; 0
    7b3a:	ee 0f       	add	r30, r30
    7b3c:	ff 1f       	adc	r31, r31
    7b3e:	e2 54       	subi	r30, 0x42	; 66
    7b40:	ff 4f       	sbci	r31, 0xFF	; 255
    7b42:	25 91       	lpm	r18, Z+
    7b44:	34 91       	lpm	r19, Z
    7b46:	65 2d       	mov	r22, r5
    7b48:	ce 01       	movw	r24, r28
    7b4a:	f9 01       	movw	r30, r18
    7b4c:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    7b4e:	ec 89       	ldd	r30, Y+20	; 0x14
    7b50:	fd 89       	ldd	r31, Y+21	; 0x15
    7b52:	cf 01       	movw	r24, r30
    7b54:	01 96       	adiw	r24, 0x01	; 1
    7b56:	9d 8b       	std	Y+21, r25	; 0x15
    7b58:	8c 8b       	std	Y+20, r24	; 0x14
    7b5a:	e4 91       	lpm	r30, Z
    7b5c:	d6 01       	movw	r26, r12
    7b5e:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    7b60:	f8 01       	movw	r30, r16
    7b62:	10 82       	st	Z, r1
    7b64:	cd cf       	rjmp	.-102    	; 0x7b00 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    7b66:	d8 01       	movw	r26, r16
    7b68:	8c 91       	ld	r24, X
    7b6a:	8f 5f       	subi	r24, 0xFF	; 255
    7b6c:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    7b6e:	98 81       	ld	r25, Y
    7b70:	95 ff       	sbrs	r25, 5
    7b72:	6c c0       	rjmp	.+216    	; 0x7c4c <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    7b74:	f4 01       	movw	r30, r8
    7b76:	80 81       	ld	r24, Z
    7b78:	8f 3f       	cpi	r24, 0xFF	; 255
    7b7a:	11 f0       	breq	.+4      	; 0x7b80 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    7b7c:	8f 5f       	subi	r24, 0xFF	; 255
    7b7e:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7b80:	97 fd       	sbrc	r25, 7
    7b82:	04 c0       	rjmp	.+8      	; 0x7b8c <ProcessMusic+0x340>
    7b84:	f8 01       	movw	r30, r16
    7b86:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7b88:	90 81       	ld	r25, Z
    7b8a:	01 c0       	rjmp	.+2      	; 0x7b8e <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7b8c:	9f ef       	ldi	r25, 0xFF	; 255
    7b8e:	f8 01       	movw	r30, r16
    7b90:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7b92:	80 81       	ld	r24, Z
    7b94:	88 23       	and	r24, r24
    7b96:	09 f4       	brne	.+2      	; 0x7b9a <ProcessMusic+0x34e>
    7b98:	4e c0       	rjmp	.+156    	; 0x7c36 <ProcessMusic+0x3ea>
    7b9a:	31 96       	adiw	r30, 0x01	; 1
    7b9c:	50 81       	ld	r21, Z
    7b9e:	55 23       	and	r21, r21
    7ba0:	09 f4       	brne	.+2      	; 0x7ba4 <ProcessMusic+0x358>
    7ba2:	49 c0       	rjmp	.+146    	; 0x7c36 <ProcessMusic+0x3ea>
    7ba4:	99 23       	and	r25, r25
    7ba6:	09 f4       	brne	.+2      	; 0x7baa <ProcessMusic+0x35e>
    7ba8:	46 c0       	rjmp	.+140    	; 0x7c36 <ProcessMusic+0x3ea>
    7baa:	40 91 b2 0b 	lds	r20, 0x0BB2
    7bae:	44 23       	and	r20, r20
    7bb0:	09 f4       	brne	.+2      	; 0x7bb4 <ProcessMusic+0x368>
    7bb2:	41 c0       	rjmp	.+130    	; 0x7c36 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    7bb4:	89 9f       	mul	r24, r25
    7bb6:	c0 01       	movw	r24, r0
    7bb8:	11 24       	eor	r1, r1
    7bba:	93 95       	inc	r25
				uVol>>=8;
    7bbc:	89 2f       	mov	r24, r25
    7bbe:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    7bc0:	58 9f       	mul	r21, r24
    7bc2:	90 01       	movw	r18, r0
    7bc4:	59 9f       	mul	r21, r25
    7bc6:	30 0d       	add	r19, r0
    7bc8:	11 24       	eor	r1, r1
    7bca:	c9 01       	movw	r24, r18
    7bcc:	93 95       	inc	r25
				uVol>>=8;
    7bce:	89 2f       	mov	r24, r25
    7bd0:	99 27       	eor	r25, r25
    7bd2:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    7bd4:	50 81       	ld	r21, Z
    7bd6:	58 9f       	mul	r21, r24
    7bd8:	90 01       	movw	r18, r0
    7bda:	59 9f       	mul	r21, r25
    7bdc:	30 0d       	add	r19, r0
    7bde:	11 24       	eor	r1, r1
    7be0:	33 95       	inc	r19
				uVol>>=8;
    7be2:	23 2f       	mov	r18, r19
    7be4:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    7be6:	42 9f       	mul	r20, r18
    7be8:	c0 01       	movw	r24, r0
    7bea:	43 9f       	mul	r20, r19
    7bec:	90 0d       	add	r25, r0
    7bee:	11 24       	eor	r1, r1
    7bf0:	93 95       	inc	r25
				uVol>>=8;
    7bf2:	89 2f       	mov	r24, r25
    7bf4:	99 27       	eor	r25, r25
    7bf6:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    7bf8:	20 81       	ld	r18, Z
    7bfa:	22 23       	and	r18, r18
    7bfc:	f1 f0       	breq	.+60     	; 0x7c3a <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7bfe:	d5 01       	movw	r26, r10
    7c00:	ec 91       	ld	r30, X
    7c02:	f0 e0       	ldi	r31, 0x00	; 0
    7c04:	e0 50       	subi	r30, 0x00	; 0
    7c06:	f0 48       	sbci	r31, 0x80	; 128
    7c08:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7c0a:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7c0c:	2e 9f       	mul	r18, r30
    7c0e:	f0 01       	movw	r30, r0
    7c10:	11 24       	eor	r1, r1
    7c12:	f3 95       	inc	r31
					tVol>>=8;
    7c14:	ef 2f       	mov	r30, r31
    7c16:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7c18:	a3 01       	movw	r20, r6
    7c1a:	4e 1b       	sub	r20, r30
    7c1c:	5f 0b       	sbc	r21, r31
    7c1e:	48 9f       	mul	r20, r24
    7c20:	90 01       	movw	r18, r0
    7c22:	49 9f       	mul	r20, r25
    7c24:	30 0d       	add	r19, r0
    7c26:	58 9f       	mul	r21, r24
    7c28:	30 0d       	add	r19, r0
    7c2a:	11 24       	eor	r1, r1
    7c2c:	c9 01       	movw	r24, r18
    7c2e:	93 95       	inc	r25
					uVol>>=8;
    7c30:	89 2f       	mov	r24, r25
    7c32:	99 27       	eor	r25, r25
    7c34:	02 c0       	rjmp	.+4      	; 0x7c3a <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    7c36:	80 e0       	ldi	r24, 0x00	; 0
    7c38:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7c3a:	f5 01       	movw	r30, r10
    7c3c:	30 81       	ld	r19, Z
    7c3e:	f8 01       	movw	r30, r16
    7c40:	3a 97       	sbiw	r30, 0x0a	; 10
    7c42:	20 81       	ld	r18, Z
    7c44:	23 0f       	add	r18, r19
    7c46:	d5 01       	movw	r26, r10
    7c48:	2c 93       	st	X, r18
    7c4a:	02 c0       	rjmp	.+4      	; 0x7c50 <ProcessMusic+0x404>

		}else{
			uVol=0;
    7c4c:	80 e0       	ldi	r24, 0x00	; 0
    7c4e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7c50:	f7 01       	movw	r30, r14
    7c52:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7c54:	53 94       	inc	r5
    7c56:	66 96       	adiw	r28, 0x16	; 22
    7c58:	f6 e0       	ldi	r31, 0x06	; 6
    7c5a:	ef 0e       	add	r14, r31
    7c5c:	f1 1c       	adc	r15, r1
    7c5e:	86 e1       	ldi	r24, 0x16	; 22
    7c60:	a8 0e       	add	r10, r24
    7c62:	b1 1c       	adc	r11, r1
    7c64:	0a 5e       	subi	r16, 0xEA	; 234
    7c66:	1f 4f       	sbci	r17, 0xFF	; 255
    7c68:	96 e1       	ldi	r25, 0x16	; 22
    7c6a:	c9 0e       	add	r12, r25
    7c6c:	d1 1c       	adc	r13, r1
    7c6e:	a6 e1       	ldi	r26, 0x16	; 22
    7c70:	8a 0e       	add	r8, r26
    7c72:	91 1c       	adc	r9, r1
    7c74:	b5 e0       	ldi	r27, 0x05	; 5
    7c76:	5b 12       	cpse	r5, r27
    7c78:	34 cf       	rjmp	.-408    	; 0x7ae2 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7c7a:	df 91       	pop	r29
    7c7c:	cf 91       	pop	r28
    7c7e:	1f 91       	pop	r17
    7c80:	0f 91       	pop	r16
    7c82:	ff 90       	pop	r15
    7c84:	ef 90       	pop	r14
    7c86:	df 90       	pop	r13
    7c88:	cf 90       	pop	r12
    7c8a:	bf 90       	pop	r11
    7c8c:	af 90       	pop	r10
    7c8e:	9f 90       	pop	r9
    7c90:	8f 90       	pop	r8
    7c92:	7f 90       	pop	r7
    7c94:	6f 90       	pop	r6
    7c96:	5f 90       	pop	r5
    7c98:	08 95       	ret

00007c9a <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7c9a:	80 93 b2 0b 	sts	0x0BB2, r24
    7c9e:	08 95       	ret

00007ca0 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7ca0:	99 27       	eor	r25, r25
	clr r23
    7ca2:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7ca4:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7ca6:	09 f4       	brne	.+2      	; 0x7caa <set_note_waves>
		ret
    7ca8:	08 95       	ret

00007caa <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7caa:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7cac:	fe e7       	ldi	r31, 0x7E	; 126
	lsl r22
    7cae:	66 0f       	add	r22, r22
	rol r23
    7cb0:	77 1f       	adc	r23, r23
	add ZL,r22
    7cb2:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7cb4:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7cb6:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7cb8:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7cba:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7cbc:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7cbe:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7cc0:	28 9f       	mul	r18, r24
	add ZL,r0
    7cc2:	e0 0d       	add	r30, r0
	adc ZH,r1
    7cc4:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7cc6:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7cc8:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7cca:	11 24       	eor	r1, r1
	

	ret
    7ccc:	08 95       	ret

00007cce <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7cce:	99 27       	eor	r25, r25
	clr r23
    7cd0:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7cd2:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7cd4:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7cd6:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7cd8:	28 9f       	mul	r18, r24
	add ZL,r0
    7cda:	e0 0d       	add	r30, r0
	adc ZH,r1
    7cdc:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7cde:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7ce0:	31 f4       	brne	.+12     	; 0x7cee <smw1>
	lds r22,tr4_params
    7ce2:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    7ce6:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7ce8:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    7cec:	0b c0       	rjmp	.+22     	; 0x7d04 <esmw>

00007cee <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7cee:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7cf0:	31 f4       	brne	.+12     	; 0x7cfe <smw2>
	lds r22,tr4_params
    7cf2:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    7cf6:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7cf8:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    7cfc:	03 c0       	rjmp	.+6      	; 0x7d04 <esmw>

00007cfe <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7cfe:	70 e8       	ldi	r23, 0x80	; 128
	add r23,r22
    7d00:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7d02:	75 83       	std	Z+5, r23	; 0x05

00007d04 <esmw>:

esmw:
	clr r1	
    7d04:	11 24       	eor	r1, r1
	ret
    7d06:	08 95       	ret
	...

00007e00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7e00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7e02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    7e06:	08 95       	ret

00007e08 <steptable>:
    7e08:	22 00       	.word	0x0022	; ????
    7e0a:	24 00       	.word	0x0024	; ????
    7e0c:	26 00       	.word	0x0026	; ????
    7e0e:	28 00       	.word	0x0028	; ????
    7e10:	2b 00       	.word	0x002b	; ????
    7e12:	2d 00       	.word	0x002d	; ????
    7e14:	30 00       	.word	0x0030	; ????
    7e16:	33 00       	.word	0x0033	; ????
    7e18:	36 00       	.word	0x0036	; ????
    7e1a:	39 00       	.word	0x0039	; ????
    7e1c:	3d 00       	.word	0x003d	; ????
    7e1e:	40 00       	.word	0x0040	; ????
    7e20:	44 00       	.word	0x0044	; ????
    7e22:	48 00       	.word	0x0048	; ????
    7e24:	4c 00       	.word	0x004c	; ????
    7e26:	51 00       	.word	0x0051	; ????
    7e28:	56 00       	.word	0x0056	; ????
    7e2a:	5b 00       	.word	0x005b	; ????
    7e2c:	60 00       	.word	0x0060	; ????
    7e2e:	66 00       	.word	0x0066	; ????
    7e30:	6c 00       	.word	0x006c	; ????
    7e32:	73 00       	.word	0x0073	; ????
    7e34:	79 00       	.word	0x0079	; ????
    7e36:	81 00       	.word	0x0081	; ????
    7e38:	88 00       	.word	0x0088	; ????
    7e3a:	90 00       	.word	0x0090	; ????
    7e3c:	99 00       	.word	0x0099	; ????
    7e3e:	a2 00       	.word	0x00a2	; ????
    7e40:	ac 00       	.word	0x00ac	; ????
    7e42:	b6 00       	.word	0x00b6	; ????
    7e44:	c1 00       	.word	0x00c1	; ????
    7e46:	cc 00       	.word	0x00cc	; ????
    7e48:	d8 00       	.word	0x00d8	; ????
    7e4a:	e5 00       	.word	0x00e5	; ????
    7e4c:	f3 00       	.word	0x00f3	; ????
    7e4e:	01 01       	movw	r0, r2
    7e50:	10 01       	movw	r2, r0
    7e52:	21 01       	movw	r4, r2
    7e54:	32 01       	movw	r6, r4
    7e56:	44 01       	movw	r8, r8
    7e58:	57 01       	movw	r10, r14
    7e5a:	6c 01       	movw	r12, r24
    7e5c:	81 01       	movw	r16, r2
    7e5e:	98 01       	movw	r18, r16
    7e60:	b0 01       	movw	r22, r0
    7e62:	ca 01       	movw	r24, r20
    7e64:	e5 01       	movw	r28, r10
    7e66:	02 02       	muls	r16, r18
    7e68:	21 02       	muls	r18, r17
    7e6a:	41 02       	muls	r20, r17
    7e6c:	64 02       	muls	r22, r20
    7e6e:	88 02       	muls	r24, r24
    7e70:	ae 02       	muls	r26, r30
    7e72:	d7 02       	muls	r29, r23
    7e74:	03 03       	mulsu	r16, r19
    7e76:	30 03       	mulsu	r19, r16
    7e78:	61 03       	mulsu	r22, r17
    7e7a:	94 03       	fmuls	r17, r20
    7e7c:	cb 03       	fmulsu	r20, r19
    7e7e:	05 04       	cpc	r0, r5
    7e80:	42 04       	cpc	r4, r2
    7e82:	83 04       	cpc	r8, r3
    7e84:	c7 04       	cpc	r12, r7
    7e86:	10 05       	cpc	r17, r0
    7e88:	5d 05       	cpc	r21, r13
    7e8a:	af 05       	cpc	r26, r15
    7e8c:	05 06       	cpc	r0, r21
    7e8e:	61 06       	cpc	r6, r17
    7e90:	c2 06       	cpc	r12, r18
    7e92:	29 07       	cpc	r18, r25
    7e94:	96 07       	cpc	r25, r22
    7e96:	09 08       	sbc	r0, r9
    7e98:	83 08       	sbc	r8, r3
    7e9a:	05 09       	sbc	r16, r5
    7e9c:	8e 09       	sbc	r24, r14
    7e9e:	20 0a       	sbc	r2, r16
    7ea0:	ba 0a       	sbc	r11, r26
    7ea2:	5d 0b       	sbc	r21, r29
    7ea4:	0a 0c       	add	r0, r10
    7ea6:	c1 0c       	add	r12, r1
    7ea8:	84 0d       	add	r24, r4
    7eaa:	51 0e       	add	r5, r17
    7eac:	2b 0f       	add	r18, r27
    7eae:	12 10       	cpse	r1, r2
    7eb0:	07 11       	cpse	r16, r7
    7eb2:	0a 12       	cpse	r0, r26
    7eb4:	1d 13       	cpse	r17, r29
    7eb6:	40 14       	cp	r4, r0
    7eb8:	74 15       	cp	r23, r4
    7eba:	ba 16       	cp	r11, r26
    7ebc:	14 18       	sub	r1, r4
    7ebe:	83 19       	sub	r24, r3
    7ec0:	07 1b       	sub	r16, r23
    7ec2:	a3 1c       	adc	r10, r3
    7ec4:	57 1e       	adc	r5, r23
    7ec6:	24 20       	and	r2, r4
    7ec8:	0e 22       	and	r0, r30
    7eca:	14 24       	eor	r1, r4
    7ecc:	39 26       	eor	r3, r25
    7ece:	7f 28       	or	r7, r15
    7ed0:	e8 2a       	or	r14, r24
    7ed2:	75 2d       	mov	r23, r5
    7ed4:	29 30       	cpi	r18, 0x09	; 9
    7ed6:	06 33       	cpi	r16, 0x36	; 54
    7ed8:	0f 36       	cpi	r16, 0x6F	; 111
    7eda:	45 39       	cpi	r20, 0x95	; 149
    7edc:	ad 3c       	cpi	r26, 0xCD	; 205
    7ede:	49 40       	sbci	r20, 0x09	; 9
    7ee0:	1b 44       	sbci	r17, 0x4B	; 75
    7ee2:	28 48       	sbci	r18, 0x88	; 136
    7ee4:	73 4c       	sbci	r23, 0xC3	; 195
    7ee6:	fe 50       	subi	r31, 0x0E	; 14
    7ee8:	cf 55       	subi	r28, 0x5F	; 95
    7eea:	ea 5a       	subi	r30, 0xAA	; 170
    7eec:	51 60       	ori	r21, 0x01	; 1
    7eee:	0c 66       	ori	r16, 0x6C	; 108
    7ef0:	1d 6c       	ori	r17, 0xCD	; 205
    7ef2:	8b 72       	andi	r24, 0x2B	; 43
    7ef4:	5a 79       	andi	r21, 0x9A	; 154
    7ef6:	92 80       	ldd	r9, Z+2	; 0x02
    7ef8:	37 88       	ldd	r3, Z+23	; 0x17
    7efa:	50 90 e5 98 	lds	r5, 0x98E5
    7efe:	fd a1       	ldd	r31, Y+37	; 0x25
    7f00:	9f ab       	std	Y+55, r25	; 0x37
    7f02:	d3 b5       	in	r29, 0x23	; 35
    7f04:	a3 c0       	rjmp	.+326    	; 0x804c <waves+0x4c>
	...

00008000 <waves>:
    8000:	00 03       	mulsu	r16, r16
    8002:	06 09       	sbc	r16, r6
    8004:	0c 10       	cpse	r0, r12
    8006:	13 16       	cp	r1, r19
    8008:	19 1c       	adc	r1, r9
    800a:	1f 22       	and	r1, r31
    800c:	25 28       	or	r2, r5
    800e:	2b 2e       	mov	r2, r27
    8010:	31 33       	cpi	r19, 0x31	; 49
    8012:	36 39       	cpi	r19, 0x96	; 150
    8014:	3c 3f       	cpi	r19, 0xFC	; 252
    8016:	41 44       	sbci	r20, 0x41	; 65
    8018:	47 49       	sbci	r20, 0x97	; 151
    801a:	4c 4e       	sbci	r20, 0xEC	; 236
    801c:	51 53       	subi	r21, 0x31	; 49
    801e:	55 58       	subi	r21, 0x85	; 133
    8020:	5a 5c       	subi	r21, 0xCA	; 202
    8022:	5e 60       	ori	r21, 0x0E	; 14
    8024:	62 64       	ori	r22, 0x42	; 66
    8026:	66 68       	ori	r22, 0x86	; 134
    8028:	6a 6b       	ori	r22, 0xBA	; 186
    802a:	6d 6f       	ori	r22, 0xFD	; 253
    802c:	70 71       	andi	r23, 0x10	; 16
    802e:	73 74       	andi	r23, 0x43	; 67
    8030:	75 76       	andi	r23, 0x65	; 101
    8032:	78 79       	andi	r23, 0x98	; 152
    8034:	7a 7a       	andi	r23, 0xAA	; 170
    8036:	7b 7c       	andi	r23, 0xCB	; 203
    8038:	7d 7d       	andi	r23, 0xDD	; 221
    803a:	7e 7e       	andi	r23, 0xEE	; 238
    803c:	7e 7f       	andi	r23, 0xFE	; 254
    803e:	7f 7f       	andi	r23, 0xFF	; 255
    8040:	7f 7f       	andi	r23, 0xFF	; 255
    8042:	7f 7f       	andi	r23, 0xFF	; 255
    8044:	7e 7e       	andi	r23, 0xEE	; 238
    8046:	7e 7d       	andi	r23, 0xDE	; 222
    8048:	7d 7c       	andi	r23, 0xCD	; 205
    804a:	7b 7a       	andi	r23, 0xAB	; 171
    804c:	7a 79       	andi	r23, 0x9A	; 154
    804e:	78 76       	andi	r23, 0x68	; 104
    8050:	75 74       	andi	r23, 0x45	; 69
    8052:	73 71       	andi	r23, 0x13	; 19
    8054:	70 6f       	ori	r23, 0xF0	; 240
    8056:	6d 6b       	ori	r22, 0xBD	; 189
    8058:	6a 68       	ori	r22, 0x8A	; 138
    805a:	66 64       	ori	r22, 0x46	; 70
    805c:	62 60       	ori	r22, 0x02	; 2
    805e:	5e 5c       	subi	r21, 0xCE	; 206
    8060:	5a 58       	subi	r21, 0x8A	; 138
    8062:	55 53       	subi	r21, 0x35	; 53
    8064:	51 4e       	sbci	r21, 0xE1	; 225
    8066:	4c 49       	sbci	r20, 0x9C	; 156
    8068:	47 44       	sbci	r20, 0x47	; 71
    806a:	41 3f       	cpi	r20, 0xF1	; 241
    806c:	3c 39       	cpi	r19, 0x9C	; 156
    806e:	36 33       	cpi	r19, 0x36	; 54
    8070:	31 2e       	mov	r3, r17
    8072:	2b 28       	or	r2, r11
    8074:	25 22       	and	r2, r21
    8076:	1f 1c       	adc	r1, r15
    8078:	19 16       	cp	r1, r25
    807a:	13 10       	cpse	r1, r3
    807c:	0c 09       	sbc	r16, r12
    807e:	06 03       	mulsu	r16, r22
    8080:	00 fd       	sbrc	r16, 0
    8082:	fa f7       	brpl	.-2      	; 0x8082 <waves+0x82>
    8084:	f4 f0       	brlt	.+60     	; 0x80c2 <waves+0xc2>
    8086:	ed ea       	ldi	r30, 0xAD	; 173
    8088:	e7 e4       	ldi	r30, 0x47	; 71
    808a:	e1 de       	rcall	.-574    	; 0x7e4e <steptable+0x46>
    808c:	db d8       	rcall	.-3658   	; 0x7244 <__vector_8+0x2a>
    808e:	d5 d2       	rcall	.+1450   	; 0x863a <waves+0x63a>
    8090:	cf cd       	rjmp	.-1122   	; 0x7c30 <ProcessMusic+0x3e4>
    8092:	ca c7       	rjmp	.+3988   	; 0x9028 <LBPrintStr+0x58>
    8094:	c4 c1       	rjmp	.+904    	; 0x841e <waves+0x41e>
    8096:	bf bc       	out	0x2f, r11	; 47
    8098:	b9 b7       	in	r27, 0x39	; 57
    809a:	b4 b2       	in	r11, 0x14	; 20
    809c:	af ad       	ldd	r26, Y+63	; 0x3f
    809e:	ab a8       	ldd	r10, Y+51	; 0x33
    80a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    80a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    80a4:	9e 9c       	mul	r9, r14
    80a6:	9a 98       	cbi	0x13, 2	; 19
    80a8:	96 95       	lsr	r25
    80aa:	93 91       	.word	0x9193	; ????
    80ac:	90 8f       	std	Z+24, r25	; 0x18
    80ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    80b0:	8b 8a       	std	Y+19, r8	; 0x13
    80b2:	88 87       	std	Y+8, r24	; 0x08
    80b4:	86 86       	std	Z+14, r8	; 0x0e
    80b6:	85 84       	ldd	r8, Z+13	; 0x0d
    80b8:	83 83       	std	Z+3, r24	; 0x03
    80ba:	82 82       	std	Z+2, r8	; 0x02
    80bc:	82 81       	ldd	r24, Z+2	; 0x02
    80be:	81 81       	ldd	r24, Z+1	; 0x01
    80c0:	81 81       	ldd	r24, Z+1	; 0x01
    80c2:	81 81       	ldd	r24, Z+1	; 0x01
    80c4:	82 82       	std	Z+2, r8	; 0x02
    80c6:	82 83       	std	Z+2, r24	; 0x02
    80c8:	83 84       	ldd	r8, Z+11	; 0x0b
    80ca:	85 86       	std	Z+13, r8	; 0x0d
    80cc:	86 87       	std	Z+14, r24	; 0x0e
    80ce:	88 8a       	std	Y+16, r8	; 0x10
    80d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    80d2:	8d 8f       	std	Y+29, r24	; 0x1d
    80d4:	90 91 93 95 	lds	r25, 0x9593
    80d8:	96 98       	cbi	0x12, 6	; 18
    80da:	9a 9c       	mul	r9, r10
    80dc:	9e a0       	ldd	r9, Y+38	; 0x26
    80de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    80e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    80e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    80e4:	af b2       	in	r10, 0x1f	; 31
    80e6:	b4 b7       	in	r27, 0x34	; 52
    80e8:	b9 bc       	out	0x29, r11	; 41
    80ea:	bf c1       	rjmp	.+894    	; 0x846a <waves+0x46a>
    80ec:	c4 c7       	rjmp	.+3976   	; 0x9076 <LBCollides+0x44>
    80ee:	ca cd       	rjmp	.-1132   	; 0x7c84 <ProcessMusic+0x438>
    80f0:	cf d2       	rcall	.+1438   	; 0x8690 <waves+0x690>
    80f2:	d5 d8       	rcall	.-3670   	; 0x729e <ReadButtons+0x2a>
    80f4:	db de       	rcall	.-586    	; 0x7eac <steptable+0xa4>
    80f6:	e1 e4       	ldi	r30, 0x41	; 65
    80f8:	e7 ea       	ldi	r30, 0xA7	; 167
    80fa:	ed f0       	brhs	.+58     	; 0x8136 <waves+0x136>
    80fc:	f4 f7       	brge	.-4      	; 0x80fa <waves+0xfa>
    80fe:	fa fd       	.word	0xfdfa	; ????
    8100:	80 81       	ld	r24, Z
    8102:	82 83       	std	Z+2, r24	; 0x02
    8104:	84 85       	ldd	r24, Z+12	; 0x0c
    8106:	86 87       	std	Z+14, r24	; 0x0e
    8108:	88 89       	ldd	r24, Y+16	; 0x10
    810a:	8a 8b       	std	Y+18, r24	; 0x12
    810c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    810e:	8e 8f       	std	Y+30, r24	; 0x1e
    8110:	90 91 92 93 	lds	r25, 0x9392
    8114:	94 95       	.word	0x9594	; ????
    8116:	96 97       	sbiw	r26, 0x26	; 38
    8118:	98 99       	sbic	0x13, 0	; 19
    811a:	9a 9b       	sbis	0x13, 2	; 19
    811c:	9c 9d       	mul	r25, r12
    811e:	9e 9f       	mul	r25, r30
    8120:	a0 a1       	ldd	r26, Z+32	; 0x20
    8122:	a2 a3       	std	Z+34, r26	; 0x22
    8124:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8126:	a6 a7       	std	Z+46, r26	; 0x2e
    8128:	a8 a9       	ldd	r26, Y+48	; 0x30
    812a:	aa ab       	std	Y+50, r26	; 0x32
    812c:	ac ad       	ldd	r26, Y+60	; 0x3c
    812e:	ae af       	std	Y+62, r26	; 0x3e
    8130:	b0 b1       	in	r27, 0x00	; 0
    8132:	b2 b3       	in	r27, 0x12	; 18
    8134:	b4 b5       	in	r27, 0x24	; 36
    8136:	b6 b7       	in	r27, 0x36	; 54
    8138:	b8 b9       	out	0x08, r27	; 8
    813a:	ba bb       	out	0x1a, r27	; 26
    813c:	bc bd       	out	0x2c, r27	; 44
    813e:	be bf       	out	0x3e, r27	; 62
    8140:	c0 c1       	rjmp	.+896    	; 0x84c2 <waves+0x4c2>
    8142:	c2 c3       	rjmp	.+1924   	; 0x88c8 <waves+0x8c8>
    8144:	c4 c5       	rjmp	.+2952   	; 0x8cce <InitializeVideoMode+0xe>
    8146:	c6 c7       	rjmp	.+3980   	; 0x90d4 <LBLineIntersect+0x4e>
    8148:	c8 c9       	rjmp	.-3184   	; 0x74da <EepromReadBlock+0x8e>
    814a:	ca cb       	rjmp	.-2156   	; 0x78e0 <ProcessMusic+0x94>
    814c:	cc cd       	rjmp	.-1128   	; 0x7ce6 <SetMixerWave+0x18>
    814e:	ce cf       	rjmp	.-100    	; 0x80ec <waves+0xec>
    8150:	d0 d1       	rcall	.+928    	; 0x84f2 <waves+0x4f2>
    8152:	d2 d3       	rcall	.+1956   	; 0x88f8 <waves+0x8f8>
    8154:	d4 d5       	rcall	.+2984   	; 0x8cfe <DrawMap2+0x2a>
    8156:	d6 d7       	rcall	.+4012   	; 0x9104 <LBLineIntersect+0x7e>
    8158:	d8 d9       	rcall	.-3152   	; 0x750a <PatchCommand07+0x2>
    815a:	da db       	rcall	.-2124   	; 0x7910 <ProcessMusic+0xc4>
    815c:	dc dd       	rcall	.-1096   	; 0x7d16 <esmw+0x12>
    815e:	de df       	rcall	.-68     	; 0x811c <waves+0x11c>
    8160:	e0 e1       	ldi	r30, 0x10	; 16
    8162:	e2 e3       	ldi	r30, 0x32	; 50
    8164:	e4 e5       	ldi	r30, 0x54	; 84
    8166:	e6 e7       	ldi	r30, 0x76	; 118
    8168:	e8 e9       	ldi	r30, 0x98	; 152
    816a:	ea eb       	ldi	r30, 0xBA	; 186
    816c:	ec ed       	ldi	r30, 0xDC	; 220
    816e:	ee ef       	ldi	r30, 0xFE	; 254
    8170:	f0 f1       	brcs	.+124    	; 0x81ee <waves+0x1ee>
    8172:	f2 f3       	brmi	.-4      	; 0x8170 <waves+0x170>
    8174:	f4 f5       	brge	.+124    	; 0x81f2 <waves+0x1f2>
    8176:	f6 f7       	brtc	.-4      	; 0x8174 <waves+0x174>
    8178:	f8 f9       	.word	0xf9f8	; ????
    817a:	fa fb       	.word	0xfbfa	; ????
    817c:	fc fd       	.word	0xfdfc	; ????
    817e:	fe ff       	.word	0xfffe	; ????
    8180:	00 01       	movw	r0, r0
    8182:	02 03       	mulsu	r16, r18
    8184:	04 05       	cpc	r16, r4
    8186:	06 07       	cpc	r16, r22
    8188:	08 09       	sbc	r16, r8
    818a:	0a 0b       	sbc	r16, r26
    818c:	0c 0d       	add	r16, r12
    818e:	0e 0f       	add	r16, r30
    8190:	10 11       	cpse	r17, r0
    8192:	12 13       	cpse	r17, r18
    8194:	14 15       	cp	r17, r4
    8196:	16 17       	cp	r17, r22
    8198:	18 19       	sub	r17, r8
    819a:	1a 1b       	sub	r17, r26
    819c:	1c 1d       	adc	r17, r12
    819e:	1e 1f       	adc	r17, r30
    81a0:	20 21       	and	r18, r0
    81a2:	22 23       	and	r18, r18
    81a4:	24 25       	eor	r18, r4
    81a6:	26 27       	eor	r18, r22
    81a8:	28 29       	or	r18, r8
    81aa:	2a 2b       	or	r18, r26
    81ac:	2c 2d       	mov	r18, r12
    81ae:	2e 2f       	mov	r18, r30
    81b0:	30 31       	cpi	r19, 0x10	; 16
    81b2:	32 33       	cpi	r19, 0x32	; 50
    81b4:	34 35       	cpi	r19, 0x54	; 84
    81b6:	36 37       	cpi	r19, 0x76	; 118
    81b8:	38 39       	cpi	r19, 0x98	; 152
    81ba:	3a 3b       	cpi	r19, 0xBA	; 186
    81bc:	3c 3d       	cpi	r19, 0xDC	; 220
    81be:	3e 3f       	cpi	r19, 0xFE	; 254
    81c0:	40 41       	sbci	r20, 0x10	; 16
    81c2:	42 43       	sbci	r20, 0x32	; 50
    81c4:	44 45       	sbci	r20, 0x54	; 84
    81c6:	46 47       	sbci	r20, 0x76	; 118
    81c8:	48 49       	sbci	r20, 0x98	; 152
    81ca:	4a 4b       	sbci	r20, 0xBA	; 186
    81cc:	4c 4d       	sbci	r20, 0xDC	; 220
    81ce:	4e 4f       	sbci	r20, 0xFE	; 254
    81d0:	50 51       	subi	r21, 0x10	; 16
    81d2:	52 53       	subi	r21, 0x32	; 50
    81d4:	54 55       	subi	r21, 0x54	; 84
    81d6:	56 57       	subi	r21, 0x76	; 118
    81d8:	58 59       	subi	r21, 0x98	; 152
    81da:	5a 5b       	subi	r21, 0xBA	; 186
    81dc:	5c 5d       	subi	r21, 0xDC	; 220
    81de:	5e 5f       	subi	r21, 0xFE	; 254
    81e0:	60 61       	ori	r22, 0x10	; 16
    81e2:	62 63       	ori	r22, 0x32	; 50
    81e4:	64 65       	ori	r22, 0x54	; 84
    81e6:	66 67       	ori	r22, 0x76	; 118
    81e8:	68 69       	ori	r22, 0x98	; 152
    81ea:	6a 6b       	ori	r22, 0xBA	; 186
    81ec:	6c 6d       	ori	r22, 0xDC	; 220
    81ee:	6e 6f       	ori	r22, 0xFE	; 254
    81f0:	70 71       	andi	r23, 0x10	; 16
    81f2:	72 73       	andi	r23, 0x32	; 50
    81f4:	74 75       	andi	r23, 0x54	; 84
    81f6:	76 77       	andi	r23, 0x76	; 118
    81f8:	78 79       	andi	r23, 0x98	; 152
    81fa:	7a 7b       	andi	r23, 0xBA	; 186
    81fc:	7c 7d       	andi	r23, 0xDC	; 220
    81fe:	7e 7f       	andi	r23, 0xFE	; 254
    8200:	00 02       	muls	r16, r16
    8202:	04 06       	cpc	r0, r20
    8204:	08 0a       	sbc	r0, r24
    8206:	0c 0e       	add	r0, r28
    8208:	10 12       	cpse	r1, r16
    820a:	14 16       	cp	r1, r20
    820c:	18 1a       	sub	r1, r24
    820e:	1c 1e       	adc	r1, r28
    8210:	20 22       	and	r2, r16
    8212:	24 26       	eor	r2, r20
    8214:	28 2a       	or	r2, r24
    8216:	2c 2e       	mov	r2, r28
    8218:	30 32       	cpi	r19, 0x20	; 32
    821a:	34 36       	cpi	r19, 0x64	; 100
    821c:	38 3a       	cpi	r19, 0xA8	; 168
    821e:	3c 3e       	cpi	r19, 0xEC	; 236
    8220:	40 42       	sbci	r20, 0x20	; 32
    8222:	44 46       	sbci	r20, 0x64	; 100
    8224:	48 4a       	sbci	r20, 0xA8	; 168
    8226:	4c 4e       	sbci	r20, 0xEC	; 236
    8228:	50 52       	subi	r21, 0x20	; 32
    822a:	54 56       	subi	r21, 0x64	; 100
    822c:	58 5a       	subi	r21, 0xA8	; 168
    822e:	5c 5e       	subi	r21, 0xEC	; 236
    8230:	60 62       	ori	r22, 0x20	; 32
    8232:	64 66       	ori	r22, 0x64	; 100
    8234:	68 6a       	ori	r22, 0xA8	; 168
    8236:	6c 6e       	ori	r22, 0xEC	; 236
    8238:	70 72       	andi	r23, 0x20	; 32
    823a:	74 76       	andi	r23, 0x64	; 100
    823c:	78 7a       	andi	r23, 0xA8	; 168
    823e:	7c 7e       	andi	r23, 0xEC	; 236
    8240:	7f 7d       	andi	r23, 0xDF	; 223
    8242:	7b 79       	andi	r23, 0x9B	; 155
    8244:	77 75       	andi	r23, 0x57	; 87
    8246:	73 71       	andi	r23, 0x13	; 19
    8248:	6f 6d       	ori	r22, 0xDF	; 223
    824a:	6b 69       	ori	r22, 0x9B	; 155
    824c:	67 65       	ori	r22, 0x57	; 87
    824e:	63 61       	ori	r22, 0x13	; 19
    8250:	5f 5d       	subi	r21, 0xDF	; 223
    8252:	5b 59       	subi	r21, 0x9B	; 155
    8254:	57 55       	subi	r21, 0x57	; 87
    8256:	53 51       	subi	r21, 0x13	; 19
    8258:	4f 4d       	sbci	r20, 0xDF	; 223
    825a:	4b 49       	sbci	r20, 0x9B	; 155
    825c:	47 45       	sbci	r20, 0x57	; 87
    825e:	43 41       	sbci	r20, 0x13	; 19
    8260:	3f 3d       	cpi	r19, 0xDF	; 223
    8262:	3b 39       	cpi	r19, 0x9B	; 155
    8264:	37 35       	cpi	r19, 0x57	; 87
    8266:	33 31       	cpi	r19, 0x13	; 19
    8268:	2f 2d       	mov	r18, r15
    826a:	2b 29       	or	r18, r11
    826c:	27 25       	eor	r18, r7
    826e:	23 21       	and	r18, r3
    8270:	1f 1d       	adc	r17, r15
    8272:	1b 19       	sub	r17, r11
    8274:	17 15       	cp	r17, r7
    8276:	13 11       	cpse	r17, r3
    8278:	0f 0d       	add	r16, r15
    827a:	0b 09       	sbc	r16, r11
    827c:	07 05       	cpc	r16, r7
    827e:	03 01       	movw	r0, r6
    8280:	ff fd       	.word	0xfdff	; ????
    8282:	fb f9       	.word	0xf9fb	; ????
    8284:	f7 f5       	brid	.+124    	; 0x8302 <waves+0x302>
    8286:	f3 f1       	brvs	.+124    	; 0x8304 <waves+0x304>
    8288:	ef ed       	ldi	r30, 0xDF	; 223
    828a:	eb e9       	ldi	r30, 0x9B	; 155
    828c:	e7 e5       	ldi	r30, 0x57	; 87
    828e:	e3 e1       	ldi	r30, 0x13	; 19
    8290:	df dd       	rcall	.-1090   	; 0x7e50 <steptable+0x48>
    8292:	db d9       	rcall	.-3146   	; 0x764a <ReadVarLen+0x12>
    8294:	d7 d5       	rcall	.+2990   	; 0x8e44 <doFade+0x6>
    8296:	d3 d1       	rcall	.+934    	; 0x863e <waves+0x63e>
    8298:	cf cd       	rjmp	.-1122   	; 0x7e38 <steptable+0x30>
    829a:	cb c9       	rjmp	.-3178   	; 0x7632 <InitMusicPlayer+0x3e>
    829c:	c7 c5       	rjmp	.+2958   	; 0x8e2c <WaitVsync+0x1c>
    829e:	c3 c1       	rjmp	.+902    	; 0x8626 <waves+0x626>
    82a0:	bf bd       	out	0x2f, r27	; 47
    82a2:	bb b9       	out	0x0b, r27	; 11
    82a4:	b7 b5       	in	r27, 0x27	; 39
    82a6:	b3 b1       	in	r27, 0x03	; 3
    82a8:	af ad       	ldd	r26, Y+63	; 0x3f
    82aa:	ab a9       	ldd	r26, Y+51	; 0x33
    82ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    82ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    82b0:	9f 9d       	mul	r25, r15
    82b2:	9b 99       	sbic	0x13, 3	; 19
    82b4:	97 95       	ror	r25
    82b6:	93 91       	.word	0x9193	; ????
    82b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    82ba:	8b 89       	ldd	r24, Y+19	; 0x13
    82bc:	87 85       	ldd	r24, Z+15	; 0x0f
    82be:	83 81       	ldd	r24, Z+3	; 0x03
    82c0:	80 82       	st	Z, r8
    82c2:	84 86       	std	Z+12, r8	; 0x0c
    82c4:	88 8a       	std	Y+16, r8	; 0x10
    82c6:	8c 8e       	std	Y+28, r8	; 0x1c
    82c8:	90 92 94 96 	sts	0x9694, r9
    82cc:	98 9a       	sbi	0x13, 0	; 19
    82ce:	9c 9e       	mul	r9, r28
    82d0:	a0 a2       	std	Z+32, r10	; 0x20
    82d2:	a4 a6       	std	Z+44, r10	; 0x2c
    82d4:	a8 aa       	std	Y+48, r10	; 0x30
    82d6:	ac ae       	std	Y+60, r10	; 0x3c
    82d8:	b0 b2       	in	r11, 0x10	; 16
    82da:	b4 b6       	in	r11, 0x34	; 52
    82dc:	b8 ba       	out	0x18, r11	; 24
    82de:	bc be       	out	0x3c, r11	; 60
    82e0:	c0 c2       	rjmp	.+1408   	; 0x8862 <waves+0x862>
    82e2:	c4 c6       	rjmp	.+3464   	; 0x906c <LBCollides+0x3a>
    82e4:	c8 ca       	rjmp	.-2672   	; 0x7876 <ProcessMusic+0x2a>
    82e6:	cc ce       	rjmp	.-616    	; 0x8080 <waves+0x80>
    82e8:	d0 d2       	rcall	.+1440   	; 0x888a <waves+0x88a>
    82ea:	d4 d6       	rcall	.+3496   	; 0x9094 <LBLineIntersect+0xe>
    82ec:	d8 da       	rcall	.-2640   	; 0x789e <ProcessMusic+0x52>
    82ee:	dc de       	rcall	.-584    	; 0x80a8 <waves+0xa8>
    82f0:	e0 e2       	ldi	r30, 0x20	; 32
    82f2:	e4 e6       	ldi	r30, 0x64	; 100
    82f4:	e8 ea       	ldi	r30, 0xA8	; 168
    82f6:	ec ee       	ldi	r30, 0xEC	; 236
    82f8:	f0 f2       	brcs	.-68     	; 0x82b6 <waves+0x2b6>
    82fa:	f4 f6       	brge	.-68     	; 0x82b8 <waves+0x2b8>
    82fc:	f8 fa       	.word	0xfaf8	; ????
    82fe:	fc fe       	.word	0xfefc	; ????
    8300:	7f 7f       	andi	r23, 0xFF	; 255
    8302:	7f 7f       	andi	r23, 0xFF	; 255
    8304:	7f 7f       	andi	r23, 0xFF	; 255
    8306:	7f 7f       	andi	r23, 0xFF	; 255
    8308:	7f 7f       	andi	r23, 0xFF	; 255
    830a:	7f 7f       	andi	r23, 0xFF	; 255
    830c:	7f 7f       	andi	r23, 0xFF	; 255
    830e:	7f 7f       	andi	r23, 0xFF	; 255
    8310:	7f 7f       	andi	r23, 0xFF	; 255
    8312:	7f 7f       	andi	r23, 0xFF	; 255
    8314:	7f 7f       	andi	r23, 0xFF	; 255
    8316:	7f 7f       	andi	r23, 0xFF	; 255
    8318:	7f 7f       	andi	r23, 0xFF	; 255
    831a:	7f 7f       	andi	r23, 0xFF	; 255
    831c:	7f 7f       	andi	r23, 0xFF	; 255
    831e:	7f 7f       	andi	r23, 0xFF	; 255
    8320:	7f 7f       	andi	r23, 0xFF	; 255
    8322:	7f 7f       	andi	r23, 0xFF	; 255
    8324:	7f 7f       	andi	r23, 0xFF	; 255
    8326:	7f 7f       	andi	r23, 0xFF	; 255
    8328:	7f 7f       	andi	r23, 0xFF	; 255
    832a:	7f 7f       	andi	r23, 0xFF	; 255
    832c:	7f 7f       	andi	r23, 0xFF	; 255
    832e:	7f 7f       	andi	r23, 0xFF	; 255
    8330:	7f 7f       	andi	r23, 0xFF	; 255
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	80 80       	ld	r8, Z
    8342:	80 80       	ld	r8, Z
    8344:	80 80       	ld	r8, Z
    8346:	80 80       	ld	r8, Z
    8348:	80 80       	ld	r8, Z
    834a:	80 80       	ld	r8, Z
    834c:	80 80       	ld	r8, Z
    834e:	80 80       	ld	r8, Z
    8350:	80 80       	ld	r8, Z
    8352:	80 80       	ld	r8, Z
    8354:	80 80       	ld	r8, Z
    8356:	80 80       	ld	r8, Z
    8358:	80 80       	ld	r8, Z
    835a:	80 80       	ld	r8, Z
    835c:	80 80       	ld	r8, Z
    835e:	80 80       	ld	r8, Z
    8360:	80 80       	ld	r8, Z
    8362:	80 80       	ld	r8, Z
    8364:	80 80       	ld	r8, Z
    8366:	80 80       	ld	r8, Z
    8368:	80 80       	ld	r8, Z
    836a:	80 80       	ld	r8, Z
    836c:	80 80       	ld	r8, Z
    836e:	80 80       	ld	r8, Z
    8370:	80 80       	ld	r8, Z
    8372:	80 80       	ld	r8, Z
    8374:	80 80       	ld	r8, Z
    8376:	80 80       	ld	r8, Z
    8378:	80 80       	ld	r8, Z
    837a:	80 80       	ld	r8, Z
    837c:	80 80       	ld	r8, Z
    837e:	80 80       	ld	r8, Z
    8380:	80 80       	ld	r8, Z
    8382:	80 80       	ld	r8, Z
    8384:	80 80       	ld	r8, Z
    8386:	80 80       	ld	r8, Z
    8388:	80 80       	ld	r8, Z
    838a:	80 80       	ld	r8, Z
    838c:	80 80       	ld	r8, Z
    838e:	80 80       	ld	r8, Z
    8390:	80 80       	ld	r8, Z
    8392:	80 80       	ld	r8, Z
    8394:	80 80       	ld	r8, Z
    8396:	80 80       	ld	r8, Z
    8398:	80 80       	ld	r8, Z
    839a:	80 80       	ld	r8, Z
    839c:	80 80       	ld	r8, Z
    839e:	80 80       	ld	r8, Z
    83a0:	80 80       	ld	r8, Z
    83a2:	80 80       	ld	r8, Z
    83a4:	80 80       	ld	r8, Z
    83a6:	80 80       	ld	r8, Z
    83a8:	80 80       	ld	r8, Z
    83aa:	80 80       	ld	r8, Z
    83ac:	80 80       	ld	r8, Z
    83ae:	80 80       	ld	r8, Z
    83b0:	80 80       	ld	r8, Z
    83b2:	80 80       	ld	r8, Z
    83b4:	80 80       	ld	r8, Z
    83b6:	80 80       	ld	r8, Z
    83b8:	80 80       	ld	r8, Z
    83ba:	80 80       	ld	r8, Z
    83bc:	80 80       	ld	r8, Z
    83be:	80 80       	ld	r8, Z
    83c0:	80 80       	ld	r8, Z
    83c2:	80 80       	ld	r8, Z
    83c4:	80 80       	ld	r8, Z
    83c6:	80 80       	ld	r8, Z
    83c8:	80 80       	ld	r8, Z
    83ca:	80 80       	ld	r8, Z
    83cc:	80 80       	ld	r8, Z
    83ce:	80 80       	ld	r8, Z
    83d0:	80 80       	ld	r8, Z
    83d2:	80 80       	ld	r8, Z
    83d4:	80 80       	ld	r8, Z
    83d6:	80 80       	ld	r8, Z
    83d8:	80 80       	ld	r8, Z
    83da:	80 80       	ld	r8, Z
    83dc:	80 80       	ld	r8, Z
    83de:	80 80       	ld	r8, Z
    83e0:	80 80       	ld	r8, Z
    83e2:	80 80       	ld	r8, Z
    83e4:	80 80       	ld	r8, Z
    83e6:	80 80       	ld	r8, Z
    83e8:	80 80       	ld	r8, Z
    83ea:	80 80       	ld	r8, Z
    83ec:	80 80       	ld	r8, Z
    83ee:	80 80       	ld	r8, Z
    83f0:	80 80       	ld	r8, Z
    83f2:	80 80       	ld	r8, Z
    83f4:	80 80       	ld	r8, Z
    83f6:	80 80       	ld	r8, Z
    83f8:	80 80       	ld	r8, Z
    83fa:	80 80       	ld	r8, Z
    83fc:	80 80       	ld	r8, Z
    83fe:	80 80       	ld	r8, Z
    8400:	7f 7f       	andi	r23, 0xFF	; 255
    8402:	7f 7f       	andi	r23, 0xFF	; 255
    8404:	7f 7f       	andi	r23, 0xFF	; 255
    8406:	7f 7f       	andi	r23, 0xFF	; 255
    8408:	7f 7f       	andi	r23, 0xFF	; 255
    840a:	7f 7f       	andi	r23, 0xFF	; 255
    840c:	7f 7f       	andi	r23, 0xFF	; 255
    840e:	7f 7f       	andi	r23, 0xFF	; 255
    8410:	7f 7f       	andi	r23, 0xFF	; 255
    8412:	7f 7f       	andi	r23, 0xFF	; 255
    8414:	7f 7f       	andi	r23, 0xFF	; 255
    8416:	7f 7f       	andi	r23, 0xFF	; 255
    8418:	7f 7f       	andi	r23, 0xFF	; 255
    841a:	7f 7f       	andi	r23, 0xFF	; 255
    841c:	7f 7f       	andi	r23, 0xFF	; 255
    841e:	7f 7f       	andi	r23, 0xFF	; 255
    8420:	7f 7f       	andi	r23, 0xFF	; 255
    8422:	7f 7f       	andi	r23, 0xFF	; 255
    8424:	7f 7f       	andi	r23, 0xFF	; 255
    8426:	7f 7f       	andi	r23, 0xFF	; 255
    8428:	7f 7f       	andi	r23, 0xFF	; 255
    842a:	7f 7f       	andi	r23, 0xFF	; 255
    842c:	7f 7f       	andi	r23, 0xFF	; 255
    842e:	7f 7f       	andi	r23, 0xFF	; 255
    8430:	7f 7f       	andi	r23, 0xFF	; 255
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7f 7f       	andi	r23, 0xFF	; 255
    8448:	7f 7f       	andi	r23, 0xFF	; 255
    844a:	7f 7f       	andi	r23, 0xFF	; 255
    844c:	7f 7f       	andi	r23, 0xFF	; 255
    844e:	7f 7f       	andi	r23, 0xFF	; 255
    8450:	7f 7f       	andi	r23, 0xFF	; 255
    8452:	7f 7f       	andi	r23, 0xFF	; 255
    8454:	7f 7f       	andi	r23, 0xFF	; 255
    8456:	7f 7f       	andi	r23, 0xFF	; 255
    8458:	7f 7f       	andi	r23, 0xFF	; 255
    845a:	7f 7f       	andi	r23, 0xFF	; 255
    845c:	7f 7f       	andi	r23, 0xFF	; 255
    845e:	7f 7f       	andi	r23, 0xFF	; 255
    8460:	7f 7f       	andi	r23, 0xFF	; 255
    8462:	7f 7f       	andi	r23, 0xFF	; 255
    8464:	7f 7f       	andi	r23, 0xFF	; 255
    8466:	7f 7f       	andi	r23, 0xFF	; 255
    8468:	7f 7f       	andi	r23, 0xFF	; 255
    846a:	7f 7f       	andi	r23, 0xFF	; 255
    846c:	7f 7f       	andi	r23, 0xFF	; 255
    846e:	7f 7f       	andi	r23, 0xFF	; 255
    8470:	7f 7f       	andi	r23, 0xFF	; 255
    8472:	7f 7f       	andi	r23, 0xFF	; 255
    8474:	7f 7f       	andi	r23, 0xFF	; 255
    8476:	7f 7f       	andi	r23, 0xFF	; 255
    8478:	7f 7f       	andi	r23, 0xFF	; 255
    847a:	7f 7f       	andi	r23, 0xFF	; 255
    847c:	7f 7f       	andi	r23, 0xFF	; 255
    847e:	7f 7f       	andi	r23, 0xFF	; 255
    8480:	80 80       	ld	r8, Z
    8482:	80 80       	ld	r8, Z
    8484:	80 80       	ld	r8, Z
    8486:	80 80       	ld	r8, Z
    8488:	80 80       	ld	r8, Z
    848a:	80 80       	ld	r8, Z
    848c:	80 80       	ld	r8, Z
    848e:	80 80       	ld	r8, Z
    8490:	80 80       	ld	r8, Z
    8492:	80 80       	ld	r8, Z
    8494:	80 80       	ld	r8, Z
    8496:	80 80       	ld	r8, Z
    8498:	80 80       	ld	r8, Z
    849a:	80 80       	ld	r8, Z
    849c:	80 80       	ld	r8, Z
    849e:	80 80       	ld	r8, Z
    84a0:	80 80       	ld	r8, Z
    84a2:	80 80       	ld	r8, Z
    84a4:	80 80       	ld	r8, Z
    84a6:	80 80       	ld	r8, Z
    84a8:	80 80       	ld	r8, Z
    84aa:	80 80       	ld	r8, Z
    84ac:	80 80       	ld	r8, Z
    84ae:	80 80       	ld	r8, Z
    84b0:	80 80       	ld	r8, Z
    84b2:	80 80       	ld	r8, Z
    84b4:	80 80       	ld	r8, Z
    84b6:	80 80       	ld	r8, Z
    84b8:	80 80       	ld	r8, Z
    84ba:	80 80       	ld	r8, Z
    84bc:	80 80       	ld	r8, Z
    84be:	80 80       	ld	r8, Z
    84c0:	80 80       	ld	r8, Z
    84c2:	80 80       	ld	r8, Z
    84c4:	80 80       	ld	r8, Z
    84c6:	80 80       	ld	r8, Z
    84c8:	80 80       	ld	r8, Z
    84ca:	80 80       	ld	r8, Z
    84cc:	80 80       	ld	r8, Z
    84ce:	80 80       	ld	r8, Z
    84d0:	80 80       	ld	r8, Z
    84d2:	80 80       	ld	r8, Z
    84d4:	80 80       	ld	r8, Z
    84d6:	80 80       	ld	r8, Z
    84d8:	80 80       	ld	r8, Z
    84da:	80 80       	ld	r8, Z
    84dc:	80 80       	ld	r8, Z
    84de:	80 80       	ld	r8, Z
    84e0:	80 80       	ld	r8, Z
    84e2:	80 80       	ld	r8, Z
    84e4:	80 80       	ld	r8, Z
    84e6:	80 80       	ld	r8, Z
    84e8:	80 80       	ld	r8, Z
    84ea:	80 80       	ld	r8, Z
    84ec:	80 80       	ld	r8, Z
    84ee:	80 80       	ld	r8, Z
    84f0:	80 80       	ld	r8, Z
    84f2:	80 80       	ld	r8, Z
    84f4:	80 80       	ld	r8, Z
    84f6:	80 80       	ld	r8, Z
    84f8:	80 80       	ld	r8, Z
    84fa:	80 80       	ld	r8, Z
    84fc:	80 80       	ld	r8, Z
    84fe:	80 80       	ld	r8, Z
    8500:	7f 7f       	andi	r23, 0xFF	; 255
    8502:	7f 7f       	andi	r23, 0xFF	; 255
    8504:	7f 7f       	andi	r23, 0xFF	; 255
    8506:	7f 7f       	andi	r23, 0xFF	; 255
    8508:	7f 7f       	andi	r23, 0xFF	; 255
    850a:	7f 7f       	andi	r23, 0xFF	; 255
    850c:	7f 7f       	andi	r23, 0xFF	; 255
    850e:	7f 7f       	andi	r23, 0xFF	; 255
    8510:	7f 7f       	andi	r23, 0xFF	; 255
    8512:	7f 7f       	andi	r23, 0xFF	; 255
    8514:	7f 7f       	andi	r23, 0xFF	; 255
    8516:	7f 7f       	andi	r23, 0xFF	; 255
    8518:	7f 7f       	andi	r23, 0xFF	; 255
    851a:	7f 7f       	andi	r23, 0xFF	; 255
    851c:	7f 7f       	andi	r23, 0xFF	; 255
    851e:	7f 7f       	andi	r23, 0xFF	; 255
    8520:	7f 7f       	andi	r23, 0xFF	; 255
    8522:	7f 7f       	andi	r23, 0xFF	; 255
    8524:	7f 7f       	andi	r23, 0xFF	; 255
    8526:	7f 7f       	andi	r23, 0xFF	; 255
    8528:	7f 7f       	andi	r23, 0xFF	; 255
    852a:	7f 7f       	andi	r23, 0xFF	; 255
    852c:	7f 7f       	andi	r23, 0xFF	; 255
    852e:	7f 7f       	andi	r23, 0xFF	; 255
    8530:	7f 7f       	andi	r23, 0xFF	; 255
    8532:	7f 7f       	andi	r23, 0xFF	; 255
    8534:	7f 7f       	andi	r23, 0xFF	; 255
    8536:	7f 7f       	andi	r23, 0xFF	; 255
    8538:	7f 7f       	andi	r23, 0xFF	; 255
    853a:	7f 7f       	andi	r23, 0xFF	; 255
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7f 7f       	andi	r23, 0xFF	; 255
    8546:	7f 7f       	andi	r23, 0xFF	; 255
    8548:	7f 7f       	andi	r23, 0xFF	; 255
    854a:	7f 7f       	andi	r23, 0xFF	; 255
    854c:	7f 7f       	andi	r23, 0xFF	; 255
    854e:	7f 7f       	andi	r23, 0xFF	; 255
    8550:	7f 7f       	andi	r23, 0xFF	; 255
    8552:	7f 7f       	andi	r23, 0xFF	; 255
    8554:	7f 7f       	andi	r23, 0xFF	; 255
    8556:	7f 7f       	andi	r23, 0xFF	; 255
    8558:	7f 7f       	andi	r23, 0xFF	; 255
    855a:	7f 7f       	andi	r23, 0xFF	; 255
    855c:	7f 7f       	andi	r23, 0xFF	; 255
    855e:	7f 7f       	andi	r23, 0xFF	; 255
    8560:	7f 7f       	andi	r23, 0xFF	; 255
    8562:	7f 7f       	andi	r23, 0xFF	; 255
    8564:	7f 7f       	andi	r23, 0xFF	; 255
    8566:	7f 7f       	andi	r23, 0xFF	; 255
    8568:	7f 7f       	andi	r23, 0xFF	; 255
    856a:	7f 7f       	andi	r23, 0xFF	; 255
    856c:	7f 7f       	andi	r23, 0xFF	; 255
    856e:	7f 7f       	andi	r23, 0xFF	; 255
    8570:	7f 7f       	andi	r23, 0xFF	; 255
    8572:	7f 7f       	andi	r23, 0xFF	; 255
    8574:	7f 7f       	andi	r23, 0xFF	; 255
    8576:	7f 7f       	andi	r23, 0xFF	; 255
    8578:	7f 7f       	andi	r23, 0xFF	; 255
    857a:	7f 7f       	andi	r23, 0xFF	; 255
    857c:	7f 7f       	andi	r23, 0xFF	; 255
    857e:	7f 7f       	andi	r23, 0xFF	; 255
    8580:	7f 7f       	andi	r23, 0xFF	; 255
    8582:	7f 7f       	andi	r23, 0xFF	; 255
    8584:	7f 7f       	andi	r23, 0xFF	; 255
    8586:	7f 7f       	andi	r23, 0xFF	; 255
    8588:	7f 7f       	andi	r23, 0xFF	; 255
    858a:	7f 7f       	andi	r23, 0xFF	; 255
    858c:	7f 7f       	andi	r23, 0xFF	; 255
    858e:	7f 7f       	andi	r23, 0xFF	; 255
    8590:	7f 7f       	andi	r23, 0xFF	; 255
    8592:	7f 7f       	andi	r23, 0xFF	; 255
    8594:	7f 7f       	andi	r23, 0xFF	; 255
    8596:	7f 7f       	andi	r23, 0xFF	; 255
    8598:	7f 7f       	andi	r23, 0xFF	; 255
    859a:	7f 7f       	andi	r23, 0xFF	; 255
    859c:	7f 7f       	andi	r23, 0xFF	; 255
    859e:	7f 7f       	andi	r23, 0xFF	; 255
    85a0:	7f 7f       	andi	r23, 0xFF	; 255
    85a2:	7f 7f       	andi	r23, 0xFF	; 255
    85a4:	7f 7f       	andi	r23, 0xFF	; 255
    85a6:	7f 7f       	andi	r23, 0xFF	; 255
    85a8:	7f 7f       	andi	r23, 0xFF	; 255
    85aa:	7f 7f       	andi	r23, 0xFF	; 255
    85ac:	7f 7f       	andi	r23, 0xFF	; 255
    85ae:	7f 7f       	andi	r23, 0xFF	; 255
    85b0:	7f 7f       	andi	r23, 0xFF	; 255
    85b2:	7f 7f       	andi	r23, 0xFF	; 255
    85b4:	7f 7f       	andi	r23, 0xFF	; 255
    85b6:	7f 7f       	andi	r23, 0xFF	; 255
    85b8:	7f 7f       	andi	r23, 0xFF	; 255
    85ba:	7f 7f       	andi	r23, 0xFF	; 255
    85bc:	7f 7f       	andi	r23, 0xFF	; 255
    85be:	7f 7f       	andi	r23, 0xFF	; 255
    85c0:	80 80       	ld	r8, Z
    85c2:	80 80       	ld	r8, Z
    85c4:	80 80       	ld	r8, Z
    85c6:	80 80       	ld	r8, Z
    85c8:	80 80       	ld	r8, Z
    85ca:	80 80       	ld	r8, Z
    85cc:	80 80       	ld	r8, Z
    85ce:	80 80       	ld	r8, Z
    85d0:	80 80       	ld	r8, Z
    85d2:	80 80       	ld	r8, Z
    85d4:	80 80       	ld	r8, Z
    85d6:	80 80       	ld	r8, Z
    85d8:	80 80       	ld	r8, Z
    85da:	80 80       	ld	r8, Z
    85dc:	80 80       	ld	r8, Z
    85de:	80 80       	ld	r8, Z
    85e0:	80 80       	ld	r8, Z
    85e2:	80 80       	ld	r8, Z
    85e4:	80 80       	ld	r8, Z
    85e6:	80 80       	ld	r8, Z
    85e8:	80 80       	ld	r8, Z
    85ea:	80 80       	ld	r8, Z
    85ec:	80 80       	ld	r8, Z
    85ee:	80 80       	ld	r8, Z
    85f0:	80 80       	ld	r8, Z
    85f2:	80 80       	ld	r8, Z
    85f4:	80 80       	ld	r8, Z
    85f6:	80 80       	ld	r8, Z
    85f8:	80 80       	ld	r8, Z
    85fa:	80 80       	ld	r8, Z
    85fc:	80 80       	ld	r8, Z
    85fe:	80 80       	ld	r8, Z
    8600:	03 09       	sbc	r16, r3
    8602:	13 1e       	adc	r1, r19
    8604:	28 31       	cpi	r18, 0x18	; 24
    8606:	3a 40       	sbci	r19, 0x0A	; 10
    8608:	46 4c       	sbci	r20, 0xC6	; 198
    860a:	50 54       	subi	r21, 0x40	; 64
    860c:	58 5b       	subi	r21, 0xB8	; 184
    860e:	5e 61       	ori	r21, 0x1E	; 30
    8610:	63 65       	ori	r22, 0x53	; 83
    8612:	67 69       	ori	r22, 0x97	; 151
    8614:	6b 6c       	ori	r22, 0xCB	; 203
    8616:	6e 6f       	ori	r22, 0xFE	; 254
    8618:	70 71       	andi	r23, 0x10	; 16
    861a:	72 73       	andi	r23, 0x32	; 50
    861c:	74 75       	andi	r23, 0x54	; 84
    861e:	76 77       	andi	r23, 0x76	; 118
    8620:	77 78       	andi	r23, 0x87	; 135
    8622:	79 79       	andi	r23, 0x99	; 153
    8624:	7a 7a       	andi	r23, 0xAA	; 170
    8626:	7b 7b       	andi	r23, 0xBB	; 187
    8628:	7c 7c       	andi	r23, 0xCC	; 204
    862a:	7c 7d       	andi	r23, 0xDC	; 220
    862c:	7d 7d       	andi	r23, 0xDD	; 221
    862e:	7e 7e       	andi	r23, 0xEE	; 238
    8630:	7e 7e       	andi	r23, 0xEE	; 238
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	7f 7f       	andi	r23, 0xFF	; 255
    8642:	7f 7f       	andi	r23, 0xFF	; 255
    8644:	7f 7f       	andi	r23, 0xFF	; 255
    8646:	7f 7f       	andi	r23, 0xFF	; 255
    8648:	7f 7f       	andi	r23, 0xFF	; 255
    864a:	7f 7f       	andi	r23, 0xFF	; 255
    864c:	7f 7e       	andi	r23, 0xEF	; 239
    864e:	7e 7e       	andi	r23, 0xEE	; 238
    8650:	7e 7d       	andi	r23, 0xDE	; 222
    8652:	7d 7d       	andi	r23, 0xDD	; 221
    8654:	7c 7c       	andi	r23, 0xCC	; 204
    8656:	7c 7b       	andi	r23, 0xBC	; 188
    8658:	7b 7a       	andi	r23, 0xAB	; 171
    865a:	7a 79       	andi	r23, 0x9A	; 154
    865c:	79 78       	andi	r23, 0x89	; 137
    865e:	77 77       	andi	r23, 0x77	; 119
    8660:	76 75       	andi	r23, 0x56	; 86
    8662:	74 73       	andi	r23, 0x34	; 52
    8664:	72 71       	andi	r23, 0x12	; 18
    8666:	70 6f       	ori	r23, 0xF0	; 240
    8668:	6e 6c       	ori	r22, 0xCE	; 206
    866a:	6b 69       	ori	r22, 0x9B	; 155
    866c:	67 65       	ori	r22, 0x57	; 87
    866e:	63 61       	ori	r22, 0x13	; 19
    8670:	5e 5b       	subi	r21, 0xBE	; 190
    8672:	58 54       	subi	r21, 0x48	; 72
    8674:	50 4c       	sbci	r21, 0xC0	; 192
    8676:	46 40       	sbci	r20, 0x06	; 6
    8678:	3a 31       	cpi	r19, 0x1A	; 26
    867a:	28 1e       	adc	r2, r24
    867c:	13 09       	sbc	r17, r3
    867e:	03 00       	.word	0x0003	; ????
    8680:	c6 cc       	rjmp	.-1652   	; 0x800e <waves+0xe>
    8682:	d5 db       	rcall	.-2134   	; 0x7e2e <steptable+0x26>
    8684:	df e3       	ldi	r29, 0x3F	; 63
    8686:	e5 e7       	ldi	r30, 0x75	; 117
    8688:	e9 ea       	ldi	r30, 0xA9	; 169
    868a:	eb ec       	ldi	r30, 0xCB	; 203
    868c:	ed ee       	ldi	r30, 0xED	; 237
    868e:	ef ef       	ldi	r30, 0xFF	; 255
    8690:	f0 f0       	brcs	.+60     	; 0x86ce <waves+0x6ce>
    8692:	f0 f1       	brcs	.+124    	; 0x8710 <waves+0x710>
    8694:	f1 f1       	breq	.+124    	; 0x8712 <waves+0x712>
    8696:	f1 f2       	breq	.-68     	; 0x8654 <waves+0x654>
    8698:	f2 f2       	brmi	.-68     	; 0x8656 <waves+0x656>
    869a:	f2 f2       	brmi	.-68     	; 0x8658 <waves+0x658>
    869c:	f2 f2       	brmi	.-68     	; 0x865a <waves+0x65a>
    869e:	f2 f3       	brmi	.-4      	; 0x869c <waves+0x69c>
    86a0:	f3 f3       	brvs	.-4      	; 0x869e <waves+0x69e>
    86a2:	f3 f3       	brvs	.-4      	; 0x86a0 <waves+0x6a0>
    86a4:	f3 f3       	brvs	.-4      	; 0x86a2 <waves+0x6a2>
    86a6:	f3 f3       	brvs	.-4      	; 0x86a4 <waves+0x6a4>
    86a8:	f3 f3       	brvs	.-4      	; 0x86a6 <waves+0x6a6>
    86aa:	f3 f3       	brvs	.-4      	; 0x86a8 <waves+0x6a8>
    86ac:	f3 f3       	brvs	.-4      	; 0x86aa <waves+0x6aa>
    86ae:	f3 f3       	brvs	.-4      	; 0x86ac <waves+0x6ac>
    86b0:	f3 f3       	brvs	.-4      	; 0x86ae <waves+0x6ae>
    86b2:	f3 f3       	brvs	.-4      	; 0x86b0 <waves+0x6b0>
    86b4:	f3 f3       	brvs	.-4      	; 0x86b2 <waves+0x6b2>
    86b6:	f3 f3       	brvs	.-4      	; 0x86b4 <waves+0x6b4>
    86b8:	f3 f3       	brvs	.-4      	; 0x86b6 <waves+0x6b6>
    86ba:	f3 f3       	brvs	.-4      	; 0x86b8 <waves+0x6b8>
    86bc:	f3 f3       	brvs	.-4      	; 0x86ba <waves+0x6ba>
    86be:	f3 f3       	brvs	.-4      	; 0x86bc <waves+0x6bc>
    86c0:	f3 f3       	brvs	.-4      	; 0x86be <waves+0x6be>
    86c2:	f3 f3       	brvs	.-4      	; 0x86c0 <waves+0x6c0>
    86c4:	f3 f3       	brvs	.-4      	; 0x86c2 <waves+0x6c2>
    86c6:	f3 f3       	brvs	.-4      	; 0x86c4 <waves+0x6c4>
    86c8:	f3 f3       	brvs	.-4      	; 0x86c6 <waves+0x6c6>
    86ca:	f3 f3       	brvs	.-4      	; 0x86c8 <waves+0x6c8>
    86cc:	f3 f3       	brvs	.-4      	; 0x86ca <waves+0x6ca>
    86ce:	f3 f3       	brvs	.-4      	; 0x86cc <waves+0x6cc>
    86d0:	f3 f3       	brvs	.-4      	; 0x86ce <waves+0x6ce>
    86d2:	f3 f3       	brvs	.-4      	; 0x86d0 <waves+0x6d0>
    86d4:	f3 f3       	brvs	.-4      	; 0x86d2 <waves+0x6d2>
    86d6:	f3 f3       	brvs	.-4      	; 0x86d4 <waves+0x6d4>
    86d8:	f3 f3       	brvs	.-4      	; 0x86d6 <waves+0x6d6>
    86da:	f3 f3       	brvs	.-4      	; 0x86d8 <waves+0x6d8>
    86dc:	f3 f3       	brvs	.-4      	; 0x86da <waves+0x6da>
    86de:	f3 f3       	brvs	.-4      	; 0x86dc <waves+0x6dc>
    86e0:	f2 f2       	brmi	.-68     	; 0x869e <waves+0x69e>
    86e2:	f2 f2       	brmi	.-68     	; 0x86a0 <waves+0x6a0>
    86e4:	f2 f2       	brmi	.-68     	; 0x86a2 <waves+0x6a2>
    86e6:	f2 f2       	brmi	.-68     	; 0x86a4 <waves+0x6a4>
    86e8:	f1 f1       	breq	.+124    	; 0x8766 <waves+0x766>
    86ea:	f1 f1       	breq	.+124    	; 0x8768 <waves+0x768>
    86ec:	f0 f0       	brcs	.+60     	; 0x872a <waves+0x72a>
    86ee:	f0 ef       	ldi	r31, 0xF0	; 240
    86f0:	ef ee       	ldi	r30, 0xEF	; 239
    86f2:	ed ec       	ldi	r30, 0xCD	; 205
    86f4:	eb ea       	ldi	r30, 0xAB	; 171
    86f6:	e9 e7       	ldi	r30, 0x79	; 121
    86f8:	e5 e3       	ldi	r30, 0x35	; 53
    86fa:	df db       	rcall	.-2114   	; 0x7eba <steptable+0xb2>
    86fc:	d5 cc       	rjmp	.-1622   	; 0x80a8 <waves+0xa8>
    86fe:	c6 00       	.word	0x00c6	; ????
    8700:	00 28       	or	r0, r0
    8702:	3d 42       	sbci	r19, 0x2D	; 45
    8704:	30 2d       	mov	r19, r0
    8706:	2c 2b       	or	r18, r28
    8708:	2c 2d       	mov	r18, r12
    870a:	2e 2f       	mov	r18, r30
    870c:	30 32       	cpi	r19, 0x20	; 32
    870e:	33 35       	cpi	r19, 0x53	; 83
    8710:	37 39       	cpi	r19, 0x97	; 151
    8712:	3b 3d       	cpi	r19, 0xDB	; 219
    8714:	3f 41       	sbci	r19, 0x1F	; 31
    8716:	43 45       	sbci	r20, 0x53	; 83
    8718:	48 4a       	sbci	r20, 0xA8	; 168
    871a:	4c 4e       	sbci	r20, 0xEC	; 236
    871c:	50 53       	subi	r21, 0x30	; 48
    871e:	55 57       	subi	r21, 0x75	; 117
    8720:	59 5b       	subi	r21, 0xB9	; 185
    8722:	5d 5f       	subi	r21, 0xFD	; 253
    8724:	61 63       	ori	r22, 0x31	; 49
    8726:	65 67       	ori	r22, 0x75	; 117
    8728:	69 6b       	ori	r22, 0xB9	; 185
    872a:	6c 6e       	ori	r22, 0xEC	; 236
    872c:	70 71       	andi	r23, 0x10	; 16
    872e:	73 74       	andi	r23, 0x43	; 67
    8730:	75 77       	andi	r23, 0x75	; 117
    8732:	78 79       	andi	r23, 0x98	; 152
    8734:	7a 7b       	andi	r23, 0xBA	; 186
    8736:	7c 7d       	andi	r23, 0xDC	; 220
    8738:	7d 7e       	andi	r23, 0xED	; 237
    873a:	7e 7f       	andi	r23, 0xFE	; 254
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7e 7e       	andi	r23, 0xEE	; 238
    8748:	7d 7d       	andi	r23, 0xDD	; 221
    874a:	7c 7b       	andi	r23, 0xBC	; 188
    874c:	7a 79       	andi	r23, 0x9A	; 154
    874e:	78 77       	andi	r23, 0x78	; 120
    8750:	75 74       	andi	r23, 0x45	; 69
    8752:	73 71       	andi	r23, 0x13	; 19
    8754:	70 6e       	ori	r23, 0xE0	; 224
    8756:	6c 6b       	ori	r22, 0xBC	; 188
    8758:	69 67       	ori	r22, 0x79	; 121
    875a:	65 63       	ori	r22, 0x35	; 53
    875c:	61 5f       	subi	r22, 0xF1	; 241
    875e:	5d 5b       	subi	r21, 0xBD	; 189
    8760:	59 57       	subi	r21, 0x79	; 121
    8762:	55 53       	subi	r21, 0x35	; 53
    8764:	50 4e       	sbci	r21, 0xE0	; 224
    8766:	4c 4a       	sbci	r20, 0xAC	; 172
    8768:	48 45       	sbci	r20, 0x58	; 88
    876a:	43 41       	sbci	r20, 0x13	; 19
    876c:	3f 3d       	cpi	r19, 0xDF	; 223
    876e:	3b 39       	cpi	r19, 0x9B	; 155
    8770:	37 35       	cpi	r19, 0x57	; 87
    8772:	33 32       	cpi	r19, 0x23	; 35
    8774:	30 2f       	mov	r19, r16
    8776:	2e 2d       	mov	r18, r14
    8778:	2c 2b       	or	r18, r28
    877a:	2c 2d       	mov	r18, r12
    877c:	30 42       	sbci	r19, 0x20	; 32
    877e:	3d 28       	or	r3, r13
    8780:	00 e9       	ldi	r16, 0x90	; 144
    8782:	e5 fe       	sbrs	r14, 5
    8784:	d4 d7       	rcall	.+4008   	; 0x972e <print_level_score+0x22>
    8786:	d7 d7       	rcall	.+4014   	; 0x9736 <print_level_score+0x2a>
    8788:	d6 d4       	rcall	.+2476   	; 0x9136 <LBLineIntersect+0xb0>
    878a:	d2 d0       	rcall	.+420    	; 0x8930 <waves+0x930>
    878c:	ce cc       	rjmp	.-1636   	; 0x812a <waves+0x12a>
    878e:	ca c8       	rjmp	.-3692   	; 0x7924 <ProcessMusic+0xd8>
    8790:	c6 c3       	rjmp	.+1932   	; 0x8f1e <LBGetNextFrame+0x42>
    8792:	c1 bf       	out	0x31, r28	; 49
    8794:	bd ba       	out	0x1d, r11	; 29
    8796:	b8 b6       	in	r11, 0x38	; 56
    8798:	b4 b1       	in	r27, 0x04	; 4
    879a:	af ad       	ldd	r26, Y+63	; 0x3f
    879c:	ab a9       	ldd	r26, Y+51	; 0x33
    879e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    87a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    87a2:	9f 9e       	mul	r9, r31
    87a4:	9c 9a       	sbi	0x13, 4	; 19
    87a6:	99 97       	sbiw	r26, 0x29	; 41
    87a8:	95 94       	asr	r9
    87aa:	93 91       	.word	0x9193	; ????
    87ac:	90 8f       	std	Z+24, r25	; 0x18
    87ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    87b0:	8b 8a       	std	Y+19, r8	; 0x13
    87b2:	89 88       	ldd	r8, Y+17	; 0x11
    87b4:	88 87       	std	Y+8, r24	; 0x08
    87b6:	86 85       	ldd	r24, Z+14	; 0x0e
    87b8:	85 84       	ldd	r8, Z+13	; 0x0d
    87ba:	84 84       	ldd	r8, Z+12	; 0x0c
    87bc:	83 83       	std	Z+3, r24	; 0x03
    87be:	83 83       	std	Z+3, r24	; 0x03
    87c0:	83 83       	std	Z+3, r24	; 0x03
    87c2:	83 83       	std	Z+3, r24	; 0x03
    87c4:	83 84       	ldd	r8, Z+11	; 0x0b
    87c6:	84 84       	ldd	r8, Z+12	; 0x0c
    87c8:	85 85       	ldd	r24, Z+13	; 0x0d
    87ca:	86 87       	std	Z+14, r24	; 0x0e
    87cc:	88 88       	ldd	r8, Y+16	; 0x10
    87ce:	89 8a       	std	Y+17, r8	; 0x11
    87d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    87d2:	8d 8f       	std	Y+29, r24	; 0x1d
    87d4:	90 91 93 94 	lds	r25, 0x9493
    87d8:	95 97       	sbiw	r26, 0x25	; 37
    87da:	99 9a       	sbi	0x13, 1	; 19
    87dc:	9c 9e       	mul	r9, r28
    87de:	9f a1       	ldd	r25, Y+39	; 0x27
    87e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    87e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    87e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    87e6:	af b1       	in	r26, 0x0f	; 15
    87e8:	b4 b6       	in	r11, 0x34	; 52
    87ea:	b8 ba       	out	0x18, r11	; 24
    87ec:	bd bf       	out	0x3d, r27	; 61
    87ee:	c1 c3       	rjmp	.+1922   	; 0x8f72 <LBGetJoyPadState+0x50>
    87f0:	c6 c8       	rjmp	.-3700   	; 0x797e <ProcessMusic+0x132>
    87f2:	ca cc       	rjmp	.-1644   	; 0x8188 <waves+0x188>
    87f4:	ce d0       	rcall	.+412    	; 0x8992 <waves+0x992>
    87f6:	d2 d4       	rcall	.+2468   	; 0x919c <LBLineIntersect+0x116>
    87f8:	d6 d7       	rcall	.+4012   	; 0x97a6 <print_final_score+0x16>
    87fa:	d7 d7       	rcall	.+4014   	; 0x97aa <print_final_score+0x1a>
    87fc:	d4 fe       	sbrs	r13, 4
    87fe:	e5 e9       	ldi	r30, 0x95	; 149
    8800:	f9 f8       	.word	0xf8f9	; ????
    8802:	f9 f5       	brne	.+126    	; 0x8882 <waves+0x882>
    8804:	eb e1       	ldi	r30, 0x1B	; 27
    8806:	dd de       	rcall	.-582    	; 0x85c2 <waves+0x5c2>
    8808:	e0 e2       	ldi	r30, 0x20	; 32
    880a:	e4 e5       	ldi	r30, 0x54	; 84
    880c:	e6 e5       	ldi	r30, 0x56	; 86
    880e:	e4 e2       	ldi	r30, 0x24	; 36
    8810:	de d9       	rcall	.-3140   	; 0x7bce <ProcessMusic+0x382>
    8812:	d2 ca       	rjmp	.-2652   	; 0x7db8 <esmw+0xb4>
    8814:	c1 b7       	in	r28, 0x31	; 49
    8816:	ac a2       	std	Y+36, r10	; 0x24
    8818:	99 91       	ld	r25, Y+
    881a:	8a 86       	std	Y+10, r8	; 0x0a
    881c:	83 81       	ldd	r24, Z+3	; 0x03
    881e:	80 80       	ld	r8, Z
    8820:	81 82       	std	Z+1, r8	; 0x01
    8822:	83 85       	ldd	r24, Z+11	; 0x0b
    8824:	86 88       	ldd	r8, Z+22	; 0x16
    8826:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8828:	8d 8f       	std	Y+29, r24	; 0x1d
    882a:	90 92 93 95 	sts	0x9593, r9
    882e:	96 97       	sbiw	r26, 0x26	; 38
    8830:	98 99       	sbic	0x13, 0	; 19
    8832:	9a 9b       	sbis	0x13, 2	; 19
    8834:	9b 9c       	mul	r9, r11
    8836:	9d 9d       	mul	r25, r13
    8838:	9d 9e       	mul	r9, r29
    883a:	9e 9e       	mul	r9, r30
    883c:	9f 9f       	mul	r25, r31
    883e:	9f 9f       	mul	r25, r31
    8840:	9f 9f       	mul	r25, r31
    8842:	9f 9e       	mul	r9, r31
    8844:	9e 9e       	mul	r9, r30
    8846:	9d 9d       	mul	r25, r13
    8848:	9d 9c       	mul	r9, r13
    884a:	9b 9b       	sbis	0x13, 3	; 19
    884c:	9a 99       	sbic	0x13, 2	; 19
    884e:	98 97       	sbiw	r26, 0x28	; 40
    8850:	96 95       	lsr	r25
    8852:	93 92       	.word	0x9293	; ????
    8854:	90 8f       	std	Z+24, r25	; 0x18
    8856:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8858:	8a 88       	ldd	r8, Y+18	; 0x12
    885a:	86 85       	ldd	r24, Z+14	; 0x0e
    885c:	83 82       	std	Z+3, r8	; 0x03
    885e:	81 80       	ldd	r8, Z+1	; 0x01
    8860:	80 81       	ld	r24, Z
    8862:	83 86       	std	Z+11, r8	; 0x0b
    8864:	8a 91       	ld	r24, -Y
    8866:	99 a2       	std	Y+33, r9	; 0x21
    8868:	ac b7       	in	r26, 0x3c	; 60
    886a:	c1 ca       	rjmp	.-2686   	; 0x7dee <esmw+0xea>
    886c:	d2 d9       	rcall	.-3164   	; 0x7c12 <ProcessMusic+0x3c6>
    886e:	de e2       	ldi	r29, 0x2E	; 46
    8870:	e4 e5       	ldi	r30, 0x54	; 84
    8872:	e6 e5       	ldi	r30, 0x56	; 86
    8874:	e4 e2       	ldi	r30, 0x24	; 36
    8876:	e0 de       	rcall	.-576    	; 0x8638 <waves+0x638>
    8878:	dd e1       	ldi	r29, 0x1D	; 29
    887a:	eb f5       	brvc	.+122    	; 0x88f6 <waves+0x8f6>
    887c:	f9 f8       	.word	0xf8f9	; ????
    887e:	f9 00       	.word	0x00f9	; ????
    8880:	07 08       	sbc	r0, r7
    8882:	07 0b       	sbc	r16, r23
    8884:	15 1f       	adc	r17, r21
    8886:	23 22       	and	r2, r19
    8888:	20 1e       	adc	r2, r16
    888a:	1c 1b       	sub	r17, r28
    888c:	1a 1b       	sub	r17, r26
    888e:	1c 1e       	adc	r1, r28
    8890:	22 27       	eor	r18, r18
    8892:	2e 36       	cpi	r18, 0x6E	; 110
    8894:	3f 49       	sbci	r19, 0x9F	; 159
    8896:	54 5e       	subi	r21, 0xE4	; 228
    8898:	67 6f       	ori	r22, 0xF7	; 247
    889a:	76 7a       	andi	r23, 0xA6	; 166
    889c:	7e 7f       	andi	r23, 0xFE	; 254
    889e:	7f 7f       	andi	r23, 0xFF	; 255
    88a0:	7f 7e       	andi	r23, 0xEF	; 239
    88a2:	7d 7b       	andi	r23, 0xBD	; 189
    88a4:	7a 78       	andi	r23, 0x8A	; 138
    88a6:	76 74       	andi	r23, 0x46	; 70
    88a8:	73 71       	andi	r23, 0x13	; 19
    88aa:	70 6e       	ori	r23, 0xE0	; 224
    88ac:	6d 6b       	ori	r22, 0xBD	; 189
    88ae:	6a 69       	ori	r22, 0x9A	; 154
    88b0:	68 67       	ori	r22, 0x78	; 120
    88b2:	66 65       	ori	r22, 0x56	; 86
    88b4:	65 64       	ori	r22, 0x45	; 69
    88b6:	64 63       	ori	r22, 0x34	; 52
    88b8:	63 62       	ori	r22, 0x23	; 35
    88ba:	62 62       	ori	r22, 0x22	; 34
    88bc:	61 61       	ori	r22, 0x11	; 17
    88be:	61 61       	ori	r22, 0x11	; 17
    88c0:	61 61       	ori	r22, 0x11	; 17
    88c2:	61 62       	ori	r22, 0x21	; 33
    88c4:	62 62       	ori	r22, 0x22	; 34
    88c6:	63 63       	ori	r22, 0x33	; 51
    88c8:	63 64       	ori	r22, 0x43	; 67
    88ca:	65 65       	ori	r22, 0x55	; 85
    88cc:	66 67       	ori	r22, 0x76	; 118
    88ce:	68 69       	ori	r22, 0x98	; 152
    88d0:	6a 6b       	ori	r22, 0xBA	; 186
    88d2:	6d 6e       	ori	r22, 0xED	; 237
    88d4:	70 71       	andi	r23, 0x10	; 16
    88d6:	73 74       	andi	r23, 0x43	; 67
    88d8:	76 78       	andi	r23, 0x86	; 134
    88da:	7a 7b       	andi	r23, 0xBA	; 186
    88dc:	7d 7e       	andi	r23, 0xED	; 237
    88de:	7f 7f       	andi	r23, 0xFF	; 255
    88e0:	7f 7f       	andi	r23, 0xFF	; 255
    88e2:	7e 7a       	andi	r23, 0xAE	; 174
    88e4:	76 6f       	ori	r23, 0xF6	; 246
    88e6:	67 5e       	subi	r22, 0xE7	; 231
    88e8:	54 49       	sbci	r21, 0x94	; 148
    88ea:	3f 36       	cpi	r19, 0x6F	; 111
    88ec:	2e 27       	eor	r18, r30
    88ee:	22 1e       	adc	r2, r18
    88f0:	1c 1b       	sub	r17, r28
    88f2:	1a 1b       	sub	r17, r26
    88f4:	1c 1e       	adc	r1, r28
    88f6:	20 22       	and	r2, r16
    88f8:	23 1f       	adc	r18, r19
    88fa:	15 0b       	sbc	r17, r21
    88fc:	07 08       	sbc	r0, r7
    88fe:	07 00       	.word	0x0007	; ????
    8900:	1f 31       	cpi	r17, 0x1F	; 31
    8902:	3d 44       	sbci	r19, 0x4D	; 77
    8904:	4e 53       	subi	r20, 0x3E	; 62
    8906:	54 56       	subi	r21, 0x64	; 100
    8908:	5a 5f       	subi	r21, 0xFA	; 250
    890a:	64 69       	ori	r22, 0x94	; 148
    890c:	6e 74       	andi	r22, 0x4E	; 78
    890e:	76 79       	andi	r23, 0x96	; 150
    8910:	7c 7f       	andi	r23, 0xFC	; 252
    8912:	7f 7f       	andi	r23, 0xFF	; 255
    8914:	7f 7f       	andi	r23, 0xFF	; 255
    8916:	7f 7f       	andi	r23, 0xFF	; 255
    8918:	7f 7f       	andi	r23, 0xFF	; 255
    891a:	7f 7f       	andi	r23, 0xFF	; 255
    891c:	7f 7f       	andi	r23, 0xFF	; 255
    891e:	7f 7f       	andi	r23, 0xFF	; 255
    8920:	7f 7f       	andi	r23, 0xFF	; 255
    8922:	7f 7f       	andi	r23, 0xFF	; 255
    8924:	7f 7f       	andi	r23, 0xFF	; 255
    8926:	7f 7f       	andi	r23, 0xFF	; 255
    8928:	7f 7f       	andi	r23, 0xFF	; 255
    892a:	7f 7f       	andi	r23, 0xFF	; 255
    892c:	7f 7f       	andi	r23, 0xFF	; 255
    892e:	7f 7f       	andi	r23, 0xFF	; 255
    8930:	7f 7f       	andi	r23, 0xFF	; 255
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7f       	andi	r23, 0xFF	; 255
    894e:	7f 7f       	andi	r23, 0xFF	; 255
    8950:	7f 7f       	andi	r23, 0xFF	; 255
    8952:	7f 7f       	andi	r23, 0xFF	; 255
    8954:	7f 7f       	andi	r23, 0xFF	; 255
    8956:	7f 7f       	andi	r23, 0xFF	; 255
    8958:	7f 7f       	andi	r23, 0xFF	; 255
    895a:	7f 7f       	andi	r23, 0xFF	; 255
    895c:	7f 7f       	andi	r23, 0xFF	; 255
    895e:	7f 7f       	andi	r23, 0xFF	; 255
    8960:	7f 7f       	andi	r23, 0xFF	; 255
    8962:	7f 7f       	andi	r23, 0xFF	; 255
    8964:	7f 7f       	andi	r23, 0xFF	; 255
    8966:	7f 7f       	andi	r23, 0xFF	; 255
    8968:	7f 7f       	andi	r23, 0xFF	; 255
    896a:	7f 7f       	andi	r23, 0xFF	; 255
    896c:	7f 7f       	andi	r23, 0xFF	; 255
    896e:	7f 7f       	andi	r23, 0xFF	; 255
    8970:	7f 7f       	andi	r23, 0xFF	; 255
    8972:	7f 7f       	andi	r23, 0xFF	; 255
    8974:	7f 7f       	andi	r23, 0xFF	; 255
    8976:	7f 7f       	andi	r23, 0xFF	; 255
    8978:	7f 7f       	andi	r23, 0xFF	; 255
    897a:	7f 7c       	andi	r23, 0xCF	; 207
    897c:	78 71       	andi	r23, 0x18	; 24
    897e:	68 4c       	sbci	r22, 0xC8	; 200
    8980:	2c 1c       	adc	r2, r12
    8982:	12 0c       	add	r1, r2
    8984:	0a 0b       	sbc	r16, r26
    8986:	0a 05       	cpc	r16, r10
    8988:	fd f3       	brhs	.-2      	; 0x8988 <waves+0x988>
    898a:	e9 df       	rcall	.-46     	; 0x895e <waves+0x95e>
    898c:	d4 ca       	rjmp	.-2648   	; 0x7f36 <steptable+0x12e>
    898e:	c0 b7       	in	r28, 0x30	; 48
    8990:	ae a6       	std	Y+46, r10	; 0x2e
    8992:	9e 97       	sbiw	r26, 0x2e	; 46
    8994:	91 8b       	std	Z+17, r25	; 0x11
    8996:	86 85       	ldd	r24, Z+14	; 0x0e
    8998:	82 80       	ldd	r8, Z+2	; 0x02
    899a:	80 80       	ld	r8, Z
    899c:	80 80       	ld	r8, Z
    899e:	80 80       	ld	r8, Z
    89a0:	80 80       	ld	r8, Z
    89a2:	80 80       	ld	r8, Z
    89a4:	80 80       	ld	r8, Z
    89a6:	80 80       	ld	r8, Z
    89a8:	80 80       	ld	r8, Z
    89aa:	80 80       	ld	r8, Z
    89ac:	80 80       	ld	r8, Z
    89ae:	80 80       	ld	r8, Z
    89b0:	80 80       	ld	r8, Z
    89b2:	80 80       	ld	r8, Z
    89b4:	80 80       	ld	r8, Z
    89b6:	80 80       	ld	r8, Z
    89b8:	80 80       	ld	r8, Z
    89ba:	80 80       	ld	r8, Z
    89bc:	80 80       	ld	r8, Z
    89be:	80 80       	ld	r8, Z
    89c0:	80 80       	ld	r8, Z
    89c2:	80 80       	ld	r8, Z
    89c4:	80 80       	ld	r8, Z
    89c6:	80 80       	ld	r8, Z
    89c8:	80 80       	ld	r8, Z
    89ca:	80 80       	ld	r8, Z
    89cc:	80 80       	ld	r8, Z
    89ce:	80 80       	ld	r8, Z
    89d0:	80 80       	ld	r8, Z
    89d2:	80 80       	ld	r8, Z
    89d4:	80 80       	ld	r8, Z
    89d6:	80 80       	ld	r8, Z
    89d8:	80 80       	ld	r8, Z
    89da:	80 80       	ld	r8, Z
    89dc:	80 80       	ld	r8, Z
    89de:	80 80       	ld	r8, Z
    89e0:	80 80       	ld	r8, Z
    89e2:	80 80       	ld	r8, Z
    89e4:	80 80       	ld	r8, Z
    89e6:	80 80       	ld	r8, Z
    89e8:	80 80       	ld	r8, Z
    89ea:	80 80       	ld	r8, Z
    89ec:	80 80       	ld	r8, Z
    89ee:	80 80       	ld	r8, Z
    89f0:	80 80       	ld	r8, Z
    89f2:	80 80       	ld	r8, Z
    89f4:	80 87       	std	Z+8, r24	; 0x08
    89f6:	91 9d       	mul	r25, r1
    89f8:	ac c4       	rjmp	.+2392   	; 0x9352 <init_shot_state+0x22>
    89fa:	cb d4       	rcall	.+2454   	; 0x9392 <set_shot_animations+0x28>
    89fc:	dd f2       	brhs	.-74     	; 0x89b4 <waves+0x9b4>
    89fe:	fa fa       	.word	0xfafa	; ????

00008a00 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8a00:	90 91 bd 0b 	lds	r25, 0x0BBD
    8a04:	e0 e9       	ldi	r30, 0x90	; 144
    8a06:	fa e0       	ldi	r31, 0x0A	; 10
    8a08:	80 e0       	ldi	r24, 0x00	; 0
    8a0a:	89 17       	cp	r24, r25
    8a0c:	49 f0       	breq	.+18     	; 0x8a20 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    8a0e:	a0 81       	ld	r26, Z
    8a10:	b1 81       	ldd	r27, Z+1	; 0x01
    8a12:	a0 5e       	subi	r26, 0xE0	; 224
    8a14:	be 4f       	sbci	r27, 0xFE	; 254
    8a16:	22 81       	ldd	r18, Z+2	; 0x02
    8a18:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8a1a:	8f 5f       	subi	r24, 0xFF	; 255
    8a1c:	33 96       	adiw	r30, 0x03	; 3
    8a1e:	f5 cf       	rjmp	.-22     	; 0x8a0a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    8a20:	08 95       	ret

00008a22 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    8a22:	80 93 00 01 	sts	0x0100, r24
    8a26:	08 95       	ret

00008a28 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8a28:	2f 92       	push	r2
    8a2a:	3f 92       	push	r3
    8a2c:	4f 92       	push	r4
    8a2e:	5f 92       	push	r5
    8a30:	6f 92       	push	r6
    8a32:	7f 92       	push	r7
    8a34:	8f 92       	push	r8
    8a36:	9f 92       	push	r9
    8a38:	af 92       	push	r10
    8a3a:	bf 92       	push	r11
    8a3c:	cf 92       	push	r12
    8a3e:	df 92       	push	r13
    8a40:	ef 92       	push	r14
    8a42:	ff 92       	push	r15
    8a44:	0f 93       	push	r16
    8a46:	1f 93       	push	r17
    8a48:	cf 93       	push	r28
    8a4a:	df 93       	push	r29
    8a4c:	00 d0       	rcall	.+0      	; 0x8a4e <ProcessSprites+0x26>
    8a4e:	1f 92       	push	r1
    8a50:	cd b7       	in	r28, 0x3d	; 61
    8a52:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    8a54:	10 92 bd 0b 	sts	0x0BBD, r1
		if(!spritesOn) return;
    8a58:	80 91 00 01 	lds	r24, 0x0100
    8a5c:	88 23       	and	r24, r24
    8a5e:	09 f4       	brne	.+2      	; 0x8a62 <ProcessSprites+0x3a>
    8a60:	a1 c0       	rjmp	.+322    	; 0x8ba4 <ProcessSprites+0x17c>
    8a62:	e8 e6       	ldi	r30, 0x68	; 104
    8a64:	ce 2e       	mov	r12, r30
    8a66:	e4 e0       	ldi	r30, 0x04	; 4
    8a68:	de 2e       	mov	r13, r30
    8a6a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    8a6c:	f6 01       	movw	r30, r12
    8a6e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8a70:	80 3f       	cpi	r24, 0xF0	; 240
    8a72:	09 f4       	brne	.+2      	; 0x8a76 <ProcessSprites+0x4e>
    8a74:	79 c0       	rjmp	.+242    	; 0x8b68 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8a76:	91 81       	ldd	r25, Z+1	; 0x01
    8a78:	29 2f       	mov	r18, r25
    8a7a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8a7c:	28 2e       	mov	r2, r24
    8a7e:	26 94       	lsr	r2
    8a80:	26 94       	lsr	r2
    8a82:	26 94       	lsr	r2
				dx=ssx&0x7;
    8a84:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8a86:	19 f0       	breq	.+6      	; 0x8a8e <ProcessSprites+0x66>
    8a88:	72 e0       	ldi	r23, 0x02	; 2
    8a8a:	47 2e       	mov	r4, r23
    8a8c:	02 c0       	rjmp	.+4      	; 0x8a92 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8a8e:	44 24       	eor	r4, r4
    8a90:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8a92:	63 e0       	ldi	r22, 0x03	; 3
    8a94:	36 95       	lsr	r19
    8a96:	27 95       	ror	r18
    8a98:	6a 95       	dec	r22
    8a9a:	e1 f7       	brne	.-8      	; 0x8a94 <ProcessSprites+0x6c>
    8a9c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    8a9e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    8aa0:	19 f0       	breq	.+6      	; 0x8aa8 <ProcessSprites+0x80>
    8aa2:	52 e0       	ldi	r21, 0x02	; 2
    8aa4:	55 2e       	mov	r5, r21
    8aa6:	02 c0       	rjmp	.+4      	; 0x8aac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    8aa8:	55 24       	eor	r5, r5
    8aaa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8aac:	29 2f       	mov	r18, r25
    8aae:	30 e0       	ldi	r19, 0x00	; 0
    8ab0:	32 2f       	mov	r19, r18
    8ab2:	22 27       	eor	r18, r18
    8ab4:	a9 01       	movw	r20, r18
    8ab6:	48 0f       	add	r20, r24
    8ab8:	51 1d       	adc	r21, r1
    8aba:	5b 83       	std	Y+3, r21	; 0x03
    8abc:	4a 83       	std	Y+2, r20	; 0x02
    8abe:	e1 2c       	mov	r14, r1
    8ac0:	f1 2c       	mov	r15, r1
    8ac2:	94 ee       	ldi	r25, 0xE4	; 228
    8ac4:	93 0d       	add	r25, r3
    8ac6:	99 83       	std	Y+1, r25	; 0x01
    8ac8:	03 2d       	mov	r16, r3
    8aca:	0e 0d       	add	r16, r14
    8acc:	0c 31       	cpi	r16, 0x1C	; 28
    8ace:	10 f0       	brcs	.+4      	; 0x8ad4 <ProcessSprites+0xac>
    8ad0:	09 81       	ldd	r16, Y+1	; 0x01
    8ad2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    8ad4:	5e e1       	ldi	r21, 0x1E	; 30
    8ad6:	05 9f       	mul	r16, r21
    8ad8:	80 01       	movw	r16, r0
    8ada:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8adc:	be 2c       	mov	r11, r14
    8ade:	aa 24       	eor	r10, r10
    8ae0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8ae2:	ed e1       	ldi	r30, 0x1D	; 29
    8ae4:	e7 15       	cp	r30, r7
    8ae6:	18 f4       	brcc	.+6      	; 0x8aee <ProcessSprites+0xc6>
    8ae8:	82 ee       	ldi	r24, 0xE2	; 226
    8aea:	87 0d       	add	r24, r7
    8aec:	01 c0       	rjmp	.+2      	; 0x8af0 <ProcessSprites+0xc8>
    8aee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    8af0:	a8 01       	movw	r20, r16
    8af2:	48 0f       	add	r20, r24
    8af4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    8af6:	ca 01       	movw	r24, r20
    8af8:	80 5e       	subi	r24, 0xE0	; 224
    8afa:	9e 4f       	sbci	r25, 0xFE	; 254
    8afc:	4c 01       	movw	r8, r24
    8afe:	fc 01       	movw	r30, r24
    8b00:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    8b02:	88 31       	cpi	r24, 0x18	; 24
    8b04:	e0 f0       	brcs	.+56     	; 0x8b3e <ProcessSprites+0x116>
    8b06:	60 91 bd 0b 	lds	r22, 0x0BBD
    8b0a:	68 31       	cpi	r22, 0x18	; 24
    8b0c:	f8 f4       	brcc	.+62     	; 0x8b4c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    8b0e:	26 2f       	mov	r18, r22
    8b10:	30 e0       	ldi	r19, 0x00	; 0
    8b12:	f9 01       	movw	r30, r18
    8b14:	ee 0f       	add	r30, r30
    8b16:	ff 1f       	adc	r31, r31
    8b18:	e2 0f       	add	r30, r18
    8b1a:	f3 1f       	adc	r31, r19
    8b1c:	e0 57       	subi	r30, 0x70	; 112
    8b1e:	f5 4f       	sbci	r31, 0xF5	; 245
    8b20:	51 83       	std	Z+1, r21	; 0x01
    8b22:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8b24:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    8b26:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    8b2a:	80 91 bd 0b 	lds	r24, 0x0BBD
    8b2e:	f4 01       	movw	r30, r8
    8b30:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    8b32:	91 e0       	ldi	r25, 0x01	; 1
    8b34:	98 0f       	add	r25, r24
    8b36:	90 93 bd 0b 	sts	0x0BBD, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    8b3a:	88 31       	cpi	r24, 0x18	; 24
    8b3c:	38 f4       	brcc	.+14     	; 0x8b4c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8b3e:	2a 81       	ldd	r18, Y+2	; 0x02
    8b40:	3b 81       	ldd	r19, Y+3	; 0x03
    8b42:	a5 01       	movw	r20, r10
    8b44:	68 2f       	mov	r22, r24
    8b46:	86 2d       	mov	r24, r6
    8b48:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <BlitSprite>
    8b4c:	ff ef       	ldi	r31, 0xFF	; 255
    8b4e:	af 1a       	sub	r10, r31
    8b50:	bf 0a       	sbc	r11, r31
    8b52:	73 94       	inc	r7
    8b54:	87 2d       	mov	r24, r7
    8b56:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8b58:	84 15       	cp	r24, r4
    8b5a:	18 f2       	brcs	.-122    	; 0x8ae2 <ProcessSprites+0xba>
    8b5c:	4f ef       	ldi	r20, 0xFF	; 255
    8b5e:	e4 1a       	sub	r14, r20
    8b60:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8b62:	e5 14       	cp	r14, r5
    8b64:	08 f4       	brcc	.+2      	; 0x8b68 <ProcessSprites+0x140>
    8b66:	b0 cf       	rjmp	.-160    	; 0x8ac8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    8b68:	63 94       	inc	r6
    8b6a:	84 e0       	ldi	r24, 0x04	; 4
    8b6c:	c8 0e       	add	r12, r24
    8b6e:	d1 1c       	adc	r13, r1
    8b70:	9a e0       	ldi	r25, 0x0A	; 10
    8b72:	69 12       	cpse	r6, r25
    8b74:	7b cf       	rjmp	.-266    	; 0x8a6c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    8b76:	0f 90       	pop	r0
    8b78:	0f 90       	pop	r0
    8b7a:	0f 90       	pop	r0
    8b7c:	df 91       	pop	r29
    8b7e:	cf 91       	pop	r28
    8b80:	1f 91       	pop	r17
    8b82:	0f 91       	pop	r16
    8b84:	ff 90       	pop	r15
    8b86:	ef 90       	pop	r14
    8b88:	df 90       	pop	r13
    8b8a:	cf 90       	pop	r12
    8b8c:	bf 90       	pop	r11
    8b8e:	af 90       	pop	r10
    8b90:	9f 90       	pop	r9
    8b92:	8f 90       	pop	r8
    8b94:	7f 90       	pop	r7
    8b96:	6f 90       	pop	r6
    8b98:	5f 90       	pop	r5
    8b9a:	4f 90       	pop	r4
    8b9c:	3f 90       	pop	r3
    8b9e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    8ba0:	0c 94 00 45 	jmp	0x8a00	; 0x8a00 <RestoreBackground>

	}
    8ba4:	0f 90       	pop	r0
    8ba6:	0f 90       	pop	r0
    8ba8:	0f 90       	pop	r0
    8baa:	df 91       	pop	r29
    8bac:	cf 91       	pop	r28
    8bae:	1f 91       	pop	r17
    8bb0:	0f 91       	pop	r16
    8bb2:	ff 90       	pop	r15
    8bb4:	ef 90       	pop	r14
    8bb6:	df 90       	pop	r13
    8bb8:	cf 90       	pop	r12
    8bba:	bf 90       	pop	r11
    8bbc:	af 90       	pop	r10
    8bbe:	9f 90       	pop	r9
    8bc0:	8f 90       	pop	r8
    8bc2:	7f 90       	pop	r7
    8bc4:	6f 90       	pop	r6
    8bc6:	5f 90       	pop	r5
    8bc8:	4f 90       	pop	r4
    8bca:	3f 90       	pop	r3
    8bcc:	2f 90       	pop	r2
    8bce:	08 95       	ret

00008bd0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    8bd0:	df 92       	push	r13
    8bd2:	ef 92       	push	r14
    8bd4:	ff 92       	push	r15
    8bd6:	0f 93       	push	r16
    8bd8:	1f 93       	push	r17
    8bda:	cf 93       	push	r28
    8bdc:	df 93       	push	r29
    8bde:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8be0:	fb 01       	movw	r30, r22
    8be2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8be4:	31 96       	adiw	r30, 0x01	; 1
    8be6:	64 91       	lpm	r22, Z
    8be8:	5f ef       	ldi	r21, 0xFF	; 255
    8bea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    8bec:	24 2f       	mov	r18, r20
    8bee:	21 70       	andi	r18, 0x01	; 1
    8bf0:	40 ff       	sbrs	r20, 0
    8bf2:	04 c0       	rjmp	.+8      	; 0x8bfc <MapSprite2+0x2c>
			x=(mapWidth-1);
    8bf4:	95 2f       	mov	r25, r21
			dx=-1;
    8bf6:	ff 24       	eor	r15, r15
    8bf8:	fa 94       	dec	r15
    8bfa:	03 c0       	rjmp	.+6      	; 0x8c02 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    8bfc:	ff 24       	eor	r15, r15
    8bfe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8c00:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8c02:	41 ff       	sbrs	r20, 1
    8c04:	05 c0       	rjmp	.+10     	; 0x8c10 <MapSprite2+0x40>
			y=(mapHeight-1);
    8c06:	7f ef       	ldi	r23, 0xFF	; 255
    8c08:	76 0f       	add	r23, r22
			dy=-1;
    8c0a:	ee 24       	eor	r14, r14
    8c0c:	ea 94       	dec	r14
    8c0e:	03 c0       	rjmp	.+6      	; 0x8c16 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    8c10:	ee 24       	eor	r14, r14
    8c12:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    8c14:	70 e0       	ldi	r23, 0x00	; 0
    8c16:	21 11       	cpse	r18, r1
    8c18:	01 c0       	rjmp	.+2      	; 0x8c1c <MapSprite2+0x4c>
    8c1a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8c1c:	00 e0       	ldi	r16, 0x00	; 0
    8c1e:	06 17       	cp	r16, r22
    8c20:	09 f1       	breq	.+66     	; 0x8c64 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8c22:	71 03       	mulsu	r23, r17
    8c24:	e0 01       	movw	r28, r0
    8c26:	11 24       	eor	r1, r1
    8c28:	d8 2e       	mov	r13, r24
    8c2a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    8c2c:	8d 15       	cp	r24, r13
    8c2e:	b1 f0       	breq	.+44     	; 0x8c5c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8c30:	9e 01       	movw	r18, r28
    8c32:	29 0f       	add	r18, r25
    8c34:	31 1d       	adc	r19, r1
    8c36:	97 fd       	sbrc	r25, 7
    8c38:	3a 95       	dec	r19
    8c3a:	2e 5f       	subi	r18, 0xFE	; 254
    8c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    8c3e:	fd 01       	movw	r30, r26
    8c40:	e2 0f       	add	r30, r18
    8c42:	f3 1f       	adc	r31, r19
    8c44:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    8c46:	34 e0       	ldi	r19, 0x04	; 4
    8c48:	83 9f       	mul	r24, r19
    8c4a:	f0 01       	movw	r30, r0
    8c4c:	11 24       	eor	r1, r1
    8c4e:	e8 59       	subi	r30, 0x98	; 152
    8c50:	fb 4f       	sbci	r31, 0xFB	; 251
    8c52:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    8c54:	8f 5f       	subi	r24, 0xFF	; 255
    8c56:	43 83       	std	Z+3, r20	; 0x03
    8c58:	9f 0d       	add	r25, r15
    8c5a:	e8 cf       	rjmp	.-48     	; 0x8c2c <MapSprite2+0x5c>
    8c5c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8c5e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8c60:	95 2f       	mov	r25, r21
    8c62:	dd cf       	rjmp	.-70     	; 0x8c1e <MapSprite2+0x4e>
	    }
	}
    8c64:	df 91       	pop	r29
    8c66:	cf 91       	pop	r28
    8c68:	1f 91       	pop	r17
    8c6a:	0f 91       	pop	r16
    8c6c:	ff 90       	pop	r15
    8c6e:	ef 90       	pop	r14
    8c70:	df 90       	pop	r13
    8c72:	08 95       	ret

00008c74 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    8c74:	0f 93       	push	r16
    8c76:	cf 93       	push	r28
    8c78:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    8c7a:	30 e0       	ldi	r19, 0x00	; 0
    8c7c:	30 17       	cp	r19, r16
    8c7e:	e1 f0       	breq	.+56     	; 0x8cb8 <MoveSprite+0x44>
    8c80:	b4 2f       	mov	r27, r20
    8c82:	a0 e2       	ldi	r26, 0x20	; 32
    8c84:	a4 0f       	add	r26, r20
    8c86:	78 2f       	mov	r23, r24
    8c88:	72 0f       	add	r23, r18
    8c8a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    8c8c:	87 17       	cp	r24, r23
    8c8e:	81 f0       	breq	.+32     	; 0x8cb0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    8c90:	c4 e0       	ldi	r28, 0x04	; 4
    8c92:	8c 9f       	mul	r24, r28
    8c94:	f0 01       	movw	r30, r0
    8c96:	11 24       	eor	r1, r1
    8c98:	e8 59       	subi	r30, 0x98	; 152
    8c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    8c9c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    8c9e:	41 3e       	cpi	r20, 0xE1	; 225
    8ca0:	51 05       	cpc	r21, r1
    8ca2:	14 f0       	brlt	.+4      	; 0x8ca8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    8ca4:	a1 83       	std	Z+1, r26	; 0x01
    8ca6:	01 c0       	rjmp	.+2      	; 0x8caa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    8ca8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    8caa:	8f 5f       	subi	r24, 0xFF	; 255
    8cac:	98 5f       	subi	r25, 0xF8	; 248
    8cae:	ee cf       	rjmp	.-36     	; 0x8c8c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    8cb0:	3f 5f       	subi	r19, 0xFF	; 255
    8cb2:	48 5f       	subi	r20, 0xF8	; 248
    8cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    8cb6:	e2 cf       	rjmp	.-60     	; 0x8c7c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    8cb8:	cf 91       	pop	r28
    8cba:	0f 91       	pop	r16
    8cbc:	08 95       	ret

00008cbe <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    8cbe:	08 95       	ret

00008cc0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8cc0:	e8 e6       	ldi	r30, 0x68	; 104
    8cc2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8cc4:	80 ef       	ldi	r24, 0xF0	; 240
    8cc6:	80 83       	st	Z, r24
    8cc8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8cca:	94 e0       	ldi	r25, 0x04	; 4
    8ccc:	e0 39       	cpi	r30, 0x90	; 144
    8cce:	f9 07       	cpc	r31, r25
    8cd0:	d1 f7       	brne	.-12     	; 0x8cc6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    8cd2:	08 95       	ret

00008cd4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    8cd4:	4f 92       	push	r4
    8cd6:	5f 92       	push	r5
    8cd8:	6f 92       	push	r6
    8cda:	7f 92       	push	r7
    8cdc:	8f 92       	push	r8
    8cde:	9f 92       	push	r9
    8ce0:	af 92       	push	r10
    8ce2:	bf 92       	push	r11
    8ce4:	cf 92       	push	r12
    8ce6:	df 92       	push	r13
    8ce8:	ef 92       	push	r14
    8cea:	ff 92       	push	r15
    8cec:	0f 93       	push	r16
    8cee:	1f 93       	push	r17
    8cf0:	cf 93       	push	r28
    8cf2:	df 93       	push	r29
    8cf4:	68 2e       	mov	r6, r24
    8cf6:	56 2e       	mov	r5, r22
    8cf8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    8cfa:	fa 01       	movw	r30, r20
    8cfc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    8cfe:	31 96       	adiw	r30, 0x01	; 1
    8d00:	84 90       	lpm	r8, Z
    8d02:	c7 2c       	mov	r12, r7
    8d04:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8d06:	00 e0       	ldi	r16, 0x00	; 0
    8d08:	10 e0       	ldi	r17, 0x00	; 0
    8d0a:	91 2c       	mov	r9, r1
    8d0c:	98 14       	cp	r9, r8
    8d0e:	f1 f0       	breq	.+60     	; 0x8d4c <DrawMap2+0x78>
    8d10:	c0 e0       	ldi	r28, 0x00	; 0
    8d12:	d0 e0       	ldi	r29, 0x00	; 0
    8d14:	58 01       	movw	r10, r16
    8d16:	f2 e0       	ldi	r31, 0x02	; 2
    8d18:	af 0e       	add	r10, r31
    8d1a:	b1 1c       	adc	r11, r1
    8d1c:	49 2c       	mov	r4, r9
    8d1e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    8d20:	c7 15       	cp	r28, r7
    8d22:	80 f4       	brcc	.+32     	; 0x8d44 <DrawMap2+0x70>
    8d24:	95 01       	movw	r18, r10
    8d26:	2c 0f       	add	r18, r28
    8d28:	3d 1f       	adc	r19, r29
    8d2a:	f7 01       	movw	r30, r14
    8d2c:	e2 0f       	add	r30, r18
    8d2e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8d30:	24 91       	lpm	r18, Z
    8d32:	42 2f       	mov	r20, r18
    8d34:	50 e0       	ldi	r21, 0x00	; 0
    8d36:	64 2d       	mov	r22, r4
    8d38:	8c 2f       	mov	r24, r28
    8d3a:	86 0d       	add	r24, r6
    8d3c:	0e 94 a8 38 	call	0x7150	; 0x7150 <SetTile>
    8d40:	21 96       	adiw	r28, 0x01	; 1
    8d42:	ee cf       	rjmp	.-36     	; 0x8d20 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8d44:	93 94       	inc	r9
    8d46:	0c 0d       	add	r16, r12
    8d48:	1d 1d       	adc	r17, r13
    8d4a:	e0 cf       	rjmp	.-64     	; 0x8d0c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    8d4c:	df 91       	pop	r29
    8d4e:	cf 91       	pop	r28
    8d50:	1f 91       	pop	r17
    8d52:	0f 91       	pop	r16
    8d54:	ff 90       	pop	r15
    8d56:	ef 90       	pop	r14
    8d58:	df 90       	pop	r13
    8d5a:	cf 90       	pop	r12
    8d5c:	bf 90       	pop	r11
    8d5e:	af 90       	pop	r10
    8d60:	9f 90       	pop	r9
    8d62:	8f 90       	pop	r8
    8d64:	7f 90       	pop	r7
    8d66:	6f 90       	pop	r6
    8d68:	5f 90       	pop	r5
    8d6a:	4f 90       	pop	r4
    8d6c:	08 95       	ret

00008d6e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    8d6e:	df 92       	push	r13
    8d70:	ef 92       	push	r14
    8d72:	ff 92       	push	r15
    8d74:	0f 93       	push	r16
    8d76:	1f 93       	push	r17
    8d78:	cf 93       	push	r28
    8d7a:	df 93       	push	r29
    8d7c:	f6 2e       	mov	r15, r22
    8d7e:	04 2f       	mov	r16, r20
    8d80:	d2 2e       	mov	r13, r18
    8d82:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    8d84:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8d86:	8a e0       	ldi	r24, 0x0A	; 10
    8d88:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    8d8a:	01 11       	cpse	r16, r1
    8d8c:	02 c0       	rjmp	.+4      	; 0x8d92 <PrintByte+0x24>
    8d8e:	11 11       	cpse	r17, r1
    8d90:	07 c0       	rjmp	.+14     	; 0x8da0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8d92:	80 2f       	mov	r24, r16
    8d94:	6e 2d       	mov	r22, r14
    8d96:	0e 94 b1 60 	call	0xc162	; 0xc162 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    8d9a:	40 e1       	ldi	r20, 0x10	; 16
    8d9c:	49 0f       	add	r20, r25
    8d9e:	05 c0       	rjmp	.+10     	; 0x8daa <PrintByte+0x3c>
		}else{
			if(zeropad){
    8da0:	dd 20       	and	r13, r13
    8da2:	11 f0       	breq	.+4      	; 0x8da8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    8da4:	40 e1       	ldi	r20, 0x10	; 16
    8da6:	01 c0       	rjmp	.+2      	; 0x8daa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    8da8:	40 e0       	ldi	r20, 0x00	; 0
    8daa:	6f 2d       	mov	r22, r15
    8dac:	8c 2f       	mov	r24, r28
    8dae:	0e 94 a4 38 	call	0x7148	; 0x7148 <SetFont>
			}
		}
		val=val/10;
    8db2:	80 2f       	mov	r24, r16
    8db4:	6e 2d       	mov	r22, r14
    8db6:	0e 94 b1 60 	call	0xc162	; 0xc162 <__udivmodqi4>
    8dba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    8dbc:	1f 5f       	subi	r17, 0xFF	; 255
    8dbe:	21 97       	sbiw	r28, 0x01	; 1
    8dc0:	13 30       	cpi	r17, 0x03	; 3
    8dc2:	19 f7       	brne	.-58     	; 0x8d8a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    8dc4:	df 91       	pop	r29
    8dc6:	cf 91       	pop	r28
    8dc8:	1f 91       	pop	r17
    8dca:	0f 91       	pop	r16
    8dcc:	ff 90       	pop	r15
    8dce:	ef 90       	pop	r14
    8dd0:	df 90       	pop	r13
    8dd2:	08 95       	ret

00008dd4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    8dd4:	0f 93       	push	r16
    8dd6:	1f 93       	push	r17
    8dd8:	cf 93       	push	r28
    8dda:	df 93       	push	r29
    8ddc:	06 2f       	mov	r16, r22
    8dde:	c4 2f       	mov	r28, r20
    8de0:	d5 2f       	mov	r29, r21
    8de2:	18 2f       	mov	r17, r24
    8de4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    8de6:	fe 01       	movw	r30, r28
    8de8:	44 91       	lpm	r20, Z
		if(c!=0){
    8dea:	44 23       	and	r20, r20
    8dec:	49 f0       	breq	.+18     	; 0x8e00 <Print+0x2c>
			c=((c&127)-32);			
    8dee:	4f 77       	andi	r20, 0x7F	; 127
    8df0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    8df2:	60 2f       	mov	r22, r16
    8df4:	8c 2f       	mov	r24, r28
    8df6:	81 0f       	add	r24, r17
    8df8:	0e 94 a4 38 	call	0x7148	; 0x7148 <SetFont>
    8dfc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    8dfe:	f3 cf       	rjmp	.-26     	; 0x8de6 <Print+0x12>
	
}
    8e00:	df 91       	pop	r29
    8e02:	cf 91       	pop	r28
    8e04:	1f 91       	pop	r17
    8e06:	0f 91       	pop	r16
    8e08:	08 95       	ret

00008e0a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    8e0a:	40 52       	subi	r20, 0x20	; 32
    8e0c:	0c 94 a4 38 	jmp	0x7148	; 0x7148 <SetFont>

00008e10 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8e10:	0f 93       	push	r16
    8e12:	1f 93       	push	r17
    8e14:	cf 93       	push	r28
    8e16:	df 93       	push	r29
    8e18:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8e1a:	c0 e0       	ldi	r28, 0x00	; 0
    8e1c:	d0 e0       	ldi	r29, 0x00	; 0
    8e1e:	c0 17       	cp	r28, r16
    8e20:	d1 07       	cpc	r29, r17
    8e22:	44 f4       	brge	.+16     	; 0x8e34 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8e24:	0e 94 be 38 	call	0x717c	; 0x717c <GetVsyncFlag>
    8e28:	88 23       	and	r24, r24
    8e2a:	e1 f3       	breq	.-8      	; 0x8e24 <WaitVsync+0x14>
		ClearVsyncFlag();		
    8e2c:	0e 94 c2 38 	call	0x7184	; 0x7184 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8e30:	21 96       	adiw	r28, 0x01	; 1
    8e32:	f5 cf       	rjmp	.-22     	; 0x8e1e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8e34:	df 91       	pop	r29
    8e36:	cf 91       	pop	r28
    8e38:	1f 91       	pop	r17
    8e3a:	0f 91       	pop	r16
    8e3c:	08 95       	ret

00008e3e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8e3e:	80 93 bb 0b 	sts	0x0BBB, r24
	currFadeFrame=0;
    8e42:	10 92 bf 0b 	sts	0x0BBF, r1
	fadeActive=true;
    8e46:	81 e0       	ldi	r24, 0x01	; 1
    8e48:	80 93 be 0b 	sts	0x0BBE, r24
		
	if(blocking){
    8e4c:	66 23       	and	r22, r22
    8e4e:	21 f0       	breq	.+8      	; 0x8e58 <doFade+0x1a>
		while(fadeActive==true);
    8e50:	80 91 be 0b 	lds	r24, 0x0BBE
    8e54:	81 11       	cpse	r24, r1
    8e56:	fc cf       	rjmp	.-8      	; 0x8e50 <doFade+0x12>
    8e58:	08 95       	ret

00008e5a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8e5a:	81 11       	cpse	r24, r1
    8e5c:	03 c0       	rjmp	.+6      	; 0x8e64 <FadeIn+0xa>
		DDRC=0xff;
    8e5e:	8f ef       	ldi	r24, 0xFF	; 255
    8e60:	87 b9       	out	0x07, r24	; 7
		return;
    8e62:	08 95       	ret
	}
	fadeStep=1;
    8e64:	91 e0       	ldi	r25, 0x01	; 1
    8e66:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=1;
    8e6a:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    8e6e:	0c 94 1f 47 	jmp	0x8e3e	; 0x8e3e <doFade>

00008e72 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8e72:	81 11       	cpse	r24, r1
    8e74:	02 c0       	rjmp	.+4      	; 0x8e7a <FadeOut+0x8>
		DDRC=0;
    8e76:	17 b8       	out	0x07, r1	; 7
		return;
    8e78:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8e7a:	9c e0       	ldi	r25, 0x0C	; 12
    8e7c:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=-1;
    8e80:	9f ef       	ldi	r25, 0xFF	; 255
    8e82:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    8e86:	0c 94 1f 47 	jmp	0x8e3e	; 0x8e3e <doFade>

00008e8a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8e8a:	80 91 be 0b 	lds	r24, 0x0BBE
    8e8e:	88 23       	and	r24, r24
    8e90:	01 f1       	breq	.+64     	; 0x8ed2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    8e92:	80 91 bf 0b 	lds	r24, 0x0BBF
    8e96:	81 11       	cpse	r24, r1
    8e98:	19 c0       	rjmp	.+50     	; 0x8ecc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8e9a:	80 91 bb 0b 	lds	r24, 0x0BBB
    8e9e:	80 93 bf 0b 	sts	0x0BBF, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8ea2:	e0 91 c0 0b 	lds	r30, 0x0BC0
    8ea6:	f0 e0       	ldi	r31, 0x00	; 0
    8ea8:	e9 52       	subi	r30, 0x29	; 41
    8eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    8eac:	e4 91       	lpm	r30, Z
    8eae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8eb0:	90 91 bc 0b 	lds	r25, 0x0BBC
    8eb4:	80 91 c0 0b 	lds	r24, 0x0BC0
    8eb8:	89 0f       	add	r24, r25
    8eba:	80 93 c0 0b 	sts	0x0BC0, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8ebe:	88 23       	and	r24, r24
    8ec0:	11 f0       	breq	.+4      	; 0x8ec6 <ProcessFading+0x3c>
    8ec2:	8d 30       	cpi	r24, 0x0D	; 13
    8ec4:	31 f4       	brne	.+12     	; 0x8ed2 <ProcessFading+0x48>
				fadeActive=false;
    8ec6:	10 92 be 0b 	sts	0x0BBE, r1
    8eca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8ecc:	81 50       	subi	r24, 0x01	; 1
    8ece:	80 93 bf 0b 	sts	0x0BBF, r24
    8ed2:	08 95       	ret

00008ed4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8ed4:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <ProcessFading>
		ProcessSprites();
    8ed8:	0c 94 14 45 	jmp	0x8a28	; 0x8a28 <ProcessSprites>

00008edc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    8edc:	cf 93       	push	r28
    8ede:	df 93       	push	r29
    8ee0:	fc 01       	movw	r30, r24
    8ee2:	eb 01       	movw	r28, r22
	*looped = 0;
    8ee4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    8ee6:	93 81       	ldd	r25, Z+3	; 0x03
    8ee8:	9f 5f       	subi	r25, 0xFF	; 255
    8eea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8eec:	22 81       	ldd	r18, Z+2	; 0x02
    8eee:	80 81       	ld	r24, Z
    8ef0:	92 17       	cp	r25, r18
    8ef2:	70 f0       	brcs	.+28     	; 0x8f10 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    8ef4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8ef6:	90 e0       	ldi	r25, 0x00	; 0
    8ef8:	01 96       	adiw	r24, 0x01	; 1
    8efa:	21 81       	ldd	r18, Z+1	; 0x01
    8efc:	62 2f       	mov	r22, r18
    8efe:	70 e0       	ldi	r23, 0x00	; 0
    8f00:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    8f04:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    8f06:	81 11       	cpse	r24, r1
    8f08:	02 c0       	rjmp	.+4      	; 0x8f0e <LBGetNextFrame+0x32>
    8f0a:	81 e0       	ldi	r24, 0x01	; 1
    8f0c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    8f0e:	80 81       	ld	r24, Z
    8f10:	e8 0f       	add	r30, r24
    8f12:	f1 1d       	adc	r31, r1
    8f14:	e8 0f       	add	r30, r24
    8f16:	f1 1d       	adc	r31, r1
    8f18:	84 81       	ldd	r24, Z+4	; 0x04
    8f1a:	95 81       	ldd	r25, Z+5	; 0x05
}
    8f1c:	df 91       	pop	r29
    8f1e:	cf 91       	pop	r28
    8f20:	08 95       	ret

00008f22 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    8f22:	0f 93       	push	r16
    8f24:	1f 93       	push	r17
    8f26:	cf 93       	push	r28
    8f28:	df 93       	push	r29
    8f2a:	1f 92       	push	r1
    8f2c:	cd b7       	in	r28, 0x3d	; 61
    8f2e:	de b7       	in	r29, 0x3e	; 62
    8f30:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    8f32:	86 2f       	mov	r24, r22
    8f34:	69 83       	std	Y+1, r22	; 0x01
    8f36:	0e 94 c8 38 	call	0x7190	; 0x7190 <ReadJoypad>
    8f3a:	d8 01       	movw	r26, r16
    8f3c:	15 96       	adiw	r26, 0x05	; 5
    8f3e:	9c 93       	st	X, r25
    8f40:	8e 93       	st	-X, r24
    8f42:	14 97       	sbiw	r26, 0x04	; 4
    8f44:	69 81       	ldd	r22, Y+1	; 0x01
    8f46:	e6 2f       	mov	r30, r22
    8f48:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    8f4a:	00 97       	sbiw	r24, 0x00	; 0
    8f4c:	51 f0       	breq	.+20     	; 0x8f62 <LBGetJoyPadState+0x40>
    8f4e:	df 01       	movw	r26, r30
    8f50:	aa 0f       	add	r26, r26
    8f52:	bb 1f       	adc	r27, r27
    8f54:	a8 5c       	subi	r26, 0xC8	; 200
    8f56:	b4 4f       	sbci	r27, 0xF4	; 244
    8f58:	2d 91       	ld	r18, X+
    8f5a:	3c 91       	ld	r19, X
    8f5c:	82 17       	cp	r24, r18
    8f5e:	93 07       	cpc	r25, r19
    8f60:	21 f0       	breq	.+8      	; 0x8f6a <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    8f62:	d8 01       	movw	r26, r16
    8f64:	16 96       	adiw	r26, 0x06	; 6
    8f66:	1c 92       	st	X, r1
    8f68:	07 c0       	rjmp	.+14     	; 0x8f78 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    8f6a:	d8 01       	movw	r26, r16
    8f6c:	16 96       	adiw	r26, 0x06	; 6
    8f6e:	2c 91       	ld	r18, X
    8f70:	16 97       	sbiw	r26, 0x06	; 6
    8f72:	2f 5f       	subi	r18, 0xFF	; 255
    8f74:	16 96       	adiw	r26, 0x06	; 6
    8f76:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    8f78:	ee 0f       	add	r30, r30
    8f7a:	ff 1f       	adc	r31, r31
    8f7c:	e8 5c       	subi	r30, 0xC8	; 200
    8f7e:	f4 4f       	sbci	r31, 0xF4	; 244
    8f80:	20 81       	ld	r18, Z
    8f82:	31 81       	ldd	r19, Z+1	; 0x01
    8f84:	a9 01       	movw	r20, r18
    8f86:	40 95       	com	r20
    8f88:	50 95       	com	r21
    8f8a:	48 23       	and	r20, r24
    8f8c:	59 23       	and	r21, r25
    8f8e:	d8 01       	movw	r26, r16
    8f90:	11 96       	adiw	r26, 0x01	; 1
    8f92:	5c 93       	st	X, r21
    8f94:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    8f96:	ac 01       	movw	r20, r24
    8f98:	40 95       	com	r20
    8f9a:	50 95       	com	r21
    8f9c:	24 23       	and	r18, r20
    8f9e:	35 23       	and	r19, r21
    8fa0:	13 96       	adiw	r26, 0x03	; 3
    8fa2:	3c 93       	st	X, r19
    8fa4:	2e 93       	st	-X, r18
    8fa6:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    8fa8:	91 83       	std	Z+1, r25	; 0x01
    8faa:	80 83       	st	Z, r24
}
    8fac:	0f 90       	pop	r0
    8fae:	df 91       	pop	r29
    8fb0:	cf 91       	pop	r28
    8fb2:	1f 91       	pop	r17
    8fb4:	0f 91       	pop	r16
    8fb6:	08 95       	ret

00008fb8 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    8fb8:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    8fba:	fb 01       	movw	r30, r22
    8fbc:	2e 2f       	mov	r18, r30
    8fbe:	23 1b       	sub	r18, r19
    8fc0:	24 17       	cp	r18, r20
    8fc2:	28 f4       	brcc	.+10     	; 0x8fce <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    8fc4:	21 91       	ld	r18, Z+
    8fc6:	dc 01       	movw	r26, r24
    8fc8:	2d 93       	st	X+, r18
    8fca:	cd 01       	movw	r24, r26
    8fcc:	f7 cf       	rjmp	.-18     	; 0x8fbc <LBCopyChars+0x4>
	}
}
    8fce:	08 95       	ret

00008fd0 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    8fd0:	af 92       	push	r10
    8fd2:	bf 92       	push	r11
    8fd4:	cf 92       	push	r12
    8fd6:	df 92       	push	r13
    8fd8:	ef 92       	push	r14
    8fda:	ff 92       	push	r15
    8fdc:	0f 93       	push	r16
    8fde:	1f 93       	push	r17
    8fe0:	cf 93       	push	r28
    8fe2:	df 93       	push	r29
    8fe4:	1f 92       	push	r1
    8fe6:	cd b7       	in	r28, 0x3d	; 61
    8fe8:	de b7       	in	r29, 0x3e	; 62
    8fea:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    8fec:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    8fee:	c6 2e       	mov	r12, r22
    8ff0:	d1 2c       	mov	r13, r1
    8ff2:	90 e0       	ldi	r25, 0x00	; 0
    8ff4:	5c 01       	movw	r10, r24
    8ff6:	a4 1a       	sub	r10, r20
    8ff8:	b5 0a       	sbc	r11, r21
    8ffa:	80 2f       	mov	r24, r16
    8ffc:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    8ffe:	82 17       	cp	r24, r18
    9000:	60 f4       	brcc	.+24     	; 0x901a <LBPrintStr+0x4a>
    9002:	c5 01       	movw	r24, r10
    9004:	80 0f       	add	r24, r16
    9006:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    9008:	f8 01       	movw	r30, r16
    900a:	41 91       	ld	r20, Z+
    900c:	8f 01       	movw	r16, r30
    900e:	b6 01       	movw	r22, r12
    9010:	29 83       	std	Y+1, r18	; 0x01
    9012:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <PrintChar>
    9016:	29 81       	ldd	r18, Y+1	; 0x01
    9018:	f0 cf       	rjmp	.-32     	; 0x8ffa <LBPrintStr+0x2a>
	}
}
    901a:	0f 90       	pop	r0
    901c:	df 91       	pop	r29
    901e:	cf 91       	pop	r28
    9020:	1f 91       	pop	r17
    9022:	0f 91       	pop	r16
    9024:	ff 90       	pop	r15
    9026:	ef 90       	pop	r14
    9028:	df 90       	pop	r13
    902a:	cf 90       	pop	r12
    902c:	bf 90       	pop	r11
    902e:	af 90       	pop	r10
    9030:	08 95       	ret

00009032 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9032:	af 92       	push	r10
    9034:	cf 92       	push	r12
    9036:	ef 92       	push	r14
    9038:	ff 92       	push	r15
    903a:	0f 93       	push	r16
    903c:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    903e:	70 e0       	ldi	r23, 0x00	; 0
    9040:	f1 2c       	mov	r15, r1
    9042:	fb 01       	movw	r30, r22
    9044:	e2 0f       	add	r30, r18
    9046:	f1 1d       	adc	r31, r1
    9048:	ee 16       	cp	r14, r30
    904a:	ff 06       	cpc	r15, r31
    904c:	a4 f4       	brge	.+40     	; 0x9076 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    904e:	ea 0c       	add	r14, r10
    9050:	f1 1c       	adc	r15, r1
    9052:	6e 15       	cp	r22, r14
    9054:	7f 05       	cpc	r23, r15
    9056:	7c f4       	brge	.+30     	; 0x9076 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9058:	28 2f       	mov	r18, r24
    905a:	30 e0       	ldi	r19, 0x00	; 0
    905c:	10 e0       	ldi	r17, 0x00	; 0
    905e:	c9 01       	movw	r24, r18
    9060:	84 0f       	add	r24, r20
    9062:	91 1d       	adc	r25, r1
    9064:	08 17       	cp	r16, r24
    9066:	19 07       	cpc	r17, r25
    9068:	34 f4       	brge	.+12     	; 0x9076 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    906a:	0c 0d       	add	r16, r12
    906c:	11 1d       	adc	r17, r1
    906e:	81 e0       	ldi	r24, 0x01	; 1
    9070:	20 17       	cp	r18, r16
    9072:	31 07       	cpc	r19, r17
    9074:	0c f0       	brlt	.+2      	; 0x9078 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9076:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9078:	1f 91       	pop	r17
    907a:	0f 91       	pop	r16
    907c:	ff 90       	pop	r15
    907e:	ef 90       	pop	r14
    9080:	cf 90       	pop	r12
    9082:	af 90       	pop	r10
    9084:	08 95       	ret

00009086 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    9086:	2f 92       	push	r2
    9088:	3f 92       	push	r3
    908a:	4f 92       	push	r4
    908c:	5f 92       	push	r5
    908e:	6f 92       	push	r6
    9090:	7f 92       	push	r7
    9092:	8f 92       	push	r8
    9094:	9f 92       	push	r9
    9096:	af 92       	push	r10
    9098:	bf 92       	push	r11
    909a:	cf 92       	push	r12
    909c:	df 92       	push	r13
    909e:	ef 92       	push	r14
    90a0:	ff 92       	push	r15
    90a2:	0f 93       	push	r16
    90a4:	1f 93       	push	r17
    90a6:	cf 93       	push	r28
    90a8:	df 93       	push	r29
    90aa:	00 d0       	rcall	.+0      	; 0x90ac <LBLineIntersect+0x26>
    90ac:	00 d0       	rcall	.+0      	; 0x90ae <LBLineIntersect+0x28>
    90ae:	cd b7       	in	r28, 0x3d	; 61
    90b0:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    90b2:	f1 2c       	mov	r15, r1
    90b4:	8a 2c       	mov	r8, r10
    90b6:	91 2c       	mov	r9, r1
    90b8:	8e 18       	sub	r8, r14
    90ba:	9f 08       	sbc	r9, r15
    90bc:	a8 2e       	mov	r10, r24
    90be:	b1 2c       	mov	r11, r1
    90c0:	24 2e       	mov	r2, r20
    90c2:	31 2c       	mov	r3, r1
    90c4:	2a 18       	sub	r2, r10
    90c6:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    90c8:	10 e0       	ldi	r17, 0x00	; 0
    90ca:	d1 2c       	mov	r13, r1
    90cc:	c0 1a       	sub	r12, r16
    90ce:	d1 0a       	sbc	r13, r17
    90d0:	46 2f       	mov	r20, r22
    90d2:	50 e0       	ldi	r21, 0x00	; 0
    90d4:	5c 83       	std	Y+4, r21	; 0x04
    90d6:	4b 83       	std	Y+3, r20	; 0x03
    90d8:	82 2f       	mov	r24, r18
    90da:	90 e0       	ldi	r25, 0x00	; 0
    90dc:	9a 83       	std	Y+2, r25	; 0x02
    90de:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    90e0:	82 9c       	mul	r8, r2
    90e2:	90 01       	movw	r18, r0
    90e4:	83 9c       	mul	r8, r3
    90e6:	30 0d       	add	r19, r0
    90e8:	92 9c       	mul	r9, r2
    90ea:	30 0d       	add	r19, r0
    90ec:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    90ee:	ca 01       	movw	r24, r20
    90f0:	e9 81       	ldd	r30, Y+1	; 0x01
    90f2:	fa 81       	ldd	r31, Y+2	; 0x02
    90f4:	8e 1b       	sub	r24, r30
    90f6:	9f 0b       	sbc	r25, r31
    90f8:	c8 9e       	mul	r12, r24
    90fa:	b0 01       	movw	r22, r0
    90fc:	c9 9e       	mul	r12, r25
    90fe:	70 0d       	add	r23, r0
    9100:	d8 9e       	mul	r13, r24
    9102:	70 0d       	add	r23, r0
    9104:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9106:	62 0f       	add	r22, r18
    9108:	73 1f       	adc	r23, r19
    910a:	88 27       	eor	r24, r24
    910c:	77 fd       	sbrc	r23, 7
    910e:	80 95       	com	r24
    9110:	98 2f       	mov	r25, r24
    9112:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    9116:	2b 01       	movw	r4, r22
    9118:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    911a:	20 e0       	ldi	r18, 0x00	; 0
    911c:	30 e0       	ldi	r19, 0x00	; 0
    911e:	a9 01       	movw	r20, r18
    9120:	0e 94 4a 61 	call	0xc294	; 0xc294 <__cmpsf2>
    9124:	88 23       	and	r24, r24
    9126:	09 f4       	brne	.+2      	; 0x912a <LBLineIntersect+0xa4>
    9128:	6c c0       	rjmp	.+216    	; 0x9202 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    912a:	4b 81       	ldd	r20, Y+3	; 0x03
    912c:	5c 81       	ldd	r21, Y+4	; 0x04
    912e:	4e 19       	sub	r20, r14
    9130:	5f 09       	sbc	r21, r15
    9132:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9134:	0a 19       	sub	r16, r10
    9136:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9138:	c4 9e       	mul	r12, r20
    913a:	c0 01       	movw	r24, r0
    913c:	c5 9e       	mul	r12, r21
    913e:	90 0d       	add	r25, r0
    9140:	d4 9e       	mul	r13, r20
    9142:	90 0d       	add	r25, r0
    9144:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9146:	80 9e       	mul	r8, r16
    9148:	b0 01       	movw	r22, r0
    914a:	81 9e       	mul	r8, r17
    914c:	70 0d       	add	r23, r0
    914e:	90 9e       	mul	r9, r16
    9150:	70 0d       	add	r23, r0
    9152:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9154:	68 0f       	add	r22, r24
    9156:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9158:	88 27       	eor	r24, r24
    915a:	77 fd       	sbrc	r23, 7
    915c:	80 95       	com	r24
    915e:	98 2f       	mov	r25, r24
    9160:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9164:	a3 01       	movw	r20, r6
    9166:	92 01       	movw	r18, r4
    9168:	0e 94 4e 61 	call	0xc29c	; 0xc29c <__divsf3>
    916c:	4b 01       	movw	r8, r22
    916e:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9170:	20 e0       	ldi	r18, 0x00	; 0
    9172:	30 e0       	ldi	r19, 0x00	; 0
    9174:	a9 01       	movw	r20, r18
    9176:	0e 94 4a 61 	call	0xc294	; 0xc294 <__cmpsf2>
    917a:	87 fd       	sbrc	r24, 7
    917c:	42 c0       	rjmp	.+132    	; 0x9202 <LBLineIntersect+0x17c>
    917e:	20 e0       	ldi	r18, 0x00	; 0
    9180:	30 e0       	ldi	r19, 0x00	; 0
    9182:	40 e8       	ldi	r20, 0x80	; 128
    9184:	5f e3       	ldi	r21, 0x3F	; 63
    9186:	c5 01       	movw	r24, r10
    9188:	b4 01       	movw	r22, r8
    918a:	0e 94 99 62 	call	0xc532	; 0xc532 <__gesf2>
    918e:	18 16       	cp	r1, r24
    9190:	c4 f1       	brlt	.+112    	; 0x9202 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9192:	2e 9c       	mul	r2, r14
    9194:	b0 01       	movw	r22, r0
    9196:	2f 9c       	mul	r2, r15
    9198:	70 0d       	add	r23, r0
    919a:	3e 9c       	mul	r3, r14
    919c:	70 0d       	add	r23, r0
    919e:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    91a0:	29 81       	ldd	r18, Y+1	; 0x01
    91a2:	3a 81       	ldd	r19, Y+2	; 0x02
    91a4:	8b 81       	ldd	r24, Y+3	; 0x03
    91a6:	9c 81       	ldd	r25, Y+4	; 0x04
    91a8:	28 1b       	sub	r18, r24
    91aa:	39 0b       	sbc	r19, r25
    91ac:	20 9f       	mul	r18, r16
    91ae:	c0 01       	movw	r24, r0
    91b0:	21 9f       	mul	r18, r17
    91b2:	90 0d       	add	r25, r0
    91b4:	30 9f       	mul	r19, r16
    91b6:	90 0d       	add	r25, r0
    91b8:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    91ba:	68 0f       	add	r22, r24
    91bc:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    91be:	88 27       	eor	r24, r24
    91c0:	77 fd       	sbrc	r23, 7
    91c2:	80 95       	com	r24
    91c4:	98 2f       	mov	r25, r24
    91c6:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    91ca:	a3 01       	movw	r20, r6
    91cc:	92 01       	movw	r18, r4
    91ce:	0e 94 4e 61 	call	0xc29c	; 0xc29c <__divsf3>
    91d2:	6b 01       	movw	r12, r22
    91d4:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    91d6:	20 e0       	ldi	r18, 0x00	; 0
    91d8:	30 e0       	ldi	r19, 0x00	; 0
    91da:	a9 01       	movw	r20, r18
    91dc:	0e 94 4a 61 	call	0xc294	; 0xc294 <__cmpsf2>
    91e0:	87 fd       	sbrc	r24, 7
    91e2:	0f c0       	rjmp	.+30     	; 0x9202 <LBLineIntersect+0x17c>
    91e4:	11 e0       	ldi	r17, 0x01	; 1
    91e6:	20 e0       	ldi	r18, 0x00	; 0
    91e8:	30 e0       	ldi	r19, 0x00	; 0
    91ea:	40 e8       	ldi	r20, 0x80	; 128
    91ec:	5f e3       	ldi	r21, 0x3F	; 63
    91ee:	c7 01       	movw	r24, r14
    91f0:	b6 01       	movw	r22, r12
    91f2:	0e 94 99 62 	call	0xc532	; 0xc532 <__gesf2>
    91f6:	18 16       	cp	r1, r24
    91f8:	0c f0       	brlt	.+2      	; 0x91fc <LBLineIntersect+0x176>
    91fa:	10 e0       	ldi	r17, 0x00	; 0
    91fc:	81 e0       	ldi	r24, 0x01	; 1
    91fe:	81 27       	eor	r24, r17
    9200:	01 c0       	rjmp	.+2      	; 0x9204 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9202:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    9204:	0f 90       	pop	r0
    9206:	0f 90       	pop	r0
    9208:	0f 90       	pop	r0
    920a:	0f 90       	pop	r0
    920c:	df 91       	pop	r29
    920e:	cf 91       	pop	r28
    9210:	1f 91       	pop	r17
    9212:	0f 91       	pop	r16
    9214:	ff 90       	pop	r15
    9216:	ef 90       	pop	r14
    9218:	df 90       	pop	r13
    921a:	cf 90       	pop	r12
    921c:	bf 90       	pop	r11
    921e:	af 90       	pop	r10
    9220:	9f 90       	pop	r9
    9222:	8f 90       	pop	r8
    9224:	7f 90       	pop	r7
    9226:	6f 90       	pop	r6
    9228:	5f 90       	pop	r5
    922a:	4f 90       	pop	r4
    922c:	3f 90       	pop	r3
    922e:	2f 90       	pop	r2
    9230:	08 95       	ret

00009232 <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9232:	0f 93       	push	r16
    9234:	1f 93       	push	r17
    9236:	cf 93       	push	r28
    9238:	df 93       	push	r29
    923a:	8c 01       	movw	r16, r24
    923c:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    923e:	80 91 36 0b 	lds	r24, 0x0B36
    9242:	90 91 37 0b 	lds	r25, 0x0B37
    9246:	89 2b       	or	r24, r25
    9248:	31 f4       	brne	.+12     	; 0x9256 <LBRandom+0x24>
    924a:	0e 94 08 39 	call	0x7210	; 0x7210 <GetRandomSeed>
    924e:	90 93 37 0b 	sts	0x0B37, r25
    9252:	80 93 36 0b 	sts	0x0B36, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    9256:	90 91 35 0b 	lds	r25, 0x0B35
    925a:	20 91 36 0b 	lds	r18, 0x0B36
    925e:	30 91 37 0b 	lds	r19, 0x0B37
    9262:	09 2e       	mov	r0, r25
    9264:	02 c0       	rjmp	.+4      	; 0x926a <LBRandom+0x38>
    9266:	36 95       	lsr	r19
    9268:	27 95       	ror	r18
    926a:	0a 94       	dec	r0
    926c:	e2 f7       	brpl	.-8      	; 0x9266 <LBRandom+0x34>
	unsigned int delta = to - from;
    926e:	be 01       	movw	r22, r28
    9270:	60 1b       	sub	r22, r16
    9272:	71 0b       	sbc	r23, r17

	shift_count++;
    9274:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    9276:	90 31       	cpi	r25, 0x10	; 16
    9278:	18 f4       	brcc	.+6      	; 0x9280 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    927a:	90 93 35 0b 	sts	0x0B35, r25
    927e:	02 c0       	rjmp	.+4      	; 0x9284 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    9280:	10 92 35 0b 	sts	0x0B35, r1

	return from + ((delta + shifted) % delta);
    9284:	cb 01       	movw	r24, r22
    9286:	82 0f       	add	r24, r18
    9288:	93 1f       	adc	r25, r19
    928a:	0e 94 bd 60 	call	0xc17a	; 0xc17a <__udivmodhi4>
}
    928e:	80 0f       	add	r24, r16
    9290:	91 1f       	adc	r25, r17
    9292:	df 91       	pop	r29
    9294:	cf 91       	pop	r28
    9296:	1f 91       	pop	r17
    9298:	0f 91       	pop	r16
    929a:	08 95       	ret

0000929c <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    929c:	cf 93       	push	r28
    929e:	df 93       	push	r29
    92a0:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    92a2:	c0 e0       	ldi	r28, 0x00	; 0
    92a4:	cd 17       	cp	r28, r29
    92a6:	31 f0       	breq	.+12     	; 0x92b4 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    92a8:	8f ef       	ldi	r24, 0xFF	; 255
    92aa:	9f ef       	ldi	r25, 0xFF	; 255
    92ac:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    92b0:	cf 5f       	subi	r28, 0xFF	; 255
    92b2:	f8 cf       	rjmp	.-16     	; 0x92a4 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    92b4:	df 91       	pop	r29
    92b6:	cf 91       	pop	r28
    92b8:	08 95       	ret

000092ba <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    92ba:	28 e8       	ldi	r18, 0x88	; 136
    92bc:	30 e0       	ldi	r19, 0x00	; 0
    92be:	fc 01       	movw	r30, r24
    92c0:	21 93       	st	Z+, r18
    92c2:	31 93       	st	Z+, r19
    92c4:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    92c6:	4e e1       	ldi	r20, 0x1E	; 30
    92c8:	50 e0       	ldi	r21, 0x00	; 0
    92ca:	64 ee       	ldi	r22, 0xE4	; 228
    92cc:	70 e0       	ldi	r23, 0x00	; 0
    92ce:	0c 94 00 63 	jmp	0xc600	; 0xc600 <memcpy_P>

000092d2 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    92d2:	27 e8       	ldi	r18, 0x87	; 135
    92d4:	30 e0       	ldi	r19, 0x00	; 0
    92d6:	fc 01       	movw	r30, r24
    92d8:	21 93       	st	Z+, r18
    92da:	31 93       	st	Z+, r19
    92dc:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    92de:	4e e1       	ldi	r20, 0x1E	; 30
    92e0:	50 e0       	ldi	r21, 0x00	; 0
    92e2:	62 e0       	ldi	r22, 0x02	; 2
    92e4:	71 e0       	ldi	r23, 0x01	; 1
    92e6:	0c 94 00 63 	jmp	0xc600	; 0xc600 <memcpy_P>

000092ea <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    92ea:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    92ec:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    92ee:	14 86       	std	Z+12, r1	; 0x0c
    92f0:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    92f2:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    92f4:	73 e0       	ldi	r23, 0x03	; 3
    92f6:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    92f8:	65 e0       	ldi	r22, 0x05	; 5
    92fa:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    92fc:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    92fe:	48 e9       	ldi	r20, 0x98	; 152
    9300:	58 e6       	ldi	r21, 0x68	; 104
    9302:	56 83       	std	Z+6, r21	; 0x06
    9304:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9306:	25 e9       	ldi	r18, 0x95	; 149
    9308:	38 e6       	ldi	r19, 0x68	; 104
    930a:	30 87       	std	Z+8, r19	; 0x08
    930c:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    930e:	82 e9       	ldi	r24, 0x92	; 146
    9310:	98 e6       	ldi	r25, 0x68	; 104
    9312:	92 87       	std	Z+10, r25	; 0x0a
    9314:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9316:	10 8e       	std	Z+24, r1	; 0x18
    9318:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    931a:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    931c:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    931e:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    9320:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9322:	52 8b       	std	Z+18, r21	; 0x12
    9324:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9326:	34 8b       	std	Z+20, r19	; 0x14
    9328:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    932a:	96 8b       	std	Z+22, r25	; 0x16
    932c:	85 8b       	std	Z+21, r24	; 0x15
    932e:	08 95       	ret

00009330 <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9330:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9332:	88 e7       	ldi	r24, 0x78	; 120
    9334:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9336:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9338:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    933a:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    933c:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    933e:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    9340:	84 e0       	ldi	r24, 0x04	; 4
    9342:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9344:	66 23       	and	r22, r22
    9346:	11 f0       	breq	.+4      	; 0x934c <init_shot_state+0x1c>
    9348:	85 e0       	ldi	r24, 0x05	; 5
    934a:	01 c0       	rjmp	.+2      	; 0x934e <init_shot_state+0x1e>
    934c:	81 e0       	ldi	r24, 0x01	; 1
    934e:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    9350:	80 e0       	ldi	r24, 0x00	; 0
    9352:	90 e0       	ldi	r25, 0x00	; 0
    9354:	a0 e7       	ldi	r26, 0x70	; 112
    9356:	b3 e4       	ldi	r27, 0x43	; 67
    9358:	83 83       	std	Z+3, r24	; 0x03
    935a:	94 83       	std	Z+4, r25	; 0x04
    935c:	a5 83       	std	Z+5, r26	; 0x05
    935e:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    9360:	17 82       	std	Z+7, r1	; 0x07
    9362:	10 86       	std	Z+8, r1	; 0x08
    9364:	11 86       	std	Z+9, r1	; 0x09
    9366:	12 86       	std	Z+10, r1	; 0x0a
    9368:	08 95       	ret

0000936a <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    936a:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    936c:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    936e:	82 e0       	ldi	r24, 0x02	; 2
    9370:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9372:	85 e0       	ldi	r24, 0x05	; 5
    9374:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    9376:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    9378:	66 23       	and	r22, r22
    937a:	19 f0       	breq	.+6      	; 0x9382 <set_shot_animations+0x18>
    937c:	83 ee       	ldi	r24, 0xE3	; 227
    937e:	93 e4       	ldi	r25, 0x43	; 67
    9380:	02 c0       	rjmp	.+4      	; 0x9386 <set_shot_animations+0x1c>
    9382:	86 ee       	ldi	r24, 0xE6	; 230
    9384:	93 e4       	ldi	r25, 0x43	; 67
    9386:	95 8b       	std	Z+21, r25	; 0x15
    9388:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    938a:	66 23       	and	r22, r22
    938c:	19 f0       	breq	.+6      	; 0x9394 <set_shot_animations+0x2a>
    938e:	80 ee       	ldi	r24, 0xE0	; 224
    9390:	93 e4       	ldi	r25, 0x43	; 67
    9392:	02 c0       	rjmp	.+4      	; 0x9398 <set_shot_animations+0x2e>
    9394:	86 ee       	ldi	r24, 0xE6	; 230
    9396:	93 e4       	ldi	r25, 0x43	; 67
    9398:	97 8b       	std	Z+23, r25	; 0x17
    939a:	86 8b       	std	Z+22, r24	; 0x16
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    939c:	82 e0       	ldi	r24, 0x02	; 2
    939e:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    93a0:	85 e0       	ldi	r24, 0x05	; 5
    93a2:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.frame_count = 0;
    93a4:	15 8e       	std	Z+29, r1	; 0x1d
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    93a6:	66 23       	and	r22, r22
    93a8:	19 f0       	breq	.+6      	; 0x93b0 <set_shot_animations+0x46>
    93aa:	8d ed       	ldi	r24, 0xDD	; 221
    93ac:	93 e4       	ldi	r25, 0x43	; 67
    93ae:	02 c0       	rjmp	.+4      	; 0x93b4 <set_shot_animations+0x4a>
    93b0:	86 ee       	ldi	r24, 0xE6	; 230
    93b2:	93 e4       	ldi	r25, 0x43	; 67
    93b4:	97 8f       	std	Z+31, r25	; 0x1f
    93b6:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    93b8:	66 23       	and	r22, r22
    93ba:	19 f0       	breq	.+6      	; 0x93c2 <set_shot_animations+0x58>
    93bc:	8a ed       	ldi	r24, 0xDA	; 218
    93be:	93 e4       	ldi	r25, 0x43	; 67
    93c0:	02 c0       	rjmp	.+4      	; 0x93c6 <set_shot_animations+0x5c>
    93c2:	86 ee       	ldi	r24, 0xE6	; 230
    93c4:	93 e4       	ldi	r25, 0x43	; 67
    93c6:	91 a3       	std	Z+33, r25	; 0x21
    93c8:	80 a3       	std	Z+32, r24	; 0x20
    93ca:	08 95       	ret

000093cc <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    93cc:	0f 93       	push	r16
    93ce:	1f 93       	push	r17
    93d0:	cf 93       	push	r28
    93d2:	df 93       	push	r29
    93d4:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    93d6:	8a e5       	ldi	r24, 0x5A	; 90
    93d8:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    93da:	88 e7       	ldi	r24, 0x78	; 120
    93dc:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    93de:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    93e0:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    93e2:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    93e4:	18 82       	st	Y, r1
	p->shared.speed = 0;
    93e6:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    93e8:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    93ea:	82 e3       	ldi	r24, 0x32	; 50
    93ec:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    93ee:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    93f0:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    93f2:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    93f4:	fe 01       	movw	r30, r28
    93f6:	e0 5b       	subi	r30, 0xB0	; 176
    93f8:	ff 4f       	sbci	r31, 0xFF	; 255
    93fa:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    93fc:	31 96       	adiw	r30, 0x01	; 1
    93fe:	91 e0       	ldi	r25, 0x01	; 1
    9400:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9402:	31 96       	adiw	r30, 0x01	; 1
    9404:	85 e0       	ldi	r24, 0x05	; 5
    9406:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9408:	31 96       	adiw	r30, 0x01	; 1
    940a:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    940c:	31 96       	adiw	r30, 0x01	; 1
    940e:	71 83       	std	Z+1, r23	; 0x01
    9410:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9412:	36 96       	adiw	r30, 0x06	; 6
    9414:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9416:	31 96       	adiw	r30, 0x01	; 1
    9418:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    941a:	31 96       	adiw	r30, 0x01	; 1
    941c:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    941e:	31 96       	adiw	r30, 0x01	; 1
    9420:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9422:	31 96       	adiw	r30, 0x01	; 1
    9424:	51 83       	std	Z+1, r21	; 0x01
    9426:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9428:	36 96       	adiw	r30, 0x06	; 6
    942a:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    942c:	31 96       	adiw	r30, 0x01	; 1
    942e:	93 e0       	ldi	r25, 0x03	; 3
    9430:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9432:	31 96       	adiw	r30, 0x01	; 1
    9434:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9436:	31 96       	adiw	r30, 0x01	; 1
    9438:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    943a:	31 96       	adiw	r30, 0x01	; 1
    943c:	85 ef       	ldi	r24, 0xF5	; 245
    943e:	93 e4       	ldi	r25, 0x43	; 67
    9440:	91 83       	std	Z+1, r25	; 0x01
    9442:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9444:	32 96       	adiw	r30, 0x02	; 2
    9446:	8f ee       	ldi	r24, 0xEF	; 239
    9448:	93 e4       	ldi	r25, 0x43	; 67
    944a:	91 83       	std	Z+1, r25	; 0x01
    944c:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    944e:	32 96       	adiw	r30, 0x02	; 2
    9450:	89 ee       	ldi	r24, 0xE9	; 233
    9452:	93 e4       	ldi	r25, 0x43	; 67
    9454:	91 83       	std	Z+1, r25	; 0x01
    9456:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9458:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    945a:	8e 01       	movw	r16, r28
    945c:	04 5d       	subi	r16, 0xD4	; 212
    945e:	1f 4f       	sbci	r17, 0xFF	; 255
    9460:	60 e0       	ldi	r22, 0x00	; 0
    9462:	c8 01       	movw	r24, r16
    9464:	0e 94 98 49 	call	0x9330	; 0x9330 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9468:	60 e0       	ldi	r22, 0x00	; 0
    946a:	c8 01       	movw	r24, r16
    946c:	0e 94 b5 49 	call	0x936a	; 0x936a <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9470:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    9472:	1d 8e       	std	Y+29, r1	; 0x1d
    9474:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    9476:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    9478:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    947a:	1c a2       	std	Y+36, r1	; 0x24
    947c:	1d a2       	std	Y+37, r1	; 0x25
    947e:	1e a2       	std	Y+38, r1	; 0x26
    9480:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    9482:	18 a6       	std	Y+40, r1	; 0x28
    9484:	19 a6       	std	Y+41, r1	; 0x29
    9486:	1a a6       	std	Y+42, r1	; 0x2a
    9488:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    948a:	1f 8e       	std	Y+31, r1	; 0x1f
    948c:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    948e:	19 a2       	std	Y+33, r1	; 0x21
    9490:	18 a2       	std	Y+32, r1	; 0x20
}
    9492:	df 91       	pop	r29
    9494:	cf 91       	pop	r28
    9496:	1f 91       	pop	r17
    9498:	0f 91       	pop	r16
    949a:	08 95       	ret

0000949c <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    949c:	fc 01       	movw	r30, r24
    949e:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    94a0:	60 e0       	ldi	r22, 0x00	; 0
    94a2:	8c 96       	adiw	r24, 0x2c	; 44
    94a4:	0c 94 98 49 	jmp	0x9330	; 0x9330 <init_shot_state>

000094a8 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    94a8:	e8 e0       	ldi	r30, 0x08	; 8
    94aa:	fc e0       	ldi	r31, 0x0C	; 12
    94ac:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    94ae:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    94b0:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    94b2:	49 e1       	ldi	r20, 0x19	; 25
    94b4:	54 e4       	ldi	r21, 0x44	; 68
    94b6:	65 e2       	ldi	r22, 0x25	; 37
    94b8:	74 e4       	ldi	r23, 0x44	; 68
    94ba:	85 e2       	ldi	r24, 0x25	; 37
    94bc:	9c e0       	ldi	r25, 0x0C	; 12
    94be:	0e 94 e6 49 	call	0x93cc	; 0x93cc <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    94c2:	41 e0       	ldi	r20, 0x01	; 1
    94c4:	54 e4       	ldi	r21, 0x44	; 68
    94c6:	6d e0       	ldi	r22, 0x0D	; 13
    94c8:	74 e4       	ldi	r23, 0x44	; 68
    94ca:	89 e8       	ldi	r24, 0x89	; 137
    94cc:	9f e0       	ldi	r25, 0x0F	; 15
    94ce:	0c 94 e6 49 	jmp	0x93cc	; 0x93cc <init_player>

000094d2 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    94d2:	cf 93       	push	r28
    94d4:	df 93       	push	r29
    94d6:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    94d8:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    94da:	6a 89       	ldd	r22, Y+18	; 0x12
    94dc:	70 e0       	ldi	r23, 0x00	; 0
    94de:	80 e0       	ldi	r24, 0x00	; 0
    94e0:	90 e0       	ldi	r25, 0x00	; 0
    94e2:	0e 94 e7 61 	call	0xc3ce	; 0xc3ce <__floatunsisf>
    94e6:	6b 83       	std	Y+3, r22	; 0x03
    94e8:	7c 83       	std	Y+4, r23	; 0x04
    94ea:	8d 83       	std	Y+5, r24	; 0x05
    94ec:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    94ee:	6b 89       	ldd	r22, Y+19	; 0x13
    94f0:	70 e0       	ldi	r23, 0x00	; 0
    94f2:	80 e0       	ldi	r24, 0x00	; 0
    94f4:	90 e0       	ldi	r25, 0x00	; 0
    94f6:	0e 94 e7 61 	call	0xc3ce	; 0xc3ce <__floatunsisf>
    94fa:	6f 83       	std	Y+7, r22	; 0x07
    94fc:	78 87       	std	Y+8, r23	; 0x08
    94fe:	89 87       	std	Y+9, r24	; 0x09
    9500:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    9502:	18 82       	st	Y, r1
	player->shared.speed = 0;
    9504:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    9506:	1a 82       	std	Y+2, r1	; 0x02
	
}
    9508:	df 91       	pop	r29
    950a:	cf 91       	pop	r28
    950c:	08 95       	ret

0000950e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    950e:	cf 93       	push	r28
    9510:	df 93       	push	r29
    9512:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9514:	bc 01       	movw	r22, r24
    9516:	88 81       	ld	r24, Y
    9518:	99 81       	ldd	r25, Y+1	; 0x01
    951a:	0e 94 26 3a 	call	0x744c	; 0x744c <EepromReadBlock>
	if (status == 0x03)
    951e:	83 30       	cpi	r24, 0x03	; 3
    9520:	29 f4       	brne	.+10     	; 0x952c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9522:	ce 01       	movw	r24, r28
	}
}
    9524:	df 91       	pop	r29
    9526:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9528:	0c 94 b9 39 	jmp	0x7372	; 0x7372 <EepromWriteBlock>
	}
}
    952c:	df 91       	pop	r29
    952e:	cf 91       	pop	r28
    9530:	08 95       	ret

00009532 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9532:	61 e0       	ldi	r22, 0x01	; 1
    9534:	83 e0       	ldi	r24, 0x03	; 3
    9536:	0e 94 39 47 	call	0x8e72	; 0x8e72 <FadeOut>
	ClearVram();
    953a:	0e 94 9a 38 	call	0x7134	; 0x7134 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    953e:	60 e0       	ldi	r22, 0x00	; 0
    9540:	83 e0       	ldi	r24, 0x03	; 3
    9542:	0c 94 2d 47 	jmp	0x8e5a	; 0x8e5a <FadeIn>

00009546 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9546:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9548:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    954a:	40 e0       	ldi	r20, 0x00	; 0
    954c:	61 e3       	ldi	r22, 0x31	; 49
    954e:	74 e4       	ldi	r23, 0x44	; 68
    9550:	8c 2f       	mov	r24, r28
    9552:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
    9556:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9558:	ca 30       	cpi	r28, 0x0A	; 10
    955a:	b9 f7       	brne	.-18     	; 0x954a <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    955c:	cf 91       	pop	r28
    955e:	08 95       	ret

00009560 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9560:	cf 92       	push	r12
    9562:	df 92       	push	r13
    9564:	ff 92       	push	r15
    9566:	0f 93       	push	r16
    9568:	1f 93       	push	r17
    956a:	cf 93       	push	r28
    956c:	df 93       	push	r29
    956e:	cd b7       	in	r28, 0x3d	; 61
    9570:	de b7       	in	r29, 0x3e	; 62
    9572:	28 97       	sbiw	r28, 0x08	; 8
    9574:	0f b6       	in	r0, 0x3f	; 63
    9576:	f8 94       	cli
    9578:	de bf       	out	0x3e, r29	; 62
    957a:	0f be       	out	0x3f, r0	; 63
    957c:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    957e:	90 91 34 0c 	lds	r25, 0x0C34
    9582:	80 91 98 0f 	lds	r24, 0x0F98
    9586:	98 17       	cp	r25, r24
    9588:	28 f4       	brcc	.+10     	; 0x9594 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    958a:	e5 e2       	ldi	r30, 0x25	; 37
    958c:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    958e:	a9 e8       	ldi	r26, 0x89	; 137
    9590:	bf e0       	ldi	r27, 0x0F	; 15
    9592:	04 c0       	rjmp	.+8      	; 0x959c <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9594:	e9 e8       	ldi	r30, 0x89	; 137
    9596:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9598:	a5 e2       	ldi	r26, 0x25	; 37
    959a:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    959c:	1b 96       	adiw	r26, 0x0b	; 11
    959e:	8c 91       	ld	r24, X
    95a0:	1b 97       	sbiw	r26, 0x0b	; 11
    95a2:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    95a4:	83 85       	ldd	r24, Z+11	; 0x0b
    95a6:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    95a8:	1f 96       	adiw	r26, 0x0f	; 15
    95aa:	8c 91       	ld	r24, X
    95ac:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    95ae:	97 85       	ldd	r25, Z+15	; 0x0f
    95b0:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    95b2:	f8 2e       	mov	r15, r24
    95b4:	f9 1a       	sub	r15, r25
    95b6:	00 e0       	ldi	r16, 0x00	; 0
    95b8:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    95ba:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    95bc:	81 11       	cpse	r24, r1
    95be:	08 c0       	rjmp	.+16     	; 0x95d0 <save_score+0x70>
    95c0:	f8 01       	movw	r30, r16
    95c2:	ef 53       	subi	r30, 0x3F	; 63
    95c4:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    95c6:	94 81       	ldd	r25, Z+4	; 0x04
    95c8:	25 81       	ldd	r18, Z+5	; 0x05
    95ca:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    95cc:	9f 15       	cp	r25, r15
    95ce:	d0 f4       	brcc	.+52     	; 0x9604 <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    95d0:	44 e0       	ldi	r20, 0x04	; 4
    95d2:	c8 01       	movw	r24, r16
    95d4:	8d 53       	subi	r24, 0x3D	; 61
    95d6:	94 4f       	sbci	r25, 0xF4	; 244
    95d8:	6c 01       	movw	r12, r24
    95da:	bc 01       	movw	r22, r24
    95dc:	ce 01       	movw	r24, r28
    95de:	05 96       	adiw	r24, 0x05	; 5
    95e0:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    95e4:	44 e0       	ldi	r20, 0x04	; 4
    95e6:	be 01       	movw	r22, r28
    95e8:	6f 5f       	subi	r22, 0xFF	; 255
    95ea:	7f 4f       	sbci	r23, 0xFF	; 255
    95ec:	c6 01       	movw	r24, r12
    95ee:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    95f2:	44 e0       	ldi	r20, 0x04	; 4
    95f4:	be 01       	movw	r22, r28
    95f6:	6b 5f       	subi	r22, 0xFB	; 251
    95f8:	7f 4f       	sbci	r23, 0xFF	; 255
    95fa:	ce 01       	movw	r24, r28
    95fc:	01 96       	adiw	r24, 0x01	; 1
    95fe:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
				saved = 1;
    9602:	81 e0       	ldi	r24, 0x01	; 1
    9604:	0c 5f       	subi	r16, 0xFC	; 252
    9606:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    9608:	0c 31       	cpi	r16, 0x1C	; 28
    960a:	11 05       	cpc	r17, r1
    960c:	b9 f6       	brne	.-82     	; 0x95bc <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    960e:	81 ec       	ldi	r24, 0xC1	; 193
    9610:	9b e0       	ldi	r25, 0x0B	; 11
    9612:	0e 94 b9 39 	call	0x7372	; 0x7372 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    9616:	28 96       	adiw	r28, 0x08	; 8
    9618:	0f b6       	in	r0, 0x3f	; 63
    961a:	f8 94       	cli
    961c:	de bf       	out	0x3e, r29	; 62
    961e:	0f be       	out	0x3f, r0	; 63
    9620:	cd bf       	out	0x3d, r28	; 61
    9622:	df 91       	pop	r29
    9624:	cf 91       	pop	r28
    9626:	1f 91       	pop	r17
    9628:	0f 91       	pop	r16
    962a:	ff 90       	pop	r15
    962c:	df 90       	pop	r13
    962e:	cf 90       	pop	r12
    9630:	08 95       	ret

00009632 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    9632:	0f 93       	push	r16
    9634:	1f 93       	push	r17
    9636:	cf 93       	push	r28
    9638:	df 93       	push	r29
    963a:	8c 01       	movw	r16, r24
    963c:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    963e:	88 81       	ld	r24, Y
    9640:	81 30       	cpi	r24, 0x01	; 1
    9642:	69 f1       	breq	.+90     	; 0x969e <position_shot+0x6c>
    9644:	98 f0       	brcs	.+38     	; 0x966c <position_shot+0x3a>
    9646:	82 30       	cpi	r24, 0x02	; 2
    9648:	f1 f1       	breq	.+124    	; 0x96c6 <position_shot+0x94>
    964a:	83 30       	cpi	r24, 0x03	; 3
    964c:	09 f0       	breq	.+2      	; 0x9650 <position_shot+0x1e>
    964e:	59 c0       	rjmp	.+178    	; 0x9702 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    9650:	f8 01       	movw	r30, r16
    9652:	83 81       	ldd	r24, Z+3	; 0x03
    9654:	94 81       	ldd	r25, Z+4	; 0x04
    9656:	a5 81       	ldd	r26, Z+5	; 0x05
    9658:	b6 81       	ldd	r27, Z+6	; 0x06
    965a:	8b 83       	std	Y+3, r24	; 0x03
    965c:	9c 83       	std	Y+4, r25	; 0x04
    965e:	ad 83       	std	Y+5, r26	; 0x05
    9660:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    9662:	20 e0       	ldi	r18, 0x00	; 0
    9664:	30 e0       	ldi	r19, 0x00	; 0
    9666:	40 e8       	ldi	r20, 0x80	; 128
    9668:	50 e4       	ldi	r21, 0x40	; 64
    966a:	41 c0       	rjmp	.+130    	; 0x96ee <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    966c:	20 e0       	ldi	r18, 0x00	; 0
    966e:	30 e0       	ldi	r19, 0x00	; 0
    9670:	40 e8       	ldi	r20, 0x80	; 128
    9672:	50 e4       	ldi	r21, 0x40	; 64
    9674:	f8 01       	movw	r30, r16
    9676:	63 81       	ldd	r22, Z+3	; 0x03
    9678:	74 81       	ldd	r23, Z+4	; 0x04
    967a:	85 81       	ldd	r24, Z+5	; 0x05
    967c:	96 81       	ldd	r25, Z+6	; 0x06
    967e:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    9682:	6b 83       	std	Y+3, r22	; 0x03
    9684:	7c 83       	std	Y+4, r23	; 0x04
    9686:	8d 83       	std	Y+5, r24	; 0x05
    9688:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    968a:	f8 01       	movw	r30, r16
    968c:	87 81       	ldd	r24, Z+7	; 0x07
    968e:	90 85       	ldd	r25, Z+8	; 0x08
    9690:	a1 85       	ldd	r26, Z+9	; 0x09
    9692:	b2 85       	ldd	r27, Z+10	; 0x0a
    9694:	8f 83       	std	Y+7, r24	; 0x07
    9696:	98 87       	std	Y+8, r25	; 0x08
    9698:	a9 87       	std	Y+9, r26	; 0x09
    969a:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    969c:	32 c0       	rjmp	.+100    	; 0x9702 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    969e:	20 e0       	ldi	r18, 0x00	; 0
    96a0:	30 e0       	ldi	r19, 0x00	; 0
    96a2:	40 e0       	ldi	r20, 0x00	; 0
    96a4:	51 e4       	ldi	r21, 0x41	; 65
    96a6:	f8 01       	movw	r30, r16
    96a8:	63 81       	ldd	r22, Z+3	; 0x03
    96aa:	74 81       	ldd	r23, Z+4	; 0x04
    96ac:	85 81       	ldd	r24, Z+5	; 0x05
    96ae:	96 81       	ldd	r25, Z+6	; 0x06
    96b0:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    96b4:	6b 83       	std	Y+3, r22	; 0x03
    96b6:	7c 83       	std	Y+4, r23	; 0x04
    96b8:	8d 83       	std	Y+5, r24	; 0x05
    96ba:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    96bc:	20 e0       	ldi	r18, 0x00	; 0
    96be:	30 e0       	ldi	r19, 0x00	; 0
    96c0:	40 e8       	ldi	r20, 0x80	; 128
    96c2:	50 e4       	ldi	r21, 0x40	; 64
    96c4:	13 c0       	rjmp	.+38     	; 0x96ec <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    96c6:	20 e0       	ldi	r18, 0x00	; 0
    96c8:	30 e0       	ldi	r19, 0x00	; 0
    96ca:	40 e8       	ldi	r20, 0x80	; 128
    96cc:	50 e4       	ldi	r21, 0x40	; 64
    96ce:	f8 01       	movw	r30, r16
    96d0:	63 81       	ldd	r22, Z+3	; 0x03
    96d2:	74 81       	ldd	r23, Z+4	; 0x04
    96d4:	85 81       	ldd	r24, Z+5	; 0x05
    96d6:	96 81       	ldd	r25, Z+6	; 0x06
    96d8:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    96dc:	6b 83       	std	Y+3, r22	; 0x03
    96de:	7c 83       	std	Y+4, r23	; 0x04
    96e0:	8d 83       	std	Y+5, r24	; 0x05
    96e2:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    96e4:	20 e0       	ldi	r18, 0x00	; 0
    96e6:	30 e0       	ldi	r19, 0x00	; 0
    96e8:	40 e0       	ldi	r20, 0x00	; 0
    96ea:	51 e4       	ldi	r21, 0x41	; 65
    96ec:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    96ee:	67 81       	ldd	r22, Z+7	; 0x07
    96f0:	70 85       	ldd	r23, Z+8	; 0x08
    96f2:	81 85       	ldd	r24, Z+9	; 0x09
    96f4:	92 85       	ldd	r25, Z+10	; 0x0a
    96f6:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    96fa:	6f 83       	std	Y+7, r22	; 0x07
    96fc:	78 87       	std	Y+8, r23	; 0x08
    96fe:	89 87       	std	Y+9, r24	; 0x09
    9700:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    9702:	df 91       	pop	r29
    9704:	cf 91       	pop	r28
    9706:	1f 91       	pop	r17
    9708:	0f 91       	pop	r16
    970a:	08 95       	ret

0000970c <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    970c:	0f 93       	push	r16
    970e:	1f 93       	push	r17
    9710:	cf 93       	push	r28
    9712:	df 93       	push	r29
    9714:	8c 01       	movw	r16, r24
    9716:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    9718:	ac 01       	movw	r20, r24
    971a:	44 5f       	subi	r20, 0xF4	; 244
    971c:	5f 4f       	sbci	r21, 0xFF	; 255
    971e:	23 e0       	ldi	r18, 0x03	; 3
    9720:	6e e0       	ldi	r22, 0x0E	; 14
    9722:	84 e0       	ldi	r24, 0x04	; 4
    9724:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    9728:	42 e9       	ldi	r20, 0x92	; 146
    972a:	52 e0       	ldi	r21, 0x02	; 2
    972c:	6e e0       	ldi	r22, 0x0E	; 14
    972e:	70 e0       	ldi	r23, 0x00	; 0
    9730:	88 e0       	ldi	r24, 0x08	; 8
    9732:	90 e0       	ldi	r25, 0x00	; 0
    9734:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    9738:	ae 01       	movw	r20, r28
    973a:	44 5f       	subi	r20, 0xF4	; 244
    973c:	5f 4f       	sbci	r21, 0xFF	; 255
    973e:	23 e0       	ldi	r18, 0x03	; 3
    9740:	6e e0       	ldi	r22, 0x0E	; 14
    9742:	8d e0       	ldi	r24, 0x0D	; 13
    9744:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    9748:	4f e8       	ldi	r20, 0x8F	; 143
    974a:	52 e0       	ldi	r21, 0x02	; 2
    974c:	6e e0       	ldi	r22, 0x0E	; 14
    974e:	70 e0       	ldi	r23, 0x00	; 0
    9750:	81 e1       	ldi	r24, 0x11	; 17
    9752:	90 e0       	ldi	r25, 0x00	; 0
    9754:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    9758:	21 e0       	ldi	r18, 0x01	; 1
    975a:	f8 01       	movw	r30, r16
    975c:	40 89       	ldd	r20, Z+16	; 0x10
    975e:	6e e0       	ldi	r22, 0x0E	; 14
    9760:	70 e0       	ldi	r23, 0x00	; 0
    9762:	86 e1       	ldi	r24, 0x16	; 22
    9764:	90 e0       	ldi	r25, 0x00	; 0
    9766:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <PrintByte>
	PrintChar(23, 14, '-');
    976a:	4d e2       	ldi	r20, 0x2D	; 45
    976c:	6e e0       	ldi	r22, 0x0E	; 14
    976e:	70 e0       	ldi	r23, 0x00	; 0
    9770:	87 e1       	ldi	r24, 0x17	; 23
    9772:	90 e0       	ldi	r25, 0x00	; 0
    9774:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    9778:	21 e0       	ldi	r18, 0x01	; 1
    977a:	48 89       	ldd	r20, Y+16	; 0x10
    977c:	6e e0       	ldi	r22, 0x0E	; 14
    977e:	70 e0       	ldi	r23, 0x00	; 0
    9780:	8a e1       	ldi	r24, 0x1A	; 26
    9782:	90 e0       	ldi	r25, 0x00	; 0
}
    9784:	df 91       	pop	r29
    9786:	cf 91       	pop	r28
    9788:	1f 91       	pop	r17
    978a:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    978c:	0c 94 b7 46 	jmp	0x8d6e	; 0x8d6e <PrintByte>

00009790 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    9790:	0f 93       	push	r16
    9792:	1f 93       	push	r17
    9794:	cf 93       	push	r28
    9796:	df 93       	push	r29
    9798:	8c 01       	movw	r16, r24
    979a:	eb 01       	movw	r28, r22
    Print(9, 13, (char*) strFinalScore);
    979c:	43 e8       	ldi	r20, 0x83	; 131
    979e:	52 e0       	ldi	r21, 0x02	; 2
    97a0:	6d e0       	ldi	r22, 0x0D	; 13
    97a2:	70 e0       	ldi	r23, 0x00	; 0
    97a4:	89 e0       	ldi	r24, 0x09	; 9
    97a6:	90 e0       	ldi	r25, 0x00	; 0
    97a8:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    97ac:	a8 01       	movw	r20, r16
    97ae:	44 5f       	subi	r20, 0xF4	; 244
    97b0:	5f 4f       	sbci	r21, 0xFF	; 255
    97b2:	23 e0       	ldi	r18, 0x03	; 3
    97b4:	6e e0       	ldi	r22, 0x0E	; 14
    97b6:	84 e0       	ldi	r24, 0x04	; 4
    97b8:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    97bc:	42 e9       	ldi	r20, 0x92	; 146
    97be:	52 e0       	ldi	r21, 0x02	; 2
    97c0:	6e e0       	ldi	r22, 0x0E	; 14
    97c2:	70 e0       	ldi	r23, 0x00	; 0
    97c4:	88 e0       	ldi	r24, 0x08	; 8
    97c6:	90 e0       	ldi	r25, 0x00	; 0
    97c8:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    97cc:	ae 01       	movw	r20, r28
    97ce:	44 5f       	subi	r20, 0xF4	; 244
    97d0:	5f 4f       	sbci	r21, 0xFF	; 255
    97d2:	23 e0       	ldi	r18, 0x03	; 3
    97d4:	6e e0       	ldi	r22, 0x0E	; 14
    97d6:	8d e0       	ldi	r24, 0x0D	; 13
    97d8:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    97dc:	4f e8       	ldi	r20, 0x8F	; 143
    97de:	52 e0       	ldi	r21, 0x02	; 2
    97e0:	6e e0       	ldi	r22, 0x0E	; 14
    97e2:	70 e0       	ldi	r23, 0x00	; 0
    97e4:	81 e1       	ldi	r24, 0x11	; 17
    97e6:	90 e0       	ldi	r25, 0x00	; 0
    97e8:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
    PrintByte(22, 14, winner->score ,true);
    97ec:	21 e0       	ldi	r18, 0x01	; 1
    97ee:	f8 01       	movw	r30, r16
    97f0:	47 85       	ldd	r20, Z+15	; 0x0f
    97f2:	6e e0       	ldi	r22, 0x0E	; 14
    97f4:	70 e0       	ldi	r23, 0x00	; 0
    97f6:	86 e1       	ldi	r24, 0x16	; 22
    97f8:	90 e0       	ldi	r25, 0x00	; 0
    97fa:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <PrintByte>
    PrintChar(23, 14, '-');
    97fe:	4d e2       	ldi	r20, 0x2D	; 45
    9800:	6e e0       	ldi	r22, 0x0E	; 14
    9802:	70 e0       	ldi	r23, 0x00	; 0
    9804:	87 e1       	ldi	r24, 0x17	; 23
    9806:	90 e0       	ldi	r25, 0x00	; 0
    9808:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    980c:	21 e0       	ldi	r18, 0x01	; 1
    980e:	4f 85       	ldd	r20, Y+15	; 0x0f
    9810:	6e e0       	ldi	r22, 0x0E	; 14
    9812:	70 e0       	ldi	r23, 0x00	; 0
    9814:	8a e1       	ldi	r24, 0x1A	; 26
    9816:	90 e0       	ldi	r25, 0x00	; 0
}
    9818:	df 91       	pop	r29
    981a:	cf 91       	pop	r28
    981c:	1f 91       	pop	r17
    981e:	0f 91       	pop	r16
    Print(8, 14, (char*) strOwns);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, (char*) strBy);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    9820:	0c 94 b7 46 	jmp	0x8d6e	; 0x8d6e <PrintByte>

00009824 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    9824:	cf 93       	push	r28
    9826:	df 93       	push	r29
    9828:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    982a:	ac 01       	movw	r20, r24
    982c:	44 5f       	subi	r20, 0xF4	; 244
    982e:	5f 4f       	sbci	r21, 0xFF	; 255
    9830:	23 e0       	ldi	r18, 0x03	; 3
    9832:	60 e0       	ldi	r22, 0x00	; 0
    9834:	8a e0       	ldi	r24, 0x0A	; 10
    9836:	8c 0f       	add	r24, r28
    9838:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    983c:	d0 e0       	ldi	r29, 0x00	; 0
    983e:	47 ed       	ldi	r20, 0xD7	; 215
    9840:	51 e0       	ldi	r21, 0x01	; 1
    9842:	60 e0       	ldi	r22, 0x00	; 0
    9844:	70 e0       	ldi	r23, 0x00	; 0
    9846:	ce 01       	movw	r24, r28
    9848:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(x, 1, (char*) strTotal);
    984c:	40 ed       	ldi	r20, 0xD0	; 208
    984e:	51 e0       	ldi	r21, 0x01	; 1
    9850:	61 e0       	ldi	r22, 0x01	; 1
    9852:	70 e0       	ldi	r23, 0x00	; 0
    9854:	ce 01       	movw	r24, r28
	
}
    9856:	df 91       	pop	r29
    9858:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    985a:	0c 94 ea 46 	jmp	0x8dd4	; 0x8dd4 <Print>

0000985e <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    985e:	0f 93       	push	r16
    9860:	1f 93       	push	r17
    9862:	cf 93       	push	r28
    9864:	df 93       	push	r29
    9866:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    9868:	c6 2f       	mov	r28, r22
    986a:	d0 e0       	ldi	r29, 0x00	; 0
    986c:	28 96       	adiw	r28, 0x08	; 8
    986e:	20 e0       	ldi	r18, 0x00	; 0
    9870:	fc 01       	movw	r30, r24
    9872:	40 89       	ldd	r20, Z+16	; 0x10
    9874:	60 e0       	ldi	r22, 0x00	; 0
    9876:	70 e0       	ldi	r23, 0x00	; 0
    9878:	ce 01       	movw	r24, r28
    987a:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    987e:	20 e0       	ldi	r18, 0x00	; 0
    9880:	f8 01       	movw	r30, r16
    9882:	47 85       	ldd	r20, Z+15	; 0x0f
    9884:	61 e0       	ldi	r22, 0x01	; 1
    9886:	70 e0       	ldi	r23, 0x00	; 0
    9888:	ce 01       	movw	r24, r28
}
    988a:	df 91       	pop	r29
    988c:	cf 91       	pop	r28
    988e:	1f 91       	pop	r17
    9890:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    9892:	0c 94 b7 46 	jmp	0x8d6e	; 0x8d6e <PrintByte>

00009896 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    9896:	cf 93       	push	r28
    9898:	df 93       	push	r29
    989a:	ec 01       	movw	r28, r24
    989c:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    989e:	9d 89       	ldd	r25, Y+21	; 0x15
    98a0:	9a 35       	cpi	r25, 0x5A	; 90
    98a2:	99 f0       	breq	.+38     	; 0x98ca <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    98a4:	91 11       	cpse	r25, r1
    98a6:	0c c0       	rjmp	.+24     	; 0x98c0 <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    98a8:	4e 89       	ldd	r20, Y+22	; 0x16
    98aa:	9f e0       	ldi	r25, 0x0F	; 15
    98ac:	49 9f       	mul	r20, r25
    98ae:	a0 01       	movw	r20, r0
    98b0:	11 24       	eor	r1, r1
    98b2:	43 51       	subi	r20, 0x13	; 19
    98b4:	5e 4f       	sbci	r21, 0xFE	; 254
    98b6:	62 e0       	ldi	r22, 0x02	; 2
    98b8:	70 e0       	ldi	r23, 0x00	; 0
    98ba:	90 e0       	ldi	r25, 0x00	; 0
    98bc:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    98c0:	8d 89       	ldd	r24, Y+21	; 0x15
    98c2:	8f 5f       	subi	r24, 0xFF	; 255
    98c4:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    98c6:	41 e0       	ldi	r20, 0x01	; 1
    98c8:	0a c0       	rjmp	.+20     	; 0x98de <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    98ca:	44 23       	and	r20, r20
    98cc:	41 f0       	breq	.+16     	; 0x98de <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    98ce:	4e ed       	ldi	r20, 0xDE	; 222
    98d0:	51 e0       	ldi	r21, 0x01	; 1
    98d2:	62 e0       	ldi	r22, 0x02	; 2
    98d4:	70 e0       	ldi	r23, 0x00	; 0
    98d6:	90 e0       	ldi	r25, 0x00	; 0
    98d8:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
    98dc:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    98de:	84 2f       	mov	r24, r20
    98e0:	df 91       	pop	r29
    98e2:	cf 91       	pop	r28
    98e4:	08 95       	ret

000098e6 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    98e6:	ef 92       	push	r14
    98e8:	ff 92       	push	r15
    98ea:	0f 93       	push	r16
    98ec:	1f 93       	push	r17
    98ee:	cf 93       	push	r28
    98f0:	df 93       	push	r29
    98f2:	1f 92       	push	r1
    98f4:	cd b7       	in	r28, 0x3d	; 61
    98f6:	de b7       	in	r29, 0x3e	; 62
    98f8:	7c 01       	movw	r14, r24
    98fa:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    98fc:	fc 01       	movw	r30, r24
    98fe:	67 81       	ldd	r22, Z+7	; 0x07
    9900:	70 85       	ldd	r23, Z+8	; 0x08
    9902:	81 85       	ldd	r24, Z+9	; 0x09
    9904:	92 85       	ldd	r25, Z+10	; 0x0a
    9906:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    990a:	46 2f       	mov	r20, r22
    990c:	f7 01       	movw	r30, r14
    990e:	63 81       	ldd	r22, Z+3	; 0x03
    9910:	74 81       	ldd	r23, Z+4	; 0x04
    9912:	85 81       	ldd	r24, Z+5	; 0x05
    9914:	96 81       	ldd	r25, Z+6	; 0x06
    9916:	49 83       	std	Y+1, r20	; 0x01
    9918:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    991c:	02 e0       	ldi	r16, 0x02	; 2
    991e:	22 e0       	ldi	r18, 0x02	; 2
    9920:	49 81       	ldd	r20, Y+1	; 0x01
    9922:	81 2f       	mov	r24, r17
    9924:	0e 94 3a 46 	call	0x8c74	; 0x8c74 <MoveSprite>
}
    9928:	0f 90       	pop	r0
    992a:	df 91       	pop	r29
    992c:	cf 91       	pop	r28
    992e:	1f 91       	pop	r17
    9930:	0f 91       	pop	r16
    9932:	ff 90       	pop	r15
    9934:	ef 90       	pop	r14
    9936:	08 95       	ret

00009938 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    9938:	ef 92       	push	r14
    993a:	ff 92       	push	r15
    993c:	0f 93       	push	r16
    993e:	1f 93       	push	r17
    9940:	cf 93       	push	r28
    9942:	df 93       	push	r29
    9944:	1f 92       	push	r1
    9946:	cd b7       	in	r28, 0x3d	; 61
    9948:	de b7       	in	r29, 0x3e	; 62
    994a:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    994c:	81 89       	ldd	r24, Z+17	; 0x11
    994e:	88 23       	and	r24, r24
    9950:	b9 f0       	breq	.+46     	; 0x9980 <render_shot+0x48>
    9952:	16 2f       	mov	r17, r22
    9954:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    9956:	63 a9       	ldd	r22, Z+51	; 0x33
    9958:	74 a9       	ldd	r23, Z+52	; 0x34
    995a:	85 a9       	ldd	r24, Z+53	; 0x35
    995c:	96 a9       	ldd	r25, Z+54	; 0x36
    995e:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    9962:	46 2f       	mov	r20, r22
    9964:	f7 01       	movw	r30, r14
    9966:	67 a5       	ldd	r22, Z+47	; 0x2f
    9968:	70 a9       	ldd	r23, Z+48	; 0x30
    996a:	81 a9       	ldd	r24, Z+49	; 0x31
    996c:	92 a9       	ldd	r25, Z+50	; 0x32
    996e:	49 83       	std	Y+1, r20	; 0x01
    9970:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    9974:	01 e0       	ldi	r16, 0x01	; 1
    9976:	21 e0       	ldi	r18, 0x01	; 1
    9978:	49 81       	ldd	r20, Y+1	; 0x01
    997a:	81 2f       	mov	r24, r17
    997c:	0e 94 3a 46 	call	0x8c74	; 0x8c74 <MoveSprite>
			sprite_index++;
		}
	}
}
    9980:	0f 90       	pop	r0
    9982:	df 91       	pop	r29
    9984:	cf 91       	pop	r28
    9986:	1f 91       	pop	r17
    9988:	0f 91       	pop	r16
    998a:	ff 90       	pop	r15
    998c:	ef 90       	pop	r14
    998e:	08 95       	ret

00009990 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    9990:	cf 92       	push	r12
    9992:	df 92       	push	r13
    9994:	ef 92       	push	r14
    9996:	ff 92       	push	r15
    9998:	0f 93       	push	r16
    999a:	1f 93       	push	r17
    999c:	cf 93       	push	r28
    999e:	df 93       	push	r29
    99a0:	1f 92       	push	r1
    99a2:	cd b7       	in	r28, 0x3d	; 61
    99a4:	de b7       	in	r29, 0x3e	; 62
    99a6:	8c 01       	movw	r16, r24
    99a8:	0f 5f       	subi	r16, 0xFF	; 255
    99aa:	1f 4f       	sbci	r17, 0xFF	; 255
    99ac:	7c 01       	movw	r14, r24
    99ae:	29 e1       	ldi	r18, 0x19	; 25
    99b0:	e2 0e       	add	r14, r18
    99b2:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    99b4:	8e e1       	ldi	r24, 0x1E	; 30
    99b6:	c8 2e       	mov	r12, r24
    99b8:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    99ba:	f8 01       	movw	r30, r16
    99bc:	82 85       	ldd	r24, Z+10	; 0x0a
    99be:	93 85       	ldd	r25, Z+11	; 0x0b
    99c0:	89 2b       	or	r24, r25
    99c2:	e1 f0       	breq	.+56     	; 0x99fc <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    99c4:	be 01       	movw	r22, r28
    99c6:	6f 5f       	subi	r22, 0xFF	; 255
    99c8:	7f 4f       	sbci	r23, 0xFF	; 255
    99ca:	c8 01       	movw	r24, r16
    99cc:	0e 94 6e 47 	call	0x8edc	; 0x8edc <LBGetNextFrame>
    99d0:	9c 01       	movw	r18, r24
			if (looped)
    99d2:	49 81       	ldd	r20, Y+1	; 0x01
    99d4:	f8 01       	movw	r30, r16
    99d6:	82 85       	ldd	r24, Z+10	; 0x0a
    99d8:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    99da:	b6 01       	movw	r22, r12
    99dc:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    99e0:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    99e2:	44 23       	and	r20, r20
    99e4:	41 f0       	breq	.+16     	; 0x99f6 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    99e6:	40 e0       	ldi	r20, 0x00	; 0
    99e8:	50 e0       	ldi	r21, 0x00	; 0
    99ea:	0e 94 a8 38 	call	0x7150	; 0x7150 <SetTile>
				ta->anims[i].tile_index = 0;
    99ee:	f8 01       	movw	r30, r16
    99f0:	13 86       	std	Z+11, r1	; 0x0b
    99f2:	12 86       	std	Z+10, r1	; 0x0a
    99f4:	03 c0       	rjmp	.+6      	; 0x99fc <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    99f6:	a9 01       	movw	r20, r18
    99f8:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
    99fc:	04 5f       	subi	r16, 0xF4	; 244
    99fe:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    9a00:	0e 15       	cp	r16, r14
    9a02:	1f 05       	cpc	r17, r15
    9a04:	d1 f6       	brne	.-76     	; 0x99ba <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    9a06:	0f 90       	pop	r0
    9a08:	df 91       	pop	r29
    9a0a:	cf 91       	pop	r28
    9a0c:	1f 91       	pop	r17
    9a0e:	0f 91       	pop	r16
    9a10:	ff 90       	pop	r15
    9a12:	ef 90       	pop	r14
    9a14:	df 90       	pop	r13
    9a16:	cf 90       	pop	r12
    9a18:	08 95       	ret

00009a1a <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    9a1a:	ff 92       	push	r15
    9a1c:	0f 93       	push	r16
    9a1e:	1f 93       	push	r17
    9a20:	cf 93       	push	r28
    9a22:	df 93       	push	r29
    9a24:	1f 92       	push	r1
    9a26:	cd b7       	in	r28, 0x3d	; 61
    9a28:	de b7       	in	r29, 0x3e	; 62
    9a2a:	8c 01       	movw	r16, r24
    9a2c:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    9a2e:	fc 01       	movw	r30, r24
    9a30:	84 89       	ldd	r24, Z+20	; 0x14
    9a32:	80 ff       	sbrs	r24, 0
    9a34:	18 c0       	rjmp	.+48     	; 0x9a66 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    9a36:	be 01       	movw	r22, r28
    9a38:	6f 5f       	subi	r22, 0xFF	; 255
    9a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a3c:	c8 01       	movw	r24, r16
    9a3e:	8c 59       	subi	r24, 0x9C	; 156
    9a40:	9f 4f       	sbci	r25, 0xFF	; 255
    9a42:	0e 94 6e 47 	call	0x8edc	; 0x8edc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    9a46:	29 81       	ldd	r18, Y+1	; 0x01
    9a48:	22 23       	and	r18, r18
    9a4a:	09 f4       	brne	.+2      	; 0x9a4e <tank_map+0x34>
    9a4c:	5a c0       	rjmp	.+180    	; 0x9b02 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    9a4e:	f8 01       	movw	r30, r16
    9a50:	84 89       	ldd	r24, Z+20	; 0x14
    9a52:	91 e0       	ldi	r25, 0x01	; 1
    9a54:	98 27       	eor	r25, r24
    9a56:	94 8b       	std	Z+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    9a58:	c8 01       	movw	r24, r16
    9a5a:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9a5e:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    9a60:	8b e2       	ldi	r24, 0x2B	; 43
    9a62:	94 e4       	ldi	r25, 0x44	; 68
    9a64:	4f c0       	rjmp	.+158    	; 0x9b04 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    9a66:	f8 01       	movw	r30, r16
    9a68:	97 89       	ldd	r25, Z+23	; 0x17
    9a6a:	98 37       	cpi	r25, 0x78	; 120
    9a6c:	11 f0       	breq	.+4      	; 0x9a72 <tank_map+0x58>
		{
			player->grace_frame++;
    9a6e:	9f 5f       	subi	r25, 0xFF	; 255
    9a70:	97 8b       	std	Z+23, r25	; 0x17
		}
		switch (player->shared.direction)
    9a72:	f8 01       	movw	r30, r16
    9a74:	90 81       	ld	r25, Z
    9a76:	91 30       	cpi	r25, 0x01	; 1
    9a78:	79 f0       	breq	.+30     	; 0x9a98 <tank_map+0x7e>
    9a7a:	f8 f0       	brcs	.+62     	; 0x9aba <tank_map+0xa0>
    9a7c:	92 30       	cpi	r25, 0x02	; 2
    9a7e:	99 f0       	breq	.+38     	; 0x9aa6 <tank_map+0x8c>
    9a80:	93 30       	cpi	r25, 0x03	; 3
    9a82:	d9 f4       	brne	.+54     	; 0x9aba <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    9a84:	be 01       	movw	r22, r28
    9a86:	6f 5f       	subi	r22, 0xFF	; 255
    9a88:	7f 4f       	sbci	r23, 0xFF	; 255
    9a8a:	c8 01       	movw	r24, r16
    9a8c:	86 5a       	subi	r24, 0xA6	; 166
    9a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a90:	0e 94 6e 47 	call	0x8edc	; 0x8edc <LBGetNextFrame>
    9a94:	41 e0       	ldi	r20, 0x01	; 1
    9a96:	1a c0       	rjmp	.+52     	; 0x9acc <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    9a98:	be 01       	movw	r22, r28
    9a9a:	6f 5f       	subi	r22, 0xFF	; 255
    9a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    9a9e:	c8 01       	movw	r24, r16
    9aa0:	86 5a       	subi	r24, 0xA6	; 166
    9aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    9aa4:	10 c0       	rjmp	.+32     	; 0x9ac6 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    9aa6:	be 01       	movw	r22, r28
    9aa8:	6f 5f       	subi	r22, 0xFF	; 255
    9aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    9aac:	c8 01       	movw	r24, r16
    9aae:	80 5b       	subi	r24, 0xB0	; 176
    9ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    9ab2:	0e 94 6e 47 	call	0x8edc	; 0x8edc <LBGetNextFrame>
    9ab6:	42 e0       	ldi	r20, 0x02	; 2
    9ab8:	09 c0       	rjmp	.+18     	; 0x9acc <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    9aba:	be 01       	movw	r22, r28
    9abc:	6f 5f       	subi	r22, 0xFF	; 255
    9abe:	7f 4f       	sbci	r23, 0xFF	; 255
    9ac0:	c8 01       	movw	r24, r16
    9ac2:	80 5b       	subi	r24, 0xB0	; 176
    9ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    9ac6:	0e 94 6e 47 	call	0x8edc	; 0x8edc <LBGetNextFrame>
    9aca:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    9acc:	f8 01       	movw	r30, r16
    9ace:	27 89       	ldd	r18, Z+23	; 0x17
    9ad0:	28 37       	cpi	r18, 0x78	; 120
    9ad2:	31 f0       	breq	.+12     	; 0x9ae0 <tank_map+0xc6>
    9ad4:	20 91 34 0b 	lds	r18, 0x0B34
    9ad8:	22 23       	and	r18, r18
    9ada:	11 f0       	breq	.+4      	; 0x9ae0 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    9adc:	8b e2       	ldi	r24, 0x2B	; 43
    9ade:	94 e4       	ldi	r25, 0x44	; 68
		}
		toggle_counter--;
    9ae0:	20 91 03 01 	lds	r18, 0x0103
    9ae4:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    9ae6:	19 f0       	breq	.+6      	; 0x9aee <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    9ae8:	20 93 03 01 	sts	0x0103, r18
    9aec:	0b c0       	rjmp	.+22     	; 0x9b04 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    9aee:	24 e1       	ldi	r18, 0x14	; 20
    9af0:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    9af4:	30 91 34 0b 	lds	r19, 0x0B34
    9af8:	21 e0       	ldi	r18, 0x01	; 1
    9afa:	23 27       	eor	r18, r19
    9afc:	20 93 34 0b 	sts	0x0B34, r18
    9b00:	01 c0       	rjmp	.+2      	; 0x9b04 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9b02:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    9b04:	bc 01       	movw	r22, r24
    9b06:	8f 2d       	mov	r24, r15
    9b08:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    9b0c:	84 e0       	ldi	r24, 0x04	; 4
    9b0e:	8f 0d       	add	r24, r15
    9b10:	0f 90       	pop	r0
    9b12:	df 91       	pop	r29
    9b14:	cf 91       	pop	r28
    9b16:	1f 91       	pop	r17
    9b18:	0f 91       	pop	r16
    9b1a:	ff 90       	pop	r15
    9b1c:	08 95       	ret

00009b1e <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    9b1e:	1f 93       	push	r17
    9b20:	cf 93       	push	r28
    9b22:	df 93       	push	r29
    9b24:	1f 92       	push	r1
    9b26:	cd b7       	in	r28, 0x3d	; 61
    9b28:	de b7       	in	r29, 0x3e	; 62
    9b2a:	16 2f       	mov	r17, r22
	char looped = 0;
    9b2c:	19 82       	std	Y+1, r1	; 0x01
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    9b2e:	fc 01       	movw	r30, r24
    9b30:	22 ad       	ldd	r18, Z+58	; 0x3a
    9b32:	22 23       	and	r18, r18
    9b34:	39 f1       	breq	.+78     	; 0x9b84 <shot_map+0x66>
		{
			switch (shot->shared.direction)
    9b36:	24 a5       	ldd	r18, Z+44	; 0x2c
    9b38:	21 30       	cpi	r18, 0x01	; 1
    9b3a:	71 f0       	breq	.+28     	; 0x9b58 <shot_map+0x3a>
    9b3c:	f0 f0       	brcs	.+60     	; 0x9b7a <shot_map+0x5c>
    9b3e:	22 30       	cpi	r18, 0x02	; 2
    9b40:	a1 f0       	breq	.+40     	; 0x9b6a <shot_map+0x4c>
    9b42:	23 30       	cpi	r18, 0x03	; 3
    9b44:	d1 f4       	brne	.+52     	; 0x9b7a <shot_map+0x5c>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    9b46:	be 01       	movw	r22, r28
    9b48:	6f 5f       	subi	r22, 0xFF	; 255
    9b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    9b4c:	8a 5b       	subi	r24, 0xBA	; 186
    9b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    9b50:	0e 94 6e 47 	call	0x8edc	; 0x8edc <LBGetNextFrame>
    9b54:	41 e0       	ldi	r20, 0x01	; 1
    9b56:	19 c0       	rjmp	.+50     	; 0x9b8a <shot_map+0x6c>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    9b58:	be 01       	movw	r22, r28
    9b5a:	6f 5f       	subi	r22, 0xFF	; 255
    9b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    9b5e:	8a 5b       	subi	r24, 0xBA	; 186
    9b60:	9f 4f       	sbci	r25, 0xFF	; 255
    9b62:	0e 94 6e 47 	call	0x8edc	; 0x8edc <LBGetNextFrame>
    9b66:	40 e0       	ldi	r20, 0x00	; 0
    9b68:	10 c0       	rjmp	.+32     	; 0x9b8a <shot_map+0x6c>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    9b6a:	be 01       	movw	r22, r28
    9b6c:	6f 5f       	subi	r22, 0xFF	; 255
    9b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    9b70:	cc 96       	adiw	r24, 0x3c	; 60
    9b72:	0e 94 6e 47 	call	0x8edc	; 0x8edc <LBGetNextFrame>
    9b76:	42 e0       	ldi	r20, 0x02	; 2
    9b78:	08 c0       	rjmp	.+16     	; 0x9b8a <shot_map+0x6c>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    9b7a:	be 01       	movw	r22, r28
    9b7c:	6f 5f       	subi	r22, 0xFF	; 255
    9b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    9b80:	cc 96       	adiw	r24, 0x3c	; 60
    9b82:	ef cf       	rjmp	.-34     	; 0x9b62 <shot_map+0x44>
    9b84:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    9b86:	8b e2       	ldi	r24, 0x2B	; 43
    9b88:	94 e4       	ldi	r25, 0x44	; 68
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    9b8a:	bc 01       	movw	r22, r24
    9b8c:	81 2f       	mov	r24, r17
    9b8e:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    9b92:	81 e0       	ldi	r24, 0x01	; 1
    9b94:	81 0f       	add	r24, r17
    9b96:	0f 90       	pop	r0
    9b98:	df 91       	pop	r29
    9b9a:	cf 91       	pop	r28
    9b9c:	1f 91       	pop	r17
    9b9e:	08 95       	ret

00009ba0 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    9ba0:	cf 93       	push	r28
    9ba2:	df 93       	push	r29
    9ba4:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    9ba6:	88 81       	ld	r24, Y
    9ba8:	81 11       	cpse	r24, r1
    9baa:	0b c0       	rjmp	.+22     	; 0x9bc2 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    9bac:	6f 81       	ldd	r22, Y+7	; 0x07
    9bae:	78 85       	ldd	r23, Y+8	; 0x08
    9bb0:	89 85       	ldd	r24, Y+9	; 0x09
    9bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    9bb4:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    9bb8:	66 95       	lsr	r22
    9bba:	66 95       	lsr	r22
    9bbc:	66 95       	lsr	r22
    9bbe:	6f 5f       	subi	r22, 0xFF	; 255
    9bc0:	1d c0       	rjmp	.+58     	; 0x9bfc <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    9bc2:	81 30       	cpi	r24, 0x01	; 1
    9bc4:	69 f4       	brne	.+26     	; 0x9be0 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    9bc6:	20 e0       	ldi	r18, 0x00	; 0
    9bc8:	30 e0       	ldi	r19, 0x00	; 0
    9bca:	40 e0       	ldi	r20, 0x00	; 0
    9bcc:	5e e3       	ldi	r21, 0x3E	; 62
    9bce:	6b 81       	ldd	r22, Y+3	; 0x03
    9bd0:	7c 81       	ldd	r23, Y+4	; 0x04
    9bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    9bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    9bd6:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    9bda:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    9bde:	27 c0       	rjmp	.+78     	; 0x9c2e <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    9be0:	82 30       	cpi	r24, 0x02	; 2
    9be2:	d9 f4       	brne	.+54     	; 0x9c1a <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    9be4:	20 e0       	ldi	r18, 0x00	; 0
    9be6:	30 e0       	ldi	r19, 0x00	; 0
    9be8:	40 e0       	ldi	r20, 0x00	; 0
    9bea:	5e e3       	ldi	r21, 0x3E	; 62
    9bec:	6f 81       	ldd	r22, Y+7	; 0x07
    9bee:	78 85       	ldd	r23, Y+8	; 0x08
    9bf0:	89 85       	ldd	r24, Y+9	; 0x09
    9bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    9bf4:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    9bf8:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
		sprite->y = tile * 8;
    9bfc:	88 e0       	ldi	r24, 0x08	; 8
    9bfe:	68 9f       	mul	r22, r24
    9c00:	b0 01       	movw	r22, r0
    9c02:	11 24       	eor	r1, r1
    9c04:	88 27       	eor	r24, r24
    9c06:	77 fd       	sbrc	r23, 7
    9c08:	80 95       	com	r24
    9c0a:	98 2f       	mov	r25, r24
    9c0c:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    9c10:	6f 83       	std	Y+7, r22	; 0x07
    9c12:	78 87       	std	Y+8, r23	; 0x08
    9c14:	89 87       	std	Y+9, r24	; 0x09
    9c16:	9a 87       	std	Y+10, r25	; 0x0a
    9c18:	18 c0       	rjmp	.+48     	; 0x9c4a <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    9c1a:	6b 81       	ldd	r22, Y+3	; 0x03
    9c1c:	7c 81       	ldd	r23, Y+4	; 0x04
    9c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    9c20:	9e 81       	ldd	r25, Y+6	; 0x06
    9c22:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    9c26:	66 95       	lsr	r22
    9c28:	66 95       	lsr	r22
    9c2a:	66 95       	lsr	r22
    9c2c:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    9c2e:	88 e0       	ldi	r24, 0x08	; 8
    9c30:	68 9f       	mul	r22, r24
    9c32:	b0 01       	movw	r22, r0
    9c34:	11 24       	eor	r1, r1
    9c36:	88 27       	eor	r24, r24
    9c38:	77 fd       	sbrc	r23, 7
    9c3a:	80 95       	com	r24
    9c3c:	98 2f       	mov	r25, r24
    9c3e:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    9c42:	6b 83       	std	Y+3, r22	; 0x03
    9c44:	7c 83       	std	Y+4, r23	; 0x04
    9c46:	8d 83       	std	Y+5, r24	; 0x05
    9c48:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    9c4a:	81 e0       	ldi	r24, 0x01	; 1
    9c4c:	8a 83       	std	Y+2, r24	; 0x02
}
    9c4e:	df 91       	pop	r29
    9c50:	cf 91       	pop	r28
    9c52:	08 95       	ret

00009c54 <recoil_sprite_fine>:

void recoil_sprite_fine(SpriteShared* sprite)
{	
    9c54:	cf 93       	push	r28
    9c56:	df 93       	push	r29
    9c58:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    9c5a:	88 81       	ld	r24, Y
    9c5c:	69 81       	ldd	r22, Y+1	; 0x01
	{
		sprite->y += FRAME_TIME * sprite->speed;
    9c5e:	70 e0       	ldi	r23, 0x00	; 0
	sprite->recoiled = 1;
}

void recoil_sprite_fine(SpriteShared* sprite)
{	
	if (sprite->direction == D_UP)
    9c60:	81 11       	cpse	r24, r1
    9c62:	13 c0       	rjmp	.+38     	; 0x9c8a <recoil_sprite_fine+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    9c64:	80 e0       	ldi	r24, 0x00	; 0
    9c66:	90 e0       	ldi	r25, 0x00	; 0
    9c68:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    9c6c:	25 e6       	ldi	r18, 0x65	; 101
    9c6e:	38 e8       	ldi	r19, 0x88	; 136
    9c70:	48 e8       	ldi	r20, 0x88	; 136
    9c72:	5c e3       	ldi	r21, 0x3C	; 60
    9c74:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    9c78:	9b 01       	movw	r18, r22
    9c7a:	ac 01       	movw	r20, r24
    9c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    9c7e:	78 85       	ldd	r23, Y+8	; 0x08
    9c80:	89 85       	ldd	r24, Y+9	; 0x09
    9c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    9c84:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    9c88:	29 c0       	rjmp	.+82     	; 0x9cdc <recoil_sprite_fine+0x88>
	}
	else if (sprite->direction == D_RIGHT)
    9c8a:	81 30       	cpi	r24, 0x01	; 1
    9c8c:	99 f4       	brne	.+38     	; 0x9cb4 <recoil_sprite_fine+0x60>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    9c8e:	80 e0       	ldi	r24, 0x00	; 0
    9c90:	90 e0       	ldi	r25, 0x00	; 0
    9c92:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    9c96:	25 e6       	ldi	r18, 0x65	; 101
    9c98:	38 e8       	ldi	r19, 0x88	; 136
    9c9a:	48 e8       	ldi	r20, 0x88	; 136
    9c9c:	5c e3       	ldi	r21, 0x3C	; 60
    9c9e:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    9ca2:	9b 01       	movw	r18, r22
    9ca4:	ac 01       	movw	r20, r24
    9ca6:	6b 81       	ldd	r22, Y+3	; 0x03
    9ca8:	7c 81       	ldd	r23, Y+4	; 0x04
    9caa:	8d 81       	ldd	r24, Y+5	; 0x05
    9cac:	9e 81       	ldd	r25, Y+6	; 0x06
    9cae:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    9cb2:	2b c0       	rjmp	.+86     	; 0x9d0a <recoil_sprite_fine+0xb6>
	}
	else if (sprite->direction == D_DOWN)
    9cb4:	82 30       	cpi	r24, 0x02	; 2
    9cb6:	b9 f4       	brne	.+46     	; 0x9ce6 <recoil_sprite_fine+0x92>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    9cb8:	80 e0       	ldi	r24, 0x00	; 0
    9cba:	90 e0       	ldi	r25, 0x00	; 0
    9cbc:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    9cc0:	25 e6       	ldi	r18, 0x65	; 101
    9cc2:	38 e8       	ldi	r19, 0x88	; 136
    9cc4:	48 e8       	ldi	r20, 0x88	; 136
    9cc6:	5c e3       	ldi	r21, 0x3C	; 60
    9cc8:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    9ccc:	9b 01       	movw	r18, r22
    9cce:	ac 01       	movw	r20, r24
    9cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    9cd2:	78 85       	ldd	r23, Y+8	; 0x08
    9cd4:	89 85       	ldd	r24, Y+9	; 0x09
    9cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    9cd8:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    9cdc:	6f 83       	std	Y+7, r22	; 0x07
    9cde:	78 87       	std	Y+8, r23	; 0x08
    9ce0:	89 87       	std	Y+9, r24	; 0x09
    9ce2:	9a 87       	std	Y+10, r25	; 0x0a
    9ce4:	16 c0       	rjmp	.+44     	; 0x9d12 <recoil_sprite_fine+0xbe>
	}
	else
	{
		sprite->x += FRAME_TIME * sprite->speed;
    9ce6:	80 e0       	ldi	r24, 0x00	; 0
    9ce8:	90 e0       	ldi	r25, 0x00	; 0
    9cea:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    9cee:	25 e6       	ldi	r18, 0x65	; 101
    9cf0:	38 e8       	ldi	r19, 0x88	; 136
    9cf2:	48 e8       	ldi	r20, 0x88	; 136
    9cf4:	5c e3       	ldi	r21, 0x3C	; 60
    9cf6:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    9cfa:	9b 01       	movw	r18, r22
    9cfc:	ac 01       	movw	r20, r24
    9cfe:	6b 81       	ldd	r22, Y+3	; 0x03
    9d00:	7c 81       	ldd	r23, Y+4	; 0x04
    9d02:	8d 81       	ldd	r24, Y+5	; 0x05
    9d04:	9e 81       	ldd	r25, Y+6	; 0x06
    9d06:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    9d0a:	6b 83       	std	Y+3, r22	; 0x03
    9d0c:	7c 83       	std	Y+4, r23	; 0x04
    9d0e:	8d 83       	std	Y+5, r24	; 0x05
    9d10:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    9d12:	81 e0       	ldi	r24, 0x01	; 1
    9d14:	8a 83       	std	Y+2, r24	; 0x02
}
    9d16:	df 91       	pop	r29
    9d18:	cf 91       	pop	r28
    9d1a:	08 95       	ret

00009d1c <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9d1c:	86 56       	subi	r24, 0x66	; 102
    9d1e:	93 4f       	sbci	r25, 0xF3	; 243
    9d20:	fc 01       	movw	r30, r24
    9d22:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    9d24:	81 30       	cpi	r24, 0x01	; 1
    9d26:	21 f0       	breq	.+8      	; 0x9d30 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    9d28:	82 30       	cpi	r24, 0x02	; 2
    9d2a:	21 f0       	breq	.+8      	; 0x9d34 <solid_square_tile+0x18>

	return 0;
    9d2c:	80 e0       	ldi	r24, 0x00	; 0
    9d2e:	08 95       	ret
    9d30:	81 e0       	ldi	r24, 0x01	; 1
    9d32:	08 95       	ret
    9d34:	82 e0       	ldi	r24, 0x02	; 2
}
    9d36:	08 95       	ret

00009d38 <solid_tile>:

u8 solid_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9d38:	86 56       	subi	r24, 0x66	; 102
    9d3a:	93 4f       	sbci	r25, 0xF3	; 243
    9d3c:	fc 01       	movw	r30, r24
    9d3e:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    9d40:	81 30       	cpi	r24, 0x01	; 1
    9d42:	61 f0       	breq	.+24     	; 0x9d5c <solid_tile+0x24>
	if (tile == L_METAL) return tile;
    9d44:	82 30       	cpi	r24, 0x02	; 2
    9d46:	61 f0       	breq	.+24     	; 0x9d60 <solid_tile+0x28>
	if (tile == L_TL) return tile;
    9d48:	83 30       	cpi	r24, 0x03	; 3
    9d4a:	61 f0       	breq	.+24     	; 0x9d64 <solid_tile+0x2c>
	if (tile == L_BR) return tile;
    9d4c:	86 30       	cpi	r24, 0x06	; 6
    9d4e:	61 f0       	breq	.+24     	; 0x9d68 <solid_tile+0x30>
	if (tile == L_TR) return tile;
    9d50:	84 30       	cpi	r24, 0x04	; 4
    9d52:	61 f0       	breq	.+24     	; 0x9d6c <solid_tile+0x34>
	if (tile == L_BL) return tile;
    9d54:	85 30       	cpi	r24, 0x05	; 5
    9d56:	61 f0       	breq	.+24     	; 0x9d70 <solid_tile+0x38>

	return 0;
    9d58:	80 e0       	ldi	r24, 0x00	; 0
    9d5a:	08 95       	ret
    9d5c:	81 e0       	ldi	r24, 0x01	; 1
    9d5e:	08 95       	ret
    9d60:	82 e0       	ldi	r24, 0x02	; 2
    9d62:	08 95       	ret
    9d64:	83 e0       	ldi	r24, 0x03	; 3
    9d66:	08 95       	ret
    9d68:	86 e0       	ldi	r24, 0x06	; 6
    9d6a:	08 95       	ret
    9d6c:	84 e0       	ldi	r24, 0x04	; 4
    9d6e:	08 95       	ret
    9d70:	85 e0       	ldi	r24, 0x05	; 5
}
    9d72:	08 95       	ret

00009d74 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9d74:	86 56       	subi	r24, 0x66	; 102
    9d76:	93 4f       	sbci	r25, 0xF3	; 243
    9d78:	fc 01       	movw	r30, r24
    9d7a:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    9d7c:	83 30       	cpi	r24, 0x03	; 3
    9d7e:	41 f0       	breq	.+16     	; 0x9d90 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    9d80:	86 30       	cpi	r24, 0x06	; 6
    9d82:	41 f0       	breq	.+16     	; 0x9d94 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    9d84:	84 30       	cpi	r24, 0x04	; 4
    9d86:	41 f0       	breq	.+16     	; 0x9d98 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    9d88:	85 30       	cpi	r24, 0x05	; 5
    9d8a:	41 f0       	breq	.+16     	; 0x9d9c <solid_directional_tile+0x28>
	
	return 0;
    9d8c:	80 e0       	ldi	r24, 0x00	; 0
    9d8e:	08 95       	ret
    9d90:	83 e0       	ldi	r24, 0x03	; 3
    9d92:	08 95       	ret
    9d94:	86 e0       	ldi	r24, 0x06	; 6
    9d96:	08 95       	ret
    9d98:	84 e0       	ldi	r24, 0x04	; 4
    9d9a:	08 95       	ret
    9d9c:	85 e0       	ldi	r24, 0x05	; 5
}
    9d9e:	08 95       	ret

00009da0 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    9da0:	7f 92       	push	r7
    9da2:	8f 92       	push	r8
    9da4:	9f 92       	push	r9
    9da6:	af 92       	push	r10
    9da8:	bf 92       	push	r11
    9daa:	cf 92       	push	r12
    9dac:	df 92       	push	r13
    9dae:	ef 92       	push	r14
    9db0:	ff 92       	push	r15
    9db2:	0f 93       	push	r16
    9db4:	1f 93       	push	r17
    9db6:	cf 93       	push	r28
    9db8:	df 93       	push	r29
    9dba:	b6 2e       	mov	r11, r22
    9dbc:	94 2e       	mov	r9, r20
    9dbe:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    9dc0:	fc 01       	movw	r30, r24
    9dc2:	e6 56       	subi	r30, 0x66	; 102
    9dc4:	f3 4f       	sbci	r31, 0xF3	; 243
    9dc6:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    9dc8:	6e e1       	ldi	r22, 0x1E	; 30
    9dca:	70 e0       	ldi	r23, 0x00	; 0
    9dcc:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    9dd0:	f8 2e       	mov	r15, r24
    9dd2:	ff 0c       	add	r15, r15
    9dd4:	ff 0c       	add	r15, r15
    9dd6:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    9dd8:	6d 5f       	subi	r22, 0xFD	; 253
    9dda:	7f 4f       	sbci	r23, 0xFF	; 255
    9ddc:	16 2f       	mov	r17, r22
    9dde:	11 0f       	add	r17, r17
    9de0:	11 0f       	add	r17, r17
    9de2:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    9de4:	83 e0       	ldi	r24, 0x03	; 3
    9de6:	d8 16       	cp	r13, r24
    9de8:	19 f0       	breq	.+6      	; 0x9df0 <collides_directional_tile+0x50>
    9dea:	86 e0       	ldi	r24, 0x06	; 6
    9dec:	d8 12       	cpse	r13, r24
    9dee:	31 c0       	rjmp	.+98     	; 0x9e52 <collides_directional_tile+0xb2>
    9df0:	cf ef       	ldi	r28, 0xFF	; 255
    9df2:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    9df4:	c9 0d       	add	r28, r9
    9df6:	27 e0       	ldi	r18, 0x07	; 7
    9df8:	72 2e       	mov	r7, r18
    9dfa:	7f 0c       	add	r7, r15
    9dfc:	37 e0       	ldi	r19, 0x07	; 7
    9dfe:	83 2e       	mov	r8, r19
    9e00:	81 0e       	add	r8, r17
    9e02:	ac 2e       	mov	r10, r28
    9e04:	cb 2c       	mov	r12, r11
    9e06:	e9 2c       	mov	r14, r9
    9e08:	0b 2d       	mov	r16, r11
    9e0a:	21 2f       	mov	r18, r17
    9e0c:	47 2d       	mov	r20, r7
    9e0e:	68 2d       	mov	r22, r8
    9e10:	8f 2d       	mov	r24, r15
    9e12:	0e 94 43 48 	call	0x9086	; 0x9086 <LBLineIntersect>
    9e16:	81 11       	cpse	r24, r1
    9e18:	58 c0       	rjmp	.+176    	; 0x9eca <collides_directional_tile+0x12a>
    9e1a:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    9e1c:	db 0d       	add	r29, r11
    9e1e:	a9 2c       	mov	r10, r9
    9e20:	cd 2e       	mov	r12, r29
    9e22:	21 2f       	mov	r18, r17
    9e24:	47 2d       	mov	r20, r7
    9e26:	68 2d       	mov	r22, r8
    9e28:	8f 2d       	mov	r24, r15
    9e2a:	0e 94 43 48 	call	0x9086	; 0x9086 <LBLineIntersect>
    9e2e:	81 11       	cpse	r24, r1
    9e30:	4c c0       	rjmp	.+152    	; 0x9eca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    9e32:	ac 2e       	mov	r10, r28
    9e34:	0d 2f       	mov	r16, r29
    9e36:	21 2f       	mov	r18, r17
    9e38:	47 2d       	mov	r20, r7
    9e3a:	68 2d       	mov	r22, r8
    9e3c:	8f 2d       	mov	r24, r15
    9e3e:	0e 94 43 48 	call	0x9086	; 0x9086 <LBLineIntersect>
    9e42:	81 11       	cpse	r24, r1
    9e44:	42 c0       	rjmp	.+132    	; 0x9eca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    9e46:	ec 2e       	mov	r14, r28
    9e48:	0b 2d       	mov	r16, r11
    9e4a:	21 2f       	mov	r18, r17
    9e4c:	47 2d       	mov	r20, r7
    9e4e:	68 2d       	mov	r22, r8
    9e50:	34 c0       	rjmp	.+104    	; 0x9eba <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    9e52:	8c ef       	ldi	r24, 0xFC	; 252
    9e54:	8d 0d       	add	r24, r13
    9e56:	82 30       	cpi	r24, 0x02	; 2
    9e58:	b0 f5       	brcc	.+108    	; 0x9ec6 <collides_directional_tile+0x126>
    9e5a:	cf ef       	ldi	r28, 0xFF	; 255
    9e5c:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    9e5e:	c4 0f       	add	r28, r20
    9e60:	87 e0       	ldi	r24, 0x07	; 7
    9e62:	78 2e       	mov	r7, r24
    9e64:	71 0e       	add	r7, r17
    9e66:	97 e0       	ldi	r25, 0x07	; 7
    9e68:	89 2e       	mov	r8, r25
    9e6a:	8f 0c       	add	r8, r15
    9e6c:	ac 2e       	mov	r10, r28
    9e6e:	cb 2c       	mov	r12, r11
    9e70:	e4 2e       	mov	r14, r20
    9e72:	0b 2d       	mov	r16, r11
    9e74:	27 2d       	mov	r18, r7
    9e76:	48 2d       	mov	r20, r8
    9e78:	61 2f       	mov	r22, r17
    9e7a:	8f 2d       	mov	r24, r15
    9e7c:	0e 94 43 48 	call	0x9086	; 0x9086 <LBLineIntersect>
    9e80:	81 11       	cpse	r24, r1
    9e82:	23 c0       	rjmp	.+70     	; 0x9eca <collides_directional_tile+0x12a>
    9e84:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    9e86:	db 0d       	add	r29, r11
    9e88:	a9 2c       	mov	r10, r9
    9e8a:	cd 2e       	mov	r12, r29
    9e8c:	27 2d       	mov	r18, r7
    9e8e:	48 2d       	mov	r20, r8
    9e90:	61 2f       	mov	r22, r17
    9e92:	8f 2d       	mov	r24, r15
    9e94:	0e 94 43 48 	call	0x9086	; 0x9086 <LBLineIntersect>
    9e98:	81 11       	cpse	r24, r1
    9e9a:	17 c0       	rjmp	.+46     	; 0x9eca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    9e9c:	ac 2e       	mov	r10, r28
    9e9e:	0d 2f       	mov	r16, r29
    9ea0:	27 2d       	mov	r18, r7
    9ea2:	48 2d       	mov	r20, r8
    9ea4:	61 2f       	mov	r22, r17
    9ea6:	8f 2d       	mov	r24, r15
    9ea8:	0e 94 43 48 	call	0x9086	; 0x9086 <LBLineIntersect>
    9eac:	81 11       	cpse	r24, r1
    9eae:	0d c0       	rjmp	.+26     	; 0x9eca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    9eb0:	ec 2e       	mov	r14, r28
    9eb2:	0b 2d       	mov	r16, r11
    9eb4:	27 2d       	mov	r18, r7
    9eb6:	48 2d       	mov	r20, r8
    9eb8:	61 2f       	mov	r22, r17
    9eba:	8f 2d       	mov	r24, r15
    9ebc:	0e 94 43 48 	call	0x9086	; 0x9086 <LBLineIntersect>
    9ec0:	81 11       	cpse	r24, r1
    9ec2:	03 c0       	rjmp	.+6      	; 0x9eca <collides_directional_tile+0x12a>
    9ec4:	03 c0       	rjmp	.+6      	; 0x9ecc <collides_directional_tile+0x12c>
	}
	
	return 0;
    9ec6:	80 e0       	ldi	r24, 0x00	; 0
    9ec8:	01 c0       	rjmp	.+2      	; 0x9ecc <collides_directional_tile+0x12c>
    9eca:	8d 2d       	mov	r24, r13
}
    9ecc:	df 91       	pop	r29
    9ece:	cf 91       	pop	r28
    9ed0:	1f 91       	pop	r17
    9ed2:	0f 91       	pop	r16
    9ed4:	ff 90       	pop	r15
    9ed6:	ef 90       	pop	r14
    9ed8:	df 90       	pop	r13
    9eda:	cf 90       	pop	r12
    9edc:	bf 90       	pop	r11
    9ede:	af 90       	pop	r10
    9ee0:	9f 90       	pop	r9
    9ee2:	8f 90       	pop	r8
    9ee4:	7f 90       	pop	r7
    9ee6:	08 95       	ret

00009ee8 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    9ee8:	8f 92       	push	r8
    9eea:	9f 92       	push	r9
    9eec:	af 92       	push	r10
    9eee:	cf 92       	push	r12
    9ef0:	ef 92       	push	r14
    9ef2:	0f 93       	push	r16
    9ef4:	1f 93       	push	r17
    9ef6:	cf 93       	push	r28
    9ef8:	df 93       	push	r29
    9efa:	4c 01       	movw	r8, r24
    9efc:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    9efe:	20 e0       	ldi	r18, 0x00	; 0
    9f00:	30 e0       	ldi	r19, 0x00	; 0
    9f02:	40 e0       	ldi	r20, 0x00	; 0
    9f04:	50 e4       	ldi	r21, 0x40	; 64
    9f06:	6f 81       	ldd	r22, Y+7	; 0x07
    9f08:	78 85       	ldd	r23, Y+8	; 0x08
    9f0a:	89 85       	ldd	r24, Y+9	; 0x09
    9f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    9f0e:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    9f12:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    9f16:	e6 2e       	mov	r14, r22
    9f18:	20 e0       	ldi	r18, 0x00	; 0
    9f1a:	30 e0       	ldi	r19, 0x00	; 0
    9f1c:	40 e0       	ldi	r20, 0x00	; 0
    9f1e:	50 e4       	ldi	r21, 0x40	; 64
    9f20:	6b 81       	ldd	r22, Y+3	; 0x03
    9f22:	7c 81       	ldd	r23, Y+4	; 0x04
    9f24:	8d 81       	ldd	r24, Y+5	; 0x05
    9f26:	9e 81       	ldd	r25, Y+6	; 0x06
    9f28:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    9f2c:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    9f30:	06 2f       	mov	r16, r22
    9f32:	20 e0       	ldi	r18, 0x00	; 0
    9f34:	30 e0       	ldi	r19, 0x00	; 0
    9f36:	40 e8       	ldi	r20, 0x80	; 128
    9f38:	5f e3       	ldi	r21, 0x3F	; 63
    9f3a:	f4 01       	movw	r30, r8
    9f3c:	67 81       	ldd	r22, Z+7	; 0x07
    9f3e:	70 85       	ldd	r23, Z+8	; 0x08
    9f40:	81 85       	ldd	r24, Z+9	; 0x09
    9f42:	92 85       	ldd	r25, Z+10	; 0x0a
    9f44:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    9f48:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    9f4c:	16 2f       	mov	r17, r22
    9f4e:	20 e0       	ldi	r18, 0x00	; 0
    9f50:	30 e0       	ldi	r19, 0x00	; 0
    9f52:	40 e8       	ldi	r20, 0x80	; 128
    9f54:	5f e3       	ldi	r21, 0x3F	; 63
    9f56:	f4 01       	movw	r30, r8
    9f58:	63 81       	ldd	r22, Z+3	; 0x03
    9f5a:	74 81       	ldd	r23, Z+4	; 0x04
    9f5c:	85 81       	ldd	r24, Z+5	; 0x05
    9f5e:	96 81       	ldd	r25, Z+6	; 0x06
    9f60:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    9f64:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    9f68:	86 2f       	mov	r24, r22
    9f6a:	94 e0       	ldi	r25, 0x04	; 4
    9f6c:	a9 2e       	mov	r10, r25
    9f6e:	24 e0       	ldi	r18, 0x04	; 4
    9f70:	c2 2e       	mov	r12, r18
    9f72:	2e e0       	ldi	r18, 0x0E	; 14
    9f74:	4e e0       	ldi	r20, 0x0E	; 14
    9f76:	61 2f       	mov	r22, r17
    9f78:	0e 94 19 48 	call	0x9032	; 0x9032 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    9f7c:	88 23       	and	r24, r24
    9f7e:	41 f0       	breq	.+16     	; 0x9f90 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    9f80:	f4 01       	movw	r30, r8
    9f82:	87 89       	ldd	r24, Z+23	; 0x17
    9f84:	88 37       	cpi	r24, 0x78	; 120
    9f86:	21 f4       	brne	.+8      	; 0x9f90 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    9f88:	81 e0       	ldi	r24, 0x01	; 1
    9f8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    9f8c:	99 30       	cpi	r25, 0x09	; 9
    9f8e:	08 f4       	brcc	.+2      	; 0x9f92 <player_shot+0xaa>
    9f90:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    9f92:	df 91       	pop	r29
    9f94:	cf 91       	pop	r28
    9f96:	1f 91       	pop	r17
    9f98:	0f 91       	pop	r16
    9f9a:	ef 90       	pop	r14
    9f9c:	cf 90       	pop	r12
    9f9e:	af 90       	pop	r10
    9fa0:	9f 90       	pop	r9
    9fa2:	8f 90       	pop	r8
    9fa4:	08 95       	ret

00009fa6 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    9fa6:	cf 92       	push	r12
    9fa8:	df 92       	push	r13
    9faa:	ef 92       	push	r14
    9fac:	ff 92       	push	r15
    9fae:	cf 93       	push	r28
    9fb0:	df 93       	push	r29
    9fb2:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    9fb4:	cb 80       	ldd	r12, Y+3	; 0x03
    9fb6:	dc 80       	ldd	r13, Y+4	; 0x04
    9fb8:	ed 80       	ldd	r14, Y+5	; 0x05
    9fba:	fe 80       	ldd	r15, Y+6	; 0x06
    9fbc:	20 e0       	ldi	r18, 0x00	; 0
    9fbe:	30 e0       	ldi	r19, 0x00	; 0
    9fc0:	a9 01       	movw	r20, r18
    9fc2:	c7 01       	movw	r24, r14
    9fc4:	b6 01       	movw	r22, r12
    9fc6:	0e 94 4a 61 	call	0xc294	; 0xc294 <__cmpsf2>
    9fca:	87 fd       	sbrc	r24, 7
    9fcc:	31 c0       	rjmp	.+98     	; 0xa030 <collision_detect_boundries+0x8a>
    9fce:	20 e0       	ldi	r18, 0x00	; 0
    9fd0:	30 e0       	ldi	r19, 0x00	; 0
    9fd2:	40 e0       	ldi	r20, 0x00	; 0
    9fd4:	51 e4       	ldi	r21, 0x41	; 65
    9fd6:	c7 01       	movw	r24, r14
    9fd8:	b6 01       	movw	r22, r12
    9fda:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    9fde:	20 e0       	ldi	r18, 0x00	; 0
    9fe0:	30 e0       	ldi	r19, 0x00	; 0
    9fe2:	40 e7       	ldi	r20, 0x70	; 112
    9fe4:	53 e4       	ldi	r21, 0x43	; 67
    9fe6:	0e 94 99 62 	call	0xc532	; 0xc532 <__gesf2>
    9fea:	18 16       	cp	r1, r24
    9fec:	0c f1       	brlt	.+66     	; 0xa030 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    9fee:	cf 80       	ldd	r12, Y+7	; 0x07
    9ff0:	d8 84       	ldd	r13, Y+8	; 0x08
    9ff2:	e9 84       	ldd	r14, Y+9	; 0x09
    9ff4:	fa 84       	ldd	r15, Y+10	; 0x0a
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    9ff6:	20 e0       	ldi	r18, 0x00	; 0
    9ff8:	30 e0       	ldi	r19, 0x00	; 0
    9ffa:	40 ec       	ldi	r20, 0xC0	; 192
    9ffc:	51 e4       	ldi	r21, 0x41	; 65
    9ffe:	c7 01       	movw	r24, r14
    a000:	b6 01       	movw	r22, r12
    a002:	0e 94 4a 61 	call	0xc294	; 0xc294 <__cmpsf2>
    a006:	87 fd       	sbrc	r24, 7
    a008:	13 c0       	rjmp	.+38     	; 0xa030 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    a00a:	20 e0       	ldi	r18, 0x00	; 0
    a00c:	30 e0       	ldi	r19, 0x00	; 0
    a00e:	40 e0       	ldi	r20, 0x00	; 0
    a010:	51 e4       	ldi	r21, 0x41	; 65
    a012:	c7 01       	movw	r24, r14
    a014:	b6 01       	movw	r22, r12
    a016:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    a01a:	c1 e0       	ldi	r28, 0x01	; 1
    a01c:	20 e0       	ldi	r18, 0x00	; 0
    a01e:	30 e0       	ldi	r19, 0x00	; 0
    a020:	40 e6       	ldi	r20, 0x60	; 96
    a022:	53 e4       	ldi	r21, 0x43	; 67
    a024:	0e 94 99 62 	call	0xc532	; 0xc532 <__gesf2>
    a028:	18 16       	cp	r1, r24
    a02a:	1c f0       	brlt	.+6      	; 0xa032 <collision_detect_boundries+0x8c>
    a02c:	c0 e0       	ldi	r28, 0x00	; 0
    a02e:	01 c0       	rjmp	.+2      	; 0xa032 <collision_detect_boundries+0x8c>
	{
		return 1;
    a030:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    a032:	8c 2f       	mov	r24, r28
    a034:	df 91       	pop	r29
    a036:	cf 91       	pop	r28
    a038:	ff 90       	pop	r15
    a03a:	ef 90       	pop	r14
    a03c:	df 90       	pop	r13
    a03e:	cf 90       	pop	r12
    a040:	08 95       	ret

0000a042 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    a042:	0f 93       	push	r16
    a044:	1f 93       	push	r17
    a046:	cf 93       	push	r28
    a048:	9b 01       	movw	r18, r22
    a04a:	c4 2f       	mov	r28, r20
	if (level.level_map[tile_index] == L_EMPTY)
    a04c:	8c 01       	movw	r16, r24
    a04e:	06 56       	subi	r16, 0x66	; 102
    a050:	13 4f       	sbci	r17, 0xF3	; 243
    a052:	f8 01       	movw	r30, r16
    a054:	41 81       	ldd	r20, Z+1	; 0x01
    a056:	41 11       	cpse	r20, r1
    a058:	06 c0       	rjmp	.+12     	; 0xa066 <drop_item+0x24>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30, map);
    a05a:	6e e1       	ldi	r22, 0x1E	; 30
    a05c:	70 e0       	ldi	r23, 0x00	; 0
    a05e:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a062:	6d 5f       	subi	r22, 0xFD	; 253
    a064:	19 c0       	rjmp	.+50     	; 0xa098 <drop_item+0x56>
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    a066:	8c 01       	movw	r16, r24
    a068:	05 56       	subi	r16, 0x65	; 101
    a06a:	13 4f       	sbci	r17, 0xF3	; 243
    a06c:	f8 01       	movw	r30, r16
    a06e:	41 81       	ldd	r20, Z+1	; 0x01
    a070:	41 11       	cpse	r20, r1
    a072:	06 c0       	rjmp	.+12     	; 0xa080 <drop_item+0x3e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30, map);
    a074:	6e e1       	ldi	r22, 0x1E	; 30
    a076:	70 e0       	ldi	r23, 0x00	; 0
    a078:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a07c:	6d 5f       	subi	r22, 0xFD	; 253
    a07e:	1a c0       	rjmp	.+52     	; 0xa0b4 <drop_item+0x72>
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    a080:	8c 01       	movw	r16, r24
    a082:	08 54       	subi	r16, 0x48	; 72
    a084:	13 4f       	sbci	r17, 0xF3	; 243
    a086:	f8 01       	movw	r30, r16
    a088:	41 81       	ldd	r20, Z+1	; 0x01
    a08a:	41 11       	cpse	r20, r1
    a08c:	07 c0       	rjmp	.+14     	; 0xa09c <drop_item+0x5a>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map);
    a08e:	6e e1       	ldi	r22, 0x1E	; 30
    a090:	70 e0       	ldi	r23, 0x00	; 0
    a092:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a096:	6c 5f       	subi	r22, 0xFC	; 252
    a098:	a9 01       	movw	r20, r18
    a09a:	0e c0       	rjmp	.+28     	; 0xa0b8 <drop_item+0x76>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    a09c:	8c 01       	movw	r16, r24
    a09e:	07 54       	subi	r16, 0x47	; 71
    a0a0:	13 4f       	sbci	r17, 0xF3	; 243
    a0a2:	f8 01       	movw	r30, r16
    a0a4:	41 81       	ldd	r20, Z+1	; 0x01
    a0a6:	41 11       	cpse	r20, r1
    a0a8:	0b c0       	rjmp	.+22     	; 0xa0c0 <drop_item+0x7e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map);
    a0aa:	6e e1       	ldi	r22, 0x1E	; 30
    a0ac:	70 e0       	ldi	r23, 0x00	; 0
    a0ae:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a0b2:	6c 5f       	subi	r22, 0xFC	; 252
    a0b4:	a9 01       	movw	r20, r18
    a0b6:	8f 5f       	subi	r24, 0xFF	; 255
    a0b8:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
		level.level_map[tile_index+31] = item_type;
    a0bc:	f8 01       	movw	r30, r16
    a0be:	c1 83       	std	Z+1, r28	; 0x01
	}
}
    a0c0:	cf 91       	pop	r28
    a0c2:	1f 91       	pop	r17
    a0c4:	0f 91       	pop	r16
    a0c6:	08 95       	ret

0000a0c8 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    a0c8:	ff 92       	push	r15
    a0ca:	0f 93       	push	r16
    a0cc:	1f 93       	push	r17
    a0ce:	cf 93       	push	r28
    a0d0:	df 93       	push	r29
    a0d2:	ec 01       	movw	r28, r24
    a0d4:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a0d6:	20 e0       	ldi	r18, 0x00	; 0
    a0d8:	30 e0       	ldi	r19, 0x00	; 0
    a0da:	40 e0       	ldi	r20, 0x00	; 0
    a0dc:	5e e3       	ldi	r21, 0x3E	; 62
    a0de:	6f 81       	ldd	r22, Y+7	; 0x07
    a0e0:	78 85       	ldd	r23, Y+8	; 0x08
    a0e2:	89 85       	ldd	r24, Y+9	; 0x09
    a0e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0e6:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    a0ea:	20 e0       	ldi	r18, 0x00	; 0
    a0ec:	30 e0       	ldi	r19, 0x00	; 0
    a0ee:	40 e4       	ldi	r20, 0x40	; 64
    a0f0:	50 e4       	ldi	r21, 0x40	; 64
    a0f2:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    a0f6:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    a0fa:	8e e1       	ldi	r24, 0x1E	; 30
    a0fc:	68 9f       	mul	r22, r24
    a0fe:	80 01       	movw	r16, r0
    a100:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    a102:	20 e0       	ldi	r18, 0x00	; 0
    a104:	30 e0       	ldi	r19, 0x00	; 0
    a106:	40 e0       	ldi	r20, 0x00	; 0
    a108:	5e e3       	ldi	r21, 0x3E	; 62
    a10a:	6b 81       	ldd	r22, Y+3	; 0x03
    a10c:	7c 81       	ldd	r23, Y+4	; 0x04
    a10e:	8d 81       	ldd	r24, Y+5	; 0x05
    a110:	9e 81       	ldd	r25, Y+6	; 0x06
    a112:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    a116:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    a11a:	06 0f       	add	r16, r22
    a11c:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    a11e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    a120:	88 23       	and	r24, r24
    a122:	79 f0       	breq	.+30     	; 0xa142 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    a124:	40 e0       	ldi	r20, 0x00	; 0
    a126:	50 e0       	ldi	r21, 0x00	; 0
    a128:	61 e0       	ldi	r22, 0x01	; 1
    a12a:	8a e0       	ldi	r24, 0x0A	; 10
    a12c:	8f 0d       	add	r24, r15
    a12e:	0e 94 a8 38 	call	0x7150	; 0x7150 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    a132:	47 e0       	ldi	r20, 0x07	; 7
    a134:	61 ea       	ldi	r22, 0xA1	; 161
    a136:	78 e6       	ldi	r23, 0x68	; 104
    a138:	c8 01       	movw	r24, r16
    a13a:	0e 94 21 50 	call	0xa042	; 0xa042 <drop_item>
		player->max_speed = MAX_SPEED;
    a13e:	82 e3       	ldi	r24, 0x32	; 50
    a140:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    a142:	89 8d       	ldd	r24, Y+25	; 0x19
    a144:	88 23       	and	r24, r24
    a146:	69 f0       	breq	.+26     	; 0xa162 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    a148:	40 e0       	ldi	r20, 0x00	; 0
    a14a:	50 e0       	ldi	r21, 0x00	; 0
    a14c:	61 e0       	ldi	r22, 0x01	; 1
    a14e:	8b e0       	ldi	r24, 0x0B	; 11
    a150:	8f 0d       	add	r24, r15
    a152:	0e 94 a8 38 	call	0x7150	; 0x7150 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    a156:	49 e0       	ldi	r20, 0x09	; 9
    a158:	6b e9       	ldi	r22, 0x9B	; 155
    a15a:	78 e6       	ldi	r23, 0x68	; 104
    a15c:	c8 01       	movw	r24, r16
    a15e:	0e 94 21 50 	call	0xa042	; 0xa042 <drop_item>
	}
	player->has_over_speed = false;
    a162:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    a164:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    a166:	8c 89       	ldd	r24, Y+20	; 0x14
    a168:	81 60       	ori	r24, 0x01	; 1
    a16a:	8c 8b       	std	Y+20, r24	; 0x14
}
    a16c:	df 91       	pop	r29
    a16e:	cf 91       	pop	r28
    a170:	1f 91       	pop	r17
    a172:	0f 91       	pop	r16
    a174:	ff 90       	pop	r15
    a176:	08 95       	ret

0000a178 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    a178:	fc 01       	movw	r30, r24
    a17a:	8e e1       	ldi	r24, 0x1E	; 30
    a17c:	48 9f       	mul	r20, r24
    a17e:	a0 01       	movw	r20, r0
    a180:	11 24       	eor	r1, r1
    a182:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    a184:	64 0f       	add	r22, r20
    a186:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    a188:	21 11       	cpse	r18, r1
    a18a:	05 c0       	rjmp	.+10     	; 0xa196 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    a18c:	71 83       	std	Z+1, r23	; 0x01
    a18e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    a190:	6f 5f       	subi	r22, 0xFF	; 255
    a192:	7f 4f       	sbci	r23, 0xFF	; 255
    a194:	12 c0       	rjmp	.+36     	; 0xa1ba <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    a196:	21 30       	cpi	r18, 0x01	; 1
    a198:	19 f4       	brne	.+6      	; 0xa1a0 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    a19a:	cb 01       	movw	r24, r22
    a19c:	01 96       	adiw	r24, 0x01	; 1
    a19e:	04 c0       	rjmp	.+8      	; 0xa1a8 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    a1a0:	22 30       	cpi	r18, 0x02	; 2
    a1a2:	39 f4       	brne	.+14     	; 0xa1b2 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    a1a4:	cb 01       	movw	r24, r22
    a1a6:	4e 96       	adiw	r24, 0x1e	; 30
    a1a8:	91 83       	std	Z+1, r25	; 0x01
    a1aa:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    a1ac:	61 5e       	subi	r22, 0xE1	; 225
    a1ae:	7f 4f       	sbci	r23, 0xFF	; 255
    a1b0:	04 c0       	rjmp	.+8      	; 0xa1ba <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    a1b2:	71 83       	std	Z+1, r23	; 0x01
    a1b4:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    a1b6:	62 5e       	subi	r22, 0xE2	; 226
    a1b8:	7f 4f       	sbci	r23, 0xFF	; 255
    a1ba:	73 83       	std	Z+3, r23	; 0x03
    a1bc:	62 83       	std	Z+2, r22	; 0x02
    a1be:	08 95       	ret

0000a1c0 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    a1c0:	ef 92       	push	r14
    a1c2:	ff 92       	push	r15
    a1c4:	0f 93       	push	r16
    a1c6:	1f 93       	push	r17
    a1c8:	cf 93       	push	r28
    a1ca:	df 93       	push	r29
    a1cc:	ec 01       	movw	r28, r24
    a1ce:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    a1d0:	8e e1       	ldi	r24, 0x1E	; 30
    a1d2:	e8 2e       	mov	r14, r24
    a1d4:	f1 2c       	mov	r15, r1
    a1d6:	cb 01       	movw	r24, r22
    a1d8:	b7 01       	movw	r22, r14
    a1da:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a1de:	6d 5f       	subi	r22, 0xFD	; 253
    a1e0:	40 e0       	ldi	r20, 0x00	; 0
    a1e2:	50 e0       	ldi	r21, 0x00	; 0
    a1e4:	0e 94 a8 38 	call	0x7150	; 0x7150 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    a1e8:	88 81       	ld	r24, Y
    a1ea:	fe 01       	movw	r30, r28
    a1ec:	9c e0       	ldi	r25, 0x0C	; 12
    a1ee:	89 9f       	mul	r24, r25
    a1f0:	e0 0d       	add	r30, r0
    a1f2:	f1 1d       	adc	r31, r1
    a1f4:	11 24       	eor	r1, r1
    a1f6:	83 85       	ldd	r24, Z+11	; 0x0b
    a1f8:	94 85       	ldd	r25, Z+12	; 0x0c
    a1fa:	00 97       	sbiw	r24, 0x00	; 0
    a1fc:	41 f0       	breq	.+16     	; 0xa20e <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    a1fe:	b7 01       	movw	r22, r14
    a200:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a204:	6d 5f       	subi	r22, 0xFD	; 253
    a206:	40 e0       	ldi	r20, 0x00	; 0
    a208:	50 e0       	ldi	r21, 0x00	; 0
    a20a:	0e 94 a8 38 	call	0x7150	; 0x7150 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    a20e:	88 81       	ld	r24, Y
    a210:	fe 01       	movw	r30, r28
    a212:	9c e0       	ldi	r25, 0x0C	; 12
    a214:	89 9f       	mul	r24, r25
    a216:	e0 0d       	add	r30, r0
    a218:	f1 1d       	adc	r31, r1
    a21a:	11 24       	eor	r1, r1
    a21c:	14 87       	std	Z+12, r17	; 0x0c
    a21e:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    a220:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    a222:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    a224:	82 30       	cpi	r24, 0x02	; 2
    a226:	11 f0       	breq	.+4      	; 0xa22c <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    a228:	88 83       	st	Y, r24
    a22a:	01 c0       	rjmp	.+2      	; 0xa22e <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    a22c:	18 82       	st	Y, r1
	}
}
    a22e:	df 91       	pop	r29
    a230:	cf 91       	pop	r28
    a232:	1f 91       	pop	r17
    a234:	0f 91       	pop	r16
    a236:	ff 90       	pop	r15
    a238:	ef 90       	pop	r14
    a23a:	08 95       	ret

0000a23c <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    a23c:	fb 01       	movw	r30, r22
	switch (tile_type)
    a23e:	84 30       	cpi	r24, 0x04	; 4
    a240:	71 f0       	breq	.+28     	; 0xa25e <richochet+0x22>
    a242:	18 f4       	brcc	.+6      	; 0xa24a <richochet+0xe>
    a244:	83 30       	cpi	r24, 0x03	; 3
    a246:	31 f0       	breq	.+12     	; 0xa254 <richochet+0x18>
    a248:	08 95       	ret
    a24a:	85 30       	cpi	r24, 0x05	; 5
    a24c:	99 f0       	breq	.+38     	; 0xa274 <richochet+0x38>
    a24e:	86 30       	cpi	r24, 0x06	; 6
    a250:	59 f0       	breq	.+22     	; 0xa268 <richochet+0x2c>
    a252:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    a254:	80 81       	ld	r24, Z
    a256:	8d 7f       	andi	r24, 0xFD	; 253
    a258:	29 f4       	brne	.+10     	; 0xa264 <richochet+0x28>
				sprite->direction = D_RIGHT;
    a25a:	81 e0       	ldi	r24, 0x01	; 1
    a25c:	09 c0       	rjmp	.+18     	; 0xa270 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    a25e:	80 81       	ld	r24, Z
    a260:	8d 7f       	andi	r24, 0xFD	; 253
    a262:	29 f0       	breq	.+10     	; 0xa26e <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    a264:	82 e0       	ldi	r24, 0x02	; 2
    a266:	04 c0       	rjmp	.+8      	; 0xa270 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    a268:	80 81       	ld	r24, Z
    a26a:	8d 7f       	andi	r24, 0xFD	; 253
    a26c:	31 f4       	brne	.+12     	; 0xa27a <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    a26e:	83 e0       	ldi	r24, 0x03	; 3
    a270:	80 83       	st	Z, r24
    a272:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    a274:	80 81       	ld	r24, Z
    a276:	8d 7f       	andi	r24, 0xFD	; 253
    a278:	81 f3       	breq	.-32     	; 0xa25a <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    a27a:	10 82       	st	Z, r1
    a27c:	08 95       	ret

0000a27e <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    a27e:	2f 92       	push	r2
    a280:	3f 92       	push	r3
    a282:	4f 92       	push	r4
    a284:	5f 92       	push	r5
    a286:	6f 92       	push	r6
    a288:	7f 92       	push	r7
    a28a:	8f 92       	push	r8
    a28c:	9f 92       	push	r9
    a28e:	af 92       	push	r10
    a290:	bf 92       	push	r11
    a292:	cf 92       	push	r12
    a294:	df 92       	push	r13
    a296:	ef 92       	push	r14
    a298:	ff 92       	push	r15
    a29a:	0f 93       	push	r16
    a29c:	1f 93       	push	r17
    a29e:	cf 93       	push	r28
    a2a0:	df 93       	push	r29
    a2a2:	00 d0       	rcall	.+0      	; 0xa2a4 <collision_detect_shot+0x26>
    a2a4:	00 d0       	rcall	.+0      	; 0xa2a6 <collision_detect_shot+0x28>
    a2a6:	1f 92       	push	r1
    a2a8:	cd b7       	in	r28, 0x3d	; 61
    a2aa:	de b7       	in	r29, 0x3e	; 62
    a2ac:	3c 01       	movw	r6, r24
    a2ae:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    a2b0:	1a 82       	std	Y+2, r1	; 0x02
    a2b2:	19 82       	std	Y+1, r1	; 0x01
    a2b4:	1c 82       	std	Y+4, r1	; 0x04
    a2b6:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    a2b8:	20 e0       	ldi	r18, 0x00	; 0
    a2ba:	30 e0       	ldi	r19, 0x00	; 0
    a2bc:	40 e0       	ldi	r20, 0x00	; 0
    a2be:	5e e3       	ldi	r21, 0x3E	; 62
    a2c0:	db 01       	movw	r26, r22
    a2c2:	17 96       	adiw	r26, 0x07	; 7
    a2c4:	6d 91       	ld	r22, X+
    a2c6:	7d 91       	ld	r23, X+
    a2c8:	8d 91       	ld	r24, X+
    a2ca:	9c 91       	ld	r25, X
    a2cc:	1a 97       	sbiw	r26, 0x0a	; 10
    a2ce:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    a2d2:	20 e0       	ldi	r18, 0x00	; 0
    a2d4:	30 e0       	ldi	r19, 0x00	; 0
    a2d6:	40 e4       	ldi	r20, 0x40	; 64
    a2d8:	50 e4       	ldi	r21, 0x40	; 64
    a2da:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    a2de:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a2e2:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    a2e4:	20 e0       	ldi	r18, 0x00	; 0
    a2e6:	30 e0       	ldi	r19, 0x00	; 0
    a2e8:	40 e0       	ldi	r20, 0x00	; 0
    a2ea:	5e e3       	ldi	r21, 0x3E	; 62
    a2ec:	f4 01       	movw	r30, r8
    a2ee:	63 81       	ldd	r22, Z+3	; 0x03
    a2f0:	74 81       	ldd	r23, Z+4	; 0x04
    a2f2:	85 81       	ldd	r24, Z+5	; 0x05
    a2f4:	96 81       	ldd	r25, Z+6	; 0x06
    a2f6:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    a2fa:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    a2fe:	d4 01       	movw	r26, r8
    a300:	2c 91       	ld	r18, X
    a302:	41 2f       	mov	r20, r17
    a304:	ce 01       	movw	r24, r28
    a306:	01 96       	adiw	r24, 0x01	; 1
    a308:	0e 94 bc 50 	call	0xa178	; 0xa178 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    a30c:	c4 01       	movw	r24, r8
    a30e:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <collision_detect_boundries>
    a312:	88 23       	and	r24, r24
    a314:	69 f0       	breq	.+26     	; 0xa330 <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    a316:	f4 01       	movw	r30, r8
    a318:	63 85       	ldd	r22, Z+11	; 0x0b
    a31a:	c4 01       	movw	r24, r8
    a31c:	0e 94 98 49 	call	0x9330	; 0x9330 <init_shot_state>
		player->active_shots--;
    a320:	d3 01       	movw	r26, r6
    a322:	51 96       	adiw	r26, 0x11	; 17
    a324:	8c 91       	ld	r24, X
    a326:	51 97       	sbiw	r26, 0x11	; 17
    a328:	81 50       	subi	r24, 0x01	; 1
    a32a:	51 96       	adiw	r26, 0x11	; 17
    a32c:	8c 93       	st	X, r24
		return;
    a32e:	63 c1       	rjmp	.+710    	; 0xa5f6 <collision_detect_shot+0x378>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    a330:	b4 01       	movw	r22, r8
    a332:	85 e2       	ldi	r24, 0x25	; 37
    a334:	9c e0       	ldi	r25, 0x0C	; 12
    a336:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <player_shot>
    a33a:	88 23       	and	r24, r24
    a33c:	b9 f0       	breq	.+46     	; 0xa36c <collision_detect_shot+0xee>
    a33e:	80 91 39 0c 	lds	r24, 0x0C39
    a342:	80 fd       	sbrc	r24, 0
    a344:	13 c0       	rjmp	.+38     	; 0xa36c <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    a346:	80 91 99 0f 	lds	r24, 0x0F99
    a34a:	8f 5f       	subi	r24, 0xFF	; 255
    a34c:	80 93 99 0f 	sts	0x0F99, r24
		player2.score++;
    a350:	80 91 98 0f 	lds	r24, 0x0F98
    a354:	8f 5f       	subi	r24, 0xFF	; 255
    a356:	80 93 98 0f 	sts	0x0F98, r24
		render_score(&player2, 15);
    a35a:	6f e0       	ldi	r22, 0x0F	; 15
    a35c:	89 e8       	ldi	r24, 0x89	; 137
    a35e:	9f e0       	ldi	r25, 0x0F	; 15
    a360:	0e 94 2f 4c 	call	0x985e	; 0x985e <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    a364:	05 e2       	ldi	r16, 0x25	; 37
    a366:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    a368:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    a36a:	29 c0       	rjmp	.+82     	; 0xa3be <collision_detect_shot+0x140>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    a36c:	b4 01       	movw	r22, r8
    a36e:	89 e8       	ldi	r24, 0x89	; 137
    a370:	9f e0       	ldi	r25, 0x0F	; 15
    a372:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <player_shot>
    a376:	81 11       	cpse	r24, r1
    a378:	0b c0       	rjmp	.+22     	; 0xa390 <collision_detect_shot+0x112>
    a37a:	fe 01       	movw	r30, r28
    a37c:	31 96       	adiw	r30, 0x01	; 1
    a37e:	2f 01       	movw	r4, r30
    a380:	1d 82       	std	Y+5, r1	; 0x05
    a382:	f1 2c       	mov	r15, r1
    a384:	d1 2c       	mov	r13, r1
    a386:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a388:	6e e1       	ldi	r22, 0x1E	; 30
    a38a:	26 2e       	mov	r2, r22
    a38c:	31 2c       	mov	r3, r1
    a38e:	5e c0       	rjmp	.+188    	; 0xa44c <collision_detect_shot+0x1ce>
		hud_x = 0;
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    a390:	80 91 9d 0f 	lds	r24, 0x0F9D
    a394:	80 fd       	sbrc	r24, 0
    a396:	f1 cf       	rjmp	.-30     	; 0xa37a <collision_detect_shot+0xfc>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    a398:	80 91 35 0c 	lds	r24, 0x0C35
    a39c:	8f 5f       	subi	r24, 0xFF	; 255
    a39e:	80 93 35 0c 	sts	0x0C35, r24
		player1.score++;
    a3a2:	80 91 34 0c 	lds	r24, 0x0C34
    a3a6:	8f 5f       	subi	r24, 0xFF	; 255
    a3a8:	80 93 34 0c 	sts	0x0C34, r24
		render_score(&player1, 0);
    a3ac:	60 e0       	ldi	r22, 0x00	; 0
    a3ae:	85 e2       	ldi	r24, 0x25	; 37
    a3b0:	9c e0       	ldi	r25, 0x0C	; 12
    a3b2:	0e 94 2f 4c 	call	0x985e	; 0x985e <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
	{
		p = &player2;
    a3b6:	09 e8       	ldi	r16, 0x89	; 137
    a3b8:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    a3ba:	5f e0       	ldi	r21, 0x0F	; 15
    a3bc:	f5 2e       	mov	r15, r21
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    a3be:	01 15       	cp	r16, r1
    a3c0:	11 05       	cpc	r17, r1
    a3c2:	d9 f2       	breq	.-74     	; 0xa37a <collision_detect_shot+0xfc>
	{
		init_shot_state(shot, shot->shot_type);
    a3c4:	d4 01       	movw	r26, r8
    a3c6:	1b 96       	adiw	r26, 0x0b	; 11
    a3c8:	6c 91       	ld	r22, X
    a3ca:	c4 01       	movw	r24, r8
    a3cc:	0e 94 98 49 	call	0x9330	; 0x9330 <init_shot_state>
		player->active_shots--;
    a3d0:	f3 01       	movw	r30, r6
    a3d2:	81 89       	ldd	r24, Z+17	; 0x11
    a3d4:	81 50       	subi	r24, 0x01	; 1
    a3d6:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    a3d8:	6f 2d       	mov	r22, r15
    a3da:	c8 01       	movw	r24, r16
    a3dc:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <kill_player>
		SFX_TANK_EXPLODE;
    a3e0:	2f ef       	ldi	r18, 0xFF	; 255
    a3e2:	40 e1       	ldi	r20, 0x10	; 16
    a3e4:	6a e0       	ldi	r22, 0x0A	; 10
    a3e6:	04 c1       	rjmp	.+520    	; 0xa5f0 <collision_detect_shot+0x372>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    a3e8:	c5 01       	movw	r24, r10
    a3ea:	0e 94 ba 4e 	call	0x9d74	; 0x9d74 <solid_directional_tile>
    a3ee:	88 23       	and	r24, r24
    a3f0:	c1 f1       	breq	.+112    	; 0xa462 <collision_detect_shot+0x1e4>
    a3f2:	20 e0       	ldi	r18, 0x00	; 0
    a3f4:	30 e0       	ldi	r19, 0x00	; 0
    a3f6:	40 e0       	ldi	r20, 0x00	; 0
    a3f8:	50 e4       	ldi	r21, 0x40	; 64
    a3fa:	f4 01       	movw	r30, r8
    a3fc:	67 81       	ldd	r22, Z+7	; 0x07
    a3fe:	70 85       	ldd	r23, Z+8	; 0x08
    a400:	81 85       	ldd	r24, Z+9	; 0x09
    a402:	92 85       	ldd	r25, Z+10	; 0x0a
    a404:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    a408:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a40c:	c6 2e       	mov	r12, r22
    a40e:	20 e0       	ldi	r18, 0x00	; 0
    a410:	30 e0       	ldi	r19, 0x00	; 0
    a412:	40 e0       	ldi	r20, 0x00	; 0
    a414:	50 e4       	ldi	r21, 0x40	; 64
    a416:	d4 01       	movw	r26, r8
    a418:	13 96       	adiw	r26, 0x03	; 3
    a41a:	6d 91       	ld	r22, X+
    a41c:	7d 91       	ld	r23, X+
    a41e:	8d 91       	ld	r24, X+
    a420:	9c 91       	ld	r25, X
    a422:	16 97       	sbiw	r26, 0x06	; 6
    a424:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    a428:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a42c:	04 e0       	ldi	r16, 0x04	; 4
    a42e:	24 e0       	ldi	r18, 0x04	; 4
    a430:	4c 2d       	mov	r20, r12
    a432:	c5 01       	movw	r24, r10
    a434:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <collides_directional_tile>
    a438:	88 23       	and	r24, r24
    a43a:	99 f0       	breq	.+38     	; 0xa462 <collision_detect_shot+0x1e4>
		{
			hit = hit | HIT_ANGLE;
    a43c:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    a43e:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    a440:	bd 81       	ldd	r27, Y+5	; 0x05
    a442:	b1 30       	cpi	r27, 0x01	; 1
    a444:	09 f4       	brne	.+2      	; 0xa448 <collision_detect_shot+0x1ca>
    a446:	88 c0       	rjmp	.+272    	; 0xa558 <collision_detect_shot+0x2da>
    a448:	f1 e0       	ldi	r31, 0x01	; 1
    a44a:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    a44c:	d2 01       	movw	r26, r4
    a44e:	ad 90       	ld	r10, X+
    a450:	bd 90       	ld	r11, X+
    a452:	2d 01       	movw	r4, r26
    a454:	f5 01       	movw	r30, r10
    a456:	e6 56       	subi	r30, 0x66	; 102
    a458:	f3 4f       	sbci	r31, 0xF3	; 243
    a45a:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    a45c:	ee 20       	and	r14, r14
    a45e:	81 f3       	breq	.-32     	; 0xa440 <collision_detect_shot+0x1c2>
    a460:	c3 cf       	rjmp	.-122    	; 0xa3e8 <collision_detect_shot+0x16a>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a462:	b1 e0       	ldi	r27, 0x01	; 1
    a464:	eb 12       	cpse	r14, r27
    a466:	3b c0       	rjmp	.+118    	; 0xa4de <collision_detect_shot+0x260>
    a468:	c5 01       	movw	r24, r10
    a46a:	b1 01       	movw	r22, r2
    a46c:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a470:	6d 5f       	subi	r22, 0xFD	; 253
    a472:	7f 4f       	sbci	r23, 0xFF	; 255
    a474:	e6 2e       	mov	r14, r22
    a476:	ee 0c       	add	r14, r14
    a478:	ee 0c       	add	r14, r14
    a47a:	ee 0c       	add	r14, r14
    a47c:	08 2f       	mov	r16, r24
    a47e:	00 0f       	add	r16, r16
    a480:	00 0f       	add	r16, r16
    a482:	00 0f       	add	r16, r16
    a484:	20 e0       	ldi	r18, 0x00	; 0
    a486:	30 e0       	ldi	r19, 0x00	; 0
    a488:	40 e0       	ldi	r20, 0x00	; 0
    a48a:	50 e4       	ldi	r21, 0x40	; 64
    a48c:	f4 01       	movw	r30, r8
    a48e:	67 81       	ldd	r22, Z+7	; 0x07
    a490:	70 85       	ldd	r23, Z+8	; 0x08
    a492:	81 85       	ldd	r24, Z+9	; 0x09
    a494:	92 85       	ldd	r25, Z+10	; 0x0a
    a496:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    a49a:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a49e:	b6 2e       	mov	r11, r22
    a4a0:	20 e0       	ldi	r18, 0x00	; 0
    a4a2:	30 e0       	ldi	r19, 0x00	; 0
    a4a4:	40 e0       	ldi	r20, 0x00	; 0
    a4a6:	50 e4       	ldi	r21, 0x40	; 64
    a4a8:	d4 01       	movw	r26, r8
    a4aa:	13 96       	adiw	r26, 0x03	; 3
    a4ac:	6d 91       	ld	r22, X+
    a4ae:	7d 91       	ld	r23, X+
    a4b0:	8d 91       	ld	r24, X+
    a4b2:	9c 91       	ld	r25, X
    a4b4:	16 97       	sbiw	r26, 0x06	; 6
    a4b6:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    a4ba:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a4be:	86 2f       	mov	r24, r22
    a4c0:	38 e0       	ldi	r19, 0x08	; 8
    a4c2:	a3 2e       	mov	r10, r19
    a4c4:	48 e0       	ldi	r20, 0x08	; 8
    a4c6:	c4 2e       	mov	r12, r20
    a4c8:	24 e0       	ldi	r18, 0x04	; 4
    a4ca:	44 e0       	ldi	r20, 0x04	; 4
    a4cc:	6b 2d       	mov	r22, r11
    a4ce:	0e 94 19 48 	call	0x9032	; 0x9032 <LBCollides>
    a4d2:	88 23       	and	r24, r24
    a4d4:	09 f4       	brne	.+2      	; 0xa4d8 <collision_detect_shot+0x25a>
    a4d6:	b4 cf       	rjmp	.-152    	; 0xa440 <collision_detect_shot+0x1c2>
		{
			hit = hit | HIT_BRICK;
    a4d8:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    a4da:	dd 80       	ldd	r13, Y+5	; 0x05
    a4dc:	b1 cf       	rjmp	.-158    	; 0xa440 <collision_detect_shot+0x1c2>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a4de:	b2 e0       	ldi	r27, 0x02	; 2
    a4e0:	eb 12       	cpse	r14, r27
    a4e2:	ae cf       	rjmp	.-164    	; 0xa440 <collision_detect_shot+0x1c2>
    a4e4:	c5 01       	movw	r24, r10
    a4e6:	b1 01       	movw	r22, r2
    a4e8:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a4ec:	6d 5f       	subi	r22, 0xFD	; 253
    a4ee:	7f 4f       	sbci	r23, 0xFF	; 255
    a4f0:	e6 2e       	mov	r14, r22
    a4f2:	ee 0c       	add	r14, r14
    a4f4:	ee 0c       	add	r14, r14
    a4f6:	ee 0c       	add	r14, r14
    a4f8:	08 2f       	mov	r16, r24
    a4fa:	00 0f       	add	r16, r16
    a4fc:	00 0f       	add	r16, r16
    a4fe:	00 0f       	add	r16, r16
    a500:	20 e0       	ldi	r18, 0x00	; 0
    a502:	30 e0       	ldi	r19, 0x00	; 0
    a504:	40 e0       	ldi	r20, 0x00	; 0
    a506:	50 e4       	ldi	r21, 0x40	; 64
    a508:	f4 01       	movw	r30, r8
    a50a:	67 81       	ldd	r22, Z+7	; 0x07
    a50c:	70 85       	ldd	r23, Z+8	; 0x08
    a50e:	81 85       	ldd	r24, Z+9	; 0x09
    a510:	92 85       	ldd	r25, Z+10	; 0x0a
    a512:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    a516:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a51a:	b6 2e       	mov	r11, r22
    a51c:	20 e0       	ldi	r18, 0x00	; 0
    a51e:	30 e0       	ldi	r19, 0x00	; 0
    a520:	40 e0       	ldi	r20, 0x00	; 0
    a522:	50 e4       	ldi	r21, 0x40	; 64
    a524:	d4 01       	movw	r26, r8
    a526:	13 96       	adiw	r26, 0x03	; 3
    a528:	6d 91       	ld	r22, X+
    a52a:	7d 91       	ld	r23, X+
    a52c:	8d 91       	ld	r24, X+
    a52e:	9c 91       	ld	r25, X
    a530:	16 97       	sbiw	r26, 0x06	; 6
    a532:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    a536:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a53a:	86 2f       	mov	r24, r22
    a53c:	98 e0       	ldi	r25, 0x08	; 8
    a53e:	a9 2e       	mov	r10, r25
    a540:	28 e0       	ldi	r18, 0x08	; 8
    a542:	c2 2e       	mov	r12, r18
    a544:	24 e0       	ldi	r18, 0x04	; 4
    a546:	44 e0       	ldi	r20, 0x04	; 4
    a548:	6b 2d       	mov	r22, r11
    a54a:	0e 94 19 48 	call	0x9032	; 0x9032 <LBCollides>
    a54e:	88 23       	and	r24, r24
    a550:	09 f4       	brne	.+2      	; 0xa554 <collision_detect_shot+0x2d6>
    a552:	76 cf       	rjmp	.-276    	; 0xa440 <collision_detect_shot+0x1c2>
        {
		    hit = hit | HIT_METAL;
    a554:	11 60       	ori	r17, 0x01	; 1
    a556:	74 cf       	rjmp	.-280    	; 0xa440 <collision_detect_shot+0x1c2>
        }
	}
	
	if (hit & HIT_ANGLE)
    a558:	12 ff       	sbrs	r17, 2
    a55a:	0e c0       	rjmp	.+28     	; 0xa578 <collision_detect_shot+0x2fa>
	{
		recoil_sprite_fine(&shot->shared);
    a55c:	c4 01       	movw	r24, r8
    a55e:	0e 94 2a 4e 	call	0x9c54	; 0x9c54 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    a562:	b4 01       	movw	r22, r8
    a564:	8f 2d       	mov	r24, r15
    a566:	0e 94 1e 51 	call	0xa23c	; 0xa23c <richochet>
		shot->rebounds--;
    a56a:	f4 01       	movw	r30, r8
    a56c:	85 85       	ldd	r24, Z+13	; 0x0d
    a56e:	81 50       	subi	r24, 0x01	; 1
    a570:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    a572:	81 11       	cpse	r24, r1
    a574:	3a c0       	rjmp	.+116    	; 0xa5ea <collision_detect_shot+0x36c>
    a576:	2e c0       	rjmp	.+92     	; 0xa5d4 <collision_detect_shot+0x356>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_METAL;
	}
	else if (hit & HIT_BRICK)
    a578:	11 ff       	sbrs	r17, 1
    a57a:	29 c0       	rjmp	.+82     	; 0xa5ce <collision_detect_shot+0x350>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    a57c:	fe 01       	movw	r30, r28
    a57e:	31 96       	adiw	r30, 0x01	; 1
    a580:	7f 01       	movw	r14, r30
    a582:	ed 0c       	add	r14, r13
    a584:	f1 1c       	adc	r15, r1
    a586:	ed 0c       	add	r14, r13
    a588:	f1 1c       	adc	r15, r1
    a58a:	d7 01       	movw	r26, r14
    a58c:	6d 91       	ld	r22, X+
    a58e:	7c 91       	ld	r23, X
    a590:	8c e0       	ldi	r24, 0x0C	; 12
    a592:	9c e0       	ldi	r25, 0x0C	; 12
    a594:	0e 94 e0 50 	call	0xa1c0	; 0xa1c0 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    a598:	d7 01       	movw	r26, r14
    a59a:	ed 91       	ld	r30, X+
    a59c:	fc 91       	ld	r31, X
    a59e:	e6 56       	subi	r30, 0x66	; 102
    a5a0:	f3 4f       	sbci	r31, 0xF3	; 243
    a5a2:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    a5a4:	f4 01       	movw	r30, r8
    a5a6:	84 85       	ldd	r24, Z+12	; 0x0c
    a5a8:	81 50       	subi	r24, 0x01	; 1
    a5aa:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    a5ac:	81 11       	cpse	r24, r1
    a5ae:	0b c0       	rjmp	.+22     	; 0xa5c6 <collision_detect_shot+0x348>
		{
			init_shot_state(shot, shot->shot_type);
    a5b0:	63 85       	ldd	r22, Z+11	; 0x0b
    a5b2:	c4 01       	movw	r24, r8
    a5b4:	0e 94 98 49 	call	0x9330	; 0x9330 <init_shot_state>
			player->active_shots--;
    a5b8:	d3 01       	movw	r26, r6
    a5ba:	51 96       	adiw	r26, 0x11	; 17
    a5bc:	8c 91       	ld	r24, X
    a5be:	51 97       	sbiw	r26, 0x11	; 17
    a5c0:	81 50       	subi	r24, 0x01	; 1
    a5c2:	51 96       	adiw	r26, 0x11	; 17
    a5c4:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    a5c6:	2f ed       	ldi	r18, 0xDF	; 223
    a5c8:	47 e1       	ldi	r20, 0x17	; 23
    a5ca:	61 e0       	ldi	r22, 0x01	; 1
    a5cc:	11 c0       	rjmp	.+34     	; 0xa5f0 <collision_detect_shot+0x372>
	}
	else if (hit & HIT_METAL)
    a5ce:	10 ff       	sbrs	r17, 0
    a5d0:	12 c0       	rjmp	.+36     	; 0xa5f6 <collision_detect_shot+0x378>
	{
        init_shot_state(shot, shot->shot_type);
    a5d2:	f4 01       	movw	r30, r8
    a5d4:	63 85       	ldd	r22, Z+11	; 0x0b
    a5d6:	c4 01       	movw	r24, r8
    a5d8:	0e 94 98 49 	call	0x9330	; 0x9330 <init_shot_state>
        player->active_shots--;
    a5dc:	d3 01       	movw	r26, r6
    a5de:	51 96       	adiw	r26, 0x11	; 17
    a5e0:	8c 91       	ld	r24, X
    a5e2:	51 97       	sbiw	r26, 0x11	; 17
    a5e4:	81 50       	subi	r24, 0x01	; 1
    a5e6:	51 96       	adiw	r26, 0x11	; 17
    a5e8:	8c 93       	st	X, r24
        SFX_METAL;
    a5ea:	2f ef       	ldi	r18, 0xFF	; 255
    a5ec:	47 e1       	ldi	r20, 0x17	; 23
    a5ee:	66 e0       	ldi	r22, 0x06	; 6
    a5f0:	84 e0       	ldi	r24, 0x04	; 4
    a5f2:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
	}
}
    a5f6:	0f 90       	pop	r0
    a5f8:	0f 90       	pop	r0
    a5fa:	0f 90       	pop	r0
    a5fc:	0f 90       	pop	r0
    a5fe:	0f 90       	pop	r0
    a600:	df 91       	pop	r29
    a602:	cf 91       	pop	r28
    a604:	1f 91       	pop	r17
    a606:	0f 91       	pop	r16
    a608:	ff 90       	pop	r15
    a60a:	ef 90       	pop	r14
    a60c:	df 90       	pop	r13
    a60e:	cf 90       	pop	r12
    a610:	bf 90       	pop	r11
    a612:	af 90       	pop	r10
    a614:	9f 90       	pop	r9
    a616:	8f 90       	pop	r8
    a618:	7f 90       	pop	r7
    a61a:	6f 90       	pop	r6
    a61c:	5f 90       	pop	r5
    a61e:	4f 90       	pop	r4
    a620:	3f 90       	pop	r3
    a622:	2f 90       	pop	r2
    a624:	08 95       	ret

0000a626 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    a626:	fc 01       	movw	r30, r24
    a628:	8e e1       	ldi	r24, 0x1E	; 30
    a62a:	48 9f       	mul	r20, r24
    a62c:	a0 01       	movw	r20, r0
    a62e:	11 24       	eor	r1, r1
    a630:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    a632:	64 0f       	add	r22, r20
    a634:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    a636:	21 11       	cpse	r18, r1
    a638:	09 c0       	rjmp	.+18     	; 0xa64c <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    a63a:	71 83       	std	Z+1, r23	; 0x01
    a63c:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    a63e:	cb 01       	movw	r24, r22
    a640:	01 96       	adiw	r24, 0x01	; 1
    a642:	93 83       	std	Z+3, r25	; 0x03
    a644:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a646:	6e 5f       	subi	r22, 0xFE	; 254
    a648:	7f 4f       	sbci	r23, 0xFF	; 255
    a64a:	1c c0       	rjmp	.+56     	; 0xa684 <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    a64c:	21 30       	cpi	r18, 0x01	; 1
    a64e:	31 f4       	brne	.+12     	; 0xa65c <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    a650:	cb 01       	movw	r24, r22
    a652:	02 96       	adiw	r24, 0x02	; 2
    a654:	91 83       	std	Z+1, r25	; 0x01
    a656:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    a658:	4e 96       	adiw	r24, 0x1e	; 30
    a65a:	07 c0       	rjmp	.+14     	; 0xa66a <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    a65c:	22 30       	cpi	r18, 0x02	; 2
    a65e:	51 f4       	brne	.+20     	; 0xa674 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    a660:	cb 01       	movw	r24, r22
    a662:	cc 96       	adiw	r24, 0x3c	; 60
    a664:	91 83       	std	Z+1, r25	; 0x01
    a666:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    a668:	01 96       	adiw	r24, 0x01	; 1
    a66a:	93 83       	std	Z+3, r25	; 0x03
    a66c:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a66e:	62 5c       	subi	r22, 0xC2	; 194
    a670:	7f 4f       	sbci	r23, 0xFF	; 255
    a672:	08 c0       	rjmp	.+16     	; 0xa684 <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    a674:	71 83       	std	Z+1, r23	; 0x01
    a676:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    a678:	cb 01       	movw	r24, r22
    a67a:	4e 96       	adiw	r24, 0x1e	; 30
    a67c:	93 83       	std	Z+3, r25	; 0x03
    a67e:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    a680:	64 5c       	subi	r22, 0xC4	; 196
    a682:	7f 4f       	sbci	r23, 0xFF	; 255
    a684:	75 83       	std	Z+5, r23	; 0x05
    a686:	64 83       	std	Z+4, r22	; 0x04
    a688:	08 95       	ret

0000a68a <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    a68a:	2f 92       	push	r2
    a68c:	3f 92       	push	r3
    a68e:	4f 92       	push	r4
    a690:	5f 92       	push	r5
    a692:	6f 92       	push	r6
    a694:	7f 92       	push	r7
    a696:	8f 92       	push	r8
    a698:	9f 92       	push	r9
    a69a:	af 92       	push	r10
    a69c:	bf 92       	push	r11
    a69e:	cf 92       	push	r12
    a6a0:	df 92       	push	r13
    a6a2:	ef 92       	push	r14
    a6a4:	ff 92       	push	r15
    a6a6:	0f 93       	push	r16
    a6a8:	1f 93       	push	r17
    a6aa:	cf 93       	push	r28
    a6ac:	df 93       	push	r29
    a6ae:	cd b7       	in	r28, 0x3d	; 61
    a6b0:	de b7       	in	r29, 0x3e	; 62
    a6b2:	2d 97       	sbiw	r28, 0x0d	; 13
    a6b4:	0f b6       	in	r0, 0x3f	; 63
    a6b6:	f8 94       	cli
    a6b8:	de bf       	out	0x3e, r29	; 62
    a6ba:	0f be       	out	0x3f, r0	; 63
    a6bc:	cd bf       	out	0x3d, r28	; 61
    a6be:	4c 01       	movw	r8, r24
    a6c0:	7a 87       	std	Y+10, r23	; 0x0a
    a6c2:	69 87       	std	Y+9, r22	; 0x09
    a6c4:	14 2f       	mov	r17, r20
    a6c6:	f2 2e       	mov	r15, r18
	int tiles[3] = {0,0,0};
    a6c8:	1a 82       	std	Y+2, r1	; 0x02
    a6ca:	19 82       	std	Y+1, r1	; 0x01
    a6cc:	1c 82       	std	Y+4, r1	; 0x04
    a6ce:	1b 82       	std	Y+3, r1	; 0x03
    a6d0:	1e 82       	std	Y+6, r1	; 0x06
    a6d2:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a6d4:	20 e0       	ldi	r18, 0x00	; 0
    a6d6:	30 e0       	ldi	r19, 0x00	; 0
    a6d8:	40 e0       	ldi	r20, 0x00	; 0
    a6da:	5e e3       	ldi	r21, 0x3E	; 62
    a6dc:	dc 01       	movw	r26, r24
    a6de:	17 96       	adiw	r26, 0x07	; 7
    a6e0:	6d 91       	ld	r22, X+
    a6e2:	7d 91       	ld	r23, X+
    a6e4:	8d 91       	ld	r24, X+
    a6e6:	9c 91       	ld	r25, X
    a6e8:	1a 97       	sbiw	r26, 0x0a	; 10
    a6ea:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    a6ee:	20 e0       	ldi	r18, 0x00	; 0
    a6f0:	30 e0       	ldi	r19, 0x00	; 0
    a6f2:	40 e4       	ldi	r20, 0x40	; 64
    a6f4:	50 e4       	ldi	r21, 0x40	; 64
    a6f6:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    a6fa:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a6fe:	06 2f       	mov	r16, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    a700:	20 e0       	ldi	r18, 0x00	; 0
    a702:	30 e0       	ldi	r19, 0x00	; 0
    a704:	40 e0       	ldi	r20, 0x00	; 0
    a706:	5e e3       	ldi	r21, 0x3E	; 62
    a708:	f4 01       	movw	r30, r8
    a70a:	63 81       	ldd	r22, Z+3	; 0x03
    a70c:	74 81       	ldd	r23, Z+4	; 0x04
    a70e:	85 81       	ldd	r24, Z+5	; 0x05
    a710:	96 81       	ldd	r25, Z+6	; 0x06
    a712:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    a716:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	u8 hit_water = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    a71a:	d4 01       	movw	r26, r8
    a71c:	2c 91       	ld	r18, X
    a71e:	40 2f       	mov	r20, r16
    a720:	ce 01       	movw	r24, r28
    a722:	01 96       	adiw	r24, 0x01	; 1
    a724:	0e 94 13 53 	call	0xa626	; 0xa626 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    a728:	c4 01       	movw	r24, r8
    a72a:	0e 94 d3 4f 	call	0x9fa6	; 0x9fa6 <collision_detect_boundries>
    a72e:	88 23       	and	r24, r24
    a730:	31 f0       	breq	.+12     	; 0xa73e <collision_detect_player+0xb4>
	{
		recoil_sprite(&player->shared);
    a732:	c4 01       	movw	r24, r8
    a734:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <recoil_sprite>
		player->shared.speed = 0;
    a738:	f4 01       	movw	r30, r8
    a73a:	11 82       	std	Z+1, r1	; 0x01
    a73c:	31 c1       	rjmp	.+610    	; 0xa9a0 <collision_detect_player+0x316>
    a73e:	ce 01       	movw	r24, r28
    a740:	01 96       	adiw	r24, 0x01	; 1
    a742:	3c 01       	movw	r6, r24
    a744:	de 01       	movw	r26, r28
    a746:	17 96       	adiw	r26, 0x07	; 7
    a748:	b8 87       	std	Y+8, r27	; 0x08
    a74a:	af 83       	std	Y+7, r26	; 0x07
	u8 hit_water = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    a74c:	d1 2c       	mov	r13, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a74e:	5e e1       	ldi	r21, 0x1E	; 30
    a750:	25 2e       	mov	r2, r21
    a752:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a754:	bb e0       	ldi	r27, 0x0B	; 11
    a756:	b1 0f       	add	r27, r17
    a758:	bb 87       	std	Y+11, r27	; 0x0b
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a75a:	ea e0       	ldi	r30, 0x0A	; 10
    a75c:	e1 0f       	add	r30, r17
    a75e:	ec 87       	std	Y+12, r30	; 0x0c
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    a760:	d3 01       	movw	r26, r6
    a762:	4d 90       	ld	r4, X+
    a764:	5c 90       	ld	r5, X
    a766:	c2 01       	movw	r24, r4
    a768:	0e 94 ba 4e 	call	0x9d74	; 0x9d74 <solid_directional_tile>
    a76c:	88 23       	and	r24, r24
    a76e:	49 f1       	breq	.+82     	; 0xa7c2 <collision_detect_player+0x138>
    a770:	f4 01       	movw	r30, r8
    a772:	67 81       	ldd	r22, Z+7	; 0x07
    a774:	70 85       	ldd	r23, Z+8	; 0x08
    a776:	81 85       	ldd	r24, Z+9	; 0x09
    a778:	92 85       	ldd	r25, Z+10	; 0x0a
    a77a:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a77e:	46 2f       	mov	r20, r22
    a780:	d4 01       	movw	r26, r8
    a782:	13 96       	adiw	r26, 0x03	; 3
    a784:	6d 91       	ld	r22, X+
    a786:	7d 91       	ld	r23, X+
    a788:	8d 91       	ld	r24, X+
    a78a:	9c 91       	ld	r25, X
    a78c:	16 97       	sbiw	r26, 0x06	; 6
    a78e:	4d 87       	std	Y+13, r20	; 0x0d
    a790:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a794:	00 e1       	ldi	r16, 0x10	; 16
    a796:	20 e1       	ldi	r18, 0x10	; 16
    a798:	4d 85       	ldd	r20, Y+13	; 0x0d
    a79a:	c2 01       	movw	r24, r4
    a79c:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <collides_directional_tile>
    a7a0:	88 23       	and	r24, r24
    a7a2:	79 f0       	breq	.+30     	; 0xa7c2 <collision_detect_player+0x138>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(&player->shared);
    a7a4:	f4 01       	movw	r30, r8
    a7a6:	83 85       	ldd	r24, Z+11	; 0x0b
    a7a8:	89 30       	cpi	r24, 0x09	; 9
    a7aa:	21 f4       	brne	.+8      	; 0xa7b4 <collision_detect_player+0x12a>
    a7ac:	c4 01       	movw	r24, r8
    a7ae:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <recoil_sprite>
    a7b2:	03 c0       	rjmp	.+6      	; 0xa7ba <collision_detect_player+0x130>
    a7b4:	c4 01       	movw	r24, r8
    a7b6:	0e 94 2a 4e 	call	0x9c54	; 0x9c54 <recoil_sprite_fine>
			player->shared.speed = 0;
    a7ba:	d4 01       	movw	r26, r8
    a7bc:	11 96       	adiw	r26, 0x01	; 1
    a7be:	1c 92       	st	X, r1
    a7c0:	d9 c0       	rjmp	.+434    	; 0xa974 <collision_detect_player+0x2ea>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    a7c2:	c2 01       	movw	r24, r4
    a7c4:	0e 94 8e 4e 	call	0x9d1c	; 0x9d1c <solid_square_tile>
    a7c8:	88 23       	and	r24, r24
    a7ca:	89 f1       	breq	.+98     	; 0xa82e <collision_detect_player+0x1a4>
    a7cc:	c2 01       	movw	r24, r4
    a7ce:	b1 01       	movw	r22, r2
    a7d0:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a7d4:	6d 5f       	subi	r22, 0xFD	; 253
    a7d6:	7f 4f       	sbci	r23, 0xFF	; 255
    a7d8:	e6 2e       	mov	r14, r22
    a7da:	ee 0c       	add	r14, r14
    a7dc:	ee 0c       	add	r14, r14
    a7de:	ee 0c       	add	r14, r14
    a7e0:	08 2f       	mov	r16, r24
    a7e2:	00 0f       	add	r16, r16
    a7e4:	00 0f       	add	r16, r16
    a7e6:	00 0f       	add	r16, r16
    a7e8:	f4 01       	movw	r30, r8
    a7ea:	67 81       	ldd	r22, Z+7	; 0x07
    a7ec:	70 85       	ldd	r23, Z+8	; 0x08
    a7ee:	81 85       	ldd	r24, Z+9	; 0x09
    a7f0:	92 85       	ldd	r25, Z+10	; 0x0a
    a7f2:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a7f6:	b6 2e       	mov	r11, r22
    a7f8:	d4 01       	movw	r26, r8
    a7fa:	13 96       	adiw	r26, 0x03	; 3
    a7fc:	6d 91       	ld	r22, X+
    a7fe:	7d 91       	ld	r23, X+
    a800:	8d 91       	ld	r24, X+
    a802:	9c 91       	ld	r25, X
    a804:	16 97       	sbiw	r26, 0x06	; 6
    a806:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a80a:	86 2f       	mov	r24, r22
    a80c:	38 e0       	ldi	r19, 0x08	; 8
    a80e:	a3 2e       	mov	r10, r19
    a810:	48 e0       	ldi	r20, 0x08	; 8
    a812:	c4 2e       	mov	r12, r20
    a814:	20 e1       	ldi	r18, 0x10	; 16
    a816:	40 e1       	ldi	r20, 0x10	; 16
    a818:	6b 2d       	mov	r22, r11
    a81a:	0e 94 19 48 	call	0x9032	; 0x9032 <LBCollides>
    a81e:	88 23       	and	r24, r24
    a820:	31 f0       	breq	.+12     	; 0xa82e <collision_detect_player+0x1a4>
		{
			recoil_sprite(&player->shared);
    a822:	c4 01       	movw	r24, r8
    a824:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <recoil_sprite>
			player->shared.speed = 0;
    a828:	f4 01       	movw	r30, r8
    a82a:	11 82       	std	Z+1, r1	; 0x01
    a82c:	a3 c0       	rjmp	.+326    	; 0xa974 <collision_detect_player+0x2ea>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    a82e:	f2 01       	movw	r30, r4
    a830:	e6 56       	subi	r30, 0x66	; 102
    a832:	f3 4f       	sbci	r31, 0xF3	; 243
    a834:	81 81       	ldd	r24, Z+1	; 0x01
    a836:	8d 34       	cpi	r24, 0x4D	; 77
    a838:	89 f5       	brne	.+98     	; 0xa89c <collision_detect_player+0x212>
    a83a:	c2 01       	movw	r24, r4
    a83c:	b1 01       	movw	r22, r2
    a83e:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a842:	6d 5f       	subi	r22, 0xFD	; 253
    a844:	7f 4f       	sbci	r23, 0xFF	; 255
    a846:	e6 2e       	mov	r14, r22
    a848:	ee 0c       	add	r14, r14
    a84a:	ee 0c       	add	r14, r14
    a84c:	ee 0c       	add	r14, r14
    a84e:	08 2f       	mov	r16, r24
    a850:	00 0f       	add	r16, r16
    a852:	00 0f       	add	r16, r16
    a854:	00 0f       	add	r16, r16
    a856:	d4 01       	movw	r26, r8
    a858:	17 96       	adiw	r26, 0x07	; 7
    a85a:	6d 91       	ld	r22, X+
    a85c:	7d 91       	ld	r23, X+
    a85e:	8d 91       	ld	r24, X+
    a860:	9c 91       	ld	r25, X
    a862:	1a 97       	sbiw	r26, 0x0a	; 10
    a864:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a868:	b6 2e       	mov	r11, r22
    a86a:	f4 01       	movw	r30, r8
    a86c:	63 81       	ldd	r22, Z+3	; 0x03
    a86e:	74 81       	ldd	r23, Z+4	; 0x04
    a870:	85 81       	ldd	r24, Z+5	; 0x05
    a872:	96 81       	ldd	r25, Z+6	; 0x06
    a874:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    a878:	86 2f       	mov	r24, r22
    a87a:	98 e0       	ldi	r25, 0x08	; 8
    a87c:	a9 2e       	mov	r10, r25
    a87e:	28 e0       	ldi	r18, 0x08	; 8
    a880:	c2 2e       	mov	r12, r18
    a882:	20 e1       	ldi	r18, 0x10	; 16
    a884:	40 e1       	ldi	r20, 0x10	; 16
    a886:	6b 2d       	mov	r22, r11
    a888:	0e 94 19 48 	call	0x9032	; 0x9032 <LBCollides>
    a88c:	88 23       	and	r24, r24
    a88e:	09 f4       	brne	.+2      	; 0xa892 <collision_detect_player+0x208>
    a890:	71 c0       	rjmp	.+226    	; 0xa974 <collision_detect_player+0x2ea>
		{
			player->max_speed = WATER_SPEED;
    a892:	e9 e1       	ldi	r30, 0x19	; 25
    a894:	d4 01       	movw	r26, r8
    a896:	58 96       	adiw	r26, 0x18	; 24
    a898:	ec 93       	st	X, r30
    a89a:	77 c0       	rjmp	.+238    	; 0xa98a <collision_detect_player+0x300>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    a89c:	87 30       	cpi	r24, 0x07	; 7
    a89e:	99 f4       	brne	.+38     	; 0xa8c6 <collision_detect_player+0x23c>
    a8a0:	d4 01       	movw	r26, r8
    a8a2:	54 96       	adiw	r26, 0x14	; 20
    a8a4:	8c 91       	ld	r24, X
    a8a6:	54 97       	sbiw	r26, 0x14	; 20
    a8a8:	80 fd       	sbrc	r24, 0
    a8aa:	64 c0       	rjmp	.+200    	; 0xa974 <collision_detect_player+0x2ea>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a8ac:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    a8ae:	e1 e4       	ldi	r30, 0x41	; 65
    a8b0:	58 96       	adiw	r26, 0x18	; 24
    a8b2:	ec 93       	st	X, r30
    a8b4:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    a8b6:	f1 e0       	ldi	r31, 0x01	; 1
    a8b8:	5a 96       	adiw	r26, 0x1a	; 26
    a8ba:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a8bc:	41 ea       	ldi	r20, 0xA1	; 161
    a8be:	58 e6       	ldi	r21, 0x68	; 104
    a8c0:	61 e0       	ldi	r22, 0x01	; 1
    a8c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    a8c4:	10 c0       	rjmp	.+32     	; 0xa8e6 <collision_detect_player+0x25c>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    a8c6:	89 30       	cpi	r24, 0x09	; 9
    a8c8:	11 f5       	brne	.+68     	; 0xa90e <collision_detect_player+0x284>
    a8ca:	d4 01       	movw	r26, r8
    a8cc:	54 96       	adiw	r26, 0x14	; 20
    a8ce:	8c 91       	ld	r24, X
    a8d0:	54 97       	sbiw	r26, 0x14	; 20
    a8d2:	80 fd       	sbrc	r24, 0
    a8d4:	4f c0       	rjmp	.+158    	; 0xa974 <collision_detect_player+0x2ea>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a8d6:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    a8d8:	e1 e0       	ldi	r30, 0x01	; 1
    a8da:	59 96       	adiw	r26, 0x19	; 25
    a8dc:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a8de:	4b e9       	ldi	r20, 0x9B	; 155
    a8e0:	58 e6       	ldi	r21, 0x68	; 104
    a8e2:	61 e0       	ldi	r22, 0x01	; 1
    a8e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    a8e6:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a8ea:	d3 01       	movw	r26, r6
    a8ec:	8d 91       	ld	r24, X+
    a8ee:	9c 91       	ld	r25, X
    a8f0:	b1 01       	movw	r22, r2
    a8f2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a8f6:	6d 5f       	subi	r22, 0xFD	; 253
    a8f8:	40 e0       	ldi	r20, 0x00	; 0
    a8fa:	50 e0       	ldi	r21, 0x00	; 0
    a8fc:	0e 94 a8 38 	call	0x7150	; 0x7150 <SetTile>
			SFX_ITEM;
    a900:	2f ef       	ldi	r18, 0xFF	; 255
    a902:	47 e1       	ldi	r20, 0x17	; 23
    a904:	63 e0       	ldi	r22, 0x03	; 3
    a906:	84 e0       	ldi	r24, 0x04	; 4
    a908:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
    a90c:	33 c0       	rjmp	.+102    	; 0xa974 <collision_detect_player+0x2ea>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    a90e:	88 30       	cpi	r24, 0x08	; 8
    a910:	89 f5       	brne	.+98     	; 0xa974 <collision_detect_player+0x2ea>
    a912:	d4 01       	movw	r26, r8
    a914:	54 96       	adiw	r26, 0x14	; 20
    a916:	8c 91       	ld	r24, X
    a918:	80 fd       	sbrc	r24, 0
    a91a:	2c c0       	rjmp	.+88     	; 0xa974 <collision_detect_player+0x2ea>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a91c:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a91e:	c2 01       	movw	r24, r4
    a920:	b1 01       	movw	r22, r2
    a922:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    a926:	6d 5f       	subi	r22, 0xFD	; 253
    a928:	40 e0       	ldi	r20, 0x00	; 0
    a92a:	50 e0       	ldi	r21, 0x00	; 0
    a92c:	0e 94 a8 38 	call	0x7150	; 0x7150 <SetTile>
			SFX_ITEM;
    a930:	2f ef       	ldi	r18, 0xFF	; 255
    a932:	47 e1       	ldi	r20, 0x17	; 23
    a934:	63 e0       	ldi	r22, 0x03	; 3
    a936:	84 e0       	ldi	r24, 0x04	; 4
    a938:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
			if (!(other_player->flags & EXPLODING_FLAG))
    a93c:	e9 85       	ldd	r30, Y+9	; 0x09
    a93e:	fa 85       	ldd	r31, Y+10	; 0x0a
    a940:	84 89       	ldd	r24, Z+20	; 0x14
    a942:	80 fd       	sbrc	r24, 0
    a944:	17 c0       	rjmp	.+46     	; 0xa974 <collision_detect_player+0x2ea>
			{
				player->level_score++;
    a946:	d4 01       	movw	r26, r8
    a948:	50 96       	adiw	r26, 0x10	; 16
    a94a:	8c 91       	ld	r24, X
    a94c:	50 97       	sbiw	r26, 0x10	; 16
    a94e:	8f 5f       	subi	r24, 0xFF	; 255
    a950:	50 96       	adiw	r26, 0x10	; 16
    a952:	8c 93       	st	X, r24
    a954:	50 97       	sbiw	r26, 0x10	; 16
				player->score++;
    a956:	1f 96       	adiw	r26, 0x0f	; 15
    a958:	8c 91       	ld	r24, X
    a95a:	1f 97       	sbiw	r26, 0x0f	; 15
    a95c:	8f 5f       	subi	r24, 0xFF	; 255
    a95e:	1f 96       	adiw	r26, 0x0f	; 15
    a960:	8c 93       	st	X, r24
				render_score(player, hud_x);
    a962:	61 2f       	mov	r22, r17
    a964:	c4 01       	movw	r24, r8
    a966:	0e 94 2f 4c 	call	0x985e	; 0x985e <render_score>
				kill_player(other_player, other_player_hud_x);
    a96a:	6f 2d       	mov	r22, r15
    a96c:	89 85       	ldd	r24, Y+9	; 0x09
    a96e:	9a 85       	ldd	r25, Y+10	; 0x0a
    a970:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <kill_player>
			}
		}
		
		if (!hit_water)
    a974:	d1 10       	cpse	r13, r1
    a976:	09 c0       	rjmp	.+18     	; 0xa98a <collision_detect_player+0x300>
		{
			player->max_speed = MAX_SPEED;
    a978:	82 e3       	ldi	r24, 0x32	; 50
    a97a:	f4 01       	movw	r30, r8
    a97c:	80 8f       	std	Z+24, r24	; 0x18
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    a97e:	82 8d       	ldd	r24, Z+26	; 0x1a
    a980:	88 23       	and	r24, r24
    a982:	29 f0       	breq	.+10     	; 0xa98e <collision_detect_player+0x304>
    a984:	91 e4       	ldi	r25, 0x41	; 65
    a986:	90 8f       	std	Z+24, r25	; 0x18
    a988:	02 c0       	rjmp	.+4      	; 0xa98e <collision_detect_player+0x304>
    a98a:	dd 24       	eor	r13, r13
    a98c:	d3 94       	inc	r13
    a98e:	a2 e0       	ldi	r26, 0x02	; 2
    a990:	6a 0e       	add	r6, r26
    a992:	71 1c       	adc	r7, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    a994:	ef 81       	ldd	r30, Y+7	; 0x07
    a996:	f8 85       	ldd	r31, Y+8	; 0x08
    a998:	6e 16       	cp	r6, r30
    a99a:	7f 06       	cpc	r7, r31
    a99c:	09 f0       	breq	.+2      	; 0xa9a0 <collision_detect_player+0x316>
    a99e:	e0 ce       	rjmp	.-576    	; 0xa760 <collision_detect_player+0xd6>
		{
			player->max_speed = MAX_SPEED;
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
}
    a9a0:	2d 96       	adiw	r28, 0x0d	; 13
    a9a2:	0f b6       	in	r0, 0x3f	; 63
    a9a4:	f8 94       	cli
    a9a6:	de bf       	out	0x3e, r29	; 62
    a9a8:	0f be       	out	0x3f, r0	; 63
    a9aa:	cd bf       	out	0x3d, r28	; 61
    a9ac:	df 91       	pop	r29
    a9ae:	cf 91       	pop	r28
    a9b0:	1f 91       	pop	r17
    a9b2:	0f 91       	pop	r16
    a9b4:	ff 90       	pop	r15
    a9b6:	ef 90       	pop	r14
    a9b8:	df 90       	pop	r13
    a9ba:	cf 90       	pop	r12
    a9bc:	bf 90       	pop	r11
    a9be:	af 90       	pop	r10
    a9c0:	9f 90       	pop	r9
    a9c2:	8f 90       	pop	r8
    a9c4:	7f 90       	pop	r7
    a9c6:	6f 90       	pop	r6
    a9c8:	5f 90       	pop	r5
    a9ca:	4f 90       	pop	r4
    a9cc:	3f 90       	pop	r3
    a9ce:	2f 90       	pop	r2
    a9d0:	08 95       	ret

0000a9d2 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    a9d2:	ef 92       	push	r14
    a9d4:	ff 92       	push	r15
    a9d6:	1f 93       	push	r17
    a9d8:	cf 93       	push	r28
    a9da:	df 93       	push	r29
    a9dc:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a9de:	c0 e0       	ldi	r28, 0x00	; 0
    a9e0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    a9e2:	8e e1       	ldi	r24, 0x1E	; 30
    a9e4:	e8 2e       	mov	r14, r24
    a9e6:	f1 2c       	mov	r15, r1
    a9e8:	ce 01       	movw	r24, r28
    a9ea:	b7 01       	movw	r22, r14
    a9ec:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
		y = 3 + i / 30;
    a9f0:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    a9f2:	11 23       	and	r17, r17
    a9f4:	19 f0       	breq	.+6      	; 0xa9fc <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    a9f6:	4e e3       	ldi	r20, 0x3E	; 62
    a9f8:	59 e6       	ldi	r21, 0x69	; 105
    a9fa:	2b c0       	rjmp	.+86     	; 0xaa52 <load_level_tiles+0x80>
    a9fc:	fe 01       	movw	r30, r28
    a9fe:	e6 56       	subi	r30, 0x66	; 102
    aa00:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    aa02:	91 81       	ldd	r25, Z+1	; 0x01
    aa04:	96 30       	cpi	r25, 0x06	; 6
    aa06:	71 f1       	breq	.+92     	; 0xaa64 <load_level_tiles+0x92>
    aa08:	88 f4       	brcc	.+34     	; 0xaa2c <load_level_tiles+0x5a>
    aa0a:	93 30       	cpi	r25, 0x03	; 3
    aa0c:	29 f1       	breq	.+74     	; 0xaa58 <load_level_tiles+0x86>
    aa0e:	38 f4       	brcc	.+14     	; 0xaa1e <load_level_tiles+0x4c>
    aa10:	91 30       	cpi	r25, 0x01	; 1
    aa12:	e9 f0       	breq	.+58     	; 0xaa4e <load_level_tiles+0x7c>
    aa14:	92 30       	cpi	r25, 0x02	; 2
    aa16:	91 f5       	brne	.+100    	; 0xaa7c <load_level_tiles+0xaa>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    aa18:	44 ea       	ldi	r20, 0xA4	; 164
    aa1a:	58 e6       	ldi	r21, 0x68	; 104
    aa1c:	1a c0       	rjmp	.+52     	; 0xaa52 <load_level_tiles+0x80>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    aa1e:	94 30       	cpi	r25, 0x04	; 4
    aa20:	f1 f0       	breq	.+60     	; 0xaa5e <load_level_tiles+0x8c>
    aa22:	95 30       	cpi	r25, 0x05	; 5
    aa24:	59 f5       	brne	.+86     	; 0xaa7c <load_level_tiles+0xaa>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    aa26:	46 e8       	ldi	r20, 0x86	; 134
    aa28:	58 e6       	ldi	r21, 0x68	; 104
    aa2a:	13 c0       	rjmp	.+38     	; 0xaa52 <load_level_tiles+0x80>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    aa2c:	99 30       	cpi	r25, 0x09	; 9
    aa2e:	01 f1       	breq	.+64     	; 0xaa70 <load_level_tiles+0x9e>
    aa30:	38 f4       	brcc	.+14     	; 0xaa40 <load_level_tiles+0x6e>
    aa32:	97 30       	cpi	r25, 0x07	; 7
    aa34:	d1 f0       	breq	.+52     	; 0xaa6a <load_level_tiles+0x98>
    aa36:	98 30       	cpi	r25, 0x08	; 8
    aa38:	09 f5       	brne	.+66     	; 0xaa7c <load_level_tiles+0xaa>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    aa3a:	4e e9       	ldi	r20, 0x9E	; 158
    aa3c:	58 e6       	ldi	r21, 0x68	; 104
    aa3e:	09 c0       	rjmp	.+18     	; 0xaa52 <load_level_tiles+0x80>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    aa40:	92 34       	cpi	r25, 0x42	; 66
    aa42:	c9 f0       	breq	.+50     	; 0xaa76 <load_level_tiles+0xa4>
    aa44:	9d 34       	cpi	r25, 0x4D	; 77
    aa46:	d1 f4       	brne	.+52     	; 0xaa7c <load_level_tiles+0xaa>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
    aa48:	43 e8       	ldi	r20, 0x83	; 131
    aa4a:	58 e6       	ldi	r21, 0x68	; 104
    aa4c:	02 c0       	rjmp	.+4      	; 0xaa52 <load_level_tiles+0x80>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    aa4e:	47 ea       	ldi	r20, 0xA7	; 167
    aa50:	58 e6       	ldi	r21, 0x68	; 104
    aa52:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
    aa56:	16 c0       	rjmp	.+44     	; 0xaa84 <load_level_tiles+0xb2>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    aa58:	4f e8       	ldi	r20, 0x8F	; 143
    aa5a:	58 e6       	ldi	r21, 0x68	; 104
    aa5c:	fa cf       	rjmp	.-12     	; 0xaa52 <load_level_tiles+0x80>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    aa5e:	49 e8       	ldi	r20, 0x89	; 137
    aa60:	58 e6       	ldi	r21, 0x68	; 104
    aa62:	f7 cf       	rjmp	.-18     	; 0xaa52 <load_level_tiles+0x80>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    aa64:	4c e8       	ldi	r20, 0x8C	; 140
    aa66:	58 e6       	ldi	r21, 0x68	; 104
    aa68:	f4 cf       	rjmp	.-24     	; 0xaa52 <load_level_tiles+0x80>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    aa6a:	41 ea       	ldi	r20, 0xA1	; 161
    aa6c:	58 e6       	ldi	r21, 0x68	; 104
    aa6e:	f1 cf       	rjmp	.-30     	; 0xaa52 <load_level_tiles+0x80>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    aa70:	4b e9       	ldi	r20, 0x9B	; 155
    aa72:	58 e6       	ldi	r21, 0x68	; 104
    aa74:	ee cf       	rjmp	.-36     	; 0xaa52 <load_level_tiles+0x80>
				case L_TURF: DrawMap2(x, y, map_turf); break;
    aa76:	40 e8       	ldi	r20, 0x80	; 128
    aa78:	58 e6       	ldi	r21, 0x68	; 104
    aa7a:	eb cf       	rjmp	.-42     	; 0xaa52 <load_level_tiles+0x80>
				case L_WATER: DrawMap2(x, y, map_water); break;
				default : SetTile(x, y, 0); break;
    aa7c:	40 e0       	ldi	r20, 0x00	; 0
    aa7e:	50 e0       	ldi	r21, 0x00	; 0
    aa80:	0e 94 a8 38 	call	0x7150	; 0x7150 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    aa84:	21 96       	adiw	r28, 0x01	; 1
    aa86:	ce 3e       	cpi	r28, 0xEE	; 238
    aa88:	82 e0       	ldi	r24, 0x02	; 2
    aa8a:	d8 07       	cpc	r29, r24
    aa8c:	09 f0       	breq	.+2      	; 0xaa90 <load_level_tiles+0xbe>
    aa8e:	ac cf       	rjmp	.-168    	; 0xa9e8 <load_level_tiles+0x16>
				case L_WATER: DrawMap2(x, y, map_water); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    aa90:	df 91       	pop	r29
    aa92:	cf 91       	pop	r28
    aa94:	1f 91       	pop	r17
    aa96:	ff 90       	pop	r15
    aa98:	ef 90       	pop	r14
    aa9a:	08 95       	ret

0000aa9c <load_level>:

void load_level(int level_number)
{
    aa9c:	9f 92       	push	r9
    aa9e:	af 92       	push	r10
    aaa0:	bf 92       	push	r11
    aaa2:	cf 92       	push	r12
    aaa4:	df 92       	push	r13
    aaa6:	ef 92       	push	r14
    aaa8:	ff 92       	push	r15
    aaaa:	0f 93       	push	r16
    aaac:	1f 93       	push	r17
    aaae:	cf 93       	push	r28
    aab0:	df 93       	push	r29
    aab2:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    aab4:	8e ee       	ldi	r24, 0xEE	; 238
    aab6:	92 e0       	ldi	r25, 0x02	; 2
    aab8:	c8 9f       	mul	r28, r24
    aaba:	70 01       	movw	r14, r0
    aabc:	c9 9f       	mul	r28, r25
    aabe:	f0 0c       	add	r15, r0
    aac0:	d8 9f       	mul	r29, r24
    aac2:	f0 0c       	add	r15, r0
    aac4:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    aac6:	83 e0       	ldi	r24, 0x03	; 3
    aac8:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    aacc:	0e 94 a3 4a 	call	0x9546	; 0x9546 <clear_sprites>
	game.current_level = level_number;
    aad0:	c0 93 09 0c 	sts	0x0C09, r28
    aad4:	8b e9       	ldi	r24, 0x9B	; 155
    aad6:	c8 2e       	mov	r12, r24
    aad8:	8c e0       	ldi	r24, 0x0C	; 12
    aada:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    aadc:	c0 e0       	ldi	r28, 0x00	; 0
    aade:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    aae0:	0e e1       	ldi	r16, 0x1E	; 30
    aae2:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    aae4:	92 e3       	ldi	r25, 0x32	; 50
    aae6:	99 2e       	mov	r9, r25
    aae8:	fe 01       	movw	r30, r28
    aaea:	ee 0d       	add	r30, r14
    aaec:	ff 1d       	adc	r31, r15
    aaee:	ee 57       	subi	r30, 0x7E	; 126
    aaf0:	f6 4e       	sbci	r31, 0xE6	; 230
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    aaf2:	e4 91       	lpm	r30, Z
    aaf4:	56 01       	movw	r10, r12
    aaf6:	d6 01       	movw	r26, r12
    aaf8:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    aafa:	e8 35       	cpi	r30, 0x58	; 88
    aafc:	01 f5       	brne	.+64     	; 0xab3e <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    aafe:	ce 01       	movw	r24, r28
    ab00:	b8 01       	movw	r22, r16
    ab02:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    ab06:	88 0f       	add	r24, r24
    ab08:	88 0f       	add	r24, r24
    ab0a:	88 0f       	add	r24, r24
    ab0c:	80 93 37 0c 	sts	0x0C37, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    ab10:	6d 5f       	subi	r22, 0xFD	; 253
    ab12:	7f 4f       	sbci	r23, 0xFF	; 255
    ab14:	66 0f       	add	r22, r22
    ab16:	66 0f       	add	r22, r22
    ab18:	66 0f       	add	r22, r22
    ab1a:	60 93 38 0c 	sts	0x0C38, r22
			player1.level_score = 0;
    ab1e:	10 92 35 0c 	sts	0x0C35, r1
			player1.has_over_speed = false;
    ab22:	10 92 3f 0c 	sts	0x0C3F, r1
			player1.has_rocket = false;
    ab26:	10 92 3e 0c 	sts	0x0C3E, r1
			player1.max_speed = MAX_SPEED;
    ab2a:	90 92 3d 0c 	sts	0x0C3D, r9
			player_init_shot_state(&player1);
    ab2e:	85 e2       	ldi	r24, 0x25	; 37
    ab30:	9c e0       	ldi	r25, 0x0C	; 12
    ab32:	0e 94 4e 4a 	call	0x949c	; 0x949c <player_init_shot_state>
			player_spawn(&player1);
    ab36:	85 e2       	ldi	r24, 0x25	; 37
    ab38:	9c e0       	ldi	r25, 0x0C	; 12
    ab3a:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <player_spawn>
    ab3e:	bf ef       	ldi	r27, 0xFF	; 255
    ab40:	cb 1a       	sub	r12, r27
    ab42:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    ab44:	f5 01       	movw	r30, r10
    ab46:	80 81       	ld	r24, Z
    ab48:	83 36       	cpi	r24, 0x63	; 99
    ab4a:	01 f5       	brne	.+64     	; 0xab8c <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    ab4c:	ce 01       	movw	r24, r28
    ab4e:	b8 01       	movw	r22, r16
    ab50:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    ab54:	88 0f       	add	r24, r24
    ab56:	88 0f       	add	r24, r24
    ab58:	88 0f       	add	r24, r24
    ab5a:	80 93 9b 0f 	sts	0x0F9B, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    ab5e:	6d 5f       	subi	r22, 0xFD	; 253
    ab60:	7f 4f       	sbci	r23, 0xFF	; 255
    ab62:	66 0f       	add	r22, r22
    ab64:	66 0f       	add	r22, r22
    ab66:	66 0f       	add	r22, r22
    ab68:	60 93 9c 0f 	sts	0x0F9C, r22
			player2.level_score = 0;
    ab6c:	10 92 99 0f 	sts	0x0F99, r1
			player2.has_over_speed = false;
    ab70:	10 92 a3 0f 	sts	0x0FA3, r1
			player2.has_rocket = false;
    ab74:	10 92 a2 0f 	sts	0x0FA2, r1
			player2.max_speed = MAX_SPEED;
    ab78:	90 92 a1 0f 	sts	0x0FA1, r9
			player_init_shot_state(&player2);
    ab7c:	89 e8       	ldi	r24, 0x89	; 137
    ab7e:	9f e0       	ldi	r25, 0x0F	; 15
    ab80:	0e 94 4e 4a 	call	0x949c	; 0x949c <player_init_shot_state>
			player_spawn(&player2);
    ab84:	89 e8       	ldi	r24, 0x89	; 137
    ab86:	9f e0       	ldi	r25, 0x0F	; 15
    ab88:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    ab8c:	21 96       	adiw	r28, 0x01	; 1
    ab8e:	ce 3e       	cpi	r28, 0xEE	; 238
    ab90:	f2 e0       	ldi	r31, 0x02	; 2
    ab92:	df 07       	cpc	r29, r31
    ab94:	09 f0       	breq	.+2      	; 0xab98 <load_level+0xfc>
    ab96:	a8 cf       	rjmp	.-176    	; 0xaae8 <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    ab98:	60 e0       	ldi	r22, 0x00	; 0
    ab9a:	85 e2       	ldi	r24, 0x25	; 37
    ab9c:	9c e0       	ldi	r25, 0x0C	; 12
    ab9e:	0e 94 12 4c 	call	0x9824	; 0x9824 <render_hud>
	render_hud(&player2, 15);
    aba2:	6f e0       	ldi	r22, 0x0F	; 15
    aba4:	89 e8       	ldi	r24, 0x89	; 137
    aba6:	9f e0       	ldi	r25, 0x0F	; 15
    aba8:	0e 94 12 4c 	call	0x9824	; 0x9824 <render_hud>
	render_score(&player1, 0);
    abac:	60 e0       	ldi	r22, 0x00	; 0
    abae:	85 e2       	ldi	r24, 0x25	; 37
    abb0:	9c e0       	ldi	r25, 0x0C	; 12
    abb2:	0e 94 2f 4c 	call	0x985e	; 0x985e <render_score>
	render_score(&player2, 15);
    abb6:	6f e0       	ldi	r22, 0x0F	; 15
    abb8:	89 e8       	ldi	r24, 0x89	; 137
    abba:	9f e0       	ldi	r25, 0x0F	; 15
    abbc:	0e 94 2f 4c 	call	0x985e	; 0x985e <render_score>
	Print(14, 0, (char*) strVertSep);
    abc0:	47 ee       	ldi	r20, 0xE7	; 231
    abc2:	52 e0       	ldi	r21, 0x02	; 2
    abc4:	60 e0       	ldi	r22, 0x00	; 0
    abc6:	70 e0       	ldi	r23, 0x00	; 0
    abc8:	8e e0       	ldi	r24, 0x0E	; 14
    abca:	90 e0       	ldi	r25, 0x00	; 0
    abcc:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(14, 1, (char*) strVertSep);
    abd0:	47 ee       	ldi	r20, 0xE7	; 231
    abd2:	52 e0       	ldi	r21, 0x02	; 2
    abd4:	61 e0       	ldi	r22, 0x01	; 1
    abd6:	70 e0       	ldi	r23, 0x00	; 0
    abd8:	8e e0       	ldi	r24, 0x0E	; 14
    abda:	90 e0       	ldi	r25, 0x00	; 0
    abdc:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(14, 2, (char*) strVertSep);
    abe0:	47 ee       	ldi	r20, 0xE7	; 231
    abe2:	52 e0       	ldi	r21, 0x02	; 2
    abe4:	62 e0       	ldi	r22, 0x02	; 2
    abe6:	70 e0       	ldi	r23, 0x00	; 0
    abe8:	8e e0       	ldi	r24, 0x0E	; 14
    abea:	90 e0       	ldi	r25, 0x00	; 0
    abec:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	load_level_tiles(false);
    abf0:	80 e0       	ldi	r24, 0x00	; 0
    abf2:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <load_level_tiles>
	SFX_LEVEL_START;
    abf6:	2f ef       	ldi	r18, 0xFF	; 255
    abf8:	47 e1       	ldi	r20, 0x17	; 23
    abfa:	65 e0       	ldi	r22, 0x05	; 5
    abfc:	84 e0       	ldi	r24, 0x04	; 4
}
    abfe:	df 91       	pop	r29
    ac00:	cf 91       	pop	r28
    ac02:	1f 91       	pop	r17
    ac04:	0f 91       	pop	r16
    ac06:	ff 90       	pop	r15
    ac08:	ef 90       	pop	r14
    ac0a:	df 90       	pop	r13
    ac0c:	cf 90       	pop	r12
    ac0e:	bf 90       	pop	r11
    ac10:	af 90       	pop	r10
    ac12:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
	SFX_LEVEL_START;
    ac14:	0c 94 ef 3b 	jmp	0x77de	; 0x77de <TriggerNote>

0000ac18 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    ac18:	cf 93       	push	r28
    ac1a:	df 93       	push	r29
    ac1c:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    ac1e:	61 e0       	ldi	r22, 0x01	; 1
    ac20:	83 e0       	ldi	r24, 0x03	; 3
    ac22:	0e 94 39 47 	call	0x8e72	; 0x8e72 <FadeOut>
	ClearVram();
    ac26:	0e 94 9a 38 	call	0x7134	; 0x7134 <ClearVram>
	clear_sprites();
    ac2a:	0e 94 a3 4a 	call	0x9546	; 0x9546 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    ac2e:	d0 e0       	ldi	r29, 0x00	; 0
    ac30:	ae 01       	movw	r20, r28
    ac32:	84 e0       	ldi	r24, 0x04	; 4
    ac34:	44 0f       	add	r20, r20
    ac36:	55 1f       	adc	r21, r21
    ac38:	8a 95       	dec	r24
    ac3a:	e1 f7       	brne	.-8      	; 0xac34 <level_transition+0x1c>
    ac3c:	40 5e       	subi	r20, 0xE0	; 224
    ac3e:	5e 4f       	sbci	r21, 0xFE	; 254
    ac40:	6c e0       	ldi	r22, 0x0C	; 12
    ac42:	70 e0       	ldi	r23, 0x00	; 0
    ac44:	88 e0       	ldi	r24, 0x08	; 8
    ac46:	90 e0       	ldi	r25, 0x00	; 0
    ac48:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	FadeIn(1, true);
    ac4c:	61 e0       	ldi	r22, 0x01	; 1
    ac4e:	81 e0       	ldi	r24, 0x01	; 1
    ac50:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    ac54:	82 e0       	ldi	r24, 0x02	; 2
    ac56:	0e 94 4e 49 	call	0x929c	; 0x929c <LBWaitSeconds>
	FadeOut(1, true);
    ac5a:	61 e0       	ldi	r22, 0x01	; 1
    ac5c:	81 e0       	ldi	r24, 0x01	; 1
    ac5e:	0e 94 39 47 	call	0x8e72	; 0x8e72 <FadeOut>
	ClearVram();
    ac62:	0e 94 9a 38 	call	0x7134	; 0x7134 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    ac66:	60 e0       	ldi	r22, 0x00	; 0
    ac68:	83 e0       	ldi	r24, 0x03	; 3
    ac6a:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <FadeIn>
	load_level(index);
    ac6e:	ce 01       	movw	r24, r28
}
    ac70:	df 91       	pop	r29
    ac72:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    ac74:	0c 94 4e 55 	jmp	0xaa9c	; 0xaa9c <load_level>

0000ac78 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    ac78:	10 92 08 0c 	sts	0x0C08, r1
	clear_sprites();
    ac7c:	0e 94 a3 4a 	call	0x9546	; 0x9546 <clear_sprites>
	Print(7, 13, (char*) str1Player);
    ac80:	4c e1       	ldi	r20, 0x1C	; 28
    ac82:	53 e0       	ldi	r21, 0x03	; 3
    ac84:	6d e0       	ldi	r22, 0x0D	; 13
    ac86:	70 e0       	ldi	r23, 0x00	; 0
    ac88:	87 e0       	ldi	r24, 0x07	; 7
    ac8a:	90 e0       	ldi	r25, 0x00	; 0
    ac8c:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(7, 14, (char*) str2Player);
    ac90:	4b e0       	ldi	r20, 0x0B	; 11
    ac92:	53 e0       	ldi	r21, 0x03	; 3
    ac94:	6e e0       	ldi	r22, 0x0E	; 14
    ac96:	70 e0       	ldi	r23, 0x00	; 0
    ac98:	87 e0       	ldi	r24, 0x07	; 7
    ac9a:	90 e0       	ldi	r25, 0x00	; 0
    ac9c:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(7, 15, (char*) strHighscores);
    aca0:	41 e0       	ldi	r20, 0x01	; 1
    aca2:	53 e0       	ldi	r21, 0x03	; 3
    aca4:	6f e0       	ldi	r22, 0x0F	; 15
    aca6:	70 e0       	ldi	r23, 0x00	; 0
    aca8:	87 e0       	ldi	r24, 0x07	; 7
    acaa:	90 e0       	ldi	r25, 0x00	; 0
    acac:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(5, 26, (char*) strCopyright);
    acb0:	4a e2       	ldi	r20, 0x2A	; 42
    acb2:	53 e0       	ldi	r21, 0x03	; 3
    acb4:	6a e1       	ldi	r22, 0x1A	; 26
    acb6:	70 e0       	ldi	r23, 0x00	; 0
    acb8:	85 e0       	ldi	r24, 0x05	; 5
    acba:	90 e0       	ldi	r25, 0x00	; 0
    acbc:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    acc0:	4a ea       	ldi	r20, 0xAA	; 170
    acc2:	58 e6       	ldi	r21, 0x68	; 104
    acc4:	65 e0       	ldi	r22, 0x05	; 5
    acc6:	84 e0       	ldi	r24, 0x04	; 4
    acc8:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
	MapSprite2(0, map_right_arrow, 0);
    accc:	40 e0       	ldi	r20, 0x00	; 0
    acce:	67 ed       	ldi	r22, 0xD7	; 215
    acd0:	73 e4       	ldi	r23, 0x43	; 67
    acd2:	80 e0       	ldi	r24, 0x00	; 0
    acd4:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
	SFX_SPLASH;
    acd8:	2f ef       	ldi	r18, 0xFF	; 255
    acda:	47 e1       	ldi	r20, 0x17	; 23
    acdc:	69 e0       	ldi	r22, 0x09	; 9
    acde:	84 e0       	ldi	r24, 0x04	; 4
    ace0:	0c 94 ef 3b 	jmp	0x77de	; 0x77de <TriggerNote>

0000ace4 <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    ace4:	ef 92       	push	r14
    ace6:	ff 92       	push	r15
    ace8:	0f 93       	push	r16
    acea:	1f 93       	push	r17
    acec:	cf 93       	push	r28
    acee:	df 93       	push	r29
    acf0:	1f 92       	push	r1
    acf2:	cd b7       	in	r28, 0x3d	; 61
    acf4:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    acf6:	81 e0       	ldi	r24, 0x01	; 1
    acf8:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    acfc:	0e 94 a3 4a 	call	0x9546	; 0x9546 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    ad00:	4a e7       	ldi	r20, 0x7A	; 122
    ad02:	58 e6       	ldi	r21, 0x68	; 104
    ad04:	61 e0       	ldi	r22, 0x01	; 1
    ad06:	87 e0       	ldi	r24, 0x07	; 7
    ad08:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
	DrawMap2(20, 1, map_blue_tank);
    ad0c:	44 e7       	ldi	r20, 0x74	; 116
    ad0e:	58 e6       	ldi	r21, 0x68	; 104
    ad10:	61 e0       	ldi	r22, 0x01	; 1
    ad12:	84 e1       	ldi	r24, 0x14	; 20
    ad14:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
	Print(10, 2, (char*) strHighscores);
    ad18:	41 e0       	ldi	r20, 0x01	; 1
    ad1a:	53 e0       	ldi	r21, 0x03	; 3
    ad1c:	62 e0       	ldi	r22, 0x02	; 2
    ad1e:	70 e0       	ldi	r23, 0x00	; 0
    ad20:	8a e0       	ldi	r24, 0x0A	; 10
    ad22:	90 e0       	ldi	r25, 0x00	; 0
    ad24:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
    ad28:	06 ec       	ldi	r16, 0xC6	; 198
    ad2a:	1b e0       	ldi	r17, 0x0B	; 11
    ad2c:	87 e0       	ldi	r24, 0x07	; 7
    ad2e:	e8 2e       	mov	r14, r24
    ad30:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    ad32:	31 e0       	ldi	r19, 0x01	; 1
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    ad34:	20 e0       	ldi	r18, 0x00	; 0
    ad36:	43 2f       	mov	r20, r19
    ad38:	b7 01       	movw	r22, r14
    ad3a:	82 e0       	ldi	r24, 0x02	; 2
    ad3c:	90 e0       	ldi	r25, 0x00	; 0
    ad3e:	39 83       	std	Y+1, r19	; 0x01
    ad40:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <PrintByte>
		PrintChar(3, y, '.');
    ad44:	4e e2       	ldi	r20, 0x2E	; 46
    ad46:	b7 01       	movw	r22, r14
    ad48:	83 e0       	ldi	r24, 0x03	; 3
    ad4a:	90 e0       	ldi	r25, 0x00	; 0
    ad4c:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <PrintChar>
    ad50:	f8 01       	movw	r30, r16
    ad52:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    ad54:	80 81       	ld	r24, Z
    ad56:	93 e0       	ldi	r25, 0x03	; 3
    ad58:	89 9f       	mul	r24, r25
    ad5a:	a0 01       	movw	r20, r0
    ad5c:	11 24       	eor	r1, r1
    ad5e:	46 51       	subi	r20, 0x16	; 22
    ad60:	54 4f       	sbci	r21, 0xF4	; 244
    ad62:	23 e0       	ldi	r18, 0x03	; 3
    ad64:	6e 2d       	mov	r22, r14
    ad66:	85 e0       	ldi	r24, 0x05	; 5
    ad68:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    ad6c:	42 e9       	ldi	r20, 0x92	; 146
    ad6e:	52 e0       	ldi	r21, 0x02	; 2
    ad70:	b7 01       	movw	r22, r14
    ad72:	89 e0       	ldi	r24, 0x09	; 9
    ad74:	90 e0       	ldi	r25, 0x00	; 0
    ad76:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
    ad7a:	f8 01       	movw	r30, r16
    ad7c:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    ad7e:	80 81       	ld	r24, Z
    ad80:	e3 e0       	ldi	r30, 0x03	; 3
    ad82:	8e 9f       	mul	r24, r30
    ad84:	a0 01       	movw	r20, r0
    ad86:	11 24       	eor	r1, r1
    ad88:	46 51       	subi	r20, 0x16	; 22
    ad8a:	54 4f       	sbci	r21, 0xF4	; 244
    ad8c:	23 e0       	ldi	r18, 0x03	; 3
    ad8e:	6e 2d       	mov	r22, r14
    ad90:	8e e0       	ldi	r24, 0x0E	; 14
    ad92:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <LBPrintStr>
		Print(18, y, (char*) strBy);
    ad96:	4f e8       	ldi	r20, 0x8F	; 143
    ad98:	52 e0       	ldi	r21, 0x02	; 2
    ad9a:	b7 01       	movw	r22, r14
    ad9c:	82 e1       	ldi	r24, 0x12	; 18
    ad9e:	90 e0       	ldi	r25, 0x00	; 0
    ada0:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
    ada4:	f8 01       	movw	r30, r16
    ada6:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    ada8:	21 e0       	ldi	r18, 0x01	; 1
    adaa:	40 81       	ld	r20, Z
    adac:	b7 01       	movw	r22, r14
    adae:	87 e1       	ldi	r24, 0x17	; 23
    adb0:	90 e0       	ldi	r25, 0x00	; 0
    adb2:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <PrintByte>
		PrintChar(24, y, '-');
    adb6:	4d e2       	ldi	r20, 0x2D	; 45
    adb8:	b7 01       	movw	r22, r14
    adba:	88 e1       	ldi	r24, 0x18	; 24
    adbc:	90 e0       	ldi	r25, 0x00	; 0
    adbe:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    adc2:	21 e0       	ldi	r18, 0x01	; 1
    adc4:	f8 01       	movw	r30, r16
    adc6:	40 81       	ld	r20, Z
    adc8:	b7 01       	movw	r22, r14
    adca:	8b e1       	ldi	r24, 0x1B	; 27
    adcc:	90 e0       	ldi	r25, 0x00	; 0
    adce:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <PrintByte>
		y += 3;
		rank += 1;
    add2:	39 81       	ldd	r19, Y+1	; 0x01
    add4:	3f 5f       	subi	r19, 0xFF	; 255
    add6:	f3 e0       	ldi	r31, 0x03	; 3
    add8:	ef 0e       	add	r14, r31
    adda:	f1 1c       	adc	r15, r1
    addc:	0c 5f       	subi	r16, 0xFC	; 252
    adde:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    ade0:	36 30       	cpi	r19, 0x06	; 6
    ade2:	09 f0       	breq	.+2      	; 0xade6 <load_tank_rank+0x102>
    ade4:	a7 cf       	rjmp	.-178    	; 0xad34 <load_tank_rank+0x50>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
    ade6:	46 ea       	ldi	r20, 0xA6	; 166
    ade8:	52 e0       	ldi	r21, 0x02	; 2
    adea:	66 e1       	ldi	r22, 0x16	; 22
    adec:	70 e0       	ldi	r23, 0x00	; 0
    adee:	83 e0       	ldi	r24, 0x03	; 3
    adf0:	90 e0       	ldi	r25, 0x00	; 0
    adf2:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(10, 24, (char*) strCancelHandle);
    adf6:	4f eb       	ldi	r20, 0xBF	; 191
    adf8:	52 e0       	ldi	r21, 0x02	; 2
    adfa:	68 e1       	ldi	r22, 0x18	; 24
    adfc:	70 e0       	ldi	r23, 0x00	; 0
    adfe:	8a e0       	ldi	r24, 0x0A	; 10
    ae00:	90 e0       	ldi	r25, 0x00	; 0
}
    ae02:	0f 90       	pop	r0
    ae04:	df 91       	pop	r29
    ae06:	cf 91       	pop	r28
    ae08:	1f 91       	pop	r17
    ae0a:	0f 91       	pop	r16
    ae0c:	ff 90       	pop	r15
    ae0e:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    ae10:	0c 94 ea 46 	jmp	0x8dd4	; 0x8dd4 <Print>

0000ae14 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    ae14:	0e 94 b0 4a 	call	0x9560	; 0x9560 <save_score>
	fade_through();
    ae18:	0e 94 99 4a 	call	0x9532	; 0x9532 <fade_through>
	SetSpriteVisibility(true);
    ae1c:	81 e0       	ldi	r24, 0x01	; 1
    ae1e:	0e 94 11 45 	call	0x8a22	; 0x8a22 <SetSpriteVisibility>
	init_game_state();
    ae22:	0e 94 54 4a 	call	0x94a8	; 0x94a8 <init_game_state>
	load_tank_rank();
    ae26:	0c 94 72 56 	jmp	0xace4	; 0xace4 <load_tank_rank>

0000ae2a <update_level_helper>:
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    ae2a:	6f 92       	push	r6
    ae2c:	7f 92       	push	r7
    ae2e:	8f 92       	push	r8
    ae30:	9f 92       	push	r9
    ae32:	af 92       	push	r10
    ae34:	bf 92       	push	r11
    ae36:	df 92       	push	r13
    ae38:	ef 92       	push	r14
    ae3a:	ff 92       	push	r15
    ae3c:	0f 93       	push	r16
    ae3e:	1f 93       	push	r17
    ae40:	cf 93       	push	r28
    ae42:	df 93       	push	r29
    ae44:	1f 92       	push	r1
    ae46:	cd b7       	in	r28, 0x3d	; 61
    ae48:	de b7       	in	r29, 0x3e	; 62
    ae4a:	7c 01       	movw	r14, r24
    ae4c:	3b 01       	movw	r6, r22
    ae4e:	8a 01       	movw	r16, r20
	Shot* shot;
	u8 next_level;
	Player* tmp;

	player->shared.recoiled = 0;
    ae50:	fb 01       	movw	r30, r22
    ae52:	12 82       	std	Z+2, r1	; 0x02
	if ((p->pressed & BTN_START))
    ae54:	fc 01       	movw	r30, r24
    ae56:	80 81       	ld	r24, Z
    ae58:	83 ff       	sbrs	r24, 3
    ae5a:	0f c0       	rjmp	.+30     	; 0xae7a <update_level_helper+0x50>
	{
		SFX_NAVIGATE;
    ae5c:	2f ef       	ldi	r18, 0xFF	; 255
    ae5e:	47 e1       	ldi	r20, 0x17	; 23
    ae60:	67 e0       	ldi	r22, 0x07	; 7
    ae62:	84 e0       	ldi	r24, 0x04	; 4
    ae64:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
		game.paused = game.paused ^ 1;
    ae68:	90 91 0a 0c 	lds	r25, 0x0C0A
    ae6c:	81 e0       	ldi	r24, 0x01	; 1
    ae6e:	89 27       	eor	r24, r25
    ae70:	80 93 0a 0c 	sts	0x0C0A, r24
		load_level_tiles(false);
    ae74:	80 e0       	ldi	r24, 0x00	; 0
    ae76:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    ae7a:	20 91 0a 0c 	lds	r18, 0x0C0A
    ae7e:	f7 01       	movw	r30, r14
    ae80:	80 81       	ld	r24, Z
    ae82:	91 81       	ldd	r25, Z+1	; 0x01
    ae84:	21 11       	cpse	r18, r1
    ae86:	72 c1       	rjmp	.+740    	; 0xb16c <update_level_helper+0x342>
    ae88:	f3 01       	movw	r30, r6
    ae8a:	24 89       	ldd	r18, Z+20	; 0x14
    ae8c:	20 fd       	sbrc	r18, 0
    ae8e:	6e c1       	rjmp	.+732    	; 0xb16c <update_level_helper+0x342>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    ae90:	93 ff       	sbrs	r25, 3
    ae92:	12 c0       	rjmp	.+36     	; 0xaeb8 <update_level_helper+0x8e>
    ae94:	85 89       	ldd	r24, Z+21	; 0x15
    ae96:	8a 35       	cpi	r24, 0x5A	; 90
    ae98:	79 f4       	brne	.+30     	; 0xaeb8 <update_level_helper+0x8e>
		{
			player->banter_frame = 0;
    ae9a:	15 8a       	std	Z+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    ae9c:	69 e0       	ldi	r22, 0x09	; 9
    ae9e:	70 e0       	ldi	r23, 0x00	; 0
    aea0:	80 e0       	ldi	r24, 0x00	; 0
    aea2:	90 e0       	ldi	r25, 0x00	; 0
    aea4:	0e 94 19 49 	call	0x9232	; 0x9232 <LBRandom>
    aea8:	f3 01       	movw	r30, r6
    aeaa:	86 8b       	std	Z+22, r24	; 0x16
			SFX_BANTER;
    aeac:	2f e5       	ldi	r18, 0x5F	; 95
    aeae:	4e e1       	ldi	r20, 0x1E	; 30
    aeb0:	60 e0       	ldi	r22, 0x00	; 0
    aeb2:	84 e0       	ldi	r24, 0x04	; 4
    aeb4:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    aeb8:	f3 01       	movw	r30, r6
    aeba:	60 8d       	ldd	r22, Z+24	; 0x18
    aebc:	61 83       	std	Z+1, r22	; 0x01
		if ((p->held & BTN_UP))
    aebe:	f7 01       	movw	r30, r14
    aec0:	84 81       	ldd	r24, Z+4	; 0x04
    aec2:	84 ff       	sbrs	r24, 4
    aec4:	17 c0       	rjmp	.+46     	; 0xaef4 <update_level_helper+0xca>
		{
			player->shared.direction = D_UP;
    aec6:	f3 01       	movw	r30, r6
    aec8:	10 82       	st	Z, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    aeca:	70 e0       	ldi	r23, 0x00	; 0
    aecc:	80 e0       	ldi	r24, 0x00	; 0
    aece:	90 e0       	ldi	r25, 0x00	; 0
    aed0:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    aed4:	25 e6       	ldi	r18, 0x65	; 101
    aed6:	38 e8       	ldi	r19, 0x88	; 136
    aed8:	48 e8       	ldi	r20, 0x88	; 136
    aeda:	5c e3       	ldi	r21, 0x3C	; 60
    aedc:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    aee0:	9b 01       	movw	r18, r22
    aee2:	ac 01       	movw	r20, r24
    aee4:	f3 01       	movw	r30, r6
    aee6:	67 81       	ldd	r22, Z+7	; 0x07
    aee8:	70 85       	ldd	r23, Z+8	; 0x08
    aeea:	81 85       	ldd	r24, Z+9	; 0x09
    aeec:	92 85       	ldd	r25, Z+10	; 0x0a
    aeee:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    aef2:	33 c0       	rjmp	.+102    	; 0xaf5a <update_level_helper+0x130>
		}
		else if ((p->held & BTN_RIGHT))
    aef4:	87 ff       	sbrs	r24, 7
    aef6:	18 c0       	rjmp	.+48     	; 0xaf28 <update_level_helper+0xfe>
		{
			player->shared.direction = D_RIGHT;
    aef8:	81 e0       	ldi	r24, 0x01	; 1
    aefa:	f3 01       	movw	r30, r6
    aefc:	80 83       	st	Z, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    aefe:	70 e0       	ldi	r23, 0x00	; 0
    af00:	80 e0       	ldi	r24, 0x00	; 0
    af02:	90 e0       	ldi	r25, 0x00	; 0
    af04:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    af08:	25 e6       	ldi	r18, 0x65	; 101
    af0a:	38 e8       	ldi	r19, 0x88	; 136
    af0c:	48 e8       	ldi	r20, 0x88	; 136
    af0e:	5c e3       	ldi	r21, 0x3C	; 60
    af10:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    af14:	9b 01       	movw	r18, r22
    af16:	ac 01       	movw	r20, r24
    af18:	f3 01       	movw	r30, r6
    af1a:	63 81       	ldd	r22, Z+3	; 0x03
    af1c:	74 81       	ldd	r23, Z+4	; 0x04
    af1e:	85 81       	ldd	r24, Z+5	; 0x05
    af20:	96 81       	ldd	r25, Z+6	; 0x06
    af22:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    af26:	38 c0       	rjmp	.+112    	; 0xaf98 <update_level_helper+0x16e>
		}
		else if ((p->held & BTN_DOWN))
    af28:	85 ff       	sbrs	r24, 5
    af2a:	1d c0       	rjmp	.+58     	; 0xaf66 <update_level_helper+0x13c>
		{
			player->shared.direction = D_DOWN;
    af2c:	82 e0       	ldi	r24, 0x02	; 2
    af2e:	f3 01       	movw	r30, r6
    af30:	80 83       	st	Z, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    af32:	70 e0       	ldi	r23, 0x00	; 0
    af34:	80 e0       	ldi	r24, 0x00	; 0
    af36:	90 e0       	ldi	r25, 0x00	; 0
    af38:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    af3c:	25 e6       	ldi	r18, 0x65	; 101
    af3e:	38 e8       	ldi	r19, 0x88	; 136
    af40:	48 e8       	ldi	r20, 0x88	; 136
    af42:	5c e3       	ldi	r21, 0x3C	; 60
    af44:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    af48:	9b 01       	movw	r18, r22
    af4a:	ac 01       	movw	r20, r24
    af4c:	f3 01       	movw	r30, r6
    af4e:	67 81       	ldd	r22, Z+7	; 0x07
    af50:	70 85       	ldd	r23, Z+8	; 0x08
    af52:	81 85       	ldd	r24, Z+9	; 0x09
    af54:	92 85       	ldd	r25, Z+10	; 0x0a
    af56:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    af5a:	f3 01       	movw	r30, r6
    af5c:	67 83       	std	Z+7, r22	; 0x07
    af5e:	70 87       	std	Z+8, r23	; 0x08
    af60:	81 87       	std	Z+9, r24	; 0x09
    af62:	92 87       	std	Z+10, r25	; 0x0a
    af64:	21 c0       	rjmp	.+66     	; 0xafa8 <update_level_helper+0x17e>
		}
		else if ((p->held & BTN_LEFT))
    af66:	86 ff       	sbrs	r24, 6
    af68:	1d c0       	rjmp	.+58     	; 0xafa4 <update_level_helper+0x17a>
		{
			player->shared.direction = D_LEFT;
    af6a:	83 e0       	ldi	r24, 0x03	; 3
    af6c:	f3 01       	movw	r30, r6
    af6e:	80 83       	st	Z, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    af70:	70 e0       	ldi	r23, 0x00	; 0
    af72:	80 e0       	ldi	r24, 0x00	; 0
    af74:	90 e0       	ldi	r25, 0x00	; 0
    af76:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    af7a:	25 e6       	ldi	r18, 0x65	; 101
    af7c:	38 e8       	ldi	r19, 0x88	; 136
    af7e:	48 e8       	ldi	r20, 0x88	; 136
    af80:	5c e3       	ldi	r21, 0x3C	; 60
    af82:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    af86:	9b 01       	movw	r18, r22
    af88:	ac 01       	movw	r20, r24
    af8a:	f3 01       	movw	r30, r6
    af8c:	63 81       	ldd	r22, Z+3	; 0x03
    af8e:	74 81       	ldd	r23, Z+4	; 0x04
    af90:	85 81       	ldd	r24, Z+5	; 0x05
    af92:	96 81       	ldd	r25, Z+6	; 0x06
    af94:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    af98:	f3 01       	movw	r30, r6
    af9a:	63 83       	std	Z+3, r22	; 0x03
    af9c:	74 83       	std	Z+4, r23	; 0x04
    af9e:	85 83       	std	Z+5, r24	; 0x05
    afa0:	96 83       	std	Z+6, r25	; 0x06
    afa2:	02 c0       	rjmp	.+4      	; 0xafa8 <update_level_helper+0x17e>
		}
		else
		{
			player->shared.speed = 0;
    afa4:	f3 01       	movw	r30, r6
    afa6:	11 82       	std	Z+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    afa8:	f7 01       	movw	r30, r14
    afaa:	80 81       	ld	r24, Z
    afac:	91 81       	ldd	r25, Z+1	; 0x01
    afae:	93 01       	movw	r18, r6
    afb0:	24 5d       	subi	r18, 0xD4	; 212
    afb2:	3f 4f       	sbci	r19, 0xFF	; 255
    afb4:	79 01       	movw	r14, r18
    afb6:	90 ff       	sbrs	r25, 0
    afb8:	36 c0       	rjmp	.+108    	; 0xb026 <update_level_helper+0x1fc>
    afba:	f3 01       	movw	r30, r6
    afbc:	81 89       	ldd	r24, Z+17	; 0x11
    afbe:	81 11       	cpse	r24, r1
    afc0:	32 c0       	rjmp	.+100    	; 0xb026 <update_level_helper+0x1fc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    afc2:	82 ad       	ldd	r24, Z+58	; 0x3a
    afc4:	81 11       	cpse	r24, r1
    afc6:	2f c0       	rjmp	.+94     	; 0xb026 <update_level_helper+0x1fc>
				{
					if (player->has_rocket)
    afc8:	81 8d       	ldd	r24, Z+25	; 0x19
    afca:	88 23       	and	r24, r24
    afcc:	61 f0       	breq	.+24     	; 0xafe6 <update_level_helper+0x1bc>
					{
						init_shot_state(shot, ROCKET_SHOT);
    afce:	61 e0       	ldi	r22, 0x01	; 1
    afd0:	c9 01       	movw	r24, r18
    afd2:	0e 94 98 49 	call	0x9330	; 0x9330 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    afd6:	61 e0       	ldi	r22, 0x01	; 1
    afd8:	c7 01       	movw	r24, r14
    afda:	0e 94 b5 49 	call	0x936a	; 0x936a <set_shot_animations>
						SFX_ROCKET;
    afde:	2f ef       	ldi	r18, 0xFF	; 255
    afe0:	47 e1       	ldi	r20, 0x17	; 23
    afe2:	68 e0       	ldi	r22, 0x08	; 8
    afe4:	0b c0       	rjmp	.+22     	; 0xaffc <update_level_helper+0x1d2>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    afe6:	60 e0       	ldi	r22, 0x00	; 0
    afe8:	c9 01       	movw	r24, r18
    afea:	0e 94 98 49 	call	0x9330	; 0x9330 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    afee:	60 e0       	ldi	r22, 0x00	; 0
    aff0:	c7 01       	movw	r24, r14
    aff2:	0e 94 b5 49 	call	0x936a	; 0x936a <set_shot_animations>
						SFX_CANNONBALL;
    aff6:	2f ef       	ldi	r18, 0xFF	; 255
    aff8:	47 e1       	ldi	r20, 0x17	; 23
    affa:	62 e0       	ldi	r22, 0x02	; 2
    affc:	84 e0       	ldi	r24, 0x04	; 4
    affe:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
					}
					player->active_shots++;
    b002:	f3 01       	movw	r30, r6
    b004:	81 89       	ldd	r24, Z+17	; 0x11
    b006:	8f 5f       	subi	r24, 0xFF	; 255
    b008:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    b00a:	80 81       	ld	r24, Z
    b00c:	84 a7       	std	Z+44, r24	; 0x2c
					position_shot(player, shot);
    b00e:	b7 01       	movw	r22, r14
    b010:	c3 01       	movw	r24, r6
    b012:	0e 94 19 4b 	call	0x9632	; 0x9632 <position_shot>
					shot->active = 1;
    b016:	81 e0       	ldi	r24, 0x01	; 1
    b018:	f3 01       	movw	r30, r6
    b01a:	82 af       	std	Z+58, r24	; 0x3a
					if (player->has_over_speed)
    b01c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b01e:	88 23       	and	r24, r24
    b020:	11 f0       	breq	.+4      	; 0xb026 <update_level_helper+0x1fc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    b022:	8a ea       	ldi	r24, 0xAA	; 170
    b024:	85 a7       	std	Z+45, r24	; 0x2d

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    b026:	f3 01       	movw	r30, r6
    b028:	82 ad       	ldd	r24, Z+58	; 0x3a
    b02a:	88 23       	and	r24, r24
    b02c:	09 f4       	brne	.+2      	; 0xb030 <update_level_helper+0x206>
    b02e:	a8 c0       	rjmp	.+336    	; 0xb180 <update_level_helper+0x356>
			{
				switch (shot->shared.direction)
    b030:	84 a5       	ldd	r24, Z+44	; 0x2c
    b032:	81 30       	cpi	r24, 0x01	; 1
    b034:	a9 f1       	breq	.+106    	; 0xb0a0 <update_level_helper+0x276>
    b036:	e8 f0       	brcs	.+58     	; 0xb072 <update_level_helper+0x248>
    b038:	82 30       	cpi	r24, 0x02	; 2
    b03a:	09 f4       	brne	.+2      	; 0xb03e <update_level_helper+0x214>
    b03c:	48 c0       	rjmp	.+144    	; 0xb0ce <update_level_helper+0x2a4>
    b03e:	83 30       	cpi	r24, 0x03	; 3
    b040:	09 f0       	breq	.+2      	; 0xb044 <update_level_helper+0x21a>
    b042:	66 c0       	rjmp	.+204    	; 0xb110 <update_level_helper+0x2e6>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    b044:	f3 01       	movw	r30, r6
    b046:	65 a5       	ldd	r22, Z+45	; 0x2d
    b048:	70 e0       	ldi	r23, 0x00	; 0
    b04a:	80 e0       	ldi	r24, 0x00	; 0
    b04c:	90 e0       	ldi	r25, 0x00	; 0
    b04e:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    b052:	25 e6       	ldi	r18, 0x65	; 101
    b054:	38 e8       	ldi	r19, 0x88	; 136
    b056:	48 e8       	ldi	r20, 0x88	; 136
    b058:	5c e3       	ldi	r21, 0x3C	; 60
    b05a:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    b05e:	9b 01       	movw	r18, r22
    b060:	ac 01       	movw	r20, r24
    b062:	f3 01       	movw	r30, r6
    b064:	67 a5       	ldd	r22, Z+47	; 0x2f
    b066:	70 a9       	ldd	r23, Z+48	; 0x30
    b068:	81 a9       	ldd	r24, Z+49	; 0x31
    b06a:	92 a9       	ldd	r25, Z+50	; 0x32
    b06c:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    b070:	4a c0       	rjmp	.+148    	; 0xb106 <update_level_helper+0x2dc>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    b072:	f3 01       	movw	r30, r6
    b074:	65 a5       	ldd	r22, Z+45	; 0x2d
    b076:	70 e0       	ldi	r23, 0x00	; 0
    b078:	80 e0       	ldi	r24, 0x00	; 0
    b07a:	90 e0       	ldi	r25, 0x00	; 0
    b07c:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    b080:	25 e6       	ldi	r18, 0x65	; 101
    b082:	38 e8       	ldi	r19, 0x88	; 136
    b084:	48 e8       	ldi	r20, 0x88	; 136
    b086:	5c e3       	ldi	r21, 0x3C	; 60
    b088:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    b08c:	9b 01       	movw	r18, r22
    b08e:	ac 01       	movw	r20, r24
    b090:	f3 01       	movw	r30, r6
    b092:	63 a9       	ldd	r22, Z+51	; 0x33
    b094:	74 a9       	ldd	r23, Z+52	; 0x34
    b096:	85 a9       	ldd	r24, Z+53	; 0x35
    b098:	96 a9       	ldd	r25, Z+54	; 0x36
    b09a:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    b09e:	2d c0       	rjmp	.+90     	; 0xb0fa <update_level_helper+0x2d0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    b0a0:	f3 01       	movw	r30, r6
    b0a2:	65 a5       	ldd	r22, Z+45	; 0x2d
    b0a4:	70 e0       	ldi	r23, 0x00	; 0
    b0a6:	80 e0       	ldi	r24, 0x00	; 0
    b0a8:	90 e0       	ldi	r25, 0x00	; 0
    b0aa:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    b0ae:	25 e6       	ldi	r18, 0x65	; 101
    b0b0:	38 e8       	ldi	r19, 0x88	; 136
    b0b2:	48 e8       	ldi	r20, 0x88	; 136
    b0b4:	5c e3       	ldi	r21, 0x3C	; 60
    b0b6:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    b0ba:	9b 01       	movw	r18, r22
    b0bc:	ac 01       	movw	r20, r24
    b0be:	f3 01       	movw	r30, r6
    b0c0:	67 a5       	ldd	r22, Z+47	; 0x2f
    b0c2:	70 a9       	ldd	r23, Z+48	; 0x30
    b0c4:	81 a9       	ldd	r24, Z+49	; 0x31
    b0c6:	92 a9       	ldd	r25, Z+50	; 0x32
    b0c8:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    b0cc:	1c c0       	rjmp	.+56     	; 0xb106 <update_level_helper+0x2dc>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    b0ce:	f3 01       	movw	r30, r6
    b0d0:	65 a5       	ldd	r22, Z+45	; 0x2d
    b0d2:	70 e0       	ldi	r23, 0x00	; 0
    b0d4:	80 e0       	ldi	r24, 0x00	; 0
    b0d6:	90 e0       	ldi	r25, 0x00	; 0
    b0d8:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    b0dc:	25 e6       	ldi	r18, 0x65	; 101
    b0de:	38 e8       	ldi	r19, 0x88	; 136
    b0e0:	48 e8       	ldi	r20, 0x88	; 136
    b0e2:	5c e3       	ldi	r21, 0x3C	; 60
    b0e4:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    b0e8:	9b 01       	movw	r18, r22
    b0ea:	ac 01       	movw	r20, r24
    b0ec:	f3 01       	movw	r30, r6
    b0ee:	63 a9       	ldd	r22, Z+51	; 0x33
    b0f0:	74 a9       	ldd	r23, Z+52	; 0x34
    b0f2:	85 a9       	ldd	r24, Z+53	; 0x35
    b0f4:	96 a9       	ldd	r25, Z+54	; 0x36
    b0f6:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    b0fa:	f3 01       	movw	r30, r6
    b0fc:	63 ab       	std	Z+51, r22	; 0x33
    b0fe:	74 ab       	std	Z+52, r23	; 0x34
    b100:	85 ab       	std	Z+53, r24	; 0x35
    b102:	96 ab       	std	Z+54, r25	; 0x36
    b104:	05 c0       	rjmp	.+10     	; 0xb110 <update_level_helper+0x2e6>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    b106:	f3 01       	movw	r30, r6
    b108:	67 a7       	std	Z+47, r22	; 0x2f
    b10a:	70 ab       	std	Z+48, r23	; 0x30
    b10c:	81 ab       	std	Z+49, r24	; 0x31
    b10e:	92 ab       	std	Z+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    b110:	f3 01       	movw	r30, r6
    b112:	d3 ac       	ldd	r13, Z+59	; 0x3b
    b114:	6d 2d       	mov	r22, r13
    b116:	70 e0       	ldi	r23, 0x00	; 0
    b118:	80 e0       	ldi	r24, 0x00	; 0
    b11a:	90 e0       	ldi	r25, 0x00	; 0
    b11c:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    b120:	4b 01       	movw	r8, r22
    b122:	5c 01       	movw	r10, r24
    b124:	f8 e0       	ldi	r31, 0x08	; 8
    b126:	fd 15       	cp	r31, r13
    b128:	88 f0       	brcs	.+34     	; 0xb14c <update_level_helper+0x322>
    b12a:	f3 01       	movw	r30, r6
    b12c:	85 a5       	ldd	r24, Z+45	; 0x2d
    b12e:	68 2f       	mov	r22, r24
    b130:	70 e0       	ldi	r23, 0x00	; 0
    b132:	80 e0       	ldi	r24, 0x00	; 0
    b134:	90 e0       	ldi	r25, 0x00	; 0
    b136:	0e 94 e9 61 	call	0xc3d2	; 0xc3d2 <__floatsisf>
    b13a:	25 e6       	ldi	r18, 0x65	; 101
    b13c:	38 e8       	ldi	r19, 0x88	; 136
    b13e:	48 e8       	ldi	r20, 0x88	; 136
    b140:	5c e3       	ldi	r21, 0x3C	; 60
    b142:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    b146:	9b 01       	movw	r18, r22
    b148:	ac 01       	movw	r20, r24
    b14a:	03 c0       	rjmp	.+6      	; 0xb152 <update_level_helper+0x328>
    b14c:	20 e0       	ldi	r18, 0x00	; 0
    b14e:	30 e0       	ldi	r19, 0x00	; 0
    b150:	a9 01       	movw	r20, r18
    b152:	c5 01       	movw	r24, r10
    b154:	b4 01       	movw	r22, r8
    b156:	0e 94 e6 60 	call	0xc1cc	; 0xc1cc <__addsf3>
    b15a:	0e 94 bb 61 	call	0xc376	; 0xc376 <__fixunssfsi>
    b15e:	f3 01       	movw	r30, r6
    b160:	63 af       	std	Z+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    b162:	b7 01       	movw	r22, r14
    b164:	c3 01       	movw	r24, r6
    b166:	0e 94 3f 51 	call	0xa27e	; 0xa27e <collision_detect_shot>
    b16a:	0a c0       	rjmp	.+20     	; 0xb180 <update_level_helper+0x356>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    b16c:	91 ff       	sbrs	r25, 1
    b16e:	08 c0       	rjmp	.+16     	; 0xb180 <update_level_helper+0x356>
		{
			SFX_NAVIGATE;
    b170:	2f ef       	ldi	r18, 0xFF	; 255
    b172:	47 e1       	ldi	r20, 0x17	; 23
    b174:	67 e0       	ldi	r22, 0x07	; 7
    b176:	84 e0       	ldi	r24, 0x04	; 4
    b178:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
			exit_game();
    b17c:	0e 94 0a 57 	call	0xae14	; 0xae14 <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    b180:	f3 01       	movw	r30, r6
    b182:	80 89       	ldd	r24, Z+16	; 0x10
    b184:	8a 30       	cpi	r24, 0x0A	; 10
    b186:	08 f4       	brcc	.+2      	; 0xb18a <update_level_helper+0x360>
    b188:	5c c0       	rjmp	.+184    	; 0xb242 <update_level_helper+0x418>
    b18a:	f8 01       	movw	r30, r16
    b18c:	84 89       	ldd	r24, Z+20	; 0x14
    b18e:	80 fd       	sbrc	r24, 0
    b190:	58 c0       	rjmp	.+176    	; 0xb242 <update_level_helper+0x418>
	{
	    next_level = game.current_level + 1;
    b192:	30 91 09 0c 	lds	r19, 0x0C09
    b196:	3f 5f       	subi	r19, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    b198:	3a 30       	cpi	r19, 0x0A	; 10
    b19a:	30 f0       	brcs	.+12     	; 0xb1a8 <update_level_helper+0x37e>
    b19c:	97 85       	ldd	r25, Z+15	; 0x0f
    b19e:	f3 01       	movw	r30, r6
    b1a0:	87 85       	ldd	r24, Z+15	; 0x0f
    b1a2:	98 17       	cp	r25, r24
    b1a4:	09 f4       	brne	.+2      	; 0xb1a8 <update_level_helper+0x37e>
    b1a6:	4d c0       	rjmp	.+154    	; 0xb242 <update_level_helper+0x418>

		load_level_tiles(true);
    b1a8:	81 e0       	ldi	r24, 0x01	; 1
    b1aa:	39 83       	std	Y+1, r19	; 0x01
    b1ac:	0e 94 e9 54 	call	0xa9d2	; 0xa9d2 <load_level_tiles>
		SetSpriteVisibility(false);
    b1b0:	80 e0       	ldi	r24, 0x00	; 0
    b1b2:	0e 94 11 45 	call	0x8a22	; 0x8a22 <SetSpriteVisibility>
		print_level_score(player, other_player);
    b1b6:	b8 01       	movw	r22, r16
    b1b8:	c3 01       	movw	r24, r6
    b1ba:	0e 94 86 4b 	call	0x970c	; 0x970c <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    b1be:	82 e0       	ldi	r24, 0x02	; 2
    b1c0:	0e 94 4e 49 	call	0x929c	; 0x929c <LBWaitSeconds>
		player->level_score = 0;
    b1c4:	f3 01       	movw	r30, r6
    b1c6:	10 8a       	std	Z+16, r1	; 0x10
		other_player->level_score = 0;
    b1c8:	f8 01       	movw	r30, r16
    b1ca:	10 8a       	std	Z+16, r1	; 0x10
		SFX_LEVEL_CLEAR;
    b1cc:	2f ef       	ldi	r18, 0xFF	; 255
    b1ce:	47 e1       	ldi	r20, 0x17	; 23
    b1d0:	64 e0       	ldi	r22, 0x04	; 4
    b1d2:	84 e0       	ldi	r24, 0x04	; 4
    b1d4:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    b1d8:	39 81       	ldd	r19, Y+1	; 0x01
    b1da:	3a 30       	cpi	r19, 0x0A	; 10
    b1dc:	08 f1       	brcs	.+66     	; 0xb220 <update_level_helper+0x3f6>
		{
		    if (other_player->score > player->score)
    b1de:	f8 01       	movw	r30, r16
    b1e0:	97 85       	ldd	r25, Z+15	; 0x0f
    b1e2:	f3 01       	movw	r30, r6
    b1e4:	87 85       	ldd	r24, Z+15	; 0x0f
    b1e6:	89 17       	cp	r24, r25
    b1e8:	20 f4       	brcc	.+8      	; 0xb1f2 <update_level_helper+0x3c8>
    b1ea:	87 2d       	mov	r24, r7
		    {
		        tmp = player;
		        player = other_player;
    b1ec:	38 01       	movw	r6, r16
		        other_player = tmp;
    b1ee:	0e 2f       	mov	r16, r30
    b1f0:	18 2f       	mov	r17, r24
		    }
		    print_final_score(player, other_player);
    b1f2:	b8 01       	movw	r22, r16
    b1f4:	c3 01       	movw	r24, r6
    b1f6:	0e 94 c8 4b 	call	0x9790	; 0x9790 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    b1fa:	82 e0       	ldi	r24, 0x02	; 2
    b1fc:	0e 94 4e 49 	call	0x929c	; 0x929c <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    b200:	0f 90       	pop	r0
    b202:	df 91       	pop	r29
    b204:	cf 91       	pop	r28
    b206:	1f 91       	pop	r17
    b208:	0f 91       	pop	r16
    b20a:	ff 90       	pop	r15
    b20c:	ef 90       	pop	r14
    b20e:	df 90       	pop	r13
    b210:	bf 90       	pop	r11
    b212:	af 90       	pop	r10
    b214:	9f 90       	pop	r9
    b216:	8f 90       	pop	r8
    b218:	7f 90       	pop	r7
    b21a:	6f 90       	pop	r6
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    b21c:	0c 94 0a 57 	jmp	0xae14	; 0xae14 <exit_game>
		}
		else
		{
			level_transition(next_level);
    b220:	83 2f       	mov	r24, r19
		}
	}
}
    b222:	0f 90       	pop	r0
    b224:	df 91       	pop	r29
    b226:	cf 91       	pop	r28
    b228:	1f 91       	pop	r17
    b22a:	0f 91       	pop	r16
    b22c:	ff 90       	pop	r15
    b22e:	ef 90       	pop	r14
    b230:	df 90       	pop	r13
    b232:	bf 90       	pop	r11
    b234:	af 90       	pop	r10
    b236:	9f 90       	pop	r9
    b238:	8f 90       	pop	r8
    b23a:	7f 90       	pop	r7
    b23c:	6f 90       	pop	r6
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    b23e:	0c 94 0c 56 	jmp	0xac18	; 0xac18 <level_transition>
		}
	}
}
    b242:	0f 90       	pop	r0
    b244:	df 91       	pop	r29
    b246:	cf 91       	pop	r28
    b248:	1f 91       	pop	r17
    b24a:	0f 91       	pop	r16
    b24c:	ff 90       	pop	r15
    b24e:	ef 90       	pop	r14
    b250:	df 90       	pop	r13
    b252:	bf 90       	pop	r11
    b254:	af 90       	pop	r10
    b256:	9f 90       	pop	r9
    b258:	8f 90       	pop	r8
    b25a:	7f 90       	pop	r7
    b25c:	6f 90       	pop	r6
    b25e:	08 95       	ret

0000b260 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    b260:	cf 92       	push	r12
    b262:	df 92       	push	r13
    b264:	ef 92       	push	r14
    b266:	ff 92       	push	r15
    b268:	1f 93       	push	r17
    b26a:	cf 93       	push	r28
    b26c:	df 93       	push	r29
    b26e:	6c 01       	movw	r12, r24
    b270:	7b 01       	movw	r14, r22
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	// Render
	if (game.paused)
    b272:	80 91 0a 0c 	lds	r24, 0x0C0A
    b276:	88 23       	and	r24, r24
    b278:	d1 f0       	breq	.+52     	; 0xb2ae <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    b27a:	80 e0       	ldi	r24, 0x00	; 0
    b27c:	0e 94 11 45 	call	0x8a22	; 0x8a22 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    b280:	40 e0       	ldi	r20, 0x00	; 0
    b282:	59 e6       	ldi	r21, 0x69	; 105
    b284:	6c e0       	ldi	r22, 0x0C	; 12
    b286:	88 e0       	ldi	r24, 0x08	; 8
    b288:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
		Print(12, 13, (char*) strPaused);
    b28c:	40 ec       	ldi	r20, 0xC0	; 192
    b28e:	51 e0       	ldi	r21, 0x01	; 1
    b290:	6d e0       	ldi	r22, 0x0D	; 13
    b292:	70 e0       	ldi	r23, 0x00	; 0
    b294:	8c e0       	ldi	r24, 0x0C	; 12
    b296:	90 e0       	ldi	r25, 0x00	; 0
    b298:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
		Print(11, 14, (char*) strExit);
    b29c:	47 ec       	ldi	r20, 0xC7	; 199
    b29e:	51 e0       	ldi	r21, 0x01	; 1
    b2a0:	6e e0       	ldi	r22, 0x0E	; 14
    b2a2:	70 e0       	ldi	r23, 0x00	; 0
    b2a4:	8b e0       	ldi	r24, 0x0B	; 11
    b2a6:	90 e0       	ldi	r25, 0x00	; 0
    b2a8:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
    b2ac:	44 c0       	rjmp	.+136    	; 0xb336 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    b2ae:	81 e0       	ldi	r24, 0x01	; 1
    b2b0:	0e 94 11 45 	call	0x8a22	; 0x8a22 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    b2b4:	60 e0       	ldi	r22, 0x00	; 0
    b2b6:	85 e2       	ldi	r24, 0x25	; 37
    b2b8:	9c e0       	ldi	r25, 0x0C	; 12
    b2ba:	0e 94 0d 4d 	call	0x9a1a	; 0x9a1a <tank_map>
    b2be:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    b2c0:	68 2f       	mov	r22, r24
    b2c2:	89 e8       	ldi	r24, 0x89	; 137
    b2c4:	9f e0       	ldi	r25, 0x0F	; 15
    b2c6:	0e 94 0d 4d 	call	0x9a1a	; 0x9a1a <tank_map>
    b2ca:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    b2cc:	68 2f       	mov	r22, r24
    b2ce:	85 e2       	ldi	r24, 0x25	; 37
    b2d0:	9c e0       	ldi	r25, 0x0C	; 12
    b2d2:	0e 94 8f 4d 	call	0x9b1e	; 0x9b1e <shot_map>
    b2d6:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    b2d8:	68 2f       	mov	r22, r24
    b2da:	89 e8       	ldi	r24, 0x89	; 137
    b2dc:	9f e0       	ldi	r25, 0x0F	; 15
    b2de:	0e 94 8f 4d 	call	0x9b1e	; 0x9b1e <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    b2e2:	40 91 02 01 	lds	r20, 0x0102
    b2e6:	6f e0       	ldi	r22, 0x0F	; 15
    b2e8:	85 e2       	ldi	r24, 0x25	; 37
    b2ea:	9c e0       	ldi	r25, 0x0C	; 12
    b2ec:	0e 94 4b 4c 	call	0x9896	; 0x9896 <render_banter>
    b2f0:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    b2f4:	40 91 01 01 	lds	r20, 0x0101
    b2f8:	60 e0       	ldi	r22, 0x00	; 0
    b2fa:	89 e8       	ldi	r24, 0x89	; 137
    b2fc:	9f e0       	ldi	r25, 0x0F	; 15
    b2fe:	0e 94 4b 4c 	call	0x9896	; 0x9896 <render_banter>
    b302:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    b306:	60 e0       	ldi	r22, 0x00	; 0
    b308:	85 e2       	ldi	r24, 0x25	; 37
    b30a:	9c e0       	ldi	r25, 0x0C	; 12
    b30c:	0e 94 73 4c 	call	0x98e6	; 0x98e6 <render_player>
		render_player(&player2, p2_index);
    b310:	61 2f       	mov	r22, r17
    b312:	89 e8       	ldi	r24, 0x89	; 137
    b314:	9f e0       	ldi	r25, 0x0F	; 15
    b316:	0e 94 73 4c 	call	0x98e6	; 0x98e6 <render_player>
		render_shot(&player1, p1_shot_index);
    b31a:	6d 2f       	mov	r22, r29
    b31c:	85 e2       	ldi	r24, 0x25	; 37
    b31e:	9c e0       	ldi	r25, 0x0C	; 12
    b320:	0e 94 9c 4c 	call	0x9938	; 0x9938 <render_shot>
		render_shot(&player2, p2_shot_index);
    b324:	6c 2f       	mov	r22, r28
    b326:	89 e8       	ldi	r24, 0x89	; 137
    b328:	9f e0       	ldi	r25, 0x0F	; 15
    b32a:	0e 94 9c 4c 	call	0x9938	; 0x9938 <render_shot>
		render_tile_explosions(&tile_animations);
    b32e:	8c e0       	ldi	r24, 0x0C	; 12
    b330:	9c e0       	ldi	r25, 0x0C	; 12
    b332:	0e 94 c8 4c 	call	0x9990	; 0x9990 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    b336:	2f e0       	ldi	r18, 0x0F	; 15
    b338:	49 e8       	ldi	r20, 0x89	; 137
    b33a:	5f e0       	ldi	r21, 0x0F	; 15
    b33c:	65 e2       	ldi	r22, 0x25	; 37
    b33e:	7c e0       	ldi	r23, 0x0C	; 12
    b340:	c6 01       	movw	r24, r12
    b342:	0e 94 15 57 	call	0xae2a	; 0xae2a <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    b346:	20 e0       	ldi	r18, 0x00	; 0
    b348:	45 e2       	ldi	r20, 0x25	; 37
    b34a:	5c e0       	ldi	r21, 0x0C	; 12
    b34c:	69 e8       	ldi	r22, 0x89	; 137
    b34e:	7f e0       	ldi	r23, 0x0F	; 15
    b350:	c7 01       	movw	r24, r14
    b352:	0e 94 15 57 	call	0xae2a	; 0xae2a <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    b356:	2f e0       	ldi	r18, 0x0F	; 15
    b358:	40 e0       	ldi	r20, 0x00	; 0
    b35a:	69 e8       	ldi	r22, 0x89	; 137
    b35c:	7f e0       	ldi	r23, 0x0F	; 15
    b35e:	85 e2       	ldi	r24, 0x25	; 37
    b360:	9c e0       	ldi	r25, 0x0C	; 12
    b362:	0e 94 45 53 	call	0xa68a	; 0xa68a <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    b366:	20 e0       	ldi	r18, 0x00	; 0
    b368:	4f e0       	ldi	r20, 0x0F	; 15
    b36a:	65 e2       	ldi	r22, 0x25	; 37
    b36c:	7c e0       	ldi	r23, 0x0C	; 12
    b36e:	89 e8       	ldi	r24, 0x89	; 137
    b370:	9f e0       	ldi	r25, 0x0F	; 15
    b372:	0e 94 45 53 	call	0xa68a	; 0xa68a <collision_detect_player>
	
	if (game.selection == CPUVCPU) 
    b376:	80 91 0b 0c 	lds	r24, 0x0C0B
    b37a:	83 30       	cpi	r24, 0x03	; 3
    b37c:	69 f4       	brne	.+26     	; 0xb398 <update_level+0x138>
	{
		demo_counter++;
    b37e:	80 91 32 0b 	lds	r24, 0x0B32
    b382:	90 91 33 0b 	lds	r25, 0x0B33
    b386:	01 96       	adiw	r24, 0x01	; 1
    b388:	90 93 33 0b 	sts	0x0B33, r25
    b38c:	80 93 32 0b 	sts	0x0B32, r24
		held = ReadJoypad(0);
    b390:	80 e0       	ldi	r24, 0x00	; 0
    b392:	0e 94 c8 38 	call	0x7190	; 0x7190 <ReadJoypad>
    b396:	02 c0       	rjmp	.+4      	; 0xb39c <update_level+0x13c>
{
	char p1_index = 0;
	char p2_index = 0;
	char p1_shot_index = 0;
	char p2_shot_index = 0;
	u16 held = 0;
    b398:	80 e0       	ldi	r24, 0x00	; 0
    b39a:	90 e0       	ldi	r25, 0x00	; 0
	if (game.selection == CPUVCPU) 
	{
		demo_counter++;
		held = ReadJoypad(0);
	}
	if (game.selection == CPUVCPU &&
    b39c:	20 91 0b 0c 	lds	r18, 0x0C0B
    b3a0:	23 30       	cpi	r18, 0x03	; 3
    b3a2:	e1 f4       	brne	.+56     	; 0xb3dc <update_level+0x17c>
    b3a4:	8f 70       	andi	r24, 0x0F	; 15
    b3a6:	9e 70       	andi	r25, 0x0E	; 14
	    (((held & BTN_X) ||
		 (held & BTN_START) ||
		 (held & BTN_SL) ||
		 (held & BTN_SR) ||
		 (held & BTN_SELECT) ||
		 (held & BTN_Y) ||
    b3a8:	89 2b       	or	r24, r25
    b3aa:	39 f4       	brne	.+14     	; 0xb3ba <update_level+0x15a>
		 (held & BTN_B)) ||
    b3ac:	80 91 32 0b 	lds	r24, 0x0B32
    b3b0:	90 91 33 0b 	lds	r25, 0x0B33
    b3b4:	88 30       	cpi	r24, 0x08	; 8
    b3b6:	97 40       	sbci	r25, 0x07	; 7
    b3b8:	88 f0       	brcs	.+34     	; 0xb3dc <update_level+0x17c>
		demo_counter >= DEMO_LENGTH)
		)
	{
		demo_counter = 0;
    b3ba:	10 92 33 0b 	sts	0x0B33, r1
    b3be:	10 92 32 0b 	sts	0x0B32, r1
		fade_through();
    b3c2:	0e 94 99 4a 	call	0x9532	; 0x9532 <fade_through>
		init_game_state();
    b3c6:	0e 94 54 4a 	call	0x94a8	; 0x94a8 <init_game_state>
		load_splash();
	}
}
    b3ca:	df 91       	pop	r29
    b3cc:	cf 91       	pop	r28
    b3ce:	1f 91       	pop	r17
    b3d0:	ff 90       	pop	r15
    b3d2:	ef 90       	pop	r14
    b3d4:	df 90       	pop	r13
    b3d6:	cf 90       	pop	r12
		)
	{
		demo_counter = 0;
		fade_through();
		init_game_state();
		load_splash();
    b3d8:	0c 94 3c 56 	jmp	0xac78	; 0xac78 <load_splash>
	}
}
    b3dc:	df 91       	pop	r29
    b3de:	cf 91       	pop	r28
    b3e0:	1f 91       	pop	r17
    b3e2:	ff 90       	pop	r15
    b3e4:	ef 90       	pop	r14
    b3e6:	df 90       	pop	r13
    b3e8:	cf 90       	pop	r12
    b3ea:	08 95       	ret

0000b3ec <update_tank_rank>:
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    b3ec:	cf 93       	push	r28
    b3ee:	df 93       	push	r29
    b3f0:	ec 01       	movw	r28, r24
	// Update
	if (p1->pressed & BTN_X)
    b3f2:	88 81       	ld	r24, Y
    b3f4:	99 81       	ldd	r25, Y+1	; 0x01
    b3f6:	91 ff       	sbrs	r25, 1
    b3f8:	0a c0       	rjmp	.+20     	; 0xb40e <update_tank_rank+0x22>
	{
		SFX_NAVIGATE;
    b3fa:	2f ef       	ldi	r18, 0xFF	; 255
    b3fc:	47 e1       	ldi	r20, 0x17	; 23
    b3fe:	67 e0       	ldi	r22, 0x07	; 7
    b400:	84 e0       	ldi	r24, 0x04	; 4
    b402:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
		fade_through();
    b406:	0e 94 99 4a 	call	0x9532	; 0x9532 <fade_through>
		load_splash();
    b40a:	0e 94 3c 56 	call	0xac78	; 0xac78 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    b40e:	8c 81       	ldd	r24, Y+4	; 0x04
    b410:	9d 81       	ldd	r25, Y+5	; 0x05
    b412:	92 ff       	sbrs	r25, 2
    b414:	1d c0       	rjmp	.+58     	; 0xb450 <update_tank_rank+0x64>
    b416:	8e 81       	ldd	r24, Y+6	; 0x06
    b418:	8f 3f       	cpi	r24, 0xFF	; 255
    b41a:	d1 f4       	brne	.+52     	; 0xb450 <update_tank_rank+0x64>
	{
	    SFX_NAVIGATE;
    b41c:	2f ef       	ldi	r18, 0xFF	; 255
    b41e:	47 e1       	ldi	r20, 0x17	; 23
    b420:	67 e0       	ldi	r22, 0x07	; 7
    b422:	84 e0       	ldi	r24, 0x04	; 4
    b424:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
	    init_scores(&scores);
    b428:	81 ec       	ldi	r24, 0xC1	; 193
    b42a:	9b e0       	ldi	r25, 0x0B	; 11
    b42c:	0e 94 5d 49 	call	0x92ba	; 0x92ba <init_scores>
	    init_handles(&handles);
    b430:	88 ee       	ldi	r24, 0xE8	; 232
    b432:	9b e0       	ldi	r25, 0x0B	; 11
    b434:	0e 94 69 49 	call	0x92d2	; 0x92d2 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b438:	81 ec       	ldi	r24, 0xC1	; 193
    b43a:	9b e0       	ldi	r25, 0x0B	; 11
    b43c:	0e 94 b9 39 	call	0x7372	; 0x7372 <EepromWriteBlock>
    b440:	88 ee       	ldi	r24, 0xE8	; 232
    b442:	9b e0       	ldi	r25, 0x0B	; 11
    b444:	0e 94 b9 39 	call	0x7372	; 0x7372 <EepromWriteBlock>
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
	}
}
    b448:	df 91       	pop	r29
    b44a:	cf 91       	pop	r28
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    b44c:	0c 94 72 56 	jmp	0xace4	; 0xace4 <load_tank_rank>
	}
}
    b450:	df 91       	pop	r29
    b452:	cf 91       	pop	r28
    b454:	08 95       	ret

0000b456 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    b456:	0f 93       	push	r16
    b458:	1f 93       	push	r17
    b45a:	cf 93       	push	r28
    b45c:	df 93       	push	r29
    b45e:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    b460:	fb 01       	movw	r30, r22
    b462:	20 81       	ld	r18, Z
    b464:	31 81       	ldd	r19, Z+1	; 0x01
    b466:	f9 01       	movw	r30, r18
    b468:	e0 71       	andi	r30, 0x10	; 16
    b46a:	ff 27       	eor	r31, r31
    b46c:	24 ff       	sbrs	r18, 4
    b46e:	09 c0       	rjmp	.+18     	; 0xb482 <_handle_select_helper+0x2c>
    b470:	8d 81       	ldd	r24, Y+5	; 0x05
    b472:	81 11       	cpse	r24, r1
    b474:	06 c0       	rjmp	.+12     	; 0xb482 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    b476:	88 81       	ld	r24, Y
    b478:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    b47a:	87 ff       	sbrs	r24, 7
    b47c:	0f c0       	rjmp	.+30     	; 0xb49c <_handle_select_helper+0x46>
    b47e:	18 82       	st	Y, r1
    b480:	25 c0       	rjmp	.+74     	; 0xb4cc <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    b482:	b9 01       	movw	r22, r18
    b484:	60 72       	andi	r22, 0x20	; 32
    b486:	77 27       	eor	r23, r23
    b488:	25 ff       	sbrs	r18, 5
    b48a:	0a c0       	rjmp	.+20     	; 0xb4a0 <_handle_select_helper+0x4a>
    b48c:	8d 81       	ldd	r24, Y+5	; 0x05
    b48e:	81 11       	cpse	r24, r1
    b490:	07 c0       	rjmp	.+14     	; 0xb4a0 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    b492:	88 81       	ld	r24, Y
    b494:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    b496:	89 30       	cpi	r24, 0x09	; 9
    b498:	0c f0       	brlt	.+2      	; 0xb49c <_handle_select_helper+0x46>
    b49a:	88 e0       	ldi	r24, 0x08	; 8
    b49c:	88 83       	st	Y, r24
    b49e:	16 c0       	rjmp	.+44     	; 0xb4cc <_handle_select_helper+0x76>
    b4a0:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    b4a2:	a9 01       	movw	r20, r18
    b4a4:	44 27       	eor	r20, r20
    b4a6:	51 70       	andi	r21, 0x01	; 1
    b4a8:	30 ff       	sbrs	r19, 0
    b4aa:	1a c0       	rjmp	.+52     	; 0xb4e0 <_handle_select_helper+0x8a>
    b4ac:	ad 81       	ldd	r26, Y+5	; 0x05
    b4ae:	a1 11       	cpse	r26, r1
    b4b0:	17 c0       	rjmp	.+46     	; 0xb4e0 <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    b4b2:	81 e0       	ldi	r24, 0x01	; 1
    b4b4:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    b4b6:	69 91       	ld	r22, Y+
    b4b8:	f3 e0       	ldi	r31, 0x03	; 3
    b4ba:	6f 02       	muls	r22, r31
    b4bc:	b0 01       	movw	r22, r0
    b4be:	11 24       	eor	r1, r1
    b4c0:	66 51       	subi	r22, 0x16	; 22
    b4c2:	74 4f       	sbci	r23, 0xF4	; 244
    b4c4:	43 e0       	ldi	r20, 0x03	; 3
    b4c6:	ce 01       	movw	r24, r28
    b4c8:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
		SFX_NAVIGATE;
    b4cc:	2f ef       	ldi	r18, 0xFF	; 255
    b4ce:	47 e1       	ldi	r20, 0x17	; 23
    b4d0:	67 e0       	ldi	r22, 0x07	; 7
    b4d2:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    b4d4:	df 91       	pop	r29
    b4d6:	cf 91       	pop	r28
    b4d8:	1f 91       	pop	r17
    b4da:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    b4dc:	0c 94 ef 3b 	jmp	0x77de	; 0x77de <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    b4e0:	27 ff       	sbrs	r18, 7
    b4e2:	09 c0       	rjmp	.+18     	; 0xb4f6 <_handle_select_helper+0xa0>
    b4e4:	ad 81       	ldd	r26, Y+5	; 0x05
    b4e6:	a1 30       	cpi	r26, 0x01	; 1
    b4e8:	31 f4       	brne	.+12     	; 0xb4f6 <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    b4ea:	8c 81       	ldd	r24, Y+4	; 0x04
    b4ec:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    b4ee:	83 30       	cpi	r24, 0x03	; 3
    b4f0:	5c f0       	brlt	.+22     	; 0xb508 <_handle_select_helper+0xb2>
    b4f2:	82 e0       	ldi	r24, 0x02	; 2
    b4f4:	09 c0       	rjmp	.+18     	; 0xb508 <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    b4f6:	26 ff       	sbrs	r18, 6
    b4f8:	0b c0       	rjmp	.+22     	; 0xb510 <_handle_select_helper+0xba>
    b4fa:	ed 81       	ldd	r30, Y+5	; 0x05
    b4fc:	e1 30       	cpi	r30, 0x01	; 1
    b4fe:	41 f5       	brne	.+80     	; 0xb550 <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    b500:	8c 81       	ldd	r24, Y+4	; 0x04
    b502:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    b504:	87 fd       	sbrc	r24, 7
    b506:	02 c0       	rjmp	.+4      	; 0xb50c <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    b508:	8c 83       	std	Y+4, r24	; 0x04
    b50a:	e0 cf       	rjmp	.-64     	; 0xb4cc <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    b50c:	1c 82       	std	Y+4, r1	; 0x04
    b50e:	de cf       	rjmp	.-68     	; 0xb4cc <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    b510:	ef 2b       	or	r30, r31
    b512:	69 f0       	breq	.+26     	; 0xb52e <_handle_select_helper+0xd8>
    b514:	8d 81       	ldd	r24, Y+5	; 0x05
    b516:	81 30       	cpi	r24, 0x01	; 1
    b518:	09 f0       	breq	.+2      	; 0xb51c <_handle_select_helper+0xc6>
    b51a:	43 c0       	rjmp	.+134    	; 0xb5a2 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    b51c:	8c 81       	ldd	r24, Y+4	; 0x04
    b51e:	c8 0f       	add	r28, r24
    b520:	d1 1d       	adc	r29, r1
    b522:	99 81       	ldd	r25, Y+1	; 0x01
    b524:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    b526:	91 34       	cpi	r25, 0x41	; 65
    b528:	70 f4       	brcc	.+28     	; 0xb546 <_handle_select_helper+0xf0>
    b52a:	81 e4       	ldi	r24, 0x41	; 65
    b52c:	0f c0       	rjmp	.+30     	; 0xb54c <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    b52e:	67 2b       	or	r22, r23
    b530:	89 f0       	breq	.+34     	; 0xb554 <_handle_select_helper+0xfe>
    b532:	8d 81       	ldd	r24, Y+5	; 0x05
    b534:	81 30       	cpi	r24, 0x01	; 1
    b536:	a9 f5       	brne	.+106    	; 0xb5a2 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    b538:	8c 81       	ldd	r24, Y+4	; 0x04
    b53a:	c8 0f       	add	r28, r24
    b53c:	d1 1d       	adc	r29, r1
    b53e:	99 81       	ldd	r25, Y+1	; 0x01
    b540:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    b542:	9b 35       	cpi	r25, 0x5B	; 91
    b544:	10 f4       	brcc	.+4      	; 0xb54a <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    b546:	99 83       	std	Y+1, r25	; 0x01
    b548:	c1 cf       	rjmp	.-126    	; 0xb4cc <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    b54a:	8a e5       	ldi	r24, 0x5A	; 90
    b54c:	89 83       	std	Y+1, r24	; 0x01
    b54e:	be cf       	rjmp	.-132    	; 0xb4cc <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    b550:	67 2b       	or	r22, r23
    b552:	39 f5       	brne	.+78     	; 0xb5a2 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    b554:	45 2b       	or	r20, r21
    b556:	29 f1       	breq	.+74     	; 0xb5a2 <_handle_select_helper+0x14c>
    b558:	4d 81       	ldd	r20, Y+5	; 0x05
    b55a:	41 30       	cpi	r20, 0x01	; 1
    b55c:	11 f5       	brne	.+68     	; 0xb5a2 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    b55e:	fe 01       	movw	r30, r28
    b560:	21 91       	ld	r18, Z+
    b562:	8f 01       	movw	r16, r30
    b564:	fc 01       	movw	r30, r24
    b566:	23 87       	std	Z+11, r18	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    b568:	43 e0       	ldi	r20, 0x03	; 3
    b56a:	b8 01       	movw	r22, r16
    b56c:	0c 96       	adiw	r24, 0x0c	; 12
    b56e:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    b572:	88 81       	ld	r24, Y
    b574:	f3 e0       	ldi	r31, 0x03	; 3
    b576:	8f 02       	muls	r24, r31
    b578:	c0 01       	movw	r24, r0
    b57a:	11 24       	eor	r1, r1
    b57c:	43 e0       	ldi	r20, 0x03	; 3
    b57e:	b8 01       	movw	r22, r16
    b580:	86 51       	subi	r24, 0x16	; 22
    b582:	94 4f       	sbci	r25, 0xF4	; 244
    b584:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
		SFX_NAVIGATE;
    b588:	2f ef       	ldi	r18, 0xFF	; 255
    b58a:	47 e1       	ldi	r20, 0x17	; 23
    b58c:	67 e0       	ldi	r22, 0x07	; 7
    b58e:	84 e0       	ldi	r24, 0x04	; 4
    b590:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b594:	88 ee       	ldi	r24, 0xE8	; 232
    b596:	9b e0       	ldi	r25, 0x0B	; 11
    b598:	0e 94 b9 39 	call	0x7372	; 0x7372 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    b59c:	82 e0       	ldi	r24, 0x02	; 2
    b59e:	8d 83       	std	Y+5, r24	; 0x05
    b5a0:	1a c0       	rjmp	.+52     	; 0xb5d6 <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    b5a2:	31 ff       	sbrs	r19, 1
    b5a4:	18 c0       	rjmp	.+48     	; 0xb5d6 <_handle_select_helper+0x180>
    b5a6:	8d 81       	ldd	r24, Y+5	; 0x05
    b5a8:	81 30       	cpi	r24, 0x01	; 1
    b5aa:	11 f4       	brne	.+4      	; 0xb5b0 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    b5ac:	1d 82       	std	Y+5, r1	; 0x05
    b5ae:	8e cf       	rjmp	.-228    	; 0xb4cc <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    b5b0:	82 30       	cpi	r24, 0x02	; 2
    b5b2:	19 f4       	brne	.+6      	; 0xb5ba <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    b5b4:	81 e0       	ldi	r24, 0x01	; 1
    b5b6:	8d 83       	std	Y+5, r24	; 0x05
    b5b8:	89 cf       	rjmp	.-238    	; 0xb4cc <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    b5ba:	2f ef       	ldi	r18, 0xFF	; 255
    b5bc:	47 e1       	ldi	r20, 0x17	; 23
    b5be:	67 e0       	ldi	r22, 0x07	; 7
    b5c0:	84 e0       	ldi	r24, 0x04	; 4
    b5c2:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
		fade_through();
    b5c6:	0e 94 99 4a 	call	0x9532	; 0x9532 <fade_through>
		load_splash();
	}
}
    b5ca:	df 91       	pop	r29
    b5cc:	cf 91       	pop	r28
    b5ce:	1f 91       	pop	r17
    b5d0:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    b5d2:	0c 94 3c 56 	jmp	0xac78	; 0xac78 <load_splash>
	}
}
    b5d6:	df 91       	pop	r29
    b5d8:	cf 91       	pop	r28
    b5da:	1f 91       	pop	r17
    b5dc:	0f 91       	pop	r16
    b5de:	08 95       	ret

0000b5e0 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    b5e0:	af 92       	push	r10
    b5e2:	bf 92       	push	r11
    b5e4:	cf 92       	push	r12
    b5e6:	df 92       	push	r13
    b5e8:	ef 92       	push	r14
    b5ea:	ff 92       	push	r15
    b5ec:	0f 93       	push	r16
    b5ee:	1f 93       	push	r17
    b5f0:	cf 93       	push	r28
    b5f2:	df 93       	push	r29
    b5f4:	00 d0       	rcall	.+0      	; 0xb5f6 <_handle_select_render_helper+0x16>
    b5f6:	1f 92       	push	r1
    b5f8:	cd b7       	in	r28, 0x3d	; 61
    b5fa:	de b7       	in	r29, 0x3e	; 62
    b5fc:	7c 01       	movw	r14, r24
    b5fe:	b4 2e       	mov	r11, r20
    b600:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    b602:	80 e2       	ldi	r24, 0x20	; 32
    b604:	89 83       	std	Y+1, r24	; 0x01
    b606:	8a 83       	std	Y+2, r24	; 0x02
    b608:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    b60a:	f7 01       	movw	r30, r14
    b60c:	85 81       	ldd	r24, Z+5	; 0x05
    b60e:	81 11       	cpse	r24, r1
    b610:	1d c0       	rjmp	.+58     	; 0xb64c <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    b612:	40 e0       	ldi	r20, 0x00	; 0
    b614:	67 ed       	ldi	r22, 0xD7	; 215
    b616:	73 e4       	ldi	r23, 0x43	; 67
    b618:	82 2f       	mov	r24, r18
    b61a:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b61e:	40 e0       	ldi	r20, 0x00	; 0
    b620:	61 e3       	ldi	r22, 0x31	; 49
    b622:	74 e4       	ldi	r23, 0x44	; 68
    b624:	81 e0       	ldi	r24, 0x01	; 1
    b626:	81 0f       	add	r24, r17
    b628:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    b62c:	f7 01       	movw	r30, r14
    b62e:	40 81       	ld	r20, Z
    b630:	44 0f       	add	r20, r20
    b632:	44 0f       	add	r20, r20
    b634:	44 0f       	add	r20, r20
    b636:	40 5c       	subi	r20, 0xC0	; 192
    b638:	01 e0       	ldi	r16, 0x01	; 1
    b63a:	21 e0       	ldi	r18, 0x01	; 1
    b63c:	6b 2d       	mov	r22, r11
    b63e:	66 0f       	add	r22, r22
    b640:	66 0f       	add	r22, r22
    b642:	66 0f       	add	r22, r22
    b644:	81 2f       	mov	r24, r17
    b646:	0e 94 3a 46 	call	0x8c74	; 0x8c74 <MoveSprite>
    b64a:	6f c0       	rjmp	.+222    	; 0xb72a <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    b64c:	81 30       	cpi	r24, 0x01	; 1
    b64e:	09 f0       	breq	.+2      	; 0xb652 <_handle_select_render_helper+0x72>
    b650:	44 c0       	rjmp	.+136    	; 0xb6da <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    b652:	40 e0       	ldi	r20, 0x00	; 0
    b654:	61 ed       	ldi	r22, 0xD1	; 209
    b656:	73 e4       	ldi	r23, 0x43	; 67
    b658:	82 2f       	mov	r24, r18
    b65a:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    b65e:	aa 24       	eor	r10, r10
    b660:	a3 94       	inc	r10
    b662:	a1 0e       	add	r10, r17
    b664:	40 e0       	ldi	r20, 0x00	; 0
    b666:	6e ec       	ldi	r22, 0xCE	; 206
    b668:	73 e4       	ldi	r23, 0x43	; 67
    b66a:	8a 2d       	mov	r24, r10
    b66c:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    b670:	cb 2c       	mov	r12, r11
    b672:	d1 2c       	mov	r13, r1
    b674:	f5 e0       	ldi	r31, 0x05	; 5
    b676:	cf 0e       	add	r12, r31
    b678:	d1 1c       	adc	r13, r1
    b67a:	f7 01       	movw	r30, r14
    b67c:	40 81       	ld	r20, Z
    b67e:	44 0f       	add	r20, r20
    b680:	44 0f       	add	r20, r20
    b682:	44 0f       	add	r20, r20
    b684:	48 5c       	subi	r20, 0xC8	; 200
    b686:	84 81       	ldd	r24, Z+4	; 0x04
    b688:	b6 01       	movw	r22, r12
    b68a:	68 0f       	add	r22, r24
    b68c:	71 1d       	adc	r23, r1
    b68e:	87 fd       	sbrc	r24, 7
    b690:	7a 95       	dec	r23
    b692:	66 0f       	add	r22, r22
    b694:	66 0f       	add	r22, r22
    b696:	66 0f       	add	r22, r22
    b698:	01 e0       	ldi	r16, 0x01	; 1
    b69a:	21 e0       	ldi	r18, 0x01	; 1
    b69c:	81 2f       	mov	r24, r17
    b69e:	0e 94 3a 46 	call	0x8c74	; 0x8c74 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    b6a2:	f7 01       	movw	r30, r14
    b6a4:	40 81       	ld	r20, Z
    b6a6:	44 0f       	add	r20, r20
    b6a8:	44 0f       	add	r20, r20
    b6aa:	44 0f       	add	r20, r20
    b6ac:	48 5b       	subi	r20, 0xB8	; 184
    b6ae:	84 81       	ldd	r24, Z+4	; 0x04
    b6b0:	c8 0e       	add	r12, r24
    b6b2:	d1 1c       	adc	r13, r1
    b6b4:	87 fd       	sbrc	r24, 7
    b6b6:	da 94       	dec	r13
    b6b8:	6c 2d       	mov	r22, r12
    b6ba:	66 0f       	add	r22, r22
    b6bc:	66 0f       	add	r22, r22
    b6be:	66 0f       	add	r22, r22
    b6c0:	21 e0       	ldi	r18, 0x01	; 1
    b6c2:	8a 2d       	mov	r24, r10
    b6c4:	0e 94 3a 46 	call	0x8c74	; 0x8c74 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    b6c8:	43 e0       	ldi	r20, 0x03	; 3
    b6ca:	b7 01       	movw	r22, r14
    b6cc:	6f 5f       	subi	r22, 0xFF	; 255
    b6ce:	7f 4f       	sbci	r23, 0xFF	; 255
    b6d0:	ce 01       	movw	r24, r28
    b6d2:	01 96       	adiw	r24, 0x01	; 1
    b6d4:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
    b6d8:	28 c0       	rjmp	.+80     	; 0xb72a <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    b6da:	82 30       	cpi	r24, 0x02	; 2
    b6dc:	31 f5       	brne	.+76     	; 0xb72a <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    b6de:	c4 2e       	mov	r12, r20
    b6e0:	d1 2c       	mov	r13, r1
    b6e2:	48 e2       	ldi	r20, 0x28	; 40
    b6e4:	65 e0       	ldi	r22, 0x05	; 5
    b6e6:	70 e0       	ldi	r23, 0x00	; 0
    b6e8:	c6 01       	movw	r24, r12
    b6ea:	06 96       	adiw	r24, 0x06	; 6
    b6ec:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b6f0:	23 e0       	ldi	r18, 0x03	; 3
    b6f2:	a7 01       	movw	r20, r14
    b6f4:	4f 5f       	subi	r20, 0xFF	; 255
    b6f6:	5f 4f       	sbci	r21, 0xFF	; 255
    b6f8:	65 e0       	ldi	r22, 0x05	; 5
    b6fa:	87 e0       	ldi	r24, 0x07	; 7
    b6fc:	8b 0d       	add	r24, r11
    b6fe:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b702:	49 e2       	ldi	r20, 0x29	; 41
    b704:	65 e0       	ldi	r22, 0x05	; 5
    b706:	70 e0       	ldi	r23, 0x00	; 0
    b708:	c6 01       	movw	r24, r12
    b70a:	0a 96       	adiw	r24, 0x0a	; 10
    b70c:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <PrintChar>
		MapSprite2(idx, map_none, 0);
    b710:	40 e0       	ldi	r20, 0x00	; 0
    b712:	61 e3       	ldi	r22, 0x31	; 49
    b714:	74 e4       	ldi	r23, 0x44	; 68
    b716:	81 2f       	mov	r24, r17
    b718:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b71c:	40 e0       	ldi	r20, 0x00	; 0
    b71e:	61 e3       	ldi	r22, 0x31	; 49
    b720:	74 e4       	ldi	r23, 0x44	; 68
    b722:	81 e0       	ldi	r24, 0x01	; 1
    b724:	81 0f       	add	r24, r17
    b726:	0e 94 e8 45 	call	0x8bd0	; 0x8bd0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b72a:	f7 01       	movw	r30, r14
    b72c:	60 81       	ld	r22, Z
    b72e:	68 5f       	subi	r22, 0xF8	; 248
    b730:	23 e0       	ldi	r18, 0x03	; 3
    b732:	ae 01       	movw	r20, r28
    b734:	4f 5f       	subi	r20, 0xFF	; 255
    b736:	5f 4f       	sbci	r21, 0xFF	; 255
    b738:	85 e0       	ldi	r24, 0x05	; 5
    b73a:	8b 0d       	add	r24, r11
    b73c:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <LBPrintStr>
}
    b740:	0f 90       	pop	r0
    b742:	0f 90       	pop	r0
    b744:	0f 90       	pop	r0
    b746:	df 91       	pop	r29
    b748:	cf 91       	pop	r28
    b74a:	1f 91       	pop	r17
    b74c:	0f 91       	pop	r16
    b74e:	ff 90       	pop	r15
    b750:	ef 90       	pop	r14
    b752:	df 90       	pop	r13
    b754:	cf 90       	pop	r12
    b756:	bf 90       	pop	r11
    b758:	af 90       	pop	r10
    b75a:	08 95       	ret

0000b75c <load_handle_select>:

void load_handle_select()
{
    b75c:	8f 92       	push	r8
    b75e:	9f 92       	push	r9
    b760:	af 92       	push	r10
    b762:	bf 92       	push	r11
    b764:	cf 92       	push	r12
    b766:	df 92       	push	r13
    b768:	ef 92       	push	r14
    b76a:	ff 92       	push	r15
    b76c:	0f 93       	push	r16
    b76e:	1f 93       	push	r17
    b770:	cf 93       	push	r28
    b772:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    b774:	82 e0       	ldi	r24, 0x02	; 2
    b776:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    b77a:	0e 94 a3 4a 	call	0x9546	; 0x9546 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    b77e:	4a e7       	ldi	r20, 0x7A	; 122
    b780:	58 e6       	ldi	r21, 0x68	; 104
    b782:	64 e0       	ldi	r22, 0x04	; 4
    b784:	83 e0       	ldi	r24, 0x03	; 3
    b786:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
	DrawMap2(20, 4, map_blue_tank);
    b78a:	44 e7       	ldi	r20, 0x74	; 116
    b78c:	58 e6       	ldi	r21, 0x68	; 104
    b78e:	64 e0       	ldi	r22, 0x04	; 4
    b790:	84 e1       	ldi	r24, 0x14	; 20
    b792:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <DrawMap2>
	Print(9, 1, (char*) strHandlesTitle);
    b796:	45 ef       	ldi	r20, 0xF5	; 245
    b798:	52 e0       	ldi	r21, 0x02	; 2
    b79a:	61 e0       	ldi	r22, 0x01	; 1
    b79c:	70 e0       	ldi	r23, 0x00	; 0
    b79e:	89 e0       	ldi	r24, 0x09	; 9
    b7a0:	90 e0       	ldi	r25, 0x00	; 0
    b7a2:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(6, 5, (char*) strPlayer1);
    b7a6:	44 ee       	ldi	r20, 0xE4	; 228
    b7a8:	52 e0       	ldi	r21, 0x02	; 2
    b7aa:	65 e0       	ldi	r22, 0x05	; 5
    b7ac:	70 e0       	ldi	r23, 0x00	; 0
    b7ae:	86 e0       	ldi	r24, 0x06	; 6
    b7b0:	90 e0       	ldi	r25, 0x00	; 0
    b7b2:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(23, 5, (char*) strPlayer2);
    b7b6:	41 ee       	ldi	r20, 0xE1	; 225
    b7b8:	52 e0       	ldi	r21, 0x02	; 2
    b7ba:	65 e0       	ldi	r22, 0x05	; 5
    b7bc:	70 e0       	ldi	r23, 0x00	; 0
    b7be:	87 e1       	ldi	r24, 0x17	; 23
    b7c0:	90 e0       	ldi	r25, 0x00	; 0
    b7c2:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
    b7c6:	8a ee       	ldi	r24, 0xEA	; 234
    b7c8:	e8 2e       	mov	r14, r24
    b7ca:	8b e0       	ldi	r24, 0x0B	; 11
    b7cc:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    b7ce:	c0 e0       	ldi	r28, 0x00	; 0
    b7d0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    b7d2:	93 e0       	ldi	r25, 0x03	; 3
    b7d4:	a9 2e       	mov	r10, r25
    b7d6:	b1 2c       	mov	r11, r1
    b7d8:	67 01       	movw	r12, r14
    b7da:	ce 01       	movw	r24, r28
    b7dc:	b5 01       	movw	r22, r10
    b7de:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__divmodhi4>
    b7e2:	4c 01       	movw	r8, r24
    b7e4:	8b 01       	movw	r16, r22
    b7e6:	08 5f       	subi	r16, 0xF8	; 248
    b7e8:	1f 4f       	sbci	r17, 0xFF	; 255
    b7ea:	f7 01       	movw	r30, r14
    b7ec:	41 91       	ld	r20, Z+
    b7ee:	7f 01       	movw	r14, r30
    b7f0:	b8 01       	movw	r22, r16
    b7f2:	03 96       	adiw	r24, 0x03	; 3
    b7f4:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    b7f8:	f6 01       	movw	r30, r12
    b7fa:	40 81       	ld	r20, Z
    b7fc:	b8 01       	movw	r22, r16
    b7fe:	c4 01       	movw	r24, r8
    b800:	44 96       	adiw	r24, 0x14	; 20
    b802:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    b806:	21 96       	adiw	r28, 0x01	; 1
    b808:	cb 31       	cpi	r28, 0x1B	; 27
    b80a:	d1 05       	cpc	r29, r1
    b80c:	29 f7       	brne	.-54     	; 0xb7d8 <load_handle_select+0x7c>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
    b80e:	46 ed       	ldi	r20, 0xD6	; 214
    b810:	52 e0       	ldi	r21, 0x02	; 2
    b812:	65 e1       	ldi	r22, 0x15	; 21
    b814:	70 e0       	ldi	r23, 0x00	; 0
    b816:	88 e0       	ldi	r24, 0x08	; 8
    b818:	90 e0       	ldi	r25, 0x00	; 0
    b81a:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(8, 22, (char*) strConfirmHandle);
    b81e:	4a ec       	ldi	r20, 0xCA	; 202
    b820:	52 e0       	ldi	r21, 0x02	; 2
    b822:	66 e1       	ldi	r22, 0x16	; 22
    b824:	70 e0       	ldi	r23, 0x00	; 0
    b826:	88 e0       	ldi	r24, 0x08	; 8
    b828:	90 e0       	ldi	r25, 0x00	; 0
    b82a:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(8, 23, (char*) strCancelHandle);
    b82e:	4f eb       	ldi	r20, 0xBF	; 191
    b830:	52 e0       	ldi	r21, 0x02	; 2
    b832:	67 e1       	ldi	r22, 0x17	; 23
    b834:	70 e0       	ldi	r23, 0x00	; 0
    b836:	88 e0       	ldi	r24, 0x08	; 8
    b838:	90 e0       	ldi	r25, 0x00	; 0
    b83a:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>
	Print(8, 24, (char*) strChangeHandle);
    b83e:	47 e9       	ldi	r20, 0x97	; 151
    b840:	52 e0       	ldi	r21, 0x02	; 2
    b842:	68 e1       	ldi	r22, 0x18	; 24
    b844:	70 e0       	ldi	r23, 0x00	; 0
    b846:	88 e0       	ldi	r24, 0x08	; 8
    b848:	90 e0       	ldi	r25, 0x00	; 0
}
    b84a:	df 91       	pop	r29
    b84c:	cf 91       	pop	r28
    b84e:	1f 91       	pop	r17
    b850:	0f 91       	pop	r16
    b852:	ff 90       	pop	r15
    b854:	ef 90       	pop	r14
    b856:	df 90       	pop	r13
    b858:	cf 90       	pop	r12
    b85a:	bf 90       	pop	r11
    b85c:	af 90       	pop	r10
    b85e:	9f 90       	pop	r9
    b860:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
	Print(8, 22, (char*) strConfirmHandle);
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
    b862:	0c 94 ea 46 	jmp	0x8dd4	; 0x8dd4 <Print>

0000b866 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    b866:	0f 93       	push	r16
    b868:	cf 93       	push	r28
    b86a:	df 93       	push	r29
    b86c:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	
	// Render
	switch (game.selection)
    b86e:	90 91 0b 0c 	lds	r25, 0x0C0B
    b872:	91 30       	cpi	r25, 0x01	; 1
    b874:	41 f0       	breq	.+16     	; 0xb886 <update_splash+0x20>
    b876:	92 30       	cpi	r25, 0x02	; 2
    b878:	51 f0       	breq	.+20     	; 0xb88e <update_splash+0x28>
    b87a:	91 11       	cpse	r25, r1
    b87c:	0f c0       	rjmp	.+30     	; 0xb89c <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    b87e:	01 e0       	ldi	r16, 0x01	; 1
    b880:	21 e0       	ldi	r18, 0x01	; 1
    b882:	48 e6       	ldi	r20, 0x68	; 104
    b884:	07 c0       	rjmp	.+14     	; 0xb894 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    b886:	01 e0       	ldi	r16, 0x01	; 1
    b888:	21 e0       	ldi	r18, 0x01	; 1
    b88a:	40 e7       	ldi	r20, 0x70	; 112
    b88c:	03 c0       	rjmp	.+6      	; 0xb894 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    b88e:	01 e0       	ldi	r16, 0x01	; 1
    b890:	21 e0       	ldi	r18, 0x01	; 1
    b892:	48 e7       	ldi	r20, 0x78	; 120
    b894:	60 e3       	ldi	r22, 0x30	; 48
    b896:	80 e0       	ldi	r24, 0x00	; 0
    b898:	0e 94 3a 46 	call	0x8c74	; 0x8c74 <MoveSprite>
			break;
	}
	Print(9, 21, (char*) strSelectHandle);
    b89c:	46 ed       	ldi	r20, 0xD6	; 214
    b89e:	52 e0       	ldi	r21, 0x02	; 2
    b8a0:	65 e1       	ldi	r22, 0x15	; 21
    b8a2:	70 e0       	ldi	r23, 0x00	; 0
    b8a4:	89 e0       	ldi	r24, 0x09	; 9
    b8a6:	90 e0       	ldi	r25, 0x00	; 0
    b8a8:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    b8ac:	88 81       	ld	r24, Y
    b8ae:	99 81       	ldd	r25, Y+1	; 0x01
    b8b0:	00 97       	sbiw	r24, 0x00	; 0
    b8b2:	21 f0       	breq	.+8      	; 0xb8bc <update_splash+0x56>
    b8b4:	10 92 31 0b 	sts	0x0B31, r1
    b8b8:	10 92 30 0b 	sts	0x0B30, r1
	
	if (p1->pressed & BTN_UP)
    b8bc:	84 ff       	sbrs	r24, 4
    b8be:	0e c0       	rjmp	.+28     	; 0xb8dc <update_splash+0x76>
	{
		game.selection--;
    b8c0:	80 91 0b 0c 	lds	r24, 0x0C0B
    b8c4:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    b8c6:	87 ff       	sbrs	r24, 7
    b8c8:	11 c0       	rjmp	.+34     	; 0xb8ec <update_splash+0x86>
    b8ca:	10 92 0b 0c 	sts	0x0C0B, r1
		SFX_NAVIGATE;
    b8ce:	2f ef       	ldi	r18, 0xFF	; 255
    b8d0:	47 e1       	ldi	r20, 0x17	; 23
    b8d2:	67 e0       	ldi	r22, 0x07	; 7
    b8d4:	84 e0       	ldi	r24, 0x04	; 4
    b8d6:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
    b8da:	6f c0       	rjmp	.+222    	; 0xb9ba <update_splash+0x154>
	}
	else if (p1->pressed & BTN_DOWN)
    b8dc:	85 ff       	sbrs	r24, 5
    b8de:	09 c0       	rjmp	.+18     	; 0xb8f2 <update_splash+0x8c>
	{
		game.selection++;
    b8e0:	80 91 0b 0c 	lds	r24, 0x0C0B
    b8e4:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    b8e6:	83 30       	cpi	r24, 0x03	; 3
    b8e8:	0c f0       	brlt	.+2      	; 0xb8ec <update_splash+0x86>
    b8ea:	82 e0       	ldi	r24, 0x02	; 2
    b8ec:	80 93 0b 0c 	sts	0x0C0B, r24
    b8f0:	ee cf       	rjmp	.-36     	; 0xb8ce <update_splash+0x68>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    b8f2:	90 ff       	sbrs	r25, 0
    b8f4:	2c c0       	rjmp	.+88     	; 0xb94e <update_splash+0xe8>
    b8f6:	80 91 0b 0c 	lds	r24, 0x0C0B
    b8fa:	82 30       	cpi	r24, 0x02	; 2
    b8fc:	a8 f4       	brcc	.+42     	; 0xb928 <update_splash+0xc2>
	{
		p1s.select_state = SELECTING;
    b8fe:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    b902:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    b906:	2f ef       	ldi	r18, 0xFF	; 255
    b908:	47 e1       	ldi	r20, 0x17	; 23
    b90a:	67 e0       	ldi	r22, 0x07	; 7
    b90c:	84 e0       	ldi	r24, 0x04	; 4
    b90e:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
		fade_through();
    b912:	0e 94 99 4a 	call	0x9532	; 0x9532 <fade_through>
		load_eeprom(&handles);
    b916:	88 ee       	ldi	r24, 0xE8	; 232
    b918:	9b e0       	ldi	r25, 0x0B	; 11
    b91a:	0e 94 87 4a 	call	0x950e	; 0x950e <load_eeprom>
		level_transition(LBRandom(0, 9));
		return;
		
	}
	demo_counter++;
}
    b91e:	df 91       	pop	r29
    b920:	cf 91       	pop	r28
    b922:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    b924:	0c 94 ae 5b 	jmp	0xb75c	; 0xb75c <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    b928:	82 30       	cpi	r24, 0x02	; 2
    b92a:	89 f4       	brne	.+34     	; 0xb94e <update_splash+0xe8>
	{
		SFX_NAVIGATE;
    b92c:	2f ef       	ldi	r18, 0xFF	; 255
    b92e:	47 e1       	ldi	r20, 0x17	; 23
    b930:	67 e0       	ldi	r22, 0x07	; 7
    b932:	84 e0       	ldi	r24, 0x04	; 4
    b934:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
		fade_through();
    b938:	0e 94 99 4a 	call	0x9532	; 0x9532 <fade_through>
		load_eeprom(&scores);
    b93c:	81 ec       	ldi	r24, 0xC1	; 193
    b93e:	9b e0       	ldi	r25, 0x0B	; 11
    b940:	0e 94 87 4a 	call	0x950e	; 0x950e <load_eeprom>
		level_transition(LBRandom(0, 9));
		return;
		
	}
	demo_counter++;
}
    b944:	df 91       	pop	r29
    b946:	cf 91       	pop	r28
    b948:	0f 91       	pop	r16
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    b94a:	0c 94 72 56 	jmp	0xace4	; 0xace4 <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    b94e:	80 91 30 0b 	lds	r24, 0x0B30
    b952:	90 91 31 0b 	lds	r25, 0x0B31
    b956:	88 35       	cpi	r24, 0x58	; 88
    b958:	92 40       	sbci	r25, 0x02	; 2
    b95a:	78 f1       	brcs	.+94     	; 0xb9ba <update_splash+0x154>
	{
		demo_counter = 0;
    b95c:	10 92 31 0b 	sts	0x0B31, r1
    b960:	10 92 30 0b 	sts	0x0B30, r1
		game.selection = CPUVCPU;
    b964:	83 e0       	ldi	r24, 0x03	; 3
    b966:	80 93 0b 0c 	sts	0x0C0B, r24
		player1.handle_id = 9;
    b96a:	c9 e0       	ldi	r28, 0x09	; 9
    b96c:	c0 93 30 0c 	sts	0x0C30, r28
		LBCopyChars(player1.handle, &handles.data[9*3], 3);
    b970:	43 e0       	ldi	r20, 0x03	; 3
    b972:	65 e0       	ldi	r22, 0x05	; 5
    b974:	7c e0       	ldi	r23, 0x0C	; 12
    b976:	81 e3       	ldi	r24, 0x31	; 49
    b978:	9c e0       	ldi	r25, 0x0C	; 12
    b97a:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
		player2.handle_id = 9;
    b97e:	c0 93 94 0f 	sts	0x0F94, r28
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
    b982:	43 e0       	ldi	r20, 0x03	; 3
    b984:	65 e0       	ldi	r22, 0x05	; 5
    b986:	7c e0       	ldi	r23, 0x0C	; 12
    b988:	85 e9       	ldi	r24, 0x95	; 149
    b98a:	9f e0       	ldi	r25, 0x0F	; 15
    b98c:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
		SFX_NAVIGATE;
    b990:	2f ef       	ldi	r18, 0xFF	; 255
    b992:	47 e1       	ldi	r20, 0x17	; 23
    b994:	67 e0       	ldi	r22, 0x07	; 7
    b996:	84 e0       	ldi	r24, 0x04	; 4
    b998:	0e 94 ef 3b 	call	0x77de	; 0x77de <TriggerNote>
		clear_sprites();
    b99c:	0e 94 a3 4a 	call	0x9546	; 0x9546 <clear_sprites>
		fade_through();
    b9a0:	0e 94 99 4a 	call	0x9532	; 0x9532 <fade_through>
		level_transition(LBRandom(0, 9));
    b9a4:	69 e0       	ldi	r22, 0x09	; 9
    b9a6:	70 e0       	ldi	r23, 0x00	; 0
    b9a8:	80 e0       	ldi	r24, 0x00	; 0
    b9aa:	90 e0       	ldi	r25, 0x00	; 0
    b9ac:	0e 94 19 49 	call	0x9232	; 0x9232 <LBRandom>
		return;
		
	}
	demo_counter++;
}
    b9b0:	df 91       	pop	r29
    b9b2:	cf 91       	pop	r28
    b9b4:	0f 91       	pop	r16
		player2.handle_id = 9;
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
		SFX_NAVIGATE;
		clear_sprites();
		fade_through();
		level_transition(LBRandom(0, 9));
    b9b6:	0c 94 0c 56 	jmp	0xac18	; 0xac18 <level_transition>
		return;
		
	}
	demo_counter++;
    b9ba:	80 91 30 0b 	lds	r24, 0x0B30
    b9be:	90 91 31 0b 	lds	r25, 0x0B31
    b9c2:	01 96       	adiw	r24, 0x01	; 1
    b9c4:	90 93 31 0b 	sts	0x0B31, r25
    b9c8:	80 93 30 0b 	sts	0x0B30, r24
}
    b9cc:	df 91       	pop	r29
    b9ce:	cf 91       	pop	r28
    b9d0:	0f 91       	pop	r16
    b9d2:	08 95       	ret

0000b9d4 <update_handle_select>:
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    b9d4:	0f 93       	push	r16
    b9d6:	1f 93       	push	r17
    b9d8:	cf 93       	push	r28
    b9da:	df 93       	push	r29
    b9dc:	8c 01       	movw	r16, r24
    b9de:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    b9e0:	26 e0       	ldi	r18, 0x06	; 6
    b9e2:	42 e0       	ldi	r20, 0x02	; 2
    b9e4:	bc 01       	movw	r22, r24
    b9e6:	8a e2       	ldi	r24, 0x2A	; 42
    b9e8:	9b e0       	ldi	r25, 0x0B	; 11
    b9ea:	0e 94 f0 5a 	call	0xb5e0	; 0xb5e0 <_handle_select_render_helper>
	if (game.selection == PVP)
    b9ee:	80 91 0b 0c 	lds	r24, 0x0C0B
    b9f2:	81 30       	cpi	r24, 0x01	; 1
    b9f4:	39 f4       	brne	.+14     	; 0xba04 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    b9f6:	28 e0       	ldi	r18, 0x08	; 8
    b9f8:	43 e1       	ldi	r20, 0x13	; 19
    b9fa:	be 01       	movw	r22, r28
    b9fc:	84 e2       	ldi	r24, 0x24	; 36
    b9fe:	9b e0       	ldi	r25, 0x0B	; 11
    ba00:	0e 94 f0 5a 	call	0xb5e0	; 0xb5e0 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    ba04:	45 e2       	ldi	r20, 0x25	; 37
    ba06:	5c e0       	ldi	r21, 0x0C	; 12
    ba08:	b8 01       	movw	r22, r16
    ba0a:	8a e2       	ldi	r24, 0x2A	; 42
    ba0c:	9b e0       	ldi	r25, 0x0B	; 11
    ba0e:	0e 94 2b 5a 	call	0xb456	; 0xb456 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    ba12:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    ba16:	80 91 0b 0c 	lds	r24, 0x0C0B
    ba1a:	81 30       	cpi	r24, 0x01	; 1
    ba1c:	19 f0       	breq	.+6      	; 0xba24 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    ba1e:	12 30       	cpi	r17, 0x02	; 2
    ba20:	69 f0       	breq	.+26     	; 0xba3c <update_handle_select+0x68>
    ba22:	21 c0       	rjmp	.+66     	; 0xba66 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    ba24:	49 e8       	ldi	r20, 0x89	; 137
    ba26:	5f e0       	ldi	r21, 0x0F	; 15
    ba28:	be 01       	movw	r22, r28
    ba2a:	84 e2       	ldi	r24, 0x24	; 36
    ba2c:	9b e0       	ldi	r25, 0x0B	; 11
    ba2e:	0e 94 2b 5a 	call	0xb456	; 0xb456 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    ba32:	80 91 29 0b 	lds	r24, 0x0B29
    ba36:	82 30       	cpi	r24, 0x02	; 2
    ba38:	b1 f4       	brne	.+44     	; 0xba66 <update_handle_select+0x92>
    ba3a:	f1 cf       	rjmp	.-30     	; 0xba1e <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    ba3c:	80 91 0b 0c 	lds	r24, 0x0C0B
    ba40:	81 11       	cpse	r24, r1
    ba42:	0a c0       	rjmp	.+20     	; 0xba58 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    ba44:	89 e0       	ldi	r24, 0x09	; 9
    ba46:	80 93 94 0f 	sts	0x0F94, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    ba4a:	43 e0       	ldi	r20, 0x03	; 3
    ba4c:	65 e0       	ldi	r22, 0x05	; 5
    ba4e:	7c e0       	ldi	r23, 0x0C	; 12
    ba50:	85 e9       	ldi	r24, 0x95	; 149
    ba52:	9f e0       	ldi	r25, 0x0F	; 15
    ba54:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <LBCopyChars>
		}
		level_transition(0);
    ba58:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    ba5a:	df 91       	pop	r29
    ba5c:	cf 91       	pop	r28
    ba5e:	1f 91       	pop	r17
    ba60:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    ba62:	0c 94 0c 56 	jmp	0xac18	; 0xac18 <level_transition>
	}
}
    ba66:	df 91       	pop	r29
    ba68:	cf 91       	pop	r28
    ba6a:	1f 91       	pop	r17
    ba6c:	0f 91       	pop	r16
    ba6e:	08 95       	ret

0000ba70 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    ba70:	00 97       	sbiw	r24, 0x00	; 0
    ba72:	41 f0       	breq	.+16     	; 0xba84 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    ba74:	81 30       	cpi	r24, 0x01	; 1
    ba76:	91 05       	cpc	r25, r1
    ba78:	41 f0       	breq	.+16     	; 0xba8a <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    ba7a:	82 30       	cpi	r24, 0x02	; 2
    ba7c:	91 05       	cpc	r25, r1
    ba7e:	41 f0       	breq	.+16     	; 0xba90 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    ba80:	03 97       	sbiw	r24, 0x03	; 3
    ba82:	49 f0       	breq	.+18     	; 0xba96 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    ba84:	80 e1       	ldi	r24, 0x10	; 16
    ba86:	90 e0       	ldi	r25, 0x00	; 0
    ba88:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    ba8a:	80 e2       	ldi	r24, 0x20	; 32
    ba8c:	90 e0       	ldi	r25, 0x00	; 0
    ba8e:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    ba90:	80 e4       	ldi	r24, 0x40	; 64
    ba92:	90 e0       	ldi	r25, 0x00	; 0
    ba94:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    ba96:	80 e8       	ldi	r24, 0x80	; 128
    ba98:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    ba9a:	08 95       	ret

0000ba9c <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    ba9c:	8f 92       	push	r8
    ba9e:	9f 92       	push	r9
    baa0:	af 92       	push	r10
    baa2:	bf 92       	push	r11
    baa4:	cf 92       	push	r12
    baa6:	df 92       	push	r13
    baa8:	ef 92       	push	r14
    baaa:	ff 92       	push	r15
    baac:	0f 93       	push	r16
    baae:	1f 93       	push	r17
    bab0:	cf 93       	push	r28
    bab2:	df 93       	push	r29
    bab4:	e8 2e       	mov	r14, r24
    bab6:	d6 2e       	mov	r13, r22
    bab8:	f4 2e       	mov	r15, r20
    baba:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    babc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    babe:	88 23       	and	r24, r24
    bac0:	09 f4       	brne	.+2      	; 0xbac4 <crash_and_turn+0x28>
    bac2:	a8 c0       	rjmp	.+336    	; 0xbc14 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    bac4:	f8 01       	movw	r30, r16
    bac6:	c4 80       	ldd	r12, Z+4	; 0x04
    bac8:	c4 fe       	sbrs	r12, 4
    baca:	23 c0       	rjmp	.+70     	; 0xbb12 <crash_and_turn+0x76>
    bacc:	fe e1       	ldi	r31, 0x1E	; 30
    bace:	6f 02       	muls	r22, r31
    bad0:	40 01       	movw	r8, r0
    bad2:	11 24       	eor	r1, r1
    bad4:	ae 2c       	mov	r10, r14
    bad6:	bb 24       	eor	r11, r11
    bad8:	a7 fc       	sbrc	r10, 7
    bada:	b0 94       	com	r11
    badc:	c4 01       	movw	r24, r8
    bade:	8a 0d       	add	r24, r10
    bae0:	9b 1d       	adc	r25, r11
    bae2:	01 97       	sbiw	r24, 0x01	; 1
    bae4:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bae8:	81 11       	cpse	r24, r1
    baea:	13 c0       	rjmp	.+38     	; 0xbb12 <crash_and_turn+0x76>
    baec:	c4 01       	movw	r24, r8
    baee:	8a 0d       	add	r24, r10
    baf0:	9b 1d       	adc	r25, r11
    baf2:	4d 96       	adiw	r24, 0x1d	; 29
    baf4:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    baf8:	81 11       	cpse	r24, r1
    bafa:	0b c0       	rjmp	.+22     	; 0xbb12 <crash_and_turn+0x76>
    bafc:	c4 01       	movw	r24, r8
    bafe:	8a 0d       	add	r24, r10
    bb00:	9b 1d       	adc	r25, r11
    bb02:	cb 96       	adiw	r24, 0x3b	; 59
    bb04:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bb08:	81 11       	cpse	r24, r1
    bb0a:	03 c0       	rjmp	.+6      	; 0xbb12 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    bb0c:	80 e4       	ldi	r24, 0x40	; 64
    bb0e:	90 e0       	ldi	r25, 0x00	; 0
    bb10:	6f c0       	rjmp	.+222    	; 0xbbf0 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    bb12:	c6 fe       	sbrs	r12, 6
    bb14:	23 c0       	rjmp	.+70     	; 0xbb5c <crash_and_turn+0xc0>
    bb16:	8d 2d       	mov	r24, r13
    bb18:	99 27       	eor	r25, r25
    bb1a:	87 fd       	sbrc	r24, 7
    bb1c:	90 95       	com	r25
    bb1e:	02 96       	adiw	r24, 0x02	; 2
    bb20:	2e e1       	ldi	r18, 0x1E	; 30
    bb22:	28 9f       	mul	r18, r24
    bb24:	50 01       	movw	r10, r0
    bb26:	29 9f       	mul	r18, r25
    bb28:	b0 0c       	add	r11, r0
    bb2a:	11 24       	eor	r1, r1
    bb2c:	ae 0c       	add	r10, r14
    bb2e:	b1 1c       	adc	r11, r1
    bb30:	e7 fc       	sbrc	r14, 7
    bb32:	ba 94       	dec	r11
    bb34:	c5 01       	movw	r24, r10
    bb36:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bb3a:	81 11       	cpse	r24, r1
    bb3c:	0f c0       	rjmp	.+30     	; 0xbb5c <crash_and_turn+0xc0>
    bb3e:	c5 01       	movw	r24, r10
    bb40:	01 96       	adiw	r24, 0x01	; 1
    bb42:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bb46:	81 11       	cpse	r24, r1
    bb48:	09 c0       	rjmp	.+18     	; 0xbb5c <crash_and_turn+0xc0>
    bb4a:	c5 01       	movw	r24, r10
    bb4c:	02 96       	adiw	r24, 0x02	; 2
    bb4e:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bb52:	81 11       	cpse	r24, r1
    bb54:	03 c0       	rjmp	.+6      	; 0xbb5c <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    bb56:	80 e2       	ldi	r24, 0x20	; 32
    bb58:	90 e0       	ldi	r25, 0x00	; 0
    bb5a:	4a c0       	rjmp	.+148    	; 0xbbf0 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    bb5c:	c5 fe       	sbrs	r12, 5
    bb5e:	24 c0       	rjmp	.+72     	; 0xbba8 <crash_and_turn+0x10c>
    bb60:	fd 2d       	mov	r31, r13
    bb62:	8e e1       	ldi	r24, 0x1E	; 30
    bb64:	f8 02       	muls	r31, r24
    bb66:	40 01       	movw	r8, r0
    bb68:	11 24       	eor	r1, r1
    bb6a:	ae 2c       	mov	r10, r14
    bb6c:	bb 24       	eor	r11, r11
    bb6e:	a7 fc       	sbrc	r10, 7
    bb70:	b0 94       	com	r11
    bb72:	c4 01       	movw	r24, r8
    bb74:	8a 0d       	add	r24, r10
    bb76:	9b 1d       	adc	r25, r11
    bb78:	02 96       	adiw	r24, 0x02	; 2
    bb7a:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bb7e:	81 11       	cpse	r24, r1
    bb80:	13 c0       	rjmp	.+38     	; 0xbba8 <crash_and_turn+0x10c>
    bb82:	c4 01       	movw	r24, r8
    bb84:	8a 0d       	add	r24, r10
    bb86:	9b 1d       	adc	r25, r11
    bb88:	80 96       	adiw	r24, 0x20	; 32
    bb8a:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bb8e:	81 11       	cpse	r24, r1
    bb90:	0b c0       	rjmp	.+22     	; 0xbba8 <crash_and_turn+0x10c>
    bb92:	c4 01       	movw	r24, r8
    bb94:	8a 0d       	add	r24, r10
    bb96:	9b 1d       	adc	r25, r11
    bb98:	ce 96       	adiw	r24, 0x3e	; 62
    bb9a:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bb9e:	81 11       	cpse	r24, r1
    bba0:	03 c0       	rjmp	.+6      	; 0xbba8 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    bba2:	80 e8       	ldi	r24, 0x80	; 128
    bba4:	90 e0       	ldi	r25, 0x00	; 0
    bba6:	24 c0       	rjmp	.+72     	; 0xbbf0 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    bba8:	c7 fe       	sbrs	r12, 7
    bbaa:	29 c0       	rjmp	.+82     	; 0xbbfe <crash_and_turn+0x162>
    bbac:	8d 2d       	mov	r24, r13
    bbae:	99 27       	eor	r25, r25
    bbb0:	87 fd       	sbrc	r24, 7
    bbb2:	90 95       	com	r25
    bbb4:	01 97       	sbiw	r24, 0x01	; 1
    bbb6:	2e e1       	ldi	r18, 0x1E	; 30
    bbb8:	28 9f       	mul	r18, r24
    bbba:	50 01       	movw	r10, r0
    bbbc:	29 9f       	mul	r18, r25
    bbbe:	b0 0c       	add	r11, r0
    bbc0:	11 24       	eor	r1, r1
    bbc2:	ae 0c       	add	r10, r14
    bbc4:	b1 1c       	adc	r11, r1
    bbc6:	e7 fc       	sbrc	r14, 7
    bbc8:	ba 94       	dec	r11
    bbca:	c5 01       	movw	r24, r10
    bbcc:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bbd0:	81 11       	cpse	r24, r1
    bbd2:	15 c0       	rjmp	.+42     	; 0xbbfe <crash_and_turn+0x162>
    bbd4:	c5 01       	movw	r24, r10
    bbd6:	01 96       	adiw	r24, 0x01	; 1
    bbd8:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bbdc:	81 11       	cpse	r24, r1
    bbde:	0f c0       	rjmp	.+30     	; 0xbbfe <crash_and_turn+0x162>
    bbe0:	c5 01       	movw	r24, r10
    bbe2:	02 96       	adiw	r24, 0x02	; 2
    bbe4:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <solid_tile>
    bbe8:	81 11       	cpse	r24, r1
    bbea:	09 c0       	rjmp	.+18     	; 0xbbfe <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    bbec:	80 e1       	ldi	r24, 0x10	; 16
    bbee:	90 e0       	ldi	r25, 0x00	; 0
    bbf0:	f8 01       	movw	r30, r16
    bbf2:	95 83       	std	Z+5, r25	; 0x05
    bbf4:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    bbf6:	ce 01       	movw	r24, r28
    bbf8:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <recoil_sprite>
			recoiled = 0;
    bbfc:	f1 2c       	mov	r15, r1
		}
		if (player->goal_direction & p->held)
    bbfe:	f8 01       	movw	r30, r16
    bc00:	24 81       	ldd	r18, Z+4	; 0x04
    bc02:	35 81       	ldd	r19, Z+5	; 0x05
    bc04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    bc06:	9d 8d       	ldd	r25, Y+29	; 0x1d
    bc08:	82 23       	and	r24, r18
    bc0a:	93 23       	and	r25, r19
    bc0c:	89 2b       	or	r24, r25
    bc0e:	11 f0       	breq	.+4      	; 0xbc14 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    bc10:	1b 8e       	std	Y+27, r1	; 0x1b
			recoiled = 0;
    bc12:	f1 2c       	mov	r15, r1
		}
	}
	if ((p->held & BTN_LEFT) && recoiled)
    bc14:	f8 01       	movw	r30, r16
    bc16:	84 81       	ldd	r24, Z+4	; 0x04
    bc18:	86 ff       	sbrs	r24, 6
    bc1a:	05 c0       	rjmp	.+10     	; 0xbc26 <crash_and_turn+0x18a>
    bc1c:	ff 20       	and	r15, r15
    bc1e:	19 f0       	breq	.+6      	; 0xbc26 <crash_and_turn+0x18a>
	{
		p->held = BTN_UP;
    bc20:	80 e1       	ldi	r24, 0x10	; 16
    bc22:	90 e0       	ldi	r25, 0x00	; 0
    bc24:	15 c0       	rjmp	.+42     	; 0xbc50 <crash_and_turn+0x1b4>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_UP) && recoiled)
    bc26:	84 ff       	sbrs	r24, 4
    bc28:	05 c0       	rjmp	.+10     	; 0xbc34 <crash_and_turn+0x198>
    bc2a:	ff 20       	and	r15, r15
    bc2c:	19 f0       	breq	.+6      	; 0xbc34 <crash_and_turn+0x198>
	{
		p->held = BTN_RIGHT;
    bc2e:	80 e8       	ldi	r24, 0x80	; 128
    bc30:	90 e0       	ldi	r25, 0x00	; 0
    bc32:	0d c0       	rjmp	.+26     	; 0xbc4e <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_RIGHT) && recoiled)
    bc34:	87 ff       	sbrs	r24, 7
    bc36:	05 c0       	rjmp	.+10     	; 0xbc42 <crash_and_turn+0x1a6>
    bc38:	ff 20       	and	r15, r15
    bc3a:	19 f0       	breq	.+6      	; 0xbc42 <crash_and_turn+0x1a6>
	{
		p->held = BTN_DOWN;
    bc3c:	80 e2       	ldi	r24, 0x20	; 32
    bc3e:	90 e0       	ldi	r25, 0x00	; 0
    bc40:	06 c0       	rjmp	.+12     	; 0xbc4e <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_DOWN) && recoiled)
    bc42:	85 ff       	sbrs	r24, 5
    bc44:	09 c0       	rjmp	.+18     	; 0xbc58 <crash_and_turn+0x1bc>
    bc46:	ff 20       	and	r15, r15
    bc48:	39 f0       	breq	.+14     	; 0xbc58 <crash_and_turn+0x1bc>
	{
		p->held = BTN_LEFT;
    bc4a:	80 e4       	ldi	r24, 0x40	; 64
    bc4c:	90 e0       	ldi	r25, 0x00	; 0
    bc4e:	f8 01       	movw	r30, r16
    bc50:	95 83       	std	Z+5, r25	; 0x05
    bc52:	84 83       	std	Z+4, r24	; 0x04
		player->feeling_my_way = 1;
    bc54:	81 e0       	ldi	r24, 0x01	; 1
    bc56:	8b 8f       	std	Y+27, r24	; 0x1b
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    bc58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    bc5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    bc5c:	80 31       	cpi	r24, 0x10	; 16
    bc5e:	91 05       	cpc	r25, r1
    bc60:	19 f0       	breq	.+6      	; 0xbc68 <crash_and_turn+0x1cc>
    bc62:	80 32       	cpi	r24, 0x20	; 32
    bc64:	91 05       	cpc	r25, r1
    bc66:	19 f4       	brne	.+6      	; 0xbc6e <crash_and_turn+0x1d2>
    bc68:	2a a1       	ldd	r18, Y+34	; 0x22
    bc6a:	d2 16       	cp	r13, r18
    bc6c:	59 f0       	breq	.+22     	; 0xbc84 <crash_and_turn+0x1e8>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    bc6e:	80 34       	cpi	r24, 0x40	; 64
    bc70:	91 05       	cpc	r25, r1
    bc72:	19 f0       	breq	.+6      	; 0xbc7a <crash_and_turn+0x1de>
    bc74:	80 38       	cpi	r24, 0x80	; 128
    bc76:	91 05       	cpc	r25, r1
    bc78:	39 f4       	brne	.+14     	; 0xbc88 <crash_and_turn+0x1ec>
    bc7a:	81 e0       	ldi	r24, 0x01	; 1
    bc7c:	9a a1       	ldd	r25, Y+34	; 0x22
    bc7e:	e9 12       	cpse	r14, r25
    bc80:	03 c0       	rjmp	.+6      	; 0xbc88 <crash_and_turn+0x1ec>
    bc82:	03 c0       	rjmp	.+6      	; 0xbc8a <crash_and_turn+0x1ee>
	{
		p->held = BTN_LEFT;
		player->feeling_my_way = 1;
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    bc84:	81 e0       	ldi	r24, 0x01	; 1
    bc86:	01 c0       	rjmp	.+2      	; 0xbc8a <crash_and_turn+0x1ee>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    bc88:	80 e0       	ldi	r24, 0x00	; 0
}
    bc8a:	df 91       	pop	r29
    bc8c:	cf 91       	pop	r28
    bc8e:	1f 91       	pop	r17
    bc90:	0f 91       	pop	r16
    bc92:	ff 90       	pop	r15
    bc94:	ef 90       	pop	r14
    bc96:	df 90       	pop	r13
    bc98:	cf 90       	pop	r12
    bc9a:	bf 90       	pop	r11
    bc9c:	af 90       	pop	r10
    bc9e:	9f 90       	pop	r9
    bca0:	8f 90       	pop	r8
    bca2:	08 95       	ret

0000bca4 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    bca4:	48 2f       	mov	r20, r24
    bca6:	55 27       	eor	r21, r21
    bca8:	47 fd       	sbrc	r20, 7
    bcaa:	50 95       	com	r21
    bcac:	57 ff       	sbrs	r21, 7
    bcae:	03 c0       	rjmp	.+6      	; 0xbcb6 <get_cpu_goal_direction+0x12>
    bcb0:	51 95       	neg	r21
    bcb2:	41 95       	neg	r20
    bcb4:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    bcb6:	26 2f       	mov	r18, r22
    bcb8:	33 27       	eor	r19, r19
    bcba:	27 fd       	sbrc	r18, 7
    bcbc:	30 95       	com	r19
    bcbe:	37 ff       	sbrs	r19, 7
    bcc0:	03 c0       	rjmp	.+6      	; 0xbcc8 <get_cpu_goal_direction+0x24>
    bcc2:	31 95       	neg	r19
    bcc4:	21 95       	neg	r18
    bcc6:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    bcc8:	24 17       	cp	r18, r20
    bcca:	2c f4       	brge	.+10     	; 0xbcd6 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    bccc:	18 16       	cp	r1, r24
    bcce:	44 f4       	brge	.+16     	; 0xbce0 <get_cpu_goal_direction+0x3c>
    bcd0:	80 e8       	ldi	r24, 0x80	; 128
    bcd2:	90 e0       	ldi	r25, 0x00	; 0
    bcd4:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    bcd6:	16 16       	cp	r1, r22
    bcd8:	34 f4       	brge	.+12     	; 0xbce6 <get_cpu_goal_direction+0x42>
    bcda:	80 e2       	ldi	r24, 0x20	; 32
    bcdc:	90 e0       	ldi	r25, 0x00	; 0
    bcde:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    bce0:	80 e4       	ldi	r24, 0x40	; 64
    bce2:	90 e0       	ldi	r25, 0x00	; 0
    bce4:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    bce6:	80 e1       	ldi	r24, 0x10	; 16
    bce8:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    bcea:	08 95       	ret

0000bcec <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    bcec:	2f 92       	push	r2
    bcee:	3f 92       	push	r3
    bcf0:	4f 92       	push	r4
    bcf2:	5f 92       	push	r5
    bcf4:	6f 92       	push	r6
    bcf6:	7f 92       	push	r7
    bcf8:	8f 92       	push	r8
    bcfa:	9f 92       	push	r9
    bcfc:	af 92       	push	r10
    bcfe:	bf 92       	push	r11
    bd00:	cf 92       	push	r12
    bd02:	df 92       	push	r13
    bd04:	ef 92       	push	r14
    bd06:	ff 92       	push	r15
    bd08:	0f 93       	push	r16
    bd0a:	1f 93       	push	r17
    bd0c:	cf 93       	push	r28
    bd0e:	df 93       	push	r29
    bd10:	00 d0       	rcall	.+0      	; 0xbd12 <get_cpu_joypad_state+0x26>
    bd12:	00 d0       	rcall	.+0      	; 0xbd14 <get_cpu_joypad_state+0x28>
    bd14:	00 d0       	rcall	.+0      	; 0xbd16 <get_cpu_joypad_state+0x2a>
    bd16:	cd b7       	in	r28, 0x3d	; 61
    bd18:	de b7       	in	r29, 0x3e	; 62
    bd1a:	1c 01       	movw	r2, r24
    bd1c:	8a 01       	movw	r16, r20
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    bd1e:	db 01       	movw	r26, r22
    bd20:	13 96       	adiw	r26, 0x03	; 3
    bd22:	8d 91       	ld	r24, X+
    bd24:	9d 91       	ld	r25, X+
    bd26:	0d 90       	ld	r0, X+
    bd28:	bc 91       	ld	r27, X
    bd2a:	a0 2d       	mov	r26, r0
    bd2c:	89 83       	std	Y+1, r24	; 0x01
    bd2e:	9a 83       	std	Y+2, r25	; 0x02
    bd30:	ab 83       	std	Y+3, r26	; 0x03
    bd32:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    bd34:	fb 01       	movw	r30, r22
    bd36:	47 80       	ldd	r4, Z+7	; 0x07
    bd38:	50 84       	ldd	r5, Z+8	; 0x08
    bd3a:	61 84       	ldd	r6, Z+9	; 0x09
    bd3c:	72 84       	ldd	r7, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    bd3e:	d1 01       	movw	r26, r2
    bd40:	13 96       	adiw	r26, 0x03	; 3
    bd42:	8d 90       	ld	r8, X+
    bd44:	9d 90       	ld	r9, X+
    bd46:	ad 90       	ld	r10, X+
    bd48:	bc 90       	ld	r11, X
    bd4a:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    bd4c:	17 96       	adiw	r26, 0x07	; 7
    bd4e:	cd 90       	ld	r12, X+
    bd50:	dd 90       	ld	r13, X+
    bd52:	ed 90       	ld	r14, X+
    bd54:	fc 90       	ld	r15, X
    bd56:	1a 97       	sbiw	r26, 0x0a	; 10
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    bd58:	57 96       	adiw	r26, 0x17	; 23
    bd5a:	8c 91       	ld	r24, X
    bd5c:	81 11       	cpse	r24, r1
    bd5e:	04 c0       	rjmp	.+8      	; 0xbd68 <get_cpu_joypad_state+0x7c>
	{
		p->held = 0;
    bd60:	fa 01       	movw	r30, r20
    bd62:	15 82       	std	Z+5, r1	; 0x05
    bd64:	14 82       	std	Z+4, r1	; 0x04
		return;
    bd66:	4e c1       	rjmp	.+668    	; 0xc004 <get_cpu_joypad_state+0x318>
	}
	
	// Shot
	if (p->pressed & BTN_A)
    bd68:	da 01       	movw	r26, r20
    bd6a:	8d 91       	ld	r24, X+
    bd6c:	9c 91       	ld	r25, X
    bd6e:	11 97       	sbiw	r26, 0x01	; 1
    bd70:	90 ff       	sbrs	r25, 0
    bd72:	02 c0       	rjmp	.+4      	; 0xbd78 <get_cpu_joypad_state+0x8c>
	{
		p->pressed = 0;
    bd74:	1d 92       	st	X+, r1
    bd76:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    bd78:	20 91 04 01 	lds	r18, 0x0104
    bd7c:	30 91 05 01 	lds	r19, 0x0105
    bd80:	c9 01       	movw	r24, r18
    bd82:	6a e0       	ldi	r22, 0x0A	; 10
    bd84:	70 e0       	ldi	r23, 0x00	; 0
    bd86:	0e 94 bd 60 	call	0xc17a	; 0xc17a <__udivmodhi4>
    bd8a:	89 2b       	or	r24, r25
    bd8c:	49 f4       	brne	.+18     	; 0xbda0 <get_cpu_joypad_state+0xb4>
    bd8e:	f1 01       	movw	r30, r2
    bd90:	87 89       	ldd	r24, Z+23	; 0x17
    bd92:	83 33       	cpi	r24, 0x33	; 51
    bd94:	28 f0       	brcs	.+10     	; 0xbda0 <get_cpu_joypad_state+0xb4>
	{
		p->pressed = BTN_A;
    bd96:	80 e0       	ldi	r24, 0x00	; 0
    bd98:	91 e0       	ldi	r25, 0x01	; 1
    bd9a:	d8 01       	movw	r26, r16
    bd9c:	8d 93       	st	X+, r24
    bd9e:	9c 93       	st	X, r25
    bda0:	3e 82       	std	Y+6, r3	; 0x06
    bda2:	2d 82       	std	Y+5, r2	; 0x05
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    bda4:	c9 01       	movw	r24, r18
    bda6:	64 eb       	ldi	r22, 0xB4	; 180
    bda8:	70 e0       	ldi	r23, 0x00	; 0
    bdaa:	0e 94 bd 60 	call	0xc17a	; 0xc17a <__udivmodhi4>
    bdae:	89 2b       	or	r24, r25
    bdb0:	41 f0       	breq	.+16     	; 0xbdc2 <get_cpu_joypad_state+0xd6>
    bdb2:	f1 01       	movw	r30, r2
    bdb4:	87 89       	ldd	r24, Z+23	; 0x17
    bdb6:	8a 30       	cpi	r24, 0x0A	; 10
    bdb8:	21 f0       	breq	.+8      	; 0xbdc2 <get_cpu_joypad_state+0xd6>
    bdba:	83 a1       	ldd	r24, Z+35	; 0x23
    bdbc:	88 23       	and	r24, r24
    bdbe:	09 f4       	brne	.+2      	; 0xbdc2 <get_cpu_joypad_state+0xd6>
    bdc0:	7e c0       	rjmp	.+252    	; 0xbebe <get_cpu_joypad_state+0x1d2>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    bdc2:	20 e0       	ldi	r18, 0x00	; 0
    bdc4:	30 e0       	ldi	r19, 0x00	; 0
    bdc6:	40 e0       	ldi	r20, 0x00	; 0
    bdc8:	5e e3       	ldi	r21, 0x3E	; 62
    bdca:	69 81       	ldd	r22, Y+1	; 0x01
    bdcc:	7a 81       	ldd	r23, Y+2	; 0x02
    bdce:	8b 81       	ldd	r24, Y+3	; 0x03
    bdd0:	9c 81       	ldd	r25, Y+4	; 0x04
    bdd2:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    bdd6:	0e 94 b6 61 	call	0xc36c	; 0xc36c <__fixsfsi>
    bdda:	36 2e       	mov	r3, r22
	goal_y = other_player->shared.y / 8 - 3;
    bddc:	20 e0       	ldi	r18, 0x00	; 0
    bdde:	30 e0       	ldi	r19, 0x00	; 0
    bde0:	40 e0       	ldi	r20, 0x00	; 0
    bde2:	5e e3       	ldi	r21, 0x3E	; 62
    bde4:	c3 01       	movw	r24, r6
    bde6:	b2 01       	movw	r22, r4
    bde8:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    bdec:	20 e0       	ldi	r18, 0x00	; 0
    bdee:	30 e0       	ldi	r19, 0x00	; 0
    bdf0:	40 e4       	ldi	r20, 0x40	; 64
    bdf2:	50 e4       	ldi	r21, 0x40	; 64
    bdf4:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    bdf8:	0e 94 b6 61 	call	0xc36c	; 0xc36c <__fixsfsi>
    bdfc:	76 2e       	mov	r7, r22
	player_x = player->shared.x / 8;
    bdfe:	20 e0       	ldi	r18, 0x00	; 0
    be00:	30 e0       	ldi	r19, 0x00	; 0
    be02:	40 e0       	ldi	r20, 0x00	; 0
    be04:	5e e3       	ldi	r21, 0x3E	; 62
    be06:	c5 01       	movw	r24, r10
    be08:	b4 01       	movw	r22, r8
    be0a:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    be0e:	0e 94 b6 61 	call	0xc36c	; 0xc36c <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    be12:	b3 2c       	mov	r11, r3
    be14:	b6 1a       	sub	r11, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    be16:	20 e0       	ldi	r18, 0x00	; 0
    be18:	30 e0       	ldi	r19, 0x00	; 0
    be1a:	40 e0       	ldi	r20, 0x00	; 0
    be1c:	5e e3       	ldi	r21, 0x3E	; 62
    be1e:	c7 01       	movw	r24, r14
    be20:	b6 01       	movw	r22, r12
    be22:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    be26:	20 e0       	ldi	r18, 0x00	; 0
    be28:	30 e0       	ldi	r19, 0x00	; 0
    be2a:	40 e4       	ldi	r20, 0x40	; 64
    be2c:	50 e4       	ldi	r21, 0x40	; 64
    be2e:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    be32:	0e 94 b6 61 	call	0xc36c	; 0xc36c <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    be36:	f7 2d       	mov	r31, r7
    be38:	f6 1b       	sub	r31, r22
    be3a:	6f 2f       	mov	r22, r31
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    be3c:	ad 81       	ldd	r26, Y+5	; 0x05
    be3e:	be 81       	ldd	r27, Y+6	; 0x06
    be40:	93 96       	adiw	r26, 0x23	; 35
    be42:	1c 92       	st	X, r1
    be44:	93 97       	sbiw	r26, 0x23	; 35
		player->feeling_my_way = 0;
    be46:	5b 96       	adiw	r26, 0x1b	; 27
    be48:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    be4a:	82 e0       	ldi	r24, 0x02	; 2
    be4c:	8b 0d       	add	r24, r11
    be4e:	85 30       	cpi	r24, 0x05	; 5
    be50:	d8 f4       	brcc	.+54     	; 0xbe88 <get_cpu_joypad_state+0x19c>
    be52:	fe 3f       	cpi	r31, 0xFE	; 254
    be54:	cc f0       	brlt	.+50     	; 0xbe88 <get_cpu_joypad_state+0x19c>
    be56:	f3 30       	cpi	r31, 0x03	; 3
    be58:	bc f4       	brge	.+46     	; 0xbe88 <get_cpu_joypad_state+0x19c>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    be5a:	64 e0       	ldi	r22, 0x04	; 4
    be5c:	70 e0       	ldi	r23, 0x00	; 0
    be5e:	80 e0       	ldi	r24, 0x00	; 0
    be60:	90 e0       	ldi	r25, 0x00	; 0
    be62:	0e 94 19 49 	call	0x9232	; 0x9232 <LBRandom>
    be66:	0e 94 38 5d 	call	0xba70	; 0xba70 <button_map>
    be6a:	ed 81       	ldd	r30, Y+5	; 0x05
    be6c:	fe 81       	ldd	r31, Y+6	; 0x06
    be6e:	95 8f       	std	Z+29, r25	; 0x1d
    be70:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = LBRandom(5, 18);
    be72:	62 e1       	ldi	r22, 0x12	; 18
    be74:	70 e0       	ldi	r23, 0x00	; 0
    be76:	85 e0       	ldi	r24, 0x05	; 5
    be78:	90 e0       	ldi	r25, 0x00	; 0
    be7a:	0e 94 19 49 	call	0x9232	; 0x9232 <LBRandom>
    be7e:	ad 81       	ldd	r26, Y+5	; 0x05
    be80:	be 81       	ldd	r27, Y+6	; 0x06
    be82:	92 96       	adiw	r26, 0x22	; 34
    be84:	8c 93       	st	X, r24
    be86:	12 c0       	rjmp	.+36     	; 0xbeac <get_cpu_joypad_state+0x1c0>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    be88:	8b 2d       	mov	r24, r11
    be8a:	0e 94 52 5e 	call	0xbca4	; 0xbca4 <get_cpu_goal_direction>
    be8e:	ed 81       	ldd	r30, Y+5	; 0x05
    be90:	fe 81       	ldd	r31, Y+6	; 0x06
    be92:	95 8f       	std	Z+29, r25	; 0x1d
    be94:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    be96:	80 31       	cpi	r24, 0x10	; 16
    be98:	91 05       	cpc	r25, r1
    be9a:	21 f0       	breq	.+8      	; 0xbea4 <get_cpu_joypad_state+0x1b8>
    be9c:	80 97       	sbiw	r24, 0x20	; 32
    be9e:	11 f0       	breq	.+4      	; 0xbea4 <get_cpu_joypad_state+0x1b8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    bea0:	32 a2       	std	Z+34, r3	; 0x22
    bea2:	04 c0       	rjmp	.+8      	; 0xbeac <get_cpu_joypad_state+0x1c0>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    bea4:	ad 81       	ldd	r26, Y+5	; 0x05
    bea6:	be 81       	ldd	r27, Y+6	; 0x06
    bea8:	92 96       	adiw	r26, 0x22	; 34
    beaa:	7c 92       	st	X, r7
		}
		p->held = player->goal_direction;
    beac:	ed 81       	ldd	r30, Y+5	; 0x05
    beae:	fe 81       	ldd	r31, Y+6	; 0x06
    beb0:	84 8d       	ldd	r24, Z+28	; 0x1c
    beb2:	95 8d       	ldd	r25, Z+29	; 0x1d
    beb4:	d8 01       	movw	r26, r16
    beb6:	15 96       	adiw	r26, 0x05	; 5
    beb8:	9c 93       	st	X, r25
    beba:	8e 93       	st	-X, r24
    bebc:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    bebe:	ed 81       	ldd	r30, Y+5	; 0x05
    bec0:	fe 81       	ldd	r31, Y+6	; 0x06
    bec2:	c3 80       	ldd	r12, Z+3	; 0x03
    bec4:	d4 80       	ldd	r13, Z+4	; 0x04
    bec6:	e5 80       	ldd	r14, Z+5	; 0x05
    bec8:	f6 80       	ldd	r15, Z+6	; 0x06
    beca:	24 a1       	ldd	r18, Z+36	; 0x24
    becc:	35 a1       	ldd	r19, Z+37	; 0x25
    bece:	46 a1       	ldd	r20, Z+38	; 0x26
    bed0:	57 a1       	ldd	r21, Z+39	; 0x27
    bed2:	c7 01       	movw	r24, r14
    bed4:	b6 01       	movw	r22, r12
    bed6:	0e 94 4a 61 	call	0xc294	; 0xc294 <__cmpsf2>
    beda:	88 23       	and	r24, r24
    bedc:	39 f0       	breq	.+14     	; 0xbeec <get_cpu_joypad_state+0x200>
		player->deadlock_count_x = 0;
    bede:	ad 81       	ldd	r26, Y+5	; 0x05
    bee0:	be 81       	ldd	r27, Y+6	; 0x06
    bee2:	5f 96       	adiw	r26, 0x1f	; 31
    bee4:	1c 92       	st	X, r1
    bee6:	1e 92       	st	-X, r1
    bee8:	5e 97       	sbiw	r26, 0x1e	; 30
    beea:	07 c0       	rjmp	.+14     	; 0xbefa <get_cpu_joypad_state+0x20e>
	else 
		player->deadlock_count_x++;
    beec:	ed 81       	ldd	r30, Y+5	; 0x05
    beee:	fe 81       	ldd	r31, Y+6	; 0x06
    bef0:	86 8d       	ldd	r24, Z+30	; 0x1e
    bef2:	97 8d       	ldd	r25, Z+31	; 0x1f
    bef4:	01 96       	adiw	r24, 0x01	; 1
    bef6:	97 8f       	std	Z+31, r25	; 0x1f
    bef8:	86 8f       	std	Z+30, r24	; 0x1e
	if (player->shared.y != player->old_y)
    befa:	ad 81       	ldd	r26, Y+5	; 0x05
    befc:	be 81       	ldd	r27, Y+6	; 0x06
    befe:	17 96       	adiw	r26, 0x07	; 7
    bf00:	8d 90       	ld	r8, X+
    bf02:	9d 90       	ld	r9, X+
    bf04:	ad 90       	ld	r10, X+
    bf06:	bc 90       	ld	r11, X
    bf08:	1a 97       	sbiw	r26, 0x0a	; 10
    bf0a:	98 96       	adiw	r26, 0x28	; 40
    bf0c:	2d 91       	ld	r18, X+
    bf0e:	3d 91       	ld	r19, X+
    bf10:	4d 91       	ld	r20, X+
    bf12:	5c 91       	ld	r21, X
    bf14:	9b 97       	sbiw	r26, 0x2b	; 43
    bf16:	c5 01       	movw	r24, r10
    bf18:	b4 01       	movw	r22, r8
    bf1a:	0e 94 4a 61 	call	0xc294	; 0xc294 <__cmpsf2>
    bf1e:	88 23       	and	r24, r24
    bf20:	29 f0       	breq	.+10     	; 0xbf2c <get_cpu_joypad_state+0x240>
		player->deadlock_count_y = 0;
    bf22:	ed 81       	ldd	r30, Y+5	; 0x05
    bf24:	fe 81       	ldd	r31, Y+6	; 0x06
    bf26:	11 a2       	std	Z+33, r1	; 0x21
    bf28:	10 a2       	std	Z+32, r1	; 0x20
    bf2a:	0b c0       	rjmp	.+22     	; 0xbf42 <get_cpu_joypad_state+0x256>
	else
		player->deadlock_count_y++;
    bf2c:	ad 81       	ldd	r26, Y+5	; 0x05
    bf2e:	be 81       	ldd	r27, Y+6	; 0x06
    bf30:	90 96       	adiw	r26, 0x20	; 32
    bf32:	8d 91       	ld	r24, X+
    bf34:	9c 91       	ld	r25, X
    bf36:	91 97       	sbiw	r26, 0x21	; 33
    bf38:	01 96       	adiw	r24, 0x01	; 1
    bf3a:	91 96       	adiw	r26, 0x21	; 33
    bf3c:	9c 93       	st	X, r25
    bf3e:	8e 93       	st	-X, r24
    bf40:	90 97       	sbiw	r26, 0x20	; 32
	player->old_x = player->shared.x;
    bf42:	ed 81       	ldd	r30, Y+5	; 0x05
    bf44:	fe 81       	ldd	r31, Y+6	; 0x06
    bf46:	c4 a2       	std	Z+36, r12	; 0x24
    bf48:	d5 a2       	std	Z+37, r13	; 0x25
    bf4a:	e6 a2       	std	Z+38, r14	; 0x26
    bf4c:	f7 a2       	std	Z+39, r15	; 0x27
	player->old_y = player->shared.y;
    bf4e:	80 a6       	std	Z+40, r8	; 0x28
    bf50:	91 a6       	std	Z+41, r9	; 0x29
    bf52:	a2 a6       	std	Z+42, r10	; 0x2a
    bf54:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    bf56:	86 8d       	ldd	r24, Z+30	; 0x1e
    bf58:	97 8d       	ldd	r25, Z+31	; 0x1f
    bf5a:	80 34       	cpi	r24, 0x40	; 64
    bf5c:	91 40       	sbci	r25, 0x01	; 1
    bf5e:	90 f0       	brcs	.+36     	; 0xbf84 <get_cpu_joypad_state+0x298>
	{
		p->held = button_map(LBRandom(2, 4));
    bf60:	64 e0       	ldi	r22, 0x04	; 4
    bf62:	70 e0       	ldi	r23, 0x00	; 0
    bf64:	82 e0       	ldi	r24, 0x02	; 2
    bf66:	90 e0       	ldi	r25, 0x00	; 0
    bf68:	0e 94 19 49 	call	0x9232	; 0x9232 <LBRandom>
    bf6c:	0e 94 38 5d 	call	0xba70	; 0xba70 <button_map>
    bf70:	f8 01       	movw	r30, r16
    bf72:	95 83       	std	Z+5, r25	; 0x05
    bf74:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_x = 0;
    bf76:	ad 81       	ldd	r26, Y+5	; 0x05
    bf78:	be 81       	ldd	r27, Y+6	; 0x06
    bf7a:	5f 96       	adiw	r26, 0x1f	; 31
    bf7c:	1c 92       	st	X, r1
    bf7e:	1e 92       	st	-X, r1
    bf80:	5e 97       	sbiw	r26, 0x1e	; 30
    bf82:	40 c0       	rjmp	.+128    	; 0xc004 <get_cpu_joypad_state+0x318>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    bf84:	ed 81       	ldd	r30, Y+5	; 0x05
    bf86:	fe 81       	ldd	r31, Y+6	; 0x06
    bf88:	80 a1       	ldd	r24, Z+32	; 0x20
    bf8a:	91 a1       	ldd	r25, Z+33	; 0x21
    bf8c:	80 34       	cpi	r24, 0x40	; 64
    bf8e:	91 40       	sbci	r25, 0x01	; 1
    bf90:	90 f0       	brcs	.+36     	; 0xbfb6 <get_cpu_joypad_state+0x2ca>
	{
		p->held = button_map(LBRandom(0, 2));
    bf92:	62 e0       	ldi	r22, 0x02	; 2
    bf94:	70 e0       	ldi	r23, 0x00	; 0
    bf96:	80 e0       	ldi	r24, 0x00	; 0
    bf98:	90 e0       	ldi	r25, 0x00	; 0
    bf9a:	0e 94 19 49 	call	0x9232	; 0x9232 <LBRandom>
    bf9e:	0e 94 38 5d 	call	0xba70	; 0xba70 <button_map>
    bfa2:	d8 01       	movw	r26, r16
    bfa4:	15 96       	adiw	r26, 0x05	; 5
    bfa6:	9c 93       	st	X, r25
    bfa8:	8e 93       	st	-X, r24
    bfaa:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_y = 0;
    bfac:	ed 81       	ldd	r30, Y+5	; 0x05
    bfae:	fe 81       	ldd	r31, Y+6	; 0x06
    bfb0:	11 a2       	std	Z+33, r1	; 0x21
    bfb2:	10 a2       	std	Z+32, r1	; 0x20
    bfb4:	27 c0       	rjmp	.+78     	; 0xc004 <get_cpu_joypad_state+0x318>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    bfb6:	20 e0       	ldi	r18, 0x00	; 0
    bfb8:	30 e0       	ldi	r19, 0x00	; 0
    bfba:	40 e0       	ldi	r20, 0x00	; 0
    bfbc:	5e e3       	ldi	r21, 0x3E	; 62
    bfbe:	c5 01       	movw	r24, r10
    bfc0:	b4 01       	movw	r22, r8
    bfc2:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    bfc6:	20 e0       	ldi	r18, 0x00	; 0
    bfc8:	30 e0       	ldi	r19, 0x00	; 0
    bfca:	40 e4       	ldi	r20, 0x40	; 64
    bfcc:	50 e4       	ldi	r21, 0x40	; 64
    bfce:	0e 94 e5 60 	call	0xc1ca	; 0xc1ca <__subsf3>
    bfd2:	0e 94 b6 61 	call	0xc36c	; 0xc36c <__fixsfsi>
    bfd6:	b6 2e       	mov	r11, r22
    bfd8:	20 e0       	ldi	r18, 0x00	; 0
    bfda:	30 e0       	ldi	r19, 0x00	; 0
    bfdc:	40 e0       	ldi	r20, 0x00	; 0
    bfde:	5e e3       	ldi	r21, 0x3E	; 62
    bfe0:	c7 01       	movw	r24, r14
    bfe2:	b6 01       	movw	r22, r12
    bfe4:	0e 94 9d 62 	call	0xc53a	; 0xc53a <__mulsf3>
    bfe8:	0e 94 b6 61 	call	0xc36c	; 0xc36c <__fixsfsi>
    bfec:	86 2f       	mov	r24, r22
    bfee:	2d 81       	ldd	r18, Y+5	; 0x05
    bff0:	3e 81       	ldd	r19, Y+6	; 0x06
    bff2:	d9 01       	movw	r26, r18
    bff4:	12 96       	adiw	r26, 0x02	; 2
    bff6:	4c 91       	ld	r20, X
    bff8:	6b 2d       	mov	r22, r11
    bffa:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <crash_and_turn>
    bffe:	ed 81       	ldd	r30, Y+5	; 0x05
    c000:	fe 81       	ldd	r31, Y+6	; 0x06
    c002:	83 a3       	std	Z+35, r24	; 0x23
}
    c004:	26 96       	adiw	r28, 0x06	; 6
    c006:	0f b6       	in	r0, 0x3f	; 63
    c008:	f8 94       	cli
    c00a:	de bf       	out	0x3e, r29	; 62
    c00c:	0f be       	out	0x3f, r0	; 63
    c00e:	cd bf       	out	0x3d, r28	; 61
    c010:	df 91       	pop	r29
    c012:	cf 91       	pop	r28
    c014:	1f 91       	pop	r17
    c016:	0f 91       	pop	r16
    c018:	ff 90       	pop	r15
    c01a:	ef 90       	pop	r14
    c01c:	df 90       	pop	r13
    c01e:	cf 90       	pop	r12
    c020:	bf 90       	pop	r11
    c022:	af 90       	pop	r10
    c024:	9f 90       	pop	r9
    c026:	8f 90       	pop	r8
    c028:	7f 90       	pop	r7
    c02a:	6f 90       	pop	r6
    c02c:	5f 90       	pop	r5
    c02e:	4f 90       	pop	r4
    c030:	3f 90       	pop	r3
    c032:	2f 90       	pop	r2
    c034:	08 95       	ret

0000c036 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    c036:	8f e3       	ldi	r24, 0x3F	; 63
    c038:	93 e0       	ldi	r25, 0x03	; 3
    c03a:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <InitMusicPlayer>
	SetMasterVolume(0xff);
    c03e:	8f ef       	ldi	r24, 0xFF	; 255
    c040:	0e 94 4d 3e 	call	0x7c9a	; 0x7c9a <SetMasterVolume>
	SetTileTable(tiles_data);
    c044:	84 e3       	ldi	r24, 0x34	; 52
    c046:	94 e4       	ldi	r25, 0x44	; 68
    c048:	0e 94 b9 38 	call	0x7172	; 0x7172 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    c04c:	8e ec       	ldi	r24, 0xCE	; 206
    c04e:	96 e3       	ldi	r25, 0x36	; 54
    c050:	0e 94 95 38 	call	0x712a	; 0x712a <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    c054:	81 e3       	ldi	r24, 0x31	; 49
    c056:	0e 94 b6 38 	call	0x716c	; 0x716c <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    c05a:	60 e0       	ldi	r22, 0x00	; 0
    c05c:	83 e0       	ldi	r24, 0x03	; 3
    c05e:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <FadeIn>
	ClearVram();
    c062:	0e 94 9a 38 	call	0x7134	; 0x7134 <ClearVram>
	init_scores(&scores);
    c066:	81 ec       	ldi	r24, 0xC1	; 193
    c068:	9b e0       	ldi	r25, 0x0B	; 11
    c06a:	0e 94 5d 49 	call	0x92ba	; 0x92ba <init_scores>
	init_handles(&handles);
    c06e:	88 ee       	ldi	r24, 0xE8	; 232
    c070:	9b e0       	ldi	r25, 0x0B	; 11
    c072:	0e 94 69 49 	call	0x92d2	; 0x92d2 <init_handles>
	init_game_state();
    c076:	0e 94 54 4a 	call	0x94a8	; 0x94a8 <init_game_state>
	init_tile_animations(&tile_animations);
    c07a:	8c e0       	ldi	r24, 0x0C	; 12
    c07c:	9c e0       	ldi	r25, 0x0C	; 12
    c07e:	0e 94 75 49 	call	0x92ea	; 0x92ea <init_tile_animations>
	load_splash();
    c082:	0e 94 3c 56 	call	0xac78	; 0xac78 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    c086:	81 e0       	ldi	r24, 0x01	; 1
    c088:	90 e0       	ldi	r25, 0x00	; 0
    c08a:	0e 94 08 47 	call	0x8e10	; 0x8e10 <WaitVsync>
		switch (game.current_screen)
    c08e:	80 91 08 0c 	lds	r24, 0x0C08
    c092:	81 30       	cpi	r24, 0x01	; 1
    c094:	91 f0       	breq	.+36     	; 0xc0ba <main+0x84>
    c096:	28 f0       	brcs	.+10     	; 0xc0a2 <main+0x6c>
    c098:	82 30       	cpi	r24, 0x02	; 2
    c09a:	d9 f0       	breq	.+54     	; 0xc0d2 <main+0x9c>
    c09c:	83 30       	cpi	r24, 0x03	; 3
    c09e:	51 f1       	breq	.+84     	; 0xc0f4 <main+0xbe>
    c0a0:	56 c0       	rjmp	.+172    	; 0xc14e <main+0x118>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    c0a2:	60 e0       	ldi	r22, 0x00	; 0
    c0a4:	83 e9       	ldi	r24, 0x93	; 147
    c0a6:	9c e0       	ldi	r25, 0x0C	; 12
    c0a8:	0e 94 91 47 	call	0x8f22	; 0x8f22 <LBGetJoyPadState>
				update_splash(&p1, &p2);
    c0ac:	61 ee       	ldi	r22, 0xE1	; 225
    c0ae:	7b e0       	ldi	r23, 0x0B	; 11
    c0b0:	83 e9       	ldi	r24, 0x93	; 147
    c0b2:	9c e0       	ldi	r25, 0x0C	; 12
    c0b4:	0e 94 33 5c 	call	0xb866	; 0xb866 <update_splash>
				break;
    c0b8:	4a c0       	rjmp	.+148    	; 0xc14e <main+0x118>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    c0ba:	60 e0       	ldi	r22, 0x00	; 0
    c0bc:	83 e9       	ldi	r24, 0x93	; 147
    c0be:	9c e0       	ldi	r25, 0x0C	; 12
    c0c0:	0e 94 91 47 	call	0x8f22	; 0x8f22 <LBGetJoyPadState>
				update_tank_rank(&p1, &p2);
    c0c4:	61 ee       	ldi	r22, 0xE1	; 225
    c0c6:	7b e0       	ldi	r23, 0x0B	; 11
    c0c8:	83 e9       	ldi	r24, 0x93	; 147
    c0ca:	9c e0       	ldi	r25, 0x0C	; 12
    c0cc:	0e 94 f6 59 	call	0xb3ec	; 0xb3ec <update_tank_rank>
				break;
    c0d0:	3e c0       	rjmp	.+124    	; 0xc14e <main+0x118>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    c0d2:	60 e0       	ldi	r22, 0x00	; 0
    c0d4:	83 e9       	ldi	r24, 0x93	; 147
    c0d6:	9c e0       	ldi	r25, 0x0C	; 12
    c0d8:	0e 94 91 47 	call	0x8f22	; 0x8f22 <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    c0dc:	61 e0       	ldi	r22, 0x01	; 1
    c0de:	81 ee       	ldi	r24, 0xE1	; 225
    c0e0:	9b e0       	ldi	r25, 0x0B	; 11
    c0e2:	0e 94 91 47 	call	0x8f22	; 0x8f22 <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    c0e6:	61 ee       	ldi	r22, 0xE1	; 225
    c0e8:	7b e0       	ldi	r23, 0x0B	; 11
    c0ea:	83 e9       	ldi	r24, 0x93	; 147
    c0ec:	9c e0       	ldi	r25, 0x0C	; 12
    c0ee:	0e 94 ea 5c 	call	0xb9d4	; 0xb9d4 <update_handle_select>
				break;
    c0f2:	2d c0       	rjmp	.+90     	; 0xc14e <main+0x118>
			case LEVEL:
				if (game.selection == PVCPU)
    c0f4:	80 91 0b 0c 	lds	r24, 0x0C0B
    c0f8:	81 11       	cpse	r24, r1
    c0fa:	06 c0       	rjmp	.+12     	; 0xc108 <main+0xd2>
				{
					LBGetJoyPadState(&p1, 0);
    c0fc:	60 e0       	ldi	r22, 0x00	; 0
    c0fe:	83 e9       	ldi	r24, 0x93	; 147
    c100:	9c e0       	ldi	r25, 0x0C	; 12
    c102:	0e 94 91 47 	call	0x8f22	; 0x8f22 <LBGetJoyPadState>
    c106:	0a c0       	rjmp	.+20     	; 0xc11c <main+0xe6>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    c108:	83 30       	cpi	r24, 0x03	; 3
    c10a:	89 f4       	brne	.+34     	; 0xc12e <main+0xf8>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    c10c:	43 e9       	ldi	r20, 0x93	; 147
    c10e:	5c e0       	ldi	r21, 0x0C	; 12
    c110:	69 e8       	ldi	r22, 0x89	; 137
    c112:	7f e0       	ldi	r23, 0x0F	; 15
    c114:	85 e2       	ldi	r24, 0x25	; 37
    c116:	9c e0       	ldi	r25, 0x0C	; 12
    c118:	0e 94 76 5e 	call	0xbcec	; 0xbcec <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    c11c:	41 ee       	ldi	r20, 0xE1	; 225
    c11e:	5b e0       	ldi	r21, 0x0B	; 11
    c120:	65 e2       	ldi	r22, 0x25	; 37
    c122:	7c e0       	ldi	r23, 0x0C	; 12
    c124:	89 e8       	ldi	r24, 0x89	; 137
    c126:	9f e0       	ldi	r25, 0x0F	; 15
    c128:	0e 94 76 5e 	call	0xbcec	; 0xbcec <get_cpu_joypad_state>
    c12c:	0a c0       	rjmp	.+20     	; 0xc142 <main+0x10c>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    c12e:	60 e0       	ldi	r22, 0x00	; 0
    c130:	83 e9       	ldi	r24, 0x93	; 147
    c132:	9c e0       	ldi	r25, 0x0C	; 12
    c134:	0e 94 91 47 	call	0x8f22	; 0x8f22 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    c138:	61 e0       	ldi	r22, 0x01	; 1
    c13a:	81 ee       	ldi	r24, 0xE1	; 225
    c13c:	9b e0       	ldi	r25, 0x0B	; 11
    c13e:	0e 94 91 47 	call	0x8f22	; 0x8f22 <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    c142:	61 ee       	ldi	r22, 0xE1	; 225
    c144:	7b e0       	ldi	r23, 0x0B	; 11
    c146:	83 e9       	ldi	r24, 0x93	; 147
    c148:	9c e0       	ldi	r25, 0x0C	; 12
    c14a:	0e 94 30 59 	call	0xb260	; 0xb260 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    c14e:	80 91 04 01 	lds	r24, 0x0104
    c152:	90 91 05 01 	lds	r25, 0x0105
    c156:	01 96       	adiw	r24, 0x01	; 1
    c158:	90 93 05 01 	sts	0x0105, r25
    c15c:	80 93 04 01 	sts	0x0104, r24
	}
    c160:	92 cf       	rjmp	.-220    	; 0xc086 <main+0x50>

0000c162 <__udivmodqi4>:
    c162:	99 1b       	sub	r25, r25
    c164:	79 e0       	ldi	r23, 0x09	; 9
    c166:	04 c0       	rjmp	.+8      	; 0xc170 <__udivmodqi4_ep>

0000c168 <__udivmodqi4_loop>:
    c168:	99 1f       	adc	r25, r25
    c16a:	96 17       	cp	r25, r22
    c16c:	08 f0       	brcs	.+2      	; 0xc170 <__udivmodqi4_ep>
    c16e:	96 1b       	sub	r25, r22

0000c170 <__udivmodqi4_ep>:
    c170:	88 1f       	adc	r24, r24
    c172:	7a 95       	dec	r23
    c174:	c9 f7       	brne	.-14     	; 0xc168 <__udivmodqi4_loop>
    c176:	80 95       	com	r24
    c178:	08 95       	ret

0000c17a <__udivmodhi4>:
    c17a:	aa 1b       	sub	r26, r26
    c17c:	bb 1b       	sub	r27, r27
    c17e:	51 e1       	ldi	r21, 0x11	; 17
    c180:	07 c0       	rjmp	.+14     	; 0xc190 <__udivmodhi4_ep>

0000c182 <__udivmodhi4_loop>:
    c182:	aa 1f       	adc	r26, r26
    c184:	bb 1f       	adc	r27, r27
    c186:	a6 17       	cp	r26, r22
    c188:	b7 07       	cpc	r27, r23
    c18a:	10 f0       	brcs	.+4      	; 0xc190 <__udivmodhi4_ep>
    c18c:	a6 1b       	sub	r26, r22
    c18e:	b7 0b       	sbc	r27, r23

0000c190 <__udivmodhi4_ep>:
    c190:	88 1f       	adc	r24, r24
    c192:	99 1f       	adc	r25, r25
    c194:	5a 95       	dec	r21
    c196:	a9 f7       	brne	.-22     	; 0xc182 <__udivmodhi4_loop>
    c198:	80 95       	com	r24
    c19a:	90 95       	com	r25
    c19c:	bc 01       	movw	r22, r24
    c19e:	cd 01       	movw	r24, r26
    c1a0:	08 95       	ret

0000c1a2 <__divmodhi4>:
    c1a2:	97 fb       	bst	r25, 7
    c1a4:	07 2e       	mov	r0, r23
    c1a6:	16 f4       	brtc	.+4      	; 0xc1ac <__divmodhi4+0xa>
    c1a8:	00 94       	com	r0
    c1aa:	07 d0       	rcall	.+14     	; 0xc1ba <__divmodhi4_neg1>
    c1ac:	77 fd       	sbrc	r23, 7
    c1ae:	09 d0       	rcall	.+18     	; 0xc1c2 <__divmodhi4_neg2>
    c1b0:	0e 94 bd 60 	call	0xc17a	; 0xc17a <__udivmodhi4>
    c1b4:	07 fc       	sbrc	r0, 7
    c1b6:	05 d0       	rcall	.+10     	; 0xc1c2 <__divmodhi4_neg2>
    c1b8:	3e f4       	brtc	.+14     	; 0xc1c8 <__divmodhi4_exit>

0000c1ba <__divmodhi4_neg1>:
    c1ba:	90 95       	com	r25
    c1bc:	81 95       	neg	r24
    c1be:	9f 4f       	sbci	r25, 0xFF	; 255
    c1c0:	08 95       	ret

0000c1c2 <__divmodhi4_neg2>:
    c1c2:	70 95       	com	r23
    c1c4:	61 95       	neg	r22
    c1c6:	7f 4f       	sbci	r23, 0xFF	; 255

0000c1c8 <__divmodhi4_exit>:
    c1c8:	08 95       	ret

0000c1ca <__subsf3>:
    c1ca:	50 58       	subi	r21, 0x80	; 128

0000c1cc <__addsf3>:
    c1cc:	bb 27       	eor	r27, r27
    c1ce:	aa 27       	eor	r26, r26
    c1d0:	0e d0       	rcall	.+28     	; 0xc1ee <__addsf3x>
    c1d2:	75 c1       	rjmp	.+746    	; 0xc4be <__fp_round>
    c1d4:	66 d1       	rcall	.+716    	; 0xc4a2 <__fp_pscA>
    c1d6:	30 f0       	brcs	.+12     	; 0xc1e4 <__addsf3+0x18>
    c1d8:	6b d1       	rcall	.+726    	; 0xc4b0 <__fp_pscB>
    c1da:	20 f0       	brcs	.+8      	; 0xc1e4 <__addsf3+0x18>
    c1dc:	31 f4       	brne	.+12     	; 0xc1ea <__addsf3+0x1e>
    c1de:	9f 3f       	cpi	r25, 0xFF	; 255
    c1e0:	11 f4       	brne	.+4      	; 0xc1e6 <__addsf3+0x1a>
    c1e2:	1e f4       	brtc	.+6      	; 0xc1ea <__addsf3+0x1e>
    c1e4:	5b c1       	rjmp	.+694    	; 0xc49c <__fp_nan>
    c1e6:	0e f4       	brtc	.+2      	; 0xc1ea <__addsf3+0x1e>
    c1e8:	e0 95       	com	r30
    c1ea:	e7 fb       	bst	r30, 7
    c1ec:	51 c1       	rjmp	.+674    	; 0xc490 <__fp_inf>

0000c1ee <__addsf3x>:
    c1ee:	e9 2f       	mov	r30, r25
    c1f0:	77 d1       	rcall	.+750    	; 0xc4e0 <__fp_split3>
    c1f2:	80 f3       	brcs	.-32     	; 0xc1d4 <__addsf3+0x8>
    c1f4:	ba 17       	cp	r27, r26
    c1f6:	62 07       	cpc	r22, r18
    c1f8:	73 07       	cpc	r23, r19
    c1fa:	84 07       	cpc	r24, r20
    c1fc:	95 07       	cpc	r25, r21
    c1fe:	18 f0       	brcs	.+6      	; 0xc206 <__addsf3x+0x18>
    c200:	71 f4       	brne	.+28     	; 0xc21e <__addsf3x+0x30>
    c202:	9e f5       	brtc	.+102    	; 0xc26a <__addsf3x+0x7c>
    c204:	8f c1       	rjmp	.+798    	; 0xc524 <__fp_zero>
    c206:	0e f4       	brtc	.+2      	; 0xc20a <__addsf3x+0x1c>
    c208:	e0 95       	com	r30
    c20a:	0b 2e       	mov	r0, r27
    c20c:	ba 2f       	mov	r27, r26
    c20e:	a0 2d       	mov	r26, r0
    c210:	0b 01       	movw	r0, r22
    c212:	b9 01       	movw	r22, r18
    c214:	90 01       	movw	r18, r0
    c216:	0c 01       	movw	r0, r24
    c218:	ca 01       	movw	r24, r20
    c21a:	a0 01       	movw	r20, r0
    c21c:	11 24       	eor	r1, r1
    c21e:	ff 27       	eor	r31, r31
    c220:	59 1b       	sub	r21, r25
    c222:	99 f0       	breq	.+38     	; 0xc24a <__addsf3x+0x5c>
    c224:	59 3f       	cpi	r21, 0xF9	; 249
    c226:	50 f4       	brcc	.+20     	; 0xc23c <__addsf3x+0x4e>
    c228:	50 3e       	cpi	r21, 0xE0	; 224
    c22a:	68 f1       	brcs	.+90     	; 0xc286 <__addsf3x+0x98>
    c22c:	1a 16       	cp	r1, r26
    c22e:	f0 40       	sbci	r31, 0x00	; 0
    c230:	a2 2f       	mov	r26, r18
    c232:	23 2f       	mov	r18, r19
    c234:	34 2f       	mov	r19, r20
    c236:	44 27       	eor	r20, r20
    c238:	58 5f       	subi	r21, 0xF8	; 248
    c23a:	f3 cf       	rjmp	.-26     	; 0xc222 <__addsf3x+0x34>
    c23c:	46 95       	lsr	r20
    c23e:	37 95       	ror	r19
    c240:	27 95       	ror	r18
    c242:	a7 95       	ror	r26
    c244:	f0 40       	sbci	r31, 0x00	; 0
    c246:	53 95       	inc	r21
    c248:	c9 f7       	brne	.-14     	; 0xc23c <__addsf3x+0x4e>
    c24a:	7e f4       	brtc	.+30     	; 0xc26a <__addsf3x+0x7c>
    c24c:	1f 16       	cp	r1, r31
    c24e:	ba 0b       	sbc	r27, r26
    c250:	62 0b       	sbc	r22, r18
    c252:	73 0b       	sbc	r23, r19
    c254:	84 0b       	sbc	r24, r20
    c256:	ba f0       	brmi	.+46     	; 0xc286 <__addsf3x+0x98>
    c258:	91 50       	subi	r25, 0x01	; 1
    c25a:	a1 f0       	breq	.+40     	; 0xc284 <__addsf3x+0x96>
    c25c:	ff 0f       	add	r31, r31
    c25e:	bb 1f       	adc	r27, r27
    c260:	66 1f       	adc	r22, r22
    c262:	77 1f       	adc	r23, r23
    c264:	88 1f       	adc	r24, r24
    c266:	c2 f7       	brpl	.-16     	; 0xc258 <__addsf3x+0x6a>
    c268:	0e c0       	rjmp	.+28     	; 0xc286 <__addsf3x+0x98>
    c26a:	ba 0f       	add	r27, r26
    c26c:	62 1f       	adc	r22, r18
    c26e:	73 1f       	adc	r23, r19
    c270:	84 1f       	adc	r24, r20
    c272:	48 f4       	brcc	.+18     	; 0xc286 <__addsf3x+0x98>
    c274:	87 95       	ror	r24
    c276:	77 95       	ror	r23
    c278:	67 95       	ror	r22
    c27a:	b7 95       	ror	r27
    c27c:	f7 95       	ror	r31
    c27e:	9e 3f       	cpi	r25, 0xFE	; 254
    c280:	08 f0       	brcs	.+2      	; 0xc284 <__addsf3x+0x96>
    c282:	b3 cf       	rjmp	.-154    	; 0xc1ea <__addsf3+0x1e>
    c284:	93 95       	inc	r25
    c286:	88 0f       	add	r24, r24
    c288:	08 f0       	brcs	.+2      	; 0xc28c <__addsf3x+0x9e>
    c28a:	99 27       	eor	r25, r25
    c28c:	ee 0f       	add	r30, r30
    c28e:	97 95       	ror	r25
    c290:	87 95       	ror	r24
    c292:	08 95       	ret

0000c294 <__cmpsf2>:
    c294:	d9 d0       	rcall	.+434    	; 0xc448 <__fp_cmp>
    c296:	08 f4       	brcc	.+2      	; 0xc29a <__cmpsf2+0x6>
    c298:	81 e0       	ldi	r24, 0x01	; 1
    c29a:	08 95       	ret

0000c29c <__divsf3>:
    c29c:	0c d0       	rcall	.+24     	; 0xc2b6 <__divsf3x>
    c29e:	0f c1       	rjmp	.+542    	; 0xc4be <__fp_round>
    c2a0:	07 d1       	rcall	.+526    	; 0xc4b0 <__fp_pscB>
    c2a2:	40 f0       	brcs	.+16     	; 0xc2b4 <__divsf3+0x18>
    c2a4:	fe d0       	rcall	.+508    	; 0xc4a2 <__fp_pscA>
    c2a6:	30 f0       	brcs	.+12     	; 0xc2b4 <__divsf3+0x18>
    c2a8:	21 f4       	brne	.+8      	; 0xc2b2 <__divsf3+0x16>
    c2aa:	5f 3f       	cpi	r21, 0xFF	; 255
    c2ac:	19 f0       	breq	.+6      	; 0xc2b4 <__divsf3+0x18>
    c2ae:	f0 c0       	rjmp	.+480    	; 0xc490 <__fp_inf>
    c2b0:	51 11       	cpse	r21, r1
    c2b2:	39 c1       	rjmp	.+626    	; 0xc526 <__fp_szero>
    c2b4:	f3 c0       	rjmp	.+486    	; 0xc49c <__fp_nan>

0000c2b6 <__divsf3x>:
    c2b6:	14 d1       	rcall	.+552    	; 0xc4e0 <__fp_split3>
    c2b8:	98 f3       	brcs	.-26     	; 0xc2a0 <__divsf3+0x4>

0000c2ba <__divsf3_pse>:
    c2ba:	99 23       	and	r25, r25
    c2bc:	c9 f3       	breq	.-14     	; 0xc2b0 <__divsf3+0x14>
    c2be:	55 23       	and	r21, r21
    c2c0:	b1 f3       	breq	.-20     	; 0xc2ae <__divsf3+0x12>
    c2c2:	95 1b       	sub	r25, r21
    c2c4:	55 0b       	sbc	r21, r21
    c2c6:	bb 27       	eor	r27, r27
    c2c8:	aa 27       	eor	r26, r26
    c2ca:	62 17       	cp	r22, r18
    c2cc:	73 07       	cpc	r23, r19
    c2ce:	84 07       	cpc	r24, r20
    c2d0:	38 f0       	brcs	.+14     	; 0xc2e0 <__divsf3_pse+0x26>
    c2d2:	9f 5f       	subi	r25, 0xFF	; 255
    c2d4:	5f 4f       	sbci	r21, 0xFF	; 255
    c2d6:	22 0f       	add	r18, r18
    c2d8:	33 1f       	adc	r19, r19
    c2da:	44 1f       	adc	r20, r20
    c2dc:	aa 1f       	adc	r26, r26
    c2de:	a9 f3       	breq	.-22     	; 0xc2ca <__divsf3_pse+0x10>
    c2e0:	33 d0       	rcall	.+102    	; 0xc348 <__divsf3_pse+0x8e>
    c2e2:	0e 2e       	mov	r0, r30
    c2e4:	3a f0       	brmi	.+14     	; 0xc2f4 <__divsf3_pse+0x3a>
    c2e6:	e0 e8       	ldi	r30, 0x80	; 128
    c2e8:	30 d0       	rcall	.+96     	; 0xc34a <__divsf3_pse+0x90>
    c2ea:	91 50       	subi	r25, 0x01	; 1
    c2ec:	50 40       	sbci	r21, 0x00	; 0
    c2ee:	e6 95       	lsr	r30
    c2f0:	00 1c       	adc	r0, r0
    c2f2:	ca f7       	brpl	.-14     	; 0xc2e6 <__divsf3_pse+0x2c>
    c2f4:	29 d0       	rcall	.+82     	; 0xc348 <__divsf3_pse+0x8e>
    c2f6:	fe 2f       	mov	r31, r30
    c2f8:	27 d0       	rcall	.+78     	; 0xc348 <__divsf3_pse+0x8e>
    c2fa:	66 0f       	add	r22, r22
    c2fc:	77 1f       	adc	r23, r23
    c2fe:	88 1f       	adc	r24, r24
    c300:	bb 1f       	adc	r27, r27
    c302:	26 17       	cp	r18, r22
    c304:	37 07       	cpc	r19, r23
    c306:	48 07       	cpc	r20, r24
    c308:	ab 07       	cpc	r26, r27
    c30a:	b0 e8       	ldi	r27, 0x80	; 128
    c30c:	09 f0       	breq	.+2      	; 0xc310 <__divsf3_pse+0x56>
    c30e:	bb 0b       	sbc	r27, r27
    c310:	80 2d       	mov	r24, r0
    c312:	bf 01       	movw	r22, r30
    c314:	ff 27       	eor	r31, r31
    c316:	93 58       	subi	r25, 0x83	; 131
    c318:	5f 4f       	sbci	r21, 0xFF	; 255
    c31a:	2a f0       	brmi	.+10     	; 0xc326 <__divsf3_pse+0x6c>
    c31c:	9e 3f       	cpi	r25, 0xFE	; 254
    c31e:	51 05       	cpc	r21, r1
    c320:	68 f0       	brcs	.+26     	; 0xc33c <__divsf3_pse+0x82>
    c322:	b6 c0       	rjmp	.+364    	; 0xc490 <__fp_inf>
    c324:	00 c1       	rjmp	.+512    	; 0xc526 <__fp_szero>
    c326:	5f 3f       	cpi	r21, 0xFF	; 255
    c328:	ec f3       	brlt	.-6      	; 0xc324 <__divsf3_pse+0x6a>
    c32a:	98 3e       	cpi	r25, 0xE8	; 232
    c32c:	dc f3       	brlt	.-10     	; 0xc324 <__divsf3_pse+0x6a>
    c32e:	86 95       	lsr	r24
    c330:	77 95       	ror	r23
    c332:	67 95       	ror	r22
    c334:	b7 95       	ror	r27
    c336:	f7 95       	ror	r31
    c338:	9f 5f       	subi	r25, 0xFF	; 255
    c33a:	c9 f7       	brne	.-14     	; 0xc32e <__divsf3_pse+0x74>
    c33c:	88 0f       	add	r24, r24
    c33e:	91 1d       	adc	r25, r1
    c340:	96 95       	lsr	r25
    c342:	87 95       	ror	r24
    c344:	97 f9       	bld	r25, 7
    c346:	08 95       	ret
    c348:	e1 e0       	ldi	r30, 0x01	; 1
    c34a:	66 0f       	add	r22, r22
    c34c:	77 1f       	adc	r23, r23
    c34e:	88 1f       	adc	r24, r24
    c350:	bb 1f       	adc	r27, r27
    c352:	62 17       	cp	r22, r18
    c354:	73 07       	cpc	r23, r19
    c356:	84 07       	cpc	r24, r20
    c358:	ba 07       	cpc	r27, r26
    c35a:	20 f0       	brcs	.+8      	; 0xc364 <__divsf3_pse+0xaa>
    c35c:	62 1b       	sub	r22, r18
    c35e:	73 0b       	sbc	r23, r19
    c360:	84 0b       	sbc	r24, r20
    c362:	ba 0b       	sbc	r27, r26
    c364:	ee 1f       	adc	r30, r30
    c366:	88 f7       	brcc	.-30     	; 0xc34a <__divsf3_pse+0x90>
    c368:	e0 95       	com	r30
    c36a:	08 95       	ret

0000c36c <__fixsfsi>:
    c36c:	04 d0       	rcall	.+8      	; 0xc376 <__fixunssfsi>
    c36e:	68 94       	set
    c370:	b1 11       	cpse	r27, r1
    c372:	d9 c0       	rjmp	.+434    	; 0xc526 <__fp_szero>
    c374:	08 95       	ret

0000c376 <__fixunssfsi>:
    c376:	bc d0       	rcall	.+376    	; 0xc4f0 <__fp_splitA>
    c378:	88 f0       	brcs	.+34     	; 0xc39c <__fixunssfsi+0x26>
    c37a:	9f 57       	subi	r25, 0x7F	; 127
    c37c:	90 f0       	brcs	.+36     	; 0xc3a2 <__fixunssfsi+0x2c>
    c37e:	b9 2f       	mov	r27, r25
    c380:	99 27       	eor	r25, r25
    c382:	b7 51       	subi	r27, 0x17	; 23
    c384:	a0 f0       	brcs	.+40     	; 0xc3ae <__fixunssfsi+0x38>
    c386:	d1 f0       	breq	.+52     	; 0xc3bc <__fixunssfsi+0x46>
    c388:	66 0f       	add	r22, r22
    c38a:	77 1f       	adc	r23, r23
    c38c:	88 1f       	adc	r24, r24
    c38e:	99 1f       	adc	r25, r25
    c390:	1a f0       	brmi	.+6      	; 0xc398 <__fixunssfsi+0x22>
    c392:	ba 95       	dec	r27
    c394:	c9 f7       	brne	.-14     	; 0xc388 <__fixunssfsi+0x12>
    c396:	12 c0       	rjmp	.+36     	; 0xc3bc <__fixunssfsi+0x46>
    c398:	b1 30       	cpi	r27, 0x01	; 1
    c39a:	81 f0       	breq	.+32     	; 0xc3bc <__fixunssfsi+0x46>
    c39c:	c3 d0       	rcall	.+390    	; 0xc524 <__fp_zero>
    c39e:	b1 e0       	ldi	r27, 0x01	; 1
    c3a0:	08 95       	ret
    c3a2:	c0 c0       	rjmp	.+384    	; 0xc524 <__fp_zero>
    c3a4:	67 2f       	mov	r22, r23
    c3a6:	78 2f       	mov	r23, r24
    c3a8:	88 27       	eor	r24, r24
    c3aa:	b8 5f       	subi	r27, 0xF8	; 248
    c3ac:	39 f0       	breq	.+14     	; 0xc3bc <__fixunssfsi+0x46>
    c3ae:	b9 3f       	cpi	r27, 0xF9	; 249
    c3b0:	cc f3       	brlt	.-14     	; 0xc3a4 <__fixunssfsi+0x2e>
    c3b2:	86 95       	lsr	r24
    c3b4:	77 95       	ror	r23
    c3b6:	67 95       	ror	r22
    c3b8:	b3 95       	inc	r27
    c3ba:	d9 f7       	brne	.-10     	; 0xc3b2 <__fixunssfsi+0x3c>
    c3bc:	3e f4       	brtc	.+14     	; 0xc3cc <__fixunssfsi+0x56>
    c3be:	90 95       	com	r25
    c3c0:	80 95       	com	r24
    c3c2:	70 95       	com	r23
    c3c4:	61 95       	neg	r22
    c3c6:	7f 4f       	sbci	r23, 0xFF	; 255
    c3c8:	8f 4f       	sbci	r24, 0xFF	; 255
    c3ca:	9f 4f       	sbci	r25, 0xFF	; 255
    c3cc:	08 95       	ret

0000c3ce <__floatunsisf>:
    c3ce:	e8 94       	clt
    c3d0:	09 c0       	rjmp	.+18     	; 0xc3e4 <__floatsisf+0x12>

0000c3d2 <__floatsisf>:
    c3d2:	97 fb       	bst	r25, 7
    c3d4:	3e f4       	brtc	.+14     	; 0xc3e4 <__floatsisf+0x12>
    c3d6:	90 95       	com	r25
    c3d8:	80 95       	com	r24
    c3da:	70 95       	com	r23
    c3dc:	61 95       	neg	r22
    c3de:	7f 4f       	sbci	r23, 0xFF	; 255
    c3e0:	8f 4f       	sbci	r24, 0xFF	; 255
    c3e2:	9f 4f       	sbci	r25, 0xFF	; 255
    c3e4:	99 23       	and	r25, r25
    c3e6:	a9 f0       	breq	.+42     	; 0xc412 <__floatsisf+0x40>
    c3e8:	f9 2f       	mov	r31, r25
    c3ea:	96 e9       	ldi	r25, 0x96	; 150
    c3ec:	bb 27       	eor	r27, r27
    c3ee:	93 95       	inc	r25
    c3f0:	f6 95       	lsr	r31
    c3f2:	87 95       	ror	r24
    c3f4:	77 95       	ror	r23
    c3f6:	67 95       	ror	r22
    c3f8:	b7 95       	ror	r27
    c3fa:	f1 11       	cpse	r31, r1
    c3fc:	f8 cf       	rjmp	.-16     	; 0xc3ee <__floatsisf+0x1c>
    c3fe:	fa f4       	brpl	.+62     	; 0xc43e <__floatsisf+0x6c>
    c400:	bb 0f       	add	r27, r27
    c402:	11 f4       	brne	.+4      	; 0xc408 <__floatsisf+0x36>
    c404:	60 ff       	sbrs	r22, 0
    c406:	1b c0       	rjmp	.+54     	; 0xc43e <__floatsisf+0x6c>
    c408:	6f 5f       	subi	r22, 0xFF	; 255
    c40a:	7f 4f       	sbci	r23, 0xFF	; 255
    c40c:	8f 4f       	sbci	r24, 0xFF	; 255
    c40e:	9f 4f       	sbci	r25, 0xFF	; 255
    c410:	16 c0       	rjmp	.+44     	; 0xc43e <__floatsisf+0x6c>
    c412:	88 23       	and	r24, r24
    c414:	11 f0       	breq	.+4      	; 0xc41a <__floatsisf+0x48>
    c416:	96 e9       	ldi	r25, 0x96	; 150
    c418:	11 c0       	rjmp	.+34     	; 0xc43c <__floatsisf+0x6a>
    c41a:	77 23       	and	r23, r23
    c41c:	21 f0       	breq	.+8      	; 0xc426 <__floatsisf+0x54>
    c41e:	9e e8       	ldi	r25, 0x8E	; 142
    c420:	87 2f       	mov	r24, r23
    c422:	76 2f       	mov	r23, r22
    c424:	05 c0       	rjmp	.+10     	; 0xc430 <__floatsisf+0x5e>
    c426:	66 23       	and	r22, r22
    c428:	71 f0       	breq	.+28     	; 0xc446 <__floatsisf+0x74>
    c42a:	96 e8       	ldi	r25, 0x86	; 134
    c42c:	86 2f       	mov	r24, r22
    c42e:	70 e0       	ldi	r23, 0x00	; 0
    c430:	60 e0       	ldi	r22, 0x00	; 0
    c432:	2a f0       	brmi	.+10     	; 0xc43e <__floatsisf+0x6c>
    c434:	9a 95       	dec	r25
    c436:	66 0f       	add	r22, r22
    c438:	77 1f       	adc	r23, r23
    c43a:	88 1f       	adc	r24, r24
    c43c:	da f7       	brpl	.-10     	; 0xc434 <__floatsisf+0x62>
    c43e:	88 0f       	add	r24, r24
    c440:	96 95       	lsr	r25
    c442:	87 95       	ror	r24
    c444:	97 f9       	bld	r25, 7
    c446:	08 95       	ret

0000c448 <__fp_cmp>:
    c448:	99 0f       	add	r25, r25
    c44a:	00 08       	sbc	r0, r0
    c44c:	55 0f       	add	r21, r21
    c44e:	aa 0b       	sbc	r26, r26
    c450:	e0 e8       	ldi	r30, 0x80	; 128
    c452:	fe ef       	ldi	r31, 0xFE	; 254
    c454:	16 16       	cp	r1, r22
    c456:	17 06       	cpc	r1, r23
    c458:	e8 07       	cpc	r30, r24
    c45a:	f9 07       	cpc	r31, r25
    c45c:	c0 f0       	brcs	.+48     	; 0xc48e <__fp_cmp+0x46>
    c45e:	12 16       	cp	r1, r18
    c460:	13 06       	cpc	r1, r19
    c462:	e4 07       	cpc	r30, r20
    c464:	f5 07       	cpc	r31, r21
    c466:	98 f0       	brcs	.+38     	; 0xc48e <__fp_cmp+0x46>
    c468:	62 1b       	sub	r22, r18
    c46a:	73 0b       	sbc	r23, r19
    c46c:	84 0b       	sbc	r24, r20
    c46e:	95 0b       	sbc	r25, r21
    c470:	39 f4       	brne	.+14     	; 0xc480 <__fp_cmp+0x38>
    c472:	0a 26       	eor	r0, r26
    c474:	61 f0       	breq	.+24     	; 0xc48e <__fp_cmp+0x46>
    c476:	23 2b       	or	r18, r19
    c478:	24 2b       	or	r18, r20
    c47a:	25 2b       	or	r18, r21
    c47c:	21 f4       	brne	.+8      	; 0xc486 <__fp_cmp+0x3e>
    c47e:	08 95       	ret
    c480:	0a 26       	eor	r0, r26
    c482:	09 f4       	brne	.+2      	; 0xc486 <__fp_cmp+0x3e>
    c484:	a1 40       	sbci	r26, 0x01	; 1
    c486:	a6 95       	lsr	r26
    c488:	8f ef       	ldi	r24, 0xFF	; 255
    c48a:	81 1d       	adc	r24, r1
    c48c:	81 1d       	adc	r24, r1
    c48e:	08 95       	ret

0000c490 <__fp_inf>:
    c490:	97 f9       	bld	r25, 7
    c492:	9f 67       	ori	r25, 0x7F	; 127
    c494:	80 e8       	ldi	r24, 0x80	; 128
    c496:	70 e0       	ldi	r23, 0x00	; 0
    c498:	60 e0       	ldi	r22, 0x00	; 0
    c49a:	08 95       	ret

0000c49c <__fp_nan>:
    c49c:	9f ef       	ldi	r25, 0xFF	; 255
    c49e:	80 ec       	ldi	r24, 0xC0	; 192
    c4a0:	08 95       	ret

0000c4a2 <__fp_pscA>:
    c4a2:	00 24       	eor	r0, r0
    c4a4:	0a 94       	dec	r0
    c4a6:	16 16       	cp	r1, r22
    c4a8:	17 06       	cpc	r1, r23
    c4aa:	18 06       	cpc	r1, r24
    c4ac:	09 06       	cpc	r0, r25
    c4ae:	08 95       	ret

0000c4b0 <__fp_pscB>:
    c4b0:	00 24       	eor	r0, r0
    c4b2:	0a 94       	dec	r0
    c4b4:	12 16       	cp	r1, r18
    c4b6:	13 06       	cpc	r1, r19
    c4b8:	14 06       	cpc	r1, r20
    c4ba:	05 06       	cpc	r0, r21
    c4bc:	08 95       	ret

0000c4be <__fp_round>:
    c4be:	09 2e       	mov	r0, r25
    c4c0:	03 94       	inc	r0
    c4c2:	00 0c       	add	r0, r0
    c4c4:	11 f4       	brne	.+4      	; 0xc4ca <__fp_round+0xc>
    c4c6:	88 23       	and	r24, r24
    c4c8:	52 f0       	brmi	.+20     	; 0xc4de <__fp_round+0x20>
    c4ca:	bb 0f       	add	r27, r27
    c4cc:	40 f4       	brcc	.+16     	; 0xc4de <__fp_round+0x20>
    c4ce:	bf 2b       	or	r27, r31
    c4d0:	11 f4       	brne	.+4      	; 0xc4d6 <__fp_round+0x18>
    c4d2:	60 ff       	sbrs	r22, 0
    c4d4:	04 c0       	rjmp	.+8      	; 0xc4de <__fp_round+0x20>
    c4d6:	6f 5f       	subi	r22, 0xFF	; 255
    c4d8:	7f 4f       	sbci	r23, 0xFF	; 255
    c4da:	8f 4f       	sbci	r24, 0xFF	; 255
    c4dc:	9f 4f       	sbci	r25, 0xFF	; 255
    c4de:	08 95       	ret

0000c4e0 <__fp_split3>:
    c4e0:	57 fd       	sbrc	r21, 7
    c4e2:	90 58       	subi	r25, 0x80	; 128
    c4e4:	44 0f       	add	r20, r20
    c4e6:	55 1f       	adc	r21, r21
    c4e8:	59 f0       	breq	.+22     	; 0xc500 <__fp_splitA+0x10>
    c4ea:	5f 3f       	cpi	r21, 0xFF	; 255
    c4ec:	71 f0       	breq	.+28     	; 0xc50a <__fp_splitA+0x1a>
    c4ee:	47 95       	ror	r20

0000c4f0 <__fp_splitA>:
    c4f0:	88 0f       	add	r24, r24
    c4f2:	97 fb       	bst	r25, 7
    c4f4:	99 1f       	adc	r25, r25
    c4f6:	61 f0       	breq	.+24     	; 0xc510 <__fp_splitA+0x20>
    c4f8:	9f 3f       	cpi	r25, 0xFF	; 255
    c4fa:	79 f0       	breq	.+30     	; 0xc51a <__fp_splitA+0x2a>
    c4fc:	87 95       	ror	r24
    c4fe:	08 95       	ret
    c500:	12 16       	cp	r1, r18
    c502:	13 06       	cpc	r1, r19
    c504:	14 06       	cpc	r1, r20
    c506:	55 1f       	adc	r21, r21
    c508:	f2 cf       	rjmp	.-28     	; 0xc4ee <__fp_split3+0xe>
    c50a:	46 95       	lsr	r20
    c50c:	f1 df       	rcall	.-30     	; 0xc4f0 <__fp_splitA>
    c50e:	08 c0       	rjmp	.+16     	; 0xc520 <__fp_splitA+0x30>
    c510:	16 16       	cp	r1, r22
    c512:	17 06       	cpc	r1, r23
    c514:	18 06       	cpc	r1, r24
    c516:	99 1f       	adc	r25, r25
    c518:	f1 cf       	rjmp	.-30     	; 0xc4fc <__fp_splitA+0xc>
    c51a:	86 95       	lsr	r24
    c51c:	71 05       	cpc	r23, r1
    c51e:	61 05       	cpc	r22, r1
    c520:	08 94       	sec
    c522:	08 95       	ret

0000c524 <__fp_zero>:
    c524:	e8 94       	clt

0000c526 <__fp_szero>:
    c526:	bb 27       	eor	r27, r27
    c528:	66 27       	eor	r22, r22
    c52a:	77 27       	eor	r23, r23
    c52c:	cb 01       	movw	r24, r22
    c52e:	97 f9       	bld	r25, 7
    c530:	08 95       	ret

0000c532 <__gesf2>:
    c532:	8a df       	rcall	.-236    	; 0xc448 <__fp_cmp>
    c534:	08 f4       	brcc	.+2      	; 0xc538 <__gesf2+0x6>
    c536:	8f ef       	ldi	r24, 0xFF	; 255
    c538:	08 95       	ret

0000c53a <__mulsf3>:
    c53a:	0b d0       	rcall	.+22     	; 0xc552 <__mulsf3x>
    c53c:	c0 cf       	rjmp	.-128    	; 0xc4be <__fp_round>
    c53e:	b1 df       	rcall	.-158    	; 0xc4a2 <__fp_pscA>
    c540:	28 f0       	brcs	.+10     	; 0xc54c <__mulsf3+0x12>
    c542:	b6 df       	rcall	.-148    	; 0xc4b0 <__fp_pscB>
    c544:	18 f0       	brcs	.+6      	; 0xc54c <__mulsf3+0x12>
    c546:	95 23       	and	r25, r21
    c548:	09 f0       	breq	.+2      	; 0xc54c <__mulsf3+0x12>
    c54a:	a2 cf       	rjmp	.-188    	; 0xc490 <__fp_inf>
    c54c:	a7 cf       	rjmp	.-178    	; 0xc49c <__fp_nan>
    c54e:	11 24       	eor	r1, r1
    c550:	ea cf       	rjmp	.-44     	; 0xc526 <__fp_szero>

0000c552 <__mulsf3x>:
    c552:	c6 df       	rcall	.-116    	; 0xc4e0 <__fp_split3>
    c554:	a0 f3       	brcs	.-24     	; 0xc53e <__mulsf3+0x4>

0000c556 <__mulsf3_pse>:
    c556:	95 9f       	mul	r25, r21
    c558:	d1 f3       	breq	.-12     	; 0xc54e <__mulsf3+0x14>
    c55a:	95 0f       	add	r25, r21
    c55c:	50 e0       	ldi	r21, 0x00	; 0
    c55e:	55 1f       	adc	r21, r21
    c560:	62 9f       	mul	r22, r18
    c562:	f0 01       	movw	r30, r0
    c564:	72 9f       	mul	r23, r18
    c566:	bb 27       	eor	r27, r27
    c568:	f0 0d       	add	r31, r0
    c56a:	b1 1d       	adc	r27, r1
    c56c:	63 9f       	mul	r22, r19
    c56e:	aa 27       	eor	r26, r26
    c570:	f0 0d       	add	r31, r0
    c572:	b1 1d       	adc	r27, r1
    c574:	aa 1f       	adc	r26, r26
    c576:	64 9f       	mul	r22, r20
    c578:	66 27       	eor	r22, r22
    c57a:	b0 0d       	add	r27, r0
    c57c:	a1 1d       	adc	r26, r1
    c57e:	66 1f       	adc	r22, r22
    c580:	82 9f       	mul	r24, r18
    c582:	22 27       	eor	r18, r18
    c584:	b0 0d       	add	r27, r0
    c586:	a1 1d       	adc	r26, r1
    c588:	62 1f       	adc	r22, r18
    c58a:	73 9f       	mul	r23, r19
    c58c:	b0 0d       	add	r27, r0
    c58e:	a1 1d       	adc	r26, r1
    c590:	62 1f       	adc	r22, r18
    c592:	83 9f       	mul	r24, r19
    c594:	a0 0d       	add	r26, r0
    c596:	61 1d       	adc	r22, r1
    c598:	22 1f       	adc	r18, r18
    c59a:	74 9f       	mul	r23, r20
    c59c:	33 27       	eor	r19, r19
    c59e:	a0 0d       	add	r26, r0
    c5a0:	61 1d       	adc	r22, r1
    c5a2:	23 1f       	adc	r18, r19
    c5a4:	84 9f       	mul	r24, r20
    c5a6:	60 0d       	add	r22, r0
    c5a8:	21 1d       	adc	r18, r1
    c5aa:	82 2f       	mov	r24, r18
    c5ac:	76 2f       	mov	r23, r22
    c5ae:	6a 2f       	mov	r22, r26
    c5b0:	11 24       	eor	r1, r1
    c5b2:	9f 57       	subi	r25, 0x7F	; 127
    c5b4:	50 40       	sbci	r21, 0x00	; 0
    c5b6:	8a f0       	brmi	.+34     	; 0xc5da <__mulsf3_pse+0x84>
    c5b8:	e1 f0       	breq	.+56     	; 0xc5f2 <__mulsf3_pse+0x9c>
    c5ba:	88 23       	and	r24, r24
    c5bc:	4a f0       	brmi	.+18     	; 0xc5d0 <__mulsf3_pse+0x7a>
    c5be:	ee 0f       	add	r30, r30
    c5c0:	ff 1f       	adc	r31, r31
    c5c2:	bb 1f       	adc	r27, r27
    c5c4:	66 1f       	adc	r22, r22
    c5c6:	77 1f       	adc	r23, r23
    c5c8:	88 1f       	adc	r24, r24
    c5ca:	91 50       	subi	r25, 0x01	; 1
    c5cc:	50 40       	sbci	r21, 0x00	; 0
    c5ce:	a9 f7       	brne	.-22     	; 0xc5ba <__mulsf3_pse+0x64>
    c5d0:	9e 3f       	cpi	r25, 0xFE	; 254
    c5d2:	51 05       	cpc	r21, r1
    c5d4:	70 f0       	brcs	.+28     	; 0xc5f2 <__mulsf3_pse+0x9c>
    c5d6:	5c cf       	rjmp	.-328    	; 0xc490 <__fp_inf>
    c5d8:	a6 cf       	rjmp	.-180    	; 0xc526 <__fp_szero>
    c5da:	5f 3f       	cpi	r21, 0xFF	; 255
    c5dc:	ec f3       	brlt	.-6      	; 0xc5d8 <__mulsf3_pse+0x82>
    c5de:	98 3e       	cpi	r25, 0xE8	; 232
    c5e0:	dc f3       	brlt	.-10     	; 0xc5d8 <__mulsf3_pse+0x82>
    c5e2:	86 95       	lsr	r24
    c5e4:	77 95       	ror	r23
    c5e6:	67 95       	ror	r22
    c5e8:	b7 95       	ror	r27
    c5ea:	f7 95       	ror	r31
    c5ec:	e7 95       	ror	r30
    c5ee:	9f 5f       	subi	r25, 0xFF	; 255
    c5f0:	c1 f7       	brne	.-16     	; 0xc5e2 <__mulsf3_pse+0x8c>
    c5f2:	fe 2b       	or	r31, r30
    c5f4:	88 0f       	add	r24, r24
    c5f6:	91 1d       	adc	r25, r1
    c5f8:	96 95       	lsr	r25
    c5fa:	87 95       	ror	r24
    c5fc:	97 f9       	bld	r25, 7
    c5fe:	08 95       	ret

0000c600 <memcpy_P>:
    c600:	fb 01       	movw	r30, r22
    c602:	dc 01       	movw	r26, r24
    c604:	02 c0       	rjmp	.+4      	; 0xc60a <memcpy_P+0xa>
    c606:	05 90       	lpm	r0, Z+
    c608:	0d 92       	st	X+, r0
    c60a:	41 50       	subi	r20, 0x01	; 1
    c60c:	50 40       	sbci	r21, 0x00	; 0
    c60e:	d8 f7       	brcc	.-10     	; 0xc606 <memcpy_P+0x6>
    c610:	08 95       	ret

0000c612 <_exit>:
    c612:	f8 94       	cli

0000c614 <__stop_program>:
    c614:	ff cf       	rjmp	.-2      	; 0xc614 <__stop_program>
