
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000045a  00800100  0000a23a  0000a33a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a23a  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000aa4  0080055a  0080055a  0000a79a  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000a794  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000adac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b051  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004e8  00000000  00000000  0000b068  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006eeb  00000000  00000000  0000b550  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001507  00000000  00000000  0001243b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019a6  00000000  00000000  00013942  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001004  00000000  00000000  000152e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016f5  00000000  00000000  000162ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000061ae  00000000  00000000  000179e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000540  00000000  00000000  0001db90  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__ctors_end>
       4:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
       8:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
       c:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      10:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      14:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      18:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      1c:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      20:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      24:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      28:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      2c:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      30:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      34:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__vector_13>
      38:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__vector_14>
      3c:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      40:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      44:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      48:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      4c:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      50:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      54:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      58:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      5c:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      60:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      64:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      68:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      6c:	0c 94 be 2c 	jmp	0x597c	; 0x597c <__bad_interrupt>
      70:	af 4a       	sbci	r26, 0xAF	; 175
      72:	b2 4a       	sbci	r27, 0xA2	; 162
      74:	b7 4a       	sbci	r27, 0xA7	; 167
      76:	ba 4a       	sbci	r27, 0xAA	; 170
      78:	bd 4a       	sbci	r27, 0xAD	; 173
      7a:	c0 4a       	sbci	r28, 0xA0	; 160
      7c:	c3 4a       	sbci	r28, 0xA3	; 163
      7e:	c6 4a       	sbci	r28, 0xA6	; 166
      80:	c9 4a       	sbci	r28, 0xA9	; 169

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	19 32 1c 32 77 32 7b 32 83 32 24 32 29 32 2e 32     .2.2w2{2.2$2)2.2
      e0:	8b 32 31 32 34 32 37 32 74 32                       .2124272t2

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <strPaused>:
     93d:	50 61 75 73 65 64 00                                Paused.

00000944 <strExit>:
     944:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

0000094d <strTotal>:
     94d:	54 6f 74 61 6c 3a 00                                Total:.

00000954 <strScore>:
     954:	53 63 6f 72 65 3a 00                                Score:.

0000095b <strBanterClear>:
     95b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

0000096a <strB10>:
     96a:	52 54 46 4d 21 00                                   RTFM!.

00000970 <strB9>:
     970:	4e 65 65 64 20 68 65 6c 70 3f 00                    Need help?.

0000097b <strB8>:
     97b:	54 68 61 74 27 73 20 69 74 3f 00                    That's it?.

00000986 <strB7>:
     986:	41 20 74 75 72 6b 65 79 20 73 68 6f 6f 74 00        A turkey shoot.

00000995 <strB6>:
     995:	2a 59 41 57 4e 2a 00                                *YAWN*.

0000099c <strB5>:
     99c:	54 6f 6f 20 65 61 73 79 00                          Too easy.

000009a5 <strB4>:
     9a5:	41 74 20 6c 65 61 73 74 20 74 72 79 00              At least try.

000009b2 <strB3>:
     9b2:	42 72 6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00        Broken button?.

000009c1 <strB2>:
     9c1:	4c 4f 4c 00                                         LOL.

000009c5 <strB1>:
     9c5:	59 6f 75 20 73 75 63 6b 20 62 72 6f 00              You suck bro.

000009d2 <strBy>:
     9d2:	42 79 00                                            By.

000009d5 <strOwns>:
     9d5:	50 77 6e 73 00                                      Pwns.

000009da <strChangeHandle>:
     9da:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

000009e9 <strCancelHandle>:
     9e9:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

000009f4 <strConfirmHandle>:
     9f4:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

00000a00 <strSelectHandle>:
     a00:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

00000a0b <strPlayer2>:
     a0b:	50 32 00                                            P2.

00000a0e <strPlayer1>:
     a0e:	50 31 00                                            P1.

00000a11 <strVertSep>:
     a11:	7c 00                                               |.

00000a13 <strUnderline>:
     a13:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000a1f <strHandlesTitle>:
     a1f:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

00000a2b <strHighscores>:
     a2b:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

00000a35 <str2Player>:
     a35:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

00000a46 <str1Player>:
     a46:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

00000a54 <strCopyright>:
     a54:	32 30 31 34 20 2d 20 4c 61 77 72 65 6e 63 65 20     2014 - Lawrence 
     a64:	42 72 6f 6f 6b 73 00                                Brooks.

00000a6b <level_data>:
     a6b:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a7b:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a8b:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a9b:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 02 02     ................
     aab:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     abb:	00 00 00 00 00 04 02 02 01 01 01 01 02 03 00 00     ................
	...
     adf:	04 02 01 01 01 01 03 00 00 00 00 00 00 00 00 00     ................
	...
     afb:	00 00 00 04 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     b1b:	00 00 01 01 01 01 00 00 00 00 02 00 00 00 00 00     ................
	...
     b33:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
     b43:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b53:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
     b6f:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
     b7f:	02 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00     ................
     b8f:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
     bab:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
     bbb:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     bcb:	00 02 00 00 00 00 01 01 01 01 00 58 00 00 02 00     ...........X....
	...
     be7:	00 00 00 02 00 63 00 00 01 01 01 01 00 00 00 00     .....c..........
     bf7:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     c07:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
     c23:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
     c33:	02 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00     ................
     c43:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
     c5f:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
     c6f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     c7f:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
     c9b:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
	...
     cbf:	00 00 01 01 01 01 05 00 00 00 00 00 00 00 00 00     ................
	...
     cdb:	00 00 00 06 01 01 01 01 02 05 00 00 00 00 00 00     ................
	...
     cfb:	06 02 01 01 01 01 02 02 05 00 00 00 00 00 00 00     ................
	...
     d17:	00 06 02 02 01 01 01 01 01 01 01 01 01 01 01 01     ................
     d27:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     d37:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     d47:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     d57:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000027b7 <map_rocket_right_1>:
    27b7:	01 01 26                                            ..&

000027ba <map_rocket_right_0>:
    27ba:	01 01 25                                            ..%

000027bd <map_rocket_up_1>:
    27bd:	01 01 24                                            ..$

000027c0 <map_rocket_up_0>:
    27c0:	01 01 23                                            ..#

000027c3 <map_ball>:
    27c3:	01 01 22                                            .."

000027c6 <map_explosion_2>:
    27c6:	02 02 0c 0d 0d 0c                                   ......

000027cc <map_explosion_1>:
    27cc:	02 02 0a 0b 18 19                                   ......

000027d2 <map_explosion_0>:
    27d2:	02 02 08 09 16 17                                   ......

000027d8 <map_tank2_right_1>:
    27d8:	02 02 20 21 2e 2f                                   .. !./

000027de <map_tank2_right_0>:
    27de:	02 02 1e 1f 2c 2d                                   ....,-

000027e4 <map_tank2_up_1>:
    27e4:	02 02 1c 1d 2a 2b                                   ....*+

000027ea <map_tank2_up_0>:
    27ea:	02 02 1a 1b 28 29                                   ....()

000027f0 <map_tank1_right_1>:
    27f0:	02 02 06 07 14 15                                   ......

000027f6 <map_tank1_right_0>:
    27f6:	02 02 04 05 12 13                                   ......

000027fc <map_tank1_up_1>:
    27fc:	02 02 02 03 10 11                                   ......

00002802 <map_tank1_up_0>:
    2802:	02 02 00 01 0e 0f                                   ......

00002808 <map_none>:
    2808:	01 01 27                                            ..'

0000280b <map_tank_blank>:
    280b:	02 02 27 27 27 27                                   ..''''

00002811 <map_metal_bl>:
    2811:	01 01 0c                                            ...

00002814 <map_metal_tr>:
    2814:	01 01 0b                                            ...

00002817 <map_metal_br>:
    2817:	01 01 0a                                            ...

0000281a <map_metal_tl>:
    281a:	01 01 09                                            ...

0000281d <map_tile_exp_2>:
    281d:	01 01 08                                            ...

00002820 <map_tile_exp_1>:
    2820:	01 01 07                                            ...

00002823 <map_tile_exp_0>:
    2823:	01 01 06                                            ...

00002826 <map_rocket_itm>:
    2826:	01 01 04                                            ...

00002829 <map_explode_itm>:
    2829:	01 01 03                                            ...

0000282c <map_speed_itm>:
    282c:	01 01 02                                            ...

0000282f <map_metal>:
    282f:	01 01 05                                            ...

00002832 <map_brick>:
    2832:	01 01 01                                            ...

00002835 <map_pause>:
    2835:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2845:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2855:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    2865:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00002873 <map_splash>:
    2873:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    2883:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    2893:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    28a3:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    28b3:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    28c3:	2a 00 00 2c 2d 2e                                   *..,-.

000028c9 <sprites_data>:
    28c9:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    28d9:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    28e9:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    28f9:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    2909:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2919:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    2929:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    2939:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    2949:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    2959:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    2969:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    2979:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    2989:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2999:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    29a9:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    29b9:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    29c9:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    29d9:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    29e9:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    29f9:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2a09:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2a19:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    2a29:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2a39:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2a49:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    2a59:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    2a69:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2a79:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2a89:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    2a99:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    2aa9:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2ab9:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2ac9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ad9:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    2ae9:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    2af9:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2b09:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b19:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2b29:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2b39:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2b49:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2b59:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    2b69:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    2b79:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2b89:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2b99:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    2ba9:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    2bb9:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2bc9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bd9:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2be9:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2bf9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c09:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c19:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2c29:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2c39:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c49:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    2c59:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    2c69:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    2c79:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    2c89:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    2c99:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    2ca9:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2cb9:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2cc9:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    2cd9:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    2ce9:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    2cf9:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    2d09:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    2d19:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    2d29:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    2d39:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    2d49:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2d59:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2d69:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2d79:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2d89:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2d99:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2da9:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2db9:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2dc9:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2dd9:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2de9:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    2df9:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    2e09:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2e19:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2e29:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    2e39:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    2e49:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2e59:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2e69:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2e79:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e89:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2e99:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2ea9:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2eb9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ec9:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2ed9:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2ee9:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2ef9:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2f09:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2f19:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2f29:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2f39:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2f49:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2f59:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    2f69:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    2f79:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2f89:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    2f99:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    2fa9:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    2fb9:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2fc9:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2fd9:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    2fe9:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    2ff9:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3009:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3019:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    3029:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3039:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3049:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3059:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3069:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3079:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3089:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3099:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    30a9:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    30b9:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    30c9:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    30d9:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    30e9:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    30f9:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3109:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3119:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3129:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3139:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3149:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3159:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    3169:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    3179:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3189:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3199:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    31a9:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    31b9:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    31c9:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    31d9:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    31e9:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    31f9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3209:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3219:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    3229:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    3239:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3249:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3259:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    3269:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    3279:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3289:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3299:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32a9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32b9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32c9:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    32d9:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    32e9:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    32f9:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    3309:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3319:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    3329:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    3339:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    3349:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3359:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    3369:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    3379:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    3389:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3399:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    33a9:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    33b9:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    33c9:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    33d9:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    33e9:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    33f9:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3409:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3419:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3429:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3439:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3449:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3459:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3469:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    3479:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3489:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3499:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    34a9:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    34b9:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

000034c9 <tiles_data>:
	...
    3509:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    3519:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    3529:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    3539:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    3549:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    3559:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    3569:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    3579:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    3589:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    3599:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    35a9:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    35b9:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    35c9:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    35d9:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    35e9:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    35f9:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    3609:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    3619:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    3629:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    3639:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    3651:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    3661:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3671:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    3689:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    3699:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    36a9:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    36b9:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    36d1:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    36f1:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    3709:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    3719:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    3729:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    3739:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    3749:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    3759:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    3769:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    3779:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3789:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    3799:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    37a9:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    37b9:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    37c9:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    37d9:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    37e9:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    37f9:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    3809:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3819:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3829:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3839:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    3849:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3859:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3869:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3879:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    3889:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3899:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    38a9:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    38b9:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    38c9:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    38d9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    38e9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    38f9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3909:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3919:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3929:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3939:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    3949:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3959:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3969:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3979:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3989:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    3999:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    39a9:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    39b9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    39e9:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    39f9:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    3a29:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3a39:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3a49:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    3a59:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3a69:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3a79:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3a89:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    3a99:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3aa9:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3ab9:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    3ac9:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    3ad9:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3ae9:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3af9:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b09:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3b19:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3b29:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3b39:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3b49:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3b59:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3b69:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3b79:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3b89:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b99:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3ba9:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3bb9:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3bc9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3bd9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3be9:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3bf9:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3c09:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3c19:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    3c49:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3c59:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c69:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c79:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c89:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    3c99:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3ca9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3cb9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3cc9:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    3cd9:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3ce9:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3cf9:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3d09:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3d19:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3d29:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3d39:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    3d71:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    3d81:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    3d91:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3da1:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3db1:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3dc1:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    3dd1:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3de1:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3df1:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3e01:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    3e11:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e21:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e31:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e41:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    3e51:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3e61:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3e71:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3e81:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3e91:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3ea1:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3eb1:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3ec1:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    3ed1:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3ee1:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    3f09:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3f19:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3f29:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3f39:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    3f49:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3f59:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3f69:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3f79:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    3f89:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3f99:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3fa9:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3fb9:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    3fc9:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3fd9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3fe9:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3ff9:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    4011:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4021:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4031:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4041:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4051:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4061:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4071:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4081:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    40d1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    40e1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    40f9:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4111:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4121:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4151:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    4161:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4171:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    4189:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    4199:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    41a9:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    41b9:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    41d1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    41e1:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    41f1:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    4209:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    4219:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    4229:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    4239:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    4251:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4261:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4295:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    42a5:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    42b5:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    42d1:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    42e1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    42f1:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    4311:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    4321:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    4331:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4351:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4361:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4371:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    43b1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    43c1:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    43e1:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4431:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4455:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    4465:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    4475:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    4491:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    44a1:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    44b1:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    44d1:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    44e1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    44f1:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4511:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4521:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4531:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4551:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    4561:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    4571:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4595:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    45a5:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    45b5:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    45d1:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    45e1:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    45f1:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4611:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4621:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4631:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4651:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    4661:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4671:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    4691:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    46a1:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    46b1:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    46d1:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    46e1:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    46f1:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    4719:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4731:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4759:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4771:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4781:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    4791:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    47a1:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    47b1:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    47d9:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    47f1:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4809:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    4819:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    4829:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4839:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4851:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4861:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4879:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4891:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    48a1:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    48b1:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    48d1:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    48e1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48f1:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4911:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4921:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4931:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    4951:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4961:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4971:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4991:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    49a1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    49b1:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    49d1:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    49e1:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    49f1:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4a11:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4a21:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4a31:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4a51:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4a61:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    4a71:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    4a91:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4aa1:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4ab1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4ad1:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4ae1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4af1:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4b15:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4b25:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    4b35:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    4b51:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    4b61:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    4b71:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4b91:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4ba1:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4bb1:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4bd1:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    4be1:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    4bf1:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4c11:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    4c21:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    4c31:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4c51:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4c61:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4c71:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4c91:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4ca1:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4cb1:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4cd1:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4ce1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4cf1:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    4d11:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d21:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4d31:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4d51:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4d61:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    4d71:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4d91:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4da1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4db1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4dd1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4de1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4df1:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    4e11:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4e21:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4e31:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4e51:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    4e61:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    4e71:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4e91:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4ea1:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    4eb1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4ed1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4ee1:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4ef1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4f11:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    4f21:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4f31:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4f51:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4f61:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4f71:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    4f91:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4fa1:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    4fb1:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    4fd1:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4fe1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4ff1:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5015:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    5025:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    5079:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    5091:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    50a1:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    50b1:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    50d9:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    50e9:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    50f9:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5111:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5121:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5131:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5159:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5169:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5179:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5195:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    51a5:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    51b5:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    51d9:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    51e9:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    51f9:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5215:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    5225:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5235:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    5259:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5269:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    5279:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5291:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    52a1:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    52b1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    52d1:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    52e1:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    52f1:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5315:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5325:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5335:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    5345:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    5355:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    5365:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    5375:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    5391:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    53a1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    53b1:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    53d9:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    53e9:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    53f9:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    5419:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5429:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5439:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5459:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5469:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5479:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5499:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    54a9:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    54b9:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    54d9:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    54e9:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    54f9:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    5519:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5529:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5539:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5559:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5569:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5579:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5591:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    55a1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    55b1:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    55d9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    55e9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    55f9:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5619:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5629:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    5639:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5659:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    5669:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    5679:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5699:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    56a9:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    56b9:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    56d9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    56e9:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    56f9:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5719:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5729:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5739:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5751:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5761:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5771:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5789:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5799:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    57a9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    57b9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    57d1:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    57e1:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    57f1:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    580d:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    581d:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    582d:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    583d:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    584d:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    585d:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    586d:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

0000588a <__ctors_end>:
    588a:	11 24       	eor	r1, r1
    588c:	1f be       	out	0x3f, r1	; 63
    588e:	cf ef       	ldi	r28, 0xFF	; 255
    5890:	d0 e1       	ldi	r29, 0x10	; 16
    5892:	de bf       	out	0x3e, r29	; 62
    5894:	cd bf       	out	0x3d, r28	; 61

00005896 <__do_copy_data>:
    5896:	15 e0       	ldi	r17, 0x05	; 5
    5898:	a0 e0       	ldi	r26, 0x00	; 0
    589a:	b1 e0       	ldi	r27, 0x01	; 1
    589c:	ea e3       	ldi	r30, 0x3A	; 58
    589e:	f2 ea       	ldi	r31, 0xA2	; 162
    58a0:	02 c0       	rjmp	.+4      	; 0x58a6 <__do_copy_data+0x10>
    58a2:	05 90       	lpm	r0, Z+
    58a4:	0d 92       	st	X+, r0
    58a6:	aa 35       	cpi	r26, 0x5A	; 90
    58a8:	b1 07       	cpc	r27, r17
    58aa:	d9 f7       	brne	.-10     	; 0x58a2 <__do_copy_data+0xc>

000058ac <__do_clear_bss>:
    58ac:	1f e0       	ldi	r17, 0x0F	; 15
    58ae:	aa e5       	ldi	r26, 0x5A	; 90
    58b0:	b5 e0       	ldi	r27, 0x05	; 5
    58b2:	01 c0       	rjmp	.+2      	; 0x58b6 <.do_clear_bss_start>

000058b4 <.do_clear_bss_loop>:
    58b4:	1d 92       	st	X+, r1

000058b6 <.do_clear_bss_start>:
    58b6:	ae 3f       	cpi	r26, 0xFE	; 254
    58b8:	b1 07       	cpc	r27, r17
    58ba:	e1 f7       	brne	.-8      	; 0x58b4 <.do_clear_bss_loop>

000058bc <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    58bc:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    58be:	88 e1       	ldi	r24, 0x18	; 24
    58c0:	0f b6       	in	r0, 0x3f	; 63
    58c2:	f8 94       	cli
    58c4:	80 93 60 00 	sts	0x0060, r24
    58c8:	10 92 60 00 	sts	0x0060, r1
    58cc:	0f be       	out	0x3f, r0	; 63

000058ce <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    58ce:	0e 94 4c 31 	call	0x6298	; 0x6298 <isEepromFormatted>
    58d2:	81 11       	cpse	r24, r1
    58d4:	02 c0       	rjmp	.+4      	; 0x58da <Initialize+0xc>
    58d6:	0e 94 2a 31 	call	0x6254	; 0x6254 <FormatEeprom>

	cli();
    58da:	f8 94       	cli
    58dc:	e1 e4       	ldi	r30, 0x41	; 65
    58de:	fd e0       	ldi	r31, 0x0D	; 13
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
			mix_buf[j]=0x80;//(i<128?i:128);
    58e0:	80 e8       	ldi	r24, 0x80	; 128
    58e2:	81 93       	st	Z+, r24

	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
    58e4:	2f e0       	ldi	r18, 0x0F	; 15
    58e6:	ed 34       	cpi	r30, 0x4D	; 77
    58e8:	f2 07       	cpc	r31, r18
    58ea:	d9 f7       	brne	.-10     	; 0x58e2 <Initialize+0x14>
			mix_buf[j]=0x80;//(i<128?i:128);
		}	
	
		mix_pos=mix_buf;
    58ec:	81 e4       	ldi	r24, 0x41	; 65
    58ee:	9d e0       	ldi	r25, 0x0D	; 13
    58f0:	90 93 4e 0f 	sts	0x0F4E, r25
    58f4:	80 93 4d 0f 	sts	0x0F4D, r24
		mix_bank=0;
    58f8:	10 92 4f 0f 	sts	0x0F4F, r1
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	80 93 66 0f 	sts	0x0F66, r24
		tr4_barrel_hi=1;		
    5902:	80 93 67 0f 	sts	0x0F67, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    5906:	80 93 65 0f 	sts	0x0F65, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    590a:	10 92 52 0f 	sts	0x0F52, r1
    590e:	10 92 58 0f 	sts	0x0F58, r1
    5912:	10 92 5e 0f 	sts	0x0F5E, r1
    5916:	10 92 64 0f 	sts	0x0F64, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    591a:	10 92 16 0d 	sts	0x0D16, r1
	sync_flags=0;
    591e:	10 92 18 0d 	sts	0x0D18, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    5922:	92 e1       	ldi	r25, 0x12	; 18
    5924:	90 93 17 0d 	sts	0x0D17, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    5928:	90 ee       	ldi	r25, 0xE0	; 224
    592a:	90 93 20 0d 	sts	0x0D20, r25
	render_lines_count=FRAME_LINES;
    592e:	90 93 1e 0d 	sts	0x0D1E, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    5932:	94 e1       	ldi	r25, 0x14	; 20
    5934:	90 93 1f 0d 	sts	0x0D1F, r25
	first_render_line=FIRST_RENDER_LINE;
    5938:	90 93 1d 0d 	sts	0x0D1D, r25

	joypad1_status_hi=0;
    593c:	10 92 24 0d 	sts	0x0D24, r1
    5940:	10 92 23 0d 	sts	0x0D23, r1
	joypad2_status_hi=0;
    5944:	10 92 28 0d 	sts	0x0D28, r1
    5948:	10 92 27 0d 	sts	0x0D27, r1
	sound_enabled=1;
    594c:	80 93 51 0f 	sts	0x0F51, r24

	InitializeVideoMode();
    5950:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <InitializeVideoMode>
    5954:	82 e8       	ldi	r24, 0x82	; 130
    5956:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    5958:	fc 01       	movw	r30, r24
    595a:	25 91       	lpm	r18, Z+
    595c:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    595e:	f9 01       	movw	r30, r18
    5960:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    5962:	30 83       	st	Z, r19
    5964:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    5966:	20 e0       	ldi	r18, 0x00	; 0
    5968:	80 3b       	cpi	r24, 0xB0	; 176
    596a:	92 07       	cpc	r25, r18
    596c:	a9 f7       	brne	.-22     	; 0x5958 <Initialize+0x8a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    596e:	78 94       	sei
	
	DisplayLogo();
    5970:	0e 94 9b 3e 	call	0x7d36	; 0x7d36 <DisplayLogo>
    5974:	0e 94 80 4e 	call	0x9d00	; 0x9d00 <main>
    5978:	0c 94 1b 51 	jmp	0xa236	; 0xa236 <_exit>

0000597c <__bad_interrupt>:
    597c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00005980 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    5980:	0c e0       	ldi	r16, 0x0C	; 12
    5982:	0a 95       	dec	r16
    5984:	f1 f7       	brne	.-4      	; 0x5982 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    5986:	e8 ed       	ldi	r30, 0xD8	; 216
		ldi ZH,hi8(ram_tiles_restore);
    5988:	fc e0       	ldi	r31, 0x0C	; 12

		ldi YL,lo8(vram)
    598a:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    598c:	d5 e0       	ldi	r29, 0x05	; 5

		lds r18,free_tile_index
    598e:	20 91 ec 0f 	lds	r18, 0x0FEC


		clr r16
    5992:	00 27       	eor	r16, r16

00005994 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    5994:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    5996:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    5998:	ac 0f       	add	r26, r28
		adc XH,YH
    599a:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    599c:	1c 91       	ld	r17, X
		std Z+2,r17
    599e:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    59a0:	02 17       	cp	r16, r18
		brsh noov
    59a2:	08 f4       	brcc	.+2      	; 0x59a6 <noov>
		mov r17,r16
    59a4:	10 2f       	mov	r17, r16

000059a6 <noov>:
	noov:
		st X,r17
    59a6:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    59a8:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    59aa:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    59ac:	00 31       	cpi	r16, 0x10	; 16
		brlo upd_loop ;23
    59ae:	90 f3       	brcs	.-28     	; 0x5994 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    59b0:	0d e2       	ldi	r16, 0x2D	; 45

000059b2 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    59b2:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    59b4:	1a 95       	dec	r17
		brne .-4
    59b6:	f1 f7       	brne	.-4      	; 0x59b4 <wait_loop+0x2>

		dec r16
    59b8:	0a 95       	dec	r16
		brne wait_loop
    59ba:	d9 f7       	brne	.-10     	; 0x59b2 <wait_loop>

		lds r2,overlay_tile_table
    59bc:	20 90 14 0d 	lds	r2, 0x0D14
		lds r3,overlay_tile_table+1
    59c0:	30 90 15 0d 	lds	r3, 0x0D15
		lds r16,tile_table_lo 
    59c4:	00 91 10 0d 	lds	r16, 0x0D10
		lds r17,tile_table_hi
    59c8:	10 91 11 0d 	lds	r17, 0x0D11
		movw r12,r16
    59cc:	68 01       	movw	r12, r16
		movw r6,r16
    59ce:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    59d0:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    59d2:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    59d4:	d5 e0       	ldi	r29, 0x05	; 5
		movw r8,YL	
    59d6:	4e 01       	movw	r8, r28
		clr r0
    59d8:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    59da:	30 91 13 0d 	lds	r19, 0x0D13
		cpi r19,0
    59de:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    59e0:	09 f0       	breq	.+2      	; 0x59e4 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    59e2:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    59e4:	09 f0       	breq	.+2      	; 0x59e8 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    59e6:	d8 e0       	ldi	r29, 0x08	; 8
		
		breq .+2
    59e8:	09 f0       	breq	.+2      	; 0x59ec <wait_loop+0x3a>
		mov r24,r19
    59ea:	83 2f       	mov	r24, r19

		breq .+2
    59ec:	09 f0       	breq	.+2      	; 0x59f0 <wait_loop+0x3e>
		movw r12,r2
    59ee:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    59f0:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    59f2:	a0 2e       	mov	r10, r16
		clr r22
    59f4:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    59f6:	78 e0       	ldi	r23, 0x08	; 8

000059f8 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    59f8:	7e d2       	rcall	.+1276   	; 0x5ef6 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    59fa:	36 e2       	ldi	r19, 0x26	; 38
    59fc:	3a 95       	dec	r19
    59fe:	f1 f7       	brne	.-4      	; 0x59fc <next_tile_line+0x4>
    5a00:	00 00       	nop

		;***draw line***
		call render_tile_line
    5a02:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    5a06:	3f e0       	ldi	r19, 0x0F	; 15
    5a08:	3a 95       	dec	r19
    5a0a:	f1 f7       	brne	.-4      	; 0x5a08 <next_tile_line+0x10>
    5a0c:	00 00       	nop
    5a0e:	00 00       	nop

		dec r10
    5a10:	aa 94       	dec	r10
		breq frame_end
    5a12:	a9 f0       	breq	.+42     	; 0x5a3e <frame_end>
	
		inc r22
    5a14:	63 95       	inc	r22
		lpm ;3 nop
    5a16:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    5a18:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    5a1a:	31 f0       	breq	.+12     	; 0x5a28 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    5a1c:	33 e0       	ldi	r19, 0x03	; 3
    5a1e:	3a 95       	dec	r19
    5a20:	f1 f7       	brne	.-4      	; 0x5a1e <next_tile_line+0x26>
    5a22:	00 00       	nop
    5a24:	00 00       	nop
		
		rjmp next_tile_line	
    5a26:	e8 cf       	rjmp	.-48     	; 0x59f8 <next_tile_line>

00005a28 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    5a28:	66 27       	eor	r22, r22

		clr r0
    5a2a:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    5a2c:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    5a2e:	c3 0f       	add	r28, r19
		adc YH,r0
    5a30:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    5a32:	8a 95       	dec	r24
		brne .+2
    5a34:	09 f4       	brne	.+2      	; 0x5a38 <next_tile_row+0x10>
		movw YL,r8	;main vram
    5a36:	e4 01       	movw	r28, r8
		brne .+2
    5a38:	09 f4       	brne	.+2      	; 0x5a3c <next_tile_row+0x14>
		movw r12,r6	;main tile table
    5a3a:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    5a3c:	dd cf       	rjmp	.-70     	; 0x59f8 <next_tile_line>

00005a3e <frame_end>:

	frame_end:

		WAIT r19,18
    5a3e:	36 e0       	ldi	r19, 0x06	; 6
    5a40:	3a 95       	dec	r19
    5a42:	f1 f7       	brne	.-4      	; 0x5a40 <frame_end+0x2>

		rcall hsync_pulse ;145
    5a44:	58 d2       	rcall	.+1200   	; 0x5ef6 <hsync_pulse>
	
		clr r1
    5a46:	11 24       	eor	r1, r1
		call RestoreBackground
    5a48:	0e 94 80 3c 	call	0x7900	; 0x7900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    5a4c:	e0 91 18 0d 	lds	r30, 0x0D18
		ldi r20,SYNC_FLAG_FIELD
    5a50:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    5a52:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    5a54:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    5a56:	e0 93 18 0d 	sts	0x0D18, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    5a5a:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    5a5c:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    5a60:	11 24       	eor	r1, r1


		ret
    5a62:	08 95       	ret

00005a64 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    5a64:	de 01       	movw	r26, r28

		mul r22,r23
    5a66:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    5a68:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5a6a:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5a6c:	14 40       	sbci	r17, 0x04	; 4

		add r16,r0
    5a6e:	00 0d       	add	r16, r0
		adc r17,r1
    5a70:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    5a72:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    5a74:	08 ed       	ldi	r16, 0xD8	; 216
		ldi r17,hi8(ram_tiles)
    5a76:	18 e0       	ldi	r17, 0x08	; 8
		add r16,r0
    5a78:	00 0d       	add	r16, r0
		adc r17,r1
    5a7a:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    5a7c:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    5a7e:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    5a80:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    5a82:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    5a84:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    5a86:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    5a88:	20 31       	cpi	r18, 0x10	; 16
		brcc .+2
    5a8a:	08 f4       	brcc	.+2      	; 0x5a8e <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    5a8c:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    5a8e:	04 0e       	add	r0, r20
	    adc r1,r21
    5a90:	15 1e       	adc	r1, r21

		movw ZL,r0
    5a92:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    5a94:	20 31       	cpi	r18, 0x10	; 16
		brcs ramloop
    5a96:	f0 f0       	brcs	.+60     	; 0x5ad4 <ramloop>

00005a98 <romloop>:
	

	romloop:
	    lpm r16,Z+
    5a98:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5a9a:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    5a9c:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    5a9e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    5aa0:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5aa2:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    5aa4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    5aa6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    5aa8:	20 31       	cpi	r18, 0x10	; 16
		nop
    5aaa:	00 00       	nop

	    lpm r16,Z+
    5aac:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5aae:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    5ab0:	08 f4       	brcc	.+2      	; 0x5ab4 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    5ab2:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    5ab4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    5ab6:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    5ab8:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    5aba:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    5abc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    5abe:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    5ac0:	20 31       	cpi	r18, 0x10	; 16
		dec r17			;decrement tiles to draw on line
    5ac2:	1a 95       	dec	r17
   
	    lpm r16,Z+
    5ac4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    5ac6:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    5ac8:	05 91       	lpm	r16, Z+

		breq end	
    5aca:	31 f1       	breq	.+76     	; 0x5b18 <end>
	    movw ZL,r0   	;copy next tile adress
    5acc:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5ace:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    5ad0:	18 f7       	brcc	.-58     	; 0x5a98 <romloop>
	
		rjmp .
    5ad2:	00 c0       	rjmp	.+0      	; 0x5ad4 <ramloop>

00005ad4 <ramloop>:

	ramloop:

	    ld r16,Z+
    5ad4:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5ad6:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    5ad8:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    5ada:	01 91       	ld	r16, Z+
		nop   
    5adc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    5ade:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5ae0:	23 9f       	mul	r18, r19


	    ld r16,Z+
    5ae2:	01 91       	ld	r16, Z+
		nop
    5ae4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    5ae6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    5ae8:	20 31       	cpi	r18, 0x10	; 16
   		rjmp .
    5aea:	00 c0       	rjmp	.+0      	; 0x5aec <ramloop+0x18>

	    ld r16,Z+
    5aec:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5aee:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    5af0:	08 f0       	brcs	.+2      	; 0x5af4 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    5af2:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    5af4:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    5af6:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    5af8:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    5afa:	15 1e       	adc	r1, r21
		rjmp .
    5afc:	00 c0       	rjmp	.+0      	; 0x5afe <ramloop+0x2a>
    
		ld r16,Z+		
    5afe:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    5b00:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    5b02:	20 31       	cpi	r18, 0x10	; 16
		rjmp .  
    5b04:	00 c0       	rjmp	.+0      	; 0x5b06 <ramloop+0x32>

	    ld r16,Z+	
    5b06:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    5b08:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    5b0a:	01 91       	ld	r16, Z+

	    dec r17
    5b0c:	1a 95       	dec	r17
	    breq end
    5b0e:	21 f0       	breq	.+8      	; 0x5b18 <end>
	
		movw ZL,r0
    5b10:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5b12:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    5b14:	08 f6       	brcc	.-126    	; 0x5a98 <romloop>
		rjmp ramloop
    5b16:	de cf       	rjmp	.-68     	; 0x5ad4 <ramloop>

00005b18 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    5b18:	08 b9       	out	0x08, r16	; 8
		clr r16	
    5b1a:	00 27       	eor	r16, r16
		lpm	
    5b1c:	c8 95       	lpm
		nop
    5b1e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    5b20:	08 b9       	out	0x08, r16	; 8

		ret
    5b22:	08 95       	ret

00005b24 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    5b24:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    5b26:	e0 91 10 0d 	lds	r30, 0x0D10
	lds ZH,tile_table_hi
    5b2a:	f0 91 11 0d 	lds	r31, 0x0D11
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    5b2e:	80 51       	subi	r24, 0x10	; 16
	mul r24,r18
    5b30:	82 9f       	mul	r24, r18
	add ZL,r0
    5b32:	e0 0d       	add	r30, r0
	adc ZH,r1
    5b34:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    5b36:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    5b38:	b8 e0       	ldi	r27, 0x08	; 8
	mul r22,r18
    5b3a:	62 9f       	mul	r22, r18
	add XL,r0
    5b3c:	a0 0d       	add	r26, r0
	adc XH,r1
    5b3e:	b1 1d       	adc	r27, r1

	clr r0
    5b40:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    5b42:	05 90       	lpm	r0, Z+
    5b44:	0d 92       	st	X+, r0
    5b46:	05 90       	lpm	r0, Z+
    5b48:	0d 92       	st	X+, r0
    5b4a:	05 90       	lpm	r0, Z+
    5b4c:	0d 92       	st	X+, r0
    5b4e:	05 90       	lpm	r0, Z+
    5b50:	0d 92       	st	X+, r0
    5b52:	05 90       	lpm	r0, Z+
    5b54:	0d 92       	st	X+, r0
    5b56:	05 90       	lpm	r0, Z+
    5b58:	0d 92       	st	X+, r0
    5b5a:	05 90       	lpm	r0, Z+
    5b5c:	0d 92       	st	X+, r0
    5b5e:	05 90       	lpm	r0, Z+
    5b60:	0d 92       	st	X+, r0
    5b62:	05 90       	lpm	r0, Z+
    5b64:	0d 92       	st	X+, r0
    5b66:	05 90       	lpm	r0, Z+
    5b68:	0d 92       	st	X+, r0
    5b6a:	05 90       	lpm	r0, Z+
    5b6c:	0d 92       	st	X+, r0
    5b6e:	05 90       	lpm	r0, Z+
    5b70:	0d 92       	st	X+, r0
    5b72:	05 90       	lpm	r0, Z+
    5b74:	0d 92       	st	X+, r0
    5b76:	05 90       	lpm	r0, Z+
    5b78:	0d 92       	st	X+, r0
    5b7a:	05 90       	lpm	r0, Z+
    5b7c:	0d 92       	st	X+, r0
    5b7e:	05 90       	lpm	r0, Z+
    5b80:	0d 92       	st	X+, r0
    5b82:	05 90       	lpm	r0, Z+
    5b84:	0d 92       	st	X+, r0
    5b86:	05 90       	lpm	r0, Z+
    5b88:	0d 92       	st	X+, r0
    5b8a:	05 90       	lpm	r0, Z+
    5b8c:	0d 92       	st	X+, r0
    5b8e:	05 90       	lpm	r0, Z+
    5b90:	0d 92       	st	X+, r0
    5b92:	05 90       	lpm	r0, Z+
    5b94:	0d 92       	st	X+, r0
    5b96:	05 90       	lpm	r0, Z+
    5b98:	0d 92       	st	X+, r0
    5b9a:	05 90       	lpm	r0, Z+
    5b9c:	0d 92       	st	X+, r0
    5b9e:	05 90       	lpm	r0, Z+
    5ba0:	0d 92       	st	X+, r0
    5ba2:	05 90       	lpm	r0, Z+
    5ba4:	0d 92       	st	X+, r0
    5ba6:	05 90       	lpm	r0, Z+
    5ba8:	0d 92       	st	X+, r0
    5baa:	05 90       	lpm	r0, Z+
    5bac:	0d 92       	st	X+, r0
    5bae:	05 90       	lpm	r0, Z+
    5bb0:	0d 92       	st	X+, r0
    5bb2:	05 90       	lpm	r0, Z+
    5bb4:	0d 92       	st	X+, r0
    5bb6:	05 90       	lpm	r0, Z+
    5bb8:	0d 92       	st	X+, r0
    5bba:	05 90       	lpm	r0, Z+
    5bbc:	0d 92       	st	X+, r0
    5bbe:	05 90       	lpm	r0, Z+
    5bc0:	0d 92       	st	X+, r0
    5bc2:	05 90       	lpm	r0, Z+
    5bc4:	0d 92       	st	X+, r0
    5bc6:	05 90       	lpm	r0, Z+
    5bc8:	0d 92       	st	X+, r0
    5bca:	05 90       	lpm	r0, Z+
    5bcc:	0d 92       	st	X+, r0
    5bce:	05 90       	lpm	r0, Z+
    5bd0:	0d 92       	st	X+, r0
    5bd2:	05 90       	lpm	r0, Z+
    5bd4:	0d 92       	st	X+, r0
    5bd6:	05 90       	lpm	r0, Z+
    5bd8:	0d 92       	st	X+, r0
    5bda:	05 90       	lpm	r0, Z+
    5bdc:	0d 92       	st	X+, r0
    5bde:	05 90       	lpm	r0, Z+
    5be0:	0d 92       	st	X+, r0
    5be2:	05 90       	lpm	r0, Z+
    5be4:	0d 92       	st	X+, r0
    5be6:	05 90       	lpm	r0, Z+
    5be8:	0d 92       	st	X+, r0
    5bea:	05 90       	lpm	r0, Z+
    5bec:	0d 92       	st	X+, r0
    5bee:	05 90       	lpm	r0, Z+
    5bf0:	0d 92       	st	X+, r0
    5bf2:	05 90       	lpm	r0, Z+
    5bf4:	0d 92       	st	X+, r0
    5bf6:	05 90       	lpm	r0, Z+
    5bf8:	0d 92       	st	X+, r0
    5bfa:	05 90       	lpm	r0, Z+
    5bfc:	0d 92       	st	X+, r0
    5bfe:	05 90       	lpm	r0, Z+
    5c00:	0d 92       	st	X+, r0
    5c02:	05 90       	lpm	r0, Z+
    5c04:	0d 92       	st	X+, r0
    5c06:	05 90       	lpm	r0, Z+
    5c08:	0d 92       	st	X+, r0
    5c0a:	05 90       	lpm	r0, Z+
    5c0c:	0d 92       	st	X+, r0
    5c0e:	05 90       	lpm	r0, Z+
    5c10:	0d 92       	st	X+, r0
    5c12:	05 90       	lpm	r0, Z+
    5c14:	0d 92       	st	X+, r0
    5c16:	05 90       	lpm	r0, Z+
    5c18:	0d 92       	st	X+, r0
    5c1a:	05 90       	lpm	r0, Z+
    5c1c:	0d 92       	st	X+, r0
    5c1e:	05 90       	lpm	r0, Z+
    5c20:	0d 92       	st	X+, r0
    5c22:	05 90       	lpm	r0, Z+
    5c24:	0d 92       	st	X+, r0
    5c26:	05 90       	lpm	r0, Z+
    5c28:	0d 92       	st	X+, r0
    5c2a:	05 90       	lpm	r0, Z+
    5c2c:	0d 92       	st	X+, r0
    5c2e:	05 90       	lpm	r0, Z+
    5c30:	0d 92       	st	X+, r0
    5c32:	05 90       	lpm	r0, Z+
    5c34:	0d 92       	st	X+, r0
    5c36:	05 90       	lpm	r0, Z+
    5c38:	0d 92       	st	X+, r0
    5c3a:	05 90       	lpm	r0, Z+
    5c3c:	0d 92       	st	X+, r0
    5c3e:	05 90       	lpm	r0, Z+
    5c40:	0d 92       	st	X+, r0


	clr r1
    5c42:	11 24       	eor	r1, r1
	ret
    5c44:	08 95       	ret

00005c46 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    5c46:	0f 93       	push	r16
	push r17
    5c48:	1f 93       	push	r17
	push YL
    5c4a:	cf 93       	push	r28
	push YH
    5c4c:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    5c4e:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    5c50:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    5c52:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi ZH,hi8(sprites)	
    5c54:	f8 e0       	ldi	r31, 0x08	; 8
	add ZL,r0
    5c56:	e0 0d       	add	r30, r0
	adc ZH,r1
    5c58:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    5c5a:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    5c5c:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    5c5e:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    5c60:	8e 9f       	mul	r24, r30
	movw r26,r0
    5c62:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    5c64:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    5c66:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    5c68:	c8 e0       	ldi	r28, 0x08	; 8
	ldi YH,hi8(sprites_tile_banks)	
    5c6a:	dd e0       	ldi	r29, 0x0D	; 13
	clr r0
    5c6c:	00 24       	eor	r0, r0
	add YL,r1
    5c6e:	c1 0d       	add	r28, r1
	adc YH,r0		
    5c70:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    5c72:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    5c74:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    5c76:	ea 0f       	add	r30, r26
	adc ZH,r27
    5c78:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    5c7a:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    5c7c:	b8 e0       	ldi	r27, 0x08	; 8
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    5c7e:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    5c80:	69 9f       	mul	r22, r25
	add XL,r0
    5c82:	a0 0d       	add	r26, r0
	adc XH,r1
    5c84:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    5c86:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    5c88:	dd 27       	eor	r29, r29

	cpi r20,0	
    5c8a:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    5c8c:	51 f4       	brne	.+20     	; 0x5ca2 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    5c8e:	a2 0f       	add	r26, r18
	adc XH,r1
    5c90:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    5c92:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    5c94:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    5c96:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    5c98:	11 c0       	rjmp	.+34     	; 0x5cbc <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    5c9a:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    5c9c:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    5c9e:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    5ca0:	0d c0       	rjmp	.+26     	; 0x5cbc <x_check_end>

00005ca2 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    5ca2:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    5ca4:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    5ca6:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    5ca8:	04 c0       	rjmp	.+8      	; 0x5cb2 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    5caa:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    5cac:	e8 0f       	add	r30, r24
	adc ZH,r1	
    5cae:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    5cb0:	05 c0       	rjmp	.+10     	; 0x5cbc <x_check_end>

00005cb2 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    5cb2:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    5cb4:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    5cb6:	e2 0f       	add	r30, r18
	adc ZH,r1
    5cb8:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    5cba:	31 97       	sbiw	r30, 0x01	; 1

00005cbc <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    5cbc:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    5cbe:	41 f4       	brne	.+16     	; 0x5cd0 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    5cc0:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    5cc2:	93 9f       	mul	r25, r19
	add XL,r0
    5cc4:	a0 0d       	add	r26, r0
	adc XH,r1
    5cc6:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    5cc8:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    5cca:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    5ccc:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    5cce:	0a c0       	rjmp	.+20     	; 0x5ce4 <y_check_end>

00005cd0 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    5cd0:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    5cd2:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    5cd4:	63 2f       	mov	r22, r19
	dec r22
    5cd6:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    5cd8:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    5cda:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    5cdc:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    5cde:	56 9f       	mul	r21, r22
	add ZL,r0
    5ce0:	e0 0d       	add	r30, r0
	adc ZH,r1	
    5ce2:	f1 1d       	adc	r31, r1

00005ce4 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    5ce4:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    5ce6:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    5ce8:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    5cea:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    5cec:	00 ff       	sbrs	r16, 0
	clr r23
    5cee:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    5cf0:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    5cf2:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    5cf4:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    5cf6:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    5cf8:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    5cfa:	59 1b       	sub	r21, r25

00005cfc <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    5cfc:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    5cfe:	48 1b       	sub	r20, r24

00005d00 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    5d00:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    5d02:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    5d04:	2c 93       	st	X, r18
	adiw XL,1
    5d06:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    5d08:	e6 0f       	add	r30, r22
	adc ZH,r23
    5d0a:	f7 1f       	adc	r31, r23
	dec r20
    5d0c:	4a 95       	dec	r20
	brne x_loop
    5d0e:	c1 f7       	brne	.-16     	; 0x5d00 <x_loop>

	add ZL,YL		;src+=srcXdiff
    5d10:	ec 0f       	add	r30, r28
	adc ZH,YH
    5d12:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    5d14:	a8 0f       	add	r26, r24
	adc XH,r1
    5d16:	b1 1d       	adc	r27, r1
	dec r21
    5d18:	5a 95       	dec	r21
	brne y_loop
    5d1a:	81 f7       	brne	.-32     	; 0x5cfc <y_loop>


	pop YH
    5d1c:	df 91       	pop	r29
	pop YL
    5d1e:	cf 91       	pop	r28
	pop r17
    5d20:	1f 91       	pop	r17
	pop r16
    5d22:	0f 91       	pop	r16
	ret
    5d24:	08 95       	ret

00005d26 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    5d26:	0f 92       	push	r0
	push r1
    5d28:	1f 92       	push	r1
	push ZL;2
    5d2a:	ef 93       	push	r30
	push ZH;2
    5d2c:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5d2e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5d30:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5d32:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    5d36:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    5d38:	f1 e0       	ldi	r31, 0x01	; 1

00005d3a <latency_loop>:
latency_loop:
	cp ZL,ZH
    5d3a:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    5d3c:	00 f0       	brcs	.+0      	; 0x5d3e <latency_loop+0x4>
	inc ZH
    5d3e:	f3 95       	inc	r31
	cpi ZH,10
    5d40:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    5d42:	d8 f3       	brcs	.-10     	; 0x5d3a <latency_loop>
	jmp .
    5d44:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    5d48:	e0 91 17 0d 	lds	r30, 0x0D17
	dec ZL
    5d4c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5d4e:	e0 93 17 0d 	sts	0x0D17, r30

	;process sync phases
	lds ZH,sync_phase
    5d52:	f0 91 16 0d 	lds	r31, 0x0D16
	sbrc ZH,0
    5d56:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    5d58:	57 c0       	rjmp	.+174    	; 0x5e08 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5d5a:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    5d5c:	98 f0       	brcs	.+38     	; 0x5d84 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    5d5e:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    5d60:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    5d64:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    5d66:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    5d6a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    5d6c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    5d6e:	26 f4       	brtc	.+8      	; 0x5d78 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    5d70:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5d72:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <update_sound>
	rjmp sync_end
    5d76:	b8 c0       	rjmp	.+368    	; 0x5ee8 <sync_end>

00005d78 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    5d78:	e5 e1       	ldi	r30, 0x15	; 21
    5d7a:	ea 95       	dec	r30
    5d7c:	f1 f7       	brne	.-4      	; 0x5d7a <sync_pre_eq_no_sound_update+0x2>
    5d7e:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5d80:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    5d82:	b2 c0       	rjmp	.+356    	; 0x5ee8 <sync_end>

00005d84 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    5d84:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    5d86:	38 f1       	brcs	.+78     	; 0x5dd6 <sync_post_eq>

	rjmp .
    5d88:	00 c0       	rjmp	.+0      	; 0x5d8a <sync_eq+0x6>
	rjmp .
    5d8a:	00 c0       	rjmp	.+0      	; 0x5d8c <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5d8c:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    5d8e:	e0 fb       	bst	r30, 0
	ldi ZL,4
    5d90:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    5d92:	16 f4       	brtc	.+4      	; 0x5d98 <sync_eq_skip>
	
	call update_sound
    5d94:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <update_sound>

00005d98 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    5d98:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    5d9a:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    5d9e:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    5da0:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    5da4:	a1 c0       	rjmp	.+322    	; 0x5ee8 <sync_end>

00005da6 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    5da6:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5da8:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5daa:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5dac:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    5db0:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    5db2:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    5db4:	00 f0       	brcs	.+0      	; 0x5db6 <__vector_14+0x10>

	cpi ZL,2
    5db6:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    5db8:	00 f0       	brcs	.+0      	; 0x5dba <__vector_14+0x14>

	cpi ZL,3
    5dba:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    5dbc:	00 f0       	brcs	.+0      	; 0x5dbe <__vector_14+0x18>

	cpi ZL,4
    5dbe:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    5dc0:	00 f0       	brcs	.+0      	; 0x5dc2 <__vector_14+0x1c>

	cpi ZL,5
    5dc2:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    5dc4:	00 f0       	brcs	.+0      	; 0x5dc6 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    5dc6:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    5dc8:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    5dca:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    5dce:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    5dd0:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    5dd2:	ef 91       	pop	r30
	reti
    5dd4:	18 95       	reti

00005dd6 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    5dd6:	00 c0       	rjmp	.+0      	; 0x5dd8 <sync_post_eq+0x2>

	bst ZL,0
    5dd8:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5dda:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    5ddc:	26 f4       	brtc	.+8      	; 0x5de6 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    5dde:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5de0:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <update_sound>
	rjmp sync_pre_eq_cont
    5de4:	05 c0       	rjmp	.+10     	; 0x5df0 <sync_pre_eq_cont>

00005de6 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    5de6:	e5 e1       	ldi	r30, 0x15	; 21
    5de8:	ea 95       	dec	r30
    5dea:	f1 f7       	brne	.-4      	; 0x5de8 <sync_post_eq_no_sound_update+0x2>
    5dec:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    5dee:	28 9a       	sbi	0x05, 0	; 5

00005df0 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    5df0:	e0 91 17 0d 	lds	r30, 0x0D17
	cpi ZL,0
    5df4:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    5df6:	09 f0       	breq	.+2      	; 0x5dfa <sync_pre_eq_cont+0xa>
	rjmp sync_end
    5df8:	77 c0       	rjmp	.+238    	; 0x5ee8 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    5dfa:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    5dfc:	e0 93 17 0d 	sts	0x0D17, r30
	ldi ZL,1
    5e00:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    5e02:	e0 93 16 0d 	sts	0x0D16, r30
	
	rjmp sync_end
    5e06:	70 c0       	rjmp	.+224    	; 0x5ee8 <sync_end>

00005e08 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    5e08:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    5e0a:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    5e0e:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    5e10:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    5e14:	00 c0       	rjmp	.+0      	; 0x5e16 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5e16:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    5e18:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5e1a:	00 c0       	rjmp	.+0      	; 0x5e1c <sync_hsync+0x14>
	call update_sound
    5e1c:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    5e20:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5e22:	00 90 1d 0d 	lds	r0, 0x0D1D
	sub ZH,r0				
    5e26:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    5e28:	e0 91 17 0d 	lds	r30, 0x0D17
	cp ZL,ZH
    5e2c:	ef 17       	cp	r30, r31
	brsh no_render
    5e2e:	e0 f4       	brcc	.+56     	; 0x5e68 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    5e30:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5e32:	00 90 1d 0d 	lds	r0, 0x0D1D
	sub ZH,r0				
    5e36:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    5e38:	00 90 1e 0d 	lds	r0, 0x0D1E
	sub ZH,r0			
    5e3c:	f0 19       	sub	r31, r0
	cp ZL,ZH
    5e3e:	ef 17       	cp	r30, r31
	brlo no_render
    5e40:	98 f0       	brcs	.+38     	; 0x5e68 <no_render>

	;push r1-r29
	ldi ZL,29
    5e42:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    5e44:	ff 27       	eor	r31, r31

00005e46 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    5e46:	00 80       	ld	r0, Z
	push r0
    5e48:	0f 92       	push	r0
	dec ZL
    5e4a:	ea 95       	dec	r30
	brne push_loop	
    5e4c:	e1 f7       	brne	.-8      	; 0x5e46 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    5e4e:	0f e1       	ldi	r16, 0x1F	; 31
    5e50:	0a 95       	dec	r16
    5e52:	f1 f7       	brne	.-4      	; 0x5e50 <push_loop+0xa>
    5e54:	00 00       	nop
    5e56:	00 00       	nop

	call VMODE_FUNC		;TCNT1=0x234
    5e58:	0e 94 c0 2c 	call	0x5980	; 0x5980 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    5e5c:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    5e5e:	ff 27       	eor	r31, r31

00005e60 <pop_loop>:
pop_loop:
	pop r0
    5e60:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    5e62:	01 92       	st	Z+, r0
	cpi ZL,30
    5e64:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    5e66:	e0 f3       	brcs	.-8      	; 0x5e60 <pop_loop>

00005e68 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    5e68:	e0 91 17 0d 	lds	r30, 0x0D17
	cpi ZL,0
    5e6c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    5e6e:	09 f0       	breq	.+2      	; 0x5e72 <no_render+0xa>
	rjmp sync_end
    5e70:	3b c0       	rjmp	.+118    	; 0x5ee8 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    5e72:	2f 93       	push	r18
	push r19
    5e74:	3f 93       	push	r19
	push r20
    5e76:	4f 93       	push	r20
	push r21
    5e78:	5f 93       	push	r21
	push r22
    5e7a:	6f 93       	push	r22
	push r23
    5e7c:	7f 93       	push	r23
	push r24
    5e7e:	8f 93       	push	r24
	push r25
    5e80:	9f 93       	push	r25
	push r26
    5e82:	af 93       	push	r26
	push r27
    5e84:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    5e86:	78 94       	sei
	clr r1
    5e88:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    5e8a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    5e8c:	e0 93 16 0d 	sts	0x0D16, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5e90:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    5e92:	e0 93 17 0d 	sts	0x0D17, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    5e96:	f0 91 1f 0d 	lds	r31, 0x0D1F
	sts first_render_line,ZH
    5e9a:	f0 93 1d 0d 	sts	0x0D1D, r31
	
	lds ZH,render_lines_count_tmp
    5e9e:	f0 91 20 0d 	lds	r31, 0x0D20
	sts render_lines_count,ZH
    5ea2:	f0 93 1e 0d 	sts	0x0D1E, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    5ea6:	e0 91 19 0d 	lds	r30, 0x0D19
	lds ZH,pre_vsync_user_callback+1
    5eaa:	f0 91 1a 0d 	lds	r31, 0x0D1A
	cp  ZL,r1
    5eae:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5eb0:	f1 05       	cpc	r31, r1
	breq .+2 
    5eb2:	09 f0       	breq	.+2      	; 0x5eb6 <no_render+0x4e>
	icall
    5eb4:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    5eb6:	0e 94 1a 31 	call	0x6234	; 0x6234 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    5eba:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    5ebe:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <process_music>
	clr r1
    5ec2:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    5ec4:	e0 91 1b 0d 	lds	r30, 0x0D1B
	lds ZH,post_vsync_user_callback+1
    5ec8:	f0 91 1c 0d 	lds	r31, 0x0D1C
	cp  ZL,r1
    5ecc:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5ece:	f1 05       	cpc	r31, r1
	breq .+2 
    5ed0:	09 f0       	breq	.+2      	; 0x5ed4 <no_render+0x6c>
	icall
    5ed2:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    5ed4:	bf 91       	pop	r27
	pop r26
    5ed6:	af 91       	pop	r26
	pop r25
    5ed8:	9f 91       	pop	r25
	pop r24
    5eda:	8f 91       	pop	r24
	pop r23
    5edc:	7f 91       	pop	r23
	pop r22
    5ede:	6f 91       	pop	r22
	pop r21
    5ee0:	5f 91       	pop	r21
	pop r20
    5ee2:	4f 91       	pop	r20
	pop r19
    5ee4:	3f 91       	pop	r19
	pop r18
    5ee6:	2f 91       	pop	r18

00005ee8 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    5ee8:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    5eea:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    5eec:	ff 91       	pop	r31
	pop ZL
    5eee:	ef 91       	pop	r30
	pop r1
    5ef0:	1f 90       	pop	r1
	pop r0
    5ef2:	0f 90       	pop	r0
	reti
    5ef4:	18 95       	reti

00005ef6 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5ef6:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    5ef8:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5efa:	00 c0       	rjmp	.+0      	; 0x5efc <hsync_pulse+0x6>
	call update_sound
    5efc:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <update_sound>

	lds ZL,sync_pulse
    5f00:	e0 91 17 0d 	lds	r30, 0x0D17
	dec ZL
    5f04:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5f06:	e0 93 17 0d 	sts	0x0D17, r30

	ret
    5f0a:	08 95       	ret

00005f0c <process_music>:
process_music:

	//call update_sound
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    5f0c:	e0 91 51 0f 	lds	r30, 0x0F51
	sbrc ZL,0
    5f10:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    5f12:	0e 94 de 33 	call	0x67bc	; 0x67bc <ProcessMusic>
#endif


	;Flip mix bank & set target bank adress for mixing
	lds r0,mix_bank
    5f16:	00 90 4f 0f 	lds	r0, 0x0F4F
	tst r0
    5f1a:	00 20       	and	r0, r0
	brne set_hi_bank
    5f1c:	19 f4       	brne	.+6      	; 0x5f24 <set_hi_bank>
	ldi XL,lo8(mix_buf)
    5f1e:	a1 e4       	ldi	r26, 0x41	; 65
	ldi XH,hi8(mix_buf)
    5f20:	bd e0       	ldi	r27, 0x0D	; 13
	rjmp end_set_bank
    5f22:	02 c0       	rjmp	.+4      	; 0x5f28 <end_set_bank>

00005f24 <set_hi_bank>:
set_hi_bank:
	ldi XL,lo8(mix_buf+MIX_BANK_SIZE)
    5f24:	a7 e4       	ldi	r26, 0x47	; 71
	ldi XH,hi8(mix_buf+MIX_BANK_SIZE)
    5f26:	be e0       	ldi	r27, 0x0E	; 14

00005f28 <end_set_bank>:
end_set_bank:

	ldi r18,1
    5f28:	21 e0       	ldi	r18, 0x01	; 1
	eor	r0,r18
    5f2a:	02 26       	eor	r0, r18
	sts mix_bank,r0
    5f2c:	00 92 4f 0f 	sts	0x0F4F, r0
	
	ldi r18,2
    5f30:	22 e0       	ldi	r18, 0x02	; 2
	sts mix_block,r18	
    5f32:	20 93 50 0f 	sts	0x0F50, r18


#if ENABLE_MIXER==1

	lds ZL,sound_enabled
    5f36:	e0 91 51 0f 	lds	r30, 0x0F51
	sbrs ZL,0
    5f3a:	e0 ff       	sbrs	r30, 0
	ret
    5f3c:	08 95       	ret

	push r2
    5f3e:	2f 92       	push	r2
	push r3
    5f40:	3f 92       	push	r3
	push r4
    5f42:	4f 92       	push	r4
	push r5
    5f44:	5f 92       	push	r5
	push r6
    5f46:	6f 92       	push	r6
	push r7
    5f48:	7f 92       	push	r7
	push r8
    5f4a:	8f 92       	push	r8
	push r9
    5f4c:	9f 92       	push	r9
	push r10
    5f4e:	af 92       	push	r10
	push r11
    5f50:	bf 92       	push	r11
	push r12
    5f52:	cf 92       	push	r12
	push r13
    5f54:	df 92       	push	r13
	push r14
    5f56:	ef 92       	push	r14
	push r15
    5f58:	ff 92       	push	r15
	push r16
    5f5a:	0f 93       	push	r16
	push r17
    5f5c:	1f 93       	push	r17
	push r28
    5f5e:	cf 93       	push	r28
	push r29
    5f60:	df 93       	push	r29
	;mix channels

	#if SOUND_CHANNEL_4_ENABLE == 1

		#if MIXER_CHAN4_TYPE == 0	
			lds r21,tr4_vol
    5f62:	50 91 64 0f 	lds	r21, 0x0F64
			lds r22,tr4_barrel_lo
    5f66:	60 91 66 0f 	lds	r22, 0x0F66
			lds r23,tr4_barrel_hi
    5f6a:	70 91 67 0f 	lds	r23, 0x0F67
			lds r24,tr4_divider
    5f6e:	80 91 68 0f 	lds	r24, 0x0F68





	lds r2,tr1_step_lo
    5f72:	20 90 53 0f 	lds	r2, 0x0F53
	lds r3,tr1_step_hi
    5f76:	30 90 54 0f 	lds	r3, 0x0F54
	lds r4,tr1_pos_lo
    5f7a:	40 90 56 0f 	lds	r4, 0x0F56
	lds r5,tr1_pos_hi 
    5f7e:	50 90 57 0f 	lds	r5, 0x0F57
	lds r6,tr1_pos_frac
    5f82:	60 90 55 0f 	lds	r6, 0x0F55
	lds r17,tr1_vol
    5f86:	10 91 52 0f 	lds	r17, 0x0F52
	
	lds r7,tr2_step_lo
    5f8a:	70 90 59 0f 	lds	r7, 0x0F59
	lds r8,tr2_step_hi
    5f8e:	80 90 5a 0f 	lds	r8, 0x0F5A
	lds r9,tr2_pos_frac
    5f92:	90 90 5b 0f 	lds	r9, 0x0F5B
	lds r10,tr2_pos_lo
    5f96:	a0 90 5c 0f 	lds	r10, 0x0F5C
	lds r11,tr2_pos_hi
    5f9a:	b0 90 5d 0f 	lds	r11, 0x0F5D
	lds r18,tr2_vol	
    5f9e:	20 91 58 0f 	lds	r18, 0x0F58

	lds r12,tr3_step_lo
    5fa2:	c0 90 5f 0f 	lds	r12, 0x0F5F
	lds r13,tr3_step_hi
    5fa6:	d0 90 60 0f 	lds	r13, 0x0F60
	lds r14,tr3_pos_lo
    5faa:	e0 90 62 0f 	lds	r14, 0x0F62
	lds r15,tr3_pos_hi
    5fae:	f0 90 63 0f 	lds	r15, 0x0F63
	lds r16,tr3_pos_frac
    5fb2:	00 91 61 0f 	lds	r16, 0x0F61
	lds r19,tr3_vol	
    5fb6:	30 91 5e 0f 	lds	r19, 0x0F5E



	

	ldi r25,0xff 
    5fba:	9f ef       	ldi	r25, 0xFF	; 255

00005fbc <mix_loop>:
		sbrc r28,7
		ser r29
	#endif

	;channel 1 - 12 cycles/sample
	add	r6,r2	;add step to fractional part of sample pos
    5fbc:	62 0c       	add	r6, r2
	adc r4,r3	;add step to low byte of sample pos
    5fbe:	43 1c       	adc	r4, r3
	movw ZL,r4
    5fc0:	f2 01       	movw	r30, r4
	lpm	r20,Z	;load sample
    5fc2:	44 91       	lpm	r20, Z
	mulsu r20,r17;(sample*mixing vol)
    5fc4:	41 03       	mulsu	r20, r17
	;clr r0
	sbc r0,r0	;sign extend
    5fc6:	00 08       	sbc	r0, r0

	#if MIXER_CHAN4_TYPE == 0 || SOUND_CHANNEL_4_ENABLE == 0
		mov r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5fc8:	c1 2d       	mov	r28, r1
		mov r29,r0	;ajust mix buffer msb
    5fca:	d0 2d       	mov	r29, r0
		adc r29,r0	;ajust mix buffer msb		
	#endif

	#if SOUND_CHANNEL_2_ENABLE == 1
		;channel 2
		add	r9,r7	;add step to fractional part of sample pos
    5fcc:	97 0c       	add	r9, r7
		adc r10,r8	;add step to low byte of sample pos 
    5fce:	a8 1c       	adc	r10, r8
		movw ZL,r10
    5fd0:	f5 01       	movw	r30, r10
		lpm	r20,Z	;load sample
    5fd2:	44 91       	lpm	r20, Z
		mulsu r20,r18;(sample*mixing vol)
    5fd4:	42 03       	mulsu	r20, r18
		;clr r0
		sbc r0,r0	;sign extend
    5fd6:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5fd8:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    5fda:	d0 1d       	adc	r29, r0
	#endif 

	#if SOUND_CHANNEL_3_ENABLE == 1
		;channel 3
		add	r16,r12	;add step to fractional part of sample pos
    5fdc:	0c 0d       	add	r16, r12
		adc r14,r13	;add step to low byte of sample pos 
    5fde:	ed 1c       	adc	r14, r13
		movw ZL,r14
    5fe0:	f7 01       	movw	r30, r14
		lpm	r20,Z	;load sample
    5fe2:	44 91       	lpm	r20, Z
		mulsu r20,r19;(sample*mixing vol)
    5fe4:	43 03       	mulsu	r20, r19
		;clr r0
		sbc r0,r0	;sign extend
    5fe6:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5fe8:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    5fea:	d0 1d       	adc	r29, r0
	#endif

	#if MIXER_CHAN4_TYPE == 0 && SOUND_CHANNEL_4_ENABLE == 1	

		;channel 4 - 7/15 bit LFSR (12 cycles/24 cycles)
		dec r24
    5fec:	8a 95       	dec	r24
		brpl no_shift
    5fee:	6a f4       	brpl	.+26     	; 0x600a <no_shift>

		lds r20,tr4_params
    5ff0:	40 91 65 0f 	lds	r20, 0x0F65
		mov r24,r20
    5ff4:	84 2f       	mov	r24, r20
		lsr r24 ;keep bits7:1
    5ff6:	86 95       	lsr	r24

		mov r0,r22  ;copy barrel shifter
    5ff8:	06 2e       	mov	r0, r22
		lsr r0
    5ffa:	06 94       	lsr	r0
		eor r0,r22  ;xor bit0 and bit1
    5ffc:	06 26       	eor	r0, r22
		bst r0,0
    5ffe:	00 fa       	bst	r0, 0
		lsr r23
    6000:	76 95       	lsr	r23
		ror r22	
    6002:	67 95       	ror	r22
		bld r23,6	;15 bits mode
    6004:	76 f9       	bld	r23, 6
		sbrs r20,0
    6006:	40 ff       	sbrs	r20, 0
		bld r22,6	;7 bits mode
    6008:	66 f9       	bld	r22, 6

0000600a <no_shift>:

	no_shift:
		ldi r20,0x80 ;-128
    600a:	40 e8       	ldi	r20, 0x80	; 128
		sbrc r22,0
    600c:	60 fd       	sbrc	r22, 0
		ldi r20,0x7f ;+127
    600e:	4f e7       	ldi	r20, 0x7F	; 127

		mulsu r20,r21;(sample*mixing vol)
    6010:	45 03       	mulsu	r20, r21
		;clr r0
		sbc r0,r0	;sign extend
    6012:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6014:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    6016:	d0 1d       	adc	r29, r0
	#endif

	;final processing

	;clip
	clr r0
    6018:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    601a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    601c:	d0 05       	cpc	r29, r0
	brlt .+2
    601e:	0c f0       	brlt	.+2      	; 0x6022 <no_shift+0x18>
	ldi r28,127
    6020:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6022:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6024:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6026:	d0 05       	cpc	r29, r0
	brge .+2
    6028:	0c f4       	brge	.+2      	; 0x602c <no_shift+0x22>
	ldi r28,-128
    602a:	c0 e8       	ldi	r28, 0x80	; 128


	subi r28,128	;convert to unsigned
    602c:	c0 58       	subi	r28, 0x80	; 128
	st X+,r28
    602e:	cd 93       	st	X+, r28


	dec r25
    6030:	9a 95       	dec	r25
	breq .+2
    6032:	09 f0       	breq	.+2      	; 0x6036 <no_shift+0x2c>
	rjmp mix_loop
    6034:	c3 cf       	rjmp	.-122    	; 0x5fbc <mix_loop>

	lds r20,mix_block
    6036:	40 91 50 0f 	lds	r20, 0x0F50
	dec r20
    603a:	4a 95       	dec	r20
	sts mix_block,r20
    603c:	40 93 50 0f 	sts	0x0F50, r20
	ldi r25,(MIX_BANK_SIZE-0xff)
    6040:	97 e0       	ldi	r25, 0x07	; 7
	breq .+2
    6042:	09 f0       	breq	.+2      	; 0x6046 <no_shift+0x3c>
	rjmp mix_loop
    6044:	bb cf       	rjmp	.-138    	; 0x5fbc <mix_loop>


	//save current positions
	sts tr1_pos_frac,r6
    6046:	60 92 55 0f 	sts	0x0F55, r6
	sts tr1_pos_lo,r4	
    604a:	40 92 56 0f 	sts	0x0F56, r4

	sts tr2_pos_frac,r9
    604e:	90 92 5b 0f 	sts	0x0F5B, r9
	sts tr2_pos_lo,r10
    6052:	a0 92 5c 0f 	sts	0x0F5C, r10

	sts tr3_pos_frac,r16
    6056:	00 93 61 0f 	sts	0x0F61, r16
	sts tr3_pos_lo,r14
    605a:	e0 92 62 0f 	sts	0x0F62, r14

#if MIXER_CHAN4_TYPE == 0
	sts tr4_barrel_lo,r22
    605e:	60 93 66 0f 	sts	0x0F66, r22
	sts tr4_barrel_hi,r23
    6062:	70 93 67 0f 	sts	0x0F67, r23
	sts tr4_divider,r24
    6066:	80 93 68 0f 	sts	0x0F68, r24
	sts tr4_pos_hi,r23
	sts tr4_pos_frac,r24

#endif

	pop r29
    606a:	df 91       	pop	r29
	pop r28
    606c:	cf 91       	pop	r28
	pop r17
    606e:	1f 91       	pop	r17
	pop r16
    6070:	0f 91       	pop	r16
	pop r15
    6072:	ff 90       	pop	r15
	pop r14
    6074:	ef 90       	pop	r14
	pop r13
    6076:	df 90       	pop	r13
	pop r12
    6078:	cf 90       	pop	r12
	pop r11
    607a:	bf 90       	pop	r11
	pop r10
    607c:	af 90       	pop	r10
	pop r9
    607e:	9f 90       	pop	r9
	pop r8
    6080:	8f 90       	pop	r8
	pop r7
    6082:	7f 90       	pop	r7
	pop r6
    6084:	6f 90       	pop	r6
	pop r5
    6086:	5f 90       	pop	r5
	pop r4
    6088:	4f 90       	pop	r4
	pop r3
    608a:	3f 90       	pop	r3
	pop r2
    608c:	2f 90       	pop	r2

#endif // ENABLE_MIXER==1

	ret
    608e:	08 95       	ret

00006090 <update_sound_buffer_fast>:
; NO MIDI
; Destroys: Z,r16,r17
; Cycles: 24
;**********************************
update_sound_buffer_fast:
	lds ZL,mix_pos
    6090:	e0 91 4d 0f 	lds	r30, 0x0F4D
	lds ZH,mix_pos+1
    6094:	f0 91 4e 0f 	lds	r31, 0x0F4E
			
	ld r16,Z+		;load next sample
    6098:	01 91       	ld	r16, Z+
	;subi r16,128	;convert to unsigned
	nop
    609a:	00 00       	nop
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    609c:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    60a0:	0f e0       	ldi	r16, 0x0F	; 15
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    60a2:	ed 34       	cpi	r30, 0x4D	; 77
	cpc ZH,r16
    60a4:	f0 07       	cpc	r31, r16
	;12

	ldi r16,lo8(mix_buf)
    60a6:	01 e4       	ldi	r16, 0x41	; 65
	ldi r17,hi8(mix_buf)
    60a8:	1d e0       	ldi	r17, 0x0D	; 13
	brlo .+2
    60aa:	08 f0       	brcs	.+2      	; 0x60ae <update_sound_buffer_fast+0x1e>
	movw ZL,r16
    60ac:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    60ae:	e0 93 4d 0f 	sts	0x0F4D, r30
	sts mix_pos+1,ZH		
    60b2:	f0 93 4e 0f 	sts	0x0F4E, r31

	ret ;20+4=24
    60b6:	08 95       	ret

000060b8 <update_sound>:
; Destroys: ZH
; Cycles: VSYNC = 68
;         HSYNC = 135
;***********************
update_sound:
	push r16
    60b8:	0f 93       	push	r16
	push r17
    60ba:	1f 93       	push	r17
	push r18
    60bc:	2f 93       	push	r18
	push ZL
    60be:	ef 93       	push	r30

	lds ZL,mix_pos
    60c0:	e0 91 4d 0f 	lds	r30, 0x0F4D
	lds ZH,mix_pos+1
    60c4:	f0 91 4e 0f 	lds	r31, 0x0F4E
			
	ld r16,Z+
    60c8:	01 91       	ld	r16, Z+
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    60ca:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    60ce:	0f e0       	ldi	r16, 0x0F	; 15
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    60d0:	ed 34       	cpi	r30, 0x4D	; 77
	cpc ZH,r16
    60d2:	f0 07       	cpc	r31, r16

	ldi r16,lo8(mix_buf)
    60d4:	01 e4       	ldi	r16, 0x41	; 65
	ldi r17,hi8(mix_buf)
    60d6:	1d e0       	ldi	r17, 0x0D	; 13

	brlo .+2
    60d8:	08 f0       	brcs	.+2      	; 0x60dc <update_sound+0x24>
	movw ZL,r16
    60da:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    60dc:	e0 93 4d 0f 	sts	0x0F4D, r30
	sts mix_pos+1,ZH	
    60e0:	f0 93 4e 0f 	sts	0x0F4E, r31
	rjmp .
	rjmp .
	rjmp .
#else
	//alignment cycles
	ldi ZL,8
    60e4:	e8 e0       	ldi	r30, 0x08	; 8
	dec ZL
    60e6:	ea 95       	dec	r30
	brne .-4
    60e8:	f1 f7       	brne	.-4      	; 0x60e6 <update_sound+0x2e>
#endif

	pop ZL
    60ea:	ef 91       	pop	r30
	pop r18
    60ec:	2f 91       	pop	r18
	pop r17
    60ee:	1f 91       	pop	r17
	pop r16
    60f0:	0f 91       	pop	r16

	;*** Video sync update ***
	sbrc ZL,0								;pre-eq/post-eq sync
    60f2:	e0 fd       	sbrc	r30, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    60f4:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,0								
    60f6:	e0 ff       	sbrs	r30, 0
	rjmp .+2
    60f8:	01 c0       	rjmp	.+2      	; 0x60fc <update_sound+0x44>
	ret
    60fa:	08 95       	ret

	ldi ZH,20
    60fc:	f4 e1       	ldi	r31, 0x14	; 20
	dec ZH
    60fe:	fa 95       	dec	r31
	brne .-4
    6100:	f1 f7       	brne	.-4      	; 0x60fe <update_sound+0x46>
	rjmp .
    6102:	00 c0       	rjmp	.+0      	; 0x6104 <update_sound+0x4c>

	;*** Video sync update ***
	sbrc ZL,1								;hsync
    6104:	e1 fd       	sbrc	r30, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6106:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,1								
    6108:	e1 ff       	sbrs	r30, 1
	rjmp .
    610a:	00 c0       	rjmp	.+0      	; 0x610c <update_sound+0x54>

	ret 
    610c:	08 95       	ret

0000610e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    610e:	80 93 08 0d 	sts	0x0D08, r24
	sts sprites_tile_banks+1,r25
    6112:	90 93 09 0d 	sts	0x0D09, r25
	ret
    6116:	08 95       	ret

00006118 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6118:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    611a:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    611c:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    611e:	b5 e0       	ldi	r27, 0x05	; 5

	ldi r22,RAM_TILES_COUNT
    6120:	60 e1       	ldi	r22, 0x10	; 16

00006122 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6122:	6d 93       	st	X+, r22
	sbiw r30,1
    6124:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6126:	e9 f7       	brne	.-6      	; 0x6122 <fill_vram_loop>

	clr r1
    6128:	11 24       	eor	r1, r1

	ret
    612a:	08 95       	ret

0000612c <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    612c:	50 91 12 0d 	lds	r21, 0x0D12
	add r20,21
    6130:	45 0f       	add	r20, r21
	rjmp SetTile	
    6132:	00 c0       	rjmp	.+0      	; 0x6134 <SetTile>

00006134 <SetTile>:

	ret

#else

	clr r25
    6134:	99 27       	eor	r25, r25
	clr r23	
    6136:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    6138:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    613a:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    613c:	08 0e       	add	r0, r24
	adc r1,r25
    613e:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    6140:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    6142:	b5 e0       	ldi	r27, 0x05	; 5
	add XL,r0
    6144:	a0 0d       	add	r26, r0
	adc XH,r1
    6146:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    6148:	40 5f       	subi	r20, 0xF0	; 240
	st X,r20
    614a:	4c 93       	st	X, r20

	clr r1
    614c:	11 24       	eor	r1, r1

	ret
    614e:	08 95       	ret

00006150 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    6150:	80 93 12 0d 	sts	0x0D12, r24
	ret
    6154:	08 95       	ret

00006156 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    6156:	80 93 10 0d 	sts	0x0D10, r24
	sts tile_table_hi,r25	
    615a:	90 93 11 0d 	sts	0x0D11, r25
	ret
    615e:	08 95       	ret

00006160 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6160:	80 91 18 0d 	lds	r24, 0x0D18
	andi r24,SYNC_FLAG_VSYNC
    6164:	81 70       	andi	r24, 0x01	; 1
	ret
    6166:	08 95       	ret

00006168 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6168:	20 91 18 0d 	lds	r18, 0x0D18
	andi r18,~SYNC_FLAG_VSYNC
    616c:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    616e:	20 93 18 0d 	sts	0x0D18, r18
	ret
    6172:	08 95       	ret

00006174 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    6174:	88 23       	and	r24, r24
	brne rj_p2
    6176:	29 f4       	brne	.+10     	; 0x6182 <rj_p2>
		
	lds r24,joypad1_status_lo
    6178:	80 91 21 0d 	lds	r24, 0x0D21
	lds r25,joypad1_status_lo+1
    617c:	90 91 22 0d 	lds	r25, 0x0D22
	ret
    6180:	08 95       	ret

00006182 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    6182:	80 91 25 0d 	lds	r24, 0x0D25
	lds r25,joypad2_status_lo+1	
    6186:	90 91 26 0d 	lds	r25, 0x0D26

	ret
    618a:	08 95       	ret

0000618c <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    618c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    618e:	fe cf       	rjmp	.-4      	; 0x618c <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6190:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6192:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    6194:	60 bd       	out	0x20, r22	; 32
   cli
    6196:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6198:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    619a:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    619c:	78 94       	sei
   ret
    619e:	08 95       	ret

000061a0 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    61a0:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    61a2:	fe cf       	rjmp	.-4      	; 0x61a0 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    61a4:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    61a6:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    61a8:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    61aa:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    61ac:	80 b5       	in	r24, 0x20	; 32
   sei
    61ae:	78 94       	sei
   ret
    61b0:	08 95       	ret

000061b2 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    61b2:	98 e0       	ldi	r25, 0x08	; 8
    61b4:	88 e1       	ldi	r24, 0x18	; 24
    61b6:	0f b6       	in	r0, 0x3f	; 63
    61b8:	f8 94       	cli
    61ba:	a8 95       	wdr
    61bc:	80 93 60 00 	sts	0x0060, r24
    61c0:	0f be       	out	0x3f, r0	; 63
    61c2:	90 93 60 00 	sts	0x0060, r25
	while(1);
    61c6:	ff cf       	rjmp	.-2      	; 0x61c6 <SoftReset+0x14>

000061c8 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    61c8:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    61ca:	c8 95       	lpm
    61cc:	c8 95       	lpm
		Wait200ns();
    61ce:	c8 95       	lpm
    61d0:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    61d2:	12 98       	cbi	0x02, 2	; 2
    61d4:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    61d6:	80 e0       	ldi	r24, 0x00	; 0
    61d8:	90 e0       	ldi	r25, 0x00	; 0
    61da:	20 e0       	ldi	r18, 0x00	; 0
    61dc:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    61de:	36 95       	lsr	r19
    61e0:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    61e2:	96 95       	lsr	r25
    61e4:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    61e6:	c8 95       	lpm
    61e8:	c8 95       	lpm
			Wait200ns();
    61ea:	c8 95       	lpm
    61ec:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    61ee:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    61f0:	00 9b       	sbis	0x00, 0	; 0
    61f2:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    61f4:	01 9b       	sbis	0x00, 1	; 0
    61f6:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    61f8:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    61fa:	c8 95       	lpm
    61fc:	c8 95       	lpm
			Wait200ns();
    61fe:	c8 95       	lpm
    6200:	c8 95       	lpm
    6202:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    6204:	61 f7       	brne	.-40     	; 0x61de <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    6206:	30 93 22 0d 	sts	0x0D22, r19
    620a:	20 93 21 0d 	sts	0x0D21, r18
		joypad2_status_lo=p2ButtonsLo;
    620e:	90 93 26 0d 	sts	0x0D26, r25
    6212:	80 93 25 0d 	sts	0x0D25, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    6216:	80 91 21 0d 	lds	r24, 0x0D21
    621a:	90 91 22 0d 	lds	r25, 0x0D22
    621e:	0f 97       	sbiw	r24, 0x0f	; 15
    6220:	31 f0       	breq	.+12     	; 0x622e <ReadButtons+0x66>
    6222:	80 91 25 0d 	lds	r24, 0x0D25
    6226:	90 91 26 0d 	lds	r25, 0x0D26
    622a:	0f 97       	sbiw	r24, 0x0f	; 15
    622c:	11 f4       	brne	.+4      	; 0x6232 <ReadButtons+0x6a>
		SoftReset();
    622e:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <SoftReset>
    6232:	08 95       	ret

00006234 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    6234:	10 92 81 0f 	sts	0x0F81, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    6238:	00 99       	sbic	0x00, 0	; 0
    623a:	03 c0       	rjmp	.+6      	; 0x6242 <ReadControllers+0xe>
    623c:	81 e0       	ldi	r24, 0x01	; 1
    623e:	80 93 81 0f 	sts	0x0F81, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    6242:	01 99       	sbic	0x00, 1	; 0
    6244:	05 c0       	rjmp	.+10     	; 0x6250 <ReadControllers+0x1c>
    6246:	80 91 81 0f 	lds	r24, 0x0F81
    624a:	82 60       	ori	r24, 0x02	; 2
    624c:	80 93 81 0f 	sts	0x0F81, r24
			
	//read the standard buttons
	ReadButtons();
    6250:	0c 94 e4 30 	jmp	0x61c8	; 0x61c8 <ReadButtons>

00006254 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    6254:	cf 93       	push	r28
    6256:	df 93       	push	r29
    6258:	c0 e0       	ldi	r28, 0x00	; 0
    625a:	d0 e0       	ldi	r29, 0x00	; 0
    625c:	fe 01       	movw	r30, r28
    625e:	e0 55       	subi	r30, 0x50	; 80
    6260:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    6262:	64 91       	lpm	r22, Z
    6264:	ce 01       	movw	r24, r28
    6266:	0e 94 c6 30 	call	0x618c	; 0x618c <WriteEeprom>
    626a:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    626c:	c0 32       	cpi	r28, 0x20	; 32
    626e:	d1 05       	cpc	r29, r1
    6270:	a9 f7       	brne	.-22     	; 0x625c <FormatEeprom+0x8>
    6272:	c0 e2       	ldi	r28, 0x20	; 32
    6274:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    6276:	6f ef       	ldi	r22, 0xFF	; 255
    6278:	ce 01       	movw	r24, r28
    627a:	0e 94 c6 30 	call	0x618c	; 0x618c <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    627e:	6f ef       	ldi	r22, 0xFF	; 255
    6280:	ce 01       	movw	r24, r28
    6282:	01 96       	adiw	r24, 0x01	; 1
    6284:	0e 94 c6 30 	call	0x618c	; 0x618c <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    6288:	a0 96       	adiw	r28, 0x20	; 32
    628a:	c1 15       	cp	r28, r1
    628c:	88 e0       	ldi	r24, 0x08	; 8
    628e:	d8 07       	cpc	r29, r24
    6290:	91 f7       	brne	.-28     	; 0x6276 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    6292:	df 91       	pop	r29
    6294:	cf 91       	pop	r28
    6296:	08 95       	ret

00006298 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    6298:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    629a:	80 e0       	ldi	r24, 0x00	; 0
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <ReadEeprom>
    62a2:	c8 2f       	mov	r28, r24
    62a4:	81 e0       	ldi	r24, 0x01	; 1
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <ReadEeprom>
    62ac:	28 2f       	mov	r18, r24
    62ae:	30 e0       	ldi	r19, 0x00	; 0
    62b0:	32 2f       	mov	r19, r18
    62b2:	22 27       	eor	r18, r18
    62b4:	2c 0f       	add	r18, r28
    62b6:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    62b8:	81 e0       	ldi	r24, 0x01	; 1
    62ba:	2a 35       	cpi	r18, 0x5A	; 90
    62bc:	35 45       	sbci	r19, 0x55	; 85
    62be:	09 f0       	breq	.+2      	; 0x62c2 <isEepromFormatted+0x2a>
    62c0:	80 e0       	ldi	r24, 0x00	; 0
}
    62c2:	cf 91       	pop	r28
    62c4:	08 95       	ret

000062c6 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    62c6:	cf 92       	push	r12
    62c8:	df 92       	push	r13
    62ca:	ef 92       	push	r14
    62cc:	ff 92       	push	r15
    62ce:	0f 93       	push	r16
    62d0:	1f 93       	push	r17
    62d2:	cf 93       	push	r28
    62d4:	df 93       	push	r29
    62d6:	1f 92       	push	r1
    62d8:	cd b7       	in	r28, 0x3d	; 61
    62da:	de b7       	in	r29, 0x3e	; 62
    62dc:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    62de:	0e 94 4c 31 	call	0x6298	; 0x6298 <isEepromFormatted>
    62e2:	88 23       	and	r24, r24
    62e4:	09 f4       	brne	.+2      	; 0x62e8 <EepromWriteBlock+0x22>
    62e6:	4d c0       	rjmp	.+154    	; 0x6382 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    62e8:	f6 01       	movw	r30, r12
    62ea:	80 81       	ld	r24, Z
    62ec:	91 81       	ldd	r25, Z+1	; 0x01
    62ee:	8f 3f       	cpi	r24, 0xFF	; 255
    62f0:	ff ef       	ldi	r31, 0xFF	; 255
    62f2:	9f 07       	cpc	r25, r31
    62f4:	09 f4       	brne	.+2      	; 0x62f8 <EepromWriteBlock+0x32>
    62f6:	47 c0       	rjmp	.+142    	; 0x6386 <EepromWriteBlock+0xc0>
    62f8:	8a 35       	cpi	r24, 0x5A	; 90
    62fa:	95 45       	sbci	r25, 0x55	; 85
    62fc:	09 f4       	brne	.+2      	; 0x6300 <EepromWriteBlock+0x3a>
    62fe:	43 c0       	rjmp	.+134    	; 0x6386 <EepromWriteBlock+0xc0>
    6300:	00 e2       	ldi	r16, 0x20	; 32
    6302:	10 e0       	ldi	r17, 0x00	; 0
    6304:	f1 2c       	mov	r15, r1
    6306:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    6308:	c8 01       	movw	r24, r16
    630a:	49 83       	std	Y+1, r20	; 0x01
    630c:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <ReadEeprom>
    6310:	e8 2e       	mov	r14, r24
    6312:	c8 01       	movw	r24, r16
    6314:	01 96       	adiw	r24, 0x01	; 1
    6316:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <ReadEeprom>
    631a:	28 2f       	mov	r18, r24
    631c:	30 e0       	ldi	r19, 0x00	; 0
    631e:	32 2f       	mov	r19, r18
    6320:	22 27       	eor	r18, r18
    6322:	c9 01       	movw	r24, r18
    6324:	8e 0d       	add	r24, r14
    6326:	91 1d       	adc	r25, r1
		if(id==block->id){
    6328:	f6 01       	movw	r30, r12
    632a:	20 81       	ld	r18, Z
    632c:	31 81       	ldd	r19, Z+1	; 0x01
    632e:	49 81       	ldd	r20, Y+1	; 0x01
    6330:	82 17       	cp	r24, r18
    6332:	93 07       	cpc	r25, r19
    6334:	19 f4       	brne	.+6      	; 0x633c <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    6336:	ff 20       	and	r15, r15
    6338:	89 f0       	breq	.+34     	; 0x635c <EepromWriteBlock+0x96>
    633a:	0c c0       	rjmp	.+24     	; 0x6354 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    633c:	01 96       	adiw	r24, 0x01	; 1
    633e:	19 f4       	brne	.+6      	; 0x6346 <EepromWriteBlock+0x80>
    6340:	f1 10       	cpse	r15, r1
    6342:	01 c0       	rjmp	.+2      	; 0x6346 <EepromWriteBlock+0x80>
    6344:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    6346:	4f 5f       	subi	r20, 0xFF	; 255
    6348:	00 5e       	subi	r16, 0xE0	; 224
    634a:	1f 4f       	sbci	r17, 0xFF	; 255
    634c:	40 34       	cpi	r20, 0x40	; 64
    634e:	e1 f6       	brne	.-72     	; 0x6308 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    6350:	ff 20       	and	r15, r15
    6352:	d9 f0       	breq	.+54     	; 0x638a <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    6354:	20 e2       	ldi	r18, 0x20	; 32
    6356:	f2 9e       	mul	r15, r18
    6358:	80 01       	movw	r16, r0
    635a:	11 24       	eor	r1, r1
    635c:	76 01       	movw	r14, r12
    635e:	80 e2       	ldi	r24, 0x20	; 32
    6360:	e8 0e       	add	r14, r24
    6362:	f1 1c       	adc	r15, r1
    6364:	0c 19       	sub	r16, r12
    6366:	1d 09       	sbc	r17, r13
    6368:	c6 01       	movw	r24, r12
    636a:	80 0f       	add	r24, r16
    636c:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    636e:	f6 01       	movw	r30, r12
    6370:	61 91       	ld	r22, Z+
    6372:	6f 01       	movw	r12, r30
    6374:	0e 94 c6 30 	call	0x618c	; 0x618c <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    6378:	ce 14       	cp	r12, r14
    637a:	df 04       	cpc	r13, r15
    637c:	a9 f7       	brne	.-22     	; 0x6368 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    637e:	80 e0       	ldi	r24, 0x00	; 0
    6380:	05 c0       	rjmp	.+10     	; 0x638c <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    6382:	84 e0       	ldi	r24, 0x04	; 4
    6384:	03 c0       	rjmp	.+6      	; 0x638c <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    6386:	81 e0       	ldi	r24, 0x01	; 1
    6388:	01 c0       	rjmp	.+2      	; 0x638c <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    638a:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    638c:	0f 90       	pop	r0
    638e:	df 91       	pop	r29
    6390:	cf 91       	pop	r28
    6392:	1f 91       	pop	r17
    6394:	0f 91       	pop	r16
    6396:	ff 90       	pop	r15
    6398:	ef 90       	pop	r14
    639a:	df 90       	pop	r13
    639c:	cf 90       	pop	r12
    639e:	08 95       	ret

000063a0 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    63a0:	df 92       	push	r13
    63a2:	ef 92       	push	r14
    63a4:	ff 92       	push	r15
    63a6:	0f 93       	push	r16
    63a8:	1f 93       	push	r17
    63aa:	cf 93       	push	r28
    63ac:	df 93       	push	r29
    63ae:	7c 01       	movw	r14, r24
    63b0:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    63b2:	0e 94 4c 31 	call	0x6298	; 0x6298 <isEepromFormatted>
    63b6:	88 23       	and	r24, r24
    63b8:	89 f1       	breq	.+98     	; 0x641c <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    63ba:	8f ef       	ldi	r24, 0xFF	; 255
    63bc:	e8 16       	cp	r14, r24
    63be:	f8 06       	cpc	r15, r24
    63c0:	79 f1       	breq	.+94     	; 0x6420 <EepromReadBlock+0x80>
    63c2:	00 e0       	ldi	r16, 0x00	; 0
    63c4:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    63c6:	c8 01       	movw	r24, r16
    63c8:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <ReadEeprom>
    63cc:	d8 2e       	mov	r13, r24
    63ce:	c8 01       	movw	r24, r16
    63d0:	01 96       	adiw	r24, 0x01	; 1
    63d2:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <ReadEeprom>
    63d6:	28 2f       	mov	r18, r24
    63d8:	30 e0       	ldi	r19, 0x00	; 0
    63da:	32 2f       	mov	r19, r18
    63dc:	22 27       	eor	r18, r18
    63de:	2d 0d       	add	r18, r13
    63e0:	31 1d       	adc	r19, r1
		if(id==blockId){
    63e2:	2e 15       	cp	r18, r14
    63e4:	3f 05       	cpc	r19, r15
    63e6:	39 f4       	brne	.+14     	; 0x63f6 <EepromReadBlock+0x56>
    63e8:	7e 01       	movw	r14, r28
    63ea:	80 e2       	ldi	r24, 0x20	; 32
    63ec:	e8 0e       	add	r14, r24
    63ee:	f1 1c       	adc	r15, r1
    63f0:	0c 1b       	sub	r16, r28
    63f2:	1d 0b       	sbc	r17, r29
    63f4:	08 c0       	rjmp	.+16     	; 0x6406 <EepromReadBlock+0x66>
    63f6:	00 5e       	subi	r16, 0xE0	; 224
    63f8:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    63fa:	01 15       	cp	r16, r1
    63fc:	84 e0       	ldi	r24, 0x04	; 4
    63fe:	18 07       	cpc	r17, r24
    6400:	11 f7       	brne	.-60     	; 0x63c6 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    6402:	83 e0       	ldi	r24, 0x03	; 3
    6404:	0e c0       	rjmp	.+28     	; 0x6422 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    6406:	ce 01       	movw	r24, r28
    6408:	80 0f       	add	r24, r16
    640a:	91 1f       	adc	r25, r17
    640c:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <ReadEeprom>
    6410:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    6412:	ce 15       	cp	r28, r14
    6414:	df 05       	cpc	r29, r15
    6416:	b9 f7       	brne	.-18     	; 0x6406 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    6418:	80 e0       	ldi	r24, 0x00	; 0
    641a:	03 c0       	rjmp	.+6      	; 0x6422 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    641c:	84 e0       	ldi	r24, 0x04	; 4
    641e:	01 c0       	rjmp	.+2      	; 0x6422 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    6420:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    6422:	df 91       	pop	r29
    6424:	cf 91       	pop	r28
    6426:	1f 91       	pop	r17
    6428:	0f 91       	pop	r16
    642a:	ff 90       	pop	r15
    642c:	ef 90       	pop	r14
    642e:	df 90       	pop	r13
    6430:	08 95       	ret

00006432 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    6432:	fc 01       	movw	r30, r24
    6434:	45 87       	std	Z+13, r20	; 0x0d
    6436:	08 95       	ret

00006438 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    6438:	e2 e5       	ldi	r30, 0x52	; 82
    643a:	ff e0       	ldi	r31, 0x0F	; 15
    643c:	81 e0       	ldi	r24, 0x01	; 1
    643e:	91 e0       	ldi	r25, 0x01	; 1
    6440:	95 8b       	std	Z+21, r25	; 0x15
    6442:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    6444:	43 8b       	std	Z+19, r20	; 0x13
    6446:	08 95       	ret

00006448 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    6448:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    644a:	90 81       	ld	r25, Z
    644c:	9f 75       	andi	r25, 0x5F	; 95
    644e:	90 83       	st	Z, r25
    6450:	08 95       	ret

00006452 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    6452:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    6454:	90 81       	ld	r25, Z
    6456:	90 64       	ori	r25, 0x40	; 64
    6458:	90 83       	st	Z, r25
    645a:	08 95       	ret

0000645c <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    645c:	fc 01       	movw	r30, r24
    645e:	44 87       	std	Z+12, r20	; 0x0c
    6460:	08 95       	ret

00006462 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    6462:	fc 01       	movw	r30, r24
    6464:	47 83       	std	Z+7, r20	; 0x07
    6466:	08 95       	ret

00006468 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    6468:	fc 01       	movw	r30, r24
    646a:	40 87       	std	Z+8, r20	; 0x08
    646c:	08 95       	ret

0000646e <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    646e:	1f 93       	push	r17
    6470:	cf 93       	push	r28
    6472:	df 93       	push	r29
    6474:	ec 01       	movw	r28, r24
    6476:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    6478:	29 81       	ldd	r18, Y+1	; 0x01
    647a:	30 e0       	ldi	r19, 0x00	; 0
    647c:	f9 01       	movw	r30, r18
    647e:	ee 0f       	add	r30, r30
    6480:	ff 1f       	adc	r31, r31
    6482:	e8 5f       	subi	r30, 0xF8	; 248
    6484:	f2 49       	sbci	r31, 0x92	; 146
    6486:	65 91       	lpm	r22, Z+
    6488:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    648a:	f9 01       	movw	r30, r18
    648c:	e4 0f       	add	r30, r20
    648e:	f1 1d       	adc	r31, r1
    6490:	47 fd       	sbrc	r20, 7
    6492:	fa 95       	dec	r31
    6494:	ee 0f       	add	r30, r30
    6496:	ff 1f       	adc	r31, r31
    6498:	e8 5f       	subi	r30, 0xF8	; 248
    649a:	f2 49       	sbci	r31, 0x92	; 146
    649c:	85 91       	lpm	r24, Z+
    649e:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    64a0:	86 1b       	sub	r24, r22
    64a2:	97 0b       	sbc	r25, r23
    64a4:	60 91 89 0f 	lds	r22, 0x0F89
    64a8:	70 e0       	ldi	r23, 0x00	; 0
    64aa:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <__divmodhi4>
	if(delta==0)delta++;
    64ae:	61 15       	cp	r22, r1
    64b0:	71 05       	cpc	r23, r1
    64b2:	11 f4       	brne	.+4      	; 0x64b8 <PatchCommand11+0x4a>
    64b4:	61 e0       	ldi	r22, 0x01	; 1
    64b6:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    64b8:	86 e0       	ldi	r24, 0x06	; 6
    64ba:	18 9f       	mul	r17, r24
    64bc:	f0 01       	movw	r30, r0
    64be:	11 24       	eor	r1, r1
    64c0:	ee 5a       	subi	r30, 0xAE	; 174
    64c2:	f0 4f       	sbci	r31, 0xF0	; 240
    64c4:	81 81       	ldd	r24, Z+1	; 0x01
    64c6:	92 81       	ldd	r25, Z+2	; 0x02
    64c8:	86 0f       	add	r24, r22
    64ca:	97 1f       	adc	r25, r23
    64cc:	92 83       	std	Z+2, r25	; 0x02
    64ce:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    64d0:	7b 83       	std	Y+3, r23	; 0x03
    64d2:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    64d4:	88 81       	ld	r24, Y
    64d6:	88 60       	ori	r24, 0x08	; 8
    64d8:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    64da:	89 81       	ldd	r24, Y+1	; 0x01
    64dc:	48 0f       	add	r20, r24
    64de:	4c 83       	std	Y+4, r20	; 0x04
}
    64e0:	df 91       	pop	r29
    64e2:	cf 91       	pop	r28
    64e4:	1f 91       	pop	r17
    64e6:	08 95       	ret

000064e8 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    64e8:	40 93 89 0f 	sts	0x0F89, r20
    64ec:	08 95       	ret

000064ee <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    64ee:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    64f0:	64 2f       	mov	r22, r20
    64f2:	0c 94 1f 36 	jmp	0x6c3e	; 0x6c3e <SetMixerWave>

000064f6 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    64f6:	fc 01       	movw	r30, r24
    64f8:	86 2f       	mov	r24, r22
	track->note+=param;
    64fa:	91 81       	ldd	r25, Z+1	; 0x01
    64fc:	64 2f       	mov	r22, r20
    64fe:	69 0f       	add	r22, r25
    6500:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    6502:	0c 94 08 36 	jmp	0x6c10	; 0x6c10 <SetMixerNote>

00006506 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    6506:	fc 01       	movw	r30, r24
    6508:	86 2f       	mov	r24, r22
	track->note-=param;
    650a:	91 81       	ldd	r25, Z+1	; 0x01
    650c:	69 2f       	mov	r22, r25
    650e:	64 1b       	sub	r22, r20
    6510:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    6512:	0c 94 08 36 	jmp	0x6c10	; 0x6c10 <SetMixerNote>

00006516 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    6516:	0f 93       	push	r16
    6518:	1f 93       	push	r17
    651a:	cf 93       	push	r28
    651c:	df 93       	push	r29
    651e:	1f 92       	push	r1
    6520:	cd b7       	in	r28, 0x3d	; 61
    6522:	de b7       	in	r29, 0x3e	; 62
    6524:	8c 01       	movw	r16, r24
    6526:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    6528:	64 2f       	mov	r22, r20
    652a:	49 83       	std	Y+1, r20	; 0x01
    652c:	0e 94 08 36 	call	0x6c10	; 0x6c10 <SetMixerNote>
	track->note=param;
    6530:	49 81       	ldd	r20, Y+1	; 0x01
    6532:	f8 01       	movw	r30, r16
    6534:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    6536:	80 81       	ld	r24, Z
    6538:	87 7f       	andi	r24, 0xF7	; 247
    653a:	80 83       	st	Z, r24
}
    653c:	0f 90       	pop	r0
    653e:	df 91       	pop	r29
    6540:	cf 91       	pop	r28
    6542:	1f 91       	pop	r17
    6544:	0f 91       	pop	r16
    6546:	08 95       	ret

00006548 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    6548:	90 93 df 0f 	sts	0x0FDF, r25
    654c:	80 93 de 0f 	sts	0x0FDE, r24

	masterVolume=DEFAULT_MASTER_VOL;
    6550:	8f e6       	ldi	r24, 0x6F	; 111
    6552:	80 93 e1 0f 	sts	0x0FE1, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    6556:	10 92 40 0d 	sts	0x0D40, r1
    655a:	e2 e9       	ldi	r30, 0x92	; 146
    655c:	ff e0       	ldi	r31, 0x0F	; 15

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    655e:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    6560:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    6562:	28 e1       	ldi	r18, 0x18	; 24
    6564:	df 01       	movw	r26, r30
    6566:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    6568:	8c 93       	st	X, r24
    656a:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    656c:	1c 92       	st	X, r1
    656e:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    6570:	9c 93       	st	X, r25
    6572:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    6574:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    6576:	10 82       	st	Z, r1
    6578:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    657a:	2c 93       	st	X, r18
    657c:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    657e:	8c 93       	st	X, r24
    6580:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    6582:	3f e0       	ldi	r19, 0x0F	; 15
    6584:	ea 3e       	cpi	r30, 0xEA	; 234
    6586:	f3 07       	cpc	r31, r19
    6588:	69 f7       	brne	.-38     	; 0x6564 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    658a:	08 95       	ret

0000658c <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    658c:	e4 e8       	ldi	r30, 0x84	; 132
    658e:	ff e0       	ldi	r31, 0x0F	; 15
    6590:	8a ef       	ldi	r24, 0xFA	; 250
    6592:	85 87       	std	Z+13, r24	; 0x0d
    6594:	83 a3       	std	Z+35, r24	; 0x23
    6596:	81 af       	std	Z+57, r24	; 0x39
    6598:	80 93 d3 0f 	sts	0x0FD3, r24
	}

	playSong=false;
    659c:	10 92 40 0d 	sts	0x0D40, r1
    65a0:	08 95       	ret

000065a2 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    65a2:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    65a4:	ed 91       	ld	r30, X+
    65a6:	fc 91       	ld	r31, X
    65a8:	11 97       	sbiw	r26, 0x01	; 1
    65aa:	9f 01       	movw	r18, r30
    65ac:	2f 5f       	subi	r18, 0xFF	; 255
    65ae:	3f 4f       	sbci	r19, 0xFF	; 255
    65b0:	11 96       	adiw	r26, 0x01	; 1
    65b2:	3c 93       	st	X, r19
    65b4:	2e 93       	st	-X, r18
    65b6:	e4 91       	lpm	r30, Z
    65b8:	e7 fd       	sbrc	r30, 7
    65ba:	03 c0       	rjmp	.+6      	; 0x65c2 <ReadVarLen+0x20>
    65bc:	8e 2f       	mov	r24, r30
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	08 95       	ret
    {
       value &= 0x7F;
    65c2:	ef 77       	andi	r30, 0x7F	; 127
    65c4:	8e 2f       	mov	r24, r30
    65c6:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    65c8:	96 95       	lsr	r25
    65ca:	98 2f       	mov	r25, r24
    65cc:	88 27       	eor	r24, r24
    65ce:	97 95       	ror	r25
    65d0:	87 95       	ror	r24
    65d2:	2f 5f       	subi	r18, 0xFF	; 255
    65d4:	3f 4f       	sbci	r19, 0xFF	; 255
    65d6:	f9 01       	movw	r30, r18
    65d8:	31 97       	sbiw	r30, 0x01	; 1
    65da:	e4 91       	lpm	r30, Z
    65dc:	4e 2f       	mov	r20, r30
    65de:	4f 77       	andi	r20, 0x7F	; 127
    65e0:	84 0f       	add	r24, r20
    65e2:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    65e4:	e7 fd       	sbrc	r30, 7
    65e6:	f0 cf       	rjmp	.-32     	; 0x65c8 <ReadVarLen+0x26>
    65e8:	2d 93       	st	X+, r18
    65ea:	3c 93       	st	X, r19
    }


    return value;
}
    65ec:	08 95       	ret

000065ee <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    65ee:	ff 92       	push	r15
    65f0:	0f 93       	push	r16
    65f2:	1f 93       	push	r17
    65f4:	cf 93       	push	r28
    65f6:	df 93       	push	r29
    65f8:	18 2f       	mov	r17, r24
    65fa:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    65fc:	c8 2f       	mov	r28, r24
    65fe:	d0 e0       	ldi	r29, 0x00	; 0
    6600:	86 e1       	ldi	r24, 0x16	; 22
    6602:	18 9f       	mul	r17, r24
    6604:	f0 01       	movw	r30, r0
    6606:	11 24       	eor	r1, r1
    6608:	ec 57       	subi	r30, 0x7C	; 124
    660a:	f0 4f       	sbci	r31, 0xF0	; 240
    660c:	90 81       	ld	r25, Z
    660e:	f9 2e       	mov	r15, r25
    6610:	ff 1c       	adc	r15, r15
    6612:	ff 24       	eor	r15, r15
    6614:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    6616:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    6618:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    661a:	8f ef       	ldi	r24, 0xFF	; 255
    661c:	84 87       	std	Z+12, r24	; 0x0c
	track->noteVol=volume;
    661e:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    6620:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    6622:	97 7b       	andi	r25, 0xB7	; 183
    6624:	90 62       	ori	r25, 0x20	; 32
    6626:	90 83       	st	Z, r25
	track->tremoloLevel=0;
    6628:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    662a:	81 87       	std	Z+9, r24	; 0x09
	track->note=note;
    662c:	21 83       	std	Z+1, r18	; 0x01

	#else

		#if MIXER_CHAN4_TYPE == 0
			//if it's a noise channel
			if(channel==3){
    662e:	13 30       	cpi	r17, 0x03	; 3
    6630:	69 f4       	brne	.+26     	; 0x664c <TriggerCommon+0x5e>
				if(!isFx) patch=note;
    6632:	f1 10       	cpse	r15, r1
    6634:	01 c0       	rjmp	.+2      	; 0x6638 <TriggerCommon+0x4a>
    6636:	02 2f       	mov	r16, r18
				mixer.channels.type.noise.barrel=0x0101;				
    6638:	81 e0       	ldi	r24, 0x01	; 1
    663a:	91 e0       	ldi	r25, 0x01	; 1
    663c:	90 93 67 0f 	sts	0x0F67, r25
    6640:	80 93 66 0f 	sts	0x0F66, r24
				mixer.channels.type.noise.params=1; //default 
    6644:	81 e0       	ldi	r24, 0x01	; 1
    6646:	80 93 65 0f 	sts	0x0F65, r24
    664a:	08 c0       	rjmp	.+16     	; 0x665c <TriggerCommon+0x6e>
			}else{
				SetMixerNote(channel,note);
    664c:	62 2f       	mov	r22, r18
    664e:	81 2f       	mov	r24, r17
    6650:	0e 94 08 36 	call	0x6c10	; 0x6c10 <SetMixerNote>
				SetMixerWave(channel,0);
    6654:	60 e0       	ldi	r22, 0x00	; 0
    6656:	81 2f       	mov	r24, r17
    6658:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <SetMixerWave>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    665c:	86 e1       	ldi	r24, 0x16	; 22
    665e:	8c 9f       	mul	r24, r28
    6660:	f0 01       	movw	r30, r0
    6662:	8d 9f       	mul	r24, r29
    6664:	f0 0d       	add	r31, r0
    6666:	11 24       	eor	r1, r1
    6668:	ec 57       	subi	r30, 0x7C	; 124
    666a:	f0 4f       	sbci	r31, 0xF0	; 240

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    666c:	ff 20       	and	r15, r15
    666e:	11 f0       	breq	.+4      	; 0x6674 <TriggerCommon+0x86>
		track->fxPatchNo=patch;
    6670:	07 87       	std	Z+15, r16	; 0x0f
    6672:	01 c0       	rjmp	.+2      	; 0x6676 <TriggerCommon+0x88>
	}else{
		track->patchNo=patch;	
    6674:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    6676:	e0 91 de 0f 	lds	r30, 0x0FDE
    667a:	f0 91 df 0f 	lds	r31, 0x0FDF
    667e:	89 e0       	ldi	r24, 0x09	; 9
    6680:	08 9f       	mul	r16, r24
    6682:	e0 0d       	add	r30, r0
    6684:	f1 1d       	adc	r31, r1
    6686:	11 24       	eor	r1, r1
    6688:	33 96       	adiw	r30, 0x03	; 3
    668a:	85 91       	lpm	r24, Z+
    668c:	94 91       	lpm	r25, Z
	if(pos==NULL){
    668e:	00 97       	sbiw	r24, 0x00	; 0
    6690:	59 f4       	brne	.+22     	; 0x66a8 <TriggerCommon+0xba>
		track->patchCommandStreamPos=NULL;
    6692:	86 e1       	ldi	r24, 0x16	; 22
    6694:	8c 9f       	mul	r24, r28
    6696:	f0 01       	movw	r30, r0
    6698:	8d 9f       	mul	r24, r29
    669a:	f0 0d       	add	r31, r0
    669c:	11 24       	eor	r1, r1
    669e:	ec 57       	subi	r30, 0x7C	; 124
    66a0:	f0 4f       	sbci	r31, 0xF0	; 240
    66a2:	15 8a       	std	Z+21, r1	; 0x15
    66a4:	14 8a       	std	Z+20, r1	; 0x14
    66a6:	0e c0       	rjmp	.+28     	; 0x66c4 <TriggerCommon+0xd6>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    66a8:	fc 01       	movw	r30, r24
    66aa:	24 91       	lpm	r18, Z
    66ac:	36 e1       	ldi	r19, 0x16	; 22
    66ae:	3c 9f       	mul	r19, r28
    66b0:	f0 01       	movw	r30, r0
    66b2:	3d 9f       	mul	r19, r29
    66b4:	f0 0d       	add	r31, r0
    66b6:	11 24       	eor	r1, r1
    66b8:	ec 57       	subi	r30, 0x7C	; 124
    66ba:	f0 4f       	sbci	r31, 0xF0	; 240
    66bc:	21 8b       	std	Z+17, r18	; 0x11
    66be:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    66c0:	95 8b       	std	Z+21, r25	; 0x15
    66c2:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    66c4:	df 91       	pop	r29
    66c6:	cf 91       	pop	r28
    66c8:	1f 91       	pop	r17
    66ca:	0f 91       	pop	r16
    66cc:	ff 90       	pop	r15
    66ce:	08 95       	ret

000066d0 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    66d0:	98 2f       	mov	r25, r24
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    66d2:	e0 91 de 0f 	lds	r30, 0x0FDE
    66d6:	f0 91 df 0f 	lds	r31, 0x0FDF
    66da:	29 e0       	ldi	r18, 0x09	; 9
    66dc:	82 9f       	mul	r24, r18
    66de:	e0 0d       	add	r30, r0
    66e0:	f1 1d       	adc	r31, r1
    66e2:	11 24       	eor	r1, r1
    66e4:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    66e6:	e1 30       	cpi	r30, 0x01	; 1
    66e8:	e9 f0       	breq	.+58     	; 0x6724 <TriggerFx+0x54>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    66ea:	e2 30       	cpi	r30, 0x02	; 2
    66ec:	e9 f0       	breq	.+58     	; 0x6728 <TriggerFx+0x58>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    66ee:	20 91 9a 0f 	lds	r18, 0x0F9A
    66f2:	27 ff       	sbrs	r18, 7
    66f4:	1d c0       	rjmp	.+58     	; 0x6730 <TriggerFx+0x60>
    66f6:	20 91 a9 0f 	lds	r18, 0x0FA9
    66fa:	28 13       	cpse	r18, r24
    66fc:	02 c0       	rjmp	.+4      	; 0x6702 <TriggerFx+0x32>
    66fe:	41 11       	cpse	r20, r1
    6700:	17 c0       	rjmp	.+46     	; 0x6730 <TriggerFx+0x60>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    6702:	20 91 b0 0f 	lds	r18, 0x0FB0
    6706:	27 ff       	sbrs	r18, 7
    6708:	11 c0       	rjmp	.+34     	; 0x672c <TriggerFx+0x5c>
    670a:	20 91 bf 0f 	lds	r18, 0x0FBF
    670e:	29 13       	cpse	r18, r25
    6710:	02 c0       	rjmp	.+4      	; 0x6716 <TriggerFx+0x46>
    6712:	41 11       	cpse	r20, r1
    6714:	0b c0       	rjmp	.+22     	; 0x672c <TriggerFx+0x5c>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    6716:	20 91 ad 0f 	lds	r18, 0x0FAD
    671a:	80 91 c3 0f 	lds	r24, 0x0FC3
    671e:	82 17       	cp	r24, r18
    6720:	28 f4       	brcc	.+10     	; 0x672c <TriggerFx+0x5c>
    6722:	06 c0       	rjmp	.+12     	; 0x6730 <TriggerFx+0x60>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    6724:	83 e0       	ldi	r24, 0x03	; 3
    6726:	05 c0       	rjmp	.+10     	; 0x6732 <TriggerFx+0x62>
	}else if(type==2){
		channel=4;
    6728:	84 e0       	ldi	r24, 0x04	; 4
    672a:	03 c0       	rjmp	.+6      	; 0x6732 <TriggerFx+0x62>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    672c:	82 e0       	ldi	r24, 0x02	; 2
    672e:	01 c0       	rjmp	.+2      	; 0x6732 <TriggerFx+0x62>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    6730:	81 e0       	ldi	r24, 0x01	; 1
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    6732:	26 e1       	ldi	r18, 0x16	; 22
    6734:	82 9f       	mul	r24, r18
    6736:	f0 01       	movw	r30, r0
    6738:	11 24       	eor	r1, r1
    673a:	ec 57       	subi	r30, 0x7C	; 124
    673c:	f0 4f       	sbci	r31, 0xF0	; 240
    673e:	20 81       	ld	r18, Z
    6740:	20 68       	ori	r18, 0x80	; 128
    6742:	20 83       	st	Z, r18
	TriggerCommon(channel,patch,volume,80);
    6744:	20 e5       	ldi	r18, 0x50	; 80
    6746:	46 2f       	mov	r20, r22
    6748:	69 2f       	mov	r22, r25
    674a:	0c 94 f7 32 	jmp	0x65ee	; 0x65ee <TriggerCommon>

0000674e <TriggerNote>:
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    674e:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    6750:	a8 2f       	mov	r26, r24
    6752:	b0 e0       	ldi	r27, 0x00	; 0
    6754:	96 e1       	ldi	r25, 0x16	; 22
    6756:	89 9f       	mul	r24, r25
    6758:	f0 01       	movw	r30, r0
    675a:	11 24       	eor	r1, r1
    675c:	ec 57       	subi	r30, 0x7C	; 124
    675e:	f0 4f       	sbci	r31, 0xF0	; 240
    6760:	90 81       	ld	r25, Z
    6762:	95 ff       	sbrs	r25, 5
    6764:	02 c0       	rjmp	.+4      	; 0x676a <TriggerNote+0x1c>
    6766:	97 fd       	sbrc	r25, 7
    6768:	28 c0       	rjmp	.+80     	; 0x67ba <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    676a:	31 11       	cpse	r19, r1
    676c:	18 c0       	rjmp	.+48     	; 0x679e <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    676e:	86 e1       	ldi	r24, 0x16	; 22
    6770:	8a 9f       	mul	r24, r26
    6772:	f0 01       	movw	r30, r0
    6774:	8b 9f       	mul	r24, r27
    6776:	f0 0d       	add	r31, r0
    6778:	11 24       	eor	r1, r1
    677a:	ec 57       	subi	r30, 0x7C	; 124
    677c:	f0 4f       	sbci	r31, 0xF0	; 240
    677e:	85 85       	ldd	r24, Z+13	; 0x0d
    6780:	81 11       	cpse	r24, r1
    6782:	02 c0       	rjmp	.+4      	; 0x6788 <TriggerNote+0x3a>
    6784:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    6786:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    6788:	86 e1       	ldi	r24, 0x16	; 22
    678a:	8a 9f       	mul	r24, r26
    678c:	f0 01       	movw	r30, r0
    678e:	8b 9f       	mul	r24, r27
    6790:	f0 0d       	add	r31, r0
    6792:	11 24       	eor	r1, r1
    6794:	ec 57       	subi	r30, 0x7C	; 124
    6796:	f0 4f       	sbci	r31, 0xF0	; 240
    6798:	9f 7b       	andi	r25, 0xBF	; 191
    679a:	90 83       	st	Z, r25
    679c:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    679e:	26 e1       	ldi	r18, 0x16	; 22
    67a0:	2a 9f       	mul	r18, r26
    67a2:	f0 01       	movw	r30, r0
    67a4:	2b 9f       	mul	r18, r27
    67a6:	f0 0d       	add	r31, r0
    67a8:	11 24       	eor	r1, r1
    67aa:	ec 57       	subi	r30, 0x7C	; 124
    67ac:	f0 4f       	sbci	r31, 0xF0	; 240
    67ae:	9f 77       	andi	r25, 0x7F	; 127
    67b0:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    67b2:	24 2f       	mov	r18, r20
    67b4:	43 2f       	mov	r20, r19
    67b6:	0c 94 f7 32 	jmp	0x65ee	; 0x65ee <TriggerCommon>
    67ba:	08 95       	ret

000067bc <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    67bc:	5f 92       	push	r5
    67be:	6f 92       	push	r6
    67c0:	7f 92       	push	r7
    67c2:	8f 92       	push	r8
    67c4:	9f 92       	push	r9
    67c6:	af 92       	push	r10
    67c8:	bf 92       	push	r11
    67ca:	cf 92       	push	r12
    67cc:	df 92       	push	r13
    67ce:	ef 92       	push	r14
    67d0:	ff 92       	push	r15
    67d2:	0f 93       	push	r16
    67d4:	1f 93       	push	r17
    67d6:	cf 93       	push	r28
    67d8:	df 93       	push	r29
    67da:	c4 e8       	ldi	r28, 0x84	; 132
    67dc:	df e0       	ldi	r29, 0x0F	; 15
    67de:	82 e5       	ldi	r24, 0x52	; 82
    67e0:	e8 2e       	mov	r14, r24
    67e2:	8f e0       	ldi	r24, 0x0F	; 15
    67e4:	f8 2e       	mov	r15, r24
    67e6:	d7 01       	movw	r26, r14
    67e8:	9e 01       	movw	r18, r28
    67ea:	40 e0       	ldi	r20, 0x00	; 0
    67ec:	50 e0       	ldi	r21, 0x00	; 0
    67ee:	ca 01       	movw	r24, r20
    67f0:	8c 57       	subi	r24, 0x7C	; 124
    67f2:	90 4f       	sbci	r25, 0xF0	; 240
    67f4:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    67f6:	fc 01       	movw	r30, r24
    67f8:	85 85       	ldd	r24, Z+13	; 0x0d
    67fa:	88 23       	and	r24, r24
    67fc:	91 f0       	breq	.+36     	; 0x6822 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    67fe:	64 85       	ldd	r22, Z+12	; 0x0c
    6800:	99 27       	eor	r25, r25
    6802:	87 fd       	sbrc	r24, 7
    6804:	90 95       	com	r25
    6806:	86 0f       	add	r24, r22
    6808:	91 1d       	adc	r25, r1
    680a:	8f 3f       	cpi	r24, 0xFF	; 255
    680c:	91 05       	cpc	r25, r1
    680e:	19 f0       	breq	.+6      	; 0x6816 <ProcessMusic+0x5a>
    6810:	14 f0       	brlt	.+4      	; 0x6816 <ProcessMusic+0x5a>
    6812:	8f ef       	ldi	r24, 0xFF	; 255
    6814:	90 e0       	ldi	r25, 0x00	; 0
    6816:	97 ff       	sbrs	r25, 7
    6818:	02 c0       	rjmp	.+4      	; 0x681e <ProcessMusic+0x62>
    681a:	80 e0       	ldi	r24, 0x00	; 0
    681c:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    681e:	f6 01       	movw	r30, r12
    6820:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    6822:	f9 01       	movw	r30, r18
    6824:	10 81       	ld	r17, Z
    6826:	13 ff       	sbrs	r17, 3
    6828:	29 c0       	rjmp	.+82     	; 0x687c <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    682a:	62 81       	ldd	r22, Z+2	; 0x02
    682c:	73 81       	ldd	r23, Z+3	; 0x03
    682e:	11 96       	adiw	r26, 0x01	; 1
    6830:	8d 91       	ld	r24, X+
    6832:	9c 91       	ld	r25, X
    6834:	12 97       	sbiw	r26, 0x02	; 2
    6836:	86 0f       	add	r24, r22
    6838:	97 1f       	adc	r25, r23
    683a:	12 96       	adiw	r26, 0x02	; 2
    683c:	9c 93       	st	X, r25
    683e:	8e 93       	st	-X, r24
    6840:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    6842:	f6 01       	movw	r30, r12
    6844:	04 81       	ldd	r16, Z+4	; 0x04
    6846:	e0 2f       	mov	r30, r16
    6848:	f0 e0       	ldi	r31, 0x00	; 0
    684a:	ee 0f       	add	r30, r30
    684c:	ff 1f       	adc	r31, r31
    684e:	e8 5f       	subi	r30, 0xF8	; 248
    6850:	f2 49       	sbci	r31, 0x92	; 146
    6852:	c5 90       	lpm	r12, Z+
    6854:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    6856:	16 16       	cp	r1, r22
    6858:	17 06       	cpc	r1, r23
    685a:	24 f4       	brge	.+8      	; 0x6864 <ProcessMusic+0xa8>
    685c:	8c 15       	cp	r24, r12
    685e:	9d 05       	cpc	r25, r13
    6860:	30 f4       	brcc	.+12     	; 0x686e <ProcessMusic+0xb2>
    6862:	0c c0       	rjmp	.+24     	; 0x687c <ProcessMusic+0xc0>
    6864:	67 2b       	or	r22, r23
    6866:	51 f0       	breq	.+20     	; 0x687c <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    6868:	c8 16       	cp	r12, r24
    686a:	d9 06       	cpc	r13, r25
    686c:	38 f0       	brcs	.+14     	; 0x687c <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    686e:	12 96       	adiw	r26, 0x02	; 2
    6870:	dc 92       	st	X, r13
    6872:	ce 92       	st	-X, r12
    6874:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    6876:	17 7f       	andi	r17, 0xF7	; 247
    6878:	f9 01       	movw	r30, r18
    687a:	10 83       	st	Z, r17
    687c:	4a 5e       	subi	r20, 0xEA	; 234
    687e:	5f 4f       	sbci	r21, 0xFF	; 255
    6880:	2a 5e       	subi	r18, 0xEA	; 234
    6882:	3f 4f       	sbci	r19, 0xFF	; 255
    6884:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    6886:	48 35       	cpi	r20, 0x58	; 88
    6888:	51 05       	cpc	r21, r1
    688a:	09 f0       	breq	.+2      	; 0x688e <ProcessMusic+0xd2>
    688c:	b0 cf       	rjmp	.-160    	; 0x67ee <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    688e:	80 91 40 0d 	lds	r24, 0x0D40
    6892:	88 23       	and	r24, r24
    6894:	09 f4       	brne	.+2      	; 0x6898 <ProcessMusic+0xdc>
    6896:	cb c0       	rjmp	.+406    	; 0x6a2e <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    6898:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    689a:	80 91 dc 0f 	lds	r24, 0x0FDC
    689e:	90 91 dd 0f 	lds	r25, 0x0FDD
    68a2:	20 91 e2 0f 	lds	r18, 0x0FE2
    68a6:	30 91 e3 0f 	lds	r19, 0x0FE3
    68aa:	82 17       	cp	r24, r18
    68ac:	93 07       	cpc	r25, r19
    68ae:	09 f0       	breq	.+2      	; 0x68b2 <ProcessMusic+0xf6>
    68b0:	b9 c0       	rjmp	.+370    	; 0x6a24 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    68b2:	20 91 e5 0f 	lds	r18, 0x0FE5
    68b6:	30 91 e6 0f 	lds	r19, 0x0FE6
    68ba:	b9 01       	movw	r22, r18
    68bc:	6f 5f       	subi	r22, 0xFF	; 255
    68be:	7f 4f       	sbci	r23, 0xFF	; 255
    68c0:	70 93 e6 0f 	sts	0x0FE6, r23
    68c4:	60 93 e5 0f 	sts	0x0FE5, r22
    68c8:	f9 01       	movw	r30, r18
    68ca:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    68cc:	4f 3f       	cpi	r20, 0xFF	; 255
    68ce:	79 f5       	brne	.+94     	; 0x692e <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    68d0:	a9 01       	movw	r20, r18
    68d2:	4e 5f       	subi	r20, 0xFE	; 254
    68d4:	5f 4f       	sbci	r21, 0xFF	; 255
    68d6:	50 93 e6 0f 	sts	0x0FE6, r21
    68da:	40 93 e5 0f 	sts	0x0FE5, r20
    68de:	fb 01       	movw	r30, r22
    68e0:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    68e2:	6f 32       	cpi	r22, 0x2F	; 47
    68e4:	19 f4       	brne	.+6      	; 0x68ec <ProcessMusic+0x130>
						playSong=false;
    68e6:	10 92 40 0d 	sts	0x0D40, r1
						break;	
    68ea:	9c c0       	rjmp	.+312    	; 0x6a24 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    68ec:	66 30       	cpi	r22, 0x06	; 6
    68ee:	09 f0       	breq	.+2      	; 0x68f2 <ProcessMusic+0x136>
    68f0:	8c c0       	rjmp	.+280    	; 0x6a0a <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    68f2:	fa 01       	movw	r30, r20
    68f4:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    68f6:	c9 01       	movw	r24, r18
    68f8:	04 96       	adiw	r24, 0x04	; 4
    68fa:	90 93 e6 0f 	sts	0x0FE6, r25
    68fe:	80 93 e5 0f 	sts	0x0FE5, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    6902:	f9 01       	movw	r30, r18
    6904:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    6906:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    6908:	e3 35       	cpi	r30, 0x53	; 83
    690a:	29 f4       	brne	.+10     	; 0x6916 <ProcessMusic+0x15a>
							loopStart=songPos;
    690c:	90 93 e8 0f 	sts	0x0FE8, r25
    6910:	80 93 e7 0f 	sts	0x0FE7, r24
    6914:	7a c0       	rjmp	.+244    	; 0x6a0a <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    6916:	e5 34       	cpi	r30, 0x45	; 69
    6918:	09 f0       	breq	.+2      	; 0x691c <ProcessMusic+0x160>
    691a:	77 c0       	rjmp	.+238    	; 0x6a0a <ProcessMusic+0x24e>
							songPos=loopStart;
    691c:	80 91 e7 0f 	lds	r24, 0x0FE7
    6920:	90 91 e8 0f 	lds	r25, 0x0FE8
    6924:	90 93 e6 0f 	sts	0x0FE6, r25
    6928:	80 93 e5 0f 	sts	0x0FE5, r24
    692c:	6e c0       	rjmp	.+220    	; 0x6a0a <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    692e:	47 fd       	sbrc	r20, 7
    6930:	40 93 e0 0f 	sts	0x0FE0, r20
					channel=lastStatus&0x0f;
    6934:	90 91 e0 0f 	lds	r25, 0x0FE0
    6938:	89 2f       	mov	r24, r25
    693a:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    693c:	47 ff       	sbrs	r20, 7
    693e:	08 c0       	rjmp	.+16     	; 0x6950 <ProcessMusic+0x194>
    6940:	2e 5f       	subi	r18, 0xFE	; 254
    6942:	3f 4f       	sbci	r19, 0xFF	; 255
    6944:	30 93 e6 0f 	sts	0x0FE6, r19
    6948:	20 93 e5 0f 	sts	0x0FE5, r18
    694c:	fb 01       	movw	r30, r22
    694e:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    6950:	90 7f       	andi	r25, 0xF0	; 240
    6952:	90 3b       	cpi	r25, 0xB0	; 176
    6954:	e1 f0       	breq	.+56     	; 0x698e <ProcessMusic+0x1d2>
    6956:	90 3c       	cpi	r25, 0xC0	; 192
    6958:	09 f4       	brne	.+2      	; 0x695c <ProcessMusic+0x1a0>
    695a:	51 c0       	rjmp	.+162    	; 0x69fe <ProcessMusic+0x242>
    695c:	90 39       	cpi	r25, 0x90	; 144
    695e:	09 f0       	breq	.+2      	; 0x6962 <ProcessMusic+0x1a6>
    6960:	54 c0       	rjmp	.+168    	; 0x6a0a <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    6962:	e0 91 e5 0f 	lds	r30, 0x0FE5
    6966:	f0 91 e6 0f 	lds	r31, 0x0FE6
    696a:	9f 01       	movw	r18, r30
    696c:	2f 5f       	subi	r18, 0xFF	; 255
    696e:	3f 4f       	sbci	r19, 0xFF	; 255
    6970:	30 93 e6 0f 	sts	0x0FE6, r19
    6974:	20 93 e5 0f 	sts	0x0FE5, r18
    6978:	24 91       	lpm	r18, Z
    697a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    697c:	18 9f       	mul	r17, r24
    697e:	f0 01       	movw	r30, r0
    6980:	11 24       	eor	r1, r1
    6982:	ec 57       	subi	r30, 0x7C	; 124
    6984:	f0 4f       	sbci	r31, 0xF0	; 240
    6986:	66 85       	ldd	r22, Z+14	; 0x0e
    6988:	0e 94 a7 33 	call	0x674e	; 0x674e <TriggerNote>
    698c:	3e c0       	rjmp	.+124    	; 0x6a0a <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    698e:	e0 91 e5 0f 	lds	r30, 0x0FE5
    6992:	f0 91 e6 0f 	lds	r31, 0x0FE6
    6996:	9f 01       	movw	r18, r30
    6998:	2f 5f       	subi	r18, 0xFF	; 255
    699a:	3f 4f       	sbci	r19, 0xFF	; 255
    699c:	30 93 e6 0f 	sts	0x0FE6, r19
    69a0:	20 93 e5 0f 	sts	0x0FE5, r18
    69a4:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    69a6:	47 30       	cpi	r20, 0x07	; 7
    69a8:	49 f4       	brne	.+18     	; 0x69bc <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    69aa:	18 9f       	mul	r17, r24
    69ac:	d0 01       	movw	r26, r0
    69ae:	11 24       	eor	r1, r1
    69b0:	ac 57       	subi	r26, 0x7C	; 124
    69b2:	b0 4f       	sbci	r27, 0xF0	; 240
    69b4:	ee 0f       	add	r30, r30
    69b6:	1a 96       	adiw	r26, 0x0a	; 10
    69b8:	ec 93       	st	X, r30
    69ba:	27 c0       	rjmp	.+78     	; 0x6a0a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    69bc:	4b 30       	cpi	r20, 0x0B	; 11
    69be:	49 f4       	brne	.+18     	; 0x69d2 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    69c0:	18 9f       	mul	r17, r24
    69c2:	d0 01       	movw	r26, r0
    69c4:	11 24       	eor	r1, r1
    69c6:	ac 57       	subi	r26, 0x7C	; 124
    69c8:	b0 4f       	sbci	r27, 0xF0	; 240
    69ca:	ee 0f       	add	r30, r30
    69cc:	19 96       	adiw	r26, 0x09	; 9
    69ce:	ec 93       	st	X, r30
    69d0:	1c c0       	rjmp	.+56     	; 0x6a0a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    69d2:	4c 35       	cpi	r20, 0x5C	; 92
    69d4:	49 f4       	brne	.+18     	; 0x69e8 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    69d6:	18 9f       	mul	r17, r24
    69d8:	d0 01       	movw	r26, r0
    69da:	11 24       	eor	r1, r1
    69dc:	ac 57       	subi	r26, 0x7C	; 124
    69de:	b0 4f       	sbci	r27, 0xF0	; 240
    69e0:	ee 0f       	add	r30, r30
    69e2:	17 96       	adiw	r26, 0x07	; 7
    69e4:	ec 93       	st	X, r30
    69e6:	11 c0       	rjmp	.+34     	; 0x6a0a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    69e8:	44 36       	cpi	r20, 0x64	; 100
    69ea:	79 f4       	brne	.+30     	; 0x6a0a <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    69ec:	18 9f       	mul	r17, r24
    69ee:	d0 01       	movw	r26, r0
    69f0:	11 24       	eor	r1, r1
    69f2:	ac 57       	subi	r26, 0x7C	; 124
    69f4:	b0 4f       	sbci	r27, 0xF0	; 240
    69f6:	ee 0f       	add	r30, r30
    69f8:	18 96       	adiw	r26, 0x08	; 8
    69fa:	ec 93       	st	X, r30
    69fc:	06 c0       	rjmp	.+12     	; 0x6a0a <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    69fe:	18 9f       	mul	r17, r24
    6a00:	f0 01       	movw	r30, r0
    6a02:	11 24       	eor	r1, r1
    6a04:	ec 57       	subi	r30, 0x7C	; 124
    6a06:	f0 4f       	sbci	r31, 0xF0	; 240
    6a08:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    6a0a:	85 ee       	ldi	r24, 0xE5	; 229
    6a0c:	9f e0       	ldi	r25, 0x0F	; 15
    6a0e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <ReadVarLen>
    6a12:	90 93 e3 0f 	sts	0x0FE3, r25
    6a16:	80 93 e2 0f 	sts	0x0FE2, r24
				currDeltaTime=0;
    6a1a:	10 92 dd 0f 	sts	0x0FDD, r1
    6a1e:	10 92 dc 0f 	sts	0x0FDC, r1
    6a22:	3b cf       	rjmp	.-394    	; 0x689a <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    6a24:	01 96       	adiw	r24, 0x01	; 1
    6a26:	90 93 dd 0f 	sts	0x0FDD, r25
    6a2a:	80 93 dc 0f 	sts	0x0FDC, r24
    6a2e:	9a e8       	ldi	r25, 0x8A	; 138
    6a30:	a9 2e       	mov	r10, r25
    6a32:	9f e0       	ldi	r25, 0x0F	; 15
    6a34:	b9 2e       	mov	r11, r25
    6a36:	06 e9       	ldi	r16, 0x96	; 150
    6a38:	1f e0       	ldi	r17, 0x0F	; 15
    6a3a:	25 e9       	ldi	r18, 0x95	; 149
    6a3c:	c2 2e       	mov	r12, r18
    6a3e:	2f e0       	ldi	r18, 0x0F	; 15
    6a40:	d2 2e       	mov	r13, r18
    6a42:	37 e9       	ldi	r19, 0x97	; 151
    6a44:	83 2e       	mov	r8, r19
    6a46:	3f e0       	ldi	r19, 0x0F	; 15
    6a48:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    6a4a:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6a4c:	66 24       	eor	r6, r6
    6a4e:	6a 94       	dec	r6
    6a50:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    6a52:	88 81       	ld	r24, Y
    6a54:	86 fd       	sbrc	r24, 6
    6a56:	43 c0       	rjmp	.+134    	; 0x6ade <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    6a58:	8c 89       	ldd	r24, Y+20	; 0x14
    6a5a:	9d 89       	ldd	r25, Y+21	; 0x15
    6a5c:	89 2b       	or	r24, r25
    6a5e:	09 f4       	brne	.+2      	; 0x6a62 <ProcessMusic+0x2a6>
    6a60:	3a c0       	rjmp	.+116    	; 0x6ad6 <ProcessMusic+0x31a>
    6a62:	d8 01       	movw	r26, r16
    6a64:	9c 91       	ld	r25, X
    6a66:	f6 01       	movw	r30, r12
    6a68:	80 81       	ld	r24, Z
    6a6a:	98 17       	cp	r25, r24
    6a6c:	08 f4       	brcc	.+2      	; 0x6a70 <ProcessMusic+0x2b4>
    6a6e:	33 c0       	rjmp	.+102    	; 0x6ad6 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    6a70:	d8 01       	movw	r26, r16
    6a72:	9c 91       	ld	r25, X
    6a74:	f6 01       	movw	r30, r12
    6a76:	80 81       	ld	r24, Z
    6a78:	98 13       	cpse	r25, r24
    6a7a:	2d c0       	rjmp	.+90     	; 0x6ad6 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    6a7c:	ec 89       	ldd	r30, Y+20	; 0x14
    6a7e:	fd 89       	ldd	r31, Y+21	; 0x15
    6a80:	af 01       	movw	r20, r30
    6a82:	4f 5f       	subi	r20, 0xFF	; 255
    6a84:	5f 4f       	sbci	r21, 0xFF	; 255
    6a86:	5d 8b       	std	Y+21, r21	; 0x15
    6a88:	4c 8b       	std	Y+20, r20	; 0x14
    6a8a:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    6a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    6a8e:	31 f4       	brne	.+12     	; 0x6a9c <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    6a90:	88 81       	ld	r24, Y
    6a92:	8f 77       	andi	r24, 0x7F	; 127
    6a94:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    6a96:	1d 8a       	std	Y+21, r1	; 0x15
    6a98:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    6a9a:	1d c0       	rjmp	.+58     	; 0x6ad6 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    6a9c:	32 96       	adiw	r30, 0x02	; 2
    6a9e:	fd 8b       	std	Y+21, r31	; 0x15
    6aa0:	ec 8b       	std	Y+20, r30	; 0x14
    6aa2:	fa 01       	movw	r30, r20
    6aa4:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    6aa6:	e8 2f       	mov	r30, r24
    6aa8:	f0 e0       	ldi	r31, 0x00	; 0
    6aaa:	ee 0f       	add	r30, r30
    6aac:	ff 1f       	adc	r31, r31
    6aae:	e0 53       	subi	r30, 0x30	; 48
    6ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ab2:	25 91       	lpm	r18, Z+
    6ab4:	34 91       	lpm	r19, Z
    6ab6:	65 2d       	mov	r22, r5
    6ab8:	ce 01       	movw	r24, r28
    6aba:	f9 01       	movw	r30, r18
    6abc:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    6abe:	ec 89       	ldd	r30, Y+20	; 0x14
    6ac0:	fd 89       	ldd	r31, Y+21	; 0x15
    6ac2:	cf 01       	movw	r24, r30
    6ac4:	01 96       	adiw	r24, 0x01	; 1
    6ac6:	9d 8b       	std	Y+21, r25	; 0x15
    6ac8:	8c 8b       	std	Y+20, r24	; 0x14
    6aca:	e4 91       	lpm	r30, Z
    6acc:	d6 01       	movw	r26, r12
    6ace:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    6ad0:	f8 01       	movw	r30, r16
    6ad2:	10 82       	st	Z, r1
    6ad4:	cd cf       	rjmp	.-102    	; 0x6a70 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    6ad6:	d8 01       	movw	r26, r16
    6ad8:	8c 91       	ld	r24, X
    6ada:	8f 5f       	subi	r24, 0xFF	; 255
    6adc:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    6ade:	98 81       	ld	r25, Y
    6ae0:	95 ff       	sbrs	r25, 5
    6ae2:	6c c0       	rjmp	.+216    	; 0x6bbc <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    6ae4:	f4 01       	movw	r30, r8
    6ae6:	80 81       	ld	r24, Z
    6ae8:	8f 3f       	cpi	r24, 0xFF	; 255
    6aea:	11 f0       	breq	.+4      	; 0x6af0 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    6aec:	8f 5f       	subi	r24, 0xFF	; 255
    6aee:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    6af0:	97 fd       	sbrc	r25, 7
    6af2:	04 c0       	rjmp	.+8      	; 0x6afc <ProcessMusic+0x340>
    6af4:	f8 01       	movw	r30, r16
    6af6:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    6af8:	90 81       	ld	r25, Z
    6afa:	01 c0       	rjmp	.+2      	; 0x6afe <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    6afc:	9f ef       	ldi	r25, 0xFF	; 255
    6afe:	f8 01       	movw	r30, r16
    6b00:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    6b02:	80 81       	ld	r24, Z
    6b04:	88 23       	and	r24, r24
    6b06:	09 f4       	brne	.+2      	; 0x6b0a <ProcessMusic+0x34e>
    6b08:	4e c0       	rjmp	.+156    	; 0x6ba6 <ProcessMusic+0x3ea>
    6b0a:	31 96       	adiw	r30, 0x01	; 1
    6b0c:	50 81       	ld	r21, Z
    6b0e:	55 23       	and	r21, r21
    6b10:	09 f4       	brne	.+2      	; 0x6b14 <ProcessMusic+0x358>
    6b12:	49 c0       	rjmp	.+146    	; 0x6ba6 <ProcessMusic+0x3ea>
    6b14:	99 23       	and	r25, r25
    6b16:	09 f4       	brne	.+2      	; 0x6b1a <ProcessMusic+0x35e>
    6b18:	46 c0       	rjmp	.+140    	; 0x6ba6 <ProcessMusic+0x3ea>
    6b1a:	40 91 e1 0f 	lds	r20, 0x0FE1
    6b1e:	44 23       	and	r20, r20
    6b20:	09 f4       	brne	.+2      	; 0x6b24 <ProcessMusic+0x368>
    6b22:	41 c0       	rjmp	.+130    	; 0x6ba6 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    6b24:	89 9f       	mul	r24, r25
    6b26:	c0 01       	movw	r24, r0
    6b28:	11 24       	eor	r1, r1
    6b2a:	93 95       	inc	r25
				uVol>>=8;
    6b2c:	89 2f       	mov	r24, r25
    6b2e:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    6b30:	58 9f       	mul	r21, r24
    6b32:	90 01       	movw	r18, r0
    6b34:	59 9f       	mul	r21, r25
    6b36:	30 0d       	add	r19, r0
    6b38:	11 24       	eor	r1, r1
    6b3a:	c9 01       	movw	r24, r18
    6b3c:	93 95       	inc	r25
				uVol>>=8;
    6b3e:	89 2f       	mov	r24, r25
    6b40:	99 27       	eor	r25, r25
    6b42:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    6b44:	50 81       	ld	r21, Z
    6b46:	58 9f       	mul	r21, r24
    6b48:	90 01       	movw	r18, r0
    6b4a:	59 9f       	mul	r21, r25
    6b4c:	30 0d       	add	r19, r0
    6b4e:	11 24       	eor	r1, r1
    6b50:	33 95       	inc	r19
				uVol>>=8;
    6b52:	23 2f       	mov	r18, r19
    6b54:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    6b56:	42 9f       	mul	r20, r18
    6b58:	c0 01       	movw	r24, r0
    6b5a:	43 9f       	mul	r20, r19
    6b5c:	90 0d       	add	r25, r0
    6b5e:	11 24       	eor	r1, r1
    6b60:	93 95       	inc	r25
				uVol>>=8;
    6b62:	89 2f       	mov	r24, r25
    6b64:	99 27       	eor	r25, r25
    6b66:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    6b68:	20 81       	ld	r18, Z
    6b6a:	22 23       	and	r18, r18
    6b6c:	f1 f0       	breq	.+60     	; 0x6baa <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    6b6e:	d5 01       	movw	r26, r10
    6b70:	ec 91       	ld	r30, X
    6b72:	f0 e0       	ldi	r31, 0x00	; 0
    6b74:	e0 50       	subi	r30, 0x00	; 0
    6b76:	f1 49       	sbci	r31, 0x91	; 145
    6b78:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    6b7a:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    6b7c:	2e 9f       	mul	r18, r30
    6b7e:	f0 01       	movw	r30, r0
    6b80:	11 24       	eor	r1, r1
    6b82:	f3 95       	inc	r31
					tVol>>=8;
    6b84:	ef 2f       	mov	r30, r31
    6b86:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6b88:	a3 01       	movw	r20, r6
    6b8a:	4e 1b       	sub	r20, r30
    6b8c:	5f 0b       	sbc	r21, r31
    6b8e:	48 9f       	mul	r20, r24
    6b90:	90 01       	movw	r18, r0
    6b92:	49 9f       	mul	r20, r25
    6b94:	30 0d       	add	r19, r0
    6b96:	58 9f       	mul	r21, r24
    6b98:	30 0d       	add	r19, r0
    6b9a:	11 24       	eor	r1, r1
    6b9c:	c9 01       	movw	r24, r18
    6b9e:	93 95       	inc	r25
					uVol>>=8;
    6ba0:	89 2f       	mov	r24, r25
    6ba2:	99 27       	eor	r25, r25
    6ba4:	02 c0       	rjmp	.+4      	; 0x6baa <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    6ba6:	80 e0       	ldi	r24, 0x00	; 0
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    6baa:	f5 01       	movw	r30, r10
    6bac:	30 81       	ld	r19, Z
    6bae:	f8 01       	movw	r30, r16
    6bb0:	3a 97       	sbiw	r30, 0x0a	; 10
    6bb2:	20 81       	ld	r18, Z
    6bb4:	23 0f       	add	r18, r19
    6bb6:	d5 01       	movw	r26, r10
    6bb8:	2c 93       	st	X, r18
    6bba:	02 c0       	rjmp	.+4      	; 0x6bc0 <ProcessMusic+0x404>

		}else{
			uVol=0;
    6bbc:	80 e0       	ldi	r24, 0x00	; 0
    6bbe:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    6bc0:	f7 01       	movw	r30, r14
    6bc2:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    6bc4:	53 94       	inc	r5
    6bc6:	66 96       	adiw	r28, 0x16	; 22
    6bc8:	f6 e0       	ldi	r31, 0x06	; 6
    6bca:	ef 0e       	add	r14, r31
    6bcc:	f1 1c       	adc	r15, r1
    6bce:	86 e1       	ldi	r24, 0x16	; 22
    6bd0:	a8 0e       	add	r10, r24
    6bd2:	b1 1c       	adc	r11, r1
    6bd4:	0a 5e       	subi	r16, 0xEA	; 234
    6bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    6bd8:	96 e1       	ldi	r25, 0x16	; 22
    6bda:	c9 0e       	add	r12, r25
    6bdc:	d1 1c       	adc	r13, r1
    6bde:	a6 e1       	ldi	r26, 0x16	; 22
    6be0:	8a 0e       	add	r8, r26
    6be2:	91 1c       	adc	r9, r1
    6be4:	b4 e0       	ldi	r27, 0x04	; 4
    6be6:	5b 12       	cpse	r5, r27
    6be8:	34 cf       	rjmp	.-408    	; 0x6a52 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    6bea:	df 91       	pop	r29
    6bec:	cf 91       	pop	r28
    6bee:	1f 91       	pop	r17
    6bf0:	0f 91       	pop	r16
    6bf2:	ff 90       	pop	r15
    6bf4:	ef 90       	pop	r14
    6bf6:	df 90       	pop	r13
    6bf8:	cf 90       	pop	r12
    6bfa:	bf 90       	pop	r11
    6bfc:	af 90       	pop	r10
    6bfe:	9f 90       	pop	r9
    6c00:	8f 90       	pop	r8
    6c02:	7f 90       	pop	r7
    6c04:	6f 90       	pop	r6
    6c06:	5f 90       	pop	r5
    6c08:	08 95       	ret

00006c0a <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    6c0a:	80 93 e1 0f 	sts	0x0FE1, r24
    6c0e:	08 95       	ret

00006c10 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    6c10:	99 27       	eor	r25, r25
	clr r23
    6c12:	77 27       	eor	r23, r23

#if MIXER_CHAN4_TYPE == 0 
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
    6c14:	83 30       	cpi	r24, 0x03	; 3
		brlo set_note_waves
    6c16:	08 f0       	brcs	.+2      	; 0x6c1a <set_note_waves>
		ret		
    6c18:	08 95       	ret

00006c1a <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    6c1a:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    6c1c:	fd e6       	ldi	r31, 0x6D	; 109
	lsl r22
    6c1e:	66 0f       	add	r22, r22
	rol r23
    6c20:	77 1f       	adc	r23, r23
	add ZL,r22
    6c22:	e6 0f       	add	r30, r22
	adc ZH,r23	
    6c24:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    6c26:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    6c28:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    6c2a:	e2 e5       	ldi	r30, 0x52	; 82
	ldi ZH,hi8(mixerStruct)
    6c2c:	ff e0       	ldi	r31, 0x0F	; 15
	ldi r18,CHANNEL_STRUCT_SIZE
    6c2e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    6c30:	28 9f       	mul	r18, r24
	add ZL,r0
    6c32:	e0 0d       	add	r30, r0
	adc ZH,r1
    6c34:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    6c36:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    6c38:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    6c3a:	11 24       	eor	r1, r1
	

	ret
    6c3c:	08 95       	ret

00006c3e <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    6c3e:	99 27       	eor	r25, r25
	clr r23
    6c40:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    6c42:	e2 e5       	ldi	r30, 0x52	; 82
	ldi ZH,hi8(mixerStruct)
    6c44:	ff e0       	ldi	r31, 0x0F	; 15
	ldi r18,CHANNEL_STRUCT_SIZE
    6c46:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    6c48:	28 9f       	mul	r18, r24
	add ZL,r0
    6c4a:	e0 0d       	add	r30, r0
	adc ZH,r1
    6c4c:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    6c4e:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    6c50:	31 f4       	brne	.+12     	; 0x6c5e <smw1>
	lds r22,tr4_params
    6c52:	60 91 65 0f 	lds	r22, 0x0F65
	andi r22,0xfe;
    6c56:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    6c58:	60 93 65 0f 	sts	0x0F65, r22
	rjmp esmw	
    6c5c:	0b c0       	rjmp	.+22     	; 0x6c74 <esmw>

00006c5e <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    6c5e:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    6c60:	31 f4       	brne	.+12     	; 0x6c6e <smw2>
	lds r22,tr4_params
    6c62:	60 91 65 0f 	lds	r22, 0x0F65
	ori r22,0xfe;
    6c66:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    6c68:	60 93 65 0f 	sts	0x0F65, r22
	rjmp esmw
    6c6c:	03 c0       	rjmp	.+6      	; 0x6c74 <esmw>

00006c6e <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    6c6e:	7f e6       	ldi	r23, 0x6F	; 111
	add r23,r22
    6c70:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    6c72:	75 83       	std	Z+5, r23	; 0x05

00006c74 <esmw>:

esmw:
	clr r1	
    6c74:	11 24       	eor	r1, r1
	ret
    6c76:	08 95       	ret
	...

00006d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    6d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    6d02:	80 93 51 0f 	sts	0x0F51, r24
	ret
    6d06:	08 95       	ret

00006d08 <steptable>:
    6d08:	22 00       	.word	0x0022	; ????
    6d0a:	24 00       	.word	0x0024	; ????
    6d0c:	26 00       	.word	0x0026	; ????
    6d0e:	28 00       	.word	0x0028	; ????
    6d10:	2b 00       	.word	0x002b	; ????
    6d12:	2d 00       	.word	0x002d	; ????
    6d14:	30 00       	.word	0x0030	; ????
    6d16:	33 00       	.word	0x0033	; ????
    6d18:	36 00       	.word	0x0036	; ????
    6d1a:	39 00       	.word	0x0039	; ????
    6d1c:	3d 00       	.word	0x003d	; ????
    6d1e:	40 00       	.word	0x0040	; ????
    6d20:	44 00       	.word	0x0044	; ????
    6d22:	48 00       	.word	0x0048	; ????
    6d24:	4c 00       	.word	0x004c	; ????
    6d26:	51 00       	.word	0x0051	; ????
    6d28:	56 00       	.word	0x0056	; ????
    6d2a:	5b 00       	.word	0x005b	; ????
    6d2c:	60 00       	.word	0x0060	; ????
    6d2e:	66 00       	.word	0x0066	; ????
    6d30:	6c 00       	.word	0x006c	; ????
    6d32:	73 00       	.word	0x0073	; ????
    6d34:	79 00       	.word	0x0079	; ????
    6d36:	81 00       	.word	0x0081	; ????
    6d38:	88 00       	.word	0x0088	; ????
    6d3a:	90 00       	.word	0x0090	; ????
    6d3c:	99 00       	.word	0x0099	; ????
    6d3e:	a2 00       	.word	0x00a2	; ????
    6d40:	ac 00       	.word	0x00ac	; ????
    6d42:	b6 00       	.word	0x00b6	; ????
    6d44:	c1 00       	.word	0x00c1	; ????
    6d46:	cc 00       	.word	0x00cc	; ????
    6d48:	d8 00       	.word	0x00d8	; ????
    6d4a:	e5 00       	.word	0x00e5	; ????
    6d4c:	f3 00       	.word	0x00f3	; ????
    6d4e:	01 01       	movw	r0, r2
    6d50:	10 01       	movw	r2, r0
    6d52:	21 01       	movw	r4, r2
    6d54:	32 01       	movw	r6, r4
    6d56:	44 01       	movw	r8, r8
    6d58:	57 01       	movw	r10, r14
    6d5a:	6c 01       	movw	r12, r24
    6d5c:	81 01       	movw	r16, r2
    6d5e:	98 01       	movw	r18, r16
    6d60:	b0 01       	movw	r22, r0
    6d62:	ca 01       	movw	r24, r20
    6d64:	e5 01       	movw	r28, r10
    6d66:	02 02       	muls	r16, r18
    6d68:	21 02       	muls	r18, r17
    6d6a:	41 02       	muls	r20, r17
    6d6c:	64 02       	muls	r22, r20
    6d6e:	88 02       	muls	r24, r24
    6d70:	ae 02       	muls	r26, r30
    6d72:	d7 02       	muls	r29, r23
    6d74:	03 03       	mulsu	r16, r19
    6d76:	30 03       	mulsu	r19, r16
    6d78:	61 03       	mulsu	r22, r17
    6d7a:	94 03       	fmuls	r17, r20
    6d7c:	cb 03       	fmulsu	r20, r19
    6d7e:	05 04       	cpc	r0, r5
    6d80:	42 04       	cpc	r4, r2
    6d82:	83 04       	cpc	r8, r3
    6d84:	c7 04       	cpc	r12, r7
    6d86:	10 05       	cpc	r17, r0
    6d88:	5d 05       	cpc	r21, r13
    6d8a:	af 05       	cpc	r26, r15
    6d8c:	05 06       	cpc	r0, r21
    6d8e:	61 06       	cpc	r6, r17
    6d90:	c2 06       	cpc	r12, r18
    6d92:	29 07       	cpc	r18, r25
    6d94:	96 07       	cpc	r25, r22
    6d96:	09 08       	sbc	r0, r9
    6d98:	83 08       	sbc	r8, r3
    6d9a:	05 09       	sbc	r16, r5
    6d9c:	8e 09       	sbc	r24, r14
    6d9e:	20 0a       	sbc	r2, r16
    6da0:	ba 0a       	sbc	r11, r26
    6da2:	5d 0b       	sbc	r21, r29
    6da4:	0a 0c       	add	r0, r10
    6da6:	c1 0c       	add	r12, r1
    6da8:	84 0d       	add	r24, r4
    6daa:	51 0e       	add	r5, r17
    6dac:	2b 0f       	add	r18, r27
    6dae:	12 10       	cpse	r1, r2
    6db0:	07 11       	cpse	r16, r7
    6db2:	0a 12       	cpse	r0, r26
    6db4:	1d 13       	cpse	r17, r29
    6db6:	40 14       	cp	r4, r0
    6db8:	74 15       	cp	r23, r4
    6dba:	ba 16       	cp	r11, r26
    6dbc:	14 18       	sub	r1, r4
    6dbe:	83 19       	sub	r24, r3
    6dc0:	07 1b       	sub	r16, r23
    6dc2:	a3 1c       	adc	r10, r3
    6dc4:	57 1e       	adc	r5, r23
    6dc6:	24 20       	and	r2, r4
    6dc8:	0e 22       	and	r0, r30
    6dca:	14 24       	eor	r1, r4
    6dcc:	39 26       	eor	r3, r25
    6dce:	7f 28       	or	r7, r15
    6dd0:	e8 2a       	or	r14, r24
    6dd2:	75 2d       	mov	r23, r5
    6dd4:	29 30       	cpi	r18, 0x09	; 9
    6dd6:	06 33       	cpi	r16, 0x36	; 54
    6dd8:	0f 36       	cpi	r16, 0x6F	; 111
    6dda:	45 39       	cpi	r20, 0x95	; 149
    6ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    6dde:	49 40       	sbci	r20, 0x09	; 9
    6de0:	1b 44       	sbci	r17, 0x4B	; 75
    6de2:	28 48       	sbci	r18, 0x88	; 136
    6de4:	73 4c       	sbci	r23, 0xC3	; 195
    6de6:	fe 50       	subi	r31, 0x0E	; 14
    6de8:	cf 55       	subi	r28, 0x5F	; 95
    6dea:	ea 5a       	subi	r30, 0xAA	; 170
    6dec:	51 60       	ori	r21, 0x01	; 1
    6dee:	0c 66       	ori	r16, 0x6C	; 108
    6df0:	1d 6c       	ori	r17, 0xCD	; 205
    6df2:	8b 72       	andi	r24, 0x2B	; 43
    6df4:	5a 79       	andi	r21, 0x9A	; 154
    6df6:	92 80       	ldd	r9, Z+2	; 0x02
    6df8:	37 88       	ldd	r3, Z+23	; 0x17
    6dfa:	50 90 e5 98 	lds	r5, 0x98E5
    6dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    6e00:	9f ab       	std	Y+55, r25	; 0x37
    6e02:	d3 b5       	in	r29, 0x23	; 35
    6e04:	a3 c0       	rjmp	.+326    	; 0x6f4c <waves+0x4c>
	...

00006f00 <waves>:
    6f00:	00 03       	mulsu	r16, r16
    6f02:	06 09       	sbc	r16, r6
    6f04:	0c 10       	cpse	r0, r12
    6f06:	13 16       	cp	r1, r19
    6f08:	19 1c       	adc	r1, r9
    6f0a:	1f 22       	and	r1, r31
    6f0c:	25 28       	or	r2, r5
    6f0e:	2b 2e       	mov	r2, r27
    6f10:	31 33       	cpi	r19, 0x31	; 49
    6f12:	36 39       	cpi	r19, 0x96	; 150
    6f14:	3c 3f       	cpi	r19, 0xFC	; 252
    6f16:	41 44       	sbci	r20, 0x41	; 65
    6f18:	47 49       	sbci	r20, 0x97	; 151
    6f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    6f1c:	51 53       	subi	r21, 0x31	; 49
    6f1e:	55 58       	subi	r21, 0x85	; 133
    6f20:	5a 5c       	subi	r21, 0xCA	; 202
    6f22:	5e 60       	ori	r21, 0x0E	; 14
    6f24:	62 64       	ori	r22, 0x42	; 66
    6f26:	66 68       	ori	r22, 0x86	; 134
    6f28:	6a 6b       	ori	r22, 0xBA	; 186
    6f2a:	6d 6f       	ori	r22, 0xFD	; 253
    6f2c:	70 71       	andi	r23, 0x10	; 16
    6f2e:	73 74       	andi	r23, 0x43	; 67
    6f30:	75 76       	andi	r23, 0x65	; 101
    6f32:	78 79       	andi	r23, 0x98	; 152
    6f34:	7a 7a       	andi	r23, 0xAA	; 170
    6f36:	7b 7c       	andi	r23, 0xCB	; 203
    6f38:	7d 7d       	andi	r23, 0xDD	; 221
    6f3a:	7e 7e       	andi	r23, 0xEE	; 238
    6f3c:	7e 7f       	andi	r23, 0xFE	; 254
    6f3e:	7f 7f       	andi	r23, 0xFF	; 255
    6f40:	7f 7f       	andi	r23, 0xFF	; 255
    6f42:	7f 7f       	andi	r23, 0xFF	; 255
    6f44:	7e 7e       	andi	r23, 0xEE	; 238
    6f46:	7e 7d       	andi	r23, 0xDE	; 222
    6f48:	7d 7c       	andi	r23, 0xCD	; 205
    6f4a:	7b 7a       	andi	r23, 0xAB	; 171
    6f4c:	7a 79       	andi	r23, 0x9A	; 154
    6f4e:	78 76       	andi	r23, 0x68	; 104
    6f50:	75 74       	andi	r23, 0x45	; 69
    6f52:	73 71       	andi	r23, 0x13	; 19
    6f54:	70 6f       	ori	r23, 0xF0	; 240
    6f56:	6d 6b       	ori	r22, 0xBD	; 189
    6f58:	6a 68       	ori	r22, 0x8A	; 138
    6f5a:	66 64       	ori	r22, 0x46	; 70
    6f5c:	62 60       	ori	r22, 0x02	; 2
    6f5e:	5e 5c       	subi	r21, 0xCE	; 206
    6f60:	5a 58       	subi	r21, 0x8A	; 138
    6f62:	55 53       	subi	r21, 0x35	; 53
    6f64:	51 4e       	sbci	r21, 0xE1	; 225
    6f66:	4c 49       	sbci	r20, 0x9C	; 156
    6f68:	47 44       	sbci	r20, 0x47	; 71
    6f6a:	41 3f       	cpi	r20, 0xF1	; 241
    6f6c:	3c 39       	cpi	r19, 0x9C	; 156
    6f6e:	36 33       	cpi	r19, 0x36	; 54
    6f70:	31 2e       	mov	r3, r17
    6f72:	2b 28       	or	r2, r11
    6f74:	25 22       	and	r2, r21
    6f76:	1f 1c       	adc	r1, r15
    6f78:	19 16       	cp	r1, r25
    6f7a:	13 10       	cpse	r1, r3
    6f7c:	0c 09       	sbc	r16, r12
    6f7e:	06 03       	mulsu	r16, r22
    6f80:	00 fd       	sbrc	r16, 0
    6f82:	fa f7       	brpl	.-2      	; 0x6f82 <waves+0x82>
    6f84:	f4 f0       	brlt	.+60     	; 0x6fc2 <waves+0xc2>
    6f86:	ed ea       	ldi	r30, 0xAD	; 173
    6f88:	e7 e4       	ldi	r30, 0x47	; 71
    6f8a:	e1 de       	rcall	.-574    	; 0x6d4e <steptable+0x46>
    6f8c:	db d8       	rcall	.-3658   	; 0x6144 <SetTile+0x10>
    6f8e:	d5 d2       	rcall	.+1450   	; 0x753a <waves+0x63a>
    6f90:	cf cd       	rjmp	.-1122   	; 0x6b30 <ProcessMusic+0x374>
    6f92:	ca c7       	rjmp	.+3988   	; 0x7f28 <LBPrintStr+0x4>
    6f94:	c4 c1       	rjmp	.+904    	; 0x731e <waves+0x41e>
    6f96:	bf bc       	out	0x2f, r11	; 47
    6f98:	b9 b7       	in	r27, 0x39	; 57
    6f9a:	b4 b2       	in	r11, 0x14	; 20
    6f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    6f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    6fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    6fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    6fa4:	9e 9c       	mul	r9, r14
    6fa6:	9a 98       	cbi	0x13, 2	; 19
    6fa8:	96 95       	lsr	r25
    6faa:	93 91       	.word	0x9193	; ????
    6fac:	90 8f       	std	Z+24, r25	; 0x18
    6fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6fb0:	8b 8a       	std	Y+19, r8	; 0x13
    6fb2:	88 87       	std	Y+8, r24	; 0x08
    6fb4:	86 86       	std	Z+14, r8	; 0x0e
    6fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    6fb8:	83 83       	std	Z+3, r24	; 0x03
    6fba:	82 82       	std	Z+2, r8	; 0x02
    6fbc:	82 81       	ldd	r24, Z+2	; 0x02
    6fbe:	81 81       	ldd	r24, Z+1	; 0x01
    6fc0:	81 81       	ldd	r24, Z+1	; 0x01
    6fc2:	81 81       	ldd	r24, Z+1	; 0x01
    6fc4:	82 82       	std	Z+2, r8	; 0x02
    6fc6:	82 83       	std	Z+2, r24	; 0x02
    6fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    6fca:	85 86       	std	Z+13, r8	; 0x0d
    6fcc:	86 87       	std	Z+14, r24	; 0x0e
    6fce:	88 8a       	std	Y+16, r8	; 0x10
    6fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    6fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    6fd4:	90 91 93 95 	lds	r25, 0x9593
    6fd8:	96 98       	cbi	0x12, 6	; 18
    6fda:	9a 9c       	mul	r9, r10
    6fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    6fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    6fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    6fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    6fe4:	af b2       	in	r10, 0x1f	; 31
    6fe6:	b4 b7       	in	r27, 0x34	; 52
    6fe8:	b9 bc       	out	0x29, r11	; 41
    6fea:	bf c1       	rjmp	.+894    	; 0x736a <waves+0x46a>
    6fec:	c4 c7       	rjmp	.+3976   	; 0x7f76 <LBPrintStr+0x52>
    6fee:	ca cd       	rjmp	.-1132   	; 0x6b84 <ProcessMusic+0x3c8>
    6ff0:	cf d2       	rcall	.+1438   	; 0x7590 <waves+0x690>
    6ff2:	d5 d8       	rcall	.-3670   	; 0x619e <WriteEeprom+0x12>
    6ff4:	db de       	rcall	.-586    	; 0x6dac <steptable+0xa4>
    6ff6:	e1 e4       	ldi	r30, 0x41	; 65
    6ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    6ffa:	ed f0       	brhs	.+58     	; 0x7036 <waves+0x136>
    6ffc:	f4 f7       	brge	.-4      	; 0x6ffa <waves+0xfa>
    6ffe:	fa fd       	.word	0xfdfa	; ????
    7000:	80 81       	ld	r24, Z
    7002:	82 83       	std	Z+2, r24	; 0x02
    7004:	84 85       	ldd	r24, Z+12	; 0x0c
    7006:	86 87       	std	Z+14, r24	; 0x0e
    7008:	88 89       	ldd	r24, Y+16	; 0x10
    700a:	8a 8b       	std	Y+18, r24	; 0x12
    700c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    700e:	8e 8f       	std	Y+30, r24	; 0x1e
    7010:	90 91 92 93 	lds	r25, 0x9392
    7014:	94 95       	.word	0x9594	; ????
    7016:	96 97       	sbiw	r26, 0x26	; 38
    7018:	98 99       	sbic	0x13, 0	; 19
    701a:	9a 9b       	sbis	0x13, 2	; 19
    701c:	9c 9d       	mul	r25, r12
    701e:	9e 9f       	mul	r25, r30
    7020:	a0 a1       	ldd	r26, Z+32	; 0x20
    7022:	a2 a3       	std	Z+34, r26	; 0x22
    7024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7026:	a6 a7       	std	Z+46, r26	; 0x2e
    7028:	a8 a9       	ldd	r26, Y+48	; 0x30
    702a:	aa ab       	std	Y+50, r26	; 0x32
    702c:	ac ad       	ldd	r26, Y+60	; 0x3c
    702e:	ae af       	std	Y+62, r26	; 0x3e
    7030:	b0 b1       	in	r27, 0x00	; 0
    7032:	b2 b3       	in	r27, 0x12	; 18
    7034:	b4 b5       	in	r27, 0x24	; 36
    7036:	b6 b7       	in	r27, 0x36	; 54
    7038:	b8 b9       	out	0x08, r27	; 8
    703a:	ba bb       	out	0x1a, r27	; 26
    703c:	bc bd       	out	0x2c, r27	; 44
    703e:	be bf       	out	0x3e, r27	; 62
    7040:	c0 c1       	rjmp	.+896    	; 0x73c2 <waves+0x4c2>
    7042:	c2 c3       	rjmp	.+1924   	; 0x77c8 <waves+0x8c8>
    7044:	c4 c5       	rjmp	.+2952   	; 0x7bce <DrawMap2+0x2>
    7046:	c6 c7       	rjmp	.+3980   	; 0x7fd4 <LBCollides+0x4e>
    7048:	c8 c9       	rjmp	.-3184   	; 0x63da <EepromReadBlock+0x3a>
    704a:	ca cb       	rjmp	.-2156   	; 0x67e0 <ProcessMusic+0x24>
    704c:	cc cd       	rjmp	.-1128   	; 0x6be6 <ProcessMusic+0x42a>
    704e:	ce cf       	rjmp	.-100    	; 0x6fec <waves+0xec>
    7050:	d0 d1       	rcall	.+928    	; 0x73f2 <waves+0x4f2>
    7052:	d2 d3       	rcall	.+1956   	; 0x77f8 <waves+0x8f8>
    7054:	d4 d5       	rcall	.+2984   	; 0x7bfe <DrawMap2+0x32>
    7056:	d6 d7       	rcall	.+4012   	; 0x8004 <LBLineIntersect+0x2a>
    7058:	d8 d9       	rcall	.-3152   	; 0x640a <EepromReadBlock+0x6a>
    705a:	da db       	rcall	.-2124   	; 0x6810 <ProcessMusic+0x54>
    705c:	dc dd       	rcall	.-1096   	; 0x6c16 <SetMixerNote+0x6>
    705e:	de df       	rcall	.-68     	; 0x701c <waves+0x11c>
    7060:	e0 e1       	ldi	r30, 0x10	; 16
    7062:	e2 e3       	ldi	r30, 0x32	; 50
    7064:	e4 e5       	ldi	r30, 0x54	; 84
    7066:	e6 e7       	ldi	r30, 0x76	; 118
    7068:	e8 e9       	ldi	r30, 0x98	; 152
    706a:	ea eb       	ldi	r30, 0xBA	; 186
    706c:	ec ed       	ldi	r30, 0xDC	; 220
    706e:	ee ef       	ldi	r30, 0xFE	; 254
    7070:	f0 f1       	brcs	.+124    	; 0x70ee <waves+0x1ee>
    7072:	f2 f3       	brmi	.-4      	; 0x7070 <waves+0x170>
    7074:	f4 f5       	brge	.+124    	; 0x70f2 <waves+0x1f2>
    7076:	f6 f7       	brtc	.-4      	; 0x7074 <waves+0x174>
    7078:	f8 f9       	.word	0xf9f8	; ????
    707a:	fa fb       	.word	0xfbfa	; ????
    707c:	fc fd       	.word	0xfdfc	; ????
    707e:	fe ff       	.word	0xfffe	; ????
    7080:	00 01       	movw	r0, r0
    7082:	02 03       	mulsu	r16, r18
    7084:	04 05       	cpc	r16, r4
    7086:	06 07       	cpc	r16, r22
    7088:	08 09       	sbc	r16, r8
    708a:	0a 0b       	sbc	r16, r26
    708c:	0c 0d       	add	r16, r12
    708e:	0e 0f       	add	r16, r30
    7090:	10 11       	cpse	r17, r0
    7092:	12 13       	cpse	r17, r18
    7094:	14 15       	cp	r17, r4
    7096:	16 17       	cp	r17, r22
    7098:	18 19       	sub	r17, r8
    709a:	1a 1b       	sub	r17, r26
    709c:	1c 1d       	adc	r17, r12
    709e:	1e 1f       	adc	r17, r30
    70a0:	20 21       	and	r18, r0
    70a2:	22 23       	and	r18, r18
    70a4:	24 25       	eor	r18, r4
    70a6:	26 27       	eor	r18, r22
    70a8:	28 29       	or	r18, r8
    70aa:	2a 2b       	or	r18, r26
    70ac:	2c 2d       	mov	r18, r12
    70ae:	2e 2f       	mov	r18, r30
    70b0:	30 31       	cpi	r19, 0x10	; 16
    70b2:	32 33       	cpi	r19, 0x32	; 50
    70b4:	34 35       	cpi	r19, 0x54	; 84
    70b6:	36 37       	cpi	r19, 0x76	; 118
    70b8:	38 39       	cpi	r19, 0x98	; 152
    70ba:	3a 3b       	cpi	r19, 0xBA	; 186
    70bc:	3c 3d       	cpi	r19, 0xDC	; 220
    70be:	3e 3f       	cpi	r19, 0xFE	; 254
    70c0:	40 41       	sbci	r20, 0x10	; 16
    70c2:	42 43       	sbci	r20, 0x32	; 50
    70c4:	44 45       	sbci	r20, 0x54	; 84
    70c6:	46 47       	sbci	r20, 0x76	; 118
    70c8:	48 49       	sbci	r20, 0x98	; 152
    70ca:	4a 4b       	sbci	r20, 0xBA	; 186
    70cc:	4c 4d       	sbci	r20, 0xDC	; 220
    70ce:	4e 4f       	sbci	r20, 0xFE	; 254
    70d0:	50 51       	subi	r21, 0x10	; 16
    70d2:	52 53       	subi	r21, 0x32	; 50
    70d4:	54 55       	subi	r21, 0x54	; 84
    70d6:	56 57       	subi	r21, 0x76	; 118
    70d8:	58 59       	subi	r21, 0x98	; 152
    70da:	5a 5b       	subi	r21, 0xBA	; 186
    70dc:	5c 5d       	subi	r21, 0xDC	; 220
    70de:	5e 5f       	subi	r21, 0xFE	; 254
    70e0:	60 61       	ori	r22, 0x10	; 16
    70e2:	62 63       	ori	r22, 0x32	; 50
    70e4:	64 65       	ori	r22, 0x54	; 84
    70e6:	66 67       	ori	r22, 0x76	; 118
    70e8:	68 69       	ori	r22, 0x98	; 152
    70ea:	6a 6b       	ori	r22, 0xBA	; 186
    70ec:	6c 6d       	ori	r22, 0xDC	; 220
    70ee:	6e 6f       	ori	r22, 0xFE	; 254
    70f0:	70 71       	andi	r23, 0x10	; 16
    70f2:	72 73       	andi	r23, 0x32	; 50
    70f4:	74 75       	andi	r23, 0x54	; 84
    70f6:	76 77       	andi	r23, 0x76	; 118
    70f8:	78 79       	andi	r23, 0x98	; 152
    70fa:	7a 7b       	andi	r23, 0xBA	; 186
    70fc:	7c 7d       	andi	r23, 0xDC	; 220
    70fe:	7e 7f       	andi	r23, 0xFE	; 254
    7100:	00 02       	muls	r16, r16
    7102:	04 06       	cpc	r0, r20
    7104:	08 0a       	sbc	r0, r24
    7106:	0c 0e       	add	r0, r28
    7108:	10 12       	cpse	r1, r16
    710a:	14 16       	cp	r1, r20
    710c:	18 1a       	sub	r1, r24
    710e:	1c 1e       	adc	r1, r28
    7110:	20 22       	and	r2, r16
    7112:	24 26       	eor	r2, r20
    7114:	28 2a       	or	r2, r24
    7116:	2c 2e       	mov	r2, r28
    7118:	30 32       	cpi	r19, 0x20	; 32
    711a:	34 36       	cpi	r19, 0x64	; 100
    711c:	38 3a       	cpi	r19, 0xA8	; 168
    711e:	3c 3e       	cpi	r19, 0xEC	; 236
    7120:	40 42       	sbci	r20, 0x20	; 32
    7122:	44 46       	sbci	r20, 0x64	; 100
    7124:	48 4a       	sbci	r20, 0xA8	; 168
    7126:	4c 4e       	sbci	r20, 0xEC	; 236
    7128:	50 52       	subi	r21, 0x20	; 32
    712a:	54 56       	subi	r21, 0x64	; 100
    712c:	58 5a       	subi	r21, 0xA8	; 168
    712e:	5c 5e       	subi	r21, 0xEC	; 236
    7130:	60 62       	ori	r22, 0x20	; 32
    7132:	64 66       	ori	r22, 0x64	; 100
    7134:	68 6a       	ori	r22, 0xA8	; 168
    7136:	6c 6e       	ori	r22, 0xEC	; 236
    7138:	70 72       	andi	r23, 0x20	; 32
    713a:	74 76       	andi	r23, 0x64	; 100
    713c:	78 7a       	andi	r23, 0xA8	; 168
    713e:	7c 7e       	andi	r23, 0xEC	; 236
    7140:	7f 7d       	andi	r23, 0xDF	; 223
    7142:	7b 79       	andi	r23, 0x9B	; 155
    7144:	77 75       	andi	r23, 0x57	; 87
    7146:	73 71       	andi	r23, 0x13	; 19
    7148:	6f 6d       	ori	r22, 0xDF	; 223
    714a:	6b 69       	ori	r22, 0x9B	; 155
    714c:	67 65       	ori	r22, 0x57	; 87
    714e:	63 61       	ori	r22, 0x13	; 19
    7150:	5f 5d       	subi	r21, 0xDF	; 223
    7152:	5b 59       	subi	r21, 0x9B	; 155
    7154:	57 55       	subi	r21, 0x57	; 87
    7156:	53 51       	subi	r21, 0x13	; 19
    7158:	4f 4d       	sbci	r20, 0xDF	; 223
    715a:	4b 49       	sbci	r20, 0x9B	; 155
    715c:	47 45       	sbci	r20, 0x57	; 87
    715e:	43 41       	sbci	r20, 0x13	; 19
    7160:	3f 3d       	cpi	r19, 0xDF	; 223
    7162:	3b 39       	cpi	r19, 0x9B	; 155
    7164:	37 35       	cpi	r19, 0x57	; 87
    7166:	33 31       	cpi	r19, 0x13	; 19
    7168:	2f 2d       	mov	r18, r15
    716a:	2b 29       	or	r18, r11
    716c:	27 25       	eor	r18, r7
    716e:	23 21       	and	r18, r3
    7170:	1f 1d       	adc	r17, r15
    7172:	1b 19       	sub	r17, r11
    7174:	17 15       	cp	r17, r7
    7176:	13 11       	cpse	r17, r3
    7178:	0f 0d       	add	r16, r15
    717a:	0b 09       	sbc	r16, r11
    717c:	07 05       	cpc	r16, r7
    717e:	03 01       	movw	r0, r6
    7180:	ff fd       	.word	0xfdff	; ????
    7182:	fb f9       	.word	0xf9fb	; ????
    7184:	f7 f5       	brid	.+124    	; 0x7202 <waves+0x302>
    7186:	f3 f1       	brvs	.+124    	; 0x7204 <waves+0x304>
    7188:	ef ed       	ldi	r30, 0xDF	; 223
    718a:	eb e9       	ldi	r30, 0x9B	; 155
    718c:	e7 e5       	ldi	r30, 0x57	; 87
    718e:	e3 e1       	ldi	r30, 0x13	; 19
    7190:	df dd       	rcall	.-1090   	; 0x6d50 <steptable+0x48>
    7192:	db d9       	rcall	.-3146   	; 0x654a <InitMusicPlayer+0x2>
    7194:	d7 d5       	rcall	.+2990   	; 0x7d44 <DisplayLogo+0xe>
    7196:	d3 d1       	rcall	.+934    	; 0x753e <waves+0x63e>
    7198:	cf cd       	rjmp	.-1122   	; 0x6d38 <steptable+0x30>
    719a:	cb c9       	rjmp	.-3178   	; 0x6532 <PatchCommand08+0x1c>
    719c:	c7 c5       	rjmp	.+2958   	; 0x7d2c <WaitVsync+0x24>
    719e:	c3 c1       	rjmp	.+902    	; 0x7526 <waves+0x626>
    71a0:	bf bd       	out	0x2f, r27	; 47
    71a2:	bb b9       	out	0x0b, r27	; 11
    71a4:	b7 b5       	in	r27, 0x27	; 39
    71a6:	b3 b1       	in	r27, 0x03	; 3
    71a8:	af ad       	ldd	r26, Y+63	; 0x3f
    71aa:	ab a9       	ldd	r26, Y+51	; 0x33
    71ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    71ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    71b0:	9f 9d       	mul	r25, r15
    71b2:	9b 99       	sbic	0x13, 3	; 19
    71b4:	97 95       	ror	r25
    71b6:	93 91       	.word	0x9193	; ????
    71b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    71ba:	8b 89       	ldd	r24, Y+19	; 0x13
    71bc:	87 85       	ldd	r24, Z+15	; 0x0f
    71be:	83 81       	ldd	r24, Z+3	; 0x03
    71c0:	80 82       	st	Z, r8
    71c2:	84 86       	std	Z+12, r8	; 0x0c
    71c4:	88 8a       	std	Y+16, r8	; 0x10
    71c6:	8c 8e       	std	Y+28, r8	; 0x1c
    71c8:	90 92 94 96 	sts	0x9694, r9
    71cc:	98 9a       	sbi	0x13, 0	; 19
    71ce:	9c 9e       	mul	r9, r28
    71d0:	a0 a2       	std	Z+32, r10	; 0x20
    71d2:	a4 a6       	std	Z+44, r10	; 0x2c
    71d4:	a8 aa       	std	Y+48, r10	; 0x30
    71d6:	ac ae       	std	Y+60, r10	; 0x3c
    71d8:	b0 b2       	in	r11, 0x10	; 16
    71da:	b4 b6       	in	r11, 0x34	; 52
    71dc:	b8 ba       	out	0x18, r11	; 24
    71de:	bc be       	out	0x3c, r11	; 60
    71e0:	c0 c2       	rjmp	.+1408   	; 0x7762 <waves+0x862>
    71e2:	c4 c6       	rjmp	.+3464   	; 0x7f6c <LBPrintStr+0x48>
    71e4:	c8 ca       	rjmp	.-2672   	; 0x6776 <TriggerNote+0x28>
    71e6:	cc ce       	rjmp	.-616    	; 0x6f80 <waves+0x80>
    71e8:	d0 d2       	rcall	.+1440   	; 0x778a <waves+0x88a>
    71ea:	d4 d6       	rcall	.+3496   	; 0x7f94 <LBCollides+0xe>
    71ec:	d8 da       	rcall	.-2640   	; 0x679e <TriggerNote+0x50>
    71ee:	dc de       	rcall	.-584    	; 0x6fa8 <waves+0xa8>
    71f0:	e0 e2       	ldi	r30, 0x20	; 32
    71f2:	e4 e6       	ldi	r30, 0x64	; 100
    71f4:	e8 ea       	ldi	r30, 0xA8	; 168
    71f6:	ec ee       	ldi	r30, 0xEC	; 236
    71f8:	f0 f2       	brcs	.-68     	; 0x71b6 <waves+0x2b6>
    71fa:	f4 f6       	brge	.-68     	; 0x71b8 <waves+0x2b8>
    71fc:	f8 fa       	.word	0xfaf8	; ????
    71fe:	fc fe       	.word	0xfefc	; ????
    7200:	7f 7f       	andi	r23, 0xFF	; 255
    7202:	7f 7f       	andi	r23, 0xFF	; 255
    7204:	7f 7f       	andi	r23, 0xFF	; 255
    7206:	7f 7f       	andi	r23, 0xFF	; 255
    7208:	7f 7f       	andi	r23, 0xFF	; 255
    720a:	7f 7f       	andi	r23, 0xFF	; 255
    720c:	7f 7f       	andi	r23, 0xFF	; 255
    720e:	7f 7f       	andi	r23, 0xFF	; 255
    7210:	7f 7f       	andi	r23, 0xFF	; 255
    7212:	7f 7f       	andi	r23, 0xFF	; 255
    7214:	7f 7f       	andi	r23, 0xFF	; 255
    7216:	7f 7f       	andi	r23, 0xFF	; 255
    7218:	7f 7f       	andi	r23, 0xFF	; 255
    721a:	7f 7f       	andi	r23, 0xFF	; 255
    721c:	7f 7f       	andi	r23, 0xFF	; 255
    721e:	7f 7f       	andi	r23, 0xFF	; 255
    7220:	7f 7f       	andi	r23, 0xFF	; 255
    7222:	7f 7f       	andi	r23, 0xFF	; 255
    7224:	7f 7f       	andi	r23, 0xFF	; 255
    7226:	7f 7f       	andi	r23, 0xFF	; 255
    7228:	7f 7f       	andi	r23, 0xFF	; 255
    722a:	7f 7f       	andi	r23, 0xFF	; 255
    722c:	7f 7f       	andi	r23, 0xFF	; 255
    722e:	7f 7f       	andi	r23, 0xFF	; 255
    7230:	7f 7f       	andi	r23, 0xFF	; 255
    7232:	7f 7f       	andi	r23, 0xFF	; 255
    7234:	7f 7f       	andi	r23, 0xFF	; 255
    7236:	7f 7f       	andi	r23, 0xFF	; 255
    7238:	7f 7f       	andi	r23, 0xFF	; 255
    723a:	7f 7f       	andi	r23, 0xFF	; 255
    723c:	7f 7f       	andi	r23, 0xFF	; 255
    723e:	7f 7f       	andi	r23, 0xFF	; 255
    7240:	80 80       	ld	r8, Z
    7242:	80 80       	ld	r8, Z
    7244:	80 80       	ld	r8, Z
    7246:	80 80       	ld	r8, Z
    7248:	80 80       	ld	r8, Z
    724a:	80 80       	ld	r8, Z
    724c:	80 80       	ld	r8, Z
    724e:	80 80       	ld	r8, Z
    7250:	80 80       	ld	r8, Z
    7252:	80 80       	ld	r8, Z
    7254:	80 80       	ld	r8, Z
    7256:	80 80       	ld	r8, Z
    7258:	80 80       	ld	r8, Z
    725a:	80 80       	ld	r8, Z
    725c:	80 80       	ld	r8, Z
    725e:	80 80       	ld	r8, Z
    7260:	80 80       	ld	r8, Z
    7262:	80 80       	ld	r8, Z
    7264:	80 80       	ld	r8, Z
    7266:	80 80       	ld	r8, Z
    7268:	80 80       	ld	r8, Z
    726a:	80 80       	ld	r8, Z
    726c:	80 80       	ld	r8, Z
    726e:	80 80       	ld	r8, Z
    7270:	80 80       	ld	r8, Z
    7272:	80 80       	ld	r8, Z
    7274:	80 80       	ld	r8, Z
    7276:	80 80       	ld	r8, Z
    7278:	80 80       	ld	r8, Z
    727a:	80 80       	ld	r8, Z
    727c:	80 80       	ld	r8, Z
    727e:	80 80       	ld	r8, Z
    7280:	80 80       	ld	r8, Z
    7282:	80 80       	ld	r8, Z
    7284:	80 80       	ld	r8, Z
    7286:	80 80       	ld	r8, Z
    7288:	80 80       	ld	r8, Z
    728a:	80 80       	ld	r8, Z
    728c:	80 80       	ld	r8, Z
    728e:	80 80       	ld	r8, Z
    7290:	80 80       	ld	r8, Z
    7292:	80 80       	ld	r8, Z
    7294:	80 80       	ld	r8, Z
    7296:	80 80       	ld	r8, Z
    7298:	80 80       	ld	r8, Z
    729a:	80 80       	ld	r8, Z
    729c:	80 80       	ld	r8, Z
    729e:	80 80       	ld	r8, Z
    72a0:	80 80       	ld	r8, Z
    72a2:	80 80       	ld	r8, Z
    72a4:	80 80       	ld	r8, Z
    72a6:	80 80       	ld	r8, Z
    72a8:	80 80       	ld	r8, Z
    72aa:	80 80       	ld	r8, Z
    72ac:	80 80       	ld	r8, Z
    72ae:	80 80       	ld	r8, Z
    72b0:	80 80       	ld	r8, Z
    72b2:	80 80       	ld	r8, Z
    72b4:	80 80       	ld	r8, Z
    72b6:	80 80       	ld	r8, Z
    72b8:	80 80       	ld	r8, Z
    72ba:	80 80       	ld	r8, Z
    72bc:	80 80       	ld	r8, Z
    72be:	80 80       	ld	r8, Z
    72c0:	80 80       	ld	r8, Z
    72c2:	80 80       	ld	r8, Z
    72c4:	80 80       	ld	r8, Z
    72c6:	80 80       	ld	r8, Z
    72c8:	80 80       	ld	r8, Z
    72ca:	80 80       	ld	r8, Z
    72cc:	80 80       	ld	r8, Z
    72ce:	80 80       	ld	r8, Z
    72d0:	80 80       	ld	r8, Z
    72d2:	80 80       	ld	r8, Z
    72d4:	80 80       	ld	r8, Z
    72d6:	80 80       	ld	r8, Z
    72d8:	80 80       	ld	r8, Z
    72da:	80 80       	ld	r8, Z
    72dc:	80 80       	ld	r8, Z
    72de:	80 80       	ld	r8, Z
    72e0:	80 80       	ld	r8, Z
    72e2:	80 80       	ld	r8, Z
    72e4:	80 80       	ld	r8, Z
    72e6:	80 80       	ld	r8, Z
    72e8:	80 80       	ld	r8, Z
    72ea:	80 80       	ld	r8, Z
    72ec:	80 80       	ld	r8, Z
    72ee:	80 80       	ld	r8, Z
    72f0:	80 80       	ld	r8, Z
    72f2:	80 80       	ld	r8, Z
    72f4:	80 80       	ld	r8, Z
    72f6:	80 80       	ld	r8, Z
    72f8:	80 80       	ld	r8, Z
    72fa:	80 80       	ld	r8, Z
    72fc:	80 80       	ld	r8, Z
    72fe:	80 80       	ld	r8, Z
    7300:	7f 7f       	andi	r23, 0xFF	; 255
    7302:	7f 7f       	andi	r23, 0xFF	; 255
    7304:	7f 7f       	andi	r23, 0xFF	; 255
    7306:	7f 7f       	andi	r23, 0xFF	; 255
    7308:	7f 7f       	andi	r23, 0xFF	; 255
    730a:	7f 7f       	andi	r23, 0xFF	; 255
    730c:	7f 7f       	andi	r23, 0xFF	; 255
    730e:	7f 7f       	andi	r23, 0xFF	; 255
    7310:	7f 7f       	andi	r23, 0xFF	; 255
    7312:	7f 7f       	andi	r23, 0xFF	; 255
    7314:	7f 7f       	andi	r23, 0xFF	; 255
    7316:	7f 7f       	andi	r23, 0xFF	; 255
    7318:	7f 7f       	andi	r23, 0xFF	; 255
    731a:	7f 7f       	andi	r23, 0xFF	; 255
    731c:	7f 7f       	andi	r23, 0xFF	; 255
    731e:	7f 7f       	andi	r23, 0xFF	; 255
    7320:	7f 7f       	andi	r23, 0xFF	; 255
    7322:	7f 7f       	andi	r23, 0xFF	; 255
    7324:	7f 7f       	andi	r23, 0xFF	; 255
    7326:	7f 7f       	andi	r23, 0xFF	; 255
    7328:	7f 7f       	andi	r23, 0xFF	; 255
    732a:	7f 7f       	andi	r23, 0xFF	; 255
    732c:	7f 7f       	andi	r23, 0xFF	; 255
    732e:	7f 7f       	andi	r23, 0xFF	; 255
    7330:	7f 7f       	andi	r23, 0xFF	; 255
    7332:	7f 7f       	andi	r23, 0xFF	; 255
    7334:	7f 7f       	andi	r23, 0xFF	; 255
    7336:	7f 7f       	andi	r23, 0xFF	; 255
    7338:	7f 7f       	andi	r23, 0xFF	; 255
    733a:	7f 7f       	andi	r23, 0xFF	; 255
    733c:	7f 7f       	andi	r23, 0xFF	; 255
    733e:	7f 7f       	andi	r23, 0xFF	; 255
    7340:	7f 7f       	andi	r23, 0xFF	; 255
    7342:	7f 7f       	andi	r23, 0xFF	; 255
    7344:	7f 7f       	andi	r23, 0xFF	; 255
    7346:	7f 7f       	andi	r23, 0xFF	; 255
    7348:	7f 7f       	andi	r23, 0xFF	; 255
    734a:	7f 7f       	andi	r23, 0xFF	; 255
    734c:	7f 7f       	andi	r23, 0xFF	; 255
    734e:	7f 7f       	andi	r23, 0xFF	; 255
    7350:	7f 7f       	andi	r23, 0xFF	; 255
    7352:	7f 7f       	andi	r23, 0xFF	; 255
    7354:	7f 7f       	andi	r23, 0xFF	; 255
    7356:	7f 7f       	andi	r23, 0xFF	; 255
    7358:	7f 7f       	andi	r23, 0xFF	; 255
    735a:	7f 7f       	andi	r23, 0xFF	; 255
    735c:	7f 7f       	andi	r23, 0xFF	; 255
    735e:	7f 7f       	andi	r23, 0xFF	; 255
    7360:	7f 7f       	andi	r23, 0xFF	; 255
    7362:	7f 7f       	andi	r23, 0xFF	; 255
    7364:	7f 7f       	andi	r23, 0xFF	; 255
    7366:	7f 7f       	andi	r23, 0xFF	; 255
    7368:	7f 7f       	andi	r23, 0xFF	; 255
    736a:	7f 7f       	andi	r23, 0xFF	; 255
    736c:	7f 7f       	andi	r23, 0xFF	; 255
    736e:	7f 7f       	andi	r23, 0xFF	; 255
    7370:	7f 7f       	andi	r23, 0xFF	; 255
    7372:	7f 7f       	andi	r23, 0xFF	; 255
    7374:	7f 7f       	andi	r23, 0xFF	; 255
    7376:	7f 7f       	andi	r23, 0xFF	; 255
    7378:	7f 7f       	andi	r23, 0xFF	; 255
    737a:	7f 7f       	andi	r23, 0xFF	; 255
    737c:	7f 7f       	andi	r23, 0xFF	; 255
    737e:	7f 7f       	andi	r23, 0xFF	; 255
    7380:	80 80       	ld	r8, Z
    7382:	80 80       	ld	r8, Z
    7384:	80 80       	ld	r8, Z
    7386:	80 80       	ld	r8, Z
    7388:	80 80       	ld	r8, Z
    738a:	80 80       	ld	r8, Z
    738c:	80 80       	ld	r8, Z
    738e:	80 80       	ld	r8, Z
    7390:	80 80       	ld	r8, Z
    7392:	80 80       	ld	r8, Z
    7394:	80 80       	ld	r8, Z
    7396:	80 80       	ld	r8, Z
    7398:	80 80       	ld	r8, Z
    739a:	80 80       	ld	r8, Z
    739c:	80 80       	ld	r8, Z
    739e:	80 80       	ld	r8, Z
    73a0:	80 80       	ld	r8, Z
    73a2:	80 80       	ld	r8, Z
    73a4:	80 80       	ld	r8, Z
    73a6:	80 80       	ld	r8, Z
    73a8:	80 80       	ld	r8, Z
    73aa:	80 80       	ld	r8, Z
    73ac:	80 80       	ld	r8, Z
    73ae:	80 80       	ld	r8, Z
    73b0:	80 80       	ld	r8, Z
    73b2:	80 80       	ld	r8, Z
    73b4:	80 80       	ld	r8, Z
    73b6:	80 80       	ld	r8, Z
    73b8:	80 80       	ld	r8, Z
    73ba:	80 80       	ld	r8, Z
    73bc:	80 80       	ld	r8, Z
    73be:	80 80       	ld	r8, Z
    73c0:	80 80       	ld	r8, Z
    73c2:	80 80       	ld	r8, Z
    73c4:	80 80       	ld	r8, Z
    73c6:	80 80       	ld	r8, Z
    73c8:	80 80       	ld	r8, Z
    73ca:	80 80       	ld	r8, Z
    73cc:	80 80       	ld	r8, Z
    73ce:	80 80       	ld	r8, Z
    73d0:	80 80       	ld	r8, Z
    73d2:	80 80       	ld	r8, Z
    73d4:	80 80       	ld	r8, Z
    73d6:	80 80       	ld	r8, Z
    73d8:	80 80       	ld	r8, Z
    73da:	80 80       	ld	r8, Z
    73dc:	80 80       	ld	r8, Z
    73de:	80 80       	ld	r8, Z
    73e0:	80 80       	ld	r8, Z
    73e2:	80 80       	ld	r8, Z
    73e4:	80 80       	ld	r8, Z
    73e6:	80 80       	ld	r8, Z
    73e8:	80 80       	ld	r8, Z
    73ea:	80 80       	ld	r8, Z
    73ec:	80 80       	ld	r8, Z
    73ee:	80 80       	ld	r8, Z
    73f0:	80 80       	ld	r8, Z
    73f2:	80 80       	ld	r8, Z
    73f4:	80 80       	ld	r8, Z
    73f6:	80 80       	ld	r8, Z
    73f8:	80 80       	ld	r8, Z
    73fa:	80 80       	ld	r8, Z
    73fc:	80 80       	ld	r8, Z
    73fe:	80 80       	ld	r8, Z
    7400:	7f 7f       	andi	r23, 0xFF	; 255
    7402:	7f 7f       	andi	r23, 0xFF	; 255
    7404:	7f 7f       	andi	r23, 0xFF	; 255
    7406:	7f 7f       	andi	r23, 0xFF	; 255
    7408:	7f 7f       	andi	r23, 0xFF	; 255
    740a:	7f 7f       	andi	r23, 0xFF	; 255
    740c:	7f 7f       	andi	r23, 0xFF	; 255
    740e:	7f 7f       	andi	r23, 0xFF	; 255
    7410:	7f 7f       	andi	r23, 0xFF	; 255
    7412:	7f 7f       	andi	r23, 0xFF	; 255
    7414:	7f 7f       	andi	r23, 0xFF	; 255
    7416:	7f 7f       	andi	r23, 0xFF	; 255
    7418:	7f 7f       	andi	r23, 0xFF	; 255
    741a:	7f 7f       	andi	r23, 0xFF	; 255
    741c:	7f 7f       	andi	r23, 0xFF	; 255
    741e:	7f 7f       	andi	r23, 0xFF	; 255
    7420:	7f 7f       	andi	r23, 0xFF	; 255
    7422:	7f 7f       	andi	r23, 0xFF	; 255
    7424:	7f 7f       	andi	r23, 0xFF	; 255
    7426:	7f 7f       	andi	r23, 0xFF	; 255
    7428:	7f 7f       	andi	r23, 0xFF	; 255
    742a:	7f 7f       	andi	r23, 0xFF	; 255
    742c:	7f 7f       	andi	r23, 0xFF	; 255
    742e:	7f 7f       	andi	r23, 0xFF	; 255
    7430:	7f 7f       	andi	r23, 0xFF	; 255
    7432:	7f 7f       	andi	r23, 0xFF	; 255
    7434:	7f 7f       	andi	r23, 0xFF	; 255
    7436:	7f 7f       	andi	r23, 0xFF	; 255
    7438:	7f 7f       	andi	r23, 0xFF	; 255
    743a:	7f 7f       	andi	r23, 0xFF	; 255
    743c:	7f 7f       	andi	r23, 0xFF	; 255
    743e:	7f 7f       	andi	r23, 0xFF	; 255
    7440:	7f 7f       	andi	r23, 0xFF	; 255
    7442:	7f 7f       	andi	r23, 0xFF	; 255
    7444:	7f 7f       	andi	r23, 0xFF	; 255
    7446:	7f 7f       	andi	r23, 0xFF	; 255
    7448:	7f 7f       	andi	r23, 0xFF	; 255
    744a:	7f 7f       	andi	r23, 0xFF	; 255
    744c:	7f 7f       	andi	r23, 0xFF	; 255
    744e:	7f 7f       	andi	r23, 0xFF	; 255
    7450:	7f 7f       	andi	r23, 0xFF	; 255
    7452:	7f 7f       	andi	r23, 0xFF	; 255
    7454:	7f 7f       	andi	r23, 0xFF	; 255
    7456:	7f 7f       	andi	r23, 0xFF	; 255
    7458:	7f 7f       	andi	r23, 0xFF	; 255
    745a:	7f 7f       	andi	r23, 0xFF	; 255
    745c:	7f 7f       	andi	r23, 0xFF	; 255
    745e:	7f 7f       	andi	r23, 0xFF	; 255
    7460:	7f 7f       	andi	r23, 0xFF	; 255
    7462:	7f 7f       	andi	r23, 0xFF	; 255
    7464:	7f 7f       	andi	r23, 0xFF	; 255
    7466:	7f 7f       	andi	r23, 0xFF	; 255
    7468:	7f 7f       	andi	r23, 0xFF	; 255
    746a:	7f 7f       	andi	r23, 0xFF	; 255
    746c:	7f 7f       	andi	r23, 0xFF	; 255
    746e:	7f 7f       	andi	r23, 0xFF	; 255
    7470:	7f 7f       	andi	r23, 0xFF	; 255
    7472:	7f 7f       	andi	r23, 0xFF	; 255
    7474:	7f 7f       	andi	r23, 0xFF	; 255
    7476:	7f 7f       	andi	r23, 0xFF	; 255
    7478:	7f 7f       	andi	r23, 0xFF	; 255
    747a:	7f 7f       	andi	r23, 0xFF	; 255
    747c:	7f 7f       	andi	r23, 0xFF	; 255
    747e:	7f 7f       	andi	r23, 0xFF	; 255
    7480:	7f 7f       	andi	r23, 0xFF	; 255
    7482:	7f 7f       	andi	r23, 0xFF	; 255
    7484:	7f 7f       	andi	r23, 0xFF	; 255
    7486:	7f 7f       	andi	r23, 0xFF	; 255
    7488:	7f 7f       	andi	r23, 0xFF	; 255
    748a:	7f 7f       	andi	r23, 0xFF	; 255
    748c:	7f 7f       	andi	r23, 0xFF	; 255
    748e:	7f 7f       	andi	r23, 0xFF	; 255
    7490:	7f 7f       	andi	r23, 0xFF	; 255
    7492:	7f 7f       	andi	r23, 0xFF	; 255
    7494:	7f 7f       	andi	r23, 0xFF	; 255
    7496:	7f 7f       	andi	r23, 0xFF	; 255
    7498:	7f 7f       	andi	r23, 0xFF	; 255
    749a:	7f 7f       	andi	r23, 0xFF	; 255
    749c:	7f 7f       	andi	r23, 0xFF	; 255
    749e:	7f 7f       	andi	r23, 0xFF	; 255
    74a0:	7f 7f       	andi	r23, 0xFF	; 255
    74a2:	7f 7f       	andi	r23, 0xFF	; 255
    74a4:	7f 7f       	andi	r23, 0xFF	; 255
    74a6:	7f 7f       	andi	r23, 0xFF	; 255
    74a8:	7f 7f       	andi	r23, 0xFF	; 255
    74aa:	7f 7f       	andi	r23, 0xFF	; 255
    74ac:	7f 7f       	andi	r23, 0xFF	; 255
    74ae:	7f 7f       	andi	r23, 0xFF	; 255
    74b0:	7f 7f       	andi	r23, 0xFF	; 255
    74b2:	7f 7f       	andi	r23, 0xFF	; 255
    74b4:	7f 7f       	andi	r23, 0xFF	; 255
    74b6:	7f 7f       	andi	r23, 0xFF	; 255
    74b8:	7f 7f       	andi	r23, 0xFF	; 255
    74ba:	7f 7f       	andi	r23, 0xFF	; 255
    74bc:	7f 7f       	andi	r23, 0xFF	; 255
    74be:	7f 7f       	andi	r23, 0xFF	; 255
    74c0:	80 80       	ld	r8, Z
    74c2:	80 80       	ld	r8, Z
    74c4:	80 80       	ld	r8, Z
    74c6:	80 80       	ld	r8, Z
    74c8:	80 80       	ld	r8, Z
    74ca:	80 80       	ld	r8, Z
    74cc:	80 80       	ld	r8, Z
    74ce:	80 80       	ld	r8, Z
    74d0:	80 80       	ld	r8, Z
    74d2:	80 80       	ld	r8, Z
    74d4:	80 80       	ld	r8, Z
    74d6:	80 80       	ld	r8, Z
    74d8:	80 80       	ld	r8, Z
    74da:	80 80       	ld	r8, Z
    74dc:	80 80       	ld	r8, Z
    74de:	80 80       	ld	r8, Z
    74e0:	80 80       	ld	r8, Z
    74e2:	80 80       	ld	r8, Z
    74e4:	80 80       	ld	r8, Z
    74e6:	80 80       	ld	r8, Z
    74e8:	80 80       	ld	r8, Z
    74ea:	80 80       	ld	r8, Z
    74ec:	80 80       	ld	r8, Z
    74ee:	80 80       	ld	r8, Z
    74f0:	80 80       	ld	r8, Z
    74f2:	80 80       	ld	r8, Z
    74f4:	80 80       	ld	r8, Z
    74f6:	80 80       	ld	r8, Z
    74f8:	80 80       	ld	r8, Z
    74fa:	80 80       	ld	r8, Z
    74fc:	80 80       	ld	r8, Z
    74fe:	80 80       	ld	r8, Z
    7500:	03 09       	sbc	r16, r3
    7502:	13 1e       	adc	r1, r19
    7504:	28 31       	cpi	r18, 0x18	; 24
    7506:	3a 40       	sbci	r19, 0x0A	; 10
    7508:	46 4c       	sbci	r20, 0xC6	; 198
    750a:	50 54       	subi	r21, 0x40	; 64
    750c:	58 5b       	subi	r21, 0xB8	; 184
    750e:	5e 61       	ori	r21, 0x1E	; 30
    7510:	63 65       	ori	r22, 0x53	; 83
    7512:	67 69       	ori	r22, 0x97	; 151
    7514:	6b 6c       	ori	r22, 0xCB	; 203
    7516:	6e 6f       	ori	r22, 0xFE	; 254
    7518:	70 71       	andi	r23, 0x10	; 16
    751a:	72 73       	andi	r23, 0x32	; 50
    751c:	74 75       	andi	r23, 0x54	; 84
    751e:	76 77       	andi	r23, 0x76	; 118
    7520:	77 78       	andi	r23, 0x87	; 135
    7522:	79 79       	andi	r23, 0x99	; 153
    7524:	7a 7a       	andi	r23, 0xAA	; 170
    7526:	7b 7b       	andi	r23, 0xBB	; 187
    7528:	7c 7c       	andi	r23, 0xCC	; 204
    752a:	7c 7d       	andi	r23, 0xDC	; 220
    752c:	7d 7d       	andi	r23, 0xDD	; 221
    752e:	7e 7e       	andi	r23, 0xEE	; 238
    7530:	7e 7e       	andi	r23, 0xEE	; 238
    7532:	7f 7f       	andi	r23, 0xFF	; 255
    7534:	7f 7f       	andi	r23, 0xFF	; 255
    7536:	7f 7f       	andi	r23, 0xFF	; 255
    7538:	7f 7f       	andi	r23, 0xFF	; 255
    753a:	7f 7f       	andi	r23, 0xFF	; 255
    753c:	7f 7f       	andi	r23, 0xFF	; 255
    753e:	7f 7f       	andi	r23, 0xFF	; 255
    7540:	7f 7f       	andi	r23, 0xFF	; 255
    7542:	7f 7f       	andi	r23, 0xFF	; 255
    7544:	7f 7f       	andi	r23, 0xFF	; 255
    7546:	7f 7f       	andi	r23, 0xFF	; 255
    7548:	7f 7f       	andi	r23, 0xFF	; 255
    754a:	7f 7f       	andi	r23, 0xFF	; 255
    754c:	7f 7e       	andi	r23, 0xEF	; 239
    754e:	7e 7e       	andi	r23, 0xEE	; 238
    7550:	7e 7d       	andi	r23, 0xDE	; 222
    7552:	7d 7d       	andi	r23, 0xDD	; 221
    7554:	7c 7c       	andi	r23, 0xCC	; 204
    7556:	7c 7b       	andi	r23, 0xBC	; 188
    7558:	7b 7a       	andi	r23, 0xAB	; 171
    755a:	7a 79       	andi	r23, 0x9A	; 154
    755c:	79 78       	andi	r23, 0x89	; 137
    755e:	77 77       	andi	r23, 0x77	; 119
    7560:	76 75       	andi	r23, 0x56	; 86
    7562:	74 73       	andi	r23, 0x34	; 52
    7564:	72 71       	andi	r23, 0x12	; 18
    7566:	70 6f       	ori	r23, 0xF0	; 240
    7568:	6e 6c       	ori	r22, 0xCE	; 206
    756a:	6b 69       	ori	r22, 0x9B	; 155
    756c:	67 65       	ori	r22, 0x57	; 87
    756e:	63 61       	ori	r22, 0x13	; 19
    7570:	5e 5b       	subi	r21, 0xBE	; 190
    7572:	58 54       	subi	r21, 0x48	; 72
    7574:	50 4c       	sbci	r21, 0xC0	; 192
    7576:	46 40       	sbci	r20, 0x06	; 6
    7578:	3a 31       	cpi	r19, 0x1A	; 26
    757a:	28 1e       	adc	r2, r24
    757c:	13 09       	sbc	r17, r3
    757e:	03 00       	.word	0x0003	; ????
    7580:	c6 cc       	rjmp	.-1652   	; 0x6f0e <waves+0xe>
    7582:	d5 db       	rcall	.-2134   	; 0x6d2e <steptable+0x26>
    7584:	df e3       	ldi	r29, 0x3F	; 63
    7586:	e5 e7       	ldi	r30, 0x75	; 117
    7588:	e9 ea       	ldi	r30, 0xA9	; 169
    758a:	eb ec       	ldi	r30, 0xCB	; 203
    758c:	ed ee       	ldi	r30, 0xED	; 237
    758e:	ef ef       	ldi	r30, 0xFF	; 255
    7590:	f0 f0       	brcs	.+60     	; 0x75ce <waves+0x6ce>
    7592:	f0 f1       	brcs	.+124    	; 0x7610 <waves+0x710>
    7594:	f1 f1       	breq	.+124    	; 0x7612 <waves+0x712>
    7596:	f1 f2       	breq	.-68     	; 0x7554 <waves+0x654>
    7598:	f2 f2       	brmi	.-68     	; 0x7556 <waves+0x656>
    759a:	f2 f2       	brmi	.-68     	; 0x7558 <waves+0x658>
    759c:	f2 f2       	brmi	.-68     	; 0x755a <waves+0x65a>
    759e:	f2 f3       	brmi	.-4      	; 0x759c <waves+0x69c>
    75a0:	f3 f3       	brvs	.-4      	; 0x759e <waves+0x69e>
    75a2:	f3 f3       	brvs	.-4      	; 0x75a0 <waves+0x6a0>
    75a4:	f3 f3       	brvs	.-4      	; 0x75a2 <waves+0x6a2>
    75a6:	f3 f3       	brvs	.-4      	; 0x75a4 <waves+0x6a4>
    75a8:	f3 f3       	brvs	.-4      	; 0x75a6 <waves+0x6a6>
    75aa:	f3 f3       	brvs	.-4      	; 0x75a8 <waves+0x6a8>
    75ac:	f3 f3       	brvs	.-4      	; 0x75aa <waves+0x6aa>
    75ae:	f3 f3       	brvs	.-4      	; 0x75ac <waves+0x6ac>
    75b0:	f3 f3       	brvs	.-4      	; 0x75ae <waves+0x6ae>
    75b2:	f3 f3       	brvs	.-4      	; 0x75b0 <waves+0x6b0>
    75b4:	f3 f3       	brvs	.-4      	; 0x75b2 <waves+0x6b2>
    75b6:	f3 f3       	brvs	.-4      	; 0x75b4 <waves+0x6b4>
    75b8:	f3 f3       	brvs	.-4      	; 0x75b6 <waves+0x6b6>
    75ba:	f3 f3       	brvs	.-4      	; 0x75b8 <waves+0x6b8>
    75bc:	f3 f3       	brvs	.-4      	; 0x75ba <waves+0x6ba>
    75be:	f3 f3       	brvs	.-4      	; 0x75bc <waves+0x6bc>
    75c0:	f3 f3       	brvs	.-4      	; 0x75be <waves+0x6be>
    75c2:	f3 f3       	brvs	.-4      	; 0x75c0 <waves+0x6c0>
    75c4:	f3 f3       	brvs	.-4      	; 0x75c2 <waves+0x6c2>
    75c6:	f3 f3       	brvs	.-4      	; 0x75c4 <waves+0x6c4>
    75c8:	f3 f3       	brvs	.-4      	; 0x75c6 <waves+0x6c6>
    75ca:	f3 f3       	brvs	.-4      	; 0x75c8 <waves+0x6c8>
    75cc:	f3 f3       	brvs	.-4      	; 0x75ca <waves+0x6ca>
    75ce:	f3 f3       	brvs	.-4      	; 0x75cc <waves+0x6cc>
    75d0:	f3 f3       	brvs	.-4      	; 0x75ce <waves+0x6ce>
    75d2:	f3 f3       	brvs	.-4      	; 0x75d0 <waves+0x6d0>
    75d4:	f3 f3       	brvs	.-4      	; 0x75d2 <waves+0x6d2>
    75d6:	f3 f3       	brvs	.-4      	; 0x75d4 <waves+0x6d4>
    75d8:	f3 f3       	brvs	.-4      	; 0x75d6 <waves+0x6d6>
    75da:	f3 f3       	brvs	.-4      	; 0x75d8 <waves+0x6d8>
    75dc:	f3 f3       	brvs	.-4      	; 0x75da <waves+0x6da>
    75de:	f3 f3       	brvs	.-4      	; 0x75dc <waves+0x6dc>
    75e0:	f2 f2       	brmi	.-68     	; 0x759e <waves+0x69e>
    75e2:	f2 f2       	brmi	.-68     	; 0x75a0 <waves+0x6a0>
    75e4:	f2 f2       	brmi	.-68     	; 0x75a2 <waves+0x6a2>
    75e6:	f2 f2       	brmi	.-68     	; 0x75a4 <waves+0x6a4>
    75e8:	f1 f1       	breq	.+124    	; 0x7666 <waves+0x766>
    75ea:	f1 f1       	breq	.+124    	; 0x7668 <waves+0x768>
    75ec:	f0 f0       	brcs	.+60     	; 0x762a <waves+0x72a>
    75ee:	f0 ef       	ldi	r31, 0xF0	; 240
    75f0:	ef ee       	ldi	r30, 0xEF	; 239
    75f2:	ed ec       	ldi	r30, 0xCD	; 205
    75f4:	eb ea       	ldi	r30, 0xAB	; 171
    75f6:	e9 e7       	ldi	r30, 0x79	; 121
    75f8:	e5 e3       	ldi	r30, 0x35	; 53
    75fa:	df db       	rcall	.-2114   	; 0x6dba <steptable+0xb2>
    75fc:	d5 cc       	rjmp	.-1622   	; 0x6fa8 <waves+0xa8>
    75fe:	c6 00       	.word	0x00c6	; ????
    7600:	00 28       	or	r0, r0
    7602:	3d 42       	sbci	r19, 0x2D	; 45
    7604:	30 2d       	mov	r19, r0
    7606:	2c 2b       	or	r18, r28
    7608:	2c 2d       	mov	r18, r12
    760a:	2e 2f       	mov	r18, r30
    760c:	30 32       	cpi	r19, 0x20	; 32
    760e:	33 35       	cpi	r19, 0x53	; 83
    7610:	37 39       	cpi	r19, 0x97	; 151
    7612:	3b 3d       	cpi	r19, 0xDB	; 219
    7614:	3f 41       	sbci	r19, 0x1F	; 31
    7616:	43 45       	sbci	r20, 0x53	; 83
    7618:	48 4a       	sbci	r20, 0xA8	; 168
    761a:	4c 4e       	sbci	r20, 0xEC	; 236
    761c:	50 53       	subi	r21, 0x30	; 48
    761e:	55 57       	subi	r21, 0x75	; 117
    7620:	59 5b       	subi	r21, 0xB9	; 185
    7622:	5d 5f       	subi	r21, 0xFD	; 253
    7624:	61 63       	ori	r22, 0x31	; 49
    7626:	65 67       	ori	r22, 0x75	; 117
    7628:	69 6b       	ori	r22, 0xB9	; 185
    762a:	6c 6e       	ori	r22, 0xEC	; 236
    762c:	70 71       	andi	r23, 0x10	; 16
    762e:	73 74       	andi	r23, 0x43	; 67
    7630:	75 77       	andi	r23, 0x75	; 117
    7632:	78 79       	andi	r23, 0x98	; 152
    7634:	7a 7b       	andi	r23, 0xBA	; 186
    7636:	7c 7d       	andi	r23, 0xDC	; 220
    7638:	7d 7e       	andi	r23, 0xED	; 237
    763a:	7e 7f       	andi	r23, 0xFE	; 254
    763c:	7f 7f       	andi	r23, 0xFF	; 255
    763e:	7f 7f       	andi	r23, 0xFF	; 255
    7640:	7f 7f       	andi	r23, 0xFF	; 255
    7642:	7f 7f       	andi	r23, 0xFF	; 255
    7644:	7f 7f       	andi	r23, 0xFF	; 255
    7646:	7e 7e       	andi	r23, 0xEE	; 238
    7648:	7d 7d       	andi	r23, 0xDD	; 221
    764a:	7c 7b       	andi	r23, 0xBC	; 188
    764c:	7a 79       	andi	r23, 0x9A	; 154
    764e:	78 77       	andi	r23, 0x78	; 120
    7650:	75 74       	andi	r23, 0x45	; 69
    7652:	73 71       	andi	r23, 0x13	; 19
    7654:	70 6e       	ori	r23, 0xE0	; 224
    7656:	6c 6b       	ori	r22, 0xBC	; 188
    7658:	69 67       	ori	r22, 0x79	; 121
    765a:	65 63       	ori	r22, 0x35	; 53
    765c:	61 5f       	subi	r22, 0xF1	; 241
    765e:	5d 5b       	subi	r21, 0xBD	; 189
    7660:	59 57       	subi	r21, 0x79	; 121
    7662:	55 53       	subi	r21, 0x35	; 53
    7664:	50 4e       	sbci	r21, 0xE0	; 224
    7666:	4c 4a       	sbci	r20, 0xAC	; 172
    7668:	48 45       	sbci	r20, 0x58	; 88
    766a:	43 41       	sbci	r20, 0x13	; 19
    766c:	3f 3d       	cpi	r19, 0xDF	; 223
    766e:	3b 39       	cpi	r19, 0x9B	; 155
    7670:	37 35       	cpi	r19, 0x57	; 87
    7672:	33 32       	cpi	r19, 0x23	; 35
    7674:	30 2f       	mov	r19, r16
    7676:	2e 2d       	mov	r18, r14
    7678:	2c 2b       	or	r18, r28
    767a:	2c 2d       	mov	r18, r12
    767c:	30 42       	sbci	r19, 0x20	; 32
    767e:	3d 28       	or	r3, r13
    7680:	00 e9       	ldi	r16, 0x90	; 144
    7682:	e5 fe       	sbrs	r14, 5
    7684:	d4 d7       	rcall	.+4008   	; 0x862e <render_score+0x74>
    7686:	d7 d7       	rcall	.+4014   	; 0x8636 <render_score+0x7c>
    7688:	d6 d4       	rcall	.+2476   	; 0x8036 <LBLineIntersect+0x5c>
    768a:	d2 d0       	rcall	.+420    	; 0x7830 <waves+0x930>
    768c:	ce cc       	rjmp	.-1636   	; 0x702a <waves+0x12a>
    768e:	ca c8       	rjmp	.-3692   	; 0x6824 <ProcessMusic+0x68>
    7690:	c6 c3       	rjmp	.+1932   	; 0x7e1e <ProcessFading+0x2e>
    7692:	c1 bf       	out	0x31, r28	; 49
    7694:	bd ba       	out	0x1d, r11	; 29
    7696:	b8 b6       	in	r11, 0x38	; 56
    7698:	b4 b1       	in	r27, 0x04	; 4
    769a:	af ad       	ldd	r26, Y+63	; 0x3f
    769c:	ab a9       	ldd	r26, Y+51	; 0x33
    769e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    76a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    76a2:	9f 9e       	mul	r9, r31
    76a4:	9c 9a       	sbi	0x13, 4	; 19
    76a6:	99 97       	sbiw	r26, 0x29	; 41
    76a8:	95 94       	asr	r9
    76aa:	93 91       	.word	0x9193	; ????
    76ac:	90 8f       	std	Z+24, r25	; 0x18
    76ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    76b0:	8b 8a       	std	Y+19, r8	; 0x13
    76b2:	89 88       	ldd	r8, Y+17	; 0x11
    76b4:	88 87       	std	Y+8, r24	; 0x08
    76b6:	86 85       	ldd	r24, Z+14	; 0x0e
    76b8:	85 84       	ldd	r8, Z+13	; 0x0d
    76ba:	84 84       	ldd	r8, Z+12	; 0x0c
    76bc:	83 83       	std	Z+3, r24	; 0x03
    76be:	83 83       	std	Z+3, r24	; 0x03
    76c0:	83 83       	std	Z+3, r24	; 0x03
    76c2:	83 83       	std	Z+3, r24	; 0x03
    76c4:	83 84       	ldd	r8, Z+11	; 0x0b
    76c6:	84 84       	ldd	r8, Z+12	; 0x0c
    76c8:	85 85       	ldd	r24, Z+13	; 0x0d
    76ca:	86 87       	std	Z+14, r24	; 0x0e
    76cc:	88 88       	ldd	r8, Y+16	; 0x10
    76ce:	89 8a       	std	Y+17, r8	; 0x11
    76d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    76d2:	8d 8f       	std	Y+29, r24	; 0x1d
    76d4:	90 91 93 94 	lds	r25, 0x9493
    76d8:	95 97       	sbiw	r26, 0x25	; 37
    76da:	99 9a       	sbi	0x13, 1	; 19
    76dc:	9c 9e       	mul	r9, r28
    76de:	9f a1       	ldd	r25, Y+39	; 0x27
    76e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    76e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    76e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    76e6:	af b1       	in	r26, 0x0f	; 15
    76e8:	b4 b6       	in	r11, 0x34	; 52
    76ea:	b8 ba       	out	0x18, r11	; 24
    76ec:	bd bf       	out	0x3d, r27	; 61
    76ee:	c1 c3       	rjmp	.+1922   	; 0x7e72 <LBGetNextFrame+0x30>
    76f0:	c6 c8       	rjmp	.-3700   	; 0x687e <ProcessMusic+0xc2>
    76f2:	ca cc       	rjmp	.-1644   	; 0x7088 <waves+0x188>
    76f4:	ce d0       	rcall	.+412    	; 0x7892 <waves+0x992>
    76f6:	d2 d4       	rcall	.+2468   	; 0x809c <LBLineIntersect+0xc2>
    76f8:	d6 d7       	rcall	.+4012   	; 0x86a6 <render_player+0x32>
    76fa:	d7 d7       	rcall	.+4014   	; 0x86aa <render_player+0x36>
    76fc:	d4 fe       	sbrs	r13, 4
    76fe:	e5 e9       	ldi	r30, 0x95	; 149
    7700:	f9 f8       	.word	0xf8f9	; ????
    7702:	f9 f5       	brne	.+126    	; 0x7782 <waves+0x882>
    7704:	eb e1       	ldi	r30, 0x1B	; 27
    7706:	dd de       	rcall	.-582    	; 0x74c2 <waves+0x5c2>
    7708:	e0 e2       	ldi	r30, 0x20	; 32
    770a:	e4 e5       	ldi	r30, 0x54	; 84
    770c:	e6 e5       	ldi	r30, 0x56	; 86
    770e:	e4 e2       	ldi	r30, 0x24	; 36
    7710:	de d9       	rcall	.-3140   	; 0x6ace <ProcessMusic+0x312>
    7712:	d2 ca       	rjmp	.-2652   	; 0x6cb8 <esmw+0x44>
    7714:	c1 b7       	in	r28, 0x31	; 49
    7716:	ac a2       	std	Y+36, r10	; 0x24
    7718:	99 91       	ld	r25, Y+
    771a:	8a 86       	std	Y+10, r8	; 0x0a
    771c:	83 81       	ldd	r24, Z+3	; 0x03
    771e:	80 80       	ld	r8, Z
    7720:	81 82       	std	Z+1, r8	; 0x01
    7722:	83 85       	ldd	r24, Z+11	; 0x0b
    7724:	86 88       	ldd	r8, Z+22	; 0x16
    7726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    7728:	8d 8f       	std	Y+29, r24	; 0x1d
    772a:	90 92 93 95 	sts	0x9593, r9
    772e:	96 97       	sbiw	r26, 0x26	; 38
    7730:	98 99       	sbic	0x13, 0	; 19
    7732:	9a 9b       	sbis	0x13, 2	; 19
    7734:	9b 9c       	mul	r9, r11
    7736:	9d 9d       	mul	r25, r13
    7738:	9d 9e       	mul	r9, r29
    773a:	9e 9e       	mul	r9, r30
    773c:	9f 9f       	mul	r25, r31
    773e:	9f 9f       	mul	r25, r31
    7740:	9f 9f       	mul	r25, r31
    7742:	9f 9e       	mul	r9, r31
    7744:	9e 9e       	mul	r9, r30
    7746:	9d 9d       	mul	r25, r13
    7748:	9d 9c       	mul	r9, r13
    774a:	9b 9b       	sbis	0x13, 3	; 19
    774c:	9a 99       	sbic	0x13, 2	; 19
    774e:	98 97       	sbiw	r26, 0x28	; 40
    7750:	96 95       	lsr	r25
    7752:	93 92       	.word	0x9293	; ????
    7754:	90 8f       	std	Z+24, r25	; 0x18
    7756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7758:	8a 88       	ldd	r8, Y+18	; 0x12
    775a:	86 85       	ldd	r24, Z+14	; 0x0e
    775c:	83 82       	std	Z+3, r8	; 0x03
    775e:	81 80       	ldd	r8, Z+1	; 0x01
    7760:	80 81       	ld	r24, Z
    7762:	83 86       	std	Z+11, r8	; 0x0b
    7764:	8a 91       	ld	r24, -Y
    7766:	99 a2       	std	Y+33, r9	; 0x21
    7768:	ac b7       	in	r26, 0x3c	; 60
    776a:	c1 ca       	rjmp	.-2686   	; 0x6cee <esmw+0x7a>
    776c:	d2 d9       	rcall	.-3164   	; 0x6b12 <ProcessMusic+0x356>
    776e:	de e2       	ldi	r29, 0x2E	; 46
    7770:	e4 e5       	ldi	r30, 0x54	; 84
    7772:	e6 e5       	ldi	r30, 0x56	; 86
    7774:	e4 e2       	ldi	r30, 0x24	; 36
    7776:	e0 de       	rcall	.-576    	; 0x7538 <waves+0x638>
    7778:	dd e1       	ldi	r29, 0x1D	; 29
    777a:	eb f5       	brvc	.+122    	; 0x77f6 <waves+0x8f6>
    777c:	f9 f8       	.word	0xf8f9	; ????
    777e:	f9 00       	.word	0x00f9	; ????
    7780:	07 08       	sbc	r0, r7
    7782:	07 0b       	sbc	r16, r23
    7784:	15 1f       	adc	r17, r21
    7786:	23 22       	and	r2, r19
    7788:	20 1e       	adc	r2, r16
    778a:	1c 1b       	sub	r17, r28
    778c:	1a 1b       	sub	r17, r26
    778e:	1c 1e       	adc	r1, r28
    7790:	22 27       	eor	r18, r18
    7792:	2e 36       	cpi	r18, 0x6E	; 110
    7794:	3f 49       	sbci	r19, 0x9F	; 159
    7796:	54 5e       	subi	r21, 0xE4	; 228
    7798:	67 6f       	ori	r22, 0xF7	; 247
    779a:	76 7a       	andi	r23, 0xA6	; 166
    779c:	7e 7f       	andi	r23, 0xFE	; 254
    779e:	7f 7f       	andi	r23, 0xFF	; 255
    77a0:	7f 7e       	andi	r23, 0xEF	; 239
    77a2:	7d 7b       	andi	r23, 0xBD	; 189
    77a4:	7a 78       	andi	r23, 0x8A	; 138
    77a6:	76 74       	andi	r23, 0x46	; 70
    77a8:	73 71       	andi	r23, 0x13	; 19
    77aa:	70 6e       	ori	r23, 0xE0	; 224
    77ac:	6d 6b       	ori	r22, 0xBD	; 189
    77ae:	6a 69       	ori	r22, 0x9A	; 154
    77b0:	68 67       	ori	r22, 0x78	; 120
    77b2:	66 65       	ori	r22, 0x56	; 86
    77b4:	65 64       	ori	r22, 0x45	; 69
    77b6:	64 63       	ori	r22, 0x34	; 52
    77b8:	63 62       	ori	r22, 0x23	; 35
    77ba:	62 62       	ori	r22, 0x22	; 34
    77bc:	61 61       	ori	r22, 0x11	; 17
    77be:	61 61       	ori	r22, 0x11	; 17
    77c0:	61 61       	ori	r22, 0x11	; 17
    77c2:	61 62       	ori	r22, 0x21	; 33
    77c4:	62 62       	ori	r22, 0x22	; 34
    77c6:	63 63       	ori	r22, 0x33	; 51
    77c8:	63 64       	ori	r22, 0x43	; 67
    77ca:	65 65       	ori	r22, 0x55	; 85
    77cc:	66 67       	ori	r22, 0x76	; 118
    77ce:	68 69       	ori	r22, 0x98	; 152
    77d0:	6a 6b       	ori	r22, 0xBA	; 186
    77d2:	6d 6e       	ori	r22, 0xED	; 237
    77d4:	70 71       	andi	r23, 0x10	; 16
    77d6:	73 74       	andi	r23, 0x43	; 67
    77d8:	76 78       	andi	r23, 0x86	; 134
    77da:	7a 7b       	andi	r23, 0xBA	; 186
    77dc:	7d 7e       	andi	r23, 0xED	; 237
    77de:	7f 7f       	andi	r23, 0xFF	; 255
    77e0:	7f 7f       	andi	r23, 0xFF	; 255
    77e2:	7e 7a       	andi	r23, 0xAE	; 174
    77e4:	76 6f       	ori	r23, 0xF6	; 246
    77e6:	67 5e       	subi	r22, 0xE7	; 231
    77e8:	54 49       	sbci	r21, 0x94	; 148
    77ea:	3f 36       	cpi	r19, 0x6F	; 111
    77ec:	2e 27       	eor	r18, r30
    77ee:	22 1e       	adc	r2, r18
    77f0:	1c 1b       	sub	r17, r28
    77f2:	1a 1b       	sub	r17, r26
    77f4:	1c 1e       	adc	r1, r28
    77f6:	20 22       	and	r2, r16
    77f8:	23 1f       	adc	r18, r19
    77fa:	15 0b       	sbc	r17, r21
    77fc:	07 08       	sbc	r0, r7
    77fe:	07 00       	.word	0x0007	; ????
    7800:	1f 31       	cpi	r17, 0x1F	; 31
    7802:	3d 44       	sbci	r19, 0x4D	; 77
    7804:	4e 53       	subi	r20, 0x3E	; 62
    7806:	54 56       	subi	r21, 0x64	; 100
    7808:	5a 5f       	subi	r21, 0xFA	; 250
    780a:	64 69       	ori	r22, 0x94	; 148
    780c:	6e 74       	andi	r22, 0x4E	; 78
    780e:	76 79       	andi	r23, 0x96	; 150
    7810:	7c 7f       	andi	r23, 0xFC	; 252
    7812:	7f 7f       	andi	r23, 0xFF	; 255
    7814:	7f 7f       	andi	r23, 0xFF	; 255
    7816:	7f 7f       	andi	r23, 0xFF	; 255
    7818:	7f 7f       	andi	r23, 0xFF	; 255
    781a:	7f 7f       	andi	r23, 0xFF	; 255
    781c:	7f 7f       	andi	r23, 0xFF	; 255
    781e:	7f 7f       	andi	r23, 0xFF	; 255
    7820:	7f 7f       	andi	r23, 0xFF	; 255
    7822:	7f 7f       	andi	r23, 0xFF	; 255
    7824:	7f 7f       	andi	r23, 0xFF	; 255
    7826:	7f 7f       	andi	r23, 0xFF	; 255
    7828:	7f 7f       	andi	r23, 0xFF	; 255
    782a:	7f 7f       	andi	r23, 0xFF	; 255
    782c:	7f 7f       	andi	r23, 0xFF	; 255
    782e:	7f 7f       	andi	r23, 0xFF	; 255
    7830:	7f 7f       	andi	r23, 0xFF	; 255
    7832:	7f 7f       	andi	r23, 0xFF	; 255
    7834:	7f 7f       	andi	r23, 0xFF	; 255
    7836:	7f 7f       	andi	r23, 0xFF	; 255
    7838:	7f 7f       	andi	r23, 0xFF	; 255
    783a:	7f 7f       	andi	r23, 0xFF	; 255
    783c:	7f 7f       	andi	r23, 0xFF	; 255
    783e:	7f 7f       	andi	r23, 0xFF	; 255
    7840:	7f 7f       	andi	r23, 0xFF	; 255
    7842:	7f 7f       	andi	r23, 0xFF	; 255
    7844:	7f 7f       	andi	r23, 0xFF	; 255
    7846:	7f 7f       	andi	r23, 0xFF	; 255
    7848:	7f 7f       	andi	r23, 0xFF	; 255
    784a:	7f 7f       	andi	r23, 0xFF	; 255
    784c:	7f 7f       	andi	r23, 0xFF	; 255
    784e:	7f 7f       	andi	r23, 0xFF	; 255
    7850:	7f 7f       	andi	r23, 0xFF	; 255
    7852:	7f 7f       	andi	r23, 0xFF	; 255
    7854:	7f 7f       	andi	r23, 0xFF	; 255
    7856:	7f 7f       	andi	r23, 0xFF	; 255
    7858:	7f 7f       	andi	r23, 0xFF	; 255
    785a:	7f 7f       	andi	r23, 0xFF	; 255
    785c:	7f 7f       	andi	r23, 0xFF	; 255
    785e:	7f 7f       	andi	r23, 0xFF	; 255
    7860:	7f 7f       	andi	r23, 0xFF	; 255
    7862:	7f 7f       	andi	r23, 0xFF	; 255
    7864:	7f 7f       	andi	r23, 0xFF	; 255
    7866:	7f 7f       	andi	r23, 0xFF	; 255
    7868:	7f 7f       	andi	r23, 0xFF	; 255
    786a:	7f 7f       	andi	r23, 0xFF	; 255
    786c:	7f 7f       	andi	r23, 0xFF	; 255
    786e:	7f 7f       	andi	r23, 0xFF	; 255
    7870:	7f 7f       	andi	r23, 0xFF	; 255
    7872:	7f 7f       	andi	r23, 0xFF	; 255
    7874:	7f 7f       	andi	r23, 0xFF	; 255
    7876:	7f 7f       	andi	r23, 0xFF	; 255
    7878:	7f 7f       	andi	r23, 0xFF	; 255
    787a:	7f 7c       	andi	r23, 0xCF	; 207
    787c:	78 71       	andi	r23, 0x18	; 24
    787e:	68 4c       	sbci	r22, 0xC8	; 200
    7880:	2c 1c       	adc	r2, r12
    7882:	12 0c       	add	r1, r2
    7884:	0a 0b       	sbc	r16, r26
    7886:	0a 05       	cpc	r16, r10
    7888:	fd f3       	brhs	.-2      	; 0x7888 <waves+0x988>
    788a:	e9 df       	rcall	.-46     	; 0x785e <waves+0x95e>
    788c:	d4 ca       	rjmp	.-2648   	; 0x6e36 <steptable+0x12e>
    788e:	c0 b7       	in	r28, 0x30	; 48
    7890:	ae a6       	std	Y+46, r10	; 0x2e
    7892:	9e 97       	sbiw	r26, 0x2e	; 46
    7894:	91 8b       	std	Z+17, r25	; 0x11
    7896:	86 85       	ldd	r24, Z+14	; 0x0e
    7898:	82 80       	ldd	r8, Z+2	; 0x02
    789a:	80 80       	ld	r8, Z
    789c:	80 80       	ld	r8, Z
    789e:	80 80       	ld	r8, Z
    78a0:	80 80       	ld	r8, Z
    78a2:	80 80       	ld	r8, Z
    78a4:	80 80       	ld	r8, Z
    78a6:	80 80       	ld	r8, Z
    78a8:	80 80       	ld	r8, Z
    78aa:	80 80       	ld	r8, Z
    78ac:	80 80       	ld	r8, Z
    78ae:	80 80       	ld	r8, Z
    78b0:	80 80       	ld	r8, Z
    78b2:	80 80       	ld	r8, Z
    78b4:	80 80       	ld	r8, Z
    78b6:	80 80       	ld	r8, Z
    78b8:	80 80       	ld	r8, Z
    78ba:	80 80       	ld	r8, Z
    78bc:	80 80       	ld	r8, Z
    78be:	80 80       	ld	r8, Z
    78c0:	80 80       	ld	r8, Z
    78c2:	80 80       	ld	r8, Z
    78c4:	80 80       	ld	r8, Z
    78c6:	80 80       	ld	r8, Z
    78c8:	80 80       	ld	r8, Z
    78ca:	80 80       	ld	r8, Z
    78cc:	80 80       	ld	r8, Z
    78ce:	80 80       	ld	r8, Z
    78d0:	80 80       	ld	r8, Z
    78d2:	80 80       	ld	r8, Z
    78d4:	80 80       	ld	r8, Z
    78d6:	80 80       	ld	r8, Z
    78d8:	80 80       	ld	r8, Z
    78da:	80 80       	ld	r8, Z
    78dc:	80 80       	ld	r8, Z
    78de:	80 80       	ld	r8, Z
    78e0:	80 80       	ld	r8, Z
    78e2:	80 80       	ld	r8, Z
    78e4:	80 80       	ld	r8, Z
    78e6:	80 80       	ld	r8, Z
    78e8:	80 80       	ld	r8, Z
    78ea:	80 80       	ld	r8, Z
    78ec:	80 80       	ld	r8, Z
    78ee:	80 80       	ld	r8, Z
    78f0:	80 80       	ld	r8, Z
    78f2:	80 80       	ld	r8, Z
    78f4:	80 87       	std	Z+8, r24	; 0x08
    78f6:	91 9d       	mul	r25, r1
    78f8:	ac c4       	rjmp	.+2392   	; 0x8252 <player_reset_shot_state+0xc>
    78fa:	cb d4       	rcall	.+2454   	; 0x8292 <player_reset_shot_state+0x4c>
    78fc:	dd f2       	brhs	.-74     	; 0x78b4 <waves+0x9b4>
    78fe:	fa fa       	.word	0xfafa	; ????

00007900 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    7900:	90 91 ec 0f 	lds	r25, 0x0FEC
    7904:	e8 ed       	ldi	r30, 0xD8	; 216
    7906:	fc e0       	ldi	r31, 0x0C	; 12
    7908:	80 e0       	ldi	r24, 0x00	; 0
    790a:	89 17       	cp	r24, r25
    790c:	49 f0       	breq	.+18     	; 0x7920 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    790e:	a0 81       	ld	r26, Z
    7910:	b1 81       	ldd	r27, Z+1	; 0x01
    7912:	a0 5a       	subi	r26, 0xA0	; 160
    7914:	ba 4f       	sbci	r27, 0xFA	; 250
    7916:	22 81       	ldd	r18, Z+2	; 0x02
    7918:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    791a:	8f 5f       	subi	r24, 0xFF	; 255
    791c:	33 96       	adiw	r30, 0x03	; 3
    791e:	f5 cf       	rjmp	.-22     	; 0x790a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    7920:	08 95       	ret

00007922 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    7922:	2f 92       	push	r2
    7924:	3f 92       	push	r3
    7926:	4f 92       	push	r4
    7928:	5f 92       	push	r5
    792a:	6f 92       	push	r6
    792c:	7f 92       	push	r7
    792e:	8f 92       	push	r8
    7930:	9f 92       	push	r9
    7932:	af 92       	push	r10
    7934:	bf 92       	push	r11
    7936:	cf 92       	push	r12
    7938:	df 92       	push	r13
    793a:	ef 92       	push	r14
    793c:	ff 92       	push	r15
    793e:	0f 93       	push	r16
    7940:	1f 93       	push	r17
    7942:	cf 93       	push	r28
    7944:	df 93       	push	r29
    7946:	00 d0       	rcall	.+0      	; 0x7948 <ProcessSprites+0x26>
    7948:	1f 92       	push	r1
    794a:	cd b7       	in	r28, 0x3d	; 61
    794c:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    794e:	10 92 ec 0f 	sts	0x0FEC, r1
		if(!spritesOn) return;
    7952:	80 91 00 01 	lds	r24, 0x0100
    7956:	88 23       	and	r24, r24
    7958:	09 f4       	brne	.+2      	; 0x795c <ProcessSprites+0x3a>
    795a:	a1 c0       	rjmp	.+322    	; 0x7a9e <ProcessSprites+0x17c>
    795c:	e8 ea       	ldi	r30, 0xA8	; 168
    795e:	ce 2e       	mov	r12, r30
    7960:	e8 e0       	ldi	r30, 0x08	; 8
    7962:	de 2e       	mov	r13, r30
    7964:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    7966:	f6 01       	movw	r30, r12
    7968:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    796a:	80 3f       	cpi	r24, 0xF0	; 240
    796c:	09 f4       	brne	.+2      	; 0x7970 <ProcessSprites+0x4e>
    796e:	79 c0       	rjmp	.+242    	; 0x7a62 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    7970:	91 81       	ldd	r25, Z+1	; 0x01
    7972:	29 2f       	mov	r18, r25
    7974:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    7976:	28 2e       	mov	r2, r24
    7978:	26 94       	lsr	r2
    797a:	26 94       	lsr	r2
    797c:	26 94       	lsr	r2
				dx=ssx&0x7;
    797e:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    7980:	19 f0       	breq	.+6      	; 0x7988 <ProcessSprites+0x66>
    7982:	72 e0       	ldi	r23, 0x02	; 2
    7984:	47 2e       	mov	r4, r23
    7986:	02 c0       	rjmp	.+4      	; 0x798c <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    7988:	44 24       	eor	r4, r4
    798a:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    798c:	63 e0       	ldi	r22, 0x03	; 3
    798e:	36 95       	lsr	r19
    7990:	27 95       	ror	r18
    7992:	6a 95       	dec	r22
    7994:	e1 f7       	brne	.-8      	; 0x798e <ProcessSprites+0x6c>
    7996:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    7998:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    799a:	19 f0       	breq	.+6      	; 0x79a2 <ProcessSprites+0x80>
    799c:	52 e0       	ldi	r21, 0x02	; 2
    799e:	55 2e       	mov	r5, r21
    79a0:	02 c0       	rjmp	.+4      	; 0x79a6 <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    79a2:	55 24       	eor	r5, r5
    79a4:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    79a6:	29 2f       	mov	r18, r25
    79a8:	30 e0       	ldi	r19, 0x00	; 0
    79aa:	32 2f       	mov	r19, r18
    79ac:	22 27       	eor	r18, r18
    79ae:	a9 01       	movw	r20, r18
    79b0:	48 0f       	add	r20, r24
    79b2:	51 1d       	adc	r21, r1
    79b4:	5b 83       	std	Y+3, r21	; 0x03
    79b6:	4a 83       	std	Y+2, r20	; 0x02
    79b8:	e1 2c       	mov	r14, r1
    79ba:	f1 2c       	mov	r15, r1
    79bc:	94 ee       	ldi	r25, 0xE4	; 228
    79be:	93 0d       	add	r25, r3
    79c0:	99 83       	std	Y+1, r25	; 0x01
    79c2:	03 2d       	mov	r16, r3
    79c4:	0e 0d       	add	r16, r14
    79c6:	0c 31       	cpi	r16, 0x1C	; 28
    79c8:	10 f0       	brcs	.+4      	; 0x79ce <ProcessSprites+0xac>
    79ca:	09 81       	ldd	r16, Y+1	; 0x01
    79cc:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    79ce:	5e e1       	ldi	r21, 0x1E	; 30
    79d0:	05 9f       	mul	r16, r21
    79d2:	80 01       	movw	r16, r0
    79d4:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    79d6:	be 2c       	mov	r11, r14
    79d8:	aa 24       	eor	r10, r10
    79da:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    79dc:	ed e1       	ldi	r30, 0x1D	; 29
    79de:	e7 15       	cp	r30, r7
    79e0:	18 f4       	brcc	.+6      	; 0x79e8 <ProcessSprites+0xc6>
    79e2:	82 ee       	ldi	r24, 0xE2	; 226
    79e4:	87 0d       	add	r24, r7
    79e6:	01 c0       	rjmp	.+2      	; 0x79ea <ProcessSprites+0xc8>
    79e8:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    79ea:	a8 01       	movw	r20, r16
    79ec:	48 0f       	add	r20, r24
    79ee:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    79f0:	ca 01       	movw	r24, r20
    79f2:	80 5a       	subi	r24, 0xA0	; 160
    79f4:	9a 4f       	sbci	r25, 0xFA	; 250
    79f6:	4c 01       	movw	r8, r24
    79f8:	fc 01       	movw	r30, r24
    79fa:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    79fc:	80 31       	cpi	r24, 0x10	; 16
    79fe:	e0 f0       	brcs	.+56     	; 0x7a38 <ProcessSprites+0x116>
    7a00:	60 91 ec 0f 	lds	r22, 0x0FEC
    7a04:	60 31       	cpi	r22, 0x10	; 16
    7a06:	f8 f4       	brcc	.+62     	; 0x7a46 <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    7a08:	26 2f       	mov	r18, r22
    7a0a:	30 e0       	ldi	r19, 0x00	; 0
    7a0c:	f9 01       	movw	r30, r18
    7a0e:	ee 0f       	add	r30, r30
    7a10:	ff 1f       	adc	r31, r31
    7a12:	e2 0f       	add	r30, r18
    7a14:	f3 1f       	adc	r31, r19
    7a16:	e8 52       	subi	r30, 0x28	; 40
    7a18:	f3 4f       	sbci	r31, 0xF3	; 243
    7a1a:	51 83       	std	Z+1, r21	; 0x01
    7a1c:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    7a1e:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    7a20:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    7a24:	80 91 ec 0f 	lds	r24, 0x0FEC
    7a28:	f4 01       	movw	r30, r8
    7a2a:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    7a2c:	91 e0       	ldi	r25, 0x01	; 1
    7a2e:	98 0f       	add	r25, r24
    7a30:	90 93 ec 0f 	sts	0x0FEC, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    7a34:	80 31       	cpi	r24, 0x10	; 16
    7a36:	38 f4       	brcc	.+14     	; 0x7a46 <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    7a38:	2a 81       	ldd	r18, Y+2	; 0x02
    7a3a:	3b 81       	ldd	r19, Y+3	; 0x03
    7a3c:	a5 01       	movw	r20, r10
    7a3e:	68 2f       	mov	r22, r24
    7a40:	86 2d       	mov	r24, r6
    7a42:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <BlitSprite>
    7a46:	ff ef       	ldi	r31, 0xFF	; 255
    7a48:	af 1a       	sub	r10, r31
    7a4a:	bf 0a       	sbc	r11, r31
    7a4c:	73 94       	inc	r7
    7a4e:	87 2d       	mov	r24, r7
    7a50:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    7a52:	84 15       	cp	r24, r4
    7a54:	18 f2       	brcs	.-122    	; 0x79dc <ProcessSprites+0xba>
    7a56:	4f ef       	ldi	r20, 0xFF	; 255
    7a58:	e4 1a       	sub	r14, r20
    7a5a:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    7a5c:	e5 14       	cp	r14, r5
    7a5e:	08 f4       	brcc	.+2      	; 0x7a62 <ProcessSprites+0x140>
    7a60:	b0 cf       	rjmp	.-160    	; 0x79c2 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    7a62:	63 94       	inc	r6
    7a64:	84 e0       	ldi	r24, 0x04	; 4
    7a66:	c8 0e       	add	r12, r24
    7a68:	d1 1c       	adc	r13, r1
    7a6a:	9c e0       	ldi	r25, 0x0C	; 12
    7a6c:	69 12       	cpse	r6, r25
    7a6e:	7b cf       	rjmp	.-266    	; 0x7966 <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    7a70:	0f 90       	pop	r0
    7a72:	0f 90       	pop	r0
    7a74:	0f 90       	pop	r0
    7a76:	df 91       	pop	r29
    7a78:	cf 91       	pop	r28
    7a7a:	1f 91       	pop	r17
    7a7c:	0f 91       	pop	r16
    7a7e:	ff 90       	pop	r15
    7a80:	ef 90       	pop	r14
    7a82:	df 90       	pop	r13
    7a84:	cf 90       	pop	r12
    7a86:	bf 90       	pop	r11
    7a88:	af 90       	pop	r10
    7a8a:	9f 90       	pop	r9
    7a8c:	8f 90       	pop	r8
    7a8e:	7f 90       	pop	r7
    7a90:	6f 90       	pop	r6
    7a92:	5f 90       	pop	r5
    7a94:	4f 90       	pop	r4
    7a96:	3f 90       	pop	r3
    7a98:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    7a9a:	0c 94 80 3c 	jmp	0x7900	; 0x7900 <RestoreBackground>

	}
    7a9e:	0f 90       	pop	r0
    7aa0:	0f 90       	pop	r0
    7aa2:	0f 90       	pop	r0
    7aa4:	df 91       	pop	r29
    7aa6:	cf 91       	pop	r28
    7aa8:	1f 91       	pop	r17
    7aaa:	0f 91       	pop	r16
    7aac:	ff 90       	pop	r15
    7aae:	ef 90       	pop	r14
    7ab0:	df 90       	pop	r13
    7ab2:	cf 90       	pop	r12
    7ab4:	bf 90       	pop	r11
    7ab6:	af 90       	pop	r10
    7ab8:	9f 90       	pop	r9
    7aba:	8f 90       	pop	r8
    7abc:	7f 90       	pop	r7
    7abe:	6f 90       	pop	r6
    7ac0:	5f 90       	pop	r5
    7ac2:	4f 90       	pop	r4
    7ac4:	3f 90       	pop	r3
    7ac6:	2f 90       	pop	r2
    7ac8:	08 95       	ret

00007aca <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    7aca:	df 92       	push	r13
    7acc:	ef 92       	push	r14
    7ace:	ff 92       	push	r15
    7ad0:	0f 93       	push	r16
    7ad2:	1f 93       	push	r17
    7ad4:	cf 93       	push	r28
    7ad6:	df 93       	push	r29
    7ad8:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    7ada:	fb 01       	movw	r30, r22
    7adc:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    7ade:	31 96       	adiw	r30, 0x01	; 1
    7ae0:	64 91       	lpm	r22, Z
    7ae2:	5f ef       	ldi	r21, 0xFF	; 255
    7ae4:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    7ae6:	24 2f       	mov	r18, r20
    7ae8:	21 70       	andi	r18, 0x01	; 1
    7aea:	40 ff       	sbrs	r20, 0
    7aec:	04 c0       	rjmp	.+8      	; 0x7af6 <MapSprite2+0x2c>
			x=(mapWidth-1);
    7aee:	95 2f       	mov	r25, r21
			dx=-1;
    7af0:	ff 24       	eor	r15, r15
    7af2:	fa 94       	dec	r15
    7af4:	03 c0       	rjmp	.+6      	; 0x7afc <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    7af6:	ff 24       	eor	r15, r15
    7af8:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    7afa:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    7afc:	41 ff       	sbrs	r20, 1
    7afe:	05 c0       	rjmp	.+10     	; 0x7b0a <MapSprite2+0x40>
			y=(mapHeight-1);
    7b00:	7f ef       	ldi	r23, 0xFF	; 255
    7b02:	76 0f       	add	r23, r22
			dy=-1;
    7b04:	ee 24       	eor	r14, r14
    7b06:	ea 94       	dec	r14
    7b08:	03 c0       	rjmp	.+6      	; 0x7b10 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    7b0a:	ee 24       	eor	r14, r14
    7b0c:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    7b0e:	70 e0       	ldi	r23, 0x00	; 0
    7b10:	21 11       	cpse	r18, r1
    7b12:	01 c0       	rjmp	.+2      	; 0x7b16 <MapSprite2+0x4c>
    7b14:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    7b16:	00 e0       	ldi	r16, 0x00	; 0
    7b18:	06 17       	cp	r16, r22
    7b1a:	09 f1       	breq	.+66     	; 0x7b5e <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7b1c:	71 03       	mulsu	r23, r17
    7b1e:	e0 01       	movw	r28, r0
    7b20:	11 24       	eor	r1, r1
    7b22:	d8 2e       	mov	r13, r24
    7b24:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    7b26:	8d 15       	cp	r24, r13
    7b28:	b1 f0       	breq	.+44     	; 0x7b56 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7b2a:	9e 01       	movw	r18, r28
    7b2c:	29 0f       	add	r18, r25
    7b2e:	31 1d       	adc	r19, r1
    7b30:	97 fd       	sbrc	r25, 7
    7b32:	3a 95       	dec	r19
    7b34:	2e 5f       	subi	r18, 0xFE	; 254
    7b36:	3f 4f       	sbci	r19, 0xFF	; 255
    7b38:	fd 01       	movw	r30, r26
    7b3a:	e2 0f       	add	r30, r18
    7b3c:	f3 1f       	adc	r31, r19
    7b3e:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    7b40:	34 e0       	ldi	r19, 0x04	; 4
    7b42:	83 9f       	mul	r24, r19
    7b44:	f0 01       	movw	r30, r0
    7b46:	11 24       	eor	r1, r1
    7b48:	e8 55       	subi	r30, 0x58	; 88
    7b4a:	f7 4f       	sbci	r31, 0xF7	; 247
    7b4c:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    7b4e:	8f 5f       	subi	r24, 0xFF	; 255
    7b50:	43 83       	std	Z+3, r20	; 0x03
    7b52:	9f 0d       	add	r25, r15
    7b54:	e8 cf       	rjmp	.-48     	; 0x7b26 <MapSprite2+0x5c>
    7b56:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    7b58:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7b5a:	95 2f       	mov	r25, r21
    7b5c:	dd cf       	rjmp	.-70     	; 0x7b18 <MapSprite2+0x4e>
	    }
	}
    7b5e:	df 91       	pop	r29
    7b60:	cf 91       	pop	r28
    7b62:	1f 91       	pop	r17
    7b64:	0f 91       	pop	r16
    7b66:	ff 90       	pop	r15
    7b68:	ef 90       	pop	r14
    7b6a:	df 90       	pop	r13
    7b6c:	08 95       	ret

00007b6e <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    7b6e:	0f 93       	push	r16
    7b70:	cf 93       	push	r28
    7b72:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    7b74:	30 e0       	ldi	r19, 0x00	; 0
    7b76:	30 17       	cp	r19, r16
    7b78:	e1 f0       	breq	.+56     	; 0x7bb2 <MoveSprite+0x44>
    7b7a:	b4 2f       	mov	r27, r20
    7b7c:	a0 e2       	ldi	r26, 0x20	; 32
    7b7e:	a4 0f       	add	r26, r20
    7b80:	78 2f       	mov	r23, r24
    7b82:	72 0f       	add	r23, r18
    7b84:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    7b86:	87 17       	cp	r24, r23
    7b88:	81 f0       	breq	.+32     	; 0x7baa <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    7b8a:	c4 e0       	ldi	r28, 0x04	; 4
    7b8c:	8c 9f       	mul	r24, r28
    7b8e:	f0 01       	movw	r30, r0
    7b90:	11 24       	eor	r1, r1
    7b92:	e8 55       	subi	r30, 0x58	; 88
    7b94:	f7 4f       	sbci	r31, 0xF7	; 247
    7b96:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    7b98:	41 3e       	cpi	r20, 0xE1	; 225
    7b9a:	51 05       	cpc	r21, r1
    7b9c:	14 f0       	brlt	.+4      	; 0x7ba2 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    7b9e:	a1 83       	std	Z+1, r26	; 0x01
    7ba0:	01 c0       	rjmp	.+2      	; 0x7ba4 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    7ba2:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    7ba4:	8f 5f       	subi	r24, 0xFF	; 255
    7ba6:	98 5f       	subi	r25, 0xF8	; 248
    7ba8:	ee cf       	rjmp	.-36     	; 0x7b86 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    7baa:	3f 5f       	subi	r19, 0xFF	; 255
    7bac:	48 5f       	subi	r20, 0xF8	; 248
    7bae:	5f 4f       	sbci	r21, 0xFF	; 255
    7bb0:	e2 cf       	rjmp	.-60     	; 0x7b76 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    7bb2:	cf 91       	pop	r28
    7bb4:	0f 91       	pop	r16
    7bb6:	08 95       	ret

00007bb8 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    7bb8:	e8 ea       	ldi	r30, 0xA8	; 168
    7bba:	f8 e0       	ldi	r31, 0x08	; 8

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    7bbc:	80 ef       	ldi	r24, 0xF0	; 240
    7bbe:	80 83       	st	Z, r24
    7bc0:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    7bc2:	98 e0       	ldi	r25, 0x08	; 8
    7bc4:	e8 3d       	cpi	r30, 0xD8	; 216
    7bc6:	f9 07       	cpc	r31, r25
    7bc8:	d1 f7       	brne	.-12     	; 0x7bbe <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    7bca:	08 95       	ret

00007bcc <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    7bcc:	4f 92       	push	r4
    7bce:	5f 92       	push	r5
    7bd0:	6f 92       	push	r6
    7bd2:	7f 92       	push	r7
    7bd4:	8f 92       	push	r8
    7bd6:	9f 92       	push	r9
    7bd8:	af 92       	push	r10
    7bda:	bf 92       	push	r11
    7bdc:	cf 92       	push	r12
    7bde:	df 92       	push	r13
    7be0:	ef 92       	push	r14
    7be2:	ff 92       	push	r15
    7be4:	0f 93       	push	r16
    7be6:	1f 93       	push	r17
    7be8:	cf 93       	push	r28
    7bea:	df 93       	push	r29
    7bec:	68 2e       	mov	r6, r24
    7bee:	56 2e       	mov	r5, r22
    7bf0:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    7bf2:	fa 01       	movw	r30, r20
    7bf4:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    7bf6:	31 96       	adiw	r30, 0x01	; 1
    7bf8:	84 90       	lpm	r8, Z
    7bfa:	c7 2c       	mov	r12, r7
    7bfc:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    7bfe:	00 e0       	ldi	r16, 0x00	; 0
    7c00:	10 e0       	ldi	r17, 0x00	; 0
    7c02:	91 2c       	mov	r9, r1
    7c04:	98 14       	cp	r9, r8
    7c06:	f1 f0       	breq	.+60     	; 0x7c44 <DrawMap2+0x78>
    7c08:	c0 e0       	ldi	r28, 0x00	; 0
    7c0a:	d0 e0       	ldi	r29, 0x00	; 0
    7c0c:	58 01       	movw	r10, r16
    7c0e:	f2 e0       	ldi	r31, 0x02	; 2
    7c10:	af 0e       	add	r10, r31
    7c12:	b1 1c       	adc	r11, r1
    7c14:	49 2c       	mov	r4, r9
    7c16:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    7c18:	c7 15       	cp	r28, r7
    7c1a:	80 f4       	brcc	.+32     	; 0x7c3c <DrawMap2+0x70>
    7c1c:	95 01       	movw	r18, r10
    7c1e:	2c 0f       	add	r18, r28
    7c20:	3d 1f       	adc	r19, r29
    7c22:	f7 01       	movw	r30, r14
    7c24:	e2 0f       	add	r30, r18
    7c26:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    7c28:	24 91       	lpm	r18, Z
    7c2a:	42 2f       	mov	r20, r18
    7c2c:	50 e0       	ldi	r21, 0x00	; 0
    7c2e:	64 2d       	mov	r22, r4
    7c30:	8c 2f       	mov	r24, r28
    7c32:	86 0d       	add	r24, r6
    7c34:	0e 94 9a 30 	call	0x6134	; 0x6134 <SetTile>
    7c38:	21 96       	adiw	r28, 0x01	; 1
    7c3a:	ee cf       	rjmp	.-36     	; 0x7c18 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    7c3c:	93 94       	inc	r9
    7c3e:	0c 0d       	add	r16, r12
    7c40:	1d 1d       	adc	r17, r13
    7c42:	e0 cf       	rjmp	.-64     	; 0x7c04 <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    7c44:	df 91       	pop	r29
    7c46:	cf 91       	pop	r28
    7c48:	1f 91       	pop	r17
    7c4a:	0f 91       	pop	r16
    7c4c:	ff 90       	pop	r15
    7c4e:	ef 90       	pop	r14
    7c50:	df 90       	pop	r13
    7c52:	cf 90       	pop	r12
    7c54:	bf 90       	pop	r11
    7c56:	af 90       	pop	r10
    7c58:	9f 90       	pop	r9
    7c5a:	8f 90       	pop	r8
    7c5c:	7f 90       	pop	r7
    7c5e:	6f 90       	pop	r6
    7c60:	5f 90       	pop	r5
    7c62:	4f 90       	pop	r4
    7c64:	08 95       	ret

00007c66 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    7c66:	df 92       	push	r13
    7c68:	ef 92       	push	r14
    7c6a:	ff 92       	push	r15
    7c6c:	0f 93       	push	r16
    7c6e:	1f 93       	push	r17
    7c70:	cf 93       	push	r28
    7c72:	df 93       	push	r29
    7c74:	f6 2e       	mov	r15, r22
    7c76:	04 2f       	mov	r16, r20
    7c78:	d2 2e       	mov	r13, r18
    7c7a:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    7c7c:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    7c7e:	8a e0       	ldi	r24, 0x0A	; 10
    7c80:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    7c82:	01 11       	cpse	r16, r1
    7c84:	02 c0       	rjmp	.+4      	; 0x7c8a <PrintByte+0x24>
    7c86:	11 11       	cpse	r17, r1
    7c88:	07 c0       	rjmp	.+14     	; 0x7c98 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    7c8a:	80 2f       	mov	r24, r16
    7c8c:	6e 2d       	mov	r22, r14
    7c8e:	0e 94 cb 4e 	call	0x9d96	; 0x9d96 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    7c92:	40 e1       	ldi	r20, 0x10	; 16
    7c94:	49 0f       	add	r20, r25
    7c96:	05 c0       	rjmp	.+10     	; 0x7ca2 <PrintByte+0x3c>
		}else{
			if(zeropad){
    7c98:	dd 20       	and	r13, r13
    7c9a:	11 f0       	breq	.+4      	; 0x7ca0 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    7c9c:	40 e1       	ldi	r20, 0x10	; 16
    7c9e:	01 c0       	rjmp	.+2      	; 0x7ca2 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    7ca0:	40 e0       	ldi	r20, 0x00	; 0
    7ca2:	6f 2d       	mov	r22, r15
    7ca4:	8c 2f       	mov	r24, r28
    7ca6:	0e 94 96 30 	call	0x612c	; 0x612c <SetFont>
			}
		}
		val=val/10;
    7caa:	80 2f       	mov	r24, r16
    7cac:	6e 2d       	mov	r22, r14
    7cae:	0e 94 cb 4e 	call	0x9d96	; 0x9d96 <__udivmodqi4>
    7cb2:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    7cb4:	1f 5f       	subi	r17, 0xFF	; 255
    7cb6:	21 97       	sbiw	r28, 0x01	; 1
    7cb8:	13 30       	cpi	r17, 0x03	; 3
    7cba:	19 f7       	brne	.-58     	; 0x7c82 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    7cbc:	df 91       	pop	r29
    7cbe:	cf 91       	pop	r28
    7cc0:	1f 91       	pop	r17
    7cc2:	0f 91       	pop	r16
    7cc4:	ff 90       	pop	r15
    7cc6:	ef 90       	pop	r14
    7cc8:	df 90       	pop	r13
    7cca:	08 95       	ret

00007ccc <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    7ccc:	0f 93       	push	r16
    7cce:	1f 93       	push	r17
    7cd0:	cf 93       	push	r28
    7cd2:	df 93       	push	r29
    7cd4:	06 2f       	mov	r16, r22
    7cd6:	c4 2f       	mov	r28, r20
    7cd8:	d5 2f       	mov	r29, r21
    7cda:	18 2f       	mov	r17, r24
    7cdc:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    7cde:	fe 01       	movw	r30, r28
    7ce0:	44 91       	lpm	r20, Z
		if(c!=0){
    7ce2:	44 23       	and	r20, r20
    7ce4:	49 f0       	breq	.+18     	; 0x7cf8 <Print+0x2c>
			c=((c&127)-32);			
    7ce6:	4f 77       	andi	r20, 0x7F	; 127
    7ce8:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    7cea:	60 2f       	mov	r22, r16
    7cec:	8c 2f       	mov	r24, r28
    7cee:	81 0f       	add	r24, r17
    7cf0:	0e 94 96 30 	call	0x612c	; 0x612c <SetFont>
    7cf4:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    7cf6:	f3 cf       	rjmp	.-26     	; 0x7cde <Print+0x12>
	
}
    7cf8:	df 91       	pop	r29
    7cfa:	cf 91       	pop	r28
    7cfc:	1f 91       	pop	r17
    7cfe:	0f 91       	pop	r16
    7d00:	08 95       	ret

00007d02 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    7d02:	40 52       	subi	r20, 0x20	; 32
    7d04:	0c 94 96 30 	jmp	0x612c	; 0x612c <SetFont>

00007d08 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    7d08:	0f 93       	push	r16
    7d0a:	1f 93       	push	r17
    7d0c:	cf 93       	push	r28
    7d0e:	df 93       	push	r29
    7d10:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7d12:	c0 e0       	ldi	r28, 0x00	; 0
    7d14:	d0 e0       	ldi	r29, 0x00	; 0
    7d16:	c0 17       	cp	r28, r16
    7d18:	d1 07       	cpc	r29, r17
    7d1a:	44 f4       	brge	.+16     	; 0x7d2c <WaitVsync+0x24>
		while(!GetVsyncFlag());
    7d1c:	0e 94 b0 30 	call	0x6160	; 0x6160 <GetVsyncFlag>
    7d20:	88 23       	and	r24, r24
    7d22:	e1 f3       	breq	.-8      	; 0x7d1c <WaitVsync+0x14>
		ClearVsyncFlag();		
    7d24:	0e 94 b4 30 	call	0x6168	; 0x6168 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7d28:	21 96       	adiw	r28, 0x01	; 1
    7d2a:	f5 cf       	rjmp	.-22     	; 0x7d16 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    7d2c:	df 91       	pop	r29
    7d2e:	cf 91       	pop	r28
    7d30:	1f 91       	pop	r17
    7d32:	0f 91       	pop	r16
    7d34:	08 95       	ret

00007d36 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    7d36:	8d e1       	ldi	r24, 0x1D	; 29
    7d38:	99 e0       	ldi	r25, 0x09	; 9
    7d3a:	0e 94 a4 32 	call	0x6548	; 0x6548 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    7d3e:	8d e1       	ldi	r24, 0x1D	; 29
    7d40:	91 e0       	ldi	r25, 0x01	; 1
    7d42:	0e 94 ab 30 	call	0x6156	; 0x6156 <SetTileTable>
			
			//draw logo
			ClearVram();
    7d46:	0e 94 8c 30 	call	0x6118	; 0x6118 <ClearVram>
			WaitVsync(15);		
    7d4a:	8f e0       	ldi	r24, 0x0F	; 15
    7d4c:	90 e0       	ldi	r25, 0x00	; 0
    7d4e:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    7d52:	41 e0       	ldi	r20, 0x01	; 1
    7d54:	6f ef       	ldi	r22, 0xFF	; 255
    7d56:	80 e0       	ldi	r24, 0x00	; 0
    7d58:	0e 94 68 33 	call	0x66d0	; 0x66d0 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    7d5c:	47 e0       	ldi	r20, 0x07	; 7
    7d5e:	51 e0       	ldi	r21, 0x01	; 1
    7d60:	6c e0       	ldi	r22, 0x0C	; 12
    7d62:	8c e0       	ldi	r24, 0x0C	; 12
    7d64:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <DrawMap2>
			WaitVsync(3);
    7d68:	83 e0       	ldi	r24, 0x03	; 3
    7d6a:	90 e0       	ldi	r25, 0x00	; 0
    7d6c:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    7d70:	46 ef       	ldi	r20, 0xF6	; 246
    7d72:	50 e0       	ldi	r21, 0x00	; 0
    7d74:	6c e0       	ldi	r22, 0x0C	; 12
    7d76:	8c e0       	ldi	r24, 0x0C	; 12
    7d78:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <DrawMap2>
			WaitVsync(2);
    7d7c:	82 e0       	ldi	r24, 0x02	; 2
    7d7e:	90 e0       	ldi	r25, 0x00	; 0
    7d80:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    7d84:	47 e0       	ldi	r20, 0x07	; 7
    7d86:	51 e0       	ldi	r21, 0x01	; 1
    7d88:	6c e0       	ldi	r22, 0x0C	; 12
    7d8a:	8c e0       	ldi	r24, 0x0C	; 12
    7d8c:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <DrawMap2>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    7d90:	81 e4       	ldi	r24, 0x41	; 65
    7d92:	90 e0       	ldi	r25, 0x00	; 0
    7d94:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <WaitVsync>
			ClearVram();
    7d98:	0e 94 8c 30 	call	0x6118	; 0x6118 <ClearVram>
			WaitVsync(20);
    7d9c:	84 e1       	ldi	r24, 0x14	; 20
    7d9e:	90 e0       	ldi	r25, 0x00	; 0
    7da0:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <WaitVsync>

00007da4 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    7da4:	80 93 ea 0f 	sts	0x0FEA, r24
	currFadeFrame=0;
    7da8:	10 92 ee 0f 	sts	0x0FEE, r1
	fadeActive=true;
    7dac:	81 e0       	ldi	r24, 0x01	; 1
    7dae:	80 93 ed 0f 	sts	0x0FED, r24
		
	if(blocking){
    7db2:	66 23       	and	r22, r22
    7db4:	21 f0       	breq	.+8      	; 0x7dbe <doFade+0x1a>
		while(fadeActive==true);
    7db6:	80 91 ed 0f 	lds	r24, 0x0FED
    7dba:	81 11       	cpse	r24, r1
    7dbc:	fc cf       	rjmp	.-8      	; 0x7db6 <doFade+0x12>
    7dbe:	08 95       	ret

00007dc0 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    7dc0:	81 11       	cpse	r24, r1
    7dc2:	03 c0       	rjmp	.+6      	; 0x7dca <FadeIn+0xa>
		DDRC=0xff;
    7dc4:	8f ef       	ldi	r24, 0xFF	; 255
    7dc6:	87 b9       	out	0x07, r24	; 7
		return;
    7dc8:	08 95       	ret
	}
	fadeStep=1;
    7dca:	91 e0       	ldi	r25, 0x01	; 1
    7dcc:	90 93 ef 0f 	sts	0x0FEF, r25
	fadeDir=1;
    7dd0:	90 93 eb 0f 	sts	0x0FEB, r25
	doFade(speed,blocking);
    7dd4:	0c 94 d2 3e 	jmp	0x7da4	; 0x7da4 <doFade>

00007dd8 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    7dd8:	81 11       	cpse	r24, r1
    7dda:	02 c0       	rjmp	.+4      	; 0x7de0 <FadeOut+0x8>
		DDRC=0;
    7ddc:	17 b8       	out	0x07, r1	; 7
		return;
    7dde:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    7de0:	9c e0       	ldi	r25, 0x0C	; 12
    7de2:	90 93 ef 0f 	sts	0x0FEF, r25
	fadeDir=-1;
    7de6:	9f ef       	ldi	r25, 0xFF	; 255
    7de8:	90 93 eb 0f 	sts	0x0FEB, r25
	doFade(speed,blocking);
    7dec:	0c 94 d2 3e 	jmp	0x7da4	; 0x7da4 <doFade>

00007df0 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    7df0:	80 91 ed 0f 	lds	r24, 0x0FED
    7df4:	88 23       	and	r24, r24
    7df6:	01 f1       	breq	.+64     	; 0x7e38 <ProcessFading+0x48>
		if(currFadeFrame==0){
    7df8:	80 91 ee 0f 	lds	r24, 0x0FEE
    7dfc:	81 11       	cpse	r24, r1
    7dfe:	19 c0       	rjmp	.+50     	; 0x7e32 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    7e00:	80 91 ea 0f 	lds	r24, 0x0FEA
    7e04:	80 93 ee 0f 	sts	0x0FEE, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    7e08:	e0 91 ef 0f 	lds	r30, 0x0FEF
    7e0c:	f0 e0       	ldi	r31, 0x00	; 0
    7e0e:	e7 51       	subi	r30, 0x17	; 23
    7e10:	ff 4f       	sbci	r31, 0xFF	; 255
    7e12:	e4 91       	lpm	r30, Z
    7e14:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    7e16:	90 91 eb 0f 	lds	r25, 0x0FEB
    7e1a:	80 91 ef 0f 	lds	r24, 0x0FEF
    7e1e:	89 0f       	add	r24, r25
    7e20:	80 93 ef 0f 	sts	0x0FEF, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    7e24:	88 23       	and	r24, r24
    7e26:	11 f0       	breq	.+4      	; 0x7e2c <ProcessFading+0x3c>
    7e28:	8d 30       	cpi	r24, 0x0D	; 13
    7e2a:	31 f4       	brne	.+12     	; 0x7e38 <ProcessFading+0x48>
				fadeActive=false;
    7e2c:	10 92 ed 0f 	sts	0x0FED, r1
    7e30:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    7e32:	81 50       	subi	r24, 0x01	; 1
    7e34:	80 93 ee 0f 	sts	0x0FEE, r24
    7e38:	08 95       	ret

00007e3a <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    7e3a:	0e 94 f8 3e 	call	0x7df0	; 0x7df0 <ProcessFading>
		ProcessSprites();
    7e3e:	0c 94 91 3c 	jmp	0x7922	; 0x7922 <ProcessSprites>

00007e42 <LBGetNextFrame>:
	u8 frame_count;			// Render frame counter
	char* anims[3];
} Animation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    7e42:	cf 93       	push	r28
    7e44:	df 93       	push	r29
    7e46:	fc 01       	movw	r30, r24
    7e48:	eb 01       	movw	r28, r22
	*looped = 0;
    7e4a:	18 82       	st	Y, r1
	anim->frame_count += 1;
    7e4c:	93 81       	ldd	r25, Z+3	; 0x03
    7e4e:	9f 5f       	subi	r25, 0xFF	; 255
    7e50:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    7e52:	22 81       	ldd	r18, Z+2	; 0x02
    7e54:	80 81       	ld	r24, Z
    7e56:	92 17       	cp	r25, r18
    7e58:	70 f0       	brcs	.+28     	; 0x7e76 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    7e5a:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    7e5c:	90 e0       	ldi	r25, 0x00	; 0
    7e5e:	01 96       	adiw	r24, 0x01	; 1
    7e60:	21 81       	ldd	r18, Z+1	; 0x01
    7e62:	62 2f       	mov	r22, r18
    7e64:	70 e0       	ldi	r23, 0x00	; 0
    7e66:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <__divmodhi4>
    7e6a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    7e6c:	81 11       	cpse	r24, r1
    7e6e:	02 c0       	rjmp	.+4      	; 0x7e74 <LBGetNextFrame+0x32>
    7e70:	81 e0       	ldi	r24, 0x01	; 1
    7e72:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    7e74:	80 81       	ld	r24, Z
    7e76:	e8 0f       	add	r30, r24
    7e78:	f1 1d       	adc	r31, r1
    7e7a:	e8 0f       	add	r30, r24
    7e7c:	f1 1d       	adc	r31, r1
    7e7e:	84 81       	ldd	r24, Z+4	; 0x04
    7e80:	95 81       	ldd	r25, Z+5	; 0x05
}
    7e82:	df 91       	pop	r29
    7e84:	cf 91       	pop	r28
    7e86:	08 95       	ret

00007e88 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    7e88:	0f 93       	push	r16
    7e8a:	1f 93       	push	r17
    7e8c:	cf 93       	push	r28
    7e8e:	df 93       	push	r29
    7e90:	8c 01       	movw	r16, r24
    7e92:	eb 01       	movw	r28, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    7e94:	80 e0       	ldi	r24, 0x00	; 0
    7e96:	0e 94 ba 30 	call	0x6174	; 0x6174 <ReadJoypad>
    7e9a:	f8 01       	movw	r30, r16
    7e9c:	95 83       	std	Z+5, r25	; 0x05
    7e9e:	84 83       	std	Z+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    7ea0:	20 91 7f 0f 	lds	r18, 0x0F7F
    7ea4:	30 91 80 0f 	lds	r19, 0x0F80
    7ea8:	a9 01       	movw	r20, r18
    7eaa:	40 95       	com	r20
    7eac:	50 95       	com	r21
    7eae:	48 23       	and	r20, r24
    7eb0:	59 23       	and	r21, r25
    7eb2:	51 83       	std	Z+1, r21	; 0x01
    7eb4:	40 83       	st	Z, r20
	p1->released = p1_prev & (p1->held ^ p1_prev);
    7eb6:	ac 01       	movw	r20, r24
    7eb8:	40 95       	com	r20
    7eba:	50 95       	com	r21
    7ebc:	24 23       	and	r18, r20
    7ebe:	35 23       	and	r19, r21
    7ec0:	33 83       	std	Z+3, r19	; 0x03
    7ec2:	22 83       	std	Z+2, r18	; 0x02
	p1_prev = p1->held;
    7ec4:	90 93 80 0f 	sts	0x0F80, r25
    7ec8:	80 93 7f 0f 	sts	0x0F7F, r24
	p2->held = ReadJoypad(1);
    7ecc:	81 e0       	ldi	r24, 0x01	; 1
    7ece:	0e 94 ba 30 	call	0x6174	; 0x6174 <ReadJoypad>
    7ed2:	9d 83       	std	Y+5, r25	; 0x05
    7ed4:	8c 83       	std	Y+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    7ed6:	20 91 7d 0f 	lds	r18, 0x0F7D
    7eda:	30 91 7e 0f 	lds	r19, 0x0F7E
    7ede:	a9 01       	movw	r20, r18
    7ee0:	40 95       	com	r20
    7ee2:	50 95       	com	r21
    7ee4:	48 23       	and	r20, r24
    7ee6:	59 23       	and	r21, r25
    7ee8:	59 83       	std	Y+1, r21	; 0x01
    7eea:	48 83       	st	Y, r20
	p2->released = p2_prev & (p2->held ^ p2_prev);
    7eec:	ac 01       	movw	r20, r24
    7eee:	40 95       	com	r20
    7ef0:	50 95       	com	r21
    7ef2:	24 23       	and	r18, r20
    7ef4:	35 23       	and	r19, r21
    7ef6:	3b 83       	std	Y+3, r19	; 0x03
    7ef8:	2a 83       	std	Y+2, r18	; 0x02
	p2_prev = p2->held;
    7efa:	90 93 7e 0f 	sts	0x0F7E, r25
    7efe:	80 93 7d 0f 	sts	0x0F7D, r24
}
    7f02:	df 91       	pop	r29
    7f04:	cf 91       	pop	r28
    7f06:	1f 91       	pop	r17
    7f08:	0f 91       	pop	r16
    7f0a:	08 95       	ret

00007f0c <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    7f0c:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    7f0e:	fb 01       	movw	r30, r22
    7f10:	2e 2f       	mov	r18, r30
    7f12:	23 1b       	sub	r18, r19
    7f14:	24 17       	cp	r18, r20
    7f16:	28 f4       	brcc	.+10     	; 0x7f22 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    7f18:	21 91       	ld	r18, Z+
    7f1a:	dc 01       	movw	r26, r24
    7f1c:	2d 93       	st	X+, r18
    7f1e:	cd 01       	movw	r24, r26
    7f20:	f7 cf       	rjmp	.-18     	; 0x7f10 <LBCopyChars+0x4>
	}
}
    7f22:	08 95       	ret

00007f24 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    7f24:	af 92       	push	r10
    7f26:	bf 92       	push	r11
    7f28:	cf 92       	push	r12
    7f2a:	df 92       	push	r13
    7f2c:	ef 92       	push	r14
    7f2e:	ff 92       	push	r15
    7f30:	0f 93       	push	r16
    7f32:	1f 93       	push	r17
    7f34:	cf 93       	push	r28
    7f36:	df 93       	push	r29
    7f38:	1f 92       	push	r1
    7f3a:	cd b7       	in	r28, 0x3d	; 61
    7f3c:	de b7       	in	r29, 0x3e	; 62
    7f3e:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    7f40:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    7f42:	c6 2e       	mov	r12, r22
    7f44:	d1 2c       	mov	r13, r1
    7f46:	90 e0       	ldi	r25, 0x00	; 0
    7f48:	5c 01       	movw	r10, r24
    7f4a:	a4 1a       	sub	r10, r20
    7f4c:	b5 0a       	sbc	r11, r21
    7f4e:	80 2f       	mov	r24, r16
    7f50:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    7f52:	82 17       	cp	r24, r18
    7f54:	60 f4       	brcc	.+24     	; 0x7f6e <LBPrintStr+0x4a>
    7f56:	c5 01       	movw	r24, r10
    7f58:	80 0f       	add	r24, r16
    7f5a:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    7f5c:	f8 01       	movw	r30, r16
    7f5e:	41 91       	ld	r20, Z+
    7f60:	8f 01       	movw	r16, r30
    7f62:	b6 01       	movw	r22, r12
    7f64:	29 83       	std	Y+1, r18	; 0x01
    7f66:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <PrintChar>
    7f6a:	29 81       	ldd	r18, Y+1	; 0x01
    7f6c:	f0 cf       	rjmp	.-32     	; 0x7f4e <LBPrintStr+0x2a>
	}
}
    7f6e:	0f 90       	pop	r0
    7f70:	df 91       	pop	r29
    7f72:	cf 91       	pop	r28
    7f74:	1f 91       	pop	r17
    7f76:	0f 91       	pop	r16
    7f78:	ff 90       	pop	r15
    7f7a:	ef 90       	pop	r14
    7f7c:	df 90       	pop	r13
    7f7e:	cf 90       	pop	r12
    7f80:	bf 90       	pop	r11
    7f82:	af 90       	pop	r10
    7f84:	08 95       	ret

00007f86 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    7f86:	af 92       	push	r10
    7f88:	cf 92       	push	r12
    7f8a:	ef 92       	push	r14
    7f8c:	ff 92       	push	r15
    7f8e:	0f 93       	push	r16
    7f90:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    7f92:	70 e0       	ldi	r23, 0x00	; 0
    7f94:	f1 2c       	mov	r15, r1
    7f96:	fb 01       	movw	r30, r22
    7f98:	e2 0f       	add	r30, r18
    7f9a:	f1 1d       	adc	r31, r1
    7f9c:	ee 15       	cp	r30, r14
    7f9e:	ff 05       	cpc	r31, r15
    7fa0:	a4 f0       	brlt	.+40     	; 0x7fca <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    7fa2:	ea 0c       	add	r14, r10
    7fa4:	f1 1c       	adc	r15, r1
    7fa6:	e6 16       	cp	r14, r22
    7fa8:	f7 06       	cpc	r15, r23
    7faa:	7c f0       	brlt	.+30     	; 0x7fca <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    7fac:	28 2f       	mov	r18, r24
    7fae:	30 e0       	ldi	r19, 0x00	; 0
    7fb0:	10 e0       	ldi	r17, 0x00	; 0
    7fb2:	c9 01       	movw	r24, r18
    7fb4:	84 0f       	add	r24, r20
    7fb6:	91 1d       	adc	r25, r1
    7fb8:	80 17       	cp	r24, r16
    7fba:	91 07       	cpc	r25, r17
    7fbc:	34 f0       	brlt	.+12     	; 0x7fca <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    7fbe:	0c 0d       	add	r16, r12
    7fc0:	11 1d       	adc	r17, r1
    7fc2:	81 e0       	ldi	r24, 0x01	; 1
    7fc4:	02 17       	cp	r16, r18
    7fc6:	13 07       	cpc	r17, r19
    7fc8:	0c f4       	brge	.+2      	; 0x7fcc <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    7fca:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    7fcc:	1f 91       	pop	r17
    7fce:	0f 91       	pop	r16
    7fd0:	ff 90       	pop	r15
    7fd2:	ef 90       	pop	r14
    7fd4:	cf 90       	pop	r12
    7fd6:	af 90       	pop	r10
    7fd8:	08 95       	ret

00007fda <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    7fda:	2f 92       	push	r2
    7fdc:	3f 92       	push	r3
    7fde:	4f 92       	push	r4
    7fe0:	5f 92       	push	r5
    7fe2:	6f 92       	push	r6
    7fe4:	7f 92       	push	r7
    7fe6:	8f 92       	push	r8
    7fe8:	9f 92       	push	r9
    7fea:	af 92       	push	r10
    7fec:	bf 92       	push	r11
    7fee:	cf 92       	push	r12
    7ff0:	df 92       	push	r13
    7ff2:	ef 92       	push	r14
    7ff4:	ff 92       	push	r15
    7ff6:	0f 93       	push	r16
    7ff8:	1f 93       	push	r17
    7ffa:	cf 93       	push	r28
    7ffc:	df 93       	push	r29
    7ffe:	00 d0       	rcall	.+0      	; 0x8000 <LBLineIntersect+0x26>
    8000:	00 d0       	rcall	.+0      	; 0x8002 <LBLineIntersect+0x28>
    8002:	cd b7       	in	r28, 0x3d	; 61
    8004:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8006:	f1 2c       	mov	r15, r1
    8008:	8a 2c       	mov	r8, r10
    800a:	91 2c       	mov	r9, r1
    800c:	8e 18       	sub	r8, r14
    800e:	9f 08       	sbc	r9, r15
    8010:	a8 2e       	mov	r10, r24
    8012:	b1 2c       	mov	r11, r1
    8014:	24 2e       	mov	r2, r20
    8016:	31 2c       	mov	r3, r1
    8018:	2a 18       	sub	r2, r10
    801a:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    801c:	10 e0       	ldi	r17, 0x00	; 0
    801e:	d1 2c       	mov	r13, r1
    8020:	c0 1a       	sub	r12, r16
    8022:	d1 0a       	sbc	r13, r17
    8024:	46 2f       	mov	r20, r22
    8026:	50 e0       	ldi	r21, 0x00	; 0
    8028:	5c 83       	std	Y+4, r21	; 0x04
    802a:	4b 83       	std	Y+3, r20	; 0x03
    802c:	82 2f       	mov	r24, r18
    802e:	90 e0       	ldi	r25, 0x00	; 0
    8030:	9a 83       	std	Y+2, r25	; 0x02
    8032:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8034:	82 9c       	mul	r8, r2
    8036:	90 01       	movw	r18, r0
    8038:	83 9c       	mul	r8, r3
    803a:	30 0d       	add	r19, r0
    803c:	92 9c       	mul	r9, r2
    803e:	30 0d       	add	r19, r0
    8040:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8042:	ca 01       	movw	r24, r20
    8044:	e9 81       	ldd	r30, Y+1	; 0x01
    8046:	fa 81       	ldd	r31, Y+2	; 0x02
    8048:	8e 1b       	sub	r24, r30
    804a:	9f 0b       	sbc	r25, r31
    804c:	c8 9e       	mul	r12, r24
    804e:	b0 01       	movw	r22, r0
    8050:	c9 9e       	mul	r12, r25
    8052:	70 0d       	add	r23, r0
    8054:	d8 9e       	mul	r13, r24
    8056:	70 0d       	add	r23, r0
    8058:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    805a:	62 0f       	add	r22, r18
    805c:	73 1f       	adc	r23, r19
    805e:	88 27       	eor	r24, r24
    8060:	77 fd       	sbrc	r23, 7
    8062:	80 95       	com	r24
    8064:	98 2f       	mov	r25, r24
    8066:	0e 94 04 50 	call	0xa008	; 0xa008 <__floatsisf>
    806a:	2b 01       	movw	r4, r22
    806c:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    806e:	20 e0       	ldi	r18, 0x00	; 0
    8070:	30 e0       	ldi	r19, 0x00	; 0
    8072:	a9 01       	movw	r20, r18
    8074:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <__cmpsf2>
    8078:	88 23       	and	r24, r24
    807a:	09 f4       	brne	.+2      	; 0x807e <LBLineIntersect+0xa4>
    807c:	6c c0       	rjmp	.+216    	; 0x8156 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    807e:	4b 81       	ldd	r20, Y+3	; 0x03
    8080:	5c 81       	ldd	r21, Y+4	; 0x04
    8082:	4e 19       	sub	r20, r14
    8084:	5f 09       	sbc	r21, r15
    8086:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8088:	0a 19       	sub	r16, r10
    808a:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    808c:	c4 9e       	mul	r12, r20
    808e:	c0 01       	movw	r24, r0
    8090:	c5 9e       	mul	r12, r21
    8092:	90 0d       	add	r25, r0
    8094:	d4 9e       	mul	r13, r20
    8096:	90 0d       	add	r25, r0
    8098:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    809a:	80 9e       	mul	r8, r16
    809c:	b0 01       	movw	r22, r0
    809e:	81 9e       	mul	r8, r17
    80a0:	70 0d       	add	r23, r0
    80a2:	90 9e       	mul	r9, r16
    80a4:	70 0d       	add	r23, r0
    80a6:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    80a8:	68 0f       	add	r22, r24
    80aa:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    80ac:	88 27       	eor	r24, r24
    80ae:	77 fd       	sbrc	r23, 7
    80b0:	80 95       	com	r24
    80b2:	98 2f       	mov	r25, r24
    80b4:	0e 94 04 50 	call	0xa008	; 0xa008 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    80b8:	a3 01       	movw	r20, r6
    80ba:	92 01       	movw	r18, r4
    80bc:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <__divsf3>
    80c0:	4b 01       	movw	r8, r22
    80c2:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    80c4:	20 e0       	ldi	r18, 0x00	; 0
    80c6:	30 e0       	ldi	r19, 0x00	; 0
    80c8:	a9 01       	movw	r20, r18
    80ca:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <__cmpsf2>
    80ce:	87 fd       	sbrc	r24, 7
    80d0:	42 c0       	rjmp	.+132    	; 0x8156 <LBLineIntersect+0x17c>
    80d2:	20 e0       	ldi	r18, 0x00	; 0
    80d4:	30 e0       	ldi	r19, 0x00	; 0
    80d6:	40 e8       	ldi	r20, 0x80	; 128
    80d8:	5f e3       	ldi	r21, 0x3F	; 63
    80da:	c5 01       	movw	r24, r10
    80dc:	b4 01       	movw	r22, r8
    80de:	0e 94 b4 50 	call	0xa168	; 0xa168 <__gesf2>
    80e2:	18 16       	cp	r1, r24
    80e4:	c4 f1       	brlt	.+112    	; 0x8156 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    80e6:	2e 9c       	mul	r2, r14
    80e8:	b0 01       	movw	r22, r0
    80ea:	2f 9c       	mul	r2, r15
    80ec:	70 0d       	add	r23, r0
    80ee:	3e 9c       	mul	r3, r14
    80f0:	70 0d       	add	r23, r0
    80f2:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    80f4:	29 81       	ldd	r18, Y+1	; 0x01
    80f6:	3a 81       	ldd	r19, Y+2	; 0x02
    80f8:	8b 81       	ldd	r24, Y+3	; 0x03
    80fa:	9c 81       	ldd	r25, Y+4	; 0x04
    80fc:	28 1b       	sub	r18, r24
    80fe:	39 0b       	sbc	r19, r25
    8100:	20 9f       	mul	r18, r16
    8102:	c0 01       	movw	r24, r0
    8104:	21 9f       	mul	r18, r17
    8106:	90 0d       	add	r25, r0
    8108:	30 9f       	mul	r19, r16
    810a:	90 0d       	add	r25, r0
    810c:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    810e:	68 0f       	add	r22, r24
    8110:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8112:	88 27       	eor	r24, r24
    8114:	77 fd       	sbrc	r23, 7
    8116:	80 95       	com	r24
    8118:	98 2f       	mov	r25, r24
    811a:	0e 94 04 50 	call	0xa008	; 0xa008 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    811e:	a3 01       	movw	r20, r6
    8120:	92 01       	movw	r18, r4
    8122:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <__divsf3>
    8126:	6b 01       	movw	r12, r22
    8128:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    812a:	20 e0       	ldi	r18, 0x00	; 0
    812c:	30 e0       	ldi	r19, 0x00	; 0
    812e:	a9 01       	movw	r20, r18
    8130:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <__cmpsf2>
    8134:	87 fd       	sbrc	r24, 7
    8136:	0f c0       	rjmp	.+30     	; 0x8156 <LBLineIntersect+0x17c>
    8138:	11 e0       	ldi	r17, 0x01	; 1
    813a:	20 e0       	ldi	r18, 0x00	; 0
    813c:	30 e0       	ldi	r19, 0x00	; 0
    813e:	40 e8       	ldi	r20, 0x80	; 128
    8140:	5f e3       	ldi	r21, 0x3F	; 63
    8142:	c7 01       	movw	r24, r14
    8144:	b6 01       	movw	r22, r12
    8146:	0e 94 b4 50 	call	0xa168	; 0xa168 <__gesf2>
    814a:	18 16       	cp	r1, r24
    814c:	0c f0       	brlt	.+2      	; 0x8150 <LBLineIntersect+0x176>
    814e:	10 e0       	ldi	r17, 0x00	; 0
    8150:	81 e0       	ldi	r24, 0x01	; 1
    8152:	81 27       	eor	r24, r17
    8154:	01 c0       	rjmp	.+2      	; 0x8158 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8156:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    8158:	0f 90       	pop	r0
    815a:	0f 90       	pop	r0
    815c:	0f 90       	pop	r0
    815e:	0f 90       	pop	r0
    8160:	df 91       	pop	r29
    8162:	cf 91       	pop	r28
    8164:	1f 91       	pop	r17
    8166:	0f 91       	pop	r16
    8168:	ff 90       	pop	r15
    816a:	ef 90       	pop	r14
    816c:	df 90       	pop	r13
    816e:	cf 90       	pop	r12
    8170:	bf 90       	pop	r11
    8172:	af 90       	pop	r10
    8174:	9f 90       	pop	r9
    8176:	8f 90       	pop	r8
    8178:	7f 90       	pop	r7
    817a:	6f 90       	pop	r6
    817c:	5f 90       	pop	r5
    817e:	4f 90       	pop	r4
    8180:	3f 90       	pop	r3
    8182:	2f 90       	pop	r2
    8184:	08 95       	ret

00008186 <random>:

int random(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8186:	fc 01       	movw	r30, r24
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
    8188:	90 91 7c 0f 	lds	r25, 0x0F7C
    818c:	20 91 fc 0f 	lds	r18, 0x0FFC
    8190:	30 91 fd 0f 	lds	r19, 0x0FFD
    8194:	09 2e       	mov	r0, r25
    8196:	02 c0       	rjmp	.+4      	; 0x819c <random+0x16>
    8198:	35 95       	asr	r19
    819a:	27 95       	ror	r18
    819c:	0a 94       	dec	r0
    819e:	e2 f7       	brpl	.-8      	; 0x8198 <random+0x12>
	int delta = to - from;
    81a0:	6e 1b       	sub	r22, r30
    81a2:	7f 0b       	sbc	r23, r31

	shift_count++;
    81a4:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    81a6:	90 31       	cpi	r25, 0x10	; 16
    81a8:	18 f4       	brcc	.+6      	; 0x81b0 <random+0x2a>
{
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    81aa:	90 93 7c 0f 	sts	0x0F7C, r25
    81ae:	02 c0       	rjmp	.+4      	; 0x81b4 <random+0x2e>
	if (shift_count >= 16) shift_count = 0;
    81b0:	10 92 7c 0f 	sts	0x0F7C, r1

	return from + ((delta + shifted) % delta);
    81b4:	cb 01       	movw	r24, r22
    81b6:	82 0f       	add	r24, r18
    81b8:	93 1f       	adc	r25, r19
    81ba:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <__divmodhi4>
}
    81be:	8e 0f       	add	r24, r30
    81c0:	9f 1f       	adc	r25, r31
    81c2:	08 95       	ret

000081c4 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    81c4:	cf 93       	push	r28
    81c6:	df 93       	push	r29
    81c8:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    81ca:	bc 01       	movw	r22, r24
    81cc:	88 81       	ld	r24, Y
    81ce:	99 81       	ldd	r25, Y+1	; 0x01
    81d0:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <EepromReadBlock>
	if (status == 0x03)
    81d4:	83 30       	cpi	r24, 0x03	; 3
    81d6:	29 f4       	brne	.+10     	; 0x81e2 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    81d8:	ce 01       	movw	r24, r28
	}
}
    81da:	df 91       	pop	r29
    81dc:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    81de:	0c 94 63 31 	jmp	0x62c6	; 0x62c6 <EepromWriteBlock>
	}
}
    81e2:	df 91       	pop	r29
    81e4:	cf 91       	pop	r28
    81e6:	08 95       	ret

000081e8 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    81e8:	61 e0       	ldi	r22, 0x01	; 1
    81ea:	83 e0       	ldi	r24, 0x03	; 3
    81ec:	0e 94 ec 3e 	call	0x7dd8	; 0x7dd8 <FadeOut>
	ClearVram();
    81f0:	0e 94 8c 30 	call	0x6118	; 0x6118 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    81f4:	60 e0       	ldi	r22, 0x00	; 0
    81f6:	83 e0       	ldi	r24, 0x03	; 3
    81f8:	0c 94 e0 3e 	jmp	0x7dc0	; 0x7dc0 <FadeIn>

000081fc <clear_sprites>:
}

void clear_sprites()
{
    81fc:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    81fe:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    8200:	40 e0       	ldi	r20, 0x00	; 0
    8202:	68 e0       	ldi	r22, 0x08	; 8
    8204:	78 e2       	ldi	r23, 0x28	; 40
    8206:	8c 2f       	mov	r24, r28
    8208:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
    820c:	cf 5f       	subi	r28, 0xFF	; 255
	FadeIn(FRAMES_PER_FADE, false);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    820e:	cc 30       	cpi	r28, 0x0C	; 12
    8210:	b9 f7       	brne	.-18     	; 0x8200 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    8212:	cf 91       	pop	r28
    8214:	08 95       	ret

00008216 <reset_shot_state>:
	s->score = 0;
	s->level_score = 0;
}

void reset_shot_state(Shot* s, u8 shot_type)
{
    8216:	fc 01       	movw	r30, r24
	s->active = 0;
    8218:	13 86       	std	Z+11, r1	; 0x0b
	s->shot_type = shot_type;
    821a:	60 83       	st	Z, r22
	s->rebounds = SHOT_REBOUNDS;
    821c:	84 e0       	ldi	r24, 0x04	; 4
    821e:	82 87       	std	Z+10, r24	; 0x0a
	s->hit_count = BASIC_SHOT_HIT_COUNT;
	if (s->shot_type == ROCKET_SHOT) s->hit_count = ROCKET_SHOT_HIT_COUNT;
    8220:	61 30       	cpi	r22, 0x01	; 1
    8222:	11 f0       	breq	.+4      	; 0x8228 <reset_shot_state+0x12>
void reset_shot_state(Shot* s, u8 shot_type)
{
	s->active = 0;
	s->shot_type = shot_type;
	s->rebounds = SHOT_REBOUNDS;
	s->hit_count = BASIC_SHOT_HIT_COUNT;
    8224:	81 e0       	ldi	r24, 0x01	; 1
    8226:	01 c0       	rjmp	.+2      	; 0x822a <reset_shot_state+0x14>
	if (s->shot_type == ROCKET_SHOT) s->hit_count = ROCKET_SHOT_HIT_COUNT;
    8228:	83 e0       	ldi	r24, 0x03	; 3
    822a:	81 83       	std	Z+1, r24	; 0x01
	s->x = OFF_SCREEN;
    822c:	80 e0       	ldi	r24, 0x00	; 0
    822e:	90 e0       	ldi	r25, 0x00	; 0
    8230:	a0 e7       	ldi	r26, 0x70	; 112
    8232:	b3 e4       	ldi	r27, 0x43	; 67
    8234:	82 83       	std	Z+2, r24	; 0x02
    8236:	93 83       	std	Z+3, r25	; 0x03
    8238:	a4 83       	std	Z+4, r26	; 0x04
    823a:	b5 83       	std	Z+5, r27	; 0x05
	s->y = 0;
    823c:	16 82       	std	Z+6, r1	; 0x06
    823e:	17 82       	std	Z+7, r1	; 0x07
    8240:	10 86       	std	Z+8, r1	; 0x08
    8242:	11 86       	std	Z+9, r1	; 0x09
    8244:	08 95       	ret

00008246 <player_reset_shot_state>:
}

void player_reset_shot_state(Player* player)
{
    8246:	cf 93       	push	r28
    8248:	df 93       	push	r29
    824a:	fc 01       	movw	r30, r24
	player->active_shots = 0;
    824c:	16 82       	std	Z+6, r1	; 0x06
	s->level_score = 0;
}

void reset_shot_state(Shot* s, u8 shot_type)
{
	s->active = 0;
    824e:	16 a2       	std	Z+38, r1	; 0x26
	s->shot_type = shot_type;
    8250:	13 8e       	std	Z+27, r1	; 0x1b
	s->rebounds = SHOT_REBOUNDS;
    8252:	34 e0       	ldi	r19, 0x04	; 4
    8254:	35 a3       	std	Z+37, r19	; 0x25
	s->hit_count = BASIC_SHOT_HIT_COUNT;
    8256:	21 e0       	ldi	r18, 0x01	; 1
    8258:	24 8f       	std	Z+28, r18	; 0x1c
	if (s->shot_type == ROCKET_SHOT) s->hit_count = ROCKET_SHOT_HIT_COUNT;
	s->x = OFF_SCREEN;
    825a:	80 e0       	ldi	r24, 0x00	; 0
    825c:	90 e0       	ldi	r25, 0x00	; 0
    825e:	a0 e7       	ldi	r26, 0x70	; 112
    8260:	b3 e4       	ldi	r27, 0x43	; 67
    8262:	85 8f       	std	Z+29, r24	; 0x1d
    8264:	96 8f       	std	Z+30, r25	; 0x1e
    8266:	a7 8f       	std	Z+31, r26	; 0x1f
    8268:	b0 a3       	std	Z+32, r27	; 0x20
	s->y = 0;
    826a:	11 a2       	std	Z+33, r1	; 0x21
    826c:	12 a2       	std	Z+34, r1	; 0x22
    826e:	13 a2       	std	Z+35, r1	; 0x23
    8270:	14 a2       	std	Z+36, r1	; 0x24
	s->level_score = 0;
}

void reset_shot_state(Shot* s, u8 shot_type)
{
	s->active = 0;
    8272:	ef 01       	movw	r28, r30
    8274:	c5 5b       	subi	r28, 0xB5	; 181
    8276:	df 4f       	sbci	r29, 0xFF	; 255
    8278:	18 82       	st	Y, r1
	s->shot_type = shot_type;
    827a:	2b 97       	sbiw	r28, 0x0b	; 11
    827c:	18 82       	st	Y, r1
	s->rebounds = SHOT_REBOUNDS;
    827e:	2a 96       	adiw	r28, 0x0a	; 10
    8280:	38 83       	st	Y, r19
	s->hit_count = BASIC_SHOT_HIT_COUNT;
    8282:	29 97       	sbiw	r28, 0x09	; 9
    8284:	28 83       	st	Y, r18
	if (s->shot_type == ROCKET_SHOT) s->hit_count = ROCKET_SHOT_HIT_COUNT;
	s->x = OFF_SCREEN;
    8286:	21 96       	adiw	r28, 0x01	; 1
    8288:	88 83       	st	Y, r24
    828a:	99 83       	std	Y+1, r25	; 0x01
    828c:	aa 83       	std	Y+2, r26	; 0x02
    828e:	bb 83       	std	Y+3, r27	; 0x03
	s->y = 0;
    8290:	ea 5b       	subi	r30, 0xBA	; 186
    8292:	ff 4f       	sbci	r31, 0xFF	; 255
    8294:	10 82       	st	Z, r1
    8296:	11 82       	std	Z+1, r1	; 0x01
    8298:	12 82       	std	Z+2, r1	; 0x02
    829a:	13 82       	std	Z+3, r1	; 0x03
	player->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		reset_shot_state(&player->shot[i], BASIC_SHOT);
	}
}
    829c:	df 91       	pop	r29
    829e:	cf 91       	pop	r28
    82a0:	08 95       	ret

000082a2 <reset_game_state>:

void reset_game_state()
{
	game.current_screen = SPLASH;
    82a2:	e6 e7       	ldi	r30, 0x76	; 118
    82a4:	ff e0       	ldi	r31, 0x0F	; 15
    82a6:	10 82       	st	Z, r1
	game.current_level = 0;
    82a8:	11 82       	std	Z+1, r1	; 0x01
	game.level_count = LEVEL_COUNT;
    82aa:	81 e0       	ldi	r24, 0x01	; 1
    82ac:	82 83       	std	Z+2, r24	; 0x02
	game.selection = PVCPU;
    82ae:	14 82       	std	Z+4, r1	; 0x04
	game.paused = 0;
    82b0:	13 82       	std	Z+3, r1	; 0x03
	EepromWriteBlock(block);
}

void reset_player_state(Player* s)
{
	s->banter_frame = FRAMES_PER_BANTER;
    82b2:	e3 ec       	ldi	r30, 0xC3	; 195
    82b4:	f4 e0       	ldi	r31, 0x04	; 4
    82b6:	8a e5       	ldi	r24, 0x5A	; 90
    82b8:	83 8b       	std	Z+19, r24	; 0x13
	s->banter_index = 0;
    82ba:	14 8a       	std	Z+20, r1	; 0x14
	s->score = 0;
    82bc:	14 82       	std	Z+4, r1	; 0x04
	s->level_score = 0;
    82be:	15 82       	std	Z+5, r1	; 0x05
	EepromWriteBlock(block);
}

void reset_player_state(Player* s)
{
	s->banter_frame = FRAMES_PER_BANTER;
    82c0:	e0 e4       	ldi	r30, 0x40	; 64
    82c2:	f4 e0       	ldi	r31, 0x04	; 4
    82c4:	83 8b       	std	Z+19, r24	; 0x13
	s->banter_index = 0;
    82c6:	14 8a       	std	Z+20, r1	; 0x14
	s->score = 0;
    82c8:	14 82       	std	Z+4, r1	; 0x04
	s->level_score = 0;
    82ca:	15 82       	std	Z+5, r1	; 0x05
    82cc:	08 95       	ret

000082ce <player_spawn>:
	reset_player_state(&player1);
	reset_player_state(&player2);
}

void player_spawn(Player* player)
{
    82ce:	cf 93       	push	r28
    82d0:	df 93       	push	r29
    82d2:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    82d4:	1d 8a       	std	Y+21, r1	; 0x15
	player->x = player->spawn_x;
    82d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    82d8:	70 e0       	ldi	r23, 0x00	; 0
    82da:	80 e0       	ldi	r24, 0x00	; 0
    82dc:	90 e0       	ldi	r25, 0x00	; 0
    82de:	0e 94 02 50 	call	0xa004	; 0xa004 <__floatunsisf>
    82e2:	6f 83       	std	Y+7, r22	; 0x07
    82e4:	78 87       	std	Y+8, r23	; 0x08
    82e6:	89 87       	std	Y+9, r24	; 0x09
    82e8:	9a 87       	std	Y+10, r25	; 0x0a
	player->y = player->spawn_y;
    82ea:	68 89       	ldd	r22, Y+16	; 0x10
    82ec:	70 e0       	ldi	r23, 0x00	; 0
    82ee:	80 e0       	ldi	r24, 0x00	; 0
    82f0:	90 e0       	ldi	r25, 0x00	; 0
    82f2:	0e 94 02 50 	call	0xa004	; 0xa004 <__floatunsisf>
    82f6:	6b 87       	std	Y+11, r22	; 0x0b
    82f8:	7c 87       	std	Y+12, r23	; 0x0c
    82fa:	8d 87       	std	Y+13, r24	; 0x0d
    82fc:	9e 87       	std	Y+14, r25	; 0x0e
	player->direction = D_UP;
    82fe:	19 8a       	std	Y+17, r1	; 0x11
	player->speed = 0;
    8300:	1e 8a       	std	Y+22, r1	; 0x16
    8302:	1f 8a       	std	Y+23, r1	; 0x17
    8304:	18 8e       	std	Y+24, r1	; 0x18
    8306:	19 8e       	std	Y+25, r1	; 0x19
	
}
    8308:	df 91       	pop	r29
    830a:	cf 91       	pop	r28
    830c:	08 95       	ret

0000830e <load_level>:

void load_level(int level_number)
{
    830e:	af 92       	push	r10
    8310:	bf 92       	push	r11
    8312:	cf 92       	push	r12
    8314:	df 92       	push	r13
    8316:	ef 92       	push	r14
    8318:	ff 92       	push	r15
    831a:	0f 93       	push	r16
    831c:	1f 93       	push	r17
    831e:	cf 93       	push	r28
    8320:	df 93       	push	r29
    int level_start = level_number*30*25;
    8322:	2e ee       	ldi	r18, 0xEE	; 238
    8324:	32 e0       	ldi	r19, 0x02	; 2
    8326:	82 9f       	mul	r24, r18
    8328:	70 01       	movw	r14, r0
    832a:	83 9f       	mul	r24, r19
    832c:	f0 0c       	add	r15, r0
    832e:	92 9f       	mul	r25, r18
    8330:	f0 0c       	add	r15, r0
    8332:	11 24       	eor	r1, r1

	fade_through();
    8334:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <fade_through>
	game.current_screen = LEVEL;
    8338:	83 e0       	ldi	r24, 0x03	; 3
    833a:	80 93 76 0f 	sts	0x0F76, r24
	game.current_level = 0;
    833e:	10 92 77 0f 	sts	0x0F77, r1
	game.level_count = LEVEL_COUNT;
    8342:	81 e0       	ldi	r24, 0x01	; 1
    8344:	80 93 78 0f 	sts	0x0F78, r24
	level.render_all = 1;
    8348:	80 93 3f 04 	sts	0x043F, r24
	level.render_index = 0;
    834c:	10 92 3e 04 	sts	0x043E, r1
    8350:	83 e4       	ldi	r24, 0x43	; 67
    8352:	c8 2e       	mov	r12, r24
    8354:	81 e0       	ldi	r24, 0x01	; 1
    8356:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    8358:	c0 e0       	ldi	r28, 0x00	; 0
    835a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    835c:	0e e1       	ldi	r16, 0x1E	; 30
    835e:	10 e0       	ldi	r17, 0x00	; 0
    8360:	fe 01       	movw	r30, r28
    8362:	ee 0d       	add	r30, r14
    8364:	ff 1d       	adc	r31, r15
    8366:	e5 59       	subi	r30, 0x95	; 149
    8368:	f5 4f       	sbci	r31, 0xF5	; 245
	game.level_count = LEVEL_COUNT;
	level.render_all = 1;
	level.render_index = 0;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    836a:	e4 91       	lpm	r30, Z
    836c:	56 01       	movw	r10, r12
    836e:	d6 01       	movw	r26, r12
    8370:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    8372:	e8 35       	cpi	r30, 0x58	; 88
    8374:	d1 f4       	brne	.+52     	; 0x83aa <load_level+0x9c>
		{
			player1.spawn_x = (i % 30) * 8;
    8376:	ce 01       	movw	r24, r28
    8378:	b8 01       	movw	r22, r16
    837a:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <__divmodhi4>
    837e:	88 0f       	add	r24, r24
    8380:	88 0f       	add	r24, r24
    8382:	88 0f       	add	r24, r24
    8384:	80 93 d2 04 	sts	0x04D2, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    8388:	6d 5f       	subi	r22, 0xFD	; 253
    838a:	7f 4f       	sbci	r23, 0xFF	; 255
    838c:	66 0f       	add	r22, r22
    838e:	66 0f       	add	r22, r22
    8390:	66 0f       	add	r22, r22
    8392:	60 93 d3 04 	sts	0x04D3, r22
			player1.level_score = 0;
    8396:	10 92 c8 04 	sts	0x04C8, r1
			player_reset_shot_state(&player1);
    839a:	83 ec       	ldi	r24, 0xC3	; 195
    839c:	94 e0       	ldi	r25, 0x04	; 4
    839e:	0e 94 23 41 	call	0x8246	; 0x8246 <player_reset_shot_state>
			player_spawn(&player1);
    83a2:	83 ec       	ldi	r24, 0xC3	; 195
    83a4:	94 e0       	ldi	r25, 0x04	; 4
    83a6:	0e 94 67 41 	call	0x82ce	; 0x82ce <player_spawn>
    83aa:	bf ef       	ldi	r27, 0xFF	; 255
    83ac:	cb 1a       	sub	r12, r27
    83ae:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    83b0:	f5 01       	movw	r30, r10
    83b2:	80 81       	ld	r24, Z
    83b4:	83 36       	cpi	r24, 0x63	; 99
    83b6:	d1 f4       	brne	.+52     	; 0x83ec <load_level+0xde>
		{
			player2.spawn_x = (i % 30) * 8;
    83b8:	ce 01       	movw	r24, r28
    83ba:	b8 01       	movw	r22, r16
    83bc:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <__divmodhi4>
    83c0:	88 0f       	add	r24, r24
    83c2:	88 0f       	add	r24, r24
    83c4:	88 0f       	add	r24, r24
    83c6:	80 93 4f 04 	sts	0x044F, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    83ca:	6d 5f       	subi	r22, 0xFD	; 253
    83cc:	7f 4f       	sbci	r23, 0xFF	; 255
    83ce:	66 0f       	add	r22, r22
    83d0:	66 0f       	add	r22, r22
    83d2:	66 0f       	add	r22, r22
    83d4:	60 93 50 04 	sts	0x0450, r22
			player2.level_score = 0;
    83d8:	10 92 45 04 	sts	0x0445, r1
			player_reset_shot_state(&player2);
    83dc:	80 e4       	ldi	r24, 0x40	; 64
    83de:	94 e0       	ldi	r25, 0x04	; 4
    83e0:	0e 94 23 41 	call	0x8246	; 0x8246 <player_reset_shot_state>
			player_spawn(&player2);
    83e4:	80 e4       	ldi	r24, 0x40	; 64
    83e6:	94 e0       	ldi	r25, 0x04	; 4
    83e8:	0e 94 67 41 	call	0x82ce	; 0x82ce <player_spawn>
	game.current_screen = LEVEL;
	game.current_level = 0;
	game.level_count = LEVEL_COUNT;
	level.render_all = 1;
	level.render_index = 0;
	for (int i = 0; i < 30*25; i++)
    83ec:	21 96       	adiw	r28, 0x01	; 1
    83ee:	ce 3e       	cpi	r28, 0xEE	; 238
    83f0:	f2 e0       	ldi	r31, 0x02	; 2
    83f2:	df 07       	cpc	r29, r31
    83f4:	09 f0       	breq	.+2      	; 0x83f8 <load_level+0xea>
    83f6:	b4 cf       	rjmp	.-152    	; 0x8360 <load_level+0x52>
			player_reset_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	clear_sprites();
}
    83f8:	df 91       	pop	r29
    83fa:	cf 91       	pop	r28
    83fc:	1f 91       	pop	r17
    83fe:	0f 91       	pop	r16
    8400:	ff 90       	pop	r15
    8402:	ef 90       	pop	r14
    8404:	df 90       	pop	r13
    8406:	cf 90       	pop	r12
    8408:	bf 90       	pop	r11
    840a:	af 90       	pop	r10
			player2.level_score = 0;
			player_reset_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	clear_sprites();
    840c:	0c 94 fe 40 	jmp	0x81fc	; 0x81fc <clear_sprites>

00008410 <save_score>:
}

void save_score()
{
    8410:	cf 92       	push	r12
    8412:	df 92       	push	r13
    8414:	ff 92       	push	r15
    8416:	0f 93       	push	r16
    8418:	1f 93       	push	r17
    841a:	cf 93       	push	r28
    841c:	df 93       	push	r29
    841e:	cd b7       	in	r28, 0x3d	; 61
    8420:	de b7       	in	r29, 0x3e	; 62
    8422:	28 97       	sbiw	r28, 0x08	; 8
    8424:	0f b6       	in	r0, 0x3f	; 63
    8426:	f8 94       	cli
    8428:	de bf       	out	0x3e, r29	; 62
    842a:	0f be       	out	0x3f, r0	; 63
    842c:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    842e:	90 91 c7 04 	lds	r25, 0x04C7
    8432:	80 91 44 04 	lds	r24, 0x0444
    8436:	98 17       	cp	r25, r24
    8438:	28 f4       	brcc	.+10     	; 0x8444 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    843a:	e3 ec       	ldi	r30, 0xC3	; 195
    843c:	f4 e0       	ldi	r31, 0x04	; 4
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    843e:	a0 e4       	ldi	r26, 0x40	; 64
    8440:	b4 e0       	ldi	r27, 0x04	; 4
    8442:	04 c0       	rjmp	.+8      	; 0x844c <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    8444:	e0 e4       	ldi	r30, 0x40	; 64
    8446:	f4 e0       	ldi	r31, 0x04	; 4
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    8448:	a3 ec       	ldi	r26, 0xC3	; 195
    844a:	b4 e0       	ldi	r27, 0x04	; 4
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    844c:	8c 91       	ld	r24, X
    844e:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    8450:	80 81       	ld	r24, Z
    8452:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    8454:	14 96       	adiw	r26, 0x04	; 4
    8456:	8c 91       	ld	r24, X
    8458:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    845a:	94 81       	ldd	r25, Z+4	; 0x04
    845c:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    845e:	f8 2e       	mov	r15, r24
    8460:	f9 1a       	sub	r15, r25
    8462:	00 e0       	ldi	r16, 0x00	; 0
    8464:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    8466:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    8468:	81 11       	cpse	r24, r1
    846a:	08 c0       	rjmp	.+16     	; 0x847c <save_score+0x6c>
    846c:	f8 01       	movw	r30, r16
    846e:	ee 5f       	subi	r30, 0xFE	; 254
    8470:	fe 4f       	sbci	r31, 0xFE	; 254
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    8472:	94 81       	ldd	r25, Z+4	; 0x04
    8474:	25 81       	ldd	r18, Z+5	; 0x05
    8476:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    8478:	9f 15       	cp	r25, r15
    847a:	d0 f4       	brcc	.+52     	; 0x84b0 <save_score+0xa0>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    847c:	44 e0       	ldi	r20, 0x04	; 4
    847e:	c8 01       	movw	r24, r16
    8480:	8c 5f       	subi	r24, 0xFC	; 252
    8482:	9e 4f       	sbci	r25, 0xFE	; 254
    8484:	6c 01       	movw	r12, r24
    8486:	bc 01       	movw	r22, r24
    8488:	ce 01       	movw	r24, r28
    848a:	05 96       	adiw	r24, 0x05	; 5
    848c:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    8490:	44 e0       	ldi	r20, 0x04	; 4
    8492:	be 01       	movw	r22, r28
    8494:	6f 5f       	subi	r22, 0xFF	; 255
    8496:	7f 4f       	sbci	r23, 0xFF	; 255
    8498:	c6 01       	movw	r24, r12
    849a:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    849e:	44 e0       	ldi	r20, 0x04	; 4
    84a0:	be 01       	movw	r22, r28
    84a2:	6b 5f       	subi	r22, 0xFB	; 251
    84a4:	7f 4f       	sbci	r23, 0xFF	; 255
    84a6:	ce 01       	movw	r24, r28
    84a8:	01 96       	adiw	r24, 0x01	; 1
    84aa:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <LBCopyChars>
				saved = 1;
    84ae:	81 e0       	ldi	r24, 0x01	; 1
    84b0:	0c 5f       	subi	r16, 0xFC	; 252
    84b2:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    84b4:	0c 31       	cpi	r16, 0x1C	; 28
    84b6:	11 05       	cpc	r17, r1
    84b8:	b9 f6       	brne	.-82     	; 0x8468 <save_score+0x58>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    84ba:	82 e0       	ldi	r24, 0x02	; 2
    84bc:	91 e0       	ldi	r25, 0x01	; 1
    84be:	0e 94 63 31 	call	0x62c6	; 0x62c6 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    84c2:	28 96       	adiw	r28, 0x08	; 8
    84c4:	0f b6       	in	r0, 0x3f	; 63
    84c6:	f8 94       	cli
    84c8:	de bf       	out	0x3e, r29	; 62
    84ca:	0f be       	out	0x3f, r0	; 63
    84cc:	cd bf       	out	0x3d, r28	; 61
    84ce:	df 91       	pop	r29
    84d0:	cf 91       	pop	r28
    84d2:	1f 91       	pop	r17
    84d4:	0f 91       	pop	r16
    84d6:	ff 90       	pop	r15
    84d8:	df 90       	pop	r13
    84da:	cf 90       	pop	r12
    84dc:	08 95       	ret

000084de <position_shot>:

void position_shot(Player* player, Shot* shot)
{
    84de:	0f 93       	push	r16
    84e0:	1f 93       	push	r17
    84e2:	cf 93       	push	r28
    84e4:	df 93       	push	r29
    84e6:	8c 01       	movw	r16, r24
    84e8:	eb 01       	movw	r28, r22
	switch (shot->direction)
    84ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    84ec:	81 30       	cpi	r24, 0x01	; 1
    84ee:	69 f1       	breq	.+90     	; 0x854a <position_shot+0x6c>
    84f0:	88 f0       	brcs	.+34     	; 0x8514 <position_shot+0x36>
    84f2:	82 30       	cpi	r24, 0x02	; 2
    84f4:	b1 f1       	breq	.+108    	; 0x8562 <position_shot+0x84>
    84f6:	83 30       	cpi	r24, 0x03	; 3
    84f8:	09 f0       	breq	.+2      	; 0x84fc <position_shot+0x1e>
    84fa:	5a c0       	rjmp	.+180    	; 0x85b0 <position_shot+0xd2>
		case D_DOWN:
			shot->x = player->x + 4;
			shot->y = player->y + 16;
			break;
		case D_LEFT:
			shot->x = player->x - 8;
    84fc:	20 e0       	ldi	r18, 0x00	; 0
    84fe:	30 e0       	ldi	r19, 0x00	; 0
    8500:	40 e0       	ldi	r20, 0x00	; 0
    8502:	51 e4       	ldi	r21, 0x41	; 65
    8504:	f8 01       	movw	r30, r16
    8506:	67 81       	ldd	r22, Z+7	; 0x07
    8508:	70 85       	ldd	r23, Z+8	; 0x08
    850a:	81 85       	ldd	r24, Z+9	; 0x09
    850c:	92 85       	ldd	r25, Z+10	; 0x0a
    850e:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    8512:	3b c0       	rjmp	.+118    	; 0x858a <position_shot+0xac>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->direction)
	{
		case D_UP:
			shot->x = player->x + 4;
    8514:	20 e0       	ldi	r18, 0x00	; 0
    8516:	30 e0       	ldi	r19, 0x00	; 0
    8518:	40 e8       	ldi	r20, 0x80	; 128
    851a:	50 e4       	ldi	r21, 0x40	; 64
    851c:	f8 01       	movw	r30, r16
    851e:	67 81       	ldd	r22, Z+7	; 0x07
    8520:	70 85       	ldd	r23, Z+8	; 0x08
    8522:	81 85       	ldd	r24, Z+9	; 0x09
    8524:	92 85       	ldd	r25, Z+10	; 0x0a
    8526:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    852a:	6a 83       	std	Y+2, r22	; 0x02
    852c:	7b 83       	std	Y+3, r23	; 0x03
    852e:	8c 83       	std	Y+4, r24	; 0x04
    8530:	9d 83       	std	Y+5, r25	; 0x05
			shot->y = player->y - 8;
    8532:	20 e0       	ldi	r18, 0x00	; 0
    8534:	30 e0       	ldi	r19, 0x00	; 0
    8536:	40 e0       	ldi	r20, 0x00	; 0
    8538:	51 e4       	ldi	r21, 0x41	; 65
    853a:	f8 01       	movw	r30, r16
    853c:	63 85       	ldd	r22, Z+11	; 0x0b
    853e:	74 85       	ldd	r23, Z+12	; 0x0c
    8540:	85 85       	ldd	r24, Z+13	; 0x0d
    8542:	96 85       	ldd	r25, Z+14	; 0x0e
    8544:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    8548:	2f c0       	rjmp	.+94     	; 0x85a8 <position_shot+0xca>
			break;
		case D_RIGHT:
			shot->x = player->x + 16;
    854a:	20 e0       	ldi	r18, 0x00	; 0
    854c:	30 e0       	ldi	r19, 0x00	; 0
    854e:	40 e8       	ldi	r20, 0x80	; 128
    8550:	51 e4       	ldi	r21, 0x41	; 65
    8552:	f8 01       	movw	r30, r16
    8554:	67 81       	ldd	r22, Z+7	; 0x07
    8556:	70 85       	ldd	r23, Z+8	; 0x08
    8558:	81 85       	ldd	r24, Z+9	; 0x09
    855a:	92 85       	ldd	r25, Z+10	; 0x0a
    855c:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    8560:	14 c0       	rjmp	.+40     	; 0x858a <position_shot+0xac>
			shot->y = player->y + 4;
			break;
		case D_DOWN:
			shot->x = player->x + 4;
    8562:	20 e0       	ldi	r18, 0x00	; 0
    8564:	30 e0       	ldi	r19, 0x00	; 0
    8566:	40 e8       	ldi	r20, 0x80	; 128
    8568:	50 e4       	ldi	r21, 0x40	; 64
    856a:	f8 01       	movw	r30, r16
    856c:	67 81       	ldd	r22, Z+7	; 0x07
    856e:	70 85       	ldd	r23, Z+8	; 0x08
    8570:	81 85       	ldd	r24, Z+9	; 0x09
    8572:	92 85       	ldd	r25, Z+10	; 0x0a
    8574:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    8578:	6a 83       	std	Y+2, r22	; 0x02
    857a:	7b 83       	std	Y+3, r23	; 0x03
    857c:	8c 83       	std	Y+4, r24	; 0x04
    857e:	9d 83       	std	Y+5, r25	; 0x05
			shot->y = player->y + 16;
    8580:	20 e0       	ldi	r18, 0x00	; 0
    8582:	30 e0       	ldi	r19, 0x00	; 0
    8584:	40 e8       	ldi	r20, 0x80	; 128
    8586:	51 e4       	ldi	r21, 0x41	; 65
    8588:	08 c0       	rjmp	.+16     	; 0x859a <position_shot+0xbc>
			break;
		case D_LEFT:
			shot->x = player->x - 8;
    858a:	6a 83       	std	Y+2, r22	; 0x02
    858c:	7b 83       	std	Y+3, r23	; 0x03
    858e:	8c 83       	std	Y+4, r24	; 0x04
    8590:	9d 83       	std	Y+5, r25	; 0x05
			shot->y = player->y + 4;
    8592:	20 e0       	ldi	r18, 0x00	; 0
    8594:	30 e0       	ldi	r19, 0x00	; 0
    8596:	40 e8       	ldi	r20, 0x80	; 128
    8598:	50 e4       	ldi	r21, 0x40	; 64
    859a:	f8 01       	movw	r30, r16
    859c:	63 85       	ldd	r22, Z+11	; 0x0b
    859e:	74 85       	ldd	r23, Z+12	; 0x0c
    85a0:	85 85       	ldd	r24, Z+13	; 0x0d
    85a2:	96 85       	ldd	r25, Z+14	; 0x0e
    85a4:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    85a8:	6e 83       	std	Y+6, r22	; 0x06
    85aa:	7f 83       	std	Y+7, r23	; 0x07
    85ac:	88 87       	std	Y+8, r24	; 0x08
    85ae:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    85b0:	df 91       	pop	r29
    85b2:	cf 91       	pop	r28
    85b4:	1f 91       	pop	r17
    85b6:	0f 91       	pop	r16
    85b8:	08 95       	ret

000085ba <render_score>:
		level.render_all = 1;
	}
}

void render_score(Player* player, u8 x, u8 banter_x)
{
    85ba:	cf 92       	push	r12
    85bc:	df 92       	push	r13
    85be:	ff 92       	push	r15
    85c0:	0f 93       	push	r16
    85c2:	1f 93       	push	r17
    85c4:	cf 93       	push	r28
    85c6:	df 93       	push	r29
    85c8:	ec 01       	movw	r28, r24
    85ca:	06 2f       	mov	r16, r22
    85cc:	f4 2e       	mov	r15, r20
	LBPrintStr(x+10, 0, player->handle, 3);
    85ce:	ac 01       	movw	r20, r24
    85d0:	4f 5f       	subi	r20, 0xFF	; 255
    85d2:	5f 4f       	sbci	r21, 0xFF	; 255
    85d4:	23 e0       	ldi	r18, 0x03	; 3
    85d6:	60 e0       	ldi	r22, 0x00	; 0
    85d8:	8a e0       	ldi	r24, 0x0A	; 10
    85da:	80 0f       	add	r24, r16
    85dc:	0e 94 92 3f 	call	0x7f24	; 0x7f24 <LBPrintStr>
	Print(x, 0, strScore);
    85e0:	10 e0       	ldi	r17, 0x00	; 0
    85e2:	44 e5       	ldi	r20, 0x54	; 84
    85e4:	59 e0       	ldi	r21, 0x09	; 9
    85e6:	60 e0       	ldi	r22, 0x00	; 0
    85e8:	70 e0       	ldi	r23, 0x00	; 0
    85ea:	c8 01       	movw	r24, r16
    85ec:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	PrintByte(x+8, 0, player->level_score, false);
    85f0:	68 01       	movw	r12, r16
    85f2:	88 e0       	ldi	r24, 0x08	; 8
    85f4:	c8 0e       	add	r12, r24
    85f6:	d1 1c       	adc	r13, r1
    85f8:	20 e0       	ldi	r18, 0x00	; 0
    85fa:	4d 81       	ldd	r20, Y+5	; 0x05
    85fc:	60 e0       	ldi	r22, 0x00	; 0
    85fe:	70 e0       	ldi	r23, 0x00	; 0
    8600:	c6 01       	movw	r24, r12
    8602:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <PrintByte>
	Print(x, 1, strTotal);
    8606:	4d e4       	ldi	r20, 0x4D	; 77
    8608:	59 e0       	ldi	r21, 0x09	; 9
    860a:	61 e0       	ldi	r22, 0x01	; 1
    860c:	70 e0       	ldi	r23, 0x00	; 0
    860e:	c8 01       	movw	r24, r16
    8610:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	PrintByte(x+8, 1, player->score, false);
    8614:	20 e0       	ldi	r18, 0x00	; 0
    8616:	4c 81       	ldd	r20, Y+4	; 0x04
    8618:	61 e0       	ldi	r22, 0x01	; 1
    861a:	70 e0       	ldi	r23, 0x00	; 0
    861c:	c6 01       	movw	r24, r12
    861e:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <PrintByte>

	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    8622:	2b 89       	ldd	r18, Y+19	; 0x13
    8624:	8f 2d       	mov	r24, r15
    8626:	90 e0       	ldi	r25, 0x00	; 0
    8628:	2a 35       	cpi	r18, 0x5A	; 90
    862a:	b9 f0       	breq	.+46     	; 0x865a <render_score+0xa0>
	{
		Print(banter_x, 2, banter_map[player->banter_index]);
    862c:	ec 89       	ldd	r30, Y+20	; 0x14
    862e:	f0 e0       	ldi	r31, 0x00	; 0
    8630:	ee 0f       	add	r30, r30
    8632:	ff 1f       	adc	r31, r31
    8634:	ea 5b       	subi	r30, 0xBA	; 186
    8636:	fa 4f       	sbci	r31, 0xFA	; 250
    8638:	40 81       	ld	r20, Z
    863a:	51 81       	ldd	r21, Z+1	; 0x01
    863c:	62 e0       	ldi	r22, 0x02	; 2
    863e:	70 e0       	ldi	r23, 0x00	; 0
    8640:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
		player->banter_frame++;
    8644:	8b 89       	ldd	r24, Y+19	; 0x13
    8646:	8f 5f       	subi	r24, 0xFF	; 255
    8648:	8b 8b       	std	Y+19, r24	; 0x13
	}
	else
	{
		Print(banter_x, 2, strBanterClear);
	}
}
    864a:	df 91       	pop	r29
    864c:	cf 91       	pop	r28
    864e:	1f 91       	pop	r17
    8650:	0f 91       	pop	r16
    8652:	ff 90       	pop	r15
    8654:	df 90       	pop	r13
    8656:	cf 90       	pop	r12
    8658:	08 95       	ret
		Print(banter_x, 2, banter_map[player->banter_index]);
		player->banter_frame++;
	}
	else
	{
		Print(banter_x, 2, strBanterClear);
    865a:	4b e5       	ldi	r20, 0x5B	; 91
    865c:	59 e0       	ldi	r21, 0x09	; 9
    865e:	62 e0       	ldi	r22, 0x02	; 2
    8660:	70 e0       	ldi	r23, 0x00	; 0
	}
}
    8662:	df 91       	pop	r29
    8664:	cf 91       	pop	r28
    8666:	1f 91       	pop	r17
    8668:	0f 91       	pop	r16
    866a:	ff 90       	pop	r15
    866c:	df 90       	pop	r13
    866e:	cf 90       	pop	r12
		Print(banter_x, 2, banter_map[player->banter_index]);
		player->banter_frame++;
	}
	else
	{
		Print(banter_x, 2, strBanterClear);
    8670:	0c 94 66 3e 	jmp	0x7ccc	; 0x7ccc <Print>

00008674 <render_player>:
	}
}

void render_player(Player* player, u8 sprite_index)
{
    8674:	ef 92       	push	r14
    8676:	ff 92       	push	r15
    8678:	0f 93       	push	r16
    867a:	1f 93       	push	r17
    867c:	cf 93       	push	r28
    867e:	df 93       	push	r29
    8680:	1f 92       	push	r1
    8682:	cd b7       	in	r28, 0x3d	; 61
    8684:	de b7       	in	r29, 0x3e	; 62
    8686:	7c 01       	movw	r14, r24
    8688:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->x, player->y, 2, 2);
    868a:	fc 01       	movw	r30, r24
    868c:	63 85       	ldd	r22, Z+11	; 0x0b
    868e:	74 85       	ldd	r23, Z+12	; 0x0c
    8690:	85 85       	ldd	r24, Z+13	; 0x0d
    8692:	96 85       	ldd	r25, Z+14	; 0x0e
    8694:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    8698:	46 2f       	mov	r20, r22
    869a:	f7 01       	movw	r30, r14
    869c:	67 81       	ldd	r22, Z+7	; 0x07
    869e:	70 85       	ldd	r23, Z+8	; 0x08
    86a0:	81 85       	ldd	r24, Z+9	; 0x09
    86a2:	92 85       	ldd	r25, Z+10	; 0x0a
    86a4:	49 83       	std	Y+1, r20	; 0x01
    86a6:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    86aa:	02 e0       	ldi	r16, 0x02	; 2
    86ac:	22 e0       	ldi	r18, 0x02	; 2
    86ae:	49 81       	ldd	r20, Y+1	; 0x01
    86b0:	81 2f       	mov	r24, r17
    86b2:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
}
    86b6:	0f 90       	pop	r0
    86b8:	df 91       	pop	r29
    86ba:	cf 91       	pop	r28
    86bc:	1f 91       	pop	r17
    86be:	0f 91       	pop	r16
    86c0:	ff 90       	pop	r15
    86c2:	ef 90       	pop	r14
    86c4:	08 95       	ret

000086c6 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    86c6:	df 92       	push	r13
    86c8:	ef 92       	push	r14
    86ca:	ff 92       	push	r15
    86cc:	0f 93       	push	r16
    86ce:	1f 93       	push	r17
    86d0:	cf 93       	push	r28
    86d2:	df 93       	push	r29
    86d4:	1f 92       	push	r1
    86d6:	cd b7       	in	r28, 0x3d	; 61
    86d8:	de b7       	in	r29, 0x3e	; 62
    86da:	d6 2e       	mov	r13, r22
    86dc:	4d 96       	adiw	r24, 0x1d	; 29
    86de:	7c 01       	movw	r14, r24
    86e0:	12 e0       	ldi	r17, 0x02	; 2
    86e2:	16 0f       	add	r17, r22
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		MoveSprite(sprite_index, player->shot[i].x, player->shot[i].y, 1, 1);
    86e4:	f7 01       	movw	r30, r14
    86e6:	64 81       	ldd	r22, Z+4	; 0x04
    86e8:	75 81       	ldd	r23, Z+5	; 0x05
    86ea:	86 81       	ldd	r24, Z+6	; 0x06
    86ec:	97 81       	ldd	r25, Z+7	; 0x07
    86ee:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    86f2:	46 2f       	mov	r20, r22
    86f4:	f7 01       	movw	r30, r14
    86f6:	60 81       	ld	r22, Z
    86f8:	71 81       	ldd	r23, Z+1	; 0x01
    86fa:	82 81       	ldd	r24, Z+2	; 0x02
    86fc:	93 81       	ldd	r25, Z+3	; 0x03
    86fe:	49 83       	std	Y+1, r20	; 0x01
    8700:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    8704:	01 e0       	ldi	r16, 0x01	; 1
    8706:	21 e0       	ldi	r18, 0x01	; 1
    8708:	49 81       	ldd	r20, Y+1	; 0x01
    870a:	8d 2d       	mov	r24, r13
    870c:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
		sprite_index++;
    8710:	d3 94       	inc	r13
    8712:	f5 e2       	ldi	r31, 0x25	; 37
    8714:	ef 0e       	add	r14, r31
    8716:	f1 1c       	adc	r15, r1
	MoveSprite(sprite_index, player->x, player->y, 2, 2);
}

void render_shot(Player* player, u8 sprite_index)
{
	for (u8 i = 0; i < MAX_SHOTS; i++)
    8718:	d1 12       	cpse	r13, r17
    871a:	e4 cf       	rjmp	.-56     	; 0x86e4 <render_shot+0x1e>
	{
		MoveSprite(sprite_index, player->shot[i].x, player->shot[i].y, 1, 1);
		sprite_index++;
	}
}
    871c:	0f 90       	pop	r0
    871e:	df 91       	pop	r29
    8720:	cf 91       	pop	r28
    8722:	1f 91       	pop	r17
    8724:	0f 91       	pop	r16
    8726:	ff 90       	pop	r15
    8728:	ef 90       	pop	r14
    872a:	df 90       	pop	r13
    872c:	08 95       	ret

0000872e <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    872e:	ff 92       	push	r15
    8730:	0f 93       	push	r16
    8732:	1f 93       	push	r17
    8734:	cf 93       	push	r28
    8736:	df 93       	push	r29
    8738:	1f 92       	push	r1
    873a:	cd b7       	in	r28, 0x3d	; 61
    873c:	de b7       	in	r29, 0x3e	; 62
    873e:	8c 01       	movw	r16, r24
    8740:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->grace_frame != FRAMES_PER_GRACE)
    8742:	fc 01       	movw	r30, r24
    8744:	95 89       	ldd	r25, Z+21	; 0x15
    8746:	98 37       	cpi	r25, 0x78	; 120
    8748:	11 f0       	breq	.+4      	; 0x874e <tank_map+0x20>
	{
		player->grace_frame++;
    874a:	9f 5f       	subi	r25, 0xFF	; 255
    874c:	95 8b       	std	Z+21, r25	; 0x15
	}
	switch (player->direction)
    874e:	f8 01       	movw	r30, r16
    8750:	91 89       	ldd	r25, Z+17	; 0x11
    8752:	91 30       	cpi	r25, 0x01	; 1
    8754:	79 f0       	breq	.+30     	; 0x8774 <tank_map+0x46>
    8756:	f8 f0       	brcs	.+62     	; 0x8796 <tank_map+0x68>
    8758:	92 30       	cpi	r25, 0x02	; 2
    875a:	99 f0       	breq	.+38     	; 0x8782 <tank_map+0x54>
    875c:	93 30       	cpi	r25, 0x03	; 3
    875e:	d9 f4       	brne	.+54     	; 0x8796 <tank_map+0x68>
	{
		case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
		case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
		case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
		case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    8760:	be 01       	movw	r22, r28
    8762:	6f 5f       	subi	r22, 0xFF	; 255
    8764:	7f 4f       	sbci	r23, 0xFF	; 255
    8766:	c8 01       	movw	r24, r16
    8768:	81 59       	subi	r24, 0x91	; 145
    876a:	9f 4f       	sbci	r25, 0xFF	; 255
    876c:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <LBGetNextFrame>
    8770:	41 e0       	ldi	r20, 0x01	; 1
    8772:	1a c0       	rjmp	.+52     	; 0x87a8 <tank_map+0x7a>
		player->grace_frame++;
	}
	switch (player->direction)
	{
		case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
		case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    8774:	be 01       	movw	r22, r28
    8776:	6f 5f       	subi	r22, 0xFF	; 255
    8778:	7f 4f       	sbci	r23, 0xFF	; 255
    877a:	c8 01       	movw	r24, r16
    877c:	81 59       	subi	r24, 0x91	; 145
    877e:	9f 4f       	sbci	r25, 0xFF	; 255
    8780:	10 c0       	rjmp	.+32     	; 0x87a2 <tank_map+0x74>
		case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    8782:	be 01       	movw	r22, r28
    8784:	6f 5f       	subi	r22, 0xFF	; 255
    8786:	7f 4f       	sbci	r23, 0xFF	; 255
    8788:	c8 01       	movw	r24, r16
    878a:	8b 59       	subi	r24, 0x9B	; 155
    878c:	9f 4f       	sbci	r25, 0xFF	; 255
    878e:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <LBGetNextFrame>
    8792:	42 e0       	ldi	r20, 0x02	; 2
    8794:	09 c0       	rjmp	.+18     	; 0x87a8 <tank_map+0x7a>
		case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
		default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    8796:	be 01       	movw	r22, r28
    8798:	6f 5f       	subi	r22, 0xFF	; 255
    879a:	7f 4f       	sbci	r23, 0xFF	; 255
    879c:	c8 01       	movw	r24, r16
    879e:	8b 59       	subi	r24, 0x9B	; 155
    87a0:	9f 4f       	sbci	r25, 0xFF	; 255
    87a2:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <LBGetNextFrame>
    87a6:	40 e0       	ldi	r20, 0x00	; 0
	}
	if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    87a8:	f8 01       	movw	r30, r16
    87aa:	25 89       	ldd	r18, Z+21	; 0x15
    87ac:	28 37       	cpi	r18, 0x78	; 120
    87ae:	31 f0       	breq	.+12     	; 0x87bc <tank_map+0x8e>
    87b0:	20 91 7b 0f 	lds	r18, 0x0F7B
    87b4:	22 23       	and	r18, r18
    87b6:	11 f0       	breq	.+4      	; 0x87bc <tank_map+0x8e>
	{
		t_map = (char*) map_tank_blank;
    87b8:	8b e0       	ldi	r24, 0x0B	; 11
    87ba:	98 e2       	ldi	r25, 0x28	; 40
	}
	toggle_counter--;
    87bc:	20 91 01 01 	lds	r18, 0x0101
    87c0:	21 50       	subi	r18, 0x01	; 1
	if (toggle_counter == 0)
    87c2:	19 f0       	breq	.+6      	; 0x87ca <tank_map+0x9c>
	}
	if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
	{
		t_map = (char*) map_tank_blank;
	}
	toggle_counter--;
    87c4:	20 93 01 01 	sts	0x0101, r18
    87c8:	09 c0       	rjmp	.+18     	; 0x87dc <tank_map+0xae>
	if (toggle_counter == 0)
	{
		toggle_counter = FRAMES_PER_BLANK;
    87ca:	24 e1       	ldi	r18, 0x14	; 20
    87cc:	20 93 01 01 	sts	0x0101, r18
		toggle_blank = toggle_blank ^ 1;
    87d0:	30 91 7b 0f 	lds	r19, 0x0F7B
    87d4:	21 e0       	ldi	r18, 0x01	; 1
    87d6:	23 27       	eor	r18, r19
    87d8:	20 93 7b 0f 	sts	0x0F7B, r18
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    87dc:	bc 01       	movw	r22, r24
    87de:	8f 2d       	mov	r24, r15
    87e0:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    87e4:	84 e0       	ldi	r24, 0x04	; 4
    87e6:	8f 0d       	add	r24, r15
    87e8:	0f 90       	pop	r0
    87ea:	df 91       	pop	r29
    87ec:	cf 91       	pop	r28
    87ee:	1f 91       	pop	r17
    87f0:	0f 91       	pop	r16
    87f2:	ff 90       	pop	r15
    87f4:	08 95       	ret

000087f6 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    87f6:	ef 92       	push	r14
    87f8:	ff 92       	push	r15
    87fa:	0f 93       	push	r16
    87fc:	1f 93       	push	r17
    87fe:	cf 93       	push	r28
    8800:	df 93       	push	r29
    8802:	00 d0       	rcall	.+0      	; 0x8804 <shot_map+0xe>
    8804:	cd b7       	in	r28, 0x3d	; 61
    8806:	de b7       	in	r29, 0x3e	; 62
    8808:	f6 2e       	mov	r15, r22
	char looped = 0;
    880a:	19 82       	std	Y+1, r1	; 0x01
    880c:	8c 01       	movw	r16, r24
    880e:	04 5d       	subi	r16, 0xD4	; 212
    8810:	1f 4f       	sbci	r17, 0xFF	; 255
    8812:	82 e0       	ldi	r24, 0x02	; 2
    8814:	e8 2e       	mov	r14, r24
    8816:	e6 0e       	add	r14, r22
	char* s_map = 0;
	u8 s_flags = 0;
    8818:	20 e0       	ldi	r18, 0x00	; 0
    881a:	f8 01       	movw	r30, r16
    881c:	36 97       	sbiw	r30, 0x06	; 6
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    881e:	80 81       	ld	r24, Z
    8820:	88 23       	and	r24, r24
    8822:	41 f1       	breq	.+80     	; 0x8874 <shot_map+0x7e>
    8824:	31 96       	adiw	r30, 0x01	; 1
		{
			switch (shot->direction)
    8826:	80 81       	ld	r24, Z
    8828:	81 30       	cpi	r24, 0x01	; 1
    882a:	71 f0       	breq	.+28     	; 0x8848 <shot_map+0x52>
    882c:	f0 f0       	brcs	.+60     	; 0x886a <shot_map+0x74>
    882e:	82 30       	cpi	r24, 0x02	; 2
    8830:	a1 f0       	breq	.+40     	; 0x885a <shot_map+0x64>
    8832:	83 30       	cpi	r24, 0x03	; 3
    8834:	d1 f4       	brne	.+52     	; 0x886a <shot_map+0x74>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    8836:	be 01       	movw	r22, r28
    8838:	6f 5f       	subi	r22, 0xFF	; 255
    883a:	7f 4f       	sbci	r23, 0xFF	; 255
    883c:	c8 01       	movw	r24, r16
    883e:	0a 96       	adiw	r24, 0x0a	; 10
    8840:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <LBGetNextFrame>
    8844:	21 e0       	ldi	r18, 0x01	; 1
    8846:	18 c0       	rjmp	.+48     	; 0x8878 <shot_map+0x82>
		if (shot->active)
		{
			switch (shot->direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    8848:	be 01       	movw	r22, r28
    884a:	6f 5f       	subi	r22, 0xFF	; 255
    884c:	7f 4f       	sbci	r23, 0xFF	; 255
    884e:	c8 01       	movw	r24, r16
    8850:	0a 96       	adiw	r24, 0x0a	; 10
    8852:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <LBGetNextFrame>
    8856:	20 e0       	ldi	r18, 0x00	; 0
    8858:	0f c0       	rjmp	.+30     	; 0x8878 <shot_map+0x82>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    885a:	be 01       	movw	r22, r28
    885c:	6f 5f       	subi	r22, 0xFF	; 255
    885e:	7f 4f       	sbci	r23, 0xFF	; 255
    8860:	c8 01       	movw	r24, r16
    8862:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <LBGetNextFrame>
    8866:	22 e0       	ldi	r18, 0x02	; 2
    8868:	07 c0       	rjmp	.+14     	; 0x8878 <shot_map+0x82>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    886a:	be 01       	movw	r22, r28
    886c:	6f 5f       	subi	r22, 0xFF	; 255
    886e:	7f 4f       	sbci	r23, 0xFF	; 255
    8870:	c8 01       	movw	r24, r16
    8872:	ef cf       	rjmp	.-34     	; 0x8852 <shot_map+0x5c>
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    8874:	8b e0       	ldi	r24, 0x0B	; 11
    8876:	98 e2       	ldi	r25, 0x28	; 40
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    8878:	42 2f       	mov	r20, r18
    887a:	bc 01       	movw	r22, r24
    887c:	8f 2d       	mov	r24, r15
    887e:	2a 83       	std	Y+2, r18	; 0x02
    8880:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
    8884:	f3 94       	inc	r15
    8886:	0b 5d       	subi	r16, 0xDB	; 219
    8888:	1f 4f       	sbci	r17, 0xFF	; 255
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    888a:	2a 81       	ldd	r18, Y+2	; 0x02
    888c:	fe 10       	cpse	r15, r14
    888e:	c5 cf       	rjmp	.-118    	; 0x881a <shot_map+0x24>
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
		sprite_index++;
	}
	return sprite_index;
}
    8890:	8f 2d       	mov	r24, r15
    8892:	0f 90       	pop	r0
    8894:	0f 90       	pop	r0
    8896:	df 91       	pop	r29
    8898:	cf 91       	pop	r28
    889a:	1f 91       	pop	r17
    889c:	0f 91       	pop	r16
    889e:	ff 90       	pop	r15
    88a0:	ef 90       	pop	r14
    88a2:	08 95       	ret

000088a4 <first_index>:

int first_index()
{
	int result = 0;

	if (level.render_all)
    88a4:	80 91 3f 04 	lds	r24, 0x043F
    88a8:	81 11       	cpse	r24, r1
    88aa:	0c c0       	rjmp	.+24     	; 0x88c4 <first_index+0x20>
	{
		result = 0;
	}
	else
	{
		result = level.render_buffer[level.render_index];
    88ac:	e0 91 3e 04 	lds	r30, 0x043E
    88b0:	f0 e0       	ldi	r31, 0x00	; 0
    88b2:	ef 5c       	subi	r30, 0xCF	; 207
    88b4:	fb 4f       	sbci	r31, 0xFB	; 251
    88b6:	80 81       	ld	r24, Z
		if (level.buffer_size == 0) result = 30*25;
    88b8:	90 91 3d 04 	lds	r25, 0x043D
    88bc:	99 23       	and	r25, r25
    88be:	29 f0       	breq	.+10     	; 0x88ca <first_index+0x26>
	{
		result = 0;
	}
	else
	{
		result = level.render_buffer[level.render_index];
    88c0:	90 e0       	ldi	r25, 0x00	; 0
    88c2:	08 95       	ret
{
	int result = 0;

	if (level.render_all)
	{
		result = 0;
    88c4:	80 e0       	ldi	r24, 0x00	; 0
    88c6:	90 e0       	ldi	r25, 0x00	; 0
    88c8:	08 95       	ret
	}
	else
	{
		result = level.render_buffer[level.render_index];
		if (level.buffer_size == 0) result = 30*25;
    88ca:	8e ee       	ldi	r24, 0xEE	; 238
    88cc:	92 e0       	ldi	r25, 0x02	; 2
	}
	return result;
}
    88ce:	08 95       	ret

000088d0 <inc_index>:

int inc_index(int* i)
{
    88d0:	cf 93       	push	r28
    88d2:	df 93       	push	r29
    88d4:	dc 01       	movw	r26, r24
	int result;
	if (level.render_all)
    88d6:	80 91 3f 04 	lds	r24, 0x043F
    88da:	88 23       	and	r24, r24
    88dc:	39 f0       	breq	.+14     	; 0x88ec <inc_index+0x1c>
	{
		result = *i;
    88de:	8d 91       	ld	r24, X+
    88e0:	9c 91       	ld	r25, X
    88e2:	11 97       	sbiw	r26, 0x01	; 1
		*i = *i + 1;
    88e4:	9c 01       	movw	r18, r24
    88e6:	2f 5f       	subi	r18, 0xFF	; 255
    88e8:	3f 4f       	sbci	r19, 0xFF	; 255
    88ea:	18 c0       	rjmp	.+48     	; 0x891c <inc_index+0x4c>
	}
	else
	{
		result = level.render_buffer[level.render_index];
    88ec:	e0 91 3e 04 	lds	r30, 0x043E
    88f0:	ce 2f       	mov	r28, r30
    88f2:	d0 e0       	ldi	r29, 0x00	; 0
    88f4:	cf 5c       	subi	r28, 0xCF	; 207
    88f6:	db 4f       	sbci	r29, 0xFB	; 251
    88f8:	98 81       	ld	r25, Y
    88fa:	89 2f       	mov	r24, r25
    88fc:	90 e0       	ldi	r25, 0x00	; 0
		level.render_index++;
    88fe:	ef 5f       	subi	r30, 0xFF	; 255
    8900:	e0 93 3e 04 	sts	0x043E, r30
		if (level.render_index == level.buffer_size)
    8904:	20 91 3d 04 	lds	r18, 0x043D
    8908:	e2 13       	cpse	r30, r18
    890a:	03 c0       	rjmp	.+6      	; 0x8912 <inc_index+0x42>
		{
			*i = 30*25;
    890c:	2e ee       	ldi	r18, 0xEE	; 238
    890e:	32 e0       	ldi	r19, 0x02	; 2
    8910:	05 c0       	rjmp	.+10     	; 0x891c <inc_index+0x4c>
		}
		else
		{
			*i = level.render_buffer[level.render_index];
    8912:	f0 e0       	ldi	r31, 0x00	; 0
    8914:	ef 5c       	subi	r30, 0xCF	; 207
    8916:	fb 4f       	sbci	r31, 0xFB	; 251
    8918:	20 81       	ld	r18, Z
    891a:	30 e0       	ldi	r19, 0x00	; 0
    891c:	2d 93       	st	X+, r18
    891e:	3c 93       	st	X, r19
		}
	}
	return result;
}
    8920:	df 91       	pop	r29
    8922:	cf 91       	pop	r28
    8924:	08 95       	ret

00008926 <recoil_player>:

/* Collision Detection */
void recoil_player(Player* player)
{
    8926:	cf 93       	push	r28
    8928:	df 93       	push	r29
    892a:	ec 01       	movw	r28, r24
	if (player->direction == D_UP)
    892c:	89 89       	ldd	r24, Y+17	; 0x11
    892e:	81 11       	cpse	r24, r1
    8930:	13 c0       	rjmp	.+38     	; 0x8958 <recoil_player+0x32>
	{
		player->y += FRAME_TIME * player->speed;
    8932:	25 e6       	ldi	r18, 0x65	; 101
    8934:	38 e8       	ldi	r19, 0x88	; 136
    8936:	48 e8       	ldi	r20, 0x88	; 136
    8938:	5c e3       	ldi	r21, 0x3C	; 60
    893a:	6e 89       	ldd	r22, Y+22	; 0x16
    893c:	7f 89       	ldd	r23, Y+23	; 0x17
    893e:	88 8d       	ldd	r24, Y+24	; 0x18
    8940:	99 8d       	ldd	r25, Y+25	; 0x19
    8942:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    8946:	9b 01       	movw	r18, r22
    8948:	ac 01       	movw	r20, r24
    894a:	6b 85       	ldd	r22, Y+11	; 0x0b
    894c:	7c 85       	ldd	r23, Y+12	; 0x0c
    894e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8950:	9e 85       	ldd	r25, Y+14	; 0x0e
    8952:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    8956:	29 c0       	rjmp	.+82     	; 0x89aa <recoil_player+0x84>
	}
	if (player->direction == D_RIGHT)
    8958:	81 30       	cpi	r24, 0x01	; 1
    895a:	99 f4       	brne	.+38     	; 0x8982 <recoil_player+0x5c>
	{
		player->x -= FRAME_TIME * player->speed;
    895c:	25 e6       	ldi	r18, 0x65	; 101
    895e:	38 e8       	ldi	r19, 0x88	; 136
    8960:	48 e8       	ldi	r20, 0x88	; 136
    8962:	5c e3       	ldi	r21, 0x3C	; 60
    8964:	6e 89       	ldd	r22, Y+22	; 0x16
    8966:	7f 89       	ldd	r23, Y+23	; 0x17
    8968:	88 8d       	ldd	r24, Y+24	; 0x18
    896a:	99 8d       	ldd	r25, Y+25	; 0x19
    896c:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    8970:	9b 01       	movw	r18, r22
    8972:	ac 01       	movw	r20, r24
    8974:	6f 81       	ldd	r22, Y+7	; 0x07
    8976:	78 85       	ldd	r23, Y+8	; 0x08
    8978:	89 85       	ldd	r24, Y+9	; 0x09
    897a:	9a 85       	ldd	r25, Y+10	; 0x0a
    897c:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    8980:	2d c0       	rjmp	.+90     	; 0x89dc <recoil_player+0xb6>
	}
	if (player->direction == D_DOWN)
    8982:	82 30       	cpi	r24, 0x02	; 2
    8984:	b9 f4       	brne	.+46     	; 0x89b4 <recoil_player+0x8e>
	{
		player->y -= FRAME_TIME * player->speed;
    8986:	25 e6       	ldi	r18, 0x65	; 101
    8988:	38 e8       	ldi	r19, 0x88	; 136
    898a:	48 e8       	ldi	r20, 0x88	; 136
    898c:	5c e3       	ldi	r21, 0x3C	; 60
    898e:	6e 89       	ldd	r22, Y+22	; 0x16
    8990:	7f 89       	ldd	r23, Y+23	; 0x17
    8992:	88 8d       	ldd	r24, Y+24	; 0x18
    8994:	99 8d       	ldd	r25, Y+25	; 0x19
    8996:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    899a:	9b 01       	movw	r18, r22
    899c:	ac 01       	movw	r20, r24
    899e:	6b 85       	ldd	r22, Y+11	; 0x0b
    89a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    89a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    89a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    89a6:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    89aa:	6b 87       	std	Y+11, r22	; 0x0b
    89ac:	7c 87       	std	Y+12, r23	; 0x0c
    89ae:	8d 87       	std	Y+13, r24	; 0x0d
    89b0:	9e 87       	std	Y+14, r25	; 0x0e
    89b2:	18 c0       	rjmp	.+48     	; 0x89e4 <recoil_player+0xbe>
	}
	if (player->direction == D_LEFT)
    89b4:	83 30       	cpi	r24, 0x03	; 3
    89b6:	b1 f4       	brne	.+44     	; 0x89e4 <recoil_player+0xbe>
	{
		player->x += FRAME_TIME * player->speed;
    89b8:	25 e6       	ldi	r18, 0x65	; 101
    89ba:	38 e8       	ldi	r19, 0x88	; 136
    89bc:	48 e8       	ldi	r20, 0x88	; 136
    89be:	5c e3       	ldi	r21, 0x3C	; 60
    89c0:	6e 89       	ldd	r22, Y+22	; 0x16
    89c2:	7f 89       	ldd	r23, Y+23	; 0x17
    89c4:	88 8d       	ldd	r24, Y+24	; 0x18
    89c6:	99 8d       	ldd	r25, Y+25	; 0x19
    89c8:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    89cc:	9b 01       	movw	r18, r22
    89ce:	ac 01       	movw	r20, r24
    89d0:	6f 81       	ldd	r22, Y+7	; 0x07
    89d2:	78 85       	ldd	r23, Y+8	; 0x08
    89d4:	89 85       	ldd	r24, Y+9	; 0x09
    89d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    89d8:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    89dc:	6f 83       	std	Y+7, r22	; 0x07
    89de:	78 87       	std	Y+8, r23	; 0x08
    89e0:	89 87       	std	Y+9, r24	; 0x09
    89e2:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    89e4:	df 91       	pop	r29
    89e6:	cf 91       	pop	r28
    89e8:	08 95       	ret

000089ea <recoil_shot>:

void recoil_shot(Shot* shot)
{
    89ea:	cf 93       	push	r28
    89ec:	df 93       	push	r29
    89ee:	ec 01       	movw	r28, r24
	if (shot->direction == D_UP)
    89f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    89f2:	81 11       	cpse	r24, r1
    89f4:	13 c0       	rjmp	.+38     	; 0x8a1c <recoil_shot+0x32>
	{
		shot->y += FRAME_TIME * shot->speed;
    89f6:	25 e6       	ldi	r18, 0x65	; 101
    89f8:	38 e8       	ldi	r19, 0x88	; 136
    89fa:	48 e8       	ldi	r20, 0x88	; 136
    89fc:	5c e3       	ldi	r21, 0x3C	; 60
    89fe:	6d 85       	ldd	r22, Y+13	; 0x0d
    8a00:	7e 85       	ldd	r23, Y+14	; 0x0e
    8a02:	8f 85       	ldd	r24, Y+15	; 0x0f
    8a04:	98 89       	ldd	r25, Y+16	; 0x10
    8a06:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    8a0a:	9b 01       	movw	r18, r22
    8a0c:	ac 01       	movw	r20, r24
    8a0e:	6e 81       	ldd	r22, Y+6	; 0x06
    8a10:	7f 81       	ldd	r23, Y+7	; 0x07
    8a12:	88 85       	ldd	r24, Y+8	; 0x08
    8a14:	99 85       	ldd	r25, Y+9	; 0x09
    8a16:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    8a1a:	29 c0       	rjmp	.+82     	; 0x8a6e <recoil_shot+0x84>
	}
	if (shot->direction == D_RIGHT)
    8a1c:	81 30       	cpi	r24, 0x01	; 1
    8a1e:	99 f4       	brne	.+38     	; 0x8a46 <recoil_shot+0x5c>
	{
		shot->x -= FRAME_TIME * shot->speed;
    8a20:	25 e6       	ldi	r18, 0x65	; 101
    8a22:	38 e8       	ldi	r19, 0x88	; 136
    8a24:	48 e8       	ldi	r20, 0x88	; 136
    8a26:	5c e3       	ldi	r21, 0x3C	; 60
    8a28:	6d 85       	ldd	r22, Y+13	; 0x0d
    8a2a:	7e 85       	ldd	r23, Y+14	; 0x0e
    8a2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    8a2e:	98 89       	ldd	r25, Y+16	; 0x10
    8a30:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    8a34:	9b 01       	movw	r18, r22
    8a36:	ac 01       	movw	r20, r24
    8a38:	6a 81       	ldd	r22, Y+2	; 0x02
    8a3a:	7b 81       	ldd	r23, Y+3	; 0x03
    8a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    8a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    8a40:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    8a44:	2d c0       	rjmp	.+90     	; 0x8aa0 <recoil_shot+0xb6>
	}
	if (shot->direction == D_DOWN)
    8a46:	82 30       	cpi	r24, 0x02	; 2
    8a48:	b9 f4       	brne	.+46     	; 0x8a78 <recoil_shot+0x8e>
	{
		shot->y -= FRAME_TIME * shot->speed;
    8a4a:	25 e6       	ldi	r18, 0x65	; 101
    8a4c:	38 e8       	ldi	r19, 0x88	; 136
    8a4e:	48 e8       	ldi	r20, 0x88	; 136
    8a50:	5c e3       	ldi	r21, 0x3C	; 60
    8a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    8a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    8a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    8a58:	98 89       	ldd	r25, Y+16	; 0x10
    8a5a:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    8a5e:	9b 01       	movw	r18, r22
    8a60:	ac 01       	movw	r20, r24
    8a62:	6e 81       	ldd	r22, Y+6	; 0x06
    8a64:	7f 81       	ldd	r23, Y+7	; 0x07
    8a66:	88 85       	ldd	r24, Y+8	; 0x08
    8a68:	99 85       	ldd	r25, Y+9	; 0x09
    8a6a:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    8a6e:	6e 83       	std	Y+6, r22	; 0x06
    8a70:	7f 83       	std	Y+7, r23	; 0x07
    8a72:	88 87       	std	Y+8, r24	; 0x08
    8a74:	99 87       	std	Y+9, r25	; 0x09
    8a76:	18 c0       	rjmp	.+48     	; 0x8aa8 <recoil_shot+0xbe>
	}
	if (shot->direction == D_LEFT)
    8a78:	83 30       	cpi	r24, 0x03	; 3
    8a7a:	b1 f4       	brne	.+44     	; 0x8aa8 <recoil_shot+0xbe>
	{
		shot->x += FRAME_TIME * shot->speed;
    8a7c:	25 e6       	ldi	r18, 0x65	; 101
    8a7e:	38 e8       	ldi	r19, 0x88	; 136
    8a80:	48 e8       	ldi	r20, 0x88	; 136
    8a82:	5c e3       	ldi	r21, 0x3C	; 60
    8a84:	6d 85       	ldd	r22, Y+13	; 0x0d
    8a86:	7e 85       	ldd	r23, Y+14	; 0x0e
    8a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    8a8a:	98 89       	ldd	r25, Y+16	; 0x10
    8a8c:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    8a90:	9b 01       	movw	r18, r22
    8a92:	ac 01       	movw	r20, r24
    8a94:	6a 81       	ldd	r22, Y+2	; 0x02
    8a96:	7b 81       	ldd	r23, Y+3	; 0x03
    8a98:	8c 81       	ldd	r24, Y+4	; 0x04
    8a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    8a9c:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    8aa0:	6a 83       	std	Y+2, r22	; 0x02
    8aa2:	7b 83       	std	Y+3, r23	; 0x03
    8aa4:	8c 83       	std	Y+4, r24	; 0x04
    8aa6:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    8aa8:	df 91       	pop	r29
    8aaa:	cf 91       	pop	r28
    8aac:	08 95       	ret

00008aae <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    8aae:	8e 5b       	subi	r24, 0xBE	; 190
    8ab0:	9e 4f       	sbci	r25, 0xFE	; 254
    8ab2:	fc 01       	movw	r30, r24
    8ab4:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    8ab6:	81 30       	cpi	r24, 0x01	; 1
    8ab8:	21 f0       	breq	.+8      	; 0x8ac2 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    8aba:	82 30       	cpi	r24, 0x02	; 2
    8abc:	21 f0       	breq	.+8      	; 0x8ac6 <solid_square_tile+0x18>

	return 0;
    8abe:	80 e0       	ldi	r24, 0x00	; 0
    8ac0:	08 95       	ret
    8ac2:	81 e0       	ldi	r24, 0x01	; 1
    8ac4:	08 95       	ret
    8ac6:	82 e0       	ldi	r24, 0x02	; 2
}
    8ac8:	08 95       	ret

00008aca <solid_directional_tile>:

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    8aca:	5f 92       	push	r5
    8acc:	6f 92       	push	r6
    8ace:	7f 92       	push	r7
    8ad0:	8f 92       	push	r8
    8ad2:	9f 92       	push	r9
    8ad4:	af 92       	push	r10
    8ad6:	bf 92       	push	r11
    8ad8:	cf 92       	push	r12
    8ada:	df 92       	push	r13
    8adc:	ef 92       	push	r14
    8ade:	ff 92       	push	r15
    8ae0:	0f 93       	push	r16
    8ae2:	1f 93       	push	r17
    8ae4:	cf 93       	push	r28
    8ae6:	df 93       	push	r29
    8ae8:	f6 2e       	mov	r15, r22
    8aea:	d4 2e       	mov	r13, r20
    8aec:	92 2e       	mov	r9, r18
    8aee:	b0 2e       	mov	r11, r16
	u8 tile = level.level_map[tile_index];
    8af0:	fc 01       	movw	r30, r24
    8af2:	ee 5b       	subi	r30, 0xBE	; 190
    8af4:	fe 4f       	sbci	r31, 0xFE	; 254
    8af6:	11 81       	ldd	r17, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    8af8:	6e e1       	ldi	r22, 0x1E	; 30
    8afa:	70 e0       	ldi	r23, 0x00	; 0
    8afc:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <__divmodhi4>
    8b00:	d8 2f       	mov	r29, r24
    8b02:	dd 0f       	add	r29, r29
    8b04:	dd 0f       	add	r29, r29
    8b06:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    8b08:	6d 5f       	subi	r22, 0xFD	; 253
    8b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    8b0c:	c6 2f       	mov	r28, r22
    8b0e:	cc 0f       	add	r28, r28
    8b10:	cc 0f       	add	r28, r28
    8b12:	cc 0f       	add	r28, r28

	if ((tile == L_TL) || (tile == L_BR))
    8b14:	13 30       	cpi	r17, 0x03	; 3
    8b16:	11 f0       	breq	.+4      	; 0x8b1c <solid_directional_tile+0x52>
    8b18:	16 30       	cpi	r17, 0x06	; 6
    8b1a:	a1 f5       	brne	.+104    	; 0x8b84 <solid_directional_tile+0xba>
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height)) return tile;
    8b1c:	6d 2c       	mov	r6, r13
    8b1e:	6b 0c       	add	r6, r11
    8b20:	27 e0       	ldi	r18, 0x07	; 7
    8b22:	72 2e       	mov	r7, r18
    8b24:	7d 0e       	add	r7, r29
    8b26:	37 e0       	ldi	r19, 0x07	; 7
    8b28:	83 2e       	mov	r8, r19
    8b2a:	8c 0e       	add	r8, r28
    8b2c:	a6 2c       	mov	r10, r6
    8b2e:	cf 2c       	mov	r12, r15
    8b30:	ed 2c       	mov	r14, r13
    8b32:	0f 2d       	mov	r16, r15
    8b34:	2c 2f       	mov	r18, r28
    8b36:	47 2d       	mov	r20, r7
    8b38:	68 2d       	mov	r22, r8
    8b3a:	8d 2f       	mov	r24, r29
    8b3c:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <LBLineIntersect>
    8b40:	81 11       	cpse	r24, r1
    8b42:	59 c0       	rjmp	.+178    	; 0x8bf6 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width, y)) return tile;
    8b44:	5f 2c       	mov	r5, r15
    8b46:	59 0c       	add	r5, r9
    8b48:	ad 2c       	mov	r10, r13
    8b4a:	c5 2c       	mov	r12, r5
    8b4c:	2c 2f       	mov	r18, r28
    8b4e:	47 2d       	mov	r20, r7
    8b50:	68 2d       	mov	r22, r8
    8b52:	8d 2f       	mov	r24, r29
    8b54:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <LBLineIntersect>
    8b58:	81 11       	cpse	r24, r1
    8b5a:	4d c0       	rjmp	.+154    	; 0x8bf6 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width, y, x+width, y+height)) return tile;
    8b5c:	a6 2c       	mov	r10, r6
    8b5e:	05 2d       	mov	r16, r5
    8b60:	2c 2f       	mov	r18, r28
    8b62:	47 2d       	mov	r20, r7
    8b64:	68 2d       	mov	r22, r8
    8b66:	8d 2f       	mov	r24, r29
    8b68:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <LBLineIntersect>
    8b6c:	81 11       	cpse	r24, r1
    8b6e:	43 c0       	rjmp	.+134    	; 0x8bf6 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height, x+width, y+height)) return tile;
    8b70:	e6 2c       	mov	r14, r6
    8b72:	0f 2d       	mov	r16, r15
    8b74:	2c 2f       	mov	r18, r28
    8b76:	47 2d       	mov	r20, r7
    8b78:	68 2d       	mov	r22, r8
    8b7a:	8d 2f       	mov	r24, r29
    8b7c:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <LBLineIntersect>
    8b80:	81 11       	cpse	r24, r1
    8b82:	39 c0       	rjmp	.+114    	; 0x8bf6 <solid_directional_tile+0x12c>
	}
	if ((tile == L_TR) || (tile == L_BL))
    8b84:	8c ef       	ldi	r24, 0xFC	; 252
    8b86:	81 0f       	add	r24, r17
    8b88:	82 30       	cpi	r24, 0x02	; 2
    8b8a:	98 f5       	brcc	.+102    	; 0x8bf2 <solid_directional_tile+0x128>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height)) return tile;
    8b8c:	bd 0c       	add	r11, r13
    8b8e:	87 e0       	ldi	r24, 0x07	; 7
    8b90:	78 2e       	mov	r7, r24
    8b92:	7c 0e       	add	r7, r28
    8b94:	97 e0       	ldi	r25, 0x07	; 7
    8b96:	89 2e       	mov	r8, r25
    8b98:	8d 0e       	add	r8, r29
    8b9a:	ab 2c       	mov	r10, r11
    8b9c:	cf 2c       	mov	r12, r15
    8b9e:	ed 2c       	mov	r14, r13
    8ba0:	0f 2d       	mov	r16, r15
    8ba2:	27 2d       	mov	r18, r7
    8ba4:	48 2d       	mov	r20, r8
    8ba6:	6c 2f       	mov	r22, r28
    8ba8:	8d 2f       	mov	r24, r29
    8baa:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <LBLineIntersect>
    8bae:	81 11       	cpse	r24, r1
    8bb0:	22 c0       	rjmp	.+68     	; 0x8bf6 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width, y)) return tile;
    8bb2:	9f 0c       	add	r9, r15
    8bb4:	ad 2c       	mov	r10, r13
    8bb6:	c9 2c       	mov	r12, r9
    8bb8:	27 2d       	mov	r18, r7
    8bba:	48 2d       	mov	r20, r8
    8bbc:	6c 2f       	mov	r22, r28
    8bbe:	8d 2f       	mov	r24, r29
    8bc0:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <LBLineIntersect>
    8bc4:	81 11       	cpse	r24, r1
    8bc6:	17 c0       	rjmp	.+46     	; 0x8bf6 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width, y, x+width, y+height)) return tile;
    8bc8:	ab 2c       	mov	r10, r11
    8bca:	09 2d       	mov	r16, r9
    8bcc:	27 2d       	mov	r18, r7
    8bce:	48 2d       	mov	r20, r8
    8bd0:	6c 2f       	mov	r22, r28
    8bd2:	8d 2f       	mov	r24, r29
    8bd4:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <LBLineIntersect>
    8bd8:	81 11       	cpse	r24, r1
    8bda:	0d c0       	rjmp	.+26     	; 0x8bf6 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height, x+width, y+height)) return tile;
    8bdc:	eb 2c       	mov	r14, r11
    8bde:	0f 2d       	mov	r16, r15
    8be0:	27 2d       	mov	r18, r7
    8be2:	48 2d       	mov	r20, r8
    8be4:	6c 2f       	mov	r22, r28
    8be6:	8d 2f       	mov	r24, r29
    8be8:	0e 94 ed 3f 	call	0x7fda	; 0x7fda <LBLineIntersect>
    8bec:	81 11       	cpse	r24, r1
    8bee:	03 c0       	rjmp	.+6      	; 0x8bf6 <solid_directional_tile+0x12c>
    8bf0:	03 c0       	rjmp	.+6      	; 0x8bf8 <solid_directional_tile+0x12e>
	}
	
	return 0;
    8bf2:	80 e0       	ldi	r24, 0x00	; 0
    8bf4:	01 c0       	rjmp	.+2      	; 0x8bf8 <solid_directional_tile+0x12e>
    8bf6:	81 2f       	mov	r24, r17
}
    8bf8:	df 91       	pop	r29
    8bfa:	cf 91       	pop	r28
    8bfc:	1f 91       	pop	r17
    8bfe:	0f 91       	pop	r16
    8c00:	ff 90       	pop	r15
    8c02:	ef 90       	pop	r14
    8c04:	df 90       	pop	r13
    8c06:	cf 90       	pop	r12
    8c08:	bf 90       	pop	r11
    8c0a:	af 90       	pop	r10
    8c0c:	9f 90       	pop	r9
    8c0e:	8f 90       	pop	r8
    8c10:	7f 90       	pop	r7
    8c12:	6f 90       	pop	r6
    8c14:	5f 90       	pop	r5
    8c16:	08 95       	ret

00008c18 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    8c18:	af 92       	push	r10
    8c1a:	cf 92       	push	r12
    8c1c:	ef 92       	push	r14
    8c1e:	0f 93       	push	r16
    8c20:	1f 93       	push	r17
    8c22:	cf 93       	push	r28
    8c24:	df 93       	push	r29
    8c26:	ec 01       	movw	r28, r24
    8c28:	8b 01       	movw	r16, r22
	return LBCollides(p->x, p->y, 14, 14, shot->x, shot->y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
    8c2a:	fb 01       	movw	r30, r22
    8c2c:	66 81       	ldd	r22, Z+6	; 0x06
    8c2e:	77 81       	ldd	r23, Z+7	; 0x07
    8c30:	80 85       	ldd	r24, Z+8	; 0x08
    8c32:	91 85       	ldd	r25, Z+9	; 0x09
    8c34:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    8c38:	e6 2e       	mov	r14, r22
    8c3a:	f8 01       	movw	r30, r16
    8c3c:	62 81       	ldd	r22, Z+2	; 0x02
    8c3e:	73 81       	ldd	r23, Z+3	; 0x03
    8c40:	84 81       	ldd	r24, Z+4	; 0x04
    8c42:	95 81       	ldd	r25, Z+5	; 0x05
    8c44:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    8c48:	06 2f       	mov	r16, r22
    8c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    8c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    8c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    8c52:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    8c56:	16 2f       	mov	r17, r22
    8c58:	6f 81       	ldd	r22, Y+7	; 0x07
    8c5a:	78 85       	ldd	r23, Y+8	; 0x08
    8c5c:	89 85       	ldd	r24, Y+9	; 0x09
    8c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8c60:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    8c64:	86 2f       	mov	r24, r22
    8c66:	97 e0       	ldi	r25, 0x07	; 7
    8c68:	a9 2e       	mov	r10, r25
    8c6a:	27 e0       	ldi	r18, 0x07	; 7
    8c6c:	c2 2e       	mov	r12, r18
    8c6e:	2e e0       	ldi	r18, 0x0E	; 14
    8c70:	4e e0       	ldi	r20, 0x0E	; 14
    8c72:	61 2f       	mov	r22, r17
    8c74:	0e 94 c3 3f 	call	0x7f86	; 0x7f86 <LBCollides>
    8c78:	88 23       	and	r24, r24
    8c7a:	39 f0       	breq	.+14     	; 0x8c8a <player_shot+0x72>
    8c7c:	91 e0       	ldi	r25, 0x01	; 1
    8c7e:	8d 89       	ldd	r24, Y+21	; 0x15
    8c80:	88 37       	cpi	r24, 0x78	; 120
    8c82:	09 f0       	breq	.+2      	; 0x8c86 <player_shot+0x6e>
    8c84:	90 e0       	ldi	r25, 0x00	; 0
    8c86:	89 2f       	mov	r24, r25
    8c88:	01 c0       	rjmp	.+2      	; 0x8c8c <player_shot+0x74>
    8c8a:	80 e0       	ldi	r24, 0x00	; 0
}
    8c8c:	df 91       	pop	r29
    8c8e:	cf 91       	pop	r28
    8c90:	1f 91       	pop	r17
    8c92:	0f 91       	pop	r16
    8c94:	ef 90       	pop	r14
    8c96:	cf 90       	pop	r12
    8c98:	af 90       	pop	r10
    8c9a:	08 95       	ret

00008c9c <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    8c9c:	2f 92       	push	r2
    8c9e:	3f 92       	push	r3
    8ca0:	4f 92       	push	r4
    8ca2:	5f 92       	push	r5
    8ca4:	6f 92       	push	r6
    8ca6:	7f 92       	push	r7
    8ca8:	8f 92       	push	r8
    8caa:	9f 92       	push	r9
    8cac:	af 92       	push	r10
    8cae:	bf 92       	push	r11
    8cb0:	cf 92       	push	r12
    8cb2:	df 92       	push	r13
    8cb4:	ef 92       	push	r14
    8cb6:	ff 92       	push	r15
    8cb8:	0f 93       	push	r16
    8cba:	1f 93       	push	r17
    8cbc:	cf 93       	push	r28
    8cbe:	df 93       	push	r29
    8cc0:	cd b7       	in	r28, 0x3d	; 61
    8cc2:	de b7       	in	r29, 0x3e	; 62
    8cc4:	2d 97       	sbiw	r28, 0x0d	; 13
    8cc6:	0f b6       	in	r0, 0x3f	; 63
    8cc8:	f8 94       	cli
    8cca:	de bf       	out	0x3e, r29	; 62
    8ccc:	0f be       	out	0x3f, r0	; 63
    8cce:	cd bf       	out	0x3d, r28	; 61
    8cd0:	6c 01       	movw	r12, r24
    8cd2:	7b 01       	movw	r14, r22
	int tiles[4] = {0, 0, 0, 0};
    8cd4:	ce 01       	movw	r24, r28
    8cd6:	01 96       	adiw	r24, 0x01	; 1
    8cd8:	5c 01       	movw	r10, r24
    8cda:	88 e0       	ldi	r24, 0x08	; 8
    8cdc:	d5 01       	movw	r26, r10
    8cde:	1d 92       	st	X+, r1
    8ce0:	8a 95       	dec	r24
    8ce2:	e9 f7       	brne	.-6      	; 0x8cde <collision_detect_shot+0x42>
	u8 x = shot->x / 8;
    8ce4:	db 01       	movw	r26, r22
    8ce6:	12 96       	adiw	r26, 0x02	; 2
    8ce8:	8d 91       	ld	r24, X+
    8cea:	9d 91       	ld	r25, X+
    8cec:	0d 90       	ld	r0, X+
    8cee:	bc 91       	ld	r27, X
    8cf0:	a0 2d       	mov	r26, r0
    8cf2:	89 87       	std	Y+9, r24	; 0x09
    8cf4:	9a 87       	std	Y+10, r25	; 0x0a
    8cf6:	ab 87       	std	Y+11, r26	; 0x0b
    8cf8:	bc 87       	std	Y+12, r27	; 0x0c
	u8 y = shot->y / 8 - 3;
    8cfa:	fb 01       	movw	r30, r22
    8cfc:	46 80       	ldd	r4, Z+6	; 0x06
    8cfe:	57 80       	ldd	r5, Z+7	; 0x07
    8d00:	60 84       	ldd	r6, Z+8	; 0x08
    8d02:	71 84       	ldd	r7, Z+9	; 0x09
    8d04:	20 e0       	ldi	r18, 0x00	; 0
    8d06:	30 e0       	ldi	r19, 0x00	; 0
    8d08:	40 e0       	ldi	r20, 0x00	; 0
    8d0a:	5e e3       	ldi	r21, 0x3E	; 62
    8d0c:	c3 01       	movw	r24, r6
    8d0e:	b2 01       	movw	r22, r4
    8d10:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    8d14:	20 e0       	ldi	r18, 0x00	; 0
    8d16:	30 e0       	ldi	r19, 0x00	; 0
    8d18:	40 e4       	ldi	r20, 0x40	; 64
    8d1a:	50 e4       	ldi	r21, 0x40	; 64
    8d1c:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    8d20:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
	u8 tile;
	Player* p = 0;
	
	tiles[0] = (y * 30) + x;
    8d24:	fe e1       	ldi	r31, 0x1E	; 30
    8d26:	6f 9f       	mul	r22, r31
    8d28:	40 01       	movw	r8, r0
    8d2a:	11 24       	eor	r1, r1
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[4] = {0, 0, 0, 0};
	u8 x = shot->x / 8;
    8d2c:	20 e0       	ldi	r18, 0x00	; 0
    8d2e:	30 e0       	ldi	r19, 0x00	; 0
    8d30:	40 e0       	ldi	r20, 0x00	; 0
    8d32:	5e e3       	ldi	r21, 0x3E	; 62
    8d34:	69 85       	ldd	r22, Y+9	; 0x09
    8d36:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d38:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d3c:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    8d40:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
	u8 y = shot->y / 8 - 3;
	u8 tile;
	Player* p = 0;
	
	tiles[0] = (y * 30) + x;
    8d44:	86 0e       	add	r8, r22
    8d46:	91 1c       	adc	r9, r1
    8d48:	9a 82       	std	Y+2, r9	; 0x02
    8d4a:	89 82       	std	Y+1, r8	; 0x01
	tiles[1] = tiles[0] + 1;
    8d4c:	c4 01       	movw	r24, r8
    8d4e:	01 96       	adiw	r24, 0x01	; 1
    8d50:	9c 83       	std	Y+4, r25	; 0x04
    8d52:	8b 83       	std	Y+3, r24	; 0x03
	tiles[2] = tiles[0] + 30;
    8d54:	4d 96       	adiw	r24, 0x1d	; 29
    8d56:	9e 83       	std	Y+6, r25	; 0x06
    8d58:	8d 83       	std	Y+5, r24	; 0x05
	tiles[3] = tiles[2] + 1;
    8d5a:	8f e1       	ldi	r24, 0x1F	; 31
    8d5c:	88 0e       	add	r8, r24
    8d5e:	91 1c       	adc	r9, r1
    8d60:	98 86       	std	Y+8, r9	; 0x08
    8d62:	8f 82       	std	Y+7, r8	; 0x07
	
	/* Level boundries first */
	if (shot->x < 0  || shot->x + 7 > 240 ||
    8d64:	20 e0       	ldi	r18, 0x00	; 0
    8d66:	30 e0       	ldi	r19, 0x00	; 0
    8d68:	a9 01       	movw	r20, r18
    8d6a:	69 85       	ldd	r22, Y+9	; 0x09
    8d6c:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d70:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d72:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <__cmpsf2>
    8d76:	87 fd       	sbrc	r24, 7
    8d78:	af c0       	rjmp	.+350    	; 0x8ed8 <collision_detect_shot+0x23c>
    8d7a:	20 e0       	ldi	r18, 0x00	; 0
    8d7c:	30 e0       	ldi	r19, 0x00	; 0
    8d7e:	40 ee       	ldi	r20, 0xE0	; 224
    8d80:	50 e4       	ldi	r21, 0x40	; 64
    8d82:	69 85       	ldd	r22, Y+9	; 0x09
    8d84:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d86:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d88:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d8a:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    8d8e:	20 e0       	ldi	r18, 0x00	; 0
    8d90:	30 e0       	ldi	r19, 0x00	; 0
    8d92:	40 e7       	ldi	r20, 0x70	; 112
    8d94:	53 e4       	ldi	r21, 0x43	; 67
    8d96:	0e 94 b4 50 	call	0xa168	; 0xa168 <__gesf2>
    8d9a:	18 16       	cp	r1, r24
    8d9c:	0c f4       	brge	.+2      	; 0x8da0 <collision_detect_shot+0x104>
    8d9e:	9c c0       	rjmp	.+312    	; 0x8ed8 <collision_detect_shot+0x23c>
    8da0:	20 e0       	ldi	r18, 0x00	; 0
    8da2:	30 e0       	ldi	r19, 0x00	; 0
    8da4:	40 ec       	ldi	r20, 0xC0	; 192
    8da6:	51 e4       	ldi	r21, 0x41	; 65
    8da8:	c3 01       	movw	r24, r6
    8daa:	b2 01       	movw	r22, r4
    8dac:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <__cmpsf2>
    8db0:	87 fd       	sbrc	r24, 7
    8db2:	92 c0       	rjmp	.+292    	; 0x8ed8 <collision_detect_shot+0x23c>
	    shot->y < 24 || shot->y + 7 > 224)
    8db4:	20 e0       	ldi	r18, 0x00	; 0
    8db6:	30 e0       	ldi	r19, 0x00	; 0
    8db8:	40 ee       	ldi	r20, 0xE0	; 224
    8dba:	50 e4       	ldi	r21, 0x40	; 64
    8dbc:	c3 01       	movw	r24, r6
    8dbe:	b2 01       	movw	r22, r4
    8dc0:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    8dc4:	20 e0       	ldi	r18, 0x00	; 0
    8dc6:	30 e0       	ldi	r19, 0x00	; 0
    8dc8:	40 e6       	ldi	r20, 0x60	; 96
    8dca:	53 e4       	ldi	r21, 0x43	; 67
    8dcc:	0e 94 b4 50 	call	0xa168	; 0xa168 <__gesf2>
    8dd0:	18 16       	cp	r1, r24
    8dd2:	0c f4       	brge	.+2      	; 0x8dd6 <collision_detect_shot+0x13a>
    8dd4:	81 c0       	rjmp	.+258    	; 0x8ed8 <collision_detect_shot+0x23c>
		player->active_shots--;
		return;
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
    8dd6:	b7 01       	movw	r22, r14
    8dd8:	83 ec       	ldi	r24, 0xC3	; 195
    8dda:	94 e0       	ldi	r25, 0x04	; 4
    8ddc:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <player_shot>
    8de0:	88 23       	and	r24, r24
    8de2:	69 f0       	breq	.+26     	; 0x8dfe <collision_detect_shot+0x162>
	{
		p = &player1;
		player2.level_score++;
    8de4:	80 91 45 04 	lds	r24, 0x0445
    8de8:	8f 5f       	subi	r24, 0xFF	; 255
    8dea:	80 93 45 04 	sts	0x0445, r24
		player2.score++;
    8dee:	80 91 44 04 	lds	r24, 0x0444
    8df2:	8f 5f       	subi	r24, 0xFF	; 255
    8df4:	80 93 44 04 	sts	0x0444, r24
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
	{
		p = &player1;
    8df8:	03 ec       	ldi	r16, 0xC3	; 195
    8dfa:	14 e0       	ldi	r17, 0x04	; 4
    8dfc:	18 c0       	rjmp	.+48     	; 0x8e2e <collision_detect_shot+0x192>
		player2.level_score++;
		player2.score++;
	}
	else if (player_shot(&player2, shot))
    8dfe:	b7 01       	movw	r22, r14
    8e00:	80 e4       	ldi	r24, 0x40	; 64
    8e02:	94 e0       	ldi	r25, 0x04	; 4
    8e04:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <player_shot>
    8e08:	81 11       	cpse	r24, r1
    8e0a:	05 c0       	rjmp	.+10     	; 0x8e16 <collision_detect_shot+0x17a>
    8e0c:	1e 01       	movw	r2, r28
    8e0e:	f9 e0       	ldi	r31, 0x09	; 9
    8e10:	2f 0e       	add	r2, r31
    8e12:	31 1c       	adc	r3, r1
    8e14:	4e c0       	rjmp	.+156    	; 0x8eb2 <collision_detect_shot+0x216>
	{
		p = &player2;
		player1.level_score++;
    8e16:	80 91 c8 04 	lds	r24, 0x04C8
    8e1a:	8f 5f       	subi	r24, 0xFF	; 255
    8e1c:	80 93 c8 04 	sts	0x04C8, r24
		player1.score++;
    8e20:	80 91 c7 04 	lds	r24, 0x04C7
    8e24:	8f 5f       	subi	r24, 0xFF	; 255
    8e26:	80 93 c7 04 	sts	0x04C7, r24
		player2.level_score++;
		player2.score++;
	}
	else if (player_shot(&player2, shot))
	{
		p = &player2;
    8e2a:	00 e4       	ldi	r16, 0x40	; 64
    8e2c:	14 e0       	ldi	r17, 0x04	; 4
		player1.level_score++;
		player1.score++;
	}
	if (p)
    8e2e:	01 15       	cp	r16, r1
    8e30:	11 05       	cpc	r17, r1
    8e32:	61 f3       	breq	.-40     	; 0x8e0c <collision_detect_shot+0x170>
	{
		reset_shot_state(shot, shot->shot_type);
    8e34:	d7 01       	movw	r26, r14
    8e36:	6c 91       	ld	r22, X
    8e38:	c7 01       	movw	r24, r14
    8e3a:	0e 94 0b 41 	call	0x8216	; 0x8216 <reset_shot_state>
		player->active_shots--;
    8e3e:	f6 01       	movw	r30, r12
    8e40:	86 81       	ldd	r24, Z+6	; 0x06
    8e42:	81 50       	subi	r24, 0x01	; 1
    8e44:	86 83       	std	Z+6, r24	; 0x06
		player_spawn(p);
    8e46:	c8 01       	movw	r24, r16
				player->active_shots--;
			}
			break;
		}
	}
}
    8e48:	2d 96       	adiw	r28, 0x0d	; 13
    8e4a:	0f b6       	in	r0, 0x3f	; 63
    8e4c:	f8 94       	cli
    8e4e:	de bf       	out	0x3e, r29	; 62
    8e50:	0f be       	out	0x3f, r0	; 63
    8e52:	cd bf       	out	0x3d, r28	; 61
    8e54:	df 91       	pop	r29
    8e56:	cf 91       	pop	r28
    8e58:	1f 91       	pop	r17
    8e5a:	0f 91       	pop	r16
    8e5c:	ff 90       	pop	r15
    8e5e:	ef 90       	pop	r14
    8e60:	df 90       	pop	r13
    8e62:	cf 90       	pop	r12
    8e64:	bf 90       	pop	r11
    8e66:	af 90       	pop	r10
    8e68:	9f 90       	pop	r9
    8e6a:	8f 90       	pop	r8
    8e6c:	7f 90       	pop	r7
    8e6e:	6f 90       	pop	r6
    8e70:	5f 90       	pop	r5
    8e72:	4f 90       	pop	r4
    8e74:	3f 90       	pop	r3
    8e76:	2f 90       	pop	r2
	}
	if (p)
	{
		reset_shot_state(shot, shot->shot_type);
		player->active_shots--;
		player_spawn(p);
    8e78:	0c 94 67 41 	jmp	0x82ce	; 0x82ce <player_spawn>
			recoil_shot(shot);
			reset_shot_state(shot, shot->shot_type);
			player->active_shots--;
			break;
		}
		else if (tile == L_BRICK)
    8e7c:	11 30       	cpi	r17, 0x01	; 1
    8e7e:	b1 f1       	breq	.+108    	; 0x8eec <collision_detect_shot+0x250>
				reset_shot_state(shot, shot->shot_type);
				player->active_shots--;
			}
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->x, shot->y, 7, 7))
    8e80:	c3 01       	movw	r24, r6
    8e82:	b2 01       	movw	r22, r4
    8e84:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    8e88:	46 2f       	mov	r20, r22
    8e8a:	f7 01       	movw	r30, r14
    8e8c:	62 81       	ldd	r22, Z+2	; 0x02
    8e8e:	73 81       	ldd	r23, Z+3	; 0x03
    8e90:	84 81       	ldd	r24, Z+4	; 0x04
    8e92:	95 81       	ldd	r25, Z+5	; 0x05
    8e94:	4d 87       	std	Y+13, r20	; 0x0d
    8e96:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    8e9a:	07 e0       	ldi	r16, 0x07	; 7
    8e9c:	27 e0       	ldi	r18, 0x07	; 7
    8e9e:	4d 85       	ldd	r20, Y+13	; 0x0d
    8ea0:	c4 01       	movw	r24, r8
    8ea2:	0e 94 65 45 	call	0x8aca	; 0x8aca <solid_directional_tile>
    8ea6:	81 11       	cpse	r24, r1
    8ea8:	43 c0       	rjmp	.+134    	; 0x8f30 <collision_detect_shot+0x294>
		player_spawn(p);
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 4; i++)
    8eaa:	a2 14       	cp	r10, r2
    8eac:	b3 04       	cpc	r11, r3
    8eae:	09 f4       	brne	.+2      	; 0x8eb2 <collision_detect_shot+0x216>
    8eb0:	77 c0       	rjmp	.+238    	; 0x8fa0 <collision_detect_shot+0x304>
	{
		tile = level.level_map[tiles[i]];
    8eb2:	d5 01       	movw	r26, r10
    8eb4:	8d 90       	ld	r8, X+
    8eb6:	9d 90       	ld	r9, X+
    8eb8:	5d 01       	movw	r10, r26
    8eba:	f4 01       	movw	r30, r8
    8ebc:	ee 5b       	subi	r30, 0xBE	; 190
    8ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    8ec0:	cf 01       	movw	r24, r30
    8ec2:	01 96       	adiw	r24, 0x01	; 1
    8ec4:	9a 87       	std	Y+10, r25	; 0x0a
    8ec6:	89 87       	std	Y+9, r24	; 0x09
    8ec8:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    8eca:	11 23       	and	r17, r17
    8ecc:	71 f3       	breq	.-36     	; 0x8eaa <collision_detect_shot+0x20e>
		if (tile == L_METAL)
    8ece:	12 30       	cpi	r17, 0x02	; 2
    8ed0:	a9 f6       	brne	.-86     	; 0x8e7c <collision_detect_shot+0x1e0>
		{
			recoil_shot(shot);
    8ed2:	c7 01       	movw	r24, r14
    8ed4:	0e 94 f5 44 	call	0x89ea	; 0x89ea <recoil_shot>
			reset_shot_state(shot, shot->shot_type);
    8ed8:	d7 01       	movw	r26, r14
    8eda:	6c 91       	ld	r22, X
    8edc:	c7 01       	movw	r24, r14
    8ede:	0e 94 0b 41 	call	0x8216	; 0x8216 <reset_shot_state>
			player->active_shots--;
    8ee2:	f6 01       	movw	r30, r12
    8ee4:	86 81       	ldd	r24, Z+6	; 0x06
    8ee6:	81 50       	subi	r24, 0x01	; 1
    8ee8:	86 83       	std	Z+6, r24	; 0x06
			break;
    8eea:	5a c0       	rjmp	.+180    	; 0x8fa0 <collision_detect_shot+0x304>
		}
		else if (tile == L_BRICK)
		{
			recoil_shot(shot);
    8eec:	c7 01       	movw	r24, r14
    8eee:	0e 94 f5 44 	call	0x89ea	; 0x89ea <recoil_shot>
			level.level_map[tiles[i]] = L_EMPTY;
    8ef2:	a9 85       	ldd	r26, Y+9	; 0x09
    8ef4:	ba 85       	ldd	r27, Y+10	; 0x0a
    8ef6:	1c 92       	st	X, r1
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    8ef8:	c4 01       	movw	r24, r8
    8efa:	6e e1       	ldi	r22, 0x1E	; 30
    8efc:	70 e0       	ldi	r23, 0x00	; 0
    8efe:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <__divmodhi4>
    8f02:	6d 5f       	subi	r22, 0xFD	; 253
    8f04:	40 e0       	ldi	r20, 0x00	; 0
    8f06:	50 e0       	ldi	r21, 0x00	; 0
    8f08:	0e 94 9a 30 	call	0x6134	; 0x6134 <SetTile>
			shot->hit_count--;
    8f0c:	f7 01       	movw	r30, r14
    8f0e:	81 81       	ldd	r24, Z+1	; 0x01
    8f10:	81 50       	subi	r24, 0x01	; 1
    8f12:	81 83       	std	Z+1, r24	; 0x01
			if (shot->hit_count <= 0)
    8f14:	81 11       	cpse	r24, r1
    8f16:	44 c0       	rjmp	.+136    	; 0x8fa0 <collision_detect_shot+0x304>
			{
				reset_shot_state(shot, shot->shot_type);
    8f18:	60 81       	ld	r22, Z
    8f1a:	c7 01       	movw	r24, r14
    8f1c:	0e 94 0b 41 	call	0x8216	; 0x8216 <reset_shot_state>
				player->active_shots--;
    8f20:	d6 01       	movw	r26, r12
    8f22:	16 96       	adiw	r26, 0x06	; 6
    8f24:	8c 91       	ld	r24, X
    8f26:	16 97       	sbiw	r26, 0x06	; 6
    8f28:	81 50       	subi	r24, 0x01	; 1
    8f2a:	16 96       	adiw	r26, 0x06	; 6
    8f2c:	8c 93       	st	X, r24
    8f2e:	38 c0       	rjmp	.+112    	; 0x8fa0 <collision_detect_shot+0x304>
			}
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->x, shot->y, 7, 7))
		{
			recoil_shot(shot);
    8f30:	c7 01       	movw	r24, r14
    8f32:	0e 94 f5 44 	call	0x89ea	; 0x89ea <recoil_shot>
			switch (tile)
    8f36:	14 30       	cpi	r17, 0x04	; 4
    8f38:	91 f0       	breq	.+36     	; 0x8f5e <collision_detect_shot+0x2c2>
    8f3a:	18 f4       	brcc	.+6      	; 0x8f42 <collision_detect_shot+0x2a6>
    8f3c:	13 30       	cpi	r17, 0x03	; 3
    8f3e:	31 f0       	breq	.+12     	; 0x8f4c <collision_detect_shot+0x2b0>
    8f40:	24 c0       	rjmp	.+72     	; 0x8f8a <collision_detect_shot+0x2ee>
    8f42:	15 30       	cpi	r17, 0x05	; 5
    8f44:	d9 f0       	breq	.+54     	; 0x8f7c <collision_detect_shot+0x2e0>
    8f46:	16 30       	cpi	r17, 0x06	; 6
    8f48:	81 f0       	breq	.+32     	; 0x8f6a <collision_detect_shot+0x2ce>
    8f4a:	1f c0       	rjmp	.+62     	; 0x8f8a <collision_detect_shot+0x2ee>
			{
				case L_TL:
					if (shot->direction == D_UP)
    8f4c:	d7 01       	movw	r26, r14
    8f4e:	1c 96       	adiw	r26, 0x0c	; 12
    8f50:	8c 91       	ld	r24, X
    8f52:	81 11       	cpse	r24, r1
    8f54:	08 c0       	rjmp	.+16     	; 0x8f66 <collision_detect_shot+0x2ca>
						shot->direction = D_RIGHT;
    8f56:	81 e0       	ldi	r24, 0x01	; 1
    8f58:	f7 01       	movw	r30, r14
    8f5a:	84 87       	std	Z+12, r24	; 0x0c
    8f5c:	16 c0       	rjmp	.+44     	; 0x8f8a <collision_detect_shot+0x2ee>
					else
						shot->direction = D_DOWN;
					break;
				case L_TR:
					if (shot->direction == D_UP)
    8f5e:	f7 01       	movw	r30, r14
    8f60:	84 85       	ldd	r24, Z+12	; 0x0c
    8f62:	88 23       	and	r24, r24
    8f64:	31 f0       	breq	.+12     	; 0x8f72 <collision_detect_shot+0x2d6>
			{
				case L_TL:
					if (shot->direction == D_UP)
						shot->direction = D_RIGHT;
					else
						shot->direction = D_DOWN;
    8f66:	82 e0       	ldi	r24, 0x02	; 2
    8f68:	05 c0       	rjmp	.+10     	; 0x8f74 <collision_detect_shot+0x2d8>
						shot->direction = D_RIGHT;
					else
						shot->direction = D_UP;
					break;
				case L_BR:
					if (shot->direction == D_DOWN)
    8f6a:	f7 01       	movw	r30, r14
    8f6c:	84 85       	ldd	r24, Z+12	; 0x0c
    8f6e:	82 30       	cpi	r24, 0x02	; 2
    8f70:	49 f4       	brne	.+18     	; 0x8f84 <collision_detect_shot+0x2e8>
					else
						shot->direction = D_DOWN;
					break;
				case L_TR:
					if (shot->direction == D_UP)
						shot->direction = D_LEFT;
    8f72:	83 e0       	ldi	r24, 0x03	; 3
    8f74:	d7 01       	movw	r26, r14
    8f76:	1c 96       	adiw	r26, 0x0c	; 12
    8f78:	8c 93       	st	X, r24
    8f7a:	07 c0       	rjmp	.+14     	; 0x8f8a <collision_detect_shot+0x2ee>
					else
						shot->direction = D_DOWN;
					break;
				case L_BL:
					if (shot->direction == D_DOWN)
    8f7c:	f7 01       	movw	r30, r14
    8f7e:	84 85       	ldd	r24, Z+12	; 0x0c
    8f80:	82 30       	cpi	r24, 0x02	; 2
    8f82:	49 f3       	breq	.-46     	; 0x8f56 <collision_detect_shot+0x2ba>
						shot->direction = D_RIGHT;
					else
						shot->direction = D_UP;
    8f84:	d7 01       	movw	r26, r14
    8f86:	1c 96       	adiw	r26, 0x0c	; 12
    8f88:	1c 92       	st	X, r1
						shot->direction = D_LEFT;
					else
						shot->direction = D_UP;
					break;
			}
			shot->rebounds--;
    8f8a:	d7 01       	movw	r26, r14
    8f8c:	1a 96       	adiw	r26, 0x0a	; 10
    8f8e:	8c 91       	ld	r24, X
    8f90:	1a 97       	sbiw	r26, 0x0a	; 10
    8f92:	81 50       	subi	r24, 0x01	; 1
    8f94:	1a 96       	adiw	r26, 0x0a	; 10
    8f96:	8c 93       	st	X, r24
    8f98:	1a 97       	sbiw	r26, 0x0a	; 10
			if (shot->rebounds <= 0)
    8f9a:	88 23       	and	r24, r24
    8f9c:	09 f4       	brne	.+2      	; 0x8fa0 <collision_detect_shot+0x304>
    8f9e:	9d cf       	rjmp	.-198    	; 0x8eda <collision_detect_shot+0x23e>
				player->active_shots--;
			}
			break;
		}
	}
}
    8fa0:	2d 96       	adiw	r28, 0x0d	; 13
    8fa2:	0f b6       	in	r0, 0x3f	; 63
    8fa4:	f8 94       	cli
    8fa6:	de bf       	out	0x3e, r29	; 62
    8fa8:	0f be       	out	0x3f, r0	; 63
    8faa:	cd bf       	out	0x3d, r28	; 61
    8fac:	df 91       	pop	r29
    8fae:	cf 91       	pop	r28
    8fb0:	1f 91       	pop	r17
    8fb2:	0f 91       	pop	r16
    8fb4:	ff 90       	pop	r15
    8fb6:	ef 90       	pop	r14
    8fb8:	df 90       	pop	r13
    8fba:	cf 90       	pop	r12
    8fbc:	bf 90       	pop	r11
    8fbe:	af 90       	pop	r10
    8fc0:	9f 90       	pop	r9
    8fc2:	8f 90       	pop	r8
    8fc4:	7f 90       	pop	r7
    8fc6:	6f 90       	pop	r6
    8fc8:	5f 90       	pop	r5
    8fca:	4f 90       	pop	r4
    8fcc:	3f 90       	pop	r3
    8fce:	2f 90       	pop	r2
    8fd0:	08 95       	ret

00008fd2 <update_level_helper>:
			break;
	}
}

void update_level_helper(JoyPadState* p, Player* player)
{
    8fd2:	cf 92       	push	r12
    8fd4:	df 92       	push	r13
    8fd6:	ef 92       	push	r14
    8fd8:	ff 92       	push	r15
    8fda:	0f 93       	push	r16
    8fdc:	1f 93       	push	r17
    8fde:	cf 93       	push	r28
    8fe0:	df 93       	push	r29
    8fe2:	8c 01       	movw	r16, r24
    8fe4:	eb 01       	movw	r28, r22
	Shot* shot;

	if ((p->pressed & BTN_START))
    8fe6:	fc 01       	movw	r30, r24
    8fe8:	80 81       	ld	r24, Z
    8fea:	91 81       	ldd	r25, Z+1	; 0x01
    8fec:	83 ff       	sbrs	r24, 3
    8fee:	06 c0       	rjmp	.+12     	; 0x8ffc <update_level_helper+0x2a>
	{
		game.paused = game.paused ^ 1;
    8ff0:	30 91 79 0f 	lds	r19, 0x0F79
    8ff4:	21 e0       	ldi	r18, 0x01	; 1
    8ff6:	23 27       	eor	r18, r19
    8ff8:	20 93 79 0f 	sts	0x0F79, r18
	}
	if (!game.paused)
    8ffc:	20 91 79 0f 	lds	r18, 0x0F79
    9000:	21 11       	cpse	r18, r1
    9002:	25 c1       	rjmp	.+586    	; 0x924e <update_level_helper+0x27c>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    9004:	93 ff       	sbrs	r25, 3
    9006:	0b c0       	rjmp	.+22     	; 0x901e <update_level_helper+0x4c>
    9008:	8b 89       	ldd	r24, Y+19	; 0x13
    900a:	8a 35       	cpi	r24, 0x5A	; 90
    900c:	41 f4       	brne	.+16     	; 0x901e <update_level_helper+0x4c>
		{
			player->banter_frame = 0;
    900e:	1b 8a       	std	Y+19, r1	; 0x13
			player->banter_index = (u8) random(0, 9);
    9010:	69 e0       	ldi	r22, 0x09	; 9
    9012:	70 e0       	ldi	r23, 0x00	; 0
    9014:	80 e0       	ldi	r24, 0x00	; 0
    9016:	90 e0       	ldi	r25, 0x00	; 0
    9018:	0e 94 c3 40 	call	0x8186	; 0x8186 <random>
    901c:	8c 8b       	std	Y+20, r24	; 0x14
		}
		player->speed = player->max_speed;
    901e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    9020:	70 e0       	ldi	r23, 0x00	; 0
    9022:	80 e0       	ldi	r24, 0x00	; 0
    9024:	90 e0       	ldi	r25, 0x00	; 0
    9026:	0e 94 02 50 	call	0xa004	; 0xa004 <__floatunsisf>
    902a:	6e 8b       	std	Y+22, r22	; 0x16
    902c:	7f 8b       	std	Y+23, r23	; 0x17
    902e:	88 8f       	std	Y+24, r24	; 0x18
    9030:	99 8f       	std	Y+25, r25	; 0x19
		if ((p->held & BTN_UP))
    9032:	f8 01       	movw	r30, r16
    9034:	24 81       	ldd	r18, Z+4	; 0x04
    9036:	24 ff       	sbrs	r18, 4
    9038:	10 c0       	rjmp	.+32     	; 0x905a <update_level_helper+0x88>
		{
			player->direction = D_UP;
    903a:	19 8a       	std	Y+17, r1	; 0x11
			player->y -= FRAME_TIME * player->speed;
    903c:	25 e6       	ldi	r18, 0x65	; 101
    903e:	38 e8       	ldi	r19, 0x88	; 136
    9040:	48 e8       	ldi	r20, 0x88	; 136
    9042:	5c e3       	ldi	r21, 0x3C	; 60
    9044:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    9048:	9b 01       	movw	r18, r22
    904a:	ac 01       	movw	r20, r24
    904c:	6b 85       	ldd	r22, Y+11	; 0x0b
    904e:	7c 85       	ldd	r23, Y+12	; 0x0c
    9050:	8d 85       	ldd	r24, Y+13	; 0x0d
    9052:	9e 85       	ldd	r25, Y+14	; 0x0e
    9054:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    9058:	25 c0       	rjmp	.+74     	; 0x90a4 <update_level_helper+0xd2>
		}
		else if ((p->held & BTN_RIGHT))
    905a:	27 ff       	sbrs	r18, 7
    905c:	11 c0       	rjmp	.+34     	; 0x9080 <update_level_helper+0xae>
		{
			player->direction = D_RIGHT;
    905e:	21 e0       	ldi	r18, 0x01	; 1
    9060:	29 8b       	std	Y+17, r18	; 0x11
			player->x += FRAME_TIME * player->speed;
    9062:	25 e6       	ldi	r18, 0x65	; 101
    9064:	38 e8       	ldi	r19, 0x88	; 136
    9066:	48 e8       	ldi	r20, 0x88	; 136
    9068:	5c e3       	ldi	r21, 0x3C	; 60
    906a:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    906e:	9b 01       	movw	r18, r22
    9070:	ac 01       	movw	r20, r24
    9072:	6f 81       	ldd	r22, Y+7	; 0x07
    9074:	78 85       	ldd	r23, Y+8	; 0x08
    9076:	89 85       	ldd	r24, Y+9	; 0x09
    9078:	9a 85       	ldd	r25, Y+10	; 0x0a
    907a:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    907e:	29 c0       	rjmp	.+82     	; 0x90d2 <update_level_helper+0x100>
		}
		else if ((p->held & BTN_DOWN))
    9080:	25 ff       	sbrs	r18, 5
    9082:	15 c0       	rjmp	.+42     	; 0x90ae <update_level_helper+0xdc>
		{
			player->direction = D_DOWN;
    9084:	22 e0       	ldi	r18, 0x02	; 2
    9086:	29 8b       	std	Y+17, r18	; 0x11
			player->y += FRAME_TIME * player->speed;
    9088:	25 e6       	ldi	r18, 0x65	; 101
    908a:	38 e8       	ldi	r19, 0x88	; 136
    908c:	48 e8       	ldi	r20, 0x88	; 136
    908e:	5c e3       	ldi	r21, 0x3C	; 60
    9090:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    9094:	9b 01       	movw	r18, r22
    9096:	ac 01       	movw	r20, r24
    9098:	6b 85       	ldd	r22, Y+11	; 0x0b
    909a:	7c 85       	ldd	r23, Y+12	; 0x0c
    909c:	8d 85       	ldd	r24, Y+13	; 0x0d
    909e:	9e 85       	ldd	r25, Y+14	; 0x0e
    90a0:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    90a4:	6b 87       	std	Y+11, r22	; 0x0b
    90a6:	7c 87       	std	Y+12, r23	; 0x0c
    90a8:	8d 87       	std	Y+13, r24	; 0x0d
    90aa:	9e 87       	std	Y+14, r25	; 0x0e
    90ac:	1b c0       	rjmp	.+54     	; 0x90e4 <update_level_helper+0x112>
		}
		else if ((p->held & BTN_LEFT))
    90ae:	26 ff       	sbrs	r18, 6
    90b0:	15 c0       	rjmp	.+42     	; 0x90dc <update_level_helper+0x10a>
		{
			player->direction = D_LEFT;
    90b2:	23 e0       	ldi	r18, 0x03	; 3
    90b4:	29 8b       	std	Y+17, r18	; 0x11
			player->x -= FRAME_TIME * player->speed;
    90b6:	25 e6       	ldi	r18, 0x65	; 101
    90b8:	38 e8       	ldi	r19, 0x88	; 136
    90ba:	48 e8       	ldi	r20, 0x88	; 136
    90bc:	5c e3       	ldi	r21, 0x3C	; 60
    90be:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    90c2:	9b 01       	movw	r18, r22
    90c4:	ac 01       	movw	r20, r24
    90c6:	6f 81       	ldd	r22, Y+7	; 0x07
    90c8:	78 85       	ldd	r23, Y+8	; 0x08
    90ca:	89 85       	ldd	r24, Y+9	; 0x09
    90cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    90ce:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    90d2:	6f 83       	std	Y+7, r22	; 0x07
    90d4:	78 87       	std	Y+8, r23	; 0x08
    90d6:	89 87       	std	Y+9, r24	; 0x09
    90d8:	9a 87       	std	Y+10, r25	; 0x0a
    90da:	04 c0       	rjmp	.+8      	; 0x90e4 <update_level_helper+0x112>
		}
		else
		{
			player->speed = 0;
    90dc:	1e 8a       	std	Y+22, r1	; 0x16
    90de:	1f 8a       	std	Y+23, r1	; 0x17
    90e0:	18 8e       	std	Y+24, r1	; 0x18
    90e2:	19 8e       	std	Y+25, r1	; 0x19
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    90e4:	f8 01       	movw	r30, r16
    90e6:	80 81       	ld	r24, Z
    90e8:	91 81       	ldd	r25, Z+1	; 0x01
    90ea:	8e 01       	movw	r16, r28
    90ec:	05 5e       	subi	r16, 0xE5	; 229
    90ee:	1f 4f       	sbci	r17, 0xFF	; 255
    90f0:	90 ff       	sbrs	r25, 0
    90f2:	28 c0       	rjmp	.+80     	; 0x9144 <update_level_helper+0x172>
    90f4:	8e 81       	ldd	r24, Y+6	; 0x06
    90f6:	82 30       	cpi	r24, 0x02	; 2
    90f8:	28 f5       	brcc	.+74     	; 0x9144 <update_level_helper+0x172>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    90fa:	9e a1       	ldd	r25, Y+38	; 0x26
    90fc:	91 11       	cpse	r25, r1
    90fe:	04 c0       	rjmp	.+8      	; 0x9108 <update_level_helper+0x136>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    9100:	b8 01       	movw	r22, r16
    9102:	20 e0       	ldi	r18, 0x00	; 0
    9104:	30 e0       	ldi	r19, 0x00	; 0
    9106:	0b c0       	rjmp	.+22     	; 0x911e <update_level_helper+0x14c>
				if (!shot->active)
    9108:	fe 01       	movw	r30, r28
    910a:	e5 5b       	subi	r30, 0xB5	; 181
    910c:	ff 4f       	sbci	r31, 0xFF	; 255
    910e:	90 81       	ld	r25, Z
    9110:	91 11       	cpse	r25, r1
    9112:	18 c0       	rjmp	.+48     	; 0x9144 <update_level_helper+0x172>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    9114:	be 01       	movw	r22, r28
    9116:	60 5c       	subi	r22, 0xC0	; 192
    9118:	7f 4f       	sbci	r23, 0xFF	; 255
    911a:	21 e0       	ldi	r18, 0x01	; 1
    911c:	30 e0       	ldi	r19, 0x00	; 0
				if (!shot->active)
				{
					player->active_shots++;
    911e:	8f 5f       	subi	r24, 0xFF	; 255
    9120:	8e 83       	std	Y+6, r24	; 0x06
					shot->direction = player->direction;
    9122:	85 e2       	ldi	r24, 0x25	; 37
    9124:	82 9f       	mul	r24, r18
    9126:	70 01       	movw	r14, r0
    9128:	83 9f       	mul	r24, r19
    912a:	f0 0c       	add	r15, r0
    912c:	11 24       	eor	r1, r1
    912e:	ec 0e       	add	r14, r28
    9130:	fd 1e       	adc	r15, r29
    9132:	89 89       	ldd	r24, Y+17	; 0x11
    9134:	f7 01       	movw	r30, r14
    9136:	87 a3       	std	Z+39, r24	; 0x27
					position_shot(player, shot);
    9138:	ce 01       	movw	r24, r28
    913a:	0e 94 6f 42 	call	0x84de	; 0x84de <position_shot>
					shot->active = 1;
    913e:	81 e0       	ldi	r24, 0x01	; 1
    9140:	f7 01       	movw	r30, r14
    9142:	86 a3       	std	Z+38, r24	; 0x26
    9144:	7e 01       	movw	r14, r28
    9146:	f7 e2       	ldi	r31, 0x27	; 39
    9148:	ef 0e       	add	r14, r31
    914a:	f1 1c       	adc	r15, r1
    914c:	6e 01       	movw	r12, r28
    914e:	85 e6       	ldi	r24, 0x65	; 101
    9150:	c8 0e       	add	r12, r24
    9152:	d1 1c       	adc	r13, r1
    9154:	f7 01       	movw	r30, r14
    9156:	31 97       	sbiw	r30, 0x01	; 1

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    9158:	80 81       	ld	r24, Z
    915a:	88 23       	and	r24, r24
    915c:	09 f4       	brne	.+2      	; 0x9160 <update_level_helper+0x18e>
    915e:	6d c0       	rjmp	.+218    	; 0x923a <update_level_helper+0x268>
			{
				switch (shot->direction)
    9160:	f7 01       	movw	r30, r14
    9162:	80 81       	ld	r24, Z
    9164:	81 30       	cpi	r24, 0x01	; 1
    9166:	89 f1       	breq	.+98     	; 0x91ca <update_level_helper+0x1f8>
    9168:	d8 f0       	brcs	.+54     	; 0x91a0 <update_level_helper+0x1ce>
    916a:	82 30       	cpi	r24, 0x02	; 2
    916c:	09 f4       	brne	.+2      	; 0x9170 <update_level_helper+0x19e>
    916e:	42 c0       	rjmp	.+132    	; 0x91f4 <update_level_helper+0x222>
    9170:	83 30       	cpi	r24, 0x03	; 3
    9172:	09 f0       	breq	.+2      	; 0x9176 <update_level_helper+0x1a4>
    9174:	5e c0       	rjmp	.+188    	; 0x9232 <update_level_helper+0x260>
				{
					case D_UP: shot->y -= FRAME_TIME * shot->speed; break;
					case D_RIGHT: shot->x += FRAME_TIME * shot->speed; break;
					case D_DOWN: shot->y += FRAME_TIME * shot->speed; break;
					case D_LEFT: shot->x -= FRAME_TIME * shot->speed; break;
    9176:	25 e6       	ldi	r18, 0x65	; 101
    9178:	38 e8       	ldi	r19, 0x88	; 136
    917a:	48 e8       	ldi	r20, 0x88	; 136
    917c:	5c e3       	ldi	r21, 0x3C	; 60
    917e:	f8 01       	movw	r30, r16
    9180:	65 85       	ldd	r22, Z+13	; 0x0d
    9182:	76 85       	ldd	r23, Z+14	; 0x0e
    9184:	87 85       	ldd	r24, Z+15	; 0x0f
    9186:	90 89       	ldd	r25, Z+16	; 0x10
    9188:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    918c:	9b 01       	movw	r18, r22
    918e:	ac 01       	movw	r20, r24
    9190:	f8 01       	movw	r30, r16
    9192:	62 81       	ldd	r22, Z+2	; 0x02
    9194:	73 81       	ldd	r23, Z+3	; 0x03
    9196:	84 81       	ldd	r24, Z+4	; 0x04
    9198:	95 81       	ldd	r25, Z+5	; 0x05
    919a:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    919e:	44 c0       	rjmp	.+136    	; 0x9228 <update_level_helper+0x256>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->direction)
				{
					case D_UP: shot->y -= FRAME_TIME * shot->speed; break;
    91a0:	25 e6       	ldi	r18, 0x65	; 101
    91a2:	38 e8       	ldi	r19, 0x88	; 136
    91a4:	48 e8       	ldi	r20, 0x88	; 136
    91a6:	5c e3       	ldi	r21, 0x3C	; 60
    91a8:	f8 01       	movw	r30, r16
    91aa:	65 85       	ldd	r22, Z+13	; 0x0d
    91ac:	76 85       	ldd	r23, Z+14	; 0x0e
    91ae:	87 85       	ldd	r24, Z+15	; 0x0f
    91b0:	90 89       	ldd	r25, Z+16	; 0x10
    91b2:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    91b6:	9b 01       	movw	r18, r22
    91b8:	ac 01       	movw	r20, r24
    91ba:	f8 01       	movw	r30, r16
    91bc:	66 81       	ldd	r22, Z+6	; 0x06
    91be:	77 81       	ldd	r23, Z+7	; 0x07
    91c0:	80 85       	ldd	r24, Z+8	; 0x08
    91c2:	91 85       	ldd	r25, Z+9	; 0x09
    91c4:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    91c8:	29 c0       	rjmp	.+82     	; 0x921c <update_level_helper+0x24a>
					case D_RIGHT: shot->x += FRAME_TIME * shot->speed; break;
    91ca:	25 e6       	ldi	r18, 0x65	; 101
    91cc:	38 e8       	ldi	r19, 0x88	; 136
    91ce:	48 e8       	ldi	r20, 0x88	; 136
    91d0:	5c e3       	ldi	r21, 0x3C	; 60
    91d2:	f8 01       	movw	r30, r16
    91d4:	65 85       	ldd	r22, Z+13	; 0x0d
    91d6:	76 85       	ldd	r23, Z+14	; 0x0e
    91d8:	87 85       	ldd	r24, Z+15	; 0x0f
    91da:	90 89       	ldd	r25, Z+16	; 0x10
    91dc:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    91e0:	9b 01       	movw	r18, r22
    91e2:	ac 01       	movw	r20, r24
    91e4:	f8 01       	movw	r30, r16
    91e6:	62 81       	ldd	r22, Z+2	; 0x02
    91e8:	73 81       	ldd	r23, Z+3	; 0x03
    91ea:	84 81       	ldd	r24, Z+4	; 0x04
    91ec:	95 81       	ldd	r25, Z+5	; 0x05
    91ee:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    91f2:	1a c0       	rjmp	.+52     	; 0x9228 <update_level_helper+0x256>
					case D_DOWN: shot->y += FRAME_TIME * shot->speed; break;
    91f4:	25 e6       	ldi	r18, 0x65	; 101
    91f6:	38 e8       	ldi	r19, 0x88	; 136
    91f8:	48 e8       	ldi	r20, 0x88	; 136
    91fa:	5c e3       	ldi	r21, 0x3C	; 60
    91fc:	f8 01       	movw	r30, r16
    91fe:	65 85       	ldd	r22, Z+13	; 0x0d
    9200:	76 85       	ldd	r23, Z+14	; 0x0e
    9202:	87 85       	ldd	r24, Z+15	; 0x0f
    9204:	90 89       	ldd	r25, Z+16	; 0x10
    9206:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    920a:	9b 01       	movw	r18, r22
    920c:	ac 01       	movw	r20, r24
    920e:	f8 01       	movw	r30, r16
    9210:	66 81       	ldd	r22, Z+6	; 0x06
    9212:	77 81       	ldd	r23, Z+7	; 0x07
    9214:	80 85       	ldd	r24, Z+8	; 0x08
    9216:	91 85       	ldd	r25, Z+9	; 0x09
    9218:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    921c:	f8 01       	movw	r30, r16
    921e:	66 83       	std	Z+6, r22	; 0x06
    9220:	77 83       	std	Z+7, r23	; 0x07
    9222:	80 87       	std	Z+8, r24	; 0x08
    9224:	91 87       	std	Z+9, r25	; 0x09
    9226:	05 c0       	rjmp	.+10     	; 0x9232 <update_level_helper+0x260>
					case D_LEFT: shot->x -= FRAME_TIME * shot->speed; break;
    9228:	f8 01       	movw	r30, r16
    922a:	62 83       	std	Z+2, r22	; 0x02
    922c:	73 83       	std	Z+3, r23	; 0x03
    922e:	84 83       	std	Z+4, r24	; 0x04
    9230:	95 83       	std	Z+5, r25	; 0x05
					default: break;
				}
				collision_detect_shot(player, shot);
    9232:	b8 01       	movw	r22, r16
    9234:	ce 01       	movw	r24, r28
    9236:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <collision_detect_shot>
    923a:	0b 5d       	subi	r16, 0xDB	; 219
    923c:	1f 4f       	sbci	r17, 0xFF	; 255
    923e:	f5 e2       	ldi	r31, 0x25	; 37
    9240:	ef 0e       	add	r14, r31
    9242:	f1 1c       	adc	r15, r1
				}
			}
		}

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
    9244:	0c 15       	cp	r16, r12
    9246:	1d 05       	cpc	r17, r13
    9248:	09 f0       	breq	.+2      	; 0x924c <update_level_helper+0x27a>
    924a:	84 cf       	rjmp	.-248    	; 0x9154 <update_level_helper+0x182>
    924c:	0e c0       	rjmp	.+28     	; 0x926a <update_level_helper+0x298>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    924e:	91 ff       	sbrs	r25, 1
    9250:	09 c0       	rjmp	.+18     	; 0x9264 <update_level_helper+0x292>
		{
			save_score();
    9252:	0e 94 08 42 	call	0x8410	; 0x8410 <save_score>
			fade_through();
    9256:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <fade_through>
			reset_game_state();
    925a:	0e 94 51 41 	call	0x82a2	; 0x82a2 <reset_game_state>
			game.current_screen = TANK_RANK;
    925e:	81 e0       	ldi	r24, 0x01	; 1
    9260:	80 93 76 0f 	sts	0x0F76, r24
		}
		level.render_all = 1;
    9264:	81 e0       	ldi	r24, 0x01	; 1
    9266:	80 93 3f 04 	sts	0x043F, r24
	}
}
    926a:	df 91       	pop	r29
    926c:	cf 91       	pop	r28
    926e:	1f 91       	pop	r17
    9270:	0f 91       	pop	r16
    9272:	ff 90       	pop	r15
    9274:	ef 90       	pop	r14
    9276:	df 90       	pop	r13
    9278:	cf 90       	pop	r12
    927a:	08 95       	ret

0000927c <collision_detect_player>:
		}
	}
}

void collision_detect_player(Player* player)
{
    927c:	4f 92       	push	r4
    927e:	5f 92       	push	r5
    9280:	6f 92       	push	r6
    9282:	7f 92       	push	r7
    9284:	8f 92       	push	r8
    9286:	9f 92       	push	r9
    9288:	af 92       	push	r10
    928a:	bf 92       	push	r11
    928c:	cf 92       	push	r12
    928e:	df 92       	push	r13
    9290:	ef 92       	push	r14
    9292:	ff 92       	push	r15
    9294:	0f 93       	push	r16
    9296:	1f 93       	push	r17
    9298:	cf 93       	push	r28
    929a:	df 93       	push	r29
    929c:	cd b7       	in	r28, 0x3d	; 61
    929e:	de b7       	in	r29, 0x3e	; 62
    92a0:	61 97       	sbiw	r28, 0x11	; 17
    92a2:	0f b6       	in	r0, 0x3f	; 63
    92a4:	f8 94       	cli
    92a6:	de bf       	out	0x3e, r29	; 62
    92a8:	0f be       	out	0x3f, r0	; 63
    92aa:	cd bf       	out	0x3d, r28	; 61
    92ac:	7c 01       	movw	r14, r24
	int tiles[8] = {0,0,0,0,0,0,0,0};
    92ae:	ce 01       	movw	r24, r28
    92b0:	01 96       	adiw	r24, 0x01	; 1
    92b2:	6c 01       	movw	r12, r24
    92b4:	80 e1       	ldi	r24, 0x10	; 16
    92b6:	f6 01       	movw	r30, r12
    92b8:	11 92       	st	Z+, r1
    92ba:	8a 95       	dec	r24
    92bc:	e9 f7       	brne	.-6      	; 0x92b8 <collision_detect_player+0x3c>
	u8 x = player->x / 8;
    92be:	f7 01       	movw	r30, r14
    92c0:	47 80       	ldd	r4, Z+7	; 0x07
    92c2:	50 84       	ldd	r5, Z+8	; 0x08
    92c4:	61 84       	ldd	r6, Z+9	; 0x09
    92c6:	72 84       	ldd	r7, Z+10	; 0x0a
	u8 y = player->y / 8 - 3;
    92c8:	83 84       	ldd	r8, Z+11	; 0x0b
    92ca:	94 84       	ldd	r9, Z+12	; 0x0c
    92cc:	a5 84       	ldd	r10, Z+13	; 0x0d
    92ce:	b6 84       	ldd	r11, Z+14	; 0x0e
    92d0:	20 e0       	ldi	r18, 0x00	; 0
    92d2:	30 e0       	ldi	r19, 0x00	; 0
    92d4:	40 e0       	ldi	r20, 0x00	; 0
    92d6:	5e e3       	ldi	r21, 0x3E	; 62
    92d8:	c5 01       	movw	r24, r10
    92da:	b4 01       	movw	r22, r8
    92dc:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    92e0:	20 e0       	ldi	r18, 0x00	; 0
    92e2:	30 e0       	ldi	r19, 0x00	; 0
    92e4:	40 e4       	ldi	r20, 0x40	; 64
    92e6:	50 e4       	ldi	r21, 0x40	; 64
    92e8:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <__subsf3>
    92ec:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>

	tiles[0] = (y * 30) + x;
    92f0:	fe e1       	ldi	r31, 0x1E	; 30
    92f2:	6f 9f       	mul	r22, r31
    92f4:	80 01       	movw	r16, r0
    92f6:	11 24       	eor	r1, r1
}

void collision_detect_player(Player* player)
{
	int tiles[8] = {0,0,0,0,0,0,0,0};
	u8 x = player->x / 8;
    92f8:	20 e0       	ldi	r18, 0x00	; 0
    92fa:	30 e0       	ldi	r19, 0x00	; 0
    92fc:	40 e0       	ldi	r20, 0x00	; 0
    92fe:	5e e3       	ldi	r21, 0x3E	; 62
    9300:	c3 01       	movw	r24, r6
    9302:	b2 01       	movw	r22, r4
    9304:	0e 94 b8 50 	call	0xa170	; 0xa170 <__mulsf3>
    9308:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
	u8 y = player->y / 8 - 3;

	tiles[0] = (y * 30) + x;
    930c:	06 0f       	add	r16, r22
    930e:	11 1d       	adc	r17, r1
    9310:	1a 83       	std	Y+2, r17	; 0x02
    9312:	09 83       	std	Y+1, r16	; 0x01
	tiles[1] = tiles[0]+2;
    9314:	c8 01       	movw	r24, r16
    9316:	02 96       	adiw	r24, 0x02	; 2
    9318:	9c 83       	std	Y+4, r25	; 0x04
    931a:	8b 83       	std	Y+3, r24	; 0x03
	tiles[2] = tiles[0] + 60;
    931c:	ca 96       	adiw	r24, 0x3a	; 58
    931e:	9e 83       	std	Y+6, r25	; 0x06
    9320:	8d 83       	std	Y+5, r24	; 0x05
	tiles[3] = tiles[1] + 60;
    9322:	02 96       	adiw	r24, 0x02	; 2
    9324:	98 87       	std	Y+8, r25	; 0x08
    9326:	8f 83       	std	Y+7, r24	; 0x07
	tiles[4] = tiles[0]+1;
    9328:	cd 97       	sbiw	r24, 0x3d	; 61
    932a:	9a 87       	std	Y+10, r25	; 0x0a
    932c:	89 87       	std	Y+9, r24	; 0x09
    tiles[5] = tiles[1]+30;
    932e:	4f 96       	adiw	r24, 0x1f	; 31
    9330:	9c 87       	std	Y+12, r25	; 0x0c
    9332:	8b 87       	std	Y+11, r24	; 0x0b
	tiles[6] = tiles[2]+1;
    9334:	4d 96       	adiw	r24, 0x1d	; 29
    9336:	9e 87       	std	Y+14, r25	; 0x0e
    9338:	8d 87       	std	Y+13, r24	; 0x0d
	tiles[7] = tiles[0]+30;
    933a:	02 5e       	subi	r16, 0xE2	; 226
    933c:	1f 4f       	sbci	r17, 0xFF	; 255
    933e:	18 8b       	std	Y+16, r17	; 0x10
    9340:	0f 87       	std	Y+15, r16	; 0x0f
	
	/* Level boundries first */
	if (player->x < 0  || player->x + 14 > 240 ||
    9342:	20 e0       	ldi	r18, 0x00	; 0
    9344:	30 e0       	ldi	r19, 0x00	; 0
    9346:	a9 01       	movw	r20, r18
    9348:	c3 01       	movw	r24, r6
    934a:	b2 01       	movw	r22, r4
    934c:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <__cmpsf2>
    9350:	87 fd       	sbrc	r24, 7
    9352:	2a c0       	rjmp	.+84     	; 0x93a8 <collision_detect_player+0x12c>
    9354:	20 e0       	ldi	r18, 0x00	; 0
    9356:	30 e0       	ldi	r19, 0x00	; 0
    9358:	40 e6       	ldi	r20, 0x60	; 96
    935a:	51 e4       	ldi	r21, 0x41	; 65
    935c:	c3 01       	movw	r24, r6
    935e:	b2 01       	movw	r22, r4
    9360:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    9364:	20 e0       	ldi	r18, 0x00	; 0
    9366:	30 e0       	ldi	r19, 0x00	; 0
    9368:	40 e7       	ldi	r20, 0x70	; 112
    936a:	53 e4       	ldi	r21, 0x43	; 67
    936c:	0e 94 b4 50 	call	0xa168	; 0xa168 <__gesf2>
    9370:	18 16       	cp	r1, r24
    9372:	d4 f0       	brlt	.+52     	; 0x93a8 <collision_detect_player+0x12c>
    9374:	20 e0       	ldi	r18, 0x00	; 0
    9376:	30 e0       	ldi	r19, 0x00	; 0
    9378:	40 ec       	ldi	r20, 0xC0	; 192
    937a:	51 e4       	ldi	r21, 0x41	; 65
    937c:	c5 01       	movw	r24, r10
    937e:	b4 01       	movw	r22, r8
    9380:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <__cmpsf2>
    9384:	87 fd       	sbrc	r24, 7
    9386:	10 c0       	rjmp	.+32     	; 0x93a8 <collision_detect_player+0x12c>
	    player->y < 24 || player->y + 14 > 224)
    9388:	20 e0       	ldi	r18, 0x00	; 0
    938a:	30 e0       	ldi	r19, 0x00	; 0
    938c:	40 e6       	ldi	r20, 0x60	; 96
    938e:	51 e4       	ldi	r21, 0x41	; 65
    9390:	c5 01       	movw	r24, r10
    9392:	b4 01       	movw	r22, r8
    9394:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <__addsf3>
    9398:	20 e0       	ldi	r18, 0x00	; 0
    939a:	30 e0       	ldi	r19, 0x00	; 0
    939c:	40 e6       	ldi	r20, 0x60	; 96
    939e:	53 e4       	ldi	r21, 0x43	; 67
    93a0:	0e 94 b4 50 	call	0xa168	; 0xa168 <__gesf2>
    93a4:	18 16       	cp	r1, r24
    93a6:	4c f4       	brge	.+18     	; 0x93ba <collision_detect_player+0x13e>
	{
		recoil_player(player);
    93a8:	c7 01       	movw	r24, r14
    93aa:	0e 94 93 44 	call	0x8926	; 0x8926 <recoil_player>
		player->speed = 0;
    93ae:	f7 01       	movw	r30, r14
    93b0:	16 8a       	std	Z+22, r1	; 0x16
    93b2:	17 8a       	std	Z+23, r1	; 0x17
    93b4:	10 8e       	std	Z+24, r1	; 0x18
    93b6:	11 8e       	std	Z+25, r1	; 0x19
    93b8:	30 c0       	rjmp	.+96     	; 0x941a <collision_detect_player+0x19e>
    93ba:	4e 01       	movw	r8, r28
    93bc:	f1 e1       	ldi	r31, 0x11	; 17
    93be:	8f 0e       	add	r8, r31
    93c0:	91 1c       	adc	r9, r1
	}

	/* Tile interaction */
	for (u8 i = 0; i < 8; i++)
	{
		if (solid_square_tile(tiles[i]) || solid_directional_tile(tiles[i], player->x, player->y, 7, 14))
    93c2:	f6 01       	movw	r30, r12
    93c4:	a1 90       	ld	r10, Z+
    93c6:	b1 90       	ld	r11, Z+
    93c8:	6f 01       	movw	r12, r30
    93ca:	c5 01       	movw	r24, r10
    93cc:	0e 94 57 45 	call	0x8aae	; 0x8aae <solid_square_tile>
    93d0:	81 11       	cpse	r24, r1
    93d2:	18 c0       	rjmp	.+48     	; 0x9404 <collision_detect_player+0x188>
    93d4:	f7 01       	movw	r30, r14
    93d6:	63 85       	ldd	r22, Z+11	; 0x0b
    93d8:	74 85       	ldd	r23, Z+12	; 0x0c
    93da:	85 85       	ldd	r24, Z+13	; 0x0d
    93dc:	96 85       	ldd	r25, Z+14	; 0x0e
    93de:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    93e2:	46 2f       	mov	r20, r22
    93e4:	f7 01       	movw	r30, r14
    93e6:	67 81       	ldd	r22, Z+7	; 0x07
    93e8:	70 85       	ldd	r23, Z+8	; 0x08
    93ea:	81 85       	ldd	r24, Z+9	; 0x09
    93ec:	92 85       	ldd	r25, Z+10	; 0x0a
    93ee:	49 8b       	std	Y+17, r20	; 0x11
    93f0:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <__fixunssfsi>
    93f4:	0e e0       	ldi	r16, 0x0E	; 14
    93f6:	27 e0       	ldi	r18, 0x07	; 7
    93f8:	49 89       	ldd	r20, Y+17	; 0x11
    93fa:	c5 01       	movw	r24, r10
    93fc:	0e 94 65 45 	call	0x8aca	; 0x8aca <solid_directional_tile>
    9400:	88 23       	and	r24, r24
    9402:	41 f0       	breq	.+16     	; 0x9414 <collision_detect_player+0x198>
		{
			recoil_player(player);
    9404:	c7 01       	movw	r24, r14
    9406:	0e 94 93 44 	call	0x8926	; 0x8926 <recoil_player>
			player->speed = 0;
    940a:	f7 01       	movw	r30, r14
    940c:	16 8a       	std	Z+22, r1	; 0x16
    940e:	17 8a       	std	Z+23, r1	; 0x17
    9410:	10 8e       	std	Z+24, r1	; 0x18
    9412:	11 8e       	std	Z+25, r1	; 0x19
		player->speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 8; i++)
    9414:	c8 14       	cp	r12, r8
    9416:	d9 04       	cpc	r13, r9
    9418:	a1 f6       	brne	.-88     	; 0x93c2 <collision_detect_player+0x146>
		{
			recoil_player(player);
			player->speed = 0;
		}
	}
}
    941a:	61 96       	adiw	r28, 0x11	; 17
    941c:	0f b6       	in	r0, 0x3f	; 63
    941e:	f8 94       	cli
    9420:	de bf       	out	0x3e, r29	; 62
    9422:	0f be       	out	0x3f, r0	; 63
    9424:	cd bf       	out	0x3d, r28	; 61
    9426:	df 91       	pop	r29
    9428:	cf 91       	pop	r28
    942a:	1f 91       	pop	r17
    942c:	0f 91       	pop	r16
    942e:	ff 90       	pop	r15
    9430:	ef 90       	pop	r14
    9432:	df 90       	pop	r13
    9434:	cf 90       	pop	r12
    9436:	bf 90       	pop	r11
    9438:	af 90       	pop	r10
    943a:	9f 90       	pop	r9
    943c:	8f 90       	pop	r8
    943e:	7f 90       	pop	r7
    9440:	6f 90       	pop	r6
    9442:	5f 90       	pop	r5
    9444:	4f 90       	pop	r4
    9446:	08 95       	ret

00009448 <update_level>:

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    9448:	4f 92       	push	r4
    944a:	5f 92       	push	r5
    944c:	6f 92       	push	r6
    944e:	7f 92       	push	r7
    9450:	9f 92       	push	r9
    9452:	af 92       	push	r10
    9454:	bf 92       	push	r11
    9456:	cf 92       	push	r12
    9458:	df 92       	push	r13
    945a:	ef 92       	push	r14
    945c:	ff 92       	push	r15
    945e:	0f 93       	push	r16
    9460:	1f 93       	push	r17
    9462:	cf 93       	push	r28
    9464:	df 93       	push	r29
    9466:	00 d0       	rcall	.+0      	; 0x9468 <update_level+0x20>
    9468:	cd b7       	in	r28, 0x3d	; 61
    946a:	de b7       	in	r29, 0x3e	; 62
    946c:	7c 01       	movw	r14, r24
    946e:	8b 01       	movw	r16, r22
	char p2_index = 0;
	char p1_shot_index = 0;
	char p2_shot_index = 0;

	// Render
	if (game.paused)
    9470:	80 91 79 0f 	lds	r24, 0x0F79
    9474:	88 23       	and	r24, r24
    9476:	b9 f0       	breq	.+46     	; 0x94a6 <update_level+0x5e>
	{
		DrawMap2(8, 12, (const char*) map_pause);
    9478:	45 e3       	ldi	r20, 0x35	; 53
    947a:	58 e2       	ldi	r21, 0x28	; 40
    947c:	6c e0       	ldi	r22, 0x0C	; 12
    947e:	88 e0       	ldi	r24, 0x08	; 8
    9480:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <DrawMap2>
		Print(12, 13, strPaused);
    9484:	4d e3       	ldi	r20, 0x3D	; 61
    9486:	59 e0       	ldi	r21, 0x09	; 9
    9488:	6d e0       	ldi	r22, 0x0D	; 13
    948a:	70 e0       	ldi	r23, 0x00	; 0
    948c:	8c e0       	ldi	r24, 0x0C	; 12
    948e:	90 e0       	ldi	r25, 0x00	; 0
    9490:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
		Print(11, 14, strExit);
    9494:	44 e4       	ldi	r20, 0x44	; 68
    9496:	59 e0       	ldi	r21, 0x09	; 9
    9498:	6e e0       	ldi	r22, 0x0E	; 14
    949a:	70 e0       	ldi	r23, 0x00	; 0
    949c:	8b e0       	ldi	r24, 0x0B	; 11
    949e:	90 e0       	ldi	r25, 0x00	; 0
    94a0:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
    94a4:	98 c0       	rjmp	.+304    	; 0x95d6 <update_level+0x18e>
	}
	else
	{
		p2_index = tank_map(&player1, p1_index);
    94a6:	60 e0       	ldi	r22, 0x00	; 0
    94a8:	83 ec       	ldi	r24, 0xC3	; 195
    94aa:	94 e0       	ldi	r25, 0x04	; 4
    94ac:	0e 94 97 43 	call	0x872e	; 0x872e <tank_map>
    94b0:	98 2e       	mov	r9, r24
		p1_shot_index = tank_map(&player2, p2_index);
    94b2:	68 2f       	mov	r22, r24
    94b4:	80 e4       	ldi	r24, 0x40	; 64
    94b6:	94 e0       	ldi	r25, 0x04	; 4
    94b8:	0e 94 97 43 	call	0x872e	; 0x872e <tank_map>
    94bc:	a8 2e       	mov	r10, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    94be:	68 2f       	mov	r22, r24
    94c0:	83 ec       	ldi	r24, 0xC3	; 195
    94c2:	94 e0       	ldi	r25, 0x04	; 4
    94c4:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <shot_map>
    94c8:	b8 2e       	mov	r11, r24
		shot_map(&player2, p2_shot_index);
    94ca:	68 2f       	mov	r22, r24
    94cc:	80 e4       	ldi	r24, 0x40	; 64
    94ce:	94 e0       	ldi	r25, 0x04	; 4
    94d0:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <shot_map>
		render_score(&player1, 0, 15);
    94d4:	4f e0       	ldi	r20, 0x0F	; 15
    94d6:	60 e0       	ldi	r22, 0x00	; 0
    94d8:	83 ec       	ldi	r24, 0xC3	; 195
    94da:	94 e0       	ldi	r25, 0x04	; 4
    94dc:	0e 94 dd 42 	call	0x85ba	; 0x85ba <render_score>
		render_score(&player2, 15, 0);
    94e0:	40 e0       	ldi	r20, 0x00	; 0
    94e2:	6f e0       	ldi	r22, 0x0F	; 15
    94e4:	80 e4       	ldi	r24, 0x40	; 64
    94e6:	94 e0       	ldi	r25, 0x04	; 4
    94e8:	0e 94 dd 42 	call	0x85ba	; 0x85ba <render_score>
		Print(14, 0, strVertSep);
    94ec:	41 e1       	ldi	r20, 0x11	; 17
    94ee:	5a e0       	ldi	r21, 0x0A	; 10
    94f0:	60 e0       	ldi	r22, 0x00	; 0
    94f2:	70 e0       	ldi	r23, 0x00	; 0
    94f4:	8e e0       	ldi	r24, 0x0E	; 14
    94f6:	90 e0       	ldi	r25, 0x00	; 0
    94f8:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
		Print(14, 1, strVertSep);
    94fc:	41 e1       	ldi	r20, 0x11	; 17
    94fe:	5a e0       	ldi	r21, 0x0A	; 10
    9500:	61 e0       	ldi	r22, 0x01	; 1
    9502:	70 e0       	ldi	r23, 0x00	; 0
    9504:	8e e0       	ldi	r24, 0x0E	; 14
    9506:	90 e0       	ldi	r25, 0x00	; 0
    9508:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
		Print(14, 2, strVertSep);
    950c:	41 e1       	ldi	r20, 0x11	; 17
    950e:	5a e0       	ldi	r21, 0x0A	; 10
    9510:	62 e0       	ldi	r22, 0x02	; 2
    9512:	70 e0       	ldi	r23, 0x00	; 0
    9514:	8e e0       	ldi	r24, 0x0E	; 14
    9516:	90 e0       	ldi	r25, 0x00	; 0
    9518:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>

		for(int i = first_index(); i < 30*25; inc_index(&i))
    951c:	0e 94 52 44 	call	0x88a4	; 0x88a4 <first_index>
    9520:	9a 83       	std	Y+2, r25	; 0x02
    9522:	89 83       	std	Y+1, r24	; 0x01
		{
			x = i % 30;
    9524:	8e e1       	ldi	r24, 0x1E	; 30
    9526:	c8 2e       	mov	r12, r24
    9528:	d1 2c       	mov	r13, r1
		render_score(&player2, 15, 0);
		Print(14, 0, strVertSep);
		Print(14, 1, strVertSep);
		Print(14, 2, strVertSep);

		for(int i = first_index(); i < 30*25; inc_index(&i))
    952a:	29 81       	ldd	r18, Y+1	; 0x01
    952c:	3a 81       	ldd	r19, Y+2	; 0x02
    952e:	2e 3e       	cpi	r18, 0xEE	; 238
    9530:	82 e0       	ldi	r24, 0x02	; 2
    9532:	38 07       	cpc	r19, r24
    9534:	d4 f5       	brge	.+116    	; 0x95aa <update_level+0x162>
		{
			x = i % 30;
    9536:	c9 01       	movw	r24, r18
    9538:	b6 01       	movw	r22, r12
    953a:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <__divmodhi4>
			y = 3 + i / 30;
    953e:	6d 5f       	subi	r22, 0xFD	; 253
			switch (level.level_map[i])
    9540:	f9 01       	movw	r30, r18
    9542:	ee 5b       	subi	r30, 0xBE	; 190
    9544:	fe 4f       	sbci	r31, 0xFE	; 254
    9546:	e1 81       	ldd	r30, Z+1	; 0x01
    9548:	4e 2e       	mov	r4, r30
    954a:	51 2c       	mov	r5, r1
    954c:	f2 01       	movw	r30, r4
    954e:	31 97       	sbiw	r30, 0x01	; 1
    9550:	e9 30       	cpi	r30, 0x09	; 9
    9552:	f1 05       	cpc	r31, r1
    9554:	08 f5       	brcc	.+66     	; 0x9598 <update_level+0x150>
    9556:	e8 5c       	subi	r30, 0xC8	; 200
    9558:	ff 4f       	sbci	r31, 0xFF	; 255
    955a:	0c 94 ff 4e 	jmp	0x9dfe	; 0x9dfe <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    955e:	42 e3       	ldi	r20, 0x32	; 50
    9560:	58 e2       	ldi	r21, 0x28	; 40
    9562:	02 c0       	rjmp	.+4      	; 0x9568 <update_level+0x120>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    9564:	4f e2       	ldi	r20, 0x2F	; 47
    9566:	58 e2       	ldi	r21, 0x28	; 40
    9568:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <DrawMap2>
    956c:	19 c0       	rjmp	.+50     	; 0x95a0 <update_level+0x158>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    956e:	4a e1       	ldi	r20, 0x1A	; 26
    9570:	58 e2       	ldi	r21, 0x28	; 40
    9572:	fa cf       	rjmp	.-12     	; 0x9568 <update_level+0x120>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    9574:	44 e1       	ldi	r20, 0x14	; 20
    9576:	58 e2       	ldi	r21, 0x28	; 40
    9578:	f7 cf       	rjmp	.-18     	; 0x9568 <update_level+0x120>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    957a:	41 e1       	ldi	r20, 0x11	; 17
    957c:	58 e2       	ldi	r21, 0x28	; 40
    957e:	f4 cf       	rjmp	.-24     	; 0x9568 <update_level+0x120>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    9580:	47 e1       	ldi	r20, 0x17	; 23
    9582:	58 e2       	ldi	r21, 0x28	; 40
    9584:	f1 cf       	rjmp	.-30     	; 0x9568 <update_level+0x120>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    9586:	4c e2       	ldi	r20, 0x2C	; 44
    9588:	58 e2       	ldi	r21, 0x28	; 40
    958a:	ee cf       	rjmp	.-36     	; 0x9568 <update_level+0x120>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    958c:	49 e2       	ldi	r20, 0x29	; 41
    958e:	58 e2       	ldi	r21, 0x28	; 40
    9590:	eb cf       	rjmp	.-42     	; 0x9568 <update_level+0x120>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    9592:	46 e2       	ldi	r20, 0x26	; 38
    9594:	58 e2       	ldi	r21, 0x28	; 40
    9596:	e8 cf       	rjmp	.-48     	; 0x9568 <update_level+0x120>
				default : SetTile(x, y, 0); break;
    9598:	40 e0       	ldi	r20, 0x00	; 0
    959a:	50 e0       	ldi	r21, 0x00	; 0
    959c:	0e 94 9a 30 	call	0x6134	; 0x6134 <SetTile>
		render_score(&player2, 15, 0);
		Print(14, 0, strVertSep);
		Print(14, 1, strVertSep);
		Print(14, 2, strVertSep);

		for(int i = first_index(); i < 30*25; inc_index(&i))
    95a0:	ce 01       	movw	r24, r28
    95a2:	01 96       	adiw	r24, 0x01	; 1
    95a4:	0e 94 68 44 	call	0x88d0	; 0x88d0 <inc_index>
    95a8:	c0 cf       	rjmp	.-128    	; 0x952a <update_level+0xe2>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
		level.render_all = 0;
    95aa:	10 92 3f 04 	sts	0x043F, r1
		render_player(&player1, p1_index);
    95ae:	60 e0       	ldi	r22, 0x00	; 0
    95b0:	83 ec       	ldi	r24, 0xC3	; 195
    95b2:	94 e0       	ldi	r25, 0x04	; 4
    95b4:	0e 94 3a 43 	call	0x8674	; 0x8674 <render_player>
		render_player(&player2, p2_index);
    95b8:	69 2d       	mov	r22, r9
    95ba:	80 e4       	ldi	r24, 0x40	; 64
    95bc:	94 e0       	ldi	r25, 0x04	; 4
    95be:	0e 94 3a 43 	call	0x8674	; 0x8674 <render_player>
		render_shot(&player1, p1_shot_index);
    95c2:	6a 2d       	mov	r22, r10
    95c4:	83 ec       	ldi	r24, 0xC3	; 195
    95c6:	94 e0       	ldi	r25, 0x04	; 4
    95c8:	0e 94 63 43 	call	0x86c6	; 0x86c6 <render_shot>
		render_shot(&player2, p2_shot_index);
    95cc:	6b 2d       	mov	r22, r11
    95ce:	80 e4       	ldi	r24, 0x40	; 64
    95d0:	94 e0       	ldi	r25, 0x04	; 4
    95d2:	0e 94 63 43 	call	0x86c6	; 0x86c6 <render_shot>
	}

	// Update
	update_level_helper(p1, &player1);
    95d6:	63 ec       	ldi	r22, 0xC3	; 195
    95d8:	74 e0       	ldi	r23, 0x04	; 4
    95da:	c7 01       	movw	r24, r14
    95dc:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <update_level_helper>
	update_level_helper(p2, &player2);
    95e0:	60 e4       	ldi	r22, 0x40	; 64
    95e2:	74 e0       	ldi	r23, 0x04	; 4
    95e4:	c8 01       	movw	r24, r16
    95e6:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <update_level_helper>
	collision_detect_player(&player1);
    95ea:	83 ec       	ldi	r24, 0xC3	; 195
    95ec:	94 e0       	ldi	r25, 0x04	; 4
    95ee:	0e 94 3e 49 	call	0x927c	; 0x927c <collision_detect_player>
	collision_detect_player(&player2);
    95f2:	80 e4       	ldi	r24, 0x40	; 64
    95f4:	94 e0       	ldi	r25, 0x04	; 4
    95f6:	0e 94 3e 49 	call	0x927c	; 0x927c <collision_detect_player>
}
    95fa:	0f 90       	pop	r0
    95fc:	0f 90       	pop	r0
    95fe:	df 91       	pop	r29
    9600:	cf 91       	pop	r28
    9602:	1f 91       	pop	r17
    9604:	0f 91       	pop	r16
    9606:	ff 90       	pop	r15
    9608:	ef 90       	pop	r14
    960a:	df 90       	pop	r13
    960c:	cf 90       	pop	r12
    960e:	bf 90       	pop	r11
    9610:	af 90       	pop	r10
    9612:	9f 90       	pop	r9
    9614:	7f 90       	pop	r7
    9616:	6f 90       	pop	r6
    9618:	5f 90       	pop	r5
    961a:	4f 90       	pop	r4
    961c:	08 95       	ret

0000961e <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    961e:	0f 93       	push	r16
    9620:	cf 93       	push	r28
    9622:	df 93       	push	r29
    9624:	ec 01       	movw	r28, r24
	clear_sprites();
    9626:	0e 94 fe 40 	call	0x81fc	; 0x81fc <clear_sprites>
	Print(7, 13, str1Player);
    962a:	46 e4       	ldi	r20, 0x46	; 70
    962c:	5a e0       	ldi	r21, 0x0A	; 10
    962e:	6d e0       	ldi	r22, 0x0D	; 13
    9630:	70 e0       	ldi	r23, 0x00	; 0
    9632:	87 e0       	ldi	r24, 0x07	; 7
    9634:	90 e0       	ldi	r25, 0x00	; 0
    9636:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	Print(7, 14, str2Player);
    963a:	45 e3       	ldi	r20, 0x35	; 53
    963c:	5a e0       	ldi	r21, 0x0A	; 10
    963e:	6e e0       	ldi	r22, 0x0E	; 14
    9640:	70 e0       	ldi	r23, 0x00	; 0
    9642:	87 e0       	ldi	r24, 0x07	; 7
    9644:	90 e0       	ldi	r25, 0x00	; 0
    9646:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	Print(7, 15, strHighscores);
    964a:	4b e2       	ldi	r20, 0x2B	; 43
    964c:	5a e0       	ldi	r21, 0x0A	; 10
    964e:	6f e0       	ldi	r22, 0x0F	; 15
    9650:	70 e0       	ldi	r23, 0x00	; 0
    9652:	87 e0       	ldi	r24, 0x07	; 7
    9654:	90 e0       	ldi	r25, 0x00	; 0
    9656:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	Print(4, 26, strCopyright);
    965a:	44 e5       	ldi	r20, 0x54	; 84
    965c:	5a e0       	ldi	r21, 0x0A	; 10
    965e:	6a e1       	ldi	r22, 0x1A	; 26
    9660:	70 e0       	ldi	r23, 0x00	; 0
    9662:	84 e0       	ldi	r24, 0x04	; 4
    9664:	90 e0       	ldi	r25, 0x00	; 0
    9666:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    966a:	43 e7       	ldi	r20, 0x73	; 115
    966c:	58 e2       	ldi	r21, 0x28	; 40
    966e:	65 e0       	ldi	r22, 0x05	; 5
    9670:	84 e0       	ldi	r24, 0x04	; 4
    9672:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <DrawMap2>
	MapSprite2(0, map_ball, 0);
    9676:	40 e0       	ldi	r20, 0x00	; 0
    9678:	63 ec       	ldi	r22, 0xC3	; 195
    967a:	77 e2       	ldi	r23, 0x27	; 39
    967c:	80 e0       	ldi	r24, 0x00	; 0
    967e:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>

	// Render
	switch (game.selection)
    9682:	90 91 7a 0f 	lds	r25, 0x0F7A
    9686:	91 30       	cpi	r25, 0x01	; 1
    9688:	41 f0       	breq	.+16     	; 0x969a <update_splash+0x7c>
    968a:	92 30       	cpi	r25, 0x02	; 2
    968c:	51 f0       	breq	.+20     	; 0x96a2 <update_splash+0x84>
    968e:	91 11       	cpse	r25, r1
    9690:	0f c0       	rjmp	.+30     	; 0x96b0 <update_splash+0x92>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    9692:	01 e0       	ldi	r16, 0x01	; 1
    9694:	21 e0       	ldi	r18, 0x01	; 1
    9696:	48 e6       	ldi	r20, 0x68	; 104
    9698:	07 c0       	rjmp	.+14     	; 0x96a8 <update_splash+0x8a>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    969a:	01 e0       	ldi	r16, 0x01	; 1
    969c:	21 e0       	ldi	r18, 0x01	; 1
    969e:	40 e7       	ldi	r20, 0x70	; 112
    96a0:	03 c0       	rjmp	.+6      	; 0x96a8 <update_splash+0x8a>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    96a2:	01 e0       	ldi	r16, 0x01	; 1
    96a4:	21 e0       	ldi	r18, 0x01	; 1
    96a6:	48 e7       	ldi	r20, 0x78	; 120
    96a8:	60 e3       	ldi	r22, 0x30	; 48
    96aa:	80 e0       	ldi	r24, 0x00	; 0
    96ac:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
			break;
	}
	Print(9, 21, strSelectHandle);
    96b0:	40 e0       	ldi	r20, 0x00	; 0
    96b2:	5a e0       	ldi	r21, 0x0A	; 10
    96b4:	65 e1       	ldi	r22, 0x15	; 21
    96b6:	70 e0       	ldi	r23, 0x00	; 0
    96b8:	89 e0       	ldi	r24, 0x09	; 9
    96ba:	90 e0       	ldi	r25, 0x00	; 0
    96bc:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>

	// Update
	if (p1->pressed & BTN_UP)
    96c0:	88 81       	ld	r24, Y
    96c2:	99 81       	ldd	r25, Y+1	; 0x01
    96c4:	84 ff       	sbrs	r24, 4
    96c6:	08 c0       	rjmp	.+16     	; 0x96d8 <update_splash+0xba>
	{
		game.selection--;
    96c8:	80 91 7a 0f 	lds	r24, 0x0F7A
    96cc:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    96ce:	87 ff       	sbrs	r24, 7
    96d0:	0b c0       	rjmp	.+22     	; 0x96e8 <update_splash+0xca>
    96d2:	10 92 7a 0f 	sts	0x0F7A, r1
    96d6:	28 c0       	rjmp	.+80     	; 0x9728 <update_splash+0x10a>
	}
	else if (p1->pressed & BTN_DOWN)
    96d8:	85 ff       	sbrs	r24, 5
    96da:	09 c0       	rjmp	.+18     	; 0x96ee <update_splash+0xd0>
	{
		game.selection++;
    96dc:	80 91 7a 0f 	lds	r24, 0x0F7A
    96e0:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    96e2:	83 30       	cpi	r24, 0x03	; 3
    96e4:	0c f0       	brlt	.+2      	; 0x96e8 <update_splash+0xca>
    96e6:	82 e0       	ldi	r24, 0x02	; 2
    96e8:	80 93 7a 0f 	sts	0x0F7A, r24
    96ec:	1d c0       	rjmp	.+58     	; 0x9728 <update_splash+0x10a>
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    96ee:	90 ff       	sbrs	r25, 0
    96f0:	1b c0       	rjmp	.+54     	; 0x9728 <update_splash+0x10a>
    96f2:	80 91 7a 0f 	lds	r24, 0x0F7A
    96f6:	82 30       	cpi	r24, 0x02	; 2
    96f8:	60 f4       	brcc	.+24     	; 0x9712 <update_splash+0xf4>
	{
		p1s.select_state = SELECTING;
    96fa:	10 92 75 0f 	sts	0x0F75, r1
		p2s.select_state = SELECTING;
    96fe:	10 92 6f 0f 	sts	0x0F6F, r1
		fade_through();
    9702:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <fade_through>
		load_eeprom(&handles);
    9706:	82 e2       	ldi	r24, 0x22	; 34
    9708:	91 e0       	ldi	r25, 0x01	; 1
    970a:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <load_eeprom>
		game.current_screen = HANDLE_SELECT;
    970e:	82 e0       	ldi	r24, 0x02	; 2
    9710:	09 c0       	rjmp	.+18     	; 0x9724 <update_splash+0x106>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    9712:	82 30       	cpi	r24, 0x02	; 2
    9714:	49 f4       	brne	.+18     	; 0x9728 <update_splash+0x10a>
	{
		fade_through();
    9716:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <fade_through>
		load_eeprom(&scores);
    971a:	82 e0       	ldi	r24, 0x02	; 2
    971c:	91 e0       	ldi	r25, 0x01	; 1
    971e:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <load_eeprom>
		game.current_screen = TANK_RANK;
    9722:	81 e0       	ldi	r24, 0x01	; 1
    9724:	80 93 76 0f 	sts	0x0F76, r24
		return;
	}
}
    9728:	df 91       	pop	r29
    972a:	cf 91       	pop	r28
    972c:	0f 91       	pop	r16
    972e:	08 95       	ret

00009730 <update_tank_rank>:

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    9730:	cf 92       	push	r12
    9732:	df 92       	push	r13
    9734:	ef 92       	push	r14
    9736:	ff 92       	push	r15
    9738:	0f 93       	push	r16
    973a:	1f 93       	push	r17
    973c:	cf 93       	push	r28
    973e:	df 93       	push	r29
    9740:	1f 92       	push	r1
    9742:	cd b7       	in	r28, 0x3d	; 61
    9744:	de b7       	in	r29, 0x3e	; 62
    9746:	7c 01       	movw	r14, r24
	u8 y = 7;
	u8 rank = 1;

	// Render
	clear_sprites();
    9748:	0e 94 fe 40 	call	0x81fc	; 0x81fc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    974c:	40 e0       	ldi	r20, 0x00	; 0
    974e:	62 e0       	ldi	r22, 0x02	; 2
    9750:	78 e2       	ldi	r23, 0x28	; 40
    9752:	80 e0       	ldi	r24, 0x00	; 0
    9754:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    9758:	40 e0       	ldi	r20, 0x00	; 0
    975a:	6a ee       	ldi	r22, 0xEA	; 234
    975c:	77 e2       	ldi	r23, 0x27	; 39
    975e:	84 e0       	ldi	r24, 0x04	; 4
    9760:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    9764:	02 e0       	ldi	r16, 0x02	; 2
    9766:	22 e0       	ldi	r18, 0x02	; 2
    9768:	48 e0       	ldi	r20, 0x08	; 8
    976a:	68 e3       	ldi	r22, 0x38	; 56
    976c:	80 e0       	ldi	r24, 0x00	; 0
    976e:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    9772:	22 e0       	ldi	r18, 0x02	; 2
    9774:	48 e0       	ldi	r20, 0x08	; 8
    9776:	60 ea       	ldi	r22, 0xA0	; 160
    9778:	84 e0       	ldi	r24, 0x04	; 4
    977a:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
	Print(10, 2, strHighscores);
    977e:	4b e2       	ldi	r20, 0x2B	; 43
    9780:	5a e0       	ldi	r21, 0x0A	; 10
    9782:	62 e0       	ldi	r22, 0x02	; 2
    9784:	70 e0       	ldi	r23, 0x00	; 0
    9786:	8a e0       	ldi	r24, 0x0A	; 10
    9788:	90 e0       	ldi	r25, 0x00	; 0
    978a:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
    978e:	07 e0       	ldi	r16, 0x07	; 7
    9790:	11 e0       	ldi	r17, 0x01	; 1
    9792:	87 e0       	ldi	r24, 0x07	; 7
    9794:	c8 2e       	mov	r12, r24
    9796:	d1 2c       	mov	r13, r1
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	u8 y = 7;
	u8 rank = 1;
    9798:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    979a:	20 e0       	ldi	r18, 0x00	; 0
    979c:	43 2f       	mov	r20, r19
    979e:	b6 01       	movw	r22, r12
    97a0:	82 e0       	ldi	r24, 0x02	; 2
    97a2:	90 e0       	ldi	r25, 0x00	; 0
    97a4:	39 83       	std	Y+1, r19	; 0x01
    97a6:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <PrintByte>
		PrintChar(3, y, '.');
    97aa:	4e e2       	ldi	r20, 0x2E	; 46
    97ac:	b6 01       	movw	r22, r12
    97ae:	83 e0       	ldi	r24, 0x03	; 3
    97b0:	90 e0       	ldi	r25, 0x00	; 0
    97b2:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <PrintChar>
    97b6:	f8 01       	movw	r30, r16
    97b8:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    97ba:	80 81       	ld	r24, Z
    97bc:	93 e0       	ldi	r25, 0x03	; 3
    97be:	89 9f       	mul	r24, r25
    97c0:	a0 01       	movw	r20, r0
    97c2:	11 24       	eor	r1, r1
    97c4:	4c 5d       	subi	r20, 0xDC	; 220
    97c6:	5e 4f       	sbci	r21, 0xFE	; 254
    97c8:	23 e0       	ldi	r18, 0x03	; 3
    97ca:	6c 2d       	mov	r22, r12
    97cc:	85 e0       	ldi	r24, 0x05	; 5
    97ce:	0e 94 92 3f 	call	0x7f24	; 0x7f24 <LBPrintStr>
		Print(9, y, strOwns);
    97d2:	45 ed       	ldi	r20, 0xD5	; 213
    97d4:	59 e0       	ldi	r21, 0x09	; 9
    97d6:	b6 01       	movw	r22, r12
    97d8:	89 e0       	ldi	r24, 0x09	; 9
    97da:	90 e0       	ldi	r25, 0x00	; 0
    97dc:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
    97e0:	f8 01       	movw	r30, r16
    97e2:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    97e4:	90 81       	ld	r25, Z
    97e6:	e3 e0       	ldi	r30, 0x03	; 3
    97e8:	9e 9f       	mul	r25, r30
    97ea:	a0 01       	movw	r20, r0
    97ec:	11 24       	eor	r1, r1
    97ee:	4c 5d       	subi	r20, 0xDC	; 220
    97f0:	5e 4f       	sbci	r21, 0xFE	; 254
    97f2:	23 e0       	ldi	r18, 0x03	; 3
    97f4:	6c 2d       	mov	r22, r12
    97f6:	8e e0       	ldi	r24, 0x0E	; 14
    97f8:	0e 94 92 3f 	call	0x7f24	; 0x7f24 <LBPrintStr>
		Print(18, y, strBy);
    97fc:	42 ed       	ldi	r20, 0xD2	; 210
    97fe:	59 e0       	ldi	r21, 0x09	; 9
    9800:	b6 01       	movw	r22, r12
    9802:	82 e1       	ldi	r24, 0x12	; 18
    9804:	90 e0       	ldi	r25, 0x00	; 0
    9806:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
    980a:	f8 01       	movw	r30, r16
    980c:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    980e:	21 e0       	ldi	r18, 0x01	; 1
    9810:	40 81       	ld	r20, Z
    9812:	b6 01       	movw	r22, r12
    9814:	87 e1       	ldi	r24, 0x17	; 23
    9816:	90 e0       	ldi	r25, 0x00	; 0
    9818:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <PrintByte>
		PrintChar(24, y, '-');
    981c:	4d e2       	ldi	r20, 0x2D	; 45
    981e:	b6 01       	movw	r22, r12
    9820:	88 e1       	ldi	r24, 0x18	; 24
    9822:	90 e0       	ldi	r25, 0x00	; 0
    9824:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    9828:	21 e0       	ldi	r18, 0x01	; 1
    982a:	f8 01       	movw	r30, r16
    982c:	40 81       	ld	r20, Z
    982e:	b6 01       	movw	r22, r12
    9830:	8b e1       	ldi	r24, 0x1B	; 27
    9832:	90 e0       	ldi	r25, 0x00	; 0
    9834:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <PrintByte>
		y += 3;
		rank += 1;
    9838:	39 81       	ldd	r19, Y+1	; 0x01
    983a:	3f 5f       	subi	r19, 0xFF	; 255
    983c:	f3 e0       	ldi	r31, 0x03	; 3
    983e:	cf 0e       	add	r12, r31
    9840:	d1 1c       	adc	r13, r1
    9842:	0c 5f       	subi	r16, 0xFC	; 252
    9844:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    9846:	36 30       	cpi	r19, 0x06	; 6
    9848:	09 f0       	breq	.+2      	; 0x984c <update_tank_rank+0x11c>
    984a:	a7 cf       	rjmp	.-178    	; 0x979a <update_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    984c:	49 ee       	ldi	r20, 0xE9	; 233
    984e:	59 e0       	ldi	r21, 0x09	; 9
    9850:	67 e1       	ldi	r22, 0x17	; 23
    9852:	70 e0       	ldi	r23, 0x00	; 0
    9854:	8a e0       	ldi	r24, 0x0A	; 10
    9856:	90 e0       	ldi	r25, 0x00	; 0
    9858:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>

	// Update
	if (p1->pressed & BTN_X)
    985c:	f7 01       	movw	r30, r14
    985e:	80 81       	ld	r24, Z
    9860:	91 81       	ldd	r25, Z+1	; 0x01
    9862:	91 ff       	sbrs	r25, 1
    9864:	04 c0       	rjmp	.+8      	; 0x986e <update_tank_rank+0x13e>
	{
		fade_through();
    9866:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <fade_through>
		game.current_screen = SPLASH;
    986a:	10 92 76 0f 	sts	0x0F76, r1
	}
}
    986e:	0f 90       	pop	r0
    9870:	df 91       	pop	r29
    9872:	cf 91       	pop	r28
    9874:	1f 91       	pop	r17
    9876:	0f 91       	pop	r16
    9878:	ff 90       	pop	r15
    987a:	ef 90       	pop	r14
    987c:	df 90       	pop	r13
    987e:	cf 90       	pop	r12
    9880:	08 95       	ret

00009882 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    9882:	0f 93       	push	r16
    9884:	1f 93       	push	r17
    9886:	cf 93       	push	r28
    9888:	df 93       	push	r29
    988a:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    988c:	fb 01       	movw	r30, r22
    988e:	80 81       	ld	r24, Z
    9890:	91 81       	ldd	r25, Z+1	; 0x01
    9892:	fc 01       	movw	r30, r24
    9894:	e0 71       	andi	r30, 0x10	; 16
    9896:	ff 27       	eor	r31, r31
    9898:	84 ff       	sbrs	r24, 4
    989a:	09 c0       	rjmp	.+18     	; 0x98ae <_handle_select_helper+0x2c>
    989c:	2d 81       	ldd	r18, Y+5	; 0x05
    989e:	21 11       	cpse	r18, r1
    98a0:	06 c0       	rjmp	.+12     	; 0x98ae <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    98a2:	88 81       	ld	r24, Y
    98a4:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    98a6:	87 ff       	sbrs	r24, 7
    98a8:	0f c0       	rjmp	.+30     	; 0x98c8 <_handle_select_helper+0x46>
    98aa:	18 82       	st	Y, r1
    98ac:	90 c0       	rjmp	.+288    	; 0x99ce <_handle_select_helper+0x14c>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    98ae:	9c 01       	movw	r18, r24
    98b0:	20 72       	andi	r18, 0x20	; 32
    98b2:	33 27       	eor	r19, r19
    98b4:	85 ff       	sbrs	r24, 5
    98b6:	0a c0       	rjmp	.+20     	; 0x98cc <_handle_select_helper+0x4a>
    98b8:	6d 81       	ldd	r22, Y+5	; 0x05
    98ba:	61 11       	cpse	r22, r1
    98bc:	07 c0       	rjmp	.+14     	; 0x98cc <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    98be:	88 81       	ld	r24, Y
    98c0:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    98c2:	89 30       	cpi	r24, 0x09	; 9
    98c4:	0c f0       	brlt	.+2      	; 0x98c8 <_handle_select_helper+0x46>
    98c6:	88 e0       	ldi	r24, 0x08	; 8
    98c8:	88 83       	st	Y, r24
    98ca:	81 c0       	rjmp	.+258    	; 0x99ce <_handle_select_helper+0x14c>
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    98cc:	bc 01       	movw	r22, r24
    98ce:	66 27       	eor	r22, r22
    98d0:	71 70       	andi	r23, 0x01	; 1
    98d2:	90 ff       	sbrs	r25, 0
    98d4:	14 c0       	rjmp	.+40     	; 0x98fe <_handle_select_helper+0x7c>
    98d6:	ad 81       	ldd	r26, Y+5	; 0x05
    98d8:	a1 11       	cpse	r26, r1
    98da:	11 c0       	rjmp	.+34     	; 0x98fe <_handle_select_helper+0x7c>
	{
		ps->select_state = EDITING;
    98dc:	81 e0       	ldi	r24, 0x01	; 1
    98de:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    98e0:	69 91       	ld	r22, Y+
    98e2:	f3 e0       	ldi	r31, 0x03	; 3
    98e4:	6f 02       	muls	r22, r31
    98e6:	b0 01       	movw	r22, r0
    98e8:	11 24       	eor	r1, r1
    98ea:	6c 5d       	subi	r22, 0xDC	; 220
    98ec:	7e 4f       	sbci	r23, 0xFE	; 254
    98ee:	43 e0       	ldi	r20, 0x03	; 3
    98f0:	ce 01       	movw	r24, r28
	else if ((p->pressed & BTN_X))
	{
		fade_through();
		game.current_screen = SPLASH;
	}
}
    98f2:	df 91       	pop	r29
    98f4:	cf 91       	pop	r28
    98f6:	1f 91       	pop	r17
    98f8:	0f 91       	pop	r16
		if (ps->handle_id > 8) ps->handle_id = 8;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    98fa:	0c 94 86 3f 	jmp	0x7f0c	; 0x7f0c <LBCopyChars>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    98fe:	87 ff       	sbrs	r24, 7
    9900:	0a c0       	rjmp	.+20     	; 0x9916 <_handle_select_helper+0x94>
    9902:	ad 81       	ldd	r26, Y+5	; 0x05
    9904:	a1 30       	cpi	r26, 0x01	; 1
    9906:	39 f4       	brne	.+14     	; 0x9916 <_handle_select_helper+0x94>
	{
		ps->char_index++;
    9908:	8c 81       	ldd	r24, Y+4	; 0x04
    990a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    990c:	83 30       	cpi	r24, 0x03	; 3
    990e:	0c f0       	brlt	.+2      	; 0x9912 <_handle_select_helper+0x90>
    9910:	82 e0       	ldi	r24, 0x02	; 2
    9912:	8c 83       	std	Y+4, r24	; 0x04
    9914:	5c c0       	rjmp	.+184    	; 0x99ce <_handle_select_helper+0x14c>
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    9916:	86 ff       	sbrs	r24, 6
    9918:	09 c0       	rjmp	.+18     	; 0x992c <_handle_select_helper+0xaa>
    991a:	ed 81       	ldd	r30, Y+5	; 0x05
    991c:	e1 30       	cpi	r30, 0x01	; 1
    991e:	29 f5       	brne	.+74     	; 0x996a <_handle_select_helper+0xe8>
	{
		ps->char_index--;
    9920:	8c 81       	ldd	r24, Y+4	; 0x04
    9922:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    9924:	87 ff       	sbrs	r24, 7
    9926:	f5 cf       	rjmp	.-22     	; 0x9912 <_handle_select_helper+0x90>
    9928:	1c 82       	std	Y+4, r1	; 0x04
    992a:	51 c0       	rjmp	.+162    	; 0x99ce <_handle_select_helper+0x14c>
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    992c:	ef 2b       	or	r30, r31
    992e:	61 f0       	breq	.+24     	; 0x9948 <_handle_select_helper+0xc6>
    9930:	2d 81       	ldd	r18, Y+5	; 0x05
    9932:	21 30       	cpi	r18, 0x01	; 1
    9934:	e1 f5       	brne	.+120    	; 0x99ae <_handle_select_helper+0x12c>
	{
		ps->handle[(u8) ps->char_index]--;
    9936:	8c 81       	ldd	r24, Y+4	; 0x04
    9938:	c8 0f       	add	r28, r24
    993a:	d1 1d       	adc	r29, r1
    993c:	99 81       	ldd	r25, Y+1	; 0x01
    993e:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    9940:	91 34       	cpi	r25, 0x41	; 65
    9942:	70 f4       	brcc	.+28     	; 0x9960 <_handle_select_helper+0xde>
    9944:	81 e4       	ldi	r24, 0x41	; 65
    9946:	0f c0       	rjmp	.+30     	; 0x9966 <_handle_select_helper+0xe4>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    9948:	23 2b       	or	r18, r19
    994a:	89 f0       	breq	.+34     	; 0x996e <_handle_select_helper+0xec>
    994c:	2d 81       	ldd	r18, Y+5	; 0x05
    994e:	21 30       	cpi	r18, 0x01	; 1
    9950:	71 f5       	brne	.+92     	; 0x99ae <_handle_select_helper+0x12c>
	{
		ps->handle[(u8) ps->char_index]++;
    9952:	8c 81       	ldd	r24, Y+4	; 0x04
    9954:	c8 0f       	add	r28, r24
    9956:	d1 1d       	adc	r29, r1
    9958:	99 81       	ldd	r25, Y+1	; 0x01
    995a:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    995c:	9b 35       	cpi	r25, 0x5B	; 91
    995e:	10 f4       	brcc	.+4      	; 0x9964 <_handle_select_helper+0xe2>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    9960:	99 83       	std	Y+1, r25	; 0x01
    9962:	35 c0       	rjmp	.+106    	; 0x99ce <_handle_select_helper+0x14c>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    9964:	8a e5       	ldi	r24, 0x5A	; 90
    9966:	89 83       	std	Y+1, r24	; 0x01
    9968:	32 c0       	rjmp	.+100    	; 0x99ce <_handle_select_helper+0x14c>
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    996a:	23 2b       	or	r18, r19
    996c:	01 f5       	brne	.+64     	; 0x99ae <_handle_select_helper+0x12c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    996e:	67 2b       	or	r22, r23
    9970:	f1 f0       	breq	.+60     	; 0x99ae <_handle_select_helper+0x12c>
    9972:	2d 81       	ldd	r18, Y+5	; 0x05
    9974:	21 30       	cpi	r18, 0x01	; 1
    9976:	d9 f4       	brne	.+54     	; 0x99ae <_handle_select_helper+0x12c>
	{
		player->handle_id = ps->handle_id;
    9978:	fe 01       	movw	r30, r28
    997a:	21 91       	ld	r18, Z+
    997c:	8f 01       	movw	r16, r30
    997e:	fa 01       	movw	r30, r20
    9980:	21 93       	st	Z+, r18
    9982:	cf 01       	movw	r24, r30
		LBCopyChars(player->handle, ps->handle, 3);
    9984:	43 e0       	ldi	r20, 0x03	; 3
    9986:	b8 01       	movw	r22, r16
    9988:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    998c:	88 81       	ld	r24, Y
    998e:	f3 e0       	ldi	r31, 0x03	; 3
    9990:	8f 02       	muls	r24, r31
    9992:	c0 01       	movw	r24, r0
    9994:	11 24       	eor	r1, r1
    9996:	43 e0       	ldi	r20, 0x03	; 3
    9998:	b8 01       	movw	r22, r16
    999a:	8c 5d       	subi	r24, 0xDC	; 220
    999c:	9e 4f       	sbci	r25, 0xFE	; 254
    999e:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    99a2:	82 e2       	ldi	r24, 0x22	; 34
    99a4:	91 e0       	ldi	r25, 0x01	; 1
    99a6:	0e 94 63 31 	call	0x62c6	; 0x62c6 <EepromWriteBlock>
	{
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    99aa:	82 e0       	ldi	r24, 0x02	; 2
    99ac:	0a c0       	rjmp	.+20     	; 0x99c2 <_handle_select_helper+0x140>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    99ae:	91 ff       	sbrs	r25, 1
    99b0:	0e c0       	rjmp	.+28     	; 0x99ce <_handle_select_helper+0x14c>
    99b2:	8d 81       	ldd	r24, Y+5	; 0x05
    99b4:	81 30       	cpi	r24, 0x01	; 1
    99b6:	11 f4       	brne	.+4      	; 0x99bc <_handle_select_helper+0x13a>
	{
		ps->select_state = SELECTING;
    99b8:	1d 82       	std	Y+5, r1	; 0x05
    99ba:	09 c0       	rjmp	.+18     	; 0x99ce <_handle_select_helper+0x14c>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    99bc:	82 30       	cpi	r24, 0x02	; 2
    99be:	19 f4       	brne	.+6      	; 0x99c6 <_handle_select_helper+0x144>
		{
			ps->select_state = EDITING;
    99c0:	81 e0       	ldi	r24, 0x01	; 1
    99c2:	8d 83       	std	Y+5, r24	; 0x05
    99c4:	04 c0       	rjmp	.+8      	; 0x99ce <_handle_select_helper+0x14c>
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
    99c6:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <fade_through>
		game.current_screen = SPLASH;
    99ca:	10 92 76 0f 	sts	0x0F76, r1
	}
}
    99ce:	df 91       	pop	r29
    99d0:	cf 91       	pop	r28
    99d2:	1f 91       	pop	r17
    99d4:	0f 91       	pop	r16
    99d6:	08 95       	ret

000099d8 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    99d8:	af 92       	push	r10
    99da:	bf 92       	push	r11
    99dc:	cf 92       	push	r12
    99de:	df 92       	push	r13
    99e0:	ef 92       	push	r14
    99e2:	ff 92       	push	r15
    99e4:	0f 93       	push	r16
    99e6:	1f 93       	push	r17
    99e8:	cf 93       	push	r28
    99ea:	df 93       	push	r29
    99ec:	00 d0       	rcall	.+0      	; 0x99ee <_handle_select_render_helper+0x16>
    99ee:	1f 92       	push	r1
    99f0:	cd b7       	in	r28, 0x3d	; 61
    99f2:	de b7       	in	r29, 0x3e	; 62
    99f4:	7c 01       	movw	r14, r24
    99f6:	14 2f       	mov	r17, r20
    99f8:	b2 2e       	mov	r11, r18
	u8 tmp[3] = {' ', ' ', ' '};
    99fa:	80 e2       	ldi	r24, 0x20	; 32
    99fc:	89 83       	std	Y+1, r24	; 0x01
    99fe:	8a 83       	std	Y+2, r24	; 0x02
    9a00:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    9a02:	f7 01       	movw	r30, r14
    9a04:	85 81       	ldd	r24, Z+5	; 0x05
    9a06:	81 11       	cpse	r24, r1
    9a08:	16 c0       	rjmp	.+44     	; 0x9a36 <_handle_select_render_helper+0x5e>
	{
		MapSprite2(idx, map_ball, 0);
    9a0a:	40 e0       	ldi	r20, 0x00	; 0
    9a0c:	63 ec       	ldi	r22, 0xC3	; 195
    9a0e:	77 e2       	ldi	r23, 0x27	; 39
    9a10:	82 2f       	mov	r24, r18
    9a12:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    9a16:	f7 01       	movw	r30, r14
    9a18:	40 81       	ld	r20, Z
    9a1a:	44 0f       	add	r20, r20
    9a1c:	44 0f       	add	r20, r20
    9a1e:	44 0f       	add	r20, r20
    9a20:	40 5c       	subi	r20, 0xC0	; 192
    9a22:	01 e0       	ldi	r16, 0x01	; 1
    9a24:	21 e0       	ldi	r18, 0x01	; 1
    9a26:	61 2f       	mov	r22, r17
    9a28:	66 0f       	add	r22, r22
    9a2a:	66 0f       	add	r22, r22
    9a2c:	66 0f       	add	r22, r22
    9a2e:	8b 2d       	mov	r24, r11
    9a30:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
    9a34:	62 c0       	rjmp	.+196    	; 0x9afa <_handle_select_render_helper+0x122>
	}
	else if (ps->select_state == EDITING)
    9a36:	81 30       	cpi	r24, 0x01	; 1
    9a38:	09 f0       	breq	.+2      	; 0x9a3c <_handle_select_render_helper+0x64>
    9a3a:	44 c0       	rjmp	.+136    	; 0x9ac4 <_handle_select_render_helper+0xec>
	{
		MapSprite2(idx, map_ball, 0);
    9a3c:	40 e0       	ldi	r20, 0x00	; 0
    9a3e:	63 ec       	ldi	r22, 0xC3	; 195
    9a40:	77 e2       	ldi	r23, 0x27	; 39
    9a42:	82 2f       	mov	r24, r18
    9a44:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
		MapSprite2(idx+1, map_ball, 0);
    9a48:	aa 24       	eor	r10, r10
    9a4a:	a3 94       	inc	r10
    9a4c:	ab 0c       	add	r10, r11
    9a4e:	40 e0       	ldi	r20, 0x00	; 0
    9a50:	63 ec       	ldi	r22, 0xC3	; 195
    9a52:	77 e2       	ldi	r23, 0x27	; 39
    9a54:	8a 2d       	mov	r24, r10
    9a56:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    9a5a:	c1 2e       	mov	r12, r17
    9a5c:	d1 2c       	mov	r13, r1
    9a5e:	f5 e0       	ldi	r31, 0x05	; 5
    9a60:	cf 0e       	add	r12, r31
    9a62:	d1 1c       	adc	r13, r1
    9a64:	f7 01       	movw	r30, r14
    9a66:	40 81       	ld	r20, Z
    9a68:	44 0f       	add	r20, r20
    9a6a:	44 0f       	add	r20, r20
    9a6c:	44 0f       	add	r20, r20
    9a6e:	48 5c       	subi	r20, 0xC8	; 200
    9a70:	84 81       	ldd	r24, Z+4	; 0x04
    9a72:	b6 01       	movw	r22, r12
    9a74:	68 0f       	add	r22, r24
    9a76:	71 1d       	adc	r23, r1
    9a78:	87 fd       	sbrc	r24, 7
    9a7a:	7a 95       	dec	r23
    9a7c:	66 0f       	add	r22, r22
    9a7e:	66 0f       	add	r22, r22
    9a80:	66 0f       	add	r22, r22
    9a82:	01 e0       	ldi	r16, 0x01	; 1
    9a84:	21 e0       	ldi	r18, 0x01	; 1
    9a86:	8b 2d       	mov	r24, r11
    9a88:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    9a8c:	f7 01       	movw	r30, r14
    9a8e:	40 81       	ld	r20, Z
    9a90:	44 0f       	add	r20, r20
    9a92:	44 0f       	add	r20, r20
    9a94:	44 0f       	add	r20, r20
    9a96:	48 5b       	subi	r20, 0xB8	; 184
    9a98:	84 81       	ldd	r24, Z+4	; 0x04
    9a9a:	c8 0e       	add	r12, r24
    9a9c:	d1 1c       	adc	r13, r1
    9a9e:	87 fd       	sbrc	r24, 7
    9aa0:	da 94       	dec	r13
    9aa2:	6c 2d       	mov	r22, r12
    9aa4:	66 0f       	add	r22, r22
    9aa6:	66 0f       	add	r22, r22
    9aa8:	66 0f       	add	r22, r22
    9aaa:	21 e0       	ldi	r18, 0x01	; 1
    9aac:	8a 2d       	mov	r24, r10
    9aae:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    9ab2:	43 e0       	ldi	r20, 0x03	; 3
    9ab4:	b7 01       	movw	r22, r14
    9ab6:	6f 5f       	subi	r22, 0xFF	; 255
    9ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    9aba:	ce 01       	movw	r24, r28
    9abc:	01 96       	adiw	r24, 0x01	; 1
    9abe:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <LBCopyChars>
    9ac2:	1b c0       	rjmp	.+54     	; 0x9afa <_handle_select_render_helper+0x122>
	}
	else if (ps->select_state == CONFIRMED)
    9ac4:	82 30       	cpi	r24, 0x02	; 2
    9ac6:	c9 f4       	brne	.+50     	; 0x9afa <_handle_select_render_helper+0x122>
	{
		PrintChar(x_offset+6, 5, '(');
    9ac8:	c4 2e       	mov	r12, r20
    9aca:	d1 2c       	mov	r13, r1
    9acc:	48 e2       	ldi	r20, 0x28	; 40
    9ace:	65 e0       	ldi	r22, 0x05	; 5
    9ad0:	70 e0       	ldi	r23, 0x00	; 0
    9ad2:	c6 01       	movw	r24, r12
    9ad4:	06 96       	adiw	r24, 0x06	; 6
    9ad6:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    9ada:	23 e0       	ldi	r18, 0x03	; 3
    9adc:	a7 01       	movw	r20, r14
    9ade:	4f 5f       	subi	r20, 0xFF	; 255
    9ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    9ae2:	65 e0       	ldi	r22, 0x05	; 5
    9ae4:	87 e0       	ldi	r24, 0x07	; 7
    9ae6:	81 0f       	add	r24, r17
    9ae8:	0e 94 92 3f 	call	0x7f24	; 0x7f24 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    9aec:	49 e2       	ldi	r20, 0x29	; 41
    9aee:	65 e0       	ldi	r22, 0x05	; 5
    9af0:	70 e0       	ldi	r23, 0x00	; 0
    9af2:	c6 01       	movw	r24, r12
    9af4:	0a 96       	adiw	r24, 0x0a	; 10
    9af6:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <PrintChar>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    9afa:	f7 01       	movw	r30, r14
    9afc:	60 81       	ld	r22, Z
    9afe:	68 5f       	subi	r22, 0xF8	; 248
    9b00:	23 e0       	ldi	r18, 0x03	; 3
    9b02:	ae 01       	movw	r20, r28
    9b04:	4f 5f       	subi	r20, 0xFF	; 255
    9b06:	5f 4f       	sbci	r21, 0xFF	; 255
    9b08:	85 e0       	ldi	r24, 0x05	; 5
    9b0a:	81 0f       	add	r24, r17
    9b0c:	0e 94 92 3f 	call	0x7f24	; 0x7f24 <LBPrintStr>
}
    9b10:	0f 90       	pop	r0
    9b12:	0f 90       	pop	r0
    9b14:	0f 90       	pop	r0
    9b16:	df 91       	pop	r29
    9b18:	cf 91       	pop	r28
    9b1a:	1f 91       	pop	r17
    9b1c:	0f 91       	pop	r16
    9b1e:	ff 90       	pop	r15
    9b20:	ef 90       	pop	r14
    9b22:	df 90       	pop	r13
    9b24:	cf 90       	pop	r12
    9b26:	bf 90       	pop	r11
    9b28:	af 90       	pop	r10
    9b2a:	08 95       	ret

00009b2c <update_handle_select>:

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    9b2c:	4f 92       	push	r4
    9b2e:	5f 92       	push	r5
    9b30:	6f 92       	push	r6
    9b32:	7f 92       	push	r7
    9b34:	8f 92       	push	r8
    9b36:	9f 92       	push	r9
    9b38:	af 92       	push	r10
    9b3a:	bf 92       	push	r11
    9b3c:	cf 92       	push	r12
    9b3e:	df 92       	push	r13
    9b40:	ef 92       	push	r14
    9b42:	ff 92       	push	r15
    9b44:	0f 93       	push	r16
    9b46:	1f 93       	push	r17
    9b48:	cf 93       	push	r28
    9b4a:	df 93       	push	r29
    9b4c:	5c 01       	movw	r10, r24
    9b4e:	6b 01       	movw	r12, r22
	u8 start_game = 0;

	// Render
	clear_sprites();
    9b50:	0e 94 fe 40 	call	0x81fc	; 0x81fc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    9b54:	40 e0       	ldi	r20, 0x00	; 0
    9b56:	62 e0       	ldi	r22, 0x02	; 2
    9b58:	78 e2       	ldi	r23, 0x28	; 40
    9b5a:	80 e0       	ldi	r24, 0x00	; 0
    9b5c:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    9b60:	40 e0       	ldi	r20, 0x00	; 0
    9b62:	6a ee       	ldi	r22, 0xEA	; 234
    9b64:	77 e2       	ldi	r23, 0x27	; 39
    9b66:	84 e0       	ldi	r24, 0x04	; 4
    9b68:	0e 94 65 3d 	call	0x7aca	; 0x7aca <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    9b6c:	02 e0       	ldi	r16, 0x02	; 2
    9b6e:	22 e0       	ldi	r18, 0x02	; 2
    9b70:	40 e2       	ldi	r20, 0x20	; 32
    9b72:	68 e1       	ldi	r22, 0x18	; 24
    9b74:	80 e0       	ldi	r24, 0x00	; 0
    9b76:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    9b7a:	22 e0       	ldi	r18, 0x02	; 2
    9b7c:	40 e2       	ldi	r20, 0x20	; 32
    9b7e:	60 ea       	ldi	r22, 0xA0	; 160
    9b80:	84 e0       	ldi	r24, 0x04	; 4
    9b82:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <MoveSprite>
	_handle_select_render_helper(&p1s, p1, 2, 8);
    9b86:	28 e0       	ldi	r18, 0x08	; 8
    9b88:	42 e0       	ldi	r20, 0x02	; 2
    9b8a:	b5 01       	movw	r22, r10
    9b8c:	80 e7       	ldi	r24, 0x70	; 112
    9b8e:	9f e0       	ldi	r25, 0x0F	; 15
    9b90:	0e 94 ec 4c 	call	0x99d8	; 0x99d8 <_handle_select_render_helper>
	if (game.selection == PVP)
    9b94:	80 91 7a 0f 	lds	r24, 0x0F7A
    9b98:	81 30       	cpi	r24, 0x01	; 1
    9b9a:	39 f4       	brne	.+14     	; 0x9baa <update_handle_select+0x7e>
	{
		_handle_select_render_helper(&p2s, p2, 19, 10);
    9b9c:	2a e0       	ldi	r18, 0x0A	; 10
    9b9e:	43 e1       	ldi	r20, 0x13	; 19
    9ba0:	b6 01       	movw	r22, r12
    9ba2:	8a e6       	ldi	r24, 0x6A	; 106
    9ba4:	9f e0       	ldi	r25, 0x0F	; 15
    9ba6:	0e 94 ec 4c 	call	0x99d8	; 0x99d8 <_handle_select_render_helper>
	}
	Print(9, 1, strHandlesTitle);
    9baa:	4f e1       	ldi	r20, 0x1F	; 31
    9bac:	5a e0       	ldi	r21, 0x0A	; 10
    9bae:	61 e0       	ldi	r22, 0x01	; 1
    9bb0:	70 e0       	ldi	r23, 0x00	; 0
    9bb2:	89 e0       	ldi	r24, 0x09	; 9
    9bb4:	90 e0       	ldi	r25, 0x00	; 0
    9bb6:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	Print(6, 5, strPlayer1);
    9bba:	4e e0       	ldi	r20, 0x0E	; 14
    9bbc:	5a e0       	ldi	r21, 0x0A	; 10
    9bbe:	65 e0       	ldi	r22, 0x05	; 5
    9bc0:	70 e0       	ldi	r23, 0x00	; 0
    9bc2:	86 e0       	ldi	r24, 0x06	; 6
    9bc4:	90 e0       	ldi	r25, 0x00	; 0
    9bc6:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	Print(23, 5, strPlayer2);
    9bca:	4b e0       	ldi	r20, 0x0B	; 11
    9bcc:	5a e0       	ldi	r21, 0x0A	; 10
    9bce:	65 e0       	ldi	r22, 0x05	; 5
    9bd0:	70 e0       	ldi	r23, 0x00	; 0
    9bd2:	87 e1       	ldi	r24, 0x17	; 23
    9bd4:	90 e0       	ldi	r25, 0x00	; 0
    9bd6:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
    9bda:	84 e2       	ldi	r24, 0x24	; 36
    9bdc:	e8 2e       	mov	r14, r24
    9bde:	81 e0       	ldi	r24, 0x01	; 1
    9be0:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    9be2:	c0 e0       	ldi	r28, 0x00	; 0
    9be4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    9be6:	93 e0       	ldi	r25, 0x03	; 3
    9be8:	89 2e       	mov	r8, r25
    9bea:	91 2c       	mov	r9, r1
    9bec:	27 01       	movw	r4, r14
    9bee:	ce 01       	movw	r24, r28
    9bf0:	b4 01       	movw	r22, r8
    9bf2:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <__divmodhi4>
    9bf6:	3c 01       	movw	r6, r24
    9bf8:	8b 01       	movw	r16, r22
    9bfa:	08 5f       	subi	r16, 0xF8	; 248
    9bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    9bfe:	f7 01       	movw	r30, r14
    9c00:	41 91       	ld	r20, Z+
    9c02:	7f 01       	movw	r14, r30
    9c04:	b8 01       	movw	r22, r16
    9c06:	03 96       	adiw	r24, 0x03	; 3
    9c08:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    9c0c:	f2 01       	movw	r30, r4
    9c0e:	40 81       	ld	r20, Z
    9c10:	b8 01       	movw	r22, r16
    9c12:	c3 01       	movw	r24, r6
    9c14:	44 96       	adiw	r24, 0x14	; 20
    9c16:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <PrintChar>
		_handle_select_render_helper(&p2s, p2, 19, 10);
	}
	Print(9, 1, strHandlesTitle);
	Print(6, 5, strPlayer1);
	Print(23, 5, strPlayer2);
	for (int i = 0; i < 27; i += 1)
    9c1a:	21 96       	adiw	r28, 0x01	; 1
    9c1c:	cb 31       	cpi	r28, 0x1B	; 27
    9c1e:	d1 05       	cpc	r29, r1
    9c20:	29 f7       	brne	.-54     	; 0x9bec <update_handle_select+0xc0>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
    9c22:	40 e0       	ldi	r20, 0x00	; 0
    9c24:	5a e0       	ldi	r21, 0x0A	; 10
    9c26:	65 e1       	ldi	r22, 0x15	; 21
    9c28:	70 e0       	ldi	r23, 0x00	; 0
    9c2a:	88 e0       	ldi	r24, 0x08	; 8
    9c2c:	90 e0       	ldi	r25, 0x00	; 0
    9c2e:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	Print(8, 22, strConfirmHandle);
    9c32:	44 ef       	ldi	r20, 0xF4	; 244
    9c34:	59 e0       	ldi	r21, 0x09	; 9
    9c36:	66 e1       	ldi	r22, 0x16	; 22
    9c38:	70 e0       	ldi	r23, 0x00	; 0
    9c3a:	88 e0       	ldi	r24, 0x08	; 8
    9c3c:	90 e0       	ldi	r25, 0x00	; 0
    9c3e:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	Print(8, 23, strCancelHandle);
    9c42:	49 ee       	ldi	r20, 0xE9	; 233
    9c44:	59 e0       	ldi	r21, 0x09	; 9
    9c46:	67 e1       	ldi	r22, 0x17	; 23
    9c48:	70 e0       	ldi	r23, 0x00	; 0
    9c4a:	88 e0       	ldi	r24, 0x08	; 8
    9c4c:	90 e0       	ldi	r25, 0x00	; 0
    9c4e:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>
	Print(8, 24, strChangeHandle);
    9c52:	4a ed       	ldi	r20, 0xDA	; 218
    9c54:	59 e0       	ldi	r21, 0x09	; 9
    9c56:	68 e1       	ldi	r22, 0x18	; 24
    9c58:	70 e0       	ldi	r23, 0x00	; 0
    9c5a:	88 e0       	ldi	r24, 0x08	; 8
    9c5c:	90 e0       	ldi	r25, 0x00	; 0
    9c5e:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <Print>

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    9c62:	43 ec       	ldi	r20, 0xC3	; 195
    9c64:	54 e0       	ldi	r21, 0x04	; 4
    9c66:	b5 01       	movw	r22, r10
    9c68:	80 e7       	ldi	r24, 0x70	; 112
    9c6a:	9f e0       	ldi	r25, 0x0F	; 15
    9c6c:	0e 94 41 4c 	call	0x9882	; 0x9882 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    9c70:	c0 91 75 0f 	lds	r28, 0x0F75
	if (game.selection == PVP)
    9c74:	80 91 7a 0f 	lds	r24, 0x0F7A
    9c78:	81 30       	cpi	r24, 0x01	; 1
    9c7a:	19 f0       	breq	.+6      	; 0x9c82 <update_handle_select+0x156>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    9c7c:	c2 30       	cpi	r28, 0x02	; 2
    9c7e:	69 f0       	breq	.+26     	; 0x9c9a <update_handle_select+0x16e>
    9c80:	2e c0       	rjmp	.+92     	; 0x9cde <update_handle_select+0x1b2>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    9c82:	40 e4       	ldi	r20, 0x40	; 64
    9c84:	54 e0       	ldi	r21, 0x04	; 4
    9c86:	b6 01       	movw	r22, r12
    9c88:	8a e6       	ldi	r24, 0x6A	; 106
    9c8a:	9f e0       	ldi	r25, 0x0F	; 15
    9c8c:	0e 94 41 4c 	call	0x9882	; 0x9882 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    9c90:	80 91 6f 0f 	lds	r24, 0x0F6F
    9c94:	82 30       	cpi	r24, 0x02	; 2
    9c96:	19 f5       	brne	.+70     	; 0x9cde <update_handle_select+0x1b2>
    9c98:	f1 cf       	rjmp	.-30     	; 0x9c7c <update_handle_select+0x150>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    9c9a:	80 91 7a 0f 	lds	r24, 0x0F7A
    9c9e:	81 11       	cpse	r24, r1
    9ca0:	0a c0       	rjmp	.+20     	; 0x9cb6 <update_handle_select+0x18a>
		{
			player2.handle_id = 9;
    9ca2:	89 e0       	ldi	r24, 0x09	; 9
    9ca4:	80 93 40 04 	sts	0x0440, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    9ca8:	43 e0       	ldi	r20, 0x03	; 3
    9caa:	6f e3       	ldi	r22, 0x3F	; 63
    9cac:	71 e0       	ldi	r23, 0x01	; 1
    9cae:	81 e4       	ldi	r24, 0x41	; 65
    9cb0:	94 e0       	ldi	r25, 0x04	; 4
    9cb2:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <LBCopyChars>
		}
		load_level(0);
    9cb6:	80 e0       	ldi	r24, 0x00	; 0
    9cb8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    9cba:	df 91       	pop	r29
    9cbc:	cf 91       	pop	r28
    9cbe:	1f 91       	pop	r17
    9cc0:	0f 91       	pop	r16
    9cc2:	ff 90       	pop	r15
    9cc4:	ef 90       	pop	r14
    9cc6:	df 90       	pop	r13
    9cc8:	cf 90       	pop	r12
    9cca:	bf 90       	pop	r11
    9ccc:	af 90       	pop	r10
    9cce:	9f 90       	pop	r9
    9cd0:	8f 90       	pop	r8
    9cd2:	7f 90       	pop	r7
    9cd4:	6f 90       	pop	r6
    9cd6:	5f 90       	pop	r5
    9cd8:	4f 90       	pop	r4
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		load_level(0);
    9cda:	0c 94 87 41 	jmp	0x830e	; 0x830e <load_level>
	}
}
    9cde:	df 91       	pop	r29
    9ce0:	cf 91       	pop	r28
    9ce2:	1f 91       	pop	r17
    9ce4:	0f 91       	pop	r16
    9ce6:	ff 90       	pop	r15
    9ce8:	ef 90       	pop	r14
    9cea:	df 90       	pop	r13
    9cec:	cf 90       	pop	r12
    9cee:	bf 90       	pop	r11
    9cf0:	af 90       	pop	r10
    9cf2:	9f 90       	pop	r9
    9cf4:	8f 90       	pop	r8
    9cf6:	7f 90       	pop	r7
    9cf8:	6f 90       	pop	r6
    9cfa:	5f 90       	pop	r5
    9cfc:	4f 90       	pop	r4
    9cfe:	08 95       	ret

00009d00 <main>:
}

int main()
{
	// Initialize
	SetMasterVolume(0);
    9d00:	80 e0       	ldi	r24, 0x00	; 0
    9d02:	0e 94 05 36 	call	0x6c0a	; 0x6c0a <SetMasterVolume>
	StopSong();
    9d06:	0e 94 c6 32 	call	0x658c	; 0x658c <StopSong>
	random_seed = get_random_seed();
    9d0a:	8f ef       	ldi	r24, 0xFF	; 255
    9d0c:	9f e7       	ldi	r25, 0x7F	; 127
    9d0e:	90 93 fd 0f 	sts	0x0FFD, r25
    9d12:	80 93 fc 0f 	sts	0x0FFC, r24
	SetTileTable(tiles_data);
    9d16:	89 ec       	ldi	r24, 0xC9	; 201
    9d18:	94 e3       	ldi	r25, 0x34	; 52
    9d1a:	0e 94 ab 30 	call	0x6156	; 0x6156 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    9d1e:	89 ec       	ldi	r24, 0xC9	; 201
    9d20:	98 e2       	ldi	r25, 0x28	; 40
    9d22:	0e 94 87 30 	call	0x610e	; 0x610e <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    9d26:	8f e2       	ldi	r24, 0x2F	; 47
    9d28:	0e 94 a8 30 	call	0x6150	; 0x6150 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    9d2c:	60 e0       	ldi	r22, 0x00	; 0
    9d2e:	83 e0       	ldi	r24, 0x03	; 3
    9d30:	0e 94 e0 3e 	call	0x7dc0	; 0x7dc0 <FadeIn>
	reset_game_state();
    9d34:	0e 94 51 41 	call	0x82a2	; 0x82a2 <reset_game_state>

	while (1)
	{
		WaitVsync(1);
    9d38:	81 e0       	ldi	r24, 0x01	; 1
    9d3a:	90 e0       	ldi	r25, 0x00	; 0
    9d3c:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    9d40:	60 ef       	ldi	r22, 0xF0	; 240
    9d42:	7f e0       	ldi	r23, 0x0F	; 15
    9d44:	86 ef       	ldi	r24, 0xF6	; 246
    9d46:	9f e0       	ldi	r25, 0x0F	; 15
    9d48:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <LBGetJoyPadState>
		switch (game.current_screen)
    9d4c:	80 91 76 0f 	lds	r24, 0x0F76
    9d50:	81 30       	cpi	r24, 0x01	; 1
    9d52:	99 f0       	breq	.+38     	; 0x9d7a <main+0x7a>
    9d54:	58 f0       	brcs	.+22     	; 0x9d6c <main+0x6c>
    9d56:	82 30       	cpi	r24, 0x02	; 2
    9d58:	b9 f0       	breq	.+46     	; 0x9d88 <main+0x88>
    9d5a:	83 30       	cpi	r24, 0x03	; 3
    9d5c:	69 f7       	brne	.-38     	; 0x9d38 <main+0x38>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				/* p2 should be replaced by AI input for Player v CPU */
				update_level(&p1, &p2);
    9d5e:	60 ef       	ldi	r22, 0xF0	; 240
    9d60:	7f e0       	ldi	r23, 0x0F	; 15
    9d62:	86 ef       	ldi	r24, 0xF6	; 246
    9d64:	9f e0       	ldi	r25, 0x0F	; 15
    9d66:	0e 94 24 4a 	call	0x9448	; 0x9448 <update_level>
				break;
    9d6a:	e6 cf       	rjmp	.-52     	; 0x9d38 <main+0x38>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    9d6c:	60 ef       	ldi	r22, 0xF0	; 240
    9d6e:	7f e0       	ldi	r23, 0x0F	; 15
    9d70:	86 ef       	ldi	r24, 0xF6	; 246
    9d72:	9f e0       	ldi	r25, 0x0F	; 15
    9d74:	0e 94 0f 4b 	call	0x961e	; 0x961e <update_splash>
				break;
    9d78:	df cf       	rjmp	.-66     	; 0x9d38 <main+0x38>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    9d7a:	60 ef       	ldi	r22, 0xF0	; 240
    9d7c:	7f e0       	ldi	r23, 0x0F	; 15
    9d7e:	86 ef       	ldi	r24, 0xF6	; 246
    9d80:	9f e0       	ldi	r25, 0x0F	; 15
    9d82:	0e 94 98 4b 	call	0x9730	; 0x9730 <update_tank_rank>
				break;
    9d86:	d8 cf       	rjmp	.-80     	; 0x9d38 <main+0x38>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    9d88:	60 ef       	ldi	r22, 0xF0	; 240
    9d8a:	7f e0       	ldi	r23, 0x0F	; 15
    9d8c:	86 ef       	ldi	r24, 0xF6	; 246
    9d8e:	9f e0       	ldi	r25, 0x0F	; 15
    9d90:	0e 94 96 4d 	call	0x9b2c	; 0x9b2c <update_handle_select>
				break;
    9d94:	d1 cf       	rjmp	.-94     	; 0x9d38 <main+0x38>

00009d96 <__udivmodqi4>:
    9d96:	99 1b       	sub	r25, r25
    9d98:	79 e0       	ldi	r23, 0x09	; 9
    9d9a:	04 c0       	rjmp	.+8      	; 0x9da4 <__udivmodqi4_ep>

00009d9c <__udivmodqi4_loop>:
    9d9c:	99 1f       	adc	r25, r25
    9d9e:	96 17       	cp	r25, r22
    9da0:	08 f0       	brcs	.+2      	; 0x9da4 <__udivmodqi4_ep>
    9da2:	96 1b       	sub	r25, r22

00009da4 <__udivmodqi4_ep>:
    9da4:	88 1f       	adc	r24, r24
    9da6:	7a 95       	dec	r23
    9da8:	c9 f7       	brne	.-14     	; 0x9d9c <__udivmodqi4_loop>
    9daa:	80 95       	com	r24
    9dac:	08 95       	ret

00009dae <__udivmodhi4>:
    9dae:	aa 1b       	sub	r26, r26
    9db0:	bb 1b       	sub	r27, r27
    9db2:	51 e1       	ldi	r21, 0x11	; 17
    9db4:	07 c0       	rjmp	.+14     	; 0x9dc4 <__udivmodhi4_ep>

00009db6 <__udivmodhi4_loop>:
    9db6:	aa 1f       	adc	r26, r26
    9db8:	bb 1f       	adc	r27, r27
    9dba:	a6 17       	cp	r26, r22
    9dbc:	b7 07       	cpc	r27, r23
    9dbe:	10 f0       	brcs	.+4      	; 0x9dc4 <__udivmodhi4_ep>
    9dc0:	a6 1b       	sub	r26, r22
    9dc2:	b7 0b       	sbc	r27, r23

00009dc4 <__udivmodhi4_ep>:
    9dc4:	88 1f       	adc	r24, r24
    9dc6:	99 1f       	adc	r25, r25
    9dc8:	5a 95       	dec	r21
    9dca:	a9 f7       	brne	.-22     	; 0x9db6 <__udivmodhi4_loop>
    9dcc:	80 95       	com	r24
    9dce:	90 95       	com	r25
    9dd0:	bc 01       	movw	r22, r24
    9dd2:	cd 01       	movw	r24, r26
    9dd4:	08 95       	ret

00009dd6 <__divmodhi4>:
    9dd6:	97 fb       	bst	r25, 7
    9dd8:	07 2e       	mov	r0, r23
    9dda:	16 f4       	brtc	.+4      	; 0x9de0 <__divmodhi4+0xa>
    9ddc:	00 94       	com	r0
    9dde:	07 d0       	rcall	.+14     	; 0x9dee <__divmodhi4_neg1>
    9de0:	77 fd       	sbrc	r23, 7
    9de2:	09 d0       	rcall	.+18     	; 0x9df6 <__divmodhi4_neg2>
    9de4:	0e 94 d7 4e 	call	0x9dae	; 0x9dae <__udivmodhi4>
    9de8:	07 fc       	sbrc	r0, 7
    9dea:	05 d0       	rcall	.+10     	; 0x9df6 <__divmodhi4_neg2>
    9dec:	3e f4       	brtc	.+14     	; 0x9dfc <__divmodhi4_exit>

00009dee <__divmodhi4_neg1>:
    9dee:	90 95       	com	r25
    9df0:	81 95       	neg	r24
    9df2:	9f 4f       	sbci	r25, 0xFF	; 255
    9df4:	08 95       	ret

00009df6 <__divmodhi4_neg2>:
    9df6:	70 95       	com	r23
    9df8:	61 95       	neg	r22
    9dfa:	7f 4f       	sbci	r23, 0xFF	; 255

00009dfc <__divmodhi4_exit>:
    9dfc:	08 95       	ret

00009dfe <__tablejump2__>:
    9dfe:	ee 0f       	add	r30, r30
    9e00:	ff 1f       	adc	r31, r31
    9e02:	05 90       	lpm	r0, Z+
    9e04:	f4 91       	lpm	r31, Z
    9e06:	e0 2d       	mov	r30, r0
    9e08:	09 94       	ijmp

00009e0a <__subsf3>:
    9e0a:	50 58       	subi	r21, 0x80	; 128

00009e0c <__addsf3>:
    9e0c:	bb 27       	eor	r27, r27
    9e0e:	aa 27       	eor	r26, r26
    9e10:	0e d0       	rcall	.+28     	; 0x9e2e <__addsf3x>
    9e12:	70 c1       	rjmp	.+736    	; 0xa0f4 <__fp_round>
    9e14:	61 d1       	rcall	.+706    	; 0xa0d8 <__fp_pscA>
    9e16:	30 f0       	brcs	.+12     	; 0x9e24 <__addsf3+0x18>
    9e18:	66 d1       	rcall	.+716    	; 0xa0e6 <__fp_pscB>
    9e1a:	20 f0       	brcs	.+8      	; 0x9e24 <__addsf3+0x18>
    9e1c:	31 f4       	brne	.+12     	; 0x9e2a <__addsf3+0x1e>
    9e1e:	9f 3f       	cpi	r25, 0xFF	; 255
    9e20:	11 f4       	brne	.+4      	; 0x9e26 <__addsf3+0x1a>
    9e22:	1e f4       	brtc	.+6      	; 0x9e2a <__addsf3+0x1e>
    9e24:	56 c1       	rjmp	.+684    	; 0xa0d2 <__fp_nan>
    9e26:	0e f4       	brtc	.+2      	; 0x9e2a <__addsf3+0x1e>
    9e28:	e0 95       	com	r30
    9e2a:	e7 fb       	bst	r30, 7
    9e2c:	4c c1       	rjmp	.+664    	; 0xa0c6 <__fp_inf>

00009e2e <__addsf3x>:
    9e2e:	e9 2f       	mov	r30, r25
    9e30:	72 d1       	rcall	.+740    	; 0xa116 <__fp_split3>
    9e32:	80 f3       	brcs	.-32     	; 0x9e14 <__addsf3+0x8>
    9e34:	ba 17       	cp	r27, r26
    9e36:	62 07       	cpc	r22, r18
    9e38:	73 07       	cpc	r23, r19
    9e3a:	84 07       	cpc	r24, r20
    9e3c:	95 07       	cpc	r25, r21
    9e3e:	18 f0       	brcs	.+6      	; 0x9e46 <__addsf3x+0x18>
    9e40:	71 f4       	brne	.+28     	; 0x9e5e <__addsf3x+0x30>
    9e42:	9e f5       	brtc	.+102    	; 0x9eaa <__addsf3x+0x7c>
    9e44:	8a c1       	rjmp	.+788    	; 0xa15a <__fp_zero>
    9e46:	0e f4       	brtc	.+2      	; 0x9e4a <__addsf3x+0x1c>
    9e48:	e0 95       	com	r30
    9e4a:	0b 2e       	mov	r0, r27
    9e4c:	ba 2f       	mov	r27, r26
    9e4e:	a0 2d       	mov	r26, r0
    9e50:	0b 01       	movw	r0, r22
    9e52:	b9 01       	movw	r22, r18
    9e54:	90 01       	movw	r18, r0
    9e56:	0c 01       	movw	r0, r24
    9e58:	ca 01       	movw	r24, r20
    9e5a:	a0 01       	movw	r20, r0
    9e5c:	11 24       	eor	r1, r1
    9e5e:	ff 27       	eor	r31, r31
    9e60:	59 1b       	sub	r21, r25
    9e62:	99 f0       	breq	.+38     	; 0x9e8a <__addsf3x+0x5c>
    9e64:	59 3f       	cpi	r21, 0xF9	; 249
    9e66:	50 f4       	brcc	.+20     	; 0x9e7c <__addsf3x+0x4e>
    9e68:	50 3e       	cpi	r21, 0xE0	; 224
    9e6a:	68 f1       	brcs	.+90     	; 0x9ec6 <__addsf3x+0x98>
    9e6c:	1a 16       	cp	r1, r26
    9e6e:	f0 40       	sbci	r31, 0x00	; 0
    9e70:	a2 2f       	mov	r26, r18
    9e72:	23 2f       	mov	r18, r19
    9e74:	34 2f       	mov	r19, r20
    9e76:	44 27       	eor	r20, r20
    9e78:	58 5f       	subi	r21, 0xF8	; 248
    9e7a:	f3 cf       	rjmp	.-26     	; 0x9e62 <__addsf3x+0x34>
    9e7c:	46 95       	lsr	r20
    9e7e:	37 95       	ror	r19
    9e80:	27 95       	ror	r18
    9e82:	a7 95       	ror	r26
    9e84:	f0 40       	sbci	r31, 0x00	; 0
    9e86:	53 95       	inc	r21
    9e88:	c9 f7       	brne	.-14     	; 0x9e7c <__addsf3x+0x4e>
    9e8a:	7e f4       	brtc	.+30     	; 0x9eaa <__addsf3x+0x7c>
    9e8c:	1f 16       	cp	r1, r31
    9e8e:	ba 0b       	sbc	r27, r26
    9e90:	62 0b       	sbc	r22, r18
    9e92:	73 0b       	sbc	r23, r19
    9e94:	84 0b       	sbc	r24, r20
    9e96:	ba f0       	brmi	.+46     	; 0x9ec6 <__addsf3x+0x98>
    9e98:	91 50       	subi	r25, 0x01	; 1
    9e9a:	a1 f0       	breq	.+40     	; 0x9ec4 <__addsf3x+0x96>
    9e9c:	ff 0f       	add	r31, r31
    9e9e:	bb 1f       	adc	r27, r27
    9ea0:	66 1f       	adc	r22, r22
    9ea2:	77 1f       	adc	r23, r23
    9ea4:	88 1f       	adc	r24, r24
    9ea6:	c2 f7       	brpl	.-16     	; 0x9e98 <__addsf3x+0x6a>
    9ea8:	0e c0       	rjmp	.+28     	; 0x9ec6 <__addsf3x+0x98>
    9eaa:	ba 0f       	add	r27, r26
    9eac:	62 1f       	adc	r22, r18
    9eae:	73 1f       	adc	r23, r19
    9eb0:	84 1f       	adc	r24, r20
    9eb2:	48 f4       	brcc	.+18     	; 0x9ec6 <__addsf3x+0x98>
    9eb4:	87 95       	ror	r24
    9eb6:	77 95       	ror	r23
    9eb8:	67 95       	ror	r22
    9eba:	b7 95       	ror	r27
    9ebc:	f7 95       	ror	r31
    9ebe:	9e 3f       	cpi	r25, 0xFE	; 254
    9ec0:	08 f0       	brcs	.+2      	; 0x9ec4 <__addsf3x+0x96>
    9ec2:	b3 cf       	rjmp	.-154    	; 0x9e2a <__addsf3+0x1e>
    9ec4:	93 95       	inc	r25
    9ec6:	88 0f       	add	r24, r24
    9ec8:	08 f0       	brcs	.+2      	; 0x9ecc <__addsf3x+0x9e>
    9eca:	99 27       	eor	r25, r25
    9ecc:	ee 0f       	add	r30, r30
    9ece:	97 95       	ror	r25
    9ed0:	87 95       	ror	r24
    9ed2:	08 95       	ret

00009ed4 <__cmpsf2>:
    9ed4:	d4 d0       	rcall	.+424    	; 0xa07e <__fp_cmp>
    9ed6:	08 f4       	brcc	.+2      	; 0x9eda <__cmpsf2+0x6>
    9ed8:	81 e0       	ldi	r24, 0x01	; 1
    9eda:	08 95       	ret

00009edc <__divsf3>:
    9edc:	0c d0       	rcall	.+24     	; 0x9ef6 <__divsf3x>
    9ede:	0a c1       	rjmp	.+532    	; 0xa0f4 <__fp_round>
    9ee0:	02 d1       	rcall	.+516    	; 0xa0e6 <__fp_pscB>
    9ee2:	40 f0       	brcs	.+16     	; 0x9ef4 <__divsf3+0x18>
    9ee4:	f9 d0       	rcall	.+498    	; 0xa0d8 <__fp_pscA>
    9ee6:	30 f0       	brcs	.+12     	; 0x9ef4 <__divsf3+0x18>
    9ee8:	21 f4       	brne	.+8      	; 0x9ef2 <__divsf3+0x16>
    9eea:	5f 3f       	cpi	r21, 0xFF	; 255
    9eec:	19 f0       	breq	.+6      	; 0x9ef4 <__divsf3+0x18>
    9eee:	eb c0       	rjmp	.+470    	; 0xa0c6 <__fp_inf>
    9ef0:	51 11       	cpse	r21, r1
    9ef2:	34 c1       	rjmp	.+616    	; 0xa15c <__fp_szero>
    9ef4:	ee c0       	rjmp	.+476    	; 0xa0d2 <__fp_nan>

00009ef6 <__divsf3x>:
    9ef6:	0f d1       	rcall	.+542    	; 0xa116 <__fp_split3>
    9ef8:	98 f3       	brcs	.-26     	; 0x9ee0 <__divsf3+0x4>

00009efa <__divsf3_pse>:
    9efa:	99 23       	and	r25, r25
    9efc:	c9 f3       	breq	.-14     	; 0x9ef0 <__divsf3+0x14>
    9efe:	55 23       	and	r21, r21
    9f00:	b1 f3       	breq	.-20     	; 0x9eee <__divsf3+0x12>
    9f02:	95 1b       	sub	r25, r21
    9f04:	55 0b       	sbc	r21, r21
    9f06:	bb 27       	eor	r27, r27
    9f08:	aa 27       	eor	r26, r26
    9f0a:	62 17       	cp	r22, r18
    9f0c:	73 07       	cpc	r23, r19
    9f0e:	84 07       	cpc	r24, r20
    9f10:	38 f0       	brcs	.+14     	; 0x9f20 <__divsf3_pse+0x26>
    9f12:	9f 5f       	subi	r25, 0xFF	; 255
    9f14:	5f 4f       	sbci	r21, 0xFF	; 255
    9f16:	22 0f       	add	r18, r18
    9f18:	33 1f       	adc	r19, r19
    9f1a:	44 1f       	adc	r20, r20
    9f1c:	aa 1f       	adc	r26, r26
    9f1e:	a9 f3       	breq	.-22     	; 0x9f0a <__divsf3_pse+0x10>
    9f20:	33 d0       	rcall	.+102    	; 0x9f88 <__divsf3_pse+0x8e>
    9f22:	0e 2e       	mov	r0, r30
    9f24:	3a f0       	brmi	.+14     	; 0x9f34 <__divsf3_pse+0x3a>
    9f26:	e0 e8       	ldi	r30, 0x80	; 128
    9f28:	30 d0       	rcall	.+96     	; 0x9f8a <__divsf3_pse+0x90>
    9f2a:	91 50       	subi	r25, 0x01	; 1
    9f2c:	50 40       	sbci	r21, 0x00	; 0
    9f2e:	e6 95       	lsr	r30
    9f30:	00 1c       	adc	r0, r0
    9f32:	ca f7       	brpl	.-14     	; 0x9f26 <__divsf3_pse+0x2c>
    9f34:	29 d0       	rcall	.+82     	; 0x9f88 <__divsf3_pse+0x8e>
    9f36:	fe 2f       	mov	r31, r30
    9f38:	27 d0       	rcall	.+78     	; 0x9f88 <__divsf3_pse+0x8e>
    9f3a:	66 0f       	add	r22, r22
    9f3c:	77 1f       	adc	r23, r23
    9f3e:	88 1f       	adc	r24, r24
    9f40:	bb 1f       	adc	r27, r27
    9f42:	26 17       	cp	r18, r22
    9f44:	37 07       	cpc	r19, r23
    9f46:	48 07       	cpc	r20, r24
    9f48:	ab 07       	cpc	r26, r27
    9f4a:	b0 e8       	ldi	r27, 0x80	; 128
    9f4c:	09 f0       	breq	.+2      	; 0x9f50 <__divsf3_pse+0x56>
    9f4e:	bb 0b       	sbc	r27, r27
    9f50:	80 2d       	mov	r24, r0
    9f52:	bf 01       	movw	r22, r30
    9f54:	ff 27       	eor	r31, r31
    9f56:	93 58       	subi	r25, 0x83	; 131
    9f58:	5f 4f       	sbci	r21, 0xFF	; 255
    9f5a:	2a f0       	brmi	.+10     	; 0x9f66 <__divsf3_pse+0x6c>
    9f5c:	9e 3f       	cpi	r25, 0xFE	; 254
    9f5e:	51 05       	cpc	r21, r1
    9f60:	68 f0       	brcs	.+26     	; 0x9f7c <__divsf3_pse+0x82>
    9f62:	b1 c0       	rjmp	.+354    	; 0xa0c6 <__fp_inf>
    9f64:	fb c0       	rjmp	.+502    	; 0xa15c <__fp_szero>
    9f66:	5f 3f       	cpi	r21, 0xFF	; 255
    9f68:	ec f3       	brlt	.-6      	; 0x9f64 <__divsf3_pse+0x6a>
    9f6a:	98 3e       	cpi	r25, 0xE8	; 232
    9f6c:	dc f3       	brlt	.-10     	; 0x9f64 <__divsf3_pse+0x6a>
    9f6e:	86 95       	lsr	r24
    9f70:	77 95       	ror	r23
    9f72:	67 95       	ror	r22
    9f74:	b7 95       	ror	r27
    9f76:	f7 95       	ror	r31
    9f78:	9f 5f       	subi	r25, 0xFF	; 255
    9f7a:	c9 f7       	brne	.-14     	; 0x9f6e <__divsf3_pse+0x74>
    9f7c:	88 0f       	add	r24, r24
    9f7e:	91 1d       	adc	r25, r1
    9f80:	96 95       	lsr	r25
    9f82:	87 95       	ror	r24
    9f84:	97 f9       	bld	r25, 7
    9f86:	08 95       	ret
    9f88:	e1 e0       	ldi	r30, 0x01	; 1
    9f8a:	66 0f       	add	r22, r22
    9f8c:	77 1f       	adc	r23, r23
    9f8e:	88 1f       	adc	r24, r24
    9f90:	bb 1f       	adc	r27, r27
    9f92:	62 17       	cp	r22, r18
    9f94:	73 07       	cpc	r23, r19
    9f96:	84 07       	cpc	r24, r20
    9f98:	ba 07       	cpc	r27, r26
    9f9a:	20 f0       	brcs	.+8      	; 0x9fa4 <__divsf3_pse+0xaa>
    9f9c:	62 1b       	sub	r22, r18
    9f9e:	73 0b       	sbc	r23, r19
    9fa0:	84 0b       	sbc	r24, r20
    9fa2:	ba 0b       	sbc	r27, r26
    9fa4:	ee 1f       	adc	r30, r30
    9fa6:	88 f7       	brcc	.-30     	; 0x9f8a <__divsf3_pse+0x90>
    9fa8:	e0 95       	com	r30
    9faa:	08 95       	ret

00009fac <__fixunssfsi>:
    9fac:	bc d0       	rcall	.+376    	; 0xa126 <__fp_splitA>
    9fae:	88 f0       	brcs	.+34     	; 0x9fd2 <__fixunssfsi+0x26>
    9fb0:	9f 57       	subi	r25, 0x7F	; 127
    9fb2:	90 f0       	brcs	.+36     	; 0x9fd8 <__fixunssfsi+0x2c>
    9fb4:	b9 2f       	mov	r27, r25
    9fb6:	99 27       	eor	r25, r25
    9fb8:	b7 51       	subi	r27, 0x17	; 23
    9fba:	a0 f0       	brcs	.+40     	; 0x9fe4 <__fixunssfsi+0x38>
    9fbc:	d1 f0       	breq	.+52     	; 0x9ff2 <__fixunssfsi+0x46>
    9fbe:	66 0f       	add	r22, r22
    9fc0:	77 1f       	adc	r23, r23
    9fc2:	88 1f       	adc	r24, r24
    9fc4:	99 1f       	adc	r25, r25
    9fc6:	1a f0       	brmi	.+6      	; 0x9fce <__fixunssfsi+0x22>
    9fc8:	ba 95       	dec	r27
    9fca:	c9 f7       	brne	.-14     	; 0x9fbe <__fixunssfsi+0x12>
    9fcc:	12 c0       	rjmp	.+36     	; 0x9ff2 <__fixunssfsi+0x46>
    9fce:	b1 30       	cpi	r27, 0x01	; 1
    9fd0:	81 f0       	breq	.+32     	; 0x9ff2 <__fixunssfsi+0x46>
    9fd2:	c3 d0       	rcall	.+390    	; 0xa15a <__fp_zero>
    9fd4:	b1 e0       	ldi	r27, 0x01	; 1
    9fd6:	08 95       	ret
    9fd8:	c0 c0       	rjmp	.+384    	; 0xa15a <__fp_zero>
    9fda:	67 2f       	mov	r22, r23
    9fdc:	78 2f       	mov	r23, r24
    9fde:	88 27       	eor	r24, r24
    9fe0:	b8 5f       	subi	r27, 0xF8	; 248
    9fe2:	39 f0       	breq	.+14     	; 0x9ff2 <__fixunssfsi+0x46>
    9fe4:	b9 3f       	cpi	r27, 0xF9	; 249
    9fe6:	cc f3       	brlt	.-14     	; 0x9fda <__fixunssfsi+0x2e>
    9fe8:	86 95       	lsr	r24
    9fea:	77 95       	ror	r23
    9fec:	67 95       	ror	r22
    9fee:	b3 95       	inc	r27
    9ff0:	d9 f7       	brne	.-10     	; 0x9fe8 <__fixunssfsi+0x3c>
    9ff2:	3e f4       	brtc	.+14     	; 0xa002 <__fixunssfsi+0x56>
    9ff4:	90 95       	com	r25
    9ff6:	80 95       	com	r24
    9ff8:	70 95       	com	r23
    9ffa:	61 95       	neg	r22
    9ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    9ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    a000:	9f 4f       	sbci	r25, 0xFF	; 255
    a002:	08 95       	ret

0000a004 <__floatunsisf>:
    a004:	e8 94       	clt
    a006:	09 c0       	rjmp	.+18     	; 0xa01a <__floatsisf+0x12>

0000a008 <__floatsisf>:
    a008:	97 fb       	bst	r25, 7
    a00a:	3e f4       	brtc	.+14     	; 0xa01a <__floatsisf+0x12>
    a00c:	90 95       	com	r25
    a00e:	80 95       	com	r24
    a010:	70 95       	com	r23
    a012:	61 95       	neg	r22
    a014:	7f 4f       	sbci	r23, 0xFF	; 255
    a016:	8f 4f       	sbci	r24, 0xFF	; 255
    a018:	9f 4f       	sbci	r25, 0xFF	; 255
    a01a:	99 23       	and	r25, r25
    a01c:	a9 f0       	breq	.+42     	; 0xa048 <__floatsisf+0x40>
    a01e:	f9 2f       	mov	r31, r25
    a020:	96 e9       	ldi	r25, 0x96	; 150
    a022:	bb 27       	eor	r27, r27
    a024:	93 95       	inc	r25
    a026:	f6 95       	lsr	r31
    a028:	87 95       	ror	r24
    a02a:	77 95       	ror	r23
    a02c:	67 95       	ror	r22
    a02e:	b7 95       	ror	r27
    a030:	f1 11       	cpse	r31, r1
    a032:	f8 cf       	rjmp	.-16     	; 0xa024 <__floatsisf+0x1c>
    a034:	fa f4       	brpl	.+62     	; 0xa074 <__floatsisf+0x6c>
    a036:	bb 0f       	add	r27, r27
    a038:	11 f4       	brne	.+4      	; 0xa03e <__floatsisf+0x36>
    a03a:	60 ff       	sbrs	r22, 0
    a03c:	1b c0       	rjmp	.+54     	; 0xa074 <__floatsisf+0x6c>
    a03e:	6f 5f       	subi	r22, 0xFF	; 255
    a040:	7f 4f       	sbci	r23, 0xFF	; 255
    a042:	8f 4f       	sbci	r24, 0xFF	; 255
    a044:	9f 4f       	sbci	r25, 0xFF	; 255
    a046:	16 c0       	rjmp	.+44     	; 0xa074 <__floatsisf+0x6c>
    a048:	88 23       	and	r24, r24
    a04a:	11 f0       	breq	.+4      	; 0xa050 <__floatsisf+0x48>
    a04c:	96 e9       	ldi	r25, 0x96	; 150
    a04e:	11 c0       	rjmp	.+34     	; 0xa072 <__floatsisf+0x6a>
    a050:	77 23       	and	r23, r23
    a052:	21 f0       	breq	.+8      	; 0xa05c <__floatsisf+0x54>
    a054:	9e e8       	ldi	r25, 0x8E	; 142
    a056:	87 2f       	mov	r24, r23
    a058:	76 2f       	mov	r23, r22
    a05a:	05 c0       	rjmp	.+10     	; 0xa066 <__floatsisf+0x5e>
    a05c:	66 23       	and	r22, r22
    a05e:	71 f0       	breq	.+28     	; 0xa07c <__floatsisf+0x74>
    a060:	96 e8       	ldi	r25, 0x86	; 134
    a062:	86 2f       	mov	r24, r22
    a064:	70 e0       	ldi	r23, 0x00	; 0
    a066:	60 e0       	ldi	r22, 0x00	; 0
    a068:	2a f0       	brmi	.+10     	; 0xa074 <__floatsisf+0x6c>
    a06a:	9a 95       	dec	r25
    a06c:	66 0f       	add	r22, r22
    a06e:	77 1f       	adc	r23, r23
    a070:	88 1f       	adc	r24, r24
    a072:	da f7       	brpl	.-10     	; 0xa06a <__floatsisf+0x62>
    a074:	88 0f       	add	r24, r24
    a076:	96 95       	lsr	r25
    a078:	87 95       	ror	r24
    a07a:	97 f9       	bld	r25, 7
    a07c:	08 95       	ret

0000a07e <__fp_cmp>:
    a07e:	99 0f       	add	r25, r25
    a080:	00 08       	sbc	r0, r0
    a082:	55 0f       	add	r21, r21
    a084:	aa 0b       	sbc	r26, r26
    a086:	e0 e8       	ldi	r30, 0x80	; 128
    a088:	fe ef       	ldi	r31, 0xFE	; 254
    a08a:	16 16       	cp	r1, r22
    a08c:	17 06       	cpc	r1, r23
    a08e:	e8 07       	cpc	r30, r24
    a090:	f9 07       	cpc	r31, r25
    a092:	c0 f0       	brcs	.+48     	; 0xa0c4 <__fp_cmp+0x46>
    a094:	12 16       	cp	r1, r18
    a096:	13 06       	cpc	r1, r19
    a098:	e4 07       	cpc	r30, r20
    a09a:	f5 07       	cpc	r31, r21
    a09c:	98 f0       	brcs	.+38     	; 0xa0c4 <__fp_cmp+0x46>
    a09e:	62 1b       	sub	r22, r18
    a0a0:	73 0b       	sbc	r23, r19
    a0a2:	84 0b       	sbc	r24, r20
    a0a4:	95 0b       	sbc	r25, r21
    a0a6:	39 f4       	brne	.+14     	; 0xa0b6 <__fp_cmp+0x38>
    a0a8:	0a 26       	eor	r0, r26
    a0aa:	61 f0       	breq	.+24     	; 0xa0c4 <__fp_cmp+0x46>
    a0ac:	23 2b       	or	r18, r19
    a0ae:	24 2b       	or	r18, r20
    a0b0:	25 2b       	or	r18, r21
    a0b2:	21 f4       	brne	.+8      	; 0xa0bc <__fp_cmp+0x3e>
    a0b4:	08 95       	ret
    a0b6:	0a 26       	eor	r0, r26
    a0b8:	09 f4       	brne	.+2      	; 0xa0bc <__fp_cmp+0x3e>
    a0ba:	a1 40       	sbci	r26, 0x01	; 1
    a0bc:	a6 95       	lsr	r26
    a0be:	8f ef       	ldi	r24, 0xFF	; 255
    a0c0:	81 1d       	adc	r24, r1
    a0c2:	81 1d       	adc	r24, r1
    a0c4:	08 95       	ret

0000a0c6 <__fp_inf>:
    a0c6:	97 f9       	bld	r25, 7
    a0c8:	9f 67       	ori	r25, 0x7F	; 127
    a0ca:	80 e8       	ldi	r24, 0x80	; 128
    a0cc:	70 e0       	ldi	r23, 0x00	; 0
    a0ce:	60 e0       	ldi	r22, 0x00	; 0
    a0d0:	08 95       	ret

0000a0d2 <__fp_nan>:
    a0d2:	9f ef       	ldi	r25, 0xFF	; 255
    a0d4:	80 ec       	ldi	r24, 0xC0	; 192
    a0d6:	08 95       	ret

0000a0d8 <__fp_pscA>:
    a0d8:	00 24       	eor	r0, r0
    a0da:	0a 94       	dec	r0
    a0dc:	16 16       	cp	r1, r22
    a0de:	17 06       	cpc	r1, r23
    a0e0:	18 06       	cpc	r1, r24
    a0e2:	09 06       	cpc	r0, r25
    a0e4:	08 95       	ret

0000a0e6 <__fp_pscB>:
    a0e6:	00 24       	eor	r0, r0
    a0e8:	0a 94       	dec	r0
    a0ea:	12 16       	cp	r1, r18
    a0ec:	13 06       	cpc	r1, r19
    a0ee:	14 06       	cpc	r1, r20
    a0f0:	05 06       	cpc	r0, r21
    a0f2:	08 95       	ret

0000a0f4 <__fp_round>:
    a0f4:	09 2e       	mov	r0, r25
    a0f6:	03 94       	inc	r0
    a0f8:	00 0c       	add	r0, r0
    a0fa:	11 f4       	brne	.+4      	; 0xa100 <__fp_round+0xc>
    a0fc:	88 23       	and	r24, r24
    a0fe:	52 f0       	brmi	.+20     	; 0xa114 <__fp_round+0x20>
    a100:	bb 0f       	add	r27, r27
    a102:	40 f4       	brcc	.+16     	; 0xa114 <__fp_round+0x20>
    a104:	bf 2b       	or	r27, r31
    a106:	11 f4       	brne	.+4      	; 0xa10c <__fp_round+0x18>
    a108:	60 ff       	sbrs	r22, 0
    a10a:	04 c0       	rjmp	.+8      	; 0xa114 <__fp_round+0x20>
    a10c:	6f 5f       	subi	r22, 0xFF	; 255
    a10e:	7f 4f       	sbci	r23, 0xFF	; 255
    a110:	8f 4f       	sbci	r24, 0xFF	; 255
    a112:	9f 4f       	sbci	r25, 0xFF	; 255
    a114:	08 95       	ret

0000a116 <__fp_split3>:
    a116:	57 fd       	sbrc	r21, 7
    a118:	90 58       	subi	r25, 0x80	; 128
    a11a:	44 0f       	add	r20, r20
    a11c:	55 1f       	adc	r21, r21
    a11e:	59 f0       	breq	.+22     	; 0xa136 <__fp_splitA+0x10>
    a120:	5f 3f       	cpi	r21, 0xFF	; 255
    a122:	71 f0       	breq	.+28     	; 0xa140 <__fp_splitA+0x1a>
    a124:	47 95       	ror	r20

0000a126 <__fp_splitA>:
    a126:	88 0f       	add	r24, r24
    a128:	97 fb       	bst	r25, 7
    a12a:	99 1f       	adc	r25, r25
    a12c:	61 f0       	breq	.+24     	; 0xa146 <__fp_splitA+0x20>
    a12e:	9f 3f       	cpi	r25, 0xFF	; 255
    a130:	79 f0       	breq	.+30     	; 0xa150 <__fp_splitA+0x2a>
    a132:	87 95       	ror	r24
    a134:	08 95       	ret
    a136:	12 16       	cp	r1, r18
    a138:	13 06       	cpc	r1, r19
    a13a:	14 06       	cpc	r1, r20
    a13c:	55 1f       	adc	r21, r21
    a13e:	f2 cf       	rjmp	.-28     	; 0xa124 <__fp_split3+0xe>
    a140:	46 95       	lsr	r20
    a142:	f1 df       	rcall	.-30     	; 0xa126 <__fp_splitA>
    a144:	08 c0       	rjmp	.+16     	; 0xa156 <__fp_splitA+0x30>
    a146:	16 16       	cp	r1, r22
    a148:	17 06       	cpc	r1, r23
    a14a:	18 06       	cpc	r1, r24
    a14c:	99 1f       	adc	r25, r25
    a14e:	f1 cf       	rjmp	.-30     	; 0xa132 <__fp_splitA+0xc>
    a150:	86 95       	lsr	r24
    a152:	71 05       	cpc	r23, r1
    a154:	61 05       	cpc	r22, r1
    a156:	08 94       	sec
    a158:	08 95       	ret

0000a15a <__fp_zero>:
    a15a:	e8 94       	clt

0000a15c <__fp_szero>:
    a15c:	bb 27       	eor	r27, r27
    a15e:	66 27       	eor	r22, r22
    a160:	77 27       	eor	r23, r23
    a162:	cb 01       	movw	r24, r22
    a164:	97 f9       	bld	r25, 7
    a166:	08 95       	ret

0000a168 <__gesf2>:
    a168:	8a df       	rcall	.-236    	; 0xa07e <__fp_cmp>
    a16a:	08 f4       	brcc	.+2      	; 0xa16e <__gesf2+0x6>
    a16c:	8f ef       	ldi	r24, 0xFF	; 255
    a16e:	08 95       	ret

0000a170 <__mulsf3>:
    a170:	0b d0       	rcall	.+22     	; 0xa188 <__mulsf3x>
    a172:	c0 cf       	rjmp	.-128    	; 0xa0f4 <__fp_round>
    a174:	b1 df       	rcall	.-158    	; 0xa0d8 <__fp_pscA>
    a176:	28 f0       	brcs	.+10     	; 0xa182 <__mulsf3+0x12>
    a178:	b6 df       	rcall	.-148    	; 0xa0e6 <__fp_pscB>
    a17a:	18 f0       	brcs	.+6      	; 0xa182 <__mulsf3+0x12>
    a17c:	95 23       	and	r25, r21
    a17e:	09 f0       	breq	.+2      	; 0xa182 <__mulsf3+0x12>
    a180:	a2 cf       	rjmp	.-188    	; 0xa0c6 <__fp_inf>
    a182:	a7 cf       	rjmp	.-178    	; 0xa0d2 <__fp_nan>
    a184:	11 24       	eor	r1, r1
    a186:	ea cf       	rjmp	.-44     	; 0xa15c <__fp_szero>

0000a188 <__mulsf3x>:
    a188:	c6 df       	rcall	.-116    	; 0xa116 <__fp_split3>
    a18a:	a0 f3       	brcs	.-24     	; 0xa174 <__mulsf3+0x4>

0000a18c <__mulsf3_pse>:
    a18c:	95 9f       	mul	r25, r21
    a18e:	d1 f3       	breq	.-12     	; 0xa184 <__mulsf3+0x14>
    a190:	95 0f       	add	r25, r21
    a192:	50 e0       	ldi	r21, 0x00	; 0
    a194:	55 1f       	adc	r21, r21
    a196:	62 9f       	mul	r22, r18
    a198:	f0 01       	movw	r30, r0
    a19a:	72 9f       	mul	r23, r18
    a19c:	bb 27       	eor	r27, r27
    a19e:	f0 0d       	add	r31, r0
    a1a0:	b1 1d       	adc	r27, r1
    a1a2:	63 9f       	mul	r22, r19
    a1a4:	aa 27       	eor	r26, r26
    a1a6:	f0 0d       	add	r31, r0
    a1a8:	b1 1d       	adc	r27, r1
    a1aa:	aa 1f       	adc	r26, r26
    a1ac:	64 9f       	mul	r22, r20
    a1ae:	66 27       	eor	r22, r22
    a1b0:	b0 0d       	add	r27, r0
    a1b2:	a1 1d       	adc	r26, r1
    a1b4:	66 1f       	adc	r22, r22
    a1b6:	82 9f       	mul	r24, r18
    a1b8:	22 27       	eor	r18, r18
    a1ba:	b0 0d       	add	r27, r0
    a1bc:	a1 1d       	adc	r26, r1
    a1be:	62 1f       	adc	r22, r18
    a1c0:	73 9f       	mul	r23, r19
    a1c2:	b0 0d       	add	r27, r0
    a1c4:	a1 1d       	adc	r26, r1
    a1c6:	62 1f       	adc	r22, r18
    a1c8:	83 9f       	mul	r24, r19
    a1ca:	a0 0d       	add	r26, r0
    a1cc:	61 1d       	adc	r22, r1
    a1ce:	22 1f       	adc	r18, r18
    a1d0:	74 9f       	mul	r23, r20
    a1d2:	33 27       	eor	r19, r19
    a1d4:	a0 0d       	add	r26, r0
    a1d6:	61 1d       	adc	r22, r1
    a1d8:	23 1f       	adc	r18, r19
    a1da:	84 9f       	mul	r24, r20
    a1dc:	60 0d       	add	r22, r0
    a1de:	21 1d       	adc	r18, r1
    a1e0:	82 2f       	mov	r24, r18
    a1e2:	76 2f       	mov	r23, r22
    a1e4:	6a 2f       	mov	r22, r26
    a1e6:	11 24       	eor	r1, r1
    a1e8:	9f 57       	subi	r25, 0x7F	; 127
    a1ea:	50 40       	sbci	r21, 0x00	; 0
    a1ec:	8a f0       	brmi	.+34     	; 0xa210 <__mulsf3_pse+0x84>
    a1ee:	e1 f0       	breq	.+56     	; 0xa228 <__mulsf3_pse+0x9c>
    a1f0:	88 23       	and	r24, r24
    a1f2:	4a f0       	brmi	.+18     	; 0xa206 <__mulsf3_pse+0x7a>
    a1f4:	ee 0f       	add	r30, r30
    a1f6:	ff 1f       	adc	r31, r31
    a1f8:	bb 1f       	adc	r27, r27
    a1fa:	66 1f       	adc	r22, r22
    a1fc:	77 1f       	adc	r23, r23
    a1fe:	88 1f       	adc	r24, r24
    a200:	91 50       	subi	r25, 0x01	; 1
    a202:	50 40       	sbci	r21, 0x00	; 0
    a204:	a9 f7       	brne	.-22     	; 0xa1f0 <__mulsf3_pse+0x64>
    a206:	9e 3f       	cpi	r25, 0xFE	; 254
    a208:	51 05       	cpc	r21, r1
    a20a:	70 f0       	brcs	.+28     	; 0xa228 <__mulsf3_pse+0x9c>
    a20c:	5c cf       	rjmp	.-328    	; 0xa0c6 <__fp_inf>
    a20e:	a6 cf       	rjmp	.-180    	; 0xa15c <__fp_szero>
    a210:	5f 3f       	cpi	r21, 0xFF	; 255
    a212:	ec f3       	brlt	.-6      	; 0xa20e <__mulsf3_pse+0x82>
    a214:	98 3e       	cpi	r25, 0xE8	; 232
    a216:	dc f3       	brlt	.-10     	; 0xa20e <__mulsf3_pse+0x82>
    a218:	86 95       	lsr	r24
    a21a:	77 95       	ror	r23
    a21c:	67 95       	ror	r22
    a21e:	b7 95       	ror	r27
    a220:	f7 95       	ror	r31
    a222:	e7 95       	ror	r30
    a224:	9f 5f       	subi	r25, 0xFF	; 255
    a226:	c1 f7       	brne	.-16     	; 0xa218 <__mulsf3_pse+0x8c>
    a228:	fe 2b       	or	r31, r30
    a22a:	88 0f       	add	r24, r24
    a22c:	91 1d       	adc	r25, r1
    a22e:	96 95       	lsr	r25
    a230:	87 95       	ror	r24
    a232:	97 f9       	bld	r25, 7
    a234:	08 95       	ret

0000a236 <_exit>:
    a236:	f8 94       	cli

0000a238 <__stop_program>:
    a238:	ff cf       	rjmp	.-2      	; 0xa238 <__stop_program>
