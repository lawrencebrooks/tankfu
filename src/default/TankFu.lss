
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  0000a5a2  0000a6a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a5a2  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ed6  0080016c  0080016c  0000a72c  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000a710  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000ad28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000afcd  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000540  00000000  00000000  0000afe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007a22  00000000  00000000  0000b520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000153f  00000000  00000000  00012f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b22  00000000  00000000  00014481  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001118  00000000  00000000  00015fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018d1  00000000  00000000  000170bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006a6a  00000000  00000000  0001898d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005e0  00000000  00000000  0001f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 82 2c 	jmp	0x5904	; 0x5904 <__ctors_end>
       4:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
       8:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
       c:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      10:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      14:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      18:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      1c:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      20:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      24:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      28:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      2c:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      30:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      34:	0c 94 d0 2e 	jmp	0x5da0	; 0x5da0 <__vector_13>
      38:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__vector_14>
      3c:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      40:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      44:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      48:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      4c:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      50:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      54:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      58:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      5c:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      60:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      64:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      68:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      6c:	0c 94 fb 2c 	jmp	0x59f6	; 0x59f6 <__bad_interrupt>
      70:	57 49       	sbci	r21, 0x97	; 151
      72:	5c 49       	sbci	r21, 0x9C	; 156
      74:	5f 49       	sbci	r21, 0x9F	; 159
      76:	62 49       	sbci	r22, 0x92	; 146
      78:	65 49       	sbci	r22, 0x95	; 149
      7a:	68 49       	sbci	r22, 0x98	; 152
      7c:	6b 49       	sbci	r22, 0x9B	; 155
      7e:	6e 49       	sbci	r22, 0x9E	; 158
      80:	71 49       	sbci	r23, 0x91	; 145

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	5d 32 60 32 bb 32 bf 32 c7 32 68 32 6d 32 72 32     ]2`2.2.2.2h2m2r2
      e0:	cf 32 75 32 78 32 7b 32 b8 32                       .2u2x2{2.2

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <strLevel10>:
     93d:	4c 65 76 65 6c 20 20 20 54 65 6e 00                 Level   Ten.

00000949 <strLevel9>:
     949:	4c 65 76 65 6c 20 20 4e 69 6e 65 00                 Level  Nine.

00000955 <strLevel8>:
     955:	4c 65 76 65 6c 20 45 69 67 68 74 00                 Level Eight.

00000961 <strLevel7>:
     961:	4c 65 76 65 6c 20 53 65 76 65 6e 00                 Level Seven.

0000096d <strLevel6>:
     96d:	4c 65 76 65 6c 20 20 20 53 69 78 00                 Level   Six.

00000979 <strLevel5>:
     979:	4c 65 76 65 6c 20 20 46 69 76 65 00                 Level  Five.

00000985 <strLevel4>:
     985:	4c 65 76 65 6c 20 20 46 6f 75 72 00                 Level  Four.

00000991 <strLevel3>:
     991:	4c 65 76 65 6c 20 54 68 72 65 65 00                 Level Three.

0000099d <strLevel2>:
     99d:	4c 65 76 65 6c 20 20 20 54 77 6f 00                 Level   Two.

000009a9 <strLevel1>:
     9a9:	4c 65 76 65 6c 20 20 20 4f 6e 65 00                 Level   One.

000009b5 <strPaused>:
     9b5:	50 61 75 73 65 64 00                                Paused.

000009bc <strExit>:
     9bc:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

000009c5 <strTotal>:
     9c5:	54 6f 74 61 6c 3a 00                                Total:.

000009cc <strScore>:
     9cc:	53 63 6f 72 65 3a 00                                Score:.

000009d3 <strBanterClear>:
     9d3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

000009e2 <strB10>:
     9e2:	52 54 46 4d 21 00                                   RTFM!.

000009e8 <strB9>:
     9e8:	4e 65 65 64 20 68 65 6c 70 3f 00                    Need help?.

000009f3 <strB8>:
     9f3:	54 68 61 74 27 73 20 69 74 3f 00                    That's it?.

000009fe <strB7>:
     9fe:	41 20 74 75 72 6b 65 79 20 73 68 6f 6f 74 00        A turkey shoot.

00000a0d <strB6>:
     a0d:	2a 59 41 57 4e 2a 00                                *YAWN*.

00000a14 <strB5>:
     a14:	54 6f 6f 20 65 61 73 79 00                          Too easy.

00000a1d <strB4>:
     a1d:	41 74 20 6c 65 61 73 74 20 74 72 79 00              At least try.

00000a2a <strB3>:
     a2a:	42 72 6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00        Broken button?.

00000a39 <strB2>:
     a39:	4c 4f 4c 00                                         LOL.

00000a3d <strB1>:
     a3d:	59 6f 75 20 73 75 63 6b 20 62 72 6f 00              You suck bro.

00000a4a <strBy>:
     a4a:	42 79 00                                            By.

00000a4d <strOwns>:
     a4d:	50 77 6e 73 00                                      Pwns.

00000a52 <strChangeHandle>:
     a52:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

00000a61 <strCancelHandle>:
     a61:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

00000a6c <strConfirmHandle>:
     a6c:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

00000a78 <strSelectHandle>:
     a78:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

00000a83 <strPlayer2>:
     a83:	50 32 00                                            P2.

00000a86 <strPlayer1>:
     a86:	50 31 00                                            P1.

00000a89 <strVertSep>:
     a89:	7c 00                                               |.

00000a8b <strUnderline>:
     a8b:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000a97 <strHandlesTitle>:
     a97:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

00000aa3 <strHighscores>:
     aa3:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

00000aad <str2Player>:
     aad:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

00000abe <str1Player>:
     abe:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

00000acc <strCopyright>:
     acc:	32 30 31 34 20 2d 20 4c 61 77 72 65 6e 63 65 20     2014 - Lawrence 
     adc:	42 72 6f 6f 6b 73 00                                Brooks.

00000ae3 <level_data>:
     ae3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     af3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     b03:	02 02 02 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b13:	00 00 00 00 00 00 04 02 02 02 02 02 02 02 02 02     ................
     b23:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b33:	00 00 00 00 00 04 02 02 02 02 02 02 02 03 00 00     ................
	...
     b57:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
     b73:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
     b93:	00 00 04 02 02 00 00 00 00 00 01 01 00 00 00 00     ................
	...
     bab:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     bbb:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     bcb:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     be7:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     bf7:	01 01 00 00 00 00 00 00 08 00 00 00 00 00 00 00     ................
     c07:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     c23:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     c33:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     c43:	01 01 00 00 00 00 00 02 02 00 00 58 00 00 01 01     ...........X....
	...
     c5f:	00 00 01 01 00 63 00 00 00 02 02 00 00 00 00 00     .....c..........
     c6f:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     c7f:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     c9b:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     cab:	01 01 00 00 00 00 00 00 00 07 00 00 00 00 00 00     ................
     cbb:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     cd7:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     ce7:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     cf7:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
     d07:	00 00 00 00 00 09 00 00 00 00 00 00 00 00 01 01     ................
     d17:	00 00 00 00 00 02 02 05 00 00 00 00 00 00 00 00     ................
	...
     d37:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
     d53:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
     d73:	06 02 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
	...
     d8f:	00 06 02 02 02 02 02 02 02 02 02 05 00 00 00 00     ................
	...
     dab:	00 00 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     dbb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     dcb:	02 02 02 02 02 02 00 00 00 00 00 00 00 00 00 00     ................
	...
     f3b:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     f4b:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1227:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    123f:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    1517:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    1527:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1803:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    181b:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    1af3:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    1b03:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1ddf:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1df7:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    20cf:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    20df:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    23bb:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    23d3:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    26ab:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    26bb:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...

0000282f <map_rocket_right_1>:
    282f:	01 01 26                                            ..&

00002832 <map_rocket_right_0>:
    2832:	01 01 25                                            ..%

00002835 <map_rocket_up_1>:
    2835:	01 01 24                                            ..$

00002838 <map_rocket_up_0>:
    2838:	01 01 23                                            ..#

0000283b <map_ball>:
    283b:	01 01 22                                            .."

0000283e <map_explosion_2>:
    283e:	02 02 0c 0d 0d 0c                                   ......

00002844 <map_explosion_1>:
    2844:	02 02 0a 0b 18 19                                   ......

0000284a <map_explosion_0>:
    284a:	02 02 08 09 16 17                                   ......

00002850 <map_tank2_right_1>:
    2850:	02 02 20 21 2e 2f                                   .. !./

00002856 <map_tank2_right_0>:
    2856:	02 02 1e 1f 2c 2d                                   ....,-

0000285c <map_tank2_up_1>:
    285c:	02 02 1c 1d 2a 2b                                   ....*+

00002862 <map_tank2_up_0>:
    2862:	02 02 1a 1b 28 29                                   ....()

00002868 <map_tank1_right_1>:
    2868:	02 02 06 07 14 15                                   ......

0000286e <map_tank1_right_0>:
    286e:	02 02 04 05 12 13                                   ......

00002874 <map_tank1_up_1>:
    2874:	02 02 02 03 10 11                                   ......

0000287a <map_tank1_up_0>:
    287a:	02 02 00 01 0e 0f                                   ......

00002880 <map_none>:
    2880:	01 01 27                                            ..'

00002883 <map_tank_blank>:
    2883:	02 02 27 27 27 27                                   ..''''

00002889 <map_metal_bl>:
    2889:	01 01 0c                                            ...

0000288c <map_metal_tr>:
    288c:	01 01 0b                                            ...

0000288f <map_metal_br>:
    288f:	01 01 0a                                            ...

00002892 <map_metal_tl>:
    2892:	01 01 09                                            ...

00002895 <map_tile_exp_2>:
    2895:	01 01 08                                            ...

00002898 <map_tile_exp_1>:
    2898:	01 01 07                                            ...

0000289b <map_tile_exp_0>:
    289b:	01 01 06                                            ...

0000289e <map_rocket_itm>:
    289e:	01 01 04                                            ...

000028a1 <map_explode_itm>:
    28a1:	01 01 03                                            ...

000028a4 <map_speed_itm>:
    28a4:	01 01 02                                            ...

000028a7 <map_metal>:
    28a7:	01 01 05                                            ...

000028aa <map_brick>:
    28aa:	01 01 01                                            ...

000028ad <map_tile_none>:
    28ad:	01 01 00                                            ...

000028b0 <map_pause>:
    28b0:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    28c0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    28d0:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    28e0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000028ee <map_splash>:
    28ee:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    28fe:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    290e:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    291e:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    292e:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    293e:	2a 00 00 2c 2d 2e                                   *..,-.

00002944 <sprites_data>:
    2944:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    2954:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    2964:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    2974:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    2984:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2994:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    29a4:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    29b4:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    29c4:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    29d4:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    29e4:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    29f4:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    2a04:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2a14:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    2a24:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    2a34:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    2a44:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2a54:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    2a64:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2a74:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2a84:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2a94:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    2aa4:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2ab4:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2ac4:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    2ad4:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    2ae4:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2af4:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2b04:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    2b14:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    2b24:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2b34:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2b44:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b54:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    2b64:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    2b74:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2b84:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b94:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2ba4:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2bb4:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2bc4:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2bd4:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    2be4:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    2bf4:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2c04:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2c14:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    2c24:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    2c34:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2c44:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c54:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2c64:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2c74:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c84:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c94:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2ca4:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2cb4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cc4:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    2cd4:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    2ce4:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    2cf4:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    2d04:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    2d14:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    2d24:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2d34:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2d44:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    2d54:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    2d64:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    2d74:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    2d84:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    2d94:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    2da4:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    2db4:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    2dc4:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2dd4:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2de4:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2df4:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2e04:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2e14:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2e24:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2e34:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2e44:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2e54:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2e64:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    2e74:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    2e84:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2e94:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2ea4:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    2eb4:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    2ec4:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2ed4:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2ee4:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2ef4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f04:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2f14:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2f24:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2f34:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f44:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2f54:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2f64:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2f74:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2f84:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2f94:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2fa4:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2fb4:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2fc4:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2fd4:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    2fe4:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    2ff4:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3004:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3014:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3024:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3034:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3044:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3054:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3064:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    3074:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3084:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3094:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    30a4:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    30b4:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    30c4:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    30d4:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    30e4:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    30f4:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3104:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3114:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3124:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3134:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3144:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3154:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    3164:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3174:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3184:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3194:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    31a4:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    31b4:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    31c4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    31d4:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    31e4:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    31f4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3204:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3214:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3224:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    3234:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    3244:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3254:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3264:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    3274:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3284:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3294:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    32a4:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    32b4:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32c4:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    32d4:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    32e4:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    32f4:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3304:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3314:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3324:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3334:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3344:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3354:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    3364:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    3374:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    3384:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3394:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    33a4:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    33b4:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    33c4:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    33d4:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    33e4:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    33f4:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    3404:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3414:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    3424:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    3434:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    3444:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3454:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3464:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    3474:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3484:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3494:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    34a4:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    34b4:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    34c4:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    34d4:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    34e4:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    34f4:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3504:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3514:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3524:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3534:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

00003544 <tiles_data>:
	...
    3584:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    3594:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    35a4:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    35b4:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    35c4:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    35d4:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    35e4:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    35f4:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    3604:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    3614:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    3624:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    3634:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    3644:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    3654:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    3664:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    3674:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    3684:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    3694:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    36a4:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    36b4:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    36cc:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    36dc:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    36ec:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    3704:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    3714:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    3724:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    3734:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    374c:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    376c:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    3784:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    3794:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    37a4:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    37b4:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    37c4:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    37d4:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    37e4:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    37f4:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3804:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    3814:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    3824:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    3834:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    3844:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    3854:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    3864:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    3874:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    3884:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3894:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    38a4:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    38b4:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    38c4:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    38d4:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    38e4:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    38f4:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    3904:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3914:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3924:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3934:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    3944:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3954:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3964:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3974:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3984:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3994:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    39a4:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    39b4:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    39c4:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    39d4:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    39e4:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    39f4:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3a04:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    3a14:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3a24:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    3a34:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    3a64:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3a74:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    3aa4:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3ab4:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3ac4:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    3ad4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3ae4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3af4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3b04:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    3b14:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b24:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b34:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    3b44:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    3b54:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b64:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b74:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b84:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3b94:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3ba4:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3bb4:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3bc4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3bd4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3be4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3bf4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3c04:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c14:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c24:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c34:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c44:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3c54:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3c64:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3c74:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3c84:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3c94:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    3cc4:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3cd4:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3ce4:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3cf4:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3d04:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    3d14:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3d24:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3d34:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3d44:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    3d54:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3d64:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3d74:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3d84:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3d94:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3da4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3db4:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    3dec:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    3dfc:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    3e0c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e1c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e2c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e3c:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    3e4c:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3e5c:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3e6c:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3e7c:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    3e8c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e9c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3eac:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3ebc:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    3ecc:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3edc:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3eec:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3efc:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3f0c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3f1c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3f2c:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3f3c:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    3f4c:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3f5c:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    3f84:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3f94:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3fa4:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3fb4:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    3fc4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3fd4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3fe4:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3ff4:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    4004:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4014:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4024:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4034:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4044:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4054:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4064:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4074:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    408c:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    409c:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    40ac:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    40bc:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    40cc:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    40dc:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    40ec:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    40fc:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    414c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    415c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4174:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    418c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    419c:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    41cc:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    41dc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    41ec:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    4204:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    4214:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    4224:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4234:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    424c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    425c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    426c:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    4284:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    4294:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    42a4:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    42b4:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    42cc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    42dc:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4310:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    4320:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    4330:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    434c:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    435c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    436c:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    438c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    439c:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    43ac:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    43cc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    43dc:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    43ec:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    442c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    443c:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    445c:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    44ac:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    44d0:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    44e0:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    44f0:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    450c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    451c:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    452c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    454c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    455c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    456c:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    458c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    459c:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    45ac:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    45cc:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    45dc:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    45ec:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4610:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    4620:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    4630:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    464c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    465c:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    466c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    468c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    469c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    46ac:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    46cc:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    46dc:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    46ec:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    470c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    471c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    472c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    474c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    475c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    476c:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    4794:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    47ac:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    47d4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    47ec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    47fc:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    480c:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    481c:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    482c:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    4854:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    486c:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4884:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    4894:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    48a4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    48b4:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    48cc:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    48dc:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    48f4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    490c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    491c:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    492c:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    494c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    495c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    496c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    498c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    499c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    49ac:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    49cc:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    49dc:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    49ec:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4a0c:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    4a1c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4a2c:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    4a4c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4a5c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4a6c:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4a8c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4a9c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4aac:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4acc:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4adc:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    4aec:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    4b0c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4b1c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4b2c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4b4c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4b5c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4b6c:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4b90:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4ba0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    4bb0:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    4bcc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    4bdc:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    4bec:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4c0c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4c1c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4c2c:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4c4c:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    4c5c:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    4c6c:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4c8c:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    4c9c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    4cac:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4ccc:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4cdc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4cec:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4d0c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d1c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4d2c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4d4c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d5c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4d6c:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    4d8c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d9c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4dac:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4dcc:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4ddc:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    4dec:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4e0c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4e1c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4e2c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4e4c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4e5c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4e6c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    4e8c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4e9c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4eac:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4ecc:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    4edc:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    4eec:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4f0c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4f1c:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    4f2c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4f4c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4f5c:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4f6c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4f8c:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    4f9c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4fac:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4fcc:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4fdc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4fec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    500c:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    501c:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    502c:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    504c:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    505c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    506c:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5090:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    50a0:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    50f4:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    510c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    511c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    512c:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5154:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5164:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5174:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    518c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    519c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    51ac:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    51d4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    51e4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    51f4:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5210:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    5220:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5230:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    5254:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5264:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5274:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5290:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    52a0:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    52b0:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    52d4:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    52e4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    52f4:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    530c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    531c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    532c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    534c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    535c:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    536c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5390:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    53a0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    53b0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    53c0:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    53d0:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    53e0:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    53f0:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    540c:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    541c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    542c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5454:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    5464:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5474:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    5494:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    54a4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    54b4:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    54d4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    54e4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    54f4:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5514:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5524:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5534:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5554:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5564:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    5574:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    5594:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    55a4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    55b4:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    55d4:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    55e4:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    55f4:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    560c:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    561c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    562c:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    5654:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5664:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5674:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5694:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    56a4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    56b4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    56d4:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    56e4:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    56f4:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5714:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    5724:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5734:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5754:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5764:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    5774:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5794:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    57a4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    57b4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    57cc:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    57dc:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    57ec:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5804:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5814:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5824:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5834:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    584c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    585c:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    586c:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    5888:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    5898:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    58a8:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    58b8:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    58c8:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    58d8:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    58e8:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

00005904 <__ctors_end>:
    5904:	11 24       	eor	r1, r1
    5906:	1f be       	out	0x3f, r1	; 63
    5908:	cf ef       	ldi	r28, 0xFF	; 255
    590a:	d0 e1       	ldi	r29, 0x10	; 16
    590c:	de bf       	out	0x3e, r29	; 62
    590e:	cd bf       	out	0x3d, r28	; 61

00005910 <__do_copy_data>:
    5910:	11 e0       	ldi	r17, 0x01	; 1
    5912:	a0 e0       	ldi	r26, 0x00	; 0
    5914:	b1 e0       	ldi	r27, 0x01	; 1
    5916:	e2 ea       	ldi	r30, 0xA2	; 162
    5918:	f5 ea       	ldi	r31, 0xA5	; 165
    591a:	02 c0       	rjmp	.+4      	; 0x5920 <__do_copy_data+0x10>
    591c:	05 90       	lpm	r0, Z+
    591e:	0d 92       	st	X+, r0
    5920:	ac 36       	cpi	r26, 0x6C	; 108
    5922:	b1 07       	cpc	r27, r17
    5924:	d9 f7       	brne	.-10     	; 0x591c <__do_copy_data+0xc>

00005926 <__do_clear_bss>:
    5926:	10 e1       	ldi	r17, 0x10	; 16
    5928:	ac e6       	ldi	r26, 0x6C	; 108
    592a:	b1 e0       	ldi	r27, 0x01	; 1
    592c:	01 c0       	rjmp	.+2      	; 0x5930 <.do_clear_bss_start>

0000592e <.do_clear_bss_loop>:
    592e:	1d 92       	st	X+, r1

00005930 <.do_clear_bss_start>:
    5930:	a2 34       	cpi	r26, 0x42	; 66
    5932:	b1 07       	cpc	r27, r17
    5934:	e1 f7       	brne	.-8      	; 0x592e <.do_clear_bss_loop>

00005936 <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    5936:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    5938:	88 e1       	ldi	r24, 0x18	; 24
    593a:	0f b6       	in	r0, 0x3f	; 63
    593c:	f8 94       	cli
    593e:	80 93 60 00 	sts	0x0060, r24
    5942:	10 92 60 00 	sts	0x0060, r1
    5946:	0f be       	out	0x3f, r0	; 63

00005948 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    5948:	0e 94 90 31 	call	0x6320	; 0x6320 <isEepromFormatted>
    594c:	81 11       	cpse	r24, r1
    594e:	02 c0       	rjmp	.+4      	; 0x5954 <Initialize+0xc>
    5950:	0e 94 6e 31 	call	0x62dc	; 0x62dc <FormatEeprom>

	cli();
    5954:	f8 94       	cli
    5956:	e1 ea       	ldi	r30, 0xA1	; 161
    5958:	f9 e0       	ldi	r31, 0x09	; 9
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
			mix_buf[j]=0x80;//(i<128?i:128);
    595a:	80 e8       	ldi	r24, 0x80	; 128
    595c:	81 93       	st	Z+, r24

	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
    595e:	2b e0       	ldi	r18, 0x0B	; 11
    5960:	ed 3a       	cpi	r30, 0xAD	; 173
    5962:	f2 07       	cpc	r31, r18
    5964:	d9 f7       	brne	.-10     	; 0x595c <Initialize+0x14>
			mix_buf[j]=0x80;//(i<128?i:128);
		}	
	
		mix_pos=mix_buf;
    5966:	81 ea       	ldi	r24, 0xA1	; 161
    5968:	99 e0       	ldi	r25, 0x09	; 9
    596a:	90 93 ae 0b 	sts	0x0BAE, r25
    596e:	80 93 ad 0b 	sts	0x0BAD, r24
		mix_bank=0;
    5972:	10 92 af 0b 	sts	0x0BAF, r1
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    5976:	81 e0       	ldi	r24, 0x01	; 1
    5978:	80 93 c6 0b 	sts	0x0BC6, r24
		tr4_barrel_hi=1;		
    597c:	80 93 c7 0b 	sts	0x0BC7, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    5980:	80 93 c5 0b 	sts	0x0BC5, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    5984:	10 92 b2 0b 	sts	0x0BB2, r1
    5988:	10 92 b8 0b 	sts	0x0BB8, r1
    598c:	10 92 be 0b 	sts	0x0BBE, r1
    5990:	10 92 c4 0b 	sts	0x0BC4, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    5994:	10 92 7a 09 	sts	0x097A, r1
	sync_flags=0;
    5998:	10 92 7c 09 	sts	0x097C, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    599c:	92 e1       	ldi	r25, 0x12	; 18
    599e:	90 93 7b 09 	sts	0x097B, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    59a2:	90 ee       	ldi	r25, 0xE0	; 224
    59a4:	90 93 84 09 	sts	0x0984, r25
	render_lines_count=FRAME_LINES;
    59a8:	90 93 82 09 	sts	0x0982, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    59ac:	94 e1       	ldi	r25, 0x14	; 20
    59ae:	90 93 83 09 	sts	0x0983, r25
	first_render_line=FIRST_RENDER_LINE;
    59b2:	90 93 81 09 	sts	0x0981, r25

	joypad1_status_hi=0;
    59b6:	10 92 88 09 	sts	0x0988, r1
    59ba:	10 92 87 09 	sts	0x0987, r1
	joypad2_status_hi=0;
    59be:	10 92 8c 09 	sts	0x098C, r1
    59c2:	10 92 8b 09 	sts	0x098B, r1
	sound_enabled=1;
    59c6:	80 93 b1 0b 	sts	0x0BB1, r24

	InitializeVideoMode();
    59ca:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <InitializeVideoMode>
    59ce:	82 e8       	ldi	r24, 0x82	; 130
    59d0:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    59d2:	fc 01       	movw	r30, r24
    59d4:	25 91       	lpm	r18, Z+
    59d6:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    59d8:	f9 01       	movw	r30, r18
    59da:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    59dc:	30 83       	st	Z, r19
    59de:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    59e0:	20 e0       	ldi	r18, 0x00	; 0
    59e2:	80 3b       	cpi	r24, 0xB0	; 176
    59e4:	92 07       	cpc	r25, r18
    59e6:	a9 f7       	brne	.-22     	; 0x59d2 <Initialize+0x8a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    59e8:	78 94       	sei
	
	DisplayLogo();
    59ea:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <DisplayLogo>
    59ee:	0e 94 38 50 	call	0xa070	; 0xa070 <main>
    59f2:	0c 94 cf 52 	jmp	0xa59e	; 0xa59e <_exit>

000059f6 <__bad_interrupt>:
    59f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000059fa <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    59fa:	0c e0       	ldi	r16, 0x0C	; 12
    59fc:	0a 95       	dec	r16
    59fe:	f1 f7       	brne	.-4      	; 0x59fc <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    5a00:	e8 e3       	ldi	r30, 0x38	; 56
		ldi ZH,hi8(ram_tiles_restore);
    5a02:	f9 e0       	ldi	r31, 0x09	; 9

		ldi YL,lo8(vram)
    5a04:	c0 e8       	ldi	r28, 0x80	; 128
		ldi YH,hi8(vram)
    5a06:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    5a08:	20 91 47 0c 	lds	r18, 0x0C47


		clr r16
    5a0c:	00 27       	eor	r16, r16

00005a0e <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    5a0e:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    5a10:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    5a12:	ac 0f       	add	r26, r28
		adc XH,YH
    5a14:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    5a16:	1c 91       	ld	r17, X
		std Z+2,r17
    5a18:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    5a1a:	02 17       	cp	r16, r18
		brsh noov
    5a1c:	08 f4       	brcc	.+2      	; 0x5a20 <noov>
		mov r17,r16
    5a1e:	10 2f       	mov	r17, r16

00005a20 <noov>:
	noov:
		st X,r17
    5a20:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    5a22:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    5a24:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    5a26:	01 31       	cpi	r16, 0x11	; 17
		brlo upd_loop ;23
    5a28:	90 f3       	brcs	.-28     	; 0x5a0e <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    5a2a:	0c e2       	ldi	r16, 0x2C	; 44

00005a2c <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    5a2c:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    5a2e:	1a 95       	dec	r17
		brne .-4
    5a30:	f1 f7       	brne	.-4      	; 0x5a2e <wait_loop+0x2>

		dec r16
    5a32:	0a 95       	dec	r16
		brne wait_loop
    5a34:	d9 f7       	brne	.-10     	; 0x5a2c <wait_loop>

		lds r2,overlay_tile_table
    5a36:	20 90 77 09 	lds	r2, 0x0977
		lds r3,overlay_tile_table+1
    5a3a:	30 90 78 09 	lds	r3, 0x0978
		lds r16,tile_table_lo 
    5a3e:	00 91 73 09 	lds	r16, 0x0973
		lds r17,tile_table_hi
    5a42:	10 91 74 09 	lds	r17, 0x0974
		movw r12,r16
    5a46:	68 01       	movw	r12, r16
		movw r6,r16
    5a48:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    5a4a:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    5a4c:	c0 e8       	ldi	r28, 0x80	; 128
		ldi YH,hi8(vram)
    5a4e:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    5a50:	4e 01       	movw	r8, r28
		clr r0
    5a52:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    5a54:	30 91 76 09 	lds	r19, 0x0976
		cpi r19,0
    5a58:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    5a5a:	09 f0       	breq	.+2      	; 0x5a5e <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    5a5c:	c8 ec       	ldi	r28, 0xC8	; 200
		
		breq .+2
    5a5e:	09 f0       	breq	.+2      	; 0x5a62 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    5a60:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    5a62:	09 f0       	breq	.+2      	; 0x5a66 <wait_loop+0x3a>
		mov r24,r19
    5a64:	83 2f       	mov	r24, r19

		breq .+2
    5a66:	09 f0       	breq	.+2      	; 0x5a6a <wait_loop+0x3e>
		movw r12,r2
    5a68:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    5a6a:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    5a6c:	a0 2e       	mov	r10, r16
		clr r22
    5a6e:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    5a70:	78 e0       	ldi	r23, 0x08	; 8

00005a72 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    5a72:	7e d2       	rcall	.+1276   	; 0x5f70 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    5a74:	36 e2       	ldi	r19, 0x26	; 38
    5a76:	3a 95       	dec	r19
    5a78:	f1 f7       	brne	.-4      	; 0x5a76 <next_tile_line+0x4>
    5a7a:	00 00       	nop

		;***draw line***
		call render_tile_line
    5a7c:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    5a80:	3f e0       	ldi	r19, 0x0F	; 15
    5a82:	3a 95       	dec	r19
    5a84:	f1 f7       	brne	.-4      	; 0x5a82 <next_tile_line+0x10>
    5a86:	00 00       	nop
    5a88:	00 00       	nop

		dec r10
    5a8a:	aa 94       	dec	r10
		breq frame_end
    5a8c:	a9 f0       	breq	.+42     	; 0x5ab8 <frame_end>
	
		inc r22
    5a8e:	63 95       	inc	r22
		lpm ;3 nop
    5a90:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    5a92:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    5a94:	31 f0       	breq	.+12     	; 0x5aa2 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    5a96:	33 e0       	ldi	r19, 0x03	; 3
    5a98:	3a 95       	dec	r19
    5a9a:	f1 f7       	brne	.-4      	; 0x5a98 <next_tile_line+0x26>
    5a9c:	00 00       	nop
    5a9e:	00 00       	nop
		
		rjmp next_tile_line	
    5aa0:	e8 cf       	rjmp	.-48     	; 0x5a72 <next_tile_line>

00005aa2 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    5aa2:	66 27       	eor	r22, r22

		clr r0
    5aa4:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    5aa6:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    5aa8:	c3 0f       	add	r28, r19
		adc YH,r0
    5aaa:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    5aac:	8a 95       	dec	r24
		brne .+2
    5aae:	09 f4       	brne	.+2      	; 0x5ab2 <next_tile_row+0x10>
		movw YL,r8	;main vram
    5ab0:	e4 01       	movw	r28, r8
		brne .+2
    5ab2:	09 f4       	brne	.+2      	; 0x5ab6 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    5ab4:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    5ab6:	dd cf       	rjmp	.-70     	; 0x5a72 <next_tile_line>

00005ab8 <frame_end>:

	frame_end:

		WAIT r19,18
    5ab8:	36 e0       	ldi	r19, 0x06	; 6
    5aba:	3a 95       	dec	r19
    5abc:	f1 f7       	brne	.-4      	; 0x5aba <frame_end+0x2>

		rcall hsync_pulse ;145
    5abe:	58 d2       	rcall	.+1200   	; 0x5f70 <hsync_pulse>
	
		clr r1
    5ac0:	11 24       	eor	r1, r1
		call RestoreBackground
    5ac2:	0e 94 80 3c 	call	0x7900	; 0x7900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    5ac6:	e0 91 7c 09 	lds	r30, 0x097C
		ldi r20,SYNC_FLAG_FIELD
    5aca:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    5acc:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    5ace:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    5ad0:	e0 93 7c 09 	sts	0x097C, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    5ad4:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    5ad6:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    5ada:	11 24       	eor	r1, r1


		ret
    5adc:	08 95       	ret

00005ade <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    5ade:	de 01       	movw	r26, r28

		mul r22,r23
    5ae0:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    5ae2:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5ae4:	00 54       	subi	r16, 0x40	; 64
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5ae6:	14 40       	sbci	r17, 0x04	; 4

		add r16,r0
    5ae8:	00 0d       	add	r16, r0
		adc r17,r1
    5aea:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    5aec:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    5aee:	08 ef       	ldi	r16, 0xF8	; 248
		ldi r17,hi8(ram_tiles)
    5af0:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    5af2:	00 0d       	add	r16, r0
		adc r17,r1
    5af4:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    5af6:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    5af8:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    5afa:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    5afc:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    5afe:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    5b00:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    5b02:	21 31       	cpi	r18, 0x11	; 17
		brcc .+2
    5b04:	08 f4       	brcc	.+2      	; 0x5b08 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    5b06:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    5b08:	04 0e       	add	r0, r20
	    adc r1,r21
    5b0a:	15 1e       	adc	r1, r21

		movw ZL,r0
    5b0c:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    5b0e:	21 31       	cpi	r18, 0x11	; 17
		brcs ramloop
    5b10:	f0 f0       	brcs	.+60     	; 0x5b4e <ramloop>

00005b12 <romloop>:
	

	romloop:
	    lpm r16,Z+
    5b12:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5b14:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    5b16:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    5b18:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    5b1a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5b1c:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    5b1e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    5b20:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    5b22:	21 31       	cpi	r18, 0x11	; 17
		nop
    5b24:	00 00       	nop

	    lpm r16,Z+
    5b26:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5b28:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    5b2a:	08 f4       	brcc	.+2      	; 0x5b2e <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    5b2c:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    5b2e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    5b30:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    5b32:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    5b34:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    5b36:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    5b38:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    5b3a:	21 31       	cpi	r18, 0x11	; 17
		dec r17			;decrement tiles to draw on line
    5b3c:	1a 95       	dec	r17
   
	    lpm r16,Z+
    5b3e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    5b40:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    5b42:	05 91       	lpm	r16, Z+

		breq end	
    5b44:	31 f1       	breq	.+76     	; 0x5b92 <end>
	    movw ZL,r0   	;copy next tile adress
    5b46:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5b48:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    5b4a:	18 f7       	brcc	.-58     	; 0x5b12 <romloop>
	
		rjmp .
    5b4c:	00 c0       	rjmp	.+0      	; 0x5b4e <ramloop>

00005b4e <ramloop>:

	ramloop:

	    ld r16,Z+
    5b4e:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5b50:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    5b52:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    5b54:	01 91       	ld	r16, Z+
		nop   
    5b56:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    5b58:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5b5a:	23 9f       	mul	r18, r19


	    ld r16,Z+
    5b5c:	01 91       	ld	r16, Z+
		nop
    5b5e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    5b60:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    5b62:	21 31       	cpi	r18, 0x11	; 17
   		rjmp .
    5b64:	00 c0       	rjmp	.+0      	; 0x5b66 <ramloop+0x18>

	    ld r16,Z+
    5b66:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5b68:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    5b6a:	08 f0       	brcs	.+2      	; 0x5b6e <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    5b6c:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    5b6e:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    5b70:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    5b72:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    5b74:	15 1e       	adc	r1, r21
		rjmp .
    5b76:	00 c0       	rjmp	.+0      	; 0x5b78 <ramloop+0x2a>
    
		ld r16,Z+		
    5b78:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    5b7a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    5b7c:	21 31       	cpi	r18, 0x11	; 17
		rjmp .  
    5b7e:	00 c0       	rjmp	.+0      	; 0x5b80 <ramloop+0x32>

	    ld r16,Z+	
    5b80:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    5b82:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    5b84:	01 91       	ld	r16, Z+

	    dec r17
    5b86:	1a 95       	dec	r17
	    breq end
    5b88:	21 f0       	breq	.+8      	; 0x5b92 <end>
	
		movw ZL,r0
    5b8a:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5b8c:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    5b8e:	08 f6       	brcc	.-126    	; 0x5b12 <romloop>
		rjmp ramloop
    5b90:	de cf       	rjmp	.-68     	; 0x5b4e <ramloop>

00005b92 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    5b92:	08 b9       	out	0x08, r16	; 8
		clr r16	
    5b94:	00 27       	eor	r16, r16
		lpm	
    5b96:	c8 95       	lpm
		nop
    5b98:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    5b9a:	08 b9       	out	0x08, r16	; 8

		ret
    5b9c:	08 95       	ret

00005b9e <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    5b9e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    5ba0:	e0 91 73 09 	lds	r30, 0x0973
	lds ZH,tile_table_hi
    5ba4:	f0 91 74 09 	lds	r31, 0x0974
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    5ba8:	81 51       	subi	r24, 0x11	; 17
	mul r24,r18
    5baa:	82 9f       	mul	r24, r18
	add ZL,r0
    5bac:	e0 0d       	add	r30, r0
	adc ZH,r1
    5bae:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    5bb0:	a8 ef       	ldi	r26, 0xF8	; 248
	ldi XH,hi8(ram_tiles)
    5bb2:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    5bb4:	62 9f       	mul	r22, r18
	add XL,r0
    5bb6:	a0 0d       	add	r26, r0
	adc XH,r1
    5bb8:	b1 1d       	adc	r27, r1

	clr r0
    5bba:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    5bbc:	05 90       	lpm	r0, Z+
    5bbe:	0d 92       	st	X+, r0
    5bc0:	05 90       	lpm	r0, Z+
    5bc2:	0d 92       	st	X+, r0
    5bc4:	05 90       	lpm	r0, Z+
    5bc6:	0d 92       	st	X+, r0
    5bc8:	05 90       	lpm	r0, Z+
    5bca:	0d 92       	st	X+, r0
    5bcc:	05 90       	lpm	r0, Z+
    5bce:	0d 92       	st	X+, r0
    5bd0:	05 90       	lpm	r0, Z+
    5bd2:	0d 92       	st	X+, r0
    5bd4:	05 90       	lpm	r0, Z+
    5bd6:	0d 92       	st	X+, r0
    5bd8:	05 90       	lpm	r0, Z+
    5bda:	0d 92       	st	X+, r0
    5bdc:	05 90       	lpm	r0, Z+
    5bde:	0d 92       	st	X+, r0
    5be0:	05 90       	lpm	r0, Z+
    5be2:	0d 92       	st	X+, r0
    5be4:	05 90       	lpm	r0, Z+
    5be6:	0d 92       	st	X+, r0
    5be8:	05 90       	lpm	r0, Z+
    5bea:	0d 92       	st	X+, r0
    5bec:	05 90       	lpm	r0, Z+
    5bee:	0d 92       	st	X+, r0
    5bf0:	05 90       	lpm	r0, Z+
    5bf2:	0d 92       	st	X+, r0
    5bf4:	05 90       	lpm	r0, Z+
    5bf6:	0d 92       	st	X+, r0
    5bf8:	05 90       	lpm	r0, Z+
    5bfa:	0d 92       	st	X+, r0
    5bfc:	05 90       	lpm	r0, Z+
    5bfe:	0d 92       	st	X+, r0
    5c00:	05 90       	lpm	r0, Z+
    5c02:	0d 92       	st	X+, r0
    5c04:	05 90       	lpm	r0, Z+
    5c06:	0d 92       	st	X+, r0
    5c08:	05 90       	lpm	r0, Z+
    5c0a:	0d 92       	st	X+, r0
    5c0c:	05 90       	lpm	r0, Z+
    5c0e:	0d 92       	st	X+, r0
    5c10:	05 90       	lpm	r0, Z+
    5c12:	0d 92       	st	X+, r0
    5c14:	05 90       	lpm	r0, Z+
    5c16:	0d 92       	st	X+, r0
    5c18:	05 90       	lpm	r0, Z+
    5c1a:	0d 92       	st	X+, r0
    5c1c:	05 90       	lpm	r0, Z+
    5c1e:	0d 92       	st	X+, r0
    5c20:	05 90       	lpm	r0, Z+
    5c22:	0d 92       	st	X+, r0
    5c24:	05 90       	lpm	r0, Z+
    5c26:	0d 92       	st	X+, r0
    5c28:	05 90       	lpm	r0, Z+
    5c2a:	0d 92       	st	X+, r0
    5c2c:	05 90       	lpm	r0, Z+
    5c2e:	0d 92       	st	X+, r0
    5c30:	05 90       	lpm	r0, Z+
    5c32:	0d 92       	st	X+, r0
    5c34:	05 90       	lpm	r0, Z+
    5c36:	0d 92       	st	X+, r0
    5c38:	05 90       	lpm	r0, Z+
    5c3a:	0d 92       	st	X+, r0
    5c3c:	05 90       	lpm	r0, Z+
    5c3e:	0d 92       	st	X+, r0
    5c40:	05 90       	lpm	r0, Z+
    5c42:	0d 92       	st	X+, r0
    5c44:	05 90       	lpm	r0, Z+
    5c46:	0d 92       	st	X+, r0
    5c48:	05 90       	lpm	r0, Z+
    5c4a:	0d 92       	st	X+, r0
    5c4c:	05 90       	lpm	r0, Z+
    5c4e:	0d 92       	st	X+, r0
    5c50:	05 90       	lpm	r0, Z+
    5c52:	0d 92       	st	X+, r0
    5c54:	05 90       	lpm	r0, Z+
    5c56:	0d 92       	st	X+, r0
    5c58:	05 90       	lpm	r0, Z+
    5c5a:	0d 92       	st	X+, r0
    5c5c:	05 90       	lpm	r0, Z+
    5c5e:	0d 92       	st	X+, r0
    5c60:	05 90       	lpm	r0, Z+
    5c62:	0d 92       	st	X+, r0
    5c64:	05 90       	lpm	r0, Z+
    5c66:	0d 92       	st	X+, r0
    5c68:	05 90       	lpm	r0, Z+
    5c6a:	0d 92       	st	X+, r0
    5c6c:	05 90       	lpm	r0, Z+
    5c6e:	0d 92       	st	X+, r0
    5c70:	05 90       	lpm	r0, Z+
    5c72:	0d 92       	st	X+, r0
    5c74:	05 90       	lpm	r0, Z+
    5c76:	0d 92       	st	X+, r0
    5c78:	05 90       	lpm	r0, Z+
    5c7a:	0d 92       	st	X+, r0
    5c7c:	05 90       	lpm	r0, Z+
    5c7e:	0d 92       	st	X+, r0
    5c80:	05 90       	lpm	r0, Z+
    5c82:	0d 92       	st	X+, r0
    5c84:	05 90       	lpm	r0, Z+
    5c86:	0d 92       	st	X+, r0
    5c88:	05 90       	lpm	r0, Z+
    5c8a:	0d 92       	st	X+, r0
    5c8c:	05 90       	lpm	r0, Z+
    5c8e:	0d 92       	st	X+, r0
    5c90:	05 90       	lpm	r0, Z+
    5c92:	0d 92       	st	X+, r0
    5c94:	05 90       	lpm	r0, Z+
    5c96:	0d 92       	st	X+, r0
    5c98:	05 90       	lpm	r0, Z+
    5c9a:	0d 92       	st	X+, r0
    5c9c:	05 90       	lpm	r0, Z+
    5c9e:	0d 92       	st	X+, r0
    5ca0:	05 90       	lpm	r0, Z+
    5ca2:	0d 92       	st	X+, r0
    5ca4:	05 90       	lpm	r0, Z+
    5ca6:	0d 92       	st	X+, r0
    5ca8:	05 90       	lpm	r0, Z+
    5caa:	0d 92       	st	X+, r0
    5cac:	05 90       	lpm	r0, Z+
    5cae:	0d 92       	st	X+, r0
    5cb0:	05 90       	lpm	r0, Z+
    5cb2:	0d 92       	st	X+, r0
    5cb4:	05 90       	lpm	r0, Z+
    5cb6:	0d 92       	st	X+, r0
    5cb8:	05 90       	lpm	r0, Z+
    5cba:	0d 92       	st	X+, r0


	clr r1
    5cbc:	11 24       	eor	r1, r1
	ret
    5cbe:	08 95       	ret

00005cc0 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    5cc0:	0f 93       	push	r16
	push r17
    5cc2:	1f 93       	push	r17
	push YL
    5cc4:	cf 93       	push	r28
	push YH
    5cc6:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    5cc8:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    5cca:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    5ccc:	e8 ec       	ldi	r30, 0xC8	; 200
	ldi ZH,hi8(sprites)	
    5cce:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    5cd0:	e0 0d       	add	r30, r0
	adc ZH,r1
    5cd2:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    5cd4:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    5cd6:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    5cd8:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    5cda:	8e 9f       	mul	r24, r30
	movw r26,r0
    5cdc:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    5cde:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    5ce0:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    5ce2:	cb e6       	ldi	r28, 0x6B	; 107
	ldi YH,hi8(sprites_tile_banks)	
    5ce4:	d9 e0       	ldi	r29, 0x09	; 9
	clr r0
    5ce6:	00 24       	eor	r0, r0
	add YL,r1
    5ce8:	c1 0d       	add	r28, r1
	adc YH,r0		
    5cea:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    5cec:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    5cee:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    5cf0:	ea 0f       	add	r30, r26
	adc ZH,r27
    5cf2:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    5cf4:	a8 ef       	ldi	r26, 0xF8	; 248
	ldi XH,hi8(ram_tiles)
    5cf6:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    5cf8:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    5cfa:	69 9f       	mul	r22, r25
	add XL,r0
    5cfc:	a0 0d       	add	r26, r0
	adc XH,r1
    5cfe:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    5d00:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    5d02:	dd 27       	eor	r29, r29

	cpi r20,0	
    5d04:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    5d06:	51 f4       	brne	.+20     	; 0x5d1c <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    5d08:	a2 0f       	add	r26, r18
	adc XH,r1
    5d0a:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    5d0c:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    5d0e:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    5d10:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    5d12:	11 c0       	rjmp	.+34     	; 0x5d36 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    5d14:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    5d16:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    5d18:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    5d1a:	0d c0       	rjmp	.+26     	; 0x5d36 <x_check_end>

00005d1c <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    5d1c:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    5d1e:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    5d20:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    5d22:	04 c0       	rjmp	.+8      	; 0x5d2c <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    5d24:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    5d26:	e8 0f       	add	r30, r24
	adc ZH,r1	
    5d28:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    5d2a:	05 c0       	rjmp	.+10     	; 0x5d36 <x_check_end>

00005d2c <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    5d2c:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    5d2e:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    5d30:	e2 0f       	add	r30, r18
	adc ZH,r1
    5d32:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    5d34:	31 97       	sbiw	r30, 0x01	; 1

00005d36 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    5d36:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    5d38:	41 f4       	brne	.+16     	; 0x5d4a <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    5d3a:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    5d3c:	93 9f       	mul	r25, r19
	add XL,r0
    5d3e:	a0 0d       	add	r26, r0
	adc XH,r1
    5d40:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    5d42:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    5d44:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    5d46:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    5d48:	0a c0       	rjmp	.+20     	; 0x5d5e <y_check_end>

00005d4a <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    5d4a:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    5d4c:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    5d4e:	63 2f       	mov	r22, r19
	dec r22
    5d50:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    5d52:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    5d54:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    5d56:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    5d58:	56 9f       	mul	r21, r22
	add ZL,r0
    5d5a:	e0 0d       	add	r30, r0
	adc ZH,r1	
    5d5c:	f1 1d       	adc	r31, r1

00005d5e <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    5d5e:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    5d60:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    5d62:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    5d64:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    5d66:	00 ff       	sbrs	r16, 0
	clr r23
    5d68:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    5d6a:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    5d6c:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    5d6e:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    5d70:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    5d72:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    5d74:	59 1b       	sub	r21, r25

00005d76 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    5d76:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    5d78:	48 1b       	sub	r20, r24

00005d7a <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    5d7a:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    5d7c:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    5d7e:	2c 93       	st	X, r18
	adiw XL,1
    5d80:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    5d82:	e6 0f       	add	r30, r22
	adc ZH,r23
    5d84:	f7 1f       	adc	r31, r23
	dec r20
    5d86:	4a 95       	dec	r20
	brne x_loop
    5d88:	c1 f7       	brne	.-16     	; 0x5d7a <x_loop>

	add ZL,YL		;src+=srcXdiff
    5d8a:	ec 0f       	add	r30, r28
	adc ZH,YH
    5d8c:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    5d8e:	a8 0f       	add	r26, r24
	adc XH,r1
    5d90:	b1 1d       	adc	r27, r1
	dec r21
    5d92:	5a 95       	dec	r21
	brne y_loop
    5d94:	81 f7       	brne	.-32     	; 0x5d76 <y_loop>


	pop YH
    5d96:	df 91       	pop	r29
	pop YL
    5d98:	cf 91       	pop	r28
	pop r17
    5d9a:	1f 91       	pop	r17
	pop r16
    5d9c:	0f 91       	pop	r16
	ret
    5d9e:	08 95       	ret

00005da0 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    5da0:	0f 92       	push	r0
	push r1
    5da2:	1f 92       	push	r1
	push ZL;2
    5da4:	ef 93       	push	r30
	push ZH;2
    5da6:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5da8:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5daa:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5dac:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    5db0:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    5db2:	f1 e0       	ldi	r31, 0x01	; 1

00005db4 <latency_loop>:
latency_loop:
	cp ZL,ZH
    5db4:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    5db6:	00 f0       	brcs	.+0      	; 0x5db8 <latency_loop+0x4>
	inc ZH
    5db8:	f3 95       	inc	r31
	cpi ZH,10
    5dba:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    5dbc:	d8 f3       	brcs	.-10     	; 0x5db4 <latency_loop>
	jmp .
    5dbe:	0c 94 e1 2e 	jmp	0x5dc2	; 0x5dc2 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    5dc2:	e0 91 7b 09 	lds	r30, 0x097B
	dec ZL
    5dc6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5dc8:	e0 93 7b 09 	sts	0x097B, r30

	;process sync phases
	lds ZH,sync_phase
    5dcc:	f0 91 7a 09 	lds	r31, 0x097A
	sbrc ZH,0
    5dd0:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    5dd2:	57 c0       	rjmp	.+174    	; 0x5e82 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5dd4:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    5dd6:	98 f0       	brcs	.+38     	; 0x5dfe <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    5dd8:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    5dda:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    5dde:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    5de0:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    5de4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    5de6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    5de8:	26 f4       	brtc	.+8      	; 0x5df2 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    5dea:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5dec:	0e 94 99 30 	call	0x6132	; 0x6132 <update_sound>
	rjmp sync_end
    5df0:	b8 c0       	rjmp	.+368    	; 0x5f62 <sync_end>

00005df2 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    5df2:	e5 e1       	ldi	r30, 0x15	; 21
    5df4:	ea 95       	dec	r30
    5df6:	f1 f7       	brne	.-4      	; 0x5df4 <sync_pre_eq_no_sound_update+0x2>
    5df8:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5dfa:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    5dfc:	b2 c0       	rjmp	.+356    	; 0x5f62 <sync_end>

00005dfe <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    5dfe:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    5e00:	38 f1       	brcs	.+78     	; 0x5e50 <sync_post_eq>

	rjmp .
    5e02:	00 c0       	rjmp	.+0      	; 0x5e04 <sync_eq+0x6>
	rjmp .
    5e04:	00 c0       	rjmp	.+0      	; 0x5e06 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5e06:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    5e08:	e0 fb       	bst	r30, 0
	ldi ZL,4
    5e0a:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    5e0c:	16 f4       	brtc	.+4      	; 0x5e12 <sync_eq_skip>
	
	call update_sound
    5e0e:	0e 94 99 30 	call	0x6132	; 0x6132 <update_sound>

00005e12 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    5e12:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    5e14:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    5e18:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    5e1a:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    5e1e:	a1 c0       	rjmp	.+322    	; 0x5f62 <sync_end>

00005e20 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    5e20:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5e22:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5e24:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5e26:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    5e2a:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    5e2c:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    5e2e:	00 f0       	brcs	.+0      	; 0x5e30 <__vector_14+0x10>

	cpi ZL,2
    5e30:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    5e32:	00 f0       	brcs	.+0      	; 0x5e34 <__vector_14+0x14>

	cpi ZL,3
    5e34:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    5e36:	00 f0       	brcs	.+0      	; 0x5e38 <__vector_14+0x18>

	cpi ZL,4
    5e38:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    5e3a:	00 f0       	brcs	.+0      	; 0x5e3c <__vector_14+0x1c>

	cpi ZL,5
    5e3c:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    5e3e:	00 f0       	brcs	.+0      	; 0x5e40 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    5e40:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    5e42:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    5e44:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    5e48:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    5e4a:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    5e4c:	ef 91       	pop	r30
	reti
    5e4e:	18 95       	reti

00005e50 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    5e50:	00 c0       	rjmp	.+0      	; 0x5e52 <sync_post_eq+0x2>

	bst ZL,0
    5e52:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5e54:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    5e56:	26 f4       	brtc	.+8      	; 0x5e60 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    5e58:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5e5a:	0e 94 99 30 	call	0x6132	; 0x6132 <update_sound>
	rjmp sync_pre_eq_cont
    5e5e:	05 c0       	rjmp	.+10     	; 0x5e6a <sync_pre_eq_cont>

00005e60 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    5e60:	e5 e1       	ldi	r30, 0x15	; 21
    5e62:	ea 95       	dec	r30
    5e64:	f1 f7       	brne	.-4      	; 0x5e62 <sync_post_eq_no_sound_update+0x2>
    5e66:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    5e68:	28 9a       	sbi	0x05, 0	; 5

00005e6a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    5e6a:	e0 91 7b 09 	lds	r30, 0x097B
	cpi ZL,0
    5e6e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    5e70:	09 f0       	breq	.+2      	; 0x5e74 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    5e72:	77 c0       	rjmp	.+238    	; 0x5f62 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    5e74:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    5e76:	e0 93 7b 09 	sts	0x097B, r30
	ldi ZL,1
    5e7a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    5e7c:	e0 93 7a 09 	sts	0x097A, r30
	
	rjmp sync_end
    5e80:	70 c0       	rjmp	.+224    	; 0x5f62 <sync_end>

00005e82 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    5e82:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    5e84:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    5e88:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    5e8a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    5e8e:	00 c0       	rjmp	.+0      	; 0x5e90 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5e90:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    5e92:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5e94:	00 c0       	rjmp	.+0      	; 0x5e96 <sync_hsync+0x14>
	call update_sound
    5e96:	0e 94 99 30 	call	0x6132	; 0x6132 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    5e9a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5e9c:	00 90 81 09 	lds	r0, 0x0981
	sub ZH,r0				
    5ea0:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    5ea2:	e0 91 7b 09 	lds	r30, 0x097B
	cp ZL,ZH
    5ea6:	ef 17       	cp	r30, r31
	brsh no_render
    5ea8:	e0 f4       	brcc	.+56     	; 0x5ee2 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    5eaa:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5eac:	00 90 81 09 	lds	r0, 0x0981
	sub ZH,r0				
    5eb0:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    5eb2:	00 90 82 09 	lds	r0, 0x0982
	sub ZH,r0			
    5eb6:	f0 19       	sub	r31, r0
	cp ZL,ZH
    5eb8:	ef 17       	cp	r30, r31
	brlo no_render
    5eba:	98 f0       	brcs	.+38     	; 0x5ee2 <no_render>

	;push r1-r29
	ldi ZL,29
    5ebc:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    5ebe:	ff 27       	eor	r31, r31

00005ec0 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    5ec0:	00 80       	ld	r0, Z
	push r0
    5ec2:	0f 92       	push	r0
	dec ZL
    5ec4:	ea 95       	dec	r30
	brne push_loop	
    5ec6:	e1 f7       	brne	.-8      	; 0x5ec0 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    5ec8:	0f e1       	ldi	r16, 0x1F	; 31
    5eca:	0a 95       	dec	r16
    5ecc:	f1 f7       	brne	.-4      	; 0x5eca <push_loop+0xa>
    5ece:	00 00       	nop
    5ed0:	00 00       	nop

	call VMODE_FUNC		;TCNT1=0x234
    5ed2:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    5ed6:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    5ed8:	ff 27       	eor	r31, r31

00005eda <pop_loop>:
pop_loop:
	pop r0
    5eda:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    5edc:	01 92       	st	Z+, r0
	cpi ZL,30
    5ede:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    5ee0:	e0 f3       	brcs	.-8      	; 0x5eda <pop_loop>

00005ee2 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    5ee2:	e0 91 7b 09 	lds	r30, 0x097B
	cpi ZL,0
    5ee6:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    5ee8:	09 f0       	breq	.+2      	; 0x5eec <no_render+0xa>
	rjmp sync_end
    5eea:	3b c0       	rjmp	.+118    	; 0x5f62 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    5eec:	2f 93       	push	r18
	push r19
    5eee:	3f 93       	push	r19
	push r20
    5ef0:	4f 93       	push	r20
	push r21
    5ef2:	5f 93       	push	r21
	push r22
    5ef4:	6f 93       	push	r22
	push r23
    5ef6:	7f 93       	push	r23
	push r24
    5ef8:	8f 93       	push	r24
	push r25
    5efa:	9f 93       	push	r25
	push r26
    5efc:	af 93       	push	r26
	push r27
    5efe:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    5f00:	78 94       	sei
	clr r1
    5f02:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    5f04:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    5f06:	e0 93 7a 09 	sts	0x097A, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5f0a:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    5f0c:	e0 93 7b 09 	sts	0x097B, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    5f10:	f0 91 83 09 	lds	r31, 0x0983
	sts first_render_line,ZH
    5f14:	f0 93 81 09 	sts	0x0981, r31
	
	lds ZH,render_lines_count_tmp
    5f18:	f0 91 84 09 	lds	r31, 0x0984
	sts render_lines_count,ZH
    5f1c:	f0 93 82 09 	sts	0x0982, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    5f20:	e0 91 7d 09 	lds	r30, 0x097D
	lds ZH,pre_vsync_user_callback+1
    5f24:	f0 91 7e 09 	lds	r31, 0x097E
	cp  ZL,r1
    5f28:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5f2a:	f1 05       	cpc	r31, r1
	breq .+2 
    5f2c:	09 f0       	breq	.+2      	; 0x5f30 <no_render+0x4e>
	icall
    5f2e:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    5f30:	0e 94 5e 31 	call	0x62bc	; 0x62bc <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    5f34:	0e 94 20 3f 	call	0x7e40	; 0x7e40 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    5f38:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <process_music>
	clr r1
    5f3c:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    5f3e:	e0 91 7f 09 	lds	r30, 0x097F
	lds ZH,post_vsync_user_callback+1
    5f42:	f0 91 80 09 	lds	r31, 0x0980
	cp  ZL,r1
    5f46:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5f48:	f1 05       	cpc	r31, r1
	breq .+2 
    5f4a:	09 f0       	breq	.+2      	; 0x5f4e <no_render+0x6c>
	icall
    5f4c:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    5f4e:	bf 91       	pop	r27
	pop r26
    5f50:	af 91       	pop	r26
	pop r25
    5f52:	9f 91       	pop	r25
	pop r24
    5f54:	8f 91       	pop	r24
	pop r23
    5f56:	7f 91       	pop	r23
	pop r22
    5f58:	6f 91       	pop	r22
	pop r21
    5f5a:	5f 91       	pop	r21
	pop r20
    5f5c:	4f 91       	pop	r20
	pop r19
    5f5e:	3f 91       	pop	r19
	pop r18
    5f60:	2f 91       	pop	r18

00005f62 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    5f62:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    5f64:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    5f66:	ff 91       	pop	r31
	pop ZL
    5f68:	ef 91       	pop	r30
	pop r1
    5f6a:	1f 90       	pop	r1
	pop r0
    5f6c:	0f 90       	pop	r0
	reti
    5f6e:	18 95       	reti

00005f70 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5f70:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    5f72:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5f74:	00 c0       	rjmp	.+0      	; 0x5f76 <hsync_pulse+0x6>
	call update_sound
    5f76:	0e 94 99 30 	call	0x6132	; 0x6132 <update_sound>

	lds ZL,sync_pulse
    5f7a:	e0 91 7b 09 	lds	r30, 0x097B
	dec ZL
    5f7e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5f80:	e0 93 7b 09 	sts	0x097B, r30

	ret
    5f84:	08 95       	ret

00005f86 <process_music>:
process_music:

	//call update_sound
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    5f86:	e0 91 b1 0b 	lds	r30, 0x0BB1
	sbrc ZL,0
    5f8a:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    5f8c:	0e 94 22 34 	call	0x6844	; 0x6844 <ProcessMusic>
#endif


	;Flip mix bank & set target bank adress for mixing
	lds r0,mix_bank
    5f90:	00 90 af 0b 	lds	r0, 0x0BAF
	tst r0
    5f94:	00 20       	and	r0, r0
	brne set_hi_bank
    5f96:	19 f4       	brne	.+6      	; 0x5f9e <set_hi_bank>
	ldi XL,lo8(mix_buf)
    5f98:	a1 ea       	ldi	r26, 0xA1	; 161
	ldi XH,hi8(mix_buf)
    5f9a:	b9 e0       	ldi	r27, 0x09	; 9
	rjmp end_set_bank
    5f9c:	02 c0       	rjmp	.+4      	; 0x5fa2 <end_set_bank>

00005f9e <set_hi_bank>:
set_hi_bank:
	ldi XL,lo8(mix_buf+MIX_BANK_SIZE)
    5f9e:	a7 ea       	ldi	r26, 0xA7	; 167
	ldi XH,hi8(mix_buf+MIX_BANK_SIZE)
    5fa0:	ba e0       	ldi	r27, 0x0A	; 10

00005fa2 <end_set_bank>:
end_set_bank:

	ldi r18,1
    5fa2:	21 e0       	ldi	r18, 0x01	; 1
	eor	r0,r18
    5fa4:	02 26       	eor	r0, r18
	sts mix_bank,r0
    5fa6:	00 92 af 0b 	sts	0x0BAF, r0
	
	ldi r18,2
    5faa:	22 e0       	ldi	r18, 0x02	; 2
	sts mix_block,r18	
    5fac:	20 93 b0 0b 	sts	0x0BB0, r18


#if ENABLE_MIXER==1

	lds ZL,sound_enabled
    5fb0:	e0 91 b1 0b 	lds	r30, 0x0BB1
	sbrs ZL,0
    5fb4:	e0 ff       	sbrs	r30, 0
	ret
    5fb6:	08 95       	ret

	push r2
    5fb8:	2f 92       	push	r2
	push r3
    5fba:	3f 92       	push	r3
	push r4
    5fbc:	4f 92       	push	r4
	push r5
    5fbe:	5f 92       	push	r5
	push r6
    5fc0:	6f 92       	push	r6
	push r7
    5fc2:	7f 92       	push	r7
	push r8
    5fc4:	8f 92       	push	r8
	push r9
    5fc6:	9f 92       	push	r9
	push r10
    5fc8:	af 92       	push	r10
	push r11
    5fca:	bf 92       	push	r11
	push r12
    5fcc:	cf 92       	push	r12
	push r13
    5fce:	df 92       	push	r13
	push r14
    5fd0:	ef 92       	push	r14
	push r15
    5fd2:	ff 92       	push	r15
	push r16
    5fd4:	0f 93       	push	r16
	push r17
    5fd6:	1f 93       	push	r17
	push r28
    5fd8:	cf 93       	push	r28
	push r29
    5fda:	df 93       	push	r29
	;mix channels

	#if SOUND_CHANNEL_4_ENABLE == 1

		#if MIXER_CHAN4_TYPE == 0	
			lds r21,tr4_vol
    5fdc:	50 91 c4 0b 	lds	r21, 0x0BC4
			lds r22,tr4_barrel_lo
    5fe0:	60 91 c6 0b 	lds	r22, 0x0BC6
			lds r23,tr4_barrel_hi
    5fe4:	70 91 c7 0b 	lds	r23, 0x0BC7
			lds r24,tr4_divider
    5fe8:	80 91 c8 0b 	lds	r24, 0x0BC8





	lds r2,tr1_step_lo
    5fec:	20 90 b3 0b 	lds	r2, 0x0BB3
	lds r3,tr1_step_hi
    5ff0:	30 90 b4 0b 	lds	r3, 0x0BB4
	lds r4,tr1_pos_lo
    5ff4:	40 90 b6 0b 	lds	r4, 0x0BB6
	lds r5,tr1_pos_hi 
    5ff8:	50 90 b7 0b 	lds	r5, 0x0BB7
	lds r6,tr1_pos_frac
    5ffc:	60 90 b5 0b 	lds	r6, 0x0BB5
	lds r17,tr1_vol
    6000:	10 91 b2 0b 	lds	r17, 0x0BB2
	
	lds r7,tr2_step_lo
    6004:	70 90 b9 0b 	lds	r7, 0x0BB9
	lds r8,tr2_step_hi
    6008:	80 90 ba 0b 	lds	r8, 0x0BBA
	lds r9,tr2_pos_frac
    600c:	90 90 bb 0b 	lds	r9, 0x0BBB
	lds r10,tr2_pos_lo
    6010:	a0 90 bc 0b 	lds	r10, 0x0BBC
	lds r11,tr2_pos_hi
    6014:	b0 90 bd 0b 	lds	r11, 0x0BBD
	lds r18,tr2_vol	
    6018:	20 91 b8 0b 	lds	r18, 0x0BB8

	lds r12,tr3_step_lo
    601c:	c0 90 bf 0b 	lds	r12, 0x0BBF
	lds r13,tr3_step_hi
    6020:	d0 90 c0 0b 	lds	r13, 0x0BC0
	lds r14,tr3_pos_lo
    6024:	e0 90 c2 0b 	lds	r14, 0x0BC2
	lds r15,tr3_pos_hi
    6028:	f0 90 c3 0b 	lds	r15, 0x0BC3
	lds r16,tr3_pos_frac
    602c:	00 91 c1 0b 	lds	r16, 0x0BC1
	lds r19,tr3_vol	
    6030:	30 91 be 0b 	lds	r19, 0x0BBE



	

	ldi r25,0xff 
    6034:	9f ef       	ldi	r25, 0xFF	; 255

00006036 <mix_loop>:
		sbrc r28,7
		ser r29
	#endif

	;channel 1 - 12 cycles/sample
	add	r6,r2	;add step to fractional part of sample pos
    6036:	62 0c       	add	r6, r2
	adc r4,r3	;add step to low byte of sample pos
    6038:	43 1c       	adc	r4, r3
	movw ZL,r4
    603a:	f2 01       	movw	r30, r4
	lpm	r20,Z	;load sample
    603c:	44 91       	lpm	r20, Z
	mulsu r20,r17;(sample*mixing vol)
    603e:	41 03       	mulsu	r20, r17
	;clr r0
	sbc r0,r0	;sign extend
    6040:	00 08       	sbc	r0, r0

	#if MIXER_CHAN4_TYPE == 0 || SOUND_CHANNEL_4_ENABLE == 0
		mov r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6042:	c1 2d       	mov	r28, r1
		mov r29,r0	;ajust mix buffer msb
    6044:	d0 2d       	mov	r29, r0
		adc r29,r0	;ajust mix buffer msb		
	#endif

	#if SOUND_CHANNEL_2_ENABLE == 1
		;channel 2
		add	r9,r7	;add step to fractional part of sample pos
    6046:	97 0c       	add	r9, r7
		adc r10,r8	;add step to low byte of sample pos 
    6048:	a8 1c       	adc	r10, r8
		movw ZL,r10
    604a:	f5 01       	movw	r30, r10
		lpm	r20,Z	;load sample
    604c:	44 91       	lpm	r20, Z
		mulsu r20,r18;(sample*mixing vol)
    604e:	42 03       	mulsu	r20, r18
		;clr r0
		sbc r0,r0	;sign extend
    6050:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6052:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    6054:	d0 1d       	adc	r29, r0
	#endif 

	#if SOUND_CHANNEL_3_ENABLE == 1
		;channel 3
		add	r16,r12	;add step to fractional part of sample pos
    6056:	0c 0d       	add	r16, r12
		adc r14,r13	;add step to low byte of sample pos 
    6058:	ed 1c       	adc	r14, r13
		movw ZL,r14
    605a:	f7 01       	movw	r30, r14
		lpm	r20,Z	;load sample
    605c:	44 91       	lpm	r20, Z
		mulsu r20,r19;(sample*mixing vol)
    605e:	43 03       	mulsu	r20, r19
		;clr r0
		sbc r0,r0	;sign extend
    6060:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6062:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    6064:	d0 1d       	adc	r29, r0
	#endif

	#if MIXER_CHAN4_TYPE == 0 && SOUND_CHANNEL_4_ENABLE == 1	

		;channel 4 - 7/15 bit LFSR (12 cycles/24 cycles)
		dec r24
    6066:	8a 95       	dec	r24
		brpl no_shift
    6068:	6a f4       	brpl	.+26     	; 0x6084 <no_shift>

		lds r20,tr4_params
    606a:	40 91 c5 0b 	lds	r20, 0x0BC5
		mov r24,r20
    606e:	84 2f       	mov	r24, r20
		lsr r24 ;keep bits7:1
    6070:	86 95       	lsr	r24

		mov r0,r22  ;copy barrel shifter
    6072:	06 2e       	mov	r0, r22
		lsr r0
    6074:	06 94       	lsr	r0
		eor r0,r22  ;xor bit0 and bit1
    6076:	06 26       	eor	r0, r22
		bst r0,0
    6078:	00 fa       	bst	r0, 0
		lsr r23
    607a:	76 95       	lsr	r23
		ror r22	
    607c:	67 95       	ror	r22
		bld r23,6	;15 bits mode
    607e:	76 f9       	bld	r23, 6
		sbrs r20,0
    6080:	40 ff       	sbrs	r20, 0
		bld r22,6	;7 bits mode
    6082:	66 f9       	bld	r22, 6

00006084 <no_shift>:

	no_shift:
		ldi r20,0x80 ;-128
    6084:	40 e8       	ldi	r20, 0x80	; 128
		sbrc r22,0
    6086:	60 fd       	sbrc	r22, 0
		ldi r20,0x7f ;+127
    6088:	4f e7       	ldi	r20, 0x7F	; 127

		mulsu r20,r21;(sample*mixing vol)
    608a:	45 03       	mulsu	r20, r21
		;clr r0
		sbc r0,r0	;sign extend
    608c:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    608e:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    6090:	d0 1d       	adc	r29, r0
	#endif

	;final processing

	;clip
	clr r0
    6092:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6094:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6096:	d0 05       	cpc	r29, r0
	brlt .+2
    6098:	0c f0       	brlt	.+2      	; 0x609c <no_shift+0x18>
	ldi r28,127
    609a:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    609c:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    609e:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    60a0:	d0 05       	cpc	r29, r0
	brge .+2
    60a2:	0c f4       	brge	.+2      	; 0x60a6 <no_shift+0x22>
	ldi r28,-128
    60a4:	c0 e8       	ldi	r28, 0x80	; 128


	subi r28,128	;convert to unsigned
    60a6:	c0 58       	subi	r28, 0x80	; 128
	st X+,r28
    60a8:	cd 93       	st	X+, r28


	dec r25
    60aa:	9a 95       	dec	r25
	breq .+2
    60ac:	09 f0       	breq	.+2      	; 0x60b0 <no_shift+0x2c>
	rjmp mix_loop
    60ae:	c3 cf       	rjmp	.-122    	; 0x6036 <mix_loop>

	lds r20,mix_block
    60b0:	40 91 b0 0b 	lds	r20, 0x0BB0
	dec r20
    60b4:	4a 95       	dec	r20
	sts mix_block,r20
    60b6:	40 93 b0 0b 	sts	0x0BB0, r20
	ldi r25,(MIX_BANK_SIZE-0xff)
    60ba:	97 e0       	ldi	r25, 0x07	; 7
	breq .+2
    60bc:	09 f0       	breq	.+2      	; 0x60c0 <no_shift+0x3c>
	rjmp mix_loop
    60be:	bb cf       	rjmp	.-138    	; 0x6036 <mix_loop>


	//save current positions
	sts tr1_pos_frac,r6
    60c0:	60 92 b5 0b 	sts	0x0BB5, r6
	sts tr1_pos_lo,r4	
    60c4:	40 92 b6 0b 	sts	0x0BB6, r4

	sts tr2_pos_frac,r9
    60c8:	90 92 bb 0b 	sts	0x0BBB, r9
	sts tr2_pos_lo,r10
    60cc:	a0 92 bc 0b 	sts	0x0BBC, r10

	sts tr3_pos_frac,r16
    60d0:	00 93 c1 0b 	sts	0x0BC1, r16
	sts tr3_pos_lo,r14
    60d4:	e0 92 c2 0b 	sts	0x0BC2, r14

#if MIXER_CHAN4_TYPE == 0
	sts tr4_barrel_lo,r22
    60d8:	60 93 c6 0b 	sts	0x0BC6, r22
	sts tr4_barrel_hi,r23
    60dc:	70 93 c7 0b 	sts	0x0BC7, r23
	sts tr4_divider,r24
    60e0:	80 93 c8 0b 	sts	0x0BC8, r24
	sts tr4_pos_hi,r23
	sts tr4_pos_frac,r24

#endif

	pop r29
    60e4:	df 91       	pop	r29
	pop r28
    60e6:	cf 91       	pop	r28
	pop r17
    60e8:	1f 91       	pop	r17
	pop r16
    60ea:	0f 91       	pop	r16
	pop r15
    60ec:	ff 90       	pop	r15
	pop r14
    60ee:	ef 90       	pop	r14
	pop r13
    60f0:	df 90       	pop	r13
	pop r12
    60f2:	cf 90       	pop	r12
	pop r11
    60f4:	bf 90       	pop	r11
	pop r10
    60f6:	af 90       	pop	r10
	pop r9
    60f8:	9f 90       	pop	r9
	pop r8
    60fa:	8f 90       	pop	r8
	pop r7
    60fc:	7f 90       	pop	r7
	pop r6
    60fe:	6f 90       	pop	r6
	pop r5
    6100:	5f 90       	pop	r5
	pop r4
    6102:	4f 90       	pop	r4
	pop r3
    6104:	3f 90       	pop	r3
	pop r2
    6106:	2f 90       	pop	r2

#endif // ENABLE_MIXER==1

	ret
    6108:	08 95       	ret

0000610a <update_sound_buffer_fast>:
; NO MIDI
; Destroys: Z,r16,r17
; Cycles: 24
;**********************************
update_sound_buffer_fast:
	lds ZL,mix_pos
    610a:	e0 91 ad 0b 	lds	r30, 0x0BAD
	lds ZH,mix_pos+1
    610e:	f0 91 ae 0b 	lds	r31, 0x0BAE
			
	ld r16,Z+		;load next sample
    6112:	01 91       	ld	r16, Z+
	;subi r16,128	;convert to unsigned
	nop
    6114:	00 00       	nop
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    6116:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    611a:	0b e0       	ldi	r16, 0x0B	; 11
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    611c:	ed 3a       	cpi	r30, 0xAD	; 173
	cpc ZH,r16
    611e:	f0 07       	cpc	r31, r16
	;12

	ldi r16,lo8(mix_buf)
    6120:	01 ea       	ldi	r16, 0xA1	; 161
	ldi r17,hi8(mix_buf)
    6122:	19 e0       	ldi	r17, 0x09	; 9
	brlo .+2
    6124:	08 f0       	brcs	.+2      	; 0x6128 <update_sound_buffer_fast+0x1e>
	movw ZL,r16
    6126:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    6128:	e0 93 ad 0b 	sts	0x0BAD, r30
	sts mix_pos+1,ZH		
    612c:	f0 93 ae 0b 	sts	0x0BAE, r31

	ret ;20+4=24
    6130:	08 95       	ret

00006132 <update_sound>:
; Destroys: ZH
; Cycles: VSYNC = 68
;         HSYNC = 135
;***********************
update_sound:
	push r16
    6132:	0f 93       	push	r16
	push r17
    6134:	1f 93       	push	r17
	push r18
    6136:	2f 93       	push	r18
	push ZL
    6138:	ef 93       	push	r30

	lds ZL,mix_pos
    613a:	e0 91 ad 0b 	lds	r30, 0x0BAD
	lds ZH,mix_pos+1
    613e:	f0 91 ae 0b 	lds	r31, 0x0BAE
			
	ld r16,Z+
    6142:	01 91       	ld	r16, Z+
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    6144:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    6148:	0b e0       	ldi	r16, 0x0B	; 11
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    614a:	ed 3a       	cpi	r30, 0xAD	; 173
	cpc ZH,r16
    614c:	f0 07       	cpc	r31, r16

	ldi r16,lo8(mix_buf)
    614e:	01 ea       	ldi	r16, 0xA1	; 161
	ldi r17,hi8(mix_buf)
    6150:	19 e0       	ldi	r17, 0x09	; 9

	brlo .+2
    6152:	08 f0       	brcs	.+2      	; 0x6156 <update_sound+0x24>
	movw ZL,r16
    6154:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    6156:	e0 93 ad 0b 	sts	0x0BAD, r30
	sts mix_pos+1,ZH	
    615a:	f0 93 ae 0b 	sts	0x0BAE, r31
	rjmp .
	rjmp .
	rjmp .
#else
	//alignment cycles
	ldi ZL,8
    615e:	e8 e0       	ldi	r30, 0x08	; 8
	dec ZL
    6160:	ea 95       	dec	r30
	brne .-4
    6162:	f1 f7       	brne	.-4      	; 0x6160 <update_sound+0x2e>
#endif

	pop ZL
    6164:	ef 91       	pop	r30
	pop r18
    6166:	2f 91       	pop	r18
	pop r17
    6168:	1f 91       	pop	r17
	pop r16
    616a:	0f 91       	pop	r16

	;*** Video sync update ***
	sbrc ZL,0								;pre-eq/post-eq sync
    616c:	e0 fd       	sbrc	r30, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    616e:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,0								
    6170:	e0 ff       	sbrs	r30, 0
	rjmp .+2
    6172:	01 c0       	rjmp	.+2      	; 0x6176 <update_sound+0x44>
	ret
    6174:	08 95       	ret

	ldi ZH,20
    6176:	f4 e1       	ldi	r31, 0x14	; 20
	dec ZH
    6178:	fa 95       	dec	r31
	brne .-4
    617a:	f1 f7       	brne	.-4      	; 0x6178 <update_sound+0x46>
	rjmp .
    617c:	00 c0       	rjmp	.+0      	; 0x617e <update_sound+0x4c>

	;*** Video sync update ***
	sbrc ZL,1								;hsync
    617e:	e1 fd       	sbrc	r30, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6180:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,1								
    6182:	e1 ff       	sbrs	r30, 1
	rjmp .
    6184:	00 c0       	rjmp	.+0      	; 0x6186 <update_sound+0x54>

	ret 
    6186:	08 95       	ret

00006188 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6188:	80 93 6b 09 	sts	0x096B, r24
	sts sprites_tile_banks+1,r25
    618c:	90 93 6c 09 	sts	0x096C, r25
	ret
    6190:	08 95       	ret

00006192 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6192:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6194:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    6196:	a0 e8       	ldi	r26, 0x80	; 128
	ldi XH,hi8(vram)
    6198:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    619a:	61 e1       	ldi	r22, 0x11	; 17

0000619c <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    619c:	6d 93       	st	X+, r22
	sbiw r30,1
    619e:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    61a0:	e9 f7       	brne	.-6      	; 0x619c <fill_vram_loop>

	clr r1
    61a2:	11 24       	eor	r1, r1

	ret
    61a4:	08 95       	ret

000061a6 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    61a6:	50 91 75 09 	lds	r21, 0x0975
	add r20,21
    61aa:	45 0f       	add	r20, r21
	rjmp SetTile	
    61ac:	00 c0       	rjmp	.+0      	; 0x61ae <SetTile>

000061ae <SetTile>:

	ret

#else

	clr r25
    61ae:	99 27       	eor	r25, r25
	clr r23	
    61b0:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    61b2:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    61b4:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    61b6:	08 0e       	add	r0, r24
	adc r1,r25
    61b8:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    61ba:	a0 e8       	ldi	r26, 0x80	; 128
	ldi XH,hi8(vram)
    61bc:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    61be:	a0 0d       	add	r26, r0
	adc XH,r1
    61c0:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    61c2:	4f 5e       	subi	r20, 0xEF	; 239
	st X,r20
    61c4:	4c 93       	st	X, r20

	clr r1
    61c6:	11 24       	eor	r1, r1

	ret
    61c8:	08 95       	ret

000061ca <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    61ca:	80 93 75 09 	sts	0x0975, r24
	ret
    61ce:	08 95       	ret

000061d0 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    61d0:	80 93 73 09 	sts	0x0973, r24
	sts tile_table_hi,r25	
    61d4:	90 93 74 09 	sts	0x0974, r25
	ret
    61d8:	08 95       	ret

000061da <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    61da:	80 91 7c 09 	lds	r24, 0x097C
	andi r24,SYNC_FLAG_VSYNC
    61de:	81 70       	andi	r24, 0x01	; 1
	ret
    61e0:	08 95       	ret

000061e2 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    61e2:	20 91 7c 09 	lds	r18, 0x097C
	andi r18,~SYNC_FLAG_VSYNC
    61e6:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    61e8:	20 93 7c 09 	sts	0x097C, r18
	ret
    61ec:	08 95       	ret

000061ee <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    61ee:	88 23       	and	r24, r24
	brne rj_p2
    61f0:	29 f4       	brne	.+10     	; 0x61fc <rj_p2>
		
	lds r24,joypad1_status_lo
    61f2:	80 91 85 09 	lds	r24, 0x0985
	lds r25,joypad1_status_lo+1
    61f6:	90 91 86 09 	lds	r25, 0x0986
	ret
    61fa:	08 95       	ret

000061fc <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    61fc:	80 91 89 09 	lds	r24, 0x0989
	lds r25,joypad2_status_lo+1	
    6200:	90 91 8a 09 	lds	r25, 0x098A

	ret
    6204:	08 95       	ret

00006206 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    6206:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    6208:	7a 95       	dec	r23
	brne .-4 ;~1 us
    620a:	f1 f7       	brne	.-4      	; 0x6208 <WaitUs+0x2>
	nop
    620c:	00 00       	nop
	sbiw r24,1
    620e:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    6210:	d1 f7       	brne	.-12     	; 0x6206 <WaitUs>

	ret
    6212:	08 95       	ret

00006214 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6214:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    6216:	fe cf       	rjmp	.-4      	; 0x6214 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6218:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    621a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    621c:	60 bd       	out	0x20, r22	; 32
   cli
    621e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6220:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6222:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6224:	78 94       	sei
   ret
    6226:	08 95       	ret

00006228 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6228:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    622a:	fe cf       	rjmp	.-4      	; 0x6228 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    622c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    622e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    6230:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    6232:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    6234:	80 b5       	in	r24, 0x20	; 32
   sei
    6236:	78 94       	sei
   ret
    6238:	08 95       	ret

0000623a <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    623a:	98 e0       	ldi	r25, 0x08	; 8
    623c:	88 e1       	ldi	r24, 0x18	; 24
    623e:	0f b6       	in	r0, 0x3f	; 63
    6240:	f8 94       	cli
    6242:	a8 95       	wdr
    6244:	80 93 60 00 	sts	0x0060, r24
    6248:	0f be       	out	0x3f, r0	; 63
    624a:	90 93 60 00 	sts	0x0060, r25
	while(1);
    624e:	ff cf       	rjmp	.-2      	; 0x624e <SoftReset+0x14>

00006250 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    6250:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    6252:	c8 95       	lpm
    6254:	c8 95       	lpm
		Wait200ns();
    6256:	c8 95       	lpm
    6258:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    625a:	12 98       	cbi	0x02, 2	; 2
    625c:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    625e:	80 e0       	ldi	r24, 0x00	; 0
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	20 e0       	ldi	r18, 0x00	; 0
    6264:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    6266:	36 95       	lsr	r19
    6268:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    626a:	96 95       	lsr	r25
    626c:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    626e:	c8 95       	lpm
    6270:	c8 95       	lpm
			Wait200ns();
    6272:	c8 95       	lpm
    6274:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    6276:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    6278:	00 9b       	sbis	0x00, 0	; 0
    627a:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    627c:	01 9b       	sbis	0x00, 1	; 0
    627e:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    6280:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6282:	c8 95       	lpm
    6284:	c8 95       	lpm
			Wait200ns();
    6286:	c8 95       	lpm
    6288:	c8 95       	lpm
    628a:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    628c:	61 f7       	brne	.-40     	; 0x6266 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    628e:	30 93 86 09 	sts	0x0986, r19
    6292:	20 93 85 09 	sts	0x0985, r18
		joypad2_status_lo=p2ButtonsLo;
    6296:	90 93 8a 09 	sts	0x098A, r25
    629a:	80 93 89 09 	sts	0x0989, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    629e:	80 91 85 09 	lds	r24, 0x0985
    62a2:	90 91 86 09 	lds	r25, 0x0986
    62a6:	0f 97       	sbiw	r24, 0x0f	; 15
    62a8:	31 f0       	breq	.+12     	; 0x62b6 <ReadButtons+0x66>
    62aa:	80 91 89 09 	lds	r24, 0x0989
    62ae:	90 91 8a 09 	lds	r25, 0x098A
    62b2:	0f 97       	sbiw	r24, 0x0f	; 15
    62b4:	11 f4       	brne	.+4      	; 0x62ba <ReadButtons+0x6a>
		SoftReset();
    62b6:	0e 94 1d 31 	call	0x623a	; 0x623a <SoftReset>
    62ba:	08 95       	ret

000062bc <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    62bc:	10 92 dc 0b 	sts	0x0BDC, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    62c0:	00 99       	sbic	0x00, 0	; 0
    62c2:	03 c0       	rjmp	.+6      	; 0x62ca <ReadControllers+0xe>
    62c4:	81 e0       	ldi	r24, 0x01	; 1
    62c6:	80 93 dc 0b 	sts	0x0BDC, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    62ca:	01 99       	sbic	0x00, 1	; 0
    62cc:	05 c0       	rjmp	.+10     	; 0x62d8 <ReadControllers+0x1c>
    62ce:	80 91 dc 0b 	lds	r24, 0x0BDC
    62d2:	82 60       	ori	r24, 0x02	; 2
    62d4:	80 93 dc 0b 	sts	0x0BDC, r24
			
	//read the standard buttons
	ReadButtons();
    62d8:	0c 94 28 31 	jmp	0x6250	; 0x6250 <ReadButtons>

000062dc <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    62dc:	cf 93       	push	r28
    62de:	df 93       	push	r29
    62e0:	c0 e0       	ldi	r28, 0x00	; 0
    62e2:	d0 e0       	ldi	r29, 0x00	; 0
    62e4:	fe 01       	movw	r30, r28
    62e6:	e0 55       	subi	r30, 0x50	; 80
    62e8:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    62ea:	64 91       	lpm	r22, Z
    62ec:	ce 01       	movw	r24, r28
    62ee:	0e 94 0a 31 	call	0x6214	; 0x6214 <WriteEeprom>
    62f2:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    62f4:	c0 32       	cpi	r28, 0x20	; 32
    62f6:	d1 05       	cpc	r29, r1
    62f8:	a9 f7       	brne	.-22     	; 0x62e4 <FormatEeprom+0x8>
    62fa:	c0 e2       	ldi	r28, 0x20	; 32
    62fc:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    62fe:	6f ef       	ldi	r22, 0xFF	; 255
    6300:	ce 01       	movw	r24, r28
    6302:	0e 94 0a 31 	call	0x6214	; 0x6214 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    6306:	6f ef       	ldi	r22, 0xFF	; 255
    6308:	ce 01       	movw	r24, r28
    630a:	01 96       	adiw	r24, 0x01	; 1
    630c:	0e 94 0a 31 	call	0x6214	; 0x6214 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    6310:	a0 96       	adiw	r28, 0x20	; 32
    6312:	c1 15       	cp	r28, r1
    6314:	88 e0       	ldi	r24, 0x08	; 8
    6316:	d8 07       	cpc	r29, r24
    6318:	91 f7       	brne	.-28     	; 0x62fe <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    631a:	df 91       	pop	r29
    631c:	cf 91       	pop	r28
    631e:	08 95       	ret

00006320 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    6320:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    6322:	80 e0       	ldi	r24, 0x00	; 0
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	0e 94 14 31 	call	0x6228	; 0x6228 <ReadEeprom>
    632a:	c8 2f       	mov	r28, r24
    632c:	81 e0       	ldi	r24, 0x01	; 1
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	0e 94 14 31 	call	0x6228	; 0x6228 <ReadEeprom>
    6334:	28 2f       	mov	r18, r24
    6336:	30 e0       	ldi	r19, 0x00	; 0
    6338:	32 2f       	mov	r19, r18
    633a:	22 27       	eor	r18, r18
    633c:	2c 0f       	add	r18, r28
    633e:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    6340:	81 e0       	ldi	r24, 0x01	; 1
    6342:	2a 35       	cpi	r18, 0x5A	; 90
    6344:	35 45       	sbci	r19, 0x55	; 85
    6346:	09 f0       	breq	.+2      	; 0x634a <isEepromFormatted+0x2a>
    6348:	80 e0       	ldi	r24, 0x00	; 0
}
    634a:	cf 91       	pop	r28
    634c:	08 95       	ret

0000634e <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    634e:	cf 92       	push	r12
    6350:	df 92       	push	r13
    6352:	ef 92       	push	r14
    6354:	ff 92       	push	r15
    6356:	0f 93       	push	r16
    6358:	1f 93       	push	r17
    635a:	cf 93       	push	r28
    635c:	df 93       	push	r29
    635e:	1f 92       	push	r1
    6360:	cd b7       	in	r28, 0x3d	; 61
    6362:	de b7       	in	r29, 0x3e	; 62
    6364:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    6366:	0e 94 90 31 	call	0x6320	; 0x6320 <isEepromFormatted>
    636a:	88 23       	and	r24, r24
    636c:	09 f4       	brne	.+2      	; 0x6370 <EepromWriteBlock+0x22>
    636e:	4d c0       	rjmp	.+154    	; 0x640a <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    6370:	f6 01       	movw	r30, r12
    6372:	80 81       	ld	r24, Z
    6374:	91 81       	ldd	r25, Z+1	; 0x01
    6376:	8f 3f       	cpi	r24, 0xFF	; 255
    6378:	ff ef       	ldi	r31, 0xFF	; 255
    637a:	9f 07       	cpc	r25, r31
    637c:	09 f4       	brne	.+2      	; 0x6380 <EepromWriteBlock+0x32>
    637e:	47 c0       	rjmp	.+142    	; 0x640e <EepromWriteBlock+0xc0>
    6380:	8a 35       	cpi	r24, 0x5A	; 90
    6382:	95 45       	sbci	r25, 0x55	; 85
    6384:	09 f4       	brne	.+2      	; 0x6388 <EepromWriteBlock+0x3a>
    6386:	43 c0       	rjmp	.+134    	; 0x640e <EepromWriteBlock+0xc0>
    6388:	00 e2       	ldi	r16, 0x20	; 32
    638a:	10 e0       	ldi	r17, 0x00	; 0
    638c:	f1 2c       	mov	r15, r1
    638e:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    6390:	c8 01       	movw	r24, r16
    6392:	49 83       	std	Y+1, r20	; 0x01
    6394:	0e 94 14 31 	call	0x6228	; 0x6228 <ReadEeprom>
    6398:	e8 2e       	mov	r14, r24
    639a:	c8 01       	movw	r24, r16
    639c:	01 96       	adiw	r24, 0x01	; 1
    639e:	0e 94 14 31 	call	0x6228	; 0x6228 <ReadEeprom>
    63a2:	28 2f       	mov	r18, r24
    63a4:	30 e0       	ldi	r19, 0x00	; 0
    63a6:	32 2f       	mov	r19, r18
    63a8:	22 27       	eor	r18, r18
    63aa:	c9 01       	movw	r24, r18
    63ac:	8e 0d       	add	r24, r14
    63ae:	91 1d       	adc	r25, r1
		if(id==block->id){
    63b0:	f6 01       	movw	r30, r12
    63b2:	20 81       	ld	r18, Z
    63b4:	31 81       	ldd	r19, Z+1	; 0x01
    63b6:	49 81       	ldd	r20, Y+1	; 0x01
    63b8:	82 17       	cp	r24, r18
    63ba:	93 07       	cpc	r25, r19
    63bc:	19 f4       	brne	.+6      	; 0x63c4 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    63be:	ff 20       	and	r15, r15
    63c0:	89 f0       	breq	.+34     	; 0x63e4 <EepromWriteBlock+0x96>
    63c2:	0c c0       	rjmp	.+24     	; 0x63dc <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    63c4:	01 96       	adiw	r24, 0x01	; 1
    63c6:	19 f4       	brne	.+6      	; 0x63ce <EepromWriteBlock+0x80>
    63c8:	f1 10       	cpse	r15, r1
    63ca:	01 c0       	rjmp	.+2      	; 0x63ce <EepromWriteBlock+0x80>
    63cc:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    63ce:	4f 5f       	subi	r20, 0xFF	; 255
    63d0:	00 5e       	subi	r16, 0xE0	; 224
    63d2:	1f 4f       	sbci	r17, 0xFF	; 255
    63d4:	40 34       	cpi	r20, 0x40	; 64
    63d6:	e1 f6       	brne	.-72     	; 0x6390 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    63d8:	ff 20       	and	r15, r15
    63da:	d9 f0       	breq	.+54     	; 0x6412 <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    63dc:	20 e2       	ldi	r18, 0x20	; 32
    63de:	f2 9e       	mul	r15, r18
    63e0:	80 01       	movw	r16, r0
    63e2:	11 24       	eor	r1, r1
    63e4:	76 01       	movw	r14, r12
    63e6:	80 e2       	ldi	r24, 0x20	; 32
    63e8:	e8 0e       	add	r14, r24
    63ea:	f1 1c       	adc	r15, r1
    63ec:	0c 19       	sub	r16, r12
    63ee:	1d 09       	sbc	r17, r13
    63f0:	c6 01       	movw	r24, r12
    63f2:	80 0f       	add	r24, r16
    63f4:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    63f6:	f6 01       	movw	r30, r12
    63f8:	61 91       	ld	r22, Z+
    63fa:	6f 01       	movw	r12, r30
    63fc:	0e 94 0a 31 	call	0x6214	; 0x6214 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    6400:	ce 14       	cp	r12, r14
    6402:	df 04       	cpc	r13, r15
    6404:	a9 f7       	brne	.-22     	; 0x63f0 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    6406:	80 e0       	ldi	r24, 0x00	; 0
    6408:	05 c0       	rjmp	.+10     	; 0x6414 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    640a:	84 e0       	ldi	r24, 0x04	; 4
    640c:	03 c0       	rjmp	.+6      	; 0x6414 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    640e:	81 e0       	ldi	r24, 0x01	; 1
    6410:	01 c0       	rjmp	.+2      	; 0x6414 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    6412:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    6414:	0f 90       	pop	r0
    6416:	df 91       	pop	r29
    6418:	cf 91       	pop	r28
    641a:	1f 91       	pop	r17
    641c:	0f 91       	pop	r16
    641e:	ff 90       	pop	r15
    6420:	ef 90       	pop	r14
    6422:	df 90       	pop	r13
    6424:	cf 90       	pop	r12
    6426:	08 95       	ret

00006428 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    6428:	df 92       	push	r13
    642a:	ef 92       	push	r14
    642c:	ff 92       	push	r15
    642e:	0f 93       	push	r16
    6430:	1f 93       	push	r17
    6432:	cf 93       	push	r28
    6434:	df 93       	push	r29
    6436:	7c 01       	movw	r14, r24
    6438:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    643a:	0e 94 90 31 	call	0x6320	; 0x6320 <isEepromFormatted>
    643e:	88 23       	and	r24, r24
    6440:	89 f1       	breq	.+98     	; 0x64a4 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    6442:	8f ef       	ldi	r24, 0xFF	; 255
    6444:	e8 16       	cp	r14, r24
    6446:	f8 06       	cpc	r15, r24
    6448:	79 f1       	breq	.+94     	; 0x64a8 <EepromReadBlock+0x80>
    644a:	00 e0       	ldi	r16, 0x00	; 0
    644c:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    644e:	c8 01       	movw	r24, r16
    6450:	0e 94 14 31 	call	0x6228	; 0x6228 <ReadEeprom>
    6454:	d8 2e       	mov	r13, r24
    6456:	c8 01       	movw	r24, r16
    6458:	01 96       	adiw	r24, 0x01	; 1
    645a:	0e 94 14 31 	call	0x6228	; 0x6228 <ReadEeprom>
    645e:	28 2f       	mov	r18, r24
    6460:	30 e0       	ldi	r19, 0x00	; 0
    6462:	32 2f       	mov	r19, r18
    6464:	22 27       	eor	r18, r18
    6466:	2d 0d       	add	r18, r13
    6468:	31 1d       	adc	r19, r1
		if(id==blockId){
    646a:	2e 15       	cp	r18, r14
    646c:	3f 05       	cpc	r19, r15
    646e:	39 f4       	brne	.+14     	; 0x647e <EepromReadBlock+0x56>
    6470:	7e 01       	movw	r14, r28
    6472:	80 e2       	ldi	r24, 0x20	; 32
    6474:	e8 0e       	add	r14, r24
    6476:	f1 1c       	adc	r15, r1
    6478:	0c 1b       	sub	r16, r28
    647a:	1d 0b       	sbc	r17, r29
    647c:	08 c0       	rjmp	.+16     	; 0x648e <EepromReadBlock+0x66>
    647e:	00 5e       	subi	r16, 0xE0	; 224
    6480:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    6482:	01 15       	cp	r16, r1
    6484:	84 e0       	ldi	r24, 0x04	; 4
    6486:	18 07       	cpc	r17, r24
    6488:	11 f7       	brne	.-60     	; 0x644e <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    648a:	83 e0       	ldi	r24, 0x03	; 3
    648c:	0e c0       	rjmp	.+28     	; 0x64aa <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    648e:	ce 01       	movw	r24, r28
    6490:	80 0f       	add	r24, r16
    6492:	91 1f       	adc	r25, r17
    6494:	0e 94 14 31 	call	0x6228	; 0x6228 <ReadEeprom>
    6498:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    649a:	ce 15       	cp	r28, r14
    649c:	df 05       	cpc	r29, r15
    649e:	b9 f7       	brne	.-18     	; 0x648e <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    64a0:	80 e0       	ldi	r24, 0x00	; 0
    64a2:	03 c0       	rjmp	.+6      	; 0x64aa <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    64a4:	84 e0       	ldi	r24, 0x04	; 4
    64a6:	01 c0       	rjmp	.+2      	; 0x64aa <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    64a8:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    64aa:	df 91       	pop	r29
    64ac:	cf 91       	pop	r28
    64ae:	1f 91       	pop	r17
    64b0:	0f 91       	pop	r16
    64b2:	ff 90       	pop	r15
    64b4:	ef 90       	pop	r14
    64b6:	df 90       	pop	r13
    64b8:	08 95       	ret

000064ba <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    64ba:	fc 01       	movw	r30, r24
    64bc:	45 87       	std	Z+13, r20	; 0x0d
    64be:	08 95       	ret

000064c0 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    64c0:	e2 eb       	ldi	r30, 0xB2	; 178
    64c2:	fb e0       	ldi	r31, 0x0B	; 11
    64c4:	81 e0       	ldi	r24, 0x01	; 1
    64c6:	91 e0       	ldi	r25, 0x01	; 1
    64c8:	95 8b       	std	Z+21, r25	; 0x15
    64ca:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    64cc:	43 8b       	std	Z+19, r20	; 0x13
    64ce:	08 95       	ret

000064d0 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    64d0:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    64d2:	90 81       	ld	r25, Z
    64d4:	9f 75       	andi	r25, 0x5F	; 95
    64d6:	90 83       	st	Z, r25
    64d8:	08 95       	ret

000064da <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    64da:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    64dc:	90 81       	ld	r25, Z
    64de:	90 64       	ori	r25, 0x40	; 64
    64e0:	90 83       	st	Z, r25
    64e2:	08 95       	ret

000064e4 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    64e4:	fc 01       	movw	r30, r24
    64e6:	44 87       	std	Z+12, r20	; 0x0c
    64e8:	08 95       	ret

000064ea <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    64ea:	fc 01       	movw	r30, r24
    64ec:	47 83       	std	Z+7, r20	; 0x07
    64ee:	08 95       	ret

000064f0 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    64f0:	fc 01       	movw	r30, r24
    64f2:	40 87       	std	Z+8, r20	; 0x08
    64f4:	08 95       	ret

000064f6 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    64f6:	1f 93       	push	r17
    64f8:	cf 93       	push	r28
    64fa:	df 93       	push	r29
    64fc:	ec 01       	movw	r28, r24
    64fe:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    6500:	29 81       	ldd	r18, Y+1	; 0x01
    6502:	30 e0       	ldi	r19, 0x00	; 0
    6504:	f9 01       	movw	r30, r18
    6506:	ee 0f       	add	r30, r30
    6508:	ff 1f       	adc	r31, r31
    650a:	e8 5f       	subi	r30, 0xF8	; 248
    650c:	f2 49       	sbci	r31, 0x92	; 146
    650e:	65 91       	lpm	r22, Z+
    6510:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    6512:	f9 01       	movw	r30, r18
    6514:	e4 0f       	add	r30, r20
    6516:	f1 1d       	adc	r31, r1
    6518:	47 fd       	sbrc	r20, 7
    651a:	fa 95       	dec	r31
    651c:	ee 0f       	add	r30, r30
    651e:	ff 1f       	adc	r31, r31
    6520:	e8 5f       	subi	r30, 0xF8	; 248
    6522:	f2 49       	sbci	r31, 0x92	; 146
    6524:	85 91       	lpm	r24, Z+
    6526:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    6528:	86 1b       	sub	r24, r22
    652a:	97 0b       	sbc	r25, r23
    652c:	60 91 e4 0b 	lds	r22, 0x0BE4
    6530:	70 e0       	ldi	r23, 0x00	; 0
    6532:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
	if(delta==0)delta++;
    6536:	61 15       	cp	r22, r1
    6538:	71 05       	cpc	r23, r1
    653a:	11 f4       	brne	.+4      	; 0x6540 <PatchCommand11+0x4a>
    653c:	61 e0       	ldi	r22, 0x01	; 1
    653e:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    6540:	86 e0       	ldi	r24, 0x06	; 6
    6542:	18 9f       	mul	r17, r24
    6544:	f0 01       	movw	r30, r0
    6546:	11 24       	eor	r1, r1
    6548:	ee 54       	subi	r30, 0x4E	; 78
    654a:	f4 4f       	sbci	r31, 0xF4	; 244
    654c:	81 81       	ldd	r24, Z+1	; 0x01
    654e:	92 81       	ldd	r25, Z+2	; 0x02
    6550:	86 0f       	add	r24, r22
    6552:	97 1f       	adc	r25, r23
    6554:	92 83       	std	Z+2, r25	; 0x02
    6556:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    6558:	7b 83       	std	Y+3, r23	; 0x03
    655a:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    655c:	88 81       	ld	r24, Y
    655e:	88 60       	ori	r24, 0x08	; 8
    6560:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    6562:	89 81       	ldd	r24, Y+1	; 0x01
    6564:	48 0f       	add	r20, r24
    6566:	4c 83       	std	Y+4, r20	; 0x04
}
    6568:	df 91       	pop	r29
    656a:	cf 91       	pop	r28
    656c:	1f 91       	pop	r17
    656e:	08 95       	ret

00006570 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    6570:	40 93 e4 0b 	sts	0x0BE4, r20
    6574:	08 95       	ret

00006576 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    6576:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    6578:	64 2f       	mov	r22, r20
    657a:	0c 94 63 36 	jmp	0x6cc6	; 0x6cc6 <SetMixerWave>

0000657e <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    657e:	fc 01       	movw	r30, r24
    6580:	86 2f       	mov	r24, r22
	track->note+=param;
    6582:	91 81       	ldd	r25, Z+1	; 0x01
    6584:	64 2f       	mov	r22, r20
    6586:	69 0f       	add	r22, r25
    6588:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    658a:	0c 94 4c 36 	jmp	0x6c98	; 0x6c98 <SetMixerNote>

0000658e <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    658e:	fc 01       	movw	r30, r24
    6590:	86 2f       	mov	r24, r22
	track->note-=param;
    6592:	91 81       	ldd	r25, Z+1	; 0x01
    6594:	69 2f       	mov	r22, r25
    6596:	64 1b       	sub	r22, r20
    6598:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    659a:	0c 94 4c 36 	jmp	0x6c98	; 0x6c98 <SetMixerNote>

0000659e <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    659e:	0f 93       	push	r16
    65a0:	1f 93       	push	r17
    65a2:	cf 93       	push	r28
    65a4:	df 93       	push	r29
    65a6:	1f 92       	push	r1
    65a8:	cd b7       	in	r28, 0x3d	; 61
    65aa:	de b7       	in	r29, 0x3e	; 62
    65ac:	8c 01       	movw	r16, r24
    65ae:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    65b0:	64 2f       	mov	r22, r20
    65b2:	49 83       	std	Y+1, r20	; 0x01
    65b4:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <SetMixerNote>
	track->note=param;
    65b8:	49 81       	ldd	r20, Y+1	; 0x01
    65ba:	f8 01       	movw	r30, r16
    65bc:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    65be:	80 81       	ld	r24, Z
    65c0:	87 7f       	andi	r24, 0xF7	; 247
    65c2:	80 83       	st	Z, r24
}
    65c4:	0f 90       	pop	r0
    65c6:	df 91       	pop	r29
    65c8:	cf 91       	pop	r28
    65ca:	1f 91       	pop	r17
    65cc:	0f 91       	pop	r16
    65ce:	08 95       	ret

000065d0 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    65d0:	90 93 3a 0c 	sts	0x0C3A, r25
    65d4:	80 93 39 0c 	sts	0x0C39, r24

	masterVolume=DEFAULT_MASTER_VOL;
    65d8:	8f e6       	ldi	r24, 0x6F	; 111
    65da:	80 93 3c 0c 	sts	0x0C3C, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    65de:	10 92 a0 09 	sts	0x09A0, r1
    65e2:	ed ee       	ldi	r30, 0xED	; 237
    65e4:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    65e6:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    65e8:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    65ea:	28 e1       	ldi	r18, 0x18	; 24
    65ec:	df 01       	movw	r26, r30
    65ee:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    65f0:	8c 93       	st	X, r24
    65f2:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    65f4:	1c 92       	st	X, r1
    65f6:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    65f8:	9c 93       	st	X, r25
    65fa:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    65fc:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    65fe:	10 82       	st	Z, r1
    6600:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    6602:	2c 93       	st	X, r18
    6604:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    6606:	8c 93       	st	X, r24
    6608:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    660a:	3c e0       	ldi	r19, 0x0C	; 12
    660c:	e5 34       	cpi	r30, 0x45	; 69
    660e:	f3 07       	cpc	r31, r19
    6610:	69 f7       	brne	.-38     	; 0x65ec <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    6612:	08 95       	ret

00006614 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    6614:	ef ed       	ldi	r30, 0xDF	; 223
    6616:	fb e0       	ldi	r31, 0x0B	; 11
    6618:	8a ef       	ldi	r24, 0xFA	; 250
    661a:	85 87       	std	Z+13, r24	; 0x0d
    661c:	83 a3       	std	Z+35, r24	; 0x23
    661e:	81 af       	std	Z+57, r24	; 0x39
    6620:	80 93 2e 0c 	sts	0x0C2E, r24
	}

	playSong=false;
    6624:	10 92 a0 09 	sts	0x09A0, r1
    6628:	08 95       	ret

0000662a <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    662a:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    662c:	ed 91       	ld	r30, X+
    662e:	fc 91       	ld	r31, X
    6630:	11 97       	sbiw	r26, 0x01	; 1
    6632:	9f 01       	movw	r18, r30
    6634:	2f 5f       	subi	r18, 0xFF	; 255
    6636:	3f 4f       	sbci	r19, 0xFF	; 255
    6638:	11 96       	adiw	r26, 0x01	; 1
    663a:	3c 93       	st	X, r19
    663c:	2e 93       	st	-X, r18
    663e:	e4 91       	lpm	r30, Z
    6640:	e7 fd       	sbrc	r30, 7
    6642:	03 c0       	rjmp	.+6      	; 0x664a <ReadVarLen+0x20>
    6644:	8e 2f       	mov	r24, r30
    6646:	90 e0       	ldi	r25, 0x00	; 0
    6648:	08 95       	ret
    {
       value &= 0x7F;
    664a:	ef 77       	andi	r30, 0x7F	; 127
    664c:	8e 2f       	mov	r24, r30
    664e:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    6650:	96 95       	lsr	r25
    6652:	98 2f       	mov	r25, r24
    6654:	88 27       	eor	r24, r24
    6656:	97 95       	ror	r25
    6658:	87 95       	ror	r24
    665a:	2f 5f       	subi	r18, 0xFF	; 255
    665c:	3f 4f       	sbci	r19, 0xFF	; 255
    665e:	f9 01       	movw	r30, r18
    6660:	31 97       	sbiw	r30, 0x01	; 1
    6662:	e4 91       	lpm	r30, Z
    6664:	4e 2f       	mov	r20, r30
    6666:	4f 77       	andi	r20, 0x7F	; 127
    6668:	84 0f       	add	r24, r20
    666a:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    666c:	e7 fd       	sbrc	r30, 7
    666e:	f0 cf       	rjmp	.-32     	; 0x6650 <ReadVarLen+0x26>
    6670:	2d 93       	st	X+, r18
    6672:	3c 93       	st	X, r19
    }


    return value;
}
    6674:	08 95       	ret

00006676 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    6676:	ff 92       	push	r15
    6678:	0f 93       	push	r16
    667a:	1f 93       	push	r17
    667c:	cf 93       	push	r28
    667e:	df 93       	push	r29
    6680:	18 2f       	mov	r17, r24
    6682:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    6684:	c8 2f       	mov	r28, r24
    6686:	d0 e0       	ldi	r29, 0x00	; 0
    6688:	86 e1       	ldi	r24, 0x16	; 22
    668a:	18 9f       	mul	r17, r24
    668c:	f0 01       	movw	r30, r0
    668e:	11 24       	eor	r1, r1
    6690:	e1 52       	subi	r30, 0x21	; 33
    6692:	f4 4f       	sbci	r31, 0xF4	; 244
    6694:	90 81       	ld	r25, Z
    6696:	f9 2e       	mov	r15, r25
    6698:	ff 1c       	adc	r15, r15
    669a:	ff 24       	eor	r15, r15
    669c:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    669e:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    66a0:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    66a2:	8f ef       	ldi	r24, 0xFF	; 255
    66a4:	84 87       	std	Z+12, r24	; 0x0c
	track->noteVol=volume;
    66a6:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    66a8:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    66aa:	97 7b       	andi	r25, 0xB7	; 183
    66ac:	90 62       	ori	r25, 0x20	; 32
    66ae:	90 83       	st	Z, r25
	track->tremoloLevel=0;
    66b0:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    66b2:	81 87       	std	Z+9, r24	; 0x09
	track->note=note;
    66b4:	21 83       	std	Z+1, r18	; 0x01

	#else

		#if MIXER_CHAN4_TYPE == 0
			//if it's a noise channel
			if(channel==3){
    66b6:	13 30       	cpi	r17, 0x03	; 3
    66b8:	69 f4       	brne	.+26     	; 0x66d4 <TriggerCommon+0x5e>
				if(!isFx) patch=note;
    66ba:	f1 10       	cpse	r15, r1
    66bc:	01 c0       	rjmp	.+2      	; 0x66c0 <TriggerCommon+0x4a>
    66be:	02 2f       	mov	r16, r18
				mixer.channels.type.noise.barrel=0x0101;				
    66c0:	81 e0       	ldi	r24, 0x01	; 1
    66c2:	91 e0       	ldi	r25, 0x01	; 1
    66c4:	90 93 c7 0b 	sts	0x0BC7, r25
    66c8:	80 93 c6 0b 	sts	0x0BC6, r24
				mixer.channels.type.noise.params=1; //default 
    66cc:	81 e0       	ldi	r24, 0x01	; 1
    66ce:	80 93 c5 0b 	sts	0x0BC5, r24
    66d2:	08 c0       	rjmp	.+16     	; 0x66e4 <TriggerCommon+0x6e>
			}else{
				SetMixerNote(channel,note);
    66d4:	62 2f       	mov	r22, r18
    66d6:	81 2f       	mov	r24, r17
    66d8:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <SetMixerNote>
				SetMixerWave(channel,0);
    66dc:	60 e0       	ldi	r22, 0x00	; 0
    66de:	81 2f       	mov	r24, r17
    66e0:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <SetMixerWave>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    66e4:	86 e1       	ldi	r24, 0x16	; 22
    66e6:	8c 9f       	mul	r24, r28
    66e8:	f0 01       	movw	r30, r0
    66ea:	8d 9f       	mul	r24, r29
    66ec:	f0 0d       	add	r31, r0
    66ee:	11 24       	eor	r1, r1
    66f0:	e1 52       	subi	r30, 0x21	; 33
    66f2:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    66f4:	ff 20       	and	r15, r15
    66f6:	11 f0       	breq	.+4      	; 0x66fc <TriggerCommon+0x86>
		track->fxPatchNo=patch;
    66f8:	07 87       	std	Z+15, r16	; 0x0f
    66fa:	01 c0       	rjmp	.+2      	; 0x66fe <TriggerCommon+0x88>
	}else{
		track->patchNo=patch;	
    66fc:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    66fe:	e0 91 39 0c 	lds	r30, 0x0C39
    6702:	f0 91 3a 0c 	lds	r31, 0x0C3A
    6706:	89 e0       	ldi	r24, 0x09	; 9
    6708:	08 9f       	mul	r16, r24
    670a:	e0 0d       	add	r30, r0
    670c:	f1 1d       	adc	r31, r1
    670e:	11 24       	eor	r1, r1
    6710:	33 96       	adiw	r30, 0x03	; 3
    6712:	85 91       	lpm	r24, Z+
    6714:	94 91       	lpm	r25, Z
	if(pos==NULL){
    6716:	00 97       	sbiw	r24, 0x00	; 0
    6718:	59 f4       	brne	.+22     	; 0x6730 <TriggerCommon+0xba>
		track->patchCommandStreamPos=NULL;
    671a:	86 e1       	ldi	r24, 0x16	; 22
    671c:	8c 9f       	mul	r24, r28
    671e:	f0 01       	movw	r30, r0
    6720:	8d 9f       	mul	r24, r29
    6722:	f0 0d       	add	r31, r0
    6724:	11 24       	eor	r1, r1
    6726:	e1 52       	subi	r30, 0x21	; 33
    6728:	f4 4f       	sbci	r31, 0xF4	; 244
    672a:	15 8a       	std	Z+21, r1	; 0x15
    672c:	14 8a       	std	Z+20, r1	; 0x14
    672e:	0e c0       	rjmp	.+28     	; 0x674c <TriggerCommon+0xd6>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    6730:	fc 01       	movw	r30, r24
    6732:	24 91       	lpm	r18, Z
    6734:	36 e1       	ldi	r19, 0x16	; 22
    6736:	3c 9f       	mul	r19, r28
    6738:	f0 01       	movw	r30, r0
    673a:	3d 9f       	mul	r19, r29
    673c:	f0 0d       	add	r31, r0
    673e:	11 24       	eor	r1, r1
    6740:	e1 52       	subi	r30, 0x21	; 33
    6742:	f4 4f       	sbci	r31, 0xF4	; 244
    6744:	21 8b       	std	Z+17, r18	; 0x11
    6746:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    6748:	95 8b       	std	Z+21, r25	; 0x15
    674a:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    674c:	df 91       	pop	r29
    674e:	cf 91       	pop	r28
    6750:	1f 91       	pop	r17
    6752:	0f 91       	pop	r16
    6754:	ff 90       	pop	r15
    6756:	08 95       	ret

00006758 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    6758:	98 2f       	mov	r25, r24
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    675a:	e0 91 39 0c 	lds	r30, 0x0C39
    675e:	f0 91 3a 0c 	lds	r31, 0x0C3A
    6762:	29 e0       	ldi	r18, 0x09	; 9
    6764:	82 9f       	mul	r24, r18
    6766:	e0 0d       	add	r30, r0
    6768:	f1 1d       	adc	r31, r1
    676a:	11 24       	eor	r1, r1
    676c:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    676e:	e1 30       	cpi	r30, 0x01	; 1
    6770:	e9 f0       	breq	.+58     	; 0x67ac <TriggerFx+0x54>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    6772:	e2 30       	cpi	r30, 0x02	; 2
    6774:	e9 f0       	breq	.+58     	; 0x67b0 <TriggerFx+0x58>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    6776:	20 91 f5 0b 	lds	r18, 0x0BF5
    677a:	27 ff       	sbrs	r18, 7
    677c:	1d c0       	rjmp	.+58     	; 0x67b8 <TriggerFx+0x60>
    677e:	20 91 04 0c 	lds	r18, 0x0C04
    6782:	28 13       	cpse	r18, r24
    6784:	02 c0       	rjmp	.+4      	; 0x678a <TriggerFx+0x32>
    6786:	41 11       	cpse	r20, r1
    6788:	17 c0       	rjmp	.+46     	; 0x67b8 <TriggerFx+0x60>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    678a:	20 91 0b 0c 	lds	r18, 0x0C0B
    678e:	27 ff       	sbrs	r18, 7
    6790:	11 c0       	rjmp	.+34     	; 0x67b4 <TriggerFx+0x5c>
    6792:	20 91 1a 0c 	lds	r18, 0x0C1A
    6796:	29 13       	cpse	r18, r25
    6798:	02 c0       	rjmp	.+4      	; 0x679e <TriggerFx+0x46>
    679a:	41 11       	cpse	r20, r1
    679c:	0b c0       	rjmp	.+22     	; 0x67b4 <TriggerFx+0x5c>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    679e:	20 91 08 0c 	lds	r18, 0x0C08
    67a2:	80 91 1e 0c 	lds	r24, 0x0C1E
    67a6:	82 17       	cp	r24, r18
    67a8:	28 f4       	brcc	.+10     	; 0x67b4 <TriggerFx+0x5c>
    67aa:	06 c0       	rjmp	.+12     	; 0x67b8 <TriggerFx+0x60>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    67ac:	83 e0       	ldi	r24, 0x03	; 3
    67ae:	05 c0       	rjmp	.+10     	; 0x67ba <TriggerFx+0x62>
	}else if(type==2){
		channel=4;
    67b0:	84 e0       	ldi	r24, 0x04	; 4
    67b2:	03 c0       	rjmp	.+6      	; 0x67ba <TriggerFx+0x62>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    67b4:	82 e0       	ldi	r24, 0x02	; 2
    67b6:	01 c0       	rjmp	.+2      	; 0x67ba <TriggerFx+0x62>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    67b8:	81 e0       	ldi	r24, 0x01	; 1
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    67ba:	26 e1       	ldi	r18, 0x16	; 22
    67bc:	82 9f       	mul	r24, r18
    67be:	f0 01       	movw	r30, r0
    67c0:	11 24       	eor	r1, r1
    67c2:	e1 52       	subi	r30, 0x21	; 33
    67c4:	f4 4f       	sbci	r31, 0xF4	; 244
    67c6:	20 81       	ld	r18, Z
    67c8:	20 68       	ori	r18, 0x80	; 128
    67ca:	20 83       	st	Z, r18
	TriggerCommon(channel,patch,volume,80);
    67cc:	20 e5       	ldi	r18, 0x50	; 80
    67ce:	46 2f       	mov	r20, r22
    67d0:	69 2f       	mov	r22, r25
    67d2:	0c 94 3b 33 	jmp	0x6676	; 0x6676 <TriggerCommon>

000067d6 <TriggerNote>:
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    67d6:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    67d8:	a8 2f       	mov	r26, r24
    67da:	b0 e0       	ldi	r27, 0x00	; 0
    67dc:	96 e1       	ldi	r25, 0x16	; 22
    67de:	89 9f       	mul	r24, r25
    67e0:	f0 01       	movw	r30, r0
    67e2:	11 24       	eor	r1, r1
    67e4:	e1 52       	subi	r30, 0x21	; 33
    67e6:	f4 4f       	sbci	r31, 0xF4	; 244
    67e8:	90 81       	ld	r25, Z
    67ea:	95 ff       	sbrs	r25, 5
    67ec:	02 c0       	rjmp	.+4      	; 0x67f2 <TriggerNote+0x1c>
    67ee:	97 fd       	sbrc	r25, 7
    67f0:	28 c0       	rjmp	.+80     	; 0x6842 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    67f2:	31 11       	cpse	r19, r1
    67f4:	18 c0       	rjmp	.+48     	; 0x6826 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    67f6:	86 e1       	ldi	r24, 0x16	; 22
    67f8:	8a 9f       	mul	r24, r26
    67fa:	f0 01       	movw	r30, r0
    67fc:	8b 9f       	mul	r24, r27
    67fe:	f0 0d       	add	r31, r0
    6800:	11 24       	eor	r1, r1
    6802:	e1 52       	subi	r30, 0x21	; 33
    6804:	f4 4f       	sbci	r31, 0xF4	; 244
    6806:	85 85       	ldd	r24, Z+13	; 0x0d
    6808:	81 11       	cpse	r24, r1
    680a:	02 c0       	rjmp	.+4      	; 0x6810 <TriggerNote+0x3a>
    680c:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    680e:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    6810:	86 e1       	ldi	r24, 0x16	; 22
    6812:	8a 9f       	mul	r24, r26
    6814:	f0 01       	movw	r30, r0
    6816:	8b 9f       	mul	r24, r27
    6818:	f0 0d       	add	r31, r0
    681a:	11 24       	eor	r1, r1
    681c:	e1 52       	subi	r30, 0x21	; 33
    681e:	f4 4f       	sbci	r31, 0xF4	; 244
    6820:	9f 7b       	andi	r25, 0xBF	; 191
    6822:	90 83       	st	Z, r25
    6824:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    6826:	26 e1       	ldi	r18, 0x16	; 22
    6828:	2a 9f       	mul	r18, r26
    682a:	f0 01       	movw	r30, r0
    682c:	2b 9f       	mul	r18, r27
    682e:	f0 0d       	add	r31, r0
    6830:	11 24       	eor	r1, r1
    6832:	e1 52       	subi	r30, 0x21	; 33
    6834:	f4 4f       	sbci	r31, 0xF4	; 244
    6836:	9f 77       	andi	r25, 0x7F	; 127
    6838:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    683a:	24 2f       	mov	r18, r20
    683c:	43 2f       	mov	r20, r19
    683e:	0c 94 3b 33 	jmp	0x6676	; 0x6676 <TriggerCommon>
    6842:	08 95       	ret

00006844 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    6844:	5f 92       	push	r5
    6846:	6f 92       	push	r6
    6848:	7f 92       	push	r7
    684a:	8f 92       	push	r8
    684c:	9f 92       	push	r9
    684e:	af 92       	push	r10
    6850:	bf 92       	push	r11
    6852:	cf 92       	push	r12
    6854:	df 92       	push	r13
    6856:	ef 92       	push	r14
    6858:	ff 92       	push	r15
    685a:	0f 93       	push	r16
    685c:	1f 93       	push	r17
    685e:	cf 93       	push	r28
    6860:	df 93       	push	r29
    6862:	cf ed       	ldi	r28, 0xDF	; 223
    6864:	db e0       	ldi	r29, 0x0B	; 11
    6866:	82 eb       	ldi	r24, 0xB2	; 178
    6868:	e8 2e       	mov	r14, r24
    686a:	8b e0       	ldi	r24, 0x0B	; 11
    686c:	f8 2e       	mov	r15, r24
    686e:	d7 01       	movw	r26, r14
    6870:	9e 01       	movw	r18, r28
    6872:	40 e0       	ldi	r20, 0x00	; 0
    6874:	50 e0       	ldi	r21, 0x00	; 0
    6876:	ca 01       	movw	r24, r20
    6878:	81 52       	subi	r24, 0x21	; 33
    687a:	94 4f       	sbci	r25, 0xF4	; 244
    687c:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    687e:	fc 01       	movw	r30, r24
    6880:	85 85       	ldd	r24, Z+13	; 0x0d
    6882:	88 23       	and	r24, r24
    6884:	91 f0       	breq	.+36     	; 0x68aa <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    6886:	64 85       	ldd	r22, Z+12	; 0x0c
    6888:	99 27       	eor	r25, r25
    688a:	87 fd       	sbrc	r24, 7
    688c:	90 95       	com	r25
    688e:	86 0f       	add	r24, r22
    6890:	91 1d       	adc	r25, r1
    6892:	8f 3f       	cpi	r24, 0xFF	; 255
    6894:	91 05       	cpc	r25, r1
    6896:	19 f0       	breq	.+6      	; 0x689e <ProcessMusic+0x5a>
    6898:	14 f0       	brlt	.+4      	; 0x689e <ProcessMusic+0x5a>
    689a:	8f ef       	ldi	r24, 0xFF	; 255
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	97 ff       	sbrs	r25, 7
    68a0:	02 c0       	rjmp	.+4      	; 0x68a6 <ProcessMusic+0x62>
    68a2:	80 e0       	ldi	r24, 0x00	; 0
    68a4:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    68a6:	f6 01       	movw	r30, r12
    68a8:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    68aa:	f9 01       	movw	r30, r18
    68ac:	10 81       	ld	r17, Z
    68ae:	13 ff       	sbrs	r17, 3
    68b0:	29 c0       	rjmp	.+82     	; 0x6904 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    68b2:	62 81       	ldd	r22, Z+2	; 0x02
    68b4:	73 81       	ldd	r23, Z+3	; 0x03
    68b6:	11 96       	adiw	r26, 0x01	; 1
    68b8:	8d 91       	ld	r24, X+
    68ba:	9c 91       	ld	r25, X
    68bc:	12 97       	sbiw	r26, 0x02	; 2
    68be:	86 0f       	add	r24, r22
    68c0:	97 1f       	adc	r25, r23
    68c2:	12 96       	adiw	r26, 0x02	; 2
    68c4:	9c 93       	st	X, r25
    68c6:	8e 93       	st	-X, r24
    68c8:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    68ca:	f6 01       	movw	r30, r12
    68cc:	04 81       	ldd	r16, Z+4	; 0x04
    68ce:	e0 2f       	mov	r30, r16
    68d0:	f0 e0       	ldi	r31, 0x00	; 0
    68d2:	ee 0f       	add	r30, r30
    68d4:	ff 1f       	adc	r31, r31
    68d6:	e8 5f       	subi	r30, 0xF8	; 248
    68d8:	f2 49       	sbci	r31, 0x92	; 146
    68da:	c5 90       	lpm	r12, Z+
    68dc:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    68de:	16 16       	cp	r1, r22
    68e0:	17 06       	cpc	r1, r23
    68e2:	24 f4       	brge	.+8      	; 0x68ec <ProcessMusic+0xa8>
    68e4:	8c 15       	cp	r24, r12
    68e6:	9d 05       	cpc	r25, r13
    68e8:	30 f4       	brcc	.+12     	; 0x68f6 <ProcessMusic+0xb2>
    68ea:	0c c0       	rjmp	.+24     	; 0x6904 <ProcessMusic+0xc0>
    68ec:	67 2b       	or	r22, r23
    68ee:	51 f0       	breq	.+20     	; 0x6904 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    68f0:	c8 16       	cp	r12, r24
    68f2:	d9 06       	cpc	r13, r25
    68f4:	38 f0       	brcs	.+14     	; 0x6904 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    68f6:	12 96       	adiw	r26, 0x02	; 2
    68f8:	dc 92       	st	X, r13
    68fa:	ce 92       	st	-X, r12
    68fc:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    68fe:	17 7f       	andi	r17, 0xF7	; 247
    6900:	f9 01       	movw	r30, r18
    6902:	10 83       	st	Z, r17
    6904:	4a 5e       	subi	r20, 0xEA	; 234
    6906:	5f 4f       	sbci	r21, 0xFF	; 255
    6908:	2a 5e       	subi	r18, 0xEA	; 234
    690a:	3f 4f       	sbci	r19, 0xFF	; 255
    690c:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    690e:	48 35       	cpi	r20, 0x58	; 88
    6910:	51 05       	cpc	r21, r1
    6912:	09 f0       	breq	.+2      	; 0x6916 <ProcessMusic+0xd2>
    6914:	b0 cf       	rjmp	.-160    	; 0x6876 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    6916:	80 91 a0 09 	lds	r24, 0x09A0
    691a:	88 23       	and	r24, r24
    691c:	09 f4       	brne	.+2      	; 0x6920 <ProcessMusic+0xdc>
    691e:	cb c0       	rjmp	.+406    	; 0x6ab6 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    6920:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    6922:	80 91 37 0c 	lds	r24, 0x0C37
    6926:	90 91 38 0c 	lds	r25, 0x0C38
    692a:	20 91 3d 0c 	lds	r18, 0x0C3D
    692e:	30 91 3e 0c 	lds	r19, 0x0C3E
    6932:	82 17       	cp	r24, r18
    6934:	93 07       	cpc	r25, r19
    6936:	09 f0       	breq	.+2      	; 0x693a <ProcessMusic+0xf6>
    6938:	b9 c0       	rjmp	.+370    	; 0x6aac <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    693a:	20 91 40 0c 	lds	r18, 0x0C40
    693e:	30 91 41 0c 	lds	r19, 0x0C41
    6942:	b9 01       	movw	r22, r18
    6944:	6f 5f       	subi	r22, 0xFF	; 255
    6946:	7f 4f       	sbci	r23, 0xFF	; 255
    6948:	70 93 41 0c 	sts	0x0C41, r23
    694c:	60 93 40 0c 	sts	0x0C40, r22
    6950:	f9 01       	movw	r30, r18
    6952:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    6954:	4f 3f       	cpi	r20, 0xFF	; 255
    6956:	79 f5       	brne	.+94     	; 0x69b6 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    6958:	a9 01       	movw	r20, r18
    695a:	4e 5f       	subi	r20, 0xFE	; 254
    695c:	5f 4f       	sbci	r21, 0xFF	; 255
    695e:	50 93 41 0c 	sts	0x0C41, r21
    6962:	40 93 40 0c 	sts	0x0C40, r20
    6966:	fb 01       	movw	r30, r22
    6968:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    696a:	6f 32       	cpi	r22, 0x2F	; 47
    696c:	19 f4       	brne	.+6      	; 0x6974 <ProcessMusic+0x130>
						playSong=false;
    696e:	10 92 a0 09 	sts	0x09A0, r1
						break;	
    6972:	9c c0       	rjmp	.+312    	; 0x6aac <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    6974:	66 30       	cpi	r22, 0x06	; 6
    6976:	09 f0       	breq	.+2      	; 0x697a <ProcessMusic+0x136>
    6978:	8c c0       	rjmp	.+280    	; 0x6a92 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    697a:	fa 01       	movw	r30, r20
    697c:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    697e:	c9 01       	movw	r24, r18
    6980:	04 96       	adiw	r24, 0x04	; 4
    6982:	90 93 41 0c 	sts	0x0C41, r25
    6986:	80 93 40 0c 	sts	0x0C40, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    698a:	f9 01       	movw	r30, r18
    698c:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    698e:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    6990:	e3 35       	cpi	r30, 0x53	; 83
    6992:	29 f4       	brne	.+10     	; 0x699e <ProcessMusic+0x15a>
							loopStart=songPos;
    6994:	90 93 43 0c 	sts	0x0C43, r25
    6998:	80 93 42 0c 	sts	0x0C42, r24
    699c:	7a c0       	rjmp	.+244    	; 0x6a92 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    699e:	e5 34       	cpi	r30, 0x45	; 69
    69a0:	09 f0       	breq	.+2      	; 0x69a4 <ProcessMusic+0x160>
    69a2:	77 c0       	rjmp	.+238    	; 0x6a92 <ProcessMusic+0x24e>
							songPos=loopStart;
    69a4:	80 91 42 0c 	lds	r24, 0x0C42
    69a8:	90 91 43 0c 	lds	r25, 0x0C43
    69ac:	90 93 41 0c 	sts	0x0C41, r25
    69b0:	80 93 40 0c 	sts	0x0C40, r24
    69b4:	6e c0       	rjmp	.+220    	; 0x6a92 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    69b6:	47 fd       	sbrc	r20, 7
    69b8:	40 93 3b 0c 	sts	0x0C3B, r20
					channel=lastStatus&0x0f;
    69bc:	90 91 3b 0c 	lds	r25, 0x0C3B
    69c0:	89 2f       	mov	r24, r25
    69c2:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    69c4:	47 ff       	sbrs	r20, 7
    69c6:	08 c0       	rjmp	.+16     	; 0x69d8 <ProcessMusic+0x194>
    69c8:	2e 5f       	subi	r18, 0xFE	; 254
    69ca:	3f 4f       	sbci	r19, 0xFF	; 255
    69cc:	30 93 41 0c 	sts	0x0C41, r19
    69d0:	20 93 40 0c 	sts	0x0C40, r18
    69d4:	fb 01       	movw	r30, r22
    69d6:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    69d8:	90 7f       	andi	r25, 0xF0	; 240
    69da:	90 3b       	cpi	r25, 0xB0	; 176
    69dc:	e1 f0       	breq	.+56     	; 0x6a16 <ProcessMusic+0x1d2>
    69de:	90 3c       	cpi	r25, 0xC0	; 192
    69e0:	09 f4       	brne	.+2      	; 0x69e4 <ProcessMusic+0x1a0>
    69e2:	51 c0       	rjmp	.+162    	; 0x6a86 <ProcessMusic+0x242>
    69e4:	90 39       	cpi	r25, 0x90	; 144
    69e6:	09 f0       	breq	.+2      	; 0x69ea <ProcessMusic+0x1a6>
    69e8:	54 c0       	rjmp	.+168    	; 0x6a92 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    69ea:	e0 91 40 0c 	lds	r30, 0x0C40
    69ee:	f0 91 41 0c 	lds	r31, 0x0C41
    69f2:	9f 01       	movw	r18, r30
    69f4:	2f 5f       	subi	r18, 0xFF	; 255
    69f6:	3f 4f       	sbci	r19, 0xFF	; 255
    69f8:	30 93 41 0c 	sts	0x0C41, r19
    69fc:	20 93 40 0c 	sts	0x0C40, r18
    6a00:	24 91       	lpm	r18, Z
    6a02:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    6a04:	18 9f       	mul	r17, r24
    6a06:	f0 01       	movw	r30, r0
    6a08:	11 24       	eor	r1, r1
    6a0a:	e1 52       	subi	r30, 0x21	; 33
    6a0c:	f4 4f       	sbci	r31, 0xF4	; 244
    6a0e:	66 85       	ldd	r22, Z+14	; 0x0e
    6a10:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <TriggerNote>
    6a14:	3e c0       	rjmp	.+124    	; 0x6a92 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    6a16:	e0 91 40 0c 	lds	r30, 0x0C40
    6a1a:	f0 91 41 0c 	lds	r31, 0x0C41
    6a1e:	9f 01       	movw	r18, r30
    6a20:	2f 5f       	subi	r18, 0xFF	; 255
    6a22:	3f 4f       	sbci	r19, 0xFF	; 255
    6a24:	30 93 41 0c 	sts	0x0C41, r19
    6a28:	20 93 40 0c 	sts	0x0C40, r18
    6a2c:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    6a2e:	47 30       	cpi	r20, 0x07	; 7
    6a30:	49 f4       	brne	.+18     	; 0x6a44 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    6a32:	18 9f       	mul	r17, r24
    6a34:	d0 01       	movw	r26, r0
    6a36:	11 24       	eor	r1, r1
    6a38:	a1 52       	subi	r26, 0x21	; 33
    6a3a:	b4 4f       	sbci	r27, 0xF4	; 244
    6a3c:	ee 0f       	add	r30, r30
    6a3e:	1a 96       	adiw	r26, 0x0a	; 10
    6a40:	ec 93       	st	X, r30
    6a42:	27 c0       	rjmp	.+78     	; 0x6a92 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    6a44:	4b 30       	cpi	r20, 0x0B	; 11
    6a46:	49 f4       	brne	.+18     	; 0x6a5a <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    6a48:	18 9f       	mul	r17, r24
    6a4a:	d0 01       	movw	r26, r0
    6a4c:	11 24       	eor	r1, r1
    6a4e:	a1 52       	subi	r26, 0x21	; 33
    6a50:	b4 4f       	sbci	r27, 0xF4	; 244
    6a52:	ee 0f       	add	r30, r30
    6a54:	19 96       	adiw	r26, 0x09	; 9
    6a56:	ec 93       	st	X, r30
    6a58:	1c c0       	rjmp	.+56     	; 0x6a92 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    6a5a:	4c 35       	cpi	r20, 0x5C	; 92
    6a5c:	49 f4       	brne	.+18     	; 0x6a70 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    6a5e:	18 9f       	mul	r17, r24
    6a60:	d0 01       	movw	r26, r0
    6a62:	11 24       	eor	r1, r1
    6a64:	a1 52       	subi	r26, 0x21	; 33
    6a66:	b4 4f       	sbci	r27, 0xF4	; 244
    6a68:	ee 0f       	add	r30, r30
    6a6a:	17 96       	adiw	r26, 0x07	; 7
    6a6c:	ec 93       	st	X, r30
    6a6e:	11 c0       	rjmp	.+34     	; 0x6a92 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    6a70:	44 36       	cpi	r20, 0x64	; 100
    6a72:	79 f4       	brne	.+30     	; 0x6a92 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    6a74:	18 9f       	mul	r17, r24
    6a76:	d0 01       	movw	r26, r0
    6a78:	11 24       	eor	r1, r1
    6a7a:	a1 52       	subi	r26, 0x21	; 33
    6a7c:	b4 4f       	sbci	r27, 0xF4	; 244
    6a7e:	ee 0f       	add	r30, r30
    6a80:	18 96       	adiw	r26, 0x08	; 8
    6a82:	ec 93       	st	X, r30
    6a84:	06 c0       	rjmp	.+12     	; 0x6a92 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    6a86:	18 9f       	mul	r17, r24
    6a88:	f0 01       	movw	r30, r0
    6a8a:	11 24       	eor	r1, r1
    6a8c:	e1 52       	subi	r30, 0x21	; 33
    6a8e:	f4 4f       	sbci	r31, 0xF4	; 244
    6a90:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    6a92:	80 e4       	ldi	r24, 0x40	; 64
    6a94:	9c e0       	ldi	r25, 0x0C	; 12
    6a96:	0e 94 15 33 	call	0x662a	; 0x662a <ReadVarLen>
    6a9a:	90 93 3e 0c 	sts	0x0C3E, r25
    6a9e:	80 93 3d 0c 	sts	0x0C3D, r24
				currDeltaTime=0;
    6aa2:	10 92 38 0c 	sts	0x0C38, r1
    6aa6:	10 92 37 0c 	sts	0x0C37, r1
    6aaa:	3b cf       	rjmp	.-394    	; 0x6922 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    6aac:	01 96       	adiw	r24, 0x01	; 1
    6aae:	90 93 38 0c 	sts	0x0C38, r25
    6ab2:	80 93 37 0c 	sts	0x0C37, r24
    6ab6:	95 ee       	ldi	r25, 0xE5	; 229
    6ab8:	a9 2e       	mov	r10, r25
    6aba:	9b e0       	ldi	r25, 0x0B	; 11
    6abc:	b9 2e       	mov	r11, r25
    6abe:	01 ef       	ldi	r16, 0xF1	; 241
    6ac0:	1b e0       	ldi	r17, 0x0B	; 11
    6ac2:	20 ef       	ldi	r18, 0xF0	; 240
    6ac4:	c2 2e       	mov	r12, r18
    6ac6:	2b e0       	ldi	r18, 0x0B	; 11
    6ac8:	d2 2e       	mov	r13, r18
    6aca:	32 ef       	ldi	r19, 0xF2	; 242
    6acc:	83 2e       	mov	r8, r19
    6ace:	3b e0       	ldi	r19, 0x0B	; 11
    6ad0:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    6ad2:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6ad4:	66 24       	eor	r6, r6
    6ad6:	6a 94       	dec	r6
    6ad8:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    6ada:	88 81       	ld	r24, Y
    6adc:	86 fd       	sbrc	r24, 6
    6ade:	43 c0       	rjmp	.+134    	; 0x6b66 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    6ae0:	8c 89       	ldd	r24, Y+20	; 0x14
    6ae2:	9d 89       	ldd	r25, Y+21	; 0x15
    6ae4:	89 2b       	or	r24, r25
    6ae6:	09 f4       	brne	.+2      	; 0x6aea <ProcessMusic+0x2a6>
    6ae8:	3a c0       	rjmp	.+116    	; 0x6b5e <ProcessMusic+0x31a>
    6aea:	d8 01       	movw	r26, r16
    6aec:	9c 91       	ld	r25, X
    6aee:	f6 01       	movw	r30, r12
    6af0:	80 81       	ld	r24, Z
    6af2:	98 17       	cp	r25, r24
    6af4:	08 f4       	brcc	.+2      	; 0x6af8 <ProcessMusic+0x2b4>
    6af6:	33 c0       	rjmp	.+102    	; 0x6b5e <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    6af8:	d8 01       	movw	r26, r16
    6afa:	9c 91       	ld	r25, X
    6afc:	f6 01       	movw	r30, r12
    6afe:	80 81       	ld	r24, Z
    6b00:	98 13       	cpse	r25, r24
    6b02:	2d c0       	rjmp	.+90     	; 0x6b5e <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    6b04:	ec 89       	ldd	r30, Y+20	; 0x14
    6b06:	fd 89       	ldd	r31, Y+21	; 0x15
    6b08:	af 01       	movw	r20, r30
    6b0a:	4f 5f       	subi	r20, 0xFF	; 255
    6b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    6b0e:	5d 8b       	std	Y+21, r21	; 0x15
    6b10:	4c 8b       	std	Y+20, r20	; 0x14
    6b12:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    6b14:	8f 3f       	cpi	r24, 0xFF	; 255
    6b16:	31 f4       	brne	.+12     	; 0x6b24 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    6b18:	88 81       	ld	r24, Y
    6b1a:	8f 77       	andi	r24, 0x7F	; 127
    6b1c:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    6b1e:	1d 8a       	std	Y+21, r1	; 0x15
    6b20:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    6b22:	1d c0       	rjmp	.+58     	; 0x6b5e <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    6b24:	32 96       	adiw	r30, 0x02	; 2
    6b26:	fd 8b       	std	Y+21, r31	; 0x15
    6b28:	ec 8b       	std	Y+20, r30	; 0x14
    6b2a:	fa 01       	movw	r30, r20
    6b2c:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    6b2e:	e8 2f       	mov	r30, r24
    6b30:	f0 e0       	ldi	r31, 0x00	; 0
    6b32:	ee 0f       	add	r30, r30
    6b34:	ff 1f       	adc	r31, r31
    6b36:	e0 53       	subi	r30, 0x30	; 48
    6b38:	ff 4f       	sbci	r31, 0xFF	; 255
    6b3a:	25 91       	lpm	r18, Z+
    6b3c:	34 91       	lpm	r19, Z
    6b3e:	65 2d       	mov	r22, r5
    6b40:	ce 01       	movw	r24, r28
    6b42:	f9 01       	movw	r30, r18
    6b44:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    6b46:	ec 89       	ldd	r30, Y+20	; 0x14
    6b48:	fd 89       	ldd	r31, Y+21	; 0x15
    6b4a:	cf 01       	movw	r24, r30
    6b4c:	01 96       	adiw	r24, 0x01	; 1
    6b4e:	9d 8b       	std	Y+21, r25	; 0x15
    6b50:	8c 8b       	std	Y+20, r24	; 0x14
    6b52:	e4 91       	lpm	r30, Z
    6b54:	d6 01       	movw	r26, r12
    6b56:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    6b58:	f8 01       	movw	r30, r16
    6b5a:	10 82       	st	Z, r1
    6b5c:	cd cf       	rjmp	.-102    	; 0x6af8 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    6b5e:	d8 01       	movw	r26, r16
    6b60:	8c 91       	ld	r24, X
    6b62:	8f 5f       	subi	r24, 0xFF	; 255
    6b64:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    6b66:	98 81       	ld	r25, Y
    6b68:	95 ff       	sbrs	r25, 5
    6b6a:	6c c0       	rjmp	.+216    	; 0x6c44 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    6b6c:	f4 01       	movw	r30, r8
    6b6e:	80 81       	ld	r24, Z
    6b70:	8f 3f       	cpi	r24, 0xFF	; 255
    6b72:	11 f0       	breq	.+4      	; 0x6b78 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    6b74:	8f 5f       	subi	r24, 0xFF	; 255
    6b76:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    6b78:	97 fd       	sbrc	r25, 7
    6b7a:	04 c0       	rjmp	.+8      	; 0x6b84 <ProcessMusic+0x340>
    6b7c:	f8 01       	movw	r30, r16
    6b7e:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    6b80:	90 81       	ld	r25, Z
    6b82:	01 c0       	rjmp	.+2      	; 0x6b86 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    6b84:	9f ef       	ldi	r25, 0xFF	; 255
    6b86:	f8 01       	movw	r30, r16
    6b88:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    6b8a:	80 81       	ld	r24, Z
    6b8c:	88 23       	and	r24, r24
    6b8e:	09 f4       	brne	.+2      	; 0x6b92 <ProcessMusic+0x34e>
    6b90:	4e c0       	rjmp	.+156    	; 0x6c2e <ProcessMusic+0x3ea>
    6b92:	31 96       	adiw	r30, 0x01	; 1
    6b94:	50 81       	ld	r21, Z
    6b96:	55 23       	and	r21, r21
    6b98:	09 f4       	brne	.+2      	; 0x6b9c <ProcessMusic+0x358>
    6b9a:	49 c0       	rjmp	.+146    	; 0x6c2e <ProcessMusic+0x3ea>
    6b9c:	99 23       	and	r25, r25
    6b9e:	09 f4       	brne	.+2      	; 0x6ba2 <ProcessMusic+0x35e>
    6ba0:	46 c0       	rjmp	.+140    	; 0x6c2e <ProcessMusic+0x3ea>
    6ba2:	40 91 3c 0c 	lds	r20, 0x0C3C
    6ba6:	44 23       	and	r20, r20
    6ba8:	09 f4       	brne	.+2      	; 0x6bac <ProcessMusic+0x368>
    6baa:	41 c0       	rjmp	.+130    	; 0x6c2e <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    6bac:	89 9f       	mul	r24, r25
    6bae:	c0 01       	movw	r24, r0
    6bb0:	11 24       	eor	r1, r1
    6bb2:	93 95       	inc	r25
				uVol>>=8;
    6bb4:	89 2f       	mov	r24, r25
    6bb6:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    6bb8:	58 9f       	mul	r21, r24
    6bba:	90 01       	movw	r18, r0
    6bbc:	59 9f       	mul	r21, r25
    6bbe:	30 0d       	add	r19, r0
    6bc0:	11 24       	eor	r1, r1
    6bc2:	c9 01       	movw	r24, r18
    6bc4:	93 95       	inc	r25
				uVol>>=8;
    6bc6:	89 2f       	mov	r24, r25
    6bc8:	99 27       	eor	r25, r25
    6bca:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    6bcc:	50 81       	ld	r21, Z
    6bce:	58 9f       	mul	r21, r24
    6bd0:	90 01       	movw	r18, r0
    6bd2:	59 9f       	mul	r21, r25
    6bd4:	30 0d       	add	r19, r0
    6bd6:	11 24       	eor	r1, r1
    6bd8:	33 95       	inc	r19
				uVol>>=8;
    6bda:	23 2f       	mov	r18, r19
    6bdc:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    6bde:	42 9f       	mul	r20, r18
    6be0:	c0 01       	movw	r24, r0
    6be2:	43 9f       	mul	r20, r19
    6be4:	90 0d       	add	r25, r0
    6be6:	11 24       	eor	r1, r1
    6be8:	93 95       	inc	r25
				uVol>>=8;
    6bea:	89 2f       	mov	r24, r25
    6bec:	99 27       	eor	r25, r25
    6bee:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    6bf0:	20 81       	ld	r18, Z
    6bf2:	22 23       	and	r18, r18
    6bf4:	f1 f0       	breq	.+60     	; 0x6c32 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    6bf6:	d5 01       	movw	r26, r10
    6bf8:	ec 91       	ld	r30, X
    6bfa:	f0 e0       	ldi	r31, 0x00	; 0
    6bfc:	e0 50       	subi	r30, 0x00	; 0
    6bfe:	f1 49       	sbci	r31, 0x91	; 145
    6c00:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    6c02:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    6c04:	2e 9f       	mul	r18, r30
    6c06:	f0 01       	movw	r30, r0
    6c08:	11 24       	eor	r1, r1
    6c0a:	f3 95       	inc	r31
					tVol>>=8;
    6c0c:	ef 2f       	mov	r30, r31
    6c0e:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6c10:	a3 01       	movw	r20, r6
    6c12:	4e 1b       	sub	r20, r30
    6c14:	5f 0b       	sbc	r21, r31
    6c16:	48 9f       	mul	r20, r24
    6c18:	90 01       	movw	r18, r0
    6c1a:	49 9f       	mul	r20, r25
    6c1c:	30 0d       	add	r19, r0
    6c1e:	58 9f       	mul	r21, r24
    6c20:	30 0d       	add	r19, r0
    6c22:	11 24       	eor	r1, r1
    6c24:	c9 01       	movw	r24, r18
    6c26:	93 95       	inc	r25
					uVol>>=8;
    6c28:	89 2f       	mov	r24, r25
    6c2a:	99 27       	eor	r25, r25
    6c2c:	02 c0       	rjmp	.+4      	; 0x6c32 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    6c2e:	80 e0       	ldi	r24, 0x00	; 0
    6c30:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    6c32:	f5 01       	movw	r30, r10
    6c34:	30 81       	ld	r19, Z
    6c36:	f8 01       	movw	r30, r16
    6c38:	3a 97       	sbiw	r30, 0x0a	; 10
    6c3a:	20 81       	ld	r18, Z
    6c3c:	23 0f       	add	r18, r19
    6c3e:	d5 01       	movw	r26, r10
    6c40:	2c 93       	st	X, r18
    6c42:	02 c0       	rjmp	.+4      	; 0x6c48 <ProcessMusic+0x404>

		}else{
			uVol=0;
    6c44:	80 e0       	ldi	r24, 0x00	; 0
    6c46:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    6c48:	f7 01       	movw	r30, r14
    6c4a:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    6c4c:	53 94       	inc	r5
    6c4e:	66 96       	adiw	r28, 0x16	; 22
    6c50:	f6 e0       	ldi	r31, 0x06	; 6
    6c52:	ef 0e       	add	r14, r31
    6c54:	f1 1c       	adc	r15, r1
    6c56:	86 e1       	ldi	r24, 0x16	; 22
    6c58:	a8 0e       	add	r10, r24
    6c5a:	b1 1c       	adc	r11, r1
    6c5c:	0a 5e       	subi	r16, 0xEA	; 234
    6c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    6c60:	96 e1       	ldi	r25, 0x16	; 22
    6c62:	c9 0e       	add	r12, r25
    6c64:	d1 1c       	adc	r13, r1
    6c66:	a6 e1       	ldi	r26, 0x16	; 22
    6c68:	8a 0e       	add	r8, r26
    6c6a:	91 1c       	adc	r9, r1
    6c6c:	b4 e0       	ldi	r27, 0x04	; 4
    6c6e:	5b 12       	cpse	r5, r27
    6c70:	34 cf       	rjmp	.-408    	; 0x6ada <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    6c72:	df 91       	pop	r29
    6c74:	cf 91       	pop	r28
    6c76:	1f 91       	pop	r17
    6c78:	0f 91       	pop	r16
    6c7a:	ff 90       	pop	r15
    6c7c:	ef 90       	pop	r14
    6c7e:	df 90       	pop	r13
    6c80:	cf 90       	pop	r12
    6c82:	bf 90       	pop	r11
    6c84:	af 90       	pop	r10
    6c86:	9f 90       	pop	r9
    6c88:	8f 90       	pop	r8
    6c8a:	7f 90       	pop	r7
    6c8c:	6f 90       	pop	r6
    6c8e:	5f 90       	pop	r5
    6c90:	08 95       	ret

00006c92 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    6c92:	80 93 3c 0c 	sts	0x0C3C, r24
    6c96:	08 95       	ret

00006c98 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    6c98:	99 27       	eor	r25, r25
	clr r23
    6c9a:	77 27       	eor	r23, r23

#if MIXER_CHAN4_TYPE == 0 
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
    6c9c:	83 30       	cpi	r24, 0x03	; 3
		brlo set_note_waves
    6c9e:	08 f0       	brcs	.+2      	; 0x6ca2 <set_note_waves>
		ret		
    6ca0:	08 95       	ret

00006ca2 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    6ca2:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    6ca4:	fd e6       	ldi	r31, 0x6D	; 109
	lsl r22
    6ca6:	66 0f       	add	r22, r22
	rol r23
    6ca8:	77 1f       	adc	r23, r23
	add ZL,r22
    6caa:	e6 0f       	add	r30, r22
	adc ZH,r23	
    6cac:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    6cae:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    6cb0:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    6cb2:	e2 eb       	ldi	r30, 0xB2	; 178
	ldi ZH,hi8(mixerStruct)
    6cb4:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    6cb6:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    6cb8:	28 9f       	mul	r18, r24
	add ZL,r0
    6cba:	e0 0d       	add	r30, r0
	adc ZH,r1
    6cbc:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    6cbe:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    6cc0:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    6cc2:	11 24       	eor	r1, r1
	

	ret
    6cc4:	08 95       	ret

00006cc6 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    6cc6:	99 27       	eor	r25, r25
	clr r23
    6cc8:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    6cca:	e2 eb       	ldi	r30, 0xB2	; 178
	ldi ZH,hi8(mixerStruct)
    6ccc:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    6cce:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    6cd0:	28 9f       	mul	r18, r24
	add ZL,r0
    6cd2:	e0 0d       	add	r30, r0
	adc ZH,r1
    6cd4:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    6cd6:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    6cd8:	31 f4       	brne	.+12     	; 0x6ce6 <smw1>
	lds r22,tr4_params
    6cda:	60 91 c5 0b 	lds	r22, 0x0BC5
	andi r22,0xfe;
    6cde:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    6ce0:	60 93 c5 0b 	sts	0x0BC5, r22
	rjmp esmw	
    6ce4:	0b c0       	rjmp	.+22     	; 0x6cfc <esmw>

00006ce6 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    6ce6:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    6ce8:	31 f4       	brne	.+12     	; 0x6cf6 <smw2>
	lds r22,tr4_params
    6cea:	60 91 c5 0b 	lds	r22, 0x0BC5
	ori r22,0xfe;
    6cee:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    6cf0:	60 93 c5 0b 	sts	0x0BC5, r22
	rjmp esmw
    6cf4:	03 c0       	rjmp	.+6      	; 0x6cfc <esmw>

00006cf6 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    6cf6:	7f e6       	ldi	r23, 0x6F	; 111
	add r23,r22
    6cf8:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    6cfa:	75 83       	std	Z+5, r23	; 0x05

00006cfc <esmw>:

esmw:
	clr r1	
    6cfc:	11 24       	eor	r1, r1
	ret
    6cfe:	08 95       	ret

00006d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    6d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    6d02:	80 93 b1 0b 	sts	0x0BB1, r24
	ret
    6d06:	08 95       	ret

00006d08 <steptable>:
    6d08:	22 00       	.word	0x0022	; ????
    6d0a:	24 00       	.word	0x0024	; ????
    6d0c:	26 00       	.word	0x0026	; ????
    6d0e:	28 00       	.word	0x0028	; ????
    6d10:	2b 00       	.word	0x002b	; ????
    6d12:	2d 00       	.word	0x002d	; ????
    6d14:	30 00       	.word	0x0030	; ????
    6d16:	33 00       	.word	0x0033	; ????
    6d18:	36 00       	.word	0x0036	; ????
    6d1a:	39 00       	.word	0x0039	; ????
    6d1c:	3d 00       	.word	0x003d	; ????
    6d1e:	40 00       	.word	0x0040	; ????
    6d20:	44 00       	.word	0x0044	; ????
    6d22:	48 00       	.word	0x0048	; ????
    6d24:	4c 00       	.word	0x004c	; ????
    6d26:	51 00       	.word	0x0051	; ????
    6d28:	56 00       	.word	0x0056	; ????
    6d2a:	5b 00       	.word	0x005b	; ????
    6d2c:	60 00       	.word	0x0060	; ????
    6d2e:	66 00       	.word	0x0066	; ????
    6d30:	6c 00       	.word	0x006c	; ????
    6d32:	73 00       	.word	0x0073	; ????
    6d34:	79 00       	.word	0x0079	; ????
    6d36:	81 00       	.word	0x0081	; ????
    6d38:	88 00       	.word	0x0088	; ????
    6d3a:	90 00       	.word	0x0090	; ????
    6d3c:	99 00       	.word	0x0099	; ????
    6d3e:	a2 00       	.word	0x00a2	; ????
    6d40:	ac 00       	.word	0x00ac	; ????
    6d42:	b6 00       	.word	0x00b6	; ????
    6d44:	c1 00       	.word	0x00c1	; ????
    6d46:	cc 00       	.word	0x00cc	; ????
    6d48:	d8 00       	.word	0x00d8	; ????
    6d4a:	e5 00       	.word	0x00e5	; ????
    6d4c:	f3 00       	.word	0x00f3	; ????
    6d4e:	01 01       	movw	r0, r2
    6d50:	10 01       	movw	r2, r0
    6d52:	21 01       	movw	r4, r2
    6d54:	32 01       	movw	r6, r4
    6d56:	44 01       	movw	r8, r8
    6d58:	57 01       	movw	r10, r14
    6d5a:	6c 01       	movw	r12, r24
    6d5c:	81 01       	movw	r16, r2
    6d5e:	98 01       	movw	r18, r16
    6d60:	b0 01       	movw	r22, r0
    6d62:	ca 01       	movw	r24, r20
    6d64:	e5 01       	movw	r28, r10
    6d66:	02 02       	muls	r16, r18
    6d68:	21 02       	muls	r18, r17
    6d6a:	41 02       	muls	r20, r17
    6d6c:	64 02       	muls	r22, r20
    6d6e:	88 02       	muls	r24, r24
    6d70:	ae 02       	muls	r26, r30
    6d72:	d7 02       	muls	r29, r23
    6d74:	03 03       	mulsu	r16, r19
    6d76:	30 03       	mulsu	r19, r16
    6d78:	61 03       	mulsu	r22, r17
    6d7a:	94 03       	fmuls	r17, r20
    6d7c:	cb 03       	fmulsu	r20, r19
    6d7e:	05 04       	cpc	r0, r5
    6d80:	42 04       	cpc	r4, r2
    6d82:	83 04       	cpc	r8, r3
    6d84:	c7 04       	cpc	r12, r7
    6d86:	10 05       	cpc	r17, r0
    6d88:	5d 05       	cpc	r21, r13
    6d8a:	af 05       	cpc	r26, r15
    6d8c:	05 06       	cpc	r0, r21
    6d8e:	61 06       	cpc	r6, r17
    6d90:	c2 06       	cpc	r12, r18
    6d92:	29 07       	cpc	r18, r25
    6d94:	96 07       	cpc	r25, r22
    6d96:	09 08       	sbc	r0, r9
    6d98:	83 08       	sbc	r8, r3
    6d9a:	05 09       	sbc	r16, r5
    6d9c:	8e 09       	sbc	r24, r14
    6d9e:	20 0a       	sbc	r2, r16
    6da0:	ba 0a       	sbc	r11, r26
    6da2:	5d 0b       	sbc	r21, r29
    6da4:	0a 0c       	add	r0, r10
    6da6:	c1 0c       	add	r12, r1
    6da8:	84 0d       	add	r24, r4
    6daa:	51 0e       	add	r5, r17
    6dac:	2b 0f       	add	r18, r27
    6dae:	12 10       	cpse	r1, r2
    6db0:	07 11       	cpse	r16, r7
    6db2:	0a 12       	cpse	r0, r26
    6db4:	1d 13       	cpse	r17, r29
    6db6:	40 14       	cp	r4, r0
    6db8:	74 15       	cp	r23, r4
    6dba:	ba 16       	cp	r11, r26
    6dbc:	14 18       	sub	r1, r4
    6dbe:	83 19       	sub	r24, r3
    6dc0:	07 1b       	sub	r16, r23
    6dc2:	a3 1c       	adc	r10, r3
    6dc4:	57 1e       	adc	r5, r23
    6dc6:	24 20       	and	r2, r4
    6dc8:	0e 22       	and	r0, r30
    6dca:	14 24       	eor	r1, r4
    6dcc:	39 26       	eor	r3, r25
    6dce:	7f 28       	or	r7, r15
    6dd0:	e8 2a       	or	r14, r24
    6dd2:	75 2d       	mov	r23, r5
    6dd4:	29 30       	cpi	r18, 0x09	; 9
    6dd6:	06 33       	cpi	r16, 0x36	; 54
    6dd8:	0f 36       	cpi	r16, 0x6F	; 111
    6dda:	45 39       	cpi	r20, 0x95	; 149
    6ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    6dde:	49 40       	sbci	r20, 0x09	; 9
    6de0:	1b 44       	sbci	r17, 0x4B	; 75
    6de2:	28 48       	sbci	r18, 0x88	; 136
    6de4:	73 4c       	sbci	r23, 0xC3	; 195
    6de6:	fe 50       	subi	r31, 0x0E	; 14
    6de8:	cf 55       	subi	r28, 0x5F	; 95
    6dea:	ea 5a       	subi	r30, 0xAA	; 170
    6dec:	51 60       	ori	r21, 0x01	; 1
    6dee:	0c 66       	ori	r16, 0x6C	; 108
    6df0:	1d 6c       	ori	r17, 0xCD	; 205
    6df2:	8b 72       	andi	r24, 0x2B	; 43
    6df4:	5a 79       	andi	r21, 0x9A	; 154
    6df6:	92 80       	ldd	r9, Z+2	; 0x02
    6df8:	37 88       	ldd	r3, Z+23	; 0x17
    6dfa:	50 90 e5 98 	lds	r5, 0x98E5
    6dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    6e00:	9f ab       	std	Y+55, r25	; 0x37
    6e02:	d3 b5       	in	r29, 0x23	; 35
    6e04:	a3 c0       	rjmp	.+326    	; 0x6f4c <waves+0x4c>
	...

00006f00 <waves>:
    6f00:	00 03       	mulsu	r16, r16
    6f02:	06 09       	sbc	r16, r6
    6f04:	0c 10       	cpse	r0, r12
    6f06:	13 16       	cp	r1, r19
    6f08:	19 1c       	adc	r1, r9
    6f0a:	1f 22       	and	r1, r31
    6f0c:	25 28       	or	r2, r5
    6f0e:	2b 2e       	mov	r2, r27
    6f10:	31 33       	cpi	r19, 0x31	; 49
    6f12:	36 39       	cpi	r19, 0x96	; 150
    6f14:	3c 3f       	cpi	r19, 0xFC	; 252
    6f16:	41 44       	sbci	r20, 0x41	; 65
    6f18:	47 49       	sbci	r20, 0x97	; 151
    6f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    6f1c:	51 53       	subi	r21, 0x31	; 49
    6f1e:	55 58       	subi	r21, 0x85	; 133
    6f20:	5a 5c       	subi	r21, 0xCA	; 202
    6f22:	5e 60       	ori	r21, 0x0E	; 14
    6f24:	62 64       	ori	r22, 0x42	; 66
    6f26:	66 68       	ori	r22, 0x86	; 134
    6f28:	6a 6b       	ori	r22, 0xBA	; 186
    6f2a:	6d 6f       	ori	r22, 0xFD	; 253
    6f2c:	70 71       	andi	r23, 0x10	; 16
    6f2e:	73 74       	andi	r23, 0x43	; 67
    6f30:	75 76       	andi	r23, 0x65	; 101
    6f32:	78 79       	andi	r23, 0x98	; 152
    6f34:	7a 7a       	andi	r23, 0xAA	; 170
    6f36:	7b 7c       	andi	r23, 0xCB	; 203
    6f38:	7d 7d       	andi	r23, 0xDD	; 221
    6f3a:	7e 7e       	andi	r23, 0xEE	; 238
    6f3c:	7e 7f       	andi	r23, 0xFE	; 254
    6f3e:	7f 7f       	andi	r23, 0xFF	; 255
    6f40:	7f 7f       	andi	r23, 0xFF	; 255
    6f42:	7f 7f       	andi	r23, 0xFF	; 255
    6f44:	7e 7e       	andi	r23, 0xEE	; 238
    6f46:	7e 7d       	andi	r23, 0xDE	; 222
    6f48:	7d 7c       	andi	r23, 0xCD	; 205
    6f4a:	7b 7a       	andi	r23, 0xAB	; 171
    6f4c:	7a 79       	andi	r23, 0x9A	; 154
    6f4e:	78 76       	andi	r23, 0x68	; 104
    6f50:	75 74       	andi	r23, 0x45	; 69
    6f52:	73 71       	andi	r23, 0x13	; 19
    6f54:	70 6f       	ori	r23, 0xF0	; 240
    6f56:	6d 6b       	ori	r22, 0xBD	; 189
    6f58:	6a 68       	ori	r22, 0x8A	; 138
    6f5a:	66 64       	ori	r22, 0x46	; 70
    6f5c:	62 60       	ori	r22, 0x02	; 2
    6f5e:	5e 5c       	subi	r21, 0xCE	; 206
    6f60:	5a 58       	subi	r21, 0x8A	; 138
    6f62:	55 53       	subi	r21, 0x35	; 53
    6f64:	51 4e       	sbci	r21, 0xE1	; 225
    6f66:	4c 49       	sbci	r20, 0x9C	; 156
    6f68:	47 44       	sbci	r20, 0x47	; 71
    6f6a:	41 3f       	cpi	r20, 0xF1	; 241
    6f6c:	3c 39       	cpi	r19, 0x9C	; 156
    6f6e:	36 33       	cpi	r19, 0x36	; 54
    6f70:	31 2e       	mov	r3, r17
    6f72:	2b 28       	or	r2, r11
    6f74:	25 22       	and	r2, r21
    6f76:	1f 1c       	adc	r1, r15
    6f78:	19 16       	cp	r1, r25
    6f7a:	13 10       	cpse	r1, r3
    6f7c:	0c 09       	sbc	r16, r12
    6f7e:	06 03       	mulsu	r16, r22
    6f80:	00 fd       	sbrc	r16, 0
    6f82:	fa f7       	brpl	.-2      	; 0x6f82 <waves+0x82>
    6f84:	f4 f0       	brlt	.+60     	; 0x6fc2 <waves+0xc2>
    6f86:	ed ea       	ldi	r30, 0xAD	; 173
    6f88:	e7 e4       	ldi	r30, 0x47	; 71
    6f8a:	e1 de       	rcall	.-574    	; 0x6d4e <steptable+0x46>
    6f8c:	db d8       	rcall	.-3658   	; 0x6144 <update_sound+0x12>
    6f8e:	d5 d2       	rcall	.+1450   	; 0x753a <waves+0x63a>
    6f90:	cf cd       	rjmp	.-1122   	; 0x6b30 <ProcessMusic+0x2ec>
    6f92:	ca c7       	rjmp	.+3988   	; 0x7f28 <LBCopyChars+0x16>
    6f94:	c4 c1       	rjmp	.+904    	; 0x731e <waves+0x41e>
    6f96:	bf bc       	out	0x2f, r11	; 47
    6f98:	b9 b7       	in	r27, 0x39	; 57
    6f9a:	b4 b2       	in	r11, 0x14	; 20
    6f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    6f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    6fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    6fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    6fa4:	9e 9c       	mul	r9, r14
    6fa6:	9a 98       	cbi	0x13, 2	; 19
    6fa8:	96 95       	lsr	r25
    6faa:	93 91       	.word	0x9193	; ????
    6fac:	90 8f       	std	Z+24, r25	; 0x18
    6fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6fb0:	8b 8a       	std	Y+19, r8	; 0x13
    6fb2:	88 87       	std	Y+8, r24	; 0x08
    6fb4:	86 86       	std	Z+14, r8	; 0x0e
    6fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    6fb8:	83 83       	std	Z+3, r24	; 0x03
    6fba:	82 82       	std	Z+2, r8	; 0x02
    6fbc:	82 81       	ldd	r24, Z+2	; 0x02
    6fbe:	81 81       	ldd	r24, Z+1	; 0x01
    6fc0:	81 81       	ldd	r24, Z+1	; 0x01
    6fc2:	81 81       	ldd	r24, Z+1	; 0x01
    6fc4:	82 82       	std	Z+2, r8	; 0x02
    6fc6:	82 83       	std	Z+2, r24	; 0x02
    6fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    6fca:	85 86       	std	Z+13, r8	; 0x0d
    6fcc:	86 87       	std	Z+14, r24	; 0x0e
    6fce:	88 8a       	std	Y+16, r8	; 0x10
    6fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    6fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    6fd4:	90 91 93 95 	lds	r25, 0x9593
    6fd8:	96 98       	cbi	0x12, 6	; 18
    6fda:	9a 9c       	mul	r9, r10
    6fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    6fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    6fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    6fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    6fe4:	af b2       	in	r10, 0x1f	; 31
    6fe6:	b4 b7       	in	r27, 0x34	; 52
    6fe8:	b9 bc       	out	0x29, r11	; 41
    6fea:	bf c1       	rjmp	.+894    	; 0x736a <waves+0x46a>
    6fec:	c4 c7       	rjmp	.+3976   	; 0x7f76 <LBPrintStr+0x4c>
    6fee:	ca cd       	rjmp	.-1132   	; 0x6b84 <ProcessMusic+0x340>
    6ff0:	cf d2       	rcall	.+1438   	; 0x7590 <waves+0x690>
    6ff2:	d5 d8       	rcall	.-3670   	; 0x619e <fill_vram_loop+0x2>
    6ff4:	db de       	rcall	.-586    	; 0x6dac <steptable+0xa4>
    6ff6:	e1 e4       	ldi	r30, 0x41	; 65
    6ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    6ffa:	ed f0       	brhs	.+58     	; 0x7036 <waves+0x136>
    6ffc:	f4 f7       	brge	.-4      	; 0x6ffa <waves+0xfa>
    6ffe:	fa fd       	.word	0xfdfa	; ????
    7000:	80 81       	ld	r24, Z
    7002:	82 83       	std	Z+2, r24	; 0x02
    7004:	84 85       	ldd	r24, Z+12	; 0x0c
    7006:	86 87       	std	Z+14, r24	; 0x0e
    7008:	88 89       	ldd	r24, Y+16	; 0x10
    700a:	8a 8b       	std	Y+18, r24	; 0x12
    700c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    700e:	8e 8f       	std	Y+30, r24	; 0x1e
    7010:	90 91 92 93 	lds	r25, 0x9392
    7014:	94 95       	.word	0x9594	; ????
    7016:	96 97       	sbiw	r26, 0x26	; 38
    7018:	98 99       	sbic	0x13, 0	; 19
    701a:	9a 9b       	sbis	0x13, 2	; 19
    701c:	9c 9d       	mul	r25, r12
    701e:	9e 9f       	mul	r25, r30
    7020:	a0 a1       	ldd	r26, Z+32	; 0x20
    7022:	a2 a3       	std	Z+34, r26	; 0x22
    7024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7026:	a6 a7       	std	Z+46, r26	; 0x2e
    7028:	a8 a9       	ldd	r26, Y+48	; 0x30
    702a:	aa ab       	std	Y+50, r26	; 0x32
    702c:	ac ad       	ldd	r26, Y+60	; 0x3c
    702e:	ae af       	std	Y+62, r26	; 0x3e
    7030:	b0 b1       	in	r27, 0x00	; 0
    7032:	b2 b3       	in	r27, 0x12	; 18
    7034:	b4 b5       	in	r27, 0x24	; 36
    7036:	b6 b7       	in	r27, 0x36	; 54
    7038:	b8 b9       	out	0x08, r27	; 8
    703a:	ba bb       	out	0x1a, r27	; 26
    703c:	bc bd       	out	0x2c, r27	; 44
    703e:	be bf       	out	0x3e, r27	; 62
    7040:	c0 c1       	rjmp	.+896    	; 0x73c2 <waves+0x4c2>
    7042:	c2 c3       	rjmp	.+1924   	; 0x77c8 <waves+0x8c8>
    7044:	c4 c5       	rjmp	.+2952   	; 0x7bce <InitializeVideoMode+0x10>
    7046:	c6 c7       	rjmp	.+3980   	; 0x7fd4 <LBCollides+0x48>
    7048:	c8 c9       	rjmp	.-3184   	; 0x63da <EepromWriteBlock+0x8c>
    704a:	ca cb       	rjmp	.-2156   	; 0x67e0 <TriggerNote+0xa>
    704c:	cc cd       	rjmp	.-1128   	; 0x6be6 <ProcessMusic+0x3a2>
    704e:	ce cf       	rjmp	.-100    	; 0x6fec <waves+0xec>
    7050:	d0 d1       	rcall	.+928    	; 0x73f2 <waves+0x4f2>
    7052:	d2 d3       	rcall	.+1956   	; 0x77f8 <waves+0x8f8>
    7054:	d4 d5       	rcall	.+2984   	; 0x7bfe <DrawMap2+0x2c>
    7056:	d6 d7       	rcall	.+4012   	; 0x8004 <LBLineIntersect+0x24>
    7058:	d8 d9       	rcall	.-3152   	; 0x640a <EepromWriteBlock+0xbc>
    705a:	da db       	rcall	.-2124   	; 0x6810 <TriggerNote+0x3a>
    705c:	dc dd       	rcall	.-1096   	; 0x6c16 <ProcessMusic+0x3d2>
    705e:	de df       	rcall	.-68     	; 0x701c <waves+0x11c>
    7060:	e0 e1       	ldi	r30, 0x10	; 16
    7062:	e2 e3       	ldi	r30, 0x32	; 50
    7064:	e4 e5       	ldi	r30, 0x54	; 84
    7066:	e6 e7       	ldi	r30, 0x76	; 118
    7068:	e8 e9       	ldi	r30, 0x98	; 152
    706a:	ea eb       	ldi	r30, 0xBA	; 186
    706c:	ec ed       	ldi	r30, 0xDC	; 220
    706e:	ee ef       	ldi	r30, 0xFE	; 254
    7070:	f0 f1       	brcs	.+124    	; 0x70ee <waves+0x1ee>
    7072:	f2 f3       	brmi	.-4      	; 0x7070 <waves+0x170>
    7074:	f4 f5       	brge	.+124    	; 0x70f2 <waves+0x1f2>
    7076:	f6 f7       	brtc	.-4      	; 0x7074 <waves+0x174>
    7078:	f8 f9       	.word	0xf9f8	; ????
    707a:	fa fb       	.word	0xfbfa	; ????
    707c:	fc fd       	.word	0xfdfc	; ????
    707e:	fe ff       	.word	0xfffe	; ????
    7080:	00 01       	movw	r0, r0
    7082:	02 03       	mulsu	r16, r18
    7084:	04 05       	cpc	r16, r4
    7086:	06 07       	cpc	r16, r22
    7088:	08 09       	sbc	r16, r8
    708a:	0a 0b       	sbc	r16, r26
    708c:	0c 0d       	add	r16, r12
    708e:	0e 0f       	add	r16, r30
    7090:	10 11       	cpse	r17, r0
    7092:	12 13       	cpse	r17, r18
    7094:	14 15       	cp	r17, r4
    7096:	16 17       	cp	r17, r22
    7098:	18 19       	sub	r17, r8
    709a:	1a 1b       	sub	r17, r26
    709c:	1c 1d       	adc	r17, r12
    709e:	1e 1f       	adc	r17, r30
    70a0:	20 21       	and	r18, r0
    70a2:	22 23       	and	r18, r18
    70a4:	24 25       	eor	r18, r4
    70a6:	26 27       	eor	r18, r22
    70a8:	28 29       	or	r18, r8
    70aa:	2a 2b       	or	r18, r26
    70ac:	2c 2d       	mov	r18, r12
    70ae:	2e 2f       	mov	r18, r30
    70b0:	30 31       	cpi	r19, 0x10	; 16
    70b2:	32 33       	cpi	r19, 0x32	; 50
    70b4:	34 35       	cpi	r19, 0x54	; 84
    70b6:	36 37       	cpi	r19, 0x76	; 118
    70b8:	38 39       	cpi	r19, 0x98	; 152
    70ba:	3a 3b       	cpi	r19, 0xBA	; 186
    70bc:	3c 3d       	cpi	r19, 0xDC	; 220
    70be:	3e 3f       	cpi	r19, 0xFE	; 254
    70c0:	40 41       	sbci	r20, 0x10	; 16
    70c2:	42 43       	sbci	r20, 0x32	; 50
    70c4:	44 45       	sbci	r20, 0x54	; 84
    70c6:	46 47       	sbci	r20, 0x76	; 118
    70c8:	48 49       	sbci	r20, 0x98	; 152
    70ca:	4a 4b       	sbci	r20, 0xBA	; 186
    70cc:	4c 4d       	sbci	r20, 0xDC	; 220
    70ce:	4e 4f       	sbci	r20, 0xFE	; 254
    70d0:	50 51       	subi	r21, 0x10	; 16
    70d2:	52 53       	subi	r21, 0x32	; 50
    70d4:	54 55       	subi	r21, 0x54	; 84
    70d6:	56 57       	subi	r21, 0x76	; 118
    70d8:	58 59       	subi	r21, 0x98	; 152
    70da:	5a 5b       	subi	r21, 0xBA	; 186
    70dc:	5c 5d       	subi	r21, 0xDC	; 220
    70de:	5e 5f       	subi	r21, 0xFE	; 254
    70e0:	60 61       	ori	r22, 0x10	; 16
    70e2:	62 63       	ori	r22, 0x32	; 50
    70e4:	64 65       	ori	r22, 0x54	; 84
    70e6:	66 67       	ori	r22, 0x76	; 118
    70e8:	68 69       	ori	r22, 0x98	; 152
    70ea:	6a 6b       	ori	r22, 0xBA	; 186
    70ec:	6c 6d       	ori	r22, 0xDC	; 220
    70ee:	6e 6f       	ori	r22, 0xFE	; 254
    70f0:	70 71       	andi	r23, 0x10	; 16
    70f2:	72 73       	andi	r23, 0x32	; 50
    70f4:	74 75       	andi	r23, 0x54	; 84
    70f6:	76 77       	andi	r23, 0x76	; 118
    70f8:	78 79       	andi	r23, 0x98	; 152
    70fa:	7a 7b       	andi	r23, 0xBA	; 186
    70fc:	7c 7d       	andi	r23, 0xDC	; 220
    70fe:	7e 7f       	andi	r23, 0xFE	; 254
    7100:	00 02       	muls	r16, r16
    7102:	04 06       	cpc	r0, r20
    7104:	08 0a       	sbc	r0, r24
    7106:	0c 0e       	add	r0, r28
    7108:	10 12       	cpse	r1, r16
    710a:	14 16       	cp	r1, r20
    710c:	18 1a       	sub	r1, r24
    710e:	1c 1e       	adc	r1, r28
    7110:	20 22       	and	r2, r16
    7112:	24 26       	eor	r2, r20
    7114:	28 2a       	or	r2, r24
    7116:	2c 2e       	mov	r2, r28
    7118:	30 32       	cpi	r19, 0x20	; 32
    711a:	34 36       	cpi	r19, 0x64	; 100
    711c:	38 3a       	cpi	r19, 0xA8	; 168
    711e:	3c 3e       	cpi	r19, 0xEC	; 236
    7120:	40 42       	sbci	r20, 0x20	; 32
    7122:	44 46       	sbci	r20, 0x64	; 100
    7124:	48 4a       	sbci	r20, 0xA8	; 168
    7126:	4c 4e       	sbci	r20, 0xEC	; 236
    7128:	50 52       	subi	r21, 0x20	; 32
    712a:	54 56       	subi	r21, 0x64	; 100
    712c:	58 5a       	subi	r21, 0xA8	; 168
    712e:	5c 5e       	subi	r21, 0xEC	; 236
    7130:	60 62       	ori	r22, 0x20	; 32
    7132:	64 66       	ori	r22, 0x64	; 100
    7134:	68 6a       	ori	r22, 0xA8	; 168
    7136:	6c 6e       	ori	r22, 0xEC	; 236
    7138:	70 72       	andi	r23, 0x20	; 32
    713a:	74 76       	andi	r23, 0x64	; 100
    713c:	78 7a       	andi	r23, 0xA8	; 168
    713e:	7c 7e       	andi	r23, 0xEC	; 236
    7140:	7f 7d       	andi	r23, 0xDF	; 223
    7142:	7b 79       	andi	r23, 0x9B	; 155
    7144:	77 75       	andi	r23, 0x57	; 87
    7146:	73 71       	andi	r23, 0x13	; 19
    7148:	6f 6d       	ori	r22, 0xDF	; 223
    714a:	6b 69       	ori	r22, 0x9B	; 155
    714c:	67 65       	ori	r22, 0x57	; 87
    714e:	63 61       	ori	r22, 0x13	; 19
    7150:	5f 5d       	subi	r21, 0xDF	; 223
    7152:	5b 59       	subi	r21, 0x9B	; 155
    7154:	57 55       	subi	r21, 0x57	; 87
    7156:	53 51       	subi	r21, 0x13	; 19
    7158:	4f 4d       	sbci	r20, 0xDF	; 223
    715a:	4b 49       	sbci	r20, 0x9B	; 155
    715c:	47 45       	sbci	r20, 0x57	; 87
    715e:	43 41       	sbci	r20, 0x13	; 19
    7160:	3f 3d       	cpi	r19, 0xDF	; 223
    7162:	3b 39       	cpi	r19, 0x9B	; 155
    7164:	37 35       	cpi	r19, 0x57	; 87
    7166:	33 31       	cpi	r19, 0x13	; 19
    7168:	2f 2d       	mov	r18, r15
    716a:	2b 29       	or	r18, r11
    716c:	27 25       	eor	r18, r7
    716e:	23 21       	and	r18, r3
    7170:	1f 1d       	adc	r17, r15
    7172:	1b 19       	sub	r17, r11
    7174:	17 15       	cp	r17, r7
    7176:	13 11       	cpse	r17, r3
    7178:	0f 0d       	add	r16, r15
    717a:	0b 09       	sbc	r16, r11
    717c:	07 05       	cpc	r16, r7
    717e:	03 01       	movw	r0, r6
    7180:	ff fd       	.word	0xfdff	; ????
    7182:	fb f9       	.word	0xf9fb	; ????
    7184:	f7 f5       	brid	.+124    	; 0x7202 <waves+0x302>
    7186:	f3 f1       	brvs	.+124    	; 0x7204 <waves+0x304>
    7188:	ef ed       	ldi	r30, 0xDF	; 223
    718a:	eb e9       	ldi	r30, 0x9B	; 155
    718c:	e7 e5       	ldi	r30, 0x57	; 87
    718e:	e3 e1       	ldi	r30, 0x13	; 19
    7190:	df dd       	rcall	.-1090   	; 0x6d50 <steptable+0x48>
    7192:	db d9       	rcall	.-3146   	; 0x654a <PatchCommand11+0x54>
    7194:	d7 d5       	rcall	.+2990   	; 0x7d44 <DisplayLogo+0x8>
    7196:	d3 d1       	rcall	.+934    	; 0x753e <waves+0x63e>
    7198:	cf cd       	rjmp	.-1122   	; 0x6d38 <steptable+0x30>
    719a:	cb c9       	rjmp	.-3178   	; 0x6532 <PatchCommand11+0x3c>
    719c:	c7 c5       	rjmp	.+2958   	; 0x7d2c <WaitVsync+0x1e>
    719e:	c3 c1       	rjmp	.+902    	; 0x7526 <waves+0x626>
    71a0:	bf bd       	out	0x2f, r27	; 47
    71a2:	bb b9       	out	0x0b, r27	; 11
    71a4:	b7 b5       	in	r27, 0x27	; 39
    71a6:	b3 b1       	in	r27, 0x03	; 3
    71a8:	af ad       	ldd	r26, Y+63	; 0x3f
    71aa:	ab a9       	ldd	r26, Y+51	; 0x33
    71ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    71ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    71b0:	9f 9d       	mul	r25, r15
    71b2:	9b 99       	sbic	0x13, 3	; 19
    71b4:	97 95       	ror	r25
    71b6:	93 91       	.word	0x9193	; ????
    71b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    71ba:	8b 89       	ldd	r24, Y+19	; 0x13
    71bc:	87 85       	ldd	r24, Z+15	; 0x0f
    71be:	83 81       	ldd	r24, Z+3	; 0x03
    71c0:	80 82       	st	Z, r8
    71c2:	84 86       	std	Z+12, r8	; 0x0c
    71c4:	88 8a       	std	Y+16, r8	; 0x10
    71c6:	8c 8e       	std	Y+28, r8	; 0x1c
    71c8:	90 92 94 96 	sts	0x9694, r9
    71cc:	98 9a       	sbi	0x13, 0	; 19
    71ce:	9c 9e       	mul	r9, r28
    71d0:	a0 a2       	std	Z+32, r10	; 0x20
    71d2:	a4 a6       	std	Z+44, r10	; 0x2c
    71d4:	a8 aa       	std	Y+48, r10	; 0x30
    71d6:	ac ae       	std	Y+60, r10	; 0x3c
    71d8:	b0 b2       	in	r11, 0x10	; 16
    71da:	b4 b6       	in	r11, 0x34	; 52
    71dc:	b8 ba       	out	0x18, r11	; 24
    71de:	bc be       	out	0x3c, r11	; 60
    71e0:	c0 c2       	rjmp	.+1408   	; 0x7762 <waves+0x862>
    71e2:	c4 c6       	rjmp	.+3464   	; 0x7f6c <LBPrintStr+0x42>
    71e4:	c8 ca       	rjmp	.-2672   	; 0x6776 <TriggerFx+0x1e>
    71e6:	cc ce       	rjmp	.-616    	; 0x6f80 <waves+0x80>
    71e8:	d0 d2       	rcall	.+1440   	; 0x778a <waves+0x88a>
    71ea:	d4 d6       	rcall	.+3496   	; 0x7f94 <LBCollides+0x8>
    71ec:	d8 da       	rcall	.-2640   	; 0x679e <TriggerFx+0x46>
    71ee:	dc de       	rcall	.-584    	; 0x6fa8 <waves+0xa8>
    71f0:	e0 e2       	ldi	r30, 0x20	; 32
    71f2:	e4 e6       	ldi	r30, 0x64	; 100
    71f4:	e8 ea       	ldi	r30, 0xA8	; 168
    71f6:	ec ee       	ldi	r30, 0xEC	; 236
    71f8:	f0 f2       	brcs	.-68     	; 0x71b6 <waves+0x2b6>
    71fa:	f4 f6       	brge	.-68     	; 0x71b8 <waves+0x2b8>
    71fc:	f8 fa       	.word	0xfaf8	; ????
    71fe:	fc fe       	.word	0xfefc	; ????
    7200:	7f 7f       	andi	r23, 0xFF	; 255
    7202:	7f 7f       	andi	r23, 0xFF	; 255
    7204:	7f 7f       	andi	r23, 0xFF	; 255
    7206:	7f 7f       	andi	r23, 0xFF	; 255
    7208:	7f 7f       	andi	r23, 0xFF	; 255
    720a:	7f 7f       	andi	r23, 0xFF	; 255
    720c:	7f 7f       	andi	r23, 0xFF	; 255
    720e:	7f 7f       	andi	r23, 0xFF	; 255
    7210:	7f 7f       	andi	r23, 0xFF	; 255
    7212:	7f 7f       	andi	r23, 0xFF	; 255
    7214:	7f 7f       	andi	r23, 0xFF	; 255
    7216:	7f 7f       	andi	r23, 0xFF	; 255
    7218:	7f 7f       	andi	r23, 0xFF	; 255
    721a:	7f 7f       	andi	r23, 0xFF	; 255
    721c:	7f 7f       	andi	r23, 0xFF	; 255
    721e:	7f 7f       	andi	r23, 0xFF	; 255
    7220:	7f 7f       	andi	r23, 0xFF	; 255
    7222:	7f 7f       	andi	r23, 0xFF	; 255
    7224:	7f 7f       	andi	r23, 0xFF	; 255
    7226:	7f 7f       	andi	r23, 0xFF	; 255
    7228:	7f 7f       	andi	r23, 0xFF	; 255
    722a:	7f 7f       	andi	r23, 0xFF	; 255
    722c:	7f 7f       	andi	r23, 0xFF	; 255
    722e:	7f 7f       	andi	r23, 0xFF	; 255
    7230:	7f 7f       	andi	r23, 0xFF	; 255
    7232:	7f 7f       	andi	r23, 0xFF	; 255
    7234:	7f 7f       	andi	r23, 0xFF	; 255
    7236:	7f 7f       	andi	r23, 0xFF	; 255
    7238:	7f 7f       	andi	r23, 0xFF	; 255
    723a:	7f 7f       	andi	r23, 0xFF	; 255
    723c:	7f 7f       	andi	r23, 0xFF	; 255
    723e:	7f 7f       	andi	r23, 0xFF	; 255
    7240:	80 80       	ld	r8, Z
    7242:	80 80       	ld	r8, Z
    7244:	80 80       	ld	r8, Z
    7246:	80 80       	ld	r8, Z
    7248:	80 80       	ld	r8, Z
    724a:	80 80       	ld	r8, Z
    724c:	80 80       	ld	r8, Z
    724e:	80 80       	ld	r8, Z
    7250:	80 80       	ld	r8, Z
    7252:	80 80       	ld	r8, Z
    7254:	80 80       	ld	r8, Z
    7256:	80 80       	ld	r8, Z
    7258:	80 80       	ld	r8, Z
    725a:	80 80       	ld	r8, Z
    725c:	80 80       	ld	r8, Z
    725e:	80 80       	ld	r8, Z
    7260:	80 80       	ld	r8, Z
    7262:	80 80       	ld	r8, Z
    7264:	80 80       	ld	r8, Z
    7266:	80 80       	ld	r8, Z
    7268:	80 80       	ld	r8, Z
    726a:	80 80       	ld	r8, Z
    726c:	80 80       	ld	r8, Z
    726e:	80 80       	ld	r8, Z
    7270:	80 80       	ld	r8, Z
    7272:	80 80       	ld	r8, Z
    7274:	80 80       	ld	r8, Z
    7276:	80 80       	ld	r8, Z
    7278:	80 80       	ld	r8, Z
    727a:	80 80       	ld	r8, Z
    727c:	80 80       	ld	r8, Z
    727e:	80 80       	ld	r8, Z
    7280:	80 80       	ld	r8, Z
    7282:	80 80       	ld	r8, Z
    7284:	80 80       	ld	r8, Z
    7286:	80 80       	ld	r8, Z
    7288:	80 80       	ld	r8, Z
    728a:	80 80       	ld	r8, Z
    728c:	80 80       	ld	r8, Z
    728e:	80 80       	ld	r8, Z
    7290:	80 80       	ld	r8, Z
    7292:	80 80       	ld	r8, Z
    7294:	80 80       	ld	r8, Z
    7296:	80 80       	ld	r8, Z
    7298:	80 80       	ld	r8, Z
    729a:	80 80       	ld	r8, Z
    729c:	80 80       	ld	r8, Z
    729e:	80 80       	ld	r8, Z
    72a0:	80 80       	ld	r8, Z
    72a2:	80 80       	ld	r8, Z
    72a4:	80 80       	ld	r8, Z
    72a6:	80 80       	ld	r8, Z
    72a8:	80 80       	ld	r8, Z
    72aa:	80 80       	ld	r8, Z
    72ac:	80 80       	ld	r8, Z
    72ae:	80 80       	ld	r8, Z
    72b0:	80 80       	ld	r8, Z
    72b2:	80 80       	ld	r8, Z
    72b4:	80 80       	ld	r8, Z
    72b6:	80 80       	ld	r8, Z
    72b8:	80 80       	ld	r8, Z
    72ba:	80 80       	ld	r8, Z
    72bc:	80 80       	ld	r8, Z
    72be:	80 80       	ld	r8, Z
    72c0:	80 80       	ld	r8, Z
    72c2:	80 80       	ld	r8, Z
    72c4:	80 80       	ld	r8, Z
    72c6:	80 80       	ld	r8, Z
    72c8:	80 80       	ld	r8, Z
    72ca:	80 80       	ld	r8, Z
    72cc:	80 80       	ld	r8, Z
    72ce:	80 80       	ld	r8, Z
    72d0:	80 80       	ld	r8, Z
    72d2:	80 80       	ld	r8, Z
    72d4:	80 80       	ld	r8, Z
    72d6:	80 80       	ld	r8, Z
    72d8:	80 80       	ld	r8, Z
    72da:	80 80       	ld	r8, Z
    72dc:	80 80       	ld	r8, Z
    72de:	80 80       	ld	r8, Z
    72e0:	80 80       	ld	r8, Z
    72e2:	80 80       	ld	r8, Z
    72e4:	80 80       	ld	r8, Z
    72e6:	80 80       	ld	r8, Z
    72e8:	80 80       	ld	r8, Z
    72ea:	80 80       	ld	r8, Z
    72ec:	80 80       	ld	r8, Z
    72ee:	80 80       	ld	r8, Z
    72f0:	80 80       	ld	r8, Z
    72f2:	80 80       	ld	r8, Z
    72f4:	80 80       	ld	r8, Z
    72f6:	80 80       	ld	r8, Z
    72f8:	80 80       	ld	r8, Z
    72fa:	80 80       	ld	r8, Z
    72fc:	80 80       	ld	r8, Z
    72fe:	80 80       	ld	r8, Z
    7300:	7f 7f       	andi	r23, 0xFF	; 255
    7302:	7f 7f       	andi	r23, 0xFF	; 255
    7304:	7f 7f       	andi	r23, 0xFF	; 255
    7306:	7f 7f       	andi	r23, 0xFF	; 255
    7308:	7f 7f       	andi	r23, 0xFF	; 255
    730a:	7f 7f       	andi	r23, 0xFF	; 255
    730c:	7f 7f       	andi	r23, 0xFF	; 255
    730e:	7f 7f       	andi	r23, 0xFF	; 255
    7310:	7f 7f       	andi	r23, 0xFF	; 255
    7312:	7f 7f       	andi	r23, 0xFF	; 255
    7314:	7f 7f       	andi	r23, 0xFF	; 255
    7316:	7f 7f       	andi	r23, 0xFF	; 255
    7318:	7f 7f       	andi	r23, 0xFF	; 255
    731a:	7f 7f       	andi	r23, 0xFF	; 255
    731c:	7f 7f       	andi	r23, 0xFF	; 255
    731e:	7f 7f       	andi	r23, 0xFF	; 255
    7320:	7f 7f       	andi	r23, 0xFF	; 255
    7322:	7f 7f       	andi	r23, 0xFF	; 255
    7324:	7f 7f       	andi	r23, 0xFF	; 255
    7326:	7f 7f       	andi	r23, 0xFF	; 255
    7328:	7f 7f       	andi	r23, 0xFF	; 255
    732a:	7f 7f       	andi	r23, 0xFF	; 255
    732c:	7f 7f       	andi	r23, 0xFF	; 255
    732e:	7f 7f       	andi	r23, 0xFF	; 255
    7330:	7f 7f       	andi	r23, 0xFF	; 255
    7332:	7f 7f       	andi	r23, 0xFF	; 255
    7334:	7f 7f       	andi	r23, 0xFF	; 255
    7336:	7f 7f       	andi	r23, 0xFF	; 255
    7338:	7f 7f       	andi	r23, 0xFF	; 255
    733a:	7f 7f       	andi	r23, 0xFF	; 255
    733c:	7f 7f       	andi	r23, 0xFF	; 255
    733e:	7f 7f       	andi	r23, 0xFF	; 255
    7340:	7f 7f       	andi	r23, 0xFF	; 255
    7342:	7f 7f       	andi	r23, 0xFF	; 255
    7344:	7f 7f       	andi	r23, 0xFF	; 255
    7346:	7f 7f       	andi	r23, 0xFF	; 255
    7348:	7f 7f       	andi	r23, 0xFF	; 255
    734a:	7f 7f       	andi	r23, 0xFF	; 255
    734c:	7f 7f       	andi	r23, 0xFF	; 255
    734e:	7f 7f       	andi	r23, 0xFF	; 255
    7350:	7f 7f       	andi	r23, 0xFF	; 255
    7352:	7f 7f       	andi	r23, 0xFF	; 255
    7354:	7f 7f       	andi	r23, 0xFF	; 255
    7356:	7f 7f       	andi	r23, 0xFF	; 255
    7358:	7f 7f       	andi	r23, 0xFF	; 255
    735a:	7f 7f       	andi	r23, 0xFF	; 255
    735c:	7f 7f       	andi	r23, 0xFF	; 255
    735e:	7f 7f       	andi	r23, 0xFF	; 255
    7360:	7f 7f       	andi	r23, 0xFF	; 255
    7362:	7f 7f       	andi	r23, 0xFF	; 255
    7364:	7f 7f       	andi	r23, 0xFF	; 255
    7366:	7f 7f       	andi	r23, 0xFF	; 255
    7368:	7f 7f       	andi	r23, 0xFF	; 255
    736a:	7f 7f       	andi	r23, 0xFF	; 255
    736c:	7f 7f       	andi	r23, 0xFF	; 255
    736e:	7f 7f       	andi	r23, 0xFF	; 255
    7370:	7f 7f       	andi	r23, 0xFF	; 255
    7372:	7f 7f       	andi	r23, 0xFF	; 255
    7374:	7f 7f       	andi	r23, 0xFF	; 255
    7376:	7f 7f       	andi	r23, 0xFF	; 255
    7378:	7f 7f       	andi	r23, 0xFF	; 255
    737a:	7f 7f       	andi	r23, 0xFF	; 255
    737c:	7f 7f       	andi	r23, 0xFF	; 255
    737e:	7f 7f       	andi	r23, 0xFF	; 255
    7380:	80 80       	ld	r8, Z
    7382:	80 80       	ld	r8, Z
    7384:	80 80       	ld	r8, Z
    7386:	80 80       	ld	r8, Z
    7388:	80 80       	ld	r8, Z
    738a:	80 80       	ld	r8, Z
    738c:	80 80       	ld	r8, Z
    738e:	80 80       	ld	r8, Z
    7390:	80 80       	ld	r8, Z
    7392:	80 80       	ld	r8, Z
    7394:	80 80       	ld	r8, Z
    7396:	80 80       	ld	r8, Z
    7398:	80 80       	ld	r8, Z
    739a:	80 80       	ld	r8, Z
    739c:	80 80       	ld	r8, Z
    739e:	80 80       	ld	r8, Z
    73a0:	80 80       	ld	r8, Z
    73a2:	80 80       	ld	r8, Z
    73a4:	80 80       	ld	r8, Z
    73a6:	80 80       	ld	r8, Z
    73a8:	80 80       	ld	r8, Z
    73aa:	80 80       	ld	r8, Z
    73ac:	80 80       	ld	r8, Z
    73ae:	80 80       	ld	r8, Z
    73b0:	80 80       	ld	r8, Z
    73b2:	80 80       	ld	r8, Z
    73b4:	80 80       	ld	r8, Z
    73b6:	80 80       	ld	r8, Z
    73b8:	80 80       	ld	r8, Z
    73ba:	80 80       	ld	r8, Z
    73bc:	80 80       	ld	r8, Z
    73be:	80 80       	ld	r8, Z
    73c0:	80 80       	ld	r8, Z
    73c2:	80 80       	ld	r8, Z
    73c4:	80 80       	ld	r8, Z
    73c6:	80 80       	ld	r8, Z
    73c8:	80 80       	ld	r8, Z
    73ca:	80 80       	ld	r8, Z
    73cc:	80 80       	ld	r8, Z
    73ce:	80 80       	ld	r8, Z
    73d0:	80 80       	ld	r8, Z
    73d2:	80 80       	ld	r8, Z
    73d4:	80 80       	ld	r8, Z
    73d6:	80 80       	ld	r8, Z
    73d8:	80 80       	ld	r8, Z
    73da:	80 80       	ld	r8, Z
    73dc:	80 80       	ld	r8, Z
    73de:	80 80       	ld	r8, Z
    73e0:	80 80       	ld	r8, Z
    73e2:	80 80       	ld	r8, Z
    73e4:	80 80       	ld	r8, Z
    73e6:	80 80       	ld	r8, Z
    73e8:	80 80       	ld	r8, Z
    73ea:	80 80       	ld	r8, Z
    73ec:	80 80       	ld	r8, Z
    73ee:	80 80       	ld	r8, Z
    73f0:	80 80       	ld	r8, Z
    73f2:	80 80       	ld	r8, Z
    73f4:	80 80       	ld	r8, Z
    73f6:	80 80       	ld	r8, Z
    73f8:	80 80       	ld	r8, Z
    73fa:	80 80       	ld	r8, Z
    73fc:	80 80       	ld	r8, Z
    73fe:	80 80       	ld	r8, Z
    7400:	7f 7f       	andi	r23, 0xFF	; 255
    7402:	7f 7f       	andi	r23, 0xFF	; 255
    7404:	7f 7f       	andi	r23, 0xFF	; 255
    7406:	7f 7f       	andi	r23, 0xFF	; 255
    7408:	7f 7f       	andi	r23, 0xFF	; 255
    740a:	7f 7f       	andi	r23, 0xFF	; 255
    740c:	7f 7f       	andi	r23, 0xFF	; 255
    740e:	7f 7f       	andi	r23, 0xFF	; 255
    7410:	7f 7f       	andi	r23, 0xFF	; 255
    7412:	7f 7f       	andi	r23, 0xFF	; 255
    7414:	7f 7f       	andi	r23, 0xFF	; 255
    7416:	7f 7f       	andi	r23, 0xFF	; 255
    7418:	7f 7f       	andi	r23, 0xFF	; 255
    741a:	7f 7f       	andi	r23, 0xFF	; 255
    741c:	7f 7f       	andi	r23, 0xFF	; 255
    741e:	7f 7f       	andi	r23, 0xFF	; 255
    7420:	7f 7f       	andi	r23, 0xFF	; 255
    7422:	7f 7f       	andi	r23, 0xFF	; 255
    7424:	7f 7f       	andi	r23, 0xFF	; 255
    7426:	7f 7f       	andi	r23, 0xFF	; 255
    7428:	7f 7f       	andi	r23, 0xFF	; 255
    742a:	7f 7f       	andi	r23, 0xFF	; 255
    742c:	7f 7f       	andi	r23, 0xFF	; 255
    742e:	7f 7f       	andi	r23, 0xFF	; 255
    7430:	7f 7f       	andi	r23, 0xFF	; 255
    7432:	7f 7f       	andi	r23, 0xFF	; 255
    7434:	7f 7f       	andi	r23, 0xFF	; 255
    7436:	7f 7f       	andi	r23, 0xFF	; 255
    7438:	7f 7f       	andi	r23, 0xFF	; 255
    743a:	7f 7f       	andi	r23, 0xFF	; 255
    743c:	7f 7f       	andi	r23, 0xFF	; 255
    743e:	7f 7f       	andi	r23, 0xFF	; 255
    7440:	7f 7f       	andi	r23, 0xFF	; 255
    7442:	7f 7f       	andi	r23, 0xFF	; 255
    7444:	7f 7f       	andi	r23, 0xFF	; 255
    7446:	7f 7f       	andi	r23, 0xFF	; 255
    7448:	7f 7f       	andi	r23, 0xFF	; 255
    744a:	7f 7f       	andi	r23, 0xFF	; 255
    744c:	7f 7f       	andi	r23, 0xFF	; 255
    744e:	7f 7f       	andi	r23, 0xFF	; 255
    7450:	7f 7f       	andi	r23, 0xFF	; 255
    7452:	7f 7f       	andi	r23, 0xFF	; 255
    7454:	7f 7f       	andi	r23, 0xFF	; 255
    7456:	7f 7f       	andi	r23, 0xFF	; 255
    7458:	7f 7f       	andi	r23, 0xFF	; 255
    745a:	7f 7f       	andi	r23, 0xFF	; 255
    745c:	7f 7f       	andi	r23, 0xFF	; 255
    745e:	7f 7f       	andi	r23, 0xFF	; 255
    7460:	7f 7f       	andi	r23, 0xFF	; 255
    7462:	7f 7f       	andi	r23, 0xFF	; 255
    7464:	7f 7f       	andi	r23, 0xFF	; 255
    7466:	7f 7f       	andi	r23, 0xFF	; 255
    7468:	7f 7f       	andi	r23, 0xFF	; 255
    746a:	7f 7f       	andi	r23, 0xFF	; 255
    746c:	7f 7f       	andi	r23, 0xFF	; 255
    746e:	7f 7f       	andi	r23, 0xFF	; 255
    7470:	7f 7f       	andi	r23, 0xFF	; 255
    7472:	7f 7f       	andi	r23, 0xFF	; 255
    7474:	7f 7f       	andi	r23, 0xFF	; 255
    7476:	7f 7f       	andi	r23, 0xFF	; 255
    7478:	7f 7f       	andi	r23, 0xFF	; 255
    747a:	7f 7f       	andi	r23, 0xFF	; 255
    747c:	7f 7f       	andi	r23, 0xFF	; 255
    747e:	7f 7f       	andi	r23, 0xFF	; 255
    7480:	7f 7f       	andi	r23, 0xFF	; 255
    7482:	7f 7f       	andi	r23, 0xFF	; 255
    7484:	7f 7f       	andi	r23, 0xFF	; 255
    7486:	7f 7f       	andi	r23, 0xFF	; 255
    7488:	7f 7f       	andi	r23, 0xFF	; 255
    748a:	7f 7f       	andi	r23, 0xFF	; 255
    748c:	7f 7f       	andi	r23, 0xFF	; 255
    748e:	7f 7f       	andi	r23, 0xFF	; 255
    7490:	7f 7f       	andi	r23, 0xFF	; 255
    7492:	7f 7f       	andi	r23, 0xFF	; 255
    7494:	7f 7f       	andi	r23, 0xFF	; 255
    7496:	7f 7f       	andi	r23, 0xFF	; 255
    7498:	7f 7f       	andi	r23, 0xFF	; 255
    749a:	7f 7f       	andi	r23, 0xFF	; 255
    749c:	7f 7f       	andi	r23, 0xFF	; 255
    749e:	7f 7f       	andi	r23, 0xFF	; 255
    74a0:	7f 7f       	andi	r23, 0xFF	; 255
    74a2:	7f 7f       	andi	r23, 0xFF	; 255
    74a4:	7f 7f       	andi	r23, 0xFF	; 255
    74a6:	7f 7f       	andi	r23, 0xFF	; 255
    74a8:	7f 7f       	andi	r23, 0xFF	; 255
    74aa:	7f 7f       	andi	r23, 0xFF	; 255
    74ac:	7f 7f       	andi	r23, 0xFF	; 255
    74ae:	7f 7f       	andi	r23, 0xFF	; 255
    74b0:	7f 7f       	andi	r23, 0xFF	; 255
    74b2:	7f 7f       	andi	r23, 0xFF	; 255
    74b4:	7f 7f       	andi	r23, 0xFF	; 255
    74b6:	7f 7f       	andi	r23, 0xFF	; 255
    74b8:	7f 7f       	andi	r23, 0xFF	; 255
    74ba:	7f 7f       	andi	r23, 0xFF	; 255
    74bc:	7f 7f       	andi	r23, 0xFF	; 255
    74be:	7f 7f       	andi	r23, 0xFF	; 255
    74c0:	80 80       	ld	r8, Z
    74c2:	80 80       	ld	r8, Z
    74c4:	80 80       	ld	r8, Z
    74c6:	80 80       	ld	r8, Z
    74c8:	80 80       	ld	r8, Z
    74ca:	80 80       	ld	r8, Z
    74cc:	80 80       	ld	r8, Z
    74ce:	80 80       	ld	r8, Z
    74d0:	80 80       	ld	r8, Z
    74d2:	80 80       	ld	r8, Z
    74d4:	80 80       	ld	r8, Z
    74d6:	80 80       	ld	r8, Z
    74d8:	80 80       	ld	r8, Z
    74da:	80 80       	ld	r8, Z
    74dc:	80 80       	ld	r8, Z
    74de:	80 80       	ld	r8, Z
    74e0:	80 80       	ld	r8, Z
    74e2:	80 80       	ld	r8, Z
    74e4:	80 80       	ld	r8, Z
    74e6:	80 80       	ld	r8, Z
    74e8:	80 80       	ld	r8, Z
    74ea:	80 80       	ld	r8, Z
    74ec:	80 80       	ld	r8, Z
    74ee:	80 80       	ld	r8, Z
    74f0:	80 80       	ld	r8, Z
    74f2:	80 80       	ld	r8, Z
    74f4:	80 80       	ld	r8, Z
    74f6:	80 80       	ld	r8, Z
    74f8:	80 80       	ld	r8, Z
    74fa:	80 80       	ld	r8, Z
    74fc:	80 80       	ld	r8, Z
    74fe:	80 80       	ld	r8, Z
    7500:	03 09       	sbc	r16, r3
    7502:	13 1e       	adc	r1, r19
    7504:	28 31       	cpi	r18, 0x18	; 24
    7506:	3a 40       	sbci	r19, 0x0A	; 10
    7508:	46 4c       	sbci	r20, 0xC6	; 198
    750a:	50 54       	subi	r21, 0x40	; 64
    750c:	58 5b       	subi	r21, 0xB8	; 184
    750e:	5e 61       	ori	r21, 0x1E	; 30
    7510:	63 65       	ori	r22, 0x53	; 83
    7512:	67 69       	ori	r22, 0x97	; 151
    7514:	6b 6c       	ori	r22, 0xCB	; 203
    7516:	6e 6f       	ori	r22, 0xFE	; 254
    7518:	70 71       	andi	r23, 0x10	; 16
    751a:	72 73       	andi	r23, 0x32	; 50
    751c:	74 75       	andi	r23, 0x54	; 84
    751e:	76 77       	andi	r23, 0x76	; 118
    7520:	77 78       	andi	r23, 0x87	; 135
    7522:	79 79       	andi	r23, 0x99	; 153
    7524:	7a 7a       	andi	r23, 0xAA	; 170
    7526:	7b 7b       	andi	r23, 0xBB	; 187
    7528:	7c 7c       	andi	r23, 0xCC	; 204
    752a:	7c 7d       	andi	r23, 0xDC	; 220
    752c:	7d 7d       	andi	r23, 0xDD	; 221
    752e:	7e 7e       	andi	r23, 0xEE	; 238
    7530:	7e 7e       	andi	r23, 0xEE	; 238
    7532:	7f 7f       	andi	r23, 0xFF	; 255
    7534:	7f 7f       	andi	r23, 0xFF	; 255
    7536:	7f 7f       	andi	r23, 0xFF	; 255
    7538:	7f 7f       	andi	r23, 0xFF	; 255
    753a:	7f 7f       	andi	r23, 0xFF	; 255
    753c:	7f 7f       	andi	r23, 0xFF	; 255
    753e:	7f 7f       	andi	r23, 0xFF	; 255
    7540:	7f 7f       	andi	r23, 0xFF	; 255
    7542:	7f 7f       	andi	r23, 0xFF	; 255
    7544:	7f 7f       	andi	r23, 0xFF	; 255
    7546:	7f 7f       	andi	r23, 0xFF	; 255
    7548:	7f 7f       	andi	r23, 0xFF	; 255
    754a:	7f 7f       	andi	r23, 0xFF	; 255
    754c:	7f 7e       	andi	r23, 0xEF	; 239
    754e:	7e 7e       	andi	r23, 0xEE	; 238
    7550:	7e 7d       	andi	r23, 0xDE	; 222
    7552:	7d 7d       	andi	r23, 0xDD	; 221
    7554:	7c 7c       	andi	r23, 0xCC	; 204
    7556:	7c 7b       	andi	r23, 0xBC	; 188
    7558:	7b 7a       	andi	r23, 0xAB	; 171
    755a:	7a 79       	andi	r23, 0x9A	; 154
    755c:	79 78       	andi	r23, 0x89	; 137
    755e:	77 77       	andi	r23, 0x77	; 119
    7560:	76 75       	andi	r23, 0x56	; 86
    7562:	74 73       	andi	r23, 0x34	; 52
    7564:	72 71       	andi	r23, 0x12	; 18
    7566:	70 6f       	ori	r23, 0xF0	; 240
    7568:	6e 6c       	ori	r22, 0xCE	; 206
    756a:	6b 69       	ori	r22, 0x9B	; 155
    756c:	67 65       	ori	r22, 0x57	; 87
    756e:	63 61       	ori	r22, 0x13	; 19
    7570:	5e 5b       	subi	r21, 0xBE	; 190
    7572:	58 54       	subi	r21, 0x48	; 72
    7574:	50 4c       	sbci	r21, 0xC0	; 192
    7576:	46 40       	sbci	r20, 0x06	; 6
    7578:	3a 31       	cpi	r19, 0x1A	; 26
    757a:	28 1e       	adc	r2, r24
    757c:	13 09       	sbc	r17, r3
    757e:	03 00       	.word	0x0003	; ????
    7580:	c6 cc       	rjmp	.-1652   	; 0x6f0e <waves+0xe>
    7582:	d5 db       	rcall	.-2134   	; 0x6d2e <steptable+0x26>
    7584:	df e3       	ldi	r29, 0x3F	; 63
    7586:	e5 e7       	ldi	r30, 0x75	; 117
    7588:	e9 ea       	ldi	r30, 0xA9	; 169
    758a:	eb ec       	ldi	r30, 0xCB	; 203
    758c:	ed ee       	ldi	r30, 0xED	; 237
    758e:	ef ef       	ldi	r30, 0xFF	; 255
    7590:	f0 f0       	brcs	.+60     	; 0x75ce <waves+0x6ce>
    7592:	f0 f1       	brcs	.+124    	; 0x7610 <waves+0x710>
    7594:	f1 f1       	breq	.+124    	; 0x7612 <waves+0x712>
    7596:	f1 f2       	breq	.-68     	; 0x7554 <waves+0x654>
    7598:	f2 f2       	brmi	.-68     	; 0x7556 <waves+0x656>
    759a:	f2 f2       	brmi	.-68     	; 0x7558 <waves+0x658>
    759c:	f2 f2       	brmi	.-68     	; 0x755a <waves+0x65a>
    759e:	f2 f3       	brmi	.-4      	; 0x759c <waves+0x69c>
    75a0:	f3 f3       	brvs	.-4      	; 0x759e <waves+0x69e>
    75a2:	f3 f3       	brvs	.-4      	; 0x75a0 <waves+0x6a0>
    75a4:	f3 f3       	brvs	.-4      	; 0x75a2 <waves+0x6a2>
    75a6:	f3 f3       	brvs	.-4      	; 0x75a4 <waves+0x6a4>
    75a8:	f3 f3       	brvs	.-4      	; 0x75a6 <waves+0x6a6>
    75aa:	f3 f3       	brvs	.-4      	; 0x75a8 <waves+0x6a8>
    75ac:	f3 f3       	brvs	.-4      	; 0x75aa <waves+0x6aa>
    75ae:	f3 f3       	brvs	.-4      	; 0x75ac <waves+0x6ac>
    75b0:	f3 f3       	brvs	.-4      	; 0x75ae <waves+0x6ae>
    75b2:	f3 f3       	brvs	.-4      	; 0x75b0 <waves+0x6b0>
    75b4:	f3 f3       	brvs	.-4      	; 0x75b2 <waves+0x6b2>
    75b6:	f3 f3       	brvs	.-4      	; 0x75b4 <waves+0x6b4>
    75b8:	f3 f3       	brvs	.-4      	; 0x75b6 <waves+0x6b6>
    75ba:	f3 f3       	brvs	.-4      	; 0x75b8 <waves+0x6b8>
    75bc:	f3 f3       	brvs	.-4      	; 0x75ba <waves+0x6ba>
    75be:	f3 f3       	brvs	.-4      	; 0x75bc <waves+0x6bc>
    75c0:	f3 f3       	brvs	.-4      	; 0x75be <waves+0x6be>
    75c2:	f3 f3       	brvs	.-4      	; 0x75c0 <waves+0x6c0>
    75c4:	f3 f3       	brvs	.-4      	; 0x75c2 <waves+0x6c2>
    75c6:	f3 f3       	brvs	.-4      	; 0x75c4 <waves+0x6c4>
    75c8:	f3 f3       	brvs	.-4      	; 0x75c6 <waves+0x6c6>
    75ca:	f3 f3       	brvs	.-4      	; 0x75c8 <waves+0x6c8>
    75cc:	f3 f3       	brvs	.-4      	; 0x75ca <waves+0x6ca>
    75ce:	f3 f3       	brvs	.-4      	; 0x75cc <waves+0x6cc>
    75d0:	f3 f3       	brvs	.-4      	; 0x75ce <waves+0x6ce>
    75d2:	f3 f3       	brvs	.-4      	; 0x75d0 <waves+0x6d0>
    75d4:	f3 f3       	brvs	.-4      	; 0x75d2 <waves+0x6d2>
    75d6:	f3 f3       	brvs	.-4      	; 0x75d4 <waves+0x6d4>
    75d8:	f3 f3       	brvs	.-4      	; 0x75d6 <waves+0x6d6>
    75da:	f3 f3       	brvs	.-4      	; 0x75d8 <waves+0x6d8>
    75dc:	f3 f3       	brvs	.-4      	; 0x75da <waves+0x6da>
    75de:	f3 f3       	brvs	.-4      	; 0x75dc <waves+0x6dc>
    75e0:	f2 f2       	brmi	.-68     	; 0x759e <waves+0x69e>
    75e2:	f2 f2       	brmi	.-68     	; 0x75a0 <waves+0x6a0>
    75e4:	f2 f2       	brmi	.-68     	; 0x75a2 <waves+0x6a2>
    75e6:	f2 f2       	brmi	.-68     	; 0x75a4 <waves+0x6a4>
    75e8:	f1 f1       	breq	.+124    	; 0x7666 <waves+0x766>
    75ea:	f1 f1       	breq	.+124    	; 0x7668 <waves+0x768>
    75ec:	f0 f0       	brcs	.+60     	; 0x762a <waves+0x72a>
    75ee:	f0 ef       	ldi	r31, 0xF0	; 240
    75f0:	ef ee       	ldi	r30, 0xEF	; 239
    75f2:	ed ec       	ldi	r30, 0xCD	; 205
    75f4:	eb ea       	ldi	r30, 0xAB	; 171
    75f6:	e9 e7       	ldi	r30, 0x79	; 121
    75f8:	e5 e3       	ldi	r30, 0x35	; 53
    75fa:	df db       	rcall	.-2114   	; 0x6dba <steptable+0xb2>
    75fc:	d5 cc       	rjmp	.-1622   	; 0x6fa8 <waves+0xa8>
    75fe:	c6 00       	.word	0x00c6	; ????
    7600:	00 28       	or	r0, r0
    7602:	3d 42       	sbci	r19, 0x2D	; 45
    7604:	30 2d       	mov	r19, r0
    7606:	2c 2b       	or	r18, r28
    7608:	2c 2d       	mov	r18, r12
    760a:	2e 2f       	mov	r18, r30
    760c:	30 32       	cpi	r19, 0x20	; 32
    760e:	33 35       	cpi	r19, 0x53	; 83
    7610:	37 39       	cpi	r19, 0x97	; 151
    7612:	3b 3d       	cpi	r19, 0xDB	; 219
    7614:	3f 41       	sbci	r19, 0x1F	; 31
    7616:	43 45       	sbci	r20, 0x53	; 83
    7618:	48 4a       	sbci	r20, 0xA8	; 168
    761a:	4c 4e       	sbci	r20, 0xEC	; 236
    761c:	50 53       	subi	r21, 0x30	; 48
    761e:	55 57       	subi	r21, 0x75	; 117
    7620:	59 5b       	subi	r21, 0xB9	; 185
    7622:	5d 5f       	subi	r21, 0xFD	; 253
    7624:	61 63       	ori	r22, 0x31	; 49
    7626:	65 67       	ori	r22, 0x75	; 117
    7628:	69 6b       	ori	r22, 0xB9	; 185
    762a:	6c 6e       	ori	r22, 0xEC	; 236
    762c:	70 71       	andi	r23, 0x10	; 16
    762e:	73 74       	andi	r23, 0x43	; 67
    7630:	75 77       	andi	r23, 0x75	; 117
    7632:	78 79       	andi	r23, 0x98	; 152
    7634:	7a 7b       	andi	r23, 0xBA	; 186
    7636:	7c 7d       	andi	r23, 0xDC	; 220
    7638:	7d 7e       	andi	r23, 0xED	; 237
    763a:	7e 7f       	andi	r23, 0xFE	; 254
    763c:	7f 7f       	andi	r23, 0xFF	; 255
    763e:	7f 7f       	andi	r23, 0xFF	; 255
    7640:	7f 7f       	andi	r23, 0xFF	; 255
    7642:	7f 7f       	andi	r23, 0xFF	; 255
    7644:	7f 7f       	andi	r23, 0xFF	; 255
    7646:	7e 7e       	andi	r23, 0xEE	; 238
    7648:	7d 7d       	andi	r23, 0xDD	; 221
    764a:	7c 7b       	andi	r23, 0xBC	; 188
    764c:	7a 79       	andi	r23, 0x9A	; 154
    764e:	78 77       	andi	r23, 0x78	; 120
    7650:	75 74       	andi	r23, 0x45	; 69
    7652:	73 71       	andi	r23, 0x13	; 19
    7654:	70 6e       	ori	r23, 0xE0	; 224
    7656:	6c 6b       	ori	r22, 0xBC	; 188
    7658:	69 67       	ori	r22, 0x79	; 121
    765a:	65 63       	ori	r22, 0x35	; 53
    765c:	61 5f       	subi	r22, 0xF1	; 241
    765e:	5d 5b       	subi	r21, 0xBD	; 189
    7660:	59 57       	subi	r21, 0x79	; 121
    7662:	55 53       	subi	r21, 0x35	; 53
    7664:	50 4e       	sbci	r21, 0xE0	; 224
    7666:	4c 4a       	sbci	r20, 0xAC	; 172
    7668:	48 45       	sbci	r20, 0x58	; 88
    766a:	43 41       	sbci	r20, 0x13	; 19
    766c:	3f 3d       	cpi	r19, 0xDF	; 223
    766e:	3b 39       	cpi	r19, 0x9B	; 155
    7670:	37 35       	cpi	r19, 0x57	; 87
    7672:	33 32       	cpi	r19, 0x23	; 35
    7674:	30 2f       	mov	r19, r16
    7676:	2e 2d       	mov	r18, r14
    7678:	2c 2b       	or	r18, r28
    767a:	2c 2d       	mov	r18, r12
    767c:	30 42       	sbci	r19, 0x20	; 32
    767e:	3d 28       	or	r3, r13
    7680:	00 e9       	ldi	r16, 0x90	; 144
    7682:	e5 fe       	sbrs	r14, 5
    7684:	d4 d7       	rcall	.+4008   	; 0x862e <print_level_score+0x76>
    7686:	d7 d7       	rcall	.+4014   	; 0x8636 <print_level_score+0x7e>
    7688:	d6 d4       	rcall	.+2476   	; 0x8036 <LBLineIntersect+0x56>
    768a:	d2 d0       	rcall	.+420    	; 0x7830 <waves+0x930>
    768c:	ce cc       	rjmp	.-1636   	; 0x702a <waves+0x12a>
    768e:	ca c8       	rjmp	.-3692   	; 0x6824 <TriggerNote+0x4e>
    7690:	c6 c3       	rjmp	.+1932   	; 0x7e1e <ProcessFading+0x28>
    7692:	c1 bf       	out	0x31, r28	; 49
    7694:	bd ba       	out	0x1d, r11	; 29
    7696:	b8 b6       	in	r11, 0x38	; 56
    7698:	b4 b1       	in	r27, 0x04	; 4
    769a:	af ad       	ldd	r26, Y+63	; 0x3f
    769c:	ab a9       	ldd	r26, Y+51	; 0x33
    769e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    76a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    76a2:	9f 9e       	mul	r9, r31
    76a4:	9c 9a       	sbi	0x13, 4	; 19
    76a6:	99 97       	sbiw	r26, 0x29	; 41
    76a8:	95 94       	asr	r9
    76aa:	93 91       	.word	0x9193	; ????
    76ac:	90 8f       	std	Z+24, r25	; 0x18
    76ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    76b0:	8b 8a       	std	Y+19, r8	; 0x13
    76b2:	89 88       	ldd	r8, Y+17	; 0x11
    76b4:	88 87       	std	Y+8, r24	; 0x08
    76b6:	86 85       	ldd	r24, Z+14	; 0x0e
    76b8:	85 84       	ldd	r8, Z+13	; 0x0d
    76ba:	84 84       	ldd	r8, Z+12	; 0x0c
    76bc:	83 83       	std	Z+3, r24	; 0x03
    76be:	83 83       	std	Z+3, r24	; 0x03
    76c0:	83 83       	std	Z+3, r24	; 0x03
    76c2:	83 83       	std	Z+3, r24	; 0x03
    76c4:	83 84       	ldd	r8, Z+11	; 0x0b
    76c6:	84 84       	ldd	r8, Z+12	; 0x0c
    76c8:	85 85       	ldd	r24, Z+13	; 0x0d
    76ca:	86 87       	std	Z+14, r24	; 0x0e
    76cc:	88 88       	ldd	r8, Y+16	; 0x10
    76ce:	89 8a       	std	Y+17, r8	; 0x11
    76d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    76d2:	8d 8f       	std	Y+29, r24	; 0x1d
    76d4:	90 91 93 94 	lds	r25, 0x9493
    76d8:	95 97       	sbiw	r26, 0x25	; 37
    76da:	99 9a       	sbi	0x13, 1	; 19
    76dc:	9c 9e       	mul	r9, r28
    76de:	9f a1       	ldd	r25, Y+39	; 0x27
    76e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    76e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    76e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    76e6:	af b1       	in	r26, 0x0f	; 15
    76e8:	b4 b6       	in	r11, 0x34	; 52
    76ea:	b8 ba       	out	0x18, r11	; 24
    76ec:	bd bf       	out	0x3d, r27	; 61
    76ee:	c1 c3       	rjmp	.+1922   	; 0x7e72 <LBGetNextFrame+0x2a>
    76f0:	c6 c8       	rjmp	.-3700   	; 0x687e <ProcessMusic+0x3a>
    76f2:	ca cc       	rjmp	.-1644   	; 0x7088 <waves+0x188>
    76f4:	ce d0       	rcall	.+412    	; 0x7892 <waves+0x992>
    76f6:	d2 d4       	rcall	.+2468   	; 0x809c <LBLineIntersect+0xbc>
    76f8:	d6 d7       	rcall	.+4012   	; 0x86a6 <render_score+0x30>
    76fa:	d7 d7       	rcall	.+4014   	; 0x86aa <render_score+0x34>
    76fc:	d4 fe       	sbrs	r13, 4
    76fe:	e5 e9       	ldi	r30, 0x95	; 149
    7700:	f9 f8       	.word	0xf8f9	; ????
    7702:	f9 f5       	brne	.+126    	; 0x7782 <waves+0x882>
    7704:	eb e1       	ldi	r30, 0x1B	; 27
    7706:	dd de       	rcall	.-582    	; 0x74c2 <waves+0x5c2>
    7708:	e0 e2       	ldi	r30, 0x20	; 32
    770a:	e4 e5       	ldi	r30, 0x54	; 84
    770c:	e6 e5       	ldi	r30, 0x56	; 86
    770e:	e4 e2       	ldi	r30, 0x24	; 36
    7710:	de d9       	rcall	.-3140   	; 0x6ace <ProcessMusic+0x28a>
    7712:	d2 ca       	rjmp	.-2652   	; 0x6cb8 <set_note_waves+0x16>
    7714:	c1 b7       	in	r28, 0x31	; 49
    7716:	ac a2       	std	Y+36, r10	; 0x24
    7718:	99 91       	ld	r25, Y+
    771a:	8a 86       	std	Y+10, r8	; 0x0a
    771c:	83 81       	ldd	r24, Z+3	; 0x03
    771e:	80 80       	ld	r8, Z
    7720:	81 82       	std	Z+1, r8	; 0x01
    7722:	83 85       	ldd	r24, Z+11	; 0x0b
    7724:	86 88       	ldd	r8, Z+22	; 0x16
    7726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    7728:	8d 8f       	std	Y+29, r24	; 0x1d
    772a:	90 92 93 95 	sts	0x9593, r9
    772e:	96 97       	sbiw	r26, 0x26	; 38
    7730:	98 99       	sbic	0x13, 0	; 19
    7732:	9a 9b       	sbis	0x13, 2	; 19
    7734:	9b 9c       	mul	r9, r11
    7736:	9d 9d       	mul	r25, r13
    7738:	9d 9e       	mul	r9, r29
    773a:	9e 9e       	mul	r9, r30
    773c:	9f 9f       	mul	r25, r31
    773e:	9f 9f       	mul	r25, r31
    7740:	9f 9f       	mul	r25, r31
    7742:	9f 9e       	mul	r9, r31
    7744:	9e 9e       	mul	r9, r30
    7746:	9d 9d       	mul	r25, r13
    7748:	9d 9c       	mul	r9, r13
    774a:	9b 9b       	sbis	0x13, 3	; 19
    774c:	9a 99       	sbic	0x13, 2	; 19
    774e:	98 97       	sbiw	r26, 0x28	; 40
    7750:	96 95       	lsr	r25
    7752:	93 92       	.word	0x9293	; ????
    7754:	90 8f       	std	Z+24, r25	; 0x18
    7756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7758:	8a 88       	ldd	r8, Y+18	; 0x12
    775a:	86 85       	ldd	r24, Z+14	; 0x0e
    775c:	83 82       	std	Z+3, r8	; 0x03
    775e:	81 80       	ldd	r8, Z+1	; 0x01
    7760:	80 81       	ld	r24, Z
    7762:	83 86       	std	Z+11, r8	; 0x0b
    7764:	8a 91       	ld	r24, -Y
    7766:	99 a2       	std	Y+33, r9	; 0x21
    7768:	ac b7       	in	r26, 0x3c	; 60
    776a:	c1 ca       	rjmp	.-2686   	; 0x6cee <smw1+0x8>
    776c:	d2 d9       	rcall	.-3164   	; 0x6b12 <ProcessMusic+0x2ce>
    776e:	de e2       	ldi	r29, 0x2E	; 46
    7770:	e4 e5       	ldi	r30, 0x54	; 84
    7772:	e6 e5       	ldi	r30, 0x56	; 86
    7774:	e4 e2       	ldi	r30, 0x24	; 36
    7776:	e0 de       	rcall	.-576    	; 0x7538 <waves+0x638>
    7778:	dd e1       	ldi	r29, 0x1D	; 29
    777a:	eb f5       	brvc	.+122    	; 0x77f6 <waves+0x8f6>
    777c:	f9 f8       	.word	0xf8f9	; ????
    777e:	f9 00       	.word	0x00f9	; ????
    7780:	07 08       	sbc	r0, r7
    7782:	07 0b       	sbc	r16, r23
    7784:	15 1f       	adc	r17, r21
    7786:	23 22       	and	r2, r19
    7788:	20 1e       	adc	r2, r16
    778a:	1c 1b       	sub	r17, r28
    778c:	1a 1b       	sub	r17, r26
    778e:	1c 1e       	adc	r1, r28
    7790:	22 27       	eor	r18, r18
    7792:	2e 36       	cpi	r18, 0x6E	; 110
    7794:	3f 49       	sbci	r19, 0x9F	; 159
    7796:	54 5e       	subi	r21, 0xE4	; 228
    7798:	67 6f       	ori	r22, 0xF7	; 247
    779a:	76 7a       	andi	r23, 0xA6	; 166
    779c:	7e 7f       	andi	r23, 0xFE	; 254
    779e:	7f 7f       	andi	r23, 0xFF	; 255
    77a0:	7f 7e       	andi	r23, 0xEF	; 239
    77a2:	7d 7b       	andi	r23, 0xBD	; 189
    77a4:	7a 78       	andi	r23, 0x8A	; 138
    77a6:	76 74       	andi	r23, 0x46	; 70
    77a8:	73 71       	andi	r23, 0x13	; 19
    77aa:	70 6e       	ori	r23, 0xE0	; 224
    77ac:	6d 6b       	ori	r22, 0xBD	; 189
    77ae:	6a 69       	ori	r22, 0x9A	; 154
    77b0:	68 67       	ori	r22, 0x78	; 120
    77b2:	66 65       	ori	r22, 0x56	; 86
    77b4:	65 64       	ori	r22, 0x45	; 69
    77b6:	64 63       	ori	r22, 0x34	; 52
    77b8:	63 62       	ori	r22, 0x23	; 35
    77ba:	62 62       	ori	r22, 0x22	; 34
    77bc:	61 61       	ori	r22, 0x11	; 17
    77be:	61 61       	ori	r22, 0x11	; 17
    77c0:	61 61       	ori	r22, 0x11	; 17
    77c2:	61 62       	ori	r22, 0x21	; 33
    77c4:	62 62       	ori	r22, 0x22	; 34
    77c6:	63 63       	ori	r22, 0x33	; 51
    77c8:	63 64       	ori	r22, 0x43	; 67
    77ca:	65 65       	ori	r22, 0x55	; 85
    77cc:	66 67       	ori	r22, 0x76	; 118
    77ce:	68 69       	ori	r22, 0x98	; 152
    77d0:	6a 6b       	ori	r22, 0xBA	; 186
    77d2:	6d 6e       	ori	r22, 0xED	; 237
    77d4:	70 71       	andi	r23, 0x10	; 16
    77d6:	73 74       	andi	r23, 0x43	; 67
    77d8:	76 78       	andi	r23, 0x86	; 134
    77da:	7a 7b       	andi	r23, 0xBA	; 186
    77dc:	7d 7e       	andi	r23, 0xED	; 237
    77de:	7f 7f       	andi	r23, 0xFF	; 255
    77e0:	7f 7f       	andi	r23, 0xFF	; 255
    77e2:	7e 7a       	andi	r23, 0xAE	; 174
    77e4:	76 6f       	ori	r23, 0xF6	; 246
    77e6:	67 5e       	subi	r22, 0xE7	; 231
    77e8:	54 49       	sbci	r21, 0x94	; 148
    77ea:	3f 36       	cpi	r19, 0x6F	; 111
    77ec:	2e 27       	eor	r18, r30
    77ee:	22 1e       	adc	r2, r18
    77f0:	1c 1b       	sub	r17, r28
    77f2:	1a 1b       	sub	r17, r26
    77f4:	1c 1e       	adc	r1, r28
    77f6:	20 22       	and	r2, r16
    77f8:	23 1f       	adc	r18, r19
    77fa:	15 0b       	sbc	r17, r21
    77fc:	07 08       	sbc	r0, r7
    77fe:	07 00       	.word	0x0007	; ????
    7800:	1f 31       	cpi	r17, 0x1F	; 31
    7802:	3d 44       	sbci	r19, 0x4D	; 77
    7804:	4e 53       	subi	r20, 0x3E	; 62
    7806:	54 56       	subi	r21, 0x64	; 100
    7808:	5a 5f       	subi	r21, 0xFA	; 250
    780a:	64 69       	ori	r22, 0x94	; 148
    780c:	6e 74       	andi	r22, 0x4E	; 78
    780e:	76 79       	andi	r23, 0x96	; 150
    7810:	7c 7f       	andi	r23, 0xFC	; 252
    7812:	7f 7f       	andi	r23, 0xFF	; 255
    7814:	7f 7f       	andi	r23, 0xFF	; 255
    7816:	7f 7f       	andi	r23, 0xFF	; 255
    7818:	7f 7f       	andi	r23, 0xFF	; 255
    781a:	7f 7f       	andi	r23, 0xFF	; 255
    781c:	7f 7f       	andi	r23, 0xFF	; 255
    781e:	7f 7f       	andi	r23, 0xFF	; 255
    7820:	7f 7f       	andi	r23, 0xFF	; 255
    7822:	7f 7f       	andi	r23, 0xFF	; 255
    7824:	7f 7f       	andi	r23, 0xFF	; 255
    7826:	7f 7f       	andi	r23, 0xFF	; 255
    7828:	7f 7f       	andi	r23, 0xFF	; 255
    782a:	7f 7f       	andi	r23, 0xFF	; 255
    782c:	7f 7f       	andi	r23, 0xFF	; 255
    782e:	7f 7f       	andi	r23, 0xFF	; 255
    7830:	7f 7f       	andi	r23, 0xFF	; 255
    7832:	7f 7f       	andi	r23, 0xFF	; 255
    7834:	7f 7f       	andi	r23, 0xFF	; 255
    7836:	7f 7f       	andi	r23, 0xFF	; 255
    7838:	7f 7f       	andi	r23, 0xFF	; 255
    783a:	7f 7f       	andi	r23, 0xFF	; 255
    783c:	7f 7f       	andi	r23, 0xFF	; 255
    783e:	7f 7f       	andi	r23, 0xFF	; 255
    7840:	7f 7f       	andi	r23, 0xFF	; 255
    7842:	7f 7f       	andi	r23, 0xFF	; 255
    7844:	7f 7f       	andi	r23, 0xFF	; 255
    7846:	7f 7f       	andi	r23, 0xFF	; 255
    7848:	7f 7f       	andi	r23, 0xFF	; 255
    784a:	7f 7f       	andi	r23, 0xFF	; 255
    784c:	7f 7f       	andi	r23, 0xFF	; 255
    784e:	7f 7f       	andi	r23, 0xFF	; 255
    7850:	7f 7f       	andi	r23, 0xFF	; 255
    7852:	7f 7f       	andi	r23, 0xFF	; 255
    7854:	7f 7f       	andi	r23, 0xFF	; 255
    7856:	7f 7f       	andi	r23, 0xFF	; 255
    7858:	7f 7f       	andi	r23, 0xFF	; 255
    785a:	7f 7f       	andi	r23, 0xFF	; 255
    785c:	7f 7f       	andi	r23, 0xFF	; 255
    785e:	7f 7f       	andi	r23, 0xFF	; 255
    7860:	7f 7f       	andi	r23, 0xFF	; 255
    7862:	7f 7f       	andi	r23, 0xFF	; 255
    7864:	7f 7f       	andi	r23, 0xFF	; 255
    7866:	7f 7f       	andi	r23, 0xFF	; 255
    7868:	7f 7f       	andi	r23, 0xFF	; 255
    786a:	7f 7f       	andi	r23, 0xFF	; 255
    786c:	7f 7f       	andi	r23, 0xFF	; 255
    786e:	7f 7f       	andi	r23, 0xFF	; 255
    7870:	7f 7f       	andi	r23, 0xFF	; 255
    7872:	7f 7f       	andi	r23, 0xFF	; 255
    7874:	7f 7f       	andi	r23, 0xFF	; 255
    7876:	7f 7f       	andi	r23, 0xFF	; 255
    7878:	7f 7f       	andi	r23, 0xFF	; 255
    787a:	7f 7c       	andi	r23, 0xCF	; 207
    787c:	78 71       	andi	r23, 0x18	; 24
    787e:	68 4c       	sbci	r22, 0xC8	; 200
    7880:	2c 1c       	adc	r2, r12
    7882:	12 0c       	add	r1, r2
    7884:	0a 0b       	sbc	r16, r26
    7886:	0a 05       	cpc	r16, r10
    7888:	fd f3       	brhs	.-2      	; 0x7888 <waves+0x988>
    788a:	e9 df       	rcall	.-46     	; 0x785e <waves+0x95e>
    788c:	d4 ca       	rjmp	.-2648   	; 0x6e36 <steptable+0x12e>
    788e:	c0 b7       	in	r28, 0x30	; 48
    7890:	ae a6       	std	Y+46, r10	; 0x2e
    7892:	9e 97       	sbiw	r26, 0x2e	; 46
    7894:	91 8b       	std	Z+17, r25	; 0x11
    7896:	86 85       	ldd	r24, Z+14	; 0x0e
    7898:	82 80       	ldd	r8, Z+2	; 0x02
    789a:	80 80       	ld	r8, Z
    789c:	80 80       	ld	r8, Z
    789e:	80 80       	ld	r8, Z
    78a0:	80 80       	ld	r8, Z
    78a2:	80 80       	ld	r8, Z
    78a4:	80 80       	ld	r8, Z
    78a6:	80 80       	ld	r8, Z
    78a8:	80 80       	ld	r8, Z
    78aa:	80 80       	ld	r8, Z
    78ac:	80 80       	ld	r8, Z
    78ae:	80 80       	ld	r8, Z
    78b0:	80 80       	ld	r8, Z
    78b2:	80 80       	ld	r8, Z
    78b4:	80 80       	ld	r8, Z
    78b6:	80 80       	ld	r8, Z
    78b8:	80 80       	ld	r8, Z
    78ba:	80 80       	ld	r8, Z
    78bc:	80 80       	ld	r8, Z
    78be:	80 80       	ld	r8, Z
    78c0:	80 80       	ld	r8, Z
    78c2:	80 80       	ld	r8, Z
    78c4:	80 80       	ld	r8, Z
    78c6:	80 80       	ld	r8, Z
    78c8:	80 80       	ld	r8, Z
    78ca:	80 80       	ld	r8, Z
    78cc:	80 80       	ld	r8, Z
    78ce:	80 80       	ld	r8, Z
    78d0:	80 80       	ld	r8, Z
    78d2:	80 80       	ld	r8, Z
    78d4:	80 80       	ld	r8, Z
    78d6:	80 80       	ld	r8, Z
    78d8:	80 80       	ld	r8, Z
    78da:	80 80       	ld	r8, Z
    78dc:	80 80       	ld	r8, Z
    78de:	80 80       	ld	r8, Z
    78e0:	80 80       	ld	r8, Z
    78e2:	80 80       	ld	r8, Z
    78e4:	80 80       	ld	r8, Z
    78e6:	80 80       	ld	r8, Z
    78e8:	80 80       	ld	r8, Z
    78ea:	80 80       	ld	r8, Z
    78ec:	80 80       	ld	r8, Z
    78ee:	80 80       	ld	r8, Z
    78f0:	80 80       	ld	r8, Z
    78f2:	80 80       	ld	r8, Z
    78f4:	80 87       	std	Z+8, r24	; 0x08
    78f6:	91 9d       	mul	r25, r1
    78f8:	ac c4       	rjmp	.+2392   	; 0x8252 <set_shot_animations+0x38>
    78fa:	cb d4       	rcall	.+2454   	; 0x8292 <init_player+0x16>
    78fc:	dd f2       	brhs	.-74     	; 0x78b4 <waves+0x9b4>
    78fe:	fa fa       	.word	0xfafa	; ????

00007900 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    7900:	90 91 47 0c 	lds	r25, 0x0C47
    7904:	e8 e3       	ldi	r30, 0x38	; 56
    7906:	f9 e0       	ldi	r31, 0x09	; 9
    7908:	80 e0       	ldi	r24, 0x00	; 0
    790a:	89 17       	cp	r24, r25
    790c:	49 f0       	breq	.+18     	; 0x7920 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    790e:	a0 81       	ld	r26, Z
    7910:	b1 81       	ldd	r27, Z+1	; 0x01
    7912:	a0 58       	subi	r26, 0x80	; 128
    7914:	be 4f       	sbci	r27, 0xFE	; 254
    7916:	22 81       	ldd	r18, Z+2	; 0x02
    7918:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    791a:	8f 5f       	subi	r24, 0xFF	; 255
    791c:	33 96       	adiw	r30, 0x03	; 3
    791e:	f5 cf       	rjmp	.-22     	; 0x790a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    7920:	08 95       	ret

00007922 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    7922:	80 93 00 01 	sts	0x0100, r24
    7926:	08 95       	ret

00007928 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    7928:	2f 92       	push	r2
    792a:	3f 92       	push	r3
    792c:	4f 92       	push	r4
    792e:	5f 92       	push	r5
    7930:	6f 92       	push	r6
    7932:	7f 92       	push	r7
    7934:	8f 92       	push	r8
    7936:	9f 92       	push	r9
    7938:	af 92       	push	r10
    793a:	bf 92       	push	r11
    793c:	cf 92       	push	r12
    793e:	df 92       	push	r13
    7940:	ef 92       	push	r14
    7942:	ff 92       	push	r15
    7944:	0f 93       	push	r16
    7946:	1f 93       	push	r17
    7948:	cf 93       	push	r28
    794a:	df 93       	push	r29
    794c:	00 d0       	rcall	.+0      	; 0x794e <ProcessSprites+0x26>
    794e:	1f 92       	push	r1
    7950:	cd b7       	in	r28, 0x3d	; 61
    7952:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    7954:	10 92 47 0c 	sts	0x0C47, r1
		if(!spritesOn) return;
    7958:	80 91 00 01 	lds	r24, 0x0100
    795c:	88 23       	and	r24, r24
    795e:	09 f4       	brne	.+2      	; 0x7962 <ProcessSprites+0x3a>
    7960:	a1 c0       	rjmp	.+322    	; 0x7aa4 <ProcessSprites+0x17c>
    7962:	e8 ec       	ldi	r30, 0xC8	; 200
    7964:	ce 2e       	mov	r12, r30
    7966:	e4 e0       	ldi	r30, 0x04	; 4
    7968:	de 2e       	mov	r13, r30
    796a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    796c:	f6 01       	movw	r30, r12
    796e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    7970:	80 3f       	cpi	r24, 0xF0	; 240
    7972:	09 f4       	brne	.+2      	; 0x7976 <ProcessSprites+0x4e>
    7974:	79 c0       	rjmp	.+242    	; 0x7a68 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    7976:	91 81       	ldd	r25, Z+1	; 0x01
    7978:	29 2f       	mov	r18, r25
    797a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    797c:	28 2e       	mov	r2, r24
    797e:	26 94       	lsr	r2
    7980:	26 94       	lsr	r2
    7982:	26 94       	lsr	r2
				dx=ssx&0x7;
    7984:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    7986:	19 f0       	breq	.+6      	; 0x798e <ProcessSprites+0x66>
    7988:	72 e0       	ldi	r23, 0x02	; 2
    798a:	47 2e       	mov	r4, r23
    798c:	02 c0       	rjmp	.+4      	; 0x7992 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    798e:	44 24       	eor	r4, r4
    7990:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    7992:	63 e0       	ldi	r22, 0x03	; 3
    7994:	36 95       	lsr	r19
    7996:	27 95       	ror	r18
    7998:	6a 95       	dec	r22
    799a:	e1 f7       	brne	.-8      	; 0x7994 <ProcessSprites+0x6c>
    799c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    799e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    79a0:	19 f0       	breq	.+6      	; 0x79a8 <ProcessSprites+0x80>
    79a2:	52 e0       	ldi	r21, 0x02	; 2
    79a4:	55 2e       	mov	r5, r21
    79a6:	02 c0       	rjmp	.+4      	; 0x79ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    79a8:	55 24       	eor	r5, r5
    79aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    79ac:	29 2f       	mov	r18, r25
    79ae:	30 e0       	ldi	r19, 0x00	; 0
    79b0:	32 2f       	mov	r19, r18
    79b2:	22 27       	eor	r18, r18
    79b4:	a9 01       	movw	r20, r18
    79b6:	48 0f       	add	r20, r24
    79b8:	51 1d       	adc	r21, r1
    79ba:	5b 83       	std	Y+3, r21	; 0x03
    79bc:	4a 83       	std	Y+2, r20	; 0x02
    79be:	e1 2c       	mov	r14, r1
    79c0:	f1 2c       	mov	r15, r1
    79c2:	94 ee       	ldi	r25, 0xE4	; 228
    79c4:	93 0d       	add	r25, r3
    79c6:	99 83       	std	Y+1, r25	; 0x01
    79c8:	03 2d       	mov	r16, r3
    79ca:	0e 0d       	add	r16, r14
    79cc:	0c 31       	cpi	r16, 0x1C	; 28
    79ce:	10 f0       	brcs	.+4      	; 0x79d4 <ProcessSprites+0xac>
    79d0:	09 81       	ldd	r16, Y+1	; 0x01
    79d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    79d4:	5e e1       	ldi	r21, 0x1E	; 30
    79d6:	05 9f       	mul	r16, r21
    79d8:	80 01       	movw	r16, r0
    79da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    79dc:	be 2c       	mov	r11, r14
    79de:	aa 24       	eor	r10, r10
    79e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    79e2:	ed e1       	ldi	r30, 0x1D	; 29
    79e4:	e7 15       	cp	r30, r7
    79e6:	18 f4       	brcc	.+6      	; 0x79ee <ProcessSprites+0xc6>
    79e8:	82 ee       	ldi	r24, 0xE2	; 226
    79ea:	87 0d       	add	r24, r7
    79ec:	01 c0       	rjmp	.+2      	; 0x79f0 <ProcessSprites+0xc8>
    79ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    79f0:	a8 01       	movw	r20, r16
    79f2:	48 0f       	add	r20, r24
    79f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    79f6:	ca 01       	movw	r24, r20
    79f8:	80 58       	subi	r24, 0x80	; 128
    79fa:	9e 4f       	sbci	r25, 0xFE	; 254
    79fc:	4c 01       	movw	r8, r24
    79fe:	fc 01       	movw	r30, r24
    7a00:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    7a02:	81 31       	cpi	r24, 0x11	; 17
    7a04:	e0 f0       	brcs	.+56     	; 0x7a3e <ProcessSprites+0x116>
    7a06:	60 91 47 0c 	lds	r22, 0x0C47
    7a0a:	61 31       	cpi	r22, 0x11	; 17
    7a0c:	f8 f4       	brcc	.+62     	; 0x7a4c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    7a0e:	26 2f       	mov	r18, r22
    7a10:	30 e0       	ldi	r19, 0x00	; 0
    7a12:	f9 01       	movw	r30, r18
    7a14:	ee 0f       	add	r30, r30
    7a16:	ff 1f       	adc	r31, r31
    7a18:	e2 0f       	add	r30, r18
    7a1a:	f3 1f       	adc	r31, r19
    7a1c:	e8 5c       	subi	r30, 0xC8	; 200
    7a1e:	f6 4f       	sbci	r31, 0xF6	; 246
    7a20:	51 83       	std	Z+1, r21	; 0x01
    7a22:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    7a24:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    7a26:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    7a2a:	80 91 47 0c 	lds	r24, 0x0C47
    7a2e:	f4 01       	movw	r30, r8
    7a30:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    7a32:	91 e0       	ldi	r25, 0x01	; 1
    7a34:	98 0f       	add	r25, r24
    7a36:	90 93 47 0c 	sts	0x0C47, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    7a3a:	81 31       	cpi	r24, 0x11	; 17
    7a3c:	38 f4       	brcc	.+14     	; 0x7a4c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    7a3e:	2a 81       	ldd	r18, Y+2	; 0x02
    7a40:	3b 81       	ldd	r19, Y+3	; 0x03
    7a42:	a5 01       	movw	r20, r10
    7a44:	68 2f       	mov	r22, r24
    7a46:	86 2d       	mov	r24, r6
    7a48:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <BlitSprite>
    7a4c:	ff ef       	ldi	r31, 0xFF	; 255
    7a4e:	af 1a       	sub	r10, r31
    7a50:	bf 0a       	sbc	r11, r31
    7a52:	73 94       	inc	r7
    7a54:	87 2d       	mov	r24, r7
    7a56:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    7a58:	84 15       	cp	r24, r4
    7a5a:	18 f2       	brcs	.-122    	; 0x79e2 <ProcessSprites+0xba>
    7a5c:	4f ef       	ldi	r20, 0xFF	; 255
    7a5e:	e4 1a       	sub	r14, r20
    7a60:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    7a62:	e5 14       	cp	r14, r5
    7a64:	08 f4       	brcc	.+2      	; 0x7a68 <ProcessSprites+0x140>
    7a66:	b0 cf       	rjmp	.-160    	; 0x79c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    7a68:	63 94       	inc	r6
    7a6a:	84 e0       	ldi	r24, 0x04	; 4
    7a6c:	c8 0e       	add	r12, r24
    7a6e:	d1 1c       	adc	r13, r1
    7a70:	9c e0       	ldi	r25, 0x0C	; 12
    7a72:	69 12       	cpse	r6, r25
    7a74:	7b cf       	rjmp	.-266    	; 0x796c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    7a76:	0f 90       	pop	r0
    7a78:	0f 90       	pop	r0
    7a7a:	0f 90       	pop	r0
    7a7c:	df 91       	pop	r29
    7a7e:	cf 91       	pop	r28
    7a80:	1f 91       	pop	r17
    7a82:	0f 91       	pop	r16
    7a84:	ff 90       	pop	r15
    7a86:	ef 90       	pop	r14
    7a88:	df 90       	pop	r13
    7a8a:	cf 90       	pop	r12
    7a8c:	bf 90       	pop	r11
    7a8e:	af 90       	pop	r10
    7a90:	9f 90       	pop	r9
    7a92:	8f 90       	pop	r8
    7a94:	7f 90       	pop	r7
    7a96:	6f 90       	pop	r6
    7a98:	5f 90       	pop	r5
    7a9a:	4f 90       	pop	r4
    7a9c:	3f 90       	pop	r3
    7a9e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    7aa0:	0c 94 80 3c 	jmp	0x7900	; 0x7900 <RestoreBackground>

	}
    7aa4:	0f 90       	pop	r0
    7aa6:	0f 90       	pop	r0
    7aa8:	0f 90       	pop	r0
    7aaa:	df 91       	pop	r29
    7aac:	cf 91       	pop	r28
    7aae:	1f 91       	pop	r17
    7ab0:	0f 91       	pop	r16
    7ab2:	ff 90       	pop	r15
    7ab4:	ef 90       	pop	r14
    7ab6:	df 90       	pop	r13
    7ab8:	cf 90       	pop	r12
    7aba:	bf 90       	pop	r11
    7abc:	af 90       	pop	r10
    7abe:	9f 90       	pop	r9
    7ac0:	8f 90       	pop	r8
    7ac2:	7f 90       	pop	r7
    7ac4:	6f 90       	pop	r6
    7ac6:	5f 90       	pop	r5
    7ac8:	4f 90       	pop	r4
    7aca:	3f 90       	pop	r3
    7acc:	2f 90       	pop	r2
    7ace:	08 95       	ret

00007ad0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    7ad0:	df 92       	push	r13
    7ad2:	ef 92       	push	r14
    7ad4:	ff 92       	push	r15
    7ad6:	0f 93       	push	r16
    7ad8:	1f 93       	push	r17
    7ada:	cf 93       	push	r28
    7adc:	df 93       	push	r29
    7ade:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    7ae0:	fb 01       	movw	r30, r22
    7ae2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    7ae4:	31 96       	adiw	r30, 0x01	; 1
    7ae6:	64 91       	lpm	r22, Z
    7ae8:	5f ef       	ldi	r21, 0xFF	; 255
    7aea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    7aec:	24 2f       	mov	r18, r20
    7aee:	21 70       	andi	r18, 0x01	; 1
    7af0:	40 ff       	sbrs	r20, 0
    7af2:	04 c0       	rjmp	.+8      	; 0x7afc <MapSprite2+0x2c>
			x=(mapWidth-1);
    7af4:	95 2f       	mov	r25, r21
			dx=-1;
    7af6:	ff 24       	eor	r15, r15
    7af8:	fa 94       	dec	r15
    7afa:	03 c0       	rjmp	.+6      	; 0x7b02 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    7afc:	ff 24       	eor	r15, r15
    7afe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    7b00:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    7b02:	41 ff       	sbrs	r20, 1
    7b04:	05 c0       	rjmp	.+10     	; 0x7b10 <MapSprite2+0x40>
			y=(mapHeight-1);
    7b06:	7f ef       	ldi	r23, 0xFF	; 255
    7b08:	76 0f       	add	r23, r22
			dy=-1;
    7b0a:	ee 24       	eor	r14, r14
    7b0c:	ea 94       	dec	r14
    7b0e:	03 c0       	rjmp	.+6      	; 0x7b16 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    7b10:	ee 24       	eor	r14, r14
    7b12:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    7b14:	70 e0       	ldi	r23, 0x00	; 0
    7b16:	21 11       	cpse	r18, r1
    7b18:	01 c0       	rjmp	.+2      	; 0x7b1c <MapSprite2+0x4c>
    7b1a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    7b1c:	00 e0       	ldi	r16, 0x00	; 0
    7b1e:	06 17       	cp	r16, r22
    7b20:	09 f1       	breq	.+66     	; 0x7b64 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7b22:	71 03       	mulsu	r23, r17
    7b24:	e0 01       	movw	r28, r0
    7b26:	11 24       	eor	r1, r1
    7b28:	d8 2e       	mov	r13, r24
    7b2a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    7b2c:	8d 15       	cp	r24, r13
    7b2e:	b1 f0       	breq	.+44     	; 0x7b5c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7b30:	9e 01       	movw	r18, r28
    7b32:	29 0f       	add	r18, r25
    7b34:	31 1d       	adc	r19, r1
    7b36:	97 fd       	sbrc	r25, 7
    7b38:	3a 95       	dec	r19
    7b3a:	2e 5f       	subi	r18, 0xFE	; 254
    7b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7b3e:	fd 01       	movw	r30, r26
    7b40:	e2 0f       	add	r30, r18
    7b42:	f3 1f       	adc	r31, r19
    7b44:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    7b46:	34 e0       	ldi	r19, 0x04	; 4
    7b48:	83 9f       	mul	r24, r19
    7b4a:	f0 01       	movw	r30, r0
    7b4c:	11 24       	eor	r1, r1
    7b4e:	e8 53       	subi	r30, 0x38	; 56
    7b50:	fb 4f       	sbci	r31, 0xFB	; 251
    7b52:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    7b54:	8f 5f       	subi	r24, 0xFF	; 255
    7b56:	43 83       	std	Z+3, r20	; 0x03
    7b58:	9f 0d       	add	r25, r15
    7b5a:	e8 cf       	rjmp	.-48     	; 0x7b2c <MapSprite2+0x5c>
    7b5c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    7b5e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7b60:	95 2f       	mov	r25, r21
    7b62:	dd cf       	rjmp	.-70     	; 0x7b1e <MapSprite2+0x4e>
	    }
	}
    7b64:	df 91       	pop	r29
    7b66:	cf 91       	pop	r28
    7b68:	1f 91       	pop	r17
    7b6a:	0f 91       	pop	r16
    7b6c:	ff 90       	pop	r15
    7b6e:	ef 90       	pop	r14
    7b70:	df 90       	pop	r13
    7b72:	08 95       	ret

00007b74 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    7b74:	0f 93       	push	r16
    7b76:	cf 93       	push	r28
    7b78:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    7b7a:	30 e0       	ldi	r19, 0x00	; 0
    7b7c:	30 17       	cp	r19, r16
    7b7e:	e1 f0       	breq	.+56     	; 0x7bb8 <MoveSprite+0x44>
    7b80:	b4 2f       	mov	r27, r20
    7b82:	a0 e2       	ldi	r26, 0x20	; 32
    7b84:	a4 0f       	add	r26, r20
    7b86:	78 2f       	mov	r23, r24
    7b88:	72 0f       	add	r23, r18
    7b8a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    7b8c:	87 17       	cp	r24, r23
    7b8e:	81 f0       	breq	.+32     	; 0x7bb0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    7b90:	c4 e0       	ldi	r28, 0x04	; 4
    7b92:	8c 9f       	mul	r24, r28
    7b94:	f0 01       	movw	r30, r0
    7b96:	11 24       	eor	r1, r1
    7b98:	e8 53       	subi	r30, 0x38	; 56
    7b9a:	fb 4f       	sbci	r31, 0xFB	; 251
    7b9c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    7b9e:	41 3e       	cpi	r20, 0xE1	; 225
    7ba0:	51 05       	cpc	r21, r1
    7ba2:	14 f0       	brlt	.+4      	; 0x7ba8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    7ba4:	a1 83       	std	Z+1, r26	; 0x01
    7ba6:	01 c0       	rjmp	.+2      	; 0x7baa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    7ba8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    7baa:	8f 5f       	subi	r24, 0xFF	; 255
    7bac:	98 5f       	subi	r25, 0xF8	; 248
    7bae:	ee cf       	rjmp	.-36     	; 0x7b8c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    7bb0:	3f 5f       	subi	r19, 0xFF	; 255
    7bb2:	48 5f       	subi	r20, 0xF8	; 248
    7bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    7bb6:	e2 cf       	rjmp	.-60     	; 0x7b7c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    7bb8:	cf 91       	pop	r28
    7bba:	0f 91       	pop	r16
    7bbc:	08 95       	ret

00007bbe <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    7bbe:	e8 ec       	ldi	r30, 0xC8	; 200
    7bc0:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    7bc2:	80 ef       	ldi	r24, 0xF0	; 240
    7bc4:	80 83       	st	Z, r24
    7bc6:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    7bc8:	94 e0       	ldi	r25, 0x04	; 4
    7bca:	e8 3f       	cpi	r30, 0xF8	; 248
    7bcc:	f9 07       	cpc	r31, r25
    7bce:	d1 f7       	brne	.-12     	; 0x7bc4 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    7bd0:	08 95       	ret

00007bd2 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    7bd2:	4f 92       	push	r4
    7bd4:	5f 92       	push	r5
    7bd6:	6f 92       	push	r6
    7bd8:	7f 92       	push	r7
    7bda:	8f 92       	push	r8
    7bdc:	9f 92       	push	r9
    7bde:	af 92       	push	r10
    7be0:	bf 92       	push	r11
    7be2:	cf 92       	push	r12
    7be4:	df 92       	push	r13
    7be6:	ef 92       	push	r14
    7be8:	ff 92       	push	r15
    7bea:	0f 93       	push	r16
    7bec:	1f 93       	push	r17
    7bee:	cf 93       	push	r28
    7bf0:	df 93       	push	r29
    7bf2:	68 2e       	mov	r6, r24
    7bf4:	56 2e       	mov	r5, r22
    7bf6:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    7bf8:	fa 01       	movw	r30, r20
    7bfa:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    7bfc:	31 96       	adiw	r30, 0x01	; 1
    7bfe:	84 90       	lpm	r8, Z
    7c00:	c7 2c       	mov	r12, r7
    7c02:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    7c04:	00 e0       	ldi	r16, 0x00	; 0
    7c06:	10 e0       	ldi	r17, 0x00	; 0
    7c08:	91 2c       	mov	r9, r1
    7c0a:	98 14       	cp	r9, r8
    7c0c:	f1 f0       	breq	.+60     	; 0x7c4a <DrawMap2+0x78>
    7c0e:	c0 e0       	ldi	r28, 0x00	; 0
    7c10:	d0 e0       	ldi	r29, 0x00	; 0
    7c12:	58 01       	movw	r10, r16
    7c14:	f2 e0       	ldi	r31, 0x02	; 2
    7c16:	af 0e       	add	r10, r31
    7c18:	b1 1c       	adc	r11, r1
    7c1a:	49 2c       	mov	r4, r9
    7c1c:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    7c1e:	c7 15       	cp	r28, r7
    7c20:	80 f4       	brcc	.+32     	; 0x7c42 <DrawMap2+0x70>
    7c22:	95 01       	movw	r18, r10
    7c24:	2c 0f       	add	r18, r28
    7c26:	3d 1f       	adc	r19, r29
    7c28:	f7 01       	movw	r30, r14
    7c2a:	e2 0f       	add	r30, r18
    7c2c:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    7c2e:	24 91       	lpm	r18, Z
    7c30:	42 2f       	mov	r20, r18
    7c32:	50 e0       	ldi	r21, 0x00	; 0
    7c34:	64 2d       	mov	r22, r4
    7c36:	8c 2f       	mov	r24, r28
    7c38:	86 0d       	add	r24, r6
    7c3a:	0e 94 d7 30 	call	0x61ae	; 0x61ae <SetTile>
    7c3e:	21 96       	adiw	r28, 0x01	; 1
    7c40:	ee cf       	rjmp	.-36     	; 0x7c1e <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    7c42:	93 94       	inc	r9
    7c44:	0c 0d       	add	r16, r12
    7c46:	1d 1d       	adc	r17, r13
    7c48:	e0 cf       	rjmp	.-64     	; 0x7c0a <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    7c4a:	df 91       	pop	r29
    7c4c:	cf 91       	pop	r28
    7c4e:	1f 91       	pop	r17
    7c50:	0f 91       	pop	r16
    7c52:	ff 90       	pop	r15
    7c54:	ef 90       	pop	r14
    7c56:	df 90       	pop	r13
    7c58:	cf 90       	pop	r12
    7c5a:	bf 90       	pop	r11
    7c5c:	af 90       	pop	r10
    7c5e:	9f 90       	pop	r9
    7c60:	8f 90       	pop	r8
    7c62:	7f 90       	pop	r7
    7c64:	6f 90       	pop	r6
    7c66:	5f 90       	pop	r5
    7c68:	4f 90       	pop	r4
    7c6a:	08 95       	ret

00007c6c <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    7c6c:	df 92       	push	r13
    7c6e:	ef 92       	push	r14
    7c70:	ff 92       	push	r15
    7c72:	0f 93       	push	r16
    7c74:	1f 93       	push	r17
    7c76:	cf 93       	push	r28
    7c78:	df 93       	push	r29
    7c7a:	f6 2e       	mov	r15, r22
    7c7c:	04 2f       	mov	r16, r20
    7c7e:	d2 2e       	mov	r13, r18
    7c80:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    7c82:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    7c84:	8a e0       	ldi	r24, 0x0A	; 10
    7c86:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    7c88:	01 11       	cpse	r16, r1
    7c8a:	02 c0       	rjmp	.+4      	; 0x7c90 <PrintByte+0x24>
    7c8c:	11 11       	cpse	r17, r1
    7c8e:	07 c0       	rjmp	.+14     	; 0x7c9e <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    7c90:	80 2f       	mov	r24, r16
    7c92:	6e 2d       	mov	r22, r14
    7c94:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    7c98:	40 e1       	ldi	r20, 0x10	; 16
    7c9a:	49 0f       	add	r20, r25
    7c9c:	05 c0       	rjmp	.+10     	; 0x7ca8 <PrintByte+0x3c>
		}else{
			if(zeropad){
    7c9e:	dd 20       	and	r13, r13
    7ca0:	11 f0       	breq	.+4      	; 0x7ca6 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    7ca2:	40 e1       	ldi	r20, 0x10	; 16
    7ca4:	01 c0       	rjmp	.+2      	; 0x7ca8 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    7ca6:	40 e0       	ldi	r20, 0x00	; 0
    7ca8:	6f 2d       	mov	r22, r15
    7caa:	8c 2f       	mov	r24, r28
    7cac:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <SetFont>
			}
		}
		val=val/10;
    7cb0:	80 2f       	mov	r24, r16
    7cb2:	6e 2d       	mov	r22, r14
    7cb4:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__udivmodqi4>
    7cb8:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    7cba:	1f 5f       	subi	r17, 0xFF	; 255
    7cbc:	21 97       	sbiw	r28, 0x01	; 1
    7cbe:	13 30       	cpi	r17, 0x03	; 3
    7cc0:	19 f7       	brne	.-58     	; 0x7c88 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    7cc2:	df 91       	pop	r29
    7cc4:	cf 91       	pop	r28
    7cc6:	1f 91       	pop	r17
    7cc8:	0f 91       	pop	r16
    7cca:	ff 90       	pop	r15
    7ccc:	ef 90       	pop	r14
    7cce:	df 90       	pop	r13
    7cd0:	08 95       	ret

00007cd2 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    7cd2:	0f 93       	push	r16
    7cd4:	1f 93       	push	r17
    7cd6:	cf 93       	push	r28
    7cd8:	df 93       	push	r29
    7cda:	06 2f       	mov	r16, r22
    7cdc:	c4 2f       	mov	r28, r20
    7cde:	d5 2f       	mov	r29, r21
    7ce0:	18 2f       	mov	r17, r24
    7ce2:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    7ce4:	fe 01       	movw	r30, r28
    7ce6:	44 91       	lpm	r20, Z
		if(c!=0){
    7ce8:	44 23       	and	r20, r20
    7cea:	49 f0       	breq	.+18     	; 0x7cfe <Print+0x2c>
			c=((c&127)-32);			
    7cec:	4f 77       	andi	r20, 0x7F	; 127
    7cee:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    7cf0:	60 2f       	mov	r22, r16
    7cf2:	8c 2f       	mov	r24, r28
    7cf4:	81 0f       	add	r24, r17
    7cf6:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <SetFont>
    7cfa:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    7cfc:	f3 cf       	rjmp	.-26     	; 0x7ce4 <Print+0x12>
	
}
    7cfe:	df 91       	pop	r29
    7d00:	cf 91       	pop	r28
    7d02:	1f 91       	pop	r17
    7d04:	0f 91       	pop	r16
    7d06:	08 95       	ret

00007d08 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    7d08:	40 52       	subi	r20, 0x20	; 32
    7d0a:	0c 94 d3 30 	jmp	0x61a6	; 0x61a6 <SetFont>

00007d0e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    7d0e:	0f 93       	push	r16
    7d10:	1f 93       	push	r17
    7d12:	cf 93       	push	r28
    7d14:	df 93       	push	r29
    7d16:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7d18:	c0 e0       	ldi	r28, 0x00	; 0
    7d1a:	d0 e0       	ldi	r29, 0x00	; 0
    7d1c:	c0 17       	cp	r28, r16
    7d1e:	d1 07       	cpc	r29, r17
    7d20:	44 f4       	brge	.+16     	; 0x7d32 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    7d22:	0e 94 ed 30 	call	0x61da	; 0x61da <GetVsyncFlag>
    7d26:	88 23       	and	r24, r24
    7d28:	e1 f3       	breq	.-8      	; 0x7d22 <WaitVsync+0x14>
		ClearVsyncFlag();		
    7d2a:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7d2e:	21 96       	adiw	r28, 0x01	; 1
    7d30:	f5 cf       	rjmp	.-22     	; 0x7d1c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    7d32:	df 91       	pop	r29
    7d34:	cf 91       	pop	r28
    7d36:	1f 91       	pop	r17
    7d38:	0f 91       	pop	r16
    7d3a:	08 95       	ret

00007d3c <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    7d3c:	8d e1       	ldi	r24, 0x1D	; 29
    7d3e:	99 e0       	ldi	r25, 0x09	; 9
    7d40:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    7d44:	8d e1       	ldi	r24, 0x1D	; 29
    7d46:	91 e0       	ldi	r25, 0x01	; 1
    7d48:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <SetTileTable>
			
			//draw logo
			ClearVram();
    7d4c:	0e 94 c9 30 	call	0x6192	; 0x6192 <ClearVram>
			WaitVsync(15);		
    7d50:	8f e0       	ldi	r24, 0x0F	; 15
    7d52:	90 e0       	ldi	r25, 0x00	; 0
    7d54:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    7d58:	41 e0       	ldi	r20, 0x01	; 1
    7d5a:	6f ef       	ldi	r22, 0xFF	; 255
    7d5c:	80 e0       	ldi	r24, 0x00	; 0
    7d5e:	0e 94 ac 33 	call	0x6758	; 0x6758 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    7d62:	47 e0       	ldi	r20, 0x07	; 7
    7d64:	51 e0       	ldi	r21, 0x01	; 1
    7d66:	6c e0       	ldi	r22, 0x0C	; 12
    7d68:	8c e0       	ldi	r24, 0x0C	; 12
    7d6a:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <DrawMap2>
			WaitVsync(3);
    7d6e:	83 e0       	ldi	r24, 0x03	; 3
    7d70:	90 e0       	ldi	r25, 0x00	; 0
    7d72:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    7d76:	46 ef       	ldi	r20, 0xF6	; 246
    7d78:	50 e0       	ldi	r21, 0x00	; 0
    7d7a:	6c e0       	ldi	r22, 0x0C	; 12
    7d7c:	8c e0       	ldi	r24, 0x0C	; 12
    7d7e:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <DrawMap2>
			WaitVsync(2);
    7d82:	82 e0       	ldi	r24, 0x02	; 2
    7d84:	90 e0       	ldi	r25, 0x00	; 0
    7d86:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    7d8a:	47 e0       	ldi	r20, 0x07	; 7
    7d8c:	51 e0       	ldi	r21, 0x01	; 1
    7d8e:	6c e0       	ldi	r22, 0x0C	; 12
    7d90:	8c e0       	ldi	r24, 0x0C	; 12
    7d92:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <DrawMap2>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    7d96:	81 e4       	ldi	r24, 0x41	; 65
    7d98:	90 e0       	ldi	r25, 0x00	; 0
    7d9a:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <WaitVsync>
			ClearVram();
    7d9e:	0e 94 c9 30 	call	0x6192	; 0x6192 <ClearVram>
			WaitVsync(20);
    7da2:	84 e1       	ldi	r24, 0x14	; 20
    7da4:	90 e0       	ldi	r25, 0x00	; 0
    7da6:	0c 94 87 3e 	jmp	0x7d0e	; 0x7d0e <WaitVsync>

00007daa <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    7daa:	80 93 45 0c 	sts	0x0C45, r24
	currFadeFrame=0;
    7dae:	10 92 49 0c 	sts	0x0C49, r1
	fadeActive=true;
    7db2:	81 e0       	ldi	r24, 0x01	; 1
    7db4:	80 93 48 0c 	sts	0x0C48, r24
		
	if(blocking){
    7db8:	66 23       	and	r22, r22
    7dba:	21 f0       	breq	.+8      	; 0x7dc4 <doFade+0x1a>
		while(fadeActive==true);
    7dbc:	80 91 48 0c 	lds	r24, 0x0C48
    7dc0:	81 11       	cpse	r24, r1
    7dc2:	fc cf       	rjmp	.-8      	; 0x7dbc <doFade+0x12>
    7dc4:	08 95       	ret

00007dc6 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    7dc6:	81 11       	cpse	r24, r1
    7dc8:	03 c0       	rjmp	.+6      	; 0x7dd0 <FadeIn+0xa>
		DDRC=0xff;
    7dca:	8f ef       	ldi	r24, 0xFF	; 255
    7dcc:	87 b9       	out	0x07, r24	; 7
		return;
    7dce:	08 95       	ret
	}
	fadeStep=1;
    7dd0:	91 e0       	ldi	r25, 0x01	; 1
    7dd2:	90 93 4a 0c 	sts	0x0C4A, r25
	fadeDir=1;
    7dd6:	90 93 46 0c 	sts	0x0C46, r25
	doFade(speed,blocking);
    7dda:	0c 94 d5 3e 	jmp	0x7daa	; 0x7daa <doFade>

00007dde <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    7dde:	81 11       	cpse	r24, r1
    7de0:	02 c0       	rjmp	.+4      	; 0x7de6 <FadeOut+0x8>
		DDRC=0;
    7de2:	17 b8       	out	0x07, r1	; 7
		return;
    7de4:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    7de6:	9c e0       	ldi	r25, 0x0C	; 12
    7de8:	90 93 4a 0c 	sts	0x0C4A, r25
	fadeDir=-1;
    7dec:	9f ef       	ldi	r25, 0xFF	; 255
    7dee:	90 93 46 0c 	sts	0x0C46, r25
	doFade(speed,blocking);
    7df2:	0c 94 d5 3e 	jmp	0x7daa	; 0x7daa <doFade>

00007df6 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    7df6:	80 91 48 0c 	lds	r24, 0x0C48
    7dfa:	88 23       	and	r24, r24
    7dfc:	01 f1       	breq	.+64     	; 0x7e3e <ProcessFading+0x48>
		if(currFadeFrame==0){
    7dfe:	80 91 49 0c 	lds	r24, 0x0C49
    7e02:	81 11       	cpse	r24, r1
    7e04:	19 c0       	rjmp	.+50     	; 0x7e38 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    7e06:	80 91 45 0c 	lds	r24, 0x0C45
    7e0a:	80 93 49 0c 	sts	0x0C49, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    7e0e:	e0 91 4a 0c 	lds	r30, 0x0C4A
    7e12:	f0 e0       	ldi	r31, 0x00	; 0
    7e14:	e7 51       	subi	r30, 0x17	; 23
    7e16:	ff 4f       	sbci	r31, 0xFF	; 255
    7e18:	e4 91       	lpm	r30, Z
    7e1a:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    7e1c:	90 91 46 0c 	lds	r25, 0x0C46
    7e20:	80 91 4a 0c 	lds	r24, 0x0C4A
    7e24:	89 0f       	add	r24, r25
    7e26:	80 93 4a 0c 	sts	0x0C4A, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    7e2a:	88 23       	and	r24, r24
    7e2c:	11 f0       	breq	.+4      	; 0x7e32 <ProcessFading+0x3c>
    7e2e:	8d 30       	cpi	r24, 0x0D	; 13
    7e30:	31 f4       	brne	.+12     	; 0x7e3e <ProcessFading+0x48>
				fadeActive=false;
    7e32:	10 92 48 0c 	sts	0x0C48, r1
    7e36:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    7e38:	81 50       	subi	r24, 0x01	; 1
    7e3a:	80 93 49 0c 	sts	0x0C49, r24
    7e3e:	08 95       	ret

00007e40 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    7e40:	0e 94 fb 3e 	call	0x7df6	; 0x7df6 <ProcessFading>
		ProcessSprites();
    7e44:	0c 94 94 3c 	jmp	0x7928	; 0x7928 <ProcessSprites>

00007e48 <LBGetNextFrame>:
	u8 frame_count;			// Render frame counter
	char* anims[3];
} Animation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    7e48:	cf 93       	push	r28
    7e4a:	df 93       	push	r29
    7e4c:	fc 01       	movw	r30, r24
    7e4e:	eb 01       	movw	r28, r22
	*looped = 0;
    7e50:	18 82       	st	Y, r1
	anim->frame_count += 1;
    7e52:	93 81       	ldd	r25, Z+3	; 0x03
    7e54:	9f 5f       	subi	r25, 0xFF	; 255
    7e56:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    7e58:	22 81       	ldd	r18, Z+2	; 0x02
    7e5a:	80 81       	ld	r24, Z
    7e5c:	92 17       	cp	r25, r18
    7e5e:	70 f0       	brcs	.+28     	; 0x7e7c <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    7e60:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    7e62:	90 e0       	ldi	r25, 0x00	; 0
    7e64:	01 96       	adiw	r24, 0x01	; 1
    7e66:	21 81       	ldd	r18, Z+1	; 0x01
    7e68:	62 2f       	mov	r22, r18
    7e6a:	70 e0       	ldi	r23, 0x00	; 0
    7e6c:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    7e70:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    7e72:	81 11       	cpse	r24, r1
    7e74:	02 c0       	rjmp	.+4      	; 0x7e7a <LBGetNextFrame+0x32>
    7e76:	81 e0       	ldi	r24, 0x01	; 1
    7e78:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    7e7a:	80 81       	ld	r24, Z
    7e7c:	e8 0f       	add	r30, r24
    7e7e:	f1 1d       	adc	r31, r1
    7e80:	e8 0f       	add	r30, r24
    7e82:	f1 1d       	adc	r31, r1
    7e84:	84 81       	ldd	r24, Z+4	; 0x04
    7e86:	95 81       	ldd	r25, Z+5	; 0x05
}
    7e88:	df 91       	pop	r29
    7e8a:	cf 91       	pop	r28
    7e8c:	08 95       	ret

00007e8e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    7e8e:	0f 93       	push	r16
    7e90:	1f 93       	push	r17
    7e92:	cf 93       	push	r28
    7e94:	df 93       	push	r29
    7e96:	8c 01       	movw	r16, r24
    7e98:	eb 01       	movw	r28, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    7e9a:	80 e0       	ldi	r24, 0x00	; 0
    7e9c:	0e 94 f7 30 	call	0x61ee	; 0x61ee <ReadJoypad>
    7ea0:	f8 01       	movw	r30, r16
    7ea2:	95 83       	std	Z+5, r25	; 0x05
    7ea4:	84 83       	std	Z+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    7ea6:	20 91 da 0b 	lds	r18, 0x0BDA
    7eaa:	30 91 db 0b 	lds	r19, 0x0BDB
    7eae:	a9 01       	movw	r20, r18
    7eb0:	40 95       	com	r20
    7eb2:	50 95       	com	r21
    7eb4:	48 23       	and	r20, r24
    7eb6:	59 23       	and	r21, r25
    7eb8:	51 83       	std	Z+1, r21	; 0x01
    7eba:	40 83       	st	Z, r20
	p1->released = p1_prev & (p1->held ^ p1_prev);
    7ebc:	ac 01       	movw	r20, r24
    7ebe:	40 95       	com	r20
    7ec0:	50 95       	com	r21
    7ec2:	24 23       	and	r18, r20
    7ec4:	35 23       	and	r19, r21
    7ec6:	33 83       	std	Z+3, r19	; 0x03
    7ec8:	22 83       	std	Z+2, r18	; 0x02
	p1_prev = p1->held;
    7eca:	90 93 db 0b 	sts	0x0BDB, r25
    7ece:	80 93 da 0b 	sts	0x0BDA, r24
	p2->held = ReadJoypad(1);
    7ed2:	81 e0       	ldi	r24, 0x01	; 1
    7ed4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <ReadJoypad>
    7ed8:	9d 83       	std	Y+5, r25	; 0x05
    7eda:	8c 83       	std	Y+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    7edc:	20 91 d8 0b 	lds	r18, 0x0BD8
    7ee0:	30 91 d9 0b 	lds	r19, 0x0BD9
    7ee4:	a9 01       	movw	r20, r18
    7ee6:	40 95       	com	r20
    7ee8:	50 95       	com	r21
    7eea:	48 23       	and	r20, r24
    7eec:	59 23       	and	r21, r25
    7eee:	59 83       	std	Y+1, r21	; 0x01
    7ef0:	48 83       	st	Y, r20
	p2->released = p2_prev & (p2->held ^ p2_prev);
    7ef2:	ac 01       	movw	r20, r24
    7ef4:	40 95       	com	r20
    7ef6:	50 95       	com	r21
    7ef8:	24 23       	and	r18, r20
    7efa:	35 23       	and	r19, r21
    7efc:	3b 83       	std	Y+3, r19	; 0x03
    7efe:	2a 83       	std	Y+2, r18	; 0x02
	p2_prev = p2->held;
    7f00:	90 93 d9 0b 	sts	0x0BD9, r25
    7f04:	80 93 d8 0b 	sts	0x0BD8, r24
}
    7f08:	df 91       	pop	r29
    7f0a:	cf 91       	pop	r28
    7f0c:	1f 91       	pop	r17
    7f0e:	0f 91       	pop	r16
    7f10:	08 95       	ret

00007f12 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    7f12:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    7f14:	fb 01       	movw	r30, r22
    7f16:	2e 2f       	mov	r18, r30
    7f18:	23 1b       	sub	r18, r19
    7f1a:	24 17       	cp	r18, r20
    7f1c:	28 f4       	brcc	.+10     	; 0x7f28 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    7f1e:	21 91       	ld	r18, Z+
    7f20:	dc 01       	movw	r26, r24
    7f22:	2d 93       	st	X+, r18
    7f24:	cd 01       	movw	r24, r26
    7f26:	f7 cf       	rjmp	.-18     	; 0x7f16 <LBCopyChars+0x4>
	}
}
    7f28:	08 95       	ret

00007f2a <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    7f2a:	af 92       	push	r10
    7f2c:	bf 92       	push	r11
    7f2e:	cf 92       	push	r12
    7f30:	df 92       	push	r13
    7f32:	ef 92       	push	r14
    7f34:	ff 92       	push	r15
    7f36:	0f 93       	push	r16
    7f38:	1f 93       	push	r17
    7f3a:	cf 93       	push	r28
    7f3c:	df 93       	push	r29
    7f3e:	1f 92       	push	r1
    7f40:	cd b7       	in	r28, 0x3d	; 61
    7f42:	de b7       	in	r29, 0x3e	; 62
    7f44:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    7f46:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    7f48:	c6 2e       	mov	r12, r22
    7f4a:	d1 2c       	mov	r13, r1
    7f4c:	90 e0       	ldi	r25, 0x00	; 0
    7f4e:	5c 01       	movw	r10, r24
    7f50:	a4 1a       	sub	r10, r20
    7f52:	b5 0a       	sbc	r11, r21
    7f54:	80 2f       	mov	r24, r16
    7f56:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    7f58:	82 17       	cp	r24, r18
    7f5a:	60 f4       	brcc	.+24     	; 0x7f74 <LBPrintStr+0x4a>
    7f5c:	c5 01       	movw	r24, r10
    7f5e:	80 0f       	add	r24, r16
    7f60:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    7f62:	f8 01       	movw	r30, r16
    7f64:	41 91       	ld	r20, Z+
    7f66:	8f 01       	movw	r16, r30
    7f68:	b6 01       	movw	r22, r12
    7f6a:	29 83       	std	Y+1, r18	; 0x01
    7f6c:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <PrintChar>
    7f70:	29 81       	ldd	r18, Y+1	; 0x01
    7f72:	f0 cf       	rjmp	.-32     	; 0x7f54 <LBPrintStr+0x2a>
	}
}
    7f74:	0f 90       	pop	r0
    7f76:	df 91       	pop	r29
    7f78:	cf 91       	pop	r28
    7f7a:	1f 91       	pop	r17
    7f7c:	0f 91       	pop	r16
    7f7e:	ff 90       	pop	r15
    7f80:	ef 90       	pop	r14
    7f82:	df 90       	pop	r13
    7f84:	cf 90       	pop	r12
    7f86:	bf 90       	pop	r11
    7f88:	af 90       	pop	r10
    7f8a:	08 95       	ret

00007f8c <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    7f8c:	af 92       	push	r10
    7f8e:	cf 92       	push	r12
    7f90:	ef 92       	push	r14
    7f92:	ff 92       	push	r15
    7f94:	0f 93       	push	r16
    7f96:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    7f98:	70 e0       	ldi	r23, 0x00	; 0
    7f9a:	f1 2c       	mov	r15, r1
    7f9c:	fb 01       	movw	r30, r22
    7f9e:	e2 0f       	add	r30, r18
    7fa0:	f1 1d       	adc	r31, r1
    7fa2:	ee 15       	cp	r30, r14
    7fa4:	ff 05       	cpc	r31, r15
    7fa6:	a4 f0       	brlt	.+40     	; 0x7fd0 <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    7fa8:	ea 0c       	add	r14, r10
    7faa:	f1 1c       	adc	r15, r1
    7fac:	e6 16       	cp	r14, r22
    7fae:	f7 06       	cpc	r15, r23
    7fb0:	7c f0       	brlt	.+30     	; 0x7fd0 <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    7fb2:	28 2f       	mov	r18, r24
    7fb4:	30 e0       	ldi	r19, 0x00	; 0
    7fb6:	10 e0       	ldi	r17, 0x00	; 0
    7fb8:	c9 01       	movw	r24, r18
    7fba:	84 0f       	add	r24, r20
    7fbc:	91 1d       	adc	r25, r1
    7fbe:	80 17       	cp	r24, r16
    7fc0:	91 07       	cpc	r25, r17
    7fc2:	34 f0       	brlt	.+12     	; 0x7fd0 <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    7fc4:	0c 0d       	add	r16, r12
    7fc6:	11 1d       	adc	r17, r1
    7fc8:	81 e0       	ldi	r24, 0x01	; 1
    7fca:	02 17       	cp	r16, r18
    7fcc:	13 07       	cpc	r17, r19
    7fce:	0c f4       	brge	.+2      	; 0x7fd2 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    7fd0:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    7fd2:	1f 91       	pop	r17
    7fd4:	0f 91       	pop	r16
    7fd6:	ff 90       	pop	r15
    7fd8:	ef 90       	pop	r14
    7fda:	cf 90       	pop	r12
    7fdc:	af 90       	pop	r10
    7fde:	08 95       	ret

00007fe0 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    7fe0:	2f 92       	push	r2
    7fe2:	3f 92       	push	r3
    7fe4:	4f 92       	push	r4
    7fe6:	5f 92       	push	r5
    7fe8:	6f 92       	push	r6
    7fea:	7f 92       	push	r7
    7fec:	8f 92       	push	r8
    7fee:	9f 92       	push	r9
    7ff0:	af 92       	push	r10
    7ff2:	bf 92       	push	r11
    7ff4:	cf 92       	push	r12
    7ff6:	df 92       	push	r13
    7ff8:	ef 92       	push	r14
    7ffa:	ff 92       	push	r15
    7ffc:	0f 93       	push	r16
    7ffe:	1f 93       	push	r17
    8000:	cf 93       	push	r28
    8002:	df 93       	push	r29
    8004:	00 d0       	rcall	.+0      	; 0x8006 <LBLineIntersect+0x26>
    8006:	00 d0       	rcall	.+0      	; 0x8008 <LBLineIntersect+0x28>
    8008:	cd b7       	in	r28, 0x3d	; 61
    800a:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    800c:	f1 2c       	mov	r15, r1
    800e:	8a 2c       	mov	r8, r10
    8010:	91 2c       	mov	r9, r1
    8012:	8e 18       	sub	r8, r14
    8014:	9f 08       	sbc	r9, r15
    8016:	a8 2e       	mov	r10, r24
    8018:	b1 2c       	mov	r11, r1
    801a:	24 2e       	mov	r2, r20
    801c:	31 2c       	mov	r3, r1
    801e:	2a 18       	sub	r2, r10
    8020:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8022:	10 e0       	ldi	r17, 0x00	; 0
    8024:	d1 2c       	mov	r13, r1
    8026:	c0 1a       	sub	r12, r16
    8028:	d1 0a       	sbc	r13, r17
    802a:	46 2f       	mov	r20, r22
    802c:	50 e0       	ldi	r21, 0x00	; 0
    802e:	5c 83       	std	Y+4, r21	; 0x04
    8030:	4b 83       	std	Y+3, r20	; 0x03
    8032:	82 2f       	mov	r24, r18
    8034:	90 e0       	ldi	r25, 0x00	; 0
    8036:	9a 83       	std	Y+2, r25	; 0x02
    8038:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    803a:	82 9c       	mul	r8, r2
    803c:	90 01       	movw	r18, r0
    803e:	83 9c       	mul	r8, r3
    8040:	30 0d       	add	r19, r0
    8042:	92 9c       	mul	r9, r2
    8044:	30 0d       	add	r19, r0
    8046:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8048:	ca 01       	movw	r24, r20
    804a:	e9 81       	ldd	r30, Y+1	; 0x01
    804c:	fa 81       	ldd	r31, Y+2	; 0x02
    804e:	8e 1b       	sub	r24, r30
    8050:	9f 0b       	sbc	r25, r31
    8052:	c8 9e       	mul	r12, r24
    8054:	b0 01       	movw	r22, r0
    8056:	c9 9e       	mul	r12, r25
    8058:	70 0d       	add	r23, r0
    805a:	d8 9e       	mul	r13, r24
    805c:	70 0d       	add	r23, r0
    805e:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8060:	62 0f       	add	r22, r18
    8062:	73 1f       	adc	r23, r19
    8064:	88 27       	eor	r24, r24
    8066:	77 fd       	sbrc	r23, 7
    8068:	80 95       	com	r24
    806a:	98 2f       	mov	r25, r24
    806c:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    8070:	2b 01       	movw	r4, r22
    8072:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8074:	20 e0       	ldi	r18, 0x00	; 0
    8076:	30 e0       	ldi	r19, 0x00	; 0
    8078:	a9 01       	movw	r20, r18
    807a:	0e 94 1e 51 	call	0xa23c	; 0xa23c <__cmpsf2>
    807e:	88 23       	and	r24, r24
    8080:	09 f4       	brne	.+2      	; 0x8084 <LBLineIntersect+0xa4>
    8082:	6c c0       	rjmp	.+216    	; 0x815c <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8084:	4b 81       	ldd	r20, Y+3	; 0x03
    8086:	5c 81       	ldd	r21, Y+4	; 0x04
    8088:	4e 19       	sub	r20, r14
    808a:	5f 09       	sbc	r21, r15
    808c:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    808e:	0a 19       	sub	r16, r10
    8090:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8092:	c4 9e       	mul	r12, r20
    8094:	c0 01       	movw	r24, r0
    8096:	c5 9e       	mul	r12, r21
    8098:	90 0d       	add	r25, r0
    809a:	d4 9e       	mul	r13, r20
    809c:	90 0d       	add	r25, r0
    809e:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    80a0:	80 9e       	mul	r8, r16
    80a2:	b0 01       	movw	r22, r0
    80a4:	81 9e       	mul	r8, r17
    80a6:	70 0d       	add	r23, r0
    80a8:	90 9e       	mul	r9, r16
    80aa:	70 0d       	add	r23, r0
    80ac:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    80ae:	68 0f       	add	r22, r24
    80b0:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    80b2:	88 27       	eor	r24, r24
    80b4:	77 fd       	sbrc	r23, 7
    80b6:	80 95       	com	r24
    80b8:	98 2f       	mov	r25, r24
    80ba:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    80be:	a3 01       	movw	r20, r6
    80c0:	92 01       	movw	r18, r4
    80c2:	0e 94 22 51 	call	0xa244	; 0xa244 <__divsf3>
    80c6:	4b 01       	movw	r8, r22
    80c8:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    80ca:	20 e0       	ldi	r18, 0x00	; 0
    80cc:	30 e0       	ldi	r19, 0x00	; 0
    80ce:	a9 01       	movw	r20, r18
    80d0:	0e 94 1e 51 	call	0xa23c	; 0xa23c <__cmpsf2>
    80d4:	87 fd       	sbrc	r24, 7
    80d6:	42 c0       	rjmp	.+132    	; 0x815c <LBLineIntersect+0x17c>
    80d8:	20 e0       	ldi	r18, 0x00	; 0
    80da:	30 e0       	ldi	r19, 0x00	; 0
    80dc:	40 e8       	ldi	r20, 0x80	; 128
    80de:	5f e3       	ldi	r21, 0x3F	; 63
    80e0:	c5 01       	movw	r24, r10
    80e2:	b4 01       	movw	r22, r8
    80e4:	0e 94 68 52 	call	0xa4d0	; 0xa4d0 <__gesf2>
    80e8:	18 16       	cp	r1, r24
    80ea:	c4 f1       	brlt	.+112    	; 0x815c <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    80ec:	2e 9c       	mul	r2, r14
    80ee:	b0 01       	movw	r22, r0
    80f0:	2f 9c       	mul	r2, r15
    80f2:	70 0d       	add	r23, r0
    80f4:	3e 9c       	mul	r3, r14
    80f6:	70 0d       	add	r23, r0
    80f8:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    80fa:	29 81       	ldd	r18, Y+1	; 0x01
    80fc:	3a 81       	ldd	r19, Y+2	; 0x02
    80fe:	8b 81       	ldd	r24, Y+3	; 0x03
    8100:	9c 81       	ldd	r25, Y+4	; 0x04
    8102:	28 1b       	sub	r18, r24
    8104:	39 0b       	sbc	r19, r25
    8106:	20 9f       	mul	r18, r16
    8108:	c0 01       	movw	r24, r0
    810a:	21 9f       	mul	r18, r17
    810c:	90 0d       	add	r25, r0
    810e:	30 9f       	mul	r19, r16
    8110:	90 0d       	add	r25, r0
    8112:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8114:	68 0f       	add	r22, r24
    8116:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8118:	88 27       	eor	r24, r24
    811a:	77 fd       	sbrc	r23, 7
    811c:	80 95       	com	r24
    811e:	98 2f       	mov	r25, r24
    8120:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8124:	a3 01       	movw	r20, r6
    8126:	92 01       	movw	r18, r4
    8128:	0e 94 22 51 	call	0xa244	; 0xa244 <__divsf3>
    812c:	6b 01       	movw	r12, r22
    812e:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8130:	20 e0       	ldi	r18, 0x00	; 0
    8132:	30 e0       	ldi	r19, 0x00	; 0
    8134:	a9 01       	movw	r20, r18
    8136:	0e 94 1e 51 	call	0xa23c	; 0xa23c <__cmpsf2>
    813a:	87 fd       	sbrc	r24, 7
    813c:	0f c0       	rjmp	.+30     	; 0x815c <LBLineIntersect+0x17c>
    813e:	11 e0       	ldi	r17, 0x01	; 1
    8140:	20 e0       	ldi	r18, 0x00	; 0
    8142:	30 e0       	ldi	r19, 0x00	; 0
    8144:	40 e8       	ldi	r20, 0x80	; 128
    8146:	5f e3       	ldi	r21, 0x3F	; 63
    8148:	c7 01       	movw	r24, r14
    814a:	b6 01       	movw	r22, r12
    814c:	0e 94 68 52 	call	0xa4d0	; 0xa4d0 <__gesf2>
    8150:	18 16       	cp	r1, r24
    8152:	0c f0       	brlt	.+2      	; 0x8156 <LBLineIntersect+0x176>
    8154:	10 e0       	ldi	r17, 0x00	; 0
    8156:	81 e0       	ldi	r24, 0x01	; 1
    8158:	81 27       	eor	r24, r17
    815a:	01 c0       	rjmp	.+2      	; 0x815e <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    815c:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    815e:	0f 90       	pop	r0
    8160:	0f 90       	pop	r0
    8162:	0f 90       	pop	r0
    8164:	0f 90       	pop	r0
    8166:	df 91       	pop	r29
    8168:	cf 91       	pop	r28
    816a:	1f 91       	pop	r17
    816c:	0f 91       	pop	r16
    816e:	ff 90       	pop	r15
    8170:	ef 90       	pop	r14
    8172:	df 90       	pop	r13
    8174:	cf 90       	pop	r12
    8176:	bf 90       	pop	r11
    8178:	af 90       	pop	r10
    817a:	9f 90       	pop	r9
    817c:	8f 90       	pop	r8
    817e:	7f 90       	pop	r7
    8180:	6f 90       	pop	r6
    8182:	5f 90       	pop	r5
    8184:	4f 90       	pop	r4
    8186:	3f 90       	pop	r3
    8188:	2f 90       	pop	r2
    818a:	08 95       	ret

0000818c <LBRandom>:

int LBRandom(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    818c:	fc 01       	movw	r30, r24
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
    818e:	90 91 d7 0b 	lds	r25, 0x0BD7
    8192:	2f ef       	ldi	r18, 0xFF	; 255
    8194:	3f e7       	ldi	r19, 0x7F	; 127
    8196:	09 2e       	mov	r0, r25
    8198:	02 c0       	rjmp	.+4      	; 0x819e <LBRandom+0x12>
    819a:	35 95       	asr	r19
    819c:	27 95       	ror	r18
    819e:	0a 94       	dec	r0
    81a0:	e2 f7       	brpl	.-8      	; 0x819a <LBRandom+0xe>
	int delta = to - from;
    81a2:	6e 1b       	sub	r22, r30
    81a4:	7f 0b       	sbc	r23, r31

	shift_count++;
    81a6:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    81a8:	90 31       	cpi	r25, 0x10	; 16
    81aa:	18 f4       	brcc	.+6      	; 0x81b2 <LBRandom+0x26>
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    81ac:	90 93 d7 0b 	sts	0x0BD7, r25
    81b0:	02 c0       	rjmp	.+4      	; 0x81b6 <LBRandom+0x2a>
	if (shift_count >= 16) shift_count = 0;
    81b2:	10 92 d7 0b 	sts	0x0BD7, r1

	return from + ((delta + shifted) % delta);
    81b6:	cb 01       	movw	r24, r22
    81b8:	82 0f       	add	r24, r18
    81ba:	93 1f       	adc	r25, r19
    81bc:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
}
    81c0:	8e 0f       	add	r24, r30
    81c2:	9f 1f       	adc	r25, r31
    81c4:	08 95       	ret

000081c6 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    81c6:	cf 93       	push	r28
    81c8:	df 93       	push	r29
    81ca:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    81cc:	c0 e0       	ldi	r28, 0x00	; 0
    81ce:	cd 17       	cp	r28, r29
    81d0:	31 f0       	breq	.+12     	; 0x81de <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    81d2:	8f ef       	ldi	r24, 0xFF	; 255
    81d4:	9f ef       	ldi	r25, 0xFF	; 255
    81d6:	0e 94 03 31 	call	0x6206	; 0x6206 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    81da:	cf 5f       	subi	r28, 0xFF	; 255
    81dc:	f8 cf       	rjmp	.-16     	; 0x81ce <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    81de:	df 91       	pop	r29
    81e0:	cf 91       	pop	r28
    81e2:	08 95       	ret

000081e4 <init_shot_state>:
	.select_state = SELECTING,
};

/* Initializers */
void init_shot_state(Shot* s, u8 shot_type)
{
    81e4:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    81e6:	84 e6       	ldi	r24, 0x64	; 100
    81e8:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    81ea:	10 82       	st	Z, r1
	s->active = 0;
    81ec:	15 86       	std	Z+13, r1	; 0x0d
	s->shot_type = shot_type;
    81ee:	62 87       	std	Z+10, r22	; 0x0a
	s->rebounds = SHOT_REBOUNDS;
    81f0:	84 e0       	ldi	r24, 0x04	; 4
    81f2:	84 87       	std	Z+12, r24	; 0x0c
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    81f4:	66 23       	and	r22, r22
    81f6:	11 f0       	breq	.+4      	; 0x81fc <init_shot_state+0x18>
    81f8:	85 e0       	ldi	r24, 0x05	; 5
    81fa:	01 c0       	rjmp	.+2      	; 0x81fe <init_shot_state+0x1a>
    81fc:	81 e0       	ldi	r24, 0x01	; 1
    81fe:	83 87       	std	Z+11, r24	; 0x0b
	s->shared.x = OFF_SCREEN;
    8200:	80 e0       	ldi	r24, 0x00	; 0
    8202:	90 e0       	ldi	r25, 0x00	; 0
    8204:	a0 e7       	ldi	r26, 0x70	; 112
    8206:	b3 e4       	ldi	r27, 0x43	; 67
    8208:	82 83       	std	Z+2, r24	; 0x02
    820a:	93 83       	std	Z+3, r25	; 0x03
    820c:	a4 83       	std	Z+4, r26	; 0x04
    820e:	b5 83       	std	Z+5, r27	; 0x05
	s->shared.y = 0;
    8210:	16 82       	std	Z+6, r1	; 0x06
    8212:	17 82       	std	Z+7, r1	; 0x07
    8214:	10 86       	std	Z+8, r1	; 0x08
    8216:	11 86       	std	Z+9, r1	; 0x09
    8218:	08 95       	ret

0000821a <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    821a:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    821c:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    821e:	82 e0       	ldi	r24, 0x02	; 2
    8220:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    8222:	85 e0       	ldi	r24, 0x05	; 5
    8224:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    8226:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    8228:	66 23       	and	r22, r22
    822a:	19 f0       	breq	.+6      	; 0x8232 <set_shot_animations+0x18>
    822c:	88 e3       	ldi	r24, 0x38	; 56
    822e:	98 e2       	ldi	r25, 0x28	; 40
    8230:	02 c0       	rjmp	.+4      	; 0x8236 <set_shot_animations+0x1c>
    8232:	8b e3       	ldi	r24, 0x3B	; 59
    8234:	98 e2       	ldi	r25, 0x28	; 40
    8236:	93 8b       	std	Z+19, r25	; 0x13
    8238:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    823a:	66 23       	and	r22, r22
    823c:	19 f0       	breq	.+6      	; 0x8244 <set_shot_animations+0x2a>
    823e:	85 e3       	ldi	r24, 0x35	; 53
    8240:	98 e2       	ldi	r25, 0x28	; 40
    8242:	02 c0       	rjmp	.+4      	; 0x8248 <set_shot_animations+0x2e>
    8244:	8b e3       	ldi	r24, 0x3B	; 59
    8246:	98 e2       	ldi	r25, 0x28	; 40
    8248:	95 8b       	std	Z+21, r25	; 0x15
    824a:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    824c:	82 e0       	ldi	r24, 0x02	; 2
    824e:	81 8f       	std	Z+25, r24	; 0x19
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    8250:	85 e0       	ldi	r24, 0x05	; 5
    8252:	82 8f       	std	Z+26, r24	; 0x1a
	s->right_anim.frame_count = 0;
    8254:	13 8e       	std	Z+27, r1	; 0x1b
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    8256:	66 23       	and	r22, r22
    8258:	19 f0       	breq	.+6      	; 0x8260 <set_shot_animations+0x46>
    825a:	82 e3       	ldi	r24, 0x32	; 50
    825c:	98 e2       	ldi	r25, 0x28	; 40
    825e:	02 c0       	rjmp	.+4      	; 0x8264 <set_shot_animations+0x4a>
    8260:	8b e3       	ldi	r24, 0x3B	; 59
    8262:	98 e2       	ldi	r25, 0x28	; 40
    8264:	95 8f       	std	Z+29, r25	; 0x1d
    8266:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    8268:	66 23       	and	r22, r22
    826a:	19 f0       	breq	.+6      	; 0x8272 <set_shot_animations+0x58>
    826c:	8f e2       	ldi	r24, 0x2F	; 47
    826e:	98 e2       	ldi	r25, 0x28	; 40
    8270:	02 c0       	rjmp	.+4      	; 0x8276 <set_shot_animations+0x5c>
    8272:	8b e3       	ldi	r24, 0x3B	; 59
    8274:	98 e2       	ldi	r25, 0x28	; 40
    8276:	97 8f       	std	Z+31, r25	; 0x1f
    8278:	86 8f       	std	Z+30, r24	; 0x1e
    827a:	08 95       	ret

0000827c <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    827c:	0f 93       	push	r16
    827e:	1f 93       	push	r17
    8280:	cf 93       	push	r28
    8282:	df 93       	push	r29
    8284:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    8286:	8a e5       	ldi	r24, 0x5A	; 90
    8288:	8c 8b       	std	Y+20, r24	; 0x14
	p->grace_frame = FRAMES_PER_GRACE;
    828a:	88 e7       	ldi	r24, 0x78	; 120
    828c:	8e 8b       	std	Y+22, r24	; 0x16
	p->banter_index = 0;
    828e:	1d 8a       	std	Y+21, r1	; 0x15
	p->score = 0;
    8290:	1e 86       	std	Y+14, r1	; 0x0e
	p->level_score = 0;
    8292:	1f 86       	std	Y+15, r1	; 0x0f
	p->shared.direction = D_UP;
    8294:	18 82       	st	Y, r1
	p->shared.speed = 0;
    8296:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    8298:	82 e3       	ldi	r24, 0x32	; 50
    829a:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    829c:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    829e:	18 8e       	std	Y+24, r1	; 0x18

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    82a0:	fe 01       	movw	r30, r28
    82a2:	e2 5a       	subi	r30, 0xA2	; 162
    82a4:	ff 4f       	sbci	r31, 0xFF	; 255
    82a6:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    82a8:	31 96       	adiw	r30, 0x01	; 1
    82aa:	91 e0       	ldi	r25, 0x01	; 1
    82ac:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    82ae:	31 96       	adiw	r30, 0x01	; 1
    82b0:	85 e0       	ldi	r24, 0x05	; 5
    82b2:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    82b4:	31 96       	adiw	r30, 0x01	; 1
    82b6:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    82b8:	31 96       	adiw	r30, 0x01	; 1
    82ba:	71 83       	std	Z+1, r23	; 0x01
    82bc:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    82be:	36 96       	adiw	r30, 0x06	; 6
    82c0:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    82c2:	31 96       	adiw	r30, 0x01	; 1
    82c4:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    82c6:	31 96       	adiw	r30, 0x01	; 1
    82c8:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    82ca:	31 96       	adiw	r30, 0x01	; 1
    82cc:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    82ce:	31 96       	adiw	r30, 0x01	; 1
    82d0:	51 83       	std	Z+1, r21	; 0x01
    82d2:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    82d4:	36 96       	adiw	r30, 0x06	; 6
    82d6:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    82d8:	31 96       	adiw	r30, 0x01	; 1
    82da:	93 e0       	ldi	r25, 0x03	; 3
    82dc:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    82de:	31 96       	adiw	r30, 0x01	; 1
    82e0:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    82e2:	31 96       	adiw	r30, 0x01	; 1
    82e4:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    82e6:	31 96       	adiw	r30, 0x01	; 1
    82e8:	8a e4       	ldi	r24, 0x4A	; 74
    82ea:	98 e2       	ldi	r25, 0x28	; 40
    82ec:	91 83       	std	Z+1, r25	; 0x01
    82ee:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    82f0:	32 96       	adiw	r30, 0x02	; 2
    82f2:	84 e4       	ldi	r24, 0x44	; 68
    82f4:	98 e2       	ldi	r25, 0x28	; 40
    82f6:	91 83       	std	Z+1, r25	; 0x01
    82f8:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    82fa:	32 96       	adiw	r30, 0x02	; 2
    82fc:	8e e3       	ldi	r24, 0x3E	; 62
    82fe:	98 e2       	ldi	r25, 0x28	; 40
    8300:	91 83       	std	Z+1, r25	; 0x01
    8302:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    8304:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    8306:	8e 01       	movw	r16, r28
    8308:	06 5e       	subi	r16, 0xE6	; 230
    830a:	1f 4f       	sbci	r17, 0xFF	; 255
    830c:	60 e0       	ldi	r22, 0x00	; 0
    830e:	c8 01       	movw	r24, r16
    8310:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    8314:	60 e0       	ldi	r22, 0x00	; 0
    8316:	c8 01       	movw	r24, r16
    8318:	0e 94 0d 41 	call	0x821a	; 0x821a <set_shot_animations>

	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    831c:	ec 96       	adiw	r28, 0x3c	; 60
    831e:	60 e0       	ldi	r22, 0x00	; 0
    8320:	ce 01       	movw	r24, r28
    8322:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    8326:	60 e0       	ldi	r22, 0x00	; 0
    8328:	ce 01       	movw	r24, r28
	}
}
    832a:	df 91       	pop	r29
    832c:	cf 91       	pop	r28
    832e:	1f 91       	pop	r17
    8330:	0f 91       	pop	r16
	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    8332:	0c 94 0d 41 	jmp	0x821a	; 0x821a <set_shot_animations>

00008336 <player_init_shot_state>:
	}
}

void player_init_shot_state(Player* player)
{
    8336:	cf 93       	push	r28
    8338:	df 93       	push	r29
    833a:	ec 01       	movw	r28, r24
	player->active_shots = 0;
    833c:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    833e:	60 e0       	ldi	r22, 0x00	; 0
    8340:	4a 96       	adiw	r24, 0x1a	; 26
    8342:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <init_shot_state>
    8346:	60 e0       	ldi	r22, 0x00	; 0
    8348:	ce 01       	movw	r24, r28
    834a:	cc 96       	adiw	r24, 0x3c	; 60
	}
}
    834c:	df 91       	pop	r29
    834e:	cf 91       	pop	r28
void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    8350:	0c 94 f2 40 	jmp	0x81e4	; 0x81e4 <init_shot_state>

00008354 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    8354:	e1 e5       	ldi	r30, 0x51	; 81
    8356:	fc e0       	ldi	r31, 0x0C	; 12
    8358:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    835a:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    835c:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    835e:	4e e6       	ldi	r20, 0x6E	; 110
    8360:	58 e2       	ldi	r21, 0x28	; 40
    8362:	6a e7       	ldi	r22, 0x7A	; 122
    8364:	78 e2       	ldi	r23, 0x28	; 40
    8366:	85 e5       	ldi	r24, 0x55	; 85
    8368:	9c e0       	ldi	r25, 0x0C	; 12
    836a:	0e 94 3e 41 	call	0x827c	; 0x827c <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    836e:	46 e5       	ldi	r20, 0x56	; 86
    8370:	58 e2       	ldi	r21, 0x28	; 40
    8372:	62 e6       	ldi	r22, 0x62	; 98
    8374:	78 e2       	ldi	r23, 0x28	; 40
    8376:	86 ec       	ldi	r24, 0xC6	; 198
    8378:	9f e0       	ldi	r25, 0x0F	; 15
    837a:	0c 94 3e 41 	jmp	0x827c	; 0x827c <init_player>

0000837e <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    837e:	cf 93       	push	r28
    8380:	df 93       	push	r29
    8382:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    8384:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    8386:	69 89       	ldd	r22, Y+17	; 0x11
    8388:	70 e0       	ldi	r23, 0x00	; 0
    838a:	80 e0       	ldi	r24, 0x00	; 0
    838c:	90 e0       	ldi	r25, 0x00	; 0
    838e:	0e 94 b6 51 	call	0xa36c	; 0xa36c <__floatunsisf>
    8392:	6a 83       	std	Y+2, r22	; 0x02
    8394:	7b 83       	std	Y+3, r23	; 0x03
    8396:	8c 83       	std	Y+4, r24	; 0x04
    8398:	9d 83       	std	Y+5, r25	; 0x05
	player->shared.y = player->spawn_y;
    839a:	6a 89       	ldd	r22, Y+18	; 0x12
    839c:	70 e0       	ldi	r23, 0x00	; 0
    839e:	80 e0       	ldi	r24, 0x00	; 0
    83a0:	90 e0       	ldi	r25, 0x00	; 0
    83a2:	0e 94 b6 51 	call	0xa36c	; 0xa36c <__floatunsisf>
    83a6:	6e 83       	std	Y+6, r22	; 0x06
    83a8:	7f 83       	std	Y+7, r23	; 0x07
    83aa:	88 87       	std	Y+8, r24	; 0x08
    83ac:	99 87       	std	Y+9, r25	; 0x09
	player->shared.direction = D_UP;
    83ae:	18 82       	st	Y, r1
	player->shared.speed = 0;
    83b0:	19 82       	std	Y+1, r1	; 0x01
	
}
    83b2:	df 91       	pop	r29
    83b4:	cf 91       	pop	r28
    83b6:	08 95       	ret

000083b8 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    83b8:	cf 93       	push	r28
    83ba:	df 93       	push	r29
    83bc:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    83be:	bc 01       	movw	r22, r24
    83c0:	88 81       	ld	r24, Y
    83c2:	99 81       	ldd	r25, Y+1	; 0x01
    83c4:	0e 94 14 32 	call	0x6428	; 0x6428 <EepromReadBlock>
	if (status == 0x03)
    83c8:	83 30       	cpi	r24, 0x03	; 3
    83ca:	29 f4       	brne	.+10     	; 0x83d6 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    83cc:	ce 01       	movw	r24, r28
	}
}
    83ce:	df 91       	pop	r29
    83d0:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    83d2:	0c 94 a7 31 	jmp	0x634e	; 0x634e <EepromWriteBlock>
	}
}
    83d6:	df 91       	pop	r29
    83d8:	cf 91       	pop	r28
    83da:	08 95       	ret

000083dc <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    83dc:	61 e0       	ldi	r22, 0x01	; 1
    83de:	83 e0       	ldi	r24, 0x03	; 3
    83e0:	0e 94 ef 3e 	call	0x7dde	; 0x7dde <FadeOut>
	ClearVram();
    83e4:	0e 94 c9 30 	call	0x6192	; 0x6192 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    83e8:	60 e0       	ldi	r22, 0x00	; 0
    83ea:	83 e0       	ldi	r24, 0x03	; 3
    83ec:	0c 94 e3 3e 	jmp	0x7dc6	; 0x7dc6 <FadeIn>

000083f0 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    83f0:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    83f2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    83f4:	40 e0       	ldi	r20, 0x00	; 0
    83f6:	60 e8       	ldi	r22, 0x80	; 128
    83f8:	78 e2       	ldi	r23, 0x28	; 40
    83fa:	8c 2f       	mov	r24, r28
    83fc:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
    8400:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    8402:	cc 30       	cpi	r28, 0x0C	; 12
    8404:	b9 f7       	brne	.-18     	; 0x83f4 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    8406:	cf 91       	pop	r28
    8408:	08 95       	ret

0000840a <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    840a:	cf 92       	push	r12
    840c:	df 92       	push	r13
    840e:	ff 92       	push	r15
    8410:	0f 93       	push	r16
    8412:	1f 93       	push	r17
    8414:	cf 93       	push	r28
    8416:	df 93       	push	r29
    8418:	cd b7       	in	r28, 0x3d	; 61
    841a:	de b7       	in	r29, 0x3e	; 62
    841c:	28 97       	sbiw	r28, 0x08	; 8
    841e:	0f b6       	in	r0, 0x3f	; 63
    8420:	f8 94       	cli
    8422:	de bf       	out	0x3e, r29	; 62
    8424:	0f be       	out	0x3f, r0	; 63
    8426:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    8428:	90 91 63 0c 	lds	r25, 0x0C63
    842c:	80 91 d4 0f 	lds	r24, 0x0FD4
    8430:	98 17       	cp	r25, r24
    8432:	28 f4       	brcc	.+10     	; 0x843e <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    8434:	e5 e5       	ldi	r30, 0x55	; 85
    8436:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    8438:	a6 ec       	ldi	r26, 0xC6	; 198
    843a:	bf e0       	ldi	r27, 0x0F	; 15
    843c:	04 c0       	rjmp	.+8      	; 0x8446 <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    843e:	e6 ec       	ldi	r30, 0xC6	; 198
    8440:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    8442:	a5 e5       	ldi	r26, 0x55	; 85
    8444:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    8446:	1a 96       	adiw	r26, 0x0a	; 10
    8448:	8c 91       	ld	r24, X
    844a:	1a 97       	sbiw	r26, 0x0a	; 10
    844c:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    844e:	82 85       	ldd	r24, Z+10	; 0x0a
    8450:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    8452:	1e 96       	adiw	r26, 0x0e	; 14
    8454:	8c 91       	ld	r24, X
    8456:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    8458:	96 85       	ldd	r25, Z+14	; 0x0e
    845a:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    845c:	f8 2e       	mov	r15, r24
    845e:	f9 1a       	sub	r15, r25
    8460:	00 e0       	ldi	r16, 0x00	; 0
    8462:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    8464:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    8466:	81 11       	cpse	r24, r1
    8468:	08 c0       	rjmp	.+16     	; 0x847a <save_score+0x70>
    846a:	f8 01       	movw	r30, r16
    846c:	ec 5f       	subi	r30, 0xFC	; 252
    846e:	fe 4f       	sbci	r31, 0xFE	; 254
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    8470:	94 81       	ldd	r25, Z+4	; 0x04
    8472:	25 81       	ldd	r18, Z+5	; 0x05
    8474:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    8476:	9f 15       	cp	r25, r15
    8478:	d0 f4       	brcc	.+52     	; 0x84ae <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    847a:	44 e0       	ldi	r20, 0x04	; 4
    847c:	c8 01       	movw	r24, r16
    847e:	8a 5f       	subi	r24, 0xFA	; 250
    8480:	9e 4f       	sbci	r25, 0xFE	; 254
    8482:	6c 01       	movw	r12, r24
    8484:	bc 01       	movw	r22, r24
    8486:	ce 01       	movw	r24, r28
    8488:	05 96       	adiw	r24, 0x05	; 5
    848a:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    848e:	44 e0       	ldi	r20, 0x04	; 4
    8490:	be 01       	movw	r22, r28
    8492:	6f 5f       	subi	r22, 0xFF	; 255
    8494:	7f 4f       	sbci	r23, 0xFF	; 255
    8496:	c6 01       	movw	r24, r12
    8498:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    849c:	44 e0       	ldi	r20, 0x04	; 4
    849e:	be 01       	movw	r22, r28
    84a0:	6b 5f       	subi	r22, 0xFB	; 251
    84a2:	7f 4f       	sbci	r23, 0xFF	; 255
    84a4:	ce 01       	movw	r24, r28
    84a6:	01 96       	adiw	r24, 0x01	; 1
    84a8:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <LBCopyChars>
				saved = 1;
    84ac:	81 e0       	ldi	r24, 0x01	; 1
    84ae:	0c 5f       	subi	r16, 0xFC	; 252
    84b0:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    84b2:	0c 31       	cpi	r16, 0x1C	; 28
    84b4:	11 05       	cpc	r17, r1
    84b6:	b9 f6       	brne	.-82     	; 0x8466 <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    84b8:	84 e0       	ldi	r24, 0x04	; 4
    84ba:	91 e0       	ldi	r25, 0x01	; 1
    84bc:	0e 94 a7 31 	call	0x634e	; 0x634e <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    84c0:	28 96       	adiw	r28, 0x08	; 8
    84c2:	0f b6       	in	r0, 0x3f	; 63
    84c4:	f8 94       	cli
    84c6:	de bf       	out	0x3e, r29	; 62
    84c8:	0f be       	out	0x3f, r0	; 63
    84ca:	cd bf       	out	0x3d, r28	; 61
    84cc:	df 91       	pop	r29
    84ce:	cf 91       	pop	r28
    84d0:	1f 91       	pop	r17
    84d2:	0f 91       	pop	r16
    84d4:	ff 90       	pop	r15
    84d6:	df 90       	pop	r13
    84d8:	cf 90       	pop	r12
    84da:	08 95       	ret

000084dc <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    84dc:	0f 93       	push	r16
    84de:	1f 93       	push	r17
    84e0:	cf 93       	push	r28
    84e2:	df 93       	push	r29
    84e4:	8c 01       	movw	r16, r24
    84e6:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    84e8:	88 81       	ld	r24, Y
    84ea:	81 30       	cpi	r24, 0x01	; 1
    84ec:	69 f1       	breq	.+90     	; 0x8548 <position_shot+0x6c>
    84ee:	88 f0       	brcs	.+34     	; 0x8512 <position_shot+0x36>
    84f0:	82 30       	cpi	r24, 0x02	; 2
    84f2:	b1 f1       	breq	.+108    	; 0x8560 <position_shot+0x84>
    84f4:	83 30       	cpi	r24, 0x03	; 3
    84f6:	09 f0       	breq	.+2      	; 0x84fa <position_shot+0x1e>
    84f8:	5a c0       	rjmp	.+180    	; 0x85ae <position_shot+0xd2>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 16;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    84fa:	20 e0       	ldi	r18, 0x00	; 0
    84fc:	30 e0       	ldi	r19, 0x00	; 0
    84fe:	40 e0       	ldi	r20, 0x00	; 0
    8500:	51 e4       	ldi	r21, 0x41	; 65
    8502:	f8 01       	movw	r30, r16
    8504:	62 81       	ldd	r22, Z+2	; 0x02
    8506:	73 81       	ldd	r23, Z+3	; 0x03
    8508:	84 81       	ldd	r24, Z+4	; 0x04
    850a:	95 81       	ldd	r25, Z+5	; 0x05
    850c:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    8510:	3b c0       	rjmp	.+118    	; 0x8588 <position_shot+0xac>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    8512:	20 e0       	ldi	r18, 0x00	; 0
    8514:	30 e0       	ldi	r19, 0x00	; 0
    8516:	40 e8       	ldi	r20, 0x80	; 128
    8518:	50 e4       	ldi	r21, 0x40	; 64
    851a:	f8 01       	movw	r30, r16
    851c:	62 81       	ldd	r22, Z+2	; 0x02
    851e:	73 81       	ldd	r23, Z+3	; 0x03
    8520:	84 81       	ldd	r24, Z+4	; 0x04
    8522:	95 81       	ldd	r25, Z+5	; 0x05
    8524:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    8528:	6a 83       	std	Y+2, r22	; 0x02
    852a:	7b 83       	std	Y+3, r23	; 0x03
    852c:	8c 83       	std	Y+4, r24	; 0x04
    852e:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y - 8;
    8530:	20 e0       	ldi	r18, 0x00	; 0
    8532:	30 e0       	ldi	r19, 0x00	; 0
    8534:	40 e0       	ldi	r20, 0x00	; 0
    8536:	51 e4       	ldi	r21, 0x41	; 65
    8538:	f8 01       	movw	r30, r16
    853a:	66 81       	ldd	r22, Z+6	; 0x06
    853c:	77 81       	ldd	r23, Z+7	; 0x07
    853e:	80 85       	ldd	r24, Z+8	; 0x08
    8540:	91 85       	ldd	r25, Z+9	; 0x09
    8542:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    8546:	2f c0       	rjmp	.+94     	; 0x85a6 <position_shot+0xca>
			break;
		case D_RIGHT:
			shot->shared.x = player->shared.x + 16;
    8548:	20 e0       	ldi	r18, 0x00	; 0
    854a:	30 e0       	ldi	r19, 0x00	; 0
    854c:	40 e8       	ldi	r20, 0x80	; 128
    854e:	51 e4       	ldi	r21, 0x41	; 65
    8550:	f8 01       	movw	r30, r16
    8552:	62 81       	ldd	r22, Z+2	; 0x02
    8554:	73 81       	ldd	r23, Z+3	; 0x03
    8556:	84 81       	ldd	r24, Z+4	; 0x04
    8558:	95 81       	ldd	r25, Z+5	; 0x05
    855a:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    855e:	14 c0       	rjmp	.+40     	; 0x8588 <position_shot+0xac>
			shot->shared.y = player->shared.y + 4;
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    8560:	20 e0       	ldi	r18, 0x00	; 0
    8562:	30 e0       	ldi	r19, 0x00	; 0
    8564:	40 e8       	ldi	r20, 0x80	; 128
    8566:	50 e4       	ldi	r21, 0x40	; 64
    8568:	f8 01       	movw	r30, r16
    856a:	62 81       	ldd	r22, Z+2	; 0x02
    856c:	73 81       	ldd	r23, Z+3	; 0x03
    856e:	84 81       	ldd	r24, Z+4	; 0x04
    8570:	95 81       	ldd	r25, Z+5	; 0x05
    8572:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    8576:	6a 83       	std	Y+2, r22	; 0x02
    8578:	7b 83       	std	Y+3, r23	; 0x03
    857a:	8c 83       	std	Y+4, r24	; 0x04
    857c:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 16;
    857e:	20 e0       	ldi	r18, 0x00	; 0
    8580:	30 e0       	ldi	r19, 0x00	; 0
    8582:	40 e8       	ldi	r20, 0x80	; 128
    8584:	51 e4       	ldi	r21, 0x41	; 65
    8586:	08 c0       	rjmp	.+16     	; 0x8598 <position_shot+0xbc>
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    8588:	6a 83       	std	Y+2, r22	; 0x02
    858a:	7b 83       	std	Y+3, r23	; 0x03
    858c:	8c 83       	std	Y+4, r24	; 0x04
    858e:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 4;
    8590:	20 e0       	ldi	r18, 0x00	; 0
    8592:	30 e0       	ldi	r19, 0x00	; 0
    8594:	40 e8       	ldi	r20, 0x80	; 128
    8596:	50 e4       	ldi	r21, 0x40	; 64
    8598:	f8 01       	movw	r30, r16
    859a:	66 81       	ldd	r22, Z+6	; 0x06
    859c:	77 81       	ldd	r23, Z+7	; 0x07
    859e:	80 85       	ldd	r24, Z+8	; 0x08
    85a0:	91 85       	ldd	r25, Z+9	; 0x09
    85a2:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    85a6:	6e 83       	std	Y+6, r22	; 0x06
    85a8:	7f 83       	std	Y+7, r23	; 0x07
    85aa:	88 87       	std	Y+8, r24	; 0x08
    85ac:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    85ae:	df 91       	pop	r29
    85b0:	cf 91       	pop	r28
    85b2:	1f 91       	pop	r17
    85b4:	0f 91       	pop	r16
    85b6:	08 95       	ret

000085b8 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    85b8:	0f 93       	push	r16
    85ba:	1f 93       	push	r17
    85bc:	cf 93       	push	r28
    85be:	df 93       	push	r29
    85c0:	8c 01       	movw	r16, r24
    85c2:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    85c4:	ac 01       	movw	r20, r24
    85c6:	45 5f       	subi	r20, 0xF5	; 245
    85c8:	5f 4f       	sbci	r21, 0xFF	; 255
    85ca:	23 e0       	ldi	r18, 0x03	; 3
    85cc:	6e e0       	ldi	r22, 0x0E	; 14
    85ce:	84 e0       	ldi	r24, 0x04	; 4
    85d0:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <LBPrintStr>
	Print(8, 14, strOwns);
    85d4:	4d e4       	ldi	r20, 0x4D	; 77
    85d6:	5a e0       	ldi	r21, 0x0A	; 10
    85d8:	6e e0       	ldi	r22, 0x0E	; 14
    85da:	70 e0       	ldi	r23, 0x00	; 0
    85dc:	88 e0       	ldi	r24, 0x08	; 8
    85de:	90 e0       	ldi	r25, 0x00	; 0
    85e0:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    85e4:	ae 01       	movw	r20, r28
    85e6:	45 5f       	subi	r20, 0xF5	; 245
    85e8:	5f 4f       	sbci	r21, 0xFF	; 255
    85ea:	23 e0       	ldi	r18, 0x03	; 3
    85ec:	6e e0       	ldi	r22, 0x0E	; 14
    85ee:	8d e0       	ldi	r24, 0x0D	; 13
    85f0:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <LBPrintStr>
	Print(17, 14, strBy);
    85f4:	4a e4       	ldi	r20, 0x4A	; 74
    85f6:	5a e0       	ldi	r21, 0x0A	; 10
    85f8:	6e e0       	ldi	r22, 0x0E	; 14
    85fa:	70 e0       	ldi	r23, 0x00	; 0
    85fc:	81 e1       	ldi	r24, 0x11	; 17
    85fe:	90 e0       	ldi	r25, 0x00	; 0
    8600:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    8604:	21 e0       	ldi	r18, 0x01	; 1
    8606:	f8 01       	movw	r30, r16
    8608:	47 85       	ldd	r20, Z+15	; 0x0f
    860a:	6e e0       	ldi	r22, 0x0E	; 14
    860c:	70 e0       	ldi	r23, 0x00	; 0
    860e:	86 e1       	ldi	r24, 0x16	; 22
    8610:	90 e0       	ldi	r25, 0x00	; 0
    8612:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <PrintByte>
	PrintChar(23, 14, '-');
    8616:	4d e2       	ldi	r20, 0x2D	; 45
    8618:	6e e0       	ldi	r22, 0x0E	; 14
    861a:	70 e0       	ldi	r23, 0x00	; 0
    861c:	87 e1       	ldi	r24, 0x17	; 23
    861e:	90 e0       	ldi	r25, 0x00	; 0
    8620:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    8624:	21 e0       	ldi	r18, 0x01	; 1
    8626:	4f 85       	ldd	r20, Y+15	; 0x0f
    8628:	6e e0       	ldi	r22, 0x0E	; 14
    862a:	70 e0       	ldi	r23, 0x00	; 0
    862c:	8a e1       	ldi	r24, 0x1A	; 26
    862e:	90 e0       	ldi	r25, 0x00	; 0
}
    8630:	df 91       	pop	r29
    8632:	cf 91       	pop	r28
    8634:	1f 91       	pop	r17
    8636:	0f 91       	pop	r16
	Print(8, 14, strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    8638:	0c 94 36 3e 	jmp	0x7c6c	; 0x7c6c <PrintByte>

0000863c <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    863c:	cf 93       	push	r28
    863e:	df 93       	push	r29
    8640:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    8642:	ac 01       	movw	r20, r24
    8644:	45 5f       	subi	r20, 0xF5	; 245
    8646:	5f 4f       	sbci	r21, 0xFF	; 255
    8648:	23 e0       	ldi	r18, 0x03	; 3
    864a:	60 e0       	ldi	r22, 0x00	; 0
    864c:	8a e0       	ldi	r24, 0x0A	; 10
    864e:	8c 0f       	add	r24, r28
    8650:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <LBPrintStr>
	Print(x, 0, strScore);
    8654:	d0 e0       	ldi	r29, 0x00	; 0
    8656:	4c ec       	ldi	r20, 0xCC	; 204
    8658:	59 e0       	ldi	r21, 0x09	; 9
    865a:	60 e0       	ldi	r22, 0x00	; 0
    865c:	70 e0       	ldi	r23, 0x00	; 0
    865e:	ce 01       	movw	r24, r28
    8660:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(x, 1, strTotal);
    8664:	45 ec       	ldi	r20, 0xC5	; 197
    8666:	59 e0       	ldi	r21, 0x09	; 9
    8668:	61 e0       	ldi	r22, 0x01	; 1
    866a:	70 e0       	ldi	r23, 0x00	; 0
    866c:	ce 01       	movw	r24, r28
	
}
    866e:	df 91       	pop	r29
    8670:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, strScore);
	Print(x, 1, strTotal);
    8672:	0c 94 69 3e 	jmp	0x7cd2	; 0x7cd2 <Print>

00008676 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    8676:	0f 93       	push	r16
    8678:	1f 93       	push	r17
    867a:	cf 93       	push	r28
    867c:	df 93       	push	r29
    867e:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    8680:	c6 2f       	mov	r28, r22
    8682:	d0 e0       	ldi	r29, 0x00	; 0
    8684:	28 96       	adiw	r28, 0x08	; 8
    8686:	20 e0       	ldi	r18, 0x00	; 0
    8688:	fc 01       	movw	r30, r24
    868a:	47 85       	ldd	r20, Z+15	; 0x0f
    868c:	60 e0       	ldi	r22, 0x00	; 0
    868e:	70 e0       	ldi	r23, 0x00	; 0
    8690:	ce 01       	movw	r24, r28
    8692:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    8696:	20 e0       	ldi	r18, 0x00	; 0
    8698:	f8 01       	movw	r30, r16
    869a:	46 85       	ldd	r20, Z+14	; 0x0e
    869c:	61 e0       	ldi	r22, 0x01	; 1
    869e:	70 e0       	ldi	r23, 0x00	; 0
    86a0:	ce 01       	movw	r24, r28
}
    86a2:	df 91       	pop	r29
    86a4:	cf 91       	pop	r28
    86a6:	1f 91       	pop	r17
    86a8:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    86aa:	0c 94 36 3e 	jmp	0x7c6c	; 0x7c6c <PrintByte>

000086ae <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    86ae:	cf 93       	push	r28
    86b0:	df 93       	push	r29
    86b2:	ec 01       	movw	r28, r24
    86b4:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    86b6:	9c 89       	ldd	r25, Y+20	; 0x14
    86b8:	9a 35       	cpi	r25, 0x5A	; 90
    86ba:	a1 f0       	breq	.+40     	; 0x86e4 <render_banter+0x36>
	{
		if (player->banter_frame == 0)
    86bc:	91 11       	cpse	r25, r1
    86be:	0d c0       	rjmp	.+26     	; 0x86da <render_banter+0x2c>
		{
			Print(banter_x, 2, banter_map[player->banter_index]);
    86c0:	ed 89       	ldd	r30, Y+21	; 0x15
    86c2:	f0 e0       	ldi	r31, 0x00	; 0
    86c4:	ee 0f       	add	r30, r30
    86c6:	ff 1f       	adc	r31, r31
    86c8:	e8 5a       	subi	r30, 0xA8	; 168
    86ca:	fe 4f       	sbci	r31, 0xFE	; 254
    86cc:	40 81       	ld	r20, Z
    86ce:	51 81       	ldd	r21, Z+1	; 0x01
    86d0:	62 e0       	ldi	r22, 0x02	; 2
    86d2:	70 e0       	ldi	r23, 0x00	; 0
    86d4:	90 e0       	ldi	r25, 0x00	; 0
    86d6:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    86da:	8c 89       	ldd	r24, Y+20	; 0x14
    86dc:	8f 5f       	subi	r24, 0xFF	; 255
    86de:	8c 8b       	std	Y+20, r24	; 0x14
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, banter_map[player->banter_index]);
		}
		clear_banter = 1;
    86e0:	41 e0       	ldi	r20, 0x01	; 1
    86e2:	0a c0       	rjmp	.+20     	; 0x86f8 <render_banter+0x4a>
		player->banter_frame++;
	}
	else if (clear_banter)
    86e4:	44 23       	and	r20, r20
    86e6:	41 f0       	breq	.+16     	; 0x86f8 <render_banter+0x4a>
	{
		Print(banter_x, 2, strBanterClear);
    86e8:	43 ed       	ldi	r20, 0xD3	; 211
    86ea:	59 e0       	ldi	r21, 0x09	; 9
    86ec:	62 e0       	ldi	r22, 0x02	; 2
    86ee:	70 e0       	ldi	r23, 0x00	; 0
    86f0:	90 e0       	ldi	r25, 0x00	; 0
    86f2:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
    86f6:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    86f8:	84 2f       	mov	r24, r20
    86fa:	df 91       	pop	r29
    86fc:	cf 91       	pop	r28
    86fe:	08 95       	ret

00008700 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    8700:	ef 92       	push	r14
    8702:	ff 92       	push	r15
    8704:	0f 93       	push	r16
    8706:	1f 93       	push	r17
    8708:	cf 93       	push	r28
    870a:	df 93       	push	r29
    870c:	1f 92       	push	r1
    870e:	cd b7       	in	r28, 0x3d	; 61
    8710:	de b7       	in	r29, 0x3e	; 62
    8712:	7c 01       	movw	r14, r24
    8714:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    8716:	fc 01       	movw	r30, r24
    8718:	66 81       	ldd	r22, Z+6	; 0x06
    871a:	77 81       	ldd	r23, Z+7	; 0x07
    871c:	80 85       	ldd	r24, Z+8	; 0x08
    871e:	91 85       	ldd	r25, Z+9	; 0x09
    8720:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    8724:	46 2f       	mov	r20, r22
    8726:	f7 01       	movw	r30, r14
    8728:	62 81       	ldd	r22, Z+2	; 0x02
    872a:	73 81       	ldd	r23, Z+3	; 0x03
    872c:	84 81       	ldd	r24, Z+4	; 0x04
    872e:	95 81       	ldd	r25, Z+5	; 0x05
    8730:	49 83       	std	Y+1, r20	; 0x01
    8732:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    8736:	02 e0       	ldi	r16, 0x02	; 2
    8738:	22 e0       	ldi	r18, 0x02	; 2
    873a:	49 81       	ldd	r20, Y+1	; 0x01
    873c:	81 2f       	mov	r24, r17
    873e:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
}
    8742:	0f 90       	pop	r0
    8744:	df 91       	pop	r29
    8746:	cf 91       	pop	r28
    8748:	1f 91       	pop	r17
    874a:	0f 91       	pop	r16
    874c:	ff 90       	pop	r15
    874e:	ef 90       	pop	r14
    8750:	08 95       	ret

00008752 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    8752:	cf 92       	push	r12
    8754:	df 92       	push	r13
    8756:	ff 92       	push	r15
    8758:	0f 93       	push	r16
    875a:	1f 93       	push	r17
    875c:	cf 93       	push	r28
    875e:	df 93       	push	r29
    8760:	1f 92       	push	r1
    8762:	cd b7       	in	r28, 0x3d	; 61
    8764:	de b7       	in	r29, 0x3e	; 62
    8766:	fc 01       	movw	r30, r24
    8768:	16 2f       	mov	r17, r22
	if (player->active_shots > 0)
    876a:	80 89       	ldd	r24, Z+16	; 0x10
    876c:	88 23       	and	r24, r24
    876e:	19 f1       	breq	.+70     	; 0x87b6 <render_shot+0x64>
    8770:	6f 01       	movw	r12, r30
    8772:	8c e1       	ldi	r24, 0x1C	; 28
    8774:	c8 0e       	add	r12, r24
    8776:	d1 1c       	adc	r13, r1
    8778:	82 e0       	ldi	r24, 0x02	; 2
    877a:	f8 2e       	mov	r15, r24
    877c:	f6 0e       	add	r15, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    877e:	f6 01       	movw	r30, r12
    8780:	64 81       	ldd	r22, Z+4	; 0x04
    8782:	75 81       	ldd	r23, Z+5	; 0x05
    8784:	86 81       	ldd	r24, Z+6	; 0x06
    8786:	97 81       	ldd	r25, Z+7	; 0x07
    8788:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    878c:	46 2f       	mov	r20, r22
    878e:	f6 01       	movw	r30, r12
    8790:	60 81       	ld	r22, Z
    8792:	71 81       	ldd	r23, Z+1	; 0x01
    8794:	82 81       	ldd	r24, Z+2	; 0x02
    8796:	93 81       	ldd	r25, Z+3	; 0x03
    8798:	49 83       	std	Y+1, r20	; 0x01
    879a:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    879e:	01 e0       	ldi	r16, 0x01	; 1
    87a0:	21 e0       	ldi	r18, 0x01	; 1
    87a2:	49 81       	ldd	r20, Y+1	; 0x01
    87a4:	81 2f       	mov	r24, r17
    87a6:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
			sprite_index++;
    87aa:	1f 5f       	subi	r17, 0xFF	; 255
    87ac:	f2 e2       	ldi	r31, 0x22	; 34
    87ae:	cf 0e       	add	r12, r31
    87b0:	d1 1c       	adc	r13, r1

void render_shot(Player* player, u8 sprite_index)
{
	if (player->active_shots > 0)
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
    87b2:	1f 11       	cpse	r17, r15
    87b4:	e4 cf       	rjmp	.-56     	; 0x877e <render_shot+0x2c>
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
			sprite_index++;
		}
	}
}
    87b6:	0f 90       	pop	r0
    87b8:	df 91       	pop	r29
    87ba:	cf 91       	pop	r28
    87bc:	1f 91       	pop	r17
    87be:	0f 91       	pop	r16
    87c0:	ff 90       	pop	r15
    87c2:	df 90       	pop	r13
    87c4:	cf 90       	pop	r12
    87c6:	08 95       	ret

000087c8 <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    87c8:	ff 92       	push	r15
    87ca:	0f 93       	push	r16
    87cc:	1f 93       	push	r17
    87ce:	cf 93       	push	r28
    87d0:	df 93       	push	r29
    87d2:	1f 92       	push	r1
    87d4:	cd b7       	in	r28, 0x3d	; 61
    87d6:	de b7       	in	r29, 0x3e	; 62
    87d8:	8c 01       	movw	r16, r24
    87da:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->grace_frame != FRAMES_PER_GRACE)
    87dc:	fc 01       	movw	r30, r24
    87de:	96 89       	ldd	r25, Z+22	; 0x16
    87e0:	98 37       	cpi	r25, 0x78	; 120
    87e2:	11 f0       	breq	.+4      	; 0x87e8 <tank_map+0x20>
	{
		player->grace_frame++;
    87e4:	9f 5f       	subi	r25, 0xFF	; 255
    87e6:	96 8b       	std	Z+22, r25	; 0x16
	}
	switch (player->shared.direction)
    87e8:	f8 01       	movw	r30, r16
    87ea:	90 81       	ld	r25, Z
    87ec:	91 30       	cpi	r25, 0x01	; 1
    87ee:	79 f0       	breq	.+30     	; 0x880e <tank_map+0x46>
    87f0:	f8 f0       	brcs	.+62     	; 0x8830 <tank_map+0x68>
    87f2:	92 30       	cpi	r25, 0x02	; 2
    87f4:	99 f0       	breq	.+38     	; 0x881c <tank_map+0x54>
    87f6:	93 30       	cpi	r25, 0x03	; 3
    87f8:	d9 f4       	brne	.+54     	; 0x8830 <tank_map+0x68>
	{
		case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
		case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
		case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
		case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    87fa:	be 01       	movw	r22, r28
    87fc:	6f 5f       	subi	r22, 0xFF	; 255
    87fe:	7f 4f       	sbci	r23, 0xFF	; 255
    8800:	c8 01       	movw	r24, r16
    8802:	88 59       	subi	r24, 0x98	; 152
    8804:	9f 4f       	sbci	r25, 0xFF	; 255
    8806:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <LBGetNextFrame>
    880a:	41 e0       	ldi	r20, 0x01	; 1
    880c:	1a c0       	rjmp	.+52     	; 0x8842 <tank_map+0x7a>
		player->grace_frame++;
	}
	switch (player->shared.direction)
	{
		case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
		case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    880e:	be 01       	movw	r22, r28
    8810:	6f 5f       	subi	r22, 0xFF	; 255
    8812:	7f 4f       	sbci	r23, 0xFF	; 255
    8814:	c8 01       	movw	r24, r16
    8816:	88 59       	subi	r24, 0x98	; 152
    8818:	9f 4f       	sbci	r25, 0xFF	; 255
    881a:	10 c0       	rjmp	.+32     	; 0x883c <tank_map+0x74>
		case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    881c:	be 01       	movw	r22, r28
    881e:	6f 5f       	subi	r22, 0xFF	; 255
    8820:	7f 4f       	sbci	r23, 0xFF	; 255
    8822:	c8 01       	movw	r24, r16
    8824:	82 5a       	subi	r24, 0xA2	; 162
    8826:	9f 4f       	sbci	r25, 0xFF	; 255
    8828:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <LBGetNextFrame>
    882c:	42 e0       	ldi	r20, 0x02	; 2
    882e:	09 c0       	rjmp	.+18     	; 0x8842 <tank_map+0x7a>
		case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
		default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    8830:	be 01       	movw	r22, r28
    8832:	6f 5f       	subi	r22, 0xFF	; 255
    8834:	7f 4f       	sbci	r23, 0xFF	; 255
    8836:	c8 01       	movw	r24, r16
    8838:	82 5a       	subi	r24, 0xA2	; 162
    883a:	9f 4f       	sbci	r25, 0xFF	; 255
    883c:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <LBGetNextFrame>
    8840:	40 e0       	ldi	r20, 0x00	; 0
	}
	if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    8842:	f8 01       	movw	r30, r16
    8844:	26 89       	ldd	r18, Z+22	; 0x16
    8846:	28 37       	cpi	r18, 0x78	; 120
    8848:	31 f0       	breq	.+12     	; 0x8856 <tank_map+0x8e>
    884a:	20 91 d6 0b 	lds	r18, 0x0BD6
    884e:	22 23       	and	r18, r18
    8850:	11 f0       	breq	.+4      	; 0x8856 <tank_map+0x8e>
	{
		t_map = (char*) map_tank_blank;
    8852:	83 e8       	ldi	r24, 0x83	; 131
    8854:	98 e2       	ldi	r25, 0x28	; 40
	}
	toggle_counter--;
    8856:	20 91 03 01 	lds	r18, 0x0103
    885a:	21 50       	subi	r18, 0x01	; 1
	if (toggle_counter == 0)
    885c:	19 f0       	breq	.+6      	; 0x8864 <tank_map+0x9c>
	}
	if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
	{
		t_map = (char*) map_tank_blank;
	}
	toggle_counter--;
    885e:	20 93 03 01 	sts	0x0103, r18
    8862:	09 c0       	rjmp	.+18     	; 0x8876 <tank_map+0xae>
	if (toggle_counter == 0)
	{
		toggle_counter = FRAMES_PER_BLANK;
    8864:	24 e1       	ldi	r18, 0x14	; 20
    8866:	20 93 03 01 	sts	0x0103, r18
		toggle_blank = toggle_blank ^ 1;
    886a:	30 91 d6 0b 	lds	r19, 0x0BD6
    886e:	21 e0       	ldi	r18, 0x01	; 1
    8870:	23 27       	eor	r18, r19
    8872:	20 93 d6 0b 	sts	0x0BD6, r18
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    8876:	bc 01       	movw	r22, r24
    8878:	8f 2d       	mov	r24, r15
    887a:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    887e:	84 e0       	ldi	r24, 0x04	; 4
    8880:	8f 0d       	add	r24, r15
    8882:	0f 90       	pop	r0
    8884:	df 91       	pop	r29
    8886:	cf 91       	pop	r28
    8888:	1f 91       	pop	r17
    888a:	0f 91       	pop	r16
    888c:	ff 90       	pop	r15
    888e:	08 95       	ret

00008890 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    8890:	ef 92       	push	r14
    8892:	ff 92       	push	r15
    8894:	0f 93       	push	r16
    8896:	1f 93       	push	r17
    8898:	cf 93       	push	r28
    889a:	df 93       	push	r29
    889c:	00 d0       	rcall	.+0      	; 0x889e <shot_map+0xe>
    889e:	cd b7       	in	r28, 0x3d	; 61
    88a0:	de b7       	in	r29, 0x3e	; 62
    88a2:	f6 2e       	mov	r15, r22
	char looped = 0;
    88a4:	19 82       	std	Y+1, r1	; 0x01
    88a6:	8c 01       	movw	r16, r24
    88a8:	08 5d       	subi	r16, 0xD8	; 216
    88aa:	1f 4f       	sbci	r17, 0xFF	; 255
    88ac:	82 e0       	ldi	r24, 0x02	; 2
    88ae:	e8 2e       	mov	r14, r24
    88b0:	e6 0e       	add	r14, r22
	char* s_map = 0;
	u8 s_flags = 0;
    88b2:	20 e0       	ldi	r18, 0x00	; 0
    88b4:	f8 01       	movw	r30, r16
    88b6:	31 97       	sbiw	r30, 0x01	; 1
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    88b8:	80 81       	ld	r24, Z
    88ba:	88 23       	and	r24, r24
    88bc:	41 f1       	breq	.+80     	; 0x890e <shot_map+0x7e>
    88be:	3d 97       	sbiw	r30, 0x0d	; 13
		{
			switch (shot->shared.direction)
    88c0:	80 81       	ld	r24, Z
    88c2:	81 30       	cpi	r24, 0x01	; 1
    88c4:	71 f0       	breq	.+28     	; 0x88e2 <shot_map+0x52>
    88c6:	f0 f0       	brcs	.+60     	; 0x8904 <shot_map+0x74>
    88c8:	82 30       	cpi	r24, 0x02	; 2
    88ca:	a1 f0       	breq	.+40     	; 0x88f4 <shot_map+0x64>
    88cc:	83 30       	cpi	r24, 0x03	; 3
    88ce:	d1 f4       	brne	.+52     	; 0x8904 <shot_map+0x74>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    88d0:	be 01       	movw	r22, r28
    88d2:	6f 5f       	subi	r22, 0xFF	; 255
    88d4:	7f 4f       	sbci	r23, 0xFF	; 255
    88d6:	c8 01       	movw	r24, r16
    88d8:	0a 96       	adiw	r24, 0x0a	; 10
    88da:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <LBGetNextFrame>
    88de:	21 e0       	ldi	r18, 0x01	; 1
    88e0:	18 c0       	rjmp	.+48     	; 0x8912 <shot_map+0x82>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    88e2:	be 01       	movw	r22, r28
    88e4:	6f 5f       	subi	r22, 0xFF	; 255
    88e6:	7f 4f       	sbci	r23, 0xFF	; 255
    88e8:	c8 01       	movw	r24, r16
    88ea:	0a 96       	adiw	r24, 0x0a	; 10
    88ec:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <LBGetNextFrame>
    88f0:	20 e0       	ldi	r18, 0x00	; 0
    88f2:	0f c0       	rjmp	.+30     	; 0x8912 <shot_map+0x82>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    88f4:	be 01       	movw	r22, r28
    88f6:	6f 5f       	subi	r22, 0xFF	; 255
    88f8:	7f 4f       	sbci	r23, 0xFF	; 255
    88fa:	c8 01       	movw	r24, r16
    88fc:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <LBGetNextFrame>
    8900:	22 e0       	ldi	r18, 0x02	; 2
    8902:	07 c0       	rjmp	.+14     	; 0x8912 <shot_map+0x82>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    8904:	be 01       	movw	r22, r28
    8906:	6f 5f       	subi	r22, 0xFF	; 255
    8908:	7f 4f       	sbci	r23, 0xFF	; 255
    890a:	c8 01       	movw	r24, r16
    890c:	ef cf       	rjmp	.-34     	; 0x88ec <shot_map+0x5c>
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    890e:	83 e8       	ldi	r24, 0x83	; 131
    8910:	98 e2       	ldi	r25, 0x28	; 40
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    8912:	42 2f       	mov	r20, r18
    8914:	bc 01       	movw	r22, r24
    8916:	8f 2d       	mov	r24, r15
    8918:	2a 83       	std	Y+2, r18	; 0x02
    891a:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
    891e:	f3 94       	inc	r15
    8920:	0e 5d       	subi	r16, 0xDE	; 222
    8922:	1f 4f       	sbci	r17, 0xFF	; 255
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    8924:	2a 81       	ldd	r18, Y+2	; 0x02
    8926:	fe 10       	cpse	r15, r14
    8928:	c5 cf       	rjmp	.-118    	; 0x88b4 <shot_map+0x24>
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
		sprite_index++;
	}
	return sprite_index;
}
    892a:	8f 2d       	mov	r24, r15
    892c:	0f 90       	pop	r0
    892e:	0f 90       	pop	r0
    8930:	df 91       	pop	r29
    8932:	cf 91       	pop	r28
    8934:	1f 91       	pop	r17
    8936:	0f 91       	pop	r16
    8938:	ff 90       	pop	r15
    893a:	ef 90       	pop	r14
    893c:	08 95       	ret

0000893e <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    893e:	cf 93       	push	r28
    8940:	df 93       	push	r29
    8942:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    8944:	88 81       	ld	r24, Y
    8946:	81 11       	cpse	r24, r1
    8948:	15 c0       	rjmp	.+42     	; 0x8974 <recoil_sprite+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    894a:	69 81       	ldd	r22, Y+1	; 0x01
    894c:	70 e0       	ldi	r23, 0x00	; 0
    894e:	80 e0       	ldi	r24, 0x00	; 0
    8950:	90 e0       	ldi	r25, 0x00	; 0
    8952:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    8956:	25 e6       	ldi	r18, 0x65	; 101
    8958:	38 e8       	ldi	r19, 0x88	; 136
    895a:	48 e8       	ldi	r20, 0x88	; 136
    895c:	5c e3       	ldi	r21, 0x3C	; 60
    895e:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    8962:	9b 01       	movw	r18, r22
    8964:	ac 01       	movw	r20, r24
    8966:	6e 81       	ldd	r22, Y+6	; 0x06
    8968:	7f 81       	ldd	r23, Y+7	; 0x07
    896a:	88 85       	ldd	r24, Y+8	; 0x08
    896c:	99 85       	ldd	r25, Y+9	; 0x09
    896e:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    8972:	2d c0       	rjmp	.+90     	; 0x89ce <recoil_sprite+0x90>
	}
	if (sprite->direction == D_RIGHT)
    8974:	81 30       	cpi	r24, 0x01	; 1
    8976:	a9 f4       	brne	.+42     	; 0x89a2 <recoil_sprite+0x64>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    8978:	69 81       	ldd	r22, Y+1	; 0x01
    897a:	70 e0       	ldi	r23, 0x00	; 0
    897c:	80 e0       	ldi	r24, 0x00	; 0
    897e:	90 e0       	ldi	r25, 0x00	; 0
    8980:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    8984:	25 e6       	ldi	r18, 0x65	; 101
    8986:	38 e8       	ldi	r19, 0x88	; 136
    8988:	48 e8       	ldi	r20, 0x88	; 136
    898a:	5c e3       	ldi	r21, 0x3C	; 60
    898c:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    8990:	9b 01       	movw	r18, r22
    8992:	ac 01       	movw	r20, r24
    8994:	6a 81       	ldd	r22, Y+2	; 0x02
    8996:	7b 81       	ldd	r23, Y+3	; 0x03
    8998:	8c 81       	ldd	r24, Y+4	; 0x04
    899a:	9d 81       	ldd	r25, Y+5	; 0x05
    899c:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    89a0:	31 c0       	rjmp	.+98     	; 0x8a04 <recoil_sprite+0xc6>
	}
	if (sprite->direction == D_DOWN)
    89a2:	82 30       	cpi	r24, 0x02	; 2
    89a4:	c9 f4       	brne	.+50     	; 0x89d8 <recoil_sprite+0x9a>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    89a6:	69 81       	ldd	r22, Y+1	; 0x01
    89a8:	70 e0       	ldi	r23, 0x00	; 0
    89aa:	80 e0       	ldi	r24, 0x00	; 0
    89ac:	90 e0       	ldi	r25, 0x00	; 0
    89ae:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    89b2:	25 e6       	ldi	r18, 0x65	; 101
    89b4:	38 e8       	ldi	r19, 0x88	; 136
    89b6:	48 e8       	ldi	r20, 0x88	; 136
    89b8:	5c e3       	ldi	r21, 0x3C	; 60
    89ba:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    89be:	9b 01       	movw	r18, r22
    89c0:	ac 01       	movw	r20, r24
    89c2:	6e 81       	ldd	r22, Y+6	; 0x06
    89c4:	7f 81       	ldd	r23, Y+7	; 0x07
    89c6:	88 85       	ldd	r24, Y+8	; 0x08
    89c8:	99 85       	ldd	r25, Y+9	; 0x09
    89ca:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    89ce:	6e 83       	std	Y+6, r22	; 0x06
    89d0:	7f 83       	std	Y+7, r23	; 0x07
    89d2:	88 87       	std	Y+8, r24	; 0x08
    89d4:	99 87       	std	Y+9, r25	; 0x09
    89d6:	1a c0       	rjmp	.+52     	; 0x8a0c <recoil_sprite+0xce>
	}
	if (sprite->direction == D_LEFT)
    89d8:	83 30       	cpi	r24, 0x03	; 3
    89da:	c1 f4       	brne	.+48     	; 0x8a0c <recoil_sprite+0xce>
	{
		sprite->x += FRAME_TIME * sprite->speed;
    89dc:	69 81       	ldd	r22, Y+1	; 0x01
    89de:	70 e0       	ldi	r23, 0x00	; 0
    89e0:	80 e0       	ldi	r24, 0x00	; 0
    89e2:	90 e0       	ldi	r25, 0x00	; 0
    89e4:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    89e8:	25 e6       	ldi	r18, 0x65	; 101
    89ea:	38 e8       	ldi	r19, 0x88	; 136
    89ec:	48 e8       	ldi	r20, 0x88	; 136
    89ee:	5c e3       	ldi	r21, 0x3C	; 60
    89f0:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    89f4:	9b 01       	movw	r18, r22
    89f6:	ac 01       	movw	r20, r24
    89f8:	6a 81       	ldd	r22, Y+2	; 0x02
    89fa:	7b 81       	ldd	r23, Y+3	; 0x03
    89fc:	8c 81       	ldd	r24, Y+4	; 0x04
    89fe:	9d 81       	ldd	r25, Y+5	; 0x05
    8a00:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    8a04:	6a 83       	std	Y+2, r22	; 0x02
    8a06:	7b 83       	std	Y+3, r23	; 0x03
    8a08:	8c 83       	std	Y+4, r24	; 0x04
    8a0a:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    8a0c:	df 91       	pop	r29
    8a0e:	cf 91       	pop	r28
    8a10:	08 95       	ret

00008a12 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    8a12:	89 52       	subi	r24, 0x29	; 41
    8a14:	93 4f       	sbci	r25, 0xF3	; 243
    8a16:	fc 01       	movw	r30, r24
    8a18:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    8a1a:	81 30       	cpi	r24, 0x01	; 1
    8a1c:	21 f0       	breq	.+8      	; 0x8a26 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    8a1e:	82 30       	cpi	r24, 0x02	; 2
    8a20:	21 f0       	breq	.+8      	; 0x8a2a <solid_square_tile+0x18>

	return 0;
    8a22:	80 e0       	ldi	r24, 0x00	; 0
    8a24:	08 95       	ret
    8a26:	81 e0       	ldi	r24, 0x01	; 1
    8a28:	08 95       	ret
    8a2a:	82 e0       	ldi	r24, 0x02	; 2
}
    8a2c:	08 95       	ret

00008a2e <solid_directional_tile>:

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    8a2e:	5f 92       	push	r5
    8a30:	6f 92       	push	r6
    8a32:	7f 92       	push	r7
    8a34:	8f 92       	push	r8
    8a36:	9f 92       	push	r9
    8a38:	af 92       	push	r10
    8a3a:	bf 92       	push	r11
    8a3c:	cf 92       	push	r12
    8a3e:	df 92       	push	r13
    8a40:	ef 92       	push	r14
    8a42:	ff 92       	push	r15
    8a44:	0f 93       	push	r16
    8a46:	1f 93       	push	r17
    8a48:	cf 93       	push	r28
    8a4a:	df 93       	push	r29
    8a4c:	f6 2e       	mov	r15, r22
    8a4e:	d4 2e       	mov	r13, r20
    8a50:	92 2e       	mov	r9, r18
    8a52:	b0 2e       	mov	r11, r16
	u8 tile = level.level_map[tile_index];
    8a54:	fc 01       	movw	r30, r24
    8a56:	e9 52       	subi	r30, 0x29	; 41
    8a58:	f3 4f       	sbci	r31, 0xF3	; 243
    8a5a:	11 81       	ldd	r17, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    8a5c:	6e e1       	ldi	r22, 0x1E	; 30
    8a5e:	70 e0       	ldi	r23, 0x00	; 0
    8a60:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    8a64:	d8 2f       	mov	r29, r24
    8a66:	dd 0f       	add	r29, r29
    8a68:	dd 0f       	add	r29, r29
    8a6a:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    8a6c:	6d 5f       	subi	r22, 0xFD	; 253
    8a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    8a70:	c6 2f       	mov	r28, r22
    8a72:	cc 0f       	add	r28, r28
    8a74:	cc 0f       	add	r28, r28
    8a76:	cc 0f       	add	r28, r28

	if ((tile == L_TL) || (tile == L_BR))
    8a78:	13 30       	cpi	r17, 0x03	; 3
    8a7a:	11 f0       	breq	.+4      	; 0x8a80 <solid_directional_tile+0x52>
    8a7c:	16 30       	cpi	r17, 0x06	; 6
    8a7e:	a1 f5       	brne	.+104    	; 0x8ae8 <solid_directional_tile+0xba>
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height)) return tile;
    8a80:	6d 2c       	mov	r6, r13
    8a82:	6b 0c       	add	r6, r11
    8a84:	27 e0       	ldi	r18, 0x07	; 7
    8a86:	72 2e       	mov	r7, r18
    8a88:	7d 0e       	add	r7, r29
    8a8a:	37 e0       	ldi	r19, 0x07	; 7
    8a8c:	83 2e       	mov	r8, r19
    8a8e:	8c 0e       	add	r8, r28
    8a90:	a6 2c       	mov	r10, r6
    8a92:	cf 2c       	mov	r12, r15
    8a94:	ed 2c       	mov	r14, r13
    8a96:	0f 2d       	mov	r16, r15
    8a98:	2c 2f       	mov	r18, r28
    8a9a:	47 2d       	mov	r20, r7
    8a9c:	68 2d       	mov	r22, r8
    8a9e:	8d 2f       	mov	r24, r29
    8aa0:	0e 94 f0 3f 	call	0x7fe0	; 0x7fe0 <LBLineIntersect>
    8aa4:	81 11       	cpse	r24, r1
    8aa6:	59 c0       	rjmp	.+178    	; 0x8b5a <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width, y)) return tile;
    8aa8:	5f 2c       	mov	r5, r15
    8aaa:	59 0c       	add	r5, r9
    8aac:	ad 2c       	mov	r10, r13
    8aae:	c5 2c       	mov	r12, r5
    8ab0:	2c 2f       	mov	r18, r28
    8ab2:	47 2d       	mov	r20, r7
    8ab4:	68 2d       	mov	r22, r8
    8ab6:	8d 2f       	mov	r24, r29
    8ab8:	0e 94 f0 3f 	call	0x7fe0	; 0x7fe0 <LBLineIntersect>
    8abc:	81 11       	cpse	r24, r1
    8abe:	4d c0       	rjmp	.+154    	; 0x8b5a <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width, y, x+width, y+height)) return tile;
    8ac0:	a6 2c       	mov	r10, r6
    8ac2:	05 2d       	mov	r16, r5
    8ac4:	2c 2f       	mov	r18, r28
    8ac6:	47 2d       	mov	r20, r7
    8ac8:	68 2d       	mov	r22, r8
    8aca:	8d 2f       	mov	r24, r29
    8acc:	0e 94 f0 3f 	call	0x7fe0	; 0x7fe0 <LBLineIntersect>
    8ad0:	81 11       	cpse	r24, r1
    8ad2:	43 c0       	rjmp	.+134    	; 0x8b5a <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height, x+width, y+height)) return tile;
    8ad4:	e6 2c       	mov	r14, r6
    8ad6:	0f 2d       	mov	r16, r15
    8ad8:	2c 2f       	mov	r18, r28
    8ada:	47 2d       	mov	r20, r7
    8adc:	68 2d       	mov	r22, r8
    8ade:	8d 2f       	mov	r24, r29
    8ae0:	0e 94 f0 3f 	call	0x7fe0	; 0x7fe0 <LBLineIntersect>
    8ae4:	81 11       	cpse	r24, r1
    8ae6:	39 c0       	rjmp	.+114    	; 0x8b5a <solid_directional_tile+0x12c>
	}
	if ((tile == L_TR) || (tile == L_BL))
    8ae8:	8c ef       	ldi	r24, 0xFC	; 252
    8aea:	81 0f       	add	r24, r17
    8aec:	82 30       	cpi	r24, 0x02	; 2
    8aee:	98 f5       	brcc	.+102    	; 0x8b56 <solid_directional_tile+0x128>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height)) return tile;
    8af0:	bd 0c       	add	r11, r13
    8af2:	87 e0       	ldi	r24, 0x07	; 7
    8af4:	78 2e       	mov	r7, r24
    8af6:	7c 0e       	add	r7, r28
    8af8:	97 e0       	ldi	r25, 0x07	; 7
    8afa:	89 2e       	mov	r8, r25
    8afc:	8d 0e       	add	r8, r29
    8afe:	ab 2c       	mov	r10, r11
    8b00:	cf 2c       	mov	r12, r15
    8b02:	ed 2c       	mov	r14, r13
    8b04:	0f 2d       	mov	r16, r15
    8b06:	27 2d       	mov	r18, r7
    8b08:	48 2d       	mov	r20, r8
    8b0a:	6c 2f       	mov	r22, r28
    8b0c:	8d 2f       	mov	r24, r29
    8b0e:	0e 94 f0 3f 	call	0x7fe0	; 0x7fe0 <LBLineIntersect>
    8b12:	81 11       	cpse	r24, r1
    8b14:	22 c0       	rjmp	.+68     	; 0x8b5a <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width, y)) return tile;
    8b16:	9f 0c       	add	r9, r15
    8b18:	ad 2c       	mov	r10, r13
    8b1a:	c9 2c       	mov	r12, r9
    8b1c:	27 2d       	mov	r18, r7
    8b1e:	48 2d       	mov	r20, r8
    8b20:	6c 2f       	mov	r22, r28
    8b22:	8d 2f       	mov	r24, r29
    8b24:	0e 94 f0 3f 	call	0x7fe0	; 0x7fe0 <LBLineIntersect>
    8b28:	81 11       	cpse	r24, r1
    8b2a:	17 c0       	rjmp	.+46     	; 0x8b5a <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width, y, x+width, y+height)) return tile;
    8b2c:	ab 2c       	mov	r10, r11
    8b2e:	09 2d       	mov	r16, r9
    8b30:	27 2d       	mov	r18, r7
    8b32:	48 2d       	mov	r20, r8
    8b34:	6c 2f       	mov	r22, r28
    8b36:	8d 2f       	mov	r24, r29
    8b38:	0e 94 f0 3f 	call	0x7fe0	; 0x7fe0 <LBLineIntersect>
    8b3c:	81 11       	cpse	r24, r1
    8b3e:	0d c0       	rjmp	.+26     	; 0x8b5a <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height, x+width, y+height)) return tile;
    8b40:	eb 2c       	mov	r14, r11
    8b42:	0f 2d       	mov	r16, r15
    8b44:	27 2d       	mov	r18, r7
    8b46:	48 2d       	mov	r20, r8
    8b48:	6c 2f       	mov	r22, r28
    8b4a:	8d 2f       	mov	r24, r29
    8b4c:	0e 94 f0 3f 	call	0x7fe0	; 0x7fe0 <LBLineIntersect>
    8b50:	81 11       	cpse	r24, r1
    8b52:	03 c0       	rjmp	.+6      	; 0x8b5a <solid_directional_tile+0x12c>
    8b54:	03 c0       	rjmp	.+6      	; 0x8b5c <solid_directional_tile+0x12e>
	}
	
	return 0;
    8b56:	80 e0       	ldi	r24, 0x00	; 0
    8b58:	01 c0       	rjmp	.+2      	; 0x8b5c <solid_directional_tile+0x12e>
    8b5a:	81 2f       	mov	r24, r17
}
    8b5c:	df 91       	pop	r29
    8b5e:	cf 91       	pop	r28
    8b60:	1f 91       	pop	r17
    8b62:	0f 91       	pop	r16
    8b64:	ff 90       	pop	r15
    8b66:	ef 90       	pop	r14
    8b68:	df 90       	pop	r13
    8b6a:	cf 90       	pop	r12
    8b6c:	bf 90       	pop	r11
    8b6e:	af 90       	pop	r10
    8b70:	9f 90       	pop	r9
    8b72:	8f 90       	pop	r8
    8b74:	7f 90       	pop	r7
    8b76:	6f 90       	pop	r6
    8b78:	5f 90       	pop	r5
    8b7a:	08 95       	ret

00008b7c <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    8b7c:	af 92       	push	r10
    8b7e:	cf 92       	push	r12
    8b80:	ef 92       	push	r14
    8b82:	0f 93       	push	r16
    8b84:	1f 93       	push	r17
    8b86:	cf 93       	push	r28
    8b88:	df 93       	push	r29
    8b8a:	ec 01       	movw	r28, r24
    8b8c:	8b 01       	movw	r16, r22
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
    8b8e:	fb 01       	movw	r30, r22
    8b90:	66 81       	ldd	r22, Z+6	; 0x06
    8b92:	77 81       	ldd	r23, Z+7	; 0x07
    8b94:	80 85       	ldd	r24, Z+8	; 0x08
    8b96:	91 85       	ldd	r25, Z+9	; 0x09
    8b98:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    8b9c:	e6 2e       	mov	r14, r22
    8b9e:	f8 01       	movw	r30, r16
    8ba0:	62 81       	ldd	r22, Z+2	; 0x02
    8ba2:	73 81       	ldd	r23, Z+3	; 0x03
    8ba4:	84 81       	ldd	r24, Z+4	; 0x04
    8ba6:	95 81       	ldd	r25, Z+5	; 0x05
    8ba8:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    8bac:	06 2f       	mov	r16, r22
    8bae:	6e 81       	ldd	r22, Y+6	; 0x06
    8bb0:	7f 81       	ldd	r23, Y+7	; 0x07
    8bb2:	88 85       	ldd	r24, Y+8	; 0x08
    8bb4:	99 85       	ldd	r25, Y+9	; 0x09
    8bb6:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    8bba:	16 2f       	mov	r17, r22
    8bbc:	6a 81       	ldd	r22, Y+2	; 0x02
    8bbe:	7b 81       	ldd	r23, Y+3	; 0x03
    8bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    8bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    8bc4:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    8bc8:	86 2f       	mov	r24, r22
    8bca:	97 e0       	ldi	r25, 0x07	; 7
    8bcc:	a9 2e       	mov	r10, r25
    8bce:	27 e0       	ldi	r18, 0x07	; 7
    8bd0:	c2 2e       	mov	r12, r18
    8bd2:	2e e0       	ldi	r18, 0x0E	; 14
    8bd4:	4e e0       	ldi	r20, 0x0E	; 14
    8bd6:	61 2f       	mov	r22, r17
    8bd8:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <LBCollides>
    8bdc:	88 23       	and	r24, r24
    8bde:	39 f0       	breq	.+14     	; 0x8bee <player_shot+0x72>
    8be0:	91 e0       	ldi	r25, 0x01	; 1
    8be2:	8e 89       	ldd	r24, Y+22	; 0x16
    8be4:	88 37       	cpi	r24, 0x78	; 120
    8be6:	09 f0       	breq	.+2      	; 0x8bea <player_shot+0x6e>
    8be8:	90 e0       	ldi	r25, 0x00	; 0
    8bea:	89 2f       	mov	r24, r25
    8bec:	01 c0       	rjmp	.+2      	; 0x8bf0 <player_shot+0x74>
    8bee:	80 e0       	ldi	r24, 0x00	; 0
}
    8bf0:	df 91       	pop	r29
    8bf2:	cf 91       	pop	r28
    8bf4:	1f 91       	pop	r17
    8bf6:	0f 91       	pop	r16
    8bf8:	ef 90       	pop	r14
    8bfa:	cf 90       	pop	r12
    8bfc:	af 90       	pop	r10
    8bfe:	08 95       	ret

00008c00 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    8c00:	cf 92       	push	r12
    8c02:	df 92       	push	r13
    8c04:	ef 92       	push	r14
    8c06:	ff 92       	push	r15
    8c08:	cf 93       	push	r28
    8c0a:	df 93       	push	r29
    8c0c:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    8c0e:	ca 80       	ldd	r12, Y+2	; 0x02
    8c10:	db 80       	ldd	r13, Y+3	; 0x03
    8c12:	ec 80       	ldd	r14, Y+4	; 0x04
    8c14:	fd 80       	ldd	r15, Y+5	; 0x05
    8c16:	20 e0       	ldi	r18, 0x00	; 0
    8c18:	30 e0       	ldi	r19, 0x00	; 0
    8c1a:	a9 01       	movw	r20, r18
    8c1c:	c7 01       	movw	r24, r14
    8c1e:	b6 01       	movw	r22, r12
    8c20:	0e 94 1e 51 	call	0xa23c	; 0xa23c <__cmpsf2>
    8c24:	87 fd       	sbrc	r24, 7
    8c26:	31 c0       	rjmp	.+98     	; 0x8c8a <collision_detect_boundries+0x8a>
    8c28:	20 e0       	ldi	r18, 0x00	; 0
    8c2a:	30 e0       	ldi	r19, 0x00	; 0
    8c2c:	40 ee       	ldi	r20, 0xE0	; 224
    8c2e:	50 e4       	ldi	r21, 0x40	; 64
    8c30:	c7 01       	movw	r24, r14
    8c32:	b6 01       	movw	r22, r12
    8c34:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    8c38:	20 e0       	ldi	r18, 0x00	; 0
    8c3a:	30 e0       	ldi	r19, 0x00	; 0
    8c3c:	40 e7       	ldi	r20, 0x70	; 112
    8c3e:	53 e4       	ldi	r21, 0x43	; 67
    8c40:	0e 94 68 52 	call	0xa4d0	; 0xa4d0 <__gesf2>
    8c44:	18 16       	cp	r1, r24
    8c46:	0c f1       	brlt	.+66     	; 0x8c8a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    8c48:	ce 80       	ldd	r12, Y+6	; 0x06
    8c4a:	df 80       	ldd	r13, Y+7	; 0x07
    8c4c:	e8 84       	ldd	r14, Y+8	; 0x08
    8c4e:	f9 84       	ldd	r15, Y+9	; 0x09
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    8c50:	20 e0       	ldi	r18, 0x00	; 0
    8c52:	30 e0       	ldi	r19, 0x00	; 0
    8c54:	40 ec       	ldi	r20, 0xC0	; 192
    8c56:	51 e4       	ldi	r21, 0x41	; 65
    8c58:	c7 01       	movw	r24, r14
    8c5a:	b6 01       	movw	r22, r12
    8c5c:	0e 94 1e 51 	call	0xa23c	; 0xa23c <__cmpsf2>
    8c60:	87 fd       	sbrc	r24, 7
    8c62:	13 c0       	rjmp	.+38     	; 0x8c8a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    8c64:	20 e0       	ldi	r18, 0x00	; 0
    8c66:	30 e0       	ldi	r19, 0x00	; 0
    8c68:	40 ee       	ldi	r20, 0xE0	; 224
    8c6a:	50 e4       	ldi	r21, 0x40	; 64
    8c6c:	c7 01       	movw	r24, r14
    8c6e:	b6 01       	movw	r22, r12
    8c70:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    8c74:	c1 e0       	ldi	r28, 0x01	; 1
    8c76:	20 e0       	ldi	r18, 0x00	; 0
    8c78:	30 e0       	ldi	r19, 0x00	; 0
    8c7a:	40 e6       	ldi	r20, 0x60	; 96
    8c7c:	53 e4       	ldi	r21, 0x43	; 67
    8c7e:	0e 94 68 52 	call	0xa4d0	; 0xa4d0 <__gesf2>
    8c82:	18 16       	cp	r1, r24
    8c84:	1c f0       	brlt	.+6      	; 0x8c8c <collision_detect_boundries+0x8c>
    8c86:	c0 e0       	ldi	r28, 0x00	; 0
    8c88:	01 c0       	rjmp	.+2      	; 0x8c8c <collision_detect_boundries+0x8c>
	{
		return 1;
    8c8a:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    8c8c:	8c 2f       	mov	r24, r28
    8c8e:	df 91       	pop	r29
    8c90:	cf 91       	pop	r28
    8c92:	ff 90       	pop	r15
    8c94:	ef 90       	pop	r14
    8c96:	df 90       	pop	r13
    8c98:	cf 90       	pop	r12
    8c9a:	08 95       	ret

00008c9c <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    8c9c:	ff 92       	push	r15
    8c9e:	0f 93       	push	r16
    8ca0:	1f 93       	push	r17
    8ca2:	cf 93       	push	r28
    8ca4:	df 93       	push	r29
    8ca6:	8c 01       	movw	r16, r24
    8ca8:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    8caa:	20 e0       	ldi	r18, 0x00	; 0
    8cac:	30 e0       	ldi	r19, 0x00	; 0
    8cae:	40 e0       	ldi	r20, 0x00	; 0
    8cb0:	5e e3       	ldi	r21, 0x3E	; 62
    8cb2:	fc 01       	movw	r30, r24
    8cb4:	66 81       	ldd	r22, Z+6	; 0x06
    8cb6:	77 81       	ldd	r23, Z+7	; 0x07
    8cb8:	80 85       	ldd	r24, Z+8	; 0x08
    8cba:	91 85       	ldd	r25, Z+9	; 0x09
    8cbc:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    8cc0:	20 e0       	ldi	r18, 0x00	; 0
    8cc2:	30 e0       	ldi	r19, 0x00	; 0
    8cc4:	40 e4       	ldi	r20, 0x40	; 64
    8cc6:	50 e4       	ldi	r21, 0x40	; 64
    8cc8:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    8ccc:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    8cd0:	fe e1       	ldi	r31, 0x1E	; 30
    8cd2:	6f 9f       	mul	r22, r31
    8cd4:	e0 01       	movw	r28, r0
    8cd6:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    8cd8:	20 e0       	ldi	r18, 0x00	; 0
    8cda:	30 e0       	ldi	r19, 0x00	; 0
    8cdc:	40 e0       	ldi	r20, 0x00	; 0
    8cde:	5e e3       	ldi	r21, 0x3E	; 62
    8ce0:	f8 01       	movw	r30, r16
    8ce2:	62 81       	ldd	r22, Z+2	; 0x02
    8ce4:	73 81       	ldd	r23, Z+3	; 0x03
    8ce6:	84 81       	ldd	r24, Z+4	; 0x04
    8ce8:	95 81       	ldd	r25, Z+5	; 0x05
    8cea:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    8cee:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    8cf2:	c6 0f       	add	r28, r22
    8cf4:	d1 1d       	adc	r29, r1

	if (player->has_over_speed)
    8cf6:	f8 01       	movw	r30, r16
    8cf8:	81 8d       	ldd	r24, Z+25	; 0x19
    8cfa:	88 23       	and	r24, r24
    8cfc:	c9 f0       	breq	.+50     	; 0x8d30 <kill_player+0x94>
	{
		SetTile(hud_x+10, 1, 0);
    8cfe:	40 e0       	ldi	r20, 0x00	; 0
    8d00:	50 e0       	ldi	r21, 0x00	; 0
    8d02:	61 e0       	ldi	r22, 0x01	; 1
    8d04:	8a e0       	ldi	r24, 0x0A	; 10
    8d06:	8f 0d       	add	r24, r15
    8d08:	0e 94 d7 30 	call	0x61ae	; 0x61ae <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    8d0c:	ce 01       	movw	r24, r28
    8d0e:	6e e1       	ldi	r22, 0x1E	; 30
    8d10:	70 e0       	ldi	r23, 0x00	; 0
    8d12:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    8d16:	6c 5f       	subi	r22, 0xFC	; 252
    8d18:	44 ea       	ldi	r20, 0xA4	; 164
    8d1a:	58 e2       	ldi	r21, 0x28	; 40
    8d1c:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    8d20:	87 e0       	ldi	r24, 0x07	; 7
    8d22:	fe 01       	movw	r30, r28
    8d24:	e9 52       	subi	r30, 0x29	; 41
    8d26:	f3 4f       	sbci	r31, 0xF3	; 243
    8d28:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    8d2a:	82 e3       	ldi	r24, 0x32	; 50
    8d2c:	f8 01       	movw	r30, r16
    8d2e:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (player->has_rocket)
    8d30:	f8 01       	movw	r30, r16
    8d32:	80 8d       	ldd	r24, Z+24	; 0x18
    8d34:	88 23       	and	r24, r24
    8d36:	b1 f0       	breq	.+44     	; 0x8d64 <kill_player+0xc8>
	{
		SetTile(hud_x+11, 1, 0);
    8d38:	40 e0       	ldi	r20, 0x00	; 0
    8d3a:	50 e0       	ldi	r21, 0x00	; 0
    8d3c:	61 e0       	ldi	r22, 0x01	; 1
    8d3e:	8b e0       	ldi	r24, 0x0B	; 11
    8d40:	8f 0d       	add	r24, r15
    8d42:	0e 94 d7 30 	call	0x61ae	; 0x61ae <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    8d46:	ce 01       	movw	r24, r28
    8d48:	6e e1       	ldi	r22, 0x1E	; 30
    8d4a:	70 e0       	ldi	r23, 0x00	; 0
    8d4c:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    8d50:	6c 5f       	subi	r22, 0xFC	; 252
    8d52:	4e e9       	ldi	r20, 0x9E	; 158
    8d54:	58 e2       	ldi	r21, 0x28	; 40
    8d56:	8f 5f       	subi	r24, 0xFF	; 255
    8d58:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    8d5c:	c9 52       	subi	r28, 0x29	; 41
    8d5e:	d3 4f       	sbci	r29, 0xF3	; 243
    8d60:	89 e0       	ldi	r24, 0x09	; 9
    8d62:	88 a3       	std	Y+32, r24	; 0x20
	}
	player->has_over_speed = false;
    8d64:	f8 01       	movw	r30, r16
    8d66:	11 8e       	std	Z+25, r1	; 0x19
	player->has_rocket = false;
    8d68:	10 8e       	std	Z+24, r1	; 0x18
	player_spawn(player);
    8d6a:	c8 01       	movw	r24, r16
}
    8d6c:	df 91       	pop	r29
    8d6e:	cf 91       	pop	r28
    8d70:	1f 91       	pop	r17
    8d72:	0f 91       	pop	r16
    8d74:	ff 90       	pop	r15
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
		level.level_map[tile_index +31] = L_ROCKET;
	}
	player->has_over_speed = false;
	player->has_rocket = false;
	player_spawn(player);
    8d76:	0c 94 bf 41 	jmp	0x837e	; 0x837e <player_spawn>

00008d7a <get_interesting_tile_indexes_shot>:
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    8d7a:	fc 01       	movw	r30, r24
    8d7c:	8e e1       	ldi	r24, 0x1E	; 30
    8d7e:	48 9f       	mul	r20, r24
    8d80:	a0 01       	movw	r20, r0
    8d82:	11 24       	eor	r1, r1
    8d84:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    8d86:	64 0f       	add	r22, r20
    8d88:	75 1f       	adc	r23, r21
	player_spawn(player);
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    8d8a:	21 11       	cpse	r18, r1
    8d8c:	05 c0       	rjmp	.+10     	; 0x8d98 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    8d8e:	71 83       	std	Z+1, r23	; 0x01
    8d90:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    8d92:	6f 5f       	subi	r22, 0xFF	; 255
    8d94:	7f 4f       	sbci	r23, 0xFF	; 255
    8d96:	12 c0       	rjmp	.+36     	; 0x8dbc <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    8d98:	21 30       	cpi	r18, 0x01	; 1
    8d9a:	19 f4       	brne	.+6      	; 0x8da2 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    8d9c:	cb 01       	movw	r24, r22
    8d9e:	01 96       	adiw	r24, 0x01	; 1
    8da0:	04 c0       	rjmp	.+8      	; 0x8daa <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    8da2:	22 30       	cpi	r18, 0x02	; 2
    8da4:	39 f4       	brne	.+14     	; 0x8db4 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    8da6:	cb 01       	movw	r24, r22
    8da8:	4e 96       	adiw	r24, 0x1e	; 30
    8daa:	91 83       	std	Z+1, r25	; 0x01
    8dac:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    8dae:	61 5e       	subi	r22, 0xE1	; 225
    8db0:	7f 4f       	sbci	r23, 0xFF	; 255
    8db2:	04 c0       	rjmp	.+8      	; 0x8dbc <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    8db4:	71 83       	std	Z+1, r23	; 0x01
    8db6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    8db8:	62 5e       	subi	r22, 0xE2	; 226
    8dba:	7f 4f       	sbci	r23, 0xFF	; 255
    8dbc:	73 83       	std	Z+3, r23	; 0x03
    8dbe:	62 83       	std	Z+2, r22	; 0x02
    8dc0:	08 95       	ret

00008dc2 <collision_detect_shot>:
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    8dc2:	6f 92       	push	r6
    8dc4:	7f 92       	push	r7
    8dc6:	8f 92       	push	r8
    8dc8:	9f 92       	push	r9
    8dca:	af 92       	push	r10
    8dcc:	bf 92       	push	r11
    8dce:	cf 92       	push	r12
    8dd0:	df 92       	push	r13
    8dd2:	ef 92       	push	r14
    8dd4:	ff 92       	push	r15
    8dd6:	0f 93       	push	r16
    8dd8:	1f 93       	push	r17
    8dda:	cf 93       	push	r28
    8ddc:	df 93       	push	r29
    8dde:	00 d0       	rcall	.+0      	; 0x8de0 <collision_detect_shot+0x1e>
    8de0:	00 d0       	rcall	.+0      	; 0x8de2 <collision_detect_shot+0x20>
    8de2:	1f 92       	push	r1
    8de4:	cd b7       	in	r28, 0x3d	; 61
    8de6:	de b7       	in	r29, 0x3e	; 62
    8de8:	6c 01       	movw	r12, r24
    8dea:	7b 01       	movw	r14, r22
	int tiles[2] = {0, 0};
    8dec:	1a 82       	std	Y+2, r1	; 0x02
    8dee:	19 82       	std	Y+1, r1	; 0x01
    8df0:	1c 82       	std	Y+4, r1	; 0x04
    8df2:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    8df4:	20 e0       	ldi	r18, 0x00	; 0
    8df6:	30 e0       	ldi	r19, 0x00	; 0
    8df8:	40 e0       	ldi	r20, 0x00	; 0
    8dfa:	5e e3       	ldi	r21, 0x3E	; 62
    8dfc:	fb 01       	movw	r30, r22
    8dfe:	66 81       	ldd	r22, Z+6	; 0x06
    8e00:	77 81       	ldd	r23, Z+7	; 0x07
    8e02:	80 85       	ldd	r24, Z+8	; 0x08
    8e04:	91 85       	ldd	r25, Z+9	; 0x09
    8e06:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    8e0a:	20 e0       	ldi	r18, 0x00	; 0
    8e0c:	30 e0       	ldi	r19, 0x00	; 0
    8e0e:	40 e4       	ldi	r20, 0x40	; 64
    8e10:	50 e4       	ldi	r21, 0x40	; 64
    8e12:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    8e16:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    8e1a:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    8e1c:	20 e0       	ldi	r18, 0x00	; 0
    8e1e:	30 e0       	ldi	r19, 0x00	; 0
    8e20:	40 e0       	ldi	r20, 0x00	; 0
    8e22:	5e e3       	ldi	r21, 0x3E	; 62
    8e24:	f7 01       	movw	r30, r14
    8e26:	62 81       	ldd	r22, Z+2	; 0x02
    8e28:	73 81       	ldd	r23, Z+3	; 0x03
    8e2a:	84 81       	ldd	r24, Z+4	; 0x04
    8e2c:	95 81       	ldd	r25, Z+5	; 0x05
    8e2e:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    8e32:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
	u8 y = shot->shared.y / 8 - 3;
	u8 tile;
	u8 hud_x;
	Player* p = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    8e36:	f7 01       	movw	r30, r14
    8e38:	20 81       	ld	r18, Z
    8e3a:	41 2f       	mov	r20, r17
    8e3c:	ce 01       	movw	r24, r28
    8e3e:	01 96       	adiw	r24, 0x01	; 1
    8e40:	0e 94 bd 46 	call	0x8d7a	; 0x8d7a <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    8e44:	c7 01       	movw	r24, r14
    8e46:	0e 94 00 46 	call	0x8c00	; 0x8c00 <collision_detect_boundries>
    8e4a:	81 11       	cpse	r24, r1
    8e4c:	79 c0       	rjmp	.+242    	; 0x8f40 <collision_detect_shot+0x17e>
		player->active_shots--;
		return;
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
    8e4e:	b7 01       	movw	r22, r14
    8e50:	85 e5       	ldi	r24, 0x55	; 85
    8e52:	9c e0       	ldi	r25, 0x0C	; 12
    8e54:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <player_shot>
    8e58:	88 23       	and	r24, r24
    8e5a:	99 f0       	breq	.+38     	; 0x8e82 <collision_detect_shot+0xc0>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    8e5c:	80 91 d5 0f 	lds	r24, 0x0FD5
    8e60:	8f 5f       	subi	r24, 0xFF	; 255
    8e62:	80 93 d5 0f 	sts	0x0FD5, r24
		player2.score++;
    8e66:	80 91 d4 0f 	lds	r24, 0x0FD4
    8e6a:	8f 5f       	subi	r24, 0xFF	; 255
    8e6c:	80 93 d4 0f 	sts	0x0FD4, r24
		render_score(&player2, 15);
    8e70:	6f e0       	ldi	r22, 0x0F	; 15
    8e72:	86 ec       	ldi	r24, 0xC6	; 198
    8e74:	9f e0       	ldi	r25, 0x0F	; 15
    8e76:	0e 94 3b 43 	call	0x8676	; 0x8676 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
	{
		p = &player1;
    8e7a:	05 e5       	ldi	r16, 0x55	; 85
    8e7c:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    8e7e:	b1 2c       	mov	r11, r1
    8e80:	20 c0       	rjmp	.+64     	; 0x8ec2 <collision_detect_shot+0x100>
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
    8e82:	b7 01       	movw	r22, r14
    8e84:	86 ec       	ldi	r24, 0xC6	; 198
    8e86:	9f e0       	ldi	r25, 0x0F	; 15
    8e88:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <player_shot>
    8e8c:	81 11       	cpse	r24, r1
    8e8e:	06 c0       	rjmp	.+12     	; 0x8e9c <collision_detect_shot+0xda>
    8e90:	ce 01       	movw	r24, r28
    8e92:	01 96       	adiw	r24, 0x01	; 1
    8e94:	4c 01       	movw	r8, r24
    8e96:	a1 2c       	mov	r10, r1
    8e98:	b1 2c       	mov	r11, r1
    8e9a:	43 c0       	rjmp	.+134    	; 0x8f22 <collision_detect_shot+0x160>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    8e9c:	80 91 64 0c 	lds	r24, 0x0C64
    8ea0:	8f 5f       	subi	r24, 0xFF	; 255
    8ea2:	80 93 64 0c 	sts	0x0C64, r24
		player1.score++;
    8ea6:	80 91 63 0c 	lds	r24, 0x0C63
    8eaa:	8f 5f       	subi	r24, 0xFF	; 255
    8eac:	80 93 63 0c 	sts	0x0C63, r24
		render_score(&player1, 0);
    8eb0:	60 e0       	ldi	r22, 0x00	; 0
    8eb2:	85 e5       	ldi	r24, 0x55	; 85
    8eb4:	9c e0       	ldi	r25, 0x0C	; 12
    8eb6:	0e 94 3b 43 	call	0x8676	; 0x8676 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
	{
		p = &player2;
    8eba:	06 ec       	ldi	r16, 0xC6	; 198
    8ebc:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    8ebe:	2f e0       	ldi	r18, 0x0F	; 15
    8ec0:	b2 2e       	mov	r11, r18
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    8ec2:	01 15       	cp	r16, r1
    8ec4:	11 05       	cpc	r17, r1
    8ec6:	21 f3       	breq	.-56     	; 0x8e90 <collision_detect_shot+0xce>
	{
		init_shot_state(shot, shot->shot_type);
    8ec8:	f7 01       	movw	r30, r14
    8eca:	62 85       	ldd	r22, Z+10	; 0x0a
    8ecc:	c7 01       	movw	r24, r14
    8ece:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <init_shot_state>
		player->active_shots--;
    8ed2:	f6 01       	movw	r30, r12
    8ed4:	80 89       	ldd	r24, Z+16	; 0x10
    8ed6:	81 50       	subi	r24, 0x01	; 1
    8ed8:	80 8b       	std	Z+16, r24	; 0x10
		kill_player(p, hud_x);
    8eda:	6b 2d       	mov	r22, r11
    8edc:	c8 01       	movw	r24, r16
    8ede:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <kill_player>
		return;
    8ee2:	87 c0       	rjmp	.+270    	; 0x8ff2 <collision_detect_shot+0x230>
				init_shot_state(shot, shot->shot_type);
				player->active_shots--;
			}
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
    8ee4:	f7 01       	movw	r30, r14
    8ee6:	66 81       	ldd	r22, Z+6	; 0x06
    8ee8:	77 81       	ldd	r23, Z+7	; 0x07
    8eea:	80 85       	ldd	r24, Z+8	; 0x08
    8eec:	91 85       	ldd	r25, Z+9	; 0x09
    8eee:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    8ef2:	46 2f       	mov	r20, r22
    8ef4:	f7 01       	movw	r30, r14
    8ef6:	62 81       	ldd	r22, Z+2	; 0x02
    8ef8:	73 81       	ldd	r23, Z+3	; 0x03
    8efa:	84 81       	ldd	r24, Z+4	; 0x04
    8efc:	95 81       	ldd	r25, Z+5	; 0x05
    8efe:	4d 83       	std	Y+5, r20	; 0x05
    8f00:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    8f04:	07 e0       	ldi	r16, 0x07	; 7
    8f06:	27 e0       	ldi	r18, 0x07	; 7
    8f08:	4d 81       	ldd	r20, Y+5	; 0x05
    8f0a:	c3 01       	movw	r24, r6
    8f0c:	0e 94 17 45 	call	0x8a2e	; 0x8a2e <solid_directional_tile>
    8f10:	81 11       	cpse	r24, r1
    8f12:	39 c0       	rjmp	.+114    	; 0x8f86 <collision_detect_shot+0x1c4>
		kill_player(p, hud_x);
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    8f14:	aa 94       	dec	r10
    8f16:	ab 28       	or	r10, r11
    8f18:	09 f4       	brne	.+2      	; 0x8f1c <collision_detect_shot+0x15a>
    8f1a:	6b c0       	rjmp	.+214    	; 0x8ff2 <collision_detect_shot+0x230>
    8f1c:	aa 24       	eor	r10, r10
    8f1e:	a3 94       	inc	r10
    8f20:	b1 2c       	mov	r11, r1
	{
		tile = level.level_map[tiles[i]];
    8f22:	f4 01       	movw	r30, r8
    8f24:	61 90       	ld	r6, Z+
    8f26:	71 90       	ld	r7, Z+
    8f28:	4f 01       	movw	r8, r30
    8f2a:	f3 01       	movw	r30, r6
    8f2c:	e9 52       	subi	r30, 0x29	; 41
    8f2e:	f3 4f       	sbci	r31, 0xF3	; 243
    8f30:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    8f32:	11 23       	and	r17, r17
    8f34:	79 f3       	breq	.-34     	; 0x8f14 <collision_detect_shot+0x152>
		if (tile == L_METAL)
    8f36:	12 30       	cpi	r17, 0x02	; 2
    8f38:	29 f4       	brne	.+10     	; 0x8f44 <collision_detect_shot+0x182>
		{
			recoil_sprite(&shot->shared);
    8f3a:	c7 01       	movw	r24, r14
    8f3c:	0e 94 9f 44 	call	0x893e	; 0x893e <recoil_sprite>
			init_shot_state(shot, shot->shot_type);
    8f40:	f7 01       	movw	r30, r14
    8f42:	4f c0       	rjmp	.+158    	; 0x8fe2 <collision_detect_shot+0x220>
			player->active_shots--;
			break;
		}
		else if (tile == L_BRICK)
    8f44:	11 30       	cpi	r17, 0x01	; 1
    8f46:	71 f6       	brne	.-100    	; 0x8ee4 <collision_detect_shot+0x122>
		{
			recoil_sprite(&shot->shared);
    8f48:	c7 01       	movw	r24, r14
    8f4a:	0e 94 9f 44 	call	0x893e	; 0x893e <recoil_sprite>
			level.level_map[tiles[i]] = L_EMPTY;
    8f4e:	aa 0c       	add	r10, r10
    8f50:	bb 1c       	adc	r11, r11
    8f52:	e1 e0       	ldi	r30, 0x01	; 1
    8f54:	f0 e0       	ldi	r31, 0x00	; 0
    8f56:	ec 0f       	add	r30, r28
    8f58:	fd 1f       	adc	r31, r29
    8f5a:	ea 0d       	add	r30, r10
    8f5c:	fb 1d       	adc	r31, r11
    8f5e:	80 81       	ld	r24, Z
    8f60:	91 81       	ldd	r25, Z+1	; 0x01
    8f62:	fc 01       	movw	r30, r24
    8f64:	e9 52       	subi	r30, 0x29	; 41
    8f66:	f3 4f       	sbci	r31, 0xF3	; 243
    8f68:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    8f6a:	6e e1       	ldi	r22, 0x1E	; 30
    8f6c:	70 e0       	ldi	r23, 0x00	; 0
    8f6e:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    8f72:	6d 5f       	subi	r22, 0xFD	; 253
    8f74:	40 e0       	ldi	r20, 0x00	; 0
    8f76:	50 e0       	ldi	r21, 0x00	; 0
    8f78:	0e 94 d7 30 	call	0x61ae	; 0x61ae <SetTile>
			shot->hit_count--;
    8f7c:	f7 01       	movw	r30, r14
    8f7e:	83 85       	ldd	r24, Z+11	; 0x0b
    8f80:	81 50       	subi	r24, 0x01	; 1
    8f82:	83 87       	std	Z+11, r24	; 0x0b
    8f84:	2c c0       	rjmp	.+88     	; 0x8fde <collision_detect_shot+0x21c>
			}
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
		{
			recoil_sprite(&shot->shared);
    8f86:	c7 01       	movw	r24, r14
    8f88:	0e 94 9f 44 	call	0x893e	; 0x893e <recoil_sprite>
			switch (tile)
    8f8c:	14 30       	cpi	r17, 0x04	; 4
    8f8e:	79 f0       	breq	.+30     	; 0x8fae <collision_detect_shot+0x1ec>
    8f90:	18 f4       	brcc	.+6      	; 0x8f98 <collision_detect_shot+0x1d6>
    8f92:	13 30       	cpi	r17, 0x03	; 3
    8f94:	31 f0       	breq	.+12     	; 0x8fa2 <collision_detect_shot+0x1e0>
    8f96:	1f c0       	rjmp	.+62     	; 0x8fd6 <collision_detect_shot+0x214>
    8f98:	15 30       	cpi	r17, 0x05	; 5
    8f9a:	b9 f0       	breq	.+46     	; 0x8fca <collision_detect_shot+0x208>
    8f9c:	16 30       	cpi	r17, 0x06	; 6
    8f9e:	79 f0       	breq	.+30     	; 0x8fbe <collision_detect_shot+0x1fc>
    8fa0:	1a c0       	rjmp	.+52     	; 0x8fd6 <collision_detect_shot+0x214>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    8fa2:	f7 01       	movw	r30, r14
    8fa4:	80 81       	ld	r24, Z
    8fa6:	81 11       	cpse	r24, r1
    8fa8:	06 c0       	rjmp	.+12     	; 0x8fb6 <collision_detect_shot+0x1f4>
						shot->shared.direction = D_RIGHT;
    8faa:	81 e0       	ldi	r24, 0x01	; 1
    8fac:	05 c0       	rjmp	.+10     	; 0x8fb8 <collision_detect_shot+0x1f6>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    8fae:	f7 01       	movw	r30, r14
    8fb0:	80 81       	ld	r24, Z
    8fb2:	88 23       	and	r24, r24
    8fb4:	41 f0       	breq	.+16     	; 0x8fc6 <collision_detect_shot+0x204>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    8fb6:	82 e0       	ldi	r24, 0x02	; 2
    8fb8:	f7 01       	movw	r30, r14
    8fba:	80 83       	st	Z, r24
    8fbc:	0c c0       	rjmp	.+24     	; 0x8fd6 <collision_detect_shot+0x214>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    8fbe:	f7 01       	movw	r30, r14
    8fc0:	80 81       	ld	r24, Z
    8fc2:	82 30       	cpi	r24, 0x02	; 2
    8fc4:	31 f4       	brne	.+12     	; 0x8fd2 <collision_detect_shot+0x210>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    8fc6:	83 e0       	ldi	r24, 0x03	; 3
    8fc8:	f7 cf       	rjmp	.-18     	; 0x8fb8 <collision_detect_shot+0x1f6>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    8fca:	f7 01       	movw	r30, r14
    8fcc:	80 81       	ld	r24, Z
    8fce:	82 30       	cpi	r24, 0x02	; 2
    8fd0:	61 f3       	breq	.-40     	; 0x8faa <collision_detect_shot+0x1e8>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    8fd2:	f7 01       	movw	r30, r14
    8fd4:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    8fd6:	f7 01       	movw	r30, r14
    8fd8:	84 85       	ldd	r24, Z+12	; 0x0c
    8fda:	81 50       	subi	r24, 0x01	; 1
    8fdc:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->rebounds <= 0)
    8fde:	81 11       	cpse	r24, r1
    8fe0:	08 c0       	rjmp	.+16     	; 0x8ff2 <collision_detect_shot+0x230>
			{
				init_shot_state(shot, shot->shot_type);
    8fe2:	62 85       	ldd	r22, Z+10	; 0x0a
    8fe4:	c7 01       	movw	r24, r14
    8fe6:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <init_shot_state>
				player->active_shots--;
    8fea:	f6 01       	movw	r30, r12
    8fec:	80 89       	ldd	r24, Z+16	; 0x10
    8fee:	81 50       	subi	r24, 0x01	; 1
    8ff0:	80 8b       	std	Z+16, r24	; 0x10
			}
			break;
		}
	}
}
    8ff2:	0f 90       	pop	r0
    8ff4:	0f 90       	pop	r0
    8ff6:	0f 90       	pop	r0
    8ff8:	0f 90       	pop	r0
    8ffa:	0f 90       	pop	r0
    8ffc:	df 91       	pop	r29
    8ffe:	cf 91       	pop	r28
    9000:	1f 91       	pop	r17
    9002:	0f 91       	pop	r16
    9004:	ff 90       	pop	r15
    9006:	ef 90       	pop	r14
    9008:	df 90       	pop	r13
    900a:	cf 90       	pop	r12
    900c:	bf 90       	pop	r11
    900e:	af 90       	pop	r10
    9010:	9f 90       	pop	r9
    9012:	8f 90       	pop	r8
    9014:	7f 90       	pop	r7
    9016:	6f 90       	pop	r6
    9018:	08 95       	ret

0000901a <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    901a:	fc 01       	movw	r30, r24
    901c:	8e e1       	ldi	r24, 0x1E	; 30
    901e:	48 9f       	mul	r20, r24
    9020:	a0 01       	movw	r20, r0
    9022:	11 24       	eor	r1, r1
    9024:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    9026:	64 0f       	add	r22, r20
    9028:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    902a:	21 11       	cpse	r18, r1
    902c:	09 c0       	rjmp	.+18     	; 0x9040 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    902e:	71 83       	std	Z+1, r23	; 0x01
    9030:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9032:	cb 01       	movw	r24, r22
    9034:	01 96       	adiw	r24, 0x01	; 1
    9036:	93 83       	std	Z+3, r25	; 0x03
    9038:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    903a:	6e 5f       	subi	r22, 0xFE	; 254
    903c:	7f 4f       	sbci	r23, 0xFF	; 255
    903e:	1c c0       	rjmp	.+56     	; 0x9078 <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    9040:	21 30       	cpi	r18, 0x01	; 1
    9042:	31 f4       	brne	.+12     	; 0x9050 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    9044:	cb 01       	movw	r24, r22
    9046:	02 96       	adiw	r24, 0x02	; 2
    9048:	91 83       	std	Z+1, r25	; 0x01
    904a:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    904c:	4e 96       	adiw	r24, 0x1e	; 30
    904e:	07 c0       	rjmp	.+14     	; 0x905e <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    9050:	22 30       	cpi	r18, 0x02	; 2
    9052:	51 f4       	brne	.+20     	; 0x9068 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    9054:	cb 01       	movw	r24, r22
    9056:	cc 96       	adiw	r24, 0x3c	; 60
    9058:	91 83       	std	Z+1, r25	; 0x01
    905a:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    905c:	01 96       	adiw	r24, 0x01	; 1
    905e:	93 83       	std	Z+3, r25	; 0x03
    9060:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    9062:	62 5c       	subi	r22, 0xC2	; 194
    9064:	7f 4f       	sbci	r23, 0xFF	; 255
    9066:	08 c0       	rjmp	.+16     	; 0x9078 <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    9068:	71 83       	std	Z+1, r23	; 0x01
    906a:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    906c:	cb 01       	movw	r24, r22
    906e:	4e 96       	adiw	r24, 0x1e	; 30
    9070:	93 83       	std	Z+3, r25	; 0x03
    9072:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    9074:	64 5c       	subi	r22, 0xC4	; 196
    9076:	7f 4f       	sbci	r23, 0xFF	; 255
    9078:	75 83       	std	Z+5, r23	; 0x05
    907a:	64 83       	std	Z+4, r22	; 0x04
    907c:	08 95       	ret

0000907e <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    907e:	2f 92       	push	r2
    9080:	3f 92       	push	r3
    9082:	4f 92       	push	r4
    9084:	5f 92       	push	r5
    9086:	6f 92       	push	r6
    9088:	7f 92       	push	r7
    908a:	8f 92       	push	r8
    908c:	9f 92       	push	r9
    908e:	af 92       	push	r10
    9090:	bf 92       	push	r11
    9092:	cf 92       	push	r12
    9094:	df 92       	push	r13
    9096:	ef 92       	push	r14
    9098:	ff 92       	push	r15
    909a:	0f 93       	push	r16
    909c:	1f 93       	push	r17
    909e:	cf 93       	push	r28
    90a0:	df 93       	push	r29
    90a2:	cd b7       	in	r28, 0x3d	; 61
    90a4:	de b7       	in	r29, 0x3e	; 62
    90a6:	29 97       	sbiw	r28, 0x09	; 9
    90a8:	0f b6       	in	r0, 0x3f	; 63
    90aa:	f8 94       	cli
    90ac:	de bf       	out	0x3e, r29	; 62
    90ae:	0f be       	out	0x3f, r0	; 63
    90b0:	cd bf       	out	0x3d, r28	; 61
    90b2:	7c 01       	movw	r14, r24
    90b4:	3b 01       	movw	r6, r22
    90b6:	14 2f       	mov	r17, r20
    90b8:	22 2e       	mov	r2, r18
	int tiles[3] = {0,0,0};
    90ba:	1a 82       	std	Y+2, r1	; 0x02
    90bc:	19 82       	std	Y+1, r1	; 0x01
    90be:	1c 82       	std	Y+4, r1	; 0x04
    90c0:	1b 82       	std	Y+3, r1	; 0x03
    90c2:	1e 82       	std	Y+6, r1	; 0x06
    90c4:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    90c6:	20 e0       	ldi	r18, 0x00	; 0
    90c8:	30 e0       	ldi	r19, 0x00	; 0
    90ca:	40 e0       	ldi	r20, 0x00	; 0
    90cc:	5e e3       	ldi	r21, 0x3E	; 62
    90ce:	fc 01       	movw	r30, r24
    90d0:	66 81       	ldd	r22, Z+6	; 0x06
    90d2:	77 81       	ldd	r23, Z+7	; 0x07
    90d4:	80 85       	ldd	r24, Z+8	; 0x08
    90d6:	91 85       	ldd	r25, Z+9	; 0x09
    90d8:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    90dc:	20 e0       	ldi	r18, 0x00	; 0
    90de:	30 e0       	ldi	r19, 0x00	; 0
    90e0:	40 e4       	ldi	r20, 0x40	; 64
    90e2:	50 e4       	ldi	r21, 0x40	; 64
    90e4:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    90e8:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    90ec:	d6 2e       	mov	r13, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    90ee:	20 e0       	ldi	r18, 0x00	; 0
    90f0:	30 e0       	ldi	r19, 0x00	; 0
    90f2:	40 e0       	ldi	r20, 0x00	; 0
    90f4:	5e e3       	ldi	r21, 0x3E	; 62
    90f6:	f7 01       	movw	r30, r14
    90f8:	62 81       	ldd	r22, Z+2	; 0x02
    90fa:	73 81       	ldd	r23, Z+3	; 0x03
    90fc:	84 81       	ldd	r24, Z+4	; 0x04
    90fe:	95 81       	ldd	r25, Z+5	; 0x05
    9100:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    9104:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;

	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    9108:	f7 01       	movw	r30, r14
    910a:	20 81       	ld	r18, Z
    910c:	4d 2d       	mov	r20, r13
    910e:	ce 01       	movw	r24, r28
    9110:	01 96       	adiw	r24, 0x01	; 1
    9112:	0e 94 0d 48 	call	0x901a	; 0x901a <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    9116:	c7 01       	movw	r24, r14
    9118:	0e 94 00 46 	call	0x8c00	; 0x8c00 <collision_detect_boundries>
    911c:	88 23       	and	r24, r24
    911e:	31 f0       	breq	.+12     	; 0x912c <collision_detect_player+0xae>
	{
		recoil_sprite(&player->shared);
    9120:	c7 01       	movw	r24, r14
    9122:	0e 94 9f 44 	call	0x893e	; 0x893e <recoil_sprite>
		player->shared.speed = 0;
    9126:	f7 01       	movw	r30, r14
    9128:	11 82       	std	Z+1, r1	; 0x01
    912a:	81 c0       	rjmp	.+258    	; 0x922e <collision_detect_player+0x1b0>
    912c:	ce 01       	movw	r24, r28
    912e:	01 96       	adiw	r24, 0x01	; 1
    9130:	6c 01       	movw	r12, r24
    9132:	4e 01       	movw	r8, r28
    9134:	97 e0       	ldi	r25, 0x07	; 7
    9136:	89 0e       	add	r8, r25
    9138:	91 1c       	adc	r9, r1
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    913a:	8e e1       	ldi	r24, 0x1E	; 30
    913c:	a8 2e       	mov	r10, r24
    913e:	b1 2c       	mov	r11, r1
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    9140:	33 24       	eor	r3, r3
    9142:	33 94       	inc	r3
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    9144:	eb e0       	ldi	r30, 0x0B	; 11
    9146:	e1 0f       	add	r30, r17
    9148:	ef 83       	std	Y+7, r30	; 0x07
		else if (level.level_map[tiles[i]] == L_SPEED)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    914a:	fa e0       	ldi	r31, 0x0A	; 10
    914c:	f1 0f       	add	r31, r17
    914e:	f8 87       	std	Y+8, r31	; 0x08
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_square_tile(tiles[i]) || solid_directional_tile(tiles[i], player->shared.x, player->shared.y, 7, 14))
    9150:	f6 01       	movw	r30, r12
    9152:	40 80       	ld	r4, Z
    9154:	51 80       	ldd	r5, Z+1	; 0x01
    9156:	c2 01       	movw	r24, r4
    9158:	0e 94 09 45 	call	0x8a12	; 0x8a12 <solid_square_tile>
    915c:	81 11       	cpse	r24, r1
    915e:	18 c0       	rjmp	.+48     	; 0x9190 <collision_detect_player+0x112>
    9160:	f7 01       	movw	r30, r14
    9162:	66 81       	ldd	r22, Z+6	; 0x06
    9164:	77 81       	ldd	r23, Z+7	; 0x07
    9166:	80 85       	ldd	r24, Z+8	; 0x08
    9168:	91 85       	ldd	r25, Z+9	; 0x09
    916a:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    916e:	46 2f       	mov	r20, r22
    9170:	f7 01       	movw	r30, r14
    9172:	62 81       	ldd	r22, Z+2	; 0x02
    9174:	73 81       	ldd	r23, Z+3	; 0x03
    9176:	84 81       	ldd	r24, Z+4	; 0x04
    9178:	95 81       	ldd	r25, Z+5	; 0x05
    917a:	49 87       	std	Y+9, r20	; 0x09
    917c:	0e 94 8a 51 	call	0xa314	; 0xa314 <__fixunssfsi>
    9180:	0e e0       	ldi	r16, 0x0E	; 14
    9182:	27 e0       	ldi	r18, 0x07	; 7
    9184:	49 85       	ldd	r20, Y+9	; 0x09
    9186:	c2 01       	movw	r24, r4
    9188:	0e 94 17 45 	call	0x8a2e	; 0x8a2e <solid_directional_tile>
    918c:	88 23       	and	r24, r24
    918e:	31 f0       	breq	.+12     	; 0x919c <collision_detect_player+0x11e>
		{
			recoil_sprite(&player->shared);
    9190:	c7 01       	movw	r24, r14
    9192:	0e 94 9f 44 	call	0x893e	; 0x893e <recoil_sprite>
			player->shared.speed = 0;
    9196:	f7 01       	movw	r30, r14
    9198:	11 82       	std	Z+1, r1	; 0x01
    919a:	42 c0       	rjmp	.+132    	; 0x9220 <collision_detect_player+0x1a2>
		}
		else if (level.level_map[tiles[i]] == L_SPEED)
    919c:	f2 01       	movw	r30, r4
    919e:	e9 52       	subi	r30, 0x29	; 41
    91a0:	f3 4f       	sbci	r31, 0xF3	; 243
    91a2:	81 81       	ldd	r24, Z+1	; 0x01
    91a4:	87 30       	cpi	r24, 0x07	; 7
    91a6:	51 f4       	brne	.+20     	; 0x91bc <collision_detect_player+0x13e>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    91a8:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    91aa:	80 e5       	ldi	r24, 0x50	; 80
    91ac:	f7 01       	movw	r30, r14
    91ae:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    91b0:	31 8e       	std	Z+25, r3	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    91b2:	44 ea       	ldi	r20, 0xA4	; 164
    91b4:	58 e2       	ldi	r21, 0x28	; 40
    91b6:	61 e0       	ldi	r22, 0x01	; 1
    91b8:	88 85       	ldd	r24, Y+8	; 0x08
    91ba:	09 c0       	rjmp	.+18     	; 0x91ce <collision_detect_player+0x150>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
    91bc:	89 30       	cpi	r24, 0x09	; 9
    91be:	a9 f4       	brne	.+42     	; 0x91ea <collision_detect_player+0x16c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    91c0:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    91c2:	f7 01       	movw	r30, r14
    91c4:	30 8e       	std	Z+24, r3	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    91c6:	4e e9       	ldi	r20, 0x9E	; 158
    91c8:	58 e2       	ldi	r21, 0x28	; 40
    91ca:	61 e0       	ldi	r22, 0x01	; 1
    91cc:	8f 81       	ldd	r24, Y+7	; 0x07
    91ce:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    91d2:	f6 01       	movw	r30, r12
    91d4:	80 81       	ld	r24, Z
    91d6:	91 81       	ldd	r25, Z+1	; 0x01
    91d8:	b5 01       	movw	r22, r10
    91da:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    91de:	6d 5f       	subi	r22, 0xFD	; 253
    91e0:	40 e0       	ldi	r20, 0x00	; 0
    91e2:	50 e0       	ldi	r21, 0x00	; 0
    91e4:	0e 94 d7 30 	call	0x61ae	; 0x61ae <SetTile>
    91e8:	1b c0       	rjmp	.+54     	; 0x9220 <collision_detect_player+0x1a2>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
    91ea:	88 30       	cpi	r24, 0x08	; 8
    91ec:	c9 f4       	brne	.+50     	; 0x9220 <collision_detect_player+0x1a2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    91ee:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    91f0:	c2 01       	movw	r24, r4
    91f2:	b5 01       	movw	r22, r10
    91f4:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    91f8:	6d 5f       	subi	r22, 0xFD	; 253
    91fa:	40 e0       	ldi	r20, 0x00	; 0
    91fc:	50 e0       	ldi	r21, 0x00	; 0
    91fe:	0e 94 d7 30 	call	0x61ae	; 0x61ae <SetTile>
			player->level_score++;
    9202:	f7 01       	movw	r30, r14
    9204:	87 85       	ldd	r24, Z+15	; 0x0f
    9206:	8f 5f       	subi	r24, 0xFF	; 255
    9208:	87 87       	std	Z+15, r24	; 0x0f
			player->score++;
    920a:	86 85       	ldd	r24, Z+14	; 0x0e
    920c:	8f 5f       	subi	r24, 0xFF	; 255
    920e:	86 87       	std	Z+14, r24	; 0x0e
			render_score(player, hud_x);
    9210:	61 2f       	mov	r22, r17
    9212:	c7 01       	movw	r24, r14
    9214:	0e 94 3b 43 	call	0x8676	; 0x8676 <render_score>
			kill_player(other_player, other_player_hud_x);
    9218:	62 2d       	mov	r22, r2
    921a:	c3 01       	movw	r24, r6
    921c:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <kill_player>
    9220:	f2 e0       	ldi	r31, 0x02	; 2
    9222:	cf 0e       	add	r12, r31
    9224:	d1 1c       	adc	r13, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    9226:	c8 14       	cp	r12, r8
    9228:	d9 04       	cpc	r13, r9
    922a:	09 f0       	breq	.+2      	; 0x922e <collision_detect_player+0x1b0>
    922c:	91 cf       	rjmp	.-222    	; 0x9150 <collision_detect_player+0xd2>
			player->score++;
			render_score(player, hud_x);
			kill_player(other_player, other_player_hud_x);
		}
	}
}
    922e:	29 96       	adiw	r28, 0x09	; 9
    9230:	0f b6       	in	r0, 0x3f	; 63
    9232:	f8 94       	cli
    9234:	de bf       	out	0x3e, r29	; 62
    9236:	0f be       	out	0x3f, r0	; 63
    9238:	cd bf       	out	0x3d, r28	; 61
    923a:	df 91       	pop	r29
    923c:	cf 91       	pop	r28
    923e:	1f 91       	pop	r17
    9240:	0f 91       	pop	r16
    9242:	ff 90       	pop	r15
    9244:	ef 90       	pop	r14
    9246:	df 90       	pop	r13
    9248:	cf 90       	pop	r12
    924a:	bf 90       	pop	r11
    924c:	af 90       	pop	r10
    924e:	9f 90       	pop	r9
    9250:	8f 90       	pop	r8
    9252:	7f 90       	pop	r7
    9254:	6f 90       	pop	r6
    9256:	5f 90       	pop	r5
    9258:	4f 90       	pop	r4
    925a:	3f 90       	pop	r3
    925c:	2f 90       	pop	r2
    925e:	08 95       	ret

00009260 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    9260:	bf 92       	push	r11
    9262:	cf 92       	push	r12
    9264:	df 92       	push	r13
    9266:	ef 92       	push	r14
    9268:	ff 92       	push	r15
    926a:	0f 93       	push	r16
    926c:	1f 93       	push	r17
    926e:	cf 93       	push	r28
    9270:	df 93       	push	r29
    9272:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    9274:	c0 e0       	ldi	r28, 0x00	; 0
    9276:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    9278:	0e e1       	ldi	r16, 0x1E	; 30
    927a:	10 e0       	ldi	r17, 0x00	; 0
    927c:	ce 01       	movw	r24, r28
    927e:	b8 01       	movw	r22, r16
    9280:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
		y = 3 + i / 30;
    9284:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    9286:	bb 20       	and	r11, r11
    9288:	19 f0       	breq	.+6      	; 0x9290 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    928a:	4d ea       	ldi	r20, 0xAD	; 173
    928c:	58 e2       	ldi	r21, 0x28	; 40
    928e:	11 c0       	rjmp	.+34     	; 0x92b2 <load_level_tiles+0x52>
    9290:	fe 01       	movw	r30, r28
    9292:	e9 52       	subi	r30, 0x29	; 41
    9294:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    9296:	e1 81       	ldd	r30, Z+1	; 0x01
    9298:	ce 2e       	mov	r12, r30
    929a:	d1 2c       	mov	r13, r1
    929c:	f6 01       	movw	r30, r12
    929e:	31 97       	sbiw	r30, 0x01	; 1
    92a0:	e9 30       	cpi	r30, 0x09	; 9
    92a2:	f1 05       	cpc	r31, r1
    92a4:	08 f5       	brcc	.+66     	; 0x92e8 <load_level_tiles+0x88>
    92a6:	e8 5c       	subi	r30, 0xC8	; 200
    92a8:	ff 4f       	sbci	r31, 0xFF	; 255
    92aa:	0c 94 b3 50 	jmp	0xa166	; 0xa166 <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    92ae:	4a ea       	ldi	r20, 0xAA	; 170
    92b0:	58 e2       	ldi	r21, 0x28	; 40
    92b2:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <DrawMap2>
    92b6:	1c c0       	rjmp	.+56     	; 0x92f0 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    92b8:	47 ea       	ldi	r20, 0xA7	; 167
    92ba:	58 e2       	ldi	r21, 0x28	; 40
    92bc:	fa cf       	rjmp	.-12     	; 0x92b2 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    92be:	42 e9       	ldi	r20, 0x92	; 146
    92c0:	58 e2       	ldi	r21, 0x28	; 40
    92c2:	f7 cf       	rjmp	.-18     	; 0x92b2 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    92c4:	4c e8       	ldi	r20, 0x8C	; 140
    92c6:	58 e2       	ldi	r21, 0x28	; 40
    92c8:	f4 cf       	rjmp	.-24     	; 0x92b2 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    92ca:	49 e8       	ldi	r20, 0x89	; 137
    92cc:	58 e2       	ldi	r21, 0x28	; 40
    92ce:	f1 cf       	rjmp	.-30     	; 0x92b2 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    92d0:	4f e8       	ldi	r20, 0x8F	; 143
    92d2:	58 e2       	ldi	r21, 0x28	; 40
    92d4:	ee cf       	rjmp	.-36     	; 0x92b2 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    92d6:	44 ea       	ldi	r20, 0xA4	; 164
    92d8:	58 e2       	ldi	r21, 0x28	; 40
    92da:	eb cf       	rjmp	.-42     	; 0x92b2 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    92dc:	41 ea       	ldi	r20, 0xA1	; 161
    92de:	58 e2       	ldi	r21, 0x28	; 40
    92e0:	e8 cf       	rjmp	.-48     	; 0x92b2 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    92e2:	4e e9       	ldi	r20, 0x9E	; 158
    92e4:	58 e2       	ldi	r21, 0x28	; 40
    92e6:	e5 cf       	rjmp	.-54     	; 0x92b2 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    92e8:	40 e0       	ldi	r20, 0x00	; 0
    92ea:	50 e0       	ldi	r21, 0x00	; 0
    92ec:	0e 94 d7 30 	call	0x61ae	; 0x61ae <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    92f0:	21 96       	adiw	r28, 0x01	; 1
    92f2:	ce 3e       	cpi	r28, 0xEE	; 238
    92f4:	82 e0       	ldi	r24, 0x02	; 2
    92f6:	d8 07       	cpc	r29, r24
    92f8:	09 f6       	brne	.-126    	; 0x927c <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    92fa:	df 91       	pop	r29
    92fc:	cf 91       	pop	r28
    92fe:	1f 91       	pop	r17
    9300:	0f 91       	pop	r16
    9302:	ff 90       	pop	r15
    9304:	ef 90       	pop	r14
    9306:	df 90       	pop	r13
    9308:	cf 90       	pop	r12
    930a:	bf 90       	pop	r11
    930c:	08 95       	ret

0000930e <load_level>:

void load_level(int level_number)
{
    930e:	9f 92       	push	r9
    9310:	af 92       	push	r10
    9312:	bf 92       	push	r11
    9314:	cf 92       	push	r12
    9316:	df 92       	push	r13
    9318:	ef 92       	push	r14
    931a:	ff 92       	push	r15
    931c:	0f 93       	push	r16
    931e:	1f 93       	push	r17
    9320:	cf 93       	push	r28
    9322:	df 93       	push	r29
    9324:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    9326:	8e ee       	ldi	r24, 0xEE	; 238
    9328:	92 e0       	ldi	r25, 0x02	; 2
    932a:	c8 9f       	mul	r28, r24
    932c:	70 01       	movw	r14, r0
    932e:	c9 9f       	mul	r28, r25
    9330:	f0 0c       	add	r15, r0
    9332:	d8 9f       	mul	r29, r24
    9334:	f0 0c       	add	r15, r0
    9336:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    9338:	83 e0       	ldi	r24, 0x03	; 3
    933a:	80 93 51 0c 	sts	0x0C51, r24
	clear_sprites();
    933e:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <clear_sprites>
	game.current_level = level_number;
    9342:	c0 93 52 0c 	sts	0x0C52, r28
    9346:	88 ed       	ldi	r24, 0xD8	; 216
    9348:	c8 2e       	mov	r12, r24
    934a:	8c e0       	ldi	r24, 0x0C	; 12
    934c:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    934e:	c0 e0       	ldi	r28, 0x00	; 0
    9350:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    9352:	0e e1       	ldi	r16, 0x1E	; 30
    9354:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    9356:	92 e3       	ldi	r25, 0x32	; 50
    9358:	99 2e       	mov	r9, r25
    935a:	fe 01       	movw	r30, r28
    935c:	ee 0d       	add	r30, r14
    935e:	ff 1d       	adc	r31, r15
    9360:	ed 51       	subi	r30, 0x1D	; 29
    9362:	f5 4f       	sbci	r31, 0xF5	; 245
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    9364:	e4 91       	lpm	r30, Z
    9366:	56 01       	movw	r10, r12
    9368:	d6 01       	movw	r26, r12
    936a:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    936c:	e8 35       	cpi	r30, 0x58	; 88
    936e:	01 f5       	brne	.+64     	; 0x93b0 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    9370:	ce 01       	movw	r24, r28
    9372:	b8 01       	movw	r22, r16
    9374:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    9378:	88 0f       	add	r24, r24
    937a:	88 0f       	add	r24, r24
    937c:	88 0f       	add	r24, r24
    937e:	80 93 66 0c 	sts	0x0C66, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    9382:	6d 5f       	subi	r22, 0xFD	; 253
    9384:	7f 4f       	sbci	r23, 0xFF	; 255
    9386:	66 0f       	add	r22, r22
    9388:	66 0f       	add	r22, r22
    938a:	66 0f       	add	r22, r22
    938c:	60 93 67 0c 	sts	0x0C67, r22
			player1.level_score = 0;
    9390:	10 92 64 0c 	sts	0x0C64, r1
			player1.has_over_speed = false;
    9394:	10 92 6e 0c 	sts	0x0C6E, r1
			player1.has_rocket = false;
    9398:	10 92 6d 0c 	sts	0x0C6D, r1
			player1.max_speed = MAX_SPEED;
    939c:	90 92 6c 0c 	sts	0x0C6C, r9
			player_init_shot_state(&player1);
    93a0:	85 e5       	ldi	r24, 0x55	; 85
    93a2:	9c e0       	ldi	r25, 0x0C	; 12
    93a4:	0e 94 9b 41 	call	0x8336	; 0x8336 <player_init_shot_state>
			player_spawn(&player1);
    93a8:	85 e5       	ldi	r24, 0x55	; 85
    93aa:	9c e0       	ldi	r25, 0x0C	; 12
    93ac:	0e 94 bf 41 	call	0x837e	; 0x837e <player_spawn>
    93b0:	bf ef       	ldi	r27, 0xFF	; 255
    93b2:	cb 1a       	sub	r12, r27
    93b4:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    93b6:	f5 01       	movw	r30, r10
    93b8:	80 81       	ld	r24, Z
    93ba:	83 36       	cpi	r24, 0x63	; 99
    93bc:	01 f5       	brne	.+64     	; 0x93fe <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    93be:	ce 01       	movw	r24, r28
    93c0:	b8 01       	movw	r22, r16
    93c2:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    93c6:	88 0f       	add	r24, r24
    93c8:	88 0f       	add	r24, r24
    93ca:	88 0f       	add	r24, r24
    93cc:	80 93 d7 0f 	sts	0x0FD7, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    93d0:	6d 5f       	subi	r22, 0xFD	; 253
    93d2:	7f 4f       	sbci	r23, 0xFF	; 255
    93d4:	66 0f       	add	r22, r22
    93d6:	66 0f       	add	r22, r22
    93d8:	66 0f       	add	r22, r22
    93da:	60 93 d8 0f 	sts	0x0FD8, r22
			player2.level_score = 0;
    93de:	10 92 d5 0f 	sts	0x0FD5, r1
			player2.has_over_speed = false;
    93e2:	10 92 df 0f 	sts	0x0FDF, r1
			player2.has_rocket = false;
    93e6:	10 92 de 0f 	sts	0x0FDE, r1
			player2.max_speed = MAX_SPEED;
    93ea:	90 92 dd 0f 	sts	0x0FDD, r9
			player_init_shot_state(&player2);
    93ee:	86 ec       	ldi	r24, 0xC6	; 198
    93f0:	9f e0       	ldi	r25, 0x0F	; 15
    93f2:	0e 94 9b 41 	call	0x8336	; 0x8336 <player_init_shot_state>
			player_spawn(&player2);
    93f6:	86 ec       	ldi	r24, 0xC6	; 198
    93f8:	9f e0       	ldi	r25, 0x0F	; 15
    93fa:	0e 94 bf 41 	call	0x837e	; 0x837e <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    93fe:	21 96       	adiw	r28, 0x01	; 1
    9400:	ce 3e       	cpi	r28, 0xEE	; 238
    9402:	f2 e0       	ldi	r31, 0x02	; 2
    9404:	df 07       	cpc	r29, r31
    9406:	09 f0       	breq	.+2      	; 0x940a <load_level+0xfc>
    9408:	a8 cf       	rjmp	.-176    	; 0x935a <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    940a:	60 e0       	ldi	r22, 0x00	; 0
    940c:	85 e5       	ldi	r24, 0x55	; 85
    940e:	9c e0       	ldi	r25, 0x0C	; 12
    9410:	0e 94 1e 43 	call	0x863c	; 0x863c <render_hud>
	render_hud(&player2, 15);
    9414:	6f e0       	ldi	r22, 0x0F	; 15
    9416:	86 ec       	ldi	r24, 0xC6	; 198
    9418:	9f e0       	ldi	r25, 0x0F	; 15
    941a:	0e 94 1e 43 	call	0x863c	; 0x863c <render_hud>
	render_score(&player1, 0);
    941e:	60 e0       	ldi	r22, 0x00	; 0
    9420:	85 e5       	ldi	r24, 0x55	; 85
    9422:	9c e0       	ldi	r25, 0x0C	; 12
    9424:	0e 94 3b 43 	call	0x8676	; 0x8676 <render_score>
	render_score(&player2, 15);
    9428:	6f e0       	ldi	r22, 0x0F	; 15
    942a:	86 ec       	ldi	r24, 0xC6	; 198
    942c:	9f e0       	ldi	r25, 0x0F	; 15
    942e:	0e 94 3b 43 	call	0x8676	; 0x8676 <render_score>
	Print(14, 0, strVertSep);
    9432:	49 e8       	ldi	r20, 0x89	; 137
    9434:	5a e0       	ldi	r21, 0x0A	; 10
    9436:	60 e0       	ldi	r22, 0x00	; 0
    9438:	70 e0       	ldi	r23, 0x00	; 0
    943a:	8e e0       	ldi	r24, 0x0E	; 14
    943c:	90 e0       	ldi	r25, 0x00	; 0
    943e:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(14, 1, strVertSep);
    9442:	49 e8       	ldi	r20, 0x89	; 137
    9444:	5a e0       	ldi	r21, 0x0A	; 10
    9446:	61 e0       	ldi	r22, 0x01	; 1
    9448:	70 e0       	ldi	r23, 0x00	; 0
    944a:	8e e0       	ldi	r24, 0x0E	; 14
    944c:	90 e0       	ldi	r25, 0x00	; 0
    944e:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(14, 2, strVertSep);
    9452:	49 e8       	ldi	r20, 0x89	; 137
    9454:	5a e0       	ldi	r21, 0x0A	; 10
    9456:	62 e0       	ldi	r22, 0x02	; 2
    9458:	70 e0       	ldi	r23, 0x00	; 0
    945a:	8e e0       	ldi	r24, 0x0E	; 14
    945c:	90 e0       	ldi	r25, 0x00	; 0
    945e:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	load_level_tiles(false);
    9462:	80 e0       	ldi	r24, 0x00	; 0
}
    9464:	df 91       	pop	r29
    9466:	cf 91       	pop	r28
    9468:	1f 91       	pop	r17
    946a:	0f 91       	pop	r16
    946c:	ff 90       	pop	r15
    946e:	ef 90       	pop	r14
    9470:	df 90       	pop	r13
    9472:	cf 90       	pop	r12
    9474:	bf 90       	pop	r11
    9476:	af 90       	pop	r10
    9478:	9f 90       	pop	r9
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, strVertSep);
	Print(14, 1, strVertSep);
	Print(14, 2, strVertSep);
	load_level_tiles(false);
    947a:	0c 94 30 49 	jmp	0x9260	; 0x9260 <load_level_tiles>

0000947e <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    947e:	cf 93       	push	r28
    9480:	df 93       	push	r29
    9482:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    9484:	61 e0       	ldi	r22, 0x01	; 1
    9486:	83 e0       	ldi	r24, 0x03	; 3
    9488:	0e 94 ef 3e 	call	0x7dde	; 0x7dde <FadeOut>
	ClearVram();
    948c:	0e 94 c9 30 	call	0x6192	; 0x6192 <ClearVram>
	clear_sprites();
    9490:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <clear_sprites>
	Print(9, 12, level_names[index]);
    9494:	d0 e0       	ldi	r29, 0x00	; 0
    9496:	fe 01       	movw	r30, r28
    9498:	ee 0f       	add	r30, r30
    949a:	ff 1f       	adc	r31, r31
    949c:	ec 5b       	subi	r30, 0xBC	; 188
    949e:	fe 4f       	sbci	r31, 0xFE	; 254
    94a0:	40 81       	ld	r20, Z
    94a2:	51 81       	ldd	r21, Z+1	; 0x01
    94a4:	6c e0       	ldi	r22, 0x0C	; 12
    94a6:	70 e0       	ldi	r23, 0x00	; 0
    94a8:	89 e0       	ldi	r24, 0x09	; 9
    94aa:	90 e0       	ldi	r25, 0x00	; 0
    94ac:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	FadeIn(1, true);
    94b0:	61 e0       	ldi	r22, 0x01	; 1
    94b2:	81 e0       	ldi	r24, 0x01	; 1
    94b4:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    94b8:	82 e0       	ldi	r24, 0x02	; 2
    94ba:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <LBWaitSeconds>
	FadeOut(1, true);
    94be:	61 e0       	ldi	r22, 0x01	; 1
    94c0:	81 e0       	ldi	r24, 0x01	; 1
    94c2:	0e 94 ef 3e 	call	0x7dde	; 0x7dde <FadeOut>
	ClearVram();
    94c6:	0e 94 c9 30 	call	0x6192	; 0x6192 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    94ca:	60 e0       	ldi	r22, 0x00	; 0
    94cc:	83 e0       	ldi	r24, 0x03	; 3
    94ce:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <FadeIn>
	load_level(index);
    94d2:	ce 01       	movw	r24, r28
}
    94d4:	df 91       	pop	r29
    94d6:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    94d8:	0c 94 87 49 	jmp	0x930e	; 0x930e <load_level>

000094dc <load_splash>:
	collision_detect_player(&player2, &player1, 15, 0);
}

void load_splash()
{
	game.current_screen = SPLASH;
    94dc:	10 92 51 0c 	sts	0x0C51, r1
	clear_sprites();
    94e0:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <clear_sprites>
	Print(7, 13, str1Player);
    94e4:	4e eb       	ldi	r20, 0xBE	; 190
    94e6:	5a e0       	ldi	r21, 0x0A	; 10
    94e8:	6d e0       	ldi	r22, 0x0D	; 13
    94ea:	70 e0       	ldi	r23, 0x00	; 0
    94ec:	87 e0       	ldi	r24, 0x07	; 7
    94ee:	90 e0       	ldi	r25, 0x00	; 0
    94f0:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(7, 14, str2Player);
    94f4:	4d ea       	ldi	r20, 0xAD	; 173
    94f6:	5a e0       	ldi	r21, 0x0A	; 10
    94f8:	6e e0       	ldi	r22, 0x0E	; 14
    94fa:	70 e0       	ldi	r23, 0x00	; 0
    94fc:	87 e0       	ldi	r24, 0x07	; 7
    94fe:	90 e0       	ldi	r25, 0x00	; 0
    9500:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(7, 15, strHighscores);
    9504:	43 ea       	ldi	r20, 0xA3	; 163
    9506:	5a e0       	ldi	r21, 0x0A	; 10
    9508:	6f e0       	ldi	r22, 0x0F	; 15
    950a:	70 e0       	ldi	r23, 0x00	; 0
    950c:	87 e0       	ldi	r24, 0x07	; 7
    950e:	90 e0       	ldi	r25, 0x00	; 0
    9510:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(4, 26, strCopyright);
    9514:	4c ec       	ldi	r20, 0xCC	; 204
    9516:	5a e0       	ldi	r21, 0x0A	; 10
    9518:	6a e1       	ldi	r22, 0x1A	; 26
    951a:	70 e0       	ldi	r23, 0x00	; 0
    951c:	84 e0       	ldi	r24, 0x04	; 4
    951e:	90 e0       	ldi	r25, 0x00	; 0
    9520:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    9524:	4e ee       	ldi	r20, 0xEE	; 238
    9526:	58 e2       	ldi	r21, 0x28	; 40
    9528:	65 e0       	ldi	r22, 0x05	; 5
    952a:	84 e0       	ldi	r24, 0x04	; 4
    952c:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <DrawMap2>
	MapSprite2(0, map_ball, 0);
    9530:	40 e0       	ldi	r20, 0x00	; 0
    9532:	6b e3       	ldi	r22, 0x3B	; 59
    9534:	78 e2       	ldi	r23, 0x28	; 40
    9536:	80 e0       	ldi	r24, 0x00	; 0
    9538:	0c 94 68 3d 	jmp	0x7ad0	; 0x7ad0 <MapSprite2>

0000953c <load_tank_rank>:
		return;
	}
}

void load_tank_rank()
{
    953c:	ef 92       	push	r14
    953e:	ff 92       	push	r15
    9540:	0f 93       	push	r16
    9542:	1f 93       	push	r17
    9544:	cf 93       	push	r28
    9546:	df 93       	push	r29
    9548:	1f 92       	push	r1
    954a:	cd b7       	in	r28, 0x3d	; 61
    954c:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    954e:	81 e0       	ldi	r24, 0x01	; 1
    9550:	80 93 51 0c 	sts	0x0C51, r24
	clear_sprites();
    9554:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    9558:	40 e0       	ldi	r20, 0x00	; 0
    955a:	6a e7       	ldi	r22, 0x7A	; 122
    955c:	78 e2       	ldi	r23, 0x28	; 40
    955e:	80 e0       	ldi	r24, 0x00	; 0
    9560:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    9564:	40 e0       	ldi	r20, 0x00	; 0
    9566:	62 e6       	ldi	r22, 0x62	; 98
    9568:	78 e2       	ldi	r23, 0x28	; 40
    956a:	84 e0       	ldi	r24, 0x04	; 4
    956c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    9570:	02 e0       	ldi	r16, 0x02	; 2
    9572:	22 e0       	ldi	r18, 0x02	; 2
    9574:	48 e0       	ldi	r20, 0x08	; 8
    9576:	68 e3       	ldi	r22, 0x38	; 56
    9578:	80 e0       	ldi	r24, 0x00	; 0
    957a:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    957e:	22 e0       	ldi	r18, 0x02	; 2
    9580:	48 e0       	ldi	r20, 0x08	; 8
    9582:	60 ea       	ldi	r22, 0xA0	; 160
    9584:	84 e0       	ldi	r24, 0x04	; 4
    9586:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
	Print(10, 2, strHighscores);
    958a:	43 ea       	ldi	r20, 0xA3	; 163
    958c:	5a e0       	ldi	r21, 0x0A	; 10
    958e:	62 e0       	ldi	r22, 0x02	; 2
    9590:	70 e0       	ldi	r23, 0x00	; 0
    9592:	8a e0       	ldi	r24, 0x0A	; 10
    9594:	90 e0       	ldi	r25, 0x00	; 0
    9596:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
    959a:	09 e0       	ldi	r16, 0x09	; 9
    959c:	11 e0       	ldi	r17, 0x01	; 1
    959e:	87 e0       	ldi	r24, 0x07	; 7
    95a0:	e8 2e       	mov	r14, r24
    95a2:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    95a4:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    95a6:	20 e0       	ldi	r18, 0x00	; 0
    95a8:	43 2f       	mov	r20, r19
    95aa:	b7 01       	movw	r22, r14
    95ac:	82 e0       	ldi	r24, 0x02	; 2
    95ae:	90 e0       	ldi	r25, 0x00	; 0
    95b0:	39 83       	std	Y+1, r19	; 0x01
    95b2:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <PrintByte>
		PrintChar(3, y, '.');
    95b6:	4e e2       	ldi	r20, 0x2E	; 46
    95b8:	b7 01       	movw	r22, r14
    95ba:	83 e0       	ldi	r24, 0x03	; 3
    95bc:	90 e0       	ldi	r25, 0x00	; 0
    95be:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <PrintChar>
    95c2:	f8 01       	movw	r30, r16
    95c4:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    95c6:	80 81       	ld	r24, Z
    95c8:	93 e0       	ldi	r25, 0x03	; 3
    95ca:	89 9f       	mul	r24, r25
    95cc:	a0 01       	movw	r20, r0
    95ce:	11 24       	eor	r1, r1
    95d0:	4a 5d       	subi	r20, 0xDA	; 218
    95d2:	5e 4f       	sbci	r21, 0xFE	; 254
    95d4:	23 e0       	ldi	r18, 0x03	; 3
    95d6:	6e 2d       	mov	r22, r14
    95d8:	85 e0       	ldi	r24, 0x05	; 5
    95da:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <LBPrintStr>
		Print(9, y, strOwns);
    95de:	4d e4       	ldi	r20, 0x4D	; 77
    95e0:	5a e0       	ldi	r21, 0x0A	; 10
    95e2:	b7 01       	movw	r22, r14
    95e4:	89 e0       	ldi	r24, 0x09	; 9
    95e6:	90 e0       	ldi	r25, 0x00	; 0
    95e8:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
    95ec:	f8 01       	movw	r30, r16
    95ee:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    95f0:	80 81       	ld	r24, Z
    95f2:	e3 e0       	ldi	r30, 0x03	; 3
    95f4:	8e 9f       	mul	r24, r30
    95f6:	a0 01       	movw	r20, r0
    95f8:	11 24       	eor	r1, r1
    95fa:	4a 5d       	subi	r20, 0xDA	; 218
    95fc:	5e 4f       	sbci	r21, 0xFE	; 254
    95fe:	23 e0       	ldi	r18, 0x03	; 3
    9600:	6e 2d       	mov	r22, r14
    9602:	8e e0       	ldi	r24, 0x0E	; 14
    9604:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <LBPrintStr>
		Print(18, y, strBy);
    9608:	4a e4       	ldi	r20, 0x4A	; 74
    960a:	5a e0       	ldi	r21, 0x0A	; 10
    960c:	b7 01       	movw	r22, r14
    960e:	82 e1       	ldi	r24, 0x12	; 18
    9610:	90 e0       	ldi	r25, 0x00	; 0
    9612:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
    9616:	f8 01       	movw	r30, r16
    9618:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    961a:	21 e0       	ldi	r18, 0x01	; 1
    961c:	40 81       	ld	r20, Z
    961e:	b7 01       	movw	r22, r14
    9620:	87 e1       	ldi	r24, 0x17	; 23
    9622:	90 e0       	ldi	r25, 0x00	; 0
    9624:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <PrintByte>
		PrintChar(24, y, '-');
    9628:	4d e2       	ldi	r20, 0x2D	; 45
    962a:	b7 01       	movw	r22, r14
    962c:	88 e1       	ldi	r24, 0x18	; 24
    962e:	90 e0       	ldi	r25, 0x00	; 0
    9630:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    9634:	21 e0       	ldi	r18, 0x01	; 1
    9636:	f8 01       	movw	r30, r16
    9638:	40 81       	ld	r20, Z
    963a:	b7 01       	movw	r22, r14
    963c:	8b e1       	ldi	r24, 0x1B	; 27
    963e:	90 e0       	ldi	r25, 0x00	; 0
    9640:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <PrintByte>
		y += 3;
		rank += 1;
    9644:	39 81       	ldd	r19, Y+1	; 0x01
    9646:	3f 5f       	subi	r19, 0xFF	; 255
    9648:	f3 e0       	ldi	r31, 0x03	; 3
    964a:	ef 0e       	add	r14, r31
    964c:	f1 1c       	adc	r15, r1
    964e:	0c 5f       	subi	r16, 0xFC	; 252
    9650:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    9652:	36 30       	cpi	r19, 0x06	; 6
    9654:	09 f0       	breq	.+2      	; 0x9658 <load_tank_rank+0x11c>
    9656:	a7 cf       	rjmp	.-178    	; 0x95a6 <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    9658:	41 e6       	ldi	r20, 0x61	; 97
    965a:	5a e0       	ldi	r21, 0x0A	; 10
    965c:	67 e1       	ldi	r22, 0x17	; 23
    965e:	70 e0       	ldi	r23, 0x00	; 0
    9660:	8a e0       	ldi	r24, 0x0A	; 10
    9662:	90 e0       	ldi	r25, 0x00	; 0
}
    9664:	0f 90       	pop	r0
    9666:	df 91       	pop	r29
    9668:	cf 91       	pop	r28
    966a:	1f 91       	pop	r17
    966c:	0f 91       	pop	r16
    966e:	ff 90       	pop	r15
    9670:	ef 90       	pop	r14
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    9672:	0c 94 69 3e 	jmp	0x7cd2	; 0x7cd2 <Print>

00009676 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
	fade_through();
    9676:	0e 94 ee 41 	call	0x83dc	; 0x83dc <fade_through>
	SetSpriteVisibility(true);
    967a:	81 e0       	ldi	r24, 0x01	; 1
    967c:	0e 94 91 3c 	call	0x7922	; 0x7922 <SetSpriteVisibility>
	init_game_state();
    9680:	0e 94 aa 41 	call	0x8354	; 0x8354 <init_game_state>
	load_tank_rank();
    9684:	0c 94 9e 4a 	jmp	0x953c	; 0x953c <load_tank_rank>

00009688 <update_level_helper>:
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
}

void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    9688:	af 92       	push	r10
    968a:	bf 92       	push	r11
    968c:	cf 92       	push	r12
    968e:	df 92       	push	r13
    9690:	ef 92       	push	r14
    9692:	ff 92       	push	r15
    9694:	0f 93       	push	r16
    9696:	1f 93       	push	r17
    9698:	cf 93       	push	r28
    969a:	df 93       	push	r29
    969c:	8c 01       	movw	r16, r24
    969e:	eb 01       	movw	r28, r22
    96a0:	7a 01       	movw	r14, r20
	Shot* shot;
	u8 next_level;

	if ((p->pressed & BTN_START))
    96a2:	fc 01       	movw	r30, r24
    96a4:	80 81       	ld	r24, Z
    96a6:	83 ff       	sbrs	r24, 3
    96a8:	09 c0       	rjmp	.+18     	; 0x96bc <update_level_helper+0x34>
	{
		game.paused = game.paused ^ 1;
    96aa:	90 91 53 0c 	lds	r25, 0x0C53
    96ae:	81 e0       	ldi	r24, 0x01	; 1
    96b0:	89 27       	eor	r24, r25
    96b2:	80 93 53 0c 	sts	0x0C53, r24
		load_level_tiles(false);
    96b6:	80 e0       	ldi	r24, 0x00	; 0
    96b8:	0e 94 30 49 	call	0x9260	; 0x9260 <load_level_tiles>
	}
	if (!game.paused)
    96bc:	20 91 53 0c 	lds	r18, 0x0C53
    96c0:	f8 01       	movw	r30, r16
    96c2:	80 81       	ld	r24, Z
    96c4:	91 81       	ldd	r25, Z+1	; 0x01
    96c6:	21 11       	cpse	r18, r1
    96c8:	4a c1       	rjmp	.+660    	; 0x995e <update_level_helper+0x2d6>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    96ca:	93 ff       	sbrs	r25, 3
    96cc:	0b c0       	rjmp	.+22     	; 0x96e4 <update_level_helper+0x5c>
    96ce:	8c 89       	ldd	r24, Y+20	; 0x14
    96d0:	8a 35       	cpi	r24, 0x5A	; 90
    96d2:	41 f4       	brne	.+16     	; 0x96e4 <update_level_helper+0x5c>
		{
			player->banter_frame = 0;
    96d4:	1c 8a       	std	Y+20, r1	; 0x14
			player->banter_index = (u8) LBRandom(0, 9);
    96d6:	69 e0       	ldi	r22, 0x09	; 9
    96d8:	70 e0       	ldi	r23, 0x00	; 0
    96da:	80 e0       	ldi	r24, 0x00	; 0
    96dc:	90 e0       	ldi	r25, 0x00	; 0
    96de:	0e 94 c6 40 	call	0x818c	; 0x818c <LBRandom>
    96e2:	8d 8b       	std	Y+21, r24	; 0x15
		}
		player->shared.speed = player->max_speed;
    96e4:	6f 89       	ldd	r22, Y+23	; 0x17
    96e6:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    96e8:	f8 01       	movw	r30, r16
    96ea:	84 81       	ldd	r24, Z+4	; 0x04
    96ec:	84 ff       	sbrs	r24, 4
    96ee:	15 c0       	rjmp	.+42     	; 0x971a <update_level_helper+0x92>
		{
			player->shared.direction = D_UP;
    96f0:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    96f2:	70 e0       	ldi	r23, 0x00	; 0
    96f4:	80 e0       	ldi	r24, 0x00	; 0
    96f6:	90 e0       	ldi	r25, 0x00	; 0
    96f8:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    96fc:	25 e6       	ldi	r18, 0x65	; 101
    96fe:	38 e8       	ldi	r19, 0x88	; 136
    9700:	48 e8       	ldi	r20, 0x88	; 136
    9702:	5c e3       	ldi	r21, 0x3C	; 60
    9704:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    9708:	9b 01       	movw	r18, r22
    970a:	ac 01       	movw	r20, r24
    970c:	6e 81       	ldd	r22, Y+6	; 0x06
    970e:	7f 81       	ldd	r23, Y+7	; 0x07
    9710:	88 85       	ldd	r24, Y+8	; 0x08
    9712:	99 85       	ldd	r25, Y+9	; 0x09
    9714:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    9718:	2f c0       	rjmp	.+94     	; 0x9778 <update_level_helper+0xf0>
		}
		else if ((p->held & BTN_RIGHT))
    971a:	87 ff       	sbrs	r24, 7
    971c:	16 c0       	rjmp	.+44     	; 0x974a <update_level_helper+0xc2>
		{
			player->shared.direction = D_RIGHT;
    971e:	81 e0       	ldi	r24, 0x01	; 1
    9720:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    9722:	70 e0       	ldi	r23, 0x00	; 0
    9724:	80 e0       	ldi	r24, 0x00	; 0
    9726:	90 e0       	ldi	r25, 0x00	; 0
    9728:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    972c:	25 e6       	ldi	r18, 0x65	; 101
    972e:	38 e8       	ldi	r19, 0x88	; 136
    9730:	48 e8       	ldi	r20, 0x88	; 136
    9732:	5c e3       	ldi	r21, 0x3C	; 60
    9734:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    9738:	9b 01       	movw	r18, r22
    973a:	ac 01       	movw	r20, r24
    973c:	6a 81       	ldd	r22, Y+2	; 0x02
    973e:	7b 81       	ldd	r23, Y+3	; 0x03
    9740:	8c 81       	ldd	r24, Y+4	; 0x04
    9742:	9d 81       	ldd	r25, Y+5	; 0x05
    9744:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    9748:	33 c0       	rjmp	.+102    	; 0x97b0 <update_level_helper+0x128>
		}
		else if ((p->held & BTN_DOWN))
    974a:	85 ff       	sbrs	r24, 5
    974c:	1a c0       	rjmp	.+52     	; 0x9782 <update_level_helper+0xfa>
		{
			player->shared.direction = D_DOWN;
    974e:	82 e0       	ldi	r24, 0x02	; 2
    9750:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    9752:	70 e0       	ldi	r23, 0x00	; 0
    9754:	80 e0       	ldi	r24, 0x00	; 0
    9756:	90 e0       	ldi	r25, 0x00	; 0
    9758:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    975c:	25 e6       	ldi	r18, 0x65	; 101
    975e:	38 e8       	ldi	r19, 0x88	; 136
    9760:	48 e8       	ldi	r20, 0x88	; 136
    9762:	5c e3       	ldi	r21, 0x3C	; 60
    9764:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    9768:	9b 01       	movw	r18, r22
    976a:	ac 01       	movw	r20, r24
    976c:	6e 81       	ldd	r22, Y+6	; 0x06
    976e:	7f 81       	ldd	r23, Y+7	; 0x07
    9770:	88 85       	ldd	r24, Y+8	; 0x08
    9772:	99 85       	ldd	r25, Y+9	; 0x09
    9774:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    9778:	6e 83       	std	Y+6, r22	; 0x06
    977a:	7f 83       	std	Y+7, r23	; 0x07
    977c:	88 87       	std	Y+8, r24	; 0x08
    977e:	99 87       	std	Y+9, r25	; 0x09
    9780:	1d c0       	rjmp	.+58     	; 0x97bc <update_level_helper+0x134>
		}
		else if ((p->held & BTN_LEFT))
    9782:	86 ff       	sbrs	r24, 6
    9784:	1a c0       	rjmp	.+52     	; 0x97ba <update_level_helper+0x132>
		{
			player->shared.direction = D_LEFT;
    9786:	83 e0       	ldi	r24, 0x03	; 3
    9788:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    978a:	70 e0       	ldi	r23, 0x00	; 0
    978c:	80 e0       	ldi	r24, 0x00	; 0
    978e:	90 e0       	ldi	r25, 0x00	; 0
    9790:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    9794:	25 e6       	ldi	r18, 0x65	; 101
    9796:	38 e8       	ldi	r19, 0x88	; 136
    9798:	48 e8       	ldi	r20, 0x88	; 136
    979a:	5c e3       	ldi	r21, 0x3C	; 60
    979c:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    97a0:	9b 01       	movw	r18, r22
    97a2:	ac 01       	movw	r20, r24
    97a4:	6a 81       	ldd	r22, Y+2	; 0x02
    97a6:	7b 81       	ldd	r23, Y+3	; 0x03
    97a8:	8c 81       	ldd	r24, Y+4	; 0x04
    97aa:	9d 81       	ldd	r25, Y+5	; 0x05
    97ac:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    97b0:	6a 83       	std	Y+2, r22	; 0x02
    97b2:	7b 83       	std	Y+3, r23	; 0x03
    97b4:	8c 83       	std	Y+4, r24	; 0x04
    97b6:	9d 83       	std	Y+5, r25	; 0x05
    97b8:	01 c0       	rjmp	.+2      	; 0x97bc <update_level_helper+0x134>
		}
		else
		{
			player->shared.speed = 0;
    97ba:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    97bc:	f8 01       	movw	r30, r16
    97be:	80 81       	ld	r24, Z
    97c0:	91 81       	ldd	r25, Z+1	; 0x01
    97c2:	90 ff       	sbrs	r25, 0
    97c4:	44 c0       	rjmp	.+136    	; 0x984e <update_level_helper+0x1c6>
    97c6:	88 89       	ldd	r24, Y+16	; 0x10
    97c8:	82 30       	cpi	r24, 0x02	; 2
    97ca:	08 f0       	brcs	.+2      	; 0x97ce <update_level_helper+0x146>
    97cc:	40 c0       	rjmp	.+128    	; 0x984e <update_level_helper+0x1c6>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    97ce:	8f a1       	ldd	r24, Y+39	; 0x27
    97d0:	81 11       	cpse	r24, r1
    97d2:	06 c0       	rjmp	.+12     	; 0x97e0 <update_level_helper+0x158>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    97d4:	8e 01       	movw	r16, r28
    97d6:	06 5e       	subi	r16, 0xE6	; 230
    97d8:	1f 4f       	sbci	r17, 0xFF	; 255
    97da:	a1 2c       	mov	r10, r1
    97dc:	b1 2c       	mov	r11, r1
    97de:	0c c0       	rjmp	.+24     	; 0x97f8 <update_level_helper+0x170>
				if (!shot->active)
    97e0:	fe 01       	movw	r30, r28
    97e2:	e7 5b       	subi	r30, 0xB7	; 183
    97e4:	ff 4f       	sbci	r31, 0xFF	; 255
    97e6:	80 81       	ld	r24, Z
    97e8:	81 11       	cpse	r24, r1
    97ea:	31 c0       	rjmp	.+98     	; 0x984e <update_level_helper+0x1c6>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    97ec:	8e 01       	movw	r16, r28
    97ee:	04 5c       	subi	r16, 0xC4	; 196
    97f0:	1f 4f       	sbci	r17, 0xFF	; 255
    97f2:	aa 24       	eor	r10, r10
    97f4:	a3 94       	inc	r10
    97f6:	b1 2c       	mov	r11, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    97f8:	88 8d       	ldd	r24, Y+24	; 0x18
    97fa:	88 23       	and	r24, r24
    97fc:	31 f0       	breq	.+12     	; 0x980a <update_level_helper+0x182>
					{
						init_shot_state(shot, ROCKET_SHOT);
    97fe:	61 e0       	ldi	r22, 0x01	; 1
    9800:	c8 01       	movw	r24, r16
    9802:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    9806:	61 e0       	ldi	r22, 0x01	; 1
    9808:	05 c0       	rjmp	.+10     	; 0x9814 <update_level_helper+0x18c>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    980a:	60 e0       	ldi	r22, 0x00	; 0
    980c:	c8 01       	movw	r24, r16
    980e:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    9812:	60 e0       	ldi	r22, 0x00	; 0
    9814:	c8 01       	movw	r24, r16
    9816:	0e 94 0d 41 	call	0x821a	; 0x821a <set_shot_animations>
					}
					player->active_shots++;
    981a:	88 89       	ldd	r24, Y+16	; 0x10
    981c:	8f 5f       	subi	r24, 0xFF	; 255
    981e:	88 8b       	std	Y+16, r24	; 0x10
					shot->shared.direction = player->shared.direction;
    9820:	82 e2       	ldi	r24, 0x22	; 34
    9822:	8a 9d       	mul	r24, r10
    9824:	60 01       	movw	r12, r0
    9826:	8b 9d       	mul	r24, r11
    9828:	d0 0c       	add	r13, r0
    982a:	11 24       	eor	r1, r1
    982c:	cc 0e       	add	r12, r28
    982e:	dd 1e       	adc	r13, r29
    9830:	88 81       	ld	r24, Y
    9832:	f6 01       	movw	r30, r12
    9834:	82 8f       	std	Z+26, r24	; 0x1a
					position_shot(player, shot);
    9836:	b8 01       	movw	r22, r16
    9838:	ce 01       	movw	r24, r28
    983a:	0e 94 6e 42 	call	0x84dc	; 0x84dc <position_shot>
					shot->active = 1;
    983e:	81 e0       	ldi	r24, 0x01	; 1
    9840:	f6 01       	movw	r30, r12
    9842:	87 a3       	std	Z+39, r24	; 0x27
					if (player->has_over_speed)
    9844:	89 8d       	ldd	r24, Y+25	; 0x19
    9846:	88 23       	and	r24, r24
    9848:	11 f0       	breq	.+4      	; 0x984e <update_level_helper+0x1c6>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    984a:	86 e9       	ldi	r24, 0x96	; 150
    984c:	83 8f       	std	Z+27, r24	; 0x1b
    984e:	8e 01       	movw	r16, r28
    9850:	05 5e       	subi	r16, 0xE5	; 229
    9852:	1f 4f       	sbci	r17, 0xFF	; 255
    9854:	5e 01       	movw	r10, r28
    9856:	ff e5       	ldi	r31, 0x5F	; 95
    9858:	af 0e       	add	r10, r31
    985a:	b1 1c       	adc	r11, r1

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    985c:	f8 01       	movw	r30, r16
    985e:	84 85       	ldd	r24, Z+12	; 0x0c
    9860:	88 23       	and	r24, r24
    9862:	09 f4       	brne	.+2      	; 0x9866 <update_level_helper+0x1de>
    9864:	75 c0       	rjmp	.+234    	; 0x9950 <update_level_helper+0x2c8>
			{
				switch (shot->shared.direction)
    9866:	82 91       	ld	r24, -Z
    9868:	6f 01       	movw	r12, r30
    986a:	81 30       	cpi	r24, 0x01	; 1
    986c:	a9 f1       	breq	.+106    	; 0x98d8 <update_level_helper+0x250>
    986e:	e8 f0       	brcs	.+58     	; 0x98aa <update_level_helper+0x222>
    9870:	82 30       	cpi	r24, 0x02	; 2
    9872:	09 f4       	brne	.+2      	; 0x9876 <update_level_helper+0x1ee>
    9874:	48 c0       	rjmp	.+144    	; 0x9906 <update_level_helper+0x27e>
    9876:	83 30       	cpi	r24, 0x03	; 3
    9878:	09 f0       	breq	.+2      	; 0x987c <update_level_helper+0x1f4>
    987a:	66 c0       	rjmp	.+204    	; 0x9948 <update_level_helper+0x2c0>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    987c:	f8 01       	movw	r30, r16
    987e:	60 81       	ld	r22, Z
    9880:	70 e0       	ldi	r23, 0x00	; 0
    9882:	80 e0       	ldi	r24, 0x00	; 0
    9884:	90 e0       	ldi	r25, 0x00	; 0
    9886:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    988a:	25 e6       	ldi	r18, 0x65	; 101
    988c:	38 e8       	ldi	r19, 0x88	; 136
    988e:	48 e8       	ldi	r20, 0x88	; 136
    9890:	5c e3       	ldi	r21, 0x3C	; 60
    9892:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    9896:	9b 01       	movw	r18, r22
    9898:	ac 01       	movw	r20, r24
    989a:	f8 01       	movw	r30, r16
    989c:	61 81       	ldd	r22, Z+1	; 0x01
    989e:	72 81       	ldd	r23, Z+2	; 0x02
    98a0:	83 81       	ldd	r24, Z+3	; 0x03
    98a2:	94 81       	ldd	r25, Z+4	; 0x04
    98a4:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    98a8:	4a c0       	rjmp	.+148    	; 0x993e <update_level_helper+0x2b6>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    98aa:	f8 01       	movw	r30, r16
    98ac:	60 81       	ld	r22, Z
    98ae:	70 e0       	ldi	r23, 0x00	; 0
    98b0:	80 e0       	ldi	r24, 0x00	; 0
    98b2:	90 e0       	ldi	r25, 0x00	; 0
    98b4:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    98b8:	25 e6       	ldi	r18, 0x65	; 101
    98ba:	38 e8       	ldi	r19, 0x88	; 136
    98bc:	48 e8       	ldi	r20, 0x88	; 136
    98be:	5c e3       	ldi	r21, 0x3C	; 60
    98c0:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    98c4:	9b 01       	movw	r18, r22
    98c6:	ac 01       	movw	r20, r24
    98c8:	f8 01       	movw	r30, r16
    98ca:	65 81       	ldd	r22, Z+5	; 0x05
    98cc:	76 81       	ldd	r23, Z+6	; 0x06
    98ce:	87 81       	ldd	r24, Z+7	; 0x07
    98d0:	90 85       	ldd	r25, Z+8	; 0x08
    98d2:	0e 94 b9 50 	call	0xa172	; 0xa172 <__subsf3>
    98d6:	2d c0       	rjmp	.+90     	; 0x9932 <update_level_helper+0x2aa>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    98d8:	f8 01       	movw	r30, r16
    98da:	60 81       	ld	r22, Z
    98dc:	70 e0       	ldi	r23, 0x00	; 0
    98de:	80 e0       	ldi	r24, 0x00	; 0
    98e0:	90 e0       	ldi	r25, 0x00	; 0
    98e2:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    98e6:	25 e6       	ldi	r18, 0x65	; 101
    98e8:	38 e8       	ldi	r19, 0x88	; 136
    98ea:	48 e8       	ldi	r20, 0x88	; 136
    98ec:	5c e3       	ldi	r21, 0x3C	; 60
    98ee:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    98f2:	9b 01       	movw	r18, r22
    98f4:	ac 01       	movw	r20, r24
    98f6:	f8 01       	movw	r30, r16
    98f8:	61 81       	ldd	r22, Z+1	; 0x01
    98fa:	72 81       	ldd	r23, Z+2	; 0x02
    98fc:	83 81       	ldd	r24, Z+3	; 0x03
    98fe:	94 81       	ldd	r25, Z+4	; 0x04
    9900:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    9904:	1c c0       	rjmp	.+56     	; 0x993e <update_level_helper+0x2b6>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    9906:	f8 01       	movw	r30, r16
    9908:	60 81       	ld	r22, Z
    990a:	70 e0       	ldi	r23, 0x00	; 0
    990c:	80 e0       	ldi	r24, 0x00	; 0
    990e:	90 e0       	ldi	r25, 0x00	; 0
    9910:	0e 94 b8 51 	call	0xa370	; 0xa370 <__floatsisf>
    9914:	25 e6       	ldi	r18, 0x65	; 101
    9916:	38 e8       	ldi	r19, 0x88	; 136
    9918:	48 e8       	ldi	r20, 0x88	; 136
    991a:	5c e3       	ldi	r21, 0x3C	; 60
    991c:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <__mulsf3>
    9920:	9b 01       	movw	r18, r22
    9922:	ac 01       	movw	r20, r24
    9924:	f8 01       	movw	r30, r16
    9926:	65 81       	ldd	r22, Z+5	; 0x05
    9928:	76 81       	ldd	r23, Z+6	; 0x06
    992a:	87 81       	ldd	r24, Z+7	; 0x07
    992c:	90 85       	ldd	r25, Z+8	; 0x08
    992e:	0e 94 ba 50 	call	0xa174	; 0xa174 <__addsf3>
    9932:	f8 01       	movw	r30, r16
    9934:	65 83       	std	Z+5, r22	; 0x05
    9936:	76 83       	std	Z+6, r23	; 0x06
    9938:	87 83       	std	Z+7, r24	; 0x07
    993a:	90 87       	std	Z+8, r25	; 0x08
    993c:	05 c0       	rjmp	.+10     	; 0x9948 <update_level_helper+0x2c0>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    993e:	f8 01       	movw	r30, r16
    9940:	61 83       	std	Z+1, r22	; 0x01
    9942:	72 83       	std	Z+2, r23	; 0x02
    9944:	83 83       	std	Z+3, r24	; 0x03
    9946:	94 83       	std	Z+4, r25	; 0x04
					default: break;
				}
				collision_detect_shot(player, shot);
    9948:	b6 01       	movw	r22, r12
    994a:	ce 01       	movw	r24, r28
    994c:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <collision_detect_shot>
    9950:	0e 5d       	subi	r16, 0xDE	; 222
    9952:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		}

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
    9954:	0a 15       	cp	r16, r10
    9956:	1b 05       	cpc	r17, r11
    9958:	09 f0       	breq	.+2      	; 0x995c <update_level_helper+0x2d4>
    995a:	80 cf       	rjmp	.-256    	; 0x985c <update_level_helper+0x1d4>
    995c:	06 c0       	rjmp	.+12     	; 0x996a <update_level_helper+0x2e2>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    995e:	91 ff       	sbrs	r25, 1
    9960:	04 c0       	rjmp	.+8      	; 0x996a <update_level_helper+0x2e2>
		{
			save_score();
    9962:	0e 94 05 42 	call	0x840a	; 0x840a <save_score>
			exit_game();
    9966:	0e 94 3b 4b 	call	0x9676	; 0x9676 <exit_game>
		}
	}
	
	// Level transition
	if (player->level_score == MAX_LEVEL_SCORE)
    996a:	8f 85       	ldd	r24, Y+15	; 0x0f
    996c:	85 30       	cpi	r24, 0x05	; 5
    996e:	79 f5       	brne	.+94     	; 0x99ce <update_level_helper+0x346>
	{
		save_score();
    9970:	0e 94 05 42 	call	0x840a	; 0x840a <save_score>
		load_level_tiles(true);
    9974:	81 e0       	ldi	r24, 0x01	; 1
    9976:	0e 94 30 49 	call	0x9260	; 0x9260 <load_level_tiles>
		SetSpriteVisibility(false);
    997a:	80 e0       	ldi	r24, 0x00	; 0
    997c:	0e 94 91 3c 	call	0x7922	; 0x7922 <SetSpriteVisibility>
		print_level_score(player, other_player);
    9980:	b7 01       	movw	r22, r14
    9982:	ce 01       	movw	r24, r28
    9984:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    9988:	82 e0       	ldi	r24, 0x02	; 2
    998a:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <LBWaitSeconds>
		player->level_score = 0;
    998e:	1f 86       	std	Y+15, r1	; 0x0f
		other_player->level_score = 0;
    9990:	f7 01       	movw	r30, r14
    9992:	17 86       	std	Z+15, r1	; 0x0f
		next_level = game.current_level + 1;
    9994:	80 91 52 0c 	lds	r24, 0x0C52
    9998:	8f 5f       	subi	r24, 0xFF	; 255
		if (next_level >= LEVEL_COUNT)
    999a:	8a 30       	cpi	r24, 0x0A	; 10
    999c:	60 f0       	brcs	.+24     	; 0x99b6 <update_level_helper+0x32e>
		else
		{
			level_transition(next_level);
		}
	}
}
    999e:	df 91       	pop	r29
    99a0:	cf 91       	pop	r28
    99a2:	1f 91       	pop	r17
    99a4:	0f 91       	pop	r16
    99a6:	ff 90       	pop	r15
    99a8:	ef 90       	pop	r14
    99aa:	df 90       	pop	r13
    99ac:	cf 90       	pop	r12
    99ae:	bf 90       	pop	r11
    99b0:	af 90       	pop	r10
		player->level_score = 0;
		other_player->level_score = 0;
		next_level = game.current_level + 1;
		if (next_level >= LEVEL_COUNT)
		{
			exit_game();
    99b2:	0c 94 3b 4b 	jmp	0x9676	; 0x9676 <exit_game>
		else
		{
			level_transition(next_level);
		}
	}
}
    99b6:	df 91       	pop	r29
    99b8:	cf 91       	pop	r28
    99ba:	1f 91       	pop	r17
    99bc:	0f 91       	pop	r16
    99be:	ff 90       	pop	r15
    99c0:	ef 90       	pop	r14
    99c2:	df 90       	pop	r13
    99c4:	cf 90       	pop	r12
    99c6:	bf 90       	pop	r11
    99c8:	af 90       	pop	r10
		{
			exit_game();
		}
		else
		{
			level_transition(next_level);
    99ca:	0c 94 3f 4a 	jmp	0x947e	; 0x947e <level_transition>
		}
	}
}
    99ce:	df 91       	pop	r29
    99d0:	cf 91       	pop	r28
    99d2:	1f 91       	pop	r17
    99d4:	0f 91       	pop	r16
    99d6:	ff 90       	pop	r15
    99d8:	ef 90       	pop	r14
    99da:	df 90       	pop	r13
    99dc:	cf 90       	pop	r12
    99de:	bf 90       	pop	r11
    99e0:	af 90       	pop	r10
    99e2:	08 95       	ret

000099e4 <update_level>:
	Print(14, 2, strVertSep);
	load_level_tiles(false);
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    99e4:	cf 92       	push	r12
    99e6:	df 92       	push	r13
    99e8:	ef 92       	push	r14
    99ea:	ff 92       	push	r15
    99ec:	1f 93       	push	r17
    99ee:	cf 93       	push	r28
    99f0:	df 93       	push	r29
    99f2:	6c 01       	movw	r12, r24
    99f4:	7b 01       	movw	r14, r22
	char p2_shot_index = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;

	// Render
	if (game.paused)
    99f6:	80 91 53 0c 	lds	r24, 0x0C53
    99fa:	88 23       	and	r24, r24
    99fc:	d1 f0       	breq	.+52     	; 0x9a32 <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    99fe:	80 e0       	ldi	r24, 0x00	; 0
    9a00:	0e 94 91 3c 	call	0x7922	; 0x7922 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    9a04:	40 eb       	ldi	r20, 0xB0	; 176
    9a06:	58 e2       	ldi	r21, 0x28	; 40
    9a08:	6c e0       	ldi	r22, 0x0C	; 12
    9a0a:	88 e0       	ldi	r24, 0x08	; 8
    9a0c:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <DrawMap2>
		Print(12, 13, strPaused);
    9a10:	45 eb       	ldi	r20, 0xB5	; 181
    9a12:	59 e0       	ldi	r21, 0x09	; 9
    9a14:	6d e0       	ldi	r22, 0x0D	; 13
    9a16:	70 e0       	ldi	r23, 0x00	; 0
    9a18:	8c e0       	ldi	r24, 0x0C	; 12
    9a1a:	90 e0       	ldi	r25, 0x00	; 0
    9a1c:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
		Print(11, 14, strExit);
    9a20:	4c eb       	ldi	r20, 0xBC	; 188
    9a22:	59 e0       	ldi	r21, 0x09	; 9
    9a24:	6e e0       	ldi	r22, 0x0E	; 14
    9a26:	70 e0       	ldi	r23, 0x00	; 0
    9a28:	8b e0       	ldi	r24, 0x0B	; 11
    9a2a:	90 e0       	ldi	r25, 0x00	; 0
    9a2c:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
    9a30:	40 c0       	rjmp	.+128    	; 0x9ab2 <update_level+0xce>
	}
	else
	{
		SetSpriteVisibility(true);
    9a32:	81 e0       	ldi	r24, 0x01	; 1
    9a34:	0e 94 91 3c 	call	0x7922	; 0x7922 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    9a38:	60 e0       	ldi	r22, 0x00	; 0
    9a3a:	85 e5       	ldi	r24, 0x55	; 85
    9a3c:	9c e0       	ldi	r25, 0x0C	; 12
    9a3e:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <tank_map>
    9a42:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    9a44:	68 2f       	mov	r22, r24
    9a46:	86 ec       	ldi	r24, 0xC6	; 198
    9a48:	9f e0       	ldi	r25, 0x0F	; 15
    9a4a:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <tank_map>
    9a4e:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    9a50:	68 2f       	mov	r22, r24
    9a52:	85 e5       	ldi	r24, 0x55	; 85
    9a54:	9c e0       	ldi	r25, 0x0C	; 12
    9a56:	0e 94 48 44 	call	0x8890	; 0x8890 <shot_map>
    9a5a:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    9a5c:	68 2f       	mov	r22, r24
    9a5e:	86 ec       	ldi	r24, 0xC6	; 198
    9a60:	9f e0       	ldi	r25, 0x0F	; 15
    9a62:	0e 94 48 44 	call	0x8890	; 0x8890 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    9a66:	40 91 02 01 	lds	r20, 0x0102
    9a6a:	6f e0       	ldi	r22, 0x0F	; 15
    9a6c:	85 e5       	ldi	r24, 0x55	; 85
    9a6e:	9c e0       	ldi	r25, 0x0C	; 12
    9a70:	0e 94 57 43 	call	0x86ae	; 0x86ae <render_banter>
    9a74:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    9a78:	40 91 01 01 	lds	r20, 0x0101
    9a7c:	60 e0       	ldi	r22, 0x00	; 0
    9a7e:	86 ec       	ldi	r24, 0xC6	; 198
    9a80:	9f e0       	ldi	r25, 0x0F	; 15
    9a82:	0e 94 57 43 	call	0x86ae	; 0x86ae <render_banter>
    9a86:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    9a8a:	60 e0       	ldi	r22, 0x00	; 0
    9a8c:	85 e5       	ldi	r24, 0x55	; 85
    9a8e:	9c e0       	ldi	r25, 0x0C	; 12
    9a90:	0e 94 80 43 	call	0x8700	; 0x8700 <render_player>
		render_player(&player2, p2_index);
    9a94:	61 2f       	mov	r22, r17
    9a96:	86 ec       	ldi	r24, 0xC6	; 198
    9a98:	9f e0       	ldi	r25, 0x0F	; 15
    9a9a:	0e 94 80 43 	call	0x8700	; 0x8700 <render_player>
		render_shot(&player1, p1_shot_index);
    9a9e:	6d 2f       	mov	r22, r29
    9aa0:	85 e5       	ldi	r24, 0x55	; 85
    9aa2:	9c e0       	ldi	r25, 0x0C	; 12
    9aa4:	0e 94 a9 43 	call	0x8752	; 0x8752 <render_shot>
		render_shot(&player2, p2_shot_index);
    9aa8:	6c 2f       	mov	r22, r28
    9aaa:	86 ec       	ldi	r24, 0xC6	; 198
    9aac:	9f e0       	ldi	r25, 0x0F	; 15
    9aae:	0e 94 a9 43 	call	0x8752	; 0x8752 <render_shot>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    9ab2:	2f e0       	ldi	r18, 0x0F	; 15
    9ab4:	46 ec       	ldi	r20, 0xC6	; 198
    9ab6:	5f e0       	ldi	r21, 0x0F	; 15
    9ab8:	65 e5       	ldi	r22, 0x55	; 85
    9aba:	7c e0       	ldi	r23, 0x0C	; 12
    9abc:	c6 01       	movw	r24, r12
    9abe:	0e 94 44 4b 	call	0x9688	; 0x9688 <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    9ac2:	20 e0       	ldi	r18, 0x00	; 0
    9ac4:	45 e5       	ldi	r20, 0x55	; 85
    9ac6:	5c e0       	ldi	r21, 0x0C	; 12
    9ac8:	66 ec       	ldi	r22, 0xC6	; 198
    9aca:	7f e0       	ldi	r23, 0x0F	; 15
    9acc:	c7 01       	movw	r24, r14
    9ace:	0e 94 44 4b 	call	0x9688	; 0x9688 <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    9ad2:	2f e0       	ldi	r18, 0x0F	; 15
    9ad4:	40 e0       	ldi	r20, 0x00	; 0
    9ad6:	66 ec       	ldi	r22, 0xC6	; 198
    9ad8:	7f e0       	ldi	r23, 0x0F	; 15
    9ada:	85 e5       	ldi	r24, 0x55	; 85
    9adc:	9c e0       	ldi	r25, 0x0C	; 12
    9ade:	0e 94 3f 48 	call	0x907e	; 0x907e <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    9ae2:	20 e0       	ldi	r18, 0x00	; 0
    9ae4:	4f e0       	ldi	r20, 0x0F	; 15
    9ae6:	65 e5       	ldi	r22, 0x55	; 85
    9ae8:	7c e0       	ldi	r23, 0x0C	; 12
    9aea:	86 ec       	ldi	r24, 0xC6	; 198
    9aec:	9f e0       	ldi	r25, 0x0F	; 15
}
    9aee:	df 91       	pop	r29
    9af0:	cf 91       	pop	r28
    9af2:	1f 91       	pop	r17
    9af4:	ff 90       	pop	r15
    9af6:	ef 90       	pop	r14
    9af8:	df 90       	pop	r13
    9afa:	cf 90       	pop	r12

	// Update
	update_level_helper(p1, &player1, &player2, 15);
	update_level_helper(p2, &player2, &player1, 0);
	collision_detect_player(&player1, &player2, 0, 15);
	collision_detect_player(&player2, &player1, 15, 0);
    9afc:	0c 94 3f 48 	jmp	0x907e	; 0x907e <collision_detect_player>

00009b00 <update_tank_rank>:
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	// Update
	if (p1->pressed & BTN_X)
    9b00:	fc 01       	movw	r30, r24
    9b02:	80 81       	ld	r24, Z
    9b04:	91 81       	ldd	r25, Z+1	; 0x01
    9b06:	91 ff       	sbrs	r25, 1
    9b08:	04 c0       	rjmp	.+8      	; 0x9b12 <update_tank_rank+0x12>
	{
		fade_through();
    9b0a:	0e 94 ee 41 	call	0x83dc	; 0x83dc <fade_through>
		load_splash();
    9b0e:	0c 94 6e 4a 	jmp	0x94dc	; 0x94dc <load_splash>
    9b12:	08 95       	ret

00009b14 <_handle_select_helper>:
	}
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    9b14:	0f 93       	push	r16
    9b16:	1f 93       	push	r17
    9b18:	cf 93       	push	r28
    9b1a:	df 93       	push	r29
    9b1c:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    9b1e:	fb 01       	movw	r30, r22
    9b20:	20 81       	ld	r18, Z
    9b22:	31 81       	ldd	r19, Z+1	; 0x01
    9b24:	d9 01       	movw	r26, r18
    9b26:	a0 71       	andi	r26, 0x10	; 16
    9b28:	bb 27       	eor	r27, r27
    9b2a:	24 ff       	sbrs	r18, 4
    9b2c:	09 c0       	rjmp	.+18     	; 0x9b40 <_handle_select_helper+0x2c>
    9b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    9b30:	81 11       	cpse	r24, r1
    9b32:	06 c0       	rjmp	.+12     	; 0x9b40 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    9b34:	88 81       	ld	r24, Y
    9b36:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    9b38:	87 ff       	sbrs	r24, 7
    9b3a:	0f c0       	rjmp	.+30     	; 0x9b5a <_handle_select_helper+0x46>
    9b3c:	18 82       	st	Y, r1
    9b3e:	95 c0       	rjmp	.+298    	; 0x9c6a <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    9b40:	b9 01       	movw	r22, r18
    9b42:	60 72       	andi	r22, 0x20	; 32
    9b44:	77 27       	eor	r23, r23
    9b46:	25 ff       	sbrs	r18, 5
    9b48:	0a c0       	rjmp	.+20     	; 0x9b5e <_handle_select_helper+0x4a>
    9b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    9b4c:	81 11       	cpse	r24, r1
    9b4e:	07 c0       	rjmp	.+14     	; 0x9b5e <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    9b50:	88 81       	ld	r24, Y
    9b52:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    9b54:	89 30       	cpi	r24, 0x09	; 9
    9b56:	0c f0       	brlt	.+2      	; 0x9b5a <_handle_select_helper+0x46>
    9b58:	88 e0       	ldi	r24, 0x08	; 8
    9b5a:	88 83       	st	Y, r24
    9b5c:	86 c0       	rjmp	.+268    	; 0x9c6a <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    9b5e:	f9 01       	movw	r30, r18
    9b60:	ee 27       	eor	r30, r30
    9b62:	f1 70       	andi	r31, 0x01	; 1
    9b64:	30 ff       	sbrs	r19, 0
    9b66:	14 c0       	rjmp	.+40     	; 0x9b90 <_handle_select_helper+0x7c>
    9b68:	8d 81       	ldd	r24, Y+5	; 0x05
    9b6a:	81 11       	cpse	r24, r1
    9b6c:	11 c0       	rjmp	.+34     	; 0x9b90 <_handle_select_helper+0x7c>
	{
		ps->select_state = EDITING;
    9b6e:	81 e0       	ldi	r24, 0x01	; 1
    9b70:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    9b72:	69 91       	ld	r22, Y+
    9b74:	f3 e0       	ldi	r31, 0x03	; 3
    9b76:	6f 02       	muls	r22, r31
    9b78:	b0 01       	movw	r22, r0
    9b7a:	11 24       	eor	r1, r1
    9b7c:	6a 5d       	subi	r22, 0xDA	; 218
    9b7e:	7e 4f       	sbci	r23, 0xFE	; 254
    9b80:	43 e0       	ldi	r20, 0x03	; 3
    9b82:	ce 01       	movw	r24, r28
	else if ((p->pressed & BTN_X))
	{
		fade_through();
		load_splash();
	}
}
    9b84:	df 91       	pop	r29
    9b86:	cf 91       	pop	r28
    9b88:	1f 91       	pop	r17
    9b8a:	0f 91       	pop	r16
		if (ps->handle_id > 8) ps->handle_id = 8;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    9b8c:	0c 94 89 3f 	jmp	0x7f12	; 0x7f12 <LBCopyChars>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    9b90:	27 ff       	sbrs	r18, 7
    9b92:	0a c0       	rjmp	.+20     	; 0x9ba8 <_handle_select_helper+0x94>
    9b94:	8d 81       	ldd	r24, Y+5	; 0x05
    9b96:	81 30       	cpi	r24, 0x01	; 1
    9b98:	39 f4       	brne	.+14     	; 0x9ba8 <_handle_select_helper+0x94>
	{
		ps->char_index++;
    9b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    9b9c:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    9b9e:	83 30       	cpi	r24, 0x03	; 3
    9ba0:	0c f0       	brlt	.+2      	; 0x9ba4 <_handle_select_helper+0x90>
    9ba2:	82 e0       	ldi	r24, 0x02	; 2
    9ba4:	8c 83       	std	Y+4, r24	; 0x04
    9ba6:	61 c0       	rjmp	.+194    	; 0x9c6a <_handle_select_helper+0x156>
    9ba8:	ca 01       	movw	r24, r20
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    9baa:	26 ff       	sbrs	r18, 6
    9bac:	09 c0       	rjmp	.+18     	; 0x9bc0 <_handle_select_helper+0xac>
    9bae:	4d 81       	ldd	r20, Y+5	; 0x05
    9bb0:	41 30       	cpi	r20, 0x01	; 1
    9bb2:	29 f5       	brne	.+74     	; 0x9bfe <_handle_select_helper+0xea>
	{
		ps->char_index--;
    9bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    9bb6:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    9bb8:	87 ff       	sbrs	r24, 7
    9bba:	f4 cf       	rjmp	.-24     	; 0x9ba4 <_handle_select_helper+0x90>
    9bbc:	1c 82       	std	Y+4, r1	; 0x04
    9bbe:	55 c0       	rjmp	.+170    	; 0x9c6a <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    9bc0:	ab 2b       	or	r26, r27
    9bc2:	61 f0       	breq	.+24     	; 0x9bdc <_handle_select_helper+0xc8>
    9bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    9bc6:	81 30       	cpi	r24, 0x01	; 1
    9bc8:	e1 f5       	brne	.+120    	; 0x9c42 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]--;
    9bca:	8c 81       	ldd	r24, Y+4	; 0x04
    9bcc:	c8 0f       	add	r28, r24
    9bce:	d1 1d       	adc	r29, r1
    9bd0:	99 81       	ldd	r25, Y+1	; 0x01
    9bd2:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    9bd4:	91 34       	cpi	r25, 0x41	; 65
    9bd6:	70 f4       	brcc	.+28     	; 0x9bf4 <_handle_select_helper+0xe0>
    9bd8:	81 e4       	ldi	r24, 0x41	; 65
    9bda:	0f c0       	rjmp	.+30     	; 0x9bfa <_handle_select_helper+0xe6>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    9bdc:	67 2b       	or	r22, r23
    9bde:	89 f0       	breq	.+34     	; 0x9c02 <_handle_select_helper+0xee>
    9be0:	8d 81       	ldd	r24, Y+5	; 0x05
    9be2:	81 30       	cpi	r24, 0x01	; 1
    9be4:	71 f5       	brne	.+92     	; 0x9c42 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]++;
    9be6:	8c 81       	ldd	r24, Y+4	; 0x04
    9be8:	c8 0f       	add	r28, r24
    9bea:	d1 1d       	adc	r29, r1
    9bec:	99 81       	ldd	r25, Y+1	; 0x01
    9bee:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    9bf0:	9b 35       	cpi	r25, 0x5B	; 91
    9bf2:	10 f4       	brcc	.+4      	; 0x9bf8 <_handle_select_helper+0xe4>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    9bf4:	99 83       	std	Y+1, r25	; 0x01
    9bf6:	39 c0       	rjmp	.+114    	; 0x9c6a <_handle_select_helper+0x156>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    9bf8:	8a e5       	ldi	r24, 0x5A	; 90
    9bfa:	89 83       	std	Y+1, r24	; 0x01
    9bfc:	36 c0       	rjmp	.+108    	; 0x9c6a <_handle_select_helper+0x156>
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    9bfe:	67 2b       	or	r22, r23
    9c00:	01 f5       	brne	.+64     	; 0x9c42 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    9c02:	ef 2b       	or	r30, r31
    9c04:	f1 f0       	breq	.+60     	; 0x9c42 <_handle_select_helper+0x12e>
    9c06:	4d 81       	ldd	r20, Y+5	; 0x05
    9c08:	41 30       	cpi	r20, 0x01	; 1
    9c0a:	d9 f4       	brne	.+54     	; 0x9c42 <_handle_select_helper+0x12e>
	{
		player->handle_id = ps->handle_id;
    9c0c:	fe 01       	movw	r30, r28
    9c0e:	21 91       	ld	r18, Z+
    9c10:	8f 01       	movw	r16, r30
    9c12:	fc 01       	movw	r30, r24
    9c14:	22 87       	std	Z+10, r18	; 0x0a
		LBCopyChars(player->handle, ps->handle, 3);
    9c16:	43 e0       	ldi	r20, 0x03	; 3
    9c18:	b8 01       	movw	r22, r16
    9c1a:	0b 96       	adiw	r24, 0x0b	; 11
    9c1c:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    9c20:	88 81       	ld	r24, Y
    9c22:	f3 e0       	ldi	r31, 0x03	; 3
    9c24:	8f 02       	muls	r24, r31
    9c26:	c0 01       	movw	r24, r0
    9c28:	11 24       	eor	r1, r1
    9c2a:	43 e0       	ldi	r20, 0x03	; 3
    9c2c:	b8 01       	movw	r22, r16
    9c2e:	8a 5d       	subi	r24, 0xDA	; 218
    9c30:	9e 4f       	sbci	r25, 0xFE	; 254
    9c32:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9c36:	84 e2       	ldi	r24, 0x24	; 36
    9c38:	91 e0       	ldi	r25, 0x01	; 1
    9c3a:	0e 94 a7 31 	call	0x634e	; 0x634e <EepromWriteBlock>
	{
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    9c3e:	82 e0       	ldi	r24, 0x02	; 2
    9c40:	0a c0       	rjmp	.+20     	; 0x9c56 <_handle_select_helper+0x142>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    9c42:	31 ff       	sbrs	r19, 1
    9c44:	12 c0       	rjmp	.+36     	; 0x9c6a <_handle_select_helper+0x156>
    9c46:	8d 81       	ldd	r24, Y+5	; 0x05
    9c48:	81 30       	cpi	r24, 0x01	; 1
    9c4a:	11 f4       	brne	.+4      	; 0x9c50 <_handle_select_helper+0x13c>
	{
		ps->select_state = SELECTING;
    9c4c:	1d 82       	std	Y+5, r1	; 0x05
    9c4e:	0d c0       	rjmp	.+26     	; 0x9c6a <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    9c50:	82 30       	cpi	r24, 0x02	; 2
    9c52:	19 f4       	brne	.+6      	; 0x9c5a <_handle_select_helper+0x146>
		{
			ps->select_state = EDITING;
    9c54:	81 e0       	ldi	r24, 0x01	; 1
    9c56:	8d 83       	std	Y+5, r24	; 0x05
    9c58:	08 c0       	rjmp	.+16     	; 0x9c6a <_handle_select_helper+0x156>
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
    9c5a:	0e 94 ee 41 	call	0x83dc	; 0x83dc <fade_through>
		load_splash();
	}
}
    9c5e:	df 91       	pop	r29
    9c60:	cf 91       	pop	r28
    9c62:	1f 91       	pop	r17
    9c64:	0f 91       	pop	r16
			ps->select_state = EDITING;
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
		load_splash();
    9c66:	0c 94 6e 4a 	jmp	0x94dc	; 0x94dc <load_splash>
	}
}
    9c6a:	df 91       	pop	r29
    9c6c:	cf 91       	pop	r28
    9c6e:	1f 91       	pop	r17
    9c70:	0f 91       	pop	r16
    9c72:	08 95       	ret

00009c74 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    9c74:	af 92       	push	r10
    9c76:	bf 92       	push	r11
    9c78:	cf 92       	push	r12
    9c7a:	df 92       	push	r13
    9c7c:	ef 92       	push	r14
    9c7e:	ff 92       	push	r15
    9c80:	0f 93       	push	r16
    9c82:	1f 93       	push	r17
    9c84:	cf 93       	push	r28
    9c86:	df 93       	push	r29
    9c88:	00 d0       	rcall	.+0      	; 0x9c8a <_handle_select_render_helper+0x16>
    9c8a:	1f 92       	push	r1
    9c8c:	cd b7       	in	r28, 0x3d	; 61
    9c8e:	de b7       	in	r29, 0x3e	; 62
    9c90:	7c 01       	movw	r14, r24
    9c92:	b4 2e       	mov	r11, r20
    9c94:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    9c96:	80 e2       	ldi	r24, 0x20	; 32
    9c98:	89 83       	std	Y+1, r24	; 0x01
    9c9a:	8a 83       	std	Y+2, r24	; 0x02
    9c9c:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    9c9e:	f7 01       	movw	r30, r14
    9ca0:	85 81       	ldd	r24, Z+5	; 0x05
    9ca2:	81 11       	cpse	r24, r1
    9ca4:	1d c0       	rjmp	.+58     	; 0x9ce0 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_ball, 0);
    9ca6:	40 e0       	ldi	r20, 0x00	; 0
    9ca8:	6b e3       	ldi	r22, 0x3B	; 59
    9caa:	78 e2       	ldi	r23, 0x28	; 40
    9cac:	82 2f       	mov	r24, r18
    9cae:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    9cb2:	40 e0       	ldi	r20, 0x00	; 0
    9cb4:	60 e8       	ldi	r22, 0x80	; 128
    9cb6:	78 e2       	ldi	r23, 0x28	; 40
    9cb8:	81 e0       	ldi	r24, 0x01	; 1
    9cba:	81 0f       	add	r24, r17
    9cbc:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    9cc0:	f7 01       	movw	r30, r14
    9cc2:	40 81       	ld	r20, Z
    9cc4:	44 0f       	add	r20, r20
    9cc6:	44 0f       	add	r20, r20
    9cc8:	44 0f       	add	r20, r20
    9cca:	40 5c       	subi	r20, 0xC0	; 192
    9ccc:	01 e0       	ldi	r16, 0x01	; 1
    9cce:	21 e0       	ldi	r18, 0x01	; 1
    9cd0:	6b 2d       	mov	r22, r11
    9cd2:	66 0f       	add	r22, r22
    9cd4:	66 0f       	add	r22, r22
    9cd6:	66 0f       	add	r22, r22
    9cd8:	81 2f       	mov	r24, r17
    9cda:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
    9cde:	6f c0       	rjmp	.+222    	; 0x9dbe <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    9ce0:	81 30       	cpi	r24, 0x01	; 1
    9ce2:	09 f0       	breq	.+2      	; 0x9ce6 <_handle_select_render_helper+0x72>
    9ce4:	44 c0       	rjmp	.+136    	; 0x9d6e <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_ball, 0);
    9ce6:	40 e0       	ldi	r20, 0x00	; 0
    9ce8:	6b e3       	ldi	r22, 0x3B	; 59
    9cea:	78 e2       	ldi	r23, 0x28	; 40
    9cec:	82 2f       	mov	r24, r18
    9cee:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
		MapSprite2(idx+1, map_ball, 0);
    9cf2:	aa 24       	eor	r10, r10
    9cf4:	a3 94       	inc	r10
    9cf6:	a1 0e       	add	r10, r17
    9cf8:	40 e0       	ldi	r20, 0x00	; 0
    9cfa:	6b e3       	ldi	r22, 0x3B	; 59
    9cfc:	78 e2       	ldi	r23, 0x28	; 40
    9cfe:	8a 2d       	mov	r24, r10
    9d00:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    9d04:	cb 2c       	mov	r12, r11
    9d06:	d1 2c       	mov	r13, r1
    9d08:	f5 e0       	ldi	r31, 0x05	; 5
    9d0a:	cf 0e       	add	r12, r31
    9d0c:	d1 1c       	adc	r13, r1
    9d0e:	f7 01       	movw	r30, r14
    9d10:	40 81       	ld	r20, Z
    9d12:	44 0f       	add	r20, r20
    9d14:	44 0f       	add	r20, r20
    9d16:	44 0f       	add	r20, r20
    9d18:	48 5c       	subi	r20, 0xC8	; 200
    9d1a:	84 81       	ldd	r24, Z+4	; 0x04
    9d1c:	b6 01       	movw	r22, r12
    9d1e:	68 0f       	add	r22, r24
    9d20:	71 1d       	adc	r23, r1
    9d22:	87 fd       	sbrc	r24, 7
    9d24:	7a 95       	dec	r23
    9d26:	66 0f       	add	r22, r22
    9d28:	66 0f       	add	r22, r22
    9d2a:	66 0f       	add	r22, r22
    9d2c:	01 e0       	ldi	r16, 0x01	; 1
    9d2e:	21 e0       	ldi	r18, 0x01	; 1
    9d30:	81 2f       	mov	r24, r17
    9d32:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    9d36:	f7 01       	movw	r30, r14
    9d38:	40 81       	ld	r20, Z
    9d3a:	44 0f       	add	r20, r20
    9d3c:	44 0f       	add	r20, r20
    9d3e:	44 0f       	add	r20, r20
    9d40:	48 5b       	subi	r20, 0xB8	; 184
    9d42:	84 81       	ldd	r24, Z+4	; 0x04
    9d44:	c8 0e       	add	r12, r24
    9d46:	d1 1c       	adc	r13, r1
    9d48:	87 fd       	sbrc	r24, 7
    9d4a:	da 94       	dec	r13
    9d4c:	6c 2d       	mov	r22, r12
    9d4e:	66 0f       	add	r22, r22
    9d50:	66 0f       	add	r22, r22
    9d52:	66 0f       	add	r22, r22
    9d54:	21 e0       	ldi	r18, 0x01	; 1
    9d56:	8a 2d       	mov	r24, r10
    9d58:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    9d5c:	43 e0       	ldi	r20, 0x03	; 3
    9d5e:	b7 01       	movw	r22, r14
    9d60:	6f 5f       	subi	r22, 0xFF	; 255
    9d62:	7f 4f       	sbci	r23, 0xFF	; 255
    9d64:	ce 01       	movw	r24, r28
    9d66:	01 96       	adiw	r24, 0x01	; 1
    9d68:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <LBCopyChars>
    9d6c:	28 c0       	rjmp	.+80     	; 0x9dbe <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    9d6e:	82 30       	cpi	r24, 0x02	; 2
    9d70:	31 f5       	brne	.+76     	; 0x9dbe <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    9d72:	c4 2e       	mov	r12, r20
    9d74:	d1 2c       	mov	r13, r1
    9d76:	48 e2       	ldi	r20, 0x28	; 40
    9d78:	65 e0       	ldi	r22, 0x05	; 5
    9d7a:	70 e0       	ldi	r23, 0x00	; 0
    9d7c:	c6 01       	movw	r24, r12
    9d7e:	06 96       	adiw	r24, 0x06	; 6
    9d80:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    9d84:	23 e0       	ldi	r18, 0x03	; 3
    9d86:	a7 01       	movw	r20, r14
    9d88:	4f 5f       	subi	r20, 0xFF	; 255
    9d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    9d8c:	65 e0       	ldi	r22, 0x05	; 5
    9d8e:	87 e0       	ldi	r24, 0x07	; 7
    9d90:	8b 0d       	add	r24, r11
    9d92:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    9d96:	49 e2       	ldi	r20, 0x29	; 41
    9d98:	65 e0       	ldi	r22, 0x05	; 5
    9d9a:	70 e0       	ldi	r23, 0x00	; 0
    9d9c:	c6 01       	movw	r24, r12
    9d9e:	0a 96       	adiw	r24, 0x0a	; 10
    9da0:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <PrintChar>
		MapSprite2(idx, map_none, 0);
    9da4:	40 e0       	ldi	r20, 0x00	; 0
    9da6:	60 e8       	ldi	r22, 0x80	; 128
    9da8:	78 e2       	ldi	r23, 0x28	; 40
    9daa:	81 2f       	mov	r24, r17
    9dac:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    9db0:	40 e0       	ldi	r20, 0x00	; 0
    9db2:	60 e8       	ldi	r22, 0x80	; 128
    9db4:	78 e2       	ldi	r23, 0x28	; 40
    9db6:	81 e0       	ldi	r24, 0x01	; 1
    9db8:	81 0f       	add	r24, r17
    9dba:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    9dbe:	f7 01       	movw	r30, r14
    9dc0:	60 81       	ld	r22, Z
    9dc2:	68 5f       	subi	r22, 0xF8	; 248
    9dc4:	23 e0       	ldi	r18, 0x03	; 3
    9dc6:	ae 01       	movw	r20, r28
    9dc8:	4f 5f       	subi	r20, 0xFF	; 255
    9dca:	5f 4f       	sbci	r21, 0xFF	; 255
    9dcc:	85 e0       	ldi	r24, 0x05	; 5
    9dce:	8b 0d       	add	r24, r11
    9dd0:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <LBPrintStr>
}
    9dd4:	0f 90       	pop	r0
    9dd6:	0f 90       	pop	r0
    9dd8:	0f 90       	pop	r0
    9dda:	df 91       	pop	r29
    9ddc:	cf 91       	pop	r28
    9dde:	1f 91       	pop	r17
    9de0:	0f 91       	pop	r16
    9de2:	ff 90       	pop	r15
    9de4:	ef 90       	pop	r14
    9de6:	df 90       	pop	r13
    9de8:	cf 90       	pop	r12
    9dea:	bf 90       	pop	r11
    9dec:	af 90       	pop	r10
    9dee:	08 95       	ret

00009df0 <load_handle_select>:

void load_handle_select()
{
    9df0:	8f 92       	push	r8
    9df2:	9f 92       	push	r9
    9df4:	af 92       	push	r10
    9df6:	bf 92       	push	r11
    9df8:	cf 92       	push	r12
    9dfa:	df 92       	push	r13
    9dfc:	ef 92       	push	r14
    9dfe:	ff 92       	push	r15
    9e00:	0f 93       	push	r16
    9e02:	1f 93       	push	r17
    9e04:	cf 93       	push	r28
    9e06:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    9e08:	82 e0       	ldi	r24, 0x02	; 2
    9e0a:	80 93 51 0c 	sts	0x0C51, r24
	clear_sprites();
    9e0e:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    9e12:	40 e0       	ldi	r20, 0x00	; 0
    9e14:	6a e7       	ldi	r22, 0x7A	; 122
    9e16:	78 e2       	ldi	r23, 0x28	; 40
    9e18:	80 e0       	ldi	r24, 0x00	; 0
    9e1a:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    9e1e:	40 e0       	ldi	r20, 0x00	; 0
    9e20:	62 e6       	ldi	r22, 0x62	; 98
    9e22:	78 e2       	ldi	r23, 0x28	; 40
    9e24:	84 e0       	ldi	r24, 0x04	; 4
    9e26:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    9e2a:	02 e0       	ldi	r16, 0x02	; 2
    9e2c:	22 e0       	ldi	r18, 0x02	; 2
    9e2e:	40 e2       	ldi	r20, 0x20	; 32
    9e30:	68 e1       	ldi	r22, 0x18	; 24
    9e32:	80 e0       	ldi	r24, 0x00	; 0
    9e34:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    9e38:	22 e0       	ldi	r18, 0x02	; 2
    9e3a:	40 e2       	ldi	r20, 0x20	; 32
    9e3c:	60 ea       	ldi	r22, 0xA0	; 160
    9e3e:	84 e0       	ldi	r24, 0x04	; 4
    9e40:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
	Print(9, 1, strHandlesTitle);
    9e44:	47 e9       	ldi	r20, 0x97	; 151
    9e46:	5a e0       	ldi	r21, 0x0A	; 10
    9e48:	61 e0       	ldi	r22, 0x01	; 1
    9e4a:	70 e0       	ldi	r23, 0x00	; 0
    9e4c:	89 e0       	ldi	r24, 0x09	; 9
    9e4e:	90 e0       	ldi	r25, 0x00	; 0
    9e50:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(6, 5, strPlayer1);
    9e54:	46 e8       	ldi	r20, 0x86	; 134
    9e56:	5a e0       	ldi	r21, 0x0A	; 10
    9e58:	65 e0       	ldi	r22, 0x05	; 5
    9e5a:	70 e0       	ldi	r23, 0x00	; 0
    9e5c:	86 e0       	ldi	r24, 0x06	; 6
    9e5e:	90 e0       	ldi	r25, 0x00	; 0
    9e60:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(23, 5, strPlayer2);
    9e64:	43 e8       	ldi	r20, 0x83	; 131
    9e66:	5a e0       	ldi	r21, 0x0A	; 10
    9e68:	65 e0       	ldi	r22, 0x05	; 5
    9e6a:	70 e0       	ldi	r23, 0x00	; 0
    9e6c:	87 e1       	ldi	r24, 0x17	; 23
    9e6e:	90 e0       	ldi	r25, 0x00	; 0
    9e70:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
    9e74:	86 e2       	ldi	r24, 0x26	; 38
    9e76:	e8 2e       	mov	r14, r24
    9e78:	81 e0       	ldi	r24, 0x01	; 1
    9e7a:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    9e7c:	c0 e0       	ldi	r28, 0x00	; 0
    9e7e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    9e80:	93 e0       	ldi	r25, 0x03	; 3
    9e82:	a9 2e       	mov	r10, r25
    9e84:	b1 2c       	mov	r11, r1
    9e86:	67 01       	movw	r12, r14
    9e88:	ce 01       	movw	r24, r28
    9e8a:	b5 01       	movw	r22, r10
    9e8c:	0e 94 9f 50 	call	0xa13e	; 0xa13e <__divmodhi4>
    9e90:	4c 01       	movw	r8, r24
    9e92:	8b 01       	movw	r16, r22
    9e94:	08 5f       	subi	r16, 0xF8	; 248
    9e96:	1f 4f       	sbci	r17, 0xFF	; 255
    9e98:	f7 01       	movw	r30, r14
    9e9a:	41 91       	ld	r20, Z+
    9e9c:	7f 01       	movw	r14, r30
    9e9e:	b8 01       	movw	r22, r16
    9ea0:	03 96       	adiw	r24, 0x03	; 3
    9ea2:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    9ea6:	f6 01       	movw	r30, r12
    9ea8:	40 81       	ld	r20, Z
    9eaa:	b8 01       	movw	r22, r16
    9eac:	c4 01       	movw	r24, r8
    9eae:	44 96       	adiw	r24, 0x14	; 20
    9eb0:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, strHandlesTitle);
	Print(6, 5, strPlayer1);
	Print(23, 5, strPlayer2);
	for (int i = 0; i < 27; i += 1)
    9eb4:	21 96       	adiw	r28, 0x01	; 1
    9eb6:	cb 31       	cpi	r28, 0x1B	; 27
    9eb8:	d1 05       	cpc	r29, r1
    9eba:	29 f7       	brne	.-54     	; 0x9e86 <load_handle_select+0x96>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
    9ebc:	48 e7       	ldi	r20, 0x78	; 120
    9ebe:	5a e0       	ldi	r21, 0x0A	; 10
    9ec0:	65 e1       	ldi	r22, 0x15	; 21
    9ec2:	70 e0       	ldi	r23, 0x00	; 0
    9ec4:	88 e0       	ldi	r24, 0x08	; 8
    9ec6:	90 e0       	ldi	r25, 0x00	; 0
    9ec8:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(8, 22, strConfirmHandle);
    9ecc:	4c e6       	ldi	r20, 0x6C	; 108
    9ece:	5a e0       	ldi	r21, 0x0A	; 10
    9ed0:	66 e1       	ldi	r22, 0x16	; 22
    9ed2:	70 e0       	ldi	r23, 0x00	; 0
    9ed4:	88 e0       	ldi	r24, 0x08	; 8
    9ed6:	90 e0       	ldi	r25, 0x00	; 0
    9ed8:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(8, 23, strCancelHandle);
    9edc:	41 e6       	ldi	r20, 0x61	; 97
    9ede:	5a e0       	ldi	r21, 0x0A	; 10
    9ee0:	67 e1       	ldi	r22, 0x17	; 23
    9ee2:	70 e0       	ldi	r23, 0x00	; 0
    9ee4:	88 e0       	ldi	r24, 0x08	; 8
    9ee6:	90 e0       	ldi	r25, 0x00	; 0
    9ee8:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>
	Print(8, 24, strChangeHandle);
    9eec:	42 e5       	ldi	r20, 0x52	; 82
    9eee:	5a e0       	ldi	r21, 0x0A	; 10
    9ef0:	68 e1       	ldi	r22, 0x18	; 24
    9ef2:	70 e0       	ldi	r23, 0x00	; 0
    9ef4:	88 e0       	ldi	r24, 0x08	; 8
    9ef6:	90 e0       	ldi	r25, 0x00	; 0
}
    9ef8:	df 91       	pop	r29
    9efa:	cf 91       	pop	r28
    9efc:	1f 91       	pop	r17
    9efe:	0f 91       	pop	r16
    9f00:	ff 90       	pop	r15
    9f02:	ef 90       	pop	r14
    9f04:	df 90       	pop	r13
    9f06:	cf 90       	pop	r12
    9f08:	bf 90       	pop	r11
    9f0a:	af 90       	pop	r10
    9f0c:	9f 90       	pop	r9
    9f0e:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
	Print(8, 22, strConfirmHandle);
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
    9f10:	0c 94 69 3e 	jmp	0x7cd2	; 0x7cd2 <Print>

00009f14 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    9f14:	0f 93       	push	r16
    9f16:	cf 93       	push	r28
    9f18:	df 93       	push	r29
    9f1a:	ec 01       	movw	r28, r24
	// Render
	switch (game.selection)
    9f1c:	90 91 54 0c 	lds	r25, 0x0C54
    9f20:	91 30       	cpi	r25, 0x01	; 1
    9f22:	41 f0       	breq	.+16     	; 0x9f34 <update_splash+0x20>
    9f24:	92 30       	cpi	r25, 0x02	; 2
    9f26:	51 f0       	breq	.+20     	; 0x9f3c <update_splash+0x28>
    9f28:	91 11       	cpse	r25, r1
    9f2a:	0f c0       	rjmp	.+30     	; 0x9f4a <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    9f2c:	01 e0       	ldi	r16, 0x01	; 1
    9f2e:	21 e0       	ldi	r18, 0x01	; 1
    9f30:	48 e6       	ldi	r20, 0x68	; 104
    9f32:	07 c0       	rjmp	.+14     	; 0x9f42 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    9f34:	01 e0       	ldi	r16, 0x01	; 1
    9f36:	21 e0       	ldi	r18, 0x01	; 1
    9f38:	40 e7       	ldi	r20, 0x70	; 112
    9f3a:	03 c0       	rjmp	.+6      	; 0x9f42 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    9f3c:	01 e0       	ldi	r16, 0x01	; 1
    9f3e:	21 e0       	ldi	r18, 0x01	; 1
    9f40:	48 e7       	ldi	r20, 0x78	; 120
    9f42:	60 e3       	ldi	r22, 0x30	; 48
    9f44:	80 e0       	ldi	r24, 0x00	; 0
    9f46:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <MoveSprite>
			break;
	}
	Print(9, 21, strSelectHandle);
    9f4a:	48 e7       	ldi	r20, 0x78	; 120
    9f4c:	5a e0       	ldi	r21, 0x0A	; 10
    9f4e:	65 e1       	ldi	r22, 0x15	; 21
    9f50:	70 e0       	ldi	r23, 0x00	; 0
    9f52:	89 e0       	ldi	r24, 0x09	; 9
    9f54:	90 e0       	ldi	r25, 0x00	; 0
    9f56:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <Print>

	// Update
	if (p1->pressed & BTN_UP)
    9f5a:	88 81       	ld	r24, Y
    9f5c:	99 81       	ldd	r25, Y+1	; 0x01
    9f5e:	84 ff       	sbrs	r24, 4
    9f60:	08 c0       	rjmp	.+16     	; 0x9f72 <update_splash+0x5e>
	{
		game.selection--;
    9f62:	80 91 54 0c 	lds	r24, 0x0C54
    9f66:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    9f68:	87 ff       	sbrs	r24, 7
    9f6a:	0b c0       	rjmp	.+22     	; 0x9f82 <update_splash+0x6e>
    9f6c:	10 92 54 0c 	sts	0x0C54, r1
    9f70:	2d c0       	rjmp	.+90     	; 0x9fcc <update_splash+0xb8>
	}
	else if (p1->pressed & BTN_DOWN)
    9f72:	85 ff       	sbrs	r24, 5
    9f74:	09 c0       	rjmp	.+18     	; 0x9f88 <update_splash+0x74>
	{
		game.selection++;
    9f76:	80 91 54 0c 	lds	r24, 0x0C54
    9f7a:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    9f7c:	83 30       	cpi	r24, 0x03	; 3
    9f7e:	0c f0       	brlt	.+2      	; 0x9f82 <update_splash+0x6e>
    9f80:	82 e0       	ldi	r24, 0x02	; 2
    9f82:	80 93 54 0c 	sts	0x0C54, r24
    9f86:	22 c0       	rjmp	.+68     	; 0x9fcc <update_splash+0xb8>
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    9f88:	90 ff       	sbrs	r25, 0
    9f8a:	20 c0       	rjmp	.+64     	; 0x9fcc <update_splash+0xb8>
    9f8c:	80 91 54 0c 	lds	r24, 0x0C54
    9f90:	82 30       	cpi	r24, 0x02	; 2
    9f92:	78 f4       	brcc	.+30     	; 0x9fb2 <update_splash+0x9e>
	{
		p1s.select_state = SELECTING;
    9f94:	10 92 d5 0b 	sts	0x0BD5, r1
		p2s.select_state = SELECTING;
    9f98:	10 92 cf 0b 	sts	0x0BCF, r1
		fade_through();
    9f9c:	0e 94 ee 41 	call	0x83dc	; 0x83dc <fade_through>
		load_eeprom(&handles);
    9fa0:	84 e2       	ldi	r24, 0x24	; 36
    9fa2:	91 e0       	ldi	r25, 0x01	; 1
    9fa4:	0e 94 dc 41 	call	0x83b8	; 0x83b8 <load_eeprom>
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    9fa8:	df 91       	pop	r29
    9faa:	cf 91       	pop	r28
    9fac:	0f 91       	pop	r16
	{
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    9fae:	0c 94 f8 4e 	jmp	0x9df0	; 0x9df0 <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    9fb2:	82 30       	cpi	r24, 0x02	; 2
    9fb4:	59 f4       	brne	.+22     	; 0x9fcc <update_splash+0xb8>
	{
		fade_through();
    9fb6:	0e 94 ee 41 	call	0x83dc	; 0x83dc <fade_through>
		load_eeprom(&scores);
    9fba:	84 e0       	ldi	r24, 0x04	; 4
    9fbc:	91 e0       	ldi	r25, 0x01	; 1
    9fbe:	0e 94 dc 41 	call	0x83b8	; 0x83b8 <load_eeprom>
		load_tank_rank();
		return;
	}
}
    9fc2:	df 91       	pop	r29
    9fc4:	cf 91       	pop	r28
    9fc6:	0f 91       	pop	r16
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    9fc8:	0c 94 9e 4a 	jmp	0x953c	; 0x953c <load_tank_rank>
		return;
	}
}
    9fcc:	df 91       	pop	r29
    9fce:	cf 91       	pop	r28
    9fd0:	0f 91       	pop	r16
    9fd2:	08 95       	ret

00009fd4 <update_handle_select>:
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    9fd4:	0f 93       	push	r16
    9fd6:	1f 93       	push	r17
    9fd8:	cf 93       	push	r28
    9fda:	df 93       	push	r29
    9fdc:	8c 01       	movw	r16, r24
    9fde:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    9fe0:	28 e0       	ldi	r18, 0x08	; 8
    9fe2:	42 e0       	ldi	r20, 0x02	; 2
    9fe4:	bc 01       	movw	r22, r24
    9fe6:	80 ed       	ldi	r24, 0xD0	; 208
    9fe8:	9b e0       	ldi	r25, 0x0B	; 11
    9fea:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <_handle_select_render_helper>
	if (game.selection == PVP)
    9fee:	80 91 54 0c 	lds	r24, 0x0C54
    9ff2:	81 30       	cpi	r24, 0x01	; 1
    9ff4:	39 f4       	brne	.+14     	; 0xa004 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 10);
    9ff6:	2a e0       	ldi	r18, 0x0A	; 10
    9ff8:	43 e1       	ldi	r20, 0x13	; 19
    9ffa:	be 01       	movw	r22, r28
    9ffc:	8a ec       	ldi	r24, 0xCA	; 202
    9ffe:	9b e0       	ldi	r25, 0x0B	; 11
    a000:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    a004:	45 e5       	ldi	r20, 0x55	; 85
    a006:	5c e0       	ldi	r21, 0x0C	; 12
    a008:	b8 01       	movw	r22, r16
    a00a:	80 ed       	ldi	r24, 0xD0	; 208
    a00c:	9b e0       	ldi	r25, 0x0B	; 11
    a00e:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    a012:	10 91 d5 0b 	lds	r17, 0x0BD5
	if (game.selection == PVP)
    a016:	80 91 54 0c 	lds	r24, 0x0C54
    a01a:	81 30       	cpi	r24, 0x01	; 1
    a01c:	19 f0       	breq	.+6      	; 0xa024 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    a01e:	12 30       	cpi	r17, 0x02	; 2
    a020:	69 f0       	breq	.+26     	; 0xa03c <update_handle_select+0x68>
    a022:	21 c0       	rjmp	.+66     	; 0xa066 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    a024:	46 ec       	ldi	r20, 0xC6	; 198
    a026:	5f e0       	ldi	r21, 0x0F	; 15
    a028:	be 01       	movw	r22, r28
    a02a:	8a ec       	ldi	r24, 0xCA	; 202
    a02c:	9b e0       	ldi	r25, 0x0B	; 11
    a02e:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    a032:	80 91 cf 0b 	lds	r24, 0x0BCF
    a036:	82 30       	cpi	r24, 0x02	; 2
    a038:	b1 f4       	brne	.+44     	; 0xa066 <update_handle_select+0x92>
    a03a:	f1 cf       	rjmp	.-30     	; 0xa01e <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    a03c:	80 91 54 0c 	lds	r24, 0x0C54
    a040:	81 11       	cpse	r24, r1
    a042:	0a c0       	rjmp	.+20     	; 0xa058 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    a044:	89 e0       	ldi	r24, 0x09	; 9
    a046:	80 93 d0 0f 	sts	0x0FD0, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    a04a:	43 e0       	ldi	r20, 0x03	; 3
    a04c:	61 e4       	ldi	r22, 0x41	; 65
    a04e:	71 e0       	ldi	r23, 0x01	; 1
    a050:	81 ed       	ldi	r24, 0xD1	; 209
    a052:	9f e0       	ldi	r25, 0x0F	; 15
    a054:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <LBCopyChars>
		}
		level_transition(0);
    a058:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    a05a:	df 91       	pop	r29
    a05c:	cf 91       	pop	r28
    a05e:	1f 91       	pop	r17
    a060:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    a062:	0c 94 3f 4a 	jmp	0x947e	; 0x947e <level_transition>
	}
}
    a066:	df 91       	pop	r29
    a068:	cf 91       	pop	r28
    a06a:	1f 91       	pop	r17
    a06c:	0f 91       	pop	r16
    a06e:	08 95       	ret

0000a070 <main>:

int main()
{
	// Initialize
	SetMasterVolume(0);
    a070:	80 e0       	ldi	r24, 0x00	; 0
    a072:	0e 94 49 36 	call	0x6c92	; 0x6c92 <SetMasterVolume>
	StopSong();
    a076:	0e 94 0a 33 	call	0x6614	; 0x6614 <StopSong>
	SetTileTable(tiles_data);
    a07a:	84 e4       	ldi	r24, 0x44	; 68
    a07c:	95 e3       	ldi	r25, 0x35	; 53
    a07e:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    a082:	84 e4       	ldi	r24, 0x44	; 68
    a084:	99 e2       	ldi	r25, 0x29	; 41
    a086:	0e 94 c4 30 	call	0x6188	; 0x6188 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    a08a:	8f e2       	ldi	r24, 0x2F	; 47
    a08c:	0e 94 e5 30 	call	0x61ca	; 0x61ca <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    a090:	60 e0       	ldi	r22, 0x00	; 0
    a092:	83 e0       	ldi	r24, 0x03	; 3
    a094:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <FadeIn>
	init_game_state();
    a098:	0e 94 aa 41 	call	0x8354	; 0x8354 <init_game_state>
	load_splash();
    a09c:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <load_splash>

	while (1)
	{
		WaitVsync(1);
    a0a0:	81 e0       	ldi	r24, 0x01	; 1
    a0a2:	90 e0       	ldi	r25, 0x00	; 0
    a0a4:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    a0a8:	6b e4       	ldi	r22, 0x4B	; 75
    a0aa:	7c e0       	ldi	r23, 0x0C	; 12
    a0ac:	81 ed       	ldi	r24, 0xD1	; 209
    a0ae:	9c e0       	ldi	r25, 0x0C	; 12
    a0b0:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <LBGetJoyPadState>
		switch (game.current_screen)
    a0b4:	80 91 51 0c 	lds	r24, 0x0C51
    a0b8:	81 30       	cpi	r24, 0x01	; 1
    a0ba:	99 f0       	breq	.+38     	; 0xa0e2 <main+0x72>
    a0bc:	58 f0       	brcs	.+22     	; 0xa0d4 <main+0x64>
    a0be:	82 30       	cpi	r24, 0x02	; 2
    a0c0:	b9 f0       	breq	.+46     	; 0xa0f0 <main+0x80>
    a0c2:	83 30       	cpi	r24, 0x03	; 3
    a0c4:	69 f7       	brne	.-38     	; 0xa0a0 <main+0x30>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				/* p2 should be replaced by AI input for Player v CPU */
				update_level(&p1, &p2);
    a0c6:	6b e4       	ldi	r22, 0x4B	; 75
    a0c8:	7c e0       	ldi	r23, 0x0C	; 12
    a0ca:	81 ed       	ldi	r24, 0xD1	; 209
    a0cc:	9c e0       	ldi	r25, 0x0C	; 12
    a0ce:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <update_level>
				break;
    a0d2:	e6 cf       	rjmp	.-52     	; 0xa0a0 <main+0x30>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    a0d4:	6b e4       	ldi	r22, 0x4B	; 75
    a0d6:	7c e0       	ldi	r23, 0x0C	; 12
    a0d8:	81 ed       	ldi	r24, 0xD1	; 209
    a0da:	9c e0       	ldi	r25, 0x0C	; 12
    a0dc:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <update_splash>
				break;
    a0e0:	df cf       	rjmp	.-66     	; 0xa0a0 <main+0x30>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    a0e2:	6b e4       	ldi	r22, 0x4B	; 75
    a0e4:	7c e0       	ldi	r23, 0x0C	; 12
    a0e6:	81 ed       	ldi	r24, 0xD1	; 209
    a0e8:	9c e0       	ldi	r25, 0x0C	; 12
    a0ea:	0e 94 80 4d 	call	0x9b00	; 0x9b00 <update_tank_rank>
				break;
    a0ee:	d8 cf       	rjmp	.-80     	; 0xa0a0 <main+0x30>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    a0f0:	6b e4       	ldi	r22, 0x4B	; 75
    a0f2:	7c e0       	ldi	r23, 0x0C	; 12
    a0f4:	81 ed       	ldi	r24, 0xD1	; 209
    a0f6:	9c e0       	ldi	r25, 0x0C	; 12
    a0f8:	0e 94 ea 4f 	call	0x9fd4	; 0x9fd4 <update_handle_select>
				break;
    a0fc:	d1 cf       	rjmp	.-94     	; 0xa0a0 <main+0x30>

0000a0fe <__udivmodqi4>:
    a0fe:	99 1b       	sub	r25, r25
    a100:	79 e0       	ldi	r23, 0x09	; 9
    a102:	04 c0       	rjmp	.+8      	; 0xa10c <__udivmodqi4_ep>

0000a104 <__udivmodqi4_loop>:
    a104:	99 1f       	adc	r25, r25
    a106:	96 17       	cp	r25, r22
    a108:	08 f0       	brcs	.+2      	; 0xa10c <__udivmodqi4_ep>
    a10a:	96 1b       	sub	r25, r22

0000a10c <__udivmodqi4_ep>:
    a10c:	88 1f       	adc	r24, r24
    a10e:	7a 95       	dec	r23
    a110:	c9 f7       	brne	.-14     	; 0xa104 <__udivmodqi4_loop>
    a112:	80 95       	com	r24
    a114:	08 95       	ret

0000a116 <__udivmodhi4>:
    a116:	aa 1b       	sub	r26, r26
    a118:	bb 1b       	sub	r27, r27
    a11a:	51 e1       	ldi	r21, 0x11	; 17
    a11c:	07 c0       	rjmp	.+14     	; 0xa12c <__udivmodhi4_ep>

0000a11e <__udivmodhi4_loop>:
    a11e:	aa 1f       	adc	r26, r26
    a120:	bb 1f       	adc	r27, r27
    a122:	a6 17       	cp	r26, r22
    a124:	b7 07       	cpc	r27, r23
    a126:	10 f0       	brcs	.+4      	; 0xa12c <__udivmodhi4_ep>
    a128:	a6 1b       	sub	r26, r22
    a12a:	b7 0b       	sbc	r27, r23

0000a12c <__udivmodhi4_ep>:
    a12c:	88 1f       	adc	r24, r24
    a12e:	99 1f       	adc	r25, r25
    a130:	5a 95       	dec	r21
    a132:	a9 f7       	brne	.-22     	; 0xa11e <__udivmodhi4_loop>
    a134:	80 95       	com	r24
    a136:	90 95       	com	r25
    a138:	bc 01       	movw	r22, r24
    a13a:	cd 01       	movw	r24, r26
    a13c:	08 95       	ret

0000a13e <__divmodhi4>:
    a13e:	97 fb       	bst	r25, 7
    a140:	07 2e       	mov	r0, r23
    a142:	16 f4       	brtc	.+4      	; 0xa148 <__divmodhi4+0xa>
    a144:	00 94       	com	r0
    a146:	07 d0       	rcall	.+14     	; 0xa156 <__divmodhi4_neg1>
    a148:	77 fd       	sbrc	r23, 7
    a14a:	09 d0       	rcall	.+18     	; 0xa15e <__divmodhi4_neg2>
    a14c:	0e 94 8b 50 	call	0xa116	; 0xa116 <__udivmodhi4>
    a150:	07 fc       	sbrc	r0, 7
    a152:	05 d0       	rcall	.+10     	; 0xa15e <__divmodhi4_neg2>
    a154:	3e f4       	brtc	.+14     	; 0xa164 <__divmodhi4_exit>

0000a156 <__divmodhi4_neg1>:
    a156:	90 95       	com	r25
    a158:	81 95       	neg	r24
    a15a:	9f 4f       	sbci	r25, 0xFF	; 255
    a15c:	08 95       	ret

0000a15e <__divmodhi4_neg2>:
    a15e:	70 95       	com	r23
    a160:	61 95       	neg	r22
    a162:	7f 4f       	sbci	r23, 0xFF	; 255

0000a164 <__divmodhi4_exit>:
    a164:	08 95       	ret

0000a166 <__tablejump2__>:
    a166:	ee 0f       	add	r30, r30
    a168:	ff 1f       	adc	r31, r31
    a16a:	05 90       	lpm	r0, Z+
    a16c:	f4 91       	lpm	r31, Z
    a16e:	e0 2d       	mov	r30, r0
    a170:	09 94       	ijmp

0000a172 <__subsf3>:
    a172:	50 58       	subi	r21, 0x80	; 128

0000a174 <__addsf3>:
    a174:	bb 27       	eor	r27, r27
    a176:	aa 27       	eor	r26, r26
    a178:	0e d0       	rcall	.+28     	; 0xa196 <__addsf3x>
    a17a:	70 c1       	rjmp	.+736    	; 0xa45c <__fp_round>
    a17c:	61 d1       	rcall	.+706    	; 0xa440 <__fp_pscA>
    a17e:	30 f0       	brcs	.+12     	; 0xa18c <__addsf3+0x18>
    a180:	66 d1       	rcall	.+716    	; 0xa44e <__fp_pscB>
    a182:	20 f0       	brcs	.+8      	; 0xa18c <__addsf3+0x18>
    a184:	31 f4       	brne	.+12     	; 0xa192 <__addsf3+0x1e>
    a186:	9f 3f       	cpi	r25, 0xFF	; 255
    a188:	11 f4       	brne	.+4      	; 0xa18e <__addsf3+0x1a>
    a18a:	1e f4       	brtc	.+6      	; 0xa192 <__addsf3+0x1e>
    a18c:	56 c1       	rjmp	.+684    	; 0xa43a <__fp_nan>
    a18e:	0e f4       	brtc	.+2      	; 0xa192 <__addsf3+0x1e>
    a190:	e0 95       	com	r30
    a192:	e7 fb       	bst	r30, 7
    a194:	4c c1       	rjmp	.+664    	; 0xa42e <__fp_inf>

0000a196 <__addsf3x>:
    a196:	e9 2f       	mov	r30, r25
    a198:	72 d1       	rcall	.+740    	; 0xa47e <__fp_split3>
    a19a:	80 f3       	brcs	.-32     	; 0xa17c <__addsf3+0x8>
    a19c:	ba 17       	cp	r27, r26
    a19e:	62 07       	cpc	r22, r18
    a1a0:	73 07       	cpc	r23, r19
    a1a2:	84 07       	cpc	r24, r20
    a1a4:	95 07       	cpc	r25, r21
    a1a6:	18 f0       	brcs	.+6      	; 0xa1ae <__addsf3x+0x18>
    a1a8:	71 f4       	brne	.+28     	; 0xa1c6 <__addsf3x+0x30>
    a1aa:	9e f5       	brtc	.+102    	; 0xa212 <__addsf3x+0x7c>
    a1ac:	8a c1       	rjmp	.+788    	; 0xa4c2 <__fp_zero>
    a1ae:	0e f4       	brtc	.+2      	; 0xa1b2 <__addsf3x+0x1c>
    a1b0:	e0 95       	com	r30
    a1b2:	0b 2e       	mov	r0, r27
    a1b4:	ba 2f       	mov	r27, r26
    a1b6:	a0 2d       	mov	r26, r0
    a1b8:	0b 01       	movw	r0, r22
    a1ba:	b9 01       	movw	r22, r18
    a1bc:	90 01       	movw	r18, r0
    a1be:	0c 01       	movw	r0, r24
    a1c0:	ca 01       	movw	r24, r20
    a1c2:	a0 01       	movw	r20, r0
    a1c4:	11 24       	eor	r1, r1
    a1c6:	ff 27       	eor	r31, r31
    a1c8:	59 1b       	sub	r21, r25
    a1ca:	99 f0       	breq	.+38     	; 0xa1f2 <__addsf3x+0x5c>
    a1cc:	59 3f       	cpi	r21, 0xF9	; 249
    a1ce:	50 f4       	brcc	.+20     	; 0xa1e4 <__addsf3x+0x4e>
    a1d0:	50 3e       	cpi	r21, 0xE0	; 224
    a1d2:	68 f1       	brcs	.+90     	; 0xa22e <__addsf3x+0x98>
    a1d4:	1a 16       	cp	r1, r26
    a1d6:	f0 40       	sbci	r31, 0x00	; 0
    a1d8:	a2 2f       	mov	r26, r18
    a1da:	23 2f       	mov	r18, r19
    a1dc:	34 2f       	mov	r19, r20
    a1de:	44 27       	eor	r20, r20
    a1e0:	58 5f       	subi	r21, 0xF8	; 248
    a1e2:	f3 cf       	rjmp	.-26     	; 0xa1ca <__addsf3x+0x34>
    a1e4:	46 95       	lsr	r20
    a1e6:	37 95       	ror	r19
    a1e8:	27 95       	ror	r18
    a1ea:	a7 95       	ror	r26
    a1ec:	f0 40       	sbci	r31, 0x00	; 0
    a1ee:	53 95       	inc	r21
    a1f0:	c9 f7       	brne	.-14     	; 0xa1e4 <__addsf3x+0x4e>
    a1f2:	7e f4       	brtc	.+30     	; 0xa212 <__addsf3x+0x7c>
    a1f4:	1f 16       	cp	r1, r31
    a1f6:	ba 0b       	sbc	r27, r26
    a1f8:	62 0b       	sbc	r22, r18
    a1fa:	73 0b       	sbc	r23, r19
    a1fc:	84 0b       	sbc	r24, r20
    a1fe:	ba f0       	brmi	.+46     	; 0xa22e <__addsf3x+0x98>
    a200:	91 50       	subi	r25, 0x01	; 1
    a202:	a1 f0       	breq	.+40     	; 0xa22c <__addsf3x+0x96>
    a204:	ff 0f       	add	r31, r31
    a206:	bb 1f       	adc	r27, r27
    a208:	66 1f       	adc	r22, r22
    a20a:	77 1f       	adc	r23, r23
    a20c:	88 1f       	adc	r24, r24
    a20e:	c2 f7       	brpl	.-16     	; 0xa200 <__addsf3x+0x6a>
    a210:	0e c0       	rjmp	.+28     	; 0xa22e <__addsf3x+0x98>
    a212:	ba 0f       	add	r27, r26
    a214:	62 1f       	adc	r22, r18
    a216:	73 1f       	adc	r23, r19
    a218:	84 1f       	adc	r24, r20
    a21a:	48 f4       	brcc	.+18     	; 0xa22e <__addsf3x+0x98>
    a21c:	87 95       	ror	r24
    a21e:	77 95       	ror	r23
    a220:	67 95       	ror	r22
    a222:	b7 95       	ror	r27
    a224:	f7 95       	ror	r31
    a226:	9e 3f       	cpi	r25, 0xFE	; 254
    a228:	08 f0       	brcs	.+2      	; 0xa22c <__addsf3x+0x96>
    a22a:	b3 cf       	rjmp	.-154    	; 0xa192 <__addsf3+0x1e>
    a22c:	93 95       	inc	r25
    a22e:	88 0f       	add	r24, r24
    a230:	08 f0       	brcs	.+2      	; 0xa234 <__addsf3x+0x9e>
    a232:	99 27       	eor	r25, r25
    a234:	ee 0f       	add	r30, r30
    a236:	97 95       	ror	r25
    a238:	87 95       	ror	r24
    a23a:	08 95       	ret

0000a23c <__cmpsf2>:
    a23c:	d4 d0       	rcall	.+424    	; 0xa3e6 <__fp_cmp>
    a23e:	08 f4       	brcc	.+2      	; 0xa242 <__cmpsf2+0x6>
    a240:	81 e0       	ldi	r24, 0x01	; 1
    a242:	08 95       	ret

0000a244 <__divsf3>:
    a244:	0c d0       	rcall	.+24     	; 0xa25e <__divsf3x>
    a246:	0a c1       	rjmp	.+532    	; 0xa45c <__fp_round>
    a248:	02 d1       	rcall	.+516    	; 0xa44e <__fp_pscB>
    a24a:	40 f0       	brcs	.+16     	; 0xa25c <__divsf3+0x18>
    a24c:	f9 d0       	rcall	.+498    	; 0xa440 <__fp_pscA>
    a24e:	30 f0       	brcs	.+12     	; 0xa25c <__divsf3+0x18>
    a250:	21 f4       	brne	.+8      	; 0xa25a <__divsf3+0x16>
    a252:	5f 3f       	cpi	r21, 0xFF	; 255
    a254:	19 f0       	breq	.+6      	; 0xa25c <__divsf3+0x18>
    a256:	eb c0       	rjmp	.+470    	; 0xa42e <__fp_inf>
    a258:	51 11       	cpse	r21, r1
    a25a:	34 c1       	rjmp	.+616    	; 0xa4c4 <__fp_szero>
    a25c:	ee c0       	rjmp	.+476    	; 0xa43a <__fp_nan>

0000a25e <__divsf3x>:
    a25e:	0f d1       	rcall	.+542    	; 0xa47e <__fp_split3>
    a260:	98 f3       	brcs	.-26     	; 0xa248 <__divsf3+0x4>

0000a262 <__divsf3_pse>:
    a262:	99 23       	and	r25, r25
    a264:	c9 f3       	breq	.-14     	; 0xa258 <__divsf3+0x14>
    a266:	55 23       	and	r21, r21
    a268:	b1 f3       	breq	.-20     	; 0xa256 <__divsf3+0x12>
    a26a:	95 1b       	sub	r25, r21
    a26c:	55 0b       	sbc	r21, r21
    a26e:	bb 27       	eor	r27, r27
    a270:	aa 27       	eor	r26, r26
    a272:	62 17       	cp	r22, r18
    a274:	73 07       	cpc	r23, r19
    a276:	84 07       	cpc	r24, r20
    a278:	38 f0       	brcs	.+14     	; 0xa288 <__divsf3_pse+0x26>
    a27a:	9f 5f       	subi	r25, 0xFF	; 255
    a27c:	5f 4f       	sbci	r21, 0xFF	; 255
    a27e:	22 0f       	add	r18, r18
    a280:	33 1f       	adc	r19, r19
    a282:	44 1f       	adc	r20, r20
    a284:	aa 1f       	adc	r26, r26
    a286:	a9 f3       	breq	.-22     	; 0xa272 <__divsf3_pse+0x10>
    a288:	33 d0       	rcall	.+102    	; 0xa2f0 <__divsf3_pse+0x8e>
    a28a:	0e 2e       	mov	r0, r30
    a28c:	3a f0       	brmi	.+14     	; 0xa29c <__divsf3_pse+0x3a>
    a28e:	e0 e8       	ldi	r30, 0x80	; 128
    a290:	30 d0       	rcall	.+96     	; 0xa2f2 <__divsf3_pse+0x90>
    a292:	91 50       	subi	r25, 0x01	; 1
    a294:	50 40       	sbci	r21, 0x00	; 0
    a296:	e6 95       	lsr	r30
    a298:	00 1c       	adc	r0, r0
    a29a:	ca f7       	brpl	.-14     	; 0xa28e <__divsf3_pse+0x2c>
    a29c:	29 d0       	rcall	.+82     	; 0xa2f0 <__divsf3_pse+0x8e>
    a29e:	fe 2f       	mov	r31, r30
    a2a0:	27 d0       	rcall	.+78     	; 0xa2f0 <__divsf3_pse+0x8e>
    a2a2:	66 0f       	add	r22, r22
    a2a4:	77 1f       	adc	r23, r23
    a2a6:	88 1f       	adc	r24, r24
    a2a8:	bb 1f       	adc	r27, r27
    a2aa:	26 17       	cp	r18, r22
    a2ac:	37 07       	cpc	r19, r23
    a2ae:	48 07       	cpc	r20, r24
    a2b0:	ab 07       	cpc	r26, r27
    a2b2:	b0 e8       	ldi	r27, 0x80	; 128
    a2b4:	09 f0       	breq	.+2      	; 0xa2b8 <__divsf3_pse+0x56>
    a2b6:	bb 0b       	sbc	r27, r27
    a2b8:	80 2d       	mov	r24, r0
    a2ba:	bf 01       	movw	r22, r30
    a2bc:	ff 27       	eor	r31, r31
    a2be:	93 58       	subi	r25, 0x83	; 131
    a2c0:	5f 4f       	sbci	r21, 0xFF	; 255
    a2c2:	2a f0       	brmi	.+10     	; 0xa2ce <__divsf3_pse+0x6c>
    a2c4:	9e 3f       	cpi	r25, 0xFE	; 254
    a2c6:	51 05       	cpc	r21, r1
    a2c8:	68 f0       	brcs	.+26     	; 0xa2e4 <__divsf3_pse+0x82>
    a2ca:	b1 c0       	rjmp	.+354    	; 0xa42e <__fp_inf>
    a2cc:	fb c0       	rjmp	.+502    	; 0xa4c4 <__fp_szero>
    a2ce:	5f 3f       	cpi	r21, 0xFF	; 255
    a2d0:	ec f3       	brlt	.-6      	; 0xa2cc <__divsf3_pse+0x6a>
    a2d2:	98 3e       	cpi	r25, 0xE8	; 232
    a2d4:	dc f3       	brlt	.-10     	; 0xa2cc <__divsf3_pse+0x6a>
    a2d6:	86 95       	lsr	r24
    a2d8:	77 95       	ror	r23
    a2da:	67 95       	ror	r22
    a2dc:	b7 95       	ror	r27
    a2de:	f7 95       	ror	r31
    a2e0:	9f 5f       	subi	r25, 0xFF	; 255
    a2e2:	c9 f7       	brne	.-14     	; 0xa2d6 <__divsf3_pse+0x74>
    a2e4:	88 0f       	add	r24, r24
    a2e6:	91 1d       	adc	r25, r1
    a2e8:	96 95       	lsr	r25
    a2ea:	87 95       	ror	r24
    a2ec:	97 f9       	bld	r25, 7
    a2ee:	08 95       	ret
    a2f0:	e1 e0       	ldi	r30, 0x01	; 1
    a2f2:	66 0f       	add	r22, r22
    a2f4:	77 1f       	adc	r23, r23
    a2f6:	88 1f       	adc	r24, r24
    a2f8:	bb 1f       	adc	r27, r27
    a2fa:	62 17       	cp	r22, r18
    a2fc:	73 07       	cpc	r23, r19
    a2fe:	84 07       	cpc	r24, r20
    a300:	ba 07       	cpc	r27, r26
    a302:	20 f0       	brcs	.+8      	; 0xa30c <__divsf3_pse+0xaa>
    a304:	62 1b       	sub	r22, r18
    a306:	73 0b       	sbc	r23, r19
    a308:	84 0b       	sbc	r24, r20
    a30a:	ba 0b       	sbc	r27, r26
    a30c:	ee 1f       	adc	r30, r30
    a30e:	88 f7       	brcc	.-30     	; 0xa2f2 <__divsf3_pse+0x90>
    a310:	e0 95       	com	r30
    a312:	08 95       	ret

0000a314 <__fixunssfsi>:
    a314:	bc d0       	rcall	.+376    	; 0xa48e <__fp_splitA>
    a316:	88 f0       	brcs	.+34     	; 0xa33a <__fixunssfsi+0x26>
    a318:	9f 57       	subi	r25, 0x7F	; 127
    a31a:	90 f0       	brcs	.+36     	; 0xa340 <__fixunssfsi+0x2c>
    a31c:	b9 2f       	mov	r27, r25
    a31e:	99 27       	eor	r25, r25
    a320:	b7 51       	subi	r27, 0x17	; 23
    a322:	a0 f0       	brcs	.+40     	; 0xa34c <__fixunssfsi+0x38>
    a324:	d1 f0       	breq	.+52     	; 0xa35a <__fixunssfsi+0x46>
    a326:	66 0f       	add	r22, r22
    a328:	77 1f       	adc	r23, r23
    a32a:	88 1f       	adc	r24, r24
    a32c:	99 1f       	adc	r25, r25
    a32e:	1a f0       	brmi	.+6      	; 0xa336 <__fixunssfsi+0x22>
    a330:	ba 95       	dec	r27
    a332:	c9 f7       	brne	.-14     	; 0xa326 <__fixunssfsi+0x12>
    a334:	12 c0       	rjmp	.+36     	; 0xa35a <__fixunssfsi+0x46>
    a336:	b1 30       	cpi	r27, 0x01	; 1
    a338:	81 f0       	breq	.+32     	; 0xa35a <__fixunssfsi+0x46>
    a33a:	c3 d0       	rcall	.+390    	; 0xa4c2 <__fp_zero>
    a33c:	b1 e0       	ldi	r27, 0x01	; 1
    a33e:	08 95       	ret
    a340:	c0 c0       	rjmp	.+384    	; 0xa4c2 <__fp_zero>
    a342:	67 2f       	mov	r22, r23
    a344:	78 2f       	mov	r23, r24
    a346:	88 27       	eor	r24, r24
    a348:	b8 5f       	subi	r27, 0xF8	; 248
    a34a:	39 f0       	breq	.+14     	; 0xa35a <__fixunssfsi+0x46>
    a34c:	b9 3f       	cpi	r27, 0xF9	; 249
    a34e:	cc f3       	brlt	.-14     	; 0xa342 <__fixunssfsi+0x2e>
    a350:	86 95       	lsr	r24
    a352:	77 95       	ror	r23
    a354:	67 95       	ror	r22
    a356:	b3 95       	inc	r27
    a358:	d9 f7       	brne	.-10     	; 0xa350 <__fixunssfsi+0x3c>
    a35a:	3e f4       	brtc	.+14     	; 0xa36a <__fixunssfsi+0x56>
    a35c:	90 95       	com	r25
    a35e:	80 95       	com	r24
    a360:	70 95       	com	r23
    a362:	61 95       	neg	r22
    a364:	7f 4f       	sbci	r23, 0xFF	; 255
    a366:	8f 4f       	sbci	r24, 0xFF	; 255
    a368:	9f 4f       	sbci	r25, 0xFF	; 255
    a36a:	08 95       	ret

0000a36c <__floatunsisf>:
    a36c:	e8 94       	clt
    a36e:	09 c0       	rjmp	.+18     	; 0xa382 <__floatsisf+0x12>

0000a370 <__floatsisf>:
    a370:	97 fb       	bst	r25, 7
    a372:	3e f4       	brtc	.+14     	; 0xa382 <__floatsisf+0x12>
    a374:	90 95       	com	r25
    a376:	80 95       	com	r24
    a378:	70 95       	com	r23
    a37a:	61 95       	neg	r22
    a37c:	7f 4f       	sbci	r23, 0xFF	; 255
    a37e:	8f 4f       	sbci	r24, 0xFF	; 255
    a380:	9f 4f       	sbci	r25, 0xFF	; 255
    a382:	99 23       	and	r25, r25
    a384:	a9 f0       	breq	.+42     	; 0xa3b0 <__floatsisf+0x40>
    a386:	f9 2f       	mov	r31, r25
    a388:	96 e9       	ldi	r25, 0x96	; 150
    a38a:	bb 27       	eor	r27, r27
    a38c:	93 95       	inc	r25
    a38e:	f6 95       	lsr	r31
    a390:	87 95       	ror	r24
    a392:	77 95       	ror	r23
    a394:	67 95       	ror	r22
    a396:	b7 95       	ror	r27
    a398:	f1 11       	cpse	r31, r1
    a39a:	f8 cf       	rjmp	.-16     	; 0xa38c <__floatsisf+0x1c>
    a39c:	fa f4       	brpl	.+62     	; 0xa3dc <__floatsisf+0x6c>
    a39e:	bb 0f       	add	r27, r27
    a3a0:	11 f4       	brne	.+4      	; 0xa3a6 <__floatsisf+0x36>
    a3a2:	60 ff       	sbrs	r22, 0
    a3a4:	1b c0       	rjmp	.+54     	; 0xa3dc <__floatsisf+0x6c>
    a3a6:	6f 5f       	subi	r22, 0xFF	; 255
    a3a8:	7f 4f       	sbci	r23, 0xFF	; 255
    a3aa:	8f 4f       	sbci	r24, 0xFF	; 255
    a3ac:	9f 4f       	sbci	r25, 0xFF	; 255
    a3ae:	16 c0       	rjmp	.+44     	; 0xa3dc <__floatsisf+0x6c>
    a3b0:	88 23       	and	r24, r24
    a3b2:	11 f0       	breq	.+4      	; 0xa3b8 <__floatsisf+0x48>
    a3b4:	96 e9       	ldi	r25, 0x96	; 150
    a3b6:	11 c0       	rjmp	.+34     	; 0xa3da <__floatsisf+0x6a>
    a3b8:	77 23       	and	r23, r23
    a3ba:	21 f0       	breq	.+8      	; 0xa3c4 <__floatsisf+0x54>
    a3bc:	9e e8       	ldi	r25, 0x8E	; 142
    a3be:	87 2f       	mov	r24, r23
    a3c0:	76 2f       	mov	r23, r22
    a3c2:	05 c0       	rjmp	.+10     	; 0xa3ce <__floatsisf+0x5e>
    a3c4:	66 23       	and	r22, r22
    a3c6:	71 f0       	breq	.+28     	; 0xa3e4 <__floatsisf+0x74>
    a3c8:	96 e8       	ldi	r25, 0x86	; 134
    a3ca:	86 2f       	mov	r24, r22
    a3cc:	70 e0       	ldi	r23, 0x00	; 0
    a3ce:	60 e0       	ldi	r22, 0x00	; 0
    a3d0:	2a f0       	brmi	.+10     	; 0xa3dc <__floatsisf+0x6c>
    a3d2:	9a 95       	dec	r25
    a3d4:	66 0f       	add	r22, r22
    a3d6:	77 1f       	adc	r23, r23
    a3d8:	88 1f       	adc	r24, r24
    a3da:	da f7       	brpl	.-10     	; 0xa3d2 <__floatsisf+0x62>
    a3dc:	88 0f       	add	r24, r24
    a3de:	96 95       	lsr	r25
    a3e0:	87 95       	ror	r24
    a3e2:	97 f9       	bld	r25, 7
    a3e4:	08 95       	ret

0000a3e6 <__fp_cmp>:
    a3e6:	99 0f       	add	r25, r25
    a3e8:	00 08       	sbc	r0, r0
    a3ea:	55 0f       	add	r21, r21
    a3ec:	aa 0b       	sbc	r26, r26
    a3ee:	e0 e8       	ldi	r30, 0x80	; 128
    a3f0:	fe ef       	ldi	r31, 0xFE	; 254
    a3f2:	16 16       	cp	r1, r22
    a3f4:	17 06       	cpc	r1, r23
    a3f6:	e8 07       	cpc	r30, r24
    a3f8:	f9 07       	cpc	r31, r25
    a3fa:	c0 f0       	brcs	.+48     	; 0xa42c <__fp_cmp+0x46>
    a3fc:	12 16       	cp	r1, r18
    a3fe:	13 06       	cpc	r1, r19
    a400:	e4 07       	cpc	r30, r20
    a402:	f5 07       	cpc	r31, r21
    a404:	98 f0       	brcs	.+38     	; 0xa42c <__fp_cmp+0x46>
    a406:	62 1b       	sub	r22, r18
    a408:	73 0b       	sbc	r23, r19
    a40a:	84 0b       	sbc	r24, r20
    a40c:	95 0b       	sbc	r25, r21
    a40e:	39 f4       	brne	.+14     	; 0xa41e <__fp_cmp+0x38>
    a410:	0a 26       	eor	r0, r26
    a412:	61 f0       	breq	.+24     	; 0xa42c <__fp_cmp+0x46>
    a414:	23 2b       	or	r18, r19
    a416:	24 2b       	or	r18, r20
    a418:	25 2b       	or	r18, r21
    a41a:	21 f4       	brne	.+8      	; 0xa424 <__fp_cmp+0x3e>
    a41c:	08 95       	ret
    a41e:	0a 26       	eor	r0, r26
    a420:	09 f4       	brne	.+2      	; 0xa424 <__fp_cmp+0x3e>
    a422:	a1 40       	sbci	r26, 0x01	; 1
    a424:	a6 95       	lsr	r26
    a426:	8f ef       	ldi	r24, 0xFF	; 255
    a428:	81 1d       	adc	r24, r1
    a42a:	81 1d       	adc	r24, r1
    a42c:	08 95       	ret

0000a42e <__fp_inf>:
    a42e:	97 f9       	bld	r25, 7
    a430:	9f 67       	ori	r25, 0x7F	; 127
    a432:	80 e8       	ldi	r24, 0x80	; 128
    a434:	70 e0       	ldi	r23, 0x00	; 0
    a436:	60 e0       	ldi	r22, 0x00	; 0
    a438:	08 95       	ret

0000a43a <__fp_nan>:
    a43a:	9f ef       	ldi	r25, 0xFF	; 255
    a43c:	80 ec       	ldi	r24, 0xC0	; 192
    a43e:	08 95       	ret

0000a440 <__fp_pscA>:
    a440:	00 24       	eor	r0, r0
    a442:	0a 94       	dec	r0
    a444:	16 16       	cp	r1, r22
    a446:	17 06       	cpc	r1, r23
    a448:	18 06       	cpc	r1, r24
    a44a:	09 06       	cpc	r0, r25
    a44c:	08 95       	ret

0000a44e <__fp_pscB>:
    a44e:	00 24       	eor	r0, r0
    a450:	0a 94       	dec	r0
    a452:	12 16       	cp	r1, r18
    a454:	13 06       	cpc	r1, r19
    a456:	14 06       	cpc	r1, r20
    a458:	05 06       	cpc	r0, r21
    a45a:	08 95       	ret

0000a45c <__fp_round>:
    a45c:	09 2e       	mov	r0, r25
    a45e:	03 94       	inc	r0
    a460:	00 0c       	add	r0, r0
    a462:	11 f4       	brne	.+4      	; 0xa468 <__fp_round+0xc>
    a464:	88 23       	and	r24, r24
    a466:	52 f0       	brmi	.+20     	; 0xa47c <__fp_round+0x20>
    a468:	bb 0f       	add	r27, r27
    a46a:	40 f4       	brcc	.+16     	; 0xa47c <__fp_round+0x20>
    a46c:	bf 2b       	or	r27, r31
    a46e:	11 f4       	brne	.+4      	; 0xa474 <__fp_round+0x18>
    a470:	60 ff       	sbrs	r22, 0
    a472:	04 c0       	rjmp	.+8      	; 0xa47c <__fp_round+0x20>
    a474:	6f 5f       	subi	r22, 0xFF	; 255
    a476:	7f 4f       	sbci	r23, 0xFF	; 255
    a478:	8f 4f       	sbci	r24, 0xFF	; 255
    a47a:	9f 4f       	sbci	r25, 0xFF	; 255
    a47c:	08 95       	ret

0000a47e <__fp_split3>:
    a47e:	57 fd       	sbrc	r21, 7
    a480:	90 58       	subi	r25, 0x80	; 128
    a482:	44 0f       	add	r20, r20
    a484:	55 1f       	adc	r21, r21
    a486:	59 f0       	breq	.+22     	; 0xa49e <__fp_splitA+0x10>
    a488:	5f 3f       	cpi	r21, 0xFF	; 255
    a48a:	71 f0       	breq	.+28     	; 0xa4a8 <__fp_splitA+0x1a>
    a48c:	47 95       	ror	r20

0000a48e <__fp_splitA>:
    a48e:	88 0f       	add	r24, r24
    a490:	97 fb       	bst	r25, 7
    a492:	99 1f       	adc	r25, r25
    a494:	61 f0       	breq	.+24     	; 0xa4ae <__fp_splitA+0x20>
    a496:	9f 3f       	cpi	r25, 0xFF	; 255
    a498:	79 f0       	breq	.+30     	; 0xa4b8 <__fp_splitA+0x2a>
    a49a:	87 95       	ror	r24
    a49c:	08 95       	ret
    a49e:	12 16       	cp	r1, r18
    a4a0:	13 06       	cpc	r1, r19
    a4a2:	14 06       	cpc	r1, r20
    a4a4:	55 1f       	adc	r21, r21
    a4a6:	f2 cf       	rjmp	.-28     	; 0xa48c <__fp_split3+0xe>
    a4a8:	46 95       	lsr	r20
    a4aa:	f1 df       	rcall	.-30     	; 0xa48e <__fp_splitA>
    a4ac:	08 c0       	rjmp	.+16     	; 0xa4be <__fp_splitA+0x30>
    a4ae:	16 16       	cp	r1, r22
    a4b0:	17 06       	cpc	r1, r23
    a4b2:	18 06       	cpc	r1, r24
    a4b4:	99 1f       	adc	r25, r25
    a4b6:	f1 cf       	rjmp	.-30     	; 0xa49a <__fp_splitA+0xc>
    a4b8:	86 95       	lsr	r24
    a4ba:	71 05       	cpc	r23, r1
    a4bc:	61 05       	cpc	r22, r1
    a4be:	08 94       	sec
    a4c0:	08 95       	ret

0000a4c2 <__fp_zero>:
    a4c2:	e8 94       	clt

0000a4c4 <__fp_szero>:
    a4c4:	bb 27       	eor	r27, r27
    a4c6:	66 27       	eor	r22, r22
    a4c8:	77 27       	eor	r23, r23
    a4ca:	cb 01       	movw	r24, r22
    a4cc:	97 f9       	bld	r25, 7
    a4ce:	08 95       	ret

0000a4d0 <__gesf2>:
    a4d0:	8a df       	rcall	.-236    	; 0xa3e6 <__fp_cmp>
    a4d2:	08 f4       	brcc	.+2      	; 0xa4d6 <__gesf2+0x6>
    a4d4:	8f ef       	ldi	r24, 0xFF	; 255
    a4d6:	08 95       	ret

0000a4d8 <__mulsf3>:
    a4d8:	0b d0       	rcall	.+22     	; 0xa4f0 <__mulsf3x>
    a4da:	c0 cf       	rjmp	.-128    	; 0xa45c <__fp_round>
    a4dc:	b1 df       	rcall	.-158    	; 0xa440 <__fp_pscA>
    a4de:	28 f0       	brcs	.+10     	; 0xa4ea <__mulsf3+0x12>
    a4e0:	b6 df       	rcall	.-148    	; 0xa44e <__fp_pscB>
    a4e2:	18 f0       	brcs	.+6      	; 0xa4ea <__mulsf3+0x12>
    a4e4:	95 23       	and	r25, r21
    a4e6:	09 f0       	breq	.+2      	; 0xa4ea <__mulsf3+0x12>
    a4e8:	a2 cf       	rjmp	.-188    	; 0xa42e <__fp_inf>
    a4ea:	a7 cf       	rjmp	.-178    	; 0xa43a <__fp_nan>
    a4ec:	11 24       	eor	r1, r1
    a4ee:	ea cf       	rjmp	.-44     	; 0xa4c4 <__fp_szero>

0000a4f0 <__mulsf3x>:
    a4f0:	c6 df       	rcall	.-116    	; 0xa47e <__fp_split3>
    a4f2:	a0 f3       	brcs	.-24     	; 0xa4dc <__mulsf3+0x4>

0000a4f4 <__mulsf3_pse>:
    a4f4:	95 9f       	mul	r25, r21
    a4f6:	d1 f3       	breq	.-12     	; 0xa4ec <__mulsf3+0x14>
    a4f8:	95 0f       	add	r25, r21
    a4fa:	50 e0       	ldi	r21, 0x00	; 0
    a4fc:	55 1f       	adc	r21, r21
    a4fe:	62 9f       	mul	r22, r18
    a500:	f0 01       	movw	r30, r0
    a502:	72 9f       	mul	r23, r18
    a504:	bb 27       	eor	r27, r27
    a506:	f0 0d       	add	r31, r0
    a508:	b1 1d       	adc	r27, r1
    a50a:	63 9f       	mul	r22, r19
    a50c:	aa 27       	eor	r26, r26
    a50e:	f0 0d       	add	r31, r0
    a510:	b1 1d       	adc	r27, r1
    a512:	aa 1f       	adc	r26, r26
    a514:	64 9f       	mul	r22, r20
    a516:	66 27       	eor	r22, r22
    a518:	b0 0d       	add	r27, r0
    a51a:	a1 1d       	adc	r26, r1
    a51c:	66 1f       	adc	r22, r22
    a51e:	82 9f       	mul	r24, r18
    a520:	22 27       	eor	r18, r18
    a522:	b0 0d       	add	r27, r0
    a524:	a1 1d       	adc	r26, r1
    a526:	62 1f       	adc	r22, r18
    a528:	73 9f       	mul	r23, r19
    a52a:	b0 0d       	add	r27, r0
    a52c:	a1 1d       	adc	r26, r1
    a52e:	62 1f       	adc	r22, r18
    a530:	83 9f       	mul	r24, r19
    a532:	a0 0d       	add	r26, r0
    a534:	61 1d       	adc	r22, r1
    a536:	22 1f       	adc	r18, r18
    a538:	74 9f       	mul	r23, r20
    a53a:	33 27       	eor	r19, r19
    a53c:	a0 0d       	add	r26, r0
    a53e:	61 1d       	adc	r22, r1
    a540:	23 1f       	adc	r18, r19
    a542:	84 9f       	mul	r24, r20
    a544:	60 0d       	add	r22, r0
    a546:	21 1d       	adc	r18, r1
    a548:	82 2f       	mov	r24, r18
    a54a:	76 2f       	mov	r23, r22
    a54c:	6a 2f       	mov	r22, r26
    a54e:	11 24       	eor	r1, r1
    a550:	9f 57       	subi	r25, 0x7F	; 127
    a552:	50 40       	sbci	r21, 0x00	; 0
    a554:	8a f0       	brmi	.+34     	; 0xa578 <__mulsf3_pse+0x84>
    a556:	e1 f0       	breq	.+56     	; 0xa590 <__mulsf3_pse+0x9c>
    a558:	88 23       	and	r24, r24
    a55a:	4a f0       	brmi	.+18     	; 0xa56e <__mulsf3_pse+0x7a>
    a55c:	ee 0f       	add	r30, r30
    a55e:	ff 1f       	adc	r31, r31
    a560:	bb 1f       	adc	r27, r27
    a562:	66 1f       	adc	r22, r22
    a564:	77 1f       	adc	r23, r23
    a566:	88 1f       	adc	r24, r24
    a568:	91 50       	subi	r25, 0x01	; 1
    a56a:	50 40       	sbci	r21, 0x00	; 0
    a56c:	a9 f7       	brne	.-22     	; 0xa558 <__mulsf3_pse+0x64>
    a56e:	9e 3f       	cpi	r25, 0xFE	; 254
    a570:	51 05       	cpc	r21, r1
    a572:	70 f0       	brcs	.+28     	; 0xa590 <__mulsf3_pse+0x9c>
    a574:	5c cf       	rjmp	.-328    	; 0xa42e <__fp_inf>
    a576:	a6 cf       	rjmp	.-180    	; 0xa4c4 <__fp_szero>
    a578:	5f 3f       	cpi	r21, 0xFF	; 255
    a57a:	ec f3       	brlt	.-6      	; 0xa576 <__mulsf3_pse+0x82>
    a57c:	98 3e       	cpi	r25, 0xE8	; 232
    a57e:	dc f3       	brlt	.-10     	; 0xa576 <__mulsf3_pse+0x82>
    a580:	86 95       	lsr	r24
    a582:	77 95       	ror	r23
    a584:	67 95       	ror	r22
    a586:	b7 95       	ror	r27
    a588:	f7 95       	ror	r31
    a58a:	e7 95       	ror	r30
    a58c:	9f 5f       	subi	r25, 0xFF	; 255
    a58e:	c1 f7       	brne	.-16     	; 0xa580 <__mulsf3_pse+0x8c>
    a590:	fe 2b       	or	r31, r30
    a592:	88 0f       	add	r24, r24
    a594:	91 1d       	adc	r25, r1
    a596:	96 95       	lsr	r25
    a598:	87 95       	ror	r24
    a59a:	97 f9       	bld	r25, 7
    a59c:	08 95       	ret

0000a59e <_exit>:
    a59e:	f8 94       	cli

0000a5a0 <__stop_program>:
    a5a0:	ff cf       	rjmp	.-2      	; 0xa5a0 <__stop_program>
