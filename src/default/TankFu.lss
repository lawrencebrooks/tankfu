
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000c5a2  0000c6a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000c5a2  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000eed  00800106  00800106  0000c6c6  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000c6a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000cf65  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005c0  00000000  00000000  0000cf78  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000869d  00000000  00000000  0000d538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152d  00000000  00000000  00015bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e99  00000000  00000000  00017102  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000132c  00000000  00000000  00018f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000197e  00000000  00000000  0001a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007d8a  00000000  00000000  0001bc46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000660  00000000  00000000  000239d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5c 35 	jmp	0x6ab8	; 0x6ab8 <__ctors_end>
       4:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
       8:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
       c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      10:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      14:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      18:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      1c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      20:	0c 94 c8 39 	jmp	0x7390	; 0x7390 <__vector_8>
      24:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      28:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      2c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      30:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      34:	0c 94 9f 37 	jmp	0x6f3e	; 0x6f3e <__vector_13>
      38:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <__vector_14>
      3c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      40:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      44:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      48:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      4c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      50:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      54:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      58:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      5c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      60:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      64:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      68:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      6c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__bad_interrupt>
      70:	01 55       	subi	r16, 0x51	; 81
      72:	06 55       	subi	r16, 0x56	; 86
      74:	09 55       	subi	r16, 0x59	; 89
      76:	0c 55       	subi	r16, 0x5C	; 92
      78:	0f 55       	subi	r16, 0x5F	; 95
      7a:	12 55       	subi	r17, 0x52	; 82
      7c:	15 55       	subi	r17, 0x55	; 85
      7e:	18 55       	subi	r17, 0x58	; 88
      80:	1b 55       	subi	r17, 0x5B	; 91

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	2a 3b 2d 3b 88 3b 8c 3b 94 3b 35 3b 3a 3b 3f 3b     *;-;.;.;.;5;:;?;
      e0:	9c 3b 42 3b 45 3b 48 3b 85 3b                       .;B;E;H;.;

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <default_scores>:
      f6:	00 01 14 0d 01 02 14 0e 02 03 14 0f 03 04 14 10     ................
     106:	04 05 14 11 05 06 14 12 06 00 14 13 00 00           ..............

00000114 <default_handles>:
     114:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     124:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000132 <strMap>:
     132:	28 63 29 20 32 30 31 35 20 4c 61 77 72 65 6e 63     (c) 2015 Lawrenc
     142:	65 20 42 72 6f 6f 6b 73 00 50 6c 61 79 65 72 20     e Brooks.Player 
     152:	76 73 20 43 50 55 00 50 6c 61 79 65 72 20 76 73     vs CPU.Player vs
     162:	20 50 6c 61 79 65 72 00 54 61 6e 6b 20 52 61 6e      Player.Tank Ran
     172:	6b 00 45 64 69 74 20 48 61 6e 64 6c 65 00 5f 5f     k.Edit Handle.__
     182:	5f 5f 5f 5f 5f 5f 5f 5f 5f 00 7c 00 50 31 00 50     _________.|.P1.P
     192:	32 00 53 65 6c 65 63 74 20 2d 20 41 00 43 6f 6e     2.Select - A.Con
     1a2:	66 69 72 6d 20 2d 20 41 00 43 61 6e 63 65 6c 20     firm - A.Cancel 
     1b2:	2d 20 58 00 52 65 73 65 74 20 44 65 66 61 75 6c     - X.Reset Defaul
     1c2:	74 73 20 2d 20 53 4c 20 28 35 73 29 00 45 64 69     ts - SL (5s).Edi
     1d2:	74 20 2d 20 55 50 2f 44 4f 57 4e 00 4f 77 6e 73     t - UP/DOWN.Owns
     1e2:	00 42 79 00 46 69 6e 61 6c 20 53 63 6f 72 65 00     .By.Final Score.
     1f2:	59 6f 75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c     You suck bro  .L
     202:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     212:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     222:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     232:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     242:	2a 20 20 20 20 20 20 20 20 00 41 20 74 75 72 6b     *        .A turk
     252:	65 79 20 73 68 6f 6f 74 00 54 68 61 74 27 73 20     ey shoot.That's 
     262:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     272:	70 3f 20 20 20 20 00 52 54 46 4d 21 20 20 20 20     p?    .RTFM!    
     282:	20 20 20 20 20 00 20 20 20 20 20 20 20 20 20 20          .          
     292:	20 20 20 20 00 53 63 6f 72 65 3a 00 54 6f 74 61         .Score:.Tota
     2a2:	6c 3a 00 42 61 69 6c 20 2d 20 58 00 50 61 75 73     l:.Bail - X.Paus
     2b2:	65 64 00 20 20 20 42 6f 6f 74 20 43 61 6d 70 20     ed.   Boot Camp 
     2c2:	20 20 00 20 20 20 56 65 6c 6f 63 69 74 79 20 20       .   Velocity  
     2d2:	20 20 00 20 20 20 20 44 69 67 67 65 72 20 20 20       .    Digger   
     2e2:	20 20 00 41 63 74 20 31 20 54 68 65 79 20 4d 65       .Act 1 They Me
     2f2:	65 74 00 20 20 20 52 69 63 68 6f 63 68 65 74 20     et.   Richochet 
     302:	20 20 00 20 54 68 65 20 48 6f 6e 65 79 20 50 6f       . The Honey Po
     312:	74 20 00 20 20 46 6f 63 61 6c 20 50 6f 69 6e 74     t .  Focal Point
     322:	20 20 00 49 74 27 73 20 4e 6f 74 20 46 61 69 72       .It's Not Fair
     332:	21 20 00 20 20 4d 75 63 68 20 42 65 74 74 65 72     ! .  Much Better
     342:	20 20 00 20 20 20 46 61 63 65 20 4f 66 66 20 20       .   Face Off  
     352:	20 20 00 20 20 20 54 65 73 74 20 4c 65 76 65 6c       .   Test Level
     362:	20 20 20 00                                            .

00000366 <my_patches>:
     366:	02 a7 33 00 00 4f 07 50 07 02 c2 2c 00 00 e3 06     ..3..O.P...,....
     376:	e4 06 02 7b 2a 00 00 45 02 46 02 02 ca 28 00 00     ...{*..E.F...(..
     386:	af 01 b0 01 02 c8 28 00 00 00 00 01 00 02 c6 28     ......(........(
     396:	00 00 00 00 01 00 02 a6 26 00 00 1e 02 1f 02 02     ........&.......
     3a6:	34 25 00 00 70 01 71 01 02 7b 2a 00 00 45 02 46     4%..p.q..{*..E.F
     3b6:	02 02 30 25 00 00 00 00 01 00 02 c2 2c 00 00 e3     ..0%........,...
     3c6:	06 e4 06 02 2c 25 00 00 00 00 01 00 02 2a 25 00     ....,%.......*%.
     3d6:	00 00 00 00 00                                      .....

000003db <level_data>:
     3db:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     3eb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     413:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     433:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     44f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     46f:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
     47f:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
     48f:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     49f:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     4bb:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     4cb:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     4e7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4f7:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     507:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     523:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     533:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     543:	02 00 00 58 00 00 00 00 00 00 00 00 00 00 02 02     ...X............
	...
     55b:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
     56b:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     57b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
     58b:	00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     59b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5ab:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     5bb:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     5d7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5e7:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     5f7:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     607:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     61f:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
     62f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     64f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     66b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     68b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     6a7:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6b7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6c7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6d7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6e7:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     703:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     71f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     73f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     75b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     77b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     797:	00 00 00 02 02 01 00 00 00 00 01 00 00 00 00 00     ................
	...
     7af:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     7bf:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7cf:	00 01 00 00 00 00 01 02 02 01 00 07 00 00 01 00     ................
     7df:	00 00 02 00 00 00 00 00 00 00 00 02 00 00 00 01     ................
     7ef:	00 00 07 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     7ff:	02 00 00 00 00 00 00 00 00 02 00 00 00 01 00 00     ................
     80f:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 02 00     ................
     81f:	00 00 00 00 00 00 00 02 00 00 00 01 00 00 00 00     ................
     82f:	01 02 02 01 00 00 00 00 01 00 00 00 02 02 02 02     ................
     83f:	02 02 02 02 02 02 00 00 00 01 00 00 00 00 01 02     ................
     84f:	02 01 00 00 00 00 01 00 00 00 02 00 00 00 00 00     ................
     85f:	00 00 00 02 00 00 00 01 00 00 00 00 01 02 02 01     ................
     86f:	00 00 00 00 01 00 00 00 02 00 00 00 00 00 00 00     ................
     87f:	00 02 00 00 00 01 00 00 00 00 01 02 02 01 00 58     ...............X
     88f:	00 00 01 00 00 00 02 00 00 00 00 00 00 00 00 02     ................
     89f:	00 00 00 01 00 63 00 00 01 02 02 01 00 00 00 00     .....c..........
     8af:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8bf:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     8db:	00 00 00 01 00 00 00 00 01 02 02 01 01 01 01 01     ................
     8eb:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8fb:	00 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
     91f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     93b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     95b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     977:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     997:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9a7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9b7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9c7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 01     ................
     9d7:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9e7:	01 01 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     9f7:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a07:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     a17:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a27:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     a37:	01 01 02 02 02 01 01 01 01 02 02 02 01 01 01 01     ................
     a47:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     a57:	02 02 02 01 01 01 01 02 02 02 01 01 01 01 01 01     ................
     a67:	01 01 01 02 02 01 00 00 00 00 01 01 01 01 02 02     ................
     a77:	02 01 01 01 01 02 02 02 01 01 01 01 00 00 00 00     ................
     a87:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     a97:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     aa7:	02 01 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     ab7:	01 01 01 01 01 01 01 01 00 00 00 00 01 02 02 01     ................
     ac7:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ad7:	01 01 01 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     ae7:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     af7:	01 01 00 00 00 00 00 00 01 02 02 01 00 58 00 00     .............X..
     b07:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b17:	00 09 00 00 00 00 01 02 02 01 00 00 00 00 00 00     ................
     b27:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     b37:	00 63 00 00 01 02 02 01 00 00 00 00 01 01 01 01     .c..............
     b47:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     b57:	00 00 01 02 02 01 00 00 00 00 01 01 01 01 01 01     ................
     b67:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     b77:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     b87:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     b97:	02 01 00 00 00 00 01 01 01 01 02 02 02 01 01 01     ................
     ba7:	01 02 02 02 01 01 01 01 00 00 00 00 01 02 02 01     ................
     bb7:	01 01 01 01 01 01 01 01 02 02 02 01 01 01 01 02     ................
     bc7:	02 02 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     bd7:	01 01 01 01 01 01 02 02 02 01 01 01 01 02 02 02     ................
     be7:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     bf7:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c07:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     c17:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c27:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     c37:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c47:	01 01 01 02 02 01 01 01 01 01 01 01 01 01 01 01     ................
     c57:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c67:	01 02 02 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c77:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 02     ................
     c87:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c97:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     ca7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     cb7:	02 02 02 02 02 02 02 02 02 02 02 02 02 00 00 00     ................
	...
     cdf:	00 02 02 00 08 00 00 01 00 01 00 01 00 01 00 01     ................
     cef:	00 00 01 00 01 00 01 00 01 00 01 00 00 08 00 02     ................
     cff:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d1b:	00 02 02 02 02 02 02 00 01 00 02 00 00 00 00 00     ................
     d2b:	02 02 00 00 00 00 00 02 00 01 00 02 02 02 02 02     ................
     d3b:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 02 02     ................
     d4b:	00 00 00 00 00 02 00 00 00 00 00 00 00 02 02 00     ................
     d5b:	00 00 00 00 01 00 02 00 00 00 00 00 02 02 00 00     ................
     d6b:	00 00 00 02 00 01 00 00 00 00 00 02 02 00 01 00     ................
     d7b:	01 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     d8b:	00 02 00 00 00 01 00 01 00 02 02 00 00 00 00 00     ................
     d9b:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     dab:	00 01 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
     dcf:	00 02 02 02 02 02 02 00 01 00 01 00 00 00 00 00     ................
     ddf:	00 00 00 00 00 00 00 01 00 01 00 02 02 02 02 02     ................
     def:	00 00 00 00 02 00 00 00 00 00 00 00 02 00 00 00     ................
     dff:	00 02 00 00 00 00 00 00 00 02 00 00 00 00 00 00     ................
     e0f:	00 00 02 00 01 00 02 00 00 00 02 00 00 00 00 02     ................
     e1f:	00 00 00 02 00 01 00 02 00 00 00 00 00 00 00 00     ................
     e2f:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     e3f:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
     e4f:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     e5f:	00 01 00 02 02 02 02 02 02 00 00 00 00 00 00 00     ................
     e6f:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
     e7f:	00 00 00 00 00 02 02 00 01 00 01 00 01 00 02 00     ................
	...
     e97:	00 00 00 02 00 01 00 01 00 01 00 02 02 00 00 00     ................
     ea7:	00 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     eb7:	00 02 00 00 00 00 00 00 00 02 02 00 01 00 02 00     ................
     ec7:	01 00 00 00 00 00 00 00 02 02 00 00 00 00 00 00     ................
     ed7:	00 01 00 02 00 01 00 02 02 00 00 00 02 00 00 00     ................
     ee7:	58 00 00 00 00 00 02 02 00 00 00 00 63 00 00 00     X...........c...
     ef7:	00 02 00 00 00 02 02 00 01 00 02 00 01 00 00 00     ................
     f07:	00 00 00 00 02 02 00 00 00 00 00 00 00 01 00 02     ................
     f17:	00 01 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     f33:	00 02 00 00 00 02 02 00 08 00 02 00 00 00 01 00     ................
     f43:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 00 02     ................
     f53:	00 08 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     f6f:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
     f7f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f8f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f9f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     faf:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
     fcb:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
     fe7:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    1007:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
	...
    1027:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    1043:	00 00 00 02 02 00 00 00 00 06 02 01 01 02 05 00     ................
	...
    1063:	00 02 02 00 00 00 00 04 02 01 01 02 03 00 00 00     ................
	...
    107f:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    109f:	00 02 02 00 00 00 00 00 00 04 03 00 00 07 00 00     ................
    10af:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    10bf:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    10cf:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    10e7:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    10f7:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    1107:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    1117:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    1127:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1137:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    1153:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1163:	00 00 00 00 07 00 00 06 05 00 00 00 00 00 00 02     ................
    1173:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1183:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    11a3:	00 06 02 01 01 02 05 00 00 00 00 02 02 00 00 00     ................
	...
    11bf:	00 00 00 04 02 01 01 02 03 00 00 00 00 02 02 00     ................
	...
    11df:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    11ff:	00 04 03 00 00 00 00 00 00 02 02 05 00 00 00 00     ................
	...
    1223:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    123f:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    125f:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    126f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    127f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    128f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    129f:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    12af:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    12bf:	00 00 00 00 00 01 01 00 00 00 04 02 02 02 02 03     ................
    12cf:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    12df:	00 00 00 01 01 00 00 00 00 04 02 02 03 00 00 00     ................
    12ef:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    12ff:	00 01 01 00 00 00 00 00 04 03 00 00 00 00 00 01     ................
    130f:	01 00 00 00 00 00 00 02 02 00 00 00 00 00 00 01     ................
    131f:	01 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00     ................
    132f:	00 00 00 00 00 02 02 00 00 00 00 00 00 01 01 00     ................
	...
    1347:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    1357:	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1367:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    1377:	00 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    1387:	00 00 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
    1397:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 00     ................
    13a7:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    13b7:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    13c7:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    13d7:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 63 00     ..............c.
    13e7:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    13f7:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1407:	02 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00     ................
    1417:	00 00 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    142f:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    143f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    144f:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    145f:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    146f:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    147f:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    148f:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    149f:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    14af:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    14bf:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    14cf:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    14df:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    14ef:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    14ff:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    150f:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    152b:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    154f:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    155f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    156f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    157f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    158f:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    159f:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    15b7:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    15c7:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    15d7:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    15e7:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    15f7:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1607:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    1617:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    1627:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1637:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1647:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1657:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    167b:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1697:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    16a7:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    16b7:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    16c7:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    16d7:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    16e7:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    16f7:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1707:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    171f:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    172f:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    174b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    176b:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    177b:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    178b:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    179b:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    17ab:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    17bb:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    17cb:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    17db:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    17eb:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    17fb:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    180b:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    181b:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    182b:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    183b:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    184b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    185b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    186b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    187b:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1897:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18b3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18d3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18ef:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    18ff:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    190f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    192b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1943:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1953:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1963:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
    197f:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    199b:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
    19ab:	58 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     X...............
    19bb:	01 01 01 00 63 00 00 01 01 02 02 00 00 00 00 00     ....c...........
	...
    19d7:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
	...
    19f7:	01 01 01 00 00 00 00 01 01 02 02 00 00 00 00 00     ................
	...
    1a13:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    1a33:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1a4f:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    1a77:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a93:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1aa3:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1ab3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1acf:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1aef:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b0b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b2b:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b3b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b4b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b5b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1b83:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ba3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bbf:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bdf:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1bef:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1bff:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c1b:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1c37:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1c4f:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    1c5f:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c6f:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    1c7f:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c8f:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
	...
    1cab:	00 00 63 00 00 00 00 02 02 01 01 00 00 00 00 01     ..c.............
    1cbb:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ccb:	00 00 00 00 00 02 02 01 01 00 00 00 00 01 01 01     ................
	...
    1ceb:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1d0b:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1d27:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1d47:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d63:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d83:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1d93:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1da3:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dbf:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ddb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dfb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e17:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e27:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e37:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e47:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e57:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e73:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e8f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1eaf:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ecb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1eeb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f07:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f27:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f43:	00 00 00 02 02 00 07 00 00 09 00 00 00 00 00 00     ................
	...
    1f5f:	07 00 00 09 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1f7f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f9f:	00 02 02 00 00 58 00 00 00 00 00 00 00 00 00 00     .....X..........
	...
    1fb7:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    1fdb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ff7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2017:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2033:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2053:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    206f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    208f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20ab:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20cb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20e7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2107:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2117:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2127:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2137:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    215f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    217f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    219b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21bb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21d7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21f7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2213:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2233:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    224f:	00 00 00 02 02 02 02 02 02 02 02 02 02 00 00 00     ................
	...
    2267:	00 00 00 02 02 02 02 02 02 02 02 00 00 00 00 00     ................
    2277:	00 00 02 02 02 02 00 00 00 00 00 00 00 00 00 00     ................
    2287:	00 02 00 00 00 00 00 02 02 00 00 58 00 00 00 00     ...........X....
    2297:	00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 02     ................
    22a7:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
    22b7:	00 02 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    22c7:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
	...
    22df:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    22ef:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    22ff:	00 00 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2323:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    233f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    235f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    237b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    239b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    23b7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    23d7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    23f3:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2403:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2413:	02 02                                               ..

00002415 <map_rocket_right_1>:
    2415:	01 01 26                                            ..&

00002418 <map_rocket_right_0>:
    2418:	01 01 25                                            ..%

0000241b <map_rocket_up_1>:
    241b:	01 01 24                                            ..$

0000241e <map_rocket_up_0>:
    241e:	01 01 23                                            ..#

00002421 <map_ball>:
    2421:	01 01 22                                            .."

00002424 <map_explosion_2>:
    2424:	02 02 0c 0d 0d 0c                                   ......

0000242a <map_explosion_1>:
    242a:	02 02 0a 0b 18 19                                   ......

00002430 <map_explosion_0>:
    2430:	02 02 08 09 16 17                                   ......

00002436 <map_tank2_right_1>:
    2436:	02 02 20 21 2e 2f                                   .. !./

0000243c <map_tank2_right_0>:
    243c:	02 02 1e 1f 2c 2d                                   ....,-

00002442 <map_tank2_up_1>:
    2442:	02 02 1c 1d 2a 2b                                   ....*+

00002448 <map_tank2_up_0>:
    2448:	02 02 1a 1b 28 29                                   ....()

0000244e <map_tank1_right_1>:
    244e:	02 02 06 07 14 15                                   ......

00002454 <map_tank1_right_0>:
    2454:	02 02 04 05 12 13                                   ......

0000245a <map_tank1_up_1>:
    245a:	02 02 02 03 10 11                                   ......

00002460 <map_tank1_up_0>:
    2460:	02 02 00 01 0e 0f                                   ......

00002466 <map_none>:
    2466:	01 01 27                                            ..'

00002469 <map_tank_blank>:
    2469:	02 02 27 27 27 27                                   ..''''

0000246f <map_metal_bl>:
    246f:	01 01 0c                                            ...

00002472 <map_metal_tr>:
    2472:	01 01 0b                                            ...

00002475 <map_metal_br>:
    2475:	01 01 0a                                            ...

00002478 <map_metal_tl>:
    2478:	01 01 09                                            ...

0000247b <map_tile_exp_2>:
    247b:	01 01 08                                            ...

0000247e <map_tile_exp_1>:
    247e:	01 01 07                                            ...

00002481 <map_tile_exp_0>:
    2481:	01 01 06                                            ...

00002484 <map_rocket_itm>:
    2484:	01 01 04                                            ...

00002487 <map_explode_itm>:
    2487:	01 01 03                                            ...

0000248a <map_speed_itm>:
    248a:	01 01 02                                            ...

0000248d <map_metal>:
    248d:	01 01 05                                            ...

00002490 <map_brick>:
    2490:	01 01 01                                            ...

00002493 <map_tile_none>:
    2493:	01 01 00                                            ...

00002496 <map_pause>:
    2496:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    24a6:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    24b6:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    24c6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000024d4 <map_splash>:
    24d4:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    24e4:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    24f4:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    2504:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    2514:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    2524:	2a 00 00 2c 2d 2e                                   *..,-.

0000252a <ad_silence>:
	...

0000252c <ad_tracks>:
	...

0000252e <ad_tank_explode>:
	...

00002530 <ad_splash>:
	...

00002532 <ad_rocket>:
	...

00002534 <ad_navigate>:
    2534:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
    2544:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
    2554:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
    2564:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
    2574:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
    2584:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
    2594:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
    25a4:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
    25b4:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
    25c4:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
    25d4:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
    25e4:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
    25f4:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
    2604:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
    2614:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
    2624:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
    2634:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
    2644:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
    2654:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
    2664:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
    2674:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
    2684:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
    2694:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

000026a6 <ad_metal>:
    26a6:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
    26b6:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
    26c6:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
    26d6:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
    26e6:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
    26f6:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
    2706:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
    2716:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
    2726:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
    2736:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
    2746:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
    2756:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
    2766:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
    2776:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
    2786:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
    2796:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
    27a6:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
    27b6:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
    27c6:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
    27d6:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
    27e6:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
    27f6:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
    2806:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
    2816:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
    2826:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
    2836:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    2846:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    2856:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    2866:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    2876:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    2886:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    2896:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    28a6:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    28b6:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

000028c6 <ad_level_start>:
	...

000028c8 <ad_level_clear>:
	...

000028ca <ad_item>:
    28ca:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    28da:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    28ea:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    28fa:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    290a:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    291a:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    292a:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    293a:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    294a:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    295a:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    296a:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    297a:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    298a:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    299a:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    29aa:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    29ba:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    29ca:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    29da:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    29ea:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    29fa:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    2a0a:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    2a1a:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    2a2a:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    2a3a:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    2a4a:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    2a5a:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    2a6a:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00002a7b <ad_cannonball>:
    2a7b:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    2a8b:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    2a9b:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    2aab:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    2abb:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    2acb:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    2adb:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    2aeb:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    2afb:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    2b0b:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    2b1b:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    2b2b:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    2b3b:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    2b4b:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    2b5b:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    2b6b:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    2b7b:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    2b8b:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    2b9b:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    2bab:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    2bbb:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    2bcb:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    2bdb:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    2beb:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    2bfb:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    2c0b:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    2c1b:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    2c2b:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    2c3b:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    2c4b:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    2c5b:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    2c6b:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    2c7b:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    2c8b:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    2c9b:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    2cab:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2cbb:	ff ff ff ff ff 00 00                                .......

00002cc2 <ad_brick_explode>:
    2cc2:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    2cd2:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    2ce2:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    2cf2:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    2d02:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    2d12:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    2d22:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    2d32:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    2d42:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    2d52:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    2d62:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    2d72:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    2d82:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    2d92:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    2da2:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    2db2:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    2dc2:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    2dd2:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    2de2:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    2df2:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    2e02:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    2e12:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    2e22:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    2e32:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    2e42:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    2e52:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    2e62:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    2e72:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    2e82:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    2e92:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    2ea2:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    2eb2:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    2ec2:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    2ed2:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    2ee2:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    2ef2:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    2f02:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    2f12:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    2f22:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    2f32:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    2f42:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    2f52:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    2f62:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    2f72:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    2f82:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    2f92:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    2fa2:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    2fb2:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    2fc2:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    2fd2:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    2fe2:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    2ff2:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    3002:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    3012:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    3022:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    3032:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    3042:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    3052:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    3062:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    3072:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    3082:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    3092:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    30a2:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    30b2:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    30c2:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    30d2:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    30e2:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    30f2:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    3102:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    3112:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    3122:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    3132:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    3142:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    3152:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    3162:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    3172:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    3182:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    3192:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    31a2:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    31b2:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    31c2:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    31d2:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    31e2:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    31f2:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    3202:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    3212:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    3222:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    3232:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    3242:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    3252:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    3262:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    3272:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    3282:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    3292:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    32a2:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    32b2:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    32c2:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    32d2:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    32e2:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    32f2:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    3302:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    3312:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    3322:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    3332:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    3342:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    3352:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    3362:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    3372:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    3382:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    3392:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    33a2:	04 04 02 01 00                                      .....

000033a7 <ad_banter>:
    33a7:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    33b7:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    33c7:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    33d7:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    33e7:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    33f7:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    3407:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    3417:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    3427:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    3437:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    3447:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    3457:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    3467:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    3477:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    3487:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    3497:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    34a7:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    34b7:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    34c7:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    34d7:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    34e7:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    34f7:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    3507:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    3517:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    3527:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    3537:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    3547:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    3557:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    3567:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    3577:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    3587:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    3597:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    35a7:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    35b7:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    35c7:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    35d7:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    35e7:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    35f7:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    3607:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    3617:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    3627:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    3637:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    3647:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    3657:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    3667:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    3677:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    3687:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    3697:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    36a7:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    36b7:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    36c7:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    36d7:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    36e7:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    36f7:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    3707:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    3717:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    3727:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    3737:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    3747:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    3757:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    3767:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    3777:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    3787:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    3797:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    37a7:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    37b7:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    37c7:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    37d7:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    37e7:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    37f7:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    3807:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    3817:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    3827:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    3837:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    3847:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    3857:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    3867:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    3877:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    3887:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    3897:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    38a7:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    38b7:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    38c7:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    38d7:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    38e7:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    38f7:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    3907:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    3917:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    3927:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    3937:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    3947:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    3957:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    3967:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    3977:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    3987:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    3997:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    39a7:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    39b7:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    39c7:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    39d7:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    39e7:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    39f7:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    3a07:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    3a17:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    3a27:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    3a37:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    3a47:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    3a57:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    3a67:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    3a77:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    3a87:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    3a97:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    3aa7:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    3ab7:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    3ac7:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    3ad7:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    3ae7:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

00003af8 <sprites_data>:
    3af8:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3b08:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    3b18:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    3b28:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    3b38:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3b48:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    3b58:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    3b68:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    3b78:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3b88:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    3b98:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    3ba8:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    3bb8:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3bc8:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    3bd8:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    3be8:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    3bf8:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3c08:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    3c18:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    3c28:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    3c38:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3c48:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    3c58:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3c68:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3c78:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3c88:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    3c98:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    3ca8:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    3cb8:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3cc8:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    3cd8:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3ce8:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3cf8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d08:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    3d18:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    3d28:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3d38:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d48:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d58:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d68:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3d78:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3d88:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3d98:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3da8:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3db8:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3dc8:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3dd8:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3de8:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3df8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3e08:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3e18:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3e28:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3e38:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3e48:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3e58:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3e68:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3e78:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3e88:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3e98:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3ea8:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3eb8:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3ec8:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3ed8:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3ee8:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3ef8:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3f08:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3f18:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3f28:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3f38:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3f48:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3f58:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3f68:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3f78:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3f88:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3f98:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3fa8:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3fb8:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3fc8:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3fd8:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3fe8:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3ff8:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    4008:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    4018:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    4028:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    4038:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    4048:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    4058:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    4068:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    4078:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    4088:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    4098:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    40a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40b8:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    40c8:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    40d8:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    40e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40f8:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    4108:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    4118:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    4128:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4138:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4148:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    4158:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    4168:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    4178:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    4188:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    4198:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    41a8:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    41b8:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    41c8:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    41d8:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    41e8:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    41f8:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    4208:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    4218:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    4228:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    4238:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    4248:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    4258:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    4268:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    4278:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4288:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    4298:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    42a8:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    42b8:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    42c8:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    42d8:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    42e8:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    42f8:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    4308:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    4318:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    4328:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    4338:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    4348:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4358:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    4368:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    4378:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4388:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    4398:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    43a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43b8:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    43c8:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    43d8:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    43e8:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    43f8:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    4408:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    4418:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    4428:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4438:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4448:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    4458:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    4468:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4478:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4488:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    4498:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    44a8:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    44b8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    44c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    44d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    44e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    44f8:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    4508:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    4518:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    4528:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    4538:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4548:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    4558:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    4568:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    4578:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    4588:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    4598:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    45a8:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    45b8:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    45c8:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    45d8:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    45e8:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    45f8:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    4608:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    4618:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    4628:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4638:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    4648:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4658:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4668:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4678:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    4688:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    4698:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    46a8:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    46b8:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    46c8:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    46d8:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    46e8:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

000046f8 <tiles_data>:
	...
    4738:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    4748:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    4758:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    4768:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    4778:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    4788:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    4798:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    47a8:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    47b8:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    47c8:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    47d8:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    47e8:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    47f8:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    4808:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    4818:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    4828:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    4838:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    4848:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4858:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    4868:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4880:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4890:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    48a0:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    48b8:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    48c8:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    48d8:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    48e8:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    4900:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    4920:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    4938:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    4948:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4958:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    4968:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    4978:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    4988:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    4998:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    49a8:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    49b8:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    49c8:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    49d8:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    49e8:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    49f8:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    4a08:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    4a18:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    4a28:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    4a38:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4a48:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4a58:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4a68:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    4a78:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4a88:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4a98:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4aa8:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    4ab8:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    4ac8:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4ad8:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4ae8:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4af8:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4b08:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b18:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b28:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4b38:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4b48:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4b58:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4b68:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    4b78:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    4b88:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4b98:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4ba8:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4bb8:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    4bc8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4bd8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    4be8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    4c18:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4c28:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    4c58:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    4c68:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4c78:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    4c88:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c98:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4ca8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4cb8:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4cc8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4cd8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4ce8:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4cf8:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4d08:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4d18:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4d28:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4d38:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4d48:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4d58:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4d68:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4d78:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4d88:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4d98:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4da8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4db8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4dc8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4dd8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4de8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4df8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4e08:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4e18:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e28:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e38:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4e48:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    4e78:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4e88:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4e98:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4ea8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4eb8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    4ec8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ed8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ee8:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ef8:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4f08:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4f18:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4f28:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4f38:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4f48:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4f58:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4f68:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    4fa0:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4fb0:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    4fc0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4fd0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4fe0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ff0:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    5000:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    5010:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    5020:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    5030:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    5040:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    5050:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    5060:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    5070:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    5080:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    5090:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    50a0:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    50b0:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    50c0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    50d0:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    50e0:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    50f0:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    5100:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    5110:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    5138:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    5148:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    5158:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    5168:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    5178:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    5188:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    5198:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    51a8:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    51b8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    51c8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    51d8:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    51e8:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    51f8:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    5208:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    5218:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    5228:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    5240:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    5250:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    5260:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    5270:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    5280:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    5290:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    52a0:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    52b0:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    5300:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5310:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5328:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5340:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5350:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5380:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    5390:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    53a0:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    53b8:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    53c8:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    53d8:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    53e8:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5400:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5410:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5420:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    5438:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    5448:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    5458:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    5468:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    5480:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5490:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    54c4:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    54d4:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    54e4:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    5500:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    5510:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5520:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    5540:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    5550:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    5560:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5580:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5590:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    55a0:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    55e0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    55f0:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5610:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5660:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5684:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5694:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    56a4:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    56c0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    56d0:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    56e0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5700:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    5710:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5720:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5740:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5750:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5760:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5780:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5790:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    57a0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    57c4:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    57d4:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    57e4:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    5800:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5810:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5820:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5840:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5850:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5860:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5880:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    5890:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    58a0:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    58c0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    58d0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    58e0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5900:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5910:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    5920:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    5948:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5960:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5988:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    59a0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    59b0:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    59c0:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    59d0:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    59e0:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5a08:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5a20:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5a38:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    5a48:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5a58:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5a68:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a80:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5a90:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5aa8:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5ac0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5ad0:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    5ae0:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    5b00:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5b10:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b20:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5b40:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b50:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b60:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5b80:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b90:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5ba0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5bc0:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    5bd0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5be0:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5c00:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5c10:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5c20:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5c40:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5c50:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5c60:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5c80:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5c90:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    5ca0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    5cc0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5cd0:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5ce0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5d00:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5d10:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5d20:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5d44:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5d54:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    5d64:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    5d80:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5d90:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    5da0:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5dc0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5dd0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5de0:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5e00:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    5e10:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5e20:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5e40:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5e50:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5e60:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5e80:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5e90:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5ea0:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5ec0:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5ed0:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5ee0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5f00:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5f10:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5f20:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    5f40:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5f50:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5f60:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5f80:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5f90:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5fa0:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5fc0:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5fd0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5fe0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6000:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6010:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6020:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    6040:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6050:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6060:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6080:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    6090:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    60a0:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    60c0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60d0:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    60e0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6100:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6110:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    6120:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6140:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    6150:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6160:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6180:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6190:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    61a0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    61c0:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    61d0:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    61e0:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    6200:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6210:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6220:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6244:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    6254:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    62a8:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    62c0:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    62d0:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    62e0:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6308:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6318:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6328:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6340:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6350:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6360:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6388:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6398:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    63a8:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    63c4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    63d4:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    63e4:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    6408:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6418:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6428:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6444:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    6454:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6464:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    6488:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6498:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    64a8:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    64c0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    64d0:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    64e0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6500:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    6510:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6520:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6544:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    6554:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6564:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    6574:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    6584:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    6594:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    65a4:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    65c0:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    65d0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    65e0:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6608:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    6618:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    6628:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6648:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6658:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6668:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6688:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6698:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    66a8:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    66c8:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    66d8:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    66e8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6708:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6718:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    6728:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    6748:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6758:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6768:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6788:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6798:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    67a8:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    67c0:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    67d0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    67e0:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    6808:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6818:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6828:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6848:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6858:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    6868:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6888:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    6898:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    68a8:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    68c8:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    68d8:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    68e8:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6908:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6918:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    6928:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6948:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    6958:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6968:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6980:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6990:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    69a0:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    69b8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    69c8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    69d8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    69e8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6a00:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    6a10:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    6a20:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    6a3c:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    6a4c:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    6a5c:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    6a6c:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    6a7c:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6a8c:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    6a9c:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

00006ab8 <__ctors_end>:
    6ab8:	11 24       	eor	r1, r1
    6aba:	1f be       	out	0x3f, r1	; 63
    6abc:	cf ef       	ldi	r28, 0xFF	; 255
    6abe:	d0 e1       	ldi	r29, 0x10	; 16
    6ac0:	de bf       	out	0x3e, r29	; 62
    6ac2:	cd bf       	out	0x3d, r28	; 61

00006ac4 <__do_copy_data>:
    6ac4:	11 e0       	ldi	r17, 0x01	; 1
    6ac6:	a0 e0       	ldi	r26, 0x00	; 0
    6ac8:	b1 e0       	ldi	r27, 0x01	; 1
    6aca:	e2 ea       	ldi	r30, 0xA2	; 162
    6acc:	f5 ec       	ldi	r31, 0xC5	; 197
    6ace:	02 c0       	rjmp	.+4      	; 0x6ad4 <__do_copy_data+0x10>
    6ad0:	05 90       	lpm	r0, Z+
    6ad2:	0d 92       	st	X+, r0
    6ad4:	a6 30       	cpi	r26, 0x06	; 6
    6ad6:	b1 07       	cpc	r27, r17
    6ad8:	d9 f7       	brne	.-10     	; 0x6ad0 <__do_copy_data+0xc>

00006ada <__do_clear_bss>:
    6ada:	1f e0       	ldi	r17, 0x0F	; 15
    6adc:	a6 e0       	ldi	r26, 0x06	; 6
    6ade:	b1 e0       	ldi	r27, 0x01	; 1
    6ae0:	01 c0       	rjmp	.+2      	; 0x6ae4 <.do_clear_bss_start>

00006ae2 <.do_clear_bss_loop>:
    6ae2:	1d 92       	st	X+, r1

00006ae4 <.do_clear_bss_start>:
    6ae4:	a3 3f       	cpi	r26, 0xF3	; 243
    6ae6:	b1 07       	cpc	r27, r17
    6ae8:	e1 f7       	brne	.-8      	; 0x6ae2 <.do_clear_bss_loop>

00006aea <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6aea:	0e 94 a9 39 	call	0x7352	; 0x7352 <wdt_randomize>
#endif

    MCUSR = 0;
    6aee:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6af0:	88 e1       	ldi	r24, 0x18	; 24
    6af2:	0f b6       	in	r0, 0x3f	; 63
    6af4:	f8 94       	cli
    6af6:	80 93 60 00 	sts	0x0060, r24
    6afa:	10 92 60 00 	sts	0x0060, r1
    6afe:	0f be       	out	0x3f, r0	; 63

00006b00 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6b00:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <isEepromFormatted>
    6b04:	81 11       	cpse	r24, r1
    6b06:	02 c0       	rjmp	.+4      	; 0x6b0c <Initialize+0xc>
    6b08:	0e 94 3b 3a 	call	0x7476	; 0x7476 <FormatEeprom>

	cli();
    6b0c:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6b0e:	81 e0       	ldi	r24, 0x01	; 1
    6b10:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    6b14:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    6b18:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6b1c:	10 92 02 0b 	sts	0x0B02, r1
    6b20:	10 92 08 0b 	sts	0x0B08, r1
    6b24:	10 92 0e 0b 	sts	0x0B0E, r1
    6b28:	10 92 14 0b 	sts	0x0B14, r1
    6b2c:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6b30:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    6b34:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6b38:	92 e1       	ldi	r25, 0x12	; 18
    6b3a:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    6b3e:	90 ee       	ldi	r25, 0xE0	; 224
    6b40:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    6b44:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    6b48:	94 e1       	ldi	r25, 0x14	; 20
    6b4a:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    6b4e:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    6b52:	10 92 f4 0a 	sts	0x0AF4, r1
    6b56:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    6b5a:	10 92 f8 0a 	sts	0x0AF8, r1
    6b5e:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    6b62:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    6b66:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <InitializeVideoMode>
    6b6a:	82 e8       	ldi	r24, 0x82	; 130
    6b6c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6b6e:	fc 01       	movw	r30, r24
    6b70:	25 91       	lpm	r18, Z+
    6b72:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6b74:	f9 01       	movw	r30, r18
    6b76:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6b78:	30 83       	st	Z, r19
    6b7a:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6b7c:	20 e0       	ldi	r18, 0x00	; 0
    6b7e:	80 3b       	cpi	r24, 0xB0	; 176
    6b80:	92 07       	cpc	r25, r18
    6b82:	a9 f7       	brne	.-22     	; 0x6b6e <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6b84:	78 94       	sei
	
	DisplayLogo();
    6b86:	0e 94 df 46 	call	0x8dbe	; 0x8dbe <DisplayLogo>
    6b8a:	0e 94 db 5f 	call	0xbfb6	; 0xbfb6 <main>
    6b8e:	0c 94 cf 62 	jmp	0xc59e	; 0xc59e <_exit>

00006b92 <__bad_interrupt>:
    6b92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006b96 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    6b96:	0c e0       	ldi	r16, 0x0C	; 12
    6b98:	0a 95       	dec	r16
    6b9a:	f1 f7       	brne	.-4      	; 0x6b98 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    6b9c:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    6b9e:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    6ba0:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    6ba2:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6ba4:	20 91 c1 0b 	lds	r18, 0x0BC1


		clr r16
    6ba8:	00 27       	eor	r16, r16

00006baa <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    6baa:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    6bac:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    6bae:	ac 0f       	add	r26, r28
		adc XH,YH
    6bb0:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    6bb2:	1c 91       	ld	r17, X
		std Z+2,r17
    6bb4:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    6bb6:	02 17       	cp	r16, r18
		brsh noov
    6bb8:	08 f4       	brcc	.+2      	; 0x6bbc <noov>
		mov r17,r16
    6bba:	10 2f       	mov	r17, r16

00006bbc <noov>:
	noov:
		st X,r17
    6bbc:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    6bbe:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    6bc0:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    6bc2:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    6bc4:	90 f3       	brcs	.-28     	; 0x6baa <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    6bc6:	05 e2       	ldi	r16, 0x25	; 37

00006bc8 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    6bc8:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    6bca:	1a 95       	dec	r17
		brne .-4
    6bcc:	f1 f7       	brne	.-4      	; 0x6bca <wait_loop+0x2>

		dec r16
    6bce:	0a 95       	dec	r16
		brne wait_loop
    6bd0:	d9 f7       	brne	.-10     	; 0x6bc8 <wait_loop>

		lds r2,overlay_tile_table
    6bd2:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    6bd6:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    6bda:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    6bde:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    6be2:	68 01       	movw	r12, r16
		movw r6,r16
    6be4:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6be6:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6be8:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    6bea:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6bec:	4e 01       	movw	r8, r28
		clr r0
    6bee:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6bf0:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    6bf4:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6bf6:	09 f0       	breq	.+2      	; 0x6bfa <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    6bf8:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    6bfa:	09 f0       	breq	.+2      	; 0x6bfe <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    6bfc:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6bfe:	09 f0       	breq	.+2      	; 0x6c02 <wait_loop+0x3a>
		mov r24,r19
    6c00:	83 2f       	mov	r24, r19

		breq .+2
    6c02:	09 f0       	breq	.+2      	; 0x6c06 <wait_loop+0x3e>
		movw r12,r2
    6c04:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6c06:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6c08:	a0 2e       	mov	r10, r16
		clr r22
    6c0a:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6c0c:	78 e0       	ldi	r23, 0x08	; 8

00006c0e <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6c0e:	7d d2       	rcall	.+1274   	; 0x710a <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6c10:	3c e0       	ldi	r19, 0x0C	; 12
    6c12:	3a 95       	dec	r19
    6c14:	f1 f7       	brne	.-4      	; 0x6c12 <next_tile_line+0x4>
    6c16:	00 00       	nop
    6c18:	00 00       	nop

		;***draw line***
		call render_tile_line
    6c1a:	0e 94 3e 36 	call	0x6c7c	; 0x6c7c <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6c1e:	3f e0       	ldi	r19, 0x0F	; 15
    6c20:	3a 95       	dec	r19
    6c22:	f1 f7       	brne	.-4      	; 0x6c20 <next_tile_line+0x12>
    6c24:	00 00       	nop
    6c26:	00 00       	nop

		dec r10
    6c28:	aa 94       	dec	r10
		breq frame_end
    6c2a:	a9 f0       	breq	.+42     	; 0x6c56 <frame_end>
	
		inc r22
    6c2c:	63 95       	inc	r22
		lpm ;3 nop
    6c2e:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6c30:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6c32:	31 f0       	breq	.+12     	; 0x6c40 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6c34:	33 e0       	ldi	r19, 0x03	; 3
    6c36:	3a 95       	dec	r19
    6c38:	f1 f7       	brne	.-4      	; 0x6c36 <next_tile_line+0x28>
    6c3a:	00 00       	nop
    6c3c:	00 00       	nop
		
		rjmp next_tile_line	
    6c3e:	e7 cf       	rjmp	.-50     	; 0x6c0e <next_tile_line>

00006c40 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6c40:	66 27       	eor	r22, r22

		clr r0
    6c42:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6c44:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6c46:	c3 0f       	add	r28, r19
		adc YH,r0
    6c48:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6c4a:	8a 95       	dec	r24
		brne .+2
    6c4c:	09 f4       	brne	.+2      	; 0x6c50 <next_tile_row+0x10>
		movw YL,r8	;main vram
    6c4e:	e4 01       	movw	r28, r8
		brne .+2
    6c50:	09 f4       	brne	.+2      	; 0x6c54 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6c52:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6c54:	dc cf       	rjmp	.-72     	; 0x6c0e <next_tile_line>

00006c56 <frame_end>:

	frame_end:

		WAIT r19,18
    6c56:	36 e0       	ldi	r19, 0x06	; 6
    6c58:	3a 95       	dec	r19
    6c5a:	f1 f7       	brne	.-4      	; 0x6c58 <frame_end+0x2>

		rcall hsync_pulse ;145
    6c5c:	56 d2       	rcall	.+1196   	; 0x710a <hsync_pulse>
	
		clr r1
    6c5e:	11 24       	eor	r1, r1
		call RestoreBackground
    6c60:	0e 94 80 45 	call	0x8b00	; 0x8b00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6c64:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    6c68:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6c6a:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6c6c:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6c6e:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6c72:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6c74:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6c78:	11 24       	eor	r1, r1


		ret
    6c7a:	08 95       	ret

00006c7c <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6c7c:	de 01       	movw	r26, r28

		mul r22,r23
    6c7e:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6c80:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6c82:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6c84:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    6c86:	00 0d       	add	r16, r0
		adc r17,r1
    6c88:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6c8a:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6c8c:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    6c8e:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6c90:	00 0d       	add	r16, r0
		adc r17,r1
    6c92:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6c94:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6c96:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6c98:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6c9a:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6c9c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6c9e:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6ca0:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    6ca2:	08 f4       	brcc	.+2      	; 0x6ca6 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6ca4:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6ca6:	04 0e       	add	r0, r20
	    adc r1,r21
    6ca8:	15 1e       	adc	r1, r21

		movw ZL,r0
    6caa:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6cac:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    6cae:	f0 f0       	brcs	.+60     	; 0x6cec <ramloop>

00006cb0 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6cb0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6cb2:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6cb4:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6cb6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6cb8:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6cba:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6cbc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6cbe:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6cc0:	28 31       	cpi	r18, 0x18	; 24
		nop
    6cc2:	00 00       	nop

	    lpm r16,Z+
    6cc4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6cc6:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6cc8:	08 f4       	brcc	.+2      	; 0x6ccc <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6cca:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6ccc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6cce:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6cd0:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6cd2:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6cd4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6cd6:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6cd8:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    6cda:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6cdc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6cde:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6ce0:	05 91       	lpm	r16, Z+

		breq end	
    6ce2:	31 f1       	breq	.+76     	; 0x6d30 <end>
	    movw ZL,r0   	;copy next tile adress
    6ce4:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6ce6:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6ce8:	18 f7       	brcc	.-58     	; 0x6cb0 <romloop>
	
		rjmp .
    6cea:	00 c0       	rjmp	.+0      	; 0x6cec <ramloop>

00006cec <ramloop>:

	ramloop:

	    ld r16,Z+
    6cec:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6cee:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6cf0:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6cf2:	01 91       	ld	r16, Z+
		nop   
    6cf4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6cf6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6cf8:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6cfa:	01 91       	ld	r16, Z+
		nop
    6cfc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6cfe:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6d00:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    6d02:	00 c0       	rjmp	.+0      	; 0x6d04 <ramloop+0x18>

	    ld r16,Z+
    6d04:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6d06:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6d08:	08 f0       	brcs	.+2      	; 0x6d0c <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6d0a:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6d0c:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6d0e:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6d10:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6d12:	15 1e       	adc	r1, r21
		rjmp .
    6d14:	00 c0       	rjmp	.+0      	; 0x6d16 <ramloop+0x2a>
    
		ld r16,Z+		
    6d16:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6d18:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6d1a:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    6d1c:	00 c0       	rjmp	.+0      	; 0x6d1e <ramloop+0x32>

	    ld r16,Z+	
    6d1e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6d20:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6d22:	01 91       	ld	r16, Z+

	    dec r17
    6d24:	1a 95       	dec	r17
	    breq end
    6d26:	21 f0       	breq	.+8      	; 0x6d30 <end>
	
		movw ZL,r0
    6d28:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6d2a:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6d2c:	08 f6       	brcc	.-126    	; 0x6cb0 <romloop>
		rjmp ramloop
    6d2e:	de cf       	rjmp	.-68     	; 0x6cec <ramloop>

00006d30 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6d30:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6d32:	00 27       	eor	r16, r16
		lpm	
    6d34:	c8 95       	lpm
		nop
    6d36:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6d38:	08 b9       	out	0x08, r16	; 8

		ret
    6d3a:	08 95       	ret

00006d3c <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6d3c:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6d3e:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    6d42:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    6d46:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    6d48:	82 9f       	mul	r24, r18
	add ZL,r0
    6d4a:	e0 0d       	add	r30, r0
	adc ZH,r1
    6d4c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6d4e:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    6d50:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6d52:	62 9f       	mul	r22, r18
	add XL,r0
    6d54:	a0 0d       	add	r26, r0
	adc XH,r1
    6d56:	b1 1d       	adc	r27, r1

	clr r0
    6d58:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    6d5a:	05 90       	lpm	r0, Z+
    6d5c:	0d 92       	st	X+, r0
    6d5e:	05 90       	lpm	r0, Z+
    6d60:	0d 92       	st	X+, r0
    6d62:	05 90       	lpm	r0, Z+
    6d64:	0d 92       	st	X+, r0
    6d66:	05 90       	lpm	r0, Z+
    6d68:	0d 92       	st	X+, r0
    6d6a:	05 90       	lpm	r0, Z+
    6d6c:	0d 92       	st	X+, r0
    6d6e:	05 90       	lpm	r0, Z+
    6d70:	0d 92       	st	X+, r0
    6d72:	05 90       	lpm	r0, Z+
    6d74:	0d 92       	st	X+, r0
    6d76:	05 90       	lpm	r0, Z+
    6d78:	0d 92       	st	X+, r0
    6d7a:	05 90       	lpm	r0, Z+
    6d7c:	0d 92       	st	X+, r0
    6d7e:	05 90       	lpm	r0, Z+
    6d80:	0d 92       	st	X+, r0
    6d82:	05 90       	lpm	r0, Z+
    6d84:	0d 92       	st	X+, r0
    6d86:	05 90       	lpm	r0, Z+
    6d88:	0d 92       	st	X+, r0
    6d8a:	05 90       	lpm	r0, Z+
    6d8c:	0d 92       	st	X+, r0
    6d8e:	05 90       	lpm	r0, Z+
    6d90:	0d 92       	st	X+, r0
    6d92:	05 90       	lpm	r0, Z+
    6d94:	0d 92       	st	X+, r0
    6d96:	05 90       	lpm	r0, Z+
    6d98:	0d 92       	st	X+, r0
    6d9a:	05 90       	lpm	r0, Z+
    6d9c:	0d 92       	st	X+, r0
    6d9e:	05 90       	lpm	r0, Z+
    6da0:	0d 92       	st	X+, r0
    6da2:	05 90       	lpm	r0, Z+
    6da4:	0d 92       	st	X+, r0
    6da6:	05 90       	lpm	r0, Z+
    6da8:	0d 92       	st	X+, r0
    6daa:	05 90       	lpm	r0, Z+
    6dac:	0d 92       	st	X+, r0
    6dae:	05 90       	lpm	r0, Z+
    6db0:	0d 92       	st	X+, r0
    6db2:	05 90       	lpm	r0, Z+
    6db4:	0d 92       	st	X+, r0
    6db6:	05 90       	lpm	r0, Z+
    6db8:	0d 92       	st	X+, r0
    6dba:	05 90       	lpm	r0, Z+
    6dbc:	0d 92       	st	X+, r0
    6dbe:	05 90       	lpm	r0, Z+
    6dc0:	0d 92       	st	X+, r0
    6dc2:	05 90       	lpm	r0, Z+
    6dc4:	0d 92       	st	X+, r0
    6dc6:	05 90       	lpm	r0, Z+
    6dc8:	0d 92       	st	X+, r0
    6dca:	05 90       	lpm	r0, Z+
    6dcc:	0d 92       	st	X+, r0
    6dce:	05 90       	lpm	r0, Z+
    6dd0:	0d 92       	st	X+, r0
    6dd2:	05 90       	lpm	r0, Z+
    6dd4:	0d 92       	st	X+, r0
    6dd6:	05 90       	lpm	r0, Z+
    6dd8:	0d 92       	st	X+, r0
    6dda:	05 90       	lpm	r0, Z+
    6ddc:	0d 92       	st	X+, r0
    6dde:	05 90       	lpm	r0, Z+
    6de0:	0d 92       	st	X+, r0
    6de2:	05 90       	lpm	r0, Z+
    6de4:	0d 92       	st	X+, r0
    6de6:	05 90       	lpm	r0, Z+
    6de8:	0d 92       	st	X+, r0
    6dea:	05 90       	lpm	r0, Z+
    6dec:	0d 92       	st	X+, r0
    6dee:	05 90       	lpm	r0, Z+
    6df0:	0d 92       	st	X+, r0
    6df2:	05 90       	lpm	r0, Z+
    6df4:	0d 92       	st	X+, r0
    6df6:	05 90       	lpm	r0, Z+
    6df8:	0d 92       	st	X+, r0
    6dfa:	05 90       	lpm	r0, Z+
    6dfc:	0d 92       	st	X+, r0
    6dfe:	05 90       	lpm	r0, Z+
    6e00:	0d 92       	st	X+, r0
    6e02:	05 90       	lpm	r0, Z+
    6e04:	0d 92       	st	X+, r0
    6e06:	05 90       	lpm	r0, Z+
    6e08:	0d 92       	st	X+, r0
    6e0a:	05 90       	lpm	r0, Z+
    6e0c:	0d 92       	st	X+, r0
    6e0e:	05 90       	lpm	r0, Z+
    6e10:	0d 92       	st	X+, r0
    6e12:	05 90       	lpm	r0, Z+
    6e14:	0d 92       	st	X+, r0
    6e16:	05 90       	lpm	r0, Z+
    6e18:	0d 92       	st	X+, r0
    6e1a:	05 90       	lpm	r0, Z+
    6e1c:	0d 92       	st	X+, r0
    6e1e:	05 90       	lpm	r0, Z+
    6e20:	0d 92       	st	X+, r0
    6e22:	05 90       	lpm	r0, Z+
    6e24:	0d 92       	st	X+, r0
    6e26:	05 90       	lpm	r0, Z+
    6e28:	0d 92       	st	X+, r0
    6e2a:	05 90       	lpm	r0, Z+
    6e2c:	0d 92       	st	X+, r0
    6e2e:	05 90       	lpm	r0, Z+
    6e30:	0d 92       	st	X+, r0
    6e32:	05 90       	lpm	r0, Z+
    6e34:	0d 92       	st	X+, r0
    6e36:	05 90       	lpm	r0, Z+
    6e38:	0d 92       	st	X+, r0
    6e3a:	05 90       	lpm	r0, Z+
    6e3c:	0d 92       	st	X+, r0
    6e3e:	05 90       	lpm	r0, Z+
    6e40:	0d 92       	st	X+, r0
    6e42:	05 90       	lpm	r0, Z+
    6e44:	0d 92       	st	X+, r0
    6e46:	05 90       	lpm	r0, Z+
    6e48:	0d 92       	st	X+, r0
    6e4a:	05 90       	lpm	r0, Z+
    6e4c:	0d 92       	st	X+, r0
    6e4e:	05 90       	lpm	r0, Z+
    6e50:	0d 92       	st	X+, r0
    6e52:	05 90       	lpm	r0, Z+
    6e54:	0d 92       	st	X+, r0
    6e56:	05 90       	lpm	r0, Z+
    6e58:	0d 92       	st	X+, r0


	clr r1
    6e5a:	11 24       	eor	r1, r1
	ret
    6e5c:	08 95       	ret

00006e5e <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6e5e:	0f 93       	push	r16
	push r17
    6e60:	1f 93       	push	r17
	push YL
    6e62:	cf 93       	push	r28
	push YH
    6e64:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6e66:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6e68:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6e6a:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    6e6c:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6e6e:	e0 0d       	add	r30, r0
	adc ZH,r1
    6e70:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6e72:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6e74:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6e76:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6e78:	8e 9f       	mul	r24, r30
	movw r26,r0
    6e7a:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6e7c:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6e7e:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6e80:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    6e82:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    6e84:	00 24       	eor	r0, r0
	add YL,r1
    6e86:	c1 0d       	add	r28, r1
	adc YH,r0		
    6e88:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6e8a:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6e8c:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6e8e:	ea 0f       	add	r30, r26
	adc ZH,r27
    6e90:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6e92:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    6e94:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6e96:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6e98:	69 9f       	mul	r22, r25
	add XL,r0
    6e9a:	a0 0d       	add	r26, r0
	adc XH,r1
    6e9c:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6e9e:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6ea0:	dd 27       	eor	r29, r29

	cpi r20,0	
    6ea2:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6ea4:	51 f4       	brne	.+20     	; 0x6eba <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6ea6:	a2 0f       	add	r26, r18
	adc XH,r1
    6ea8:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6eaa:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6eac:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6eae:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6eb0:	11 c0       	rjmp	.+34     	; 0x6ed4 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6eb2:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6eb4:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6eb6:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6eb8:	0d c0       	rjmp	.+26     	; 0x6ed4 <x_check_end>

00006eba <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6eba:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6ebc:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6ebe:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6ec0:	04 c0       	rjmp	.+8      	; 0x6eca <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6ec2:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6ec4:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6ec6:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6ec8:	05 c0       	rjmp	.+10     	; 0x6ed4 <x_check_end>

00006eca <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6eca:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6ecc:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6ece:	e2 0f       	add	r30, r18
	adc ZH,r1
    6ed0:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6ed2:	31 97       	sbiw	r30, 0x01	; 1

00006ed4 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6ed4:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6ed6:	41 f4       	brne	.+16     	; 0x6ee8 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6ed8:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6eda:	93 9f       	mul	r25, r19
	add XL,r0
    6edc:	a0 0d       	add	r26, r0
	adc XH,r1
    6ede:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6ee0:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    6ee2:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    6ee4:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    6ee6:	0a c0       	rjmp	.+20     	; 0x6efc <y_check_end>

00006ee8 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6ee8:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6eea:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6eec:	63 2f       	mov	r22, r19
	dec r22
    6eee:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6ef0:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6ef2:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6ef4:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6ef6:	56 9f       	mul	r21, r22
	add ZL,r0
    6ef8:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6efa:	f1 1d       	adc	r31, r1

00006efc <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6efc:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6efe:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6f00:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6f02:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6f04:	00 ff       	sbrs	r16, 0
	clr r23
    6f06:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6f08:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6f0a:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6f0c:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6f0e:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6f10:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6f12:	59 1b       	sub	r21, r25

00006f14 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6f14:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6f16:	48 1b       	sub	r20, r24

00006f18 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6f18:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6f1a:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6f1c:	2c 93       	st	X, r18
	adiw XL,1
    6f1e:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6f20:	e6 0f       	add	r30, r22
	adc ZH,r23
    6f22:	f7 1f       	adc	r31, r23
	dec r20
    6f24:	4a 95       	dec	r20
	brne x_loop
    6f26:	c1 f7       	brne	.-16     	; 0x6f18 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6f28:	ec 0f       	add	r30, r28
	adc ZH,YH
    6f2a:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6f2c:	a8 0f       	add	r26, r24
	adc XH,r1
    6f2e:	b1 1d       	adc	r27, r1
	dec r21
    6f30:	5a 95       	dec	r21
	brne y_loop
    6f32:	81 f7       	brne	.-32     	; 0x6f14 <y_loop>


	pop YH
    6f34:	df 91       	pop	r29
	pop YL
    6f36:	cf 91       	pop	r28
	pop r17
    6f38:	1f 91       	pop	r17
	pop r16
    6f3a:	0f 91       	pop	r16
	ret
    6f3c:	08 95       	ret

00006f3e <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6f3e:	0f 92       	push	r0
	push r1
    6f40:	1f 92       	push	r1
	push ZL;2
    6f42:	ef 93       	push	r30
	push ZH;2
    6f44:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6f46:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6f48:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6f4a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6f4e:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6f50:	f1 e0       	ldi	r31, 0x01	; 1

00006f52 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6f52:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6f54:	00 f0       	brcs	.+0      	; 0x6f56 <latency_loop+0x4>
	inc ZH
    6f56:	f3 95       	inc	r31
	cpi ZH,10
    6f58:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6f5a:	d8 f3       	brcs	.-10     	; 0x6f52 <latency_loop>
	jmp .
    6f5c:	0c 94 b0 37 	jmp	0x6f60	; 0x6f60 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    6f60:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    6f64:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6f66:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    6f6a:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    6f6e:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6f70:	57 c0       	rjmp	.+174    	; 0x7020 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6f72:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6f74:	98 f0       	brcs	.+38     	; 0x6f9c <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6f76:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6f78:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6f7c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6f7e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6f82:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6f84:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6f86:	26 f4       	brtc	.+8      	; 0x6f90 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6f88:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6f8a:	0e 94 96 38 	call	0x712c	; 0x712c <update_sound>
	rjmp sync_end
    6f8e:	b6 c0       	rjmp	.+364    	; 0x70fc <sync_end>

00006f90 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6f90:	e5 e1       	ldi	r30, 0x15	; 21
    6f92:	ea 95       	dec	r30
    6f94:	f1 f7       	brne	.-4      	; 0x6f92 <sync_pre_eq_no_sound_update+0x2>
    6f96:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6f98:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6f9a:	b0 c0       	rjmp	.+352    	; 0x70fc <sync_end>

00006f9c <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6f9c:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6f9e:	38 f1       	brcs	.+78     	; 0x6fee <sync_post_eq>

	rjmp .
    6fa0:	00 c0       	rjmp	.+0      	; 0x6fa2 <sync_eq+0x6>
	rjmp .
    6fa2:	00 c0       	rjmp	.+0      	; 0x6fa4 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6fa4:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6fa6:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6fa8:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6faa:	16 f4       	brtc	.+4      	; 0x6fb0 <sync_eq_skip>
	
	call update_sound
    6fac:	0e 94 96 38 	call	0x712c	; 0x712c <update_sound>

00006fb0 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6fb0:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6fb2:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6fb6:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6fb8:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6fbc:	9f c0       	rjmp	.+318    	; 0x70fc <sync_end>

00006fbe <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6fbe:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6fc0:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6fc2:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6fc4:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6fc8:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6fca:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6fcc:	00 f0       	brcs	.+0      	; 0x6fce <__vector_14+0x10>

	cpi ZL,2
    6fce:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6fd0:	00 f0       	brcs	.+0      	; 0x6fd2 <__vector_14+0x14>

	cpi ZL,3
    6fd2:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6fd4:	00 f0       	brcs	.+0      	; 0x6fd6 <__vector_14+0x18>

	cpi ZL,4
    6fd6:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6fd8:	00 f0       	brcs	.+0      	; 0x6fda <__vector_14+0x1c>

	cpi ZL,5
    6fda:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6fdc:	00 f0       	brcs	.+0      	; 0x6fde <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6fde:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6fe0:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6fe2:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6fe6:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6fe8:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6fea:	ef 91       	pop	r30
	reti
    6fec:	18 95       	reti

00006fee <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6fee:	00 c0       	rjmp	.+0      	; 0x6ff0 <sync_post_eq+0x2>

	bst ZL,0
    6ff0:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6ff2:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6ff4:	26 f4       	brtc	.+8      	; 0x6ffe <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6ff6:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6ff8:	0e 94 96 38 	call	0x712c	; 0x712c <update_sound>
	rjmp sync_pre_eq_cont
    6ffc:	05 c0       	rjmp	.+10     	; 0x7008 <sync_pre_eq_cont>

00006ffe <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6ffe:	e5 e1       	ldi	r30, 0x15	; 21
    7000:	ea 95       	dec	r30
    7002:	f1 f7       	brne	.-4      	; 0x7000 <sync_post_eq_no_sound_update+0x2>
    7004:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7006:	28 9a       	sbi	0x05, 0	; 5

00007008 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7008:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    700c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    700e:	09 f0       	breq	.+2      	; 0x7012 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7010:	75 c0       	rjmp	.+234    	; 0x70fc <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7012:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7014:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    7018:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    701a:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    701e:	6e c0       	rjmp	.+220    	; 0x70fc <sync_end>

00007020 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7020:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7022:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7026:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7028:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    702c:	00 c0       	rjmp	.+0      	; 0x702e <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    702e:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7030:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7032:	00 c0       	rjmp	.+0      	; 0x7034 <sync_hsync+0x14>
	call update_sound
    7034:	0e 94 96 38 	call	0x712c	; 0x712c <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7038:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    703a:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    703e:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7040:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    7044:	ef 17       	cp	r30, r31
	brsh no_render
    7046:	d0 f4       	brcc	.+52     	; 0x707c <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7048:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    704a:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    704e:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7050:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    7054:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7056:	ef 17       	cp	r30, r31
	brlo no_render
    7058:	88 f0       	brcs	.+34     	; 0x707c <no_render>

	;push r1-r29
	ldi ZL,29
    705a:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    705c:	ff 27       	eor	r31, r31

0000705e <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    705e:	00 80       	ld	r0, Z
	push r0
    7060:	0f 92       	push	r0
	dec ZL
    7062:	ea 95       	dec	r30
	brne push_loop	
    7064:	e1 f7       	brne	.-8      	; 0x705e <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7066:	06 e0       	ldi	r16, 0x06	; 6
    7068:	0a 95       	dec	r16
    706a:	f1 f7       	brne	.-4      	; 0x7068 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    706c:	0e 94 cb 35 	call	0x6b96	; 0x6b96 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7070:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7072:	ff 27       	eor	r31, r31

00007074 <pop_loop>:
pop_loop:
	pop r0
    7074:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7076:	01 92       	st	Z+, r0
	cpi ZL,30
    7078:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    707a:	e0 f3       	brcs	.-8      	; 0x7074 <pop_loop>

0000707c <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    707c:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    7080:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7082:	09 f0       	breq	.+2      	; 0x7086 <no_render+0xa>
	rjmp sync_end
    7084:	3b c0       	rjmp	.+118    	; 0x70fc <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7086:	2f 93       	push	r18
	push r19
    7088:	3f 93       	push	r19
	push r20
    708a:	4f 93       	push	r20
	push r21
    708c:	5f 93       	push	r21
	push r22
    708e:	6f 93       	push	r22
	push r23
    7090:	7f 93       	push	r23
	push r24
    7092:	8f 93       	push	r24
	push r25
    7094:	9f 93       	push	r25
	push r26
    7096:	af 93       	push	r26
	push r27
    7098:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    709a:	78 94       	sei
	clr r1
    709c:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    709e:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    70a0:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    70a4:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    70a6:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    70aa:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    70ae:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    70b2:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    70b6:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    70ba:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    70be:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    70c2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    70c4:	f1 05       	cpc	r31, r1
	breq .+2 
    70c6:	09 f0       	breq	.+2      	; 0x70ca <no_render+0x4e>
	icall
    70c8:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    70ca:	0e 94 2b 3a 	call	0x7456	; 0x7456 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    70ce:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    70d2:	0e 94 90 38 	call	0x7120	; 0x7120 <process_music>
	clr r1
    70d6:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    70d8:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    70dc:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    70e0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    70e2:	f1 05       	cpc	r31, r1
	breq .+2 
    70e4:	09 f0       	breq	.+2      	; 0x70e8 <no_render+0x6c>
	icall
    70e6:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    70e8:	bf 91       	pop	r27
	pop r26
    70ea:	af 91       	pop	r26
	pop r25
    70ec:	9f 91       	pop	r25
	pop r24
    70ee:	8f 91       	pop	r24
	pop r23
    70f0:	7f 91       	pop	r23
	pop r22
    70f2:	6f 91       	pop	r22
	pop r21
    70f4:	5f 91       	pop	r21
	pop r20
    70f6:	4f 91       	pop	r20
	pop r19
    70f8:	3f 91       	pop	r19
	pop r18
    70fa:	2f 91       	pop	r18

000070fc <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    70fc:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    70fe:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7100:	ff 91       	pop	r31
	pop ZL
    7102:	ef 91       	pop	r30
	pop r1
    7104:	1f 90       	pop	r1
	pop r0
    7106:	0f 90       	pop	r0
	reti
    7108:	18 95       	reti

0000710a <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    710a:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    710c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    710e:	00 c0       	rjmp	.+0      	; 0x7110 <hsync_pulse+0x6>
	call update_sound
    7110:	0e 94 96 38 	call	0x712c	; 0x712c <update_sound>

	lds ZL,sync_pulse
    7114:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    7118:	ea 95       	dec	r30
	sts sync_pulse,ZL
    711a:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    711e:	08 95       	ret

00007120 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7120:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    7124:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7126:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <ProcessMusic>
#endif

	ret
    712a:	08 95       	ret

0000712c <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    712c:	0f 93       	push	r16
	push r17
    712e:	1f 93       	push	r17
	push r18
    7130:	2f 93       	push	r18
	push r28
    7132:	cf 93       	push	r28
	push r29
    7134:	df 93       	push	r29

	mov r18,ZL
    7136:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7138:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    713c:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    7140:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7142:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    7146:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    714a:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    714e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7150:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7152:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    7156:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    715a:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    715e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7160:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7162:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7164:	d0 2d       	mov	r29, r0
	nop
    7166:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7168:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    716c:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    7170:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7172:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    7176:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    717a:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    717e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7180:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7182:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    7186:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    718a:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    718e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7190:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7192:	20 ff       	sbrs	r18, 0
	rjmp .
    7194:	00 c0       	rjmp	.+0      	; 0x7196 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7196:	01 03       	mulsu	r16, r17
	clr r0
    7198:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    719a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    719c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    719e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    71a0:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    71a4:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    71a8:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    71aa:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    71ae:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    71b2:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    71b6:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    71b8:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    71ba:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    71be:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    71c2:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    71c6:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    71c8:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    71ca:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    71cc:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    71ce:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    71d2:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    71d6:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    71da:	ea 95       	dec	r30
	brpl ch4_no_shift	
    71dc:	92 f4       	brpl	.+36     	; 0x7202 <ch4_no_shift>

	lds ZH,tr4_params
    71de:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    71e2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    71e4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    71e6:	00 2e       	mov	r0, r16
	lsr r0
    71e8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    71ea:	00 26       	eor	r0, r16
	bst r0,0
    71ec:	00 fa       	bst	r0, 0
	lsr r17
    71ee:	16 95       	lsr	r17
	ror r16
    71f0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    71f2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    71f4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    71f6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    71f8:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    71fc:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    7200:	03 c0       	rjmp	.+6      	; 0x7208 <ch4_end>

00007202 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7202:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7204:	1a 95       	dec	r17
	brne .-4
    7206:	f1 f7       	brne	.-4      	; 0x7204 <ch4_no_shift+0x2>

00007208 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7208:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    720c:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    720e:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7210:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7212:	21 ff       	sbrs	r18, 1
	rjmp .
    7214:	00 c0       	rjmp	.+0      	; 0x7216 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7216:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7218:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    721a:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    721e:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7220:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7222:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7224:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7226:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    722a:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    722e:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7230:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    7234:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    7238:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    723c:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    723e:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    7242:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7244:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7246:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7248:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    724c:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    7250:	00 19       	sub	r16, r0
	sbc r17,r1
    7252:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7254:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    7258:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    725c:	e0 15       	cp	r30, r0
	cpc ZH,r1
    725e:	f1 05       	cpc	r31, r1
	brlo .+2
    7260:	08 f0       	brcs	.+2      	; 0x7264 <ch4_end+0x5c>
	movw ZL,r16
    7262:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7264:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    7268:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    726c:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    726e:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    7272:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7274:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7276:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7278:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    727a:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    727c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    727e:	d0 05       	cpc	r29, r0
	brlt .+2
    7280:	0c f0       	brlt	.+2      	; 0x7284 <ch4_end+0x7c>
	ldi r28,127
    7282:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7284:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7286:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7288:	d0 05       	cpc	r29, r0
	brge .+2
    728a:	0c f4       	brge	.+2      	; 0x728e <ch4_end+0x86>
	ldi r28,-128
    728c:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    728e:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7290:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    7294:	df 91       	pop	r29
	pop r28
    7296:	cf 91       	pop	r28
	pop r18
    7298:	2f 91       	pop	r18
	pop r17
    729a:	1f 91       	pop	r17
	pop r16
    729c:	0f 91       	pop	r16
	
	ret
    729e:	08 95       	ret

000072a0 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    72a0:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    72a4:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    72a8:	08 95       	ret

000072aa <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    72aa:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    72ac:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    72ae:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    72b0:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    72b2:	68 e1       	ldi	r22, 0x18	; 24

000072b4 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    72b4:	6d 93       	st	X+, r22
	sbiw r30,1
    72b6:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    72b8:	e9 f7       	brne	.-6      	; 0x72b4 <fill_vram_loop>

	clr r1
    72ba:	11 24       	eor	r1, r1

	ret
    72bc:	08 95       	ret

000072be <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    72be:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    72c2:	45 0f       	add	r20, r21
	rjmp SetTile	
    72c4:	00 c0       	rjmp	.+0      	; 0x72c6 <SetTile>

000072c6 <SetTile>:

	ret

#else

	clr r25
    72c6:	99 27       	eor	r25, r25
	clr r23	
    72c8:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    72ca:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    72cc:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    72ce:	08 0e       	add	r0, r24
	adc r1,r25
    72d0:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    72d2:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    72d4:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    72d6:	a0 0d       	add	r26, r0
	adc XH,r1
    72d8:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    72da:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    72dc:	4c 93       	st	X, r20

	clr r1
    72de:	11 24       	eor	r1, r1

	ret
    72e0:	08 95       	ret

000072e2 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    72e2:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    72e6:	08 95       	ret

000072e8 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    72e8:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    72ec:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    72f0:	08 95       	ret

000072f2 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    72f2:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    72f6:	81 70       	andi	r24, 0x01	; 1
	ret
    72f8:	08 95       	ret

000072fa <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    72fa:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    72fe:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7300:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    7304:	08 95       	ret

00007306 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7306:	88 23       	and	r24, r24
	brne rj_p2
    7308:	29 f4       	brne	.+10     	; 0x7314 <rj_p2>
		
	lds r24,joypad1_status_lo
    730a:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    730e:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    7312:	08 95       	ret

00007314 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7314:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    7318:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    731c:	08 95       	ret

0000731e <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    731e:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7320:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7322:	f1 f7       	brne	.-4      	; 0x7320 <WaitUs+0x2>
	nop
    7324:	00 00       	nop
	sbiw r24,1
    7326:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7328:	d1 f7       	brne	.-12     	; 0x731e <WaitUs>

	ret
    732a:	08 95       	ret

0000732c <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    732c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    732e:	fe cf       	rjmp	.-4      	; 0x732c <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7330:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7332:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7334:	60 bd       	out	0x20, r22	; 32
   cli
    7336:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7338:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    733a:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    733c:	78 94       	sei
   ret
    733e:	08 95       	ret

00007340 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7340:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7342:	fe cf       	rjmp	.-4      	; 0x7340 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7344:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7346:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7348:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    734a:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    734c:	80 b5       	in	r24, 0x20	; 32
   sei
    734e:	78 94       	sei
   ret
    7350:	08 95       	ret

00007352 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7352:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7354:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7358:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    735c:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    735e:	80 93 81 00 	sts	0x0081, r24

		cli
    7362:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7364:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7366:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    736a:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    736c:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7370:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7372:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7376:	90 93 60 00 	sts	0x0060, r25
	
		sei
    737a:	78 94       	sei

0000737c <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    737c:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    7380:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7382:	e0 f3       	brcs	.-8      	; 0x737c <wait>

		ret
    7384:	08 95       	ret

00007386 <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    7386:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    738a:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    738e:	08 95       	ret

00007390 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7390:	0f 93       	push	r16
		push r17
    7392:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    7394:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7396:	0f 93       	push	r16

		lds r16,sync_pulse
    7398:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    739c:	03 95       	inc	r16
		sts sync_pulse,r16
    739e:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    73a2:	00 fd       	sbrc	r16, 0
		rjmp 1f
    73a4:	08 c0       	rjmp	.+16     	; 0x73b6 <__vector_8+0x26>
		lds r17,random_value
    73a6:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    73aa:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    73ae:	10 27       	eor	r17, r16
		sts random_value,r17
    73b0:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    73b4:	07 c0       	rjmp	.+14     	; 0x73c4 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    73b6:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    73ba:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    73be:	10 27       	eor	r17, r16
		sts random_value+1,r17
    73c0:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    73c4:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    73c6:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    73ca:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    73cc:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    73ce:	1f 91       	pop	r17
		pop r16
    73d0:	0f 91       	pop	r16
		reti
    73d2:	18 95       	reti

000073d4 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    73d4:	98 e0       	ldi	r25, 0x08	; 8
    73d6:	88 e1       	ldi	r24, 0x18	; 24
    73d8:	0f b6       	in	r0, 0x3f	; 63
    73da:	f8 94       	cli
    73dc:	a8 95       	wdr
    73de:	80 93 60 00 	sts	0x0060, r24
    73e2:	0f be       	out	0x3f, r0	; 63
    73e4:	90 93 60 00 	sts	0x0060, r25
	while(1);
    73e8:	ff cf       	rjmp	.-2      	; 0x73e8 <SoftReset+0x14>

000073ea <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    73ea:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    73ec:	c8 95       	lpm
    73ee:	c8 95       	lpm
		Wait200ns();
    73f0:	c8 95       	lpm
    73f2:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    73f4:	12 98       	cbi	0x02, 2	; 2
    73f6:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    73f8:	80 e0       	ldi	r24, 0x00	; 0
    73fa:	90 e0       	ldi	r25, 0x00	; 0
    73fc:	20 e0       	ldi	r18, 0x00	; 0
    73fe:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7400:	36 95       	lsr	r19
    7402:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7404:	96 95       	lsr	r25
    7406:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7408:	c8 95       	lpm
    740a:	c8 95       	lpm
			Wait200ns();
    740c:	c8 95       	lpm
    740e:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7410:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7412:	00 9b       	sbis	0x00, 0	; 0
    7414:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7416:	01 9b       	sbis	0x00, 1	; 0
    7418:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    741a:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    741c:	c8 95       	lpm
    741e:	c8 95       	lpm
			Wait200ns();
    7420:	c8 95       	lpm
    7422:	c8 95       	lpm
    7424:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7426:	61 f7       	brne	.-40     	; 0x7400 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7428:	30 93 f2 0a 	sts	0x0AF2, r19
    742c:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    7430:	90 93 f6 0a 	sts	0x0AF6, r25
    7434:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7438:	80 91 f1 0a 	lds	r24, 0x0AF1
    743c:	90 91 f2 0a 	lds	r25, 0x0AF2
    7440:	0f 97       	sbiw	r24, 0x0f	; 15
    7442:	31 f0       	breq	.+12     	; 0x7450 <ReadButtons+0x66>
    7444:	80 91 f5 0a 	lds	r24, 0x0AF5
    7448:	90 91 f6 0a 	lds	r25, 0x0AF6
    744c:	0f 97       	sbiw	r24, 0x0f	; 15
    744e:	11 f4       	brne	.+4      	; 0x7454 <ReadButtons+0x6a>
		SoftReset();
    7450:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <SoftReset>
    7454:	08 95       	ret

00007456 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    7456:	10 92 40 0b 	sts	0x0B40, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    745a:	00 99       	sbic	0x00, 0	; 0
    745c:	03 c0       	rjmp	.+6      	; 0x7464 <ReadControllers+0xe>
    745e:	81 e0       	ldi	r24, 0x01	; 1
    7460:	80 93 40 0b 	sts	0x0B40, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7464:	01 99       	sbic	0x00, 1	; 0
    7466:	05 c0       	rjmp	.+10     	; 0x7472 <ReadControllers+0x1c>
    7468:	80 91 40 0b 	lds	r24, 0x0B40
    746c:	82 60       	ori	r24, 0x02	; 2
    746e:	80 93 40 0b 	sts	0x0B40, r24
			
	//read the standard buttons
	ReadButtons();
    7472:	0c 94 f5 39 	jmp	0x73ea	; 0x73ea <ReadButtons>

00007476 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7476:	cf 93       	push	r28
    7478:	df 93       	push	r29
    747a:	c0 e0       	ldi	r28, 0x00	; 0
    747c:	d0 e0       	ldi	r29, 0x00	; 0
    747e:	fe 01       	movw	r30, r28
    7480:	e0 55       	subi	r30, 0x50	; 80
    7482:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7484:	64 91       	lpm	r22, Z
    7486:	ce 01       	movw	r24, r28
    7488:	0e 94 96 39 	call	0x732c	; 0x732c <WriteEeprom>
    748c:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    748e:	c0 32       	cpi	r28, 0x20	; 32
    7490:	d1 05       	cpc	r29, r1
    7492:	a9 f7       	brne	.-22     	; 0x747e <FormatEeprom+0x8>
    7494:	c0 e2       	ldi	r28, 0x20	; 32
    7496:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7498:	6f ef       	ldi	r22, 0xFF	; 255
    749a:	ce 01       	movw	r24, r28
    749c:	0e 94 96 39 	call	0x732c	; 0x732c <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    74a0:	6f ef       	ldi	r22, 0xFF	; 255
    74a2:	ce 01       	movw	r24, r28
    74a4:	01 96       	adiw	r24, 0x01	; 1
    74a6:	0e 94 96 39 	call	0x732c	; 0x732c <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    74aa:	a0 96       	adiw	r28, 0x20	; 32
    74ac:	c1 15       	cp	r28, r1
    74ae:	88 e0       	ldi	r24, 0x08	; 8
    74b0:	d8 07       	cpc	r29, r24
    74b2:	91 f7       	brne	.-28     	; 0x7498 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    74b4:	df 91       	pop	r29
    74b6:	cf 91       	pop	r28
    74b8:	08 95       	ret

000074ba <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    74ba:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    74bc:	80 e0       	ldi	r24, 0x00	; 0
    74be:	90 e0       	ldi	r25, 0x00	; 0
    74c0:	0e 94 a0 39 	call	0x7340	; 0x7340 <ReadEeprom>
    74c4:	c8 2f       	mov	r28, r24
    74c6:	81 e0       	ldi	r24, 0x01	; 1
    74c8:	90 e0       	ldi	r25, 0x00	; 0
    74ca:	0e 94 a0 39 	call	0x7340	; 0x7340 <ReadEeprom>
    74ce:	28 2f       	mov	r18, r24
    74d0:	30 e0       	ldi	r19, 0x00	; 0
    74d2:	32 2f       	mov	r19, r18
    74d4:	22 27       	eor	r18, r18
    74d6:	2c 0f       	add	r18, r28
    74d8:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    74da:	81 e0       	ldi	r24, 0x01	; 1
    74dc:	2a 35       	cpi	r18, 0x5A	; 90
    74de:	35 45       	sbci	r19, 0x55	; 85
    74e0:	09 f0       	breq	.+2      	; 0x74e4 <isEepromFormatted+0x2a>
    74e2:	80 e0       	ldi	r24, 0x00	; 0
}
    74e4:	cf 91       	pop	r28
    74e6:	08 95       	ret

000074e8 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    74e8:	cf 92       	push	r12
    74ea:	df 92       	push	r13
    74ec:	ef 92       	push	r14
    74ee:	ff 92       	push	r15
    74f0:	0f 93       	push	r16
    74f2:	1f 93       	push	r17
    74f4:	cf 93       	push	r28
    74f6:	df 93       	push	r29
    74f8:	1f 92       	push	r1
    74fa:	cd b7       	in	r28, 0x3d	; 61
    74fc:	de b7       	in	r29, 0x3e	; 62
    74fe:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7500:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <isEepromFormatted>
    7504:	88 23       	and	r24, r24
    7506:	09 f4       	brne	.+2      	; 0x750a <EepromWriteBlock+0x22>
    7508:	4d c0       	rjmp	.+154    	; 0x75a4 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    750a:	f6 01       	movw	r30, r12
    750c:	80 81       	ld	r24, Z
    750e:	91 81       	ldd	r25, Z+1	; 0x01
    7510:	8f 3f       	cpi	r24, 0xFF	; 255
    7512:	ff ef       	ldi	r31, 0xFF	; 255
    7514:	9f 07       	cpc	r25, r31
    7516:	09 f4       	brne	.+2      	; 0x751a <EepromWriteBlock+0x32>
    7518:	47 c0       	rjmp	.+142    	; 0x75a8 <EepromWriteBlock+0xc0>
    751a:	8a 35       	cpi	r24, 0x5A	; 90
    751c:	95 45       	sbci	r25, 0x55	; 85
    751e:	09 f4       	brne	.+2      	; 0x7522 <EepromWriteBlock+0x3a>
    7520:	43 c0       	rjmp	.+134    	; 0x75a8 <EepromWriteBlock+0xc0>
    7522:	00 e2       	ldi	r16, 0x20	; 32
    7524:	10 e0       	ldi	r17, 0x00	; 0
    7526:	f1 2c       	mov	r15, r1
    7528:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    752a:	c8 01       	movw	r24, r16
    752c:	49 83       	std	Y+1, r20	; 0x01
    752e:	0e 94 a0 39 	call	0x7340	; 0x7340 <ReadEeprom>
    7532:	e8 2e       	mov	r14, r24
    7534:	c8 01       	movw	r24, r16
    7536:	01 96       	adiw	r24, 0x01	; 1
    7538:	0e 94 a0 39 	call	0x7340	; 0x7340 <ReadEeprom>
    753c:	28 2f       	mov	r18, r24
    753e:	30 e0       	ldi	r19, 0x00	; 0
    7540:	32 2f       	mov	r19, r18
    7542:	22 27       	eor	r18, r18
    7544:	c9 01       	movw	r24, r18
    7546:	8e 0d       	add	r24, r14
    7548:	91 1d       	adc	r25, r1
		if(id==block->id){
    754a:	f6 01       	movw	r30, r12
    754c:	20 81       	ld	r18, Z
    754e:	31 81       	ldd	r19, Z+1	; 0x01
    7550:	49 81       	ldd	r20, Y+1	; 0x01
    7552:	82 17       	cp	r24, r18
    7554:	93 07       	cpc	r25, r19
    7556:	19 f4       	brne	.+6      	; 0x755e <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7558:	ff 20       	and	r15, r15
    755a:	89 f0       	breq	.+34     	; 0x757e <EepromWriteBlock+0x96>
    755c:	0c c0       	rjmp	.+24     	; 0x7576 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    755e:	01 96       	adiw	r24, 0x01	; 1
    7560:	19 f4       	brne	.+6      	; 0x7568 <EepromWriteBlock+0x80>
    7562:	f1 10       	cpse	r15, r1
    7564:	01 c0       	rjmp	.+2      	; 0x7568 <EepromWriteBlock+0x80>
    7566:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    7568:	4f 5f       	subi	r20, 0xFF	; 255
    756a:	00 5e       	subi	r16, 0xE0	; 224
    756c:	1f 4f       	sbci	r17, 0xFF	; 255
    756e:	40 34       	cpi	r20, 0x40	; 64
    7570:	e1 f6       	brne	.-72     	; 0x752a <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7572:	ff 20       	and	r15, r15
    7574:	d9 f0       	breq	.+54     	; 0x75ac <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7576:	20 e2       	ldi	r18, 0x20	; 32
    7578:	f2 9e       	mul	r15, r18
    757a:	80 01       	movw	r16, r0
    757c:	11 24       	eor	r1, r1
    757e:	76 01       	movw	r14, r12
    7580:	80 e2       	ldi	r24, 0x20	; 32
    7582:	e8 0e       	add	r14, r24
    7584:	f1 1c       	adc	r15, r1
    7586:	0c 19       	sub	r16, r12
    7588:	1d 09       	sbc	r17, r13
    758a:	c6 01       	movw	r24, r12
    758c:	80 0f       	add	r24, r16
    758e:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    7590:	f6 01       	movw	r30, r12
    7592:	61 91       	ld	r22, Z+
    7594:	6f 01       	movw	r12, r30
    7596:	0e 94 96 39 	call	0x732c	; 0x732c <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    759a:	ce 14       	cp	r12, r14
    759c:	df 04       	cpc	r13, r15
    759e:	a9 f7       	brne	.-22     	; 0x758a <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    75a0:	80 e0       	ldi	r24, 0x00	; 0
    75a2:	05 c0       	rjmp	.+10     	; 0x75ae <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    75a4:	84 e0       	ldi	r24, 0x04	; 4
    75a6:	03 c0       	rjmp	.+6      	; 0x75ae <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    75a8:	81 e0       	ldi	r24, 0x01	; 1
    75aa:	01 c0       	rjmp	.+2      	; 0x75ae <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    75ac:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    75ae:	0f 90       	pop	r0
    75b0:	df 91       	pop	r29
    75b2:	cf 91       	pop	r28
    75b4:	1f 91       	pop	r17
    75b6:	0f 91       	pop	r16
    75b8:	ff 90       	pop	r15
    75ba:	ef 90       	pop	r14
    75bc:	df 90       	pop	r13
    75be:	cf 90       	pop	r12
    75c0:	08 95       	ret

000075c2 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    75c2:	df 92       	push	r13
    75c4:	ef 92       	push	r14
    75c6:	ff 92       	push	r15
    75c8:	0f 93       	push	r16
    75ca:	1f 93       	push	r17
    75cc:	cf 93       	push	r28
    75ce:	df 93       	push	r29
    75d0:	7c 01       	movw	r14, r24
    75d2:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    75d4:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <isEepromFormatted>
    75d8:	88 23       	and	r24, r24
    75da:	89 f1       	breq	.+98     	; 0x763e <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    75dc:	8f ef       	ldi	r24, 0xFF	; 255
    75de:	e8 16       	cp	r14, r24
    75e0:	f8 06       	cpc	r15, r24
    75e2:	79 f1       	breq	.+94     	; 0x7642 <EepromReadBlock+0x80>
    75e4:	00 e0       	ldi	r16, 0x00	; 0
    75e6:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    75e8:	c8 01       	movw	r24, r16
    75ea:	0e 94 a0 39 	call	0x7340	; 0x7340 <ReadEeprom>
    75ee:	d8 2e       	mov	r13, r24
    75f0:	c8 01       	movw	r24, r16
    75f2:	01 96       	adiw	r24, 0x01	; 1
    75f4:	0e 94 a0 39 	call	0x7340	; 0x7340 <ReadEeprom>
    75f8:	28 2f       	mov	r18, r24
    75fa:	30 e0       	ldi	r19, 0x00	; 0
    75fc:	32 2f       	mov	r19, r18
    75fe:	22 27       	eor	r18, r18
    7600:	2d 0d       	add	r18, r13
    7602:	31 1d       	adc	r19, r1
		if(id==blockId){
    7604:	2e 15       	cp	r18, r14
    7606:	3f 05       	cpc	r19, r15
    7608:	39 f4       	brne	.+14     	; 0x7618 <EepromReadBlock+0x56>
    760a:	7e 01       	movw	r14, r28
    760c:	80 e2       	ldi	r24, 0x20	; 32
    760e:	e8 0e       	add	r14, r24
    7610:	f1 1c       	adc	r15, r1
    7612:	0c 1b       	sub	r16, r28
    7614:	1d 0b       	sbc	r17, r29
    7616:	08 c0       	rjmp	.+16     	; 0x7628 <EepromReadBlock+0x66>
    7618:	00 5e       	subi	r16, 0xE0	; 224
    761a:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    761c:	01 15       	cp	r16, r1
    761e:	84 e0       	ldi	r24, 0x04	; 4
    7620:	18 07       	cpc	r17, r24
    7622:	11 f7       	brne	.-60     	; 0x75e8 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    7624:	83 e0       	ldi	r24, 0x03	; 3
    7626:	0e c0       	rjmp	.+28     	; 0x7644 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    7628:	ce 01       	movw	r24, r28
    762a:	80 0f       	add	r24, r16
    762c:	91 1f       	adc	r25, r17
    762e:	0e 94 a0 39 	call	0x7340	; 0x7340 <ReadEeprom>
    7632:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7634:	ce 15       	cp	r28, r14
    7636:	df 05       	cpc	r29, r15
    7638:	b9 f7       	brne	.-18     	; 0x7628 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    763a:	80 e0       	ldi	r24, 0x00	; 0
    763c:	03 c0       	rjmp	.+6      	; 0x7644 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    763e:	84 e0       	ldi	r24, 0x04	; 4
    7640:	01 c0       	rjmp	.+2      	; 0x7644 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7642:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    7644:	df 91       	pop	r29
    7646:	cf 91       	pop	r28
    7648:	1f 91       	pop	r17
    764a:	0f 91       	pop	r16
    764c:	ff 90       	pop	r15
    764e:	ef 90       	pop	r14
    7650:	df 90       	pop	r13
    7652:	08 95       	ret

00007654 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    7654:	fc 01       	movw	r30, r24
    7656:	45 87       	std	Z+13, r20	; 0x0d
    7658:	08 95       	ret

0000765a <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    765a:	e2 e0       	ldi	r30, 0x02	; 2
    765c:	fb e0       	ldi	r31, 0x0B	; 11
    765e:	81 e0       	ldi	r24, 0x01	; 1
    7660:	91 e0       	ldi	r25, 0x01	; 1
    7662:	95 8b       	std	Z+21, r25	; 0x15
    7664:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7666:	43 8b       	std	Z+19, r20	; 0x13
    7668:	08 95       	ret

0000766a <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    766a:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    766c:	90 81       	ld	r25, Z
    766e:	9f 75       	andi	r25, 0x5F	; 95
    7670:	90 83       	st	Z, r25
    7672:	08 95       	ret

00007674 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    7674:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7676:	90 81       	ld	r25, Z
    7678:	90 64       	ori	r25, 0x40	; 64
    767a:	90 83       	st	Z, r25
    767c:	08 95       	ret

0000767e <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    767e:	fc 01       	movw	r30, r24
    7680:	44 87       	std	Z+12, r20	; 0x0c
    7682:	08 95       	ret

00007684 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    7684:	fc 01       	movw	r30, r24
    7686:	47 83       	std	Z+7, r20	; 0x07
    7688:	08 95       	ret

0000768a <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    768a:	fc 01       	movw	r30, r24
    768c:	40 87       	std	Z+8, r20	; 0x08
    768e:	08 95       	ret

00007690 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    7690:	1f 93       	push	r17
    7692:	cf 93       	push	r28
    7694:	df 93       	push	r29
    7696:	ec 01       	movw	r28, r24
    7698:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    769a:	29 81       	ldd	r18, Y+1	; 0x01
    769c:	30 e0       	ldi	r19, 0x00	; 0
    769e:	f9 01       	movw	r30, r18
    76a0:	ee 0f       	add	r30, r30
    76a2:	ff 1f       	adc	r31, r31
    76a4:	e8 5f       	subi	r30, 0xF8	; 248
    76a6:	f0 48       	sbci	r31, 0x80	; 128
    76a8:	65 91       	lpm	r22, Z+
    76aa:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    76ac:	f9 01       	movw	r30, r18
    76ae:	e4 0f       	add	r30, r20
    76b0:	f1 1d       	adc	r31, r1
    76b2:	47 fd       	sbrc	r20, 7
    76b4:	fa 95       	dec	r31
    76b6:	ee 0f       	add	r30, r30
    76b8:	ff 1f       	adc	r31, r31
    76ba:	e8 5f       	subi	r30, 0xF8	; 248
    76bc:	f0 48       	sbci	r31, 0x80	; 128
    76be:	85 91       	lpm	r24, Z+
    76c0:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    76c2:	86 1b       	sub	r24, r22
    76c4:	97 0b       	sbc	r25, r23
    76c6:	60 91 48 0b 	lds	r22, 0x0B48
    76ca:	70 e0       	ldi	r23, 0x00	; 0
    76cc:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
	if(delta==0)delta++;
    76d0:	61 15       	cp	r22, r1
    76d2:	71 05       	cpc	r23, r1
    76d4:	11 f4       	brne	.+4      	; 0x76da <PatchCommand11+0x4a>
    76d6:	61 e0       	ldi	r22, 0x01	; 1
    76d8:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    76da:	86 e0       	ldi	r24, 0x06	; 6
    76dc:	18 9f       	mul	r17, r24
    76de:	f0 01       	movw	r30, r0
    76e0:	11 24       	eor	r1, r1
    76e2:	ee 5f       	subi	r30, 0xFE	; 254
    76e4:	f4 4f       	sbci	r31, 0xF4	; 244
    76e6:	81 81       	ldd	r24, Z+1	; 0x01
    76e8:	92 81       	ldd	r25, Z+2	; 0x02
    76ea:	86 0f       	add	r24, r22
    76ec:	97 1f       	adc	r25, r23
    76ee:	92 83       	std	Z+2, r25	; 0x02
    76f0:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    76f2:	7b 83       	std	Y+3, r23	; 0x03
    76f4:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    76f6:	88 81       	ld	r24, Y
    76f8:	88 60       	ori	r24, 0x08	; 8
    76fa:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    76fc:	89 81       	ldd	r24, Y+1	; 0x01
    76fe:	48 0f       	add	r20, r24
    7700:	4c 83       	std	Y+4, r20	; 0x04
}
    7702:	df 91       	pop	r29
    7704:	cf 91       	pop	r28
    7706:	1f 91       	pop	r17
    7708:	08 95       	ret

0000770a <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    770a:	40 93 48 0b 	sts	0x0B48, r20
    770e:	08 95       	ret

00007710 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    7710:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    7712:	64 2f       	mov	r22, r20
    7714:	0c 94 22 3f 	jmp	0x7e44	; 0x7e44 <SetMixerWave>

00007718 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    7718:	fc 01       	movw	r30, r24
    771a:	86 2f       	mov	r24, r22
	track->note+=param;
    771c:	91 81       	ldd	r25, Z+1	; 0x01
    771e:	64 2f       	mov	r22, r20
    7720:	69 0f       	add	r22, r25
    7722:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7724:	0c 94 0b 3f 	jmp	0x7e16	; 0x7e16 <SetMixerNote>

00007728 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    7728:	fc 01       	movw	r30, r24
    772a:	86 2f       	mov	r24, r22
	track->note-=param;
    772c:	91 81       	ldd	r25, Z+1	; 0x01
    772e:	69 2f       	mov	r22, r25
    7730:	64 1b       	sub	r22, r20
    7732:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7734:	0c 94 0b 3f 	jmp	0x7e16	; 0x7e16 <SetMixerNote>

00007738 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    7738:	0f 93       	push	r16
    773a:	1f 93       	push	r17
    773c:	cf 93       	push	r28
    773e:	df 93       	push	r29
    7740:	1f 92       	push	r1
    7742:	cd b7       	in	r28, 0x3d	; 61
    7744:	de b7       	in	r29, 0x3e	; 62
    7746:	8c 01       	movw	r16, r24
    7748:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    774a:	64 2f       	mov	r22, r20
    774c:	49 83       	std	Y+1, r20	; 0x01
    774e:	0e 94 0b 3f 	call	0x7e16	; 0x7e16 <SetMixerNote>
	track->note=param;
    7752:	49 81       	ldd	r20, Y+1	; 0x01
    7754:	f8 01       	movw	r30, r16
    7756:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7758:	80 81       	ld	r24, Z
    775a:	87 7f       	andi	r24, 0xF7	; 247
    775c:	80 83       	st	Z, r24
}
    775e:	0f 90       	pop	r0
    7760:	df 91       	pop	r29
    7762:	cf 91       	pop	r28
    7764:	1f 91       	pop	r17
    7766:	0f 91       	pop	r16
    7768:	08 95       	ret

0000776a <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    776a:	90 93 b4 0b 	sts	0x0BB4, r25
    776e:	80 93 b3 0b 	sts	0x0BB3, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7772:	8f e6       	ldi	r24, 0x6F	; 111
    7774:	80 93 b6 0b 	sts	0x0BB6, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7778:	10 92 00 0b 	sts	0x0B00, r1
    777c:	e1 e5       	ldi	r30, 0x51	; 81
    777e:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7780:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7782:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7784:	28 e1       	ldi	r18, 0x18	; 24
    7786:	df 01       	movw	r26, r30
    7788:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    778a:	8c 93       	st	X, r24
    778c:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    778e:	1c 92       	st	X, r1
    7790:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7792:	9c 93       	st	X, r25
    7794:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7796:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    7798:	10 82       	st	Z, r1
    779a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    779c:	2c 93       	st	X, r18
    779e:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    77a0:	8c 93       	st	X, r24
    77a2:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    77a4:	3b e0       	ldi	r19, 0x0B	; 11
    77a6:	ef 3b       	cpi	r30, 0xBF	; 191
    77a8:	f3 07       	cpc	r31, r19
    77aa:	69 f7       	brne	.-38     	; 0x7786 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    77ac:	08 95       	ret

000077ae <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    77ae:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    77b0:	ed 91       	ld	r30, X+
    77b2:	fc 91       	ld	r31, X
    77b4:	11 97       	sbiw	r26, 0x01	; 1
    77b6:	9f 01       	movw	r18, r30
    77b8:	2f 5f       	subi	r18, 0xFF	; 255
    77ba:	3f 4f       	sbci	r19, 0xFF	; 255
    77bc:	11 96       	adiw	r26, 0x01	; 1
    77be:	3c 93       	st	X, r19
    77c0:	2e 93       	st	-X, r18
    77c2:	e4 91       	lpm	r30, Z
    77c4:	e7 fd       	sbrc	r30, 7
    77c6:	03 c0       	rjmp	.+6      	; 0x77ce <ReadVarLen+0x20>
    77c8:	8e 2f       	mov	r24, r30
    77ca:	90 e0       	ldi	r25, 0x00	; 0
    77cc:	08 95       	ret
    {
       value &= 0x7F;
    77ce:	ef 77       	andi	r30, 0x7F	; 127
    77d0:	8e 2f       	mov	r24, r30
    77d2:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    77d4:	96 95       	lsr	r25
    77d6:	98 2f       	mov	r25, r24
    77d8:	88 27       	eor	r24, r24
    77da:	97 95       	ror	r25
    77dc:	87 95       	ror	r24
    77de:	2f 5f       	subi	r18, 0xFF	; 255
    77e0:	3f 4f       	sbci	r19, 0xFF	; 255
    77e2:	f9 01       	movw	r30, r18
    77e4:	31 97       	sbiw	r30, 0x01	; 1
    77e6:	e4 91       	lpm	r30, Z
    77e8:	4e 2f       	mov	r20, r30
    77ea:	4f 77       	andi	r20, 0x7F	; 127
    77ec:	84 0f       	add	r24, r20
    77ee:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    77f0:	e7 fd       	sbrc	r30, 7
    77f2:	f0 cf       	rjmp	.-32     	; 0x77d4 <ReadVarLen+0x26>
    77f4:	2d 93       	st	X+, r18
    77f6:	3c 93       	st	X, r19
    }


    return value;
}
    77f8:	08 95       	ret

000077fa <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    77fa:	cf 92       	push	r12
    77fc:	df 92       	push	r13
    77fe:	ff 92       	push	r15
    7800:	0f 93       	push	r16
    7802:	1f 93       	push	r17
    7804:	cf 93       	push	r28
    7806:	df 93       	push	r29
    7808:	1f 92       	push	r1
    780a:	cd b7       	in	r28, 0x3d	; 61
    780c:	de b7       	in	r29, 0x3e	; 62
    780e:	18 2f       	mov	r17, r24
    7810:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7812:	c8 2e       	mov	r12, r24
    7814:	d1 2c       	mov	r13, r1
    7816:	36 e1       	ldi	r19, 0x16	; 22
    7818:	83 9f       	mul	r24, r19
    781a:	f0 01       	movw	r30, r0
    781c:	11 24       	eor	r1, r1
    781e:	ed 5b       	subi	r30, 0xBD	; 189
    7820:	f4 4f       	sbci	r31, 0xF4	; 244
    7822:	80 81       	ld	r24, Z
    7824:	f8 2e       	mov	r15, r24
    7826:	ff 1c       	adc	r15, r15
    7828:	ff 24       	eor	r15, r15
    782a:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    782c:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    782e:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    7830:	9f ef       	ldi	r25, 0xFF	; 255
    7832:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    7834:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    7836:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7838:	87 7b       	andi	r24, 0xB7	; 183
    783a:	80 62       	ori	r24, 0x20	; 32
    783c:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    783e:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7840:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    7842:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    7844:	13 30       	cpi	r17, 0x03	; 3
    7846:	69 f4       	brne	.+26     	; 0x7862 <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    7848:	f1 10       	cpse	r15, r1
    784a:	01 c0       	rjmp	.+2      	; 0x784e <TriggerCommon+0x54>
    784c:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    784e:	81 e0       	ldi	r24, 0x01	; 1
    7850:	91 e0       	ldi	r25, 0x01	; 1
    7852:	90 93 17 0b 	sts	0x0B17, r25
    7856:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    785a:	81 e0       	ldi	r24, 0x01	; 1
    785c:	80 93 15 0b 	sts	0x0B15, r24
    7860:	3c c0       	rjmp	.+120    	; 0x78da <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    7862:	14 30       	cpi	r17, 0x04	; 4
    7864:	09 f0       	breq	.+2      	; 0x7868 <TriggerCommon+0x6e>
    7866:	2f c0       	rjmp	.+94     	; 0x78c6 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    7868:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    786c:	80 91 b3 0b 	lds	r24, 0x0BB3
    7870:	90 91 b4 0b 	lds	r25, 0x0BB4
    7874:	e9 e0       	ldi	r30, 0x09	; 9
    7876:	6e 9f       	mul	r22, r30
    7878:	80 0d       	add	r24, r0
    787a:	91 1d       	adc	r25, r1
    787c:	11 24       	eor	r1, r1
    787e:	fc 01       	movw	r30, r24
    7880:	31 96       	adiw	r30, 0x01	; 1
    7882:	65 91       	lpm	r22, Z+
    7884:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    7886:	70 93 1f 0b 	sts	0x0B1F, r23
    788a:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    788e:	ac 01       	movw	r20, r24
    7890:	49 5f       	subi	r20, 0xF9	; 249
    7892:	5f 4f       	sbci	r21, 0xFF	; 255
    7894:	fa 01       	movw	r30, r20
    7896:	a5 91       	lpm	r26, Z+
    7898:	b4 91       	lpm	r27, Z
    789a:	05 96       	adiw	r24, 0x05	; 5
    789c:	fc 01       	movw	r30, r24
    789e:	85 91       	lpm	r24, Z+
    78a0:	94 91       	lpm	r25, Z
    78a2:	a8 1b       	sub	r26, r24
    78a4:	b9 0b       	sbc	r27, r25
    78a6:	b0 93 21 0b 	sts	0x0B21, r27
    78aa:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    78ae:	fa 01       	movw	r30, r20
    78b0:	85 91       	lpm	r24, Z+
    78b2:	94 91       	lpm	r25, Z
    78b4:	68 0f       	add	r22, r24
    78b6:	79 1f       	adc	r23, r25
    78b8:	70 93 23 0b 	sts	0x0B23, r23
    78bc:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    78c0:	62 2f       	mov	r22, r18
    78c2:	84 e0       	ldi	r24, 0x04	; 4
    78c4:	08 c0       	rjmp	.+16     	; 0x78d6 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    78c6:	60 e0       	ldi	r22, 0x00	; 0
    78c8:	81 2f       	mov	r24, r17
    78ca:	29 83       	std	Y+1, r18	; 0x01
    78cc:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <SetMixerWave>
			SetMixerNote(channel,note);
    78d0:	29 81       	ldd	r18, Y+1	; 0x01
    78d2:	62 2f       	mov	r22, r18
    78d4:	81 2f       	mov	r24, r17
    78d6:	0e 94 0b 3f 	call	0x7e16	; 0x7e16 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    78da:	86 e1       	ldi	r24, 0x16	; 22
    78dc:	8c 9d       	mul	r24, r12
    78de:	f0 01       	movw	r30, r0
    78e0:	8d 9d       	mul	r24, r13
    78e2:	f0 0d       	add	r31, r0
    78e4:	11 24       	eor	r1, r1
    78e6:	ed 5b       	subi	r30, 0xBD	; 189
    78e8:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    78ea:	ff 20       	and	r15, r15
    78ec:	11 f0       	breq	.+4      	; 0x78f2 <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    78ee:	07 87       	std	Z+15, r16	; 0x0f
    78f0:	01 c0       	rjmp	.+2      	; 0x78f4 <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    78f2:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    78f4:	e0 91 b3 0b 	lds	r30, 0x0BB3
    78f8:	f0 91 b4 0b 	lds	r31, 0x0BB4
    78fc:	39 e0       	ldi	r19, 0x09	; 9
    78fe:	03 9f       	mul	r16, r19
    7900:	e0 0d       	add	r30, r0
    7902:	f1 1d       	adc	r31, r1
    7904:	11 24       	eor	r1, r1
    7906:	33 96       	adiw	r30, 0x03	; 3
    7908:	85 91       	lpm	r24, Z+
    790a:	94 91       	lpm	r25, Z
	if(pos==NULL){
    790c:	00 97       	sbiw	r24, 0x00	; 0
    790e:	59 f4       	brne	.+22     	; 0x7926 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    7910:	86 e1       	ldi	r24, 0x16	; 22
    7912:	8c 9d       	mul	r24, r12
    7914:	f0 01       	movw	r30, r0
    7916:	8d 9d       	mul	r24, r13
    7918:	f0 0d       	add	r31, r0
    791a:	11 24       	eor	r1, r1
    791c:	ed 5b       	subi	r30, 0xBD	; 189
    791e:	f4 4f       	sbci	r31, 0xF4	; 244
    7920:	15 8a       	std	Z+21, r1	; 0x15
    7922:	14 8a       	std	Z+20, r1	; 0x14
    7924:	0e c0       	rjmp	.+28     	; 0x7942 <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7926:	fc 01       	movw	r30, r24
    7928:	24 91       	lpm	r18, Z
    792a:	36 e1       	ldi	r19, 0x16	; 22
    792c:	3c 9d       	mul	r19, r12
    792e:	f0 01       	movw	r30, r0
    7930:	3d 9d       	mul	r19, r13
    7932:	f0 0d       	add	r31, r0
    7934:	11 24       	eor	r1, r1
    7936:	ed 5b       	subi	r30, 0xBD	; 189
    7938:	f4 4f       	sbci	r31, 0xF4	; 244
    793a:	21 8b       	std	Z+17, r18	; 0x11
    793c:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    793e:	95 8b       	std	Z+21, r25	; 0x15
    7940:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    7942:	0f 90       	pop	r0
    7944:	df 91       	pop	r29
    7946:	cf 91       	pop	r28
    7948:	1f 91       	pop	r17
    794a:	0f 91       	pop	r16
    794c:	ff 90       	pop	r15
    794e:	df 90       	pop	r13
    7950:	cf 90       	pop	r12
    7952:	08 95       	ret

00007954 <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7954:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    7956:	a8 2f       	mov	r26, r24
    7958:	b0 e0       	ldi	r27, 0x00	; 0
    795a:	96 e1       	ldi	r25, 0x16	; 22
    795c:	89 9f       	mul	r24, r25
    795e:	f0 01       	movw	r30, r0
    7960:	11 24       	eor	r1, r1
    7962:	ed 5b       	subi	r30, 0xBD	; 189
    7964:	f4 4f       	sbci	r31, 0xF4	; 244
    7966:	90 81       	ld	r25, Z
    7968:	95 ff       	sbrs	r25, 5
    796a:	02 c0       	rjmp	.+4      	; 0x7970 <TriggerNote+0x1c>
    796c:	97 fd       	sbrc	r25, 7
    796e:	28 c0       	rjmp	.+80     	; 0x79c0 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    7970:	31 11       	cpse	r19, r1
    7972:	18 c0       	rjmp	.+48     	; 0x79a4 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    7974:	86 e1       	ldi	r24, 0x16	; 22
    7976:	8a 9f       	mul	r24, r26
    7978:	f0 01       	movw	r30, r0
    797a:	8b 9f       	mul	r24, r27
    797c:	f0 0d       	add	r31, r0
    797e:	11 24       	eor	r1, r1
    7980:	ed 5b       	subi	r30, 0xBD	; 189
    7982:	f4 4f       	sbci	r31, 0xF4	; 244
    7984:	85 85       	ldd	r24, Z+13	; 0x0d
    7986:	81 11       	cpse	r24, r1
    7988:	02 c0       	rjmp	.+4      	; 0x798e <TriggerNote+0x3a>
    798a:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    798c:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    798e:	86 e1       	ldi	r24, 0x16	; 22
    7990:	8a 9f       	mul	r24, r26
    7992:	f0 01       	movw	r30, r0
    7994:	8b 9f       	mul	r24, r27
    7996:	f0 0d       	add	r31, r0
    7998:	11 24       	eor	r1, r1
    799a:	ed 5b       	subi	r30, 0xBD	; 189
    799c:	f4 4f       	sbci	r31, 0xF4	; 244
    799e:	9f 7b       	andi	r25, 0xBF	; 191
    79a0:	90 83       	st	Z, r25
    79a2:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    79a4:	26 e1       	ldi	r18, 0x16	; 22
    79a6:	2a 9f       	mul	r18, r26
    79a8:	f0 01       	movw	r30, r0
    79aa:	2b 9f       	mul	r18, r27
    79ac:	f0 0d       	add	r31, r0
    79ae:	11 24       	eor	r1, r1
    79b0:	ed 5b       	subi	r30, 0xBD	; 189
    79b2:	f4 4f       	sbci	r31, 0xF4	; 244
    79b4:	9f 77       	andi	r25, 0x7F	; 127
    79b6:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    79b8:	24 2f       	mov	r18, r20
    79ba:	43 2f       	mov	r20, r19
    79bc:	0c 94 fd 3b 	jmp	0x77fa	; 0x77fa <TriggerCommon>
    79c0:	08 95       	ret

000079c2 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    79c2:	5f 92       	push	r5
    79c4:	6f 92       	push	r6
    79c6:	7f 92       	push	r7
    79c8:	8f 92       	push	r8
    79ca:	9f 92       	push	r9
    79cc:	af 92       	push	r10
    79ce:	bf 92       	push	r11
    79d0:	cf 92       	push	r12
    79d2:	df 92       	push	r13
    79d4:	ef 92       	push	r14
    79d6:	ff 92       	push	r15
    79d8:	0f 93       	push	r16
    79da:	1f 93       	push	r17
    79dc:	cf 93       	push	r28
    79de:	df 93       	push	r29
    79e0:	c3 e4       	ldi	r28, 0x43	; 67
    79e2:	db e0       	ldi	r29, 0x0B	; 11
    79e4:	82 e0       	ldi	r24, 0x02	; 2
    79e6:	e8 2e       	mov	r14, r24
    79e8:	8b e0       	ldi	r24, 0x0B	; 11
    79ea:	f8 2e       	mov	r15, r24
    79ec:	d7 01       	movw	r26, r14
    79ee:	9e 01       	movw	r18, r28
    79f0:	40 e0       	ldi	r20, 0x00	; 0
    79f2:	50 e0       	ldi	r21, 0x00	; 0
    79f4:	ca 01       	movw	r24, r20
    79f6:	8d 5b       	subi	r24, 0xBD	; 189
    79f8:	94 4f       	sbci	r25, 0xF4	; 244
    79fa:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    79fc:	fc 01       	movw	r30, r24
    79fe:	85 85       	ldd	r24, Z+13	; 0x0d
    7a00:	88 23       	and	r24, r24
    7a02:	91 f0       	breq	.+36     	; 0x7a28 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    7a04:	64 85       	ldd	r22, Z+12	; 0x0c
    7a06:	99 27       	eor	r25, r25
    7a08:	87 fd       	sbrc	r24, 7
    7a0a:	90 95       	com	r25
    7a0c:	86 0f       	add	r24, r22
    7a0e:	91 1d       	adc	r25, r1
    7a10:	8f 3f       	cpi	r24, 0xFF	; 255
    7a12:	91 05       	cpc	r25, r1
    7a14:	19 f0       	breq	.+6      	; 0x7a1c <ProcessMusic+0x5a>
    7a16:	14 f0       	brlt	.+4      	; 0x7a1c <ProcessMusic+0x5a>
    7a18:	8f ef       	ldi	r24, 0xFF	; 255
    7a1a:	90 e0       	ldi	r25, 0x00	; 0
    7a1c:	97 ff       	sbrs	r25, 7
    7a1e:	02 c0       	rjmp	.+4      	; 0x7a24 <ProcessMusic+0x62>
    7a20:	80 e0       	ldi	r24, 0x00	; 0
    7a22:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7a24:	f6 01       	movw	r30, r12
    7a26:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    7a28:	f9 01       	movw	r30, r18
    7a2a:	10 81       	ld	r17, Z
    7a2c:	13 ff       	sbrs	r17, 3
    7a2e:	29 c0       	rjmp	.+82     	; 0x7a82 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7a30:	62 81       	ldd	r22, Z+2	; 0x02
    7a32:	73 81       	ldd	r23, Z+3	; 0x03
    7a34:	11 96       	adiw	r26, 0x01	; 1
    7a36:	8d 91       	ld	r24, X+
    7a38:	9c 91       	ld	r25, X
    7a3a:	12 97       	sbiw	r26, 0x02	; 2
    7a3c:	86 0f       	add	r24, r22
    7a3e:	97 1f       	adc	r25, r23
    7a40:	12 96       	adiw	r26, 0x02	; 2
    7a42:	9c 93       	st	X, r25
    7a44:	8e 93       	st	-X, r24
    7a46:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7a48:	f6 01       	movw	r30, r12
    7a4a:	04 81       	ldd	r16, Z+4	; 0x04
    7a4c:	e0 2f       	mov	r30, r16
    7a4e:	f0 e0       	ldi	r31, 0x00	; 0
    7a50:	ee 0f       	add	r30, r30
    7a52:	ff 1f       	adc	r31, r31
    7a54:	e8 5f       	subi	r30, 0xF8	; 248
    7a56:	f0 48       	sbci	r31, 0x80	; 128
    7a58:	c5 90       	lpm	r12, Z+
    7a5a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7a5c:	16 16       	cp	r1, r22
    7a5e:	17 06       	cpc	r1, r23
    7a60:	24 f4       	brge	.+8      	; 0x7a6a <ProcessMusic+0xa8>
    7a62:	8c 15       	cp	r24, r12
    7a64:	9d 05       	cpc	r25, r13
    7a66:	30 f4       	brcc	.+12     	; 0x7a74 <ProcessMusic+0xb2>
    7a68:	0c c0       	rjmp	.+24     	; 0x7a82 <ProcessMusic+0xc0>
    7a6a:	67 2b       	or	r22, r23
    7a6c:	51 f0       	breq	.+20     	; 0x7a82 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7a6e:	c8 16       	cp	r12, r24
    7a70:	d9 06       	cpc	r13, r25
    7a72:	38 f0       	brcs	.+14     	; 0x7a82 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7a74:	12 96       	adiw	r26, 0x02	; 2
    7a76:	dc 92       	st	X, r13
    7a78:	ce 92       	st	-X, r12
    7a7a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7a7c:	17 7f       	andi	r17, 0xF7	; 247
    7a7e:	f9 01       	movw	r30, r18
    7a80:	10 83       	st	Z, r17
    7a82:	4a 5e       	subi	r20, 0xEA	; 234
    7a84:	5f 4f       	sbci	r21, 0xFF	; 255
    7a86:	2a 5e       	subi	r18, 0xEA	; 234
    7a88:	3f 4f       	sbci	r19, 0xFF	; 255
    7a8a:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7a8c:	4e 36       	cpi	r20, 0x6E	; 110
    7a8e:	51 05       	cpc	r21, r1
    7a90:	09 f0       	breq	.+2      	; 0x7a94 <ProcessMusic+0xd2>
    7a92:	b0 cf       	rjmp	.-160    	; 0x79f4 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    7a94:	80 91 00 0b 	lds	r24, 0x0B00
    7a98:	88 23       	and	r24, r24
    7a9a:	09 f4       	brne	.+2      	; 0x7a9e <ProcessMusic+0xdc>
    7a9c:	cb c0       	rjmp	.+406    	; 0x7c34 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7a9e:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7aa0:	80 91 b1 0b 	lds	r24, 0x0BB1
    7aa4:	90 91 b2 0b 	lds	r25, 0x0BB2
    7aa8:	20 91 b7 0b 	lds	r18, 0x0BB7
    7aac:	30 91 b8 0b 	lds	r19, 0x0BB8
    7ab0:	82 17       	cp	r24, r18
    7ab2:	93 07       	cpc	r25, r19
    7ab4:	09 f0       	breq	.+2      	; 0x7ab8 <ProcessMusic+0xf6>
    7ab6:	b9 c0       	rjmp	.+370    	; 0x7c2a <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    7ab8:	20 91 ba 0b 	lds	r18, 0x0BBA
    7abc:	30 91 bb 0b 	lds	r19, 0x0BBB
    7ac0:	b9 01       	movw	r22, r18
    7ac2:	6f 5f       	subi	r22, 0xFF	; 255
    7ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac6:	70 93 bb 0b 	sts	0x0BBB, r23
    7aca:	60 93 ba 0b 	sts	0x0BBA, r22
    7ace:	f9 01       	movw	r30, r18
    7ad0:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7ad2:	4f 3f       	cpi	r20, 0xFF	; 255
    7ad4:	79 f5       	brne	.+94     	; 0x7b34 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7ad6:	a9 01       	movw	r20, r18
    7ad8:	4e 5f       	subi	r20, 0xFE	; 254
    7ada:	5f 4f       	sbci	r21, 0xFF	; 255
    7adc:	50 93 bb 0b 	sts	0x0BBB, r21
    7ae0:	40 93 ba 0b 	sts	0x0BBA, r20
    7ae4:	fb 01       	movw	r30, r22
    7ae6:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7ae8:	6f 32       	cpi	r22, 0x2F	; 47
    7aea:	19 f4       	brne	.+6      	; 0x7af2 <ProcessMusic+0x130>
						playSong=false;
    7aec:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    7af0:	9c c0       	rjmp	.+312    	; 0x7c2a <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    7af2:	66 30       	cpi	r22, 0x06	; 6
    7af4:	09 f0       	breq	.+2      	; 0x7af8 <ProcessMusic+0x136>
    7af6:	8c c0       	rjmp	.+280    	; 0x7c10 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    7af8:	fa 01       	movw	r30, r20
    7afa:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7afc:	c9 01       	movw	r24, r18
    7afe:	04 96       	adiw	r24, 0x04	; 4
    7b00:	90 93 bb 0b 	sts	0x0BBB, r25
    7b04:	80 93 ba 0b 	sts	0x0BBA, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7b08:	f9 01       	movw	r30, r18
    7b0a:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7b0c:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7b0e:	e3 35       	cpi	r30, 0x53	; 83
    7b10:	29 f4       	brne	.+10     	; 0x7b1c <ProcessMusic+0x15a>
							loopStart=songPos;
    7b12:	90 93 bd 0b 	sts	0x0BBD, r25
    7b16:	80 93 bc 0b 	sts	0x0BBC, r24
    7b1a:	7a c0       	rjmp	.+244    	; 0x7c10 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    7b1c:	e5 34       	cpi	r30, 0x45	; 69
    7b1e:	09 f0       	breq	.+2      	; 0x7b22 <ProcessMusic+0x160>
    7b20:	77 c0       	rjmp	.+238    	; 0x7c10 <ProcessMusic+0x24e>
							songPos=loopStart;
    7b22:	80 91 bc 0b 	lds	r24, 0x0BBC
    7b26:	90 91 bd 0b 	lds	r25, 0x0BBD
    7b2a:	90 93 bb 0b 	sts	0x0BBB, r25
    7b2e:	80 93 ba 0b 	sts	0x0BBA, r24
    7b32:	6e c0       	rjmp	.+220    	; 0x7c10 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7b34:	47 fd       	sbrc	r20, 7
    7b36:	40 93 b5 0b 	sts	0x0BB5, r20
					channel=lastStatus&0x0f;
    7b3a:	90 91 b5 0b 	lds	r25, 0x0BB5
    7b3e:	89 2f       	mov	r24, r25
    7b40:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7b42:	47 ff       	sbrs	r20, 7
    7b44:	08 c0       	rjmp	.+16     	; 0x7b56 <ProcessMusic+0x194>
    7b46:	2e 5f       	subi	r18, 0xFE	; 254
    7b48:	3f 4f       	sbci	r19, 0xFF	; 255
    7b4a:	30 93 bb 0b 	sts	0x0BBB, r19
    7b4e:	20 93 ba 0b 	sts	0x0BBA, r18
    7b52:	fb 01       	movw	r30, r22
    7b54:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7b56:	90 7f       	andi	r25, 0xF0	; 240
    7b58:	90 3b       	cpi	r25, 0xB0	; 176
    7b5a:	e1 f0       	breq	.+56     	; 0x7b94 <ProcessMusic+0x1d2>
    7b5c:	90 3c       	cpi	r25, 0xC0	; 192
    7b5e:	09 f4       	brne	.+2      	; 0x7b62 <ProcessMusic+0x1a0>
    7b60:	51 c0       	rjmp	.+162    	; 0x7c04 <ProcessMusic+0x242>
    7b62:	90 39       	cpi	r25, 0x90	; 144
    7b64:	09 f0       	breq	.+2      	; 0x7b68 <ProcessMusic+0x1a6>
    7b66:	54 c0       	rjmp	.+168    	; 0x7c10 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7b68:	e0 91 ba 0b 	lds	r30, 0x0BBA
    7b6c:	f0 91 bb 0b 	lds	r31, 0x0BBB
    7b70:	9f 01       	movw	r18, r30
    7b72:	2f 5f       	subi	r18, 0xFF	; 255
    7b74:	3f 4f       	sbci	r19, 0xFF	; 255
    7b76:	30 93 bb 0b 	sts	0x0BBB, r19
    7b7a:	20 93 ba 0b 	sts	0x0BBA, r18
    7b7e:	24 91       	lpm	r18, Z
    7b80:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7b82:	18 9f       	mul	r17, r24
    7b84:	f0 01       	movw	r30, r0
    7b86:	11 24       	eor	r1, r1
    7b88:	ed 5b       	subi	r30, 0xBD	; 189
    7b8a:	f4 4f       	sbci	r31, 0xF4	; 244
    7b8c:	66 85       	ldd	r22, Z+14	; 0x0e
    7b8e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
    7b92:	3e c0       	rjmp	.+124    	; 0x7c10 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7b94:	e0 91 ba 0b 	lds	r30, 0x0BBA
    7b98:	f0 91 bb 0b 	lds	r31, 0x0BBB
    7b9c:	9f 01       	movw	r18, r30
    7b9e:	2f 5f       	subi	r18, 0xFF	; 255
    7ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba2:	30 93 bb 0b 	sts	0x0BBB, r19
    7ba6:	20 93 ba 0b 	sts	0x0BBA, r18
    7baa:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7bac:	47 30       	cpi	r20, 0x07	; 7
    7bae:	49 f4       	brne	.+18     	; 0x7bc2 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    7bb0:	18 9f       	mul	r17, r24
    7bb2:	d0 01       	movw	r26, r0
    7bb4:	11 24       	eor	r1, r1
    7bb6:	ad 5b       	subi	r26, 0xBD	; 189
    7bb8:	b4 4f       	sbci	r27, 0xF4	; 244
    7bba:	ee 0f       	add	r30, r30
    7bbc:	1a 96       	adiw	r26, 0x0a	; 10
    7bbe:	ec 93       	st	X, r30
    7bc0:	27 c0       	rjmp	.+78     	; 0x7c10 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    7bc2:	4b 30       	cpi	r20, 0x0B	; 11
    7bc4:	49 f4       	brne	.+18     	; 0x7bd8 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    7bc6:	18 9f       	mul	r17, r24
    7bc8:	d0 01       	movw	r26, r0
    7bca:	11 24       	eor	r1, r1
    7bcc:	ad 5b       	subi	r26, 0xBD	; 189
    7bce:	b4 4f       	sbci	r27, 0xF4	; 244
    7bd0:	ee 0f       	add	r30, r30
    7bd2:	19 96       	adiw	r26, 0x09	; 9
    7bd4:	ec 93       	st	X, r30
    7bd6:	1c c0       	rjmp	.+56     	; 0x7c10 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    7bd8:	4c 35       	cpi	r20, 0x5C	; 92
    7bda:	49 f4       	brne	.+18     	; 0x7bee <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    7bdc:	18 9f       	mul	r17, r24
    7bde:	d0 01       	movw	r26, r0
    7be0:	11 24       	eor	r1, r1
    7be2:	ad 5b       	subi	r26, 0xBD	; 189
    7be4:	b4 4f       	sbci	r27, 0xF4	; 244
    7be6:	ee 0f       	add	r30, r30
    7be8:	17 96       	adiw	r26, 0x07	; 7
    7bea:	ec 93       	st	X, r30
    7bec:	11 c0       	rjmp	.+34     	; 0x7c10 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7bee:	44 36       	cpi	r20, 0x64	; 100
    7bf0:	79 f4       	brne	.+30     	; 0x7c10 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    7bf2:	18 9f       	mul	r17, r24
    7bf4:	d0 01       	movw	r26, r0
    7bf6:	11 24       	eor	r1, r1
    7bf8:	ad 5b       	subi	r26, 0xBD	; 189
    7bfa:	b4 4f       	sbci	r27, 0xF4	; 244
    7bfc:	ee 0f       	add	r30, r30
    7bfe:	18 96       	adiw	r26, 0x08	; 8
    7c00:	ec 93       	st	X, r30
    7c02:	06 c0       	rjmp	.+12     	; 0x7c10 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7c04:	18 9f       	mul	r17, r24
    7c06:	f0 01       	movw	r30, r0
    7c08:	11 24       	eor	r1, r1
    7c0a:	ed 5b       	subi	r30, 0xBD	; 189
    7c0c:	f4 4f       	sbci	r31, 0xF4	; 244
    7c0e:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7c10:	8a eb       	ldi	r24, 0xBA	; 186
    7c12:	9b e0       	ldi	r25, 0x0B	; 11
    7c14:	0e 94 d7 3b 	call	0x77ae	; 0x77ae <ReadVarLen>
    7c18:	90 93 b8 0b 	sts	0x0BB8, r25
    7c1c:	80 93 b7 0b 	sts	0x0BB7, r24
				currDeltaTime=0;
    7c20:	10 92 b2 0b 	sts	0x0BB2, r1
    7c24:	10 92 b1 0b 	sts	0x0BB1, r1
    7c28:	3b cf       	rjmp	.-394    	; 0x7aa0 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7c2a:	01 96       	adiw	r24, 0x01	; 1
    7c2c:	90 93 b2 0b 	sts	0x0BB2, r25
    7c30:	80 93 b1 0b 	sts	0x0BB1, r24
    7c34:	99 e4       	ldi	r25, 0x49	; 73
    7c36:	a9 2e       	mov	r10, r25
    7c38:	9b e0       	ldi	r25, 0x0B	; 11
    7c3a:	b9 2e       	mov	r11, r25
    7c3c:	05 e5       	ldi	r16, 0x55	; 85
    7c3e:	1b e0       	ldi	r17, 0x0B	; 11
    7c40:	24 e5       	ldi	r18, 0x54	; 84
    7c42:	c2 2e       	mov	r12, r18
    7c44:	2b e0       	ldi	r18, 0x0B	; 11
    7c46:	d2 2e       	mov	r13, r18
    7c48:	36 e5       	ldi	r19, 0x56	; 86
    7c4a:	83 2e       	mov	r8, r19
    7c4c:	3b e0       	ldi	r19, 0x0B	; 11
    7c4e:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    7c50:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7c52:	66 24       	eor	r6, r6
    7c54:	6a 94       	dec	r6
    7c56:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    7c58:	88 81       	ld	r24, Y
    7c5a:	86 fd       	sbrc	r24, 6
    7c5c:	43 c0       	rjmp	.+134    	; 0x7ce4 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    7c5e:	8c 89       	ldd	r24, Y+20	; 0x14
    7c60:	9d 89       	ldd	r25, Y+21	; 0x15
    7c62:	89 2b       	or	r24, r25
    7c64:	09 f4       	brne	.+2      	; 0x7c68 <ProcessMusic+0x2a6>
    7c66:	3a c0       	rjmp	.+116    	; 0x7cdc <ProcessMusic+0x31a>
    7c68:	d8 01       	movw	r26, r16
    7c6a:	9c 91       	ld	r25, X
    7c6c:	f6 01       	movw	r30, r12
    7c6e:	80 81       	ld	r24, Z
    7c70:	98 17       	cp	r25, r24
    7c72:	08 f4       	brcc	.+2      	; 0x7c76 <ProcessMusic+0x2b4>
    7c74:	33 c0       	rjmp	.+102    	; 0x7cdc <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    7c76:	d8 01       	movw	r26, r16
    7c78:	9c 91       	ld	r25, X
    7c7a:	f6 01       	movw	r30, r12
    7c7c:	80 81       	ld	r24, Z
    7c7e:	98 13       	cpse	r25, r24
    7c80:	2d c0       	rjmp	.+90     	; 0x7cdc <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    7c82:	ec 89       	ldd	r30, Y+20	; 0x14
    7c84:	fd 89       	ldd	r31, Y+21	; 0x15
    7c86:	af 01       	movw	r20, r30
    7c88:	4f 5f       	subi	r20, 0xFF	; 255
    7c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    7c8c:	5d 8b       	std	Y+21, r21	; 0x15
    7c8e:	4c 8b       	std	Y+20, r20	; 0x14
    7c90:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    7c92:	8f 3f       	cpi	r24, 0xFF	; 255
    7c94:	31 f4       	brne	.+12     	; 0x7ca2 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7c96:	88 81       	ld	r24, Y
    7c98:	8f 77       	andi	r24, 0x7F	; 127
    7c9a:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    7c9c:	1d 8a       	std	Y+21, r1	; 0x15
    7c9e:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    7ca0:	1d c0       	rjmp	.+58     	; 0x7cdc <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    7ca2:	32 96       	adiw	r30, 0x02	; 2
    7ca4:	fd 8b       	std	Y+21, r31	; 0x15
    7ca6:	ec 8b       	std	Y+20, r30	; 0x14
    7ca8:	fa 01       	movw	r30, r20
    7caa:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    7cac:	e8 2f       	mov	r30, r24
    7cae:	f0 e0       	ldi	r31, 0x00	; 0
    7cb0:	ee 0f       	add	r30, r30
    7cb2:	ff 1f       	adc	r31, r31
    7cb4:	e0 53       	subi	r30, 0x30	; 48
    7cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    7cb8:	25 91       	lpm	r18, Z+
    7cba:	34 91       	lpm	r19, Z
    7cbc:	65 2d       	mov	r22, r5
    7cbe:	ce 01       	movw	r24, r28
    7cc0:	f9 01       	movw	r30, r18
    7cc2:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    7cc4:	ec 89       	ldd	r30, Y+20	; 0x14
    7cc6:	fd 89       	ldd	r31, Y+21	; 0x15
    7cc8:	cf 01       	movw	r24, r30
    7cca:	01 96       	adiw	r24, 0x01	; 1
    7ccc:	9d 8b       	std	Y+21, r25	; 0x15
    7cce:	8c 8b       	std	Y+20, r24	; 0x14
    7cd0:	e4 91       	lpm	r30, Z
    7cd2:	d6 01       	movw	r26, r12
    7cd4:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    7cd6:	f8 01       	movw	r30, r16
    7cd8:	10 82       	st	Z, r1
    7cda:	cd cf       	rjmp	.-102    	; 0x7c76 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    7cdc:	d8 01       	movw	r26, r16
    7cde:	8c 91       	ld	r24, X
    7ce0:	8f 5f       	subi	r24, 0xFF	; 255
    7ce2:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    7ce4:	98 81       	ld	r25, Y
    7ce6:	95 ff       	sbrs	r25, 5
    7ce8:	6c c0       	rjmp	.+216    	; 0x7dc2 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    7cea:	f4 01       	movw	r30, r8
    7cec:	80 81       	ld	r24, Z
    7cee:	8f 3f       	cpi	r24, 0xFF	; 255
    7cf0:	11 f0       	breq	.+4      	; 0x7cf6 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    7cf2:	8f 5f       	subi	r24, 0xFF	; 255
    7cf4:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7cf6:	97 fd       	sbrc	r25, 7
    7cf8:	04 c0       	rjmp	.+8      	; 0x7d02 <ProcessMusic+0x340>
    7cfa:	f8 01       	movw	r30, r16
    7cfc:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7cfe:	90 81       	ld	r25, Z
    7d00:	01 c0       	rjmp	.+2      	; 0x7d04 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7d02:	9f ef       	ldi	r25, 0xFF	; 255
    7d04:	f8 01       	movw	r30, r16
    7d06:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7d08:	80 81       	ld	r24, Z
    7d0a:	88 23       	and	r24, r24
    7d0c:	09 f4       	brne	.+2      	; 0x7d10 <ProcessMusic+0x34e>
    7d0e:	4e c0       	rjmp	.+156    	; 0x7dac <ProcessMusic+0x3ea>
    7d10:	31 96       	adiw	r30, 0x01	; 1
    7d12:	50 81       	ld	r21, Z
    7d14:	55 23       	and	r21, r21
    7d16:	09 f4       	brne	.+2      	; 0x7d1a <ProcessMusic+0x358>
    7d18:	49 c0       	rjmp	.+146    	; 0x7dac <ProcessMusic+0x3ea>
    7d1a:	99 23       	and	r25, r25
    7d1c:	09 f4       	brne	.+2      	; 0x7d20 <ProcessMusic+0x35e>
    7d1e:	46 c0       	rjmp	.+140    	; 0x7dac <ProcessMusic+0x3ea>
    7d20:	40 91 b6 0b 	lds	r20, 0x0BB6
    7d24:	44 23       	and	r20, r20
    7d26:	09 f4       	brne	.+2      	; 0x7d2a <ProcessMusic+0x368>
    7d28:	41 c0       	rjmp	.+130    	; 0x7dac <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    7d2a:	89 9f       	mul	r24, r25
    7d2c:	c0 01       	movw	r24, r0
    7d2e:	11 24       	eor	r1, r1
    7d30:	93 95       	inc	r25
				uVol>>=8;
    7d32:	89 2f       	mov	r24, r25
    7d34:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    7d36:	58 9f       	mul	r21, r24
    7d38:	90 01       	movw	r18, r0
    7d3a:	59 9f       	mul	r21, r25
    7d3c:	30 0d       	add	r19, r0
    7d3e:	11 24       	eor	r1, r1
    7d40:	c9 01       	movw	r24, r18
    7d42:	93 95       	inc	r25
				uVol>>=8;
    7d44:	89 2f       	mov	r24, r25
    7d46:	99 27       	eor	r25, r25
    7d48:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    7d4a:	50 81       	ld	r21, Z
    7d4c:	58 9f       	mul	r21, r24
    7d4e:	90 01       	movw	r18, r0
    7d50:	59 9f       	mul	r21, r25
    7d52:	30 0d       	add	r19, r0
    7d54:	11 24       	eor	r1, r1
    7d56:	33 95       	inc	r19
				uVol>>=8;
    7d58:	23 2f       	mov	r18, r19
    7d5a:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    7d5c:	42 9f       	mul	r20, r18
    7d5e:	c0 01       	movw	r24, r0
    7d60:	43 9f       	mul	r20, r19
    7d62:	90 0d       	add	r25, r0
    7d64:	11 24       	eor	r1, r1
    7d66:	93 95       	inc	r25
				uVol>>=8;
    7d68:	89 2f       	mov	r24, r25
    7d6a:	99 27       	eor	r25, r25
    7d6c:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    7d6e:	20 81       	ld	r18, Z
    7d70:	22 23       	and	r18, r18
    7d72:	f1 f0       	breq	.+60     	; 0x7db0 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7d74:	d5 01       	movw	r26, r10
    7d76:	ec 91       	ld	r30, X
    7d78:	f0 e0       	ldi	r31, 0x00	; 0
    7d7a:	e0 50       	subi	r30, 0x00	; 0
    7d7c:	ff 47       	sbci	r31, 0x7F	; 127
    7d7e:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7d80:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7d82:	2e 9f       	mul	r18, r30
    7d84:	f0 01       	movw	r30, r0
    7d86:	11 24       	eor	r1, r1
    7d88:	f3 95       	inc	r31
					tVol>>=8;
    7d8a:	ef 2f       	mov	r30, r31
    7d8c:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7d8e:	a3 01       	movw	r20, r6
    7d90:	4e 1b       	sub	r20, r30
    7d92:	5f 0b       	sbc	r21, r31
    7d94:	48 9f       	mul	r20, r24
    7d96:	90 01       	movw	r18, r0
    7d98:	49 9f       	mul	r20, r25
    7d9a:	30 0d       	add	r19, r0
    7d9c:	58 9f       	mul	r21, r24
    7d9e:	30 0d       	add	r19, r0
    7da0:	11 24       	eor	r1, r1
    7da2:	c9 01       	movw	r24, r18
    7da4:	93 95       	inc	r25
					uVol>>=8;
    7da6:	89 2f       	mov	r24, r25
    7da8:	99 27       	eor	r25, r25
    7daa:	02 c0       	rjmp	.+4      	; 0x7db0 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    7dac:	80 e0       	ldi	r24, 0x00	; 0
    7dae:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7db0:	f5 01       	movw	r30, r10
    7db2:	30 81       	ld	r19, Z
    7db4:	f8 01       	movw	r30, r16
    7db6:	3a 97       	sbiw	r30, 0x0a	; 10
    7db8:	20 81       	ld	r18, Z
    7dba:	23 0f       	add	r18, r19
    7dbc:	d5 01       	movw	r26, r10
    7dbe:	2c 93       	st	X, r18
    7dc0:	02 c0       	rjmp	.+4      	; 0x7dc6 <ProcessMusic+0x404>

		}else{
			uVol=0;
    7dc2:	80 e0       	ldi	r24, 0x00	; 0
    7dc4:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7dc6:	f7 01       	movw	r30, r14
    7dc8:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7dca:	53 94       	inc	r5
    7dcc:	66 96       	adiw	r28, 0x16	; 22
    7dce:	f6 e0       	ldi	r31, 0x06	; 6
    7dd0:	ef 0e       	add	r14, r31
    7dd2:	f1 1c       	adc	r15, r1
    7dd4:	86 e1       	ldi	r24, 0x16	; 22
    7dd6:	a8 0e       	add	r10, r24
    7dd8:	b1 1c       	adc	r11, r1
    7dda:	0a 5e       	subi	r16, 0xEA	; 234
    7ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    7dde:	96 e1       	ldi	r25, 0x16	; 22
    7de0:	c9 0e       	add	r12, r25
    7de2:	d1 1c       	adc	r13, r1
    7de4:	a6 e1       	ldi	r26, 0x16	; 22
    7de6:	8a 0e       	add	r8, r26
    7de8:	91 1c       	adc	r9, r1
    7dea:	b5 e0       	ldi	r27, 0x05	; 5
    7dec:	5b 12       	cpse	r5, r27
    7dee:	34 cf       	rjmp	.-408    	; 0x7c58 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7df0:	df 91       	pop	r29
    7df2:	cf 91       	pop	r28
    7df4:	1f 91       	pop	r17
    7df6:	0f 91       	pop	r16
    7df8:	ff 90       	pop	r15
    7dfa:	ef 90       	pop	r14
    7dfc:	df 90       	pop	r13
    7dfe:	cf 90       	pop	r12
    7e00:	bf 90       	pop	r11
    7e02:	af 90       	pop	r10
    7e04:	9f 90       	pop	r9
    7e06:	8f 90       	pop	r8
    7e08:	7f 90       	pop	r7
    7e0a:	6f 90       	pop	r6
    7e0c:	5f 90       	pop	r5
    7e0e:	08 95       	ret

00007e10 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7e10:	80 93 b6 0b 	sts	0x0BB6, r24
    7e14:	08 95       	ret

00007e16 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7e16:	99 27       	eor	r25, r25
	clr r23
    7e18:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7e1a:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7e1c:	09 f4       	brne	.+2      	; 0x7e20 <set_note_waves>
		ret
    7e1e:	08 95       	ret

00007e20 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7e20:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7e22:	ff e7       	ldi	r31, 0x7F	; 127
	lsl r22
    7e24:	66 0f       	add	r22, r22
	rol r23
    7e26:	77 1f       	adc	r23, r23
	add ZL,r22
    7e28:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7e2a:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7e2c:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7e2e:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7e30:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7e32:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7e34:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7e36:	28 9f       	mul	r18, r24
	add ZL,r0
    7e38:	e0 0d       	add	r30, r0
	adc ZH,r1
    7e3a:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7e3c:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7e3e:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7e40:	11 24       	eor	r1, r1
	

	ret
    7e42:	08 95       	ret

00007e44 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7e44:	99 27       	eor	r25, r25
	clr r23
    7e46:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7e48:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7e4a:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7e4c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7e4e:	28 9f       	mul	r18, r24
	add ZL,r0
    7e50:	e0 0d       	add	r30, r0
	adc ZH,r1
    7e52:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7e54:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7e56:	31 f4       	brne	.+12     	; 0x7e64 <smw1>
	lds r22,tr4_params
    7e58:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    7e5c:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7e5e:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    7e62:	0b c0       	rjmp	.+22     	; 0x7e7a <esmw>

00007e64 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7e64:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7e66:	31 f4       	brne	.+12     	; 0x7e74 <smw2>
	lds r22,tr4_params
    7e68:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    7e6c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7e6e:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    7e72:	03 c0       	rjmp	.+6      	; 0x7e7a <esmw>

00007e74 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7e74:	71 e8       	ldi	r23, 0x81	; 129
	add r23,r22
    7e76:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7e78:	75 83       	std	Z+5, r23	; 0x05

00007e7a <esmw>:

esmw:
	clr r1	
    7e7a:	11 24       	eor	r1, r1
	ret
    7e7c:	08 95       	ret
	...

00007f00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7f00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7f02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    7f06:	08 95       	ret

00007f08 <steptable>:
    7f08:	22 00       	.word	0x0022	; ????
    7f0a:	24 00       	.word	0x0024	; ????
    7f0c:	26 00       	.word	0x0026	; ????
    7f0e:	28 00       	.word	0x0028	; ????
    7f10:	2b 00       	.word	0x002b	; ????
    7f12:	2d 00       	.word	0x002d	; ????
    7f14:	30 00       	.word	0x0030	; ????
    7f16:	33 00       	.word	0x0033	; ????
    7f18:	36 00       	.word	0x0036	; ????
    7f1a:	39 00       	.word	0x0039	; ????
    7f1c:	3d 00       	.word	0x003d	; ????
    7f1e:	40 00       	.word	0x0040	; ????
    7f20:	44 00       	.word	0x0044	; ????
    7f22:	48 00       	.word	0x0048	; ????
    7f24:	4c 00       	.word	0x004c	; ????
    7f26:	51 00       	.word	0x0051	; ????
    7f28:	56 00       	.word	0x0056	; ????
    7f2a:	5b 00       	.word	0x005b	; ????
    7f2c:	60 00       	.word	0x0060	; ????
    7f2e:	66 00       	.word	0x0066	; ????
    7f30:	6c 00       	.word	0x006c	; ????
    7f32:	73 00       	.word	0x0073	; ????
    7f34:	79 00       	.word	0x0079	; ????
    7f36:	81 00       	.word	0x0081	; ????
    7f38:	88 00       	.word	0x0088	; ????
    7f3a:	90 00       	.word	0x0090	; ????
    7f3c:	99 00       	.word	0x0099	; ????
    7f3e:	a2 00       	.word	0x00a2	; ????
    7f40:	ac 00       	.word	0x00ac	; ????
    7f42:	b6 00       	.word	0x00b6	; ????
    7f44:	c1 00       	.word	0x00c1	; ????
    7f46:	cc 00       	.word	0x00cc	; ????
    7f48:	d8 00       	.word	0x00d8	; ????
    7f4a:	e5 00       	.word	0x00e5	; ????
    7f4c:	f3 00       	.word	0x00f3	; ????
    7f4e:	01 01       	movw	r0, r2
    7f50:	10 01       	movw	r2, r0
    7f52:	21 01       	movw	r4, r2
    7f54:	32 01       	movw	r6, r4
    7f56:	44 01       	movw	r8, r8
    7f58:	57 01       	movw	r10, r14
    7f5a:	6c 01       	movw	r12, r24
    7f5c:	81 01       	movw	r16, r2
    7f5e:	98 01       	movw	r18, r16
    7f60:	b0 01       	movw	r22, r0
    7f62:	ca 01       	movw	r24, r20
    7f64:	e5 01       	movw	r28, r10
    7f66:	02 02       	muls	r16, r18
    7f68:	21 02       	muls	r18, r17
    7f6a:	41 02       	muls	r20, r17
    7f6c:	64 02       	muls	r22, r20
    7f6e:	88 02       	muls	r24, r24
    7f70:	ae 02       	muls	r26, r30
    7f72:	d7 02       	muls	r29, r23
    7f74:	03 03       	mulsu	r16, r19
    7f76:	30 03       	mulsu	r19, r16
    7f78:	61 03       	mulsu	r22, r17
    7f7a:	94 03       	fmuls	r17, r20
    7f7c:	cb 03       	fmulsu	r20, r19
    7f7e:	05 04       	cpc	r0, r5
    7f80:	42 04       	cpc	r4, r2
    7f82:	83 04       	cpc	r8, r3
    7f84:	c7 04       	cpc	r12, r7
    7f86:	10 05       	cpc	r17, r0
    7f88:	5d 05       	cpc	r21, r13
    7f8a:	af 05       	cpc	r26, r15
    7f8c:	05 06       	cpc	r0, r21
    7f8e:	61 06       	cpc	r6, r17
    7f90:	c2 06       	cpc	r12, r18
    7f92:	29 07       	cpc	r18, r25
    7f94:	96 07       	cpc	r25, r22
    7f96:	09 08       	sbc	r0, r9
    7f98:	83 08       	sbc	r8, r3
    7f9a:	05 09       	sbc	r16, r5
    7f9c:	8e 09       	sbc	r24, r14
    7f9e:	20 0a       	sbc	r2, r16
    7fa0:	ba 0a       	sbc	r11, r26
    7fa2:	5d 0b       	sbc	r21, r29
    7fa4:	0a 0c       	add	r0, r10
    7fa6:	c1 0c       	add	r12, r1
    7fa8:	84 0d       	add	r24, r4
    7faa:	51 0e       	add	r5, r17
    7fac:	2b 0f       	add	r18, r27
    7fae:	12 10       	cpse	r1, r2
    7fb0:	07 11       	cpse	r16, r7
    7fb2:	0a 12       	cpse	r0, r26
    7fb4:	1d 13       	cpse	r17, r29
    7fb6:	40 14       	cp	r4, r0
    7fb8:	74 15       	cp	r23, r4
    7fba:	ba 16       	cp	r11, r26
    7fbc:	14 18       	sub	r1, r4
    7fbe:	83 19       	sub	r24, r3
    7fc0:	07 1b       	sub	r16, r23
    7fc2:	a3 1c       	adc	r10, r3
    7fc4:	57 1e       	adc	r5, r23
    7fc6:	24 20       	and	r2, r4
    7fc8:	0e 22       	and	r0, r30
    7fca:	14 24       	eor	r1, r4
    7fcc:	39 26       	eor	r3, r25
    7fce:	7f 28       	or	r7, r15
    7fd0:	e8 2a       	or	r14, r24
    7fd2:	75 2d       	mov	r23, r5
    7fd4:	29 30       	cpi	r18, 0x09	; 9
    7fd6:	06 33       	cpi	r16, 0x36	; 54
    7fd8:	0f 36       	cpi	r16, 0x6F	; 111
    7fda:	45 39       	cpi	r20, 0x95	; 149
    7fdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7fde:	49 40       	sbci	r20, 0x09	; 9
    7fe0:	1b 44       	sbci	r17, 0x4B	; 75
    7fe2:	28 48       	sbci	r18, 0x88	; 136
    7fe4:	73 4c       	sbci	r23, 0xC3	; 195
    7fe6:	fe 50       	subi	r31, 0x0E	; 14
    7fe8:	cf 55       	subi	r28, 0x5F	; 95
    7fea:	ea 5a       	subi	r30, 0xAA	; 170
    7fec:	51 60       	ori	r21, 0x01	; 1
    7fee:	0c 66       	ori	r16, 0x6C	; 108
    7ff0:	1d 6c       	ori	r17, 0xCD	; 205
    7ff2:	8b 72       	andi	r24, 0x2B	; 43
    7ff4:	5a 79       	andi	r21, 0x9A	; 154
    7ff6:	92 80       	ldd	r9, Z+2	; 0x02
    7ff8:	37 88       	ldd	r3, Z+23	; 0x17
    7ffa:	50 90 e5 98 	lds	r5, 0x98E5
    7ffe:	fd a1       	ldd	r31, Y+37	; 0x25
    8000:	9f ab       	std	Y+55, r25	; 0x37
    8002:	d3 b5       	in	r29, 0x23	; 35
    8004:	a3 c0       	rjmp	.+326    	; 0x814c <waves+0x4c>
	...

00008100 <waves>:
    8100:	00 03       	mulsu	r16, r16
    8102:	06 09       	sbc	r16, r6
    8104:	0c 10       	cpse	r0, r12
    8106:	13 16       	cp	r1, r19
    8108:	19 1c       	adc	r1, r9
    810a:	1f 22       	and	r1, r31
    810c:	25 28       	or	r2, r5
    810e:	2b 2e       	mov	r2, r27
    8110:	31 33       	cpi	r19, 0x31	; 49
    8112:	36 39       	cpi	r19, 0x96	; 150
    8114:	3c 3f       	cpi	r19, 0xFC	; 252
    8116:	41 44       	sbci	r20, 0x41	; 65
    8118:	47 49       	sbci	r20, 0x97	; 151
    811a:	4c 4e       	sbci	r20, 0xEC	; 236
    811c:	51 53       	subi	r21, 0x31	; 49
    811e:	55 58       	subi	r21, 0x85	; 133
    8120:	5a 5c       	subi	r21, 0xCA	; 202
    8122:	5e 60       	ori	r21, 0x0E	; 14
    8124:	62 64       	ori	r22, 0x42	; 66
    8126:	66 68       	ori	r22, 0x86	; 134
    8128:	6a 6b       	ori	r22, 0xBA	; 186
    812a:	6d 6f       	ori	r22, 0xFD	; 253
    812c:	70 71       	andi	r23, 0x10	; 16
    812e:	73 74       	andi	r23, 0x43	; 67
    8130:	75 76       	andi	r23, 0x65	; 101
    8132:	78 79       	andi	r23, 0x98	; 152
    8134:	7a 7a       	andi	r23, 0xAA	; 170
    8136:	7b 7c       	andi	r23, 0xCB	; 203
    8138:	7d 7d       	andi	r23, 0xDD	; 221
    813a:	7e 7e       	andi	r23, 0xEE	; 238
    813c:	7e 7f       	andi	r23, 0xFE	; 254
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	7f 7f       	andi	r23, 0xFF	; 255
    8142:	7f 7f       	andi	r23, 0xFF	; 255
    8144:	7e 7e       	andi	r23, 0xEE	; 238
    8146:	7e 7d       	andi	r23, 0xDE	; 222
    8148:	7d 7c       	andi	r23, 0xCD	; 205
    814a:	7b 7a       	andi	r23, 0xAB	; 171
    814c:	7a 79       	andi	r23, 0x9A	; 154
    814e:	78 76       	andi	r23, 0x68	; 104
    8150:	75 74       	andi	r23, 0x45	; 69
    8152:	73 71       	andi	r23, 0x13	; 19
    8154:	70 6f       	ori	r23, 0xF0	; 240
    8156:	6d 6b       	ori	r22, 0xBD	; 189
    8158:	6a 68       	ori	r22, 0x8A	; 138
    815a:	66 64       	ori	r22, 0x46	; 70
    815c:	62 60       	ori	r22, 0x02	; 2
    815e:	5e 5c       	subi	r21, 0xCE	; 206
    8160:	5a 58       	subi	r21, 0x8A	; 138
    8162:	55 53       	subi	r21, 0x35	; 53
    8164:	51 4e       	sbci	r21, 0xE1	; 225
    8166:	4c 49       	sbci	r20, 0x9C	; 156
    8168:	47 44       	sbci	r20, 0x47	; 71
    816a:	41 3f       	cpi	r20, 0xF1	; 241
    816c:	3c 39       	cpi	r19, 0x9C	; 156
    816e:	36 33       	cpi	r19, 0x36	; 54
    8170:	31 2e       	mov	r3, r17
    8172:	2b 28       	or	r2, r11
    8174:	25 22       	and	r2, r21
    8176:	1f 1c       	adc	r1, r15
    8178:	19 16       	cp	r1, r25
    817a:	13 10       	cpse	r1, r3
    817c:	0c 09       	sbc	r16, r12
    817e:	06 03       	mulsu	r16, r22
    8180:	00 fd       	sbrc	r16, 0
    8182:	fa f7       	brpl	.-2      	; 0x8182 <waves+0x82>
    8184:	f4 f0       	brlt	.+60     	; 0x81c2 <waves+0xc2>
    8186:	ed ea       	ldi	r30, 0xAD	; 173
    8188:	e7 e4       	ldi	r30, 0x47	; 71
    818a:	e1 de       	rcall	.-574    	; 0x7f4e <steptable+0x46>
    818c:	db d8       	rcall	.-3658   	; 0x7344 <ReadEeprom+0x4>
    818e:	d5 d2       	rcall	.+1450   	; 0x873a <waves+0x63a>
    8190:	cf cd       	rjmp	.-1122   	; 0x7d30 <ProcessMusic+0x36e>
    8192:	ca c7       	rjmp	.+3988   	; 0x9128 <LBPrintStr+0x58>
    8194:	c4 c1       	rjmp	.+904    	; 0x851e <waves+0x41e>
    8196:	bf bc       	out	0x2f, r11	; 47
    8198:	b9 b7       	in	r27, 0x39	; 57
    819a:	b4 b2       	in	r11, 0x14	; 20
    819c:	af ad       	ldd	r26, Y+63	; 0x3f
    819e:	ab a8       	ldd	r10, Y+51	; 0x33
    81a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    81a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    81a4:	9e 9c       	mul	r9, r14
    81a6:	9a 98       	cbi	0x13, 2	; 19
    81a8:	96 95       	lsr	r25
    81aa:	93 91       	.word	0x9193	; ????
    81ac:	90 8f       	std	Z+24, r25	; 0x18
    81ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    81b0:	8b 8a       	std	Y+19, r8	; 0x13
    81b2:	88 87       	std	Y+8, r24	; 0x08
    81b4:	86 86       	std	Z+14, r8	; 0x0e
    81b6:	85 84       	ldd	r8, Z+13	; 0x0d
    81b8:	83 83       	std	Z+3, r24	; 0x03
    81ba:	82 82       	std	Z+2, r8	; 0x02
    81bc:	82 81       	ldd	r24, Z+2	; 0x02
    81be:	81 81       	ldd	r24, Z+1	; 0x01
    81c0:	81 81       	ldd	r24, Z+1	; 0x01
    81c2:	81 81       	ldd	r24, Z+1	; 0x01
    81c4:	82 82       	std	Z+2, r8	; 0x02
    81c6:	82 83       	std	Z+2, r24	; 0x02
    81c8:	83 84       	ldd	r8, Z+11	; 0x0b
    81ca:	85 86       	std	Z+13, r8	; 0x0d
    81cc:	86 87       	std	Z+14, r24	; 0x0e
    81ce:	88 8a       	std	Y+16, r8	; 0x10
    81d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    81d2:	8d 8f       	std	Y+29, r24	; 0x1d
    81d4:	90 91 93 95 	lds	r25, 0x9593
    81d8:	96 98       	cbi	0x12, 6	; 18
    81da:	9a 9c       	mul	r9, r10
    81dc:	9e a0       	ldd	r9, Y+38	; 0x26
    81de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    81e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    81e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    81e4:	af b2       	in	r10, 0x1f	; 31
    81e6:	b4 b7       	in	r27, 0x34	; 52
    81e8:	b9 bc       	out	0x29, r11	; 41
    81ea:	bf c1       	rjmp	.+894    	; 0x856a <waves+0x46a>
    81ec:	c4 c7       	rjmp	.+3976   	; 0x9176 <LBCollides+0x44>
    81ee:	ca cd       	rjmp	.-1132   	; 0x7d84 <ProcessMusic+0x3c2>
    81f0:	cf d2       	rcall	.+1438   	; 0x8790 <waves+0x690>
    81f2:	d5 d8       	rcall	.-3670   	; 0x739e <__vector_8+0xe>
    81f4:	db de       	rcall	.-586    	; 0x7fac <steptable+0xa4>
    81f6:	e1 e4       	ldi	r30, 0x41	; 65
    81f8:	e7 ea       	ldi	r30, 0xA7	; 167
    81fa:	ed f0       	brhs	.+58     	; 0x8236 <waves+0x136>
    81fc:	f4 f7       	brge	.-4      	; 0x81fa <waves+0xfa>
    81fe:	fa fd       	.word	0xfdfa	; ????
    8200:	80 81       	ld	r24, Z
    8202:	82 83       	std	Z+2, r24	; 0x02
    8204:	84 85       	ldd	r24, Z+12	; 0x0c
    8206:	86 87       	std	Z+14, r24	; 0x0e
    8208:	88 89       	ldd	r24, Y+16	; 0x10
    820a:	8a 8b       	std	Y+18, r24	; 0x12
    820c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    820e:	8e 8f       	std	Y+30, r24	; 0x1e
    8210:	90 91 92 93 	lds	r25, 0x9392
    8214:	94 95       	.word	0x9594	; ????
    8216:	96 97       	sbiw	r26, 0x26	; 38
    8218:	98 99       	sbic	0x13, 0	; 19
    821a:	9a 9b       	sbis	0x13, 2	; 19
    821c:	9c 9d       	mul	r25, r12
    821e:	9e 9f       	mul	r25, r30
    8220:	a0 a1       	ldd	r26, Z+32	; 0x20
    8222:	a2 a3       	std	Z+34, r26	; 0x22
    8224:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8226:	a6 a7       	std	Z+46, r26	; 0x2e
    8228:	a8 a9       	ldd	r26, Y+48	; 0x30
    822a:	aa ab       	std	Y+50, r26	; 0x32
    822c:	ac ad       	ldd	r26, Y+60	; 0x3c
    822e:	ae af       	std	Y+62, r26	; 0x3e
    8230:	b0 b1       	in	r27, 0x00	; 0
    8232:	b2 b3       	in	r27, 0x12	; 18
    8234:	b4 b5       	in	r27, 0x24	; 36
    8236:	b6 b7       	in	r27, 0x36	; 54
    8238:	b8 b9       	out	0x08, r27	; 8
    823a:	ba bb       	out	0x1a, r27	; 26
    823c:	bc bd       	out	0x2c, r27	; 44
    823e:	be bf       	out	0x3e, r27	; 62
    8240:	c0 c1       	rjmp	.+896    	; 0x85c2 <waves+0x4c2>
    8242:	c2 c3       	rjmp	.+1924   	; 0x89c8 <waves+0x8c8>
    8244:	c4 c5       	rjmp	.+2952   	; 0x8dce <InitializeVideoMode+0xe>
    8246:	c6 c7       	rjmp	.+3980   	; 0x91d4 <LBLineIntersect+0x4e>
    8248:	c8 c9       	rjmp	.-3184   	; 0x75da <EepromReadBlock+0x18>
    824a:	ca cb       	rjmp	.-2156   	; 0x79e0 <ProcessMusic+0x1e>
    824c:	cc cd       	rjmp	.-1128   	; 0x7de6 <ProcessMusic+0x424>
    824e:	ce cf       	rjmp	.-100    	; 0x81ec <waves+0xec>
    8250:	d0 d1       	rcall	.+928    	; 0x85f2 <waves+0x4f2>
    8252:	d2 d3       	rcall	.+1956   	; 0x89f8 <waves+0x8f8>
    8254:	d4 d5       	rcall	.+2984   	; 0x8dfe <DrawMap2+0x2a>
    8256:	d6 d7       	rcall	.+4012   	; 0x9204 <LBLineIntersect+0x7e>
    8258:	d8 d9       	rcall	.-3152   	; 0x760a <EepromReadBlock+0x48>
    825a:	da db       	rcall	.-2124   	; 0x7a10 <ProcessMusic+0x4e>
    825c:	dc dd       	rcall	.-1096   	; 0x7e16 <SetMixerNote>
    825e:	de df       	rcall	.-68     	; 0x821c <waves+0x11c>
    8260:	e0 e1       	ldi	r30, 0x10	; 16
    8262:	e2 e3       	ldi	r30, 0x32	; 50
    8264:	e4 e5       	ldi	r30, 0x54	; 84
    8266:	e6 e7       	ldi	r30, 0x76	; 118
    8268:	e8 e9       	ldi	r30, 0x98	; 152
    826a:	ea eb       	ldi	r30, 0xBA	; 186
    826c:	ec ed       	ldi	r30, 0xDC	; 220
    826e:	ee ef       	ldi	r30, 0xFE	; 254
    8270:	f0 f1       	brcs	.+124    	; 0x82ee <waves+0x1ee>
    8272:	f2 f3       	brmi	.-4      	; 0x8270 <waves+0x170>
    8274:	f4 f5       	brge	.+124    	; 0x82f2 <waves+0x1f2>
    8276:	f6 f7       	brtc	.-4      	; 0x8274 <waves+0x174>
    8278:	f8 f9       	.word	0xf9f8	; ????
    827a:	fa fb       	.word	0xfbfa	; ????
    827c:	fc fd       	.word	0xfdfc	; ????
    827e:	fe ff       	.word	0xfffe	; ????
    8280:	00 01       	movw	r0, r0
    8282:	02 03       	mulsu	r16, r18
    8284:	04 05       	cpc	r16, r4
    8286:	06 07       	cpc	r16, r22
    8288:	08 09       	sbc	r16, r8
    828a:	0a 0b       	sbc	r16, r26
    828c:	0c 0d       	add	r16, r12
    828e:	0e 0f       	add	r16, r30
    8290:	10 11       	cpse	r17, r0
    8292:	12 13       	cpse	r17, r18
    8294:	14 15       	cp	r17, r4
    8296:	16 17       	cp	r17, r22
    8298:	18 19       	sub	r17, r8
    829a:	1a 1b       	sub	r17, r26
    829c:	1c 1d       	adc	r17, r12
    829e:	1e 1f       	adc	r17, r30
    82a0:	20 21       	and	r18, r0
    82a2:	22 23       	and	r18, r18
    82a4:	24 25       	eor	r18, r4
    82a6:	26 27       	eor	r18, r22
    82a8:	28 29       	or	r18, r8
    82aa:	2a 2b       	or	r18, r26
    82ac:	2c 2d       	mov	r18, r12
    82ae:	2e 2f       	mov	r18, r30
    82b0:	30 31       	cpi	r19, 0x10	; 16
    82b2:	32 33       	cpi	r19, 0x32	; 50
    82b4:	34 35       	cpi	r19, 0x54	; 84
    82b6:	36 37       	cpi	r19, 0x76	; 118
    82b8:	38 39       	cpi	r19, 0x98	; 152
    82ba:	3a 3b       	cpi	r19, 0xBA	; 186
    82bc:	3c 3d       	cpi	r19, 0xDC	; 220
    82be:	3e 3f       	cpi	r19, 0xFE	; 254
    82c0:	40 41       	sbci	r20, 0x10	; 16
    82c2:	42 43       	sbci	r20, 0x32	; 50
    82c4:	44 45       	sbci	r20, 0x54	; 84
    82c6:	46 47       	sbci	r20, 0x76	; 118
    82c8:	48 49       	sbci	r20, 0x98	; 152
    82ca:	4a 4b       	sbci	r20, 0xBA	; 186
    82cc:	4c 4d       	sbci	r20, 0xDC	; 220
    82ce:	4e 4f       	sbci	r20, 0xFE	; 254
    82d0:	50 51       	subi	r21, 0x10	; 16
    82d2:	52 53       	subi	r21, 0x32	; 50
    82d4:	54 55       	subi	r21, 0x54	; 84
    82d6:	56 57       	subi	r21, 0x76	; 118
    82d8:	58 59       	subi	r21, 0x98	; 152
    82da:	5a 5b       	subi	r21, 0xBA	; 186
    82dc:	5c 5d       	subi	r21, 0xDC	; 220
    82de:	5e 5f       	subi	r21, 0xFE	; 254
    82e0:	60 61       	ori	r22, 0x10	; 16
    82e2:	62 63       	ori	r22, 0x32	; 50
    82e4:	64 65       	ori	r22, 0x54	; 84
    82e6:	66 67       	ori	r22, 0x76	; 118
    82e8:	68 69       	ori	r22, 0x98	; 152
    82ea:	6a 6b       	ori	r22, 0xBA	; 186
    82ec:	6c 6d       	ori	r22, 0xDC	; 220
    82ee:	6e 6f       	ori	r22, 0xFE	; 254
    82f0:	70 71       	andi	r23, 0x10	; 16
    82f2:	72 73       	andi	r23, 0x32	; 50
    82f4:	74 75       	andi	r23, 0x54	; 84
    82f6:	76 77       	andi	r23, 0x76	; 118
    82f8:	78 79       	andi	r23, 0x98	; 152
    82fa:	7a 7b       	andi	r23, 0xBA	; 186
    82fc:	7c 7d       	andi	r23, 0xDC	; 220
    82fe:	7e 7f       	andi	r23, 0xFE	; 254
    8300:	00 02       	muls	r16, r16
    8302:	04 06       	cpc	r0, r20
    8304:	08 0a       	sbc	r0, r24
    8306:	0c 0e       	add	r0, r28
    8308:	10 12       	cpse	r1, r16
    830a:	14 16       	cp	r1, r20
    830c:	18 1a       	sub	r1, r24
    830e:	1c 1e       	adc	r1, r28
    8310:	20 22       	and	r2, r16
    8312:	24 26       	eor	r2, r20
    8314:	28 2a       	or	r2, r24
    8316:	2c 2e       	mov	r2, r28
    8318:	30 32       	cpi	r19, 0x20	; 32
    831a:	34 36       	cpi	r19, 0x64	; 100
    831c:	38 3a       	cpi	r19, 0xA8	; 168
    831e:	3c 3e       	cpi	r19, 0xEC	; 236
    8320:	40 42       	sbci	r20, 0x20	; 32
    8322:	44 46       	sbci	r20, 0x64	; 100
    8324:	48 4a       	sbci	r20, 0xA8	; 168
    8326:	4c 4e       	sbci	r20, 0xEC	; 236
    8328:	50 52       	subi	r21, 0x20	; 32
    832a:	54 56       	subi	r21, 0x64	; 100
    832c:	58 5a       	subi	r21, 0xA8	; 168
    832e:	5c 5e       	subi	r21, 0xEC	; 236
    8330:	60 62       	ori	r22, 0x20	; 32
    8332:	64 66       	ori	r22, 0x64	; 100
    8334:	68 6a       	ori	r22, 0xA8	; 168
    8336:	6c 6e       	ori	r22, 0xEC	; 236
    8338:	70 72       	andi	r23, 0x20	; 32
    833a:	74 76       	andi	r23, 0x64	; 100
    833c:	78 7a       	andi	r23, 0xA8	; 168
    833e:	7c 7e       	andi	r23, 0xEC	; 236
    8340:	7f 7d       	andi	r23, 0xDF	; 223
    8342:	7b 79       	andi	r23, 0x9B	; 155
    8344:	77 75       	andi	r23, 0x57	; 87
    8346:	73 71       	andi	r23, 0x13	; 19
    8348:	6f 6d       	ori	r22, 0xDF	; 223
    834a:	6b 69       	ori	r22, 0x9B	; 155
    834c:	67 65       	ori	r22, 0x57	; 87
    834e:	63 61       	ori	r22, 0x13	; 19
    8350:	5f 5d       	subi	r21, 0xDF	; 223
    8352:	5b 59       	subi	r21, 0x9B	; 155
    8354:	57 55       	subi	r21, 0x57	; 87
    8356:	53 51       	subi	r21, 0x13	; 19
    8358:	4f 4d       	sbci	r20, 0xDF	; 223
    835a:	4b 49       	sbci	r20, 0x9B	; 155
    835c:	47 45       	sbci	r20, 0x57	; 87
    835e:	43 41       	sbci	r20, 0x13	; 19
    8360:	3f 3d       	cpi	r19, 0xDF	; 223
    8362:	3b 39       	cpi	r19, 0x9B	; 155
    8364:	37 35       	cpi	r19, 0x57	; 87
    8366:	33 31       	cpi	r19, 0x13	; 19
    8368:	2f 2d       	mov	r18, r15
    836a:	2b 29       	or	r18, r11
    836c:	27 25       	eor	r18, r7
    836e:	23 21       	and	r18, r3
    8370:	1f 1d       	adc	r17, r15
    8372:	1b 19       	sub	r17, r11
    8374:	17 15       	cp	r17, r7
    8376:	13 11       	cpse	r17, r3
    8378:	0f 0d       	add	r16, r15
    837a:	0b 09       	sbc	r16, r11
    837c:	07 05       	cpc	r16, r7
    837e:	03 01       	movw	r0, r6
    8380:	ff fd       	.word	0xfdff	; ????
    8382:	fb f9       	.word	0xf9fb	; ????
    8384:	f7 f5       	brid	.+124    	; 0x8402 <waves+0x302>
    8386:	f3 f1       	brvs	.+124    	; 0x8404 <waves+0x304>
    8388:	ef ed       	ldi	r30, 0xDF	; 223
    838a:	eb e9       	ldi	r30, 0x9B	; 155
    838c:	e7 e5       	ldi	r30, 0x57	; 87
    838e:	e3 e1       	ldi	r30, 0x13	; 19
    8390:	df dd       	rcall	.-1090   	; 0x7f50 <steptable+0x48>
    8392:	db d9       	rcall	.-3146   	; 0x774a <PatchCommand08+0x12>
    8394:	d7 d5       	rcall	.+2990   	; 0x8f44 <doFade+0x6>
    8396:	d3 d1       	rcall	.+934    	; 0x873e <waves+0x63e>
    8398:	cf cd       	rjmp	.-1122   	; 0x7f38 <steptable+0x30>
    839a:	cb c9       	rjmp	.-3178   	; 0x7732 <PatchCommand04+0xa>
    839c:	c7 c5       	rjmp	.+2958   	; 0x8f2c <WaitVsync+0x1c>
    839e:	c3 c1       	rjmp	.+902    	; 0x8726 <waves+0x626>
    83a0:	bf bd       	out	0x2f, r27	; 47
    83a2:	bb b9       	out	0x0b, r27	; 11
    83a4:	b7 b5       	in	r27, 0x27	; 39
    83a6:	b3 b1       	in	r27, 0x03	; 3
    83a8:	af ad       	ldd	r26, Y+63	; 0x3f
    83aa:	ab a9       	ldd	r26, Y+51	; 0x33
    83ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    83ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    83b0:	9f 9d       	mul	r25, r15
    83b2:	9b 99       	sbic	0x13, 3	; 19
    83b4:	97 95       	ror	r25
    83b6:	93 91       	.word	0x9193	; ????
    83b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    83ba:	8b 89       	ldd	r24, Y+19	; 0x13
    83bc:	87 85       	ldd	r24, Z+15	; 0x0f
    83be:	83 81       	ldd	r24, Z+3	; 0x03
    83c0:	80 82       	st	Z, r8
    83c2:	84 86       	std	Z+12, r8	; 0x0c
    83c4:	88 8a       	std	Y+16, r8	; 0x10
    83c6:	8c 8e       	std	Y+28, r8	; 0x1c
    83c8:	90 92 94 96 	sts	0x9694, r9
    83cc:	98 9a       	sbi	0x13, 0	; 19
    83ce:	9c 9e       	mul	r9, r28
    83d0:	a0 a2       	std	Z+32, r10	; 0x20
    83d2:	a4 a6       	std	Z+44, r10	; 0x2c
    83d4:	a8 aa       	std	Y+48, r10	; 0x30
    83d6:	ac ae       	std	Y+60, r10	; 0x3c
    83d8:	b0 b2       	in	r11, 0x10	; 16
    83da:	b4 b6       	in	r11, 0x34	; 52
    83dc:	b8 ba       	out	0x18, r11	; 24
    83de:	bc be       	out	0x3c, r11	; 60
    83e0:	c0 c2       	rjmp	.+1408   	; 0x8962 <waves+0x862>
    83e2:	c4 c6       	rjmp	.+3464   	; 0x916c <LBCollides+0x3a>
    83e4:	c8 ca       	rjmp	.-2672   	; 0x7976 <TriggerNote+0x22>
    83e6:	cc ce       	rjmp	.-616    	; 0x8180 <waves+0x80>
    83e8:	d0 d2       	rcall	.+1440   	; 0x898a <waves+0x88a>
    83ea:	d4 d6       	rcall	.+3496   	; 0x9194 <LBLineIntersect+0xe>
    83ec:	d8 da       	rcall	.-2640   	; 0x799e <TriggerNote+0x4a>
    83ee:	dc de       	rcall	.-584    	; 0x81a8 <waves+0xa8>
    83f0:	e0 e2       	ldi	r30, 0x20	; 32
    83f2:	e4 e6       	ldi	r30, 0x64	; 100
    83f4:	e8 ea       	ldi	r30, 0xA8	; 168
    83f6:	ec ee       	ldi	r30, 0xEC	; 236
    83f8:	f0 f2       	brcs	.-68     	; 0x83b6 <waves+0x2b6>
    83fa:	f4 f6       	brge	.-68     	; 0x83b8 <waves+0x2b8>
    83fc:	f8 fa       	.word	0xfaf8	; ????
    83fe:	fc fe       	.word	0xfefc	; ????
    8400:	7f 7f       	andi	r23, 0xFF	; 255
    8402:	7f 7f       	andi	r23, 0xFF	; 255
    8404:	7f 7f       	andi	r23, 0xFF	; 255
    8406:	7f 7f       	andi	r23, 0xFF	; 255
    8408:	7f 7f       	andi	r23, 0xFF	; 255
    840a:	7f 7f       	andi	r23, 0xFF	; 255
    840c:	7f 7f       	andi	r23, 0xFF	; 255
    840e:	7f 7f       	andi	r23, 0xFF	; 255
    8410:	7f 7f       	andi	r23, 0xFF	; 255
    8412:	7f 7f       	andi	r23, 0xFF	; 255
    8414:	7f 7f       	andi	r23, 0xFF	; 255
    8416:	7f 7f       	andi	r23, 0xFF	; 255
    8418:	7f 7f       	andi	r23, 0xFF	; 255
    841a:	7f 7f       	andi	r23, 0xFF	; 255
    841c:	7f 7f       	andi	r23, 0xFF	; 255
    841e:	7f 7f       	andi	r23, 0xFF	; 255
    8420:	7f 7f       	andi	r23, 0xFF	; 255
    8422:	7f 7f       	andi	r23, 0xFF	; 255
    8424:	7f 7f       	andi	r23, 0xFF	; 255
    8426:	7f 7f       	andi	r23, 0xFF	; 255
    8428:	7f 7f       	andi	r23, 0xFF	; 255
    842a:	7f 7f       	andi	r23, 0xFF	; 255
    842c:	7f 7f       	andi	r23, 0xFF	; 255
    842e:	7f 7f       	andi	r23, 0xFF	; 255
    8430:	7f 7f       	andi	r23, 0xFF	; 255
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	80 80       	ld	r8, Z
    8442:	80 80       	ld	r8, Z
    8444:	80 80       	ld	r8, Z
    8446:	80 80       	ld	r8, Z
    8448:	80 80       	ld	r8, Z
    844a:	80 80       	ld	r8, Z
    844c:	80 80       	ld	r8, Z
    844e:	80 80       	ld	r8, Z
    8450:	80 80       	ld	r8, Z
    8452:	80 80       	ld	r8, Z
    8454:	80 80       	ld	r8, Z
    8456:	80 80       	ld	r8, Z
    8458:	80 80       	ld	r8, Z
    845a:	80 80       	ld	r8, Z
    845c:	80 80       	ld	r8, Z
    845e:	80 80       	ld	r8, Z
    8460:	80 80       	ld	r8, Z
    8462:	80 80       	ld	r8, Z
    8464:	80 80       	ld	r8, Z
    8466:	80 80       	ld	r8, Z
    8468:	80 80       	ld	r8, Z
    846a:	80 80       	ld	r8, Z
    846c:	80 80       	ld	r8, Z
    846e:	80 80       	ld	r8, Z
    8470:	80 80       	ld	r8, Z
    8472:	80 80       	ld	r8, Z
    8474:	80 80       	ld	r8, Z
    8476:	80 80       	ld	r8, Z
    8478:	80 80       	ld	r8, Z
    847a:	80 80       	ld	r8, Z
    847c:	80 80       	ld	r8, Z
    847e:	80 80       	ld	r8, Z
    8480:	80 80       	ld	r8, Z
    8482:	80 80       	ld	r8, Z
    8484:	80 80       	ld	r8, Z
    8486:	80 80       	ld	r8, Z
    8488:	80 80       	ld	r8, Z
    848a:	80 80       	ld	r8, Z
    848c:	80 80       	ld	r8, Z
    848e:	80 80       	ld	r8, Z
    8490:	80 80       	ld	r8, Z
    8492:	80 80       	ld	r8, Z
    8494:	80 80       	ld	r8, Z
    8496:	80 80       	ld	r8, Z
    8498:	80 80       	ld	r8, Z
    849a:	80 80       	ld	r8, Z
    849c:	80 80       	ld	r8, Z
    849e:	80 80       	ld	r8, Z
    84a0:	80 80       	ld	r8, Z
    84a2:	80 80       	ld	r8, Z
    84a4:	80 80       	ld	r8, Z
    84a6:	80 80       	ld	r8, Z
    84a8:	80 80       	ld	r8, Z
    84aa:	80 80       	ld	r8, Z
    84ac:	80 80       	ld	r8, Z
    84ae:	80 80       	ld	r8, Z
    84b0:	80 80       	ld	r8, Z
    84b2:	80 80       	ld	r8, Z
    84b4:	80 80       	ld	r8, Z
    84b6:	80 80       	ld	r8, Z
    84b8:	80 80       	ld	r8, Z
    84ba:	80 80       	ld	r8, Z
    84bc:	80 80       	ld	r8, Z
    84be:	80 80       	ld	r8, Z
    84c0:	80 80       	ld	r8, Z
    84c2:	80 80       	ld	r8, Z
    84c4:	80 80       	ld	r8, Z
    84c6:	80 80       	ld	r8, Z
    84c8:	80 80       	ld	r8, Z
    84ca:	80 80       	ld	r8, Z
    84cc:	80 80       	ld	r8, Z
    84ce:	80 80       	ld	r8, Z
    84d0:	80 80       	ld	r8, Z
    84d2:	80 80       	ld	r8, Z
    84d4:	80 80       	ld	r8, Z
    84d6:	80 80       	ld	r8, Z
    84d8:	80 80       	ld	r8, Z
    84da:	80 80       	ld	r8, Z
    84dc:	80 80       	ld	r8, Z
    84de:	80 80       	ld	r8, Z
    84e0:	80 80       	ld	r8, Z
    84e2:	80 80       	ld	r8, Z
    84e4:	80 80       	ld	r8, Z
    84e6:	80 80       	ld	r8, Z
    84e8:	80 80       	ld	r8, Z
    84ea:	80 80       	ld	r8, Z
    84ec:	80 80       	ld	r8, Z
    84ee:	80 80       	ld	r8, Z
    84f0:	80 80       	ld	r8, Z
    84f2:	80 80       	ld	r8, Z
    84f4:	80 80       	ld	r8, Z
    84f6:	80 80       	ld	r8, Z
    84f8:	80 80       	ld	r8, Z
    84fa:	80 80       	ld	r8, Z
    84fc:	80 80       	ld	r8, Z
    84fe:	80 80       	ld	r8, Z
    8500:	7f 7f       	andi	r23, 0xFF	; 255
    8502:	7f 7f       	andi	r23, 0xFF	; 255
    8504:	7f 7f       	andi	r23, 0xFF	; 255
    8506:	7f 7f       	andi	r23, 0xFF	; 255
    8508:	7f 7f       	andi	r23, 0xFF	; 255
    850a:	7f 7f       	andi	r23, 0xFF	; 255
    850c:	7f 7f       	andi	r23, 0xFF	; 255
    850e:	7f 7f       	andi	r23, 0xFF	; 255
    8510:	7f 7f       	andi	r23, 0xFF	; 255
    8512:	7f 7f       	andi	r23, 0xFF	; 255
    8514:	7f 7f       	andi	r23, 0xFF	; 255
    8516:	7f 7f       	andi	r23, 0xFF	; 255
    8518:	7f 7f       	andi	r23, 0xFF	; 255
    851a:	7f 7f       	andi	r23, 0xFF	; 255
    851c:	7f 7f       	andi	r23, 0xFF	; 255
    851e:	7f 7f       	andi	r23, 0xFF	; 255
    8520:	7f 7f       	andi	r23, 0xFF	; 255
    8522:	7f 7f       	andi	r23, 0xFF	; 255
    8524:	7f 7f       	andi	r23, 0xFF	; 255
    8526:	7f 7f       	andi	r23, 0xFF	; 255
    8528:	7f 7f       	andi	r23, 0xFF	; 255
    852a:	7f 7f       	andi	r23, 0xFF	; 255
    852c:	7f 7f       	andi	r23, 0xFF	; 255
    852e:	7f 7f       	andi	r23, 0xFF	; 255
    8530:	7f 7f       	andi	r23, 0xFF	; 255
    8532:	7f 7f       	andi	r23, 0xFF	; 255
    8534:	7f 7f       	andi	r23, 0xFF	; 255
    8536:	7f 7f       	andi	r23, 0xFF	; 255
    8538:	7f 7f       	andi	r23, 0xFF	; 255
    853a:	7f 7f       	andi	r23, 0xFF	; 255
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7f 7f       	andi	r23, 0xFF	; 255
    8546:	7f 7f       	andi	r23, 0xFF	; 255
    8548:	7f 7f       	andi	r23, 0xFF	; 255
    854a:	7f 7f       	andi	r23, 0xFF	; 255
    854c:	7f 7f       	andi	r23, 0xFF	; 255
    854e:	7f 7f       	andi	r23, 0xFF	; 255
    8550:	7f 7f       	andi	r23, 0xFF	; 255
    8552:	7f 7f       	andi	r23, 0xFF	; 255
    8554:	7f 7f       	andi	r23, 0xFF	; 255
    8556:	7f 7f       	andi	r23, 0xFF	; 255
    8558:	7f 7f       	andi	r23, 0xFF	; 255
    855a:	7f 7f       	andi	r23, 0xFF	; 255
    855c:	7f 7f       	andi	r23, 0xFF	; 255
    855e:	7f 7f       	andi	r23, 0xFF	; 255
    8560:	7f 7f       	andi	r23, 0xFF	; 255
    8562:	7f 7f       	andi	r23, 0xFF	; 255
    8564:	7f 7f       	andi	r23, 0xFF	; 255
    8566:	7f 7f       	andi	r23, 0xFF	; 255
    8568:	7f 7f       	andi	r23, 0xFF	; 255
    856a:	7f 7f       	andi	r23, 0xFF	; 255
    856c:	7f 7f       	andi	r23, 0xFF	; 255
    856e:	7f 7f       	andi	r23, 0xFF	; 255
    8570:	7f 7f       	andi	r23, 0xFF	; 255
    8572:	7f 7f       	andi	r23, 0xFF	; 255
    8574:	7f 7f       	andi	r23, 0xFF	; 255
    8576:	7f 7f       	andi	r23, 0xFF	; 255
    8578:	7f 7f       	andi	r23, 0xFF	; 255
    857a:	7f 7f       	andi	r23, 0xFF	; 255
    857c:	7f 7f       	andi	r23, 0xFF	; 255
    857e:	7f 7f       	andi	r23, 0xFF	; 255
    8580:	80 80       	ld	r8, Z
    8582:	80 80       	ld	r8, Z
    8584:	80 80       	ld	r8, Z
    8586:	80 80       	ld	r8, Z
    8588:	80 80       	ld	r8, Z
    858a:	80 80       	ld	r8, Z
    858c:	80 80       	ld	r8, Z
    858e:	80 80       	ld	r8, Z
    8590:	80 80       	ld	r8, Z
    8592:	80 80       	ld	r8, Z
    8594:	80 80       	ld	r8, Z
    8596:	80 80       	ld	r8, Z
    8598:	80 80       	ld	r8, Z
    859a:	80 80       	ld	r8, Z
    859c:	80 80       	ld	r8, Z
    859e:	80 80       	ld	r8, Z
    85a0:	80 80       	ld	r8, Z
    85a2:	80 80       	ld	r8, Z
    85a4:	80 80       	ld	r8, Z
    85a6:	80 80       	ld	r8, Z
    85a8:	80 80       	ld	r8, Z
    85aa:	80 80       	ld	r8, Z
    85ac:	80 80       	ld	r8, Z
    85ae:	80 80       	ld	r8, Z
    85b0:	80 80       	ld	r8, Z
    85b2:	80 80       	ld	r8, Z
    85b4:	80 80       	ld	r8, Z
    85b6:	80 80       	ld	r8, Z
    85b8:	80 80       	ld	r8, Z
    85ba:	80 80       	ld	r8, Z
    85bc:	80 80       	ld	r8, Z
    85be:	80 80       	ld	r8, Z
    85c0:	80 80       	ld	r8, Z
    85c2:	80 80       	ld	r8, Z
    85c4:	80 80       	ld	r8, Z
    85c6:	80 80       	ld	r8, Z
    85c8:	80 80       	ld	r8, Z
    85ca:	80 80       	ld	r8, Z
    85cc:	80 80       	ld	r8, Z
    85ce:	80 80       	ld	r8, Z
    85d0:	80 80       	ld	r8, Z
    85d2:	80 80       	ld	r8, Z
    85d4:	80 80       	ld	r8, Z
    85d6:	80 80       	ld	r8, Z
    85d8:	80 80       	ld	r8, Z
    85da:	80 80       	ld	r8, Z
    85dc:	80 80       	ld	r8, Z
    85de:	80 80       	ld	r8, Z
    85e0:	80 80       	ld	r8, Z
    85e2:	80 80       	ld	r8, Z
    85e4:	80 80       	ld	r8, Z
    85e6:	80 80       	ld	r8, Z
    85e8:	80 80       	ld	r8, Z
    85ea:	80 80       	ld	r8, Z
    85ec:	80 80       	ld	r8, Z
    85ee:	80 80       	ld	r8, Z
    85f0:	80 80       	ld	r8, Z
    85f2:	80 80       	ld	r8, Z
    85f4:	80 80       	ld	r8, Z
    85f6:	80 80       	ld	r8, Z
    85f8:	80 80       	ld	r8, Z
    85fa:	80 80       	ld	r8, Z
    85fc:	80 80       	ld	r8, Z
    85fe:	80 80       	ld	r8, Z
    8600:	7f 7f       	andi	r23, 0xFF	; 255
    8602:	7f 7f       	andi	r23, 0xFF	; 255
    8604:	7f 7f       	andi	r23, 0xFF	; 255
    8606:	7f 7f       	andi	r23, 0xFF	; 255
    8608:	7f 7f       	andi	r23, 0xFF	; 255
    860a:	7f 7f       	andi	r23, 0xFF	; 255
    860c:	7f 7f       	andi	r23, 0xFF	; 255
    860e:	7f 7f       	andi	r23, 0xFF	; 255
    8610:	7f 7f       	andi	r23, 0xFF	; 255
    8612:	7f 7f       	andi	r23, 0xFF	; 255
    8614:	7f 7f       	andi	r23, 0xFF	; 255
    8616:	7f 7f       	andi	r23, 0xFF	; 255
    8618:	7f 7f       	andi	r23, 0xFF	; 255
    861a:	7f 7f       	andi	r23, 0xFF	; 255
    861c:	7f 7f       	andi	r23, 0xFF	; 255
    861e:	7f 7f       	andi	r23, 0xFF	; 255
    8620:	7f 7f       	andi	r23, 0xFF	; 255
    8622:	7f 7f       	andi	r23, 0xFF	; 255
    8624:	7f 7f       	andi	r23, 0xFF	; 255
    8626:	7f 7f       	andi	r23, 0xFF	; 255
    8628:	7f 7f       	andi	r23, 0xFF	; 255
    862a:	7f 7f       	andi	r23, 0xFF	; 255
    862c:	7f 7f       	andi	r23, 0xFF	; 255
    862e:	7f 7f       	andi	r23, 0xFF	; 255
    8630:	7f 7f       	andi	r23, 0xFF	; 255
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	7f 7f       	andi	r23, 0xFF	; 255
    8642:	7f 7f       	andi	r23, 0xFF	; 255
    8644:	7f 7f       	andi	r23, 0xFF	; 255
    8646:	7f 7f       	andi	r23, 0xFF	; 255
    8648:	7f 7f       	andi	r23, 0xFF	; 255
    864a:	7f 7f       	andi	r23, 0xFF	; 255
    864c:	7f 7f       	andi	r23, 0xFF	; 255
    864e:	7f 7f       	andi	r23, 0xFF	; 255
    8650:	7f 7f       	andi	r23, 0xFF	; 255
    8652:	7f 7f       	andi	r23, 0xFF	; 255
    8654:	7f 7f       	andi	r23, 0xFF	; 255
    8656:	7f 7f       	andi	r23, 0xFF	; 255
    8658:	7f 7f       	andi	r23, 0xFF	; 255
    865a:	7f 7f       	andi	r23, 0xFF	; 255
    865c:	7f 7f       	andi	r23, 0xFF	; 255
    865e:	7f 7f       	andi	r23, 0xFF	; 255
    8660:	7f 7f       	andi	r23, 0xFF	; 255
    8662:	7f 7f       	andi	r23, 0xFF	; 255
    8664:	7f 7f       	andi	r23, 0xFF	; 255
    8666:	7f 7f       	andi	r23, 0xFF	; 255
    8668:	7f 7f       	andi	r23, 0xFF	; 255
    866a:	7f 7f       	andi	r23, 0xFF	; 255
    866c:	7f 7f       	andi	r23, 0xFF	; 255
    866e:	7f 7f       	andi	r23, 0xFF	; 255
    8670:	7f 7f       	andi	r23, 0xFF	; 255
    8672:	7f 7f       	andi	r23, 0xFF	; 255
    8674:	7f 7f       	andi	r23, 0xFF	; 255
    8676:	7f 7f       	andi	r23, 0xFF	; 255
    8678:	7f 7f       	andi	r23, 0xFF	; 255
    867a:	7f 7f       	andi	r23, 0xFF	; 255
    867c:	7f 7f       	andi	r23, 0xFF	; 255
    867e:	7f 7f       	andi	r23, 0xFF	; 255
    8680:	7f 7f       	andi	r23, 0xFF	; 255
    8682:	7f 7f       	andi	r23, 0xFF	; 255
    8684:	7f 7f       	andi	r23, 0xFF	; 255
    8686:	7f 7f       	andi	r23, 0xFF	; 255
    8688:	7f 7f       	andi	r23, 0xFF	; 255
    868a:	7f 7f       	andi	r23, 0xFF	; 255
    868c:	7f 7f       	andi	r23, 0xFF	; 255
    868e:	7f 7f       	andi	r23, 0xFF	; 255
    8690:	7f 7f       	andi	r23, 0xFF	; 255
    8692:	7f 7f       	andi	r23, 0xFF	; 255
    8694:	7f 7f       	andi	r23, 0xFF	; 255
    8696:	7f 7f       	andi	r23, 0xFF	; 255
    8698:	7f 7f       	andi	r23, 0xFF	; 255
    869a:	7f 7f       	andi	r23, 0xFF	; 255
    869c:	7f 7f       	andi	r23, 0xFF	; 255
    869e:	7f 7f       	andi	r23, 0xFF	; 255
    86a0:	7f 7f       	andi	r23, 0xFF	; 255
    86a2:	7f 7f       	andi	r23, 0xFF	; 255
    86a4:	7f 7f       	andi	r23, 0xFF	; 255
    86a6:	7f 7f       	andi	r23, 0xFF	; 255
    86a8:	7f 7f       	andi	r23, 0xFF	; 255
    86aa:	7f 7f       	andi	r23, 0xFF	; 255
    86ac:	7f 7f       	andi	r23, 0xFF	; 255
    86ae:	7f 7f       	andi	r23, 0xFF	; 255
    86b0:	7f 7f       	andi	r23, 0xFF	; 255
    86b2:	7f 7f       	andi	r23, 0xFF	; 255
    86b4:	7f 7f       	andi	r23, 0xFF	; 255
    86b6:	7f 7f       	andi	r23, 0xFF	; 255
    86b8:	7f 7f       	andi	r23, 0xFF	; 255
    86ba:	7f 7f       	andi	r23, 0xFF	; 255
    86bc:	7f 7f       	andi	r23, 0xFF	; 255
    86be:	7f 7f       	andi	r23, 0xFF	; 255
    86c0:	80 80       	ld	r8, Z
    86c2:	80 80       	ld	r8, Z
    86c4:	80 80       	ld	r8, Z
    86c6:	80 80       	ld	r8, Z
    86c8:	80 80       	ld	r8, Z
    86ca:	80 80       	ld	r8, Z
    86cc:	80 80       	ld	r8, Z
    86ce:	80 80       	ld	r8, Z
    86d0:	80 80       	ld	r8, Z
    86d2:	80 80       	ld	r8, Z
    86d4:	80 80       	ld	r8, Z
    86d6:	80 80       	ld	r8, Z
    86d8:	80 80       	ld	r8, Z
    86da:	80 80       	ld	r8, Z
    86dc:	80 80       	ld	r8, Z
    86de:	80 80       	ld	r8, Z
    86e0:	80 80       	ld	r8, Z
    86e2:	80 80       	ld	r8, Z
    86e4:	80 80       	ld	r8, Z
    86e6:	80 80       	ld	r8, Z
    86e8:	80 80       	ld	r8, Z
    86ea:	80 80       	ld	r8, Z
    86ec:	80 80       	ld	r8, Z
    86ee:	80 80       	ld	r8, Z
    86f0:	80 80       	ld	r8, Z
    86f2:	80 80       	ld	r8, Z
    86f4:	80 80       	ld	r8, Z
    86f6:	80 80       	ld	r8, Z
    86f8:	80 80       	ld	r8, Z
    86fa:	80 80       	ld	r8, Z
    86fc:	80 80       	ld	r8, Z
    86fe:	80 80       	ld	r8, Z
    8700:	03 09       	sbc	r16, r3
    8702:	13 1e       	adc	r1, r19
    8704:	28 31       	cpi	r18, 0x18	; 24
    8706:	3a 40       	sbci	r19, 0x0A	; 10
    8708:	46 4c       	sbci	r20, 0xC6	; 198
    870a:	50 54       	subi	r21, 0x40	; 64
    870c:	58 5b       	subi	r21, 0xB8	; 184
    870e:	5e 61       	ori	r21, 0x1E	; 30
    8710:	63 65       	ori	r22, 0x53	; 83
    8712:	67 69       	ori	r22, 0x97	; 151
    8714:	6b 6c       	ori	r22, 0xCB	; 203
    8716:	6e 6f       	ori	r22, 0xFE	; 254
    8718:	70 71       	andi	r23, 0x10	; 16
    871a:	72 73       	andi	r23, 0x32	; 50
    871c:	74 75       	andi	r23, 0x54	; 84
    871e:	76 77       	andi	r23, 0x76	; 118
    8720:	77 78       	andi	r23, 0x87	; 135
    8722:	79 79       	andi	r23, 0x99	; 153
    8724:	7a 7a       	andi	r23, 0xAA	; 170
    8726:	7b 7b       	andi	r23, 0xBB	; 187
    8728:	7c 7c       	andi	r23, 0xCC	; 204
    872a:	7c 7d       	andi	r23, 0xDC	; 220
    872c:	7d 7d       	andi	r23, 0xDD	; 221
    872e:	7e 7e       	andi	r23, 0xEE	; 238
    8730:	7e 7e       	andi	r23, 0xEE	; 238
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7e       	andi	r23, 0xEF	; 239
    874e:	7e 7e       	andi	r23, 0xEE	; 238
    8750:	7e 7d       	andi	r23, 0xDE	; 222
    8752:	7d 7d       	andi	r23, 0xDD	; 221
    8754:	7c 7c       	andi	r23, 0xCC	; 204
    8756:	7c 7b       	andi	r23, 0xBC	; 188
    8758:	7b 7a       	andi	r23, 0xAB	; 171
    875a:	7a 79       	andi	r23, 0x9A	; 154
    875c:	79 78       	andi	r23, 0x89	; 137
    875e:	77 77       	andi	r23, 0x77	; 119
    8760:	76 75       	andi	r23, 0x56	; 86
    8762:	74 73       	andi	r23, 0x34	; 52
    8764:	72 71       	andi	r23, 0x12	; 18
    8766:	70 6f       	ori	r23, 0xF0	; 240
    8768:	6e 6c       	ori	r22, 0xCE	; 206
    876a:	6b 69       	ori	r22, 0x9B	; 155
    876c:	67 65       	ori	r22, 0x57	; 87
    876e:	63 61       	ori	r22, 0x13	; 19
    8770:	5e 5b       	subi	r21, 0xBE	; 190
    8772:	58 54       	subi	r21, 0x48	; 72
    8774:	50 4c       	sbci	r21, 0xC0	; 192
    8776:	46 40       	sbci	r20, 0x06	; 6
    8778:	3a 31       	cpi	r19, 0x1A	; 26
    877a:	28 1e       	adc	r2, r24
    877c:	13 09       	sbc	r17, r3
    877e:	03 00       	.word	0x0003	; ????
    8780:	c6 cc       	rjmp	.-1652   	; 0x810e <waves+0xe>
    8782:	d5 db       	rcall	.-2134   	; 0x7f2e <steptable+0x26>
    8784:	df e3       	ldi	r29, 0x3F	; 63
    8786:	e5 e7       	ldi	r30, 0x75	; 117
    8788:	e9 ea       	ldi	r30, 0xA9	; 169
    878a:	eb ec       	ldi	r30, 0xCB	; 203
    878c:	ed ee       	ldi	r30, 0xED	; 237
    878e:	ef ef       	ldi	r30, 0xFF	; 255
    8790:	f0 f0       	brcs	.+60     	; 0x87ce <waves+0x6ce>
    8792:	f0 f1       	brcs	.+124    	; 0x8810 <waves+0x710>
    8794:	f1 f1       	breq	.+124    	; 0x8812 <waves+0x712>
    8796:	f1 f2       	breq	.-68     	; 0x8754 <waves+0x654>
    8798:	f2 f2       	brmi	.-68     	; 0x8756 <waves+0x656>
    879a:	f2 f2       	brmi	.-68     	; 0x8758 <waves+0x658>
    879c:	f2 f2       	brmi	.-68     	; 0x875a <waves+0x65a>
    879e:	f2 f3       	brmi	.-4      	; 0x879c <waves+0x69c>
    87a0:	f3 f3       	brvs	.-4      	; 0x879e <waves+0x69e>
    87a2:	f3 f3       	brvs	.-4      	; 0x87a0 <waves+0x6a0>
    87a4:	f3 f3       	brvs	.-4      	; 0x87a2 <waves+0x6a2>
    87a6:	f3 f3       	brvs	.-4      	; 0x87a4 <waves+0x6a4>
    87a8:	f3 f3       	brvs	.-4      	; 0x87a6 <waves+0x6a6>
    87aa:	f3 f3       	brvs	.-4      	; 0x87a8 <waves+0x6a8>
    87ac:	f3 f3       	brvs	.-4      	; 0x87aa <waves+0x6aa>
    87ae:	f3 f3       	brvs	.-4      	; 0x87ac <waves+0x6ac>
    87b0:	f3 f3       	brvs	.-4      	; 0x87ae <waves+0x6ae>
    87b2:	f3 f3       	brvs	.-4      	; 0x87b0 <waves+0x6b0>
    87b4:	f3 f3       	brvs	.-4      	; 0x87b2 <waves+0x6b2>
    87b6:	f3 f3       	brvs	.-4      	; 0x87b4 <waves+0x6b4>
    87b8:	f3 f3       	brvs	.-4      	; 0x87b6 <waves+0x6b6>
    87ba:	f3 f3       	brvs	.-4      	; 0x87b8 <waves+0x6b8>
    87bc:	f3 f3       	brvs	.-4      	; 0x87ba <waves+0x6ba>
    87be:	f3 f3       	brvs	.-4      	; 0x87bc <waves+0x6bc>
    87c0:	f3 f3       	brvs	.-4      	; 0x87be <waves+0x6be>
    87c2:	f3 f3       	brvs	.-4      	; 0x87c0 <waves+0x6c0>
    87c4:	f3 f3       	brvs	.-4      	; 0x87c2 <waves+0x6c2>
    87c6:	f3 f3       	brvs	.-4      	; 0x87c4 <waves+0x6c4>
    87c8:	f3 f3       	brvs	.-4      	; 0x87c6 <waves+0x6c6>
    87ca:	f3 f3       	brvs	.-4      	; 0x87c8 <waves+0x6c8>
    87cc:	f3 f3       	brvs	.-4      	; 0x87ca <waves+0x6ca>
    87ce:	f3 f3       	brvs	.-4      	; 0x87cc <waves+0x6cc>
    87d0:	f3 f3       	brvs	.-4      	; 0x87ce <waves+0x6ce>
    87d2:	f3 f3       	brvs	.-4      	; 0x87d0 <waves+0x6d0>
    87d4:	f3 f3       	brvs	.-4      	; 0x87d2 <waves+0x6d2>
    87d6:	f3 f3       	brvs	.-4      	; 0x87d4 <waves+0x6d4>
    87d8:	f3 f3       	brvs	.-4      	; 0x87d6 <waves+0x6d6>
    87da:	f3 f3       	brvs	.-4      	; 0x87d8 <waves+0x6d8>
    87dc:	f3 f3       	brvs	.-4      	; 0x87da <waves+0x6da>
    87de:	f3 f3       	brvs	.-4      	; 0x87dc <waves+0x6dc>
    87e0:	f2 f2       	brmi	.-68     	; 0x879e <waves+0x69e>
    87e2:	f2 f2       	brmi	.-68     	; 0x87a0 <waves+0x6a0>
    87e4:	f2 f2       	brmi	.-68     	; 0x87a2 <waves+0x6a2>
    87e6:	f2 f2       	brmi	.-68     	; 0x87a4 <waves+0x6a4>
    87e8:	f1 f1       	breq	.+124    	; 0x8866 <waves+0x766>
    87ea:	f1 f1       	breq	.+124    	; 0x8868 <waves+0x768>
    87ec:	f0 f0       	brcs	.+60     	; 0x882a <waves+0x72a>
    87ee:	f0 ef       	ldi	r31, 0xF0	; 240
    87f0:	ef ee       	ldi	r30, 0xEF	; 239
    87f2:	ed ec       	ldi	r30, 0xCD	; 205
    87f4:	eb ea       	ldi	r30, 0xAB	; 171
    87f6:	e9 e7       	ldi	r30, 0x79	; 121
    87f8:	e5 e3       	ldi	r30, 0x35	; 53
    87fa:	df db       	rcall	.-2114   	; 0x7fba <steptable+0xb2>
    87fc:	d5 cc       	rjmp	.-1622   	; 0x81a8 <waves+0xa8>
    87fe:	c6 00       	.word	0x00c6	; ????
    8800:	00 28       	or	r0, r0
    8802:	3d 42       	sbci	r19, 0x2D	; 45
    8804:	30 2d       	mov	r19, r0
    8806:	2c 2b       	or	r18, r28
    8808:	2c 2d       	mov	r18, r12
    880a:	2e 2f       	mov	r18, r30
    880c:	30 32       	cpi	r19, 0x20	; 32
    880e:	33 35       	cpi	r19, 0x53	; 83
    8810:	37 39       	cpi	r19, 0x97	; 151
    8812:	3b 3d       	cpi	r19, 0xDB	; 219
    8814:	3f 41       	sbci	r19, 0x1F	; 31
    8816:	43 45       	sbci	r20, 0x53	; 83
    8818:	48 4a       	sbci	r20, 0xA8	; 168
    881a:	4c 4e       	sbci	r20, 0xEC	; 236
    881c:	50 53       	subi	r21, 0x30	; 48
    881e:	55 57       	subi	r21, 0x75	; 117
    8820:	59 5b       	subi	r21, 0xB9	; 185
    8822:	5d 5f       	subi	r21, 0xFD	; 253
    8824:	61 63       	ori	r22, 0x31	; 49
    8826:	65 67       	ori	r22, 0x75	; 117
    8828:	69 6b       	ori	r22, 0xB9	; 185
    882a:	6c 6e       	ori	r22, 0xEC	; 236
    882c:	70 71       	andi	r23, 0x10	; 16
    882e:	73 74       	andi	r23, 0x43	; 67
    8830:	75 77       	andi	r23, 0x75	; 117
    8832:	78 79       	andi	r23, 0x98	; 152
    8834:	7a 7b       	andi	r23, 0xBA	; 186
    8836:	7c 7d       	andi	r23, 0xDC	; 220
    8838:	7d 7e       	andi	r23, 0xED	; 237
    883a:	7e 7f       	andi	r23, 0xFE	; 254
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7e 7e       	andi	r23, 0xEE	; 238
    8848:	7d 7d       	andi	r23, 0xDD	; 221
    884a:	7c 7b       	andi	r23, 0xBC	; 188
    884c:	7a 79       	andi	r23, 0x9A	; 154
    884e:	78 77       	andi	r23, 0x78	; 120
    8850:	75 74       	andi	r23, 0x45	; 69
    8852:	73 71       	andi	r23, 0x13	; 19
    8854:	70 6e       	ori	r23, 0xE0	; 224
    8856:	6c 6b       	ori	r22, 0xBC	; 188
    8858:	69 67       	ori	r22, 0x79	; 121
    885a:	65 63       	ori	r22, 0x35	; 53
    885c:	61 5f       	subi	r22, 0xF1	; 241
    885e:	5d 5b       	subi	r21, 0xBD	; 189
    8860:	59 57       	subi	r21, 0x79	; 121
    8862:	55 53       	subi	r21, 0x35	; 53
    8864:	50 4e       	sbci	r21, 0xE0	; 224
    8866:	4c 4a       	sbci	r20, 0xAC	; 172
    8868:	48 45       	sbci	r20, 0x58	; 88
    886a:	43 41       	sbci	r20, 0x13	; 19
    886c:	3f 3d       	cpi	r19, 0xDF	; 223
    886e:	3b 39       	cpi	r19, 0x9B	; 155
    8870:	37 35       	cpi	r19, 0x57	; 87
    8872:	33 32       	cpi	r19, 0x23	; 35
    8874:	30 2f       	mov	r19, r16
    8876:	2e 2d       	mov	r18, r14
    8878:	2c 2b       	or	r18, r28
    887a:	2c 2d       	mov	r18, r12
    887c:	30 42       	sbci	r19, 0x20	; 32
    887e:	3d 28       	or	r3, r13
    8880:	00 e9       	ldi	r16, 0x90	; 144
    8882:	e5 fe       	sbrs	r14, 5
    8884:	d4 d7       	rcall	.+4008   	; 0x982e <print_level_score+0x2a>
    8886:	d7 d7       	rcall	.+4014   	; 0x9836 <print_level_score+0x32>
    8888:	d6 d4       	rcall	.+2476   	; 0x9236 <LBLineIntersect+0xb0>
    888a:	d2 d0       	rcall	.+420    	; 0x8a30 <waves+0x930>
    888c:	ce cc       	rjmp	.-1636   	; 0x822a <waves+0x12a>
    888e:	ca c8       	rjmp	.-3692   	; 0x7a24 <ProcessMusic+0x62>
    8890:	c6 c3       	rjmp	.+1932   	; 0x901e <LBGetNextFrame+0x42>
    8892:	c1 bf       	out	0x31, r28	; 49
    8894:	bd ba       	out	0x1d, r11	; 29
    8896:	b8 b6       	in	r11, 0x38	; 56
    8898:	b4 b1       	in	r27, 0x04	; 4
    889a:	af ad       	ldd	r26, Y+63	; 0x3f
    889c:	ab a9       	ldd	r26, Y+51	; 0x33
    889e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    88a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    88a2:	9f 9e       	mul	r9, r31
    88a4:	9c 9a       	sbi	0x13, 4	; 19
    88a6:	99 97       	sbiw	r26, 0x29	; 41
    88a8:	95 94       	asr	r9
    88aa:	93 91       	.word	0x9193	; ????
    88ac:	90 8f       	std	Z+24, r25	; 0x18
    88ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    88b0:	8b 8a       	std	Y+19, r8	; 0x13
    88b2:	89 88       	ldd	r8, Y+17	; 0x11
    88b4:	88 87       	std	Y+8, r24	; 0x08
    88b6:	86 85       	ldd	r24, Z+14	; 0x0e
    88b8:	85 84       	ldd	r8, Z+13	; 0x0d
    88ba:	84 84       	ldd	r8, Z+12	; 0x0c
    88bc:	83 83       	std	Z+3, r24	; 0x03
    88be:	83 83       	std	Z+3, r24	; 0x03
    88c0:	83 83       	std	Z+3, r24	; 0x03
    88c2:	83 83       	std	Z+3, r24	; 0x03
    88c4:	83 84       	ldd	r8, Z+11	; 0x0b
    88c6:	84 84       	ldd	r8, Z+12	; 0x0c
    88c8:	85 85       	ldd	r24, Z+13	; 0x0d
    88ca:	86 87       	std	Z+14, r24	; 0x0e
    88cc:	88 88       	ldd	r8, Y+16	; 0x10
    88ce:	89 8a       	std	Y+17, r8	; 0x11
    88d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    88d2:	8d 8f       	std	Y+29, r24	; 0x1d
    88d4:	90 91 93 94 	lds	r25, 0x9493
    88d8:	95 97       	sbiw	r26, 0x25	; 37
    88da:	99 9a       	sbi	0x13, 1	; 19
    88dc:	9c 9e       	mul	r9, r28
    88de:	9f a1       	ldd	r25, Y+39	; 0x27
    88e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    88e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    88e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    88e6:	af b1       	in	r26, 0x0f	; 15
    88e8:	b4 b6       	in	r11, 0x34	; 52
    88ea:	b8 ba       	out	0x18, r11	; 24
    88ec:	bd bf       	out	0x3d, r27	; 61
    88ee:	c1 c3       	rjmp	.+1922   	; 0x9072 <LBGetJoyPadState+0x50>
    88f0:	c6 c8       	rjmp	.-3700   	; 0x7a7e <ProcessMusic+0xbc>
    88f2:	ca cc       	rjmp	.-1644   	; 0x8288 <waves+0x188>
    88f4:	ce d0       	rcall	.+412    	; 0x8a92 <waves+0x992>
    88f6:	d2 d4       	rcall	.+2468   	; 0x929c <LBLineIntersect+0x116>
    88f8:	d6 d7       	rcall	.+4012   	; 0x98a6 <print_final_score+0x1e>
    88fa:	d7 d7       	rcall	.+4014   	; 0x98aa <print_final_score+0x22>
    88fc:	d4 fe       	sbrs	r13, 4
    88fe:	e5 e9       	ldi	r30, 0x95	; 149
    8900:	f9 f8       	.word	0xf8f9	; ????
    8902:	f9 f5       	brne	.+126    	; 0x8982 <waves+0x882>
    8904:	eb e1       	ldi	r30, 0x1B	; 27
    8906:	dd de       	rcall	.-582    	; 0x86c2 <waves+0x5c2>
    8908:	e0 e2       	ldi	r30, 0x20	; 32
    890a:	e4 e5       	ldi	r30, 0x54	; 84
    890c:	e6 e5       	ldi	r30, 0x56	; 86
    890e:	e4 e2       	ldi	r30, 0x24	; 36
    8910:	de d9       	rcall	.-3140   	; 0x7cce <ProcessMusic+0x30c>
    8912:	d2 ca       	rjmp	.-2652   	; 0x7eb8 <esmw+0x3e>
    8914:	c1 b7       	in	r28, 0x31	; 49
    8916:	ac a2       	std	Y+36, r10	; 0x24
    8918:	99 91       	ld	r25, Y+
    891a:	8a 86       	std	Y+10, r8	; 0x0a
    891c:	83 81       	ldd	r24, Z+3	; 0x03
    891e:	80 80       	ld	r8, Z
    8920:	81 82       	std	Z+1, r8	; 0x01
    8922:	83 85       	ldd	r24, Z+11	; 0x0b
    8924:	86 88       	ldd	r8, Z+22	; 0x16
    8926:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8928:	8d 8f       	std	Y+29, r24	; 0x1d
    892a:	90 92 93 95 	sts	0x9593, r9
    892e:	96 97       	sbiw	r26, 0x26	; 38
    8930:	98 99       	sbic	0x13, 0	; 19
    8932:	9a 9b       	sbis	0x13, 2	; 19
    8934:	9b 9c       	mul	r9, r11
    8936:	9d 9d       	mul	r25, r13
    8938:	9d 9e       	mul	r9, r29
    893a:	9e 9e       	mul	r9, r30
    893c:	9f 9f       	mul	r25, r31
    893e:	9f 9f       	mul	r25, r31
    8940:	9f 9f       	mul	r25, r31
    8942:	9f 9e       	mul	r9, r31
    8944:	9e 9e       	mul	r9, r30
    8946:	9d 9d       	mul	r25, r13
    8948:	9d 9c       	mul	r9, r13
    894a:	9b 9b       	sbis	0x13, 3	; 19
    894c:	9a 99       	sbic	0x13, 2	; 19
    894e:	98 97       	sbiw	r26, 0x28	; 40
    8950:	96 95       	lsr	r25
    8952:	93 92       	.word	0x9293	; ????
    8954:	90 8f       	std	Z+24, r25	; 0x18
    8956:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8958:	8a 88       	ldd	r8, Y+18	; 0x12
    895a:	86 85       	ldd	r24, Z+14	; 0x0e
    895c:	83 82       	std	Z+3, r8	; 0x03
    895e:	81 80       	ldd	r8, Z+1	; 0x01
    8960:	80 81       	ld	r24, Z
    8962:	83 86       	std	Z+11, r8	; 0x0b
    8964:	8a 91       	ld	r24, -Y
    8966:	99 a2       	std	Y+33, r9	; 0x21
    8968:	ac b7       	in	r26, 0x3c	; 60
    896a:	c1 ca       	rjmp	.-2686   	; 0x7eee <esmw+0x74>
    896c:	d2 d9       	rcall	.-3164   	; 0x7d12 <ProcessMusic+0x350>
    896e:	de e2       	ldi	r29, 0x2E	; 46
    8970:	e4 e5       	ldi	r30, 0x54	; 84
    8972:	e6 e5       	ldi	r30, 0x56	; 86
    8974:	e4 e2       	ldi	r30, 0x24	; 36
    8976:	e0 de       	rcall	.-576    	; 0x8738 <waves+0x638>
    8978:	dd e1       	ldi	r29, 0x1D	; 29
    897a:	eb f5       	brvc	.+122    	; 0x89f6 <waves+0x8f6>
    897c:	f9 f8       	.word	0xf8f9	; ????
    897e:	f9 00       	.word	0x00f9	; ????
    8980:	07 08       	sbc	r0, r7
    8982:	07 0b       	sbc	r16, r23
    8984:	15 1f       	adc	r17, r21
    8986:	23 22       	and	r2, r19
    8988:	20 1e       	adc	r2, r16
    898a:	1c 1b       	sub	r17, r28
    898c:	1a 1b       	sub	r17, r26
    898e:	1c 1e       	adc	r1, r28
    8990:	22 27       	eor	r18, r18
    8992:	2e 36       	cpi	r18, 0x6E	; 110
    8994:	3f 49       	sbci	r19, 0x9F	; 159
    8996:	54 5e       	subi	r21, 0xE4	; 228
    8998:	67 6f       	ori	r22, 0xF7	; 247
    899a:	76 7a       	andi	r23, 0xA6	; 166
    899c:	7e 7f       	andi	r23, 0xFE	; 254
    899e:	7f 7f       	andi	r23, 0xFF	; 255
    89a0:	7f 7e       	andi	r23, 0xEF	; 239
    89a2:	7d 7b       	andi	r23, 0xBD	; 189
    89a4:	7a 78       	andi	r23, 0x8A	; 138
    89a6:	76 74       	andi	r23, 0x46	; 70
    89a8:	73 71       	andi	r23, 0x13	; 19
    89aa:	70 6e       	ori	r23, 0xE0	; 224
    89ac:	6d 6b       	ori	r22, 0xBD	; 189
    89ae:	6a 69       	ori	r22, 0x9A	; 154
    89b0:	68 67       	ori	r22, 0x78	; 120
    89b2:	66 65       	ori	r22, 0x56	; 86
    89b4:	65 64       	ori	r22, 0x45	; 69
    89b6:	64 63       	ori	r22, 0x34	; 52
    89b8:	63 62       	ori	r22, 0x23	; 35
    89ba:	62 62       	ori	r22, 0x22	; 34
    89bc:	61 61       	ori	r22, 0x11	; 17
    89be:	61 61       	ori	r22, 0x11	; 17
    89c0:	61 61       	ori	r22, 0x11	; 17
    89c2:	61 62       	ori	r22, 0x21	; 33
    89c4:	62 62       	ori	r22, 0x22	; 34
    89c6:	63 63       	ori	r22, 0x33	; 51
    89c8:	63 64       	ori	r22, 0x43	; 67
    89ca:	65 65       	ori	r22, 0x55	; 85
    89cc:	66 67       	ori	r22, 0x76	; 118
    89ce:	68 69       	ori	r22, 0x98	; 152
    89d0:	6a 6b       	ori	r22, 0xBA	; 186
    89d2:	6d 6e       	ori	r22, 0xED	; 237
    89d4:	70 71       	andi	r23, 0x10	; 16
    89d6:	73 74       	andi	r23, 0x43	; 67
    89d8:	76 78       	andi	r23, 0x86	; 134
    89da:	7a 7b       	andi	r23, 0xBA	; 186
    89dc:	7d 7e       	andi	r23, 0xED	; 237
    89de:	7f 7f       	andi	r23, 0xFF	; 255
    89e0:	7f 7f       	andi	r23, 0xFF	; 255
    89e2:	7e 7a       	andi	r23, 0xAE	; 174
    89e4:	76 6f       	ori	r23, 0xF6	; 246
    89e6:	67 5e       	subi	r22, 0xE7	; 231
    89e8:	54 49       	sbci	r21, 0x94	; 148
    89ea:	3f 36       	cpi	r19, 0x6F	; 111
    89ec:	2e 27       	eor	r18, r30
    89ee:	22 1e       	adc	r2, r18
    89f0:	1c 1b       	sub	r17, r28
    89f2:	1a 1b       	sub	r17, r26
    89f4:	1c 1e       	adc	r1, r28
    89f6:	20 22       	and	r2, r16
    89f8:	23 1f       	adc	r18, r19
    89fa:	15 0b       	sbc	r17, r21
    89fc:	07 08       	sbc	r0, r7
    89fe:	07 00       	.word	0x0007	; ????
    8a00:	1f 31       	cpi	r17, 0x1F	; 31
    8a02:	3d 44       	sbci	r19, 0x4D	; 77
    8a04:	4e 53       	subi	r20, 0x3E	; 62
    8a06:	54 56       	subi	r21, 0x64	; 100
    8a08:	5a 5f       	subi	r21, 0xFA	; 250
    8a0a:	64 69       	ori	r22, 0x94	; 148
    8a0c:	6e 74       	andi	r22, 0x4E	; 78
    8a0e:	76 79       	andi	r23, 0x96	; 150
    8a10:	7c 7f       	andi	r23, 0xFC	; 252
    8a12:	7f 7f       	andi	r23, 0xFF	; 255
    8a14:	7f 7f       	andi	r23, 0xFF	; 255
    8a16:	7f 7f       	andi	r23, 0xFF	; 255
    8a18:	7f 7f       	andi	r23, 0xFF	; 255
    8a1a:	7f 7f       	andi	r23, 0xFF	; 255
    8a1c:	7f 7f       	andi	r23, 0xFF	; 255
    8a1e:	7f 7f       	andi	r23, 0xFF	; 255
    8a20:	7f 7f       	andi	r23, 0xFF	; 255
    8a22:	7f 7f       	andi	r23, 0xFF	; 255
    8a24:	7f 7f       	andi	r23, 0xFF	; 255
    8a26:	7f 7f       	andi	r23, 0xFF	; 255
    8a28:	7f 7f       	andi	r23, 0xFF	; 255
    8a2a:	7f 7f       	andi	r23, 0xFF	; 255
    8a2c:	7f 7f       	andi	r23, 0xFF	; 255
    8a2e:	7f 7f       	andi	r23, 0xFF	; 255
    8a30:	7f 7f       	andi	r23, 0xFF	; 255
    8a32:	7f 7f       	andi	r23, 0xFF	; 255
    8a34:	7f 7f       	andi	r23, 0xFF	; 255
    8a36:	7f 7f       	andi	r23, 0xFF	; 255
    8a38:	7f 7f       	andi	r23, 0xFF	; 255
    8a3a:	7f 7f       	andi	r23, 0xFF	; 255
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7f 7f       	andi	r23, 0xFF	; 255
    8a48:	7f 7f       	andi	r23, 0xFF	; 255
    8a4a:	7f 7f       	andi	r23, 0xFF	; 255
    8a4c:	7f 7f       	andi	r23, 0xFF	; 255
    8a4e:	7f 7f       	andi	r23, 0xFF	; 255
    8a50:	7f 7f       	andi	r23, 0xFF	; 255
    8a52:	7f 7f       	andi	r23, 0xFF	; 255
    8a54:	7f 7f       	andi	r23, 0xFF	; 255
    8a56:	7f 7f       	andi	r23, 0xFF	; 255
    8a58:	7f 7f       	andi	r23, 0xFF	; 255
    8a5a:	7f 7f       	andi	r23, 0xFF	; 255
    8a5c:	7f 7f       	andi	r23, 0xFF	; 255
    8a5e:	7f 7f       	andi	r23, 0xFF	; 255
    8a60:	7f 7f       	andi	r23, 0xFF	; 255
    8a62:	7f 7f       	andi	r23, 0xFF	; 255
    8a64:	7f 7f       	andi	r23, 0xFF	; 255
    8a66:	7f 7f       	andi	r23, 0xFF	; 255
    8a68:	7f 7f       	andi	r23, 0xFF	; 255
    8a6a:	7f 7f       	andi	r23, 0xFF	; 255
    8a6c:	7f 7f       	andi	r23, 0xFF	; 255
    8a6e:	7f 7f       	andi	r23, 0xFF	; 255
    8a70:	7f 7f       	andi	r23, 0xFF	; 255
    8a72:	7f 7f       	andi	r23, 0xFF	; 255
    8a74:	7f 7f       	andi	r23, 0xFF	; 255
    8a76:	7f 7f       	andi	r23, 0xFF	; 255
    8a78:	7f 7f       	andi	r23, 0xFF	; 255
    8a7a:	7f 7c       	andi	r23, 0xCF	; 207
    8a7c:	78 71       	andi	r23, 0x18	; 24
    8a7e:	68 4c       	sbci	r22, 0xC8	; 200
    8a80:	2c 1c       	adc	r2, r12
    8a82:	12 0c       	add	r1, r2
    8a84:	0a 0b       	sbc	r16, r26
    8a86:	0a 05       	cpc	r16, r10
    8a88:	fd f3       	brhs	.-2      	; 0x8a88 <waves+0x988>
    8a8a:	e9 df       	rcall	.-46     	; 0x8a5e <waves+0x95e>
    8a8c:	d4 ca       	rjmp	.-2648   	; 0x8036 <steptable+0x12e>
    8a8e:	c0 b7       	in	r28, 0x30	; 48
    8a90:	ae a6       	std	Y+46, r10	; 0x2e
    8a92:	9e 97       	sbiw	r26, 0x2e	; 46
    8a94:	91 8b       	std	Z+17, r25	; 0x11
    8a96:	86 85       	ldd	r24, Z+14	; 0x0e
    8a98:	82 80       	ldd	r8, Z+2	; 0x02
    8a9a:	80 80       	ld	r8, Z
    8a9c:	80 80       	ld	r8, Z
    8a9e:	80 80       	ld	r8, Z
    8aa0:	80 80       	ld	r8, Z
    8aa2:	80 80       	ld	r8, Z
    8aa4:	80 80       	ld	r8, Z
    8aa6:	80 80       	ld	r8, Z
    8aa8:	80 80       	ld	r8, Z
    8aaa:	80 80       	ld	r8, Z
    8aac:	80 80       	ld	r8, Z
    8aae:	80 80       	ld	r8, Z
    8ab0:	80 80       	ld	r8, Z
    8ab2:	80 80       	ld	r8, Z
    8ab4:	80 80       	ld	r8, Z
    8ab6:	80 80       	ld	r8, Z
    8ab8:	80 80       	ld	r8, Z
    8aba:	80 80       	ld	r8, Z
    8abc:	80 80       	ld	r8, Z
    8abe:	80 80       	ld	r8, Z
    8ac0:	80 80       	ld	r8, Z
    8ac2:	80 80       	ld	r8, Z
    8ac4:	80 80       	ld	r8, Z
    8ac6:	80 80       	ld	r8, Z
    8ac8:	80 80       	ld	r8, Z
    8aca:	80 80       	ld	r8, Z
    8acc:	80 80       	ld	r8, Z
    8ace:	80 80       	ld	r8, Z
    8ad0:	80 80       	ld	r8, Z
    8ad2:	80 80       	ld	r8, Z
    8ad4:	80 80       	ld	r8, Z
    8ad6:	80 80       	ld	r8, Z
    8ad8:	80 80       	ld	r8, Z
    8ada:	80 80       	ld	r8, Z
    8adc:	80 80       	ld	r8, Z
    8ade:	80 80       	ld	r8, Z
    8ae0:	80 80       	ld	r8, Z
    8ae2:	80 80       	ld	r8, Z
    8ae4:	80 80       	ld	r8, Z
    8ae6:	80 80       	ld	r8, Z
    8ae8:	80 80       	ld	r8, Z
    8aea:	80 80       	ld	r8, Z
    8aec:	80 80       	ld	r8, Z
    8aee:	80 80       	ld	r8, Z
    8af0:	80 80       	ld	r8, Z
    8af2:	80 80       	ld	r8, Z
    8af4:	80 87       	std	Z+8, r24	; 0x08
    8af6:	91 9d       	mul	r25, r1
    8af8:	ac c4       	rjmp	.+2392   	; 0x9452 <init_shot_state+0x22>
    8afa:	cb d4       	rcall	.+2454   	; 0x9492 <set_shot_animations+0x28>
    8afc:	dd f2       	brhs	.-74     	; 0x8ab4 <waves+0x9b4>
    8afe:	fa fa       	.word	0xfafa	; ????

00008b00 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8b00:	90 91 c1 0b 	lds	r25, 0x0BC1
    8b04:	e0 e9       	ldi	r30, 0x90	; 144
    8b06:	fa e0       	ldi	r31, 0x0A	; 10
    8b08:	80 e0       	ldi	r24, 0x00	; 0
    8b0a:	89 17       	cp	r24, r25
    8b0c:	49 f0       	breq	.+18     	; 0x8b20 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    8b0e:	a0 81       	ld	r26, Z
    8b10:	b1 81       	ldd	r27, Z+1	; 0x01
    8b12:	a0 5e       	subi	r26, 0xE0	; 224
    8b14:	be 4f       	sbci	r27, 0xFE	; 254
    8b16:	22 81       	ldd	r18, Z+2	; 0x02
    8b18:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8b1a:	8f 5f       	subi	r24, 0xFF	; 255
    8b1c:	33 96       	adiw	r30, 0x03	; 3
    8b1e:	f5 cf       	rjmp	.-22     	; 0x8b0a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    8b20:	08 95       	ret

00008b22 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    8b22:	80 93 00 01 	sts	0x0100, r24
    8b26:	08 95       	ret

00008b28 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8b28:	2f 92       	push	r2
    8b2a:	3f 92       	push	r3
    8b2c:	4f 92       	push	r4
    8b2e:	5f 92       	push	r5
    8b30:	6f 92       	push	r6
    8b32:	7f 92       	push	r7
    8b34:	8f 92       	push	r8
    8b36:	9f 92       	push	r9
    8b38:	af 92       	push	r10
    8b3a:	bf 92       	push	r11
    8b3c:	cf 92       	push	r12
    8b3e:	df 92       	push	r13
    8b40:	ef 92       	push	r14
    8b42:	ff 92       	push	r15
    8b44:	0f 93       	push	r16
    8b46:	1f 93       	push	r17
    8b48:	cf 93       	push	r28
    8b4a:	df 93       	push	r29
    8b4c:	00 d0       	rcall	.+0      	; 0x8b4e <ProcessSprites+0x26>
    8b4e:	1f 92       	push	r1
    8b50:	cd b7       	in	r28, 0x3d	; 61
    8b52:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    8b54:	10 92 c1 0b 	sts	0x0BC1, r1
		if(!spritesOn) return;
    8b58:	80 91 00 01 	lds	r24, 0x0100
    8b5c:	88 23       	and	r24, r24
    8b5e:	09 f4       	brne	.+2      	; 0x8b62 <ProcessSprites+0x3a>
    8b60:	a1 c0       	rjmp	.+322    	; 0x8ca4 <ProcessSprites+0x17c>
    8b62:	e8 e6       	ldi	r30, 0x68	; 104
    8b64:	ce 2e       	mov	r12, r30
    8b66:	e4 e0       	ldi	r30, 0x04	; 4
    8b68:	de 2e       	mov	r13, r30
    8b6a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    8b6c:	f6 01       	movw	r30, r12
    8b6e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8b70:	80 3f       	cpi	r24, 0xF0	; 240
    8b72:	09 f4       	brne	.+2      	; 0x8b76 <ProcessSprites+0x4e>
    8b74:	79 c0       	rjmp	.+242    	; 0x8c68 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8b76:	91 81       	ldd	r25, Z+1	; 0x01
    8b78:	29 2f       	mov	r18, r25
    8b7a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8b7c:	28 2e       	mov	r2, r24
    8b7e:	26 94       	lsr	r2
    8b80:	26 94       	lsr	r2
    8b82:	26 94       	lsr	r2
				dx=ssx&0x7;
    8b84:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8b86:	19 f0       	breq	.+6      	; 0x8b8e <ProcessSprites+0x66>
    8b88:	72 e0       	ldi	r23, 0x02	; 2
    8b8a:	47 2e       	mov	r4, r23
    8b8c:	02 c0       	rjmp	.+4      	; 0x8b92 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8b8e:	44 24       	eor	r4, r4
    8b90:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8b92:	63 e0       	ldi	r22, 0x03	; 3
    8b94:	36 95       	lsr	r19
    8b96:	27 95       	ror	r18
    8b98:	6a 95       	dec	r22
    8b9a:	e1 f7       	brne	.-8      	; 0x8b94 <ProcessSprites+0x6c>
    8b9c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    8b9e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    8ba0:	19 f0       	breq	.+6      	; 0x8ba8 <ProcessSprites+0x80>
    8ba2:	52 e0       	ldi	r21, 0x02	; 2
    8ba4:	55 2e       	mov	r5, r21
    8ba6:	02 c0       	rjmp	.+4      	; 0x8bac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    8ba8:	55 24       	eor	r5, r5
    8baa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8bac:	29 2f       	mov	r18, r25
    8bae:	30 e0       	ldi	r19, 0x00	; 0
    8bb0:	32 2f       	mov	r19, r18
    8bb2:	22 27       	eor	r18, r18
    8bb4:	a9 01       	movw	r20, r18
    8bb6:	48 0f       	add	r20, r24
    8bb8:	51 1d       	adc	r21, r1
    8bba:	5b 83       	std	Y+3, r21	; 0x03
    8bbc:	4a 83       	std	Y+2, r20	; 0x02
    8bbe:	e1 2c       	mov	r14, r1
    8bc0:	f1 2c       	mov	r15, r1
    8bc2:	94 ee       	ldi	r25, 0xE4	; 228
    8bc4:	93 0d       	add	r25, r3
    8bc6:	99 83       	std	Y+1, r25	; 0x01
    8bc8:	03 2d       	mov	r16, r3
    8bca:	0e 0d       	add	r16, r14
    8bcc:	0c 31       	cpi	r16, 0x1C	; 28
    8bce:	10 f0       	brcs	.+4      	; 0x8bd4 <ProcessSprites+0xac>
    8bd0:	09 81       	ldd	r16, Y+1	; 0x01
    8bd2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    8bd4:	5e e1       	ldi	r21, 0x1E	; 30
    8bd6:	05 9f       	mul	r16, r21
    8bd8:	80 01       	movw	r16, r0
    8bda:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8bdc:	be 2c       	mov	r11, r14
    8bde:	aa 24       	eor	r10, r10
    8be0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8be2:	ed e1       	ldi	r30, 0x1D	; 29
    8be4:	e7 15       	cp	r30, r7
    8be6:	18 f4       	brcc	.+6      	; 0x8bee <ProcessSprites+0xc6>
    8be8:	82 ee       	ldi	r24, 0xE2	; 226
    8bea:	87 0d       	add	r24, r7
    8bec:	01 c0       	rjmp	.+2      	; 0x8bf0 <ProcessSprites+0xc8>
    8bee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    8bf0:	a8 01       	movw	r20, r16
    8bf2:	48 0f       	add	r20, r24
    8bf4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    8bf6:	ca 01       	movw	r24, r20
    8bf8:	80 5e       	subi	r24, 0xE0	; 224
    8bfa:	9e 4f       	sbci	r25, 0xFE	; 254
    8bfc:	4c 01       	movw	r8, r24
    8bfe:	fc 01       	movw	r30, r24
    8c00:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    8c02:	88 31       	cpi	r24, 0x18	; 24
    8c04:	e0 f0       	brcs	.+56     	; 0x8c3e <ProcessSprites+0x116>
    8c06:	60 91 c1 0b 	lds	r22, 0x0BC1
    8c0a:	68 31       	cpi	r22, 0x18	; 24
    8c0c:	f8 f4       	brcc	.+62     	; 0x8c4c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    8c0e:	26 2f       	mov	r18, r22
    8c10:	30 e0       	ldi	r19, 0x00	; 0
    8c12:	f9 01       	movw	r30, r18
    8c14:	ee 0f       	add	r30, r30
    8c16:	ff 1f       	adc	r31, r31
    8c18:	e2 0f       	add	r30, r18
    8c1a:	f3 1f       	adc	r31, r19
    8c1c:	e0 57       	subi	r30, 0x70	; 112
    8c1e:	f5 4f       	sbci	r31, 0xF5	; 245
    8c20:	51 83       	std	Z+1, r21	; 0x01
    8c22:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8c24:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    8c26:	0e 94 9e 36 	call	0x6d3c	; 0x6d3c <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    8c2a:	80 91 c1 0b 	lds	r24, 0x0BC1
    8c2e:	f4 01       	movw	r30, r8
    8c30:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    8c32:	91 e0       	ldi	r25, 0x01	; 1
    8c34:	98 0f       	add	r25, r24
    8c36:	90 93 c1 0b 	sts	0x0BC1, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    8c3a:	88 31       	cpi	r24, 0x18	; 24
    8c3c:	38 f4       	brcc	.+14     	; 0x8c4c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8c3e:	2a 81       	ldd	r18, Y+2	; 0x02
    8c40:	3b 81       	ldd	r19, Y+3	; 0x03
    8c42:	a5 01       	movw	r20, r10
    8c44:	68 2f       	mov	r22, r24
    8c46:	86 2d       	mov	r24, r6
    8c48:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <BlitSprite>
    8c4c:	ff ef       	ldi	r31, 0xFF	; 255
    8c4e:	af 1a       	sub	r10, r31
    8c50:	bf 0a       	sbc	r11, r31
    8c52:	73 94       	inc	r7
    8c54:	87 2d       	mov	r24, r7
    8c56:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8c58:	84 15       	cp	r24, r4
    8c5a:	18 f2       	brcs	.-122    	; 0x8be2 <ProcessSprites+0xba>
    8c5c:	4f ef       	ldi	r20, 0xFF	; 255
    8c5e:	e4 1a       	sub	r14, r20
    8c60:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8c62:	e5 14       	cp	r14, r5
    8c64:	08 f4       	brcc	.+2      	; 0x8c68 <ProcessSprites+0x140>
    8c66:	b0 cf       	rjmp	.-160    	; 0x8bc8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    8c68:	63 94       	inc	r6
    8c6a:	84 e0       	ldi	r24, 0x04	; 4
    8c6c:	c8 0e       	add	r12, r24
    8c6e:	d1 1c       	adc	r13, r1
    8c70:	9a e0       	ldi	r25, 0x0A	; 10
    8c72:	69 12       	cpse	r6, r25
    8c74:	7b cf       	rjmp	.-266    	; 0x8b6c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    8c76:	0f 90       	pop	r0
    8c78:	0f 90       	pop	r0
    8c7a:	0f 90       	pop	r0
    8c7c:	df 91       	pop	r29
    8c7e:	cf 91       	pop	r28
    8c80:	1f 91       	pop	r17
    8c82:	0f 91       	pop	r16
    8c84:	ff 90       	pop	r15
    8c86:	ef 90       	pop	r14
    8c88:	df 90       	pop	r13
    8c8a:	cf 90       	pop	r12
    8c8c:	bf 90       	pop	r11
    8c8e:	af 90       	pop	r10
    8c90:	9f 90       	pop	r9
    8c92:	8f 90       	pop	r8
    8c94:	7f 90       	pop	r7
    8c96:	6f 90       	pop	r6
    8c98:	5f 90       	pop	r5
    8c9a:	4f 90       	pop	r4
    8c9c:	3f 90       	pop	r3
    8c9e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    8ca0:	0c 94 80 45 	jmp	0x8b00	; 0x8b00 <RestoreBackground>

	}
    8ca4:	0f 90       	pop	r0
    8ca6:	0f 90       	pop	r0
    8ca8:	0f 90       	pop	r0
    8caa:	df 91       	pop	r29
    8cac:	cf 91       	pop	r28
    8cae:	1f 91       	pop	r17
    8cb0:	0f 91       	pop	r16
    8cb2:	ff 90       	pop	r15
    8cb4:	ef 90       	pop	r14
    8cb6:	df 90       	pop	r13
    8cb8:	cf 90       	pop	r12
    8cba:	bf 90       	pop	r11
    8cbc:	af 90       	pop	r10
    8cbe:	9f 90       	pop	r9
    8cc0:	8f 90       	pop	r8
    8cc2:	7f 90       	pop	r7
    8cc4:	6f 90       	pop	r6
    8cc6:	5f 90       	pop	r5
    8cc8:	4f 90       	pop	r4
    8cca:	3f 90       	pop	r3
    8ccc:	2f 90       	pop	r2
    8cce:	08 95       	ret

00008cd0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    8cd0:	df 92       	push	r13
    8cd2:	ef 92       	push	r14
    8cd4:	ff 92       	push	r15
    8cd6:	0f 93       	push	r16
    8cd8:	1f 93       	push	r17
    8cda:	cf 93       	push	r28
    8cdc:	df 93       	push	r29
    8cde:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8ce0:	fb 01       	movw	r30, r22
    8ce2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8ce4:	31 96       	adiw	r30, 0x01	; 1
    8ce6:	64 91       	lpm	r22, Z
    8ce8:	5f ef       	ldi	r21, 0xFF	; 255
    8cea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    8cec:	24 2f       	mov	r18, r20
    8cee:	21 70       	andi	r18, 0x01	; 1
    8cf0:	40 ff       	sbrs	r20, 0
    8cf2:	04 c0       	rjmp	.+8      	; 0x8cfc <MapSprite2+0x2c>
			x=(mapWidth-1);
    8cf4:	95 2f       	mov	r25, r21
			dx=-1;
    8cf6:	ff 24       	eor	r15, r15
    8cf8:	fa 94       	dec	r15
    8cfa:	03 c0       	rjmp	.+6      	; 0x8d02 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    8cfc:	ff 24       	eor	r15, r15
    8cfe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8d00:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8d02:	41 ff       	sbrs	r20, 1
    8d04:	05 c0       	rjmp	.+10     	; 0x8d10 <MapSprite2+0x40>
			y=(mapHeight-1);
    8d06:	7f ef       	ldi	r23, 0xFF	; 255
    8d08:	76 0f       	add	r23, r22
			dy=-1;
    8d0a:	ee 24       	eor	r14, r14
    8d0c:	ea 94       	dec	r14
    8d0e:	03 c0       	rjmp	.+6      	; 0x8d16 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    8d10:	ee 24       	eor	r14, r14
    8d12:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    8d14:	70 e0       	ldi	r23, 0x00	; 0
    8d16:	21 11       	cpse	r18, r1
    8d18:	01 c0       	rjmp	.+2      	; 0x8d1c <MapSprite2+0x4c>
    8d1a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8d1c:	00 e0       	ldi	r16, 0x00	; 0
    8d1e:	06 17       	cp	r16, r22
    8d20:	09 f1       	breq	.+66     	; 0x8d64 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8d22:	71 03       	mulsu	r23, r17
    8d24:	e0 01       	movw	r28, r0
    8d26:	11 24       	eor	r1, r1
    8d28:	d8 2e       	mov	r13, r24
    8d2a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    8d2c:	8d 15       	cp	r24, r13
    8d2e:	b1 f0       	breq	.+44     	; 0x8d5c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8d30:	9e 01       	movw	r18, r28
    8d32:	29 0f       	add	r18, r25
    8d34:	31 1d       	adc	r19, r1
    8d36:	97 fd       	sbrc	r25, 7
    8d38:	3a 95       	dec	r19
    8d3a:	2e 5f       	subi	r18, 0xFE	; 254
    8d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    8d3e:	fd 01       	movw	r30, r26
    8d40:	e2 0f       	add	r30, r18
    8d42:	f3 1f       	adc	r31, r19
    8d44:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    8d46:	34 e0       	ldi	r19, 0x04	; 4
    8d48:	83 9f       	mul	r24, r19
    8d4a:	f0 01       	movw	r30, r0
    8d4c:	11 24       	eor	r1, r1
    8d4e:	e8 59       	subi	r30, 0x98	; 152
    8d50:	fb 4f       	sbci	r31, 0xFB	; 251
    8d52:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    8d54:	8f 5f       	subi	r24, 0xFF	; 255
    8d56:	43 83       	std	Z+3, r20	; 0x03
    8d58:	9f 0d       	add	r25, r15
    8d5a:	e8 cf       	rjmp	.-48     	; 0x8d2c <MapSprite2+0x5c>
    8d5c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8d5e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8d60:	95 2f       	mov	r25, r21
    8d62:	dd cf       	rjmp	.-70     	; 0x8d1e <MapSprite2+0x4e>
	    }
	}
    8d64:	df 91       	pop	r29
    8d66:	cf 91       	pop	r28
    8d68:	1f 91       	pop	r17
    8d6a:	0f 91       	pop	r16
    8d6c:	ff 90       	pop	r15
    8d6e:	ef 90       	pop	r14
    8d70:	df 90       	pop	r13
    8d72:	08 95       	ret

00008d74 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    8d74:	0f 93       	push	r16
    8d76:	cf 93       	push	r28
    8d78:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    8d7a:	30 e0       	ldi	r19, 0x00	; 0
    8d7c:	30 17       	cp	r19, r16
    8d7e:	e1 f0       	breq	.+56     	; 0x8db8 <MoveSprite+0x44>
    8d80:	b4 2f       	mov	r27, r20
    8d82:	a0 e2       	ldi	r26, 0x20	; 32
    8d84:	a4 0f       	add	r26, r20
    8d86:	78 2f       	mov	r23, r24
    8d88:	72 0f       	add	r23, r18
    8d8a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    8d8c:	87 17       	cp	r24, r23
    8d8e:	81 f0       	breq	.+32     	; 0x8db0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    8d90:	c4 e0       	ldi	r28, 0x04	; 4
    8d92:	8c 9f       	mul	r24, r28
    8d94:	f0 01       	movw	r30, r0
    8d96:	11 24       	eor	r1, r1
    8d98:	e8 59       	subi	r30, 0x98	; 152
    8d9a:	fb 4f       	sbci	r31, 0xFB	; 251
    8d9c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    8d9e:	41 3e       	cpi	r20, 0xE1	; 225
    8da0:	51 05       	cpc	r21, r1
    8da2:	14 f0       	brlt	.+4      	; 0x8da8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    8da4:	a1 83       	std	Z+1, r26	; 0x01
    8da6:	01 c0       	rjmp	.+2      	; 0x8daa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    8da8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    8daa:	8f 5f       	subi	r24, 0xFF	; 255
    8dac:	98 5f       	subi	r25, 0xF8	; 248
    8dae:	ee cf       	rjmp	.-36     	; 0x8d8c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    8db0:	3f 5f       	subi	r19, 0xFF	; 255
    8db2:	48 5f       	subi	r20, 0xF8	; 248
    8db4:	5f 4f       	sbci	r21, 0xFF	; 255
    8db6:	e2 cf       	rjmp	.-60     	; 0x8d7c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    8db8:	cf 91       	pop	r28
    8dba:	0f 91       	pop	r16
    8dbc:	08 95       	ret

00008dbe <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    8dbe:	08 95       	ret

00008dc0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8dc0:	e8 e6       	ldi	r30, 0x68	; 104
    8dc2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8dc4:	80 ef       	ldi	r24, 0xF0	; 240
    8dc6:	80 83       	st	Z, r24
    8dc8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8dca:	94 e0       	ldi	r25, 0x04	; 4
    8dcc:	e0 39       	cpi	r30, 0x90	; 144
    8dce:	f9 07       	cpc	r31, r25
    8dd0:	d1 f7       	brne	.-12     	; 0x8dc6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    8dd2:	08 95       	ret

00008dd4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    8dd4:	4f 92       	push	r4
    8dd6:	5f 92       	push	r5
    8dd8:	6f 92       	push	r6
    8dda:	7f 92       	push	r7
    8ddc:	8f 92       	push	r8
    8dde:	9f 92       	push	r9
    8de0:	af 92       	push	r10
    8de2:	bf 92       	push	r11
    8de4:	cf 92       	push	r12
    8de6:	df 92       	push	r13
    8de8:	ef 92       	push	r14
    8dea:	ff 92       	push	r15
    8dec:	0f 93       	push	r16
    8dee:	1f 93       	push	r17
    8df0:	cf 93       	push	r28
    8df2:	df 93       	push	r29
    8df4:	68 2e       	mov	r6, r24
    8df6:	56 2e       	mov	r5, r22
    8df8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    8dfa:	fa 01       	movw	r30, r20
    8dfc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    8dfe:	31 96       	adiw	r30, 0x01	; 1
    8e00:	84 90       	lpm	r8, Z
    8e02:	c7 2c       	mov	r12, r7
    8e04:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8e06:	00 e0       	ldi	r16, 0x00	; 0
    8e08:	10 e0       	ldi	r17, 0x00	; 0
    8e0a:	91 2c       	mov	r9, r1
    8e0c:	98 14       	cp	r9, r8
    8e0e:	f1 f0       	breq	.+60     	; 0x8e4c <DrawMap2+0x78>
    8e10:	c0 e0       	ldi	r28, 0x00	; 0
    8e12:	d0 e0       	ldi	r29, 0x00	; 0
    8e14:	58 01       	movw	r10, r16
    8e16:	f2 e0       	ldi	r31, 0x02	; 2
    8e18:	af 0e       	add	r10, r31
    8e1a:	b1 1c       	adc	r11, r1
    8e1c:	49 2c       	mov	r4, r9
    8e1e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    8e20:	c7 15       	cp	r28, r7
    8e22:	80 f4       	brcc	.+32     	; 0x8e44 <DrawMap2+0x70>
    8e24:	95 01       	movw	r18, r10
    8e26:	2c 0f       	add	r18, r28
    8e28:	3d 1f       	adc	r19, r29
    8e2a:	f7 01       	movw	r30, r14
    8e2c:	e2 0f       	add	r30, r18
    8e2e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8e30:	24 91       	lpm	r18, Z
    8e32:	42 2f       	mov	r20, r18
    8e34:	50 e0       	ldi	r21, 0x00	; 0
    8e36:	64 2d       	mov	r22, r4
    8e38:	8c 2f       	mov	r24, r28
    8e3a:	86 0d       	add	r24, r6
    8e3c:	0e 94 63 39 	call	0x72c6	; 0x72c6 <SetTile>
    8e40:	21 96       	adiw	r28, 0x01	; 1
    8e42:	ee cf       	rjmp	.-36     	; 0x8e20 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8e44:	93 94       	inc	r9
    8e46:	0c 0d       	add	r16, r12
    8e48:	1d 1d       	adc	r17, r13
    8e4a:	e0 cf       	rjmp	.-64     	; 0x8e0c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    8e4c:	df 91       	pop	r29
    8e4e:	cf 91       	pop	r28
    8e50:	1f 91       	pop	r17
    8e52:	0f 91       	pop	r16
    8e54:	ff 90       	pop	r15
    8e56:	ef 90       	pop	r14
    8e58:	df 90       	pop	r13
    8e5a:	cf 90       	pop	r12
    8e5c:	bf 90       	pop	r11
    8e5e:	af 90       	pop	r10
    8e60:	9f 90       	pop	r9
    8e62:	8f 90       	pop	r8
    8e64:	7f 90       	pop	r7
    8e66:	6f 90       	pop	r6
    8e68:	5f 90       	pop	r5
    8e6a:	4f 90       	pop	r4
    8e6c:	08 95       	ret

00008e6e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    8e6e:	df 92       	push	r13
    8e70:	ef 92       	push	r14
    8e72:	ff 92       	push	r15
    8e74:	0f 93       	push	r16
    8e76:	1f 93       	push	r17
    8e78:	cf 93       	push	r28
    8e7a:	df 93       	push	r29
    8e7c:	f6 2e       	mov	r15, r22
    8e7e:	04 2f       	mov	r16, r20
    8e80:	d2 2e       	mov	r13, r18
    8e82:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    8e84:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8e86:	8a e0       	ldi	r24, 0x0A	; 10
    8e88:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    8e8a:	01 11       	cpse	r16, r1
    8e8c:	02 c0       	rjmp	.+4      	; 0x8e92 <PrintByte+0x24>
    8e8e:	11 11       	cpse	r17, r1
    8e90:	07 c0       	rjmp	.+14     	; 0x8ea0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8e92:	80 2f       	mov	r24, r16
    8e94:	6e 2d       	mov	r22, r14
    8e96:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    8e9a:	40 e1       	ldi	r20, 0x10	; 16
    8e9c:	49 0f       	add	r20, r25
    8e9e:	05 c0       	rjmp	.+10     	; 0x8eaa <PrintByte+0x3c>
		}else{
			if(zeropad){
    8ea0:	dd 20       	and	r13, r13
    8ea2:	11 f0       	breq	.+4      	; 0x8ea8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    8ea4:	40 e1       	ldi	r20, 0x10	; 16
    8ea6:	01 c0       	rjmp	.+2      	; 0x8eaa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    8ea8:	40 e0       	ldi	r20, 0x00	; 0
    8eaa:	6f 2d       	mov	r22, r15
    8eac:	8c 2f       	mov	r24, r28
    8eae:	0e 94 5f 39 	call	0x72be	; 0x72be <SetFont>
			}
		}
		val=val/10;
    8eb2:	80 2f       	mov	r24, r16
    8eb4:	6e 2d       	mov	r22, r14
    8eb6:	0e 94 71 60 	call	0xc0e2	; 0xc0e2 <__udivmodqi4>
    8eba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    8ebc:	1f 5f       	subi	r17, 0xFF	; 255
    8ebe:	21 97       	sbiw	r28, 0x01	; 1
    8ec0:	13 30       	cpi	r17, 0x03	; 3
    8ec2:	19 f7       	brne	.-58     	; 0x8e8a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    8ec4:	df 91       	pop	r29
    8ec6:	cf 91       	pop	r28
    8ec8:	1f 91       	pop	r17
    8eca:	0f 91       	pop	r16
    8ecc:	ff 90       	pop	r15
    8ece:	ef 90       	pop	r14
    8ed0:	df 90       	pop	r13
    8ed2:	08 95       	ret

00008ed4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    8ed4:	0f 93       	push	r16
    8ed6:	1f 93       	push	r17
    8ed8:	cf 93       	push	r28
    8eda:	df 93       	push	r29
    8edc:	06 2f       	mov	r16, r22
    8ede:	c4 2f       	mov	r28, r20
    8ee0:	d5 2f       	mov	r29, r21
    8ee2:	18 2f       	mov	r17, r24
    8ee4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    8ee6:	fe 01       	movw	r30, r28
    8ee8:	44 91       	lpm	r20, Z
		if(c!=0){
    8eea:	44 23       	and	r20, r20
    8eec:	49 f0       	breq	.+18     	; 0x8f00 <Print+0x2c>
			c=((c&127)-32);			
    8eee:	4f 77       	andi	r20, 0x7F	; 127
    8ef0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    8ef2:	60 2f       	mov	r22, r16
    8ef4:	8c 2f       	mov	r24, r28
    8ef6:	81 0f       	add	r24, r17
    8ef8:	0e 94 5f 39 	call	0x72be	; 0x72be <SetFont>
    8efc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    8efe:	f3 cf       	rjmp	.-26     	; 0x8ee6 <Print+0x12>
	
}
    8f00:	df 91       	pop	r29
    8f02:	cf 91       	pop	r28
    8f04:	1f 91       	pop	r17
    8f06:	0f 91       	pop	r16
    8f08:	08 95       	ret

00008f0a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    8f0a:	40 52       	subi	r20, 0x20	; 32
    8f0c:	0c 94 5f 39 	jmp	0x72be	; 0x72be <SetFont>

00008f10 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8f10:	0f 93       	push	r16
    8f12:	1f 93       	push	r17
    8f14:	cf 93       	push	r28
    8f16:	df 93       	push	r29
    8f18:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8f1a:	c0 e0       	ldi	r28, 0x00	; 0
    8f1c:	d0 e0       	ldi	r29, 0x00	; 0
    8f1e:	c0 17       	cp	r28, r16
    8f20:	d1 07       	cpc	r29, r17
    8f22:	44 f4       	brge	.+16     	; 0x8f34 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8f24:	0e 94 79 39 	call	0x72f2	; 0x72f2 <GetVsyncFlag>
    8f28:	88 23       	and	r24, r24
    8f2a:	e1 f3       	breq	.-8      	; 0x8f24 <WaitVsync+0x14>
		ClearVsyncFlag();		
    8f2c:	0e 94 7d 39 	call	0x72fa	; 0x72fa <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8f30:	21 96       	adiw	r28, 0x01	; 1
    8f32:	f5 cf       	rjmp	.-22     	; 0x8f1e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8f34:	df 91       	pop	r29
    8f36:	cf 91       	pop	r28
    8f38:	1f 91       	pop	r17
    8f3a:	0f 91       	pop	r16
    8f3c:	08 95       	ret

00008f3e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8f3e:	80 93 bf 0b 	sts	0x0BBF, r24
	currFadeFrame=0;
    8f42:	10 92 c3 0b 	sts	0x0BC3, r1
	fadeActive=true;
    8f46:	81 e0       	ldi	r24, 0x01	; 1
    8f48:	80 93 c2 0b 	sts	0x0BC2, r24
		
	if(blocking){
    8f4c:	66 23       	and	r22, r22
    8f4e:	21 f0       	breq	.+8      	; 0x8f58 <doFade+0x1a>
		while(fadeActive==true);
    8f50:	80 91 c2 0b 	lds	r24, 0x0BC2
    8f54:	81 11       	cpse	r24, r1
    8f56:	fc cf       	rjmp	.-8      	; 0x8f50 <doFade+0x12>
    8f58:	08 95       	ret

00008f5a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8f5a:	81 11       	cpse	r24, r1
    8f5c:	03 c0       	rjmp	.+6      	; 0x8f64 <FadeIn+0xa>
		DDRC=0xff;
    8f5e:	8f ef       	ldi	r24, 0xFF	; 255
    8f60:	87 b9       	out	0x07, r24	; 7
		return;
    8f62:	08 95       	ret
	}
	fadeStep=1;
    8f64:	91 e0       	ldi	r25, 0x01	; 1
    8f66:	90 93 c4 0b 	sts	0x0BC4, r25
	fadeDir=1;
    8f6a:	90 93 c0 0b 	sts	0x0BC0, r25
	doFade(speed,blocking);
    8f6e:	0c 94 9f 47 	jmp	0x8f3e	; 0x8f3e <doFade>

00008f72 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8f72:	81 11       	cpse	r24, r1
    8f74:	02 c0       	rjmp	.+4      	; 0x8f7a <FadeOut+0x8>
		DDRC=0;
    8f76:	17 b8       	out	0x07, r1	; 7
		return;
    8f78:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8f7a:	9c e0       	ldi	r25, 0x0C	; 12
    8f7c:	90 93 c4 0b 	sts	0x0BC4, r25
	fadeDir=-1;
    8f80:	9f ef       	ldi	r25, 0xFF	; 255
    8f82:	90 93 c0 0b 	sts	0x0BC0, r25
	doFade(speed,blocking);
    8f86:	0c 94 9f 47 	jmp	0x8f3e	; 0x8f3e <doFade>

00008f8a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8f8a:	80 91 c2 0b 	lds	r24, 0x0BC2
    8f8e:	88 23       	and	r24, r24
    8f90:	01 f1       	breq	.+64     	; 0x8fd2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    8f92:	80 91 c3 0b 	lds	r24, 0x0BC3
    8f96:	81 11       	cpse	r24, r1
    8f98:	19 c0       	rjmp	.+50     	; 0x8fcc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8f9a:	80 91 bf 0b 	lds	r24, 0x0BBF
    8f9e:	80 93 c3 0b 	sts	0x0BC3, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8fa2:	e0 91 c4 0b 	lds	r30, 0x0BC4
    8fa6:	f0 e0       	ldi	r31, 0x00	; 0
    8fa8:	e7 51       	subi	r30, 0x17	; 23
    8faa:	ff 4f       	sbci	r31, 0xFF	; 255
    8fac:	e4 91       	lpm	r30, Z
    8fae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8fb0:	90 91 c0 0b 	lds	r25, 0x0BC0
    8fb4:	80 91 c4 0b 	lds	r24, 0x0BC4
    8fb8:	89 0f       	add	r24, r25
    8fba:	80 93 c4 0b 	sts	0x0BC4, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8fbe:	88 23       	and	r24, r24
    8fc0:	11 f0       	breq	.+4      	; 0x8fc6 <ProcessFading+0x3c>
    8fc2:	8d 30       	cpi	r24, 0x0D	; 13
    8fc4:	31 f4       	brne	.+12     	; 0x8fd2 <ProcessFading+0x48>
				fadeActive=false;
    8fc6:	10 92 c2 0b 	sts	0x0BC2, r1
    8fca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8fcc:	81 50       	subi	r24, 0x01	; 1
    8fce:	80 93 c3 0b 	sts	0x0BC3, r24
    8fd2:	08 95       	ret

00008fd4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8fd4:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <ProcessFading>
		ProcessSprites();
    8fd8:	0c 94 94 45 	jmp	0x8b28	; 0x8b28 <ProcessSprites>

00008fdc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    8fdc:	cf 93       	push	r28
    8fde:	df 93       	push	r29
    8fe0:	fc 01       	movw	r30, r24
    8fe2:	eb 01       	movw	r28, r22
	*looped = 0;
    8fe4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    8fe6:	93 81       	ldd	r25, Z+3	; 0x03
    8fe8:	9f 5f       	subi	r25, 0xFF	; 255
    8fea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8fec:	22 81       	ldd	r18, Z+2	; 0x02
    8fee:	80 81       	ld	r24, Z
    8ff0:	92 17       	cp	r25, r18
    8ff2:	70 f0       	brcs	.+28     	; 0x9010 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    8ff4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8ff6:	90 e0       	ldi	r25, 0x00	; 0
    8ff8:	01 96       	adiw	r24, 0x01	; 1
    8ffa:	21 81       	ldd	r18, Z+1	; 0x01
    8ffc:	62 2f       	mov	r22, r18
    8ffe:	70 e0       	ldi	r23, 0x00	; 0
    9000:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    9004:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    9006:	81 11       	cpse	r24, r1
    9008:	02 c0       	rjmp	.+4      	; 0x900e <LBGetNextFrame+0x32>
    900a:	81 e0       	ldi	r24, 0x01	; 1
    900c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    900e:	80 81       	ld	r24, Z
    9010:	e8 0f       	add	r30, r24
    9012:	f1 1d       	adc	r31, r1
    9014:	e8 0f       	add	r30, r24
    9016:	f1 1d       	adc	r31, r1
    9018:	84 81       	ldd	r24, Z+4	; 0x04
    901a:	95 81       	ldd	r25, Z+5	; 0x05
}
    901c:	df 91       	pop	r29
    901e:	cf 91       	pop	r28
    9020:	08 95       	ret

00009022 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9022:	0f 93       	push	r16
    9024:	1f 93       	push	r17
    9026:	cf 93       	push	r28
    9028:	df 93       	push	r29
    902a:	1f 92       	push	r1
    902c:	cd b7       	in	r28, 0x3d	; 61
    902e:	de b7       	in	r29, 0x3e	; 62
    9030:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    9032:	86 2f       	mov	r24, r22
    9034:	69 83       	std	Y+1, r22	; 0x01
    9036:	0e 94 83 39 	call	0x7306	; 0x7306 <ReadJoypad>
    903a:	d8 01       	movw	r26, r16
    903c:	15 96       	adiw	r26, 0x05	; 5
    903e:	9c 93       	st	X, r25
    9040:	8e 93       	st	-X, r24
    9042:	14 97       	sbiw	r26, 0x04	; 4
    9044:	69 81       	ldd	r22, Y+1	; 0x01
    9046:	e6 2f       	mov	r30, r22
    9048:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    904a:	00 97       	sbiw	r24, 0x00	; 0
    904c:	51 f0       	breq	.+20     	; 0x9062 <LBGetJoyPadState+0x40>
    904e:	df 01       	movw	r26, r30
    9050:	aa 0f       	add	r26, r26
    9052:	bb 1f       	adc	r27, r27
    9054:	a4 5c       	subi	r26, 0xC4	; 196
    9056:	b4 4f       	sbci	r27, 0xF4	; 244
    9058:	2d 91       	ld	r18, X+
    905a:	3c 91       	ld	r19, X
    905c:	82 17       	cp	r24, r18
    905e:	93 07       	cpc	r25, r19
    9060:	21 f0       	breq	.+8      	; 0x906a <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9062:	d8 01       	movw	r26, r16
    9064:	16 96       	adiw	r26, 0x06	; 6
    9066:	1c 92       	st	X, r1
    9068:	07 c0       	rjmp	.+14     	; 0x9078 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    906a:	d8 01       	movw	r26, r16
    906c:	16 96       	adiw	r26, 0x06	; 6
    906e:	2c 91       	ld	r18, X
    9070:	16 97       	sbiw	r26, 0x06	; 6
    9072:	2f 5f       	subi	r18, 0xFF	; 255
    9074:	16 96       	adiw	r26, 0x06	; 6
    9076:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9078:	ee 0f       	add	r30, r30
    907a:	ff 1f       	adc	r31, r31
    907c:	e4 5c       	subi	r30, 0xC4	; 196
    907e:	f4 4f       	sbci	r31, 0xF4	; 244
    9080:	20 81       	ld	r18, Z
    9082:	31 81       	ldd	r19, Z+1	; 0x01
    9084:	a9 01       	movw	r20, r18
    9086:	40 95       	com	r20
    9088:	50 95       	com	r21
    908a:	48 23       	and	r20, r24
    908c:	59 23       	and	r21, r25
    908e:	d8 01       	movw	r26, r16
    9090:	11 96       	adiw	r26, 0x01	; 1
    9092:	5c 93       	st	X, r21
    9094:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9096:	ac 01       	movw	r20, r24
    9098:	40 95       	com	r20
    909a:	50 95       	com	r21
    909c:	24 23       	and	r18, r20
    909e:	35 23       	and	r19, r21
    90a0:	13 96       	adiw	r26, 0x03	; 3
    90a2:	3c 93       	st	X, r19
    90a4:	2e 93       	st	-X, r18
    90a6:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    90a8:	91 83       	std	Z+1, r25	; 0x01
    90aa:	80 83       	st	Z, r24
}
    90ac:	0f 90       	pop	r0
    90ae:	df 91       	pop	r29
    90b0:	cf 91       	pop	r28
    90b2:	1f 91       	pop	r17
    90b4:	0f 91       	pop	r16
    90b6:	08 95       	ret

000090b8 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    90b8:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    90ba:	fb 01       	movw	r30, r22
    90bc:	2e 2f       	mov	r18, r30
    90be:	23 1b       	sub	r18, r19
    90c0:	24 17       	cp	r18, r20
    90c2:	28 f4       	brcc	.+10     	; 0x90ce <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    90c4:	21 91       	ld	r18, Z+
    90c6:	dc 01       	movw	r26, r24
    90c8:	2d 93       	st	X+, r18
    90ca:	cd 01       	movw	r24, r26
    90cc:	f7 cf       	rjmp	.-18     	; 0x90bc <LBCopyChars+0x4>
	}
}
    90ce:	08 95       	ret

000090d0 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    90d0:	af 92       	push	r10
    90d2:	bf 92       	push	r11
    90d4:	cf 92       	push	r12
    90d6:	df 92       	push	r13
    90d8:	ef 92       	push	r14
    90da:	ff 92       	push	r15
    90dc:	0f 93       	push	r16
    90de:	1f 93       	push	r17
    90e0:	cf 93       	push	r28
    90e2:	df 93       	push	r29
    90e4:	1f 92       	push	r1
    90e6:	cd b7       	in	r28, 0x3d	; 61
    90e8:	de b7       	in	r29, 0x3e	; 62
    90ea:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    90ec:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    90ee:	c6 2e       	mov	r12, r22
    90f0:	d1 2c       	mov	r13, r1
    90f2:	90 e0       	ldi	r25, 0x00	; 0
    90f4:	5c 01       	movw	r10, r24
    90f6:	a4 1a       	sub	r10, r20
    90f8:	b5 0a       	sbc	r11, r21
    90fa:	80 2f       	mov	r24, r16
    90fc:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    90fe:	82 17       	cp	r24, r18
    9100:	60 f4       	brcc	.+24     	; 0x911a <LBPrintStr+0x4a>
    9102:	c5 01       	movw	r24, r10
    9104:	80 0f       	add	r24, r16
    9106:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    9108:	f8 01       	movw	r30, r16
    910a:	41 91       	ld	r20, Z+
    910c:	8f 01       	movw	r16, r30
    910e:	b6 01       	movw	r22, r12
    9110:	29 83       	std	Y+1, r18	; 0x01
    9112:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <PrintChar>
    9116:	29 81       	ldd	r18, Y+1	; 0x01
    9118:	f0 cf       	rjmp	.-32     	; 0x90fa <LBPrintStr+0x2a>
	}
}
    911a:	0f 90       	pop	r0
    911c:	df 91       	pop	r29
    911e:	cf 91       	pop	r28
    9120:	1f 91       	pop	r17
    9122:	0f 91       	pop	r16
    9124:	ff 90       	pop	r15
    9126:	ef 90       	pop	r14
    9128:	df 90       	pop	r13
    912a:	cf 90       	pop	r12
    912c:	bf 90       	pop	r11
    912e:	af 90       	pop	r10
    9130:	08 95       	ret

00009132 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9132:	af 92       	push	r10
    9134:	cf 92       	push	r12
    9136:	ef 92       	push	r14
    9138:	ff 92       	push	r15
    913a:	0f 93       	push	r16
    913c:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    913e:	70 e0       	ldi	r23, 0x00	; 0
    9140:	f1 2c       	mov	r15, r1
    9142:	fb 01       	movw	r30, r22
    9144:	e2 0f       	add	r30, r18
    9146:	f1 1d       	adc	r31, r1
    9148:	ee 16       	cp	r14, r30
    914a:	ff 06       	cpc	r15, r31
    914c:	a4 f4       	brge	.+40     	; 0x9176 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    914e:	ea 0c       	add	r14, r10
    9150:	f1 1c       	adc	r15, r1
    9152:	6e 15       	cp	r22, r14
    9154:	7f 05       	cpc	r23, r15
    9156:	7c f4       	brge	.+30     	; 0x9176 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9158:	28 2f       	mov	r18, r24
    915a:	30 e0       	ldi	r19, 0x00	; 0
    915c:	10 e0       	ldi	r17, 0x00	; 0
    915e:	c9 01       	movw	r24, r18
    9160:	84 0f       	add	r24, r20
    9162:	91 1d       	adc	r25, r1
    9164:	08 17       	cp	r16, r24
    9166:	19 07       	cpc	r17, r25
    9168:	34 f4       	brge	.+12     	; 0x9176 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    916a:	0c 0d       	add	r16, r12
    916c:	11 1d       	adc	r17, r1
    916e:	81 e0       	ldi	r24, 0x01	; 1
    9170:	20 17       	cp	r18, r16
    9172:	31 07       	cpc	r19, r17
    9174:	0c f0       	brlt	.+2      	; 0x9178 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9176:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9178:	1f 91       	pop	r17
    917a:	0f 91       	pop	r16
    917c:	ff 90       	pop	r15
    917e:	ef 90       	pop	r14
    9180:	cf 90       	pop	r12
    9182:	af 90       	pop	r10
    9184:	08 95       	ret

00009186 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    9186:	2f 92       	push	r2
    9188:	3f 92       	push	r3
    918a:	4f 92       	push	r4
    918c:	5f 92       	push	r5
    918e:	6f 92       	push	r6
    9190:	7f 92       	push	r7
    9192:	8f 92       	push	r8
    9194:	9f 92       	push	r9
    9196:	af 92       	push	r10
    9198:	bf 92       	push	r11
    919a:	cf 92       	push	r12
    919c:	df 92       	push	r13
    919e:	ef 92       	push	r14
    91a0:	ff 92       	push	r15
    91a2:	0f 93       	push	r16
    91a4:	1f 93       	push	r17
    91a6:	cf 93       	push	r28
    91a8:	df 93       	push	r29
    91aa:	00 d0       	rcall	.+0      	; 0x91ac <LBLineIntersect+0x26>
    91ac:	00 d0       	rcall	.+0      	; 0x91ae <LBLineIntersect+0x28>
    91ae:	cd b7       	in	r28, 0x3d	; 61
    91b0:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    91b2:	f1 2c       	mov	r15, r1
    91b4:	8a 2c       	mov	r8, r10
    91b6:	91 2c       	mov	r9, r1
    91b8:	8e 18       	sub	r8, r14
    91ba:	9f 08       	sbc	r9, r15
    91bc:	a8 2e       	mov	r10, r24
    91be:	b1 2c       	mov	r11, r1
    91c0:	24 2e       	mov	r2, r20
    91c2:	31 2c       	mov	r3, r1
    91c4:	2a 18       	sub	r2, r10
    91c6:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    91c8:	10 e0       	ldi	r17, 0x00	; 0
    91ca:	d1 2c       	mov	r13, r1
    91cc:	c0 1a       	sub	r12, r16
    91ce:	d1 0a       	sbc	r13, r17
    91d0:	46 2f       	mov	r20, r22
    91d2:	50 e0       	ldi	r21, 0x00	; 0
    91d4:	5c 83       	std	Y+4, r21	; 0x04
    91d6:	4b 83       	std	Y+3, r20	; 0x03
    91d8:	82 2f       	mov	r24, r18
    91da:	90 e0       	ldi	r25, 0x00	; 0
    91dc:	9a 83       	std	Y+2, r25	; 0x02
    91de:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    91e0:	82 9c       	mul	r8, r2
    91e2:	90 01       	movw	r18, r0
    91e4:	83 9c       	mul	r8, r3
    91e6:	30 0d       	add	r19, r0
    91e8:	92 9c       	mul	r9, r2
    91ea:	30 0d       	add	r19, r0
    91ec:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    91ee:	ca 01       	movw	r24, r20
    91f0:	e9 81       	ldd	r30, Y+1	; 0x01
    91f2:	fa 81       	ldd	r31, Y+2	; 0x02
    91f4:	8e 1b       	sub	r24, r30
    91f6:	9f 0b       	sbc	r25, r31
    91f8:	c8 9e       	mul	r12, r24
    91fa:	b0 01       	movw	r22, r0
    91fc:	c9 9e       	mul	r12, r25
    91fe:	70 0d       	add	r23, r0
    9200:	d8 9e       	mul	r13, r24
    9202:	70 0d       	add	r23, r0
    9204:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9206:	62 0f       	add	r22, r18
    9208:	73 1f       	adc	r23, r19
    920a:	88 27       	eor	r24, r24
    920c:	77 fd       	sbrc	r23, 7
    920e:	80 95       	com	r24
    9210:	98 2f       	mov	r25, r24
    9212:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    9216:	2b 01       	movw	r4, r22
    9218:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    921a:	20 e0       	ldi	r18, 0x00	; 0
    921c:	30 e0       	ldi	r19, 0x00	; 0
    921e:	a9 01       	movw	r20, r18
    9220:	0e 94 10 61 	call	0xc220	; 0xc220 <__cmpsf2>
    9224:	88 23       	and	r24, r24
    9226:	09 f4       	brne	.+2      	; 0x922a <LBLineIntersect+0xa4>
    9228:	6c c0       	rjmp	.+216    	; 0x9302 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    922a:	4b 81       	ldd	r20, Y+3	; 0x03
    922c:	5c 81       	ldd	r21, Y+4	; 0x04
    922e:	4e 19       	sub	r20, r14
    9230:	5f 09       	sbc	r21, r15
    9232:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9234:	0a 19       	sub	r16, r10
    9236:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9238:	c4 9e       	mul	r12, r20
    923a:	c0 01       	movw	r24, r0
    923c:	c5 9e       	mul	r12, r21
    923e:	90 0d       	add	r25, r0
    9240:	d4 9e       	mul	r13, r20
    9242:	90 0d       	add	r25, r0
    9244:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9246:	80 9e       	mul	r8, r16
    9248:	b0 01       	movw	r22, r0
    924a:	81 9e       	mul	r8, r17
    924c:	70 0d       	add	r23, r0
    924e:	90 9e       	mul	r9, r16
    9250:	70 0d       	add	r23, r0
    9252:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9254:	68 0f       	add	r22, r24
    9256:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9258:	88 27       	eor	r24, r24
    925a:	77 fd       	sbrc	r23, 7
    925c:	80 95       	com	r24
    925e:	98 2f       	mov	r25, r24
    9260:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9264:	a3 01       	movw	r20, r6
    9266:	92 01       	movw	r18, r4
    9268:	0e 94 14 61 	call	0xc228	; 0xc228 <__divsf3>
    926c:	4b 01       	movw	r8, r22
    926e:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9270:	20 e0       	ldi	r18, 0x00	; 0
    9272:	30 e0       	ldi	r19, 0x00	; 0
    9274:	a9 01       	movw	r20, r18
    9276:	0e 94 10 61 	call	0xc220	; 0xc220 <__cmpsf2>
    927a:	87 fd       	sbrc	r24, 7
    927c:	42 c0       	rjmp	.+132    	; 0x9302 <LBLineIntersect+0x17c>
    927e:	20 e0       	ldi	r18, 0x00	; 0
    9280:	30 e0       	ldi	r19, 0x00	; 0
    9282:	40 e8       	ldi	r20, 0x80	; 128
    9284:	5f e3       	ldi	r21, 0x3F	; 63
    9286:	c5 01       	movw	r24, r10
    9288:	b4 01       	movw	r22, r8
    928a:	0e 94 5f 62 	call	0xc4be	; 0xc4be <__gesf2>
    928e:	18 16       	cp	r1, r24
    9290:	c4 f1       	brlt	.+112    	; 0x9302 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9292:	2e 9c       	mul	r2, r14
    9294:	b0 01       	movw	r22, r0
    9296:	2f 9c       	mul	r2, r15
    9298:	70 0d       	add	r23, r0
    929a:	3e 9c       	mul	r3, r14
    929c:	70 0d       	add	r23, r0
    929e:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    92a0:	29 81       	ldd	r18, Y+1	; 0x01
    92a2:	3a 81       	ldd	r19, Y+2	; 0x02
    92a4:	8b 81       	ldd	r24, Y+3	; 0x03
    92a6:	9c 81       	ldd	r25, Y+4	; 0x04
    92a8:	28 1b       	sub	r18, r24
    92aa:	39 0b       	sbc	r19, r25
    92ac:	20 9f       	mul	r18, r16
    92ae:	c0 01       	movw	r24, r0
    92b0:	21 9f       	mul	r18, r17
    92b2:	90 0d       	add	r25, r0
    92b4:	30 9f       	mul	r19, r16
    92b6:	90 0d       	add	r25, r0
    92b8:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    92ba:	68 0f       	add	r22, r24
    92bc:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    92be:	88 27       	eor	r24, r24
    92c0:	77 fd       	sbrc	r23, 7
    92c2:	80 95       	com	r24
    92c4:	98 2f       	mov	r25, r24
    92c6:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    92ca:	a3 01       	movw	r20, r6
    92cc:	92 01       	movw	r18, r4
    92ce:	0e 94 14 61 	call	0xc228	; 0xc228 <__divsf3>
    92d2:	6b 01       	movw	r12, r22
    92d4:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    92d6:	20 e0       	ldi	r18, 0x00	; 0
    92d8:	30 e0       	ldi	r19, 0x00	; 0
    92da:	a9 01       	movw	r20, r18
    92dc:	0e 94 10 61 	call	0xc220	; 0xc220 <__cmpsf2>
    92e0:	87 fd       	sbrc	r24, 7
    92e2:	0f c0       	rjmp	.+30     	; 0x9302 <LBLineIntersect+0x17c>
    92e4:	11 e0       	ldi	r17, 0x01	; 1
    92e6:	20 e0       	ldi	r18, 0x00	; 0
    92e8:	30 e0       	ldi	r19, 0x00	; 0
    92ea:	40 e8       	ldi	r20, 0x80	; 128
    92ec:	5f e3       	ldi	r21, 0x3F	; 63
    92ee:	c7 01       	movw	r24, r14
    92f0:	b6 01       	movw	r22, r12
    92f2:	0e 94 5f 62 	call	0xc4be	; 0xc4be <__gesf2>
    92f6:	18 16       	cp	r1, r24
    92f8:	0c f0       	brlt	.+2      	; 0x92fc <LBLineIntersect+0x176>
    92fa:	10 e0       	ldi	r17, 0x00	; 0
    92fc:	81 e0       	ldi	r24, 0x01	; 1
    92fe:	81 27       	eor	r24, r17
    9300:	01 c0       	rjmp	.+2      	; 0x9304 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9302:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    9304:	0f 90       	pop	r0
    9306:	0f 90       	pop	r0
    9308:	0f 90       	pop	r0
    930a:	0f 90       	pop	r0
    930c:	df 91       	pop	r29
    930e:	cf 91       	pop	r28
    9310:	1f 91       	pop	r17
    9312:	0f 91       	pop	r16
    9314:	ff 90       	pop	r15
    9316:	ef 90       	pop	r14
    9318:	df 90       	pop	r13
    931a:	cf 90       	pop	r12
    931c:	bf 90       	pop	r11
    931e:	af 90       	pop	r10
    9320:	9f 90       	pop	r9
    9322:	8f 90       	pop	r8
    9324:	7f 90       	pop	r7
    9326:	6f 90       	pop	r6
    9328:	5f 90       	pop	r5
    932a:	4f 90       	pop	r4
    932c:	3f 90       	pop	r3
    932e:	2f 90       	pop	r2
    9330:	08 95       	ret

00009332 <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9332:	0f 93       	push	r16
    9334:	1f 93       	push	r17
    9336:	cf 93       	push	r28
    9338:	df 93       	push	r29
    933a:	8c 01       	movw	r16, r24
    933c:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    933e:	80 91 3a 0b 	lds	r24, 0x0B3A
    9342:	90 91 3b 0b 	lds	r25, 0x0B3B
    9346:	89 2b       	or	r24, r25
    9348:	31 f4       	brne	.+12     	; 0x9356 <LBRandom+0x24>
    934a:	0e 94 c3 39 	call	0x7386	; 0x7386 <GetRandomSeed>
    934e:	90 93 3b 0b 	sts	0x0B3B, r25
    9352:	80 93 3a 0b 	sts	0x0B3A, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    9356:	90 91 39 0b 	lds	r25, 0x0B39
    935a:	20 91 3a 0b 	lds	r18, 0x0B3A
    935e:	30 91 3b 0b 	lds	r19, 0x0B3B
    9362:	09 2e       	mov	r0, r25
    9364:	02 c0       	rjmp	.+4      	; 0x936a <LBRandom+0x38>
    9366:	36 95       	lsr	r19
    9368:	27 95       	ror	r18
    936a:	0a 94       	dec	r0
    936c:	e2 f7       	brpl	.-8      	; 0x9366 <LBRandom+0x34>
	unsigned int delta = to - from;
    936e:	be 01       	movw	r22, r28
    9370:	60 1b       	sub	r22, r16
    9372:	71 0b       	sbc	r23, r17

	shift_count++;
    9374:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    9376:	90 31       	cpi	r25, 0x10	; 16
    9378:	18 f4       	brcc	.+6      	; 0x9380 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    937a:	90 93 39 0b 	sts	0x0B39, r25
    937e:	02 c0       	rjmp	.+4      	; 0x9384 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    9380:	10 92 39 0b 	sts	0x0B39, r1

	return from + ((delta + shifted) % delta);
    9384:	cb 01       	movw	r24, r22
    9386:	82 0f       	add	r24, r18
    9388:	93 1f       	adc	r25, r19
    938a:	0e 94 7d 60 	call	0xc0fa	; 0xc0fa <__udivmodhi4>
}
    938e:	80 0f       	add	r24, r16
    9390:	91 1f       	adc	r25, r17
    9392:	df 91       	pop	r29
    9394:	cf 91       	pop	r28
    9396:	1f 91       	pop	r17
    9398:	0f 91       	pop	r16
    939a:	08 95       	ret

0000939c <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    939c:	cf 93       	push	r28
    939e:	df 93       	push	r29
    93a0:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    93a2:	c0 e0       	ldi	r28, 0x00	; 0
    93a4:	cd 17       	cp	r28, r29
    93a6:	31 f0       	breq	.+12     	; 0x93b4 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    93a8:	8f ef       	ldi	r24, 0xFF	; 255
    93aa:	9f ef       	ldi	r25, 0xFF	; 255
    93ac:	0e 94 8f 39 	call	0x731e	; 0x731e <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    93b0:	cf 5f       	subi	r28, 0xFF	; 255
    93b2:	f8 cf       	rjmp	.-16     	; 0x93a4 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    93b4:	df 91       	pop	r29
    93b6:	cf 91       	pop	r28
    93b8:	08 95       	ret

000093ba <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    93ba:	28 e8       	ldi	r18, 0x88	; 136
    93bc:	30 e0       	ldi	r19, 0x00	; 0
    93be:	fc 01       	movw	r30, r24
    93c0:	21 93       	st	Z+, r18
    93c2:	31 93       	st	Z+, r19
    93c4:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    93c6:	4e e1       	ldi	r20, 0x1E	; 30
    93c8:	50 e0       	ldi	r21, 0x00	; 0
    93ca:	66 ef       	ldi	r22, 0xF6	; 246
    93cc:	70 e0       	ldi	r23, 0x00	; 0
    93ce:	0c 94 c6 62 	jmp	0xc58c	; 0xc58c <memcpy_P>

000093d2 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    93d2:	27 e8       	ldi	r18, 0x87	; 135
    93d4:	30 e0       	ldi	r19, 0x00	; 0
    93d6:	fc 01       	movw	r30, r24
    93d8:	21 93       	st	Z+, r18
    93da:	31 93       	st	Z+, r19
    93dc:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    93de:	4e e1       	ldi	r20, 0x1E	; 30
    93e0:	50 e0       	ldi	r21, 0x00	; 0
    93e2:	64 e1       	ldi	r22, 0x14	; 20
    93e4:	71 e0       	ldi	r23, 0x01	; 1
    93e6:	0c 94 c6 62 	jmp	0xc58c	; 0xc58c <memcpy_P>

000093ea <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    93ea:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    93ec:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    93ee:	14 86       	std	Z+12, r1	; 0x0c
    93f0:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    93f2:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    93f4:	73 e0       	ldi	r23, 0x03	; 3
    93f6:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    93f8:	65 e0       	ldi	r22, 0x05	; 5
    93fa:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    93fc:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    93fe:	41 e8       	ldi	r20, 0x81	; 129
    9400:	54 e2       	ldi	r21, 0x24	; 36
    9402:	56 83       	std	Z+6, r21	; 0x06
    9404:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9406:	2e e7       	ldi	r18, 0x7E	; 126
    9408:	34 e2       	ldi	r19, 0x24	; 36
    940a:	30 87       	std	Z+8, r19	; 0x08
    940c:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    940e:	8b e7       	ldi	r24, 0x7B	; 123
    9410:	94 e2       	ldi	r25, 0x24	; 36
    9412:	92 87       	std	Z+10, r25	; 0x0a
    9414:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9416:	10 8e       	std	Z+24, r1	; 0x18
    9418:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    941a:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    941c:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    941e:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    9420:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9422:	52 8b       	std	Z+18, r21	; 0x12
    9424:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9426:	34 8b       	std	Z+20, r19	; 0x14
    9428:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    942a:	96 8b       	std	Z+22, r25	; 0x16
    942c:	85 8b       	std	Z+21, r24	; 0x15
    942e:	08 95       	ret

00009430 <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9430:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9432:	88 e7       	ldi	r24, 0x78	; 120
    9434:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9436:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9438:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    943a:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    943c:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    943e:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    9440:	84 e0       	ldi	r24, 0x04	; 4
    9442:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9444:	66 23       	and	r22, r22
    9446:	11 f0       	breq	.+4      	; 0x944c <init_shot_state+0x1c>
    9448:	85 e0       	ldi	r24, 0x05	; 5
    944a:	01 c0       	rjmp	.+2      	; 0x944e <init_shot_state+0x1e>
    944c:	81 e0       	ldi	r24, 0x01	; 1
    944e:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    9450:	80 e0       	ldi	r24, 0x00	; 0
    9452:	90 e0       	ldi	r25, 0x00	; 0
    9454:	a0 e7       	ldi	r26, 0x70	; 112
    9456:	b3 e4       	ldi	r27, 0x43	; 67
    9458:	83 83       	std	Z+3, r24	; 0x03
    945a:	94 83       	std	Z+4, r25	; 0x04
    945c:	a5 83       	std	Z+5, r26	; 0x05
    945e:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    9460:	17 82       	std	Z+7, r1	; 0x07
    9462:	10 86       	std	Z+8, r1	; 0x08
    9464:	11 86       	std	Z+9, r1	; 0x09
    9466:	12 86       	std	Z+10, r1	; 0x0a
    9468:	08 95       	ret

0000946a <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    946a:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    946c:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    946e:	82 e0       	ldi	r24, 0x02	; 2
    9470:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9472:	85 e0       	ldi	r24, 0x05	; 5
    9474:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    9476:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    9478:	66 23       	and	r22, r22
    947a:	19 f0       	breq	.+6      	; 0x9482 <set_shot_animations+0x18>
    947c:	8e e1       	ldi	r24, 0x1E	; 30
    947e:	94 e2       	ldi	r25, 0x24	; 36
    9480:	02 c0       	rjmp	.+4      	; 0x9486 <set_shot_animations+0x1c>
    9482:	81 e2       	ldi	r24, 0x21	; 33
    9484:	94 e2       	ldi	r25, 0x24	; 36
    9486:	95 8b       	std	Z+21, r25	; 0x15
    9488:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    948a:	66 23       	and	r22, r22
    948c:	19 f0       	breq	.+6      	; 0x9494 <set_shot_animations+0x2a>
    948e:	8b e1       	ldi	r24, 0x1B	; 27
    9490:	94 e2       	ldi	r25, 0x24	; 36
    9492:	02 c0       	rjmp	.+4      	; 0x9498 <set_shot_animations+0x2e>
    9494:	81 e2       	ldi	r24, 0x21	; 33
    9496:	94 e2       	ldi	r25, 0x24	; 36
    9498:	97 8b       	std	Z+23, r25	; 0x17
    949a:	86 8b       	std	Z+22, r24	; 0x16
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    949c:	82 e0       	ldi	r24, 0x02	; 2
    949e:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    94a0:	85 e0       	ldi	r24, 0x05	; 5
    94a2:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.frame_count = 0;
    94a4:	15 8e       	std	Z+29, r1	; 0x1d
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    94a6:	66 23       	and	r22, r22
    94a8:	19 f0       	breq	.+6      	; 0x94b0 <set_shot_animations+0x46>
    94aa:	88 e1       	ldi	r24, 0x18	; 24
    94ac:	94 e2       	ldi	r25, 0x24	; 36
    94ae:	02 c0       	rjmp	.+4      	; 0x94b4 <set_shot_animations+0x4a>
    94b0:	81 e2       	ldi	r24, 0x21	; 33
    94b2:	94 e2       	ldi	r25, 0x24	; 36
    94b4:	97 8f       	std	Z+31, r25	; 0x1f
    94b6:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    94b8:	66 23       	and	r22, r22
    94ba:	19 f0       	breq	.+6      	; 0x94c2 <set_shot_animations+0x58>
    94bc:	85 e1       	ldi	r24, 0x15	; 21
    94be:	94 e2       	ldi	r25, 0x24	; 36
    94c0:	02 c0       	rjmp	.+4      	; 0x94c6 <set_shot_animations+0x5c>
    94c2:	81 e2       	ldi	r24, 0x21	; 33
    94c4:	94 e2       	ldi	r25, 0x24	; 36
    94c6:	91 a3       	std	Z+33, r25	; 0x21
    94c8:	80 a3       	std	Z+32, r24	; 0x20
    94ca:	08 95       	ret

000094cc <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    94cc:	0f 93       	push	r16
    94ce:	1f 93       	push	r17
    94d0:	cf 93       	push	r28
    94d2:	df 93       	push	r29
    94d4:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    94d6:	8a e5       	ldi	r24, 0x5A	; 90
    94d8:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    94da:	88 e7       	ldi	r24, 0x78	; 120
    94dc:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    94de:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    94e0:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    94e2:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    94e4:	18 82       	st	Y, r1
	p->shared.speed = 0;
    94e6:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    94e8:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    94ea:	82 e3       	ldi	r24, 0x32	; 50
    94ec:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    94ee:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    94f0:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    94f2:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    94f4:	fe 01       	movw	r30, r28
    94f6:	e4 5b       	subi	r30, 0xB4	; 180
    94f8:	ff 4f       	sbci	r31, 0xFF	; 255
    94fa:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    94fc:	31 96       	adiw	r30, 0x01	; 1
    94fe:	91 e0       	ldi	r25, 0x01	; 1
    9500:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9502:	31 96       	adiw	r30, 0x01	; 1
    9504:	85 e0       	ldi	r24, 0x05	; 5
    9506:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9508:	31 96       	adiw	r30, 0x01	; 1
    950a:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    950c:	31 96       	adiw	r30, 0x01	; 1
    950e:	71 83       	std	Z+1, r23	; 0x01
    9510:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9512:	36 96       	adiw	r30, 0x06	; 6
    9514:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9516:	31 96       	adiw	r30, 0x01	; 1
    9518:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    951a:	31 96       	adiw	r30, 0x01	; 1
    951c:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    951e:	31 96       	adiw	r30, 0x01	; 1
    9520:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9522:	31 96       	adiw	r30, 0x01	; 1
    9524:	51 83       	std	Z+1, r21	; 0x01
    9526:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9528:	36 96       	adiw	r30, 0x06	; 6
    952a:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    952c:	31 96       	adiw	r30, 0x01	; 1
    952e:	93 e0       	ldi	r25, 0x03	; 3
    9530:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9532:	31 96       	adiw	r30, 0x01	; 1
    9534:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9536:	31 96       	adiw	r30, 0x01	; 1
    9538:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    953a:	31 96       	adiw	r30, 0x01	; 1
    953c:	80 e3       	ldi	r24, 0x30	; 48
    953e:	94 e2       	ldi	r25, 0x24	; 36
    9540:	91 83       	std	Z+1, r25	; 0x01
    9542:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9544:	32 96       	adiw	r30, 0x02	; 2
    9546:	8a e2       	ldi	r24, 0x2A	; 42
    9548:	94 e2       	ldi	r25, 0x24	; 36
    954a:	91 83       	std	Z+1, r25	; 0x01
    954c:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    954e:	32 96       	adiw	r30, 0x02	; 2
    9550:	84 e2       	ldi	r24, 0x24	; 36
    9552:	94 e2       	ldi	r25, 0x24	; 36
    9554:	91 83       	std	Z+1, r25	; 0x01
    9556:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9558:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    955a:	8e 01       	movw	r16, r28
    955c:	08 5d       	subi	r16, 0xD8	; 216
    955e:	1f 4f       	sbci	r17, 0xFF	; 255
    9560:	60 e0       	ldi	r22, 0x00	; 0
    9562:	c8 01       	movw	r24, r16
    9564:	0e 94 18 4a 	call	0x9430	; 0x9430 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9568:	60 e0       	ldi	r22, 0x00	; 0
    956a:	c8 01       	movw	r24, r16
    956c:	0e 94 35 4a 	call	0x946a	; 0x946a <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9570:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    9572:	1d 8e       	std	Y+29, r1	; 0x1d
    9574:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    9576:	1e 8e       	std	Y+30, r1	; 0x1e
	p->goal_reached = 0;
    9578:	1f 8e       	std	Y+31, r1	; 0x1f
	p->old_x = 0;
    957a:	18 a2       	std	Y+32, r1	; 0x20
    957c:	19 a2       	std	Y+33, r1	; 0x21
    957e:	1a a2       	std	Y+34, r1	; 0x22
    9580:	1b a2       	std	Y+35, r1	; 0x23
	p->old_y = 0;
    9582:	1c a2       	std	Y+36, r1	; 0x24
    9584:	1d a2       	std	Y+37, r1	; 0x25
    9586:	1e a2       	std	Y+38, r1	; 0x26
    9588:	1f a2       	std	Y+39, r1	; 0x27
}
    958a:	df 91       	pop	r29
    958c:	cf 91       	pop	r28
    958e:	1f 91       	pop	r17
    9590:	0f 91       	pop	r16
    9592:	08 95       	ret

00009594 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    9594:	fc 01       	movw	r30, r24
    9596:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    9598:	60 e0       	ldi	r22, 0x00	; 0
    959a:	88 96       	adiw	r24, 0x28	; 40
    959c:	0c 94 18 4a 	jmp	0x9430	; 0x9430 <init_shot_state>

000095a0 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    95a0:	ec e0       	ldi	r30, 0x0C	; 12
    95a2:	fc e0       	ldi	r31, 0x0C	; 12
    95a4:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    95a6:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    95a8:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    95aa:	44 e5       	ldi	r20, 0x54	; 84
    95ac:	54 e2       	ldi	r21, 0x24	; 36
    95ae:	60 e6       	ldi	r22, 0x60	; 96
    95b0:	74 e2       	ldi	r23, 0x24	; 36
    95b2:	89 e2       	ldi	r24, 0x29	; 41
    95b4:	9c e0       	ldi	r25, 0x0C	; 12
    95b6:	0e 94 66 4a 	call	0x94cc	; 0x94cc <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    95ba:	4c e3       	ldi	r20, 0x3C	; 60
    95bc:	54 e2       	ldi	r21, 0x24	; 36
    95be:	68 e4       	ldi	r22, 0x48	; 72
    95c0:	74 e2       	ldi	r23, 0x24	; 36
    95c2:	89 e8       	ldi	r24, 0x89	; 137
    95c4:	9f e0       	ldi	r25, 0x0F	; 15
    95c6:	0c 94 66 4a 	jmp	0x94cc	; 0x94cc <init_player>

000095ca <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    95ca:	cf 93       	push	r28
    95cc:	df 93       	push	r29
    95ce:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    95d0:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    95d2:	6a 89       	ldd	r22, Y+18	; 0x12
    95d4:	70 e0       	ldi	r23, 0x00	; 0
    95d6:	80 e0       	ldi	r24, 0x00	; 0
    95d8:	90 e0       	ldi	r25, 0x00	; 0
    95da:	0e 94 ad 61 	call	0xc35a	; 0xc35a <__floatunsisf>
    95de:	6b 83       	std	Y+3, r22	; 0x03
    95e0:	7c 83       	std	Y+4, r23	; 0x04
    95e2:	8d 83       	std	Y+5, r24	; 0x05
    95e4:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    95e6:	6b 89       	ldd	r22, Y+19	; 0x13
    95e8:	70 e0       	ldi	r23, 0x00	; 0
    95ea:	80 e0       	ldi	r24, 0x00	; 0
    95ec:	90 e0       	ldi	r25, 0x00	; 0
    95ee:	0e 94 ad 61 	call	0xc35a	; 0xc35a <__floatunsisf>
    95f2:	6f 83       	std	Y+7, r22	; 0x07
    95f4:	78 87       	std	Y+8, r23	; 0x08
    95f6:	89 87       	std	Y+9, r24	; 0x09
    95f8:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    95fa:	18 82       	st	Y, r1
	player->shared.speed = 0;
    95fc:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    95fe:	1a 82       	std	Y+2, r1	; 0x02
	
}
    9600:	df 91       	pop	r29
    9602:	cf 91       	pop	r28
    9604:	08 95       	ret

00009606 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9606:	cf 93       	push	r28
    9608:	df 93       	push	r29
    960a:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    960c:	bc 01       	movw	r22, r24
    960e:	88 81       	ld	r24, Y
    9610:	99 81       	ldd	r25, Y+1	; 0x01
    9612:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <EepromReadBlock>
	if (status == 0x03)
    9616:	83 30       	cpi	r24, 0x03	; 3
    9618:	29 f4       	brne	.+10     	; 0x9624 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    961a:	ce 01       	movw	r24, r28
	}
}
    961c:	df 91       	pop	r29
    961e:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9620:	0c 94 74 3a 	jmp	0x74e8	; 0x74e8 <EepromWriteBlock>
	}
}
    9624:	df 91       	pop	r29
    9626:	cf 91       	pop	r28
    9628:	08 95       	ret

0000962a <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    962a:	61 e0       	ldi	r22, 0x01	; 1
    962c:	83 e0       	ldi	r24, 0x03	; 3
    962e:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <FadeOut>
	ClearVram();
    9632:	0e 94 55 39 	call	0x72aa	; 0x72aa <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9636:	60 e0       	ldi	r22, 0x00	; 0
    9638:	83 e0       	ldi	r24, 0x03	; 3
    963a:	0c 94 ad 47 	jmp	0x8f5a	; 0x8f5a <FadeIn>

0000963e <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    963e:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9640:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    9642:	40 e0       	ldi	r20, 0x00	; 0
    9644:	66 e6       	ldi	r22, 0x66	; 102
    9646:	74 e2       	ldi	r23, 0x24	; 36
    9648:	8c 2f       	mov	r24, r28
    964a:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
    964e:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9650:	ca 30       	cpi	r28, 0x0A	; 10
    9652:	b9 f7       	brne	.-18     	; 0x9642 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9654:	cf 91       	pop	r28
    9656:	08 95       	ret

00009658 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9658:	cf 92       	push	r12
    965a:	df 92       	push	r13
    965c:	ff 92       	push	r15
    965e:	0f 93       	push	r16
    9660:	1f 93       	push	r17
    9662:	cf 93       	push	r28
    9664:	df 93       	push	r29
    9666:	cd b7       	in	r28, 0x3d	; 61
    9668:	de b7       	in	r29, 0x3e	; 62
    966a:	28 97       	sbiw	r28, 0x08	; 8
    966c:	0f b6       	in	r0, 0x3f	; 63
    966e:	f8 94       	cli
    9670:	de bf       	out	0x3e, r29	; 62
    9672:	0f be       	out	0x3f, r0	; 63
    9674:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    9676:	90 91 38 0c 	lds	r25, 0x0C38
    967a:	80 91 98 0f 	lds	r24, 0x0F98
    967e:	98 17       	cp	r25, r24
    9680:	28 f4       	brcc	.+10     	; 0x968c <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    9682:	e9 e2       	ldi	r30, 0x29	; 41
    9684:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    9686:	a9 e8       	ldi	r26, 0x89	; 137
    9688:	bf e0       	ldi	r27, 0x0F	; 15
    968a:	04 c0       	rjmp	.+8      	; 0x9694 <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    968c:	e9 e8       	ldi	r30, 0x89	; 137
    968e:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9690:	a9 e2       	ldi	r26, 0x29	; 41
    9692:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    9694:	1b 96       	adiw	r26, 0x0b	; 11
    9696:	8c 91       	ld	r24, X
    9698:	1b 97       	sbiw	r26, 0x0b	; 11
    969a:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    969c:	83 85       	ldd	r24, Z+11	; 0x0b
    969e:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    96a0:	1f 96       	adiw	r26, 0x0f	; 15
    96a2:	8c 91       	ld	r24, X
    96a4:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    96a6:	97 85       	ldd	r25, Z+15	; 0x0f
    96a8:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    96aa:	f8 2e       	mov	r15, r24
    96ac:	f9 1a       	sub	r15, r25
    96ae:	00 e0       	ldi	r16, 0x00	; 0
    96b0:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    96b2:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    96b4:	81 11       	cpse	r24, r1
    96b6:	08 c0       	rjmp	.+16     	; 0x96c8 <save_score+0x70>
    96b8:	f8 01       	movw	r30, r16
    96ba:	eb 53       	subi	r30, 0x3B	; 59
    96bc:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    96be:	94 81       	ldd	r25, Z+4	; 0x04
    96c0:	25 81       	ldd	r18, Z+5	; 0x05
    96c2:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    96c4:	9f 15       	cp	r25, r15
    96c6:	d0 f4       	brcc	.+52     	; 0x96fc <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    96c8:	44 e0       	ldi	r20, 0x04	; 4
    96ca:	c8 01       	movw	r24, r16
    96cc:	89 53       	subi	r24, 0x39	; 57
    96ce:	94 4f       	sbci	r25, 0xF4	; 244
    96d0:	6c 01       	movw	r12, r24
    96d2:	bc 01       	movw	r22, r24
    96d4:	ce 01       	movw	r24, r28
    96d6:	05 96       	adiw	r24, 0x05	; 5
    96d8:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    96dc:	44 e0       	ldi	r20, 0x04	; 4
    96de:	be 01       	movw	r22, r28
    96e0:	6f 5f       	subi	r22, 0xFF	; 255
    96e2:	7f 4f       	sbci	r23, 0xFF	; 255
    96e4:	c6 01       	movw	r24, r12
    96e6:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    96ea:	44 e0       	ldi	r20, 0x04	; 4
    96ec:	be 01       	movw	r22, r28
    96ee:	6b 5f       	subi	r22, 0xFB	; 251
    96f0:	7f 4f       	sbci	r23, 0xFF	; 255
    96f2:	ce 01       	movw	r24, r28
    96f4:	01 96       	adiw	r24, 0x01	; 1
    96f6:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
				saved = 1;
    96fa:	81 e0       	ldi	r24, 0x01	; 1
    96fc:	0c 5f       	subi	r16, 0xFC	; 252
    96fe:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    9700:	0c 31       	cpi	r16, 0x1C	; 28
    9702:	11 05       	cpc	r17, r1
    9704:	b9 f6       	brne	.-82     	; 0x96b4 <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9706:	85 ec       	ldi	r24, 0xC5	; 197
    9708:	9b e0       	ldi	r25, 0x0B	; 11
    970a:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    970e:	28 96       	adiw	r28, 0x08	; 8
    9710:	0f b6       	in	r0, 0x3f	; 63
    9712:	f8 94       	cli
    9714:	de bf       	out	0x3e, r29	; 62
    9716:	0f be       	out	0x3f, r0	; 63
    9718:	cd bf       	out	0x3d, r28	; 61
    971a:	df 91       	pop	r29
    971c:	cf 91       	pop	r28
    971e:	1f 91       	pop	r17
    9720:	0f 91       	pop	r16
    9722:	ff 90       	pop	r15
    9724:	df 90       	pop	r13
    9726:	cf 90       	pop	r12
    9728:	08 95       	ret

0000972a <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    972a:	0f 93       	push	r16
    972c:	1f 93       	push	r17
    972e:	cf 93       	push	r28
    9730:	df 93       	push	r29
    9732:	8c 01       	movw	r16, r24
    9734:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    9736:	88 81       	ld	r24, Y
    9738:	81 30       	cpi	r24, 0x01	; 1
    973a:	69 f1       	breq	.+90     	; 0x9796 <position_shot+0x6c>
    973c:	98 f0       	brcs	.+38     	; 0x9764 <position_shot+0x3a>
    973e:	82 30       	cpi	r24, 0x02	; 2
    9740:	f1 f1       	breq	.+124    	; 0x97be <position_shot+0x94>
    9742:	83 30       	cpi	r24, 0x03	; 3
    9744:	09 f0       	breq	.+2      	; 0x9748 <position_shot+0x1e>
    9746:	59 c0       	rjmp	.+178    	; 0x97fa <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    9748:	f8 01       	movw	r30, r16
    974a:	83 81       	ldd	r24, Z+3	; 0x03
    974c:	94 81       	ldd	r25, Z+4	; 0x04
    974e:	a5 81       	ldd	r26, Z+5	; 0x05
    9750:	b6 81       	ldd	r27, Z+6	; 0x06
    9752:	8b 83       	std	Y+3, r24	; 0x03
    9754:	9c 83       	std	Y+4, r25	; 0x04
    9756:	ad 83       	std	Y+5, r26	; 0x05
    9758:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    975a:	20 e0       	ldi	r18, 0x00	; 0
    975c:	30 e0       	ldi	r19, 0x00	; 0
    975e:	40 e8       	ldi	r20, 0x80	; 128
    9760:	50 e4       	ldi	r21, 0x40	; 64
    9762:	41 c0       	rjmp	.+130    	; 0x97e6 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    9764:	20 e0       	ldi	r18, 0x00	; 0
    9766:	30 e0       	ldi	r19, 0x00	; 0
    9768:	40 e8       	ldi	r20, 0x80	; 128
    976a:	50 e4       	ldi	r21, 0x40	; 64
    976c:	f8 01       	movw	r30, r16
    976e:	63 81       	ldd	r22, Z+3	; 0x03
    9770:	74 81       	ldd	r23, Z+4	; 0x04
    9772:	85 81       	ldd	r24, Z+5	; 0x05
    9774:	96 81       	ldd	r25, Z+6	; 0x06
    9776:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    977a:	6b 83       	std	Y+3, r22	; 0x03
    977c:	7c 83       	std	Y+4, r23	; 0x04
    977e:	8d 83       	std	Y+5, r24	; 0x05
    9780:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    9782:	f8 01       	movw	r30, r16
    9784:	87 81       	ldd	r24, Z+7	; 0x07
    9786:	90 85       	ldd	r25, Z+8	; 0x08
    9788:	a1 85       	ldd	r26, Z+9	; 0x09
    978a:	b2 85       	ldd	r27, Z+10	; 0x0a
    978c:	8f 83       	std	Y+7, r24	; 0x07
    978e:	98 87       	std	Y+8, r25	; 0x08
    9790:	a9 87       	std	Y+9, r26	; 0x09
    9792:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    9794:	32 c0       	rjmp	.+100    	; 0x97fa <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    9796:	20 e0       	ldi	r18, 0x00	; 0
    9798:	30 e0       	ldi	r19, 0x00	; 0
    979a:	40 e0       	ldi	r20, 0x00	; 0
    979c:	51 e4       	ldi	r21, 0x41	; 65
    979e:	f8 01       	movw	r30, r16
    97a0:	63 81       	ldd	r22, Z+3	; 0x03
    97a2:	74 81       	ldd	r23, Z+4	; 0x04
    97a4:	85 81       	ldd	r24, Z+5	; 0x05
    97a6:	96 81       	ldd	r25, Z+6	; 0x06
    97a8:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    97ac:	6b 83       	std	Y+3, r22	; 0x03
    97ae:	7c 83       	std	Y+4, r23	; 0x04
    97b0:	8d 83       	std	Y+5, r24	; 0x05
    97b2:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    97b4:	20 e0       	ldi	r18, 0x00	; 0
    97b6:	30 e0       	ldi	r19, 0x00	; 0
    97b8:	40 e8       	ldi	r20, 0x80	; 128
    97ba:	50 e4       	ldi	r21, 0x40	; 64
    97bc:	13 c0       	rjmp	.+38     	; 0x97e4 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    97be:	20 e0       	ldi	r18, 0x00	; 0
    97c0:	30 e0       	ldi	r19, 0x00	; 0
    97c2:	40 e8       	ldi	r20, 0x80	; 128
    97c4:	50 e4       	ldi	r21, 0x40	; 64
    97c6:	f8 01       	movw	r30, r16
    97c8:	63 81       	ldd	r22, Z+3	; 0x03
    97ca:	74 81       	ldd	r23, Z+4	; 0x04
    97cc:	85 81       	ldd	r24, Z+5	; 0x05
    97ce:	96 81       	ldd	r25, Z+6	; 0x06
    97d0:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    97d4:	6b 83       	std	Y+3, r22	; 0x03
    97d6:	7c 83       	std	Y+4, r23	; 0x04
    97d8:	8d 83       	std	Y+5, r24	; 0x05
    97da:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    97dc:	20 e0       	ldi	r18, 0x00	; 0
    97de:	30 e0       	ldi	r19, 0x00	; 0
    97e0:	40 e0       	ldi	r20, 0x00	; 0
    97e2:	51 e4       	ldi	r21, 0x41	; 65
    97e4:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    97e6:	67 81       	ldd	r22, Z+7	; 0x07
    97e8:	70 85       	ldd	r23, Z+8	; 0x08
    97ea:	81 85       	ldd	r24, Z+9	; 0x09
    97ec:	92 85       	ldd	r25, Z+10	; 0x0a
    97ee:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    97f2:	6f 83       	std	Y+7, r22	; 0x07
    97f4:	78 87       	std	Y+8, r23	; 0x08
    97f6:	89 87       	std	Y+9, r24	; 0x09
    97f8:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    97fa:	df 91       	pop	r29
    97fc:	cf 91       	pop	r28
    97fe:	1f 91       	pop	r17
    9800:	0f 91       	pop	r16
    9802:	08 95       	ret

00009804 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    9804:	0f 93       	push	r16
    9806:	1f 93       	push	r17
    9808:	cf 93       	push	r28
    980a:	df 93       	push	r29
    980c:	8c 01       	movw	r16, r24
    980e:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    9810:	ac 01       	movw	r20, r24
    9812:	44 5f       	subi	r20, 0xF4	; 244
    9814:	5f 4f       	sbci	r21, 0xFF	; 255
    9816:	23 e0       	ldi	r18, 0x03	; 3
    9818:	6e e0       	ldi	r22, 0x0E	; 14
    981a:	84 e0       	ldi	r24, 0x04	; 4
    981c:	0e 94 68 48 	call	0x90d0	; 0x90d0 <LBPrintStr>
	Print(8, 14, &strMap[strOwns]);
    9820:	4e ed       	ldi	r20, 0xDE	; 222
    9822:	51 e0       	ldi	r21, 0x01	; 1
    9824:	6e e0       	ldi	r22, 0x0E	; 14
    9826:	70 e0       	ldi	r23, 0x00	; 0
    9828:	88 e0       	ldi	r24, 0x08	; 8
    982a:	90 e0       	ldi	r25, 0x00	; 0
    982c:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    9830:	ae 01       	movw	r20, r28
    9832:	44 5f       	subi	r20, 0xF4	; 244
    9834:	5f 4f       	sbci	r21, 0xFF	; 255
    9836:	23 e0       	ldi	r18, 0x03	; 3
    9838:	6e e0       	ldi	r22, 0x0E	; 14
    983a:	8d e0       	ldi	r24, 0x0D	; 13
    983c:	0e 94 68 48 	call	0x90d0	; 0x90d0 <LBPrintStr>
	Print(17, 14, &strMap[strBy]);
    9840:	43 ee       	ldi	r20, 0xE3	; 227
    9842:	51 e0       	ldi	r21, 0x01	; 1
    9844:	6e e0       	ldi	r22, 0x0E	; 14
    9846:	70 e0       	ldi	r23, 0x00	; 0
    9848:	81 e1       	ldi	r24, 0x11	; 17
    984a:	90 e0       	ldi	r25, 0x00	; 0
    984c:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    9850:	21 e0       	ldi	r18, 0x01	; 1
    9852:	f8 01       	movw	r30, r16
    9854:	40 89       	ldd	r20, Z+16	; 0x10
    9856:	6e e0       	ldi	r22, 0x0E	; 14
    9858:	70 e0       	ldi	r23, 0x00	; 0
    985a:	86 e1       	ldi	r24, 0x16	; 22
    985c:	90 e0       	ldi	r25, 0x00	; 0
    985e:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <PrintByte>
	PrintChar(23, 14, '-');
    9862:	4d e2       	ldi	r20, 0x2D	; 45
    9864:	6e e0       	ldi	r22, 0x0E	; 14
    9866:	70 e0       	ldi	r23, 0x00	; 0
    9868:	87 e1       	ldi	r24, 0x17	; 23
    986a:	90 e0       	ldi	r25, 0x00	; 0
    986c:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    9870:	21 e0       	ldi	r18, 0x01	; 1
    9872:	48 89       	ldd	r20, Y+16	; 0x10
    9874:	6e e0       	ldi	r22, 0x0E	; 14
    9876:	70 e0       	ldi	r23, 0x00	; 0
    9878:	8a e1       	ldi	r24, 0x1A	; 26
    987a:	90 e0       	ldi	r25, 0x00	; 0
}
    987c:	df 91       	pop	r29
    987e:	cf 91       	pop	r28
    9880:	1f 91       	pop	r17
    9882:	0f 91       	pop	r16
	Print(8, 14, &strMap[strOwns]);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, &strMap[strBy]);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    9884:	0c 94 37 47 	jmp	0x8e6e	; 0x8e6e <PrintByte>

00009888 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    9888:	0f 93       	push	r16
    988a:	1f 93       	push	r17
    988c:	cf 93       	push	r28
    988e:	df 93       	push	r29
    9890:	8c 01       	movw	r16, r24
    9892:	eb 01       	movw	r28, r22
    Print(9, 13, &strMap[strFinalScore]);
    9894:	46 ee       	ldi	r20, 0xE6	; 230
    9896:	51 e0       	ldi	r21, 0x01	; 1
    9898:	6d e0       	ldi	r22, 0x0D	; 13
    989a:	70 e0       	ldi	r23, 0x00	; 0
    989c:	89 e0       	ldi	r24, 0x09	; 9
    989e:	90 e0       	ldi	r25, 0x00	; 0
    98a0:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    98a4:	a8 01       	movw	r20, r16
    98a6:	44 5f       	subi	r20, 0xF4	; 244
    98a8:	5f 4f       	sbci	r21, 0xFF	; 255
    98aa:	23 e0       	ldi	r18, 0x03	; 3
    98ac:	6e e0       	ldi	r22, 0x0E	; 14
    98ae:	84 e0       	ldi	r24, 0x04	; 4
    98b0:	0e 94 68 48 	call	0x90d0	; 0x90d0 <LBPrintStr>
    Print(8, 14, &strMap[strOwns]);
    98b4:	4e ed       	ldi	r20, 0xDE	; 222
    98b6:	51 e0       	ldi	r21, 0x01	; 1
    98b8:	6e e0       	ldi	r22, 0x0E	; 14
    98ba:	70 e0       	ldi	r23, 0x00	; 0
    98bc:	88 e0       	ldi	r24, 0x08	; 8
    98be:	90 e0       	ldi	r25, 0x00	; 0
    98c0:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    98c4:	ae 01       	movw	r20, r28
    98c6:	44 5f       	subi	r20, 0xF4	; 244
    98c8:	5f 4f       	sbci	r21, 0xFF	; 255
    98ca:	23 e0       	ldi	r18, 0x03	; 3
    98cc:	6e e0       	ldi	r22, 0x0E	; 14
    98ce:	8d e0       	ldi	r24, 0x0D	; 13
    98d0:	0e 94 68 48 	call	0x90d0	; 0x90d0 <LBPrintStr>
    Print(17, 14, &strMap[strBy]);
    98d4:	43 ee       	ldi	r20, 0xE3	; 227
    98d6:	51 e0       	ldi	r21, 0x01	; 1
    98d8:	6e e0       	ldi	r22, 0x0E	; 14
    98da:	70 e0       	ldi	r23, 0x00	; 0
    98dc:	81 e1       	ldi	r24, 0x11	; 17
    98de:	90 e0       	ldi	r25, 0x00	; 0
    98e0:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
    PrintByte(22, 14, winner->score ,true);
    98e4:	21 e0       	ldi	r18, 0x01	; 1
    98e6:	f8 01       	movw	r30, r16
    98e8:	47 85       	ldd	r20, Z+15	; 0x0f
    98ea:	6e e0       	ldi	r22, 0x0E	; 14
    98ec:	70 e0       	ldi	r23, 0x00	; 0
    98ee:	86 e1       	ldi	r24, 0x16	; 22
    98f0:	90 e0       	ldi	r25, 0x00	; 0
    98f2:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <PrintByte>
    PrintChar(23, 14, '-');
    98f6:	4d e2       	ldi	r20, 0x2D	; 45
    98f8:	6e e0       	ldi	r22, 0x0E	; 14
    98fa:	70 e0       	ldi	r23, 0x00	; 0
    98fc:	87 e1       	ldi	r24, 0x17	; 23
    98fe:	90 e0       	ldi	r25, 0x00	; 0
    9900:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    9904:	21 e0       	ldi	r18, 0x01	; 1
    9906:	4f 85       	ldd	r20, Y+15	; 0x0f
    9908:	6e e0       	ldi	r22, 0x0E	; 14
    990a:	70 e0       	ldi	r23, 0x00	; 0
    990c:	8a e1       	ldi	r24, 0x1A	; 26
    990e:	90 e0       	ldi	r25, 0x00	; 0
}
    9910:	df 91       	pop	r29
    9912:	cf 91       	pop	r28
    9914:	1f 91       	pop	r17
    9916:	0f 91       	pop	r16
    Print(8, 14, &strMap[strOwns]);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, &strMap[strBy]);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    9918:	0c 94 37 47 	jmp	0x8e6e	; 0x8e6e <PrintByte>

0000991c <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    991c:	cf 93       	push	r28
    991e:	df 93       	push	r29
    9920:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    9922:	ac 01       	movw	r20, r24
    9924:	44 5f       	subi	r20, 0xF4	; 244
    9926:	5f 4f       	sbci	r21, 0xFF	; 255
    9928:	23 e0       	ldi	r18, 0x03	; 3
    992a:	60 e0       	ldi	r22, 0x00	; 0
    992c:	8a e0       	ldi	r24, 0x0A	; 10
    992e:	8c 0f       	add	r24, r28
    9930:	0e 94 68 48 	call	0x90d0	; 0x90d0 <LBPrintStr>
	Print(x, 0, &strMap[strScore]);
    9934:	d0 e0       	ldi	r29, 0x00	; 0
    9936:	47 e9       	ldi	r20, 0x97	; 151
    9938:	52 e0       	ldi	r21, 0x02	; 2
    993a:	60 e0       	ldi	r22, 0x00	; 0
    993c:	70 e0       	ldi	r23, 0x00	; 0
    993e:	ce 01       	movw	r24, r28
    9940:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(x, 1, &strMap[strTotal]);
    9944:	4e e9       	ldi	r20, 0x9E	; 158
    9946:	52 e0       	ldi	r21, 0x02	; 2
    9948:	61 e0       	ldi	r22, 0x01	; 1
    994a:	70 e0       	ldi	r23, 0x00	; 0
    994c:	ce 01       	movw	r24, r28
	
}
    994e:	df 91       	pop	r29
    9950:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, &strMap[strScore]);
	Print(x, 1, &strMap[strTotal]);
    9952:	0c 94 6a 47 	jmp	0x8ed4	; 0x8ed4 <Print>

00009956 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    9956:	0f 93       	push	r16
    9958:	1f 93       	push	r17
    995a:	cf 93       	push	r28
    995c:	df 93       	push	r29
    995e:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    9960:	c6 2f       	mov	r28, r22
    9962:	d0 e0       	ldi	r29, 0x00	; 0
    9964:	28 96       	adiw	r28, 0x08	; 8
    9966:	20 e0       	ldi	r18, 0x00	; 0
    9968:	fc 01       	movw	r30, r24
    996a:	40 89       	ldd	r20, Z+16	; 0x10
    996c:	60 e0       	ldi	r22, 0x00	; 0
    996e:	70 e0       	ldi	r23, 0x00	; 0
    9970:	ce 01       	movw	r24, r28
    9972:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    9976:	20 e0       	ldi	r18, 0x00	; 0
    9978:	f8 01       	movw	r30, r16
    997a:	47 85       	ldd	r20, Z+15	; 0x0f
    997c:	61 e0       	ldi	r22, 0x01	; 1
    997e:	70 e0       	ldi	r23, 0x00	; 0
    9980:	ce 01       	movw	r24, r28
}
    9982:	df 91       	pop	r29
    9984:	cf 91       	pop	r28
    9986:	1f 91       	pop	r17
    9988:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    998a:	0c 94 37 47 	jmp	0x8e6e	; 0x8e6e <PrintByte>

0000998e <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    998e:	cf 93       	push	r28
    9990:	df 93       	push	r29
    9992:	ec 01       	movw	r28, r24
    9994:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    9996:	9d 89       	ldd	r25, Y+21	; 0x15
    9998:	9a 35       	cpi	r25, 0x5A	; 90
    999a:	99 f0       	breq	.+38     	; 0x99c2 <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    999c:	91 11       	cpse	r25, r1
    999e:	0c c0       	rjmp	.+24     	; 0x99b8 <render_banter+0x2a>
		{
			Print(banter_x, 2, &strMap[banter_map+player->banter_index*15]);
    99a0:	4e 89       	ldd	r20, Y+22	; 0x16
    99a2:	9f e0       	ldi	r25, 0x0F	; 15
    99a4:	49 9f       	mul	r20, r25
    99a6:	a0 01       	movw	r20, r0
    99a8:	11 24       	eor	r1, r1
    99aa:	4e 50       	subi	r20, 0x0E	; 14
    99ac:	5e 4f       	sbci	r21, 0xFE	; 254
    99ae:	62 e0       	ldi	r22, 0x02	; 2
    99b0:	70 e0       	ldi	r23, 0x00	; 0
    99b2:	90 e0       	ldi	r25, 0x00	; 0
    99b4:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    99b8:	8d 89       	ldd	r24, Y+21	; 0x15
    99ba:	8f 5f       	subi	r24, 0xFF	; 255
    99bc:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &strMap[banter_map+player->banter_index*15]);
		}
		clear_banter = 1;
    99be:	41 e0       	ldi	r20, 0x01	; 1
    99c0:	0a c0       	rjmp	.+20     	; 0x99d6 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    99c2:	44 23       	and	r20, r20
    99c4:	41 f0       	breq	.+16     	; 0x99d6 <render_banter+0x48>
	{
		Print(banter_x, 2, &strMap[strBanterClear]);
    99c6:	48 e8       	ldi	r20, 0x88	; 136
    99c8:	52 e0       	ldi	r21, 0x02	; 2
    99ca:	62 e0       	ldi	r22, 0x02	; 2
    99cc:	70 e0       	ldi	r23, 0x00	; 0
    99ce:	90 e0       	ldi	r25, 0x00	; 0
    99d0:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
    99d4:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    99d6:	84 2f       	mov	r24, r20
    99d8:	df 91       	pop	r29
    99da:	cf 91       	pop	r28
    99dc:	08 95       	ret

000099de <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    99de:	ef 92       	push	r14
    99e0:	ff 92       	push	r15
    99e2:	0f 93       	push	r16
    99e4:	1f 93       	push	r17
    99e6:	cf 93       	push	r28
    99e8:	df 93       	push	r29
    99ea:	1f 92       	push	r1
    99ec:	cd b7       	in	r28, 0x3d	; 61
    99ee:	de b7       	in	r29, 0x3e	; 62
    99f0:	7c 01       	movw	r14, r24
    99f2:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    99f4:	fc 01       	movw	r30, r24
    99f6:	67 81       	ldd	r22, Z+7	; 0x07
    99f8:	70 85       	ldd	r23, Z+8	; 0x08
    99fa:	81 85       	ldd	r24, Z+9	; 0x09
    99fc:	92 85       	ldd	r25, Z+10	; 0x0a
    99fe:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    9a02:	46 2f       	mov	r20, r22
    9a04:	f7 01       	movw	r30, r14
    9a06:	63 81       	ldd	r22, Z+3	; 0x03
    9a08:	74 81       	ldd	r23, Z+4	; 0x04
    9a0a:	85 81       	ldd	r24, Z+5	; 0x05
    9a0c:	96 81       	ldd	r25, Z+6	; 0x06
    9a0e:	49 83       	std	Y+1, r20	; 0x01
    9a10:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    9a14:	02 e0       	ldi	r16, 0x02	; 2
    9a16:	22 e0       	ldi	r18, 0x02	; 2
    9a18:	49 81       	ldd	r20, Y+1	; 0x01
    9a1a:	81 2f       	mov	r24, r17
    9a1c:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <MoveSprite>
}
    9a20:	0f 90       	pop	r0
    9a22:	df 91       	pop	r29
    9a24:	cf 91       	pop	r28
    9a26:	1f 91       	pop	r17
    9a28:	0f 91       	pop	r16
    9a2a:	ff 90       	pop	r15
    9a2c:	ef 90       	pop	r14
    9a2e:	08 95       	ret

00009a30 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    9a30:	ef 92       	push	r14
    9a32:	ff 92       	push	r15
    9a34:	0f 93       	push	r16
    9a36:	1f 93       	push	r17
    9a38:	cf 93       	push	r28
    9a3a:	df 93       	push	r29
    9a3c:	1f 92       	push	r1
    9a3e:	cd b7       	in	r28, 0x3d	; 61
    9a40:	de b7       	in	r29, 0x3e	; 62
    9a42:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    9a44:	81 89       	ldd	r24, Z+17	; 0x11
    9a46:	88 23       	and	r24, r24
    9a48:	b9 f0       	breq	.+46     	; 0x9a78 <render_shot+0x48>
    9a4a:	16 2f       	mov	r17, r22
    9a4c:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    9a4e:	67 a5       	ldd	r22, Z+47	; 0x2f
    9a50:	70 a9       	ldd	r23, Z+48	; 0x30
    9a52:	81 a9       	ldd	r24, Z+49	; 0x31
    9a54:	92 a9       	ldd	r25, Z+50	; 0x32
    9a56:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    9a5a:	46 2f       	mov	r20, r22
    9a5c:	f7 01       	movw	r30, r14
    9a5e:	63 a5       	ldd	r22, Z+43	; 0x2b
    9a60:	74 a5       	ldd	r23, Z+44	; 0x2c
    9a62:	85 a5       	ldd	r24, Z+45	; 0x2d
    9a64:	96 a5       	ldd	r25, Z+46	; 0x2e
    9a66:	49 83       	std	Y+1, r20	; 0x01
    9a68:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    9a6c:	01 e0       	ldi	r16, 0x01	; 1
    9a6e:	21 e0       	ldi	r18, 0x01	; 1
    9a70:	49 81       	ldd	r20, Y+1	; 0x01
    9a72:	81 2f       	mov	r24, r17
    9a74:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <MoveSprite>
			sprite_index++;
		}
	}
}
    9a78:	0f 90       	pop	r0
    9a7a:	df 91       	pop	r29
    9a7c:	cf 91       	pop	r28
    9a7e:	1f 91       	pop	r17
    9a80:	0f 91       	pop	r16
    9a82:	ff 90       	pop	r15
    9a84:	ef 90       	pop	r14
    9a86:	08 95       	ret

00009a88 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    9a88:	cf 92       	push	r12
    9a8a:	df 92       	push	r13
    9a8c:	ef 92       	push	r14
    9a8e:	ff 92       	push	r15
    9a90:	0f 93       	push	r16
    9a92:	1f 93       	push	r17
    9a94:	cf 93       	push	r28
    9a96:	df 93       	push	r29
    9a98:	1f 92       	push	r1
    9a9a:	cd b7       	in	r28, 0x3d	; 61
    9a9c:	de b7       	in	r29, 0x3e	; 62
    9a9e:	8c 01       	movw	r16, r24
    9aa0:	0f 5f       	subi	r16, 0xFF	; 255
    9aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    9aa4:	7c 01       	movw	r14, r24
    9aa6:	29 e1       	ldi	r18, 0x19	; 25
    9aa8:	e2 0e       	add	r14, r18
    9aaa:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    9aac:	8e e1       	ldi	r24, 0x1E	; 30
    9aae:	c8 2e       	mov	r12, r24
    9ab0:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    9ab2:	f8 01       	movw	r30, r16
    9ab4:	82 85       	ldd	r24, Z+10	; 0x0a
    9ab6:	93 85       	ldd	r25, Z+11	; 0x0b
    9ab8:	89 2b       	or	r24, r25
    9aba:	e1 f0       	breq	.+56     	; 0x9af4 <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    9abc:	be 01       	movw	r22, r28
    9abe:	6f 5f       	subi	r22, 0xFF	; 255
    9ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    9ac2:	c8 01       	movw	r24, r16
    9ac4:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <LBGetNextFrame>
    9ac8:	9c 01       	movw	r18, r24
			if (looped)
    9aca:	49 81       	ldd	r20, Y+1	; 0x01
    9acc:	f8 01       	movw	r30, r16
    9ace:	82 85       	ldd	r24, Z+10	; 0x0a
    9ad0:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    9ad2:	b6 01       	movw	r22, r12
    9ad4:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    9ad8:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    9ada:	44 23       	and	r20, r20
    9adc:	41 f0       	breq	.+16     	; 0x9aee <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    9ade:	40 e0       	ldi	r20, 0x00	; 0
    9ae0:	50 e0       	ldi	r21, 0x00	; 0
    9ae2:	0e 94 63 39 	call	0x72c6	; 0x72c6 <SetTile>
				ta->anims[i].tile_index = 0;
    9ae6:	f8 01       	movw	r30, r16
    9ae8:	13 86       	std	Z+11, r1	; 0x0b
    9aea:	12 86       	std	Z+10, r1	; 0x0a
    9aec:	03 c0       	rjmp	.+6      	; 0x9af4 <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    9aee:	a9 01       	movw	r20, r18
    9af0:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <DrawMap2>
    9af4:	04 5f       	subi	r16, 0xF4	; 244
    9af6:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    9af8:	0e 15       	cp	r16, r14
    9afa:	1f 05       	cpc	r17, r15
    9afc:	d1 f6       	brne	.-76     	; 0x9ab2 <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    9afe:	0f 90       	pop	r0
    9b00:	df 91       	pop	r29
    9b02:	cf 91       	pop	r28
    9b04:	1f 91       	pop	r17
    9b06:	0f 91       	pop	r16
    9b08:	ff 90       	pop	r15
    9b0a:	ef 90       	pop	r14
    9b0c:	df 90       	pop	r13
    9b0e:	cf 90       	pop	r12
    9b10:	08 95       	ret

00009b12 <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    9b12:	ff 92       	push	r15
    9b14:	0f 93       	push	r16
    9b16:	1f 93       	push	r17
    9b18:	cf 93       	push	r28
    9b1a:	df 93       	push	r29
    9b1c:	1f 92       	push	r1
    9b1e:	cd b7       	in	r28, 0x3d	; 61
    9b20:	de b7       	in	r29, 0x3e	; 62
    9b22:	8c 01       	movw	r16, r24
    9b24:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    9b26:	fc 01       	movw	r30, r24
    9b28:	84 89       	ldd	r24, Z+20	; 0x14
    9b2a:	80 ff       	sbrs	r24, 0
    9b2c:	18 c0       	rjmp	.+48     	; 0x9b5e <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    9b2e:	be 01       	movw	r22, r28
    9b30:	6f 5f       	subi	r22, 0xFF	; 255
    9b32:	7f 4f       	sbci	r23, 0xFF	; 255
    9b34:	c8 01       	movw	r24, r16
    9b36:	80 5a       	subi	r24, 0xA0	; 160
    9b38:	9f 4f       	sbci	r25, 0xFF	; 255
    9b3a:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    9b3e:	29 81       	ldd	r18, Y+1	; 0x01
    9b40:	22 23       	and	r18, r18
    9b42:	09 f4       	brne	.+2      	; 0x9b46 <tank_map+0x34>
    9b44:	5a c0       	rjmp	.+180    	; 0x9bfa <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    9b46:	f8 01       	movw	r30, r16
    9b48:	84 89       	ldd	r24, Z+20	; 0x14
    9b4a:	91 e0       	ldi	r25, 0x01	; 1
    9b4c:	98 27       	eor	r25, r24
    9b4e:	94 8b       	std	Z+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    9b50:	c8 01       	movw	r24, r16
    9b52:	0e 94 e5 4a 	call	0x95ca	; 0x95ca <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9b56:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    9b58:	89 e6       	ldi	r24, 0x69	; 105
    9b5a:	94 e2       	ldi	r25, 0x24	; 36
    9b5c:	4f c0       	rjmp	.+158    	; 0x9bfc <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    9b5e:	f8 01       	movw	r30, r16
    9b60:	97 89       	ldd	r25, Z+23	; 0x17
    9b62:	98 37       	cpi	r25, 0x78	; 120
    9b64:	11 f0       	breq	.+4      	; 0x9b6a <tank_map+0x58>
		{
			player->grace_frame++;
    9b66:	9f 5f       	subi	r25, 0xFF	; 255
    9b68:	97 8b       	std	Z+23, r25	; 0x17
		}
		switch (player->shared.direction)
    9b6a:	f8 01       	movw	r30, r16
    9b6c:	90 81       	ld	r25, Z
    9b6e:	91 30       	cpi	r25, 0x01	; 1
    9b70:	79 f0       	breq	.+30     	; 0x9b90 <tank_map+0x7e>
    9b72:	f8 f0       	brcs	.+62     	; 0x9bb2 <tank_map+0xa0>
    9b74:	92 30       	cpi	r25, 0x02	; 2
    9b76:	99 f0       	breq	.+38     	; 0x9b9e <tank_map+0x8c>
    9b78:	93 30       	cpi	r25, 0x03	; 3
    9b7a:	d9 f4       	brne	.+54     	; 0x9bb2 <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    9b7c:	be 01       	movw	r22, r28
    9b7e:	6f 5f       	subi	r22, 0xFF	; 255
    9b80:	7f 4f       	sbci	r23, 0xFF	; 255
    9b82:	c8 01       	movw	r24, r16
    9b84:	8a 5a       	subi	r24, 0xAA	; 170
    9b86:	9f 4f       	sbci	r25, 0xFF	; 255
    9b88:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <LBGetNextFrame>
    9b8c:	41 e0       	ldi	r20, 0x01	; 1
    9b8e:	1a c0       	rjmp	.+52     	; 0x9bc4 <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    9b90:	be 01       	movw	r22, r28
    9b92:	6f 5f       	subi	r22, 0xFF	; 255
    9b94:	7f 4f       	sbci	r23, 0xFF	; 255
    9b96:	c8 01       	movw	r24, r16
    9b98:	8a 5a       	subi	r24, 0xAA	; 170
    9b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    9b9c:	10 c0       	rjmp	.+32     	; 0x9bbe <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    9b9e:	be 01       	movw	r22, r28
    9ba0:	6f 5f       	subi	r22, 0xFF	; 255
    9ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    9ba4:	c8 01       	movw	r24, r16
    9ba6:	84 5b       	subi	r24, 0xB4	; 180
    9ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    9baa:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <LBGetNextFrame>
    9bae:	42 e0       	ldi	r20, 0x02	; 2
    9bb0:	09 c0       	rjmp	.+18     	; 0x9bc4 <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    9bb2:	be 01       	movw	r22, r28
    9bb4:	6f 5f       	subi	r22, 0xFF	; 255
    9bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    9bb8:	c8 01       	movw	r24, r16
    9bba:	84 5b       	subi	r24, 0xB4	; 180
    9bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    9bbe:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <LBGetNextFrame>
    9bc2:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    9bc4:	f8 01       	movw	r30, r16
    9bc6:	27 89       	ldd	r18, Z+23	; 0x17
    9bc8:	28 37       	cpi	r18, 0x78	; 120
    9bca:	31 f0       	breq	.+12     	; 0x9bd8 <tank_map+0xc6>
    9bcc:	20 91 38 0b 	lds	r18, 0x0B38
    9bd0:	22 23       	and	r18, r18
    9bd2:	11 f0       	breq	.+4      	; 0x9bd8 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    9bd4:	89 e6       	ldi	r24, 0x69	; 105
    9bd6:	94 e2       	ldi	r25, 0x24	; 36
		}
		toggle_counter--;
    9bd8:	20 91 03 01 	lds	r18, 0x0103
    9bdc:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    9bde:	19 f0       	breq	.+6      	; 0x9be6 <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    9be0:	20 93 03 01 	sts	0x0103, r18
    9be4:	0b c0       	rjmp	.+22     	; 0x9bfc <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    9be6:	24 e1       	ldi	r18, 0x14	; 20
    9be8:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    9bec:	30 91 38 0b 	lds	r19, 0x0B38
    9bf0:	21 e0       	ldi	r18, 0x01	; 1
    9bf2:	23 27       	eor	r18, r19
    9bf4:	20 93 38 0b 	sts	0x0B38, r18
    9bf8:	01 c0       	rjmp	.+2      	; 0x9bfc <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9bfa:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    9bfc:	bc 01       	movw	r22, r24
    9bfe:	8f 2d       	mov	r24, r15
    9c00:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    9c04:	84 e0       	ldi	r24, 0x04	; 4
    9c06:	8f 0d       	add	r24, r15
    9c08:	0f 90       	pop	r0
    9c0a:	df 91       	pop	r29
    9c0c:	cf 91       	pop	r28
    9c0e:	1f 91       	pop	r17
    9c10:	0f 91       	pop	r16
    9c12:	ff 90       	pop	r15
    9c14:	08 95       	ret

00009c16 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    9c16:	1f 93       	push	r17
    9c18:	cf 93       	push	r28
    9c1a:	df 93       	push	r29
    9c1c:	1f 92       	push	r1
    9c1e:	cd b7       	in	r28, 0x3d	; 61
    9c20:	de b7       	in	r29, 0x3e	; 62
    9c22:	16 2f       	mov	r17, r22
	char looped = 0;
    9c24:	19 82       	std	Y+1, r1	; 0x01
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    9c26:	fc 01       	movw	r30, r24
    9c28:	26 a9       	ldd	r18, Z+54	; 0x36
    9c2a:	22 23       	and	r18, r18
    9c2c:	39 f1       	breq	.+78     	; 0x9c7c <shot_map+0x66>
		{
			switch (shot->shared.direction)
    9c2e:	20 a5       	ldd	r18, Z+40	; 0x28
    9c30:	21 30       	cpi	r18, 0x01	; 1
    9c32:	71 f0       	breq	.+28     	; 0x9c50 <shot_map+0x3a>
    9c34:	f0 f0       	brcs	.+60     	; 0x9c72 <shot_map+0x5c>
    9c36:	22 30       	cpi	r18, 0x02	; 2
    9c38:	a1 f0       	breq	.+40     	; 0x9c62 <shot_map+0x4c>
    9c3a:	23 30       	cpi	r18, 0x03	; 3
    9c3c:	d1 f4       	brne	.+52     	; 0x9c72 <shot_map+0x5c>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    9c3e:	be 01       	movw	r22, r28
    9c40:	6f 5f       	subi	r22, 0xFF	; 255
    9c42:	7f 4f       	sbci	r23, 0xFF	; 255
    9c44:	8e 5b       	subi	r24, 0xBE	; 190
    9c46:	9f 4f       	sbci	r25, 0xFF	; 255
    9c48:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <LBGetNextFrame>
    9c4c:	41 e0       	ldi	r20, 0x01	; 1
    9c4e:	19 c0       	rjmp	.+50     	; 0x9c82 <shot_map+0x6c>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    9c50:	be 01       	movw	r22, r28
    9c52:	6f 5f       	subi	r22, 0xFF	; 255
    9c54:	7f 4f       	sbci	r23, 0xFF	; 255
    9c56:	8e 5b       	subi	r24, 0xBE	; 190
    9c58:	9f 4f       	sbci	r25, 0xFF	; 255
    9c5a:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <LBGetNextFrame>
    9c5e:	40 e0       	ldi	r20, 0x00	; 0
    9c60:	10 c0       	rjmp	.+32     	; 0x9c82 <shot_map+0x6c>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    9c62:	be 01       	movw	r22, r28
    9c64:	6f 5f       	subi	r22, 0xFF	; 255
    9c66:	7f 4f       	sbci	r23, 0xFF	; 255
    9c68:	c8 96       	adiw	r24, 0x38	; 56
    9c6a:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <LBGetNextFrame>
    9c6e:	42 e0       	ldi	r20, 0x02	; 2
    9c70:	08 c0       	rjmp	.+16     	; 0x9c82 <shot_map+0x6c>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    9c72:	be 01       	movw	r22, r28
    9c74:	6f 5f       	subi	r22, 0xFF	; 255
    9c76:	7f 4f       	sbci	r23, 0xFF	; 255
    9c78:	c8 96       	adiw	r24, 0x38	; 56
    9c7a:	ef cf       	rjmp	.-34     	; 0x9c5a <shot_map+0x44>
    9c7c:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    9c7e:	89 e6       	ldi	r24, 0x69	; 105
    9c80:	94 e2       	ldi	r25, 0x24	; 36
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    9c82:	bc 01       	movw	r22, r24
    9c84:	81 2f       	mov	r24, r17
    9c86:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    9c8a:	81 e0       	ldi	r24, 0x01	; 1
    9c8c:	81 0f       	add	r24, r17
    9c8e:	0f 90       	pop	r0
    9c90:	df 91       	pop	r29
    9c92:	cf 91       	pop	r28
    9c94:	1f 91       	pop	r17
    9c96:	08 95       	ret

00009c98 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    9c98:	cf 93       	push	r28
    9c9a:	df 93       	push	r29
    9c9c:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    9c9e:	88 81       	ld	r24, Y
	{
		tile = sprite->y / 8 + 1;
    9ca0:	20 e0       	ldi	r18, 0x00	; 0
    9ca2:	30 e0       	ldi	r19, 0x00	; 0
    9ca4:	40 e0       	ldi	r20, 0x00	; 0
    9ca6:	5e e3       	ldi	r21, 0x3E	; 62
/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
	u8 tile;
	
	if (sprite->direction == D_UP)
    9ca8:	81 11       	cpse	r24, r1
    9caa:	0d c0       	rjmp	.+26     	; 0x9cc6 <recoil_sprite+0x2e>
	{
		tile = sprite->y / 8 + 1;
    9cac:	6f 81       	ldd	r22, Y+7	; 0x07
    9cae:	78 85       	ldd	r23, Y+8	; 0x08
    9cb0:	89 85       	ldd	r24, Y+9	; 0x09
    9cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    9cb4:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    9cb8:	20 e0       	ldi	r18, 0x00	; 0
    9cba:	30 e0       	ldi	r19, 0x00	; 0
    9cbc:	40 e8       	ldi	r20, 0x80	; 128
    9cbe:	5f e3       	ldi	r21, 0x3F	; 63
    9cc0:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    9cc4:	11 c0       	rjmp	.+34     	; 0x9ce8 <recoil_sprite+0x50>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    9cc6:	81 30       	cpi	r24, 0x01	; 1
    9cc8:	39 f4       	brne	.+14     	; 0x9cd8 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    9cca:	6b 81       	ldd	r22, Y+3	; 0x03
    9ccc:	7c 81       	ldd	r23, Y+4	; 0x04
    9cce:	8d 81       	ldd	r24, Y+5	; 0x05
    9cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    9cd2:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    9cd6:	25 c0       	rjmp	.+74     	; 0x9d22 <recoil_sprite+0x8a>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    9cd8:	82 30       	cpi	r24, 0x02	; 2
    9cda:	b9 f4       	brne	.+46     	; 0x9d0a <recoil_sprite+0x72>
	{
		tile = sprite->y / 8;
    9cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    9cde:	78 85       	ldd	r23, Y+8	; 0x08
    9ce0:	89 85       	ldd	r24, Y+9	; 0x09
    9ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    9ce4:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    9ce8:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
		sprite->y = tile * 8;
    9cec:	88 e0       	ldi	r24, 0x08	; 8
    9cee:	68 9f       	mul	r22, r24
    9cf0:	b0 01       	movw	r22, r0
    9cf2:	11 24       	eor	r1, r1
    9cf4:	88 27       	eor	r24, r24
    9cf6:	77 fd       	sbrc	r23, 7
    9cf8:	80 95       	com	r24
    9cfa:	98 2f       	mov	r25, r24
    9cfc:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    9d00:	6f 83       	std	Y+7, r22	; 0x07
    9d02:	78 87       	std	Y+8, r23	; 0x08
    9d04:	89 87       	std	Y+9, r24	; 0x09
    9d06:	9a 87       	std	Y+10, r25	; 0x0a
    9d08:	1c c0       	rjmp	.+56     	; 0x9d42 <recoil_sprite+0xaa>
	}
	else
	{
		tile = sprite->x / 8 + 1;
    9d0a:	6b 81       	ldd	r22, Y+3	; 0x03
    9d0c:	7c 81       	ldd	r23, Y+4	; 0x04
    9d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    9d10:	9e 81       	ldd	r25, Y+6	; 0x06
    9d12:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    9d16:	20 e0       	ldi	r18, 0x00	; 0
    9d18:	30 e0       	ldi	r19, 0x00	; 0
    9d1a:	40 e8       	ldi	r20, 0x80	; 128
    9d1c:	5f e3       	ldi	r21, 0x3F	; 63
    9d1e:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    9d22:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
		sprite->x = tile * 8;
    9d26:	88 e0       	ldi	r24, 0x08	; 8
    9d28:	68 9f       	mul	r22, r24
    9d2a:	b0 01       	movw	r22, r0
    9d2c:	11 24       	eor	r1, r1
    9d2e:	88 27       	eor	r24, r24
    9d30:	77 fd       	sbrc	r23, 7
    9d32:	80 95       	com	r24
    9d34:	98 2f       	mov	r25, r24
    9d36:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    9d3a:	6b 83       	std	Y+3, r22	; 0x03
    9d3c:	7c 83       	std	Y+4, r23	; 0x04
    9d3e:	8d 83       	std	Y+5, r24	; 0x05
    9d40:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    9d42:	81 e0       	ldi	r24, 0x01	; 1
    9d44:	8a 83       	std	Y+2, r24	; 0x02
}
    9d46:	df 91       	pop	r29
    9d48:	cf 91       	pop	r28
    9d4a:	08 95       	ret

00009d4c <recoil_sprite_fine>:

void recoil_sprite_fine(SpriteShared* sprite)
{	
    9d4c:	cf 93       	push	r28
    9d4e:	df 93       	push	r29
    9d50:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    9d52:	88 81       	ld	r24, Y
    9d54:	69 81       	ldd	r22, Y+1	; 0x01
	{
		sprite->y += FRAME_TIME * sprite->speed;
    9d56:	70 e0       	ldi	r23, 0x00	; 0
	sprite->recoiled = 1;
}

void recoil_sprite_fine(SpriteShared* sprite)
{	
	if (sprite->direction == D_UP)
    9d58:	81 11       	cpse	r24, r1
    9d5a:	13 c0       	rjmp	.+38     	; 0x9d82 <recoil_sprite_fine+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    9d5c:	80 e0       	ldi	r24, 0x00	; 0
    9d5e:	90 e0       	ldi	r25, 0x00	; 0
    9d60:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    9d64:	25 e6       	ldi	r18, 0x65	; 101
    9d66:	38 e8       	ldi	r19, 0x88	; 136
    9d68:	48 e8       	ldi	r20, 0x88	; 136
    9d6a:	5c e3       	ldi	r21, 0x3C	; 60
    9d6c:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    9d70:	9b 01       	movw	r18, r22
    9d72:	ac 01       	movw	r20, r24
    9d74:	6f 81       	ldd	r22, Y+7	; 0x07
    9d76:	78 85       	ldd	r23, Y+8	; 0x08
    9d78:	89 85       	ldd	r24, Y+9	; 0x09
    9d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    9d7c:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    9d80:	29 c0       	rjmp	.+82     	; 0x9dd4 <recoil_sprite_fine+0x88>
	}
	else if (sprite->direction == D_RIGHT)
    9d82:	81 30       	cpi	r24, 0x01	; 1
    9d84:	99 f4       	brne	.+38     	; 0x9dac <recoil_sprite_fine+0x60>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    9d86:	80 e0       	ldi	r24, 0x00	; 0
    9d88:	90 e0       	ldi	r25, 0x00	; 0
    9d8a:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    9d8e:	25 e6       	ldi	r18, 0x65	; 101
    9d90:	38 e8       	ldi	r19, 0x88	; 136
    9d92:	48 e8       	ldi	r20, 0x88	; 136
    9d94:	5c e3       	ldi	r21, 0x3C	; 60
    9d96:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    9d9a:	9b 01       	movw	r18, r22
    9d9c:	ac 01       	movw	r20, r24
    9d9e:	6b 81       	ldd	r22, Y+3	; 0x03
    9da0:	7c 81       	ldd	r23, Y+4	; 0x04
    9da2:	8d 81       	ldd	r24, Y+5	; 0x05
    9da4:	9e 81       	ldd	r25, Y+6	; 0x06
    9da6:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    9daa:	2b c0       	rjmp	.+86     	; 0x9e02 <recoil_sprite_fine+0xb6>
	}
	else if (sprite->direction == D_DOWN)
    9dac:	82 30       	cpi	r24, 0x02	; 2
    9dae:	b9 f4       	brne	.+46     	; 0x9dde <recoil_sprite_fine+0x92>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    9db0:	80 e0       	ldi	r24, 0x00	; 0
    9db2:	90 e0       	ldi	r25, 0x00	; 0
    9db4:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    9db8:	25 e6       	ldi	r18, 0x65	; 101
    9dba:	38 e8       	ldi	r19, 0x88	; 136
    9dbc:	48 e8       	ldi	r20, 0x88	; 136
    9dbe:	5c e3       	ldi	r21, 0x3C	; 60
    9dc0:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    9dc4:	9b 01       	movw	r18, r22
    9dc6:	ac 01       	movw	r20, r24
    9dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    9dca:	78 85       	ldd	r23, Y+8	; 0x08
    9dcc:	89 85       	ldd	r24, Y+9	; 0x09
    9dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    9dd0:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    9dd4:	6f 83       	std	Y+7, r22	; 0x07
    9dd6:	78 87       	std	Y+8, r23	; 0x08
    9dd8:	89 87       	std	Y+9, r24	; 0x09
    9dda:	9a 87       	std	Y+10, r25	; 0x0a
    9ddc:	16 c0       	rjmp	.+44     	; 0x9e0a <recoil_sprite_fine+0xbe>
	}
	else
	{
		sprite->x += FRAME_TIME * sprite->speed;
    9dde:	80 e0       	ldi	r24, 0x00	; 0
    9de0:	90 e0       	ldi	r25, 0x00	; 0
    9de2:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    9de6:	25 e6       	ldi	r18, 0x65	; 101
    9de8:	38 e8       	ldi	r19, 0x88	; 136
    9dea:	48 e8       	ldi	r20, 0x88	; 136
    9dec:	5c e3       	ldi	r21, 0x3C	; 60
    9dee:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    9df2:	9b 01       	movw	r18, r22
    9df4:	ac 01       	movw	r20, r24
    9df6:	6b 81       	ldd	r22, Y+3	; 0x03
    9df8:	7c 81       	ldd	r23, Y+4	; 0x04
    9dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    9dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    9dfe:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    9e02:	6b 83       	std	Y+3, r22	; 0x03
    9e04:	7c 83       	std	Y+4, r23	; 0x04
    9e06:	8d 83       	std	Y+5, r24	; 0x05
    9e08:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    9e0a:	81 e0       	ldi	r24, 0x01	; 1
    9e0c:	8a 83       	std	Y+2, r24	; 0x02
}
    9e0e:	df 91       	pop	r29
    9e10:	cf 91       	pop	r28
    9e12:	08 95       	ret

00009e14 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9e14:	86 56       	subi	r24, 0x66	; 102
    9e16:	93 4f       	sbci	r25, 0xF3	; 243
    9e18:	fc 01       	movw	r30, r24
    9e1a:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    9e1c:	81 30       	cpi	r24, 0x01	; 1
    9e1e:	21 f0       	breq	.+8      	; 0x9e28 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    9e20:	82 30       	cpi	r24, 0x02	; 2
    9e22:	21 f0       	breq	.+8      	; 0x9e2c <solid_square_tile+0x18>

	return 0;
    9e24:	80 e0       	ldi	r24, 0x00	; 0
    9e26:	08 95       	ret
    9e28:	81 e0       	ldi	r24, 0x01	; 1
    9e2a:	08 95       	ret
    9e2c:	82 e0       	ldi	r24, 0x02	; 2
}
    9e2e:	08 95       	ret

00009e30 <solid_tile>:

u8 solid_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9e30:	86 56       	subi	r24, 0x66	; 102
    9e32:	93 4f       	sbci	r25, 0xF3	; 243
    9e34:	fc 01       	movw	r30, r24
    9e36:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    9e38:	81 30       	cpi	r24, 0x01	; 1
    9e3a:	61 f0       	breq	.+24     	; 0x9e54 <solid_tile+0x24>
	if (tile == L_METAL) return tile;
    9e3c:	82 30       	cpi	r24, 0x02	; 2
    9e3e:	61 f0       	breq	.+24     	; 0x9e58 <solid_tile+0x28>
	if (tile == L_TL) return tile;
    9e40:	83 30       	cpi	r24, 0x03	; 3
    9e42:	61 f0       	breq	.+24     	; 0x9e5c <solid_tile+0x2c>
	if (tile == L_BR) return tile;
    9e44:	86 30       	cpi	r24, 0x06	; 6
    9e46:	61 f0       	breq	.+24     	; 0x9e60 <solid_tile+0x30>
	if (tile == L_TR) return tile;
    9e48:	84 30       	cpi	r24, 0x04	; 4
    9e4a:	61 f0       	breq	.+24     	; 0x9e64 <solid_tile+0x34>
	if (tile == L_BL) return tile;
    9e4c:	85 30       	cpi	r24, 0x05	; 5
    9e4e:	61 f0       	breq	.+24     	; 0x9e68 <solid_tile+0x38>

	return 0;
    9e50:	80 e0       	ldi	r24, 0x00	; 0
    9e52:	08 95       	ret
    9e54:	81 e0       	ldi	r24, 0x01	; 1
    9e56:	08 95       	ret
    9e58:	82 e0       	ldi	r24, 0x02	; 2
    9e5a:	08 95       	ret
    9e5c:	83 e0       	ldi	r24, 0x03	; 3
    9e5e:	08 95       	ret
    9e60:	86 e0       	ldi	r24, 0x06	; 6
    9e62:	08 95       	ret
    9e64:	84 e0       	ldi	r24, 0x04	; 4
    9e66:	08 95       	ret
    9e68:	85 e0       	ldi	r24, 0x05	; 5
}
    9e6a:	08 95       	ret

00009e6c <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9e6c:	86 56       	subi	r24, 0x66	; 102
    9e6e:	93 4f       	sbci	r25, 0xF3	; 243
    9e70:	fc 01       	movw	r30, r24
    9e72:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    9e74:	83 30       	cpi	r24, 0x03	; 3
    9e76:	41 f0       	breq	.+16     	; 0x9e88 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    9e78:	86 30       	cpi	r24, 0x06	; 6
    9e7a:	41 f0       	breq	.+16     	; 0x9e8c <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    9e7c:	84 30       	cpi	r24, 0x04	; 4
    9e7e:	41 f0       	breq	.+16     	; 0x9e90 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    9e80:	85 30       	cpi	r24, 0x05	; 5
    9e82:	41 f0       	breq	.+16     	; 0x9e94 <solid_directional_tile+0x28>
	
	return 0;
    9e84:	80 e0       	ldi	r24, 0x00	; 0
    9e86:	08 95       	ret
    9e88:	83 e0       	ldi	r24, 0x03	; 3
    9e8a:	08 95       	ret
    9e8c:	86 e0       	ldi	r24, 0x06	; 6
    9e8e:	08 95       	ret
    9e90:	84 e0       	ldi	r24, 0x04	; 4
    9e92:	08 95       	ret
    9e94:	85 e0       	ldi	r24, 0x05	; 5
}
    9e96:	08 95       	ret

00009e98 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    9e98:	7f 92       	push	r7
    9e9a:	8f 92       	push	r8
    9e9c:	9f 92       	push	r9
    9e9e:	af 92       	push	r10
    9ea0:	bf 92       	push	r11
    9ea2:	cf 92       	push	r12
    9ea4:	df 92       	push	r13
    9ea6:	ef 92       	push	r14
    9ea8:	ff 92       	push	r15
    9eaa:	0f 93       	push	r16
    9eac:	1f 93       	push	r17
    9eae:	cf 93       	push	r28
    9eb0:	df 93       	push	r29
    9eb2:	b6 2e       	mov	r11, r22
    9eb4:	94 2e       	mov	r9, r20
    9eb6:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    9eb8:	fc 01       	movw	r30, r24
    9eba:	e6 56       	subi	r30, 0x66	; 102
    9ebc:	f3 4f       	sbci	r31, 0xF3	; 243
    9ebe:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    9ec0:	6e e1       	ldi	r22, 0x1E	; 30
    9ec2:	70 e0       	ldi	r23, 0x00	; 0
    9ec4:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    9ec8:	f8 2e       	mov	r15, r24
    9eca:	ff 0c       	add	r15, r15
    9ecc:	ff 0c       	add	r15, r15
    9ece:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    9ed0:	6d 5f       	subi	r22, 0xFD	; 253
    9ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    9ed4:	16 2f       	mov	r17, r22
    9ed6:	11 0f       	add	r17, r17
    9ed8:	11 0f       	add	r17, r17
    9eda:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    9edc:	83 e0       	ldi	r24, 0x03	; 3
    9ede:	d8 16       	cp	r13, r24
    9ee0:	19 f0       	breq	.+6      	; 0x9ee8 <collides_directional_tile+0x50>
    9ee2:	86 e0       	ldi	r24, 0x06	; 6
    9ee4:	d8 12       	cpse	r13, r24
    9ee6:	31 c0       	rjmp	.+98     	; 0x9f4a <collides_directional_tile+0xb2>
    9ee8:	cf ef       	ldi	r28, 0xFF	; 255
    9eea:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    9eec:	c9 0d       	add	r28, r9
    9eee:	27 e0       	ldi	r18, 0x07	; 7
    9ef0:	72 2e       	mov	r7, r18
    9ef2:	7f 0c       	add	r7, r15
    9ef4:	37 e0       	ldi	r19, 0x07	; 7
    9ef6:	83 2e       	mov	r8, r19
    9ef8:	81 0e       	add	r8, r17
    9efa:	ac 2e       	mov	r10, r28
    9efc:	cb 2c       	mov	r12, r11
    9efe:	e9 2c       	mov	r14, r9
    9f00:	0b 2d       	mov	r16, r11
    9f02:	21 2f       	mov	r18, r17
    9f04:	47 2d       	mov	r20, r7
    9f06:	68 2d       	mov	r22, r8
    9f08:	8f 2d       	mov	r24, r15
    9f0a:	0e 94 c3 48 	call	0x9186	; 0x9186 <LBLineIntersect>
    9f0e:	81 11       	cpse	r24, r1
    9f10:	58 c0       	rjmp	.+176    	; 0x9fc2 <collides_directional_tile+0x12a>
    9f12:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    9f14:	db 0d       	add	r29, r11
    9f16:	a9 2c       	mov	r10, r9
    9f18:	cd 2e       	mov	r12, r29
    9f1a:	21 2f       	mov	r18, r17
    9f1c:	47 2d       	mov	r20, r7
    9f1e:	68 2d       	mov	r22, r8
    9f20:	8f 2d       	mov	r24, r15
    9f22:	0e 94 c3 48 	call	0x9186	; 0x9186 <LBLineIntersect>
    9f26:	81 11       	cpse	r24, r1
    9f28:	4c c0       	rjmp	.+152    	; 0x9fc2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    9f2a:	ac 2e       	mov	r10, r28
    9f2c:	0d 2f       	mov	r16, r29
    9f2e:	21 2f       	mov	r18, r17
    9f30:	47 2d       	mov	r20, r7
    9f32:	68 2d       	mov	r22, r8
    9f34:	8f 2d       	mov	r24, r15
    9f36:	0e 94 c3 48 	call	0x9186	; 0x9186 <LBLineIntersect>
    9f3a:	81 11       	cpse	r24, r1
    9f3c:	42 c0       	rjmp	.+132    	; 0x9fc2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    9f3e:	ec 2e       	mov	r14, r28
    9f40:	0b 2d       	mov	r16, r11
    9f42:	21 2f       	mov	r18, r17
    9f44:	47 2d       	mov	r20, r7
    9f46:	68 2d       	mov	r22, r8
    9f48:	34 c0       	rjmp	.+104    	; 0x9fb2 <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    9f4a:	8c ef       	ldi	r24, 0xFC	; 252
    9f4c:	8d 0d       	add	r24, r13
    9f4e:	82 30       	cpi	r24, 0x02	; 2
    9f50:	b0 f5       	brcc	.+108    	; 0x9fbe <collides_directional_tile+0x126>
    9f52:	cf ef       	ldi	r28, 0xFF	; 255
    9f54:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    9f56:	c4 0f       	add	r28, r20
    9f58:	87 e0       	ldi	r24, 0x07	; 7
    9f5a:	78 2e       	mov	r7, r24
    9f5c:	71 0e       	add	r7, r17
    9f5e:	97 e0       	ldi	r25, 0x07	; 7
    9f60:	89 2e       	mov	r8, r25
    9f62:	8f 0c       	add	r8, r15
    9f64:	ac 2e       	mov	r10, r28
    9f66:	cb 2c       	mov	r12, r11
    9f68:	e4 2e       	mov	r14, r20
    9f6a:	0b 2d       	mov	r16, r11
    9f6c:	27 2d       	mov	r18, r7
    9f6e:	48 2d       	mov	r20, r8
    9f70:	61 2f       	mov	r22, r17
    9f72:	8f 2d       	mov	r24, r15
    9f74:	0e 94 c3 48 	call	0x9186	; 0x9186 <LBLineIntersect>
    9f78:	81 11       	cpse	r24, r1
    9f7a:	23 c0       	rjmp	.+70     	; 0x9fc2 <collides_directional_tile+0x12a>
    9f7c:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    9f7e:	db 0d       	add	r29, r11
    9f80:	a9 2c       	mov	r10, r9
    9f82:	cd 2e       	mov	r12, r29
    9f84:	27 2d       	mov	r18, r7
    9f86:	48 2d       	mov	r20, r8
    9f88:	61 2f       	mov	r22, r17
    9f8a:	8f 2d       	mov	r24, r15
    9f8c:	0e 94 c3 48 	call	0x9186	; 0x9186 <LBLineIntersect>
    9f90:	81 11       	cpse	r24, r1
    9f92:	17 c0       	rjmp	.+46     	; 0x9fc2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    9f94:	ac 2e       	mov	r10, r28
    9f96:	0d 2f       	mov	r16, r29
    9f98:	27 2d       	mov	r18, r7
    9f9a:	48 2d       	mov	r20, r8
    9f9c:	61 2f       	mov	r22, r17
    9f9e:	8f 2d       	mov	r24, r15
    9fa0:	0e 94 c3 48 	call	0x9186	; 0x9186 <LBLineIntersect>
    9fa4:	81 11       	cpse	r24, r1
    9fa6:	0d c0       	rjmp	.+26     	; 0x9fc2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    9fa8:	ec 2e       	mov	r14, r28
    9faa:	0b 2d       	mov	r16, r11
    9fac:	27 2d       	mov	r18, r7
    9fae:	48 2d       	mov	r20, r8
    9fb0:	61 2f       	mov	r22, r17
    9fb2:	8f 2d       	mov	r24, r15
    9fb4:	0e 94 c3 48 	call	0x9186	; 0x9186 <LBLineIntersect>
    9fb8:	81 11       	cpse	r24, r1
    9fba:	03 c0       	rjmp	.+6      	; 0x9fc2 <collides_directional_tile+0x12a>
    9fbc:	03 c0       	rjmp	.+6      	; 0x9fc4 <collides_directional_tile+0x12c>
	}
	
	return 0;
    9fbe:	80 e0       	ldi	r24, 0x00	; 0
    9fc0:	01 c0       	rjmp	.+2      	; 0x9fc4 <collides_directional_tile+0x12c>
    9fc2:	8d 2d       	mov	r24, r13
}
    9fc4:	df 91       	pop	r29
    9fc6:	cf 91       	pop	r28
    9fc8:	1f 91       	pop	r17
    9fca:	0f 91       	pop	r16
    9fcc:	ff 90       	pop	r15
    9fce:	ef 90       	pop	r14
    9fd0:	df 90       	pop	r13
    9fd2:	cf 90       	pop	r12
    9fd4:	bf 90       	pop	r11
    9fd6:	af 90       	pop	r10
    9fd8:	9f 90       	pop	r9
    9fda:	8f 90       	pop	r8
    9fdc:	7f 90       	pop	r7
    9fde:	08 95       	ret

00009fe0 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    9fe0:	8f 92       	push	r8
    9fe2:	9f 92       	push	r9
    9fe4:	af 92       	push	r10
    9fe6:	cf 92       	push	r12
    9fe8:	ef 92       	push	r14
    9fea:	0f 93       	push	r16
    9fec:	1f 93       	push	r17
    9fee:	cf 93       	push	r28
    9ff0:	df 93       	push	r29
    9ff2:	4c 01       	movw	r8, r24
    9ff4:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    9ff6:	20 e0       	ldi	r18, 0x00	; 0
    9ff8:	30 e0       	ldi	r19, 0x00	; 0
    9ffa:	40 e0       	ldi	r20, 0x00	; 0
    9ffc:	50 e4       	ldi	r21, 0x40	; 64
    9ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    a000:	78 85       	ldd	r23, Y+8	; 0x08
    a002:	89 85       	ldd	r24, Y+9	; 0x09
    a004:	9a 85       	ldd	r25, Y+10	; 0x0a
    a006:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a00a:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a00e:	e6 2e       	mov	r14, r22
    a010:	20 e0       	ldi	r18, 0x00	; 0
    a012:	30 e0       	ldi	r19, 0x00	; 0
    a014:	40 e0       	ldi	r20, 0x00	; 0
    a016:	50 e4       	ldi	r21, 0x40	; 64
    a018:	6b 81       	ldd	r22, Y+3	; 0x03
    a01a:	7c 81       	ldd	r23, Y+4	; 0x04
    a01c:	8d 81       	ldd	r24, Y+5	; 0x05
    a01e:	9e 81       	ldd	r25, Y+6	; 0x06
    a020:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a024:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a028:	06 2f       	mov	r16, r22
    a02a:	20 e0       	ldi	r18, 0x00	; 0
    a02c:	30 e0       	ldi	r19, 0x00	; 0
    a02e:	40 e8       	ldi	r20, 0x80	; 128
    a030:	5f e3       	ldi	r21, 0x3F	; 63
    a032:	f4 01       	movw	r30, r8
    a034:	67 81       	ldd	r22, Z+7	; 0x07
    a036:	70 85       	ldd	r23, Z+8	; 0x08
    a038:	81 85       	ldd	r24, Z+9	; 0x09
    a03a:	92 85       	ldd	r25, Z+10	; 0x0a
    a03c:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a040:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a044:	16 2f       	mov	r17, r22
    a046:	20 e0       	ldi	r18, 0x00	; 0
    a048:	30 e0       	ldi	r19, 0x00	; 0
    a04a:	40 e8       	ldi	r20, 0x80	; 128
    a04c:	5f e3       	ldi	r21, 0x3F	; 63
    a04e:	f4 01       	movw	r30, r8
    a050:	63 81       	ldd	r22, Z+3	; 0x03
    a052:	74 81       	ldd	r23, Z+4	; 0x04
    a054:	85 81       	ldd	r24, Z+5	; 0x05
    a056:	96 81       	ldd	r25, Z+6	; 0x06
    a058:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a05c:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a060:	86 2f       	mov	r24, r22
    a062:	94 e0       	ldi	r25, 0x04	; 4
    a064:	a9 2e       	mov	r10, r25
    a066:	24 e0       	ldi	r18, 0x04	; 4
    a068:	c2 2e       	mov	r12, r18
    a06a:	2e e0       	ldi	r18, 0x0E	; 14
    a06c:	4e e0       	ldi	r20, 0x0E	; 14
    a06e:	61 2f       	mov	r22, r17
    a070:	0e 94 99 48 	call	0x9132	; 0x9132 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a074:	88 23       	and	r24, r24
    a076:	41 f0       	breq	.+16     	; 0xa088 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a078:	f4 01       	movw	r30, r8
    a07a:	87 89       	ldd	r24, Z+23	; 0x17
    a07c:	88 37       	cpi	r24, 0x78	; 120
    a07e:	21 f4       	brne	.+8      	; 0xa088 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a080:	81 e0       	ldi	r24, 0x01	; 1
    a082:	9f 85       	ldd	r25, Y+15	; 0x0f
    a084:	99 30       	cpi	r25, 0x09	; 9
    a086:	08 f4       	brcc	.+2      	; 0xa08a <player_shot+0xaa>
    a088:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    a08a:	df 91       	pop	r29
    a08c:	cf 91       	pop	r28
    a08e:	1f 91       	pop	r17
    a090:	0f 91       	pop	r16
    a092:	ef 90       	pop	r14
    a094:	cf 90       	pop	r12
    a096:	af 90       	pop	r10
    a098:	9f 90       	pop	r9
    a09a:	8f 90       	pop	r8
    a09c:	08 95       	ret

0000a09e <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    a09e:	cf 92       	push	r12
    a0a0:	df 92       	push	r13
    a0a2:	ef 92       	push	r14
    a0a4:	ff 92       	push	r15
    a0a6:	cf 93       	push	r28
    a0a8:	df 93       	push	r29
    a0aa:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    a0ac:	cb 80       	ldd	r12, Y+3	; 0x03
    a0ae:	dc 80       	ldd	r13, Y+4	; 0x04
    a0b0:	ed 80       	ldd	r14, Y+5	; 0x05
    a0b2:	fe 80       	ldd	r15, Y+6	; 0x06
    a0b4:	20 e0       	ldi	r18, 0x00	; 0
    a0b6:	30 e0       	ldi	r19, 0x00	; 0
    a0b8:	a9 01       	movw	r20, r18
    a0ba:	c7 01       	movw	r24, r14
    a0bc:	b6 01       	movw	r22, r12
    a0be:	0e 94 10 61 	call	0xc220	; 0xc220 <__cmpsf2>
    a0c2:	87 fd       	sbrc	r24, 7
    a0c4:	31 c0       	rjmp	.+98     	; 0xa128 <collision_detect_boundries+0x8a>
    a0c6:	20 e0       	ldi	r18, 0x00	; 0
    a0c8:	30 e0       	ldi	r19, 0x00	; 0
    a0ca:	40 e0       	ldi	r20, 0x00	; 0
    a0cc:	51 e4       	ldi	r21, 0x41	; 65
    a0ce:	c7 01       	movw	r24, r14
    a0d0:	b6 01       	movw	r22, r12
    a0d2:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a0d6:	20 e0       	ldi	r18, 0x00	; 0
    a0d8:	30 e0       	ldi	r19, 0x00	; 0
    a0da:	40 e7       	ldi	r20, 0x70	; 112
    a0dc:	53 e4       	ldi	r21, 0x43	; 67
    a0de:	0e 94 5f 62 	call	0xc4be	; 0xc4be <__gesf2>
    a0e2:	18 16       	cp	r1, r24
    a0e4:	0c f1       	brlt	.+66     	; 0xa128 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    a0e6:	cf 80       	ldd	r12, Y+7	; 0x07
    a0e8:	d8 84       	ldd	r13, Y+8	; 0x08
    a0ea:	e9 84       	ldd	r14, Y+9	; 0x09
    a0ec:	fa 84       	ldd	r15, Y+10	; 0x0a
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    a0ee:	20 e0       	ldi	r18, 0x00	; 0
    a0f0:	30 e0       	ldi	r19, 0x00	; 0
    a0f2:	40 ec       	ldi	r20, 0xC0	; 192
    a0f4:	51 e4       	ldi	r21, 0x41	; 65
    a0f6:	c7 01       	movw	r24, r14
    a0f8:	b6 01       	movw	r22, r12
    a0fa:	0e 94 10 61 	call	0xc220	; 0xc220 <__cmpsf2>
    a0fe:	87 fd       	sbrc	r24, 7
    a100:	13 c0       	rjmp	.+38     	; 0xa128 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    a102:	20 e0       	ldi	r18, 0x00	; 0
    a104:	30 e0       	ldi	r19, 0x00	; 0
    a106:	40 e0       	ldi	r20, 0x00	; 0
    a108:	51 e4       	ldi	r21, 0x41	; 65
    a10a:	c7 01       	movw	r24, r14
    a10c:	b6 01       	movw	r22, r12
    a10e:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a112:	c1 e0       	ldi	r28, 0x01	; 1
    a114:	20 e0       	ldi	r18, 0x00	; 0
    a116:	30 e0       	ldi	r19, 0x00	; 0
    a118:	40 e6       	ldi	r20, 0x60	; 96
    a11a:	53 e4       	ldi	r21, 0x43	; 67
    a11c:	0e 94 5f 62 	call	0xc4be	; 0xc4be <__gesf2>
    a120:	18 16       	cp	r1, r24
    a122:	1c f0       	brlt	.+6      	; 0xa12a <collision_detect_boundries+0x8c>
    a124:	c0 e0       	ldi	r28, 0x00	; 0
    a126:	01 c0       	rjmp	.+2      	; 0xa12a <collision_detect_boundries+0x8c>
	{
		return 1;
    a128:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    a12a:	8c 2f       	mov	r24, r28
    a12c:	df 91       	pop	r29
    a12e:	cf 91       	pop	r28
    a130:	ff 90       	pop	r15
    a132:	ef 90       	pop	r14
    a134:	df 90       	pop	r13
    a136:	cf 90       	pop	r12
    a138:	08 95       	ret

0000a13a <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    a13a:	ff 92       	push	r15
    a13c:	0f 93       	push	r16
    a13e:	1f 93       	push	r17
    a140:	cf 93       	push	r28
    a142:	df 93       	push	r29
    a144:	8c 01       	movw	r16, r24
    a146:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a148:	20 e0       	ldi	r18, 0x00	; 0
    a14a:	30 e0       	ldi	r19, 0x00	; 0
    a14c:	40 e0       	ldi	r20, 0x00	; 0
    a14e:	5e e3       	ldi	r21, 0x3E	; 62
    a150:	fc 01       	movw	r30, r24
    a152:	67 81       	ldd	r22, Z+7	; 0x07
    a154:	70 85       	ldd	r23, Z+8	; 0x08
    a156:	81 85       	ldd	r24, Z+9	; 0x09
    a158:	92 85       	ldd	r25, Z+10	; 0x0a
    a15a:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    a15e:	20 e0       	ldi	r18, 0x00	; 0
    a160:	30 e0       	ldi	r19, 0x00	; 0
    a162:	40 e4       	ldi	r20, 0x40	; 64
    a164:	50 e4       	ldi	r21, 0x40	; 64
    a166:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    a16a:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    a16e:	fe e1       	ldi	r31, 0x1E	; 30
    a170:	6f 9f       	mul	r22, r31
    a172:	e0 01       	movw	r28, r0
    a174:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    a176:	20 e0       	ldi	r18, 0x00	; 0
    a178:	30 e0       	ldi	r19, 0x00	; 0
    a17a:	40 e0       	ldi	r20, 0x00	; 0
    a17c:	5e e3       	ldi	r21, 0x3E	; 62
    a17e:	f8 01       	movw	r30, r16
    a180:	63 81       	ldd	r22, Z+3	; 0x03
    a182:	74 81       	ldd	r23, Z+4	; 0x04
    a184:	85 81       	ldd	r24, Z+5	; 0x05
    a186:	96 81       	ldd	r25, Z+6	; 0x06
    a188:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    a18c:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    a190:	c6 0f       	add	r28, r22
    a192:	d1 1d       	adc	r29, r1

	if (player->has_over_speed)
    a194:	f8 01       	movw	r30, r16
    a196:	82 8d       	ldd	r24, Z+26	; 0x1a
    a198:	88 23       	and	r24, r24
    a19a:	c9 f0       	breq	.+50     	; 0xa1ce <kill_player+0x94>
	{
		SetTile(hud_x+10, 1, 0);
    a19c:	40 e0       	ldi	r20, 0x00	; 0
    a19e:	50 e0       	ldi	r21, 0x00	; 0
    a1a0:	61 e0       	ldi	r22, 0x01	; 1
    a1a2:	8a e0       	ldi	r24, 0x0A	; 10
    a1a4:	8f 0d       	add	r24, r15
    a1a6:	0e 94 63 39 	call	0x72c6	; 0x72c6 <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    a1aa:	ce 01       	movw	r24, r28
    a1ac:	6e e1       	ldi	r22, 0x1E	; 30
    a1ae:	70 e0       	ldi	r23, 0x00	; 0
    a1b0:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    a1b4:	6c 5f       	subi	r22, 0xFC	; 252
    a1b6:	4a e8       	ldi	r20, 0x8A	; 138
    a1b8:	54 e2       	ldi	r21, 0x24	; 36
    a1ba:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    a1be:	87 e0       	ldi	r24, 0x07	; 7
    a1c0:	fe 01       	movw	r30, r28
    a1c2:	e6 56       	subi	r30, 0x66	; 102
    a1c4:	f3 4f       	sbci	r31, 0xF3	; 243
    a1c6:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    a1c8:	82 e3       	ldi	r24, 0x32	; 50
    a1ca:	f8 01       	movw	r30, r16
    a1cc:	80 8f       	std	Z+24, r24	; 0x18
	}
	if (player->has_rocket)
    a1ce:	f8 01       	movw	r30, r16
    a1d0:	81 8d       	ldd	r24, Z+25	; 0x19
    a1d2:	88 23       	and	r24, r24
    a1d4:	b1 f0       	breq	.+44     	; 0xa202 <kill_player+0xc8>
	{
		SetTile(hud_x+11, 1, 0);
    a1d6:	40 e0       	ldi	r20, 0x00	; 0
    a1d8:	50 e0       	ldi	r21, 0x00	; 0
    a1da:	61 e0       	ldi	r22, 0x01	; 1
    a1dc:	8b e0       	ldi	r24, 0x0B	; 11
    a1de:	8f 0d       	add	r24, r15
    a1e0:	0e 94 63 39 	call	0x72c6	; 0x72c6 <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    a1e4:	ce 01       	movw	r24, r28
    a1e6:	6e e1       	ldi	r22, 0x1E	; 30
    a1e8:	70 e0       	ldi	r23, 0x00	; 0
    a1ea:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    a1ee:	6c 5f       	subi	r22, 0xFC	; 252
    a1f0:	44 e8       	ldi	r20, 0x84	; 132
    a1f2:	54 e2       	ldi	r21, 0x24	; 36
    a1f4:	8f 5f       	subi	r24, 0xFF	; 255
    a1f6:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    a1fa:	c6 56       	subi	r28, 0x66	; 102
    a1fc:	d3 4f       	sbci	r29, 0xF3	; 243
    a1fe:	89 e0       	ldi	r24, 0x09	; 9
    a200:	88 a3       	std	Y+32, r24	; 0x20
	}
	player->has_over_speed = false;
    a202:	f8 01       	movw	r30, r16
    a204:	12 8e       	std	Z+26, r1	; 0x1a
	player->has_rocket = false;
    a206:	11 8e       	std	Z+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    a208:	84 89       	ldd	r24, Z+20	; 0x14
    a20a:	81 60       	ori	r24, 0x01	; 1
    a20c:	84 8b       	std	Z+20, r24	; 0x14
}
    a20e:	df 91       	pop	r29
    a210:	cf 91       	pop	r28
    a212:	1f 91       	pop	r17
    a214:	0f 91       	pop	r16
    a216:	ff 90       	pop	r15
    a218:	08 95       	ret

0000a21a <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    a21a:	fc 01       	movw	r30, r24
    a21c:	8e e1       	ldi	r24, 0x1E	; 30
    a21e:	48 9f       	mul	r20, r24
    a220:	a0 01       	movw	r20, r0
    a222:	11 24       	eor	r1, r1
    a224:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    a226:	64 0f       	add	r22, r20
    a228:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    a22a:	21 11       	cpse	r18, r1
    a22c:	05 c0       	rjmp	.+10     	; 0xa238 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    a22e:	71 83       	std	Z+1, r23	; 0x01
    a230:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    a232:	6f 5f       	subi	r22, 0xFF	; 255
    a234:	7f 4f       	sbci	r23, 0xFF	; 255
    a236:	12 c0       	rjmp	.+36     	; 0xa25c <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    a238:	21 30       	cpi	r18, 0x01	; 1
    a23a:	19 f4       	brne	.+6      	; 0xa242 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    a23c:	cb 01       	movw	r24, r22
    a23e:	01 96       	adiw	r24, 0x01	; 1
    a240:	04 c0       	rjmp	.+8      	; 0xa24a <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    a242:	22 30       	cpi	r18, 0x02	; 2
    a244:	39 f4       	brne	.+14     	; 0xa254 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    a246:	cb 01       	movw	r24, r22
    a248:	4e 96       	adiw	r24, 0x1e	; 30
    a24a:	91 83       	std	Z+1, r25	; 0x01
    a24c:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    a24e:	61 5e       	subi	r22, 0xE1	; 225
    a250:	7f 4f       	sbci	r23, 0xFF	; 255
    a252:	04 c0       	rjmp	.+8      	; 0xa25c <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    a254:	71 83       	std	Z+1, r23	; 0x01
    a256:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    a258:	62 5e       	subi	r22, 0xE2	; 226
    a25a:	7f 4f       	sbci	r23, 0xFF	; 255
    a25c:	73 83       	std	Z+3, r23	; 0x03
    a25e:	62 83       	std	Z+2, r22	; 0x02
    a260:	08 95       	ret

0000a262 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    a262:	ef 92       	push	r14
    a264:	ff 92       	push	r15
    a266:	0f 93       	push	r16
    a268:	1f 93       	push	r17
    a26a:	cf 93       	push	r28
    a26c:	df 93       	push	r29
    a26e:	ec 01       	movw	r28, r24
    a270:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    a272:	8e e1       	ldi	r24, 0x1E	; 30
    a274:	e8 2e       	mov	r14, r24
    a276:	f1 2c       	mov	r15, r1
    a278:	cb 01       	movw	r24, r22
    a27a:	b7 01       	movw	r22, r14
    a27c:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    a280:	6d 5f       	subi	r22, 0xFD	; 253
    a282:	40 e0       	ldi	r20, 0x00	; 0
    a284:	50 e0       	ldi	r21, 0x00	; 0
    a286:	0e 94 63 39 	call	0x72c6	; 0x72c6 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    a28a:	88 81       	ld	r24, Y
    a28c:	fe 01       	movw	r30, r28
    a28e:	9c e0       	ldi	r25, 0x0C	; 12
    a290:	89 9f       	mul	r24, r25
    a292:	e0 0d       	add	r30, r0
    a294:	f1 1d       	adc	r31, r1
    a296:	11 24       	eor	r1, r1
    a298:	83 85       	ldd	r24, Z+11	; 0x0b
    a29a:	94 85       	ldd	r25, Z+12	; 0x0c
    a29c:	00 97       	sbiw	r24, 0x00	; 0
    a29e:	41 f0       	breq	.+16     	; 0xa2b0 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    a2a0:	b7 01       	movw	r22, r14
    a2a2:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    a2a6:	6d 5f       	subi	r22, 0xFD	; 253
    a2a8:	40 e0       	ldi	r20, 0x00	; 0
    a2aa:	50 e0       	ldi	r21, 0x00	; 0
    a2ac:	0e 94 63 39 	call	0x72c6	; 0x72c6 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    a2b0:	88 81       	ld	r24, Y
    a2b2:	fe 01       	movw	r30, r28
    a2b4:	9c e0       	ldi	r25, 0x0C	; 12
    a2b6:	89 9f       	mul	r24, r25
    a2b8:	e0 0d       	add	r30, r0
    a2ba:	f1 1d       	adc	r31, r1
    a2bc:	11 24       	eor	r1, r1
    a2be:	14 87       	std	Z+12, r17	; 0x0c
    a2c0:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    a2c2:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    a2c4:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    a2c6:	82 30       	cpi	r24, 0x02	; 2
    a2c8:	11 f0       	breq	.+4      	; 0xa2ce <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    a2ca:	88 83       	st	Y, r24
    a2cc:	01 c0       	rjmp	.+2      	; 0xa2d0 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    a2ce:	18 82       	st	Y, r1
	}
}
    a2d0:	df 91       	pop	r29
    a2d2:	cf 91       	pop	r28
    a2d4:	1f 91       	pop	r17
    a2d6:	0f 91       	pop	r16
    a2d8:	ff 90       	pop	r15
    a2da:	ef 90       	pop	r14
    a2dc:	08 95       	ret

0000a2de <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    a2de:	2f 92       	push	r2
    a2e0:	3f 92       	push	r3
    a2e2:	4f 92       	push	r4
    a2e4:	5f 92       	push	r5
    a2e6:	6f 92       	push	r6
    a2e8:	7f 92       	push	r7
    a2ea:	8f 92       	push	r8
    a2ec:	9f 92       	push	r9
    a2ee:	af 92       	push	r10
    a2f0:	cf 92       	push	r12
    a2f2:	ef 92       	push	r14
    a2f4:	ff 92       	push	r15
    a2f6:	0f 93       	push	r16
    a2f8:	1f 93       	push	r17
    a2fa:	cf 93       	push	r28
    a2fc:	df 93       	push	r29
    a2fe:	00 d0       	rcall	.+0      	; 0xa300 <collision_detect_shot+0x22>
    a300:	00 d0       	rcall	.+0      	; 0xa302 <collision_detect_shot+0x24>
    a302:	00 d0       	rcall	.+0      	; 0xa304 <collision_detect_shot+0x26>
    a304:	cd b7       	in	r28, 0x3d	; 61
    a306:	de b7       	in	r29, 0x3e	; 62
    a308:	3c 01       	movw	r6, r24
    a30a:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    a30c:	1a 82       	std	Y+2, r1	; 0x02
    a30e:	19 82       	std	Y+1, r1	; 0x01
    a310:	1c 82       	std	Y+4, r1	; 0x04
    a312:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    a314:	20 e0       	ldi	r18, 0x00	; 0
    a316:	30 e0       	ldi	r19, 0x00	; 0
    a318:	40 e0       	ldi	r20, 0x00	; 0
    a31a:	5e e3       	ldi	r21, 0x3E	; 62
    a31c:	fb 01       	movw	r30, r22
    a31e:	67 81       	ldd	r22, Z+7	; 0x07
    a320:	70 85       	ldd	r23, Z+8	; 0x08
    a322:	81 85       	ldd	r24, Z+9	; 0x09
    a324:	92 85       	ldd	r25, Z+10	; 0x0a
    a326:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    a32a:	20 e0       	ldi	r18, 0x00	; 0
    a32c:	30 e0       	ldi	r19, 0x00	; 0
    a32e:	40 e4       	ldi	r20, 0x40	; 64
    a330:	50 e4       	ldi	r21, 0x40	; 64
    a332:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    a336:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a33a:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    a33c:	20 e0       	ldi	r18, 0x00	; 0
    a33e:	30 e0       	ldi	r19, 0x00	; 0
    a340:	40 e0       	ldi	r20, 0x00	; 0
    a342:	5e e3       	ldi	r21, 0x3E	; 62
    a344:	f4 01       	movw	r30, r8
    a346:	63 81       	ldd	r22, Z+3	; 0x03
    a348:	74 81       	ldd	r23, Z+4	; 0x04
    a34a:	85 81       	ldd	r24, Z+5	; 0x05
    a34c:	96 81       	ldd	r25, Z+6	; 0x06
    a34e:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    a352:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
	u8 tile;
	u8 hud_x;
	Player* p = 0;
    char hit_metal = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    a356:	f4 01       	movw	r30, r8
    a358:	20 81       	ld	r18, Z
    a35a:	41 2f       	mov	r20, r17
    a35c:	ce 01       	movw	r24, r28
    a35e:	01 96       	adiw	r24, 0x01	; 1
    a360:	0e 94 0d 51 	call	0xa21a	; 0xa21a <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    a364:	c4 01       	movw	r24, r8
    a366:	0e 94 4f 50 	call	0xa09e	; 0xa09e <collision_detect_boundries>
    a36a:	88 23       	and	r24, r24
    a36c:	51 f0       	breq	.+20     	; 0xa382 <collision_detect_shot+0xa4>
	{
		init_shot_state(shot, shot->shot_type);
    a36e:	f4 01       	movw	r30, r8
    a370:	63 85       	ldd	r22, Z+11	; 0x0b
    a372:	c4 01       	movw	r24, r8
    a374:	0e 94 18 4a 	call	0x9430	; 0x9430 <init_shot_state>
		player->active_shots--;
    a378:	f3 01       	movw	r30, r6
    a37a:	81 89       	ldd	r24, Z+17	; 0x11
    a37c:	81 50       	subi	r24, 0x01	; 1
    a37e:	81 8b       	std	Z+17, r24	; 0x11
		return;
    a380:	70 c1       	rjmp	.+736    	; 0xa662 <collision_detect_shot+0x384>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    a382:	b4 01       	movw	r22, r8
    a384:	89 e2       	ldi	r24, 0x29	; 41
    a386:	9c e0       	ldi	r25, 0x0C	; 12
    a388:	0e 94 f0 4f 	call	0x9fe0	; 0x9fe0 <player_shot>
    a38c:	88 23       	and	r24, r24
    a38e:	b9 f0       	breq	.+46     	; 0xa3be <collision_detect_shot+0xe0>
    a390:	80 91 3d 0c 	lds	r24, 0x0C3D
    a394:	80 fd       	sbrc	r24, 0
    a396:	13 c0       	rjmp	.+38     	; 0xa3be <collision_detect_shot+0xe0>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    a398:	80 91 99 0f 	lds	r24, 0x0F99
    a39c:	8f 5f       	subi	r24, 0xFF	; 255
    a39e:	80 93 99 0f 	sts	0x0F99, r24
		player2.score++;
    a3a2:	80 91 98 0f 	lds	r24, 0x0F98
    a3a6:	8f 5f       	subi	r24, 0xFF	; 255
    a3a8:	80 93 98 0f 	sts	0x0F98, r24
		render_score(&player2, 15);
    a3ac:	6f e0       	ldi	r22, 0x0F	; 15
    a3ae:	89 e8       	ldi	r24, 0x89	; 137
    a3b0:	9f e0       	ldi	r25, 0x0F	; 15
    a3b2:	0e 94 ab 4c 	call	0x9956	; 0x9956 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    a3b6:	09 e2       	ldi	r16, 0x29	; 41
    a3b8:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    a3ba:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    a3bc:	26 c0       	rjmp	.+76     	; 0xa40a <collision_detect_shot+0x12c>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    a3be:	b4 01       	movw	r22, r8
    a3c0:	89 e8       	ldi	r24, 0x89	; 137
    a3c2:	9f e0       	ldi	r25, 0x0F	; 15
    a3c4:	0e 94 f0 4f 	call	0x9fe0	; 0x9fe0 <player_shot>
    a3c8:	81 11       	cpse	r24, r1
    a3ca:	08 c0       	rjmp	.+16     	; 0xa3dc <collision_detect_shot+0xfe>
    a3cc:	ce 01       	movw	r24, r28
    a3ce:	01 96       	adiw	r24, 0x01	; 1
    a3d0:	9e 83       	std	Y+6, r25	; 0x06
    a3d2:	8d 83       	std	Y+5, r24	; 0x05
    a3d4:	41 2c       	mov	r4, r1
    a3d6:	51 2c       	mov	r5, r1
    a3d8:	f1 2c       	mov	r15, r1
    a3da:	70 c0       	rjmp	.+224    	; 0xa4bc <collision_detect_shot+0x1de>
    a3dc:	80 91 9d 0f 	lds	r24, 0x0F9D
    a3e0:	80 fd       	sbrc	r24, 0
    a3e2:	f4 cf       	rjmp	.-24     	; 0xa3cc <collision_detect_shot+0xee>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    a3e4:	80 91 39 0c 	lds	r24, 0x0C39
    a3e8:	8f 5f       	subi	r24, 0xFF	; 255
    a3ea:	80 93 39 0c 	sts	0x0C39, r24
		player1.score++;
    a3ee:	80 91 38 0c 	lds	r24, 0x0C38
    a3f2:	8f 5f       	subi	r24, 0xFF	; 255
    a3f4:	80 93 38 0c 	sts	0x0C38, r24
		render_score(&player1, 0);
    a3f8:	60 e0       	ldi	r22, 0x00	; 0
    a3fa:	89 e2       	ldi	r24, 0x29	; 41
    a3fc:	9c e0       	ldi	r25, 0x0C	; 12
    a3fe:	0e 94 ab 4c 	call	0x9956	; 0x9956 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
	{
		p = &player2;
    a402:	09 e8       	ldi	r16, 0x89	; 137
    a404:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    a406:	7f e0       	ldi	r23, 0x0F	; 15
    a408:	f7 2e       	mov	r15, r23
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    a40a:	01 15       	cp	r16, r1
    a40c:	11 05       	cpc	r17, r1
    a40e:	f1 f2       	breq	.-68     	; 0xa3cc <collision_detect_shot+0xee>
	{
		init_shot_state(shot, shot->shot_type);
    a410:	f4 01       	movw	r30, r8
    a412:	63 85       	ldd	r22, Z+11	; 0x0b
    a414:	c4 01       	movw	r24, r8
    a416:	0e 94 18 4a 	call	0x9430	; 0x9430 <init_shot_state>
		player->active_shots--;
    a41a:	f3 01       	movw	r30, r6
    a41c:	81 89       	ldd	r24, Z+17	; 0x11
    a41e:	81 50       	subi	r24, 0x01	; 1
    a420:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    a422:	6f 2d       	mov	r22, r15
    a424:	c8 01       	movw	r24, r16
    a426:	0e 94 9d 50 	call	0xa13a	; 0xa13a <kill_player>
		SFX_TANK_EXPLODE;
    a42a:	2f ef       	ldi	r18, 0xFF	; 255
    a42c:	40 e1       	ldi	r20, 0x10	; 16
    a42e:	6a e0       	ldi	r22, 0x0A	; 10
    a430:	15 c1       	rjmp	.+554    	; 0xa65c <collision_detect_shot+0x37e>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    a432:	c1 01       	movw	r24, r2
    a434:	0e 94 36 4f 	call	0x9e6c	; 0x9e6c <solid_directional_tile>
    a438:	81 11       	cpse	r24, r1
    a43a:	4d c0       	rjmp	.+154    	; 0xa4d6 <collision_detect_shot+0x1f8>
			}
			SFX_METAL;
			hit_metal = 0;
			break;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a43c:	11 30       	cpi	r17, 0x01	; 1
    a43e:	09 f0       	breq	.+2      	; 0xa442 <collision_detect_shot+0x164>
    a440:	c2 c0       	rjmp	.+388    	; 0xa5c6 <collision_detect_shot+0x2e8>
    a442:	c1 01       	movw	r24, r2
    a444:	6e e1       	ldi	r22, 0x1E	; 30
    a446:	70 e0       	ldi	r23, 0x00	; 0
    a448:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    a44c:	6d 5f       	subi	r22, 0xFD	; 253
    a44e:	7f 4f       	sbci	r23, 0xFF	; 255
    a450:	e6 2e       	mov	r14, r22
    a452:	ee 0c       	add	r14, r14
    a454:	ee 0c       	add	r14, r14
    a456:	ee 0c       	add	r14, r14
    a458:	08 2f       	mov	r16, r24
    a45a:	00 0f       	add	r16, r16
    a45c:	00 0f       	add	r16, r16
    a45e:	00 0f       	add	r16, r16
    a460:	20 e0       	ldi	r18, 0x00	; 0
    a462:	30 e0       	ldi	r19, 0x00	; 0
    a464:	40 e0       	ldi	r20, 0x00	; 0
    a466:	50 e4       	ldi	r21, 0x40	; 64
    a468:	f4 01       	movw	r30, r8
    a46a:	67 81       	ldd	r22, Z+7	; 0x07
    a46c:	70 85       	ldd	r23, Z+8	; 0x08
    a46e:	81 85       	ldd	r24, Z+9	; 0x09
    a470:	92 85       	ldd	r25, Z+10	; 0x0a
    a472:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a476:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a47a:	16 2f       	mov	r17, r22
    a47c:	20 e0       	ldi	r18, 0x00	; 0
    a47e:	30 e0       	ldi	r19, 0x00	; 0
    a480:	40 e0       	ldi	r20, 0x00	; 0
    a482:	50 e4       	ldi	r21, 0x40	; 64
    a484:	f4 01       	movw	r30, r8
    a486:	63 81       	ldd	r22, Z+3	; 0x03
    a488:	74 81       	ldd	r23, Z+4	; 0x04
    a48a:	85 81       	ldd	r24, Z+5	; 0x05
    a48c:	96 81       	ldd	r25, Z+6	; 0x06
    a48e:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a492:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a496:	86 2f       	mov	r24, r22
    a498:	48 e0       	ldi	r20, 0x08	; 8
    a49a:	a4 2e       	mov	r10, r20
    a49c:	58 e0       	ldi	r21, 0x08	; 8
    a49e:	c5 2e       	mov	r12, r21
    a4a0:	24 e0       	ldi	r18, 0x04	; 4
    a4a2:	44 e0       	ldi	r20, 0x04	; 4
    a4a4:	61 2f       	mov	r22, r17
    a4a6:	0e 94 99 48 	call	0x9132	; 0x9132 <LBCollides>
    a4aa:	81 11       	cpse	r24, r1
    a4ac:	67 c0       	rjmp	.+206    	; 0xa57c <collision_detect_shot+0x29e>
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    a4ae:	4a 94       	dec	r4
    a4b0:	45 28       	or	r4, r5
    a4b2:	09 f4       	brne	.+2      	; 0xa4b6 <collision_detect_shot+0x1d8>
    a4b4:	c5 c0       	rjmp	.+394    	; 0xa640 <collision_detect_shot+0x362>
    a4b6:	44 24       	eor	r4, r4
    a4b8:	43 94       	inc	r4
    a4ba:	51 2c       	mov	r5, r1
	{
		tile = level.level_map[tiles[i]];
    a4bc:	ed 81       	ldd	r30, Y+5	; 0x05
    a4be:	fe 81       	ldd	r31, Y+6	; 0x06
    a4c0:	21 90       	ld	r2, Z+
    a4c2:	31 90       	ld	r3, Z+
    a4c4:	fe 83       	std	Y+6, r31	; 0x06
    a4c6:	ed 83       	std	Y+5, r30	; 0x05
    a4c8:	f1 01       	movw	r30, r2
    a4ca:	e6 56       	subi	r30, 0x66	; 102
    a4cc:	f3 4f       	sbci	r31, 0xF3	; 243
    a4ce:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    a4d0:	11 23       	and	r17, r17
    a4d2:	69 f3       	breq	.-38     	; 0xa4ae <collision_detect_shot+0x1d0>
    a4d4:	ae cf       	rjmp	.-164    	; 0xa432 <collision_detect_shot+0x154>
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    a4d6:	20 e0       	ldi	r18, 0x00	; 0
    a4d8:	30 e0       	ldi	r19, 0x00	; 0
    a4da:	40 e0       	ldi	r20, 0x00	; 0
    a4dc:	50 e4       	ldi	r21, 0x40	; 64
    a4de:	f4 01       	movw	r30, r8
    a4e0:	67 81       	ldd	r22, Z+7	; 0x07
    a4e2:	70 85       	ldd	r23, Z+8	; 0x08
    a4e4:	81 85       	ldd	r24, Z+9	; 0x09
    a4e6:	92 85       	ldd	r25, Z+10	; 0x0a
    a4e8:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a4ec:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a4f0:	e6 2e       	mov	r14, r22
    a4f2:	20 e0       	ldi	r18, 0x00	; 0
    a4f4:	30 e0       	ldi	r19, 0x00	; 0
    a4f6:	40 e0       	ldi	r20, 0x00	; 0
    a4f8:	50 e4       	ldi	r21, 0x40	; 64
    a4fa:	f4 01       	movw	r30, r8
    a4fc:	63 81       	ldd	r22, Z+3	; 0x03
    a4fe:	74 81       	ldd	r23, Z+4	; 0x04
    a500:	85 81       	ldd	r24, Z+5	; 0x05
    a502:	96 81       	ldd	r25, Z+6	; 0x06
    a504:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a508:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a50c:	04 e0       	ldi	r16, 0x04	; 4
    a50e:	24 e0       	ldi	r18, 0x04	; 4
    a510:	4e 2d       	mov	r20, r14
    a512:	c1 01       	movw	r24, r2
    a514:	0e 94 4c 4f 	call	0x9e98	; 0x9e98 <collides_directional_tile>
    a518:	88 23       	and	r24, r24
    a51a:	09 f4       	brne	.+2      	; 0xa51e <collision_detect_shot+0x240>
    a51c:	8f cf       	rjmp	.-226    	; 0xa43c <collision_detect_shot+0x15e>
		{
			recoil_sprite_fine(&shot->shared);
    a51e:	c4 01       	movw	r24, r8
    a520:	0e 94 a6 4e 	call	0x9d4c	; 0x9d4c <recoil_sprite_fine>
			switch (tile)
    a524:	14 30       	cpi	r17, 0x04	; 4
    a526:	79 f0       	breq	.+30     	; 0xa546 <collision_detect_shot+0x268>
    a528:	18 f4       	brcc	.+6      	; 0xa530 <collision_detect_shot+0x252>
    a52a:	13 30       	cpi	r17, 0x03	; 3
    a52c:	31 f0       	breq	.+12     	; 0xa53a <collision_detect_shot+0x25c>
    a52e:	1f c0       	rjmp	.+62     	; 0xa56e <collision_detect_shot+0x290>
    a530:	15 30       	cpi	r17, 0x05	; 5
    a532:	b9 f0       	breq	.+46     	; 0xa562 <collision_detect_shot+0x284>
    a534:	16 30       	cpi	r17, 0x06	; 6
    a536:	79 f0       	breq	.+30     	; 0xa556 <collision_detect_shot+0x278>
    a538:	1a c0       	rjmp	.+52     	; 0xa56e <collision_detect_shot+0x290>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    a53a:	f4 01       	movw	r30, r8
    a53c:	80 81       	ld	r24, Z
    a53e:	81 11       	cpse	r24, r1
    a540:	06 c0       	rjmp	.+12     	; 0xa54e <collision_detect_shot+0x270>
						shot->shared.direction = D_RIGHT;
    a542:	81 e0       	ldi	r24, 0x01	; 1
    a544:	05 c0       	rjmp	.+10     	; 0xa550 <collision_detect_shot+0x272>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    a546:	f4 01       	movw	r30, r8
    a548:	80 81       	ld	r24, Z
    a54a:	88 23       	and	r24, r24
    a54c:	41 f0       	breq	.+16     	; 0xa55e <collision_detect_shot+0x280>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    a54e:	82 e0       	ldi	r24, 0x02	; 2
    a550:	f4 01       	movw	r30, r8
    a552:	80 83       	st	Z, r24
    a554:	0c c0       	rjmp	.+24     	; 0xa56e <collision_detect_shot+0x290>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    a556:	f4 01       	movw	r30, r8
    a558:	80 81       	ld	r24, Z
    a55a:	82 30       	cpi	r24, 0x02	; 2
    a55c:	31 f4       	brne	.+12     	; 0xa56a <collision_detect_shot+0x28c>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    a55e:	83 e0       	ldi	r24, 0x03	; 3
    a560:	f7 cf       	rjmp	.-18     	; 0xa550 <collision_detect_shot+0x272>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    a562:	f4 01       	movw	r30, r8
    a564:	80 81       	ld	r24, Z
    a566:	82 30       	cpi	r24, 0x02	; 2
    a568:	61 f3       	breq	.-40     	; 0xa542 <collision_detect_shot+0x264>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    a56a:	f4 01       	movw	r30, r8
    a56c:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    a56e:	f4 01       	movw	r30, r8
    a570:	85 85       	ldd	r24, Z+13	; 0x0d
    a572:	81 50       	subi	r24, 0x01	; 1
    a574:	85 87       	std	Z+13, r24	; 0x0d
			if (shot->rebounds <= 0)
    a576:	81 11       	cpse	r24, r1
    a578:	6e c0       	rjmp	.+220    	; 0xa656 <collision_detect_shot+0x378>
    a57a:	65 c0       	rjmp	.+202    	; 0xa646 <collision_detect_shot+0x368>
			hit_metal = 0;
			break;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			explode_tile(&tile_animations, tiles[i]);
    a57c:	b1 01       	movw	r22, r2
    a57e:	80 e1       	ldi	r24, 0x10	; 16
    a580:	9c e0       	ldi	r25, 0x0C	; 12
    a582:	0e 94 31 51 	call	0xa262	; 0xa262 <explode_tile>
			level.level_map[tiles[i]] = L_EMPTY;
    a586:	44 0c       	add	r4, r4
    a588:	55 1c       	adc	r5, r5
    a58a:	e1 e0       	ldi	r30, 0x01	; 1
    a58c:	f0 e0       	ldi	r31, 0x00	; 0
    a58e:	ec 0f       	add	r30, r28
    a590:	fd 1f       	adc	r31, r29
    a592:	e4 0d       	add	r30, r4
    a594:	f5 1d       	adc	r31, r5
    a596:	01 90       	ld	r0, Z+
    a598:	f0 81       	ld	r31, Z
    a59a:	e0 2d       	mov	r30, r0
    a59c:	e6 56       	subi	r30, 0x66	; 102
    a59e:	f3 4f       	sbci	r31, 0xF3	; 243
    a5a0:	11 82       	std	Z+1, r1	; 0x01
			shot->hit_count--;
    a5a2:	f4 01       	movw	r30, r8
    a5a4:	84 85       	ldd	r24, Z+12	; 0x0c
    a5a6:	81 50       	subi	r24, 0x01	; 1
    a5a8:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->hit_count <= 0)
    a5aa:	81 11       	cpse	r24, r1
    a5ac:	08 c0       	rjmp	.+16     	; 0xa5be <collision_detect_shot+0x2e0>
			{
				init_shot_state(shot, shot->shot_type);
    a5ae:	63 85       	ldd	r22, Z+11	; 0x0b
    a5b0:	c4 01       	movw	r24, r8
    a5b2:	0e 94 18 4a 	call	0x9430	; 0x9430 <init_shot_state>
				player->active_shots--;
    a5b6:	f3 01       	movw	r30, r6
    a5b8:	81 89       	ldd	r24, Z+17	; 0x11
    a5ba:	81 50       	subi	r24, 0x01	; 1
    a5bc:	81 8b       	std	Z+17, r24	; 0x11
			}
			SFX_BRICK_EXPLODE;
    a5be:	2f ed       	ldi	r18, 0xDF	; 223
    a5c0:	47 e1       	ldi	r20, 0x17	; 23
    a5c2:	61 e0       	ldi	r22, 0x01	; 1
    a5c4:	4b c0       	rjmp	.+150    	; 0xa65c <collision_detect_shot+0x37e>
			hit_metal = 0;
			break;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a5c6:	12 30       	cpi	r17, 0x02	; 2
    a5c8:	09 f0       	breq	.+2      	; 0xa5cc <collision_detect_shot+0x2ee>
    a5ca:	71 cf       	rjmp	.-286    	; 0xa4ae <collision_detect_shot+0x1d0>
    a5cc:	c1 01       	movw	r24, r2
    a5ce:	6e e1       	ldi	r22, 0x1E	; 30
    a5d0:	70 e0       	ldi	r23, 0x00	; 0
    a5d2:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    a5d6:	6d 5f       	subi	r22, 0xFD	; 253
    a5d8:	7f 4f       	sbci	r23, 0xFF	; 255
    a5da:	e6 2e       	mov	r14, r22
    a5dc:	ee 0c       	add	r14, r14
    a5de:	ee 0c       	add	r14, r14
    a5e0:	ee 0c       	add	r14, r14
    a5e2:	08 2f       	mov	r16, r24
    a5e4:	00 0f       	add	r16, r16
    a5e6:	00 0f       	add	r16, r16
    a5e8:	00 0f       	add	r16, r16
    a5ea:	20 e0       	ldi	r18, 0x00	; 0
    a5ec:	30 e0       	ldi	r19, 0x00	; 0
    a5ee:	40 e0       	ldi	r20, 0x00	; 0
    a5f0:	50 e4       	ldi	r21, 0x40	; 64
    a5f2:	f4 01       	movw	r30, r8
    a5f4:	67 81       	ldd	r22, Z+7	; 0x07
    a5f6:	70 85       	ldd	r23, Z+8	; 0x08
    a5f8:	81 85       	ldd	r24, Z+9	; 0x09
    a5fa:	92 85       	ldd	r25, Z+10	; 0x0a
    a5fc:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a600:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a604:	16 2f       	mov	r17, r22
    a606:	20 e0       	ldi	r18, 0x00	; 0
    a608:	30 e0       	ldi	r19, 0x00	; 0
    a60a:	40 e0       	ldi	r20, 0x00	; 0
    a60c:	50 e4       	ldi	r21, 0x40	; 64
    a60e:	f4 01       	movw	r30, r8
    a610:	63 81       	ldd	r22, Z+3	; 0x03
    a612:	74 81       	ldd	r23, Z+4	; 0x04
    a614:	85 81       	ldd	r24, Z+5	; 0x05
    a616:	96 81       	ldd	r25, Z+6	; 0x06
    a618:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    a61c:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a620:	86 2f       	mov	r24, r22
    a622:	98 e0       	ldi	r25, 0x08	; 8
    a624:	a9 2e       	mov	r10, r25
    a626:	28 e0       	ldi	r18, 0x08	; 8
    a628:	c2 2e       	mov	r12, r18
    a62a:	24 e0       	ldi	r18, 0x04	; 4
    a62c:	44 e0       	ldi	r20, 0x04	; 4
    a62e:	61 2f       	mov	r22, r17
    a630:	0e 94 99 48 	call	0x9132	; 0x9132 <LBCollides>
    a634:	88 23       	and	r24, r24
    a636:	09 f4       	brne	.+2      	; 0xa63a <collision_detect_shot+0x35c>
    a638:	3a cf       	rjmp	.-396    	; 0xa4ae <collision_detect_shot+0x1d0>
        {
		    hit_metal = 1;
    a63a:	ff 24       	eor	r15, r15
    a63c:	f3 94       	inc	r15
    a63e:	37 cf       	rjmp	.-402    	; 0xa4ae <collision_detect_shot+0x1d0>
        }
	}
	if (hit_metal)
    a640:	ff 20       	and	r15, r15
    a642:	79 f0       	breq	.+30     	; 0xa662 <collision_detect_shot+0x384>
	{
        init_shot_state(shot, shot->shot_type);
    a644:	f4 01       	movw	r30, r8
    a646:	63 85       	ldd	r22, Z+11	; 0x0b
    a648:	c4 01       	movw	r24, r8
    a64a:	0e 94 18 4a 	call	0x9430	; 0x9430 <init_shot_state>
        player->active_shots--;
    a64e:	f3 01       	movw	r30, r6
    a650:	81 89       	ldd	r24, Z+17	; 0x11
    a652:	81 50       	subi	r24, 0x01	; 1
    a654:	81 8b       	std	Z+17, r24	; 0x11
        SFX_METAL;
    a656:	2f ef       	ldi	r18, 0xFF	; 255
    a658:	47 e1       	ldi	r20, 0x17	; 23
    a65a:	66 e0       	ldi	r22, 0x06	; 6
    a65c:	84 e0       	ldi	r24, 0x04	; 4
    a65e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
	}
}
    a662:	26 96       	adiw	r28, 0x06	; 6
    a664:	0f b6       	in	r0, 0x3f	; 63
    a666:	f8 94       	cli
    a668:	de bf       	out	0x3e, r29	; 62
    a66a:	0f be       	out	0x3f, r0	; 63
    a66c:	cd bf       	out	0x3d, r28	; 61
    a66e:	df 91       	pop	r29
    a670:	cf 91       	pop	r28
    a672:	1f 91       	pop	r17
    a674:	0f 91       	pop	r16
    a676:	ff 90       	pop	r15
    a678:	ef 90       	pop	r14
    a67a:	cf 90       	pop	r12
    a67c:	af 90       	pop	r10
    a67e:	9f 90       	pop	r9
    a680:	8f 90       	pop	r8
    a682:	7f 90       	pop	r7
    a684:	6f 90       	pop	r6
    a686:	5f 90       	pop	r5
    a688:	4f 90       	pop	r4
    a68a:	3f 90       	pop	r3
    a68c:	2f 90       	pop	r2
    a68e:	08 95       	ret

0000a690 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    a690:	fc 01       	movw	r30, r24
    a692:	8e e1       	ldi	r24, 0x1E	; 30
    a694:	48 9f       	mul	r20, r24
    a696:	a0 01       	movw	r20, r0
    a698:	11 24       	eor	r1, r1
    a69a:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    a69c:	64 0f       	add	r22, r20
    a69e:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    a6a0:	21 11       	cpse	r18, r1
    a6a2:	09 c0       	rjmp	.+18     	; 0xa6b6 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    a6a4:	71 83       	std	Z+1, r23	; 0x01
    a6a6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    a6a8:	cb 01       	movw	r24, r22
    a6aa:	01 96       	adiw	r24, 0x01	; 1
    a6ac:	93 83       	std	Z+3, r25	; 0x03
    a6ae:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a6b0:	6e 5f       	subi	r22, 0xFE	; 254
    a6b2:	7f 4f       	sbci	r23, 0xFF	; 255
    a6b4:	1c c0       	rjmp	.+56     	; 0xa6ee <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    a6b6:	21 30       	cpi	r18, 0x01	; 1
    a6b8:	31 f4       	brne	.+12     	; 0xa6c6 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    a6ba:	cb 01       	movw	r24, r22
    a6bc:	02 96       	adiw	r24, 0x02	; 2
    a6be:	91 83       	std	Z+1, r25	; 0x01
    a6c0:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    a6c2:	4e 96       	adiw	r24, 0x1e	; 30
    a6c4:	07 c0       	rjmp	.+14     	; 0xa6d4 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    a6c6:	22 30       	cpi	r18, 0x02	; 2
    a6c8:	51 f4       	brne	.+20     	; 0xa6de <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    a6ca:	cb 01       	movw	r24, r22
    a6cc:	cc 96       	adiw	r24, 0x3c	; 60
    a6ce:	91 83       	std	Z+1, r25	; 0x01
    a6d0:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    a6d2:	01 96       	adiw	r24, 0x01	; 1
    a6d4:	93 83       	std	Z+3, r25	; 0x03
    a6d6:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a6d8:	62 5c       	subi	r22, 0xC2	; 194
    a6da:	7f 4f       	sbci	r23, 0xFF	; 255
    a6dc:	08 c0       	rjmp	.+16     	; 0xa6ee <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    a6de:	71 83       	std	Z+1, r23	; 0x01
    a6e0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    a6e2:	cb 01       	movw	r24, r22
    a6e4:	4e 96       	adiw	r24, 0x1e	; 30
    a6e6:	93 83       	std	Z+3, r25	; 0x03
    a6e8:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    a6ea:	64 5c       	subi	r22, 0xC4	; 196
    a6ec:	7f 4f       	sbci	r23, 0xFF	; 255
    a6ee:	75 83       	std	Z+5, r23	; 0x05
    a6f0:	64 83       	std	Z+4, r22	; 0x04
    a6f2:	08 95       	ret

0000a6f4 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    a6f4:	2f 92       	push	r2
    a6f6:	3f 92       	push	r3
    a6f8:	4f 92       	push	r4
    a6fa:	5f 92       	push	r5
    a6fc:	6f 92       	push	r6
    a6fe:	7f 92       	push	r7
    a700:	8f 92       	push	r8
    a702:	9f 92       	push	r9
    a704:	af 92       	push	r10
    a706:	bf 92       	push	r11
    a708:	cf 92       	push	r12
    a70a:	df 92       	push	r13
    a70c:	ef 92       	push	r14
    a70e:	ff 92       	push	r15
    a710:	0f 93       	push	r16
    a712:	1f 93       	push	r17
    a714:	cf 93       	push	r28
    a716:	df 93       	push	r29
    a718:	cd b7       	in	r28, 0x3d	; 61
    a71a:	de b7       	in	r29, 0x3e	; 62
    a71c:	2d 97       	sbiw	r28, 0x0d	; 13
    a71e:	0f b6       	in	r0, 0x3f	; 63
    a720:	f8 94       	cli
    a722:	de bf       	out	0x3e, r29	; 62
    a724:	0f be       	out	0x3f, r0	; 63
    a726:	cd bf       	out	0x3d, r28	; 61
    a728:	4c 01       	movw	r8, r24
    a72a:	7a 87       	std	Y+10, r23	; 0x0a
    a72c:	69 87       	std	Y+9, r22	; 0x09
    a72e:	14 2f       	mov	r17, r20
    a730:	f2 2e       	mov	r15, r18
	int tiles[3] = {0,0,0};
    a732:	1a 82       	std	Y+2, r1	; 0x02
    a734:	19 82       	std	Y+1, r1	; 0x01
    a736:	1c 82       	std	Y+4, r1	; 0x04
    a738:	1b 82       	std	Y+3, r1	; 0x03
    a73a:	1e 82       	std	Y+6, r1	; 0x06
    a73c:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a73e:	20 e0       	ldi	r18, 0x00	; 0
    a740:	30 e0       	ldi	r19, 0x00	; 0
    a742:	40 e0       	ldi	r20, 0x00	; 0
    a744:	5e e3       	ldi	r21, 0x3E	; 62
    a746:	dc 01       	movw	r26, r24
    a748:	17 96       	adiw	r26, 0x07	; 7
    a74a:	6d 91       	ld	r22, X+
    a74c:	7d 91       	ld	r23, X+
    a74e:	8d 91       	ld	r24, X+
    a750:	9c 91       	ld	r25, X
    a752:	1a 97       	sbiw	r26, 0x0a	; 10
    a754:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    a758:	20 e0       	ldi	r18, 0x00	; 0
    a75a:	30 e0       	ldi	r19, 0x00	; 0
    a75c:	40 e4       	ldi	r20, 0x40	; 64
    a75e:	50 e4       	ldi	r21, 0x40	; 64
    a760:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    a764:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a768:	06 2f       	mov	r16, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    a76a:	20 e0       	ldi	r18, 0x00	; 0
    a76c:	30 e0       	ldi	r19, 0x00	; 0
    a76e:	40 e0       	ldi	r20, 0x00	; 0
    a770:	5e e3       	ldi	r21, 0x3E	; 62
    a772:	f4 01       	movw	r30, r8
    a774:	63 81       	ldd	r22, Z+3	; 0x03
    a776:	74 81       	ldd	r23, Z+4	; 0x04
    a778:	85 81       	ldd	r24, Z+5	; 0x05
    a77a:	96 81       	ldd	r25, Z+6	; 0x06
    a77c:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    a780:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    a784:	d4 01       	movw	r26, r8
    a786:	2c 91       	ld	r18, X
    a788:	40 2f       	mov	r20, r16
    a78a:	ce 01       	movw	r24, r28
    a78c:	01 96       	adiw	r24, 0x01	; 1
    a78e:	0e 94 48 53 	call	0xa690	; 0xa690 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    a792:	c4 01       	movw	r24, r8
    a794:	0e 94 4f 50 	call	0xa09e	; 0xa09e <collision_detect_boundries>
    a798:	88 23       	and	r24, r24
    a79a:	31 f0       	breq	.+12     	; 0xa7a8 <collision_detect_player+0xb4>
	{
		recoil_sprite(&player->shared);
    a79c:	c4 01       	movw	r24, r8
    a79e:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <recoil_sprite>
		player->shared.speed = 0;
    a7a2:	f4 01       	movw	r30, r8
    a7a4:	11 82       	std	Z+1, r1	; 0x01
    a7a6:	ed c0       	rjmp	.+474    	; 0xa982 <collision_detect_player+0x28e>
    a7a8:	ce 01       	movw	r24, r28
    a7aa:	01 96       	adiw	r24, 0x01	; 1
    a7ac:	3c 01       	movw	r6, r24
    a7ae:	de 01       	movw	r26, r28
    a7b0:	17 96       	adiw	r26, 0x07	; 7
    a7b2:	b8 87       	std	Y+8, r27	; 0x08
    a7b4:	af 83       	std	Y+7, r26	; 0x07
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a7b6:	3e e1       	ldi	r19, 0x1E	; 30
    a7b8:	23 2e       	mov	r2, r19
    a7ba:	31 2c       	mov	r3, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    a7bc:	bb 24       	eor	r11, r11
    a7be:	b3 94       	inc	r11
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a7c0:	bb e0       	ldi	r27, 0x0B	; 11
    a7c2:	b1 0f       	add	r27, r17
    a7c4:	bb 87       	std	Y+11, r27	; 0x0b
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a7c6:	ea e0       	ldi	r30, 0x0A	; 10
    a7c8:	e1 0f       	add	r30, r17
    a7ca:	ec 87       	std	Y+12, r30	; 0x0c
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    a7cc:	d3 01       	movw	r26, r6
    a7ce:	4d 90       	ld	r4, X+
    a7d0:	5c 90       	ld	r5, X
    a7d2:	c2 01       	movw	r24, r4
    a7d4:	0e 94 36 4f 	call	0x9e6c	; 0x9e6c <solid_directional_tile>
    a7d8:	88 23       	and	r24, r24
    a7da:	01 f1       	breq	.+64     	; 0xa81c <collision_detect_player+0x128>
    a7dc:	f4 01       	movw	r30, r8
    a7de:	67 81       	ldd	r22, Z+7	; 0x07
    a7e0:	70 85       	ldd	r23, Z+8	; 0x08
    a7e2:	81 85       	ldd	r24, Z+9	; 0x09
    a7e4:	92 85       	ldd	r25, Z+10	; 0x0a
    a7e6:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a7ea:	46 2f       	mov	r20, r22
    a7ec:	d4 01       	movw	r26, r8
    a7ee:	13 96       	adiw	r26, 0x03	; 3
    a7f0:	6d 91       	ld	r22, X+
    a7f2:	7d 91       	ld	r23, X+
    a7f4:	8d 91       	ld	r24, X+
    a7f6:	9c 91       	ld	r25, X
    a7f8:	16 97       	sbiw	r26, 0x06	; 6
    a7fa:	4d 87       	std	Y+13, r20	; 0x0d
    a7fc:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a800:	00 e1       	ldi	r16, 0x10	; 16
    a802:	20 e1       	ldi	r18, 0x10	; 16
    a804:	4d 85       	ldd	r20, Y+13	; 0x0d
    a806:	c2 01       	movw	r24, r4
    a808:	0e 94 4c 4f 	call	0x9e98	; 0x9e98 <collides_directional_tile>
    a80c:	88 23       	and	r24, r24
    a80e:	31 f0       	breq	.+12     	; 0xa81c <collision_detect_player+0x128>
		{
			recoil_sprite_fine(&player->shared);
    a810:	c4 01       	movw	r24, r8
    a812:	0e 94 a6 4e 	call	0x9d4c	; 0x9d4c <recoil_sprite_fine>
			player->shared.speed = 0;
    a816:	f4 01       	movw	r30, r8
    a818:	11 82       	std	Z+1, r1	; 0x01
    a81a:	aa c0       	rjmp	.+340    	; 0xa970 <collision_detect_player+0x27c>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    a81c:	c2 01       	movw	r24, r4
    a81e:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <solid_square_tile>
    a822:	88 23       	and	r24, r24
    a824:	91 f1       	breq	.+100    	; 0xa88a <collision_detect_player+0x196>
    a826:	c2 01       	movw	r24, r4
    a828:	b1 01       	movw	r22, r2
    a82a:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    a82e:	6d 5f       	subi	r22, 0xFD	; 253
    a830:	7f 4f       	sbci	r23, 0xFF	; 255
    a832:	e6 2e       	mov	r14, r22
    a834:	ee 0c       	add	r14, r14
    a836:	ee 0c       	add	r14, r14
    a838:	ee 0c       	add	r14, r14
    a83a:	08 2f       	mov	r16, r24
    a83c:	00 0f       	add	r16, r16
    a83e:	00 0f       	add	r16, r16
    a840:	00 0f       	add	r16, r16
    a842:	d4 01       	movw	r26, r8
    a844:	17 96       	adiw	r26, 0x07	; 7
    a846:	6d 91       	ld	r22, X+
    a848:	7d 91       	ld	r23, X+
    a84a:	8d 91       	ld	r24, X+
    a84c:	9c 91       	ld	r25, X
    a84e:	1a 97       	sbiw	r26, 0x0a	; 10
    a850:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a854:	d6 2e       	mov	r13, r22
    a856:	f4 01       	movw	r30, r8
    a858:	63 81       	ldd	r22, Z+3	; 0x03
    a85a:	74 81       	ldd	r23, Z+4	; 0x04
    a85c:	85 81       	ldd	r24, Z+5	; 0x05
    a85e:	96 81       	ldd	r25, Z+6	; 0x06
    a860:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    a864:	86 2f       	mov	r24, r22
    a866:	98 e0       	ldi	r25, 0x08	; 8
    a868:	a9 2e       	mov	r10, r25
    a86a:	28 e0       	ldi	r18, 0x08	; 8
    a86c:	c2 2e       	mov	r12, r18
    a86e:	20 e1       	ldi	r18, 0x10	; 16
    a870:	40 e1       	ldi	r20, 0x10	; 16
    a872:	6d 2d       	mov	r22, r13
    a874:	0e 94 99 48 	call	0x9132	; 0x9132 <LBCollides>
    a878:	88 23       	and	r24, r24
    a87a:	39 f0       	breq	.+14     	; 0xa88a <collision_detect_player+0x196>
		{
			recoil_sprite(&player->shared);
    a87c:	c4 01       	movw	r24, r8
    a87e:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <recoil_sprite>
			player->shared.speed = 0;
    a882:	d4 01       	movw	r26, r8
    a884:	11 96       	adiw	r26, 0x01	; 1
    a886:	1c 92       	st	X, r1
    a888:	73 c0       	rjmp	.+230    	; 0xa970 <collision_detect_player+0x27c>
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    a88a:	f2 01       	movw	r30, r4
    a88c:	e6 56       	subi	r30, 0x66	; 102
    a88e:	f3 4f       	sbci	r31, 0xF3	; 243
    a890:	81 81       	ldd	r24, Z+1	; 0x01
    a892:	87 30       	cpi	r24, 0x07	; 7
    a894:	b9 f4       	brne	.+46     	; 0xa8c4 <collision_detect_player+0x1d0>
    a896:	d4 01       	movw	r26, r8
    a898:	54 96       	adiw	r26, 0x14	; 20
    a89a:	8c 91       	ld	r24, X
    a89c:	54 97       	sbiw	r26, 0x14	; 20
    a89e:	80 fd       	sbrc	r24, 0
    a8a0:	67 c0       	rjmp	.+206    	; 0xa970 <collision_detect_player+0x27c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a8a2:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    a8a4:	e1 e4       	ldi	r30, 0x41	; 65
    a8a6:	58 96       	adiw	r26, 0x18	; 24
    a8a8:	ec 93       	st	X, r30
    a8aa:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    a8ac:	5a 96       	adiw	r26, 0x1a	; 26
    a8ae:	bc 92       	st	X, r11
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a8b0:	4a e8       	ldi	r20, 0x8A	; 138
    a8b2:	54 e2       	ldi	r21, 0x24	; 36
    a8b4:	61 e0       	ldi	r22, 0x01	; 1
    a8b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    a8b8:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a8bc:	d3 01       	movw	r26, r6
    a8be:	8d 91       	ld	r24, X+
    a8c0:	9c 91       	ld	r25, X
    a8c2:	14 c0       	rjmp	.+40     	; 0xa8ec <collision_detect_player+0x1f8>
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    a8c4:	89 30       	cpi	r24, 0x09	; 9
    a8c6:	09 f5       	brne	.+66     	; 0xa90a <collision_detect_player+0x216>
    a8c8:	d4 01       	movw	r26, r8
    a8ca:	54 96       	adiw	r26, 0x14	; 20
    a8cc:	8c 91       	ld	r24, X
    a8ce:	54 97       	sbiw	r26, 0x14	; 20
    a8d0:	80 fd       	sbrc	r24, 0
    a8d2:	4e c0       	rjmp	.+156    	; 0xa970 <collision_detect_player+0x27c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a8d4:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    a8d6:	59 96       	adiw	r26, 0x19	; 25
    a8d8:	bc 92       	st	X, r11
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a8da:	44 e8       	ldi	r20, 0x84	; 132
    a8dc:	54 e2       	ldi	r21, 0x24	; 36
    a8de:	61 e0       	ldi	r22, 0x01	; 1
    a8e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    a8e2:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a8e6:	f3 01       	movw	r30, r6
    a8e8:	80 81       	ld	r24, Z
    a8ea:	91 81       	ldd	r25, Z+1	; 0x01
    a8ec:	b1 01       	movw	r22, r2
    a8ee:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    a8f2:	6d 5f       	subi	r22, 0xFD	; 253
    a8f4:	40 e0       	ldi	r20, 0x00	; 0
    a8f6:	50 e0       	ldi	r21, 0x00	; 0
    a8f8:	0e 94 63 39 	call	0x72c6	; 0x72c6 <SetTile>
			SFX_ITEM;
    a8fc:	2f ef       	ldi	r18, 0xFF	; 255
    a8fe:	47 e1       	ldi	r20, 0x17	; 23
    a900:	63 e0       	ldi	r22, 0x03	; 3
    a902:	84 e0       	ldi	r24, 0x04	; 4
    a904:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
    a908:	33 c0       	rjmp	.+102    	; 0xa970 <collision_detect_player+0x27c>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    a90a:	88 30       	cpi	r24, 0x08	; 8
    a90c:	89 f5       	brne	.+98     	; 0xa970 <collision_detect_player+0x27c>
    a90e:	d4 01       	movw	r26, r8
    a910:	54 96       	adiw	r26, 0x14	; 20
    a912:	8c 91       	ld	r24, X
    a914:	80 fd       	sbrc	r24, 0
    a916:	2c c0       	rjmp	.+88     	; 0xa970 <collision_detect_player+0x27c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a918:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a91a:	c2 01       	movw	r24, r4
    a91c:	b1 01       	movw	r22, r2
    a91e:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    a922:	6d 5f       	subi	r22, 0xFD	; 253
    a924:	40 e0       	ldi	r20, 0x00	; 0
    a926:	50 e0       	ldi	r21, 0x00	; 0
    a928:	0e 94 63 39 	call	0x72c6	; 0x72c6 <SetTile>
			SFX_ITEM;
    a92c:	2f ef       	ldi	r18, 0xFF	; 255
    a92e:	47 e1       	ldi	r20, 0x17	; 23
    a930:	63 e0       	ldi	r22, 0x03	; 3
    a932:	84 e0       	ldi	r24, 0x04	; 4
    a934:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
			if (!(other_player->flags & EXPLODING_FLAG))
    a938:	e9 85       	ldd	r30, Y+9	; 0x09
    a93a:	fa 85       	ldd	r31, Y+10	; 0x0a
    a93c:	84 89       	ldd	r24, Z+20	; 0x14
    a93e:	80 fd       	sbrc	r24, 0
    a940:	17 c0       	rjmp	.+46     	; 0xa970 <collision_detect_player+0x27c>
			{
				player->level_score++;
    a942:	d4 01       	movw	r26, r8
    a944:	50 96       	adiw	r26, 0x10	; 16
    a946:	8c 91       	ld	r24, X
    a948:	50 97       	sbiw	r26, 0x10	; 16
    a94a:	8f 5f       	subi	r24, 0xFF	; 255
    a94c:	50 96       	adiw	r26, 0x10	; 16
    a94e:	8c 93       	st	X, r24
    a950:	50 97       	sbiw	r26, 0x10	; 16
				player->score++;
    a952:	1f 96       	adiw	r26, 0x0f	; 15
    a954:	8c 91       	ld	r24, X
    a956:	1f 97       	sbiw	r26, 0x0f	; 15
    a958:	8f 5f       	subi	r24, 0xFF	; 255
    a95a:	1f 96       	adiw	r26, 0x0f	; 15
    a95c:	8c 93       	st	X, r24
				render_score(player, hud_x);
    a95e:	61 2f       	mov	r22, r17
    a960:	c4 01       	movw	r24, r8
    a962:	0e 94 ab 4c 	call	0x9956	; 0x9956 <render_score>
				kill_player(other_player, other_player_hud_x);
    a966:	6f 2d       	mov	r22, r15
    a968:	89 85       	ldd	r24, Y+9	; 0x09
    a96a:	9a 85       	ldd	r25, Y+10	; 0x0a
    a96c:	0e 94 9d 50 	call	0xa13a	; 0xa13a <kill_player>
    a970:	b2 e0       	ldi	r27, 0x02	; 2
    a972:	6b 0e       	add	r6, r27
    a974:	71 1c       	adc	r7, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    a976:	ef 81       	ldd	r30, Y+7	; 0x07
    a978:	f8 85       	ldd	r31, Y+8	; 0x08
    a97a:	6e 16       	cp	r6, r30
    a97c:	7f 06       	cpc	r7, r31
    a97e:	09 f0       	breq	.+2      	; 0xa982 <collision_detect_player+0x28e>
    a980:	25 cf       	rjmp	.-438    	; 0xa7cc <collision_detect_player+0xd8>
				render_score(player, hud_x);
				kill_player(other_player, other_player_hud_x);
			}
		}
	}
}
    a982:	2d 96       	adiw	r28, 0x0d	; 13
    a984:	0f b6       	in	r0, 0x3f	; 63
    a986:	f8 94       	cli
    a988:	de bf       	out	0x3e, r29	; 62
    a98a:	0f be       	out	0x3f, r0	; 63
    a98c:	cd bf       	out	0x3d, r28	; 61
    a98e:	df 91       	pop	r29
    a990:	cf 91       	pop	r28
    a992:	1f 91       	pop	r17
    a994:	0f 91       	pop	r16
    a996:	ff 90       	pop	r15
    a998:	ef 90       	pop	r14
    a99a:	df 90       	pop	r13
    a99c:	cf 90       	pop	r12
    a99e:	bf 90       	pop	r11
    a9a0:	af 90       	pop	r10
    a9a2:	9f 90       	pop	r9
    a9a4:	8f 90       	pop	r8
    a9a6:	7f 90       	pop	r7
    a9a8:	6f 90       	pop	r6
    a9aa:	5f 90       	pop	r5
    a9ac:	4f 90       	pop	r4
    a9ae:	3f 90       	pop	r3
    a9b0:	2f 90       	pop	r2
    a9b2:	08 95       	ret

0000a9b4 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    a9b4:	bf 92       	push	r11
    a9b6:	cf 92       	push	r12
    a9b8:	df 92       	push	r13
    a9ba:	ef 92       	push	r14
    a9bc:	ff 92       	push	r15
    a9be:	0f 93       	push	r16
    a9c0:	1f 93       	push	r17
    a9c2:	cf 93       	push	r28
    a9c4:	df 93       	push	r29
    a9c6:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a9c8:	c0 e0       	ldi	r28, 0x00	; 0
    a9ca:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    a9cc:	0e e1       	ldi	r16, 0x1E	; 30
    a9ce:	10 e0       	ldi	r17, 0x00	; 0
    a9d0:	ce 01       	movw	r24, r28
    a9d2:	b8 01       	movw	r22, r16
    a9d4:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
		y = 3 + i / 30;
    a9d8:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    a9da:	bb 20       	and	r11, r11
    a9dc:	19 f0       	breq	.+6      	; 0xa9e4 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    a9de:	43 e9       	ldi	r20, 0x93	; 147
    a9e0:	54 e2       	ldi	r21, 0x24	; 36
    a9e2:	11 c0       	rjmp	.+34     	; 0xaa06 <load_level_tiles+0x52>
    a9e4:	fe 01       	movw	r30, r28
    a9e6:	e6 56       	subi	r30, 0x66	; 102
    a9e8:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    a9ea:	e1 81       	ldd	r30, Z+1	; 0x01
    a9ec:	ce 2e       	mov	r12, r30
    a9ee:	d1 2c       	mov	r13, r1
    a9f0:	f6 01       	movw	r30, r12
    a9f2:	31 97       	sbiw	r30, 0x01	; 1
    a9f4:	e9 30       	cpi	r30, 0x09	; 9
    a9f6:	f1 05       	cpc	r31, r1
    a9f8:	08 f5       	brcc	.+66     	; 0xaa3c <load_level_tiles+0x88>
    a9fa:	e8 5c       	subi	r30, 0xC8	; 200
    a9fc:	ff 4f       	sbci	r31, 0xFF	; 255
    a9fe:	0c 94 a5 60 	jmp	0xc14a	; 0xc14a <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    aa02:	40 e9       	ldi	r20, 0x90	; 144
    aa04:	54 e2       	ldi	r21, 0x24	; 36
    aa06:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <DrawMap2>
    aa0a:	1c c0       	rjmp	.+56     	; 0xaa44 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    aa0c:	4d e8       	ldi	r20, 0x8D	; 141
    aa0e:	54 e2       	ldi	r21, 0x24	; 36
    aa10:	fa cf       	rjmp	.-12     	; 0xaa06 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    aa12:	48 e7       	ldi	r20, 0x78	; 120
    aa14:	54 e2       	ldi	r21, 0x24	; 36
    aa16:	f7 cf       	rjmp	.-18     	; 0xaa06 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    aa18:	42 e7       	ldi	r20, 0x72	; 114
    aa1a:	54 e2       	ldi	r21, 0x24	; 36
    aa1c:	f4 cf       	rjmp	.-24     	; 0xaa06 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    aa1e:	4f e6       	ldi	r20, 0x6F	; 111
    aa20:	54 e2       	ldi	r21, 0x24	; 36
    aa22:	f1 cf       	rjmp	.-30     	; 0xaa06 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    aa24:	45 e7       	ldi	r20, 0x75	; 117
    aa26:	54 e2       	ldi	r21, 0x24	; 36
    aa28:	ee cf       	rjmp	.-36     	; 0xaa06 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    aa2a:	4a e8       	ldi	r20, 0x8A	; 138
    aa2c:	54 e2       	ldi	r21, 0x24	; 36
    aa2e:	eb cf       	rjmp	.-42     	; 0xaa06 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    aa30:	47 e8       	ldi	r20, 0x87	; 135
    aa32:	54 e2       	ldi	r21, 0x24	; 36
    aa34:	e8 cf       	rjmp	.-48     	; 0xaa06 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    aa36:	44 e8       	ldi	r20, 0x84	; 132
    aa38:	54 e2       	ldi	r21, 0x24	; 36
    aa3a:	e5 cf       	rjmp	.-54     	; 0xaa06 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    aa3c:	40 e0       	ldi	r20, 0x00	; 0
    aa3e:	50 e0       	ldi	r21, 0x00	; 0
    aa40:	0e 94 63 39 	call	0x72c6	; 0x72c6 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    aa44:	21 96       	adiw	r28, 0x01	; 1
    aa46:	ce 3e       	cpi	r28, 0xEE	; 238
    aa48:	82 e0       	ldi	r24, 0x02	; 2
    aa4a:	d8 07       	cpc	r29, r24
    aa4c:	09 f6       	brne	.-126    	; 0xa9d0 <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    aa4e:	df 91       	pop	r29
    aa50:	cf 91       	pop	r28
    aa52:	1f 91       	pop	r17
    aa54:	0f 91       	pop	r16
    aa56:	ff 90       	pop	r15
    aa58:	ef 90       	pop	r14
    aa5a:	df 90       	pop	r13
    aa5c:	cf 90       	pop	r12
    aa5e:	bf 90       	pop	r11
    aa60:	08 95       	ret

0000aa62 <load_level>:

void load_level(int level_number)
{
    aa62:	9f 92       	push	r9
    aa64:	af 92       	push	r10
    aa66:	bf 92       	push	r11
    aa68:	cf 92       	push	r12
    aa6a:	df 92       	push	r13
    aa6c:	ef 92       	push	r14
    aa6e:	ff 92       	push	r15
    aa70:	0f 93       	push	r16
    aa72:	1f 93       	push	r17
    aa74:	cf 93       	push	r28
    aa76:	df 93       	push	r29
    aa78:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    aa7a:	8e ee       	ldi	r24, 0xEE	; 238
    aa7c:	92 e0       	ldi	r25, 0x02	; 2
    aa7e:	c8 9f       	mul	r28, r24
    aa80:	70 01       	movw	r14, r0
    aa82:	c9 9f       	mul	r28, r25
    aa84:	f0 0c       	add	r15, r0
    aa86:	d8 9f       	mul	r29, r24
    aa88:	f0 0c       	add	r15, r0
    aa8a:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    aa8c:	83 e0       	ldi	r24, 0x03	; 3
    aa8e:	80 93 0c 0c 	sts	0x0C0C, r24
	clear_sprites();
    aa92:	0e 94 1f 4b 	call	0x963e	; 0x963e <clear_sprites>
	game.current_level = level_number;
    aa96:	c0 93 0d 0c 	sts	0x0C0D, r28
    aa9a:	8b e9       	ldi	r24, 0x9B	; 155
    aa9c:	c8 2e       	mov	r12, r24
    aa9e:	8c e0       	ldi	r24, 0x0C	; 12
    aaa0:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    aaa2:	c0 e0       	ldi	r28, 0x00	; 0
    aaa4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    aaa6:	0e e1       	ldi	r16, 0x1E	; 30
    aaa8:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    aaaa:	92 e3       	ldi	r25, 0x32	; 50
    aaac:	99 2e       	mov	r9, r25
    aaae:	fe 01       	movw	r30, r28
    aab0:	ee 0d       	add	r30, r14
    aab2:	ff 1d       	adc	r31, r15
    aab4:	e5 52       	subi	r30, 0x25	; 37
    aab6:	fc 4f       	sbci	r31, 0xFC	; 252
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    aab8:	e4 91       	lpm	r30, Z
    aaba:	56 01       	movw	r10, r12
    aabc:	d6 01       	movw	r26, r12
    aabe:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    aac0:	e8 35       	cpi	r30, 0x58	; 88
    aac2:	01 f5       	brne	.+64     	; 0xab04 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    aac4:	ce 01       	movw	r24, r28
    aac6:	b8 01       	movw	r22, r16
    aac8:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    aacc:	88 0f       	add	r24, r24
    aace:	88 0f       	add	r24, r24
    aad0:	88 0f       	add	r24, r24
    aad2:	80 93 3b 0c 	sts	0x0C3B, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    aad6:	6d 5f       	subi	r22, 0xFD	; 253
    aad8:	7f 4f       	sbci	r23, 0xFF	; 255
    aada:	66 0f       	add	r22, r22
    aadc:	66 0f       	add	r22, r22
    aade:	66 0f       	add	r22, r22
    aae0:	60 93 3c 0c 	sts	0x0C3C, r22
			player1.level_score = 0;
    aae4:	10 92 39 0c 	sts	0x0C39, r1
			player1.has_over_speed = false;
    aae8:	10 92 43 0c 	sts	0x0C43, r1
			player1.has_rocket = false;
    aaec:	10 92 42 0c 	sts	0x0C42, r1
			player1.max_speed = MAX_SPEED;
    aaf0:	90 92 41 0c 	sts	0x0C41, r9
			player_init_shot_state(&player1);
    aaf4:	89 e2       	ldi	r24, 0x29	; 41
    aaf6:	9c e0       	ldi	r25, 0x0C	; 12
    aaf8:	0e 94 ca 4a 	call	0x9594	; 0x9594 <player_init_shot_state>
			player_spawn(&player1);
    aafc:	89 e2       	ldi	r24, 0x29	; 41
    aafe:	9c e0       	ldi	r25, 0x0C	; 12
    ab00:	0e 94 e5 4a 	call	0x95ca	; 0x95ca <player_spawn>
    ab04:	bf ef       	ldi	r27, 0xFF	; 255
    ab06:	cb 1a       	sub	r12, r27
    ab08:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    ab0a:	f5 01       	movw	r30, r10
    ab0c:	80 81       	ld	r24, Z
    ab0e:	83 36       	cpi	r24, 0x63	; 99
    ab10:	01 f5       	brne	.+64     	; 0xab52 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    ab12:	ce 01       	movw	r24, r28
    ab14:	b8 01       	movw	r22, r16
    ab16:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    ab1a:	88 0f       	add	r24, r24
    ab1c:	88 0f       	add	r24, r24
    ab1e:	88 0f       	add	r24, r24
    ab20:	80 93 9b 0f 	sts	0x0F9B, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    ab24:	6d 5f       	subi	r22, 0xFD	; 253
    ab26:	7f 4f       	sbci	r23, 0xFF	; 255
    ab28:	66 0f       	add	r22, r22
    ab2a:	66 0f       	add	r22, r22
    ab2c:	66 0f       	add	r22, r22
    ab2e:	60 93 9c 0f 	sts	0x0F9C, r22
			player2.level_score = 0;
    ab32:	10 92 99 0f 	sts	0x0F99, r1
			player2.has_over_speed = false;
    ab36:	10 92 a3 0f 	sts	0x0FA3, r1
			player2.has_rocket = false;
    ab3a:	10 92 a2 0f 	sts	0x0FA2, r1
			player2.max_speed = MAX_SPEED;
    ab3e:	90 92 a1 0f 	sts	0x0FA1, r9
			player_init_shot_state(&player2);
    ab42:	89 e8       	ldi	r24, 0x89	; 137
    ab44:	9f e0       	ldi	r25, 0x0F	; 15
    ab46:	0e 94 ca 4a 	call	0x9594	; 0x9594 <player_init_shot_state>
			player_spawn(&player2);
    ab4a:	89 e8       	ldi	r24, 0x89	; 137
    ab4c:	9f e0       	ldi	r25, 0x0F	; 15
    ab4e:	0e 94 e5 4a 	call	0x95ca	; 0x95ca <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    ab52:	21 96       	adiw	r28, 0x01	; 1
    ab54:	ce 3e       	cpi	r28, 0xEE	; 238
    ab56:	f2 e0       	ldi	r31, 0x02	; 2
    ab58:	df 07       	cpc	r29, r31
    ab5a:	09 f0       	breq	.+2      	; 0xab5e <load_level+0xfc>
    ab5c:	a8 cf       	rjmp	.-176    	; 0xaaae <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    ab5e:	60 e0       	ldi	r22, 0x00	; 0
    ab60:	89 e2       	ldi	r24, 0x29	; 41
    ab62:	9c e0       	ldi	r25, 0x0C	; 12
    ab64:	0e 94 8e 4c 	call	0x991c	; 0x991c <render_hud>
	render_hud(&player2, 15);
    ab68:	6f e0       	ldi	r22, 0x0F	; 15
    ab6a:	89 e8       	ldi	r24, 0x89	; 137
    ab6c:	9f e0       	ldi	r25, 0x0F	; 15
    ab6e:	0e 94 8e 4c 	call	0x991c	; 0x991c <render_hud>
	render_score(&player1, 0);
    ab72:	60 e0       	ldi	r22, 0x00	; 0
    ab74:	89 e2       	ldi	r24, 0x29	; 41
    ab76:	9c e0       	ldi	r25, 0x0C	; 12
    ab78:	0e 94 ab 4c 	call	0x9956	; 0x9956 <render_score>
	render_score(&player2, 15);
    ab7c:	6f e0       	ldi	r22, 0x0F	; 15
    ab7e:	89 e8       	ldi	r24, 0x89	; 137
    ab80:	9f e0       	ldi	r25, 0x0F	; 15
    ab82:	0e 94 ab 4c 	call	0x9956	; 0x9956 <render_score>
	Print(14, 0, &strMap[strVertSep]);
    ab86:	4c e8       	ldi	r20, 0x8C	; 140
    ab88:	51 e0       	ldi	r21, 0x01	; 1
    ab8a:	60 e0       	ldi	r22, 0x00	; 0
    ab8c:	70 e0       	ldi	r23, 0x00	; 0
    ab8e:	8e e0       	ldi	r24, 0x0E	; 14
    ab90:	90 e0       	ldi	r25, 0x00	; 0
    ab92:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(14, 1, &strMap[strVertSep]);
    ab96:	4c e8       	ldi	r20, 0x8C	; 140
    ab98:	51 e0       	ldi	r21, 0x01	; 1
    ab9a:	61 e0       	ldi	r22, 0x01	; 1
    ab9c:	70 e0       	ldi	r23, 0x00	; 0
    ab9e:	8e e0       	ldi	r24, 0x0E	; 14
    aba0:	90 e0       	ldi	r25, 0x00	; 0
    aba2:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(14, 2, &strMap[strVertSep]);
    aba6:	4c e8       	ldi	r20, 0x8C	; 140
    aba8:	51 e0       	ldi	r21, 0x01	; 1
    abaa:	62 e0       	ldi	r22, 0x02	; 2
    abac:	70 e0       	ldi	r23, 0x00	; 0
    abae:	8e e0       	ldi	r24, 0x0E	; 14
    abb0:	90 e0       	ldi	r25, 0x00	; 0
    abb2:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	load_level_tiles(false);
    abb6:	80 e0       	ldi	r24, 0x00	; 0
    abb8:	0e 94 da 54 	call	0xa9b4	; 0xa9b4 <load_level_tiles>
	SFX_LEVEL_START;
    abbc:	2f ef       	ldi	r18, 0xFF	; 255
    abbe:	47 e1       	ldi	r20, 0x17	; 23
    abc0:	65 e0       	ldi	r22, 0x05	; 5
    abc2:	84 e0       	ldi	r24, 0x04	; 4
}
    abc4:	df 91       	pop	r29
    abc6:	cf 91       	pop	r28
    abc8:	1f 91       	pop	r17
    abca:	0f 91       	pop	r16
    abcc:	ff 90       	pop	r15
    abce:	ef 90       	pop	r14
    abd0:	df 90       	pop	r13
    abd2:	cf 90       	pop	r12
    abd4:	bf 90       	pop	r11
    abd6:	af 90       	pop	r10
    abd8:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, &strMap[strVertSep]);
	Print(14, 1, &strMap[strVertSep]);
	Print(14, 2, &strMap[strVertSep]);
	load_level_tiles(false);
	SFX_LEVEL_START;
    abda:	0c 94 aa 3c 	jmp	0x7954	; 0x7954 <TriggerNote>

0000abde <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    abde:	cf 93       	push	r28
    abe0:	df 93       	push	r29
    abe2:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    abe4:	61 e0       	ldi	r22, 0x01	; 1
    abe6:	83 e0       	ldi	r24, 0x03	; 3
    abe8:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <FadeOut>
	ClearVram();
    abec:	0e 94 55 39 	call	0x72aa	; 0x72aa <ClearVram>
	clear_sprites();
    abf0:	0e 94 1f 4b 	call	0x963e	; 0x963e <clear_sprites>
	Print(8, 12, &strMap[strLevels+index*16]);
    abf4:	d0 e0       	ldi	r29, 0x00	; 0
    abf6:	ae 01       	movw	r20, r28
    abf8:	84 e0       	ldi	r24, 0x04	; 4
    abfa:	44 0f       	add	r20, r20
    abfc:	55 1f       	adc	r21, r21
    abfe:	8a 95       	dec	r24
    ac00:	e1 f7       	brne	.-8      	; 0xabfa <level_transition+0x1c>
    ac02:	4b 54       	subi	r20, 0x4B	; 75
    ac04:	5d 4f       	sbci	r21, 0xFD	; 253
    ac06:	6c e0       	ldi	r22, 0x0C	; 12
    ac08:	70 e0       	ldi	r23, 0x00	; 0
    ac0a:	88 e0       	ldi	r24, 0x08	; 8
    ac0c:	90 e0       	ldi	r25, 0x00	; 0
    ac0e:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	FadeIn(1, true);
    ac12:	61 e0       	ldi	r22, 0x01	; 1
    ac14:	81 e0       	ldi	r24, 0x01	; 1
    ac16:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    ac1a:	82 e0       	ldi	r24, 0x02	; 2
    ac1c:	0e 94 ce 49 	call	0x939c	; 0x939c <LBWaitSeconds>
	FadeOut(1, true);
    ac20:	61 e0       	ldi	r22, 0x01	; 1
    ac22:	81 e0       	ldi	r24, 0x01	; 1
    ac24:	0e 94 b9 47 	call	0x8f72	; 0x8f72 <FadeOut>
	ClearVram();
    ac28:	0e 94 55 39 	call	0x72aa	; 0x72aa <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    ac2c:	60 e0       	ldi	r22, 0x00	; 0
    ac2e:	83 e0       	ldi	r24, 0x03	; 3
    ac30:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <FadeIn>
	load_level(index);
    ac34:	ce 01       	movw	r24, r28
}
    ac36:	df 91       	pop	r29
    ac38:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    ac3a:	0c 94 31 55 	jmp	0xaa62	; 0xaa62 <load_level>

0000ac3e <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    ac3e:	10 92 0c 0c 	sts	0x0C0C, r1
	clear_sprites();
    ac42:	0e 94 1f 4b 	call	0x963e	; 0x963e <clear_sprites>
	Print(7, 13, &strMap[str1Player]);
    ac46:	4b e4       	ldi	r20, 0x4B	; 75
    ac48:	51 e0       	ldi	r21, 0x01	; 1
    ac4a:	6d e0       	ldi	r22, 0x0D	; 13
    ac4c:	70 e0       	ldi	r23, 0x00	; 0
    ac4e:	87 e0       	ldi	r24, 0x07	; 7
    ac50:	90 e0       	ldi	r25, 0x00	; 0
    ac52:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(7, 14, &strMap[str2Player]);
    ac56:	49 e5       	ldi	r20, 0x59	; 89
    ac58:	51 e0       	ldi	r21, 0x01	; 1
    ac5a:	6e e0       	ldi	r22, 0x0E	; 14
    ac5c:	70 e0       	ldi	r23, 0x00	; 0
    ac5e:	87 e0       	ldi	r24, 0x07	; 7
    ac60:	90 e0       	ldi	r25, 0x00	; 0
    ac62:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(7, 15, &strMap[strHighscores]);
    ac66:	4a e6       	ldi	r20, 0x6A	; 106
    ac68:	51 e0       	ldi	r21, 0x01	; 1
    ac6a:	6f e0       	ldi	r22, 0x0F	; 15
    ac6c:	70 e0       	ldi	r23, 0x00	; 0
    ac6e:	87 e0       	ldi	r24, 0x07	; 7
    ac70:	90 e0       	ldi	r25, 0x00	; 0
    ac72:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(3, 26, &strMap[strCopyright]);
    ac76:	42 e3       	ldi	r20, 0x32	; 50
    ac78:	51 e0       	ldi	r21, 0x01	; 1
    ac7a:	6a e1       	ldi	r22, 0x1A	; 26
    ac7c:	70 e0       	ldi	r23, 0x00	; 0
    ac7e:	83 e0       	ldi	r24, 0x03	; 3
    ac80:	90 e0       	ldi	r25, 0x00	; 0
    ac82:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    ac86:	44 ed       	ldi	r20, 0xD4	; 212
    ac88:	54 e2       	ldi	r21, 0x24	; 36
    ac8a:	65 e0       	ldi	r22, 0x05	; 5
    ac8c:	84 e0       	ldi	r24, 0x04	; 4
    ac8e:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <DrawMap2>
	MapSprite2(0, map_ball, 0);
    ac92:	40 e0       	ldi	r20, 0x00	; 0
    ac94:	61 e2       	ldi	r22, 0x21	; 33
    ac96:	74 e2       	ldi	r23, 0x24	; 36
    ac98:	80 e0       	ldi	r24, 0x00	; 0
    ac9a:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
	SFX_SPLASH;
    ac9e:	2f ef       	ldi	r18, 0xFF	; 255
    aca0:	47 e1       	ldi	r20, 0x17	; 23
    aca2:	69 e0       	ldi	r22, 0x09	; 9
    aca4:	84 e0       	ldi	r24, 0x04	; 4
    aca6:	0c 94 aa 3c 	jmp	0x7954	; 0x7954 <TriggerNote>

0000acaa <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    acaa:	ef 92       	push	r14
    acac:	ff 92       	push	r15
    acae:	0f 93       	push	r16
    acb0:	1f 93       	push	r17
    acb2:	cf 93       	push	r28
    acb4:	df 93       	push	r29
    acb6:	1f 92       	push	r1
    acb8:	cd b7       	in	r28, 0x3d	; 61
    acba:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    acbc:	81 e0       	ldi	r24, 0x01	; 1
    acbe:	80 93 0c 0c 	sts	0x0C0C, r24
	clear_sprites();
    acc2:	0e 94 1f 4b 	call	0x963e	; 0x963e <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    acc6:	40 e0       	ldi	r20, 0x00	; 0
    acc8:	60 e6       	ldi	r22, 0x60	; 96
    acca:	74 e2       	ldi	r23, 0x24	; 36
    accc:	80 e0       	ldi	r24, 0x00	; 0
    acce:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    acd2:	40 e0       	ldi	r20, 0x00	; 0
    acd4:	68 e4       	ldi	r22, 0x48	; 72
    acd6:	74 e2       	ldi	r23, 0x24	; 36
    acd8:	84 e0       	ldi	r24, 0x04	; 4
    acda:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    acde:	02 e0       	ldi	r16, 0x02	; 2
    ace0:	22 e0       	ldi	r18, 0x02	; 2
    ace2:	48 e0       	ldi	r20, 0x08	; 8
    ace4:	68 e3       	ldi	r22, 0x38	; 56
    ace6:	80 e0       	ldi	r24, 0x00	; 0
    ace8:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    acec:	22 e0       	ldi	r18, 0x02	; 2
    acee:	48 e0       	ldi	r20, 0x08	; 8
    acf0:	60 ea       	ldi	r22, 0xA0	; 160
    acf2:	84 e0       	ldi	r24, 0x04	; 4
    acf4:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <MoveSprite>
	Print(10, 2, &strMap[strHighscores]);
    acf8:	4a e6       	ldi	r20, 0x6A	; 106
    acfa:	51 e0       	ldi	r21, 0x01	; 1
    acfc:	62 e0       	ldi	r22, 0x02	; 2
    acfe:	70 e0       	ldi	r23, 0x00	; 0
    ad00:	8a e0       	ldi	r24, 0x0A	; 10
    ad02:	90 e0       	ldi	r25, 0x00	; 0
    ad04:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
    ad08:	0a ec       	ldi	r16, 0xCA	; 202
    ad0a:	1b e0       	ldi	r17, 0x0B	; 11
    ad0c:	87 e0       	ldi	r24, 0x07	; 7
    ad0e:	e8 2e       	mov	r14, r24
    ad10:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    ad12:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, &strMap[strHighscores]);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    ad14:	20 e0       	ldi	r18, 0x00	; 0
    ad16:	43 2f       	mov	r20, r19
    ad18:	b7 01       	movw	r22, r14
    ad1a:	82 e0       	ldi	r24, 0x02	; 2
    ad1c:	90 e0       	ldi	r25, 0x00	; 0
    ad1e:	39 83       	std	Y+1, r19	; 0x01
    ad20:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <PrintByte>
		PrintChar(3, y, '.');
    ad24:	4e e2       	ldi	r20, 0x2E	; 46
    ad26:	b7 01       	movw	r22, r14
    ad28:	83 e0       	ldi	r24, 0x03	; 3
    ad2a:	90 e0       	ldi	r25, 0x00	; 0
    ad2c:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <PrintChar>
    ad30:	f8 01       	movw	r30, r16
    ad32:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    ad34:	80 81       	ld	r24, Z
    ad36:	93 e0       	ldi	r25, 0x03	; 3
    ad38:	89 9f       	mul	r24, r25
    ad3a:	a0 01       	movw	r20, r0
    ad3c:	11 24       	eor	r1, r1
    ad3e:	42 51       	subi	r20, 0x12	; 18
    ad40:	54 4f       	sbci	r21, 0xF4	; 244
    ad42:	23 e0       	ldi	r18, 0x03	; 3
    ad44:	6e 2d       	mov	r22, r14
    ad46:	85 e0       	ldi	r24, 0x05	; 5
    ad48:	0e 94 68 48 	call	0x90d0	; 0x90d0 <LBPrintStr>
		Print(9, y, &strMap[strOwns]);
    ad4c:	4e ed       	ldi	r20, 0xDE	; 222
    ad4e:	51 e0       	ldi	r21, 0x01	; 1
    ad50:	b7 01       	movw	r22, r14
    ad52:	89 e0       	ldi	r24, 0x09	; 9
    ad54:	90 e0       	ldi	r25, 0x00	; 0
    ad56:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
    ad5a:	f8 01       	movw	r30, r16
    ad5c:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    ad5e:	80 81       	ld	r24, Z
    ad60:	e3 e0       	ldi	r30, 0x03	; 3
    ad62:	8e 9f       	mul	r24, r30
    ad64:	a0 01       	movw	r20, r0
    ad66:	11 24       	eor	r1, r1
    ad68:	42 51       	subi	r20, 0x12	; 18
    ad6a:	54 4f       	sbci	r21, 0xF4	; 244
    ad6c:	23 e0       	ldi	r18, 0x03	; 3
    ad6e:	6e 2d       	mov	r22, r14
    ad70:	8e e0       	ldi	r24, 0x0E	; 14
    ad72:	0e 94 68 48 	call	0x90d0	; 0x90d0 <LBPrintStr>
		Print(18, y, &strMap[strBy]);
    ad76:	43 ee       	ldi	r20, 0xE3	; 227
    ad78:	51 e0       	ldi	r21, 0x01	; 1
    ad7a:	b7 01       	movw	r22, r14
    ad7c:	82 e1       	ldi	r24, 0x12	; 18
    ad7e:	90 e0       	ldi	r25, 0x00	; 0
    ad80:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
    ad84:	f8 01       	movw	r30, r16
    ad86:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    ad88:	21 e0       	ldi	r18, 0x01	; 1
    ad8a:	40 81       	ld	r20, Z
    ad8c:	b7 01       	movw	r22, r14
    ad8e:	87 e1       	ldi	r24, 0x17	; 23
    ad90:	90 e0       	ldi	r25, 0x00	; 0
    ad92:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <PrintByte>
		PrintChar(24, y, '-');
    ad96:	4d e2       	ldi	r20, 0x2D	; 45
    ad98:	b7 01       	movw	r22, r14
    ad9a:	88 e1       	ldi	r24, 0x18	; 24
    ad9c:	90 e0       	ldi	r25, 0x00	; 0
    ad9e:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    ada2:	21 e0       	ldi	r18, 0x01	; 1
    ada4:	f8 01       	movw	r30, r16
    ada6:	40 81       	ld	r20, Z
    ada8:	b7 01       	movw	r22, r14
    adaa:	8b e1       	ldi	r24, 0x1B	; 27
    adac:	90 e0       	ldi	r25, 0x00	; 0
    adae:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <PrintByte>
		y += 3;
		rank += 1;
    adb2:	39 81       	ldd	r19, Y+1	; 0x01
    adb4:	3f 5f       	subi	r19, 0xFF	; 255
    adb6:	f3 e0       	ldi	r31, 0x03	; 3
    adb8:	ef 0e       	add	r14, r31
    adba:	f1 1c       	adc	r15, r1
    adbc:	0c 5f       	subi	r16, 0xFC	; 252
    adbe:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, &strMap[strHighscores]);
	for (u8 i = 0; i < 20; i += 4)
    adc0:	36 30       	cpi	r19, 0x06	; 6
    adc2:	09 f0       	breq	.+2      	; 0xadc6 <load_tank_rank+0x11c>
    adc4:	a7 cf       	rjmp	.-178    	; 0xad14 <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, &strMap[strReset]);
    adc6:	46 eb       	ldi	r20, 0xB6	; 182
    adc8:	51 e0       	ldi	r21, 0x01	; 1
    adca:	66 e1       	ldi	r22, 0x16	; 22
    adcc:	70 e0       	ldi	r23, 0x00	; 0
    adce:	83 e0       	ldi	r24, 0x03	; 3
    add0:	90 e0       	ldi	r25, 0x00	; 0
    add2:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(10, 24, &strMap[strCancelHandle]);
    add6:	4b ea       	ldi	r20, 0xAB	; 171
    add8:	51 e0       	ldi	r21, 0x01	; 1
    adda:	68 e1       	ldi	r22, 0x18	; 24
    addc:	70 e0       	ldi	r23, 0x00	; 0
    adde:	8a e0       	ldi	r24, 0x0A	; 10
    ade0:	90 e0       	ldi	r25, 0x00	; 0
}
    ade2:	0f 90       	pop	r0
    ade4:	df 91       	pop	r29
    ade6:	cf 91       	pop	r28
    ade8:	1f 91       	pop	r17
    adea:	0f 91       	pop	r16
    adec:	ff 90       	pop	r15
    adee:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, &strMap[strReset]);
	Print(10, 24, &strMap[strCancelHandle]);
    adf0:	0c 94 6a 47 	jmp	0x8ed4	; 0x8ed4 <Print>

0000adf4 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    adf4:	0e 94 2c 4b 	call	0x9658	; 0x9658 <save_score>
	fade_through();
    adf8:	0e 94 15 4b 	call	0x962a	; 0x962a <fade_through>
	SetSpriteVisibility(true);
    adfc:	81 e0       	ldi	r24, 0x01	; 1
    adfe:	0e 94 91 45 	call	0x8b22	; 0x8b22 <SetSpriteVisibility>
	init_game_state();
    ae02:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <init_game_state>
	load_tank_rank();
    ae06:	0c 94 55 56 	jmp	0xacaa	; 0xacaa <load_tank_rank>

0000ae0a <update_level_helper>:
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    ae0a:	6f 92       	push	r6
    ae0c:	7f 92       	push	r7
    ae0e:	8f 92       	push	r8
    ae10:	9f 92       	push	r9
    ae12:	af 92       	push	r10
    ae14:	bf 92       	push	r11
    ae16:	df 92       	push	r13
    ae18:	ef 92       	push	r14
    ae1a:	ff 92       	push	r15
    ae1c:	0f 93       	push	r16
    ae1e:	1f 93       	push	r17
    ae20:	cf 93       	push	r28
    ae22:	df 93       	push	r29
    ae24:	1f 92       	push	r1
    ae26:	cd b7       	in	r28, 0x3d	; 61
    ae28:	de b7       	in	r29, 0x3e	; 62
    ae2a:	7c 01       	movw	r14, r24
    ae2c:	3b 01       	movw	r6, r22
    ae2e:	8a 01       	movw	r16, r20
	Shot* shot;
	u8 next_level;
	Player* tmp;

	player->shared.recoiled = 0;
    ae30:	fb 01       	movw	r30, r22
    ae32:	12 82       	std	Z+2, r1	; 0x02
	if ((p->pressed & BTN_START))
    ae34:	fc 01       	movw	r30, r24
    ae36:	80 81       	ld	r24, Z
    ae38:	83 ff       	sbrs	r24, 3
    ae3a:	0f c0       	rjmp	.+30     	; 0xae5a <update_level_helper+0x50>
	{
		SFX_NAVIGATE;
    ae3c:	2f ef       	ldi	r18, 0xFF	; 255
    ae3e:	47 e1       	ldi	r20, 0x17	; 23
    ae40:	67 e0       	ldi	r22, 0x07	; 7
    ae42:	84 e0       	ldi	r24, 0x04	; 4
    ae44:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
		game.paused = game.paused ^ 1;
    ae48:	90 91 0e 0c 	lds	r25, 0x0C0E
    ae4c:	81 e0       	ldi	r24, 0x01	; 1
    ae4e:	89 27       	eor	r24, r25
    ae50:	80 93 0e 0c 	sts	0x0C0E, r24
		load_level_tiles(false);
    ae54:	80 e0       	ldi	r24, 0x00	; 0
    ae56:	0e 94 da 54 	call	0xa9b4	; 0xa9b4 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    ae5a:	20 91 0e 0c 	lds	r18, 0x0C0E
    ae5e:	f7 01       	movw	r30, r14
    ae60:	80 81       	ld	r24, Z
    ae62:	91 81       	ldd	r25, Z+1	; 0x01
    ae64:	21 11       	cpse	r18, r1
    ae66:	72 c1       	rjmp	.+740    	; 0xb14c <update_level_helper+0x342>
    ae68:	f3 01       	movw	r30, r6
    ae6a:	24 89       	ldd	r18, Z+20	; 0x14
    ae6c:	20 fd       	sbrc	r18, 0
    ae6e:	6e c1       	rjmp	.+732    	; 0xb14c <update_level_helper+0x342>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    ae70:	93 ff       	sbrs	r25, 3
    ae72:	12 c0       	rjmp	.+36     	; 0xae98 <update_level_helper+0x8e>
    ae74:	85 89       	ldd	r24, Z+21	; 0x15
    ae76:	8a 35       	cpi	r24, 0x5A	; 90
    ae78:	79 f4       	brne	.+30     	; 0xae98 <update_level_helper+0x8e>
		{
			player->banter_frame = 0;
    ae7a:	15 8a       	std	Z+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    ae7c:	69 e0       	ldi	r22, 0x09	; 9
    ae7e:	70 e0       	ldi	r23, 0x00	; 0
    ae80:	80 e0       	ldi	r24, 0x00	; 0
    ae82:	90 e0       	ldi	r25, 0x00	; 0
    ae84:	0e 94 99 49 	call	0x9332	; 0x9332 <LBRandom>
    ae88:	f3 01       	movw	r30, r6
    ae8a:	86 8b       	std	Z+22, r24	; 0x16
			SFX_BANTER;
    ae8c:	2f e5       	ldi	r18, 0x5F	; 95
    ae8e:	4e e1       	ldi	r20, 0x1E	; 30
    ae90:	60 e0       	ldi	r22, 0x00	; 0
    ae92:	84 e0       	ldi	r24, 0x04	; 4
    ae94:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    ae98:	f3 01       	movw	r30, r6
    ae9a:	60 8d       	ldd	r22, Z+24	; 0x18
    ae9c:	61 83       	std	Z+1, r22	; 0x01
		if ((p->held & BTN_UP))
    ae9e:	f7 01       	movw	r30, r14
    aea0:	84 81       	ldd	r24, Z+4	; 0x04
    aea2:	84 ff       	sbrs	r24, 4
    aea4:	17 c0       	rjmp	.+46     	; 0xaed4 <update_level_helper+0xca>
		{
			player->shared.direction = D_UP;
    aea6:	f3 01       	movw	r30, r6
    aea8:	10 82       	st	Z, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    aeaa:	70 e0       	ldi	r23, 0x00	; 0
    aeac:	80 e0       	ldi	r24, 0x00	; 0
    aeae:	90 e0       	ldi	r25, 0x00	; 0
    aeb0:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    aeb4:	25 e6       	ldi	r18, 0x65	; 101
    aeb6:	38 e8       	ldi	r19, 0x88	; 136
    aeb8:	48 e8       	ldi	r20, 0x88	; 136
    aeba:	5c e3       	ldi	r21, 0x3C	; 60
    aebc:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    aec0:	9b 01       	movw	r18, r22
    aec2:	ac 01       	movw	r20, r24
    aec4:	f3 01       	movw	r30, r6
    aec6:	67 81       	ldd	r22, Z+7	; 0x07
    aec8:	70 85       	ldd	r23, Z+8	; 0x08
    aeca:	81 85       	ldd	r24, Z+9	; 0x09
    aecc:	92 85       	ldd	r25, Z+10	; 0x0a
    aece:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    aed2:	33 c0       	rjmp	.+102    	; 0xaf3a <update_level_helper+0x130>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_RIGHT))
    aed4:	87 ff       	sbrs	r24, 7
    aed6:	18 c0       	rjmp	.+48     	; 0xaf08 <update_level_helper+0xfe>
		{
			player->shared.direction = D_RIGHT;
    aed8:	81 e0       	ldi	r24, 0x01	; 1
    aeda:	f3 01       	movw	r30, r6
    aedc:	80 83       	st	Z, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    aede:	70 e0       	ldi	r23, 0x00	; 0
    aee0:	80 e0       	ldi	r24, 0x00	; 0
    aee2:	90 e0       	ldi	r25, 0x00	; 0
    aee4:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    aee8:	25 e6       	ldi	r18, 0x65	; 101
    aeea:	38 e8       	ldi	r19, 0x88	; 136
    aeec:	48 e8       	ldi	r20, 0x88	; 136
    aeee:	5c e3       	ldi	r21, 0x3C	; 60
    aef0:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    aef4:	9b 01       	movw	r18, r22
    aef6:	ac 01       	movw	r20, r24
    aef8:	f3 01       	movw	r30, r6
    aefa:	63 81       	ldd	r22, Z+3	; 0x03
    aefc:	74 81       	ldd	r23, Z+4	; 0x04
    aefe:	85 81       	ldd	r24, Z+5	; 0x05
    af00:	96 81       	ldd	r25, Z+6	; 0x06
    af02:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    af06:	38 c0       	rjmp	.+112    	; 0xaf78 <update_level_helper+0x16e>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_DOWN))
    af08:	85 ff       	sbrs	r24, 5
    af0a:	1d c0       	rjmp	.+58     	; 0xaf46 <update_level_helper+0x13c>
		{
			player->shared.direction = D_DOWN;
    af0c:	82 e0       	ldi	r24, 0x02	; 2
    af0e:	f3 01       	movw	r30, r6
    af10:	80 83       	st	Z, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    af12:	70 e0       	ldi	r23, 0x00	; 0
    af14:	80 e0       	ldi	r24, 0x00	; 0
    af16:	90 e0       	ldi	r25, 0x00	; 0
    af18:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    af1c:	25 e6       	ldi	r18, 0x65	; 101
    af1e:	38 e8       	ldi	r19, 0x88	; 136
    af20:	48 e8       	ldi	r20, 0x88	; 136
    af22:	5c e3       	ldi	r21, 0x3C	; 60
    af24:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    af28:	9b 01       	movw	r18, r22
    af2a:	ac 01       	movw	r20, r24
    af2c:	f3 01       	movw	r30, r6
    af2e:	67 81       	ldd	r22, Z+7	; 0x07
    af30:	70 85       	ldd	r23, Z+8	; 0x08
    af32:	81 85       	ldd	r24, Z+9	; 0x09
    af34:	92 85       	ldd	r25, Z+10	; 0x0a
    af36:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    af3a:	f3 01       	movw	r30, r6
    af3c:	67 83       	std	Z+7, r22	; 0x07
    af3e:	70 87       	std	Z+8, r23	; 0x08
    af40:	81 87       	std	Z+9, r24	; 0x09
    af42:	92 87       	std	Z+10, r25	; 0x0a
    af44:	21 c0       	rjmp	.+66     	; 0xaf88 <update_level_helper+0x17e>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_LEFT))
    af46:	86 ff       	sbrs	r24, 6
    af48:	1d c0       	rjmp	.+58     	; 0xaf84 <update_level_helper+0x17a>
		{
			player->shared.direction = D_LEFT;
    af4a:	83 e0       	ldi	r24, 0x03	; 3
    af4c:	f3 01       	movw	r30, r6
    af4e:	80 83       	st	Z, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    af50:	70 e0       	ldi	r23, 0x00	; 0
    af52:	80 e0       	ldi	r24, 0x00	; 0
    af54:	90 e0       	ldi	r25, 0x00	; 0
    af56:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    af5a:	25 e6       	ldi	r18, 0x65	; 101
    af5c:	38 e8       	ldi	r19, 0x88	; 136
    af5e:	48 e8       	ldi	r20, 0x88	; 136
    af60:	5c e3       	ldi	r21, 0x3C	; 60
    af62:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    af66:	9b 01       	movw	r18, r22
    af68:	ac 01       	movw	r20, r24
    af6a:	f3 01       	movw	r30, r6
    af6c:	63 81       	ldd	r22, Z+3	; 0x03
    af6e:	74 81       	ldd	r23, Z+4	; 0x04
    af70:	85 81       	ldd	r24, Z+5	; 0x05
    af72:	96 81       	ldd	r25, Z+6	; 0x06
    af74:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    af78:	f3 01       	movw	r30, r6
    af7a:	63 83       	std	Z+3, r22	; 0x03
    af7c:	74 83       	std	Z+4, r23	; 0x04
    af7e:	85 83       	std	Z+5, r24	; 0x05
    af80:	96 83       	std	Z+6, r25	; 0x06
    af82:	02 c0       	rjmp	.+4      	; 0xaf88 <update_level_helper+0x17e>
			//SFX_TRACKS;
		}
		else
		{
			player->shared.speed = 0;
    af84:	f3 01       	movw	r30, r6
    af86:	11 82       	std	Z+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    af88:	f7 01       	movw	r30, r14
    af8a:	80 81       	ld	r24, Z
    af8c:	91 81       	ldd	r25, Z+1	; 0x01
    af8e:	93 01       	movw	r18, r6
    af90:	28 5d       	subi	r18, 0xD8	; 216
    af92:	3f 4f       	sbci	r19, 0xFF	; 255
    af94:	79 01       	movw	r14, r18
    af96:	90 ff       	sbrs	r25, 0
    af98:	36 c0       	rjmp	.+108    	; 0xb006 <update_level_helper+0x1fc>
    af9a:	f3 01       	movw	r30, r6
    af9c:	81 89       	ldd	r24, Z+17	; 0x11
    af9e:	81 11       	cpse	r24, r1
    afa0:	32 c0       	rjmp	.+100    	; 0xb006 <update_level_helper+0x1fc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    afa2:	86 a9       	ldd	r24, Z+54	; 0x36
    afa4:	81 11       	cpse	r24, r1
    afa6:	2f c0       	rjmp	.+94     	; 0xb006 <update_level_helper+0x1fc>
				{
					if (player->has_rocket)
    afa8:	81 8d       	ldd	r24, Z+25	; 0x19
    afaa:	88 23       	and	r24, r24
    afac:	61 f0       	breq	.+24     	; 0xafc6 <update_level_helper+0x1bc>
					{
						init_shot_state(shot, ROCKET_SHOT);
    afae:	61 e0       	ldi	r22, 0x01	; 1
    afb0:	c9 01       	movw	r24, r18
    afb2:	0e 94 18 4a 	call	0x9430	; 0x9430 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    afb6:	61 e0       	ldi	r22, 0x01	; 1
    afb8:	c7 01       	movw	r24, r14
    afba:	0e 94 35 4a 	call	0x946a	; 0x946a <set_shot_animations>
						SFX_ROCKET;
    afbe:	2f ef       	ldi	r18, 0xFF	; 255
    afc0:	47 e1       	ldi	r20, 0x17	; 23
    afc2:	68 e0       	ldi	r22, 0x08	; 8
    afc4:	0b c0       	rjmp	.+22     	; 0xafdc <update_level_helper+0x1d2>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    afc6:	60 e0       	ldi	r22, 0x00	; 0
    afc8:	c9 01       	movw	r24, r18
    afca:	0e 94 18 4a 	call	0x9430	; 0x9430 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    afce:	60 e0       	ldi	r22, 0x00	; 0
    afd0:	c7 01       	movw	r24, r14
    afd2:	0e 94 35 4a 	call	0x946a	; 0x946a <set_shot_animations>
						SFX_CANNONBALL;
    afd6:	2f ef       	ldi	r18, 0xFF	; 255
    afd8:	47 e1       	ldi	r20, 0x17	; 23
    afda:	62 e0       	ldi	r22, 0x02	; 2
    afdc:	84 e0       	ldi	r24, 0x04	; 4
    afde:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
					}
					player->active_shots++;
    afe2:	f3 01       	movw	r30, r6
    afe4:	81 89       	ldd	r24, Z+17	; 0x11
    afe6:	8f 5f       	subi	r24, 0xFF	; 255
    afe8:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    afea:	80 81       	ld	r24, Z
    afec:	80 a7       	std	Z+40, r24	; 0x28
					position_shot(player, shot);
    afee:	b7 01       	movw	r22, r14
    aff0:	c3 01       	movw	r24, r6
    aff2:	0e 94 95 4b 	call	0x972a	; 0x972a <position_shot>
					shot->active = 1;
    aff6:	81 e0       	ldi	r24, 0x01	; 1
    aff8:	f3 01       	movw	r30, r6
    affa:	86 ab       	std	Z+54, r24	; 0x36
					if (player->has_over_speed)
    affc:	82 8d       	ldd	r24, Z+26	; 0x1a
    affe:	88 23       	and	r24, r24
    b000:	11 f0       	breq	.+4      	; 0xb006 <update_level_helper+0x1fc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    b002:	8a ea       	ldi	r24, 0xAA	; 170
    b004:	81 a7       	std	Z+41, r24	; 0x29

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    b006:	f3 01       	movw	r30, r6
    b008:	86 a9       	ldd	r24, Z+54	; 0x36
    b00a:	88 23       	and	r24, r24
    b00c:	09 f4       	brne	.+2      	; 0xb010 <update_level_helper+0x206>
    b00e:	a8 c0       	rjmp	.+336    	; 0xb160 <update_level_helper+0x356>
			{
				switch (shot->shared.direction)
    b010:	80 a5       	ldd	r24, Z+40	; 0x28
    b012:	81 30       	cpi	r24, 0x01	; 1
    b014:	a9 f1       	breq	.+106    	; 0xb080 <update_level_helper+0x276>
    b016:	e8 f0       	brcs	.+58     	; 0xb052 <update_level_helper+0x248>
    b018:	82 30       	cpi	r24, 0x02	; 2
    b01a:	09 f4       	brne	.+2      	; 0xb01e <update_level_helper+0x214>
    b01c:	48 c0       	rjmp	.+144    	; 0xb0ae <update_level_helper+0x2a4>
    b01e:	83 30       	cpi	r24, 0x03	; 3
    b020:	09 f0       	breq	.+2      	; 0xb024 <update_level_helper+0x21a>
    b022:	66 c0       	rjmp	.+204    	; 0xb0f0 <update_level_helper+0x2e6>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    b024:	f3 01       	movw	r30, r6
    b026:	61 a5       	ldd	r22, Z+41	; 0x29
    b028:	70 e0       	ldi	r23, 0x00	; 0
    b02a:	80 e0       	ldi	r24, 0x00	; 0
    b02c:	90 e0       	ldi	r25, 0x00	; 0
    b02e:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    b032:	25 e6       	ldi	r18, 0x65	; 101
    b034:	38 e8       	ldi	r19, 0x88	; 136
    b036:	48 e8       	ldi	r20, 0x88	; 136
    b038:	5c e3       	ldi	r21, 0x3C	; 60
    b03a:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    b03e:	9b 01       	movw	r18, r22
    b040:	ac 01       	movw	r20, r24
    b042:	f3 01       	movw	r30, r6
    b044:	63 a5       	ldd	r22, Z+43	; 0x2b
    b046:	74 a5       	ldd	r23, Z+44	; 0x2c
    b048:	85 a5       	ldd	r24, Z+45	; 0x2d
    b04a:	96 a5       	ldd	r25, Z+46	; 0x2e
    b04c:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    b050:	4a c0       	rjmp	.+148    	; 0xb0e6 <update_level_helper+0x2dc>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    b052:	f3 01       	movw	r30, r6
    b054:	61 a5       	ldd	r22, Z+41	; 0x29
    b056:	70 e0       	ldi	r23, 0x00	; 0
    b058:	80 e0       	ldi	r24, 0x00	; 0
    b05a:	90 e0       	ldi	r25, 0x00	; 0
    b05c:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    b060:	25 e6       	ldi	r18, 0x65	; 101
    b062:	38 e8       	ldi	r19, 0x88	; 136
    b064:	48 e8       	ldi	r20, 0x88	; 136
    b066:	5c e3       	ldi	r21, 0x3C	; 60
    b068:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    b06c:	9b 01       	movw	r18, r22
    b06e:	ac 01       	movw	r20, r24
    b070:	f3 01       	movw	r30, r6
    b072:	67 a5       	ldd	r22, Z+47	; 0x2f
    b074:	70 a9       	ldd	r23, Z+48	; 0x30
    b076:	81 a9       	ldd	r24, Z+49	; 0x31
    b078:	92 a9       	ldd	r25, Z+50	; 0x32
    b07a:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    b07e:	2d c0       	rjmp	.+90     	; 0xb0da <update_level_helper+0x2d0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    b080:	f3 01       	movw	r30, r6
    b082:	61 a5       	ldd	r22, Z+41	; 0x29
    b084:	70 e0       	ldi	r23, 0x00	; 0
    b086:	80 e0       	ldi	r24, 0x00	; 0
    b088:	90 e0       	ldi	r25, 0x00	; 0
    b08a:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    b08e:	25 e6       	ldi	r18, 0x65	; 101
    b090:	38 e8       	ldi	r19, 0x88	; 136
    b092:	48 e8       	ldi	r20, 0x88	; 136
    b094:	5c e3       	ldi	r21, 0x3C	; 60
    b096:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    b09a:	9b 01       	movw	r18, r22
    b09c:	ac 01       	movw	r20, r24
    b09e:	f3 01       	movw	r30, r6
    b0a0:	63 a5       	ldd	r22, Z+43	; 0x2b
    b0a2:	74 a5       	ldd	r23, Z+44	; 0x2c
    b0a4:	85 a5       	ldd	r24, Z+45	; 0x2d
    b0a6:	96 a5       	ldd	r25, Z+46	; 0x2e
    b0a8:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    b0ac:	1c c0       	rjmp	.+56     	; 0xb0e6 <update_level_helper+0x2dc>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    b0ae:	f3 01       	movw	r30, r6
    b0b0:	61 a5       	ldd	r22, Z+41	; 0x29
    b0b2:	70 e0       	ldi	r23, 0x00	; 0
    b0b4:	80 e0       	ldi	r24, 0x00	; 0
    b0b6:	90 e0       	ldi	r25, 0x00	; 0
    b0b8:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    b0bc:	25 e6       	ldi	r18, 0x65	; 101
    b0be:	38 e8       	ldi	r19, 0x88	; 136
    b0c0:	48 e8       	ldi	r20, 0x88	; 136
    b0c2:	5c e3       	ldi	r21, 0x3C	; 60
    b0c4:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    b0c8:	9b 01       	movw	r18, r22
    b0ca:	ac 01       	movw	r20, r24
    b0cc:	f3 01       	movw	r30, r6
    b0ce:	67 a5       	ldd	r22, Z+47	; 0x2f
    b0d0:	70 a9       	ldd	r23, Z+48	; 0x30
    b0d2:	81 a9       	ldd	r24, Z+49	; 0x31
    b0d4:	92 a9       	ldd	r25, Z+50	; 0x32
    b0d6:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    b0da:	f3 01       	movw	r30, r6
    b0dc:	67 a7       	std	Z+47, r22	; 0x2f
    b0de:	70 ab       	std	Z+48, r23	; 0x30
    b0e0:	81 ab       	std	Z+49, r24	; 0x31
    b0e2:	92 ab       	std	Z+50, r25	; 0x32
    b0e4:	05 c0       	rjmp	.+10     	; 0xb0f0 <update_level_helper+0x2e6>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    b0e6:	f3 01       	movw	r30, r6
    b0e8:	63 a7       	std	Z+43, r22	; 0x2b
    b0ea:	74 a7       	std	Z+44, r23	; 0x2c
    b0ec:	85 a7       	std	Z+45, r24	; 0x2d
    b0ee:	96 a7       	std	Z+46, r25	; 0x2e
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    b0f0:	f3 01       	movw	r30, r6
    b0f2:	d7 a8       	ldd	r13, Z+55	; 0x37
    b0f4:	6d 2d       	mov	r22, r13
    b0f6:	70 e0       	ldi	r23, 0x00	; 0
    b0f8:	80 e0       	ldi	r24, 0x00	; 0
    b0fa:	90 e0       	ldi	r25, 0x00	; 0
    b0fc:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    b100:	4b 01       	movw	r8, r22
    b102:	5c 01       	movw	r10, r24
    b104:	f8 e0       	ldi	r31, 0x08	; 8
    b106:	fd 15       	cp	r31, r13
    b108:	88 f0       	brcs	.+34     	; 0xb12c <update_level_helper+0x322>
    b10a:	f3 01       	movw	r30, r6
    b10c:	81 a5       	ldd	r24, Z+41	; 0x29
    b10e:	68 2f       	mov	r22, r24
    b110:	70 e0       	ldi	r23, 0x00	; 0
    b112:	80 e0       	ldi	r24, 0x00	; 0
    b114:	90 e0       	ldi	r25, 0x00	; 0
    b116:	0e 94 af 61 	call	0xc35e	; 0xc35e <__floatsisf>
    b11a:	25 e6       	ldi	r18, 0x65	; 101
    b11c:	38 e8       	ldi	r19, 0x88	; 136
    b11e:	48 e8       	ldi	r20, 0x88	; 136
    b120:	5c e3       	ldi	r21, 0x3C	; 60
    b122:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    b126:	9b 01       	movw	r18, r22
    b128:	ac 01       	movw	r20, r24
    b12a:	03 c0       	rjmp	.+6      	; 0xb132 <update_level_helper+0x328>
    b12c:	20 e0       	ldi	r18, 0x00	; 0
    b12e:	30 e0       	ldi	r19, 0x00	; 0
    b130:	a9 01       	movw	r20, r18
    b132:	c5 01       	movw	r24, r10
    b134:	b4 01       	movw	r22, r8
    b136:	0e 94 ac 60 	call	0xc158	; 0xc158 <__addsf3>
    b13a:	0e 94 81 61 	call	0xc302	; 0xc302 <__fixunssfsi>
    b13e:	f3 01       	movw	r30, r6
    b140:	67 ab       	std	Z+55, r22	; 0x37
				collision_detect_shot(player, shot);
    b142:	b7 01       	movw	r22, r14
    b144:	c3 01       	movw	r24, r6
    b146:	0e 94 6f 51 	call	0xa2de	; 0xa2de <collision_detect_shot>
    b14a:	0a c0       	rjmp	.+20     	; 0xb160 <update_level_helper+0x356>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    b14c:	91 ff       	sbrs	r25, 1
    b14e:	08 c0       	rjmp	.+16     	; 0xb160 <update_level_helper+0x356>
		{
			SFX_NAVIGATE;
    b150:	2f ef       	ldi	r18, 0xFF	; 255
    b152:	47 e1       	ldi	r20, 0x17	; 23
    b154:	67 e0       	ldi	r22, 0x07	; 7
    b156:	84 e0       	ldi	r24, 0x04	; 4
    b158:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
			exit_game();
    b15c:	0e 94 fa 56 	call	0xadf4	; 0xadf4 <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    b160:	f3 01       	movw	r30, r6
    b162:	80 89       	ldd	r24, Z+16	; 0x10
    b164:	8a 30       	cpi	r24, 0x0A	; 10
    b166:	08 f4       	brcc	.+2      	; 0xb16a <update_level_helper+0x360>
    b168:	5c c0       	rjmp	.+184    	; 0xb222 <update_level_helper+0x418>
    b16a:	f8 01       	movw	r30, r16
    b16c:	84 89       	ldd	r24, Z+20	; 0x14
    b16e:	80 fd       	sbrc	r24, 0
    b170:	58 c0       	rjmp	.+176    	; 0xb222 <update_level_helper+0x418>
	{
	    next_level = game.current_level + 1;
    b172:	30 91 0d 0c 	lds	r19, 0x0C0D
    b176:	3f 5f       	subi	r19, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    b178:	3a 30       	cpi	r19, 0x0A	; 10
    b17a:	30 f0       	brcs	.+12     	; 0xb188 <update_level_helper+0x37e>
    b17c:	97 85       	ldd	r25, Z+15	; 0x0f
    b17e:	f3 01       	movw	r30, r6
    b180:	87 85       	ldd	r24, Z+15	; 0x0f
    b182:	98 17       	cp	r25, r24
    b184:	09 f4       	brne	.+2      	; 0xb188 <update_level_helper+0x37e>
    b186:	4d c0       	rjmp	.+154    	; 0xb222 <update_level_helper+0x418>

		load_level_tiles(true);
    b188:	81 e0       	ldi	r24, 0x01	; 1
    b18a:	39 83       	std	Y+1, r19	; 0x01
    b18c:	0e 94 da 54 	call	0xa9b4	; 0xa9b4 <load_level_tiles>
		SetSpriteVisibility(false);
    b190:	80 e0       	ldi	r24, 0x00	; 0
    b192:	0e 94 91 45 	call	0x8b22	; 0x8b22 <SetSpriteVisibility>
		print_level_score(player, other_player);
    b196:	b8 01       	movw	r22, r16
    b198:	c3 01       	movw	r24, r6
    b19a:	0e 94 02 4c 	call	0x9804	; 0x9804 <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    b19e:	82 e0       	ldi	r24, 0x02	; 2
    b1a0:	0e 94 ce 49 	call	0x939c	; 0x939c <LBWaitSeconds>
		player->level_score = 0;
    b1a4:	f3 01       	movw	r30, r6
    b1a6:	10 8a       	std	Z+16, r1	; 0x10
		other_player->level_score = 0;
    b1a8:	f8 01       	movw	r30, r16
    b1aa:	10 8a       	std	Z+16, r1	; 0x10
		SFX_LEVEL_CLEAR;
    b1ac:	2f ef       	ldi	r18, 0xFF	; 255
    b1ae:	47 e1       	ldi	r20, 0x17	; 23
    b1b0:	64 e0       	ldi	r22, 0x04	; 4
    b1b2:	84 e0       	ldi	r24, 0x04	; 4
    b1b4:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    b1b8:	39 81       	ldd	r19, Y+1	; 0x01
    b1ba:	3a 30       	cpi	r19, 0x0A	; 10
    b1bc:	08 f1       	brcs	.+66     	; 0xb200 <update_level_helper+0x3f6>
		{
		    if (other_player->score > player->score)
    b1be:	f8 01       	movw	r30, r16
    b1c0:	97 85       	ldd	r25, Z+15	; 0x0f
    b1c2:	f3 01       	movw	r30, r6
    b1c4:	87 85       	ldd	r24, Z+15	; 0x0f
    b1c6:	89 17       	cp	r24, r25
    b1c8:	20 f4       	brcc	.+8      	; 0xb1d2 <update_level_helper+0x3c8>
    b1ca:	87 2d       	mov	r24, r7
		    {
		        tmp = player;
		        player = other_player;
    b1cc:	38 01       	movw	r6, r16
		        other_player = tmp;
    b1ce:	0e 2f       	mov	r16, r30
    b1d0:	18 2f       	mov	r17, r24
		    }
		    print_final_score(player, other_player);
    b1d2:	b8 01       	movw	r22, r16
    b1d4:	c3 01       	movw	r24, r6
    b1d6:	0e 94 44 4c 	call	0x9888	; 0x9888 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    b1da:	82 e0       	ldi	r24, 0x02	; 2
    b1dc:	0e 94 ce 49 	call	0x939c	; 0x939c <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    b1e0:	0f 90       	pop	r0
    b1e2:	df 91       	pop	r29
    b1e4:	cf 91       	pop	r28
    b1e6:	1f 91       	pop	r17
    b1e8:	0f 91       	pop	r16
    b1ea:	ff 90       	pop	r15
    b1ec:	ef 90       	pop	r14
    b1ee:	df 90       	pop	r13
    b1f0:	bf 90       	pop	r11
    b1f2:	af 90       	pop	r10
    b1f4:	9f 90       	pop	r9
    b1f6:	8f 90       	pop	r8
    b1f8:	7f 90       	pop	r7
    b1fa:	6f 90       	pop	r6
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    b1fc:	0c 94 fa 56 	jmp	0xadf4	; 0xadf4 <exit_game>
		}
		else
		{
			level_transition(next_level);
    b200:	83 2f       	mov	r24, r19
		}
	}
}
    b202:	0f 90       	pop	r0
    b204:	df 91       	pop	r29
    b206:	cf 91       	pop	r28
    b208:	1f 91       	pop	r17
    b20a:	0f 91       	pop	r16
    b20c:	ff 90       	pop	r15
    b20e:	ef 90       	pop	r14
    b210:	df 90       	pop	r13
    b212:	bf 90       	pop	r11
    b214:	af 90       	pop	r10
    b216:	9f 90       	pop	r9
    b218:	8f 90       	pop	r8
    b21a:	7f 90       	pop	r7
    b21c:	6f 90       	pop	r6
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    b21e:	0c 94 ef 55 	jmp	0xabde	; 0xabde <level_transition>
		}
	}
}
    b222:	0f 90       	pop	r0
    b224:	df 91       	pop	r29
    b226:	cf 91       	pop	r28
    b228:	1f 91       	pop	r17
    b22a:	0f 91       	pop	r16
    b22c:	ff 90       	pop	r15
    b22e:	ef 90       	pop	r14
    b230:	df 90       	pop	r13
    b232:	bf 90       	pop	r11
    b234:	af 90       	pop	r10
    b236:	9f 90       	pop	r9
    b238:	8f 90       	pop	r8
    b23a:	7f 90       	pop	r7
    b23c:	6f 90       	pop	r6
    b23e:	08 95       	ret

0000b240 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    b240:	cf 92       	push	r12
    b242:	df 92       	push	r13
    b244:	ef 92       	push	r14
    b246:	ff 92       	push	r15
    b248:	1f 93       	push	r17
    b24a:	cf 93       	push	r28
    b24c:	df 93       	push	r29
    b24e:	6c 01       	movw	r12, r24
    b250:	7b 01       	movw	r14, r22
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	// Render
	if (game.paused)
    b252:	80 91 0e 0c 	lds	r24, 0x0C0E
    b256:	88 23       	and	r24, r24
    b258:	d1 f0       	breq	.+52     	; 0xb28e <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    b25a:	80 e0       	ldi	r24, 0x00	; 0
    b25c:	0e 94 91 45 	call	0x8b22	; 0x8b22 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    b260:	46 e9       	ldi	r20, 0x96	; 150
    b262:	54 e2       	ldi	r21, 0x24	; 36
    b264:	6c e0       	ldi	r22, 0x0C	; 12
    b266:	88 e0       	ldi	r24, 0x08	; 8
    b268:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <DrawMap2>
		Print(12, 13, &strMap[strPaused]);
    b26c:	4e ea       	ldi	r20, 0xAE	; 174
    b26e:	52 e0       	ldi	r21, 0x02	; 2
    b270:	6d e0       	ldi	r22, 0x0D	; 13
    b272:	70 e0       	ldi	r23, 0x00	; 0
    b274:	8c e0       	ldi	r24, 0x0C	; 12
    b276:	90 e0       	ldi	r25, 0x00	; 0
    b278:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
		Print(11, 14, &strMap[strExit]);
    b27c:	45 ea       	ldi	r20, 0xA5	; 165
    b27e:	52 e0       	ldi	r21, 0x02	; 2
    b280:	6e e0       	ldi	r22, 0x0E	; 14
    b282:	70 e0       	ldi	r23, 0x00	; 0
    b284:	8b e0       	ldi	r24, 0x0B	; 11
    b286:	90 e0       	ldi	r25, 0x00	; 0
    b288:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
    b28c:	44 c0       	rjmp	.+136    	; 0xb316 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    b28e:	81 e0       	ldi	r24, 0x01	; 1
    b290:	0e 94 91 45 	call	0x8b22	; 0x8b22 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    b294:	60 e0       	ldi	r22, 0x00	; 0
    b296:	89 e2       	ldi	r24, 0x29	; 41
    b298:	9c e0       	ldi	r25, 0x0C	; 12
    b29a:	0e 94 89 4d 	call	0x9b12	; 0x9b12 <tank_map>
    b29e:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    b2a0:	68 2f       	mov	r22, r24
    b2a2:	89 e8       	ldi	r24, 0x89	; 137
    b2a4:	9f e0       	ldi	r25, 0x0F	; 15
    b2a6:	0e 94 89 4d 	call	0x9b12	; 0x9b12 <tank_map>
    b2aa:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    b2ac:	68 2f       	mov	r22, r24
    b2ae:	89 e2       	ldi	r24, 0x29	; 41
    b2b0:	9c e0       	ldi	r25, 0x0C	; 12
    b2b2:	0e 94 0b 4e 	call	0x9c16	; 0x9c16 <shot_map>
    b2b6:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    b2b8:	68 2f       	mov	r22, r24
    b2ba:	89 e8       	ldi	r24, 0x89	; 137
    b2bc:	9f e0       	ldi	r25, 0x0F	; 15
    b2be:	0e 94 0b 4e 	call	0x9c16	; 0x9c16 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    b2c2:	40 91 02 01 	lds	r20, 0x0102
    b2c6:	6f e0       	ldi	r22, 0x0F	; 15
    b2c8:	89 e2       	ldi	r24, 0x29	; 41
    b2ca:	9c e0       	ldi	r25, 0x0C	; 12
    b2cc:	0e 94 c7 4c 	call	0x998e	; 0x998e <render_banter>
    b2d0:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    b2d4:	40 91 01 01 	lds	r20, 0x0101
    b2d8:	60 e0       	ldi	r22, 0x00	; 0
    b2da:	89 e8       	ldi	r24, 0x89	; 137
    b2dc:	9f e0       	ldi	r25, 0x0F	; 15
    b2de:	0e 94 c7 4c 	call	0x998e	; 0x998e <render_banter>
    b2e2:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    b2e6:	60 e0       	ldi	r22, 0x00	; 0
    b2e8:	89 e2       	ldi	r24, 0x29	; 41
    b2ea:	9c e0       	ldi	r25, 0x0C	; 12
    b2ec:	0e 94 ef 4c 	call	0x99de	; 0x99de <render_player>
		render_player(&player2, p2_index);
    b2f0:	61 2f       	mov	r22, r17
    b2f2:	89 e8       	ldi	r24, 0x89	; 137
    b2f4:	9f e0       	ldi	r25, 0x0F	; 15
    b2f6:	0e 94 ef 4c 	call	0x99de	; 0x99de <render_player>
		render_shot(&player1, p1_shot_index);
    b2fa:	6d 2f       	mov	r22, r29
    b2fc:	89 e2       	ldi	r24, 0x29	; 41
    b2fe:	9c e0       	ldi	r25, 0x0C	; 12
    b300:	0e 94 18 4d 	call	0x9a30	; 0x9a30 <render_shot>
		render_shot(&player2, p2_shot_index);
    b304:	6c 2f       	mov	r22, r28
    b306:	89 e8       	ldi	r24, 0x89	; 137
    b308:	9f e0       	ldi	r25, 0x0F	; 15
    b30a:	0e 94 18 4d 	call	0x9a30	; 0x9a30 <render_shot>
		render_tile_explosions(&tile_animations);
    b30e:	80 e1       	ldi	r24, 0x10	; 16
    b310:	9c e0       	ldi	r25, 0x0C	; 12
    b312:	0e 94 44 4d 	call	0x9a88	; 0x9a88 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    b316:	2f e0       	ldi	r18, 0x0F	; 15
    b318:	49 e8       	ldi	r20, 0x89	; 137
    b31a:	5f e0       	ldi	r21, 0x0F	; 15
    b31c:	69 e2       	ldi	r22, 0x29	; 41
    b31e:	7c e0       	ldi	r23, 0x0C	; 12
    b320:	c6 01       	movw	r24, r12
    b322:	0e 94 05 57 	call	0xae0a	; 0xae0a <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    b326:	20 e0       	ldi	r18, 0x00	; 0
    b328:	49 e2       	ldi	r20, 0x29	; 41
    b32a:	5c e0       	ldi	r21, 0x0C	; 12
    b32c:	69 e8       	ldi	r22, 0x89	; 137
    b32e:	7f e0       	ldi	r23, 0x0F	; 15
    b330:	c7 01       	movw	r24, r14
    b332:	0e 94 05 57 	call	0xae0a	; 0xae0a <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    b336:	2f e0       	ldi	r18, 0x0F	; 15
    b338:	40 e0       	ldi	r20, 0x00	; 0
    b33a:	69 e8       	ldi	r22, 0x89	; 137
    b33c:	7f e0       	ldi	r23, 0x0F	; 15
    b33e:	89 e2       	ldi	r24, 0x29	; 41
    b340:	9c e0       	ldi	r25, 0x0C	; 12
    b342:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    b346:	20 e0       	ldi	r18, 0x00	; 0
    b348:	4f e0       	ldi	r20, 0x0F	; 15
    b34a:	69 e2       	ldi	r22, 0x29	; 41
    b34c:	7c e0       	ldi	r23, 0x0C	; 12
    b34e:	89 e8       	ldi	r24, 0x89	; 137
    b350:	9f e0       	ldi	r25, 0x0F	; 15
    b352:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <collision_detect_player>
	
	if (game.selection == CPUVCPU) 
    b356:	80 91 0f 0c 	lds	r24, 0x0C0F
    b35a:	83 30       	cpi	r24, 0x03	; 3
    b35c:	69 f4       	brne	.+26     	; 0xb378 <update_level+0x138>
	{
		demo_counter++;
    b35e:	80 91 36 0b 	lds	r24, 0x0B36
    b362:	90 91 37 0b 	lds	r25, 0x0B37
    b366:	01 96       	adiw	r24, 0x01	; 1
    b368:	90 93 37 0b 	sts	0x0B37, r25
    b36c:	80 93 36 0b 	sts	0x0B36, r24
		held = ReadJoypad(0);
    b370:	80 e0       	ldi	r24, 0x00	; 0
    b372:	0e 94 83 39 	call	0x7306	; 0x7306 <ReadJoypad>
    b376:	02 c0       	rjmp	.+4      	; 0xb37c <update_level+0x13c>
{
	char p1_index = 0;
	char p2_index = 0;
	char p1_shot_index = 0;
	char p2_shot_index = 0;
	u16 held = 0;
    b378:	80 e0       	ldi	r24, 0x00	; 0
    b37a:	90 e0       	ldi	r25, 0x00	; 0
	if (game.selection == CPUVCPU) 
	{
		demo_counter++;
		held = ReadJoypad(0);
	}
	if (game.selection == CPUVCPU &&
    b37c:	20 91 0f 0c 	lds	r18, 0x0C0F
    b380:	23 30       	cpi	r18, 0x03	; 3
    b382:	e1 f4       	brne	.+56     	; 0xb3bc <update_level+0x17c>
    b384:	8f 70       	andi	r24, 0x0F	; 15
    b386:	9e 70       	andi	r25, 0x0E	; 14
	    (((held & BTN_X) ||
		 (held & BTN_START) ||
		 (held & BTN_SL) ||
		 (held & BTN_SR) ||
		 (held & BTN_SELECT) ||
		 (held & BTN_Y) ||
    b388:	89 2b       	or	r24, r25
    b38a:	39 f4       	brne	.+14     	; 0xb39a <update_level+0x15a>
		 (held & BTN_B)) ||
    b38c:	80 91 36 0b 	lds	r24, 0x0B36
    b390:	90 91 37 0b 	lds	r25, 0x0B37
    b394:	88 30       	cpi	r24, 0x08	; 8
    b396:	97 40       	sbci	r25, 0x07	; 7
    b398:	88 f0       	brcs	.+34     	; 0xb3bc <update_level+0x17c>
		demo_counter >= DEMO_LENGTH)
		)
	{
		demo_counter = 0;
    b39a:	10 92 37 0b 	sts	0x0B37, r1
    b39e:	10 92 36 0b 	sts	0x0B36, r1
		fade_through();
    b3a2:	0e 94 15 4b 	call	0x962a	; 0x962a <fade_through>
		init_game_state();
    b3a6:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <init_game_state>
		load_splash();
	}
}
    b3aa:	df 91       	pop	r29
    b3ac:	cf 91       	pop	r28
    b3ae:	1f 91       	pop	r17
    b3b0:	ff 90       	pop	r15
    b3b2:	ef 90       	pop	r14
    b3b4:	df 90       	pop	r13
    b3b6:	cf 90       	pop	r12
		)
	{
		demo_counter = 0;
		fade_through();
		init_game_state();
		load_splash();
    b3b8:	0c 94 1f 56 	jmp	0xac3e	; 0xac3e <load_splash>
	}
}
    b3bc:	df 91       	pop	r29
    b3be:	cf 91       	pop	r28
    b3c0:	1f 91       	pop	r17
    b3c2:	ff 90       	pop	r15
    b3c4:	ef 90       	pop	r14
    b3c6:	df 90       	pop	r13
    b3c8:	cf 90       	pop	r12
    b3ca:	08 95       	ret

0000b3cc <update_tank_rank>:
	Print(3, 22, &strMap[strReset]);
	Print(10, 24, &strMap[strCancelHandle]);
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    b3cc:	cf 93       	push	r28
    b3ce:	df 93       	push	r29
    b3d0:	ec 01       	movw	r28, r24
	// Update
	if (p1->pressed & BTN_X)
    b3d2:	88 81       	ld	r24, Y
    b3d4:	99 81       	ldd	r25, Y+1	; 0x01
    b3d6:	91 ff       	sbrs	r25, 1
    b3d8:	0a c0       	rjmp	.+20     	; 0xb3ee <update_tank_rank+0x22>
	{
		SFX_NAVIGATE;
    b3da:	2f ef       	ldi	r18, 0xFF	; 255
    b3dc:	47 e1       	ldi	r20, 0x17	; 23
    b3de:	67 e0       	ldi	r22, 0x07	; 7
    b3e0:	84 e0       	ldi	r24, 0x04	; 4
    b3e2:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
		fade_through();
    b3e6:	0e 94 15 4b 	call	0x962a	; 0x962a <fade_through>
		load_splash();
    b3ea:	0e 94 1f 56 	call	0xac3e	; 0xac3e <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    b3ee:	8c 81       	ldd	r24, Y+4	; 0x04
    b3f0:	9d 81       	ldd	r25, Y+5	; 0x05
    b3f2:	92 ff       	sbrs	r25, 2
    b3f4:	1d c0       	rjmp	.+58     	; 0xb430 <update_tank_rank+0x64>
    b3f6:	8e 81       	ldd	r24, Y+6	; 0x06
    b3f8:	8f 3f       	cpi	r24, 0xFF	; 255
    b3fa:	d1 f4       	brne	.+52     	; 0xb430 <update_tank_rank+0x64>
	{
	    SFX_NAVIGATE;
    b3fc:	2f ef       	ldi	r18, 0xFF	; 255
    b3fe:	47 e1       	ldi	r20, 0x17	; 23
    b400:	67 e0       	ldi	r22, 0x07	; 7
    b402:	84 e0       	ldi	r24, 0x04	; 4
    b404:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
	    init_scores(&scores);
    b408:	85 ec       	ldi	r24, 0xC5	; 197
    b40a:	9b e0       	ldi	r25, 0x0B	; 11
    b40c:	0e 94 dd 49 	call	0x93ba	; 0x93ba <init_scores>
	    init_handles(&handles);
    b410:	8c ee       	ldi	r24, 0xEC	; 236
    b412:	9b e0       	ldi	r25, 0x0B	; 11
    b414:	0e 94 e9 49 	call	0x93d2	; 0x93d2 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b418:	85 ec       	ldi	r24, 0xC5	; 197
    b41a:	9b e0       	ldi	r25, 0x0B	; 11
    b41c:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <EepromWriteBlock>
    b420:	8c ee       	ldi	r24, 0xEC	; 236
    b422:	9b e0       	ldi	r25, 0x0B	; 11
    b424:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <EepromWriteBlock>
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
	}
}
    b428:	df 91       	pop	r29
    b42a:	cf 91       	pop	r28
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    b42c:	0c 94 55 56 	jmp	0xacaa	; 0xacaa <load_tank_rank>
	}
}
    b430:	df 91       	pop	r29
    b432:	cf 91       	pop	r28
    b434:	08 95       	ret

0000b436 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    b436:	0f 93       	push	r16
    b438:	1f 93       	push	r17
    b43a:	cf 93       	push	r28
    b43c:	df 93       	push	r29
    b43e:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    b440:	fb 01       	movw	r30, r22
    b442:	20 81       	ld	r18, Z
    b444:	31 81       	ldd	r19, Z+1	; 0x01
    b446:	f9 01       	movw	r30, r18
    b448:	e0 71       	andi	r30, 0x10	; 16
    b44a:	ff 27       	eor	r31, r31
    b44c:	24 ff       	sbrs	r18, 4
    b44e:	09 c0       	rjmp	.+18     	; 0xb462 <_handle_select_helper+0x2c>
    b450:	8d 81       	ldd	r24, Y+5	; 0x05
    b452:	81 11       	cpse	r24, r1
    b454:	06 c0       	rjmp	.+12     	; 0xb462 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    b456:	88 81       	ld	r24, Y
    b458:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    b45a:	87 ff       	sbrs	r24, 7
    b45c:	0f c0       	rjmp	.+30     	; 0xb47c <_handle_select_helper+0x46>
    b45e:	18 82       	st	Y, r1
    b460:	25 c0       	rjmp	.+74     	; 0xb4ac <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    b462:	b9 01       	movw	r22, r18
    b464:	60 72       	andi	r22, 0x20	; 32
    b466:	77 27       	eor	r23, r23
    b468:	25 ff       	sbrs	r18, 5
    b46a:	0a c0       	rjmp	.+20     	; 0xb480 <_handle_select_helper+0x4a>
    b46c:	8d 81       	ldd	r24, Y+5	; 0x05
    b46e:	81 11       	cpse	r24, r1
    b470:	07 c0       	rjmp	.+14     	; 0xb480 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    b472:	88 81       	ld	r24, Y
    b474:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    b476:	89 30       	cpi	r24, 0x09	; 9
    b478:	0c f0       	brlt	.+2      	; 0xb47c <_handle_select_helper+0x46>
    b47a:	88 e0       	ldi	r24, 0x08	; 8
    b47c:	88 83       	st	Y, r24
    b47e:	16 c0       	rjmp	.+44     	; 0xb4ac <_handle_select_helper+0x76>
    b480:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    b482:	a9 01       	movw	r20, r18
    b484:	44 27       	eor	r20, r20
    b486:	51 70       	andi	r21, 0x01	; 1
    b488:	30 ff       	sbrs	r19, 0
    b48a:	1a c0       	rjmp	.+52     	; 0xb4c0 <_handle_select_helper+0x8a>
    b48c:	ad 81       	ldd	r26, Y+5	; 0x05
    b48e:	a1 11       	cpse	r26, r1
    b490:	17 c0       	rjmp	.+46     	; 0xb4c0 <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    b492:	81 e0       	ldi	r24, 0x01	; 1
    b494:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    b496:	69 91       	ld	r22, Y+
    b498:	f3 e0       	ldi	r31, 0x03	; 3
    b49a:	6f 02       	muls	r22, r31
    b49c:	b0 01       	movw	r22, r0
    b49e:	11 24       	eor	r1, r1
    b4a0:	62 51       	subi	r22, 0x12	; 18
    b4a2:	74 4f       	sbci	r23, 0xF4	; 244
    b4a4:	43 e0       	ldi	r20, 0x03	; 3
    b4a6:	ce 01       	movw	r24, r28
    b4a8:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
		SFX_NAVIGATE;
    b4ac:	2f ef       	ldi	r18, 0xFF	; 255
    b4ae:	47 e1       	ldi	r20, 0x17	; 23
    b4b0:	67 e0       	ldi	r22, 0x07	; 7
    b4b2:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    b4b4:	df 91       	pop	r29
    b4b6:	cf 91       	pop	r28
    b4b8:	1f 91       	pop	r17
    b4ba:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    b4bc:	0c 94 aa 3c 	jmp	0x7954	; 0x7954 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    b4c0:	27 ff       	sbrs	r18, 7
    b4c2:	09 c0       	rjmp	.+18     	; 0xb4d6 <_handle_select_helper+0xa0>
    b4c4:	ad 81       	ldd	r26, Y+5	; 0x05
    b4c6:	a1 30       	cpi	r26, 0x01	; 1
    b4c8:	31 f4       	brne	.+12     	; 0xb4d6 <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    b4ca:	8c 81       	ldd	r24, Y+4	; 0x04
    b4cc:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    b4ce:	83 30       	cpi	r24, 0x03	; 3
    b4d0:	5c f0       	brlt	.+22     	; 0xb4e8 <_handle_select_helper+0xb2>
    b4d2:	82 e0       	ldi	r24, 0x02	; 2
    b4d4:	09 c0       	rjmp	.+18     	; 0xb4e8 <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    b4d6:	26 ff       	sbrs	r18, 6
    b4d8:	0b c0       	rjmp	.+22     	; 0xb4f0 <_handle_select_helper+0xba>
    b4da:	ed 81       	ldd	r30, Y+5	; 0x05
    b4dc:	e1 30       	cpi	r30, 0x01	; 1
    b4de:	41 f5       	brne	.+80     	; 0xb530 <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    b4e0:	8c 81       	ldd	r24, Y+4	; 0x04
    b4e2:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    b4e4:	87 fd       	sbrc	r24, 7
    b4e6:	02 c0       	rjmp	.+4      	; 0xb4ec <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    b4e8:	8c 83       	std	Y+4, r24	; 0x04
    b4ea:	e0 cf       	rjmp	.-64     	; 0xb4ac <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    b4ec:	1c 82       	std	Y+4, r1	; 0x04
    b4ee:	de cf       	rjmp	.-68     	; 0xb4ac <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    b4f0:	ef 2b       	or	r30, r31
    b4f2:	69 f0       	breq	.+26     	; 0xb50e <_handle_select_helper+0xd8>
    b4f4:	8d 81       	ldd	r24, Y+5	; 0x05
    b4f6:	81 30       	cpi	r24, 0x01	; 1
    b4f8:	09 f0       	breq	.+2      	; 0xb4fc <_handle_select_helper+0xc6>
    b4fa:	43 c0       	rjmp	.+134    	; 0xb582 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    b4fc:	8c 81       	ldd	r24, Y+4	; 0x04
    b4fe:	c8 0f       	add	r28, r24
    b500:	d1 1d       	adc	r29, r1
    b502:	99 81       	ldd	r25, Y+1	; 0x01
    b504:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    b506:	91 34       	cpi	r25, 0x41	; 65
    b508:	70 f4       	brcc	.+28     	; 0xb526 <_handle_select_helper+0xf0>
    b50a:	81 e4       	ldi	r24, 0x41	; 65
    b50c:	0f c0       	rjmp	.+30     	; 0xb52c <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    b50e:	67 2b       	or	r22, r23
    b510:	89 f0       	breq	.+34     	; 0xb534 <_handle_select_helper+0xfe>
    b512:	8d 81       	ldd	r24, Y+5	; 0x05
    b514:	81 30       	cpi	r24, 0x01	; 1
    b516:	a9 f5       	brne	.+106    	; 0xb582 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    b518:	8c 81       	ldd	r24, Y+4	; 0x04
    b51a:	c8 0f       	add	r28, r24
    b51c:	d1 1d       	adc	r29, r1
    b51e:	99 81       	ldd	r25, Y+1	; 0x01
    b520:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    b522:	9b 35       	cpi	r25, 0x5B	; 91
    b524:	10 f4       	brcc	.+4      	; 0xb52a <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    b526:	99 83       	std	Y+1, r25	; 0x01
    b528:	c1 cf       	rjmp	.-126    	; 0xb4ac <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    b52a:	8a e5       	ldi	r24, 0x5A	; 90
    b52c:	89 83       	std	Y+1, r24	; 0x01
    b52e:	be cf       	rjmp	.-132    	; 0xb4ac <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    b530:	67 2b       	or	r22, r23
    b532:	39 f5       	brne	.+78     	; 0xb582 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    b534:	45 2b       	or	r20, r21
    b536:	29 f1       	breq	.+74     	; 0xb582 <_handle_select_helper+0x14c>
    b538:	4d 81       	ldd	r20, Y+5	; 0x05
    b53a:	41 30       	cpi	r20, 0x01	; 1
    b53c:	11 f5       	brne	.+68     	; 0xb582 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    b53e:	fe 01       	movw	r30, r28
    b540:	21 91       	ld	r18, Z+
    b542:	8f 01       	movw	r16, r30
    b544:	fc 01       	movw	r30, r24
    b546:	23 87       	std	Z+11, r18	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    b548:	43 e0       	ldi	r20, 0x03	; 3
    b54a:	b8 01       	movw	r22, r16
    b54c:	0c 96       	adiw	r24, 0x0c	; 12
    b54e:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    b552:	88 81       	ld	r24, Y
    b554:	f3 e0       	ldi	r31, 0x03	; 3
    b556:	8f 02       	muls	r24, r31
    b558:	c0 01       	movw	r24, r0
    b55a:	11 24       	eor	r1, r1
    b55c:	43 e0       	ldi	r20, 0x03	; 3
    b55e:	b8 01       	movw	r22, r16
    b560:	82 51       	subi	r24, 0x12	; 18
    b562:	94 4f       	sbci	r25, 0xF4	; 244
    b564:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
		SFX_NAVIGATE;
    b568:	2f ef       	ldi	r18, 0xFF	; 255
    b56a:	47 e1       	ldi	r20, 0x17	; 23
    b56c:	67 e0       	ldi	r22, 0x07	; 7
    b56e:	84 e0       	ldi	r24, 0x04	; 4
    b570:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b574:	8c ee       	ldi	r24, 0xEC	; 236
    b576:	9b e0       	ldi	r25, 0x0B	; 11
    b578:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    b57c:	82 e0       	ldi	r24, 0x02	; 2
    b57e:	8d 83       	std	Y+5, r24	; 0x05
    b580:	1a c0       	rjmp	.+52     	; 0xb5b6 <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    b582:	31 ff       	sbrs	r19, 1
    b584:	18 c0       	rjmp	.+48     	; 0xb5b6 <_handle_select_helper+0x180>
    b586:	8d 81       	ldd	r24, Y+5	; 0x05
    b588:	81 30       	cpi	r24, 0x01	; 1
    b58a:	11 f4       	brne	.+4      	; 0xb590 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    b58c:	1d 82       	std	Y+5, r1	; 0x05
    b58e:	8e cf       	rjmp	.-228    	; 0xb4ac <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    b590:	82 30       	cpi	r24, 0x02	; 2
    b592:	19 f4       	brne	.+6      	; 0xb59a <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    b594:	81 e0       	ldi	r24, 0x01	; 1
    b596:	8d 83       	std	Y+5, r24	; 0x05
    b598:	89 cf       	rjmp	.-238    	; 0xb4ac <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    b59a:	2f ef       	ldi	r18, 0xFF	; 255
    b59c:	47 e1       	ldi	r20, 0x17	; 23
    b59e:	67 e0       	ldi	r22, 0x07	; 7
    b5a0:	84 e0       	ldi	r24, 0x04	; 4
    b5a2:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
		fade_through();
    b5a6:	0e 94 15 4b 	call	0x962a	; 0x962a <fade_through>
		load_splash();
	}
}
    b5aa:	df 91       	pop	r29
    b5ac:	cf 91       	pop	r28
    b5ae:	1f 91       	pop	r17
    b5b0:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    b5b2:	0c 94 1f 56 	jmp	0xac3e	; 0xac3e <load_splash>
	}
}
    b5b6:	df 91       	pop	r29
    b5b8:	cf 91       	pop	r28
    b5ba:	1f 91       	pop	r17
    b5bc:	0f 91       	pop	r16
    b5be:	08 95       	ret

0000b5c0 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    b5c0:	af 92       	push	r10
    b5c2:	bf 92       	push	r11
    b5c4:	df 92       	push	r13
    b5c6:	ef 92       	push	r14
    b5c8:	ff 92       	push	r15
    b5ca:	0f 93       	push	r16
    b5cc:	1f 93       	push	r17
    b5ce:	cf 93       	push	r28
    b5d0:	df 93       	push	r29
    b5d2:	00 d0       	rcall	.+0      	; 0xb5d4 <_handle_select_render_helper+0x14>
    b5d4:	1f 92       	push	r1
    b5d6:	cd b7       	in	r28, 0x3d	; 61
    b5d8:	de b7       	in	r29, 0x3e	; 62
    b5da:	7c 01       	movw	r14, r24
    b5dc:	14 2f       	mov	r17, r20
    b5de:	d2 2e       	mov	r13, r18
	u8 tmp[3] = {' ', ' ', ' '};
    b5e0:	80 e2       	ldi	r24, 0x20	; 32
    b5e2:	89 83       	std	Y+1, r24	; 0x01
    b5e4:	8a 83       	std	Y+2, r24	; 0x02
    b5e6:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    b5e8:	f7 01       	movw	r30, r14
    b5ea:	85 81       	ldd	r24, Z+5	; 0x05
    b5ec:	81 11       	cpse	r24, r1
    b5ee:	16 c0       	rjmp	.+44     	; 0xb61c <_handle_select_render_helper+0x5c>
	{
		MapSprite2(idx, map_ball, 0);
    b5f0:	40 e0       	ldi	r20, 0x00	; 0
    b5f2:	61 e2       	ldi	r22, 0x21	; 33
    b5f4:	74 e2       	ldi	r23, 0x24	; 36
    b5f6:	82 2f       	mov	r24, r18
    b5f8:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    b5fc:	f7 01       	movw	r30, r14
    b5fe:	40 81       	ld	r20, Z
    b600:	44 0f       	add	r20, r20
    b602:	44 0f       	add	r20, r20
    b604:	44 0f       	add	r20, r20
    b606:	40 5c       	subi	r20, 0xC0	; 192
    b608:	01 e0       	ldi	r16, 0x01	; 1
    b60a:	21 e0       	ldi	r18, 0x01	; 1
    b60c:	61 2f       	mov	r22, r17
    b60e:	66 0f       	add	r22, r22
    b610:	66 0f       	add	r22, r22
    b612:	66 0f       	add	r22, r22
    b614:	8d 2d       	mov	r24, r13
    b616:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <MoveSprite>
    b61a:	49 c0       	rjmp	.+146    	; 0xb6ae <_handle_select_render_helper+0xee>
	}
	else if (ps->select_state == EDITING)
    b61c:	81 30       	cpi	r24, 0x01	; 1
    b61e:	31 f5       	brne	.+76     	; 0xb66c <_handle_select_render_helper+0xac>
	{
		MapSprite2(idx, map_ball, 0);
    b620:	40 e0       	ldi	r20, 0x00	; 0
    b622:	61 e2       	ldi	r22, 0x21	; 33
    b624:	74 e2       	ldi	r23, 0x24	; 36
    b626:	82 2f       	mov	r24, r18
    b628:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    b62c:	f7 01       	movw	r30, r14
    b62e:	40 81       	ld	r20, Z
    b630:	44 0f       	add	r20, r20
    b632:	44 0f       	add	r20, r20
    b634:	44 0f       	add	r20, r20
    b636:	48 5c       	subi	r20, 0xC8	; 200
    b638:	61 2f       	mov	r22, r17
    b63a:	70 e0       	ldi	r23, 0x00	; 0
    b63c:	6b 5f       	subi	r22, 0xFB	; 251
    b63e:	7f 4f       	sbci	r23, 0xFF	; 255
    b640:	84 81       	ldd	r24, Z+4	; 0x04
    b642:	68 0f       	add	r22, r24
    b644:	71 1d       	adc	r23, r1
    b646:	87 fd       	sbrc	r24, 7
    b648:	7a 95       	dec	r23
    b64a:	66 0f       	add	r22, r22
    b64c:	66 0f       	add	r22, r22
    b64e:	66 0f       	add	r22, r22
    b650:	01 e0       	ldi	r16, 0x01	; 1
    b652:	21 e0       	ldi	r18, 0x01	; 1
    b654:	8d 2d       	mov	r24, r13
    b656:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    b65a:	43 e0       	ldi	r20, 0x03	; 3
    b65c:	b7 01       	movw	r22, r14
    b65e:	6f 5f       	subi	r22, 0xFF	; 255
    b660:	7f 4f       	sbci	r23, 0xFF	; 255
    b662:	ce 01       	movw	r24, r28
    b664:	01 96       	adiw	r24, 0x01	; 1
    b666:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
    b66a:	21 c0       	rjmp	.+66     	; 0xb6ae <_handle_select_render_helper+0xee>
	}
	else if (ps->select_state == CONFIRMED)
    b66c:	82 30       	cpi	r24, 0x02	; 2
    b66e:	f9 f4       	brne	.+62     	; 0xb6ae <_handle_select_render_helper+0xee>
	{
		PrintChar(x_offset+6, 5, '(');
    b670:	a4 2e       	mov	r10, r20
    b672:	b1 2c       	mov	r11, r1
    b674:	48 e2       	ldi	r20, 0x28	; 40
    b676:	65 e0       	ldi	r22, 0x05	; 5
    b678:	70 e0       	ldi	r23, 0x00	; 0
    b67a:	c5 01       	movw	r24, r10
    b67c:	06 96       	adiw	r24, 0x06	; 6
    b67e:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b682:	23 e0       	ldi	r18, 0x03	; 3
    b684:	a7 01       	movw	r20, r14
    b686:	4f 5f       	subi	r20, 0xFF	; 255
    b688:	5f 4f       	sbci	r21, 0xFF	; 255
    b68a:	65 e0       	ldi	r22, 0x05	; 5
    b68c:	87 e0       	ldi	r24, 0x07	; 7
    b68e:	81 0f       	add	r24, r17
    b690:	0e 94 68 48 	call	0x90d0	; 0x90d0 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b694:	49 e2       	ldi	r20, 0x29	; 41
    b696:	65 e0       	ldi	r22, 0x05	; 5
    b698:	70 e0       	ldi	r23, 0x00	; 0
    b69a:	c5 01       	movw	r24, r10
    b69c:	0a 96       	adiw	r24, 0x0a	; 10
    b69e:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <PrintChar>
		MapSprite2(idx, map_none, 0);
    b6a2:	40 e0       	ldi	r20, 0x00	; 0
    b6a4:	66 e6       	ldi	r22, 0x66	; 102
    b6a6:	74 e2       	ldi	r23, 0x24	; 36
    b6a8:	8d 2d       	mov	r24, r13
    b6aa:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b6ae:	f7 01       	movw	r30, r14
    b6b0:	60 81       	ld	r22, Z
    b6b2:	68 5f       	subi	r22, 0xF8	; 248
    b6b4:	23 e0       	ldi	r18, 0x03	; 3
    b6b6:	ae 01       	movw	r20, r28
    b6b8:	4f 5f       	subi	r20, 0xFF	; 255
    b6ba:	5f 4f       	sbci	r21, 0xFF	; 255
    b6bc:	85 e0       	ldi	r24, 0x05	; 5
    b6be:	81 0f       	add	r24, r17
    b6c0:	0e 94 68 48 	call	0x90d0	; 0x90d0 <LBPrintStr>
}
    b6c4:	0f 90       	pop	r0
    b6c6:	0f 90       	pop	r0
    b6c8:	0f 90       	pop	r0
    b6ca:	df 91       	pop	r29
    b6cc:	cf 91       	pop	r28
    b6ce:	1f 91       	pop	r17
    b6d0:	0f 91       	pop	r16
    b6d2:	ff 90       	pop	r15
    b6d4:	ef 90       	pop	r14
    b6d6:	df 90       	pop	r13
    b6d8:	bf 90       	pop	r11
    b6da:	af 90       	pop	r10
    b6dc:	08 95       	ret

0000b6de <load_handle_select>:

void load_handle_select()
{
    b6de:	8f 92       	push	r8
    b6e0:	9f 92       	push	r9
    b6e2:	af 92       	push	r10
    b6e4:	bf 92       	push	r11
    b6e6:	cf 92       	push	r12
    b6e8:	df 92       	push	r13
    b6ea:	ef 92       	push	r14
    b6ec:	ff 92       	push	r15
    b6ee:	0f 93       	push	r16
    b6f0:	1f 93       	push	r17
    b6f2:	cf 93       	push	r28
    b6f4:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    b6f6:	82 e0       	ldi	r24, 0x02	; 2
    b6f8:	80 93 0c 0c 	sts	0x0C0C, r24
	clear_sprites();
    b6fc:	0e 94 1f 4b 	call	0x963e	; 0x963e <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    b700:	40 e0       	ldi	r20, 0x00	; 0
    b702:	60 e6       	ldi	r22, 0x60	; 96
    b704:	74 e2       	ldi	r23, 0x24	; 36
    b706:	80 e0       	ldi	r24, 0x00	; 0
    b708:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    b70c:	40 e0       	ldi	r20, 0x00	; 0
    b70e:	68 e4       	ldi	r22, 0x48	; 72
    b710:	74 e2       	ldi	r23, 0x24	; 36
    b712:	84 e0       	ldi	r24, 0x04	; 4
    b714:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    b718:	02 e0       	ldi	r16, 0x02	; 2
    b71a:	22 e0       	ldi	r18, 0x02	; 2
    b71c:	40 e2       	ldi	r20, 0x20	; 32
    b71e:	68 e1       	ldi	r22, 0x18	; 24
    b720:	80 e0       	ldi	r24, 0x00	; 0
    b722:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    b726:	22 e0       	ldi	r18, 0x02	; 2
    b728:	40 e2       	ldi	r20, 0x20	; 32
    b72a:	60 ea       	ldi	r22, 0xA0	; 160
    b72c:	84 e0       	ldi	r24, 0x04	; 4
    b72e:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <MoveSprite>
	Print(9, 1, &strMap[strHandlesTitle]);
    b732:	44 e7       	ldi	r20, 0x74	; 116
    b734:	51 e0       	ldi	r21, 0x01	; 1
    b736:	61 e0       	ldi	r22, 0x01	; 1
    b738:	70 e0       	ldi	r23, 0x00	; 0
    b73a:	89 e0       	ldi	r24, 0x09	; 9
    b73c:	90 e0       	ldi	r25, 0x00	; 0
    b73e:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(6, 5, &strMap[strPlayer1]);
    b742:	4e e8       	ldi	r20, 0x8E	; 142
    b744:	51 e0       	ldi	r21, 0x01	; 1
    b746:	65 e0       	ldi	r22, 0x05	; 5
    b748:	70 e0       	ldi	r23, 0x00	; 0
    b74a:	86 e0       	ldi	r24, 0x06	; 6
    b74c:	90 e0       	ldi	r25, 0x00	; 0
    b74e:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(23, 5, &strMap[strPlayer2]);
    b752:	41 e9       	ldi	r20, 0x91	; 145
    b754:	51 e0       	ldi	r21, 0x01	; 1
    b756:	65 e0       	ldi	r22, 0x05	; 5
    b758:	70 e0       	ldi	r23, 0x00	; 0
    b75a:	87 e1       	ldi	r24, 0x17	; 23
    b75c:	90 e0       	ldi	r25, 0x00	; 0
    b75e:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
    b762:	8e ee       	ldi	r24, 0xEE	; 238
    b764:	e8 2e       	mov	r14, r24
    b766:	8b e0       	ldi	r24, 0x0B	; 11
    b768:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    b76a:	c0 e0       	ldi	r28, 0x00	; 0
    b76c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    b76e:	93 e0       	ldi	r25, 0x03	; 3
    b770:	a9 2e       	mov	r10, r25
    b772:	b1 2c       	mov	r11, r1
    b774:	67 01       	movw	r12, r14
    b776:	ce 01       	movw	r24, r28
    b778:	b5 01       	movw	r22, r10
    b77a:	0e 94 91 60 	call	0xc122	; 0xc122 <__divmodhi4>
    b77e:	4c 01       	movw	r8, r24
    b780:	8b 01       	movw	r16, r22
    b782:	08 5f       	subi	r16, 0xF8	; 248
    b784:	1f 4f       	sbci	r17, 0xFF	; 255
    b786:	f7 01       	movw	r30, r14
    b788:	41 91       	ld	r20, Z+
    b78a:	7f 01       	movw	r14, r30
    b78c:	b8 01       	movw	r22, r16
    b78e:	03 96       	adiw	r24, 0x03	; 3
    b790:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    b794:	f6 01       	movw	r30, r12
    b796:	40 81       	ld	r20, Z
    b798:	b8 01       	movw	r22, r16
    b79a:	c4 01       	movw	r24, r8
    b79c:	44 96       	adiw	r24, 0x14	; 20
    b79e:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, &strMap[strHandlesTitle]);
	Print(6, 5, &strMap[strPlayer1]);
	Print(23, 5, &strMap[strPlayer2]);
	for (int i = 0; i < 27; i += 1)
    b7a2:	21 96       	adiw	r28, 0x01	; 1
    b7a4:	cb 31       	cpi	r28, 0x1B	; 27
    b7a6:	d1 05       	cpc	r29, r1
    b7a8:	29 f7       	brne	.-54     	; 0xb774 <load_handle_select+0x96>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, &strMap[strSelectHandle]);
    b7aa:	44 e9       	ldi	r20, 0x94	; 148
    b7ac:	51 e0       	ldi	r21, 0x01	; 1
    b7ae:	65 e1       	ldi	r22, 0x15	; 21
    b7b0:	70 e0       	ldi	r23, 0x00	; 0
    b7b2:	88 e0       	ldi	r24, 0x08	; 8
    b7b4:	90 e0       	ldi	r25, 0x00	; 0
    b7b6:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(8, 22, &strMap[strConfirmHandle]);
    b7ba:	4f e9       	ldi	r20, 0x9F	; 159
    b7bc:	51 e0       	ldi	r21, 0x01	; 1
    b7be:	66 e1       	ldi	r22, 0x16	; 22
    b7c0:	70 e0       	ldi	r23, 0x00	; 0
    b7c2:	88 e0       	ldi	r24, 0x08	; 8
    b7c4:	90 e0       	ldi	r25, 0x00	; 0
    b7c6:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(8, 23, &strMap[strCancelHandle]);
    b7ca:	4b ea       	ldi	r20, 0xAB	; 171
    b7cc:	51 e0       	ldi	r21, 0x01	; 1
    b7ce:	67 e1       	ldi	r22, 0x17	; 23
    b7d0:	70 e0       	ldi	r23, 0x00	; 0
    b7d2:	88 e0       	ldi	r24, 0x08	; 8
    b7d4:	90 e0       	ldi	r25, 0x00	; 0
    b7d6:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>
	Print(8, 24, &strMap[strChangeHandle]);
    b7da:	4f ec       	ldi	r20, 0xCF	; 207
    b7dc:	51 e0       	ldi	r21, 0x01	; 1
    b7de:	68 e1       	ldi	r22, 0x18	; 24
    b7e0:	70 e0       	ldi	r23, 0x00	; 0
    b7e2:	88 e0       	ldi	r24, 0x08	; 8
    b7e4:	90 e0       	ldi	r25, 0x00	; 0
}
    b7e6:	df 91       	pop	r29
    b7e8:	cf 91       	pop	r28
    b7ea:	1f 91       	pop	r17
    b7ec:	0f 91       	pop	r16
    b7ee:	ff 90       	pop	r15
    b7f0:	ef 90       	pop	r14
    b7f2:	df 90       	pop	r13
    b7f4:	cf 90       	pop	r12
    b7f6:	bf 90       	pop	r11
    b7f8:	af 90       	pop	r10
    b7fa:	9f 90       	pop	r9
    b7fc:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, &strMap[strSelectHandle]);
	Print(8, 22, &strMap[strConfirmHandle]);
	Print(8, 23, &strMap[strCancelHandle]);
	Print(8, 24, &strMap[strChangeHandle]);
    b7fe:	0c 94 6a 47 	jmp	0x8ed4	; 0x8ed4 <Print>

0000b802 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    b802:	0f 93       	push	r16
    b804:	cf 93       	push	r28
    b806:	df 93       	push	r29
    b808:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	
	// Render
	switch (game.selection)
    b80a:	90 91 0f 0c 	lds	r25, 0x0C0F
    b80e:	91 30       	cpi	r25, 0x01	; 1
    b810:	41 f0       	breq	.+16     	; 0xb822 <update_splash+0x20>
    b812:	92 30       	cpi	r25, 0x02	; 2
    b814:	51 f0       	breq	.+20     	; 0xb82a <update_splash+0x28>
    b816:	91 11       	cpse	r25, r1
    b818:	0f c0       	rjmp	.+30     	; 0xb838 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    b81a:	01 e0       	ldi	r16, 0x01	; 1
    b81c:	21 e0       	ldi	r18, 0x01	; 1
    b81e:	48 e6       	ldi	r20, 0x68	; 104
    b820:	07 c0       	rjmp	.+14     	; 0xb830 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    b822:	01 e0       	ldi	r16, 0x01	; 1
    b824:	21 e0       	ldi	r18, 0x01	; 1
    b826:	40 e7       	ldi	r20, 0x70	; 112
    b828:	03 c0       	rjmp	.+6      	; 0xb830 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    b82a:	01 e0       	ldi	r16, 0x01	; 1
    b82c:	21 e0       	ldi	r18, 0x01	; 1
    b82e:	48 e7       	ldi	r20, 0x78	; 120
    b830:	60 e3       	ldi	r22, 0x30	; 48
    b832:	80 e0       	ldi	r24, 0x00	; 0
    b834:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <MoveSprite>
			break;
	}
	Print(9, 21, &strMap[strSelectHandle]);
    b838:	44 e9       	ldi	r20, 0x94	; 148
    b83a:	51 e0       	ldi	r21, 0x01	; 1
    b83c:	65 e1       	ldi	r22, 0x15	; 21
    b83e:	70 e0       	ldi	r23, 0x00	; 0
    b840:	89 e0       	ldi	r24, 0x09	; 9
    b842:	90 e0       	ldi	r25, 0x00	; 0
    b844:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    b848:	88 81       	ld	r24, Y
    b84a:	99 81       	ldd	r25, Y+1	; 0x01
    b84c:	00 97       	sbiw	r24, 0x00	; 0
    b84e:	21 f0       	breq	.+8      	; 0xb858 <update_splash+0x56>
    b850:	10 92 35 0b 	sts	0x0B35, r1
    b854:	10 92 34 0b 	sts	0x0B34, r1
	
	if (p1->pressed & BTN_UP)
    b858:	84 ff       	sbrs	r24, 4
    b85a:	0e c0       	rjmp	.+28     	; 0xb878 <update_splash+0x76>
	{
		game.selection--;
    b85c:	80 91 0f 0c 	lds	r24, 0x0C0F
    b860:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    b862:	87 ff       	sbrs	r24, 7
    b864:	11 c0       	rjmp	.+34     	; 0xb888 <update_splash+0x86>
    b866:	10 92 0f 0c 	sts	0x0C0F, r1
		SFX_NAVIGATE;
    b86a:	2f ef       	ldi	r18, 0xFF	; 255
    b86c:	47 e1       	ldi	r20, 0x17	; 23
    b86e:	67 e0       	ldi	r22, 0x07	; 7
    b870:	84 e0       	ldi	r24, 0x04	; 4
    b872:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
    b876:	6f c0       	rjmp	.+222    	; 0xb956 <update_splash+0x154>
	}
	else if (p1->pressed & BTN_DOWN)
    b878:	85 ff       	sbrs	r24, 5
    b87a:	09 c0       	rjmp	.+18     	; 0xb88e <update_splash+0x8c>
	{
		game.selection++;
    b87c:	80 91 0f 0c 	lds	r24, 0x0C0F
    b880:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    b882:	83 30       	cpi	r24, 0x03	; 3
    b884:	0c f0       	brlt	.+2      	; 0xb888 <update_splash+0x86>
    b886:	82 e0       	ldi	r24, 0x02	; 2
    b888:	80 93 0f 0c 	sts	0x0C0F, r24
    b88c:	ee cf       	rjmp	.-36     	; 0xb86a <update_splash+0x68>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    b88e:	90 ff       	sbrs	r25, 0
    b890:	2c c0       	rjmp	.+88     	; 0xb8ea <update_splash+0xe8>
    b892:	80 91 0f 0c 	lds	r24, 0x0C0F
    b896:	82 30       	cpi	r24, 0x02	; 2
    b898:	a8 f4       	brcc	.+42     	; 0xb8c4 <update_splash+0xc2>
	{
		p1s.select_state = SELECTING;
    b89a:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    b89e:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    b8a2:	2f ef       	ldi	r18, 0xFF	; 255
    b8a4:	47 e1       	ldi	r20, 0x17	; 23
    b8a6:	67 e0       	ldi	r22, 0x07	; 7
    b8a8:	84 e0       	ldi	r24, 0x04	; 4
    b8aa:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
		fade_through();
    b8ae:	0e 94 15 4b 	call	0x962a	; 0x962a <fade_through>
		load_eeprom(&handles);
    b8b2:	8c ee       	ldi	r24, 0xEC	; 236
    b8b4:	9b e0       	ldi	r25, 0x0B	; 11
    b8b6:	0e 94 03 4b 	call	0x9606	; 0x9606 <load_eeprom>
		level_transition(LBRandom(0, 10));
		return;
		
	}
	demo_counter++;
}
    b8ba:	df 91       	pop	r29
    b8bc:	cf 91       	pop	r28
    b8be:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    b8c0:	0c 94 6f 5b 	jmp	0xb6de	; 0xb6de <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    b8c4:	82 30       	cpi	r24, 0x02	; 2
    b8c6:	89 f4       	brne	.+34     	; 0xb8ea <update_splash+0xe8>
	{
		SFX_NAVIGATE;
    b8c8:	2f ef       	ldi	r18, 0xFF	; 255
    b8ca:	47 e1       	ldi	r20, 0x17	; 23
    b8cc:	67 e0       	ldi	r22, 0x07	; 7
    b8ce:	84 e0       	ldi	r24, 0x04	; 4
    b8d0:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
		fade_through();
    b8d4:	0e 94 15 4b 	call	0x962a	; 0x962a <fade_through>
		load_eeprom(&scores);
    b8d8:	85 ec       	ldi	r24, 0xC5	; 197
    b8da:	9b e0       	ldi	r25, 0x0B	; 11
    b8dc:	0e 94 03 4b 	call	0x9606	; 0x9606 <load_eeprom>
		level_transition(LBRandom(0, 10));
		return;
		
	}
	demo_counter++;
}
    b8e0:	df 91       	pop	r29
    b8e2:	cf 91       	pop	r28
    b8e4:	0f 91       	pop	r16
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    b8e6:	0c 94 55 56 	jmp	0xacaa	; 0xacaa <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    b8ea:	80 91 34 0b 	lds	r24, 0x0B34
    b8ee:	90 91 35 0b 	lds	r25, 0x0B35
    b8f2:	88 35       	cpi	r24, 0x58	; 88
    b8f4:	92 40       	sbci	r25, 0x02	; 2
    b8f6:	78 f1       	brcs	.+94     	; 0xb956 <update_splash+0x154>
	{
		demo_counter = 0;
    b8f8:	10 92 35 0b 	sts	0x0B35, r1
    b8fc:	10 92 34 0b 	sts	0x0B34, r1
		game.selection = CPUVCPU;
    b900:	83 e0       	ldi	r24, 0x03	; 3
    b902:	80 93 0f 0c 	sts	0x0C0F, r24
		player1.handle_id = 9;
    b906:	c9 e0       	ldi	r28, 0x09	; 9
    b908:	c0 93 34 0c 	sts	0x0C34, r28
		LBCopyChars(player1.handle, &handles.data[9*3], 3);
    b90c:	43 e0       	ldi	r20, 0x03	; 3
    b90e:	69 e0       	ldi	r22, 0x09	; 9
    b910:	7c e0       	ldi	r23, 0x0C	; 12
    b912:	85 e3       	ldi	r24, 0x35	; 53
    b914:	9c e0       	ldi	r25, 0x0C	; 12
    b916:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
		player2.handle_id = 9;
    b91a:	c0 93 94 0f 	sts	0x0F94, r28
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
    b91e:	43 e0       	ldi	r20, 0x03	; 3
    b920:	69 e0       	ldi	r22, 0x09	; 9
    b922:	7c e0       	ldi	r23, 0x0C	; 12
    b924:	85 e9       	ldi	r24, 0x95	; 149
    b926:	9f e0       	ldi	r25, 0x0F	; 15
    b928:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
		SFX_NAVIGATE;
    b92c:	2f ef       	ldi	r18, 0xFF	; 255
    b92e:	47 e1       	ldi	r20, 0x17	; 23
    b930:	67 e0       	ldi	r22, 0x07	; 7
    b932:	84 e0       	ldi	r24, 0x04	; 4
    b934:	0e 94 aa 3c 	call	0x7954	; 0x7954 <TriggerNote>
		clear_sprites();
    b938:	0e 94 1f 4b 	call	0x963e	; 0x963e <clear_sprites>
		fade_through();
    b93c:	0e 94 15 4b 	call	0x962a	; 0x962a <fade_through>
		level_transition(LBRandom(0, 10));
    b940:	6a e0       	ldi	r22, 0x0A	; 10
    b942:	70 e0       	ldi	r23, 0x00	; 0
    b944:	80 e0       	ldi	r24, 0x00	; 0
    b946:	90 e0       	ldi	r25, 0x00	; 0
    b948:	0e 94 99 49 	call	0x9332	; 0x9332 <LBRandom>
		return;
		
	}
	demo_counter++;
}
    b94c:	df 91       	pop	r29
    b94e:	cf 91       	pop	r28
    b950:	0f 91       	pop	r16
		player2.handle_id = 9;
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
		SFX_NAVIGATE;
		clear_sprites();
		fade_through();
		level_transition(LBRandom(0, 10));
    b952:	0c 94 ef 55 	jmp	0xabde	; 0xabde <level_transition>
		return;
		
	}
	demo_counter++;
    b956:	80 91 34 0b 	lds	r24, 0x0B34
    b95a:	90 91 35 0b 	lds	r25, 0x0B35
    b95e:	01 96       	adiw	r24, 0x01	; 1
    b960:	90 93 35 0b 	sts	0x0B35, r25
    b964:	80 93 34 0b 	sts	0x0B34, r24
}
    b968:	df 91       	pop	r29
    b96a:	cf 91       	pop	r28
    b96c:	0f 91       	pop	r16
    b96e:	08 95       	ret

0000b970 <update_handle_select>:
	Print(8, 23, &strMap[strCancelHandle]);
	Print(8, 24, &strMap[strChangeHandle]);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    b970:	0f 93       	push	r16
    b972:	1f 93       	push	r17
    b974:	cf 93       	push	r28
    b976:	df 93       	push	r29
    b978:	8c 01       	movw	r16, r24
    b97a:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    b97c:	28 e0       	ldi	r18, 0x08	; 8
    b97e:	42 e0       	ldi	r20, 0x02	; 2
    b980:	bc 01       	movw	r22, r24
    b982:	8a e2       	ldi	r24, 0x2A	; 42
    b984:	9b e0       	ldi	r25, 0x0B	; 11
    b986:	0e 94 e0 5a 	call	0xb5c0	; 0xb5c0 <_handle_select_render_helper>
	if (game.selection == PVP)
    b98a:	80 91 0f 0c 	lds	r24, 0x0C0F
    b98e:	81 30       	cpi	r24, 0x01	; 1
    b990:	39 f4       	brne	.+14     	; 0xb9a0 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 9);
    b992:	29 e0       	ldi	r18, 0x09	; 9
    b994:	43 e1       	ldi	r20, 0x13	; 19
    b996:	be 01       	movw	r22, r28
    b998:	84 e2       	ldi	r24, 0x24	; 36
    b99a:	9b e0       	ldi	r25, 0x0B	; 11
    b99c:	0e 94 e0 5a 	call	0xb5c0	; 0xb5c0 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    b9a0:	49 e2       	ldi	r20, 0x29	; 41
    b9a2:	5c e0       	ldi	r21, 0x0C	; 12
    b9a4:	b8 01       	movw	r22, r16
    b9a6:	8a e2       	ldi	r24, 0x2A	; 42
    b9a8:	9b e0       	ldi	r25, 0x0B	; 11
    b9aa:	0e 94 1b 5a 	call	0xb436	; 0xb436 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    b9ae:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    b9b2:	80 91 0f 0c 	lds	r24, 0x0C0F
    b9b6:	81 30       	cpi	r24, 0x01	; 1
    b9b8:	19 f0       	breq	.+6      	; 0xb9c0 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    b9ba:	12 30       	cpi	r17, 0x02	; 2
    b9bc:	69 f0       	breq	.+26     	; 0xb9d8 <update_handle_select+0x68>
    b9be:	21 c0       	rjmp	.+66     	; 0xba02 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    b9c0:	49 e8       	ldi	r20, 0x89	; 137
    b9c2:	5f e0       	ldi	r21, 0x0F	; 15
    b9c4:	be 01       	movw	r22, r28
    b9c6:	84 e2       	ldi	r24, 0x24	; 36
    b9c8:	9b e0       	ldi	r25, 0x0B	; 11
    b9ca:	0e 94 1b 5a 	call	0xb436	; 0xb436 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    b9ce:	80 91 29 0b 	lds	r24, 0x0B29
    b9d2:	82 30       	cpi	r24, 0x02	; 2
    b9d4:	b1 f4       	brne	.+44     	; 0xba02 <update_handle_select+0x92>
    b9d6:	f1 cf       	rjmp	.-30     	; 0xb9ba <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    b9d8:	80 91 0f 0c 	lds	r24, 0x0C0F
    b9dc:	81 11       	cpse	r24, r1
    b9de:	0a c0       	rjmp	.+20     	; 0xb9f4 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    b9e0:	89 e0       	ldi	r24, 0x09	; 9
    b9e2:	80 93 94 0f 	sts	0x0F94, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    b9e6:	43 e0       	ldi	r20, 0x03	; 3
    b9e8:	69 e0       	ldi	r22, 0x09	; 9
    b9ea:	7c e0       	ldi	r23, 0x0C	; 12
    b9ec:	85 e9       	ldi	r24, 0x95	; 149
    b9ee:	9f e0       	ldi	r25, 0x0F	; 15
    b9f0:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <LBCopyChars>
		}
		level_transition(0);
    b9f4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    b9f6:	df 91       	pop	r29
    b9f8:	cf 91       	pop	r28
    b9fa:	1f 91       	pop	r17
    b9fc:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    b9fe:	0c 94 ef 55 	jmp	0xabde	; 0xabde <level_transition>
	}
}
    ba02:	df 91       	pop	r29
    ba04:	cf 91       	pop	r28
    ba06:	1f 91       	pop	r17
    ba08:	0f 91       	pop	r16
    ba0a:	08 95       	ret

0000ba0c <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    ba0c:	00 97       	sbiw	r24, 0x00	; 0
    ba0e:	41 f0       	breq	.+16     	; 0xba20 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    ba10:	81 30       	cpi	r24, 0x01	; 1
    ba12:	91 05       	cpc	r25, r1
    ba14:	41 f0       	breq	.+16     	; 0xba26 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    ba16:	82 30       	cpi	r24, 0x02	; 2
    ba18:	91 05       	cpc	r25, r1
    ba1a:	41 f0       	breq	.+16     	; 0xba2c <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    ba1c:	03 97       	sbiw	r24, 0x03	; 3
    ba1e:	49 f0       	breq	.+18     	; 0xba32 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    ba20:	80 e1       	ldi	r24, 0x10	; 16
    ba22:	90 e0       	ldi	r25, 0x00	; 0
    ba24:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    ba26:	80 e2       	ldi	r24, 0x20	; 32
    ba28:	90 e0       	ldi	r25, 0x00	; 0
    ba2a:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    ba2c:	80 e4       	ldi	r24, 0x40	; 64
    ba2e:	90 e0       	ldi	r25, 0x00	; 0
    ba30:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    ba32:	80 e8       	ldi	r24, 0x80	; 128
    ba34:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    ba36:	08 95       	ret

0000ba38 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    ba38:	8f 92       	push	r8
    ba3a:	9f 92       	push	r9
    ba3c:	af 92       	push	r10
    ba3e:	bf 92       	push	r11
    ba40:	cf 92       	push	r12
    ba42:	df 92       	push	r13
    ba44:	ef 92       	push	r14
    ba46:	ff 92       	push	r15
    ba48:	0f 93       	push	r16
    ba4a:	1f 93       	push	r17
    ba4c:	cf 93       	push	r28
    ba4e:	df 93       	push	r29
    ba50:	e8 2e       	mov	r14, r24
    ba52:	d6 2e       	mov	r13, r22
    ba54:	f4 2e       	mov	r15, r20
    ba56:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    ba58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ba5a:	88 23       	and	r24, r24
    ba5c:	09 f4       	brne	.+2      	; 0xba60 <crash_and_turn+0x28>
    ba5e:	a8 c0       	rjmp	.+336    	; 0xbbb0 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    ba60:	f8 01       	movw	r30, r16
    ba62:	c4 80       	ldd	r12, Z+4	; 0x04
    ba64:	c4 fe       	sbrs	r12, 4
    ba66:	23 c0       	rjmp	.+70     	; 0xbaae <crash_and_turn+0x76>
    ba68:	fe e1       	ldi	r31, 0x1E	; 30
    ba6a:	6f 02       	muls	r22, r31
    ba6c:	40 01       	movw	r8, r0
    ba6e:	11 24       	eor	r1, r1
    ba70:	ae 2c       	mov	r10, r14
    ba72:	bb 24       	eor	r11, r11
    ba74:	a7 fc       	sbrc	r10, 7
    ba76:	b0 94       	com	r11
    ba78:	c4 01       	movw	r24, r8
    ba7a:	8a 0d       	add	r24, r10
    ba7c:	9b 1d       	adc	r25, r11
    ba7e:	01 97       	sbiw	r24, 0x01	; 1
    ba80:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    ba84:	81 11       	cpse	r24, r1
    ba86:	13 c0       	rjmp	.+38     	; 0xbaae <crash_and_turn+0x76>
    ba88:	c4 01       	movw	r24, r8
    ba8a:	8a 0d       	add	r24, r10
    ba8c:	9b 1d       	adc	r25, r11
    ba8e:	4d 96       	adiw	r24, 0x1d	; 29
    ba90:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    ba94:	81 11       	cpse	r24, r1
    ba96:	0b c0       	rjmp	.+22     	; 0xbaae <crash_and_turn+0x76>
    ba98:	c4 01       	movw	r24, r8
    ba9a:	8a 0d       	add	r24, r10
    ba9c:	9b 1d       	adc	r25, r11
    ba9e:	cb 96       	adiw	r24, 0x3b	; 59
    baa0:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    baa4:	81 11       	cpse	r24, r1
    baa6:	03 c0       	rjmp	.+6      	; 0xbaae <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    baa8:	80 e4       	ldi	r24, 0x40	; 64
    baaa:	90 e0       	ldi	r25, 0x00	; 0
    baac:	6f c0       	rjmp	.+222    	; 0xbb8c <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    baae:	c6 fe       	sbrs	r12, 6
    bab0:	23 c0       	rjmp	.+70     	; 0xbaf8 <crash_and_turn+0xc0>
    bab2:	8d 2d       	mov	r24, r13
    bab4:	99 27       	eor	r25, r25
    bab6:	87 fd       	sbrc	r24, 7
    bab8:	90 95       	com	r25
    baba:	02 96       	adiw	r24, 0x02	; 2
    babc:	2e e1       	ldi	r18, 0x1E	; 30
    babe:	28 9f       	mul	r18, r24
    bac0:	50 01       	movw	r10, r0
    bac2:	29 9f       	mul	r18, r25
    bac4:	b0 0c       	add	r11, r0
    bac6:	11 24       	eor	r1, r1
    bac8:	ae 0c       	add	r10, r14
    baca:	b1 1c       	adc	r11, r1
    bacc:	e7 fc       	sbrc	r14, 7
    bace:	ba 94       	dec	r11
    bad0:	c5 01       	movw	r24, r10
    bad2:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    bad6:	81 11       	cpse	r24, r1
    bad8:	0f c0       	rjmp	.+30     	; 0xbaf8 <crash_and_turn+0xc0>
    bada:	c5 01       	movw	r24, r10
    badc:	01 96       	adiw	r24, 0x01	; 1
    bade:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    bae2:	81 11       	cpse	r24, r1
    bae4:	09 c0       	rjmp	.+18     	; 0xbaf8 <crash_and_turn+0xc0>
    bae6:	c5 01       	movw	r24, r10
    bae8:	02 96       	adiw	r24, 0x02	; 2
    baea:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    baee:	81 11       	cpse	r24, r1
    baf0:	03 c0       	rjmp	.+6      	; 0xbaf8 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    baf2:	80 e2       	ldi	r24, 0x20	; 32
    baf4:	90 e0       	ldi	r25, 0x00	; 0
    baf6:	4a c0       	rjmp	.+148    	; 0xbb8c <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    baf8:	c5 fe       	sbrs	r12, 5
    bafa:	24 c0       	rjmp	.+72     	; 0xbb44 <crash_and_turn+0x10c>
    bafc:	fd 2d       	mov	r31, r13
    bafe:	8e e1       	ldi	r24, 0x1E	; 30
    bb00:	f8 02       	muls	r31, r24
    bb02:	40 01       	movw	r8, r0
    bb04:	11 24       	eor	r1, r1
    bb06:	ae 2c       	mov	r10, r14
    bb08:	bb 24       	eor	r11, r11
    bb0a:	a7 fc       	sbrc	r10, 7
    bb0c:	b0 94       	com	r11
    bb0e:	c4 01       	movw	r24, r8
    bb10:	8a 0d       	add	r24, r10
    bb12:	9b 1d       	adc	r25, r11
    bb14:	02 96       	adiw	r24, 0x02	; 2
    bb16:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    bb1a:	81 11       	cpse	r24, r1
    bb1c:	13 c0       	rjmp	.+38     	; 0xbb44 <crash_and_turn+0x10c>
    bb1e:	c4 01       	movw	r24, r8
    bb20:	8a 0d       	add	r24, r10
    bb22:	9b 1d       	adc	r25, r11
    bb24:	80 96       	adiw	r24, 0x20	; 32
    bb26:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    bb2a:	81 11       	cpse	r24, r1
    bb2c:	0b c0       	rjmp	.+22     	; 0xbb44 <crash_and_turn+0x10c>
    bb2e:	c4 01       	movw	r24, r8
    bb30:	8a 0d       	add	r24, r10
    bb32:	9b 1d       	adc	r25, r11
    bb34:	ce 96       	adiw	r24, 0x3e	; 62
    bb36:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    bb3a:	81 11       	cpse	r24, r1
    bb3c:	03 c0       	rjmp	.+6      	; 0xbb44 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    bb3e:	80 e8       	ldi	r24, 0x80	; 128
    bb40:	90 e0       	ldi	r25, 0x00	; 0
    bb42:	24 c0       	rjmp	.+72     	; 0xbb8c <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    bb44:	c7 fe       	sbrs	r12, 7
    bb46:	29 c0       	rjmp	.+82     	; 0xbb9a <crash_and_turn+0x162>
    bb48:	8d 2d       	mov	r24, r13
    bb4a:	99 27       	eor	r25, r25
    bb4c:	87 fd       	sbrc	r24, 7
    bb4e:	90 95       	com	r25
    bb50:	01 97       	sbiw	r24, 0x01	; 1
    bb52:	2e e1       	ldi	r18, 0x1E	; 30
    bb54:	28 9f       	mul	r18, r24
    bb56:	50 01       	movw	r10, r0
    bb58:	29 9f       	mul	r18, r25
    bb5a:	b0 0c       	add	r11, r0
    bb5c:	11 24       	eor	r1, r1
    bb5e:	ae 0c       	add	r10, r14
    bb60:	b1 1c       	adc	r11, r1
    bb62:	e7 fc       	sbrc	r14, 7
    bb64:	ba 94       	dec	r11
    bb66:	c5 01       	movw	r24, r10
    bb68:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    bb6c:	81 11       	cpse	r24, r1
    bb6e:	15 c0       	rjmp	.+42     	; 0xbb9a <crash_and_turn+0x162>
    bb70:	c5 01       	movw	r24, r10
    bb72:	01 96       	adiw	r24, 0x01	; 1
    bb74:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    bb78:	81 11       	cpse	r24, r1
    bb7a:	0f c0       	rjmp	.+30     	; 0xbb9a <crash_and_turn+0x162>
    bb7c:	c5 01       	movw	r24, r10
    bb7e:	02 96       	adiw	r24, 0x02	; 2
    bb80:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <solid_tile>
    bb84:	81 11       	cpse	r24, r1
    bb86:	09 c0       	rjmp	.+18     	; 0xbb9a <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    bb88:	80 e1       	ldi	r24, 0x10	; 16
    bb8a:	90 e0       	ldi	r25, 0x00	; 0
    bb8c:	f8 01       	movw	r30, r16
    bb8e:	95 83       	std	Z+5, r25	; 0x05
    bb90:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    bb92:	ce 01       	movw	r24, r28
    bb94:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <recoil_sprite>
			recoiled = 0;
    bb98:	f1 2c       	mov	r15, r1
		}
		if (player->goal_direction & p->held)
    bb9a:	f8 01       	movw	r30, r16
    bb9c:	24 81       	ldd	r18, Z+4	; 0x04
    bb9e:	35 81       	ldd	r19, Z+5	; 0x05
    bba0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    bba2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    bba4:	82 23       	and	r24, r18
    bba6:	93 23       	and	r25, r19
    bba8:	89 2b       	or	r24, r25
    bbaa:	11 f0       	breq	.+4      	; 0xbbb0 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    bbac:	1b 8e       	std	Y+27, r1	; 0x1b
			recoiled = 0;
    bbae:	f1 2c       	mov	r15, r1
		}
	}
	if ((p->held & BTN_LEFT) && recoiled)
    bbb0:	f8 01       	movw	r30, r16
    bbb2:	84 81       	ldd	r24, Z+4	; 0x04
    bbb4:	86 ff       	sbrs	r24, 6
    bbb6:	05 c0       	rjmp	.+10     	; 0xbbc2 <crash_and_turn+0x18a>
    bbb8:	ff 20       	and	r15, r15
    bbba:	19 f0       	breq	.+6      	; 0xbbc2 <crash_and_turn+0x18a>
	{
		p->held = BTN_UP;
    bbbc:	80 e1       	ldi	r24, 0x10	; 16
    bbbe:	90 e0       	ldi	r25, 0x00	; 0
    bbc0:	15 c0       	rjmp	.+42     	; 0xbbec <crash_and_turn+0x1b4>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_UP) && recoiled)
    bbc2:	84 ff       	sbrs	r24, 4
    bbc4:	05 c0       	rjmp	.+10     	; 0xbbd0 <crash_and_turn+0x198>
    bbc6:	ff 20       	and	r15, r15
    bbc8:	19 f0       	breq	.+6      	; 0xbbd0 <crash_and_turn+0x198>
	{
		p->held = BTN_RIGHT;
    bbca:	80 e8       	ldi	r24, 0x80	; 128
    bbcc:	90 e0       	ldi	r25, 0x00	; 0
    bbce:	0d c0       	rjmp	.+26     	; 0xbbea <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_RIGHT) && recoiled)
    bbd0:	87 ff       	sbrs	r24, 7
    bbd2:	05 c0       	rjmp	.+10     	; 0xbbde <crash_and_turn+0x1a6>
    bbd4:	ff 20       	and	r15, r15
    bbd6:	19 f0       	breq	.+6      	; 0xbbde <crash_and_turn+0x1a6>
	{
		p->held = BTN_DOWN;
    bbd8:	80 e2       	ldi	r24, 0x20	; 32
    bbda:	90 e0       	ldi	r25, 0x00	; 0
    bbdc:	06 c0       	rjmp	.+12     	; 0xbbea <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_DOWN) && recoiled)
    bbde:	85 ff       	sbrs	r24, 5
    bbe0:	09 c0       	rjmp	.+18     	; 0xbbf4 <crash_and_turn+0x1bc>
    bbe2:	ff 20       	and	r15, r15
    bbe4:	39 f0       	breq	.+14     	; 0xbbf4 <crash_and_turn+0x1bc>
	{
		p->held = BTN_LEFT;
    bbe6:	80 e4       	ldi	r24, 0x40	; 64
    bbe8:	90 e0       	ldi	r25, 0x00	; 0
    bbea:	f8 01       	movw	r30, r16
    bbec:	95 83       	std	Z+5, r25	; 0x05
    bbee:	84 83       	std	Z+4, r24	; 0x04
		player->feeling_my_way = 1;
    bbf0:	81 e0       	ldi	r24, 0x01	; 1
    bbf2:	8b 8f       	std	Y+27, r24	; 0x1b
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    bbf4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    bbf6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    bbf8:	80 31       	cpi	r24, 0x10	; 16
    bbfa:	91 05       	cpc	r25, r1
    bbfc:	19 f0       	breq	.+6      	; 0xbc04 <crash_and_turn+0x1cc>
    bbfe:	80 32       	cpi	r24, 0x20	; 32
    bc00:	91 05       	cpc	r25, r1
    bc02:	19 f4       	brne	.+6      	; 0xbc0a <crash_and_turn+0x1d2>
    bc04:	2e 8d       	ldd	r18, Y+30	; 0x1e
    bc06:	d2 16       	cp	r13, r18
    bc08:	59 f0       	breq	.+22     	; 0xbc20 <crash_and_turn+0x1e8>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    bc0a:	80 34       	cpi	r24, 0x40	; 64
    bc0c:	91 05       	cpc	r25, r1
    bc0e:	19 f0       	breq	.+6      	; 0xbc16 <crash_and_turn+0x1de>
    bc10:	80 38       	cpi	r24, 0x80	; 128
    bc12:	91 05       	cpc	r25, r1
    bc14:	39 f4       	brne	.+14     	; 0xbc24 <crash_and_turn+0x1ec>
    bc16:	81 e0       	ldi	r24, 0x01	; 1
    bc18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    bc1a:	e9 12       	cpse	r14, r25
    bc1c:	03 c0       	rjmp	.+6      	; 0xbc24 <crash_and_turn+0x1ec>
    bc1e:	03 c0       	rjmp	.+6      	; 0xbc26 <crash_and_turn+0x1ee>
	{
		p->held = BTN_LEFT;
		player->feeling_my_way = 1;
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    bc20:	81 e0       	ldi	r24, 0x01	; 1
    bc22:	01 c0       	rjmp	.+2      	; 0xbc26 <crash_and_turn+0x1ee>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    bc24:	80 e0       	ldi	r24, 0x00	; 0
}
    bc26:	df 91       	pop	r29
    bc28:	cf 91       	pop	r28
    bc2a:	1f 91       	pop	r17
    bc2c:	0f 91       	pop	r16
    bc2e:	ff 90       	pop	r15
    bc30:	ef 90       	pop	r14
    bc32:	df 90       	pop	r13
    bc34:	cf 90       	pop	r12
    bc36:	bf 90       	pop	r11
    bc38:	af 90       	pop	r10
    bc3a:	9f 90       	pop	r9
    bc3c:	8f 90       	pop	r8
    bc3e:	08 95       	ret

0000bc40 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    bc40:	48 2f       	mov	r20, r24
    bc42:	55 27       	eor	r21, r21
    bc44:	47 fd       	sbrc	r20, 7
    bc46:	50 95       	com	r21
    bc48:	57 ff       	sbrs	r21, 7
    bc4a:	03 c0       	rjmp	.+6      	; 0xbc52 <get_cpu_goal_direction+0x12>
    bc4c:	51 95       	neg	r21
    bc4e:	41 95       	neg	r20
    bc50:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    bc52:	26 2f       	mov	r18, r22
    bc54:	33 27       	eor	r19, r19
    bc56:	27 fd       	sbrc	r18, 7
    bc58:	30 95       	com	r19
    bc5a:	37 ff       	sbrs	r19, 7
    bc5c:	03 c0       	rjmp	.+6      	; 0xbc64 <get_cpu_goal_direction+0x24>
    bc5e:	31 95       	neg	r19
    bc60:	21 95       	neg	r18
    bc62:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    bc64:	24 17       	cp	r18, r20
    bc66:	2c f4       	brge	.+10     	; 0xbc72 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    bc68:	18 16       	cp	r1, r24
    bc6a:	44 f4       	brge	.+16     	; 0xbc7c <get_cpu_goal_direction+0x3c>
    bc6c:	80 e8       	ldi	r24, 0x80	; 128
    bc6e:	90 e0       	ldi	r25, 0x00	; 0
    bc70:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    bc72:	16 16       	cp	r1, r22
    bc74:	34 f4       	brge	.+12     	; 0xbc82 <get_cpu_goal_direction+0x42>
    bc76:	80 e2       	ldi	r24, 0x20	; 32
    bc78:	90 e0       	ldi	r25, 0x00	; 0
    bc7a:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    bc7c:	80 e4       	ldi	r24, 0x40	; 64
    bc7e:	90 e0       	ldi	r25, 0x00	; 0
    bc80:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    bc82:	80 e1       	ldi	r24, 0x10	; 16
    bc84:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    bc86:	08 95       	ret

0000bc88 <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    bc88:	2f 92       	push	r2
    bc8a:	3f 92       	push	r3
    bc8c:	4f 92       	push	r4
    bc8e:	5f 92       	push	r5
    bc90:	6f 92       	push	r6
    bc92:	7f 92       	push	r7
    bc94:	8f 92       	push	r8
    bc96:	9f 92       	push	r9
    bc98:	af 92       	push	r10
    bc9a:	bf 92       	push	r11
    bc9c:	cf 92       	push	r12
    bc9e:	df 92       	push	r13
    bca0:	ef 92       	push	r14
    bca2:	ff 92       	push	r15
    bca4:	0f 93       	push	r16
    bca6:	1f 93       	push	r17
    bca8:	cf 93       	push	r28
    bcaa:	df 93       	push	r29
    bcac:	00 d0       	rcall	.+0      	; 0xbcae <get_cpu_joypad_state+0x26>
    bcae:	00 d0       	rcall	.+0      	; 0xbcb0 <get_cpu_joypad_state+0x28>
    bcb0:	cd b7       	in	r28, 0x3d	; 61
    bcb2:	de b7       	in	r29, 0x3e	; 62
    bcb4:	1c 01       	movw	r2, r24
    bcb6:	8a 01       	movw	r16, r20
	char player_x;
	char player_y;
	static unsigned int deadlock_count_x = 0;
	static unsigned int deadlock_count_y = 0;
	
	goal_x = other_player->shared.x / 8;
    bcb8:	db 01       	movw	r26, r22
    bcba:	13 96       	adiw	r26, 0x03	; 3
    bcbc:	4d 90       	ld	r4, X+
    bcbe:	5d 90       	ld	r5, X+
    bcc0:	6d 90       	ld	r6, X+
    bcc2:	7c 90       	ld	r7, X
    bcc4:	16 97       	sbiw	r26, 0x06	; 6
	goal_y = other_player->shared.y / 8 - 3;
    bcc6:	17 96       	adiw	r26, 0x07	; 7
    bcc8:	8d 90       	ld	r8, X+
    bcca:	9d 90       	ld	r9, X+
    bccc:	ad 90       	ld	r10, X+
    bcce:	bc 90       	ld	r11, X
    bcd0:	1a 97       	sbiw	r26, 0x0a	; 10
	player_x = player->shared.x / 8;
    bcd2:	fc 01       	movw	r30, r24
    bcd4:	c3 80       	ldd	r12, Z+3	; 0x03
    bcd6:	d4 80       	ldd	r13, Z+4	; 0x04
    bcd8:	e5 80       	ldd	r14, Z+5	; 0x05
    bcda:	f6 80       	ldd	r15, Z+6	; 0x06
	player_y =  player->shared.y / 8 - 3;
    bcdc:	87 81       	ldd	r24, Z+7	; 0x07
    bcde:	90 85       	ldd	r25, Z+8	; 0x08
    bce0:	a1 85       	ldd	r26, Z+9	; 0x09
    bce2:	b2 85       	ldd	r27, Z+10	; 0x0a
    bce4:	89 83       	std	Y+1, r24	; 0x01
    bce6:	9a 83       	std	Y+2, r25	; 0x02
    bce8:	ab 83       	std	Y+3, r26	; 0x03
    bcea:	bc 83       	std	Y+4, r27	; 0x04
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    bcec:	87 89       	ldd	r24, Z+23	; 0x17
    bcee:	81 11       	cpse	r24, r1
    bcf0:	06 c0       	rjmp	.+12     	; 0xbcfe <get_cpu_joypad_state+0x76>
	{
		p->held = 0;
    bcf2:	da 01       	movw	r26, r20
    bcf4:	15 96       	adiw	r26, 0x05	; 5
    bcf6:	1c 92       	st	X, r1
    bcf8:	1e 92       	st	-X, r1
    bcfa:	14 97       	sbiw	r26, 0x04	; 4
		return;
    bcfc:	45 c1       	rjmp	.+650    	; 0xbf88 <get_cpu_joypad_state+0x300>
	}
	
	// Shot
	if (p->pressed & BTN_A)
    bcfe:	fa 01       	movw	r30, r20
    bd00:	80 81       	ld	r24, Z
    bd02:	91 81       	ldd	r25, Z+1	; 0x01
    bd04:	90 ff       	sbrs	r25, 0
    bd06:	02 c0       	rjmp	.+4      	; 0xbd0c <get_cpu_joypad_state+0x84>
	{
		p->pressed = 0;
    bd08:	11 82       	std	Z+1, r1	; 0x01
    bd0a:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    bd0c:	20 91 04 01 	lds	r18, 0x0104
    bd10:	30 91 05 01 	lds	r19, 0x0105
    bd14:	c9 01       	movw	r24, r18
    bd16:	6f e0       	ldi	r22, 0x0F	; 15
    bd18:	70 e0       	ldi	r23, 0x00	; 0
    bd1a:	0e 94 7d 60 	call	0xc0fa	; 0xc0fa <__udivmodhi4>
    bd1e:	89 2b       	or	r24, r25
    bd20:	51 f4       	brne	.+20     	; 0xbd36 <get_cpu_joypad_state+0xae>
    bd22:	d1 01       	movw	r26, r2
    bd24:	57 96       	adiw	r26, 0x17	; 23
    bd26:	8c 91       	ld	r24, X
    bd28:	83 33       	cpi	r24, 0x33	; 51
    bd2a:	28 f0       	brcs	.+10     	; 0xbd36 <get_cpu_joypad_state+0xae>
	{
		p->pressed = BTN_A;
    bd2c:	80 e0       	ldi	r24, 0x00	; 0
    bd2e:	91 e0       	ldi	r25, 0x01	; 1
    bd30:	f8 01       	movw	r30, r16
    bd32:	91 83       	std	Z+1, r25	; 0x01
    bd34:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    bd36:	c9 01       	movw	r24, r18
    bd38:	6c e2       	ldi	r22, 0x2C	; 44
    bd3a:	71 e0       	ldi	r23, 0x01	; 1
    bd3c:	0e 94 7d 60 	call	0xc0fa	; 0xc0fa <__udivmodhi4>
    bd40:	89 2b       	or	r24, r25
    bd42:	59 f0       	breq	.+22     	; 0xbd5a <get_cpu_joypad_state+0xd2>
    bd44:	d1 01       	movw	r26, r2
    bd46:	57 96       	adiw	r26, 0x17	; 23
    bd48:	8c 91       	ld	r24, X
    bd4a:	57 97       	sbiw	r26, 0x17	; 23
    bd4c:	8a 30       	cpi	r24, 0x0A	; 10
    bd4e:	29 f0       	breq	.+10     	; 0xbd5a <get_cpu_joypad_state+0xd2>
    bd50:	5f 96       	adiw	r26, 0x1f	; 31
    bd52:	8c 91       	ld	r24, X
    bd54:	88 23       	and	r24, r24
    bd56:	09 f4       	brne	.+2      	; 0xbd5a <get_cpu_joypad_state+0xd2>
    bd58:	78 c0       	rjmp	.+240    	; 0xbe4a <get_cpu_joypad_state+0x1c2>
	char player_x;
	char player_y;
	static unsigned int deadlock_count_x = 0;
	static unsigned int deadlock_count_y = 0;
	
	goal_x = other_player->shared.x / 8;
    bd5a:	20 e0       	ldi	r18, 0x00	; 0
    bd5c:	30 e0       	ldi	r19, 0x00	; 0
    bd5e:	40 e0       	ldi	r20, 0x00	; 0
    bd60:	5e e3       	ldi	r21, 0x3E	; 62
    bd62:	c3 01       	movw	r24, r6
    bd64:	b2 01       	movw	r22, r4
    bd66:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    bd6a:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <__fixsfsi>
    bd6e:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    bd70:	20 e0       	ldi	r18, 0x00	; 0
    bd72:	30 e0       	ldi	r19, 0x00	; 0
    bd74:	40 e0       	ldi	r20, 0x00	; 0
    bd76:	5e e3       	ldi	r21, 0x3E	; 62
    bd78:	c5 01       	movw	r24, r10
    bd7a:	b4 01       	movw	r22, r8
    bd7c:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    bd80:	20 e0       	ldi	r18, 0x00	; 0
    bd82:	30 e0       	ldi	r19, 0x00	; 0
    bd84:	40 e4       	ldi	r20, 0x40	; 64
    bd86:	50 e4       	ldi	r21, 0x40	; 64
    bd88:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    bd8c:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <__fixsfsi>
    bd90:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    bd92:	20 e0       	ldi	r18, 0x00	; 0
    bd94:	30 e0       	ldi	r19, 0x00	; 0
    bd96:	40 e0       	ldi	r20, 0x00	; 0
    bd98:	5e e3       	ldi	r21, 0x3E	; 62
    bd9a:	c7 01       	movw	r24, r14
    bd9c:	b6 01       	movw	r22, r12
    bd9e:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    bda2:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    bda6:	f7 2c       	mov	r15, r7
    bda8:	f6 1a       	sub	r15, r22
	static unsigned int deadlock_count_y = 0;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    bdaa:	20 e0       	ldi	r18, 0x00	; 0
    bdac:	30 e0       	ldi	r19, 0x00	; 0
    bdae:	40 e0       	ldi	r20, 0x00	; 0
    bdb0:	5e e3       	ldi	r21, 0x3E	; 62
    bdb2:	69 81       	ldd	r22, Y+1	; 0x01
    bdb4:	7a 81       	ldd	r23, Y+2	; 0x02
    bdb6:	8b 81       	ldd	r24, Y+3	; 0x03
    bdb8:	9c 81       	ldd	r25, Y+4	; 0x04
    bdba:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    bdbe:	20 e0       	ldi	r18, 0x00	; 0
    bdc0:	30 e0       	ldi	r19, 0x00	; 0
    bdc2:	40 e4       	ldi	r20, 0x40	; 64
    bdc4:	50 e4       	ldi	r21, 0x40	; 64
    bdc6:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    bdca:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    bdce:	bb 2d       	mov	r27, r11
    bdd0:	b6 1b       	sub	r27, r22
    bdd2:	6b 2f       	mov	r22, r27
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    bdd4:	f1 01       	movw	r30, r2
    bdd6:	17 8e       	std	Z+31, r1	; 0x1f
		player->feeling_my_way = 0;
    bdd8:	13 8e       	std	Z+27, r1	; 0x1b
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    bdda:	82 e0       	ldi	r24, 0x02	; 2
    bddc:	8f 0d       	add	r24, r15
    bdde:	85 30       	cpi	r24, 0x05	; 5
    bde0:	d0 f4       	brcc	.+52     	; 0xbe16 <get_cpu_joypad_state+0x18e>
    bde2:	be 3f       	cpi	r27, 0xFE	; 254
    bde4:	c4 f0       	brlt	.+48     	; 0xbe16 <get_cpu_joypad_state+0x18e>
    bde6:	b3 30       	cpi	r27, 0x03	; 3
    bde8:	b4 f4       	brge	.+44     	; 0xbe16 <get_cpu_joypad_state+0x18e>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    bdea:	64 e0       	ldi	r22, 0x04	; 4
    bdec:	70 e0       	ldi	r23, 0x00	; 0
    bdee:	80 e0       	ldi	r24, 0x00	; 0
    bdf0:	90 e0       	ldi	r25, 0x00	; 0
    bdf2:	0e 94 99 49 	call	0x9332	; 0x9332 <LBRandom>
    bdf6:	0e 94 06 5d 	call	0xba0c	; 0xba0c <button_map>
    bdfa:	d1 01       	movw	r26, r2
    bdfc:	5d 96       	adiw	r26, 0x1d	; 29
    bdfe:	9c 93       	st	X, r25
    be00:	8e 93       	st	-X, r24
    be02:	5c 97       	sbiw	r26, 0x1c	; 28
			player->goal = LBRandom(5, 18);
    be04:	62 e1       	ldi	r22, 0x12	; 18
    be06:	70 e0       	ldi	r23, 0x00	; 0
    be08:	85 e0       	ldi	r24, 0x05	; 5
    be0a:	90 e0       	ldi	r25, 0x00	; 0
    be0c:	0e 94 99 49 	call	0x9332	; 0x9332 <LBRandom>
    be10:	f1 01       	movw	r30, r2
    be12:	86 8f       	std	Z+30, r24	; 0x1e
    be14:	12 c0       	rjmp	.+36     	; 0xbe3a <get_cpu_joypad_state+0x1b2>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    be16:	8f 2d       	mov	r24, r15
    be18:	0e 94 20 5e 	call	0xbc40	; 0xbc40 <get_cpu_goal_direction>
    be1c:	d1 01       	movw	r26, r2
    be1e:	5d 96       	adiw	r26, 0x1d	; 29
    be20:	9c 93       	st	X, r25
    be22:	8e 93       	st	-X, r24
    be24:	5c 97       	sbiw	r26, 0x1c	; 28
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    be26:	80 31       	cpi	r24, 0x10	; 16
    be28:	91 05       	cpc	r25, r1
    be2a:	29 f0       	breq	.+10     	; 0xbe36 <get_cpu_joypad_state+0x1ae>
    be2c:	80 97       	sbiw	r24, 0x20	; 32
    be2e:	19 f0       	breq	.+6      	; 0xbe36 <get_cpu_joypad_state+0x1ae>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    be30:	5e 96       	adiw	r26, 0x1e	; 30
    be32:	7c 92       	st	X, r7
    be34:	02 c0       	rjmp	.+4      	; 0xbe3a <get_cpu_joypad_state+0x1b2>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    be36:	f1 01       	movw	r30, r2
    be38:	b6 8e       	std	Z+30, r11	; 0x1e
		}
		p->held = player->goal_direction;
    be3a:	d1 01       	movw	r26, r2
    be3c:	5c 96       	adiw	r26, 0x1c	; 28
    be3e:	8d 91       	ld	r24, X+
    be40:	9c 91       	ld	r25, X
    be42:	5d 97       	sbiw	r26, 0x1d	; 29
    be44:	f8 01       	movw	r30, r16
    be46:	95 83       	std	Z+5, r25	; 0x05
    be48:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    be4a:	d1 01       	movw	r26, r2
    be4c:	13 96       	adiw	r26, 0x03	; 3
    be4e:	cd 90       	ld	r12, X+
    be50:	dd 90       	ld	r13, X+
    be52:	ed 90       	ld	r14, X+
    be54:	fc 90       	ld	r15, X
    be56:	16 97       	sbiw	r26, 0x06	; 6
    be58:	90 96       	adiw	r26, 0x20	; 32
    be5a:	2d 91       	ld	r18, X+
    be5c:	3d 91       	ld	r19, X+
    be5e:	4d 91       	ld	r20, X+
    be60:	5c 91       	ld	r21, X
    be62:	93 97       	sbiw	r26, 0x23	; 35
    be64:	c7 01       	movw	r24, r14
    be66:	b6 01       	movw	r22, r12
    be68:	0e 94 10 61 	call	0xc220	; 0xc220 <__cmpsf2>
    be6c:	88 23       	and	r24, r24
    be6e:	29 f0       	breq	.+10     	; 0xbe7a <get_cpu_joypad_state+0x1f2>
		deadlock_count_x = 0;
    be70:	10 92 33 0b 	sts	0x0B33, r1
    be74:	10 92 32 0b 	sts	0x0B32, r1
    be78:	09 c0       	rjmp	.+18     	; 0xbe8c <get_cpu_joypad_state+0x204>
	else 
		deadlock_count_x++;
    be7a:	80 91 32 0b 	lds	r24, 0x0B32
    be7e:	90 91 33 0b 	lds	r25, 0x0B33
    be82:	01 96       	adiw	r24, 0x01	; 1
    be84:	90 93 33 0b 	sts	0x0B33, r25
    be88:	80 93 32 0b 	sts	0x0B32, r24
	if (player->shared.y != player->old_y)
    be8c:	f1 01       	movw	r30, r2
    be8e:	87 80       	ldd	r8, Z+7	; 0x07
    be90:	90 84       	ldd	r9, Z+8	; 0x08
    be92:	a1 84       	ldd	r10, Z+9	; 0x09
    be94:	b2 84       	ldd	r11, Z+10	; 0x0a
    be96:	24 a1       	ldd	r18, Z+36	; 0x24
    be98:	35 a1       	ldd	r19, Z+37	; 0x25
    be9a:	46 a1       	ldd	r20, Z+38	; 0x26
    be9c:	57 a1       	ldd	r21, Z+39	; 0x27
    be9e:	c5 01       	movw	r24, r10
    bea0:	b4 01       	movw	r22, r8
    bea2:	0e 94 10 61 	call	0xc220	; 0xc220 <__cmpsf2>
    bea6:	88 23       	and	r24, r24
    bea8:	29 f0       	breq	.+10     	; 0xbeb4 <get_cpu_joypad_state+0x22c>
		deadlock_count_y = 0;
    beaa:	10 92 31 0b 	sts	0x0B31, r1
    beae:	10 92 30 0b 	sts	0x0B30, r1
    beb2:	09 c0       	rjmp	.+18     	; 0xbec6 <get_cpu_joypad_state+0x23e>
	else
		deadlock_count_y++;
    beb4:	80 91 30 0b 	lds	r24, 0x0B30
    beb8:	90 91 31 0b 	lds	r25, 0x0B31
    bebc:	01 96       	adiw	r24, 0x01	; 1
    bebe:	90 93 31 0b 	sts	0x0B31, r25
    bec2:	80 93 30 0b 	sts	0x0B30, r24
	player->old_x = player->shared.x;
    bec6:	d1 01       	movw	r26, r2
    bec8:	90 96       	adiw	r26, 0x20	; 32
    beca:	cd 92       	st	X+, r12
    becc:	dd 92       	st	X+, r13
    bece:	ed 92       	st	X+, r14
    bed0:	fc 92       	st	X, r15
    bed2:	93 97       	sbiw	r26, 0x23	; 35
	player->old_y = player->shared.y;
    bed4:	f1 01       	movw	r30, r2
    bed6:	84 a2       	std	Z+36, r8	; 0x24
    bed8:	95 a2       	std	Z+37, r9	; 0x25
    beda:	a6 a2       	std	Z+38, r10	; 0x26
    bedc:	b7 a2       	std	Z+39, r11	; 0x27
	
	// Break tactical deadlock
	if (deadlock_count_x >= FRAMES_PER_DEADLOCK)
    bede:	80 91 32 0b 	lds	r24, 0x0B32
    bee2:	90 91 33 0b 	lds	r25, 0x0B33
    bee6:	80 34       	cpi	r24, 0x40	; 64
    bee8:	91 40       	sbci	r25, 0x01	; 1
    beea:	90 f0       	brcs	.+36     	; 0xbf10 <get_cpu_joypad_state+0x288>
	{
		p->held = button_map(LBRandom(0, 2));
    beec:	62 e0       	ldi	r22, 0x02	; 2
    beee:	70 e0       	ldi	r23, 0x00	; 0
    bef0:	80 e0       	ldi	r24, 0x00	; 0
    bef2:	90 e0       	ldi	r25, 0x00	; 0
    bef4:	0e 94 99 49 	call	0x9332	; 0x9332 <LBRandom>
    bef8:	0e 94 06 5d 	call	0xba0c	; 0xba0c <button_map>
    befc:	d8 01       	movw	r26, r16
    befe:	15 96       	adiw	r26, 0x05	; 5
    bf00:	9c 93       	st	X, r25
    bf02:	8e 93       	st	-X, r24
    bf04:	14 97       	sbiw	r26, 0x04	; 4
		deadlock_count_x = 0;
    bf06:	10 92 33 0b 	sts	0x0B33, r1
    bf0a:	10 92 32 0b 	sts	0x0B32, r1
    bf0e:	3c c0       	rjmp	.+120    	; 0xbf88 <get_cpu_joypad_state+0x300>
	}
	else if (deadlock_count_y >= FRAMES_PER_DEADLOCK)
    bf10:	80 91 30 0b 	lds	r24, 0x0B30
    bf14:	90 91 31 0b 	lds	r25, 0x0B31
    bf18:	80 34       	cpi	r24, 0x40	; 64
    bf1a:	91 40       	sbci	r25, 0x01	; 1
    bf1c:	80 f0       	brcs	.+32     	; 0xbf3e <get_cpu_joypad_state+0x2b6>
	{
		p->held = button_map(LBRandom(2, 4));
    bf1e:	64 e0       	ldi	r22, 0x04	; 4
    bf20:	70 e0       	ldi	r23, 0x00	; 0
    bf22:	82 e0       	ldi	r24, 0x02	; 2
    bf24:	90 e0       	ldi	r25, 0x00	; 0
    bf26:	0e 94 99 49 	call	0x9332	; 0x9332 <LBRandom>
    bf2a:	0e 94 06 5d 	call	0xba0c	; 0xba0c <button_map>
    bf2e:	f8 01       	movw	r30, r16
    bf30:	95 83       	std	Z+5, r25	; 0x05
    bf32:	84 83       	std	Z+4, r24	; 0x04
		deadlock_count_y = 0;
    bf34:	10 92 31 0b 	sts	0x0B31, r1
    bf38:	10 92 30 0b 	sts	0x0B30, r1
    bf3c:	25 c0       	rjmp	.+74     	; 0xbf88 <get_cpu_joypad_state+0x300>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    bf3e:	20 e0       	ldi	r18, 0x00	; 0
    bf40:	30 e0       	ldi	r19, 0x00	; 0
    bf42:	40 e0       	ldi	r20, 0x00	; 0
    bf44:	5e e3       	ldi	r21, 0x3E	; 62
    bf46:	c5 01       	movw	r24, r10
    bf48:	b4 01       	movw	r22, r8
    bf4a:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    bf4e:	20 e0       	ldi	r18, 0x00	; 0
    bf50:	30 e0       	ldi	r19, 0x00	; 0
    bf52:	40 e4       	ldi	r20, 0x40	; 64
    bf54:	50 e4       	ldi	r21, 0x40	; 64
    bf56:	0e 94 ab 60 	call	0xc156	; 0xc156 <__subsf3>
    bf5a:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <__fixsfsi>
    bf5e:	b6 2e       	mov	r11, r22
    bf60:	20 e0       	ldi	r18, 0x00	; 0
    bf62:	30 e0       	ldi	r19, 0x00	; 0
    bf64:	40 e0       	ldi	r20, 0x00	; 0
    bf66:	5e e3       	ldi	r21, 0x3E	; 62
    bf68:	c7 01       	movw	r24, r14
    bf6a:	b6 01       	movw	r22, r12
    bf6c:	0e 94 63 62 	call	0xc4c6	; 0xc4c6 <__mulsf3>
    bf70:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <__fixsfsi>
    bf74:	86 2f       	mov	r24, r22
    bf76:	91 01       	movw	r18, r2
    bf78:	d1 01       	movw	r26, r2
    bf7a:	12 96       	adiw	r26, 0x02	; 2
    bf7c:	4c 91       	ld	r20, X
    bf7e:	6b 2d       	mov	r22, r11
    bf80:	0e 94 1c 5d 	call	0xba38	; 0xba38 <crash_and_turn>
    bf84:	f1 01       	movw	r30, r2
    bf86:	87 8f       	std	Z+31, r24	; 0x1f
}
    bf88:	0f 90       	pop	r0
    bf8a:	0f 90       	pop	r0
    bf8c:	0f 90       	pop	r0
    bf8e:	0f 90       	pop	r0
    bf90:	df 91       	pop	r29
    bf92:	cf 91       	pop	r28
    bf94:	1f 91       	pop	r17
    bf96:	0f 91       	pop	r16
    bf98:	ff 90       	pop	r15
    bf9a:	ef 90       	pop	r14
    bf9c:	df 90       	pop	r13
    bf9e:	cf 90       	pop	r12
    bfa0:	bf 90       	pop	r11
    bfa2:	af 90       	pop	r10
    bfa4:	9f 90       	pop	r9
    bfa6:	8f 90       	pop	r8
    bfa8:	7f 90       	pop	r7
    bfaa:	6f 90       	pop	r6
    bfac:	5f 90       	pop	r5
    bfae:	4f 90       	pop	r4
    bfb0:	3f 90       	pop	r3
    bfb2:	2f 90       	pop	r2
    bfb4:	08 95       	ret

0000bfb6 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    bfb6:	86 e6       	ldi	r24, 0x66	; 102
    bfb8:	93 e0       	ldi	r25, 0x03	; 3
    bfba:	0e 94 b5 3b 	call	0x776a	; 0x776a <InitMusicPlayer>
	SetMasterVolume(0xff);
    bfbe:	8f ef       	ldi	r24, 0xFF	; 255
    bfc0:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <SetMasterVolume>
	SetTileTable(tiles_data);
    bfc4:	88 ef       	ldi	r24, 0xF8	; 248
    bfc6:	96 e4       	ldi	r25, 0x46	; 70
    bfc8:	0e 94 74 39 	call	0x72e8	; 0x72e8 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    bfcc:	88 ef       	ldi	r24, 0xF8	; 248
    bfce:	9a e3       	ldi	r25, 0x3A	; 58
    bfd0:	0e 94 50 39 	call	0x72a0	; 0x72a0 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    bfd4:	8f e2       	ldi	r24, 0x2F	; 47
    bfd6:	0e 94 71 39 	call	0x72e2	; 0x72e2 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    bfda:	60 e0       	ldi	r22, 0x00	; 0
    bfdc:	83 e0       	ldi	r24, 0x03	; 3
    bfde:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <FadeIn>
	ClearVram();
    bfe2:	0e 94 55 39 	call	0x72aa	; 0x72aa <ClearVram>
	init_scores(&scores);
    bfe6:	85 ec       	ldi	r24, 0xC5	; 197
    bfe8:	9b e0       	ldi	r25, 0x0B	; 11
    bfea:	0e 94 dd 49 	call	0x93ba	; 0x93ba <init_scores>
	init_handles(&handles);
    bfee:	8c ee       	ldi	r24, 0xEC	; 236
    bff0:	9b e0       	ldi	r25, 0x0B	; 11
    bff2:	0e 94 e9 49 	call	0x93d2	; 0x93d2 <init_handles>
	init_game_state();
    bff6:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <init_game_state>
	init_tile_animations(&tile_animations);
    bffa:	80 e1       	ldi	r24, 0x10	; 16
    bffc:	9c e0       	ldi	r25, 0x0C	; 12
    bffe:	0e 94 f5 49 	call	0x93ea	; 0x93ea <init_tile_animations>
	load_splash();
    c002:	0e 94 1f 56 	call	0xac3e	; 0xac3e <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    c006:	81 e0       	ldi	r24, 0x01	; 1
    c008:	90 e0       	ldi	r25, 0x00	; 0
    c00a:	0e 94 88 47 	call	0x8f10	; 0x8f10 <WaitVsync>
		switch (game.current_screen)
    c00e:	80 91 0c 0c 	lds	r24, 0x0C0C
    c012:	81 30       	cpi	r24, 0x01	; 1
    c014:	91 f0       	breq	.+36     	; 0xc03a <main+0x84>
    c016:	28 f0       	brcs	.+10     	; 0xc022 <main+0x6c>
    c018:	82 30       	cpi	r24, 0x02	; 2
    c01a:	d9 f0       	breq	.+54     	; 0xc052 <main+0x9c>
    c01c:	83 30       	cpi	r24, 0x03	; 3
    c01e:	51 f1       	breq	.+84     	; 0xc074 <main+0xbe>
    c020:	56 c0       	rjmp	.+172    	; 0xc0ce <main+0x118>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    c022:	60 e0       	ldi	r22, 0x00	; 0
    c024:	83 e9       	ldi	r24, 0x93	; 147
    c026:	9c e0       	ldi	r25, 0x0C	; 12
    c028:	0e 94 11 48 	call	0x9022	; 0x9022 <LBGetJoyPadState>
				update_splash(&p1, &p2);
    c02c:	65 ee       	ldi	r22, 0xE5	; 229
    c02e:	7b e0       	ldi	r23, 0x0B	; 11
    c030:	83 e9       	ldi	r24, 0x93	; 147
    c032:	9c e0       	ldi	r25, 0x0C	; 12
    c034:	0e 94 01 5c 	call	0xb802	; 0xb802 <update_splash>
				break;
    c038:	4a c0       	rjmp	.+148    	; 0xc0ce <main+0x118>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    c03a:	60 e0       	ldi	r22, 0x00	; 0
    c03c:	83 e9       	ldi	r24, 0x93	; 147
    c03e:	9c e0       	ldi	r25, 0x0C	; 12
    c040:	0e 94 11 48 	call	0x9022	; 0x9022 <LBGetJoyPadState>
				update_tank_rank(&p1, &p2);
    c044:	65 ee       	ldi	r22, 0xE5	; 229
    c046:	7b e0       	ldi	r23, 0x0B	; 11
    c048:	83 e9       	ldi	r24, 0x93	; 147
    c04a:	9c e0       	ldi	r25, 0x0C	; 12
    c04c:	0e 94 e6 59 	call	0xb3cc	; 0xb3cc <update_tank_rank>
				break;
    c050:	3e c0       	rjmp	.+124    	; 0xc0ce <main+0x118>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    c052:	60 e0       	ldi	r22, 0x00	; 0
    c054:	83 e9       	ldi	r24, 0x93	; 147
    c056:	9c e0       	ldi	r25, 0x0C	; 12
    c058:	0e 94 11 48 	call	0x9022	; 0x9022 <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    c05c:	61 e0       	ldi	r22, 0x01	; 1
    c05e:	85 ee       	ldi	r24, 0xE5	; 229
    c060:	9b e0       	ldi	r25, 0x0B	; 11
    c062:	0e 94 11 48 	call	0x9022	; 0x9022 <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    c066:	65 ee       	ldi	r22, 0xE5	; 229
    c068:	7b e0       	ldi	r23, 0x0B	; 11
    c06a:	83 e9       	ldi	r24, 0x93	; 147
    c06c:	9c e0       	ldi	r25, 0x0C	; 12
    c06e:	0e 94 b8 5c 	call	0xb970	; 0xb970 <update_handle_select>
				break;
    c072:	2d c0       	rjmp	.+90     	; 0xc0ce <main+0x118>
			case LEVEL:
				if (game.selection == PVCPU)
    c074:	80 91 0f 0c 	lds	r24, 0x0C0F
    c078:	81 11       	cpse	r24, r1
    c07a:	06 c0       	rjmp	.+12     	; 0xc088 <main+0xd2>
				{
					LBGetJoyPadState(&p1, 0);
    c07c:	60 e0       	ldi	r22, 0x00	; 0
    c07e:	83 e9       	ldi	r24, 0x93	; 147
    c080:	9c e0       	ldi	r25, 0x0C	; 12
    c082:	0e 94 11 48 	call	0x9022	; 0x9022 <LBGetJoyPadState>
    c086:	0a c0       	rjmp	.+20     	; 0xc09c <main+0xe6>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    c088:	83 30       	cpi	r24, 0x03	; 3
    c08a:	89 f4       	brne	.+34     	; 0xc0ae <main+0xf8>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    c08c:	43 e9       	ldi	r20, 0x93	; 147
    c08e:	5c e0       	ldi	r21, 0x0C	; 12
    c090:	69 e8       	ldi	r22, 0x89	; 137
    c092:	7f e0       	ldi	r23, 0x0F	; 15
    c094:	89 e2       	ldi	r24, 0x29	; 41
    c096:	9c e0       	ldi	r25, 0x0C	; 12
    c098:	0e 94 44 5e 	call	0xbc88	; 0xbc88 <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    c09c:	45 ee       	ldi	r20, 0xE5	; 229
    c09e:	5b e0       	ldi	r21, 0x0B	; 11
    c0a0:	69 e2       	ldi	r22, 0x29	; 41
    c0a2:	7c e0       	ldi	r23, 0x0C	; 12
    c0a4:	89 e8       	ldi	r24, 0x89	; 137
    c0a6:	9f e0       	ldi	r25, 0x0F	; 15
    c0a8:	0e 94 44 5e 	call	0xbc88	; 0xbc88 <get_cpu_joypad_state>
    c0ac:	0a c0       	rjmp	.+20     	; 0xc0c2 <main+0x10c>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    c0ae:	60 e0       	ldi	r22, 0x00	; 0
    c0b0:	83 e9       	ldi	r24, 0x93	; 147
    c0b2:	9c e0       	ldi	r25, 0x0C	; 12
    c0b4:	0e 94 11 48 	call	0x9022	; 0x9022 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    c0b8:	61 e0       	ldi	r22, 0x01	; 1
    c0ba:	85 ee       	ldi	r24, 0xE5	; 229
    c0bc:	9b e0       	ldi	r25, 0x0B	; 11
    c0be:	0e 94 11 48 	call	0x9022	; 0x9022 <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    c0c2:	65 ee       	ldi	r22, 0xE5	; 229
    c0c4:	7b e0       	ldi	r23, 0x0B	; 11
    c0c6:	83 e9       	ldi	r24, 0x93	; 147
    c0c8:	9c e0       	ldi	r25, 0x0C	; 12
    c0ca:	0e 94 20 59 	call	0xb240	; 0xb240 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    c0ce:	80 91 04 01 	lds	r24, 0x0104
    c0d2:	90 91 05 01 	lds	r25, 0x0105
    c0d6:	01 96       	adiw	r24, 0x01	; 1
    c0d8:	90 93 05 01 	sts	0x0105, r25
    c0dc:	80 93 04 01 	sts	0x0104, r24
	}
    c0e0:	92 cf       	rjmp	.-220    	; 0xc006 <main+0x50>

0000c0e2 <__udivmodqi4>:
    c0e2:	99 1b       	sub	r25, r25
    c0e4:	79 e0       	ldi	r23, 0x09	; 9
    c0e6:	04 c0       	rjmp	.+8      	; 0xc0f0 <__udivmodqi4_ep>

0000c0e8 <__udivmodqi4_loop>:
    c0e8:	99 1f       	adc	r25, r25
    c0ea:	96 17       	cp	r25, r22
    c0ec:	08 f0       	brcs	.+2      	; 0xc0f0 <__udivmodqi4_ep>
    c0ee:	96 1b       	sub	r25, r22

0000c0f0 <__udivmodqi4_ep>:
    c0f0:	88 1f       	adc	r24, r24
    c0f2:	7a 95       	dec	r23
    c0f4:	c9 f7       	brne	.-14     	; 0xc0e8 <__udivmodqi4_loop>
    c0f6:	80 95       	com	r24
    c0f8:	08 95       	ret

0000c0fa <__udivmodhi4>:
    c0fa:	aa 1b       	sub	r26, r26
    c0fc:	bb 1b       	sub	r27, r27
    c0fe:	51 e1       	ldi	r21, 0x11	; 17
    c100:	07 c0       	rjmp	.+14     	; 0xc110 <__udivmodhi4_ep>

0000c102 <__udivmodhi4_loop>:
    c102:	aa 1f       	adc	r26, r26
    c104:	bb 1f       	adc	r27, r27
    c106:	a6 17       	cp	r26, r22
    c108:	b7 07       	cpc	r27, r23
    c10a:	10 f0       	brcs	.+4      	; 0xc110 <__udivmodhi4_ep>
    c10c:	a6 1b       	sub	r26, r22
    c10e:	b7 0b       	sbc	r27, r23

0000c110 <__udivmodhi4_ep>:
    c110:	88 1f       	adc	r24, r24
    c112:	99 1f       	adc	r25, r25
    c114:	5a 95       	dec	r21
    c116:	a9 f7       	brne	.-22     	; 0xc102 <__udivmodhi4_loop>
    c118:	80 95       	com	r24
    c11a:	90 95       	com	r25
    c11c:	bc 01       	movw	r22, r24
    c11e:	cd 01       	movw	r24, r26
    c120:	08 95       	ret

0000c122 <__divmodhi4>:
    c122:	97 fb       	bst	r25, 7
    c124:	07 2e       	mov	r0, r23
    c126:	16 f4       	brtc	.+4      	; 0xc12c <__divmodhi4+0xa>
    c128:	00 94       	com	r0
    c12a:	07 d0       	rcall	.+14     	; 0xc13a <__divmodhi4_neg1>
    c12c:	77 fd       	sbrc	r23, 7
    c12e:	09 d0       	rcall	.+18     	; 0xc142 <__divmodhi4_neg2>
    c130:	0e 94 7d 60 	call	0xc0fa	; 0xc0fa <__udivmodhi4>
    c134:	07 fc       	sbrc	r0, 7
    c136:	05 d0       	rcall	.+10     	; 0xc142 <__divmodhi4_neg2>
    c138:	3e f4       	brtc	.+14     	; 0xc148 <__divmodhi4_exit>

0000c13a <__divmodhi4_neg1>:
    c13a:	90 95       	com	r25
    c13c:	81 95       	neg	r24
    c13e:	9f 4f       	sbci	r25, 0xFF	; 255
    c140:	08 95       	ret

0000c142 <__divmodhi4_neg2>:
    c142:	70 95       	com	r23
    c144:	61 95       	neg	r22
    c146:	7f 4f       	sbci	r23, 0xFF	; 255

0000c148 <__divmodhi4_exit>:
    c148:	08 95       	ret

0000c14a <__tablejump2__>:
    c14a:	ee 0f       	add	r30, r30
    c14c:	ff 1f       	adc	r31, r31
    c14e:	05 90       	lpm	r0, Z+
    c150:	f4 91       	lpm	r31, Z
    c152:	e0 2d       	mov	r30, r0
    c154:	09 94       	ijmp

0000c156 <__subsf3>:
    c156:	50 58       	subi	r21, 0x80	; 128

0000c158 <__addsf3>:
    c158:	bb 27       	eor	r27, r27
    c15a:	aa 27       	eor	r26, r26
    c15c:	0e d0       	rcall	.+28     	; 0xc17a <__addsf3x>
    c15e:	75 c1       	rjmp	.+746    	; 0xc44a <__fp_round>
    c160:	66 d1       	rcall	.+716    	; 0xc42e <__fp_pscA>
    c162:	30 f0       	brcs	.+12     	; 0xc170 <__addsf3+0x18>
    c164:	6b d1       	rcall	.+726    	; 0xc43c <__fp_pscB>
    c166:	20 f0       	brcs	.+8      	; 0xc170 <__addsf3+0x18>
    c168:	31 f4       	brne	.+12     	; 0xc176 <__addsf3+0x1e>
    c16a:	9f 3f       	cpi	r25, 0xFF	; 255
    c16c:	11 f4       	brne	.+4      	; 0xc172 <__addsf3+0x1a>
    c16e:	1e f4       	brtc	.+6      	; 0xc176 <__addsf3+0x1e>
    c170:	5b c1       	rjmp	.+694    	; 0xc428 <__fp_nan>
    c172:	0e f4       	brtc	.+2      	; 0xc176 <__addsf3+0x1e>
    c174:	e0 95       	com	r30
    c176:	e7 fb       	bst	r30, 7
    c178:	51 c1       	rjmp	.+674    	; 0xc41c <__fp_inf>

0000c17a <__addsf3x>:
    c17a:	e9 2f       	mov	r30, r25
    c17c:	77 d1       	rcall	.+750    	; 0xc46c <__fp_split3>
    c17e:	80 f3       	brcs	.-32     	; 0xc160 <__addsf3+0x8>
    c180:	ba 17       	cp	r27, r26
    c182:	62 07       	cpc	r22, r18
    c184:	73 07       	cpc	r23, r19
    c186:	84 07       	cpc	r24, r20
    c188:	95 07       	cpc	r25, r21
    c18a:	18 f0       	brcs	.+6      	; 0xc192 <__addsf3x+0x18>
    c18c:	71 f4       	brne	.+28     	; 0xc1aa <__addsf3x+0x30>
    c18e:	9e f5       	brtc	.+102    	; 0xc1f6 <__addsf3x+0x7c>
    c190:	8f c1       	rjmp	.+798    	; 0xc4b0 <__fp_zero>
    c192:	0e f4       	brtc	.+2      	; 0xc196 <__addsf3x+0x1c>
    c194:	e0 95       	com	r30
    c196:	0b 2e       	mov	r0, r27
    c198:	ba 2f       	mov	r27, r26
    c19a:	a0 2d       	mov	r26, r0
    c19c:	0b 01       	movw	r0, r22
    c19e:	b9 01       	movw	r22, r18
    c1a0:	90 01       	movw	r18, r0
    c1a2:	0c 01       	movw	r0, r24
    c1a4:	ca 01       	movw	r24, r20
    c1a6:	a0 01       	movw	r20, r0
    c1a8:	11 24       	eor	r1, r1
    c1aa:	ff 27       	eor	r31, r31
    c1ac:	59 1b       	sub	r21, r25
    c1ae:	99 f0       	breq	.+38     	; 0xc1d6 <__addsf3x+0x5c>
    c1b0:	59 3f       	cpi	r21, 0xF9	; 249
    c1b2:	50 f4       	brcc	.+20     	; 0xc1c8 <__addsf3x+0x4e>
    c1b4:	50 3e       	cpi	r21, 0xE0	; 224
    c1b6:	68 f1       	brcs	.+90     	; 0xc212 <__addsf3x+0x98>
    c1b8:	1a 16       	cp	r1, r26
    c1ba:	f0 40       	sbci	r31, 0x00	; 0
    c1bc:	a2 2f       	mov	r26, r18
    c1be:	23 2f       	mov	r18, r19
    c1c0:	34 2f       	mov	r19, r20
    c1c2:	44 27       	eor	r20, r20
    c1c4:	58 5f       	subi	r21, 0xF8	; 248
    c1c6:	f3 cf       	rjmp	.-26     	; 0xc1ae <__addsf3x+0x34>
    c1c8:	46 95       	lsr	r20
    c1ca:	37 95       	ror	r19
    c1cc:	27 95       	ror	r18
    c1ce:	a7 95       	ror	r26
    c1d0:	f0 40       	sbci	r31, 0x00	; 0
    c1d2:	53 95       	inc	r21
    c1d4:	c9 f7       	brne	.-14     	; 0xc1c8 <__addsf3x+0x4e>
    c1d6:	7e f4       	brtc	.+30     	; 0xc1f6 <__addsf3x+0x7c>
    c1d8:	1f 16       	cp	r1, r31
    c1da:	ba 0b       	sbc	r27, r26
    c1dc:	62 0b       	sbc	r22, r18
    c1de:	73 0b       	sbc	r23, r19
    c1e0:	84 0b       	sbc	r24, r20
    c1e2:	ba f0       	brmi	.+46     	; 0xc212 <__addsf3x+0x98>
    c1e4:	91 50       	subi	r25, 0x01	; 1
    c1e6:	a1 f0       	breq	.+40     	; 0xc210 <__addsf3x+0x96>
    c1e8:	ff 0f       	add	r31, r31
    c1ea:	bb 1f       	adc	r27, r27
    c1ec:	66 1f       	adc	r22, r22
    c1ee:	77 1f       	adc	r23, r23
    c1f0:	88 1f       	adc	r24, r24
    c1f2:	c2 f7       	brpl	.-16     	; 0xc1e4 <__addsf3x+0x6a>
    c1f4:	0e c0       	rjmp	.+28     	; 0xc212 <__addsf3x+0x98>
    c1f6:	ba 0f       	add	r27, r26
    c1f8:	62 1f       	adc	r22, r18
    c1fa:	73 1f       	adc	r23, r19
    c1fc:	84 1f       	adc	r24, r20
    c1fe:	48 f4       	brcc	.+18     	; 0xc212 <__addsf3x+0x98>
    c200:	87 95       	ror	r24
    c202:	77 95       	ror	r23
    c204:	67 95       	ror	r22
    c206:	b7 95       	ror	r27
    c208:	f7 95       	ror	r31
    c20a:	9e 3f       	cpi	r25, 0xFE	; 254
    c20c:	08 f0       	brcs	.+2      	; 0xc210 <__addsf3x+0x96>
    c20e:	b3 cf       	rjmp	.-154    	; 0xc176 <__addsf3+0x1e>
    c210:	93 95       	inc	r25
    c212:	88 0f       	add	r24, r24
    c214:	08 f0       	brcs	.+2      	; 0xc218 <__addsf3x+0x9e>
    c216:	99 27       	eor	r25, r25
    c218:	ee 0f       	add	r30, r30
    c21a:	97 95       	ror	r25
    c21c:	87 95       	ror	r24
    c21e:	08 95       	ret

0000c220 <__cmpsf2>:
    c220:	d9 d0       	rcall	.+434    	; 0xc3d4 <__fp_cmp>
    c222:	08 f4       	brcc	.+2      	; 0xc226 <__cmpsf2+0x6>
    c224:	81 e0       	ldi	r24, 0x01	; 1
    c226:	08 95       	ret

0000c228 <__divsf3>:
    c228:	0c d0       	rcall	.+24     	; 0xc242 <__divsf3x>
    c22a:	0f c1       	rjmp	.+542    	; 0xc44a <__fp_round>
    c22c:	07 d1       	rcall	.+526    	; 0xc43c <__fp_pscB>
    c22e:	40 f0       	brcs	.+16     	; 0xc240 <__divsf3+0x18>
    c230:	fe d0       	rcall	.+508    	; 0xc42e <__fp_pscA>
    c232:	30 f0       	brcs	.+12     	; 0xc240 <__divsf3+0x18>
    c234:	21 f4       	brne	.+8      	; 0xc23e <__divsf3+0x16>
    c236:	5f 3f       	cpi	r21, 0xFF	; 255
    c238:	19 f0       	breq	.+6      	; 0xc240 <__divsf3+0x18>
    c23a:	f0 c0       	rjmp	.+480    	; 0xc41c <__fp_inf>
    c23c:	51 11       	cpse	r21, r1
    c23e:	39 c1       	rjmp	.+626    	; 0xc4b2 <__fp_szero>
    c240:	f3 c0       	rjmp	.+486    	; 0xc428 <__fp_nan>

0000c242 <__divsf3x>:
    c242:	14 d1       	rcall	.+552    	; 0xc46c <__fp_split3>
    c244:	98 f3       	brcs	.-26     	; 0xc22c <__divsf3+0x4>

0000c246 <__divsf3_pse>:
    c246:	99 23       	and	r25, r25
    c248:	c9 f3       	breq	.-14     	; 0xc23c <__divsf3+0x14>
    c24a:	55 23       	and	r21, r21
    c24c:	b1 f3       	breq	.-20     	; 0xc23a <__divsf3+0x12>
    c24e:	95 1b       	sub	r25, r21
    c250:	55 0b       	sbc	r21, r21
    c252:	bb 27       	eor	r27, r27
    c254:	aa 27       	eor	r26, r26
    c256:	62 17       	cp	r22, r18
    c258:	73 07       	cpc	r23, r19
    c25a:	84 07       	cpc	r24, r20
    c25c:	38 f0       	brcs	.+14     	; 0xc26c <__divsf3_pse+0x26>
    c25e:	9f 5f       	subi	r25, 0xFF	; 255
    c260:	5f 4f       	sbci	r21, 0xFF	; 255
    c262:	22 0f       	add	r18, r18
    c264:	33 1f       	adc	r19, r19
    c266:	44 1f       	adc	r20, r20
    c268:	aa 1f       	adc	r26, r26
    c26a:	a9 f3       	breq	.-22     	; 0xc256 <__divsf3_pse+0x10>
    c26c:	33 d0       	rcall	.+102    	; 0xc2d4 <__divsf3_pse+0x8e>
    c26e:	0e 2e       	mov	r0, r30
    c270:	3a f0       	brmi	.+14     	; 0xc280 <__divsf3_pse+0x3a>
    c272:	e0 e8       	ldi	r30, 0x80	; 128
    c274:	30 d0       	rcall	.+96     	; 0xc2d6 <__divsf3_pse+0x90>
    c276:	91 50       	subi	r25, 0x01	; 1
    c278:	50 40       	sbci	r21, 0x00	; 0
    c27a:	e6 95       	lsr	r30
    c27c:	00 1c       	adc	r0, r0
    c27e:	ca f7       	brpl	.-14     	; 0xc272 <__divsf3_pse+0x2c>
    c280:	29 d0       	rcall	.+82     	; 0xc2d4 <__divsf3_pse+0x8e>
    c282:	fe 2f       	mov	r31, r30
    c284:	27 d0       	rcall	.+78     	; 0xc2d4 <__divsf3_pse+0x8e>
    c286:	66 0f       	add	r22, r22
    c288:	77 1f       	adc	r23, r23
    c28a:	88 1f       	adc	r24, r24
    c28c:	bb 1f       	adc	r27, r27
    c28e:	26 17       	cp	r18, r22
    c290:	37 07       	cpc	r19, r23
    c292:	48 07       	cpc	r20, r24
    c294:	ab 07       	cpc	r26, r27
    c296:	b0 e8       	ldi	r27, 0x80	; 128
    c298:	09 f0       	breq	.+2      	; 0xc29c <__divsf3_pse+0x56>
    c29a:	bb 0b       	sbc	r27, r27
    c29c:	80 2d       	mov	r24, r0
    c29e:	bf 01       	movw	r22, r30
    c2a0:	ff 27       	eor	r31, r31
    c2a2:	93 58       	subi	r25, 0x83	; 131
    c2a4:	5f 4f       	sbci	r21, 0xFF	; 255
    c2a6:	2a f0       	brmi	.+10     	; 0xc2b2 <__divsf3_pse+0x6c>
    c2a8:	9e 3f       	cpi	r25, 0xFE	; 254
    c2aa:	51 05       	cpc	r21, r1
    c2ac:	68 f0       	brcs	.+26     	; 0xc2c8 <__divsf3_pse+0x82>
    c2ae:	b6 c0       	rjmp	.+364    	; 0xc41c <__fp_inf>
    c2b0:	00 c1       	rjmp	.+512    	; 0xc4b2 <__fp_szero>
    c2b2:	5f 3f       	cpi	r21, 0xFF	; 255
    c2b4:	ec f3       	brlt	.-6      	; 0xc2b0 <__divsf3_pse+0x6a>
    c2b6:	98 3e       	cpi	r25, 0xE8	; 232
    c2b8:	dc f3       	brlt	.-10     	; 0xc2b0 <__divsf3_pse+0x6a>
    c2ba:	86 95       	lsr	r24
    c2bc:	77 95       	ror	r23
    c2be:	67 95       	ror	r22
    c2c0:	b7 95       	ror	r27
    c2c2:	f7 95       	ror	r31
    c2c4:	9f 5f       	subi	r25, 0xFF	; 255
    c2c6:	c9 f7       	brne	.-14     	; 0xc2ba <__divsf3_pse+0x74>
    c2c8:	88 0f       	add	r24, r24
    c2ca:	91 1d       	adc	r25, r1
    c2cc:	96 95       	lsr	r25
    c2ce:	87 95       	ror	r24
    c2d0:	97 f9       	bld	r25, 7
    c2d2:	08 95       	ret
    c2d4:	e1 e0       	ldi	r30, 0x01	; 1
    c2d6:	66 0f       	add	r22, r22
    c2d8:	77 1f       	adc	r23, r23
    c2da:	88 1f       	adc	r24, r24
    c2dc:	bb 1f       	adc	r27, r27
    c2de:	62 17       	cp	r22, r18
    c2e0:	73 07       	cpc	r23, r19
    c2e2:	84 07       	cpc	r24, r20
    c2e4:	ba 07       	cpc	r27, r26
    c2e6:	20 f0       	brcs	.+8      	; 0xc2f0 <__divsf3_pse+0xaa>
    c2e8:	62 1b       	sub	r22, r18
    c2ea:	73 0b       	sbc	r23, r19
    c2ec:	84 0b       	sbc	r24, r20
    c2ee:	ba 0b       	sbc	r27, r26
    c2f0:	ee 1f       	adc	r30, r30
    c2f2:	88 f7       	brcc	.-30     	; 0xc2d6 <__divsf3_pse+0x90>
    c2f4:	e0 95       	com	r30
    c2f6:	08 95       	ret

0000c2f8 <__fixsfsi>:
    c2f8:	04 d0       	rcall	.+8      	; 0xc302 <__fixunssfsi>
    c2fa:	68 94       	set
    c2fc:	b1 11       	cpse	r27, r1
    c2fe:	d9 c0       	rjmp	.+434    	; 0xc4b2 <__fp_szero>
    c300:	08 95       	ret

0000c302 <__fixunssfsi>:
    c302:	bc d0       	rcall	.+376    	; 0xc47c <__fp_splitA>
    c304:	88 f0       	brcs	.+34     	; 0xc328 <__fixunssfsi+0x26>
    c306:	9f 57       	subi	r25, 0x7F	; 127
    c308:	90 f0       	brcs	.+36     	; 0xc32e <__fixunssfsi+0x2c>
    c30a:	b9 2f       	mov	r27, r25
    c30c:	99 27       	eor	r25, r25
    c30e:	b7 51       	subi	r27, 0x17	; 23
    c310:	a0 f0       	brcs	.+40     	; 0xc33a <__fixunssfsi+0x38>
    c312:	d1 f0       	breq	.+52     	; 0xc348 <__fixunssfsi+0x46>
    c314:	66 0f       	add	r22, r22
    c316:	77 1f       	adc	r23, r23
    c318:	88 1f       	adc	r24, r24
    c31a:	99 1f       	adc	r25, r25
    c31c:	1a f0       	brmi	.+6      	; 0xc324 <__fixunssfsi+0x22>
    c31e:	ba 95       	dec	r27
    c320:	c9 f7       	brne	.-14     	; 0xc314 <__fixunssfsi+0x12>
    c322:	12 c0       	rjmp	.+36     	; 0xc348 <__fixunssfsi+0x46>
    c324:	b1 30       	cpi	r27, 0x01	; 1
    c326:	81 f0       	breq	.+32     	; 0xc348 <__fixunssfsi+0x46>
    c328:	c3 d0       	rcall	.+390    	; 0xc4b0 <__fp_zero>
    c32a:	b1 e0       	ldi	r27, 0x01	; 1
    c32c:	08 95       	ret
    c32e:	c0 c0       	rjmp	.+384    	; 0xc4b0 <__fp_zero>
    c330:	67 2f       	mov	r22, r23
    c332:	78 2f       	mov	r23, r24
    c334:	88 27       	eor	r24, r24
    c336:	b8 5f       	subi	r27, 0xF8	; 248
    c338:	39 f0       	breq	.+14     	; 0xc348 <__fixunssfsi+0x46>
    c33a:	b9 3f       	cpi	r27, 0xF9	; 249
    c33c:	cc f3       	brlt	.-14     	; 0xc330 <__fixunssfsi+0x2e>
    c33e:	86 95       	lsr	r24
    c340:	77 95       	ror	r23
    c342:	67 95       	ror	r22
    c344:	b3 95       	inc	r27
    c346:	d9 f7       	brne	.-10     	; 0xc33e <__fixunssfsi+0x3c>
    c348:	3e f4       	brtc	.+14     	; 0xc358 <__fixunssfsi+0x56>
    c34a:	90 95       	com	r25
    c34c:	80 95       	com	r24
    c34e:	70 95       	com	r23
    c350:	61 95       	neg	r22
    c352:	7f 4f       	sbci	r23, 0xFF	; 255
    c354:	8f 4f       	sbci	r24, 0xFF	; 255
    c356:	9f 4f       	sbci	r25, 0xFF	; 255
    c358:	08 95       	ret

0000c35a <__floatunsisf>:
    c35a:	e8 94       	clt
    c35c:	09 c0       	rjmp	.+18     	; 0xc370 <__floatsisf+0x12>

0000c35e <__floatsisf>:
    c35e:	97 fb       	bst	r25, 7
    c360:	3e f4       	brtc	.+14     	; 0xc370 <__floatsisf+0x12>
    c362:	90 95       	com	r25
    c364:	80 95       	com	r24
    c366:	70 95       	com	r23
    c368:	61 95       	neg	r22
    c36a:	7f 4f       	sbci	r23, 0xFF	; 255
    c36c:	8f 4f       	sbci	r24, 0xFF	; 255
    c36e:	9f 4f       	sbci	r25, 0xFF	; 255
    c370:	99 23       	and	r25, r25
    c372:	a9 f0       	breq	.+42     	; 0xc39e <__floatsisf+0x40>
    c374:	f9 2f       	mov	r31, r25
    c376:	96 e9       	ldi	r25, 0x96	; 150
    c378:	bb 27       	eor	r27, r27
    c37a:	93 95       	inc	r25
    c37c:	f6 95       	lsr	r31
    c37e:	87 95       	ror	r24
    c380:	77 95       	ror	r23
    c382:	67 95       	ror	r22
    c384:	b7 95       	ror	r27
    c386:	f1 11       	cpse	r31, r1
    c388:	f8 cf       	rjmp	.-16     	; 0xc37a <__floatsisf+0x1c>
    c38a:	fa f4       	brpl	.+62     	; 0xc3ca <__floatsisf+0x6c>
    c38c:	bb 0f       	add	r27, r27
    c38e:	11 f4       	brne	.+4      	; 0xc394 <__floatsisf+0x36>
    c390:	60 ff       	sbrs	r22, 0
    c392:	1b c0       	rjmp	.+54     	; 0xc3ca <__floatsisf+0x6c>
    c394:	6f 5f       	subi	r22, 0xFF	; 255
    c396:	7f 4f       	sbci	r23, 0xFF	; 255
    c398:	8f 4f       	sbci	r24, 0xFF	; 255
    c39a:	9f 4f       	sbci	r25, 0xFF	; 255
    c39c:	16 c0       	rjmp	.+44     	; 0xc3ca <__floatsisf+0x6c>
    c39e:	88 23       	and	r24, r24
    c3a0:	11 f0       	breq	.+4      	; 0xc3a6 <__floatsisf+0x48>
    c3a2:	96 e9       	ldi	r25, 0x96	; 150
    c3a4:	11 c0       	rjmp	.+34     	; 0xc3c8 <__floatsisf+0x6a>
    c3a6:	77 23       	and	r23, r23
    c3a8:	21 f0       	breq	.+8      	; 0xc3b2 <__floatsisf+0x54>
    c3aa:	9e e8       	ldi	r25, 0x8E	; 142
    c3ac:	87 2f       	mov	r24, r23
    c3ae:	76 2f       	mov	r23, r22
    c3b0:	05 c0       	rjmp	.+10     	; 0xc3bc <__floatsisf+0x5e>
    c3b2:	66 23       	and	r22, r22
    c3b4:	71 f0       	breq	.+28     	; 0xc3d2 <__floatsisf+0x74>
    c3b6:	96 e8       	ldi	r25, 0x86	; 134
    c3b8:	86 2f       	mov	r24, r22
    c3ba:	70 e0       	ldi	r23, 0x00	; 0
    c3bc:	60 e0       	ldi	r22, 0x00	; 0
    c3be:	2a f0       	brmi	.+10     	; 0xc3ca <__floatsisf+0x6c>
    c3c0:	9a 95       	dec	r25
    c3c2:	66 0f       	add	r22, r22
    c3c4:	77 1f       	adc	r23, r23
    c3c6:	88 1f       	adc	r24, r24
    c3c8:	da f7       	brpl	.-10     	; 0xc3c0 <__floatsisf+0x62>
    c3ca:	88 0f       	add	r24, r24
    c3cc:	96 95       	lsr	r25
    c3ce:	87 95       	ror	r24
    c3d0:	97 f9       	bld	r25, 7
    c3d2:	08 95       	ret

0000c3d4 <__fp_cmp>:
    c3d4:	99 0f       	add	r25, r25
    c3d6:	00 08       	sbc	r0, r0
    c3d8:	55 0f       	add	r21, r21
    c3da:	aa 0b       	sbc	r26, r26
    c3dc:	e0 e8       	ldi	r30, 0x80	; 128
    c3de:	fe ef       	ldi	r31, 0xFE	; 254
    c3e0:	16 16       	cp	r1, r22
    c3e2:	17 06       	cpc	r1, r23
    c3e4:	e8 07       	cpc	r30, r24
    c3e6:	f9 07       	cpc	r31, r25
    c3e8:	c0 f0       	brcs	.+48     	; 0xc41a <__fp_cmp+0x46>
    c3ea:	12 16       	cp	r1, r18
    c3ec:	13 06       	cpc	r1, r19
    c3ee:	e4 07       	cpc	r30, r20
    c3f0:	f5 07       	cpc	r31, r21
    c3f2:	98 f0       	brcs	.+38     	; 0xc41a <__fp_cmp+0x46>
    c3f4:	62 1b       	sub	r22, r18
    c3f6:	73 0b       	sbc	r23, r19
    c3f8:	84 0b       	sbc	r24, r20
    c3fa:	95 0b       	sbc	r25, r21
    c3fc:	39 f4       	brne	.+14     	; 0xc40c <__fp_cmp+0x38>
    c3fe:	0a 26       	eor	r0, r26
    c400:	61 f0       	breq	.+24     	; 0xc41a <__fp_cmp+0x46>
    c402:	23 2b       	or	r18, r19
    c404:	24 2b       	or	r18, r20
    c406:	25 2b       	or	r18, r21
    c408:	21 f4       	brne	.+8      	; 0xc412 <__fp_cmp+0x3e>
    c40a:	08 95       	ret
    c40c:	0a 26       	eor	r0, r26
    c40e:	09 f4       	brne	.+2      	; 0xc412 <__fp_cmp+0x3e>
    c410:	a1 40       	sbci	r26, 0x01	; 1
    c412:	a6 95       	lsr	r26
    c414:	8f ef       	ldi	r24, 0xFF	; 255
    c416:	81 1d       	adc	r24, r1
    c418:	81 1d       	adc	r24, r1
    c41a:	08 95       	ret

0000c41c <__fp_inf>:
    c41c:	97 f9       	bld	r25, 7
    c41e:	9f 67       	ori	r25, 0x7F	; 127
    c420:	80 e8       	ldi	r24, 0x80	; 128
    c422:	70 e0       	ldi	r23, 0x00	; 0
    c424:	60 e0       	ldi	r22, 0x00	; 0
    c426:	08 95       	ret

0000c428 <__fp_nan>:
    c428:	9f ef       	ldi	r25, 0xFF	; 255
    c42a:	80 ec       	ldi	r24, 0xC0	; 192
    c42c:	08 95       	ret

0000c42e <__fp_pscA>:
    c42e:	00 24       	eor	r0, r0
    c430:	0a 94       	dec	r0
    c432:	16 16       	cp	r1, r22
    c434:	17 06       	cpc	r1, r23
    c436:	18 06       	cpc	r1, r24
    c438:	09 06       	cpc	r0, r25
    c43a:	08 95       	ret

0000c43c <__fp_pscB>:
    c43c:	00 24       	eor	r0, r0
    c43e:	0a 94       	dec	r0
    c440:	12 16       	cp	r1, r18
    c442:	13 06       	cpc	r1, r19
    c444:	14 06       	cpc	r1, r20
    c446:	05 06       	cpc	r0, r21
    c448:	08 95       	ret

0000c44a <__fp_round>:
    c44a:	09 2e       	mov	r0, r25
    c44c:	03 94       	inc	r0
    c44e:	00 0c       	add	r0, r0
    c450:	11 f4       	brne	.+4      	; 0xc456 <__fp_round+0xc>
    c452:	88 23       	and	r24, r24
    c454:	52 f0       	brmi	.+20     	; 0xc46a <__fp_round+0x20>
    c456:	bb 0f       	add	r27, r27
    c458:	40 f4       	brcc	.+16     	; 0xc46a <__fp_round+0x20>
    c45a:	bf 2b       	or	r27, r31
    c45c:	11 f4       	brne	.+4      	; 0xc462 <__fp_round+0x18>
    c45e:	60 ff       	sbrs	r22, 0
    c460:	04 c0       	rjmp	.+8      	; 0xc46a <__fp_round+0x20>
    c462:	6f 5f       	subi	r22, 0xFF	; 255
    c464:	7f 4f       	sbci	r23, 0xFF	; 255
    c466:	8f 4f       	sbci	r24, 0xFF	; 255
    c468:	9f 4f       	sbci	r25, 0xFF	; 255
    c46a:	08 95       	ret

0000c46c <__fp_split3>:
    c46c:	57 fd       	sbrc	r21, 7
    c46e:	90 58       	subi	r25, 0x80	; 128
    c470:	44 0f       	add	r20, r20
    c472:	55 1f       	adc	r21, r21
    c474:	59 f0       	breq	.+22     	; 0xc48c <__fp_splitA+0x10>
    c476:	5f 3f       	cpi	r21, 0xFF	; 255
    c478:	71 f0       	breq	.+28     	; 0xc496 <__fp_splitA+0x1a>
    c47a:	47 95       	ror	r20

0000c47c <__fp_splitA>:
    c47c:	88 0f       	add	r24, r24
    c47e:	97 fb       	bst	r25, 7
    c480:	99 1f       	adc	r25, r25
    c482:	61 f0       	breq	.+24     	; 0xc49c <__fp_splitA+0x20>
    c484:	9f 3f       	cpi	r25, 0xFF	; 255
    c486:	79 f0       	breq	.+30     	; 0xc4a6 <__fp_splitA+0x2a>
    c488:	87 95       	ror	r24
    c48a:	08 95       	ret
    c48c:	12 16       	cp	r1, r18
    c48e:	13 06       	cpc	r1, r19
    c490:	14 06       	cpc	r1, r20
    c492:	55 1f       	adc	r21, r21
    c494:	f2 cf       	rjmp	.-28     	; 0xc47a <__fp_split3+0xe>
    c496:	46 95       	lsr	r20
    c498:	f1 df       	rcall	.-30     	; 0xc47c <__fp_splitA>
    c49a:	08 c0       	rjmp	.+16     	; 0xc4ac <__fp_splitA+0x30>
    c49c:	16 16       	cp	r1, r22
    c49e:	17 06       	cpc	r1, r23
    c4a0:	18 06       	cpc	r1, r24
    c4a2:	99 1f       	adc	r25, r25
    c4a4:	f1 cf       	rjmp	.-30     	; 0xc488 <__fp_splitA+0xc>
    c4a6:	86 95       	lsr	r24
    c4a8:	71 05       	cpc	r23, r1
    c4aa:	61 05       	cpc	r22, r1
    c4ac:	08 94       	sec
    c4ae:	08 95       	ret

0000c4b0 <__fp_zero>:
    c4b0:	e8 94       	clt

0000c4b2 <__fp_szero>:
    c4b2:	bb 27       	eor	r27, r27
    c4b4:	66 27       	eor	r22, r22
    c4b6:	77 27       	eor	r23, r23
    c4b8:	cb 01       	movw	r24, r22
    c4ba:	97 f9       	bld	r25, 7
    c4bc:	08 95       	ret

0000c4be <__gesf2>:
    c4be:	8a df       	rcall	.-236    	; 0xc3d4 <__fp_cmp>
    c4c0:	08 f4       	brcc	.+2      	; 0xc4c4 <__gesf2+0x6>
    c4c2:	8f ef       	ldi	r24, 0xFF	; 255
    c4c4:	08 95       	ret

0000c4c6 <__mulsf3>:
    c4c6:	0b d0       	rcall	.+22     	; 0xc4de <__mulsf3x>
    c4c8:	c0 cf       	rjmp	.-128    	; 0xc44a <__fp_round>
    c4ca:	b1 df       	rcall	.-158    	; 0xc42e <__fp_pscA>
    c4cc:	28 f0       	brcs	.+10     	; 0xc4d8 <__mulsf3+0x12>
    c4ce:	b6 df       	rcall	.-148    	; 0xc43c <__fp_pscB>
    c4d0:	18 f0       	brcs	.+6      	; 0xc4d8 <__mulsf3+0x12>
    c4d2:	95 23       	and	r25, r21
    c4d4:	09 f0       	breq	.+2      	; 0xc4d8 <__mulsf3+0x12>
    c4d6:	a2 cf       	rjmp	.-188    	; 0xc41c <__fp_inf>
    c4d8:	a7 cf       	rjmp	.-178    	; 0xc428 <__fp_nan>
    c4da:	11 24       	eor	r1, r1
    c4dc:	ea cf       	rjmp	.-44     	; 0xc4b2 <__fp_szero>

0000c4de <__mulsf3x>:
    c4de:	c6 df       	rcall	.-116    	; 0xc46c <__fp_split3>
    c4e0:	a0 f3       	brcs	.-24     	; 0xc4ca <__mulsf3+0x4>

0000c4e2 <__mulsf3_pse>:
    c4e2:	95 9f       	mul	r25, r21
    c4e4:	d1 f3       	breq	.-12     	; 0xc4da <__mulsf3+0x14>
    c4e6:	95 0f       	add	r25, r21
    c4e8:	50 e0       	ldi	r21, 0x00	; 0
    c4ea:	55 1f       	adc	r21, r21
    c4ec:	62 9f       	mul	r22, r18
    c4ee:	f0 01       	movw	r30, r0
    c4f0:	72 9f       	mul	r23, r18
    c4f2:	bb 27       	eor	r27, r27
    c4f4:	f0 0d       	add	r31, r0
    c4f6:	b1 1d       	adc	r27, r1
    c4f8:	63 9f       	mul	r22, r19
    c4fa:	aa 27       	eor	r26, r26
    c4fc:	f0 0d       	add	r31, r0
    c4fe:	b1 1d       	adc	r27, r1
    c500:	aa 1f       	adc	r26, r26
    c502:	64 9f       	mul	r22, r20
    c504:	66 27       	eor	r22, r22
    c506:	b0 0d       	add	r27, r0
    c508:	a1 1d       	adc	r26, r1
    c50a:	66 1f       	adc	r22, r22
    c50c:	82 9f       	mul	r24, r18
    c50e:	22 27       	eor	r18, r18
    c510:	b0 0d       	add	r27, r0
    c512:	a1 1d       	adc	r26, r1
    c514:	62 1f       	adc	r22, r18
    c516:	73 9f       	mul	r23, r19
    c518:	b0 0d       	add	r27, r0
    c51a:	a1 1d       	adc	r26, r1
    c51c:	62 1f       	adc	r22, r18
    c51e:	83 9f       	mul	r24, r19
    c520:	a0 0d       	add	r26, r0
    c522:	61 1d       	adc	r22, r1
    c524:	22 1f       	adc	r18, r18
    c526:	74 9f       	mul	r23, r20
    c528:	33 27       	eor	r19, r19
    c52a:	a0 0d       	add	r26, r0
    c52c:	61 1d       	adc	r22, r1
    c52e:	23 1f       	adc	r18, r19
    c530:	84 9f       	mul	r24, r20
    c532:	60 0d       	add	r22, r0
    c534:	21 1d       	adc	r18, r1
    c536:	82 2f       	mov	r24, r18
    c538:	76 2f       	mov	r23, r22
    c53a:	6a 2f       	mov	r22, r26
    c53c:	11 24       	eor	r1, r1
    c53e:	9f 57       	subi	r25, 0x7F	; 127
    c540:	50 40       	sbci	r21, 0x00	; 0
    c542:	8a f0       	brmi	.+34     	; 0xc566 <__mulsf3_pse+0x84>
    c544:	e1 f0       	breq	.+56     	; 0xc57e <__mulsf3_pse+0x9c>
    c546:	88 23       	and	r24, r24
    c548:	4a f0       	brmi	.+18     	; 0xc55c <__mulsf3_pse+0x7a>
    c54a:	ee 0f       	add	r30, r30
    c54c:	ff 1f       	adc	r31, r31
    c54e:	bb 1f       	adc	r27, r27
    c550:	66 1f       	adc	r22, r22
    c552:	77 1f       	adc	r23, r23
    c554:	88 1f       	adc	r24, r24
    c556:	91 50       	subi	r25, 0x01	; 1
    c558:	50 40       	sbci	r21, 0x00	; 0
    c55a:	a9 f7       	brne	.-22     	; 0xc546 <__mulsf3_pse+0x64>
    c55c:	9e 3f       	cpi	r25, 0xFE	; 254
    c55e:	51 05       	cpc	r21, r1
    c560:	70 f0       	brcs	.+28     	; 0xc57e <__mulsf3_pse+0x9c>
    c562:	5c cf       	rjmp	.-328    	; 0xc41c <__fp_inf>
    c564:	a6 cf       	rjmp	.-180    	; 0xc4b2 <__fp_szero>
    c566:	5f 3f       	cpi	r21, 0xFF	; 255
    c568:	ec f3       	brlt	.-6      	; 0xc564 <__mulsf3_pse+0x82>
    c56a:	98 3e       	cpi	r25, 0xE8	; 232
    c56c:	dc f3       	brlt	.-10     	; 0xc564 <__mulsf3_pse+0x82>
    c56e:	86 95       	lsr	r24
    c570:	77 95       	ror	r23
    c572:	67 95       	ror	r22
    c574:	b7 95       	ror	r27
    c576:	f7 95       	ror	r31
    c578:	e7 95       	ror	r30
    c57a:	9f 5f       	subi	r25, 0xFF	; 255
    c57c:	c1 f7       	brne	.-16     	; 0xc56e <__mulsf3_pse+0x8c>
    c57e:	fe 2b       	or	r31, r30
    c580:	88 0f       	add	r24, r24
    c582:	91 1d       	adc	r25, r1
    c584:	96 95       	lsr	r25
    c586:	87 95       	ror	r24
    c588:	97 f9       	bld	r25, 7
    c58a:	08 95       	ret

0000c58c <memcpy_P>:
    c58c:	fb 01       	movw	r30, r22
    c58e:	dc 01       	movw	r26, r24
    c590:	02 c0       	rjmp	.+4      	; 0xc596 <memcpy_P+0xa>
    c592:	05 90       	lpm	r0, Z+
    c594:	0d 92       	st	X+, r0
    c596:	41 50       	subi	r20, 0x01	; 1
    c598:	50 40       	sbci	r21, 0x00	; 0
    c59a:	d8 f7       	brcc	.-10     	; 0xc592 <memcpy_P+0x6>
    c59c:	08 95       	ret

0000c59e <_exit>:
    c59e:	f8 94       	cli

0000c5a0 <__stop_program>:
    c5a0:	ff cf       	rjmp	.-2      	; 0xc5a0 <__stop_program>
