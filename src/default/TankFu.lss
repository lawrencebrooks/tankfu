
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000e500  0000e600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e500  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f32  00800106  00800106  0000e606  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000e608  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000eb84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000edda  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000628  00000000  00000000  0000edf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000095c9  00000000  00000000  0000f418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000153d  00000000  00000000  000189e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000206d  00000000  00000000  00019f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001408  00000000  00000000  0001bf8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d29  00000000  00000000  0001d394  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008646  00000000  00000000  0001f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000730  00000000  00000000  00027708  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 41 	jmp	0x83da	; 0x83da <__ctors_end>
       4:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
       8:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
       c:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      10:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      14:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      18:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      1c:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      20:	0c 94 59 46 	jmp	0x8cb2	; 0x8cb2 <__vector_8>
      24:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      28:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      2c:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      30:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      34:	0c 94 30 44 	jmp	0x8860	; 0x8860 <__vector_13>
      38:	0c 94 70 44 	jmp	0x88e0	; 0x88e0 <__vector_14>
      3c:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      40:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      44:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      48:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      4c:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      50:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      54:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      58:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      5c:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      60:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      64:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      68:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>
      6c:	0c 94 5a 42 	jmp	0x84b4	; 0x84b4 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	bb 47 be 47 19 48 1d 48 25 48 c6 47 cb 47 d0 47     .G.G.H.H%H.G.G.G
      ce:	2d 48 d3 47 d6 47 d9 47 16 48                       -H.G.G.G.H

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <map_uzeboxlogo2>:
      e4:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f5 <map_uzeboxlogo>:
      f5:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     105:	00 0e 0f 10 11 12                                   ......

0000010b <logo_tileset>:
	...
     167:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     177:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     187:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     197:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1a7:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1b7:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1c7:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1d7:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1e7:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1f7:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     207:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     217:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     227:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     237:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     24f:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     25f:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     26f:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     27f:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     28f:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     29f:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2af:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2bf:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2cf:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2df:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2ef:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     2ff:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     30f:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     31f:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     32f:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     33f:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     34f:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     35f:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38b:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39b:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3ab:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bb:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cb:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3db:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3eb:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3fb:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40b:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41b:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42b:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43b:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44b:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45b:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     493:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a3:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b3:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c3:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d3:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e3:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f3:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     503:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     513:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     523:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     533:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     543:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     553:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     563:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     573:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     583:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     593:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a3:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b3:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c3:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5e7:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5f7:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     607:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     617:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     627:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     637:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     647:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     657:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     667:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     677:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     687:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     697:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6a7:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6b7:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6cf:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6df:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6ef:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     6ff:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     70f:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     71f:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     72f:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     73f:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     74f:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     75f:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     76f:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     77f:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     78f:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     79f:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7af:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7bf:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7cf:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7df:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80b:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81b:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82b:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83b:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84b:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85b:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86b:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87b:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88b:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89b:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8ab:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bb:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cb:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8db:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090b <logoInitPatches>:
     90b:	00 00 00 14 09 00 00 00 00                          .........

00000914 <initPatch>:
     914:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     924:	0a 1e 32 05 00 00 ff                                ..2....

0000092b <default_scores>:
     92b:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     93b:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

00000949 <default_handles>:
     949:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     959:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000967 <strLevels>:
     967:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     977:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     987:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     997:	20 20 20 20 20 4d 41 5a 45 20 20 20 20 20 20 00          MAZE      .
     9a7:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     9b7:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     9c7:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     9d7:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     9e7:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     9f7:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

00000a07 <strPaused>:
     a07:	50 41 55 53 45 44 00                                PAUSED.

00000a0e <strExit>:
     a0e:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

00000a17 <strTotal>:
     a17:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000a1e <strScore>:
     a1e:	53 43 4f 52 45 3a 00                                SCORE:.

00000a25 <strBanterClear>:
     a25:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000a34 <banter_map>:
     a34:	53 55 43 48 20 46 41 49 4c 20 20 20 20 20 00 4c     SUCH FAIL     .L
     a44:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 52     OL           .BR
     a54:	4f 4b 45 4e 20 42 55 54 54 4f 4e 3f 00 54 52 59     OKEN BUTTON?.TRY
     a64:	20 41 54 20 4c 45 41 53 54 20 20 00 54 4f 4f 20      AT LEAST  .TOO 
     a74:	45 41 53 59 20 20 20 20 20 20 00 59 41 57 4e 20     EASY      .YAWN 
     a84:	20 20 20 20 20 20 20 20 20 00 4e 4f 4f 42 20 20              .NOOB  
     a94:	20 20 20 20 20 20 20 20 00 54 48 41 54 27 53 20             .THAT'S 
     aa4:	49 54 3f 20 20 20 20 00 4e 45 45 44 20 48 45 4c     IT?    .NEED HEL
     ab4:	50 3f 20 20 20 20 00 50 46 46 54 20 20 20 20 20     P?    .PFFT     
     ac4:	20 20 20 20 20 00                                        .

00000aca <strFinalScore>:
     aca:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000ad6 <strBy>:
     ad6:	42 59 00                                            BY.

00000ad9 <strOwns>:
     ad9:	4f 57 4e 53 00                                      OWNS.

00000ade <strChangeHandle>:
     ade:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

00000aed <strReset>:
     aed:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     afd:	20 53 4c 20 28 35 53 29 00                           SL (5S).

00000b06 <strCancelHandle>:
     b06:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000b11 <strConfirmHandle>:
     b11:	43 4f 4e 46 49 52 4d 20 2d 20 41 00                 CONFIRM - A.

00000b1d <strSelectHandle>:
     b1d:	53 45 4c 45 43 54 20 2d 20 41 00                    SELECT - A.

00000b28 <strPlayer2>:
     b28:	50 32 00                                            P2.

00000b2b <strPlayer1>:
     b2b:	50 31 00                                            P1.

00000b2e <strVertSep>:
     b2e:	3b 00                                               ;.

00000b30 <strUnderline>:
     b30:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000b3c <strHandlesTitle>:
     b3c:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

00000b48 <strHighscores>:
     b48:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000b52 <str2Player>:
     b52:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000b63 <str1Player>:
     b63:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000b71 <strCopyright>:
     b71:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     b81:	4f 4f 4b 53 00                                      OOKS.

00000b86 <my_patches>:
     b86:	02 a6 1b 00 00 4f 07 50 07 02 c1 14 00 00 e3 06     .....O.P........
     b96:	e4 06 02 7a 12 00 00 45 02 46 02 02 c9 10 00 00     ...z...E.F......
     ba6:	af 01 b0 01 02 c7 10 00 00 00 00 01 00 02 c5 10     ................
     bb6:	00 00 00 00 01 00 02 a5 0e 00 00 1e 02 1f 02 02     ................
     bc6:	33 0d 00 00 70 01 71 01 02 7a 12 00 00 45 02 46     3...p.q..z...E.F
     bd6:	02 00 00 00 2c 0d 00 00 00 00 02 c1 14 00 00 e3     ....,...........
     be6:	06 e4 06 02 28 0d 00 00 00 00 01 00 02 26 0d 00     ....(........&..
	...
     bfe:	04 0c 00 00 00 00                                   ......

00000c04 <ad_alarm>:
     c04:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     c14:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     c24:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     c34:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     c44:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     c54:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     c64:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     c74:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     c84:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     c94:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     ca4:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     cb4:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     cc4:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     cd4:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     ce4:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     cf4:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     d04:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     d14:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     d24:	00 ff                                               ..

00000d26 <ad_silence>:
	...

00000d28 <ad_tracks>:
	...

00000d2a <ad_tank_explode>:
	...

00000d2c <ad_splash>:
     d2c:	00 05 00 00 ff                                      .....

00000d31 <ad_rocket>:
	...

00000d33 <ad_navigate>:
     d33:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     d43:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     d53:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     d63:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     d73:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     d83:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     d93:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     da3:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     db3:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     dc3:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     dd3:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     de3:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     df3:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     e03:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     e13:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     e23:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     e33:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     e43:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     e53:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     e63:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     e73:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     e83:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     e93:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000ea5 <ad_metal>:
     ea5:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     eb5:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     ec5:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     ed5:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     ee5:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     ef5:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     f05:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     f15:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     f25:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     f35:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     f45:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     f55:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     f65:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     f75:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     f85:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     f95:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     fa5:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     fb5:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     fc5:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     fd5:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     fe5:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     ff5:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
    1005:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
    1015:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
    1025:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
    1035:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    1045:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    1055:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    1065:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    1075:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    1085:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    1095:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    10a5:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    10b5:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

000010c5 <ad_level_start>:
	...

000010c7 <ad_level_clear>:
	...

000010c9 <ad_item>:
    10c9:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    10d9:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    10e9:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    10f9:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    1109:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    1119:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    1129:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    1139:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    1149:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    1159:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    1169:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    1179:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    1189:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    1199:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    11a9:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    11b9:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    11c9:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    11d9:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    11e9:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    11f9:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    1209:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    1219:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    1229:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    1239:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    1249:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    1259:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    1269:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

0000127a <ad_cannonball>:
    127a:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    128a:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    129a:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    12aa:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    12ba:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    12ca:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    12da:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    12ea:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    12fa:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    130a:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    131a:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    132a:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    133a:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    134a:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    135a:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    136a:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    137a:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    138a:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    139a:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    13aa:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    13ba:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    13ca:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    13da:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    13ea:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    13fa:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    140a:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    141a:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    142a:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    143a:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    144a:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    145a:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    146a:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    147a:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    148a:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    149a:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    14aa:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    14ba:	ff ff ff ff ff 00 00                                .......

000014c1 <ad_brick_explode>:
    14c1:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    14d1:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    14e1:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    14f1:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    1501:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    1511:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    1521:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    1531:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    1541:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    1551:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    1561:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    1571:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    1581:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    1591:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    15a1:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    15b1:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    15c1:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    15d1:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    15e1:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    15f1:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    1601:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    1611:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    1621:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    1631:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    1641:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    1651:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    1661:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    1671:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    1681:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    1691:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    16a1:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    16b1:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    16c1:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    16d1:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    16e1:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    16f1:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    1701:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    1711:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    1721:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    1731:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    1741:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    1751:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    1761:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    1771:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    1781:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    1791:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    17a1:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    17b1:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    17c1:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    17d1:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    17e1:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    17f1:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    1801:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    1811:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    1821:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    1831:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    1841:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    1851:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    1861:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    1871:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    1881:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    1891:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    18a1:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    18b1:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    18c1:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    18d1:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    18e1:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    18f1:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    1901:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    1911:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    1921:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    1931:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    1941:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    1951:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    1961:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    1971:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    1981:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    1991:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    19a1:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    19b1:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    19c1:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    19d1:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    19e1:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    19f1:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    1a01:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    1a11:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    1a21:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    1a31:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    1a41:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    1a51:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    1a61:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    1a71:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    1a81:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    1a91:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    1aa1:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    1ab1:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    1ac1:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    1ad1:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    1ae1:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    1af1:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    1b01:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    1b11:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    1b21:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    1b31:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    1b41:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    1b51:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    1b61:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    1b71:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    1b81:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    1b91:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    1ba1:	04 04 02 01 00                                      .....

00001ba6 <ad_banter>:
    1ba6:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1bb6:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    1bc6:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    1bd6:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    1be6:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    1bf6:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    1c06:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    1c16:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    1c26:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    1c36:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    1c46:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    1c56:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    1c66:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1c76:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1c86:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1c96:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1ca6:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1cb6:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    1cc6:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    1cd6:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    1ce6:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    1cf6:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    1d06:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    1d16:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    1d26:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    1d36:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    1d46:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    1d56:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    1d66:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1d76:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1d86:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1d96:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1da6:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1db6:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    1dc6:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    1dd6:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    1de6:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    1df6:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    1e06:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    1e16:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    1e26:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    1e36:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    1e46:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    1e56:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    1e66:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1e76:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1e86:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1e96:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1ea6:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1eb6:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    1ec6:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    1ed6:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    1ee6:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    1ef6:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    1f06:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    1f16:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    1f26:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    1f36:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    1f46:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    1f56:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    1f66:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1f76:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1f86:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1f96:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1fa6:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1fb6:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    1fc6:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    1fd6:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    1fe6:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    1ff6:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    2006:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    2016:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    2026:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    2036:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    2046:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    2056:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    2066:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    2076:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    2086:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    2096:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    20a6:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    20b6:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    20c6:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    20d6:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    20e6:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    20f6:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    2106:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    2116:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    2126:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    2136:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    2146:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    2156:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    2166:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    2176:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    2186:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    2196:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    21a6:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    21b6:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    21c6:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    21d6:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    21e6:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    21f6:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    2206:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    2216:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    2226:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    2236:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    2246:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    2256:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    2266:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    2276:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    2286:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    2296:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    22a6:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    22b6:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    22c6:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    22d6:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    22e6:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

000022f7 <level_data>:
    22f7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2307:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    232f:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    2347:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    2357:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2367:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    2383:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    2393:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    23a3:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    23bf:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    23df:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    23ef:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    23ff:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    240f:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    241f:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    242f:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    243f:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    244f:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    245f:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    246f:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    247f:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    248f:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    249f:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    24af:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    24c7:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    24d7:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    24f3:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    250b:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    2527:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    2537:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    2547:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    2563:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    2573:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    2583:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    25a3:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    25c3:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25d3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25e3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    25f3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2603:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    261f:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    263b:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    264b:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    265b:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    266b:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    267b:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    268b:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    269b:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    26ab:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    26bb:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    26cb:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    26db:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    26eb:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    26fb:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    270b:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    271b:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    272b:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    273b:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    274b:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    275b:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    276b:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    277b:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    278b:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    279b:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    27ab:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    27bb:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    27cb:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    27db:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    27eb:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    27fb:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    280b:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    281b:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    282b:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    283b:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    284b:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    285b:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    286b:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    287b:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2893:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    28af:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    28bf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28cf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28df:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    28ef:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    290b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    292b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2947:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2967:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2983:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29a3:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    29bb:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    29d7:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    29e7:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    29f7:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    2a07:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    2a17:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    2a27:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    2a37:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    2a47:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    2a57:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    2a67:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2a77:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2a87:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2a97:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2aa7:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2ab7:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ac7:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2ad7:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ae7:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    2b03:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    2b27:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b47:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b63:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b83:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b9f:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2baf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2bbf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2bcf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2bdf:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    2bef:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    2bff:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    2c0f:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    2c1f:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    2c2f:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    2c3f:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    2c4f:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    2c5f:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    2c6f:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    2c7f:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    2c8f:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    2c9f:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    2caf:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    2cbf:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    2ccf:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ceb:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    2d03:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    2d13:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    2d23:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    2d33:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    2d4b:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    2d5b:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    2d6b:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2d7b:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    2d8b:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2d9b:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    2db3:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    2dc3:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    2dd3:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    2deb:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    2dfb:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    2e0b:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    2e1b:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    2e2b:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    2e3b:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    2e4b:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    2e63:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    2e73:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e8b:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2e9b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2eab:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2ebb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2ecb:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ee7:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    2f03:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    2f23:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    2f33:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f43:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    2f5f:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    2f7f:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    2f9b:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    2fbb:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2fcb:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2fdb:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    2feb:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3003:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    3013:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    3023:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    3033:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    3043:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    3053:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    306f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    307f:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    308f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    309f:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    30bf:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    30db:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    30fb:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    3113:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    3123:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    313f:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    315b:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    317b:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    318b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    319b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    31ab:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    31bb:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    31cb:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    31e3:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    31f3:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    3203:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    3213:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    3223:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    3233:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    3243:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    3253:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    3263:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    328b:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    329b:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    32ab:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    32bb:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    32d3:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    32e3:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    32f3:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    3303:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    3313:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    3323:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    3333:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    334b:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    335b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    336b:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    337b:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    338b:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    339b:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    33ab:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    33bb:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    33cb:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    33db:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    33eb:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    33fb:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    340b:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    341b:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    342b:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    3447:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    346b:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    347b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    348b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    349b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    34ab:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    34bb:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    34d3:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    34e3:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    34f3:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    3503:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    3513:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    3523:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    3533:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    3543:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    3553:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    3563:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    3573:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    3597:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35b3:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    35c3:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    35d3:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    35e3:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    35f3:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    3603:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    3613:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    3623:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    363b:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    364b:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3667:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3687:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    3697:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    36a7:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    36b7:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    36c7:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    36d7:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    36e7:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    36f7:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    3707:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    3717:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    3727:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    3737:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    3747:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    3757:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3767:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3777:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3787:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3797:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37b3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37cf:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    37ef:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    380b:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    381b:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    382b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3847:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    385f:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    386f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    387f:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    388f:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    389f:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    38af:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    38bf:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    38cf:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    38df:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    38ef:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    38ff:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    390f:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    3927:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    3937:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    3947:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    3957:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3967:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3977:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3993:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39af:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    39bf:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    39cf:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39eb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a0b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a27:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a47:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a57:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a67:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3a77:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    3a9f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3abf:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3adb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3afb:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3b0b:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    3b1b:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3b37:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    3b53:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3b6b:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    3b7b:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    3b8b:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    3b9b:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    3bab:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    3bbb:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    3bcb:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    3bdb:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    3beb:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    3bfb:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    3c0b:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    3c1b:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    3c2b:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    3c43:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3c63:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c7f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c9f:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3caf:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    3cbf:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cdb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3cf7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d17:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d33:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d43:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d53:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d63:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3d73:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3d83:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3d93:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3da3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3db3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3dc3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    3dd3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3de3:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    3df3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3e03:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    3e13:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3e23:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    3e33:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3e43:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    3e53:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    3e63:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3e73:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3e83:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3e93:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3ea3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3eb3:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    3ec3:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    3ed3:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    3ef7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f13:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f33:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f4f:	00 00 00 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
	...
    3f6b:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
	...
    3f8b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fab:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fc7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fe7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ff7:	00 07 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    4007:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4023:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4033:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................

00004043 <sprites_data>:
    4043:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    4053:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    4063:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4073:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4083:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    4093:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    40a3:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    40b3:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    40c3:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    40d3:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    40e3:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    40f3:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    4103:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    4113:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    4123:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    4133:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    4143:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4153:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    4163:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    4173:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    4183:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4193:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    41a3:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    41b3:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    41c3:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    41d3:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    41e3:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    41f3:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    4203:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    4213:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    4223:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    4233:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    4243:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4253:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    4263:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    4273:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4283:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4293:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    42a3:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    42b3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    42c3:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    42d3:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    42e3:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    42f3:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    4303:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    4313:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    4323:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    4333:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    4343:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    4353:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    4363:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    4373:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    4383:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    4393:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    43a3:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    43b3:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    43c3:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    43d3:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    43e3:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    43f3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4403:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4413:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    4423:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    4433:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4443:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    4453:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    4463:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    4473:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4483:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    4493:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    44a3:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    44b3:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    44c3:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    44d3:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    44e3:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    44f3:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    4503:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    4513:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    4523:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    4533:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4543:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4553:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    4563:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    4573:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    4583:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4593:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    45a3:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    45b3:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    45c3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    45d3:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    45e3:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    45f3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4603:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    4613:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    4623:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    4633:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    4643:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    4653:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    4663:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    4673:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4683:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4693:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    46a3:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    46b3:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    46c3:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    46d3:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    46e3:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    46f3:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4703:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4713:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    4723:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    4733:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4743:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    4753:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    4763:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    4773:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    4783:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4793:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    47a3:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    47b3:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    47c3:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    47d3:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    47e3:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    47f3:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4803:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    4813:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4823:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4833:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4843:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    4853:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    4863:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    4873:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    4883:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4893:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48a3:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    48b3:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    48c3:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    48d3:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    48e3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48f3:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4903:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    4913:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    4923:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    4933:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    4943:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4953:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4963:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4973:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00004983 <map_sub_turret>:
    4983:	01 01 23                                            ..#

00004986 <map_sub_shot>:
    4986:	01 01 1b                                            ...

00004989 <map_up_arrow>:
    4989:	01 01 22                                            .."

0000498c <map_down_arrow>:
    498c:	01 01 21                                            ..!

0000498f <map_right_arrow>:
    498f:	01 01 20                                            .. 

00004992 <map_rocket_right_1>:
    4992:	01 01 1a                                            ...

00004995 <map_rocket_right_0>:
    4995:	01 01 19                                            ...

00004998 <map_rocket_up_1>:
    4998:	01 01 18                                            ...

0000499b <map_rocket_up_0>:
    499b:	01 01 17                                            ...

0000499e <map_ball>:
    499e:	01 01 16                                            ...

000049a1 <map_explosion_2>:
    49a1:	02 02 08 09 09 08                                   ......

000049a7 <map_explosion_1>:
    49a7:	02 02 06 07 10 11                                   ......

000049ad <map_explosion_0>:
    49ad:	02 02 04 05 0e 0f                                   ......

000049b3 <map_tank2_right_0>:
    49b3:	02 02 14 15 1e 1f                                   ......

000049b9 <map_tank2_up_0>:
    49b9:	02 02 12 13 1c 1d                                   ......

000049bf <map_tank1_right_0>:
    49bf:	02 02 02 03 0c 0d                                   ......

000049c5 <map_tank1_up_0>:
    49c5:	02 02 00 01 0a 0b                                   ......

000049cb <map_tank_blank>:
    49cb:	02 02 24 24 24 24                                   ..$$$$

000049d1 <map_none>:
    49d1:	01 01 24                                            ..$

000049d4 <tiles_data>:
	...
    4a14:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    4a24:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    4a34:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    4a44:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    4a54:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    4a64:	ec ed ff ff ff ff f6 ec ec ed ee ff ff f6 ed ec     ................
    4a74:	ec ed ee ff f6 ee ed ec ec ed ff f6 ee ee ed ec     ................
    4a84:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    4a94:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    4aa4:	ec ed ff f6 ee ff ed ec ec ed f6 3f ff ee ed ec     ...........?....
    4ab4:	ec ed ee ff 3f f6 ed ec ec ed ff ee f6 ff ed ec     ....?...........
    4ac4:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    4ad4:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    4ae4:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    4af4:	ec ff f6 ff ff ee ed ec ec ed ff f6 ee ee ed ec     ................
    4b04:	ec 3f ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     .?..............
    4b14:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    4b24:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4b34:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    4b44:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4b5c:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4b6c:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4b7c:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    4b94:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    4ba4:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    4bb4:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    4bc4:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    4bdc:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    4bfc:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    4c14:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    4c24:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4c34:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    4c44:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    4c54:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    4c64:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    4c74:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    4c84:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4c94:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    4ca4:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    4cb4:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    4cc4:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    4cd4:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    4ce4:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    4cf4:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    4d04:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    4d14:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4d24:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4d34:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    4d44:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    4d54:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    4d64:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    4d74:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    4d84:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    4d94:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    4da4:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    4db4:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    4dc4:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    4dd4:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4de4:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4df4:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    4e04:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4e14:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4e24:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    4e34:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    4e44:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4e54:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    4e64:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    4e74:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    4e84:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4e94:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    4ea4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4eb4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4ec4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4ed4:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4ee4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4ef4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f04:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4f34:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4f44:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f54:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    4f64:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4f74:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4f84:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4f94:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    4fa4:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4fb4:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4fc4:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4fd4:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    4fe4:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    4ff4:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    5004:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    5014:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    5024:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    5034:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    5044:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    5054:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5064:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5074:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5084:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5094:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50a4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    50d4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50e4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50f4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5104:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    5114:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    5124:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5134:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5144:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5154:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    5194:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    51a4:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    51b4:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    51c4:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    51d4:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    51e4:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    51f4:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    5204:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    5244:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    527c:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    528c:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    529c:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    52ac:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    52bc:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    52cc:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    52dc:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    52ec:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    52fc:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    530c:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    531c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    532c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    533c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    534c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    535c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    536c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    537c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    538c:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    539c:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    53ac:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    53bc:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    53cc:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    53dc:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    53ec:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    53fc:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    540c:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    541c:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5454:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5464:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5474:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    5498:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    54a8:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    54b8:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    54c8:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    54d8:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    54e8:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    54f8:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    5508:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    5518:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5528:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5538:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5548:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    5558:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5568:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5578:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5588:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    5598:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    55a8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    55b8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    55c8:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    55d8:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    55e8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    55f8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5608:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    5618:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    5628:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    5638:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    5648:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    5658:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    5668:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    5678:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    5688:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    5698:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    56a8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    56b8:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    56c8:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    56d8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    56e8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    56f8:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    5708:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    5718:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5728:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5738:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    5748:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5758:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5768:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5778:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5788:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5798:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    57a8:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    57b8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57c8:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    57d8:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    57e8:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57f8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5808:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5818:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5828:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5838:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5848:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    5858:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    5868:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5878:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5888:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5898:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    58a8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    58b8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    58c8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    58d8:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    58e8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    58f8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5908:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5918:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5928:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5938:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    5948:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    5958:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5968:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    5978:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5988:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5998:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    59a8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    59b8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59c8:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    59d8:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    59e8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    59f8:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    5a08:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    5a18:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5a28:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    5a38:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    5a48:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5a58:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5a68:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    5a78:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    5a88:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5a98:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    5aa8:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    5ab8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    5ac8:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    5ad8:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ae8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5af8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b08:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    5b18:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b28:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b38:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    5b48:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    5b58:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b68:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b78:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    5b88:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5b98:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ba8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bb8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5bc8:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5bd8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5be8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bf8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c08:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5c18:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5c28:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    5c38:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5c48:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5c58:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5c68:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5c78:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5c88:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5c98:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    5ca8:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    5cb8:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5cc8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5cd8:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5ce8:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    5cf8:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    5d08:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    5d18:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d28:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d38:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d48:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    5d58:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    5d68:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5d78:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5d88:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    5d98:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    5da8:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    5db8:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    5dc8:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    5dd8:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5de8:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5df8:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5e08:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    5e18:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    5e28:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    5e38:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5e48:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5e58:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5e68:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5e78:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5e88:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5e98:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    5ea8:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    5eb8:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5ec8:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    5ed8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ee8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ef8:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f08:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5f18:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f28:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f38:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f48:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    5f58:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f68:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f78:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    5f88:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5f98:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5fa8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5fb8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5fc8:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    5fd8:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    5fe8:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    5ff8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6008:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    6018:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6028:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    6038:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    6048:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    6058:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    6068:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    6078:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6088:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    6098:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    60a8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    60b8:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    60c8:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    60d8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    60e8:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    60f8:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6108:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    6118:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    6128:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6138:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6148:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    6158:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6168:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6178:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6188:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6198:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    61a8:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    61b8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    61c8:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    61d8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    61e8:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    61f8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    6208:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    6218:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    6228:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    6238:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    6248:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6258:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6268:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6278:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6288:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6298:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    62a8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    62b8:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    62c8:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    62d8:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    62e8:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    62f8:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    6308:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    6318:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    6328:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6338:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6348:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    6358:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    6368:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    6378:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    6388:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    6398:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    63a8:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    63b8:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    63c8:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    63d8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    63e8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    63f8:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    6408:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    6418:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6428:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6438:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    6448:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    6458:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6468:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6478:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    6488:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    6498:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    64a8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    64b8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    64c8:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    64d8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    64e8:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    64f8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6508:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6518:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    6528:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6538:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6548:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6558:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6568:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    6578:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    6588:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6598:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    65a8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    65b8:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    65c8:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    65d8:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    65e8:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    65f8:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6608:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6618:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    6628:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6638:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6648:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    6658:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6668:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6678:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6688:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6698:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    66a8:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    66b8:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    66c8:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    66d8:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    66e8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    66f8:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6708:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    6718:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    6728:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6738:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6748:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6758:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6768:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    6778:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    6788:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6798:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    67a8:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    67b8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    67c8:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    67d8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    67e8:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    67f8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6808:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    6818:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6828:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6838:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6848:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6858:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6868:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6878:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6888:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6898:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    68a8:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    68b8:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    68c8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    68d8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    68e8:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    68f8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6908:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    6918:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    6928:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6938:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6948:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6958:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6968:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    6978:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    6988:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6998:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    69a8:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    69b8:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    69c8:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    69d8:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    69e8:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    69f8:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a08:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    6a18:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    6a28:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    6a38:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a48:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6a58:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    6a68:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6a78:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a88:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6a98:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    6aa8:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6ab8:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6ac8:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6ad8:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6ae8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6af8:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6b08:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    6b18:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6b28:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6b38:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6b48:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    6b58:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6b68:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6b78:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6b88:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6b98:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6ba8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6bb8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6bc8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6bd8:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    6be8:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6bf8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c08:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6c18:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    6c28:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c38:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c48:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6c58:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6c68:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c78:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c88:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6c98:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    6ca8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6cb8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6cc8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6cd8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ce8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6cf8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d08:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    6d18:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6d28:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d38:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d48:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6d58:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6d68:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    6d78:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d88:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6d98:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6da8:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6db8:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    6dc8:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6dd8:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6de8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6df8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6e08:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6e18:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6e28:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    6e38:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    6e48:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    6e58:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    6e68:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    6e78:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6e88:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6e98:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ea8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6eb8:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6ec8:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6ed8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ee8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ef8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f08:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6f18:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    6f28:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6f38:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6f48:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6f58:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6f68:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    6f78:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6f88:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6f98:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fa8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fb8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6fc8:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6fd8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6fe8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ff8:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    7008:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    7018:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7028:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7038:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    7048:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    7058:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7068:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    7078:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    7088:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    70dc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    70ec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7104:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    711c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    712c:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    715c:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    716c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    717c:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    7194:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    71a4:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    71b4:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    71c4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    71dc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    71ec:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    71fc:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    7214:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    7224:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    7234:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    7244:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    725c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    726c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    72a0:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    72b0:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    72c0:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    72dc:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    72ec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    72fc:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    731c:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    732c:	df df df df df df df df 00 00 df df df df 00 00     ................
    733c:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    735c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    736c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    737c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    73bc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    73cc:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    73ec:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    743c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7460:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    7470:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    7480:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    749c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    74ac:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    74bc:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    74dc:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    74ec:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    74fc:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    751c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    752c:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    753c:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    755c:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    756c:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    757c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    75a0:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    75b0:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    75c0:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    75dc:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    75ec:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    75fc:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    761c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    762c:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    763c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    765c:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    766c:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    767c:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    769c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    76ac:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    76bc:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    76dc:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    76ec:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    76fc:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    7724:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    773c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7754:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7764:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7774:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7784:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7794:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    77a4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    77b4:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    77c4:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    77e4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    77fc:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7814:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    7824:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7834:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7844:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    785c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    786c:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7884:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    789c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    78ac:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    78bc:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    78dc:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    78ec:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78fc:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    791c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    792c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    793c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    795c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    796c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    797c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    799c:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    79ac:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    79bc:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    79dc:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    79ec:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    79fc:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7a1c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7a2c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7a3c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7a5c:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7a6c:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    7a7c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    7a9c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7aac:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7abc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7adc:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7aec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7afc:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7b20:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7b30:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    7b40:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    7b5c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    7b6c:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    7b7c:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7b9c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7bac:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7bbc:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7bdc:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    7bec:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    7bfc:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7c1c:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    7c2c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7c3c:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7c5c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7c6c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7c7c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7c9c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7cac:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7cbc:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7cdc:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7cec:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7cfc:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    7d1c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7d2c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7d3c:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7d5c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7d6c:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    7d7c:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7d9c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7dac:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7dbc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7ddc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7dec:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7dfc:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    7e1c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7e2c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7e3c:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7e5c:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    7e6c:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    7e7c:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7e9c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7eac:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    7ebc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7edc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7eec:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    7efc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7f1c:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    7f2c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7f3c:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7f5c:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7f6c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7f7c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    7f9c:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7fac:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    7fbc:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    7fdc:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7fec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7ffc:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    8020:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    8030:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    8084:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00008094 <map_sub_emerging>:
    8094:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    80a4:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    80b4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    80c4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    80d4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    80e4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    80f4:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    8104:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    8114:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    8124:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    8134:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    8144:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    8154:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8164:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    8174:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8184:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8194:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    81a4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    81b4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    81c4:	0d 0d 0d 0d 0d 0d                                   ......

000081ca <map_sub>:
    81ca:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    81da:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    81ea:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    81fa:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    820a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    821a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    822a:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    823a:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    824a:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    825a:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    826a:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    827a:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    828a:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    829a:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    82aa:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    82ba:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    82ca:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    82da:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    82ea:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    82fa:	0d 0d 0d 0d 0d 0d                                   ......

00008300 <map_scope_2>:
    8300:	01 01 12                                            ...

00008303 <map_scope_1>:
    8303:	01 01 11                                            ...

00008306 <map_scope_0>:
    8306:	01 01 10                                            ...

00008309 <map_blue_tank>:
    8309:	02 02 2b 2c 31 32                                   ..+,12

0000830f <map_green_tank>:
    830f:	02 02 18 19 23 24                                   ....#$

00008315 <map_fence>:
    8315:	01 01 0f                                            ...

00008318 <map_turf>:
    8318:	01 01 0e                                            ...

0000831b <map_water>:
    831b:	01 01 0d                                            ...

0000831e <map_metal_bl>:
    831e:	01 01 0c                                            ...

00008321 <map_metal_tr>:
    8321:	01 01 0b                                            ...

00008324 <map_metal_br>:
    8324:	01 01 0a                                            ...

00008327 <map_metal_tl>:
    8327:	01 01 09                                            ...

0000832a <map_tile_exp_2>:
    832a:	01 01 08                                            ...

0000832d <map_tile_exp_1>:
    832d:	01 01 07                                            ...

00008330 <map_tile_exp_0>:
    8330:	01 01 06                                            ...

00008333 <map_rocket_itm>:
    8333:	01 01 04                                            ...

00008336 <map_explode_itm>:
    8336:	01 01 03                                            ...

00008339 <map_speed_itm>:
    8339:	01 01 02                                            ...

0000833c <map_metal>:
    833c:	01 01 05                                            ...

0000833f <map_brick>:
    833f:	01 01 01                                            ...

00008342 <map_splash>:
    8342:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    8352:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    8362:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    8372:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    8382:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    8392:	1a 00 00 1a 2f 30                                   ..../0

00008398 <map_pause>:
    8398:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    83a8:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    83b8:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    83c8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000083d6 <map_tile_none>:
    83d6:	01 01 00 00                                         ....

000083da <__ctors_end>:
    83da:	11 24       	eor	r1, r1
    83dc:	1f be       	out	0x3f, r1	; 63
    83de:	cf ef       	ldi	r28, 0xFF	; 255
    83e0:	d0 e1       	ldi	r29, 0x10	; 16
    83e2:	de bf       	out	0x3e, r29	; 62
    83e4:	cd bf       	out	0x3d, r28	; 61

000083e6 <__do_copy_data>:
    83e6:	11 e0       	ldi	r17, 0x01	; 1
    83e8:	a0 e0       	ldi	r26, 0x00	; 0
    83ea:	b1 e0       	ldi	r27, 0x01	; 1
    83ec:	e0 e0       	ldi	r30, 0x00	; 0
    83ee:	f5 ee       	ldi	r31, 0xE5	; 229
    83f0:	02 c0       	rjmp	.+4      	; 0x83f6 <__do_copy_data+0x10>
    83f2:	05 90       	lpm	r0, Z+
    83f4:	0d 92       	st	X+, r0
    83f6:	a6 30       	cpi	r26, 0x06	; 6
    83f8:	b1 07       	cpc	r27, r17
    83fa:	d9 f7       	brne	.-10     	; 0x83f2 <__do_copy_data+0xc>

000083fc <__do_clear_bss>:
    83fc:	10 e1       	ldi	r17, 0x10	; 16
    83fe:	a6 e0       	ldi	r26, 0x06	; 6
    8400:	b1 e0       	ldi	r27, 0x01	; 1
    8402:	01 c0       	rjmp	.+2      	; 0x8406 <.do_clear_bss_start>

00008404 <.do_clear_bss_loop>:
    8404:	1d 92       	st	X+, r1

00008406 <.do_clear_bss_start>:
    8406:	a8 33       	cpi	r26, 0x38	; 56
    8408:	b1 07       	cpc	r27, r17
    840a:	e1 f7       	brne	.-8      	; 0x8404 <.do_clear_bss_loop>

0000840c <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    840c:	0e 94 3a 46 	call	0x8c74	; 0x8c74 <wdt_randomize>
#endif

    MCUSR = 0;
    8410:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    8412:	88 e1       	ldi	r24, 0x18	; 24
    8414:	0f b6       	in	r0, 0x3f	; 63
    8416:	f8 94       	cli
    8418:	80 93 60 00 	sts	0x0060, r24
    841c:	10 92 60 00 	sts	0x0060, r1
    8420:	0f be       	out	0x3f, r0	; 63

00008422 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    8422:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <isEepromFormatted>
    8426:	81 11       	cpse	r24, r1
    8428:	02 c0       	rjmp	.+4      	; 0x842e <Initialize+0xc>
    842a:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <FormatEeprom>

	cli();
    842e:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    8430:	81 e0       	ldi	r24, 0x01	; 1
    8432:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    8436:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    843a:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    843e:	10 92 02 0b 	sts	0x0B02, r1
    8442:	10 92 08 0b 	sts	0x0B08, r1
    8446:	10 92 0e 0b 	sts	0x0B0E, r1
    844a:	10 92 14 0b 	sts	0x0B14, r1
    844e:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    8452:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    8456:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    845a:	92 e1       	ldi	r25, 0x12	; 18
    845c:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    8460:	90 ee       	ldi	r25, 0xE0	; 224
    8462:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    8466:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    846a:	94 e1       	ldi	r25, 0x14	; 20
    846c:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    8470:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    8474:	10 92 f4 0a 	sts	0x0AF4, r1
    8478:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    847c:	10 92 f8 0a 	sts	0x0AF8, r1
    8480:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    8484:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    8488:	0e 94 df 53 	call	0xa7be	; 0xa7be <InitializeVideoMode>
    848c:	80 e7       	ldi	r24, 0x70	; 112
    848e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    8490:	fc 01       	movw	r30, r24
    8492:	25 91       	lpm	r18, Z+
    8494:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    8496:	f9 01       	movw	r30, r18
    8498:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    849a:	30 83       	st	Z, r19
    849c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    849e:	20 e0       	ldi	r18, 0x00	; 0
    84a0:	8e 39       	cpi	r24, 0x9E	; 158
    84a2:	92 07       	cpc	r25, r18
    84a4:	a9 f7       	brne	.-22     	; 0x8490 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    84a6:	78 94       	sei
	
	DisplayLogo();
    84a8:	0e 94 9e 54 	call	0xa93c	; 0xa93c <DisplayLogo>
    84ac:	0e 94 94 6f 	call	0xdf28	; 0xdf28 <main>
    84b0:	0c 94 7e 72 	jmp	0xe4fc	; 0xe4fc <_exit>

000084b4 <__bad_interrupt>:
    84b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000084b8 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    84b8:	0c e0       	ldi	r16, 0x0C	; 12
    84ba:	0a 95       	dec	r16
    84bc:	f1 f7       	brne	.-4      	; 0x84ba <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    84be:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    84c0:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    84c2:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    84c4:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    84c6:	20 91 c0 0b 	lds	r18, 0x0BC0


		clr r16
    84ca:	00 27       	eor	r16, r16

000084cc <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    84cc:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    84ce:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    84d0:	ac 0f       	add	r26, r28
		adc XH,YH
    84d2:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    84d4:	1c 91       	ld	r17, X
		std Z+2,r17
    84d6:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    84d8:	02 17       	cp	r16, r18
		brsh noov
    84da:	08 f4       	brcc	.+2      	; 0x84de <noov>
		mov r17,r16
    84dc:	10 2f       	mov	r17, r16

000084de <noov>:
	noov:
		st X,r17
    84de:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    84e0:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    84e2:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    84e4:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    84e6:	90 f3       	brcs	.-28     	; 0x84cc <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    84e8:	05 e2       	ldi	r16, 0x25	; 37

000084ea <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    84ea:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    84ec:	1a 95       	dec	r17
		brne .-4
    84ee:	f1 f7       	brne	.-4      	; 0x84ec <wait_loop+0x2>

		dec r16
    84f0:	0a 95       	dec	r16
		brne wait_loop
    84f2:	d9 f7       	brne	.-10     	; 0x84ea <wait_loop>

		lds r2,overlay_tile_table
    84f4:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    84f8:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    84fc:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    8500:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    8504:	68 01       	movw	r12, r16
		movw r6,r16
    8506:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    8508:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    850a:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    850c:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    850e:	4e 01       	movw	r8, r28
		clr r0
    8510:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    8512:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    8516:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    8518:	09 f0       	breq	.+2      	; 0x851c <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    851a:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    851c:	09 f0       	breq	.+2      	; 0x8520 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    851e:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    8520:	09 f0       	breq	.+2      	; 0x8524 <wait_loop+0x3a>
		mov r24,r19
    8522:	83 2f       	mov	r24, r19

		breq .+2
    8524:	09 f0       	breq	.+2      	; 0x8528 <wait_loop+0x3e>
		movw r12,r2
    8526:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    8528:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    852a:	a0 2e       	mov	r10, r16
		clr r22
    852c:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    852e:	78 e0       	ldi	r23, 0x08	; 8

00008530 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    8530:	7d d2       	rcall	.+1274   	; 0x8a2c <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    8532:	3c e0       	ldi	r19, 0x0C	; 12
    8534:	3a 95       	dec	r19
    8536:	f1 f7       	brne	.-4      	; 0x8534 <next_tile_line+0x4>
    8538:	00 00       	nop
    853a:	00 00       	nop

		;***draw line***
		call render_tile_line
    853c:	0e 94 cf 42 	call	0x859e	; 0x859e <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    8540:	3f e0       	ldi	r19, 0x0F	; 15
    8542:	3a 95       	dec	r19
    8544:	f1 f7       	brne	.-4      	; 0x8542 <next_tile_line+0x12>
    8546:	00 00       	nop
    8548:	00 00       	nop

		dec r10
    854a:	aa 94       	dec	r10
		breq frame_end
    854c:	a9 f0       	breq	.+42     	; 0x8578 <frame_end>
	
		inc r22
    854e:	63 95       	inc	r22
		lpm ;3 nop
    8550:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    8552:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    8554:	31 f0       	breq	.+12     	; 0x8562 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    8556:	33 e0       	ldi	r19, 0x03	; 3
    8558:	3a 95       	dec	r19
    855a:	f1 f7       	brne	.-4      	; 0x8558 <next_tile_line+0x28>
    855c:	00 00       	nop
    855e:	00 00       	nop
		
		rjmp next_tile_line	
    8560:	e7 cf       	rjmp	.-50     	; 0x8530 <next_tile_line>

00008562 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    8562:	66 27       	eor	r22, r22

		clr r0
    8564:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    8566:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    8568:	c3 0f       	add	r28, r19
		adc YH,r0
    856a:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    856c:	8a 95       	dec	r24
		brne .+2
    856e:	09 f4       	brne	.+2      	; 0x8572 <next_tile_row+0x10>
		movw YL,r8	;main vram
    8570:	e4 01       	movw	r28, r8
		brne .+2
    8572:	09 f4       	brne	.+2      	; 0x8576 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    8574:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    8576:	dc cf       	rjmp	.-72     	; 0x8530 <next_tile_line>

00008578 <frame_end>:

	frame_end:

		WAIT r19,18
    8578:	36 e0       	ldi	r19, 0x06	; 6
    857a:	3a 95       	dec	r19
    857c:	f1 f7       	brne	.-4      	; 0x857a <frame_end+0x2>

		rcall hsync_pulse ;145
    857e:	56 d2       	rcall	.+1196   	; 0x8a2c <hsync_pulse>
	
		clr r1
    8580:	11 24       	eor	r1, r1
		call RestoreBackground
    8582:	0e 94 80 52 	call	0xa500	; 0xa500 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    8586:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    858a:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    858c:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    858e:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    8590:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    8594:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    8596:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    859a:	11 24       	eor	r1, r1


		ret
    859c:	08 95       	ret

0000859e <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    859e:	de 01       	movw	r26, r28

		mul r22,r23
    85a0:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    85a2:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    85a4:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    85a6:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    85a8:	00 0d       	add	r16, r0
		adc r17,r1
    85aa:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    85ac:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    85ae:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    85b0:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    85b2:	00 0d       	add	r16, r0
		adc r17,r1
    85b4:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    85b6:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    85b8:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    85ba:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    85bc:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    85be:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    85c0:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    85c2:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    85c4:	08 f4       	brcc	.+2      	; 0x85c8 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    85c6:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    85c8:	04 0e       	add	r0, r20
	    adc r1,r21
    85ca:	15 1e       	adc	r1, r21

		movw ZL,r0
    85cc:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    85ce:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    85d0:	f0 f0       	brcs	.+60     	; 0x860e <ramloop>

000085d2 <romloop>:
	

	romloop:
	    lpm r16,Z+
    85d2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    85d4:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    85d6:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    85d8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    85da:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    85dc:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    85de:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    85e0:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    85e2:	28 31       	cpi	r18, 0x18	; 24
		nop
    85e4:	00 00       	nop

	    lpm r16,Z+
    85e6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    85e8:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    85ea:	08 f4       	brcc	.+2      	; 0x85ee <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    85ec:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    85ee:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    85f0:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    85f2:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    85f4:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    85f6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    85f8:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    85fa:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    85fc:	1a 95       	dec	r17
   
	    lpm r16,Z+
    85fe:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    8600:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    8602:	05 91       	lpm	r16, Z+

		breq end	
    8604:	31 f1       	breq	.+76     	; 0x8652 <end>
	    movw ZL,r0   	;copy next tile adress
    8606:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8608:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    860a:	18 f7       	brcc	.-58     	; 0x85d2 <romloop>
	
		rjmp .
    860c:	00 c0       	rjmp	.+0      	; 0x860e <ramloop>

0000860e <ramloop>:

	ramloop:

	    ld r16,Z+
    860e:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8610:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    8612:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    8614:	01 91       	ld	r16, Z+
		nop   
    8616:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    8618:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    861a:	23 9f       	mul	r18, r19


	    ld r16,Z+
    861c:	01 91       	ld	r16, Z+
		nop
    861e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    8620:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    8622:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    8624:	00 c0       	rjmp	.+0      	; 0x8626 <ramloop+0x18>

	    ld r16,Z+
    8626:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    8628:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    862a:	08 f0       	brcs	.+2      	; 0x862e <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    862c:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    862e:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    8630:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    8632:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    8634:	15 1e       	adc	r1, r21
		rjmp .
    8636:	00 c0       	rjmp	.+0      	; 0x8638 <ramloop+0x2a>
    
		ld r16,Z+		
    8638:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    863a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    863c:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    863e:	00 c0       	rjmp	.+0      	; 0x8640 <ramloop+0x32>

	    ld r16,Z+	
    8640:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    8642:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    8644:	01 91       	ld	r16, Z+

	    dec r17
    8646:	1a 95       	dec	r17
	    breq end
    8648:	21 f0       	breq	.+8      	; 0x8652 <end>
	
		movw ZL,r0
    864a:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    864c:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    864e:	08 f6       	brcc	.-126    	; 0x85d2 <romloop>
		rjmp ramloop
    8650:	de cf       	rjmp	.-68     	; 0x860e <ramloop>

00008652 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    8652:	08 b9       	out	0x08, r16	; 8
		clr r16	
    8654:	00 27       	eor	r16, r16
		lpm	
    8656:	c8 95       	lpm
		nop
    8658:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    865a:	08 b9       	out	0x08, r16	; 8

		ret
    865c:	08 95       	ret

0000865e <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    865e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    8660:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    8664:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    8668:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    866a:	82 9f       	mul	r24, r18
	add ZL,r0
    866c:	e0 0d       	add	r30, r0
	adc ZH,r1
    866e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8670:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8672:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8674:	62 9f       	mul	r22, r18
	add XL,r0
    8676:	a0 0d       	add	r26, r0
	adc XH,r1
    8678:	b1 1d       	adc	r27, r1

	clr r0
    867a:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    867c:	05 90       	lpm	r0, Z+
    867e:	0d 92       	st	X+, r0
    8680:	05 90       	lpm	r0, Z+
    8682:	0d 92       	st	X+, r0
    8684:	05 90       	lpm	r0, Z+
    8686:	0d 92       	st	X+, r0
    8688:	05 90       	lpm	r0, Z+
    868a:	0d 92       	st	X+, r0
    868c:	05 90       	lpm	r0, Z+
    868e:	0d 92       	st	X+, r0
    8690:	05 90       	lpm	r0, Z+
    8692:	0d 92       	st	X+, r0
    8694:	05 90       	lpm	r0, Z+
    8696:	0d 92       	st	X+, r0
    8698:	05 90       	lpm	r0, Z+
    869a:	0d 92       	st	X+, r0
    869c:	05 90       	lpm	r0, Z+
    869e:	0d 92       	st	X+, r0
    86a0:	05 90       	lpm	r0, Z+
    86a2:	0d 92       	st	X+, r0
    86a4:	05 90       	lpm	r0, Z+
    86a6:	0d 92       	st	X+, r0
    86a8:	05 90       	lpm	r0, Z+
    86aa:	0d 92       	st	X+, r0
    86ac:	05 90       	lpm	r0, Z+
    86ae:	0d 92       	st	X+, r0
    86b0:	05 90       	lpm	r0, Z+
    86b2:	0d 92       	st	X+, r0
    86b4:	05 90       	lpm	r0, Z+
    86b6:	0d 92       	st	X+, r0
    86b8:	05 90       	lpm	r0, Z+
    86ba:	0d 92       	st	X+, r0
    86bc:	05 90       	lpm	r0, Z+
    86be:	0d 92       	st	X+, r0
    86c0:	05 90       	lpm	r0, Z+
    86c2:	0d 92       	st	X+, r0
    86c4:	05 90       	lpm	r0, Z+
    86c6:	0d 92       	st	X+, r0
    86c8:	05 90       	lpm	r0, Z+
    86ca:	0d 92       	st	X+, r0
    86cc:	05 90       	lpm	r0, Z+
    86ce:	0d 92       	st	X+, r0
    86d0:	05 90       	lpm	r0, Z+
    86d2:	0d 92       	st	X+, r0
    86d4:	05 90       	lpm	r0, Z+
    86d6:	0d 92       	st	X+, r0
    86d8:	05 90       	lpm	r0, Z+
    86da:	0d 92       	st	X+, r0
    86dc:	05 90       	lpm	r0, Z+
    86de:	0d 92       	st	X+, r0
    86e0:	05 90       	lpm	r0, Z+
    86e2:	0d 92       	st	X+, r0
    86e4:	05 90       	lpm	r0, Z+
    86e6:	0d 92       	st	X+, r0
    86e8:	05 90       	lpm	r0, Z+
    86ea:	0d 92       	st	X+, r0
    86ec:	05 90       	lpm	r0, Z+
    86ee:	0d 92       	st	X+, r0
    86f0:	05 90       	lpm	r0, Z+
    86f2:	0d 92       	st	X+, r0
    86f4:	05 90       	lpm	r0, Z+
    86f6:	0d 92       	st	X+, r0
    86f8:	05 90       	lpm	r0, Z+
    86fa:	0d 92       	st	X+, r0
    86fc:	05 90       	lpm	r0, Z+
    86fe:	0d 92       	st	X+, r0
    8700:	05 90       	lpm	r0, Z+
    8702:	0d 92       	st	X+, r0
    8704:	05 90       	lpm	r0, Z+
    8706:	0d 92       	st	X+, r0
    8708:	05 90       	lpm	r0, Z+
    870a:	0d 92       	st	X+, r0
    870c:	05 90       	lpm	r0, Z+
    870e:	0d 92       	st	X+, r0
    8710:	05 90       	lpm	r0, Z+
    8712:	0d 92       	st	X+, r0
    8714:	05 90       	lpm	r0, Z+
    8716:	0d 92       	st	X+, r0
    8718:	05 90       	lpm	r0, Z+
    871a:	0d 92       	st	X+, r0
    871c:	05 90       	lpm	r0, Z+
    871e:	0d 92       	st	X+, r0
    8720:	05 90       	lpm	r0, Z+
    8722:	0d 92       	st	X+, r0
    8724:	05 90       	lpm	r0, Z+
    8726:	0d 92       	st	X+, r0
    8728:	05 90       	lpm	r0, Z+
    872a:	0d 92       	st	X+, r0
    872c:	05 90       	lpm	r0, Z+
    872e:	0d 92       	st	X+, r0
    8730:	05 90       	lpm	r0, Z+
    8732:	0d 92       	st	X+, r0
    8734:	05 90       	lpm	r0, Z+
    8736:	0d 92       	st	X+, r0
    8738:	05 90       	lpm	r0, Z+
    873a:	0d 92       	st	X+, r0
    873c:	05 90       	lpm	r0, Z+
    873e:	0d 92       	st	X+, r0
    8740:	05 90       	lpm	r0, Z+
    8742:	0d 92       	st	X+, r0
    8744:	05 90       	lpm	r0, Z+
    8746:	0d 92       	st	X+, r0
    8748:	05 90       	lpm	r0, Z+
    874a:	0d 92       	st	X+, r0
    874c:	05 90       	lpm	r0, Z+
    874e:	0d 92       	st	X+, r0
    8750:	05 90       	lpm	r0, Z+
    8752:	0d 92       	st	X+, r0
    8754:	05 90       	lpm	r0, Z+
    8756:	0d 92       	st	X+, r0
    8758:	05 90       	lpm	r0, Z+
    875a:	0d 92       	st	X+, r0
    875c:	05 90       	lpm	r0, Z+
    875e:	0d 92       	st	X+, r0
    8760:	05 90       	lpm	r0, Z+
    8762:	0d 92       	st	X+, r0
    8764:	05 90       	lpm	r0, Z+
    8766:	0d 92       	st	X+, r0
    8768:	05 90       	lpm	r0, Z+
    876a:	0d 92       	st	X+, r0
    876c:	05 90       	lpm	r0, Z+
    876e:	0d 92       	st	X+, r0
    8770:	05 90       	lpm	r0, Z+
    8772:	0d 92       	st	X+, r0
    8774:	05 90       	lpm	r0, Z+
    8776:	0d 92       	st	X+, r0
    8778:	05 90       	lpm	r0, Z+
    877a:	0d 92       	st	X+, r0


	clr r1
    877c:	11 24       	eor	r1, r1
	ret
    877e:	08 95       	ret

00008780 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    8780:	0f 93       	push	r16
	push r17
    8782:	1f 93       	push	r17
	push YL
    8784:	cf 93       	push	r28
	push YH
    8786:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    8788:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    878a:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    878c:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    878e:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    8790:	e0 0d       	add	r30, r0
	adc ZH,r1
    8792:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    8794:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    8796:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    8798:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    879a:	8e 9f       	mul	r24, r30
	movw r26,r0
    879c:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    879e:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    87a0:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    87a2:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    87a4:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    87a6:	00 24       	eor	r0, r0
	add YL,r1
    87a8:	c1 0d       	add	r28, r1
	adc YH,r0		
    87aa:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    87ac:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    87ae:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    87b0:	ea 0f       	add	r30, r26
	adc ZH,r27
    87b2:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    87b4:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    87b6:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    87b8:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    87ba:	69 9f       	mul	r22, r25
	add XL,r0
    87bc:	a0 0d       	add	r26, r0
	adc XH,r1
    87be:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    87c0:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    87c2:	dd 27       	eor	r29, r29

	cpi r20,0	
    87c4:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    87c6:	51 f4       	brne	.+20     	; 0x87dc <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    87c8:	a2 0f       	add	r26, r18
	adc XH,r1
    87ca:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    87cc:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    87ce:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    87d0:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    87d2:	11 c0       	rjmp	.+34     	; 0x87f6 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    87d4:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    87d6:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    87d8:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    87da:	0d c0       	rjmp	.+26     	; 0x87f6 <x_check_end>

000087dc <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    87dc:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    87de:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    87e0:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    87e2:	04 c0       	rjmp	.+8      	; 0x87ec <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    87e4:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    87e6:	e8 0f       	add	r30, r24
	adc ZH,r1	
    87e8:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    87ea:	05 c0       	rjmp	.+10     	; 0x87f6 <x_check_end>

000087ec <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    87ec:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    87ee:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    87f0:	e2 0f       	add	r30, r18
	adc ZH,r1
    87f2:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    87f4:	31 97       	sbiw	r30, 0x01	; 1

000087f6 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    87f6:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    87f8:	41 f4       	brne	.+16     	; 0x880a <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    87fa:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    87fc:	93 9f       	mul	r25, r19
	add XL,r0
    87fe:	a0 0d       	add	r26, r0
	adc XH,r1
    8800:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    8802:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    8804:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    8806:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    8808:	0a c0       	rjmp	.+20     	; 0x881e <y_check_end>

0000880a <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    880a:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    880c:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    880e:	63 2f       	mov	r22, r19
	dec r22
    8810:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    8812:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    8814:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    8816:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    8818:	56 9f       	mul	r21, r22
	add ZL,r0
    881a:	e0 0d       	add	r30, r0
	adc ZH,r1	
    881c:	f1 1d       	adc	r31, r1

0000881e <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    881e:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    8820:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    8822:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    8824:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    8826:	00 ff       	sbrs	r16, 0
	clr r23
    8828:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    882a:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    882c:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    882e:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    8830:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    8832:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    8834:	59 1b       	sub	r21, r25

00008836 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    8836:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    8838:	48 1b       	sub	r20, r24

0000883a <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    883a:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    883c:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    883e:	2c 93       	st	X, r18
	adiw XL,1
    8840:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    8842:	e6 0f       	add	r30, r22
	adc ZH,r23
    8844:	f7 1f       	adc	r31, r23
	dec r20
    8846:	4a 95       	dec	r20
	brne x_loop
    8848:	c1 f7       	brne	.-16     	; 0x883a <x_loop>

	add ZL,YL		;src+=srcXdiff
    884a:	ec 0f       	add	r30, r28
	adc ZH,YH
    884c:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    884e:	a8 0f       	add	r26, r24
	adc XH,r1
    8850:	b1 1d       	adc	r27, r1
	dec r21
    8852:	5a 95       	dec	r21
	brne y_loop
    8854:	81 f7       	brne	.-32     	; 0x8836 <y_loop>


	pop YH
    8856:	df 91       	pop	r29
	pop YL
    8858:	cf 91       	pop	r28
	pop r17
    885a:	1f 91       	pop	r17
	pop r16
    885c:	0f 91       	pop	r16
	ret
    885e:	08 95       	ret

00008860 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    8860:	0f 92       	push	r0
	push r1
    8862:	1f 92       	push	r1
	push ZL;2
    8864:	ef 93       	push	r30
	push ZH;2
    8866:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8868:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    886a:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    886c:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    8870:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    8872:	f1 e0       	ldi	r31, 0x01	; 1

00008874 <latency_loop>:
latency_loop:
	cp ZL,ZH
    8874:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    8876:	00 f0       	brcs	.+0      	; 0x8878 <latency_loop+0x4>
	inc ZH
    8878:	f3 95       	inc	r31
	cpi ZH,10
    887a:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    887c:	d8 f3       	brcs	.-10     	; 0x8874 <latency_loop>
	jmp .
    887e:	0c 94 41 44 	jmp	0x8882	; 0x8882 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    8882:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8886:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8888:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    888c:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    8890:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    8892:	57 c0       	rjmp	.+174    	; 0x8942 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8894:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    8896:	98 f0       	brcs	.+38     	; 0x88be <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    8898:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    889a:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    889e:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    88a0:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    88a4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    88a6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    88a8:	26 f4       	brtc	.+8      	; 0x88b2 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    88aa:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    88ac:	0e 94 27 45 	call	0x8a4e	; 0x8a4e <update_sound>
	rjmp sync_end
    88b0:	b6 c0       	rjmp	.+364    	; 0x8a1e <sync_end>

000088b2 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    88b2:	e5 e1       	ldi	r30, 0x15	; 21
    88b4:	ea 95       	dec	r30
    88b6:	f1 f7       	brne	.-4      	; 0x88b4 <sync_pre_eq_no_sound_update+0x2>
    88b8:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    88ba:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    88bc:	b0 c0       	rjmp	.+352    	; 0x8a1e <sync_end>

000088be <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    88be:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    88c0:	38 f1       	brcs	.+78     	; 0x8910 <sync_post_eq>

	rjmp .
    88c2:	00 c0       	rjmp	.+0      	; 0x88c4 <sync_eq+0x6>
	rjmp .
    88c4:	00 c0       	rjmp	.+0      	; 0x88c6 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    88c6:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    88c8:	e0 fb       	bst	r30, 0
	ldi ZL,4
    88ca:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    88cc:	16 f4       	brtc	.+4      	; 0x88d2 <sync_eq_skip>
	
	call update_sound
    88ce:	0e 94 27 45 	call	0x8a4e	; 0x8a4e <update_sound>

000088d2 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    88d2:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    88d4:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    88d8:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    88da:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    88de:	9f c0       	rjmp	.+318    	; 0x8a1e <sync_end>

000088e0 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    88e0:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    88e2:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    88e4:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    88e6:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    88ea:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    88ec:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    88ee:	00 f0       	brcs	.+0      	; 0x88f0 <__vector_14+0x10>

	cpi ZL,2
    88f0:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    88f2:	00 f0       	brcs	.+0      	; 0x88f4 <__vector_14+0x14>

	cpi ZL,3
    88f4:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    88f6:	00 f0       	brcs	.+0      	; 0x88f8 <__vector_14+0x18>

	cpi ZL,4
    88f8:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    88fa:	00 f0       	brcs	.+0      	; 0x88fc <__vector_14+0x1c>

	cpi ZL,5
    88fc:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    88fe:	00 f0       	brcs	.+0      	; 0x8900 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    8900:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    8902:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    8904:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    8908:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    890a:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    890c:	ef 91       	pop	r30
	reti
    890e:	18 95       	reti

00008910 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    8910:	00 c0       	rjmp	.+0      	; 0x8912 <sync_post_eq+0x2>

	bst ZL,0
    8912:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8914:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    8916:	26 f4       	brtc	.+8      	; 0x8920 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    8918:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    891a:	0e 94 27 45 	call	0x8a4e	; 0x8a4e <update_sound>
	rjmp sync_pre_eq_cont
    891e:	05 c0       	rjmp	.+10     	; 0x892a <sync_pre_eq_cont>

00008920 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    8920:	e5 e1       	ldi	r30, 0x15	; 21
    8922:	ea 95       	dec	r30
    8924:	f1 f7       	brne	.-4      	; 0x8922 <sync_post_eq_no_sound_update+0x2>
    8926:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    8928:	28 9a       	sbi	0x05, 0	; 5

0000892a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    892a:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    892e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    8930:	09 f0       	breq	.+2      	; 0x8934 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    8932:	75 c0       	rjmp	.+234    	; 0x8a1e <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    8934:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    8936:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    893a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    893c:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    8940:	6e c0       	rjmp	.+220    	; 0x8a1e <sync_end>

00008942 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    8942:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8944:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    8948:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    894a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    894e:	00 c0       	rjmp	.+0      	; 0x8950 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8950:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    8952:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8954:	00 c0       	rjmp	.+0      	; 0x8956 <sync_hsync+0x14>
	call update_sound
    8956:	0e 94 27 45 	call	0x8a4e	; 0x8a4e <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    895a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    895c:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8960:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    8962:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    8966:	ef 17       	cp	r30, r31
	brsh no_render
    8968:	d0 f4       	brcc	.+52     	; 0x899e <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    896a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    896c:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8970:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    8972:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    8976:	f0 19       	sub	r31, r0
	cp ZL,ZH
    8978:	ef 17       	cp	r30, r31
	brlo no_render
    897a:	88 f0       	brcs	.+34     	; 0x899e <no_render>

	;push r1-r29
	ldi ZL,29
    897c:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    897e:	ff 27       	eor	r31, r31

00008980 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    8980:	00 80       	ld	r0, Z
	push r0
    8982:	0f 92       	push	r0
	dec ZL
    8984:	ea 95       	dec	r30
	brne push_loop	
    8986:	e1 f7       	brne	.-8      	; 0x8980 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    8988:	06 e0       	ldi	r16, 0x06	; 6
    898a:	0a 95       	dec	r16
    898c:	f1 f7       	brne	.-4      	; 0x898a <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    898e:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8992:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    8994:	ff 27       	eor	r31, r31

00008996 <pop_loop>:
pop_loop:
	pop r0
    8996:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    8998:	01 92       	st	Z+, r0
	cpi ZL,30
    899a:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    899c:	e0 f3       	brcs	.-8      	; 0x8996 <pop_loop>

0000899e <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    899e:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    89a2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    89a4:	09 f0       	breq	.+2      	; 0x89a8 <no_render+0xa>
	rjmp sync_end
    89a6:	3b c0       	rjmp	.+118    	; 0x8a1e <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    89a8:	2f 93       	push	r18
	push r19
    89aa:	3f 93       	push	r19
	push r20
    89ac:	4f 93       	push	r20
	push r21
    89ae:	5f 93       	push	r21
	push r22
    89b0:	6f 93       	push	r22
	push r23
    89b2:	7f 93       	push	r23
	push r24
    89b4:	8f 93       	push	r24
	push r25
    89b6:	9f 93       	push	r25
	push r26
    89b8:	af 93       	push	r26
	push r27
    89ba:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    89bc:	78 94       	sei
	clr r1
    89be:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    89c0:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    89c2:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    89c6:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    89c8:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    89cc:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    89d0:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    89d4:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    89d8:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    89dc:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    89e0:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    89e4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    89e6:	f1 05       	cpc	r31, r1
	breq .+2 
    89e8:	09 f0       	breq	.+2      	; 0x89ec <no_render+0x4e>
	icall
    89ea:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    89ec:	0e 94 bc 46 	call	0x8d78	; 0x8d78 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    89f0:	0e 94 20 55 	call	0xaa40	; 0xaa40 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    89f4:	0e 94 21 45 	call	0x8a42	; 0x8a42 <process_music>
	clr r1
    89f8:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    89fa:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    89fe:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    8a02:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8a04:	f1 05       	cpc	r31, r1
	breq .+2 
    8a06:	09 f0       	breq	.+2      	; 0x8a0a <no_render+0x6c>
	icall
    8a08:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    8a0a:	bf 91       	pop	r27
	pop r26
    8a0c:	af 91       	pop	r26
	pop r25
    8a0e:	9f 91       	pop	r25
	pop r24
    8a10:	8f 91       	pop	r24
	pop r23
    8a12:	7f 91       	pop	r23
	pop r22
    8a14:	6f 91       	pop	r22
	pop r21
    8a16:	5f 91       	pop	r21
	pop r20
    8a18:	4f 91       	pop	r20
	pop r19
    8a1a:	3f 91       	pop	r19
	pop r18
    8a1c:	2f 91       	pop	r18

00008a1e <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8a1e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8a20:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    8a22:	ff 91       	pop	r31
	pop ZL
    8a24:	ef 91       	pop	r30
	pop r1
    8a26:	1f 90       	pop	r1
	pop r0
    8a28:	0f 90       	pop	r0
	reti
    8a2a:	18 95       	reti

00008a2c <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8a2c:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    8a2e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8a30:	00 c0       	rjmp	.+0      	; 0x8a32 <hsync_pulse+0x6>
	call update_sound
    8a32:	0e 94 27 45 	call	0x8a4e	; 0x8a4e <update_sound>

	lds ZL,sync_pulse
    8a36:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8a3a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8a3c:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    8a40:	08 95       	ret

00008a42 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8a42:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    8a46:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8a48:	0e 94 b1 49 	call	0x9362	; 0x9362 <ProcessMusic>
#endif

	ret
    8a4c:	08 95       	ret

00008a4e <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    8a4e:	0f 93       	push	r16
	push r17
    8a50:	1f 93       	push	r17
	push r18
    8a52:	2f 93       	push	r18
	push r28
    8a54:	cf 93       	push	r28
	push r29
    8a56:	df 93       	push	r29

	mov r18,ZL
    8a58:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    8a5a:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    8a5e:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    8a62:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8a64:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    8a68:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    8a6c:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    8a70:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8a72:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8a74:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    8a78:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    8a7c:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    8a80:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8a82:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8a84:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    8a86:	d0 2d       	mov	r29, r0
	nop
    8a88:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8a8a:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    8a8e:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    8a92:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8a94:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    8a98:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    8a9c:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    8aa0:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8aa2:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    8aa4:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    8aa8:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    8aac:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8ab0:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8ab2:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    8ab4:	20 ff       	sbrs	r18, 0
	rjmp .
    8ab6:	00 c0       	rjmp	.+0      	; 0x8ab8 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8ab8:	01 03       	mulsu	r16, r17
	clr r0
    8aba:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8abc:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8abe:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    8ac0:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8ac2:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    8ac6:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    8aca:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8acc:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    8ad0:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    8ad4:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    8ad8:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    8ada:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    8adc:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    8ae0:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    8ae4:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    8ae8:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    8aea:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8aec:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    8aee:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    8af0:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    8af4:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    8af8:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    8afc:	ea 95       	dec	r30
	brpl ch4_no_shift	
    8afe:	92 f4       	brpl	.+36     	; 0x8b24 <ch4_no_shift>

	lds ZH,tr4_params
    8b00:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    8b04:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    8b06:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    8b08:	00 2e       	mov	r0, r16
	lsr r0
    8b0a:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    8b0c:	00 26       	eor	r0, r16
	bst r0,0
    8b0e:	00 fa       	bst	r0, 0
	lsr r17
    8b10:	16 95       	lsr	r17
	ror r16
    8b12:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    8b14:	16 f9       	bld	r17, 6
	sbrs ZH,0
    8b16:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    8b18:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    8b1a:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    8b1e:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    8b22:	03 c0       	rjmp	.+6      	; 0x8b2a <ch4_end>

00008b24 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    8b24:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    8b26:	1a 95       	dec	r17
	brne .-4
    8b28:	f1 f7       	brne	.-4      	; 0x8b26 <ch4_no_shift+0x2>

00008b2a <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    8b2a:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    8b2e:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8b30:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8b32:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    8b34:	21 ff       	sbrs	r18, 1
	rjmp .
    8b36:	00 c0       	rjmp	.+0      	; 0x8b38 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    8b38:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    8b3a:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8b3c:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    8b40:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    8b42:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8b44:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    8b46:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    8b48:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    8b4c:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    8b50:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    8b52:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    8b56:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    8b5a:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    8b5e:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8b60:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    8b64:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    8b66:	f0 1f       	adc	r31, r16

	movw r16,ZL
    8b68:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    8b6a:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    8b6e:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    8b72:	00 19       	sub	r16, r0
	sbc r17,r1
    8b74:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    8b76:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    8b7a:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    8b7e:	e0 15       	cp	r30, r0
	cpc ZH,r1
    8b80:	f1 05       	cpc	r31, r1
	brlo .+2
    8b82:	08 f0       	brcs	.+2      	; 0x8b86 <ch4_end+0x5c>
	movw ZL,r16
    8b84:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    8b86:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    8b8a:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    8b8e:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8b90:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    8b94:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    8b96:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8b98:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    8b9a:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8b9c:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8b9e:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8ba0:	d0 05       	cpc	r29, r0
	brlt .+2
    8ba2:	0c f0       	brlt	.+2      	; 0x8ba6 <ch4_end+0x7c>
	ldi r28,127
    8ba4:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    8ba6:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    8ba8:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8baa:	d0 05       	cpc	r29, r0
	brge .+2
    8bac:	0c f4       	brge	.+2      	; 0x8bb0 <ch4_end+0x86>
	ldi r28,-128
    8bae:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    8bb0:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    8bb2:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    8bb6:	df 91       	pop	r29
	pop r28
    8bb8:	cf 91       	pop	r28
	pop r18
    8bba:	2f 91       	pop	r18
	pop r17
    8bbc:	1f 91       	pop	r17
	pop r16
    8bbe:	0f 91       	pop	r16
	
	ret
    8bc0:	08 95       	ret

00008bc2 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    8bc2:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    8bc6:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    8bca:	08 95       	ret

00008bcc <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8bcc:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8bce:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    8bd0:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8bd2:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    8bd4:	68 e1       	ldi	r22, 0x18	; 24

00008bd6 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    8bd6:	6d 93       	st	X+, r22
	sbiw r30,1
    8bd8:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    8bda:	e9 f7       	brne	.-6      	; 0x8bd6 <fill_vram_loop>

	clr r1
    8bdc:	11 24       	eor	r1, r1

	ret
    8bde:	08 95       	ret

00008be0 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    8be0:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    8be4:	45 0f       	add	r20, r21
	rjmp SetTile	
    8be6:	00 c0       	rjmp	.+0      	; 0x8be8 <SetTile>

00008be8 <SetTile>:

	ret

#else

	clr r25
    8be8:	99 27       	eor	r25, r25
	clr r23	
    8bea:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    8bec:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    8bee:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    8bf0:	08 0e       	add	r0, r24
	adc r1,r25
    8bf2:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    8bf4:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8bf6:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    8bf8:	a0 0d       	add	r26, r0
	adc XH,r1
    8bfa:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    8bfc:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    8bfe:	4c 93       	st	X, r20

	clr r1
    8c00:	11 24       	eor	r1, r1

	ret
    8c02:	08 95       	ret

00008c04 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    8c04:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    8c08:	08 95       	ret

00008c0a <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8c0a:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    8c0e:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    8c12:	08 95       	ret

00008c14 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    8c14:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    8c18:	81 70       	andi	r24, 0x01	; 1
	ret
    8c1a:	08 95       	ret

00008c1c <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8c1c:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    8c20:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    8c22:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    8c26:	08 95       	ret

00008c28 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8c28:	88 23       	and	r24, r24
	brne rj_p2
    8c2a:	29 f4       	brne	.+10     	; 0x8c36 <rj_p2>
		
	lds r24,joypad1_status_lo
    8c2c:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    8c30:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    8c34:	08 95       	ret

00008c36 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8c36:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    8c3a:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    8c3e:	08 95       	ret

00008c40 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    8c40:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    8c42:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8c44:	f1 f7       	brne	.-4      	; 0x8c42 <WaitUs+0x2>
	nop
    8c46:	00 00       	nop
	sbiw r24,1
    8c48:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8c4a:	d1 f7       	brne	.-12     	; 0x8c40 <WaitUs>

	ret
    8c4c:	08 95       	ret

00008c4e <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8c4e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    8c50:	fe cf       	rjmp	.-4      	; 0x8c4e <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8c52:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8c54:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8c56:	60 bd       	out	0x20, r22	; 32
   cli
    8c58:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8c5a:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8c5c:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    8c5e:	78 94       	sei
   ret
    8c60:	08 95       	ret

00008c62 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8c62:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8c64:	fe cf       	rjmp	.-4      	; 0x8c62 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8c66:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8c68:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8c6a:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8c6c:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    8c6e:	80 b5       	in	r24, 0x20	; 32
   sei
    8c70:	78 94       	sei
   ret
    8c72:	08 95       	ret

00008c74 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8c74:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8c76:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8c7a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8c7e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8c80:	80 93 81 00 	sts	0x0081, r24

		cli
    8c84:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8c86:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8c88:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8c8c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8c8e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    8c92:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    8c94:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8c98:	90 93 60 00 	sts	0x0060, r25
	
		sei
    8c9c:	78 94       	sei

00008c9e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    8c9e:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    8ca2:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    8ca4:	e0 f3       	brcs	.-8      	; 0x8c9e <wait>

		ret
    8ca6:	08 95       	ret

00008ca8 <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    8ca8:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    8cac:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    8cb0:	08 95       	ret

00008cb2 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    8cb2:	0f 93       	push	r16
		push r17
    8cb4:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    8cb6:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8cb8:	0f 93       	push	r16

		lds r16,sync_pulse
    8cba:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    8cbe:	03 95       	inc	r16
		sts sync_pulse,r16
    8cc0:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    8cc4:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8cc6:	08 c0       	rjmp	.+16     	; 0x8cd8 <__vector_8+0x26>
		lds r17,random_value
    8cc8:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8ccc:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8cd0:	10 27       	eor	r17, r16
		sts random_value,r17
    8cd2:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    8cd6:	07 c0       	rjmp	.+14     	; 0x8ce6 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    8cd8:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8cdc:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8ce0:	10 27       	eor	r17, r16
		sts random_value+1,r17
    8ce2:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    8ce6:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8ce8:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8cec:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8cee:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    8cf0:	1f 91       	pop	r17
		pop r16
    8cf2:	0f 91       	pop	r16
		reti
    8cf4:	18 95       	reti

00008cf6 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8cf6:	98 e0       	ldi	r25, 0x08	; 8
    8cf8:	88 e1       	ldi	r24, 0x18	; 24
    8cfa:	0f b6       	in	r0, 0x3f	; 63
    8cfc:	f8 94       	cli
    8cfe:	a8 95       	wdr
    8d00:	80 93 60 00 	sts	0x0060, r24
    8d04:	0f be       	out	0x3f, r0	; 63
    8d06:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8d0a:	ff cf       	rjmp	.-2      	; 0x8d0a <SoftReset+0x14>

00008d0c <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8d0c:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8d0e:	c8 95       	lpm
    8d10:	c8 95       	lpm
		Wait200ns();
    8d12:	c8 95       	lpm
    8d14:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    8d16:	12 98       	cbi	0x02, 2	; 2
    8d18:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8d1a:	80 e0       	ldi	r24, 0x00	; 0
    8d1c:	90 e0       	ldi	r25, 0x00	; 0
    8d1e:	20 e0       	ldi	r18, 0x00	; 0
    8d20:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    8d22:	36 95       	lsr	r19
    8d24:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    8d26:	96 95       	lsr	r25
    8d28:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8d2a:	c8 95       	lpm
    8d2c:	c8 95       	lpm
			Wait200ns();
    8d2e:	c8 95       	lpm
    8d30:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    8d32:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    8d34:	00 9b       	sbis	0x00, 0	; 0
    8d36:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8d38:	01 9b       	sbis	0x00, 1	; 0
    8d3a:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8d3c:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8d3e:	c8 95       	lpm
    8d40:	c8 95       	lpm
			Wait200ns();
    8d42:	c8 95       	lpm
    8d44:	c8 95       	lpm
    8d46:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8d48:	61 f7       	brne	.-40     	; 0x8d22 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8d4a:	30 93 f2 0a 	sts	0x0AF2, r19
    8d4e:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    8d52:	90 93 f6 0a 	sts	0x0AF6, r25
    8d56:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8d5a:	80 91 f1 0a 	lds	r24, 0x0AF1
    8d5e:	90 91 f2 0a 	lds	r25, 0x0AF2
    8d62:	0f 97       	sbiw	r24, 0x0f	; 15
    8d64:	31 f0       	breq	.+12     	; 0x8d72 <ReadButtons+0x66>
    8d66:	80 91 f5 0a 	lds	r24, 0x0AF5
    8d6a:	90 91 f6 0a 	lds	r25, 0x0AF6
    8d6e:	0f 97       	sbiw	r24, 0x0f	; 15
    8d70:	11 f4       	brne	.+4      	; 0x8d76 <ReadButtons+0x6a>
		SoftReset();
    8d72:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <SoftReset>
    8d76:	08 95       	ret

00008d78 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    8d78:	10 92 3f 0b 	sts	0x0B3F, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8d7c:	00 99       	sbic	0x00, 0	; 0
    8d7e:	03 c0       	rjmp	.+6      	; 0x8d86 <ReadControllers+0xe>
    8d80:	81 e0       	ldi	r24, 0x01	; 1
    8d82:	80 93 3f 0b 	sts	0x0B3F, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    8d86:	01 99       	sbic	0x00, 1	; 0
    8d88:	05 c0       	rjmp	.+10     	; 0x8d94 <ReadControllers+0x1c>
    8d8a:	80 91 3f 0b 	lds	r24, 0x0B3F
    8d8e:	82 60       	ori	r24, 0x02	; 2
    8d90:	80 93 3f 0b 	sts	0x0B3F, r24
			
	//read the standard buttons
	ReadButtons();
    8d94:	0c 94 86 46 	jmp	0x8d0c	; 0x8d0c <ReadButtons>

00008d98 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8d98:	cf 93       	push	r28
    8d9a:	df 93       	push	r29
    8d9c:	c0 e0       	ldi	r28, 0x00	; 0
    8d9e:	d0 e0       	ldi	r29, 0x00	; 0
    8da0:	fe 01       	movw	r30, r28
    8da2:	e2 56       	subi	r30, 0x62	; 98
    8da4:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    8da6:	64 91       	lpm	r22, Z
    8da8:	ce 01       	movw	r24, r28
    8daa:	0e 94 27 46 	call	0x8c4e	; 0x8c4e <WriteEeprom>
    8dae:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    8db0:	c0 32       	cpi	r28, 0x20	; 32
    8db2:	d1 05       	cpc	r29, r1
    8db4:	a9 f7       	brne	.-22     	; 0x8da0 <FormatEeprom+0x8>
    8db6:	c0 e2       	ldi	r28, 0x20	; 32
    8db8:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8dba:	6f ef       	ldi	r22, 0xFF	; 255
    8dbc:	ce 01       	movw	r24, r28
    8dbe:	0e 94 27 46 	call	0x8c4e	; 0x8c4e <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    8dc2:	6f ef       	ldi	r22, 0xFF	; 255
    8dc4:	ce 01       	movw	r24, r28
    8dc6:	01 96       	adiw	r24, 0x01	; 1
    8dc8:	0e 94 27 46 	call	0x8c4e	; 0x8c4e <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    8dcc:	a0 96       	adiw	r28, 0x20	; 32
    8dce:	c1 15       	cp	r28, r1
    8dd0:	88 e0       	ldi	r24, 0x08	; 8
    8dd2:	d8 07       	cpc	r29, r24
    8dd4:	91 f7       	brne	.-28     	; 0x8dba <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    8dd6:	df 91       	pop	r29
    8dd8:	cf 91       	pop	r28
    8dda:	08 95       	ret

00008ddc <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    8ddc:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    8dde:	80 e0       	ldi	r24, 0x00	; 0
    8de0:	90 e0       	ldi	r25, 0x00	; 0
    8de2:	0e 94 31 46 	call	0x8c62	; 0x8c62 <ReadEeprom>
    8de6:	c8 2f       	mov	r28, r24
    8de8:	81 e0       	ldi	r24, 0x01	; 1
    8dea:	90 e0       	ldi	r25, 0x00	; 0
    8dec:	0e 94 31 46 	call	0x8c62	; 0x8c62 <ReadEeprom>
    8df0:	28 2f       	mov	r18, r24
    8df2:	30 e0       	ldi	r19, 0x00	; 0
    8df4:	32 2f       	mov	r19, r18
    8df6:	22 27       	eor	r18, r18
    8df8:	2c 0f       	add	r18, r28
    8dfa:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8dfc:	81 e0       	ldi	r24, 0x01	; 1
    8dfe:	2a 35       	cpi	r18, 0x5A	; 90
    8e00:	35 45       	sbci	r19, 0x55	; 85
    8e02:	09 f0       	breq	.+2      	; 0x8e06 <isEepromFormatted+0x2a>
    8e04:	80 e0       	ldi	r24, 0x00	; 0
}
    8e06:	cf 91       	pop	r28
    8e08:	08 95       	ret

00008e0a <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8e0a:	cf 92       	push	r12
    8e0c:	df 92       	push	r13
    8e0e:	ef 92       	push	r14
    8e10:	ff 92       	push	r15
    8e12:	0f 93       	push	r16
    8e14:	1f 93       	push	r17
    8e16:	cf 93       	push	r28
    8e18:	df 93       	push	r29
    8e1a:	1f 92       	push	r1
    8e1c:	cd b7       	in	r28, 0x3d	; 61
    8e1e:	de b7       	in	r29, 0x3e	; 62
    8e20:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8e22:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <isEepromFormatted>
    8e26:	88 23       	and	r24, r24
    8e28:	09 f4       	brne	.+2      	; 0x8e2c <EepromWriteBlock+0x22>
    8e2a:	4d c0       	rjmp	.+154    	; 0x8ec6 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    8e2c:	f6 01       	movw	r30, r12
    8e2e:	80 81       	ld	r24, Z
    8e30:	91 81       	ldd	r25, Z+1	; 0x01
    8e32:	8f 3f       	cpi	r24, 0xFF	; 255
    8e34:	ff ef       	ldi	r31, 0xFF	; 255
    8e36:	9f 07       	cpc	r25, r31
    8e38:	09 f4       	brne	.+2      	; 0x8e3c <EepromWriteBlock+0x32>
    8e3a:	47 c0       	rjmp	.+142    	; 0x8eca <EepromWriteBlock+0xc0>
    8e3c:	8a 35       	cpi	r24, 0x5A	; 90
    8e3e:	95 45       	sbci	r25, 0x55	; 85
    8e40:	09 f4       	brne	.+2      	; 0x8e44 <EepromWriteBlock+0x3a>
    8e42:	43 c0       	rjmp	.+134    	; 0x8eca <EepromWriteBlock+0xc0>
    8e44:	00 e2       	ldi	r16, 0x20	; 32
    8e46:	10 e0       	ldi	r17, 0x00	; 0
    8e48:	f1 2c       	mov	r15, r1
    8e4a:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8e4c:	c8 01       	movw	r24, r16
    8e4e:	49 83       	std	Y+1, r20	; 0x01
    8e50:	0e 94 31 46 	call	0x8c62	; 0x8c62 <ReadEeprom>
    8e54:	e8 2e       	mov	r14, r24
    8e56:	c8 01       	movw	r24, r16
    8e58:	01 96       	adiw	r24, 0x01	; 1
    8e5a:	0e 94 31 46 	call	0x8c62	; 0x8c62 <ReadEeprom>
    8e5e:	28 2f       	mov	r18, r24
    8e60:	30 e0       	ldi	r19, 0x00	; 0
    8e62:	32 2f       	mov	r19, r18
    8e64:	22 27       	eor	r18, r18
    8e66:	c9 01       	movw	r24, r18
    8e68:	8e 0d       	add	r24, r14
    8e6a:	91 1d       	adc	r25, r1
		if(id==block->id){
    8e6c:	f6 01       	movw	r30, r12
    8e6e:	20 81       	ld	r18, Z
    8e70:	31 81       	ldd	r19, Z+1	; 0x01
    8e72:	49 81       	ldd	r20, Y+1	; 0x01
    8e74:	82 17       	cp	r24, r18
    8e76:	93 07       	cpc	r25, r19
    8e78:	19 f4       	brne	.+6      	; 0x8e80 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8e7a:	ff 20       	and	r15, r15
    8e7c:	89 f0       	breq	.+34     	; 0x8ea0 <EepromWriteBlock+0x96>
    8e7e:	0c c0       	rjmp	.+24     	; 0x8e98 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    8e80:	01 96       	adiw	r24, 0x01	; 1
    8e82:	19 f4       	brne	.+6      	; 0x8e8a <EepromWriteBlock+0x80>
    8e84:	f1 10       	cpse	r15, r1
    8e86:	01 c0       	rjmp	.+2      	; 0x8e8a <EepromWriteBlock+0x80>
    8e88:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    8e8a:	4f 5f       	subi	r20, 0xFF	; 255
    8e8c:	00 5e       	subi	r16, 0xE0	; 224
    8e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    8e90:	40 34       	cpi	r20, 0x40	; 64
    8e92:	e1 f6       	brne	.-72     	; 0x8e4c <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8e94:	ff 20       	and	r15, r15
    8e96:	d9 f0       	breq	.+54     	; 0x8ece <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8e98:	20 e2       	ldi	r18, 0x20	; 32
    8e9a:	f2 9e       	mul	r15, r18
    8e9c:	80 01       	movw	r16, r0
    8e9e:	11 24       	eor	r1, r1
    8ea0:	76 01       	movw	r14, r12
    8ea2:	80 e2       	ldi	r24, 0x20	; 32
    8ea4:	e8 0e       	add	r14, r24
    8ea6:	f1 1c       	adc	r15, r1
    8ea8:	0c 19       	sub	r16, r12
    8eaa:	1d 09       	sbc	r17, r13
    8eac:	c6 01       	movw	r24, r12
    8eae:	80 0f       	add	r24, r16
    8eb0:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    8eb2:	f6 01       	movw	r30, r12
    8eb4:	61 91       	ld	r22, Z+
    8eb6:	6f 01       	movw	r12, r30
    8eb8:	0e 94 27 46 	call	0x8c4e	; 0x8c4e <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    8ebc:	ce 14       	cp	r12, r14
    8ebe:	df 04       	cpc	r13, r15
    8ec0:	a9 f7       	brne	.-22     	; 0x8eac <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    8ec2:	80 e0       	ldi	r24, 0x00	; 0
    8ec4:	05 c0       	rjmp	.+10     	; 0x8ed0 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8ec6:	84 e0       	ldi	r24, 0x04	; 4
    8ec8:	03 c0       	rjmp	.+6      	; 0x8ed0 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    8eca:	81 e0       	ldi	r24, 0x01	; 1
    8ecc:	01 c0       	rjmp	.+2      	; 0x8ed0 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8ece:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    8ed0:	0f 90       	pop	r0
    8ed2:	df 91       	pop	r29
    8ed4:	cf 91       	pop	r28
    8ed6:	1f 91       	pop	r17
    8ed8:	0f 91       	pop	r16
    8eda:	ff 90       	pop	r15
    8edc:	ef 90       	pop	r14
    8ede:	df 90       	pop	r13
    8ee0:	cf 90       	pop	r12
    8ee2:	08 95       	ret

00008ee4 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    8ee4:	df 92       	push	r13
    8ee6:	ef 92       	push	r14
    8ee8:	ff 92       	push	r15
    8eea:	0f 93       	push	r16
    8eec:	1f 93       	push	r17
    8eee:	cf 93       	push	r28
    8ef0:	df 93       	push	r29
    8ef2:	7c 01       	movw	r14, r24
    8ef4:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8ef6:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <isEepromFormatted>
    8efa:	88 23       	and	r24, r24
    8efc:	89 f1       	breq	.+98     	; 0x8f60 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8efe:	8f ef       	ldi	r24, 0xFF	; 255
    8f00:	e8 16       	cp	r14, r24
    8f02:	f8 06       	cpc	r15, r24
    8f04:	79 f1       	breq	.+94     	; 0x8f64 <EepromReadBlock+0x80>
    8f06:	00 e0       	ldi	r16, 0x00	; 0
    8f08:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8f0a:	c8 01       	movw	r24, r16
    8f0c:	0e 94 31 46 	call	0x8c62	; 0x8c62 <ReadEeprom>
    8f10:	d8 2e       	mov	r13, r24
    8f12:	c8 01       	movw	r24, r16
    8f14:	01 96       	adiw	r24, 0x01	; 1
    8f16:	0e 94 31 46 	call	0x8c62	; 0x8c62 <ReadEeprom>
    8f1a:	28 2f       	mov	r18, r24
    8f1c:	30 e0       	ldi	r19, 0x00	; 0
    8f1e:	32 2f       	mov	r19, r18
    8f20:	22 27       	eor	r18, r18
    8f22:	2d 0d       	add	r18, r13
    8f24:	31 1d       	adc	r19, r1
		if(id==blockId){
    8f26:	2e 15       	cp	r18, r14
    8f28:	3f 05       	cpc	r19, r15
    8f2a:	39 f4       	brne	.+14     	; 0x8f3a <EepromReadBlock+0x56>
    8f2c:	7e 01       	movw	r14, r28
    8f2e:	80 e2       	ldi	r24, 0x20	; 32
    8f30:	e8 0e       	add	r14, r24
    8f32:	f1 1c       	adc	r15, r1
    8f34:	0c 1b       	sub	r16, r28
    8f36:	1d 0b       	sbc	r17, r29
    8f38:	08 c0       	rjmp	.+16     	; 0x8f4a <EepromReadBlock+0x66>
    8f3a:	00 5e       	subi	r16, 0xE0	; 224
    8f3c:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    8f3e:	01 15       	cp	r16, r1
    8f40:	84 e0       	ldi	r24, 0x04	; 4
    8f42:	18 07       	cpc	r17, r24
    8f44:	11 f7       	brne	.-60     	; 0x8f0a <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    8f46:	83 e0       	ldi	r24, 0x03	; 3
    8f48:	0e c0       	rjmp	.+28     	; 0x8f66 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    8f4a:	ce 01       	movw	r24, r28
    8f4c:	80 0f       	add	r24, r16
    8f4e:	91 1f       	adc	r25, r17
    8f50:	0e 94 31 46 	call	0x8c62	; 0x8c62 <ReadEeprom>
    8f54:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    8f56:	ce 15       	cp	r28, r14
    8f58:	df 05       	cpc	r29, r15
    8f5a:	b9 f7       	brne	.-18     	; 0x8f4a <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    8f5c:	80 e0       	ldi	r24, 0x00	; 0
    8f5e:	03 c0       	rjmp	.+6      	; 0x8f66 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8f60:	84 e0       	ldi	r24, 0x04	; 4
    8f62:	01 c0       	rjmp	.+2      	; 0x8f66 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8f64:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    8f66:	df 91       	pop	r29
    8f68:	cf 91       	pop	r28
    8f6a:	1f 91       	pop	r17
    8f6c:	0f 91       	pop	r16
    8f6e:	ff 90       	pop	r15
    8f70:	ef 90       	pop	r14
    8f72:	df 90       	pop	r13
    8f74:	08 95       	ret

00008f76 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    8f76:	fc 01       	movw	r30, r24
    8f78:	45 87       	std	Z+13, r20	; 0x0d
    8f7a:	08 95       	ret

00008f7c <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8f7c:	e2 e0       	ldi	r30, 0x02	; 2
    8f7e:	fb e0       	ldi	r31, 0x0B	; 11
    8f80:	81 e0       	ldi	r24, 0x01	; 1
    8f82:	91 e0       	ldi	r25, 0x01	; 1
    8f84:	95 8b       	std	Z+21, r25	; 0x15
    8f86:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8f88:	43 8b       	std	Z+19, r20	; 0x13
    8f8a:	08 95       	ret

00008f8c <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    8f8c:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8f8e:	90 81       	ld	r25, Z
    8f90:	9f 75       	andi	r25, 0x5F	; 95
    8f92:	90 83       	st	Z, r25
    8f94:	08 95       	ret

00008f96 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    8f96:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8f98:	90 81       	ld	r25, Z
    8f9a:	90 64       	ori	r25, 0x40	; 64
    8f9c:	90 83       	st	Z, r25
    8f9e:	08 95       	ret

00008fa0 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    8fa0:	fc 01       	movw	r30, r24
    8fa2:	44 87       	std	Z+12, r20	; 0x0c
    8fa4:	08 95       	ret

00008fa6 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    8fa6:	fc 01       	movw	r30, r24
    8fa8:	47 83       	std	Z+7, r20	; 0x07
    8faa:	08 95       	ret

00008fac <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    8fac:	fc 01       	movw	r30, r24
    8fae:	40 87       	std	Z+8, r20	; 0x08
    8fb0:	08 95       	ret

00008fb2 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    8fb2:	1f 93       	push	r17
    8fb4:	cf 93       	push	r28
    8fb6:	df 93       	push	r29
    8fb8:	ec 01       	movw	r28, r24
    8fba:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8fbc:	29 81       	ldd	r18, Y+1	; 0x01
    8fbe:	30 e0       	ldi	r19, 0x00	; 0
    8fc0:	f9 01       	movw	r30, r18
    8fc2:	ee 0f       	add	r30, r30
    8fc4:	ff 1f       	adc	r31, r31
    8fc6:	e8 5f       	subi	r30, 0xF8	; 248
    8fc8:	f6 46       	sbci	r31, 0x66	; 102
    8fca:	65 91       	lpm	r22, Z+
    8fcc:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8fce:	f9 01       	movw	r30, r18
    8fd0:	e4 0f       	add	r30, r20
    8fd2:	f1 1d       	adc	r31, r1
    8fd4:	47 fd       	sbrc	r20, 7
    8fd6:	fa 95       	dec	r31
    8fd8:	ee 0f       	add	r30, r30
    8fda:	ff 1f       	adc	r31, r31
    8fdc:	e8 5f       	subi	r30, 0xF8	; 248
    8fde:	f6 46       	sbci	r31, 0x66	; 102
    8fe0:	85 91       	lpm	r24, Z+
    8fe2:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    8fe4:	86 1b       	sub	r24, r22
    8fe6:	97 0b       	sbc	r25, r23
    8fe8:	60 91 47 0b 	lds	r22, 0x0B47
    8fec:	70 e0       	ldi	r23, 0x00	; 0
    8fee:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
	if(delta==0)delta++;
    8ff2:	61 15       	cp	r22, r1
    8ff4:	71 05       	cpc	r23, r1
    8ff6:	11 f4       	brne	.+4      	; 0x8ffc <PatchCommand11+0x4a>
    8ff8:	61 e0       	ldi	r22, 0x01	; 1
    8ffa:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    8ffc:	86 e0       	ldi	r24, 0x06	; 6
    8ffe:	18 9f       	mul	r17, r24
    9000:	f0 01       	movw	r30, r0
    9002:	11 24       	eor	r1, r1
    9004:	ee 5f       	subi	r30, 0xFE	; 254
    9006:	f4 4f       	sbci	r31, 0xF4	; 244
    9008:	81 81       	ldd	r24, Z+1	; 0x01
    900a:	92 81       	ldd	r25, Z+2	; 0x02
    900c:	86 0f       	add	r24, r22
    900e:	97 1f       	adc	r25, r23
    9010:	92 83       	std	Z+2, r25	; 0x02
    9012:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    9014:	7b 83       	std	Y+3, r23	; 0x03
    9016:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    9018:	88 81       	ld	r24, Y
    901a:	88 60       	ori	r24, 0x08	; 8
    901c:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    901e:	89 81       	ldd	r24, Y+1	; 0x01
    9020:	48 0f       	add	r20, r24
    9022:	4c 83       	std	Y+4, r20	; 0x04
}
    9024:	df 91       	pop	r29
    9026:	cf 91       	pop	r28
    9028:	1f 91       	pop	r17
    902a:	08 95       	ret

0000902c <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    902c:	40 93 47 0b 	sts	0x0B47, r20
    9030:	08 95       	ret

00009032 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    9032:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    9034:	64 2f       	mov	r22, r20
    9036:	0c 94 f2 4b 	jmp	0x97e4	; 0x97e4 <SetMixerWave>

0000903a <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    903a:	fc 01       	movw	r30, r24
    903c:	86 2f       	mov	r24, r22
	track->note+=param;
    903e:	91 81       	ldd	r25, Z+1	; 0x01
    9040:	64 2f       	mov	r22, r20
    9042:	69 0f       	add	r22, r25
    9044:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    9046:	0c 94 db 4b 	jmp	0x97b6	; 0x97b6 <SetMixerNote>

0000904a <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    904a:	fc 01       	movw	r30, r24
    904c:	86 2f       	mov	r24, r22
	track->note-=param;
    904e:	91 81       	ldd	r25, Z+1	; 0x01
    9050:	69 2f       	mov	r22, r25
    9052:	64 1b       	sub	r22, r20
    9054:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    9056:	0c 94 db 4b 	jmp	0x97b6	; 0x97b6 <SetMixerNote>

0000905a <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    905a:	0f 93       	push	r16
    905c:	1f 93       	push	r17
    905e:	cf 93       	push	r28
    9060:	df 93       	push	r29
    9062:	1f 92       	push	r1
    9064:	cd b7       	in	r28, 0x3d	; 61
    9066:	de b7       	in	r29, 0x3e	; 62
    9068:	8c 01       	movw	r16, r24
    906a:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    906c:	64 2f       	mov	r22, r20
    906e:	49 83       	std	Y+1, r20	; 0x01
    9070:	0e 94 db 4b 	call	0x97b6	; 0x97b6 <SetMixerNote>
	track->note=param;
    9074:	49 81       	ldd	r20, Y+1	; 0x01
    9076:	f8 01       	movw	r30, r16
    9078:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    907a:	80 81       	ld	r24, Z
    907c:	87 7f       	andi	r24, 0xF7	; 247
    907e:	80 83       	st	Z, r24
}
    9080:	0f 90       	pop	r0
    9082:	df 91       	pop	r29
    9084:	cf 91       	pop	r28
    9086:	1f 91       	pop	r17
    9088:	0f 91       	pop	r16
    908a:	08 95       	ret

0000908c <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    908c:	90 93 b3 0b 	sts	0x0BB3, r25
    9090:	80 93 b2 0b 	sts	0x0BB2, r24

	masterVolume=DEFAULT_MASTER_VOL;
    9094:	8f e6       	ldi	r24, 0x6F	; 111
    9096:	80 93 b5 0b 	sts	0x0BB5, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    909a:	10 92 00 0b 	sts	0x0B00, r1
    909e:	e0 e5       	ldi	r30, 0x50	; 80
    90a0:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    90a2:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    90a4:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    90a6:	28 e1       	ldi	r18, 0x18	; 24
    90a8:	df 01       	movw	r26, r30
    90aa:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    90ac:	8c 93       	st	X, r24
    90ae:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    90b0:	1c 92       	st	X, r1
    90b2:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    90b4:	9c 93       	st	X, r25
    90b6:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    90b8:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    90ba:	10 82       	st	Z, r1
    90bc:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    90be:	2c 93       	st	X, r18
    90c0:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    90c2:	8c 93       	st	X, r24
    90c4:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    90c6:	3b e0       	ldi	r19, 0x0B	; 11
    90c8:	ee 3b       	cpi	r30, 0xBE	; 190
    90ca:	f3 07       	cpc	r31, r19
    90cc:	69 f7       	brne	.-38     	; 0x90a8 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    90ce:	08 95       	ret

000090d0 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    90d0:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    90d2:	ed 91       	ld	r30, X+
    90d4:	fc 91       	ld	r31, X
    90d6:	11 97       	sbiw	r26, 0x01	; 1
    90d8:	9f 01       	movw	r18, r30
    90da:	2f 5f       	subi	r18, 0xFF	; 255
    90dc:	3f 4f       	sbci	r19, 0xFF	; 255
    90de:	11 96       	adiw	r26, 0x01	; 1
    90e0:	3c 93       	st	X, r19
    90e2:	2e 93       	st	-X, r18
    90e4:	e4 91       	lpm	r30, Z
    90e6:	e7 fd       	sbrc	r30, 7
    90e8:	03 c0       	rjmp	.+6      	; 0x90f0 <ReadVarLen+0x20>
    90ea:	8e 2f       	mov	r24, r30
    90ec:	90 e0       	ldi	r25, 0x00	; 0
    90ee:	08 95       	ret
    {
       value &= 0x7F;
    90f0:	ef 77       	andi	r30, 0x7F	; 127
    90f2:	8e 2f       	mov	r24, r30
    90f4:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    90f6:	96 95       	lsr	r25
    90f8:	98 2f       	mov	r25, r24
    90fa:	88 27       	eor	r24, r24
    90fc:	97 95       	ror	r25
    90fe:	87 95       	ror	r24
    9100:	2f 5f       	subi	r18, 0xFF	; 255
    9102:	3f 4f       	sbci	r19, 0xFF	; 255
    9104:	f9 01       	movw	r30, r18
    9106:	31 97       	sbiw	r30, 0x01	; 1
    9108:	e4 91       	lpm	r30, Z
    910a:	4e 2f       	mov	r20, r30
    910c:	4f 77       	andi	r20, 0x7F	; 127
    910e:	84 0f       	add	r24, r20
    9110:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    9112:	e7 fd       	sbrc	r30, 7
    9114:	f0 cf       	rjmp	.-32     	; 0x90f6 <ReadVarLen+0x26>
    9116:	2d 93       	st	X+, r18
    9118:	3c 93       	st	X, r19
    }


    return value;
}
    911a:	08 95       	ret

0000911c <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    911c:	cf 92       	push	r12
    911e:	df 92       	push	r13
    9120:	ff 92       	push	r15
    9122:	0f 93       	push	r16
    9124:	1f 93       	push	r17
    9126:	cf 93       	push	r28
    9128:	df 93       	push	r29
    912a:	1f 92       	push	r1
    912c:	cd b7       	in	r28, 0x3d	; 61
    912e:	de b7       	in	r29, 0x3e	; 62
    9130:	18 2f       	mov	r17, r24
    9132:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    9134:	c8 2e       	mov	r12, r24
    9136:	d1 2c       	mov	r13, r1
    9138:	36 e1       	ldi	r19, 0x16	; 22
    913a:	83 9f       	mul	r24, r19
    913c:	f0 01       	movw	r30, r0
    913e:	11 24       	eor	r1, r1
    9140:	ee 5b       	subi	r30, 0xBE	; 190
    9142:	f4 4f       	sbci	r31, 0xF4	; 244
    9144:	80 81       	ld	r24, Z
    9146:	f8 2e       	mov	r15, r24
    9148:	ff 1c       	adc	r15, r15
    914a:	ff 24       	eor	r15, r15
    914c:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    914e:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    9150:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    9152:	9f ef       	ldi	r25, 0xFF	; 255
    9154:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    9156:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    9158:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    915a:	87 7b       	andi	r24, 0xB7	; 183
    915c:	80 62       	ori	r24, 0x20	; 32
    915e:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    9160:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    9162:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    9164:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    9166:	13 30       	cpi	r17, 0x03	; 3
    9168:	69 f4       	brne	.+26     	; 0x9184 <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    916a:	f1 10       	cpse	r15, r1
    916c:	01 c0       	rjmp	.+2      	; 0x9170 <TriggerCommon+0x54>
    916e:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    9170:	81 e0       	ldi	r24, 0x01	; 1
    9172:	91 e0       	ldi	r25, 0x01	; 1
    9174:	90 93 17 0b 	sts	0x0B17, r25
    9178:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    917c:	81 e0       	ldi	r24, 0x01	; 1
    917e:	80 93 15 0b 	sts	0x0B15, r24
    9182:	3c c0       	rjmp	.+120    	; 0x91fc <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    9184:	14 30       	cpi	r17, 0x04	; 4
    9186:	09 f0       	breq	.+2      	; 0x918a <TriggerCommon+0x6e>
    9188:	2f c0       	rjmp	.+94     	; 0x91e8 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    918a:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    918e:	80 91 b2 0b 	lds	r24, 0x0BB2
    9192:	90 91 b3 0b 	lds	r25, 0x0BB3
    9196:	e9 e0       	ldi	r30, 0x09	; 9
    9198:	6e 9f       	mul	r22, r30
    919a:	80 0d       	add	r24, r0
    919c:	91 1d       	adc	r25, r1
    919e:	11 24       	eor	r1, r1
    91a0:	fc 01       	movw	r30, r24
    91a2:	31 96       	adiw	r30, 0x01	; 1
    91a4:	65 91       	lpm	r22, Z+
    91a6:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    91a8:	70 93 1f 0b 	sts	0x0B1F, r23
    91ac:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    91b0:	ac 01       	movw	r20, r24
    91b2:	49 5f       	subi	r20, 0xF9	; 249
    91b4:	5f 4f       	sbci	r21, 0xFF	; 255
    91b6:	fa 01       	movw	r30, r20
    91b8:	a5 91       	lpm	r26, Z+
    91ba:	b4 91       	lpm	r27, Z
    91bc:	05 96       	adiw	r24, 0x05	; 5
    91be:	fc 01       	movw	r30, r24
    91c0:	85 91       	lpm	r24, Z+
    91c2:	94 91       	lpm	r25, Z
    91c4:	a8 1b       	sub	r26, r24
    91c6:	b9 0b       	sbc	r27, r25
    91c8:	b0 93 21 0b 	sts	0x0B21, r27
    91cc:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    91d0:	fa 01       	movw	r30, r20
    91d2:	85 91       	lpm	r24, Z+
    91d4:	94 91       	lpm	r25, Z
    91d6:	68 0f       	add	r22, r24
    91d8:	79 1f       	adc	r23, r25
    91da:	70 93 23 0b 	sts	0x0B23, r23
    91de:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    91e2:	62 2f       	mov	r22, r18
    91e4:	84 e0       	ldi	r24, 0x04	; 4
    91e6:	08 c0       	rjmp	.+16     	; 0x91f8 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    91e8:	60 e0       	ldi	r22, 0x00	; 0
    91ea:	81 2f       	mov	r24, r17
    91ec:	29 83       	std	Y+1, r18	; 0x01
    91ee:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <SetMixerWave>
			SetMixerNote(channel,note);
    91f2:	29 81       	ldd	r18, Y+1	; 0x01
    91f4:	62 2f       	mov	r22, r18
    91f6:	81 2f       	mov	r24, r17
    91f8:	0e 94 db 4b 	call	0x97b6	; 0x97b6 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    91fc:	86 e1       	ldi	r24, 0x16	; 22
    91fe:	8c 9d       	mul	r24, r12
    9200:	f0 01       	movw	r30, r0
    9202:	8d 9d       	mul	r24, r13
    9204:	f0 0d       	add	r31, r0
    9206:	11 24       	eor	r1, r1
    9208:	ee 5b       	subi	r30, 0xBE	; 190
    920a:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    920c:	ff 20       	and	r15, r15
    920e:	11 f0       	breq	.+4      	; 0x9214 <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    9210:	07 87       	std	Z+15, r16	; 0x0f
    9212:	01 c0       	rjmp	.+2      	; 0x9216 <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    9214:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    9216:	e0 91 b2 0b 	lds	r30, 0x0BB2
    921a:	f0 91 b3 0b 	lds	r31, 0x0BB3
    921e:	39 e0       	ldi	r19, 0x09	; 9
    9220:	03 9f       	mul	r16, r19
    9222:	e0 0d       	add	r30, r0
    9224:	f1 1d       	adc	r31, r1
    9226:	11 24       	eor	r1, r1
    9228:	33 96       	adiw	r30, 0x03	; 3
    922a:	85 91       	lpm	r24, Z+
    922c:	94 91       	lpm	r25, Z
	if(pos==NULL){
    922e:	00 97       	sbiw	r24, 0x00	; 0
    9230:	59 f4       	brne	.+22     	; 0x9248 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    9232:	86 e1       	ldi	r24, 0x16	; 22
    9234:	8c 9d       	mul	r24, r12
    9236:	f0 01       	movw	r30, r0
    9238:	8d 9d       	mul	r24, r13
    923a:	f0 0d       	add	r31, r0
    923c:	11 24       	eor	r1, r1
    923e:	ee 5b       	subi	r30, 0xBE	; 190
    9240:	f4 4f       	sbci	r31, 0xF4	; 244
    9242:	15 8a       	std	Z+21, r1	; 0x15
    9244:	14 8a       	std	Z+20, r1	; 0x14
    9246:	0e c0       	rjmp	.+28     	; 0x9264 <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    9248:	fc 01       	movw	r30, r24
    924a:	24 91       	lpm	r18, Z
    924c:	36 e1       	ldi	r19, 0x16	; 22
    924e:	3c 9d       	mul	r19, r12
    9250:	f0 01       	movw	r30, r0
    9252:	3d 9d       	mul	r19, r13
    9254:	f0 0d       	add	r31, r0
    9256:	11 24       	eor	r1, r1
    9258:	ee 5b       	subi	r30, 0xBE	; 190
    925a:	f4 4f       	sbci	r31, 0xF4	; 244
    925c:	21 8b       	std	Z+17, r18	; 0x11
    925e:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    9260:	95 8b       	std	Z+21, r25	; 0x15
    9262:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    9264:	0f 90       	pop	r0
    9266:	df 91       	pop	r29
    9268:	cf 91       	pop	r28
    926a:	1f 91       	pop	r17
    926c:	0f 91       	pop	r16
    926e:	ff 90       	pop	r15
    9270:	df 90       	pop	r13
    9272:	cf 90       	pop	r12
    9274:	08 95       	ret

00009276 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    9276:	98 2f       	mov	r25, r24
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    9278:	e0 91 b2 0b 	lds	r30, 0x0BB2
    927c:	f0 91 b3 0b 	lds	r31, 0x0BB3
    9280:	29 e0       	ldi	r18, 0x09	; 9
    9282:	82 9f       	mul	r24, r18
    9284:	e0 0d       	add	r30, r0
    9286:	f1 1d       	adc	r31, r1
    9288:	11 24       	eor	r1, r1
    928a:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    928c:	e1 30       	cpi	r30, 0x01	; 1
    928e:	e9 f0       	breq	.+58     	; 0x92ca <TriggerFx+0x54>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    9290:	e2 30       	cpi	r30, 0x02	; 2
    9292:	e9 f0       	breq	.+58     	; 0x92ce <TriggerFx+0x58>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    9294:	20 91 58 0b 	lds	r18, 0x0B58
    9298:	27 ff       	sbrs	r18, 7
    929a:	1d c0       	rjmp	.+58     	; 0x92d6 <TriggerFx+0x60>
    929c:	20 91 67 0b 	lds	r18, 0x0B67
    92a0:	28 13       	cpse	r18, r24
    92a2:	02 c0       	rjmp	.+4      	; 0x92a8 <TriggerFx+0x32>
    92a4:	41 11       	cpse	r20, r1
    92a6:	17 c0       	rjmp	.+46     	; 0x92d6 <TriggerFx+0x60>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    92a8:	20 91 6e 0b 	lds	r18, 0x0B6E
    92ac:	27 ff       	sbrs	r18, 7
    92ae:	11 c0       	rjmp	.+34     	; 0x92d2 <TriggerFx+0x5c>
    92b0:	20 91 7d 0b 	lds	r18, 0x0B7D
    92b4:	29 13       	cpse	r18, r25
    92b6:	02 c0       	rjmp	.+4      	; 0x92bc <TriggerFx+0x46>
    92b8:	41 11       	cpse	r20, r1
    92ba:	0b c0       	rjmp	.+22     	; 0x92d2 <TriggerFx+0x5c>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    92bc:	20 91 6b 0b 	lds	r18, 0x0B6B
    92c0:	80 91 81 0b 	lds	r24, 0x0B81
    92c4:	82 17       	cp	r24, r18
    92c6:	28 f4       	brcc	.+10     	; 0x92d2 <TriggerFx+0x5c>
    92c8:	06 c0       	rjmp	.+12     	; 0x92d6 <TriggerFx+0x60>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    92ca:	83 e0       	ldi	r24, 0x03	; 3
    92cc:	05 c0       	rjmp	.+10     	; 0x92d8 <TriggerFx+0x62>
	}else if(type==2){
		channel=4;
    92ce:	84 e0       	ldi	r24, 0x04	; 4
    92d0:	03 c0       	rjmp	.+6      	; 0x92d8 <TriggerFx+0x62>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    92d2:	82 e0       	ldi	r24, 0x02	; 2
    92d4:	01 c0       	rjmp	.+2      	; 0x92d8 <TriggerFx+0x62>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    92d6:	81 e0       	ldi	r24, 0x01	; 1
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    92d8:	26 e1       	ldi	r18, 0x16	; 22
    92da:	82 9f       	mul	r24, r18
    92dc:	f0 01       	movw	r30, r0
    92de:	11 24       	eor	r1, r1
    92e0:	ee 5b       	subi	r30, 0xBE	; 190
    92e2:	f4 4f       	sbci	r31, 0xF4	; 244
    92e4:	20 81       	ld	r18, Z
    92e6:	20 68       	ori	r18, 0x80	; 128
    92e8:	20 83       	st	Z, r18
	TriggerCommon(channel,patch,volume,80);
    92ea:	20 e5       	ldi	r18, 0x50	; 80
    92ec:	46 2f       	mov	r20, r22
    92ee:	69 2f       	mov	r22, r25
    92f0:	0c 94 8e 48 	jmp	0x911c	; 0x911c <TriggerCommon>

000092f4 <TriggerNote>:
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    92f4:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    92f6:	a8 2f       	mov	r26, r24
    92f8:	b0 e0       	ldi	r27, 0x00	; 0
    92fa:	96 e1       	ldi	r25, 0x16	; 22
    92fc:	89 9f       	mul	r24, r25
    92fe:	f0 01       	movw	r30, r0
    9300:	11 24       	eor	r1, r1
    9302:	ee 5b       	subi	r30, 0xBE	; 190
    9304:	f4 4f       	sbci	r31, 0xF4	; 244
    9306:	90 81       	ld	r25, Z
    9308:	95 ff       	sbrs	r25, 5
    930a:	02 c0       	rjmp	.+4      	; 0x9310 <TriggerNote+0x1c>
    930c:	97 fd       	sbrc	r25, 7
    930e:	28 c0       	rjmp	.+80     	; 0x9360 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    9310:	31 11       	cpse	r19, r1
    9312:	18 c0       	rjmp	.+48     	; 0x9344 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    9314:	86 e1       	ldi	r24, 0x16	; 22
    9316:	8a 9f       	mul	r24, r26
    9318:	f0 01       	movw	r30, r0
    931a:	8b 9f       	mul	r24, r27
    931c:	f0 0d       	add	r31, r0
    931e:	11 24       	eor	r1, r1
    9320:	ee 5b       	subi	r30, 0xBE	; 190
    9322:	f4 4f       	sbci	r31, 0xF4	; 244
    9324:	85 85       	ldd	r24, Z+13	; 0x0d
    9326:	81 11       	cpse	r24, r1
    9328:	02 c0       	rjmp	.+4      	; 0x932e <TriggerNote+0x3a>
    932a:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    932c:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    932e:	86 e1       	ldi	r24, 0x16	; 22
    9330:	8a 9f       	mul	r24, r26
    9332:	f0 01       	movw	r30, r0
    9334:	8b 9f       	mul	r24, r27
    9336:	f0 0d       	add	r31, r0
    9338:	11 24       	eor	r1, r1
    933a:	ee 5b       	subi	r30, 0xBE	; 190
    933c:	f4 4f       	sbci	r31, 0xF4	; 244
    933e:	9f 7b       	andi	r25, 0xBF	; 191
    9340:	90 83       	st	Z, r25
    9342:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    9344:	26 e1       	ldi	r18, 0x16	; 22
    9346:	2a 9f       	mul	r18, r26
    9348:	f0 01       	movw	r30, r0
    934a:	2b 9f       	mul	r18, r27
    934c:	f0 0d       	add	r31, r0
    934e:	11 24       	eor	r1, r1
    9350:	ee 5b       	subi	r30, 0xBE	; 190
    9352:	f4 4f       	sbci	r31, 0xF4	; 244
    9354:	9f 77       	andi	r25, 0x7F	; 127
    9356:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    9358:	24 2f       	mov	r18, r20
    935a:	43 2f       	mov	r20, r19
    935c:	0c 94 8e 48 	jmp	0x911c	; 0x911c <TriggerCommon>
    9360:	08 95       	ret

00009362 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    9362:	5f 92       	push	r5
    9364:	6f 92       	push	r6
    9366:	7f 92       	push	r7
    9368:	8f 92       	push	r8
    936a:	9f 92       	push	r9
    936c:	af 92       	push	r10
    936e:	bf 92       	push	r11
    9370:	cf 92       	push	r12
    9372:	df 92       	push	r13
    9374:	ef 92       	push	r14
    9376:	ff 92       	push	r15
    9378:	0f 93       	push	r16
    937a:	1f 93       	push	r17
    937c:	cf 93       	push	r28
    937e:	df 93       	push	r29
    9380:	c2 e4       	ldi	r28, 0x42	; 66
    9382:	db e0       	ldi	r29, 0x0B	; 11
    9384:	82 e0       	ldi	r24, 0x02	; 2
    9386:	e8 2e       	mov	r14, r24
    9388:	8b e0       	ldi	r24, 0x0B	; 11
    938a:	f8 2e       	mov	r15, r24
    938c:	d7 01       	movw	r26, r14
    938e:	9e 01       	movw	r18, r28
    9390:	40 e0       	ldi	r20, 0x00	; 0
    9392:	50 e0       	ldi	r21, 0x00	; 0
    9394:	ca 01       	movw	r24, r20
    9396:	8e 5b       	subi	r24, 0xBE	; 190
    9398:	94 4f       	sbci	r25, 0xF4	; 244
    939a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    939c:	fc 01       	movw	r30, r24
    939e:	85 85       	ldd	r24, Z+13	; 0x0d
    93a0:	88 23       	and	r24, r24
    93a2:	91 f0       	breq	.+36     	; 0x93c8 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    93a4:	64 85       	ldd	r22, Z+12	; 0x0c
    93a6:	99 27       	eor	r25, r25
    93a8:	87 fd       	sbrc	r24, 7
    93aa:	90 95       	com	r25
    93ac:	86 0f       	add	r24, r22
    93ae:	91 1d       	adc	r25, r1
    93b0:	8f 3f       	cpi	r24, 0xFF	; 255
    93b2:	91 05       	cpc	r25, r1
    93b4:	19 f0       	breq	.+6      	; 0x93bc <ProcessMusic+0x5a>
    93b6:	14 f0       	brlt	.+4      	; 0x93bc <ProcessMusic+0x5a>
    93b8:	8f ef       	ldi	r24, 0xFF	; 255
    93ba:	90 e0       	ldi	r25, 0x00	; 0
    93bc:	97 ff       	sbrs	r25, 7
    93be:	02 c0       	rjmp	.+4      	; 0x93c4 <ProcessMusic+0x62>
    93c0:	80 e0       	ldi	r24, 0x00	; 0
    93c2:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    93c4:	f6 01       	movw	r30, r12
    93c6:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    93c8:	f9 01       	movw	r30, r18
    93ca:	10 81       	ld	r17, Z
    93cc:	13 ff       	sbrs	r17, 3
    93ce:	29 c0       	rjmp	.+82     	; 0x9422 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    93d0:	62 81       	ldd	r22, Z+2	; 0x02
    93d2:	73 81       	ldd	r23, Z+3	; 0x03
    93d4:	11 96       	adiw	r26, 0x01	; 1
    93d6:	8d 91       	ld	r24, X+
    93d8:	9c 91       	ld	r25, X
    93da:	12 97       	sbiw	r26, 0x02	; 2
    93dc:	86 0f       	add	r24, r22
    93de:	97 1f       	adc	r25, r23
    93e0:	12 96       	adiw	r26, 0x02	; 2
    93e2:	9c 93       	st	X, r25
    93e4:	8e 93       	st	-X, r24
    93e6:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    93e8:	f6 01       	movw	r30, r12
    93ea:	04 81       	ldd	r16, Z+4	; 0x04
    93ec:	e0 2f       	mov	r30, r16
    93ee:	f0 e0       	ldi	r31, 0x00	; 0
    93f0:	ee 0f       	add	r30, r30
    93f2:	ff 1f       	adc	r31, r31
    93f4:	e8 5f       	subi	r30, 0xF8	; 248
    93f6:	f6 46       	sbci	r31, 0x66	; 102
    93f8:	c5 90       	lpm	r12, Z+
    93fa:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    93fc:	16 16       	cp	r1, r22
    93fe:	17 06       	cpc	r1, r23
    9400:	24 f4       	brge	.+8      	; 0x940a <ProcessMusic+0xa8>
    9402:	8c 15       	cp	r24, r12
    9404:	9d 05       	cpc	r25, r13
    9406:	30 f4       	brcc	.+12     	; 0x9414 <ProcessMusic+0xb2>
    9408:	0c c0       	rjmp	.+24     	; 0x9422 <ProcessMusic+0xc0>
    940a:	67 2b       	or	r22, r23
    940c:	51 f0       	breq	.+20     	; 0x9422 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    940e:	c8 16       	cp	r12, r24
    9410:	d9 06       	cpc	r13, r25
    9412:	38 f0       	brcs	.+14     	; 0x9422 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    9414:	12 96       	adiw	r26, 0x02	; 2
    9416:	dc 92       	st	X, r13
    9418:	ce 92       	st	-X, r12
    941a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    941c:	17 7f       	andi	r17, 0xF7	; 247
    941e:	f9 01       	movw	r30, r18
    9420:	10 83       	st	Z, r17
    9422:	4a 5e       	subi	r20, 0xEA	; 234
    9424:	5f 4f       	sbci	r21, 0xFF	; 255
    9426:	2a 5e       	subi	r18, 0xEA	; 234
    9428:	3f 4f       	sbci	r19, 0xFF	; 255
    942a:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    942c:	4e 36       	cpi	r20, 0x6E	; 110
    942e:	51 05       	cpc	r21, r1
    9430:	09 f0       	breq	.+2      	; 0x9434 <ProcessMusic+0xd2>
    9432:	b0 cf       	rjmp	.-160    	; 0x9394 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    9434:	80 91 00 0b 	lds	r24, 0x0B00
    9438:	88 23       	and	r24, r24
    943a:	09 f4       	brne	.+2      	; 0x943e <ProcessMusic+0xdc>
    943c:	cb c0       	rjmp	.+406    	; 0x95d4 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    943e:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    9440:	80 91 b0 0b 	lds	r24, 0x0BB0
    9444:	90 91 b1 0b 	lds	r25, 0x0BB1
    9448:	20 91 b6 0b 	lds	r18, 0x0BB6
    944c:	30 91 b7 0b 	lds	r19, 0x0BB7
    9450:	82 17       	cp	r24, r18
    9452:	93 07       	cpc	r25, r19
    9454:	09 f0       	breq	.+2      	; 0x9458 <ProcessMusic+0xf6>
    9456:	b9 c0       	rjmp	.+370    	; 0x95ca <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    9458:	20 91 b9 0b 	lds	r18, 0x0BB9
    945c:	30 91 ba 0b 	lds	r19, 0x0BBA
    9460:	b9 01       	movw	r22, r18
    9462:	6f 5f       	subi	r22, 0xFF	; 255
    9464:	7f 4f       	sbci	r23, 0xFF	; 255
    9466:	70 93 ba 0b 	sts	0x0BBA, r23
    946a:	60 93 b9 0b 	sts	0x0BB9, r22
    946e:	f9 01       	movw	r30, r18
    9470:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    9472:	4f 3f       	cpi	r20, 0xFF	; 255
    9474:	79 f5       	brne	.+94     	; 0x94d4 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    9476:	a9 01       	movw	r20, r18
    9478:	4e 5f       	subi	r20, 0xFE	; 254
    947a:	5f 4f       	sbci	r21, 0xFF	; 255
    947c:	50 93 ba 0b 	sts	0x0BBA, r21
    9480:	40 93 b9 0b 	sts	0x0BB9, r20
    9484:	fb 01       	movw	r30, r22
    9486:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    9488:	6f 32       	cpi	r22, 0x2F	; 47
    948a:	19 f4       	brne	.+6      	; 0x9492 <ProcessMusic+0x130>
						playSong=false;
    948c:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    9490:	9c c0       	rjmp	.+312    	; 0x95ca <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    9492:	66 30       	cpi	r22, 0x06	; 6
    9494:	09 f0       	breq	.+2      	; 0x9498 <ProcessMusic+0x136>
    9496:	8c c0       	rjmp	.+280    	; 0x95b0 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    9498:	fa 01       	movw	r30, r20
    949a:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    949c:	c9 01       	movw	r24, r18
    949e:	04 96       	adiw	r24, 0x04	; 4
    94a0:	90 93 ba 0b 	sts	0x0BBA, r25
    94a4:	80 93 b9 0b 	sts	0x0BB9, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    94a8:	f9 01       	movw	r30, r18
    94aa:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    94ac:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    94ae:	e3 35       	cpi	r30, 0x53	; 83
    94b0:	29 f4       	brne	.+10     	; 0x94bc <ProcessMusic+0x15a>
							loopStart=songPos;
    94b2:	90 93 bc 0b 	sts	0x0BBC, r25
    94b6:	80 93 bb 0b 	sts	0x0BBB, r24
    94ba:	7a c0       	rjmp	.+244    	; 0x95b0 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    94bc:	e5 34       	cpi	r30, 0x45	; 69
    94be:	09 f0       	breq	.+2      	; 0x94c2 <ProcessMusic+0x160>
    94c0:	77 c0       	rjmp	.+238    	; 0x95b0 <ProcessMusic+0x24e>
							songPos=loopStart;
    94c2:	80 91 bb 0b 	lds	r24, 0x0BBB
    94c6:	90 91 bc 0b 	lds	r25, 0x0BBC
    94ca:	90 93 ba 0b 	sts	0x0BBA, r25
    94ce:	80 93 b9 0b 	sts	0x0BB9, r24
    94d2:	6e c0       	rjmp	.+220    	; 0x95b0 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    94d4:	47 fd       	sbrc	r20, 7
    94d6:	40 93 b4 0b 	sts	0x0BB4, r20
					channel=lastStatus&0x0f;
    94da:	90 91 b4 0b 	lds	r25, 0x0BB4
    94de:	89 2f       	mov	r24, r25
    94e0:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    94e2:	47 ff       	sbrs	r20, 7
    94e4:	08 c0       	rjmp	.+16     	; 0x94f6 <ProcessMusic+0x194>
    94e6:	2e 5f       	subi	r18, 0xFE	; 254
    94e8:	3f 4f       	sbci	r19, 0xFF	; 255
    94ea:	30 93 ba 0b 	sts	0x0BBA, r19
    94ee:	20 93 b9 0b 	sts	0x0BB9, r18
    94f2:	fb 01       	movw	r30, r22
    94f4:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    94f6:	90 7f       	andi	r25, 0xF0	; 240
    94f8:	90 3b       	cpi	r25, 0xB0	; 176
    94fa:	e1 f0       	breq	.+56     	; 0x9534 <ProcessMusic+0x1d2>
    94fc:	90 3c       	cpi	r25, 0xC0	; 192
    94fe:	09 f4       	brne	.+2      	; 0x9502 <ProcessMusic+0x1a0>
    9500:	51 c0       	rjmp	.+162    	; 0x95a4 <ProcessMusic+0x242>
    9502:	90 39       	cpi	r25, 0x90	; 144
    9504:	09 f0       	breq	.+2      	; 0x9508 <ProcessMusic+0x1a6>
    9506:	54 c0       	rjmp	.+168    	; 0x95b0 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    9508:	e0 91 b9 0b 	lds	r30, 0x0BB9
    950c:	f0 91 ba 0b 	lds	r31, 0x0BBA
    9510:	9f 01       	movw	r18, r30
    9512:	2f 5f       	subi	r18, 0xFF	; 255
    9514:	3f 4f       	sbci	r19, 0xFF	; 255
    9516:	30 93 ba 0b 	sts	0x0BBA, r19
    951a:	20 93 b9 0b 	sts	0x0BB9, r18
    951e:	24 91       	lpm	r18, Z
    9520:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    9522:	18 9f       	mul	r17, r24
    9524:	f0 01       	movw	r30, r0
    9526:	11 24       	eor	r1, r1
    9528:	ee 5b       	subi	r30, 0xBE	; 190
    952a:	f4 4f       	sbci	r31, 0xF4	; 244
    952c:	66 85       	ldd	r22, Z+14	; 0x0e
    952e:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
    9532:	3e c0       	rjmp	.+124    	; 0x95b0 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    9534:	e0 91 b9 0b 	lds	r30, 0x0BB9
    9538:	f0 91 ba 0b 	lds	r31, 0x0BBA
    953c:	9f 01       	movw	r18, r30
    953e:	2f 5f       	subi	r18, 0xFF	; 255
    9540:	3f 4f       	sbci	r19, 0xFF	; 255
    9542:	30 93 ba 0b 	sts	0x0BBA, r19
    9546:	20 93 b9 0b 	sts	0x0BB9, r18
    954a:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    954c:	47 30       	cpi	r20, 0x07	; 7
    954e:	49 f4       	brne	.+18     	; 0x9562 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    9550:	18 9f       	mul	r17, r24
    9552:	d0 01       	movw	r26, r0
    9554:	11 24       	eor	r1, r1
    9556:	ae 5b       	subi	r26, 0xBE	; 190
    9558:	b4 4f       	sbci	r27, 0xF4	; 244
    955a:	ee 0f       	add	r30, r30
    955c:	1a 96       	adiw	r26, 0x0a	; 10
    955e:	ec 93       	st	X, r30
    9560:	27 c0       	rjmp	.+78     	; 0x95b0 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    9562:	4b 30       	cpi	r20, 0x0B	; 11
    9564:	49 f4       	brne	.+18     	; 0x9578 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    9566:	18 9f       	mul	r17, r24
    9568:	d0 01       	movw	r26, r0
    956a:	11 24       	eor	r1, r1
    956c:	ae 5b       	subi	r26, 0xBE	; 190
    956e:	b4 4f       	sbci	r27, 0xF4	; 244
    9570:	ee 0f       	add	r30, r30
    9572:	19 96       	adiw	r26, 0x09	; 9
    9574:	ec 93       	st	X, r30
    9576:	1c c0       	rjmp	.+56     	; 0x95b0 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    9578:	4c 35       	cpi	r20, 0x5C	; 92
    957a:	49 f4       	brne	.+18     	; 0x958e <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    957c:	18 9f       	mul	r17, r24
    957e:	d0 01       	movw	r26, r0
    9580:	11 24       	eor	r1, r1
    9582:	ae 5b       	subi	r26, 0xBE	; 190
    9584:	b4 4f       	sbci	r27, 0xF4	; 244
    9586:	ee 0f       	add	r30, r30
    9588:	17 96       	adiw	r26, 0x07	; 7
    958a:	ec 93       	st	X, r30
    958c:	11 c0       	rjmp	.+34     	; 0x95b0 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    958e:	44 36       	cpi	r20, 0x64	; 100
    9590:	79 f4       	brne	.+30     	; 0x95b0 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    9592:	18 9f       	mul	r17, r24
    9594:	d0 01       	movw	r26, r0
    9596:	11 24       	eor	r1, r1
    9598:	ae 5b       	subi	r26, 0xBE	; 190
    959a:	b4 4f       	sbci	r27, 0xF4	; 244
    959c:	ee 0f       	add	r30, r30
    959e:	18 96       	adiw	r26, 0x08	; 8
    95a0:	ec 93       	st	X, r30
    95a2:	06 c0       	rjmp	.+12     	; 0x95b0 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    95a4:	18 9f       	mul	r17, r24
    95a6:	f0 01       	movw	r30, r0
    95a8:	11 24       	eor	r1, r1
    95aa:	ee 5b       	subi	r30, 0xBE	; 190
    95ac:	f4 4f       	sbci	r31, 0xF4	; 244
    95ae:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    95b0:	89 eb       	ldi	r24, 0xB9	; 185
    95b2:	9b e0       	ldi	r25, 0x0B	; 11
    95b4:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ReadVarLen>
    95b8:	90 93 b7 0b 	sts	0x0BB7, r25
    95bc:	80 93 b6 0b 	sts	0x0BB6, r24
				currDeltaTime=0;
    95c0:	10 92 b1 0b 	sts	0x0BB1, r1
    95c4:	10 92 b0 0b 	sts	0x0BB0, r1
    95c8:	3b cf       	rjmp	.-394    	; 0x9440 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    95ca:	01 96       	adiw	r24, 0x01	; 1
    95cc:	90 93 b1 0b 	sts	0x0BB1, r25
    95d0:	80 93 b0 0b 	sts	0x0BB0, r24
    95d4:	98 e4       	ldi	r25, 0x48	; 72
    95d6:	a9 2e       	mov	r10, r25
    95d8:	9b e0       	ldi	r25, 0x0B	; 11
    95da:	b9 2e       	mov	r11, r25
    95dc:	04 e5       	ldi	r16, 0x54	; 84
    95de:	1b e0       	ldi	r17, 0x0B	; 11
    95e0:	23 e5       	ldi	r18, 0x53	; 83
    95e2:	c2 2e       	mov	r12, r18
    95e4:	2b e0       	ldi	r18, 0x0B	; 11
    95e6:	d2 2e       	mov	r13, r18
    95e8:	35 e5       	ldi	r19, 0x55	; 85
    95ea:	83 2e       	mov	r8, r19
    95ec:	3b e0       	ldi	r19, 0x0B	; 11
    95ee:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    95f0:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    95f2:	66 24       	eor	r6, r6
    95f4:	6a 94       	dec	r6
    95f6:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    95f8:	88 81       	ld	r24, Y
    95fa:	86 fd       	sbrc	r24, 6
    95fc:	43 c0       	rjmp	.+134    	; 0x9684 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    95fe:	8c 89       	ldd	r24, Y+20	; 0x14
    9600:	9d 89       	ldd	r25, Y+21	; 0x15
    9602:	89 2b       	or	r24, r25
    9604:	09 f4       	brne	.+2      	; 0x9608 <ProcessMusic+0x2a6>
    9606:	3a c0       	rjmp	.+116    	; 0x967c <ProcessMusic+0x31a>
    9608:	d8 01       	movw	r26, r16
    960a:	9c 91       	ld	r25, X
    960c:	f6 01       	movw	r30, r12
    960e:	80 81       	ld	r24, Z
    9610:	98 17       	cp	r25, r24
    9612:	08 f4       	brcc	.+2      	; 0x9616 <ProcessMusic+0x2b4>
    9614:	33 c0       	rjmp	.+102    	; 0x967c <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    9616:	d8 01       	movw	r26, r16
    9618:	9c 91       	ld	r25, X
    961a:	f6 01       	movw	r30, r12
    961c:	80 81       	ld	r24, Z
    961e:	98 13       	cpse	r25, r24
    9620:	2d c0       	rjmp	.+90     	; 0x967c <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    9622:	ec 89       	ldd	r30, Y+20	; 0x14
    9624:	fd 89       	ldd	r31, Y+21	; 0x15
    9626:	af 01       	movw	r20, r30
    9628:	4f 5f       	subi	r20, 0xFF	; 255
    962a:	5f 4f       	sbci	r21, 0xFF	; 255
    962c:	5d 8b       	std	Y+21, r21	; 0x15
    962e:	4c 8b       	std	Y+20, r20	; 0x14
    9630:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    9632:	8f 3f       	cpi	r24, 0xFF	; 255
    9634:	31 f4       	brne	.+12     	; 0x9642 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9636:	88 81       	ld	r24, Y
    9638:	8f 77       	andi	r24, 0x7F	; 127
    963a:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    963c:	1d 8a       	std	Y+21, r1	; 0x15
    963e:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    9640:	1d c0       	rjmp	.+58     	; 0x967c <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    9642:	32 96       	adiw	r30, 0x02	; 2
    9644:	fd 8b       	std	Y+21, r31	; 0x15
    9646:	ec 8b       	std	Y+20, r30	; 0x14
    9648:	fa 01       	movw	r30, r20
    964a:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    964c:	e8 2f       	mov	r30, r24
    964e:	f0 e0       	ldi	r31, 0x00	; 0
    9650:	ee 0f       	add	r30, r30
    9652:	ff 1f       	adc	r31, r31
    9654:	e2 54       	subi	r30, 0x42	; 66
    9656:	ff 4f       	sbci	r31, 0xFF	; 255
    9658:	25 91       	lpm	r18, Z+
    965a:	34 91       	lpm	r19, Z
    965c:	65 2d       	mov	r22, r5
    965e:	ce 01       	movw	r24, r28
    9660:	f9 01       	movw	r30, r18
    9662:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    9664:	ec 89       	ldd	r30, Y+20	; 0x14
    9666:	fd 89       	ldd	r31, Y+21	; 0x15
    9668:	cf 01       	movw	r24, r30
    966a:	01 96       	adiw	r24, 0x01	; 1
    966c:	9d 8b       	std	Y+21, r25	; 0x15
    966e:	8c 8b       	std	Y+20, r24	; 0x14
    9670:	e4 91       	lpm	r30, Z
    9672:	d6 01       	movw	r26, r12
    9674:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    9676:	f8 01       	movw	r30, r16
    9678:	10 82       	st	Z, r1
    967a:	cd cf       	rjmp	.-102    	; 0x9616 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    967c:	d8 01       	movw	r26, r16
    967e:	8c 91       	ld	r24, X
    9680:	8f 5f       	subi	r24, 0xFF	; 255
    9682:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    9684:	98 81       	ld	r25, Y
    9686:	95 ff       	sbrs	r25, 5
    9688:	6c c0       	rjmp	.+216    	; 0x9762 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    968a:	f4 01       	movw	r30, r8
    968c:	80 81       	ld	r24, Z
    968e:	8f 3f       	cpi	r24, 0xFF	; 255
    9690:	11 f0       	breq	.+4      	; 0x9696 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    9692:	8f 5f       	subi	r24, 0xFF	; 255
    9694:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    9696:	97 fd       	sbrc	r25, 7
    9698:	04 c0       	rjmp	.+8      	; 0x96a2 <ProcessMusic+0x340>
    969a:	f8 01       	movw	r30, r16
    969c:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    969e:	90 81       	ld	r25, Z
    96a0:	01 c0       	rjmp	.+2      	; 0x96a4 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    96a2:	9f ef       	ldi	r25, 0xFF	; 255
    96a4:	f8 01       	movw	r30, r16
    96a6:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    96a8:	80 81       	ld	r24, Z
    96aa:	88 23       	and	r24, r24
    96ac:	09 f4       	brne	.+2      	; 0x96b0 <ProcessMusic+0x34e>
    96ae:	4e c0       	rjmp	.+156    	; 0x974c <ProcessMusic+0x3ea>
    96b0:	31 96       	adiw	r30, 0x01	; 1
    96b2:	50 81       	ld	r21, Z
    96b4:	55 23       	and	r21, r21
    96b6:	09 f4       	brne	.+2      	; 0x96ba <ProcessMusic+0x358>
    96b8:	49 c0       	rjmp	.+146    	; 0x974c <ProcessMusic+0x3ea>
    96ba:	99 23       	and	r25, r25
    96bc:	09 f4       	brne	.+2      	; 0x96c0 <ProcessMusic+0x35e>
    96be:	46 c0       	rjmp	.+140    	; 0x974c <ProcessMusic+0x3ea>
    96c0:	40 91 b5 0b 	lds	r20, 0x0BB5
    96c4:	44 23       	and	r20, r20
    96c6:	09 f4       	brne	.+2      	; 0x96ca <ProcessMusic+0x368>
    96c8:	41 c0       	rjmp	.+130    	; 0x974c <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    96ca:	89 9f       	mul	r24, r25
    96cc:	c0 01       	movw	r24, r0
    96ce:	11 24       	eor	r1, r1
    96d0:	93 95       	inc	r25
				uVol>>=8;
    96d2:	89 2f       	mov	r24, r25
    96d4:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    96d6:	58 9f       	mul	r21, r24
    96d8:	90 01       	movw	r18, r0
    96da:	59 9f       	mul	r21, r25
    96dc:	30 0d       	add	r19, r0
    96de:	11 24       	eor	r1, r1
    96e0:	c9 01       	movw	r24, r18
    96e2:	93 95       	inc	r25
				uVol>>=8;
    96e4:	89 2f       	mov	r24, r25
    96e6:	99 27       	eor	r25, r25
    96e8:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    96ea:	50 81       	ld	r21, Z
    96ec:	58 9f       	mul	r21, r24
    96ee:	90 01       	movw	r18, r0
    96f0:	59 9f       	mul	r21, r25
    96f2:	30 0d       	add	r19, r0
    96f4:	11 24       	eor	r1, r1
    96f6:	33 95       	inc	r19
				uVol>>=8;
    96f8:	23 2f       	mov	r18, r19
    96fa:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    96fc:	42 9f       	mul	r20, r18
    96fe:	c0 01       	movw	r24, r0
    9700:	43 9f       	mul	r20, r19
    9702:	90 0d       	add	r25, r0
    9704:	11 24       	eor	r1, r1
    9706:	93 95       	inc	r25
				uVol>>=8;
    9708:	89 2f       	mov	r24, r25
    970a:	99 27       	eor	r25, r25
    970c:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    970e:	20 81       	ld	r18, Z
    9710:	22 23       	and	r18, r18
    9712:	f1 f0       	breq	.+60     	; 0x9750 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9714:	d5 01       	movw	r26, r10
    9716:	ec 91       	ld	r30, X
    9718:	f0 e0       	ldi	r31, 0x00	; 0
    971a:	e0 50       	subi	r30, 0x00	; 0
    971c:	f5 46       	sbci	r31, 0x65	; 101
    971e:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    9720:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    9722:	2e 9f       	mul	r18, r30
    9724:	f0 01       	movw	r30, r0
    9726:	11 24       	eor	r1, r1
    9728:	f3 95       	inc	r31
					tVol>>=8;
    972a:	ef 2f       	mov	r30, r31
    972c:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    972e:	a3 01       	movw	r20, r6
    9730:	4e 1b       	sub	r20, r30
    9732:	5f 0b       	sbc	r21, r31
    9734:	48 9f       	mul	r20, r24
    9736:	90 01       	movw	r18, r0
    9738:	49 9f       	mul	r20, r25
    973a:	30 0d       	add	r19, r0
    973c:	58 9f       	mul	r21, r24
    973e:	30 0d       	add	r19, r0
    9740:	11 24       	eor	r1, r1
    9742:	c9 01       	movw	r24, r18
    9744:	93 95       	inc	r25
					uVol>>=8;
    9746:	89 2f       	mov	r24, r25
    9748:	99 27       	eor	r25, r25
    974a:	02 c0       	rjmp	.+4      	; 0x9750 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    974c:	80 e0       	ldi	r24, 0x00	; 0
    974e:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    9750:	f5 01       	movw	r30, r10
    9752:	30 81       	ld	r19, Z
    9754:	f8 01       	movw	r30, r16
    9756:	3a 97       	sbiw	r30, 0x0a	; 10
    9758:	20 81       	ld	r18, Z
    975a:	23 0f       	add	r18, r19
    975c:	d5 01       	movw	r26, r10
    975e:	2c 93       	st	X, r18
    9760:	02 c0       	rjmp	.+4      	; 0x9766 <ProcessMusic+0x404>

		}else{
			uVol=0;
    9762:	80 e0       	ldi	r24, 0x00	; 0
    9764:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9766:	f7 01       	movw	r30, r14
    9768:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    976a:	53 94       	inc	r5
    976c:	66 96       	adiw	r28, 0x16	; 22
    976e:	f6 e0       	ldi	r31, 0x06	; 6
    9770:	ef 0e       	add	r14, r31
    9772:	f1 1c       	adc	r15, r1
    9774:	86 e1       	ldi	r24, 0x16	; 22
    9776:	a8 0e       	add	r10, r24
    9778:	b1 1c       	adc	r11, r1
    977a:	0a 5e       	subi	r16, 0xEA	; 234
    977c:	1f 4f       	sbci	r17, 0xFF	; 255
    977e:	96 e1       	ldi	r25, 0x16	; 22
    9780:	c9 0e       	add	r12, r25
    9782:	d1 1c       	adc	r13, r1
    9784:	a6 e1       	ldi	r26, 0x16	; 22
    9786:	8a 0e       	add	r8, r26
    9788:	91 1c       	adc	r9, r1
    978a:	b5 e0       	ldi	r27, 0x05	; 5
    978c:	5b 12       	cpse	r5, r27
    978e:	34 cf       	rjmp	.-408    	; 0x95f8 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9790:	df 91       	pop	r29
    9792:	cf 91       	pop	r28
    9794:	1f 91       	pop	r17
    9796:	0f 91       	pop	r16
    9798:	ff 90       	pop	r15
    979a:	ef 90       	pop	r14
    979c:	df 90       	pop	r13
    979e:	cf 90       	pop	r12
    97a0:	bf 90       	pop	r11
    97a2:	af 90       	pop	r10
    97a4:	9f 90       	pop	r9
    97a6:	8f 90       	pop	r8
    97a8:	7f 90       	pop	r7
    97aa:	6f 90       	pop	r6
    97ac:	5f 90       	pop	r5
    97ae:	08 95       	ret

000097b0 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    97b0:	80 93 b5 0b 	sts	0x0BB5, r24
    97b4:	08 95       	ret

000097b6 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    97b6:	99 27       	eor	r25, r25
	clr r23
    97b8:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    97ba:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    97bc:	09 f4       	brne	.+2      	; 0x97c0 <set_note_waves>
		ret
    97be:	08 95       	ret

000097c0 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    97c0:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    97c2:	f9 e9       	ldi	r31, 0x99	; 153
	lsl r22
    97c4:	66 0f       	add	r22, r22
	rol r23
    97c6:	77 1f       	adc	r23, r23
	add ZL,r22
    97c8:	e6 0f       	add	r30, r22
	adc ZH,r23	
    97ca:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    97cc:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    97ce:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    97d0:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    97d2:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    97d4:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    97d6:	28 9f       	mul	r18, r24
	add ZL,r0
    97d8:	e0 0d       	add	r30, r0
	adc ZH,r1
    97da:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    97dc:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    97de:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    97e0:	11 24       	eor	r1, r1
	

	ret
    97e2:	08 95       	ret

000097e4 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    97e4:	99 27       	eor	r25, r25
	clr r23
    97e6:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    97e8:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    97ea:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    97ec:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    97ee:	28 9f       	mul	r18, r24
	add ZL,r0
    97f0:	e0 0d       	add	r30, r0
	adc ZH,r1
    97f2:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    97f4:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    97f6:	31 f4       	brne	.+12     	; 0x9804 <smw1>
	lds r22,tr4_params
    97f8:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    97fc:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    97fe:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    9802:	0b c0       	rjmp	.+22     	; 0x981a <esmw>

00009804 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    9804:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9806:	31 f4       	brne	.+12     	; 0x9814 <smw2>
	lds r22,tr4_params
    9808:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    980c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    980e:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    9812:	03 c0       	rjmp	.+6      	; 0x981a <esmw>

00009814 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    9814:	7b e9       	ldi	r23, 0x9B	; 155
	add r23,r22
    9816:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9818:	75 83       	std	Z+5, r23	; 0x05

0000981a <esmw>:

esmw:
	clr r1	
    981a:	11 24       	eor	r1, r1
	ret
    981c:	08 95       	ret
	...

00009900 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9900:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9902:	80 93 01 0b 	sts	0x0B01, r24
	ret
    9906:	08 95       	ret

00009908 <steptable>:
    9908:	22 00       	.word	0x0022	; ????
    990a:	24 00       	.word	0x0024	; ????
    990c:	26 00       	.word	0x0026	; ????
    990e:	28 00       	.word	0x0028	; ????
    9910:	2b 00       	.word	0x002b	; ????
    9912:	2d 00       	.word	0x002d	; ????
    9914:	30 00       	.word	0x0030	; ????
    9916:	33 00       	.word	0x0033	; ????
    9918:	36 00       	.word	0x0036	; ????
    991a:	39 00       	.word	0x0039	; ????
    991c:	3d 00       	.word	0x003d	; ????
    991e:	40 00       	.word	0x0040	; ????
    9920:	44 00       	.word	0x0044	; ????
    9922:	48 00       	.word	0x0048	; ????
    9924:	4c 00       	.word	0x004c	; ????
    9926:	51 00       	.word	0x0051	; ????
    9928:	56 00       	.word	0x0056	; ????
    992a:	5b 00       	.word	0x005b	; ????
    992c:	60 00       	.word	0x0060	; ????
    992e:	66 00       	.word	0x0066	; ????
    9930:	6c 00       	.word	0x006c	; ????
    9932:	73 00       	.word	0x0073	; ????
    9934:	79 00       	.word	0x0079	; ????
    9936:	81 00       	.word	0x0081	; ????
    9938:	88 00       	.word	0x0088	; ????
    993a:	90 00       	.word	0x0090	; ????
    993c:	99 00       	.word	0x0099	; ????
    993e:	a2 00       	.word	0x00a2	; ????
    9940:	ac 00       	.word	0x00ac	; ????
    9942:	b6 00       	.word	0x00b6	; ????
    9944:	c1 00       	.word	0x00c1	; ????
    9946:	cc 00       	.word	0x00cc	; ????
    9948:	d8 00       	.word	0x00d8	; ????
    994a:	e5 00       	.word	0x00e5	; ????
    994c:	f3 00       	.word	0x00f3	; ????
    994e:	01 01       	movw	r0, r2
    9950:	10 01       	movw	r2, r0
    9952:	21 01       	movw	r4, r2
    9954:	32 01       	movw	r6, r4
    9956:	44 01       	movw	r8, r8
    9958:	57 01       	movw	r10, r14
    995a:	6c 01       	movw	r12, r24
    995c:	81 01       	movw	r16, r2
    995e:	98 01       	movw	r18, r16
    9960:	b0 01       	movw	r22, r0
    9962:	ca 01       	movw	r24, r20
    9964:	e5 01       	movw	r28, r10
    9966:	02 02       	muls	r16, r18
    9968:	21 02       	muls	r18, r17
    996a:	41 02       	muls	r20, r17
    996c:	64 02       	muls	r22, r20
    996e:	88 02       	muls	r24, r24
    9970:	ae 02       	muls	r26, r30
    9972:	d7 02       	muls	r29, r23
    9974:	03 03       	mulsu	r16, r19
    9976:	30 03       	mulsu	r19, r16
    9978:	61 03       	mulsu	r22, r17
    997a:	94 03       	fmuls	r17, r20
    997c:	cb 03       	fmulsu	r20, r19
    997e:	05 04       	cpc	r0, r5
    9980:	42 04       	cpc	r4, r2
    9982:	83 04       	cpc	r8, r3
    9984:	c7 04       	cpc	r12, r7
    9986:	10 05       	cpc	r17, r0
    9988:	5d 05       	cpc	r21, r13
    998a:	af 05       	cpc	r26, r15
    998c:	05 06       	cpc	r0, r21
    998e:	61 06       	cpc	r6, r17
    9990:	c2 06       	cpc	r12, r18
    9992:	29 07       	cpc	r18, r25
    9994:	96 07       	cpc	r25, r22
    9996:	09 08       	sbc	r0, r9
    9998:	83 08       	sbc	r8, r3
    999a:	05 09       	sbc	r16, r5
    999c:	8e 09       	sbc	r24, r14
    999e:	20 0a       	sbc	r2, r16
    99a0:	ba 0a       	sbc	r11, r26
    99a2:	5d 0b       	sbc	r21, r29
    99a4:	0a 0c       	add	r0, r10
    99a6:	c1 0c       	add	r12, r1
    99a8:	84 0d       	add	r24, r4
    99aa:	51 0e       	add	r5, r17
    99ac:	2b 0f       	add	r18, r27
    99ae:	12 10       	cpse	r1, r2
    99b0:	07 11       	cpse	r16, r7
    99b2:	0a 12       	cpse	r0, r26
    99b4:	1d 13       	cpse	r17, r29
    99b6:	40 14       	cp	r4, r0
    99b8:	74 15       	cp	r23, r4
    99ba:	ba 16       	cp	r11, r26
    99bc:	14 18       	sub	r1, r4
    99be:	83 19       	sub	r24, r3
    99c0:	07 1b       	sub	r16, r23
    99c2:	a3 1c       	adc	r10, r3
    99c4:	57 1e       	adc	r5, r23
    99c6:	24 20       	and	r2, r4
    99c8:	0e 22       	and	r0, r30
    99ca:	14 24       	eor	r1, r4
    99cc:	39 26       	eor	r3, r25
    99ce:	7f 28       	or	r7, r15
    99d0:	e8 2a       	or	r14, r24
    99d2:	75 2d       	mov	r23, r5
    99d4:	29 30       	cpi	r18, 0x09	; 9
    99d6:	06 33       	cpi	r16, 0x36	; 54
    99d8:	0f 36       	cpi	r16, 0x6F	; 111
    99da:	45 39       	cpi	r20, 0x95	; 149
    99dc:	ad 3c       	cpi	r26, 0xCD	; 205
    99de:	49 40       	sbci	r20, 0x09	; 9
    99e0:	1b 44       	sbci	r17, 0x4B	; 75
    99e2:	28 48       	sbci	r18, 0x88	; 136
    99e4:	73 4c       	sbci	r23, 0xC3	; 195
    99e6:	fe 50       	subi	r31, 0x0E	; 14
    99e8:	cf 55       	subi	r28, 0x5F	; 95
    99ea:	ea 5a       	subi	r30, 0xAA	; 170
    99ec:	51 60       	ori	r21, 0x01	; 1
    99ee:	0c 66       	ori	r16, 0x6C	; 108
    99f0:	1d 6c       	ori	r17, 0xCD	; 205
    99f2:	8b 72       	andi	r24, 0x2B	; 43
    99f4:	5a 79       	andi	r21, 0x9A	; 154
    99f6:	92 80       	ldd	r9, Z+2	; 0x02
    99f8:	37 88       	ldd	r3, Z+23	; 0x17
    99fa:	50 90 e5 98 	lds	r5, 0x98E5
    99fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9a00:	9f ab       	std	Y+55, r25	; 0x37
    9a02:	d3 b5       	in	r29, 0x23	; 35
    9a04:	a3 c0       	rjmp	.+326    	; 0x9b4c <waves+0x4c>
	...

00009b00 <waves>:
    9b00:	00 03       	mulsu	r16, r16
    9b02:	06 09       	sbc	r16, r6
    9b04:	0c 10       	cpse	r0, r12
    9b06:	13 16       	cp	r1, r19
    9b08:	19 1c       	adc	r1, r9
    9b0a:	1f 22       	and	r1, r31
    9b0c:	25 28       	or	r2, r5
    9b0e:	2b 2e       	mov	r2, r27
    9b10:	31 33       	cpi	r19, 0x31	; 49
    9b12:	36 39       	cpi	r19, 0x96	; 150
    9b14:	3c 3f       	cpi	r19, 0xFC	; 252
    9b16:	41 44       	sbci	r20, 0x41	; 65
    9b18:	47 49       	sbci	r20, 0x97	; 151
    9b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9b1c:	51 53       	subi	r21, 0x31	; 49
    9b1e:	55 58       	subi	r21, 0x85	; 133
    9b20:	5a 5c       	subi	r21, 0xCA	; 202
    9b22:	5e 60       	ori	r21, 0x0E	; 14
    9b24:	62 64       	ori	r22, 0x42	; 66
    9b26:	66 68       	ori	r22, 0x86	; 134
    9b28:	6a 6b       	ori	r22, 0xBA	; 186
    9b2a:	6d 6f       	ori	r22, 0xFD	; 253
    9b2c:	70 71       	andi	r23, 0x10	; 16
    9b2e:	73 74       	andi	r23, 0x43	; 67
    9b30:	75 76       	andi	r23, 0x65	; 101
    9b32:	78 79       	andi	r23, 0x98	; 152
    9b34:	7a 7a       	andi	r23, 0xAA	; 170
    9b36:	7b 7c       	andi	r23, 0xCB	; 203
    9b38:	7d 7d       	andi	r23, 0xDD	; 221
    9b3a:	7e 7e       	andi	r23, 0xEE	; 238
    9b3c:	7e 7f       	andi	r23, 0xFE	; 254
    9b3e:	7f 7f       	andi	r23, 0xFF	; 255
    9b40:	7f 7f       	andi	r23, 0xFF	; 255
    9b42:	7f 7f       	andi	r23, 0xFF	; 255
    9b44:	7e 7e       	andi	r23, 0xEE	; 238
    9b46:	7e 7d       	andi	r23, 0xDE	; 222
    9b48:	7d 7c       	andi	r23, 0xCD	; 205
    9b4a:	7b 7a       	andi	r23, 0xAB	; 171
    9b4c:	7a 79       	andi	r23, 0x9A	; 154
    9b4e:	78 76       	andi	r23, 0x68	; 104
    9b50:	75 74       	andi	r23, 0x45	; 69
    9b52:	73 71       	andi	r23, 0x13	; 19
    9b54:	70 6f       	ori	r23, 0xF0	; 240
    9b56:	6d 6b       	ori	r22, 0xBD	; 189
    9b58:	6a 68       	ori	r22, 0x8A	; 138
    9b5a:	66 64       	ori	r22, 0x46	; 70
    9b5c:	62 60       	ori	r22, 0x02	; 2
    9b5e:	5e 5c       	subi	r21, 0xCE	; 206
    9b60:	5a 58       	subi	r21, 0x8A	; 138
    9b62:	55 53       	subi	r21, 0x35	; 53
    9b64:	51 4e       	sbci	r21, 0xE1	; 225
    9b66:	4c 49       	sbci	r20, 0x9C	; 156
    9b68:	47 44       	sbci	r20, 0x47	; 71
    9b6a:	41 3f       	cpi	r20, 0xF1	; 241
    9b6c:	3c 39       	cpi	r19, 0x9C	; 156
    9b6e:	36 33       	cpi	r19, 0x36	; 54
    9b70:	31 2e       	mov	r3, r17
    9b72:	2b 28       	or	r2, r11
    9b74:	25 22       	and	r2, r21
    9b76:	1f 1c       	adc	r1, r15
    9b78:	19 16       	cp	r1, r25
    9b7a:	13 10       	cpse	r1, r3
    9b7c:	0c 09       	sbc	r16, r12
    9b7e:	06 03       	mulsu	r16, r22
    9b80:	00 fd       	sbrc	r16, 0
    9b82:	fa f7       	brpl	.-2      	; 0x9b82 <waves+0x82>
    9b84:	f4 f0       	brlt	.+60     	; 0x9bc2 <waves+0xc2>
    9b86:	ed ea       	ldi	r30, 0xAD	; 173
    9b88:	e7 e4       	ldi	r30, 0x47	; 71
    9b8a:	e1 de       	rcall	.-574    	; 0x994e <steptable+0x46>
    9b8c:	db d8       	rcall	.-3658   	; 0x8d44 <ReadButtons+0x38>
    9b8e:	d5 d2       	rcall	.+1450   	; 0xa13a <waves+0x63a>
    9b90:	cf cd       	rjmp	.-1122   	; 0x9730 <ProcessMusic+0x3ce>
    9b92:	ca c7       	rjmp	.+3988   	; 0xab28 <LBGetJoyPadState+0x3e>
    9b94:	c4 c1       	rjmp	.+904    	; 0x9f1e <waves+0x41e>
    9b96:	bf bc       	out	0x2f, r11	; 47
    9b98:	b9 b7       	in	r27, 0x39	; 57
    9b9a:	b4 b2       	in	r11, 0x14	; 20
    9b9c:	af ad       	ldd	r26, Y+63	; 0x3f
    9b9e:	ab a8       	ldd	r10, Y+51	; 0x33
    9ba0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    9ba2:	a2 a0       	ldd	r10, Z+34	; 0x22
    9ba4:	9e 9c       	mul	r9, r14
    9ba6:	9a 98       	cbi	0x13, 2	; 19
    9ba8:	96 95       	lsr	r25
    9baa:	93 91       	.word	0x9193	; ????
    9bac:	90 8f       	std	Z+24, r25	; 0x18
    9bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9bb0:	8b 8a       	std	Y+19, r8	; 0x13
    9bb2:	88 87       	std	Y+8, r24	; 0x08
    9bb4:	86 86       	std	Z+14, r8	; 0x0e
    9bb6:	85 84       	ldd	r8, Z+13	; 0x0d
    9bb8:	83 83       	std	Z+3, r24	; 0x03
    9bba:	82 82       	std	Z+2, r8	; 0x02
    9bbc:	82 81       	ldd	r24, Z+2	; 0x02
    9bbe:	81 81       	ldd	r24, Z+1	; 0x01
    9bc0:	81 81       	ldd	r24, Z+1	; 0x01
    9bc2:	81 81       	ldd	r24, Z+1	; 0x01
    9bc4:	82 82       	std	Z+2, r8	; 0x02
    9bc6:	82 83       	std	Z+2, r24	; 0x02
    9bc8:	83 84       	ldd	r8, Z+11	; 0x0b
    9bca:	85 86       	std	Z+13, r8	; 0x0d
    9bcc:	86 87       	std	Z+14, r24	; 0x0e
    9bce:	88 8a       	std	Y+16, r8	; 0x10
    9bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    9bd4:	90 91 93 95 	lds	r25, 0x9593
    9bd8:	96 98       	cbi	0x12, 6	; 18
    9bda:	9a 9c       	mul	r9, r10
    9bdc:	9e a0       	ldd	r9, Y+38	; 0x26
    9bde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    9be0:	a6 a8       	ldd	r10, Z+54	; 0x36
    9be2:	ab ad       	ldd	r26, Y+59	; 0x3b
    9be4:	af b2       	in	r10, 0x1f	; 31
    9be6:	b4 b7       	in	r27, 0x34	; 52
    9be8:	b9 bc       	out	0x29, r11	; 41
    9bea:	bf c1       	rjmp	.+894    	; 0x9f6a <waves+0x46a>
    9bec:	c4 c7       	rjmp	.+3976   	; 0xab76 <LBGetJoyPadState+0x8c>
    9bee:	ca cd       	rjmp	.-1132   	; 0x9784 <ProcessMusic+0x422>
    9bf0:	cf d2       	rcall	.+1438   	; 0xa190 <waves+0x690>
    9bf2:	d5 d8       	rcall	.-3670   	; 0x8d9e <FormatEeprom+0x6>
    9bf4:	db de       	rcall	.-586    	; 0x99ac <steptable+0xa4>
    9bf6:	e1 e4       	ldi	r30, 0x41	; 65
    9bf8:	e7 ea       	ldi	r30, 0xA7	; 167
    9bfa:	ed f0       	brhs	.+58     	; 0x9c36 <waves+0x136>
    9bfc:	f4 f7       	brge	.-4      	; 0x9bfa <waves+0xfa>
    9bfe:	fa fd       	.word	0xfdfa	; ????
    9c00:	80 81       	ld	r24, Z
    9c02:	82 83       	std	Z+2, r24	; 0x02
    9c04:	84 85       	ldd	r24, Z+12	; 0x0c
    9c06:	86 87       	std	Z+14, r24	; 0x0e
    9c08:	88 89       	ldd	r24, Y+16	; 0x10
    9c0a:	8a 8b       	std	Y+18, r24	; 0x12
    9c0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9c0e:	8e 8f       	std	Y+30, r24	; 0x1e
    9c10:	90 91 92 93 	lds	r25, 0x9392
    9c14:	94 95       	.word	0x9594	; ????
    9c16:	96 97       	sbiw	r26, 0x26	; 38
    9c18:	98 99       	sbic	0x13, 0	; 19
    9c1a:	9a 9b       	sbis	0x13, 2	; 19
    9c1c:	9c 9d       	mul	r25, r12
    9c1e:	9e 9f       	mul	r25, r30
    9c20:	a0 a1       	ldd	r26, Z+32	; 0x20
    9c22:	a2 a3       	std	Z+34, r26	; 0x22
    9c24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9c26:	a6 a7       	std	Z+46, r26	; 0x2e
    9c28:	a8 a9       	ldd	r26, Y+48	; 0x30
    9c2a:	aa ab       	std	Y+50, r26	; 0x32
    9c2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    9c2e:	ae af       	std	Y+62, r26	; 0x3e
    9c30:	b0 b1       	in	r27, 0x00	; 0
    9c32:	b2 b3       	in	r27, 0x12	; 18
    9c34:	b4 b5       	in	r27, 0x24	; 36
    9c36:	b6 b7       	in	r27, 0x36	; 54
    9c38:	b8 b9       	out	0x08, r27	; 8
    9c3a:	ba bb       	out	0x1a, r27	; 26
    9c3c:	bc bd       	out	0x2c, r27	; 44
    9c3e:	be bf       	out	0x3e, r27	; 62
    9c40:	c0 c1       	rjmp	.+896    	; 0x9fc2 <waves+0x4c2>
    9c42:	c2 c3       	rjmp	.+1924   	; 0xa3c8 <waves+0x8c8>
    9c44:	c4 c5       	rjmp	.+2952   	; 0xa7ce <InitializeVideoMode+0x10>
    9c46:	c6 c7       	rjmp	.+3980   	; 0xabd4 <LBPrintStr+0x3c>
    9c48:	c8 c9       	rjmp	.-3184   	; 0x8fda <PatchCommand11+0x28>
    9c4a:	ca cb       	rjmp	.-2156   	; 0x93e0 <ProcessMusic+0x7e>
    9c4c:	cc cd       	rjmp	.-1128   	; 0x97e6 <SetMixerWave+0x2>
    9c4e:	ce cf       	rjmp	.-100    	; 0x9bec <waves+0xec>
    9c50:	d0 d1       	rcall	.+928    	; 0x9ff2 <waves+0x4f2>
    9c52:	d2 d3       	rcall	.+1956   	; 0xa3f8 <waves+0x8f8>
    9c54:	d4 d5       	rcall	.+2984   	; 0xa7fe <DrawMap2+0x2c>
    9c56:	d6 d7       	rcall	.+4012   	; 0xac04 <LBCollides+0xa>
    9c58:	d8 d9       	rcall	.-3152   	; 0x900a <PatchCommand11+0x58>
    9c5a:	da db       	rcall	.-2124   	; 0x9410 <ProcessMusic+0xae>
    9c5c:	dc dd       	rcall	.-1096   	; 0x9816 <smw2+0x2>
    9c5e:	de df       	rcall	.-68     	; 0x9c1c <waves+0x11c>
    9c60:	e0 e1       	ldi	r30, 0x10	; 16
    9c62:	e2 e3       	ldi	r30, 0x32	; 50
    9c64:	e4 e5       	ldi	r30, 0x54	; 84
    9c66:	e6 e7       	ldi	r30, 0x76	; 118
    9c68:	e8 e9       	ldi	r30, 0x98	; 152
    9c6a:	ea eb       	ldi	r30, 0xBA	; 186
    9c6c:	ec ed       	ldi	r30, 0xDC	; 220
    9c6e:	ee ef       	ldi	r30, 0xFE	; 254
    9c70:	f0 f1       	brcs	.+124    	; 0x9cee <waves+0x1ee>
    9c72:	f2 f3       	brmi	.-4      	; 0x9c70 <waves+0x170>
    9c74:	f4 f5       	brge	.+124    	; 0x9cf2 <waves+0x1f2>
    9c76:	f6 f7       	brtc	.-4      	; 0x9c74 <waves+0x174>
    9c78:	f8 f9       	.word	0xf9f8	; ????
    9c7a:	fa fb       	.word	0xfbfa	; ????
    9c7c:	fc fd       	.word	0xfdfc	; ????
    9c7e:	fe ff       	.word	0xfffe	; ????
    9c80:	00 01       	movw	r0, r0
    9c82:	02 03       	mulsu	r16, r18
    9c84:	04 05       	cpc	r16, r4
    9c86:	06 07       	cpc	r16, r22
    9c88:	08 09       	sbc	r16, r8
    9c8a:	0a 0b       	sbc	r16, r26
    9c8c:	0c 0d       	add	r16, r12
    9c8e:	0e 0f       	add	r16, r30
    9c90:	10 11       	cpse	r17, r0
    9c92:	12 13       	cpse	r17, r18
    9c94:	14 15       	cp	r17, r4
    9c96:	16 17       	cp	r17, r22
    9c98:	18 19       	sub	r17, r8
    9c9a:	1a 1b       	sub	r17, r26
    9c9c:	1c 1d       	adc	r17, r12
    9c9e:	1e 1f       	adc	r17, r30
    9ca0:	20 21       	and	r18, r0
    9ca2:	22 23       	and	r18, r18
    9ca4:	24 25       	eor	r18, r4
    9ca6:	26 27       	eor	r18, r22
    9ca8:	28 29       	or	r18, r8
    9caa:	2a 2b       	or	r18, r26
    9cac:	2c 2d       	mov	r18, r12
    9cae:	2e 2f       	mov	r18, r30
    9cb0:	30 31       	cpi	r19, 0x10	; 16
    9cb2:	32 33       	cpi	r19, 0x32	; 50
    9cb4:	34 35       	cpi	r19, 0x54	; 84
    9cb6:	36 37       	cpi	r19, 0x76	; 118
    9cb8:	38 39       	cpi	r19, 0x98	; 152
    9cba:	3a 3b       	cpi	r19, 0xBA	; 186
    9cbc:	3c 3d       	cpi	r19, 0xDC	; 220
    9cbe:	3e 3f       	cpi	r19, 0xFE	; 254
    9cc0:	40 41       	sbci	r20, 0x10	; 16
    9cc2:	42 43       	sbci	r20, 0x32	; 50
    9cc4:	44 45       	sbci	r20, 0x54	; 84
    9cc6:	46 47       	sbci	r20, 0x76	; 118
    9cc8:	48 49       	sbci	r20, 0x98	; 152
    9cca:	4a 4b       	sbci	r20, 0xBA	; 186
    9ccc:	4c 4d       	sbci	r20, 0xDC	; 220
    9cce:	4e 4f       	sbci	r20, 0xFE	; 254
    9cd0:	50 51       	subi	r21, 0x10	; 16
    9cd2:	52 53       	subi	r21, 0x32	; 50
    9cd4:	54 55       	subi	r21, 0x54	; 84
    9cd6:	56 57       	subi	r21, 0x76	; 118
    9cd8:	58 59       	subi	r21, 0x98	; 152
    9cda:	5a 5b       	subi	r21, 0xBA	; 186
    9cdc:	5c 5d       	subi	r21, 0xDC	; 220
    9cde:	5e 5f       	subi	r21, 0xFE	; 254
    9ce0:	60 61       	ori	r22, 0x10	; 16
    9ce2:	62 63       	ori	r22, 0x32	; 50
    9ce4:	64 65       	ori	r22, 0x54	; 84
    9ce6:	66 67       	ori	r22, 0x76	; 118
    9ce8:	68 69       	ori	r22, 0x98	; 152
    9cea:	6a 6b       	ori	r22, 0xBA	; 186
    9cec:	6c 6d       	ori	r22, 0xDC	; 220
    9cee:	6e 6f       	ori	r22, 0xFE	; 254
    9cf0:	70 71       	andi	r23, 0x10	; 16
    9cf2:	72 73       	andi	r23, 0x32	; 50
    9cf4:	74 75       	andi	r23, 0x54	; 84
    9cf6:	76 77       	andi	r23, 0x76	; 118
    9cf8:	78 79       	andi	r23, 0x98	; 152
    9cfa:	7a 7b       	andi	r23, 0xBA	; 186
    9cfc:	7c 7d       	andi	r23, 0xDC	; 220
    9cfe:	7e 7f       	andi	r23, 0xFE	; 254
    9d00:	00 02       	muls	r16, r16
    9d02:	04 06       	cpc	r0, r20
    9d04:	08 0a       	sbc	r0, r24
    9d06:	0c 0e       	add	r0, r28
    9d08:	10 12       	cpse	r1, r16
    9d0a:	14 16       	cp	r1, r20
    9d0c:	18 1a       	sub	r1, r24
    9d0e:	1c 1e       	adc	r1, r28
    9d10:	20 22       	and	r2, r16
    9d12:	24 26       	eor	r2, r20
    9d14:	28 2a       	or	r2, r24
    9d16:	2c 2e       	mov	r2, r28
    9d18:	30 32       	cpi	r19, 0x20	; 32
    9d1a:	34 36       	cpi	r19, 0x64	; 100
    9d1c:	38 3a       	cpi	r19, 0xA8	; 168
    9d1e:	3c 3e       	cpi	r19, 0xEC	; 236
    9d20:	40 42       	sbci	r20, 0x20	; 32
    9d22:	44 46       	sbci	r20, 0x64	; 100
    9d24:	48 4a       	sbci	r20, 0xA8	; 168
    9d26:	4c 4e       	sbci	r20, 0xEC	; 236
    9d28:	50 52       	subi	r21, 0x20	; 32
    9d2a:	54 56       	subi	r21, 0x64	; 100
    9d2c:	58 5a       	subi	r21, 0xA8	; 168
    9d2e:	5c 5e       	subi	r21, 0xEC	; 236
    9d30:	60 62       	ori	r22, 0x20	; 32
    9d32:	64 66       	ori	r22, 0x64	; 100
    9d34:	68 6a       	ori	r22, 0xA8	; 168
    9d36:	6c 6e       	ori	r22, 0xEC	; 236
    9d38:	70 72       	andi	r23, 0x20	; 32
    9d3a:	74 76       	andi	r23, 0x64	; 100
    9d3c:	78 7a       	andi	r23, 0xA8	; 168
    9d3e:	7c 7e       	andi	r23, 0xEC	; 236
    9d40:	7f 7d       	andi	r23, 0xDF	; 223
    9d42:	7b 79       	andi	r23, 0x9B	; 155
    9d44:	77 75       	andi	r23, 0x57	; 87
    9d46:	73 71       	andi	r23, 0x13	; 19
    9d48:	6f 6d       	ori	r22, 0xDF	; 223
    9d4a:	6b 69       	ori	r22, 0x9B	; 155
    9d4c:	67 65       	ori	r22, 0x57	; 87
    9d4e:	63 61       	ori	r22, 0x13	; 19
    9d50:	5f 5d       	subi	r21, 0xDF	; 223
    9d52:	5b 59       	subi	r21, 0x9B	; 155
    9d54:	57 55       	subi	r21, 0x57	; 87
    9d56:	53 51       	subi	r21, 0x13	; 19
    9d58:	4f 4d       	sbci	r20, 0xDF	; 223
    9d5a:	4b 49       	sbci	r20, 0x9B	; 155
    9d5c:	47 45       	sbci	r20, 0x57	; 87
    9d5e:	43 41       	sbci	r20, 0x13	; 19
    9d60:	3f 3d       	cpi	r19, 0xDF	; 223
    9d62:	3b 39       	cpi	r19, 0x9B	; 155
    9d64:	37 35       	cpi	r19, 0x57	; 87
    9d66:	33 31       	cpi	r19, 0x13	; 19
    9d68:	2f 2d       	mov	r18, r15
    9d6a:	2b 29       	or	r18, r11
    9d6c:	27 25       	eor	r18, r7
    9d6e:	23 21       	and	r18, r3
    9d70:	1f 1d       	adc	r17, r15
    9d72:	1b 19       	sub	r17, r11
    9d74:	17 15       	cp	r17, r7
    9d76:	13 11       	cpse	r17, r3
    9d78:	0f 0d       	add	r16, r15
    9d7a:	0b 09       	sbc	r16, r11
    9d7c:	07 05       	cpc	r16, r7
    9d7e:	03 01       	movw	r0, r6
    9d80:	ff fd       	.word	0xfdff	; ????
    9d82:	fb f9       	.word	0xf9fb	; ????
    9d84:	f7 f5       	brid	.+124    	; 0x9e02 <waves+0x302>
    9d86:	f3 f1       	brvs	.+124    	; 0x9e04 <waves+0x304>
    9d88:	ef ed       	ldi	r30, 0xDF	; 223
    9d8a:	eb e9       	ldi	r30, 0x9B	; 155
    9d8c:	e7 e5       	ldi	r30, 0x57	; 87
    9d8e:	e3 e1       	ldi	r30, 0x13	; 19
    9d90:	df dd       	rcall	.-1090   	; 0x9950 <steptable+0x48>
    9d92:	db d9       	rcall	.-3146   	; 0x914a <TriggerCommon+0x2e>
    9d94:	d7 d5       	rcall	.+2990   	; 0xa944 <DisplayLogo+0x8>
    9d96:	d3 d1       	rcall	.+934    	; 0xa13e <waves+0x63e>
    9d98:	cf cd       	rjmp	.-1122   	; 0x9938 <steptable+0x30>
    9d9a:	cb c9       	rjmp	.-3178   	; 0x9132 <TriggerCommon+0x16>
    9d9c:	c7 c5       	rjmp	.+2958   	; 0xa92c <WaitVsync+0x1e>
    9d9e:	c3 c1       	rjmp	.+902    	; 0xa126 <waves+0x626>
    9da0:	bf bd       	out	0x2f, r27	; 47
    9da2:	bb b9       	out	0x0b, r27	; 11
    9da4:	b7 b5       	in	r27, 0x27	; 39
    9da6:	b3 b1       	in	r27, 0x03	; 3
    9da8:	af ad       	ldd	r26, Y+63	; 0x3f
    9daa:	ab a9       	ldd	r26, Y+51	; 0x33
    9dac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9dae:	a3 a1       	ldd	r26, Z+35	; 0x23
    9db0:	9f 9d       	mul	r25, r15
    9db2:	9b 99       	sbic	0x13, 3	; 19
    9db4:	97 95       	ror	r25
    9db6:	93 91       	.word	0x9193	; ????
    9db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9dba:	8b 89       	ldd	r24, Y+19	; 0x13
    9dbc:	87 85       	ldd	r24, Z+15	; 0x0f
    9dbe:	83 81       	ldd	r24, Z+3	; 0x03
    9dc0:	80 82       	st	Z, r8
    9dc2:	84 86       	std	Z+12, r8	; 0x0c
    9dc4:	88 8a       	std	Y+16, r8	; 0x10
    9dc6:	8c 8e       	std	Y+28, r8	; 0x1c
    9dc8:	90 92 94 96 	sts	0x9694, r9
    9dcc:	98 9a       	sbi	0x13, 0	; 19
    9dce:	9c 9e       	mul	r9, r28
    9dd0:	a0 a2       	std	Z+32, r10	; 0x20
    9dd2:	a4 a6       	std	Z+44, r10	; 0x2c
    9dd4:	a8 aa       	std	Y+48, r10	; 0x30
    9dd6:	ac ae       	std	Y+60, r10	; 0x3c
    9dd8:	b0 b2       	in	r11, 0x10	; 16
    9dda:	b4 b6       	in	r11, 0x34	; 52
    9ddc:	b8 ba       	out	0x18, r11	; 24
    9dde:	bc be       	out	0x3c, r11	; 60
    9de0:	c0 c2       	rjmp	.+1408   	; 0xa362 <waves+0x862>
    9de2:	c4 c6       	rjmp	.+3464   	; 0xab6c <LBGetJoyPadState+0x82>
    9de4:	c8 ca       	rjmp	.-2672   	; 0x9376 <ProcessMusic+0x14>
    9de6:	cc ce       	rjmp	.-616    	; 0x9b80 <waves+0x80>
    9de8:	d0 d2       	rcall	.+1440   	; 0xa38a <waves+0x88a>
    9dea:	d4 d6       	rcall	.+3496   	; 0xab94 <LBCopyChars+0x14>
    9dec:	d8 da       	rcall	.-2640   	; 0x939e <ProcessMusic+0x3c>
    9dee:	dc de       	rcall	.-584    	; 0x9ba8 <waves+0xa8>
    9df0:	e0 e2       	ldi	r30, 0x20	; 32
    9df2:	e4 e6       	ldi	r30, 0x64	; 100
    9df4:	e8 ea       	ldi	r30, 0xA8	; 168
    9df6:	ec ee       	ldi	r30, 0xEC	; 236
    9df8:	f0 f2       	brcs	.-68     	; 0x9db6 <waves+0x2b6>
    9dfa:	f4 f6       	brge	.-68     	; 0x9db8 <waves+0x2b8>
    9dfc:	f8 fa       	.word	0xfaf8	; ????
    9dfe:	fc fe       	.word	0xfefc	; ????
    9e00:	7f 7f       	andi	r23, 0xFF	; 255
    9e02:	7f 7f       	andi	r23, 0xFF	; 255
    9e04:	7f 7f       	andi	r23, 0xFF	; 255
    9e06:	7f 7f       	andi	r23, 0xFF	; 255
    9e08:	7f 7f       	andi	r23, 0xFF	; 255
    9e0a:	7f 7f       	andi	r23, 0xFF	; 255
    9e0c:	7f 7f       	andi	r23, 0xFF	; 255
    9e0e:	7f 7f       	andi	r23, 0xFF	; 255
    9e10:	7f 7f       	andi	r23, 0xFF	; 255
    9e12:	7f 7f       	andi	r23, 0xFF	; 255
    9e14:	7f 7f       	andi	r23, 0xFF	; 255
    9e16:	7f 7f       	andi	r23, 0xFF	; 255
    9e18:	7f 7f       	andi	r23, 0xFF	; 255
    9e1a:	7f 7f       	andi	r23, 0xFF	; 255
    9e1c:	7f 7f       	andi	r23, 0xFF	; 255
    9e1e:	7f 7f       	andi	r23, 0xFF	; 255
    9e20:	7f 7f       	andi	r23, 0xFF	; 255
    9e22:	7f 7f       	andi	r23, 0xFF	; 255
    9e24:	7f 7f       	andi	r23, 0xFF	; 255
    9e26:	7f 7f       	andi	r23, 0xFF	; 255
    9e28:	7f 7f       	andi	r23, 0xFF	; 255
    9e2a:	7f 7f       	andi	r23, 0xFF	; 255
    9e2c:	7f 7f       	andi	r23, 0xFF	; 255
    9e2e:	7f 7f       	andi	r23, 0xFF	; 255
    9e30:	7f 7f       	andi	r23, 0xFF	; 255
    9e32:	7f 7f       	andi	r23, 0xFF	; 255
    9e34:	7f 7f       	andi	r23, 0xFF	; 255
    9e36:	7f 7f       	andi	r23, 0xFF	; 255
    9e38:	7f 7f       	andi	r23, 0xFF	; 255
    9e3a:	7f 7f       	andi	r23, 0xFF	; 255
    9e3c:	7f 7f       	andi	r23, 0xFF	; 255
    9e3e:	7f 7f       	andi	r23, 0xFF	; 255
    9e40:	80 80       	ld	r8, Z
    9e42:	80 80       	ld	r8, Z
    9e44:	80 80       	ld	r8, Z
    9e46:	80 80       	ld	r8, Z
    9e48:	80 80       	ld	r8, Z
    9e4a:	80 80       	ld	r8, Z
    9e4c:	80 80       	ld	r8, Z
    9e4e:	80 80       	ld	r8, Z
    9e50:	80 80       	ld	r8, Z
    9e52:	80 80       	ld	r8, Z
    9e54:	80 80       	ld	r8, Z
    9e56:	80 80       	ld	r8, Z
    9e58:	80 80       	ld	r8, Z
    9e5a:	80 80       	ld	r8, Z
    9e5c:	80 80       	ld	r8, Z
    9e5e:	80 80       	ld	r8, Z
    9e60:	80 80       	ld	r8, Z
    9e62:	80 80       	ld	r8, Z
    9e64:	80 80       	ld	r8, Z
    9e66:	80 80       	ld	r8, Z
    9e68:	80 80       	ld	r8, Z
    9e6a:	80 80       	ld	r8, Z
    9e6c:	80 80       	ld	r8, Z
    9e6e:	80 80       	ld	r8, Z
    9e70:	80 80       	ld	r8, Z
    9e72:	80 80       	ld	r8, Z
    9e74:	80 80       	ld	r8, Z
    9e76:	80 80       	ld	r8, Z
    9e78:	80 80       	ld	r8, Z
    9e7a:	80 80       	ld	r8, Z
    9e7c:	80 80       	ld	r8, Z
    9e7e:	80 80       	ld	r8, Z
    9e80:	80 80       	ld	r8, Z
    9e82:	80 80       	ld	r8, Z
    9e84:	80 80       	ld	r8, Z
    9e86:	80 80       	ld	r8, Z
    9e88:	80 80       	ld	r8, Z
    9e8a:	80 80       	ld	r8, Z
    9e8c:	80 80       	ld	r8, Z
    9e8e:	80 80       	ld	r8, Z
    9e90:	80 80       	ld	r8, Z
    9e92:	80 80       	ld	r8, Z
    9e94:	80 80       	ld	r8, Z
    9e96:	80 80       	ld	r8, Z
    9e98:	80 80       	ld	r8, Z
    9e9a:	80 80       	ld	r8, Z
    9e9c:	80 80       	ld	r8, Z
    9e9e:	80 80       	ld	r8, Z
    9ea0:	80 80       	ld	r8, Z
    9ea2:	80 80       	ld	r8, Z
    9ea4:	80 80       	ld	r8, Z
    9ea6:	80 80       	ld	r8, Z
    9ea8:	80 80       	ld	r8, Z
    9eaa:	80 80       	ld	r8, Z
    9eac:	80 80       	ld	r8, Z
    9eae:	80 80       	ld	r8, Z
    9eb0:	80 80       	ld	r8, Z
    9eb2:	80 80       	ld	r8, Z
    9eb4:	80 80       	ld	r8, Z
    9eb6:	80 80       	ld	r8, Z
    9eb8:	80 80       	ld	r8, Z
    9eba:	80 80       	ld	r8, Z
    9ebc:	80 80       	ld	r8, Z
    9ebe:	80 80       	ld	r8, Z
    9ec0:	80 80       	ld	r8, Z
    9ec2:	80 80       	ld	r8, Z
    9ec4:	80 80       	ld	r8, Z
    9ec6:	80 80       	ld	r8, Z
    9ec8:	80 80       	ld	r8, Z
    9eca:	80 80       	ld	r8, Z
    9ecc:	80 80       	ld	r8, Z
    9ece:	80 80       	ld	r8, Z
    9ed0:	80 80       	ld	r8, Z
    9ed2:	80 80       	ld	r8, Z
    9ed4:	80 80       	ld	r8, Z
    9ed6:	80 80       	ld	r8, Z
    9ed8:	80 80       	ld	r8, Z
    9eda:	80 80       	ld	r8, Z
    9edc:	80 80       	ld	r8, Z
    9ede:	80 80       	ld	r8, Z
    9ee0:	80 80       	ld	r8, Z
    9ee2:	80 80       	ld	r8, Z
    9ee4:	80 80       	ld	r8, Z
    9ee6:	80 80       	ld	r8, Z
    9ee8:	80 80       	ld	r8, Z
    9eea:	80 80       	ld	r8, Z
    9eec:	80 80       	ld	r8, Z
    9eee:	80 80       	ld	r8, Z
    9ef0:	80 80       	ld	r8, Z
    9ef2:	80 80       	ld	r8, Z
    9ef4:	80 80       	ld	r8, Z
    9ef6:	80 80       	ld	r8, Z
    9ef8:	80 80       	ld	r8, Z
    9efa:	80 80       	ld	r8, Z
    9efc:	80 80       	ld	r8, Z
    9efe:	80 80       	ld	r8, Z
    9f00:	7f 7f       	andi	r23, 0xFF	; 255
    9f02:	7f 7f       	andi	r23, 0xFF	; 255
    9f04:	7f 7f       	andi	r23, 0xFF	; 255
    9f06:	7f 7f       	andi	r23, 0xFF	; 255
    9f08:	7f 7f       	andi	r23, 0xFF	; 255
    9f0a:	7f 7f       	andi	r23, 0xFF	; 255
    9f0c:	7f 7f       	andi	r23, 0xFF	; 255
    9f0e:	7f 7f       	andi	r23, 0xFF	; 255
    9f10:	7f 7f       	andi	r23, 0xFF	; 255
    9f12:	7f 7f       	andi	r23, 0xFF	; 255
    9f14:	7f 7f       	andi	r23, 0xFF	; 255
    9f16:	7f 7f       	andi	r23, 0xFF	; 255
    9f18:	7f 7f       	andi	r23, 0xFF	; 255
    9f1a:	7f 7f       	andi	r23, 0xFF	; 255
    9f1c:	7f 7f       	andi	r23, 0xFF	; 255
    9f1e:	7f 7f       	andi	r23, 0xFF	; 255
    9f20:	7f 7f       	andi	r23, 0xFF	; 255
    9f22:	7f 7f       	andi	r23, 0xFF	; 255
    9f24:	7f 7f       	andi	r23, 0xFF	; 255
    9f26:	7f 7f       	andi	r23, 0xFF	; 255
    9f28:	7f 7f       	andi	r23, 0xFF	; 255
    9f2a:	7f 7f       	andi	r23, 0xFF	; 255
    9f2c:	7f 7f       	andi	r23, 0xFF	; 255
    9f2e:	7f 7f       	andi	r23, 0xFF	; 255
    9f30:	7f 7f       	andi	r23, 0xFF	; 255
    9f32:	7f 7f       	andi	r23, 0xFF	; 255
    9f34:	7f 7f       	andi	r23, 0xFF	; 255
    9f36:	7f 7f       	andi	r23, 0xFF	; 255
    9f38:	7f 7f       	andi	r23, 0xFF	; 255
    9f3a:	7f 7f       	andi	r23, 0xFF	; 255
    9f3c:	7f 7f       	andi	r23, 0xFF	; 255
    9f3e:	7f 7f       	andi	r23, 0xFF	; 255
    9f40:	7f 7f       	andi	r23, 0xFF	; 255
    9f42:	7f 7f       	andi	r23, 0xFF	; 255
    9f44:	7f 7f       	andi	r23, 0xFF	; 255
    9f46:	7f 7f       	andi	r23, 0xFF	; 255
    9f48:	7f 7f       	andi	r23, 0xFF	; 255
    9f4a:	7f 7f       	andi	r23, 0xFF	; 255
    9f4c:	7f 7f       	andi	r23, 0xFF	; 255
    9f4e:	7f 7f       	andi	r23, 0xFF	; 255
    9f50:	7f 7f       	andi	r23, 0xFF	; 255
    9f52:	7f 7f       	andi	r23, 0xFF	; 255
    9f54:	7f 7f       	andi	r23, 0xFF	; 255
    9f56:	7f 7f       	andi	r23, 0xFF	; 255
    9f58:	7f 7f       	andi	r23, 0xFF	; 255
    9f5a:	7f 7f       	andi	r23, 0xFF	; 255
    9f5c:	7f 7f       	andi	r23, 0xFF	; 255
    9f5e:	7f 7f       	andi	r23, 0xFF	; 255
    9f60:	7f 7f       	andi	r23, 0xFF	; 255
    9f62:	7f 7f       	andi	r23, 0xFF	; 255
    9f64:	7f 7f       	andi	r23, 0xFF	; 255
    9f66:	7f 7f       	andi	r23, 0xFF	; 255
    9f68:	7f 7f       	andi	r23, 0xFF	; 255
    9f6a:	7f 7f       	andi	r23, 0xFF	; 255
    9f6c:	7f 7f       	andi	r23, 0xFF	; 255
    9f6e:	7f 7f       	andi	r23, 0xFF	; 255
    9f70:	7f 7f       	andi	r23, 0xFF	; 255
    9f72:	7f 7f       	andi	r23, 0xFF	; 255
    9f74:	7f 7f       	andi	r23, 0xFF	; 255
    9f76:	7f 7f       	andi	r23, 0xFF	; 255
    9f78:	7f 7f       	andi	r23, 0xFF	; 255
    9f7a:	7f 7f       	andi	r23, 0xFF	; 255
    9f7c:	7f 7f       	andi	r23, 0xFF	; 255
    9f7e:	7f 7f       	andi	r23, 0xFF	; 255
    9f80:	80 80       	ld	r8, Z
    9f82:	80 80       	ld	r8, Z
    9f84:	80 80       	ld	r8, Z
    9f86:	80 80       	ld	r8, Z
    9f88:	80 80       	ld	r8, Z
    9f8a:	80 80       	ld	r8, Z
    9f8c:	80 80       	ld	r8, Z
    9f8e:	80 80       	ld	r8, Z
    9f90:	80 80       	ld	r8, Z
    9f92:	80 80       	ld	r8, Z
    9f94:	80 80       	ld	r8, Z
    9f96:	80 80       	ld	r8, Z
    9f98:	80 80       	ld	r8, Z
    9f9a:	80 80       	ld	r8, Z
    9f9c:	80 80       	ld	r8, Z
    9f9e:	80 80       	ld	r8, Z
    9fa0:	80 80       	ld	r8, Z
    9fa2:	80 80       	ld	r8, Z
    9fa4:	80 80       	ld	r8, Z
    9fa6:	80 80       	ld	r8, Z
    9fa8:	80 80       	ld	r8, Z
    9faa:	80 80       	ld	r8, Z
    9fac:	80 80       	ld	r8, Z
    9fae:	80 80       	ld	r8, Z
    9fb0:	80 80       	ld	r8, Z
    9fb2:	80 80       	ld	r8, Z
    9fb4:	80 80       	ld	r8, Z
    9fb6:	80 80       	ld	r8, Z
    9fb8:	80 80       	ld	r8, Z
    9fba:	80 80       	ld	r8, Z
    9fbc:	80 80       	ld	r8, Z
    9fbe:	80 80       	ld	r8, Z
    9fc0:	80 80       	ld	r8, Z
    9fc2:	80 80       	ld	r8, Z
    9fc4:	80 80       	ld	r8, Z
    9fc6:	80 80       	ld	r8, Z
    9fc8:	80 80       	ld	r8, Z
    9fca:	80 80       	ld	r8, Z
    9fcc:	80 80       	ld	r8, Z
    9fce:	80 80       	ld	r8, Z
    9fd0:	80 80       	ld	r8, Z
    9fd2:	80 80       	ld	r8, Z
    9fd4:	80 80       	ld	r8, Z
    9fd6:	80 80       	ld	r8, Z
    9fd8:	80 80       	ld	r8, Z
    9fda:	80 80       	ld	r8, Z
    9fdc:	80 80       	ld	r8, Z
    9fde:	80 80       	ld	r8, Z
    9fe0:	80 80       	ld	r8, Z
    9fe2:	80 80       	ld	r8, Z
    9fe4:	80 80       	ld	r8, Z
    9fe6:	80 80       	ld	r8, Z
    9fe8:	80 80       	ld	r8, Z
    9fea:	80 80       	ld	r8, Z
    9fec:	80 80       	ld	r8, Z
    9fee:	80 80       	ld	r8, Z
    9ff0:	80 80       	ld	r8, Z
    9ff2:	80 80       	ld	r8, Z
    9ff4:	80 80       	ld	r8, Z
    9ff6:	80 80       	ld	r8, Z
    9ff8:	80 80       	ld	r8, Z
    9ffa:	80 80       	ld	r8, Z
    9ffc:	80 80       	ld	r8, Z
    9ffe:	80 80       	ld	r8, Z
    a000:	7f 7f       	andi	r23, 0xFF	; 255
    a002:	7f 7f       	andi	r23, 0xFF	; 255
    a004:	7f 7f       	andi	r23, 0xFF	; 255
    a006:	7f 7f       	andi	r23, 0xFF	; 255
    a008:	7f 7f       	andi	r23, 0xFF	; 255
    a00a:	7f 7f       	andi	r23, 0xFF	; 255
    a00c:	7f 7f       	andi	r23, 0xFF	; 255
    a00e:	7f 7f       	andi	r23, 0xFF	; 255
    a010:	7f 7f       	andi	r23, 0xFF	; 255
    a012:	7f 7f       	andi	r23, 0xFF	; 255
    a014:	7f 7f       	andi	r23, 0xFF	; 255
    a016:	7f 7f       	andi	r23, 0xFF	; 255
    a018:	7f 7f       	andi	r23, 0xFF	; 255
    a01a:	7f 7f       	andi	r23, 0xFF	; 255
    a01c:	7f 7f       	andi	r23, 0xFF	; 255
    a01e:	7f 7f       	andi	r23, 0xFF	; 255
    a020:	7f 7f       	andi	r23, 0xFF	; 255
    a022:	7f 7f       	andi	r23, 0xFF	; 255
    a024:	7f 7f       	andi	r23, 0xFF	; 255
    a026:	7f 7f       	andi	r23, 0xFF	; 255
    a028:	7f 7f       	andi	r23, 0xFF	; 255
    a02a:	7f 7f       	andi	r23, 0xFF	; 255
    a02c:	7f 7f       	andi	r23, 0xFF	; 255
    a02e:	7f 7f       	andi	r23, 0xFF	; 255
    a030:	7f 7f       	andi	r23, 0xFF	; 255
    a032:	7f 7f       	andi	r23, 0xFF	; 255
    a034:	7f 7f       	andi	r23, 0xFF	; 255
    a036:	7f 7f       	andi	r23, 0xFF	; 255
    a038:	7f 7f       	andi	r23, 0xFF	; 255
    a03a:	7f 7f       	andi	r23, 0xFF	; 255
    a03c:	7f 7f       	andi	r23, 0xFF	; 255
    a03e:	7f 7f       	andi	r23, 0xFF	; 255
    a040:	7f 7f       	andi	r23, 0xFF	; 255
    a042:	7f 7f       	andi	r23, 0xFF	; 255
    a044:	7f 7f       	andi	r23, 0xFF	; 255
    a046:	7f 7f       	andi	r23, 0xFF	; 255
    a048:	7f 7f       	andi	r23, 0xFF	; 255
    a04a:	7f 7f       	andi	r23, 0xFF	; 255
    a04c:	7f 7f       	andi	r23, 0xFF	; 255
    a04e:	7f 7f       	andi	r23, 0xFF	; 255
    a050:	7f 7f       	andi	r23, 0xFF	; 255
    a052:	7f 7f       	andi	r23, 0xFF	; 255
    a054:	7f 7f       	andi	r23, 0xFF	; 255
    a056:	7f 7f       	andi	r23, 0xFF	; 255
    a058:	7f 7f       	andi	r23, 0xFF	; 255
    a05a:	7f 7f       	andi	r23, 0xFF	; 255
    a05c:	7f 7f       	andi	r23, 0xFF	; 255
    a05e:	7f 7f       	andi	r23, 0xFF	; 255
    a060:	7f 7f       	andi	r23, 0xFF	; 255
    a062:	7f 7f       	andi	r23, 0xFF	; 255
    a064:	7f 7f       	andi	r23, 0xFF	; 255
    a066:	7f 7f       	andi	r23, 0xFF	; 255
    a068:	7f 7f       	andi	r23, 0xFF	; 255
    a06a:	7f 7f       	andi	r23, 0xFF	; 255
    a06c:	7f 7f       	andi	r23, 0xFF	; 255
    a06e:	7f 7f       	andi	r23, 0xFF	; 255
    a070:	7f 7f       	andi	r23, 0xFF	; 255
    a072:	7f 7f       	andi	r23, 0xFF	; 255
    a074:	7f 7f       	andi	r23, 0xFF	; 255
    a076:	7f 7f       	andi	r23, 0xFF	; 255
    a078:	7f 7f       	andi	r23, 0xFF	; 255
    a07a:	7f 7f       	andi	r23, 0xFF	; 255
    a07c:	7f 7f       	andi	r23, 0xFF	; 255
    a07e:	7f 7f       	andi	r23, 0xFF	; 255
    a080:	7f 7f       	andi	r23, 0xFF	; 255
    a082:	7f 7f       	andi	r23, 0xFF	; 255
    a084:	7f 7f       	andi	r23, 0xFF	; 255
    a086:	7f 7f       	andi	r23, 0xFF	; 255
    a088:	7f 7f       	andi	r23, 0xFF	; 255
    a08a:	7f 7f       	andi	r23, 0xFF	; 255
    a08c:	7f 7f       	andi	r23, 0xFF	; 255
    a08e:	7f 7f       	andi	r23, 0xFF	; 255
    a090:	7f 7f       	andi	r23, 0xFF	; 255
    a092:	7f 7f       	andi	r23, 0xFF	; 255
    a094:	7f 7f       	andi	r23, 0xFF	; 255
    a096:	7f 7f       	andi	r23, 0xFF	; 255
    a098:	7f 7f       	andi	r23, 0xFF	; 255
    a09a:	7f 7f       	andi	r23, 0xFF	; 255
    a09c:	7f 7f       	andi	r23, 0xFF	; 255
    a09e:	7f 7f       	andi	r23, 0xFF	; 255
    a0a0:	7f 7f       	andi	r23, 0xFF	; 255
    a0a2:	7f 7f       	andi	r23, 0xFF	; 255
    a0a4:	7f 7f       	andi	r23, 0xFF	; 255
    a0a6:	7f 7f       	andi	r23, 0xFF	; 255
    a0a8:	7f 7f       	andi	r23, 0xFF	; 255
    a0aa:	7f 7f       	andi	r23, 0xFF	; 255
    a0ac:	7f 7f       	andi	r23, 0xFF	; 255
    a0ae:	7f 7f       	andi	r23, 0xFF	; 255
    a0b0:	7f 7f       	andi	r23, 0xFF	; 255
    a0b2:	7f 7f       	andi	r23, 0xFF	; 255
    a0b4:	7f 7f       	andi	r23, 0xFF	; 255
    a0b6:	7f 7f       	andi	r23, 0xFF	; 255
    a0b8:	7f 7f       	andi	r23, 0xFF	; 255
    a0ba:	7f 7f       	andi	r23, 0xFF	; 255
    a0bc:	7f 7f       	andi	r23, 0xFF	; 255
    a0be:	7f 7f       	andi	r23, 0xFF	; 255
    a0c0:	80 80       	ld	r8, Z
    a0c2:	80 80       	ld	r8, Z
    a0c4:	80 80       	ld	r8, Z
    a0c6:	80 80       	ld	r8, Z
    a0c8:	80 80       	ld	r8, Z
    a0ca:	80 80       	ld	r8, Z
    a0cc:	80 80       	ld	r8, Z
    a0ce:	80 80       	ld	r8, Z
    a0d0:	80 80       	ld	r8, Z
    a0d2:	80 80       	ld	r8, Z
    a0d4:	80 80       	ld	r8, Z
    a0d6:	80 80       	ld	r8, Z
    a0d8:	80 80       	ld	r8, Z
    a0da:	80 80       	ld	r8, Z
    a0dc:	80 80       	ld	r8, Z
    a0de:	80 80       	ld	r8, Z
    a0e0:	80 80       	ld	r8, Z
    a0e2:	80 80       	ld	r8, Z
    a0e4:	80 80       	ld	r8, Z
    a0e6:	80 80       	ld	r8, Z
    a0e8:	80 80       	ld	r8, Z
    a0ea:	80 80       	ld	r8, Z
    a0ec:	80 80       	ld	r8, Z
    a0ee:	80 80       	ld	r8, Z
    a0f0:	80 80       	ld	r8, Z
    a0f2:	80 80       	ld	r8, Z
    a0f4:	80 80       	ld	r8, Z
    a0f6:	80 80       	ld	r8, Z
    a0f8:	80 80       	ld	r8, Z
    a0fa:	80 80       	ld	r8, Z
    a0fc:	80 80       	ld	r8, Z
    a0fe:	80 80       	ld	r8, Z
    a100:	03 09       	sbc	r16, r3
    a102:	13 1e       	adc	r1, r19
    a104:	28 31       	cpi	r18, 0x18	; 24
    a106:	3a 40       	sbci	r19, 0x0A	; 10
    a108:	46 4c       	sbci	r20, 0xC6	; 198
    a10a:	50 54       	subi	r21, 0x40	; 64
    a10c:	58 5b       	subi	r21, 0xB8	; 184
    a10e:	5e 61       	ori	r21, 0x1E	; 30
    a110:	63 65       	ori	r22, 0x53	; 83
    a112:	67 69       	ori	r22, 0x97	; 151
    a114:	6b 6c       	ori	r22, 0xCB	; 203
    a116:	6e 6f       	ori	r22, 0xFE	; 254
    a118:	70 71       	andi	r23, 0x10	; 16
    a11a:	72 73       	andi	r23, 0x32	; 50
    a11c:	74 75       	andi	r23, 0x54	; 84
    a11e:	76 77       	andi	r23, 0x76	; 118
    a120:	77 78       	andi	r23, 0x87	; 135
    a122:	79 79       	andi	r23, 0x99	; 153
    a124:	7a 7a       	andi	r23, 0xAA	; 170
    a126:	7b 7b       	andi	r23, 0xBB	; 187
    a128:	7c 7c       	andi	r23, 0xCC	; 204
    a12a:	7c 7d       	andi	r23, 0xDC	; 220
    a12c:	7d 7d       	andi	r23, 0xDD	; 221
    a12e:	7e 7e       	andi	r23, 0xEE	; 238
    a130:	7e 7e       	andi	r23, 0xEE	; 238
    a132:	7f 7f       	andi	r23, 0xFF	; 255
    a134:	7f 7f       	andi	r23, 0xFF	; 255
    a136:	7f 7f       	andi	r23, 0xFF	; 255
    a138:	7f 7f       	andi	r23, 0xFF	; 255
    a13a:	7f 7f       	andi	r23, 0xFF	; 255
    a13c:	7f 7f       	andi	r23, 0xFF	; 255
    a13e:	7f 7f       	andi	r23, 0xFF	; 255
    a140:	7f 7f       	andi	r23, 0xFF	; 255
    a142:	7f 7f       	andi	r23, 0xFF	; 255
    a144:	7f 7f       	andi	r23, 0xFF	; 255
    a146:	7f 7f       	andi	r23, 0xFF	; 255
    a148:	7f 7f       	andi	r23, 0xFF	; 255
    a14a:	7f 7f       	andi	r23, 0xFF	; 255
    a14c:	7f 7e       	andi	r23, 0xEF	; 239
    a14e:	7e 7e       	andi	r23, 0xEE	; 238
    a150:	7e 7d       	andi	r23, 0xDE	; 222
    a152:	7d 7d       	andi	r23, 0xDD	; 221
    a154:	7c 7c       	andi	r23, 0xCC	; 204
    a156:	7c 7b       	andi	r23, 0xBC	; 188
    a158:	7b 7a       	andi	r23, 0xAB	; 171
    a15a:	7a 79       	andi	r23, 0x9A	; 154
    a15c:	79 78       	andi	r23, 0x89	; 137
    a15e:	77 77       	andi	r23, 0x77	; 119
    a160:	76 75       	andi	r23, 0x56	; 86
    a162:	74 73       	andi	r23, 0x34	; 52
    a164:	72 71       	andi	r23, 0x12	; 18
    a166:	70 6f       	ori	r23, 0xF0	; 240
    a168:	6e 6c       	ori	r22, 0xCE	; 206
    a16a:	6b 69       	ori	r22, 0x9B	; 155
    a16c:	67 65       	ori	r22, 0x57	; 87
    a16e:	63 61       	ori	r22, 0x13	; 19
    a170:	5e 5b       	subi	r21, 0xBE	; 190
    a172:	58 54       	subi	r21, 0x48	; 72
    a174:	50 4c       	sbci	r21, 0xC0	; 192
    a176:	46 40       	sbci	r20, 0x06	; 6
    a178:	3a 31       	cpi	r19, 0x1A	; 26
    a17a:	28 1e       	adc	r2, r24
    a17c:	13 09       	sbc	r17, r3
    a17e:	03 00       	.word	0x0003	; ????
    a180:	c6 cc       	rjmp	.-1652   	; 0x9b0e <waves+0xe>
    a182:	d5 db       	rcall	.-2134   	; 0x992e <steptable+0x26>
    a184:	df e3       	ldi	r29, 0x3F	; 63
    a186:	e5 e7       	ldi	r30, 0x75	; 117
    a188:	e9 ea       	ldi	r30, 0xA9	; 169
    a18a:	eb ec       	ldi	r30, 0xCB	; 203
    a18c:	ed ee       	ldi	r30, 0xED	; 237
    a18e:	ef ef       	ldi	r30, 0xFF	; 255
    a190:	f0 f0       	brcs	.+60     	; 0xa1ce <waves+0x6ce>
    a192:	f0 f1       	brcs	.+124    	; 0xa210 <waves+0x710>
    a194:	f1 f1       	breq	.+124    	; 0xa212 <waves+0x712>
    a196:	f1 f2       	breq	.-68     	; 0xa154 <waves+0x654>
    a198:	f2 f2       	brmi	.-68     	; 0xa156 <waves+0x656>
    a19a:	f2 f2       	brmi	.-68     	; 0xa158 <waves+0x658>
    a19c:	f2 f2       	brmi	.-68     	; 0xa15a <waves+0x65a>
    a19e:	f2 f3       	brmi	.-4      	; 0xa19c <waves+0x69c>
    a1a0:	f3 f3       	brvs	.-4      	; 0xa19e <waves+0x69e>
    a1a2:	f3 f3       	brvs	.-4      	; 0xa1a0 <waves+0x6a0>
    a1a4:	f3 f3       	brvs	.-4      	; 0xa1a2 <waves+0x6a2>
    a1a6:	f3 f3       	brvs	.-4      	; 0xa1a4 <waves+0x6a4>
    a1a8:	f3 f3       	brvs	.-4      	; 0xa1a6 <waves+0x6a6>
    a1aa:	f3 f3       	brvs	.-4      	; 0xa1a8 <waves+0x6a8>
    a1ac:	f3 f3       	brvs	.-4      	; 0xa1aa <waves+0x6aa>
    a1ae:	f3 f3       	brvs	.-4      	; 0xa1ac <waves+0x6ac>
    a1b0:	f3 f3       	brvs	.-4      	; 0xa1ae <waves+0x6ae>
    a1b2:	f3 f3       	brvs	.-4      	; 0xa1b0 <waves+0x6b0>
    a1b4:	f3 f3       	brvs	.-4      	; 0xa1b2 <waves+0x6b2>
    a1b6:	f3 f3       	brvs	.-4      	; 0xa1b4 <waves+0x6b4>
    a1b8:	f3 f3       	brvs	.-4      	; 0xa1b6 <waves+0x6b6>
    a1ba:	f3 f3       	brvs	.-4      	; 0xa1b8 <waves+0x6b8>
    a1bc:	f3 f3       	brvs	.-4      	; 0xa1ba <waves+0x6ba>
    a1be:	f3 f3       	brvs	.-4      	; 0xa1bc <waves+0x6bc>
    a1c0:	f3 f3       	brvs	.-4      	; 0xa1be <waves+0x6be>
    a1c2:	f3 f3       	brvs	.-4      	; 0xa1c0 <waves+0x6c0>
    a1c4:	f3 f3       	brvs	.-4      	; 0xa1c2 <waves+0x6c2>
    a1c6:	f3 f3       	brvs	.-4      	; 0xa1c4 <waves+0x6c4>
    a1c8:	f3 f3       	brvs	.-4      	; 0xa1c6 <waves+0x6c6>
    a1ca:	f3 f3       	brvs	.-4      	; 0xa1c8 <waves+0x6c8>
    a1cc:	f3 f3       	brvs	.-4      	; 0xa1ca <waves+0x6ca>
    a1ce:	f3 f3       	brvs	.-4      	; 0xa1cc <waves+0x6cc>
    a1d0:	f3 f3       	brvs	.-4      	; 0xa1ce <waves+0x6ce>
    a1d2:	f3 f3       	brvs	.-4      	; 0xa1d0 <waves+0x6d0>
    a1d4:	f3 f3       	brvs	.-4      	; 0xa1d2 <waves+0x6d2>
    a1d6:	f3 f3       	brvs	.-4      	; 0xa1d4 <waves+0x6d4>
    a1d8:	f3 f3       	brvs	.-4      	; 0xa1d6 <waves+0x6d6>
    a1da:	f3 f3       	brvs	.-4      	; 0xa1d8 <waves+0x6d8>
    a1dc:	f3 f3       	brvs	.-4      	; 0xa1da <waves+0x6da>
    a1de:	f3 f3       	brvs	.-4      	; 0xa1dc <waves+0x6dc>
    a1e0:	f2 f2       	brmi	.-68     	; 0xa19e <waves+0x69e>
    a1e2:	f2 f2       	brmi	.-68     	; 0xa1a0 <waves+0x6a0>
    a1e4:	f2 f2       	brmi	.-68     	; 0xa1a2 <waves+0x6a2>
    a1e6:	f2 f2       	brmi	.-68     	; 0xa1a4 <waves+0x6a4>
    a1e8:	f1 f1       	breq	.+124    	; 0xa266 <waves+0x766>
    a1ea:	f1 f1       	breq	.+124    	; 0xa268 <waves+0x768>
    a1ec:	f0 f0       	brcs	.+60     	; 0xa22a <waves+0x72a>
    a1ee:	f0 ef       	ldi	r31, 0xF0	; 240
    a1f0:	ef ee       	ldi	r30, 0xEF	; 239
    a1f2:	ed ec       	ldi	r30, 0xCD	; 205
    a1f4:	eb ea       	ldi	r30, 0xAB	; 171
    a1f6:	e9 e7       	ldi	r30, 0x79	; 121
    a1f8:	e5 e3       	ldi	r30, 0x35	; 53
    a1fa:	df db       	rcall	.-2114   	; 0x99ba <steptable+0xb2>
    a1fc:	d5 cc       	rjmp	.-1622   	; 0x9ba8 <waves+0xa8>
    a1fe:	c6 00       	.word	0x00c6	; ????
    a200:	00 28       	or	r0, r0
    a202:	3d 42       	sbci	r19, 0x2D	; 45
    a204:	30 2d       	mov	r19, r0
    a206:	2c 2b       	or	r18, r28
    a208:	2c 2d       	mov	r18, r12
    a20a:	2e 2f       	mov	r18, r30
    a20c:	30 32       	cpi	r19, 0x20	; 32
    a20e:	33 35       	cpi	r19, 0x53	; 83
    a210:	37 39       	cpi	r19, 0x97	; 151
    a212:	3b 3d       	cpi	r19, 0xDB	; 219
    a214:	3f 41       	sbci	r19, 0x1F	; 31
    a216:	43 45       	sbci	r20, 0x53	; 83
    a218:	48 4a       	sbci	r20, 0xA8	; 168
    a21a:	4c 4e       	sbci	r20, 0xEC	; 236
    a21c:	50 53       	subi	r21, 0x30	; 48
    a21e:	55 57       	subi	r21, 0x75	; 117
    a220:	59 5b       	subi	r21, 0xB9	; 185
    a222:	5d 5f       	subi	r21, 0xFD	; 253
    a224:	61 63       	ori	r22, 0x31	; 49
    a226:	65 67       	ori	r22, 0x75	; 117
    a228:	69 6b       	ori	r22, 0xB9	; 185
    a22a:	6c 6e       	ori	r22, 0xEC	; 236
    a22c:	70 71       	andi	r23, 0x10	; 16
    a22e:	73 74       	andi	r23, 0x43	; 67
    a230:	75 77       	andi	r23, 0x75	; 117
    a232:	78 79       	andi	r23, 0x98	; 152
    a234:	7a 7b       	andi	r23, 0xBA	; 186
    a236:	7c 7d       	andi	r23, 0xDC	; 220
    a238:	7d 7e       	andi	r23, 0xED	; 237
    a23a:	7e 7f       	andi	r23, 0xFE	; 254
    a23c:	7f 7f       	andi	r23, 0xFF	; 255
    a23e:	7f 7f       	andi	r23, 0xFF	; 255
    a240:	7f 7f       	andi	r23, 0xFF	; 255
    a242:	7f 7f       	andi	r23, 0xFF	; 255
    a244:	7f 7f       	andi	r23, 0xFF	; 255
    a246:	7e 7e       	andi	r23, 0xEE	; 238
    a248:	7d 7d       	andi	r23, 0xDD	; 221
    a24a:	7c 7b       	andi	r23, 0xBC	; 188
    a24c:	7a 79       	andi	r23, 0x9A	; 154
    a24e:	78 77       	andi	r23, 0x78	; 120
    a250:	75 74       	andi	r23, 0x45	; 69
    a252:	73 71       	andi	r23, 0x13	; 19
    a254:	70 6e       	ori	r23, 0xE0	; 224
    a256:	6c 6b       	ori	r22, 0xBC	; 188
    a258:	69 67       	ori	r22, 0x79	; 121
    a25a:	65 63       	ori	r22, 0x35	; 53
    a25c:	61 5f       	subi	r22, 0xF1	; 241
    a25e:	5d 5b       	subi	r21, 0xBD	; 189
    a260:	59 57       	subi	r21, 0x79	; 121
    a262:	55 53       	subi	r21, 0x35	; 53
    a264:	50 4e       	sbci	r21, 0xE0	; 224
    a266:	4c 4a       	sbci	r20, 0xAC	; 172
    a268:	48 45       	sbci	r20, 0x58	; 88
    a26a:	43 41       	sbci	r20, 0x13	; 19
    a26c:	3f 3d       	cpi	r19, 0xDF	; 223
    a26e:	3b 39       	cpi	r19, 0x9B	; 155
    a270:	37 35       	cpi	r19, 0x57	; 87
    a272:	33 32       	cpi	r19, 0x23	; 35
    a274:	30 2f       	mov	r19, r16
    a276:	2e 2d       	mov	r18, r14
    a278:	2c 2b       	or	r18, r28
    a27a:	2c 2d       	mov	r18, r12
    a27c:	30 42       	sbci	r19, 0x20	; 32
    a27e:	3d 28       	or	r3, r13
    a280:	00 e9       	ldi	r16, 0x90	; 144
    a282:	e5 fe       	sbrs	r14, 5
    a284:	d4 d7       	rcall	.+4008   	; 0xb22e <save_score+0x70>
    a286:	d7 d7       	rcall	.+4014   	; 0xb236 <save_score+0x78>
    a288:	d6 d4       	rcall	.+2476   	; 0xac36 <LBCollides+0x3c>
    a28a:	d2 d0       	rcall	.+420    	; 0xa430 <waves+0x930>
    a28c:	ce cc       	rjmp	.-1636   	; 0x9c2a <waves+0x12a>
    a28e:	ca c8       	rjmp	.-3692   	; 0x9424 <ProcessMusic+0xc2>
    a290:	c6 c3       	rjmp	.+1932   	; 0xaa1e <ProcessFading+0x28>
    a292:	c1 bf       	out	0x31, r28	; 49
    a294:	bd ba       	out	0x1d, r11	; 29
    a296:	b8 b6       	in	r11, 0x38	; 56
    a298:	b4 b1       	in	r27, 0x04	; 4
    a29a:	af ad       	ldd	r26, Y+63	; 0x3f
    a29c:	ab a9       	ldd	r26, Y+51	; 0x33
    a29e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    a2a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    a2a2:	9f 9e       	mul	r9, r31
    a2a4:	9c 9a       	sbi	0x13, 4	; 19
    a2a6:	99 97       	sbiw	r26, 0x29	; 41
    a2a8:	95 94       	asr	r9
    a2aa:	93 91       	.word	0x9193	; ????
    a2ac:	90 8f       	std	Z+24, r25	; 0x18
    a2ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a2b0:	8b 8a       	std	Y+19, r8	; 0x13
    a2b2:	89 88       	ldd	r8, Y+17	; 0x11
    a2b4:	88 87       	std	Y+8, r24	; 0x08
    a2b6:	86 85       	ldd	r24, Z+14	; 0x0e
    a2b8:	85 84       	ldd	r8, Z+13	; 0x0d
    a2ba:	84 84       	ldd	r8, Z+12	; 0x0c
    a2bc:	83 83       	std	Z+3, r24	; 0x03
    a2be:	83 83       	std	Z+3, r24	; 0x03
    a2c0:	83 83       	std	Z+3, r24	; 0x03
    a2c2:	83 83       	std	Z+3, r24	; 0x03
    a2c4:	83 84       	ldd	r8, Z+11	; 0x0b
    a2c6:	84 84       	ldd	r8, Z+12	; 0x0c
    a2c8:	85 85       	ldd	r24, Z+13	; 0x0d
    a2ca:	86 87       	std	Z+14, r24	; 0x0e
    a2cc:	88 88       	ldd	r8, Y+16	; 0x10
    a2ce:	89 8a       	std	Y+17, r8	; 0x11
    a2d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    a2d2:	8d 8f       	std	Y+29, r24	; 0x1d
    a2d4:	90 91 93 94 	lds	r25, 0x9493
    a2d8:	95 97       	sbiw	r26, 0x25	; 37
    a2da:	99 9a       	sbi	0x13, 1	; 19
    a2dc:	9c 9e       	mul	r9, r28
    a2de:	9f a1       	ldd	r25, Y+39	; 0x27
    a2e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a2e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    a2e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    a2e6:	af b1       	in	r26, 0x0f	; 15
    a2e8:	b4 b6       	in	r11, 0x34	; 52
    a2ea:	b8 ba       	out	0x18, r11	; 24
    a2ec:	bd bf       	out	0x3d, r27	; 61
    a2ee:	c1 c3       	rjmp	.+1922   	; 0xaa72 <LBGetNextFrame+0x2a>
    a2f0:	c6 c8       	rjmp	.-3700   	; 0x947e <ProcessMusic+0x11c>
    a2f2:	ca cc       	rjmp	.-1644   	; 0x9c88 <waves+0x188>
    a2f4:	ce d0       	rcall	.+412    	; 0xa492 <waves+0x992>
    a2f6:	d2 d4       	rcall	.+2468   	; 0xac9c <LBLineIntersect+0x4e>
    a2f8:	d6 d7       	rcall	.+4012   	; 0xb2a6 <position_shot+0x14>
    a2fa:	d7 d7       	rcall	.+4014   	; 0xb2aa <position_shot+0x18>
    a2fc:	d4 fe       	sbrs	r13, 4
    a2fe:	e5 e9       	ldi	r30, 0x95	; 149
    a300:	f9 f8       	.word	0xf8f9	; ????
    a302:	f9 f5       	brne	.+126    	; 0xa382 <waves+0x882>
    a304:	eb e1       	ldi	r30, 0x1B	; 27
    a306:	dd de       	rcall	.-582    	; 0xa0c2 <waves+0x5c2>
    a308:	e0 e2       	ldi	r30, 0x20	; 32
    a30a:	e4 e5       	ldi	r30, 0x54	; 84
    a30c:	e6 e5       	ldi	r30, 0x56	; 86
    a30e:	e4 e2       	ldi	r30, 0x24	; 36
    a310:	de d9       	rcall	.-3140   	; 0x96ce <ProcessMusic+0x36c>
    a312:	d2 ca       	rjmp	.-2652   	; 0x98b8 <esmw+0x9e>
    a314:	c1 b7       	in	r28, 0x31	; 49
    a316:	ac a2       	std	Y+36, r10	; 0x24
    a318:	99 91       	ld	r25, Y+
    a31a:	8a 86       	std	Y+10, r8	; 0x0a
    a31c:	83 81       	ldd	r24, Z+3	; 0x03
    a31e:	80 80       	ld	r8, Z
    a320:	81 82       	std	Z+1, r8	; 0x01
    a322:	83 85       	ldd	r24, Z+11	; 0x0b
    a324:	86 88       	ldd	r8, Z+22	; 0x16
    a326:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a328:	8d 8f       	std	Y+29, r24	; 0x1d
    a32a:	90 92 93 95 	sts	0x9593, r9
    a32e:	96 97       	sbiw	r26, 0x26	; 38
    a330:	98 99       	sbic	0x13, 0	; 19
    a332:	9a 9b       	sbis	0x13, 2	; 19
    a334:	9b 9c       	mul	r9, r11
    a336:	9d 9d       	mul	r25, r13
    a338:	9d 9e       	mul	r9, r29
    a33a:	9e 9e       	mul	r9, r30
    a33c:	9f 9f       	mul	r25, r31
    a33e:	9f 9f       	mul	r25, r31
    a340:	9f 9f       	mul	r25, r31
    a342:	9f 9e       	mul	r9, r31
    a344:	9e 9e       	mul	r9, r30
    a346:	9d 9d       	mul	r25, r13
    a348:	9d 9c       	mul	r9, r13
    a34a:	9b 9b       	sbis	0x13, 3	; 19
    a34c:	9a 99       	sbic	0x13, 2	; 19
    a34e:	98 97       	sbiw	r26, 0x28	; 40
    a350:	96 95       	lsr	r25
    a352:	93 92       	.word	0x9293	; ????
    a354:	90 8f       	std	Z+24, r25	; 0x18
    a356:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a358:	8a 88       	ldd	r8, Y+18	; 0x12
    a35a:	86 85       	ldd	r24, Z+14	; 0x0e
    a35c:	83 82       	std	Z+3, r8	; 0x03
    a35e:	81 80       	ldd	r8, Z+1	; 0x01
    a360:	80 81       	ld	r24, Z
    a362:	83 86       	std	Z+11, r8	; 0x0b
    a364:	8a 91       	ld	r24, -Y
    a366:	99 a2       	std	Y+33, r9	; 0x21
    a368:	ac b7       	in	r26, 0x3c	; 60
    a36a:	c1 ca       	rjmp	.-2686   	; 0x98ee <esmw+0xd4>
    a36c:	d2 d9       	rcall	.-3164   	; 0x9712 <ProcessMusic+0x3b0>
    a36e:	de e2       	ldi	r29, 0x2E	; 46
    a370:	e4 e5       	ldi	r30, 0x54	; 84
    a372:	e6 e5       	ldi	r30, 0x56	; 86
    a374:	e4 e2       	ldi	r30, 0x24	; 36
    a376:	e0 de       	rcall	.-576    	; 0xa138 <waves+0x638>
    a378:	dd e1       	ldi	r29, 0x1D	; 29
    a37a:	eb f5       	brvc	.+122    	; 0xa3f6 <waves+0x8f6>
    a37c:	f9 f8       	.word	0xf8f9	; ????
    a37e:	f9 00       	.word	0x00f9	; ????
    a380:	07 08       	sbc	r0, r7
    a382:	07 0b       	sbc	r16, r23
    a384:	15 1f       	adc	r17, r21
    a386:	23 22       	and	r2, r19
    a388:	20 1e       	adc	r2, r16
    a38a:	1c 1b       	sub	r17, r28
    a38c:	1a 1b       	sub	r17, r26
    a38e:	1c 1e       	adc	r1, r28
    a390:	22 27       	eor	r18, r18
    a392:	2e 36       	cpi	r18, 0x6E	; 110
    a394:	3f 49       	sbci	r19, 0x9F	; 159
    a396:	54 5e       	subi	r21, 0xE4	; 228
    a398:	67 6f       	ori	r22, 0xF7	; 247
    a39a:	76 7a       	andi	r23, 0xA6	; 166
    a39c:	7e 7f       	andi	r23, 0xFE	; 254
    a39e:	7f 7f       	andi	r23, 0xFF	; 255
    a3a0:	7f 7e       	andi	r23, 0xEF	; 239
    a3a2:	7d 7b       	andi	r23, 0xBD	; 189
    a3a4:	7a 78       	andi	r23, 0x8A	; 138
    a3a6:	76 74       	andi	r23, 0x46	; 70
    a3a8:	73 71       	andi	r23, 0x13	; 19
    a3aa:	70 6e       	ori	r23, 0xE0	; 224
    a3ac:	6d 6b       	ori	r22, 0xBD	; 189
    a3ae:	6a 69       	ori	r22, 0x9A	; 154
    a3b0:	68 67       	ori	r22, 0x78	; 120
    a3b2:	66 65       	ori	r22, 0x56	; 86
    a3b4:	65 64       	ori	r22, 0x45	; 69
    a3b6:	64 63       	ori	r22, 0x34	; 52
    a3b8:	63 62       	ori	r22, 0x23	; 35
    a3ba:	62 62       	ori	r22, 0x22	; 34
    a3bc:	61 61       	ori	r22, 0x11	; 17
    a3be:	61 61       	ori	r22, 0x11	; 17
    a3c0:	61 61       	ori	r22, 0x11	; 17
    a3c2:	61 62       	ori	r22, 0x21	; 33
    a3c4:	62 62       	ori	r22, 0x22	; 34
    a3c6:	63 63       	ori	r22, 0x33	; 51
    a3c8:	63 64       	ori	r22, 0x43	; 67
    a3ca:	65 65       	ori	r22, 0x55	; 85
    a3cc:	66 67       	ori	r22, 0x76	; 118
    a3ce:	68 69       	ori	r22, 0x98	; 152
    a3d0:	6a 6b       	ori	r22, 0xBA	; 186
    a3d2:	6d 6e       	ori	r22, 0xED	; 237
    a3d4:	70 71       	andi	r23, 0x10	; 16
    a3d6:	73 74       	andi	r23, 0x43	; 67
    a3d8:	76 78       	andi	r23, 0x86	; 134
    a3da:	7a 7b       	andi	r23, 0xBA	; 186
    a3dc:	7d 7e       	andi	r23, 0xED	; 237
    a3de:	7f 7f       	andi	r23, 0xFF	; 255
    a3e0:	7f 7f       	andi	r23, 0xFF	; 255
    a3e2:	7e 7a       	andi	r23, 0xAE	; 174
    a3e4:	76 6f       	ori	r23, 0xF6	; 246
    a3e6:	67 5e       	subi	r22, 0xE7	; 231
    a3e8:	54 49       	sbci	r21, 0x94	; 148
    a3ea:	3f 36       	cpi	r19, 0x6F	; 111
    a3ec:	2e 27       	eor	r18, r30
    a3ee:	22 1e       	adc	r2, r18
    a3f0:	1c 1b       	sub	r17, r28
    a3f2:	1a 1b       	sub	r17, r26
    a3f4:	1c 1e       	adc	r1, r28
    a3f6:	20 22       	and	r2, r16
    a3f8:	23 1f       	adc	r18, r19
    a3fa:	15 0b       	sbc	r17, r21
    a3fc:	07 08       	sbc	r0, r7
    a3fe:	07 00       	.word	0x0007	; ????
    a400:	1f 31       	cpi	r17, 0x1F	; 31
    a402:	3d 44       	sbci	r19, 0x4D	; 77
    a404:	4e 53       	subi	r20, 0x3E	; 62
    a406:	54 56       	subi	r21, 0x64	; 100
    a408:	5a 5f       	subi	r21, 0xFA	; 250
    a40a:	64 69       	ori	r22, 0x94	; 148
    a40c:	6e 74       	andi	r22, 0x4E	; 78
    a40e:	76 79       	andi	r23, 0x96	; 150
    a410:	7c 7f       	andi	r23, 0xFC	; 252
    a412:	7f 7f       	andi	r23, 0xFF	; 255
    a414:	7f 7f       	andi	r23, 0xFF	; 255
    a416:	7f 7f       	andi	r23, 0xFF	; 255
    a418:	7f 7f       	andi	r23, 0xFF	; 255
    a41a:	7f 7f       	andi	r23, 0xFF	; 255
    a41c:	7f 7f       	andi	r23, 0xFF	; 255
    a41e:	7f 7f       	andi	r23, 0xFF	; 255
    a420:	7f 7f       	andi	r23, 0xFF	; 255
    a422:	7f 7f       	andi	r23, 0xFF	; 255
    a424:	7f 7f       	andi	r23, 0xFF	; 255
    a426:	7f 7f       	andi	r23, 0xFF	; 255
    a428:	7f 7f       	andi	r23, 0xFF	; 255
    a42a:	7f 7f       	andi	r23, 0xFF	; 255
    a42c:	7f 7f       	andi	r23, 0xFF	; 255
    a42e:	7f 7f       	andi	r23, 0xFF	; 255
    a430:	7f 7f       	andi	r23, 0xFF	; 255
    a432:	7f 7f       	andi	r23, 0xFF	; 255
    a434:	7f 7f       	andi	r23, 0xFF	; 255
    a436:	7f 7f       	andi	r23, 0xFF	; 255
    a438:	7f 7f       	andi	r23, 0xFF	; 255
    a43a:	7f 7f       	andi	r23, 0xFF	; 255
    a43c:	7f 7f       	andi	r23, 0xFF	; 255
    a43e:	7f 7f       	andi	r23, 0xFF	; 255
    a440:	7f 7f       	andi	r23, 0xFF	; 255
    a442:	7f 7f       	andi	r23, 0xFF	; 255
    a444:	7f 7f       	andi	r23, 0xFF	; 255
    a446:	7f 7f       	andi	r23, 0xFF	; 255
    a448:	7f 7f       	andi	r23, 0xFF	; 255
    a44a:	7f 7f       	andi	r23, 0xFF	; 255
    a44c:	7f 7f       	andi	r23, 0xFF	; 255
    a44e:	7f 7f       	andi	r23, 0xFF	; 255
    a450:	7f 7f       	andi	r23, 0xFF	; 255
    a452:	7f 7f       	andi	r23, 0xFF	; 255
    a454:	7f 7f       	andi	r23, 0xFF	; 255
    a456:	7f 7f       	andi	r23, 0xFF	; 255
    a458:	7f 7f       	andi	r23, 0xFF	; 255
    a45a:	7f 7f       	andi	r23, 0xFF	; 255
    a45c:	7f 7f       	andi	r23, 0xFF	; 255
    a45e:	7f 7f       	andi	r23, 0xFF	; 255
    a460:	7f 7f       	andi	r23, 0xFF	; 255
    a462:	7f 7f       	andi	r23, 0xFF	; 255
    a464:	7f 7f       	andi	r23, 0xFF	; 255
    a466:	7f 7f       	andi	r23, 0xFF	; 255
    a468:	7f 7f       	andi	r23, 0xFF	; 255
    a46a:	7f 7f       	andi	r23, 0xFF	; 255
    a46c:	7f 7f       	andi	r23, 0xFF	; 255
    a46e:	7f 7f       	andi	r23, 0xFF	; 255
    a470:	7f 7f       	andi	r23, 0xFF	; 255
    a472:	7f 7f       	andi	r23, 0xFF	; 255
    a474:	7f 7f       	andi	r23, 0xFF	; 255
    a476:	7f 7f       	andi	r23, 0xFF	; 255
    a478:	7f 7f       	andi	r23, 0xFF	; 255
    a47a:	7f 7c       	andi	r23, 0xCF	; 207
    a47c:	78 71       	andi	r23, 0x18	; 24
    a47e:	68 4c       	sbci	r22, 0xC8	; 200
    a480:	2c 1c       	adc	r2, r12
    a482:	12 0c       	add	r1, r2
    a484:	0a 0b       	sbc	r16, r26
    a486:	0a 05       	cpc	r16, r10
    a488:	fd f3       	brhs	.-2      	; 0xa488 <waves+0x988>
    a48a:	e9 df       	rcall	.-46     	; 0xa45e <waves+0x95e>
    a48c:	d4 ca       	rjmp	.-2648   	; 0x9a36 <steptable+0x12e>
    a48e:	c0 b7       	in	r28, 0x30	; 48
    a490:	ae a6       	std	Y+46, r10	; 0x2e
    a492:	9e 97       	sbiw	r26, 0x2e	; 46
    a494:	91 8b       	std	Z+17, r25	; 0x11
    a496:	86 85       	ldd	r24, Z+14	; 0x0e
    a498:	82 80       	ldd	r8, Z+2	; 0x02
    a49a:	80 80       	ld	r8, Z
    a49c:	80 80       	ld	r8, Z
    a49e:	80 80       	ld	r8, Z
    a4a0:	80 80       	ld	r8, Z
    a4a2:	80 80       	ld	r8, Z
    a4a4:	80 80       	ld	r8, Z
    a4a6:	80 80       	ld	r8, Z
    a4a8:	80 80       	ld	r8, Z
    a4aa:	80 80       	ld	r8, Z
    a4ac:	80 80       	ld	r8, Z
    a4ae:	80 80       	ld	r8, Z
    a4b0:	80 80       	ld	r8, Z
    a4b2:	80 80       	ld	r8, Z
    a4b4:	80 80       	ld	r8, Z
    a4b6:	80 80       	ld	r8, Z
    a4b8:	80 80       	ld	r8, Z
    a4ba:	80 80       	ld	r8, Z
    a4bc:	80 80       	ld	r8, Z
    a4be:	80 80       	ld	r8, Z
    a4c0:	80 80       	ld	r8, Z
    a4c2:	80 80       	ld	r8, Z
    a4c4:	80 80       	ld	r8, Z
    a4c6:	80 80       	ld	r8, Z
    a4c8:	80 80       	ld	r8, Z
    a4ca:	80 80       	ld	r8, Z
    a4cc:	80 80       	ld	r8, Z
    a4ce:	80 80       	ld	r8, Z
    a4d0:	80 80       	ld	r8, Z
    a4d2:	80 80       	ld	r8, Z
    a4d4:	80 80       	ld	r8, Z
    a4d6:	80 80       	ld	r8, Z
    a4d8:	80 80       	ld	r8, Z
    a4da:	80 80       	ld	r8, Z
    a4dc:	80 80       	ld	r8, Z
    a4de:	80 80       	ld	r8, Z
    a4e0:	80 80       	ld	r8, Z
    a4e2:	80 80       	ld	r8, Z
    a4e4:	80 80       	ld	r8, Z
    a4e6:	80 80       	ld	r8, Z
    a4e8:	80 80       	ld	r8, Z
    a4ea:	80 80       	ld	r8, Z
    a4ec:	80 80       	ld	r8, Z
    a4ee:	80 80       	ld	r8, Z
    a4f0:	80 80       	ld	r8, Z
    a4f2:	80 80       	ld	r8, Z
    a4f4:	80 87       	std	Z+8, r24	; 0x08
    a4f6:	91 9d       	mul	r25, r1
    a4f8:	ac c4       	rjmp	.+2392   	; 0xae52 <LBRandom+0x58>
    a4fa:	cb d4       	rcall	.+2454   	; 0xae92 <init_scores+0x10>
    a4fc:	dd f2       	brhs	.-74     	; 0xa4b4 <waves+0x9b4>
    a4fe:	fa fa       	.word	0xfafa	; ????

0000a500 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a500:	90 91 c0 0b 	lds	r25, 0x0BC0
    a504:	e0 e9       	ldi	r30, 0x90	; 144
    a506:	fa e0       	ldi	r31, 0x0A	; 10
    a508:	80 e0       	ldi	r24, 0x00	; 0
    a50a:	89 17       	cp	r24, r25
    a50c:	49 f0       	breq	.+18     	; 0xa520 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    a50e:	a0 81       	ld	r26, Z
    a510:	b1 81       	ldd	r27, Z+1	; 0x01
    a512:	a0 5e       	subi	r26, 0xE0	; 224
    a514:	be 4f       	sbci	r27, 0xFE	; 254
    a516:	22 81       	ldd	r18, Z+2	; 0x02
    a518:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a51a:	8f 5f       	subi	r24, 0xFF	; 255
    a51c:	33 96       	adiw	r30, 0x03	; 3
    a51e:	f5 cf       	rjmp	.-22     	; 0xa50a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    a520:	08 95       	ret

0000a522 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    a522:	80 93 00 01 	sts	0x0100, r24
    a526:	08 95       	ret

0000a528 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    a528:	2f 92       	push	r2
    a52a:	3f 92       	push	r3
    a52c:	4f 92       	push	r4
    a52e:	5f 92       	push	r5
    a530:	6f 92       	push	r6
    a532:	7f 92       	push	r7
    a534:	8f 92       	push	r8
    a536:	9f 92       	push	r9
    a538:	af 92       	push	r10
    a53a:	bf 92       	push	r11
    a53c:	cf 92       	push	r12
    a53e:	df 92       	push	r13
    a540:	ef 92       	push	r14
    a542:	ff 92       	push	r15
    a544:	0f 93       	push	r16
    a546:	1f 93       	push	r17
    a548:	cf 93       	push	r28
    a54a:	df 93       	push	r29
    a54c:	00 d0       	rcall	.+0      	; 0xa54e <ProcessSprites+0x26>
    a54e:	1f 92       	push	r1
    a550:	cd b7       	in	r28, 0x3d	; 61
    a552:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    a554:	10 92 c0 0b 	sts	0x0BC0, r1
		if(!spritesOn) return;
    a558:	80 91 00 01 	lds	r24, 0x0100
    a55c:	88 23       	and	r24, r24
    a55e:	09 f4       	brne	.+2      	; 0xa562 <ProcessSprites+0x3a>
    a560:	a1 c0       	rjmp	.+322    	; 0xa6a4 <ProcessSprites+0x17c>
    a562:	e8 e6       	ldi	r30, 0x68	; 104
    a564:	ce 2e       	mov	r12, r30
    a566:	e4 e0       	ldi	r30, 0x04	; 4
    a568:	de 2e       	mov	r13, r30
    a56a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    a56c:	f6 01       	movw	r30, r12
    a56e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    a570:	80 3f       	cpi	r24, 0xF0	; 240
    a572:	09 f4       	brne	.+2      	; 0xa576 <ProcessSprites+0x4e>
    a574:	79 c0       	rjmp	.+242    	; 0xa668 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    a576:	91 81       	ldd	r25, Z+1	; 0x01
    a578:	29 2f       	mov	r18, r25
    a57a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    a57c:	28 2e       	mov	r2, r24
    a57e:	26 94       	lsr	r2
    a580:	26 94       	lsr	r2
    a582:	26 94       	lsr	r2
				dx=ssx&0x7;
    a584:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    a586:	19 f0       	breq	.+6      	; 0xa58e <ProcessSprites+0x66>
    a588:	72 e0       	ldi	r23, 0x02	; 2
    a58a:	47 2e       	mov	r4, r23
    a58c:	02 c0       	rjmp	.+4      	; 0xa592 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    a58e:	44 24       	eor	r4, r4
    a590:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    a592:	63 e0       	ldi	r22, 0x03	; 3
    a594:	36 95       	lsr	r19
    a596:	27 95       	ror	r18
    a598:	6a 95       	dec	r22
    a59a:	e1 f7       	brne	.-8      	; 0xa594 <ProcessSprites+0x6c>
    a59c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    a59e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    a5a0:	19 f0       	breq	.+6      	; 0xa5a8 <ProcessSprites+0x80>
    a5a2:	52 e0       	ldi	r21, 0x02	; 2
    a5a4:	55 2e       	mov	r5, r21
    a5a6:	02 c0       	rjmp	.+4      	; 0xa5ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    a5a8:	55 24       	eor	r5, r5
    a5aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a5ac:	29 2f       	mov	r18, r25
    a5ae:	30 e0       	ldi	r19, 0x00	; 0
    a5b0:	32 2f       	mov	r19, r18
    a5b2:	22 27       	eor	r18, r18
    a5b4:	a9 01       	movw	r20, r18
    a5b6:	48 0f       	add	r20, r24
    a5b8:	51 1d       	adc	r21, r1
    a5ba:	5b 83       	std	Y+3, r21	; 0x03
    a5bc:	4a 83       	std	Y+2, r20	; 0x02
    a5be:	e1 2c       	mov	r14, r1
    a5c0:	f1 2c       	mov	r15, r1
    a5c2:	94 ee       	ldi	r25, 0xE4	; 228
    a5c4:	93 0d       	add	r25, r3
    a5c6:	99 83       	std	Y+1, r25	; 0x01
    a5c8:	03 2d       	mov	r16, r3
    a5ca:	0e 0d       	add	r16, r14
    a5cc:	0c 31       	cpi	r16, 0x1C	; 28
    a5ce:	10 f0       	brcs	.+4      	; 0xa5d4 <ProcessSprites+0xac>
    a5d0:	09 81       	ldd	r16, Y+1	; 0x01
    a5d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a5d4:	5e e1       	ldi	r21, 0x1E	; 30
    a5d6:	05 9f       	mul	r16, r21
    a5d8:	80 01       	movw	r16, r0
    a5da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a5dc:	be 2c       	mov	r11, r14
    a5de:	aa 24       	eor	r10, r10
    a5e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    a5e2:	ed e1       	ldi	r30, 0x1D	; 29
    a5e4:	e7 15       	cp	r30, r7
    a5e6:	18 f4       	brcc	.+6      	; 0xa5ee <ProcessSprites+0xc6>
    a5e8:	82 ee       	ldi	r24, 0xE2	; 226
    a5ea:	87 0d       	add	r24, r7
    a5ec:	01 c0       	rjmp	.+2      	; 0xa5f0 <ProcessSprites+0xc8>
    a5ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a5f0:	a8 01       	movw	r20, r16
    a5f2:	48 0f       	add	r20, r24
    a5f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    a5f6:	ca 01       	movw	r24, r20
    a5f8:	80 5e       	subi	r24, 0xE0	; 224
    a5fa:	9e 4f       	sbci	r25, 0xFE	; 254
    a5fc:	4c 01       	movw	r8, r24
    a5fe:	fc 01       	movw	r30, r24
    a600:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    a602:	88 31       	cpi	r24, 0x18	; 24
    a604:	e0 f0       	brcs	.+56     	; 0xa63e <ProcessSprites+0x116>
    a606:	60 91 c0 0b 	lds	r22, 0x0BC0
    a60a:	68 31       	cpi	r22, 0x18	; 24
    a60c:	f8 f4       	brcc	.+62     	; 0xa64c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    a60e:	26 2f       	mov	r18, r22
    a610:	30 e0       	ldi	r19, 0x00	; 0
    a612:	f9 01       	movw	r30, r18
    a614:	ee 0f       	add	r30, r30
    a616:	ff 1f       	adc	r31, r31
    a618:	e2 0f       	add	r30, r18
    a61a:	f3 1f       	adc	r31, r19
    a61c:	e0 57       	subi	r30, 0x70	; 112
    a61e:	f5 4f       	sbci	r31, 0xF5	; 245
    a620:	51 83       	std	Z+1, r21	; 0x01
    a622:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    a624:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    a626:	0e 94 2f 43 	call	0x865e	; 0x865e <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    a62a:	80 91 c0 0b 	lds	r24, 0x0BC0
    a62e:	f4 01       	movw	r30, r8
    a630:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    a632:	91 e0       	ldi	r25, 0x01	; 1
    a634:	98 0f       	add	r25, r24
    a636:	90 93 c0 0b 	sts	0x0BC0, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    a63a:	88 31       	cpi	r24, 0x18	; 24
    a63c:	38 f4       	brcc	.+14     	; 0xa64c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a63e:	2a 81       	ldd	r18, Y+2	; 0x02
    a640:	3b 81       	ldd	r19, Y+3	; 0x03
    a642:	a5 01       	movw	r20, r10
    a644:	68 2f       	mov	r22, r24
    a646:	86 2d       	mov	r24, r6
    a648:	0e 94 c0 43 	call	0x8780	; 0x8780 <BlitSprite>
    a64c:	ff ef       	ldi	r31, 0xFF	; 255
    a64e:	af 1a       	sub	r10, r31
    a650:	bf 0a       	sbc	r11, r31
    a652:	73 94       	inc	r7
    a654:	87 2d       	mov	r24, r7
    a656:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    a658:	84 15       	cp	r24, r4
    a65a:	18 f2       	brcs	.-122    	; 0xa5e2 <ProcessSprites+0xba>
    a65c:	4f ef       	ldi	r20, 0xFF	; 255
    a65e:	e4 1a       	sub	r14, r20
    a660:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    a662:	e5 14       	cp	r14, r5
    a664:	08 f4       	brcc	.+2      	; 0xa668 <ProcessSprites+0x140>
    a666:	b0 cf       	rjmp	.-160    	; 0xa5c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    a668:	63 94       	inc	r6
    a66a:	84 e0       	ldi	r24, 0x04	; 4
    a66c:	c8 0e       	add	r12, r24
    a66e:	d1 1c       	adc	r13, r1
    a670:	9a e0       	ldi	r25, 0x0A	; 10
    a672:	69 12       	cpse	r6, r25
    a674:	7b cf       	rjmp	.-266    	; 0xa56c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    a676:	0f 90       	pop	r0
    a678:	0f 90       	pop	r0
    a67a:	0f 90       	pop	r0
    a67c:	df 91       	pop	r29
    a67e:	cf 91       	pop	r28
    a680:	1f 91       	pop	r17
    a682:	0f 91       	pop	r16
    a684:	ff 90       	pop	r15
    a686:	ef 90       	pop	r14
    a688:	df 90       	pop	r13
    a68a:	cf 90       	pop	r12
    a68c:	bf 90       	pop	r11
    a68e:	af 90       	pop	r10
    a690:	9f 90       	pop	r9
    a692:	8f 90       	pop	r8
    a694:	7f 90       	pop	r7
    a696:	6f 90       	pop	r6
    a698:	5f 90       	pop	r5
    a69a:	4f 90       	pop	r4
    a69c:	3f 90       	pop	r3
    a69e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    a6a0:	0c 94 80 52 	jmp	0xa500	; 0xa500 <RestoreBackground>

	}
    a6a4:	0f 90       	pop	r0
    a6a6:	0f 90       	pop	r0
    a6a8:	0f 90       	pop	r0
    a6aa:	df 91       	pop	r29
    a6ac:	cf 91       	pop	r28
    a6ae:	1f 91       	pop	r17
    a6b0:	0f 91       	pop	r16
    a6b2:	ff 90       	pop	r15
    a6b4:	ef 90       	pop	r14
    a6b6:	df 90       	pop	r13
    a6b8:	cf 90       	pop	r12
    a6ba:	bf 90       	pop	r11
    a6bc:	af 90       	pop	r10
    a6be:	9f 90       	pop	r9
    a6c0:	8f 90       	pop	r8
    a6c2:	7f 90       	pop	r7
    a6c4:	6f 90       	pop	r6
    a6c6:	5f 90       	pop	r5
    a6c8:	4f 90       	pop	r4
    a6ca:	3f 90       	pop	r3
    a6cc:	2f 90       	pop	r2
    a6ce:	08 95       	ret

0000a6d0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    a6d0:	df 92       	push	r13
    a6d2:	ef 92       	push	r14
    a6d4:	ff 92       	push	r15
    a6d6:	0f 93       	push	r16
    a6d8:	1f 93       	push	r17
    a6da:	cf 93       	push	r28
    a6dc:	df 93       	push	r29
    a6de:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    a6e0:	fb 01       	movw	r30, r22
    a6e2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    a6e4:	31 96       	adiw	r30, 0x01	; 1
    a6e6:	64 91       	lpm	r22, Z
    a6e8:	5f ef       	ldi	r21, 0xFF	; 255
    a6ea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    a6ec:	24 2f       	mov	r18, r20
    a6ee:	21 70       	andi	r18, 0x01	; 1
    a6f0:	40 ff       	sbrs	r20, 0
    a6f2:	04 c0       	rjmp	.+8      	; 0xa6fc <MapSprite2+0x2c>
			x=(mapWidth-1);
    a6f4:	95 2f       	mov	r25, r21
			dx=-1;
    a6f6:	ff 24       	eor	r15, r15
    a6f8:	fa 94       	dec	r15
    a6fa:	03 c0       	rjmp	.+6      	; 0xa702 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    a6fc:	ff 24       	eor	r15, r15
    a6fe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    a700:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    a702:	41 ff       	sbrs	r20, 1
    a704:	05 c0       	rjmp	.+10     	; 0xa710 <MapSprite2+0x40>
			y=(mapHeight-1);
    a706:	7f ef       	ldi	r23, 0xFF	; 255
    a708:	76 0f       	add	r23, r22
			dy=-1;
    a70a:	ee 24       	eor	r14, r14
    a70c:	ea 94       	dec	r14
    a70e:	03 c0       	rjmp	.+6      	; 0xa716 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    a710:	ee 24       	eor	r14, r14
    a712:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    a714:	70 e0       	ldi	r23, 0x00	; 0
    a716:	21 11       	cpse	r18, r1
    a718:	01 c0       	rjmp	.+2      	; 0xa71c <MapSprite2+0x4c>
    a71a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a71c:	00 e0       	ldi	r16, 0x00	; 0
    a71e:	06 17       	cp	r16, r22
    a720:	09 f1       	breq	.+66     	; 0xa764 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a722:	71 03       	mulsu	r23, r17
    a724:	e0 01       	movw	r28, r0
    a726:	11 24       	eor	r1, r1
    a728:	d8 2e       	mov	r13, r24
    a72a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    a72c:	8d 15       	cp	r24, r13
    a72e:	b1 f0       	breq	.+44     	; 0xa75c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a730:	9e 01       	movw	r18, r28
    a732:	29 0f       	add	r18, r25
    a734:	31 1d       	adc	r19, r1
    a736:	97 fd       	sbrc	r25, 7
    a738:	3a 95       	dec	r19
    a73a:	2e 5f       	subi	r18, 0xFE	; 254
    a73c:	3f 4f       	sbci	r19, 0xFF	; 255
    a73e:	fd 01       	movw	r30, r26
    a740:	e2 0f       	add	r30, r18
    a742:	f3 1f       	adc	r31, r19
    a744:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    a746:	34 e0       	ldi	r19, 0x04	; 4
    a748:	83 9f       	mul	r24, r19
    a74a:	f0 01       	movw	r30, r0
    a74c:	11 24       	eor	r1, r1
    a74e:	e8 59       	subi	r30, 0x98	; 152
    a750:	fb 4f       	sbci	r31, 0xFB	; 251
    a752:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    a754:	8f 5f       	subi	r24, 0xFF	; 255
    a756:	43 83       	std	Z+3, r20	; 0x03
    a758:	9f 0d       	add	r25, r15
    a75a:	e8 cf       	rjmp	.-48     	; 0xa72c <MapSprite2+0x5c>
    a75c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a75e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a760:	95 2f       	mov	r25, r21
    a762:	dd cf       	rjmp	.-70     	; 0xa71e <MapSprite2+0x4e>
	    }
	}
    a764:	df 91       	pop	r29
    a766:	cf 91       	pop	r28
    a768:	1f 91       	pop	r17
    a76a:	0f 91       	pop	r16
    a76c:	ff 90       	pop	r15
    a76e:	ef 90       	pop	r14
    a770:	df 90       	pop	r13
    a772:	08 95       	ret

0000a774 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    a774:	0f 93       	push	r16
    a776:	cf 93       	push	r28
    a778:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    a77a:	30 e0       	ldi	r19, 0x00	; 0
    a77c:	30 17       	cp	r19, r16
    a77e:	e1 f0       	breq	.+56     	; 0xa7b8 <MoveSprite+0x44>
    a780:	b4 2f       	mov	r27, r20
    a782:	a0 e2       	ldi	r26, 0x20	; 32
    a784:	a4 0f       	add	r26, r20
    a786:	78 2f       	mov	r23, r24
    a788:	72 0f       	add	r23, r18
    a78a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    a78c:	87 17       	cp	r24, r23
    a78e:	81 f0       	breq	.+32     	; 0xa7b0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    a790:	c4 e0       	ldi	r28, 0x04	; 4
    a792:	8c 9f       	mul	r24, r28
    a794:	f0 01       	movw	r30, r0
    a796:	11 24       	eor	r1, r1
    a798:	e8 59       	subi	r30, 0x98	; 152
    a79a:	fb 4f       	sbci	r31, 0xFB	; 251
    a79c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    a79e:	41 3e       	cpi	r20, 0xE1	; 225
    a7a0:	51 05       	cpc	r21, r1
    a7a2:	14 f0       	brlt	.+4      	; 0xa7a8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    a7a4:	a1 83       	std	Z+1, r26	; 0x01
    a7a6:	01 c0       	rjmp	.+2      	; 0xa7aa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a7a8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    a7aa:	8f 5f       	subi	r24, 0xFF	; 255
    a7ac:	98 5f       	subi	r25, 0xF8	; 248
    a7ae:	ee cf       	rjmp	.-36     	; 0xa78c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    a7b0:	3f 5f       	subi	r19, 0xFF	; 255
    a7b2:	48 5f       	subi	r20, 0xF8	; 248
    a7b4:	5f 4f       	sbci	r21, 0xFF	; 255
    a7b6:	e2 cf       	rjmp	.-60     	; 0xa77c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    a7b8:	cf 91       	pop	r28
    a7ba:	0f 91       	pop	r16
    a7bc:	08 95       	ret

0000a7be <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    a7be:	e8 e6       	ldi	r30, 0x68	; 104
    a7c0:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    a7c2:	80 ef       	ldi	r24, 0xF0	; 240
    a7c4:	80 83       	st	Z, r24
    a7c6:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    a7c8:	94 e0       	ldi	r25, 0x04	; 4
    a7ca:	e0 39       	cpi	r30, 0x90	; 144
    a7cc:	f9 07       	cpc	r31, r25
    a7ce:	d1 f7       	brne	.-12     	; 0xa7c4 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    a7d0:	08 95       	ret

0000a7d2 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    a7d2:	4f 92       	push	r4
    a7d4:	5f 92       	push	r5
    a7d6:	6f 92       	push	r6
    a7d8:	7f 92       	push	r7
    a7da:	8f 92       	push	r8
    a7dc:	9f 92       	push	r9
    a7de:	af 92       	push	r10
    a7e0:	bf 92       	push	r11
    a7e2:	cf 92       	push	r12
    a7e4:	df 92       	push	r13
    a7e6:	ef 92       	push	r14
    a7e8:	ff 92       	push	r15
    a7ea:	0f 93       	push	r16
    a7ec:	1f 93       	push	r17
    a7ee:	cf 93       	push	r28
    a7f0:	df 93       	push	r29
    a7f2:	68 2e       	mov	r6, r24
    a7f4:	56 2e       	mov	r5, r22
    a7f6:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a7f8:	fa 01       	movw	r30, r20
    a7fa:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a7fc:	31 96       	adiw	r30, 0x01	; 1
    a7fe:	84 90       	lpm	r8, Z
    a800:	c7 2c       	mov	r12, r7
    a802:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    a804:	00 e0       	ldi	r16, 0x00	; 0
    a806:	10 e0       	ldi	r17, 0x00	; 0
    a808:	91 2c       	mov	r9, r1
    a80a:	98 14       	cp	r9, r8
    a80c:	f1 f0       	breq	.+60     	; 0xa84a <DrawMap2+0x78>
    a80e:	c0 e0       	ldi	r28, 0x00	; 0
    a810:	d0 e0       	ldi	r29, 0x00	; 0
    a812:	58 01       	movw	r10, r16
    a814:	f2 e0       	ldi	r31, 0x02	; 2
    a816:	af 0e       	add	r10, r31
    a818:	b1 1c       	adc	r11, r1
    a81a:	49 2c       	mov	r4, r9
    a81c:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    a81e:	c7 15       	cp	r28, r7
    a820:	80 f4       	brcc	.+32     	; 0xa842 <DrawMap2+0x70>
    a822:	95 01       	movw	r18, r10
    a824:	2c 0f       	add	r18, r28
    a826:	3d 1f       	adc	r19, r29
    a828:	f7 01       	movw	r30, r14
    a82a:	e2 0f       	add	r30, r18
    a82c:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    a82e:	24 91       	lpm	r18, Z
    a830:	42 2f       	mov	r20, r18
    a832:	50 e0       	ldi	r21, 0x00	; 0
    a834:	64 2d       	mov	r22, r4
    a836:	8c 2f       	mov	r24, r28
    a838:	86 0d       	add	r24, r6
    a83a:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <SetTile>
    a83e:	21 96       	adiw	r28, 0x01	; 1
    a840:	ee cf       	rjmp	.-36     	; 0xa81e <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    a842:	93 94       	inc	r9
    a844:	0c 0d       	add	r16, r12
    a846:	1d 1d       	adc	r17, r13
    a848:	e0 cf       	rjmp	.-64     	; 0xa80a <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    a84a:	df 91       	pop	r29
    a84c:	cf 91       	pop	r28
    a84e:	1f 91       	pop	r17
    a850:	0f 91       	pop	r16
    a852:	ff 90       	pop	r15
    a854:	ef 90       	pop	r14
    a856:	df 90       	pop	r13
    a858:	cf 90       	pop	r12
    a85a:	bf 90       	pop	r11
    a85c:	af 90       	pop	r10
    a85e:	9f 90       	pop	r9
    a860:	8f 90       	pop	r8
    a862:	7f 90       	pop	r7
    a864:	6f 90       	pop	r6
    a866:	5f 90       	pop	r5
    a868:	4f 90       	pop	r4
    a86a:	08 95       	ret

0000a86c <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    a86c:	df 92       	push	r13
    a86e:	ef 92       	push	r14
    a870:	ff 92       	push	r15
    a872:	0f 93       	push	r16
    a874:	1f 93       	push	r17
    a876:	cf 93       	push	r28
    a878:	df 93       	push	r29
    a87a:	f6 2e       	mov	r15, r22
    a87c:	04 2f       	mov	r16, r20
    a87e:	d2 2e       	mov	r13, r18
    a880:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    a882:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    a884:	8a e0       	ldi	r24, 0x0A	; 10
    a886:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    a888:	01 11       	cpse	r16, r1
    a88a:	02 c0       	rjmp	.+4      	; 0xa890 <PrintByte+0x24>
    a88c:	11 11       	cpse	r17, r1
    a88e:	07 c0       	rjmp	.+14     	; 0xa89e <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    a890:	80 2f       	mov	r24, r16
    a892:	6e 2d       	mov	r22, r14
    a894:	0e 94 26 70 	call	0xe04c	; 0xe04c <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    a898:	40 e1       	ldi	r20, 0x10	; 16
    a89a:	49 0f       	add	r20, r25
    a89c:	05 c0       	rjmp	.+10     	; 0xa8a8 <PrintByte+0x3c>
		}else{
			if(zeropad){
    a89e:	dd 20       	and	r13, r13
    a8a0:	11 f0       	breq	.+4      	; 0xa8a6 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    a8a2:	40 e1       	ldi	r20, 0x10	; 16
    a8a4:	01 c0       	rjmp	.+2      	; 0xa8a8 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    a8a6:	40 e0       	ldi	r20, 0x00	; 0
    a8a8:	6f 2d       	mov	r22, r15
    a8aa:	8c 2f       	mov	r24, r28
    a8ac:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <SetFont>
			}
		}
		val=val/10;
    a8b0:	80 2f       	mov	r24, r16
    a8b2:	6e 2d       	mov	r22, r14
    a8b4:	0e 94 26 70 	call	0xe04c	; 0xe04c <__udivmodqi4>
    a8b8:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    a8ba:	1f 5f       	subi	r17, 0xFF	; 255
    a8bc:	21 97       	sbiw	r28, 0x01	; 1
    a8be:	13 30       	cpi	r17, 0x03	; 3
    a8c0:	19 f7       	brne	.-58     	; 0xa888 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    a8c2:	df 91       	pop	r29
    a8c4:	cf 91       	pop	r28
    a8c6:	1f 91       	pop	r17
    a8c8:	0f 91       	pop	r16
    a8ca:	ff 90       	pop	r15
    a8cc:	ef 90       	pop	r14
    a8ce:	df 90       	pop	r13
    a8d0:	08 95       	ret

0000a8d2 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    a8d2:	0f 93       	push	r16
    a8d4:	1f 93       	push	r17
    a8d6:	cf 93       	push	r28
    a8d8:	df 93       	push	r29
    a8da:	06 2f       	mov	r16, r22
    a8dc:	c4 2f       	mov	r28, r20
    a8de:	d5 2f       	mov	r29, r21
    a8e0:	18 2f       	mov	r17, r24
    a8e2:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    a8e4:	fe 01       	movw	r30, r28
    a8e6:	44 91       	lpm	r20, Z
		if(c!=0){
    a8e8:	44 23       	and	r20, r20
    a8ea:	49 f0       	breq	.+18     	; 0xa8fe <Print+0x2c>
			c=((c&127)-32);			
    a8ec:	4f 77       	andi	r20, 0x7F	; 127
    a8ee:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    a8f0:	60 2f       	mov	r22, r16
    a8f2:	8c 2f       	mov	r24, r28
    a8f4:	81 0f       	add	r24, r17
    a8f6:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <SetFont>
    a8fa:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    a8fc:	f3 cf       	rjmp	.-26     	; 0xa8e4 <Print+0x12>
	
}
    a8fe:	df 91       	pop	r29
    a900:	cf 91       	pop	r28
    a902:	1f 91       	pop	r17
    a904:	0f 91       	pop	r16
    a906:	08 95       	ret

0000a908 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    a908:	40 52       	subi	r20, 0x20	; 32
    a90a:	0c 94 f0 45 	jmp	0x8be0	; 0x8be0 <SetFont>

0000a90e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a90e:	0f 93       	push	r16
    a910:	1f 93       	push	r17
    a912:	cf 93       	push	r28
    a914:	df 93       	push	r29
    a916:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a918:	c0 e0       	ldi	r28, 0x00	; 0
    a91a:	d0 e0       	ldi	r29, 0x00	; 0
    a91c:	c0 17       	cp	r28, r16
    a91e:	d1 07       	cpc	r29, r17
    a920:	44 f4       	brge	.+16     	; 0xa932 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    a922:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <GetVsyncFlag>
    a926:	88 23       	and	r24, r24
    a928:	e1 f3       	breq	.-8      	; 0xa922 <WaitVsync+0x14>
		ClearVsyncFlag();		
    a92a:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a92e:	21 96       	adiw	r28, 0x01	; 1
    a930:	f5 cf       	rjmp	.-22     	; 0xa91c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a932:	df 91       	pop	r29
    a934:	cf 91       	pop	r28
    a936:	1f 91       	pop	r17
    a938:	0f 91       	pop	r16
    a93a:	08 95       	ret

0000a93c <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    a93c:	8b e0       	ldi	r24, 0x0B	; 11
    a93e:	99 e0       	ldi	r25, 0x09	; 9
    a940:	0e 94 46 48 	call	0x908c	; 0x908c <InitMusicPlayer>
			SetTileTable(logo_tileset);
    a944:	8b e0       	ldi	r24, 0x0B	; 11
    a946:	91 e0       	ldi	r25, 0x01	; 1
    a948:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <SetTileTable>
			
			//draw logo
			ClearVram();
    a94c:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <ClearVram>
			WaitVsync(15);		
    a950:	8f e0       	ldi	r24, 0x0F	; 15
    a952:	90 e0       	ldi	r25, 0x00	; 0
    a954:	0e 94 87 54 	call	0xa90e	; 0xa90e <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    a958:	41 e0       	ldi	r20, 0x01	; 1
    a95a:	6f ef       	ldi	r22, 0xFF	; 255
    a95c:	80 e0       	ldi	r24, 0x00	; 0
    a95e:	0e 94 3b 49 	call	0x9276	; 0x9276 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a962:	45 ef       	ldi	r20, 0xF5	; 245
    a964:	50 e0       	ldi	r21, 0x00	; 0
    a966:	6c e0       	ldi	r22, 0x0C	; 12
    a968:	8c e0       	ldi	r24, 0x0C	; 12
    a96a:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
			WaitVsync(3);
    a96e:	83 e0       	ldi	r24, 0x03	; 3
    a970:	90 e0       	ldi	r25, 0x00	; 0
    a972:	0e 94 87 54 	call	0xa90e	; 0xa90e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    a976:	44 ee       	ldi	r20, 0xE4	; 228
    a978:	50 e0       	ldi	r21, 0x00	; 0
    a97a:	6c e0       	ldi	r22, 0x0C	; 12
    a97c:	8c e0       	ldi	r24, 0x0C	; 12
    a97e:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
			WaitVsync(2);
    a982:	82 e0       	ldi	r24, 0x02	; 2
    a984:	90 e0       	ldi	r25, 0x00	; 0
    a986:	0e 94 87 54 	call	0xa90e	; 0xa90e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a98a:	45 ef       	ldi	r20, 0xF5	; 245
    a98c:	50 e0       	ldi	r21, 0x00	; 0
    a98e:	6c e0       	ldi	r22, 0x0C	; 12
    a990:	8c e0       	ldi	r24, 0x0C	; 12
    a992:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    a996:	81 e4       	ldi	r24, 0x41	; 65
    a998:	90 e0       	ldi	r25, 0x00	; 0
    a99a:	0e 94 87 54 	call	0xa90e	; 0xa90e <WaitVsync>
			ClearVram();
    a99e:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <ClearVram>
			WaitVsync(20);
    a9a2:	84 e1       	ldi	r24, 0x14	; 20
    a9a4:	90 e0       	ldi	r25, 0x00	; 0
    a9a6:	0c 94 87 54 	jmp	0xa90e	; 0xa90e <WaitVsync>

0000a9aa <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a9aa:	80 93 be 0b 	sts	0x0BBE, r24
	currFadeFrame=0;
    a9ae:	10 92 c2 0b 	sts	0x0BC2, r1
	fadeActive=true;
    a9b2:	81 e0       	ldi	r24, 0x01	; 1
    a9b4:	80 93 c1 0b 	sts	0x0BC1, r24
		
	if(blocking){
    a9b8:	66 23       	and	r22, r22
    a9ba:	21 f0       	breq	.+8      	; 0xa9c4 <doFade+0x1a>
		while(fadeActive==true);
    a9bc:	80 91 c1 0b 	lds	r24, 0x0BC1
    a9c0:	81 11       	cpse	r24, r1
    a9c2:	fc cf       	rjmp	.-8      	; 0xa9bc <doFade+0x12>
    a9c4:	08 95       	ret

0000a9c6 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a9c6:	81 11       	cpse	r24, r1
    a9c8:	03 c0       	rjmp	.+6      	; 0xa9d0 <FadeIn+0xa>
		DDRC=0xff;
    a9ca:	8f ef       	ldi	r24, 0xFF	; 255
    a9cc:	87 b9       	out	0x07, r24	; 7
		return;
    a9ce:	08 95       	ret
	}
	fadeStep=1;
    a9d0:	91 e0       	ldi	r25, 0x01	; 1
    a9d2:	90 93 c3 0b 	sts	0x0BC3, r25
	fadeDir=1;
    a9d6:	90 93 bf 0b 	sts	0x0BBF, r25
	doFade(speed,blocking);
    a9da:	0c 94 d5 54 	jmp	0xa9aa	; 0xa9aa <doFade>

0000a9de <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a9de:	81 11       	cpse	r24, r1
    a9e0:	02 c0       	rjmp	.+4      	; 0xa9e6 <FadeOut+0x8>
		DDRC=0;
    a9e2:	17 b8       	out	0x07, r1	; 7
		return;
    a9e4:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a9e6:	9c e0       	ldi	r25, 0x0C	; 12
    a9e8:	90 93 c3 0b 	sts	0x0BC3, r25
	fadeDir=-1;
    a9ec:	9f ef       	ldi	r25, 0xFF	; 255
    a9ee:	90 93 bf 0b 	sts	0x0BBF, r25
	doFade(speed,blocking);
    a9f2:	0c 94 d5 54 	jmp	0xa9aa	; 0xa9aa <doFade>

0000a9f6 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a9f6:	80 91 c1 0b 	lds	r24, 0x0BC1
    a9fa:	88 23       	and	r24, r24
    a9fc:	01 f1       	breq	.+64     	; 0xaa3e <ProcessFading+0x48>
		if(currFadeFrame==0){
    a9fe:	80 91 c2 0b 	lds	r24, 0x0BC2
    aa02:	81 11       	cpse	r24, r1
    aa04:	19 c0       	rjmp	.+50     	; 0xaa38 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    aa06:	80 91 be 0b 	lds	r24, 0x0BBE
    aa0a:	80 93 c2 0b 	sts	0x0BC2, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    aa0e:	e0 91 c3 0b 	lds	r30, 0x0BC3
    aa12:	f0 e0       	ldi	r31, 0x00	; 0
    aa14:	e9 52       	subi	r30, 0x29	; 41
    aa16:	ff 4f       	sbci	r31, 0xFF	; 255
    aa18:	e4 91       	lpm	r30, Z
    aa1a:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    aa1c:	90 91 bf 0b 	lds	r25, 0x0BBF
    aa20:	80 91 c3 0b 	lds	r24, 0x0BC3
    aa24:	89 0f       	add	r24, r25
    aa26:	80 93 c3 0b 	sts	0x0BC3, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    aa2a:	88 23       	and	r24, r24
    aa2c:	11 f0       	breq	.+4      	; 0xaa32 <ProcessFading+0x3c>
    aa2e:	8d 30       	cpi	r24, 0x0D	; 13
    aa30:	31 f4       	brne	.+12     	; 0xaa3e <ProcessFading+0x48>
				fadeActive=false;
    aa32:	10 92 c1 0b 	sts	0x0BC1, r1
    aa36:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    aa38:	81 50       	subi	r24, 0x01	; 1
    aa3a:	80 93 c2 0b 	sts	0x0BC2, r24
    aa3e:	08 95       	ret

0000aa40 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    aa40:	0e 94 fb 54 	call	0xa9f6	; 0xa9f6 <ProcessFading>
		ProcessSprites();
    aa44:	0c 94 94 52 	jmp	0xa528	; 0xa528 <ProcessSprites>

0000aa48 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    aa48:	fc 01       	movw	r30, r24
	anim->looped = 0;
    aa4a:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    aa4c:	93 81       	ldd	r25, Z+3	; 0x03
    aa4e:	9f 5f       	subi	r25, 0xFF	; 255
    aa50:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    aa52:	22 81       	ldd	r18, Z+2	; 0x02
    aa54:	80 81       	ld	r24, Z
    aa56:	92 17       	cp	r25, r18
    aa58:	38 f4       	brcc	.+14     	; 0xaa68 <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    aa5a:	e8 0f       	add	r30, r24
    aa5c:	f1 1d       	adc	r31, r1
    aa5e:	e8 0f       	add	r30, r24
    aa60:	f1 1d       	adc	r31, r1
    aa62:	86 81       	ldd	r24, Z+6	; 0x06
    aa64:	97 81       	ldd	r25, Z+7	; 0x07
    aa66:	08 95       	ret
	}
	anim->frame_count = 0;
    aa68:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    aa6a:	90 e0       	ldi	r25, 0x00	; 0
    aa6c:	01 96       	adiw	r24, 0x01	; 1
    aa6e:	61 81       	ldd	r22, Z+1	; 0x01
    aa70:	70 e0       	ldi	r23, 0x00	; 0
    aa72:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    aa76:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    aa78:	81 11       	cpse	r24, r1
    aa7a:	02 c0       	rjmp	.+4      	; 0xaa80 <LBGetNextFrame+0x38>
    aa7c:	21 e0       	ldi	r18, 0x01	; 1
    aa7e:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    aa80:	99 27       	eor	r25, r25
    aa82:	03 96       	adiw	r24, 0x03	; 3
    aa84:	88 0f       	add	r24, r24
    aa86:	99 1f       	adc	r25, r25
    aa88:	e8 0f       	add	r30, r24
    aa8a:	f9 1f       	adc	r31, r25
    aa8c:	80 81       	ld	r24, Z
    aa8e:	91 81       	ldd	r25, Z+1	; 0x01
}
    aa90:	08 95       	ret

0000aa92 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    aa92:	fc 01       	movw	r30, r24
	anim->looped = 0;
    aa94:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    aa96:	93 81       	ldd	r25, Z+3	; 0x03
    aa98:	9f 5f       	subi	r25, 0xFF	; 255
    aa9a:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    aa9c:	22 81       	ldd	r18, Z+2	; 0x02
    aa9e:	80 81       	ld	r24, Z
    aaa0:	92 17       	cp	r25, r18
    aaa2:	e0 f0       	brcs	.+56     	; 0xaadc <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    aaa4:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    aaa6:	95 81       	ldd	r25, Z+5	; 0x05
    aaa8:	99 23       	and	r25, r25
    aaaa:	49 f0       	breq	.+18     	; 0xaabe <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    aaac:	81 50       	subi	r24, 0x01	; 1
    aaae:	10 f0       	brcs	.+4      	; 0xaab4 <LBGetNextFrameReverse+0x22>
    aab0:	80 83       	st	Z, r24
    aab2:	13 c0       	rjmp	.+38     	; 0xaada <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    aab4:	10 82       	st	Z, r1
			anim->looped = 1;
    aab6:	81 e0       	ldi	r24, 0x01	; 1
    aab8:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    aaba:	15 82       	std	Z+5, r1	; 0x05
    aabc:	0e c0       	rjmp	.+28     	; 0xaada <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    aabe:	21 81       	ldd	r18, Z+1	; 0x01
    aac0:	90 e0       	ldi	r25, 0x00	; 0
    aac2:	01 96       	adiw	r24, 0x01	; 1
    aac4:	62 2f       	mov	r22, r18
    aac6:	70 e0       	ldi	r23, 0x00	; 0
    aac8:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    aacc:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    aace:	81 11       	cpse	r24, r1
    aad0:	04 c0       	rjmp	.+8      	; 0xaada <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    aad2:	81 e0       	ldi	r24, 0x01	; 1
    aad4:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    aad6:	21 50       	subi	r18, 0x01	; 1
    aad8:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    aada:	80 81       	ld	r24, Z
    aadc:	e8 0f       	add	r30, r24
    aade:	f1 1d       	adc	r31, r1
    aae0:	e8 0f       	add	r30, r24
    aae2:	f1 1d       	adc	r31, r1
    aae4:	86 81       	ldd	r24, Z+6	; 0x06
    aae6:	97 81       	ldd	r25, Z+7	; 0x07
}
    aae8:	08 95       	ret

0000aaea <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    aaea:	0f 93       	push	r16
    aaec:	1f 93       	push	r17
    aaee:	cf 93       	push	r28
    aaf0:	df 93       	push	r29
    aaf2:	1f 92       	push	r1
    aaf4:	cd b7       	in	r28, 0x3d	; 61
    aaf6:	de b7       	in	r29, 0x3e	; 62
    aaf8:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    aafa:	86 2f       	mov	r24, r22
    aafc:	69 83       	std	Y+1, r22	; 0x01
    aafe:	0e 94 14 46 	call	0x8c28	; 0x8c28 <ReadJoypad>
    ab02:	d8 01       	movw	r26, r16
    ab04:	15 96       	adiw	r26, 0x05	; 5
    ab06:	9c 93       	st	X, r25
    ab08:	8e 93       	st	-X, r24
    ab0a:	14 97       	sbiw	r26, 0x04	; 4
    ab0c:	69 81       	ldd	r22, Y+1	; 0x01
    ab0e:	e6 2f       	mov	r30, r22
    ab10:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    ab12:	00 97       	sbiw	r24, 0x00	; 0
    ab14:	51 f0       	breq	.+20     	; 0xab2a <LBGetJoyPadState+0x40>
    ab16:	df 01       	movw	r26, r30
    ab18:	aa 0f       	add	r26, r26
    ab1a:	bb 1f       	adc	r27, r27
    ab1c:	a5 5c       	subi	r26, 0xC5	; 197
    ab1e:	b4 4f       	sbci	r27, 0xF4	; 244
    ab20:	2d 91       	ld	r18, X+
    ab22:	3c 91       	ld	r19, X
    ab24:	82 17       	cp	r24, r18
    ab26:	93 07       	cpc	r25, r19
    ab28:	21 f0       	breq	.+8      	; 0xab32 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    ab2a:	d8 01       	movw	r26, r16
    ab2c:	16 96       	adiw	r26, 0x06	; 6
    ab2e:	1c 92       	st	X, r1
    ab30:	07 c0       	rjmp	.+14     	; 0xab40 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    ab32:	d8 01       	movw	r26, r16
    ab34:	16 96       	adiw	r26, 0x06	; 6
    ab36:	2c 91       	ld	r18, X
    ab38:	16 97       	sbiw	r26, 0x06	; 6
    ab3a:	2f 5f       	subi	r18, 0xFF	; 255
    ab3c:	16 96       	adiw	r26, 0x06	; 6
    ab3e:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    ab40:	ee 0f       	add	r30, r30
    ab42:	ff 1f       	adc	r31, r31
    ab44:	e5 5c       	subi	r30, 0xC5	; 197
    ab46:	f4 4f       	sbci	r31, 0xF4	; 244
    ab48:	20 81       	ld	r18, Z
    ab4a:	31 81       	ldd	r19, Z+1	; 0x01
    ab4c:	a9 01       	movw	r20, r18
    ab4e:	40 95       	com	r20
    ab50:	50 95       	com	r21
    ab52:	48 23       	and	r20, r24
    ab54:	59 23       	and	r21, r25
    ab56:	d8 01       	movw	r26, r16
    ab58:	11 96       	adiw	r26, 0x01	; 1
    ab5a:	5c 93       	st	X, r21
    ab5c:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    ab5e:	ac 01       	movw	r20, r24
    ab60:	40 95       	com	r20
    ab62:	50 95       	com	r21
    ab64:	24 23       	and	r18, r20
    ab66:	35 23       	and	r19, r21
    ab68:	13 96       	adiw	r26, 0x03	; 3
    ab6a:	3c 93       	st	X, r19
    ab6c:	2e 93       	st	-X, r18
    ab6e:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    ab70:	91 83       	std	Z+1, r25	; 0x01
    ab72:	80 83       	st	Z, r24
}
    ab74:	0f 90       	pop	r0
    ab76:	df 91       	pop	r29
    ab78:	cf 91       	pop	r28
    ab7a:	1f 91       	pop	r17
    ab7c:	0f 91       	pop	r16
    ab7e:	08 95       	ret

0000ab80 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    ab80:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    ab82:	fb 01       	movw	r30, r22
    ab84:	2e 2f       	mov	r18, r30
    ab86:	23 1b       	sub	r18, r19
    ab88:	24 17       	cp	r18, r20
    ab8a:	28 f4       	brcc	.+10     	; 0xab96 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    ab8c:	21 91       	ld	r18, Z+
    ab8e:	dc 01       	movw	r26, r24
    ab90:	2d 93       	st	X+, r18
    ab92:	cd 01       	movw	r24, r26
    ab94:	f7 cf       	rjmp	.-18     	; 0xab84 <LBCopyChars+0x4>
	}
}
    ab96:	08 95       	ret

0000ab98 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    ab98:	af 92       	push	r10
    ab9a:	bf 92       	push	r11
    ab9c:	cf 92       	push	r12
    ab9e:	df 92       	push	r13
    aba0:	ef 92       	push	r14
    aba2:	ff 92       	push	r15
    aba4:	0f 93       	push	r16
    aba6:	1f 93       	push	r17
    aba8:	cf 93       	push	r28
    abaa:	df 93       	push	r29
    abac:	1f 92       	push	r1
    abae:	cd b7       	in	r28, 0x3d	; 61
    abb0:	de b7       	in	r29, 0x3e	; 62
    abb2:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    abb4:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    abb6:	c6 2e       	mov	r12, r22
    abb8:	d1 2c       	mov	r13, r1
    abba:	90 e0       	ldi	r25, 0x00	; 0
    abbc:	5c 01       	movw	r10, r24
    abbe:	a4 1a       	sub	r10, r20
    abc0:	b5 0a       	sbc	r11, r21
    abc2:	80 2f       	mov	r24, r16
    abc4:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    abc6:	82 17       	cp	r24, r18
    abc8:	60 f4       	brcc	.+24     	; 0xabe2 <LBPrintStr+0x4a>
    abca:	c5 01       	movw	r24, r10
    abcc:	80 0f       	add	r24, r16
    abce:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    abd0:	f8 01       	movw	r30, r16
    abd2:	41 91       	ld	r20, Z+
    abd4:	8f 01       	movw	r16, r30
    abd6:	b6 01       	movw	r22, r12
    abd8:	29 83       	std	Y+1, r18	; 0x01
    abda:	0e 94 84 54 	call	0xa908	; 0xa908 <PrintChar>
    abde:	29 81       	ldd	r18, Y+1	; 0x01
    abe0:	f0 cf       	rjmp	.-32     	; 0xabc2 <LBPrintStr+0x2a>
	}
}
    abe2:	0f 90       	pop	r0
    abe4:	df 91       	pop	r29
    abe6:	cf 91       	pop	r28
    abe8:	1f 91       	pop	r17
    abea:	0f 91       	pop	r16
    abec:	ff 90       	pop	r15
    abee:	ef 90       	pop	r14
    abf0:	df 90       	pop	r13
    abf2:	cf 90       	pop	r12
    abf4:	bf 90       	pop	r11
    abf6:	af 90       	pop	r10
    abf8:	08 95       	ret

0000abfa <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    abfa:	af 92       	push	r10
    abfc:	cf 92       	push	r12
    abfe:	ef 92       	push	r14
    ac00:	ff 92       	push	r15
    ac02:	0f 93       	push	r16
    ac04:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    ac06:	70 e0       	ldi	r23, 0x00	; 0
    ac08:	f1 2c       	mov	r15, r1
    ac0a:	fb 01       	movw	r30, r22
    ac0c:	e2 0f       	add	r30, r18
    ac0e:	f1 1d       	adc	r31, r1
    ac10:	ee 16       	cp	r14, r30
    ac12:	ff 06       	cpc	r15, r31
    ac14:	a4 f4       	brge	.+40     	; 0xac3e <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    ac16:	ea 0c       	add	r14, r10
    ac18:	f1 1c       	adc	r15, r1
    ac1a:	6e 15       	cp	r22, r14
    ac1c:	7f 05       	cpc	r23, r15
    ac1e:	7c f4       	brge	.+30     	; 0xac3e <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    ac20:	28 2f       	mov	r18, r24
    ac22:	30 e0       	ldi	r19, 0x00	; 0
    ac24:	10 e0       	ldi	r17, 0x00	; 0
    ac26:	c9 01       	movw	r24, r18
    ac28:	84 0f       	add	r24, r20
    ac2a:	91 1d       	adc	r25, r1
    ac2c:	08 17       	cp	r16, r24
    ac2e:	19 07       	cpc	r17, r25
    ac30:	34 f4       	brge	.+12     	; 0xac3e <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    ac32:	0c 0d       	add	r16, r12
    ac34:	11 1d       	adc	r17, r1
    ac36:	81 e0       	ldi	r24, 0x01	; 1
    ac38:	20 17       	cp	r18, r16
    ac3a:	31 07       	cpc	r19, r17
    ac3c:	0c f0       	brlt	.+2      	; 0xac40 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    ac3e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    ac40:	1f 91       	pop	r17
    ac42:	0f 91       	pop	r16
    ac44:	ff 90       	pop	r15
    ac46:	ef 90       	pop	r14
    ac48:	cf 90       	pop	r12
    ac4a:	af 90       	pop	r10
    ac4c:	08 95       	ret

0000ac4e <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    ac4e:	2f 92       	push	r2
    ac50:	3f 92       	push	r3
    ac52:	4f 92       	push	r4
    ac54:	5f 92       	push	r5
    ac56:	6f 92       	push	r6
    ac58:	7f 92       	push	r7
    ac5a:	8f 92       	push	r8
    ac5c:	9f 92       	push	r9
    ac5e:	af 92       	push	r10
    ac60:	bf 92       	push	r11
    ac62:	cf 92       	push	r12
    ac64:	df 92       	push	r13
    ac66:	ef 92       	push	r14
    ac68:	ff 92       	push	r15
    ac6a:	0f 93       	push	r16
    ac6c:	1f 93       	push	r17
    ac6e:	cf 93       	push	r28
    ac70:	df 93       	push	r29
    ac72:	00 d0       	rcall	.+0      	; 0xac74 <LBLineIntersect+0x26>
    ac74:	00 d0       	rcall	.+0      	; 0xac76 <LBLineIntersect+0x28>
    ac76:	cd b7       	in	r28, 0x3d	; 61
    ac78:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    ac7a:	f1 2c       	mov	r15, r1
    ac7c:	8a 2c       	mov	r8, r10
    ac7e:	91 2c       	mov	r9, r1
    ac80:	8e 18       	sub	r8, r14
    ac82:	9f 08       	sbc	r9, r15
    ac84:	a8 2e       	mov	r10, r24
    ac86:	b1 2c       	mov	r11, r1
    ac88:	24 2e       	mov	r2, r20
    ac8a:	31 2c       	mov	r3, r1
    ac8c:	2a 18       	sub	r2, r10
    ac8e:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    ac90:	10 e0       	ldi	r17, 0x00	; 0
    ac92:	d1 2c       	mov	r13, r1
    ac94:	c0 1a       	sub	r12, r16
    ac96:	d1 0a       	sbc	r13, r17
    ac98:	46 2f       	mov	r20, r22
    ac9a:	50 e0       	ldi	r21, 0x00	; 0
    ac9c:	5c 83       	std	Y+4, r21	; 0x04
    ac9e:	4b 83       	std	Y+3, r20	; 0x03
    aca0:	82 2f       	mov	r24, r18
    aca2:	90 e0       	ldi	r25, 0x00	; 0
    aca4:	9a 83       	std	Y+2, r25	; 0x02
    aca6:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    aca8:	82 9c       	mul	r8, r2
    acaa:	90 01       	movw	r18, r0
    acac:	83 9c       	mul	r8, r3
    acae:	30 0d       	add	r19, r0
    acb0:	92 9c       	mul	r9, r2
    acb2:	30 0d       	add	r19, r0
    acb4:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    acb6:	ca 01       	movw	r24, r20
    acb8:	e9 81       	ldd	r30, Y+1	; 0x01
    acba:	fa 81       	ldd	r31, Y+2	; 0x02
    acbc:	8e 1b       	sub	r24, r30
    acbe:	9f 0b       	sbc	r25, r31
    acc0:	c8 9e       	mul	r12, r24
    acc2:	b0 01       	movw	r22, r0
    acc4:	c9 9e       	mul	r12, r25
    acc6:	70 0d       	add	r23, r0
    acc8:	d8 9e       	mul	r13, r24
    acca:	70 0d       	add	r23, r0
    accc:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    acce:	62 0f       	add	r22, r18
    acd0:	73 1f       	adc	r23, r19
    acd2:	88 27       	eor	r24, r24
    acd4:	77 fd       	sbrc	r23, 7
    acd6:	80 95       	com	r24
    acd8:	98 2f       	mov	r25, r24
    acda:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    acde:	2b 01       	movw	r4, r22
    ace0:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    ace2:	20 e0       	ldi	r18, 0x00	; 0
    ace4:	30 e0       	ldi	r19, 0x00	; 0
    ace6:	a9 01       	movw	r20, r18
    ace8:	0e 94 bf 70 	call	0xe17e	; 0xe17e <__cmpsf2>
    acec:	88 23       	and	r24, r24
    acee:	09 f4       	brne	.+2      	; 0xacf2 <LBLineIntersect+0xa4>
    acf0:	6c c0       	rjmp	.+216    	; 0xadca <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    acf2:	4b 81       	ldd	r20, Y+3	; 0x03
    acf4:	5c 81       	ldd	r21, Y+4	; 0x04
    acf6:	4e 19       	sub	r20, r14
    acf8:	5f 09       	sbc	r21, r15
    acfa:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    acfc:	0a 19       	sub	r16, r10
    acfe:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    ad00:	c4 9e       	mul	r12, r20
    ad02:	c0 01       	movw	r24, r0
    ad04:	c5 9e       	mul	r12, r21
    ad06:	90 0d       	add	r25, r0
    ad08:	d4 9e       	mul	r13, r20
    ad0a:	90 0d       	add	r25, r0
    ad0c:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    ad0e:	80 9e       	mul	r8, r16
    ad10:	b0 01       	movw	r22, r0
    ad12:	81 9e       	mul	r8, r17
    ad14:	70 0d       	add	r23, r0
    ad16:	90 9e       	mul	r9, r16
    ad18:	70 0d       	add	r23, r0
    ad1a:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    ad1c:	68 0f       	add	r22, r24
    ad1e:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    ad20:	88 27       	eor	r24, r24
    ad22:	77 fd       	sbrc	r23, 7
    ad24:	80 95       	com	r24
    ad26:	98 2f       	mov	r25, r24
    ad28:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    ad2c:	a3 01       	movw	r20, r6
    ad2e:	92 01       	movw	r18, r4
    ad30:	0e 94 c3 70 	call	0xe186	; 0xe186 <__divsf3>
    ad34:	4b 01       	movw	r8, r22
    ad36:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    ad38:	20 e0       	ldi	r18, 0x00	; 0
    ad3a:	30 e0       	ldi	r19, 0x00	; 0
    ad3c:	a9 01       	movw	r20, r18
    ad3e:	0e 94 bf 70 	call	0xe17e	; 0xe17e <__cmpsf2>
    ad42:	87 fd       	sbrc	r24, 7
    ad44:	42 c0       	rjmp	.+132    	; 0xadca <LBLineIntersect+0x17c>
    ad46:	20 e0       	ldi	r18, 0x00	; 0
    ad48:	30 e0       	ldi	r19, 0x00	; 0
    ad4a:	40 e8       	ldi	r20, 0x80	; 128
    ad4c:	5f e3       	ldi	r21, 0x3F	; 63
    ad4e:	c5 01       	movw	r24, r10
    ad50:	b4 01       	movw	r22, r8
    ad52:	0e 94 0e 72 	call	0xe41c	; 0xe41c <__gesf2>
    ad56:	18 16       	cp	r1, r24
    ad58:	c4 f1       	brlt	.+112    	; 0xadca <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    ad5a:	2e 9c       	mul	r2, r14
    ad5c:	b0 01       	movw	r22, r0
    ad5e:	2f 9c       	mul	r2, r15
    ad60:	70 0d       	add	r23, r0
    ad62:	3e 9c       	mul	r3, r14
    ad64:	70 0d       	add	r23, r0
    ad66:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    ad68:	29 81       	ldd	r18, Y+1	; 0x01
    ad6a:	3a 81       	ldd	r19, Y+2	; 0x02
    ad6c:	8b 81       	ldd	r24, Y+3	; 0x03
    ad6e:	9c 81       	ldd	r25, Y+4	; 0x04
    ad70:	28 1b       	sub	r18, r24
    ad72:	39 0b       	sbc	r19, r25
    ad74:	20 9f       	mul	r18, r16
    ad76:	c0 01       	movw	r24, r0
    ad78:	21 9f       	mul	r18, r17
    ad7a:	90 0d       	add	r25, r0
    ad7c:	30 9f       	mul	r19, r16
    ad7e:	90 0d       	add	r25, r0
    ad80:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    ad82:	68 0f       	add	r22, r24
    ad84:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    ad86:	88 27       	eor	r24, r24
    ad88:	77 fd       	sbrc	r23, 7
    ad8a:	80 95       	com	r24
    ad8c:	98 2f       	mov	r25, r24
    ad8e:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    ad92:	a3 01       	movw	r20, r6
    ad94:	92 01       	movw	r18, r4
    ad96:	0e 94 c3 70 	call	0xe186	; 0xe186 <__divsf3>
    ad9a:	6b 01       	movw	r12, r22
    ad9c:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    ad9e:	20 e0       	ldi	r18, 0x00	; 0
    ada0:	30 e0       	ldi	r19, 0x00	; 0
    ada2:	a9 01       	movw	r20, r18
    ada4:	0e 94 bf 70 	call	0xe17e	; 0xe17e <__cmpsf2>
    ada8:	87 fd       	sbrc	r24, 7
    adaa:	0f c0       	rjmp	.+30     	; 0xadca <LBLineIntersect+0x17c>
    adac:	11 e0       	ldi	r17, 0x01	; 1
    adae:	20 e0       	ldi	r18, 0x00	; 0
    adb0:	30 e0       	ldi	r19, 0x00	; 0
    adb2:	40 e8       	ldi	r20, 0x80	; 128
    adb4:	5f e3       	ldi	r21, 0x3F	; 63
    adb6:	c7 01       	movw	r24, r14
    adb8:	b6 01       	movw	r22, r12
    adba:	0e 94 0e 72 	call	0xe41c	; 0xe41c <__gesf2>
    adbe:	18 16       	cp	r1, r24
    adc0:	0c f0       	brlt	.+2      	; 0xadc4 <LBLineIntersect+0x176>
    adc2:	10 e0       	ldi	r17, 0x00	; 0
    adc4:	81 e0       	ldi	r24, 0x01	; 1
    adc6:	81 27       	eor	r24, r17
    adc8:	01 c0       	rjmp	.+2      	; 0xadcc <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    adca:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    adcc:	0f 90       	pop	r0
    adce:	0f 90       	pop	r0
    add0:	0f 90       	pop	r0
    add2:	0f 90       	pop	r0
    add4:	df 91       	pop	r29
    add6:	cf 91       	pop	r28
    add8:	1f 91       	pop	r17
    adda:	0f 91       	pop	r16
    addc:	ff 90       	pop	r15
    adde:	ef 90       	pop	r14
    ade0:	df 90       	pop	r13
    ade2:	cf 90       	pop	r12
    ade4:	bf 90       	pop	r11
    ade6:	af 90       	pop	r10
    ade8:	9f 90       	pop	r9
    adea:	8f 90       	pop	r8
    adec:	7f 90       	pop	r7
    adee:	6f 90       	pop	r6
    adf0:	5f 90       	pop	r5
    adf2:	4f 90       	pop	r4
    adf4:	3f 90       	pop	r3
    adf6:	2f 90       	pop	r2
    adf8:	08 95       	ret

0000adfa <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    adfa:	0f 93       	push	r16
    adfc:	1f 93       	push	r17
    adfe:	cf 93       	push	r28
    ae00:	df 93       	push	r29
    ae02:	8c 01       	movw	r16, r24
    ae04:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    ae06:	80 91 39 0b 	lds	r24, 0x0B39
    ae0a:	90 91 3a 0b 	lds	r25, 0x0B3A
    ae0e:	89 2b       	or	r24, r25
    ae10:	31 f4       	brne	.+12     	; 0xae1e <LBRandom+0x24>
    ae12:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <GetRandomSeed>
    ae16:	90 93 3a 0b 	sts	0x0B3A, r25
    ae1a:	80 93 39 0b 	sts	0x0B39, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    ae1e:	90 91 38 0b 	lds	r25, 0x0B38
    ae22:	20 91 39 0b 	lds	r18, 0x0B39
    ae26:	30 91 3a 0b 	lds	r19, 0x0B3A
    ae2a:	09 2e       	mov	r0, r25
    ae2c:	02 c0       	rjmp	.+4      	; 0xae32 <LBRandom+0x38>
    ae2e:	36 95       	lsr	r19
    ae30:	27 95       	ror	r18
    ae32:	0a 94       	dec	r0
    ae34:	e2 f7       	brpl	.-8      	; 0xae2e <LBRandom+0x34>
	unsigned int delta = to - from;
    ae36:	be 01       	movw	r22, r28
    ae38:	60 1b       	sub	r22, r16
    ae3a:	71 0b       	sbc	r23, r17

	shift_count++;
    ae3c:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    ae3e:	90 31       	cpi	r25, 0x10	; 16
    ae40:	18 f4       	brcc	.+6      	; 0xae48 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    ae42:	90 93 38 0b 	sts	0x0B38, r25
    ae46:	02 c0       	rjmp	.+4      	; 0xae4c <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    ae48:	10 92 38 0b 	sts	0x0B38, r1

	return from + ((delta + shifted) % delta);
    ae4c:	cb 01       	movw	r24, r22
    ae4e:	82 0f       	add	r24, r18
    ae50:	93 1f       	adc	r25, r19
    ae52:	0e 94 32 70 	call	0xe064	; 0xe064 <__udivmodhi4>
}
    ae56:	80 0f       	add	r24, r16
    ae58:	91 1f       	adc	r25, r17
    ae5a:	df 91       	pop	r29
    ae5c:	cf 91       	pop	r28
    ae5e:	1f 91       	pop	r17
    ae60:	0f 91       	pop	r16
    ae62:	08 95       	ret

0000ae64 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    ae64:	cf 93       	push	r28
    ae66:	df 93       	push	r29
    ae68:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    ae6a:	c0 e0       	ldi	r28, 0x00	; 0
    ae6c:	cd 17       	cp	r28, r29
    ae6e:	31 f0       	breq	.+12     	; 0xae7c <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    ae70:	8f ef       	ldi	r24, 0xFF	; 255
    ae72:	9f ef       	ldi	r25, 0xFF	; 255
    ae74:	0e 94 20 46 	call	0x8c40	; 0x8c40 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    ae78:	cf 5f       	subi	r28, 0xFF	; 255
    ae7a:	f8 cf       	rjmp	.-16     	; 0xae6c <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    ae7c:	df 91       	pop	r29
    ae7e:	cf 91       	pop	r28
    ae80:	08 95       	ret

0000ae82 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    ae82:	21 e9       	ldi	r18, 0x91	; 145
    ae84:	30 e0       	ldi	r19, 0x00	; 0
    ae86:	fc 01       	movw	r30, r24
    ae88:	21 93       	st	Z+, r18
    ae8a:	31 93       	st	Z+, r19
    ae8c:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    ae8e:	4e e1       	ldi	r20, 0x1E	; 30
    ae90:	50 e0       	ldi	r21, 0x00	; 0
    ae92:	6b e2       	ldi	r22, 0x2B	; 43
    ae94:	79 e0       	ldi	r23, 0x09	; 9
    ae96:	0c 94 75 72 	jmp	0xe4ea	; 0xe4ea <memcpy_P>

0000ae9a <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    ae9a:	20 e9       	ldi	r18, 0x90	; 144
    ae9c:	30 e0       	ldi	r19, 0x00	; 0
    ae9e:	fc 01       	movw	r30, r24
    aea0:	21 93       	st	Z+, r18
    aea2:	31 93       	st	Z+, r19
    aea4:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    aea6:	4e e1       	ldi	r20, 0x1E	; 30
    aea8:	50 e0       	ldi	r21, 0x00	; 0
    aeaa:	69 e4       	ldi	r22, 0x49	; 73
    aeac:	79 e0       	ldi	r23, 0x09	; 9
    aeae:	0c 94 75 72 	jmp	0xe4ea	; 0xe4ea <memcpy_P>

0000aeb2 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    aeb2:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    aeb4:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    aeb6:	16 86       	std	Z+14, r1	; 0x0e
    aeb8:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    aeba:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    aebc:	73 e0       	ldi	r23, 0x03	; 3
    aebe:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    aec0:	65 e0       	ldi	r22, 0x05	; 5
    aec2:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    aec4:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    aec6:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    aec8:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    aeca:	40 e3       	ldi	r20, 0x30	; 48
    aecc:	53 e8       	ldi	r21, 0x83	; 131
    aece:	50 87       	std	Z+8, r21	; 0x08
    aed0:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    aed2:	2d e2       	ldi	r18, 0x2D	; 45
    aed4:	33 e8       	ldi	r19, 0x83	; 131
    aed6:	32 87       	std	Z+10, r19	; 0x0a
    aed8:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    aeda:	8a e2       	ldi	r24, 0x2A	; 42
    aedc:	93 e8       	ldi	r25, 0x83	; 131
    aede:	94 87       	std	Z+12, r25	; 0x0c
    aee0:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    aee2:	14 8e       	std	Z+28, r1	; 0x1c
    aee4:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    aee6:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    aee8:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    aeea:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    aeec:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    aeee:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    aef0:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    aef2:	56 8b       	std	Z+22, r21	; 0x16
    aef4:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    aef6:	30 8f       	std	Z+24, r19	; 0x18
    aef8:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    aefa:	92 8f       	std	Z+26, r25	; 0x1a
    aefc:	81 8f       	std	Z+25, r24	; 0x19
    aefe:	08 95       	ret

0000af00 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    af00:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    af02:	15 86       	std	Z+13, r1	; 0x0d
    af04:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    af06:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    af08:	83 e0       	ldi	r24, 0x03	; 3
    af0a:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    af0c:	8e e1       	ldi	r24, 0x1E	; 30
    af0e:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    af10:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    af12:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    af14:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    af16:	86 e0       	ldi	r24, 0x06	; 6
    af18:	93 e8       	ldi	r25, 0x83	; 131
    af1a:	97 83       	std	Z+7, r25	; 0x07
    af1c:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    af1e:	83 e0       	ldi	r24, 0x03	; 3
    af20:	93 e8       	ldi	r25, 0x83	; 131
    af22:	91 87       	std	Z+9, r25	; 0x09
    af24:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    af26:	80 e0       	ldi	r24, 0x00	; 0
    af28:	93 e8       	ldi	r25, 0x83	; 131
    af2a:	93 87       	std	Z+11, r25	; 0x0b
    af2c:	82 87       	std	Z+10, r24	; 0x0a
    af2e:	08 95       	ret

0000af30 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    af30:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    af32:	15 86       	std	Z+13, r1	; 0x0d
    af34:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    af36:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    af38:	82 e0       	ldi	r24, 0x02	; 2
    af3a:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    af3c:	8c e3       	ldi	r24, 0x3C	; 60
    af3e:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    af40:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    af42:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    af44:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    af46:	84 e9       	ldi	r24, 0x94	; 148
    af48:	90 e8       	ldi	r25, 0x80	; 128
    af4a:	97 83       	std	Z+7, r25	; 0x07
    af4c:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    af4e:	8a ec       	ldi	r24, 0xCA	; 202
    af50:	91 e8       	ldi	r25, 0x81	; 129
    af52:	91 87       	std	Z+9, r25	; 0x09
    af54:	80 87       	std	Z+8, r24	; 0x08
    af56:	08 95       	ret

0000af58 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    af58:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    af5a:	88 e7       	ldi	r24, 0x78	; 120
    af5c:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    af5e:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    af60:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    af62:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    af64:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    af66:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    af68:	84 e0       	ldi	r24, 0x04	; 4
    af6a:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    af6c:	66 23       	and	r22, r22
    af6e:	11 f0       	breq	.+4      	; 0xaf74 <init_shot_state+0x1c>
    af70:	85 e0       	ldi	r24, 0x05	; 5
    af72:	01 c0       	rjmp	.+2      	; 0xaf76 <init_shot_state+0x1e>
    af74:	81 e0       	ldi	r24, 0x01	; 1
    af76:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    af78:	80 e0       	ldi	r24, 0x00	; 0
    af7a:	90 e0       	ldi	r25, 0x00	; 0
    af7c:	a0 e7       	ldi	r26, 0x70	; 112
    af7e:	b3 e4       	ldi	r27, 0x43	; 67
    af80:	83 83       	std	Z+3, r24	; 0x03
    af82:	94 83       	std	Z+4, r25	; 0x04
    af84:	a5 83       	std	Z+5, r26	; 0x05
    af86:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    af88:	17 82       	std	Z+7, r1	; 0x07
    af8a:	10 86       	std	Z+8, r1	; 0x08
    af8c:	11 86       	std	Z+9, r1	; 0x09
    af8e:	12 86       	std	Z+10, r1	; 0x0a
    af90:	08 95       	ret

0000af92 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    af92:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    af94:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    af96:	82 e0       	ldi	r24, 0x02	; 2
    af98:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    af9a:	85 e0       	ldi	r24, 0x05	; 5
    af9c:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    af9e:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    afa0:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    afa2:	15 8a       	std	Z+21, r1	; 0x15
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    afa4:	66 23       	and	r22, r22
    afa6:	19 f0       	breq	.+6      	; 0xafae <set_shot_animations+0x1c>
    afa8:	8b e9       	ldi	r24, 0x9B	; 155
    afaa:	99 e4       	ldi	r25, 0x49	; 73
    afac:	02 c0       	rjmp	.+4      	; 0xafb2 <set_shot_animations+0x20>
    afae:	8e e9       	ldi	r24, 0x9E	; 158
    afb0:	99 e4       	ldi	r25, 0x49	; 73
    afb2:	97 8b       	std	Z+23, r25	; 0x17
    afb4:	86 8b       	std	Z+22, r24	; 0x16
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    afb6:	66 23       	and	r22, r22
    afb8:	19 f0       	breq	.+6      	; 0xafc0 <set_shot_animations+0x2e>
    afba:	88 e9       	ldi	r24, 0x98	; 152
    afbc:	99 e4       	ldi	r25, 0x49	; 73
    afbe:	02 c0       	rjmp	.+4      	; 0xafc4 <set_shot_animations+0x32>
    afc0:	8e e9       	ldi	r24, 0x9E	; 158
    afc2:	99 e4       	ldi	r25, 0x49	; 73
    afc4:	91 8f       	std	Z+25, r25	; 0x19
    afc6:	80 8f       	std	Z+24, r24	; 0x18
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    afc8:	82 e0       	ldi	r24, 0x02	; 2
    afca:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    afcc:	85 e0       	ldi	r24, 0x05	; 5
    afce:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    afd0:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    afd2:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    afd4:	11 a2       	std	Z+33, r1	; 0x21
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    afd6:	66 23       	and	r22, r22
    afd8:	19 f0       	breq	.+6      	; 0xafe0 <set_shot_animations+0x4e>
    afda:	85 e9       	ldi	r24, 0x95	; 149
    afdc:	99 e4       	ldi	r25, 0x49	; 73
    afde:	02 c0       	rjmp	.+4      	; 0xafe4 <set_shot_animations+0x52>
    afe0:	8e e9       	ldi	r24, 0x9E	; 158
    afe2:	99 e4       	ldi	r25, 0x49	; 73
    afe4:	93 a3       	std	Z+35, r25	; 0x23
    afe6:	82 a3       	std	Z+34, r24	; 0x22
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    afe8:	66 23       	and	r22, r22
    afea:	19 f0       	breq	.+6      	; 0xaff2 <set_shot_animations+0x60>
    afec:	82 e9       	ldi	r24, 0x92	; 146
    afee:	99 e4       	ldi	r25, 0x49	; 73
    aff0:	02 c0       	rjmp	.+4      	; 0xaff6 <set_shot_animations+0x64>
    aff2:	8e e9       	ldi	r24, 0x9E	; 158
    aff4:	99 e4       	ldi	r25, 0x49	; 73
    aff6:	95 a3       	std	Z+37, r25	; 0x25
    aff8:	84 a3       	std	Z+36, r24	; 0x24
    affa:	08 95       	ret

0000affc <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    affc:	0f 93       	push	r16
    affe:	1f 93       	push	r17
    b000:	cf 93       	push	r28
    b002:	df 93       	push	r29
    b004:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    b006:	8a e5       	ldi	r24, 0x5A	; 90
    b008:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    b00a:	88 e7       	ldi	r24, 0x78	; 120
    b00c:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    b00e:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    b010:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    b012:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    b014:	18 82       	st	Y, r1
	p->shared.speed = 0;
    b016:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    b018:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    b01a:	82 e3       	ldi	r24, 0x32	; 50
    b01c:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    b01e:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    b020:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    b022:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    b024:	fe 01       	movw	r30, r28
    b026:	ec 5a       	subi	r30, 0xAC	; 172
    b028:	ff 4f       	sbci	r31, 0xFF	; 255
    b02a:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    b02c:	31 96       	adiw	r30, 0x01	; 1
    b02e:	91 e0       	ldi	r25, 0x01	; 1
    b030:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    b032:	31 96       	adiw	r30, 0x01	; 1
    b034:	85 e0       	ldi	r24, 0x05	; 5
    b036:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    b038:	31 96       	adiw	r30, 0x01	; 1
    b03a:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    b03c:	31 96       	adiw	r30, 0x01	; 1
    b03e:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    b040:	31 96       	adiw	r30, 0x01	; 1
    b042:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    b044:	31 96       	adiw	r30, 0x01	; 1
    b046:	71 83       	std	Z+1, r23	; 0x01
    b048:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    b04a:	36 96       	adiw	r30, 0x06	; 6
    b04c:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    b04e:	31 96       	adiw	r30, 0x01	; 1
    b050:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    b052:	31 96       	adiw	r30, 0x01	; 1
    b054:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    b056:	31 96       	adiw	r30, 0x01	; 1
    b058:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    b05a:	31 96       	adiw	r30, 0x01	; 1
    b05c:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    b05e:	31 96       	adiw	r30, 0x01	; 1
    b060:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    b062:	31 96       	adiw	r30, 0x01	; 1
    b064:	51 83       	std	Z+1, r21	; 0x01
    b066:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    b068:	36 96       	adiw	r30, 0x06	; 6
    b06a:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    b06c:	31 96       	adiw	r30, 0x01	; 1
    b06e:	93 e0       	ldi	r25, 0x03	; 3
    b070:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    b072:	31 96       	adiw	r30, 0x01	; 1
    b074:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    b076:	31 96       	adiw	r30, 0x01	; 1
    b078:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    b07a:	31 96       	adiw	r30, 0x01	; 1
    b07c:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    b07e:	31 96       	adiw	r30, 0x01	; 1
    b080:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    b082:	31 96       	adiw	r30, 0x01	; 1
    b084:	8d ea       	ldi	r24, 0xAD	; 173
    b086:	99 e4       	ldi	r25, 0x49	; 73
    b088:	91 83       	std	Z+1, r25	; 0x01
    b08a:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    b08c:	32 96       	adiw	r30, 0x02	; 2
    b08e:	87 ea       	ldi	r24, 0xA7	; 167
    b090:	99 e4       	ldi	r25, 0x49	; 73
    b092:	91 83       	std	Z+1, r25	; 0x01
    b094:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    b096:	32 96       	adiw	r30, 0x02	; 2
    b098:	81 ea       	ldi	r24, 0xA1	; 161
    b09a:	99 e4       	ldi	r25, 0x49	; 73
    b09c:	91 83       	std	Z+1, r25	; 0x01
    b09e:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    b0a0:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    b0a2:	8e 01       	movw	r16, r28
    b0a4:	04 5d       	subi	r16, 0xD4	; 212
    b0a6:	1f 4f       	sbci	r17, 0xFF	; 255
    b0a8:	60 e0       	ldi	r22, 0x00	; 0
    b0aa:	c8 01       	movw	r24, r16
    b0ac:	0e 94 ac 57 	call	0xaf58	; 0xaf58 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    b0b0:	60 e0       	ldi	r22, 0x00	; 0
    b0b2:	c8 01       	movw	r24, r16
    b0b4:	0e 94 c9 57 	call	0xaf92	; 0xaf92 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    b0b8:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    b0ba:	1d 8e       	std	Y+29, r1	; 0x1d
    b0bc:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    b0be:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    b0c0:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    b0c2:	1c a2       	std	Y+36, r1	; 0x24
    b0c4:	1d a2       	std	Y+37, r1	; 0x25
    b0c6:	1e a2       	std	Y+38, r1	; 0x26
    b0c8:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    b0ca:	18 a6       	std	Y+40, r1	; 0x28
    b0cc:	19 a6       	std	Y+41, r1	; 0x29
    b0ce:	1a a6       	std	Y+42, r1	; 0x2a
    b0d0:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    b0d2:	1f 8e       	std	Y+31, r1	; 0x1f
    b0d4:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    b0d6:	19 a2       	std	Y+33, r1	; 0x21
    b0d8:	18 a2       	std	Y+32, r1	; 0x20
}
    b0da:	df 91       	pop	r29
    b0dc:	cf 91       	pop	r28
    b0de:	1f 91       	pop	r17
    b0e0:	0f 91       	pop	r16
    b0e2:	08 95       	ret

0000b0e4 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    b0e4:	fc 01       	movw	r30, r24
    b0e6:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    b0e8:	60 e0       	ldi	r22, 0x00	; 0
    b0ea:	8c 96       	adiw	r24, 0x2c	; 44
    b0ec:	0c 94 ac 57 	jmp	0xaf58	; 0xaf58 <init_shot_state>

0000b0f0 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    b0f0:	eb e0       	ldi	r30, 0x0B	; 11
    b0f2:	fc e0       	ldi	r31, 0x0C	; 12
    b0f4:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    b0f6:	15 86       	std	Z+13, r1	; 0x0d
	game.paused = 0;
    b0f8:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    b0fa:	14 86       	std	Z+12, r1	; 0x0c
    b0fc:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    b0fe:	13 82       	std	Z+3, r1	; 0x03
	game.boss_turret_1_lives = BOSS_TURRET_LIVES;
    b100:	84 e0       	ldi	r24, 0x04	; 4
    b102:	84 83       	std	Z+4, r24	; 0x04
	game.boss_turret_2_lives = BOSS_TURRET_LIVES;
    b104:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player = 0;
    b106:	10 86       	std	Z+8, r1	; 0x08
    b108:	17 82       	std	Z+7, r1	; 0x07
	game.boss_fight_joypad = 0;
    b10a:	12 86       	std	Z+10, r1	; 0x0a
    b10c:	11 86       	std	Z+9, r1	; 0x09
	game.boss_fight_player_hud = 0;
    b10e:	16 82       	std	Z+6, r1	; 0x06
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    b110:	4f eb       	ldi	r20, 0xBF	; 191
    b112:	59 e4       	ldi	r21, 0x49	; 73
    b114:	65 ec       	ldi	r22, 0xC5	; 197
    b116:	79 e4       	ldi	r23, 0x49	; 73
    b118:	86 e3       	ldi	r24, 0x36	; 54
    b11a:	9c e0       	ldi	r25, 0x0C	; 12
    b11c:	0e 94 fe 57 	call	0xaffc	; 0xaffc <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    b120:	43 eb       	ldi	r20, 0xB3	; 179
    b122:	59 e4       	ldi	r21, 0x49	; 73
    b124:	69 eb       	ldi	r22, 0xB9	; 185
    b126:	79 e4       	ldi	r23, 0x49	; 73
    b128:	84 ea       	ldi	r24, 0xA4	; 164
    b12a:	9f e0       	ldi	r25, 0x0F	; 15
    b12c:	0c 94 fe 57 	jmp	0xaffc	; 0xaffc <init_player>

0000b130 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    b130:	cf 93       	push	r28
    b132:	df 93       	push	r29
    b134:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    b136:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    b138:	6a 89       	ldd	r22, Y+18	; 0x12
    b13a:	70 e0       	ldi	r23, 0x00	; 0
    b13c:	80 e0       	ldi	r24, 0x00	; 0
    b13e:	90 e0       	ldi	r25, 0x00	; 0
    b140:	0e 94 5c 71 	call	0xe2b8	; 0xe2b8 <__floatunsisf>
    b144:	6b 83       	std	Y+3, r22	; 0x03
    b146:	7c 83       	std	Y+4, r23	; 0x04
    b148:	8d 83       	std	Y+5, r24	; 0x05
    b14a:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    b14c:	6b 89       	ldd	r22, Y+19	; 0x13
    b14e:	70 e0       	ldi	r23, 0x00	; 0
    b150:	80 e0       	ldi	r24, 0x00	; 0
    b152:	90 e0       	ldi	r25, 0x00	; 0
    b154:	0e 94 5c 71 	call	0xe2b8	; 0xe2b8 <__floatunsisf>
    b158:	6f 83       	std	Y+7, r22	; 0x07
    b15a:	78 87       	std	Y+8, r23	; 0x08
    b15c:	89 87       	std	Y+9, r24	; 0x09
    b15e:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    b160:	18 82       	st	Y, r1
	player->shared.speed = 0;
    b162:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    b164:	1a 82       	std	Y+2, r1	; 0x02
	
}
    b166:	df 91       	pop	r29
    b168:	cf 91       	pop	r28
    b16a:	08 95       	ret

0000b16c <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b16c:	cf 93       	push	r28
    b16e:	df 93       	push	r29
    b170:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b172:	bc 01       	movw	r22, r24
    b174:	88 81       	ld	r24, Y
    b176:	99 81       	ldd	r25, Y+1	; 0x01
    b178:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <EepromReadBlock>
	if (status == 0x03)
    b17c:	83 30       	cpi	r24, 0x03	; 3
    b17e:	29 f4       	brne	.+10     	; 0xb18a <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b180:	ce 01       	movw	r24, r28
	}
}
    b182:	df 91       	pop	r29
    b184:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b186:	0c 94 05 47 	jmp	0x8e0a	; 0x8e0a <EepromWriteBlock>
	}
}
    b18a:	df 91       	pop	r29
    b18c:	cf 91       	pop	r28
    b18e:	08 95       	ret

0000b190 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b190:	61 e0       	ldi	r22, 0x01	; 1
    b192:	83 e0       	ldi	r24, 0x03	; 3
    b194:	0e 94 ef 54 	call	0xa9de	; 0xa9de <FadeOut>
	ClearVram();
    b198:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b19c:	60 e0       	ldi	r22, 0x00	; 0
    b19e:	83 e0       	ldi	r24, 0x03	; 3
    b1a0:	0c 94 e3 54 	jmp	0xa9c6	; 0xa9c6 <FadeIn>

0000b1a4 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    b1a4:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    b1a6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    b1a8:	40 e0       	ldi	r20, 0x00	; 0
    b1aa:	61 ed       	ldi	r22, 0xD1	; 209
    b1ac:	79 e4       	ldi	r23, 0x49	; 73
    b1ae:	8c 2f       	mov	r24, r28
    b1b0:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
    b1b4:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    b1b6:	ca 30       	cpi	r28, 0x0A	; 10
    b1b8:	b9 f7       	brne	.-18     	; 0xb1a8 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    b1ba:	cf 91       	pop	r28
    b1bc:	08 95       	ret

0000b1be <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    b1be:	cf 92       	push	r12
    b1c0:	df 92       	push	r13
    b1c2:	ff 92       	push	r15
    b1c4:	0f 93       	push	r16
    b1c6:	1f 93       	push	r17
    b1c8:	cf 93       	push	r28
    b1ca:	df 93       	push	r29
    b1cc:	cd b7       	in	r28, 0x3d	; 61
    b1ce:	de b7       	in	r29, 0x3e	; 62
    b1d0:	2a 97       	sbiw	r28, 0x0a	; 10
    b1d2:	0f b6       	in	r0, 0x3f	; 63
    b1d4:	f8 94       	cli
    b1d6:	de bf       	out	0x3e, r29	; 62
    b1d8:	0f be       	out	0x3f, r0	; 63
    b1da:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    b1dc:	90 91 45 0c 	lds	r25, 0x0C45
    b1e0:	80 91 b3 0f 	lds	r24, 0x0FB3
    b1e4:	98 17       	cp	r25, r24
    b1e6:	28 f4       	brcc	.+10     	; 0xb1f2 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    b1e8:	e6 e3       	ldi	r30, 0x36	; 54
    b1ea:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    b1ec:	a4 ea       	ldi	r26, 0xA4	; 164
    b1ee:	bf e0       	ldi	r27, 0x0F	; 15
    b1f0:	04 c0       	rjmp	.+8      	; 0xb1fa <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    b1f2:	e4 ea       	ldi	r30, 0xA4	; 164
    b1f4:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    b1f6:	a6 e3       	ldi	r26, 0x36	; 54
    b1f8:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    b1fa:	1b 96       	adiw	r26, 0x0b	; 11
    b1fc:	8c 91       	ld	r24, X
    b1fe:	1b 97       	sbiw	r26, 0x0b	; 11
    b200:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    b202:	83 85       	ldd	r24, Z+11	; 0x0b
    b204:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    b206:	1f 96       	adiw	r26, 0x0f	; 15
    b208:	8c 91       	ld	r24, X
    b20a:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    b20c:	97 85       	ldd	r25, Z+15	; 0x0f
    b20e:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = 0;
    b210:	1d 82       	std	Y+5, r1	; 0x05
	save_delta = p_win->score - p_lose->score;
    b212:	f8 2e       	mov	r15, r24
    b214:	f9 1a       	sub	r15, r25
    b216:	00 e0       	ldi	r16, 0x00	; 0
    b218:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    b21a:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    b21c:	81 11       	cpse	r24, r1
    b21e:	08 c0       	rjmp	.+16     	; 0xb230 <save_score+0x72>
    b220:	f8 01       	movw	r30, r16
    b222:	ec 53       	subi	r30, 0x3C	; 60
    b224:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    b226:	94 81       	ldd	r25, Z+4	; 0x04
    b228:	25 81       	ldd	r18, Z+5	; 0x05
    b22a:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    b22c:	9f 15       	cp	r25, r15
    b22e:	d0 f4       	brcc	.+52     	; 0xb264 <save_score+0xa6>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    b230:	45 e0       	ldi	r20, 0x05	; 5
    b232:	c8 01       	movw	r24, r16
    b234:	8a 53       	subi	r24, 0x3A	; 58
    b236:	94 4f       	sbci	r25, 0xF4	; 244
    b238:	6c 01       	movw	r12, r24
    b23a:	bc 01       	movw	r22, r24
    b23c:	ce 01       	movw	r24, r28
    b23e:	06 96       	adiw	r24, 0x06	; 6
    b240:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    b244:	45 e0       	ldi	r20, 0x05	; 5
    b246:	be 01       	movw	r22, r28
    b248:	6f 5f       	subi	r22, 0xFF	; 255
    b24a:	7f 4f       	sbci	r23, 0xFF	; 255
    b24c:	c6 01       	movw	r24, r12
    b24e:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    b252:	45 e0       	ldi	r20, 0x05	; 5
    b254:	be 01       	movw	r22, r28
    b256:	6a 5f       	subi	r22, 0xFA	; 250
    b258:	7f 4f       	sbci	r23, 0xFF	; 255
    b25a:	ce 01       	movw	r24, r28
    b25c:	01 96       	adiw	r24, 0x01	; 1
    b25e:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
				saved = 1;
    b262:	81 e0       	ldi	r24, 0x01	; 1
    b264:	0b 5f       	subi	r16, 0xFB	; 251
    b266:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    b268:	0e 31       	cpi	r16, 0x1E	; 30
    b26a:	11 05       	cpc	r17, r1
    b26c:	b9 f6       	brne	.-82     	; 0xb21c <save_score+0x5e>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b26e:	84 ec       	ldi	r24, 0xC4	; 196
    b270:	9b e0       	ldi	r25, 0x0B	; 11
    b272:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    b276:	2a 96       	adiw	r28, 0x0a	; 10
    b278:	0f b6       	in	r0, 0x3f	; 63
    b27a:	f8 94       	cli
    b27c:	de bf       	out	0x3e, r29	; 62
    b27e:	0f be       	out	0x3f, r0	; 63
    b280:	cd bf       	out	0x3d, r28	; 61
    b282:	df 91       	pop	r29
    b284:	cf 91       	pop	r28
    b286:	1f 91       	pop	r17
    b288:	0f 91       	pop	r16
    b28a:	ff 90       	pop	r15
    b28c:	df 90       	pop	r13
    b28e:	cf 90       	pop	r12
    b290:	08 95       	ret

0000b292 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    b292:	0f 93       	push	r16
    b294:	1f 93       	push	r17
    b296:	cf 93       	push	r28
    b298:	df 93       	push	r29
    b29a:	8c 01       	movw	r16, r24
    b29c:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    b29e:	88 81       	ld	r24, Y
    b2a0:	81 30       	cpi	r24, 0x01	; 1
    b2a2:	69 f1       	breq	.+90     	; 0xb2fe <position_shot+0x6c>
    b2a4:	98 f0       	brcs	.+38     	; 0xb2cc <position_shot+0x3a>
    b2a6:	82 30       	cpi	r24, 0x02	; 2
    b2a8:	f1 f1       	breq	.+124    	; 0xb326 <position_shot+0x94>
    b2aa:	83 30       	cpi	r24, 0x03	; 3
    b2ac:	09 f0       	breq	.+2      	; 0xb2b0 <position_shot+0x1e>
    b2ae:	59 c0       	rjmp	.+178    	; 0xb362 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    b2b0:	f8 01       	movw	r30, r16
    b2b2:	83 81       	ldd	r24, Z+3	; 0x03
    b2b4:	94 81       	ldd	r25, Z+4	; 0x04
    b2b6:	a5 81       	ldd	r26, Z+5	; 0x05
    b2b8:	b6 81       	ldd	r27, Z+6	; 0x06
    b2ba:	8b 83       	std	Y+3, r24	; 0x03
    b2bc:	9c 83       	std	Y+4, r25	; 0x04
    b2be:	ad 83       	std	Y+5, r26	; 0x05
    b2c0:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    b2c2:	20 e0       	ldi	r18, 0x00	; 0
    b2c4:	30 e0       	ldi	r19, 0x00	; 0
    b2c6:	40 e8       	ldi	r20, 0x80	; 128
    b2c8:	50 e4       	ldi	r21, 0x40	; 64
    b2ca:	41 c0       	rjmp	.+130    	; 0xb34e <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    b2cc:	20 e0       	ldi	r18, 0x00	; 0
    b2ce:	30 e0       	ldi	r19, 0x00	; 0
    b2d0:	40 e8       	ldi	r20, 0x80	; 128
    b2d2:	50 e4       	ldi	r21, 0x40	; 64
    b2d4:	f8 01       	movw	r30, r16
    b2d6:	63 81       	ldd	r22, Z+3	; 0x03
    b2d8:	74 81       	ldd	r23, Z+4	; 0x04
    b2da:	85 81       	ldd	r24, Z+5	; 0x05
    b2dc:	96 81       	ldd	r25, Z+6	; 0x06
    b2de:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    b2e2:	6b 83       	std	Y+3, r22	; 0x03
    b2e4:	7c 83       	std	Y+4, r23	; 0x04
    b2e6:	8d 83       	std	Y+5, r24	; 0x05
    b2e8:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    b2ea:	f8 01       	movw	r30, r16
    b2ec:	87 81       	ldd	r24, Z+7	; 0x07
    b2ee:	90 85       	ldd	r25, Z+8	; 0x08
    b2f0:	a1 85       	ldd	r26, Z+9	; 0x09
    b2f2:	b2 85       	ldd	r27, Z+10	; 0x0a
    b2f4:	8f 83       	std	Y+7, r24	; 0x07
    b2f6:	98 87       	std	Y+8, r25	; 0x08
    b2f8:	a9 87       	std	Y+9, r26	; 0x09
    b2fa:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    b2fc:	32 c0       	rjmp	.+100    	; 0xb362 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    b2fe:	20 e0       	ldi	r18, 0x00	; 0
    b300:	30 e0       	ldi	r19, 0x00	; 0
    b302:	40 e0       	ldi	r20, 0x00	; 0
    b304:	51 e4       	ldi	r21, 0x41	; 65
    b306:	f8 01       	movw	r30, r16
    b308:	63 81       	ldd	r22, Z+3	; 0x03
    b30a:	74 81       	ldd	r23, Z+4	; 0x04
    b30c:	85 81       	ldd	r24, Z+5	; 0x05
    b30e:	96 81       	ldd	r25, Z+6	; 0x06
    b310:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    b314:	6b 83       	std	Y+3, r22	; 0x03
    b316:	7c 83       	std	Y+4, r23	; 0x04
    b318:	8d 83       	std	Y+5, r24	; 0x05
    b31a:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    b31c:	20 e0       	ldi	r18, 0x00	; 0
    b31e:	30 e0       	ldi	r19, 0x00	; 0
    b320:	40 e8       	ldi	r20, 0x80	; 128
    b322:	50 e4       	ldi	r21, 0x40	; 64
    b324:	13 c0       	rjmp	.+38     	; 0xb34c <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    b326:	20 e0       	ldi	r18, 0x00	; 0
    b328:	30 e0       	ldi	r19, 0x00	; 0
    b32a:	40 e8       	ldi	r20, 0x80	; 128
    b32c:	50 e4       	ldi	r21, 0x40	; 64
    b32e:	f8 01       	movw	r30, r16
    b330:	63 81       	ldd	r22, Z+3	; 0x03
    b332:	74 81       	ldd	r23, Z+4	; 0x04
    b334:	85 81       	ldd	r24, Z+5	; 0x05
    b336:	96 81       	ldd	r25, Z+6	; 0x06
    b338:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    b33c:	6b 83       	std	Y+3, r22	; 0x03
    b33e:	7c 83       	std	Y+4, r23	; 0x04
    b340:	8d 83       	std	Y+5, r24	; 0x05
    b342:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    b344:	20 e0       	ldi	r18, 0x00	; 0
    b346:	30 e0       	ldi	r19, 0x00	; 0
    b348:	40 e0       	ldi	r20, 0x00	; 0
    b34a:	51 e4       	ldi	r21, 0x41	; 65
    b34c:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    b34e:	67 81       	ldd	r22, Z+7	; 0x07
    b350:	70 85       	ldd	r23, Z+8	; 0x08
    b352:	81 85       	ldd	r24, Z+9	; 0x09
    b354:	92 85       	ldd	r25, Z+10	; 0x0a
    b356:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    b35a:	6f 83       	std	Y+7, r22	; 0x07
    b35c:	78 87       	std	Y+8, r23	; 0x08
    b35e:	89 87       	std	Y+9, r24	; 0x09
    b360:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    b362:	df 91       	pop	r29
    b364:	cf 91       	pop	r28
    b366:	1f 91       	pop	r17
    b368:	0f 91       	pop	r16
    b36a:	08 95       	ret

0000b36c <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    b36c:	0f 93       	push	r16
    b36e:	1f 93       	push	r17
    b370:	cf 93       	push	r28
    b372:	df 93       	push	r29
    b374:	8c 01       	movw	r16, r24
    b376:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    b378:	ac 01       	movw	r20, r24
    b37a:	44 5f       	subi	r20, 0xF4	; 244
    b37c:	5f 4f       	sbci	r21, 0xFF	; 255
    b37e:	23 e0       	ldi	r18, 0x03	; 3
    b380:	6e e0       	ldi	r22, 0x0E	; 14
    b382:	84 e0       	ldi	r24, 0x04	; 4
    b384:	0e 94 cc 55 	call	0xab98	; 0xab98 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    b388:	49 ed       	ldi	r20, 0xD9	; 217
    b38a:	5a e0       	ldi	r21, 0x0A	; 10
    b38c:	6e e0       	ldi	r22, 0x0E	; 14
    b38e:	70 e0       	ldi	r23, 0x00	; 0
    b390:	88 e0       	ldi	r24, 0x08	; 8
    b392:	90 e0       	ldi	r25, 0x00	; 0
    b394:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    b398:	ae 01       	movw	r20, r28
    b39a:	44 5f       	subi	r20, 0xF4	; 244
    b39c:	5f 4f       	sbci	r21, 0xFF	; 255
    b39e:	23 e0       	ldi	r18, 0x03	; 3
    b3a0:	6e e0       	ldi	r22, 0x0E	; 14
    b3a2:	8d e0       	ldi	r24, 0x0D	; 13
    b3a4:	0e 94 cc 55 	call	0xab98	; 0xab98 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    b3a8:	46 ed       	ldi	r20, 0xD6	; 214
    b3aa:	5a e0       	ldi	r21, 0x0A	; 10
    b3ac:	6e e0       	ldi	r22, 0x0E	; 14
    b3ae:	70 e0       	ldi	r23, 0x00	; 0
    b3b0:	81 e1       	ldi	r24, 0x11	; 17
    b3b2:	90 e0       	ldi	r25, 0x00	; 0
    b3b4:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    b3b8:	21 e0       	ldi	r18, 0x01	; 1
    b3ba:	f8 01       	movw	r30, r16
    b3bc:	40 89       	ldd	r20, Z+16	; 0x10
    b3be:	6e e0       	ldi	r22, 0x0E	; 14
    b3c0:	70 e0       	ldi	r23, 0x00	; 0
    b3c2:	86 e1       	ldi	r24, 0x16	; 22
    b3c4:	90 e0       	ldi	r25, 0x00	; 0
    b3c6:	0e 94 36 54 	call	0xa86c	; 0xa86c <PrintByte>
	PrintChar(23, 14, '-');
    b3ca:	4d e2       	ldi	r20, 0x2D	; 45
    b3cc:	6e e0       	ldi	r22, 0x0E	; 14
    b3ce:	70 e0       	ldi	r23, 0x00	; 0
    b3d0:	87 e1       	ldi	r24, 0x17	; 23
    b3d2:	90 e0       	ldi	r25, 0x00	; 0
    b3d4:	0e 94 84 54 	call	0xa908	; 0xa908 <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    b3d8:	21 e0       	ldi	r18, 0x01	; 1
    b3da:	48 89       	ldd	r20, Y+16	; 0x10
    b3dc:	6e e0       	ldi	r22, 0x0E	; 14
    b3de:	70 e0       	ldi	r23, 0x00	; 0
    b3e0:	8a e1       	ldi	r24, 0x1A	; 26
    b3e2:	90 e0       	ldi	r25, 0x00	; 0
}
    b3e4:	df 91       	pop	r29
    b3e6:	cf 91       	pop	r28
    b3e8:	1f 91       	pop	r17
    b3ea:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    b3ec:	0c 94 36 54 	jmp	0xa86c	; 0xa86c <PrintByte>

0000b3f0 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    b3f0:	0f 93       	push	r16
    b3f2:	1f 93       	push	r17
    b3f4:	cf 93       	push	r28
    b3f6:	df 93       	push	r29
    b3f8:	8c 01       	movw	r16, r24
    b3fa:	eb 01       	movw	r28, r22
    Print(9, 13, (char*) strFinalScore);
    b3fc:	4a ec       	ldi	r20, 0xCA	; 202
    b3fe:	5a e0       	ldi	r21, 0x0A	; 10
    b400:	6d e0       	ldi	r22, 0x0D	; 13
    b402:	70 e0       	ldi	r23, 0x00	; 0
    b404:	89 e0       	ldi	r24, 0x09	; 9
    b406:	90 e0       	ldi	r25, 0x00	; 0
    b408:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    b40c:	a8 01       	movw	r20, r16
    b40e:	44 5f       	subi	r20, 0xF4	; 244
    b410:	5f 4f       	sbci	r21, 0xFF	; 255
    b412:	23 e0       	ldi	r18, 0x03	; 3
    b414:	6e e0       	ldi	r22, 0x0E	; 14
    b416:	84 e0       	ldi	r24, 0x04	; 4
    b418:	0e 94 cc 55 	call	0xab98	; 0xab98 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    b41c:	49 ed       	ldi	r20, 0xD9	; 217
    b41e:	5a e0       	ldi	r21, 0x0A	; 10
    b420:	6e e0       	ldi	r22, 0x0E	; 14
    b422:	70 e0       	ldi	r23, 0x00	; 0
    b424:	88 e0       	ldi	r24, 0x08	; 8
    b426:	90 e0       	ldi	r25, 0x00	; 0
    b428:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    b42c:	ae 01       	movw	r20, r28
    b42e:	44 5f       	subi	r20, 0xF4	; 244
    b430:	5f 4f       	sbci	r21, 0xFF	; 255
    b432:	23 e0       	ldi	r18, 0x03	; 3
    b434:	6e e0       	ldi	r22, 0x0E	; 14
    b436:	8d e0       	ldi	r24, 0x0D	; 13
    b438:	0e 94 cc 55 	call	0xab98	; 0xab98 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    b43c:	46 ed       	ldi	r20, 0xD6	; 214
    b43e:	5a e0       	ldi	r21, 0x0A	; 10
    b440:	6e e0       	ldi	r22, 0x0E	; 14
    b442:	70 e0       	ldi	r23, 0x00	; 0
    b444:	81 e1       	ldi	r24, 0x11	; 17
    b446:	90 e0       	ldi	r25, 0x00	; 0
    b448:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
    PrintByte(22, 14, winner->score ,true);
    b44c:	21 e0       	ldi	r18, 0x01	; 1
    b44e:	f8 01       	movw	r30, r16
    b450:	47 85       	ldd	r20, Z+15	; 0x0f
    b452:	6e e0       	ldi	r22, 0x0E	; 14
    b454:	70 e0       	ldi	r23, 0x00	; 0
    b456:	86 e1       	ldi	r24, 0x16	; 22
    b458:	90 e0       	ldi	r25, 0x00	; 0
    b45a:	0e 94 36 54 	call	0xa86c	; 0xa86c <PrintByte>
    PrintChar(23, 14, '-');
    b45e:	4d e2       	ldi	r20, 0x2D	; 45
    b460:	6e e0       	ldi	r22, 0x0E	; 14
    b462:	70 e0       	ldi	r23, 0x00	; 0
    b464:	87 e1       	ldi	r24, 0x17	; 23
    b466:	90 e0       	ldi	r25, 0x00	; 0
    b468:	0e 94 84 54 	call	0xa908	; 0xa908 <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    b46c:	21 e0       	ldi	r18, 0x01	; 1
    b46e:	4f 85       	ldd	r20, Y+15	; 0x0f
    b470:	6e e0       	ldi	r22, 0x0E	; 14
    b472:	70 e0       	ldi	r23, 0x00	; 0
    b474:	8a e1       	ldi	r24, 0x1A	; 26
    b476:	90 e0       	ldi	r25, 0x00	; 0
}
    b478:	df 91       	pop	r29
    b47a:	cf 91       	pop	r28
    b47c:	1f 91       	pop	r17
    b47e:	0f 91       	pop	r16
    Print(8, 14, (char*) strOwns);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, (char*) strBy);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    b480:	0c 94 36 54 	jmp	0xa86c	; 0xa86c <PrintByte>

0000b484 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    b484:	cf 93       	push	r28
    b486:	df 93       	push	r29
    b488:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    b48a:	ac 01       	movw	r20, r24
    b48c:	44 5f       	subi	r20, 0xF4	; 244
    b48e:	5f 4f       	sbci	r21, 0xFF	; 255
    b490:	23 e0       	ldi	r18, 0x03	; 3
    b492:	60 e0       	ldi	r22, 0x00	; 0
    b494:	8a e0       	ldi	r24, 0x0A	; 10
    b496:	8c 0f       	add	r24, r28
    b498:	0e 94 cc 55 	call	0xab98	; 0xab98 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    b49c:	d0 e0       	ldi	r29, 0x00	; 0
    b49e:	4e e1       	ldi	r20, 0x1E	; 30
    b4a0:	5a e0       	ldi	r21, 0x0A	; 10
    b4a2:	60 e0       	ldi	r22, 0x00	; 0
    b4a4:	70 e0       	ldi	r23, 0x00	; 0
    b4a6:	ce 01       	movw	r24, r28
    b4a8:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(x, 1, (char*) strTotal);
    b4ac:	47 e1       	ldi	r20, 0x17	; 23
    b4ae:	5a e0       	ldi	r21, 0x0A	; 10
    b4b0:	61 e0       	ldi	r22, 0x01	; 1
    b4b2:	70 e0       	ldi	r23, 0x00	; 0
    b4b4:	ce 01       	movw	r24, r28
	
}
    b4b6:	df 91       	pop	r29
    b4b8:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    b4ba:	0c 94 69 54 	jmp	0xa8d2	; 0xa8d2 <Print>

0000b4be <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    b4be:	0f 93       	push	r16
    b4c0:	1f 93       	push	r17
    b4c2:	cf 93       	push	r28
    b4c4:	df 93       	push	r29
    b4c6:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    b4c8:	c6 2f       	mov	r28, r22
    b4ca:	d0 e0       	ldi	r29, 0x00	; 0
    b4cc:	28 96       	adiw	r28, 0x08	; 8
    b4ce:	20 e0       	ldi	r18, 0x00	; 0
    b4d0:	fc 01       	movw	r30, r24
    b4d2:	40 89       	ldd	r20, Z+16	; 0x10
    b4d4:	60 e0       	ldi	r22, 0x00	; 0
    b4d6:	70 e0       	ldi	r23, 0x00	; 0
    b4d8:	ce 01       	movw	r24, r28
    b4da:	0e 94 36 54 	call	0xa86c	; 0xa86c <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    b4de:	20 e0       	ldi	r18, 0x00	; 0
    b4e0:	f8 01       	movw	r30, r16
    b4e2:	47 85       	ldd	r20, Z+15	; 0x0f
    b4e4:	61 e0       	ldi	r22, 0x01	; 1
    b4e6:	70 e0       	ldi	r23, 0x00	; 0
    b4e8:	ce 01       	movw	r24, r28
}
    b4ea:	df 91       	pop	r29
    b4ec:	cf 91       	pop	r28
    b4ee:	1f 91       	pop	r17
    b4f0:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    b4f2:	0c 94 36 54 	jmp	0xa86c	; 0xa86c <PrintByte>

0000b4f6 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    b4f6:	cf 93       	push	r28
    b4f8:	df 93       	push	r29
    b4fa:	ec 01       	movw	r28, r24
    b4fc:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    b4fe:	9d 89       	ldd	r25, Y+21	; 0x15
    b500:	9a 35       	cpi	r25, 0x5A	; 90
    b502:	99 f0       	breq	.+38     	; 0xb52a <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    b504:	91 11       	cpse	r25, r1
    b506:	0c c0       	rjmp	.+24     	; 0xb520 <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    b508:	4e 89       	ldd	r20, Y+22	; 0x16
    b50a:	9f e0       	ldi	r25, 0x0F	; 15
    b50c:	49 9f       	mul	r20, r25
    b50e:	a0 01       	movw	r20, r0
    b510:	11 24       	eor	r1, r1
    b512:	4c 5c       	subi	r20, 0xCC	; 204
    b514:	55 4f       	sbci	r21, 0xF5	; 245
    b516:	62 e0       	ldi	r22, 0x02	; 2
    b518:	70 e0       	ldi	r23, 0x00	; 0
    b51a:	90 e0       	ldi	r25, 0x00	; 0
    b51c:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    b520:	8d 89       	ldd	r24, Y+21	; 0x15
    b522:	8f 5f       	subi	r24, 0xFF	; 255
    b524:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    b526:	41 e0       	ldi	r20, 0x01	; 1
    b528:	0a c0       	rjmp	.+20     	; 0xb53e <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    b52a:	44 23       	and	r20, r20
    b52c:	41 f0       	breq	.+16     	; 0xb53e <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    b52e:	45 e2       	ldi	r20, 0x25	; 37
    b530:	5a e0       	ldi	r21, 0x0A	; 10
    b532:	62 e0       	ldi	r22, 0x02	; 2
    b534:	70 e0       	ldi	r23, 0x00	; 0
    b536:	90 e0       	ldi	r25, 0x00	; 0
    b538:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
    b53c:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    b53e:	84 2f       	mov	r24, r20
    b540:	df 91       	pop	r29
    b542:	cf 91       	pop	r28
    b544:	08 95       	ret

0000b546 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    b546:	ef 92       	push	r14
    b548:	ff 92       	push	r15
    b54a:	0f 93       	push	r16
    b54c:	1f 93       	push	r17
    b54e:	cf 93       	push	r28
    b550:	df 93       	push	r29
    b552:	1f 92       	push	r1
    b554:	cd b7       	in	r28, 0x3d	; 61
    b556:	de b7       	in	r29, 0x3e	; 62
    b558:	7c 01       	movw	r14, r24
    b55a:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    b55c:	fc 01       	movw	r30, r24
    b55e:	67 81       	ldd	r22, Z+7	; 0x07
    b560:	70 85       	ldd	r23, Z+8	; 0x08
    b562:	81 85       	ldd	r24, Z+9	; 0x09
    b564:	92 85       	ldd	r25, Z+10	; 0x0a
    b566:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    b56a:	46 2f       	mov	r20, r22
    b56c:	f7 01       	movw	r30, r14
    b56e:	63 81       	ldd	r22, Z+3	; 0x03
    b570:	74 81       	ldd	r23, Z+4	; 0x04
    b572:	85 81       	ldd	r24, Z+5	; 0x05
    b574:	96 81       	ldd	r25, Z+6	; 0x06
    b576:	49 83       	std	Y+1, r20	; 0x01
    b578:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    b57c:	02 e0       	ldi	r16, 0x02	; 2
    b57e:	22 e0       	ldi	r18, 0x02	; 2
    b580:	49 81       	ldd	r20, Y+1	; 0x01
    b582:	81 2f       	mov	r24, r17
    b584:	0e 94 ba 53 	call	0xa774	; 0xa774 <MoveSprite>
}
    b588:	0f 90       	pop	r0
    b58a:	df 91       	pop	r29
    b58c:	cf 91       	pop	r28
    b58e:	1f 91       	pop	r17
    b590:	0f 91       	pop	r16
    b592:	ff 90       	pop	r15
    b594:	ef 90       	pop	r14
    b596:	08 95       	ret

0000b598 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    b598:	ef 92       	push	r14
    b59a:	ff 92       	push	r15
    b59c:	0f 93       	push	r16
    b59e:	1f 93       	push	r17
    b5a0:	cf 93       	push	r28
    b5a2:	df 93       	push	r29
    b5a4:	1f 92       	push	r1
    b5a6:	cd b7       	in	r28, 0x3d	; 61
    b5a8:	de b7       	in	r29, 0x3e	; 62
    b5aa:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    b5ac:	81 89       	ldd	r24, Z+17	; 0x11
    b5ae:	88 23       	and	r24, r24
    b5b0:	b9 f0       	breq	.+46     	; 0xb5e0 <render_shot+0x48>
    b5b2:	16 2f       	mov	r17, r22
    b5b4:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    b5b6:	63 a9       	ldd	r22, Z+51	; 0x33
    b5b8:	74 a9       	ldd	r23, Z+52	; 0x34
    b5ba:	85 a9       	ldd	r24, Z+53	; 0x35
    b5bc:	96 a9       	ldd	r25, Z+54	; 0x36
    b5be:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    b5c2:	46 2f       	mov	r20, r22
    b5c4:	f7 01       	movw	r30, r14
    b5c6:	67 a5       	ldd	r22, Z+47	; 0x2f
    b5c8:	70 a9       	ldd	r23, Z+48	; 0x30
    b5ca:	81 a9       	ldd	r24, Z+49	; 0x31
    b5cc:	92 a9       	ldd	r25, Z+50	; 0x32
    b5ce:	49 83       	std	Y+1, r20	; 0x01
    b5d0:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    b5d4:	01 e0       	ldi	r16, 0x01	; 1
    b5d6:	21 e0       	ldi	r18, 0x01	; 1
    b5d8:	49 81       	ldd	r20, Y+1	; 0x01
    b5da:	81 2f       	mov	r24, r17
    b5dc:	0e 94 ba 53 	call	0xa774	; 0xa774 <MoveSprite>
			sprite_index++;
		}
	}
}
    b5e0:	0f 90       	pop	r0
    b5e2:	df 91       	pop	r29
    b5e4:	cf 91       	pop	r28
    b5e6:	1f 91       	pop	r17
    b5e8:	0f 91       	pop	r16
    b5ea:	ff 90       	pop	r15
    b5ec:	ef 90       	pop	r14
    b5ee:	08 95       	ret

0000b5f0 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    b5f0:	ef 92       	push	r14
    b5f2:	ff 92       	push	r15
    b5f4:	0f 93       	push	r16
    b5f6:	1f 93       	push	r17
    b5f8:	cf 93       	push	r28
    b5fa:	df 93       	push	r29
    b5fc:	ec 01       	movw	r28, r24
    b5fe:	25 96       	adiw	r28, 0x05	; 5
    b600:	8c 01       	movw	r16, r24
    b602:	0f 5d       	subi	r16, 0xDF	; 223
    b604:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    b606:	8e e1       	ldi	r24, 0x1E	; 30
    b608:	e8 2e       	mov	r14, r24
    b60a:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    b60c:	88 85       	ldd	r24, Y+8	; 0x08
    b60e:	99 85       	ldd	r25, Y+9	; 0x09
    b610:	89 2b       	or	r24, r25
    b612:	c1 f0       	breq	.+48     	; 0xb644 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    b614:	ce 01       	movw	r24, r28
    b616:	04 97       	sbiw	r24, 0x04	; 4
    b618:	0e 94 24 55 	call	0xaa48	; 0xaa48 <LBGetNextFrame>
    b61c:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    b61e:	48 81       	ld	r20, Y
    b620:	88 85       	ldd	r24, Y+8	; 0x08
    b622:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b624:	b7 01       	movw	r22, r14
    b626:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    b62a:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    b62c:	44 23       	and	r20, r20
    b62e:	39 f0       	breq	.+14     	; 0xb63e <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b630:	40 e0       	ldi	r20, 0x00	; 0
    b632:	50 e0       	ldi	r21, 0x00	; 0
    b634:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <SetTile>
				ta->anims[i].tile_index = 0;
    b638:	19 86       	std	Y+9, r1	; 0x09
    b63a:	18 86       	std	Y+8, r1	; 0x08
    b63c:	03 c0       	rjmp	.+6      	; 0xb644 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    b63e:	a9 01       	movw	r20, r18
    b640:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
    b644:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    b646:	c0 17       	cp	r28, r16
    b648:	d1 07       	cpc	r29, r17
    b64a:	01 f7       	brne	.-64     	; 0xb60c <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    b64c:	df 91       	pop	r29
    b64e:	cf 91       	pop	r28
    b650:	1f 91       	pop	r17
    b652:	0f 91       	pop	r16
    b654:	ff 90       	pop	r15
    b656:	ef 90       	pop	r14
    b658:	08 95       	ret

0000b65a <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    b65a:	cf 93       	push	r28
    b65c:	df 93       	push	r29
    b65e:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    b660:	0e 94 49 55 	call	0xaa92	; 0xaa92 <LBGetNextFrameReverse>
    b664:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    b666:	4c 81       	ldd	r20, Y+4	; 0x04
    b668:	8c 85       	ldd	r24, Y+12	; 0x0c
    b66a:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b66c:	6e e1       	ldi	r22, 0x1E	; 30
    b66e:	70 e0       	ldi	r23, 0x00	; 0
    b670:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    b674:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    b676:	44 23       	and	r20, r20
    b678:	19 f0       	breq	.+6      	; 0xb680 <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b67a:	4b e1       	ldi	r20, 0x1B	; 27
    b67c:	53 e8       	ldi	r21, 0x83	; 131
    b67e:	01 c0       	rjmp	.+2      	; 0xb682 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    b680:	a9 01       	movw	r20, r18
    b682:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
	}
	return ta->anim.looped;
}
    b686:	8c 81       	ldd	r24, Y+4	; 0x04
    b688:	df 91       	pop	r29
    b68a:	cf 91       	pop	r28
    b68c:	08 95       	ret

0000b68e <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    b68e:	1f 93       	push	r17
    b690:	cf 93       	push	r28
    b692:	df 93       	push	r29
    b694:	ec 01       	movw	r28, r24
    b696:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
    b698:	8c 89       	ldd	r24, Y+20	; 0x14
    b69a:	80 ff       	sbrs	r24, 0
    b69c:	17 c0       	rjmp	.+46     	; 0xb6cc <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    b69e:	ce 01       	movw	r24, r28
    b6a0:	84 59       	subi	r24, 0x94	; 148
    b6a2:	9f 4f       	sbci	r25, 0xFF	; 255
    b6a4:	0e 94 24 55 	call	0xaa48	; 0xaa48 <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    b6a8:	fe 01       	movw	r30, r28
    b6aa:	e0 59       	subi	r30, 0x90	; 144
    b6ac:	ff 4f       	sbci	r31, 0xFF	; 255
    b6ae:	20 81       	ld	r18, Z
    b6b0:	22 23       	and	r18, r18
    b6b2:	09 f4       	brne	.+2      	; 0xb6b6 <tank_map+0x28>
    b6b4:	4a c0       	rjmp	.+148    	; 0xb74a <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    b6b6:	8c 89       	ldd	r24, Y+20	; 0x14
    b6b8:	91 e0       	ldi	r25, 0x01	; 1
    b6ba:	98 27       	eor	r25, r24
    b6bc:	9c 8b       	std	Y+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    b6be:	ce 01       	movw	r24, r28
    b6c0:	0e 94 98 58 	call	0xb130	; 0xb130 <player_spawn>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b6c4:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    b6c6:	8b ec       	ldi	r24, 0xCB	; 203
    b6c8:	99 e4       	ldi	r25, 0x49	; 73
    b6ca:	40 c0       	rjmp	.+128    	; 0xb74c <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    b6cc:	9f 89       	ldd	r25, Y+23	; 0x17
    b6ce:	98 37       	cpi	r25, 0x78	; 120
    b6d0:	11 f0       	breq	.+4      	; 0xb6d6 <tank_map+0x48>
		{
			player->grace_frame++;
    b6d2:	9f 5f       	subi	r25, 0xFF	; 255
    b6d4:	9f 8b       	std	Y+23, r25	; 0x17
		}
		switch (player->shared.direction)
    b6d6:	98 81       	ld	r25, Y
    b6d8:	91 30       	cpi	r25, 0x01	; 1
    b6da:	61 f0       	breq	.+24     	; 0xb6f4 <tank_map+0x66>
    b6dc:	b0 f0       	brcs	.+44     	; 0xb70a <tank_map+0x7c>
    b6de:	92 30       	cpi	r25, 0x02	; 2
    b6e0:	69 f0       	breq	.+26     	; 0xb6fc <tank_map+0x6e>
    b6e2:	93 30       	cpi	r25, 0x03	; 3
    b6e4:	91 f4       	brne	.+36     	; 0xb70a <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    b6e6:	ce 01       	movw	r24, r28
    b6e8:	80 5a       	subi	r24, 0xA0	; 160
    b6ea:	9f 4f       	sbci	r25, 0xFF	; 255
    b6ec:	0e 94 24 55 	call	0xaa48	; 0xaa48 <LBGetNextFrame>
    b6f0:	41 e0       	ldi	r20, 0x01	; 1
    b6f2:	11 c0       	rjmp	.+34     	; 0xb716 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    b6f4:	ce 01       	movw	r24, r28
    b6f6:	80 5a       	subi	r24, 0xA0	; 160
    b6f8:	9f 4f       	sbci	r25, 0xFF	; 255
    b6fa:	0a c0       	rjmp	.+20     	; 0xb710 <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    b6fc:	ce 01       	movw	r24, r28
    b6fe:	8c 5a       	subi	r24, 0xAC	; 172
    b700:	9f 4f       	sbci	r25, 0xFF	; 255
    b702:	0e 94 24 55 	call	0xaa48	; 0xaa48 <LBGetNextFrame>
    b706:	42 e0       	ldi	r20, 0x02	; 2
    b708:	06 c0       	rjmp	.+12     	; 0xb716 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    b70a:	ce 01       	movw	r24, r28
    b70c:	8c 5a       	subi	r24, 0xAC	; 172
    b70e:	9f 4f       	sbci	r25, 0xFF	; 255
    b710:	0e 94 24 55 	call	0xaa48	; 0xaa48 <LBGetNextFrame>
    b714:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    b716:	2f 89       	ldd	r18, Y+23	; 0x17
    b718:	28 37       	cpi	r18, 0x78	; 120
    b71a:	31 f0       	breq	.+12     	; 0xb728 <tank_map+0x9a>
    b71c:	20 91 37 0b 	lds	r18, 0x0B37
    b720:	22 23       	and	r18, r18
    b722:	11 f0       	breq	.+4      	; 0xb728 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    b724:	8b ec       	ldi	r24, 0xCB	; 203
    b726:	99 e4       	ldi	r25, 0x49	; 73
		}
		toggle_counter--;
    b728:	20 91 03 01 	lds	r18, 0x0103
    b72c:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    b72e:	19 f0       	breq	.+6      	; 0xb736 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    b730:	20 93 03 01 	sts	0x0103, r18
    b734:	0b c0       	rjmp	.+22     	; 0xb74c <tank_map+0xbe>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    b736:	24 e1       	ldi	r18, 0x14	; 20
    b738:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    b73c:	30 91 37 0b 	lds	r19, 0x0B37
    b740:	21 e0       	ldi	r18, 0x01	; 1
    b742:	23 27       	eor	r18, r19
    b744:	20 93 37 0b 	sts	0x0B37, r18
    b748:	01 c0       	rjmp	.+2      	; 0xb74c <tank_map+0xbe>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b74a:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    b74c:	bc 01       	movw	r22, r24
    b74e:	81 2f       	mov	r24, r17
    b750:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    b754:	84 e0       	ldi	r24, 0x04	; 4
    b756:	81 0f       	add	r24, r17
    b758:	df 91       	pop	r29
    b75a:	cf 91       	pop	r28
    b75c:	1f 91       	pop	r17
    b75e:	08 95       	ret

0000b760 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    b760:	cf 93       	push	r28
    b762:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    b764:	fc 01       	movw	r30, r24
    b766:	22 ad       	ldd	r18, Z+58	; 0x3a
    b768:	22 23       	and	r18, r18
    b76a:	d9 f0       	breq	.+54     	; 0xb7a2 <shot_map+0x42>
		{
			switch (shot->shared.direction)
    b76c:	24 a5       	ldd	r18, Z+44	; 0x2c
    b76e:	21 30       	cpi	r18, 0x01	; 1
    b770:	59 f0       	breq	.+22     	; 0xb788 <shot_map+0x28>
    b772:	a8 f0       	brcs	.+42     	; 0xb79e <shot_map+0x3e>
    b774:	22 30       	cpi	r18, 0x02	; 2
    b776:	71 f0       	breq	.+28     	; 0xb794 <shot_map+0x34>
    b778:	23 30       	cpi	r18, 0x03	; 3
    b77a:	89 f4       	brne	.+34     	; 0xb79e <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    b77c:	88 5b       	subi	r24, 0xB8	; 184
    b77e:	9f 4f       	sbci	r25, 0xFF	; 255
    b780:	0e 94 24 55 	call	0xaa48	; 0xaa48 <LBGetNextFrame>
    b784:	41 e0       	ldi	r20, 0x01	; 1
    b786:	10 c0       	rjmp	.+32     	; 0xb7a8 <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    b788:	88 5b       	subi	r24, 0xB8	; 184
    b78a:	9f 4f       	sbci	r25, 0xFF	; 255
    b78c:	0e 94 24 55 	call	0xaa48	; 0xaa48 <LBGetNextFrame>
    b790:	40 e0       	ldi	r20, 0x00	; 0
    b792:	0a c0       	rjmp	.+20     	; 0xb7a8 <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    b794:	cc 96       	adiw	r24, 0x3c	; 60
    b796:	0e 94 24 55 	call	0xaa48	; 0xaa48 <LBGetNextFrame>
    b79a:	42 e0       	ldi	r20, 0x02	; 2
    b79c:	05 c0       	rjmp	.+10     	; 0xb7a8 <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    b79e:	cc 96       	adiw	r24, 0x3c	; 60
    b7a0:	f5 cf       	rjmp	.-22     	; 0xb78c <shot_map+0x2c>
    b7a2:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    b7a4:	8b ec       	ldi	r24, 0xCB	; 203
    b7a6:	99 e4       	ldi	r25, 0x49	; 73
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    b7a8:	bc 01       	movw	r22, r24
    b7aa:	8c 2f       	mov	r24, r28
    b7ac:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    b7b0:	81 e0       	ldi	r24, 0x01	; 1
    b7b2:	8c 0f       	add	r24, r28
    b7b4:	cf 91       	pop	r28
    b7b6:	08 95       	ret

0000b7b8 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    b7b8:	cf 93       	push	r28
    b7ba:	df 93       	push	r29
    b7bc:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    b7be:	88 81       	ld	r24, Y
    b7c0:	81 11       	cpse	r24, r1
    b7c2:	0b c0       	rjmp	.+22     	; 0xb7da <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    b7c4:	6f 81       	ldd	r22, Y+7	; 0x07
    b7c6:	78 85       	ldd	r23, Y+8	; 0x08
    b7c8:	89 85       	ldd	r24, Y+9	; 0x09
    b7ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    b7cc:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    b7d0:	66 95       	lsr	r22
    b7d2:	66 95       	lsr	r22
    b7d4:	66 95       	lsr	r22
    b7d6:	6f 5f       	subi	r22, 0xFF	; 255
    b7d8:	1d c0       	rjmp	.+58     	; 0xb814 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    b7da:	81 30       	cpi	r24, 0x01	; 1
    b7dc:	69 f4       	brne	.+26     	; 0xb7f8 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    b7de:	20 e0       	ldi	r18, 0x00	; 0
    b7e0:	30 e0       	ldi	r19, 0x00	; 0
    b7e2:	40 e0       	ldi	r20, 0x00	; 0
    b7e4:	5e e3       	ldi	r21, 0x3E	; 62
    b7e6:	6b 81       	ldd	r22, Y+3	; 0x03
    b7e8:	7c 81       	ldd	r23, Y+4	; 0x04
    b7ea:	8d 81       	ldd	r24, Y+5	; 0x05
    b7ec:	9e 81       	ldd	r25, Y+6	; 0x06
    b7ee:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    b7f2:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    b7f6:	27 c0       	rjmp	.+78     	; 0xb846 <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    b7f8:	82 30       	cpi	r24, 0x02	; 2
    b7fa:	d9 f4       	brne	.+54     	; 0xb832 <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    b7fc:	20 e0       	ldi	r18, 0x00	; 0
    b7fe:	30 e0       	ldi	r19, 0x00	; 0
    b800:	40 e0       	ldi	r20, 0x00	; 0
    b802:	5e e3       	ldi	r21, 0x3E	; 62
    b804:	6f 81       	ldd	r22, Y+7	; 0x07
    b806:	78 85       	ldd	r23, Y+8	; 0x08
    b808:	89 85       	ldd	r24, Y+9	; 0x09
    b80a:	9a 85       	ldd	r25, Y+10	; 0x0a
    b80c:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    b810:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
		sprite->y = tile * 8;
    b814:	88 e0       	ldi	r24, 0x08	; 8
    b816:	68 9f       	mul	r22, r24
    b818:	b0 01       	movw	r22, r0
    b81a:	11 24       	eor	r1, r1
    b81c:	88 27       	eor	r24, r24
    b81e:	77 fd       	sbrc	r23, 7
    b820:	80 95       	com	r24
    b822:	98 2f       	mov	r25, r24
    b824:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    b828:	6f 83       	std	Y+7, r22	; 0x07
    b82a:	78 87       	std	Y+8, r23	; 0x08
    b82c:	89 87       	std	Y+9, r24	; 0x09
    b82e:	9a 87       	std	Y+10, r25	; 0x0a
    b830:	18 c0       	rjmp	.+48     	; 0xb862 <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    b832:	6b 81       	ldd	r22, Y+3	; 0x03
    b834:	7c 81       	ldd	r23, Y+4	; 0x04
    b836:	8d 81       	ldd	r24, Y+5	; 0x05
    b838:	9e 81       	ldd	r25, Y+6	; 0x06
    b83a:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    b83e:	66 95       	lsr	r22
    b840:	66 95       	lsr	r22
    b842:	66 95       	lsr	r22
    b844:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    b846:	88 e0       	ldi	r24, 0x08	; 8
    b848:	68 9f       	mul	r22, r24
    b84a:	b0 01       	movw	r22, r0
    b84c:	11 24       	eor	r1, r1
    b84e:	88 27       	eor	r24, r24
    b850:	77 fd       	sbrc	r23, 7
    b852:	80 95       	com	r24
    b854:	98 2f       	mov	r25, r24
    b856:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    b85a:	6b 83       	std	Y+3, r22	; 0x03
    b85c:	7c 83       	std	Y+4, r23	; 0x04
    b85e:	8d 83       	std	Y+5, r24	; 0x05
    b860:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b862:	81 e0       	ldi	r24, 0x01	; 1
    b864:	8a 83       	std	Y+2, r24	; 0x02
}
    b866:	df 91       	pop	r29
    b868:	cf 91       	pop	r28
    b86a:	08 95       	ret

0000b86c <recoil_sprite_fine>:

void recoil_sprite_fine(SpriteShared* sprite)
{	
    b86c:	cf 93       	push	r28
    b86e:	df 93       	push	r29
    b870:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    b872:	88 81       	ld	r24, Y
    b874:	69 81       	ldd	r22, Y+1	; 0x01
	{
		sprite->y += FRAME_TIME * sprite->speed;
    b876:	70 e0       	ldi	r23, 0x00	; 0
	sprite->recoiled = 1;
}

void recoil_sprite_fine(SpriteShared* sprite)
{	
	if (sprite->direction == D_UP)
    b878:	81 11       	cpse	r24, r1
    b87a:	13 c0       	rjmp	.+38     	; 0xb8a2 <recoil_sprite_fine+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    b87c:	80 e0       	ldi	r24, 0x00	; 0
    b87e:	90 e0       	ldi	r25, 0x00	; 0
    b880:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    b884:	25 e6       	ldi	r18, 0x65	; 101
    b886:	38 e8       	ldi	r19, 0x88	; 136
    b888:	48 e8       	ldi	r20, 0x88	; 136
    b88a:	5c e3       	ldi	r21, 0x3C	; 60
    b88c:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    b890:	9b 01       	movw	r18, r22
    b892:	ac 01       	movw	r20, r24
    b894:	6f 81       	ldd	r22, Y+7	; 0x07
    b896:	78 85       	ldd	r23, Y+8	; 0x08
    b898:	89 85       	ldd	r24, Y+9	; 0x09
    b89a:	9a 85       	ldd	r25, Y+10	; 0x0a
    b89c:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    b8a0:	29 c0       	rjmp	.+82     	; 0xb8f4 <recoil_sprite_fine+0x88>
	}
	else if (sprite->direction == D_RIGHT)
    b8a2:	81 30       	cpi	r24, 0x01	; 1
    b8a4:	99 f4       	brne	.+38     	; 0xb8cc <recoil_sprite_fine+0x60>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    b8a6:	80 e0       	ldi	r24, 0x00	; 0
    b8a8:	90 e0       	ldi	r25, 0x00	; 0
    b8aa:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    b8ae:	25 e6       	ldi	r18, 0x65	; 101
    b8b0:	38 e8       	ldi	r19, 0x88	; 136
    b8b2:	48 e8       	ldi	r20, 0x88	; 136
    b8b4:	5c e3       	ldi	r21, 0x3C	; 60
    b8b6:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    b8ba:	9b 01       	movw	r18, r22
    b8bc:	ac 01       	movw	r20, r24
    b8be:	6b 81       	ldd	r22, Y+3	; 0x03
    b8c0:	7c 81       	ldd	r23, Y+4	; 0x04
    b8c2:	8d 81       	ldd	r24, Y+5	; 0x05
    b8c4:	9e 81       	ldd	r25, Y+6	; 0x06
    b8c6:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    b8ca:	2b c0       	rjmp	.+86     	; 0xb922 <recoil_sprite_fine+0xb6>
	}
	else if (sprite->direction == D_DOWN)
    b8cc:	82 30       	cpi	r24, 0x02	; 2
    b8ce:	b9 f4       	brne	.+46     	; 0xb8fe <recoil_sprite_fine+0x92>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    b8d0:	80 e0       	ldi	r24, 0x00	; 0
    b8d2:	90 e0       	ldi	r25, 0x00	; 0
    b8d4:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    b8d8:	25 e6       	ldi	r18, 0x65	; 101
    b8da:	38 e8       	ldi	r19, 0x88	; 136
    b8dc:	48 e8       	ldi	r20, 0x88	; 136
    b8de:	5c e3       	ldi	r21, 0x3C	; 60
    b8e0:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    b8e4:	9b 01       	movw	r18, r22
    b8e6:	ac 01       	movw	r20, r24
    b8e8:	6f 81       	ldd	r22, Y+7	; 0x07
    b8ea:	78 85       	ldd	r23, Y+8	; 0x08
    b8ec:	89 85       	ldd	r24, Y+9	; 0x09
    b8ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    b8f0:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    b8f4:	6f 83       	std	Y+7, r22	; 0x07
    b8f6:	78 87       	std	Y+8, r23	; 0x08
    b8f8:	89 87       	std	Y+9, r24	; 0x09
    b8fa:	9a 87       	std	Y+10, r25	; 0x0a
    b8fc:	16 c0       	rjmp	.+44     	; 0xb92a <recoil_sprite_fine+0xbe>
	}
	else
	{
		sprite->x += FRAME_TIME * sprite->speed;
    b8fe:	80 e0       	ldi	r24, 0x00	; 0
    b900:	90 e0       	ldi	r25, 0x00	; 0
    b902:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    b906:	25 e6       	ldi	r18, 0x65	; 101
    b908:	38 e8       	ldi	r19, 0x88	; 136
    b90a:	48 e8       	ldi	r20, 0x88	; 136
    b90c:	5c e3       	ldi	r21, 0x3C	; 60
    b90e:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    b912:	9b 01       	movw	r18, r22
    b914:	ac 01       	movw	r20, r24
    b916:	6b 81       	ldd	r22, Y+3	; 0x03
    b918:	7c 81       	ldd	r23, Y+4	; 0x04
    b91a:	8d 81       	ldd	r24, Y+5	; 0x05
    b91c:	9e 81       	ldd	r25, Y+6	; 0x06
    b91e:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    b922:	6b 83       	std	Y+3, r22	; 0x03
    b924:	7c 83       	std	Y+4, r23	; 0x04
    b926:	8d 83       	std	Y+5, r24	; 0x05
    b928:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b92a:	81 e0       	ldi	r24, 0x01	; 1
    b92c:	8a 83       	std	Y+2, r24	; 0x02
}
    b92e:	df 91       	pop	r29
    b930:	cf 91       	pop	r28
    b932:	08 95       	ret

0000b934 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b934:	8b 54       	subi	r24, 0x4B	; 75
    b936:	93 4f       	sbci	r25, 0xF3	; 243
    b938:	fc 01       	movw	r30, r24
    b93a:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b93c:	81 30       	cpi	r24, 0x01	; 1
    b93e:	31 f0       	breq	.+12     	; 0xb94c <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    b940:	82 30       	cpi	r24, 0x02	; 2
    b942:	31 f0       	breq	.+12     	; 0xb950 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    b944:	87 33       	cpi	r24, 0x37	; 55
    b946:	31 f0       	breq	.+12     	; 0xb954 <solid_square_tile+0x20>

	return 0;
    b948:	80 e0       	ldi	r24, 0x00	; 0
    b94a:	08 95       	ret
    b94c:	81 e0       	ldi	r24, 0x01	; 1
    b94e:	08 95       	ret
    b950:	82 e0       	ldi	r24, 0x02	; 2
    b952:	08 95       	ret
    b954:	87 e3       	ldi	r24, 0x37	; 55
}
    b956:	08 95       	ret

0000b958 <solid_tile>:

u8 solid_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b958:	8b 54       	subi	r24, 0x4B	; 75
    b95a:	93 4f       	sbci	r25, 0xF3	; 243
    b95c:	fc 01       	movw	r30, r24
    b95e:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b960:	81 30       	cpi	r24, 0x01	; 1
    b962:	71 f0       	breq	.+28     	; 0xb980 <solid_tile+0x28>
	if (tile == L_METAL) return tile;
    b964:	82 30       	cpi	r24, 0x02	; 2
    b966:	71 f0       	breq	.+28     	; 0xb984 <solid_tile+0x2c>
	if (tile == L_FENCE) return tile;
    b968:	87 33       	cpi	r24, 0x37	; 55
    b96a:	71 f0       	breq	.+28     	; 0xb988 <solid_tile+0x30>
	if (tile == L_TL) return tile;
    b96c:	83 30       	cpi	r24, 0x03	; 3
    b96e:	71 f0       	breq	.+28     	; 0xb98c <solid_tile+0x34>
	if (tile == L_BR) return tile;
    b970:	86 30       	cpi	r24, 0x06	; 6
    b972:	71 f0       	breq	.+28     	; 0xb990 <solid_tile+0x38>
	if (tile == L_TR) return tile;
    b974:	84 30       	cpi	r24, 0x04	; 4
    b976:	71 f0       	breq	.+28     	; 0xb994 <solid_tile+0x3c>
	if (tile == L_BL) return tile;
    b978:	85 30       	cpi	r24, 0x05	; 5
    b97a:	71 f0       	breq	.+28     	; 0xb998 <solid_tile+0x40>

	return 0;
    b97c:	80 e0       	ldi	r24, 0x00	; 0
    b97e:	08 95       	ret
    b980:	81 e0       	ldi	r24, 0x01	; 1
    b982:	08 95       	ret
    b984:	82 e0       	ldi	r24, 0x02	; 2
    b986:	08 95       	ret
    b988:	87 e3       	ldi	r24, 0x37	; 55
    b98a:	08 95       	ret
    b98c:	83 e0       	ldi	r24, 0x03	; 3
    b98e:	08 95       	ret
    b990:	86 e0       	ldi	r24, 0x06	; 6
    b992:	08 95       	ret
    b994:	84 e0       	ldi	r24, 0x04	; 4
    b996:	08 95       	ret
    b998:	85 e0       	ldi	r24, 0x05	; 5
}
    b99a:	08 95       	ret

0000b99c <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b99c:	8b 54       	subi	r24, 0x4B	; 75
    b99e:	93 4f       	sbci	r25, 0xF3	; 243
    b9a0:	fc 01       	movw	r30, r24
    b9a2:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    b9a4:	83 30       	cpi	r24, 0x03	; 3
    b9a6:	41 f0       	breq	.+16     	; 0xb9b8 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    b9a8:	86 30       	cpi	r24, 0x06	; 6
    b9aa:	41 f0       	breq	.+16     	; 0xb9bc <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    b9ac:	84 30       	cpi	r24, 0x04	; 4
    b9ae:	41 f0       	breq	.+16     	; 0xb9c0 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    b9b0:	85 30       	cpi	r24, 0x05	; 5
    b9b2:	41 f0       	breq	.+16     	; 0xb9c4 <solid_directional_tile+0x28>
	
	return 0;
    b9b4:	80 e0       	ldi	r24, 0x00	; 0
    b9b6:	08 95       	ret
    b9b8:	83 e0       	ldi	r24, 0x03	; 3
    b9ba:	08 95       	ret
    b9bc:	86 e0       	ldi	r24, 0x06	; 6
    b9be:	08 95       	ret
    b9c0:	84 e0       	ldi	r24, 0x04	; 4
    b9c2:	08 95       	ret
    b9c4:	85 e0       	ldi	r24, 0x05	; 5
}
    b9c6:	08 95       	ret

0000b9c8 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    b9c8:	7f 92       	push	r7
    b9ca:	8f 92       	push	r8
    b9cc:	9f 92       	push	r9
    b9ce:	af 92       	push	r10
    b9d0:	bf 92       	push	r11
    b9d2:	cf 92       	push	r12
    b9d4:	df 92       	push	r13
    b9d6:	ef 92       	push	r14
    b9d8:	ff 92       	push	r15
    b9da:	0f 93       	push	r16
    b9dc:	1f 93       	push	r17
    b9de:	cf 93       	push	r28
    b9e0:	df 93       	push	r29
    b9e2:	b6 2e       	mov	r11, r22
    b9e4:	94 2e       	mov	r9, r20
    b9e6:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    b9e8:	fc 01       	movw	r30, r24
    b9ea:	eb 54       	subi	r30, 0x4B	; 75
    b9ec:	f3 4f       	sbci	r31, 0xF3	; 243
    b9ee:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    b9f0:	6e e1       	ldi	r22, 0x1E	; 30
    b9f2:	70 e0       	ldi	r23, 0x00	; 0
    b9f4:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    b9f8:	f8 2e       	mov	r15, r24
    b9fa:	ff 0c       	add	r15, r15
    b9fc:	ff 0c       	add	r15, r15
    b9fe:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    ba00:	6d 5f       	subi	r22, 0xFD	; 253
    ba02:	7f 4f       	sbci	r23, 0xFF	; 255
    ba04:	16 2f       	mov	r17, r22
    ba06:	11 0f       	add	r17, r17
    ba08:	11 0f       	add	r17, r17
    ba0a:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    ba0c:	83 e0       	ldi	r24, 0x03	; 3
    ba0e:	d8 16       	cp	r13, r24
    ba10:	19 f0       	breq	.+6      	; 0xba18 <collides_directional_tile+0x50>
    ba12:	86 e0       	ldi	r24, 0x06	; 6
    ba14:	d8 12       	cpse	r13, r24
    ba16:	31 c0       	rjmp	.+98     	; 0xba7a <collides_directional_tile+0xb2>
    ba18:	cf ef       	ldi	r28, 0xFF	; 255
    ba1a:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    ba1c:	c9 0d       	add	r28, r9
    ba1e:	27 e0       	ldi	r18, 0x07	; 7
    ba20:	72 2e       	mov	r7, r18
    ba22:	7f 0c       	add	r7, r15
    ba24:	37 e0       	ldi	r19, 0x07	; 7
    ba26:	83 2e       	mov	r8, r19
    ba28:	81 0e       	add	r8, r17
    ba2a:	ac 2e       	mov	r10, r28
    ba2c:	cb 2c       	mov	r12, r11
    ba2e:	e9 2c       	mov	r14, r9
    ba30:	0b 2d       	mov	r16, r11
    ba32:	21 2f       	mov	r18, r17
    ba34:	47 2d       	mov	r20, r7
    ba36:	68 2d       	mov	r22, r8
    ba38:	8f 2d       	mov	r24, r15
    ba3a:	0e 94 27 56 	call	0xac4e	; 0xac4e <LBLineIntersect>
    ba3e:	81 11       	cpse	r24, r1
    ba40:	58 c0       	rjmp	.+176    	; 0xbaf2 <collides_directional_tile+0x12a>
    ba42:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    ba44:	db 0d       	add	r29, r11
    ba46:	a9 2c       	mov	r10, r9
    ba48:	cd 2e       	mov	r12, r29
    ba4a:	21 2f       	mov	r18, r17
    ba4c:	47 2d       	mov	r20, r7
    ba4e:	68 2d       	mov	r22, r8
    ba50:	8f 2d       	mov	r24, r15
    ba52:	0e 94 27 56 	call	0xac4e	; 0xac4e <LBLineIntersect>
    ba56:	81 11       	cpse	r24, r1
    ba58:	4c c0       	rjmp	.+152    	; 0xbaf2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    ba5a:	ac 2e       	mov	r10, r28
    ba5c:	0d 2f       	mov	r16, r29
    ba5e:	21 2f       	mov	r18, r17
    ba60:	47 2d       	mov	r20, r7
    ba62:	68 2d       	mov	r22, r8
    ba64:	8f 2d       	mov	r24, r15
    ba66:	0e 94 27 56 	call	0xac4e	; 0xac4e <LBLineIntersect>
    ba6a:	81 11       	cpse	r24, r1
    ba6c:	42 c0       	rjmp	.+132    	; 0xbaf2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    ba6e:	ec 2e       	mov	r14, r28
    ba70:	0b 2d       	mov	r16, r11
    ba72:	21 2f       	mov	r18, r17
    ba74:	47 2d       	mov	r20, r7
    ba76:	68 2d       	mov	r22, r8
    ba78:	34 c0       	rjmp	.+104    	; 0xbae2 <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    ba7a:	8c ef       	ldi	r24, 0xFC	; 252
    ba7c:	8d 0d       	add	r24, r13
    ba7e:	82 30       	cpi	r24, 0x02	; 2
    ba80:	b0 f5       	brcc	.+108    	; 0xbaee <collides_directional_tile+0x126>
    ba82:	cf ef       	ldi	r28, 0xFF	; 255
    ba84:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    ba86:	c4 0f       	add	r28, r20
    ba88:	87 e0       	ldi	r24, 0x07	; 7
    ba8a:	78 2e       	mov	r7, r24
    ba8c:	71 0e       	add	r7, r17
    ba8e:	97 e0       	ldi	r25, 0x07	; 7
    ba90:	89 2e       	mov	r8, r25
    ba92:	8f 0c       	add	r8, r15
    ba94:	ac 2e       	mov	r10, r28
    ba96:	cb 2c       	mov	r12, r11
    ba98:	e4 2e       	mov	r14, r20
    ba9a:	0b 2d       	mov	r16, r11
    ba9c:	27 2d       	mov	r18, r7
    ba9e:	48 2d       	mov	r20, r8
    baa0:	61 2f       	mov	r22, r17
    baa2:	8f 2d       	mov	r24, r15
    baa4:	0e 94 27 56 	call	0xac4e	; 0xac4e <LBLineIntersect>
    baa8:	81 11       	cpse	r24, r1
    baaa:	23 c0       	rjmp	.+70     	; 0xbaf2 <collides_directional_tile+0x12a>
    baac:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    baae:	db 0d       	add	r29, r11
    bab0:	a9 2c       	mov	r10, r9
    bab2:	cd 2e       	mov	r12, r29
    bab4:	27 2d       	mov	r18, r7
    bab6:	48 2d       	mov	r20, r8
    bab8:	61 2f       	mov	r22, r17
    baba:	8f 2d       	mov	r24, r15
    babc:	0e 94 27 56 	call	0xac4e	; 0xac4e <LBLineIntersect>
    bac0:	81 11       	cpse	r24, r1
    bac2:	17 c0       	rjmp	.+46     	; 0xbaf2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    bac4:	ac 2e       	mov	r10, r28
    bac6:	0d 2f       	mov	r16, r29
    bac8:	27 2d       	mov	r18, r7
    baca:	48 2d       	mov	r20, r8
    bacc:	61 2f       	mov	r22, r17
    bace:	8f 2d       	mov	r24, r15
    bad0:	0e 94 27 56 	call	0xac4e	; 0xac4e <LBLineIntersect>
    bad4:	81 11       	cpse	r24, r1
    bad6:	0d c0       	rjmp	.+26     	; 0xbaf2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    bad8:	ec 2e       	mov	r14, r28
    bada:	0b 2d       	mov	r16, r11
    badc:	27 2d       	mov	r18, r7
    bade:	48 2d       	mov	r20, r8
    bae0:	61 2f       	mov	r22, r17
    bae2:	8f 2d       	mov	r24, r15
    bae4:	0e 94 27 56 	call	0xac4e	; 0xac4e <LBLineIntersect>
    bae8:	81 11       	cpse	r24, r1
    baea:	03 c0       	rjmp	.+6      	; 0xbaf2 <collides_directional_tile+0x12a>
    baec:	03 c0       	rjmp	.+6      	; 0xbaf4 <collides_directional_tile+0x12c>
	}
	
	return 0;
    baee:	80 e0       	ldi	r24, 0x00	; 0
    baf0:	01 c0       	rjmp	.+2      	; 0xbaf4 <collides_directional_tile+0x12c>
    baf2:	8d 2d       	mov	r24, r13
}
    baf4:	df 91       	pop	r29
    baf6:	cf 91       	pop	r28
    baf8:	1f 91       	pop	r17
    bafa:	0f 91       	pop	r16
    bafc:	ff 90       	pop	r15
    bafe:	ef 90       	pop	r14
    bb00:	df 90       	pop	r13
    bb02:	cf 90       	pop	r12
    bb04:	bf 90       	pop	r11
    bb06:	af 90       	pop	r10
    bb08:	9f 90       	pop	r9
    bb0a:	8f 90       	pop	r8
    bb0c:	7f 90       	pop	r7
    bb0e:	08 95       	ret

0000bb10 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    bb10:	8f 92       	push	r8
    bb12:	9f 92       	push	r9
    bb14:	af 92       	push	r10
    bb16:	cf 92       	push	r12
    bb18:	ef 92       	push	r14
    bb1a:	0f 93       	push	r16
    bb1c:	1f 93       	push	r17
    bb1e:	cf 93       	push	r28
    bb20:	df 93       	push	r29
    bb22:	4c 01       	movw	r8, r24
    bb24:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    bb26:	20 e0       	ldi	r18, 0x00	; 0
    bb28:	30 e0       	ldi	r19, 0x00	; 0
    bb2a:	40 e0       	ldi	r20, 0x00	; 0
    bb2c:	50 e4       	ldi	r21, 0x40	; 64
    bb2e:	6f 81       	ldd	r22, Y+7	; 0x07
    bb30:	78 85       	ldd	r23, Y+8	; 0x08
    bb32:	89 85       	ldd	r24, Y+9	; 0x09
    bb34:	9a 85       	ldd	r25, Y+10	; 0x0a
    bb36:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    bb3a:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    bb3e:	e6 2e       	mov	r14, r22
    bb40:	20 e0       	ldi	r18, 0x00	; 0
    bb42:	30 e0       	ldi	r19, 0x00	; 0
    bb44:	40 e0       	ldi	r20, 0x00	; 0
    bb46:	50 e4       	ldi	r21, 0x40	; 64
    bb48:	6b 81       	ldd	r22, Y+3	; 0x03
    bb4a:	7c 81       	ldd	r23, Y+4	; 0x04
    bb4c:	8d 81       	ldd	r24, Y+5	; 0x05
    bb4e:	9e 81       	ldd	r25, Y+6	; 0x06
    bb50:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    bb54:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    bb58:	06 2f       	mov	r16, r22
    bb5a:	20 e0       	ldi	r18, 0x00	; 0
    bb5c:	30 e0       	ldi	r19, 0x00	; 0
    bb5e:	40 e8       	ldi	r20, 0x80	; 128
    bb60:	5f e3       	ldi	r21, 0x3F	; 63
    bb62:	f4 01       	movw	r30, r8
    bb64:	67 81       	ldd	r22, Z+7	; 0x07
    bb66:	70 85       	ldd	r23, Z+8	; 0x08
    bb68:	81 85       	ldd	r24, Z+9	; 0x09
    bb6a:	92 85       	ldd	r25, Z+10	; 0x0a
    bb6c:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    bb70:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    bb74:	16 2f       	mov	r17, r22
    bb76:	20 e0       	ldi	r18, 0x00	; 0
    bb78:	30 e0       	ldi	r19, 0x00	; 0
    bb7a:	40 e8       	ldi	r20, 0x80	; 128
    bb7c:	5f e3       	ldi	r21, 0x3F	; 63
    bb7e:	f4 01       	movw	r30, r8
    bb80:	63 81       	ldd	r22, Z+3	; 0x03
    bb82:	74 81       	ldd	r23, Z+4	; 0x04
    bb84:	85 81       	ldd	r24, Z+5	; 0x05
    bb86:	96 81       	ldd	r25, Z+6	; 0x06
    bb88:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    bb8c:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    bb90:	86 2f       	mov	r24, r22
    bb92:	94 e0       	ldi	r25, 0x04	; 4
    bb94:	a9 2e       	mov	r10, r25
    bb96:	24 e0       	ldi	r18, 0x04	; 4
    bb98:	c2 2e       	mov	r12, r18
    bb9a:	2e e0       	ldi	r18, 0x0E	; 14
    bb9c:	4e e0       	ldi	r20, 0x0E	; 14
    bb9e:	61 2f       	mov	r22, r17
    bba0:	0e 94 fd 55 	call	0xabfa	; 0xabfa <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    bba4:	88 23       	and	r24, r24
    bba6:	41 f0       	breq	.+16     	; 0xbbb8 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    bba8:	f4 01       	movw	r30, r8
    bbaa:	87 89       	ldd	r24, Z+23	; 0x17
    bbac:	88 37       	cpi	r24, 0x78	; 120
    bbae:	21 f4       	brne	.+8      	; 0xbbb8 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    bbb0:	81 e0       	ldi	r24, 0x01	; 1
    bbb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    bbb4:	99 30       	cpi	r25, 0x09	; 9
    bbb6:	08 f4       	brcc	.+2      	; 0xbbba <player_shot+0xaa>
    bbb8:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    bbba:	df 91       	pop	r29
    bbbc:	cf 91       	pop	r28
    bbbe:	1f 91       	pop	r17
    bbc0:	0f 91       	pop	r16
    bbc2:	ef 90       	pop	r14
    bbc4:	cf 90       	pop	r12
    bbc6:	af 90       	pop	r10
    bbc8:	9f 90       	pop	r9
    bbca:	8f 90       	pop	r8
    bbcc:	08 95       	ret

0000bbce <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    bbce:	cf 92       	push	r12
    bbd0:	df 92       	push	r13
    bbd2:	ef 92       	push	r14
    bbd4:	ff 92       	push	r15
    bbd6:	cf 93       	push	r28
    bbd8:	df 93       	push	r29
    bbda:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    bbdc:	cb 80       	ldd	r12, Y+3	; 0x03
    bbde:	dc 80       	ldd	r13, Y+4	; 0x04
    bbe0:	ed 80       	ldd	r14, Y+5	; 0x05
    bbe2:	fe 80       	ldd	r15, Y+6	; 0x06
    bbe4:	20 e0       	ldi	r18, 0x00	; 0
    bbe6:	30 e0       	ldi	r19, 0x00	; 0
    bbe8:	a9 01       	movw	r20, r18
    bbea:	c7 01       	movw	r24, r14
    bbec:	b6 01       	movw	r22, r12
    bbee:	0e 94 bf 70 	call	0xe17e	; 0xe17e <__cmpsf2>
    bbf2:	87 fd       	sbrc	r24, 7
    bbf4:	31 c0       	rjmp	.+98     	; 0xbc58 <collision_detect_boundries+0x8a>
    bbf6:	20 e0       	ldi	r18, 0x00	; 0
    bbf8:	30 e0       	ldi	r19, 0x00	; 0
    bbfa:	40 e0       	ldi	r20, 0x00	; 0
    bbfc:	51 e4       	ldi	r21, 0x41	; 65
    bbfe:	c7 01       	movw	r24, r14
    bc00:	b6 01       	movw	r22, r12
    bc02:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    bc06:	20 e0       	ldi	r18, 0x00	; 0
    bc08:	30 e0       	ldi	r19, 0x00	; 0
    bc0a:	40 e7       	ldi	r20, 0x70	; 112
    bc0c:	53 e4       	ldi	r21, 0x43	; 67
    bc0e:	0e 94 0e 72 	call	0xe41c	; 0xe41c <__gesf2>
    bc12:	18 16       	cp	r1, r24
    bc14:	0c f1       	brlt	.+66     	; 0xbc58 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    bc16:	cf 80       	ldd	r12, Y+7	; 0x07
    bc18:	d8 84       	ldd	r13, Y+8	; 0x08
    bc1a:	e9 84       	ldd	r14, Y+9	; 0x09
    bc1c:	fa 84       	ldd	r15, Y+10	; 0x0a
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    bc1e:	20 e0       	ldi	r18, 0x00	; 0
    bc20:	30 e0       	ldi	r19, 0x00	; 0
    bc22:	40 ec       	ldi	r20, 0xC0	; 192
    bc24:	51 e4       	ldi	r21, 0x41	; 65
    bc26:	c7 01       	movw	r24, r14
    bc28:	b6 01       	movw	r22, r12
    bc2a:	0e 94 bf 70 	call	0xe17e	; 0xe17e <__cmpsf2>
    bc2e:	87 fd       	sbrc	r24, 7
    bc30:	13 c0       	rjmp	.+38     	; 0xbc58 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    bc32:	20 e0       	ldi	r18, 0x00	; 0
    bc34:	30 e0       	ldi	r19, 0x00	; 0
    bc36:	40 e0       	ldi	r20, 0x00	; 0
    bc38:	51 e4       	ldi	r21, 0x41	; 65
    bc3a:	c7 01       	movw	r24, r14
    bc3c:	b6 01       	movw	r22, r12
    bc3e:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    bc42:	c1 e0       	ldi	r28, 0x01	; 1
    bc44:	20 e0       	ldi	r18, 0x00	; 0
    bc46:	30 e0       	ldi	r19, 0x00	; 0
    bc48:	40 e6       	ldi	r20, 0x60	; 96
    bc4a:	53 e4       	ldi	r21, 0x43	; 67
    bc4c:	0e 94 0e 72 	call	0xe41c	; 0xe41c <__gesf2>
    bc50:	18 16       	cp	r1, r24
    bc52:	1c f0       	brlt	.+6      	; 0xbc5a <collision_detect_boundries+0x8c>
    bc54:	c0 e0       	ldi	r28, 0x00	; 0
    bc56:	01 c0       	rjmp	.+2      	; 0xbc5a <collision_detect_boundries+0x8c>
	{
		return 1;
    bc58:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    bc5a:	8c 2f       	mov	r24, r28
    bc5c:	df 91       	pop	r29
    bc5e:	cf 91       	pop	r28
    bc60:	ff 90       	pop	r15
    bc62:	ef 90       	pop	r14
    bc64:	df 90       	pop	r13
    bc66:	cf 90       	pop	r12
    bc68:	08 95       	ret

0000bc6a <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    bc6a:	0f 93       	push	r16
    bc6c:	1f 93       	push	r17
    bc6e:	cf 93       	push	r28
    bc70:	9b 01       	movw	r18, r22
    bc72:	c4 2f       	mov	r28, r20
	if (level.level_map[tile_index] == L_EMPTY)
    bc74:	8c 01       	movw	r16, r24
    bc76:	0b 54       	subi	r16, 0x4B	; 75
    bc78:	13 4f       	sbci	r17, 0xF3	; 243
    bc7a:	f8 01       	movw	r30, r16
    bc7c:	41 81       	ldd	r20, Z+1	; 0x01
    bc7e:	41 11       	cpse	r20, r1
    bc80:	06 c0       	rjmp	.+12     	; 0xbc8e <drop_item+0x24>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30, map);
    bc82:	6e e1       	ldi	r22, 0x1E	; 30
    bc84:	70 e0       	ldi	r23, 0x00	; 0
    bc86:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    bc8a:	6d 5f       	subi	r22, 0xFD	; 253
    bc8c:	19 c0       	rjmp	.+50     	; 0xbcc0 <drop_item+0x56>
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    bc8e:	8c 01       	movw	r16, r24
    bc90:	0a 54       	subi	r16, 0x4A	; 74
    bc92:	13 4f       	sbci	r17, 0xF3	; 243
    bc94:	f8 01       	movw	r30, r16
    bc96:	41 81       	ldd	r20, Z+1	; 0x01
    bc98:	41 11       	cpse	r20, r1
    bc9a:	06 c0       	rjmp	.+12     	; 0xbca8 <drop_item+0x3e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30, map);
    bc9c:	6e e1       	ldi	r22, 0x1E	; 30
    bc9e:	70 e0       	ldi	r23, 0x00	; 0
    bca0:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    bca4:	6d 5f       	subi	r22, 0xFD	; 253
    bca6:	1a c0       	rjmp	.+52     	; 0xbcdc <drop_item+0x72>
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    bca8:	8c 01       	movw	r16, r24
    bcaa:	0d 52       	subi	r16, 0x2D	; 45
    bcac:	13 4f       	sbci	r17, 0xF3	; 243
    bcae:	f8 01       	movw	r30, r16
    bcb0:	41 81       	ldd	r20, Z+1	; 0x01
    bcb2:	41 11       	cpse	r20, r1
    bcb4:	07 c0       	rjmp	.+14     	; 0xbcc4 <drop_item+0x5a>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map);
    bcb6:	6e e1       	ldi	r22, 0x1E	; 30
    bcb8:	70 e0       	ldi	r23, 0x00	; 0
    bcba:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    bcbe:	6c 5f       	subi	r22, 0xFC	; 252
    bcc0:	a9 01       	movw	r20, r18
    bcc2:	0e c0       	rjmp	.+28     	; 0xbce0 <drop_item+0x76>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    bcc4:	8c 01       	movw	r16, r24
    bcc6:	0c 52       	subi	r16, 0x2C	; 44
    bcc8:	13 4f       	sbci	r17, 0xF3	; 243
    bcca:	f8 01       	movw	r30, r16
    bccc:	41 81       	ldd	r20, Z+1	; 0x01
    bcce:	41 11       	cpse	r20, r1
    bcd0:	0b c0       	rjmp	.+22     	; 0xbce8 <drop_item+0x7e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map);
    bcd2:	6e e1       	ldi	r22, 0x1E	; 30
    bcd4:	70 e0       	ldi	r23, 0x00	; 0
    bcd6:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    bcda:	6c 5f       	subi	r22, 0xFC	; 252
    bcdc:	a9 01       	movw	r20, r18
    bcde:	8f 5f       	subi	r24, 0xFF	; 255
    bce0:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
		level.level_map[tile_index+31] = item_type;
    bce4:	f8 01       	movw	r30, r16
    bce6:	c1 83       	std	Z+1, r28	; 0x01
	}
}
    bce8:	cf 91       	pop	r28
    bcea:	1f 91       	pop	r17
    bcec:	0f 91       	pop	r16
    bcee:	08 95       	ret

0000bcf0 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    bcf0:	ff 92       	push	r15
    bcf2:	0f 93       	push	r16
    bcf4:	1f 93       	push	r17
    bcf6:	cf 93       	push	r28
    bcf8:	df 93       	push	r29
    bcfa:	ec 01       	movw	r28, r24
    bcfc:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    bcfe:	20 e0       	ldi	r18, 0x00	; 0
    bd00:	30 e0       	ldi	r19, 0x00	; 0
    bd02:	40 e0       	ldi	r20, 0x00	; 0
    bd04:	5e e3       	ldi	r21, 0x3E	; 62
    bd06:	6f 81       	ldd	r22, Y+7	; 0x07
    bd08:	78 85       	ldd	r23, Y+8	; 0x08
    bd0a:	89 85       	ldd	r24, Y+9	; 0x09
    bd0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    bd0e:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    bd12:	20 e0       	ldi	r18, 0x00	; 0
    bd14:	30 e0       	ldi	r19, 0x00	; 0
    bd16:	40 e4       	ldi	r20, 0x40	; 64
    bd18:	50 e4       	ldi	r21, 0x40	; 64
    bd1a:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    bd1e:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    bd22:	8e e1       	ldi	r24, 0x1E	; 30
    bd24:	68 9f       	mul	r22, r24
    bd26:	80 01       	movw	r16, r0
    bd28:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    bd2a:	20 e0       	ldi	r18, 0x00	; 0
    bd2c:	30 e0       	ldi	r19, 0x00	; 0
    bd2e:	40 e0       	ldi	r20, 0x00	; 0
    bd30:	5e e3       	ldi	r21, 0x3E	; 62
    bd32:	6b 81       	ldd	r22, Y+3	; 0x03
    bd34:	7c 81       	ldd	r23, Y+4	; 0x04
    bd36:	8d 81       	ldd	r24, Y+5	; 0x05
    bd38:	9e 81       	ldd	r25, Y+6	; 0x06
    bd3a:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    bd3e:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    bd42:	06 0f       	add	r16, r22
    bd44:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    bd46:	8a 8d       	ldd	r24, Y+26	; 0x1a
    bd48:	88 23       	and	r24, r24
    bd4a:	79 f0       	breq	.+30     	; 0xbd6a <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    bd4c:	40 e0       	ldi	r20, 0x00	; 0
    bd4e:	50 e0       	ldi	r21, 0x00	; 0
    bd50:	61 e0       	ldi	r22, 0x01	; 1
    bd52:	8a e0       	ldi	r24, 0x0A	; 10
    bd54:	8f 0d       	add	r24, r15
    bd56:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    bd5a:	47 e0       	ldi	r20, 0x07	; 7
    bd5c:	69 e3       	ldi	r22, 0x39	; 57
    bd5e:	73 e8       	ldi	r23, 0x83	; 131
    bd60:	c8 01       	movw	r24, r16
    bd62:	0e 94 35 5e 	call	0xbc6a	; 0xbc6a <drop_item>
		player->max_speed = MAX_SPEED;
    bd66:	82 e3       	ldi	r24, 0x32	; 50
    bd68:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    bd6a:	89 8d       	ldd	r24, Y+25	; 0x19
    bd6c:	88 23       	and	r24, r24
    bd6e:	69 f0       	breq	.+26     	; 0xbd8a <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    bd70:	40 e0       	ldi	r20, 0x00	; 0
    bd72:	50 e0       	ldi	r21, 0x00	; 0
    bd74:	61 e0       	ldi	r22, 0x01	; 1
    bd76:	8b e0       	ldi	r24, 0x0B	; 11
    bd78:	8f 0d       	add	r24, r15
    bd7a:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    bd7e:	49 e0       	ldi	r20, 0x09	; 9
    bd80:	63 e3       	ldi	r22, 0x33	; 51
    bd82:	73 e8       	ldi	r23, 0x83	; 131
    bd84:	c8 01       	movw	r24, r16
    bd86:	0e 94 35 5e 	call	0xbc6a	; 0xbc6a <drop_item>
	}
	player->has_over_speed = false;
    bd8a:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    bd8c:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    bd8e:	8c 89       	ldd	r24, Y+20	; 0x14
    bd90:	81 60       	ori	r24, 0x01	; 1
    bd92:	8c 8b       	std	Y+20, r24	; 0x14
}
    bd94:	df 91       	pop	r29
    bd96:	cf 91       	pop	r28
    bd98:	1f 91       	pop	r17
    bd9a:	0f 91       	pop	r16
    bd9c:	ff 90       	pop	r15
    bd9e:	08 95       	ret

0000bda0 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    bda0:	fc 01       	movw	r30, r24
    bda2:	8e e1       	ldi	r24, 0x1E	; 30
    bda4:	48 9f       	mul	r20, r24
    bda6:	a0 01       	movw	r20, r0
    bda8:	11 24       	eor	r1, r1
    bdaa:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    bdac:	64 0f       	add	r22, r20
    bdae:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    bdb0:	21 11       	cpse	r18, r1
    bdb2:	05 c0       	rjmp	.+10     	; 0xbdbe <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    bdb4:	71 83       	std	Z+1, r23	; 0x01
    bdb6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    bdb8:	6f 5f       	subi	r22, 0xFF	; 255
    bdba:	7f 4f       	sbci	r23, 0xFF	; 255
    bdbc:	12 c0       	rjmp	.+36     	; 0xbde2 <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    bdbe:	21 30       	cpi	r18, 0x01	; 1
    bdc0:	19 f4       	brne	.+6      	; 0xbdc8 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    bdc2:	cb 01       	movw	r24, r22
    bdc4:	01 96       	adiw	r24, 0x01	; 1
    bdc6:	04 c0       	rjmp	.+8      	; 0xbdd0 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    bdc8:	22 30       	cpi	r18, 0x02	; 2
    bdca:	39 f4       	brne	.+14     	; 0xbdda <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    bdcc:	cb 01       	movw	r24, r22
    bdce:	4e 96       	adiw	r24, 0x1e	; 30
    bdd0:	91 83       	std	Z+1, r25	; 0x01
    bdd2:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    bdd4:	61 5e       	subi	r22, 0xE1	; 225
    bdd6:	7f 4f       	sbci	r23, 0xFF	; 255
    bdd8:	04 c0       	rjmp	.+8      	; 0xbde2 <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    bdda:	71 83       	std	Z+1, r23	; 0x01
    bddc:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    bdde:	62 5e       	subi	r22, 0xE2	; 226
    bde0:	7f 4f       	sbci	r23, 0xFF	; 255
    bde2:	73 83       	std	Z+3, r23	; 0x03
    bde4:	62 83       	std	Z+2, r22	; 0x02
    bde6:	08 95       	ret

0000bde8 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    bde8:	ef 92       	push	r14
    bdea:	ff 92       	push	r15
    bdec:	0f 93       	push	r16
    bdee:	1f 93       	push	r17
    bdf0:	cf 93       	push	r28
    bdf2:	df 93       	push	r29
    bdf4:	ec 01       	movw	r28, r24
    bdf6:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    bdf8:	8e e1       	ldi	r24, 0x1E	; 30
    bdfa:	e8 2e       	mov	r14, r24
    bdfc:	f1 2c       	mov	r15, r1
    bdfe:	cb 01       	movw	r24, r22
    be00:	b7 01       	movw	r22, r14
    be02:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    be06:	6d 5f       	subi	r22, 0xFD	; 253
    be08:	40 e0       	ldi	r20, 0x00	; 0
    be0a:	50 e0       	ldi	r21, 0x00	; 0
    be0c:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    be10:	88 81       	ld	r24, Y
    be12:	fe 01       	movw	r30, r28
    be14:	9e e0       	ldi	r25, 0x0E	; 14
    be16:	89 9f       	mul	r24, r25
    be18:	e0 0d       	add	r30, r0
    be1a:	f1 1d       	adc	r31, r1
    be1c:	11 24       	eor	r1, r1
    be1e:	85 85       	ldd	r24, Z+13	; 0x0d
    be20:	96 85       	ldd	r25, Z+14	; 0x0e
    be22:	00 97       	sbiw	r24, 0x00	; 0
    be24:	41 f0       	breq	.+16     	; 0xbe36 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    be26:	b7 01       	movw	r22, r14
    be28:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    be2c:	6d 5f       	subi	r22, 0xFD	; 253
    be2e:	40 e0       	ldi	r20, 0x00	; 0
    be30:	50 e0       	ldi	r21, 0x00	; 0
    be32:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    be36:	88 81       	ld	r24, Y
    be38:	fe 01       	movw	r30, r28
    be3a:	9e e0       	ldi	r25, 0x0E	; 14
    be3c:	89 9f       	mul	r24, r25
    be3e:	e0 0d       	add	r30, r0
    be40:	f1 1d       	adc	r31, r1
    be42:	11 24       	eor	r1, r1
    be44:	16 87       	std	Z+14, r17	; 0x0e
    be46:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    be48:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    be4a:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    be4c:	82 30       	cpi	r24, 0x02	; 2
    be4e:	11 f0       	breq	.+4      	; 0xbe54 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    be50:	88 83       	st	Y, r24
    be52:	01 c0       	rjmp	.+2      	; 0xbe56 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    be54:	18 82       	st	Y, r1
	}
}
    be56:	df 91       	pop	r29
    be58:	cf 91       	pop	r28
    be5a:	1f 91       	pop	r17
    be5c:	0f 91       	pop	r16
    be5e:	ff 90       	pop	r15
    be60:	ef 90       	pop	r14
    be62:	08 95       	ret

0000be64 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    be64:	fb 01       	movw	r30, r22
	switch (tile_type)
    be66:	84 30       	cpi	r24, 0x04	; 4
    be68:	71 f0       	breq	.+28     	; 0xbe86 <richochet+0x22>
    be6a:	18 f4       	brcc	.+6      	; 0xbe72 <richochet+0xe>
    be6c:	83 30       	cpi	r24, 0x03	; 3
    be6e:	31 f0       	breq	.+12     	; 0xbe7c <richochet+0x18>
    be70:	08 95       	ret
    be72:	85 30       	cpi	r24, 0x05	; 5
    be74:	99 f0       	breq	.+38     	; 0xbe9c <richochet+0x38>
    be76:	86 30       	cpi	r24, 0x06	; 6
    be78:	59 f0       	breq	.+22     	; 0xbe90 <richochet+0x2c>
    be7a:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    be7c:	80 81       	ld	r24, Z
    be7e:	8d 7f       	andi	r24, 0xFD	; 253
    be80:	29 f4       	brne	.+10     	; 0xbe8c <richochet+0x28>
				sprite->direction = D_RIGHT;
    be82:	81 e0       	ldi	r24, 0x01	; 1
    be84:	09 c0       	rjmp	.+18     	; 0xbe98 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    be86:	80 81       	ld	r24, Z
    be88:	8d 7f       	andi	r24, 0xFD	; 253
    be8a:	29 f0       	breq	.+10     	; 0xbe96 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    be8c:	82 e0       	ldi	r24, 0x02	; 2
    be8e:	04 c0       	rjmp	.+8      	; 0xbe98 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    be90:	80 81       	ld	r24, Z
    be92:	8d 7f       	andi	r24, 0xFD	; 253
    be94:	31 f4       	brne	.+12     	; 0xbea2 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    be96:	83 e0       	ldi	r24, 0x03	; 3
    be98:	80 83       	st	Z, r24
    be9a:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    be9c:	80 81       	ld	r24, Z
    be9e:	8d 7f       	andi	r24, 0xFD	; 253
    bea0:	81 f3       	breq	.-32     	; 0xbe82 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    bea2:	10 82       	st	Z, r1
    bea4:	08 95       	ret

0000bea6 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    bea6:	2f 92       	push	r2
    bea8:	3f 92       	push	r3
    beaa:	4f 92       	push	r4
    beac:	5f 92       	push	r5
    beae:	6f 92       	push	r6
    beb0:	7f 92       	push	r7
    beb2:	8f 92       	push	r8
    beb4:	9f 92       	push	r9
    beb6:	af 92       	push	r10
    beb8:	bf 92       	push	r11
    beba:	cf 92       	push	r12
    bebc:	df 92       	push	r13
    bebe:	ef 92       	push	r14
    bec0:	ff 92       	push	r15
    bec2:	0f 93       	push	r16
    bec4:	1f 93       	push	r17
    bec6:	cf 93       	push	r28
    bec8:	df 93       	push	r29
    beca:	00 d0       	rcall	.+0      	; 0xbecc <collision_detect_shot+0x26>
    becc:	00 d0       	rcall	.+0      	; 0xbece <collision_detect_shot+0x28>
    bece:	1f 92       	push	r1
    bed0:	cd b7       	in	r28, 0x3d	; 61
    bed2:	de b7       	in	r29, 0x3e	; 62
    bed4:	3c 01       	movw	r6, r24
    bed6:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    bed8:	1a 82       	std	Y+2, r1	; 0x02
    beda:	19 82       	std	Y+1, r1	; 0x01
    bedc:	1c 82       	std	Y+4, r1	; 0x04
    bede:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    bee0:	20 e0       	ldi	r18, 0x00	; 0
    bee2:	30 e0       	ldi	r19, 0x00	; 0
    bee4:	40 e0       	ldi	r20, 0x00	; 0
    bee6:	5e e3       	ldi	r21, 0x3E	; 62
    bee8:	db 01       	movw	r26, r22
    beea:	17 96       	adiw	r26, 0x07	; 7
    beec:	6d 91       	ld	r22, X+
    beee:	7d 91       	ld	r23, X+
    bef0:	8d 91       	ld	r24, X+
    bef2:	9c 91       	ld	r25, X
    bef4:	1a 97       	sbiw	r26, 0x0a	; 10
    bef6:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    befa:	20 e0       	ldi	r18, 0x00	; 0
    befc:	30 e0       	ldi	r19, 0x00	; 0
    befe:	40 e4       	ldi	r20, 0x40	; 64
    bf00:	50 e4       	ldi	r21, 0x40	; 64
    bf02:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    bf06:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    bf0a:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    bf0c:	20 e0       	ldi	r18, 0x00	; 0
    bf0e:	30 e0       	ldi	r19, 0x00	; 0
    bf10:	40 e0       	ldi	r20, 0x00	; 0
    bf12:	5e e3       	ldi	r21, 0x3E	; 62
    bf14:	f4 01       	movw	r30, r8
    bf16:	63 81       	ldd	r22, Z+3	; 0x03
    bf18:	74 81       	ldd	r23, Z+4	; 0x04
    bf1a:	85 81       	ldd	r24, Z+5	; 0x05
    bf1c:	96 81       	ldd	r25, Z+6	; 0x06
    bf1e:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    bf22:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    bf26:	d4 01       	movw	r26, r8
    bf28:	2c 91       	ld	r18, X
    bf2a:	41 2f       	mov	r20, r17
    bf2c:	ce 01       	movw	r24, r28
    bf2e:	01 96       	adiw	r24, 0x01	; 1
    bf30:	0e 94 d0 5e 	call	0xbda0	; 0xbda0 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    bf34:	c4 01       	movw	r24, r8
    bf36:	0e 94 e7 5d 	call	0xbbce	; 0xbbce <collision_detect_boundries>
    bf3a:	88 23       	and	r24, r24
    bf3c:	69 f0       	breq	.+26     	; 0xbf58 <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    bf3e:	f4 01       	movw	r30, r8
    bf40:	63 85       	ldd	r22, Z+11	; 0x0b
    bf42:	c4 01       	movw	r24, r8
    bf44:	0e 94 ac 57 	call	0xaf58	; 0xaf58 <init_shot_state>
		player->active_shots--;
    bf48:	d3 01       	movw	r26, r6
    bf4a:	51 96       	adiw	r26, 0x11	; 17
    bf4c:	8c 91       	ld	r24, X
    bf4e:	51 97       	sbiw	r26, 0x11	; 17
    bf50:	81 50       	subi	r24, 0x01	; 1
    bf52:	51 96       	adiw	r26, 0x11	; 17
    bf54:	8c 93       	st	X, r24
		return;
    bf56:	67 c1       	rjmp	.+718    	; 0xc226 <collision_detect_shot+0x380>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    bf58:	b4 01       	movw	r22, r8
    bf5a:	86 e3       	ldi	r24, 0x36	; 54
    bf5c:	9c e0       	ldi	r25, 0x0C	; 12
    bf5e:	0e 94 88 5d 	call	0xbb10	; 0xbb10 <player_shot>
    bf62:	88 23       	and	r24, r24
    bf64:	b9 f0       	breq	.+46     	; 0xbf94 <collision_detect_shot+0xee>
    bf66:	80 91 4a 0c 	lds	r24, 0x0C4A
    bf6a:	80 fd       	sbrc	r24, 0
    bf6c:	13 c0       	rjmp	.+38     	; 0xbf94 <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    bf6e:	80 91 b4 0f 	lds	r24, 0x0FB4
    bf72:	8f 5f       	subi	r24, 0xFF	; 255
    bf74:	80 93 b4 0f 	sts	0x0FB4, r24
		player2.score++;
    bf78:	80 91 b3 0f 	lds	r24, 0x0FB3
    bf7c:	8f 5f       	subi	r24, 0xFF	; 255
    bf7e:	80 93 b3 0f 	sts	0x0FB3, r24
		render_score(&player2, 15);
    bf82:	6f e0       	ldi	r22, 0x0F	; 15
    bf84:	84 ea       	ldi	r24, 0xA4	; 164
    bf86:	9f e0       	ldi	r25, 0x0F	; 15
    bf88:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    bf8c:	06 e3       	ldi	r16, 0x36	; 54
    bf8e:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    bf90:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    bf92:	2d c0       	rjmp	.+90     	; 0xbfee <collision_detect_shot+0x148>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    bf94:	b4 01       	movw	r22, r8
    bf96:	84 ea       	ldi	r24, 0xA4	; 164
    bf98:	9f e0       	ldi	r25, 0x0F	; 15
    bf9a:	0e 94 88 5d 	call	0xbb10	; 0xbb10 <player_shot>
    bf9e:	81 11       	cpse	r24, r1
    bfa0:	0b c0       	rjmp	.+22     	; 0xbfb8 <collision_detect_shot+0x112>
    bfa2:	fe 01       	movw	r30, r28
    bfa4:	31 96       	adiw	r30, 0x01	; 1
    bfa6:	2f 01       	movw	r4, r30
    bfa8:	1d 82       	std	Y+5, r1	; 0x05
    bfaa:	f1 2c       	mov	r15, r1
    bfac:	d1 2c       	mov	r13, r1
    bfae:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    bfb0:	6e e1       	ldi	r22, 0x1E	; 30
    bfb2:	26 2e       	mov	r2, r22
    bfb4:	31 2c       	mov	r3, r1
    bfb6:	62 c0       	rjmp	.+196    	; 0xc07c <collision_detect_shot+0x1d6>
		hud_x = 0;
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    bfb8:	80 91 b8 0f 	lds	r24, 0x0FB8
    bfbc:	80 fd       	sbrc	r24, 0
    bfbe:	f1 cf       	rjmp	.-30     	; 0xbfa2 <collision_detect_shot+0xfc>
    bfc0:	80 91 0e 0c 	lds	r24, 0x0C0E
    bfc4:	81 11       	cpse	r24, r1
    bfc6:	ed cf       	rjmp	.-38     	; 0xbfa2 <collision_detect_shot+0xfc>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    bfc8:	80 91 46 0c 	lds	r24, 0x0C46
    bfcc:	8f 5f       	subi	r24, 0xFF	; 255
    bfce:	80 93 46 0c 	sts	0x0C46, r24
		player1.score++;
    bfd2:	80 91 45 0c 	lds	r24, 0x0C45
    bfd6:	8f 5f       	subi	r24, 0xFF	; 255
    bfd8:	80 93 45 0c 	sts	0x0C45, r24
		render_score(&player1, 0);
    bfdc:	60 e0       	ldi	r22, 0x00	; 0
    bfde:	86 e3       	ldi	r24, 0x36	; 54
    bfe0:	9c e0       	ldi	r25, 0x0C	; 12
    bfe2:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    bfe6:	04 ea       	ldi	r16, 0xA4	; 164
    bfe8:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    bfea:	5f e0       	ldi	r21, 0x0F	; 15
    bfec:	f5 2e       	mov	r15, r21
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    bfee:	01 15       	cp	r16, r1
    bff0:	11 05       	cpc	r17, r1
    bff2:	b9 f2       	breq	.-82     	; 0xbfa2 <collision_detect_shot+0xfc>
	{
		init_shot_state(shot, shot->shot_type);
    bff4:	d4 01       	movw	r26, r8
    bff6:	1b 96       	adiw	r26, 0x0b	; 11
    bff8:	6c 91       	ld	r22, X
    bffa:	c4 01       	movw	r24, r8
    bffc:	0e 94 ac 57 	call	0xaf58	; 0xaf58 <init_shot_state>
		player->active_shots--;
    c000:	f3 01       	movw	r30, r6
    c002:	81 89       	ldd	r24, Z+17	; 0x11
    c004:	81 50       	subi	r24, 0x01	; 1
    c006:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    c008:	6f 2d       	mov	r22, r15
    c00a:	c8 01       	movw	r24, r16
    c00c:	0e 94 78 5e 	call	0xbcf0	; 0xbcf0 <kill_player>
		SFX_TANK_EXPLODE;
    c010:	2f ef       	ldi	r18, 0xFF	; 255
    c012:	40 e1       	ldi	r20, 0x10	; 16
    c014:	6a e0       	ldi	r22, 0x0A	; 10
    c016:	04 c1       	rjmp	.+520    	; 0xc220 <collision_detect_shot+0x37a>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    c018:	c5 01       	movw	r24, r10
    c01a:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <solid_directional_tile>
    c01e:	88 23       	and	r24, r24
    c020:	c1 f1       	breq	.+112    	; 0xc092 <collision_detect_shot+0x1ec>
    c022:	20 e0       	ldi	r18, 0x00	; 0
    c024:	30 e0       	ldi	r19, 0x00	; 0
    c026:	40 e0       	ldi	r20, 0x00	; 0
    c028:	50 e4       	ldi	r21, 0x40	; 64
    c02a:	f4 01       	movw	r30, r8
    c02c:	67 81       	ldd	r22, Z+7	; 0x07
    c02e:	70 85       	ldd	r23, Z+8	; 0x08
    c030:	81 85       	ldd	r24, Z+9	; 0x09
    c032:	92 85       	ldd	r25, Z+10	; 0x0a
    c034:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    c038:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c03c:	c6 2e       	mov	r12, r22
    c03e:	20 e0       	ldi	r18, 0x00	; 0
    c040:	30 e0       	ldi	r19, 0x00	; 0
    c042:	40 e0       	ldi	r20, 0x00	; 0
    c044:	50 e4       	ldi	r21, 0x40	; 64
    c046:	d4 01       	movw	r26, r8
    c048:	13 96       	adiw	r26, 0x03	; 3
    c04a:	6d 91       	ld	r22, X+
    c04c:	7d 91       	ld	r23, X+
    c04e:	8d 91       	ld	r24, X+
    c050:	9c 91       	ld	r25, X
    c052:	16 97       	sbiw	r26, 0x06	; 6
    c054:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    c058:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c05c:	04 e0       	ldi	r16, 0x04	; 4
    c05e:	24 e0       	ldi	r18, 0x04	; 4
    c060:	4c 2d       	mov	r20, r12
    c062:	c5 01       	movw	r24, r10
    c064:	0e 94 e4 5c 	call	0xb9c8	; 0xb9c8 <collides_directional_tile>
    c068:	88 23       	and	r24, r24
    c06a:	99 f0       	breq	.+38     	; 0xc092 <collision_detect_shot+0x1ec>
		{
			hit = hit | HIT_ANGLE;
    c06c:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    c06e:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    c070:	bd 81       	ldd	r27, Y+5	; 0x05
    c072:	b1 30       	cpi	r27, 0x01	; 1
    c074:	09 f4       	brne	.+2      	; 0xc078 <collision_detect_shot+0x1d2>
    c076:	88 c0       	rjmp	.+272    	; 0xc188 <collision_detect_shot+0x2e2>
    c078:	f1 e0       	ldi	r31, 0x01	; 1
    c07a:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    c07c:	d2 01       	movw	r26, r4
    c07e:	ad 90       	ld	r10, X+
    c080:	bd 90       	ld	r11, X+
    c082:	2d 01       	movw	r4, r26
    c084:	f5 01       	movw	r30, r10
    c086:	eb 54       	subi	r30, 0x4B	; 75
    c088:	f3 4f       	sbci	r31, 0xF3	; 243
    c08a:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    c08c:	ee 20       	and	r14, r14
    c08e:	81 f3       	breq	.-32     	; 0xc070 <collision_detect_shot+0x1ca>
    c090:	c3 cf       	rjmp	.-122    	; 0xc018 <collision_detect_shot+0x172>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c092:	b1 e0       	ldi	r27, 0x01	; 1
    c094:	eb 12       	cpse	r14, r27
    c096:	3b c0       	rjmp	.+118    	; 0xc10e <collision_detect_shot+0x268>
    c098:	c5 01       	movw	r24, r10
    c09a:	b1 01       	movw	r22, r2
    c09c:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    c0a0:	6d 5f       	subi	r22, 0xFD	; 253
    c0a2:	7f 4f       	sbci	r23, 0xFF	; 255
    c0a4:	e6 2e       	mov	r14, r22
    c0a6:	ee 0c       	add	r14, r14
    c0a8:	ee 0c       	add	r14, r14
    c0aa:	ee 0c       	add	r14, r14
    c0ac:	08 2f       	mov	r16, r24
    c0ae:	00 0f       	add	r16, r16
    c0b0:	00 0f       	add	r16, r16
    c0b2:	00 0f       	add	r16, r16
    c0b4:	20 e0       	ldi	r18, 0x00	; 0
    c0b6:	30 e0       	ldi	r19, 0x00	; 0
    c0b8:	40 e0       	ldi	r20, 0x00	; 0
    c0ba:	50 e4       	ldi	r21, 0x40	; 64
    c0bc:	f4 01       	movw	r30, r8
    c0be:	67 81       	ldd	r22, Z+7	; 0x07
    c0c0:	70 85       	ldd	r23, Z+8	; 0x08
    c0c2:	81 85       	ldd	r24, Z+9	; 0x09
    c0c4:	92 85       	ldd	r25, Z+10	; 0x0a
    c0c6:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    c0ca:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c0ce:	b6 2e       	mov	r11, r22
    c0d0:	20 e0       	ldi	r18, 0x00	; 0
    c0d2:	30 e0       	ldi	r19, 0x00	; 0
    c0d4:	40 e0       	ldi	r20, 0x00	; 0
    c0d6:	50 e4       	ldi	r21, 0x40	; 64
    c0d8:	d4 01       	movw	r26, r8
    c0da:	13 96       	adiw	r26, 0x03	; 3
    c0dc:	6d 91       	ld	r22, X+
    c0de:	7d 91       	ld	r23, X+
    c0e0:	8d 91       	ld	r24, X+
    c0e2:	9c 91       	ld	r25, X
    c0e4:	16 97       	sbiw	r26, 0x06	; 6
    c0e6:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    c0ea:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c0ee:	86 2f       	mov	r24, r22
    c0f0:	38 e0       	ldi	r19, 0x08	; 8
    c0f2:	a3 2e       	mov	r10, r19
    c0f4:	48 e0       	ldi	r20, 0x08	; 8
    c0f6:	c4 2e       	mov	r12, r20
    c0f8:	24 e0       	ldi	r18, 0x04	; 4
    c0fa:	44 e0       	ldi	r20, 0x04	; 4
    c0fc:	6b 2d       	mov	r22, r11
    c0fe:	0e 94 fd 55 	call	0xabfa	; 0xabfa <LBCollides>
    c102:	88 23       	and	r24, r24
    c104:	09 f4       	brne	.+2      	; 0xc108 <collision_detect_shot+0x262>
    c106:	b4 cf       	rjmp	.-152    	; 0xc070 <collision_detect_shot+0x1ca>
		{
			hit = hit | HIT_BRICK;
    c108:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    c10a:	dd 80       	ldd	r13, Y+5	; 0x05
    c10c:	b1 cf       	rjmp	.-158    	; 0xc070 <collision_detect_shot+0x1ca>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c10e:	b2 e0       	ldi	r27, 0x02	; 2
    c110:	eb 12       	cpse	r14, r27
    c112:	ae cf       	rjmp	.-164    	; 0xc070 <collision_detect_shot+0x1ca>
    c114:	c5 01       	movw	r24, r10
    c116:	b1 01       	movw	r22, r2
    c118:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    c11c:	6d 5f       	subi	r22, 0xFD	; 253
    c11e:	7f 4f       	sbci	r23, 0xFF	; 255
    c120:	e6 2e       	mov	r14, r22
    c122:	ee 0c       	add	r14, r14
    c124:	ee 0c       	add	r14, r14
    c126:	ee 0c       	add	r14, r14
    c128:	08 2f       	mov	r16, r24
    c12a:	00 0f       	add	r16, r16
    c12c:	00 0f       	add	r16, r16
    c12e:	00 0f       	add	r16, r16
    c130:	20 e0       	ldi	r18, 0x00	; 0
    c132:	30 e0       	ldi	r19, 0x00	; 0
    c134:	40 e0       	ldi	r20, 0x00	; 0
    c136:	50 e4       	ldi	r21, 0x40	; 64
    c138:	f4 01       	movw	r30, r8
    c13a:	67 81       	ldd	r22, Z+7	; 0x07
    c13c:	70 85       	ldd	r23, Z+8	; 0x08
    c13e:	81 85       	ldd	r24, Z+9	; 0x09
    c140:	92 85       	ldd	r25, Z+10	; 0x0a
    c142:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    c146:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c14a:	b6 2e       	mov	r11, r22
    c14c:	20 e0       	ldi	r18, 0x00	; 0
    c14e:	30 e0       	ldi	r19, 0x00	; 0
    c150:	40 e0       	ldi	r20, 0x00	; 0
    c152:	50 e4       	ldi	r21, 0x40	; 64
    c154:	d4 01       	movw	r26, r8
    c156:	13 96       	adiw	r26, 0x03	; 3
    c158:	6d 91       	ld	r22, X+
    c15a:	7d 91       	ld	r23, X+
    c15c:	8d 91       	ld	r24, X+
    c15e:	9c 91       	ld	r25, X
    c160:	16 97       	sbiw	r26, 0x06	; 6
    c162:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    c166:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c16a:	86 2f       	mov	r24, r22
    c16c:	98 e0       	ldi	r25, 0x08	; 8
    c16e:	a9 2e       	mov	r10, r25
    c170:	28 e0       	ldi	r18, 0x08	; 8
    c172:	c2 2e       	mov	r12, r18
    c174:	24 e0       	ldi	r18, 0x04	; 4
    c176:	44 e0       	ldi	r20, 0x04	; 4
    c178:	6b 2d       	mov	r22, r11
    c17a:	0e 94 fd 55 	call	0xabfa	; 0xabfa <LBCollides>
    c17e:	88 23       	and	r24, r24
    c180:	09 f4       	brne	.+2      	; 0xc184 <collision_detect_shot+0x2de>
    c182:	76 cf       	rjmp	.-276    	; 0xc070 <collision_detect_shot+0x1ca>
        {
		    hit = hit | HIT_METAL;
    c184:	11 60       	ori	r17, 0x01	; 1
    c186:	74 cf       	rjmp	.-280    	; 0xc070 <collision_detect_shot+0x1ca>
        }
	}
	
	if (hit & HIT_ANGLE)
    c188:	12 ff       	sbrs	r17, 2
    c18a:	0e c0       	rjmp	.+28     	; 0xc1a8 <collision_detect_shot+0x302>
	{
		recoil_sprite_fine(&shot->shared);
    c18c:	c4 01       	movw	r24, r8
    c18e:	0e 94 36 5c 	call	0xb86c	; 0xb86c <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    c192:	b4 01       	movw	r22, r8
    c194:	8f 2d       	mov	r24, r15
    c196:	0e 94 32 5f 	call	0xbe64	; 0xbe64 <richochet>
		shot->rebounds--;
    c19a:	f4 01       	movw	r30, r8
    c19c:	85 85       	ldd	r24, Z+13	; 0x0d
    c19e:	81 50       	subi	r24, 0x01	; 1
    c1a0:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    c1a2:	81 11       	cpse	r24, r1
    c1a4:	3a c0       	rjmp	.+116    	; 0xc21a <collision_detect_shot+0x374>
    c1a6:	2e c0       	rjmp	.+92     	; 0xc204 <collision_detect_shot+0x35e>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_METAL;
	}
	else if (hit & HIT_BRICK)
    c1a8:	11 ff       	sbrs	r17, 1
    c1aa:	29 c0       	rjmp	.+82     	; 0xc1fe <collision_detect_shot+0x358>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    c1ac:	fe 01       	movw	r30, r28
    c1ae:	31 96       	adiw	r30, 0x01	; 1
    c1b0:	7f 01       	movw	r14, r30
    c1b2:	ed 0c       	add	r14, r13
    c1b4:	f1 1c       	adc	r15, r1
    c1b6:	ed 0c       	add	r14, r13
    c1b8:	f1 1c       	adc	r15, r1
    c1ba:	d7 01       	movw	r26, r14
    c1bc:	6d 91       	ld	r22, X+
    c1be:	7c 91       	ld	r23, X
    c1c0:	89 e1       	ldi	r24, 0x19	; 25
    c1c2:	9c e0       	ldi	r25, 0x0C	; 12
    c1c4:	0e 94 f4 5e 	call	0xbde8	; 0xbde8 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    c1c8:	d7 01       	movw	r26, r14
    c1ca:	ed 91       	ld	r30, X+
    c1cc:	fc 91       	ld	r31, X
    c1ce:	eb 54       	subi	r30, 0x4B	; 75
    c1d0:	f3 4f       	sbci	r31, 0xF3	; 243
    c1d2:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    c1d4:	f4 01       	movw	r30, r8
    c1d6:	84 85       	ldd	r24, Z+12	; 0x0c
    c1d8:	81 50       	subi	r24, 0x01	; 1
    c1da:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    c1dc:	81 11       	cpse	r24, r1
    c1de:	0b c0       	rjmp	.+22     	; 0xc1f6 <collision_detect_shot+0x350>
		{
			init_shot_state(shot, shot->shot_type);
    c1e0:	63 85       	ldd	r22, Z+11	; 0x0b
    c1e2:	c4 01       	movw	r24, r8
    c1e4:	0e 94 ac 57 	call	0xaf58	; 0xaf58 <init_shot_state>
			player->active_shots--;
    c1e8:	d3 01       	movw	r26, r6
    c1ea:	51 96       	adiw	r26, 0x11	; 17
    c1ec:	8c 91       	ld	r24, X
    c1ee:	51 97       	sbiw	r26, 0x11	; 17
    c1f0:	81 50       	subi	r24, 0x01	; 1
    c1f2:	51 96       	adiw	r26, 0x11	; 17
    c1f4:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    c1f6:	2f ed       	ldi	r18, 0xDF	; 223
    c1f8:	47 e1       	ldi	r20, 0x17	; 23
    c1fa:	61 e0       	ldi	r22, 0x01	; 1
    c1fc:	11 c0       	rjmp	.+34     	; 0xc220 <collision_detect_shot+0x37a>
	}
	else if (hit & HIT_METAL)
    c1fe:	10 ff       	sbrs	r17, 0
    c200:	12 c0       	rjmp	.+36     	; 0xc226 <collision_detect_shot+0x380>
	{
        init_shot_state(shot, shot->shot_type);
    c202:	f4 01       	movw	r30, r8
    c204:	63 85       	ldd	r22, Z+11	; 0x0b
    c206:	c4 01       	movw	r24, r8
    c208:	0e 94 ac 57 	call	0xaf58	; 0xaf58 <init_shot_state>
        player->active_shots--;
    c20c:	d3 01       	movw	r26, r6
    c20e:	51 96       	adiw	r26, 0x11	; 17
    c210:	8c 91       	ld	r24, X
    c212:	51 97       	sbiw	r26, 0x11	; 17
    c214:	81 50       	subi	r24, 0x01	; 1
    c216:	51 96       	adiw	r26, 0x11	; 17
    c218:	8c 93       	st	X, r24
        SFX_METAL;
    c21a:	2f ef       	ldi	r18, 0xFF	; 255
    c21c:	47 e1       	ldi	r20, 0x17	; 23
    c21e:	66 e0       	ldi	r22, 0x06	; 6
    c220:	84 e0       	ldi	r24, 0x04	; 4
    c222:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
	}
}
    c226:	0f 90       	pop	r0
    c228:	0f 90       	pop	r0
    c22a:	0f 90       	pop	r0
    c22c:	0f 90       	pop	r0
    c22e:	0f 90       	pop	r0
    c230:	df 91       	pop	r29
    c232:	cf 91       	pop	r28
    c234:	1f 91       	pop	r17
    c236:	0f 91       	pop	r16
    c238:	ff 90       	pop	r15
    c23a:	ef 90       	pop	r14
    c23c:	df 90       	pop	r13
    c23e:	cf 90       	pop	r12
    c240:	bf 90       	pop	r11
    c242:	af 90       	pop	r10
    c244:	9f 90       	pop	r9
    c246:	8f 90       	pop	r8
    c248:	7f 90       	pop	r7
    c24a:	6f 90       	pop	r6
    c24c:	5f 90       	pop	r5
    c24e:	4f 90       	pop	r4
    c250:	3f 90       	pop	r3
    c252:	2f 90       	pop	r2
    c254:	08 95       	ret

0000c256 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    c256:	fc 01       	movw	r30, r24
    c258:	8e e1       	ldi	r24, 0x1E	; 30
    c25a:	48 9f       	mul	r20, r24
    c25c:	a0 01       	movw	r20, r0
    c25e:	11 24       	eor	r1, r1
    c260:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    c262:	64 0f       	add	r22, r20
    c264:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    c266:	21 11       	cpse	r18, r1
    c268:	09 c0       	rjmp	.+18     	; 0xc27c <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    c26a:	71 83       	std	Z+1, r23	; 0x01
    c26c:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    c26e:	cb 01       	movw	r24, r22
    c270:	01 96       	adiw	r24, 0x01	; 1
    c272:	93 83       	std	Z+3, r25	; 0x03
    c274:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c276:	6e 5f       	subi	r22, 0xFE	; 254
    c278:	7f 4f       	sbci	r23, 0xFF	; 255
    c27a:	1c c0       	rjmp	.+56     	; 0xc2b4 <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    c27c:	21 30       	cpi	r18, 0x01	; 1
    c27e:	31 f4       	brne	.+12     	; 0xc28c <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    c280:	cb 01       	movw	r24, r22
    c282:	02 96       	adiw	r24, 0x02	; 2
    c284:	91 83       	std	Z+1, r25	; 0x01
    c286:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    c288:	4e 96       	adiw	r24, 0x1e	; 30
    c28a:	07 c0       	rjmp	.+14     	; 0xc29a <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    c28c:	22 30       	cpi	r18, 0x02	; 2
    c28e:	51 f4       	brne	.+20     	; 0xc2a4 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    c290:	cb 01       	movw	r24, r22
    c292:	cc 96       	adiw	r24, 0x3c	; 60
    c294:	91 83       	std	Z+1, r25	; 0x01
    c296:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    c298:	01 96       	adiw	r24, 0x01	; 1
    c29a:	93 83       	std	Z+3, r25	; 0x03
    c29c:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c29e:	62 5c       	subi	r22, 0xC2	; 194
    c2a0:	7f 4f       	sbci	r23, 0xFF	; 255
    c2a2:	08 c0       	rjmp	.+16     	; 0xc2b4 <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    c2a4:	71 83       	std	Z+1, r23	; 0x01
    c2a6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    c2a8:	cb 01       	movw	r24, r22
    c2aa:	4e 96       	adiw	r24, 0x1e	; 30
    c2ac:	93 83       	std	Z+3, r25	; 0x03
    c2ae:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    c2b0:	64 5c       	subi	r22, 0xC4	; 196
    c2b2:	7f 4f       	sbci	r23, 0xFF	; 255
    c2b4:	75 83       	std	Z+5, r23	; 0x05
    c2b6:	64 83       	std	Z+4, r22	; 0x04
    c2b8:	08 95       	ret

0000c2ba <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    c2ba:	1f 93       	push	r17
    c2bc:	cf 93       	push	r28
    c2be:	df 93       	push	r29
    c2c0:	fc 01       	movw	r30, r24
    c2c2:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    c2c4:	54 96       	adiw	r26, 0x14	; 20
    c2c6:	8c 91       	ld	r24, X
    c2c8:	54 97       	sbiw	r26, 0x14	; 20
    c2ca:	80 fd       	sbrc	r24, 0
    c2cc:	13 c0       	rjmp	.+38     	; 0xc2f4 <explode_player+0x3a>
    c2ce:	12 2f       	mov	r17, r18
    c2d0:	64 2f       	mov	r22, r20
    c2d2:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    c2d4:	80 89       	ldd	r24, Z+16	; 0x10
    c2d6:	8f 5f       	subi	r24, 0xFF	; 255
    c2d8:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    c2da:	87 85       	ldd	r24, Z+15	; 0x0f
    c2dc:	8f 5f       	subi	r24, 0xFF	; 255
    c2de:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    c2e0:	cf 01       	movw	r24, r30
    c2e2:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <render_score>
		kill_player(other_player, other_player_hud_x);
    c2e6:	61 2f       	mov	r22, r17
    c2e8:	ce 01       	movw	r24, r28
	}
}
    c2ea:	df 91       	pop	r29
    c2ec:	cf 91       	pop	r28
    c2ee:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    c2f0:	0c 94 78 5e 	jmp	0xbcf0	; 0xbcf0 <kill_player>
	}
}
    c2f4:	df 91       	pop	r29
    c2f6:	cf 91       	pop	r28
    c2f8:	1f 91       	pop	r17
    c2fa:	08 95       	ret

0000c2fc <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    c2fc:	2f 92       	push	r2
    c2fe:	3f 92       	push	r3
    c300:	4f 92       	push	r4
    c302:	5f 92       	push	r5
    c304:	6f 92       	push	r6
    c306:	7f 92       	push	r7
    c308:	8f 92       	push	r8
    c30a:	9f 92       	push	r9
    c30c:	af 92       	push	r10
    c30e:	bf 92       	push	r11
    c310:	cf 92       	push	r12
    c312:	df 92       	push	r13
    c314:	ef 92       	push	r14
    c316:	ff 92       	push	r15
    c318:	0f 93       	push	r16
    c31a:	1f 93       	push	r17
    c31c:	cf 93       	push	r28
    c31e:	df 93       	push	r29
    c320:	cd b7       	in	r28, 0x3d	; 61
    c322:	de b7       	in	r29, 0x3e	; 62
    c324:	2b 97       	sbiw	r28, 0x0b	; 11
    c326:	0f b6       	in	r0, 0x3f	; 63
    c328:	f8 94       	cli
    c32a:	de bf       	out	0x3e, r29	; 62
    c32c:	0f be       	out	0x3f, r0	; 63
    c32e:	cd bf       	out	0x3d, r28	; 61
    c330:	4c 01       	movw	r8, r24
    c332:	06 2f       	mov	r16, r22
	int tiles[3] = {0,0,0};
    c334:	1a 82       	std	Y+2, r1	; 0x02
    c336:	19 82       	std	Y+1, r1	; 0x01
    c338:	1c 82       	std	Y+4, r1	; 0x04
    c33a:	1b 82       	std	Y+3, r1	; 0x03
    c33c:	1e 82       	std	Y+6, r1	; 0x06
    c33e:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    c340:	20 e0       	ldi	r18, 0x00	; 0
    c342:	30 e0       	ldi	r19, 0x00	; 0
    c344:	40 e0       	ldi	r20, 0x00	; 0
    c346:	5e e3       	ldi	r21, 0x3E	; 62
    c348:	dc 01       	movw	r26, r24
    c34a:	17 96       	adiw	r26, 0x07	; 7
    c34c:	6d 91       	ld	r22, X+
    c34e:	7d 91       	ld	r23, X+
    c350:	8d 91       	ld	r24, X+
    c352:	9c 91       	ld	r25, X
    c354:	1a 97       	sbiw	r26, 0x0a	; 10
    c356:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    c35a:	20 e0       	ldi	r18, 0x00	; 0
    c35c:	30 e0       	ldi	r19, 0x00	; 0
    c35e:	40 e4       	ldi	r20, 0x40	; 64
    c360:	50 e4       	ldi	r21, 0x40	; 64
    c362:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    c366:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c36a:	16 2f       	mov	r17, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    c36c:	20 e0       	ldi	r18, 0x00	; 0
    c36e:	30 e0       	ldi	r19, 0x00	; 0
    c370:	40 e0       	ldi	r20, 0x00	; 0
    c372:	5e e3       	ldi	r21, 0x3E	; 62
    c374:	f4 01       	movw	r30, r8
    c376:	63 81       	ldd	r22, Z+3	; 0x03
    c378:	74 81       	ldd	r23, Z+4	; 0x04
    c37a:	85 81       	ldd	r24, Z+5	; 0x05
    c37c:	96 81       	ldd	r25, Z+6	; 0x06
    c37e:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    c382:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	u8 hit_water = 0;
	char explode = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    c386:	d4 01       	movw	r26, r8
    c388:	2c 91       	ld	r18, X
    c38a:	41 2f       	mov	r20, r17
    c38c:	ce 01       	movw	r24, r28
    c38e:	01 96       	adiw	r24, 0x01	; 1
    c390:	0e 94 2b 61 	call	0xc256	; 0xc256 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c394:	c4 01       	movw	r24, r8
    c396:	0e 94 e7 5d 	call	0xbbce	; 0xbbce <collision_detect_boundries>
    c39a:	88 23       	and	r24, r24
    c39c:	39 f0       	breq	.+14     	; 0xc3ac <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    c39e:	c4 01       	movw	r24, r8
    c3a0:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <recoil_sprite>
		player->shared.speed = 0;
    c3a4:	f4 01       	movw	r30, r8
    c3a6:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    c3a8:	10 e0       	ldi	r17, 0x00	; 0
    c3aa:	36 c1       	rjmp	.+620    	; 0xc618 <collision_detect_player+0x31c>
    c3ac:	ce 01       	movw	r24, r28
    c3ae:	01 96       	adiw	r24, 0x01	; 1
    c3b0:	3c 01       	movw	r6, r24
    c3b2:	de 01       	movw	r26, r28
    c3b4:	17 96       	adiw	r26, 0x07	; 7
    c3b6:	b8 87       	std	Y+8, r27	; 0x08
    c3b8:	af 83       	std	Y+7, r26	; 0x07
	char explode = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c3ba:	10 e0       	ldi	r17, 0x00	; 0
    c3bc:	f1 2c       	mov	r15, r1
		}
		
		if (!hit_water)
		{
			player->max_speed = MAX_SPEED;
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    c3be:	51 e4       	ldi	r21, 0x41	; 65
    c3c0:	d5 2e       	mov	r13, r21
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    c3c2:	6e e1       	ldi	r22, 0x1E	; 30
    c3c4:	26 2e       	mov	r2, r22
    c3c6:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c3c8:	bb e0       	ldi	r27, 0x0B	; 11
    c3ca:	b0 0f       	add	r27, r16
    c3cc:	b9 87       	std	Y+9, r27	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c3ce:	06 5f       	subi	r16, 0xF6	; 246
    c3d0:	0a 87       	std	Y+10, r16	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    c3d2:	f3 01       	movw	r30, r6
    c3d4:	40 80       	ld	r4, Z
    c3d6:	51 80       	ldd	r5, Z+1	; 0x01
    c3d8:	c2 01       	movw	r24, r4
    c3da:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <solid_directional_tile>
    c3de:	88 23       	and	r24, r24
    c3e0:	49 f1       	breq	.+82     	; 0xc434 <collision_detect_player+0x138>
    c3e2:	d4 01       	movw	r26, r8
    c3e4:	17 96       	adiw	r26, 0x07	; 7
    c3e6:	6d 91       	ld	r22, X+
    c3e8:	7d 91       	ld	r23, X+
    c3ea:	8d 91       	ld	r24, X+
    c3ec:	9c 91       	ld	r25, X
    c3ee:	1a 97       	sbiw	r26, 0x0a	; 10
    c3f0:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c3f4:	46 2f       	mov	r20, r22
    c3f6:	f4 01       	movw	r30, r8
    c3f8:	63 81       	ldd	r22, Z+3	; 0x03
    c3fa:	74 81       	ldd	r23, Z+4	; 0x04
    c3fc:	85 81       	ldd	r24, Z+5	; 0x05
    c3fe:	96 81       	ldd	r25, Z+6	; 0x06
    c400:	4b 87       	std	Y+11, r20	; 0x0b
    c402:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c406:	00 e1       	ldi	r16, 0x10	; 16
    c408:	20 e1       	ldi	r18, 0x10	; 16
    c40a:	4b 85       	ldd	r20, Y+11	; 0x0b
    c40c:	c2 01       	movw	r24, r4
    c40e:	0e 94 e4 5c 	call	0xb9c8	; 0xb9c8 <collides_directional_tile>
    c412:	88 23       	and	r24, r24
    c414:	79 f0       	breq	.+30     	; 0xc434 <collision_detect_player+0x138>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(&player->shared);
    c416:	d4 01       	movw	r26, r8
    c418:	1b 96       	adiw	r26, 0x0b	; 11
    c41a:	8c 91       	ld	r24, X
    c41c:	89 30       	cpi	r24, 0x09	; 9
    c41e:	21 f4       	brne	.+8      	; 0xc428 <collision_detect_player+0x12c>
    c420:	c4 01       	movw	r24, r8
    c422:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <recoil_sprite>
    c426:	03 c0       	rjmp	.+6      	; 0xc42e <collision_detect_player+0x132>
    c428:	c4 01       	movw	r24, r8
    c42a:	0e 94 36 5c 	call	0xb86c	; 0xb86c <recoil_sprite_fine>
			player->shared.speed = 0;
    c42e:	f4 01       	movw	r30, r8
    c430:	11 82       	std	Z+1, r1	; 0x01
    c432:	dd c0       	rjmp	.+442    	; 0xc5ee <collision_detect_player+0x2f2>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    c434:	c2 01       	movw	r24, r4
    c436:	0e 94 9a 5c 	call	0xb934	; 0xb934 <solid_square_tile>
    c43a:	88 23       	and	r24, r24
    c43c:	91 f1       	breq	.+100    	; 0xc4a2 <collision_detect_player+0x1a6>
    c43e:	c2 01       	movw	r24, r4
    c440:	b1 01       	movw	r22, r2
    c442:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    c446:	6d 5f       	subi	r22, 0xFD	; 253
    c448:	7f 4f       	sbci	r23, 0xFF	; 255
    c44a:	e6 2e       	mov	r14, r22
    c44c:	ee 0c       	add	r14, r14
    c44e:	ee 0c       	add	r14, r14
    c450:	ee 0c       	add	r14, r14
    c452:	08 2f       	mov	r16, r24
    c454:	00 0f       	add	r16, r16
    c456:	00 0f       	add	r16, r16
    c458:	00 0f       	add	r16, r16
    c45a:	d4 01       	movw	r26, r8
    c45c:	17 96       	adiw	r26, 0x07	; 7
    c45e:	6d 91       	ld	r22, X+
    c460:	7d 91       	ld	r23, X+
    c462:	8d 91       	ld	r24, X+
    c464:	9c 91       	ld	r25, X
    c466:	1a 97       	sbiw	r26, 0x0a	; 10
    c468:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c46c:	b6 2e       	mov	r11, r22
    c46e:	f4 01       	movw	r30, r8
    c470:	63 81       	ldd	r22, Z+3	; 0x03
    c472:	74 81       	ldd	r23, Z+4	; 0x04
    c474:	85 81       	ldd	r24, Z+5	; 0x05
    c476:	96 81       	ldd	r25, Z+6	; 0x06
    c478:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c47c:	86 2f       	mov	r24, r22
    c47e:	38 e0       	ldi	r19, 0x08	; 8
    c480:	a3 2e       	mov	r10, r19
    c482:	48 e0       	ldi	r20, 0x08	; 8
    c484:	c4 2e       	mov	r12, r20
    c486:	20 e1       	ldi	r18, 0x10	; 16
    c488:	40 e1       	ldi	r20, 0x10	; 16
    c48a:	6b 2d       	mov	r22, r11
    c48c:	0e 94 fd 55 	call	0xabfa	; 0xabfa <LBCollides>
    c490:	88 23       	and	r24, r24
    c492:	39 f0       	breq	.+14     	; 0xc4a2 <collision_detect_player+0x1a6>
		{
			recoil_sprite(&player->shared);
    c494:	c4 01       	movw	r24, r8
    c496:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <recoil_sprite>
			player->shared.speed = 0;
    c49a:	d4 01       	movw	r26, r8
    c49c:	11 96       	adiw	r26, 0x01	; 1
    c49e:	1c 92       	st	X, r1
    c4a0:	a6 c0       	rjmp	.+332    	; 0xc5ee <collision_detect_player+0x2f2>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    c4a2:	f2 01       	movw	r30, r4
    c4a4:	eb 54       	subi	r30, 0x4B	; 75
    c4a6:	f3 4f       	sbci	r31, 0xF3	; 243
    c4a8:	81 81       	ldd	r24, Z+1	; 0x01
    c4aa:	8d 34       	cpi	r24, 0x4D	; 77
    c4ac:	81 f5       	brne	.+96     	; 0xc50e <collision_detect_player+0x212>
    c4ae:	c2 01       	movw	r24, r4
    c4b0:	b1 01       	movw	r22, r2
    c4b2:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    c4b6:	6d 5f       	subi	r22, 0xFD	; 253
    c4b8:	7f 4f       	sbci	r23, 0xFF	; 255
    c4ba:	e6 2e       	mov	r14, r22
    c4bc:	ee 0c       	add	r14, r14
    c4be:	ee 0c       	add	r14, r14
    c4c0:	ee 0c       	add	r14, r14
    c4c2:	08 2f       	mov	r16, r24
    c4c4:	00 0f       	add	r16, r16
    c4c6:	00 0f       	add	r16, r16
    c4c8:	00 0f       	add	r16, r16
    c4ca:	f4 01       	movw	r30, r8
    c4cc:	67 81       	ldd	r22, Z+7	; 0x07
    c4ce:	70 85       	ldd	r23, Z+8	; 0x08
    c4d0:	81 85       	ldd	r24, Z+9	; 0x09
    c4d2:	92 85       	ldd	r25, Z+10	; 0x0a
    c4d4:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c4d8:	b6 2e       	mov	r11, r22
    c4da:	d4 01       	movw	r26, r8
    c4dc:	13 96       	adiw	r26, 0x03	; 3
    c4de:	6d 91       	ld	r22, X+
    c4e0:	7d 91       	ld	r23, X+
    c4e2:	8d 91       	ld	r24, X+
    c4e4:	9c 91       	ld	r25, X
    c4e6:	16 97       	sbiw	r26, 0x06	; 6
    c4e8:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c4ec:	86 2f       	mov	r24, r22
    c4ee:	98 e0       	ldi	r25, 0x08	; 8
    c4f0:	a9 2e       	mov	r10, r25
    c4f2:	28 e0       	ldi	r18, 0x08	; 8
    c4f4:	c2 2e       	mov	r12, r18
    c4f6:	20 e1       	ldi	r18, 0x10	; 16
    c4f8:	40 e1       	ldi	r20, 0x10	; 16
    c4fa:	6b 2d       	mov	r22, r11
    c4fc:	0e 94 fd 55 	call	0xabfa	; 0xabfa <LBCollides>
    c500:	88 23       	and	r24, r24
    c502:	09 f4       	brne	.+2      	; 0xc506 <collision_detect_player+0x20a>
    c504:	74 c0       	rjmp	.+232    	; 0xc5ee <collision_detect_player+0x2f2>
		{
			player->max_speed = WATER_SPEED;
    c506:	89 e1       	ldi	r24, 0x19	; 25
    c508:	f4 01       	movw	r30, r8
    c50a:	80 8f       	std	Z+24, r24	; 0x18
    c50c:	7a c0       	rjmp	.+244    	; 0xc602 <collision_detect_player+0x306>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    c50e:	8c 32       	cpi	r24, 0x2C	; 44
    c510:	f1 f4       	brne	.+60     	; 0xc54e <collision_detect_player+0x252>
    c512:	c2 01       	movw	r24, r4
    c514:	b1 01       	movw	r22, r2
    c516:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    c51a:	6d 5f       	subi	r22, 0xFD	; 253
    c51c:	7f 4f       	sbci	r23, 0xFF	; 255
    c51e:	e6 2e       	mov	r14, r22
    c520:	ee 0c       	add	r14, r14
    c522:	ee 0c       	add	r14, r14
    c524:	ee 0c       	add	r14, r14
    c526:	08 2f       	mov	r16, r24
    c528:	00 0f       	add	r16, r16
    c52a:	00 0f       	add	r16, r16
    c52c:	00 0f       	add	r16, r16
    c52e:	d4 01       	movw	r26, r8
    c530:	17 96       	adiw	r26, 0x07	; 7
    c532:	6d 91       	ld	r22, X+
    c534:	7d 91       	ld	r23, X+
    c536:	8d 91       	ld	r24, X+
    c538:	9c 91       	ld	r25, X
    c53a:	1a 97       	sbiw	r26, 0x0a	; 10
    c53c:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    c540:	b6 2e       	mov	r11, r22
    c542:	f4 01       	movw	r30, r8
    c544:	63 81       	ldd	r22, Z+3	; 0x03
    c546:	74 81       	ldd	r23, Z+4	; 0x04
    c548:	85 81       	ldd	r24, Z+5	; 0x05
    c54a:	96 81       	ldd	r25, Z+6	; 0x06
    c54c:	cd cf       	rjmp	.-102    	; 0xc4e8 <collision_detect_player+0x1ec>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    c54e:	87 30       	cpi	r24, 0x07	; 7
    c550:	91 f4       	brne	.+36     	; 0xc576 <collision_detect_player+0x27a>
    c552:	d4 01       	movw	r26, r8
    c554:	54 96       	adiw	r26, 0x14	; 20
    c556:	8c 91       	ld	r24, X
    c558:	54 97       	sbiw	r26, 0x14	; 20
    c55a:	80 fd       	sbrc	r24, 0
    c55c:	48 c0       	rjmp	.+144    	; 0xc5ee <collision_detect_player+0x2f2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c55e:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c560:	58 96       	adiw	r26, 0x18	; 24
    c562:	dc 92       	st	X, r13
    c564:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    c566:	e1 e0       	ldi	r30, 0x01	; 1
    c568:	5a 96       	adiw	r26, 0x1a	; 26
    c56a:	ec 93       	st	X, r30
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c56c:	49 e3       	ldi	r20, 0x39	; 57
    c56e:	53 e8       	ldi	r21, 0x83	; 131
    c570:	61 e0       	ldi	r22, 0x01	; 1
    c572:	8a 85       	ldd	r24, Y+10	; 0x0a
    c574:	10 c0       	rjmp	.+32     	; 0xc596 <collision_detect_player+0x29a>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    c576:	89 30       	cpi	r24, 0x09	; 9
    c578:	11 f5       	brne	.+68     	; 0xc5be <collision_detect_player+0x2c2>
    c57a:	d4 01       	movw	r26, r8
    c57c:	54 96       	adiw	r26, 0x14	; 20
    c57e:	8c 91       	ld	r24, X
    c580:	54 97       	sbiw	r26, 0x14	; 20
    c582:	80 fd       	sbrc	r24, 0
    c584:	34 c0       	rjmp	.+104    	; 0xc5ee <collision_detect_player+0x2f2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c586:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c588:	e1 e0       	ldi	r30, 0x01	; 1
    c58a:	59 96       	adiw	r26, 0x19	; 25
    c58c:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c58e:	43 e3       	ldi	r20, 0x33	; 51
    c590:	53 e8       	ldi	r21, 0x83	; 131
    c592:	61 e0       	ldi	r22, 0x01	; 1
    c594:	89 85       	ldd	r24, Y+9	; 0x09
    c596:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    c59a:	d3 01       	movw	r26, r6
    c59c:	8d 91       	ld	r24, X+
    c59e:	9c 91       	ld	r25, X
    c5a0:	b1 01       	movw	r22, r2
    c5a2:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    c5a6:	6d 5f       	subi	r22, 0xFD	; 253
    c5a8:	40 e0       	ldi	r20, 0x00	; 0
    c5aa:	50 e0       	ldi	r21, 0x00	; 0
    c5ac:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <SetTile>
			SFX_ITEM;
    c5b0:	2f ef       	ldi	r18, 0xFF	; 255
    c5b2:	47 e1       	ldi	r20, 0x17	; 23
    c5b4:	63 e0       	ldi	r22, 0x03	; 3
    c5b6:	84 e0       	ldi	r24, 0x04	; 4
    c5b8:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
    c5bc:	18 c0       	rjmp	.+48     	; 0xc5ee <collision_detect_player+0x2f2>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    c5be:	88 30       	cpi	r24, 0x08	; 8
    c5c0:	b1 f4       	brne	.+44     	; 0xc5ee <collision_detect_player+0x2f2>
    c5c2:	d4 01       	movw	r26, r8
    c5c4:	54 96       	adiw	r26, 0x14	; 20
    c5c6:	8c 91       	ld	r24, X
    c5c8:	80 fd       	sbrc	r24, 0
    c5ca:	11 c0       	rjmp	.+34     	; 0xc5ee <collision_detect_player+0x2f2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c5cc:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    c5ce:	c2 01       	movw	r24, r4
    c5d0:	b1 01       	movw	r22, r2
    c5d2:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    c5d6:	6d 5f       	subi	r22, 0xFD	; 253
    c5d8:	40 e0       	ldi	r20, 0x00	; 0
    c5da:	50 e0       	ldi	r21, 0x00	; 0
    c5dc:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <SetTile>
			SFX_ITEM;
    c5e0:	2f ef       	ldi	r18, 0xFF	; 255
    c5e2:	47 e1       	ldi	r20, 0x17	; 23
    c5e4:	63 e0       	ldi	r22, 0x03	; 3
    c5e6:	84 e0       	ldi	r24, 0x04	; 4
    c5e8:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
			explode = 1;
    c5ec:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		if (!hit_water)
    c5ee:	f1 10       	cpse	r15, r1
    c5f0:	08 c0       	rjmp	.+16     	; 0xc602 <collision_detect_player+0x306>
		{
			player->max_speed = MAX_SPEED;
    c5f2:	82 e3       	ldi	r24, 0x32	; 50
    c5f4:	f4 01       	movw	r30, r8
    c5f6:	80 8f       	std	Z+24, r24	; 0x18
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    c5f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    c5fa:	88 23       	and	r24, r24
    c5fc:	21 f0       	breq	.+8      	; 0xc606 <collision_detect_player+0x30a>
    c5fe:	d0 8e       	std	Z+24, r13	; 0x18
    c600:	02 c0       	rjmp	.+4      	; 0xc606 <collision_detect_player+0x30a>
    c602:	ff 24       	eor	r15, r15
    c604:	f3 94       	inc	r15
    c606:	92 e0       	ldi	r25, 0x02	; 2
    c608:	69 0e       	add	r6, r25
    c60a:	71 1c       	adc	r7, r1
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    c60c:	af 81       	ldd	r26, Y+7	; 0x07
    c60e:	b8 85       	ldd	r27, Y+8	; 0x08
    c610:	6a 16       	cp	r6, r26
    c612:	7b 06       	cpc	r7, r27
    c614:	09 f0       	breq	.+2      	; 0xc618 <collision_detect_player+0x31c>
    c616:	dd ce       	rjmp	.-582    	; 0xc3d2 <collision_detect_player+0xd6>
			player->max_speed = MAX_SPEED;
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	return explode;
}
    c618:	81 2f       	mov	r24, r17
    c61a:	2b 96       	adiw	r28, 0x0b	; 11
    c61c:	0f b6       	in	r0, 0x3f	; 63
    c61e:	f8 94       	cli
    c620:	de bf       	out	0x3e, r29	; 62
    c622:	0f be       	out	0x3f, r0	; 63
    c624:	cd bf       	out	0x3d, r28	; 61
    c626:	df 91       	pop	r29
    c628:	cf 91       	pop	r28
    c62a:	1f 91       	pop	r17
    c62c:	0f 91       	pop	r16
    c62e:	ff 90       	pop	r15
    c630:	ef 90       	pop	r14
    c632:	df 90       	pop	r13
    c634:	cf 90       	pop	r12
    c636:	bf 90       	pop	r11
    c638:	af 90       	pop	r10
    c63a:	9f 90       	pop	r9
    c63c:	8f 90       	pop	r8
    c63e:	7f 90       	pop	r7
    c640:	6f 90       	pop	r6
    c642:	5f 90       	pop	r5
    c644:	4f 90       	pop	r4
    c646:	3f 90       	pop	r3
    c648:	2f 90       	pop	r2
    c64a:	08 95       	ret

0000c64c <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    c64c:	ef 92       	push	r14
    c64e:	ff 92       	push	r15
    c650:	1f 93       	push	r17
    c652:	cf 93       	push	r28
    c654:	df 93       	push	r29
    c656:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c658:	c0 e0       	ldi	r28, 0x00	; 0
    c65a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    c65c:	8e e1       	ldi	r24, 0x1E	; 30
    c65e:	e8 2e       	mov	r14, r24
    c660:	f1 2c       	mov	r15, r1
    c662:	ce 01       	movw	r24, r28
    c664:	b7 01       	movw	r22, r14
    c666:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
		y = 3 + i / 30;
    c66a:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    c66c:	11 23       	and	r17, r17
    c66e:	19 f0       	breq	.+6      	; 0xc676 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    c670:	46 ed       	ldi	r20, 0xD6	; 214
    c672:	53 e8       	ldi	r21, 0x83	; 131
    c674:	2d c0       	rjmp	.+90     	; 0xc6d0 <load_level_tiles+0x84>
    c676:	fe 01       	movw	r30, r28
    c678:	eb 54       	subi	r30, 0x4B	; 75
    c67a:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    c67c:	91 81       	ldd	r25, Z+1	; 0x01
    c67e:	97 30       	cpi	r25, 0x07	; 7
    c680:	99 f1       	breq	.+102    	; 0xc6e8 <load_level_tiles+0x9c>
    c682:	88 f4       	brcc	.+34     	; 0xc6a6 <load_level_tiles+0x5a>
    c684:	93 30       	cpi	r25, 0x03	; 3
    c686:	39 f1       	breq	.+78     	; 0xc6d6 <load_level_tiles+0x8a>
    c688:	40 f4       	brcc	.+16     	; 0xc69a <load_level_tiles+0x4e>
    c68a:	91 30       	cpi	r25, 0x01	; 1
    c68c:	f9 f0       	breq	.+62     	; 0xc6cc <load_level_tiles+0x80>
    c68e:	92 30       	cpi	r25, 0x02	; 2
    c690:	09 f0       	breq	.+2      	; 0xc694 <load_level_tiles+0x48>
    c692:	3f c0       	rjmp	.+126    	; 0xc712 <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    c694:	4c e3       	ldi	r20, 0x3C	; 60
    c696:	53 e8       	ldi	r21, 0x83	; 131
    c698:	1b c0       	rjmp	.+54     	; 0xc6d0 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c69a:	95 30       	cpi	r25, 0x05	; 5
    c69c:	f9 f0       	breq	.+62     	; 0xc6dc <load_level_tiles+0x90>
    c69e:	08 f5       	brcc	.+66     	; 0xc6e2 <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    c6a0:	41 e2       	ldi	r20, 0x21	; 33
    c6a2:	53 e8       	ldi	r21, 0x83	; 131
    c6a4:	15 c0       	rjmp	.+42     	; 0xc6d0 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c6a6:	9c 32       	cpi	r25, 0x2C	; 44
    c6a8:	59 f1       	breq	.+86     	; 0xc700 <load_level_tiles+0xb4>
    c6aa:	38 f4       	brcc	.+14     	; 0xc6ba <load_level_tiles+0x6e>
    c6ac:	98 30       	cpi	r25, 0x08	; 8
    c6ae:	f9 f0       	breq	.+62     	; 0xc6ee <load_level_tiles+0xa2>
    c6b0:	99 30       	cpi	r25, 0x09	; 9
    c6b2:	79 f5       	brne	.+94     	; 0xc712 <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    c6b4:	43 e3       	ldi	r20, 0x33	; 51
    c6b6:	53 e8       	ldi	r21, 0x83	; 131
    c6b8:	0b c0       	rjmp	.+22     	; 0xc6d0 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c6ba:	92 34       	cpi	r25, 0x42	; 66
    c6bc:	d9 f0       	breq	.+54     	; 0xc6f4 <load_level_tiles+0xa8>
    c6be:	9d 34       	cpi	r25, 0x4D	; 77
    c6c0:	e1 f0       	breq	.+56     	; 0xc6fa <load_level_tiles+0xae>
    c6c2:	97 33       	cpi	r25, 0x37	; 55
    c6c4:	31 f5       	brne	.+76     	; 0xc712 <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    c6c6:	45 e1       	ldi	r20, 0x15	; 21
    c6c8:	53 e8       	ldi	r21, 0x83	; 131
    c6ca:	02 c0       	rjmp	.+4      	; 0xc6d0 <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    c6cc:	4f e3       	ldi	r20, 0x3F	; 63
    c6ce:	53 e8       	ldi	r21, 0x83	; 131
    c6d0:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
    c6d4:	22 c0       	rjmp	.+68     	; 0xc71a <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    c6d6:	47 e2       	ldi	r20, 0x27	; 39
    c6d8:	53 e8       	ldi	r21, 0x83	; 131
    c6da:	fa cf       	rjmp	.-12     	; 0xc6d0 <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    c6dc:	4e e1       	ldi	r20, 0x1E	; 30
    c6de:	53 e8       	ldi	r21, 0x83	; 131
    c6e0:	f7 cf       	rjmp	.-18     	; 0xc6d0 <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    c6e2:	44 e2       	ldi	r20, 0x24	; 36
    c6e4:	53 e8       	ldi	r21, 0x83	; 131
    c6e6:	f4 cf       	rjmp	.-24     	; 0xc6d0 <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    c6e8:	49 e3       	ldi	r20, 0x39	; 57
    c6ea:	53 e8       	ldi	r21, 0x83	; 131
    c6ec:	f1 cf       	rjmp	.-30     	; 0xc6d0 <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    c6ee:	46 e3       	ldi	r20, 0x36	; 54
    c6f0:	53 e8       	ldi	r21, 0x83	; 131
    c6f2:	ee cf       	rjmp	.-36     	; 0xc6d0 <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    c6f4:	48 e1       	ldi	r20, 0x18	; 24
    c6f6:	53 e8       	ldi	r21, 0x83	; 131
    c6f8:	eb cf       	rjmp	.-42     	; 0xc6d0 <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    c6fa:	4b e1       	ldi	r20, 0x1B	; 27
    c6fc:	53 e8       	ldi	r21, 0x83	; 131
    c6fe:	e8 cf       	rjmp	.-48     	; 0xc6d0 <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    c700:	4b e1       	ldi	r20, 0x1B	; 27
    c702:	53 e8       	ldi	r21, 0x83	; 131
    c704:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
    c708:	d0 93 37 10 	sts	0x1037, r29
    c70c:	c0 93 36 10 	sts	0x1036, r28
    c710:	04 c0       	rjmp	.+8      	; 0xc71a <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    c712:	40 e0       	ldi	r20, 0x00	; 0
    c714:	50 e0       	ldi	r21, 0x00	; 0
    c716:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c71a:	21 96       	adiw	r28, 0x01	; 1
    c71c:	ce 3e       	cpi	r28, 0xEE	; 238
    c71e:	82 e0       	ldi	r24, 0x02	; 2
    c720:	d8 07       	cpc	r29, r24
    c722:	09 f0       	breq	.+2      	; 0xc726 <load_level_tiles+0xda>
    c724:	9e cf       	rjmp	.-196    	; 0xc662 <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    c726:	df 91       	pop	r29
    c728:	cf 91       	pop	r28
    c72a:	1f 91       	pop	r17
    c72c:	ff 90       	pop	r15
    c72e:	ef 90       	pop	r14
    c730:	08 95       	ret

0000c732 <load_level>:

void load_level(int level_number)
{
    c732:	9f 92       	push	r9
    c734:	af 92       	push	r10
    c736:	bf 92       	push	r11
    c738:	cf 92       	push	r12
    c73a:	df 92       	push	r13
    c73c:	ef 92       	push	r14
    c73e:	ff 92       	push	r15
    c740:	0f 93       	push	r16
    c742:	1f 93       	push	r17
    c744:	cf 93       	push	r28
    c746:	df 93       	push	r29
    c748:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    c74a:	8e ee       	ldi	r24, 0xEE	; 238
    c74c:	92 e0       	ldi	r25, 0x02	; 2
    c74e:	c8 9f       	mul	r28, r24
    c750:	70 01       	movw	r14, r0
    c752:	c9 9f       	mul	r28, r25
    c754:	f0 0c       	add	r15, r0
    c756:	d8 9f       	mul	r29, r24
    c758:	f0 0c       	add	r15, r0
    c75a:	11 24       	eor	r1, r1

	game.scope_counter = 0;
    c75c:	10 92 17 0c 	sts	0x0C17, r1
    c760:	10 92 16 0c 	sts	0x0C16, r1
	init_tile_animations(&tile_animations);
    c764:	89 e1       	ldi	r24, 0x19	; 25
    c766:	9c e0       	ldi	r25, 0x0C	; 12
    c768:	0e 94 59 57 	call	0xaeb2	; 0xaeb2 <init_tile_animations>
	init_scope_animation(&scope_animation);
    c76c:	8a e2       	ldi	r24, 0x2A	; 42
    c76e:	90 e1       	ldi	r25, 0x10	; 16
    c770:	0e 94 80 57 	call	0xaf00	; 0xaf00 <init_scope_animation>
	init_sub_animation(&sub_animation);
    c774:	8c e1       	ldi	r24, 0x1C	; 28
    c776:	90 e1       	ldi	r25, 0x10	; 16
    c778:	0e 94 98 57 	call	0xaf30	; 0xaf30 <init_sub_animation>
	game.current_screen = LEVEL;
    c77c:	83 e0       	ldi	r24, 0x03	; 3
    c77e:	80 93 0b 0c 	sts	0x0C0B, r24
	clear_sprites();
    c782:	0e 94 d2 58 	call	0xb1a4	; 0xb1a4 <clear_sprites>
	game.current_level = level_number;
    c786:	c0 93 0c 0c 	sts	0x0C0C, r28
    c78a:	86 eb       	ldi	r24, 0xB6	; 182
    c78c:	c8 2e       	mov	r12, r24
    c78e:	8c e0       	ldi	r24, 0x0C	; 12
    c790:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    c792:	c0 e0       	ldi	r28, 0x00	; 0
    c794:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    c796:	0e e1       	ldi	r16, 0x1E	; 30
    c798:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    c79a:	92 e3       	ldi	r25, 0x32	; 50
    c79c:	99 2e       	mov	r9, r25
    c79e:	fe 01       	movw	r30, r28
    c7a0:	ee 0d       	add	r30, r14
    c7a2:	ff 1d       	adc	r31, r15
    c7a4:	e9 50       	subi	r30, 0x09	; 9
    c7a6:	fd 4d       	sbci	r31, 0xDD	; 221
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    c7a8:	e4 91       	lpm	r30, Z
    c7aa:	56 01       	movw	r10, r12
    c7ac:	d6 01       	movw	r26, r12
    c7ae:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    c7b0:	e8 35       	cpi	r30, 0x58	; 88
    c7b2:	01 f5       	brne	.+64     	; 0xc7f4 <load_level+0xc2>
		{
			player1.spawn_x = (i % 30) * 8;
    c7b4:	ce 01       	movw	r24, r28
    c7b6:	b8 01       	movw	r22, r16
    c7b8:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    c7bc:	88 0f       	add	r24, r24
    c7be:	88 0f       	add	r24, r24
    c7c0:	88 0f       	add	r24, r24
    c7c2:	80 93 48 0c 	sts	0x0C48, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    c7c6:	6d 5f       	subi	r22, 0xFD	; 253
    c7c8:	7f 4f       	sbci	r23, 0xFF	; 255
    c7ca:	66 0f       	add	r22, r22
    c7cc:	66 0f       	add	r22, r22
    c7ce:	66 0f       	add	r22, r22
    c7d0:	60 93 49 0c 	sts	0x0C49, r22
			player1.level_score = 0;
    c7d4:	10 92 46 0c 	sts	0x0C46, r1
			player1.has_over_speed = false;
    c7d8:	10 92 50 0c 	sts	0x0C50, r1
			player1.has_rocket = false;
    c7dc:	10 92 4f 0c 	sts	0x0C4F, r1
			player1.max_speed = MAX_SPEED;
    c7e0:	90 92 4e 0c 	sts	0x0C4E, r9
			player_init_shot_state(&player1);
    c7e4:	86 e3       	ldi	r24, 0x36	; 54
    c7e6:	9c e0       	ldi	r25, 0x0C	; 12
    c7e8:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <player_init_shot_state>
			player_spawn(&player1);
    c7ec:	86 e3       	ldi	r24, 0x36	; 54
    c7ee:	9c e0       	ldi	r25, 0x0C	; 12
    c7f0:	0e 94 98 58 	call	0xb130	; 0xb130 <player_spawn>
    c7f4:	bf ef       	ldi	r27, 0xFF	; 255
    c7f6:	cb 1a       	sub	r12, r27
    c7f8:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    c7fa:	f5 01       	movw	r30, r10
    c7fc:	80 81       	ld	r24, Z
    c7fe:	83 36       	cpi	r24, 0x63	; 99
    c800:	01 f5       	brne	.+64     	; 0xc842 <load_level+0x110>
		{
			player2.spawn_x = (i % 30) * 8;
    c802:	ce 01       	movw	r24, r28
    c804:	b8 01       	movw	r22, r16
    c806:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    c80a:	88 0f       	add	r24, r24
    c80c:	88 0f       	add	r24, r24
    c80e:	88 0f       	add	r24, r24
    c810:	80 93 b6 0f 	sts	0x0FB6, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    c814:	6d 5f       	subi	r22, 0xFD	; 253
    c816:	7f 4f       	sbci	r23, 0xFF	; 255
    c818:	66 0f       	add	r22, r22
    c81a:	66 0f       	add	r22, r22
    c81c:	66 0f       	add	r22, r22
    c81e:	60 93 b7 0f 	sts	0x0FB7, r22
			player2.level_score = 0;
    c822:	10 92 b4 0f 	sts	0x0FB4, r1
			player2.has_over_speed = false;
    c826:	10 92 be 0f 	sts	0x0FBE, r1
			player2.has_rocket = false;
    c82a:	10 92 bd 0f 	sts	0x0FBD, r1
			player2.max_speed = MAX_SPEED;
    c82e:	90 92 bc 0f 	sts	0x0FBC, r9
			player_init_shot_state(&player2);
    c832:	84 ea       	ldi	r24, 0xA4	; 164
    c834:	9f e0       	ldi	r25, 0x0F	; 15
    c836:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <player_init_shot_state>
			player_spawn(&player2);
    c83a:	84 ea       	ldi	r24, 0xA4	; 164
    c83c:	9f e0       	ldi	r25, 0x0F	; 15
    c83e:	0e 94 98 58 	call	0xb130	; 0xb130 <player_spawn>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    c842:	21 96       	adiw	r28, 0x01	; 1
    c844:	ce 3e       	cpi	r28, 0xEE	; 238
    c846:	f2 e0       	ldi	r31, 0x02	; 2
    c848:	df 07       	cpc	r29, r31
    c84a:	09 f0       	breq	.+2      	; 0xc84e <load_level+0x11c>
    c84c:	a8 cf       	rjmp	.-176    	; 0xc79e <load_level+0x6c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    c84e:	60 e0       	ldi	r22, 0x00	; 0
    c850:	86 e3       	ldi	r24, 0x36	; 54
    c852:	9c e0       	ldi	r25, 0x0C	; 12
    c854:	0e 94 42 5a 	call	0xb484	; 0xb484 <render_hud>
	render_hud(&player2, 15);
    c858:	6f e0       	ldi	r22, 0x0F	; 15
    c85a:	84 ea       	ldi	r24, 0xA4	; 164
    c85c:	9f e0       	ldi	r25, 0x0F	; 15
    c85e:	0e 94 42 5a 	call	0xb484	; 0xb484 <render_hud>
	render_score(&player1, 0);
    c862:	60 e0       	ldi	r22, 0x00	; 0
    c864:	86 e3       	ldi	r24, 0x36	; 54
    c866:	9c e0       	ldi	r25, 0x0C	; 12
    c868:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <render_score>
	render_score(&player2, 15);
    c86c:	6f e0       	ldi	r22, 0x0F	; 15
    c86e:	84 ea       	ldi	r24, 0xA4	; 164
    c870:	9f e0       	ldi	r25, 0x0F	; 15
    c872:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <render_score>
	Print(14, 0, (char*) strVertSep);
    c876:	4e e2       	ldi	r20, 0x2E	; 46
    c878:	5b e0       	ldi	r21, 0x0B	; 11
    c87a:	60 e0       	ldi	r22, 0x00	; 0
    c87c:	70 e0       	ldi	r23, 0x00	; 0
    c87e:	8e e0       	ldi	r24, 0x0E	; 14
    c880:	90 e0       	ldi	r25, 0x00	; 0
    c882:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(14, 1, (char*) strVertSep);
    c886:	4e e2       	ldi	r20, 0x2E	; 46
    c888:	5b e0       	ldi	r21, 0x0B	; 11
    c88a:	61 e0       	ldi	r22, 0x01	; 1
    c88c:	70 e0       	ldi	r23, 0x00	; 0
    c88e:	8e e0       	ldi	r24, 0x0E	; 14
    c890:	90 e0       	ldi	r25, 0x00	; 0
    c892:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(14, 2, (char*) strVertSep);
    c896:	4e e2       	ldi	r20, 0x2E	; 46
    c898:	5b e0       	ldi	r21, 0x0B	; 11
    c89a:	62 e0       	ldi	r22, 0x02	; 2
    c89c:	70 e0       	ldi	r23, 0x00	; 0
    c89e:	8e e0       	ldi	r24, 0x0E	; 14
    c8a0:	90 e0       	ldi	r25, 0x00	; 0
    c8a2:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	load_level_tiles(false);
    c8a6:	80 e0       	ldi	r24, 0x00	; 0
    c8a8:	0e 94 26 63 	call	0xc64c	; 0xc64c <load_level_tiles>
	SFX_LEVEL_START;
    c8ac:	2f ef       	ldi	r18, 0xFF	; 255
    c8ae:	47 e1       	ldi	r20, 0x17	; 23
    c8b0:	65 e0       	ldi	r22, 0x05	; 5
    c8b2:	84 e0       	ldi	r24, 0x04	; 4
}
    c8b4:	df 91       	pop	r29
    c8b6:	cf 91       	pop	r28
    c8b8:	1f 91       	pop	r17
    c8ba:	0f 91       	pop	r16
    c8bc:	ff 90       	pop	r15
    c8be:	ef 90       	pop	r14
    c8c0:	df 90       	pop	r13
    c8c2:	cf 90       	pop	r12
    c8c4:	bf 90       	pop	r11
    c8c6:	af 90       	pop	r10
    c8c8:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
	SFX_LEVEL_START;
    c8ca:	0c 94 7a 49 	jmp	0x92f4	; 0x92f4 <TriggerNote>

0000c8ce <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    c8ce:	cf 93       	push	r28
    c8d0:	df 93       	push	r29
    c8d2:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    c8d4:	61 e0       	ldi	r22, 0x01	; 1
    c8d6:	83 e0       	ldi	r24, 0x03	; 3
    c8d8:	0e 94 ef 54 	call	0xa9de	; 0xa9de <FadeOut>
	ClearVram();
    c8dc:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <ClearVram>
	clear_sprites();
    c8e0:	0e 94 d2 58 	call	0xb1a4	; 0xb1a4 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    c8e4:	d0 e0       	ldi	r29, 0x00	; 0
    c8e6:	ae 01       	movw	r20, r28
    c8e8:	84 e0       	ldi	r24, 0x04	; 4
    c8ea:	44 0f       	add	r20, r20
    c8ec:	55 1f       	adc	r21, r21
    c8ee:	8a 95       	dec	r24
    c8f0:	e1 f7       	brne	.-8      	; 0xc8ea <level_transition+0x1c>
    c8f2:	49 59       	subi	r20, 0x99	; 153
    c8f4:	56 4f       	sbci	r21, 0xF6	; 246
    c8f6:	6c e0       	ldi	r22, 0x0C	; 12
    c8f8:	70 e0       	ldi	r23, 0x00	; 0
    c8fa:	88 e0       	ldi	r24, 0x08	; 8
    c8fc:	90 e0       	ldi	r25, 0x00	; 0
    c8fe:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	FadeIn(1, true);
    c902:	61 e0       	ldi	r22, 0x01	; 1
    c904:	81 e0       	ldi	r24, 0x01	; 1
    c906:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    c90a:	82 e0       	ldi	r24, 0x02	; 2
    c90c:	0e 94 32 57 	call	0xae64	; 0xae64 <LBWaitSeconds>
	FadeOut(1, true);
    c910:	61 e0       	ldi	r22, 0x01	; 1
    c912:	81 e0       	ldi	r24, 0x01	; 1
    c914:	0e 94 ef 54 	call	0xa9de	; 0xa9de <FadeOut>
	ClearVram();
    c918:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c91c:	60 e0       	ldi	r22, 0x00	; 0
    c91e:	83 e0       	ldi	r24, 0x03	; 3
    c920:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <FadeIn>
	load_level(index);
    c924:	ce 01       	movw	r24, r28
}
    c926:	df 91       	pop	r29
    c928:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    c92a:	0c 94 99 63 	jmp	0xc732	; 0xc732 <load_level>

0000c92e <render_boss_fight_scope_load>:
	SFX_LEVEL_START;
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    c92e:	8a e2       	ldi	r24, 0x2A	; 42
    c930:	90 e1       	ldi	r25, 0x10	; 16
    c932:	0e 94 2d 5b 	call	0xb65a	; 0xb65a <render_scope>
    c936:	88 23       	and	r24, r24
    c938:	41 f0       	breq	.+16     	; 0xc94a <render_boss_fight_scope_load+0x1c>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    c93a:	82 e0       	ldi	r24, 0x02	; 2
    c93c:	80 93 0e 0c 	sts	0x0C0E, r24
		SFX_ALARM;
    c940:	41 e0       	ldi	r20, 0x01	; 1
    c942:	6f ef       	ldi	r22, 0xFF	; 255
    c944:	8d e0       	ldi	r24, 0x0D	; 13
    c946:	0c 94 3b 49 	jmp	0x9276	; 0x9276 <TriggerFx>
    c94a:	08 95       	ret

0000c94c <render_boss_fight_sub_load>:
}

void render_boss_fight_sub_load()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c94c:	8c e1       	ldi	r24, 0x1C	; 28
    c94e:	90 e1       	ldi	r25, 0x10	; 16
    c950:	0e 94 49 55 	call	0xaa92	; 0xaa92 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    c954:	ac 01       	movw	r20, r24
    c956:	64 e0       	ldi	r22, 0x04	; 4
    c958:	81 e0       	ldi	r24, 0x01	; 1
    c95a:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
	if (sub_animation.anim.reversing)
    c95e:	80 91 21 10 	lds	r24, 0x1021
    c962:	88 23       	and	r24, r24
    c964:	19 f0       	breq	.+6      	; 0xc96c <render_boss_fight_sub_load+0x20>
	{
		game.boss_fight_status = BOSS_FIGHT;
    c966:	84 e0       	ldi	r24, 0x04	; 4
    c968:	80 93 0e 0c 	sts	0x0C0E, r24
    c96c:	08 95       	ret

0000c96e <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    c96e:	10 92 0b 0c 	sts	0x0C0B, r1
	clear_sprites();
    c972:	0e 94 d2 58 	call	0xb1a4	; 0xb1a4 <clear_sprites>
	Print(7, 13, (char*) str1Player);
    c976:	43 e6       	ldi	r20, 0x63	; 99
    c978:	5b e0       	ldi	r21, 0x0B	; 11
    c97a:	6d e0       	ldi	r22, 0x0D	; 13
    c97c:	70 e0       	ldi	r23, 0x00	; 0
    c97e:	87 e0       	ldi	r24, 0x07	; 7
    c980:	90 e0       	ldi	r25, 0x00	; 0
    c982:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(7, 14, (char*) str2Player);
    c986:	42 e5       	ldi	r20, 0x52	; 82
    c988:	5b e0       	ldi	r21, 0x0B	; 11
    c98a:	6e e0       	ldi	r22, 0x0E	; 14
    c98c:	70 e0       	ldi	r23, 0x00	; 0
    c98e:	87 e0       	ldi	r24, 0x07	; 7
    c990:	90 e0       	ldi	r25, 0x00	; 0
    c992:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(7, 15, (char*) strHighscores);
    c996:	48 e4       	ldi	r20, 0x48	; 72
    c998:	5b e0       	ldi	r21, 0x0B	; 11
    c99a:	6f e0       	ldi	r22, 0x0F	; 15
    c99c:	70 e0       	ldi	r23, 0x00	; 0
    c99e:	87 e0       	ldi	r24, 0x07	; 7
    c9a0:	90 e0       	ldi	r25, 0x00	; 0
    c9a2:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(5, 26, (char*) strCopyright);
    c9a6:	41 e7       	ldi	r20, 0x71	; 113
    c9a8:	5b e0       	ldi	r21, 0x0B	; 11
    c9aa:	6a e1       	ldi	r22, 0x1A	; 26
    c9ac:	70 e0       	ldi	r23, 0x00	; 0
    c9ae:	85 e0       	ldi	r24, 0x05	; 5
    c9b0:	90 e0       	ldi	r25, 0x00	; 0
    c9b2:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    c9b6:	42 e4       	ldi	r20, 0x42	; 66
    c9b8:	53 e8       	ldi	r21, 0x83	; 131
    c9ba:	65 e0       	ldi	r22, 0x05	; 5
    c9bc:	84 e0       	ldi	r24, 0x04	; 4
    c9be:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
	MapSprite2(0, map_right_arrow, 0);
    c9c2:	40 e0       	ldi	r20, 0x00	; 0
    c9c4:	6f e8       	ldi	r22, 0x8F	; 143
    c9c6:	79 e4       	ldi	r23, 0x49	; 73
    c9c8:	80 e0       	ldi	r24, 0x00	; 0
    c9ca:	0c 94 68 53 	jmp	0xa6d0	; 0xa6d0 <MapSprite2>

0000c9ce <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    c9ce:	ef 92       	push	r14
    c9d0:	ff 92       	push	r15
    c9d2:	0f 93       	push	r16
    c9d4:	1f 93       	push	r17
    c9d6:	cf 93       	push	r28
    c9d8:	df 93       	push	r29
    c9da:	1f 92       	push	r1
    c9dc:	cd b7       	in	r28, 0x3d	; 61
    c9de:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    c9e0:	81 e0       	ldi	r24, 0x01	; 1
    c9e2:	80 93 0b 0c 	sts	0x0C0B, r24
	clear_sprites();
    c9e6:	0e 94 d2 58 	call	0xb1a4	; 0xb1a4 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    c9ea:	4f e0       	ldi	r20, 0x0F	; 15
    c9ec:	53 e8       	ldi	r21, 0x83	; 131
    c9ee:	61 e0       	ldi	r22, 0x01	; 1
    c9f0:	87 e0       	ldi	r24, 0x07	; 7
    c9f2:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
	DrawMap2(20, 1, map_blue_tank);
    c9f6:	49 e0       	ldi	r20, 0x09	; 9
    c9f8:	53 e8       	ldi	r21, 0x83	; 131
    c9fa:	61 e0       	ldi	r22, 0x01	; 1
    c9fc:	84 e1       	ldi	r24, 0x14	; 20
    c9fe:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
	Print(10, 2, (char*) strHighscores);
    ca02:	48 e4       	ldi	r20, 0x48	; 72
    ca04:	5b e0       	ldi	r21, 0x0B	; 11
    ca06:	62 e0       	ldi	r22, 0x02	; 2
    ca08:	70 e0       	ldi	r23, 0x00	; 0
    ca0a:	8a e0       	ldi	r24, 0x0A	; 10
    ca0c:	90 e0       	ldi	r25, 0x00	; 0
    ca0e:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
    ca12:	09 ec       	ldi	r16, 0xC9	; 201
    ca14:	1b e0       	ldi	r17, 0x0B	; 11
    ca16:	87 e0       	ldi	r24, 0x07	; 7
    ca18:	e8 2e       	mov	r14, r24
    ca1a:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    ca1c:	31 e0       	ldi	r19, 0x01	; 1
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    ca1e:	20 e0       	ldi	r18, 0x00	; 0
    ca20:	43 2f       	mov	r20, r19
    ca22:	b7 01       	movw	r22, r14
    ca24:	82 e0       	ldi	r24, 0x02	; 2
    ca26:	90 e0       	ldi	r25, 0x00	; 0
    ca28:	39 83       	std	Y+1, r19	; 0x01
    ca2a:	0e 94 36 54 	call	0xa86c	; 0xa86c <PrintByte>
		PrintChar(3, y, '.');
    ca2e:	4e e2       	ldi	r20, 0x2E	; 46
    ca30:	b7 01       	movw	r22, r14
    ca32:	83 e0       	ldi	r24, 0x03	; 3
    ca34:	90 e0       	ldi	r25, 0x00	; 0
    ca36:	0e 94 84 54 	call	0xa908	; 0xa908 <PrintChar>
    ca3a:	f8 01       	movw	r30, r16
    ca3c:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    ca3e:	80 81       	ld	r24, Z
    ca40:	93 e0       	ldi	r25, 0x03	; 3
    ca42:	89 9f       	mul	r24, r25
    ca44:	a0 01       	movw	r20, r0
    ca46:	11 24       	eor	r1, r1
    ca48:	43 51       	subi	r20, 0x13	; 19
    ca4a:	54 4f       	sbci	r21, 0xF4	; 244
    ca4c:	23 e0       	ldi	r18, 0x03	; 3
    ca4e:	6e 2d       	mov	r22, r14
    ca50:	85 e0       	ldi	r24, 0x05	; 5
    ca52:	0e 94 cc 55 	call	0xab98	; 0xab98 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    ca56:	49 ed       	ldi	r20, 0xD9	; 217
    ca58:	5a e0       	ldi	r21, 0x0A	; 10
    ca5a:	b7 01       	movw	r22, r14
    ca5c:	89 e0       	ldi	r24, 0x09	; 9
    ca5e:	90 e0       	ldi	r25, 0x00	; 0
    ca60:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
    ca64:	f8 01       	movw	r30, r16
    ca66:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    ca68:	80 81       	ld	r24, Z
    ca6a:	e3 e0       	ldi	r30, 0x03	; 3
    ca6c:	8e 9f       	mul	r24, r30
    ca6e:	a0 01       	movw	r20, r0
    ca70:	11 24       	eor	r1, r1
    ca72:	43 51       	subi	r20, 0x13	; 19
    ca74:	54 4f       	sbci	r21, 0xF4	; 244
    ca76:	23 e0       	ldi	r18, 0x03	; 3
    ca78:	6e 2d       	mov	r22, r14
    ca7a:	8e e0       	ldi	r24, 0x0E	; 14
    ca7c:	0e 94 cc 55 	call	0xab98	; 0xab98 <LBPrintStr>
		Print(18, y, (char*) strBy);
    ca80:	46 ed       	ldi	r20, 0xD6	; 214
    ca82:	5a e0       	ldi	r21, 0x0A	; 10
    ca84:	b7 01       	movw	r22, r14
    ca86:	82 e1       	ldi	r24, 0x12	; 18
    ca88:	90 e0       	ldi	r25, 0x00	; 0
    ca8a:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
    ca8e:	f8 01       	movw	r30, r16
    ca90:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    ca92:	21 e0       	ldi	r18, 0x01	; 1
    ca94:	40 81       	ld	r20, Z
    ca96:	b7 01       	movw	r22, r14
    ca98:	87 e1       	ldi	r24, 0x17	; 23
    ca9a:	90 e0       	ldi	r25, 0x00	; 0
    ca9c:	0e 94 36 54 	call	0xa86c	; 0xa86c <PrintByte>
		PrintChar(24, y, '-');
    caa0:	4d e2       	ldi	r20, 0x2D	; 45
    caa2:	b7 01       	movw	r22, r14
    caa4:	88 e1       	ldi	r24, 0x18	; 24
    caa6:	90 e0       	ldi	r25, 0x00	; 0
    caa8:	0e 94 84 54 	call	0xa908	; 0xa908 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    caac:	21 e0       	ldi	r18, 0x01	; 1
    caae:	f8 01       	movw	r30, r16
    cab0:	40 81       	ld	r20, Z
    cab2:	b7 01       	movw	r22, r14
    cab4:	8b e1       	ldi	r24, 0x1B	; 27
    cab6:	90 e0       	ldi	r25, 0x00	; 0
    cab8:	0e 94 36 54 	call	0xa86c	; 0xa86c <PrintByte>
		y += 3;
		rank += 1;
    cabc:	39 81       	ldd	r19, Y+1	; 0x01
    cabe:	3f 5f       	subi	r19, 0xFF	; 255
    cac0:	f3 e0       	ldi	r31, 0x03	; 3
    cac2:	ef 0e       	add	r14, r31
    cac4:	f1 1c       	adc	r15, r1
    cac6:	0b 5f       	subi	r16, 0xFB	; 251
    cac8:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    caca:	36 30       	cpi	r19, 0x06	; 6
    cacc:	09 f0       	breq	.+2      	; 0xcad0 <load_tank_rank+0x102>
    cace:	a7 cf       	rjmp	.-178    	; 0xca1e <load_tank_rank+0x50>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
    cad0:	4d ee       	ldi	r20, 0xED	; 237
    cad2:	5a e0       	ldi	r21, 0x0A	; 10
    cad4:	66 e1       	ldi	r22, 0x16	; 22
    cad6:	70 e0       	ldi	r23, 0x00	; 0
    cad8:	83 e0       	ldi	r24, 0x03	; 3
    cada:	90 e0       	ldi	r25, 0x00	; 0
    cadc:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(10, 24, (char*) strCancelHandle);
    cae0:	46 e0       	ldi	r20, 0x06	; 6
    cae2:	5b e0       	ldi	r21, 0x0B	; 11
    cae4:	68 e1       	ldi	r22, 0x18	; 24
    cae6:	70 e0       	ldi	r23, 0x00	; 0
    cae8:	8a e0       	ldi	r24, 0x0A	; 10
    caea:	90 e0       	ldi	r25, 0x00	; 0
}
    caec:	0f 90       	pop	r0
    caee:	df 91       	pop	r29
    caf0:	cf 91       	pop	r28
    caf2:	1f 91       	pop	r17
    caf4:	0f 91       	pop	r16
    caf6:	ff 90       	pop	r15
    caf8:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    cafa:	0c 94 69 54 	jmp	0xa8d2	; 0xa8d2 <Print>

0000cafe <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    cafe:	0e 94 df 58 	call	0xb1be	; 0xb1be <save_score>
	fade_through();
    cb02:	0e 94 c8 58 	call	0xb190	; 0xb190 <fade_through>
	SetSpriteVisibility(true);
    cb06:	81 e0       	ldi	r24, 0x01	; 1
    cb08:	0e 94 91 52 	call	0xa522	; 0xa522 <SetSpriteVisibility>
	init_game_state();
    cb0c:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <init_game_state>
	load_tank_rank();
    cb10:	0c 94 e7 64 	jmp	0xc9ce	; 0xc9ce <load_tank_rank>

0000cb14 <update_player>:
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
}

void update_player(JoyPadState* p, Player* player)
{
    cb14:	bf 92       	push	r11
    cb16:	cf 92       	push	r12
    cb18:	df 92       	push	r13
    cb1a:	ef 92       	push	r14
    cb1c:	ff 92       	push	r15
    cb1e:	0f 93       	push	r16
    cb20:	1f 93       	push	r17
    cb22:	cf 93       	push	r28
    cb24:	df 93       	push	r29
    cb26:	8c 01       	movw	r16, r24
    cb28:	eb 01       	movw	r28, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    cb2a:	1a 82       	std	Y+2, r1	; 0x02
	if ((p->pressed & BTN_START))
    cb2c:	fc 01       	movw	r30, r24
    cb2e:	80 81       	ld	r24, Z
    cb30:	83 ff       	sbrs	r24, 3
    cb32:	0f c0       	rjmp	.+30     	; 0xcb52 <update_player+0x3e>
	{
		SFX_NAVIGATE;
    cb34:	2f ef       	ldi	r18, 0xFF	; 255
    cb36:	47 e1       	ldi	r20, 0x17	; 23
    cb38:	67 e0       	ldi	r22, 0x07	; 7
    cb3a:	84 e0       	ldi	r24, 0x04	; 4
    cb3c:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
		game.paused = game.paused ^ 1;
    cb40:	90 91 0d 0c 	lds	r25, 0x0C0D
    cb44:	81 e0       	ldi	r24, 0x01	; 1
    cb46:	89 27       	eor	r24, r25
    cb48:	80 93 0d 0c 	sts	0x0C0D, r24
		load_level_tiles(false);
    cb4c:	80 e0       	ldi	r24, 0x00	; 0
    cb4e:	0e 94 26 63 	call	0xc64c	; 0xc64c <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    cb52:	20 91 0d 0c 	lds	r18, 0x0C0D
    cb56:	f8 01       	movw	r30, r16
    cb58:	80 81       	ld	r24, Z
    cb5a:	91 81       	ldd	r25, Z+1	; 0x01
    cb5c:	21 11       	cpse	r18, r1
    cb5e:	5a c1       	rjmp	.+692    	; 0xce14 <update_player+0x300>
    cb60:	2c 89       	ldd	r18, Y+20	; 0x14
    cb62:	20 fd       	sbrc	r18, 0
    cb64:	57 c1       	rjmp	.+686    	; 0xce14 <update_player+0x300>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    cb66:	93 ff       	sbrs	r25, 3
    cb68:	11 c0       	rjmp	.+34     	; 0xcb8c <update_player+0x78>
    cb6a:	8d 89       	ldd	r24, Y+21	; 0x15
    cb6c:	8a 35       	cpi	r24, 0x5A	; 90
    cb6e:	71 f4       	brne	.+28     	; 0xcb8c <update_player+0x78>
		{
			player->banter_frame = 0;
    cb70:	1d 8a       	std	Y+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    cb72:	69 e0       	ldi	r22, 0x09	; 9
    cb74:	70 e0       	ldi	r23, 0x00	; 0
    cb76:	80 e0       	ldi	r24, 0x00	; 0
    cb78:	90 e0       	ldi	r25, 0x00	; 0
    cb7a:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBRandom>
    cb7e:	8e 8b       	std	Y+22, r24	; 0x16
			SFX_BANTER;
    cb80:	2f e5       	ldi	r18, 0x5F	; 95
    cb82:	4e e1       	ldi	r20, 0x1E	; 30
    cb84:	60 e0       	ldi	r22, 0x00	; 0
    cb86:	84 e0       	ldi	r24, 0x04	; 4
    cb88:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    cb8c:	68 8d       	ldd	r22, Y+24	; 0x18
    cb8e:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    cb90:	f8 01       	movw	r30, r16
    cb92:	84 81       	ldd	r24, Z+4	; 0x04
    cb94:	84 ff       	sbrs	r24, 4
    cb96:	15 c0       	rjmp	.+42     	; 0xcbc2 <update_player+0xae>
		{
			player->shared.direction = D_UP;
    cb98:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    cb9a:	70 e0       	ldi	r23, 0x00	; 0
    cb9c:	80 e0       	ldi	r24, 0x00	; 0
    cb9e:	90 e0       	ldi	r25, 0x00	; 0
    cba0:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cba4:	25 e6       	ldi	r18, 0x65	; 101
    cba6:	38 e8       	ldi	r19, 0x88	; 136
    cba8:	48 e8       	ldi	r20, 0x88	; 136
    cbaa:	5c e3       	ldi	r21, 0x3C	; 60
    cbac:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    cbb0:	9b 01       	movw	r18, r22
    cbb2:	ac 01       	movw	r20, r24
    cbb4:	6f 81       	ldd	r22, Y+7	; 0x07
    cbb6:	78 85       	ldd	r23, Y+8	; 0x08
    cbb8:	89 85       	ldd	r24, Y+9	; 0x09
    cbba:	9a 85       	ldd	r25, Y+10	; 0x0a
    cbbc:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    cbc0:	2f c0       	rjmp	.+94     	; 0xcc20 <update_player+0x10c>
		}
		else if ((p->held & BTN_RIGHT))
    cbc2:	87 ff       	sbrs	r24, 7
    cbc4:	16 c0       	rjmp	.+44     	; 0xcbf2 <update_player+0xde>
		{
			player->shared.direction = D_RIGHT;
    cbc6:	81 e0       	ldi	r24, 0x01	; 1
    cbc8:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    cbca:	70 e0       	ldi	r23, 0x00	; 0
    cbcc:	80 e0       	ldi	r24, 0x00	; 0
    cbce:	90 e0       	ldi	r25, 0x00	; 0
    cbd0:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cbd4:	25 e6       	ldi	r18, 0x65	; 101
    cbd6:	38 e8       	ldi	r19, 0x88	; 136
    cbd8:	48 e8       	ldi	r20, 0x88	; 136
    cbda:	5c e3       	ldi	r21, 0x3C	; 60
    cbdc:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    cbe0:	9b 01       	movw	r18, r22
    cbe2:	ac 01       	movw	r20, r24
    cbe4:	6b 81       	ldd	r22, Y+3	; 0x03
    cbe6:	7c 81       	ldd	r23, Y+4	; 0x04
    cbe8:	8d 81       	ldd	r24, Y+5	; 0x05
    cbea:	9e 81       	ldd	r25, Y+6	; 0x06
    cbec:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    cbf0:	33 c0       	rjmp	.+102    	; 0xcc58 <update_player+0x144>
		}
		else if ((p->held & BTN_DOWN))
    cbf2:	85 ff       	sbrs	r24, 5
    cbf4:	1a c0       	rjmp	.+52     	; 0xcc2a <update_player+0x116>
		{
			player->shared.direction = D_DOWN;
    cbf6:	82 e0       	ldi	r24, 0x02	; 2
    cbf8:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    cbfa:	70 e0       	ldi	r23, 0x00	; 0
    cbfc:	80 e0       	ldi	r24, 0x00	; 0
    cbfe:	90 e0       	ldi	r25, 0x00	; 0
    cc00:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cc04:	25 e6       	ldi	r18, 0x65	; 101
    cc06:	38 e8       	ldi	r19, 0x88	; 136
    cc08:	48 e8       	ldi	r20, 0x88	; 136
    cc0a:	5c e3       	ldi	r21, 0x3C	; 60
    cc0c:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    cc10:	9b 01       	movw	r18, r22
    cc12:	ac 01       	movw	r20, r24
    cc14:	6f 81       	ldd	r22, Y+7	; 0x07
    cc16:	78 85       	ldd	r23, Y+8	; 0x08
    cc18:	89 85       	ldd	r24, Y+9	; 0x09
    cc1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    cc1c:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    cc20:	6f 83       	std	Y+7, r22	; 0x07
    cc22:	78 87       	std	Y+8, r23	; 0x08
    cc24:	89 87       	std	Y+9, r24	; 0x09
    cc26:	9a 87       	std	Y+10, r25	; 0x0a
    cc28:	1d c0       	rjmp	.+58     	; 0xcc64 <update_player+0x150>
		}
		else if ((p->held & BTN_LEFT))
    cc2a:	86 ff       	sbrs	r24, 6
    cc2c:	1a c0       	rjmp	.+52     	; 0xcc62 <update_player+0x14e>
		{
			player->shared.direction = D_LEFT;
    cc2e:	83 e0       	ldi	r24, 0x03	; 3
    cc30:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    cc32:	70 e0       	ldi	r23, 0x00	; 0
    cc34:	80 e0       	ldi	r24, 0x00	; 0
    cc36:	90 e0       	ldi	r25, 0x00	; 0
    cc38:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cc3c:	25 e6       	ldi	r18, 0x65	; 101
    cc3e:	38 e8       	ldi	r19, 0x88	; 136
    cc40:	48 e8       	ldi	r20, 0x88	; 136
    cc42:	5c e3       	ldi	r21, 0x3C	; 60
    cc44:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    cc48:	9b 01       	movw	r18, r22
    cc4a:	ac 01       	movw	r20, r24
    cc4c:	6b 81       	ldd	r22, Y+3	; 0x03
    cc4e:	7c 81       	ldd	r23, Y+4	; 0x04
    cc50:	8d 81       	ldd	r24, Y+5	; 0x05
    cc52:	9e 81       	ldd	r25, Y+6	; 0x06
    cc54:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    cc58:	6b 83       	std	Y+3, r22	; 0x03
    cc5a:	7c 83       	std	Y+4, r23	; 0x04
    cc5c:	8d 83       	std	Y+5, r24	; 0x05
    cc5e:	9e 83       	std	Y+6, r25	; 0x06
    cc60:	01 c0       	rjmp	.+2      	; 0xcc64 <update_player+0x150>
		}
		else
		{
			player->shared.speed = 0;
    cc62:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    cc64:	f8 01       	movw	r30, r16
    cc66:	80 81       	ld	r24, Z
    cc68:	91 81       	ldd	r25, Z+1	; 0x01
    cc6a:	8e 01       	movw	r16, r28
    cc6c:	04 5d       	subi	r16, 0xD4	; 212
    cc6e:	1f 4f       	sbci	r17, 0xFF	; 255
    cc70:	90 ff       	sbrs	r25, 0
    cc72:	33 c0       	rjmp	.+102    	; 0xccda <update_player+0x1c6>
    cc74:	89 89       	ldd	r24, Y+17	; 0x11
    cc76:	81 11       	cpse	r24, r1
    cc78:	30 c0       	rjmp	.+96     	; 0xccda <update_player+0x1c6>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    cc7a:	8a ad       	ldd	r24, Y+58	; 0x3a
    cc7c:	81 11       	cpse	r24, r1
    cc7e:	2d c0       	rjmp	.+90     	; 0xccda <update_player+0x1c6>
				{
					if (player->has_rocket)
    cc80:	89 8d       	ldd	r24, Y+25	; 0x19
    cc82:	88 23       	and	r24, r24
    cc84:	61 f0       	breq	.+24     	; 0xcc9e <update_player+0x18a>
					{
						init_shot_state(shot, ROCKET_SHOT);
    cc86:	61 e0       	ldi	r22, 0x01	; 1
    cc88:	c8 01       	movw	r24, r16
    cc8a:	0e 94 ac 57 	call	0xaf58	; 0xaf58 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    cc8e:	61 e0       	ldi	r22, 0x01	; 1
    cc90:	c8 01       	movw	r24, r16
    cc92:	0e 94 c9 57 	call	0xaf92	; 0xaf92 <set_shot_animations>
						SFX_ROCKET;
    cc96:	2f ef       	ldi	r18, 0xFF	; 255
    cc98:	47 e1       	ldi	r20, 0x17	; 23
    cc9a:	68 e0       	ldi	r22, 0x08	; 8
    cc9c:	0b c0       	rjmp	.+22     	; 0xccb4 <update_player+0x1a0>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    cc9e:	60 e0       	ldi	r22, 0x00	; 0
    cca0:	c8 01       	movw	r24, r16
    cca2:	0e 94 ac 57 	call	0xaf58	; 0xaf58 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    cca6:	60 e0       	ldi	r22, 0x00	; 0
    cca8:	c8 01       	movw	r24, r16
    ccaa:	0e 94 c9 57 	call	0xaf92	; 0xaf92 <set_shot_animations>
						SFX_CANNONBALL;
    ccae:	2f ef       	ldi	r18, 0xFF	; 255
    ccb0:	47 e1       	ldi	r20, 0x17	; 23
    ccb2:	62 e0       	ldi	r22, 0x02	; 2
    ccb4:	84 e0       	ldi	r24, 0x04	; 4
    ccb6:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
					}
					player->active_shots++;
    ccba:	89 89       	ldd	r24, Y+17	; 0x11
    ccbc:	8f 5f       	subi	r24, 0xFF	; 255
    ccbe:	89 8b       	std	Y+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    ccc0:	88 81       	ld	r24, Y
    ccc2:	8c a7       	std	Y+44, r24	; 0x2c
					position_shot(player, shot);
    ccc4:	b8 01       	movw	r22, r16
    ccc6:	ce 01       	movw	r24, r28
    ccc8:	0e 94 49 59 	call	0xb292	; 0xb292 <position_shot>
					shot->active = 1;
    cccc:	81 e0       	ldi	r24, 0x01	; 1
    ccce:	8a af       	std	Y+58, r24	; 0x3a
					if (player->has_over_speed)
    ccd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ccd2:	88 23       	and	r24, r24
    ccd4:	11 f0       	breq	.+4      	; 0xccda <update_player+0x1c6>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    ccd6:	8a ea       	ldi	r24, 0xAA	; 170
    ccd8:	8d a7       	std	Y+45, r24	; 0x2d

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    ccda:	8a ad       	ldd	r24, Y+58	; 0x3a
    ccdc:	88 23       	and	r24, r24
    ccde:	09 f4       	brne	.+2      	; 0xcce2 <update_player+0x1ce>
    cce0:	ac c0       	rjmp	.+344    	; 0xce3a <update_player+0x326>
			{
				switch (shot->shared.direction)
    cce2:	8c a5       	ldd	r24, Y+44	; 0x2c
    cce4:	81 30       	cpi	r24, 0x01	; 1
    cce6:	89 f1       	breq	.+98     	; 0xcd4a <update_player+0x236>
    cce8:	d8 f0       	brcs	.+54     	; 0xcd20 <update_player+0x20c>
    ccea:	82 30       	cpi	r24, 0x02	; 2
    ccec:	09 f4       	brne	.+2      	; 0xccf0 <update_player+0x1dc>
    ccee:	42 c0       	rjmp	.+132    	; 0xcd74 <update_player+0x260>
    ccf0:	83 30       	cpi	r24, 0x03	; 3
    ccf2:	09 f0       	breq	.+2      	; 0xccf6 <update_player+0x1e2>
    ccf4:	5c c0       	rjmp	.+184    	; 0xcdae <update_player+0x29a>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    ccf6:	6d a5       	ldd	r22, Y+45	; 0x2d
    ccf8:	70 e0       	ldi	r23, 0x00	; 0
    ccfa:	80 e0       	ldi	r24, 0x00	; 0
    ccfc:	90 e0       	ldi	r25, 0x00	; 0
    ccfe:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cd02:	25 e6       	ldi	r18, 0x65	; 101
    cd04:	38 e8       	ldi	r19, 0x88	; 136
    cd06:	48 e8       	ldi	r20, 0x88	; 136
    cd08:	5c e3       	ldi	r21, 0x3C	; 60
    cd0a:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    cd0e:	9b 01       	movw	r18, r22
    cd10:	ac 01       	movw	r20, r24
    cd12:	6f a5       	ldd	r22, Y+47	; 0x2f
    cd14:	78 a9       	ldd	r23, Y+48	; 0x30
    cd16:	89 a9       	ldd	r24, Y+49	; 0x31
    cd18:	9a a9       	ldd	r25, Y+50	; 0x32
    cd1a:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    cd1e:	43 c0       	rjmp	.+134    	; 0xcda6 <update_player+0x292>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    cd20:	6d a5       	ldd	r22, Y+45	; 0x2d
    cd22:	70 e0       	ldi	r23, 0x00	; 0
    cd24:	80 e0       	ldi	r24, 0x00	; 0
    cd26:	90 e0       	ldi	r25, 0x00	; 0
    cd28:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cd2c:	25 e6       	ldi	r18, 0x65	; 101
    cd2e:	38 e8       	ldi	r19, 0x88	; 136
    cd30:	48 e8       	ldi	r20, 0x88	; 136
    cd32:	5c e3       	ldi	r21, 0x3C	; 60
    cd34:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    cd38:	9b 01       	movw	r18, r22
    cd3a:	ac 01       	movw	r20, r24
    cd3c:	6b a9       	ldd	r22, Y+51	; 0x33
    cd3e:	7c a9       	ldd	r23, Y+52	; 0x34
    cd40:	8d a9       	ldd	r24, Y+53	; 0x35
    cd42:	9e a9       	ldd	r25, Y+54	; 0x36
    cd44:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    cd48:	29 c0       	rjmp	.+82     	; 0xcd9c <update_player+0x288>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    cd4a:	6d a5       	ldd	r22, Y+45	; 0x2d
    cd4c:	70 e0       	ldi	r23, 0x00	; 0
    cd4e:	80 e0       	ldi	r24, 0x00	; 0
    cd50:	90 e0       	ldi	r25, 0x00	; 0
    cd52:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cd56:	25 e6       	ldi	r18, 0x65	; 101
    cd58:	38 e8       	ldi	r19, 0x88	; 136
    cd5a:	48 e8       	ldi	r20, 0x88	; 136
    cd5c:	5c e3       	ldi	r21, 0x3C	; 60
    cd5e:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    cd62:	9b 01       	movw	r18, r22
    cd64:	ac 01       	movw	r20, r24
    cd66:	6f a5       	ldd	r22, Y+47	; 0x2f
    cd68:	78 a9       	ldd	r23, Y+48	; 0x30
    cd6a:	89 a9       	ldd	r24, Y+49	; 0x31
    cd6c:	9a a9       	ldd	r25, Y+50	; 0x32
    cd6e:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    cd72:	19 c0       	rjmp	.+50     	; 0xcda6 <update_player+0x292>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    cd74:	6d a5       	ldd	r22, Y+45	; 0x2d
    cd76:	70 e0       	ldi	r23, 0x00	; 0
    cd78:	80 e0       	ldi	r24, 0x00	; 0
    cd7a:	90 e0       	ldi	r25, 0x00	; 0
    cd7c:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cd80:	25 e6       	ldi	r18, 0x65	; 101
    cd82:	38 e8       	ldi	r19, 0x88	; 136
    cd84:	48 e8       	ldi	r20, 0x88	; 136
    cd86:	5c e3       	ldi	r21, 0x3C	; 60
    cd88:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    cd8c:	9b 01       	movw	r18, r22
    cd8e:	ac 01       	movw	r20, r24
    cd90:	6b a9       	ldd	r22, Y+51	; 0x33
    cd92:	7c a9       	ldd	r23, Y+52	; 0x34
    cd94:	8d a9       	ldd	r24, Y+53	; 0x35
    cd96:	9e a9       	ldd	r25, Y+54	; 0x36
    cd98:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    cd9c:	6b ab       	std	Y+51, r22	; 0x33
    cd9e:	7c ab       	std	Y+52, r23	; 0x34
    cda0:	8d ab       	std	Y+53, r24	; 0x35
    cda2:	9e ab       	std	Y+54, r25	; 0x36
    cda4:	04 c0       	rjmp	.+8      	; 0xcdae <update_player+0x29a>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    cda6:	6f a7       	std	Y+47, r22	; 0x2f
    cda8:	78 ab       	std	Y+48, r23	; 0x30
    cdaa:	89 ab       	std	Y+49, r24	; 0x31
    cdac:	9a ab       	std	Y+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    cdae:	bb ac       	ldd	r11, Y+59	; 0x3b
    cdb0:	6b 2d       	mov	r22, r11
    cdb2:	70 e0       	ldi	r23, 0x00	; 0
    cdb4:	80 e0       	ldi	r24, 0x00	; 0
    cdb6:	90 e0       	ldi	r25, 0x00	; 0
    cdb8:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cdbc:	6b 01       	movw	r12, r22
    cdbe:	7c 01       	movw	r14, r24
    cdc0:	f8 e0       	ldi	r31, 0x08	; 8
    cdc2:	fb 15       	cp	r31, r11
    cdc4:	80 f0       	brcs	.+32     	; 0xcde6 <update_player+0x2d2>
    cdc6:	8d a5       	ldd	r24, Y+45	; 0x2d
    cdc8:	68 2f       	mov	r22, r24
    cdca:	70 e0       	ldi	r23, 0x00	; 0
    cdcc:	80 e0       	ldi	r24, 0x00	; 0
    cdce:	90 e0       	ldi	r25, 0x00	; 0
    cdd0:	0e 94 5e 71 	call	0xe2bc	; 0xe2bc <__floatsisf>
    cdd4:	25 e6       	ldi	r18, 0x65	; 101
    cdd6:	38 e8       	ldi	r19, 0x88	; 136
    cdd8:	48 e8       	ldi	r20, 0x88	; 136
    cdda:	5c e3       	ldi	r21, 0x3C	; 60
    cddc:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    cde0:	9b 01       	movw	r18, r22
    cde2:	ac 01       	movw	r20, r24
    cde4:	03 c0       	rjmp	.+6      	; 0xcdec <update_player+0x2d8>
    cde6:	20 e0       	ldi	r18, 0x00	; 0
    cde8:	30 e0       	ldi	r19, 0x00	; 0
    cdea:	a9 01       	movw	r20, r18
    cdec:	c7 01       	movw	r24, r14
    cdee:	b6 01       	movw	r22, r12
    cdf0:	0e 94 5b 70 	call	0xe0b6	; 0xe0b6 <__addsf3>
    cdf4:	0e 94 30 71 	call	0xe260	; 0xe260 <__fixunssfsi>
    cdf8:	6b af       	std	Y+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    cdfa:	b8 01       	movw	r22, r16
    cdfc:	ce 01       	movw	r24, r28
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    cdfe:	df 91       	pop	r29
    ce00:	cf 91       	pop	r28
    ce02:	1f 91       	pop	r17
    ce04:	0f 91       	pop	r16
    ce06:	ff 90       	pop	r15
    ce08:	ef 90       	pop	r14
    ce0a:	df 90       	pop	r13
    ce0c:	cf 90       	pop	r12
    ce0e:	bf 90       	pop	r11
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
				collision_detect_shot(player, shot);
    ce10:	0c 94 53 5f 	jmp	0xbea6	; 0xbea6 <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    ce14:	91 ff       	sbrs	r25, 1
    ce16:	11 c0       	rjmp	.+34     	; 0xce3a <update_player+0x326>
		{
			SFX_NAVIGATE;
    ce18:	2f ef       	ldi	r18, 0xFF	; 255
    ce1a:	47 e1       	ldi	r20, 0x17	; 23
    ce1c:	67 e0       	ldi	r22, 0x07	; 7
    ce1e:	84 e0       	ldi	r24, 0x04	; 4
    ce20:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
			exit_game();
		}
	}
}
    ce24:	df 91       	pop	r29
    ce26:	cf 91       	pop	r28
    ce28:	1f 91       	pop	r17
    ce2a:	0f 91       	pop	r16
    ce2c:	ff 90       	pop	r15
    ce2e:	ef 90       	pop	r14
    ce30:	df 90       	pop	r13
    ce32:	cf 90       	pop	r12
    ce34:	bf 90       	pop	r11
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    ce36:	0c 94 7f 65 	jmp	0xcafe	; 0xcafe <exit_game>
		}
	}
}
    ce3a:	df 91       	pop	r29
    ce3c:	cf 91       	pop	r28
    ce3e:	1f 91       	pop	r17
    ce40:	0f 91       	pop	r16
    ce42:	ff 90       	pop	r15
    ce44:	ef 90       	pop	r14
    ce46:	df 90       	pop	r13
    ce48:	cf 90       	pop	r12
    ce4a:	bf 90       	pop	r11
    ce4c:	08 95       	ret

0000ce4e <update_level_helper>:

void update_level_helper(JoyPadState* p, Player* player, JoyPadState* op, Player* other_player, u8 hud_x, u8 ohud_x)
{
    ce4e:	8f 92       	push	r8
    ce50:	9f 92       	push	r9
    ce52:	af 92       	push	r10
    ce54:	bf 92       	push	r11
    ce56:	cf 92       	push	r12
    ce58:	df 92       	push	r13
    ce5a:	ef 92       	push	r14
    ce5c:	0f 93       	push	r16
    ce5e:	1f 93       	push	r17
    ce60:	cf 93       	push	r28
    ce62:	df 93       	push	r29
    ce64:	5c 01       	movw	r10, r24
    ce66:	eb 01       	movw	r28, r22
    ce68:	4a 01       	movw	r8, r20
    ce6a:	69 01       	movw	r12, r18
	u8 next_level;
	Player* tmp;
	
	update_player(p, player);
    ce6c:	0e 94 8a 65 	call	0xcb14	; 0xcb14 <update_player>
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    ce70:	88 89       	ldd	r24, Y+16	; 0x10
    ce72:	82 30       	cpi	r24, 0x02	; 2
    ce74:	08 f4       	brcc	.+2      	; 0xce78 <update_level_helper+0x2a>
    ce76:	76 c0       	rjmp	.+236    	; 0xcf64 <update_level_helper+0x116>
    ce78:	f6 01       	movw	r30, r12
    ce7a:	84 89       	ldd	r24, Z+20	; 0x14
    ce7c:	80 fd       	sbrc	r24, 0
    ce7e:	72 c0       	rjmp	.+228    	; 0xcf64 <update_level_helper+0x116>
	{
	    next_level = game.current_level + 1;
    ce80:	10 91 0c 0c 	lds	r17, 0x0C0C
    ce84:	1f 5f       	subi	r17, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    ce86:	1a 30       	cpi	r17, 0x0A	; 10
    ce88:	48 f1       	brcs	.+82     	; 0xcedc <update_level_helper+0x8e>
    ce8a:	87 85       	ldd	r24, Z+15	; 0x0f
    ce8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    ce8e:	89 17       	cp	r24, r25
    ce90:	09 f4       	brne	.+2      	; 0xce94 <update_level_helper+0x46>
    ce92:	68 c0       	rjmp	.+208    	; 0xcf64 <update_level_helper+0x116>
		
		// Load boss fight
		if (next_level >= LEVEL_COUNT && game.boss_fight_status == 0)
    ce94:	20 91 0e 0c 	lds	r18, 0x0C0E
    ce98:	21 11       	cpse	r18, r1
    ce9a:	20 c0       	rjmp	.+64     	; 0xcedc <update_level_helper+0x8e>
		{
			game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    ce9c:	21 e0       	ldi	r18, 0x01	; 1
    ce9e:	20 93 0e 0c 	sts	0x0C0E, r18
			game.boss_fight_player = player;
    cea2:	d0 93 13 0c 	sts	0x0C13, r29
    cea6:	c0 93 12 0c 	sts	0x0C12, r28
			game.boss_fight_joypad = p;
    ceaa:	b0 92 15 0c 	sts	0x0C15, r11
    ceae:	a0 92 14 0c 	sts	0x0C14, r10
			game.boss_fight_player_hud = hud_x;
    ceb2:	00 93 11 0c 	sts	0x0C11, r16
			if (other_player->score > player->score)
    ceb6:	98 17       	cp	r25, r24
    ceb8:	50 f4       	brcc	.+20     	; 0xcece <update_level_helper+0x80>
			{
				game.boss_fight_player = other_player;
    ceba:	d0 92 13 0c 	sts	0x0C13, r13
    cebe:	c0 92 12 0c 	sts	0x0C12, r12
				game.boss_fight_joypad = op;
    cec2:	90 92 15 0c 	sts	0x0C15, r9
    cec6:	80 92 14 0c 	sts	0x0C14, r8
				game.boss_fight_player_hud = ohud_x;
    ceca:	e0 92 11 0c 	sts	0x0C11, r14
			}
			scope_animation.tile_index = 15 + 5*30;
    cece:	85 ea       	ldi	r24, 0xA5	; 165
    ced0:	90 e0       	ldi	r25, 0x00	; 0
    ced2:	90 93 37 10 	sts	0x1037, r25
    ced6:	80 93 36 10 	sts	0x1036, r24
    ceda:	44 c0       	rjmp	.+136    	; 0xcf64 <update_level_helper+0x116>
			return;
		}

		load_level_tiles(true);
    cedc:	81 e0       	ldi	r24, 0x01	; 1
    cede:	0e 94 26 63 	call	0xc64c	; 0xc64c <load_level_tiles>
		SetSpriteVisibility(false);
    cee2:	80 e0       	ldi	r24, 0x00	; 0
    cee4:	0e 94 91 52 	call	0xa522	; 0xa522 <SetSpriteVisibility>
		print_level_score(player, other_player);
    cee8:	b6 01       	movw	r22, r12
    ceea:	ce 01       	movw	r24, r28
    ceec:	0e 94 b6 59 	call	0xb36c	; 0xb36c <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    cef0:	82 e0       	ldi	r24, 0x02	; 2
    cef2:	0e 94 32 57 	call	0xae64	; 0xae64 <LBWaitSeconds>
		player->level_score = 0;
    cef6:	18 8a       	std	Y+16, r1	; 0x10
		other_player->level_score = 0;
    cef8:	f6 01       	movw	r30, r12
    cefa:	10 8a       	std	Z+16, r1	; 0x10
		SFX_LEVEL_CLEAR;
    cefc:	2f ef       	ldi	r18, 0xFF	; 255
    cefe:	47 e1       	ldi	r20, 0x17	; 23
    cf00:	64 e0       	ldi	r22, 0x04	; 4
    cf02:	84 e0       	ldi	r24, 0x04	; 4
    cf04:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    cf08:	1a 30       	cpi	r17, 0x0A	; 10
    cf0a:	f0 f0       	brcs	.+60     	; 0xcf48 <update_level_helper+0xfa>
		{
		    if (other_player->score > player->score)
    cf0c:	f6 01       	movw	r30, r12
    cf0e:	97 85       	ldd	r25, Z+15	; 0x0f
    cf10:	8f 85       	ldd	r24, Y+15	; 0x0f
    cf12:	89 17       	cp	r24, r25
    cf14:	28 f4       	brcc	.+10     	; 0xcf20 <update_level_helper+0xd2>
    cf16:	9c 2f       	mov	r25, r28
    cf18:	8d 2f       	mov	r24, r29
		    {
		        tmp = player;
		        player = other_player;
    cf1a:	e6 01       	movw	r28, r12
		        other_player = tmp;
    cf1c:	c9 2e       	mov	r12, r25
    cf1e:	d8 2e       	mov	r13, r24
		    }
		    print_final_score(player, other_player);
    cf20:	b6 01       	movw	r22, r12
    cf22:	ce 01       	movw	r24, r28
    cf24:	0e 94 f8 59 	call	0xb3f0	; 0xb3f0 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    cf28:	82 e0       	ldi	r24, 0x02	; 2
    cf2a:	0e 94 32 57 	call	0xae64	; 0xae64 <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    cf2e:	df 91       	pop	r29
    cf30:	cf 91       	pop	r28
    cf32:	1f 91       	pop	r17
    cf34:	0f 91       	pop	r16
    cf36:	ef 90       	pop	r14
    cf38:	df 90       	pop	r13
    cf3a:	cf 90       	pop	r12
    cf3c:	bf 90       	pop	r11
    cf3e:	af 90       	pop	r10
    cf40:	9f 90       	pop	r9
    cf42:	8f 90       	pop	r8
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    cf44:	0c 94 7f 65 	jmp	0xcafe	; 0xcafe <exit_game>
		}
		else
		{
			level_transition(next_level);
    cf48:	81 2f       	mov	r24, r17
		}
	}
}
    cf4a:	df 91       	pop	r29
    cf4c:	cf 91       	pop	r28
    cf4e:	1f 91       	pop	r17
    cf50:	0f 91       	pop	r16
    cf52:	ef 90       	pop	r14
    cf54:	df 90       	pop	r13
    cf56:	cf 90       	pop	r12
    cf58:	bf 90       	pop	r11
    cf5a:	af 90       	pop	r10
    cf5c:	9f 90       	pop	r9
    cf5e:	8f 90       	pop	r8
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    cf60:	0c 94 67 64 	jmp	0xc8ce	; 0xc8ce <level_transition>
		}
	}
}
    cf64:	df 91       	pop	r29
    cf66:	cf 91       	pop	r28
    cf68:	1f 91       	pop	r17
    cf6a:	0f 91       	pop	r16
    cf6c:	ef 90       	pop	r14
    cf6e:	df 90       	pop	r13
    cf70:	cf 90       	pop	r12
    cf72:	bf 90       	pop	r11
    cf74:	af 90       	pop	r10
    cf76:	9f 90       	pop	r9
    cf78:	8f 90       	pop	r8
    cf7a:	08 95       	ret

0000cf7c <update_level>:
{
	
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    cf7c:	cf 92       	push	r12
    cf7e:	df 92       	push	r13
    cf80:	ef 92       	push	r14
    cf82:	ff 92       	push	r15
    cf84:	0f 93       	push	r16
    cf86:	1f 93       	push	r17
    cf88:	cf 93       	push	r28
    cf8a:	df 93       	push	r29
    cf8c:	ec 01       	movw	r28, r24
    cf8e:	6b 01       	movw	r12, r22
	u16 held = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	if (game.paused)
    cf90:	80 91 0d 0c 	lds	r24, 0x0C0D
    cf94:	88 23       	and	r24, r24
    cf96:	21 f1       	breq	.+72     	; 0xcfe0 <update_level+0x64>
	{
		// Render
		SetSpriteVisibility(false);
    cf98:	80 e0       	ldi	r24, 0x00	; 0
    cf9a:	0e 94 91 52 	call	0xa522	; 0xa522 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    cf9e:	48 e9       	ldi	r20, 0x98	; 152
    cfa0:	53 e8       	ldi	r21, 0x83	; 131
    cfa2:	6c e0       	ldi	r22, 0x0C	; 12
    cfa4:	88 e0       	ldi	r24, 0x08	; 8
    cfa6:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
		Print(12, 13, (char*) strPaused);
    cfaa:	47 e0       	ldi	r20, 0x07	; 7
    cfac:	5a e0       	ldi	r21, 0x0A	; 10
    cfae:	6d e0       	ldi	r22, 0x0D	; 13
    cfb0:	70 e0       	ldi	r23, 0x00	; 0
    cfb2:	8c e0       	ldi	r24, 0x0C	; 12
    cfb4:	90 e0       	ldi	r25, 0x00	; 0
    cfb6:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
		Print(11, 14, (char*) strExit);
    cfba:	4e e0       	ldi	r20, 0x0E	; 14
    cfbc:	5a e0       	ldi	r21, 0x0A	; 10
    cfbe:	6e e0       	ldi	r22, 0x0E	; 14
    cfc0:	70 e0       	ldi	r23, 0x00	; 0
    cfc2:	8b e0       	ldi	r24, 0x0B	; 11
    cfc4:	90 e0       	ldi	r25, 0x00	; 0
    cfc6:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
		
		// Update
		update_player(p1, &player1);
    cfca:	66 e3       	ldi	r22, 0x36	; 54
    cfcc:	7c e0       	ldi	r23, 0x0C	; 12
    cfce:	ce 01       	movw	r24, r28
    cfd0:	0e 94 8a 65 	call	0xcb14	; 0xcb14 <update_player>
		update_player(p1, &player2);
    cfd4:	64 ea       	ldi	r22, 0xA4	; 164
    cfd6:	7f e0       	ldi	r23, 0x0F	; 15
    cfd8:	ce 01       	movw	r24, r28
    cfda:	0e 94 8a 65 	call	0xcb14	; 0xcb14 <update_player>
    cfde:	ff c0       	rjmp	.+510    	; 0xd1de <update_level+0x262>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    cfe0:	90 91 0e 0c 	lds	r25, 0x0C0E
	{
		// Render
		SetSpriteVisibility(true);
    cfe4:	81 e0       	ldi	r24, 0x01	; 1
		
		// Update
		update_player(p1, &player1);
		update_player(p1, &player2);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    cfe6:	91 30       	cpi	r25, 0x01	; 1
    cfe8:	29 f4       	brne	.+10     	; 0xcff4 <update_level+0x78>
	{
		// Render
		SetSpriteVisibility(true);
    cfea:	0e 94 91 52 	call	0xa522	; 0xa522 <SetSpriteVisibility>
		render_boss_fight_scope_load();
    cfee:	0e 94 97 64 	call	0xc92e	; 0xc92e <render_boss_fight_scope_load>
    cff2:	07 c0       	rjmp	.+14     	; 0xd002 <update_level+0x86>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    cff4:	92 30       	cpi	r25, 0x02	; 2
    cff6:	09 f0       	breq	.+2      	; 0xcffa <update_level+0x7e>
    cff8:	50 c0       	rjmp	.+160    	; 0xd09a <update_level+0x11e>
	{
		// Render
		SetSpriteVisibility(true);
    cffa:	0e 94 91 52 	call	0xa522	; 0xa522 <SetSpriteVisibility>
		render_boss_fight_sub_load();
    cffe:	0e 94 a6 64 	call	0xc94c	; 0xc94c <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d002:	60 e0       	ldi	r22, 0x00	; 0
    d004:	80 91 12 0c 	lds	r24, 0x0C12
    d008:	90 91 13 0c 	lds	r25, 0x0C13
    d00c:	0e 94 47 5b 	call	0xb68e	; 0xb68e <tank_map>
    d010:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d012:	40 e0       	ldi	r20, 0x00	; 0
    d014:	6b ec       	ldi	r22, 0xCB	; 203
    d016:	79 e4       	ldi	r23, 0x49	; 73
    d018:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d01c:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d01e:	6c 2f       	mov	r22, r28
    d020:	80 91 12 0c 	lds	r24, 0x0C12
    d024:	90 91 13 0c 	lds	r25, 0x0C13
    d028:	0e 94 b0 5b 	call	0xb760	; 0xb760 <shot_map>
    d02c:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d02e:	40 e0       	ldi	r20, 0x00	; 0
    d030:	61 ed       	ldi	r22, 0xD1	; 209
    d032:	79 e4       	ldi	r23, 0x49	; 73
    d034:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d038:	6c 2f       	mov	r22, r28
    d03a:	80 91 12 0c 	lds	r24, 0x0C12
    d03e:	90 91 13 0c 	lds	r25, 0x0C13
    d042:	0e 94 b0 5b 	call	0xb760	; 0xb760 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d046:	60 e0       	ldi	r22, 0x00	; 0
    d048:	80 91 12 0c 	lds	r24, 0x0C12
    d04c:	90 91 13 0c 	lds	r25, 0x0C13
    d050:	0e 94 a3 5a 	call	0xb546	; 0xb546 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d054:	6c 2f       	mov	r22, r28
    d056:	80 91 12 0c 	lds	r24, 0x0C12
    d05a:	90 91 13 0c 	lds	r25, 0x0C13
    d05e:	0e 94 cc 5a 	call	0xb598	; 0xb598 <render_shot>
		render_shot(&player2, p2_shot_index);
    d062:	6d 2f       	mov	r22, r29
    d064:	84 ea       	ldi	r24, 0xA4	; 164
    d066:	9f e0       	ldi	r25, 0x0F	; 15
    d068:	0e 94 cc 5a 	call	0xb598	; 0xb598 <render_shot>
		render_tile_explosions(&tile_animations);
    d06c:	89 e1       	ldi	r24, 0x19	; 25
    d06e:	9c e0       	ldi	r25, 0x0C	; 12
    d070:	0e 94 f8 5a 	call	0xb5f0	; 0xb5f0 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d074:	60 91 12 0c 	lds	r22, 0x0C12
    d078:	70 91 13 0c 	lds	r23, 0x0C13
    d07c:	80 91 14 0c 	lds	r24, 0x0C14
    d080:	90 91 15 0c 	lds	r25, 0x0C15
    d084:	0e 94 8a 65 	call	0xcb14	; 0xcb14 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d088:	60 91 11 0c 	lds	r22, 0x0C11
    d08c:	80 91 12 0c 	lds	r24, 0x0C12
    d090:	90 91 13 0c 	lds	r25, 0x0C13
    d094:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <collision_detect_player>
    d098:	a2 c0       	rjmp	.+324    	; 0xd1de <update_level+0x262>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    d09a:	94 30       	cpi	r25, 0x04	; 4
    d09c:	19 f4       	brne	.+6      	; 0xd0a4 <update_level+0x128>
	{
		// Render
		SetSpriteVisibility(true);
    d09e:	0e 94 91 52 	call	0xa522	; 0xa522 <SetSpriteVisibility>
    d0a2:	af cf       	rjmp	.-162    	; 0xd002 <update_level+0x86>
		// Update
		update_boss_fight();
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_SINKING)
    d0a4:	90 32       	cpi	r25, 0x20	; 32
    d0a6:	19 f4       	brne	.+6      	; 0xd0ae <update_level+0x132>
	{
		// Render
		SetSpriteVisibility(true);
    d0a8:	0e 94 91 52 	call	0xa522	; 0xa522 <SetSpriteVisibility>
    d0ac:	e3 cf       	rjmp	.-58     	; 0xd074 <update_level+0xf8>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else
	{
		SetSpriteVisibility(true);
    d0ae:	0e 94 91 52 	call	0xa522	; 0xa522 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    d0b2:	60 e0       	ldi	r22, 0x00	; 0
    d0b4:	86 e3       	ldi	r24, 0x36	; 54
    d0b6:	9c e0       	ldi	r25, 0x0C	; 12
    d0b8:	0e 94 47 5b 	call	0xb68e	; 0xb68e <tank_map>
    d0bc:	f8 2e       	mov	r15, r24
		p1_shot_index = tank_map(&player2, p2_index);
    d0be:	68 2f       	mov	r22, r24
    d0c0:	84 ea       	ldi	r24, 0xA4	; 164
    d0c2:	9f e0       	ldi	r25, 0x0F	; 15
    d0c4:	0e 94 47 5b 	call	0xb68e	; 0xb68e <tank_map>
    d0c8:	08 2f       	mov	r16, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    d0ca:	68 2f       	mov	r22, r24
    d0cc:	86 e3       	ldi	r24, 0x36	; 54
    d0ce:	9c e0       	ldi	r25, 0x0C	; 12
    d0d0:	0e 94 b0 5b 	call	0xb760	; 0xb760 <shot_map>
    d0d4:	18 2f       	mov	r17, r24
		shot_map(&player2, p2_shot_index);
    d0d6:	68 2f       	mov	r22, r24
    d0d8:	84 ea       	ldi	r24, 0xA4	; 164
    d0da:	9f e0       	ldi	r25, 0x0F	; 15
    d0dc:	0e 94 b0 5b 	call	0xb760	; 0xb760 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    d0e0:	40 91 02 01 	lds	r20, 0x0102
    d0e4:	6f e0       	ldi	r22, 0x0F	; 15
    d0e6:	86 e3       	ldi	r24, 0x36	; 54
    d0e8:	9c e0       	ldi	r25, 0x0C	; 12
    d0ea:	0e 94 7b 5a 	call	0xb4f6	; 0xb4f6 <render_banter>
    d0ee:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    d0f2:	40 91 01 01 	lds	r20, 0x0101
    d0f6:	60 e0       	ldi	r22, 0x00	; 0
    d0f8:	84 ea       	ldi	r24, 0xA4	; 164
    d0fa:	9f e0       	ldi	r25, 0x0F	; 15
    d0fc:	0e 94 7b 5a 	call	0xb4f6	; 0xb4f6 <render_banter>
    d100:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    d104:	60 e0       	ldi	r22, 0x00	; 0
    d106:	86 e3       	ldi	r24, 0x36	; 54
    d108:	9c e0       	ldi	r25, 0x0C	; 12
    d10a:	0e 94 a3 5a 	call	0xb546	; 0xb546 <render_player>
		render_player(&player2, p2_index);
    d10e:	6f 2d       	mov	r22, r15
    d110:	84 ea       	ldi	r24, 0xA4	; 164
    d112:	9f e0       	ldi	r25, 0x0F	; 15
    d114:	0e 94 a3 5a 	call	0xb546	; 0xb546 <render_player>
		render_shot(&player1, p1_shot_index);
    d118:	60 2f       	mov	r22, r16
    d11a:	86 e3       	ldi	r24, 0x36	; 54
    d11c:	9c e0       	ldi	r25, 0x0C	; 12
    d11e:	0e 94 cc 5a 	call	0xb598	; 0xb598 <render_shot>
		render_shot(&player2, p2_shot_index);
    d122:	61 2f       	mov	r22, r17
    d124:	84 ea       	ldi	r24, 0xA4	; 164
    d126:	9f e0       	ldi	r25, 0x0F	; 15
    d128:	0e 94 cc 5a 	call	0xb598	; 0xb598 <render_shot>
		render_tile_explosions(&tile_animations);
    d12c:	89 e1       	ldi	r24, 0x19	; 25
    d12e:	9c e0       	ldi	r25, 0x0C	; 12
    d130:	0e 94 f8 5a 	call	0xb5f0	; 0xb5f0 <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    d134:	80 91 16 0c 	lds	r24, 0x0C16
    d138:	90 91 17 0c 	lds	r25, 0x0C17
    d13c:	89 3e       	cpi	r24, 0xE9	; 233
    d13e:	93 40       	sbci	r25, 0x03	; 3
    d140:	88 f0       	brcs	.+34     	; 0xd164 <update_level+0x1e8>
    d142:	80 91 36 10 	lds	r24, 0x1036
    d146:	90 91 37 10 	lds	r25, 0x1037
    d14a:	18 16       	cp	r1, r24
    d14c:	19 06       	cpc	r1, r25
    d14e:	54 f4       	brge	.+20     	; 0xd164 <update_level+0x1e8>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    d150:	8a e2       	ldi	r24, 0x2A	; 42
    d152:	90 e1       	ldi	r25, 0x10	; 16
    d154:	0e 94 2d 5b 	call	0xb65a	; 0xb65a <render_scope>
    d158:	88 23       	and	r24, r24
    d15a:	21 f0       	breq	.+8      	; 0xd164 <update_level+0x1e8>
    d15c:	10 92 17 0c 	sts	0x0C17, r1
    d160:	10 92 16 0c 	sts	0x0C16, r1
		}
		game.scope_counter++;
    d164:	20 91 16 0c 	lds	r18, 0x0C16
    d168:	30 91 17 0c 	lds	r19, 0x0C17
    d16c:	2f 5f       	subi	r18, 0xFF	; 255
    d16e:	3f 4f       	sbci	r19, 0xFF	; 255
    d170:	30 93 17 0c 	sts	0x0C17, r19
    d174:	20 93 16 0c 	sts	0x0C16, r18
		
		// Update
		update_level_helper(p1, &player1, p2, &player2, 0, 15);
    d178:	8f e0       	ldi	r24, 0x0F	; 15
    d17a:	e8 2e       	mov	r14, r24
    d17c:	00 e0       	ldi	r16, 0x00	; 0
    d17e:	24 ea       	ldi	r18, 0xA4	; 164
    d180:	3f e0       	ldi	r19, 0x0F	; 15
    d182:	a6 01       	movw	r20, r12
    d184:	66 e3       	ldi	r22, 0x36	; 54
    d186:	7c e0       	ldi	r23, 0x0C	; 12
    d188:	ce 01       	movw	r24, r28
    d18a:	0e 94 27 67 	call	0xce4e	; 0xce4e <update_level_helper>
		update_level_helper(p2, &player2, p1, &player1, 15, 0);
    d18e:	e1 2c       	mov	r14, r1
    d190:	0f e0       	ldi	r16, 0x0F	; 15
    d192:	26 e3       	ldi	r18, 0x36	; 54
    d194:	3c e0       	ldi	r19, 0x0C	; 12
    d196:	ae 01       	movw	r20, r28
    d198:	64 ea       	ldi	r22, 0xA4	; 164
    d19a:	7f e0       	ldi	r23, 0x0F	; 15
    d19c:	c6 01       	movw	r24, r12
    d19e:	0e 94 27 67 	call	0xce4e	; 0xce4e <update_level_helper>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    d1a2:	60 e0       	ldi	r22, 0x00	; 0
    d1a4:	86 e3       	ldi	r24, 0x36	; 54
    d1a6:	9c e0       	ldi	r25, 0x0C	; 12
    d1a8:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <collision_detect_player>
    d1ac:	88 23       	and	r24, r24
    d1ae:	41 f0       	breq	.+16     	; 0xd1c0 <update_level+0x244>
    d1b0:	2f e0       	ldi	r18, 0x0F	; 15
    d1b2:	40 e0       	ldi	r20, 0x00	; 0
    d1b4:	64 ea       	ldi	r22, 0xA4	; 164
    d1b6:	7f e0       	ldi	r23, 0x0F	; 15
    d1b8:	86 e3       	ldi	r24, 0x36	; 54
    d1ba:	9c e0       	ldi	r25, 0x0C	; 12
    d1bc:	0e 94 5d 61 	call	0xc2ba	; 0xc2ba <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    d1c0:	6f e0       	ldi	r22, 0x0F	; 15
    d1c2:	84 ea       	ldi	r24, 0xA4	; 164
    d1c4:	9f e0       	ldi	r25, 0x0F	; 15
    d1c6:	0e 94 7e 61 	call	0xc2fc	; 0xc2fc <collision_detect_player>
    d1ca:	88 23       	and	r24, r24
    d1cc:	41 f0       	breq	.+16     	; 0xd1de <update_level+0x262>
    d1ce:	20 e0       	ldi	r18, 0x00	; 0
    d1d0:	4f e0       	ldi	r20, 0x0F	; 15
    d1d2:	66 e3       	ldi	r22, 0x36	; 54
    d1d4:	7c e0       	ldi	r23, 0x0C	; 12
    d1d6:	84 ea       	ldi	r24, 0xA4	; 164
    d1d8:	9f e0       	ldi	r25, 0x0F	; 15
    d1da:	0e 94 5d 61 	call	0xc2ba	; 0xc2ba <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    d1de:	80 91 18 0c 	lds	r24, 0x0C18
    d1e2:	83 30       	cpi	r24, 0x03	; 3
    d1e4:	69 f4       	brne	.+26     	; 0xd200 <update_level+0x284>
	{
		demo_counter++;
    d1e6:	80 91 35 0b 	lds	r24, 0x0B35
    d1ea:	90 91 36 0b 	lds	r25, 0x0B36
    d1ee:	01 96       	adiw	r24, 0x01	; 1
    d1f0:	90 93 36 0b 	sts	0x0B36, r25
    d1f4:	80 93 35 0b 	sts	0x0B35, r24
		held = ReadJoypad(0);
    d1f8:	80 e0       	ldi	r24, 0x00	; 0
    d1fa:	0e 94 14 46 	call	0x8c28	; 0x8c28 <ReadJoypad>
    d1fe:	02 c0       	rjmp	.+4      	; 0xd204 <update_level+0x288>
{
	char p1_index = 0;
	char p2_index = 0;
	char p1_shot_index = 0;
	char p2_shot_index = 0;
	u16 held = 0;
    d200:	80 e0       	ldi	r24, 0x00	; 0
    d202:	90 e0       	ldi	r25, 0x00	; 0
	if (game.selection == CPUVCPU) 
	{
		demo_counter++;
		held = ReadJoypad(0);
	}
	if (game.selection == CPUVCPU &&
    d204:	20 91 18 0c 	lds	r18, 0x0C18
    d208:	23 30       	cpi	r18, 0x03	; 3
    d20a:	e9 f4       	brne	.+58     	; 0xd246 <update_level+0x2ca>
    d20c:	8f 70       	andi	r24, 0x0F	; 15
    d20e:	9e 70       	andi	r25, 0x0E	; 14
	    (((held & BTN_X) ||
		 (held & BTN_START) ||
		 (held & BTN_SL) ||
		 (held & BTN_SR) ||
		 (held & BTN_SELECT) ||
		 (held & BTN_Y) ||
    d210:	89 2b       	or	r24, r25
    d212:	39 f4       	brne	.+14     	; 0xd222 <update_level+0x2a6>
		 (held & BTN_B)) ||
    d214:	80 91 35 0b 	lds	r24, 0x0B35
    d218:	90 91 36 0b 	lds	r25, 0x0B36
    d21c:	88 30       	cpi	r24, 0x08	; 8
    d21e:	97 40       	sbci	r25, 0x07	; 7
    d220:	90 f0       	brcs	.+36     	; 0xd246 <update_level+0x2ca>
		demo_counter >= DEMO_LENGTH)
		)
	{
		demo_counter = 0;
    d222:	10 92 36 0b 	sts	0x0B36, r1
    d226:	10 92 35 0b 	sts	0x0B35, r1
		fade_through();
    d22a:	0e 94 c8 58 	call	0xb190	; 0xb190 <fade_through>
		init_game_state();
    d22e:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <init_game_state>
		load_splash();
	}
}
    d232:	df 91       	pop	r29
    d234:	cf 91       	pop	r28
    d236:	1f 91       	pop	r17
    d238:	0f 91       	pop	r16
    d23a:	ff 90       	pop	r15
    d23c:	ef 90       	pop	r14
    d23e:	df 90       	pop	r13
    d240:	cf 90       	pop	r12
		)
	{
		demo_counter = 0;
		fade_through();
		init_game_state();
		load_splash();
    d242:	0c 94 b7 64 	jmp	0xc96e	; 0xc96e <load_splash>
	}
}
    d246:	df 91       	pop	r29
    d248:	cf 91       	pop	r28
    d24a:	1f 91       	pop	r17
    d24c:	0f 91       	pop	r16
    d24e:	ff 90       	pop	r15
    d250:	ef 90       	pop	r14
    d252:	df 90       	pop	r13
    d254:	cf 90       	pop	r12
    d256:	08 95       	ret

0000d258 <update_tank_rank>:
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    d258:	cf 93       	push	r28
    d25a:	df 93       	push	r29
    d25c:	ec 01       	movw	r28, r24
	static u16 tank_rank_counter = 0;
	
	// Update
	if (p1->pressed & BTN_X)
    d25e:	88 81       	ld	r24, Y
    d260:	99 81       	ldd	r25, Y+1	; 0x01
    d262:	91 ff       	sbrs	r25, 1
    d264:	0e c0       	rjmp	.+28     	; 0xd282 <update_tank_rank+0x2a>
	{
		tank_rank_counter = 0;
    d266:	10 92 31 0b 	sts	0x0B31, r1
    d26a:	10 92 30 0b 	sts	0x0B30, r1
		SFX_NAVIGATE;
    d26e:	2f ef       	ldi	r18, 0xFF	; 255
    d270:	47 e1       	ldi	r20, 0x17	; 23
    d272:	67 e0       	ldi	r22, 0x07	; 7
    d274:	84 e0       	ldi	r24, 0x04	; 4
    d276:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
		fade_through();
    d27a:	0e 94 c8 58 	call	0xb190	; 0xb190 <fade_through>
		load_splash();
    d27e:	0e 94 b7 64 	call	0xc96e	; 0xc96e <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    d282:	8c 81       	ldd	r24, Y+4	; 0x04
    d284:	9d 81       	ldd	r25, Y+5	; 0x05
    d286:	92 ff       	sbrs	r25, 2
    d288:	1f c0       	rjmp	.+62     	; 0xd2c8 <update_tank_rank+0x70>
    d28a:	8e 81       	ldd	r24, Y+6	; 0x06
    d28c:	8f 3f       	cpi	r24, 0xFF	; 255
    d28e:	e1 f4       	brne	.+56     	; 0xd2c8 <update_tank_rank+0x70>
	{
		tank_rank_counter = 0;
    d290:	10 92 31 0b 	sts	0x0B31, r1
    d294:	10 92 30 0b 	sts	0x0B30, r1
	    SFX_NAVIGATE;
    d298:	2f ef       	ldi	r18, 0xFF	; 255
    d29a:	47 e1       	ldi	r20, 0x17	; 23
    d29c:	67 e0       	ldi	r22, 0x07	; 7
    d29e:	84 e0       	ldi	r24, 0x04	; 4
    d2a0:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
	    init_scores(&scores);
    d2a4:	84 ec       	ldi	r24, 0xC4	; 196
    d2a6:	9b e0       	ldi	r25, 0x0B	; 11
    d2a8:	0e 94 41 57 	call	0xae82	; 0xae82 <init_scores>
	    init_handles(&handles);
    d2ac:	8b ee       	ldi	r24, 0xEB	; 235
    d2ae:	9b e0       	ldi	r25, 0x0B	; 11
    d2b0:	0e 94 4d 57 	call	0xae9a	; 0xae9a <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d2b4:	84 ec       	ldi	r24, 0xC4	; 196
    d2b6:	9b e0       	ldi	r25, 0x0B	; 11
    d2b8:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <EepromWriteBlock>
    d2bc:	8b ee       	ldi	r24, 0xEB	; 235
    d2be:	9b e0       	ldi	r25, 0x0B	; 11
    d2c0:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    d2c4:	0e 94 e7 64 	call	0xc9ce	; 0xc9ce <load_tank_rank>
	}
	
	if (tank_rank_counter > TANK_RANK_LENGTH)
    d2c8:	80 91 30 0b 	lds	r24, 0x0B30
    d2cc:	90 91 31 0b 	lds	r25, 0x0B31
    d2d0:	85 38       	cpi	r24, 0x85	; 133
    d2d2:	93 40       	sbci	r25, 0x03	; 3
    d2d4:	70 f0       	brcs	.+28     	; 0xd2f2 <update_tank_rank+0x9a>
	{
		tank_rank_counter = 0;
    d2d6:	10 92 31 0b 	sts	0x0B31, r1
    d2da:	10 92 30 0b 	sts	0x0B30, r1
		SFX_NAVIGATE;
    d2de:	2f ef       	ldi	r18, 0xFF	; 255
    d2e0:	47 e1       	ldi	r20, 0x17	; 23
    d2e2:	67 e0       	ldi	r22, 0x07	; 7
    d2e4:	84 e0       	ldi	r24, 0x04	; 4
    d2e6:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
		fade_through();
    d2ea:	0e 94 c8 58 	call	0xb190	; 0xb190 <fade_through>
		load_splash();
    d2ee:	0e 94 b7 64 	call	0xc96e	; 0xc96e <load_splash>
	}
	tank_rank_counter++;
    d2f2:	80 91 30 0b 	lds	r24, 0x0B30
    d2f6:	90 91 31 0b 	lds	r25, 0x0B31
    d2fa:	01 96       	adiw	r24, 0x01	; 1
    d2fc:	90 93 31 0b 	sts	0x0B31, r25
    d300:	80 93 30 0b 	sts	0x0B30, r24
}
    d304:	df 91       	pop	r29
    d306:	cf 91       	pop	r28
    d308:	08 95       	ret

0000d30a <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    d30a:	0f 93       	push	r16
    d30c:	1f 93       	push	r17
    d30e:	cf 93       	push	r28
    d310:	df 93       	push	r29
    d312:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    d314:	fb 01       	movw	r30, r22
    d316:	20 81       	ld	r18, Z
    d318:	31 81       	ldd	r19, Z+1	; 0x01
    d31a:	f9 01       	movw	r30, r18
    d31c:	e0 71       	andi	r30, 0x10	; 16
    d31e:	ff 27       	eor	r31, r31
    d320:	24 ff       	sbrs	r18, 4
    d322:	09 c0       	rjmp	.+18     	; 0xd336 <_handle_select_helper+0x2c>
    d324:	8d 81       	ldd	r24, Y+5	; 0x05
    d326:	81 11       	cpse	r24, r1
    d328:	06 c0       	rjmp	.+12     	; 0xd336 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    d32a:	88 81       	ld	r24, Y
    d32c:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d32e:	87 ff       	sbrs	r24, 7
    d330:	0f c0       	rjmp	.+30     	; 0xd350 <_handle_select_helper+0x46>
    d332:	18 82       	st	Y, r1
    d334:	25 c0       	rjmp	.+74     	; 0xd380 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    d336:	b9 01       	movw	r22, r18
    d338:	60 72       	andi	r22, 0x20	; 32
    d33a:	77 27       	eor	r23, r23
    d33c:	25 ff       	sbrs	r18, 5
    d33e:	0a c0       	rjmp	.+20     	; 0xd354 <_handle_select_helper+0x4a>
    d340:	8d 81       	ldd	r24, Y+5	; 0x05
    d342:	81 11       	cpse	r24, r1
    d344:	07 c0       	rjmp	.+14     	; 0xd354 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    d346:	88 81       	ld	r24, Y
    d348:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d34a:	89 30       	cpi	r24, 0x09	; 9
    d34c:	0c f0       	brlt	.+2      	; 0xd350 <_handle_select_helper+0x46>
    d34e:	88 e0       	ldi	r24, 0x08	; 8
    d350:	88 83       	st	Y, r24
    d352:	16 c0       	rjmp	.+44     	; 0xd380 <_handle_select_helper+0x76>
    d354:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    d356:	a9 01       	movw	r20, r18
    d358:	44 27       	eor	r20, r20
    d35a:	51 70       	andi	r21, 0x01	; 1
    d35c:	30 ff       	sbrs	r19, 0
    d35e:	1a c0       	rjmp	.+52     	; 0xd394 <_handle_select_helper+0x8a>
    d360:	ad 81       	ldd	r26, Y+5	; 0x05
    d362:	a1 11       	cpse	r26, r1
    d364:	17 c0       	rjmp	.+46     	; 0xd394 <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    d366:	81 e0       	ldi	r24, 0x01	; 1
    d368:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    d36a:	69 91       	ld	r22, Y+
    d36c:	f3 e0       	ldi	r31, 0x03	; 3
    d36e:	6f 02       	muls	r22, r31
    d370:	b0 01       	movw	r22, r0
    d372:	11 24       	eor	r1, r1
    d374:	63 51       	subi	r22, 0x13	; 19
    d376:	74 4f       	sbci	r23, 0xF4	; 244
    d378:	43 e0       	ldi	r20, 0x03	; 3
    d37a:	ce 01       	movw	r24, r28
    d37c:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
		SFX_NAVIGATE;
    d380:	2f ef       	ldi	r18, 0xFF	; 255
    d382:	47 e1       	ldi	r20, 0x17	; 23
    d384:	67 e0       	ldi	r22, 0x07	; 7
    d386:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    d388:	df 91       	pop	r29
    d38a:	cf 91       	pop	r28
    d38c:	1f 91       	pop	r17
    d38e:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    d390:	0c 94 7a 49 	jmp	0x92f4	; 0x92f4 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    d394:	27 ff       	sbrs	r18, 7
    d396:	09 c0       	rjmp	.+18     	; 0xd3aa <_handle_select_helper+0xa0>
    d398:	ad 81       	ldd	r26, Y+5	; 0x05
    d39a:	a1 30       	cpi	r26, 0x01	; 1
    d39c:	31 f4       	brne	.+12     	; 0xd3aa <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    d39e:	8c 81       	ldd	r24, Y+4	; 0x04
    d3a0:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    d3a2:	83 30       	cpi	r24, 0x03	; 3
    d3a4:	5c f0       	brlt	.+22     	; 0xd3bc <_handle_select_helper+0xb2>
    d3a6:	82 e0       	ldi	r24, 0x02	; 2
    d3a8:	09 c0       	rjmp	.+18     	; 0xd3bc <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    d3aa:	26 ff       	sbrs	r18, 6
    d3ac:	0b c0       	rjmp	.+22     	; 0xd3c4 <_handle_select_helper+0xba>
    d3ae:	ed 81       	ldd	r30, Y+5	; 0x05
    d3b0:	e1 30       	cpi	r30, 0x01	; 1
    d3b2:	41 f5       	brne	.+80     	; 0xd404 <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    d3b4:	8c 81       	ldd	r24, Y+4	; 0x04
    d3b6:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    d3b8:	87 fd       	sbrc	r24, 7
    d3ba:	02 c0       	rjmp	.+4      	; 0xd3c0 <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    d3bc:	8c 83       	std	Y+4, r24	; 0x04
    d3be:	e0 cf       	rjmp	.-64     	; 0xd380 <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    d3c0:	1c 82       	std	Y+4, r1	; 0x04
    d3c2:	de cf       	rjmp	.-68     	; 0xd380 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    d3c4:	ef 2b       	or	r30, r31
    d3c6:	69 f0       	breq	.+26     	; 0xd3e2 <_handle_select_helper+0xd8>
    d3c8:	8d 81       	ldd	r24, Y+5	; 0x05
    d3ca:	81 30       	cpi	r24, 0x01	; 1
    d3cc:	09 f0       	breq	.+2      	; 0xd3d0 <_handle_select_helper+0xc6>
    d3ce:	43 c0       	rjmp	.+134    	; 0xd456 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    d3d0:	8c 81       	ldd	r24, Y+4	; 0x04
    d3d2:	c8 0f       	add	r28, r24
    d3d4:	d1 1d       	adc	r29, r1
    d3d6:	99 81       	ldd	r25, Y+1	; 0x01
    d3d8:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    d3da:	91 34       	cpi	r25, 0x41	; 65
    d3dc:	70 f4       	brcc	.+28     	; 0xd3fa <_handle_select_helper+0xf0>
    d3de:	81 e4       	ldi	r24, 0x41	; 65
    d3e0:	0f c0       	rjmp	.+30     	; 0xd400 <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d3e2:	67 2b       	or	r22, r23
    d3e4:	89 f0       	breq	.+34     	; 0xd408 <_handle_select_helper+0xfe>
    d3e6:	8d 81       	ldd	r24, Y+5	; 0x05
    d3e8:	81 30       	cpi	r24, 0x01	; 1
    d3ea:	a9 f5       	brne	.+106    	; 0xd456 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    d3ec:	8c 81       	ldd	r24, Y+4	; 0x04
    d3ee:	c8 0f       	add	r28, r24
    d3f0:	d1 1d       	adc	r29, r1
    d3f2:	99 81       	ldd	r25, Y+1	; 0x01
    d3f4:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d3f6:	9b 35       	cpi	r25, 0x5B	; 91
    d3f8:	10 f4       	brcc	.+4      	; 0xd3fe <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    d3fa:	99 83       	std	Y+1, r25	; 0x01
    d3fc:	c1 cf       	rjmp	.-126    	; 0xd380 <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d3fe:	8a e5       	ldi	r24, 0x5A	; 90
    d400:	89 83       	std	Y+1, r24	; 0x01
    d402:	be cf       	rjmp	.-132    	; 0xd380 <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d404:	67 2b       	or	r22, r23
    d406:	39 f5       	brne	.+78     	; 0xd456 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    d408:	45 2b       	or	r20, r21
    d40a:	29 f1       	breq	.+74     	; 0xd456 <_handle_select_helper+0x14c>
    d40c:	4d 81       	ldd	r20, Y+5	; 0x05
    d40e:	41 30       	cpi	r20, 0x01	; 1
    d410:	11 f5       	brne	.+68     	; 0xd456 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    d412:	fe 01       	movw	r30, r28
    d414:	21 91       	ld	r18, Z+
    d416:	8f 01       	movw	r16, r30
    d418:	fc 01       	movw	r30, r24
    d41a:	23 87       	std	Z+11, r18	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    d41c:	43 e0       	ldi	r20, 0x03	; 3
    d41e:	b8 01       	movw	r22, r16
    d420:	0c 96       	adiw	r24, 0x0c	; 12
    d422:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    d426:	88 81       	ld	r24, Y
    d428:	f3 e0       	ldi	r31, 0x03	; 3
    d42a:	8f 02       	muls	r24, r31
    d42c:	c0 01       	movw	r24, r0
    d42e:	11 24       	eor	r1, r1
    d430:	43 e0       	ldi	r20, 0x03	; 3
    d432:	b8 01       	movw	r22, r16
    d434:	83 51       	subi	r24, 0x13	; 19
    d436:	94 4f       	sbci	r25, 0xF4	; 244
    d438:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
		SFX_NAVIGATE;
    d43c:	2f ef       	ldi	r18, 0xFF	; 255
    d43e:	47 e1       	ldi	r20, 0x17	; 23
    d440:	67 e0       	ldi	r22, 0x07	; 7
    d442:	84 e0       	ldi	r24, 0x04	; 4
    d444:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d448:	8b ee       	ldi	r24, 0xEB	; 235
    d44a:	9b e0       	ldi	r25, 0x0B	; 11
    d44c:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    d450:	82 e0       	ldi	r24, 0x02	; 2
    d452:	8d 83       	std	Y+5, r24	; 0x05
    d454:	1a c0       	rjmp	.+52     	; 0xd48a <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    d456:	31 ff       	sbrs	r19, 1
    d458:	18 c0       	rjmp	.+48     	; 0xd48a <_handle_select_helper+0x180>
    d45a:	8d 81       	ldd	r24, Y+5	; 0x05
    d45c:	81 30       	cpi	r24, 0x01	; 1
    d45e:	11 f4       	brne	.+4      	; 0xd464 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    d460:	1d 82       	std	Y+5, r1	; 0x05
    d462:	8e cf       	rjmp	.-228    	; 0xd380 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    d464:	82 30       	cpi	r24, 0x02	; 2
    d466:	19 f4       	brne	.+6      	; 0xd46e <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    d468:	81 e0       	ldi	r24, 0x01	; 1
    d46a:	8d 83       	std	Y+5, r24	; 0x05
    d46c:	89 cf       	rjmp	.-238    	; 0xd380 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    d46e:	2f ef       	ldi	r18, 0xFF	; 255
    d470:	47 e1       	ldi	r20, 0x17	; 23
    d472:	67 e0       	ldi	r22, 0x07	; 7
    d474:	84 e0       	ldi	r24, 0x04	; 4
    d476:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
		fade_through();
    d47a:	0e 94 c8 58 	call	0xb190	; 0xb190 <fade_through>
		load_splash();
	}
}
    d47e:	df 91       	pop	r29
    d480:	cf 91       	pop	r28
    d482:	1f 91       	pop	r17
    d484:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    d486:	0c 94 b7 64 	jmp	0xc96e	; 0xc96e <load_splash>
	}
}
    d48a:	df 91       	pop	r29
    d48c:	cf 91       	pop	r28
    d48e:	1f 91       	pop	r17
    d490:	0f 91       	pop	r16
    d492:	08 95       	ret

0000d494 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    d494:	af 92       	push	r10
    d496:	bf 92       	push	r11
    d498:	cf 92       	push	r12
    d49a:	df 92       	push	r13
    d49c:	ef 92       	push	r14
    d49e:	ff 92       	push	r15
    d4a0:	0f 93       	push	r16
    d4a2:	1f 93       	push	r17
    d4a4:	cf 93       	push	r28
    d4a6:	df 93       	push	r29
    d4a8:	00 d0       	rcall	.+0      	; 0xd4aa <_handle_select_render_helper+0x16>
    d4aa:	1f 92       	push	r1
    d4ac:	cd b7       	in	r28, 0x3d	; 61
    d4ae:	de b7       	in	r29, 0x3e	; 62
    d4b0:	7c 01       	movw	r14, r24
    d4b2:	b4 2e       	mov	r11, r20
    d4b4:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    d4b6:	80 e2       	ldi	r24, 0x20	; 32
    d4b8:	89 83       	std	Y+1, r24	; 0x01
    d4ba:	8a 83       	std	Y+2, r24	; 0x02
    d4bc:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    d4be:	f7 01       	movw	r30, r14
    d4c0:	85 81       	ldd	r24, Z+5	; 0x05
    d4c2:	81 11       	cpse	r24, r1
    d4c4:	1d c0       	rjmp	.+58     	; 0xd500 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    d4c6:	40 e0       	ldi	r20, 0x00	; 0
    d4c8:	6f e8       	ldi	r22, 0x8F	; 143
    d4ca:	79 e4       	ldi	r23, 0x49	; 73
    d4cc:	82 2f       	mov	r24, r18
    d4ce:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d4d2:	40 e0       	ldi	r20, 0x00	; 0
    d4d4:	61 ed       	ldi	r22, 0xD1	; 209
    d4d6:	79 e4       	ldi	r23, 0x49	; 73
    d4d8:	81 e0       	ldi	r24, 0x01	; 1
    d4da:	81 0f       	add	r24, r17
    d4dc:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    d4e0:	f7 01       	movw	r30, r14
    d4e2:	40 81       	ld	r20, Z
    d4e4:	44 0f       	add	r20, r20
    d4e6:	44 0f       	add	r20, r20
    d4e8:	44 0f       	add	r20, r20
    d4ea:	40 5c       	subi	r20, 0xC0	; 192
    d4ec:	01 e0       	ldi	r16, 0x01	; 1
    d4ee:	21 e0       	ldi	r18, 0x01	; 1
    d4f0:	6b 2d       	mov	r22, r11
    d4f2:	66 0f       	add	r22, r22
    d4f4:	66 0f       	add	r22, r22
    d4f6:	66 0f       	add	r22, r22
    d4f8:	81 2f       	mov	r24, r17
    d4fa:	0e 94 ba 53 	call	0xa774	; 0xa774 <MoveSprite>
    d4fe:	6f c0       	rjmp	.+222    	; 0xd5de <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    d500:	81 30       	cpi	r24, 0x01	; 1
    d502:	09 f0       	breq	.+2      	; 0xd506 <_handle_select_render_helper+0x72>
    d504:	44 c0       	rjmp	.+136    	; 0xd58e <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    d506:	40 e0       	ldi	r20, 0x00	; 0
    d508:	6c e8       	ldi	r22, 0x8C	; 140
    d50a:	79 e4       	ldi	r23, 0x49	; 73
    d50c:	82 2f       	mov	r24, r18
    d50e:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    d512:	aa 24       	eor	r10, r10
    d514:	a3 94       	inc	r10
    d516:	a1 0e       	add	r10, r17
    d518:	40 e0       	ldi	r20, 0x00	; 0
    d51a:	69 e8       	ldi	r22, 0x89	; 137
    d51c:	79 e4       	ldi	r23, 0x49	; 73
    d51e:	8a 2d       	mov	r24, r10
    d520:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    d524:	cb 2c       	mov	r12, r11
    d526:	d1 2c       	mov	r13, r1
    d528:	f5 e0       	ldi	r31, 0x05	; 5
    d52a:	cf 0e       	add	r12, r31
    d52c:	d1 1c       	adc	r13, r1
    d52e:	f7 01       	movw	r30, r14
    d530:	40 81       	ld	r20, Z
    d532:	44 0f       	add	r20, r20
    d534:	44 0f       	add	r20, r20
    d536:	44 0f       	add	r20, r20
    d538:	48 5c       	subi	r20, 0xC8	; 200
    d53a:	84 81       	ldd	r24, Z+4	; 0x04
    d53c:	b6 01       	movw	r22, r12
    d53e:	68 0f       	add	r22, r24
    d540:	71 1d       	adc	r23, r1
    d542:	87 fd       	sbrc	r24, 7
    d544:	7a 95       	dec	r23
    d546:	66 0f       	add	r22, r22
    d548:	66 0f       	add	r22, r22
    d54a:	66 0f       	add	r22, r22
    d54c:	01 e0       	ldi	r16, 0x01	; 1
    d54e:	21 e0       	ldi	r18, 0x01	; 1
    d550:	81 2f       	mov	r24, r17
    d552:	0e 94 ba 53 	call	0xa774	; 0xa774 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    d556:	f7 01       	movw	r30, r14
    d558:	40 81       	ld	r20, Z
    d55a:	44 0f       	add	r20, r20
    d55c:	44 0f       	add	r20, r20
    d55e:	44 0f       	add	r20, r20
    d560:	48 5b       	subi	r20, 0xB8	; 184
    d562:	84 81       	ldd	r24, Z+4	; 0x04
    d564:	c8 0e       	add	r12, r24
    d566:	d1 1c       	adc	r13, r1
    d568:	87 fd       	sbrc	r24, 7
    d56a:	da 94       	dec	r13
    d56c:	6c 2d       	mov	r22, r12
    d56e:	66 0f       	add	r22, r22
    d570:	66 0f       	add	r22, r22
    d572:	66 0f       	add	r22, r22
    d574:	21 e0       	ldi	r18, 0x01	; 1
    d576:	8a 2d       	mov	r24, r10
    d578:	0e 94 ba 53 	call	0xa774	; 0xa774 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    d57c:	43 e0       	ldi	r20, 0x03	; 3
    d57e:	b7 01       	movw	r22, r14
    d580:	6f 5f       	subi	r22, 0xFF	; 255
    d582:	7f 4f       	sbci	r23, 0xFF	; 255
    d584:	ce 01       	movw	r24, r28
    d586:	01 96       	adiw	r24, 0x01	; 1
    d588:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
    d58c:	28 c0       	rjmp	.+80     	; 0xd5de <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    d58e:	82 30       	cpi	r24, 0x02	; 2
    d590:	31 f5       	brne	.+76     	; 0xd5de <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    d592:	c4 2e       	mov	r12, r20
    d594:	d1 2c       	mov	r13, r1
    d596:	48 e2       	ldi	r20, 0x28	; 40
    d598:	65 e0       	ldi	r22, 0x05	; 5
    d59a:	70 e0       	ldi	r23, 0x00	; 0
    d59c:	c6 01       	movw	r24, r12
    d59e:	06 96       	adiw	r24, 0x06	; 6
    d5a0:	0e 94 84 54 	call	0xa908	; 0xa908 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    d5a4:	23 e0       	ldi	r18, 0x03	; 3
    d5a6:	a7 01       	movw	r20, r14
    d5a8:	4f 5f       	subi	r20, 0xFF	; 255
    d5aa:	5f 4f       	sbci	r21, 0xFF	; 255
    d5ac:	65 e0       	ldi	r22, 0x05	; 5
    d5ae:	87 e0       	ldi	r24, 0x07	; 7
    d5b0:	8b 0d       	add	r24, r11
    d5b2:	0e 94 cc 55 	call	0xab98	; 0xab98 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    d5b6:	49 e2       	ldi	r20, 0x29	; 41
    d5b8:	65 e0       	ldi	r22, 0x05	; 5
    d5ba:	70 e0       	ldi	r23, 0x00	; 0
    d5bc:	c6 01       	movw	r24, r12
    d5be:	0a 96       	adiw	r24, 0x0a	; 10
    d5c0:	0e 94 84 54 	call	0xa908	; 0xa908 <PrintChar>
		MapSprite2(idx, map_none, 0);
    d5c4:	40 e0       	ldi	r20, 0x00	; 0
    d5c6:	61 ed       	ldi	r22, 0xD1	; 209
    d5c8:	79 e4       	ldi	r23, 0x49	; 73
    d5ca:	81 2f       	mov	r24, r17
    d5cc:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d5d0:	40 e0       	ldi	r20, 0x00	; 0
    d5d2:	61 ed       	ldi	r22, 0xD1	; 209
    d5d4:	79 e4       	ldi	r23, 0x49	; 73
    d5d6:	81 e0       	ldi	r24, 0x01	; 1
    d5d8:	81 0f       	add	r24, r17
    d5da:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    d5de:	f7 01       	movw	r30, r14
    d5e0:	60 81       	ld	r22, Z
    d5e2:	68 5f       	subi	r22, 0xF8	; 248
    d5e4:	23 e0       	ldi	r18, 0x03	; 3
    d5e6:	ae 01       	movw	r20, r28
    d5e8:	4f 5f       	subi	r20, 0xFF	; 255
    d5ea:	5f 4f       	sbci	r21, 0xFF	; 255
    d5ec:	85 e0       	ldi	r24, 0x05	; 5
    d5ee:	8b 0d       	add	r24, r11
    d5f0:	0e 94 cc 55 	call	0xab98	; 0xab98 <LBPrintStr>
}
    d5f4:	0f 90       	pop	r0
    d5f6:	0f 90       	pop	r0
    d5f8:	0f 90       	pop	r0
    d5fa:	df 91       	pop	r29
    d5fc:	cf 91       	pop	r28
    d5fe:	1f 91       	pop	r17
    d600:	0f 91       	pop	r16
    d602:	ff 90       	pop	r15
    d604:	ef 90       	pop	r14
    d606:	df 90       	pop	r13
    d608:	cf 90       	pop	r12
    d60a:	bf 90       	pop	r11
    d60c:	af 90       	pop	r10
    d60e:	08 95       	ret

0000d610 <load_handle_select>:

void load_handle_select()
{
    d610:	8f 92       	push	r8
    d612:	9f 92       	push	r9
    d614:	af 92       	push	r10
    d616:	bf 92       	push	r11
    d618:	cf 92       	push	r12
    d61a:	df 92       	push	r13
    d61c:	ef 92       	push	r14
    d61e:	ff 92       	push	r15
    d620:	0f 93       	push	r16
    d622:	1f 93       	push	r17
    d624:	cf 93       	push	r28
    d626:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    d628:	82 e0       	ldi	r24, 0x02	; 2
    d62a:	80 93 0b 0c 	sts	0x0C0B, r24
	clear_sprites();
    d62e:	0e 94 d2 58 	call	0xb1a4	; 0xb1a4 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    d632:	4f e0       	ldi	r20, 0x0F	; 15
    d634:	53 e8       	ldi	r21, 0x83	; 131
    d636:	64 e0       	ldi	r22, 0x04	; 4
    d638:	83 e0       	ldi	r24, 0x03	; 3
    d63a:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
	DrawMap2(20, 4, map_blue_tank);
    d63e:	49 e0       	ldi	r20, 0x09	; 9
    d640:	53 e8       	ldi	r21, 0x83	; 131
    d642:	64 e0       	ldi	r22, 0x04	; 4
    d644:	84 e1       	ldi	r24, 0x14	; 20
    d646:	0e 94 e9 53 	call	0xa7d2	; 0xa7d2 <DrawMap2>
	Print(9, 1, (char*) strHandlesTitle);
    d64a:	4c e3       	ldi	r20, 0x3C	; 60
    d64c:	5b e0       	ldi	r21, 0x0B	; 11
    d64e:	61 e0       	ldi	r22, 0x01	; 1
    d650:	70 e0       	ldi	r23, 0x00	; 0
    d652:	89 e0       	ldi	r24, 0x09	; 9
    d654:	90 e0       	ldi	r25, 0x00	; 0
    d656:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(6, 5, (char*) strPlayer1);
    d65a:	4b e2       	ldi	r20, 0x2B	; 43
    d65c:	5b e0       	ldi	r21, 0x0B	; 11
    d65e:	65 e0       	ldi	r22, 0x05	; 5
    d660:	70 e0       	ldi	r23, 0x00	; 0
    d662:	86 e0       	ldi	r24, 0x06	; 6
    d664:	90 e0       	ldi	r25, 0x00	; 0
    d666:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(23, 5, (char*) strPlayer2);
    d66a:	48 e2       	ldi	r20, 0x28	; 40
    d66c:	5b e0       	ldi	r21, 0x0B	; 11
    d66e:	65 e0       	ldi	r22, 0x05	; 5
    d670:	70 e0       	ldi	r23, 0x00	; 0
    d672:	87 e1       	ldi	r24, 0x17	; 23
    d674:	90 e0       	ldi	r25, 0x00	; 0
    d676:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
    d67a:	8d ee       	ldi	r24, 0xED	; 237
    d67c:	e8 2e       	mov	r14, r24
    d67e:	8b e0       	ldi	r24, 0x0B	; 11
    d680:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    d682:	c0 e0       	ldi	r28, 0x00	; 0
    d684:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    d686:	93 e0       	ldi	r25, 0x03	; 3
    d688:	a9 2e       	mov	r10, r25
    d68a:	b1 2c       	mov	r11, r1
    d68c:	67 01       	movw	r12, r14
    d68e:	ce 01       	movw	r24, r28
    d690:	b5 01       	movw	r22, r10
    d692:	0e 94 46 70 	call	0xe08c	; 0xe08c <__divmodhi4>
    d696:	4c 01       	movw	r8, r24
    d698:	8b 01       	movw	r16, r22
    d69a:	08 5f       	subi	r16, 0xF8	; 248
    d69c:	1f 4f       	sbci	r17, 0xFF	; 255
    d69e:	f7 01       	movw	r30, r14
    d6a0:	41 91       	ld	r20, Z+
    d6a2:	7f 01       	movw	r14, r30
    d6a4:	b8 01       	movw	r22, r16
    d6a6:	03 96       	adiw	r24, 0x03	; 3
    d6a8:	0e 94 84 54 	call	0xa908	; 0xa908 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    d6ac:	f6 01       	movw	r30, r12
    d6ae:	40 81       	ld	r20, Z
    d6b0:	b8 01       	movw	r22, r16
    d6b2:	c4 01       	movw	r24, r8
    d6b4:	44 96       	adiw	r24, 0x14	; 20
    d6b6:	0e 94 84 54 	call	0xa908	; 0xa908 <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    d6ba:	21 96       	adiw	r28, 0x01	; 1
    d6bc:	cb 31       	cpi	r28, 0x1B	; 27
    d6be:	d1 05       	cpc	r29, r1
    d6c0:	29 f7       	brne	.-54     	; 0xd68c <load_handle_select+0x7c>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
    d6c2:	4d e1       	ldi	r20, 0x1D	; 29
    d6c4:	5b e0       	ldi	r21, 0x0B	; 11
    d6c6:	65 e1       	ldi	r22, 0x15	; 21
    d6c8:	70 e0       	ldi	r23, 0x00	; 0
    d6ca:	88 e0       	ldi	r24, 0x08	; 8
    d6cc:	90 e0       	ldi	r25, 0x00	; 0
    d6ce:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(8, 22, (char*) strConfirmHandle);
    d6d2:	41 e1       	ldi	r20, 0x11	; 17
    d6d4:	5b e0       	ldi	r21, 0x0B	; 11
    d6d6:	66 e1       	ldi	r22, 0x16	; 22
    d6d8:	70 e0       	ldi	r23, 0x00	; 0
    d6da:	88 e0       	ldi	r24, 0x08	; 8
    d6dc:	90 e0       	ldi	r25, 0x00	; 0
    d6de:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(8, 23, (char*) strCancelHandle);
    d6e2:	46 e0       	ldi	r20, 0x06	; 6
    d6e4:	5b e0       	ldi	r21, 0x0B	; 11
    d6e6:	67 e1       	ldi	r22, 0x17	; 23
    d6e8:	70 e0       	ldi	r23, 0x00	; 0
    d6ea:	88 e0       	ldi	r24, 0x08	; 8
    d6ec:	90 e0       	ldi	r25, 0x00	; 0
    d6ee:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>
	Print(8, 24, (char*) strChangeHandle);
    d6f2:	4e ed       	ldi	r20, 0xDE	; 222
    d6f4:	5a e0       	ldi	r21, 0x0A	; 10
    d6f6:	68 e1       	ldi	r22, 0x18	; 24
    d6f8:	70 e0       	ldi	r23, 0x00	; 0
    d6fa:	88 e0       	ldi	r24, 0x08	; 8
    d6fc:	90 e0       	ldi	r25, 0x00	; 0
}
    d6fe:	df 91       	pop	r29
    d700:	cf 91       	pop	r28
    d702:	1f 91       	pop	r17
    d704:	0f 91       	pop	r16
    d706:	ff 90       	pop	r15
    d708:	ef 90       	pop	r14
    d70a:	df 90       	pop	r13
    d70c:	cf 90       	pop	r12
    d70e:	bf 90       	pop	r11
    d710:	af 90       	pop	r10
    d712:	9f 90       	pop	r9
    d714:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
	Print(8, 22, (char*) strConfirmHandle);
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
    d716:	0c 94 69 54 	jmp	0xa8d2	; 0xa8d2 <Print>

0000d71a <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    d71a:	0f 93       	push	r16
    d71c:	cf 93       	push	r28
    d71e:	df 93       	push	r29
    d720:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	// Render
	switch (game.selection)
    d722:	90 91 18 0c 	lds	r25, 0x0C18
    d726:	91 30       	cpi	r25, 0x01	; 1
    d728:	41 f0       	breq	.+16     	; 0xd73a <update_splash+0x20>
    d72a:	92 30       	cpi	r25, 0x02	; 2
    d72c:	51 f0       	breq	.+20     	; 0xd742 <update_splash+0x28>
    d72e:	91 11       	cpse	r25, r1
    d730:	0f c0       	rjmp	.+30     	; 0xd750 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    d732:	01 e0       	ldi	r16, 0x01	; 1
    d734:	21 e0       	ldi	r18, 0x01	; 1
    d736:	48 e6       	ldi	r20, 0x68	; 104
    d738:	07 c0       	rjmp	.+14     	; 0xd748 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    d73a:	01 e0       	ldi	r16, 0x01	; 1
    d73c:	21 e0       	ldi	r18, 0x01	; 1
    d73e:	40 e7       	ldi	r20, 0x70	; 112
    d740:	03 c0       	rjmp	.+6      	; 0xd748 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    d742:	01 e0       	ldi	r16, 0x01	; 1
    d744:	21 e0       	ldi	r18, 0x01	; 1
    d746:	48 e7       	ldi	r20, 0x78	; 120
    d748:	60 e3       	ldi	r22, 0x30	; 48
    d74a:	80 e0       	ldi	r24, 0x00	; 0
    d74c:	0e 94 ba 53 	call	0xa774	; 0xa774 <MoveSprite>
			break;
	}
	Print(9, 21, (char*) strSelectHandle);
    d750:	4d e1       	ldi	r20, 0x1D	; 29
    d752:	5b e0       	ldi	r21, 0x0B	; 11
    d754:	65 e1       	ldi	r22, 0x15	; 21
    d756:	70 e0       	ldi	r23, 0x00	; 0
    d758:	89 e0       	ldi	r24, 0x09	; 9
    d75a:	90 e0       	ldi	r25, 0x00	; 0
    d75c:	0e 94 69 54 	call	0xa8d2	; 0xa8d2 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    d760:	88 81       	ld	r24, Y
    d762:	99 81       	ldd	r25, Y+1	; 0x01
    d764:	00 97       	sbiw	r24, 0x00	; 0
    d766:	21 f0       	breq	.+8      	; 0xd770 <update_splash+0x56>
    d768:	10 92 34 0b 	sts	0x0B34, r1
    d76c:	10 92 33 0b 	sts	0x0B33, r1
	
	if (p1->pressed & BTN_UP)
    d770:	84 ff       	sbrs	r24, 4
    d772:	0e c0       	rjmp	.+28     	; 0xd790 <update_splash+0x76>
	{
		game.selection--;
    d774:	80 91 18 0c 	lds	r24, 0x0C18
    d778:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    d77a:	87 ff       	sbrs	r24, 7
    d77c:	11 c0       	rjmp	.+34     	; 0xd7a0 <update_splash+0x86>
    d77e:	10 92 18 0c 	sts	0x0C18, r1
		SFX_NAVIGATE;
    d782:	2f ef       	ldi	r18, 0xFF	; 255
    d784:	47 e1       	ldi	r20, 0x17	; 23
    d786:	67 e0       	ldi	r22, 0x07	; 7
    d788:	84 e0       	ldi	r24, 0x04	; 4
    d78a:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
    d78e:	8e c0       	rjmp	.+284    	; 0xd8ac <update_splash+0x192>
	}
	else if (p1->pressed & BTN_DOWN)
    d790:	85 ff       	sbrs	r24, 5
    d792:	09 c0       	rjmp	.+18     	; 0xd7a6 <update_splash+0x8c>
	{
		game.selection++;
    d794:	80 91 18 0c 	lds	r24, 0x0C18
    d798:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    d79a:	83 30       	cpi	r24, 0x03	; 3
    d79c:	0c f0       	brlt	.+2      	; 0xd7a0 <update_splash+0x86>
    d79e:	82 e0       	ldi	r24, 0x02	; 2
    d7a0:	80 93 18 0c 	sts	0x0C18, r24
    d7a4:	ee cf       	rjmp	.-36     	; 0xd782 <update_splash+0x68>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    d7a6:	90 ff       	sbrs	r25, 0
    d7a8:	34 c0       	rjmp	.+104    	; 0xd812 <update_splash+0xf8>
    d7aa:	80 91 18 0c 	lds	r24, 0x0C18
    d7ae:	82 30       	cpi	r24, 0x02	; 2
    d7b0:	c8 f4       	brcc	.+50     	; 0xd7e4 <update_splash+0xca>
	{
		demo_counter = 0;
    d7b2:	10 92 34 0b 	sts	0x0B34, r1
    d7b6:	10 92 33 0b 	sts	0x0B33, r1
		p1s.select_state = SELECTING;
    d7ba:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    d7be:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    d7c2:	2f ef       	ldi	r18, 0xFF	; 255
    d7c4:	47 e1       	ldi	r20, 0x17	; 23
    d7c6:	67 e0       	ldi	r22, 0x07	; 7
    d7c8:	84 e0       	ldi	r24, 0x04	; 4
    d7ca:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
		fade_through();
    d7ce:	0e 94 c8 58 	call	0xb190	; 0xb190 <fade_through>
		load_eeprom(&handles);
    d7d2:	8b ee       	ldi	r24, 0xEB	; 235
    d7d4:	9b e0       	ldi	r25, 0x0B	; 11
    d7d6:	0e 94 b6 58 	call	0xb16c	; 0xb16c <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    d7da:	df 91       	pop	r29
    d7dc:	cf 91       	pop	r28
    d7de:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    d7e0:	0c 94 08 6b 	jmp	0xd610	; 0xd610 <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    d7e4:	82 30       	cpi	r24, 0x02	; 2
    d7e6:	a9 f4       	brne	.+42     	; 0xd812 <update_splash+0xf8>
	{
		demo_counter = 0;
    d7e8:	10 92 34 0b 	sts	0x0B34, r1
    d7ec:	10 92 33 0b 	sts	0x0B33, r1
		SFX_NAVIGATE;
    d7f0:	2f ef       	ldi	r18, 0xFF	; 255
    d7f2:	47 e1       	ldi	r20, 0x17	; 23
    d7f4:	67 e0       	ldi	r22, 0x07	; 7
    d7f6:	84 e0       	ldi	r24, 0x04	; 4
    d7f8:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
		fade_through();
    d7fc:	0e 94 c8 58 	call	0xb190	; 0xb190 <fade_through>
		load_eeprom(&scores);
    d800:	84 ec       	ldi	r24, 0xC4	; 196
    d802:	9b e0       	ldi	r25, 0x0B	; 11
    d804:	0e 94 b6 58 	call	0xb16c	; 0xb16c <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    d808:	df 91       	pop	r29
    d80a:	cf 91       	pop	r28
    d80c:	0f 91       	pop	r16
	{
		demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    d80e:	0c 94 e7 64 	jmp	0xc9ce	; 0xc9ce <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    d812:	80 91 33 0b 	lds	r24, 0x0B33
    d816:	90 91 34 0b 	lds	r25, 0x0B34
    d81a:	88 35       	cpi	r24, 0x58	; 88
    d81c:	92 40       	sbci	r25, 0x02	; 2
    d81e:	08 f4       	brcc	.+2      	; 0xd822 <update_splash+0x108>
    d820:	45 c0       	rjmp	.+138    	; 0xd8ac <update_splash+0x192>
	{
		demo_counter = 0;
    d822:	10 92 34 0b 	sts	0x0B34, r1
    d826:	10 92 33 0b 	sts	0x0B33, r1
		if (demo_choice % 2 == 0)
    d82a:	80 91 32 0b 	lds	r24, 0x0B32
    d82e:	80 fd       	sbrc	r24, 0
    d830:	29 c0       	rjmp	.+82     	; 0xd884 <update_splash+0x16a>
		{
			game.selection = CPUVCPU;
    d832:	83 e0       	ldi	r24, 0x03	; 3
    d834:	80 93 18 0c 	sts	0x0C18, r24
			player1.handle_id = 9;
    d838:	c9 e0       	ldi	r28, 0x09	; 9
    d83a:	c0 93 41 0c 	sts	0x0C41, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    d83e:	43 e0       	ldi	r20, 0x03	; 3
    d840:	68 e0       	ldi	r22, 0x08	; 8
    d842:	7c e0       	ldi	r23, 0x0C	; 12
    d844:	82 e4       	ldi	r24, 0x42	; 66
    d846:	9c e0       	ldi	r25, 0x0C	; 12
    d848:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
			player2.handle_id = 9;
    d84c:	c0 93 af 0f 	sts	0x0FAF, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d850:	43 e0       	ldi	r20, 0x03	; 3
    d852:	68 e0       	ldi	r22, 0x08	; 8
    d854:	7c e0       	ldi	r23, 0x0C	; 12
    d856:	80 eb       	ldi	r24, 0xB0	; 176
    d858:	9f e0       	ldi	r25, 0x0F	; 15
    d85a:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
			SFX_NAVIGATE;
    d85e:	2f ef       	ldi	r18, 0xFF	; 255
    d860:	47 e1       	ldi	r20, 0x17	; 23
    d862:	67 e0       	ldi	r22, 0x07	; 7
    d864:	84 e0       	ldi	r24, 0x04	; 4
    d866:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
			clear_sprites();
    d86a:	0e 94 d2 58 	call	0xb1a4	; 0xb1a4 <clear_sprites>
			fade_through();
    d86e:	0e 94 c8 58 	call	0xb190	; 0xb190 <fade_through>
			level_transition(LBRandom(0, 9));
    d872:	69 e0       	ldi	r22, 0x09	; 9
    d874:	70 e0       	ldi	r23, 0x00	; 0
    d876:	80 e0       	ldi	r24, 0x00	; 0
    d878:	90 e0       	ldi	r25, 0x00	; 0
    d87a:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBRandom>
    d87e:	0e 94 67 64 	call	0xc8ce	; 0xc8ce <level_transition>
    d882:	0e c0       	rjmp	.+28     	; 0xd8a0 <update_splash+0x186>
		}
		else
		{
			SFX_NAVIGATE;
    d884:	2f ef       	ldi	r18, 0xFF	; 255
    d886:	47 e1       	ldi	r20, 0x17	; 23
    d888:	67 e0       	ldi	r22, 0x07	; 7
    d88a:	84 e0       	ldi	r24, 0x04	; 4
    d88c:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <TriggerNote>
			fade_through();
    d890:	0e 94 c8 58 	call	0xb190	; 0xb190 <fade_through>
			load_eeprom(&scores);
    d894:	84 ec       	ldi	r24, 0xC4	; 196
    d896:	9b e0       	ldi	r25, 0x0B	; 11
    d898:	0e 94 b6 58 	call	0xb16c	; 0xb16c <load_eeprom>
			load_tank_rank();
    d89c:	0e 94 e7 64 	call	0xc9ce	; 0xc9ce <load_tank_rank>
		}
		demo_choice++;
    d8a0:	80 91 32 0b 	lds	r24, 0x0B32
    d8a4:	8f 5f       	subi	r24, 0xFF	; 255
    d8a6:	80 93 32 0b 	sts	0x0B32, r24
		return;
    d8aa:	09 c0       	rjmp	.+18     	; 0xd8be <update_splash+0x1a4>
		
	}
	demo_counter++;
    d8ac:	80 91 33 0b 	lds	r24, 0x0B33
    d8b0:	90 91 34 0b 	lds	r25, 0x0B34
    d8b4:	01 96       	adiw	r24, 0x01	; 1
    d8b6:	90 93 34 0b 	sts	0x0B34, r25
    d8ba:	80 93 33 0b 	sts	0x0B33, r24
}
    d8be:	df 91       	pop	r29
    d8c0:	cf 91       	pop	r28
    d8c2:	0f 91       	pop	r16
    d8c4:	08 95       	ret

0000d8c6 <update_handle_select>:
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    d8c6:	0f 93       	push	r16
    d8c8:	1f 93       	push	r17
    d8ca:	cf 93       	push	r28
    d8cc:	df 93       	push	r29
    d8ce:	8c 01       	movw	r16, r24
    d8d0:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    d8d2:	26 e0       	ldi	r18, 0x06	; 6
    d8d4:	42 e0       	ldi	r20, 0x02	; 2
    d8d6:	bc 01       	movw	r22, r24
    d8d8:	8a e2       	ldi	r24, 0x2A	; 42
    d8da:	9b e0       	ldi	r25, 0x0B	; 11
    d8dc:	0e 94 4a 6a 	call	0xd494	; 0xd494 <_handle_select_render_helper>
	if (game.selection == PVP)
    d8e0:	80 91 18 0c 	lds	r24, 0x0C18
    d8e4:	81 30       	cpi	r24, 0x01	; 1
    d8e6:	39 f4       	brne	.+14     	; 0xd8f6 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    d8e8:	28 e0       	ldi	r18, 0x08	; 8
    d8ea:	43 e1       	ldi	r20, 0x13	; 19
    d8ec:	be 01       	movw	r22, r28
    d8ee:	84 e2       	ldi	r24, 0x24	; 36
    d8f0:	9b e0       	ldi	r25, 0x0B	; 11
    d8f2:	0e 94 4a 6a 	call	0xd494	; 0xd494 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    d8f6:	46 e3       	ldi	r20, 0x36	; 54
    d8f8:	5c e0       	ldi	r21, 0x0C	; 12
    d8fa:	b8 01       	movw	r22, r16
    d8fc:	8a e2       	ldi	r24, 0x2A	; 42
    d8fe:	9b e0       	ldi	r25, 0x0B	; 11
    d900:	0e 94 85 69 	call	0xd30a	; 0xd30a <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    d904:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    d908:	80 91 18 0c 	lds	r24, 0x0C18
    d90c:	81 30       	cpi	r24, 0x01	; 1
    d90e:	19 f0       	breq	.+6      	; 0xd916 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    d910:	12 30       	cpi	r17, 0x02	; 2
    d912:	69 f0       	breq	.+26     	; 0xd92e <update_handle_select+0x68>
    d914:	21 c0       	rjmp	.+66     	; 0xd958 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    d916:	44 ea       	ldi	r20, 0xA4	; 164
    d918:	5f e0       	ldi	r21, 0x0F	; 15
    d91a:	be 01       	movw	r22, r28
    d91c:	84 e2       	ldi	r24, 0x24	; 36
    d91e:	9b e0       	ldi	r25, 0x0B	; 11
    d920:	0e 94 85 69 	call	0xd30a	; 0xd30a <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    d924:	80 91 29 0b 	lds	r24, 0x0B29
    d928:	82 30       	cpi	r24, 0x02	; 2
    d92a:	b1 f4       	brne	.+44     	; 0xd958 <update_handle_select+0x92>
    d92c:	f1 cf       	rjmp	.-30     	; 0xd910 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    d92e:	80 91 18 0c 	lds	r24, 0x0C18
    d932:	81 11       	cpse	r24, r1
    d934:	0a c0       	rjmp	.+20     	; 0xd94a <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    d936:	89 e0       	ldi	r24, 0x09	; 9
    d938:	80 93 af 0f 	sts	0x0FAF, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d93c:	43 e0       	ldi	r20, 0x03	; 3
    d93e:	68 e0       	ldi	r22, 0x08	; 8
    d940:	7c e0       	ldi	r23, 0x0C	; 12
    d942:	80 eb       	ldi	r24, 0xB0	; 176
    d944:	9f e0       	ldi	r25, 0x0F	; 15
    d946:	0e 94 c0 55 	call	0xab80	; 0xab80 <LBCopyChars>
		}
		level_transition(9);
    d94a:	89 e0       	ldi	r24, 0x09	; 9
	}
}
    d94c:	df 91       	pop	r29
    d94e:	cf 91       	pop	r28
    d950:	1f 91       	pop	r17
    d952:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(9);
    d954:	0c 94 67 64 	jmp	0xc8ce	; 0xc8ce <level_transition>
	}
}
    d958:	df 91       	pop	r29
    d95a:	cf 91       	pop	r28
    d95c:	1f 91       	pop	r17
    d95e:	0f 91       	pop	r16
    d960:	08 95       	ret

0000d962 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d962:	00 97       	sbiw	r24, 0x00	; 0
    d964:	41 f0       	breq	.+16     	; 0xd976 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    d966:	81 30       	cpi	r24, 0x01	; 1
    d968:	91 05       	cpc	r25, r1
    d96a:	41 f0       	breq	.+16     	; 0xd97c <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    d96c:	82 30       	cpi	r24, 0x02	; 2
    d96e:	91 05       	cpc	r25, r1
    d970:	41 f0       	breq	.+16     	; 0xd982 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    d972:	03 97       	sbiw	r24, 0x03	; 3
    d974:	49 f0       	breq	.+18     	; 0xd988 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d976:	80 e1       	ldi	r24, 0x10	; 16
    d978:	90 e0       	ldi	r25, 0x00	; 0
    d97a:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    d97c:	80 e2       	ldi	r24, 0x20	; 32
    d97e:	90 e0       	ldi	r25, 0x00	; 0
    d980:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    d982:	80 e4       	ldi	r24, 0x40	; 64
    d984:	90 e0       	ldi	r25, 0x00	; 0
    d986:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    d988:	80 e8       	ldi	r24, 0x80	; 128
    d98a:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    d98c:	08 95       	ret

0000d98e <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    d98e:	8f 92       	push	r8
    d990:	9f 92       	push	r9
    d992:	af 92       	push	r10
    d994:	bf 92       	push	r11
    d996:	cf 92       	push	r12
    d998:	df 92       	push	r13
    d99a:	ef 92       	push	r14
    d99c:	ff 92       	push	r15
    d99e:	0f 93       	push	r16
    d9a0:	1f 93       	push	r17
    d9a2:	cf 93       	push	r28
    d9a4:	df 93       	push	r29
    d9a6:	e8 2e       	mov	r14, r24
    d9a8:	d6 2e       	mov	r13, r22
    d9aa:	f4 2e       	mov	r15, r20
    d9ac:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    d9ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d9b0:	88 23       	and	r24, r24
    d9b2:	09 f4       	brne	.+2      	; 0xd9b6 <crash_and_turn+0x28>
    d9b4:	a8 c0       	rjmp	.+336    	; 0xdb06 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    d9b6:	f8 01       	movw	r30, r16
    d9b8:	c4 80       	ldd	r12, Z+4	; 0x04
    d9ba:	c4 fe       	sbrs	r12, 4
    d9bc:	23 c0       	rjmp	.+70     	; 0xda04 <crash_and_turn+0x76>
    d9be:	fe e1       	ldi	r31, 0x1E	; 30
    d9c0:	6f 02       	muls	r22, r31
    d9c2:	40 01       	movw	r8, r0
    d9c4:	11 24       	eor	r1, r1
    d9c6:	ae 2c       	mov	r10, r14
    d9c8:	bb 24       	eor	r11, r11
    d9ca:	a7 fc       	sbrc	r10, 7
    d9cc:	b0 94       	com	r11
    d9ce:	c4 01       	movw	r24, r8
    d9d0:	8a 0d       	add	r24, r10
    d9d2:	9b 1d       	adc	r25, r11
    d9d4:	01 97       	sbiw	r24, 0x01	; 1
    d9d6:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    d9da:	81 11       	cpse	r24, r1
    d9dc:	13 c0       	rjmp	.+38     	; 0xda04 <crash_and_turn+0x76>
    d9de:	c4 01       	movw	r24, r8
    d9e0:	8a 0d       	add	r24, r10
    d9e2:	9b 1d       	adc	r25, r11
    d9e4:	4d 96       	adiw	r24, 0x1d	; 29
    d9e6:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    d9ea:	81 11       	cpse	r24, r1
    d9ec:	0b c0       	rjmp	.+22     	; 0xda04 <crash_and_turn+0x76>
    d9ee:	c4 01       	movw	r24, r8
    d9f0:	8a 0d       	add	r24, r10
    d9f2:	9b 1d       	adc	r25, r11
    d9f4:	cb 96       	adiw	r24, 0x3b	; 59
    d9f6:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    d9fa:	81 11       	cpse	r24, r1
    d9fc:	03 c0       	rjmp	.+6      	; 0xda04 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    d9fe:	80 e4       	ldi	r24, 0x40	; 64
    da00:	90 e0       	ldi	r25, 0x00	; 0
    da02:	6f c0       	rjmp	.+222    	; 0xdae2 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    da04:	c6 fe       	sbrs	r12, 6
    da06:	23 c0       	rjmp	.+70     	; 0xda4e <crash_and_turn+0xc0>
    da08:	8d 2d       	mov	r24, r13
    da0a:	99 27       	eor	r25, r25
    da0c:	87 fd       	sbrc	r24, 7
    da0e:	90 95       	com	r25
    da10:	02 96       	adiw	r24, 0x02	; 2
    da12:	2e e1       	ldi	r18, 0x1E	; 30
    da14:	28 9f       	mul	r18, r24
    da16:	50 01       	movw	r10, r0
    da18:	29 9f       	mul	r18, r25
    da1a:	b0 0c       	add	r11, r0
    da1c:	11 24       	eor	r1, r1
    da1e:	ae 0c       	add	r10, r14
    da20:	b1 1c       	adc	r11, r1
    da22:	e7 fc       	sbrc	r14, 7
    da24:	ba 94       	dec	r11
    da26:	c5 01       	movw	r24, r10
    da28:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    da2c:	81 11       	cpse	r24, r1
    da2e:	0f c0       	rjmp	.+30     	; 0xda4e <crash_and_turn+0xc0>
    da30:	c5 01       	movw	r24, r10
    da32:	01 96       	adiw	r24, 0x01	; 1
    da34:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    da38:	81 11       	cpse	r24, r1
    da3a:	09 c0       	rjmp	.+18     	; 0xda4e <crash_and_turn+0xc0>
    da3c:	c5 01       	movw	r24, r10
    da3e:	02 96       	adiw	r24, 0x02	; 2
    da40:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    da44:	81 11       	cpse	r24, r1
    da46:	03 c0       	rjmp	.+6      	; 0xda4e <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    da48:	80 e2       	ldi	r24, 0x20	; 32
    da4a:	90 e0       	ldi	r25, 0x00	; 0
    da4c:	4a c0       	rjmp	.+148    	; 0xdae2 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    da4e:	c5 fe       	sbrs	r12, 5
    da50:	24 c0       	rjmp	.+72     	; 0xda9a <crash_and_turn+0x10c>
    da52:	fd 2d       	mov	r31, r13
    da54:	8e e1       	ldi	r24, 0x1E	; 30
    da56:	f8 02       	muls	r31, r24
    da58:	40 01       	movw	r8, r0
    da5a:	11 24       	eor	r1, r1
    da5c:	ae 2c       	mov	r10, r14
    da5e:	bb 24       	eor	r11, r11
    da60:	a7 fc       	sbrc	r10, 7
    da62:	b0 94       	com	r11
    da64:	c4 01       	movw	r24, r8
    da66:	8a 0d       	add	r24, r10
    da68:	9b 1d       	adc	r25, r11
    da6a:	02 96       	adiw	r24, 0x02	; 2
    da6c:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    da70:	81 11       	cpse	r24, r1
    da72:	13 c0       	rjmp	.+38     	; 0xda9a <crash_and_turn+0x10c>
    da74:	c4 01       	movw	r24, r8
    da76:	8a 0d       	add	r24, r10
    da78:	9b 1d       	adc	r25, r11
    da7a:	80 96       	adiw	r24, 0x20	; 32
    da7c:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    da80:	81 11       	cpse	r24, r1
    da82:	0b c0       	rjmp	.+22     	; 0xda9a <crash_and_turn+0x10c>
    da84:	c4 01       	movw	r24, r8
    da86:	8a 0d       	add	r24, r10
    da88:	9b 1d       	adc	r25, r11
    da8a:	ce 96       	adiw	r24, 0x3e	; 62
    da8c:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    da90:	81 11       	cpse	r24, r1
    da92:	03 c0       	rjmp	.+6      	; 0xda9a <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    da94:	80 e8       	ldi	r24, 0x80	; 128
    da96:	90 e0       	ldi	r25, 0x00	; 0
    da98:	24 c0       	rjmp	.+72     	; 0xdae2 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    da9a:	c7 fe       	sbrs	r12, 7
    da9c:	29 c0       	rjmp	.+82     	; 0xdaf0 <crash_and_turn+0x162>
    da9e:	8d 2d       	mov	r24, r13
    daa0:	99 27       	eor	r25, r25
    daa2:	87 fd       	sbrc	r24, 7
    daa4:	90 95       	com	r25
    daa6:	01 97       	sbiw	r24, 0x01	; 1
    daa8:	2e e1       	ldi	r18, 0x1E	; 30
    daaa:	28 9f       	mul	r18, r24
    daac:	50 01       	movw	r10, r0
    daae:	29 9f       	mul	r18, r25
    dab0:	b0 0c       	add	r11, r0
    dab2:	11 24       	eor	r1, r1
    dab4:	ae 0c       	add	r10, r14
    dab6:	b1 1c       	adc	r11, r1
    dab8:	e7 fc       	sbrc	r14, 7
    daba:	ba 94       	dec	r11
    dabc:	c5 01       	movw	r24, r10
    dabe:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    dac2:	81 11       	cpse	r24, r1
    dac4:	15 c0       	rjmp	.+42     	; 0xdaf0 <crash_and_turn+0x162>
    dac6:	c5 01       	movw	r24, r10
    dac8:	01 96       	adiw	r24, 0x01	; 1
    daca:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    dace:	81 11       	cpse	r24, r1
    dad0:	0f c0       	rjmp	.+30     	; 0xdaf0 <crash_and_turn+0x162>
    dad2:	c5 01       	movw	r24, r10
    dad4:	02 96       	adiw	r24, 0x02	; 2
    dad6:	0e 94 ac 5c 	call	0xb958	; 0xb958 <solid_tile>
    dada:	81 11       	cpse	r24, r1
    dadc:	09 c0       	rjmp	.+18     	; 0xdaf0 <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    dade:	80 e1       	ldi	r24, 0x10	; 16
    dae0:	90 e0       	ldi	r25, 0x00	; 0
    dae2:	f8 01       	movw	r30, r16
    dae4:	95 83       	std	Z+5, r25	; 0x05
    dae6:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    dae8:	ce 01       	movw	r24, r28
    daea:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <recoil_sprite>
			recoiled = 0;
    daee:	f1 2c       	mov	r15, r1
		}
		if (player->goal_direction & p->held)
    daf0:	f8 01       	movw	r30, r16
    daf2:	24 81       	ldd	r18, Z+4	; 0x04
    daf4:	35 81       	ldd	r19, Z+5	; 0x05
    daf6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    daf8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    dafa:	82 23       	and	r24, r18
    dafc:	93 23       	and	r25, r19
    dafe:	89 2b       	or	r24, r25
    db00:	11 f0       	breq	.+4      	; 0xdb06 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    db02:	1b 8e       	std	Y+27, r1	; 0x1b
			recoiled = 0;
    db04:	f1 2c       	mov	r15, r1
		}
	}
	if ((p->held & BTN_LEFT) && recoiled)
    db06:	f8 01       	movw	r30, r16
    db08:	84 81       	ldd	r24, Z+4	; 0x04
    db0a:	86 ff       	sbrs	r24, 6
    db0c:	05 c0       	rjmp	.+10     	; 0xdb18 <crash_and_turn+0x18a>
    db0e:	ff 20       	and	r15, r15
    db10:	19 f0       	breq	.+6      	; 0xdb18 <crash_and_turn+0x18a>
	{
		p->held = BTN_UP;
    db12:	80 e1       	ldi	r24, 0x10	; 16
    db14:	90 e0       	ldi	r25, 0x00	; 0
    db16:	15 c0       	rjmp	.+42     	; 0xdb42 <crash_and_turn+0x1b4>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_UP) && recoiled)
    db18:	84 ff       	sbrs	r24, 4
    db1a:	05 c0       	rjmp	.+10     	; 0xdb26 <crash_and_turn+0x198>
    db1c:	ff 20       	and	r15, r15
    db1e:	19 f0       	breq	.+6      	; 0xdb26 <crash_and_turn+0x198>
	{
		p->held = BTN_RIGHT;
    db20:	80 e8       	ldi	r24, 0x80	; 128
    db22:	90 e0       	ldi	r25, 0x00	; 0
    db24:	0d c0       	rjmp	.+26     	; 0xdb40 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_RIGHT) && recoiled)
    db26:	87 ff       	sbrs	r24, 7
    db28:	05 c0       	rjmp	.+10     	; 0xdb34 <crash_and_turn+0x1a6>
    db2a:	ff 20       	and	r15, r15
    db2c:	19 f0       	breq	.+6      	; 0xdb34 <crash_and_turn+0x1a6>
	{
		p->held = BTN_DOWN;
    db2e:	80 e2       	ldi	r24, 0x20	; 32
    db30:	90 e0       	ldi	r25, 0x00	; 0
    db32:	06 c0       	rjmp	.+12     	; 0xdb40 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_DOWN) && recoiled)
    db34:	85 ff       	sbrs	r24, 5
    db36:	09 c0       	rjmp	.+18     	; 0xdb4a <crash_and_turn+0x1bc>
    db38:	ff 20       	and	r15, r15
    db3a:	39 f0       	breq	.+14     	; 0xdb4a <crash_and_turn+0x1bc>
	{
		p->held = BTN_LEFT;
    db3c:	80 e4       	ldi	r24, 0x40	; 64
    db3e:	90 e0       	ldi	r25, 0x00	; 0
    db40:	f8 01       	movw	r30, r16
    db42:	95 83       	std	Z+5, r25	; 0x05
    db44:	84 83       	std	Z+4, r24	; 0x04
		player->feeling_my_way = 1;
    db46:	81 e0       	ldi	r24, 0x01	; 1
    db48:	8b 8f       	std	Y+27, r24	; 0x1b
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    db4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    db4c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    db4e:	80 31       	cpi	r24, 0x10	; 16
    db50:	91 05       	cpc	r25, r1
    db52:	19 f0       	breq	.+6      	; 0xdb5a <crash_and_turn+0x1cc>
    db54:	80 32       	cpi	r24, 0x20	; 32
    db56:	91 05       	cpc	r25, r1
    db58:	19 f4       	brne	.+6      	; 0xdb60 <crash_and_turn+0x1d2>
    db5a:	2a a1       	ldd	r18, Y+34	; 0x22
    db5c:	d2 16       	cp	r13, r18
    db5e:	59 f0       	breq	.+22     	; 0xdb76 <crash_and_turn+0x1e8>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    db60:	80 34       	cpi	r24, 0x40	; 64
    db62:	91 05       	cpc	r25, r1
    db64:	19 f0       	breq	.+6      	; 0xdb6c <crash_and_turn+0x1de>
    db66:	80 38       	cpi	r24, 0x80	; 128
    db68:	91 05       	cpc	r25, r1
    db6a:	39 f4       	brne	.+14     	; 0xdb7a <crash_and_turn+0x1ec>
    db6c:	81 e0       	ldi	r24, 0x01	; 1
    db6e:	9a a1       	ldd	r25, Y+34	; 0x22
    db70:	e9 12       	cpse	r14, r25
    db72:	03 c0       	rjmp	.+6      	; 0xdb7a <crash_and_turn+0x1ec>
    db74:	03 c0       	rjmp	.+6      	; 0xdb7c <crash_and_turn+0x1ee>
	{
		p->held = BTN_LEFT;
		player->feeling_my_way = 1;
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    db76:	81 e0       	ldi	r24, 0x01	; 1
    db78:	01 c0       	rjmp	.+2      	; 0xdb7c <crash_and_turn+0x1ee>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    db7a:	80 e0       	ldi	r24, 0x00	; 0
}
    db7c:	df 91       	pop	r29
    db7e:	cf 91       	pop	r28
    db80:	1f 91       	pop	r17
    db82:	0f 91       	pop	r16
    db84:	ff 90       	pop	r15
    db86:	ef 90       	pop	r14
    db88:	df 90       	pop	r13
    db8a:	cf 90       	pop	r12
    db8c:	bf 90       	pop	r11
    db8e:	af 90       	pop	r10
    db90:	9f 90       	pop	r9
    db92:	8f 90       	pop	r8
    db94:	08 95       	ret

0000db96 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    db96:	48 2f       	mov	r20, r24
    db98:	55 27       	eor	r21, r21
    db9a:	47 fd       	sbrc	r20, 7
    db9c:	50 95       	com	r21
    db9e:	57 ff       	sbrs	r21, 7
    dba0:	03 c0       	rjmp	.+6      	; 0xdba8 <get_cpu_goal_direction+0x12>
    dba2:	51 95       	neg	r21
    dba4:	41 95       	neg	r20
    dba6:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    dba8:	26 2f       	mov	r18, r22
    dbaa:	33 27       	eor	r19, r19
    dbac:	27 fd       	sbrc	r18, 7
    dbae:	30 95       	com	r19
    dbb0:	37 ff       	sbrs	r19, 7
    dbb2:	03 c0       	rjmp	.+6      	; 0xdbba <get_cpu_goal_direction+0x24>
    dbb4:	31 95       	neg	r19
    dbb6:	21 95       	neg	r18
    dbb8:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    dbba:	24 17       	cp	r18, r20
    dbbc:	2c f4       	brge	.+10     	; 0xdbc8 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    dbbe:	18 16       	cp	r1, r24
    dbc0:	44 f4       	brge	.+16     	; 0xdbd2 <get_cpu_goal_direction+0x3c>
    dbc2:	80 e8       	ldi	r24, 0x80	; 128
    dbc4:	90 e0       	ldi	r25, 0x00	; 0
    dbc6:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    dbc8:	16 16       	cp	r1, r22
    dbca:	34 f4       	brge	.+12     	; 0xdbd8 <get_cpu_goal_direction+0x42>
    dbcc:	80 e2       	ldi	r24, 0x20	; 32
    dbce:	90 e0       	ldi	r25, 0x00	; 0
    dbd0:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    dbd2:	80 e4       	ldi	r24, 0x40	; 64
    dbd4:	90 e0       	ldi	r25, 0x00	; 0
    dbd6:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    dbd8:	80 e1       	ldi	r24, 0x10	; 16
    dbda:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    dbdc:	08 95       	ret

0000dbde <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    dbde:	2f 92       	push	r2
    dbe0:	3f 92       	push	r3
    dbe2:	4f 92       	push	r4
    dbe4:	5f 92       	push	r5
    dbe6:	6f 92       	push	r6
    dbe8:	7f 92       	push	r7
    dbea:	8f 92       	push	r8
    dbec:	9f 92       	push	r9
    dbee:	af 92       	push	r10
    dbf0:	bf 92       	push	r11
    dbf2:	cf 92       	push	r12
    dbf4:	df 92       	push	r13
    dbf6:	ef 92       	push	r14
    dbf8:	ff 92       	push	r15
    dbfa:	0f 93       	push	r16
    dbfc:	1f 93       	push	r17
    dbfe:	cf 93       	push	r28
    dc00:	df 93       	push	r29
    dc02:	00 d0       	rcall	.+0      	; 0xdc04 <get_cpu_joypad_state+0x26>
    dc04:	00 d0       	rcall	.+0      	; 0xdc06 <get_cpu_joypad_state+0x28>
    dc06:	00 d0       	rcall	.+0      	; 0xdc08 <get_cpu_joypad_state+0x2a>
    dc08:	cd b7       	in	r28, 0x3d	; 61
    dc0a:	de b7       	in	r29, 0x3e	; 62
    dc0c:	1c 01       	movw	r2, r24
    dc0e:	8a 01       	movw	r16, r20
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    dc10:	db 01       	movw	r26, r22
    dc12:	13 96       	adiw	r26, 0x03	; 3
    dc14:	8d 91       	ld	r24, X+
    dc16:	9d 91       	ld	r25, X+
    dc18:	0d 90       	ld	r0, X+
    dc1a:	bc 91       	ld	r27, X
    dc1c:	a0 2d       	mov	r26, r0
    dc1e:	89 83       	std	Y+1, r24	; 0x01
    dc20:	9a 83       	std	Y+2, r25	; 0x02
    dc22:	ab 83       	std	Y+3, r26	; 0x03
    dc24:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    dc26:	fb 01       	movw	r30, r22
    dc28:	47 80       	ldd	r4, Z+7	; 0x07
    dc2a:	50 84       	ldd	r5, Z+8	; 0x08
    dc2c:	61 84       	ldd	r6, Z+9	; 0x09
    dc2e:	72 84       	ldd	r7, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    dc30:	d1 01       	movw	r26, r2
    dc32:	13 96       	adiw	r26, 0x03	; 3
    dc34:	8d 90       	ld	r8, X+
    dc36:	9d 90       	ld	r9, X+
    dc38:	ad 90       	ld	r10, X+
    dc3a:	bc 90       	ld	r11, X
    dc3c:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    dc3e:	17 96       	adiw	r26, 0x07	; 7
    dc40:	cd 90       	ld	r12, X+
    dc42:	dd 90       	ld	r13, X+
    dc44:	ed 90       	ld	r14, X+
    dc46:	fc 90       	ld	r15, X
    dc48:	1a 97       	sbiw	r26, 0x0a	; 10
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    dc4a:	57 96       	adiw	r26, 0x17	; 23
    dc4c:	8c 91       	ld	r24, X
    dc4e:	81 11       	cpse	r24, r1
    dc50:	04 c0       	rjmp	.+8      	; 0xdc5a <get_cpu_joypad_state+0x7c>
	{
		p->held = 0;
    dc52:	fa 01       	movw	r30, r20
    dc54:	15 82       	std	Z+5, r1	; 0x05
    dc56:	14 82       	std	Z+4, r1	; 0x04
		return;
    dc58:	4e c1       	rjmp	.+668    	; 0xdef6 <get_cpu_joypad_state+0x318>
	}
	
	// Shot
	if (p->pressed & BTN_A)
    dc5a:	da 01       	movw	r26, r20
    dc5c:	8d 91       	ld	r24, X+
    dc5e:	9c 91       	ld	r25, X
    dc60:	11 97       	sbiw	r26, 0x01	; 1
    dc62:	90 ff       	sbrs	r25, 0
    dc64:	02 c0       	rjmp	.+4      	; 0xdc6a <get_cpu_joypad_state+0x8c>
	{
		p->pressed = 0;
    dc66:	1d 92       	st	X+, r1
    dc68:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    dc6a:	20 91 04 01 	lds	r18, 0x0104
    dc6e:	30 91 05 01 	lds	r19, 0x0105
    dc72:	c9 01       	movw	r24, r18
    dc74:	6a e0       	ldi	r22, 0x0A	; 10
    dc76:	70 e0       	ldi	r23, 0x00	; 0
    dc78:	0e 94 32 70 	call	0xe064	; 0xe064 <__udivmodhi4>
    dc7c:	89 2b       	or	r24, r25
    dc7e:	49 f4       	brne	.+18     	; 0xdc92 <get_cpu_joypad_state+0xb4>
    dc80:	f1 01       	movw	r30, r2
    dc82:	87 89       	ldd	r24, Z+23	; 0x17
    dc84:	83 33       	cpi	r24, 0x33	; 51
    dc86:	28 f0       	brcs	.+10     	; 0xdc92 <get_cpu_joypad_state+0xb4>
	{
		p->pressed = BTN_A;
    dc88:	80 e0       	ldi	r24, 0x00	; 0
    dc8a:	91 e0       	ldi	r25, 0x01	; 1
    dc8c:	d8 01       	movw	r26, r16
    dc8e:	8d 93       	st	X+, r24
    dc90:	9c 93       	st	X, r25
    dc92:	3e 82       	std	Y+6, r3	; 0x06
    dc94:	2d 82       	std	Y+5, r2	; 0x05
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    dc96:	c9 01       	movw	r24, r18
    dc98:	64 eb       	ldi	r22, 0xB4	; 180
    dc9a:	70 e0       	ldi	r23, 0x00	; 0
    dc9c:	0e 94 32 70 	call	0xe064	; 0xe064 <__udivmodhi4>
    dca0:	89 2b       	or	r24, r25
    dca2:	41 f0       	breq	.+16     	; 0xdcb4 <get_cpu_joypad_state+0xd6>
    dca4:	f1 01       	movw	r30, r2
    dca6:	87 89       	ldd	r24, Z+23	; 0x17
    dca8:	8a 30       	cpi	r24, 0x0A	; 10
    dcaa:	21 f0       	breq	.+8      	; 0xdcb4 <get_cpu_joypad_state+0xd6>
    dcac:	83 a1       	ldd	r24, Z+35	; 0x23
    dcae:	88 23       	and	r24, r24
    dcb0:	09 f4       	brne	.+2      	; 0xdcb4 <get_cpu_joypad_state+0xd6>
    dcb2:	7e c0       	rjmp	.+252    	; 0xddb0 <get_cpu_joypad_state+0x1d2>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    dcb4:	20 e0       	ldi	r18, 0x00	; 0
    dcb6:	30 e0       	ldi	r19, 0x00	; 0
    dcb8:	40 e0       	ldi	r20, 0x00	; 0
    dcba:	5e e3       	ldi	r21, 0x3E	; 62
    dcbc:	69 81       	ldd	r22, Y+1	; 0x01
    dcbe:	7a 81       	ldd	r23, Y+2	; 0x02
    dcc0:	8b 81       	ldd	r24, Y+3	; 0x03
    dcc2:	9c 81       	ldd	r25, Y+4	; 0x04
    dcc4:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    dcc8:	0e 94 2b 71 	call	0xe256	; 0xe256 <__fixsfsi>
    dccc:	36 2e       	mov	r3, r22
	goal_y = other_player->shared.y / 8 - 3;
    dcce:	20 e0       	ldi	r18, 0x00	; 0
    dcd0:	30 e0       	ldi	r19, 0x00	; 0
    dcd2:	40 e0       	ldi	r20, 0x00	; 0
    dcd4:	5e e3       	ldi	r21, 0x3E	; 62
    dcd6:	c3 01       	movw	r24, r6
    dcd8:	b2 01       	movw	r22, r4
    dcda:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    dcde:	20 e0       	ldi	r18, 0x00	; 0
    dce0:	30 e0       	ldi	r19, 0x00	; 0
    dce2:	40 e4       	ldi	r20, 0x40	; 64
    dce4:	50 e4       	ldi	r21, 0x40	; 64
    dce6:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    dcea:	0e 94 2b 71 	call	0xe256	; 0xe256 <__fixsfsi>
    dcee:	76 2e       	mov	r7, r22
	player_x = player->shared.x / 8;
    dcf0:	20 e0       	ldi	r18, 0x00	; 0
    dcf2:	30 e0       	ldi	r19, 0x00	; 0
    dcf4:	40 e0       	ldi	r20, 0x00	; 0
    dcf6:	5e e3       	ldi	r21, 0x3E	; 62
    dcf8:	c5 01       	movw	r24, r10
    dcfa:	b4 01       	movw	r22, r8
    dcfc:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    dd00:	0e 94 2b 71 	call	0xe256	; 0xe256 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    dd04:	b3 2c       	mov	r11, r3
    dd06:	b6 1a       	sub	r11, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    dd08:	20 e0       	ldi	r18, 0x00	; 0
    dd0a:	30 e0       	ldi	r19, 0x00	; 0
    dd0c:	40 e0       	ldi	r20, 0x00	; 0
    dd0e:	5e e3       	ldi	r21, 0x3E	; 62
    dd10:	c7 01       	movw	r24, r14
    dd12:	b6 01       	movw	r22, r12
    dd14:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    dd18:	20 e0       	ldi	r18, 0x00	; 0
    dd1a:	30 e0       	ldi	r19, 0x00	; 0
    dd1c:	40 e4       	ldi	r20, 0x40	; 64
    dd1e:	50 e4       	ldi	r21, 0x40	; 64
    dd20:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    dd24:	0e 94 2b 71 	call	0xe256	; 0xe256 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    dd28:	f7 2d       	mov	r31, r7
    dd2a:	f6 1b       	sub	r31, r22
    dd2c:	6f 2f       	mov	r22, r31
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    dd2e:	ad 81       	ldd	r26, Y+5	; 0x05
    dd30:	be 81       	ldd	r27, Y+6	; 0x06
    dd32:	93 96       	adiw	r26, 0x23	; 35
    dd34:	1c 92       	st	X, r1
    dd36:	93 97       	sbiw	r26, 0x23	; 35
		player->feeling_my_way = 0;
    dd38:	5b 96       	adiw	r26, 0x1b	; 27
    dd3a:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    dd3c:	82 e0       	ldi	r24, 0x02	; 2
    dd3e:	8b 0d       	add	r24, r11
    dd40:	85 30       	cpi	r24, 0x05	; 5
    dd42:	d8 f4       	brcc	.+54     	; 0xdd7a <get_cpu_joypad_state+0x19c>
    dd44:	fe 3f       	cpi	r31, 0xFE	; 254
    dd46:	cc f0       	brlt	.+50     	; 0xdd7a <get_cpu_joypad_state+0x19c>
    dd48:	f3 30       	cpi	r31, 0x03	; 3
    dd4a:	bc f4       	brge	.+46     	; 0xdd7a <get_cpu_joypad_state+0x19c>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    dd4c:	64 e0       	ldi	r22, 0x04	; 4
    dd4e:	70 e0       	ldi	r23, 0x00	; 0
    dd50:	80 e0       	ldi	r24, 0x00	; 0
    dd52:	90 e0       	ldi	r25, 0x00	; 0
    dd54:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBRandom>
    dd58:	0e 94 b1 6c 	call	0xd962	; 0xd962 <button_map>
    dd5c:	ed 81       	ldd	r30, Y+5	; 0x05
    dd5e:	fe 81       	ldd	r31, Y+6	; 0x06
    dd60:	95 8f       	std	Z+29, r25	; 0x1d
    dd62:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = LBRandom(5, 18);
    dd64:	62 e1       	ldi	r22, 0x12	; 18
    dd66:	70 e0       	ldi	r23, 0x00	; 0
    dd68:	85 e0       	ldi	r24, 0x05	; 5
    dd6a:	90 e0       	ldi	r25, 0x00	; 0
    dd6c:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBRandom>
    dd70:	ad 81       	ldd	r26, Y+5	; 0x05
    dd72:	be 81       	ldd	r27, Y+6	; 0x06
    dd74:	92 96       	adiw	r26, 0x22	; 34
    dd76:	8c 93       	st	X, r24
    dd78:	12 c0       	rjmp	.+36     	; 0xdd9e <get_cpu_joypad_state+0x1c0>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    dd7a:	8b 2d       	mov	r24, r11
    dd7c:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <get_cpu_goal_direction>
    dd80:	ed 81       	ldd	r30, Y+5	; 0x05
    dd82:	fe 81       	ldd	r31, Y+6	; 0x06
    dd84:	95 8f       	std	Z+29, r25	; 0x1d
    dd86:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    dd88:	80 31       	cpi	r24, 0x10	; 16
    dd8a:	91 05       	cpc	r25, r1
    dd8c:	21 f0       	breq	.+8      	; 0xdd96 <get_cpu_joypad_state+0x1b8>
    dd8e:	80 97       	sbiw	r24, 0x20	; 32
    dd90:	11 f0       	breq	.+4      	; 0xdd96 <get_cpu_joypad_state+0x1b8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    dd92:	32 a2       	std	Z+34, r3	; 0x22
    dd94:	04 c0       	rjmp	.+8      	; 0xdd9e <get_cpu_joypad_state+0x1c0>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    dd96:	ad 81       	ldd	r26, Y+5	; 0x05
    dd98:	be 81       	ldd	r27, Y+6	; 0x06
    dd9a:	92 96       	adiw	r26, 0x22	; 34
    dd9c:	7c 92       	st	X, r7
		}
		p->held = player->goal_direction;
    dd9e:	ed 81       	ldd	r30, Y+5	; 0x05
    dda0:	fe 81       	ldd	r31, Y+6	; 0x06
    dda2:	84 8d       	ldd	r24, Z+28	; 0x1c
    dda4:	95 8d       	ldd	r25, Z+29	; 0x1d
    dda6:	d8 01       	movw	r26, r16
    dda8:	15 96       	adiw	r26, 0x05	; 5
    ddaa:	9c 93       	st	X, r25
    ddac:	8e 93       	st	-X, r24
    ddae:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    ddb0:	ed 81       	ldd	r30, Y+5	; 0x05
    ddb2:	fe 81       	ldd	r31, Y+6	; 0x06
    ddb4:	c3 80       	ldd	r12, Z+3	; 0x03
    ddb6:	d4 80       	ldd	r13, Z+4	; 0x04
    ddb8:	e5 80       	ldd	r14, Z+5	; 0x05
    ddba:	f6 80       	ldd	r15, Z+6	; 0x06
    ddbc:	24 a1       	ldd	r18, Z+36	; 0x24
    ddbe:	35 a1       	ldd	r19, Z+37	; 0x25
    ddc0:	46 a1       	ldd	r20, Z+38	; 0x26
    ddc2:	57 a1       	ldd	r21, Z+39	; 0x27
    ddc4:	c7 01       	movw	r24, r14
    ddc6:	b6 01       	movw	r22, r12
    ddc8:	0e 94 bf 70 	call	0xe17e	; 0xe17e <__cmpsf2>
    ddcc:	88 23       	and	r24, r24
    ddce:	39 f0       	breq	.+14     	; 0xddde <get_cpu_joypad_state+0x200>
		player->deadlock_count_x = 0;
    ddd0:	ad 81       	ldd	r26, Y+5	; 0x05
    ddd2:	be 81       	ldd	r27, Y+6	; 0x06
    ddd4:	5f 96       	adiw	r26, 0x1f	; 31
    ddd6:	1c 92       	st	X, r1
    ddd8:	1e 92       	st	-X, r1
    ddda:	5e 97       	sbiw	r26, 0x1e	; 30
    dddc:	07 c0       	rjmp	.+14     	; 0xddec <get_cpu_joypad_state+0x20e>
	else 
		player->deadlock_count_x++;
    ddde:	ed 81       	ldd	r30, Y+5	; 0x05
    dde0:	fe 81       	ldd	r31, Y+6	; 0x06
    dde2:	86 8d       	ldd	r24, Z+30	; 0x1e
    dde4:	97 8d       	ldd	r25, Z+31	; 0x1f
    dde6:	01 96       	adiw	r24, 0x01	; 1
    dde8:	97 8f       	std	Z+31, r25	; 0x1f
    ddea:	86 8f       	std	Z+30, r24	; 0x1e
	if (player->shared.y != player->old_y)
    ddec:	ad 81       	ldd	r26, Y+5	; 0x05
    ddee:	be 81       	ldd	r27, Y+6	; 0x06
    ddf0:	17 96       	adiw	r26, 0x07	; 7
    ddf2:	8d 90       	ld	r8, X+
    ddf4:	9d 90       	ld	r9, X+
    ddf6:	ad 90       	ld	r10, X+
    ddf8:	bc 90       	ld	r11, X
    ddfa:	1a 97       	sbiw	r26, 0x0a	; 10
    ddfc:	98 96       	adiw	r26, 0x28	; 40
    ddfe:	2d 91       	ld	r18, X+
    de00:	3d 91       	ld	r19, X+
    de02:	4d 91       	ld	r20, X+
    de04:	5c 91       	ld	r21, X
    de06:	9b 97       	sbiw	r26, 0x2b	; 43
    de08:	c5 01       	movw	r24, r10
    de0a:	b4 01       	movw	r22, r8
    de0c:	0e 94 bf 70 	call	0xe17e	; 0xe17e <__cmpsf2>
    de10:	88 23       	and	r24, r24
    de12:	29 f0       	breq	.+10     	; 0xde1e <get_cpu_joypad_state+0x240>
		player->deadlock_count_y = 0;
    de14:	ed 81       	ldd	r30, Y+5	; 0x05
    de16:	fe 81       	ldd	r31, Y+6	; 0x06
    de18:	11 a2       	std	Z+33, r1	; 0x21
    de1a:	10 a2       	std	Z+32, r1	; 0x20
    de1c:	0b c0       	rjmp	.+22     	; 0xde34 <get_cpu_joypad_state+0x256>
	else
		player->deadlock_count_y++;
    de1e:	ad 81       	ldd	r26, Y+5	; 0x05
    de20:	be 81       	ldd	r27, Y+6	; 0x06
    de22:	90 96       	adiw	r26, 0x20	; 32
    de24:	8d 91       	ld	r24, X+
    de26:	9c 91       	ld	r25, X
    de28:	91 97       	sbiw	r26, 0x21	; 33
    de2a:	01 96       	adiw	r24, 0x01	; 1
    de2c:	91 96       	adiw	r26, 0x21	; 33
    de2e:	9c 93       	st	X, r25
    de30:	8e 93       	st	-X, r24
    de32:	90 97       	sbiw	r26, 0x20	; 32
	player->old_x = player->shared.x;
    de34:	ed 81       	ldd	r30, Y+5	; 0x05
    de36:	fe 81       	ldd	r31, Y+6	; 0x06
    de38:	c4 a2       	std	Z+36, r12	; 0x24
    de3a:	d5 a2       	std	Z+37, r13	; 0x25
    de3c:	e6 a2       	std	Z+38, r14	; 0x26
    de3e:	f7 a2       	std	Z+39, r15	; 0x27
	player->old_y = player->shared.y;
    de40:	80 a6       	std	Z+40, r8	; 0x28
    de42:	91 a6       	std	Z+41, r9	; 0x29
    de44:	a2 a6       	std	Z+42, r10	; 0x2a
    de46:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    de48:	86 8d       	ldd	r24, Z+30	; 0x1e
    de4a:	97 8d       	ldd	r25, Z+31	; 0x1f
    de4c:	80 34       	cpi	r24, 0x40	; 64
    de4e:	91 40       	sbci	r25, 0x01	; 1
    de50:	90 f0       	brcs	.+36     	; 0xde76 <get_cpu_joypad_state+0x298>
	{
		p->held = button_map(LBRandom(2, 4));
    de52:	64 e0       	ldi	r22, 0x04	; 4
    de54:	70 e0       	ldi	r23, 0x00	; 0
    de56:	82 e0       	ldi	r24, 0x02	; 2
    de58:	90 e0       	ldi	r25, 0x00	; 0
    de5a:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBRandom>
    de5e:	0e 94 b1 6c 	call	0xd962	; 0xd962 <button_map>
    de62:	f8 01       	movw	r30, r16
    de64:	95 83       	std	Z+5, r25	; 0x05
    de66:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_x = 0;
    de68:	ad 81       	ldd	r26, Y+5	; 0x05
    de6a:	be 81       	ldd	r27, Y+6	; 0x06
    de6c:	5f 96       	adiw	r26, 0x1f	; 31
    de6e:	1c 92       	st	X, r1
    de70:	1e 92       	st	-X, r1
    de72:	5e 97       	sbiw	r26, 0x1e	; 30
    de74:	40 c0       	rjmp	.+128    	; 0xdef6 <get_cpu_joypad_state+0x318>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    de76:	ed 81       	ldd	r30, Y+5	; 0x05
    de78:	fe 81       	ldd	r31, Y+6	; 0x06
    de7a:	80 a1       	ldd	r24, Z+32	; 0x20
    de7c:	91 a1       	ldd	r25, Z+33	; 0x21
    de7e:	80 34       	cpi	r24, 0x40	; 64
    de80:	91 40       	sbci	r25, 0x01	; 1
    de82:	90 f0       	brcs	.+36     	; 0xdea8 <get_cpu_joypad_state+0x2ca>
	{
		p->held = button_map(LBRandom(0, 2));
    de84:	62 e0       	ldi	r22, 0x02	; 2
    de86:	70 e0       	ldi	r23, 0x00	; 0
    de88:	80 e0       	ldi	r24, 0x00	; 0
    de8a:	90 e0       	ldi	r25, 0x00	; 0
    de8c:	0e 94 fd 56 	call	0xadfa	; 0xadfa <LBRandom>
    de90:	0e 94 b1 6c 	call	0xd962	; 0xd962 <button_map>
    de94:	d8 01       	movw	r26, r16
    de96:	15 96       	adiw	r26, 0x05	; 5
    de98:	9c 93       	st	X, r25
    de9a:	8e 93       	st	-X, r24
    de9c:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_y = 0;
    de9e:	ed 81       	ldd	r30, Y+5	; 0x05
    dea0:	fe 81       	ldd	r31, Y+6	; 0x06
    dea2:	11 a2       	std	Z+33, r1	; 0x21
    dea4:	10 a2       	std	Z+32, r1	; 0x20
    dea6:	27 c0       	rjmp	.+78     	; 0xdef6 <get_cpu_joypad_state+0x318>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    dea8:	20 e0       	ldi	r18, 0x00	; 0
    deaa:	30 e0       	ldi	r19, 0x00	; 0
    deac:	40 e0       	ldi	r20, 0x00	; 0
    deae:	5e e3       	ldi	r21, 0x3E	; 62
    deb0:	c5 01       	movw	r24, r10
    deb2:	b4 01       	movw	r22, r8
    deb4:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    deb8:	20 e0       	ldi	r18, 0x00	; 0
    deba:	30 e0       	ldi	r19, 0x00	; 0
    debc:	40 e4       	ldi	r20, 0x40	; 64
    debe:	50 e4       	ldi	r21, 0x40	; 64
    dec0:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <__subsf3>
    dec4:	0e 94 2b 71 	call	0xe256	; 0xe256 <__fixsfsi>
    dec8:	b6 2e       	mov	r11, r22
    deca:	20 e0       	ldi	r18, 0x00	; 0
    decc:	30 e0       	ldi	r19, 0x00	; 0
    dece:	40 e0       	ldi	r20, 0x00	; 0
    ded0:	5e e3       	ldi	r21, 0x3E	; 62
    ded2:	c7 01       	movw	r24, r14
    ded4:	b6 01       	movw	r22, r12
    ded6:	0e 94 12 72 	call	0xe424	; 0xe424 <__mulsf3>
    deda:	0e 94 2b 71 	call	0xe256	; 0xe256 <__fixsfsi>
    dede:	86 2f       	mov	r24, r22
    dee0:	2d 81       	ldd	r18, Y+5	; 0x05
    dee2:	3e 81       	ldd	r19, Y+6	; 0x06
    dee4:	d9 01       	movw	r26, r18
    dee6:	12 96       	adiw	r26, 0x02	; 2
    dee8:	4c 91       	ld	r20, X
    deea:	6b 2d       	mov	r22, r11
    deec:	0e 94 c7 6c 	call	0xd98e	; 0xd98e <crash_and_turn>
    def0:	ed 81       	ldd	r30, Y+5	; 0x05
    def2:	fe 81       	ldd	r31, Y+6	; 0x06
    def4:	83 a3       	std	Z+35, r24	; 0x23
}
    def6:	26 96       	adiw	r28, 0x06	; 6
    def8:	0f b6       	in	r0, 0x3f	; 63
    defa:	f8 94       	cli
    defc:	de bf       	out	0x3e, r29	; 62
    defe:	0f be       	out	0x3f, r0	; 63
    df00:	cd bf       	out	0x3d, r28	; 61
    df02:	df 91       	pop	r29
    df04:	cf 91       	pop	r28
    df06:	1f 91       	pop	r17
    df08:	0f 91       	pop	r16
    df0a:	ff 90       	pop	r15
    df0c:	ef 90       	pop	r14
    df0e:	df 90       	pop	r13
    df10:	cf 90       	pop	r12
    df12:	bf 90       	pop	r11
    df14:	af 90       	pop	r10
    df16:	9f 90       	pop	r9
    df18:	8f 90       	pop	r8
    df1a:	7f 90       	pop	r7
    df1c:	6f 90       	pop	r6
    df1e:	5f 90       	pop	r5
    df20:	4f 90       	pop	r4
    df22:	3f 90       	pop	r3
    df24:	2f 90       	pop	r2
    df26:	08 95       	ret

0000df28 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    df28:	86 e8       	ldi	r24, 0x86	; 134
    df2a:	9b e0       	ldi	r25, 0x0B	; 11
    df2c:	0e 94 46 48 	call	0x908c	; 0x908c <InitMusicPlayer>
	SetMasterVolume(0xff);
    df30:	8f ef       	ldi	r24, 0xFF	; 255
    df32:	0e 94 d8 4b 	call	0x97b0	; 0x97b0 <SetMasterVolume>
	SetTileTable(tiles_data);
    df36:	84 ed       	ldi	r24, 0xD4	; 212
    df38:	99 e4       	ldi	r25, 0x49	; 73
    df3a:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <SetTileTable>
	SetSpritesTileTable(sprites_data);
    df3e:	83 e4       	ldi	r24, 0x43	; 67
    df40:	90 e4       	ldi	r25, 0x40	; 64
    df42:	0e 94 e1 45 	call	0x8bc2	; 0x8bc2 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    df46:	8b e9       	ldi	r24, 0x9B	; 155
    df48:	0e 94 02 46 	call	0x8c04	; 0x8c04 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    df4c:	60 e0       	ldi	r22, 0x00	; 0
    df4e:	83 e0       	ldi	r24, 0x03	; 3
    df50:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <FadeIn>
	ClearVram();
    df54:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <ClearVram>
	init_scores(&scores);
    df58:	84 ec       	ldi	r24, 0xC4	; 196
    df5a:	9b e0       	ldi	r25, 0x0B	; 11
    df5c:	0e 94 41 57 	call	0xae82	; 0xae82 <init_scores>
	init_handles(&handles);
    df60:	8b ee       	ldi	r24, 0xEB	; 235
    df62:	9b e0       	ldi	r25, 0x0B	; 11
    df64:	0e 94 4d 57 	call	0xae9a	; 0xae9a <init_handles>
	init_game_state();
    df68:	0e 94 78 58 	call	0xb0f0	; 0xb0f0 <init_game_state>
	load_splash();
    df6c:	0e 94 b7 64 	call	0xc96e	; 0xc96e <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    df70:	81 e0       	ldi	r24, 0x01	; 1
    df72:	90 e0       	ldi	r25, 0x00	; 0
    df74:	0e 94 87 54 	call	0xa90e	; 0xa90e <WaitVsync>
		switch (game.current_screen)
    df78:	80 91 0b 0c 	lds	r24, 0x0C0B
    df7c:	81 30       	cpi	r24, 0x01	; 1
    df7e:	91 f0       	breq	.+36     	; 0xdfa4 <main+0x7c>
    df80:	28 f0       	brcs	.+10     	; 0xdf8c <main+0x64>
    df82:	82 30       	cpi	r24, 0x02	; 2
    df84:	d9 f0       	breq	.+54     	; 0xdfbc <main+0x94>
    df86:	83 30       	cpi	r24, 0x03	; 3
    df88:	51 f1       	breq	.+84     	; 0xdfde <main+0xb6>
    df8a:	56 c0       	rjmp	.+172    	; 0xe038 <main+0x110>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    df8c:	60 e0       	ldi	r22, 0x00	; 0
    df8e:	8e ea       	ldi	r24, 0xAE	; 174
    df90:	9c e0       	ldi	r25, 0x0C	; 12
    df92:	0e 94 75 55 	call	0xaaea	; 0xaaea <LBGetJoyPadState>
				update_splash(&p1, &p2);
    df96:	64 ee       	ldi	r22, 0xE4	; 228
    df98:	7b e0       	ldi	r23, 0x0B	; 11
    df9a:	8e ea       	ldi	r24, 0xAE	; 174
    df9c:	9c e0       	ldi	r25, 0x0C	; 12
    df9e:	0e 94 8d 6b 	call	0xd71a	; 0xd71a <update_splash>
				break;
    dfa2:	4a c0       	rjmp	.+148    	; 0xe038 <main+0x110>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    dfa4:	60 e0       	ldi	r22, 0x00	; 0
    dfa6:	8e ea       	ldi	r24, 0xAE	; 174
    dfa8:	9c e0       	ldi	r25, 0x0C	; 12
    dfaa:	0e 94 75 55 	call	0xaaea	; 0xaaea <LBGetJoyPadState>
				update_tank_rank(&p1, &p2);
    dfae:	64 ee       	ldi	r22, 0xE4	; 228
    dfb0:	7b e0       	ldi	r23, 0x0B	; 11
    dfb2:	8e ea       	ldi	r24, 0xAE	; 174
    dfb4:	9c e0       	ldi	r25, 0x0C	; 12
    dfb6:	0e 94 2c 69 	call	0xd258	; 0xd258 <update_tank_rank>
				break;
    dfba:	3e c0       	rjmp	.+124    	; 0xe038 <main+0x110>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    dfbc:	60 e0       	ldi	r22, 0x00	; 0
    dfbe:	8e ea       	ldi	r24, 0xAE	; 174
    dfc0:	9c e0       	ldi	r25, 0x0C	; 12
    dfc2:	0e 94 75 55 	call	0xaaea	; 0xaaea <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    dfc6:	61 e0       	ldi	r22, 0x01	; 1
    dfc8:	84 ee       	ldi	r24, 0xE4	; 228
    dfca:	9b e0       	ldi	r25, 0x0B	; 11
    dfcc:	0e 94 75 55 	call	0xaaea	; 0xaaea <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    dfd0:	64 ee       	ldi	r22, 0xE4	; 228
    dfd2:	7b e0       	ldi	r23, 0x0B	; 11
    dfd4:	8e ea       	ldi	r24, 0xAE	; 174
    dfd6:	9c e0       	ldi	r25, 0x0C	; 12
    dfd8:	0e 94 63 6c 	call	0xd8c6	; 0xd8c6 <update_handle_select>
				break;
    dfdc:	2d c0       	rjmp	.+90     	; 0xe038 <main+0x110>
			case LEVEL:
				if (game.selection == PVCPU)
    dfde:	80 91 18 0c 	lds	r24, 0x0C18
    dfe2:	81 11       	cpse	r24, r1
    dfe4:	06 c0       	rjmp	.+12     	; 0xdff2 <main+0xca>
				{
					LBGetJoyPadState(&p1, 0);
    dfe6:	60 e0       	ldi	r22, 0x00	; 0
    dfe8:	8e ea       	ldi	r24, 0xAE	; 174
    dfea:	9c e0       	ldi	r25, 0x0C	; 12
    dfec:	0e 94 75 55 	call	0xaaea	; 0xaaea <LBGetJoyPadState>
    dff0:	0a c0       	rjmp	.+20     	; 0xe006 <main+0xde>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    dff2:	83 30       	cpi	r24, 0x03	; 3
    dff4:	89 f4       	brne	.+34     	; 0xe018 <main+0xf0>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    dff6:	4e ea       	ldi	r20, 0xAE	; 174
    dff8:	5c e0       	ldi	r21, 0x0C	; 12
    dffa:	64 ea       	ldi	r22, 0xA4	; 164
    dffc:	7f e0       	ldi	r23, 0x0F	; 15
    dffe:	86 e3       	ldi	r24, 0x36	; 54
    e000:	9c e0       	ldi	r25, 0x0C	; 12
    e002:	0e 94 ef 6d 	call	0xdbde	; 0xdbde <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    e006:	44 ee       	ldi	r20, 0xE4	; 228
    e008:	5b e0       	ldi	r21, 0x0B	; 11
    e00a:	66 e3       	ldi	r22, 0x36	; 54
    e00c:	7c e0       	ldi	r23, 0x0C	; 12
    e00e:	84 ea       	ldi	r24, 0xA4	; 164
    e010:	9f e0       	ldi	r25, 0x0F	; 15
    e012:	0e 94 ef 6d 	call	0xdbde	; 0xdbde <get_cpu_joypad_state>
    e016:	0a c0       	rjmp	.+20     	; 0xe02c <main+0x104>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e018:	60 e0       	ldi	r22, 0x00	; 0
    e01a:	8e ea       	ldi	r24, 0xAE	; 174
    e01c:	9c e0       	ldi	r25, 0x0C	; 12
    e01e:	0e 94 75 55 	call	0xaaea	; 0xaaea <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e022:	61 e0       	ldi	r22, 0x01	; 1
    e024:	84 ee       	ldi	r24, 0xE4	; 228
    e026:	9b e0       	ldi	r25, 0x0B	; 11
    e028:	0e 94 75 55 	call	0xaaea	; 0xaaea <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    e02c:	64 ee       	ldi	r22, 0xE4	; 228
    e02e:	7b e0       	ldi	r23, 0x0B	; 11
    e030:	8e ea       	ldi	r24, 0xAE	; 174
    e032:	9c e0       	ldi	r25, 0x0C	; 12
    e034:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e038:	80 91 04 01 	lds	r24, 0x0104
    e03c:	90 91 05 01 	lds	r25, 0x0105
    e040:	01 96       	adiw	r24, 0x01	; 1
    e042:	90 93 05 01 	sts	0x0105, r25
    e046:	80 93 04 01 	sts	0x0104, r24
	}
    e04a:	92 cf       	rjmp	.-220    	; 0xdf70 <main+0x48>

0000e04c <__udivmodqi4>:
    e04c:	99 1b       	sub	r25, r25
    e04e:	79 e0       	ldi	r23, 0x09	; 9
    e050:	04 c0       	rjmp	.+8      	; 0xe05a <__udivmodqi4_ep>

0000e052 <__udivmodqi4_loop>:
    e052:	99 1f       	adc	r25, r25
    e054:	96 17       	cp	r25, r22
    e056:	08 f0       	brcs	.+2      	; 0xe05a <__udivmodqi4_ep>
    e058:	96 1b       	sub	r25, r22

0000e05a <__udivmodqi4_ep>:
    e05a:	88 1f       	adc	r24, r24
    e05c:	7a 95       	dec	r23
    e05e:	c9 f7       	brne	.-14     	; 0xe052 <__udivmodqi4_loop>
    e060:	80 95       	com	r24
    e062:	08 95       	ret

0000e064 <__udivmodhi4>:
    e064:	aa 1b       	sub	r26, r26
    e066:	bb 1b       	sub	r27, r27
    e068:	51 e1       	ldi	r21, 0x11	; 17
    e06a:	07 c0       	rjmp	.+14     	; 0xe07a <__udivmodhi4_ep>

0000e06c <__udivmodhi4_loop>:
    e06c:	aa 1f       	adc	r26, r26
    e06e:	bb 1f       	adc	r27, r27
    e070:	a6 17       	cp	r26, r22
    e072:	b7 07       	cpc	r27, r23
    e074:	10 f0       	brcs	.+4      	; 0xe07a <__udivmodhi4_ep>
    e076:	a6 1b       	sub	r26, r22
    e078:	b7 0b       	sbc	r27, r23

0000e07a <__udivmodhi4_ep>:
    e07a:	88 1f       	adc	r24, r24
    e07c:	99 1f       	adc	r25, r25
    e07e:	5a 95       	dec	r21
    e080:	a9 f7       	brne	.-22     	; 0xe06c <__udivmodhi4_loop>
    e082:	80 95       	com	r24
    e084:	90 95       	com	r25
    e086:	bc 01       	movw	r22, r24
    e088:	cd 01       	movw	r24, r26
    e08a:	08 95       	ret

0000e08c <__divmodhi4>:
    e08c:	97 fb       	bst	r25, 7
    e08e:	07 2e       	mov	r0, r23
    e090:	16 f4       	brtc	.+4      	; 0xe096 <__divmodhi4+0xa>
    e092:	00 94       	com	r0
    e094:	07 d0       	rcall	.+14     	; 0xe0a4 <__divmodhi4_neg1>
    e096:	77 fd       	sbrc	r23, 7
    e098:	09 d0       	rcall	.+18     	; 0xe0ac <__divmodhi4_neg2>
    e09a:	0e 94 32 70 	call	0xe064	; 0xe064 <__udivmodhi4>
    e09e:	07 fc       	sbrc	r0, 7
    e0a0:	05 d0       	rcall	.+10     	; 0xe0ac <__divmodhi4_neg2>
    e0a2:	3e f4       	brtc	.+14     	; 0xe0b2 <__divmodhi4_exit>

0000e0a4 <__divmodhi4_neg1>:
    e0a4:	90 95       	com	r25
    e0a6:	81 95       	neg	r24
    e0a8:	9f 4f       	sbci	r25, 0xFF	; 255
    e0aa:	08 95       	ret

0000e0ac <__divmodhi4_neg2>:
    e0ac:	70 95       	com	r23
    e0ae:	61 95       	neg	r22
    e0b0:	7f 4f       	sbci	r23, 0xFF	; 255

0000e0b2 <__divmodhi4_exit>:
    e0b2:	08 95       	ret

0000e0b4 <__subsf3>:
    e0b4:	50 58       	subi	r21, 0x80	; 128

0000e0b6 <__addsf3>:
    e0b6:	bb 27       	eor	r27, r27
    e0b8:	aa 27       	eor	r26, r26
    e0ba:	0e d0       	rcall	.+28     	; 0xe0d8 <__addsf3x>
    e0bc:	75 c1       	rjmp	.+746    	; 0xe3a8 <__fp_round>
    e0be:	66 d1       	rcall	.+716    	; 0xe38c <__fp_pscA>
    e0c0:	30 f0       	brcs	.+12     	; 0xe0ce <__addsf3+0x18>
    e0c2:	6b d1       	rcall	.+726    	; 0xe39a <__fp_pscB>
    e0c4:	20 f0       	brcs	.+8      	; 0xe0ce <__addsf3+0x18>
    e0c6:	31 f4       	brne	.+12     	; 0xe0d4 <__addsf3+0x1e>
    e0c8:	9f 3f       	cpi	r25, 0xFF	; 255
    e0ca:	11 f4       	brne	.+4      	; 0xe0d0 <__addsf3+0x1a>
    e0cc:	1e f4       	brtc	.+6      	; 0xe0d4 <__addsf3+0x1e>
    e0ce:	5b c1       	rjmp	.+694    	; 0xe386 <__fp_nan>
    e0d0:	0e f4       	brtc	.+2      	; 0xe0d4 <__addsf3+0x1e>
    e0d2:	e0 95       	com	r30
    e0d4:	e7 fb       	bst	r30, 7
    e0d6:	51 c1       	rjmp	.+674    	; 0xe37a <__fp_inf>

0000e0d8 <__addsf3x>:
    e0d8:	e9 2f       	mov	r30, r25
    e0da:	77 d1       	rcall	.+750    	; 0xe3ca <__fp_split3>
    e0dc:	80 f3       	brcs	.-32     	; 0xe0be <__addsf3+0x8>
    e0de:	ba 17       	cp	r27, r26
    e0e0:	62 07       	cpc	r22, r18
    e0e2:	73 07       	cpc	r23, r19
    e0e4:	84 07       	cpc	r24, r20
    e0e6:	95 07       	cpc	r25, r21
    e0e8:	18 f0       	brcs	.+6      	; 0xe0f0 <__addsf3x+0x18>
    e0ea:	71 f4       	brne	.+28     	; 0xe108 <__addsf3x+0x30>
    e0ec:	9e f5       	brtc	.+102    	; 0xe154 <__addsf3x+0x7c>
    e0ee:	8f c1       	rjmp	.+798    	; 0xe40e <__fp_zero>
    e0f0:	0e f4       	brtc	.+2      	; 0xe0f4 <__addsf3x+0x1c>
    e0f2:	e0 95       	com	r30
    e0f4:	0b 2e       	mov	r0, r27
    e0f6:	ba 2f       	mov	r27, r26
    e0f8:	a0 2d       	mov	r26, r0
    e0fa:	0b 01       	movw	r0, r22
    e0fc:	b9 01       	movw	r22, r18
    e0fe:	90 01       	movw	r18, r0
    e100:	0c 01       	movw	r0, r24
    e102:	ca 01       	movw	r24, r20
    e104:	a0 01       	movw	r20, r0
    e106:	11 24       	eor	r1, r1
    e108:	ff 27       	eor	r31, r31
    e10a:	59 1b       	sub	r21, r25
    e10c:	99 f0       	breq	.+38     	; 0xe134 <__addsf3x+0x5c>
    e10e:	59 3f       	cpi	r21, 0xF9	; 249
    e110:	50 f4       	brcc	.+20     	; 0xe126 <__addsf3x+0x4e>
    e112:	50 3e       	cpi	r21, 0xE0	; 224
    e114:	68 f1       	brcs	.+90     	; 0xe170 <__addsf3x+0x98>
    e116:	1a 16       	cp	r1, r26
    e118:	f0 40       	sbci	r31, 0x00	; 0
    e11a:	a2 2f       	mov	r26, r18
    e11c:	23 2f       	mov	r18, r19
    e11e:	34 2f       	mov	r19, r20
    e120:	44 27       	eor	r20, r20
    e122:	58 5f       	subi	r21, 0xF8	; 248
    e124:	f3 cf       	rjmp	.-26     	; 0xe10c <__addsf3x+0x34>
    e126:	46 95       	lsr	r20
    e128:	37 95       	ror	r19
    e12a:	27 95       	ror	r18
    e12c:	a7 95       	ror	r26
    e12e:	f0 40       	sbci	r31, 0x00	; 0
    e130:	53 95       	inc	r21
    e132:	c9 f7       	brne	.-14     	; 0xe126 <__addsf3x+0x4e>
    e134:	7e f4       	brtc	.+30     	; 0xe154 <__addsf3x+0x7c>
    e136:	1f 16       	cp	r1, r31
    e138:	ba 0b       	sbc	r27, r26
    e13a:	62 0b       	sbc	r22, r18
    e13c:	73 0b       	sbc	r23, r19
    e13e:	84 0b       	sbc	r24, r20
    e140:	ba f0       	brmi	.+46     	; 0xe170 <__addsf3x+0x98>
    e142:	91 50       	subi	r25, 0x01	; 1
    e144:	a1 f0       	breq	.+40     	; 0xe16e <__addsf3x+0x96>
    e146:	ff 0f       	add	r31, r31
    e148:	bb 1f       	adc	r27, r27
    e14a:	66 1f       	adc	r22, r22
    e14c:	77 1f       	adc	r23, r23
    e14e:	88 1f       	adc	r24, r24
    e150:	c2 f7       	brpl	.-16     	; 0xe142 <__addsf3x+0x6a>
    e152:	0e c0       	rjmp	.+28     	; 0xe170 <__addsf3x+0x98>
    e154:	ba 0f       	add	r27, r26
    e156:	62 1f       	adc	r22, r18
    e158:	73 1f       	adc	r23, r19
    e15a:	84 1f       	adc	r24, r20
    e15c:	48 f4       	brcc	.+18     	; 0xe170 <__addsf3x+0x98>
    e15e:	87 95       	ror	r24
    e160:	77 95       	ror	r23
    e162:	67 95       	ror	r22
    e164:	b7 95       	ror	r27
    e166:	f7 95       	ror	r31
    e168:	9e 3f       	cpi	r25, 0xFE	; 254
    e16a:	08 f0       	brcs	.+2      	; 0xe16e <__addsf3x+0x96>
    e16c:	b3 cf       	rjmp	.-154    	; 0xe0d4 <__addsf3+0x1e>
    e16e:	93 95       	inc	r25
    e170:	88 0f       	add	r24, r24
    e172:	08 f0       	brcs	.+2      	; 0xe176 <__addsf3x+0x9e>
    e174:	99 27       	eor	r25, r25
    e176:	ee 0f       	add	r30, r30
    e178:	97 95       	ror	r25
    e17a:	87 95       	ror	r24
    e17c:	08 95       	ret

0000e17e <__cmpsf2>:
    e17e:	d9 d0       	rcall	.+434    	; 0xe332 <__fp_cmp>
    e180:	08 f4       	brcc	.+2      	; 0xe184 <__cmpsf2+0x6>
    e182:	81 e0       	ldi	r24, 0x01	; 1
    e184:	08 95       	ret

0000e186 <__divsf3>:
    e186:	0c d0       	rcall	.+24     	; 0xe1a0 <__divsf3x>
    e188:	0f c1       	rjmp	.+542    	; 0xe3a8 <__fp_round>
    e18a:	07 d1       	rcall	.+526    	; 0xe39a <__fp_pscB>
    e18c:	40 f0       	brcs	.+16     	; 0xe19e <__divsf3+0x18>
    e18e:	fe d0       	rcall	.+508    	; 0xe38c <__fp_pscA>
    e190:	30 f0       	brcs	.+12     	; 0xe19e <__divsf3+0x18>
    e192:	21 f4       	brne	.+8      	; 0xe19c <__divsf3+0x16>
    e194:	5f 3f       	cpi	r21, 0xFF	; 255
    e196:	19 f0       	breq	.+6      	; 0xe19e <__divsf3+0x18>
    e198:	f0 c0       	rjmp	.+480    	; 0xe37a <__fp_inf>
    e19a:	51 11       	cpse	r21, r1
    e19c:	39 c1       	rjmp	.+626    	; 0xe410 <__fp_szero>
    e19e:	f3 c0       	rjmp	.+486    	; 0xe386 <__fp_nan>

0000e1a0 <__divsf3x>:
    e1a0:	14 d1       	rcall	.+552    	; 0xe3ca <__fp_split3>
    e1a2:	98 f3       	brcs	.-26     	; 0xe18a <__divsf3+0x4>

0000e1a4 <__divsf3_pse>:
    e1a4:	99 23       	and	r25, r25
    e1a6:	c9 f3       	breq	.-14     	; 0xe19a <__divsf3+0x14>
    e1a8:	55 23       	and	r21, r21
    e1aa:	b1 f3       	breq	.-20     	; 0xe198 <__divsf3+0x12>
    e1ac:	95 1b       	sub	r25, r21
    e1ae:	55 0b       	sbc	r21, r21
    e1b0:	bb 27       	eor	r27, r27
    e1b2:	aa 27       	eor	r26, r26
    e1b4:	62 17       	cp	r22, r18
    e1b6:	73 07       	cpc	r23, r19
    e1b8:	84 07       	cpc	r24, r20
    e1ba:	38 f0       	brcs	.+14     	; 0xe1ca <__divsf3_pse+0x26>
    e1bc:	9f 5f       	subi	r25, 0xFF	; 255
    e1be:	5f 4f       	sbci	r21, 0xFF	; 255
    e1c0:	22 0f       	add	r18, r18
    e1c2:	33 1f       	adc	r19, r19
    e1c4:	44 1f       	adc	r20, r20
    e1c6:	aa 1f       	adc	r26, r26
    e1c8:	a9 f3       	breq	.-22     	; 0xe1b4 <__divsf3_pse+0x10>
    e1ca:	33 d0       	rcall	.+102    	; 0xe232 <__divsf3_pse+0x8e>
    e1cc:	0e 2e       	mov	r0, r30
    e1ce:	3a f0       	brmi	.+14     	; 0xe1de <__divsf3_pse+0x3a>
    e1d0:	e0 e8       	ldi	r30, 0x80	; 128
    e1d2:	30 d0       	rcall	.+96     	; 0xe234 <__divsf3_pse+0x90>
    e1d4:	91 50       	subi	r25, 0x01	; 1
    e1d6:	50 40       	sbci	r21, 0x00	; 0
    e1d8:	e6 95       	lsr	r30
    e1da:	00 1c       	adc	r0, r0
    e1dc:	ca f7       	brpl	.-14     	; 0xe1d0 <__divsf3_pse+0x2c>
    e1de:	29 d0       	rcall	.+82     	; 0xe232 <__divsf3_pse+0x8e>
    e1e0:	fe 2f       	mov	r31, r30
    e1e2:	27 d0       	rcall	.+78     	; 0xe232 <__divsf3_pse+0x8e>
    e1e4:	66 0f       	add	r22, r22
    e1e6:	77 1f       	adc	r23, r23
    e1e8:	88 1f       	adc	r24, r24
    e1ea:	bb 1f       	adc	r27, r27
    e1ec:	26 17       	cp	r18, r22
    e1ee:	37 07       	cpc	r19, r23
    e1f0:	48 07       	cpc	r20, r24
    e1f2:	ab 07       	cpc	r26, r27
    e1f4:	b0 e8       	ldi	r27, 0x80	; 128
    e1f6:	09 f0       	breq	.+2      	; 0xe1fa <__divsf3_pse+0x56>
    e1f8:	bb 0b       	sbc	r27, r27
    e1fa:	80 2d       	mov	r24, r0
    e1fc:	bf 01       	movw	r22, r30
    e1fe:	ff 27       	eor	r31, r31
    e200:	93 58       	subi	r25, 0x83	; 131
    e202:	5f 4f       	sbci	r21, 0xFF	; 255
    e204:	2a f0       	brmi	.+10     	; 0xe210 <__divsf3_pse+0x6c>
    e206:	9e 3f       	cpi	r25, 0xFE	; 254
    e208:	51 05       	cpc	r21, r1
    e20a:	68 f0       	brcs	.+26     	; 0xe226 <__divsf3_pse+0x82>
    e20c:	b6 c0       	rjmp	.+364    	; 0xe37a <__fp_inf>
    e20e:	00 c1       	rjmp	.+512    	; 0xe410 <__fp_szero>
    e210:	5f 3f       	cpi	r21, 0xFF	; 255
    e212:	ec f3       	brlt	.-6      	; 0xe20e <__divsf3_pse+0x6a>
    e214:	98 3e       	cpi	r25, 0xE8	; 232
    e216:	dc f3       	brlt	.-10     	; 0xe20e <__divsf3_pse+0x6a>
    e218:	86 95       	lsr	r24
    e21a:	77 95       	ror	r23
    e21c:	67 95       	ror	r22
    e21e:	b7 95       	ror	r27
    e220:	f7 95       	ror	r31
    e222:	9f 5f       	subi	r25, 0xFF	; 255
    e224:	c9 f7       	brne	.-14     	; 0xe218 <__divsf3_pse+0x74>
    e226:	88 0f       	add	r24, r24
    e228:	91 1d       	adc	r25, r1
    e22a:	96 95       	lsr	r25
    e22c:	87 95       	ror	r24
    e22e:	97 f9       	bld	r25, 7
    e230:	08 95       	ret
    e232:	e1 e0       	ldi	r30, 0x01	; 1
    e234:	66 0f       	add	r22, r22
    e236:	77 1f       	adc	r23, r23
    e238:	88 1f       	adc	r24, r24
    e23a:	bb 1f       	adc	r27, r27
    e23c:	62 17       	cp	r22, r18
    e23e:	73 07       	cpc	r23, r19
    e240:	84 07       	cpc	r24, r20
    e242:	ba 07       	cpc	r27, r26
    e244:	20 f0       	brcs	.+8      	; 0xe24e <__divsf3_pse+0xaa>
    e246:	62 1b       	sub	r22, r18
    e248:	73 0b       	sbc	r23, r19
    e24a:	84 0b       	sbc	r24, r20
    e24c:	ba 0b       	sbc	r27, r26
    e24e:	ee 1f       	adc	r30, r30
    e250:	88 f7       	brcc	.-30     	; 0xe234 <__divsf3_pse+0x90>
    e252:	e0 95       	com	r30
    e254:	08 95       	ret

0000e256 <__fixsfsi>:
    e256:	04 d0       	rcall	.+8      	; 0xe260 <__fixunssfsi>
    e258:	68 94       	set
    e25a:	b1 11       	cpse	r27, r1
    e25c:	d9 c0       	rjmp	.+434    	; 0xe410 <__fp_szero>
    e25e:	08 95       	ret

0000e260 <__fixunssfsi>:
    e260:	bc d0       	rcall	.+376    	; 0xe3da <__fp_splitA>
    e262:	88 f0       	brcs	.+34     	; 0xe286 <__fixunssfsi+0x26>
    e264:	9f 57       	subi	r25, 0x7F	; 127
    e266:	90 f0       	brcs	.+36     	; 0xe28c <__fixunssfsi+0x2c>
    e268:	b9 2f       	mov	r27, r25
    e26a:	99 27       	eor	r25, r25
    e26c:	b7 51       	subi	r27, 0x17	; 23
    e26e:	a0 f0       	brcs	.+40     	; 0xe298 <__fixunssfsi+0x38>
    e270:	d1 f0       	breq	.+52     	; 0xe2a6 <__fixunssfsi+0x46>
    e272:	66 0f       	add	r22, r22
    e274:	77 1f       	adc	r23, r23
    e276:	88 1f       	adc	r24, r24
    e278:	99 1f       	adc	r25, r25
    e27a:	1a f0       	brmi	.+6      	; 0xe282 <__fixunssfsi+0x22>
    e27c:	ba 95       	dec	r27
    e27e:	c9 f7       	brne	.-14     	; 0xe272 <__fixunssfsi+0x12>
    e280:	12 c0       	rjmp	.+36     	; 0xe2a6 <__fixunssfsi+0x46>
    e282:	b1 30       	cpi	r27, 0x01	; 1
    e284:	81 f0       	breq	.+32     	; 0xe2a6 <__fixunssfsi+0x46>
    e286:	c3 d0       	rcall	.+390    	; 0xe40e <__fp_zero>
    e288:	b1 e0       	ldi	r27, 0x01	; 1
    e28a:	08 95       	ret
    e28c:	c0 c0       	rjmp	.+384    	; 0xe40e <__fp_zero>
    e28e:	67 2f       	mov	r22, r23
    e290:	78 2f       	mov	r23, r24
    e292:	88 27       	eor	r24, r24
    e294:	b8 5f       	subi	r27, 0xF8	; 248
    e296:	39 f0       	breq	.+14     	; 0xe2a6 <__fixunssfsi+0x46>
    e298:	b9 3f       	cpi	r27, 0xF9	; 249
    e29a:	cc f3       	brlt	.-14     	; 0xe28e <__fixunssfsi+0x2e>
    e29c:	86 95       	lsr	r24
    e29e:	77 95       	ror	r23
    e2a0:	67 95       	ror	r22
    e2a2:	b3 95       	inc	r27
    e2a4:	d9 f7       	brne	.-10     	; 0xe29c <__fixunssfsi+0x3c>
    e2a6:	3e f4       	brtc	.+14     	; 0xe2b6 <__fixunssfsi+0x56>
    e2a8:	90 95       	com	r25
    e2aa:	80 95       	com	r24
    e2ac:	70 95       	com	r23
    e2ae:	61 95       	neg	r22
    e2b0:	7f 4f       	sbci	r23, 0xFF	; 255
    e2b2:	8f 4f       	sbci	r24, 0xFF	; 255
    e2b4:	9f 4f       	sbci	r25, 0xFF	; 255
    e2b6:	08 95       	ret

0000e2b8 <__floatunsisf>:
    e2b8:	e8 94       	clt
    e2ba:	09 c0       	rjmp	.+18     	; 0xe2ce <__floatsisf+0x12>

0000e2bc <__floatsisf>:
    e2bc:	97 fb       	bst	r25, 7
    e2be:	3e f4       	brtc	.+14     	; 0xe2ce <__floatsisf+0x12>
    e2c0:	90 95       	com	r25
    e2c2:	80 95       	com	r24
    e2c4:	70 95       	com	r23
    e2c6:	61 95       	neg	r22
    e2c8:	7f 4f       	sbci	r23, 0xFF	; 255
    e2ca:	8f 4f       	sbci	r24, 0xFF	; 255
    e2cc:	9f 4f       	sbci	r25, 0xFF	; 255
    e2ce:	99 23       	and	r25, r25
    e2d0:	a9 f0       	breq	.+42     	; 0xe2fc <__floatsisf+0x40>
    e2d2:	f9 2f       	mov	r31, r25
    e2d4:	96 e9       	ldi	r25, 0x96	; 150
    e2d6:	bb 27       	eor	r27, r27
    e2d8:	93 95       	inc	r25
    e2da:	f6 95       	lsr	r31
    e2dc:	87 95       	ror	r24
    e2de:	77 95       	ror	r23
    e2e0:	67 95       	ror	r22
    e2e2:	b7 95       	ror	r27
    e2e4:	f1 11       	cpse	r31, r1
    e2e6:	f8 cf       	rjmp	.-16     	; 0xe2d8 <__floatsisf+0x1c>
    e2e8:	fa f4       	brpl	.+62     	; 0xe328 <__floatsisf+0x6c>
    e2ea:	bb 0f       	add	r27, r27
    e2ec:	11 f4       	brne	.+4      	; 0xe2f2 <__floatsisf+0x36>
    e2ee:	60 ff       	sbrs	r22, 0
    e2f0:	1b c0       	rjmp	.+54     	; 0xe328 <__floatsisf+0x6c>
    e2f2:	6f 5f       	subi	r22, 0xFF	; 255
    e2f4:	7f 4f       	sbci	r23, 0xFF	; 255
    e2f6:	8f 4f       	sbci	r24, 0xFF	; 255
    e2f8:	9f 4f       	sbci	r25, 0xFF	; 255
    e2fa:	16 c0       	rjmp	.+44     	; 0xe328 <__floatsisf+0x6c>
    e2fc:	88 23       	and	r24, r24
    e2fe:	11 f0       	breq	.+4      	; 0xe304 <__floatsisf+0x48>
    e300:	96 e9       	ldi	r25, 0x96	; 150
    e302:	11 c0       	rjmp	.+34     	; 0xe326 <__floatsisf+0x6a>
    e304:	77 23       	and	r23, r23
    e306:	21 f0       	breq	.+8      	; 0xe310 <__floatsisf+0x54>
    e308:	9e e8       	ldi	r25, 0x8E	; 142
    e30a:	87 2f       	mov	r24, r23
    e30c:	76 2f       	mov	r23, r22
    e30e:	05 c0       	rjmp	.+10     	; 0xe31a <__floatsisf+0x5e>
    e310:	66 23       	and	r22, r22
    e312:	71 f0       	breq	.+28     	; 0xe330 <__floatsisf+0x74>
    e314:	96 e8       	ldi	r25, 0x86	; 134
    e316:	86 2f       	mov	r24, r22
    e318:	70 e0       	ldi	r23, 0x00	; 0
    e31a:	60 e0       	ldi	r22, 0x00	; 0
    e31c:	2a f0       	brmi	.+10     	; 0xe328 <__floatsisf+0x6c>
    e31e:	9a 95       	dec	r25
    e320:	66 0f       	add	r22, r22
    e322:	77 1f       	adc	r23, r23
    e324:	88 1f       	adc	r24, r24
    e326:	da f7       	brpl	.-10     	; 0xe31e <__floatsisf+0x62>
    e328:	88 0f       	add	r24, r24
    e32a:	96 95       	lsr	r25
    e32c:	87 95       	ror	r24
    e32e:	97 f9       	bld	r25, 7
    e330:	08 95       	ret

0000e332 <__fp_cmp>:
    e332:	99 0f       	add	r25, r25
    e334:	00 08       	sbc	r0, r0
    e336:	55 0f       	add	r21, r21
    e338:	aa 0b       	sbc	r26, r26
    e33a:	e0 e8       	ldi	r30, 0x80	; 128
    e33c:	fe ef       	ldi	r31, 0xFE	; 254
    e33e:	16 16       	cp	r1, r22
    e340:	17 06       	cpc	r1, r23
    e342:	e8 07       	cpc	r30, r24
    e344:	f9 07       	cpc	r31, r25
    e346:	c0 f0       	brcs	.+48     	; 0xe378 <__fp_cmp+0x46>
    e348:	12 16       	cp	r1, r18
    e34a:	13 06       	cpc	r1, r19
    e34c:	e4 07       	cpc	r30, r20
    e34e:	f5 07       	cpc	r31, r21
    e350:	98 f0       	brcs	.+38     	; 0xe378 <__fp_cmp+0x46>
    e352:	62 1b       	sub	r22, r18
    e354:	73 0b       	sbc	r23, r19
    e356:	84 0b       	sbc	r24, r20
    e358:	95 0b       	sbc	r25, r21
    e35a:	39 f4       	brne	.+14     	; 0xe36a <__fp_cmp+0x38>
    e35c:	0a 26       	eor	r0, r26
    e35e:	61 f0       	breq	.+24     	; 0xe378 <__fp_cmp+0x46>
    e360:	23 2b       	or	r18, r19
    e362:	24 2b       	or	r18, r20
    e364:	25 2b       	or	r18, r21
    e366:	21 f4       	brne	.+8      	; 0xe370 <__fp_cmp+0x3e>
    e368:	08 95       	ret
    e36a:	0a 26       	eor	r0, r26
    e36c:	09 f4       	brne	.+2      	; 0xe370 <__fp_cmp+0x3e>
    e36e:	a1 40       	sbci	r26, 0x01	; 1
    e370:	a6 95       	lsr	r26
    e372:	8f ef       	ldi	r24, 0xFF	; 255
    e374:	81 1d       	adc	r24, r1
    e376:	81 1d       	adc	r24, r1
    e378:	08 95       	ret

0000e37a <__fp_inf>:
    e37a:	97 f9       	bld	r25, 7
    e37c:	9f 67       	ori	r25, 0x7F	; 127
    e37e:	80 e8       	ldi	r24, 0x80	; 128
    e380:	70 e0       	ldi	r23, 0x00	; 0
    e382:	60 e0       	ldi	r22, 0x00	; 0
    e384:	08 95       	ret

0000e386 <__fp_nan>:
    e386:	9f ef       	ldi	r25, 0xFF	; 255
    e388:	80 ec       	ldi	r24, 0xC0	; 192
    e38a:	08 95       	ret

0000e38c <__fp_pscA>:
    e38c:	00 24       	eor	r0, r0
    e38e:	0a 94       	dec	r0
    e390:	16 16       	cp	r1, r22
    e392:	17 06       	cpc	r1, r23
    e394:	18 06       	cpc	r1, r24
    e396:	09 06       	cpc	r0, r25
    e398:	08 95       	ret

0000e39a <__fp_pscB>:
    e39a:	00 24       	eor	r0, r0
    e39c:	0a 94       	dec	r0
    e39e:	12 16       	cp	r1, r18
    e3a0:	13 06       	cpc	r1, r19
    e3a2:	14 06       	cpc	r1, r20
    e3a4:	05 06       	cpc	r0, r21
    e3a6:	08 95       	ret

0000e3a8 <__fp_round>:
    e3a8:	09 2e       	mov	r0, r25
    e3aa:	03 94       	inc	r0
    e3ac:	00 0c       	add	r0, r0
    e3ae:	11 f4       	brne	.+4      	; 0xe3b4 <__fp_round+0xc>
    e3b0:	88 23       	and	r24, r24
    e3b2:	52 f0       	brmi	.+20     	; 0xe3c8 <__fp_round+0x20>
    e3b4:	bb 0f       	add	r27, r27
    e3b6:	40 f4       	brcc	.+16     	; 0xe3c8 <__fp_round+0x20>
    e3b8:	bf 2b       	or	r27, r31
    e3ba:	11 f4       	brne	.+4      	; 0xe3c0 <__fp_round+0x18>
    e3bc:	60 ff       	sbrs	r22, 0
    e3be:	04 c0       	rjmp	.+8      	; 0xe3c8 <__fp_round+0x20>
    e3c0:	6f 5f       	subi	r22, 0xFF	; 255
    e3c2:	7f 4f       	sbci	r23, 0xFF	; 255
    e3c4:	8f 4f       	sbci	r24, 0xFF	; 255
    e3c6:	9f 4f       	sbci	r25, 0xFF	; 255
    e3c8:	08 95       	ret

0000e3ca <__fp_split3>:
    e3ca:	57 fd       	sbrc	r21, 7
    e3cc:	90 58       	subi	r25, 0x80	; 128
    e3ce:	44 0f       	add	r20, r20
    e3d0:	55 1f       	adc	r21, r21
    e3d2:	59 f0       	breq	.+22     	; 0xe3ea <__fp_splitA+0x10>
    e3d4:	5f 3f       	cpi	r21, 0xFF	; 255
    e3d6:	71 f0       	breq	.+28     	; 0xe3f4 <__fp_splitA+0x1a>
    e3d8:	47 95       	ror	r20

0000e3da <__fp_splitA>:
    e3da:	88 0f       	add	r24, r24
    e3dc:	97 fb       	bst	r25, 7
    e3de:	99 1f       	adc	r25, r25
    e3e0:	61 f0       	breq	.+24     	; 0xe3fa <__fp_splitA+0x20>
    e3e2:	9f 3f       	cpi	r25, 0xFF	; 255
    e3e4:	79 f0       	breq	.+30     	; 0xe404 <__fp_splitA+0x2a>
    e3e6:	87 95       	ror	r24
    e3e8:	08 95       	ret
    e3ea:	12 16       	cp	r1, r18
    e3ec:	13 06       	cpc	r1, r19
    e3ee:	14 06       	cpc	r1, r20
    e3f0:	55 1f       	adc	r21, r21
    e3f2:	f2 cf       	rjmp	.-28     	; 0xe3d8 <__fp_split3+0xe>
    e3f4:	46 95       	lsr	r20
    e3f6:	f1 df       	rcall	.-30     	; 0xe3da <__fp_splitA>
    e3f8:	08 c0       	rjmp	.+16     	; 0xe40a <__fp_splitA+0x30>
    e3fa:	16 16       	cp	r1, r22
    e3fc:	17 06       	cpc	r1, r23
    e3fe:	18 06       	cpc	r1, r24
    e400:	99 1f       	adc	r25, r25
    e402:	f1 cf       	rjmp	.-30     	; 0xe3e6 <__fp_splitA+0xc>
    e404:	86 95       	lsr	r24
    e406:	71 05       	cpc	r23, r1
    e408:	61 05       	cpc	r22, r1
    e40a:	08 94       	sec
    e40c:	08 95       	ret

0000e40e <__fp_zero>:
    e40e:	e8 94       	clt

0000e410 <__fp_szero>:
    e410:	bb 27       	eor	r27, r27
    e412:	66 27       	eor	r22, r22
    e414:	77 27       	eor	r23, r23
    e416:	cb 01       	movw	r24, r22
    e418:	97 f9       	bld	r25, 7
    e41a:	08 95       	ret

0000e41c <__gesf2>:
    e41c:	8a df       	rcall	.-236    	; 0xe332 <__fp_cmp>
    e41e:	08 f4       	brcc	.+2      	; 0xe422 <__gesf2+0x6>
    e420:	8f ef       	ldi	r24, 0xFF	; 255
    e422:	08 95       	ret

0000e424 <__mulsf3>:
    e424:	0b d0       	rcall	.+22     	; 0xe43c <__mulsf3x>
    e426:	c0 cf       	rjmp	.-128    	; 0xe3a8 <__fp_round>
    e428:	b1 df       	rcall	.-158    	; 0xe38c <__fp_pscA>
    e42a:	28 f0       	brcs	.+10     	; 0xe436 <__mulsf3+0x12>
    e42c:	b6 df       	rcall	.-148    	; 0xe39a <__fp_pscB>
    e42e:	18 f0       	brcs	.+6      	; 0xe436 <__mulsf3+0x12>
    e430:	95 23       	and	r25, r21
    e432:	09 f0       	breq	.+2      	; 0xe436 <__mulsf3+0x12>
    e434:	a2 cf       	rjmp	.-188    	; 0xe37a <__fp_inf>
    e436:	a7 cf       	rjmp	.-178    	; 0xe386 <__fp_nan>
    e438:	11 24       	eor	r1, r1
    e43a:	ea cf       	rjmp	.-44     	; 0xe410 <__fp_szero>

0000e43c <__mulsf3x>:
    e43c:	c6 df       	rcall	.-116    	; 0xe3ca <__fp_split3>
    e43e:	a0 f3       	brcs	.-24     	; 0xe428 <__mulsf3+0x4>

0000e440 <__mulsf3_pse>:
    e440:	95 9f       	mul	r25, r21
    e442:	d1 f3       	breq	.-12     	; 0xe438 <__mulsf3+0x14>
    e444:	95 0f       	add	r25, r21
    e446:	50 e0       	ldi	r21, 0x00	; 0
    e448:	55 1f       	adc	r21, r21
    e44a:	62 9f       	mul	r22, r18
    e44c:	f0 01       	movw	r30, r0
    e44e:	72 9f       	mul	r23, r18
    e450:	bb 27       	eor	r27, r27
    e452:	f0 0d       	add	r31, r0
    e454:	b1 1d       	adc	r27, r1
    e456:	63 9f       	mul	r22, r19
    e458:	aa 27       	eor	r26, r26
    e45a:	f0 0d       	add	r31, r0
    e45c:	b1 1d       	adc	r27, r1
    e45e:	aa 1f       	adc	r26, r26
    e460:	64 9f       	mul	r22, r20
    e462:	66 27       	eor	r22, r22
    e464:	b0 0d       	add	r27, r0
    e466:	a1 1d       	adc	r26, r1
    e468:	66 1f       	adc	r22, r22
    e46a:	82 9f       	mul	r24, r18
    e46c:	22 27       	eor	r18, r18
    e46e:	b0 0d       	add	r27, r0
    e470:	a1 1d       	adc	r26, r1
    e472:	62 1f       	adc	r22, r18
    e474:	73 9f       	mul	r23, r19
    e476:	b0 0d       	add	r27, r0
    e478:	a1 1d       	adc	r26, r1
    e47a:	62 1f       	adc	r22, r18
    e47c:	83 9f       	mul	r24, r19
    e47e:	a0 0d       	add	r26, r0
    e480:	61 1d       	adc	r22, r1
    e482:	22 1f       	adc	r18, r18
    e484:	74 9f       	mul	r23, r20
    e486:	33 27       	eor	r19, r19
    e488:	a0 0d       	add	r26, r0
    e48a:	61 1d       	adc	r22, r1
    e48c:	23 1f       	adc	r18, r19
    e48e:	84 9f       	mul	r24, r20
    e490:	60 0d       	add	r22, r0
    e492:	21 1d       	adc	r18, r1
    e494:	82 2f       	mov	r24, r18
    e496:	76 2f       	mov	r23, r22
    e498:	6a 2f       	mov	r22, r26
    e49a:	11 24       	eor	r1, r1
    e49c:	9f 57       	subi	r25, 0x7F	; 127
    e49e:	50 40       	sbci	r21, 0x00	; 0
    e4a0:	8a f0       	brmi	.+34     	; 0xe4c4 <__mulsf3_pse+0x84>
    e4a2:	e1 f0       	breq	.+56     	; 0xe4dc <__mulsf3_pse+0x9c>
    e4a4:	88 23       	and	r24, r24
    e4a6:	4a f0       	brmi	.+18     	; 0xe4ba <__mulsf3_pse+0x7a>
    e4a8:	ee 0f       	add	r30, r30
    e4aa:	ff 1f       	adc	r31, r31
    e4ac:	bb 1f       	adc	r27, r27
    e4ae:	66 1f       	adc	r22, r22
    e4b0:	77 1f       	adc	r23, r23
    e4b2:	88 1f       	adc	r24, r24
    e4b4:	91 50       	subi	r25, 0x01	; 1
    e4b6:	50 40       	sbci	r21, 0x00	; 0
    e4b8:	a9 f7       	brne	.-22     	; 0xe4a4 <__mulsf3_pse+0x64>
    e4ba:	9e 3f       	cpi	r25, 0xFE	; 254
    e4bc:	51 05       	cpc	r21, r1
    e4be:	70 f0       	brcs	.+28     	; 0xe4dc <__mulsf3_pse+0x9c>
    e4c0:	5c cf       	rjmp	.-328    	; 0xe37a <__fp_inf>
    e4c2:	a6 cf       	rjmp	.-180    	; 0xe410 <__fp_szero>
    e4c4:	5f 3f       	cpi	r21, 0xFF	; 255
    e4c6:	ec f3       	brlt	.-6      	; 0xe4c2 <__mulsf3_pse+0x82>
    e4c8:	98 3e       	cpi	r25, 0xE8	; 232
    e4ca:	dc f3       	brlt	.-10     	; 0xe4c2 <__mulsf3_pse+0x82>
    e4cc:	86 95       	lsr	r24
    e4ce:	77 95       	ror	r23
    e4d0:	67 95       	ror	r22
    e4d2:	b7 95       	ror	r27
    e4d4:	f7 95       	ror	r31
    e4d6:	e7 95       	ror	r30
    e4d8:	9f 5f       	subi	r25, 0xFF	; 255
    e4da:	c1 f7       	brne	.-16     	; 0xe4cc <__mulsf3_pse+0x8c>
    e4dc:	fe 2b       	or	r31, r30
    e4de:	88 0f       	add	r24, r24
    e4e0:	91 1d       	adc	r25, r1
    e4e2:	96 95       	lsr	r25
    e4e4:	87 95       	ror	r24
    e4e6:	97 f9       	bld	r25, 7
    e4e8:	08 95       	ret

0000e4ea <memcpy_P>:
    e4ea:	fb 01       	movw	r30, r22
    e4ec:	dc 01       	movw	r26, r24
    e4ee:	02 c0       	rjmp	.+4      	; 0xe4f4 <memcpy_P+0xa>
    e4f0:	05 90       	lpm	r0, Z+
    e4f2:	0d 92       	st	X+, r0
    e4f4:	41 50       	subi	r20, 0x01	; 1
    e4f6:	50 40       	sbci	r21, 0x00	; 0
    e4f8:	d8 f7       	brcc	.-10     	; 0xe4f0 <memcpy_P+0x6>
    e4fa:	08 95       	ret

0000e4fc <_exit>:
    e4fc:	f8 94       	cli

0000e4fe <__stop_program>:
    e4fe:	ff cf       	rjmp	.-2      	; 0xe4fe <__stop_program>
