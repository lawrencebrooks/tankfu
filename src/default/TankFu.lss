
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000b8cc  0000b9cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b8cc  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e8b  00800144  00800144  0000ba24  2**5
                  ALLOC
  3 .stab         00000648  00000000  00000000  0000ba10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b4  00000000  00000000  0000c058  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c30c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000560  00000000  00000000  0000c320  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007db1  00000000  00000000  0000c880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000149b  00000000  00000000  00014631  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b3c  00000000  00000000  00015acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001204  00000000  00000000  00017608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018e7  00000000  00000000  0001880c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000070b8  00000000  00000000  0001a0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000608  00000000  00000000  000211b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 33 	jmp	0x677c	; 0x677c <__ctors_end>
       4:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
       8:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
       c:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      10:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      14:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      18:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      1c:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      20:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      24:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      28:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      2c:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      30:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      34:	0c 94 ff 35 	jmp	0x6bfe	; 0x6bfe <__vector_13>
      38:	0c 94 3f 36 	jmp	0x6c7e	; 0x6c7e <__vector_14>
      3c:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      40:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      44:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      48:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      4c:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      50:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      54:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      58:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      5c:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      60:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      64:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      68:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      6c:	0c 94 29 34 	jmp	0x6852	; 0x6852 <__bad_interrupt>
      70:	2a 52       	subi	r18, 0x2A	; 42
      72:	2f 52       	subi	r18, 0x2F	; 47
      74:	32 52       	subi	r19, 0x22	; 34
      76:	35 52       	subi	r19, 0x25	; 37
      78:	38 52       	subi	r19, 0x28	; 40
      7a:	3b 52       	subi	r19, 0x2B	; 43
      7c:	3e 52       	subi	r19, 0x2E	; 46
      7e:	41 52       	subi	r20, 0x21	; 33
      80:	44 52       	subi	r20, 0x24	; 36

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	48 39 4b 39 a8 39 ac 39 b4 39 54 39 59 39 5e 39     H9K9.9.9.9T9Y9^9
      e0:	bb 39 61 39 64 39 67 39 a5 39                       .9a9d9g9.9

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <strLevels>:
      f6:	20 20 20 42 6f 6f 74 20 43 61 6d 70 20 20 20 00        Boot Camp   .
     106:	20 20 20 56 65 6c 6f 63 69 74 79 20 20 20 20 00        Velocity    .
     116:	20 20 20 20 44 69 67 67 65 72 20 20 20 20 20 00         Digger     .
     126:	41 63 74 20 31 20 54 68 65 79 20 4d 65 65 74 00     Act 1 They Meet.
     136:	20 20 20 52 69 63 68 6f 63 68 65 74 20 20 20 00        Richochet   .
     146:	20 54 68 65 20 48 6f 6e 65 79 20 50 6f 74 20 00      The Honey Pot .
     156:	20 20 46 6f 63 61 6c 20 50 6f 69 6e 74 20 20 00       Focal Point  .
     166:	49 74 27 73 20 4e 6f 74 20 46 61 69 72 21 20 00     It's Not Fair! .
     176:	20 20 4d 75 63 68 20 42 65 74 74 65 72 20 20 00       Much Better  .
     186:	20 20 20 46 61 63 65 20 4f 66 66 20 20 20 20 00        Face Off    .

00000196 <strPaused>:
     196:	50 61 75 73 65 64 00                                Paused.

0000019d <strExit>:
     19d:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

000001a6 <strTotal>:
     1a6:	54 6f 74 61 6c 3a 00                                Total:.

000001ad <strScore>:
     1ad:	53 63 6f 72 65 3a 00                                Score:.

000001b4 <strBanterClear>:
     1b4:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

000001c3 <banter_map>:
     1c3:	59 6f 75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c     You suck bro  .L
     1d3:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     1e3:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     1f3:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     203:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     213:	2a 20 20 20 20 20 20 20 20 00 41 20 74 75 72 6b     *        .A turk
     223:	65 79 20 73 68 6f 6f 74 00 54 68 61 74 27 73 20     ey shoot.That's 
     233:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     243:	70 3f 20 20 20 20 00 52 54 46 4d 21 20 20 20 20     p?    .RTFM!    
     253:	20 20 20 20 20 00                                        .

00000259 <strFinalScore>:
     259:	46 69 6e 61 6c 20 53 63 6f 72 65 00                 Final Score.

00000265 <strBy>:
     265:	42 79 00                                            By.

00000268 <strOwns>:
     268:	50 77 6e 73 00                                      Pwns.

0000026d <strChangeHandle>:
     26d:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

0000027c <strReset>:
     27c:	52 65 73 65 74 20 44 65 66 61 75 6c 74 73 20 2d     Reset Defaults -
     28c:	20 53 4c 20 28 35 73 29 00                           SL (5s).

00000295 <strCancelHandle>:
     295:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

000002a0 <strConfirmHandle>:
     2a0:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

000002ac <strSelectHandle>:
     2ac:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

000002b7 <strPlayer2>:
     2b7:	50 32 00                                            P2.

000002ba <strPlayer1>:
     2ba:	50 31 00                                            P1.

000002bd <strVertSep>:
     2bd:	7c 00                                               |.

000002bf <strUnderline>:
     2bf:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

000002cb <strHandlesTitle>:
     2cb:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

000002d7 <strHighscores>:
     2d7:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

000002e1 <str2Player>:
     2e1:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

000002f2 <str1Player>:
     2f2:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

00000300 <strCopyright>:
     300:	32 30 31 35 20 2d 20 4c 61 77 72 65 6e 63 65 20     2015 - Lawrence 
     310:	42 72 6f 6f 6b 73 00                                Brooks.

00000317 <my_patches>:
     317:	02 6a 30 00 00 4f 07 50 07 02 85 29 00 00 e3 06     .j0..O.P...)....
     327:	e4 06 02 3e 27 00 00 45 02 46 02 02 8d 25 00 00     ...>'..E.F...%..
     337:	af 01 b0 01 02 8b 25 00 00 00 00 01 00 02 89 25     ......%........%
     347:	00 00 00 00 01 00 02 69 23 00 00 1e 02 1f 02 02     .......i#.......
     357:	f7 21 00 00 70 01 71 01 02 3e 27 00 00 45 02 46     .!..p.q..>'..E.F
     367:	02 02 f3 21 00 00 00 00 01 00 02 85 29 00 00 e3     ...!........)...
     377:	06 e4 06 02 ef 21 00 00 00 00 01 00 02 ed 21 00     .....!........!.
     387:	00 00 00 00 00                                      .....

0000038c <level_data>:
     38c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     39c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     3c4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3e4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     400:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     420:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
     430:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
     440:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     450:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     46c:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     47c:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     498:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4a8:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     4b8:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     4d4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4e4:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     4f4:	02 00 00 58 00 00 00 00 00 00 00 00 00 00 01 01     ...X............
	...
     50c:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
     51c:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00     ................
     52c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
     53c:	00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     54c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     55c:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     56c:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     588:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     598:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     5a8:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     5b8:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     5d0:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
     5e0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     600:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     61c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     63c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     658:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     668:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     678:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     688:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     698:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     6b4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     6d0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     6f0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     70c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     72c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     748:	00 00 00 02 02 01 00 00 00 00 01 00 00 00 00 00     ................
	...
     760:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     770:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     780:	00 01 00 00 00 00 01 02 02 01 00 07 00 00 01 00     ................
     790:	00 00 02 00 00 00 00 00 00 00 00 02 00 00 00 01     ................
     7a0:	00 00 07 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     7b0:	02 00 00 00 00 00 00 00 00 02 00 00 00 01 00 00     ................
     7c0:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 02 00     ................
     7d0:	00 00 00 00 00 00 00 02 00 00 00 01 00 00 00 00     ................
     7e0:	01 02 02 01 00 00 00 00 01 00 00 00 02 02 02 02     ................
     7f0:	02 02 02 02 02 02 00 00 00 01 00 00 00 00 01 02     ................
     800:	02 01 00 00 00 00 01 00 00 00 02 00 00 00 00 00     ................
     810:	00 00 00 02 00 00 00 01 00 00 00 00 01 02 02 01     ................
     820:	00 00 00 00 01 00 00 00 02 00 00 00 00 00 00 00     ................
     830:	00 02 00 00 00 01 00 00 00 00 01 02 02 01 00 58     ...............X
     840:	00 00 01 00 00 00 02 00 00 00 00 00 00 00 00 02     ................
     850:	00 00 00 01 00 63 00 00 01 02 02 01 00 00 00 00     .....c..........
     860:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     870:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     88c:	00 00 00 01 00 00 00 00 01 02 02 01 01 01 01 01     ................
     89c:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8ac:	00 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
     8d0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     8ec:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     90c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     928:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     948:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     958:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     968:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     978:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 01     ................
     988:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     998:	01 01 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     9a8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9b8:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     9c8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9d8:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     9e8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9f8:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     a08:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a18:	01 01 01 02 02 01 00 00 00 00 01 01 01 01 01 01     ................
     a28:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     a38:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     a48:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     a58:	02 01 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     a68:	01 01 01 01 01 01 01 01 00 00 00 00 01 02 02 01     ................
     a78:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a88:	01 01 01 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     a98:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     aa8:	01 01 00 00 00 00 00 00 01 02 02 01 00 58 00 00     .............X..
     ab8:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ac8:	00 09 00 00 00 00 01 02 02 01 00 00 00 00 00 00     ................
     ad8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     ae8:	00 63 00 00 01 02 02 01 00 00 00 00 01 01 01 01     .c..............
     af8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     b08:	00 00 01 02 02 01 00 00 00 00 01 01 01 01 01 01     ................
     b18:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     b28:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     b38:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     b48:	02 01 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     b58:	01 01 01 01 01 01 01 01 00 00 00 00 01 02 02 01     ................
     b68:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b78:	01 01 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     b88:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b98:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     ba8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     bb8:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     bc8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     bd8:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     be8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     bf8:	01 01 01 02 02 01 01 01 01 01 01 01 01 01 01 01     ................
     c08:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c18:	01 02 02 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c28:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 02     ................
     c38:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c48:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c58:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c68:	02 02 02 02 02 02 02 02 02 02 02 02 02 00 00 00     ................
	...
     c90:	00 02 02 00 08 00 00 01 00 01 00 01 00 01 00 01     ................
     ca0:	00 00 01 00 01 00 01 00 01 00 01 00 00 08 00 02     ................
     cb0:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ccc:	00 02 02 02 02 02 02 00 01 00 02 00 00 00 00 00     ................
     cdc:	02 02 00 00 00 00 00 02 00 01 00 02 02 02 02 02     ................
     cec:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 02 02     ................
     cfc:	00 00 00 00 00 02 00 00 00 00 00 00 00 02 02 00     ................
     d0c:	00 00 00 00 01 00 02 00 00 00 00 00 02 02 00 00     ................
     d1c:	00 00 00 02 00 01 00 00 00 00 00 02 02 00 01 00     ................
     d2c:	01 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     d3c:	00 02 00 00 00 01 00 01 00 02 02 00 00 00 00 00     ................
     d4c:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     d5c:	00 01 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
     d80:	00 02 02 02 02 02 02 00 01 00 01 00 00 00 00 00     ................
     d90:	00 00 00 00 00 00 00 01 00 01 00 02 02 02 02 02     ................
     da0:	00 00 00 00 02 00 00 00 00 00 00 00 02 00 00 00     ................
     db0:	00 02 00 00 00 00 00 00 00 02 00 00 00 00 00 00     ................
     dc0:	00 00 02 00 01 00 02 00 00 00 02 00 00 00 00 02     ................
     dd0:	00 00 00 02 00 01 00 02 00 00 00 00 00 00 00 00     ................
     de0:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     df0:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
     e00:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     e10:	00 01 00 02 02 02 02 02 02 00 00 00 00 00 00 00     ................
     e20:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
     e30:	00 00 00 00 00 02 02 00 01 00 01 00 01 00 02 00     ................
	...
     e48:	00 00 00 02 00 01 00 01 00 01 00 02 02 00 00 00     ................
     e58:	00 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     e68:	00 02 00 00 00 00 00 00 00 02 02 00 01 00 02 00     ................
     e78:	01 00 00 00 00 00 00 00 02 02 00 00 00 00 00 00     ................
     e88:	00 01 00 02 00 01 00 02 02 00 00 00 02 00 00 00     ................
     e98:	58 00 00 00 00 00 02 02 00 00 00 00 63 00 00 00     X...........c...
     ea8:	00 02 00 00 00 02 02 00 01 00 02 00 01 00 00 00     ................
     eb8:	00 00 00 00 02 02 00 00 00 00 00 00 00 01 00 02     ................
     ec8:	00 01 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     ee4:	00 02 00 00 00 02 02 00 08 00 02 00 00 00 01 00     ................
     ef4:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 00 02     ................
     f04:	00 08 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     f20:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
     f30:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f40:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f50:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f60:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
     f70:	00 00 04 02 02 02 02 02 02 03 00 00 04 02 02 02     ................
     f80:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f90:	00 04 02 02 02 02 03 00 00 00 00 04 02 02 02 03     ................
	...
     fb0:	04 02 02 03 00 00 00 00 00 00 04 02 02 00 00 00     ................
	...
     fcc:	00 00 00 04 03 00 00 00 00 00 00 00 00 02 02 00     ................
     fdc:	00 00 01 01 01 00 00 00 00 00 00 00 07 00 00 00     ................
	...
     ff4:	00 00 00 02 02 00 00 00 01 01 01 00 00 00 00 00     ................
	...
    1014:	00 02 02 00 00 00 01 01 01 00 00 00 00 00 00 00     ................
	...
    1030:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    1040:	00 00 06 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1050:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 06     ................
    1060:	02 02 05 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1070:	02 00 00 00 00 00 00 00 00 00 00 00 06 02 02 02     ................
    1080:	02 05 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    1098:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    10a8:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 06 02     ......X.........
    10b8:	02 02 02 02 02 02 02 05 00 00 00 00 00 00 63 00     ..............c.
    10c8:	00 02 02 00 00 00 00 00 00 00 00 00 04 02 02 02     ................
    10d8:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 02     ................
    10e8:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    10f8:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    1110:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    1120:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    1130:	00 04 02 02 03 00 00 00 00 00 00 00 00 00 00 00     ................
    1140:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1150:	04 03 00 00 00 00 00 00 00 01 01 01 00 00 00 02     ................
    1160:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1170:	00 00 00 00 00 00 00 01 01 01 00 00 00 02 02 00     ................
	...
    118c:	00 08 00 00 00 00 00 00 00 01 01 01 00 00 00 02     ................
    119c:	02 00 00 00 00 00 00 00 00 06 05 00 00 00 00 00     ................
	...
    11b8:	00 02 02 05 00 00 00 00 00 00 06 02 02 05 00 00     ................
	...
    11d4:	00 00 06 02 02 02 05 00 00 00 00 06 02 02 02 02     ................
    11e4:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06     ................
    11f4:	02 02 02 02 02 05 00 00 06 02 02 02 02 02 02 05     ................
	...
    1210:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1220:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1230:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1240:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1250:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    1260:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1270:	00 00 00 00 00 01 01 00 00 00 04 02 02 02 02 03     ................
    1280:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    1290:	00 00 00 01 01 00 00 00 00 04 02 02 03 00 00 00     ................
    12a0:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    12b0:	00 01 01 00 00 00 00 00 04 03 00 00 00 00 00 01     ................
    12c0:	01 00 00 00 00 00 00 02 02 00 00 00 00 00 00 01     ................
    12d0:	01 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00     ................
    12e0:	00 00 00 00 00 02 02 00 00 00 00 00 00 01 01 00     ................
	...
    12f8:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    1308:	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1318:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    1328:	00 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    1338:	00 00 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
    1348:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 00     ................
    1358:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    1368:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    1378:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    1388:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 63 00     ..............c.
    1398:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    13a8:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    13b8:	02 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00     ................
    13c8:	00 00 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    13e0:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    13f0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1400:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    1410:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1420:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1430:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    1440:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1450:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    1460:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    1470:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    1480:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    1490:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    14a0:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    14b0:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    14c0:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    14dc:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1500:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1510:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1520:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1530:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1540:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    1550:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1568:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    1578:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    1588:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1598:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    15a8:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    15b8:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    15c8:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    15d8:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    15e8:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    15f8:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1608:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    162c:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1648:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    1658:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    1668:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    1678:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    1688:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    1698:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    16a8:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    16b8:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    16d0:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    16e0:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    16fc:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    171c:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    172c:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    173c:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    174c:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    175c:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    176c:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    177c:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    178c:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    179c:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    17ac:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    17bc:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    17cc:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    17dc:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    17ec:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    17fc:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    180c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    181c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    182c:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1848:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1864:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1884:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18a0:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    18b0:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    18c0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18dc:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18f4:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1904:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1914:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
    1930:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    194c:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
    195c:	58 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     X...............
    196c:	01 01 01 00 63 00 00 01 01 02 02 00 00 00 00 00     ....c...........
	...
    1988:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
	...
    19a8:	01 01 01 00 00 00 00 01 01 02 02 00 00 00 00 00     ................
	...
    19c4:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    19e4:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1a00:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    1a28:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a44:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1a54:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1a64:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a80:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1aa0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1abc:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1adc:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1aec:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1afc:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b0c:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1b34:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b54:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b70:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b90:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1ba0:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1bb0:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bcc:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1be8:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1c00:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    1c10:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c20:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    1c30:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c40:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
	...
    1c5c:	00 00 63 00 00 00 00 02 02 01 01 00 00 00 00 01     ..c.............
    1c6c:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c7c:	00 00 00 00 00 02 02 01 01 00 00 00 00 01 01 01     ................
	...
    1c9c:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1cbc:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1cd8:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1cf8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d14:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d34:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1d44:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1d54:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d70:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d8c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dac:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dc8:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dd8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1de8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1df8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e08:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e24:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e40:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e60:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e7c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e9c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1eb8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ed8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ef4:	00 00 00 02 02 00 07 00 00 09 00 00 00 00 00 00     ................
	...
    1f10:	07 00 00 09 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1f30:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f50:	00 02 02 00 00 58 00 00 00 00 00 00 00 00 00 00     .....X..........
	...
    1f68:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    1f8c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fa8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fc8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fe4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2004:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2020:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2040:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    205c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    207c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2098:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20b8:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20c8:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................

000020d8 <map_rocket_right_1>:
    20d8:	01 01 26                                            ..&

000020db <map_rocket_right_0>:
    20db:	01 01 25                                            ..%

000020de <map_rocket_up_1>:
    20de:	01 01 24                                            ..$

000020e1 <map_rocket_up_0>:
    20e1:	01 01 23                                            ..#

000020e4 <map_ball>:
    20e4:	01 01 22                                            .."

000020e7 <map_explosion_2>:
    20e7:	02 02 0c 0d 0d 0c                                   ......

000020ed <map_explosion_1>:
    20ed:	02 02 0a 0b 18 19                                   ......

000020f3 <map_explosion_0>:
    20f3:	02 02 08 09 16 17                                   ......

000020f9 <map_tank2_right_1>:
    20f9:	02 02 20 21 2e 2f                                   .. !./

000020ff <map_tank2_right_0>:
    20ff:	02 02 1e 1f 2c 2d                                   ....,-

00002105 <map_tank2_up_1>:
    2105:	02 02 1c 1d 2a 2b                                   ....*+

0000210b <map_tank2_up_0>:
    210b:	02 02 1a 1b 28 29                                   ....()

00002111 <map_tank1_right_1>:
    2111:	02 02 06 07 14 15                                   ......

00002117 <map_tank1_right_0>:
    2117:	02 02 04 05 12 13                                   ......

0000211d <map_tank1_up_1>:
    211d:	02 02 02 03 10 11                                   ......

00002123 <map_tank1_up_0>:
    2123:	02 02 00 01 0e 0f                                   ......

00002129 <map_none>:
    2129:	01 01 27                                            ..'

0000212c <map_tank_blank>:
    212c:	02 02 27 27 27 27                                   ..''''

00002132 <map_metal_bl>:
    2132:	01 01 0c                                            ...

00002135 <map_metal_tr>:
    2135:	01 01 0b                                            ...

00002138 <map_metal_br>:
    2138:	01 01 0a                                            ...

0000213b <map_metal_tl>:
    213b:	01 01 09                                            ...

0000213e <map_tile_exp_2>:
    213e:	01 01 08                                            ...

00002141 <map_tile_exp_1>:
    2141:	01 01 07                                            ...

00002144 <map_tile_exp_0>:
    2144:	01 01 06                                            ...

00002147 <map_rocket_itm>:
    2147:	01 01 04                                            ...

0000214a <map_explode_itm>:
    214a:	01 01 03                                            ...

0000214d <map_speed_itm>:
    214d:	01 01 02                                            ...

00002150 <map_metal>:
    2150:	01 01 05                                            ...

00002153 <map_brick>:
    2153:	01 01 01                                            ...

00002156 <map_tile_none>:
    2156:	01 01 00                                            ...

00002159 <map_pause>:
    2159:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2169:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2179:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    2189:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00002197 <map_splash>:
    2197:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    21a7:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    21b7:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    21c7:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    21d7:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    21e7:	2a 00 00 2c 2d 2e                                   *..,-.

000021ed <ad_silence>:
	...

000021ef <ad_tracks>:
	...

000021f1 <ad_tank_explode>:
	...

000021f3 <ad_splash>:
	...

000021f5 <ad_rocket>:
	...

000021f7 <ad_navigate>:
    21f7:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
    2207:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
    2217:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
    2227:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
    2237:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
    2247:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
    2257:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
    2267:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
    2277:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
    2287:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
    2297:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
    22a7:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
    22b7:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
    22c7:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
    22d7:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
    22e7:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
    22f7:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
    2307:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
    2317:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
    2327:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
    2337:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
    2347:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
    2357:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00002369 <ad_metal>:
    2369:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
    2379:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
    2389:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
    2399:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
    23a9:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
    23b9:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
    23c9:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
    23d9:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
    23e9:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
    23f9:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
    2409:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
    2419:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
    2429:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
    2439:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
    2449:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
    2459:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
    2469:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
    2479:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
    2489:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
    2499:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
    24a9:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
    24b9:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
    24c9:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
    24d9:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
    24e9:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
    24f9:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    2509:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    2519:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    2529:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    2539:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    2549:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    2559:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    2569:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    2579:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

00002589 <ad_level_start>:
	...

0000258b <ad_level_clear>:
	...

0000258d <ad_item>:
    258d:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    259d:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    25ad:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    25bd:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    25cd:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    25dd:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    25ed:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    25fd:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    260d:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    261d:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    262d:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    263d:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    264d:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    265d:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    266d:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    267d:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    268d:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    269d:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    26ad:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    26bd:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    26cd:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    26dd:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    26ed:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    26fd:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    270d:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    271d:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    272d:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

0000273e <ad_cannonball>:
    273e:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    274e:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    275e:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    276e:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    277e:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    278e:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    279e:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    27ae:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    27be:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    27ce:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    27de:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    27ee:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    27fe:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    280e:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    281e:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    282e:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    283e:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    284e:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    285e:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    286e:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    287e:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    288e:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    289e:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    28ae:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    28be:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    28ce:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    28de:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    28ee:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    28fe:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    290e:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    291e:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    292e:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    293e:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    294e:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    295e:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    296e:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    297e:	ff ff ff ff ff 00 00                                .......

00002985 <ad_brick_explode>:
    2985:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    2995:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    29a5:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    29b5:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    29c5:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    29d5:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    29e5:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    29f5:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    2a05:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    2a15:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    2a25:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    2a35:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    2a45:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    2a55:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    2a65:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    2a75:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    2a85:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    2a95:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    2aa5:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    2ab5:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    2ac5:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    2ad5:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    2ae5:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    2af5:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    2b05:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    2b15:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    2b25:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    2b35:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    2b45:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    2b55:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    2b65:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    2b75:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    2b85:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    2b95:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    2ba5:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    2bb5:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    2bc5:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    2bd5:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    2be5:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    2bf5:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    2c05:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    2c15:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    2c25:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    2c35:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    2c45:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    2c55:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    2c65:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    2c75:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    2c85:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    2c95:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    2ca5:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    2cb5:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    2cc5:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    2cd5:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    2ce5:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    2cf5:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    2d05:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    2d15:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    2d25:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    2d35:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    2d45:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    2d55:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    2d65:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    2d75:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    2d85:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    2d95:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    2da5:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    2db5:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    2dc5:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    2dd5:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    2de5:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    2df5:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    2e05:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    2e15:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    2e25:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    2e35:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    2e45:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    2e55:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    2e65:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    2e75:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    2e85:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    2e95:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    2ea5:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    2eb5:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    2ec5:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    2ed5:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    2ee5:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    2ef5:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    2f05:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    2f15:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    2f25:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    2f35:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    2f45:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    2f55:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    2f65:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    2f75:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    2f85:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    2f95:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    2fa5:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    2fb5:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    2fc5:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    2fd5:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    2fe5:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    2ff5:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    3005:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    3015:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    3025:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    3035:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    3045:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    3055:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    3065:	04 04 02 01 00                                      .....

0000306a <ad_banter>:
    306a:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    307a:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    308a:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    309a:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    30aa:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    30ba:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    30ca:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    30da:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    30ea:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    30fa:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    310a:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    311a:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    312a:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    313a:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    314a:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    315a:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    316a:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    317a:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    318a:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    319a:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    31aa:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    31ba:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    31ca:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    31da:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    31ea:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    31fa:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    320a:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    321a:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    322a:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    323a:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    324a:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    325a:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    326a:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    327a:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    328a:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    329a:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    32aa:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    32ba:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    32ca:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    32da:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    32ea:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    32fa:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    330a:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    331a:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    332a:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    333a:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    334a:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    335a:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    336a:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    337a:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    338a:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    339a:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    33aa:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    33ba:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    33ca:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    33da:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    33ea:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    33fa:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    340a:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    341a:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    342a:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    343a:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    344a:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    345a:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    346a:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    347a:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    348a:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    349a:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    34aa:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    34ba:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    34ca:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    34da:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    34ea:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    34fa:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    350a:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    351a:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    352a:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    353a:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    354a:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    355a:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    356a:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    357a:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    358a:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    359a:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    35aa:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    35ba:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    35ca:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    35da:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    35ea:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    35fa:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    360a:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    361a:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    362a:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    363a:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    364a:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    365a:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    366a:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    367a:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    368a:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    369a:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    36aa:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    36ba:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    36ca:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    36da:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    36ea:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    36fa:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    370a:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    371a:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    372a:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    373a:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    374a:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    375a:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    376a:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    377a:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    378a:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    379a:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    37aa:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

000037bb <sprites_data>:
    37bb:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    37cb:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    37db:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    37eb:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    37fb:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    380b:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    381b:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    382b:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    383b:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    384b:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    385b:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    386b:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    387b:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    388b:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    389b:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    38ab:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    38bb:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    38cb:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    38db:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    38eb:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    38fb:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    390b:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    391b:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    392b:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    393b:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    394b:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    395b:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    396b:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    397b:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    398b:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    399b:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    39ab:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    39bb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39cb:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    39db:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    39eb:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    39fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a0b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3a1b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3a2b:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3a3b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3a4b:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3a5b:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3a6b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3a7b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3a8b:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3a9b:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3aab:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3abb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3acb:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3adb:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3aeb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3afb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b0b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3b1b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3b2b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b3b:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3b4b:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3b5b:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3b6b:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3b7b:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3b8b:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3b9b:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3bab:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3bbb:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3bcb:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3bdb:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3beb:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3bfb:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3c0b:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3c1b:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3c2b:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3c3b:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3c4b:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3c5b:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3c6b:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3c7b:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3c8b:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3c9b:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3cab:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3cbb:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3ccb:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3cdb:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    3ceb:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3cfb:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3d0b:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3d1b:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    3d2b:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3d3b:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3d4b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d5b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d6b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d7b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3d8b:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3d9b:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3dab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3dbb:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3dcb:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3ddb:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3deb:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3dfb:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3e0b:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3e1b:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3e2b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3e3b:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3e4b:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3e5b:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3e6b:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3e7b:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3e8b:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3e9b:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3eab:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3ebb:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3ecb:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3edb:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    3eeb:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3efb:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3f0b:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    3f1b:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3f2b:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3f3b:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3f4b:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3f5b:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3f6b:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3f7b:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3f8b:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3f9b:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3fab:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3fbb:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3fcb:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    3fdb:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3feb:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3ffb:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    400b:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    401b:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    402b:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    403b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    404b:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    405b:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    406b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    407b:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    408b:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    409b:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    40ab:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    40bb:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    40cb:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    40db:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    40eb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40fb:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    410b:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    411b:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    412b:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    413b:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    414b:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    415b:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    416b:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    417b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    418b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    419b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41ab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41bb:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    41cb:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    41db:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    41eb:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    41fb:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    420b:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    421b:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    422b:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    423b:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    424b:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    425b:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    426b:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    427b:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    428b:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    429b:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    42ab:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    42bb:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    42cb:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    42db:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    42eb:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    42fb:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    430b:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    431b:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    432b:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    433b:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    434b:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    435b:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    436b:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    437b:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    438b:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    439b:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    43ab:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

000043bb <tiles_data>:
	...
    43fb:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    440b:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    441b:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    442b:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    443b:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    444b:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    445b:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    446b:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    447b:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    448b:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    449b:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    44ab:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    44bb:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    44cb:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    44db:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    44eb:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    44fb:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    450b:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    451b:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    452b:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4543:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4553:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4563:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    457b:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    458b:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    459b:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    45ab:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    45c3:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    45e3:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    45fb:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    460b:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    461b:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    462b:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    463b:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    464b:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    465b:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    466b:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    467b:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    468b:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    469b:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    46ab:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    46bb:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    46cb:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    46db:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    46eb:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    46fb:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    470b:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    471b:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    472b:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    473b:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    474b:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    475b:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    476b:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    477b:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    478b:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    479b:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    47ab:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    47bb:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    47cb:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    47db:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    47eb:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    47fb:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    480b:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    481b:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    482b:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    483b:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    484b:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    485b:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    486b:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    487b:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    488b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    489b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    48ab:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    48db:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    48eb:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    491b:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    492b:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    493b:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    494b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    495b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    496b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    497b:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    498b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    499b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49ab:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    49bb:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    49cb:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49db:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49eb:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49fb:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a0b:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a1b:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a2b:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a3b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a4b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a5b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a6b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a7b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a8b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a9b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4aab:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4abb:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4acb:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4adb:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4aeb:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4afb:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4b0b:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    4b3b:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4b4b:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b5b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b6b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b7b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    4b8b:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b9b:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4bab:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4bbb:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4bcb:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4bdb:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4beb:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4bfb:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c0b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c1b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c2b:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    4c63:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4c73:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    4c83:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c93:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ca3:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4cb3:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    4cc3:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4cd3:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4ce3:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4cf3:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    4d03:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d13:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d23:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d33:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4d43:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d53:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d63:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d73:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4d83:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d93:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4da3:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4db3:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4dc3:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4dd3:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    4dfb:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e0b:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e1b:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e2b:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    4e3b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e4b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e5b:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e6b:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    4e7b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4e8b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4e9b:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4eab:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4ebb:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4ecb:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4edb:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4eeb:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    4f03:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4f13:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4f23:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4f33:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4f43:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f53:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f63:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f73:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    4fc3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4fd3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4feb:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5003:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5013:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5043:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    5053:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5063:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    507b:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    508b:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    509b:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    50ab:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    50c3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    50d3:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    50e3:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    50fb:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    510b:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    511b:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    512b:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    5143:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5153:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5187:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5197:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    51a7:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    51c3:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    51d3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    51e3:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    5203:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    5213:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    5223:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5243:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5253:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5263:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    52a3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    52b3:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    52d3:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5323:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5347:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5357:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    5367:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5383:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5393:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    53a3:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    53c3:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    53d3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    53e3:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5403:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5413:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5423:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5443:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5453:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5463:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5487:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    5497:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    54a7:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    54c3:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    54d3:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    54e3:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5503:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5513:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5523:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5543:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    5553:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5563:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    5583:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5593:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    55a3:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    55c3:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    55d3:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    55e3:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    560b:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5623:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    564b:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5663:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5673:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    5683:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5693:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    56a3:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    56cb:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    56e3:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    56fb:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    570b:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    571b:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    572b:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5743:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5753:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    576b:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5783:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5793:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    57a3:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    57c3:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    57d3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    57e3:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5803:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5813:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5823:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5843:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5853:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5863:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5883:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    5893:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    58a3:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    58c3:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    58d3:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    58e3:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5903:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5913:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5923:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5943:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5953:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    5963:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    5983:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5993:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    59a3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    59c3:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    59d3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    59e3:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5a07:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5a17:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    5a27:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    5a43:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5a53:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    5a63:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5a83:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5a93:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5aa3:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5ac3:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    5ad3:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5ae3:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5b03:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5b13:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5b23:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5b43:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b53:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b63:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5b83:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b93:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5ba3:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5bc3:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5bd3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5be3:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    5c03:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c13:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5c23:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5c43:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5c53:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5c63:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5c83:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5c93:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ca3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5cc3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5cd3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5ce3:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    5d03:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d13:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d23:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5d43:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    5d53:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5d63:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5d83:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d93:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    5da3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5dc3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5dd3:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5de3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5e03:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5e13:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5e23:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5e43:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5e53:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e63:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    5e83:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5e93:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ea3:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5ec3:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ed3:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ee3:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5f07:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    5f17:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    5f6b:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    5f83:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5f93:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5fa3:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5fcb:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5fdb:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5feb:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6003:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6013:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6023:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    604b:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    605b:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    606b:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6087:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    6097:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60a7:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    60cb:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60db:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    60eb:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6107:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    6117:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6127:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    614b:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    615b:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    616b:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6183:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6193:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    61a3:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    61c3:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    61d3:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    61e3:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6207:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    6217:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6227:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    6237:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    6247:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    6257:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    6267:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    6283:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6293:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    62a3:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    62cb:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    62db:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    62eb:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    630b:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    631b:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    632b:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    634b:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    635b:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    636b:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    638b:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    639b:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    63ab:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    63cb:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    63db:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    63eb:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    640b:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    641b:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    642b:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    644b:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    645b:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    646b:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6483:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    6493:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    64a3:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    64cb:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64db:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64eb:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    650b:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    651b:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    652b:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    654b:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    655b:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    656b:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    658b:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    659b:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    65ab:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    65cb:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65db:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    65eb:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    660b:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    661b:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    662b:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6643:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6653:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    6663:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    667b:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    668b:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    669b:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    66ab:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    66c3:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    66d3:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    66e3:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    66ff:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    670f:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    671f:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    672f:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    673f:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    674f:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    675f:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

0000677c <__ctors_end>:
    677c:	11 24       	eor	r1, r1
    677e:	1f be       	out	0x3f, r1	; 63
    6780:	cf ef       	ldi	r28, 0xFF	; 255
    6782:	d0 e1       	ldi	r29, 0x10	; 16
    6784:	de bf       	out	0x3e, r29	; 62
    6786:	cd bf       	out	0x3d, r28	; 61

00006788 <__do_copy_data>:
    6788:	11 e0       	ldi	r17, 0x01	; 1
    678a:	a0 e0       	ldi	r26, 0x00	; 0
    678c:	b1 e0       	ldi	r27, 0x01	; 1
    678e:	ec ec       	ldi	r30, 0xCC	; 204
    6790:	f8 eb       	ldi	r31, 0xB8	; 184
    6792:	02 c0       	rjmp	.+4      	; 0x6798 <__do_copy_data+0x10>
    6794:	05 90       	lpm	r0, Z+
    6796:	0d 92       	st	X+, r0
    6798:	a4 34       	cpi	r26, 0x44	; 68
    679a:	b1 07       	cpc	r27, r17
    679c:	d9 f7       	brne	.-10     	; 0x6794 <__do_copy_data+0xc>

0000679e <__do_clear_bss>:
    679e:	1f e0       	ldi	r17, 0x0F	; 15
    67a0:	a4 e4       	ldi	r26, 0x44	; 68
    67a2:	b1 e0       	ldi	r27, 0x01	; 1
    67a4:	01 c0       	rjmp	.+2      	; 0x67a8 <.do_clear_bss_start>

000067a6 <.do_clear_bss_loop>:
    67a6:	1d 92       	st	X+, r1

000067a8 <.do_clear_bss_start>:
    67a8:	af 3c       	cpi	r26, 0xCF	; 207
    67aa:	b1 07       	cpc	r27, r17
    67ac:	e1 f7       	brne	.-8      	; 0x67a6 <.do_clear_bss_loop>

000067ae <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    67ae:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    67b0:	88 e1       	ldi	r24, 0x18	; 24
    67b2:	0f b6       	in	r0, 0x3f	; 63
    67b4:	f8 94       	cli
    67b6:	80 93 60 00 	sts	0x0060, r24
    67ba:	10 92 60 00 	sts	0x0060, r1
    67be:	0f be       	out	0x3f, r0	; 63

000067c0 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    67c0:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <isEepromFormatted>
    67c4:	81 11       	cpse	r24, r1
    67c6:	02 c0       	rjmp	.+4      	; 0x67cc <Initialize+0xc>
    67c8:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <FormatEeprom>

	cli();
    67cc:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    67ce:	81 e0       	ldi	r24, 0x01	; 1
    67d0:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    67d4:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    67d8:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    67dc:	10 92 02 0b 	sts	0x0B02, r1
    67e0:	10 92 08 0b 	sts	0x0B08, r1
    67e4:	10 92 0e 0b 	sts	0x0B0E, r1
    67e8:	10 92 14 0b 	sts	0x0B14, r1
    67ec:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    67f0:	10 92 ec 0a 	sts	0x0AEC, r1
	sync_flags=0;
    67f4:	10 92 ee 0a 	sts	0x0AEE, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    67f8:	92 e1       	ldi	r25, 0x12	; 18
    67fa:	90 93 ed 0a 	sts	0x0AED, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    67fe:	90 ee       	ldi	r25, 0xE0	; 224
    6800:	90 93 f6 0a 	sts	0x0AF6, r25
	render_lines_count=FRAME_LINES;
    6804:	90 93 f4 0a 	sts	0x0AF4, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    6808:	94 e1       	ldi	r25, 0x14	; 20
    680a:	90 93 f5 0a 	sts	0x0AF5, r25
	first_render_line=FIRST_RENDER_LINE;
    680e:	90 93 f3 0a 	sts	0x0AF3, r25

	joypad1_status_hi=0;
    6812:	10 92 fa 0a 	sts	0x0AFA, r1
    6816:	10 92 f9 0a 	sts	0x0AF9, r1
	joypad2_status_hi=0;
    681a:	10 92 fe 0a 	sts	0x0AFE, r1
    681e:	10 92 fd 0a 	sts	0x0AFD, r1
	sound_enabled=1;
    6822:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    6826:	0e 94 0b 45 	call	0x8a16	; 0x8a16 <InitializeVideoMode>
    682a:	82 e8       	ldi	r24, 0x82	; 130
    682c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    682e:	fc 01       	movw	r30, r24
    6830:	25 91       	lpm	r18, Z+
    6832:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6834:	f9 01       	movw	r30, r18
    6836:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6838:	30 83       	st	Z, r19
    683a:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    683c:	20 e0       	ldi	r18, 0x00	; 0
    683e:	80 3b       	cpi	r24, 0xB0	; 176
    6840:	92 07       	cpc	r25, r18
    6842:	a9 f7       	brne	.-22     	; 0x682e <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6844:	78 94       	sei
	
	DisplayLogo();
    6846:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <DisplayLogo>
    684a:	0e 94 c5 59 	call	0xb38a	; 0xb38a <main>
    684e:	0c 94 64 5c 	jmp	0xb8c8	; 0xb8c8 <_exit>

00006852 <__bad_interrupt>:
    6852:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006856 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    6856:	0c e0       	ldi	r16, 0x0C	; 12
    6858:	0a 95       	dec	r16
    685a:	f1 f7       	brne	.-4      	; 0x6858 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    685c:	e8 e9       	ldi	r30, 0x98	; 152
		ldi ZH,hi8(ram_tiles_restore);
    685e:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    6860:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6862:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6864:	20 91 b7 0b 	lds	r18, 0x0BB7


		clr r16
    6868:	00 27       	eor	r16, r16

0000686a <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    686a:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    686c:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    686e:	ac 0f       	add	r26, r28
		adc XH,YH
    6870:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    6872:	1c 91       	ld	r17, X
		std Z+2,r17
    6874:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    6876:	02 17       	cp	r16, r18
		brsh noov
    6878:	08 f4       	brcc	.+2      	; 0x687c <noov>
		mov r17,r16
    687a:	10 2f       	mov	r17, r16

0000687c <noov>:
	noov:
		st X,r17
    687c:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    687e:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    6880:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    6882:	07 31       	cpi	r16, 0x17	; 23
		brlo upd_loop ;23
    6884:	90 f3       	brcs	.-28     	; 0x686a <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    6886:	06 e2       	ldi	r16, 0x26	; 38

00006888 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    6888:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    688a:	1a 95       	dec	r17
		brne .-4
    688c:	f1 f7       	brne	.-4      	; 0x688a <wait_loop+0x2>

		dec r16
    688e:	0a 95       	dec	r16
		brne wait_loop
    6890:	d9 f7       	brne	.-10     	; 0x6888 <wait_loop>

		lds r2,overlay_tile_table
    6892:	20 90 e9 0a 	lds	r2, 0x0AE9
		lds r3,overlay_tile_table+1
    6896:	30 90 ea 0a 	lds	r3, 0x0AEA
		lds r16,tile_table_lo 
    689a:	00 91 e5 0a 	lds	r16, 0x0AE5
		lds r17,tile_table_hi
    689e:	10 91 e6 0a 	lds	r17, 0x0AE6
		movw r12,r16
    68a2:	68 01       	movw	r12, r16
		movw r6,r16
    68a4:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    68a6:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    68a8:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    68aa:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    68ac:	4e 01       	movw	r8, r28
		clr r0
    68ae:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    68b0:	30 91 e8 0a 	lds	r19, 0x0AE8
		cpi r19,0
    68b4:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    68b6:	09 f0       	breq	.+2      	; 0x68ba <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    68b8:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    68ba:	09 f0       	breq	.+2      	; 0x68be <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    68bc:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    68be:	09 f0       	breq	.+2      	; 0x68c2 <wait_loop+0x3a>
		mov r24,r19
    68c0:	83 2f       	mov	r24, r19

		breq .+2
    68c2:	09 f0       	breq	.+2      	; 0x68c6 <wait_loop+0x3e>
		movw r12,r2
    68c4:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    68c6:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    68c8:	a0 2e       	mov	r10, r16
		clr r22
    68ca:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    68cc:	78 e0       	ldi	r23, 0x08	; 8

000068ce <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    68ce:	7d d2       	rcall	.+1274   	; 0x6dca <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    68d0:	3c e0       	ldi	r19, 0x0C	; 12
    68d2:	3a 95       	dec	r19
    68d4:	f1 f7       	brne	.-4      	; 0x68d2 <next_tile_line+0x4>
    68d6:	00 00       	nop
    68d8:	00 00       	nop

		;***draw line***
		call render_tile_line
    68da:	0e 94 9e 34 	call	0x693c	; 0x693c <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    68de:	3f e0       	ldi	r19, 0x0F	; 15
    68e0:	3a 95       	dec	r19
    68e2:	f1 f7       	brne	.-4      	; 0x68e0 <next_tile_line+0x12>
    68e4:	00 00       	nop
    68e6:	00 00       	nop

		dec r10
    68e8:	aa 94       	dec	r10
		breq frame_end
    68ea:	a9 f0       	breq	.+42     	; 0x6916 <frame_end>
	
		inc r22
    68ec:	63 95       	inc	r22
		lpm ;3 nop
    68ee:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    68f0:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    68f2:	31 f0       	breq	.+12     	; 0x6900 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    68f4:	33 e0       	ldi	r19, 0x03	; 3
    68f6:	3a 95       	dec	r19
    68f8:	f1 f7       	brne	.-4      	; 0x68f6 <next_tile_line+0x28>
    68fa:	00 00       	nop
    68fc:	00 00       	nop
		
		rjmp next_tile_line	
    68fe:	e7 cf       	rjmp	.-50     	; 0x68ce <next_tile_line>

00006900 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6900:	66 27       	eor	r22, r22

		clr r0
    6902:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6904:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6906:	c3 0f       	add	r28, r19
		adc YH,r0
    6908:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    690a:	8a 95       	dec	r24
		brne .+2
    690c:	09 f4       	brne	.+2      	; 0x6910 <next_tile_row+0x10>
		movw YL,r8	;main vram
    690e:	e4 01       	movw	r28, r8
		brne .+2
    6910:	09 f4       	brne	.+2      	; 0x6914 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6912:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6914:	dc cf       	rjmp	.-72     	; 0x68ce <next_tile_line>

00006916 <frame_end>:

	frame_end:

		WAIT r19,18
    6916:	36 e0       	ldi	r19, 0x06	; 6
    6918:	3a 95       	dec	r19
    691a:	f1 f7       	brne	.-4      	; 0x6918 <frame_end+0x2>

		rcall hsync_pulse ;145
    691c:	56 d2       	rcall	.+1196   	; 0x6dca <hsync_pulse>
	
		clr r1
    691e:	11 24       	eor	r1, r1
		call RestoreBackground
    6920:	0e 94 80 43 	call	0x8700	; 0x8700 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6924:	e0 91 ee 0a 	lds	r30, 0x0AEE
		ldi r20,SYNC_FLAG_FIELD
    6928:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    692a:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    692c:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    692e:	e0 93 ee 0a 	sts	0x0AEE, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6932:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6934:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6938:	11 24       	eor	r1, r1


		ret
    693a:	08 95       	ret

0000693c <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    693c:	de 01       	movw	r26, r28

		mul r22,r23
    693e:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6940:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6942:	00 5c       	subi	r16, 0xC0	; 192
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6944:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    6946:	00 0d       	add	r16, r0
		adc r17,r1
    6948:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    694a:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    694c:	08 ed       	ldi	r16, 0xD8	; 216
		ldi r17,hi8(ram_tiles)
    694e:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6950:	00 0d       	add	r16, r0
		adc r17,r1
    6952:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6954:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6956:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6958:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    695a:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    695c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    695e:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6960:	27 31       	cpi	r18, 0x17	; 23
		brcc .+2
    6962:	08 f4       	brcc	.+2      	; 0x6966 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6964:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6966:	04 0e       	add	r0, r20
	    adc r1,r21
    6968:	15 1e       	adc	r1, r21

		movw ZL,r0
    696a:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    696c:	27 31       	cpi	r18, 0x17	; 23
		brcs ramloop
    696e:	f0 f0       	brcs	.+60     	; 0x69ac <ramloop>

00006970 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6970:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6972:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6974:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6976:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6978:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    697a:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    697c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    697e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6980:	27 31       	cpi	r18, 0x17	; 23
		nop
    6982:	00 00       	nop

	    lpm r16,Z+
    6984:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6986:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6988:	08 f4       	brcc	.+2      	; 0x698c <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    698a:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    698c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    698e:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6990:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6992:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6994:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6996:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6998:	27 31       	cpi	r18, 0x17	; 23
		dec r17			;decrement tiles to draw on line
    699a:	1a 95       	dec	r17
   
	    lpm r16,Z+
    699c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    699e:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    69a0:	05 91       	lpm	r16, Z+

		breq end	
    69a2:	31 f1       	breq	.+76     	; 0x69f0 <end>
	    movw ZL,r0   	;copy next tile adress
    69a4:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    69a6:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    69a8:	18 f7       	brcc	.-58     	; 0x6970 <romloop>
	
		rjmp .
    69aa:	00 c0       	rjmp	.+0      	; 0x69ac <ramloop>

000069ac <ramloop>:

	ramloop:

	    ld r16,Z+
    69ac:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    69ae:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    69b0:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    69b2:	01 91       	ld	r16, Z+
		nop   
    69b4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    69b6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    69b8:	23 9f       	mul	r18, r19


	    ld r16,Z+
    69ba:	01 91       	ld	r16, Z+
		nop
    69bc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    69be:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    69c0:	27 31       	cpi	r18, 0x17	; 23
   		rjmp .
    69c2:	00 c0       	rjmp	.+0      	; 0x69c4 <ramloop+0x18>

	    ld r16,Z+
    69c4:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    69c6:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    69c8:	08 f0       	brcs	.+2      	; 0x69cc <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    69ca:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    69cc:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    69ce:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    69d0:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    69d2:	15 1e       	adc	r1, r21
		rjmp .
    69d4:	00 c0       	rjmp	.+0      	; 0x69d6 <ramloop+0x2a>
    
		ld r16,Z+		
    69d6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    69d8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    69da:	27 31       	cpi	r18, 0x17	; 23
		rjmp .  
    69dc:	00 c0       	rjmp	.+0      	; 0x69de <ramloop+0x32>

	    ld r16,Z+	
    69de:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    69e0:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    69e2:	01 91       	ld	r16, Z+

	    dec r17
    69e4:	1a 95       	dec	r17
	    breq end
    69e6:	21 f0       	breq	.+8      	; 0x69f0 <end>
	
		movw ZL,r0
    69e8:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    69ea:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    69ec:	08 f6       	brcc	.-126    	; 0x6970 <romloop>
		rjmp ramloop
    69ee:	de cf       	rjmp	.-68     	; 0x69ac <ramloop>

000069f0 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    69f0:	08 b9       	out	0x08, r16	; 8
		clr r16	
    69f2:	00 27       	eor	r16, r16
		lpm	
    69f4:	c8 95       	lpm
		nop
    69f6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    69f8:	08 b9       	out	0x08, r16	; 8

		ret
    69fa:	08 95       	ret

000069fc <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    69fc:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    69fe:	e0 91 e5 0a 	lds	r30, 0x0AE5
	lds ZH,tile_table_hi
    6a02:	f0 91 e6 0a 	lds	r31, 0x0AE6
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    6a06:	87 51       	subi	r24, 0x17	; 23
	mul r24,r18
    6a08:	82 9f       	mul	r24, r18
	add ZL,r0
    6a0a:	e0 0d       	add	r30, r0
	adc ZH,r1
    6a0c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6a0e:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    6a10:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6a12:	62 9f       	mul	r22, r18
	add XL,r0
    6a14:	a0 0d       	add	r26, r0
	adc XH,r1
    6a16:	b1 1d       	adc	r27, r1

	clr r0
    6a18:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    6a1a:	05 90       	lpm	r0, Z+
    6a1c:	0d 92       	st	X+, r0
    6a1e:	05 90       	lpm	r0, Z+
    6a20:	0d 92       	st	X+, r0
    6a22:	05 90       	lpm	r0, Z+
    6a24:	0d 92       	st	X+, r0
    6a26:	05 90       	lpm	r0, Z+
    6a28:	0d 92       	st	X+, r0
    6a2a:	05 90       	lpm	r0, Z+
    6a2c:	0d 92       	st	X+, r0
    6a2e:	05 90       	lpm	r0, Z+
    6a30:	0d 92       	st	X+, r0
    6a32:	05 90       	lpm	r0, Z+
    6a34:	0d 92       	st	X+, r0
    6a36:	05 90       	lpm	r0, Z+
    6a38:	0d 92       	st	X+, r0
    6a3a:	05 90       	lpm	r0, Z+
    6a3c:	0d 92       	st	X+, r0
    6a3e:	05 90       	lpm	r0, Z+
    6a40:	0d 92       	st	X+, r0
    6a42:	05 90       	lpm	r0, Z+
    6a44:	0d 92       	st	X+, r0
    6a46:	05 90       	lpm	r0, Z+
    6a48:	0d 92       	st	X+, r0
    6a4a:	05 90       	lpm	r0, Z+
    6a4c:	0d 92       	st	X+, r0
    6a4e:	05 90       	lpm	r0, Z+
    6a50:	0d 92       	st	X+, r0
    6a52:	05 90       	lpm	r0, Z+
    6a54:	0d 92       	st	X+, r0
    6a56:	05 90       	lpm	r0, Z+
    6a58:	0d 92       	st	X+, r0
    6a5a:	05 90       	lpm	r0, Z+
    6a5c:	0d 92       	st	X+, r0
    6a5e:	05 90       	lpm	r0, Z+
    6a60:	0d 92       	st	X+, r0
    6a62:	05 90       	lpm	r0, Z+
    6a64:	0d 92       	st	X+, r0
    6a66:	05 90       	lpm	r0, Z+
    6a68:	0d 92       	st	X+, r0
    6a6a:	05 90       	lpm	r0, Z+
    6a6c:	0d 92       	st	X+, r0
    6a6e:	05 90       	lpm	r0, Z+
    6a70:	0d 92       	st	X+, r0
    6a72:	05 90       	lpm	r0, Z+
    6a74:	0d 92       	st	X+, r0
    6a76:	05 90       	lpm	r0, Z+
    6a78:	0d 92       	st	X+, r0
    6a7a:	05 90       	lpm	r0, Z+
    6a7c:	0d 92       	st	X+, r0
    6a7e:	05 90       	lpm	r0, Z+
    6a80:	0d 92       	st	X+, r0
    6a82:	05 90       	lpm	r0, Z+
    6a84:	0d 92       	st	X+, r0
    6a86:	05 90       	lpm	r0, Z+
    6a88:	0d 92       	st	X+, r0
    6a8a:	05 90       	lpm	r0, Z+
    6a8c:	0d 92       	st	X+, r0
    6a8e:	05 90       	lpm	r0, Z+
    6a90:	0d 92       	st	X+, r0
    6a92:	05 90       	lpm	r0, Z+
    6a94:	0d 92       	st	X+, r0
    6a96:	05 90       	lpm	r0, Z+
    6a98:	0d 92       	st	X+, r0
    6a9a:	05 90       	lpm	r0, Z+
    6a9c:	0d 92       	st	X+, r0
    6a9e:	05 90       	lpm	r0, Z+
    6aa0:	0d 92       	st	X+, r0
    6aa2:	05 90       	lpm	r0, Z+
    6aa4:	0d 92       	st	X+, r0
    6aa6:	05 90       	lpm	r0, Z+
    6aa8:	0d 92       	st	X+, r0
    6aaa:	05 90       	lpm	r0, Z+
    6aac:	0d 92       	st	X+, r0
    6aae:	05 90       	lpm	r0, Z+
    6ab0:	0d 92       	st	X+, r0
    6ab2:	05 90       	lpm	r0, Z+
    6ab4:	0d 92       	st	X+, r0
    6ab6:	05 90       	lpm	r0, Z+
    6ab8:	0d 92       	st	X+, r0
    6aba:	05 90       	lpm	r0, Z+
    6abc:	0d 92       	st	X+, r0
    6abe:	05 90       	lpm	r0, Z+
    6ac0:	0d 92       	st	X+, r0
    6ac2:	05 90       	lpm	r0, Z+
    6ac4:	0d 92       	st	X+, r0
    6ac6:	05 90       	lpm	r0, Z+
    6ac8:	0d 92       	st	X+, r0
    6aca:	05 90       	lpm	r0, Z+
    6acc:	0d 92       	st	X+, r0
    6ace:	05 90       	lpm	r0, Z+
    6ad0:	0d 92       	st	X+, r0
    6ad2:	05 90       	lpm	r0, Z+
    6ad4:	0d 92       	st	X+, r0
    6ad6:	05 90       	lpm	r0, Z+
    6ad8:	0d 92       	st	X+, r0
    6ada:	05 90       	lpm	r0, Z+
    6adc:	0d 92       	st	X+, r0
    6ade:	05 90       	lpm	r0, Z+
    6ae0:	0d 92       	st	X+, r0
    6ae2:	05 90       	lpm	r0, Z+
    6ae4:	0d 92       	st	X+, r0
    6ae6:	05 90       	lpm	r0, Z+
    6ae8:	0d 92       	st	X+, r0
    6aea:	05 90       	lpm	r0, Z+
    6aec:	0d 92       	st	X+, r0
    6aee:	05 90       	lpm	r0, Z+
    6af0:	0d 92       	st	X+, r0
    6af2:	05 90       	lpm	r0, Z+
    6af4:	0d 92       	st	X+, r0
    6af6:	05 90       	lpm	r0, Z+
    6af8:	0d 92       	st	X+, r0
    6afa:	05 90       	lpm	r0, Z+
    6afc:	0d 92       	st	X+, r0
    6afe:	05 90       	lpm	r0, Z+
    6b00:	0d 92       	st	X+, r0
    6b02:	05 90       	lpm	r0, Z+
    6b04:	0d 92       	st	X+, r0
    6b06:	05 90       	lpm	r0, Z+
    6b08:	0d 92       	st	X+, r0
    6b0a:	05 90       	lpm	r0, Z+
    6b0c:	0d 92       	st	X+, r0
    6b0e:	05 90       	lpm	r0, Z+
    6b10:	0d 92       	st	X+, r0
    6b12:	05 90       	lpm	r0, Z+
    6b14:	0d 92       	st	X+, r0
    6b16:	05 90       	lpm	r0, Z+
    6b18:	0d 92       	st	X+, r0


	clr r1
    6b1a:	11 24       	eor	r1, r1
	ret
    6b1c:	08 95       	ret

00006b1e <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6b1e:	0f 93       	push	r16
	push r17
    6b20:	1f 93       	push	r17
	push YL
    6b22:	cf 93       	push	r28
	push YH
    6b24:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6b26:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6b28:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6b2a:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi ZH,hi8(sprites)	
    6b2c:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6b2e:	e0 0d       	add	r30, r0
	adc ZH,r1
    6b30:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6b32:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6b34:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6b36:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6b38:	8e 9f       	mul	r24, r30
	movw r26,r0
    6b3a:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6b3c:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6b3e:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6b40:	cd ed       	ldi	r28, 0xDD	; 221
	ldi YH,hi8(sprites_tile_banks)	
    6b42:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    6b44:	00 24       	eor	r0, r0
	add YL,r1
    6b46:	c1 0d       	add	r28, r1
	adc YH,r0		
    6b48:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6b4a:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6b4c:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6b4e:	ea 0f       	add	r30, r26
	adc ZH,r27
    6b50:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6b52:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    6b54:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6b56:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6b58:	69 9f       	mul	r22, r25
	add XL,r0
    6b5a:	a0 0d       	add	r26, r0
	adc XH,r1
    6b5c:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6b5e:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6b60:	dd 27       	eor	r29, r29

	cpi r20,0	
    6b62:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6b64:	51 f4       	brne	.+20     	; 0x6b7a <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6b66:	a2 0f       	add	r26, r18
	adc XH,r1
    6b68:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6b6a:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6b6c:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6b6e:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6b70:	11 c0       	rjmp	.+34     	; 0x6b94 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6b72:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6b74:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6b76:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6b78:	0d c0       	rjmp	.+26     	; 0x6b94 <x_check_end>

00006b7a <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6b7a:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6b7c:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6b7e:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6b80:	04 c0       	rjmp	.+8      	; 0x6b8a <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6b82:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6b84:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6b86:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6b88:	05 c0       	rjmp	.+10     	; 0x6b94 <x_check_end>

00006b8a <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6b8a:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6b8c:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6b8e:	e2 0f       	add	r30, r18
	adc ZH,r1
    6b90:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6b92:	31 97       	sbiw	r30, 0x01	; 1

00006b94 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6b94:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6b96:	41 f4       	brne	.+16     	; 0x6ba8 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6b98:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6b9a:	93 9f       	mul	r25, r19
	add XL,r0
    6b9c:	a0 0d       	add	r26, r0
	adc XH,r1
    6b9e:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6ba0:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    6ba2:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    6ba4:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    6ba6:	0a c0       	rjmp	.+20     	; 0x6bbc <y_check_end>

00006ba8 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6ba8:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6baa:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6bac:	63 2f       	mov	r22, r19
	dec r22
    6bae:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6bb0:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6bb2:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6bb4:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6bb6:	56 9f       	mul	r21, r22
	add ZL,r0
    6bb8:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6bba:	f1 1d       	adc	r31, r1

00006bbc <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6bbc:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6bbe:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6bc0:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6bc2:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6bc4:	00 ff       	sbrs	r16, 0
	clr r23
    6bc6:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6bc8:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6bca:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6bcc:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6bce:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6bd0:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6bd2:	59 1b       	sub	r21, r25

00006bd4 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6bd4:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6bd6:	48 1b       	sub	r20, r24

00006bd8 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6bd8:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6bda:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6bdc:	2c 93       	st	X, r18
	adiw XL,1
    6bde:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6be0:	e6 0f       	add	r30, r22
	adc ZH,r23
    6be2:	f7 1f       	adc	r31, r23
	dec r20
    6be4:	4a 95       	dec	r20
	brne x_loop
    6be6:	c1 f7       	brne	.-16     	; 0x6bd8 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6be8:	ec 0f       	add	r30, r28
	adc ZH,YH
    6bea:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6bec:	a8 0f       	add	r26, r24
	adc XH,r1
    6bee:	b1 1d       	adc	r27, r1
	dec r21
    6bf0:	5a 95       	dec	r21
	brne y_loop
    6bf2:	81 f7       	brne	.-32     	; 0x6bd4 <y_loop>


	pop YH
    6bf4:	df 91       	pop	r29
	pop YL
    6bf6:	cf 91       	pop	r28
	pop r17
    6bf8:	1f 91       	pop	r17
	pop r16
    6bfa:	0f 91       	pop	r16
	ret
    6bfc:	08 95       	ret

00006bfe <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6bfe:	0f 92       	push	r0
	push r1
    6c00:	1f 92       	push	r1
	push ZL;2
    6c02:	ef 93       	push	r30
	push ZH;2
    6c04:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6c06:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6c08:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6c0a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6c0e:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6c10:	f1 e0       	ldi	r31, 0x01	; 1

00006c12 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6c12:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6c14:	00 f0       	brcs	.+0      	; 0x6c16 <latency_loop+0x4>
	inc ZH
    6c16:	f3 95       	inc	r31
	cpi ZH,10
    6c18:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6c1a:	d8 f3       	brcs	.-10     	; 0x6c12 <latency_loop>
	jmp .
    6c1c:	0c 94 10 36 	jmp	0x6c20	; 0x6c20 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    6c20:	e0 91 ed 0a 	lds	r30, 0x0AED
	dec ZL
    6c24:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6c26:	e0 93 ed 0a 	sts	0x0AED, r30

	;process sync phases
	lds ZH,sync_phase
    6c2a:	f0 91 ec 0a 	lds	r31, 0x0AEC
	sbrc ZH,0
    6c2e:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6c30:	57 c0       	rjmp	.+174    	; 0x6ce0 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6c32:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6c34:	98 f0       	brcs	.+38     	; 0x6c5c <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6c36:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6c38:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6c3c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6c3e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6c42:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6c44:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6c46:	26 f4       	brtc	.+8      	; 0x6c50 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6c48:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6c4a:	0e 94 f6 36 	call	0x6dec	; 0x6dec <update_sound>
	rjmp sync_end
    6c4e:	b6 c0       	rjmp	.+364    	; 0x6dbc <sync_end>

00006c50 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6c50:	e5 e1       	ldi	r30, 0x15	; 21
    6c52:	ea 95       	dec	r30
    6c54:	f1 f7       	brne	.-4      	; 0x6c52 <sync_pre_eq_no_sound_update+0x2>
    6c56:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6c58:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6c5a:	b0 c0       	rjmp	.+352    	; 0x6dbc <sync_end>

00006c5c <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6c5c:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6c5e:	38 f1       	brcs	.+78     	; 0x6cae <sync_post_eq>

	rjmp .
    6c60:	00 c0       	rjmp	.+0      	; 0x6c62 <sync_eq+0x6>
	rjmp .
    6c62:	00 c0       	rjmp	.+0      	; 0x6c64 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6c64:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6c66:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6c68:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6c6a:	16 f4       	brtc	.+4      	; 0x6c70 <sync_eq_skip>
	
	call update_sound
    6c6c:	0e 94 f6 36 	call	0x6dec	; 0x6dec <update_sound>

00006c70 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6c70:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6c72:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6c76:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6c78:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6c7c:	9f c0       	rjmp	.+318    	; 0x6dbc <sync_end>

00006c7e <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6c7e:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6c80:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6c82:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6c84:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6c88:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6c8a:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6c8c:	00 f0       	brcs	.+0      	; 0x6c8e <__vector_14+0x10>

	cpi ZL,2
    6c8e:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6c90:	00 f0       	brcs	.+0      	; 0x6c92 <__vector_14+0x14>

	cpi ZL,3
    6c92:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6c94:	00 f0       	brcs	.+0      	; 0x6c96 <__vector_14+0x18>

	cpi ZL,4
    6c96:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6c98:	00 f0       	brcs	.+0      	; 0x6c9a <__vector_14+0x1c>

	cpi ZL,5
    6c9a:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6c9c:	00 f0       	brcs	.+0      	; 0x6c9e <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6c9e:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6ca0:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6ca2:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6ca6:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6ca8:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6caa:	ef 91       	pop	r30
	reti
    6cac:	18 95       	reti

00006cae <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6cae:	00 c0       	rjmp	.+0      	; 0x6cb0 <sync_post_eq+0x2>

	bst ZL,0
    6cb0:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6cb2:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6cb4:	26 f4       	brtc	.+8      	; 0x6cbe <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6cb6:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6cb8:	0e 94 f6 36 	call	0x6dec	; 0x6dec <update_sound>
	rjmp sync_pre_eq_cont
    6cbc:	05 c0       	rjmp	.+10     	; 0x6cc8 <sync_pre_eq_cont>

00006cbe <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6cbe:	e5 e1       	ldi	r30, 0x15	; 21
    6cc0:	ea 95       	dec	r30
    6cc2:	f1 f7       	brne	.-4      	; 0x6cc0 <sync_post_eq_no_sound_update+0x2>
    6cc4:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6cc6:	28 9a       	sbi	0x05, 0	; 5

00006cc8 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6cc8:	e0 91 ed 0a 	lds	r30, 0x0AED
	cpi ZL,0
    6ccc:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6cce:	09 f0       	breq	.+2      	; 0x6cd2 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6cd0:	75 c0       	rjmp	.+234    	; 0x6dbc <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6cd2:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6cd4:	e0 93 ed 0a 	sts	0x0AED, r30
	ldi ZL,1
    6cd8:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6cda:	e0 93 ec 0a 	sts	0x0AEC, r30
	
	rjmp sync_end
    6cde:	6e c0       	rjmp	.+220    	; 0x6dbc <sync_end>

00006ce0 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6ce0:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6ce2:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6ce6:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6ce8:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6cec:	00 c0       	rjmp	.+0      	; 0x6cee <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6cee:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6cf0:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6cf2:	00 c0       	rjmp	.+0      	; 0x6cf4 <sync_hsync+0x14>
	call update_sound
    6cf4:	0e 94 f6 36 	call	0x6dec	; 0x6dec <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6cf8:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6cfa:	00 90 f3 0a 	lds	r0, 0x0AF3
	sub ZH,r0				
    6cfe:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6d00:	e0 91 ed 0a 	lds	r30, 0x0AED
	cp ZL,ZH
    6d04:	ef 17       	cp	r30, r31
	brsh no_render
    6d06:	d0 f4       	brcc	.+52     	; 0x6d3c <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6d08:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6d0a:	00 90 f3 0a 	lds	r0, 0x0AF3
	sub ZH,r0				
    6d0e:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6d10:	00 90 f4 0a 	lds	r0, 0x0AF4
	sub ZH,r0			
    6d14:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6d16:	ef 17       	cp	r30, r31
	brlo no_render
    6d18:	88 f0       	brcs	.+34     	; 0x6d3c <no_render>

	;push r1-r29
	ldi ZL,29
    6d1a:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6d1c:	ff 27       	eor	r31, r31

00006d1e <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6d1e:	00 80       	ld	r0, Z
	push r0
    6d20:	0f 92       	push	r0
	dec ZL
    6d22:	ea 95       	dec	r30
	brne push_loop	
    6d24:	e1 f7       	brne	.-8      	; 0x6d1e <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6d26:	06 e0       	ldi	r16, 0x06	; 6
    6d28:	0a 95       	dec	r16
    6d2a:	f1 f7       	brne	.-4      	; 0x6d28 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6d2c:	0e 94 2b 34 	call	0x6856	; 0x6856 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6d30:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6d32:	ff 27       	eor	r31, r31

00006d34 <pop_loop>:
pop_loop:
	pop r0
    6d34:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6d36:	01 92       	st	Z+, r0
	cpi ZL,30
    6d38:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6d3a:	e0 f3       	brcs	.-8      	; 0x6d34 <pop_loop>

00006d3c <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6d3c:	e0 91 ed 0a 	lds	r30, 0x0AED
	cpi ZL,0
    6d40:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6d42:	09 f0       	breq	.+2      	; 0x6d46 <no_render+0xa>
	rjmp sync_end
    6d44:	3b c0       	rjmp	.+118    	; 0x6dbc <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6d46:	2f 93       	push	r18
	push r19
    6d48:	3f 93       	push	r19
	push r20
    6d4a:	4f 93       	push	r20
	push r21
    6d4c:	5f 93       	push	r21
	push r22
    6d4e:	6f 93       	push	r22
	push r23
    6d50:	7f 93       	push	r23
	push r24
    6d52:	8f 93       	push	r24
	push r25
    6d54:	9f 93       	push	r25
	push r26
    6d56:	af 93       	push	r26
	push r27
    6d58:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6d5a:	78 94       	sei
	clr r1
    6d5c:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6d5e:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6d60:	e0 93 ec 0a 	sts	0x0AEC, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6d64:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6d66:	e0 93 ed 0a 	sts	0x0AED, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    6d6a:	f0 91 f5 0a 	lds	r31, 0x0AF5
	sts first_render_line,ZH
    6d6e:	f0 93 f3 0a 	sts	0x0AF3, r31
	
	lds ZH,render_lines_count_tmp
    6d72:	f0 91 f6 0a 	lds	r31, 0x0AF6
	sts render_lines_count,ZH
    6d76:	f0 93 f4 0a 	sts	0x0AF4, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6d7a:	e0 91 ef 0a 	lds	r30, 0x0AEF
	lds ZH,pre_vsync_user_callback+1
    6d7e:	f0 91 f0 0a 	lds	r31, 0x0AF0
	cp  ZL,r1
    6d82:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6d84:	f1 05       	cpc	r31, r1
	breq .+2 
    6d86:	09 f0       	breq	.+2      	; 0x6d8a <no_render+0x4e>
	icall
    6d88:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6d8a:	0e 94 4a 38 	call	0x7094	; 0x7094 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6d8e:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6d92:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <process_music>
	clr r1
    6d96:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6d98:	e0 91 f1 0a 	lds	r30, 0x0AF1
	lds ZH,post_vsync_user_callback+1
    6d9c:	f0 91 f2 0a 	lds	r31, 0x0AF2
	cp  ZL,r1
    6da0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6da2:	f1 05       	cpc	r31, r1
	breq .+2 
    6da4:	09 f0       	breq	.+2      	; 0x6da8 <no_render+0x6c>
	icall
    6da6:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6da8:	bf 91       	pop	r27
	pop r26
    6daa:	af 91       	pop	r26
	pop r25
    6dac:	9f 91       	pop	r25
	pop r24
    6dae:	8f 91       	pop	r24
	pop r23
    6db0:	7f 91       	pop	r23
	pop r22
    6db2:	6f 91       	pop	r22
	pop r21
    6db4:	5f 91       	pop	r21
	pop r20
    6db6:	4f 91       	pop	r20
	pop r19
    6db8:	3f 91       	pop	r19
	pop r18
    6dba:	2f 91       	pop	r18

00006dbc <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6dbc:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6dbe:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6dc0:	ff 91       	pop	r31
	pop ZL
    6dc2:	ef 91       	pop	r30
	pop r1
    6dc4:	1f 90       	pop	r1
	pop r0
    6dc6:	0f 90       	pop	r0
	reti
    6dc8:	18 95       	reti

00006dca <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6dca:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6dcc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6dce:	00 c0       	rjmp	.+0      	; 0x6dd0 <hsync_pulse+0x6>
	call update_sound
    6dd0:	0e 94 f6 36 	call	0x6dec	; 0x6dec <update_sound>

	lds ZL,sync_pulse
    6dd4:	e0 91 ed 0a 	lds	r30, 0x0AED
	dec ZL
    6dd8:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6dda:	e0 93 ed 0a 	sts	0x0AED, r30

	ret
    6dde:	08 95       	ret

00006de0 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6de0:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    6de4:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6de6:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <ProcessMusic>
#endif

	ret
    6dea:	08 95       	ret

00006dec <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    6dec:	0f 93       	push	r16
	push r17
    6dee:	1f 93       	push	r17
	push r18
    6df0:	2f 93       	push	r18
	push r28
    6df2:	cf 93       	push	r28
	push r29
    6df4:	df 93       	push	r29

	mov r18,ZL
    6df6:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6df8:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    6dfc:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    6e00:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6e02:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    6e06:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    6e0a:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    6e0e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6e10:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6e12:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    6e16:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    6e1a:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    6e1e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6e20:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6e22:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6e24:	d0 2d       	mov	r29, r0
	nop
    6e26:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6e28:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    6e2c:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    6e30:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6e32:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    6e36:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    6e3a:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    6e3e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6e40:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6e42:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    6e46:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    6e4a:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6e4e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6e50:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6e52:	20 ff       	sbrs	r18, 0
	rjmp .
    6e54:	00 c0       	rjmp	.+0      	; 0x6e56 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6e56:	01 03       	mulsu	r16, r17
	clr r0
    6e58:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6e5a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6e5c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6e5e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6e60:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    6e64:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    6e68:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6e6a:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    6e6e:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    6e72:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    6e76:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6e78:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6e7a:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    6e7e:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    6e82:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    6e86:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6e88:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6e8a:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6e8c:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6e8e:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    6e92:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    6e96:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    6e9a:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6e9c:	92 f4       	brpl	.+36     	; 0x6ec2 <ch4_no_shift>

	lds ZH,tr4_params
    6e9e:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    6ea2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6ea4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6ea6:	00 2e       	mov	r0, r16
	lsr r0
    6ea8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6eaa:	00 26       	eor	r0, r16
	bst r0,0
    6eac:	00 fa       	bst	r0, 0
	lsr r17
    6eae:	16 95       	lsr	r17
	ror r16
    6eb0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6eb2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6eb4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6eb6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6eb8:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    6ebc:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    6ec0:	03 c0       	rjmp	.+6      	; 0x6ec8 <ch4_end>

00006ec2 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6ec2:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6ec4:	1a 95       	dec	r17
	brne .-4
    6ec6:	f1 f7       	brne	.-4      	; 0x6ec4 <ch4_no_shift+0x2>

00006ec8 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6ec8:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    6ecc:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6ece:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6ed0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6ed2:	21 ff       	sbrs	r18, 1
	rjmp .
    6ed4:	00 c0       	rjmp	.+0      	; 0x6ed6 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6ed6:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6ed8:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6eda:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    6ede:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6ee0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6ee2:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6ee4:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6ee6:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    6eea:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    6eee:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6ef0:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    6ef4:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    6ef8:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    6efc:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    6efe:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    6f02:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6f04:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6f06:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6f08:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    6f0c:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    6f10:	00 19       	sub	r16, r0
	sbc r17,r1
    6f12:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6f14:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    6f18:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    6f1c:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6f1e:	f1 05       	cpc	r31, r1
	brlo .+2
    6f20:	08 f0       	brcs	.+2      	; 0x6f24 <ch4_end+0x5c>
	movw ZL,r16
    6f22:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6f24:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    6f28:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    6f2c:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6f2e:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    6f32:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6f34:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f36:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6f38:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6f3a:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6f3c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6f3e:	d0 05       	cpc	r29, r0
	brlt .+2
    6f40:	0c f0       	brlt	.+2      	; 0x6f44 <ch4_end+0x7c>
	ldi r28,127
    6f42:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6f44:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6f46:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6f48:	d0 05       	cpc	r29, r0
	brge .+2
    6f4a:	0c f4       	brge	.+2      	; 0x6f4e <ch4_end+0x86>
	ldi r28,-128
    6f4c:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    6f4e:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    6f50:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    6f54:	df 91       	pop	r29
	pop r28
    6f56:	cf 91       	pop	r28
	pop r18
    6f58:	2f 91       	pop	r18
	pop r17
    6f5a:	1f 91       	pop	r17
	pop r16
    6f5c:	0f 91       	pop	r16
	
	ret
    6f5e:	08 95       	ret

00006f60 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6f60:	80 93 dd 0a 	sts	0x0ADD, r24
	sts sprites_tile_banks+1,r25
    6f64:	90 93 de 0a 	sts	0x0ADE, r25
	ret
    6f68:	08 95       	ret

00006f6a <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6f6a:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6f6c:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    6f6e:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    6f70:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    6f72:	67 e1       	ldi	r22, 0x17	; 23

00006f74 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6f74:	6d 93       	st	X+, r22
	sbiw r30,1
    6f76:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6f78:	e9 f7       	brne	.-6      	; 0x6f74 <fill_vram_loop>

	clr r1
    6f7a:	11 24       	eor	r1, r1

	ret
    6f7c:	08 95       	ret

00006f7e <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    6f7e:	50 91 e7 0a 	lds	r21, 0x0AE7
	add r20,21
    6f82:	45 0f       	add	r20, r21
	rjmp SetTile	
    6f84:	00 c0       	rjmp	.+0      	; 0x6f86 <SetTile>

00006f86 <SetTile>:

	ret

#else

	clr r25
    6f86:	99 27       	eor	r25, r25
	clr r23	
    6f88:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    6f8a:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    6f8c:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    6f8e:	08 0e       	add	r0, r24
	adc r1,r25
    6f90:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    6f92:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    6f94:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    6f96:	a0 0d       	add	r26, r0
	adc XH,r1
    6f98:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    6f9a:	49 5e       	subi	r20, 0xE9	; 233
	st X,r20
    6f9c:	4c 93       	st	X, r20

	clr r1
    6f9e:	11 24       	eor	r1, r1

	ret
    6fa0:	08 95       	ret

00006fa2 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    6fa2:	80 93 e7 0a 	sts	0x0AE7, r24
	ret
    6fa6:	08 95       	ret

00006fa8 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    6fa8:	80 93 e5 0a 	sts	0x0AE5, r24
	sts tile_table_hi,r25	
    6fac:	90 93 e6 0a 	sts	0x0AE6, r25
	ret
    6fb0:	08 95       	ret

00006fb2 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6fb2:	80 91 ee 0a 	lds	r24, 0x0AEE
	andi r24,SYNC_FLAG_VSYNC
    6fb6:	81 70       	andi	r24, 0x01	; 1
	ret
    6fb8:	08 95       	ret

00006fba <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6fba:	20 91 ee 0a 	lds	r18, 0x0AEE
	andi r18,~SYNC_FLAG_VSYNC
    6fbe:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    6fc0:	20 93 ee 0a 	sts	0x0AEE, r18
	ret
    6fc4:	08 95       	ret

00006fc6 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    6fc6:	88 23       	and	r24, r24
	brne rj_p2
    6fc8:	29 f4       	brne	.+10     	; 0x6fd4 <rj_p2>
		
	lds r24,joypad1_status_lo
    6fca:	80 91 f7 0a 	lds	r24, 0x0AF7
	lds r25,joypad1_status_lo+1
    6fce:	90 91 f8 0a 	lds	r25, 0x0AF8
	ret
    6fd2:	08 95       	ret

00006fd4 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    6fd4:	80 91 fb 0a 	lds	r24, 0x0AFB
	lds r25,joypad2_status_lo+1	
    6fd8:	90 91 fc 0a 	lds	r25, 0x0AFC

	ret
    6fdc:	08 95       	ret

00006fde <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    6fde:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    6fe0:	7a 95       	dec	r23
	brne .-4 ;~1 us
    6fe2:	f1 f7       	brne	.-4      	; 0x6fe0 <WaitUs+0x2>
	nop
    6fe4:	00 00       	nop
	sbiw r24,1
    6fe6:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    6fe8:	d1 f7       	brne	.-12     	; 0x6fde <WaitUs>

	ret
    6fea:	08 95       	ret

00006fec <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6fec:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    6fee:	fe cf       	rjmp	.-4      	; 0x6fec <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6ff0:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6ff2:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    6ff4:	60 bd       	out	0x20, r22	; 32
   cli
    6ff6:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6ff8:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6ffa:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6ffc:	78 94       	sei
   ret
    6ffe:	08 95       	ret

00007000 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7000:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7002:	fe cf       	rjmp	.-4      	; 0x7000 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7004:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7006:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7008:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    700a:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    700c:	80 b5       	in	r24, 0x20	; 32
   sei
    700e:	78 94       	sei
   ret
    7010:	08 95       	ret

00007012 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7012:	98 e0       	ldi	r25, 0x08	; 8
    7014:	88 e1       	ldi	r24, 0x18	; 24
    7016:	0f b6       	in	r0, 0x3f	; 63
    7018:	f8 94       	cli
    701a:	a8 95       	wdr
    701c:	80 93 60 00 	sts	0x0060, r24
    7020:	0f be       	out	0x3f, r0	; 63
    7022:	90 93 60 00 	sts	0x0060, r25
    7026:	ff cf       	rjmp	.-2      	; 0x7026 <SoftReset+0x14>

00007028 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7028:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    702a:	c8 95       	lpm
    702c:	c8 95       	lpm
		Wait200ns();
    702e:	c8 95       	lpm
    7030:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7032:	12 98       	cbi	0x02, 2	; 2
    7034:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7036:	80 e0       	ldi	r24, 0x00	; 0
    7038:	90 e0       	ldi	r25, 0x00	; 0
    703a:	20 e0       	ldi	r18, 0x00	; 0
    703c:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    703e:	36 95       	lsr	r19
    7040:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7042:	96 95       	lsr	r25
    7044:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7046:	c8 95       	lpm
    7048:	c8 95       	lpm
			Wait200ns();
    704a:	c8 95       	lpm
    704c:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    704e:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7050:	00 9b       	sbis	0x00, 0	; 0
    7052:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7054:	01 9b       	sbis	0x00, 1	; 0
    7056:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7058:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    705a:	c8 95       	lpm
    705c:	c8 95       	lpm
			Wait200ns();
    705e:	c8 95       	lpm
    7060:	c8 95       	lpm
    7062:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7064:	61 f7       	brne	.-40     	; 0x703e <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7066:	30 93 f8 0a 	sts	0x0AF8, r19
    706a:	20 93 f7 0a 	sts	0x0AF7, r18
		joypad2_status_lo=p2ButtonsLo;
    706e:	90 93 fc 0a 	sts	0x0AFC, r25
    7072:	80 93 fb 0a 	sts	0x0AFB, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7076:	80 91 f7 0a 	lds	r24, 0x0AF7
    707a:	90 91 f8 0a 	lds	r25, 0x0AF8
    707e:	0f 97       	sbiw	r24, 0x0f	; 15
    7080:	31 f0       	breq	.+12     	; 0x708e <ReadButtons+0x66>
    7082:	80 91 fb 0a 	lds	r24, 0x0AFB
    7086:	90 91 fc 0a 	lds	r25, 0x0AFC
    708a:	0f 97       	sbiw	r24, 0x0f	; 15
    708c:	11 f4       	brne	.+4      	; 0x7092 <ReadButtons+0x6a>
		SoftReset();
    708e:	0e 94 09 38 	call	0x7012	; 0x7012 <SoftReset>
    7092:	08 95       	ret

00007094 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    7094:	10 92 36 0b 	sts	0x0B36, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7098:	00 99       	sbic	0x00, 0	; 0
    709a:	03 c0       	rjmp	.+6      	; 0x70a2 <ReadControllers+0xe>
    709c:	81 e0       	ldi	r24, 0x01	; 1
    709e:	80 93 36 0b 	sts	0x0B36, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    70a2:	01 99       	sbic	0x00, 1	; 0
    70a4:	05 c0       	rjmp	.+10     	; 0x70b0 <ReadControllers+0x1c>
    70a6:	80 91 36 0b 	lds	r24, 0x0B36
    70aa:	82 60       	ori	r24, 0x02	; 2
    70ac:	80 93 36 0b 	sts	0x0B36, r24
			
	//read the standard buttons
	ReadButtons();
    70b0:	0c 94 14 38 	jmp	0x7028	; 0x7028 <ReadButtons>

000070b4 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    70b4:	cf 93       	push	r28
    70b6:	df 93       	push	r29
    70b8:	c0 e0       	ldi	r28, 0x00	; 0
    70ba:	d0 e0       	ldi	r29, 0x00	; 0
    70bc:	fe 01       	movw	r30, r28
    70be:	e0 55       	subi	r30, 0x50	; 80
    70c0:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    70c2:	64 91       	lpm	r22, Z
    70c4:	ce 01       	movw	r24, r28
    70c6:	0e 94 f6 37 	call	0x6fec	; 0x6fec <WriteEeprom>
    70ca:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    70cc:	c0 32       	cpi	r28, 0x20	; 32
    70ce:	d1 05       	cpc	r29, r1
    70d0:	a9 f7       	brne	.-22     	; 0x70bc <FormatEeprom+0x8>
    70d2:	c0 e2       	ldi	r28, 0x20	; 32
    70d4:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    70d6:	6f ef       	ldi	r22, 0xFF	; 255
    70d8:	ce 01       	movw	r24, r28
    70da:	0e 94 f6 37 	call	0x6fec	; 0x6fec <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    70de:	6f ef       	ldi	r22, 0xFF	; 255
    70e0:	ce 01       	movw	r24, r28
    70e2:	01 96       	adiw	r24, 0x01	; 1
    70e4:	0e 94 f6 37 	call	0x6fec	; 0x6fec <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    70e8:	a0 96       	adiw	r28, 0x20	; 32
    70ea:	c1 15       	cp	r28, r1
    70ec:	88 e0       	ldi	r24, 0x08	; 8
    70ee:	d8 07       	cpc	r29, r24
    70f0:	91 f7       	brne	.-28     	; 0x70d6 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    70f2:	df 91       	pop	r29
    70f4:	cf 91       	pop	r28
    70f6:	08 95       	ret

000070f8 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    70f8:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    70fa:	80 e0       	ldi	r24, 0x00	; 0
    70fc:	90 e0       	ldi	r25, 0x00	; 0
    70fe:	0e 94 00 38 	call	0x7000	; 0x7000 <ReadEeprom>
    7102:	c8 2f       	mov	r28, r24
    7104:	81 e0       	ldi	r24, 0x01	; 1
    7106:	90 e0       	ldi	r25, 0x00	; 0
    7108:	0e 94 00 38 	call	0x7000	; 0x7000 <ReadEeprom>
    710c:	28 2f       	mov	r18, r24
    710e:	30 e0       	ldi	r19, 0x00	; 0
    7110:	32 2f       	mov	r19, r18
    7112:	22 27       	eor	r18, r18
    7114:	2c 0f       	add	r18, r28
    7116:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7118:	81 e0       	ldi	r24, 0x01	; 1
    711a:	2a 35       	cpi	r18, 0x5A	; 90
    711c:	35 45       	sbci	r19, 0x55	; 85
    711e:	09 f0       	breq	.+2      	; 0x7122 <isEepromFormatted+0x2a>
    7120:	80 e0       	ldi	r24, 0x00	; 0
}
    7122:	cf 91       	pop	r28
    7124:	08 95       	ret

00007126 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7126:	cf 92       	push	r12
    7128:	df 92       	push	r13
    712a:	ef 92       	push	r14
    712c:	ff 92       	push	r15
    712e:	0f 93       	push	r16
    7130:	1f 93       	push	r17
    7132:	cf 93       	push	r28
    7134:	df 93       	push	r29
    7136:	1f 92       	push	r1
    7138:	cd b7       	in	r28, 0x3d	; 61
    713a:	de b7       	in	r29, 0x3e	; 62
    713c:	8c 01       	movw	r16, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    713e:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <isEepromFormatted>
    7142:	88 23       	and	r24, r24
    7144:	91 f1       	breq	.+100    	; 0x71aa <EepromWriteBlock+0x84>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7146:	f8 01       	movw	r30, r16
    7148:	80 81       	ld	r24, Z
    714a:	91 81       	ldd	r25, Z+1	; 0x01
    714c:	8f 3f       	cpi	r24, 0xFF	; 255
    714e:	ff ef       	ldi	r31, 0xFF	; 255
    7150:	9f 07       	cpc	r25, r31
    7152:	69 f1       	breq	.+90     	; 0x71ae <EepromWriteBlock+0x88>
    7154:	8a 35       	cpi	r24, 0x5A	; 90
    7156:	95 45       	sbci	r25, 0x55	; 85
    7158:	51 f1       	breq	.+84     	; 0x71ae <EepromWriteBlock+0x88>
    715a:	90 e2       	ldi	r25, 0x20	; 32
    715c:	c9 2e       	mov	r12, r25
    715e:	d1 2c       	mov	r13, r1
    7160:	f1 2c       	mov	r15, r1
    7162:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7164:	c6 01       	movw	r24, r12
    7166:	49 83       	std	Y+1, r20	; 0x01
    7168:	0e 94 00 38 	call	0x7000	; 0x7000 <ReadEeprom>
    716c:	e8 2e       	mov	r14, r24
    716e:	c6 01       	movw	r24, r12
    7170:	01 96       	adiw	r24, 0x01	; 1
    7172:	0e 94 00 38 	call	0x7000	; 0x7000 <ReadEeprom>
    7176:	28 2f       	mov	r18, r24
    7178:	30 e0       	ldi	r19, 0x00	; 0
    717a:	32 2f       	mov	r19, r18
    717c:	22 27       	eor	r18, r18
    717e:	2e 0d       	add	r18, r14
    7180:	31 1d       	adc	r19, r1
		if(id==block->id){
    7182:	f8 01       	movw	r30, r16
    7184:	80 81       	ld	r24, Z
    7186:	91 81       	ldd	r25, Z+1	; 0x01
    7188:	49 81       	ldd	r20, Y+1	; 0x01
    718a:	28 17       	cp	r18, r24
    718c:	39 07       	cpc	r19, r25
    718e:	89 f0       	breq	.+34     	; 0x71b2 <EepromWriteBlock+0x8c>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    7190:	2f 3f       	cpi	r18, 0xFF	; 255
    7192:	3f 4f       	sbci	r19, 0xFF	; 255
    7194:	19 f4       	brne	.+6      	; 0x719c <EepromWriteBlock+0x76>
    7196:	f1 10       	cpse	r15, r1
    7198:	01 c0       	rjmp	.+2      	; 0x719c <EepromWriteBlock+0x76>
    719a:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    719c:	4f 5f       	subi	r20, 0xFF	; 255
    719e:	20 e2       	ldi	r18, 0x20	; 32
    71a0:	c2 0e       	add	r12, r18
    71a2:	d1 1c       	adc	r13, r1
    71a4:	40 34       	cpi	r20, 0x40	; 64
    71a6:	f1 f6       	brne	.-68     	; 0x7164 <EepromWriteBlock+0x3e>
    71a8:	1d c0       	rjmp	.+58     	; 0x71e4 <EepromWriteBlock+0xbe>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    71aa:	84 e0       	ldi	r24, 0x04	; 4
    71ac:	1e c0       	rjmp	.+60     	; 0x71ea <EepromWriteBlock+0xc4>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    71ae:	81 e0       	ldi	r24, 0x01	; 1
    71b0:	1c c0       	rjmp	.+56     	; 0x71ea <EepromWriteBlock+0xc4>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    71b2:	ff 20       	and	r15, r15
    71b4:	21 f0       	breq	.+8      	; 0x71be <EepromWriteBlock+0x98>
    71b6:	80 e2       	ldi	r24, 0x20	; 32
    71b8:	f8 9e       	mul	r15, r24
    71ba:	60 01       	movw	r12, r0
    71bc:	11 24       	eor	r1, r1
    71be:	78 01       	movw	r14, r16
    71c0:	e0 e2       	ldi	r30, 0x20	; 32
    71c2:	ee 0e       	add	r14, r30
    71c4:	f1 1c       	adc	r15, r1
    71c6:	c0 1a       	sub	r12, r16
    71c8:	d1 0a       	sbc	r13, r17
    71ca:	c8 01       	movw	r24, r16
    71cc:	8c 0d       	add	r24, r12
    71ce:	9d 1d       	adc	r25, r13

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    71d0:	f8 01       	movw	r30, r16
    71d2:	61 91       	ld	r22, Z+
    71d4:	8f 01       	movw	r16, r30
    71d6:	0e 94 f6 37 	call	0x6fec	; 0x6fec <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    71da:	0e 15       	cp	r16, r14
    71dc:	1f 05       	cpc	r17, r15
    71de:	a9 f7       	brne	.-22     	; 0x71ca <EepromWriteBlock+0xa4>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    71e0:	80 e0       	ldi	r24, 0x00	; 0
    71e2:	03 c0       	rjmp	.+6      	; 0x71ea <EepromWriteBlock+0xc4>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    71e4:	f1 10       	cpse	r15, r1
    71e6:	e7 cf       	rjmp	.-50     	; 0x71b6 <EepromWriteBlock+0x90>
    71e8:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    71ea:	0f 90       	pop	r0
    71ec:	df 91       	pop	r29
    71ee:	cf 91       	pop	r28
    71f0:	1f 91       	pop	r17
    71f2:	0f 91       	pop	r16
    71f4:	ff 90       	pop	r15
    71f6:	ef 90       	pop	r14
    71f8:	df 90       	pop	r13
    71fa:	cf 90       	pop	r12
    71fc:	08 95       	ret

000071fe <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    71fe:	df 92       	push	r13
    7200:	ef 92       	push	r14
    7202:	ff 92       	push	r15
    7204:	0f 93       	push	r16
    7206:	1f 93       	push	r17
    7208:	cf 93       	push	r28
    720a:	df 93       	push	r29
    720c:	7c 01       	movw	r14, r24
    720e:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7210:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <isEepromFormatted>
    7214:	88 23       	and	r24, r24
    7216:	79 f1       	breq	.+94     	; 0x7276 <EepromReadBlock+0x78>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7218:	8f ef       	ldi	r24, 0xFF	; 255
    721a:	e8 16       	cp	r14, r24
    721c:	f8 06       	cpc	r15, r24
    721e:	69 f1       	breq	.+90     	; 0x727a <EepromReadBlock+0x7c>
    7220:	00 e0       	ldi	r16, 0x00	; 0
    7222:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7224:	c8 01       	movw	r24, r16
    7226:	0e 94 00 38 	call	0x7000	; 0x7000 <ReadEeprom>
    722a:	d8 2e       	mov	r13, r24
    722c:	c8 01       	movw	r24, r16
    722e:	01 96       	adiw	r24, 0x01	; 1
    7230:	0e 94 00 38 	call	0x7000	; 0x7000 <ReadEeprom>
    7234:	28 2f       	mov	r18, r24
    7236:	30 e0       	ldi	r19, 0x00	; 0
    7238:	32 2f       	mov	r19, r18
    723a:	22 27       	eor	r18, r18
    723c:	2d 0d       	add	r18, r13
    723e:	31 1d       	adc	r19, r1
		if(id==blockId){
    7240:	2e 15       	cp	r18, r14
    7242:	3f 05       	cpc	r19, r15
    7244:	41 f0       	breq	.+16     	; 0x7256 <EepromReadBlock+0x58>
    7246:	00 5e       	subi	r16, 0xE0	; 224
    7248:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    724a:	01 15       	cp	r16, r1
    724c:	84 e0       	ldi	r24, 0x04	; 4
    724e:	18 07       	cpc	r17, r24
    7250:	49 f7       	brne	.-46     	; 0x7224 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    7252:	83 e0       	ldi	r24, 0x03	; 3
    7254:	15 c0       	rjmp	.+42     	; 0x7280 <EepromReadBlock+0x82>
    7256:	7e 01       	movw	r14, r28
    7258:	80 e2       	ldi	r24, 0x20	; 32
    725a:	e8 0e       	add	r14, r24
    725c:	f1 1c       	adc	r15, r1
    725e:	0c 1b       	sub	r16, r28
    7260:	1d 0b       	sbc	r17, r29

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    7262:	ce 01       	movw	r24, r28
    7264:	80 0f       	add	r24, r16
    7266:	91 1f       	adc	r25, r17
    7268:	0e 94 00 38 	call	0x7000	; 0x7000 <ReadEeprom>
    726c:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    726e:	ce 15       	cp	r28, r14
    7270:	df 05       	cpc	r29, r15
    7272:	b9 f7       	brne	.-18     	; 0x7262 <EepromReadBlock+0x64>
    7274:	04 c0       	rjmp	.+8      	; 0x727e <EepromReadBlock+0x80>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7276:	84 e0       	ldi	r24, 0x04	; 4
    7278:	03 c0       	rjmp	.+6      	; 0x7280 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    727a:	81 e0       	ldi	r24, 0x01	; 1
    727c:	01 c0       	rjmp	.+2      	; 0x7280 <EepromReadBlock+0x82>
	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    727e:	80 e0       	ldi	r24, 0x00	; 0
}
    7280:	df 91       	pop	r29
    7282:	cf 91       	pop	r28
    7284:	1f 91       	pop	r17
    7286:	0f 91       	pop	r16
    7288:	ff 90       	pop	r15
    728a:	ef 90       	pop	r14
    728c:	df 90       	pop	r13
    728e:	08 95       	ret

00007290 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    7290:	fc 01       	movw	r30, r24
    7292:	45 87       	std	Z+13, r20	; 0x0d
    7294:	08 95       	ret

00007296 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7296:	81 e0       	ldi	r24, 0x01	; 1
    7298:	91 e0       	ldi	r25, 0x01	; 1
    729a:	90 93 17 0b 	sts	0x0B17, r25
    729e:	80 93 16 0b 	sts	0x0B16, r24
		mixer.channels.type.noise.params=param;
    72a2:	40 93 15 0b 	sts	0x0B15, r20
    72a6:	08 95       	ret

000072a8 <PatchCommand05>:
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    72a8:	fc 01       	movw	r30, r24
    72aa:	20 81       	ld	r18, Z
    72ac:	2f 75       	andi	r18, 0x5F	; 95
    72ae:	20 83       	st	Z, r18
    72b0:	08 95       	ret

000072b2 <PatchCommand06>:

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    72b2:	fc 01       	movw	r30, r24
    72b4:	20 81       	ld	r18, Z
    72b6:	20 64       	ori	r18, 0x40	; 64
    72b8:	20 83       	st	Z, r18
    72ba:	08 95       	ret

000072bc <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    72bc:	fc 01       	movw	r30, r24
    72be:	44 87       	std	Z+12, r20	; 0x0c
    72c0:	08 95       	ret

000072c2 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    72c2:	fc 01       	movw	r30, r24
    72c4:	47 83       	std	Z+7, r20	; 0x07
    72c6:	08 95       	ret

000072c8 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    72c8:	fc 01       	movw	r30, r24
    72ca:	40 87       	std	Z+8, r20	; 0x08
    72cc:	08 95       	ret

000072ce <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    72ce:	1f 93       	push	r17
    72d0:	cf 93       	push	r28
    72d2:	df 93       	push	r29
    72d4:	ec 01       	movw	r28, r24
    72d6:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    72d8:	29 81       	ldd	r18, Y+1	; 0x01
    72da:	30 e0       	ldi	r19, 0x00	; 0
    72dc:	c9 01       	movw	r24, r18
    72de:	88 0f       	add	r24, r24
    72e0:	99 1f       	adc	r25, r25
    72e2:	88 5f       	subi	r24, 0xF8	; 248
    72e4:	94 48       	sbci	r25, 0x84	; 132
    72e6:	fc 01       	movw	r30, r24
    72e8:	a5 91       	lpm	r26, Z+
    72ea:	b4 91       	lpm	r27, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    72ec:	f9 01       	movw	r30, r18
    72ee:	e4 0f       	add	r30, r20
    72f0:	f1 1d       	adc	r31, r1
    72f2:	47 fd       	sbrc	r20, 7
    72f4:	fa 95       	dec	r31
    72f6:	ee 0f       	add	r30, r30
    72f8:	ff 1f       	adc	r31, r31
    72fa:	e8 5f       	subi	r30, 0xF8	; 248
    72fc:	f4 48       	sbci	r31, 0x84	; 132
    72fe:	85 91       	lpm	r24, Z+
    7300:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    7302:	8a 1b       	sub	r24, r26
    7304:	9b 0b       	sbc	r25, r27
    7306:	60 91 3e 0b 	lds	r22, 0x0B3E
    730a:	70 e0       	ldi	r23, 0x00	; 0
    730c:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
	if(delta==0)delta++;
    7310:	61 15       	cp	r22, r1
    7312:	71 05       	cpc	r23, r1
    7314:	11 f4       	brne	.+4      	; 0x731a <PatchCommand11+0x4c>
    7316:	61 e0       	ldi	r22, 0x01	; 1
    7318:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    731a:	86 e0       	ldi	r24, 0x06	; 6
    731c:	18 9f       	mul	r17, r24
    731e:	f0 01       	movw	r30, r0
    7320:	11 24       	eor	r1, r1
    7322:	ee 5f       	subi	r30, 0xFE	; 254
    7324:	f4 4f       	sbci	r31, 0xF4	; 244
    7326:	21 81       	ldd	r18, Z+1	; 0x01
    7328:	32 81       	ldd	r19, Z+2	; 0x02
    732a:	26 0f       	add	r18, r22
    732c:	37 1f       	adc	r19, r23
    732e:	32 83       	std	Z+2, r19	; 0x02
    7330:	21 83       	std	Z+1, r18	; 0x01
	
	track->slideStep=delta;
    7332:	7b 83       	std	Y+3, r23	; 0x03
    7334:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    7336:	88 81       	ld	r24, Y
    7338:	88 60       	ori	r24, 0x08	; 8
    733a:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    733c:	89 81       	ldd	r24, Y+1	; 0x01
    733e:	84 0f       	add	r24, r20
    7340:	8c 83       	std	Y+4, r24	; 0x04
}
    7342:	df 91       	pop	r29
    7344:	cf 91       	pop	r28
    7346:	1f 91       	pop	r17
    7348:	08 95       	ret

0000734a <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    734a:	40 93 3e 0b 	sts	0x0B3E, r20
    734e:	08 95       	ret

00007350 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    7350:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    7352:	64 2f       	mov	r22, r20
    7354:	0c 94 20 3d 	jmp	0x7a40	; 0x7a40 <SetMixerWave>

00007358 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    7358:	fc 01       	movw	r30, r24
    735a:	86 2f       	mov	r24, r22
	track->note+=param;
    735c:	91 81       	ldd	r25, Z+1	; 0x01
    735e:	49 0f       	add	r20, r25
    7360:	41 83       	std	Z+1, r20	; 0x01
	SetMixerNote(trackNo,track->note);
    7362:	64 2f       	mov	r22, r20
    7364:	0c 94 09 3d 	jmp	0x7a12	; 0x7a12 <SetMixerNote>

00007368 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    7368:	fc 01       	movw	r30, r24
    736a:	86 2f       	mov	r24, r22
	track->note-=param;
    736c:	61 81       	ldd	r22, Z+1	; 0x01
    736e:	64 1b       	sub	r22, r20
    7370:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7372:	0c 94 09 3d 	jmp	0x7a12	; 0x7a12 <SetMixerNote>

00007376 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    7376:	0f 93       	push	r16
    7378:	1f 93       	push	r17
    737a:	cf 93       	push	r28
    737c:	df 93       	push	r29
    737e:	1f 92       	push	r1
    7380:	cd b7       	in	r28, 0x3d	; 61
    7382:	de b7       	in	r29, 0x3e	; 62
    7384:	8c 01       	movw	r16, r24
    7386:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    7388:	64 2f       	mov	r22, r20
    738a:	49 83       	std	Y+1, r20	; 0x01
    738c:	0e 94 09 3d 	call	0x7a12	; 0x7a12 <SetMixerNote>
	track->note=param;
    7390:	49 81       	ldd	r20, Y+1	; 0x01
    7392:	f8 01       	movw	r30, r16
    7394:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7396:	80 81       	ld	r24, Z
    7398:	87 7f       	andi	r24, 0xF7	; 247
    739a:	80 83       	st	Z, r24
}
    739c:	0f 90       	pop	r0
    739e:	df 91       	pop	r29
    73a0:	cf 91       	pop	r28
    73a2:	1f 91       	pop	r17
    73a4:	0f 91       	pop	r16
    73a6:	08 95       	ret

000073a8 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    73a8:	90 93 aa 0b 	sts	0x0BAA, r25
    73ac:	80 93 a9 0b 	sts	0x0BA9, r24

	masterVolume=DEFAULT_MASTER_VOL;
    73b0:	8f e6       	ldi	r24, 0x6F	; 111
    73b2:	80 93 ac 0b 	sts	0x0BAC, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    73b6:	10 92 00 0b 	sts	0x0B00, r1
    73ba:	e7 e4       	ldi	r30, 0x47	; 71
    73bc:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    73be:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73c0:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    73c2:	28 e1       	ldi	r18, 0x18	; 24
    73c4:	df 01       	movw	r26, r30
    73c6:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    73c8:	8c 93       	st	X, r24
    73ca:	df 01       	movw	r26, r30
    73cc:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].noteVol=0;
    73ce:	1c 92       	st	X, r1
    73d0:	df 01       	movw	r26, r30
    73d2:	15 97       	sbiw	r26, 0x05	; 5
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73d4:	9c 93       	st	X, r25
    73d6:	df 01       	movw	r26, r30
    73d8:	14 97       	sbiw	r26, 0x04	; 4
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    73da:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    73dc:	10 82       	st	Z, r1
    73de:	df 01       	movw	r26, r30
    73e0:	16 97       	sbiw	r26, 0x06	; 6
		tracks[t].tremoloRate=24; //~6hz
    73e2:	2c 93       	st	X, r18
    73e4:	df 01       	movw	r26, r30
    73e6:	19 97       	sbiw	r26, 0x09	; 9
		tracks[t].slideSpeed=0x10;
    73e8:	8c 93       	st	X, r24
    73ea:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    73ec:	3b e0       	ldi	r19, 0x0B	; 11
    73ee:	e5 3b       	cpi	r30, 0xB5	; 181
    73f0:	f3 07       	cpc	r31, r19
    73f2:	41 f7       	brne	.-48     	; 0x73c4 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    73f4:	08 95       	ret

000073f6 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    73f6:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    73f8:	ed 91       	ld	r30, X+
    73fa:	fc 91       	ld	r31, X
    73fc:	11 97       	sbiw	r26, 0x01	; 1
    73fe:	9f 01       	movw	r18, r30
    7400:	2f 5f       	subi	r18, 0xFF	; 255
    7402:	3f 4f       	sbci	r19, 0xFF	; 255
    7404:	11 96       	adiw	r26, 0x01	; 1
    7406:	3c 93       	st	X, r19
    7408:	2e 93       	st	-X, r18
    740a:	84 91       	lpm	r24, Z
    740c:	87 fd       	sbrc	r24, 7
    740e:	02 c0       	rjmp	.+4      	; 0x7414 <ReadVarLen+0x1e>
    7410:	90 e0       	ldi	r25, 0x00	; 0
    7412:	08 95       	ret
    {
       value &= 0x7F;
    7414:	8f 77       	andi	r24, 0x7F	; 127
    7416:	90 e0       	ldi	r25, 0x00	; 0
    7418:	f9 01       	movw	r30, r18
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    741a:	96 95       	lsr	r25
    741c:	98 2f       	mov	r25, r24
    741e:	88 27       	eor	r24, r24
    7420:	97 95       	ror	r25
    7422:	87 95       	ror	r24
    7424:	9f 01       	movw	r18, r30
    7426:	2f 5f       	subi	r18, 0xFF	; 255
    7428:	3f 4f       	sbci	r19, 0xFF	; 255
    742a:	e4 91       	lpm	r30, Z
    742c:	4e 2f       	mov	r20, r30
    742e:	4f 77       	andi	r20, 0x7F	; 127
    7430:	84 0f       	add	r24, r20
    7432:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7434:	e7 fd       	sbrc	r30, 7
    7436:	f0 cf       	rjmp	.-32     	; 0x7418 <ReadVarLen+0x22>
    7438:	2d 93       	st	X+, r18
    743a:	3c 93       	st	X, r19
    }


    return value;
}
    743c:	08 95       	ret

0000743e <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    743e:	cf 92       	push	r12
    7440:	df 92       	push	r13
    7442:	ef 92       	push	r14
    7444:	ff 92       	push	r15
    7446:	0f 93       	push	r16
    7448:	1f 93       	push	r17
    744a:	cf 93       	push	r28
    744c:	df 93       	push	r29
    744e:	00 d0       	rcall	.+0      	; 0x7450 <TriggerCommon+0x12>
    7450:	cd b7       	in	r28, 0x3d	; 61
    7452:	de b7       	in	r29, 0x3e	; 62
    7454:	98 2f       	mov	r25, r24
    7456:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
    7458:	36 e1       	ldi	r19, 0x16	; 22
    745a:	83 9f       	mul	r24, r19
    745c:	60 01       	movw	r12, r0
    745e:	11 24       	eor	r1, r1
    7460:	b6 01       	movw	r22, r12
    7462:	67 5c       	subi	r22, 0xC7	; 199
    7464:	74 4f       	sbci	r23, 0xF4	; 244
    7466:	6b 01       	movw	r12, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7468:	fb 01       	movw	r30, r22
    746a:	80 81       	ld	r24, Z
    746c:	18 2f       	mov	r17, r24
    746e:	11 1f       	adc	r17, r17
    7470:	11 27       	eor	r17, r17
    7472:	11 1f       	adc	r17, r17

	track->patchCurrDeltaTime=0;
    7474:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    7476:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    7478:	3f ef       	ldi	r19, 0xFF	; 255
    747a:	34 87       	std	Z+12, r19	; 0x0c
	track->noteVol=volume;
    747c:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    747e:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7480:	87 7b       	andi	r24, 0xB7	; 183
    7482:	80 62       	ori	r24, 0x20	; 32
    7484:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7486:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7488:	31 87       	std	Z+9, r19	; 0x09
	track->note=note;
    748a:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    748c:	93 30       	cpi	r25, 0x03	; 3
    748e:	69 f4       	brne	.+26     	; 0x74aa <TriggerCommon+0x6c>
			//noise channel		
			if(!isFx) patch=note;			
    7490:	11 11       	cpse	r17, r1
    7492:	01 c0       	rjmp	.+2      	; 0x7496 <TriggerCommon+0x58>
    7494:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7496:	81 e0       	ldi	r24, 0x01	; 1
    7498:	91 e0       	ldi	r25, 0x01	; 1
    749a:	90 93 17 0b 	sts	0x0B17, r25
    749e:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    74a2:	81 e0       	ldi	r24, 0x01	; 1
    74a4:	80 93 15 0b 	sts	0x0B15, r24
    74a8:	3c c0       	rjmp	.+120    	; 0x7522 <TriggerCommon+0xe4>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    74aa:	94 30       	cpi	r25, 0x04	; 4
    74ac:	71 f5       	brne	.+92     	; 0x750a <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    74ae:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    74b2:	80 91 a9 0b 	lds	r24, 0x0BA9
    74b6:	90 91 aa 0b 	lds	r25, 0x0BAA
    74ba:	f9 e0       	ldi	r31, 0x09	; 9
    74bc:	0f 9f       	mul	r16, r31
    74be:	80 0d       	add	r24, r0
    74c0:	91 1d       	adc	r25, r1
    74c2:	11 24       	eor	r1, r1
    74c4:	fc 01       	movw	r30, r24
    74c6:	31 96       	adiw	r30, 0x01	; 1
    74c8:	45 91       	lpm	r20, Z+
    74ca:	54 91       	lpm	r21, Z
				mixer.channels.type.pcm.position=pos;				
    74cc:	50 93 1f 0b 	sts	0x0B1F, r21
    74d0:	40 93 1e 0b 	sts	0x0B1E, r20
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    74d4:	dc 01       	movw	r26, r24
    74d6:	17 96       	adiw	r26, 0x07	; 7
    74d8:	fd 01       	movw	r30, r26
    74da:	e5 90       	lpm	r14, Z+
    74dc:	f4 90       	lpm	r15, Z
    74de:	05 96       	adiw	r24, 0x05	; 5
    74e0:	fc 01       	movw	r30, r24
    74e2:	85 91       	lpm	r24, Z+
    74e4:	94 91       	lpm	r25, Z
    74e6:	e8 1a       	sub	r14, r24
    74e8:	f9 0a       	sbc	r15, r25
    74ea:	f0 92 21 0b 	sts	0x0B21, r15
    74ee:	e0 92 20 0b 	sts	0x0B20, r14
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    74f2:	fd 01       	movw	r30, r26
    74f4:	85 91       	lpm	r24, Z+
    74f6:	94 91       	lpm	r25, Z
    74f8:	48 0f       	add	r20, r24
    74fa:	59 1f       	adc	r21, r25
    74fc:	50 93 23 0b 	sts	0x0B23, r21
    7500:	40 93 22 0b 	sts	0x0B22, r20
				SetMixerNote(channel,note);
    7504:	62 2f       	mov	r22, r18
    7506:	84 e0       	ldi	r24, 0x04	; 4
    7508:	0a c0       	rjmp	.+20     	; 0x751e <TriggerCommon+0xe0>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    750a:	60 e0       	ldi	r22, 0x00	; 0
    750c:	89 2f       	mov	r24, r25
    750e:	2a 83       	std	Y+2, r18	; 0x02
    7510:	99 83       	std	Y+1, r25	; 0x01
    7512:	0e 94 20 3d 	call	0x7a40	; 0x7a40 <SetMixerWave>
			SetMixerNote(channel,note);
    7516:	2a 81       	ldd	r18, Y+2	; 0x02
    7518:	62 2f       	mov	r22, r18
    751a:	99 81       	ldd	r25, Y+1	; 0x01
    751c:	89 2f       	mov	r24, r25
    751e:	0e 94 09 3d 	call	0x7a12	; 0x7a12 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7522:	f6 01       	movw	r30, r12

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7524:	11 23       	and	r17, r17
    7526:	11 f0       	breq	.+4      	; 0x752c <TriggerCommon+0xee>
		track->fxPatchNo=patch;
    7528:	07 87       	std	Z+15, r16	; 0x0f
    752a:	01 c0       	rjmp	.+2      	; 0x752e <TriggerCommon+0xf0>
	}else{
		track->patchNo=patch;	
    752c:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    752e:	e0 91 a9 0b 	lds	r30, 0x0BA9
    7532:	f0 91 aa 0b 	lds	r31, 0x0BAA
    7536:	39 e0       	ldi	r19, 0x09	; 9
    7538:	03 9f       	mul	r16, r19
    753a:	e0 0d       	add	r30, r0
    753c:	f1 1d       	adc	r31, r1
    753e:	11 24       	eor	r1, r1
    7540:	33 96       	adiw	r30, 0x03	; 3
    7542:	85 91       	lpm	r24, Z+
    7544:	94 91       	lpm	r25, Z
	if(pos==NULL){
    7546:	00 97       	sbiw	r24, 0x00	; 0
    7548:	21 f4       	brne	.+8      	; 0x7552 <TriggerCommon+0x114>
		track->patchCommandStreamPos=NULL;
    754a:	f6 01       	movw	r30, r12
    754c:	15 8a       	std	Z+21, r1	; 0x15
    754e:	14 8a       	std	Z+20, r1	; 0x14
    7550:	07 c0       	rjmp	.+14     	; 0x7560 <TriggerCommon+0x122>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7552:	fc 01       	movw	r30, r24
    7554:	24 91       	lpm	r18, Z
    7556:	f6 01       	movw	r30, r12
    7558:	21 8b       	std	Z+17, r18	; 0x11
    755a:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    755c:	95 8b       	std	Z+21, r25	; 0x15
    755e:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    7560:	0f 90       	pop	r0
    7562:	0f 90       	pop	r0
    7564:	df 91       	pop	r29
    7566:	cf 91       	pop	r28
    7568:	1f 91       	pop	r17
    756a:	0f 91       	pop	r16
    756c:	ff 90       	pop	r15
    756e:	ef 90       	pop	r14
    7570:	df 90       	pop	r13
    7572:	cf 90       	pop	r12
    7574:	08 95       	ret

00007576 <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7576:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    7578:	a8 2f       	mov	r26, r24
    757a:	b0 e0       	ldi	r27, 0x00	; 0
    757c:	96 e1       	ldi	r25, 0x16	; 22
    757e:	89 9f       	mul	r24, r25
    7580:	f0 01       	movw	r30, r0
    7582:	11 24       	eor	r1, r1
    7584:	e7 5c       	subi	r30, 0xC7	; 199
    7586:	f4 4f       	sbci	r31, 0xF4	; 244
    7588:	90 81       	ld	r25, Z
    758a:	95 ff       	sbrs	r25, 5
    758c:	02 c0       	rjmp	.+4      	; 0x7592 <TriggerNote+0x1c>
    758e:	97 fd       	sbrc	r25, 7
    7590:	29 c0       	rjmp	.+82     	; 0x75e4 <TriggerNote+0x6e>
			
		if(volume==0){ //note-off received
    7592:	31 11       	cpse	r19, r1
    7594:	19 c0       	rjmp	.+50     	; 0x75c8 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    7596:	86 e1       	ldi	r24, 0x16	; 22
    7598:	8a 9f       	mul	r24, r26
    759a:	f0 01       	movw	r30, r0
    759c:	8b 9f       	mul	r24, r27
    759e:	f0 0d       	add	r31, r0
    75a0:	11 24       	eor	r1, r1
    75a2:	e7 5c       	subi	r30, 0xC7	; 199
    75a4:	f4 4f       	sbci	r31, 0xF4	; 244
    75a6:	85 85       	ldd	r24, Z+13	; 0x0d
    75a8:	81 11       	cpse	r24, r1
    75aa:	02 c0       	rjmp	.+4      	; 0x75b0 <TriggerNote+0x3a>
    75ac:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    75ae:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    75b0:	86 e1       	ldi	r24, 0x16	; 22
    75b2:	8a 9f       	mul	r24, r26
    75b4:	f0 01       	movw	r30, r0
    75b6:	8b 9f       	mul	r24, r27
    75b8:	f0 0d       	add	r31, r0
    75ba:	11 24       	eor	r1, r1
    75bc:	e7 5c       	subi	r30, 0xC7	; 199
    75be:	f4 4f       	sbci	r31, 0xF4	; 244
    75c0:	80 81       	ld	r24, Z
    75c2:	8f 7b       	andi	r24, 0xBF	; 191
    75c4:	80 83       	st	Z, r24
    75c6:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    75c8:	26 e1       	ldi	r18, 0x16	; 22
    75ca:	2a 9f       	mul	r18, r26
    75cc:	f0 01       	movw	r30, r0
    75ce:	2b 9f       	mul	r18, r27
    75d0:	f0 0d       	add	r31, r0
    75d2:	11 24       	eor	r1, r1
    75d4:	e7 5c       	subi	r30, 0xC7	; 199
    75d6:	f4 4f       	sbci	r31, 0xF4	; 244
    75d8:	9f 77       	andi	r25, 0x7F	; 127
    75da:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    75dc:	24 2f       	mov	r18, r20
    75de:	43 2f       	mov	r20, r19
    75e0:	0c 94 1f 3a 	jmp	0x743e	; 0x743e <TriggerCommon>
    75e4:	08 95       	ret

000075e6 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    75e6:	9f 92       	push	r9
    75e8:	af 92       	push	r10
    75ea:	bf 92       	push	r11
    75ec:	cf 92       	push	r12
    75ee:	df 92       	push	r13
    75f0:	ef 92       	push	r14
    75f2:	ff 92       	push	r15
    75f4:	0f 93       	push	r16
    75f6:	1f 93       	push	r17
    75f8:	cf 93       	push	r28
    75fa:	df 93       	push	r29
    75fc:	a3 e0       	ldi	r26, 0x03	; 3
    75fe:	bb e0       	ldi	r27, 0x0B	; 11
    7600:	c9 e3       	ldi	r28, 0x39	; 57
    7602:	db e0       	ldi	r29, 0x0B	; 11
    7604:	20 e0       	ldi	r18, 0x00	; 0
    7606:	30 e0       	ldi	r19, 0x00	; 0
    7608:	f9 01       	movw	r30, r18
    760a:	e7 5c       	subi	r30, 0xC7	; 199
    760c:	f4 4f       	sbci	r31, 0xF4	; 244
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    760e:	85 85       	ldd	r24, Z+13	; 0x0d
    7610:	88 23       	and	r24, r24
    7612:	89 f0       	breq	.+34     	; 0x7636 <ProcessMusic+0x50>
			vol=track->envelopeVol+track->envelopeStep;		
    7614:	44 85       	ldd	r20, Z+12	; 0x0c
    7616:	99 27       	eor	r25, r25
    7618:	87 fd       	sbrc	r24, 7
    761a:	90 95       	com	r25
    761c:	84 0f       	add	r24, r20
    761e:	91 1d       	adc	r25, r1
    7620:	8f 3f       	cpi	r24, 0xFF	; 255
    7622:	91 05       	cpc	r25, r1
    7624:	19 f0       	breq	.+6      	; 0x762c <ProcessMusic+0x46>
    7626:	14 f0       	brlt	.+4      	; 0x762c <ProcessMusic+0x46>
    7628:	8f ef       	ldi	r24, 0xFF	; 255
    762a:	90 e0       	ldi	r25, 0x00	; 0
    762c:	97 ff       	sbrs	r25, 7
    762e:	02 c0       	rjmp	.+4      	; 0x7634 <ProcessMusic+0x4e>
    7630:	80 e0       	ldi	r24, 0x00	; 0
    7632:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7634:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    7636:	18 81       	ld	r17, Y
    7638:	13 ff       	sbrs	r17, 3
    763a:	23 c0       	rjmp	.+70     	; 0x7682 <ProcessMusic+0x9c>

			mixer.channels.all[trackNo].step+=track->slideStep;
    763c:	6a 81       	ldd	r22, Y+2	; 0x02
    763e:	7b 81       	ldd	r23, Y+3	; 0x03
    7640:	8d 91       	ld	r24, X+
    7642:	9c 91       	ld	r25, X
    7644:	11 97       	sbiw	r26, 0x01	; 1
    7646:	86 0f       	add	r24, r22
    7648:	97 1f       	adc	r25, r23
    764a:	11 96       	adiw	r26, 0x01	; 1
    764c:	9c 93       	st	X, r25
    764e:	8e 93       	st	-X, r24
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7650:	e4 81       	ldd	r30, Z+4	; 0x04
    7652:	f0 e0       	ldi	r31, 0x00	; 0
    7654:	ee 0f       	add	r30, r30
    7656:	ff 1f       	adc	r31, r31
    7658:	e8 5f       	subi	r30, 0xF8	; 248
    765a:	f4 48       	sbci	r31, 0x84	; 132
    765c:	45 91       	lpm	r20, Z+
    765e:	54 91       	lpm	r21, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7660:	16 16       	cp	r1, r22
    7662:	17 06       	cpc	r1, r23
    7664:	24 f4       	brge	.+8      	; 0x766e <ProcessMusic+0x88>
    7666:	84 17       	cp	r24, r20
    7668:	95 07       	cpc	r25, r21
    766a:	30 f4       	brcc	.+12     	; 0x7678 <ProcessMusic+0x92>
    766c:	0a c0       	rjmp	.+20     	; 0x7682 <ProcessMusic+0x9c>
    766e:	67 2b       	or	r22, r23
    7670:	41 f0       	breq	.+16     	; 0x7682 <ProcessMusic+0x9c>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7672:	48 17       	cp	r20, r24
    7674:	59 07       	cpc	r21, r25
    7676:	28 f0       	brcs	.+10     	; 0x7682 <ProcessMusic+0x9c>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7678:	11 96       	adiw	r26, 0x01	; 1
    767a:	5c 93       	st	X, r21
    767c:	4e 93       	st	-X, r20
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    767e:	17 7f       	andi	r17, 0xF7	; 247
    7680:	18 83       	st	Y, r17
    7682:	2a 5e       	subi	r18, 0xEA	; 234
    7684:	3f 4f       	sbci	r19, 0xFF	; 255
    7686:	66 96       	adiw	r28, 0x16	; 22
    7688:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    768a:	2e 36       	cpi	r18, 0x6E	; 110
    768c:	31 05       	cpc	r19, r1
    768e:	09 f0       	breq	.+2      	; 0x7692 <ProcessMusic+0xac>
    7690:	bb cf       	rjmp	.-138    	; 0x7608 <ProcessMusic+0x22>
	}



	//Process song MIDI notes
	if(playSong){
    7692:	80 91 00 0b 	lds	r24, 0x0B00
    7696:	88 23       	and	r24, r24
    7698:	09 f4       	brne	.+2      	; 0x769c <ProcessMusic+0xb6>
    769a:	c8 c0       	rjmp	.+400    	; 0x782c <ProcessMusic+0x246>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    769c:	c6 e1       	ldi	r28, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    769e:	80 91 a7 0b 	lds	r24, 0x0BA7
    76a2:	90 91 a8 0b 	lds	r25, 0x0BA8
    76a6:	20 91 ad 0b 	lds	r18, 0x0BAD
    76aa:	30 91 ae 0b 	lds	r19, 0x0BAE
    76ae:	82 17       	cp	r24, r18
    76b0:	93 07       	cpc	r25, r19
    76b2:	09 f0       	breq	.+2      	; 0x76b6 <ProcessMusic+0xd0>
    76b4:	b6 c0       	rjmp	.+364    	; 0x7822 <ProcessMusic+0x23c>

				c1=pgm_read_byte(songPos++);
    76b6:	20 91 b0 0b 	lds	r18, 0x0BB0
    76ba:	30 91 b1 0b 	lds	r19, 0x0BB1
    76be:	b9 01       	movw	r22, r18
    76c0:	6f 5f       	subi	r22, 0xFF	; 255
    76c2:	7f 4f       	sbci	r23, 0xFF	; 255
    76c4:	70 93 b1 0b 	sts	0x0BB1, r23
    76c8:	60 93 b0 0b 	sts	0x0BB0, r22
    76cc:	f9 01       	movw	r30, r18
    76ce:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    76d0:	4f 3f       	cpi	r20, 0xFF	; 255
    76d2:	79 f5       	brne	.+94     	; 0x7732 <ProcessMusic+0x14c>
					//META data type event
					c1=pgm_read_byte(songPos++);
    76d4:	a9 01       	movw	r20, r18
    76d6:	4e 5f       	subi	r20, 0xFE	; 254
    76d8:	5f 4f       	sbci	r21, 0xFF	; 255
    76da:	50 93 b1 0b 	sts	0x0BB1, r21
    76de:	40 93 b0 0b 	sts	0x0BB0, r20
    76e2:	fb 01       	movw	r30, r22
    76e4:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    76e6:	6f 32       	cpi	r22, 0x2F	; 47
    76e8:	19 f4       	brne	.+6      	; 0x76f0 <ProcessMusic+0x10a>
						playSong=false;
    76ea:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    76ee:	99 c0       	rjmp	.+306    	; 0x7822 <ProcessMusic+0x23c>
					}else if(c1==0x6){ //marker
    76f0:	66 30       	cpi	r22, 0x06	; 6
    76f2:	09 f0       	breq	.+2      	; 0x76f6 <ProcessMusic+0x110>
    76f4:	89 c0       	rjmp	.+274    	; 0x7808 <ProcessMusic+0x222>
						c1=pgm_read_byte(songPos++); //read len
    76f6:	fa 01       	movw	r30, r20
    76f8:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    76fa:	c9 01       	movw	r24, r18
    76fc:	04 96       	adiw	r24, 0x04	; 4
    76fe:	90 93 b1 0b 	sts	0x0BB1, r25
    7702:	80 93 b0 0b 	sts	0x0BB0, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7706:	f9 01       	movw	r30, r18
    7708:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    770a:	24 91       	lpm	r18, Z
						if(c2=='S'){ //loop start
    770c:	23 35       	cpi	r18, 0x53	; 83
    770e:	29 f4       	brne	.+10     	; 0x771a <ProcessMusic+0x134>
							loopStart=songPos;
    7710:	90 93 b3 0b 	sts	0x0BB3, r25
    7714:	80 93 b2 0b 	sts	0x0BB2, r24
    7718:	77 c0       	rjmp	.+238    	; 0x7808 <ProcessMusic+0x222>
						}else if(c2=='E'){//loop end
    771a:	25 34       	cpi	r18, 0x45	; 69
    771c:	09 f0       	breq	.+2      	; 0x7720 <ProcessMusic+0x13a>
    771e:	74 c0       	rjmp	.+232    	; 0x7808 <ProcessMusic+0x222>
							songPos=loopStart;
    7720:	80 91 b2 0b 	lds	r24, 0x0BB2
    7724:	90 91 b3 0b 	lds	r25, 0x0BB3
    7728:	90 93 b1 0b 	sts	0x0BB1, r25
    772c:	80 93 b0 0b 	sts	0x0BB0, r24
    7730:	6b c0       	rjmp	.+214    	; 0x7808 <ProcessMusic+0x222>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7732:	47 fd       	sbrc	r20, 7
    7734:	40 93 ab 0b 	sts	0x0BAB, r20
					channel=lastStatus&0x0f;
    7738:	90 91 ab 0b 	lds	r25, 0x0BAB
    773c:	89 2f       	mov	r24, r25
    773e:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7740:	47 ff       	sbrs	r20, 7
    7742:	08 c0       	rjmp	.+16     	; 0x7754 <ProcessMusic+0x16e>
    7744:	2e 5f       	subi	r18, 0xFE	; 254
    7746:	3f 4f       	sbci	r19, 0xFF	; 255
    7748:	30 93 b1 0b 	sts	0x0BB1, r19
    774c:	20 93 b0 0b 	sts	0x0BB0, r18
    7750:	fb 01       	movw	r30, r22
    7752:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7754:	90 7f       	andi	r25, 0xF0	; 240
    7756:	90 3b       	cpi	r25, 0xB0	; 176
    7758:	e9 f0       	breq	.+58     	; 0x7794 <ProcessMusic+0x1ae>
    775a:	90 3c       	cpi	r25, 0xC0	; 192
    775c:	09 f4       	brne	.+2      	; 0x7760 <ProcessMusic+0x17a>
    775e:	4e c0       	rjmp	.+156    	; 0x77fc <ProcessMusic+0x216>
    7760:	90 39       	cpi	r25, 0x90	; 144
    7762:	09 f0       	breq	.+2      	; 0x7766 <ProcessMusic+0x180>
    7764:	51 c0       	rjmp	.+162    	; 0x7808 <ProcessMusic+0x222>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7766:	e0 91 b0 0b 	lds	r30, 0x0BB0
    776a:	f0 91 b1 0b 	lds	r31, 0x0BB1
    776e:	9f 01       	movw	r18, r30
    7770:	2f 5f       	subi	r18, 0xFF	; 255
    7772:	3f 4f       	sbci	r19, 0xFF	; 255
    7774:	30 93 b1 0b 	sts	0x0BB1, r19
    7778:	20 93 b0 0b 	sts	0x0BB0, r18
    777c:	24 91       	lpm	r18, Z
    777e:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7780:	c8 9f       	mul	r28, r24
    7782:	d0 01       	movw	r26, r0
    7784:	11 24       	eor	r1, r1
    7786:	a7 5c       	subi	r26, 0xC7	; 199
    7788:	b4 4f       	sbci	r27, 0xF4	; 244
    778a:	1e 96       	adiw	r26, 0x0e	; 14
    778c:	6c 91       	ld	r22, X
    778e:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
    7792:	3a c0       	rjmp	.+116    	; 0x7808 <ProcessMusic+0x222>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7794:	e0 91 b0 0b 	lds	r30, 0x0BB0
    7798:	f0 91 b1 0b 	lds	r31, 0x0BB1
    779c:	9f 01       	movw	r18, r30
    779e:	2f 5f       	subi	r18, 0xFF	; 255
    77a0:	3f 4f       	sbci	r19, 0xFF	; 255
    77a2:	30 93 b1 0b 	sts	0x0BB1, r19
    77a6:	20 93 b0 0b 	sts	0x0BB0, r18
    77aa:	94 91       	lpm	r25, Z
						
							if(c1==CONTROLER_VOL){
    77ac:	47 30       	cpi	r20, 0x07	; 7
    77ae:	41 f4       	brne	.+16     	; 0x77c0 <ProcessMusic+0x1da>
								tracks[channel].trackVol=c2<<1;
    77b0:	c8 9f       	mul	r28, r24
    77b2:	f0 01       	movw	r30, r0
    77b4:	11 24       	eor	r1, r1
    77b6:	e7 5c       	subi	r30, 0xC7	; 199
    77b8:	f4 4f       	sbci	r31, 0xF4	; 244
    77ba:	99 0f       	add	r25, r25
    77bc:	92 87       	std	Z+10, r25	; 0x0a
    77be:	24 c0       	rjmp	.+72     	; 0x7808 <ProcessMusic+0x222>
							}else if(c1==CONTROLER_EXPRESSION){
    77c0:	4b 30       	cpi	r20, 0x0B	; 11
    77c2:	41 f4       	brne	.+16     	; 0x77d4 <ProcessMusic+0x1ee>
								tracks[channel].expressionVol=c2<<1;
    77c4:	c8 9f       	mul	r28, r24
    77c6:	f0 01       	movw	r30, r0
    77c8:	11 24       	eor	r1, r1
    77ca:	e7 5c       	subi	r30, 0xC7	; 199
    77cc:	f4 4f       	sbci	r31, 0xF4	; 244
    77ce:	99 0f       	add	r25, r25
    77d0:	91 87       	std	Z+9, r25	; 0x09
    77d2:	1a c0       	rjmp	.+52     	; 0x7808 <ProcessMusic+0x222>
							}else if(c1==CONTROLER_TREMOLO){
    77d4:	4c 35       	cpi	r20, 0x5C	; 92
    77d6:	41 f4       	brne	.+16     	; 0x77e8 <ProcessMusic+0x202>
								tracks[channel].tremoloLevel=c2<<1;
    77d8:	c8 9f       	mul	r28, r24
    77da:	f0 01       	movw	r30, r0
    77dc:	11 24       	eor	r1, r1
    77de:	e7 5c       	subi	r30, 0xC7	; 199
    77e0:	f4 4f       	sbci	r31, 0xF4	; 244
    77e2:	99 0f       	add	r25, r25
    77e4:	97 83       	std	Z+7, r25	; 0x07
    77e6:	10 c0       	rjmp	.+32     	; 0x7808 <ProcessMusic+0x222>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    77e8:	44 36       	cpi	r20, 0x64	; 100
    77ea:	71 f4       	brne	.+28     	; 0x7808 <ProcessMusic+0x222>
								tracks[channel].tremoloRate=c2<<1;
    77ec:	c8 9f       	mul	r28, r24
    77ee:	f0 01       	movw	r30, r0
    77f0:	11 24       	eor	r1, r1
    77f2:	e7 5c       	subi	r30, 0xC7	; 199
    77f4:	f4 4f       	sbci	r31, 0xF4	; 244
    77f6:	99 0f       	add	r25, r25
    77f8:	90 87       	std	Z+8, r25	; 0x08
    77fa:	06 c0       	rjmp	.+12     	; 0x7808 <ProcessMusic+0x222>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    77fc:	c8 9f       	mul	r28, r24
    77fe:	f0 01       	movw	r30, r0
    7800:	11 24       	eor	r1, r1
    7802:	e7 5c       	subi	r30, 0xC7	; 199
    7804:	f4 4f       	sbci	r31, 0xF4	; 244
    7806:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7808:	80 eb       	ldi	r24, 0xB0	; 176
    780a:	9b e0       	ldi	r25, 0x0B	; 11
    780c:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <ReadVarLen>
    7810:	90 93 ae 0b 	sts	0x0BAE, r25
    7814:	80 93 ad 0b 	sts	0x0BAD, r24
				currDeltaTime=0;
    7818:	10 92 a8 0b 	sts	0x0BA8, r1
    781c:	10 92 a7 0b 	sts	0x0BA7, r1
    7820:	3e cf       	rjmp	.-388    	; 0x769e <ProcessMusic+0xb8>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7822:	01 96       	adiw	r24, 0x01	; 1
    7824:	90 93 a8 0b 	sts	0x0BA8, r25
    7828:	80 93 a7 0b 	sts	0x0BA7, r24
    782c:	92 e0       	ldi	r25, 0x02	; 2
    782e:	c9 2e       	mov	r12, r25
    7830:	9b e0       	ldi	r25, 0x0B	; 11
    7832:	d9 2e       	mov	r13, r25
	}

#endif


void ProcessMusic(void){
    7834:	c9 e3       	ldi	r28, 0x39	; 57
    7836:	db e0       	ldi	r29, 0x0B	; 11
    7838:	e1 2c       	mov	r14, r1
    783a:	f1 2c       	mov	r15, r1
    783c:	91 2c       	mov	r9, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    783e:	aa 24       	eor	r10, r10
    7840:	aa 94       	dec	r10
    7842:	b1 2c       	mov	r11, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    7844:	88 81       	ld	r24, Y
    7846:	86 fd       	sbrc	r24, 6
    7848:	4d c0       	rjmp	.+154    	; 0x78e4 <ProcessMusic+0x2fe>

			if(track->patchCommandStreamPos!=NULL && 
    784a:	8c 89       	ldd	r24, Y+20	; 0x14
    784c:	9d 89       	ldd	r25, Y+21	; 0x15
    784e:	87 01       	movw	r16, r14
    7850:	07 5c       	subi	r16, 0xC7	; 199
    7852:	14 4f       	sbci	r17, 0xF4	; 244
    7854:	89 2b       	or	r24, r25
    7856:	09 f4       	brne	.+2      	; 0x785a <ProcessMusic+0x274>
    7858:	3e c0       	rjmp	.+124    	; 0x78d6 <ProcessMusic+0x2f0>
    785a:	d8 01       	movw	r26, r16
    785c:	52 96       	adiw	r26, 0x12	; 18
    785e:	9c 91       	ld	r25, X
    7860:	52 97       	sbiw	r26, 0x12	; 18
    7862:	51 96       	adiw	r26, 0x11	; 17
    7864:	8c 91       	ld	r24, X
    7866:	98 17       	cp	r25, r24
    7868:	08 f4       	brcc	.+2      	; 0x786c <ProcessMusic+0x286>
    786a:	35 c0       	rjmp	.+106    	; 0x78d6 <ProcessMusic+0x2f0>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    786c:	f8 01       	movw	r30, r16
    786e:	92 89       	ldd	r25, Z+18	; 0x12
    7870:	81 89       	ldd	r24, Z+17	; 0x11
    7872:	98 13       	cpse	r25, r24
    7874:	30 c0       	rjmp	.+96     	; 0x78d6 <ProcessMusic+0x2f0>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    7876:	ec 89       	ldd	r30, Y+20	; 0x14
    7878:	fd 89       	ldd	r31, Y+21	; 0x15
    787a:	af 01       	movw	r20, r30
    787c:	4f 5f       	subi	r20, 0xFF	; 255
    787e:	5f 4f       	sbci	r21, 0xFF	; 255
    7880:	5d 8b       	std	Y+21, r21	; 0x15
    7882:	4c 8b       	std	Y+20, r20	; 0x14
    7884:	24 91       	lpm	r18, Z
					if(c1==0xff){					
    7886:	2f 3f       	cpi	r18, 0xFF	; 255
    7888:	31 f4       	brne	.+12     	; 0x7896 <ProcessMusic+0x2b0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    788a:	88 81       	ld	r24, Y
    788c:	8f 77       	andi	r24, 0x7F	; 127
    788e:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    7890:	1d 8a       	std	Y+21, r1	; 0x15
    7892:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    7894:	20 c0       	rjmp	.+64     	; 0x78d6 <ProcessMusic+0x2f0>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    7896:	cf 01       	movw	r24, r30
    7898:	02 96       	adiw	r24, 0x02	; 2
    789a:	9d 8b       	std	Y+21, r25	; 0x15
    789c:	8c 8b       	std	Y+20, r24	; 0x14
    789e:	fa 01       	movw	r30, r20
    78a0:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    78a2:	e2 2f       	mov	r30, r18
    78a4:	f0 e0       	ldi	r31, 0x00	; 0
    78a6:	ee 0f       	add	r30, r30
    78a8:	ff 1f       	adc	r31, r31
    78aa:	e0 53       	subi	r30, 0x30	; 48
    78ac:	ff 4f       	sbci	r31, 0xFF	; 255
    78ae:	25 91       	lpm	r18, Z+
    78b0:	34 91       	lpm	r19, Z
    78b2:	69 2d       	mov	r22, r9
    78b4:	ce 01       	movw	r24, r28
    78b6:	f9 01       	movw	r30, r18
    78b8:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    78ba:	ec 89       	ldd	r30, Y+20	; 0x14
    78bc:	fd 89       	ldd	r31, Y+21	; 0x15
    78be:	cf 01       	movw	r24, r30
    78c0:	01 96       	adiw	r24, 0x01	; 1
    78c2:	9d 8b       	std	Y+21, r25	; 0x15
    78c4:	8c 8b       	std	Y+20, r24	; 0x14
    78c6:	e4 91       	lpm	r30, Z
    78c8:	d8 01       	movw	r26, r16
    78ca:	51 96       	adiw	r26, 0x11	; 17
    78cc:	ec 93       	st	X, r30
    78ce:	51 97       	sbiw	r26, 0x11	; 17
					
					track->patchCurrDeltaTime=0;	
    78d0:	52 96       	adiw	r26, 0x12	; 18
    78d2:	1c 92       	st	X, r1
    78d4:	cb cf       	rjmp	.-106    	; 0x786c <ProcessMusic+0x286>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    78d6:	d8 01       	movw	r26, r16
    78d8:	52 96       	adiw	r26, 0x12	; 18
    78da:	8c 91       	ld	r24, X
    78dc:	52 97       	sbiw	r26, 0x12	; 18
    78de:	8f 5f       	subi	r24, 0xFF	; 255
    78e0:	52 96       	adiw	r26, 0x12	; 18
    78e2:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    78e4:	88 81       	ld	r24, Y
    78e6:	85 ff       	sbrs	r24, 5
    78e8:	74 c0       	rjmp	.+232    	; 0x79d2 <ProcessMusic+0x3ec>
    78ea:	d7 01       	movw	r26, r14
    78ec:	a7 5c       	subi	r26, 0xC7	; 199
    78ee:	b4 4f       	sbci	r27, 0xF4	; 244
		
			if(track->patchPlayingTime<0xff){
    78f0:	53 96       	adiw	r26, 0x13	; 19
    78f2:	9c 91       	ld	r25, X
    78f4:	53 97       	sbiw	r26, 0x13	; 19
    78f6:	9f 3f       	cpi	r25, 0xFF	; 255
    78f8:	21 f0       	breq	.+8      	; 0x7902 <ProcessMusic+0x31c>
				track->patchPlayingTime++;
    78fa:	9f 5f       	subi	r25, 0xFF	; 255
    78fc:	53 96       	adiw	r26, 0x13	; 19
    78fe:	9c 93       	st	X, r25
    7900:	53 97       	sbiw	r26, 0x13	; 19
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7902:	87 fd       	sbrc	r24, 7
    7904:	04 c0       	rjmp	.+8      	; 0x790e <ProcessMusic+0x328>
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7906:	1a 96       	adiw	r26, 0x0a	; 10
    7908:	8c 91       	ld	r24, X
    790a:	1a 97       	sbiw	r26, 0x0a	; 10
    790c:	01 c0       	rjmp	.+2      	; 0x7910 <ProcessMusic+0x32a>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    790e:	8f ef       	ldi	r24, 0xFF	; 255
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7910:	1b 96       	adiw	r26, 0x0b	; 11
    7912:	2c 91       	ld	r18, X
    7914:	1b 97       	sbiw	r26, 0x0b	; 11
    7916:	16 96       	adiw	r26, 0x06	; 6
    7918:	6c 91       	ld	r22, X
    791a:	16 97       	sbiw	r26, 0x06	; 6
    791c:	22 23       	and	r18, r18
    791e:	09 f4       	brne	.+2      	; 0x7922 <ProcessMusic+0x33c>
    7920:	4f c0       	rjmp	.+158    	; 0x79c0 <ProcessMusic+0x3da>
    7922:	1c 96       	adiw	r26, 0x0c	; 12
    7924:	5c 91       	ld	r21, X
    7926:	1c 97       	sbiw	r26, 0x0c	; 12
    7928:	55 23       	and	r21, r21
    792a:	09 f4       	brne	.+2      	; 0x792e <ProcessMusic+0x348>
    792c:	49 c0       	rjmp	.+146    	; 0x79c0 <ProcessMusic+0x3da>
    792e:	88 23       	and	r24, r24
    7930:	09 f4       	brne	.+2      	; 0x7934 <ProcessMusic+0x34e>
    7932:	46 c0       	rjmp	.+140    	; 0x79c0 <ProcessMusic+0x3da>
    7934:	40 91 ac 0b 	lds	r20, 0x0BAC
    7938:	44 23       	and	r20, r20
    793a:	09 f4       	brne	.+2      	; 0x793e <ProcessMusic+0x358>
    793c:	41 c0       	rjmp	.+130    	; 0x79c0 <ProcessMusic+0x3da>

				uVol=(track->noteVol*trackVol)+0x100;
    793e:	28 9f       	mul	r18, r24
    7940:	90 01       	movw	r18, r0
    7942:	11 24       	eor	r1, r1
    7944:	33 95       	inc	r19
				uVol>>=8;
    7946:	23 2f       	mov	r18, r19
    7948:	33 27       	eor	r19, r19
				uVol=(uVol*track->envelopeVol)+0x100;
    794a:	52 9f       	mul	r21, r18
    794c:	c0 01       	movw	r24, r0
    794e:	53 9f       	mul	r21, r19
    7950:	90 0d       	add	r25, r0
    7952:	11 24       	eor	r1, r1
    7954:	93 95       	inc	r25
				uVol>>=8;
    7956:	89 2f       	mov	r24, r25
    7958:	99 27       	eor	r25, r25
				uVol=(uVol*track->expressionVol)+0x100;
    795a:	19 96       	adiw	r26, 0x09	; 9
    795c:	5c 91       	ld	r21, X
    795e:	19 97       	sbiw	r26, 0x09	; 9
    7960:	58 9f       	mul	r21, r24
    7962:	90 01       	movw	r18, r0
    7964:	59 9f       	mul	r21, r25
    7966:	30 0d       	add	r19, r0
    7968:	11 24       	eor	r1, r1
    796a:	33 95       	inc	r19
				uVol>>=8;
    796c:	23 2f       	mov	r18, r19
    796e:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    7970:	42 9f       	mul	r20, r18
    7972:	c0 01       	movw	r24, r0
    7974:	43 9f       	mul	r20, r19
    7976:	90 0d       	add	r25, r0
    7978:	11 24       	eor	r1, r1
    797a:	93 95       	inc	r25
				uVol>>=8;
    797c:	89 2f       	mov	r24, r25
    797e:	99 27       	eor	r25, r25

				if(track->tremoloLevel>0){					
    7980:	17 96       	adiw	r26, 0x07	; 7
    7982:	2c 91       	ld	r18, X
    7984:	17 97       	sbiw	r26, 0x07	; 7
    7986:	22 23       	and	r18, r18
    7988:	e9 f0       	breq	.+58     	; 0x79c4 <ProcessMusic+0x3de>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    798a:	e6 2f       	mov	r30, r22
    798c:	f0 e0       	ldi	r31, 0x00	; 0
    798e:	e0 50       	subi	r30, 0x00	; 0
    7990:	f3 48       	sbci	r31, 0x83	; 131
    7992:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7994:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7996:	2e 9f       	mul	r18, r30
    7998:	f0 01       	movw	r30, r0
    799a:	11 24       	eor	r1, r1
    799c:	f3 95       	inc	r31
					tVol>>=8;
    799e:	ef 2f       	mov	r30, r31
    79a0:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    79a2:	a5 01       	movw	r20, r10
    79a4:	4e 1b       	sub	r20, r30
    79a6:	5f 0b       	sbc	r21, r31
    79a8:	48 9f       	mul	r20, r24
    79aa:	90 01       	movw	r18, r0
    79ac:	49 9f       	mul	r20, r25
    79ae:	30 0d       	add	r19, r0
    79b0:	58 9f       	mul	r21, r24
    79b2:	30 0d       	add	r19, r0
    79b4:	11 24       	eor	r1, r1
    79b6:	c9 01       	movw	r24, r18
    79b8:	93 95       	inc	r25
					uVol>>=8;
    79ba:	89 2f       	mov	r24, r25
    79bc:	99 27       	eor	r25, r25
    79be:	02 c0       	rjmp	.+4      	; 0x79c4 <ProcessMusic+0x3de>
				}

			
			}else{
				uVol=0;
    79c0:	80 e0       	ldi	r24, 0x00	; 0
    79c2:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    79c4:	18 96       	adiw	r26, 0x08	; 8
    79c6:	2c 91       	ld	r18, X
    79c8:	18 97       	sbiw	r26, 0x08	; 8
    79ca:	26 0f       	add	r18, r22
    79cc:	16 96       	adiw	r26, 0x06	; 6
    79ce:	2c 93       	st	X, r18
    79d0:	02 c0       	rjmp	.+4      	; 0x79d6 <ProcessMusic+0x3f0>

		}else{
			uVol=0;
    79d2:	80 e0       	ldi	r24, 0x00	; 0
    79d4:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    79d6:	f6 01       	movw	r30, r12
    79d8:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    79da:	93 94       	inc	r9
    79dc:	f6 e1       	ldi	r31, 0x16	; 22
    79de:	ef 0e       	add	r14, r31
    79e0:	f1 1c       	adc	r15, r1
    79e2:	66 96       	adiw	r28, 0x16	; 22
    79e4:	86 e0       	ldi	r24, 0x06	; 6
    79e6:	c8 0e       	add	r12, r24
    79e8:	d1 1c       	adc	r13, r1
    79ea:	ae e6       	ldi	r26, 0x6E	; 110
    79ec:	ea 16       	cp	r14, r26
    79ee:	f1 04       	cpc	r15, r1
    79f0:	09 f0       	breq	.+2      	; 0x79f4 <ProcessMusic+0x40e>
    79f2:	28 cf       	rjmp	.-432    	; 0x7844 <ProcessMusic+0x25e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    79f4:	df 91       	pop	r29
    79f6:	cf 91       	pop	r28
    79f8:	1f 91       	pop	r17
    79fa:	0f 91       	pop	r16
    79fc:	ff 90       	pop	r15
    79fe:	ef 90       	pop	r14
    7a00:	df 90       	pop	r13
    7a02:	cf 90       	pop	r12
    7a04:	bf 90       	pop	r11
    7a06:	af 90       	pop	r10
    7a08:	9f 90       	pop	r9
    7a0a:	08 95       	ret

00007a0c <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7a0c:	80 93 ac 0b 	sts	0x0BAC, r24
    7a10:	08 95       	ret

00007a12 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7a12:	99 27       	eor	r25, r25
	clr r23
    7a14:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7a16:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7a18:	09 f4       	brne	.+2      	; 0x7a1c <set_note_waves>
		ret
    7a1a:	08 95       	ret

00007a1c <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7a1c:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7a1e:	fb e7       	ldi	r31, 0x7B	; 123
	lsl r22
    7a20:	66 0f       	add	r22, r22
	rol r23
    7a22:	77 1f       	adc	r23, r23
	add ZL,r22
    7a24:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7a26:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7a28:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7a2a:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7a2c:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7a2e:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7a30:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7a32:	28 9f       	mul	r18, r24
	add ZL,r0
    7a34:	e0 0d       	add	r30, r0
	adc ZH,r1
    7a36:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7a38:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7a3a:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7a3c:	11 24       	eor	r1, r1
	

	ret
    7a3e:	08 95       	ret

00007a40 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7a40:	99 27       	eor	r25, r25
	clr r23
    7a42:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7a44:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7a46:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7a48:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7a4a:	28 9f       	mul	r18, r24
	add ZL,r0
    7a4c:	e0 0d       	add	r30, r0
	adc ZH,r1
    7a4e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7a50:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7a52:	31 f4       	brne	.+12     	; 0x7a60 <smw1>
	lds r22,tr4_params
    7a54:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    7a58:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7a5a:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    7a5e:	0b c0       	rjmp	.+22     	; 0x7a76 <esmw>

00007a60 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7a60:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7a62:	31 f4       	brne	.+12     	; 0x7a70 <smw2>
	lds r22,tr4_params
    7a64:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    7a68:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7a6a:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    7a6e:	03 c0       	rjmp	.+6      	; 0x7a76 <esmw>

00007a70 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7a70:	7d e7       	ldi	r23, 0x7D	; 125
	add r23,r22
    7a72:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7a74:	75 83       	std	Z+5, r23	; 0x05

00007a76 <esmw>:

esmw:
	clr r1	
    7a76:	11 24       	eor	r1, r1
	ret
    7a78:	08 95       	ret
	...

00007b00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7b00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7b02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    7b06:	08 95       	ret

00007b08 <steptable>:
    7b08:	22 00       	.word	0x0022	; ????
    7b0a:	24 00       	.word	0x0024	; ????
    7b0c:	26 00       	.word	0x0026	; ????
    7b0e:	28 00       	.word	0x0028	; ????
    7b10:	2b 00       	.word	0x002b	; ????
    7b12:	2d 00       	.word	0x002d	; ????
    7b14:	30 00       	.word	0x0030	; ????
    7b16:	33 00       	.word	0x0033	; ????
    7b18:	36 00       	.word	0x0036	; ????
    7b1a:	39 00       	.word	0x0039	; ????
    7b1c:	3d 00       	.word	0x003d	; ????
    7b1e:	40 00       	.word	0x0040	; ????
    7b20:	44 00       	.word	0x0044	; ????
    7b22:	48 00       	.word	0x0048	; ????
    7b24:	4c 00       	.word	0x004c	; ????
    7b26:	51 00       	.word	0x0051	; ????
    7b28:	56 00       	.word	0x0056	; ????
    7b2a:	5b 00       	.word	0x005b	; ????
    7b2c:	60 00       	.word	0x0060	; ????
    7b2e:	66 00       	.word	0x0066	; ????
    7b30:	6c 00       	.word	0x006c	; ????
    7b32:	73 00       	.word	0x0073	; ????
    7b34:	79 00       	.word	0x0079	; ????
    7b36:	81 00       	.word	0x0081	; ????
    7b38:	88 00       	.word	0x0088	; ????
    7b3a:	90 00       	.word	0x0090	; ????
    7b3c:	99 00       	.word	0x0099	; ????
    7b3e:	a2 00       	.word	0x00a2	; ????
    7b40:	ac 00       	.word	0x00ac	; ????
    7b42:	b6 00       	.word	0x00b6	; ????
    7b44:	c1 00       	.word	0x00c1	; ????
    7b46:	cc 00       	.word	0x00cc	; ????
    7b48:	d8 00       	.word	0x00d8	; ????
    7b4a:	e5 00       	.word	0x00e5	; ????
    7b4c:	f3 00       	.word	0x00f3	; ????
    7b4e:	01 01       	movw	r0, r2
    7b50:	10 01       	movw	r2, r0
    7b52:	21 01       	movw	r4, r2
    7b54:	32 01       	movw	r6, r4
    7b56:	44 01       	movw	r8, r8
    7b58:	57 01       	movw	r10, r14
    7b5a:	6c 01       	movw	r12, r24
    7b5c:	81 01       	movw	r16, r2
    7b5e:	98 01       	movw	r18, r16
    7b60:	b0 01       	movw	r22, r0
    7b62:	ca 01       	movw	r24, r20
    7b64:	e5 01       	movw	r28, r10
    7b66:	02 02       	muls	r16, r18
    7b68:	21 02       	muls	r18, r17
    7b6a:	41 02       	muls	r20, r17
    7b6c:	64 02       	muls	r22, r20
    7b6e:	88 02       	muls	r24, r24
    7b70:	ae 02       	muls	r26, r30
    7b72:	d7 02       	muls	r29, r23
    7b74:	03 03       	mulsu	r16, r19
    7b76:	30 03       	mulsu	r19, r16
    7b78:	61 03       	mulsu	r22, r17
    7b7a:	94 03       	fmuls	r17, r20
    7b7c:	cb 03       	fmulsu	r20, r19
    7b7e:	05 04       	cpc	r0, r5
    7b80:	42 04       	cpc	r4, r2
    7b82:	83 04       	cpc	r8, r3
    7b84:	c7 04       	cpc	r12, r7
    7b86:	10 05       	cpc	r17, r0
    7b88:	5d 05       	cpc	r21, r13
    7b8a:	af 05       	cpc	r26, r15
    7b8c:	05 06       	cpc	r0, r21
    7b8e:	61 06       	cpc	r6, r17
    7b90:	c2 06       	cpc	r12, r18
    7b92:	29 07       	cpc	r18, r25
    7b94:	96 07       	cpc	r25, r22
    7b96:	09 08       	sbc	r0, r9
    7b98:	83 08       	sbc	r8, r3
    7b9a:	05 09       	sbc	r16, r5
    7b9c:	8e 09       	sbc	r24, r14
    7b9e:	20 0a       	sbc	r2, r16
    7ba0:	ba 0a       	sbc	r11, r26
    7ba2:	5d 0b       	sbc	r21, r29
    7ba4:	0a 0c       	add	r0, r10
    7ba6:	c1 0c       	add	r12, r1
    7ba8:	84 0d       	add	r24, r4
    7baa:	51 0e       	add	r5, r17
    7bac:	2b 0f       	add	r18, r27
    7bae:	12 10       	cpse	r1, r2
    7bb0:	07 11       	cpse	r16, r7
    7bb2:	0a 12       	cpse	r0, r26
    7bb4:	1d 13       	cpse	r17, r29
    7bb6:	40 14       	cp	r4, r0
    7bb8:	74 15       	cp	r23, r4
    7bba:	ba 16       	cp	r11, r26
    7bbc:	14 18       	sub	r1, r4
    7bbe:	83 19       	sub	r24, r3
    7bc0:	07 1b       	sub	r16, r23
    7bc2:	a3 1c       	adc	r10, r3
    7bc4:	57 1e       	adc	r5, r23
    7bc6:	24 20       	and	r2, r4
    7bc8:	0e 22       	and	r0, r30
    7bca:	14 24       	eor	r1, r4
    7bcc:	39 26       	eor	r3, r25
    7bce:	7f 28       	or	r7, r15
    7bd0:	e8 2a       	or	r14, r24
    7bd2:	75 2d       	mov	r23, r5
    7bd4:	29 30       	cpi	r18, 0x09	; 9
    7bd6:	06 33       	cpi	r16, 0x36	; 54
    7bd8:	0f 36       	cpi	r16, 0x6F	; 111
    7bda:	45 39       	cpi	r20, 0x95	; 149
    7bdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7bde:	49 40       	sbci	r20, 0x09	; 9
    7be0:	1b 44       	sbci	r17, 0x4B	; 75
    7be2:	28 48       	sbci	r18, 0x88	; 136
    7be4:	73 4c       	sbci	r23, 0xC3	; 195
    7be6:	fe 50       	subi	r31, 0x0E	; 14
    7be8:	cf 55       	subi	r28, 0x5F	; 95
    7bea:	ea 5a       	subi	r30, 0xAA	; 170
    7bec:	51 60       	ori	r21, 0x01	; 1
    7bee:	0c 66       	ori	r16, 0x6C	; 108
    7bf0:	1d 6c       	ori	r17, 0xCD	; 205
    7bf2:	8b 72       	andi	r24, 0x2B	; 43
    7bf4:	5a 79       	andi	r21, 0x9A	; 154
    7bf6:	92 80       	ldd	r9, Z+2	; 0x02
    7bf8:	37 88       	ldd	r3, Z+23	; 0x17
    7bfa:	50 90 e5 98 	lds	r5, 0x98E5
    7bfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7c00:	9f ab       	std	Y+55, r25	; 0x37
    7c02:	d3 b5       	in	r29, 0x23	; 35
    7c04:	a3 c0       	rjmp	.+326    	; 0x7d4c <waves+0x4c>
	...

00007d00 <waves>:
    7d00:	00 03       	mulsu	r16, r16
    7d02:	06 09       	sbc	r16, r6
    7d04:	0c 10       	cpse	r0, r12
    7d06:	13 16       	cp	r1, r19
    7d08:	19 1c       	adc	r1, r9
    7d0a:	1f 22       	and	r1, r31
    7d0c:	25 28       	or	r2, r5
    7d0e:	2b 2e       	mov	r2, r27
    7d10:	31 33       	cpi	r19, 0x31	; 49
    7d12:	36 39       	cpi	r19, 0x96	; 150
    7d14:	3c 3f       	cpi	r19, 0xFC	; 252
    7d16:	41 44       	sbci	r20, 0x41	; 65
    7d18:	47 49       	sbci	r20, 0x97	; 151
    7d1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7d1c:	51 53       	subi	r21, 0x31	; 49
    7d1e:	55 58       	subi	r21, 0x85	; 133
    7d20:	5a 5c       	subi	r21, 0xCA	; 202
    7d22:	5e 60       	ori	r21, 0x0E	; 14
    7d24:	62 64       	ori	r22, 0x42	; 66
    7d26:	66 68       	ori	r22, 0x86	; 134
    7d28:	6a 6b       	ori	r22, 0xBA	; 186
    7d2a:	6d 6f       	ori	r22, 0xFD	; 253
    7d2c:	70 71       	andi	r23, 0x10	; 16
    7d2e:	73 74       	andi	r23, 0x43	; 67
    7d30:	75 76       	andi	r23, 0x65	; 101
    7d32:	78 79       	andi	r23, 0x98	; 152
    7d34:	7a 7a       	andi	r23, 0xAA	; 170
    7d36:	7b 7c       	andi	r23, 0xCB	; 203
    7d38:	7d 7d       	andi	r23, 0xDD	; 221
    7d3a:	7e 7e       	andi	r23, 0xEE	; 238
    7d3c:	7e 7f       	andi	r23, 0xFE	; 254
    7d3e:	7f 7f       	andi	r23, 0xFF	; 255
    7d40:	7f 7f       	andi	r23, 0xFF	; 255
    7d42:	7f 7f       	andi	r23, 0xFF	; 255
    7d44:	7e 7e       	andi	r23, 0xEE	; 238
    7d46:	7e 7d       	andi	r23, 0xDE	; 222
    7d48:	7d 7c       	andi	r23, 0xCD	; 205
    7d4a:	7b 7a       	andi	r23, 0xAB	; 171
    7d4c:	7a 79       	andi	r23, 0x9A	; 154
    7d4e:	78 76       	andi	r23, 0x68	; 104
    7d50:	75 74       	andi	r23, 0x45	; 69
    7d52:	73 71       	andi	r23, 0x13	; 19
    7d54:	70 6f       	ori	r23, 0xF0	; 240
    7d56:	6d 6b       	ori	r22, 0xBD	; 189
    7d58:	6a 68       	ori	r22, 0x8A	; 138
    7d5a:	66 64       	ori	r22, 0x46	; 70
    7d5c:	62 60       	ori	r22, 0x02	; 2
    7d5e:	5e 5c       	subi	r21, 0xCE	; 206
    7d60:	5a 58       	subi	r21, 0x8A	; 138
    7d62:	55 53       	subi	r21, 0x35	; 53
    7d64:	51 4e       	sbci	r21, 0xE1	; 225
    7d66:	4c 49       	sbci	r20, 0x9C	; 156
    7d68:	47 44       	sbci	r20, 0x47	; 71
    7d6a:	41 3f       	cpi	r20, 0xF1	; 241
    7d6c:	3c 39       	cpi	r19, 0x9C	; 156
    7d6e:	36 33       	cpi	r19, 0x36	; 54
    7d70:	31 2e       	mov	r3, r17
    7d72:	2b 28       	or	r2, r11
    7d74:	25 22       	and	r2, r21
    7d76:	1f 1c       	adc	r1, r15
    7d78:	19 16       	cp	r1, r25
    7d7a:	13 10       	cpse	r1, r3
    7d7c:	0c 09       	sbc	r16, r12
    7d7e:	06 03       	mulsu	r16, r22
    7d80:	00 fd       	sbrc	r16, 0
    7d82:	fa f7       	brpl	.-2      	; 0x7d82 <waves+0x82>
    7d84:	f4 f0       	brlt	.+60     	; 0x7dc2 <waves+0xc2>
    7d86:	ed ea       	ldi	r30, 0xAD	; 173
    7d88:	e7 e4       	ldi	r30, 0x47	; 71
    7d8a:	e1 de       	rcall	.-574    	; 0x7b4e <steptable+0x46>
    7d8c:	db d8       	rcall	.-3658   	; 0x6f44 <ch4_end+0x7c>
    7d8e:	d5 d2       	rcall	.+1450   	; 0x833a <waves+0x63a>
    7d90:	cf cd       	rjmp	.-1122   	; 0x7930 <ProcessMusic+0x34a>
    7d92:	ca c7       	rjmp	.+3988   	; 0x8d28 <LBPrintStr+0x24>
    7d94:	c4 c1       	rjmp	.+904    	; 0x811e <waves+0x41e>
    7d96:	bf bc       	out	0x2f, r11	; 47
    7d98:	b9 b7       	in	r27, 0x39	; 57
    7d9a:	b4 b2       	in	r11, 0x14	; 20
    7d9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7d9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7da0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7da2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7da4:	9e 9c       	mul	r9, r14
    7da6:	9a 98       	cbi	0x13, 2	; 19
    7da8:	96 95       	lsr	r25
    7daa:	93 91       	.word	0x9193	; ????
    7dac:	90 8f       	std	Z+24, r25	; 0x18
    7dae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7db0:	8b 8a       	std	Y+19, r8	; 0x13
    7db2:	88 87       	std	Y+8, r24	; 0x08
    7db4:	86 86       	std	Z+14, r8	; 0x0e
    7db6:	85 84       	ldd	r8, Z+13	; 0x0d
    7db8:	83 83       	std	Z+3, r24	; 0x03
    7dba:	82 82       	std	Z+2, r8	; 0x02
    7dbc:	82 81       	ldd	r24, Z+2	; 0x02
    7dbe:	81 81       	ldd	r24, Z+1	; 0x01
    7dc0:	81 81       	ldd	r24, Z+1	; 0x01
    7dc2:	81 81       	ldd	r24, Z+1	; 0x01
    7dc4:	82 82       	std	Z+2, r8	; 0x02
    7dc6:	82 83       	std	Z+2, r24	; 0x02
    7dc8:	83 84       	ldd	r8, Z+11	; 0x0b
    7dca:	85 86       	std	Z+13, r8	; 0x0d
    7dcc:	86 87       	std	Z+14, r24	; 0x0e
    7dce:	88 8a       	std	Y+16, r8	; 0x10
    7dd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    7dd4:	90 91 93 95 	lds	r25, 0x9593
    7dd8:	96 98       	cbi	0x12, 6	; 18
    7dda:	9a 9c       	mul	r9, r10
    7ddc:	9e a0       	ldd	r9, Y+38	; 0x26
    7dde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7de0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7de2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7de4:	af b2       	in	r10, 0x1f	; 31
    7de6:	b4 b7       	in	r27, 0x34	; 52
    7de8:	b9 bc       	out	0x29, r11	; 41
    7dea:	bf c1       	rjmp	.+894    	; 0x816a <waves+0x46a>
    7dec:	c4 c7       	rjmp	.+3976   	; 0x8d76 <LBCollides+0x10>
    7dee:	ca cd       	rjmp	.-1132   	; 0x7984 <ProcessMusic+0x39e>
    7df0:	cf d2       	rcall	.+1438   	; 0x8390 <waves+0x690>
    7df2:	d5 d8       	rcall	.-3670   	; 0x6f9e <SetTile+0x18>
    7df4:	db de       	rcall	.-586    	; 0x7bac <steptable+0xa4>
    7df6:	e1 e4       	ldi	r30, 0x41	; 65
    7df8:	e7 ea       	ldi	r30, 0xA7	; 167
    7dfa:	ed f0       	brhs	.+58     	; 0x7e36 <waves+0x136>
    7dfc:	f4 f7       	brge	.-4      	; 0x7dfa <waves+0xfa>
    7dfe:	fa fd       	.word	0xfdfa	; ????
    7e00:	80 81       	ld	r24, Z
    7e02:	82 83       	std	Z+2, r24	; 0x02
    7e04:	84 85       	ldd	r24, Z+12	; 0x0c
    7e06:	86 87       	std	Z+14, r24	; 0x0e
    7e08:	88 89       	ldd	r24, Y+16	; 0x10
    7e0a:	8a 8b       	std	Y+18, r24	; 0x12
    7e0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7e10:	90 91 92 93 	lds	r25, 0x9392
    7e14:	94 95       	.word	0x9594	; ????
    7e16:	96 97       	sbiw	r26, 0x26	; 38
    7e18:	98 99       	sbic	0x13, 0	; 19
    7e1a:	9a 9b       	sbis	0x13, 2	; 19
    7e1c:	9c 9d       	mul	r25, r12
    7e1e:	9e 9f       	mul	r25, r30
    7e20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7e22:	a2 a3       	std	Z+34, r26	; 0x22
    7e24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7e26:	a6 a7       	std	Z+46, r26	; 0x2e
    7e28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7e2a:	aa ab       	std	Y+50, r26	; 0x32
    7e2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7e2e:	ae af       	std	Y+62, r26	; 0x3e
    7e30:	b0 b1       	in	r27, 0x00	; 0
    7e32:	b2 b3       	in	r27, 0x12	; 18
    7e34:	b4 b5       	in	r27, 0x24	; 36
    7e36:	b6 b7       	in	r27, 0x36	; 54
    7e38:	b8 b9       	out	0x08, r27	; 8
    7e3a:	ba bb       	out	0x1a, r27	; 26
    7e3c:	bc bd       	out	0x2c, r27	; 44
    7e3e:	be bf       	out	0x3e, r27	; 62
    7e40:	c0 c1       	rjmp	.+896    	; 0x81c2 <waves+0x4c2>
    7e42:	c2 c3       	rjmp	.+1924   	; 0x85c8 <waves+0x8c8>
    7e44:	c4 c5       	rjmp	.+2952   	; 0x89ce <MoveSprite+0x32>
    7e46:	c6 c7       	rjmp	.+3980   	; 0x8dd4 <LBLineIntersect+0x1a>
    7e48:	c8 c9       	rjmp	.-3184   	; 0x71da <EepromWriteBlock+0xb4>
    7e4a:	ca cb       	rjmp	.-2156   	; 0x75e0 <TriggerNote+0x6a>
    7e4c:	cc cd       	rjmp	.-1128   	; 0x79e6 <ProcessMusic+0x400>
    7e4e:	ce cf       	rjmp	.-100    	; 0x7dec <waves+0xec>
    7e50:	d0 d1       	rcall	.+928    	; 0x81f2 <waves+0x4f2>
    7e52:	d2 d3       	rcall	.+1956   	; 0x85f8 <waves+0x8f8>
    7e54:	d4 d5       	rcall	.+2984   	; 0x89fe <MoveSprite+0x62>
    7e56:	d6 d7       	rcall	.+4012   	; 0x8e04 <LBLineIntersect+0x4a>
    7e58:	d8 d9       	rcall	.-3152   	; 0x720a <EepromReadBlock+0xc>
    7e5a:	da db       	rcall	.-2124   	; 0x7610 <ProcessMusic+0x2a>
    7e5c:	dc dd       	rcall	.-1096   	; 0x7a16 <SetMixerNote+0x4>
    7e5e:	de df       	rcall	.-68     	; 0x7e1c <waves+0x11c>
    7e60:	e0 e1       	ldi	r30, 0x10	; 16
    7e62:	e2 e3       	ldi	r30, 0x32	; 50
    7e64:	e4 e5       	ldi	r30, 0x54	; 84
    7e66:	e6 e7       	ldi	r30, 0x76	; 118
    7e68:	e8 e9       	ldi	r30, 0x98	; 152
    7e6a:	ea eb       	ldi	r30, 0xBA	; 186
    7e6c:	ec ed       	ldi	r30, 0xDC	; 220
    7e6e:	ee ef       	ldi	r30, 0xFE	; 254
    7e70:	f0 f1       	brcs	.+124    	; 0x7eee <waves+0x1ee>
    7e72:	f2 f3       	brmi	.-4      	; 0x7e70 <waves+0x170>
    7e74:	f4 f5       	brge	.+124    	; 0x7ef2 <waves+0x1f2>
    7e76:	f6 f7       	brtc	.-4      	; 0x7e74 <waves+0x174>
    7e78:	f8 f9       	.word	0xf9f8	; ????
    7e7a:	fa fb       	.word	0xfbfa	; ????
    7e7c:	fc fd       	.word	0xfdfc	; ????
    7e7e:	fe ff       	.word	0xfffe	; ????
    7e80:	00 01       	movw	r0, r0
    7e82:	02 03       	mulsu	r16, r18
    7e84:	04 05       	cpc	r16, r4
    7e86:	06 07       	cpc	r16, r22
    7e88:	08 09       	sbc	r16, r8
    7e8a:	0a 0b       	sbc	r16, r26
    7e8c:	0c 0d       	add	r16, r12
    7e8e:	0e 0f       	add	r16, r30
    7e90:	10 11       	cpse	r17, r0
    7e92:	12 13       	cpse	r17, r18
    7e94:	14 15       	cp	r17, r4
    7e96:	16 17       	cp	r17, r22
    7e98:	18 19       	sub	r17, r8
    7e9a:	1a 1b       	sub	r17, r26
    7e9c:	1c 1d       	adc	r17, r12
    7e9e:	1e 1f       	adc	r17, r30
    7ea0:	20 21       	and	r18, r0
    7ea2:	22 23       	and	r18, r18
    7ea4:	24 25       	eor	r18, r4
    7ea6:	26 27       	eor	r18, r22
    7ea8:	28 29       	or	r18, r8
    7eaa:	2a 2b       	or	r18, r26
    7eac:	2c 2d       	mov	r18, r12
    7eae:	2e 2f       	mov	r18, r30
    7eb0:	30 31       	cpi	r19, 0x10	; 16
    7eb2:	32 33       	cpi	r19, 0x32	; 50
    7eb4:	34 35       	cpi	r19, 0x54	; 84
    7eb6:	36 37       	cpi	r19, 0x76	; 118
    7eb8:	38 39       	cpi	r19, 0x98	; 152
    7eba:	3a 3b       	cpi	r19, 0xBA	; 186
    7ebc:	3c 3d       	cpi	r19, 0xDC	; 220
    7ebe:	3e 3f       	cpi	r19, 0xFE	; 254
    7ec0:	40 41       	sbci	r20, 0x10	; 16
    7ec2:	42 43       	sbci	r20, 0x32	; 50
    7ec4:	44 45       	sbci	r20, 0x54	; 84
    7ec6:	46 47       	sbci	r20, 0x76	; 118
    7ec8:	48 49       	sbci	r20, 0x98	; 152
    7eca:	4a 4b       	sbci	r20, 0xBA	; 186
    7ecc:	4c 4d       	sbci	r20, 0xDC	; 220
    7ece:	4e 4f       	sbci	r20, 0xFE	; 254
    7ed0:	50 51       	subi	r21, 0x10	; 16
    7ed2:	52 53       	subi	r21, 0x32	; 50
    7ed4:	54 55       	subi	r21, 0x54	; 84
    7ed6:	56 57       	subi	r21, 0x76	; 118
    7ed8:	58 59       	subi	r21, 0x98	; 152
    7eda:	5a 5b       	subi	r21, 0xBA	; 186
    7edc:	5c 5d       	subi	r21, 0xDC	; 220
    7ede:	5e 5f       	subi	r21, 0xFE	; 254
    7ee0:	60 61       	ori	r22, 0x10	; 16
    7ee2:	62 63       	ori	r22, 0x32	; 50
    7ee4:	64 65       	ori	r22, 0x54	; 84
    7ee6:	66 67       	ori	r22, 0x76	; 118
    7ee8:	68 69       	ori	r22, 0x98	; 152
    7eea:	6a 6b       	ori	r22, 0xBA	; 186
    7eec:	6c 6d       	ori	r22, 0xDC	; 220
    7eee:	6e 6f       	ori	r22, 0xFE	; 254
    7ef0:	70 71       	andi	r23, 0x10	; 16
    7ef2:	72 73       	andi	r23, 0x32	; 50
    7ef4:	74 75       	andi	r23, 0x54	; 84
    7ef6:	76 77       	andi	r23, 0x76	; 118
    7ef8:	78 79       	andi	r23, 0x98	; 152
    7efa:	7a 7b       	andi	r23, 0xBA	; 186
    7efc:	7c 7d       	andi	r23, 0xDC	; 220
    7efe:	7e 7f       	andi	r23, 0xFE	; 254
    7f00:	00 02       	muls	r16, r16
    7f02:	04 06       	cpc	r0, r20
    7f04:	08 0a       	sbc	r0, r24
    7f06:	0c 0e       	add	r0, r28
    7f08:	10 12       	cpse	r1, r16
    7f0a:	14 16       	cp	r1, r20
    7f0c:	18 1a       	sub	r1, r24
    7f0e:	1c 1e       	adc	r1, r28
    7f10:	20 22       	and	r2, r16
    7f12:	24 26       	eor	r2, r20
    7f14:	28 2a       	or	r2, r24
    7f16:	2c 2e       	mov	r2, r28
    7f18:	30 32       	cpi	r19, 0x20	; 32
    7f1a:	34 36       	cpi	r19, 0x64	; 100
    7f1c:	38 3a       	cpi	r19, 0xA8	; 168
    7f1e:	3c 3e       	cpi	r19, 0xEC	; 236
    7f20:	40 42       	sbci	r20, 0x20	; 32
    7f22:	44 46       	sbci	r20, 0x64	; 100
    7f24:	48 4a       	sbci	r20, 0xA8	; 168
    7f26:	4c 4e       	sbci	r20, 0xEC	; 236
    7f28:	50 52       	subi	r21, 0x20	; 32
    7f2a:	54 56       	subi	r21, 0x64	; 100
    7f2c:	58 5a       	subi	r21, 0xA8	; 168
    7f2e:	5c 5e       	subi	r21, 0xEC	; 236
    7f30:	60 62       	ori	r22, 0x20	; 32
    7f32:	64 66       	ori	r22, 0x64	; 100
    7f34:	68 6a       	ori	r22, 0xA8	; 168
    7f36:	6c 6e       	ori	r22, 0xEC	; 236
    7f38:	70 72       	andi	r23, 0x20	; 32
    7f3a:	74 76       	andi	r23, 0x64	; 100
    7f3c:	78 7a       	andi	r23, 0xA8	; 168
    7f3e:	7c 7e       	andi	r23, 0xEC	; 236
    7f40:	7f 7d       	andi	r23, 0xDF	; 223
    7f42:	7b 79       	andi	r23, 0x9B	; 155
    7f44:	77 75       	andi	r23, 0x57	; 87
    7f46:	73 71       	andi	r23, 0x13	; 19
    7f48:	6f 6d       	ori	r22, 0xDF	; 223
    7f4a:	6b 69       	ori	r22, 0x9B	; 155
    7f4c:	67 65       	ori	r22, 0x57	; 87
    7f4e:	63 61       	ori	r22, 0x13	; 19
    7f50:	5f 5d       	subi	r21, 0xDF	; 223
    7f52:	5b 59       	subi	r21, 0x9B	; 155
    7f54:	57 55       	subi	r21, 0x57	; 87
    7f56:	53 51       	subi	r21, 0x13	; 19
    7f58:	4f 4d       	sbci	r20, 0xDF	; 223
    7f5a:	4b 49       	sbci	r20, 0x9B	; 155
    7f5c:	47 45       	sbci	r20, 0x57	; 87
    7f5e:	43 41       	sbci	r20, 0x13	; 19
    7f60:	3f 3d       	cpi	r19, 0xDF	; 223
    7f62:	3b 39       	cpi	r19, 0x9B	; 155
    7f64:	37 35       	cpi	r19, 0x57	; 87
    7f66:	33 31       	cpi	r19, 0x13	; 19
    7f68:	2f 2d       	mov	r18, r15
    7f6a:	2b 29       	or	r18, r11
    7f6c:	27 25       	eor	r18, r7
    7f6e:	23 21       	and	r18, r3
    7f70:	1f 1d       	adc	r17, r15
    7f72:	1b 19       	sub	r17, r11
    7f74:	17 15       	cp	r17, r7
    7f76:	13 11       	cpse	r17, r3
    7f78:	0f 0d       	add	r16, r15
    7f7a:	0b 09       	sbc	r16, r11
    7f7c:	07 05       	cpc	r16, r7
    7f7e:	03 01       	movw	r0, r6
    7f80:	ff fd       	.word	0xfdff	; ????
    7f82:	fb f9       	.word	0xf9fb	; ????
    7f84:	f7 f5       	brid	.+124    	; 0x8002 <waves+0x302>
    7f86:	f3 f1       	brvs	.+124    	; 0x8004 <waves+0x304>
    7f88:	ef ed       	ldi	r30, 0xDF	; 223
    7f8a:	eb e9       	ldi	r30, 0x9B	; 155
    7f8c:	e7 e5       	ldi	r30, 0x57	; 87
    7f8e:	e3 e1       	ldi	r30, 0x13	; 19
    7f90:	df dd       	rcall	.-1090   	; 0x7b50 <steptable+0x48>
    7f92:	db d9       	rcall	.-3146   	; 0x734a <PatchCommand12>
    7f94:	d7 d5       	rcall	.+2990   	; 0x8b44 <Print+0x28>
    7f96:	d3 d1       	rcall	.+934    	; 0x833e <waves+0x63e>
    7f98:	cf cd       	rjmp	.-1122   	; 0x7b38 <steptable+0x30>
    7f9a:	cb c9       	rjmp	.-3178   	; 0x7332 <PatchCommand11+0x64>
    7f9c:	c7 c5       	rjmp	.+2958   	; 0x8b2c <Print+0x10>
    7f9e:	c3 c1       	rjmp	.+902    	; 0x8326 <waves+0x626>
    7fa0:	bf bd       	out	0x2f, r27	; 47
    7fa2:	bb b9       	out	0x0b, r27	; 11
    7fa4:	b7 b5       	in	r27, 0x27	; 39
    7fa6:	b3 b1       	in	r27, 0x03	; 3
    7fa8:	af ad       	ldd	r26, Y+63	; 0x3f
    7faa:	ab a9       	ldd	r26, Y+51	; 0x33
    7fac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    7fae:	a3 a1       	ldd	r26, Z+35	; 0x23
    7fb0:	9f 9d       	mul	r25, r15
    7fb2:	9b 99       	sbic	0x13, 3	; 19
    7fb4:	97 95       	ror	r25
    7fb6:	93 91       	.word	0x9193	; ????
    7fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7fba:	8b 89       	ldd	r24, Y+19	; 0x13
    7fbc:	87 85       	ldd	r24, Z+15	; 0x0f
    7fbe:	83 81       	ldd	r24, Z+3	; 0x03
    7fc0:	80 82       	st	Z, r8
    7fc2:	84 86       	std	Z+12, r8	; 0x0c
    7fc4:	88 8a       	std	Y+16, r8	; 0x10
    7fc6:	8c 8e       	std	Y+28, r8	; 0x1c
    7fc8:	90 92 94 96 	sts	0x9694, r9
    7fcc:	98 9a       	sbi	0x13, 0	; 19
    7fce:	9c 9e       	mul	r9, r28
    7fd0:	a0 a2       	std	Z+32, r10	; 0x20
    7fd2:	a4 a6       	std	Z+44, r10	; 0x2c
    7fd4:	a8 aa       	std	Y+48, r10	; 0x30
    7fd6:	ac ae       	std	Y+60, r10	; 0x3c
    7fd8:	b0 b2       	in	r11, 0x10	; 16
    7fda:	b4 b6       	in	r11, 0x34	; 52
    7fdc:	b8 ba       	out	0x18, r11	; 24
    7fde:	bc be       	out	0x3c, r11	; 60
    7fe0:	c0 c2       	rjmp	.+1408   	; 0x8562 <waves+0x862>
    7fe2:	c4 c6       	rjmp	.+3464   	; 0x8d6c <LBCollides+0x6>
    7fe4:	c8 ca       	rjmp	.-2672   	; 0x7576 <TriggerNote>
    7fe6:	cc ce       	rjmp	.-616    	; 0x7d80 <waves+0x80>
    7fe8:	d0 d2       	rcall	.+1440   	; 0x858a <waves+0x88a>
    7fea:	d4 d6       	rcall	.+3496   	; 0x8d94 <LBCollides+0x2e>
    7fec:	d8 da       	rcall	.-2640   	; 0x759e <TriggerNote+0x28>
    7fee:	dc de       	rcall	.-584    	; 0x7da8 <waves+0xa8>
    7ff0:	e0 e2       	ldi	r30, 0x20	; 32
    7ff2:	e4 e6       	ldi	r30, 0x64	; 100
    7ff4:	e8 ea       	ldi	r30, 0xA8	; 168
    7ff6:	ec ee       	ldi	r30, 0xEC	; 236
    7ff8:	f0 f2       	brcs	.-68     	; 0x7fb6 <waves+0x2b6>
    7ffa:	f4 f6       	brge	.-68     	; 0x7fb8 <waves+0x2b8>
    7ffc:	f8 fa       	.word	0xfaf8	; ????
    7ffe:	fc fe       	.word	0xfefc	; ????
    8000:	7f 7f       	andi	r23, 0xFF	; 255
    8002:	7f 7f       	andi	r23, 0xFF	; 255
    8004:	7f 7f       	andi	r23, 0xFF	; 255
    8006:	7f 7f       	andi	r23, 0xFF	; 255
    8008:	7f 7f       	andi	r23, 0xFF	; 255
    800a:	7f 7f       	andi	r23, 0xFF	; 255
    800c:	7f 7f       	andi	r23, 0xFF	; 255
    800e:	7f 7f       	andi	r23, 0xFF	; 255
    8010:	7f 7f       	andi	r23, 0xFF	; 255
    8012:	7f 7f       	andi	r23, 0xFF	; 255
    8014:	7f 7f       	andi	r23, 0xFF	; 255
    8016:	7f 7f       	andi	r23, 0xFF	; 255
    8018:	7f 7f       	andi	r23, 0xFF	; 255
    801a:	7f 7f       	andi	r23, 0xFF	; 255
    801c:	7f 7f       	andi	r23, 0xFF	; 255
    801e:	7f 7f       	andi	r23, 0xFF	; 255
    8020:	7f 7f       	andi	r23, 0xFF	; 255
    8022:	7f 7f       	andi	r23, 0xFF	; 255
    8024:	7f 7f       	andi	r23, 0xFF	; 255
    8026:	7f 7f       	andi	r23, 0xFF	; 255
    8028:	7f 7f       	andi	r23, 0xFF	; 255
    802a:	7f 7f       	andi	r23, 0xFF	; 255
    802c:	7f 7f       	andi	r23, 0xFF	; 255
    802e:	7f 7f       	andi	r23, 0xFF	; 255
    8030:	7f 7f       	andi	r23, 0xFF	; 255
    8032:	7f 7f       	andi	r23, 0xFF	; 255
    8034:	7f 7f       	andi	r23, 0xFF	; 255
    8036:	7f 7f       	andi	r23, 0xFF	; 255
    8038:	7f 7f       	andi	r23, 0xFF	; 255
    803a:	7f 7f       	andi	r23, 0xFF	; 255
    803c:	7f 7f       	andi	r23, 0xFF	; 255
    803e:	7f 7f       	andi	r23, 0xFF	; 255
    8040:	80 80       	ld	r8, Z
    8042:	80 80       	ld	r8, Z
    8044:	80 80       	ld	r8, Z
    8046:	80 80       	ld	r8, Z
    8048:	80 80       	ld	r8, Z
    804a:	80 80       	ld	r8, Z
    804c:	80 80       	ld	r8, Z
    804e:	80 80       	ld	r8, Z
    8050:	80 80       	ld	r8, Z
    8052:	80 80       	ld	r8, Z
    8054:	80 80       	ld	r8, Z
    8056:	80 80       	ld	r8, Z
    8058:	80 80       	ld	r8, Z
    805a:	80 80       	ld	r8, Z
    805c:	80 80       	ld	r8, Z
    805e:	80 80       	ld	r8, Z
    8060:	80 80       	ld	r8, Z
    8062:	80 80       	ld	r8, Z
    8064:	80 80       	ld	r8, Z
    8066:	80 80       	ld	r8, Z
    8068:	80 80       	ld	r8, Z
    806a:	80 80       	ld	r8, Z
    806c:	80 80       	ld	r8, Z
    806e:	80 80       	ld	r8, Z
    8070:	80 80       	ld	r8, Z
    8072:	80 80       	ld	r8, Z
    8074:	80 80       	ld	r8, Z
    8076:	80 80       	ld	r8, Z
    8078:	80 80       	ld	r8, Z
    807a:	80 80       	ld	r8, Z
    807c:	80 80       	ld	r8, Z
    807e:	80 80       	ld	r8, Z
    8080:	80 80       	ld	r8, Z
    8082:	80 80       	ld	r8, Z
    8084:	80 80       	ld	r8, Z
    8086:	80 80       	ld	r8, Z
    8088:	80 80       	ld	r8, Z
    808a:	80 80       	ld	r8, Z
    808c:	80 80       	ld	r8, Z
    808e:	80 80       	ld	r8, Z
    8090:	80 80       	ld	r8, Z
    8092:	80 80       	ld	r8, Z
    8094:	80 80       	ld	r8, Z
    8096:	80 80       	ld	r8, Z
    8098:	80 80       	ld	r8, Z
    809a:	80 80       	ld	r8, Z
    809c:	80 80       	ld	r8, Z
    809e:	80 80       	ld	r8, Z
    80a0:	80 80       	ld	r8, Z
    80a2:	80 80       	ld	r8, Z
    80a4:	80 80       	ld	r8, Z
    80a6:	80 80       	ld	r8, Z
    80a8:	80 80       	ld	r8, Z
    80aa:	80 80       	ld	r8, Z
    80ac:	80 80       	ld	r8, Z
    80ae:	80 80       	ld	r8, Z
    80b0:	80 80       	ld	r8, Z
    80b2:	80 80       	ld	r8, Z
    80b4:	80 80       	ld	r8, Z
    80b6:	80 80       	ld	r8, Z
    80b8:	80 80       	ld	r8, Z
    80ba:	80 80       	ld	r8, Z
    80bc:	80 80       	ld	r8, Z
    80be:	80 80       	ld	r8, Z
    80c0:	80 80       	ld	r8, Z
    80c2:	80 80       	ld	r8, Z
    80c4:	80 80       	ld	r8, Z
    80c6:	80 80       	ld	r8, Z
    80c8:	80 80       	ld	r8, Z
    80ca:	80 80       	ld	r8, Z
    80cc:	80 80       	ld	r8, Z
    80ce:	80 80       	ld	r8, Z
    80d0:	80 80       	ld	r8, Z
    80d2:	80 80       	ld	r8, Z
    80d4:	80 80       	ld	r8, Z
    80d6:	80 80       	ld	r8, Z
    80d8:	80 80       	ld	r8, Z
    80da:	80 80       	ld	r8, Z
    80dc:	80 80       	ld	r8, Z
    80de:	80 80       	ld	r8, Z
    80e0:	80 80       	ld	r8, Z
    80e2:	80 80       	ld	r8, Z
    80e4:	80 80       	ld	r8, Z
    80e6:	80 80       	ld	r8, Z
    80e8:	80 80       	ld	r8, Z
    80ea:	80 80       	ld	r8, Z
    80ec:	80 80       	ld	r8, Z
    80ee:	80 80       	ld	r8, Z
    80f0:	80 80       	ld	r8, Z
    80f2:	80 80       	ld	r8, Z
    80f4:	80 80       	ld	r8, Z
    80f6:	80 80       	ld	r8, Z
    80f8:	80 80       	ld	r8, Z
    80fa:	80 80       	ld	r8, Z
    80fc:	80 80       	ld	r8, Z
    80fe:	80 80       	ld	r8, Z
    8100:	7f 7f       	andi	r23, 0xFF	; 255
    8102:	7f 7f       	andi	r23, 0xFF	; 255
    8104:	7f 7f       	andi	r23, 0xFF	; 255
    8106:	7f 7f       	andi	r23, 0xFF	; 255
    8108:	7f 7f       	andi	r23, 0xFF	; 255
    810a:	7f 7f       	andi	r23, 0xFF	; 255
    810c:	7f 7f       	andi	r23, 0xFF	; 255
    810e:	7f 7f       	andi	r23, 0xFF	; 255
    8110:	7f 7f       	andi	r23, 0xFF	; 255
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	7f 7f       	andi	r23, 0xFF	; 255
    8142:	7f 7f       	andi	r23, 0xFF	; 255
    8144:	7f 7f       	andi	r23, 0xFF	; 255
    8146:	7f 7f       	andi	r23, 0xFF	; 255
    8148:	7f 7f       	andi	r23, 0xFF	; 255
    814a:	7f 7f       	andi	r23, 0xFF	; 255
    814c:	7f 7f       	andi	r23, 0xFF	; 255
    814e:	7f 7f       	andi	r23, 0xFF	; 255
    8150:	7f 7f       	andi	r23, 0xFF	; 255
    8152:	7f 7f       	andi	r23, 0xFF	; 255
    8154:	7f 7f       	andi	r23, 0xFF	; 255
    8156:	7f 7f       	andi	r23, 0xFF	; 255
    8158:	7f 7f       	andi	r23, 0xFF	; 255
    815a:	7f 7f       	andi	r23, 0xFF	; 255
    815c:	7f 7f       	andi	r23, 0xFF	; 255
    815e:	7f 7f       	andi	r23, 0xFF	; 255
    8160:	7f 7f       	andi	r23, 0xFF	; 255
    8162:	7f 7f       	andi	r23, 0xFF	; 255
    8164:	7f 7f       	andi	r23, 0xFF	; 255
    8166:	7f 7f       	andi	r23, 0xFF	; 255
    8168:	7f 7f       	andi	r23, 0xFF	; 255
    816a:	7f 7f       	andi	r23, 0xFF	; 255
    816c:	7f 7f       	andi	r23, 0xFF	; 255
    816e:	7f 7f       	andi	r23, 0xFF	; 255
    8170:	7f 7f       	andi	r23, 0xFF	; 255
    8172:	7f 7f       	andi	r23, 0xFF	; 255
    8174:	7f 7f       	andi	r23, 0xFF	; 255
    8176:	7f 7f       	andi	r23, 0xFF	; 255
    8178:	7f 7f       	andi	r23, 0xFF	; 255
    817a:	7f 7f       	andi	r23, 0xFF	; 255
    817c:	7f 7f       	andi	r23, 0xFF	; 255
    817e:	7f 7f       	andi	r23, 0xFF	; 255
    8180:	80 80       	ld	r8, Z
    8182:	80 80       	ld	r8, Z
    8184:	80 80       	ld	r8, Z
    8186:	80 80       	ld	r8, Z
    8188:	80 80       	ld	r8, Z
    818a:	80 80       	ld	r8, Z
    818c:	80 80       	ld	r8, Z
    818e:	80 80       	ld	r8, Z
    8190:	80 80       	ld	r8, Z
    8192:	80 80       	ld	r8, Z
    8194:	80 80       	ld	r8, Z
    8196:	80 80       	ld	r8, Z
    8198:	80 80       	ld	r8, Z
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 80       	ld	r8, Z
    81f6:	80 80       	ld	r8, Z
    81f8:	80 80       	ld	r8, Z
    81fa:	80 80       	ld	r8, Z
    81fc:	80 80       	ld	r8, Z
    81fe:	80 80       	ld	r8, Z
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7f       	andi	r23, 0xFF	; 255
    827c:	7f 7f       	andi	r23, 0xFF	; 255
    827e:	7f 7f       	andi	r23, 0xFF	; 255
    8280:	7f 7f       	andi	r23, 0xFF	; 255
    8282:	7f 7f       	andi	r23, 0xFF	; 255
    8284:	7f 7f       	andi	r23, 0xFF	; 255
    8286:	7f 7f       	andi	r23, 0xFF	; 255
    8288:	7f 7f       	andi	r23, 0xFF	; 255
    828a:	7f 7f       	andi	r23, 0xFF	; 255
    828c:	7f 7f       	andi	r23, 0xFF	; 255
    828e:	7f 7f       	andi	r23, 0xFF	; 255
    8290:	7f 7f       	andi	r23, 0xFF	; 255
    8292:	7f 7f       	andi	r23, 0xFF	; 255
    8294:	7f 7f       	andi	r23, 0xFF	; 255
    8296:	7f 7f       	andi	r23, 0xFF	; 255
    8298:	7f 7f       	andi	r23, 0xFF	; 255
    829a:	7f 7f       	andi	r23, 0xFF	; 255
    829c:	7f 7f       	andi	r23, 0xFF	; 255
    829e:	7f 7f       	andi	r23, 0xFF	; 255
    82a0:	7f 7f       	andi	r23, 0xFF	; 255
    82a2:	7f 7f       	andi	r23, 0xFF	; 255
    82a4:	7f 7f       	andi	r23, 0xFF	; 255
    82a6:	7f 7f       	andi	r23, 0xFF	; 255
    82a8:	7f 7f       	andi	r23, 0xFF	; 255
    82aa:	7f 7f       	andi	r23, 0xFF	; 255
    82ac:	7f 7f       	andi	r23, 0xFF	; 255
    82ae:	7f 7f       	andi	r23, 0xFF	; 255
    82b0:	7f 7f       	andi	r23, 0xFF	; 255
    82b2:	7f 7f       	andi	r23, 0xFF	; 255
    82b4:	7f 7f       	andi	r23, 0xFF	; 255
    82b6:	7f 7f       	andi	r23, 0xFF	; 255
    82b8:	7f 7f       	andi	r23, 0xFF	; 255
    82ba:	7f 7f       	andi	r23, 0xFF	; 255
    82bc:	7f 7f       	andi	r23, 0xFF	; 255
    82be:	7f 7f       	andi	r23, 0xFF	; 255
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	03 09       	sbc	r16, r3
    8302:	13 1e       	adc	r1, r19
    8304:	28 31       	cpi	r18, 0x18	; 24
    8306:	3a 40       	sbci	r19, 0x0A	; 10
    8308:	46 4c       	sbci	r20, 0xC6	; 198
    830a:	50 54       	subi	r21, 0x40	; 64
    830c:	58 5b       	subi	r21, 0xB8	; 184
    830e:	5e 61       	ori	r21, 0x1E	; 30
    8310:	63 65       	ori	r22, 0x53	; 83
    8312:	67 69       	ori	r22, 0x97	; 151
    8314:	6b 6c       	ori	r22, 0xCB	; 203
    8316:	6e 6f       	ori	r22, 0xFE	; 254
    8318:	70 71       	andi	r23, 0x10	; 16
    831a:	72 73       	andi	r23, 0x32	; 50
    831c:	74 75       	andi	r23, 0x54	; 84
    831e:	76 77       	andi	r23, 0x76	; 118
    8320:	77 78       	andi	r23, 0x87	; 135
    8322:	79 79       	andi	r23, 0x99	; 153
    8324:	7a 7a       	andi	r23, 0xAA	; 170
    8326:	7b 7b       	andi	r23, 0xBB	; 187
    8328:	7c 7c       	andi	r23, 0xCC	; 204
    832a:	7c 7d       	andi	r23, 0xDC	; 220
    832c:	7d 7d       	andi	r23, 0xDD	; 221
    832e:	7e 7e       	andi	r23, 0xEE	; 238
    8330:	7e 7e       	andi	r23, 0xEE	; 238
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7e       	andi	r23, 0xEF	; 239
    834e:	7e 7e       	andi	r23, 0xEE	; 238
    8350:	7e 7d       	andi	r23, 0xDE	; 222
    8352:	7d 7d       	andi	r23, 0xDD	; 221
    8354:	7c 7c       	andi	r23, 0xCC	; 204
    8356:	7c 7b       	andi	r23, 0xBC	; 188
    8358:	7b 7a       	andi	r23, 0xAB	; 171
    835a:	7a 79       	andi	r23, 0x9A	; 154
    835c:	79 78       	andi	r23, 0x89	; 137
    835e:	77 77       	andi	r23, 0x77	; 119
    8360:	76 75       	andi	r23, 0x56	; 86
    8362:	74 73       	andi	r23, 0x34	; 52
    8364:	72 71       	andi	r23, 0x12	; 18
    8366:	70 6f       	ori	r23, 0xF0	; 240
    8368:	6e 6c       	ori	r22, 0xCE	; 206
    836a:	6b 69       	ori	r22, 0x9B	; 155
    836c:	67 65       	ori	r22, 0x57	; 87
    836e:	63 61       	ori	r22, 0x13	; 19
    8370:	5e 5b       	subi	r21, 0xBE	; 190
    8372:	58 54       	subi	r21, 0x48	; 72
    8374:	50 4c       	sbci	r21, 0xC0	; 192
    8376:	46 40       	sbci	r20, 0x06	; 6
    8378:	3a 31       	cpi	r19, 0x1A	; 26
    837a:	28 1e       	adc	r2, r24
    837c:	13 09       	sbc	r17, r3
    837e:	03 00       	.word	0x0003	; ????
    8380:	c6 cc       	rjmp	.-1652   	; 0x7d0e <waves+0xe>
    8382:	d5 db       	rcall	.-2134   	; 0x7b2e <steptable+0x26>
    8384:	df e3       	ldi	r29, 0x3F	; 63
    8386:	e5 e7       	ldi	r30, 0x75	; 117
    8388:	e9 ea       	ldi	r30, 0xA9	; 169
    838a:	eb ec       	ldi	r30, 0xCB	; 203
    838c:	ed ee       	ldi	r30, 0xED	; 237
    838e:	ef ef       	ldi	r30, 0xFF	; 255
    8390:	f0 f0       	brcs	.+60     	; 0x83ce <waves+0x6ce>
    8392:	f0 f1       	brcs	.+124    	; 0x8410 <waves+0x710>
    8394:	f1 f1       	breq	.+124    	; 0x8412 <waves+0x712>
    8396:	f1 f2       	breq	.-68     	; 0x8354 <waves+0x654>
    8398:	f2 f2       	brmi	.-68     	; 0x8356 <waves+0x656>
    839a:	f2 f2       	brmi	.-68     	; 0x8358 <waves+0x658>
    839c:	f2 f2       	brmi	.-68     	; 0x835a <waves+0x65a>
    839e:	f2 f3       	brmi	.-4      	; 0x839c <waves+0x69c>
    83a0:	f3 f3       	brvs	.-4      	; 0x839e <waves+0x69e>
    83a2:	f3 f3       	brvs	.-4      	; 0x83a0 <waves+0x6a0>
    83a4:	f3 f3       	brvs	.-4      	; 0x83a2 <waves+0x6a2>
    83a6:	f3 f3       	brvs	.-4      	; 0x83a4 <waves+0x6a4>
    83a8:	f3 f3       	brvs	.-4      	; 0x83a6 <waves+0x6a6>
    83aa:	f3 f3       	brvs	.-4      	; 0x83a8 <waves+0x6a8>
    83ac:	f3 f3       	brvs	.-4      	; 0x83aa <waves+0x6aa>
    83ae:	f3 f3       	brvs	.-4      	; 0x83ac <waves+0x6ac>
    83b0:	f3 f3       	brvs	.-4      	; 0x83ae <waves+0x6ae>
    83b2:	f3 f3       	brvs	.-4      	; 0x83b0 <waves+0x6b0>
    83b4:	f3 f3       	brvs	.-4      	; 0x83b2 <waves+0x6b2>
    83b6:	f3 f3       	brvs	.-4      	; 0x83b4 <waves+0x6b4>
    83b8:	f3 f3       	brvs	.-4      	; 0x83b6 <waves+0x6b6>
    83ba:	f3 f3       	brvs	.-4      	; 0x83b8 <waves+0x6b8>
    83bc:	f3 f3       	brvs	.-4      	; 0x83ba <waves+0x6ba>
    83be:	f3 f3       	brvs	.-4      	; 0x83bc <waves+0x6bc>
    83c0:	f3 f3       	brvs	.-4      	; 0x83be <waves+0x6be>
    83c2:	f3 f3       	brvs	.-4      	; 0x83c0 <waves+0x6c0>
    83c4:	f3 f3       	brvs	.-4      	; 0x83c2 <waves+0x6c2>
    83c6:	f3 f3       	brvs	.-4      	; 0x83c4 <waves+0x6c4>
    83c8:	f3 f3       	brvs	.-4      	; 0x83c6 <waves+0x6c6>
    83ca:	f3 f3       	brvs	.-4      	; 0x83c8 <waves+0x6c8>
    83cc:	f3 f3       	brvs	.-4      	; 0x83ca <waves+0x6ca>
    83ce:	f3 f3       	brvs	.-4      	; 0x83cc <waves+0x6cc>
    83d0:	f3 f3       	brvs	.-4      	; 0x83ce <waves+0x6ce>
    83d2:	f3 f3       	brvs	.-4      	; 0x83d0 <waves+0x6d0>
    83d4:	f3 f3       	brvs	.-4      	; 0x83d2 <waves+0x6d2>
    83d6:	f3 f3       	brvs	.-4      	; 0x83d4 <waves+0x6d4>
    83d8:	f3 f3       	brvs	.-4      	; 0x83d6 <waves+0x6d6>
    83da:	f3 f3       	brvs	.-4      	; 0x83d8 <waves+0x6d8>
    83dc:	f3 f3       	brvs	.-4      	; 0x83da <waves+0x6da>
    83de:	f3 f3       	brvs	.-4      	; 0x83dc <waves+0x6dc>
    83e0:	f2 f2       	brmi	.-68     	; 0x839e <waves+0x69e>
    83e2:	f2 f2       	brmi	.-68     	; 0x83a0 <waves+0x6a0>
    83e4:	f2 f2       	brmi	.-68     	; 0x83a2 <waves+0x6a2>
    83e6:	f2 f2       	brmi	.-68     	; 0x83a4 <waves+0x6a4>
    83e8:	f1 f1       	breq	.+124    	; 0x8466 <waves+0x766>
    83ea:	f1 f1       	breq	.+124    	; 0x8468 <waves+0x768>
    83ec:	f0 f0       	brcs	.+60     	; 0x842a <waves+0x72a>
    83ee:	f0 ef       	ldi	r31, 0xF0	; 240
    83f0:	ef ee       	ldi	r30, 0xEF	; 239
    83f2:	ed ec       	ldi	r30, 0xCD	; 205
    83f4:	eb ea       	ldi	r30, 0xAB	; 171
    83f6:	e9 e7       	ldi	r30, 0x79	; 121
    83f8:	e5 e3       	ldi	r30, 0x35	; 53
    83fa:	df db       	rcall	.-2114   	; 0x7bba <steptable+0xb2>
    83fc:	d5 cc       	rjmp	.-1622   	; 0x7da8 <waves+0xa8>
    83fe:	c6 00       	.word	0x00c6	; ????
    8400:	00 28       	or	r0, r0
    8402:	3d 42       	sbci	r19, 0x2D	; 45
    8404:	30 2d       	mov	r19, r0
    8406:	2c 2b       	or	r18, r28
    8408:	2c 2d       	mov	r18, r12
    840a:	2e 2f       	mov	r18, r30
    840c:	30 32       	cpi	r19, 0x20	; 32
    840e:	33 35       	cpi	r19, 0x53	; 83
    8410:	37 39       	cpi	r19, 0x97	; 151
    8412:	3b 3d       	cpi	r19, 0xDB	; 219
    8414:	3f 41       	sbci	r19, 0x1F	; 31
    8416:	43 45       	sbci	r20, 0x53	; 83
    8418:	48 4a       	sbci	r20, 0xA8	; 168
    841a:	4c 4e       	sbci	r20, 0xEC	; 236
    841c:	50 53       	subi	r21, 0x30	; 48
    841e:	55 57       	subi	r21, 0x75	; 117
    8420:	59 5b       	subi	r21, 0xB9	; 185
    8422:	5d 5f       	subi	r21, 0xFD	; 253
    8424:	61 63       	ori	r22, 0x31	; 49
    8426:	65 67       	ori	r22, 0x75	; 117
    8428:	69 6b       	ori	r22, 0xB9	; 185
    842a:	6c 6e       	ori	r22, 0xEC	; 236
    842c:	70 71       	andi	r23, 0x10	; 16
    842e:	73 74       	andi	r23, 0x43	; 67
    8430:	75 77       	andi	r23, 0x75	; 117
    8432:	78 79       	andi	r23, 0x98	; 152
    8434:	7a 7b       	andi	r23, 0xBA	; 186
    8436:	7c 7d       	andi	r23, 0xDC	; 220
    8438:	7d 7e       	andi	r23, 0xED	; 237
    843a:	7e 7f       	andi	r23, 0xFE	; 254
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7e 7e       	andi	r23, 0xEE	; 238
    8448:	7d 7d       	andi	r23, 0xDD	; 221
    844a:	7c 7b       	andi	r23, 0xBC	; 188
    844c:	7a 79       	andi	r23, 0x9A	; 154
    844e:	78 77       	andi	r23, 0x78	; 120
    8450:	75 74       	andi	r23, 0x45	; 69
    8452:	73 71       	andi	r23, 0x13	; 19
    8454:	70 6e       	ori	r23, 0xE0	; 224
    8456:	6c 6b       	ori	r22, 0xBC	; 188
    8458:	69 67       	ori	r22, 0x79	; 121
    845a:	65 63       	ori	r22, 0x35	; 53
    845c:	61 5f       	subi	r22, 0xF1	; 241
    845e:	5d 5b       	subi	r21, 0xBD	; 189
    8460:	59 57       	subi	r21, 0x79	; 121
    8462:	55 53       	subi	r21, 0x35	; 53
    8464:	50 4e       	sbci	r21, 0xE0	; 224
    8466:	4c 4a       	sbci	r20, 0xAC	; 172
    8468:	48 45       	sbci	r20, 0x58	; 88
    846a:	43 41       	sbci	r20, 0x13	; 19
    846c:	3f 3d       	cpi	r19, 0xDF	; 223
    846e:	3b 39       	cpi	r19, 0x9B	; 155
    8470:	37 35       	cpi	r19, 0x57	; 87
    8472:	33 32       	cpi	r19, 0x23	; 35
    8474:	30 2f       	mov	r19, r16
    8476:	2e 2d       	mov	r18, r14
    8478:	2c 2b       	or	r18, r28
    847a:	2c 2d       	mov	r18, r12
    847c:	30 42       	sbci	r19, 0x20	; 32
    847e:	3d 28       	or	r3, r13
    8480:	00 e9       	ldi	r16, 0x90	; 144
    8482:	e5 fe       	sbrs	r14, 5
    8484:	d4 d7       	rcall	.+4008   	; 0x942e <print_level_score>
    8486:	d7 d7       	rcall	.+4014   	; 0x9436 <print_level_score+0x8>
    8488:	d6 d4       	rcall	.+2476   	; 0x8e36 <LBLineIntersect+0x7c>
    848a:	d2 d0       	rcall	.+420    	; 0x8630 <waves+0x930>
    848c:	ce cc       	rjmp	.-1636   	; 0x7e2a <waves+0x12a>
    848e:	ca c8       	rjmp	.-3692   	; 0x7624 <ProcessMusic+0x3e>
    8490:	c6 c3       	rjmp	.+1932   	; 0x8c1e <VideoModeVsync+0x2>
    8492:	c1 bf       	out	0x31, r28	; 49
    8494:	bd ba       	out	0x1d, r11	; 29
    8496:	b8 b6       	in	r11, 0x38	; 56
    8498:	b4 b1       	in	r27, 0x04	; 4
    849a:	af ad       	ldd	r26, Y+63	; 0x3f
    849c:	ab a9       	ldd	r26, Y+51	; 0x33
    849e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    84a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    84a2:	9f 9e       	mul	r9, r31
    84a4:	9c 9a       	sbi	0x13, 4	; 19
    84a6:	99 97       	sbiw	r26, 0x29	; 41
    84a8:	95 94       	asr	r9
    84aa:	93 91       	.word	0x9193	; ????
    84ac:	90 8f       	std	Z+24, r25	; 0x18
    84ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    84b0:	8b 8a       	std	Y+19, r8	; 0x13
    84b2:	89 88       	ldd	r8, Y+17	; 0x11
    84b4:	88 87       	std	Y+8, r24	; 0x08
    84b6:	86 85       	ldd	r24, Z+14	; 0x0e
    84b8:	85 84       	ldd	r8, Z+13	; 0x0d
    84ba:	84 84       	ldd	r8, Z+12	; 0x0c
    84bc:	83 83       	std	Z+3, r24	; 0x03
    84be:	83 83       	std	Z+3, r24	; 0x03
    84c0:	83 83       	std	Z+3, r24	; 0x03
    84c2:	83 83       	std	Z+3, r24	; 0x03
    84c4:	83 84       	ldd	r8, Z+11	; 0x0b
    84c6:	84 84       	ldd	r8, Z+12	; 0x0c
    84c8:	85 85       	ldd	r24, Z+13	; 0x0d
    84ca:	86 87       	std	Z+14, r24	; 0x0e
    84cc:	88 88       	ldd	r8, Y+16	; 0x10
    84ce:	89 8a       	std	Y+17, r8	; 0x11
    84d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    84d2:	8d 8f       	std	Y+29, r24	; 0x1d
    84d4:	90 91 93 94 	lds	r25, 0x9493
    84d8:	95 97       	sbiw	r26, 0x25	; 37
    84da:	99 9a       	sbi	0x13, 1	; 19
    84dc:	9c 9e       	mul	r9, r28
    84de:	9f a1       	ldd	r25, Y+39	; 0x27
    84e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    84e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    84e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    84e6:	af b1       	in	r26, 0x0f	; 15
    84e8:	b4 b6       	in	r11, 0x34	; 52
    84ea:	b8 ba       	out	0x18, r11	; 24
    84ec:	bd bf       	out	0x3d, r27	; 61
    84ee:	c1 c3       	rjmp	.+1922   	; 0x8c72 <LBGetJoyPadState+0xa>
    84f0:	c6 c8       	rjmp	.-3700   	; 0x767e <ProcessMusic+0x98>
    84f2:	ca cc       	rjmp	.-1644   	; 0x7e88 <waves+0x188>
    84f4:	ce d0       	rcall	.+412    	; 0x8692 <waves+0x992>
    84f6:	d2 d4       	rcall	.+2468   	; 0x8e9c <LBLineIntersect+0xe2>
    84f8:	d6 d7       	rcall	.+4012   	; 0x94a6 <print_level_score+0x78>
    84fa:	d7 d7       	rcall	.+4014   	; 0x94aa <print_level_score+0x7c>
    84fc:	d4 fe       	sbrs	r13, 4
    84fe:	e5 e9       	ldi	r30, 0x95	; 149
    8500:	f9 f8       	.word	0xf8f9	; ????
    8502:	f9 f5       	brne	.+126    	; 0x8582 <waves+0x882>
    8504:	eb e1       	ldi	r30, 0x1B	; 27
    8506:	dd de       	rcall	.-582    	; 0x82c2 <waves+0x5c2>
    8508:	e0 e2       	ldi	r30, 0x20	; 32
    850a:	e4 e5       	ldi	r30, 0x54	; 84
    850c:	e6 e5       	ldi	r30, 0x56	; 86
    850e:	e4 e2       	ldi	r30, 0x24	; 36
    8510:	de d9       	rcall	.-3140   	; 0x78ce <ProcessMusic+0x2e8>
    8512:	d2 ca       	rjmp	.-2652   	; 0x7ab8 <esmw+0x42>
    8514:	c1 b7       	in	r28, 0x31	; 49
    8516:	ac a2       	std	Y+36, r10	; 0x24
    8518:	99 91       	ld	r25, Y+
    851a:	8a 86       	std	Y+10, r8	; 0x0a
    851c:	83 81       	ldd	r24, Z+3	; 0x03
    851e:	80 80       	ld	r8, Z
    8520:	81 82       	std	Z+1, r8	; 0x01
    8522:	83 85       	ldd	r24, Z+11	; 0x0b
    8524:	86 88       	ldd	r8, Z+22	; 0x16
    8526:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8528:	8d 8f       	std	Y+29, r24	; 0x1d
    852a:	90 92 93 95 	sts	0x9593, r9
    852e:	96 97       	sbiw	r26, 0x26	; 38
    8530:	98 99       	sbic	0x13, 0	; 19
    8532:	9a 9b       	sbis	0x13, 2	; 19
    8534:	9b 9c       	mul	r9, r11
    8536:	9d 9d       	mul	r25, r13
    8538:	9d 9e       	mul	r9, r29
    853a:	9e 9e       	mul	r9, r30
    853c:	9f 9f       	mul	r25, r31
    853e:	9f 9f       	mul	r25, r31
    8540:	9f 9f       	mul	r25, r31
    8542:	9f 9e       	mul	r9, r31
    8544:	9e 9e       	mul	r9, r30
    8546:	9d 9d       	mul	r25, r13
    8548:	9d 9c       	mul	r9, r13
    854a:	9b 9b       	sbis	0x13, 3	; 19
    854c:	9a 99       	sbic	0x13, 2	; 19
    854e:	98 97       	sbiw	r26, 0x28	; 40
    8550:	96 95       	lsr	r25
    8552:	93 92       	.word	0x9293	; ????
    8554:	90 8f       	std	Z+24, r25	; 0x18
    8556:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8558:	8a 88       	ldd	r8, Y+18	; 0x12
    855a:	86 85       	ldd	r24, Z+14	; 0x0e
    855c:	83 82       	std	Z+3, r8	; 0x03
    855e:	81 80       	ldd	r8, Z+1	; 0x01
    8560:	80 81       	ld	r24, Z
    8562:	83 86       	std	Z+11, r8	; 0x0b
    8564:	8a 91       	ld	r24, -Y
    8566:	99 a2       	std	Y+33, r9	; 0x21
    8568:	ac b7       	in	r26, 0x3c	; 60
    856a:	c1 ca       	rjmp	.-2686   	; 0x7aee <esmw+0x78>
    856c:	d2 d9       	rcall	.-3164   	; 0x7912 <ProcessMusic+0x32c>
    856e:	de e2       	ldi	r29, 0x2E	; 46
    8570:	e4 e5       	ldi	r30, 0x54	; 84
    8572:	e6 e5       	ldi	r30, 0x56	; 86
    8574:	e4 e2       	ldi	r30, 0x24	; 36
    8576:	e0 de       	rcall	.-576    	; 0x8338 <waves+0x638>
    8578:	dd e1       	ldi	r29, 0x1D	; 29
    857a:	eb f5       	brvc	.+122    	; 0x85f6 <waves+0x8f6>
    857c:	f9 f8       	.word	0xf8f9	; ????
    857e:	f9 00       	.word	0x00f9	; ????
    8580:	07 08       	sbc	r0, r7
    8582:	07 0b       	sbc	r16, r23
    8584:	15 1f       	adc	r17, r21
    8586:	23 22       	and	r2, r19
    8588:	20 1e       	adc	r2, r16
    858a:	1c 1b       	sub	r17, r28
    858c:	1a 1b       	sub	r17, r26
    858e:	1c 1e       	adc	r1, r28
    8590:	22 27       	eor	r18, r18
    8592:	2e 36       	cpi	r18, 0x6E	; 110
    8594:	3f 49       	sbci	r19, 0x9F	; 159
    8596:	54 5e       	subi	r21, 0xE4	; 228
    8598:	67 6f       	ori	r22, 0xF7	; 247
    859a:	76 7a       	andi	r23, 0xA6	; 166
    859c:	7e 7f       	andi	r23, 0xFE	; 254
    859e:	7f 7f       	andi	r23, 0xFF	; 255
    85a0:	7f 7e       	andi	r23, 0xEF	; 239
    85a2:	7d 7b       	andi	r23, 0xBD	; 189
    85a4:	7a 78       	andi	r23, 0x8A	; 138
    85a6:	76 74       	andi	r23, 0x46	; 70
    85a8:	73 71       	andi	r23, 0x13	; 19
    85aa:	70 6e       	ori	r23, 0xE0	; 224
    85ac:	6d 6b       	ori	r22, 0xBD	; 189
    85ae:	6a 69       	ori	r22, 0x9A	; 154
    85b0:	68 67       	ori	r22, 0x78	; 120
    85b2:	66 65       	ori	r22, 0x56	; 86
    85b4:	65 64       	ori	r22, 0x45	; 69
    85b6:	64 63       	ori	r22, 0x34	; 52
    85b8:	63 62       	ori	r22, 0x23	; 35
    85ba:	62 62       	ori	r22, 0x22	; 34
    85bc:	61 61       	ori	r22, 0x11	; 17
    85be:	61 61       	ori	r22, 0x11	; 17
    85c0:	61 61       	ori	r22, 0x11	; 17
    85c2:	61 62       	ori	r22, 0x21	; 33
    85c4:	62 62       	ori	r22, 0x22	; 34
    85c6:	63 63       	ori	r22, 0x33	; 51
    85c8:	63 64       	ori	r22, 0x43	; 67
    85ca:	65 65       	ori	r22, 0x55	; 85
    85cc:	66 67       	ori	r22, 0x76	; 118
    85ce:	68 69       	ori	r22, 0x98	; 152
    85d0:	6a 6b       	ori	r22, 0xBA	; 186
    85d2:	6d 6e       	ori	r22, 0xED	; 237
    85d4:	70 71       	andi	r23, 0x10	; 16
    85d6:	73 74       	andi	r23, 0x43	; 67
    85d8:	76 78       	andi	r23, 0x86	; 134
    85da:	7a 7b       	andi	r23, 0xBA	; 186
    85dc:	7d 7e       	andi	r23, 0xED	; 237
    85de:	7f 7f       	andi	r23, 0xFF	; 255
    85e0:	7f 7f       	andi	r23, 0xFF	; 255
    85e2:	7e 7a       	andi	r23, 0xAE	; 174
    85e4:	76 6f       	ori	r23, 0xF6	; 246
    85e6:	67 5e       	subi	r22, 0xE7	; 231
    85e8:	54 49       	sbci	r21, 0x94	; 148
    85ea:	3f 36       	cpi	r19, 0x6F	; 111
    85ec:	2e 27       	eor	r18, r30
    85ee:	22 1e       	adc	r2, r18
    85f0:	1c 1b       	sub	r17, r28
    85f2:	1a 1b       	sub	r17, r26
    85f4:	1c 1e       	adc	r1, r28
    85f6:	20 22       	and	r2, r16
    85f8:	23 1f       	adc	r18, r19
    85fa:	15 0b       	sbc	r17, r21
    85fc:	07 08       	sbc	r0, r7
    85fe:	07 00       	.word	0x0007	; ????
    8600:	1f 31       	cpi	r17, 0x1F	; 31
    8602:	3d 44       	sbci	r19, 0x4D	; 77
    8604:	4e 53       	subi	r20, 0x3E	; 62
    8606:	54 56       	subi	r21, 0x64	; 100
    8608:	5a 5f       	subi	r21, 0xFA	; 250
    860a:	64 69       	ori	r22, 0x94	; 148
    860c:	6e 74       	andi	r22, 0x4E	; 78
    860e:	76 79       	andi	r23, 0x96	; 150
    8610:	7c 7f       	andi	r23, 0xFC	; 252
    8612:	7f 7f       	andi	r23, 0xFF	; 255
    8614:	7f 7f       	andi	r23, 0xFF	; 255
    8616:	7f 7f       	andi	r23, 0xFF	; 255
    8618:	7f 7f       	andi	r23, 0xFF	; 255
    861a:	7f 7f       	andi	r23, 0xFF	; 255
    861c:	7f 7f       	andi	r23, 0xFF	; 255
    861e:	7f 7f       	andi	r23, 0xFF	; 255
    8620:	7f 7f       	andi	r23, 0xFF	; 255
    8622:	7f 7f       	andi	r23, 0xFF	; 255
    8624:	7f 7f       	andi	r23, 0xFF	; 255
    8626:	7f 7f       	andi	r23, 0xFF	; 255
    8628:	7f 7f       	andi	r23, 0xFF	; 255
    862a:	7f 7f       	andi	r23, 0xFF	; 255
    862c:	7f 7f       	andi	r23, 0xFF	; 255
    862e:	7f 7f       	andi	r23, 0xFF	; 255
    8630:	7f 7f       	andi	r23, 0xFF	; 255
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	7f 7f       	andi	r23, 0xFF	; 255
    8642:	7f 7f       	andi	r23, 0xFF	; 255
    8644:	7f 7f       	andi	r23, 0xFF	; 255
    8646:	7f 7f       	andi	r23, 0xFF	; 255
    8648:	7f 7f       	andi	r23, 0xFF	; 255
    864a:	7f 7f       	andi	r23, 0xFF	; 255
    864c:	7f 7f       	andi	r23, 0xFF	; 255
    864e:	7f 7f       	andi	r23, 0xFF	; 255
    8650:	7f 7f       	andi	r23, 0xFF	; 255
    8652:	7f 7f       	andi	r23, 0xFF	; 255
    8654:	7f 7f       	andi	r23, 0xFF	; 255
    8656:	7f 7f       	andi	r23, 0xFF	; 255
    8658:	7f 7f       	andi	r23, 0xFF	; 255
    865a:	7f 7f       	andi	r23, 0xFF	; 255
    865c:	7f 7f       	andi	r23, 0xFF	; 255
    865e:	7f 7f       	andi	r23, 0xFF	; 255
    8660:	7f 7f       	andi	r23, 0xFF	; 255
    8662:	7f 7f       	andi	r23, 0xFF	; 255
    8664:	7f 7f       	andi	r23, 0xFF	; 255
    8666:	7f 7f       	andi	r23, 0xFF	; 255
    8668:	7f 7f       	andi	r23, 0xFF	; 255
    866a:	7f 7f       	andi	r23, 0xFF	; 255
    866c:	7f 7f       	andi	r23, 0xFF	; 255
    866e:	7f 7f       	andi	r23, 0xFF	; 255
    8670:	7f 7f       	andi	r23, 0xFF	; 255
    8672:	7f 7f       	andi	r23, 0xFF	; 255
    8674:	7f 7f       	andi	r23, 0xFF	; 255
    8676:	7f 7f       	andi	r23, 0xFF	; 255
    8678:	7f 7f       	andi	r23, 0xFF	; 255
    867a:	7f 7c       	andi	r23, 0xCF	; 207
    867c:	78 71       	andi	r23, 0x18	; 24
    867e:	68 4c       	sbci	r22, 0xC8	; 200
    8680:	2c 1c       	adc	r2, r12
    8682:	12 0c       	add	r1, r2
    8684:	0a 0b       	sbc	r16, r26
    8686:	0a 05       	cpc	r16, r10
    8688:	fd f3       	brhs	.-2      	; 0x8688 <waves+0x988>
    868a:	e9 df       	rcall	.-46     	; 0x865e <waves+0x95e>
    868c:	d4 ca       	rjmp	.-2648   	; 0x7c36 <steptable+0x12e>
    868e:	c0 b7       	in	r28, 0x30	; 48
    8690:	ae a6       	std	Y+46, r10	; 0x2e
    8692:	9e 97       	sbiw	r26, 0x2e	; 46
    8694:	91 8b       	std	Z+17, r25	; 0x11
    8696:	86 85       	ldd	r24, Z+14	; 0x0e
    8698:	82 80       	ldd	r8, Z+2	; 0x02
    869a:	80 80       	ld	r8, Z
    869c:	80 80       	ld	r8, Z
    869e:	80 80       	ld	r8, Z
    86a0:	80 80       	ld	r8, Z
    86a2:	80 80       	ld	r8, Z
    86a4:	80 80       	ld	r8, Z
    86a6:	80 80       	ld	r8, Z
    86a8:	80 80       	ld	r8, Z
    86aa:	80 80       	ld	r8, Z
    86ac:	80 80       	ld	r8, Z
    86ae:	80 80       	ld	r8, Z
    86b0:	80 80       	ld	r8, Z
    86b2:	80 80       	ld	r8, Z
    86b4:	80 80       	ld	r8, Z
    86b6:	80 80       	ld	r8, Z
    86b8:	80 80       	ld	r8, Z
    86ba:	80 80       	ld	r8, Z
    86bc:	80 80       	ld	r8, Z
    86be:	80 80       	ld	r8, Z
    86c0:	80 80       	ld	r8, Z
    86c2:	80 80       	ld	r8, Z
    86c4:	80 80       	ld	r8, Z
    86c6:	80 80       	ld	r8, Z
    86c8:	80 80       	ld	r8, Z
    86ca:	80 80       	ld	r8, Z
    86cc:	80 80       	ld	r8, Z
    86ce:	80 80       	ld	r8, Z
    86d0:	80 80       	ld	r8, Z
    86d2:	80 80       	ld	r8, Z
    86d4:	80 80       	ld	r8, Z
    86d6:	80 80       	ld	r8, Z
    86d8:	80 80       	ld	r8, Z
    86da:	80 80       	ld	r8, Z
    86dc:	80 80       	ld	r8, Z
    86de:	80 80       	ld	r8, Z
    86e0:	80 80       	ld	r8, Z
    86e2:	80 80       	ld	r8, Z
    86e4:	80 80       	ld	r8, Z
    86e6:	80 80       	ld	r8, Z
    86e8:	80 80       	ld	r8, Z
    86ea:	80 80       	ld	r8, Z
    86ec:	80 80       	ld	r8, Z
    86ee:	80 80       	ld	r8, Z
    86f0:	80 80       	ld	r8, Z
    86f2:	80 80       	ld	r8, Z
    86f4:	80 87       	std	Z+8, r24	; 0x08
    86f6:	91 9d       	mul	r25, r1
    86f8:	ac c4       	rjmp	.+2392   	; 0x9052 <set_shot_animations+0x12>
    86fa:	cb d4       	rcall	.+2454   	; 0x9092 <set_shot_animations+0x52>
    86fc:	dd f2       	brhs	.-74     	; 0x86b4 <waves+0x9b4>
    86fe:	fa fa       	.word	0xfafa	; ????

00008700 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8700:	90 91 b7 0b 	lds	r25, 0x0BB7
    8704:	ea e9       	ldi	r30, 0x9A	; 154
    8706:	fa e0       	ldi	r31, 0x0A	; 10
    8708:	80 e0       	ldi	r24, 0x00	; 0
    870a:	89 17       	cp	r24, r25
    870c:	61 f0       	breq	.+24     	; 0x8726 <RestoreBackground+0x26>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    870e:	20 81       	ld	r18, Z
    8710:	df 01       	movw	r26, r30
    8712:	12 97       	sbiw	r26, 0x02	; 2
    8714:	0d 90       	ld	r0, X+
    8716:	bc 91       	ld	r27, X
    8718:	a0 2d       	mov	r26, r0
    871a:	a0 5a       	subi	r26, 0xA0	; 160
    871c:	be 4f       	sbci	r27, 0xFE	; 254
    871e:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8720:	8f 5f       	subi	r24, 0xFF	; 255
    8722:	33 96       	adiw	r30, 0x03	; 3
    8724:	f2 cf       	rjmp	.-28     	; 0x870a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    8726:	08 95       	ret

00008728 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    8728:	80 93 00 01 	sts	0x0100, r24
    872c:	08 95       	ret

0000872e <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    872e:	2f 92       	push	r2
    8730:	3f 92       	push	r3
    8732:	4f 92       	push	r4
    8734:	5f 92       	push	r5
    8736:	6f 92       	push	r6
    8738:	7f 92       	push	r7
    873a:	8f 92       	push	r8
    873c:	9f 92       	push	r9
    873e:	af 92       	push	r10
    8740:	bf 92       	push	r11
    8742:	cf 92       	push	r12
    8744:	df 92       	push	r13
    8746:	ef 92       	push	r14
    8748:	ff 92       	push	r15
    874a:	0f 93       	push	r16
    874c:	1f 93       	push	r17
    874e:	cf 93       	push	r28
    8750:	df 93       	push	r29
    8752:	00 d0       	rcall	.+0      	; 0x8754 <ProcessSprites+0x26>
    8754:	00 d0       	rcall	.+0      	; 0x8756 <ProcessSprites+0x28>
    8756:	1f 92       	push	r1
    8758:	cd b7       	in	r28, 0x3d	; 61
    875a:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    875c:	10 92 b7 0b 	sts	0x0BB7, r1
		if(!spritesOn) return;
    8760:	80 91 00 01 	lds	r24, 0x0100
    8764:	88 23       	and	r24, r24
    8766:	09 f4       	brne	.+2      	; 0x876a <ProcessSprites+0x3c>
    8768:	aa c0       	rjmp	.+340    	; 0x88be <ProcessSprites+0x190>
    876a:	69 ea       	ldi	r22, 0xA9	; 169
    876c:	e6 2e       	mov	r14, r22
    876e:	64 e0       	ldi	r22, 0x04	; 4
    8770:	f6 2e       	mov	r15, r22
    8772:	71 2c       	mov	r7, r1
    8774:	f7 01       	movw	r30, r14
    8776:	31 97       	sbiw	r30, 0x01	; 1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    8778:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    877a:	20 3f       	cpi	r18, 0xF0	; 240
    877c:	09 f4       	brne	.+2      	; 0x8780 <ProcessSprites+0x52>
    877e:	7f c0       	rjmp	.+254    	; 0x887e <ProcessSprites+0x150>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8780:	f7 01       	movw	r30, r14
    8782:	30 81       	ld	r19, Z
    8784:	83 2f       	mov	r24, r19
    8786:	90 e0       	ldi	r25, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8788:	32 2e       	mov	r3, r18
    878a:	36 94       	lsr	r3
    878c:	36 94       	lsr	r3
    878e:	36 94       	lsr	r3
				dx=ssx&0x7;
    8790:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    8792:	19 f4       	brne	.+6      	; 0x879a <ProcessSprites+0x6c>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8794:	f1 e0       	ldi	r31, 0x01	; 1
    8796:	f9 83       	std	Y+1, r31	; 0x01
    8798:	02 c0       	rjmp	.+4      	; 0x879e <ProcessSprites+0x70>
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
				dx=ssx&0x7;
				if(dx>0) tx++;
    879a:	42 e0       	ldi	r20, 0x02	; 2
    879c:	49 83       	std	Y+1, r20	; 0x01

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    879e:	53 e0       	ldi	r21, 0x03	; 3
    87a0:	96 95       	lsr	r25
    87a2:	87 95       	ror	r24
    87a4:	5a 95       	dec	r21
    87a6:	e1 f7       	brne	.-8      	; 0x87a0 <ProcessSprites+0x72>
    87a8:	68 2e       	mov	r6, r24
				dy=ssy%TILE_HEIGHT;
    87aa:	83 2f       	mov	r24, r19
    87ac:	87 70       	andi	r24, 0x07	; 7
				if(dy>0) ty++;			
    87ae:	19 f4       	brne	.+6      	; 0x87b6 <ProcessSprites+0x88>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    87b0:	22 24       	eor	r2, r2
    87b2:	23 94       	inc	r2
    87b4:	02 c0       	rjmp	.+4      	; 0x87ba <ProcessSprites+0x8c>

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			
    87b6:	42 e0       	ldi	r20, 0x02	; 2
    87b8:	24 2e       	mov	r2, r20
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    87ba:	c8 2e       	mov	r12, r24
    87bc:	d1 2c       	mov	r13, r1
    87be:	dc 2c       	mov	r13, r12
    87c0:	cc 24       	eor	r12, r12
    87c2:	c2 0e       	add	r12, r18
    87c4:	d1 1c       	adc	r13, r1
    87c6:	00 e0       	ldi	r16, 0x00	; 0
    87c8:	10 e0       	ldi	r17, 0x00	; 0
    87ca:	94 ee       	ldi	r25, 0xE4	; 228
    87cc:	96 0d       	add	r25, r6
    87ce:	9a 83       	std	Y+2, r25	; 0x02
    87d0:	92 ee       	ldi	r25, 0xE2	; 226
    87d2:	93 0d       	add	r25, r3
    87d4:	9b 83       	std	Y+3, r25	; 0x03
    87d6:	86 2d       	mov	r24, r6
    87d8:	80 0f       	add	r24, r16
    87da:	8c 31       	cpi	r24, 0x1C	; 28
    87dc:	18 f0       	brcs	.+6      	; 0x87e4 <ProcessSprites+0xb6>
    87de:	aa 80       	ldd	r10, Y+2	; 0x02
    87e0:	a0 0e       	add	r10, r16
    87e2:	01 c0       	rjmp	.+2      	; 0x87e6 <ProcessSprites+0xb8>
    87e4:	a8 2e       	mov	r10, r24
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    87e6:	ee e1       	ldi	r30, 0x1E	; 30
    87e8:	ae 9e       	mul	r10, r30
    87ea:	50 01       	movw	r10, r0
    87ec:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    87ee:	50 2e       	mov	r5, r16
    87f0:	44 24       	eor	r4, r4
    87f2:	1d 82       	std	Y+5, r1	; 0x05
    87f4:	1c 82       	std	Y+4, r1	; 0x04
    87f6:	8c 81       	ldd	r24, Y+4	; 0x04
    87f8:	83 0d       	add	r24, r3
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    87fa:	8e 31       	cpi	r24, 0x1E	; 30
    87fc:	18 f0       	brcs	.+6      	; 0x8804 <ProcessSprites+0xd6>
    87fe:	8b 81       	ldd	r24, Y+3	; 0x03
    8800:	ec 81       	ldd	r30, Y+4	; 0x04
    8802:	8e 0f       	add	r24, r30

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    8804:	95 01       	movw	r18, r10
    8806:	28 0f       	add	r18, r24
    8808:	31 1d       	adc	r19, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    880a:	c9 01       	movw	r24, r18
    880c:	80 5a       	subi	r24, 0xA0	; 160
    880e:	9e 4f       	sbci	r25, 0xFE	; 254
    8810:	4c 01       	movw	r8, r24
    8812:	fc 01       	movw	r30, r24
    8814:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    8816:	87 31       	cpi	r24, 0x17	; 23
    8818:	e0 f0       	brcs	.+56     	; 0x8852 <ProcessSprites+0x124>
    881a:	60 91 b7 0b 	lds	r22, 0x0BB7
    881e:	67 31       	cpi	r22, 0x17	; 23
    8820:	08 f5       	brcc	.+66     	; 0x8864 <ProcessSprites+0x136>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    8822:	46 2f       	mov	r20, r22
    8824:	50 e0       	ldi	r21, 0x00	; 0
    8826:	fa 01       	movw	r30, r20
    8828:	ee 0f       	add	r30, r30
    882a:	ff 1f       	adc	r31, r31
    882c:	e4 0f       	add	r30, r20
    882e:	f5 1f       	adc	r31, r21
    8830:	e8 56       	subi	r30, 0x68	; 104
    8832:	f5 4f       	sbci	r31, 0xF5	; 245
    8834:	31 83       	std	Z+1, r19	; 0x01
    8836:	20 83       	st	Z, r18
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8838:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    883a:	0e 94 fe 34 	call	0x69fc	; 0x69fc <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    883e:	80 91 b7 0b 	lds	r24, 0x0BB7
    8842:	f4 01       	movw	r30, r8
    8844:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    8846:	91 e0       	ldi	r25, 0x01	; 1
    8848:	98 0f       	add	r25, r24
    884a:	90 93 b7 0b 	sts	0x0BB7, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    884e:	87 31       	cpi	r24, 0x17	; 23
    8850:	48 f4       	brcc	.+18     	; 0x8864 <ProcessSprites+0x136>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8852:	96 01       	movw	r18, r12
    8854:	4c 81       	ldd	r20, Y+4	; 0x04
    8856:	5d 81       	ldd	r21, Y+5	; 0x05
    8858:	44 0d       	add	r20, r4
    885a:	55 1d       	adc	r21, r5
    885c:	68 2f       	mov	r22, r24
    885e:	87 2d       	mov	r24, r7
    8860:	0e 94 8f 35 	call	0x6b1e	; 0x6b1e <BlitSprite>
    8864:	8c 81       	ldd	r24, Y+4	; 0x04
    8866:	9d 81       	ldd	r25, Y+5	; 0x05
    8868:	01 96       	adiw	r24, 0x01	; 1
    886a:	9d 83       	std	Y+5, r25	; 0x05
    886c:	8c 83       	std	Y+4, r24	; 0x04
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    886e:	99 81       	ldd	r25, Y+1	; 0x01
    8870:	89 17       	cp	r24, r25
    8872:	08 f2       	brcs	.-126    	; 0x87f6 <ProcessSprites+0xc8>
    8874:	0f 5f       	subi	r16, 0xFF	; 255
    8876:	1f 4f       	sbci	r17, 0xFF	; 255
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8878:	02 15       	cp	r16, r2
    887a:	08 f4       	brcc	.+2      	; 0x887e <ProcessSprites+0x150>
    887c:	ac cf       	rjmp	.-168    	; 0x87d6 <ProcessSprites+0xa8>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    887e:	73 94       	inc	r7
    8880:	f4 e0       	ldi	r31, 0x04	; 4
    8882:	ef 0e       	add	r14, r31
    8884:	f1 1c       	adc	r15, r1
    8886:	4c e0       	ldi	r20, 0x0C	; 12
    8888:	74 12       	cpse	r7, r20
    888a:	74 cf       	rjmp	.-280    	; 0x8774 <ProcessSprites+0x46>


		//restore BG tiles
		RestoreBackground();

	}
    888c:	0f 90       	pop	r0
    888e:	0f 90       	pop	r0
    8890:	0f 90       	pop	r0
    8892:	0f 90       	pop	r0
    8894:	0f 90       	pop	r0
    8896:	df 91       	pop	r29
    8898:	cf 91       	pop	r28
    889a:	1f 91       	pop	r17
    889c:	0f 91       	pop	r16
    889e:	ff 90       	pop	r15
    88a0:	ef 90       	pop	r14
    88a2:	df 90       	pop	r13
    88a4:	cf 90       	pop	r12
    88a6:	bf 90       	pop	r11
    88a8:	af 90       	pop	r10
    88aa:	9f 90       	pop	r9
    88ac:	8f 90       	pop	r8
    88ae:	7f 90       	pop	r7
    88b0:	6f 90       	pop	r6
    88b2:	5f 90       	pop	r5
    88b4:	4f 90       	pop	r4
    88b6:	3f 90       	pop	r3
    88b8:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    88ba:	0c 94 80 43 	jmp	0x8700	; 0x8700 <RestoreBackground>

	}
    88be:	0f 90       	pop	r0
    88c0:	0f 90       	pop	r0
    88c2:	0f 90       	pop	r0
    88c4:	0f 90       	pop	r0
    88c6:	0f 90       	pop	r0
    88c8:	df 91       	pop	r29
    88ca:	cf 91       	pop	r28
    88cc:	1f 91       	pop	r17
    88ce:	0f 91       	pop	r16
    88d0:	ff 90       	pop	r15
    88d2:	ef 90       	pop	r14
    88d4:	df 90       	pop	r13
    88d6:	cf 90       	pop	r12
    88d8:	bf 90       	pop	r11
    88da:	af 90       	pop	r10
    88dc:	9f 90       	pop	r9
    88de:	8f 90       	pop	r8
    88e0:	7f 90       	pop	r7
    88e2:	6f 90       	pop	r6
    88e4:	5f 90       	pop	r5
    88e6:	4f 90       	pop	r4
    88e8:	3f 90       	pop	r3
    88ea:	2f 90       	pop	r2
    88ec:	08 95       	ret

000088ee <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    88ee:	bf 92       	push	r11
    88f0:	cf 92       	push	r12
    88f2:	df 92       	push	r13
    88f4:	ef 92       	push	r14
    88f6:	ff 92       	push	r15
    88f8:	0f 93       	push	r16
    88fa:	1f 93       	push	r17
    88fc:	cf 93       	push	r28
    88fe:	df 93       	push	r29
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8900:	fb 01       	movw	r30, r22
    8902:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8904:	31 96       	adiw	r30, 0x01	; 1
    8906:	d4 90       	lpm	r13, Z
    8908:	cc 24       	eor	r12, r12
    890a:	ca 94       	dec	r12
    890c:	c1 0e       	add	r12, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    890e:	24 2f       	mov	r18, r20
    8910:	21 70       	andi	r18, 0x01	; 1
    8912:	40 ff       	sbrs	r20, 0
    8914:	04 c0       	rjmp	.+8      	; 0x891e <MapSprite2+0x30>
			x=(mapWidth-1);
    8916:	9c 2d       	mov	r25, r12
			dx=-1;
    8918:	ff 24       	eor	r15, r15
    891a:	fa 94       	dec	r15
    891c:	03 c0       	rjmp	.+6      	; 0x8924 <MapSprite2+0x36>
		}else{
			x=0;
			dx=1;
    891e:	ff 24       	eor	r15, r15
    8920:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8922:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8924:	41 ff       	sbrs	r20, 1
    8926:	05 c0       	rjmp	.+10     	; 0x8932 <MapSprite2+0x44>
			y=(mapHeight-1);
    8928:	5f ef       	ldi	r21, 0xFF	; 255
    892a:	5d 0d       	add	r21, r13
			dy=-1;
    892c:	ee 24       	eor	r14, r14
    892e:	ea 94       	dec	r14
    8930:	03 c0       	rjmp	.+6      	; 0x8938 <MapSprite2+0x4a>
		}else{
			y=0;
			dy=1;
    8932:	ee 24       	eor	r14, r14
    8934:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    8936:	50 e0       	ldi	r21, 0x00	; 0
    8938:	21 11       	cpse	r18, r1
    893a:	01 c0       	rjmp	.+2      	; 0x893e <MapSprite2+0x50>
    893c:	c1 2c       	mov	r12, r1
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    893e:	00 e0       	ldi	r16, 0x00	; 0
    8940:	0d 15       	cp	r16, r13
    8942:	11 f1       	breq	.+68     	; 0x8988 <MapSprite2+0x9a>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8944:	51 03       	mulsu	r21, r17
    8946:	e0 01       	movw	r28, r0
    8948:	11 24       	eor	r1, r1
    894a:	b8 2e       	mov	r11, r24
    894c:	b1 0e       	add	r11, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    894e:	8b 15       	cp	r24, r11
    8950:	b9 f0       	breq	.+46     	; 0x8980 <MapSprite2+0x92>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8952:	fe 01       	movw	r30, r28
    8954:	e9 0f       	add	r30, r25
    8956:	f1 1d       	adc	r31, r1
    8958:	97 fd       	sbrc	r25, 7
    895a:	fa 95       	dec	r31
    895c:	32 96       	adiw	r30, 0x02	; 2
    895e:	e6 0f       	add	r30, r22
    8960:	f7 1f       	adc	r31, r23
    8962:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    8964:	f4 e0       	ldi	r31, 0x04	; 4
    8966:	8f 9f       	mul	r24, r31
    8968:	d0 01       	movw	r26, r0
    896a:	11 24       	eor	r1, r1
    896c:	a8 55       	subi	r26, 0x58	; 88
    896e:	bb 4f       	sbci	r27, 0xFB	; 251
    8970:	12 96       	adiw	r26, 0x02	; 2
    8972:	2c 93       	st	X, r18
    8974:	12 97       	sbiw	r26, 0x02	; 2
				sprites[startSprite++].flags=spriteFlags;
    8976:	8f 5f       	subi	r24, 0xFF	; 255
    8978:	13 96       	adiw	r26, 0x03	; 3
    897a:	4c 93       	st	X, r20
				x+=dx;
    897c:	9f 0d       	add	r25, r15
    897e:	e7 cf       	rjmp	.-50     	; 0x894e <MapSprite2+0x60>
			}
			y+=dy;
    8980:	5e 0d       	add	r21, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8982:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8984:	9c 2d       	mov	r25, r12
    8986:	dc cf       	rjmp	.-72     	; 0x8940 <MapSprite2+0x52>
	    }
	}
    8988:	df 91       	pop	r29
    898a:	cf 91       	pop	r28
    898c:	1f 91       	pop	r17
    898e:	0f 91       	pop	r16
    8990:	ff 90       	pop	r15
    8992:	ef 90       	pop	r14
    8994:	df 90       	pop	r13
    8996:	cf 90       	pop	r12
    8998:	bf 90       	pop	r11
    899a:	08 95       	ret

0000899c <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    899c:	cf 92       	push	r12
    899e:	df 92       	push	r13
    89a0:	ef 92       	push	r14
    89a2:	ff 92       	push	r15
    89a4:	0f 93       	push	r16
    89a6:	1f 93       	push	r17
    89a8:	cf 93       	push	r28
    89aa:	df 93       	push	r29

		for(unsigned char dy=0;dy<height;dy++){
    89ac:	e0 e0       	ldi	r30, 0x00	; 0
    89ae:	f0 e0       	ldi	r31, 0x00	; 0
    89b0:	30 e0       	ldi	r19, 0x00	; 0
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
    89b2:	90 e2       	ldi	r25, 0x20	; 32
    89b4:	d9 2e       	mov	r13, r25
    89b6:	d4 0e       	add	r13, r20
    89b8:	e4 2e       	mov	r14, r20
    89ba:	f1 2c       	mov	r15, r1
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    89bc:	30 17       	cp	r19, r16
    89be:	09 f1       	breq	.+66     	; 0x8a02 <MoveSprite+0x66>
    89c0:	1d 2d       	mov	r17, r13
    89c2:	1e 0f       	add	r17, r30
    89c4:	74 2f       	mov	r23, r20
    89c6:	7e 0f       	add	r23, r30
    89c8:	c8 2e       	mov	r12, r24
    89ca:	c2 0e       	add	r12, r18
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
    89cc:	96 2f       	mov	r25, r22
    89ce:	ef 01       	movw	r28, r30
    89d0:	ce 0d       	add	r28, r14
    89d2:	df 1d       	adc	r29, r15


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
			for(unsigned char dx=0;dx<width;dx++){
    89d4:	8c 15       	cp	r24, r12
    89d6:	91 f0       	breq	.+36     	; 0x89fc <MoveSprite+0x60>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    89d8:	54 e0       	ldi	r21, 0x04	; 4
    89da:	85 9f       	mul	r24, r21
    89dc:	d0 01       	movw	r26, r0
    89de:	11 24       	eor	r1, r1
    89e0:	a8 55       	subi	r26, 0x58	; 88
    89e2:	bb 4f       	sbci	r27, 0xFB	; 251
    89e4:	9c 93       	st	X, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    89e6:	c1 3e       	cpi	r28, 0xE1	; 225
    89e8:	d1 05       	cpc	r29, r1
    89ea:	1c f0       	brlt	.+6      	; 0x89f2 <MoveSprite+0x56>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    89ec:	11 96       	adiw	r26, 0x01	; 1
    89ee:	1c 93       	st	X, r17
    89f0:	02 c0       	rjmp	.+4      	; 0x89f6 <MoveSprite+0x5a>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    89f2:	11 96       	adiw	r26, 0x01	; 1
    89f4:	7c 93       	st	X, r23
					}
				#endif

				startSprite++;
    89f6:	8f 5f       	subi	r24, 0xFF	; 255
    89f8:	98 5f       	subi	r25, 0xF8	; 248
    89fa:	ec cf       	rjmp	.-40     	; 0x89d4 <MoveSprite+0x38>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    89fc:	3f 5f       	subi	r19, 0xFF	; 255
    89fe:	38 96       	adiw	r30, 0x08	; 8
    8a00:	dd cf       	rjmp	.-70     	; 0x89bc <MoveSprite+0x20>

				startSprite++;
			}
		}	

	}
    8a02:	df 91       	pop	r29
    8a04:	cf 91       	pop	r28
    8a06:	1f 91       	pop	r17
    8a08:	0f 91       	pop	r16
    8a0a:	ff 90       	pop	r15
    8a0c:	ef 90       	pop	r14
    8a0e:	df 90       	pop	r13
    8a10:	cf 90       	pop	r12
    8a12:	08 95       	ret

00008a14 <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    8a14:	08 95       	ret

00008a16 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8a16:	e8 ea       	ldi	r30, 0xA8	; 168
    8a18:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8a1a:	80 ef       	ldi	r24, 0xF0	; 240
    8a1c:	80 83       	st	Z, r24
    8a1e:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8a20:	94 e0       	ldi	r25, 0x04	; 4
    8a22:	e8 3d       	cpi	r30, 0xD8	; 216
    8a24:	f9 07       	cpc	r31, r25
    8a26:	d1 f7       	brne	.-12     	; 0x8a1c <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    8a28:	08 95       	ret

00008a2a <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    8a2a:	6f 92       	push	r6
    8a2c:	7f 92       	push	r7
    8a2e:	8f 92       	push	r8
    8a30:	9f 92       	push	r9
    8a32:	af 92       	push	r10
    8a34:	bf 92       	push	r11
    8a36:	cf 92       	push	r12
    8a38:	df 92       	push	r13
    8a3a:	ef 92       	push	r14
    8a3c:	ff 92       	push	r15
    8a3e:	0f 93       	push	r16
    8a40:	1f 93       	push	r17
    8a42:	cf 93       	push	r28
    8a44:	df 93       	push	r29
    8a46:	68 2e       	mov	r6, r24
    8a48:	86 2e       	mov	r8, r22
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    8a4a:	fa 01       	movw	r30, r20
    8a4c:	a4 90       	lpm	r10, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    8a4e:	31 96       	adiw	r30, 0x01	; 1
    8a50:	74 90       	lpm	r7, Z
    8a52:	ca 2c       	mov	r12, r10
    8a54:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8a56:	8a 01       	movw	r16, r20
    8a58:	b1 2c       	mov	r11, r1
    8a5a:	b7 14       	cp	r11, r7
    8a5c:	d1 f0       	breq	.+52     	; 0x8a92 <DrawMap2+0x68>
    8a5e:	c0 e0       	ldi	r28, 0x00	; 0
    8a60:	d0 e0       	ldi	r29, 0x00	; 0
    8a62:	78 01       	movw	r14, r16
    8a64:	82 e0       	ldi	r24, 0x02	; 2
    8a66:	e8 0e       	add	r14, r24
    8a68:	f1 1c       	adc	r15, r1
    8a6a:	9b 2c       	mov	r9, r11
    8a6c:	98 0c       	add	r9, r8
		for(u8 dx=0;dx<mapWidth;dx++){			
    8a6e:	ca 15       	cp	r28, r10
    8a70:	60 f4       	brcc	.+24     	; 0x8a8a <DrawMap2+0x60>
    8a72:	f7 01       	movw	r30, r14
    8a74:	ec 0f       	add	r30, r28
    8a76:	fd 1f       	adc	r31, r29
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8a78:	44 91       	lpm	r20, Z
    8a7a:	50 e0       	ldi	r21, 0x00	; 0
    8a7c:	69 2d       	mov	r22, r9
    8a7e:	8c 2f       	mov	r24, r28
    8a80:	86 0d       	add	r24, r6
    8a82:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <SetTile>
    8a86:	21 96       	adiw	r28, 0x01	; 1
    8a88:	f2 cf       	rjmp	.-28     	; 0x8a6e <DrawMap2+0x44>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8a8a:	b3 94       	inc	r11
    8a8c:	0c 0d       	add	r16, r12
    8a8e:	1d 1d       	adc	r17, r13
    8a90:	e4 cf       	rjmp	.-56     	; 0x8a5a <DrawMap2+0x30>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    8a92:	df 91       	pop	r29
    8a94:	cf 91       	pop	r28
    8a96:	1f 91       	pop	r17
    8a98:	0f 91       	pop	r16
    8a9a:	ff 90       	pop	r15
    8a9c:	ef 90       	pop	r14
    8a9e:	df 90       	pop	r13
    8aa0:	cf 90       	pop	r12
    8aa2:	bf 90       	pop	r11
    8aa4:	af 90       	pop	r10
    8aa6:	9f 90       	pop	r9
    8aa8:	8f 90       	pop	r8
    8aaa:	7f 90       	pop	r7
    8aac:	6f 90       	pop	r6
    8aae:	08 95       	ret

00008ab0 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    8ab0:	df 92       	push	r13
    8ab2:	ef 92       	push	r14
    8ab4:	ff 92       	push	r15
    8ab6:	0f 93       	push	r16
    8ab8:	1f 93       	push	r17
    8aba:	cf 93       	push	r28
    8abc:	df 93       	push	r29
    8abe:	f6 2e       	mov	r15, r22
    8ac0:	04 2f       	mov	r16, r20
    8ac2:	d2 2e       	mov	r13, r18
    8ac4:	ec 01       	movw	r28, r24
    8ac6:	21 97       	sbiw	r28, 0x01	; 1
	unsigned char c,i;

	for(i=0;i<3;i++){
    8ac8:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8aca:	8a e0       	ldi	r24, 0x0A	; 10
    8acc:	e8 2e       	mov	r14, r24
    8ace:	3c 2f       	mov	r19, r28
    8ad0:	3f 5f       	subi	r19, 0xFF	; 255
		if(val>0 || i==0){
    8ad2:	01 11       	cpse	r16, r1
    8ad4:	02 c0       	rjmp	.+4      	; 0x8ada <PrintByte+0x2a>
    8ad6:	11 11       	cpse	r17, r1
    8ad8:	07 c0       	rjmp	.+14     	; 0x8ae8 <PrintByte+0x38>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8ada:	80 2f       	mov	r24, r16
    8adc:	6e 2d       	mov	r22, r14
    8ade:	0e 94 14 5a 	call	0xb428	; 0xb428 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    8ae2:	90 5f       	subi	r25, 0xF0	; 240
    8ae4:	49 2f       	mov	r20, r25
    8ae6:	05 c0       	rjmp	.+10     	; 0x8af2 <PrintByte+0x42>
		}else{
			if(zeropad){
    8ae8:	dd 20       	and	r13, r13
    8aea:	11 f0       	breq	.+4      	; 0x8af0 <PrintByte+0x40>
				SetFont(x--,y,CHAR_ZERO);
    8aec:	40 e1       	ldi	r20, 0x10	; 16
    8aee:	01 c0       	rjmp	.+2      	; 0x8af2 <PrintByte+0x42>
			}else{
				SetFont(x--,y,0);
    8af0:	40 e0       	ldi	r20, 0x00	; 0
    8af2:	6f 2d       	mov	r22, r15
    8af4:	83 2f       	mov	r24, r19
    8af6:	0e 94 bf 37 	call	0x6f7e	; 0x6f7e <SetFont>
			}
		}
		val=val/10;
    8afa:	80 2f       	mov	r24, r16
    8afc:	6e 2d       	mov	r22, r14
    8afe:	0e 94 14 5a 	call	0xb428	; 0xb428 <__udivmodqi4>
    8b02:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    8b04:	1f 5f       	subi	r17, 0xFF	; 255
    8b06:	21 97       	sbiw	r28, 0x01	; 1
    8b08:	13 30       	cpi	r17, 0x03	; 3
    8b0a:	09 f7       	brne	.-62     	; 0x8ace <PrintByte+0x1e>
			}
		}
		val=val/10;
	}
		
}
    8b0c:	df 91       	pop	r29
    8b0e:	cf 91       	pop	r28
    8b10:	1f 91       	pop	r17
    8b12:	0f 91       	pop	r16
    8b14:	ff 90       	pop	r15
    8b16:	ef 90       	pop	r14
    8b18:	df 90       	pop	r13
    8b1a:	08 95       	ret

00008b1c <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    8b1c:	0f 93       	push	r16
    8b1e:	1f 93       	push	r17
    8b20:	cf 93       	push	r28
    8b22:	df 93       	push	r29
    8b24:	16 2f       	mov	r17, r22
    8b26:	c4 2f       	mov	r28, r20
    8b28:	d5 2f       	mov	r29, r21
    8b2a:	08 2f       	mov	r16, r24
    8b2c:	04 1b       	sub	r16, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    8b2e:	fe 01       	movw	r30, r28
    8b30:	44 91       	lpm	r20, Z
		if(c!=0){
    8b32:	44 23       	and	r20, r20
    8b34:	49 f0       	breq	.+18     	; 0x8b48 <Print+0x2c>
			c=((c&127)-32);			
    8b36:	4f 77       	andi	r20, 0x7F	; 127
    8b38:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    8b3a:	61 2f       	mov	r22, r17
    8b3c:	8c 2f       	mov	r24, r28
    8b3e:	80 0f       	add	r24, r16
    8b40:	0e 94 bf 37 	call	0x6f7e	; 0x6f7e <SetFont>
    8b44:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    8b46:	f3 cf       	rjmp	.-26     	; 0x8b2e <Print+0x12>
	
}
    8b48:	df 91       	pop	r29
    8b4a:	cf 91       	pop	r28
    8b4c:	1f 91       	pop	r17
    8b4e:	0f 91       	pop	r16
    8b50:	08 95       	ret

00008b52 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    8b52:	40 52       	subi	r20, 0x20	; 32
    8b54:	0c 94 bf 37 	jmp	0x6f7e	; 0x6f7e <SetFont>

00008b58 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8b58:	0f 93       	push	r16
    8b5a:	1f 93       	push	r17
    8b5c:	cf 93       	push	r28
    8b5e:	df 93       	push	r29
    8b60:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b62:	c0 e0       	ldi	r28, 0x00	; 0
    8b64:	d0 e0       	ldi	r29, 0x00	; 0
    8b66:	c0 17       	cp	r28, r16
    8b68:	d1 07       	cpc	r29, r17
    8b6a:	44 f4       	brge	.+16     	; 0x8b7c <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8b6c:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <GetVsyncFlag>
    8b70:	88 23       	and	r24, r24
    8b72:	e1 f3       	breq	.-8      	; 0x8b6c <WaitVsync+0x14>
		ClearVsyncFlag();		
    8b74:	0e 94 dd 37 	call	0x6fba	; 0x6fba <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b78:	21 96       	adiw	r28, 0x01	; 1
    8b7a:	f5 cf       	rjmp	.-22     	; 0x8b66 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8b7c:	df 91       	pop	r29
    8b7e:	cf 91       	pop	r28
    8b80:	1f 91       	pop	r17
    8b82:	0f 91       	pop	r16
    8b84:	08 95       	ret

00008b86 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8b86:	80 93 b5 0b 	sts	0x0BB5, r24
	currFadeFrame=0;
    8b8a:	10 92 b9 0b 	sts	0x0BB9, r1
	fadeActive=true;
    8b8e:	81 e0       	ldi	r24, 0x01	; 1
    8b90:	80 93 b8 0b 	sts	0x0BB8, r24
		
	if(blocking){
    8b94:	66 23       	and	r22, r22
    8b96:	21 f0       	breq	.+8      	; 0x8ba0 <doFade+0x1a>
		while(fadeActive==true);
    8b98:	80 91 b8 0b 	lds	r24, 0x0BB8
    8b9c:	81 11       	cpse	r24, r1
    8b9e:	fc cf       	rjmp	.-8      	; 0x8b98 <doFade+0x12>
    8ba0:	08 95       	ret

00008ba2 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8ba2:	81 11       	cpse	r24, r1
    8ba4:	03 c0       	rjmp	.+6      	; 0x8bac <FadeIn+0xa>
		DDRC=0xff;
    8ba6:	8f ef       	ldi	r24, 0xFF	; 255
    8ba8:	87 b9       	out	0x07, r24	; 7
		return;
    8baa:	08 95       	ret
	}
	fadeStep=1;
    8bac:	91 e0       	ldi	r25, 0x01	; 1
    8bae:	90 93 ba 0b 	sts	0x0BBA, r25
	fadeDir=1;
    8bb2:	90 93 b6 0b 	sts	0x0BB6, r25
	doFade(speed,blocking);
    8bb6:	0c 94 c3 45 	jmp	0x8b86	; 0x8b86 <doFade>

00008bba <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8bba:	81 11       	cpse	r24, r1
    8bbc:	02 c0       	rjmp	.+4      	; 0x8bc2 <FadeOut+0x8>
		DDRC=0;
    8bbe:	17 b8       	out	0x07, r1	; 7
		return;
    8bc0:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8bc2:	9c e0       	ldi	r25, 0x0C	; 12
    8bc4:	90 93 ba 0b 	sts	0x0BBA, r25
	fadeDir=-1;
    8bc8:	9f ef       	ldi	r25, 0xFF	; 255
    8bca:	90 93 b6 0b 	sts	0x0BB6, r25
	doFade(speed,blocking);
    8bce:	0c 94 c3 45 	jmp	0x8b86	; 0x8b86 <doFade>

00008bd2 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8bd2:	80 91 b8 0b 	lds	r24, 0x0BB8
    8bd6:	88 23       	and	r24, r24
    8bd8:	01 f1       	breq	.+64     	; 0x8c1a <ProcessFading+0x48>
		if(currFadeFrame==0){
    8bda:	80 91 b9 0b 	lds	r24, 0x0BB9
    8bde:	81 11       	cpse	r24, r1
    8be0:	19 c0       	rjmp	.+50     	; 0x8c14 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8be2:	80 91 b5 0b 	lds	r24, 0x0BB5
    8be6:	80 93 b9 0b 	sts	0x0BB9, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8bea:	e0 91 ba 0b 	lds	r30, 0x0BBA
    8bee:	f0 e0       	ldi	r31, 0x00	; 0
    8bf0:	e7 51       	subi	r30, 0x17	; 23
    8bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    8bf4:	e4 91       	lpm	r30, Z
    8bf6:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8bf8:	80 91 b6 0b 	lds	r24, 0x0BB6
    8bfc:	90 91 ba 0b 	lds	r25, 0x0BBA
    8c00:	89 0f       	add	r24, r25
    8c02:	80 93 ba 0b 	sts	0x0BBA, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8c06:	88 23       	and	r24, r24
    8c08:	11 f0       	breq	.+4      	; 0x8c0e <ProcessFading+0x3c>
    8c0a:	8d 30       	cpi	r24, 0x0D	; 13
    8c0c:	31 f4       	brne	.+12     	; 0x8c1a <ProcessFading+0x48>
				fadeActive=false;
    8c0e:	10 92 b8 0b 	sts	0x0BB8, r1
    8c12:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8c14:	81 50       	subi	r24, 0x01	; 1
    8c16:	80 93 b9 0b 	sts	0x0BB9, r24
    8c1a:	08 95       	ret

00008c1c <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8c1c:	0e 94 e9 45 	call	0x8bd2	; 0x8bd2 <ProcessFading>
		ProcessSprites();
    8c20:	0c 94 97 43 	jmp	0x872e	; 0x872e <ProcessSprites>

00008c24 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    8c24:	cf 93       	push	r28
    8c26:	df 93       	push	r29
    8c28:	fc 01       	movw	r30, r24
    8c2a:	eb 01       	movw	r28, r22
	*looped = 0;
    8c2c:	18 82       	st	Y, r1
	anim->frame_count += 1;
    8c2e:	93 81       	ldd	r25, Z+3	; 0x03
    8c30:	9f 5f       	subi	r25, 0xFF	; 255
    8c32:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8c34:	22 81       	ldd	r18, Z+2	; 0x02
    8c36:	80 81       	ld	r24, Z
    8c38:	92 17       	cp	r25, r18
    8c3a:	68 f0       	brcs	.+26     	; 0x8c56 <LBGetNextFrame+0x32>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    8c3c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8c3e:	90 e0       	ldi	r25, 0x00	; 0
    8c40:	01 96       	adiw	r24, 0x01	; 1
    8c42:	61 81       	ldd	r22, Z+1	; 0x01
    8c44:	70 e0       	ldi	r23, 0x00	; 0
    8c46:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    8c4a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    8c4c:	89 2b       	or	r24, r25
    8c4e:	11 f4       	brne	.+4      	; 0x8c54 <LBGetNextFrame+0x30>
    8c50:	81 e0       	ldi	r24, 0x01	; 1
    8c52:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    8c54:	80 81       	ld	r24, Z
    8c56:	e8 0f       	add	r30, r24
    8c58:	f1 1d       	adc	r31, r1
    8c5a:	e8 0f       	add	r30, r24
    8c5c:	f1 1d       	adc	r31, r1
    8c5e:	84 81       	ldd	r24, Z+4	; 0x04
    8c60:	95 81       	ldd	r25, Z+5	; 0x05
}
    8c62:	df 91       	pop	r29
    8c64:	cf 91       	pop	r28
    8c66:	08 95       	ret

00008c68 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    8c68:	0f 93       	push	r16
    8c6a:	1f 93       	push	r17
    8c6c:	cf 93       	push	r28
    8c6e:	df 93       	push	r29
    8c70:	ec 01       	movw	r28, r24
    8c72:	8b 01       	movw	r16, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    8c74:	80 e0       	ldi	r24, 0x00	; 0
    8c76:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <ReadJoypad>
    8c7a:	9d 83       	std	Y+5, r25	; 0x05
    8c7c:	8c 83       	std	Y+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    8c7e:	40 91 34 0b 	lds	r20, 0x0B34
    8c82:	50 91 35 0b 	lds	r21, 0x0B35
    8c86:	9a 01       	movw	r18, r20
    8c88:	20 95       	com	r18
    8c8a:	30 95       	com	r19
    8c8c:	28 23       	and	r18, r24
    8c8e:	39 23       	and	r19, r25
    8c90:	39 83       	std	Y+1, r19	; 0x01
    8c92:	28 83       	st	Y, r18
	p1->released = p1_prev & (p1->held ^ p1_prev);
    8c94:	9c 01       	movw	r18, r24
    8c96:	20 95       	com	r18
    8c98:	30 95       	com	r19
    8c9a:	24 23       	and	r18, r20
    8c9c:	35 23       	and	r19, r21
    8c9e:	3b 83       	std	Y+3, r19	; 0x03
    8ca0:	2a 83       	std	Y+2, r18	; 0x02
	p1_prev = p1->held;
    8ca2:	90 93 35 0b 	sts	0x0B35, r25
    8ca6:	80 93 34 0b 	sts	0x0B34, r24
	p2->held = ReadJoypad(1);
    8caa:	81 e0       	ldi	r24, 0x01	; 1
    8cac:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <ReadJoypad>
    8cb0:	f8 01       	movw	r30, r16
    8cb2:	95 83       	std	Z+5, r25	; 0x05
    8cb4:	84 83       	std	Z+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    8cb6:	40 91 32 0b 	lds	r20, 0x0B32
    8cba:	50 91 33 0b 	lds	r21, 0x0B33
    8cbe:	9a 01       	movw	r18, r20
    8cc0:	20 95       	com	r18
    8cc2:	30 95       	com	r19
    8cc4:	28 23       	and	r18, r24
    8cc6:	39 23       	and	r19, r25
    8cc8:	31 83       	std	Z+1, r19	; 0x01
    8cca:	20 83       	st	Z, r18
	p2->released = p2_prev & (p2->held ^ p2_prev);
    8ccc:	9c 01       	movw	r18, r24
    8cce:	20 95       	com	r18
    8cd0:	30 95       	com	r19
    8cd2:	24 23       	and	r18, r20
    8cd4:	35 23       	and	r19, r21
    8cd6:	33 83       	std	Z+3, r19	; 0x03
    8cd8:	22 83       	std	Z+2, r18	; 0x02
	p2_prev = p2->held;
    8cda:	90 93 33 0b 	sts	0x0B33, r25
    8cde:	80 93 32 0b 	sts	0x0B32, r24
}
    8ce2:	df 91       	pop	r29
    8ce4:	cf 91       	pop	r28
    8ce6:	1f 91       	pop	r17
    8ce8:	0f 91       	pop	r16
    8cea:	08 95       	ret

00008cec <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    8cec:	26 2f       	mov	r18, r22
	for (u8 i = 0; i < count; i++)
    8cee:	fb 01       	movw	r30, r22
    8cf0:	3e 2f       	mov	r19, r30
    8cf2:	32 1b       	sub	r19, r18
    8cf4:	34 17       	cp	r19, r20
    8cf6:	28 f4       	brcc	.+10     	; 0x8d02 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    8cf8:	31 91       	ld	r19, Z+
    8cfa:	dc 01       	movw	r26, r24
    8cfc:	3d 93       	st	X+, r19
    8cfe:	cd 01       	movw	r24, r26
    8d00:	f7 cf       	rjmp	.-18     	; 0x8cf0 <LBCopyChars+0x4>
	}
}
    8d02:	08 95       	ret

00008d04 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    8d04:	af 92       	push	r10
    8d06:	bf 92       	push	r11
    8d08:	cf 92       	push	r12
    8d0a:	df 92       	push	r13
    8d0c:	ef 92       	push	r14
    8d0e:	ff 92       	push	r15
    8d10:	0f 93       	push	r16
    8d12:	1f 93       	push	r17
    8d14:	cf 93       	push	r28
    8d16:	df 93       	push	r29
    8d18:	1f 92       	push	r1
    8d1a:	cd b7       	in	r28, 0x3d	; 61
    8d1c:	de b7       	in	r29, 0x3e	; 62
    8d1e:	8a 01       	movw	r16, r20
	for (u8 i = 0; i < count; i++)
    8d20:	5a 01       	movw	r10, r20
	{
		PrintChar(x+i, y, txt[i]);
    8d22:	c6 2e       	mov	r12, r22
    8d24:	d1 2c       	mov	r13, r1
    8d26:	e8 2e       	mov	r14, r24
    8d28:	f1 2c       	mov	r15, r1
    8d2a:	e4 1a       	sub	r14, r20
    8d2c:	f5 0a       	sbc	r15, r21
    8d2e:	8a 2d       	mov	r24, r10
    8d30:	80 1b       	sub	r24, r16
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    8d32:	82 17       	cp	r24, r18
    8d34:	60 f4       	brcc	.+24     	; 0x8d4e <LBPrintStr+0x4a>
    8d36:	c7 01       	movw	r24, r14
    8d38:	8a 0d       	add	r24, r10
    8d3a:	9b 1d       	adc	r25, r11
	{
		PrintChar(x+i, y, txt[i]);
    8d3c:	f5 01       	movw	r30, r10
    8d3e:	41 91       	ld	r20, Z+
    8d40:	5f 01       	movw	r10, r30
    8d42:	b6 01       	movw	r22, r12
    8d44:	29 83       	std	Y+1, r18	; 0x01
    8d46:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
    8d4a:	29 81       	ldd	r18, Y+1	; 0x01
    8d4c:	f0 cf       	rjmp	.-32     	; 0x8d2e <LBPrintStr+0x2a>
	}
}
    8d4e:	0f 90       	pop	r0
    8d50:	df 91       	pop	r29
    8d52:	cf 91       	pop	r28
    8d54:	1f 91       	pop	r17
    8d56:	0f 91       	pop	r16
    8d58:	ff 90       	pop	r15
    8d5a:	ef 90       	pop	r14
    8d5c:	df 90       	pop	r13
    8d5e:	cf 90       	pop	r12
    8d60:	bf 90       	pop	r11
    8d62:	af 90       	pop	r10
    8d64:	08 95       	ret

00008d66 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    8d66:	af 92       	push	r10
    8d68:	cf 92       	push	r12
    8d6a:	ef 92       	push	r14
    8d6c:	ff 92       	push	r15
    8d6e:	0f 93       	push	r16
    8d70:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    8d72:	70 e0       	ldi	r23, 0x00	; 0
    8d74:	f1 2c       	mov	r15, r1
    8d76:	fb 01       	movw	r30, r22
    8d78:	e2 0f       	add	r30, r18
    8d7a:	f1 1d       	adc	r31, r1
    8d7c:	ee 15       	cp	r30, r14
    8d7e:	ff 05       	cpc	r31, r15
    8d80:	a4 f0       	brlt	.+40     	; 0x8daa <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    8d82:	ea 0c       	add	r14, r10
    8d84:	f1 1c       	adc	r15, r1
    8d86:	e6 16       	cp	r14, r22
    8d88:	f7 06       	cpc	r15, r23
    8d8a:	7c f0       	brlt	.+30     	; 0x8daa <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    8d8c:	28 2f       	mov	r18, r24
    8d8e:	30 e0       	ldi	r19, 0x00	; 0
    8d90:	10 e0       	ldi	r17, 0x00	; 0
    8d92:	c9 01       	movw	r24, r18
    8d94:	84 0f       	add	r24, r20
    8d96:	91 1d       	adc	r25, r1
    8d98:	80 17       	cp	r24, r16
    8d9a:	91 07       	cpc	r25, r17
    8d9c:	34 f0       	brlt	.+12     	; 0x8daa <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    8d9e:	0c 0d       	add	r16, r12
    8da0:	11 1d       	adc	r17, r1
    8da2:	81 e0       	ldi	r24, 0x01	; 1
    8da4:	02 17       	cp	r16, r18
    8da6:	13 07       	cpc	r17, r19
    8da8:	0c f4       	brge	.+2      	; 0x8dac <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    8daa:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    8dac:	1f 91       	pop	r17
    8dae:	0f 91       	pop	r16
    8db0:	ff 90       	pop	r15
    8db2:	ef 90       	pop	r14
    8db4:	cf 90       	pop	r12
    8db6:	af 90       	pop	r10
    8db8:	08 95       	ret

00008dba <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    8dba:	2f 92       	push	r2
    8dbc:	3f 92       	push	r3
    8dbe:	4f 92       	push	r4
    8dc0:	5f 92       	push	r5
    8dc2:	6f 92       	push	r6
    8dc4:	7f 92       	push	r7
    8dc6:	8f 92       	push	r8
    8dc8:	9f 92       	push	r9
    8dca:	af 92       	push	r10
    8dcc:	bf 92       	push	r11
    8dce:	cf 92       	push	r12
    8dd0:	df 92       	push	r13
    8dd2:	ef 92       	push	r14
    8dd4:	ff 92       	push	r15
    8dd6:	0f 93       	push	r16
    8dd8:	1f 93       	push	r17
    8dda:	cf 93       	push	r28
    8ddc:	df 93       	push	r29
    8dde:	00 d0       	rcall	.+0      	; 0x8de0 <LBLineIntersect+0x26>
    8de0:	00 d0       	rcall	.+0      	; 0x8de2 <LBLineIntersect+0x28>
    8de2:	cd b7       	in	r28, 0x3d	; 61
    8de4:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8de6:	f1 2c       	mov	r15, r1
    8de8:	b1 2c       	mov	r11, r1
    8dea:	ae 18       	sub	r10, r14
    8dec:	bf 08       	sbc	r11, r15
    8dee:	28 2e       	mov	r2, r24
    8df0:	31 2c       	mov	r3, r1
    8df2:	84 2f       	mov	r24, r20
    8df4:	90 e0       	ldi	r25, 0x00	; 0
    8df6:	82 19       	sub	r24, r2
    8df8:	93 09       	sbc	r25, r3
    8dfa:	9c 83       	std	Y+4, r25	; 0x04
    8dfc:	8b 83       	std	Y+3, r24	; 0x03
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8dfe:	80 2e       	mov	r8, r16
    8e00:	91 2c       	mov	r9, r1
    8e02:	d1 2c       	mov	r13, r1
    8e04:	c8 18       	sub	r12, r8
    8e06:	d9 08       	sbc	r13, r9
    8e08:	06 2f       	mov	r16, r22
    8e0a:	10 e0       	ldi	r17, 0x00	; 0
    8e0c:	e2 2f       	mov	r30, r18
    8e0e:	f0 e0       	ldi	r31, 0x00	; 0
    8e10:	fa 83       	std	Y+2, r31	; 0x02
    8e12:	e9 83       	std	Y+1, r30	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8e14:	9c 01       	movw	r18, r24
    8e16:	a2 9e       	mul	r10, r18
    8e18:	c0 01       	movw	r24, r0
    8e1a:	a3 9e       	mul	r10, r19
    8e1c:	90 0d       	add	r25, r0
    8e1e:	b2 9e       	mul	r11, r18
    8e20:	90 0d       	add	r25, r0
    8e22:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8e24:	a8 01       	movw	r20, r16
    8e26:	4e 1b       	sub	r20, r30
    8e28:	5f 0b       	sbc	r21, r31
    8e2a:	c4 9e       	mul	r12, r20
    8e2c:	90 01       	movw	r18, r0
    8e2e:	c5 9e       	mul	r12, r21
    8e30:	30 0d       	add	r19, r0
    8e32:	d4 9e       	mul	r13, r20
    8e34:	30 0d       	add	r19, r0
    8e36:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8e38:	82 0f       	add	r24, r18
    8e3a:	93 1f       	adc	r25, r19
    8e3c:	bc 01       	movw	r22, r24
    8e3e:	88 27       	eor	r24, r24
    8e40:	77 fd       	sbrc	r23, 7
    8e42:	80 95       	com	r24
    8e44:	98 2f       	mov	r25, r24
    8e46:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    8e4a:	2b 01       	movw	r4, r22
    8e4c:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8e4e:	20 e0       	ldi	r18, 0x00	; 0
    8e50:	30 e0       	ldi	r19, 0x00	; 0
    8e52:	a9 01       	movw	r20, r18
    8e54:	0e 94 b3 5a 	call	0xb566	; 0xb566 <__cmpsf2>
    8e58:	88 23       	and	r24, r24
    8e5a:	09 f4       	brne	.+2      	; 0x8e5e <LBLineIntersect+0xa4>
    8e5c:	6e c0       	rjmp	.+220    	; 0x8f3a <LBLineIntersect+0x180>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e5e:	c8 01       	movw	r24, r16
    8e60:	8e 19       	sub	r24, r14
    8e62:	9f 09       	sbc	r25, r15
    8e64:	7c 01       	movw	r14, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8e66:	f4 01       	movw	r30, r8
    8e68:	e2 19       	sub	r30, r2
    8e6a:	f3 09       	sbc	r31, r3
    8e6c:	1f 01       	movw	r2, r30

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e6e:	ce 9c       	mul	r12, r14
    8e70:	c0 01       	movw	r24, r0
    8e72:	cf 9c       	mul	r12, r15
    8e74:	90 0d       	add	r25, r0
    8e76:	de 9c       	mul	r13, r14
    8e78:	90 0d       	add	r25, r0
    8e7a:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8e7c:	ae 9e       	mul	r10, r30
    8e7e:	90 01       	movw	r18, r0
    8e80:	af 9e       	mul	r10, r31
    8e82:	30 0d       	add	r19, r0
    8e84:	be 9e       	mul	r11, r30
    8e86:	30 0d       	add	r19, r0
    8e88:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e8a:	82 0f       	add	r24, r18
    8e8c:	93 1f       	adc	r25, r19
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8e8e:	bc 01       	movw	r22, r24
    8e90:	88 27       	eor	r24, r24
    8e92:	77 fd       	sbrc	r23, 7
    8e94:	80 95       	com	r24
    8e96:	98 2f       	mov	r25, r24
    8e98:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e9c:	a3 01       	movw	r20, r6
    8e9e:	92 01       	movw	r18, r4
    8ea0:	0e 94 b7 5a 	call	0xb56e	; 0xb56e <__divsf3>
    8ea4:	4b 01       	movw	r8, r22
    8ea6:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8ea8:	20 e0       	ldi	r18, 0x00	; 0
    8eaa:	30 e0       	ldi	r19, 0x00	; 0
    8eac:	a9 01       	movw	r20, r18
    8eae:	0e 94 b3 5a 	call	0xb566	; 0xb566 <__cmpsf2>
    8eb2:	87 fd       	sbrc	r24, 7
    8eb4:	42 c0       	rjmp	.+132    	; 0x8f3a <LBLineIntersect+0x180>
    8eb6:	20 e0       	ldi	r18, 0x00	; 0
    8eb8:	30 e0       	ldi	r19, 0x00	; 0
    8eba:	40 e8       	ldi	r20, 0x80	; 128
    8ebc:	5f e3       	ldi	r21, 0x3F	; 63
    8ebe:	c5 01       	movw	r24, r10
    8ec0:	b4 01       	movw	r22, r8
    8ec2:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <__gesf2>
    8ec6:	18 16       	cp	r1, r24
    8ec8:	c4 f1       	brlt	.+112    	; 0x8f3a <LBLineIntersect+0x180>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8eca:	2b 81       	ldd	r18, Y+3	; 0x03
    8ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    8ece:	2e 9d       	mul	r18, r14
    8ed0:	b0 01       	movw	r22, r0
    8ed2:	2f 9d       	mul	r18, r15
    8ed4:	70 0d       	add	r23, r0
    8ed6:	3e 9d       	mul	r19, r14
    8ed8:	70 0d       	add	r23, r0
    8eda:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8edc:	29 81       	ldd	r18, Y+1	; 0x01
    8ede:	3a 81       	ldd	r19, Y+2	; 0x02
    8ee0:	20 1b       	sub	r18, r16
    8ee2:	31 0b       	sbc	r19, r17
    8ee4:	22 9d       	mul	r18, r2
    8ee6:	c0 01       	movw	r24, r0
    8ee8:	23 9d       	mul	r18, r3
    8eea:	90 0d       	add	r25, r0
    8eec:	32 9d       	mul	r19, r2
    8eee:	90 0d       	add	r25, r0
    8ef0:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8ef2:	68 0f       	add	r22, r24
    8ef4:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8ef6:	88 27       	eor	r24, r24
    8ef8:	77 fd       	sbrc	r23, 7
    8efa:	80 95       	com	r24
    8efc:	98 2f       	mov	r25, r24
    8efe:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8f02:	a3 01       	movw	r20, r6
    8f04:	92 01       	movw	r18, r4
    8f06:	0e 94 b7 5a 	call	0xb56e	; 0xb56e <__divsf3>
    8f0a:	6b 01       	movw	r12, r22
    8f0c:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8f0e:	20 e0       	ldi	r18, 0x00	; 0
    8f10:	30 e0       	ldi	r19, 0x00	; 0
    8f12:	a9 01       	movw	r20, r18
    8f14:	0e 94 b3 5a 	call	0xb566	; 0xb566 <__cmpsf2>
    8f18:	87 fd       	sbrc	r24, 7
    8f1a:	0f c0       	rjmp	.+30     	; 0x8f3a <LBLineIntersect+0x180>
    8f1c:	11 e0       	ldi	r17, 0x01	; 1
    8f1e:	20 e0       	ldi	r18, 0x00	; 0
    8f20:	30 e0       	ldi	r19, 0x00	; 0
    8f22:	40 e8       	ldi	r20, 0x80	; 128
    8f24:	5f e3       	ldi	r21, 0x3F	; 63
    8f26:	c7 01       	movw	r24, r14
    8f28:	b6 01       	movw	r22, r12
    8f2a:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <__gesf2>
    8f2e:	18 16       	cp	r1, r24
    8f30:	0c f0       	brlt	.+2      	; 0x8f34 <LBLineIntersect+0x17a>
    8f32:	10 e0       	ldi	r17, 0x00	; 0
    8f34:	81 e0       	ldi	r24, 0x01	; 1
    8f36:	81 27       	eor	r24, r17
    8f38:	01 c0       	rjmp	.+2      	; 0x8f3c <LBLineIntersect+0x182>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8f3a:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    8f3c:	0f 90       	pop	r0
    8f3e:	0f 90       	pop	r0
    8f40:	0f 90       	pop	r0
    8f42:	0f 90       	pop	r0
    8f44:	df 91       	pop	r29
    8f46:	cf 91       	pop	r28
    8f48:	1f 91       	pop	r17
    8f4a:	0f 91       	pop	r16
    8f4c:	ff 90       	pop	r15
    8f4e:	ef 90       	pop	r14
    8f50:	df 90       	pop	r13
    8f52:	cf 90       	pop	r12
    8f54:	bf 90       	pop	r11
    8f56:	af 90       	pop	r10
    8f58:	9f 90       	pop	r9
    8f5a:	8f 90       	pop	r8
    8f5c:	7f 90       	pop	r7
    8f5e:	6f 90       	pop	r6
    8f60:	5f 90       	pop	r5
    8f62:	4f 90       	pop	r4
    8f64:	3f 90       	pop	r3
    8f66:	2f 90       	pop	r2
    8f68:	08 95       	ret

00008f6a <LBRandom>:

int LBRandom(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8f6a:	fc 01       	movw	r30, r24
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
    8f6c:	80 91 31 0b 	lds	r24, 0x0B31
    8f70:	2f ef       	ldi	r18, 0xFF	; 255
    8f72:	3f e7       	ldi	r19, 0x7F	; 127
    8f74:	08 2e       	mov	r0, r24
    8f76:	02 c0       	rjmp	.+4      	; 0x8f7c <LBRandom+0x12>
    8f78:	35 95       	asr	r19
    8f7a:	27 95       	ror	r18
    8f7c:	0a 94       	dec	r0
    8f7e:	e2 f7       	brpl	.-8      	; 0x8f78 <LBRandom+0xe>
	int delta = to - from;
    8f80:	6e 1b       	sub	r22, r30
    8f82:	7f 0b       	sbc	r23, r31

	shift_count++;
    8f84:	8f 5f       	subi	r24, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    8f86:	80 31       	cpi	r24, 0x10	; 16
    8f88:	18 f4       	brcc	.+6      	; 0x8f90 <LBRandom+0x26>
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    8f8a:	80 93 31 0b 	sts	0x0B31, r24
    8f8e:	02 c0       	rjmp	.+4      	; 0x8f94 <LBRandom+0x2a>
	if (shift_count >= 16) shift_count = 0;
    8f90:	10 92 31 0b 	sts	0x0B31, r1

	return from + ((delta + shifted) % delta);
    8f94:	c9 01       	movw	r24, r18
    8f96:	86 0f       	add	r24, r22
    8f98:	97 1f       	adc	r25, r23
    8f9a:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
}
    8f9e:	8e 0f       	add	r24, r30
    8fa0:	9f 1f       	adc	r25, r31
    8fa2:	08 95       	ret

00008fa4 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    8fa4:	cf 93       	push	r28
    8fa6:	df 93       	push	r29
    8fa8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    8faa:	c0 e0       	ldi	r28, 0x00	; 0
    8fac:	cd 17       	cp	r28, r29
    8fae:	31 f0       	breq	.+12     	; 0x8fbc <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    8fb0:	8f ef       	ldi	r24, 0xFF	; 255
    8fb2:	9f ef       	ldi	r25, 0xFF	; 255
    8fb4:	0e 94 ef 37 	call	0x6fde	; 0x6fde <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    8fb8:	cf 5f       	subi	r28, 0xFF	; 255
    8fba:	f8 cf       	rjmp	.-16     	; 0x8fac <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    8fbc:	df 91       	pop	r29
    8fbe:	cf 91       	pop	r28
    8fc0:	08 95       	ret

00008fc2 <init_tile_animations>:
	.select_state = SELECTING,
};

/* Initializers */
void init_tile_animations(TileAnimations* ta)
{
    8fc2:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    8fc4:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    8fc6:	14 86       	std	Z+12, r1	; 0x0c
    8fc8:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    8fca:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    8fcc:	73 e0       	ldi	r23, 0x03	; 3
    8fce:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8fd0:	65 e0       	ldi	r22, 0x05	; 5
    8fd2:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    8fd4:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    8fd6:	44 e4       	ldi	r20, 0x44	; 68
    8fd8:	51 e2       	ldi	r21, 0x21	; 33
    8fda:	56 83       	std	Z+6, r21	; 0x06
    8fdc:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8fde:	21 e4       	ldi	r18, 0x41	; 65
    8fe0:	31 e2       	ldi	r19, 0x21	; 33
    8fe2:	30 87       	std	Z+8, r19	; 0x08
    8fe4:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    8fe6:	8e e3       	ldi	r24, 0x3E	; 62
    8fe8:	91 e2       	ldi	r25, 0x21	; 33
    8fea:	92 87       	std	Z+10, r25	; 0x0a
    8fec:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    8fee:	10 8e       	std	Z+24, r1	; 0x18
    8ff0:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    8ff2:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    8ff4:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8ff6:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    8ff8:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    8ffa:	52 8b       	std	Z+18, r21	; 0x12
    8ffc:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8ffe:	34 8b       	std	Z+20, r19	; 0x14
    9000:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9002:	96 8b       	std	Z+22, r25	; 0x16
    9004:	85 8b       	std	Z+21, r24	; 0x15
    9006:	08 95       	ret

00009008 <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9008:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    900a:	84 e6       	ldi	r24, 0x64	; 100
    900c:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    900e:	10 82       	st	Z, r1
	s->active = 0;
    9010:	15 86       	std	Z+13, r1	; 0x0d
	s->distance = 0;
    9012:	16 86       	std	Z+14, r1	; 0x0e
	s->shot_type = shot_type;
    9014:	62 87       	std	Z+10, r22	; 0x0a
	s->rebounds = SHOT_REBOUNDS;
    9016:	84 e0       	ldi	r24, 0x04	; 4
    9018:	84 87       	std	Z+12, r24	; 0x0c
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    901a:	61 11       	cpse	r22, r1
    901c:	02 c0       	rjmp	.+4      	; 0x9022 <init_shot_state+0x1a>
    901e:	81 e0       	ldi	r24, 0x01	; 1
    9020:	01 c0       	rjmp	.+2      	; 0x9024 <init_shot_state+0x1c>
    9022:	85 e0       	ldi	r24, 0x05	; 5
    9024:	83 87       	std	Z+11, r24	; 0x0b
	s->shared.x = OFF_SCREEN;
    9026:	40 e0       	ldi	r20, 0x00	; 0
    9028:	50 e0       	ldi	r21, 0x00	; 0
    902a:	60 e7       	ldi	r22, 0x70	; 112
    902c:	73 e4       	ldi	r23, 0x43	; 67
    902e:	42 83       	std	Z+2, r20	; 0x02
    9030:	53 83       	std	Z+3, r21	; 0x03
    9032:	64 83       	std	Z+4, r22	; 0x04
    9034:	75 83       	std	Z+5, r23	; 0x05
	s->shared.y = 0;
    9036:	16 82       	std	Z+6, r1	; 0x06
    9038:	17 82       	std	Z+7, r1	; 0x07
    903a:	10 86       	std	Z+8, r1	; 0x08
    903c:	11 86       	std	Z+9, r1	; 0x09
    903e:	08 95       	ret

00009040 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9040:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    9042:	17 86       	std	Z+15, r1	; 0x0f
	s->up_anim.anim_count = 2;
    9044:	82 e0       	ldi	r24, 0x02	; 2
    9046:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9048:	85 e0       	ldi	r24, 0x05	; 5
    904a:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frame_count = 0;
    904c:	12 8a       	std	Z+18, r1	; 0x12
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    904e:	61 11       	cpse	r22, r1
    9050:	03 c0       	rjmp	.+6      	; 0x9058 <set_shot_animations+0x18>
    9052:	84 ee       	ldi	r24, 0xE4	; 228
    9054:	90 e2       	ldi	r25, 0x20	; 32
    9056:	02 c0       	rjmp	.+4      	; 0x905c <set_shot_animations+0x1c>
    9058:	81 ee       	ldi	r24, 0xE1	; 225
    905a:	90 e2       	ldi	r25, 0x20	; 32
    905c:	94 8b       	std	Z+20, r25	; 0x14
    905e:	83 8b       	std	Z+19, r24	; 0x13
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    9060:	61 11       	cpse	r22, r1
    9062:	03 c0       	rjmp	.+6      	; 0x906a <set_shot_animations+0x2a>
    9064:	84 ee       	ldi	r24, 0xE4	; 228
    9066:	90 e2       	ldi	r25, 0x20	; 32
    9068:	02 c0       	rjmp	.+4      	; 0x906e <set_shot_animations+0x2e>
    906a:	8e ed       	ldi	r24, 0xDE	; 222
    906c:	90 e2       	ldi	r25, 0x20	; 32
    906e:	96 8b       	std	Z+22, r25	; 0x16
    9070:	85 8b       	std	Z+21, r24	; 0x15
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    9072:	82 e0       	ldi	r24, 0x02	; 2
    9074:	82 8f       	std	Z+26, r24	; 0x1a
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9076:	85 e0       	ldi	r24, 0x05	; 5
    9078:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frame_count = 0;
    907a:	14 8e       	std	Z+28, r1	; 0x1c
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    907c:	61 11       	cpse	r22, r1
    907e:	03 c0       	rjmp	.+6      	; 0x9086 <set_shot_animations+0x46>
    9080:	84 ee       	ldi	r24, 0xE4	; 228
    9082:	90 e2       	ldi	r25, 0x20	; 32
    9084:	02 c0       	rjmp	.+4      	; 0x908a <set_shot_animations+0x4a>
    9086:	8b ed       	ldi	r24, 0xDB	; 219
    9088:	90 e2       	ldi	r25, 0x20	; 32
    908a:	96 8f       	std	Z+30, r25	; 0x1e
    908c:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    908e:	61 11       	cpse	r22, r1
    9090:	03 c0       	rjmp	.+6      	; 0x9098 <set_shot_animations+0x58>
    9092:	84 ee       	ldi	r24, 0xE4	; 228
    9094:	90 e2       	ldi	r25, 0x20	; 32
    9096:	02 c0       	rjmp	.+4      	; 0x909c <set_shot_animations+0x5c>
    9098:	88 ed       	ldi	r24, 0xD8	; 216
    909a:	90 e2       	ldi	r25, 0x20	; 32
    909c:	90 a3       	std	Z+32, r25	; 0x20
    909e:	87 8f       	std	Z+31, r24	; 0x1f
    90a0:	08 95       	ret

000090a2 <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    90a2:	0f 93       	push	r16
    90a4:	1f 93       	push	r17
    90a6:	cf 93       	push	r28
    90a8:	df 93       	push	r29
    90aa:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    90ac:	8a e5       	ldi	r24, 0x5A	; 90
    90ae:	8c 8b       	std	Y+20, r24	; 0x14
	p->grace_frame = FRAMES_PER_GRACE;
    90b0:	88 e7       	ldi	r24, 0x78	; 120
    90b2:	8e 8b       	std	Y+22, r24	; 0x16
	p->banter_index = 0;
    90b4:	1d 8a       	std	Y+21, r1	; 0x15
	p->score = 0;
    90b6:	1e 86       	std	Y+14, r1	; 0x0e
	p->level_score = 0;
    90b8:	1f 86       	std	Y+15, r1	; 0x0f
	p->shared.direction = D_UP;
    90ba:	18 82       	st	Y, r1
	p->shared.speed = 0;
    90bc:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    90be:	82 e3       	ldi	r24, 0x32	; 50
    90c0:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    90c2:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    90c4:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    90c6:	1b 8a       	std	Y+19, r1	; 0x13

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    90c8:	fe 01       	movw	r30, r28
    90ca:	e0 5a       	subi	r30, 0xA0	; 160
    90cc:	ff 4f       	sbci	r31, 0xFF	; 255
    90ce:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    90d0:	fe 01       	movw	r30, r28
    90d2:	ef 59       	subi	r30, 0x9F	; 159
    90d4:	ff 4f       	sbci	r31, 0xFF	; 255
    90d6:	91 e0       	ldi	r25, 0x01	; 1
    90d8:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    90da:	fe 01       	movw	r30, r28
    90dc:	ee 59       	subi	r30, 0x9E	; 158
    90de:	ff 4f       	sbci	r31, 0xFF	; 255
    90e0:	85 e0       	ldi	r24, 0x05	; 5
    90e2:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    90e4:	fe 01       	movw	r30, r28
    90e6:	ed 59       	subi	r30, 0x9D	; 157
    90e8:	ff 4f       	sbci	r31, 0xFF	; 255
    90ea:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    90ec:	fe 01       	movw	r30, r28
    90ee:	ec 59       	subi	r30, 0x9C	; 156
    90f0:	ff 4f       	sbci	r31, 0xFF	; 255
    90f2:	71 83       	std	Z+1, r23	; 0x01
    90f4:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    90f6:	fe 01       	movw	r30, r28
    90f8:	e6 59       	subi	r30, 0x96	; 150
    90fa:	ff 4f       	sbci	r31, 0xFF	; 255
    90fc:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    90fe:	fe 01       	movw	r30, r28
    9100:	e5 59       	subi	r30, 0x95	; 149
    9102:	ff 4f       	sbci	r31, 0xFF	; 255
    9104:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9106:	fe 01       	movw	r30, r28
    9108:	e4 59       	subi	r30, 0x94	; 148
    910a:	ff 4f       	sbci	r31, 0xFF	; 255
    910c:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    910e:	fe 01       	movw	r30, r28
    9110:	e3 59       	subi	r30, 0x93	; 147
    9112:	ff 4f       	sbci	r31, 0xFF	; 255
    9114:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9116:	fe 01       	movw	r30, r28
    9118:	e2 59       	subi	r30, 0x92	; 146
    911a:	ff 4f       	sbci	r31, 0xFF	; 255
    911c:	51 83       	std	Z+1, r21	; 0x01
    911e:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9120:	fe 01       	movw	r30, r28
    9122:	ec 58       	subi	r30, 0x8C	; 140
    9124:	ff 4f       	sbci	r31, 0xFF	; 255
    9126:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9128:	fe 01       	movw	r30, r28
    912a:	eb 58       	subi	r30, 0x8B	; 139
    912c:	ff 4f       	sbci	r31, 0xFF	; 255
    912e:	93 e0       	ldi	r25, 0x03	; 3
    9130:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9132:	fe 01       	movw	r30, r28
    9134:	ea 58       	subi	r30, 0x8A	; 138
    9136:	ff 4f       	sbci	r31, 0xFF	; 255
    9138:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    913a:	fe 01       	movw	r30, r28
    913c:	e9 58       	subi	r30, 0x89	; 137
    913e:	ff 4f       	sbci	r31, 0xFF	; 255
    9140:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9142:	fe 01       	movw	r30, r28
    9144:	e8 58       	subi	r30, 0x88	; 136
    9146:	ff 4f       	sbci	r31, 0xFF	; 255
    9148:	83 ef       	ldi	r24, 0xF3	; 243
    914a:	90 e2       	ldi	r25, 0x20	; 32
    914c:	91 83       	std	Z+1, r25	; 0x01
    914e:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9150:	fe 01       	movw	r30, r28
    9152:	e6 58       	subi	r30, 0x86	; 134
    9154:	ff 4f       	sbci	r31, 0xFF	; 255
    9156:	8d ee       	ldi	r24, 0xED	; 237
    9158:	90 e2       	ldi	r25, 0x20	; 32
    915a:	91 83       	std	Z+1, r25	; 0x01
    915c:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    915e:	fe 01       	movw	r30, r28
    9160:	e4 58       	subi	r30, 0x84	; 132
    9162:	ff 4f       	sbci	r31, 0xFF	; 255
    9164:	87 ee       	ldi	r24, 0xE7	; 231
    9166:	90 e2       	ldi	r25, 0x20	; 32
    9168:	91 83       	std	Z+1, r25	; 0x01
    916a:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    916c:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    916e:	8e 01       	movw	r16, r28
    9170:	06 5e       	subi	r16, 0xE6	; 230
    9172:	1f 4f       	sbci	r17, 0xFF	; 255
    9174:	60 e0       	ldi	r22, 0x00	; 0
    9176:	c8 01       	movw	r24, r16
    9178:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    917c:	60 e0       	ldi	r22, 0x00	; 0
    917e:	c8 01       	movw	r24, r16
    9180:	0e 94 20 48 	call	0x9040	; 0x9040 <set_shot_animations>

	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9184:	ed 96       	adiw	r28, 0x3d	; 61
    9186:	60 e0       	ldi	r22, 0x00	; 0
    9188:	ce 01       	movw	r24, r28
    918a:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    918e:	60 e0       	ldi	r22, 0x00	; 0
    9190:	ce 01       	movw	r24, r28
	}
}
    9192:	df 91       	pop	r29
    9194:	cf 91       	pop	r28
    9196:	1f 91       	pop	r17
    9198:	0f 91       	pop	r16
	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    919a:	0c 94 20 48 	jmp	0x9040	; 0x9040 <set_shot_animations>

0000919e <player_init_shot_state>:
	}
}

void player_init_shot_state(Player* player)
{
    919e:	cf 93       	push	r28
    91a0:	df 93       	push	r29
    91a2:	ec 01       	movw	r28, r24
	player->active_shots = 0;
    91a4:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    91a6:	60 e0       	ldi	r22, 0x00	; 0
    91a8:	4a 96       	adiw	r24, 0x1a	; 26
    91aa:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
    91ae:	60 e0       	ldi	r22, 0x00	; 0
    91b0:	ce 01       	movw	r24, r28
    91b2:	cd 96       	adiw	r24, 0x3d	; 61
	}
}
    91b4:	df 91       	pop	r29
    91b6:	cf 91       	pop	r28
void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    91b8:	0c 94 04 48 	jmp	0x9008	; 0x9008 <init_shot_state>

000091bc <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    91bc:	10 92 c2 0b 	sts	0x0BC2, r1
	game.selection = PVCPU;
    91c0:	10 92 c4 0b 	sts	0x0BC4, r1
	game.paused = 0;
    91c4:	10 92 c3 0b 	sts	0x0BC3, r1
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    91c8:	47 e1       	ldi	r20, 0x17	; 23
    91ca:	51 e2       	ldi	r21, 0x21	; 33
    91cc:	63 e2       	ldi	r22, 0x23	; 35
    91ce:	71 e2       	ldi	r23, 0x21	; 33
    91d0:	8e ed       	ldi	r24, 0xDE	; 222
    91d2:	9b e0       	ldi	r25, 0x0B	; 11
    91d4:	0e 94 51 48 	call	0x90a2	; 0x90a2 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    91d8:	4f ef       	ldi	r20, 0xFF	; 255
    91da:	50 e2       	ldi	r21, 0x20	; 32
    91dc:	6b e0       	ldi	r22, 0x0B	; 11
    91de:	71 e2       	ldi	r23, 0x21	; 33
    91e0:	81 e5       	ldi	r24, 0x51	; 81
    91e2:	9f e0       	ldi	r25, 0x0F	; 15
    91e4:	0c 94 51 48 	jmp	0x90a2	; 0x90a2 <init_player>

000091e8 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    91e8:	cf 93       	push	r28
    91ea:	df 93       	push	r29
    91ec:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    91ee:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    91f0:	69 89       	ldd	r22, Y+17	; 0x11
    91f2:	70 e0       	ldi	r23, 0x00	; 0
    91f4:	80 e0       	ldi	r24, 0x00	; 0
    91f6:	90 e0       	ldi	r25, 0x00	; 0
    91f8:	0e 94 4b 5b 	call	0xb696	; 0xb696 <__floatunsisf>
    91fc:	6a 83       	std	Y+2, r22	; 0x02
    91fe:	7b 83       	std	Y+3, r23	; 0x03
    9200:	8c 83       	std	Y+4, r24	; 0x04
    9202:	9d 83       	std	Y+5, r25	; 0x05
	player->shared.y = player->spawn_y;
    9204:	6a 89       	ldd	r22, Y+18	; 0x12
    9206:	70 e0       	ldi	r23, 0x00	; 0
    9208:	80 e0       	ldi	r24, 0x00	; 0
    920a:	90 e0       	ldi	r25, 0x00	; 0
    920c:	0e 94 4b 5b 	call	0xb696	; 0xb696 <__floatunsisf>
    9210:	6e 83       	std	Y+6, r22	; 0x06
    9212:	7f 83       	std	Y+7, r23	; 0x07
    9214:	88 87       	std	Y+8, r24	; 0x08
    9216:	99 87       	std	Y+9, r25	; 0x09
	player->shared.direction = D_UP;
    9218:	18 82       	st	Y, r1
	player->shared.speed = 0;
    921a:	19 82       	std	Y+1, r1	; 0x01
	
}
    921c:	df 91       	pop	r29
    921e:	cf 91       	pop	r28
    9220:	08 95       	ret

00009222 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9222:	cf 93       	push	r28
    9224:	df 93       	push	r29
    9226:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9228:	bc 01       	movw	r22, r24
    922a:	88 81       	ld	r24, Y
    922c:	99 81       	ldd	r25, Y+1	; 0x01
    922e:	0e 94 ff 38 	call	0x71fe	; 0x71fe <EepromReadBlock>
	if (status == 0x03)
    9232:	83 30       	cpi	r24, 0x03	; 3
    9234:	29 f4       	brne	.+10     	; 0x9240 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9236:	ce 01       	movw	r24, r28
	}
}
    9238:	df 91       	pop	r29
    923a:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    923c:	0c 94 93 38 	jmp	0x7126	; 0x7126 <EepromWriteBlock>
	}
}
    9240:	df 91       	pop	r29
    9242:	cf 91       	pop	r28
    9244:	08 95       	ret

00009246 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9246:	61 e0       	ldi	r22, 0x01	; 1
    9248:	83 e0       	ldi	r24, 0x03	; 3
    924a:	0e 94 dd 45 	call	0x8bba	; 0x8bba <FadeOut>
	ClearVram();
    924e:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9252:	60 e0       	ldi	r22, 0x00	; 0
    9254:	83 e0       	ldi	r24, 0x03	; 3
    9256:	0c 94 d1 45 	jmp	0x8ba2	; 0x8ba2 <FadeIn>

0000925a <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    925a:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    925c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    925e:	40 e0       	ldi	r20, 0x00	; 0
    9260:	69 e2       	ldi	r22, 0x29	; 41
    9262:	71 e2       	ldi	r23, 0x21	; 33
    9264:	8c 2f       	mov	r24, r28
    9266:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
    926a:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    926c:	cc 30       	cpi	r28, 0x0C	; 12
    926e:	b9 f7       	brne	.-18     	; 0x925e <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9270:	cf 91       	pop	r28
    9272:	08 95       	ret

00009274 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9274:	df 92       	push	r13
    9276:	ef 92       	push	r14
    9278:	ff 92       	push	r15
    927a:	0f 93       	push	r16
    927c:	1f 93       	push	r17
    927e:	cf 93       	push	r28
    9280:	df 93       	push	r29
    9282:	cd b7       	in	r28, 0x3d	; 61
    9284:	de b7       	in	r29, 0x3e	; 62
    9286:	28 97       	sbiw	r28, 0x08	; 8
    9288:	0f b6       	in	r0, 0x3f	; 63
    928a:	f8 94       	cli
    928c:	de bf       	out	0x3e, r29	; 62
    928e:	0f be       	out	0x3f, r0	; 63
    9290:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    9292:	90 91 ec 0b 	lds	r25, 0x0BEC
    9296:	80 91 5f 0f 	lds	r24, 0x0F5F
    929a:	98 17       	cp	r25, r24
    929c:	28 f0       	brcs	.+10     	; 0x92a8 <save_score+0x34>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    929e:	e1 e5       	ldi	r30, 0x51	; 81
    92a0:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    92a2:	ae ed       	ldi	r26, 0xDE	; 222
    92a4:	bb e0       	ldi	r27, 0x0B	; 11
    92a6:	04 c0       	rjmp	.+8      	; 0x92b0 <save_score+0x3c>
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
    92a8:	ee ed       	ldi	r30, 0xDE	; 222
    92aa:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    92ac:	a1 e5       	ldi	r26, 0x51	; 81
    92ae:	bf e0       	ldi	r27, 0x0F	; 15
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    92b0:	1a 96       	adiw	r26, 0x0a	; 10
    92b2:	8c 91       	ld	r24, X
    92b4:	1a 97       	sbiw	r26, 0x0a	; 10
    92b6:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    92b8:	82 85       	ldd	r24, Z+10	; 0x0a
    92ba:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    92bc:	1e 96       	adiw	r26, 0x0e	; 14
    92be:	9c 91       	ld	r25, X
    92c0:	9b 83       	std	Y+3, r25	; 0x03
	save_score[3] = p_lose->score;
    92c2:	86 85       	ldd	r24, Z+14	; 0x0e
    92c4:	8c 83       	std	Y+4, r24	; 0x04
	save_delta = p_win->score - p_lose->score;
    92c6:	d9 2e       	mov	r13, r25
    92c8:	d8 1a       	sub	r13, r24
    92ca:	09 e0       	ldi	r16, 0x09	; 9
    92cc:	11 e0       	ldi	r17, 0x01	; 1
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    92ce:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    92d0:	88 23       	and	r24, r24
    92d2:	31 f0       	breq	.+12     	; 0x92e0 <save_score+0x6c>
		{
			LBCopyChars(tmp_score, &scores.data[i], 4);
    92d4:	44 e0       	ldi	r20, 0x04	; 4
    92d6:	78 01       	movw	r14, r16
    92d8:	83 e0       	ldi	r24, 0x03	; 3
    92da:	e8 1a       	sub	r14, r24
    92dc:	f1 08       	sbc	r15, r1
    92de:	0d c0       	rjmp	.+26     	; 0x92fa <save_score+0x86>
    92e0:	f8 01       	movw	r30, r16
    92e2:	31 97       	sbiw	r30, 0x01	; 1
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    92e4:	90 81       	ld	r25, Z
    92e6:	f8 01       	movw	r30, r16
    92e8:	20 81       	ld	r18, Z
    92ea:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    92ec:	9d 15       	cp	r25, r13
    92ee:	d0 f4       	brcc	.+52     	; 0x9324 <save_score+0xb0>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    92f0:	44 e0       	ldi	r20, 0x04	; 4
    92f2:	78 01       	movw	r14, r16
    92f4:	f3 e0       	ldi	r31, 0x03	; 3
    92f6:	ef 1a       	sub	r14, r31
    92f8:	f1 08       	sbc	r15, r1
    92fa:	b7 01       	movw	r22, r14
    92fc:	ce 01       	movw	r24, r28
    92fe:	05 96       	adiw	r24, 0x05	; 5
    9300:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    9304:	44 e0       	ldi	r20, 0x04	; 4
    9306:	be 01       	movw	r22, r28
    9308:	6f 5f       	subi	r22, 0xFF	; 255
    930a:	7f 4f       	sbci	r23, 0xFF	; 255
    930c:	c7 01       	movw	r24, r14
    930e:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    9312:	44 e0       	ldi	r20, 0x04	; 4
    9314:	be 01       	movw	r22, r28
    9316:	6b 5f       	subi	r22, 0xFB	; 251
    9318:	7f 4f       	sbci	r23, 0xFF	; 255
    931a:	ce 01       	movw	r24, r28
    931c:	01 96       	adiw	r24, 0x01	; 1
    931e:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
				saved = 1;
    9322:	81 e0       	ldi	r24, 0x01	; 1
    9324:	0c 5f       	subi	r16, 0xFC	; 252
    9326:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    9328:	91 e0       	ldi	r25, 0x01	; 1
    932a:	05 32       	cpi	r16, 0x25	; 37
    932c:	19 07       	cpc	r17, r25
    932e:	81 f6       	brne	.-96     	; 0x92d0 <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9330:	84 e0       	ldi	r24, 0x04	; 4
    9332:	91 e0       	ldi	r25, 0x01	; 1
    9334:	0e 94 93 38 	call	0x7126	; 0x7126 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    9338:	28 96       	adiw	r28, 0x08	; 8
    933a:	0f b6       	in	r0, 0x3f	; 63
    933c:	f8 94       	cli
    933e:	de bf       	out	0x3e, r29	; 62
    9340:	0f be       	out	0x3f, r0	; 63
    9342:	cd bf       	out	0x3d, r28	; 61
    9344:	df 91       	pop	r29
    9346:	cf 91       	pop	r28
    9348:	1f 91       	pop	r17
    934a:	0f 91       	pop	r16
    934c:	ff 90       	pop	r15
    934e:	ef 90       	pop	r14
    9350:	df 90       	pop	r13
    9352:	08 95       	ret

00009354 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    9354:	0f 93       	push	r16
    9356:	1f 93       	push	r17
    9358:	cf 93       	push	r28
    935a:	df 93       	push	r29
    935c:	8c 01       	movw	r16, r24
    935e:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    9360:	88 81       	ld	r24, Y
    9362:	81 30       	cpi	r24, 0x01	; 1
    9364:	69 f1       	breq	.+90     	; 0x93c0 <position_shot+0x6c>
    9366:	98 f0       	brcs	.+38     	; 0x938e <position_shot+0x3a>
    9368:	82 30       	cpi	r24, 0x02	; 2
    936a:	f1 f1       	breq	.+124    	; 0x93e8 <position_shot+0x94>
    936c:	83 30       	cpi	r24, 0x03	; 3
    936e:	09 f0       	breq	.+2      	; 0x9372 <position_shot+0x1e>
    9370:	59 c0       	rjmp	.+178    	; 0x9424 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    9372:	f8 01       	movw	r30, r16
    9374:	42 81       	ldd	r20, Z+2	; 0x02
    9376:	53 81       	ldd	r21, Z+3	; 0x03
    9378:	64 81       	ldd	r22, Z+4	; 0x04
    937a:	75 81       	ldd	r23, Z+5	; 0x05
    937c:	4a 83       	std	Y+2, r20	; 0x02
    937e:	5b 83       	std	Y+3, r21	; 0x03
    9380:	6c 83       	std	Y+4, r22	; 0x04
    9382:	7d 83       	std	Y+5, r23	; 0x05
			shot->shared.y = player->shared.y + 4;
    9384:	20 e0       	ldi	r18, 0x00	; 0
    9386:	30 e0       	ldi	r19, 0x00	; 0
    9388:	40 e8       	ldi	r20, 0x80	; 128
    938a:	50 e4       	ldi	r21, 0x40	; 64
    938c:	41 c0       	rjmp	.+130    	; 0x9410 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    938e:	20 e0       	ldi	r18, 0x00	; 0
    9390:	30 e0       	ldi	r19, 0x00	; 0
    9392:	40 e8       	ldi	r20, 0x80	; 128
    9394:	50 e4       	ldi	r21, 0x40	; 64
    9396:	f8 01       	movw	r30, r16
    9398:	62 81       	ldd	r22, Z+2	; 0x02
    939a:	73 81       	ldd	r23, Z+3	; 0x03
    939c:	84 81       	ldd	r24, Z+4	; 0x04
    939e:	95 81       	ldd	r25, Z+5	; 0x05
    93a0:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    93a4:	6a 83       	std	Y+2, r22	; 0x02
    93a6:	7b 83       	std	Y+3, r23	; 0x03
    93a8:	8c 83       	std	Y+4, r24	; 0x04
    93aa:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y;
    93ac:	f8 01       	movw	r30, r16
    93ae:	86 81       	ldd	r24, Z+6	; 0x06
    93b0:	97 81       	ldd	r25, Z+7	; 0x07
    93b2:	a0 85       	ldd	r26, Z+8	; 0x08
    93b4:	b1 85       	ldd	r27, Z+9	; 0x09
    93b6:	8e 83       	std	Y+6, r24	; 0x06
    93b8:	9f 83       	std	Y+7, r25	; 0x07
    93ba:	a8 87       	std	Y+8, r26	; 0x08
    93bc:	b9 87       	std	Y+9, r27	; 0x09
			break;
    93be:	32 c0       	rjmp	.+100    	; 0x9424 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    93c0:	20 e0       	ldi	r18, 0x00	; 0
    93c2:	30 e0       	ldi	r19, 0x00	; 0
    93c4:	40 e0       	ldi	r20, 0x00	; 0
    93c6:	51 e4       	ldi	r21, 0x41	; 65
    93c8:	f8 01       	movw	r30, r16
    93ca:	62 81       	ldd	r22, Z+2	; 0x02
    93cc:	73 81       	ldd	r23, Z+3	; 0x03
    93ce:	84 81       	ldd	r24, Z+4	; 0x04
    93d0:	95 81       	ldd	r25, Z+5	; 0x05
    93d2:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    93d6:	6a 83       	std	Y+2, r22	; 0x02
    93d8:	7b 83       	std	Y+3, r23	; 0x03
    93da:	8c 83       	std	Y+4, r24	; 0x04
    93dc:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 4;
    93de:	20 e0       	ldi	r18, 0x00	; 0
    93e0:	30 e0       	ldi	r19, 0x00	; 0
    93e2:	40 e8       	ldi	r20, 0x80	; 128
    93e4:	50 e4       	ldi	r21, 0x40	; 64
    93e6:	13 c0       	rjmp	.+38     	; 0x940e <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    93e8:	20 e0       	ldi	r18, 0x00	; 0
    93ea:	30 e0       	ldi	r19, 0x00	; 0
    93ec:	40 e8       	ldi	r20, 0x80	; 128
    93ee:	50 e4       	ldi	r21, 0x40	; 64
    93f0:	f8 01       	movw	r30, r16
    93f2:	62 81       	ldd	r22, Z+2	; 0x02
    93f4:	73 81       	ldd	r23, Z+3	; 0x03
    93f6:	84 81       	ldd	r24, Z+4	; 0x04
    93f8:	95 81       	ldd	r25, Z+5	; 0x05
    93fa:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    93fe:	6a 83       	std	Y+2, r22	; 0x02
    9400:	7b 83       	std	Y+3, r23	; 0x03
    9402:	8c 83       	std	Y+4, r24	; 0x04
    9404:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 8;
    9406:	20 e0       	ldi	r18, 0x00	; 0
    9408:	30 e0       	ldi	r19, 0x00	; 0
    940a:	40 e0       	ldi	r20, 0x00	; 0
    940c:	51 e4       	ldi	r21, 0x41	; 65
    940e:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    9410:	66 81       	ldd	r22, Z+6	; 0x06
    9412:	77 81       	ldd	r23, Z+7	; 0x07
    9414:	80 85       	ldd	r24, Z+8	; 0x08
    9416:	91 85       	ldd	r25, Z+9	; 0x09
    9418:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    941c:	6e 83       	std	Y+6, r22	; 0x06
    941e:	7f 83       	std	Y+7, r23	; 0x07
    9420:	88 87       	std	Y+8, r24	; 0x08
    9422:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    9424:	df 91       	pop	r29
    9426:	cf 91       	pop	r28
    9428:	1f 91       	pop	r17
    942a:	0f 91       	pop	r16
    942c:	08 95       	ret

0000942e <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    942e:	0f 93       	push	r16
    9430:	1f 93       	push	r17
    9432:	cf 93       	push	r28
    9434:	df 93       	push	r29
    9436:	8c 01       	movw	r16, r24
    9438:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    943a:	ac 01       	movw	r20, r24
    943c:	45 5f       	subi	r20, 0xF5	; 245
    943e:	5f 4f       	sbci	r21, 0xFF	; 255
    9440:	23 e0       	ldi	r18, 0x03	; 3
    9442:	6e e0       	ldi	r22, 0x0E	; 14
    9444:	84 e0       	ldi	r24, 0x04	; 4
    9446:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
	Print(8, 14, strOwns);
    944a:	48 e6       	ldi	r20, 0x68	; 104
    944c:	52 e0       	ldi	r21, 0x02	; 2
    944e:	6e e0       	ldi	r22, 0x0E	; 14
    9450:	70 e0       	ldi	r23, 0x00	; 0
    9452:	88 e0       	ldi	r24, 0x08	; 8
    9454:	90 e0       	ldi	r25, 0x00	; 0
    9456:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    945a:	ae 01       	movw	r20, r28
    945c:	45 5f       	subi	r20, 0xF5	; 245
    945e:	5f 4f       	sbci	r21, 0xFF	; 255
    9460:	23 e0       	ldi	r18, 0x03	; 3
    9462:	6e e0       	ldi	r22, 0x0E	; 14
    9464:	8d e0       	ldi	r24, 0x0D	; 13
    9466:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
	Print(17, 14, strBy);
    946a:	45 e6       	ldi	r20, 0x65	; 101
    946c:	52 e0       	ldi	r21, 0x02	; 2
    946e:	6e e0       	ldi	r22, 0x0E	; 14
    9470:	70 e0       	ldi	r23, 0x00	; 0
    9472:	81 e1       	ldi	r24, 0x11	; 17
    9474:	90 e0       	ldi	r25, 0x00	; 0
    9476:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	PrintByte(22, 14, winner->level_score ,true);
    947a:	21 e0       	ldi	r18, 0x01	; 1
    947c:	f8 01       	movw	r30, r16
    947e:	47 85       	ldd	r20, Z+15	; 0x0f
    9480:	6e e0       	ldi	r22, 0x0E	; 14
    9482:	70 e0       	ldi	r23, 0x00	; 0
    9484:	86 e1       	ldi	r24, 0x16	; 22
    9486:	90 e0       	ldi	r25, 0x00	; 0
    9488:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
	PrintChar(23, 14, '-');
    948c:	4d e2       	ldi	r20, 0x2D	; 45
    948e:	6e e0       	ldi	r22, 0x0E	; 14
    9490:	70 e0       	ldi	r23, 0x00	; 0
    9492:	87 e1       	ldi	r24, 0x17	; 23
    9494:	90 e0       	ldi	r25, 0x00	; 0
    9496:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    949a:	21 e0       	ldi	r18, 0x01	; 1
    949c:	4f 85       	ldd	r20, Y+15	; 0x0f
    949e:	6e e0       	ldi	r22, 0x0E	; 14
    94a0:	70 e0       	ldi	r23, 0x00	; 0
    94a2:	8a e1       	ldi	r24, 0x1A	; 26
    94a4:	90 e0       	ldi	r25, 0x00	; 0
}
    94a6:	df 91       	pop	r29
    94a8:	cf 91       	pop	r28
    94aa:	1f 91       	pop	r17
    94ac:	0f 91       	pop	r16
	Print(8, 14, strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    94ae:	0c 94 58 45 	jmp	0x8ab0	; 0x8ab0 <PrintByte>

000094b2 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    94b2:	0f 93       	push	r16
    94b4:	1f 93       	push	r17
    94b6:	cf 93       	push	r28
    94b8:	df 93       	push	r29
    94ba:	8c 01       	movw	r16, r24
    94bc:	eb 01       	movw	r28, r22
    Print(9, 13, strFinalScore);
    94be:	49 e5       	ldi	r20, 0x59	; 89
    94c0:	52 e0       	ldi	r21, 0x02	; 2
    94c2:	6d e0       	ldi	r22, 0x0D	; 13
    94c4:	70 e0       	ldi	r23, 0x00	; 0
    94c6:	89 e0       	ldi	r24, 0x09	; 9
    94c8:	90 e0       	ldi	r25, 0x00	; 0
    94ca:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    94ce:	a8 01       	movw	r20, r16
    94d0:	45 5f       	subi	r20, 0xF5	; 245
    94d2:	5f 4f       	sbci	r21, 0xFF	; 255
    94d4:	23 e0       	ldi	r18, 0x03	; 3
    94d6:	6e e0       	ldi	r22, 0x0E	; 14
    94d8:	84 e0       	ldi	r24, 0x04	; 4
    94da:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
    Print(8, 14, strOwns);
    94de:	48 e6       	ldi	r20, 0x68	; 104
    94e0:	52 e0       	ldi	r21, 0x02	; 2
    94e2:	6e e0       	ldi	r22, 0x0E	; 14
    94e4:	70 e0       	ldi	r23, 0x00	; 0
    94e6:	88 e0       	ldi	r24, 0x08	; 8
    94e8:	90 e0       	ldi	r25, 0x00	; 0
    94ea:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    94ee:	ae 01       	movw	r20, r28
    94f0:	45 5f       	subi	r20, 0xF5	; 245
    94f2:	5f 4f       	sbci	r21, 0xFF	; 255
    94f4:	23 e0       	ldi	r18, 0x03	; 3
    94f6:	6e e0       	ldi	r22, 0x0E	; 14
    94f8:	8d e0       	ldi	r24, 0x0D	; 13
    94fa:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
    Print(17, 14, strBy);
    94fe:	45 e6       	ldi	r20, 0x65	; 101
    9500:	52 e0       	ldi	r21, 0x02	; 2
    9502:	6e e0       	ldi	r22, 0x0E	; 14
    9504:	70 e0       	ldi	r23, 0x00	; 0
    9506:	81 e1       	ldi	r24, 0x11	; 17
    9508:	90 e0       	ldi	r25, 0x00	; 0
    950a:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    PrintByte(22, 14, winner->score ,true);
    950e:	21 e0       	ldi	r18, 0x01	; 1
    9510:	f8 01       	movw	r30, r16
    9512:	46 85       	ldd	r20, Z+14	; 0x0e
    9514:	6e e0       	ldi	r22, 0x0E	; 14
    9516:	70 e0       	ldi	r23, 0x00	; 0
    9518:	86 e1       	ldi	r24, 0x16	; 22
    951a:	90 e0       	ldi	r25, 0x00	; 0
    951c:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
    PrintChar(23, 14, '-');
    9520:	4d e2       	ldi	r20, 0x2D	; 45
    9522:	6e e0       	ldi	r22, 0x0E	; 14
    9524:	70 e0       	ldi	r23, 0x00	; 0
    9526:	87 e1       	ldi	r24, 0x17	; 23
    9528:	90 e0       	ldi	r25, 0x00	; 0
    952a:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    952e:	21 e0       	ldi	r18, 0x01	; 1
    9530:	4e 85       	ldd	r20, Y+14	; 0x0e
    9532:	6e e0       	ldi	r22, 0x0E	; 14
    9534:	70 e0       	ldi	r23, 0x00	; 0
    9536:	8a e1       	ldi	r24, 0x1A	; 26
    9538:	90 e0       	ldi	r25, 0x00	; 0
}
    953a:	df 91       	pop	r29
    953c:	cf 91       	pop	r28
    953e:	1f 91       	pop	r17
    9540:	0f 91       	pop	r16
    Print(8, 14, strOwns);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, strBy);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    9542:	0c 94 58 45 	jmp	0x8ab0	; 0x8ab0 <PrintByte>

00009546 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    9546:	cf 93       	push	r28
    9548:	df 93       	push	r29
    954a:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    954c:	ac 01       	movw	r20, r24
    954e:	45 5f       	subi	r20, 0xF5	; 245
    9550:	5f 4f       	sbci	r21, 0xFF	; 255
    9552:	23 e0       	ldi	r18, 0x03	; 3
    9554:	60 e0       	ldi	r22, 0x00	; 0
    9556:	8a e0       	ldi	r24, 0x0A	; 10
    9558:	8c 0f       	add	r24, r28
    955a:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
	Print(x, 0, strScore);
    955e:	d0 e0       	ldi	r29, 0x00	; 0
    9560:	4d ea       	ldi	r20, 0xAD	; 173
    9562:	51 e0       	ldi	r21, 0x01	; 1
    9564:	60 e0       	ldi	r22, 0x00	; 0
    9566:	70 e0       	ldi	r23, 0x00	; 0
    9568:	ce 01       	movw	r24, r28
    956a:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(x, 1, strTotal);
    956e:	46 ea       	ldi	r20, 0xA6	; 166
    9570:	51 e0       	ldi	r21, 0x01	; 1
    9572:	61 e0       	ldi	r22, 0x01	; 1
    9574:	70 e0       	ldi	r23, 0x00	; 0
    9576:	ce 01       	movw	r24, r28
	
}
    9578:	df 91       	pop	r29
    957a:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, strScore);
	Print(x, 1, strTotal);
    957c:	0c 94 8e 45 	jmp	0x8b1c	; 0x8b1c <Print>

00009580 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    9580:	0f 93       	push	r16
    9582:	1f 93       	push	r17
    9584:	cf 93       	push	r28
    9586:	df 93       	push	r29
    9588:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    958a:	c6 2f       	mov	r28, r22
    958c:	d0 e0       	ldi	r29, 0x00	; 0
    958e:	28 96       	adiw	r28, 0x08	; 8
    9590:	20 e0       	ldi	r18, 0x00	; 0
    9592:	fc 01       	movw	r30, r24
    9594:	47 85       	ldd	r20, Z+15	; 0x0f
    9596:	60 e0       	ldi	r22, 0x00	; 0
    9598:	70 e0       	ldi	r23, 0x00	; 0
    959a:	ce 01       	movw	r24, r28
    959c:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    95a0:	20 e0       	ldi	r18, 0x00	; 0
    95a2:	f8 01       	movw	r30, r16
    95a4:	46 85       	ldd	r20, Z+14	; 0x0e
    95a6:	61 e0       	ldi	r22, 0x01	; 1
    95a8:	70 e0       	ldi	r23, 0x00	; 0
    95aa:	ce 01       	movw	r24, r28
}
    95ac:	df 91       	pop	r29
    95ae:	cf 91       	pop	r28
    95b0:	1f 91       	pop	r17
    95b2:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    95b4:	0c 94 58 45 	jmp	0x8ab0	; 0x8ab0 <PrintByte>

000095b8 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    95b8:	cf 93       	push	r28
    95ba:	df 93       	push	r29
    95bc:	ec 01       	movw	r28, r24
    95be:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    95c0:	9c 89       	ldd	r25, Y+20	; 0x14
    95c2:	9a 35       	cpi	r25, 0x5A	; 90
    95c4:	99 f0       	breq	.+38     	; 0x95ec <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    95c6:	91 11       	cpse	r25, r1
    95c8:	0c c0       	rjmp	.+24     	; 0x95e2 <render_banter+0x2a>
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
    95ca:	4d 89       	ldd	r20, Y+21	; 0x15
    95cc:	9f e0       	ldi	r25, 0x0F	; 15
    95ce:	49 9f       	mul	r20, r25
    95d0:	a0 01       	movw	r20, r0
    95d2:	11 24       	eor	r1, r1
    95d4:	4d 53       	subi	r20, 0x3D	; 61
    95d6:	5e 4f       	sbci	r21, 0xFE	; 254
    95d8:	62 e0       	ldi	r22, 0x02	; 2
    95da:	70 e0       	ldi	r23, 0x00	; 0
    95dc:	90 e0       	ldi	r25, 0x00	; 0
    95de:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    95e2:	8c 89       	ldd	r24, Y+20	; 0x14
    95e4:	8f 5f       	subi	r24, 0xFF	; 255
    95e6:	8c 8b       	std	Y+20, r24	; 0x14
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
		}
		clear_banter = 1;
    95e8:	41 e0       	ldi	r20, 0x01	; 1
    95ea:	0a c0       	rjmp	.+20     	; 0x9600 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    95ec:	44 23       	and	r20, r20
    95ee:	41 f0       	breq	.+16     	; 0x9600 <render_banter+0x48>
	{
		Print(banter_x, 2, strBanterClear);
    95f0:	44 eb       	ldi	r20, 0xB4	; 180
    95f2:	51 e0       	ldi	r21, 0x01	; 1
    95f4:	62 e0       	ldi	r22, 0x02	; 2
    95f6:	70 e0       	ldi	r23, 0x00	; 0
    95f8:	90 e0       	ldi	r25, 0x00	; 0
    95fa:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    95fe:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    9600:	84 2f       	mov	r24, r20
    9602:	df 91       	pop	r29
    9604:	cf 91       	pop	r28
    9606:	08 95       	ret

00009608 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    9608:	ef 92       	push	r14
    960a:	ff 92       	push	r15
    960c:	0f 93       	push	r16
    960e:	1f 93       	push	r17
    9610:	cf 93       	push	r28
    9612:	df 93       	push	r29
    9614:	1f 92       	push	r1
    9616:	cd b7       	in	r28, 0x3d	; 61
    9618:	de b7       	in	r29, 0x3e	; 62
    961a:	7c 01       	movw	r14, r24
    961c:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    961e:	fc 01       	movw	r30, r24
    9620:	66 81       	ldd	r22, Z+6	; 0x06
    9622:	77 81       	ldd	r23, Z+7	; 0x07
    9624:	80 85       	ldd	r24, Z+8	; 0x08
    9626:	91 85       	ldd	r25, Z+9	; 0x09
    9628:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    962c:	46 2f       	mov	r20, r22
    962e:	f7 01       	movw	r30, r14
    9630:	62 81       	ldd	r22, Z+2	; 0x02
    9632:	73 81       	ldd	r23, Z+3	; 0x03
    9634:	84 81       	ldd	r24, Z+4	; 0x04
    9636:	95 81       	ldd	r25, Z+5	; 0x05
    9638:	49 83       	std	Y+1, r20	; 0x01
    963a:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    963e:	02 e0       	ldi	r16, 0x02	; 2
    9640:	22 e0       	ldi	r18, 0x02	; 2
    9642:	49 81       	ldd	r20, Y+1	; 0x01
    9644:	81 2f       	mov	r24, r17
    9646:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
}
    964a:	0f 90       	pop	r0
    964c:	df 91       	pop	r29
    964e:	cf 91       	pop	r28
    9650:	1f 91       	pop	r17
    9652:	0f 91       	pop	r16
    9654:	ff 90       	pop	r15
    9656:	ef 90       	pop	r14
    9658:	08 95       	ret

0000965a <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    965a:	cf 92       	push	r12
    965c:	df 92       	push	r13
    965e:	ff 92       	push	r15
    9660:	0f 93       	push	r16
    9662:	1f 93       	push	r17
    9664:	cf 93       	push	r28
    9666:	df 93       	push	r29
    9668:	1f 92       	push	r1
    966a:	cd b7       	in	r28, 0x3d	; 61
    966c:	de b7       	in	r29, 0x3e	; 62
    966e:	f6 2e       	mov	r15, r22
	if (player->active_shots > 0)
    9670:	fc 01       	movw	r30, r24
    9672:	20 89       	ldd	r18, Z+16	; 0x10
    9674:	22 23       	and	r18, r18
    9676:	f9 f0       	breq	.+62     	; 0x96b6 <render_shot+0x5c>
    9678:	6c 01       	movw	r12, r24
    967a:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    967c:	f6 01       	movw	r30, r12
    967e:	60 a1       	ldd	r22, Z+32	; 0x20
    9680:	71 a1       	ldd	r23, Z+33	; 0x21
    9682:	82 a1       	ldd	r24, Z+34	; 0x22
    9684:	93 a1       	ldd	r25, Z+35	; 0x23
    9686:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    968a:	46 2f       	mov	r20, r22
    968c:	f6 01       	movw	r30, r12
    968e:	64 8d       	ldd	r22, Z+28	; 0x1c
    9690:	75 8d       	ldd	r23, Z+29	; 0x1d
    9692:	86 8d       	ldd	r24, Z+30	; 0x1e
    9694:	97 8d       	ldd	r25, Z+31	; 0x1f
    9696:	49 83       	std	Y+1, r20	; 0x01
    9698:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    969c:	01 e0       	ldi	r16, 0x01	; 1
    969e:	21 e0       	ldi	r18, 0x01	; 1
    96a0:	49 81       	ldd	r20, Y+1	; 0x01
    96a2:	81 2f       	mov	r24, r17
    96a4:	8f 0d       	add	r24, r15
    96a6:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>

void render_shot(Player* player, u8 sprite_index)
{
	if (player->active_shots > 0)
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
    96aa:	1f 5f       	subi	r17, 0xFF	; 255
    96ac:	f3 e2       	ldi	r31, 0x23	; 35
    96ae:	cf 0e       	add	r12, r31
    96b0:	d1 1c       	adc	r13, r1
    96b2:	12 30       	cpi	r17, 0x02	; 2
    96b4:	19 f7       	brne	.-58     	; 0x967c <render_shot+0x22>
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
			sprite_index++;
		}
	}
}
    96b6:	0f 90       	pop	r0
    96b8:	df 91       	pop	r29
    96ba:	cf 91       	pop	r28
    96bc:	1f 91       	pop	r17
    96be:	0f 91       	pop	r16
    96c0:	ff 90       	pop	r15
    96c2:	df 90       	pop	r13
    96c4:	cf 90       	pop	r12
    96c6:	08 95       	ret

000096c8 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    96c8:	df 92       	push	r13
    96ca:	ef 92       	push	r14
    96cc:	ff 92       	push	r15
    96ce:	0f 93       	push	r16
    96d0:	1f 93       	push	r17
    96d2:	cf 93       	push	r28
    96d4:	df 93       	push	r29
    96d6:	1f 92       	push	r1
    96d8:	cd b7       	in	r28, 0x3d	; 61
    96da:	de b7       	in	r29, 0x3e	; 62
    96dc:	8c 01       	movw	r16, r24
    96de:	0f 5f       	subi	r16, 0xFF	; 255
    96e0:	1f 4f       	sbci	r17, 0xFF	; 255
    96e2:	82 e0       	ldi	r24, 0x02	; 2
    96e4:	d8 2e       	mov	r13, r24
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    96e6:	9e e1       	ldi	r25, 0x1E	; 30
    96e8:	e9 2e       	mov	r14, r25
    96ea:	f1 2c       	mov	r15, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    96ec:	f8 01       	movw	r30, r16
    96ee:	82 85       	ldd	r24, Z+10	; 0x0a
    96f0:	93 85       	ldd	r25, Z+11	; 0x0b
    96f2:	89 2b       	or	r24, r25
    96f4:	e1 f0       	breq	.+56     	; 0x972e <render_tile_explosions+0x66>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    96f6:	be 01       	movw	r22, r28
    96f8:	6f 5f       	subi	r22, 0xFF	; 255
    96fa:	7f 4f       	sbci	r23, 0xFF	; 255
    96fc:	c8 01       	movw	r24, r16
    96fe:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    9702:	9c 01       	movw	r18, r24
			if (looped)
    9704:	49 81       	ldd	r20, Y+1	; 0x01
    9706:	f8 01       	movw	r30, r16
    9708:	82 85       	ldd	r24, Z+10	; 0x0a
    970a:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    970c:	b7 01       	movw	r22, r14
    970e:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    9712:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    9714:	44 23       	and	r20, r20
    9716:	41 f0       	breq	.+16     	; 0x9728 <render_tile_explosions+0x60>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    9718:	40 e0       	ldi	r20, 0x00	; 0
    971a:	50 e0       	ldi	r21, 0x00	; 0
    971c:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <SetTile>
				ta->anims[i].tile_index = 0;
    9720:	f8 01       	movw	r30, r16
    9722:	13 86       	std	Z+11, r1	; 0x0b
    9724:	12 86       	std	Z+10, r1	; 0x0a
    9726:	03 c0       	rjmp	.+6      	; 0x972e <render_tile_explosions+0x66>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    9728:	a9 01       	movw	r20, r18
    972a:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
    972e:	da 94       	dec	r13
    9730:	04 5f       	subi	r16, 0xF4	; 244
    9732:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    9734:	d1 10       	cpse	r13, r1
    9736:	da cf       	rjmp	.-76     	; 0x96ec <render_tile_explosions+0x24>
						(const char*) map
				);
			}
		}
	}
}
    9738:	0f 90       	pop	r0
    973a:	df 91       	pop	r29
    973c:	cf 91       	pop	r28
    973e:	1f 91       	pop	r17
    9740:	0f 91       	pop	r16
    9742:	ff 90       	pop	r15
    9744:	ef 90       	pop	r14
    9746:	df 90       	pop	r13
    9748:	08 95       	ret

0000974a <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    974a:	ff 92       	push	r15
    974c:	0f 93       	push	r16
    974e:	1f 93       	push	r17
    9750:	cf 93       	push	r28
    9752:	df 93       	push	r29
    9754:	1f 92       	push	r1
    9756:	cd b7       	in	r28, 0x3d	; 61
    9758:	de b7       	in	r29, 0x3e	; 62
    975a:	8c 01       	movw	r16, r24
    975c:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    975e:	fc 01       	movw	r30, r24
    9760:	83 89       	ldd	r24, Z+19	; 0x13
    9762:	80 ff       	sbrs	r24, 0
    9764:	18 c0       	rjmp	.+48     	; 0x9796 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    9766:	be 01       	movw	r22, r28
    9768:	6f 5f       	subi	r22, 0xFF	; 255
    976a:	7f 4f       	sbci	r23, 0xFF	; 255
    976c:	c8 01       	movw	r24, r16
    976e:	8c 58       	subi	r24, 0x8C	; 140
    9770:	9f 4f       	sbci	r25, 0xFF	; 255
    9772:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    9776:	29 81       	ldd	r18, Y+1	; 0x01
    9778:	22 23       	and	r18, r18
    977a:	09 f4       	brne	.+2      	; 0x977e <tank_map+0x34>
    977c:	5a c0       	rjmp	.+180    	; 0x9832 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    977e:	f8 01       	movw	r30, r16
    9780:	93 89       	ldd	r25, Z+19	; 0x13
    9782:	81 e0       	ldi	r24, 0x01	; 1
    9784:	98 27       	eor	r25, r24
    9786:	93 8b       	std	Z+19, r25	; 0x13
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    9788:	c8 01       	movw	r24, r16
    978a:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    978e:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    9790:	8c e2       	ldi	r24, 0x2C	; 44
    9792:	91 e2       	ldi	r25, 0x21	; 33
    9794:	4f c0       	rjmp	.+158    	; 0x9834 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    9796:	f8 01       	movw	r30, r16
    9798:	86 89       	ldd	r24, Z+22	; 0x16
    979a:	88 37       	cpi	r24, 0x78	; 120
    979c:	11 f0       	breq	.+4      	; 0x97a2 <tank_map+0x58>
		{
			player->grace_frame++;
    979e:	8f 5f       	subi	r24, 0xFF	; 255
    97a0:	86 8b       	std	Z+22, r24	; 0x16
		}
		switch (player->shared.direction)
    97a2:	f8 01       	movw	r30, r16
    97a4:	90 81       	ld	r25, Z
    97a6:	91 30       	cpi	r25, 0x01	; 1
    97a8:	79 f0       	breq	.+30     	; 0x97c8 <tank_map+0x7e>
    97aa:	f8 f0       	brcs	.+62     	; 0x97ea <tank_map+0xa0>
    97ac:	92 30       	cpi	r25, 0x02	; 2
    97ae:	99 f0       	breq	.+38     	; 0x97d6 <tank_map+0x8c>
    97b0:	93 30       	cpi	r25, 0x03	; 3
    97b2:	d9 f4       	brne	.+54     	; 0x97ea <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    97b4:	be 01       	movw	r22, r28
    97b6:	6f 5f       	subi	r22, 0xFF	; 255
    97b8:	7f 4f       	sbci	r23, 0xFF	; 255
    97ba:	c8 01       	movw	r24, r16
    97bc:	86 59       	subi	r24, 0x96	; 150
    97be:	9f 4f       	sbci	r25, 0xFF	; 255
    97c0:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    97c4:	41 e0       	ldi	r20, 0x01	; 1
    97c6:	1a c0       	rjmp	.+52     	; 0x97fc <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    97c8:	be 01       	movw	r22, r28
    97ca:	6f 5f       	subi	r22, 0xFF	; 255
    97cc:	7f 4f       	sbci	r23, 0xFF	; 255
    97ce:	c8 01       	movw	r24, r16
    97d0:	86 59       	subi	r24, 0x96	; 150
    97d2:	9f 4f       	sbci	r25, 0xFF	; 255
    97d4:	10 c0       	rjmp	.+32     	; 0x97f6 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    97d6:	be 01       	movw	r22, r28
    97d8:	6f 5f       	subi	r22, 0xFF	; 255
    97da:	7f 4f       	sbci	r23, 0xFF	; 255
    97dc:	c8 01       	movw	r24, r16
    97de:	80 5a       	subi	r24, 0xA0	; 160
    97e0:	9f 4f       	sbci	r25, 0xFF	; 255
    97e2:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    97e6:	42 e0       	ldi	r20, 0x02	; 2
    97e8:	09 c0       	rjmp	.+18     	; 0x97fc <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    97ea:	be 01       	movw	r22, r28
    97ec:	6f 5f       	subi	r22, 0xFF	; 255
    97ee:	7f 4f       	sbci	r23, 0xFF	; 255
    97f0:	c8 01       	movw	r24, r16
    97f2:	80 5a       	subi	r24, 0xA0	; 160
    97f4:	9f 4f       	sbci	r25, 0xFF	; 255
    97f6:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    97fa:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    97fc:	f8 01       	movw	r30, r16
    97fe:	26 89       	ldd	r18, Z+22	; 0x16
    9800:	28 37       	cpi	r18, 0x78	; 120
    9802:	31 f0       	breq	.+12     	; 0x9810 <tank_map+0xc6>
    9804:	20 91 30 0b 	lds	r18, 0x0B30
    9808:	22 23       	and	r18, r18
    980a:	11 f0       	breq	.+4      	; 0x9810 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    980c:	8c e2       	ldi	r24, 0x2C	; 44
    980e:	91 e2       	ldi	r25, 0x21	; 33
		}
		toggle_counter--;
    9810:	20 91 03 01 	lds	r18, 0x0103
    9814:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    9816:	19 f0       	breq	.+6      	; 0x981e <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    9818:	20 93 03 01 	sts	0x0103, r18
    981c:	0b c0       	rjmp	.+22     	; 0x9834 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    981e:	24 e1       	ldi	r18, 0x14	; 20
    9820:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    9824:	20 91 30 0b 	lds	r18, 0x0B30
    9828:	31 e0       	ldi	r19, 0x01	; 1
    982a:	23 27       	eor	r18, r19
    982c:	20 93 30 0b 	sts	0x0B30, r18
    9830:	01 c0       	rjmp	.+2      	; 0x9834 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9832:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    9834:	bc 01       	movw	r22, r24
    9836:	8f 2d       	mov	r24, r15
    9838:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    983c:	84 e0       	ldi	r24, 0x04	; 4
    983e:	8f 0d       	add	r24, r15
    9840:	0f 90       	pop	r0
    9842:	df 91       	pop	r29
    9844:	cf 91       	pop	r28
    9846:	1f 91       	pop	r17
    9848:	0f 91       	pop	r16
    984a:	ff 90       	pop	r15
    984c:	08 95       	ret

0000984e <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    984e:	ef 92       	push	r14
    9850:	ff 92       	push	r15
    9852:	0f 93       	push	r16
    9854:	1f 93       	push	r17
    9856:	cf 93       	push	r28
    9858:	df 93       	push	r29
    985a:	00 d0       	rcall	.+0      	; 0x985c <shot_map+0xe>
    985c:	cd b7       	in	r28, 0x3d	; 61
    985e:	de b7       	in	r29, 0x3e	; 62
    9860:	e6 2e       	mov	r14, r22
	char looped = 0;
    9862:	19 82       	std	Y+1, r1	; 0x01
    9864:	8c 01       	movw	r16, r24
    9866:	07 5d       	subi	r16, 0xD7	; 215
    9868:	1f 4f       	sbci	r17, 0xFF	; 255
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    986a:	f1 2c       	mov	r15, r1

char shot_map(Player* player, char sprite_index)
{
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
    986c:	20 e0       	ldi	r18, 0x00	; 0
    986e:	f8 01       	movw	r30, r16
    9870:	32 97       	sbiw	r30, 0x02	; 2
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    9872:	80 81       	ld	r24, Z
    9874:	88 23       	and	r24, r24
    9876:	49 f1       	breq	.+82     	; 0x98ca <shot_map+0x7c>
    9878:	f8 01       	movw	r30, r16
    987a:	3f 97       	sbiw	r30, 0x0f	; 15
		{
			switch (shot->shared.direction)
    987c:	90 81       	ld	r25, Z
    987e:	91 30       	cpi	r25, 0x01	; 1
    9880:	71 f0       	breq	.+28     	; 0x989e <shot_map+0x50>
    9882:	f0 f0       	brcs	.+60     	; 0x98c0 <shot_map+0x72>
    9884:	92 30       	cpi	r25, 0x02	; 2
    9886:	a1 f0       	breq	.+40     	; 0x98b0 <shot_map+0x62>
    9888:	93 30       	cpi	r25, 0x03	; 3
    988a:	d1 f4       	brne	.+52     	; 0x98c0 <shot_map+0x72>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    988c:	be 01       	movw	r22, r28
    988e:	6f 5f       	subi	r22, 0xFF	; 255
    9890:	7f 4f       	sbci	r23, 0xFF	; 255
    9892:	c8 01       	movw	r24, r16
    9894:	0a 96       	adiw	r24, 0x0a	; 10
    9896:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    989a:	21 e0       	ldi	r18, 0x01	; 1
    989c:	18 c0       	rjmp	.+48     	; 0x98ce <shot_map+0x80>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    989e:	be 01       	movw	r22, r28
    98a0:	6f 5f       	subi	r22, 0xFF	; 255
    98a2:	7f 4f       	sbci	r23, 0xFF	; 255
    98a4:	c8 01       	movw	r24, r16
    98a6:	0a 96       	adiw	r24, 0x0a	; 10
    98a8:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    98ac:	20 e0       	ldi	r18, 0x00	; 0
    98ae:	0f c0       	rjmp	.+30     	; 0x98ce <shot_map+0x80>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    98b0:	be 01       	movw	r22, r28
    98b2:	6f 5f       	subi	r22, 0xFF	; 255
    98b4:	7f 4f       	sbci	r23, 0xFF	; 255
    98b6:	c8 01       	movw	r24, r16
    98b8:	0e 94 12 46 	call	0x8c24	; 0x8c24 <LBGetNextFrame>
    98bc:	22 e0       	ldi	r18, 0x02	; 2
    98be:	07 c0       	rjmp	.+14     	; 0x98ce <shot_map+0x80>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    98c0:	be 01       	movw	r22, r28
    98c2:	6f 5f       	subi	r22, 0xFF	; 255
    98c4:	7f 4f       	sbci	r23, 0xFF	; 255
    98c6:	c8 01       	movw	r24, r16
    98c8:	ef cf       	rjmp	.-34     	; 0x98a8 <shot_map+0x5a>
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    98ca:	8c e2       	ldi	r24, 0x2C	; 44
    98cc:	91 e2       	ldi	r25, 0x21	; 33
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    98ce:	42 2f       	mov	r20, r18
    98d0:	bc 01       	movw	r22, r24
    98d2:	8f 2d       	mov	r24, r15
    98d4:	8e 0d       	add	r24, r14
    98d6:	2a 83       	std	Y+2, r18	; 0x02
    98d8:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    98dc:	f3 94       	inc	r15
    98de:	0d 5d       	subi	r16, 0xDD	; 221
    98e0:	1f 4f       	sbci	r17, 0xFF	; 255
    98e2:	2a 81       	ldd	r18, Y+2	; 0x02
    98e4:	82 e0       	ldi	r24, 0x02	; 2
    98e6:	f8 12       	cpse	r15, r24
    98e8:	c2 cf       	rjmp	.-124    	; 0x986e <shot_map+0x20>
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
		sprite_index++;
	}
	return sprite_index;
}
    98ea:	8e 0d       	add	r24, r14
    98ec:	0f 90       	pop	r0
    98ee:	0f 90       	pop	r0
    98f0:	df 91       	pop	r29
    98f2:	cf 91       	pop	r28
    98f4:	1f 91       	pop	r17
    98f6:	0f 91       	pop	r16
    98f8:	ff 90       	pop	r15
    98fa:	ef 90       	pop	r14
    98fc:	08 95       	ret

000098fe <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    98fe:	cf 93       	push	r28
    9900:	df 93       	push	r29
    9902:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    9904:	88 81       	ld	r24, Y
    9906:	81 11       	cpse	r24, r1
    9908:	15 c0       	rjmp	.+42     	; 0x9934 <recoil_sprite+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    990a:	69 81       	ldd	r22, Y+1	; 0x01
    990c:	70 e0       	ldi	r23, 0x00	; 0
    990e:	80 e0       	ldi	r24, 0x00	; 0
    9910:	90 e0       	ldi	r25, 0x00	; 0
    9912:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    9916:	25 e6       	ldi	r18, 0x65	; 101
    9918:	38 e8       	ldi	r19, 0x88	; 136
    991a:	48 e8       	ldi	r20, 0x88	; 136
    991c:	5c e3       	ldi	r21, 0x3C	; 60
    991e:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    9922:	9b 01       	movw	r18, r22
    9924:	ac 01       	movw	r20, r24
    9926:	6e 81       	ldd	r22, Y+6	; 0x06
    9928:	7f 81       	ldd	r23, Y+7	; 0x07
    992a:	88 85       	ldd	r24, Y+8	; 0x08
    992c:	99 85       	ldd	r25, Y+9	; 0x09
    992e:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    9932:	2d c0       	rjmp	.+90     	; 0x998e <recoil_sprite+0x90>
	}
	if (sprite->direction == D_RIGHT)
    9934:	81 30       	cpi	r24, 0x01	; 1
    9936:	a9 f4       	brne	.+42     	; 0x9962 <recoil_sprite+0x64>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    9938:	69 81       	ldd	r22, Y+1	; 0x01
    993a:	70 e0       	ldi	r23, 0x00	; 0
    993c:	80 e0       	ldi	r24, 0x00	; 0
    993e:	90 e0       	ldi	r25, 0x00	; 0
    9940:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    9944:	25 e6       	ldi	r18, 0x65	; 101
    9946:	38 e8       	ldi	r19, 0x88	; 136
    9948:	48 e8       	ldi	r20, 0x88	; 136
    994a:	5c e3       	ldi	r21, 0x3C	; 60
    994c:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    9950:	9b 01       	movw	r18, r22
    9952:	ac 01       	movw	r20, r24
    9954:	6a 81       	ldd	r22, Y+2	; 0x02
    9956:	7b 81       	ldd	r23, Y+3	; 0x03
    9958:	8c 81       	ldd	r24, Y+4	; 0x04
    995a:	9d 81       	ldd	r25, Y+5	; 0x05
    995c:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <__subsf3>
    9960:	31 c0       	rjmp	.+98     	; 0x99c4 <recoil_sprite+0xc6>
	}
	if (sprite->direction == D_DOWN)
    9962:	82 30       	cpi	r24, 0x02	; 2
    9964:	c9 f4       	brne	.+50     	; 0x9998 <recoil_sprite+0x9a>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    9966:	69 81       	ldd	r22, Y+1	; 0x01
    9968:	70 e0       	ldi	r23, 0x00	; 0
    996a:	80 e0       	ldi	r24, 0x00	; 0
    996c:	90 e0       	ldi	r25, 0x00	; 0
    996e:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    9972:	25 e6       	ldi	r18, 0x65	; 101
    9974:	38 e8       	ldi	r19, 0x88	; 136
    9976:	48 e8       	ldi	r20, 0x88	; 136
    9978:	5c e3       	ldi	r21, 0x3C	; 60
    997a:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    997e:	9b 01       	movw	r18, r22
    9980:	ac 01       	movw	r20, r24
    9982:	6e 81       	ldd	r22, Y+6	; 0x06
    9984:	7f 81       	ldd	r23, Y+7	; 0x07
    9986:	88 85       	ldd	r24, Y+8	; 0x08
    9988:	99 85       	ldd	r25, Y+9	; 0x09
    998a:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <__subsf3>
    998e:	6e 83       	std	Y+6, r22	; 0x06
    9990:	7f 83       	std	Y+7, r23	; 0x07
    9992:	88 87       	std	Y+8, r24	; 0x08
    9994:	99 87       	std	Y+9, r25	; 0x09
    9996:	1a c0       	rjmp	.+52     	; 0x99cc <recoil_sprite+0xce>
	}
	if (sprite->direction == D_LEFT)
    9998:	83 30       	cpi	r24, 0x03	; 3
    999a:	c1 f4       	brne	.+48     	; 0x99cc <recoil_sprite+0xce>
	{
		sprite->x += FRAME_TIME * sprite->speed;
    999c:	69 81       	ldd	r22, Y+1	; 0x01
    999e:	70 e0       	ldi	r23, 0x00	; 0
    99a0:	80 e0       	ldi	r24, 0x00	; 0
    99a2:	90 e0       	ldi	r25, 0x00	; 0
    99a4:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    99a8:	25 e6       	ldi	r18, 0x65	; 101
    99aa:	38 e8       	ldi	r19, 0x88	; 136
    99ac:	48 e8       	ldi	r20, 0x88	; 136
    99ae:	5c e3       	ldi	r21, 0x3C	; 60
    99b0:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    99b4:	9b 01       	movw	r18, r22
    99b6:	ac 01       	movw	r20, r24
    99b8:	6a 81       	ldd	r22, Y+2	; 0x02
    99ba:	7b 81       	ldd	r23, Y+3	; 0x03
    99bc:	8c 81       	ldd	r24, Y+4	; 0x04
    99be:	9d 81       	ldd	r25, Y+5	; 0x05
    99c0:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    99c4:	6a 83       	std	Y+2, r22	; 0x02
    99c6:	7b 83       	std	Y+3, r23	; 0x03
    99c8:	8c 83       	std	Y+4, r24	; 0x04
    99ca:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    99cc:	df 91       	pop	r29
    99ce:	cf 91       	pop	r28
    99d0:	08 95       	ret

000099d2 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    99d2:	8e 59       	subi	r24, 0x9E	; 158
    99d4:	93 4f       	sbci	r25, 0xF3	; 243
    99d6:	fc 01       	movw	r30, r24
    99d8:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    99da:	81 30       	cpi	r24, 0x01	; 1
    99dc:	19 f0       	breq	.+6      	; 0x99e4 <solid_square_tile+0x12>
	if (tile == L_METAL) return tile;
    99de:	82 30       	cpi	r24, 0x02	; 2
    99e0:	19 f4       	brne	.+6      	; 0x99e8 <solid_square_tile+0x16>
    99e2:	08 95       	ret
    99e4:	81 e0       	ldi	r24, 0x01	; 1
    99e6:	08 95       	ret

	return 0;
    99e8:	80 e0       	ldi	r24, 0x00	; 0
}
    99ea:	08 95       	ret

000099ec <solid_directional_tile>:

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    99ec:	7f 92       	push	r7
    99ee:	8f 92       	push	r8
    99f0:	9f 92       	push	r9
    99f2:	af 92       	push	r10
    99f4:	bf 92       	push	r11
    99f6:	cf 92       	push	r12
    99f8:	df 92       	push	r13
    99fa:	ef 92       	push	r14
    99fc:	ff 92       	push	r15
    99fe:	0f 93       	push	r16
    9a00:	1f 93       	push	r17
    9a02:	cf 93       	push	r28
    9a04:	df 93       	push	r29
    9a06:	f6 2e       	mov	r15, r22
    9a08:	d4 2e       	mov	r13, r20
    9a0a:	b2 2e       	mov	r11, r18
	u8 tile = level.level_map[tile_index];
    9a0c:	fc 01       	movw	r30, r24
    9a0e:	ee 59       	subi	r30, 0x9E	; 158
    9a10:	f3 4f       	sbci	r31, 0xF3	; 243
    9a12:	c1 81       	ldd	r28, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    9a14:	6e e1       	ldi	r22, 0x1E	; 30
    9a16:	70 e0       	ldi	r23, 0x00	; 0
    9a18:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    9a1c:	d8 2f       	mov	r29, r24
    9a1e:	dd 0f       	add	r29, r29
    9a20:	dd 0f       	add	r29, r29
    9a22:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    9a24:	fb 01       	movw	r30, r22
    9a26:	33 96       	adiw	r30, 0x03	; 3
    9a28:	1e 2f       	mov	r17, r30
    9a2a:	11 0f       	add	r17, r17
    9a2c:	11 0f       	add	r17, r17
    9a2e:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    9a30:	c3 30       	cpi	r28, 0x03	; 3
    9a32:	11 f0       	breq	.+4      	; 0x9a38 <solid_directional_tile+0x4c>
    9a34:	c6 30       	cpi	r28, 0x06	; 6
    9a36:	79 f5       	brne	.+94     	; 0x9a96 <solid_directional_tile+0xaa>
	{
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x, y, x, y+height)) return tile;
    9a38:	7d 2c       	mov	r7, r13
    9a3a:	70 0e       	add	r7, r16
    9a3c:	28 e0       	ldi	r18, 0x08	; 8
    9a3e:	82 2e       	mov	r8, r18
    9a40:	8d 0e       	add	r8, r29
    9a42:	38 e0       	ldi	r19, 0x08	; 8
    9a44:	93 2e       	mov	r9, r19
    9a46:	91 0e       	add	r9, r17
    9a48:	a7 2c       	mov	r10, r7
    9a4a:	cf 2c       	mov	r12, r15
    9a4c:	ed 2c       	mov	r14, r13
    9a4e:	0f 2d       	mov	r16, r15
    9a50:	21 2f       	mov	r18, r17
    9a52:	48 2d       	mov	r20, r8
    9a54:	69 2d       	mov	r22, r9
    9a56:	8d 2f       	mov	r24, r29
    9a58:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9a5c:	81 11       	cpse	r24, r1
    9a5e:	55 c0       	rjmp	.+170    	; 0x9b0a <solid_directional_tile+0x11e>
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x, y, x+width, y)) return tile;
    9a60:	bf 0c       	add	r11, r15
    9a62:	ad 2c       	mov	r10, r13
    9a64:	cb 2c       	mov	r12, r11
    9a66:	21 2f       	mov	r18, r17
    9a68:	48 2d       	mov	r20, r8
    9a6a:	69 2d       	mov	r22, r9
    9a6c:	8d 2f       	mov	r24, r29
    9a6e:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9a72:	81 11       	cpse	r24, r1
    9a74:	4a c0       	rjmp	.+148    	; 0x9b0a <solid_directional_tile+0x11e>
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x+width, y, x+width, y+height)) return tile;
    9a76:	a7 2c       	mov	r10, r7
    9a78:	0b 2d       	mov	r16, r11
    9a7a:	21 2f       	mov	r18, r17
    9a7c:	48 2d       	mov	r20, r8
    9a7e:	69 2d       	mov	r22, r9
    9a80:	8d 2f       	mov	r24, r29
    9a82:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9a86:	81 11       	cpse	r24, r1
    9a88:	40 c0       	rjmp	.+128    	; 0x9b0a <solid_directional_tile+0x11e>
		if (LBLineIntersect(tile_x, tile_y+8, tile_x+8, tile_y, x, y+height, x+width, y+height)) return tile;
    9a8a:	e7 2c       	mov	r14, r7
    9a8c:	0f 2d       	mov	r16, r15
    9a8e:	21 2f       	mov	r18, r17
    9a90:	48 2d       	mov	r20, r8
    9a92:	69 2d       	mov	r22, r9
    9a94:	32 c0       	rjmp	.+100    	; 0x9afa <solid_directional_tile+0x10e>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    9a96:	8c ef       	ldi	r24, 0xFC	; 252
    9a98:	8c 0f       	add	r24, r28
    9a9a:	82 30       	cpi	r24, 0x02	; 2
    9a9c:	a0 f5       	brcc	.+104    	; 0x9b06 <solid_directional_tile+0x11a>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x, y, x, y+height)) return tile;
    9a9e:	74 2e       	mov	r7, r20
    9aa0:	70 0e       	add	r7, r16
    9aa2:	88 e0       	ldi	r24, 0x08	; 8
    9aa4:	88 2e       	mov	r8, r24
    9aa6:	81 0e       	add	r8, r17
    9aa8:	98 e0       	ldi	r25, 0x08	; 8
    9aaa:	99 2e       	mov	r9, r25
    9aac:	9d 0e       	add	r9, r29
    9aae:	a7 2c       	mov	r10, r7
    9ab0:	cf 2c       	mov	r12, r15
    9ab2:	e4 2e       	mov	r14, r20
    9ab4:	0f 2d       	mov	r16, r15
    9ab6:	28 2d       	mov	r18, r8
    9ab8:	49 2d       	mov	r20, r9
    9aba:	61 2f       	mov	r22, r17
    9abc:	8d 2f       	mov	r24, r29
    9abe:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9ac2:	81 11       	cpse	r24, r1
    9ac4:	22 c0       	rjmp	.+68     	; 0x9b0a <solid_directional_tile+0x11e>
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x, y, x+width, y)) return tile;
    9ac6:	bf 0c       	add	r11, r15
    9ac8:	ad 2c       	mov	r10, r13
    9aca:	cb 2c       	mov	r12, r11
    9acc:	28 2d       	mov	r18, r8
    9ace:	49 2d       	mov	r20, r9
    9ad0:	61 2f       	mov	r22, r17
    9ad2:	8d 2f       	mov	r24, r29
    9ad4:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9ad8:	81 11       	cpse	r24, r1
    9ada:	17 c0       	rjmp	.+46     	; 0x9b0a <solid_directional_tile+0x11e>
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x+width, y, x+width, y+height)) return tile;
    9adc:	a7 2c       	mov	r10, r7
    9ade:	0b 2d       	mov	r16, r11
    9ae0:	28 2d       	mov	r18, r8
    9ae2:	49 2d       	mov	r20, r9
    9ae4:	61 2f       	mov	r22, r17
    9ae6:	8d 2f       	mov	r24, r29
    9ae8:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9aec:	81 11       	cpse	r24, r1
    9aee:	0d c0       	rjmp	.+26     	; 0x9b0a <solid_directional_tile+0x11e>
		if (LBLineIntersect(tile_x, tile_y, tile_x+8, tile_y+8, x, y+height, x+width, y+height)) return tile;
    9af0:	e7 2c       	mov	r14, r7
    9af2:	0f 2d       	mov	r16, r15
    9af4:	28 2d       	mov	r18, r8
    9af6:	49 2d       	mov	r20, r9
    9af8:	61 2f       	mov	r22, r17
    9afa:	8d 2f       	mov	r24, r29
    9afc:	0e 94 dd 46 	call	0x8dba	; 0x8dba <LBLineIntersect>
    9b00:	81 11       	cpse	r24, r1
    9b02:	03 c0       	rjmp	.+6      	; 0x9b0a <solid_directional_tile+0x11e>
    9b04:	03 c0       	rjmp	.+6      	; 0x9b0c <solid_directional_tile+0x120>
	}
	
	return 0;
    9b06:	80 e0       	ldi	r24, 0x00	; 0
    9b08:	01 c0       	rjmp	.+2      	; 0x9b0c <solid_directional_tile+0x120>
    9b0a:	8c 2f       	mov	r24, r28
}
    9b0c:	df 91       	pop	r29
    9b0e:	cf 91       	pop	r28
    9b10:	1f 91       	pop	r17
    9b12:	0f 91       	pop	r16
    9b14:	ff 90       	pop	r15
    9b16:	ef 90       	pop	r14
    9b18:	df 90       	pop	r13
    9b1a:	cf 90       	pop	r12
    9b1c:	bf 90       	pop	r11
    9b1e:	af 90       	pop	r10
    9b20:	9f 90       	pop	r9
    9b22:	8f 90       	pop	r8
    9b24:	7f 90       	pop	r7
    9b26:	08 95       	ret

00009b28 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    9b28:	8f 92       	push	r8
    9b2a:	9f 92       	push	r9
    9b2c:	af 92       	push	r10
    9b2e:	cf 92       	push	r12
    9b30:	ef 92       	push	r14
    9b32:	0f 93       	push	r16
    9b34:	1f 93       	push	r17
    9b36:	cf 93       	push	r28
    9b38:	df 93       	push	r29
    9b3a:	4c 01       	movw	r8, r24
    9b3c:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    9b3e:	20 e0       	ldi	r18, 0x00	; 0
    9b40:	30 e0       	ldi	r19, 0x00	; 0
    9b42:	40 e0       	ldi	r20, 0x00	; 0
    9b44:	50 e4       	ldi	r21, 0x40	; 64
    9b46:	6e 81       	ldd	r22, Y+6	; 0x06
    9b48:	7f 81       	ldd	r23, Y+7	; 0x07
    9b4a:	88 85       	ldd	r24, Y+8	; 0x08
    9b4c:	99 85       	ldd	r25, Y+9	; 0x09
    9b4e:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    9b52:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    9b56:	e6 2e       	mov	r14, r22
    9b58:	20 e0       	ldi	r18, 0x00	; 0
    9b5a:	30 e0       	ldi	r19, 0x00	; 0
    9b5c:	40 e0       	ldi	r20, 0x00	; 0
    9b5e:	50 e4       	ldi	r21, 0x40	; 64
    9b60:	6a 81       	ldd	r22, Y+2	; 0x02
    9b62:	7b 81       	ldd	r23, Y+3	; 0x03
    9b64:	8c 81       	ldd	r24, Y+4	; 0x04
    9b66:	9d 81       	ldd	r25, Y+5	; 0x05
    9b68:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    9b6c:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    9b70:	06 2f       	mov	r16, r22
    9b72:	20 e0       	ldi	r18, 0x00	; 0
    9b74:	30 e0       	ldi	r19, 0x00	; 0
    9b76:	40 e8       	ldi	r20, 0x80	; 128
    9b78:	5f e3       	ldi	r21, 0x3F	; 63
    9b7a:	f4 01       	movw	r30, r8
    9b7c:	66 81       	ldd	r22, Z+6	; 0x06
    9b7e:	77 81       	ldd	r23, Z+7	; 0x07
    9b80:	80 85       	ldd	r24, Z+8	; 0x08
    9b82:	91 85       	ldd	r25, Z+9	; 0x09
    9b84:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    9b88:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    9b8c:	16 2f       	mov	r17, r22
    9b8e:	20 e0       	ldi	r18, 0x00	; 0
    9b90:	30 e0       	ldi	r19, 0x00	; 0
    9b92:	40 e8       	ldi	r20, 0x80	; 128
    9b94:	5f e3       	ldi	r21, 0x3F	; 63
    9b96:	f4 01       	movw	r30, r8
    9b98:	62 81       	ldd	r22, Z+2	; 0x02
    9b9a:	73 81       	ldd	r23, Z+3	; 0x03
    9b9c:	84 81       	ldd	r24, Z+4	; 0x04
    9b9e:	95 81       	ldd	r25, Z+5	; 0x05
    9ba0:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    9ba4:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    9ba8:	86 2f       	mov	r24, r22
    9baa:	94 e0       	ldi	r25, 0x04	; 4
    9bac:	a9 2e       	mov	r10, r25
    9bae:	24 e0       	ldi	r18, 0x04	; 4
    9bb0:	c2 2e       	mov	r12, r18
    9bb2:	2e e0       	ldi	r18, 0x0E	; 14
    9bb4:	4e e0       	ldi	r20, 0x0E	; 14
    9bb6:	61 2f       	mov	r22, r17
    9bb8:	0e 94 b3 46 	call	0x8d66	; 0x8d66 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    9bbc:	88 23       	and	r24, r24
    9bbe:	41 f0       	breq	.+16     	; 0x9bd0 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    9bc0:	f4 01       	movw	r30, r8
    9bc2:	86 89       	ldd	r24, Z+22	; 0x16
    9bc4:	88 37       	cpi	r24, 0x78	; 120
    9bc6:	21 f4       	brne	.+8      	; 0x9bd0 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    9bc8:	81 e0       	ldi	r24, 0x01	; 1
    9bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    9bcc:	99 30       	cpi	r25, 0x09	; 9
    9bce:	08 f4       	brcc	.+2      	; 0x9bd2 <player_shot+0xaa>
    9bd0:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    9bd2:	df 91       	pop	r29
    9bd4:	cf 91       	pop	r28
    9bd6:	1f 91       	pop	r17
    9bd8:	0f 91       	pop	r16
    9bda:	ef 90       	pop	r14
    9bdc:	cf 90       	pop	r12
    9bde:	af 90       	pop	r10
    9be0:	9f 90       	pop	r9
    9be2:	8f 90       	pop	r8
    9be4:	08 95       	ret

00009be6 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    9be6:	cf 92       	push	r12
    9be8:	df 92       	push	r13
    9bea:	ef 92       	push	r14
    9bec:	ff 92       	push	r15
    9bee:	cf 93       	push	r28
    9bf0:	df 93       	push	r29
    9bf2:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    9bf4:	ca 80       	ldd	r12, Y+2	; 0x02
    9bf6:	db 80       	ldd	r13, Y+3	; 0x03
    9bf8:	ec 80       	ldd	r14, Y+4	; 0x04
    9bfa:	fd 80       	ldd	r15, Y+5	; 0x05
    9bfc:	20 e0       	ldi	r18, 0x00	; 0
    9bfe:	30 e0       	ldi	r19, 0x00	; 0
    9c00:	a9 01       	movw	r20, r18
    9c02:	c7 01       	movw	r24, r14
    9c04:	b6 01       	movw	r22, r12
    9c06:	0e 94 b3 5a 	call	0xb566	; 0xb566 <__cmpsf2>
    9c0a:	87 fd       	sbrc	r24, 7
    9c0c:	31 c0       	rjmp	.+98     	; 0x9c70 <collision_detect_boundries+0x8a>
    9c0e:	20 e0       	ldi	r18, 0x00	; 0
    9c10:	30 e0       	ldi	r19, 0x00	; 0
    9c12:	40 ee       	ldi	r20, 0xE0	; 224
    9c14:	50 e4       	ldi	r21, 0x40	; 64
    9c16:	c7 01       	movw	r24, r14
    9c18:	b6 01       	movw	r22, r12
    9c1a:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    9c1e:	20 e0       	ldi	r18, 0x00	; 0
    9c20:	30 e0       	ldi	r19, 0x00	; 0
    9c22:	40 e7       	ldi	r20, 0x70	; 112
    9c24:	53 e4       	ldi	r21, 0x43	; 67
    9c26:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <__gesf2>
    9c2a:	18 16       	cp	r1, r24
    9c2c:	0c f1       	brlt	.+66     	; 0x9c70 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9c2e:	ce 80       	ldd	r12, Y+6	; 0x06
    9c30:	df 80       	ldd	r13, Y+7	; 0x07
    9c32:	e8 84       	ldd	r14, Y+8	; 0x08
    9c34:	f9 84       	ldd	r15, Y+9	; 0x09
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    9c36:	20 e0       	ldi	r18, 0x00	; 0
    9c38:	30 e0       	ldi	r19, 0x00	; 0
    9c3a:	40 ec       	ldi	r20, 0xC0	; 192
    9c3c:	51 e4       	ldi	r21, 0x41	; 65
    9c3e:	c7 01       	movw	r24, r14
    9c40:	b6 01       	movw	r22, r12
    9c42:	0e 94 b3 5a 	call	0xb566	; 0xb566 <__cmpsf2>
    9c46:	87 fd       	sbrc	r24, 7
    9c48:	13 c0       	rjmp	.+38     	; 0x9c70 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9c4a:	20 e0       	ldi	r18, 0x00	; 0
    9c4c:	30 e0       	ldi	r19, 0x00	; 0
    9c4e:	40 ee       	ldi	r20, 0xE0	; 224
    9c50:	50 e4       	ldi	r21, 0x40	; 64
    9c52:	c7 01       	movw	r24, r14
    9c54:	b6 01       	movw	r22, r12
    9c56:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    9c5a:	c1 e0       	ldi	r28, 0x01	; 1
    9c5c:	20 e0       	ldi	r18, 0x00	; 0
    9c5e:	30 e0       	ldi	r19, 0x00	; 0
    9c60:	40 e6       	ldi	r20, 0x60	; 96
    9c62:	53 e4       	ldi	r21, 0x43	; 67
    9c64:	0e 94 fd 5b 	call	0xb7fa	; 0xb7fa <__gesf2>
    9c68:	18 16       	cp	r1, r24
    9c6a:	1c f0       	brlt	.+6      	; 0x9c72 <collision_detect_boundries+0x8c>
    9c6c:	c0 e0       	ldi	r28, 0x00	; 0
    9c6e:	01 c0       	rjmp	.+2      	; 0x9c72 <collision_detect_boundries+0x8c>
	{
		return 1;
    9c70:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    9c72:	8c 2f       	mov	r24, r28
    9c74:	df 91       	pop	r29
    9c76:	cf 91       	pop	r28
    9c78:	ff 90       	pop	r15
    9c7a:	ef 90       	pop	r14
    9c7c:	df 90       	pop	r13
    9c7e:	cf 90       	pop	r12
    9c80:	08 95       	ret

00009c82 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    9c82:	ff 92       	push	r15
    9c84:	0f 93       	push	r16
    9c86:	1f 93       	push	r17
    9c88:	cf 93       	push	r28
    9c8a:	df 93       	push	r29
    9c8c:	ec 01       	movw	r28, r24
    9c8e:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    9c90:	20 e0       	ldi	r18, 0x00	; 0
    9c92:	30 e0       	ldi	r19, 0x00	; 0
    9c94:	40 e0       	ldi	r20, 0x00	; 0
    9c96:	5e e3       	ldi	r21, 0x3E	; 62
    9c98:	6e 81       	ldd	r22, Y+6	; 0x06
    9c9a:	7f 81       	ldd	r23, Y+7	; 0x07
    9c9c:	88 85       	ldd	r24, Y+8	; 0x08
    9c9e:	99 85       	ldd	r25, Y+9	; 0x09
    9ca0:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    9ca4:	20 e0       	ldi	r18, 0x00	; 0
    9ca6:	30 e0       	ldi	r19, 0x00	; 0
    9ca8:	40 e4       	ldi	r20, 0x40	; 64
    9caa:	50 e4       	ldi	r21, 0x40	; 64
    9cac:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <__subsf3>
    9cb0:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
	int tile_index = (y * 30) + x;
    9cb4:	8e e1       	ldi	r24, 0x1E	; 30
    9cb6:	68 9f       	mul	r22, r24
    9cb8:	80 01       	movw	r16, r0
    9cba:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    9cbc:	20 e0       	ldi	r18, 0x00	; 0
    9cbe:	30 e0       	ldi	r19, 0x00	; 0
    9cc0:	40 e0       	ldi	r20, 0x00	; 0
    9cc2:	5e e3       	ldi	r21, 0x3E	; 62
    9cc4:	6a 81       	ldd	r22, Y+2	; 0x02
    9cc6:	7b 81       	ldd	r23, Y+3	; 0x03
    9cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    9cca:	9d 81       	ldd	r25, Y+5	; 0x05
    9ccc:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    9cd0:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    9cd4:	06 0f       	add	r16, r22
    9cd6:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    9cd8:	89 8d       	ldd	r24, Y+25	; 0x19
    9cda:	88 23       	and	r24, r24
    9cdc:	c1 f0       	breq	.+48     	; 0x9d0e <kill_player+0x8c>
	{
		SetTile(hud_x+10, 1, 0);
    9cde:	40 e0       	ldi	r20, 0x00	; 0
    9ce0:	50 e0       	ldi	r21, 0x00	; 0
    9ce2:	61 e0       	ldi	r22, 0x01	; 1
    9ce4:	8a e0       	ldi	r24, 0x0A	; 10
    9ce6:	8f 0d       	add	r24, r15
    9ce8:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    9cec:	c8 01       	movw	r24, r16
    9cee:	6e e1       	ldi	r22, 0x1E	; 30
    9cf0:	70 e0       	ldi	r23, 0x00	; 0
    9cf2:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    9cf6:	6c 5f       	subi	r22, 0xFC	; 252
    9cf8:	4d e4       	ldi	r20, 0x4D	; 77
    9cfa:	51 e2       	ldi	r21, 0x21	; 33
    9cfc:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    9d00:	87 e0       	ldi	r24, 0x07	; 7
    9d02:	f8 01       	movw	r30, r16
    9d04:	ee 59       	subi	r30, 0x9E	; 158
    9d06:	f3 4f       	sbci	r31, 0xF3	; 243
    9d08:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    9d0a:	82 e3       	ldi	r24, 0x32	; 50
    9d0c:	8f 8b       	std	Y+23, r24	; 0x17
	}
	if (player->has_rocket)
    9d0e:	88 8d       	ldd	r24, Y+24	; 0x18
    9d10:	88 23       	and	r24, r24
    9d12:	b9 f0       	breq	.+46     	; 0x9d42 <kill_player+0xc0>
	{
		SetTile(hud_x+11, 1, 0);
    9d14:	40 e0       	ldi	r20, 0x00	; 0
    9d16:	50 e0       	ldi	r21, 0x00	; 0
    9d18:	61 e0       	ldi	r22, 0x01	; 1
    9d1a:	8b e0       	ldi	r24, 0x0B	; 11
    9d1c:	8f 0d       	add	r24, r15
    9d1e:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    9d22:	c8 01       	movw	r24, r16
    9d24:	6e e1       	ldi	r22, 0x1E	; 30
    9d26:	70 e0       	ldi	r23, 0x00	; 0
    9d28:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    9d2c:	6c 5f       	subi	r22, 0xFC	; 252
    9d2e:	47 e4       	ldi	r20, 0x47	; 71
    9d30:	51 e2       	ldi	r21, 0x21	; 33
    9d32:	8f 5f       	subi	r24, 0xFF	; 255
    9d34:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    9d38:	f8 01       	movw	r30, r16
    9d3a:	ee 59       	subi	r30, 0x9E	; 158
    9d3c:	f3 4f       	sbci	r31, 0xF3	; 243
    9d3e:	89 e0       	ldi	r24, 0x09	; 9
    9d40:	80 a3       	std	Z+32, r24	; 0x20
	}
	player->has_over_speed = false;
    9d42:	19 8e       	std	Y+25, r1	; 0x19
	player->has_rocket = false;
    9d44:	18 8e       	std	Y+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    9d46:	8b 89       	ldd	r24, Y+19	; 0x13
    9d48:	81 60       	ori	r24, 0x01	; 1
    9d4a:	8b 8b       	std	Y+19, r24	; 0x13
}
    9d4c:	df 91       	pop	r29
    9d4e:	cf 91       	pop	r28
    9d50:	1f 91       	pop	r17
    9d52:	0f 91       	pop	r16
    9d54:	ff 90       	pop	r15
    9d56:	08 95       	ret

00009d58 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    9d58:	fc 01       	movw	r30, r24
    9d5a:	8e e1       	ldi	r24, 0x1E	; 30
    9d5c:	48 9f       	mul	r20, r24
    9d5e:	a0 01       	movw	r20, r0
    9d60:	11 24       	eor	r1, r1
    9d62:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    9d64:	64 0f       	add	r22, r20
    9d66:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    9d68:	21 11       	cpse	r18, r1
    9d6a:	05 c0       	rjmp	.+10     	; 0x9d76 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    9d6c:	71 83       	std	Z+1, r23	; 0x01
    9d6e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9d70:	6f 5f       	subi	r22, 0xFF	; 255
    9d72:	7f 4f       	sbci	r23, 0xFF	; 255
    9d74:	12 c0       	rjmp	.+36     	; 0x9d9a <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    9d76:	21 30       	cpi	r18, 0x01	; 1
    9d78:	19 f4       	brne	.+6      	; 0x9d80 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    9d7a:	cb 01       	movw	r24, r22
    9d7c:	01 96       	adiw	r24, 0x01	; 1
    9d7e:	04 c0       	rjmp	.+8      	; 0x9d88 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    9d80:	22 30       	cpi	r18, 0x02	; 2
    9d82:	39 f4       	brne	.+14     	; 0x9d92 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    9d84:	cb 01       	movw	r24, r22
    9d86:	4e 96       	adiw	r24, 0x1e	; 30
    9d88:	91 83       	std	Z+1, r25	; 0x01
    9d8a:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    9d8c:	61 5e       	subi	r22, 0xE1	; 225
    9d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    9d90:	04 c0       	rjmp	.+8      	; 0x9d9a <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    9d92:	71 83       	std	Z+1, r23	; 0x01
    9d94:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    9d96:	62 5e       	subi	r22, 0xE2	; 226
    9d98:	7f 4f       	sbci	r23, 0xFF	; 255
    9d9a:	73 83       	std	Z+3, r23	; 0x03
    9d9c:	62 83       	std	Z+2, r22	; 0x02
    9d9e:	08 95       	ret

00009da0 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    9da0:	ef 92       	push	r14
    9da2:	ff 92       	push	r15
    9da4:	0f 93       	push	r16
    9da6:	1f 93       	push	r17
    9da8:	cf 93       	push	r28
    9daa:	df 93       	push	r29
    9dac:	ec 01       	movw	r28, r24
    9dae:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    9db0:	8e e1       	ldi	r24, 0x1E	; 30
    9db2:	e8 2e       	mov	r14, r24
    9db4:	f1 2c       	mov	r15, r1
    9db6:	cb 01       	movw	r24, r22
    9db8:	b7 01       	movw	r22, r14
    9dba:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    9dbe:	6d 5f       	subi	r22, 0xFD	; 253
    9dc0:	40 e0       	ldi	r20, 0x00	; 0
    9dc2:	50 e0       	ldi	r21, 0x00	; 0
    9dc4:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    9dc8:	88 81       	ld	r24, Y
    9dca:	fe 01       	movw	r30, r28
    9dcc:	9c e0       	ldi	r25, 0x0C	; 12
    9dce:	89 9f       	mul	r24, r25
    9dd0:	e0 0d       	add	r30, r0
    9dd2:	f1 1d       	adc	r31, r1
    9dd4:	11 24       	eor	r1, r1
    9dd6:	83 85       	ldd	r24, Z+11	; 0x0b
    9dd8:	94 85       	ldd	r25, Z+12	; 0x0c
    9dda:	00 97       	sbiw	r24, 0x00	; 0
    9ddc:	41 f0       	breq	.+16     	; 0x9dee <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    9dde:	b7 01       	movw	r22, r14
    9de0:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    9de4:	6d 5f       	subi	r22, 0xFD	; 253
    9de6:	40 e0       	ldi	r20, 0x00	; 0
    9de8:	50 e0       	ldi	r21, 0x00	; 0
    9dea:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    9dee:	88 81       	ld	r24, Y
    9df0:	fe 01       	movw	r30, r28
    9df2:	9c e0       	ldi	r25, 0x0C	; 12
    9df4:	89 9f       	mul	r24, r25
    9df6:	e0 0d       	add	r30, r0
    9df8:	f1 1d       	adc	r31, r1
    9dfa:	11 24       	eor	r1, r1
    9dfc:	14 87       	std	Z+12, r17	; 0x0c
    9dfe:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    9e00:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    9e02:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    9e04:	82 30       	cpi	r24, 0x02	; 2
    9e06:	11 f0       	breq	.+4      	; 0x9e0c <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    9e08:	88 83       	st	Y, r24
    9e0a:	01 c0       	rjmp	.+2      	; 0x9e0e <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    9e0c:	18 82       	st	Y, r1
	}
}
    9e0e:	df 91       	pop	r29
    9e10:	cf 91       	pop	r28
    9e12:	1f 91       	pop	r17
    9e14:	0f 91       	pop	r16
    9e16:	ff 90       	pop	r15
    9e18:	ef 90       	pop	r14
    9e1a:	08 95       	ret

00009e1c <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    9e1c:	2f 92       	push	r2
    9e1e:	3f 92       	push	r3
    9e20:	4f 92       	push	r4
    9e22:	5f 92       	push	r5
    9e24:	6f 92       	push	r6
    9e26:	7f 92       	push	r7
    9e28:	8f 92       	push	r8
    9e2a:	9f 92       	push	r9
    9e2c:	af 92       	push	r10
    9e2e:	bf 92       	push	r11
    9e30:	cf 92       	push	r12
    9e32:	df 92       	push	r13
    9e34:	ef 92       	push	r14
    9e36:	ff 92       	push	r15
    9e38:	0f 93       	push	r16
    9e3a:	1f 93       	push	r17
    9e3c:	cf 93       	push	r28
    9e3e:	df 93       	push	r29
    9e40:	00 d0       	rcall	.+0      	; 0x9e42 <collision_detect_shot+0x26>
    9e42:	00 d0       	rcall	.+0      	; 0x9e44 <collision_detect_shot+0x28>
    9e44:	00 d0       	rcall	.+0      	; 0x9e46 <collision_detect_shot+0x2a>
    9e46:	cd b7       	in	r28, 0x3d	; 61
    9e48:	de b7       	in	r29, 0x3e	; 62
    9e4a:	3c 01       	movw	r6, r24
    9e4c:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    9e4e:	1a 82       	std	Y+2, r1	; 0x02
    9e50:	19 82       	std	Y+1, r1	; 0x01
    9e52:	1c 82       	std	Y+4, r1	; 0x04
    9e54:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    9e56:	20 e0       	ldi	r18, 0x00	; 0
    9e58:	30 e0       	ldi	r19, 0x00	; 0
    9e5a:	40 e0       	ldi	r20, 0x00	; 0
    9e5c:	5e e3       	ldi	r21, 0x3E	; 62
    9e5e:	fb 01       	movw	r30, r22
    9e60:	66 81       	ldd	r22, Z+6	; 0x06
    9e62:	77 81       	ldd	r23, Z+7	; 0x07
    9e64:	80 85       	ldd	r24, Z+8	; 0x08
    9e66:	91 85       	ldd	r25, Z+9	; 0x09
    9e68:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    9e6c:	20 e0       	ldi	r18, 0x00	; 0
    9e6e:	30 e0       	ldi	r19, 0x00	; 0
    9e70:	40 e4       	ldi	r20, 0x40	; 64
    9e72:	50 e4       	ldi	r21, 0x40	; 64
    9e74:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <__subsf3>
    9e78:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    9e7c:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    9e7e:	20 e0       	ldi	r18, 0x00	; 0
    9e80:	30 e0       	ldi	r19, 0x00	; 0
    9e82:	40 e0       	ldi	r20, 0x00	; 0
    9e84:	5e e3       	ldi	r21, 0x3E	; 62
    9e86:	f4 01       	movw	r30, r8
    9e88:	62 81       	ldd	r22, Z+2	; 0x02
    9e8a:	73 81       	ldd	r23, Z+3	; 0x03
    9e8c:	84 81       	ldd	r24, Z+4	; 0x04
    9e8e:	95 81       	ldd	r25, Z+5	; 0x05
    9e90:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    9e94:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
	u8 tile;
	u8 hud_x;
	Player* p = 0;
    char hit_metal = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    9e98:	f4 01       	movw	r30, r8
    9e9a:	20 81       	ld	r18, Z
    9e9c:	41 2f       	mov	r20, r17
    9e9e:	ce 01       	movw	r24, r28
    9ea0:	01 96       	adiw	r24, 0x01	; 1
    9ea2:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    9ea6:	c4 01       	movw	r24, r8
    9ea8:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <collision_detect_boundries>
    9eac:	88 23       	and	r24, r24
    9eae:	51 f0       	breq	.+20     	; 0x9ec4 <collision_detect_shot+0xa8>
	{
		init_shot_state(shot, shot->shot_type);
    9eb0:	f4 01       	movw	r30, r8
    9eb2:	62 85       	ldd	r22, Z+10	; 0x0a
    9eb4:	c4 01       	movw	r24, r8
    9eb6:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
		player->active_shots--;
    9eba:	f3 01       	movw	r30, r6
    9ebc:	80 89       	ldd	r24, Z+16	; 0x10
    9ebe:	81 50       	subi	r24, 0x01	; 1
    9ec0:	80 8b       	std	Z+16, r24	; 0x10
		return;
    9ec2:	53 c1       	rjmp	.+678    	; 0xa16a <collision_detect_shot+0x34e>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    9ec4:	b4 01       	movw	r22, r8
    9ec6:	8e ed       	ldi	r24, 0xDE	; 222
    9ec8:	9b e0       	ldi	r25, 0x0B	; 11
    9eca:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <player_shot>
    9ece:	88 23       	and	r24, r24
    9ed0:	b9 f0       	breq	.+46     	; 0x9f00 <collision_detect_shot+0xe4>
    9ed2:	80 91 f1 0b 	lds	r24, 0x0BF1
    9ed6:	80 fd       	sbrc	r24, 0
    9ed8:	13 c0       	rjmp	.+38     	; 0x9f00 <collision_detect_shot+0xe4>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    9eda:	80 91 60 0f 	lds	r24, 0x0F60
    9ede:	8f 5f       	subi	r24, 0xFF	; 255
    9ee0:	80 93 60 0f 	sts	0x0F60, r24
		player2.score++;
    9ee4:	80 91 5f 0f 	lds	r24, 0x0F5F
    9ee8:	8f 5f       	subi	r24, 0xFF	; 255
    9eea:	80 93 5f 0f 	sts	0x0F5F, r24
		render_score(&player2, 15);
    9eee:	6f e0       	ldi	r22, 0x0F	; 15
    9ef0:	81 e5       	ldi	r24, 0x51	; 81
    9ef2:	9f e0       	ldi	r25, 0x0F	; 15
    9ef4:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    9ef8:	0e ed       	ldi	r16, 0xDE	; 222
    9efa:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    9efc:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    9efe:	26 c0       	rjmp	.+76     	; 0x9f4c <collision_detect_shot+0x130>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    9f00:	b4 01       	movw	r22, r8
    9f02:	81 e5       	ldi	r24, 0x51	; 81
    9f04:	9f e0       	ldi	r25, 0x0F	; 15
    9f06:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <player_shot>
    9f0a:	81 11       	cpse	r24, r1
    9f0c:	08 c0       	rjmp	.+16     	; 0x9f1e <collision_detect_shot+0x102>
    9f0e:	ce 01       	movw	r24, r28
    9f10:	01 96       	adiw	r24, 0x01	; 1
    9f12:	9e 83       	std	Y+6, r25	; 0x06
    9f14:	8d 83       	std	Y+5, r24	; 0x05
	{
		p = &player2;
		hud_x = 15;
    9f16:	21 2c       	mov	r2, r1
    9f18:	31 2c       	mov	r3, r1
    9f1a:	d1 2c       	mov	r13, r1
    9f1c:	5c c0       	rjmp	.+184    	; 0x9fd6 <collision_detect_shot+0x1ba>
		hud_x = 0;
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    9f1e:	80 91 64 0f 	lds	r24, 0x0F64
    9f22:	80 fd       	sbrc	r24, 0
    9f24:	f4 cf       	rjmp	.-24     	; 0x9f0e <collision_detect_shot+0xf2>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    9f26:	80 91 ed 0b 	lds	r24, 0x0BED
    9f2a:	8f 5f       	subi	r24, 0xFF	; 255
    9f2c:	80 93 ed 0b 	sts	0x0BED, r24
		player1.score++;
    9f30:	80 91 ec 0b 	lds	r24, 0x0BEC
    9f34:	8f 5f       	subi	r24, 0xFF	; 255
    9f36:	80 93 ec 0b 	sts	0x0BEC, r24
		render_score(&player1, 0);
    9f3a:	60 e0       	ldi	r22, 0x00	; 0
    9f3c:	8e ed       	ldi	r24, 0xDE	; 222
    9f3e:	9b e0       	ldi	r25, 0x0B	; 11
    9f40:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
	{
		p = &player2;
    9f44:	01 e5       	ldi	r16, 0x51	; 81
    9f46:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    9f48:	5f e0       	ldi	r21, 0x0F	; 15
    9f4a:	f5 2e       	mov	r15, r21
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    9f4c:	01 15       	cp	r16, r1
    9f4e:	11 05       	cpc	r17, r1
    9f50:	f1 f2       	breq	.-68     	; 0x9f0e <collision_detect_shot+0xf2>
	{
		init_shot_state(shot, shot->shot_type);
    9f52:	f4 01       	movw	r30, r8
    9f54:	62 85       	ldd	r22, Z+10	; 0x0a
    9f56:	c4 01       	movw	r24, r8
    9f58:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
		player->active_shots--;
    9f5c:	f3 01       	movw	r30, r6
    9f5e:	80 89       	ldd	r24, Z+16	; 0x10
    9f60:	81 50       	subi	r24, 0x01	; 1
    9f62:	80 8b       	std	Z+16, r24	; 0x10
		kill_player(p, hud_x);
    9f64:	6f 2d       	mov	r22, r15
    9f66:	c8 01       	movw	r24, r16
    9f68:	0e 94 41 4e 	call	0x9c82	; 0x9c82 <kill_player>
		SFX_TANK_EXPLODE;
    9f6c:	2f ef       	ldi	r18, 0xFF	; 255
    9f6e:	40 e1       	ldi	r20, 0x10	; 16
    9f70:	6a e0       	ldi	r22, 0x0A	; 10
    9f72:	f8 c0       	rjmp	.+496    	; 0xa164 <collision_detect_shot+0x348>
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    9f74:	11 30       	cpi	r17, 0x01	; 1
    9f76:	e1 f1       	breq	.+120    	; 0x9ff0 <collision_detect_shot+0x1d4>
			}
			SFX_BRICK_EXPLODE;
			hit_metal = 0;
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    9f78:	20 e0       	ldi	r18, 0x00	; 0
    9f7a:	30 e0       	ldi	r19, 0x00	; 0
    9f7c:	40 e0       	ldi	r20, 0x00	; 0
    9f7e:	50 e4       	ldi	r21, 0x40	; 64
    9f80:	f4 01       	movw	r30, r8
    9f82:	66 81       	ldd	r22, Z+6	; 0x06
    9f84:	77 81       	ldd	r23, Z+7	; 0x07
    9f86:	80 85       	ldd	r24, Z+8	; 0x08
    9f88:	91 85       	ldd	r25, Z+9	; 0x09
    9f8a:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    9f8e:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    9f92:	f6 2e       	mov	r15, r22
    9f94:	20 e0       	ldi	r18, 0x00	; 0
    9f96:	30 e0       	ldi	r19, 0x00	; 0
    9f98:	40 e0       	ldi	r20, 0x00	; 0
    9f9a:	50 e4       	ldi	r21, 0x40	; 64
    9f9c:	f4 01       	movw	r30, r8
    9f9e:	62 81       	ldd	r22, Z+2	; 0x02
    9fa0:	73 81       	ldd	r23, Z+3	; 0x03
    9fa2:	84 81       	ldd	r24, Z+4	; 0x04
    9fa4:	95 81       	ldd	r25, Z+5	; 0x05
    9fa6:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    9faa:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    9fae:	b6 2e       	mov	r11, r22
    9fb0:	04 e0       	ldi	r16, 0x04	; 4
    9fb2:	24 e0       	ldi	r18, 0x04	; 4
    9fb4:	4f 2d       	mov	r20, r15
    9fb6:	c2 01       	movw	r24, r4
    9fb8:	0e 94 f6 4c 	call	0x99ec	; 0x99ec <solid_directional_tile>
    9fbc:	81 11       	cpse	r24, r1
    9fbe:	76 c0       	rjmp	.+236    	; 0xa0ac <collision_detect_shot+0x290>
			}
			SFX_METAL;
			hit_metal = 0;
			break;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    9fc0:	12 30       	cpi	r17, 0x02	; 2
    9fc2:	09 f4       	brne	.+2      	; 0x9fc6 <collision_detect_shot+0x1aa>
    9fc4:	a2 c0       	rjmp	.+324    	; 0xa10a <collision_detect_shot+0x2ee>
    9fc6:	ff ef       	ldi	r31, 0xFF	; 255
    9fc8:	2f 1a       	sub	r2, r31
    9fca:	3f 0a       	sbc	r3, r31
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    9fcc:	82 e0       	ldi	r24, 0x02	; 2
    9fce:	28 16       	cp	r2, r24
    9fd0:	31 04       	cpc	r3, r1
    9fd2:	09 f4       	brne	.+2      	; 0x9fd6 <collision_detect_shot+0x1ba>
    9fd4:	b9 c0       	rjmp	.+370    	; 0xa148 <collision_detect_shot+0x32c>
	{
		tile = level.level_map[tiles[i]];
    9fd6:	ed 81       	ldd	r30, Y+5	; 0x05
    9fd8:	fe 81       	ldd	r31, Y+6	; 0x06
    9fda:	41 90       	ld	r4, Z+
    9fdc:	51 90       	ld	r5, Z+
    9fde:	fe 83       	std	Y+6, r31	; 0x06
    9fe0:	ed 83       	std	Y+5, r30	; 0x05
    9fe2:	f2 01       	movw	r30, r4
    9fe4:	ee 59       	subi	r30, 0x9E	; 158
    9fe6:	f3 4f       	sbci	r31, 0xF3	; 243
    9fe8:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    9fea:	11 23       	and	r17, r17
    9fec:	61 f3       	breq	.-40     	; 0x9fc6 <collision_detect_shot+0x1aa>
    9fee:	c2 cf       	rjmp	.-124    	; 0x9f74 <collision_detect_shot+0x158>
		if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    9ff0:	c2 01       	movw	r24, r4
    9ff2:	6e e1       	ldi	r22, 0x1E	; 30
    9ff4:	70 e0       	ldi	r23, 0x00	; 0
    9ff6:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    9ffa:	7b 01       	movw	r14, r22
    9ffc:	f3 e0       	ldi	r31, 0x03	; 3
    9ffe:	ef 0e       	add	r14, r31
    a000:	f1 1c       	adc	r15, r1
    a002:	ee 0c       	add	r14, r14
    a004:	ee 0c       	add	r14, r14
    a006:	ee 0c       	add	r14, r14
    a008:	08 2f       	mov	r16, r24
    a00a:	00 0f       	add	r16, r16
    a00c:	00 0f       	add	r16, r16
    a00e:	00 0f       	add	r16, r16
    a010:	20 e0       	ldi	r18, 0x00	; 0
    a012:	30 e0       	ldi	r19, 0x00	; 0
    a014:	40 e0       	ldi	r20, 0x00	; 0
    a016:	50 e4       	ldi	r21, 0x40	; 64
    a018:	f4 01       	movw	r30, r8
    a01a:	66 81       	ldd	r22, Z+6	; 0x06
    a01c:	77 81       	ldd	r23, Z+7	; 0x07
    a01e:	80 85       	ldd	r24, Z+8	; 0x08
    a020:	91 85       	ldd	r25, Z+9	; 0x09
    a022:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    a026:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    a02a:	f6 2e       	mov	r15, r22
    a02c:	20 e0       	ldi	r18, 0x00	; 0
    a02e:	30 e0       	ldi	r19, 0x00	; 0
    a030:	40 e0       	ldi	r20, 0x00	; 0
    a032:	50 e4       	ldi	r21, 0x40	; 64
    a034:	f4 01       	movw	r30, r8
    a036:	62 81       	ldd	r22, Z+2	; 0x02
    a038:	73 81       	ldd	r23, Z+3	; 0x03
    a03a:	84 81       	ldd	r24, Z+4	; 0x04
    a03c:	95 81       	ldd	r25, Z+5	; 0x05
    a03e:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    a042:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    a046:	86 2f       	mov	r24, r22
    a048:	38 e0       	ldi	r19, 0x08	; 8
    a04a:	a3 2e       	mov	r10, r19
    a04c:	48 e0       	ldi	r20, 0x08	; 8
    a04e:	c4 2e       	mov	r12, r20
    a050:	24 e0       	ldi	r18, 0x04	; 4
    a052:	44 e0       	ldi	r20, 0x04	; 4
    a054:	6f 2d       	mov	r22, r15
    a056:	0e 94 b3 46 	call	0x8d66	; 0x8d66 <LBCollides>
    a05a:	88 23       	and	r24, r24
    a05c:	09 f4       	brne	.+2      	; 0xa060 <collision_detect_shot+0x244>
    a05e:	8c cf       	rjmp	.-232    	; 0x9f78 <collision_detect_shot+0x15c>
		{
			explode_tile(&tile_animations, tiles[i]);
    a060:	b2 01       	movw	r22, r4
    a062:	85 ec       	ldi	r24, 0xC5	; 197
    a064:	9b e0       	ldi	r25, 0x0B	; 11
    a066:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <explode_tile>
			level.level_map[tiles[i]] = L_EMPTY;
    a06a:	f1 01       	movw	r30, r2
    a06c:	ee 0f       	add	r30, r30
    a06e:	ff 1f       	adc	r31, r31
    a070:	81 e0       	ldi	r24, 0x01	; 1
    a072:	90 e0       	ldi	r25, 0x00	; 0
    a074:	8c 0f       	add	r24, r28
    a076:	9d 1f       	adc	r25, r29
    a078:	e8 0f       	add	r30, r24
    a07a:	f9 1f       	adc	r31, r25
    a07c:	01 90       	ld	r0, Z+
    a07e:	f0 81       	ld	r31, Z
    a080:	e0 2d       	mov	r30, r0
    a082:	ee 59       	subi	r30, 0x9E	; 158
    a084:	f3 4f       	sbci	r31, 0xF3	; 243
    a086:	11 82       	std	Z+1, r1	; 0x01
			shot->hit_count--;
    a088:	f4 01       	movw	r30, r8
    a08a:	83 85       	ldd	r24, Z+11	; 0x0b
    a08c:	81 50       	subi	r24, 0x01	; 1
    a08e:	83 87       	std	Z+11, r24	; 0x0b
			if (shot->hit_count <= 0)
    a090:	81 11       	cpse	r24, r1
    a092:	08 c0       	rjmp	.+16     	; 0xa0a4 <collision_detect_shot+0x288>
			{
				init_shot_state(shot, shot->shot_type);
    a094:	62 85       	ldd	r22, Z+10	; 0x0a
    a096:	c4 01       	movw	r24, r8
    a098:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
				player->active_shots--;
    a09c:	f3 01       	movw	r30, r6
    a09e:	80 89       	ldd	r24, Z+16	; 0x10
    a0a0:	81 50       	subi	r24, 0x01	; 1
    a0a2:	80 8b       	std	Z+16, r24	; 0x10
			}
			SFX_BRICK_EXPLODE;
    a0a4:	2f ed       	ldi	r18, 0xDF	; 223
    a0a6:	47 e1       	ldi	r20, 0x17	; 23
    a0a8:	61 e0       	ldi	r22, 0x01	; 1
    a0aa:	5c c0       	rjmp	.+184    	; 0xa164 <collision_detect_shot+0x348>
			hit_metal = 0;
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			recoil_sprite(&shot->shared);
    a0ac:	c4 01       	movw	r24, r8
    a0ae:	0e 94 7f 4c 	call	0x98fe	; 0x98fe <recoil_sprite>
			switch (tile)
    a0b2:	14 30       	cpi	r17, 0x04	; 4
    a0b4:	79 f0       	breq	.+30     	; 0xa0d4 <collision_detect_shot+0x2b8>
    a0b6:	18 f4       	brcc	.+6      	; 0xa0be <collision_detect_shot+0x2a2>
    a0b8:	13 30       	cpi	r17, 0x03	; 3
    a0ba:	31 f0       	breq	.+12     	; 0xa0c8 <collision_detect_shot+0x2ac>
    a0bc:	1f c0       	rjmp	.+62     	; 0xa0fc <collision_detect_shot+0x2e0>
    a0be:	15 30       	cpi	r17, 0x05	; 5
    a0c0:	b9 f0       	breq	.+46     	; 0xa0f0 <collision_detect_shot+0x2d4>
    a0c2:	16 30       	cpi	r17, 0x06	; 6
    a0c4:	79 f0       	breq	.+30     	; 0xa0e4 <collision_detect_shot+0x2c8>
    a0c6:	1a c0       	rjmp	.+52     	; 0xa0fc <collision_detect_shot+0x2e0>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    a0c8:	f4 01       	movw	r30, r8
    a0ca:	80 81       	ld	r24, Z
    a0cc:	81 11       	cpse	r24, r1
    a0ce:	06 c0       	rjmp	.+12     	; 0xa0dc <collision_detect_shot+0x2c0>
						shot->shared.direction = D_RIGHT;
    a0d0:	81 e0       	ldi	r24, 0x01	; 1
    a0d2:	05 c0       	rjmp	.+10     	; 0xa0de <collision_detect_shot+0x2c2>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    a0d4:	f4 01       	movw	r30, r8
    a0d6:	80 81       	ld	r24, Z
    a0d8:	88 23       	and	r24, r24
    a0da:	41 f0       	breq	.+16     	; 0xa0ec <collision_detect_shot+0x2d0>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    a0dc:	82 e0       	ldi	r24, 0x02	; 2
    a0de:	f4 01       	movw	r30, r8
    a0e0:	80 83       	st	Z, r24
    a0e2:	0c c0       	rjmp	.+24     	; 0xa0fc <collision_detect_shot+0x2e0>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    a0e4:	f4 01       	movw	r30, r8
    a0e6:	80 81       	ld	r24, Z
    a0e8:	82 30       	cpi	r24, 0x02	; 2
    a0ea:	31 f4       	brne	.+12     	; 0xa0f8 <collision_detect_shot+0x2dc>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    a0ec:	83 e0       	ldi	r24, 0x03	; 3
    a0ee:	f7 cf       	rjmp	.-18     	; 0xa0de <collision_detect_shot+0x2c2>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    a0f0:	f4 01       	movw	r30, r8
    a0f2:	80 81       	ld	r24, Z
    a0f4:	82 30       	cpi	r24, 0x02	; 2
    a0f6:	61 f3       	breq	.-40     	; 0xa0d0 <collision_detect_shot+0x2b4>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    a0f8:	f4 01       	movw	r30, r8
    a0fa:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    a0fc:	f4 01       	movw	r30, r8
    a0fe:	84 85       	ldd	r24, Z+12	; 0x0c
    a100:	81 50       	subi	r24, 0x01	; 1
    a102:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->rebounds <= 0)
    a104:	81 11       	cpse	r24, r1
    a106:	2b c0       	rjmp	.+86     	; 0xa15e <collision_detect_shot+0x342>
    a108:	22 c0       	rjmp	.+68     	; 0xa14e <collision_detect_shot+0x332>
			}
			SFX_METAL;
			hit_metal = 0;
			break;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a10a:	c2 01       	movw	r24, r4
    a10c:	6e e1       	ldi	r22, 0x1E	; 30
    a10e:	70 e0       	ldi	r23, 0x00	; 0
    a110:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    a114:	6d 5f       	subi	r22, 0xFD	; 253
    a116:	7f 4f       	sbci	r23, 0xFF	; 255
    a118:	e6 2e       	mov	r14, r22
    a11a:	ee 0c       	add	r14, r14
    a11c:	ee 0c       	add	r14, r14
    a11e:	ee 0c       	add	r14, r14
    a120:	08 2f       	mov	r16, r24
    a122:	00 0f       	add	r16, r16
    a124:	00 0f       	add	r16, r16
    a126:	00 0f       	add	r16, r16
    a128:	88 e0       	ldi	r24, 0x08	; 8
    a12a:	a8 2e       	mov	r10, r24
    a12c:	98 e0       	ldi	r25, 0x08	; 8
    a12e:	c9 2e       	mov	r12, r25
    a130:	24 e0       	ldi	r18, 0x04	; 4
    a132:	44 e0       	ldi	r20, 0x04	; 4
    a134:	6f 2d       	mov	r22, r15
    a136:	8b 2d       	mov	r24, r11
    a138:	0e 94 b3 46 	call	0x8d66	; 0x8d66 <LBCollides>
    a13c:	88 23       	and	r24, r24
    a13e:	09 f4       	brne	.+2      	; 0xa142 <collision_detect_shot+0x326>
    a140:	42 cf       	rjmp	.-380    	; 0x9fc6 <collision_detect_shot+0x1aa>
        {
		    hit_metal = 1;
    a142:	dd 24       	eor	r13, r13
    a144:	d3 94       	inc	r13
    a146:	3f cf       	rjmp	.-386    	; 0x9fc6 <collision_detect_shot+0x1aa>
        }
	}
	if (hit_metal)
    a148:	dd 20       	and	r13, r13
    a14a:	79 f0       	breq	.+30     	; 0xa16a <collision_detect_shot+0x34e>
	{
        init_shot_state(shot, shot->shot_type);
    a14c:	f4 01       	movw	r30, r8
    a14e:	62 85       	ldd	r22, Z+10	; 0x0a
    a150:	c4 01       	movw	r24, r8
    a152:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
        player->active_shots--;
    a156:	f3 01       	movw	r30, r6
    a158:	80 89       	ldd	r24, Z+16	; 0x10
    a15a:	81 50       	subi	r24, 0x01	; 1
    a15c:	80 8b       	std	Z+16, r24	; 0x10
        SFX_METAL;
    a15e:	2f ef       	ldi	r18, 0xFF	; 255
    a160:	47 e1       	ldi	r20, 0x17	; 23
    a162:	66 e0       	ldi	r22, 0x06	; 6
    a164:	84 e0       	ldi	r24, 0x04	; 4
    a166:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
	}
}
    a16a:	26 96       	adiw	r28, 0x06	; 6
    a16c:	0f b6       	in	r0, 0x3f	; 63
    a16e:	f8 94       	cli
    a170:	de bf       	out	0x3e, r29	; 62
    a172:	0f be       	out	0x3f, r0	; 63
    a174:	cd bf       	out	0x3d, r28	; 61
    a176:	df 91       	pop	r29
    a178:	cf 91       	pop	r28
    a17a:	1f 91       	pop	r17
    a17c:	0f 91       	pop	r16
    a17e:	ff 90       	pop	r15
    a180:	ef 90       	pop	r14
    a182:	df 90       	pop	r13
    a184:	cf 90       	pop	r12
    a186:	bf 90       	pop	r11
    a188:	af 90       	pop	r10
    a18a:	9f 90       	pop	r9
    a18c:	8f 90       	pop	r8
    a18e:	7f 90       	pop	r7
    a190:	6f 90       	pop	r6
    a192:	5f 90       	pop	r5
    a194:	4f 90       	pop	r4
    a196:	3f 90       	pop	r3
    a198:	2f 90       	pop	r2
    a19a:	08 95       	ret

0000a19c <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    a19c:	fc 01       	movw	r30, r24
    a19e:	8e e1       	ldi	r24, 0x1E	; 30
    a1a0:	48 9f       	mul	r20, r24
    a1a2:	a0 01       	movw	r20, r0
    a1a4:	11 24       	eor	r1, r1
    a1a6:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    a1a8:	64 0f       	add	r22, r20
    a1aa:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    a1ac:	21 11       	cpse	r18, r1
    a1ae:	09 c0       	rjmp	.+18     	; 0xa1c2 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    a1b0:	71 83       	std	Z+1, r23	; 0x01
    a1b2:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    a1b4:	cb 01       	movw	r24, r22
    a1b6:	01 96       	adiw	r24, 0x01	; 1
    a1b8:	93 83       	std	Z+3, r25	; 0x03
    a1ba:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a1bc:	6e 5f       	subi	r22, 0xFE	; 254
    a1be:	7f 4f       	sbci	r23, 0xFF	; 255
    a1c0:	1e c0       	rjmp	.+60     	; 0xa1fe <get_interesting_tile_indexes+0x62>
	}
	else if (direction == D_RIGHT)
    a1c2:	21 30       	cpi	r18, 0x01	; 1
    a1c4:	39 f4       	brne	.+14     	; 0xa1d4 <get_interesting_tile_indexes+0x38>
	{
		tiles[0] = (y * 30) + x + 2;
    a1c6:	cb 01       	movw	r24, r22
    a1c8:	02 96       	adiw	r24, 0x02	; 2
    a1ca:	91 83       	std	Z+1, r25	; 0x01
    a1cc:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    a1ce:	cb 01       	movw	r24, r22
    a1d0:	80 96       	adiw	r24, 0x20	; 32
    a1d2:	08 c0       	rjmp	.+16     	; 0xa1e4 <get_interesting_tile_indexes+0x48>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    a1d4:	22 30       	cpi	r18, 0x02	; 2
    a1d6:	59 f4       	brne	.+22     	; 0xa1ee <get_interesting_tile_indexes+0x52>
	{
		tiles[0] = (y * 30) + x + 60;
    a1d8:	cb 01       	movw	r24, r22
    a1da:	cc 96       	adiw	r24, 0x3c	; 60
    a1dc:	91 83       	std	Z+1, r25	; 0x01
    a1de:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    a1e0:	cb 01       	movw	r24, r22
    a1e2:	cd 96       	adiw	r24, 0x3d	; 61
    a1e4:	93 83       	std	Z+3, r25	; 0x03
    a1e6:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a1e8:	62 5c       	subi	r22, 0xC2	; 194
    a1ea:	7f 4f       	sbci	r23, 0xFF	; 255
    a1ec:	08 c0       	rjmp	.+16     	; 0xa1fe <get_interesting_tile_indexes+0x62>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    a1ee:	71 83       	std	Z+1, r23	; 0x01
    a1f0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    a1f2:	cb 01       	movw	r24, r22
    a1f4:	4e 96       	adiw	r24, 0x1e	; 30
    a1f6:	93 83       	std	Z+3, r25	; 0x03
    a1f8:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    a1fa:	64 5c       	subi	r22, 0xC4	; 196
    a1fc:	7f 4f       	sbci	r23, 0xFF	; 255
    a1fe:	75 83       	std	Z+5, r23	; 0x05
    a200:	64 83       	std	Z+4, r22	; 0x04
    a202:	08 95       	ret

0000a204 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    a204:	2f 92       	push	r2
    a206:	3f 92       	push	r3
    a208:	4f 92       	push	r4
    a20a:	5f 92       	push	r5
    a20c:	6f 92       	push	r6
    a20e:	7f 92       	push	r7
    a210:	8f 92       	push	r8
    a212:	9f 92       	push	r9
    a214:	af 92       	push	r10
    a216:	bf 92       	push	r11
    a218:	cf 92       	push	r12
    a21a:	df 92       	push	r13
    a21c:	ef 92       	push	r14
    a21e:	ff 92       	push	r15
    a220:	0f 93       	push	r16
    a222:	1f 93       	push	r17
    a224:	cf 93       	push	r28
    a226:	df 93       	push	r29
    a228:	cd b7       	in	r28, 0x3d	; 61
    a22a:	de b7       	in	r29, 0x3e	; 62
    a22c:	29 97       	sbiw	r28, 0x09	; 9
    a22e:	0f b6       	in	r0, 0x3f	; 63
    a230:	f8 94       	cli
    a232:	de bf       	out	0x3e, r29	; 62
    a234:	0f be       	out	0x3f, r0	; 63
    a236:	cd bf       	out	0x3d, r28	; 61
    a238:	7c 01       	movw	r14, r24
    a23a:	4b 01       	movw	r8, r22
    a23c:	14 2f       	mov	r17, r20
    a23e:	22 2e       	mov	r2, r18
	int tiles[3] = {0,0,0};
    a240:	1a 82       	std	Y+2, r1	; 0x02
    a242:	19 82       	std	Y+1, r1	; 0x01
    a244:	1c 82       	std	Y+4, r1	; 0x04
    a246:	1b 82       	std	Y+3, r1	; 0x03
    a248:	1e 82       	std	Y+6, r1	; 0x06
    a24a:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a24c:	20 e0       	ldi	r18, 0x00	; 0
    a24e:	30 e0       	ldi	r19, 0x00	; 0
    a250:	40 e0       	ldi	r20, 0x00	; 0
    a252:	5e e3       	ldi	r21, 0x3E	; 62
    a254:	fc 01       	movw	r30, r24
    a256:	66 81       	ldd	r22, Z+6	; 0x06
    a258:	77 81       	ldd	r23, Z+7	; 0x07
    a25a:	80 85       	ldd	r24, Z+8	; 0x08
    a25c:	91 85       	ldd	r25, Z+9	; 0x09
    a25e:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    a262:	20 e0       	ldi	r18, 0x00	; 0
    a264:	30 e0       	ldi	r19, 0x00	; 0
    a266:	40 e4       	ldi	r20, 0x40	; 64
    a268:	50 e4       	ldi	r21, 0x40	; 64
    a26a:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <__subsf3>
    a26e:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    a272:	d6 2e       	mov	r13, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    a274:	20 e0       	ldi	r18, 0x00	; 0
    a276:	30 e0       	ldi	r19, 0x00	; 0
    a278:	40 e0       	ldi	r20, 0x00	; 0
    a27a:	5e e3       	ldi	r21, 0x3E	; 62
    a27c:	f7 01       	movw	r30, r14
    a27e:	62 81       	ldd	r22, Z+2	; 0x02
    a280:	73 81       	ldd	r23, Z+3	; 0x03
    a282:	84 81       	ldd	r24, Z+4	; 0x04
    a284:	95 81       	ldd	r25, Z+5	; 0x05
    a286:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    a28a:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    a28e:	f7 01       	movw	r30, r14
    a290:	20 81       	ld	r18, Z
    a292:	4d 2d       	mov	r20, r13
    a294:	ce 01       	movw	r24, r28
    a296:	01 96       	adiw	r24, 0x01	; 1
    a298:	0e 94 ce 50 	call	0xa19c	; 0xa19c <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    a29c:	c7 01       	movw	r24, r14
    a29e:	0e 94 f3 4d 	call	0x9be6	; 0x9be6 <collision_detect_boundries>
    a2a2:	88 23       	and	r24, r24
    a2a4:	31 f0       	breq	.+12     	; 0xa2b2 <collision_detect_player+0xae>
	{
		recoil_sprite(&player->shared);
    a2a6:	c7 01       	movw	r24, r14
    a2a8:	0e 94 7f 4c 	call	0x98fe	; 0x98fe <recoil_sprite>
		player->shared.speed = 0;
    a2ac:	f7 01       	movw	r30, r14
    a2ae:	11 82       	std	Z+1, r1	; 0x01
    a2b0:	91 c0       	rjmp	.+290    	; 0xa3d4 <collision_detect_player+0x1d0>
    a2b2:	ce 01       	movw	r24, r28
    a2b4:	01 96       	adiw	r24, 0x01	; 1
    a2b6:	6c 01       	movw	r12, r24
    a2b8:	3e 01       	movw	r6, r28
    a2ba:	97 e0       	ldi	r25, 0x07	; 7
    a2bc:	69 0e       	add	r6, r25
    a2be:	71 1c       	adc	r7, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a2c0:	8e e1       	ldi	r24, 0x1E	; 30
    a2c2:	a8 2e       	mov	r10, r24
    a2c4:	b1 2c       	mov	r11, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    a2c6:	33 24       	eor	r3, r3
    a2c8:	33 94       	inc	r3
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a2ca:	eb e0       	ldi	r30, 0x0B	; 11
    a2cc:	e1 0f       	add	r30, r17
    a2ce:	ef 83       	std	Y+7, r30	; 0x07
		else if (level.level_map[tiles[i]] == L_SPEED)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a2d0:	fa e0       	ldi	r31, 0x0A	; 10
    a2d2:	f1 0f       	add	r31, r17
    a2d4:	f8 87       	std	Y+8, r31	; 0x08
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_square_tile(tiles[i]) || solid_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    a2d6:	f6 01       	movw	r30, r12
    a2d8:	40 80       	ld	r4, Z
    a2da:	51 80       	ldd	r5, Z+1	; 0x01
    a2dc:	c2 01       	movw	r24, r4
    a2de:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <solid_square_tile>
    a2e2:	81 11       	cpse	r24, r1
    a2e4:	18 c0       	rjmp	.+48     	; 0xa316 <collision_detect_player+0x112>
    a2e6:	f7 01       	movw	r30, r14
    a2e8:	66 81       	ldd	r22, Z+6	; 0x06
    a2ea:	77 81       	ldd	r23, Z+7	; 0x07
    a2ec:	80 85       	ldd	r24, Z+8	; 0x08
    a2ee:	91 85       	ldd	r25, Z+9	; 0x09
    a2f0:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    a2f4:	46 2f       	mov	r20, r22
    a2f6:	f7 01       	movw	r30, r14
    a2f8:	62 81       	ldd	r22, Z+2	; 0x02
    a2fa:	73 81       	ldd	r23, Z+3	; 0x03
    a2fc:	84 81       	ldd	r24, Z+4	; 0x04
    a2fe:	95 81       	ldd	r25, Z+5	; 0x05
    a300:	49 87       	std	Y+9, r20	; 0x09
    a302:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    a306:	00 e1       	ldi	r16, 0x10	; 16
    a308:	20 e1       	ldi	r18, 0x10	; 16
    a30a:	49 85       	ldd	r20, Y+9	; 0x09
    a30c:	c2 01       	movw	r24, r4
    a30e:	0e 94 f6 4c 	call	0x99ec	; 0x99ec <solid_directional_tile>
    a312:	88 23       	and	r24, r24
    a314:	31 f0       	breq	.+12     	; 0xa322 <collision_detect_player+0x11e>
		{
			recoil_sprite(&player->shared);
    a316:	c7 01       	movw	r24, r14
    a318:	0e 94 7f 4c 	call	0x98fe	; 0x98fe <recoil_sprite>
			player->shared.speed = 0;
    a31c:	f7 01       	movw	r30, r14
    a31e:	11 82       	std	Z+1, r1	; 0x01
    a320:	52 c0       	rjmp	.+164    	; 0xa3c6 <collision_detect_player+0x1c2>
		}
		else if (level.level_map[tiles[i]] == L_SPEED)
    a322:	f2 01       	movw	r30, r4
    a324:	ee 59       	subi	r30, 0x9E	; 158
    a326:	f3 4f       	sbci	r31, 0xF3	; 243
    a328:	81 81       	ldd	r24, Z+1	; 0x01
    a32a:	87 30       	cpi	r24, 0x07	; 7
    a32c:	51 f4       	brne	.+20     	; 0xa342 <collision_detect_player+0x13e>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a32e:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    a330:	81 e4       	ldi	r24, 0x41	; 65
    a332:	f7 01       	movw	r30, r14
    a334:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    a336:	31 8e       	std	Z+25, r3	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a338:	4d e4       	ldi	r20, 0x4D	; 77
    a33a:	51 e2       	ldi	r21, 0x21	; 33
    a33c:	61 e0       	ldi	r22, 0x01	; 1
    a33e:	88 85       	ldd	r24, Y+8	; 0x08
    a340:	09 c0       	rjmp	.+18     	; 0xa354 <collision_detect_player+0x150>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
    a342:	89 30       	cpi	r24, 0x09	; 9
    a344:	d9 f4       	brne	.+54     	; 0xa37c <collision_detect_player+0x178>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a346:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    a348:	f7 01       	movw	r30, r14
    a34a:	30 8e       	std	Z+24, r3	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a34c:	47 e4       	ldi	r20, 0x47	; 71
    a34e:	51 e2       	ldi	r21, 0x21	; 33
    a350:	61 e0       	ldi	r22, 0x01	; 1
    a352:	8f 81       	ldd	r24, Y+7	; 0x07
    a354:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a358:	f6 01       	movw	r30, r12
    a35a:	80 81       	ld	r24, Z
    a35c:	91 81       	ldd	r25, Z+1	; 0x01
    a35e:	b5 01       	movw	r22, r10
    a360:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    a364:	6d 5f       	subi	r22, 0xFD	; 253
    a366:	40 e0       	ldi	r20, 0x00	; 0
    a368:	50 e0       	ldi	r21, 0x00	; 0
    a36a:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <SetTile>
			SFX_ITEM;
    a36e:	2f ef       	ldi	r18, 0xFF	; 255
    a370:	47 e1       	ldi	r20, 0x17	; 23
    a372:	63 e0       	ldi	r22, 0x03	; 3
    a374:	84 e0       	ldi	r24, 0x04	; 4
    a376:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
    a37a:	25 c0       	rjmp	.+74     	; 0xa3c6 <collision_detect_player+0x1c2>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
    a37c:	88 30       	cpi	r24, 0x08	; 8
    a37e:	19 f5       	brne	.+70     	; 0xa3c6 <collision_detect_player+0x1c2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a380:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a382:	c2 01       	movw	r24, r4
    a384:	b5 01       	movw	r22, r10
    a386:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    a38a:	6d 5f       	subi	r22, 0xFD	; 253
    a38c:	40 e0       	ldi	r20, 0x00	; 0
    a38e:	50 e0       	ldi	r21, 0x00	; 0
    a390:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <SetTile>
			SFX_ITEM;
    a394:	2f ef       	ldi	r18, 0xFF	; 255
    a396:	47 e1       	ldi	r20, 0x17	; 23
    a398:	63 e0       	ldi	r22, 0x03	; 3
    a39a:	84 e0       	ldi	r24, 0x04	; 4
    a39c:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
			if (!(other_player->flags & EXPLODING_FLAG))
    a3a0:	f4 01       	movw	r30, r8
    a3a2:	83 89       	ldd	r24, Z+19	; 0x13
    a3a4:	80 fd       	sbrc	r24, 0
    a3a6:	0f c0       	rjmp	.+30     	; 0xa3c6 <collision_detect_player+0x1c2>
			{
				player->level_score++;
    a3a8:	f7 01       	movw	r30, r14
    a3aa:	87 85       	ldd	r24, Z+15	; 0x0f
    a3ac:	8f 5f       	subi	r24, 0xFF	; 255
    a3ae:	87 87       	std	Z+15, r24	; 0x0f
				player->score++;
    a3b0:	86 85       	ldd	r24, Z+14	; 0x0e
    a3b2:	8f 5f       	subi	r24, 0xFF	; 255
    a3b4:	86 87       	std	Z+14, r24	; 0x0e
				render_score(player, hud_x);
    a3b6:	61 2f       	mov	r22, r17
    a3b8:	c7 01       	movw	r24, r14
    a3ba:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
				kill_player(other_player, other_player_hud_x);
    a3be:	62 2d       	mov	r22, r2
    a3c0:	c4 01       	movw	r24, r8
    a3c2:	0e 94 41 4e 	call	0x9c82	; 0x9c82 <kill_player>
    a3c6:	f2 e0       	ldi	r31, 0x02	; 2
    a3c8:	cf 0e       	add	r12, r31
    a3ca:	d1 1c       	adc	r13, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    a3cc:	c6 14       	cp	r12, r6
    a3ce:	d7 04       	cpc	r13, r7
    a3d0:	09 f0       	breq	.+2      	; 0xa3d4 <collision_detect_player+0x1d0>
    a3d2:	81 cf       	rjmp	.-254    	; 0xa2d6 <collision_detect_player+0xd2>
				render_score(player, hud_x);
				kill_player(other_player, other_player_hud_x);
			}
		}
	}
}
    a3d4:	29 96       	adiw	r28, 0x09	; 9
    a3d6:	0f b6       	in	r0, 0x3f	; 63
    a3d8:	f8 94       	cli
    a3da:	de bf       	out	0x3e, r29	; 62
    a3dc:	0f be       	out	0x3f, r0	; 63
    a3de:	cd bf       	out	0x3d, r28	; 61
    a3e0:	df 91       	pop	r29
    a3e2:	cf 91       	pop	r28
    a3e4:	1f 91       	pop	r17
    a3e6:	0f 91       	pop	r16
    a3e8:	ff 90       	pop	r15
    a3ea:	ef 90       	pop	r14
    a3ec:	df 90       	pop	r13
    a3ee:	cf 90       	pop	r12
    a3f0:	bf 90       	pop	r11
    a3f2:	af 90       	pop	r10
    a3f4:	9f 90       	pop	r9
    a3f6:	8f 90       	pop	r8
    a3f8:	7f 90       	pop	r7
    a3fa:	6f 90       	pop	r6
    a3fc:	5f 90       	pop	r5
    a3fe:	4f 90       	pop	r4
    a400:	3f 90       	pop	r3
    a402:	2f 90       	pop	r2
    a404:	08 95       	ret

0000a406 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    a406:	8f 92       	push	r8
    a408:	9f 92       	push	r9
    a40a:	af 92       	push	r10
    a40c:	bf 92       	push	r11
    a40e:	ff 92       	push	r15
    a410:	0f 93       	push	r16
    a412:	1f 93       	push	r17
    a414:	cf 93       	push	r28
    a416:	df 93       	push	r29
    a418:	f8 2e       	mov	r15, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a41a:	c0 e0       	ldi	r28, 0x00	; 0
    a41c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    a41e:	0e e1       	ldi	r16, 0x1E	; 30
    a420:	10 e0       	ldi	r17, 0x00	; 0
    a422:	ce 01       	movw	r24, r28
    a424:	b8 01       	movw	r22, r16
    a426:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
		y = 3 + i / 30;
    a42a:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    a42c:	ff 20       	and	r15, r15
    a42e:	19 f0       	breq	.+6      	; 0xa436 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    a430:	46 e5       	ldi	r20, 0x56	; 86
    a432:	51 e2       	ldi	r21, 0x21	; 33
    a434:	11 c0       	rjmp	.+34     	; 0xa458 <load_level_tiles+0x52>
    a436:	fe 01       	movw	r30, r28
    a438:	ee 59       	subi	r30, 0x9E	; 158
    a43a:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    a43c:	41 81       	ldd	r20, Z+1	; 0x01
    a43e:	84 2e       	mov	r8, r20
    a440:	91 2c       	mov	r9, r1
    a442:	f4 01       	movw	r30, r8
    a444:	31 97       	sbiw	r30, 0x01	; 1
    a446:	e9 30       	cpi	r30, 0x09	; 9
    a448:	f1 05       	cpc	r31, r1
    a44a:	08 f5       	brcc	.+66     	; 0xa48e <load_level_tiles+0x88>
    a44c:	e8 5c       	subi	r30, 0xC8	; 200
    a44e:	ff 4f       	sbci	r31, 0xFF	; 255
    a450:	0c 94 48 5a 	jmp	0xb490	; 0xb490 <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    a454:	43 e5       	ldi	r20, 0x53	; 83
    a456:	51 e2       	ldi	r21, 0x21	; 33
    a458:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
    a45c:	1c c0       	rjmp	.+56     	; 0xa496 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    a45e:	40 e5       	ldi	r20, 0x50	; 80
    a460:	51 e2       	ldi	r21, 0x21	; 33
    a462:	fa cf       	rjmp	.-12     	; 0xa458 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    a464:	4b e3       	ldi	r20, 0x3B	; 59
    a466:	51 e2       	ldi	r21, 0x21	; 33
    a468:	f7 cf       	rjmp	.-18     	; 0xa458 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    a46a:	45 e3       	ldi	r20, 0x35	; 53
    a46c:	51 e2       	ldi	r21, 0x21	; 33
    a46e:	f4 cf       	rjmp	.-24     	; 0xa458 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    a470:	42 e3       	ldi	r20, 0x32	; 50
    a472:	51 e2       	ldi	r21, 0x21	; 33
    a474:	f1 cf       	rjmp	.-30     	; 0xa458 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    a476:	48 e3       	ldi	r20, 0x38	; 56
    a478:	51 e2       	ldi	r21, 0x21	; 33
    a47a:	ee cf       	rjmp	.-36     	; 0xa458 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    a47c:	4d e4       	ldi	r20, 0x4D	; 77
    a47e:	51 e2       	ldi	r21, 0x21	; 33
    a480:	eb cf       	rjmp	.-42     	; 0xa458 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    a482:	4a e4       	ldi	r20, 0x4A	; 74
    a484:	51 e2       	ldi	r21, 0x21	; 33
    a486:	e8 cf       	rjmp	.-48     	; 0xa458 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    a488:	47 e4       	ldi	r20, 0x47	; 71
    a48a:	51 e2       	ldi	r21, 0x21	; 33
    a48c:	e5 cf       	rjmp	.-54     	; 0xa458 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    a48e:	40 e0       	ldi	r20, 0x00	; 0
    a490:	50 e0       	ldi	r21, 0x00	; 0
    a492:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a496:	21 96       	adiw	r28, 0x01	; 1
    a498:	ce 3e       	cpi	r28, 0xEE	; 238
    a49a:	82 e0       	ldi	r24, 0x02	; 2
    a49c:	d8 07       	cpc	r29, r24
    a49e:	09 f6       	brne	.-126    	; 0xa422 <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    a4a0:	df 91       	pop	r29
    a4a2:	cf 91       	pop	r28
    a4a4:	1f 91       	pop	r17
    a4a6:	0f 91       	pop	r16
    a4a8:	ff 90       	pop	r15
    a4aa:	bf 90       	pop	r11
    a4ac:	af 90       	pop	r10
    a4ae:	9f 90       	pop	r9
    a4b0:	8f 90       	pop	r8
    a4b2:	08 95       	ret

0000a4b4 <load_level>:

void load_level(int level_number)
{
    a4b4:	9f 92       	push	r9
    a4b6:	af 92       	push	r10
    a4b8:	bf 92       	push	r11
    a4ba:	cf 92       	push	r12
    a4bc:	df 92       	push	r13
    a4be:	ef 92       	push	r14
    a4c0:	ff 92       	push	r15
    a4c2:	0f 93       	push	r16
    a4c4:	1f 93       	push	r17
    a4c6:	cf 93       	push	r28
    a4c8:	df 93       	push	r29
    a4ca:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    a4cc:	8e ee       	ldi	r24, 0xEE	; 238
    a4ce:	92 e0       	ldi	r25, 0x02	; 2
    a4d0:	c8 9f       	mul	r28, r24
    a4d2:	70 01       	movw	r14, r0
    a4d4:	c9 9f       	mul	r28, r25
    a4d6:	f0 0c       	add	r15, r0
    a4d8:	d8 9f       	mul	r29, r24
    a4da:	f0 0c       	add	r15, r0
    a4dc:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    a4de:	83 e0       	ldi	r24, 0x03	; 3
    a4e0:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    a4e4:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	game.current_level = level_number;
    a4e8:	c0 93 c2 0b 	sts	0x0BC2, r28
    a4ec:	03 e6       	ldi	r16, 0x63	; 99
    a4ee:	1c e0       	ldi	r17, 0x0C	; 12
	for (int i = 0; i < 30*25; i++)
    a4f0:	c0 e0       	ldi	r28, 0x00	; 0
    a4f2:	d0 e0       	ldi	r29, 0x00	; 0
    a4f4:	d7 01       	movw	r26, r14
    a4f6:	a4 57       	subi	r26, 0x74	; 116
    a4f8:	bc 4f       	sbci	r27, 0xFC	; 252
    a4fa:	7d 01       	movw	r14, r26
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    a4fc:	8e e1       	ldi	r24, 0x1E	; 30
    a4fe:	c8 2e       	mov	r12, r24
    a500:	d1 2c       	mov	r13, r1
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    a502:	92 e3       	ldi	r25, 0x32	; 50
    a504:	99 2e       	mov	r9, r25
    a506:	f7 01       	movw	r30, r14
    a508:	ec 0f       	add	r30, r28
    a50a:	fd 1f       	adc	r31, r29
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    a50c:	e4 91       	lpm	r30, Z
    a50e:	58 01       	movw	r10, r16
    a510:	d8 01       	movw	r26, r16
    a512:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    a514:	e8 35       	cpi	r30, 0x58	; 88
    a516:	01 f5       	brne	.+64     	; 0xa558 <load_level+0xa4>
		{
			player1.spawn_x = (i % 30) * 8;
    a518:	ce 01       	movw	r24, r28
    a51a:	b6 01       	movw	r22, r12
    a51c:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    a520:	88 0f       	add	r24, r24
    a522:	88 0f       	add	r24, r24
    a524:	88 0f       	add	r24, r24
    a526:	80 93 ef 0b 	sts	0x0BEF, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    a52a:	6d 5f       	subi	r22, 0xFD	; 253
    a52c:	7f 4f       	sbci	r23, 0xFF	; 255
    a52e:	66 0f       	add	r22, r22
    a530:	66 0f       	add	r22, r22
    a532:	66 0f       	add	r22, r22
    a534:	60 93 f0 0b 	sts	0x0BF0, r22
			player1.level_score = 0;
    a538:	10 92 ed 0b 	sts	0x0BED, r1
			player1.has_over_speed = false;
    a53c:	10 92 f7 0b 	sts	0x0BF7, r1
			player1.has_rocket = false;
    a540:	10 92 f6 0b 	sts	0x0BF6, r1
			player1.max_speed = MAX_SPEED;
    a544:	90 92 f5 0b 	sts	0x0BF5, r9
			player_init_shot_state(&player1);
    a548:	8e ed       	ldi	r24, 0xDE	; 222
    a54a:	9b e0       	ldi	r25, 0x0B	; 11
    a54c:	0e 94 cf 48 	call	0x919e	; 0x919e <player_init_shot_state>
			player_spawn(&player1);
    a550:	8e ed       	ldi	r24, 0xDE	; 222
    a552:	9b e0       	ldi	r25, 0x0B	; 11
    a554:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <player_spawn>
    a558:	0f 5f       	subi	r16, 0xFF	; 255
    a55a:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if (level.level_map[i] == L_P2_SPAWN)
    a55c:	f5 01       	movw	r30, r10
    a55e:	80 81       	ld	r24, Z
    a560:	83 36       	cpi	r24, 0x63	; 99
    a562:	01 f5       	brne	.+64     	; 0xa5a4 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    a564:	ce 01       	movw	r24, r28
    a566:	b6 01       	movw	r22, r12
    a568:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    a56c:	88 0f       	add	r24, r24
    a56e:	88 0f       	add	r24, r24
    a570:	88 0f       	add	r24, r24
    a572:	80 93 62 0f 	sts	0x0F62, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    a576:	6d 5f       	subi	r22, 0xFD	; 253
    a578:	7f 4f       	sbci	r23, 0xFF	; 255
    a57a:	66 0f       	add	r22, r22
    a57c:	66 0f       	add	r22, r22
    a57e:	66 0f       	add	r22, r22
    a580:	60 93 63 0f 	sts	0x0F63, r22
			player2.level_score = 0;
    a584:	10 92 60 0f 	sts	0x0F60, r1
			player2.has_over_speed = false;
    a588:	10 92 6a 0f 	sts	0x0F6A, r1
			player2.has_rocket = false;
    a58c:	10 92 69 0f 	sts	0x0F69, r1
			player2.max_speed = MAX_SPEED;
    a590:	90 92 68 0f 	sts	0x0F68, r9
			player_init_shot_state(&player2);
    a594:	81 e5       	ldi	r24, 0x51	; 81
    a596:	9f e0       	ldi	r25, 0x0F	; 15
    a598:	0e 94 cf 48 	call	0x919e	; 0x919e <player_init_shot_state>
			player_spawn(&player2);
    a59c:	81 e5       	ldi	r24, 0x51	; 81
    a59e:	9f e0       	ldi	r25, 0x0F	; 15
    a5a0:	0e 94 f4 48 	call	0x91e8	; 0x91e8 <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    a5a4:	21 96       	adiw	r28, 0x01	; 1
    a5a6:	ce 3e       	cpi	r28, 0xEE	; 238
    a5a8:	f2 e0       	ldi	r31, 0x02	; 2
    a5aa:	df 07       	cpc	r29, r31
    a5ac:	09 f0       	breq	.+2      	; 0xa5b0 <load_level+0xfc>
    a5ae:	ab cf       	rjmp	.-170    	; 0xa506 <load_level+0x52>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    a5b0:	60 e0       	ldi	r22, 0x00	; 0
    a5b2:	8e ed       	ldi	r24, 0xDE	; 222
    a5b4:	9b e0       	ldi	r25, 0x0B	; 11
    a5b6:	0e 94 a3 4a 	call	0x9546	; 0x9546 <render_hud>
	render_hud(&player2, 15);
    a5ba:	6f e0       	ldi	r22, 0x0F	; 15
    a5bc:	81 e5       	ldi	r24, 0x51	; 81
    a5be:	9f e0       	ldi	r25, 0x0F	; 15
    a5c0:	0e 94 a3 4a 	call	0x9546	; 0x9546 <render_hud>
	render_score(&player1, 0);
    a5c4:	60 e0       	ldi	r22, 0x00	; 0
    a5c6:	8e ed       	ldi	r24, 0xDE	; 222
    a5c8:	9b e0       	ldi	r25, 0x0B	; 11
    a5ca:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
	render_score(&player2, 15);
    a5ce:	6f e0       	ldi	r22, 0x0F	; 15
    a5d0:	81 e5       	ldi	r24, 0x51	; 81
    a5d2:	9f e0       	ldi	r25, 0x0F	; 15
    a5d4:	0e 94 c0 4a 	call	0x9580	; 0x9580 <render_score>
	Print(14, 0, strVertSep);
    a5d8:	4d eb       	ldi	r20, 0xBD	; 189
    a5da:	52 e0       	ldi	r21, 0x02	; 2
    a5dc:	60 e0       	ldi	r22, 0x00	; 0
    a5de:	70 e0       	ldi	r23, 0x00	; 0
    a5e0:	8e e0       	ldi	r24, 0x0E	; 14
    a5e2:	90 e0       	ldi	r25, 0x00	; 0
    a5e4:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(14, 1, strVertSep);
    a5e8:	4d eb       	ldi	r20, 0xBD	; 189
    a5ea:	52 e0       	ldi	r21, 0x02	; 2
    a5ec:	61 e0       	ldi	r22, 0x01	; 1
    a5ee:	70 e0       	ldi	r23, 0x00	; 0
    a5f0:	8e e0       	ldi	r24, 0x0E	; 14
    a5f2:	90 e0       	ldi	r25, 0x00	; 0
    a5f4:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(14, 2, strVertSep);
    a5f8:	4d eb       	ldi	r20, 0xBD	; 189
    a5fa:	52 e0       	ldi	r21, 0x02	; 2
    a5fc:	62 e0       	ldi	r22, 0x02	; 2
    a5fe:	70 e0       	ldi	r23, 0x00	; 0
    a600:	8e e0       	ldi	r24, 0x0E	; 14
    a602:	90 e0       	ldi	r25, 0x00	; 0
    a604:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	load_level_tiles(false);
    a608:	80 e0       	ldi	r24, 0x00	; 0
    a60a:	0e 94 03 52 	call	0xa406	; 0xa406 <load_level_tiles>
	SFX_LEVEL_START;
    a60e:	2f ef       	ldi	r18, 0xFF	; 255
    a610:	47 e1       	ldi	r20, 0x17	; 23
    a612:	65 e0       	ldi	r22, 0x05	; 5
    a614:	84 e0       	ldi	r24, 0x04	; 4
}
    a616:	df 91       	pop	r29
    a618:	cf 91       	pop	r28
    a61a:	1f 91       	pop	r17
    a61c:	0f 91       	pop	r16
    a61e:	ff 90       	pop	r15
    a620:	ef 90       	pop	r14
    a622:	df 90       	pop	r13
    a624:	cf 90       	pop	r12
    a626:	bf 90       	pop	r11
    a628:	af 90       	pop	r10
    a62a:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, strVertSep);
	Print(14, 1, strVertSep);
	Print(14, 2, strVertSep);
	load_level_tiles(false);
	SFX_LEVEL_START;
    a62c:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <TriggerNote>

0000a630 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    a630:	cf 93       	push	r28
    a632:	df 93       	push	r29
    a634:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    a636:	61 e0       	ldi	r22, 0x01	; 1
    a638:	83 e0       	ldi	r24, 0x03	; 3
    a63a:	0e 94 dd 45 	call	0x8bba	; 0x8bba <FadeOut>
	ClearVram();
    a63e:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <ClearVram>
	clear_sprites();
    a642:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	Print(8, 12, &strLevels[index*16]);
    a646:	d0 e0       	ldi	r29, 0x00	; 0
    a648:	ae 01       	movw	r20, r28
    a64a:	84 e0       	ldi	r24, 0x04	; 4
    a64c:	44 0f       	add	r20, r20
    a64e:	55 1f       	adc	r21, r21
    a650:	8a 95       	dec	r24
    a652:	e1 f7       	brne	.-8      	; 0xa64c <level_transition+0x1c>
    a654:	4a 50       	subi	r20, 0x0A	; 10
    a656:	5f 4f       	sbci	r21, 0xFF	; 255
    a658:	6c e0       	ldi	r22, 0x0C	; 12
    a65a:	70 e0       	ldi	r23, 0x00	; 0
    a65c:	88 e0       	ldi	r24, 0x08	; 8
    a65e:	90 e0       	ldi	r25, 0x00	; 0
    a660:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	FadeIn(1, true);
    a664:	61 e0       	ldi	r22, 0x01	; 1
    a666:	81 e0       	ldi	r24, 0x01	; 1
    a668:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    a66c:	82 e0       	ldi	r24, 0x02	; 2
    a66e:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <LBWaitSeconds>
	FadeOut(1, true);
    a672:	61 e0       	ldi	r22, 0x01	; 1
    a674:	81 e0       	ldi	r24, 0x01	; 1
    a676:	0e 94 dd 45 	call	0x8bba	; 0x8bba <FadeOut>
	ClearVram();
    a67a:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    a67e:	60 e0       	ldi	r22, 0x00	; 0
    a680:	83 e0       	ldi	r24, 0x03	; 3
    a682:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <FadeIn>
	load_level(index);
    a686:	ce 01       	movw	r24, r28
}
    a688:	df 91       	pop	r29
    a68a:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    a68c:	0c 94 5a 52 	jmp	0xa4b4	; 0xa4b4 <load_level>

0000a690 <load_splash>:
	collision_detect_player(&player2, &player1, 15, 0);
}

void load_splash()
{
	game.current_screen = SPLASH;
    a690:	10 92 c1 0b 	sts	0x0BC1, r1
	clear_sprites();
    a694:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	Print(7, 13, str1Player);
    a698:	42 ef       	ldi	r20, 0xF2	; 242
    a69a:	52 e0       	ldi	r21, 0x02	; 2
    a69c:	6d e0       	ldi	r22, 0x0D	; 13
    a69e:	70 e0       	ldi	r23, 0x00	; 0
    a6a0:	87 e0       	ldi	r24, 0x07	; 7
    a6a2:	90 e0       	ldi	r25, 0x00	; 0
    a6a4:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(7, 14, str2Player);
    a6a8:	41 ee       	ldi	r20, 0xE1	; 225
    a6aa:	52 e0       	ldi	r21, 0x02	; 2
    a6ac:	6e e0       	ldi	r22, 0x0E	; 14
    a6ae:	70 e0       	ldi	r23, 0x00	; 0
    a6b0:	87 e0       	ldi	r24, 0x07	; 7
    a6b2:	90 e0       	ldi	r25, 0x00	; 0
    a6b4:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(7, 15, strHighscores);
    a6b8:	47 ed       	ldi	r20, 0xD7	; 215
    a6ba:	52 e0       	ldi	r21, 0x02	; 2
    a6bc:	6f e0       	ldi	r22, 0x0F	; 15
    a6be:	70 e0       	ldi	r23, 0x00	; 0
    a6c0:	87 e0       	ldi	r24, 0x07	; 7
    a6c2:	90 e0       	ldi	r25, 0x00	; 0
    a6c4:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(4, 26, strCopyright);
    a6c8:	40 e0       	ldi	r20, 0x00	; 0
    a6ca:	53 e0       	ldi	r21, 0x03	; 3
    a6cc:	6a e1       	ldi	r22, 0x1A	; 26
    a6ce:	70 e0       	ldi	r23, 0x00	; 0
    a6d0:	84 e0       	ldi	r24, 0x04	; 4
    a6d2:	90 e0       	ldi	r25, 0x00	; 0
    a6d4:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    a6d8:	47 e9       	ldi	r20, 0x97	; 151
    a6da:	51 e2       	ldi	r21, 0x21	; 33
    a6dc:	65 e0       	ldi	r22, 0x05	; 5
    a6de:	84 e0       	ldi	r24, 0x04	; 4
    a6e0:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
	MapSprite2(0, map_ball, 0);
    a6e4:	40 e0       	ldi	r20, 0x00	; 0
    a6e6:	64 ee       	ldi	r22, 0xE4	; 228
    a6e8:	70 e2       	ldi	r23, 0x20	; 32
    a6ea:	80 e0       	ldi	r24, 0x00	; 0
    a6ec:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	SFX_SPLASH;
    a6f0:	2f ef       	ldi	r18, 0xFF	; 255
    a6f2:	47 e1       	ldi	r20, 0x17	; 23
    a6f4:	69 e0       	ldi	r22, 0x09	; 9
    a6f6:	84 e0       	ldi	r24, 0x04	; 4
    a6f8:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <TriggerNote>

0000a6fc <load_tank_rank>:
		return;
	}
}

void load_tank_rank()
{
    a6fc:	ef 92       	push	r14
    a6fe:	ff 92       	push	r15
    a700:	0f 93       	push	r16
    a702:	1f 93       	push	r17
    a704:	cf 93       	push	r28
    a706:	df 93       	push	r29
    a708:	1f 92       	push	r1
    a70a:	cd b7       	in	r28, 0x3d	; 61
    a70c:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    a70e:	81 e0       	ldi	r24, 0x01	; 1
    a710:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    a714:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    a718:	40 e0       	ldi	r20, 0x00	; 0
    a71a:	63 e2       	ldi	r22, 0x23	; 35
    a71c:	71 e2       	ldi	r23, 0x21	; 33
    a71e:	80 e0       	ldi	r24, 0x00	; 0
    a720:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    a724:	40 e0       	ldi	r20, 0x00	; 0
    a726:	6b e0       	ldi	r22, 0x0B	; 11
    a728:	71 e2       	ldi	r23, 0x21	; 33
    a72a:	84 e0       	ldi	r24, 0x04	; 4
    a72c:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    a730:	02 e0       	ldi	r16, 0x02	; 2
    a732:	22 e0       	ldi	r18, 0x02	; 2
    a734:	48 e0       	ldi	r20, 0x08	; 8
    a736:	68 e3       	ldi	r22, 0x38	; 56
    a738:	80 e0       	ldi	r24, 0x00	; 0
    a73a:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    a73e:	22 e0       	ldi	r18, 0x02	; 2
    a740:	48 e0       	ldi	r20, 0x08	; 8
    a742:	60 ea       	ldi	r22, 0xA0	; 160
    a744:	84 e0       	ldi	r24, 0x04	; 4
    a746:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
	Print(10, 2, strHighscores);
    a74a:	47 ed       	ldi	r20, 0xD7	; 215
    a74c:	52 e0       	ldi	r21, 0x02	; 2
    a74e:	62 e0       	ldi	r22, 0x02	; 2
    a750:	70 e0       	ldi	r23, 0x00	; 0
    a752:	8a e0       	ldi	r24, 0x0A	; 10
    a754:	90 e0       	ldi	r25, 0x00	; 0
    a756:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    a75a:	09 e0       	ldi	r16, 0x09	; 9
    a75c:	11 e0       	ldi	r17, 0x01	; 1
    a75e:	87 e0       	ldi	r24, 0x07	; 7
    a760:	e8 2e       	mov	r14, r24
    a762:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    a764:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    a766:	20 e0       	ldi	r18, 0x00	; 0
    a768:	43 2f       	mov	r20, r19
    a76a:	b7 01       	movw	r22, r14
    a76c:	82 e0       	ldi	r24, 0x02	; 2
    a76e:	90 e0       	ldi	r25, 0x00	; 0
    a770:	39 83       	std	Y+1, r19	; 0x01
    a772:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
		PrintChar(3, y, '.');
    a776:	4e e2       	ldi	r20, 0x2E	; 46
    a778:	b7 01       	movw	r22, r14
    a77a:	83 e0       	ldi	r24, 0x03	; 3
    a77c:	90 e0       	ldi	r25, 0x00	; 0
    a77e:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
    a782:	f8 01       	movw	r30, r16
    a784:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    a786:	40 81       	ld	r20, Z
    a788:	83 e0       	ldi	r24, 0x03	; 3
    a78a:	48 9f       	mul	r20, r24
    a78c:	a0 01       	movw	r20, r0
    a78e:	11 24       	eor	r1, r1
    a790:	4a 5d       	subi	r20, 0xDA	; 218
    a792:	5e 4f       	sbci	r21, 0xFE	; 254
    a794:	23 e0       	ldi	r18, 0x03	; 3
    a796:	6e 2d       	mov	r22, r14
    a798:	85 e0       	ldi	r24, 0x05	; 5
    a79a:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
		Print(9, y, strOwns);
    a79e:	48 e6       	ldi	r20, 0x68	; 104
    a7a0:	52 e0       	ldi	r21, 0x02	; 2
    a7a2:	b7 01       	movw	r22, r14
    a7a4:	89 e0       	ldi	r24, 0x09	; 9
    a7a6:	90 e0       	ldi	r25, 0x00	; 0
    a7a8:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    a7ac:	f8 01       	movw	r30, r16
    a7ae:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    a7b0:	40 81       	ld	r20, Z
    a7b2:	e3 e0       	ldi	r30, 0x03	; 3
    a7b4:	4e 9f       	mul	r20, r30
    a7b6:	a0 01       	movw	r20, r0
    a7b8:	11 24       	eor	r1, r1
    a7ba:	4a 5d       	subi	r20, 0xDA	; 218
    a7bc:	5e 4f       	sbci	r21, 0xFE	; 254
    a7be:	23 e0       	ldi	r18, 0x03	; 3
    a7c0:	6e 2d       	mov	r22, r14
    a7c2:	8e e0       	ldi	r24, 0x0E	; 14
    a7c4:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
		Print(18, y, strBy);
    a7c8:	45 e6       	ldi	r20, 0x65	; 101
    a7ca:	52 e0       	ldi	r21, 0x02	; 2
    a7cc:	b7 01       	movw	r22, r14
    a7ce:	82 e1       	ldi	r24, 0x12	; 18
    a7d0:	90 e0       	ldi	r25, 0x00	; 0
    a7d2:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    a7d6:	f8 01       	movw	r30, r16
    a7d8:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    a7da:	21 e0       	ldi	r18, 0x01	; 1
    a7dc:	40 81       	ld	r20, Z
    a7de:	b7 01       	movw	r22, r14
    a7e0:	87 e1       	ldi	r24, 0x17	; 23
    a7e2:	90 e0       	ldi	r25, 0x00	; 0
    a7e4:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
		PrintChar(24, y, '-');
    a7e8:	4d e2       	ldi	r20, 0x2D	; 45
    a7ea:	b7 01       	movw	r22, r14
    a7ec:	88 e1       	ldi	r24, 0x18	; 24
    a7ee:	90 e0       	ldi	r25, 0x00	; 0
    a7f0:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    a7f4:	21 e0       	ldi	r18, 0x01	; 1
    a7f6:	f8 01       	movw	r30, r16
    a7f8:	40 81       	ld	r20, Z
    a7fa:	b7 01       	movw	r22, r14
    a7fc:	8b e1       	ldi	r24, 0x1B	; 27
    a7fe:	90 e0       	ldi	r25, 0x00	; 0
    a800:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <PrintByte>
		y += 3;
		rank += 1;
    a804:	39 81       	ldd	r19, Y+1	; 0x01
    a806:	3f 5f       	subi	r19, 0xFF	; 255
    a808:	f3 e0       	ldi	r31, 0x03	; 3
    a80a:	ef 0e       	add	r14, r31
    a80c:	f1 1c       	adc	r15, r1
    a80e:	0c 5f       	subi	r16, 0xFC	; 252
    a810:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    a812:	36 30       	cpi	r19, 0x06	; 6
    a814:	09 f0       	breq	.+2      	; 0xa818 <load_tank_rank+0x11c>
    a816:	a7 cf       	rjmp	.-178    	; 0xa766 <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, strReset);
    a818:	4c e7       	ldi	r20, 0x7C	; 124
    a81a:	52 e0       	ldi	r21, 0x02	; 2
    a81c:	66 e1       	ldi	r22, 0x16	; 22
    a81e:	70 e0       	ldi	r23, 0x00	; 0
    a820:	83 e0       	ldi	r24, 0x03	; 3
    a822:	90 e0       	ldi	r25, 0x00	; 0
    a824:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(10, 24, strCancelHandle);
    a828:	45 e9       	ldi	r20, 0x95	; 149
    a82a:	52 e0       	ldi	r21, 0x02	; 2
    a82c:	68 e1       	ldi	r22, 0x18	; 24
    a82e:	70 e0       	ldi	r23, 0x00	; 0
    a830:	8a e0       	ldi	r24, 0x0A	; 10
    a832:	90 e0       	ldi	r25, 0x00	; 0
}
    a834:	0f 90       	pop	r0
    a836:	df 91       	pop	r29
    a838:	cf 91       	pop	r28
    a83a:	1f 91       	pop	r17
    a83c:	0f 91       	pop	r16
    a83e:	ff 90       	pop	r15
    a840:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, strReset);
	Print(10, 24, strCancelHandle);
    a842:	0c 94 8e 45 	jmp	0x8b1c	; 0x8b1c <Print>

0000a846 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
	fade_through();
    a846:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
	SetSpriteVisibility(true);
    a84a:	81 e0       	ldi	r24, 0x01	; 1
    a84c:	0e 94 94 43 	call	0x8728	; 0x8728 <SetSpriteVisibility>
	init_game_state();
    a850:	0e 94 de 48 	call	0x91bc	; 0x91bc <init_game_state>
	load_tank_rank();
    a854:	0c 94 7e 53 	jmp	0xa6fc	; 0xa6fc <load_tank_rank>

0000a858 <update_level_helper>:
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    a858:	4f 92       	push	r4
    a85a:	5f 92       	push	r5
    a85c:	6f 92       	push	r6
    a85e:	7f 92       	push	r7
    a860:	9f 92       	push	r9
    a862:	af 92       	push	r10
    a864:	bf 92       	push	r11
    a866:	cf 92       	push	r12
    a868:	df 92       	push	r13
    a86a:	ef 92       	push	r14
    a86c:	ff 92       	push	r15
    a86e:	0f 93       	push	r16
    a870:	1f 93       	push	r17
    a872:	cf 93       	push	r28
    a874:	df 93       	push	r29
    a876:	8c 01       	movw	r16, r24
    a878:	eb 01       	movw	r28, r22
    a87a:	7a 01       	movw	r14, r20
	Shot* shot;
	u8 next_level;
	Player* tmp;

	if ((p->pressed & BTN_START))
    a87c:	fc 01       	movw	r30, r24
    a87e:	80 81       	ld	r24, Z
    a880:	83 ff       	sbrs	r24, 3
    a882:	0f c0       	rjmp	.+30     	; 0xa8a2 <update_level_helper+0x4a>
	{
		SFX_NAVIGATE;
    a884:	2f ef       	ldi	r18, 0xFF	; 255
    a886:	47 e1       	ldi	r20, 0x17	; 23
    a888:	67 e0       	ldi	r22, 0x07	; 7
    a88a:	84 e0       	ldi	r24, 0x04	; 4
    a88c:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
		game.paused = game.paused ^ 1;
    a890:	80 91 c3 0b 	lds	r24, 0x0BC3
    a894:	91 e0       	ldi	r25, 0x01	; 1
    a896:	89 27       	eor	r24, r25
    a898:	80 93 c3 0b 	sts	0x0BC3, r24
		load_level_tiles(false);
    a89c:	80 e0       	ldi	r24, 0x00	; 0
    a89e:	0e 94 03 52 	call	0xa406	; 0xa406 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    a8a2:	20 91 c3 0b 	lds	r18, 0x0BC3
    a8a6:	f8 01       	movw	r30, r16
    a8a8:	80 81       	ld	r24, Z
    a8aa:	91 81       	ldd	r25, Z+1	; 0x01
    a8ac:	21 11       	cpse	r18, r1
    a8ae:	7d c1       	rjmp	.+762    	; 0xabaa <update_level_helper+0x352>
    a8b0:	2b 89       	ldd	r18, Y+19	; 0x13
    a8b2:	20 fd       	sbrc	r18, 0
    a8b4:	7a c1       	rjmp	.+756    	; 0xabaa <update_level_helper+0x352>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    a8b6:	93 ff       	sbrs	r25, 3
    a8b8:	11 c0       	rjmp	.+34     	; 0xa8dc <update_level_helper+0x84>
    a8ba:	8c 89       	ldd	r24, Y+20	; 0x14
    a8bc:	8a 35       	cpi	r24, 0x5A	; 90
    a8be:	71 f4       	brne	.+28     	; 0xa8dc <update_level_helper+0x84>
		{
			player->banter_frame = 0;
    a8c0:	1c 8a       	std	Y+20, r1	; 0x14
			player->banter_index = (u8) LBRandom(0, 9);
    a8c2:	69 e0       	ldi	r22, 0x09	; 9
    a8c4:	70 e0       	ldi	r23, 0x00	; 0
    a8c6:	80 e0       	ldi	r24, 0x00	; 0
    a8c8:	90 e0       	ldi	r25, 0x00	; 0
    a8ca:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <LBRandom>
    a8ce:	8d 8b       	std	Y+21, r24	; 0x15
			SFX_BANTER;
    a8d0:	2f e5       	ldi	r18, 0x5F	; 95
    a8d2:	4e e1       	ldi	r20, 0x1E	; 30
    a8d4:	60 e0       	ldi	r22, 0x00	; 0
    a8d6:	84 e0       	ldi	r24, 0x04	; 4
    a8d8:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    a8dc:	6f 89       	ldd	r22, Y+23	; 0x17
    a8de:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    a8e0:	f8 01       	movw	r30, r16
    a8e2:	84 81       	ldd	r24, Z+4	; 0x04
    a8e4:	84 ff       	sbrs	r24, 4
    a8e6:	15 c0       	rjmp	.+42     	; 0xa912 <update_level_helper+0xba>
		{
			player->shared.direction = D_UP;
    a8e8:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    a8ea:	70 e0       	ldi	r23, 0x00	; 0
    a8ec:	80 e0       	ldi	r24, 0x00	; 0
    a8ee:	90 e0       	ldi	r25, 0x00	; 0
    a8f0:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    a8f4:	25 e6       	ldi	r18, 0x65	; 101
    a8f6:	38 e8       	ldi	r19, 0x88	; 136
    a8f8:	48 e8       	ldi	r20, 0x88	; 136
    a8fa:	5c e3       	ldi	r21, 0x3C	; 60
    a8fc:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    a900:	9b 01       	movw	r18, r22
    a902:	ac 01       	movw	r20, r24
    a904:	6e 81       	ldd	r22, Y+6	; 0x06
    a906:	7f 81       	ldd	r23, Y+7	; 0x07
    a908:	88 85       	ldd	r24, Y+8	; 0x08
    a90a:	99 85       	ldd	r25, Y+9	; 0x09
    a90c:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <__subsf3>
    a910:	2f c0       	rjmp	.+94     	; 0xa970 <update_level_helper+0x118>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_RIGHT))
    a912:	87 ff       	sbrs	r24, 7
    a914:	16 c0       	rjmp	.+44     	; 0xa942 <update_level_helper+0xea>
		{
			player->shared.direction = D_RIGHT;
    a916:	81 e0       	ldi	r24, 0x01	; 1
    a918:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    a91a:	70 e0       	ldi	r23, 0x00	; 0
    a91c:	80 e0       	ldi	r24, 0x00	; 0
    a91e:	90 e0       	ldi	r25, 0x00	; 0
    a920:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    a924:	25 e6       	ldi	r18, 0x65	; 101
    a926:	38 e8       	ldi	r19, 0x88	; 136
    a928:	48 e8       	ldi	r20, 0x88	; 136
    a92a:	5c e3       	ldi	r21, 0x3C	; 60
    a92c:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    a930:	9b 01       	movw	r18, r22
    a932:	ac 01       	movw	r20, r24
    a934:	6a 81       	ldd	r22, Y+2	; 0x02
    a936:	7b 81       	ldd	r23, Y+3	; 0x03
    a938:	8c 81       	ldd	r24, Y+4	; 0x04
    a93a:	9d 81       	ldd	r25, Y+5	; 0x05
    a93c:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    a940:	33 c0       	rjmp	.+102    	; 0xa9a8 <update_level_helper+0x150>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_DOWN))
    a942:	85 ff       	sbrs	r24, 5
    a944:	1a c0       	rjmp	.+52     	; 0xa97a <update_level_helper+0x122>
		{
			player->shared.direction = D_DOWN;
    a946:	82 e0       	ldi	r24, 0x02	; 2
    a948:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    a94a:	70 e0       	ldi	r23, 0x00	; 0
    a94c:	80 e0       	ldi	r24, 0x00	; 0
    a94e:	90 e0       	ldi	r25, 0x00	; 0
    a950:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    a954:	25 e6       	ldi	r18, 0x65	; 101
    a956:	38 e8       	ldi	r19, 0x88	; 136
    a958:	48 e8       	ldi	r20, 0x88	; 136
    a95a:	5c e3       	ldi	r21, 0x3C	; 60
    a95c:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    a960:	9b 01       	movw	r18, r22
    a962:	ac 01       	movw	r20, r24
    a964:	6e 81       	ldd	r22, Y+6	; 0x06
    a966:	7f 81       	ldd	r23, Y+7	; 0x07
    a968:	88 85       	ldd	r24, Y+8	; 0x08
    a96a:	99 85       	ldd	r25, Y+9	; 0x09
    a96c:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    a970:	6e 83       	std	Y+6, r22	; 0x06
    a972:	7f 83       	std	Y+7, r23	; 0x07
    a974:	88 87       	std	Y+8, r24	; 0x08
    a976:	99 87       	std	Y+9, r25	; 0x09
    a978:	1d c0       	rjmp	.+58     	; 0xa9b4 <update_level_helper+0x15c>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_LEFT))
    a97a:	86 ff       	sbrs	r24, 6
    a97c:	1a c0       	rjmp	.+52     	; 0xa9b2 <update_level_helper+0x15a>
		{
			player->shared.direction = D_LEFT;
    a97e:	83 e0       	ldi	r24, 0x03	; 3
    a980:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    a982:	70 e0       	ldi	r23, 0x00	; 0
    a984:	80 e0       	ldi	r24, 0x00	; 0
    a986:	90 e0       	ldi	r25, 0x00	; 0
    a988:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    a98c:	25 e6       	ldi	r18, 0x65	; 101
    a98e:	38 e8       	ldi	r19, 0x88	; 136
    a990:	48 e8       	ldi	r20, 0x88	; 136
    a992:	5c e3       	ldi	r21, 0x3C	; 60
    a994:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    a998:	9b 01       	movw	r18, r22
    a99a:	ac 01       	movw	r20, r24
    a99c:	6a 81       	ldd	r22, Y+2	; 0x02
    a99e:	7b 81       	ldd	r23, Y+3	; 0x03
    a9a0:	8c 81       	ldd	r24, Y+4	; 0x04
    a9a2:	9d 81       	ldd	r25, Y+5	; 0x05
    a9a4:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <__subsf3>
    a9a8:	6a 83       	std	Y+2, r22	; 0x02
    a9aa:	7b 83       	std	Y+3, r23	; 0x03
    a9ac:	8c 83       	std	Y+4, r24	; 0x04
    a9ae:	9d 83       	std	Y+5, r25	; 0x05
    a9b0:	01 c0       	rjmp	.+2      	; 0xa9b4 <update_level_helper+0x15c>
			//SFX_TRACKS;
		}
		else
		{
			player->shared.speed = 0;
    a9b2:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    a9b4:	f8 01       	movw	r30, r16
    a9b6:	80 81       	ld	r24, Z
    a9b8:	91 81       	ldd	r25, Z+1	; 0x01
    a9ba:	8e 01       	movw	r16, r28
    a9bc:	06 5e       	subi	r16, 0xE6	; 230
    a9be:	1f 4f       	sbci	r17, 0xFF	; 255
    a9c0:	90 ff       	sbrs	r25, 0
    a9c2:	41 c0       	rjmp	.+130    	; 0xaa46 <update_level_helper+0x1ee>
    a9c4:	88 89       	ldd	r24, Y+16	; 0x10
    a9c6:	82 30       	cpi	r24, 0x02	; 2
    a9c8:	f0 f5       	brcc	.+124    	; 0xaa46 <update_level_helper+0x1ee>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    a9ca:	8f a1       	ldd	r24, Y+39	; 0x27
    a9cc:	81 11       	cpse	r24, r1
    a9ce:	02 c0       	rjmp	.+4      	; 0xa9d4 <update_level_helper+0x17c>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    a9d0:	68 01       	movw	r12, r16
    a9d2:	0a c0       	rjmp	.+20     	; 0xa9e8 <update_level_helper+0x190>
				if (!shot->active)
    a9d4:	fe 01       	movw	r30, r28
    a9d6:	e6 5b       	subi	r30, 0xB6	; 182
    a9d8:	ff 4f       	sbci	r31, 0xFF	; 255
    a9da:	80 81       	ld	r24, Z
    a9dc:	81 11       	cpse	r24, r1
    a9de:	33 c0       	rjmp	.+102    	; 0xaa46 <update_level_helper+0x1ee>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    a9e0:	6e 01       	movw	r12, r28
    a9e2:	fd e3       	ldi	r31, 0x3D	; 61
    a9e4:	cf 0e       	add	r12, r31
    a9e6:	d1 1c       	adc	r13, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    a9e8:	88 8d       	ldd	r24, Y+24	; 0x18
    a9ea:	88 23       	and	r24, r24
    a9ec:	61 f0       	breq	.+24     	; 0xaa06 <update_level_helper+0x1ae>
					{
						init_shot_state(shot, ROCKET_SHOT);
    a9ee:	61 e0       	ldi	r22, 0x01	; 1
    a9f0:	c6 01       	movw	r24, r12
    a9f2:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    a9f6:	61 e0       	ldi	r22, 0x01	; 1
    a9f8:	c6 01       	movw	r24, r12
    a9fa:	0e 94 20 48 	call	0x9040	; 0x9040 <set_shot_animations>
						SFX_ROCKET;
    a9fe:	2f ef       	ldi	r18, 0xFF	; 255
    aa00:	47 e1       	ldi	r20, 0x17	; 23
    aa02:	68 e0       	ldi	r22, 0x08	; 8
    aa04:	0b c0       	rjmp	.+22     	; 0xaa1c <update_level_helper+0x1c4>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    aa06:	60 e0       	ldi	r22, 0x00	; 0
    aa08:	c6 01       	movw	r24, r12
    aa0a:	0e 94 04 48 	call	0x9008	; 0x9008 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    aa0e:	60 e0       	ldi	r22, 0x00	; 0
    aa10:	c6 01       	movw	r24, r12
    aa12:	0e 94 20 48 	call	0x9040	; 0x9040 <set_shot_animations>
						SFX_CANNONBALL;
    aa16:	2f ef       	ldi	r18, 0xFF	; 255
    aa18:	47 e1       	ldi	r20, 0x17	; 23
    aa1a:	62 e0       	ldi	r22, 0x02	; 2
    aa1c:	84 e0       	ldi	r24, 0x04	; 4
    aa1e:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
					}
					player->active_shots++;
    aa22:	88 89       	ldd	r24, Y+16	; 0x10
    aa24:	8f 5f       	subi	r24, 0xFF	; 255
    aa26:	88 8b       	std	Y+16, r24	; 0x10
					shot->shared.direction = player->shared.direction;
    aa28:	88 81       	ld	r24, Y
    aa2a:	f6 01       	movw	r30, r12
    aa2c:	80 83       	st	Z, r24
					position_shot(player, shot);
    aa2e:	b6 01       	movw	r22, r12
    aa30:	ce 01       	movw	r24, r28
    aa32:	0e 94 aa 49 	call	0x9354	; 0x9354 <position_shot>
					shot->active = 1;
    aa36:	81 e0       	ldi	r24, 0x01	; 1
    aa38:	f6 01       	movw	r30, r12
    aa3a:	85 87       	std	Z+13, r24	; 0x0d
					if (player->has_over_speed)
    aa3c:	89 8d       	ldd	r24, Y+25	; 0x19
    aa3e:	88 23       	and	r24, r24
    aa40:	11 f0       	breq	.+4      	; 0xaa46 <update_level_helper+0x1ee>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    aa42:	86 e9       	ldi	r24, 0x96	; 150
    aa44:	81 83       	std	Z+1, r24	; 0x01
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    aa46:	a1 2c       	mov	r10, r1
    aa48:	b1 2c       	mov	r11, r1
    aa4a:	6e 01       	movw	r12, r28
    aa4c:	ca 0c       	add	r12, r10
    aa4e:	db 1c       	adc	r13, r11

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    aa50:	f6 01       	movw	r30, r12
    aa52:	87 a1       	ldd	r24, Z+39	; 0x27
    aa54:	88 23       	and	r24, r24
    aa56:	09 f4       	brne	.+2      	; 0xaa5a <update_level_helper+0x202>
    aa58:	9d c0       	rjmp	.+314    	; 0xab94 <update_level_helper+0x33c>
			{
				switch (shot->shared.direction)
    aa5a:	f8 01       	movw	r30, r16
    aa5c:	80 81       	ld	r24, Z
    aa5e:	81 30       	cpi	r24, 0x01	; 1
    aa60:	a9 f1       	breq	.+106    	; 0xaacc <update_level_helper+0x274>
    aa62:	e8 f0       	brcs	.+58     	; 0xaa9e <update_level_helper+0x246>
    aa64:	82 30       	cpi	r24, 0x02	; 2
    aa66:	09 f4       	brne	.+2      	; 0xaa6a <update_level_helper+0x212>
    aa68:	48 c0       	rjmp	.+144    	; 0xaafa <update_level_helper+0x2a2>
    aa6a:	83 30       	cpi	r24, 0x03	; 3
    aa6c:	09 f0       	breq	.+2      	; 0xaa70 <update_level_helper+0x218>
    aa6e:	66 c0       	rjmp	.+204    	; 0xab3c <update_level_helper+0x2e4>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    aa70:	f6 01       	movw	r30, r12
    aa72:	63 8d       	ldd	r22, Z+27	; 0x1b
    aa74:	70 e0       	ldi	r23, 0x00	; 0
    aa76:	80 e0       	ldi	r24, 0x00	; 0
    aa78:	90 e0       	ldi	r25, 0x00	; 0
    aa7a:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    aa7e:	25 e6       	ldi	r18, 0x65	; 101
    aa80:	38 e8       	ldi	r19, 0x88	; 136
    aa82:	48 e8       	ldi	r20, 0x88	; 136
    aa84:	5c e3       	ldi	r21, 0x3C	; 60
    aa86:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    aa8a:	9b 01       	movw	r18, r22
    aa8c:	ac 01       	movw	r20, r24
    aa8e:	f8 01       	movw	r30, r16
    aa90:	62 81       	ldd	r22, Z+2	; 0x02
    aa92:	73 81       	ldd	r23, Z+3	; 0x03
    aa94:	84 81       	ldd	r24, Z+4	; 0x04
    aa96:	95 81       	ldd	r25, Z+5	; 0x05
    aa98:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <__subsf3>
    aa9c:	4a c0       	rjmp	.+148    	; 0xab32 <update_level_helper+0x2da>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    aa9e:	f6 01       	movw	r30, r12
    aaa0:	63 8d       	ldd	r22, Z+27	; 0x1b
    aaa2:	70 e0       	ldi	r23, 0x00	; 0
    aaa4:	80 e0       	ldi	r24, 0x00	; 0
    aaa6:	90 e0       	ldi	r25, 0x00	; 0
    aaa8:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    aaac:	25 e6       	ldi	r18, 0x65	; 101
    aaae:	38 e8       	ldi	r19, 0x88	; 136
    aab0:	48 e8       	ldi	r20, 0x88	; 136
    aab2:	5c e3       	ldi	r21, 0x3C	; 60
    aab4:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    aab8:	9b 01       	movw	r18, r22
    aaba:	ac 01       	movw	r20, r24
    aabc:	f8 01       	movw	r30, r16
    aabe:	66 81       	ldd	r22, Z+6	; 0x06
    aac0:	77 81       	ldd	r23, Z+7	; 0x07
    aac2:	80 85       	ldd	r24, Z+8	; 0x08
    aac4:	91 85       	ldd	r25, Z+9	; 0x09
    aac6:	0e 94 4e 5a 	call	0xb49c	; 0xb49c <__subsf3>
    aaca:	2d c0       	rjmp	.+90     	; 0xab26 <update_level_helper+0x2ce>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    aacc:	f6 01       	movw	r30, r12
    aace:	63 8d       	ldd	r22, Z+27	; 0x1b
    aad0:	70 e0       	ldi	r23, 0x00	; 0
    aad2:	80 e0       	ldi	r24, 0x00	; 0
    aad4:	90 e0       	ldi	r25, 0x00	; 0
    aad6:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    aada:	25 e6       	ldi	r18, 0x65	; 101
    aadc:	38 e8       	ldi	r19, 0x88	; 136
    aade:	48 e8       	ldi	r20, 0x88	; 136
    aae0:	5c e3       	ldi	r21, 0x3C	; 60
    aae2:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    aae6:	9b 01       	movw	r18, r22
    aae8:	ac 01       	movw	r20, r24
    aaea:	f8 01       	movw	r30, r16
    aaec:	62 81       	ldd	r22, Z+2	; 0x02
    aaee:	73 81       	ldd	r23, Z+3	; 0x03
    aaf0:	84 81       	ldd	r24, Z+4	; 0x04
    aaf2:	95 81       	ldd	r25, Z+5	; 0x05
    aaf4:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    aaf8:	1c c0       	rjmp	.+56     	; 0xab32 <update_level_helper+0x2da>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    aafa:	f6 01       	movw	r30, r12
    aafc:	63 8d       	ldd	r22, Z+27	; 0x1b
    aafe:	70 e0       	ldi	r23, 0x00	; 0
    ab00:	80 e0       	ldi	r24, 0x00	; 0
    ab02:	90 e0       	ldi	r25, 0x00	; 0
    ab04:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    ab08:	25 e6       	ldi	r18, 0x65	; 101
    ab0a:	38 e8       	ldi	r19, 0x88	; 136
    ab0c:	48 e8       	ldi	r20, 0x88	; 136
    ab0e:	5c e3       	ldi	r21, 0x3C	; 60
    ab10:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    ab14:	9b 01       	movw	r18, r22
    ab16:	ac 01       	movw	r20, r24
    ab18:	f8 01       	movw	r30, r16
    ab1a:	66 81       	ldd	r22, Z+6	; 0x06
    ab1c:	77 81       	ldd	r23, Z+7	; 0x07
    ab1e:	80 85       	ldd	r24, Z+8	; 0x08
    ab20:	91 85       	ldd	r25, Z+9	; 0x09
    ab22:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    ab26:	f8 01       	movw	r30, r16
    ab28:	66 83       	std	Z+6, r22	; 0x06
    ab2a:	77 83       	std	Z+7, r23	; 0x07
    ab2c:	80 87       	std	Z+8, r24	; 0x08
    ab2e:	91 87       	std	Z+9, r25	; 0x09
    ab30:	05 c0       	rjmp	.+10     	; 0xab3c <update_level_helper+0x2e4>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    ab32:	f8 01       	movw	r30, r16
    ab34:	62 83       	std	Z+2, r22	; 0x02
    ab36:	73 83       	std	Z+3, r23	; 0x03
    ab38:	84 83       	std	Z+4, r24	; 0x04
    ab3a:	95 83       	std	Z+5, r25	; 0x05
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    ab3c:	f6 01       	movw	r30, r12
    ab3e:	90 a4       	ldd	r9, Z+40	; 0x28
    ab40:	69 2d       	mov	r22, r9
    ab42:	70 e0       	ldi	r23, 0x00	; 0
    ab44:	80 e0       	ldi	r24, 0x00	; 0
    ab46:	90 e0       	ldi	r25, 0x00	; 0
    ab48:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    ab4c:	2b 01       	movw	r4, r22
    ab4e:	3c 01       	movw	r6, r24
    ab50:	f8 e0       	ldi	r31, 0x08	; 8
    ab52:	f9 15       	cp	r31, r9
    ab54:	80 f0       	brcs	.+32     	; 0xab76 <update_level_helper+0x31e>
    ab56:	f6 01       	movw	r30, r12
    ab58:	63 8d       	ldd	r22, Z+27	; 0x1b
    ab5a:	70 e0       	ldi	r23, 0x00	; 0
    ab5c:	80 e0       	ldi	r24, 0x00	; 0
    ab5e:	90 e0       	ldi	r25, 0x00	; 0
    ab60:	0e 94 4d 5b 	call	0xb69a	; 0xb69a <__floatsisf>
    ab64:	25 e6       	ldi	r18, 0x65	; 101
    ab66:	38 e8       	ldi	r19, 0x88	; 136
    ab68:	48 e8       	ldi	r20, 0x88	; 136
    ab6a:	5c e3       	ldi	r21, 0x3C	; 60
    ab6c:	0e 94 01 5c 	call	0xb802	; 0xb802 <__mulsf3>
    ab70:	9b 01       	movw	r18, r22
    ab72:	ac 01       	movw	r20, r24
    ab74:	03 c0       	rjmp	.+6      	; 0xab7c <update_level_helper+0x324>
    ab76:	20 e0       	ldi	r18, 0x00	; 0
    ab78:	30 e0       	ldi	r19, 0x00	; 0
    ab7a:	a9 01       	movw	r20, r18
    ab7c:	c3 01       	movw	r24, r6
    ab7e:	b2 01       	movw	r22, r4
    ab80:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <__addsf3>
    ab84:	0e 94 1f 5b 	call	0xb63e	; 0xb63e <__fixunssfsi>
    ab88:	f6 01       	movw	r30, r12
    ab8a:	60 a7       	std	Z+40, r22	; 0x28
				collision_detect_shot(player, shot);
    ab8c:	b8 01       	movw	r22, r16
    ab8e:	ce 01       	movw	r24, r28
    ab90:	0e 94 0e 4f 	call	0x9e1c	; 0x9e1c <collision_detect_shot>
    ab94:	f3 e2       	ldi	r31, 0x23	; 35
    ab96:	af 0e       	add	r10, r31
    ab98:	b1 1c       	adc	r11, r1
    ab9a:	0d 5d       	subi	r16, 0xDD	; 221
    ab9c:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		}

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
    ab9e:	86 e4       	ldi	r24, 0x46	; 70
    aba0:	a8 16       	cp	r10, r24
    aba2:	b1 04       	cpc	r11, r1
    aba4:	09 f0       	breq	.+2      	; 0xaba8 <update_level_helper+0x350>
    aba6:	51 cf       	rjmp	.-350    	; 0xaa4a <update_level_helper+0x1f2>
    aba8:	0c c0       	rjmp	.+24     	; 0xabc2 <update_level_helper+0x36a>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    abaa:	91 ff       	sbrs	r25, 1
    abac:	0a c0       	rjmp	.+20     	; 0xabc2 <update_level_helper+0x36a>
		{
			SFX_NAVIGATE;
    abae:	2f ef       	ldi	r18, 0xFF	; 255
    abb0:	47 e1       	ldi	r20, 0x17	; 23
    abb2:	67 e0       	ldi	r22, 0x07	; 7
    abb4:	84 e0       	ldi	r24, 0x04	; 4
    abb6:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
			save_score();
    abba:	0e 94 3a 49 	call	0x9274	; 0x9274 <save_score>
			exit_game();
    abbe:	0e 94 23 54 	call	0xa846	; 0xa846 <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    abc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    abc4:	85 30       	cpi	r24, 0x05	; 5
    abc6:	08 f4       	brcc	.+2      	; 0xabca <update_level_helper+0x372>
    abc8:	5c c0       	rjmp	.+184    	; 0xac82 <update_level_helper+0x42a>
    abca:	f7 01       	movw	r30, r14
    abcc:	83 89       	ldd	r24, Z+19	; 0x13
    abce:	80 fd       	sbrc	r24, 0
    abd0:	58 c0       	rjmp	.+176    	; 0xac82 <update_level_helper+0x42a>
	{
	    next_level = game.current_level + 1;
    abd2:	10 91 c2 0b 	lds	r17, 0x0BC2
    abd6:	1f 5f       	subi	r17, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    abd8:	1a 30       	cpi	r17, 0x0A	; 10
    abda:	28 f0       	brcs	.+10     	; 0xabe6 <update_level_helper+0x38e>
    abdc:	96 85       	ldd	r25, Z+14	; 0x0e
    abde:	8e 85       	ldd	r24, Y+14	; 0x0e
    abe0:	98 17       	cp	r25, r24
    abe2:	09 f4       	brne	.+2      	; 0xabe6 <update_level_helper+0x38e>
    abe4:	4e c0       	rjmp	.+156    	; 0xac82 <update_level_helper+0x42a>

		save_score();
    abe6:	0e 94 3a 49 	call	0x9274	; 0x9274 <save_score>
		load_level_tiles(true);
    abea:	81 e0       	ldi	r24, 0x01	; 1
    abec:	0e 94 03 52 	call	0xa406	; 0xa406 <load_level_tiles>
		SetSpriteVisibility(false);
    abf0:	80 e0       	ldi	r24, 0x00	; 0
    abf2:	0e 94 94 43 	call	0x8728	; 0x8728 <SetSpriteVisibility>
		print_level_score(player, other_player);
    abf6:	b7 01       	movw	r22, r14
    abf8:	ce 01       	movw	r24, r28
    abfa:	0e 94 17 4a 	call	0x942e	; 0x942e <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    abfe:	82 e0       	ldi	r24, 0x02	; 2
    ac00:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <LBWaitSeconds>
		player->level_score = 0;
    ac04:	1f 86       	std	Y+15, r1	; 0x0f
		other_player->level_score = 0;
    ac06:	f7 01       	movw	r30, r14
    ac08:	17 86       	std	Z+15, r1	; 0x0f
		SFX_LEVEL_CLEAR;
    ac0a:	2f ef       	ldi	r18, 0xFF	; 255
    ac0c:	47 e1       	ldi	r20, 0x17	; 23
    ac0e:	64 e0       	ldi	r22, 0x04	; 4
    ac10:	84 e0       	ldi	r24, 0x04	; 4
    ac12:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    ac16:	1a 30       	cpi	r17, 0x0A	; 10
    ac18:	10 f1       	brcs	.+68     	; 0xac5e <update_level_helper+0x406>
		{
		    if (other_player->score > player->score)
    ac1a:	f7 01       	movw	r30, r14
    ac1c:	96 85       	ldd	r25, Z+14	; 0x0e
    ac1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    ac20:	89 17       	cp	r24, r25
    ac22:	28 f4       	brcc	.+10     	; 0xac2e <update_level_helper+0x3d6>
    ac24:	9c 2f       	mov	r25, r28
    ac26:	8d 2f       	mov	r24, r29
		    {
		        tmp = player;
		        player = other_player;
    ac28:	e7 01       	movw	r28, r14
		        other_player = tmp;
    ac2a:	e9 2e       	mov	r14, r25
    ac2c:	f8 2e       	mov	r15, r24
		    }
		    print_final_score(player, other_player);
    ac2e:	b7 01       	movw	r22, r14
    ac30:	ce 01       	movw	r24, r28
    ac32:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    ac36:	82 e0       	ldi	r24, 0x02	; 2
    ac38:	0e 94 d2 47 	call	0x8fa4	; 0x8fa4 <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    ac3c:	df 91       	pop	r29
    ac3e:	cf 91       	pop	r28
    ac40:	1f 91       	pop	r17
    ac42:	0f 91       	pop	r16
    ac44:	ff 90       	pop	r15
    ac46:	ef 90       	pop	r14
    ac48:	df 90       	pop	r13
    ac4a:	cf 90       	pop	r12
    ac4c:	bf 90       	pop	r11
    ac4e:	af 90       	pop	r10
    ac50:	9f 90       	pop	r9
    ac52:	7f 90       	pop	r7
    ac54:	6f 90       	pop	r6
    ac56:	5f 90       	pop	r5
    ac58:	4f 90       	pop	r4
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    ac5a:	0c 94 23 54 	jmp	0xa846	; 0xa846 <exit_game>
		}
		else
		{
			level_transition(next_level);
    ac5e:	81 2f       	mov	r24, r17
		}
	}
}
    ac60:	df 91       	pop	r29
    ac62:	cf 91       	pop	r28
    ac64:	1f 91       	pop	r17
    ac66:	0f 91       	pop	r16
    ac68:	ff 90       	pop	r15
    ac6a:	ef 90       	pop	r14
    ac6c:	df 90       	pop	r13
    ac6e:	cf 90       	pop	r12
    ac70:	bf 90       	pop	r11
    ac72:	af 90       	pop	r10
    ac74:	9f 90       	pop	r9
    ac76:	7f 90       	pop	r7
    ac78:	6f 90       	pop	r6
    ac7a:	5f 90       	pop	r5
    ac7c:	4f 90       	pop	r4
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    ac7e:	0c 94 18 53 	jmp	0xa630	; 0xa630 <level_transition>
		}
	}
}
    ac82:	df 91       	pop	r29
    ac84:	cf 91       	pop	r28
    ac86:	1f 91       	pop	r17
    ac88:	0f 91       	pop	r16
    ac8a:	ff 90       	pop	r15
    ac8c:	ef 90       	pop	r14
    ac8e:	df 90       	pop	r13
    ac90:	cf 90       	pop	r12
    ac92:	bf 90       	pop	r11
    ac94:	af 90       	pop	r10
    ac96:	9f 90       	pop	r9
    ac98:	7f 90       	pop	r7
    ac9a:	6f 90       	pop	r6
    ac9c:	5f 90       	pop	r5
    ac9e:	4f 90       	pop	r4
    aca0:	08 95       	ret

0000aca2 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    aca2:	df 92       	push	r13
    aca4:	ef 92       	push	r14
    aca6:	ff 92       	push	r15
    aca8:	0f 93       	push	r16
    acaa:	1f 93       	push	r17
    acac:	cf 93       	push	r28
    acae:	df 93       	push	r29
    acb0:	8c 01       	movw	r16, r24
    acb2:	eb 01       	movw	r28, r22
	char p2_shot_index = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;

	// Render
	if (game.paused)
    acb4:	80 91 c3 0b 	lds	r24, 0x0BC3
    acb8:	88 23       	and	r24, r24
    acba:	d1 f0       	breq	.+52     	; 0xacf0 <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    acbc:	80 e0       	ldi	r24, 0x00	; 0
    acbe:	0e 94 94 43 	call	0x8728	; 0x8728 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    acc2:	49 e5       	ldi	r20, 0x59	; 89
    acc4:	51 e2       	ldi	r21, 0x21	; 33
    acc6:	6c e0       	ldi	r22, 0x0C	; 12
    acc8:	88 e0       	ldi	r24, 0x08	; 8
    acca:	0e 94 15 45 	call	0x8a2a	; 0x8a2a <DrawMap2>
		Print(12, 13, strPaused);
    acce:	46 e9       	ldi	r20, 0x96	; 150
    acd0:	51 e0       	ldi	r21, 0x01	; 1
    acd2:	6d e0       	ldi	r22, 0x0D	; 13
    acd4:	70 e0       	ldi	r23, 0x00	; 0
    acd6:	8c e0       	ldi	r24, 0x0C	; 12
    acd8:	90 e0       	ldi	r25, 0x00	; 0
    acda:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
		Print(11, 14, strExit);
    acde:	4d e9       	ldi	r20, 0x9D	; 157
    ace0:	51 e0       	ldi	r21, 0x01	; 1
    ace2:	6e e0       	ldi	r22, 0x0E	; 14
    ace4:	70 e0       	ldi	r23, 0x00	; 0
    ace6:	8b e0       	ldi	r24, 0x0B	; 11
    ace8:	90 e0       	ldi	r25, 0x00	; 0
    acea:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    acee:	44 c0       	rjmp	.+136    	; 0xad78 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    acf0:	81 e0       	ldi	r24, 0x01	; 1
    acf2:	0e 94 94 43 	call	0x8728	; 0x8728 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    acf6:	60 e0       	ldi	r22, 0x00	; 0
    acf8:	8e ed       	ldi	r24, 0xDE	; 222
    acfa:	9b e0       	ldi	r25, 0x0B	; 11
    acfc:	0e 94 a5 4b 	call	0x974a	; 0x974a <tank_map>
    ad00:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    ad02:	68 2f       	mov	r22, r24
    ad04:	81 e5       	ldi	r24, 0x51	; 81
    ad06:	9f e0       	ldi	r25, 0x0F	; 15
    ad08:	0e 94 a5 4b 	call	0x974a	; 0x974a <tank_map>
    ad0c:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    ad0e:	68 2f       	mov	r22, r24
    ad10:	8e ed       	ldi	r24, 0xDE	; 222
    ad12:	9b e0       	ldi	r25, 0x0B	; 11
    ad14:	0e 94 27 4c 	call	0x984e	; 0x984e <shot_map>
    ad18:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    ad1a:	68 2f       	mov	r22, r24
    ad1c:	81 e5       	ldi	r24, 0x51	; 81
    ad1e:	9f e0       	ldi	r25, 0x0F	; 15
    ad20:	0e 94 27 4c 	call	0x984e	; 0x984e <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    ad24:	40 91 02 01 	lds	r20, 0x0102
    ad28:	6f e0       	ldi	r22, 0x0F	; 15
    ad2a:	8e ed       	ldi	r24, 0xDE	; 222
    ad2c:	9b e0       	ldi	r25, 0x0B	; 11
    ad2e:	0e 94 dc 4a 	call	0x95b8	; 0x95b8 <render_banter>
    ad32:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    ad36:	40 91 01 01 	lds	r20, 0x0101
    ad3a:	60 e0       	ldi	r22, 0x00	; 0
    ad3c:	81 e5       	ldi	r24, 0x51	; 81
    ad3e:	9f e0       	ldi	r25, 0x0F	; 15
    ad40:	0e 94 dc 4a 	call	0x95b8	; 0x95b8 <render_banter>
    ad44:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    ad48:	60 e0       	ldi	r22, 0x00	; 0
    ad4a:	8e ed       	ldi	r24, 0xDE	; 222
    ad4c:	9b e0       	ldi	r25, 0x0B	; 11
    ad4e:	0e 94 04 4b 	call	0x9608	; 0x9608 <render_player>
		render_player(&player2, p2_index);
    ad52:	6d 2d       	mov	r22, r13
    ad54:	81 e5       	ldi	r24, 0x51	; 81
    ad56:	9f e0       	ldi	r25, 0x0F	; 15
    ad58:	0e 94 04 4b 	call	0x9608	; 0x9608 <render_player>
		render_shot(&player1, p1_shot_index);
    ad5c:	6e 2d       	mov	r22, r14
    ad5e:	8e ed       	ldi	r24, 0xDE	; 222
    ad60:	9b e0       	ldi	r25, 0x0B	; 11
    ad62:	0e 94 2d 4b 	call	0x965a	; 0x965a <render_shot>
		render_shot(&player2, p2_shot_index);
    ad66:	6f 2d       	mov	r22, r15
    ad68:	81 e5       	ldi	r24, 0x51	; 81
    ad6a:	9f e0       	ldi	r25, 0x0F	; 15
    ad6c:	0e 94 2d 4b 	call	0x965a	; 0x965a <render_shot>
		render_tile_explosions(&tile_animations);
    ad70:	85 ec       	ldi	r24, 0xC5	; 197
    ad72:	9b e0       	ldi	r25, 0x0B	; 11
    ad74:	0e 94 64 4b 	call	0x96c8	; 0x96c8 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    ad78:	2f e0       	ldi	r18, 0x0F	; 15
    ad7a:	41 e5       	ldi	r20, 0x51	; 81
    ad7c:	5f e0       	ldi	r21, 0x0F	; 15
    ad7e:	6e ed       	ldi	r22, 0xDE	; 222
    ad80:	7b e0       	ldi	r23, 0x0B	; 11
    ad82:	c8 01       	movw	r24, r16
    ad84:	0e 94 2c 54 	call	0xa858	; 0xa858 <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    ad88:	20 e0       	ldi	r18, 0x00	; 0
    ad8a:	4e ed       	ldi	r20, 0xDE	; 222
    ad8c:	5b e0       	ldi	r21, 0x0B	; 11
    ad8e:	61 e5       	ldi	r22, 0x51	; 81
    ad90:	7f e0       	ldi	r23, 0x0F	; 15
    ad92:	ce 01       	movw	r24, r28
    ad94:	0e 94 2c 54 	call	0xa858	; 0xa858 <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    ad98:	2f e0       	ldi	r18, 0x0F	; 15
    ad9a:	40 e0       	ldi	r20, 0x00	; 0
    ad9c:	61 e5       	ldi	r22, 0x51	; 81
    ad9e:	7f e0       	ldi	r23, 0x0F	; 15
    ada0:	8e ed       	ldi	r24, 0xDE	; 222
    ada2:	9b e0       	ldi	r25, 0x0B	; 11
    ada4:	0e 94 02 51 	call	0xa204	; 0xa204 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    ada8:	20 e0       	ldi	r18, 0x00	; 0
    adaa:	4f e0       	ldi	r20, 0x0F	; 15
    adac:	6e ed       	ldi	r22, 0xDE	; 222
    adae:	7b e0       	ldi	r23, 0x0B	; 11
    adb0:	81 e5       	ldi	r24, 0x51	; 81
    adb2:	9f e0       	ldi	r25, 0x0F	; 15
}
    adb4:	df 91       	pop	r29
    adb6:	cf 91       	pop	r28
    adb8:	1f 91       	pop	r17
    adba:	0f 91       	pop	r16
    adbc:	ff 90       	pop	r15
    adbe:	ef 90       	pop	r14
    adc0:	df 90       	pop	r13

	// Update
	update_level_helper(p1, &player1, &player2, 15);
	update_level_helper(p2, &player2, &player1, 0);
	collision_detect_player(&player1, &player2, 0, 15);
	collision_detect_player(&player2, &player1, 15, 0);
    adc2:	0c 94 02 51 	jmp	0xa204	; 0xa204 <collision_detect_player>

0000adc6 <update_tank_rank>:
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	// Update
	if (p1->pressed & BTN_X)
    adc6:	fc 01       	movw	r30, r24
    adc8:	80 81       	ld	r24, Z
    adca:	91 81       	ldd	r25, Z+1	; 0x01
    adcc:	91 ff       	sbrs	r25, 1
    adce:	0a c0       	rjmp	.+20     	; 0xade4 <update_tank_rank+0x1e>
	{
		SFX_NAVIGATE;
    add0:	2f ef       	ldi	r18, 0xFF	; 255
    add2:	47 e1       	ldi	r20, 0x17	; 23
    add4:	67 e0       	ldi	r22, 0x07	; 7
    add6:	84 e0       	ldi	r24, 0x04	; 4
    add8:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
		fade_through();
    addc:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
		load_splash();
    ade0:	0c 94 48 53 	jmp	0xa690	; 0xa690 <load_splash>
    ade4:	08 95       	ret

0000ade6 <_handle_select_helper>:
	}
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    ade6:	0f 93       	push	r16
    ade8:	1f 93       	push	r17
    adea:	cf 93       	push	r28
    adec:	df 93       	push	r29
    adee:	ec 01       	movw	r28, r24
    adf0:	ca 01       	movw	r24, r20
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    adf2:	fb 01       	movw	r30, r22
    adf4:	20 81       	ld	r18, Z
    adf6:	31 81       	ldd	r19, Z+1	; 0x01
    adf8:	f9 01       	movw	r30, r18
    adfa:	e0 71       	andi	r30, 0x10	; 16
    adfc:	ff 27       	eor	r31, r31
    adfe:	24 ff       	sbrs	r18, 4
    ae00:	09 c0       	rjmp	.+18     	; 0xae14 <_handle_select_helper+0x2e>
    ae02:	4d 81       	ldd	r20, Y+5	; 0x05
    ae04:	41 11       	cpse	r20, r1
    ae06:	06 c0       	rjmp	.+12     	; 0xae14 <_handle_select_helper+0x2e>
	{
		ps->handle_id--;
    ae08:	88 81       	ld	r24, Y
    ae0a:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    ae0c:	87 ff       	sbrs	r24, 7
    ae0e:	0f c0       	rjmp	.+30     	; 0xae2e <_handle_select_helper+0x48>
    ae10:	18 82       	st	Y, r1
    ae12:	24 c0       	rjmp	.+72     	; 0xae5c <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    ae14:	b9 01       	movw	r22, r18
    ae16:	60 72       	andi	r22, 0x20	; 32
    ae18:	77 27       	eor	r23, r23
    ae1a:	25 ff       	sbrs	r18, 5
    ae1c:	0a c0       	rjmp	.+20     	; 0xae32 <_handle_select_helper+0x4c>
    ae1e:	4d 81       	ldd	r20, Y+5	; 0x05
    ae20:	41 11       	cpse	r20, r1
    ae22:	07 c0       	rjmp	.+14     	; 0xae32 <_handle_select_helper+0x4c>
	{
		ps->handle_id++;
    ae24:	88 81       	ld	r24, Y
    ae26:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    ae28:	89 30       	cpi	r24, 0x09	; 9
    ae2a:	0c f0       	brlt	.+2      	; 0xae2e <_handle_select_helper+0x48>
    ae2c:	88 e0       	ldi	r24, 0x08	; 8
    ae2e:	88 83       	st	Y, r24
    ae30:	15 c0       	rjmp	.+42     	; 0xae5c <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    ae32:	a9 01       	movw	r20, r18
    ae34:	44 27       	eor	r20, r20
    ae36:	51 70       	andi	r21, 0x01	; 1
    ae38:	30 ff       	sbrs	r19, 0
    ae3a:	1a c0       	rjmp	.+52     	; 0xae70 <_handle_select_helper+0x8a>
    ae3c:	ad 81       	ldd	r26, Y+5	; 0x05
    ae3e:	a1 11       	cpse	r26, r1
    ae40:	17 c0       	rjmp	.+46     	; 0xae70 <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    ae42:	81 e0       	ldi	r24, 0x01	; 1
    ae44:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    ae46:	69 91       	ld	r22, Y+
    ae48:	f3 e0       	ldi	r31, 0x03	; 3
    ae4a:	6f 02       	muls	r22, r31
    ae4c:	b0 01       	movw	r22, r0
    ae4e:	11 24       	eor	r1, r1
    ae50:	6a 5d       	subi	r22, 0xDA	; 218
    ae52:	7e 4f       	sbci	r23, 0xFE	; 254
    ae54:	43 e0       	ldi	r20, 0x03	; 3
    ae56:	ce 01       	movw	r24, r28
    ae58:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
		SFX_NAVIGATE;
    ae5c:	2f ef       	ldi	r18, 0xFF	; 255
    ae5e:	47 e1       	ldi	r20, 0x17	; 23
    ae60:	67 e0       	ldi	r22, 0x07	; 7
    ae62:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    ae64:	df 91       	pop	r29
    ae66:	cf 91       	pop	r28
    ae68:	1f 91       	pop	r17
    ae6a:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    ae6c:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    ae70:	27 ff       	sbrs	r18, 7
    ae72:	09 c0       	rjmp	.+18     	; 0xae86 <_handle_select_helper+0xa0>
    ae74:	ad 81       	ldd	r26, Y+5	; 0x05
    ae76:	a1 30       	cpi	r26, 0x01	; 1
    ae78:	31 f4       	brne	.+12     	; 0xae86 <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    ae7a:	8c 81       	ldd	r24, Y+4	; 0x04
    ae7c:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    ae7e:	83 30       	cpi	r24, 0x03	; 3
    ae80:	5c f0       	brlt	.+22     	; 0xae98 <_handle_select_helper+0xb2>
    ae82:	82 e0       	ldi	r24, 0x02	; 2
    ae84:	09 c0       	rjmp	.+18     	; 0xae98 <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    ae86:	26 ff       	sbrs	r18, 6
    ae88:	0b c0       	rjmp	.+22     	; 0xaea0 <_handle_select_helper+0xba>
    ae8a:	ad 81       	ldd	r26, Y+5	; 0x05
    ae8c:	a1 30       	cpi	r26, 0x01	; 1
    ae8e:	41 f4       	brne	.+16     	; 0xaea0 <_handle_select_helper+0xba>
	{
		ps->char_index--;
    ae90:	8c 81       	ldd	r24, Y+4	; 0x04
    ae92:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    ae94:	87 fd       	sbrc	r24, 7
    ae96:	02 c0       	rjmp	.+4      	; 0xae9c <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    ae98:	8c 83       	std	Y+4, r24	; 0x04
    ae9a:	e0 cf       	rjmp	.-64     	; 0xae5c <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    ae9c:	1c 82       	std	Y+4, r1	; 0x04
    ae9e:	de cf       	rjmp	.-68     	; 0xae5c <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    aea0:	ef 2b       	or	r30, r31
    aea2:	61 f0       	breq	.+24     	; 0xaebc <_handle_select_helper+0xd6>
    aea4:	ed 81       	ldd	r30, Y+5	; 0x05
    aea6:	e1 30       	cpi	r30, 0x01	; 1
    aea8:	49 f4       	brne	.+18     	; 0xaebc <_handle_select_helper+0xd6>
	{
		ps->handle[(u8) ps->char_index]--;
    aeaa:	8c 81       	ldd	r24, Y+4	; 0x04
    aeac:	c8 0f       	add	r28, r24
    aeae:	d1 1d       	adc	r29, r1
    aeb0:	89 81       	ldd	r24, Y+1	; 0x01
    aeb2:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    aeb4:	81 34       	cpi	r24, 0x41	; 65
    aeb6:	78 f4       	brcc	.+30     	; 0xaed6 <_handle_select_helper+0xf0>
    aeb8:	81 e4       	ldi	r24, 0x41	; 65
    aeba:	0d c0       	rjmp	.+26     	; 0xaed6 <_handle_select_helper+0xf0>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    aebc:	67 2b       	or	r22, r23
    aebe:	69 f0       	breq	.+26     	; 0xaeda <_handle_select_helper+0xf4>
    aec0:	6d 81       	ldd	r22, Y+5	; 0x05
    aec2:	61 30       	cpi	r22, 0x01	; 1
    aec4:	51 f4       	brne	.+20     	; 0xaeda <_handle_select_helper+0xf4>
	{
		ps->handle[(u8) ps->char_index]++;
    aec6:	8c 81       	ldd	r24, Y+4	; 0x04
    aec8:	c8 0f       	add	r28, r24
    aeca:	d1 1d       	adc	r29, r1
    aecc:	89 81       	ldd	r24, Y+1	; 0x01
    aece:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    aed0:	8b 35       	cpi	r24, 0x5B	; 91
    aed2:	08 f0       	brcs	.+2      	; 0xaed6 <_handle_select_helper+0xf0>
    aed4:	8a e5       	ldi	r24, 0x5A	; 90
    aed6:	89 83       	std	Y+1, r24	; 0x01
    aed8:	c1 cf       	rjmp	.-126    	; 0xae5c <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    aeda:	45 2b       	or	r20, r21
    aedc:	29 f1       	breq	.+74     	; 0xaf28 <_handle_select_helper+0x142>
    aede:	4d 81       	ldd	r20, Y+5	; 0x05
    aee0:	41 30       	cpi	r20, 0x01	; 1
    aee2:	11 f5       	brne	.+68     	; 0xaf28 <_handle_select_helper+0x142>
	{
		player->handle_id = ps->handle_id;
    aee4:	fe 01       	movw	r30, r28
    aee6:	21 91       	ld	r18, Z+
    aee8:	8f 01       	movw	r16, r30
    aeea:	fc 01       	movw	r30, r24
    aeec:	22 87       	std	Z+10, r18	; 0x0a
		LBCopyChars(player->handle, ps->handle, 3);
    aeee:	43 e0       	ldi	r20, 0x03	; 3
    aef0:	b8 01       	movw	r22, r16
    aef2:	0b 96       	adiw	r24, 0x0b	; 11
    aef4:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    aef8:	88 81       	ld	r24, Y
    aefa:	f3 e0       	ldi	r31, 0x03	; 3
    aefc:	8f 02       	muls	r24, r31
    aefe:	c0 01       	movw	r24, r0
    af00:	11 24       	eor	r1, r1
    af02:	43 e0       	ldi	r20, 0x03	; 3
    af04:	b8 01       	movw	r22, r16
    af06:	8a 5d       	subi	r24, 0xDA	; 218
    af08:	9e 4f       	sbci	r25, 0xFE	; 254
    af0a:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
		SFX_NAVIGATE;
    af0e:	2f ef       	ldi	r18, 0xFF	; 255
    af10:	47 e1       	ldi	r20, 0x17	; 23
    af12:	67 e0       	ldi	r22, 0x07	; 7
    af14:	84 e0       	ldi	r24, 0x04	; 4
    af16:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    af1a:	84 e2       	ldi	r24, 0x24	; 36
    af1c:	91 e0       	ldi	r25, 0x01	; 1
    af1e:	0e 94 93 38 	call	0x7126	; 0x7126 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    af22:	82 e0       	ldi	r24, 0x02	; 2
    af24:	8d 83       	std	Y+5, r24	; 0x05
    af26:	1a c0       	rjmp	.+52     	; 0xaf5c <_handle_select_helper+0x176>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    af28:	31 ff       	sbrs	r19, 1
    af2a:	18 c0       	rjmp	.+48     	; 0xaf5c <_handle_select_helper+0x176>
    af2c:	8d 81       	ldd	r24, Y+5	; 0x05
    af2e:	81 30       	cpi	r24, 0x01	; 1
    af30:	11 f4       	brne	.+4      	; 0xaf36 <_handle_select_helper+0x150>
	{
		ps->select_state = SELECTING;
    af32:	1d 82       	std	Y+5, r1	; 0x05
    af34:	93 cf       	rjmp	.-218    	; 0xae5c <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    af36:	82 30       	cpi	r24, 0x02	; 2
    af38:	19 f4       	brne	.+6      	; 0xaf40 <_handle_select_helper+0x15a>
	{
		ps->select_state = EDITING;
    af3a:	81 e0       	ldi	r24, 0x01	; 1
    af3c:	8d 83       	std	Y+5, r24	; 0x05
    af3e:	8e cf       	rjmp	.-228    	; 0xae5c <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    af40:	2f ef       	ldi	r18, 0xFF	; 255
    af42:	47 e1       	ldi	r20, 0x17	; 23
    af44:	67 e0       	ldi	r22, 0x07	; 7
    af46:	84 e0       	ldi	r24, 0x04	; 4
    af48:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
		fade_through();
    af4c:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
		load_splash();
	}
}
    af50:	df 91       	pop	r29
    af52:	cf 91       	pop	r28
    af54:	1f 91       	pop	r17
    af56:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    af58:	0c 94 48 53 	jmp	0xa690	; 0xa690 <load_splash>
	}
}
    af5c:	df 91       	pop	r29
    af5e:	cf 91       	pop	r28
    af60:	1f 91       	pop	r17
    af62:	0f 91       	pop	r16
    af64:	08 95       	ret

0000af66 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    af66:	af 92       	push	r10
    af68:	bf 92       	push	r11
    af6a:	cf 92       	push	r12
    af6c:	df 92       	push	r13
    af6e:	ef 92       	push	r14
    af70:	ff 92       	push	r15
    af72:	0f 93       	push	r16
    af74:	1f 93       	push	r17
    af76:	cf 93       	push	r28
    af78:	df 93       	push	r29
    af7a:	00 d0       	rcall	.+0      	; 0xaf7c <_handle_select_render_helper+0x16>
    af7c:	1f 92       	push	r1
    af7e:	cd b7       	in	r28, 0x3d	; 61
    af80:	de b7       	in	r29, 0x3e	; 62
    af82:	7c 01       	movw	r14, r24
    af84:	b4 2e       	mov	r11, r20
    af86:	a2 2e       	mov	r10, r18
	u8 tmp[3] = {' ', ' ', ' '};
    af88:	80 e2       	ldi	r24, 0x20	; 32
    af8a:	89 83       	std	Y+1, r24	; 0x01
    af8c:	8a 83       	std	Y+2, r24	; 0x02
    af8e:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    af90:	f7 01       	movw	r30, r14
    af92:	85 81       	ldd	r24, Z+5	; 0x05
    af94:	81 11       	cpse	r24, r1
    af96:	1d c0       	rjmp	.+58     	; 0xafd2 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_ball, 0);
    af98:	40 e0       	ldi	r20, 0x00	; 0
    af9a:	64 ee       	ldi	r22, 0xE4	; 228
    af9c:	70 e2       	ldi	r23, 0x20	; 32
    af9e:	82 2f       	mov	r24, r18
    afa0:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    afa4:	40 e0       	ldi	r20, 0x00	; 0
    afa6:	69 e2       	ldi	r22, 0x29	; 41
    afa8:	71 e2       	ldi	r23, 0x21	; 33
    afaa:	81 e0       	ldi	r24, 0x01	; 1
    afac:	8a 0d       	add	r24, r10
    afae:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    afb2:	f7 01       	movw	r30, r14
    afb4:	40 81       	ld	r20, Z
    afb6:	44 0f       	add	r20, r20
    afb8:	44 0f       	add	r20, r20
    afba:	44 0f       	add	r20, r20
    afbc:	40 5c       	subi	r20, 0xC0	; 192
    afbe:	01 e0       	ldi	r16, 0x01	; 1
    afc0:	21 e0       	ldi	r18, 0x01	; 1
    afc2:	6b 2d       	mov	r22, r11
    afc4:	66 0f       	add	r22, r22
    afc6:	66 0f       	add	r22, r22
    afc8:	66 0f       	add	r22, r22
    afca:	8a 2d       	mov	r24, r10
    afcc:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
    afd0:	6e c0       	rjmp	.+220    	; 0xb0ae <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == EDITING)
    afd2:	81 30       	cpi	r24, 0x01	; 1
    afd4:	09 f0       	breq	.+2      	; 0xafd8 <_handle_select_render_helper+0x72>
    afd6:	43 c0       	rjmp	.+134    	; 0xb05e <_handle_select_render_helper+0xf8>
	{
		MapSprite2(idx, map_ball, 0);
    afd8:	40 e0       	ldi	r20, 0x00	; 0
    afda:	64 ee       	ldi	r22, 0xE4	; 228
    afdc:	70 e2       	ldi	r23, 0x20	; 32
    afde:	82 2f       	mov	r24, r18
    afe0:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MapSprite2(idx+1, map_ball, 0);
    afe4:	11 e0       	ldi	r17, 0x01	; 1
    afe6:	1a 0d       	add	r17, r10
    afe8:	40 e0       	ldi	r20, 0x00	; 0
    afea:	64 ee       	ldi	r22, 0xE4	; 228
    afec:	70 e2       	ldi	r23, 0x20	; 32
    afee:	81 2f       	mov	r24, r17
    aff0:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    aff4:	cb 2c       	mov	r12, r11
    aff6:	d1 2c       	mov	r13, r1
    aff8:	f5 e0       	ldi	r31, 0x05	; 5
    affa:	cf 0e       	add	r12, r31
    affc:	d1 1c       	adc	r13, r1
    affe:	f7 01       	movw	r30, r14
    b000:	40 81       	ld	r20, Z
    b002:	44 0f       	add	r20, r20
    b004:	44 0f       	add	r20, r20
    b006:	44 0f       	add	r20, r20
    b008:	48 5c       	subi	r20, 0xC8	; 200
    b00a:	84 81       	ldd	r24, Z+4	; 0x04
    b00c:	b6 01       	movw	r22, r12
    b00e:	68 0f       	add	r22, r24
    b010:	71 1d       	adc	r23, r1
    b012:	87 fd       	sbrc	r24, 7
    b014:	7a 95       	dec	r23
    b016:	66 0f       	add	r22, r22
    b018:	66 0f       	add	r22, r22
    b01a:	66 0f       	add	r22, r22
    b01c:	01 e0       	ldi	r16, 0x01	; 1
    b01e:	21 e0       	ldi	r18, 0x01	; 1
    b020:	8a 2d       	mov	r24, r10
    b022:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    b026:	f7 01       	movw	r30, r14
    b028:	40 81       	ld	r20, Z
    b02a:	44 0f       	add	r20, r20
    b02c:	44 0f       	add	r20, r20
    b02e:	44 0f       	add	r20, r20
    b030:	48 5b       	subi	r20, 0xB8	; 184
    b032:	84 81       	ldd	r24, Z+4	; 0x04
    b034:	c8 0e       	add	r12, r24
    b036:	d1 1c       	adc	r13, r1
    b038:	87 fd       	sbrc	r24, 7
    b03a:	da 94       	dec	r13
    b03c:	6c 2d       	mov	r22, r12
    b03e:	66 0f       	add	r22, r22
    b040:	66 0f       	add	r22, r22
    b042:	66 0f       	add	r22, r22
    b044:	21 e0       	ldi	r18, 0x01	; 1
    b046:	81 2f       	mov	r24, r17
    b048:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    b04c:	43 e0       	ldi	r20, 0x03	; 3
    b04e:	b7 01       	movw	r22, r14
    b050:	6f 5f       	subi	r22, 0xFF	; 255
    b052:	7f 4f       	sbci	r23, 0xFF	; 255
    b054:	ce 01       	movw	r24, r28
    b056:	01 96       	adiw	r24, 0x01	; 1
    b058:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
    b05c:	28 c0       	rjmp	.+80     	; 0xb0ae <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == CONFIRMED)
    b05e:	82 30       	cpi	r24, 0x02	; 2
    b060:	31 f5       	brne	.+76     	; 0xb0ae <_handle_select_render_helper+0x148>
	{
		PrintChar(x_offset+6, 5, '(');
    b062:	04 2f       	mov	r16, r20
    b064:	10 e0       	ldi	r17, 0x00	; 0
    b066:	48 e2       	ldi	r20, 0x28	; 40
    b068:	65 e0       	ldi	r22, 0x05	; 5
    b06a:	70 e0       	ldi	r23, 0x00	; 0
    b06c:	c8 01       	movw	r24, r16
    b06e:	06 96       	adiw	r24, 0x06	; 6
    b070:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b074:	23 e0       	ldi	r18, 0x03	; 3
    b076:	a7 01       	movw	r20, r14
    b078:	4f 5f       	subi	r20, 0xFF	; 255
    b07a:	5f 4f       	sbci	r21, 0xFF	; 255
    b07c:	65 e0       	ldi	r22, 0x05	; 5
    b07e:	87 e0       	ldi	r24, 0x07	; 7
    b080:	8b 0d       	add	r24, r11
    b082:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b086:	49 e2       	ldi	r20, 0x29	; 41
    b088:	65 e0       	ldi	r22, 0x05	; 5
    b08a:	70 e0       	ldi	r23, 0x00	; 0
    b08c:	c8 01       	movw	r24, r16
    b08e:	0a 96       	adiw	r24, 0x0a	; 10
    b090:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
		MapSprite2(idx, map_none, 0);
    b094:	40 e0       	ldi	r20, 0x00	; 0
    b096:	69 e2       	ldi	r22, 0x29	; 41
    b098:	71 e2       	ldi	r23, 0x21	; 33
    b09a:	8a 2d       	mov	r24, r10
    b09c:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b0a0:	40 e0       	ldi	r20, 0x00	; 0
    b0a2:	69 e2       	ldi	r22, 0x29	; 41
    b0a4:	71 e2       	ldi	r23, 0x21	; 33
    b0a6:	81 e0       	ldi	r24, 0x01	; 1
    b0a8:	8a 0d       	add	r24, r10
    b0aa:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b0ae:	f7 01       	movw	r30, r14
    b0b0:	60 81       	ld	r22, Z
    b0b2:	68 5f       	subi	r22, 0xF8	; 248
    b0b4:	23 e0       	ldi	r18, 0x03	; 3
    b0b6:	ae 01       	movw	r20, r28
    b0b8:	4f 5f       	subi	r20, 0xFF	; 255
    b0ba:	5f 4f       	sbci	r21, 0xFF	; 255
    b0bc:	85 e0       	ldi	r24, 0x05	; 5
    b0be:	8b 0d       	add	r24, r11
    b0c0:	0e 94 82 46 	call	0x8d04	; 0x8d04 <LBPrintStr>
}
    b0c4:	0f 90       	pop	r0
    b0c6:	0f 90       	pop	r0
    b0c8:	0f 90       	pop	r0
    b0ca:	df 91       	pop	r29
    b0cc:	cf 91       	pop	r28
    b0ce:	1f 91       	pop	r17
    b0d0:	0f 91       	pop	r16
    b0d2:	ff 90       	pop	r15
    b0d4:	ef 90       	pop	r14
    b0d6:	df 90       	pop	r13
    b0d8:	cf 90       	pop	r12
    b0da:	bf 90       	pop	r11
    b0dc:	af 90       	pop	r10
    b0de:	08 95       	ret

0000b0e0 <load_handle_select>:

void load_handle_select()
{
    b0e0:	8f 92       	push	r8
    b0e2:	9f 92       	push	r9
    b0e4:	af 92       	push	r10
    b0e6:	bf 92       	push	r11
    b0e8:	cf 92       	push	r12
    b0ea:	df 92       	push	r13
    b0ec:	ef 92       	push	r14
    b0ee:	ff 92       	push	r15
    b0f0:	0f 93       	push	r16
    b0f2:	1f 93       	push	r17
    b0f4:	cf 93       	push	r28
    b0f6:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    b0f8:	82 e0       	ldi	r24, 0x02	; 2
    b0fa:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    b0fe:	0e 94 2d 49 	call	0x925a	; 0x925a <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    b102:	40 e0       	ldi	r20, 0x00	; 0
    b104:	63 e2       	ldi	r22, 0x23	; 35
    b106:	71 e2       	ldi	r23, 0x21	; 33
    b108:	80 e0       	ldi	r24, 0x00	; 0
    b10a:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    b10e:	40 e0       	ldi	r20, 0x00	; 0
    b110:	6b e0       	ldi	r22, 0x0B	; 11
    b112:	71 e2       	ldi	r23, 0x21	; 33
    b114:	84 e0       	ldi	r24, 0x04	; 4
    b116:	0e 94 77 44 	call	0x88ee	; 0x88ee <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    b11a:	02 e0       	ldi	r16, 0x02	; 2
    b11c:	22 e0       	ldi	r18, 0x02	; 2
    b11e:	40 e2       	ldi	r20, 0x20	; 32
    b120:	68 e1       	ldi	r22, 0x18	; 24
    b122:	80 e0       	ldi	r24, 0x00	; 0
    b124:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    b128:	22 e0       	ldi	r18, 0x02	; 2
    b12a:	40 e2       	ldi	r20, 0x20	; 32
    b12c:	60 ea       	ldi	r22, 0xA0	; 160
    b12e:	84 e0       	ldi	r24, 0x04	; 4
    b130:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
	Print(9, 1, strHandlesTitle);
    b134:	4b ec       	ldi	r20, 0xCB	; 203
    b136:	52 e0       	ldi	r21, 0x02	; 2
    b138:	61 e0       	ldi	r22, 0x01	; 1
    b13a:	70 e0       	ldi	r23, 0x00	; 0
    b13c:	89 e0       	ldi	r24, 0x09	; 9
    b13e:	90 e0       	ldi	r25, 0x00	; 0
    b140:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(6, 5, strPlayer1);
    b144:	4a eb       	ldi	r20, 0xBA	; 186
    b146:	52 e0       	ldi	r21, 0x02	; 2
    b148:	65 e0       	ldi	r22, 0x05	; 5
    b14a:	70 e0       	ldi	r23, 0x00	; 0
    b14c:	86 e0       	ldi	r24, 0x06	; 6
    b14e:	90 e0       	ldi	r25, 0x00	; 0
    b150:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(23, 5, strPlayer2);
    b154:	47 eb       	ldi	r20, 0xB7	; 183
    b156:	52 e0       	ldi	r21, 0x02	; 2
    b158:	65 e0       	ldi	r22, 0x05	; 5
    b15a:	70 e0       	ldi	r23, 0x00	; 0
    b15c:	87 e1       	ldi	r24, 0x17	; 23
    b15e:	90 e0       	ldi	r25, 0x00	; 0
    b160:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
    b164:	06 e2       	ldi	r16, 0x26	; 38
    b166:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = 0; i < 27; i += 1)
    b168:	c0 e0       	ldi	r28, 0x00	; 0
    b16a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    b16c:	83 e0       	ldi	r24, 0x03	; 3
    b16e:	88 2e       	mov	r8, r24
    b170:	91 2c       	mov	r9, r1
    b172:	58 01       	movw	r10, r16
    b174:	ce 01       	movw	r24, r28
    b176:	b4 01       	movw	r22, r8
    b178:	0e 94 34 5a 	call	0xb468	; 0xb468 <__divmodhi4>
    b17c:	7c 01       	movw	r14, r24
    b17e:	6b 01       	movw	r12, r22
    b180:	88 e0       	ldi	r24, 0x08	; 8
    b182:	c8 0e       	add	r12, r24
    b184:	d1 1c       	adc	r13, r1
    b186:	f8 01       	movw	r30, r16
    b188:	41 91       	ld	r20, Z+
    b18a:	8f 01       	movw	r16, r30
    b18c:	b6 01       	movw	r22, r12
    b18e:	c7 01       	movw	r24, r14
    b190:	03 96       	adiw	r24, 0x03	; 3
    b192:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    b196:	f5 01       	movw	r30, r10
    b198:	40 81       	ld	r20, Z
    b19a:	b6 01       	movw	r22, r12
    b19c:	c7 01       	movw	r24, r14
    b19e:	44 96       	adiw	r24, 0x14	; 20
    b1a0:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, strHandlesTitle);
	Print(6, 5, strPlayer1);
	Print(23, 5, strPlayer2);
	for (int i = 0; i < 27; i += 1)
    b1a4:	21 96       	adiw	r28, 0x01	; 1
    b1a6:	cb 31       	cpi	r28, 0x1B	; 27
    b1a8:	d1 05       	cpc	r29, r1
    b1aa:	19 f7       	brne	.-58     	; 0xb172 <load_handle_select+0x92>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
    b1ac:	4c ea       	ldi	r20, 0xAC	; 172
    b1ae:	52 e0       	ldi	r21, 0x02	; 2
    b1b0:	65 e1       	ldi	r22, 0x15	; 21
    b1b2:	70 e0       	ldi	r23, 0x00	; 0
    b1b4:	88 e0       	ldi	r24, 0x08	; 8
    b1b6:	90 e0       	ldi	r25, 0x00	; 0
    b1b8:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(8, 22, strConfirmHandle);
    b1bc:	40 ea       	ldi	r20, 0xA0	; 160
    b1be:	52 e0       	ldi	r21, 0x02	; 2
    b1c0:	66 e1       	ldi	r22, 0x16	; 22
    b1c2:	70 e0       	ldi	r23, 0x00	; 0
    b1c4:	88 e0       	ldi	r24, 0x08	; 8
    b1c6:	90 e0       	ldi	r25, 0x00	; 0
    b1c8:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(8, 23, strCancelHandle);
    b1cc:	45 e9       	ldi	r20, 0x95	; 149
    b1ce:	52 e0       	ldi	r21, 0x02	; 2
    b1d0:	67 e1       	ldi	r22, 0x17	; 23
    b1d2:	70 e0       	ldi	r23, 0x00	; 0
    b1d4:	88 e0       	ldi	r24, 0x08	; 8
    b1d6:	90 e0       	ldi	r25, 0x00	; 0
    b1d8:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>
	Print(8, 24, strChangeHandle);
    b1dc:	4d e6       	ldi	r20, 0x6D	; 109
    b1de:	52 e0       	ldi	r21, 0x02	; 2
    b1e0:	68 e1       	ldi	r22, 0x18	; 24
    b1e2:	70 e0       	ldi	r23, 0x00	; 0
    b1e4:	88 e0       	ldi	r24, 0x08	; 8
    b1e6:	90 e0       	ldi	r25, 0x00	; 0
}
    b1e8:	df 91       	pop	r29
    b1ea:	cf 91       	pop	r28
    b1ec:	1f 91       	pop	r17
    b1ee:	0f 91       	pop	r16
    b1f0:	ff 90       	pop	r15
    b1f2:	ef 90       	pop	r14
    b1f4:	df 90       	pop	r13
    b1f6:	cf 90       	pop	r12
    b1f8:	bf 90       	pop	r11
    b1fa:	af 90       	pop	r10
    b1fc:	9f 90       	pop	r9
    b1fe:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
	Print(8, 22, strConfirmHandle);
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
    b200:	0c 94 8e 45 	jmp	0x8b1c	; 0x8b1c <Print>

0000b204 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    b204:	0f 93       	push	r16
    b206:	cf 93       	push	r28
    b208:	df 93       	push	r29
    b20a:	ec 01       	movw	r28, r24
	// Render
	switch (game.selection)
    b20c:	80 91 c4 0b 	lds	r24, 0x0BC4
    b210:	81 30       	cpi	r24, 0x01	; 1
    b212:	49 f0       	breq	.+18     	; 0xb226 <update_splash+0x22>
    b214:	82 30       	cpi	r24, 0x02	; 2
    b216:	59 f0       	breq	.+22     	; 0xb22e <update_splash+0x2a>
    b218:	81 11       	cpse	r24, r1
    b21a:	10 c0       	rjmp	.+32     	; 0xb23c <update_splash+0x38>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    b21c:	01 e0       	ldi	r16, 0x01	; 1
    b21e:	21 e0       	ldi	r18, 0x01	; 1
    b220:	48 e6       	ldi	r20, 0x68	; 104
    b222:	60 e3       	ldi	r22, 0x30	; 48
    b224:	09 c0       	rjmp	.+18     	; 0xb238 <update_splash+0x34>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    b226:	01 e0       	ldi	r16, 0x01	; 1
    b228:	21 e0       	ldi	r18, 0x01	; 1
    b22a:	40 e7       	ldi	r20, 0x70	; 112
    b22c:	03 c0       	rjmp	.+6      	; 0xb234 <update_splash+0x30>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    b22e:	01 e0       	ldi	r16, 0x01	; 1
    b230:	21 e0       	ldi	r18, 0x01	; 1
    b232:	48 e7       	ldi	r20, 0x78	; 120
    b234:	60 e3       	ldi	r22, 0x30	; 48
    b236:	80 e0       	ldi	r24, 0x00	; 0
    b238:	0e 94 ce 44 	call	0x899c	; 0x899c <MoveSprite>
			break;
	}
	Print(9, 21, strSelectHandle);
    b23c:	4c ea       	ldi	r20, 0xAC	; 172
    b23e:	52 e0       	ldi	r21, 0x02	; 2
    b240:	65 e1       	ldi	r22, 0x15	; 21
    b242:	70 e0       	ldi	r23, 0x00	; 0
    b244:	89 e0       	ldi	r24, 0x09	; 9
    b246:	90 e0       	ldi	r25, 0x00	; 0
    b248:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <Print>

	// Update
	if (p1->pressed & BTN_UP)
    b24c:	88 81       	ld	r24, Y
    b24e:	99 81       	ldd	r25, Y+1	; 0x01
    b250:	84 ff       	sbrs	r24, 4
    b252:	10 c0       	rjmp	.+32     	; 0xb274 <update_splash+0x70>
	{
		game.selection--;
    b254:	80 91 c4 0b 	lds	r24, 0x0BC4
    b258:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    b25a:	87 ff       	sbrs	r24, 7
    b25c:	13 c0       	rjmp	.+38     	; 0xb284 <update_splash+0x80>
    b25e:	10 92 c4 0b 	sts	0x0BC4, r1
		SFX_NAVIGATE;
    b262:	2f ef       	ldi	r18, 0xFF	; 255
    b264:	47 e1       	ldi	r20, 0x17	; 23
    b266:	67 e0       	ldi	r22, 0x07	; 7
    b268:	84 e0       	ldi	r24, 0x04	; 4
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    b26a:	df 91       	pop	r29
    b26c:	cf 91       	pop	r28
    b26e:	0f 91       	pop	r16
	// Update
	if (p1->pressed & BTN_UP)
	{
		game.selection--;
		if (game.selection < PVCPU) game.selection = PVCPU;
		SFX_NAVIGATE;
    b270:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <TriggerNote>
	}
	else if (p1->pressed & BTN_DOWN)
    b274:	85 ff       	sbrs	r24, 5
    b276:	09 c0       	rjmp	.+18     	; 0xb28a <update_splash+0x86>
	{
		game.selection++;
    b278:	80 91 c4 0b 	lds	r24, 0x0BC4
    b27c:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    b27e:	83 30       	cpi	r24, 0x03	; 3
    b280:	0c f0       	brlt	.+2      	; 0xb284 <update_splash+0x80>
    b282:	82 e0       	ldi	r24, 0x02	; 2
    b284:	80 93 c4 0b 	sts	0x0BC4, r24
    b288:	ec cf       	rjmp	.-40     	; 0xb262 <update_splash+0x5e>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    b28a:	90 ff       	sbrs	r25, 0
    b28c:	2c c0       	rjmp	.+88     	; 0xb2e6 <update_splash+0xe2>
    b28e:	80 91 c4 0b 	lds	r24, 0x0BC4
    b292:	82 30       	cpi	r24, 0x02	; 2
    b294:	a8 f4       	brcc	.+42     	; 0xb2c0 <update_splash+0xbc>
	{
		p1s.select_state = SELECTING;
    b296:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    b29a:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    b29e:	2f ef       	ldi	r18, 0xFF	; 255
    b2a0:	47 e1       	ldi	r20, 0x17	; 23
    b2a2:	67 e0       	ldi	r22, 0x07	; 7
    b2a4:	84 e0       	ldi	r24, 0x04	; 4
    b2a6:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
		fade_through();
    b2aa:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
		load_eeprom(&handles);
    b2ae:	84 e2       	ldi	r24, 0x24	; 36
    b2b0:	91 e0       	ldi	r25, 0x01	; 1
    b2b2:	0e 94 11 49 	call	0x9222	; 0x9222 <load_eeprom>
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    b2b6:	df 91       	pop	r29
    b2b8:	cf 91       	pop	r28
    b2ba:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    b2bc:	0c 94 70 58 	jmp	0xb0e0	; 0xb0e0 <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    b2c0:	82 30       	cpi	r24, 0x02	; 2
    b2c2:	89 f4       	brne	.+34     	; 0xb2e6 <update_splash+0xe2>
	{
		SFX_NAVIGATE;
    b2c4:	2f ef       	ldi	r18, 0xFF	; 255
    b2c6:	47 e1       	ldi	r20, 0x17	; 23
    b2c8:	67 e0       	ldi	r22, 0x07	; 7
    b2ca:	84 e0       	ldi	r24, 0x04	; 4
    b2cc:	0e 94 bb 3a 	call	0x7576	; 0x7576 <TriggerNote>
		fade_through();
    b2d0:	0e 94 23 49 	call	0x9246	; 0x9246 <fade_through>
		load_eeprom(&scores);
    b2d4:	84 e0       	ldi	r24, 0x04	; 4
    b2d6:	91 e0       	ldi	r25, 0x01	; 1
    b2d8:	0e 94 11 49 	call	0x9222	; 0x9222 <load_eeprom>
		load_tank_rank();
		return;
	}
}
    b2dc:	df 91       	pop	r29
    b2de:	cf 91       	pop	r28
    b2e0:	0f 91       	pop	r16
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    b2e2:	0c 94 7e 53 	jmp	0xa6fc	; 0xa6fc <load_tank_rank>
		return;
	}
}
    b2e6:	df 91       	pop	r29
    b2e8:	cf 91       	pop	r28
    b2ea:	0f 91       	pop	r16
    b2ec:	08 95       	ret

0000b2ee <update_handle_select>:
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    b2ee:	0f 93       	push	r16
    b2f0:	1f 93       	push	r17
    b2f2:	cf 93       	push	r28
    b2f4:	df 93       	push	r29
    b2f6:	8c 01       	movw	r16, r24
    b2f8:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    b2fa:	28 e0       	ldi	r18, 0x08	; 8
    b2fc:	42 e0       	ldi	r20, 0x02	; 2
    b2fe:	bc 01       	movw	r22, r24
    b300:	8a e2       	ldi	r24, 0x2A	; 42
    b302:	9b e0       	ldi	r25, 0x0B	; 11
    b304:	0e 94 b3 57 	call	0xaf66	; 0xaf66 <_handle_select_render_helper>
	if (game.selection == PVP)
    b308:	80 91 c4 0b 	lds	r24, 0x0BC4
    b30c:	81 30       	cpi	r24, 0x01	; 1
    b30e:	39 f4       	brne	.+14     	; 0xb31e <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 10);
    b310:	2a e0       	ldi	r18, 0x0A	; 10
    b312:	43 e1       	ldi	r20, 0x13	; 19
    b314:	be 01       	movw	r22, r28
    b316:	84 e2       	ldi	r24, 0x24	; 36
    b318:	9b e0       	ldi	r25, 0x0B	; 11
    b31a:	0e 94 b3 57 	call	0xaf66	; 0xaf66 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    b31e:	4e ed       	ldi	r20, 0xDE	; 222
    b320:	5b e0       	ldi	r21, 0x0B	; 11
    b322:	b8 01       	movw	r22, r16
    b324:	8a e2       	ldi	r24, 0x2A	; 42
    b326:	9b e0       	ldi	r25, 0x0B	; 11
    b328:	0e 94 f3 56 	call	0xade6	; 0xade6 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    b32c:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    b330:	80 91 c4 0b 	lds	r24, 0x0BC4
    b334:	81 30       	cpi	r24, 0x01	; 1
    b336:	19 f0       	breq	.+6      	; 0xb33e <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    b338:	12 30       	cpi	r17, 0x02	; 2
    b33a:	69 f0       	breq	.+26     	; 0xb356 <update_handle_select+0x68>
    b33c:	21 c0       	rjmp	.+66     	; 0xb380 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    b33e:	41 e5       	ldi	r20, 0x51	; 81
    b340:	5f e0       	ldi	r21, 0x0F	; 15
    b342:	be 01       	movw	r22, r28
    b344:	84 e2       	ldi	r24, 0x24	; 36
    b346:	9b e0       	ldi	r25, 0x0B	; 11
    b348:	0e 94 f3 56 	call	0xade6	; 0xade6 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    b34c:	80 91 29 0b 	lds	r24, 0x0B29
    b350:	82 30       	cpi	r24, 0x02	; 2
    b352:	b1 f4       	brne	.+44     	; 0xb380 <update_handle_select+0x92>
    b354:	f1 cf       	rjmp	.-30     	; 0xb338 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    b356:	80 91 c4 0b 	lds	r24, 0x0BC4
    b35a:	81 11       	cpse	r24, r1
    b35c:	0a c0       	rjmp	.+20     	; 0xb372 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    b35e:	89 e0       	ldi	r24, 0x09	; 9
    b360:	80 93 5b 0f 	sts	0x0F5B, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    b364:	43 e0       	ldi	r20, 0x03	; 3
    b366:	61 e4       	ldi	r22, 0x41	; 65
    b368:	71 e0       	ldi	r23, 0x01	; 1
    b36a:	8c e5       	ldi	r24, 0x5C	; 92
    b36c:	9f e0       	ldi	r25, 0x0F	; 15
    b36e:	0e 94 76 46 	call	0x8cec	; 0x8cec <LBCopyChars>
		}
		level_transition(0);
    b372:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    b374:	df 91       	pop	r29
    b376:	cf 91       	pop	r28
    b378:	1f 91       	pop	r17
    b37a:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    b37c:	0c 94 18 53 	jmp	0xa630	; 0xa630 <level_transition>
	}
}
    b380:	df 91       	pop	r29
    b382:	cf 91       	pop	r28
    b384:	1f 91       	pop	r17
    b386:	0f 91       	pop	r16
    b388:	08 95       	ret

0000b38a <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    b38a:	87 e1       	ldi	r24, 0x17	; 23
    b38c:	93 e0       	ldi	r25, 0x03	; 3
    b38e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <InitMusicPlayer>
	SetMasterVolume(0xff);
    b392:	8f ef       	ldi	r24, 0xFF	; 255
    b394:	0e 94 06 3d 	call	0x7a0c	; 0x7a0c <SetMasterVolume>
	SetTileTable(tiles_data);
    b398:	8b eb       	ldi	r24, 0xBB	; 187
    b39a:	93 e4       	ldi	r25, 0x43	; 67
    b39c:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    b3a0:	8b eb       	ldi	r24, 0xBB	; 187
    b3a2:	97 e3       	ldi	r25, 0x37	; 55
    b3a4:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    b3a8:	8f e2       	ldi	r24, 0x2F	; 47
    b3aa:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    b3ae:	60 e0       	ldi	r22, 0x00	; 0
    b3b0:	83 e0       	ldi	r24, 0x03	; 3
    b3b2:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <FadeIn>
	ClearVram();
    b3b6:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <ClearVram>
	init_game_state();
    b3ba:	0e 94 de 48 	call	0x91bc	; 0x91bc <init_game_state>
	init_tile_animations(&tile_animations);
    b3be:	85 ec       	ldi	r24, 0xC5	; 197
    b3c0:	9b e0       	ldi	r25, 0x0B	; 11
    b3c2:	0e 94 e1 47 	call	0x8fc2	; 0x8fc2 <init_tile_animations>
	load_splash();
    b3c6:	0e 94 48 53 	call	0xa690	; 0xa690 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    b3ca:	81 e0       	ldi	r24, 0x01	; 1
    b3cc:	90 e0       	ldi	r25, 0x00	; 0
    b3ce:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    b3d2:	6b eb       	ldi	r22, 0xBB	; 187
    b3d4:	7b e0       	ldi	r23, 0x0B	; 11
    b3d6:	8c e5       	ldi	r24, 0x5C	; 92
    b3d8:	9c e0       	ldi	r25, 0x0C	; 12
    b3da:	0e 94 34 46 	call	0x8c68	; 0x8c68 <LBGetJoyPadState>
		switch (game.current_screen)
    b3de:	80 91 c1 0b 	lds	r24, 0x0BC1
    b3e2:	81 30       	cpi	r24, 0x01	; 1
    b3e4:	99 f0       	breq	.+38     	; 0xb40c <main+0x82>
    b3e6:	58 f0       	brcs	.+22     	; 0xb3fe <main+0x74>
    b3e8:	82 30       	cpi	r24, 0x02	; 2
    b3ea:	b9 f0       	breq	.+46     	; 0xb41a <main+0x90>
    b3ec:	83 30       	cpi	r24, 0x03	; 3
    b3ee:	69 f7       	brne	.-38     	; 0xb3ca <main+0x40>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				// p2 should be replaced by AI input for Player v CPU
				update_level(&p1, &p2);
    b3f0:	6b eb       	ldi	r22, 0xBB	; 187
    b3f2:	7b e0       	ldi	r23, 0x0B	; 11
    b3f4:	8c e5       	ldi	r24, 0x5C	; 92
    b3f6:	9c e0       	ldi	r25, 0x0C	; 12
    b3f8:	0e 94 51 56 	call	0xaca2	; 0xaca2 <update_level>
				break;
    b3fc:	e6 cf       	rjmp	.-52     	; 0xb3ca <main+0x40>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    b3fe:	6b eb       	ldi	r22, 0xBB	; 187
    b400:	7b e0       	ldi	r23, 0x0B	; 11
    b402:	8c e5       	ldi	r24, 0x5C	; 92
    b404:	9c e0       	ldi	r25, 0x0C	; 12
    b406:	0e 94 02 59 	call	0xb204	; 0xb204 <update_splash>
				break;
    b40a:	df cf       	rjmp	.-66     	; 0xb3ca <main+0x40>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    b40c:	6b eb       	ldi	r22, 0xBB	; 187
    b40e:	7b e0       	ldi	r23, 0x0B	; 11
    b410:	8c e5       	ldi	r24, 0x5C	; 92
    b412:	9c e0       	ldi	r25, 0x0C	; 12
    b414:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <update_tank_rank>
				break;
    b418:	d8 cf       	rjmp	.-80     	; 0xb3ca <main+0x40>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    b41a:	6b eb       	ldi	r22, 0xBB	; 187
    b41c:	7b e0       	ldi	r23, 0x0B	; 11
    b41e:	8c e5       	ldi	r24, 0x5C	; 92
    b420:	9c e0       	ldi	r25, 0x0C	; 12
    b422:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <update_handle_select>
				break;
    b426:	d1 cf       	rjmp	.-94     	; 0xb3ca <main+0x40>

0000b428 <__udivmodqi4>:
    b428:	99 1b       	sub	r25, r25
    b42a:	79 e0       	ldi	r23, 0x09	; 9
    b42c:	04 c0       	rjmp	.+8      	; 0xb436 <__udivmodqi4_ep>

0000b42e <__udivmodqi4_loop>:
    b42e:	99 1f       	adc	r25, r25
    b430:	96 17       	cp	r25, r22
    b432:	08 f0       	brcs	.+2      	; 0xb436 <__udivmodqi4_ep>
    b434:	96 1b       	sub	r25, r22

0000b436 <__udivmodqi4_ep>:
    b436:	88 1f       	adc	r24, r24
    b438:	7a 95       	dec	r23
    b43a:	c9 f7       	brne	.-14     	; 0xb42e <__udivmodqi4_loop>
    b43c:	80 95       	com	r24
    b43e:	08 95       	ret

0000b440 <__udivmodhi4>:
    b440:	aa 1b       	sub	r26, r26
    b442:	bb 1b       	sub	r27, r27
    b444:	51 e1       	ldi	r21, 0x11	; 17
    b446:	07 c0       	rjmp	.+14     	; 0xb456 <__udivmodhi4_ep>

0000b448 <__udivmodhi4_loop>:
    b448:	aa 1f       	adc	r26, r26
    b44a:	bb 1f       	adc	r27, r27
    b44c:	a6 17       	cp	r26, r22
    b44e:	b7 07       	cpc	r27, r23
    b450:	10 f0       	brcs	.+4      	; 0xb456 <__udivmodhi4_ep>
    b452:	a6 1b       	sub	r26, r22
    b454:	b7 0b       	sbc	r27, r23

0000b456 <__udivmodhi4_ep>:
    b456:	88 1f       	adc	r24, r24
    b458:	99 1f       	adc	r25, r25
    b45a:	5a 95       	dec	r21
    b45c:	a9 f7       	brne	.-22     	; 0xb448 <__udivmodhi4_loop>
    b45e:	80 95       	com	r24
    b460:	90 95       	com	r25
    b462:	bc 01       	movw	r22, r24
    b464:	cd 01       	movw	r24, r26
    b466:	08 95       	ret

0000b468 <__divmodhi4>:
    b468:	97 fb       	bst	r25, 7
    b46a:	07 2e       	mov	r0, r23
    b46c:	16 f4       	brtc	.+4      	; 0xb472 <__divmodhi4+0xa>
    b46e:	00 94       	com	r0
    b470:	07 d0       	rcall	.+14     	; 0xb480 <__divmodhi4_neg1>
    b472:	77 fd       	sbrc	r23, 7
    b474:	09 d0       	rcall	.+18     	; 0xb488 <__divmodhi4_neg2>
    b476:	0e 94 20 5a 	call	0xb440	; 0xb440 <__udivmodhi4>
    b47a:	07 fc       	sbrc	r0, 7
    b47c:	05 d0       	rcall	.+10     	; 0xb488 <__divmodhi4_neg2>
    b47e:	3e f4       	brtc	.+14     	; 0xb48e <__divmodhi4_exit>

0000b480 <__divmodhi4_neg1>:
    b480:	90 95       	com	r25
    b482:	81 95       	neg	r24
    b484:	9f 4f       	sbci	r25, 0xFF	; 255
    b486:	08 95       	ret

0000b488 <__divmodhi4_neg2>:
    b488:	70 95       	com	r23
    b48a:	61 95       	neg	r22
    b48c:	7f 4f       	sbci	r23, 0xFF	; 255

0000b48e <__divmodhi4_exit>:
    b48e:	08 95       	ret

0000b490 <__tablejump2__>:
    b490:	ee 0f       	add	r30, r30
    b492:	ff 1f       	adc	r31, r31

0000b494 <__tablejump__>:
    b494:	05 90       	lpm	r0, Z+
    b496:	f4 91       	lpm	r31, Z
    b498:	e0 2d       	mov	r30, r0
    b49a:	09 94       	ijmp

0000b49c <__subsf3>:
    b49c:	50 58       	subi	r21, 0x80	; 128

0000b49e <__addsf3>:
    b49e:	bb 27       	eor	r27, r27
    b4a0:	aa 27       	eor	r26, r26
    b4a2:	0e d0       	rcall	.+28     	; 0xb4c0 <__addsf3x>
    b4a4:	70 c1       	rjmp	.+736    	; 0xb786 <__fp_round>
    b4a6:	61 d1       	rcall	.+706    	; 0xb76a <__fp_pscA>
    b4a8:	30 f0       	brcs	.+12     	; 0xb4b6 <__addsf3+0x18>
    b4aa:	66 d1       	rcall	.+716    	; 0xb778 <__fp_pscB>
    b4ac:	20 f0       	brcs	.+8      	; 0xb4b6 <__addsf3+0x18>
    b4ae:	31 f4       	brne	.+12     	; 0xb4bc <__addsf3+0x1e>
    b4b0:	9f 3f       	cpi	r25, 0xFF	; 255
    b4b2:	11 f4       	brne	.+4      	; 0xb4b8 <__addsf3+0x1a>
    b4b4:	1e f4       	brtc	.+6      	; 0xb4bc <__addsf3+0x1e>
    b4b6:	56 c1       	rjmp	.+684    	; 0xb764 <__fp_nan>
    b4b8:	0e f4       	brtc	.+2      	; 0xb4bc <__addsf3+0x1e>
    b4ba:	e0 95       	com	r30
    b4bc:	e7 fb       	bst	r30, 7
    b4be:	4c c1       	rjmp	.+664    	; 0xb758 <__fp_inf>

0000b4c0 <__addsf3x>:
    b4c0:	e9 2f       	mov	r30, r25
    b4c2:	72 d1       	rcall	.+740    	; 0xb7a8 <__fp_split3>
    b4c4:	80 f3       	brcs	.-32     	; 0xb4a6 <__addsf3+0x8>
    b4c6:	ba 17       	cp	r27, r26
    b4c8:	62 07       	cpc	r22, r18
    b4ca:	73 07       	cpc	r23, r19
    b4cc:	84 07       	cpc	r24, r20
    b4ce:	95 07       	cpc	r25, r21
    b4d0:	18 f0       	brcs	.+6      	; 0xb4d8 <__addsf3x+0x18>
    b4d2:	71 f4       	brne	.+28     	; 0xb4f0 <__addsf3x+0x30>
    b4d4:	9e f5       	brtc	.+102    	; 0xb53c <__addsf3x+0x7c>
    b4d6:	8a c1       	rjmp	.+788    	; 0xb7ec <__fp_zero>
    b4d8:	0e f4       	brtc	.+2      	; 0xb4dc <__addsf3x+0x1c>
    b4da:	e0 95       	com	r30
    b4dc:	0b 2e       	mov	r0, r27
    b4de:	ba 2f       	mov	r27, r26
    b4e0:	a0 2d       	mov	r26, r0
    b4e2:	0b 01       	movw	r0, r22
    b4e4:	b9 01       	movw	r22, r18
    b4e6:	90 01       	movw	r18, r0
    b4e8:	0c 01       	movw	r0, r24
    b4ea:	ca 01       	movw	r24, r20
    b4ec:	a0 01       	movw	r20, r0
    b4ee:	11 24       	eor	r1, r1
    b4f0:	ff 27       	eor	r31, r31
    b4f2:	59 1b       	sub	r21, r25
    b4f4:	99 f0       	breq	.+38     	; 0xb51c <__addsf3x+0x5c>
    b4f6:	59 3f       	cpi	r21, 0xF9	; 249
    b4f8:	50 f4       	brcc	.+20     	; 0xb50e <__addsf3x+0x4e>
    b4fa:	50 3e       	cpi	r21, 0xE0	; 224
    b4fc:	68 f1       	brcs	.+90     	; 0xb558 <__addsf3x+0x98>
    b4fe:	1a 16       	cp	r1, r26
    b500:	f0 40       	sbci	r31, 0x00	; 0
    b502:	a2 2f       	mov	r26, r18
    b504:	23 2f       	mov	r18, r19
    b506:	34 2f       	mov	r19, r20
    b508:	44 27       	eor	r20, r20
    b50a:	58 5f       	subi	r21, 0xF8	; 248
    b50c:	f3 cf       	rjmp	.-26     	; 0xb4f4 <__addsf3x+0x34>
    b50e:	46 95       	lsr	r20
    b510:	37 95       	ror	r19
    b512:	27 95       	ror	r18
    b514:	a7 95       	ror	r26
    b516:	f0 40       	sbci	r31, 0x00	; 0
    b518:	53 95       	inc	r21
    b51a:	c9 f7       	brne	.-14     	; 0xb50e <__addsf3x+0x4e>
    b51c:	7e f4       	brtc	.+30     	; 0xb53c <__addsf3x+0x7c>
    b51e:	1f 16       	cp	r1, r31
    b520:	ba 0b       	sbc	r27, r26
    b522:	62 0b       	sbc	r22, r18
    b524:	73 0b       	sbc	r23, r19
    b526:	84 0b       	sbc	r24, r20
    b528:	ba f0       	brmi	.+46     	; 0xb558 <__addsf3x+0x98>
    b52a:	91 50       	subi	r25, 0x01	; 1
    b52c:	a1 f0       	breq	.+40     	; 0xb556 <__addsf3x+0x96>
    b52e:	ff 0f       	add	r31, r31
    b530:	bb 1f       	adc	r27, r27
    b532:	66 1f       	adc	r22, r22
    b534:	77 1f       	adc	r23, r23
    b536:	88 1f       	adc	r24, r24
    b538:	c2 f7       	brpl	.-16     	; 0xb52a <__addsf3x+0x6a>
    b53a:	0e c0       	rjmp	.+28     	; 0xb558 <__addsf3x+0x98>
    b53c:	ba 0f       	add	r27, r26
    b53e:	62 1f       	adc	r22, r18
    b540:	73 1f       	adc	r23, r19
    b542:	84 1f       	adc	r24, r20
    b544:	48 f4       	brcc	.+18     	; 0xb558 <__addsf3x+0x98>
    b546:	87 95       	ror	r24
    b548:	77 95       	ror	r23
    b54a:	67 95       	ror	r22
    b54c:	b7 95       	ror	r27
    b54e:	f7 95       	ror	r31
    b550:	9e 3f       	cpi	r25, 0xFE	; 254
    b552:	08 f0       	brcs	.+2      	; 0xb556 <__addsf3x+0x96>
    b554:	b3 cf       	rjmp	.-154    	; 0xb4bc <__addsf3+0x1e>
    b556:	93 95       	inc	r25
    b558:	88 0f       	add	r24, r24
    b55a:	08 f0       	brcs	.+2      	; 0xb55e <__addsf3x+0x9e>
    b55c:	99 27       	eor	r25, r25
    b55e:	ee 0f       	add	r30, r30
    b560:	97 95       	ror	r25
    b562:	87 95       	ror	r24
    b564:	08 95       	ret

0000b566 <__cmpsf2>:
    b566:	d4 d0       	rcall	.+424    	; 0xb710 <__fp_cmp>
    b568:	08 f4       	brcc	.+2      	; 0xb56c <__cmpsf2+0x6>
    b56a:	81 e0       	ldi	r24, 0x01	; 1
    b56c:	08 95       	ret

0000b56e <__divsf3>:
    b56e:	0c d0       	rcall	.+24     	; 0xb588 <__divsf3x>
    b570:	0a c1       	rjmp	.+532    	; 0xb786 <__fp_round>
    b572:	02 d1       	rcall	.+516    	; 0xb778 <__fp_pscB>
    b574:	40 f0       	brcs	.+16     	; 0xb586 <__divsf3+0x18>
    b576:	f9 d0       	rcall	.+498    	; 0xb76a <__fp_pscA>
    b578:	30 f0       	brcs	.+12     	; 0xb586 <__divsf3+0x18>
    b57a:	21 f4       	brne	.+8      	; 0xb584 <__divsf3+0x16>
    b57c:	5f 3f       	cpi	r21, 0xFF	; 255
    b57e:	19 f0       	breq	.+6      	; 0xb586 <__divsf3+0x18>
    b580:	eb c0       	rjmp	.+470    	; 0xb758 <__fp_inf>
    b582:	51 11       	cpse	r21, r1
    b584:	34 c1       	rjmp	.+616    	; 0xb7ee <__fp_szero>
    b586:	ee c0       	rjmp	.+476    	; 0xb764 <__fp_nan>

0000b588 <__divsf3x>:
    b588:	0f d1       	rcall	.+542    	; 0xb7a8 <__fp_split3>
    b58a:	98 f3       	brcs	.-26     	; 0xb572 <__divsf3+0x4>

0000b58c <__divsf3_pse>:
    b58c:	99 23       	and	r25, r25
    b58e:	c9 f3       	breq	.-14     	; 0xb582 <__divsf3+0x14>
    b590:	55 23       	and	r21, r21
    b592:	b1 f3       	breq	.-20     	; 0xb580 <__divsf3+0x12>
    b594:	95 1b       	sub	r25, r21
    b596:	55 0b       	sbc	r21, r21
    b598:	bb 27       	eor	r27, r27
    b59a:	aa 27       	eor	r26, r26
    b59c:	62 17       	cp	r22, r18
    b59e:	73 07       	cpc	r23, r19
    b5a0:	84 07       	cpc	r24, r20
    b5a2:	38 f0       	brcs	.+14     	; 0xb5b2 <__divsf3_pse+0x26>
    b5a4:	9f 5f       	subi	r25, 0xFF	; 255
    b5a6:	5f 4f       	sbci	r21, 0xFF	; 255
    b5a8:	22 0f       	add	r18, r18
    b5aa:	33 1f       	adc	r19, r19
    b5ac:	44 1f       	adc	r20, r20
    b5ae:	aa 1f       	adc	r26, r26
    b5b0:	a9 f3       	breq	.-22     	; 0xb59c <__divsf3_pse+0x10>
    b5b2:	33 d0       	rcall	.+102    	; 0xb61a <__divsf3_pse+0x8e>
    b5b4:	0e 2e       	mov	r0, r30
    b5b6:	3a f0       	brmi	.+14     	; 0xb5c6 <__divsf3_pse+0x3a>
    b5b8:	e0 e8       	ldi	r30, 0x80	; 128
    b5ba:	30 d0       	rcall	.+96     	; 0xb61c <__divsf3_pse+0x90>
    b5bc:	91 50       	subi	r25, 0x01	; 1
    b5be:	50 40       	sbci	r21, 0x00	; 0
    b5c0:	e6 95       	lsr	r30
    b5c2:	00 1c       	adc	r0, r0
    b5c4:	ca f7       	brpl	.-14     	; 0xb5b8 <__divsf3_pse+0x2c>
    b5c6:	29 d0       	rcall	.+82     	; 0xb61a <__divsf3_pse+0x8e>
    b5c8:	fe 2f       	mov	r31, r30
    b5ca:	27 d0       	rcall	.+78     	; 0xb61a <__divsf3_pse+0x8e>
    b5cc:	66 0f       	add	r22, r22
    b5ce:	77 1f       	adc	r23, r23
    b5d0:	88 1f       	adc	r24, r24
    b5d2:	bb 1f       	adc	r27, r27
    b5d4:	26 17       	cp	r18, r22
    b5d6:	37 07       	cpc	r19, r23
    b5d8:	48 07       	cpc	r20, r24
    b5da:	ab 07       	cpc	r26, r27
    b5dc:	b0 e8       	ldi	r27, 0x80	; 128
    b5de:	09 f0       	breq	.+2      	; 0xb5e2 <__divsf3_pse+0x56>
    b5e0:	bb 0b       	sbc	r27, r27
    b5e2:	80 2d       	mov	r24, r0
    b5e4:	bf 01       	movw	r22, r30
    b5e6:	ff 27       	eor	r31, r31
    b5e8:	93 58       	subi	r25, 0x83	; 131
    b5ea:	5f 4f       	sbci	r21, 0xFF	; 255
    b5ec:	2a f0       	brmi	.+10     	; 0xb5f8 <__divsf3_pse+0x6c>
    b5ee:	9e 3f       	cpi	r25, 0xFE	; 254
    b5f0:	51 05       	cpc	r21, r1
    b5f2:	68 f0       	brcs	.+26     	; 0xb60e <__divsf3_pse+0x82>
    b5f4:	b1 c0       	rjmp	.+354    	; 0xb758 <__fp_inf>
    b5f6:	fb c0       	rjmp	.+502    	; 0xb7ee <__fp_szero>
    b5f8:	5f 3f       	cpi	r21, 0xFF	; 255
    b5fa:	ec f3       	brlt	.-6      	; 0xb5f6 <__divsf3_pse+0x6a>
    b5fc:	98 3e       	cpi	r25, 0xE8	; 232
    b5fe:	dc f3       	brlt	.-10     	; 0xb5f6 <__divsf3_pse+0x6a>
    b600:	86 95       	lsr	r24
    b602:	77 95       	ror	r23
    b604:	67 95       	ror	r22
    b606:	b7 95       	ror	r27
    b608:	f7 95       	ror	r31
    b60a:	9f 5f       	subi	r25, 0xFF	; 255
    b60c:	c9 f7       	brne	.-14     	; 0xb600 <__divsf3_pse+0x74>
    b60e:	88 0f       	add	r24, r24
    b610:	91 1d       	adc	r25, r1
    b612:	96 95       	lsr	r25
    b614:	87 95       	ror	r24
    b616:	97 f9       	bld	r25, 7
    b618:	08 95       	ret
    b61a:	e1 e0       	ldi	r30, 0x01	; 1
    b61c:	66 0f       	add	r22, r22
    b61e:	77 1f       	adc	r23, r23
    b620:	88 1f       	adc	r24, r24
    b622:	bb 1f       	adc	r27, r27
    b624:	62 17       	cp	r22, r18
    b626:	73 07       	cpc	r23, r19
    b628:	84 07       	cpc	r24, r20
    b62a:	ba 07       	cpc	r27, r26
    b62c:	20 f0       	brcs	.+8      	; 0xb636 <__divsf3_pse+0xaa>
    b62e:	62 1b       	sub	r22, r18
    b630:	73 0b       	sbc	r23, r19
    b632:	84 0b       	sbc	r24, r20
    b634:	ba 0b       	sbc	r27, r26
    b636:	ee 1f       	adc	r30, r30
    b638:	88 f7       	brcc	.-30     	; 0xb61c <__divsf3_pse+0x90>
    b63a:	e0 95       	com	r30
    b63c:	08 95       	ret

0000b63e <__fixunssfsi>:
    b63e:	bc d0       	rcall	.+376    	; 0xb7b8 <__fp_splitA>
    b640:	88 f0       	brcs	.+34     	; 0xb664 <__fixunssfsi+0x26>
    b642:	9f 57       	subi	r25, 0x7F	; 127
    b644:	90 f0       	brcs	.+36     	; 0xb66a <__fixunssfsi+0x2c>
    b646:	b9 2f       	mov	r27, r25
    b648:	99 27       	eor	r25, r25
    b64a:	b7 51       	subi	r27, 0x17	; 23
    b64c:	a0 f0       	brcs	.+40     	; 0xb676 <__fixunssfsi+0x38>
    b64e:	d1 f0       	breq	.+52     	; 0xb684 <__fixunssfsi+0x46>
    b650:	66 0f       	add	r22, r22
    b652:	77 1f       	adc	r23, r23
    b654:	88 1f       	adc	r24, r24
    b656:	99 1f       	adc	r25, r25
    b658:	1a f0       	brmi	.+6      	; 0xb660 <__fixunssfsi+0x22>
    b65a:	ba 95       	dec	r27
    b65c:	c9 f7       	brne	.-14     	; 0xb650 <__fixunssfsi+0x12>
    b65e:	12 c0       	rjmp	.+36     	; 0xb684 <__fixunssfsi+0x46>
    b660:	b1 30       	cpi	r27, 0x01	; 1
    b662:	81 f0       	breq	.+32     	; 0xb684 <__fixunssfsi+0x46>
    b664:	c3 d0       	rcall	.+390    	; 0xb7ec <__fp_zero>
    b666:	b1 e0       	ldi	r27, 0x01	; 1
    b668:	08 95       	ret
    b66a:	c0 c0       	rjmp	.+384    	; 0xb7ec <__fp_zero>
    b66c:	67 2f       	mov	r22, r23
    b66e:	78 2f       	mov	r23, r24
    b670:	88 27       	eor	r24, r24
    b672:	b8 5f       	subi	r27, 0xF8	; 248
    b674:	39 f0       	breq	.+14     	; 0xb684 <__fixunssfsi+0x46>
    b676:	b9 3f       	cpi	r27, 0xF9	; 249
    b678:	cc f3       	brlt	.-14     	; 0xb66c <__fixunssfsi+0x2e>
    b67a:	86 95       	lsr	r24
    b67c:	77 95       	ror	r23
    b67e:	67 95       	ror	r22
    b680:	b3 95       	inc	r27
    b682:	d9 f7       	brne	.-10     	; 0xb67a <__fixunssfsi+0x3c>
    b684:	3e f4       	brtc	.+14     	; 0xb694 <__fixunssfsi+0x56>
    b686:	90 95       	com	r25
    b688:	80 95       	com	r24
    b68a:	70 95       	com	r23
    b68c:	61 95       	neg	r22
    b68e:	7f 4f       	sbci	r23, 0xFF	; 255
    b690:	8f 4f       	sbci	r24, 0xFF	; 255
    b692:	9f 4f       	sbci	r25, 0xFF	; 255
    b694:	08 95       	ret

0000b696 <__floatunsisf>:
    b696:	e8 94       	clt
    b698:	09 c0       	rjmp	.+18     	; 0xb6ac <__floatsisf+0x12>

0000b69a <__floatsisf>:
    b69a:	97 fb       	bst	r25, 7
    b69c:	3e f4       	brtc	.+14     	; 0xb6ac <__floatsisf+0x12>
    b69e:	90 95       	com	r25
    b6a0:	80 95       	com	r24
    b6a2:	70 95       	com	r23
    b6a4:	61 95       	neg	r22
    b6a6:	7f 4f       	sbci	r23, 0xFF	; 255
    b6a8:	8f 4f       	sbci	r24, 0xFF	; 255
    b6aa:	9f 4f       	sbci	r25, 0xFF	; 255
    b6ac:	99 23       	and	r25, r25
    b6ae:	a9 f0       	breq	.+42     	; 0xb6da <__floatsisf+0x40>
    b6b0:	f9 2f       	mov	r31, r25
    b6b2:	96 e9       	ldi	r25, 0x96	; 150
    b6b4:	bb 27       	eor	r27, r27
    b6b6:	93 95       	inc	r25
    b6b8:	f6 95       	lsr	r31
    b6ba:	87 95       	ror	r24
    b6bc:	77 95       	ror	r23
    b6be:	67 95       	ror	r22
    b6c0:	b7 95       	ror	r27
    b6c2:	f1 11       	cpse	r31, r1
    b6c4:	f8 cf       	rjmp	.-16     	; 0xb6b6 <__floatsisf+0x1c>
    b6c6:	fa f4       	brpl	.+62     	; 0xb706 <__floatsisf+0x6c>
    b6c8:	bb 0f       	add	r27, r27
    b6ca:	11 f4       	brne	.+4      	; 0xb6d0 <__floatsisf+0x36>
    b6cc:	60 ff       	sbrs	r22, 0
    b6ce:	1b c0       	rjmp	.+54     	; 0xb706 <__floatsisf+0x6c>
    b6d0:	6f 5f       	subi	r22, 0xFF	; 255
    b6d2:	7f 4f       	sbci	r23, 0xFF	; 255
    b6d4:	8f 4f       	sbci	r24, 0xFF	; 255
    b6d6:	9f 4f       	sbci	r25, 0xFF	; 255
    b6d8:	16 c0       	rjmp	.+44     	; 0xb706 <__floatsisf+0x6c>
    b6da:	88 23       	and	r24, r24
    b6dc:	11 f0       	breq	.+4      	; 0xb6e2 <__floatsisf+0x48>
    b6de:	96 e9       	ldi	r25, 0x96	; 150
    b6e0:	11 c0       	rjmp	.+34     	; 0xb704 <__floatsisf+0x6a>
    b6e2:	77 23       	and	r23, r23
    b6e4:	21 f0       	breq	.+8      	; 0xb6ee <__floatsisf+0x54>
    b6e6:	9e e8       	ldi	r25, 0x8E	; 142
    b6e8:	87 2f       	mov	r24, r23
    b6ea:	76 2f       	mov	r23, r22
    b6ec:	05 c0       	rjmp	.+10     	; 0xb6f8 <__floatsisf+0x5e>
    b6ee:	66 23       	and	r22, r22
    b6f0:	71 f0       	breq	.+28     	; 0xb70e <__floatsisf+0x74>
    b6f2:	96 e8       	ldi	r25, 0x86	; 134
    b6f4:	86 2f       	mov	r24, r22
    b6f6:	70 e0       	ldi	r23, 0x00	; 0
    b6f8:	60 e0       	ldi	r22, 0x00	; 0
    b6fa:	2a f0       	brmi	.+10     	; 0xb706 <__floatsisf+0x6c>
    b6fc:	9a 95       	dec	r25
    b6fe:	66 0f       	add	r22, r22
    b700:	77 1f       	adc	r23, r23
    b702:	88 1f       	adc	r24, r24
    b704:	da f7       	brpl	.-10     	; 0xb6fc <__floatsisf+0x62>
    b706:	88 0f       	add	r24, r24
    b708:	96 95       	lsr	r25
    b70a:	87 95       	ror	r24
    b70c:	97 f9       	bld	r25, 7
    b70e:	08 95       	ret

0000b710 <__fp_cmp>:
    b710:	99 0f       	add	r25, r25
    b712:	00 08       	sbc	r0, r0
    b714:	55 0f       	add	r21, r21
    b716:	aa 0b       	sbc	r26, r26
    b718:	e0 e8       	ldi	r30, 0x80	; 128
    b71a:	fe ef       	ldi	r31, 0xFE	; 254
    b71c:	16 16       	cp	r1, r22
    b71e:	17 06       	cpc	r1, r23
    b720:	e8 07       	cpc	r30, r24
    b722:	f9 07       	cpc	r31, r25
    b724:	c0 f0       	brcs	.+48     	; 0xb756 <__fp_cmp+0x46>
    b726:	12 16       	cp	r1, r18
    b728:	13 06       	cpc	r1, r19
    b72a:	e4 07       	cpc	r30, r20
    b72c:	f5 07       	cpc	r31, r21
    b72e:	98 f0       	brcs	.+38     	; 0xb756 <__fp_cmp+0x46>
    b730:	62 1b       	sub	r22, r18
    b732:	73 0b       	sbc	r23, r19
    b734:	84 0b       	sbc	r24, r20
    b736:	95 0b       	sbc	r25, r21
    b738:	39 f4       	brne	.+14     	; 0xb748 <__fp_cmp+0x38>
    b73a:	0a 26       	eor	r0, r26
    b73c:	61 f0       	breq	.+24     	; 0xb756 <__fp_cmp+0x46>
    b73e:	23 2b       	or	r18, r19
    b740:	24 2b       	or	r18, r20
    b742:	25 2b       	or	r18, r21
    b744:	21 f4       	brne	.+8      	; 0xb74e <__fp_cmp+0x3e>
    b746:	08 95       	ret
    b748:	0a 26       	eor	r0, r26
    b74a:	09 f4       	brne	.+2      	; 0xb74e <__fp_cmp+0x3e>
    b74c:	a1 40       	sbci	r26, 0x01	; 1
    b74e:	a6 95       	lsr	r26
    b750:	8f ef       	ldi	r24, 0xFF	; 255
    b752:	81 1d       	adc	r24, r1
    b754:	81 1d       	adc	r24, r1
    b756:	08 95       	ret

0000b758 <__fp_inf>:
    b758:	97 f9       	bld	r25, 7
    b75a:	9f 67       	ori	r25, 0x7F	; 127
    b75c:	80 e8       	ldi	r24, 0x80	; 128
    b75e:	70 e0       	ldi	r23, 0x00	; 0
    b760:	60 e0       	ldi	r22, 0x00	; 0
    b762:	08 95       	ret

0000b764 <__fp_nan>:
    b764:	9f ef       	ldi	r25, 0xFF	; 255
    b766:	80 ec       	ldi	r24, 0xC0	; 192
    b768:	08 95       	ret

0000b76a <__fp_pscA>:
    b76a:	00 24       	eor	r0, r0
    b76c:	0a 94       	dec	r0
    b76e:	16 16       	cp	r1, r22
    b770:	17 06       	cpc	r1, r23
    b772:	18 06       	cpc	r1, r24
    b774:	09 06       	cpc	r0, r25
    b776:	08 95       	ret

0000b778 <__fp_pscB>:
    b778:	00 24       	eor	r0, r0
    b77a:	0a 94       	dec	r0
    b77c:	12 16       	cp	r1, r18
    b77e:	13 06       	cpc	r1, r19
    b780:	14 06       	cpc	r1, r20
    b782:	05 06       	cpc	r0, r21
    b784:	08 95       	ret

0000b786 <__fp_round>:
    b786:	09 2e       	mov	r0, r25
    b788:	03 94       	inc	r0
    b78a:	00 0c       	add	r0, r0
    b78c:	11 f4       	brne	.+4      	; 0xb792 <__fp_round+0xc>
    b78e:	88 23       	and	r24, r24
    b790:	52 f0       	brmi	.+20     	; 0xb7a6 <__fp_round+0x20>
    b792:	bb 0f       	add	r27, r27
    b794:	40 f4       	brcc	.+16     	; 0xb7a6 <__fp_round+0x20>
    b796:	bf 2b       	or	r27, r31
    b798:	11 f4       	brne	.+4      	; 0xb79e <__fp_round+0x18>
    b79a:	60 ff       	sbrs	r22, 0
    b79c:	04 c0       	rjmp	.+8      	; 0xb7a6 <__fp_round+0x20>
    b79e:	6f 5f       	subi	r22, 0xFF	; 255
    b7a0:	7f 4f       	sbci	r23, 0xFF	; 255
    b7a2:	8f 4f       	sbci	r24, 0xFF	; 255
    b7a4:	9f 4f       	sbci	r25, 0xFF	; 255
    b7a6:	08 95       	ret

0000b7a8 <__fp_split3>:
    b7a8:	57 fd       	sbrc	r21, 7
    b7aa:	90 58       	subi	r25, 0x80	; 128
    b7ac:	44 0f       	add	r20, r20
    b7ae:	55 1f       	adc	r21, r21
    b7b0:	59 f0       	breq	.+22     	; 0xb7c8 <__fp_splitA+0x10>
    b7b2:	5f 3f       	cpi	r21, 0xFF	; 255
    b7b4:	71 f0       	breq	.+28     	; 0xb7d2 <__fp_splitA+0x1a>
    b7b6:	47 95       	ror	r20

0000b7b8 <__fp_splitA>:
    b7b8:	88 0f       	add	r24, r24
    b7ba:	97 fb       	bst	r25, 7
    b7bc:	99 1f       	adc	r25, r25
    b7be:	61 f0       	breq	.+24     	; 0xb7d8 <__fp_splitA+0x20>
    b7c0:	9f 3f       	cpi	r25, 0xFF	; 255
    b7c2:	79 f0       	breq	.+30     	; 0xb7e2 <__fp_splitA+0x2a>
    b7c4:	87 95       	ror	r24
    b7c6:	08 95       	ret
    b7c8:	12 16       	cp	r1, r18
    b7ca:	13 06       	cpc	r1, r19
    b7cc:	14 06       	cpc	r1, r20
    b7ce:	55 1f       	adc	r21, r21
    b7d0:	f2 cf       	rjmp	.-28     	; 0xb7b6 <__fp_split3+0xe>
    b7d2:	46 95       	lsr	r20
    b7d4:	f1 df       	rcall	.-30     	; 0xb7b8 <__fp_splitA>
    b7d6:	08 c0       	rjmp	.+16     	; 0xb7e8 <__fp_splitA+0x30>
    b7d8:	16 16       	cp	r1, r22
    b7da:	17 06       	cpc	r1, r23
    b7dc:	18 06       	cpc	r1, r24
    b7de:	99 1f       	adc	r25, r25
    b7e0:	f1 cf       	rjmp	.-30     	; 0xb7c4 <__fp_splitA+0xc>
    b7e2:	86 95       	lsr	r24
    b7e4:	71 05       	cpc	r23, r1
    b7e6:	61 05       	cpc	r22, r1
    b7e8:	08 94       	sec
    b7ea:	08 95       	ret

0000b7ec <__fp_zero>:
    b7ec:	e8 94       	clt

0000b7ee <__fp_szero>:
    b7ee:	bb 27       	eor	r27, r27
    b7f0:	66 27       	eor	r22, r22
    b7f2:	77 27       	eor	r23, r23
    b7f4:	cb 01       	movw	r24, r22
    b7f6:	97 f9       	bld	r25, 7
    b7f8:	08 95       	ret

0000b7fa <__gesf2>:
    b7fa:	8a df       	rcall	.-236    	; 0xb710 <__fp_cmp>
    b7fc:	08 f4       	brcc	.+2      	; 0xb800 <__gesf2+0x6>
    b7fe:	8f ef       	ldi	r24, 0xFF	; 255
    b800:	08 95       	ret

0000b802 <__mulsf3>:
    b802:	0b d0       	rcall	.+22     	; 0xb81a <__mulsf3x>
    b804:	c0 cf       	rjmp	.-128    	; 0xb786 <__fp_round>
    b806:	b1 df       	rcall	.-158    	; 0xb76a <__fp_pscA>
    b808:	28 f0       	brcs	.+10     	; 0xb814 <__mulsf3+0x12>
    b80a:	b6 df       	rcall	.-148    	; 0xb778 <__fp_pscB>
    b80c:	18 f0       	brcs	.+6      	; 0xb814 <__mulsf3+0x12>
    b80e:	95 23       	and	r25, r21
    b810:	09 f0       	breq	.+2      	; 0xb814 <__mulsf3+0x12>
    b812:	a2 cf       	rjmp	.-188    	; 0xb758 <__fp_inf>
    b814:	a7 cf       	rjmp	.-178    	; 0xb764 <__fp_nan>
    b816:	11 24       	eor	r1, r1
    b818:	ea cf       	rjmp	.-44     	; 0xb7ee <__fp_szero>

0000b81a <__mulsf3x>:
    b81a:	c6 df       	rcall	.-116    	; 0xb7a8 <__fp_split3>
    b81c:	a0 f3       	brcs	.-24     	; 0xb806 <__mulsf3+0x4>

0000b81e <__mulsf3_pse>:
    b81e:	95 9f       	mul	r25, r21
    b820:	d1 f3       	breq	.-12     	; 0xb816 <__mulsf3+0x14>
    b822:	95 0f       	add	r25, r21
    b824:	50 e0       	ldi	r21, 0x00	; 0
    b826:	55 1f       	adc	r21, r21
    b828:	62 9f       	mul	r22, r18
    b82a:	f0 01       	movw	r30, r0
    b82c:	72 9f       	mul	r23, r18
    b82e:	bb 27       	eor	r27, r27
    b830:	f0 0d       	add	r31, r0
    b832:	b1 1d       	adc	r27, r1
    b834:	63 9f       	mul	r22, r19
    b836:	aa 27       	eor	r26, r26
    b838:	f0 0d       	add	r31, r0
    b83a:	b1 1d       	adc	r27, r1
    b83c:	aa 1f       	adc	r26, r26
    b83e:	64 9f       	mul	r22, r20
    b840:	66 27       	eor	r22, r22
    b842:	b0 0d       	add	r27, r0
    b844:	a1 1d       	adc	r26, r1
    b846:	66 1f       	adc	r22, r22
    b848:	82 9f       	mul	r24, r18
    b84a:	22 27       	eor	r18, r18
    b84c:	b0 0d       	add	r27, r0
    b84e:	a1 1d       	adc	r26, r1
    b850:	62 1f       	adc	r22, r18
    b852:	73 9f       	mul	r23, r19
    b854:	b0 0d       	add	r27, r0
    b856:	a1 1d       	adc	r26, r1
    b858:	62 1f       	adc	r22, r18
    b85a:	83 9f       	mul	r24, r19
    b85c:	a0 0d       	add	r26, r0
    b85e:	61 1d       	adc	r22, r1
    b860:	22 1f       	adc	r18, r18
    b862:	74 9f       	mul	r23, r20
    b864:	33 27       	eor	r19, r19
    b866:	a0 0d       	add	r26, r0
    b868:	61 1d       	adc	r22, r1
    b86a:	23 1f       	adc	r18, r19
    b86c:	84 9f       	mul	r24, r20
    b86e:	60 0d       	add	r22, r0
    b870:	21 1d       	adc	r18, r1
    b872:	82 2f       	mov	r24, r18
    b874:	76 2f       	mov	r23, r22
    b876:	6a 2f       	mov	r22, r26
    b878:	11 24       	eor	r1, r1
    b87a:	9f 57       	subi	r25, 0x7F	; 127
    b87c:	50 40       	sbci	r21, 0x00	; 0
    b87e:	8a f0       	brmi	.+34     	; 0xb8a2 <__mulsf3_pse+0x84>
    b880:	e1 f0       	breq	.+56     	; 0xb8ba <__mulsf3_pse+0x9c>
    b882:	88 23       	and	r24, r24
    b884:	4a f0       	brmi	.+18     	; 0xb898 <__mulsf3_pse+0x7a>
    b886:	ee 0f       	add	r30, r30
    b888:	ff 1f       	adc	r31, r31
    b88a:	bb 1f       	adc	r27, r27
    b88c:	66 1f       	adc	r22, r22
    b88e:	77 1f       	adc	r23, r23
    b890:	88 1f       	adc	r24, r24
    b892:	91 50       	subi	r25, 0x01	; 1
    b894:	50 40       	sbci	r21, 0x00	; 0
    b896:	a9 f7       	brne	.-22     	; 0xb882 <__mulsf3_pse+0x64>
    b898:	9e 3f       	cpi	r25, 0xFE	; 254
    b89a:	51 05       	cpc	r21, r1
    b89c:	70 f0       	brcs	.+28     	; 0xb8ba <__mulsf3_pse+0x9c>
    b89e:	5c cf       	rjmp	.-328    	; 0xb758 <__fp_inf>
    b8a0:	a6 cf       	rjmp	.-180    	; 0xb7ee <__fp_szero>
    b8a2:	5f 3f       	cpi	r21, 0xFF	; 255
    b8a4:	ec f3       	brlt	.-6      	; 0xb8a0 <__mulsf3_pse+0x82>
    b8a6:	98 3e       	cpi	r25, 0xE8	; 232
    b8a8:	dc f3       	brlt	.-10     	; 0xb8a0 <__mulsf3_pse+0x82>
    b8aa:	86 95       	lsr	r24
    b8ac:	77 95       	ror	r23
    b8ae:	67 95       	ror	r22
    b8b0:	b7 95       	ror	r27
    b8b2:	f7 95       	ror	r31
    b8b4:	e7 95       	ror	r30
    b8b6:	9f 5f       	subi	r25, 0xFF	; 255
    b8b8:	c1 f7       	brne	.-16     	; 0xb8aa <__mulsf3_pse+0x8c>
    b8ba:	fe 2b       	or	r31, r30
    b8bc:	88 0f       	add	r24, r24
    b8be:	91 1d       	adc	r25, r1
    b8c0:	96 95       	lsr	r25
    b8c2:	87 95       	ror	r24
    b8c4:	97 f9       	bld	r25, 7
    b8c6:	08 95       	ret

0000b8c8 <_exit>:
    b8c8:	f8 94       	cli

0000b8ca <__stop_program>:
    b8ca:	ff cf       	rjmp	.-2      	; 0xb8ca <__stop_program>
