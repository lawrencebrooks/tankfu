
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000e82a  0000e92a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e82a  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ecb  00800154  00800154  0000e994  2**5
                  ALLOC
  3 .stab         000008c4  00000000  00000000  0000e980  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002ff  00000000  00000000  0000f244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000f543  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000810  00000000  00000000  0000f558  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c436  00000000  00000000  0000fd68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001702  00000000  00000000  0001c19e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000029d3  00000000  00000000  0001d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000019ac  00000000  00000000  00020274  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000023a9  00000000  00000000  00021c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ac4d  00000000  00000000  00023fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000970  00000000  00000000  0002ec18  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 35 	jmp	0x6b5e	; 0x6b5e <__ctors_end>
       4:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
       8:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
       c:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      10:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      14:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      18:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      1c:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      20:	0c 94 c2 3a 	jmp	0x7584	; 0x7584 <__vector_8>
      24:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      28:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      2c:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      30:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      34:	0c 94 88 38 	jmp	0x7110	; 0x7110 <__vector_13>
      38:	0c 94 c7 38 	jmp	0x718e	; 0x718e <__vector_14>
      3c:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      40:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      44:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      48:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      4c:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      50:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      54:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      58:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      5c:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      60:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      64:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      68:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>
      6c:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	a6 3c a9 3c 05 3d 09 3d 10 3d b1 3c b6 3c bb 3c     .<.<.=.=.=.<.<.<
      ce:	18 3d be 3c c1 3c c4 3c ff 3c 02 3d 28 3d           .=.<.<.<.<.=(=

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <__c.3016>:
      e8:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

000000f5 <__c.3018>:
      f5:	4f 4b 0d 0a 0d 0a 3e 00                             OK....>.

000000fd <__c.3012>:
      fd:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

0000010c <__c.3014>:
     10c:	4f 4b 0d 0a 00                                      OK...

00000111 <__c.3008>:
     111:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     121:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 31 22 2c     ","192.168.4.1",
     131:	32 32 33 33 2c 31 30 30 31 0d 0a 00                 2233,1001...

0000013d <__c.3010>:
     13d:	4f 4b 0d 0a 00                                      OK...

00000142 <__c.3004>:
     142:	41 54 2b 43 49 50 53 54 41 5f 43 55 52 3d 22 31     AT+CIPSTA_CUR="1
     152:	39 32 2e 31 36 38 2e 34 2e 32 22 0d 0a 00           92.168.4.2"...

00000160 <__c.3006>:
     160:	4f 4b 0d 0a 00                                      OK...

00000165 <__c.3002>:
     165:	4f 4b 0d 0a 00                                      OK...

0000016a <__c.2998>:
     16a:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 31 0d     AT+CWMODE_CUR=1.
     17a:	0a 00                                               ..

0000017c <__c.3000>:
     17c:	4f 4b 0d 0a 00                                      OK...

00000181 <__c.2990>:
     181:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

0000018e <__c.2992>:
     18e:	4f 4b 0d 0a 0d 0a 3e 00                             OK....>.

00000196 <__c.2986>:
     196:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

000001a5 <__c.2988>:
     1a5:	4f 4b 0d 0a 00                                      OK...

000001aa <__c.2982>:
     1aa:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     1ba:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 32 22 2c     ","192.168.4.2",
     1ca:	31 30 30 31 2c 32 32 33 33 2c 30 0d 0a 00           1001,2233,0...

000001d8 <__c.2984>:
     1d8:	4f 4b 0d 0a 00                                      OK...

000001dd <__c.2980>:
     1dd:	4f 4b 0d 0a 00                                      OK...

000001e2 <__c.2973>:
     1e2:	4f 4b 0d 0a 00                                      OK...

000001e7 <__c.2971>:
     1e7:	41 54 2b 43 49 50 41 50 4d 41 43 5f 43 55 52 3f     AT+CIPAPMAC_CUR?
     1f7:	0d 0a 00                                            ...

000001fa <__c.2967>:
     1fa:	41 54 2b 43 49 50 41 50 5f 43 55 52 3d 22 31 39     AT+CIPAP_CUR="19
     20a:	32 2e 31 36 38 2e 34 2e 31 22 0d 0a 00              2.168.4.1"...

00000217 <__c.2969>:
     217:	4f 4b 0d 0a 00                                      OK...

0000021c <__c.2963>:
     21c:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 32 0d     AT+CWMODE_CUR=2.
     22c:	0a 00                                               ..

0000022e <__c.2965>:
     22e:	4f 4b 0d 0a 00                                      OK...

00000233 <__c.2728>:
     233:	41 54 2b 55 41 52 54 5f 43 55 52 3d 31 39 32 30     AT+UART_CUR=1920
     243:	30 2c 38 2c 31 2c 30 2c 30 0d 0a 00                 0,8,1,0,0...

0000024f <__c.2730>:
     24f:	4f 4b 0d 0a 00                                      OK...

00000254 <__c.2722>:
     254:	41 54 0d 0a 00                                      AT...

00000259 <__c.2724>:
     259:	4f 4b 0d 0a 00                                      OK...

0000025e <__c.2703>:
     25e:	41 54 2b 43 49 50 43 4c 4f 53 45 0d 0a 00           AT+CIPCLOSE...

0000026c <__c.2705>:
     26c:	4f 4b 0d 0a 00                                      OK...

00000271 <__c.2699>:
     271:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 0d 0a 00        AT+CIPMODE=0...

00000280 <__c.2701>:
     280:	4f 4b 0d 0a 00                                      OK...

00000285 <__c.2697>:
     285:	2b 2b 2b 00                                         +++.

00000289 <strCredits>:
     289:	54 41 4e 4b 20 46 55 20 56 33 2e 30 20 46 4f 52     TANK FU V3.0 FOR
     299:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     2a9:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     2b9:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     2c9:	4f 4b 53 00 23 00                                   OKS.#.

000002cf <default_scores>:
     2cf:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     2df:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

000002ed <default_handles>:
     2ed:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     2fd:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000030b <strLevels>:
     30b:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     31b:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     32b:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     33b:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     34b:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     35b:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     36b:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     37b:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     38b:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     39b:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     3ab:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

000003bb <strPaused>:
     3bb:	50 41 55 53 45 44 00                                PAUSED.

000003c2 <strExit>:
     3c2:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

000003cb <strTotal>:
     3cb:	54 4f 54 41 4c 3a 00                                TOTAL:.

000003d2 <strScore>:
     3d2:	53 43 4f 52 45 3a 00                                SCORE:.

000003d9 <strFinalScore>:
     3d9:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

000003e5 <strBy>:
     3e5:	42 59 00                                            BY.

000003e8 <strOwns>:
     3e8:	4f 57 4e 53 00                                      OWNS.

000003ed <strChangeHandle>:
     3ed:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

000003fc <strPlayer2>:
     3fc:	50 32 00                                            P2.

000003ff <strPlayer1>:
     3ff:	50 31 00                                            P1.

00000402 <strVertSep>:
     402:	3b 00                                               ;.

00000404 <strUnderline>:
     404:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000410 <strHandlesTitle>:
     410:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

0000041c <strHighscores>:
     41c:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000426 <strCopyright>:
     426:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     436:	4f 4f 4b 53 00                                      OOKS.

0000043b <strSelectHandle>:
     43b:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

0000044a <strCancelHandle>:
     44a:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000455 <strReset>:
     455:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     465:	20 53 4c 20 28 35 53 29 00                           SL (5S).

0000046e <strConfirmHandle>:
     46e:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     47e:	54 00                                               T.

00000480 <strNetworkError>:
     480:	4e 45 54 57 4f 52 4b 20 45 52 52 4f 52 00           NETWORK ERROR.

0000048e <strEnterGameId>:
     48e:	45 4e 54 45 52 20 48 4f 53 54 20 47 41 4d 45 20     ENTER HOST GAME 
     49e:	49 44 00                                            ID.

000004a1 <strConnecting>:
     4a1:	43 4f 4e 4e 45 43 54 49 4e 47 2e 2e 2e 00           CONNECTING....

000004af <strWaitingForNetOppenent>:
     4af:	57 41 49 54 49 4e 47 20 4f 4e 20 4c 41 4e 20 4f     WAITING ON LAN O
     4bf:	50 50 4f 4e 45 4e 54 2e 2e 2e 00                    PPONENT....

000004ca <strShareGameId>:
     4ca:	53 48 41 52 45 20 59 4f 55 52 20 47 41 4d 45 20     SHARE YOUR GAME 
     4da:	49 44 00                                            ID.

000004dd <strLookingForWifi>:
     4dd:	4c 4f 4f 4b 49 4e 47 20 46 4f 52 20 57 49 46 49     LOOKING FOR WIFI
     4ed:	20 44 45 56 49 43 45 2e 2e 2e 00                     DEVICE....

000004f8 <strJoinNetGame>:
     4f8:	4a 4f 49 4e 20 4c 41 4e 20 47 41 4d 45 00           JOIN LAN GAME.

00000506 <strHostNetGame>:
     506:	48 4f 53 54 20 4c 41 4e 20 47 41 4d 45 00           HOST LAN GAME.

00000514 <str2Player>:
     514:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000525 <str1Player>:
     525:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000533 <bauds>:
     533:	b9 00 7b 00 5c 00 3d 00 2e 00 1e 00 16 00 0f 00     ..{.\.=.........

00000543 <my_patches>:
     543:	00 00 00 4b 06 00 00 00 00 00 00 00 34 06 00 00     ...K........4...
     553:	00 00 00 00 00 23 06 00 00 00 00 00 00 00 23 06     .....#........#.
     563:	00 00 00 00 00 00 00 23 06 00 00 00 00 00 00 00     .......#........
     573:	34 06 00 00 00 00 00 00 00 bc 06 00 00 00 00 00     4...............
     583:	00 00 8b 05 00 00 00 00                             ........

0000058b <ad_alarm>:
     58b:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     59b:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     5ab:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     5bb:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     5cb:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     5db:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     5eb:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     5fb:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     60b:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     61b:	01 03 01 01 05 00 00 ff                             ........

00000623 <ad_navigate>:
     623:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
     633:	ff                                                  .

00000634 <ad_cannonball>:
     634:	00 07 7f 00 08 32 00 02 03 00 00 f0 00 0c 0c 00     .....2..........
     644:	0b e8 08 00 e0 00 ff                                .......

0000064b <ad_brick_explode>:
     64b:	00 07 7f 00 02 03 00 00 ff 00 07 64 00 08 32 01     ...........d..2.
     65b:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     66b:	04 01 04 04 01 04 04 01 04 04 03 07 50 00 08 2d     ............P..-
     67b:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     68b:	04 04 01 04 04 01 04 04 01 04 04 03 07 3c 00 08     .............<..
     69b:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     6ab:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     6bb:	ff                                                  .

000006bc <ad_tank_explode>:
     6bc:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
     6cc:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     6dc:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
     6ec:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     6fc:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
     70c:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
     71c:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
     72c:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     73c:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
     74c:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     75c:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
     76c:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     77c:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     78c:	ff                                                  .

0000078d <level_data>:
     78d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     79d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     7c5:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
     7dd:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
     7ed:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7fd:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
     819:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
     829:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     839:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
     855:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
     875:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
     885:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
     895:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
     8a5:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     8b5:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
     8c5:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
     8d5:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     8e5:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
     8f5:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
     905:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
     915:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
     925:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
     935:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
     945:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
     95d:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     96d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
     989:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
     9a1:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
     9bd:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
     9cd:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     9dd:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
     9f9:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
     a09:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     a19:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
     a39:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
     a59:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a69:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a79:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a89:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a99:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ab5:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     ad1:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     ae1:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
     af1:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     b01:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     b11:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
     b21:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
     b31:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
     b41:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     b51:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
     b61:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     b71:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     b81:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
     b91:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
     ba1:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
     bb1:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
     bc1:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
     bd1:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
     be1:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
     bf1:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
     c01:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
     c11:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
     c21:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
     c31:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     c41:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
     c51:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     c61:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     c71:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
     c81:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
     c91:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
     ca1:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
     cb1:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     cc1:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
     cd1:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     ce1:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     cf1:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
     d01:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
     d11:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d29:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     d45:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
     d55:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d65:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d75:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d85:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     da1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     dc1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ddd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     dfd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e19:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e39:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     e51:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     e6d:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     e7d:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
     e8d:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
     e9d:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
     ead:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     ebd:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
     ecd:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
     edd:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
     eed:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
     efd:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
     f0d:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
     f1d:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
     f2d:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
     f3d:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
     f4d:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f5d:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     f6d:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f7d:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     f99:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
     fbd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     fdd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ff9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1019:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1035:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1045:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1055:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1065:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1075:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    1085:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    1095:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    10a5:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    10b5:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    10c5:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    10d5:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    10e5:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    10f5:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    1105:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    1115:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    1125:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    1135:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    1145:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    1155:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    1165:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1181:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1199:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    11a9:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    11b9:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    11c9:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    11e1:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    11f1:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1201:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1211:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1221:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1231:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    1249:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    1259:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    1269:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    1281:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    1291:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    12a1:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    12b1:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    12c1:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    12d1:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    12e1:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    12f9:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    1309:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1321:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    1331:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1341:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1351:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1361:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    137d:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    1399:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    13b9:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    13c9:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13d9:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    13f5:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    1415:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    1431:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    1451:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    1461:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1471:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    1481:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    1499:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    14a9:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    14b9:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    14c9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    14d9:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    14e9:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    1505:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1515:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    1525:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1535:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    1555:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    1571:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    1591:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    15a9:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    15b9:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    15d5:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    15f1:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    1611:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1621:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1631:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1641:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1651:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    1661:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    1679:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    1689:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    1699:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    16a9:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    16b9:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    16c9:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    16d9:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    16e9:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    16f9:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    1721:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1731:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1741:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    1751:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    1769:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    1779:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    1789:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    1799:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    17a9:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    17b9:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    17c9:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    17e1:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    17f1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1801:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    1811:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1821:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1831:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    1841:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1851:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    1861:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    1871:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    1881:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    1891:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    18a1:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    18b1:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    18c1:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    18dd:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1901:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1911:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1921:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1931:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1941:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    1951:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1969:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    1979:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    1989:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1999:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    19a9:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    19b9:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    19c9:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    19d9:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    19e9:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    19f9:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1a09:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1a2d:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a49:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    1a59:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    1a69:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    1a79:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    1a89:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    1a99:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    1aa9:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1ab9:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1ad1:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1ae1:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1afd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b1d:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1b2d:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1b3d:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1b4d:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1b5d:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    1b6d:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    1b7d:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    1b8d:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1b9d:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    1bad:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    1bbd:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    1bcd:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    1bdd:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    1bed:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1bfd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c0d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c1d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c2d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c49:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c65:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c85:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ca1:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1cb1:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1cc1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cdd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cf5:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1d05:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1d15:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    1d25:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    1d35:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    1d45:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    1d55:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    1d65:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    1d75:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    1d85:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    1d95:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    1da5:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    1dbd:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    1dcd:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    1ddd:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    1ded:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1dfd:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    1e0d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e29:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e45:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1e55:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1e65:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e81:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ea1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ebd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1edd:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1eed:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1efd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f0d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1f35:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f55:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f71:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f91:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1fa1:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1fb1:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fcd:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1fe9:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2001:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2011:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2021:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    2031:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    2041:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    2051:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    2061:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    2071:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    2081:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    2091:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    20a1:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    20b1:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    20c1:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    20d9:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    20f9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2115:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2135:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2145:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2155:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2171:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    218d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21ad:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21c9:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21d9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21e9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21f9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2209:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2219:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2231:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2241:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2251:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    2261:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    2271:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2281:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    2291:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    22a9:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    22b9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    22c9:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    22d9:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    22e9:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    22f9:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2315:	00 02 02 37 37 37 37 02 00 00 00 02 37 37 37 37     ...7777.....7777
    2325:	37 37 37 37 37 37 02 00 00 00 02 37 37 37 37 02     777777.....7777.
    2335:	02 4d 4d 4d 4d 02 00 00 00 02 4d 4d 4d 4d 4d 4d     .MMMM.....MMMMMM
    2345:	4d 4d 4d 4d 02 00 00 00 02 4d 4d 4d 4d 02 02 4d     MMMM.....MMMM..M
    2355:	4d 4d 4d 02 00 00 00 02 4d 4d 4d 4d 2c 4d 4d 4d     MMM.....MMMM,MMM
    2365:	4d 4d 02 00 00 00 02 4d 4d 4d 4d 02 02 4d 4d 4d     MM.....MMMM..MMM
    2375:	4d 02 00 00 00 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M.....MMMMMMMMMM
    2385:	02 00 00 00 02 4d 4d 4d 4d 02 02 37 37 37 37 02     .....MMMM..7777.
    2395:	00 00 00 02 37 37 37 37 37 37 37 37 37 37 02 00     ....7777777777..
    23a5:	00 00 02 37 37 37 37 02 02 00 00 00 00 00 00 00     ...7777.........
	...
    23c9:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    23d9:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    23e9:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    23f9:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2411:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2421:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2431:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    2441:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    2451:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    2461:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2471:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2489:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2499:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    24a9:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    24b9:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24c9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24d9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24e9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    24f9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2509:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    2519:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2529:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    2539:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2549:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    2559:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2569:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    2579:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2589:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    2599:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25a9:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    25b9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    25c9:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    25d9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    25e9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25f9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    2609:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2619:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    2629:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2639:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    2649:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    2659:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    2679:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2699:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26b5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26d5:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    26ed:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    2711:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    272d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    274d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2769:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2779:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2789:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27a5:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    27b5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    27c5:	02 02                                               ..

000027c7 <sprites_data>:
    27c7:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    27d7:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    27e7:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    27f7:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    2807:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2817:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    2827:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    2837:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    2847:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2857:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    2867:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2877:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2887:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2897:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    28a7:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    28b7:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    28c7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28d7:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    28e7:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    28f7:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2907:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2917:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2927:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2937:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2947:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2957:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    2967:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    2977:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2987:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2997:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    29a7:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    29b7:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    29c7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29d7:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    29e7:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    29f7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a07:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a17:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2a27:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2a37:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a47:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    2a57:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    2a67:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    2a77:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    2a87:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    2a97:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    2aa7:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2ab7:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2ac7:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2ad7:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2ae7:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2af7:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2b07:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2b17:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2b27:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2b37:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2b47:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2b57:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2b67:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2b77:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b87:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2b97:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2ba7:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2bb7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bc7:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2bd7:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2be7:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2bf7:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c07:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c17:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2c27:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2c37:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2c47:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2c57:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    2c67:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    2c77:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2c87:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    2c97:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    2ca7:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    2cb7:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2cc7:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2cd7:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    2ce7:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    2cf7:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    2d07:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2d17:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2d27:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    2d37:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    2d47:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d57:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    2d67:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    2d77:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d87:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2d97:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2da7:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    2db7:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    2dc7:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2dd7:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2de7:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    2df7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e07:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2e17:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    2e27:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    2e37:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e47:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2e57:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    2e67:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    2e77:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e87:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e97:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    2ea7:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    2eb7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ec7:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2ed7:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    2ee7:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    2ef7:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    2f07:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2f17:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    2f27:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    2f37:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    2f47:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2f57:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2f67:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    2f77:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2f87:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    2f97:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2fa7:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2fb7:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2fc7:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2fd7:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2fe7:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2ff7:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    3007:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3017:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3027:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    3037:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    3047:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    3057:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    3067:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3077:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3087:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    3097:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    30a7:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    30b7:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    30c7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30d7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30e7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30f7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00003107 <map_sub_turret>:
    3107:	01 01 23                                            ..#

0000310a <map_sub_shot>:
    310a:	01 01 1b                                            ...

0000310d <map_up_arrow>:
    310d:	01 01 22                                            .."

00003110 <map_down_arrow>:
    3110:	01 01 21                                            ..!

00003113 <map_right_arrow>:
    3113:	01 01 20                                            .. 

00003116 <map_rocket_right_1>:
    3116:	01 01 1a                                            ...

00003119 <map_rocket_right_0>:
    3119:	01 01 19                                            ...

0000311c <map_rocket_up_1>:
    311c:	01 01 18                                            ...

0000311f <map_rocket_up_0>:
    311f:	01 01 17                                            ...

00003122 <map_ball>:
    3122:	01 01 16                                            ...

00003125 <map_explosion_2>:
    3125:	02 02 08 09 09 08                                   ......

0000312b <map_explosion_1>:
    312b:	02 02 06 07 10 11                                   ......

00003131 <map_explosion_0>:
    3131:	02 02 04 05 0e 0f                                   ......

00003137 <map_tank2_right_0>:
    3137:	02 02 14 15 1e 1f                                   ......

0000313d <map_tank2_up_0>:
    313d:	02 02 12 13 1c 1d                                   ......

00003143 <map_tank1_right_0>:
    3143:	02 02 02 03 0c 0d                                   ......

00003149 <map_tank1_up_0>:
    3149:	02 02 00 01 0a 0b                                   ......

0000314f <map_tank_blank>:
    314f:	02 02 24 24 24 24                                   ..$$$$

00003155 <map_none>:
    3155:	01 01 24                                            ..$

00003158 <tiles_data>:
	...
    3198:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    31a8:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    31b8:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    31c8:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    31d8:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    31e8:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    31f8:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    3208:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    3218:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    3228:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    3238:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    3248:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    3258:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    3268:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    3278:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    3288:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    3298:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    32a8:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    32b8:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    32c8:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    32e0:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    32f0:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3300:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    3318:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    3328:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    3338:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    3348:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    3360:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    3380:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    3398:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    33a8:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    33b8:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    33c8:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    33d8:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    33e8:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    33f8:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    3408:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3418:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    3428:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    3438:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    3448:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    3458:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    3468:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    3478:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    3488:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    3498:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    34a8:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    34b8:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    34c8:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    34d8:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    34e8:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    34f8:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    3508:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    3518:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    3528:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    3538:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    3548:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    3558:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    3568:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    3578:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    3588:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    3598:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    35a8:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    35b8:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    35c8:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    35d8:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    35e8:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    35f8:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    3608:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    3618:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    3628:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3638:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3648:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3658:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    3668:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3678:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3688:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    36b8:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    36c8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    36d8:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    36e8:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    36f8:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    3708:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    3718:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    3728:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    3738:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    3748:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    3758:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    3768:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    3778:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    3788:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    3798:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    37a8:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    37b8:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    37c8:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    37d8:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    37e8:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    37f8:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3808:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3818:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3828:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    3858:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3868:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3878:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3888:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3898:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    38a8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38b8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38c8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38d8:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    3918:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    3928:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    3938:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    3948:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    3958:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    3968:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    3978:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    3988:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    39c8:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    3a00:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    3a10:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    3a20:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    3a30:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    3a40:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    3a50:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    3a60:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    3a70:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    3a80:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    3a90:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    3aa0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ab0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ac0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ad0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ae0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3af0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b00:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b10:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    3b20:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    3b30:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    3b40:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    3b50:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    3b60:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    3b70:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    3b80:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    3b90:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    3ba0:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3bd8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3be8:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3bf8:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    3c1c:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    3c2c:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    3c3c:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    3c4c:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    3c5c:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    3c6c:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    3c7c:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    3c8c:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    3c9c:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3cac:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3cbc:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3ccc:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    3cdc:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3cec:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3cfc:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d0c:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    3d1c:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    3d2c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d3c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d4c:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    3d5c:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    3d6c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d7c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d8c:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    3d9c:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    3dac:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    3dbc:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    3dcc:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    3ddc:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    3dec:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    3dfc:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    3e0c:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    3e1c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e2c:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3e3c:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    3e4c:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    3e5c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e6c:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3e7c:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    3e8c:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    3e9c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3eac:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3ebc:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    3ecc:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    3edc:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3eec:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3efc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f0c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    3f1c:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    3f2c:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3f3c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f4c:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3f5c:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    3f6c:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f7c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f8c:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3f9c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    3fac:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fbc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fcc:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    3fdc:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    3fec:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3ffc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    400c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    401c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    402c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    403c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    404c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    405c:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    406c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    407c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    408c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    409c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    40ac:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    40bc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    40cc:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    40dc:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    40ec:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    40fc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    410c:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    411c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    412c:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    413c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    414c:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    415c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    416c:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    417c:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    418c:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    419c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    41ac:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    41bc:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    41cc:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    41dc:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    41ec:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    41fc:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    420c:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    421c:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    422c:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    423c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    424c:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    425c:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    426c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    427c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    428c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    429c:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42ac:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42bc:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    42cc:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    42dc:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42ec:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42fc:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    430c:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    431c:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    432c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    433c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    434c:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    435c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    436c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    437c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    438c:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    439c:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    43ac:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    43bc:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    43cc:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    43dc:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    43ec:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    43fc:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    440c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    441c:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    442c:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    443c:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    444c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    445c:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    446c:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    447c:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    448c:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    449c:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44ac:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44bc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44cc:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    44dc:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    44ec:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    44fc:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    450c:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    451c:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    452c:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    453c:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    454c:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    455c:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    456c:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    457c:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    458c:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    459c:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    45ac:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    45bc:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    45cc:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    45dc:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    45ec:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    45fc:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    460c:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    461c:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    462c:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    463c:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    464c:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    465c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    466c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    467c:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    468c:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    469c:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46ac:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46bc:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    46cc:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    46dc:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46ec:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46fc:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    470c:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    471c:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    472c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    473c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    474c:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    475c:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    476c:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    477c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    478c:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    479c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    47ac:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    47bc:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    47cc:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    47dc:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    47ec:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    47fc:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    480c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    481c:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    482c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    483c:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    484c:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    485c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    486c:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    487c:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    488c:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    489c:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    48ac:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    48bc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    48cc:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    48dc:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    48ec:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    48fc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    490c:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    491c:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    492c:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    493c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    494c:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    495c:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    496c:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    497c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    498c:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    499c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    49ac:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    49bc:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    49cc:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    49dc:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    49ec:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    49fc:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a0c:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a1c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4a2c:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4a3c:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a4c:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a5c:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    4a6c:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    4a7c:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    4a8c:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    4a9c:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    4aac:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4abc:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4acc:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    4adc:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    4aec:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    4afc:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    4b0c:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    4b1c:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    4b2c:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    4b3c:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    4b4c:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4b5c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4b6c:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    4b7c:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    4b8c:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    4b9c:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4bac:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4bbc:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4bcc:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    4bdc:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4bec:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4bfc:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    4c0c:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    4c1c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c2c:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c3c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c4c:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    4c5c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c6c:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c7c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4c8c:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4c9c:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    4cac:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4cbc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4ccc:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4cdc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4cec:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    4cfc:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    4d0c:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4d1c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d2c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4d3c:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    4d4c:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    4d5c:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    4d6c:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    4d7c:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4d8c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    4d9c:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    4dac:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4dbc:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4dcc:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    4ddc:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4dec:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4dfc:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e0c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4e1c:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    4e2c:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    4e3c:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    4e4c:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    4e5c:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    4e6c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4e7c:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e8c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    4e9c:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    4eac:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4ebc:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4ecc:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4edc:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4eec:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    4efc:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    4f0c:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f1c:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    4f2c:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f3c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f4c:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f5c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4f6c:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f7c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f8c:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    4f9c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4fac:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fbc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fcc:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4fdc:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4fec:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ffc:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    500c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    501c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    502c:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    503c:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    504c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    505c:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    506c:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    507c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    508c:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    509c:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    50ac:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50bc:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    50cc:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    50dc:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    50ec:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    50fc:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    510c:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    511c:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    512c:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    513c:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    514c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    515c:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    516c:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    517c:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    518c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    519c:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    51ac:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    51bc:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    51cc:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    51dc:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    51ec:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    51fc:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    520c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    521c:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    522c:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    523c:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    524c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    525c:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    526c:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    527c:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    528c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    529c:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52ac:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    52bc:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    52cc:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    52dc:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52ec:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    52fc:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    530c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    531c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    532c:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    533c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    534c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    535c:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    536c:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    537c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    538c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    539c:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    53ac:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53bc:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53cc:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    53dc:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    53ec:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53fc:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    540c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    541c:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    542c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    543c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    544c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    545c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    546c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    547c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    548c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    549c:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    54ac:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54bc:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54cc:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    54dc:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    54ec:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    54fc:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    550c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    551c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    552c:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    553c:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    554c:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    555c:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    556c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    557c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    558c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    559c:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    55ac:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    55bc:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    55cc:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    55dc:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    55ec:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    55fc:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    560c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    561c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    562c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    563c:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    564c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    565c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    566c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    567c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    568c:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    569c:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    56ac:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    56bc:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    56cc:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    56dc:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56ec:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    56fc:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    570c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    571c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    572c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    573c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    574c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    575c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    576c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    577c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    578c:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    579c:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57ac:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57bc:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    57cc:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    57dc:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57ec:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57fc:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    580c:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    5860:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5870:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5888:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    58a0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    58b0:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    58e0:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    58f0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5900:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    5918:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    5928:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    5938:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5948:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5960:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5970:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5980:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    5998:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    59a8:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    59b8:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    59c8:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    59e0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    59f0:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a24:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5a34:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5a44:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    5a60:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    5a70:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a80:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    5aa0:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    5ab0:	df df df df df df df df 00 00 df df df df 00 00     ................
    5ac0:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    5ae0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5af0:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5b00:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b40:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5b50:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b70:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5bc0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5be4:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5bf4:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    5c04:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5c20:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5c30:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    5c40:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5c60:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    5c70:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    5c80:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    5ca0:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5cb0:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5cc0:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    5ce0:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    5cf0:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    5d00:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5d24:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    5d34:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    5d44:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    5d60:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    5d70:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    5d80:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5da0:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    5db0:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    5dc0:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5de0:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    5df0:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5e00:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    5e20:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e30:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e40:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5e60:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e70:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    5e80:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    5ea8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5ec0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5ed8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ee8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ef8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f08:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f18:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    5f28:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5f38:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5f48:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f68:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f80:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f98:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    5fa8:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5fb8:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5fc8:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5fe0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5ff0:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6008:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6020:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6030:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    6040:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    6060:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6070:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6080:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    60a0:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60b0:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60c0:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    60e0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60f0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6100:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6120:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    6130:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6140:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6160:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6170:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6180:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    61a0:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61b0:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    61c0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    61e0:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61f0:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    6200:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    6220:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6230:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6240:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6260:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6270:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6280:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    62a4:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    62b4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    62c4:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    62e0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    62f0:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    6300:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6320:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6330:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6340:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6360:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    6370:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    6380:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    63a0:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    63b0:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    63c0:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    63e0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    63f0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6400:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6420:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6430:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6440:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6460:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6470:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6480:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    64a0:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    64b0:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    64c0:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    64e0:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    64f0:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6500:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6520:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6530:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6540:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6560:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6570:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6580:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    65a0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65b0:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65c0:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    65e0:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    65f0:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    6600:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    6620:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6630:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    6640:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6660:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6670:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    6680:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    66a0:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    66b0:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    66c0:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    66e0:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    66f0:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6700:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    6720:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6730:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    6740:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    6760:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6770:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6780:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    67a4:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    67b4:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    6808:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00006818 <map_sub_emerging>:
    6818:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6828:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    6838:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6848:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6858:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6868:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    6878:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    6888:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    6898:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    68a8:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    68b8:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    68c8:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    68d8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68e8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    68f8:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6908:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6918:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6928:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6938:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6948:	0d 0d 0d 0d 0d 0d                                   ......

0000694e <map_sub>:
    694e:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    695e:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    696e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    697e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    698e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    699e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    69ae:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    69be:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    69ce:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    69de:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    69ee:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    69fe:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    6a0e:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a1e:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    6a2e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a3e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a4e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a5e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a6e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a7e:	0d 0d 0d 0d 0d 0d                                   ......

00006a84 <map_scope_2>:
    6a84:	01 01 12                                            ...

00006a87 <map_scope_1>:
    6a87:	01 01 11                                            ...

00006a8a <map_scope_0>:
    6a8a:	01 01 10                                            ...

00006a8d <map_blue_tank>:
    6a8d:	02 02 2b 2c 31 32                                   ..+,12

00006a93 <map_green_tank>:
    6a93:	02 02 18 19 23 24                                   ....#$

00006a99 <map_fence>:
    6a99:	01 01 0f                                            ...

00006a9c <map_turf>:
    6a9c:	01 01 0e                                            ...

00006a9f <map_water>:
    6a9f:	01 01 0d                                            ...

00006aa2 <map_metal_bl>:
    6aa2:	01 01 0c                                            ...

00006aa5 <map_metal_tr>:
    6aa5:	01 01 0b                                            ...

00006aa8 <map_metal_br>:
    6aa8:	01 01 0a                                            ...

00006aab <map_metal_tl>:
    6aab:	01 01 09                                            ...

00006aae <map_tile_exp_2>:
    6aae:	01 01 08                                            ...

00006ab1 <map_tile_exp_1>:
    6ab1:	01 01 07                                            ...

00006ab4 <map_tile_exp_0>:
    6ab4:	01 01 06                                            ...

00006ab7 <map_rocket_itm>:
    6ab7:	01 01 04                                            ...

00006aba <map_explode_itm>:
    6aba:	01 01 03                                            ...

00006abd <map_speed_itm>:
    6abd:	01 01 02                                            ...

00006ac0 <map_metal>:
    6ac0:	01 01 05                                            ...

00006ac3 <map_brick>:
    6ac3:	01 01 01                                            ...

00006ac6 <map_splash>:
    6ac6:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    6ad6:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    6ae6:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    6af6:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    6b06:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    6b16:	1a 00 00 1a 2f 30                                   ..../0

00006b1c <map_pause>:
    6b1c:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    6b2c:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    6b3c:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    6b4c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00006b5a <map_tile_none>:
    6b5a:	01 01 00 00                                         ....

00006b5e <__ctors_end>:
    6b5e:	11 24       	eor	r1, r1
    6b60:	1f be       	out	0x3f, r1	; 63
    6b62:	cf ef       	ldi	r28, 0xFF	; 255
    6b64:	d0 e1       	ldi	r29, 0x10	; 16
    6b66:	de bf       	out	0x3e, r29	; 62
    6b68:	cd bf       	out	0x3d, r28	; 61

00006b6a <__do_copy_data>:
    6b6a:	11 e0       	ldi	r17, 0x01	; 1
    6b6c:	a0 e0       	ldi	r26, 0x00	; 0
    6b6e:	b1 e0       	ldi	r27, 0x01	; 1
    6b70:	ea e2       	ldi	r30, 0x2A	; 42
    6b72:	f8 ee       	ldi	r31, 0xE8	; 232
    6b74:	02 c0       	rjmp	.+4      	; 0x6b7a <__do_copy_data+0x10>
    6b76:	05 90       	lpm	r0, Z+
    6b78:	0d 92       	st	X+, r0
    6b7a:	a4 35       	cpi	r26, 0x54	; 84
    6b7c:	b1 07       	cpc	r27, r17
    6b7e:	d9 f7       	brne	.-10     	; 0x6b76 <__do_copy_data+0xc>

00006b80 <__do_clear_bss>:
    6b80:	10 e1       	ldi	r17, 0x10	; 16
    6b82:	a4 e5       	ldi	r26, 0x54	; 84
    6b84:	b1 e0       	ldi	r27, 0x01	; 1
    6b86:	01 c0       	rjmp	.+2      	; 0x6b8a <.do_clear_bss_start>

00006b88 <.do_clear_bss_loop>:
    6b88:	1d 92       	st	X+, r1

00006b8a <.do_clear_bss_start>:
    6b8a:	af 31       	cpi	r26, 0x1F	; 31
    6b8c:	b1 07       	cpc	r27, r17
    6b8e:	e1 f7       	brne	.-8      	; 0x6b88 <.do_clear_bss_loop>

00006b90 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6b90:	0e 94 95 3a 	call	0x752a	; 0x752a <wdt_randomize>
#endif

    MCUSR = 0;
    6b94:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6b96:	88 e1       	ldi	r24, 0x18	; 24
    6b98:	0f b6       	in	r0, 0x3f	; 63
    6b9a:	f8 94       	cli
    6b9c:	80 93 60 00 	sts	0x0060, r24
    6ba0:	10 92 60 00 	sts	0x0060, r1
    6ba4:	0f be       	out	0x3f, r0	; 63

00006ba6 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6ba6:	0e 94 57 3b 	call	0x76ae	; 0x76ae <isEepromFormatted>
    6baa:	81 11       	cpse	r24, r1
    6bac:	02 c0       	rjmp	.+4      	; 0x6bb2 <Initialize+0xc>
    6bae:	0e 94 35 3b 	call	0x766a	; 0x766a <FormatEeprom>

	cli();
    6bb2:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6bb4:	c1 e0       	ldi	r28, 0x01	; 1
    6bb6:	c0 93 58 0a 	sts	0x0A58, r28
		tr4_barrel_hi=1;		
    6bba:	c0 93 59 0a 	sts	0x0A59, r28
		tr4_params=0b00000001; //15 bits no divider (1)
    6bbe:	c0 93 57 0a 	sts	0x0A57, r28
	#endif

	#if UART == 1
		InitUartRxBuffer();
    6bc2:	0e 94 5a 3c 	call	0x78b4	; 0x78b4 <InitUartRxBuffer>
		InitUartTxBuffer();
    6bc6:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <InitUartTxBuffer>
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6bca:	10 92 44 0a 	sts	0x0A44, r1
    6bce:	10 92 4a 0a 	sts	0x0A4A, r1
    6bd2:	10 92 50 0a 	sts	0x0A50, r1
    6bd6:	10 92 56 0a 	sts	0x0A56, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6bda:	10 92 1e 0a 	sts	0x0A1E, r1
	sync_flags=0;
    6bde:	10 92 20 0a 	sts	0x0A20, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6be2:	82 e1       	ldi	r24, 0x12	; 18
    6be4:	80 93 1f 0a 	sts	0x0A1F, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6be8:	80 ee       	ldi	r24, 0xE0	; 224
    6bea:	80 93 26 0a 	sts	0x0A26, r24
	first_render_line=FIRST_RENDER_LINE;
    6bee:	84 e1       	ldi	r24, 0x14	; 20
    6bf0:	80 93 25 0a 	sts	0x0A25, r24

	joypad1_status_hi=0;
    6bf4:	10 92 2a 0a 	sts	0x0A2A, r1
    6bf8:	10 92 29 0a 	sts	0x0A29, r1
	joypad2_status_hi=0;
    6bfc:	10 92 2e 0a 	sts	0x0A2E, r1
    6c00:	10 92 2d 0a 	sts	0x0A2D, r1
	sound_enabled=1;
    6c04:	c0 93 43 0a 	sts	0x0A43, r28

	InitializeVideoMode();
    6c08:	0e 94 78 48 	call	0x90f0	; 0x90f0 <InitializeVideoMode>
    6c0c:	80 e7       	ldi	r24, 0x70	; 112
    6c0e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6c10:	fc 01       	movw	r30, r24
    6c12:	25 91       	lpm	r18, Z+
    6c14:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6c16:	f9 01       	movw	r30, r18
    6c18:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6c1a:	30 83       	st	Z, r19
    6c1c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6c1e:	20 e0       	ldi	r18, 0x00	; 0
    6c20:	8e 39       	cpi	r24, 0x9E	; 158
    6c22:	92 07       	cpc	r25, r18
    6c24:	a9 f7       	brne	.-22     	; 0x6c10 <Initialize+0x6a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6c26:	78 94       	sei
	
	DisplayLogo();
    6c28:	0e 94 77 48 	call	0x90ee	; 0x90ee <DisplayLogo>
    6c2c:	0e 94 00 70 	call	0xe000	; 0xe000 <main>
    6c30:	0c 94 13 74 	jmp	0xe826	; 0xe826 <_exit>

00006c34 <__bad_interrupt>:
    6c34:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006c38 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    6c38:	0b e9       	ldi	r16, 0x9B	; 155
    6c3a:	0a 95       	dec	r16
    6c3c:	f1 f7       	brne	.-4      	; 0x6c3a <sub_video_mode3+0x2>

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,user_ram_tiles_c
    6c3e:	00 91 0d 0a 	lds	r16, 0x0A0D

		ldi ZL,lo8(ram_tiles_restore);
    6c42:	e0 ed       	ldi	r30, 0xD0	; 208
		ldi ZH,hi8(ram_tiles_restore);
    6c44:	f9 e0       	ldi	r31, 0x09	; 9
		ldi r18,3
    6c46:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    6c48:	02 9f       	mul	r16, r18
		add ZL,r0
    6c4a:	e0 0d       	add	r30, r0
		adc ZH,r1
    6c4c:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    6c4e:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6c50:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6c52:	20 91 0c 0a 	lds	r18, 0x0A0C
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    6c56:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    6c58:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6c5a:	30 0f       	add	r19, r16

		cp r18,r16
    6c5c:	20 17       	cp	r18, r16
		breq no_ramtiles
    6c5e:	51 f0       	breq	.+20     	; 0x6c74 <no_ramtiles>
		nop
    6c60:	00 00       	nop
	...

00006c64 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    6c64:	a1 91       	ld	r26, Z+
		ld XH,Z+
    6c66:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6c68:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6c6a:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6c6c:	0c 93       	st	X, r16

		inc r16
    6c6e:	03 95       	inc	r16
		cp r16,r18
    6c70:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    6c72:	c0 f3       	brcs	.-16     	; 0x6c64 <upd_loop>

00006c74 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    6c74:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    6c76:	1a 95       	dec	r17
		brne .-4
    6c78:	f1 f7       	brne	.-4      	; 0x6c76 <no_ramtiles+0x2>
		rjmp .
    6c7a:	00 c0       	rjmp	.+0      	; 0x6c7c <no_ramtiles+0x8>
		dec r19
    6c7c:	3a 95       	dec	r19
		brne 1b
    6c7e:	d1 f7       	brne	.-12     	; 0x6c74 <no_ramtiles>
		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1

#endif


		lds r2,overlay_tile_table
    6c80:	20 90 1b 0a 	lds	r2, 0x0A1B
		lds r3,overlay_tile_table+1
    6c84:	30 90 1c 0a 	lds	r3, 0x0A1C
		lds r16,tile_table_lo 
    6c88:	00 91 17 0a 	lds	r16, 0x0A17
		lds r17,tile_table_hi
    6c8c:	10 91 18 0a 	lds	r17, 0x0A18
		movw r12,r16
    6c90:	68 01       	movw	r12, r16
		movw r6,r16
    6c92:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6c94:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6c96:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6c98:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6c9a:	4e 01       	movw	r8, r28
		clr r0
    6c9c:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6c9e:	30 91 1a 0a 	lds	r19, 0x0A1A
		cpi r19,0
    6ca2:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6ca4:	09 f0       	breq	.+2      	; 0x6ca8 <no_ramtiles+0x34>
		ldi YL,lo8(overlay_vram)
    6ca6:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    6ca8:	09 f0       	breq	.+2      	; 0x6cac <no_ramtiles+0x38>
		ldi YH,hi8(overlay_vram)
    6caa:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6cac:	09 f0       	breq	.+2      	; 0x6cb0 <no_ramtiles+0x3c>
		mov r24,r19
    6cae:	83 2f       	mov	r24, r19

		breq .+2
    6cb0:	09 f0       	breq	.+2      	; 0x6cb4 <no_ramtiles+0x40>
		movw r12,r2
    6cb2:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6cb4:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6cb6:	a0 2e       	mov	r10, r16
		clr r22
    6cb8:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6cba:	78 e0       	ldi	r23, 0x08	; 8

00006cbc <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6cbc:	0a d3       	rcall	.+1556   	; 0x72d2 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6cbe:	3c e0       	ldi	r19, 0x0C	; 12
    6cc0:	3a 95       	dec	r19
    6cc2:	f1 f7       	brne	.-4      	; 0x6cc0 <next_tile_line+0x4>
    6cc4:	00 00       	nop

		;***draw line***
		call render_tile_line
    6cc6:	0e 94 92 36 	call	0x6d24	; 0x6d24 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6cca:	3f e0       	ldi	r19, 0x0F	; 15
    6ccc:	3a 95       	dec	r19
    6cce:	f1 f7       	brne	.-4      	; 0x6ccc <next_tile_line+0x10>
    6cd0:	00 c0       	rjmp	.+0      	; 0x6cd2 <next_tile_line+0x16>

		dec r10
    6cd2:	aa 94       	dec	r10
		breq frame_end
    6cd4:	a1 f0       	breq	.+40     	; 0x6cfe <frame_end>
	
		inc r22
    6cd6:	63 95       	inc	r22
		lpm ;3 nop
    6cd8:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6cda:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6cdc:	29 f0       	breq	.+10     	; 0x6ce8 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6cde:	33 e0       	ldi	r19, 0x03	; 3
    6ce0:	3a 95       	dec	r19
    6ce2:	f1 f7       	brne	.-4      	; 0x6ce0 <next_tile_line+0x24>
    6ce4:	00 c0       	rjmp	.+0      	; 0x6ce6 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    6ce6:	ea cf       	rjmp	.-44     	; 0x6cbc <next_tile_line>

00006ce8 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6ce8:	66 27       	eor	r22, r22

		clr r0
    6cea:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6cec:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6cee:	c3 0f       	add	r28, r19
		adc YH,r0
    6cf0:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6cf2:	8a 95       	dec	r24
		brne .+2
    6cf4:	09 f4       	brne	.+2      	; 0x6cf8 <next_tile_row+0x10>
		movw YL,r8	;main vram
    6cf6:	e4 01       	movw	r28, r8
		brne .+2
    6cf8:	09 f4       	brne	.+2      	; 0x6cfc <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6cfa:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6cfc:	df cf       	rjmp	.-66     	; 0x6cbc <next_tile_line>

00006cfe <frame_end>:

	frame_end:

		WAIT r19,18
    6cfe:	36 e0       	ldi	r19, 0x06	; 6
    6d00:	3a 95       	dec	r19
    6d02:	f1 f7       	brne	.-4      	; 0x6d00 <frame_end+0x2>

		rcall hsync_pulse ;145
    6d04:	e6 d2       	rcall	.+1484   	; 0x72d2 <hsync_pulse>
	
#if ((RTLIST_ENABLE != 0) && (SPRITES_VSYNC_PROCESS != 0))
		clr r1
    6d06:	11 24       	eor	r1, r1
		call RestoreBackground
    6d08:	0e 94 0e 38 	call	0x701c	; 0x701c <RestoreBackground>
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    6d0c:	e0 91 20 0a 	lds	r30, 0x0A20
		ldi r20,SYNC_FLAG_FIELD
    6d10:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6d12:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6d14:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6d16:	e0 93 20 0a 	sts	0x0A20, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6d1a:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6d1c:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6d20:	11 24       	eor	r1, r1


		ret
    6d22:	08 95       	ret

00006d24 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6d24:	de 01       	movw	r26, r28

		mul r22,r23
    6d26:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6d28:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d2a:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d2c:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    6d2e:	00 0d       	add	r16, r0
		adc r17,r1
    6d30:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6d32:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6d34:	00 ed       	ldi	r16, 0xD0	; 208
		ldi r17,hi8(ram_tiles)
    6d36:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6d38:	00 0d       	add	r16, r0
		adc r17,r1
    6d3a:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6d3c:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6d3e:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6d40:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6d42:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6d44:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6d46:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6d48:	24 31       	cpi	r18, 0x14	; 20
		brcc .+2
    6d4a:	08 f4       	brcc	.+2      	; 0x6d4e <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6d4c:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6d4e:	04 0e       	add	r0, r20
	    adc r1,r21
    6d50:	15 1e       	adc	r1, r21

		movw ZL,r0
    6d52:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6d54:	24 31       	cpi	r18, 0x14	; 20
		brcs ramloop
    6d56:	f0 f0       	brcs	.+60     	; 0x6d94 <ramloop>

00006d58 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6d58:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6d5a:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6d5c:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6d5e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6d60:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6d62:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6d64:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6d66:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6d68:	24 31       	cpi	r18, 0x14	; 20
		nop
    6d6a:	00 00       	nop

	    lpm r16,Z+
    6d6c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6d6e:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6d70:	08 f4       	brcc	.+2      	; 0x6d74 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6d72:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6d74:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6d76:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6d78:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6d7a:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6d7c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6d7e:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6d80:	24 31       	cpi	r18, 0x14	; 20
		dec r17			;decrement tiles to draw on line
    6d82:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6d84:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6d86:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6d88:	05 91       	lpm	r16, Z+

		breq end	
    6d8a:	31 f1       	breq	.+76     	; 0x6dd8 <end>
	    movw ZL,r0   	;copy next tile adress
    6d8c:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6d8e:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6d90:	18 f7       	brcc	.-58     	; 0x6d58 <romloop>
	
		rjmp .
    6d92:	00 c0       	rjmp	.+0      	; 0x6d94 <ramloop>

00006d94 <ramloop>:

	ramloop:

	    ld r16,Z+
    6d94:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6d96:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6d98:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6d9a:	01 91       	ld	r16, Z+
		nop   
    6d9c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6d9e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6da0:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6da2:	01 91       	ld	r16, Z+
		nop
    6da4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6da6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6da8:	24 31       	cpi	r18, 0x14	; 20
   		rjmp .
    6daa:	00 c0       	rjmp	.+0      	; 0x6dac <ramloop+0x18>

	    ld r16,Z+
    6dac:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6dae:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6db0:	08 f0       	brcs	.+2      	; 0x6db4 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6db2:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6db4:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6db6:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6db8:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6dba:	15 1e       	adc	r1, r21
		rjmp .
    6dbc:	00 c0       	rjmp	.+0      	; 0x6dbe <ramloop+0x2a>
    
		ld r16,Z+		
    6dbe:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6dc0:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6dc2:	24 31       	cpi	r18, 0x14	; 20
		rjmp .  
    6dc4:	00 c0       	rjmp	.+0      	; 0x6dc6 <ramloop+0x32>

	    ld r16,Z+	
    6dc6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6dc8:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6dca:	01 91       	ld	r16, Z+

	    dec r17
    6dcc:	1a 95       	dec	r17
	    breq end
    6dce:	21 f0       	breq	.+8      	; 0x6dd8 <end>
	
		movw ZL,r0
    6dd0:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6dd2:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6dd4:	08 f6       	brcc	.-126    	; 0x6d58 <romloop>
		rjmp ramloop
    6dd6:	de cf       	rjmp	.-68     	; 0x6d94 <ramloop>

00006dd8 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6dd8:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6dda:	00 27       	eor	r16, r16
		lpm	
    6ddc:	c8 95       	lpm
		nop
    6dde:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6de0:	08 b9       	out	0x08, r16	; 8

		ret
    6de2:	08 95       	ret

00006de4 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6de4:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6de6:	e0 91 17 0a 	lds	r30, 0x0A17
	lds ZH,tile_table_hi
    6dea:	f0 91 18 0a 	lds	r31, 0x0A18
	mul r24,r18
    6dee:	82 9f       	mul	r24, r18
	add ZL,r0
    6df0:	e0 0d       	add	r30, r0
	adc ZH,r1
    6df2:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6df4:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6df6:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6df8:	62 9f       	mul	r22, r18
	add XL,r0
    6dfa:	a0 0d       	add	r26, r0
	adc XH,r1
    6dfc:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6dfe:	15 90       	lpm	r1, Z+
    6e00:	1d 92       	st	X+, r1
    6e02:	15 90       	lpm	r1, Z+
    6e04:	1d 92       	st	X+, r1
    6e06:	15 90       	lpm	r1, Z+
    6e08:	1d 92       	st	X+, r1
    6e0a:	15 90       	lpm	r1, Z+
    6e0c:	1d 92       	st	X+, r1
    6e0e:	15 90       	lpm	r1, Z+
    6e10:	1d 92       	st	X+, r1
    6e12:	15 90       	lpm	r1, Z+
    6e14:	1d 92       	st	X+, r1
    6e16:	15 90       	lpm	r1, Z+
    6e18:	1d 92       	st	X+, r1
    6e1a:	15 90       	lpm	r1, Z+
    6e1c:	1d 92       	st	X+, r1
    6e1e:	15 90       	lpm	r1, Z+
    6e20:	1d 92       	st	X+, r1
    6e22:	15 90       	lpm	r1, Z+
    6e24:	1d 92       	st	X+, r1
    6e26:	15 90       	lpm	r1, Z+
    6e28:	1d 92       	st	X+, r1
    6e2a:	15 90       	lpm	r1, Z+
    6e2c:	1d 92       	st	X+, r1
    6e2e:	15 90       	lpm	r1, Z+
    6e30:	1d 92       	st	X+, r1
    6e32:	15 90       	lpm	r1, Z+
    6e34:	1d 92       	st	X+, r1
    6e36:	15 90       	lpm	r1, Z+
    6e38:	1d 92       	st	X+, r1
    6e3a:	15 90       	lpm	r1, Z+
    6e3c:	1d 92       	st	X+, r1
    6e3e:	15 90       	lpm	r1, Z+
    6e40:	1d 92       	st	X+, r1
    6e42:	15 90       	lpm	r1, Z+
    6e44:	1d 92       	st	X+, r1
    6e46:	15 90       	lpm	r1, Z+
    6e48:	1d 92       	st	X+, r1
    6e4a:	15 90       	lpm	r1, Z+
    6e4c:	1d 92       	st	X+, r1
    6e4e:	15 90       	lpm	r1, Z+
    6e50:	1d 92       	st	X+, r1
    6e52:	15 90       	lpm	r1, Z+
    6e54:	1d 92       	st	X+, r1
    6e56:	15 90       	lpm	r1, Z+
    6e58:	1d 92       	st	X+, r1
    6e5a:	15 90       	lpm	r1, Z+
    6e5c:	1d 92       	st	X+, r1
    6e5e:	15 90       	lpm	r1, Z+
    6e60:	1d 92       	st	X+, r1
    6e62:	15 90       	lpm	r1, Z+
    6e64:	1d 92       	st	X+, r1
    6e66:	15 90       	lpm	r1, Z+
    6e68:	1d 92       	st	X+, r1
    6e6a:	15 90       	lpm	r1, Z+
    6e6c:	1d 92       	st	X+, r1
    6e6e:	15 90       	lpm	r1, Z+
    6e70:	1d 92       	st	X+, r1
    6e72:	15 90       	lpm	r1, Z+
    6e74:	1d 92       	st	X+, r1
    6e76:	15 90       	lpm	r1, Z+
    6e78:	1d 92       	st	X+, r1
    6e7a:	15 90       	lpm	r1, Z+
    6e7c:	1d 92       	st	X+, r1
    6e7e:	15 90       	lpm	r1, Z+
    6e80:	1d 92       	st	X+, r1
    6e82:	15 90       	lpm	r1, Z+
    6e84:	1d 92       	st	X+, r1
    6e86:	15 90       	lpm	r1, Z+
    6e88:	1d 92       	st	X+, r1
    6e8a:	15 90       	lpm	r1, Z+
    6e8c:	1d 92       	st	X+, r1
    6e8e:	15 90       	lpm	r1, Z+
    6e90:	1d 92       	st	X+, r1
    6e92:	15 90       	lpm	r1, Z+
    6e94:	1d 92       	st	X+, r1
    6e96:	15 90       	lpm	r1, Z+
    6e98:	1d 92       	st	X+, r1
    6e9a:	15 90       	lpm	r1, Z+
    6e9c:	1d 92       	st	X+, r1
    6e9e:	15 90       	lpm	r1, Z+
    6ea0:	1d 92       	st	X+, r1
    6ea2:	15 90       	lpm	r1, Z+
    6ea4:	1d 92       	st	X+, r1
    6ea6:	15 90       	lpm	r1, Z+
    6ea8:	1d 92       	st	X+, r1
    6eaa:	15 90       	lpm	r1, Z+
    6eac:	1d 92       	st	X+, r1
    6eae:	15 90       	lpm	r1, Z+
    6eb0:	1d 92       	st	X+, r1
    6eb2:	15 90       	lpm	r1, Z+
    6eb4:	1d 92       	st	X+, r1
    6eb6:	15 90       	lpm	r1, Z+
    6eb8:	1d 92       	st	X+, r1
    6eba:	15 90       	lpm	r1, Z+
    6ebc:	1d 92       	st	X+, r1
    6ebe:	15 90       	lpm	r1, Z+
    6ec0:	1d 92       	st	X+, r1
    6ec2:	15 90       	lpm	r1, Z+
    6ec4:	1d 92       	st	X+, r1
    6ec6:	15 90       	lpm	r1, Z+
    6ec8:	1d 92       	st	X+, r1
    6eca:	15 90       	lpm	r1, Z+
    6ecc:	1d 92       	st	X+, r1
    6ece:	15 90       	lpm	r1, Z+
    6ed0:	1d 92       	st	X+, r1
    6ed2:	15 90       	lpm	r1, Z+
    6ed4:	1d 92       	st	X+, r1
    6ed6:	15 90       	lpm	r1, Z+
    6ed8:	1d 92       	st	X+, r1
    6eda:	15 90       	lpm	r1, Z+
    6edc:	1d 92       	st	X+, r1
    6ede:	15 90       	lpm	r1, Z+
    6ee0:	1d 92       	st	X+, r1
    6ee2:	15 90       	lpm	r1, Z+
    6ee4:	1d 92       	st	X+, r1
    6ee6:	15 90       	lpm	r1, Z+
    6ee8:	1d 92       	st	X+, r1
    6eea:	15 90       	lpm	r1, Z+
    6eec:	1d 92       	st	X+, r1
    6eee:	15 90       	lpm	r1, Z+
    6ef0:	1d 92       	st	X+, r1
    6ef2:	15 90       	lpm	r1, Z+
    6ef4:	1d 92       	st	X+, r1
    6ef6:	15 90       	lpm	r1, Z+
    6ef8:	1d 92       	st	X+, r1
    6efa:	15 90       	lpm	r1, Z+
    6efc:	1d 92       	st	X+, r1
	clr r1
    6efe:	11 24       	eor	r1, r1
	ret
    6f00:	08 95       	ret

00006f02 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6f02:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6f04:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(ram_tiles)
    6f06:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    6f08:	82 9f       	mul	r24, r18
	add ZL,r0
    6f0a:	e0 0d       	add	r30, r0
	adc ZH,r1
    6f0c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6f0e:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6f10:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6f12:	62 9f       	mul	r22, r18
	add XL,r0
    6f14:	a0 0d       	add	r26, r0
	adc XH,r1
    6f16:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6f18:	11 90       	ld	r1, Z+
    6f1a:	1d 92       	st	X+, r1
    6f1c:	11 90       	ld	r1, Z+
    6f1e:	1d 92       	st	X+, r1
    6f20:	11 90       	ld	r1, Z+
    6f22:	1d 92       	st	X+, r1
    6f24:	11 90       	ld	r1, Z+
    6f26:	1d 92       	st	X+, r1
    6f28:	11 90       	ld	r1, Z+
    6f2a:	1d 92       	st	X+, r1
    6f2c:	11 90       	ld	r1, Z+
    6f2e:	1d 92       	st	X+, r1
    6f30:	11 90       	ld	r1, Z+
    6f32:	1d 92       	st	X+, r1
    6f34:	11 90       	ld	r1, Z+
    6f36:	1d 92       	st	X+, r1
    6f38:	11 90       	ld	r1, Z+
    6f3a:	1d 92       	st	X+, r1
    6f3c:	11 90       	ld	r1, Z+
    6f3e:	1d 92       	st	X+, r1
    6f40:	11 90       	ld	r1, Z+
    6f42:	1d 92       	st	X+, r1
    6f44:	11 90       	ld	r1, Z+
    6f46:	1d 92       	st	X+, r1
    6f48:	11 90       	ld	r1, Z+
    6f4a:	1d 92       	st	X+, r1
    6f4c:	11 90       	ld	r1, Z+
    6f4e:	1d 92       	st	X+, r1
    6f50:	11 90       	ld	r1, Z+
    6f52:	1d 92       	st	X+, r1
    6f54:	11 90       	ld	r1, Z+
    6f56:	1d 92       	st	X+, r1
    6f58:	11 90       	ld	r1, Z+
    6f5a:	1d 92       	st	X+, r1
    6f5c:	11 90       	ld	r1, Z+
    6f5e:	1d 92       	st	X+, r1
    6f60:	11 90       	ld	r1, Z+
    6f62:	1d 92       	st	X+, r1
    6f64:	11 90       	ld	r1, Z+
    6f66:	1d 92       	st	X+, r1
    6f68:	11 90       	ld	r1, Z+
    6f6a:	1d 92       	st	X+, r1
    6f6c:	11 90       	ld	r1, Z+
    6f6e:	1d 92       	st	X+, r1
    6f70:	11 90       	ld	r1, Z+
    6f72:	1d 92       	st	X+, r1
    6f74:	11 90       	ld	r1, Z+
    6f76:	1d 92       	st	X+, r1
    6f78:	11 90       	ld	r1, Z+
    6f7a:	1d 92       	st	X+, r1
    6f7c:	11 90       	ld	r1, Z+
    6f7e:	1d 92       	st	X+, r1
    6f80:	11 90       	ld	r1, Z+
    6f82:	1d 92       	st	X+, r1
    6f84:	11 90       	ld	r1, Z+
    6f86:	1d 92       	st	X+, r1
    6f88:	11 90       	ld	r1, Z+
    6f8a:	1d 92       	st	X+, r1
    6f8c:	11 90       	ld	r1, Z+
    6f8e:	1d 92       	st	X+, r1
    6f90:	11 90       	ld	r1, Z+
    6f92:	1d 92       	st	X+, r1
    6f94:	11 90       	ld	r1, Z+
    6f96:	1d 92       	st	X+, r1
    6f98:	11 90       	ld	r1, Z+
    6f9a:	1d 92       	st	X+, r1
    6f9c:	11 90       	ld	r1, Z+
    6f9e:	1d 92       	st	X+, r1
    6fa0:	11 90       	ld	r1, Z+
    6fa2:	1d 92       	st	X+, r1
    6fa4:	11 90       	ld	r1, Z+
    6fa6:	1d 92       	st	X+, r1
    6fa8:	11 90       	ld	r1, Z+
    6faa:	1d 92       	st	X+, r1
    6fac:	11 90       	ld	r1, Z+
    6fae:	1d 92       	st	X+, r1
    6fb0:	11 90       	ld	r1, Z+
    6fb2:	1d 92       	st	X+, r1
    6fb4:	11 90       	ld	r1, Z+
    6fb6:	1d 92       	st	X+, r1
    6fb8:	11 90       	ld	r1, Z+
    6fba:	1d 92       	st	X+, r1
    6fbc:	11 90       	ld	r1, Z+
    6fbe:	1d 92       	st	X+, r1
    6fc0:	11 90       	ld	r1, Z+
    6fc2:	1d 92       	st	X+, r1
    6fc4:	11 90       	ld	r1, Z+
    6fc6:	1d 92       	st	X+, r1
    6fc8:	11 90       	ld	r1, Z+
    6fca:	1d 92       	st	X+, r1
    6fcc:	11 90       	ld	r1, Z+
    6fce:	1d 92       	st	X+, r1
    6fd0:	11 90       	ld	r1, Z+
    6fd2:	1d 92       	st	X+, r1
    6fd4:	11 90       	ld	r1, Z+
    6fd6:	1d 92       	st	X+, r1
    6fd8:	11 90       	ld	r1, Z+
    6fda:	1d 92       	st	X+, r1
    6fdc:	11 90       	ld	r1, Z+
    6fde:	1d 92       	st	X+, r1
    6fe0:	11 90       	ld	r1, Z+
    6fe2:	1d 92       	st	X+, r1
    6fe4:	11 90       	ld	r1, Z+
    6fe6:	1d 92       	st	X+, r1
    6fe8:	11 90       	ld	r1, Z+
    6fea:	1d 92       	st	X+, r1
    6fec:	11 90       	ld	r1, Z+
    6fee:	1d 92       	st	X+, r1
    6ff0:	11 90       	ld	r1, Z+
    6ff2:	1d 92       	st	X+, r1
    6ff4:	11 90       	ld	r1, Z+
    6ff6:	1d 92       	st	X+, r1
    6ff8:	11 90       	ld	r1, Z+
    6ffa:	1d 92       	st	X+, r1
    6ffc:	11 90       	ld	r1, Z+
    6ffe:	1d 92       	st	X+, r1
    7000:	11 90       	ld	r1, Z+
    7002:	1d 92       	st	X+, r1
    7004:	11 90       	ld	r1, Z+
    7006:	1d 92       	st	X+, r1
    7008:	11 90       	ld	r1, Z+
    700a:	1d 92       	st	X+, r1
    700c:	11 90       	ld	r1, Z+
    700e:	1d 92       	st	X+, r1
    7010:	11 90       	ld	r1, Z+
    7012:	1d 92       	st	X+, r1
    7014:	11 90       	ld	r1, Z+
    7016:	1d 92       	st	X+, r1
	clr r1
    7018:	11 24       	eor	r1, r1
	ret
    701a:	08 95       	ret

0000701c <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    701c:	e0 91 0d 0a 	lds	r30, 0x0A0D
	mov   r24,     ZL
    7020:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    7022:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    7024:	e8 0f       	add	r30, r24
	clr   ZH
    7026:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    7028:	e0 53       	subi	r30, 0x30	; 48
	sbci  ZH,      hi8(-(ram_tiles_restore))
    702a:	f6 4f       	sbci	r31, 0xF6	; 246

	lds   r0,      free_tile_index
    702c:	00 90 0c 0a 	lds	r0, 0x0A0C
	sub   r24,     r0
    7030:	80 19       	sub	r24, r0
	brcc  rbg_exit
    7032:	30 f4       	brcc	.+12     	; 0x7040 <rbg_exit>

00007034 <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    7034:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    7036:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    7038:	01 90       	ld	r0, Z+
	st    X,       r0
    703a:	0c 92       	st	X, r0
	inc   r24
    703c:	83 95       	inc	r24
	brne  rbg_loop
    703e:	d1 f7       	brne	.-12     	; 0x7034 <rbg_loop>

00007040 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    7040:	08 95       	ret

00007042 <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    7042:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    7044:	79 9f       	mul	r23, r25
	mov   XL,      r1
    7046:	a1 2d       	mov	r26, r1
	clr   XH
    7048:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    704a:	a1 5f       	subi	r26, 0xF1	; 241
	sbci  XH,      hi8(-(sprites_tile_banks))
    704c:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    704e:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    7050:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7052:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    7054:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    7056:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7058:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    705a:	89 9f       	mul	r24, r25
	movw  XL,      r0
    705c:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    705e:	a0 53       	subi	r26, 0x30	; 48
	sbci  XH,      hi8(-(ram_tiles))
    7060:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    7062:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    7064:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    7066:	09 c0       	rjmp	.+18     	; 0x707a <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    7068:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    706a:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    706c:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    706e:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7070:	0a c0       	rjmp	.+20     	; 0x7086 <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    7072:	17 96       	adiw	r26, 0x07	; 7

00007074 <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    7074:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    7076:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    7078:	08 c0       	rjmp	.+16     	; 0x708a <x_check_end>

0000707a <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    707a:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    707c:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    707e:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7080:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    7082:	f8 cf       	rjmp	.-16     	; 0x7074 <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    7084:	11 97       	sbiw	r26, 0x01	; 1

00007086 <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    7086:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    7088:	b9 1f       	adc	r27, r25

0000708a <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    708a:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    708c:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    708e:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7090:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7092:	09 c0       	rjmp	.+18     	; 0x70a6 <y_2nd_tile>

	mul   r22,     r19
    7094:	63 9f       	mul	r22, r19
	add   XL,      r0
    7096:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    7098:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    709a:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    709c:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    709e:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    70a0:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    70a2:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    70a4:	08 c0       	rjmp	.+16     	; 0x70b6 <y_check_end>

000070a6 <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    70a6:	13 2e       	mov	r1, r19
	dec   r1
    70a8:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    70aa:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    70ac:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    70ae:	61 9d       	mul	r22, r1
	add   ZL,      r0
    70b0:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    70b2:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    70b4:	13 2e       	mov	r1, r19

000070b6 <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    70b6:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    70b8:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    70ba:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    70bc:	05 c0       	rjmp	.+10     	; 0x70c8 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    70be:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    70c0:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    70c2:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    70c4:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    70c6:	04 c0       	rjmp	.+8      	; 0x70d0 <x_diff_end>

000070c8 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    70c8:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    70ca:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    70cc:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    70ce:	6f ef       	ldi	r22, 0xFF	; 255

000070d0 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    70d0:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    70d2:	04 2e       	mov	r0, r20
	lsr   r20
    70d4:	46 95       	lsr	r20
	brcc  x_loop1
    70d6:	30 f4       	brcc	.+12     	; 0x70e4 <x_loop1>
	breq  x_loopx
    70d8:	61 f0       	breq	.+24     	; 0x70f2 <x_loopx>

000070da <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70da:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70dc:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70de:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    70e0:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    70e2:	b7 1f       	adc	r27, r23

000070e4 <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70e4:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70e6:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70e8:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    70ea:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    70ec:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    70ee:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    70f0:	a1 f7       	brne	.-24     	; 0x70da <x_loop0>

000070f2 <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70f2:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70f4:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70f6:	2c 93       	st	X, r18

	dec   r1
    70f8:	1a 94       	dec	r1
	breq  loop_e
    70fa:	49 f0       	breq	.+18     	; 0x710e <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    70fc:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    70fe:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    7100:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    7102:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    7104:	40 2d       	mov	r20, r0
	lsr   r20
    7106:	46 95       	lsr	r20
	brcc  x_loop1
    7108:	68 f7       	brcc	.-38     	; 0x70e4 <x_loop1>
	brne  x_loop0
    710a:	39 f7       	brne	.-50     	; 0x70da <x_loop0>
	rjmp  x_loopx
    710c:	f2 cf       	rjmp	.-28     	; 0x70f2 <x_loopx>

0000710e <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    710e:	08 95       	ret

00007110 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    7110:	0f 92       	push	r0
	push  r1
    7112:	1f 92       	push	r1
	push  ZL
    7114:	ef 93       	push	r30
	push  ZH
    7116:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    7118:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    711a:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    711e:	ff 93       	push	r31

	sbrc  ZL,      2
    7120:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    7122:	04 c0       	rjmp	.+8      	; 0x712c <__vector_13+0x1c>
	sbrc  ZL,      1
    7124:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    7126:	02 c0       	rjmp	.+4      	; 0x712c <__vector_13+0x1c>
	nop
    7128:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    712a:	00 c0       	rjmp	.+0      	; 0x712c <__vector_13+0x1c>
	sbrs  ZL,      0
    712c:	e0 ff       	sbrs	r30, 0
	rjmp  .
    712e:	00 c0       	rjmp	.+0      	; 0x7130 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    7130:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    7134:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7136:	e0 93 1f 0a 	sts	0x0A1F, r30

	;process sync phases
	lds ZH,sync_phase
    713a:	f0 91 1e 0a 	lds	r31, 0x0A1E
	sbrc ZH,0
    713e:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7140:	51 c0       	rjmp	.+162    	; 0x71e4 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7142:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7144:	98 f0       	brcs	.+38     	; 0x716c <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7146:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7148:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    714c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    714e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7152:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7154:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7156:	26 f4       	brtc	.+8      	; 0x7160 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7158:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    715a:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <update_sound>
	rjmp sync_end
    715e:	b2 c0       	rjmp	.+356    	; 0x72c4 <sync_end>

00007160 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7160:	e5 e1       	ldi	r30, 0x15	; 21
    7162:	ea 95       	dec	r30
    7164:	f1 f7       	brne	.-4      	; 0x7162 <sync_pre_eq_no_sound_update+0x2>
    7166:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7168:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    716a:	ac c0       	rjmp	.+344    	; 0x72c4 <sync_end>

0000716c <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    716c:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    716e:	08 f1       	brcs	.+66     	; 0x71b2 <sync_post_eq>

	rjmp .
    7170:	00 c0       	rjmp	.+0      	; 0x7172 <sync_eq+0x6>
	rjmp .
    7172:	00 c0       	rjmp	.+0      	; 0x7174 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7174:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7176:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7178:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    717a:	16 f4       	brtc	.+4      	; 0x7180 <sync_eq_skip>
	
	call update_sound
    717c:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <update_sound>

00007180 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7180:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7182:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7186:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7188:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    718c:	9b c0       	rjmp	.+310    	; 0x72c4 <sync_end>

0000718e <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    718e:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7190:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    7194:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    7196:	04 c0       	rjmp	.+8      	; 0x71a0 <__vector_14+0x12>
	sbrc  ZL,      1
    7198:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    719a:	02 c0       	rjmp	.+4      	; 0x71a0 <__vector_14+0x12>
	nop
    719c:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    719e:	00 c0       	rjmp	.+0      	; 0x71a0 <__vector_14+0x12>
	sbrs  ZL,      0
    71a0:	e0 ff       	sbrs	r30, 0
	rjmp  .
    71a2:	00 c0       	rjmp	.+0      	; 0x71a4 <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    71a4:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    71a6:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    71a8:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    71aa:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    71ae:	ef 91       	pop	r30
	reti
    71b0:	18 95       	reti

000071b2 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    71b2:	00 c0       	rjmp	.+0      	; 0x71b4 <sync_post_eq+0x2>

	bst ZL,0
    71b4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71b6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    71b8:	26 f4       	brtc	.+8      	; 0x71c2 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    71ba:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    71bc:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <update_sound>
	rjmp sync_pre_eq_cont
    71c0:	05 c0       	rjmp	.+10     	; 0x71cc <sync_pre_eq_cont>

000071c2 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    71c2:	e5 e1       	ldi	r30, 0x15	; 21
    71c4:	ea 95       	dec	r30
    71c6:	f1 f7       	brne	.-4      	; 0x71c4 <sync_post_eq_no_sound_update+0x2>
    71c8:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    71ca:	28 9a       	sbi	0x05, 0	; 5

000071cc <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    71cc:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    71d0:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    71d2:	09 f0       	breq	.+2      	; 0x71d6 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    71d4:	77 c0       	rjmp	.+238    	; 0x72c4 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    71d6:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    71d8:	e0 93 1f 0a 	sts	0x0A1F, r30
	ldi ZL,1
    71dc:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    71de:	e0 93 1e 0a 	sts	0x0A1E, r30
	
	rjmp sync_end
    71e2:	70 c0       	rjmp	.+224    	; 0x72c4 <sync_end>

000071e4 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    71e4:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    71e6:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    71ea:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    71ec:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    71f0:	00 c0       	rjmp	.+0      	; 0x71f2 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71f2:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    71f4:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    71f6:	00 c0       	rjmp	.+0      	; 0x71f8 <sync_hsync+0x14>
	call update_sound
    71f8:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    71fc:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    71fe:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    7202:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7204:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cp ZL,ZH
    7208:	ef 17       	cp	r30, r31
	brsh no_render
    720a:	d8 f4       	brcc	.+54     	; 0x7242 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    720c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    720e:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    7212:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7214:	00 90 26 0a 	lds	r0, 0x0A26
	sub ZH,r0			
    7218:	f0 19       	sub	r31, r0
	cp ZL,ZH
    721a:	ef 17       	cp	r30, r31
	brlo no_render
    721c:	90 f0       	brcs	.+36     	; 0x7242 <no_render>

	;push r1-r29
	ldi ZL,29
    721e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7220:	ff 27       	eor	r31, r31

00007222 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7222:	00 80       	ld	r0, Z
	push r0
    7224:	0f 92       	push	r0
	dec ZL
    7226:	ea 95       	dec	r30
	brne push_loop	
    7228:	e1 f7       	brne	.-8      	; 0x7222 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    722a:	05 e0       	ldi	r16, 0x05	; 5
    722c:	0a 95       	dec	r16
    722e:	f1 f7       	brne	.-4      	; 0x722c <push_loop+0xa>
    7230:	00 c0       	rjmp	.+0      	; 0x7232 <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    7232:	0e 94 1c 36 	call	0x6c38	; 0x6c38 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7236:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7238:	ff 27       	eor	r31, r31

0000723a <pop_loop>:
pop_loop:
	pop r0
    723a:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    723c:	01 92       	st	Z+, r0
	cpi ZL,30
    723e:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7240:	e0 f3       	brcs	.-8      	; 0x723a <pop_loop>

00007242 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7242:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    7246:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7248:	09 f0       	breq	.+2      	; 0x724c <no_render+0xa>
	rjmp sync_end
    724a:	3c c0       	rjmp	.+120    	; 0x72c4 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    724c:	2f 93       	push	r18
	push r19
    724e:	3f 93       	push	r19
	push r20
    7250:	4f 93       	push	r20
	push r21
    7252:	5f 93       	push	r21
	push r22
    7254:	6f 93       	push	r22
	push r23
    7256:	7f 93       	push	r23
	push r24
    7258:	8f 93       	push	r24
	push r25
    725a:	9f 93       	push	r25
	push r26
    725c:	af 93       	push	r26
	push r27
    725e:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7260:	78 94       	sei
	clr r1
    7262:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7264:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7266:	e0 93 1e 0a 	sts	0x0A1E, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    726a:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    726c:	e0 93 1f 0a 	sts	0x0A1F, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7270:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    7274:	90 91 30 0a 	lds	r25, 0x0A30
	adiw r24,1
    7278:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    727a:	80 93 2f 0a 	sts	0x0A2F, r24
	sts vsync_counter+1,r25
    727e:	90 93 30 0a 	sts	0x0A30, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7282:	e0 91 21 0a 	lds	r30, 0x0A21
	lds ZH,pre_vsync_user_callback+1
    7286:	f0 91 22 0a 	lds	r31, 0x0A22
	cp  ZL,r1
    728a:	e1 15       	cp	r30, r1
	cpc ZH,r1
    728c:	f1 05       	cpc	r31, r1
	breq .+2 
    728e:	09 f0       	breq	.+2      	; 0x7292 <no_render+0x50>
	icall
    7290:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7292:	0e 94 25 3b 	call	0x764a	; 0x764a <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7296:	0e 94 7a 49 	call	0x92f4	; 0x92f4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    729a:	0e 94 74 39 	call	0x72e8	; 0x72e8 <process_music>
	clr r1
    729e:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    72a0:	e0 91 23 0a 	lds	r30, 0x0A23
	lds ZH,post_vsync_user_callback+1
    72a4:	f0 91 24 0a 	lds	r31, 0x0A24
	cp  ZL,r1
    72a8:	e1 15       	cp	r30, r1
	cpc ZH,r1
    72aa:	f1 05       	cpc	r31, r1
	breq .+2 
    72ac:	09 f0       	breq	.+2      	; 0x72b0 <no_render+0x6e>
	icall
    72ae:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    72b0:	bf 91       	pop	r27
	pop r26
    72b2:	af 91       	pop	r26
	pop r25
    72b4:	9f 91       	pop	r25
	pop r24
    72b6:	8f 91       	pop	r24
	pop r23
    72b8:	7f 91       	pop	r23
	pop r22
    72ba:	6f 91       	pop	r22
	pop r21
    72bc:	5f 91       	pop	r21
	pop r20
    72be:	4f 91       	pop	r20
	pop r19
    72c0:	3f 91       	pop	r19
	pop r18
    72c2:	2f 91       	pop	r18

000072c4 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    72c4:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    72c6:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    72c8:	ff 91       	pop	r31
	pop ZL
    72ca:	ef 91       	pop	r30
	pop r1
    72cc:	1f 90       	pop	r1
	pop r0
    72ce:	0f 90       	pop	r0
	reti
    72d0:	18 95       	reti

000072d2 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    72d2:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    72d4:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    72d6:	00 c0       	rjmp	.+0      	; 0x72d8 <hsync_pulse+0x6>
	call update_sound
    72d8:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <update_sound>

	lds ZL,sync_pulse
    72dc:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    72e0:	ea 95       	dec	r30
	sts sync_pulse,ZL
    72e2:	e0 93 1f 0a 	sts	0x0A1F, r30

	ret
    72e6:	08 95       	ret

000072e8 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    72e8:	e0 91 43 0a 	lds	r30, 0x0A43
	sbrc ZL,0
    72ec:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    72ee:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <ProcessMusic>
#endif

	ret
    72f2:	08 95       	ret

000072f4 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    72f4:	0f 93       	push	r16
	push r17
    72f6:	1f 93       	push	r17
	push r18
    72f8:	2f 93       	push	r18
	push r28
    72fa:	cf 93       	push	r28
	push r29
    72fc:	df 93       	push	r29

	mov r18,ZL
    72fe:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7300:	00 91 45 0a 	lds	r16, 0x0A45
	lds r17,tr1_pos_frac
    7304:	10 91 47 0a 	lds	r17, 0x0A47
	add	r17,r16	;add step to fractional part of sample pos
    7308:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    730a:	00 91 46 0a 	lds	r16, 0x0A46
	lds ZL,tr1_pos_lo
    730e:	e0 91 48 0a 	lds	r30, 0x0A48
	lds ZH,tr1_pos_hi 
    7312:	f0 91 49 0a 	lds	r31, 0x0A49
	adc ZL,r16	;add step to low byte of sample pos
    7316:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7318:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    731a:	e0 93 48 0a 	sts	0x0A48, r30
	sts tr1_pos_frac,r17
    731e:	10 93 47 0a 	sts	0x0A47, r17
	lds r17,tr1_vol
    7322:	10 91 44 0a 	lds	r17, 0x0A44
	mulsu r16,r17;(sample*mixing vol)
    7326:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7328:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    732a:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    732c:	d0 2d       	mov	r29, r0
	nop
    732e:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7330:	00 91 4b 0a 	lds	r16, 0x0A4B
	lds r17,tr2_pos_frac
    7334:	10 91 4d 0a 	lds	r17, 0x0A4D
	add	r17,r16	;add step to fractional part of sample pos
    7338:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    733a:	00 91 4c 0a 	lds	r16, 0x0A4C
	lds ZL,tr2_pos_lo
    733e:	e0 91 4e 0a 	lds	r30, 0x0A4E
	lds ZH,tr2_pos_hi 
    7342:	f0 91 4f 0a 	lds	r31, 0x0A4F
	adc ZL,r16	;add step to low byte of sample pos
    7346:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7348:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    734a:	e0 93 4e 0a 	sts	0x0A4E, r30
	sts tr2_pos_frac,r17
    734e:	10 93 4d 0a 	sts	0x0A4D, r17
	lds r17,tr2_vol
    7352:	10 91 4a 0a 	lds	r17, 0x0A4A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7356:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7358:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    735a:	20 ff       	sbrs	r18, 0
	rjmp .
    735c:	00 c0       	rjmp	.+0      	; 0x735e <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    735e:	01 03       	mulsu	r16, r17
	clr r0
    7360:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7362:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7364:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7366:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7368:	00 91 51 0a 	lds	r16, 0x0A51
	lds r17,tr3_pos_frac
    736c:	10 91 53 0a 	lds	r17, 0x0A53
	add	r17,r16				;add step to fractional part of sample pos
    7370:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7372:	00 91 52 0a 	lds	r16, 0x0A52
	lds ZL,tr3_pos_lo
    7376:	e0 91 54 0a 	lds	r30, 0x0A54
	lds ZH,tr3_pos_hi 
    737a:	f0 91 55 0a 	lds	r31, 0x0A55
	adc ZL,r16				;add step to low byte of sample pos
    737e:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7380:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7382:	e0 93 54 0a 	sts	0x0A54, r30
	sts tr3_pos_frac,r17
    7386:	10 93 53 0a 	sts	0x0A53, r17
	lds r17,tr3_vol
    738a:	10 91 50 0a 	lds	r17, 0x0A50
	mulsu r16,r17			;(sample*mixing vol)
    738e:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7390:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7392:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7394:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7396:	00 91 58 0a 	lds	r16, 0x0A58
	lds r17,tr4_barrel_hi
    739a:	10 91 59 0a 	lds	r17, 0x0A59
	lds ZL,tr4_divider
    739e:	e0 91 5a 0a 	lds	r30, 0x0A5A
	dec ZL	
    73a2:	ea 95       	dec	r30
	brpl ch4_no_shift	
    73a4:	92 f4       	brpl	.+36     	; 0x73ca <ch4_no_shift>

	lds ZH,tr4_params
    73a6:	f0 91 57 0a 	lds	r31, 0x0A57
	mov ZL,ZH
    73aa:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    73ac:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    73ae:	00 2e       	mov	r0, r16
	lsr r0
    73b0:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    73b2:	00 26       	eor	r0, r16
	bst r0,0
    73b4:	00 fa       	bst	r0, 0
	lsr r17
    73b6:	16 95       	lsr	r17
	ror r16
    73b8:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    73ba:	16 f9       	bld	r17, 6
	sbrs ZH,0
    73bc:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    73be:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    73c0:	00 93 58 0a 	sts	0x0A58, r16
	sts tr4_barrel_hi,r17
    73c4:	10 93 59 0a 	sts	0x0A59, r17

	rjmp ch4_end
    73c8:	03 c0       	rjmp	.+6      	; 0x73d0 <ch4_end>

000073ca <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    73ca:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    73cc:	1a 95       	dec	r17
	brne .-4
    73ce:	f1 f7       	brne	.-4      	; 0x73cc <ch4_no_shift+0x2>

000073d0 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    73d0:	e0 93 5a 0a 	sts	0x0A5A, r30
	ldi r17,0x80 ;-128
    73d4:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    73d6:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    73d8:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    73da:	21 ff       	sbrs	r18, 1
	rjmp .
    73dc:	00 c0       	rjmp	.+0      	; 0x73de <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    73de:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    73e0:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    73e2:	00 91 56 0a 	lds	r16, 0x0A56

	mulsu r17,r16;(sample*mixing vol)
    73e6:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    73e8:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    73ea:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    73ec:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    73ee:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    73f0:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    73f2:	d0 05       	cpc	r29, r0
	brlt .+2
    73f4:	0c f0       	brlt	.+2      	; 0x73f8 <ch4_end+0x28>
	ldi r28,127
    73f6:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    73f8:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    73fa:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    73fc:	d0 05       	cpc	r29, r0
	brge .+2
    73fe:	0c f4       	brge	.+2      	; 0x7402 <ch4_end+0x32>
	ldi r28,-128
    7400:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7402:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7404:	c0 93 b3 00 	sts	0x00B3, r28
	

#if UART == 1
	;read UART data (23 cycles)
	
	ldi ZL,lo8(uart_rx_buf)
    7408:	e4 e8       	ldi	r30, 0x84	; 132
	ldi ZH,hi8(uart_rx_buf)
    740a:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_rx_head
    740c:	00 91 81 0a 	lds	r16, 0x0A81

	clr r0
    7410:	00 24       	eor	r0, r0
	add ZL,r16
    7412:	e0 0f       	add	r30, r16
	adc ZH,r0
    7414:	f0 1d       	adc	r31, r0

	lds r17,_SFR_MEM_ADDR(UCSR0A)	
    7416:	10 91 c0 00 	lds	r17, 0x00C0

	sbrs r17,RXC0	;data in?
    741a:	17 ff       	sbrs	r17, 7
	rjmp 1f
    741c:	08 c0       	rjmp	.+16     	; 0x742e <ch4_end+0x5e>

	lds r18,_SFR_MEM_ADDR(UDR0)
    741e:	20 91 c6 00 	lds	r18, 0x00C6
	st Z,r18
    7422:	20 83       	st	Z, r18
	inc r16
    7424:	03 95       	inc	r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
    7426:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_rx_head,r16
    7428:	00 93 81 0a 	sts	0x0A81, r16
	rjmp uart_tx
    742c:	03 c0       	rjmp	.+6      	; 0x7434 <uart_tx>
1:
	WAIT r28,9
    742e:	c3 e0       	ldi	r28, 0x03	; 3
    7430:	ca 95       	dec	r28
    7432:	f1 f7       	brne	.-4      	; 0x7430 <ch4_end+0x60>

00007434 <uart_tx>:

uart_tx:
	;send UART data (24 cycles)
	
	ldi ZL,lo8(uart_tx_buf)
    7434:	e0 e6       	ldi	r30, 0x60	; 96
	ldi ZH,hi8(uart_tx_buf)
    7436:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_tx_tail
    7438:	00 91 c4 0a 	lds	r16, 0x0AC4
	lds r29,uart_tx_head
    743c:	d0 91 82 0a 	lds	r29, 0x0A82
	
	add ZL,r16
    7440:	e0 0f       	add	r30, r16
	adc ZH,r0	;r0=0
    7442:	f0 1d       	adc	r31, r0

	lds r28,_SFR_MEM_ADDR(UCSR0A)
    7444:	c0 91 c0 00 	lds	r28, 0x00C0
	andi r28,(1<<UDRE0)	 	//UCSR0A & (1<<UDRE0)
    7448:	c0 72       	andi	r28, 0x20	; 32

	;if(ring_head == ring_tail || (UCSR0A & (1<<UDRE0)==0 ), nothing to send
	sub r29,r16
    744a:	d0 1b       	sub	r29, r16
	mul r28,r29
    744c:	cd 9f       	mul	r28, r29
	breq 1f		
    744e:	41 f0       	breq	.+16     	; 0x7460 <uart_tx+0x2c>

	ld r18,Z
    7450:	20 81       	ld	r18, Z
	sts _SFR_MEM_ADDR(UDR0),r18	;TCNT1=0x134
    7452:	20 93 c6 00 	sts	0x00C6, r18
	inc r16
    7456:	03 95       	inc	r16
	andi r16,(UART_TX_BUFFER_SIZE-1) ;wrap
    7458:	0f 71       	andi	r16, 0x1F	; 31
	sts uart_tx_tail,r16
    745a:	00 93 c4 0a 	sts	0x0AC4, r16
	rjmp update_sound_end
    745e:	03 c0       	rjmp	.+6      	; 0x7466 <update_sound_end>
1:
	WAIT r28,9
    7460:	c3 e0       	ldi	r28, 0x03	; 3
    7462:	ca 95       	dec	r28
    7464:	f1 f7       	brne	.-4      	; 0x7462 <uart_tx+0x2e>

00007466 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7466:	df 91       	pop	r29
	pop r28
    7468:	cf 91       	pop	r28
	pop r18
    746a:	2f 91       	pop	r18
	pop r17
    746c:	1f 91       	pop	r17
	pop r16
    746e:	0f 91       	pop	r16
	
	ret
    7470:	08 95       	ret

00007472 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7472:	80 93 0f 0a 	sts	0x0A0F, r24
	sts sprites_tile_banks+1,r25
    7476:	90 93 10 0a 	sts	0x0A10, r25
	ret
    747a:	08 95       	ret

0000747c <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    747c:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    747e:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7480:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    7482:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7484:	64 e1       	ldi	r22, 0x14	; 20

00007486 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7486:	6d 93       	st	X+, r22
	sbiw r30,1
    7488:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    748a:	e9 f7       	brne	.-6      	; 0x7486 <fill_vram_loop>

	clr r1
    748c:	11 24       	eor	r1, r1

	ret
    748e:	08 95       	ret

00007490 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7490:	50 91 19 0a 	lds	r21, 0x0A19
	add r20,21
    7494:	45 0f       	add	r20, r21
	rjmp SetTile	
    7496:	00 c0       	rjmp	.+0      	; 0x7498 <SetTile>

00007498 <SetTile>:

	ret

#else

	clr r25
    7498:	99 27       	eor	r25, r25
	clr r23	
    749a:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    749c:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    749e:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    74a0:	08 0e       	add	r0, r24
	adc r1,r25
    74a2:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    74a4:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    74a6:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    74a8:	a0 0d       	add	r26, r0
	adc XH,r1
    74aa:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    74ac:	4c 5e       	subi	r20, 0xEC	; 236
	st X,r20
    74ae:	4c 93       	st	X, r20

	clr r1
    74b0:	11 24       	eor	r1, r1

	ret
    74b2:	08 95       	ret

000074b4 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    74b4:	80 93 19 0a 	sts	0x0A19, r24
	ret
    74b8:	08 95       	ret

000074ba <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    74ba:	80 93 17 0a 	sts	0x0A17, r24
	sts tile_table_hi,r25	
    74be:	90 93 18 0a 	sts	0x0A18, r25
	ret
    74c2:	08 95       	ret

000074c4 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    74c4:	80 91 20 0a 	lds	r24, 0x0A20
	andi r24,SYNC_FLAG_VSYNC
    74c8:	81 70       	andi	r24, 0x01	; 1
	ret
    74ca:	08 95       	ret

000074cc <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    74cc:	20 91 20 0a 	lds	r18, 0x0A20
	andi r18,~SYNC_FLAG_VSYNC
    74d0:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    74d2:	20 93 20 0a 	sts	0x0A20, r18
	ret
    74d6:	08 95       	ret

000074d8 <GetVsyncCounter>:
; C-callable
; returns: (unsigned int) r25:r24
;************************************
.section .text.GetVsyncCounter
GetVsyncCounter:
	lds r24,vsync_counter
    74d8:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    74dc:	90 91 30 0a 	lds	r25, 0x0A30
	ret
    74e0:	08 95       	ret

000074e2 <ClearVsyncCounter>:
;
; C-callable
;************************************
.section .text.ClearVsyncCounter
ClearVsyncCounter:
	sts vsync_counter,r1
    74e2:	10 92 2f 0a 	sts	0x0A2F, r1
	sts vsync_counter+1,r1
    74e6:	10 92 30 0a 	sts	0x0A30, r1
	ret
    74ea:	08 95       	ret

000074ec <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    74ec:	88 23       	and	r24, r24
	brne rj_p2
    74ee:	29 f4       	brne	.+10     	; 0x74fa <rj_p2>
		
	lds r24,joypad1_status_lo
    74f0:	80 91 27 0a 	lds	r24, 0x0A27
	lds r25,joypad1_status_lo+1
    74f4:	90 91 28 0a 	lds	r25, 0x0A28
	ret
    74f8:	08 95       	ret

000074fa <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    74fa:	80 91 2b 0a 	lds	r24, 0x0A2B
	lds r25,joypad2_status_lo+1	
    74fe:	90 91 2c 0a 	lds	r25, 0x0A2C

	ret
    7502:	08 95       	ret

00007504 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7504:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7506:	fe cf       	rjmp	.-4      	; 0x7504 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7508:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    750a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    750c:	60 bd       	out	0x20, r22	; 32
   cli
    750e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7510:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7512:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7514:	78 94       	sei
   ret
    7516:	08 95       	ret

00007518 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7518:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    751a:	fe cf       	rjmp	.-4      	; 0x7518 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    751c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    751e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7520:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7522:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7524:	80 b5       	in	r24, 0x20	; 32
   sei
    7526:	78 94       	sei
   ret
    7528:	08 95       	ret

0000752a <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    752a:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    752c:	80 93 1f 0a 	sts	0x0A1F, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7530:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7534:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7538:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    753c:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7540:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7544:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7548:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    754c:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7550:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7552:	80 93 81 00 	sts	0x0081, r24

		cli
    7556:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7558:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    755a:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    755e:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7560:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7564:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7566:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    756a:	90 93 60 00 	sts	0x0060, r25
	
		sei
    756e:	78 94       	sei

00007570 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7570:	80 91 1f 0a 	lds	r24, 0x0A1F
		cpi r24,8
    7574:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7576:	e0 f3       	brcs	.-8      	; 0x7570 <wait>

		ret
    7578:	08 95       	ret

0000757a <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    757a:	80 91 31 0a 	lds	r24, 0x0A31
		lds r25,random_value+1
    757e:	90 91 32 0a 	lds	r25, 0x0A32
		ret
    7582:	08 95       	ret

00007584 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7584:	0f 93       	push	r16
		push r17
    7586:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7588:	0f b7       	in	r16, 0x3f	; 63
		push r16
    758a:	0f 93       	push	r16

		lds r16,sync_pulse
    758c:	00 91 1f 0a 	lds	r16, 0x0A1F
		inc r16
    7590:	03 95       	inc	r16
		sts sync_pulse,r16
    7592:	00 93 1f 0a 	sts	0x0A1F, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7596:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7598:	08 c0       	rjmp	.+16     	; 0x75aa <__vector_8+0x26>
		lds r17,random_value
    759a:	10 91 31 0a 	lds	r17, 0x0A31
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    759e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    75a2:	10 27       	eor	r17, r16
		sts random_value,r17
    75a4:	10 93 31 0a 	sts	0x0A31, r17
		rjmp 2f
    75a8:	07 c0       	rjmp	.+14     	; 0x75b8 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    75aa:	10 91 32 0a 	lds	r17, 0x0A32
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    75ae:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    75b2:	10 27       	eor	r17, r16
		sts random_value+1,r17
    75b4:	10 93 32 0a 	sts	0x0A32, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    75b8:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    75ba:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    75be:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    75c0:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    75c2:	1f 91       	pop	r17
		pop r16
    75c4:	0f 91       	pop	r16
		reti
    75c6:	18 95       	reti

000075c8 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    75c8:	98 e0       	ldi	r25, 0x08	; 8
    75ca:	88 e1       	ldi	r24, 0x18	; 24
    75cc:	0f b6       	in	r0, 0x3f	; 63
    75ce:	f8 94       	cli
    75d0:	a8 95       	wdr
    75d2:	80 93 60 00 	sts	0x0060, r24
    75d6:	0f be       	out	0x3f, r0	; 63
    75d8:	90 93 60 00 	sts	0x0060, r25
	while(1);
    75dc:	ff cf       	rjmp	.-2      	; 0x75dc <SoftReset+0x14>

000075de <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    75de:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    75e0:	c8 95       	lpm
    75e2:	c8 95       	lpm
		Wait200ns();
    75e4:	c8 95       	lpm
    75e6:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    75e8:	12 98       	cbi	0x02, 2	; 2
    75ea:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    75ec:	80 e0       	ldi	r24, 0x00	; 0
    75ee:	90 e0       	ldi	r25, 0x00	; 0
    75f0:	20 e0       	ldi	r18, 0x00	; 0
    75f2:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    75f4:	36 95       	lsr	r19
    75f6:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    75f8:	96 95       	lsr	r25
    75fa:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    75fc:	c8 95       	lpm
    75fe:	c8 95       	lpm
			Wait200ns();
    7600:	c8 95       	lpm
    7602:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7604:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7606:	00 9b       	sbis	0x00, 0	; 0
    7608:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    760a:	01 9b       	sbis	0x00, 1	; 0
    760c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    760e:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7610:	c8 95       	lpm
    7612:	c8 95       	lpm
			Wait200ns();
    7614:	c8 95       	lpm
    7616:	c8 95       	lpm
    7618:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    761a:	61 f7       	brne	.-40     	; 0x75f4 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    761c:	30 93 28 0a 	sts	0x0A28, r19
    7620:	20 93 27 0a 	sts	0x0A27, r18
		joypad2_status_lo=p2ButtonsLo;
    7624:	90 93 2c 0a 	sts	0x0A2C, r25
    7628:	80 93 2b 0a 	sts	0x0A2B, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    762c:	80 91 27 0a 	lds	r24, 0x0A27
    7630:	90 91 28 0a 	lds	r25, 0x0A28
    7634:	0f 97       	sbiw	r24, 0x0f	; 15
    7636:	31 f0       	breq	.+12     	; 0x7644 <ReadButtons+0x66>
    7638:	80 91 2b 0a 	lds	r24, 0x0A2B
    763c:	90 91 2c 0a 	lds	r25, 0x0A2C
    7640:	0f 97       	sbiw	r24, 0x0f	; 15
    7642:	11 f4       	brne	.+4      	; 0x7648 <ReadButtons+0x6a>
		SoftReset();
    7644:	0e 94 e4 3a 	call	0x75c8	; 0x75c8 <SoftReset>
    7648:	08 95       	ret

0000764a <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    764a:	10 92 80 0a 	sts	0x0A80, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    764e:	00 99       	sbic	0x00, 0	; 0
    7650:	03 c0       	rjmp	.+6      	; 0x7658 <ReadControllers+0xe>
    7652:	81 e0       	ldi	r24, 0x01	; 1
    7654:	80 93 80 0a 	sts	0x0A80, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7658:	01 99       	sbic	0x00, 1	; 0
    765a:	05 c0       	rjmp	.+10     	; 0x7666 <ReadControllers+0x1c>
    765c:	80 91 80 0a 	lds	r24, 0x0A80
    7660:	82 60       	ori	r24, 0x02	; 2
    7662:	80 93 80 0a 	sts	0x0A80, r24
			
	//read the standard buttons
	ReadButtons();
    7666:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <ReadButtons>

0000766a <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    766a:	cf 93       	push	r28
    766c:	df 93       	push	r29
    766e:	c0 e0       	ldi	r28, 0x00	; 0
    7670:	d0 e0       	ldi	r29, 0x00	; 0
    7672:	fe 01       	movw	r30, r28
    7674:	e2 56       	subi	r30, 0x62	; 98
    7676:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7678:	64 91       	lpm	r22, Z
    767a:	ce 01       	movw	r24, r28
    767c:	0e 94 82 3a 	call	0x7504	; 0x7504 <WriteEeprom>
    7680:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7682:	c0 32       	cpi	r28, 0x20	; 32
    7684:	d1 05       	cpc	r29, r1
    7686:	a9 f7       	brne	.-22     	; 0x7672 <FormatEeprom+0x8>
    7688:	c0 e2       	ldi	r28, 0x20	; 32
    768a:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    768c:	6f ef       	ldi	r22, 0xFF	; 255
    768e:	ce 01       	movw	r24, r28
    7690:	0e 94 82 3a 	call	0x7504	; 0x7504 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7694:	6f ef       	ldi	r22, 0xFF	; 255
    7696:	ce 01       	movw	r24, r28
    7698:	01 96       	adiw	r24, 0x01	; 1
    769a:	0e 94 82 3a 	call	0x7504	; 0x7504 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    769e:	a0 96       	adiw	r28, 0x20	; 32
    76a0:	c1 15       	cp	r28, r1
    76a2:	88 e0       	ldi	r24, 0x08	; 8
    76a4:	d8 07       	cpc	r29, r24
    76a6:	91 f7       	brne	.-28     	; 0x768c <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    76a8:	df 91       	pop	r29
    76aa:	cf 91       	pop	r28
    76ac:	08 95       	ret

000076ae <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    76ae:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    76b0:	80 e0       	ldi	r24, 0x00	; 0
    76b2:	90 e0       	ldi	r25, 0x00	; 0
    76b4:	0e 94 8c 3a 	call	0x7518	; 0x7518 <ReadEeprom>
    76b8:	c8 2f       	mov	r28, r24
    76ba:	81 e0       	ldi	r24, 0x01	; 1
    76bc:	90 e0       	ldi	r25, 0x00	; 0
    76be:	0e 94 8c 3a 	call	0x7518	; 0x7518 <ReadEeprom>
    76c2:	28 2f       	mov	r18, r24
    76c4:	30 e0       	ldi	r19, 0x00	; 0
    76c6:	32 2f       	mov	r19, r18
    76c8:	22 27       	eor	r18, r18
    76ca:	2c 0f       	add	r18, r28
    76cc:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    76ce:	81 e0       	ldi	r24, 0x01	; 1
    76d0:	2a 35       	cpi	r18, 0x5A	; 90
    76d2:	35 45       	sbci	r19, 0x55	; 85
    76d4:	09 f0       	breq	.+2      	; 0x76d8 <isEepromFormatted+0x2a>
    76d6:	80 e0       	ldi	r24, 0x00	; 0
}
    76d8:	cf 91       	pop	r28
    76da:	08 95       	ret

000076dc <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    76dc:	8f 92       	push	r8
    76de:	9f 92       	push	r9
    76e0:	af 92       	push	r10
    76e2:	bf 92       	push	r11
    76e4:	cf 92       	push	r12
    76e6:	df 92       	push	r13
    76e8:	ef 92       	push	r14
    76ea:	ff 92       	push	r15
    76ec:	0f 93       	push	r16
    76ee:	1f 93       	push	r17
    76f0:	cf 93       	push	r28
    76f2:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    76f4:	fb 01       	movw	r30, r22
    76f6:	11 82       	std	Z+1, r1	; 0x01
    76f8:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    76fa:	8f 3f       	cpi	r24, 0xFF	; 255
    76fc:	ff ef       	ldi	r31, 0xFF	; 255
    76fe:	9f 07       	cpc	r25, r31
    7700:	89 f1       	breq	.+98     	; 0x7764 <EepromBlockExists+0x88>
    7702:	6a 01       	movw	r12, r20
    7704:	8b 01       	movw	r16, r22
    7706:	7c 01       	movw	r14, r24
    7708:	a1 2c       	mov	r10, r1
    770a:	b1 2c       	mov	r11, r1
    770c:	c0 e0       	ldi	r28, 0x00	; 0
    770e:	d3 e0       	ldi	r29, 0x03	; 3
    7710:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7712:	c5 01       	movw	r24, r10
    7714:	0e 94 8c 3a 	call	0x7518	; 0x7518 <ReadEeprom>
    7718:	88 2e       	mov	r8, r24
    771a:	c5 01       	movw	r24, r10
    771c:	01 96       	adiw	r24, 0x01	; 1
    771e:	0e 94 8c 3a 	call	0x7518	; 0x7518 <ReadEeprom>
    7722:	28 2f       	mov	r18, r24
    7724:	30 e0       	ldi	r19, 0x00	; 0
    7726:	32 2f       	mov	r19, r18
    7728:	22 27       	eor	r18, r18
    772a:	28 0d       	add	r18, r8
    772c:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    772e:	2e 15       	cp	r18, r14
    7730:	3f 05       	cpc	r19, r15
    7732:	29 f4       	brne	.+10     	; 0x773e <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7734:	f8 01       	movw	r30, r16
    7736:	b1 82       	std	Z+1, r11	; 0x01
    7738:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    773a:	d0 e0       	ldi	r29, 0x00	; 0
    773c:	0b c0       	rjmp	.+22     	; 0x7754 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    773e:	2f 3f       	cpi	r18, 0xFF	; 255
    7740:	3f 4f       	sbci	r19, 0xFF	; 255
    7742:	41 f4       	brne	.+16     	; 0x7754 <EepromBlockExists+0x78>
    7744:	91 10       	cpse	r9, r1
    7746:	06 c0       	rjmp	.+12     	; 0x7754 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7748:	c1 14       	cp	r12, r1
    774a:	d1 04       	cpc	r13, r1
    774c:	11 f0       	breq	.+4      	; 0x7752 <EepromBlockExists+0x76>
    774e:	f6 01       	movw	r30, r12
    7750:	c0 83       	st	Z, r28
    7752:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7754:	cf 5f       	subi	r28, 0xFF	; 255
    7756:	f0 e2       	ldi	r31, 0x20	; 32
    7758:	af 0e       	add	r10, r31
    775a:	b1 1c       	adc	r11, r1
    775c:	c0 34       	cpi	r28, 0x40	; 64
    775e:	c9 f6       	brne	.-78     	; 0x7712 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7760:	8d 2f       	mov	r24, r29
    7762:	01 c0       	rjmp	.+2      	; 0x7766 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7764:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7766:	df 91       	pop	r29
    7768:	cf 91       	pop	r28
    776a:	1f 91       	pop	r17
    776c:	0f 91       	pop	r16
    776e:	ff 90       	pop	r15
    7770:	ef 90       	pop	r14
    7772:	df 90       	pop	r13
    7774:	cf 90       	pop	r12
    7776:	bf 90       	pop	r11
    7778:	af 90       	pop	r10
    777a:	9f 90       	pop	r9
    777c:	8f 90       	pop	r8
    777e:	08 95       	ret

00007780 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7780:	ef 92       	push	r14
    7782:	ff 92       	push	r15
    7784:	0f 93       	push	r16
    7786:	1f 93       	push	r17
    7788:	cf 93       	push	r28
    778a:	df 93       	push	r29
    778c:	00 d0       	rcall	.+0      	; 0x778e <EepromWriteBlock+0xe>
    778e:	1f 92       	push	r1
    7790:	cd b7       	in	r28, 0x3d	; 61
    7792:	de b7       	in	r29, 0x3e	; 62
    7794:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7796:	1a 82       	std	Y+2, r1	; 0x02
    7798:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    779a:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    779c:	ae 01       	movw	r20, r28
    779e:	4d 5f       	subi	r20, 0xFD	; 253
    77a0:	5f 4f       	sbci	r21, 0xFF	; 255
    77a2:	be 01       	movw	r22, r28
    77a4:	6f 5f       	subi	r22, 0xFF	; 255
    77a6:	7f 4f       	sbci	r23, 0xFF	; 255
    77a8:	fc 01       	movw	r30, r24
    77aa:	80 81       	ld	r24, Z
    77ac:	91 81       	ldd	r25, Z+1	; 0x01
    77ae:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    77b2:	88 23       	and	r24, r24
    77b4:	11 f0       	breq	.+4      	; 0x77ba <EepromWriteBlock+0x3a>
    77b6:	83 30       	cpi	r24, 0x03	; 3
    77b8:	19 f5       	brne	.+70     	; 0x7800 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    77ba:	89 81       	ldd	r24, Y+1	; 0x01
    77bc:	9a 81       	ldd	r25, Y+2	; 0x02
    77be:	89 2b       	or	r24, r25
    77c0:	49 f4       	brne	.+18     	; 0x77d4 <EepromWriteBlock+0x54>
    77c2:	8b 81       	ldd	r24, Y+3	; 0x03
    77c4:	88 23       	and	r24, r24
    77c6:	d9 f0       	breq	.+54     	; 0x77fe <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    77c8:	f0 e2       	ldi	r31, 0x20	; 32
    77ca:	8f 9f       	mul	r24, r31
    77cc:	c0 01       	movw	r24, r0
    77ce:	11 24       	eor	r1, r1
    77d0:	9a 83       	std	Y+2, r25	; 0x02
    77d2:	89 83       	std	Y+1, r24	; 0x01
    77d4:	78 01       	movw	r14, r16
    77d6:	20 e2       	ldi	r18, 0x20	; 32
    77d8:	e2 0e       	add	r14, r18
    77da:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    77dc:	f8 01       	movw	r30, r16
    77de:	61 91       	ld	r22, Z+
    77e0:	8f 01       	movw	r16, r30
    77e2:	89 81       	ldd	r24, Y+1	; 0x01
    77e4:	9a 81       	ldd	r25, Y+2	; 0x02
    77e6:	9c 01       	movw	r18, r24
    77e8:	2f 5f       	subi	r18, 0xFF	; 255
    77ea:	3f 4f       	sbci	r19, 0xFF	; 255
    77ec:	3a 83       	std	Y+2, r19	; 0x02
    77ee:	29 83       	std	Y+1, r18	; 0x01
    77f0:	0e 94 82 3a 	call	0x7504	; 0x7504 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    77f4:	0e 15       	cp	r16, r14
    77f6:	1f 05       	cpc	r17, r15
    77f8:	89 f7       	brne	.-30     	; 0x77dc <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    77fa:	80 e0       	ldi	r24, 0x00	; 0
    77fc:	01 c0       	rjmp	.+2      	; 0x7800 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    77fe:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7800:	0f 90       	pop	r0
    7802:	0f 90       	pop	r0
    7804:	0f 90       	pop	r0
    7806:	df 91       	pop	r29
    7808:	cf 91       	pop	r28
    780a:	1f 91       	pop	r17
    780c:	0f 91       	pop	r16
    780e:	ff 90       	pop	r15
    7810:	ef 90       	pop	r14
    7812:	08 95       	ret

00007814 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7814:	cf 92       	push	r12
    7816:	df 92       	push	r13
    7818:	ff 92       	push	r15
    781a:	0f 93       	push	r16
    781c:	1f 93       	push	r17
    781e:	cf 93       	push	r28
    7820:	df 93       	push	r29
    7822:	00 d0       	rcall	.+0      	; 0x7824 <EepromReadBlock+0x10>
    7824:	cd b7       	in	r28, 0x3d	; 61
    7826:	de b7       	in	r29, 0x3e	; 62
    7828:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    782a:	40 e0       	ldi	r20, 0x00	; 0
    782c:	50 e0       	ldi	r21, 0x00	; 0
    782e:	be 01       	movw	r22, r28
    7830:	6f 5f       	subi	r22, 0xFF	; 255
    7832:	7f 4f       	sbci	r23, 0xFF	; 255
    7834:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <EepromBlockExists>
    7838:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    783a:	81 11       	cpse	r24, r1
    783c:	13 c0       	rjmp	.+38     	; 0x7864 <EepromReadBlock+0x50>
    783e:	68 01       	movw	r12, r16
    7840:	80 e2       	ldi	r24, 0x20	; 32
    7842:	c8 0e       	add	r12, r24
    7844:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    7846:	89 81       	ldd	r24, Y+1	; 0x01
    7848:	9a 81       	ldd	r25, Y+2	; 0x02
    784a:	9c 01       	movw	r18, r24
    784c:	2f 5f       	subi	r18, 0xFF	; 255
    784e:	3f 4f       	sbci	r19, 0xFF	; 255
    7850:	3a 83       	std	Y+2, r19	; 0x02
    7852:	29 83       	std	Y+1, r18	; 0x01
    7854:	0e 94 8c 3a 	call	0x7518	; 0x7518 <ReadEeprom>
    7858:	f8 01       	movw	r30, r16
    785a:	81 93       	st	Z+, r24
    785c:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    785e:	ec 15       	cp	r30, r12
    7860:	fd 05       	cpc	r31, r13
    7862:	89 f7       	brne	.-30     	; 0x7846 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    7864:	8f 2d       	mov	r24, r15
    7866:	0f 90       	pop	r0
    7868:	0f 90       	pop	r0
    786a:	df 91       	pop	r29
    786c:	cf 91       	pop	r28
    786e:	1f 91       	pop	r17
    7870:	0f 91       	pop	r16
    7872:	ff 90       	pop	r15
    7874:	df 90       	pop	r13
    7876:	cf 90       	pop	r12
    7878:	08 95       	ret

0000787a <UartUnreadCount>:
		uart_rx_tail&=(UART_RX_BUFFER_SIZE-1);		//wrap pointer to buffer size
	}

	//obsolete
	u8 UartUnreadCount(){
		return uart_rx_head-uart_rx_tail;
    787a:	80 91 81 0a 	lds	r24, 0x0A81
    787e:	90 91 83 0a 	lds	r25, 0x0A83
	}
    7882:	89 1b       	sub	r24, r25
    7884:	08 95       	ret

00007886 <UartReadChar>:
		return (uart_rx_tail==uart_rx_head);
	}

	s16 UartReadChar(){

		if(uart_rx_head != uart_rx_tail){
    7886:	90 91 81 0a 	lds	r25, 0x0A81
    788a:	80 91 83 0a 	lds	r24, 0x0A83
    788e:	98 17       	cp	r25, r24
    7890:	71 f0       	breq	.+28     	; 0x78ae <UartReadChar+0x28>

			u8 data=uart_rx_buf[uart_rx_tail];
    7892:	e0 91 83 0a 	lds	r30, 0x0A83
    7896:	f0 e0       	ldi	r31, 0x00	; 0
    7898:	ec 57       	subi	r30, 0x7C	; 124
    789a:	f5 4f       	sbci	r31, 0xF5	; 245
    789c:	80 81       	ld	r24, Z
			uart_rx_tail=((uart_rx_tail+1) & (UART_RX_BUFFER_SIZE-1));	//wrap pointer to buffer size			
    789e:	90 91 83 0a 	lds	r25, 0x0A83
    78a2:	9f 5f       	subi	r25, 0xFF	; 255
    78a4:	9f 73       	andi	r25, 0x3F	; 63
    78a6:	90 93 83 0a 	sts	0x0A83, r25
			return (data&0xff);
    78aa:	90 e0       	ldi	r25, 0x00	; 0
    78ac:	08 95       	ret

		}else{
			return -1;	//no data in buffer
    78ae:	8f ef       	ldi	r24, 0xFF	; 255
    78b0:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
    78b2:	08 95       	ret

000078b4 <InitUartRxBuffer>:

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    78b4:	10 92 83 0a 	sts	0x0A83, r1
		uart_rx_head=0;
    78b8:	10 92 81 0a 	sts	0x0A81, r1
    78bc:	08 95       	ret

000078be <UartSendChar>:
		return (next_head == uart_tx_tail);
	}

	s8 UartSendChar(u8 data){

 		u8 next_head = ((uart_tx_head + 1) & (UART_TX_BUFFER_SIZE-1));
    78be:	90 91 82 0a 	lds	r25, 0x0A82
    78c2:	9f 5f       	subi	r25, 0xFF	; 255
    78c4:	9f 71       	andi	r25, 0x1F	; 31

		if (next_head != uart_tx_tail) {
    78c6:	20 91 c4 0a 	lds	r18, 0x0AC4
    78ca:	92 17       	cp	r25, r18
    78cc:	51 f0       	breq	.+20     	; 0x78e2 <UartSendChar+0x24>
			uart_tx_buf[uart_tx_head]=data;
    78ce:	e0 91 82 0a 	lds	r30, 0x0A82
    78d2:	f0 e0       	ldi	r31, 0x00	; 0
    78d4:	e0 5a       	subi	r30, 0xA0	; 160
    78d6:	f5 4f       	sbci	r31, 0xF5	; 245
    78d8:	80 83       	st	Z, r24
			uart_tx_head=next_head;		
    78da:	90 93 82 0a 	sts	0x0A82, r25
			return 0;
    78de:	80 e0       	ldi	r24, 0x00	; 0
    78e0:	08 95       	ret
		}else{
			return -1; //buffer full
    78e2:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
    78e4:	08 95       	ret

000078e6 <InitUartTxBuffer>:

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    78e6:	10 92 c4 0a 	sts	0x0AC4, r1
		uart_tx_head=0;
    78ea:	10 92 82 0a 	sts	0x0A82, r1
    78ee:	08 95       	ret

000078f0 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    78f0:	00 97       	sbiw	r24, 0x00	; 0
    78f2:	21 f0       	breq	.+8      	; 0x78fc <GetPrngNumber+0xc>
    78f4:	90 93 41 0a 	sts	0x0A41, r25
    78f8:	80 93 40 0a 	sts	0x0A40, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    78fc:	20 91 40 0a 	lds	r18, 0x0A40
    7900:	30 91 41 0a 	lds	r19, 0x0A41
    7904:	a9 01       	movw	r20, r18
    7906:	56 95       	lsr	r21
    7908:	47 95       	ror	r20
    790a:	56 95       	lsr	r21
    790c:	47 95       	ror	r20
    790e:	c9 01       	movw	r24, r18
    7910:	63 e0       	ldi	r22, 0x03	; 3
    7912:	96 95       	lsr	r25
    7914:	87 95       	ror	r24
    7916:	6a 95       	dec	r22
    7918:	e1 f7       	brne	.-8      	; 0x7912 <GetPrngNumber+0x22>
    791a:	84 27       	eor	r24, r20
    791c:	95 27       	eor	r25, r21
    791e:	82 27       	eor	r24, r18
    7920:	93 27       	eor	r25, r19
    7922:	a9 01       	movw	r20, r18
    7924:	75 e0       	ldi	r23, 0x05	; 5
    7926:	56 95       	lsr	r21
    7928:	47 95       	ror	r20
    792a:	7a 95       	dec	r23
    792c:	e1 f7       	brne	.-8      	; 0x7926 <GetPrngNumber+0x36>
    792e:	84 27       	eor	r24, r20
    7930:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    7932:	99 27       	eor	r25, r25
    7934:	86 95       	lsr	r24
    7936:	97 95       	ror	r25
    7938:	88 27       	eor	r24, r24
    793a:	36 95       	lsr	r19
    793c:	27 95       	ror	r18
    793e:	82 2b       	or	r24, r18
    7940:	93 2b       	or	r25, r19
    7942:	90 93 41 0a 	sts	0x0A41, r25
    7946:	80 93 40 0a 	sts	0x0A40, r24
	return prng_state;   
}
    794a:	08 95       	ret

0000794c <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    794c:	fc 01       	movw	r30, r24
    794e:	67 87       	std	Z+15, r22	; 0x0f
    7950:	08 95       	ret

00007952 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7952:	e4 e4       	ldi	r30, 0x44	; 68
    7954:	fa e0       	ldi	r31, 0x0A	; 10
    7956:	81 e0       	ldi	r24, 0x01	; 1
    7958:	91 e0       	ldi	r25, 0x01	; 1
    795a:	95 8b       	std	Z+21, r25	; 0x15
    795c:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    795e:	63 8b       	std	Z+19, r22	; 0x13
    7960:	08 95       	ret

00007962 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    7962:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    7964:	90 81       	ld	r25, Z
    7966:	9f 75       	andi	r25, 0x5F	; 95
    7968:	90 83       	st	Z, r25
    796a:	08 95       	ret

0000796c <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    796c:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    796e:	90 81       	ld	r25, Z
    7970:	90 64       	ori	r25, 0x40	; 64
    7972:	90 83       	st	Z, r25
    7974:	08 95       	ret

00007976 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    7976:	fc 01       	movw	r30, r24
    7978:	66 87       	std	Z+14, r22	; 0x0e
    797a:	08 95       	ret

0000797c <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    797c:	fc 01       	movw	r30, r24
    797e:	62 87       	std	Z+10, r22	; 0x0a
    7980:	08 95       	ret

00007982 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    7982:	fc 01       	movw	r30, r24
    7984:	63 87       	std	Z+11, r22	; 0x0b
    7986:	08 95       	ret

00007988 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    7988:	cf 93       	push	r28
    798a:	df 93       	push	r29
    798c:	ec 01       	movw	r28, r24
    798e:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7990:	29 81       	ldd	r18, Y+1	; 0x01
    7992:	30 e0       	ldi	r19, 0x00	; 0
    7994:	f9 01       	movw	r30, r18
    7996:	ee 0f       	add	r30, r30
    7998:	ff 1f       	adc	r31, r31
    799a:	e8 5f       	subi	r30, 0xF8	; 248
    799c:	fd 47       	sbci	r31, 0x7D	; 125
    799e:	65 91       	lpm	r22, Z+
    79a0:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    79a2:	f9 01       	movw	r30, r18
    79a4:	e4 0f       	add	r30, r20
    79a6:	f1 1d       	adc	r31, r1
    79a8:	47 fd       	sbrc	r20, 7
    79aa:	fa 95       	dec	r31
    79ac:	ee 0f       	add	r30, r30
    79ae:	ff 1f       	adc	r31, r31
    79b0:	e8 5f       	subi	r30, 0xF8	; 248
    79b2:	fd 47       	sbci	r31, 0x7D	; 125
    79b4:	85 91       	lpm	r24, Z+
    79b6:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    79b8:	86 1b       	sub	r24, r22
    79ba:	97 0b       	sbc	r25, r23
    79bc:	68 85       	ldd	r22, Y+8	; 0x08
    79be:	70 e0       	ldi	r23, 0x00	; 0
    79c0:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
	if(delta==0)delta++;
    79c4:	61 15       	cp	r22, r1
    79c6:	71 05       	cpc	r23, r1
    79c8:	11 f4       	brne	.+4      	; 0x79ce <PatchCommand11+0x46>
    79ca:	61 e0       	ldi	r22, 0x01	; 1
    79cc:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    79ce:	ea 81       	ldd	r30, Y+2	; 0x02
    79d0:	86 e0       	ldi	r24, 0x06	; 6
    79d2:	e8 9f       	mul	r30, r24
    79d4:	f0 01       	movw	r30, r0
    79d6:	11 24       	eor	r1, r1
    79d8:	ec 5b       	subi	r30, 0xBC	; 188
    79da:	f5 4f       	sbci	r31, 0xF5	; 245
    79dc:	81 81       	ldd	r24, Z+1	; 0x01
    79de:	92 81       	ldd	r25, Z+2	; 0x02
    79e0:	86 0f       	add	r24, r22
    79e2:	97 1f       	adc	r25, r23
    79e4:	92 83       	std	Z+2, r25	; 0x02
    79e6:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    79e8:	7e 83       	std	Y+6, r23	; 0x06
    79ea:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    79ec:	88 81       	ld	r24, Y
    79ee:	88 60       	ori	r24, 0x08	; 8
    79f0:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    79f2:	89 81       	ldd	r24, Y+1	; 0x01
    79f4:	48 0f       	add	r20, r24
    79f6:	4f 83       	std	Y+7, r20	; 0x07
}
    79f8:	df 91       	pop	r29
    79fa:	cf 91       	pop	r28
    79fc:	08 95       	ret

000079fe <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    79fe:	fc 01       	movw	r30, r24
    7a00:	60 87       	std	Z+8, r22	; 0x08
    7a02:	08 95       	ret

00007a04 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    7a04:	fc 01       	movw	r30, r24
    7a06:	64 83       	std	Z+4, r22	; 0x04
    7a08:	08 95       	ret

00007a0a <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7a0a:	fc 01       	movw	r30, r24
    7a0c:	82 81       	ldd	r24, Z+2	; 0x02
    7a0e:	0c 94 ba 40 	jmp	0x8174	; 0x8174 <SetMixerWave>

00007a12 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    7a12:	fc 01       	movw	r30, r24
	track->note+=param;
    7a14:	91 81       	ldd	r25, Z+1	; 0x01
    7a16:	69 0f       	add	r22, r25
    7a18:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7a1a:	82 81       	ldd	r24, Z+2	; 0x02
    7a1c:	0c 94 a3 40 	jmp	0x8146	; 0x8146 <SetMixerNote>

00007a20 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    7a20:	fc 01       	movw	r30, r24
	track->note-=param;
    7a22:	91 81       	ldd	r25, Z+1	; 0x01
    7a24:	96 1b       	sub	r25, r22
    7a26:	69 2f       	mov	r22, r25
    7a28:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    7a2a:	82 81       	ldd	r24, Z+2	; 0x02
    7a2c:	0c 94 a3 40 	jmp	0x8146	; 0x8146 <SetMixerNote>

00007a30 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    7a30:	1f 93       	push	r17
    7a32:	cf 93       	push	r28
    7a34:	df 93       	push	r29
    7a36:	ec 01       	movw	r28, r24
    7a38:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    7a3c:	0e 94 a3 40 	call	0x8146	; 0x8146 <SetMixerNote>
	track->note=param;
    7a40:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7a42:	88 81       	ld	r24, Y
    7a44:	87 7f       	andi	r24, 0xF7	; 247
    7a46:	88 83       	st	Y, r24
}
    7a48:	df 91       	pop	r29
    7a4a:	cf 91       	pop	r28
    7a4c:	1f 91       	pop	r17
    7a4e:	08 95       	ret

00007a50 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7a50:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7a52:	14 96       	adiw	r26, 0x04	; 4
    7a54:	8c 91       	ld	r24, X
    7a56:	14 97       	sbiw	r26, 0x04	; 4
    7a58:	88 23       	and	r24, r24
    7a5a:	19 f1       	breq	.+70     	; 0x7aa2 <PatchCommand14+0x52>
    7a5c:	55 96       	adiw	r26, 0x15	; 21
    7a5e:	2d 91       	ld	r18, X+
    7a60:	3c 91       	ld	r19, X
    7a62:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    7a64:	66 23       	and	r22, r22
    7a66:	79 f0       	breq	.+30     	; 0x7a86 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7a68:	77 27       	eor	r23, r23
    7a6a:	67 fd       	sbrc	r22, 7
    7a6c:	70 95       	com	r23
    7a6e:	6f 5f       	subi	r22, 0xFF	; 255
    7a70:	7f 4f       	sbci	r23, 0xFF	; 255
    7a72:	ab 01       	movw	r20, r22
    7a74:	44 0f       	add	r20, r20
    7a76:	55 1f       	adc	r21, r21
    7a78:	64 0f       	add	r22, r20
    7a7a:	75 1f       	adc	r23, r21
    7a7c:	26 1b       	sub	r18, r22
    7a7e:	37 0b       	sbc	r19, r23
    7a80:	09 c0       	rjmp	.+18     	; 0x7a94 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7a82:	ef 3f       	cpi	r30, 0xFF	; 255
    7a84:	39 f0       	breq	.+14     	; 0x7a94 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7a86:	23 50       	subi	r18, 0x03	; 3
    7a88:	31 09       	sbc	r19, r1
    7a8a:	f9 01       	movw	r30, r18
    7a8c:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7a8e:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7a90:	ed 30       	cpi	r30, 0x0D	; 13
    7a92:	b9 f7       	brne	.-18     	; 0x7a82 <PatchCommand14+0x32>
    7a94:	56 96       	adiw	r26, 0x16	; 22
    7a96:	3c 93       	st	X, r19
    7a98:	2e 93       	st	-X, r18
    7a9a:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    7a9c:	81 50       	subi	r24, 0x01	; 1
    7a9e:	14 96       	adiw	r26, 0x04	; 4
    7aa0:	8c 93       	st	X, r24
    7aa2:	08 95       	ret

00007aa4 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7aa4:	90 93 26 0b 	sts	0x0B26, r25
    7aa8:	80 93 25 0b 	sts	0x0B25, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7aac:	8f e6       	ldi	r24, 0x6F	; 111
    7aae:	80 93 28 0b 	sts	0x0B28, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7ab2:	10 92 42 0a 	sts	0x0A42, r1
    7ab6:	e7 ed       	ldi	r30, 0xD7	; 215
    7ab8:	fa e0       	ldi	r31, 0x0A	; 10

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7aba:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7abc:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7abe:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7ac0:	28 e1       	ldi	r18, 0x18	; 24
    7ac2:	df 01       	movw	r26, r30
    7ac4:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    7ac6:	8c 93       	st	X, r24
    7ac8:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7aca:	9c 93       	st	X, r25
    7acc:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    7ace:	1c 92       	st	X, r1
    7ad0:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7ad2:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    7ad4:	10 82       	st	Z, r1
    7ad6:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    7ad8:	2c 93       	st	X, r18
    7ada:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7adc:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7ade:	8f 5f       	subi	r24, 0xFF	; 255
    7ae0:	77 96       	adiw	r30, 0x17	; 23
    7ae2:	84 30       	cpi	r24, 0x04	; 4
    7ae4:	71 f7       	brne	.-36     	; 0x7ac2 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7ae6:	08 95       	ret

00007ae8 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7ae8:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7aea:	ed 91       	ld	r30, X+
    7aec:	fc 91       	ld	r31, X
    7aee:	11 97       	sbiw	r26, 0x01	; 1
    7af0:	9f 01       	movw	r18, r30
    7af2:	2f 5f       	subi	r18, 0xFF	; 255
    7af4:	3f 4f       	sbci	r19, 0xFF	; 255
    7af6:	11 96       	adiw	r26, 0x01	; 1
    7af8:	3c 93       	st	X, r19
    7afa:	2e 93       	st	-X, r18
    7afc:	e4 91       	lpm	r30, Z
    7afe:	e7 fd       	sbrc	r30, 7
    7b00:	03 c0       	rjmp	.+6      	; 0x7b08 <ReadVarLen+0x20>
    7b02:	8e 2f       	mov	r24, r30
    7b04:	90 e0       	ldi	r25, 0x00	; 0
    7b06:	08 95       	ret
    {
       value &= 0x7F;
    7b08:	ef 77       	andi	r30, 0x7F	; 127
    7b0a:	8e 2f       	mov	r24, r30
    7b0c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7b0e:	96 95       	lsr	r25
    7b10:	98 2f       	mov	r25, r24
    7b12:	88 27       	eor	r24, r24
    7b14:	97 95       	ror	r25
    7b16:	87 95       	ror	r24
    7b18:	2f 5f       	subi	r18, 0xFF	; 255
    7b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    7b1c:	f9 01       	movw	r30, r18
    7b1e:	31 97       	sbiw	r30, 0x01	; 1
    7b20:	e4 91       	lpm	r30, Z
    7b22:	4e 2f       	mov	r20, r30
    7b24:	4f 77       	andi	r20, 0x7F	; 127
    7b26:	84 0f       	add	r24, r20
    7b28:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7b2a:	e7 fd       	sbrc	r30, 7
    7b2c:	f0 cf       	rjmp	.-32     	; 0x7b0e <ReadVarLen+0x26>
    7b2e:	2d 93       	st	X+, r18
    7b30:	3c 93       	st	X, r19
    }


    return value;
}
    7b32:	08 95       	ret

00007b34 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7b34:	ef 92       	push	r14
    7b36:	ff 92       	push	r15
    7b38:	0f 93       	push	r16
    7b3a:	1f 93       	push	r17
    7b3c:	cf 93       	push	r28
    7b3e:	df 93       	push	r29
    7b40:	1f 92       	push	r1
    7b42:	cd b7       	in	r28, 0x3d	; 61
    7b44:	de b7       	in	r29, 0x3e	; 62
    7b46:	7c 01       	movw	r14, r24
    7b48:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7b4a:	fc 01       	movw	r30, r24
    7b4c:	80 81       	ld	r24, Z
    7b4e:	08 2f       	mov	r16, r24
    7b50:	00 1f       	adc	r16, r16
    7b52:	00 27       	eor	r16, r16
    7b54:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    7b56:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7b58:	9f ef       	ldi	r25, 0xFF	; 255
    7b5a:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7b5c:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7b5e:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7b60:	87 7b       	andi	r24, 0xB7	; 183
    7b62:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7b64:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    7b66:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    7b68:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7b6a:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7b6c:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7b6e:	82 81       	ldd	r24, Z+2	; 0x02
    7b70:	83 30       	cpi	r24, 0x03	; 3
    7b72:	69 f4       	brne	.+26     	; 0x7b8e <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    7b74:	01 11       	cpse	r16, r1
    7b76:	01 c0       	rjmp	.+2      	; 0x7b7a <TriggerCommon+0x46>
    7b78:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7b7a:	81 e0       	ldi	r24, 0x01	; 1
    7b7c:	91 e0       	ldi	r25, 0x01	; 1
    7b7e:	90 93 59 0a 	sts	0x0A59, r25
    7b82:	80 93 58 0a 	sts	0x0A58, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7b86:	81 e0       	ldi	r24, 0x01	; 1
    7b88:	80 93 57 0a 	sts	0x0A57, r24
    7b8c:	0a c0       	rjmp	.+20     	; 0x7ba2 <TriggerCommon+0x6e>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7b8e:	60 e0       	ldi	r22, 0x00	; 0
    7b90:	29 83       	std	Y+1, r18	; 0x01
    7b92:	0e 94 ba 40 	call	0x8174	; 0x8174 <SetMixerWave>
			SetMixerNote(track->channel,note);
    7b96:	29 81       	ldd	r18, Y+1	; 0x01
    7b98:	62 2f       	mov	r22, r18
    7b9a:	f7 01       	movw	r30, r14
    7b9c:	82 81       	ldd	r24, Z+2	; 0x02
    7b9e:	0e 94 a3 40 	call	0x8146	; 0x8146 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7ba2:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7ba4:	00 23       	and	r16, r16
    7ba6:	11 f0       	breq	.+4      	; 0x7bac <TriggerCommon+0x78>
		track->fxPatchNo=patch;
    7ba8:	11 8b       	std	Z+17, r17	; 0x11
    7baa:	01 c0       	rjmp	.+2      	; 0x7bae <TriggerCommon+0x7a>
	}else{
		track->patchNo=patch;	
    7bac:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7bae:	e0 91 25 0b 	lds	r30, 0x0B25
    7bb2:	f0 91 26 0b 	lds	r31, 0x0B26
    7bb6:	89 e0       	ldi	r24, 0x09	; 9
    7bb8:	18 9f       	mul	r17, r24
    7bba:	e0 0d       	add	r30, r0
    7bbc:	f1 1d       	adc	r31, r1
    7bbe:	11 24       	eor	r1, r1
    7bc0:	33 96       	adiw	r30, 0x03	; 3
    7bc2:	85 91       	lpm	r24, Z+
    7bc4:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7bc6:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7bc8:	00 97       	sbiw	r24, 0x00	; 0
    7bca:	19 f4       	brne	.+6      	; 0x7bd2 <TriggerCommon+0x9e>
		track->patchCommandStreamPos=NULL;
    7bcc:	16 8a       	std	Z+22, r1	; 0x16
    7bce:	15 8a       	std	Z+21, r1	; 0x15
    7bd0:	08 c0       	rjmp	.+16     	; 0x7be2 <TriggerCommon+0xae>
	}else{
		track->patchCurrDeltaTime=0;
    7bd2:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7bd4:	fc 01       	movw	r30, r24
    7bd6:	24 91       	lpm	r18, Z
    7bd8:	f7 01       	movw	r30, r14
    7bda:	22 8b       	std	Z+18, r18	; 0x12
    7bdc:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7bde:	96 8b       	std	Z+22, r25	; 0x16
    7be0:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7be2:	0f 90       	pop	r0
    7be4:	df 91       	pop	r29
    7be6:	cf 91       	pop	r28
    7be8:	1f 91       	pop	r17
    7bea:	0f 91       	pop	r16
    7bec:	ff 90       	pop	r15
    7bee:	ef 90       	pop	r14
    7bf0:	08 95       	ret

00007bf2 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7bf2:	cf 93       	push	r28
    7bf4:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7bf6:	e0 91 25 0b 	lds	r30, 0x0B25
    7bfa:	f0 91 26 0b 	lds	r31, 0x0B26
    7bfe:	99 e0       	ldi	r25, 0x09	; 9
    7c00:	89 9f       	mul	r24, r25
    7c02:	e0 0d       	add	r30, r0
    7c04:	f1 1d       	adc	r31, r1
    7c06:	11 24       	eor	r1, r1
    7c08:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7c0a:	e1 30       	cpi	r30, 0x01	; 1
    7c0c:	e9 f0       	breq	.+58     	; 0x7c48 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7c0e:	e2 30       	cpi	r30, 0x02	; 2
    7c10:	e9 f0       	breq	.+58     	; 0x7c4c <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7c12:	20 91 de 0a 	lds	r18, 0x0ADE
    7c16:	27 ff       	sbrs	r18, 7
    7c18:	1d c0       	rjmp	.+58     	; 0x7c54 <TriggerFx+0x62>
    7c1a:	20 91 ef 0a 	lds	r18, 0x0AEF
    7c1e:	28 13       	cpse	r18, r24
    7c20:	02 c0       	rjmp	.+4      	; 0x7c26 <TriggerFx+0x34>
    7c22:	41 11       	cpse	r20, r1
    7c24:	17 c0       	rjmp	.+46     	; 0x7c54 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7c26:	20 91 f5 0a 	lds	r18, 0x0AF5
    7c2a:	27 ff       	sbrs	r18, 7
    7c2c:	11 c0       	rjmp	.+34     	; 0x7c50 <TriggerFx+0x5e>
    7c2e:	20 91 06 0b 	lds	r18, 0x0B06
    7c32:	28 13       	cpse	r18, r24
    7c34:	02 c0       	rjmp	.+4      	; 0x7c3a <TriggerFx+0x48>
    7c36:	41 11       	cpse	r20, r1
    7c38:	0b c0       	rjmp	.+22     	; 0x7c50 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7c3a:	20 91 f2 0a 	lds	r18, 0x0AF2
    7c3e:	90 91 09 0b 	lds	r25, 0x0B09
    7c42:	92 17       	cp	r25, r18
    7c44:	28 f4       	brcc	.+10     	; 0x7c50 <TriggerFx+0x5e>
    7c46:	06 c0       	rjmp	.+12     	; 0x7c54 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7c48:	c3 e0       	ldi	r28, 0x03	; 3
    7c4a:	05 c0       	rjmp	.+10     	; 0x7c56 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7c4c:	c4 e0       	ldi	r28, 0x04	; 4
    7c4e:	03 c0       	rjmp	.+6      	; 0x7c56 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7c50:	c2 e0       	ldi	r28, 0x02	; 2
    7c52:	01 c0       	rjmp	.+2      	; 0x7c56 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7c54:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7c56:	97 e1       	ldi	r25, 0x17	; 23
    7c58:	c9 9f       	mul	r28, r25
    7c5a:	e0 01       	movw	r28, r0
    7c5c:	11 24       	eor	r1, r1
    7c5e:	c9 53       	subi	r28, 0x39	; 57
    7c60:	d5 4f       	sbci	r29, 0xF5	; 245
    7c62:	90 e8       	ldi	r25, 0x80	; 128
    7c64:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7c66:	1e 8a       	std	Y+22, r1	; 0x16
    7c68:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7c6a:	20 e5       	ldi	r18, 0x50	; 80
    7c6c:	46 2f       	mov	r20, r22
    7c6e:	68 2f       	mov	r22, r24
    7c70:	ce 01       	movw	r24, r28
    7c72:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7c76:	88 81       	ld	r24, Y
    7c78:	80 62       	ori	r24, 0x20	; 32
    7c7a:	88 83       	st	Y, r24
}
    7c7c:	df 91       	pop	r29
    7c7e:	cf 91       	pop	r28
    7c80:	08 95       	ret

00007c82 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7c82:	cf 93       	push	r28
    7c84:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7c86:	a8 2f       	mov	r26, r24
    7c88:	b0 e0       	ldi	r27, 0x00	; 0
    7c8a:	97 e1       	ldi	r25, 0x17	; 23
    7c8c:	89 9f       	mul	r24, r25
    7c8e:	f0 01       	movw	r30, r0
    7c90:	11 24       	eor	r1, r1
    7c92:	e9 53       	subi	r30, 0x39	; 57
    7c94:	f5 4f       	sbci	r31, 0xF5	; 245
    7c96:	80 81       	ld	r24, Z
    7c98:	85 ff       	sbrs	r24, 5
    7c9a:	02 c0       	rjmp	.+4      	; 0x7ca0 <TriggerNote+0x1e>
    7c9c:	87 fd       	sbrc	r24, 7
    7c9e:	2e c0       	rjmp	.+92     	; 0x7cfc <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7ca0:	21 11       	cpse	r18, r1
    7ca2:	18 c0       	rjmp	.+48     	; 0x7cd4 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7ca4:	97 e1       	ldi	r25, 0x17	; 23
    7ca6:	9a 9f       	mul	r25, r26
    7ca8:	f0 01       	movw	r30, r0
    7caa:	9b 9f       	mul	r25, r27
    7cac:	f0 0d       	add	r31, r0
    7cae:	11 24       	eor	r1, r1
    7cb0:	e9 53       	subi	r30, 0x39	; 57
    7cb2:	f5 4f       	sbci	r31, 0xF5	; 245
    7cb4:	97 85       	ldd	r25, Z+15	; 0x0f
    7cb6:	91 11       	cpse	r25, r1
    7cb8:	02 c0       	rjmp	.+4      	; 0x7cbe <TriggerNote+0x3c>
    7cba:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7cbc:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7cbe:	97 e1       	ldi	r25, 0x17	; 23
    7cc0:	9a 9f       	mul	r25, r26
    7cc2:	f0 01       	movw	r30, r0
    7cc4:	9b 9f       	mul	r25, r27
    7cc6:	f0 0d       	add	r31, r0
    7cc8:	11 24       	eor	r1, r1
    7cca:	e9 53       	subi	r30, 0x39	; 57
    7ccc:	f5 4f       	sbci	r31, 0xF5	; 245
    7cce:	8f 7b       	andi	r24, 0xBF	; 191
    7cd0:	80 83       	st	Z, r24
    7cd2:	14 c0       	rjmp	.+40     	; 0x7cfc <TriggerNote+0x7a>
    7cd4:	82 2f       	mov	r24, r18
    7cd6:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7cd8:	97 e1       	ldi	r25, 0x17	; 23
    7cda:	9a 9f       	mul	r25, r26
    7cdc:	e0 01       	movw	r28, r0
    7cde:	9b 9f       	mul	r25, r27
    7ce0:	d0 0d       	add	r29, r0
    7ce2:	11 24       	eor	r1, r1
    7ce4:	c9 53       	subi	r28, 0x39	; 57
    7ce6:	d5 4f       	sbci	r29, 0xF5	; 245
    7ce8:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7cea:	1e 8a       	std	Y+22, r1	; 0x16
    7cec:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7cee:	48 2f       	mov	r20, r24
    7cf0:	ce 01       	movw	r24, r28
    7cf2:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7cf6:	88 81       	ld	r24, Y
    7cf8:	80 62       	ori	r24, 0x20	; 32
    7cfa:	88 83       	st	Y, r24
		}

	}
}
    7cfc:	df 91       	pop	r29
    7cfe:	cf 91       	pop	r28
    7d00:	08 95       	ret

00007d02 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7d02:	6f 92       	push	r6
    7d04:	7f 92       	push	r7
    7d06:	8f 92       	push	r8
    7d08:	9f 92       	push	r9
    7d0a:	af 92       	push	r10
    7d0c:	bf 92       	push	r11
    7d0e:	cf 92       	push	r12
    7d10:	df 92       	push	r13
    7d12:	ef 92       	push	r14
    7d14:	ff 92       	push	r15
    7d16:	0f 93       	push	r16
    7d18:	1f 93       	push	r17
    7d1a:	cf 93       	push	r28
    7d1c:	df 93       	push	r29
    7d1e:	c7 ec       	ldi	r28, 0xC7	; 199
    7d20:	da e0       	ldi	r29, 0x0A	; 10
    7d22:	04 e4       	ldi	r16, 0x44	; 68
    7d24:	1a e0       	ldi	r17, 0x0A	; 10
    7d26:	d8 01       	movw	r26, r16
    7d28:	9e 01       	movw	r18, r28
    7d2a:	40 e0       	ldi	r20, 0x00	; 0
    7d2c:	50 e0       	ldi	r21, 0x00	; 0
    7d2e:	ca 01       	movw	r24, r20
    7d30:	89 53       	subi	r24, 0x39	; 57
    7d32:	95 4f       	sbci	r25, 0xF5	; 245
    7d34:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7d36:	fc 01       	movw	r30, r24
    7d38:	87 85       	ldd	r24, Z+15	; 0x0f
    7d3a:	88 23       	and	r24, r24
    7d3c:	91 f0       	breq	.+36     	; 0x7d62 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7d3e:	66 85       	ldd	r22, Z+14	; 0x0e
    7d40:	99 27       	eor	r25, r25
    7d42:	87 fd       	sbrc	r24, 7
    7d44:	90 95       	com	r25
    7d46:	86 0f       	add	r24, r22
    7d48:	91 1d       	adc	r25, r1
    7d4a:	8f 3f       	cpi	r24, 0xFF	; 255
    7d4c:	91 05       	cpc	r25, r1
    7d4e:	19 f0       	breq	.+6      	; 0x7d56 <ProcessMusic+0x54>
    7d50:	14 f0       	brlt	.+4      	; 0x7d56 <ProcessMusic+0x54>
    7d52:	8f ef       	ldi	r24, 0xFF	; 255
    7d54:	90 e0       	ldi	r25, 0x00	; 0
    7d56:	97 ff       	sbrs	r25, 7
    7d58:	02 c0       	rjmp	.+4      	; 0x7d5e <ProcessMusic+0x5c>
    7d5a:	80 e0       	ldi	r24, 0x00	; 0
    7d5c:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7d5e:	f6 01       	movw	r30, r12
    7d60:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7d62:	f9 01       	movw	r30, r18
    7d64:	f0 80       	ld	r15, Z
    7d66:	f3 fe       	sbrs	r15, 3
    7d68:	2a c0       	rjmp	.+84     	; 0x7dbe <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7d6a:	65 81       	ldd	r22, Z+5	; 0x05
    7d6c:	76 81       	ldd	r23, Z+6	; 0x06
    7d6e:	11 96       	adiw	r26, 0x01	; 1
    7d70:	8d 91       	ld	r24, X+
    7d72:	9c 91       	ld	r25, X
    7d74:	12 97       	sbiw	r26, 0x02	; 2
    7d76:	86 0f       	add	r24, r22
    7d78:	97 1f       	adc	r25, r23
    7d7a:	12 96       	adiw	r26, 0x02	; 2
    7d7c:	9c 93       	st	X, r25
    7d7e:	8e 93       	st	-X, r24
    7d80:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7d82:	f6 01       	movw	r30, r12
    7d84:	e7 80       	ldd	r14, Z+7	; 0x07
    7d86:	ee 2d       	mov	r30, r14
    7d88:	f0 e0       	ldi	r31, 0x00	; 0
    7d8a:	ee 0f       	add	r30, r30
    7d8c:	ff 1f       	adc	r31, r31
    7d8e:	e8 5f       	subi	r30, 0xF8	; 248
    7d90:	fd 47       	sbci	r31, 0x7D	; 125
    7d92:	c5 90       	lpm	r12, Z+
    7d94:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7d96:	16 16       	cp	r1, r22
    7d98:	17 06       	cpc	r1, r23
    7d9a:	24 f4       	brge	.+8      	; 0x7da4 <ProcessMusic+0xa2>
    7d9c:	8c 15       	cp	r24, r12
    7d9e:	9d 05       	cpc	r25, r13
    7da0:	30 f4       	brcc	.+12     	; 0x7dae <ProcessMusic+0xac>
    7da2:	0d c0       	rjmp	.+26     	; 0x7dbe <ProcessMusic+0xbc>
    7da4:	67 2b       	or	r22, r23
    7da6:	59 f0       	breq	.+22     	; 0x7dbe <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7da8:	c8 16       	cp	r12, r24
    7daa:	d9 06       	cpc	r13, r25
    7dac:	40 f0       	brcs	.+16     	; 0x7dbe <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7dae:	12 96       	adiw	r26, 0x02	; 2
    7db0:	dc 92       	st	X, r13
    7db2:	ce 92       	st	-X, r12
    7db4:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7db6:	8f 2d       	mov	r24, r15
    7db8:	87 7f       	andi	r24, 0xF7	; 247
    7dba:	f9 01       	movw	r30, r18
    7dbc:	80 83       	st	Z, r24
    7dbe:	49 5e       	subi	r20, 0xE9	; 233
    7dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    7dc2:	29 5e       	subi	r18, 0xE9	; 233
    7dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    7dc6:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7dc8:	4c 35       	cpi	r20, 0x5C	; 92
    7dca:	51 05       	cpc	r21, r1
    7dcc:	09 f0       	breq	.+2      	; 0x7dd0 <ProcessMusic+0xce>
    7dce:	af cf       	rjmp	.-162    	; 0x7d2e <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7dd0:	80 91 42 0a 	lds	r24, 0x0A42
    7dd4:	88 23       	and	r24, r24
    7dd6:	09 f4       	brne	.+2      	; 0x7dda <ProcessMusic+0xd8>
    7dd8:	cc c0       	rjmp	.+408    	; 0x7f72 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7dda:	57 e1       	ldi	r21, 0x17	; 23
    7ddc:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7dde:	80 91 23 0b 	lds	r24, 0x0B23
    7de2:	90 91 24 0b 	lds	r25, 0x0B24
    7de6:	20 91 29 0b 	lds	r18, 0x0B29
    7dea:	30 91 2a 0b 	lds	r19, 0x0B2A
    7dee:	82 17       	cp	r24, r18
    7df0:	93 07       	cpc	r25, r19
    7df2:	09 f0       	breq	.+2      	; 0x7df6 <ProcessMusic+0xf4>
    7df4:	b9 c0       	rjmp	.+370    	; 0x7f68 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    7df6:	20 91 2c 0b 	lds	r18, 0x0B2C
    7dfa:	30 91 2d 0b 	lds	r19, 0x0B2D
    7dfe:	b9 01       	movw	r22, r18
    7e00:	6f 5f       	subi	r22, 0xFF	; 255
    7e02:	7f 4f       	sbci	r23, 0xFF	; 255
    7e04:	70 93 2d 0b 	sts	0x0B2D, r23
    7e08:	60 93 2c 0b 	sts	0x0B2C, r22
    7e0c:	f9 01       	movw	r30, r18
    7e0e:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7e10:	4f 3f       	cpi	r20, 0xFF	; 255
    7e12:	79 f5       	brne	.+94     	; 0x7e72 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7e14:	a9 01       	movw	r20, r18
    7e16:	4e 5f       	subi	r20, 0xFE	; 254
    7e18:	5f 4f       	sbci	r21, 0xFF	; 255
    7e1a:	50 93 2d 0b 	sts	0x0B2D, r21
    7e1e:	40 93 2c 0b 	sts	0x0B2C, r20
    7e22:	fb 01       	movw	r30, r22
    7e24:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7e26:	6f 32       	cpi	r22, 0x2F	; 47
    7e28:	19 f4       	brne	.+6      	; 0x7e30 <ProcessMusic+0x12e>
						playSong=false;
    7e2a:	10 92 42 0a 	sts	0x0A42, r1
						break;	
    7e2e:	9c c0       	rjmp	.+312    	; 0x7f68 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7e30:	66 30       	cpi	r22, 0x06	; 6
    7e32:	09 f0       	breq	.+2      	; 0x7e36 <ProcessMusic+0x134>
    7e34:	8c c0       	rjmp	.+280    	; 0x7f4e <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    7e36:	fa 01       	movw	r30, r20
    7e38:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7e3a:	c9 01       	movw	r24, r18
    7e3c:	04 96       	adiw	r24, 0x04	; 4
    7e3e:	90 93 2d 0b 	sts	0x0B2D, r25
    7e42:	80 93 2c 0b 	sts	0x0B2C, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7e46:	f9 01       	movw	r30, r18
    7e48:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7e4a:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7e4c:	e3 35       	cpi	r30, 0x53	; 83
    7e4e:	29 f4       	brne	.+10     	; 0x7e5a <ProcessMusic+0x158>
							loopStart=songPos;
    7e50:	90 93 2f 0b 	sts	0x0B2F, r25
    7e54:	80 93 2e 0b 	sts	0x0B2E, r24
    7e58:	7a c0       	rjmp	.+244    	; 0x7f4e <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7e5a:	e5 34       	cpi	r30, 0x45	; 69
    7e5c:	09 f0       	breq	.+2      	; 0x7e60 <ProcessMusic+0x15e>
    7e5e:	77 c0       	rjmp	.+238    	; 0x7f4e <ProcessMusic+0x24c>
							songPos=loopStart;
    7e60:	80 91 2e 0b 	lds	r24, 0x0B2E
    7e64:	90 91 2f 0b 	lds	r25, 0x0B2F
    7e68:	90 93 2d 0b 	sts	0x0B2D, r25
    7e6c:	80 93 2c 0b 	sts	0x0B2C, r24
    7e70:	6e c0       	rjmp	.+220    	; 0x7f4e <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7e72:	47 fd       	sbrc	r20, 7
    7e74:	40 93 27 0b 	sts	0x0B27, r20
					channel=lastStatus&0x0f;
    7e78:	90 91 27 0b 	lds	r25, 0x0B27
    7e7c:	89 2f       	mov	r24, r25
    7e7e:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7e80:	47 ff       	sbrs	r20, 7
    7e82:	08 c0       	rjmp	.+16     	; 0x7e94 <ProcessMusic+0x192>
    7e84:	2e 5f       	subi	r18, 0xFE	; 254
    7e86:	3f 4f       	sbci	r19, 0xFF	; 255
    7e88:	30 93 2d 0b 	sts	0x0B2D, r19
    7e8c:	20 93 2c 0b 	sts	0x0B2C, r18
    7e90:	fb 01       	movw	r30, r22
    7e92:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7e94:	90 7f       	andi	r25, 0xF0	; 240
    7e96:	90 3b       	cpi	r25, 0xB0	; 176
    7e98:	e1 f0       	breq	.+56     	; 0x7ed2 <ProcessMusic+0x1d0>
    7e9a:	90 3c       	cpi	r25, 0xC0	; 192
    7e9c:	09 f4       	brne	.+2      	; 0x7ea0 <ProcessMusic+0x19e>
    7e9e:	51 c0       	rjmp	.+162    	; 0x7f42 <ProcessMusic+0x240>
    7ea0:	90 39       	cpi	r25, 0x90	; 144
    7ea2:	09 f0       	breq	.+2      	; 0x7ea6 <ProcessMusic+0x1a4>
    7ea4:	54 c0       	rjmp	.+168    	; 0x7f4e <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7ea6:	e0 91 2c 0b 	lds	r30, 0x0B2C
    7eaa:	f0 91 2d 0b 	lds	r31, 0x0B2D
    7eae:	9f 01       	movw	r18, r30
    7eb0:	2f 5f       	subi	r18, 0xFF	; 255
    7eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    7eb4:	30 93 2d 0b 	sts	0x0B2D, r19
    7eb8:	20 93 2c 0b 	sts	0x0B2C, r18
    7ebc:	24 91       	lpm	r18, Z
    7ebe:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7ec0:	f8 9e       	mul	r15, r24
    7ec2:	f0 01       	movw	r30, r0
    7ec4:	11 24       	eor	r1, r1
    7ec6:	e9 53       	subi	r30, 0x39	; 57
    7ec8:	f5 4f       	sbci	r31, 0xF5	; 245
    7eca:	60 89       	ldd	r22, Z+16	; 0x10
    7ecc:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <TriggerNote>
    7ed0:	3e c0       	rjmp	.+124    	; 0x7f4e <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7ed2:	e0 91 2c 0b 	lds	r30, 0x0B2C
    7ed6:	f0 91 2d 0b 	lds	r31, 0x0B2D
    7eda:	9f 01       	movw	r18, r30
    7edc:	2f 5f       	subi	r18, 0xFF	; 255
    7ede:	3f 4f       	sbci	r19, 0xFF	; 255
    7ee0:	30 93 2d 0b 	sts	0x0B2D, r19
    7ee4:	20 93 2c 0b 	sts	0x0B2C, r18
    7ee8:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7eea:	47 30       	cpi	r20, 0x07	; 7
    7eec:	49 f4       	brne	.+18     	; 0x7f00 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7eee:	f8 9e       	mul	r15, r24
    7ef0:	d0 01       	movw	r26, r0
    7ef2:	11 24       	eor	r1, r1
    7ef4:	a9 53       	subi	r26, 0x39	; 57
    7ef6:	b5 4f       	sbci	r27, 0xF5	; 245
    7ef8:	ee 0f       	add	r30, r30
    7efa:	1c 96       	adiw	r26, 0x0c	; 12
    7efc:	ec 93       	st	X, r30
    7efe:	27 c0       	rjmp	.+78     	; 0x7f4e <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7f00:	4b 30       	cpi	r20, 0x0B	; 11
    7f02:	49 f4       	brne	.+18     	; 0x7f16 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7f04:	f8 9e       	mul	r15, r24
    7f06:	d0 01       	movw	r26, r0
    7f08:	11 24       	eor	r1, r1
    7f0a:	a9 53       	subi	r26, 0x39	; 57
    7f0c:	b5 4f       	sbci	r27, 0xF5	; 245
    7f0e:	ee 0f       	add	r30, r30
    7f10:	13 96       	adiw	r26, 0x03	; 3
    7f12:	ec 93       	st	X, r30
    7f14:	1c c0       	rjmp	.+56     	; 0x7f4e <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7f16:	4c 35       	cpi	r20, 0x5C	; 92
    7f18:	49 f4       	brne	.+18     	; 0x7f2c <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7f1a:	f8 9e       	mul	r15, r24
    7f1c:	d0 01       	movw	r26, r0
    7f1e:	11 24       	eor	r1, r1
    7f20:	a9 53       	subi	r26, 0x39	; 57
    7f22:	b5 4f       	sbci	r27, 0xF5	; 245
    7f24:	ee 0f       	add	r30, r30
    7f26:	1a 96       	adiw	r26, 0x0a	; 10
    7f28:	ec 93       	st	X, r30
    7f2a:	11 c0       	rjmp	.+34     	; 0x7f4e <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7f2c:	44 36       	cpi	r20, 0x64	; 100
    7f2e:	79 f4       	brne	.+30     	; 0x7f4e <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7f30:	f8 9e       	mul	r15, r24
    7f32:	d0 01       	movw	r26, r0
    7f34:	11 24       	eor	r1, r1
    7f36:	a9 53       	subi	r26, 0x39	; 57
    7f38:	b5 4f       	sbci	r27, 0xF5	; 245
    7f3a:	ee 0f       	add	r30, r30
    7f3c:	1b 96       	adiw	r26, 0x0b	; 11
    7f3e:	ec 93       	st	X, r30
    7f40:	06 c0       	rjmp	.+12     	; 0x7f4e <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7f42:	f8 9e       	mul	r15, r24
    7f44:	f0 01       	movw	r30, r0
    7f46:	11 24       	eor	r1, r1
    7f48:	e9 53       	subi	r30, 0x39	; 57
    7f4a:	f5 4f       	sbci	r31, 0xF5	; 245
    7f4c:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7f4e:	8c e2       	ldi	r24, 0x2C	; 44
    7f50:	9b e0       	ldi	r25, 0x0B	; 11
    7f52:	0e 94 74 3d 	call	0x7ae8	; 0x7ae8 <ReadVarLen>
    7f56:	90 93 2a 0b 	sts	0x0B2A, r25
    7f5a:	80 93 29 0b 	sts	0x0B29, r24
				currDeltaTime=0;
    7f5e:	10 92 24 0b 	sts	0x0B24, r1
    7f62:	10 92 23 0b 	sts	0x0B23, r1
    7f66:	3b cf       	rjmp	.-394    	; 0x7dde <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7f68:	01 96       	adiw	r24, 0x01	; 1
    7f6a:	90 93 24 0b 	sts	0x0B24, r25
    7f6e:	80 93 23 0b 	sts	0x0B23, r24
    7f72:	90 ed       	ldi	r25, 0xD0	; 208
    7f74:	a9 2e       	mov	r10, r25
    7f76:	9a e0       	ldi	r25, 0x0A	; 10
    7f78:	b9 2e       	mov	r11, r25
    7f7a:	2a ed       	ldi	r18, 0xDA	; 218
    7f7c:	c2 2e       	mov	r12, r18
    7f7e:	2a e0       	ldi	r18, 0x0A	; 10
    7f80:	d2 2e       	mov	r13, r18
    7f82:	3b ed       	ldi	r19, 0xDB	; 219
    7f84:	e3 2e       	mov	r14, r19
    7f86:	3a e0       	ldi	r19, 0x0A	; 10
    7f88:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7f8a:	66 24       	eor	r6, r6
    7f8c:	6a 94       	dec	r6
    7f8e:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7f90:	88 81       	ld	r24, Y
    7f92:	85 ff       	sbrs	r24, 5
    7f94:	42 c0       	rjmp	.+132    	; 0x801a <ProcessMusic+0x318>
    7f96:	2d 89       	ldd	r18, Y+21	; 0x15
    7f98:	3e 89       	ldd	r19, Y+22	; 0x16
    7f9a:	23 2b       	or	r18, r19
    7f9c:	09 f4       	brne	.+2      	; 0x7fa0 <ProcessMusic+0x29e>
    7f9e:	3d c0       	rjmp	.+122    	; 0x801a <ProcessMusic+0x318>
    7fa0:	86 fd       	sbrc	r24, 6
    7fa2:	3b c0       	rjmp	.+118    	; 0x801a <ProcessMusic+0x318>
    7fa4:	47 01       	movw	r8, r14
    7fa6:	f2 e0       	ldi	r31, 0x02	; 2
    7fa8:	8f 1a       	sub	r8, r31
    7faa:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7fac:	d6 01       	movw	r26, r12
    7fae:	9c 91       	ld	r25, X
    7fb0:	f4 01       	movw	r30, r8
    7fb2:	80 81       	ld	r24, Z
    7fb4:	98 13       	cpse	r25, r24
    7fb6:	2e c0       	rjmp	.+92     	; 0x8014 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7fb8:	ed 89       	ldd	r30, Y+21	; 0x15
    7fba:	fe 89       	ldd	r31, Y+22	; 0x16
    7fbc:	bf 01       	movw	r22, r30
    7fbe:	6f 5f       	subi	r22, 0xFF	; 255
    7fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    7fc2:	7e 8b       	std	Y+22, r23	; 0x16
    7fc4:	6d 8b       	std	Y+21, r22	; 0x15
    7fc6:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7fc8:	8f 3f       	cpi	r24, 0xFF	; 255
    7fca:	31 f4       	brne	.+12     	; 0x7fd8 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7fcc:	88 81       	ld	r24, Y
    7fce:	8f 77       	andi	r24, 0x7F	; 127
    7fd0:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7fd2:	1e 8a       	std	Y+22, r1	; 0x16
    7fd4:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7fd6:	1e c0       	rjmp	.+60     	; 0x8014 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7fd8:	9f 01       	movw	r18, r30
    7fda:	2e 5f       	subi	r18, 0xFE	; 254
    7fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    7fde:	3e 8b       	std	Y+22, r19	; 0x16
    7fe0:	2d 8b       	std	Y+21, r18	; 0x15
    7fe2:	fb 01       	movw	r30, r22
    7fe4:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7fe6:	e8 2f       	mov	r30, r24
    7fe8:	f0 e0       	ldi	r31, 0x00	; 0
    7fea:	ee 0f       	add	r30, r30
    7fec:	ff 1f       	adc	r31, r31
    7fee:	e2 54       	subi	r30, 0x42	; 66
    7ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    7ff2:	25 91       	lpm	r18, Z+
    7ff4:	34 91       	lpm	r19, Z
    7ff6:	ce 01       	movw	r24, r28
    7ff8:	f9 01       	movw	r30, r18
    7ffa:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7ffc:	ed 89       	ldd	r30, Y+21	; 0x15
    7ffe:	fe 89       	ldd	r31, Y+22	; 0x16
    8000:	cf 01       	movw	r24, r30
    8002:	01 96       	adiw	r24, 0x01	; 1
    8004:	9e 8b       	std	Y+22, r25	; 0x16
    8006:	8d 8b       	std	Y+21, r24	; 0x15
    8008:	e4 91       	lpm	r30, Z
    800a:	d4 01       	movw	r26, r8
    800c:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    800e:	f6 01       	movw	r30, r12
    8010:	10 82       	st	Z, r1
    8012:	cc cf       	rjmp	.-104    	; 0x7fac <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8014:	9f 5f       	subi	r25, 0xFF	; 255
    8016:	d6 01       	movw	r26, r12
    8018:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    801a:	98 81       	ld	r25, Y
    801c:	95 ff       	sbrs	r25, 5
    801e:	6c c0       	rjmp	.+216    	; 0x80f8 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8020:	f7 01       	movw	r30, r14
    8022:	80 81       	ld	r24, Z
    8024:	8f 3f       	cpi	r24, 0xFF	; 255
    8026:	11 f0       	breq	.+4      	; 0x802c <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8028:	8f 5f       	subi	r24, 0xFF	; 255
    802a:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    802c:	97 fd       	sbrc	r25, 7
    802e:	04 c0       	rjmp	.+8      	; 0x8038 <ProcessMusic+0x336>
    8030:	f7 01       	movw	r30, r14
    8032:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8034:	90 81       	ld	r25, Z
    8036:	01 c0       	rjmp	.+2      	; 0x803a <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8038:	9f ef       	ldi	r25, 0xFF	; 255
    803a:	f7 01       	movw	r30, r14
    803c:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    803e:	80 81       	ld	r24, Z
    8040:	88 23       	and	r24, r24
    8042:	09 f4       	brne	.+2      	; 0x8046 <ProcessMusic+0x344>
    8044:	4e c0       	rjmp	.+156    	; 0x80e2 <ProcessMusic+0x3e0>
    8046:	31 96       	adiw	r30, 0x01	; 1
    8048:	50 81       	ld	r21, Z
    804a:	55 23       	and	r21, r21
    804c:	09 f4       	brne	.+2      	; 0x8050 <ProcessMusic+0x34e>
    804e:	49 c0       	rjmp	.+146    	; 0x80e2 <ProcessMusic+0x3e0>
    8050:	99 23       	and	r25, r25
    8052:	09 f4       	brne	.+2      	; 0x8056 <ProcessMusic+0x354>
    8054:	46 c0       	rjmp	.+140    	; 0x80e2 <ProcessMusic+0x3e0>
    8056:	40 91 28 0b 	lds	r20, 0x0B28
    805a:	44 23       	and	r20, r20
    805c:	09 f4       	brne	.+2      	; 0x8060 <ProcessMusic+0x35e>
    805e:	41 c0       	rjmp	.+130    	; 0x80e2 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8060:	89 9f       	mul	r24, r25
    8062:	c0 01       	movw	r24, r0
    8064:	11 24       	eor	r1, r1
    8066:	93 95       	inc	r25
				uVol>>=8;
    8068:	89 2f       	mov	r24, r25
    806a:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    806c:	58 9f       	mul	r21, r24
    806e:	90 01       	movw	r18, r0
    8070:	59 9f       	mul	r21, r25
    8072:	30 0d       	add	r19, r0
    8074:	11 24       	eor	r1, r1
    8076:	c9 01       	movw	r24, r18
    8078:	93 95       	inc	r25
				uVol>>=8;
    807a:	89 2f       	mov	r24, r25
    807c:	99 27       	eor	r25, r25
    807e:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8080:	50 81       	ld	r21, Z
    8082:	58 9f       	mul	r21, r24
    8084:	90 01       	movw	r18, r0
    8086:	59 9f       	mul	r21, r25
    8088:	30 0d       	add	r19, r0
    808a:	11 24       	eor	r1, r1
    808c:	33 95       	inc	r19
					uVol>>=8;
    808e:	23 2f       	mov	r18, r19
    8090:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8092:	42 9f       	mul	r20, r18
    8094:	c0 01       	movw	r24, r0
    8096:	43 9f       	mul	r20, r19
    8098:	90 0d       	add	r25, r0
    809a:	11 24       	eor	r1, r1
    809c:	93 95       	inc	r25
				uVol>>=8;
    809e:	89 2f       	mov	r24, r25
    80a0:	99 27       	eor	r25, r25
    80a2:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    80a4:	20 81       	ld	r18, Z
    80a6:	22 23       	and	r18, r18
    80a8:	f1 f0       	breq	.+60     	; 0x80e6 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    80aa:	d5 01       	movw	r26, r10
    80ac:	ec 91       	ld	r30, X
    80ae:	f0 e0       	ldi	r31, 0x00	; 0
    80b0:	e0 50       	subi	r30, 0x00	; 0
    80b2:	fc 47       	sbci	r31, 0x7C	; 124
    80b4:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    80b6:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    80b8:	2e 9f       	mul	r18, r30
    80ba:	f0 01       	movw	r30, r0
    80bc:	11 24       	eor	r1, r1
    80be:	f3 95       	inc	r31
					tVol>>=8;
    80c0:	ef 2f       	mov	r30, r31
    80c2:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    80c4:	a3 01       	movw	r20, r6
    80c6:	4e 1b       	sub	r20, r30
    80c8:	5f 0b       	sbc	r21, r31
    80ca:	48 9f       	mul	r20, r24
    80cc:	90 01       	movw	r18, r0
    80ce:	49 9f       	mul	r20, r25
    80d0:	30 0d       	add	r19, r0
    80d2:	58 9f       	mul	r21, r24
    80d4:	30 0d       	add	r19, r0
    80d6:	11 24       	eor	r1, r1
    80d8:	c9 01       	movw	r24, r18
    80da:	93 95       	inc	r25
					uVol>>=8;
    80dc:	89 2f       	mov	r24, r25
    80de:	99 27       	eor	r25, r25
    80e0:	02 c0       	rjmp	.+4      	; 0x80e6 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    80e2:	80 e0       	ldi	r24, 0x00	; 0
    80e4:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    80e6:	f5 01       	movw	r30, r10
    80e8:	30 81       	ld	r19, Z
    80ea:	f7 01       	movw	r30, r14
    80ec:	39 97       	sbiw	r30, 0x09	; 9
    80ee:	20 81       	ld	r18, Z
    80f0:	23 0f       	add	r18, r19
    80f2:	d5 01       	movw	r26, r10
    80f4:	2c 93       	st	X, r18
    80f6:	02 c0       	rjmp	.+4      	; 0x80fc <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    80f8:	80 e0       	ldi	r24, 0x00	; 0
    80fa:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    80fc:	f8 01       	movw	r30, r16
    80fe:	80 83       	st	Z, r24
    8100:	67 96       	adiw	r28, 0x17	; 23
    8102:	0a 5f       	subi	r16, 0xFA	; 250
    8104:	1f 4f       	sbci	r17, 0xFF	; 255
    8106:	f7 e1       	ldi	r31, 0x17	; 23
    8108:	af 0e       	add	r10, r31
    810a:	b1 1c       	adc	r11, r1
    810c:	87 e1       	ldi	r24, 0x17	; 23
    810e:	c8 0e       	add	r12, r24
    8110:	d1 1c       	adc	r13, r1
    8112:	97 e1       	ldi	r25, 0x17	; 23
    8114:	e9 0e       	add	r14, r25
    8116:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8118:	ab e0       	ldi	r26, 0x0B	; 11
    811a:	c3 32       	cpi	r28, 0x23	; 35
    811c:	da 07       	cpc	r29, r26
    811e:	09 f0       	breq	.+2      	; 0x8122 <ProcessMusic+0x420>
    8120:	37 cf       	rjmp	.-402    	; 0x7f90 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8122:	df 91       	pop	r29
    8124:	cf 91       	pop	r28
    8126:	1f 91       	pop	r17
    8128:	0f 91       	pop	r16
    812a:	ff 90       	pop	r15
    812c:	ef 90       	pop	r14
    812e:	df 90       	pop	r13
    8130:	cf 90       	pop	r12
    8132:	bf 90       	pop	r11
    8134:	af 90       	pop	r10
    8136:	9f 90       	pop	r9
    8138:	8f 90       	pop	r8
    813a:	7f 90       	pop	r7
    813c:	6f 90       	pop	r6
    813e:	08 95       	ret

00008140 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8140:	80 93 28 0b 	sts	0x0B28, r24
    8144:	08 95       	ret

00008146 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8146:	99 27       	eor	r25, r25
	clr r23
    8148:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    814a:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    814c:	09 f4       	brne	.+2      	; 0x8150 <set_note_waves>
		ret
    814e:	08 95       	ret

00008150 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8150:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8152:	f2 e8       	ldi	r31, 0x82	; 130
	lsl r22
    8154:	66 0f       	add	r22, r22
	rol r23
    8156:	77 1f       	adc	r23, r23
	add ZL,r22
    8158:	e6 0f       	add	r30, r22
	adc ZH,r23	
    815a:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    815c:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    815e:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8160:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    8162:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8164:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8166:	28 9f       	mul	r18, r24
	add ZL,r0
    8168:	e0 0d       	add	r30, r0
	adc ZH,r1
    816a:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    816c:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    816e:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8170:	11 24       	eor	r1, r1
	

	ret
    8172:	08 95       	ret

00008174 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8174:	99 27       	eor	r25, r25
	clr r23
    8176:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8178:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    817a:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    817c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    817e:	28 9f       	mul	r18, r24
	add ZL,r0
    8180:	e0 0d       	add	r30, r0
	adc ZH,r1
    8182:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8184:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8186:	31 f4       	brne	.+12     	; 0x8194 <smw1>
	lds r22,tr4_params
    8188:	60 91 57 0a 	lds	r22, 0x0A57
	andi r22,0xfe;
    818c:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    818e:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw	
    8192:	0b c0       	rjmp	.+22     	; 0x81aa <esmw>

00008194 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8194:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8196:	31 f4       	brne	.+12     	; 0x81a4 <smw2>
	lds r22,tr4_params
    8198:	60 91 57 0a 	lds	r22, 0x0A57
	ori r22,0xfe;
    819c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    819e:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw
    81a2:	03 c0       	rjmp	.+6      	; 0x81aa <esmw>

000081a4 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    81a4:	74 e8       	ldi	r23, 0x84	; 132
	add r23,r22
    81a6:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    81a8:	75 83       	std	Z+5, r23	; 0x05

000081aa <esmw>:

esmw:
	clr r1	
    81aa:	11 24       	eor	r1, r1
	ret
    81ac:	08 95       	ret
	...

00008200 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8200:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8202:	80 93 43 0a 	sts	0x0A43, r24
	ret
    8206:	08 95       	ret

00008208 <steptable>:
    8208:	22 00       	.word	0x0022	; ????
    820a:	24 00       	.word	0x0024	; ????
    820c:	26 00       	.word	0x0026	; ????
    820e:	28 00       	.word	0x0028	; ????
    8210:	2b 00       	.word	0x002b	; ????
    8212:	2d 00       	.word	0x002d	; ????
    8214:	30 00       	.word	0x0030	; ????
    8216:	33 00       	.word	0x0033	; ????
    8218:	36 00       	.word	0x0036	; ????
    821a:	39 00       	.word	0x0039	; ????
    821c:	3d 00       	.word	0x003d	; ????
    821e:	40 00       	.word	0x0040	; ????
    8220:	44 00       	.word	0x0044	; ????
    8222:	48 00       	.word	0x0048	; ????
    8224:	4c 00       	.word	0x004c	; ????
    8226:	51 00       	.word	0x0051	; ????
    8228:	56 00       	.word	0x0056	; ????
    822a:	5b 00       	.word	0x005b	; ????
    822c:	60 00       	.word	0x0060	; ????
    822e:	66 00       	.word	0x0066	; ????
    8230:	6c 00       	.word	0x006c	; ????
    8232:	73 00       	.word	0x0073	; ????
    8234:	79 00       	.word	0x0079	; ????
    8236:	81 00       	.word	0x0081	; ????
    8238:	88 00       	.word	0x0088	; ????
    823a:	90 00       	.word	0x0090	; ????
    823c:	99 00       	.word	0x0099	; ????
    823e:	a2 00       	.word	0x00a2	; ????
    8240:	ac 00       	.word	0x00ac	; ????
    8242:	b6 00       	.word	0x00b6	; ????
    8244:	c1 00       	.word	0x00c1	; ????
    8246:	cc 00       	.word	0x00cc	; ????
    8248:	d8 00       	.word	0x00d8	; ????
    824a:	e5 00       	.word	0x00e5	; ????
    824c:	f3 00       	.word	0x00f3	; ????
    824e:	01 01       	movw	r0, r2
    8250:	10 01       	movw	r2, r0
    8252:	21 01       	movw	r4, r2
    8254:	32 01       	movw	r6, r4
    8256:	44 01       	movw	r8, r8
    8258:	57 01       	movw	r10, r14
    825a:	6c 01       	movw	r12, r24
    825c:	81 01       	movw	r16, r2
    825e:	98 01       	movw	r18, r16
    8260:	b0 01       	movw	r22, r0
    8262:	ca 01       	movw	r24, r20
    8264:	e5 01       	movw	r28, r10
    8266:	02 02       	muls	r16, r18
    8268:	21 02       	muls	r18, r17
    826a:	41 02       	muls	r20, r17
    826c:	64 02       	muls	r22, r20
    826e:	88 02       	muls	r24, r24
    8270:	ae 02       	muls	r26, r30
    8272:	d7 02       	muls	r29, r23
    8274:	03 03       	mulsu	r16, r19
    8276:	30 03       	mulsu	r19, r16
    8278:	61 03       	mulsu	r22, r17
    827a:	94 03       	fmuls	r17, r20
    827c:	cb 03       	fmulsu	r20, r19
    827e:	05 04       	cpc	r0, r5
    8280:	42 04       	cpc	r4, r2
    8282:	83 04       	cpc	r8, r3
    8284:	c7 04       	cpc	r12, r7
    8286:	10 05       	cpc	r17, r0
    8288:	5d 05       	cpc	r21, r13
    828a:	af 05       	cpc	r26, r15
    828c:	05 06       	cpc	r0, r21
    828e:	61 06       	cpc	r6, r17
    8290:	c2 06       	cpc	r12, r18
    8292:	29 07       	cpc	r18, r25
    8294:	96 07       	cpc	r25, r22
    8296:	09 08       	sbc	r0, r9
    8298:	83 08       	sbc	r8, r3
    829a:	05 09       	sbc	r16, r5
    829c:	8e 09       	sbc	r24, r14
    829e:	20 0a       	sbc	r2, r16
    82a0:	ba 0a       	sbc	r11, r26
    82a2:	5d 0b       	sbc	r21, r29
    82a4:	0a 0c       	add	r0, r10
    82a6:	c1 0c       	add	r12, r1
    82a8:	84 0d       	add	r24, r4
    82aa:	51 0e       	add	r5, r17
    82ac:	2b 0f       	add	r18, r27
    82ae:	12 10       	cpse	r1, r2
    82b0:	07 11       	cpse	r16, r7
    82b2:	0a 12       	cpse	r0, r26
    82b4:	1d 13       	cpse	r17, r29
    82b6:	40 14       	cp	r4, r0
    82b8:	74 15       	cp	r23, r4
    82ba:	ba 16       	cp	r11, r26
    82bc:	14 18       	sub	r1, r4
    82be:	83 19       	sub	r24, r3
    82c0:	07 1b       	sub	r16, r23
    82c2:	a3 1c       	adc	r10, r3
    82c4:	57 1e       	adc	r5, r23
    82c6:	24 20       	and	r2, r4
    82c8:	0e 22       	and	r0, r30
    82ca:	14 24       	eor	r1, r4
    82cc:	39 26       	eor	r3, r25
    82ce:	7f 28       	or	r7, r15
    82d0:	e8 2a       	or	r14, r24
    82d2:	75 2d       	mov	r23, r5
    82d4:	29 30       	cpi	r18, 0x09	; 9
    82d6:	06 33       	cpi	r16, 0x36	; 54
    82d8:	0f 36       	cpi	r16, 0x6F	; 111
    82da:	45 39       	cpi	r20, 0x95	; 149
    82dc:	ad 3c       	cpi	r26, 0xCD	; 205
    82de:	49 40       	sbci	r20, 0x09	; 9
    82e0:	1b 44       	sbci	r17, 0x4B	; 75
    82e2:	28 48       	sbci	r18, 0x88	; 136
    82e4:	73 4c       	sbci	r23, 0xC3	; 195
    82e6:	fe 50       	subi	r31, 0x0E	; 14
    82e8:	cf 55       	subi	r28, 0x5F	; 95
    82ea:	ea 5a       	subi	r30, 0xAA	; 170
    82ec:	51 60       	ori	r21, 0x01	; 1
    82ee:	0c 66       	ori	r16, 0x6C	; 108
    82f0:	1d 6c       	ori	r17, 0xCD	; 205
    82f2:	8b 72       	andi	r24, 0x2B	; 43
    82f4:	5a 79       	andi	r21, 0x9A	; 154
    82f6:	92 80       	ldd	r9, Z+2	; 0x02
    82f8:	37 88       	ldd	r3, Z+23	; 0x17
    82fa:	50 90 e5 98 	lds	r5, 0x98E5
    82fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8300:	9f ab       	std	Y+55, r25	; 0x37
    8302:	d3 b5       	in	r29, 0x23	; 35
    8304:	a3 c0       	rjmp	.+326    	; 0x844c <waves+0x4c>
	...

00008400 <waves>:
    8400:	00 03       	mulsu	r16, r16
    8402:	06 09       	sbc	r16, r6
    8404:	0c 10       	cpse	r0, r12
    8406:	13 16       	cp	r1, r19
    8408:	19 1c       	adc	r1, r9
    840a:	1f 22       	and	r1, r31
    840c:	25 28       	or	r2, r5
    840e:	2b 2e       	mov	r2, r27
    8410:	31 33       	cpi	r19, 0x31	; 49
    8412:	36 39       	cpi	r19, 0x96	; 150
    8414:	3c 3f       	cpi	r19, 0xFC	; 252
    8416:	41 44       	sbci	r20, 0x41	; 65
    8418:	47 49       	sbci	r20, 0x97	; 151
    841a:	4c 4e       	sbci	r20, 0xEC	; 236
    841c:	51 53       	subi	r21, 0x31	; 49
    841e:	55 58       	subi	r21, 0x85	; 133
    8420:	5a 5c       	subi	r21, 0xCA	; 202
    8422:	5e 60       	ori	r21, 0x0E	; 14
    8424:	62 64       	ori	r22, 0x42	; 66
    8426:	66 68       	ori	r22, 0x86	; 134
    8428:	6a 6b       	ori	r22, 0xBA	; 186
    842a:	6d 6f       	ori	r22, 0xFD	; 253
    842c:	70 71       	andi	r23, 0x10	; 16
    842e:	73 74       	andi	r23, 0x43	; 67
    8430:	75 76       	andi	r23, 0x65	; 101
    8432:	78 79       	andi	r23, 0x98	; 152
    8434:	7a 7a       	andi	r23, 0xAA	; 170
    8436:	7b 7c       	andi	r23, 0xCB	; 203
    8438:	7d 7d       	andi	r23, 0xDD	; 221
    843a:	7e 7e       	andi	r23, 0xEE	; 238
    843c:	7e 7f       	andi	r23, 0xFE	; 254
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7e 7e       	andi	r23, 0xEE	; 238
    8446:	7e 7d       	andi	r23, 0xDE	; 222
    8448:	7d 7c       	andi	r23, 0xCD	; 205
    844a:	7b 7a       	andi	r23, 0xAB	; 171
    844c:	7a 79       	andi	r23, 0x9A	; 154
    844e:	78 76       	andi	r23, 0x68	; 104
    8450:	75 74       	andi	r23, 0x45	; 69
    8452:	73 71       	andi	r23, 0x13	; 19
    8454:	70 6f       	ori	r23, 0xF0	; 240
    8456:	6d 6b       	ori	r22, 0xBD	; 189
    8458:	6a 68       	ori	r22, 0x8A	; 138
    845a:	66 64       	ori	r22, 0x46	; 70
    845c:	62 60       	ori	r22, 0x02	; 2
    845e:	5e 5c       	subi	r21, 0xCE	; 206
    8460:	5a 58       	subi	r21, 0x8A	; 138
    8462:	55 53       	subi	r21, 0x35	; 53
    8464:	51 4e       	sbci	r21, 0xE1	; 225
    8466:	4c 49       	sbci	r20, 0x9C	; 156
    8468:	47 44       	sbci	r20, 0x47	; 71
    846a:	41 3f       	cpi	r20, 0xF1	; 241
    846c:	3c 39       	cpi	r19, 0x9C	; 156
    846e:	36 33       	cpi	r19, 0x36	; 54
    8470:	31 2e       	mov	r3, r17
    8472:	2b 28       	or	r2, r11
    8474:	25 22       	and	r2, r21
    8476:	1f 1c       	adc	r1, r15
    8478:	19 16       	cp	r1, r25
    847a:	13 10       	cpse	r1, r3
    847c:	0c 09       	sbc	r16, r12
    847e:	06 03       	mulsu	r16, r22
    8480:	00 fd       	sbrc	r16, 0
    8482:	fa f7       	brpl	.-2      	; 0x8482 <waves+0x82>
    8484:	f4 f0       	brlt	.+60     	; 0x84c2 <waves+0xc2>
    8486:	ed ea       	ldi	r30, 0xAD	; 173
    8488:	e7 e4       	ldi	r30, 0x47	; 71
    848a:	e1 de       	rcall	.-574    	; 0x824e <steptable+0x46>
    848c:	db d8       	rcall	.-3658   	; 0x7644 <ReadButtons+0x66>
    848e:	d5 d2       	rcall	.+1450   	; 0x8a3a <waves+0x63a>
    8490:	cf cd       	rjmp	.-1122   	; 0x8030 <ProcessMusic+0x32e>
    8492:	ca c7       	rjmp	.+3988   	; 0x9428 <wifiGetAndDiscard+0x12>
    8494:	c4 c1       	rjmp	.+904    	; 0x881e <waves+0x41e>
    8496:	bf bc       	out	0x2f, r11	; 47
    8498:	b9 b7       	in	r27, 0x39	; 57
    849a:	b4 b2       	in	r11, 0x14	; 20
    849c:	af ad       	ldd	r26, Y+63	; 0x3f
    849e:	ab a8       	ldd	r10, Y+51	; 0x33
    84a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    84a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    84a4:	9e 9c       	mul	r9, r14
    84a6:	9a 98       	cbi	0x13, 2	; 19
    84a8:	96 95       	lsr	r25
    84aa:	93 91       	.word	0x9193	; ????
    84ac:	90 8f       	std	Z+24, r25	; 0x18
    84ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    84b0:	8b 8a       	std	Y+19, r8	; 0x13
    84b2:	88 87       	std	Y+8, r24	; 0x08
    84b4:	86 86       	std	Z+14, r8	; 0x0e
    84b6:	85 84       	ldd	r8, Z+13	; 0x0d
    84b8:	83 83       	std	Z+3, r24	; 0x03
    84ba:	82 82       	std	Z+2, r8	; 0x02
    84bc:	82 81       	ldd	r24, Z+2	; 0x02
    84be:	81 81       	ldd	r24, Z+1	; 0x01
    84c0:	81 81       	ldd	r24, Z+1	; 0x01
    84c2:	81 81       	ldd	r24, Z+1	; 0x01
    84c4:	82 82       	std	Z+2, r8	; 0x02
    84c6:	82 83       	std	Z+2, r24	; 0x02
    84c8:	83 84       	ldd	r8, Z+11	; 0x0b
    84ca:	85 86       	std	Z+13, r8	; 0x0d
    84cc:	86 87       	std	Z+14, r24	; 0x0e
    84ce:	88 8a       	std	Y+16, r8	; 0x10
    84d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    84d2:	8d 8f       	std	Y+29, r24	; 0x1d
    84d4:	90 91 93 95 	lds	r25, 0x9593
    84d8:	96 98       	cbi	0x12, 6	; 18
    84da:	9a 9c       	mul	r9, r10
    84dc:	9e a0       	ldd	r9, Y+38	; 0x26
    84de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    84e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    84e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    84e4:	af b2       	in	r10, 0x1f	; 31
    84e6:	b4 b7       	in	r27, 0x34	; 52
    84e8:	b9 bc       	out	0x29, r11	; 41
    84ea:	bf c1       	rjmp	.+894    	; 0x886a <waves+0x46a>
    84ec:	c4 c7       	rjmp	.+3976   	; 0x9476 <wifiGetPB+0x40>
    84ee:	ca cd       	rjmp	.-1132   	; 0x8084 <ProcessMusic+0x382>
    84f0:	cf d2       	rcall	.+1438   	; 0x8a90 <waves+0x690>
    84f2:	d5 d8       	rcall	.-3670   	; 0x769e <FormatEeprom+0x34>
    84f4:	db de       	rcall	.-586    	; 0x82ac <steptable+0xa4>
    84f6:	e1 e4       	ldi	r30, 0x41	; 65
    84f8:	e7 ea       	ldi	r30, 0xA7	; 167
    84fa:	ed f0       	brhs	.+58     	; 0x8536 <waves+0x136>
    84fc:	f4 f7       	brge	.-4      	; 0x84fa <waves+0xfa>
    84fe:	fa fd       	.word	0xfdfa	; ????
    8500:	80 81       	ld	r24, Z
    8502:	82 83       	std	Z+2, r24	; 0x02
    8504:	84 85       	ldd	r24, Z+12	; 0x0c
    8506:	86 87       	std	Z+14, r24	; 0x0e
    8508:	88 89       	ldd	r24, Y+16	; 0x10
    850a:	8a 8b       	std	Y+18, r24	; 0x12
    850c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    850e:	8e 8f       	std	Y+30, r24	; 0x1e
    8510:	90 91 92 93 	lds	r25, 0x9392
    8514:	94 95       	.word	0x9594	; ????
    8516:	96 97       	sbiw	r26, 0x26	; 38
    8518:	98 99       	sbic	0x13, 0	; 19
    851a:	9a 9b       	sbis	0x13, 2	; 19
    851c:	9c 9d       	mul	r25, r12
    851e:	9e 9f       	mul	r25, r30
    8520:	a0 a1       	ldd	r26, Z+32	; 0x20
    8522:	a2 a3       	std	Z+34, r26	; 0x22
    8524:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8526:	a6 a7       	std	Z+46, r26	; 0x2e
    8528:	a8 a9       	ldd	r26, Y+48	; 0x30
    852a:	aa ab       	std	Y+50, r26	; 0x32
    852c:	ac ad       	ldd	r26, Y+60	; 0x3c
    852e:	ae af       	std	Y+62, r26	; 0x3e
    8530:	b0 b1       	in	r27, 0x00	; 0
    8532:	b2 b3       	in	r27, 0x12	; 18
    8534:	b4 b5       	in	r27, 0x24	; 36
    8536:	b6 b7       	in	r27, 0x36	; 54
    8538:	b8 b9       	out	0x08, r27	; 8
    853a:	ba bb       	out	0x1a, r27	; 26
    853c:	bc bd       	out	0x2c, r27	; 44
    853e:	be bf       	out	0x3e, r27	; 62
    8540:	c0 c1       	rjmp	.+896    	; 0x88c2 <waves+0x4c2>
    8542:	c2 c3       	rjmp	.+1924   	; 0x8cc8 <waves+0x8c8>
    8544:	c4 c5       	rjmp	.+2952   	; 0x90ce <MoveSprite+0x2a>
    8546:	c6 c7       	rjmp	.+3980   	; 0x94d4 <wifiGetPBT+0x34>
    8548:	c8 c9       	rjmp	.-3184   	; 0x78da <UartSendChar+0x1c>
    854a:	ca cb       	rjmp	.-2156   	; 0x7ce0 <TriggerNote+0x5e>
    854c:	cc cd       	rjmp	.-1128   	; 0x80e6 <ProcessMusic+0x3e4>
    854e:	ce cf       	rjmp	.-100    	; 0x84ec <waves+0xec>
    8550:	d0 d1       	rcall	.+928    	; 0x88f2 <waves+0x4f2>
    8552:	d2 d3       	rcall	.+1956   	; 0x8cf8 <waves+0x8f8>
    8554:	d4 d5       	rcall	.+2984   	; 0x90fe <InitializeVideoMode+0xe>
    8556:	d6 d7       	rcall	.+4012   	; 0x9504 <wifiGetPBT+0x64>
    8558:	d8 d9       	rcall	.-3152   	; 0x790a <GetPrngNumber+0x1a>
    855a:	da db       	rcall	.-2124   	; 0x7d10 <ProcessMusic+0xe>
    855c:	dc dd       	rcall	.-1096   	; 0x8116 <ProcessMusic+0x414>
    855e:	de df       	rcall	.-68     	; 0x851c <waves+0x11c>
    8560:	e0 e1       	ldi	r30, 0x10	; 16
    8562:	e2 e3       	ldi	r30, 0x32	; 50
    8564:	e4 e5       	ldi	r30, 0x54	; 84
    8566:	e6 e7       	ldi	r30, 0x76	; 118
    8568:	e8 e9       	ldi	r30, 0x98	; 152
    856a:	ea eb       	ldi	r30, 0xBA	; 186
    856c:	ec ed       	ldi	r30, 0xDC	; 220
    856e:	ee ef       	ldi	r30, 0xFE	; 254
    8570:	f0 f1       	brcs	.+124    	; 0x85ee <waves+0x1ee>
    8572:	f2 f3       	brmi	.-4      	; 0x8570 <waves+0x170>
    8574:	f4 f5       	brge	.+124    	; 0x85f2 <waves+0x1f2>
    8576:	f6 f7       	brtc	.-4      	; 0x8574 <waves+0x174>
    8578:	f8 f9       	.word	0xf9f8	; ????
    857a:	fa fb       	.word	0xfbfa	; ????
    857c:	fc fd       	.word	0xfdfc	; ????
    857e:	fe ff       	.word	0xfffe	; ????
    8580:	00 01       	movw	r0, r0
    8582:	02 03       	mulsu	r16, r18
    8584:	04 05       	cpc	r16, r4
    8586:	06 07       	cpc	r16, r22
    8588:	08 09       	sbc	r16, r8
    858a:	0a 0b       	sbc	r16, r26
    858c:	0c 0d       	add	r16, r12
    858e:	0e 0f       	add	r16, r30
    8590:	10 11       	cpse	r17, r0
    8592:	12 13       	cpse	r17, r18
    8594:	14 15       	cp	r17, r4
    8596:	16 17       	cp	r17, r22
    8598:	18 19       	sub	r17, r8
    859a:	1a 1b       	sub	r17, r26
    859c:	1c 1d       	adc	r17, r12
    859e:	1e 1f       	adc	r17, r30
    85a0:	20 21       	and	r18, r0
    85a2:	22 23       	and	r18, r18
    85a4:	24 25       	eor	r18, r4
    85a6:	26 27       	eor	r18, r22
    85a8:	28 29       	or	r18, r8
    85aa:	2a 2b       	or	r18, r26
    85ac:	2c 2d       	mov	r18, r12
    85ae:	2e 2f       	mov	r18, r30
    85b0:	30 31       	cpi	r19, 0x10	; 16
    85b2:	32 33       	cpi	r19, 0x32	; 50
    85b4:	34 35       	cpi	r19, 0x54	; 84
    85b6:	36 37       	cpi	r19, 0x76	; 118
    85b8:	38 39       	cpi	r19, 0x98	; 152
    85ba:	3a 3b       	cpi	r19, 0xBA	; 186
    85bc:	3c 3d       	cpi	r19, 0xDC	; 220
    85be:	3e 3f       	cpi	r19, 0xFE	; 254
    85c0:	40 41       	sbci	r20, 0x10	; 16
    85c2:	42 43       	sbci	r20, 0x32	; 50
    85c4:	44 45       	sbci	r20, 0x54	; 84
    85c6:	46 47       	sbci	r20, 0x76	; 118
    85c8:	48 49       	sbci	r20, 0x98	; 152
    85ca:	4a 4b       	sbci	r20, 0xBA	; 186
    85cc:	4c 4d       	sbci	r20, 0xDC	; 220
    85ce:	4e 4f       	sbci	r20, 0xFE	; 254
    85d0:	50 51       	subi	r21, 0x10	; 16
    85d2:	52 53       	subi	r21, 0x32	; 50
    85d4:	54 55       	subi	r21, 0x54	; 84
    85d6:	56 57       	subi	r21, 0x76	; 118
    85d8:	58 59       	subi	r21, 0x98	; 152
    85da:	5a 5b       	subi	r21, 0xBA	; 186
    85dc:	5c 5d       	subi	r21, 0xDC	; 220
    85de:	5e 5f       	subi	r21, 0xFE	; 254
    85e0:	60 61       	ori	r22, 0x10	; 16
    85e2:	62 63       	ori	r22, 0x32	; 50
    85e4:	64 65       	ori	r22, 0x54	; 84
    85e6:	66 67       	ori	r22, 0x76	; 118
    85e8:	68 69       	ori	r22, 0x98	; 152
    85ea:	6a 6b       	ori	r22, 0xBA	; 186
    85ec:	6c 6d       	ori	r22, 0xDC	; 220
    85ee:	6e 6f       	ori	r22, 0xFE	; 254
    85f0:	70 71       	andi	r23, 0x10	; 16
    85f2:	72 73       	andi	r23, 0x32	; 50
    85f4:	74 75       	andi	r23, 0x54	; 84
    85f6:	76 77       	andi	r23, 0x76	; 118
    85f8:	78 79       	andi	r23, 0x98	; 152
    85fa:	7a 7b       	andi	r23, 0xBA	; 186
    85fc:	7c 7d       	andi	r23, 0xDC	; 220
    85fe:	7e 7f       	andi	r23, 0xFE	; 254
    8600:	00 02       	muls	r16, r16
    8602:	04 06       	cpc	r0, r20
    8604:	08 0a       	sbc	r0, r24
    8606:	0c 0e       	add	r0, r28
    8608:	10 12       	cpse	r1, r16
    860a:	14 16       	cp	r1, r20
    860c:	18 1a       	sub	r1, r24
    860e:	1c 1e       	adc	r1, r28
    8610:	20 22       	and	r2, r16
    8612:	24 26       	eor	r2, r20
    8614:	28 2a       	or	r2, r24
    8616:	2c 2e       	mov	r2, r28
    8618:	30 32       	cpi	r19, 0x20	; 32
    861a:	34 36       	cpi	r19, 0x64	; 100
    861c:	38 3a       	cpi	r19, 0xA8	; 168
    861e:	3c 3e       	cpi	r19, 0xEC	; 236
    8620:	40 42       	sbci	r20, 0x20	; 32
    8622:	44 46       	sbci	r20, 0x64	; 100
    8624:	48 4a       	sbci	r20, 0xA8	; 168
    8626:	4c 4e       	sbci	r20, 0xEC	; 236
    8628:	50 52       	subi	r21, 0x20	; 32
    862a:	54 56       	subi	r21, 0x64	; 100
    862c:	58 5a       	subi	r21, 0xA8	; 168
    862e:	5c 5e       	subi	r21, 0xEC	; 236
    8630:	60 62       	ori	r22, 0x20	; 32
    8632:	64 66       	ori	r22, 0x64	; 100
    8634:	68 6a       	ori	r22, 0xA8	; 168
    8636:	6c 6e       	ori	r22, 0xEC	; 236
    8638:	70 72       	andi	r23, 0x20	; 32
    863a:	74 76       	andi	r23, 0x64	; 100
    863c:	78 7a       	andi	r23, 0xA8	; 168
    863e:	7c 7e       	andi	r23, 0xEC	; 236
    8640:	7f 7d       	andi	r23, 0xDF	; 223
    8642:	7b 79       	andi	r23, 0x9B	; 155
    8644:	77 75       	andi	r23, 0x57	; 87
    8646:	73 71       	andi	r23, 0x13	; 19
    8648:	6f 6d       	ori	r22, 0xDF	; 223
    864a:	6b 69       	ori	r22, 0x9B	; 155
    864c:	67 65       	ori	r22, 0x57	; 87
    864e:	63 61       	ori	r22, 0x13	; 19
    8650:	5f 5d       	subi	r21, 0xDF	; 223
    8652:	5b 59       	subi	r21, 0x9B	; 155
    8654:	57 55       	subi	r21, 0x57	; 87
    8656:	53 51       	subi	r21, 0x13	; 19
    8658:	4f 4d       	sbci	r20, 0xDF	; 223
    865a:	4b 49       	sbci	r20, 0x9B	; 155
    865c:	47 45       	sbci	r20, 0x57	; 87
    865e:	43 41       	sbci	r20, 0x13	; 19
    8660:	3f 3d       	cpi	r19, 0xDF	; 223
    8662:	3b 39       	cpi	r19, 0x9B	; 155
    8664:	37 35       	cpi	r19, 0x57	; 87
    8666:	33 31       	cpi	r19, 0x13	; 19
    8668:	2f 2d       	mov	r18, r15
    866a:	2b 29       	or	r18, r11
    866c:	27 25       	eor	r18, r7
    866e:	23 21       	and	r18, r3
    8670:	1f 1d       	adc	r17, r15
    8672:	1b 19       	sub	r17, r11
    8674:	17 15       	cp	r17, r7
    8676:	13 11       	cpse	r17, r3
    8678:	0f 0d       	add	r16, r15
    867a:	0b 09       	sbc	r16, r11
    867c:	07 05       	cpc	r16, r7
    867e:	03 01       	movw	r0, r6
    8680:	ff fd       	.word	0xfdff	; ????
    8682:	fb f9       	.word	0xf9fb	; ????
    8684:	f7 f5       	brid	.+124    	; 0x8702 <waves+0x302>
    8686:	f3 f1       	brvs	.+124    	; 0x8704 <waves+0x304>
    8688:	ef ed       	ldi	r30, 0xDF	; 223
    868a:	eb e9       	ldi	r30, 0x9B	; 155
    868c:	e7 e5       	ldi	r30, 0x57	; 87
    868e:	e3 e1       	ldi	r30, 0x13	; 19
    8690:	df dd       	rcall	.-1090   	; 0x8250 <steptable+0x48>
    8692:	db d9       	rcall	.-3146   	; 0x7a4a <PatchCommand08+0x1a>
    8694:	d7 d5       	rcall	.+2990   	; 0x9244 <PrintChar+0x2>
    8696:	d3 d1       	rcall	.+934    	; 0x8a3e <waves+0x63e>
    8698:	cf cd       	rjmp	.-1122   	; 0x8238 <steptable+0x30>
    869a:	cb c9       	rjmp	.-3178   	; 0x7a32 <PatchCommand08+0x2>
    869c:	c7 c5       	rjmp	.+2958   	; 0x922c <Print+0x20>
    869e:	c3 c1       	rjmp	.+902    	; 0x8a26 <waves+0x626>
    86a0:	bf bd       	out	0x2f, r27	; 47
    86a2:	bb b9       	out	0x0b, r27	; 11
    86a4:	b7 b5       	in	r27, 0x27	; 39
    86a6:	b3 b1       	in	r27, 0x03	; 3
    86a8:	af ad       	ldd	r26, Y+63	; 0x3f
    86aa:	ab a9       	ldd	r26, Y+51	; 0x33
    86ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    86ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    86b0:	9f 9d       	mul	r25, r15
    86b2:	9b 99       	sbic	0x13, 3	; 19
    86b4:	97 95       	ror	r25
    86b6:	93 91       	.word	0x9193	; ????
    86b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    86ba:	8b 89       	ldd	r24, Y+19	; 0x13
    86bc:	87 85       	ldd	r24, Z+15	; 0x0f
    86be:	83 81       	ldd	r24, Z+3	; 0x03
    86c0:	80 82       	st	Z, r8
    86c2:	84 86       	std	Z+12, r8	; 0x0c
    86c4:	88 8a       	std	Y+16, r8	; 0x10
    86c6:	8c 8e       	std	Y+28, r8	; 0x1c
    86c8:	90 92 94 96 	sts	0x9694, r9
    86cc:	98 9a       	sbi	0x13, 0	; 19
    86ce:	9c 9e       	mul	r9, r28
    86d0:	a0 a2       	std	Z+32, r10	; 0x20
    86d2:	a4 a6       	std	Z+44, r10	; 0x2c
    86d4:	a8 aa       	std	Y+48, r10	; 0x30
    86d6:	ac ae       	std	Y+60, r10	; 0x3c
    86d8:	b0 b2       	in	r11, 0x10	; 16
    86da:	b4 b6       	in	r11, 0x34	; 52
    86dc:	b8 ba       	out	0x18, r11	; 24
    86de:	bc be       	out	0x3c, r11	; 60
    86e0:	c0 c2       	rjmp	.+1408   	; 0x8c62 <waves+0x862>
    86e2:	c4 c6       	rjmp	.+3464   	; 0x946c <wifiGetPB+0x36>
    86e4:	c8 ca       	rjmp	.-2672   	; 0x7c76 <TriggerFx+0x84>
    86e6:	cc ce       	rjmp	.-616    	; 0x8480 <waves+0x80>
    86e8:	d0 d2       	rcall	.+1440   	; 0x8c8a <waves+0x88a>
    86ea:	d4 d6       	rcall	.+3496   	; 0x9494 <wifiGetPB+0x5e>
    86ec:	d8 da       	rcall	.-2640   	; 0x7c9e <TriggerNote+0x1c>
    86ee:	dc de       	rcall	.-584    	; 0x84a8 <waves+0xa8>
    86f0:	e0 e2       	ldi	r30, 0x20	; 32
    86f2:	e4 e6       	ldi	r30, 0x64	; 100
    86f4:	e8 ea       	ldi	r30, 0xA8	; 168
    86f6:	ec ee       	ldi	r30, 0xEC	; 236
    86f8:	f0 f2       	brcs	.-68     	; 0x86b6 <waves+0x2b6>
    86fa:	f4 f6       	brge	.-68     	; 0x86b8 <waves+0x2b8>
    86fc:	f8 fa       	.word	0xfaf8	; ????
    86fe:	fc fe       	.word	0xfefc	; ????
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	80 80       	ld	r8, Z
    8742:	80 80       	ld	r8, Z
    8744:	80 80       	ld	r8, Z
    8746:	80 80       	ld	r8, Z
    8748:	80 80       	ld	r8, Z
    874a:	80 80       	ld	r8, Z
    874c:	80 80       	ld	r8, Z
    874e:	80 80       	ld	r8, Z
    8750:	80 80       	ld	r8, Z
    8752:	80 80       	ld	r8, Z
    8754:	80 80       	ld	r8, Z
    8756:	80 80       	ld	r8, Z
    8758:	80 80       	ld	r8, Z
    875a:	80 80       	ld	r8, Z
    875c:	80 80       	ld	r8, Z
    875e:	80 80       	ld	r8, Z
    8760:	80 80       	ld	r8, Z
    8762:	80 80       	ld	r8, Z
    8764:	80 80       	ld	r8, Z
    8766:	80 80       	ld	r8, Z
    8768:	80 80       	ld	r8, Z
    876a:	80 80       	ld	r8, Z
    876c:	80 80       	ld	r8, Z
    876e:	80 80       	ld	r8, Z
    8770:	80 80       	ld	r8, Z
    8772:	80 80       	ld	r8, Z
    8774:	80 80       	ld	r8, Z
    8776:	80 80       	ld	r8, Z
    8778:	80 80       	ld	r8, Z
    877a:	80 80       	ld	r8, Z
    877c:	80 80       	ld	r8, Z
    877e:	80 80       	ld	r8, Z
    8780:	80 80       	ld	r8, Z
    8782:	80 80       	ld	r8, Z
    8784:	80 80       	ld	r8, Z
    8786:	80 80       	ld	r8, Z
    8788:	80 80       	ld	r8, Z
    878a:	80 80       	ld	r8, Z
    878c:	80 80       	ld	r8, Z
    878e:	80 80       	ld	r8, Z
    8790:	80 80       	ld	r8, Z
    8792:	80 80       	ld	r8, Z
    8794:	80 80       	ld	r8, Z
    8796:	80 80       	ld	r8, Z
    8798:	80 80       	ld	r8, Z
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7f 7f       	andi	r23, 0xFF	; 255
    8848:	7f 7f       	andi	r23, 0xFF	; 255
    884a:	7f 7f       	andi	r23, 0xFF	; 255
    884c:	7f 7f       	andi	r23, 0xFF	; 255
    884e:	7f 7f       	andi	r23, 0xFF	; 255
    8850:	7f 7f       	andi	r23, 0xFF	; 255
    8852:	7f 7f       	andi	r23, 0xFF	; 255
    8854:	7f 7f       	andi	r23, 0xFF	; 255
    8856:	7f 7f       	andi	r23, 0xFF	; 255
    8858:	7f 7f       	andi	r23, 0xFF	; 255
    885a:	7f 7f       	andi	r23, 0xFF	; 255
    885c:	7f 7f       	andi	r23, 0xFF	; 255
    885e:	7f 7f       	andi	r23, 0xFF	; 255
    8860:	7f 7f       	andi	r23, 0xFF	; 255
    8862:	7f 7f       	andi	r23, 0xFF	; 255
    8864:	7f 7f       	andi	r23, 0xFF	; 255
    8866:	7f 7f       	andi	r23, 0xFF	; 255
    8868:	7f 7f       	andi	r23, 0xFF	; 255
    886a:	7f 7f       	andi	r23, 0xFF	; 255
    886c:	7f 7f       	andi	r23, 0xFF	; 255
    886e:	7f 7f       	andi	r23, 0xFF	; 255
    8870:	7f 7f       	andi	r23, 0xFF	; 255
    8872:	7f 7f       	andi	r23, 0xFF	; 255
    8874:	7f 7f       	andi	r23, 0xFF	; 255
    8876:	7f 7f       	andi	r23, 0xFF	; 255
    8878:	7f 7f       	andi	r23, 0xFF	; 255
    887a:	7f 7f       	andi	r23, 0xFF	; 255
    887c:	7f 7f       	andi	r23, 0xFF	; 255
    887e:	7f 7f       	andi	r23, 0xFF	; 255
    8880:	80 80       	ld	r8, Z
    8882:	80 80       	ld	r8, Z
    8884:	80 80       	ld	r8, Z
    8886:	80 80       	ld	r8, Z
    8888:	80 80       	ld	r8, Z
    888a:	80 80       	ld	r8, Z
    888c:	80 80       	ld	r8, Z
    888e:	80 80       	ld	r8, Z
    8890:	80 80       	ld	r8, Z
    8892:	80 80       	ld	r8, Z
    8894:	80 80       	ld	r8, Z
    8896:	80 80       	ld	r8, Z
    8898:	80 80       	ld	r8, Z
    889a:	80 80       	ld	r8, Z
    889c:	80 80       	ld	r8, Z
    889e:	80 80       	ld	r8, Z
    88a0:	80 80       	ld	r8, Z
    88a2:	80 80       	ld	r8, Z
    88a4:	80 80       	ld	r8, Z
    88a6:	80 80       	ld	r8, Z
    88a8:	80 80       	ld	r8, Z
    88aa:	80 80       	ld	r8, Z
    88ac:	80 80       	ld	r8, Z
    88ae:	80 80       	ld	r8, Z
    88b0:	80 80       	ld	r8, Z
    88b2:	80 80       	ld	r8, Z
    88b4:	80 80       	ld	r8, Z
    88b6:	80 80       	ld	r8, Z
    88b8:	80 80       	ld	r8, Z
    88ba:	80 80       	ld	r8, Z
    88bc:	80 80       	ld	r8, Z
    88be:	80 80       	ld	r8, Z
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z
    8900:	7f 7f       	andi	r23, 0xFF	; 255
    8902:	7f 7f       	andi	r23, 0xFF	; 255
    8904:	7f 7f       	andi	r23, 0xFF	; 255
    8906:	7f 7f       	andi	r23, 0xFF	; 255
    8908:	7f 7f       	andi	r23, 0xFF	; 255
    890a:	7f 7f       	andi	r23, 0xFF	; 255
    890c:	7f 7f       	andi	r23, 0xFF	; 255
    890e:	7f 7f       	andi	r23, 0xFF	; 255
    8910:	7f 7f       	andi	r23, 0xFF	; 255
    8912:	7f 7f       	andi	r23, 0xFF	; 255
    8914:	7f 7f       	andi	r23, 0xFF	; 255
    8916:	7f 7f       	andi	r23, 0xFF	; 255
    8918:	7f 7f       	andi	r23, 0xFF	; 255
    891a:	7f 7f       	andi	r23, 0xFF	; 255
    891c:	7f 7f       	andi	r23, 0xFF	; 255
    891e:	7f 7f       	andi	r23, 0xFF	; 255
    8920:	7f 7f       	andi	r23, 0xFF	; 255
    8922:	7f 7f       	andi	r23, 0xFF	; 255
    8924:	7f 7f       	andi	r23, 0xFF	; 255
    8926:	7f 7f       	andi	r23, 0xFF	; 255
    8928:	7f 7f       	andi	r23, 0xFF	; 255
    892a:	7f 7f       	andi	r23, 0xFF	; 255
    892c:	7f 7f       	andi	r23, 0xFF	; 255
    892e:	7f 7f       	andi	r23, 0xFF	; 255
    8930:	7f 7f       	andi	r23, 0xFF	; 255
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7f       	andi	r23, 0xFF	; 255
    894e:	7f 7f       	andi	r23, 0xFF	; 255
    8950:	7f 7f       	andi	r23, 0xFF	; 255
    8952:	7f 7f       	andi	r23, 0xFF	; 255
    8954:	7f 7f       	andi	r23, 0xFF	; 255
    8956:	7f 7f       	andi	r23, 0xFF	; 255
    8958:	7f 7f       	andi	r23, 0xFF	; 255
    895a:	7f 7f       	andi	r23, 0xFF	; 255
    895c:	7f 7f       	andi	r23, 0xFF	; 255
    895e:	7f 7f       	andi	r23, 0xFF	; 255
    8960:	7f 7f       	andi	r23, 0xFF	; 255
    8962:	7f 7f       	andi	r23, 0xFF	; 255
    8964:	7f 7f       	andi	r23, 0xFF	; 255
    8966:	7f 7f       	andi	r23, 0xFF	; 255
    8968:	7f 7f       	andi	r23, 0xFF	; 255
    896a:	7f 7f       	andi	r23, 0xFF	; 255
    896c:	7f 7f       	andi	r23, 0xFF	; 255
    896e:	7f 7f       	andi	r23, 0xFF	; 255
    8970:	7f 7f       	andi	r23, 0xFF	; 255
    8972:	7f 7f       	andi	r23, 0xFF	; 255
    8974:	7f 7f       	andi	r23, 0xFF	; 255
    8976:	7f 7f       	andi	r23, 0xFF	; 255
    8978:	7f 7f       	andi	r23, 0xFF	; 255
    897a:	7f 7f       	andi	r23, 0xFF	; 255
    897c:	7f 7f       	andi	r23, 0xFF	; 255
    897e:	7f 7f       	andi	r23, 0xFF	; 255
    8980:	7f 7f       	andi	r23, 0xFF	; 255
    8982:	7f 7f       	andi	r23, 0xFF	; 255
    8984:	7f 7f       	andi	r23, 0xFF	; 255
    8986:	7f 7f       	andi	r23, 0xFF	; 255
    8988:	7f 7f       	andi	r23, 0xFF	; 255
    898a:	7f 7f       	andi	r23, 0xFF	; 255
    898c:	7f 7f       	andi	r23, 0xFF	; 255
    898e:	7f 7f       	andi	r23, 0xFF	; 255
    8990:	7f 7f       	andi	r23, 0xFF	; 255
    8992:	7f 7f       	andi	r23, 0xFF	; 255
    8994:	7f 7f       	andi	r23, 0xFF	; 255
    8996:	7f 7f       	andi	r23, 0xFF	; 255
    8998:	7f 7f       	andi	r23, 0xFF	; 255
    899a:	7f 7f       	andi	r23, 0xFF	; 255
    899c:	7f 7f       	andi	r23, 0xFF	; 255
    899e:	7f 7f       	andi	r23, 0xFF	; 255
    89a0:	7f 7f       	andi	r23, 0xFF	; 255
    89a2:	7f 7f       	andi	r23, 0xFF	; 255
    89a4:	7f 7f       	andi	r23, 0xFF	; 255
    89a6:	7f 7f       	andi	r23, 0xFF	; 255
    89a8:	7f 7f       	andi	r23, 0xFF	; 255
    89aa:	7f 7f       	andi	r23, 0xFF	; 255
    89ac:	7f 7f       	andi	r23, 0xFF	; 255
    89ae:	7f 7f       	andi	r23, 0xFF	; 255
    89b0:	7f 7f       	andi	r23, 0xFF	; 255
    89b2:	7f 7f       	andi	r23, 0xFF	; 255
    89b4:	7f 7f       	andi	r23, 0xFF	; 255
    89b6:	7f 7f       	andi	r23, 0xFF	; 255
    89b8:	7f 7f       	andi	r23, 0xFF	; 255
    89ba:	7f 7f       	andi	r23, 0xFF	; 255
    89bc:	7f 7f       	andi	r23, 0xFF	; 255
    89be:	7f 7f       	andi	r23, 0xFF	; 255
    89c0:	80 80       	ld	r8, Z
    89c2:	80 80       	ld	r8, Z
    89c4:	80 80       	ld	r8, Z
    89c6:	80 80       	ld	r8, Z
    89c8:	80 80       	ld	r8, Z
    89ca:	80 80       	ld	r8, Z
    89cc:	80 80       	ld	r8, Z
    89ce:	80 80       	ld	r8, Z
    89d0:	80 80       	ld	r8, Z
    89d2:	80 80       	ld	r8, Z
    89d4:	80 80       	ld	r8, Z
    89d6:	80 80       	ld	r8, Z
    89d8:	80 80       	ld	r8, Z
    89da:	80 80       	ld	r8, Z
    89dc:	80 80       	ld	r8, Z
    89de:	80 80       	ld	r8, Z
    89e0:	80 80       	ld	r8, Z
    89e2:	80 80       	ld	r8, Z
    89e4:	80 80       	ld	r8, Z
    89e6:	80 80       	ld	r8, Z
    89e8:	80 80       	ld	r8, Z
    89ea:	80 80       	ld	r8, Z
    89ec:	80 80       	ld	r8, Z
    89ee:	80 80       	ld	r8, Z
    89f0:	80 80       	ld	r8, Z
    89f2:	80 80       	ld	r8, Z
    89f4:	80 80       	ld	r8, Z
    89f6:	80 80       	ld	r8, Z
    89f8:	80 80       	ld	r8, Z
    89fa:	80 80       	ld	r8, Z
    89fc:	80 80       	ld	r8, Z
    89fe:	80 80       	ld	r8, Z
    8a00:	03 09       	sbc	r16, r3
    8a02:	13 1e       	adc	r1, r19
    8a04:	28 31       	cpi	r18, 0x18	; 24
    8a06:	3a 40       	sbci	r19, 0x0A	; 10
    8a08:	46 4c       	sbci	r20, 0xC6	; 198
    8a0a:	50 54       	subi	r21, 0x40	; 64
    8a0c:	58 5b       	subi	r21, 0xB8	; 184
    8a0e:	5e 61       	ori	r21, 0x1E	; 30
    8a10:	63 65       	ori	r22, 0x53	; 83
    8a12:	67 69       	ori	r22, 0x97	; 151
    8a14:	6b 6c       	ori	r22, 0xCB	; 203
    8a16:	6e 6f       	ori	r22, 0xFE	; 254
    8a18:	70 71       	andi	r23, 0x10	; 16
    8a1a:	72 73       	andi	r23, 0x32	; 50
    8a1c:	74 75       	andi	r23, 0x54	; 84
    8a1e:	76 77       	andi	r23, 0x76	; 118
    8a20:	77 78       	andi	r23, 0x87	; 135
    8a22:	79 79       	andi	r23, 0x99	; 153
    8a24:	7a 7a       	andi	r23, 0xAA	; 170
    8a26:	7b 7b       	andi	r23, 0xBB	; 187
    8a28:	7c 7c       	andi	r23, 0xCC	; 204
    8a2a:	7c 7d       	andi	r23, 0xDC	; 220
    8a2c:	7d 7d       	andi	r23, 0xDD	; 221
    8a2e:	7e 7e       	andi	r23, 0xEE	; 238
    8a30:	7e 7e       	andi	r23, 0xEE	; 238
    8a32:	7f 7f       	andi	r23, 0xFF	; 255
    8a34:	7f 7f       	andi	r23, 0xFF	; 255
    8a36:	7f 7f       	andi	r23, 0xFF	; 255
    8a38:	7f 7f       	andi	r23, 0xFF	; 255
    8a3a:	7f 7f       	andi	r23, 0xFF	; 255
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7f 7f       	andi	r23, 0xFF	; 255
    8a48:	7f 7f       	andi	r23, 0xFF	; 255
    8a4a:	7f 7f       	andi	r23, 0xFF	; 255
    8a4c:	7f 7e       	andi	r23, 0xEF	; 239
    8a4e:	7e 7e       	andi	r23, 0xEE	; 238
    8a50:	7e 7d       	andi	r23, 0xDE	; 222
    8a52:	7d 7d       	andi	r23, 0xDD	; 221
    8a54:	7c 7c       	andi	r23, 0xCC	; 204
    8a56:	7c 7b       	andi	r23, 0xBC	; 188
    8a58:	7b 7a       	andi	r23, 0xAB	; 171
    8a5a:	7a 79       	andi	r23, 0x9A	; 154
    8a5c:	79 78       	andi	r23, 0x89	; 137
    8a5e:	77 77       	andi	r23, 0x77	; 119
    8a60:	76 75       	andi	r23, 0x56	; 86
    8a62:	74 73       	andi	r23, 0x34	; 52
    8a64:	72 71       	andi	r23, 0x12	; 18
    8a66:	70 6f       	ori	r23, 0xF0	; 240
    8a68:	6e 6c       	ori	r22, 0xCE	; 206
    8a6a:	6b 69       	ori	r22, 0x9B	; 155
    8a6c:	67 65       	ori	r22, 0x57	; 87
    8a6e:	63 61       	ori	r22, 0x13	; 19
    8a70:	5e 5b       	subi	r21, 0xBE	; 190
    8a72:	58 54       	subi	r21, 0x48	; 72
    8a74:	50 4c       	sbci	r21, 0xC0	; 192
    8a76:	46 40       	sbci	r20, 0x06	; 6
    8a78:	3a 31       	cpi	r19, 0x1A	; 26
    8a7a:	28 1e       	adc	r2, r24
    8a7c:	13 09       	sbc	r17, r3
    8a7e:	03 00       	.word	0x0003	; ????
    8a80:	c6 cc       	rjmp	.-1652   	; 0x840e <waves+0xe>
    8a82:	d5 db       	rcall	.-2134   	; 0x822e <steptable+0x26>
    8a84:	df e3       	ldi	r29, 0x3F	; 63
    8a86:	e5 e7       	ldi	r30, 0x75	; 117
    8a88:	e9 ea       	ldi	r30, 0xA9	; 169
    8a8a:	eb ec       	ldi	r30, 0xCB	; 203
    8a8c:	ed ee       	ldi	r30, 0xED	; 237
    8a8e:	ef ef       	ldi	r30, 0xFF	; 255
    8a90:	f0 f0       	brcs	.+60     	; 0x8ace <waves+0x6ce>
    8a92:	f0 f1       	brcs	.+124    	; 0x8b10 <waves+0x710>
    8a94:	f1 f1       	breq	.+124    	; 0x8b12 <waves+0x712>
    8a96:	f1 f2       	breq	.-68     	; 0x8a54 <waves+0x654>
    8a98:	f2 f2       	brmi	.-68     	; 0x8a56 <waves+0x656>
    8a9a:	f2 f2       	brmi	.-68     	; 0x8a58 <waves+0x658>
    8a9c:	f2 f2       	brmi	.-68     	; 0x8a5a <waves+0x65a>
    8a9e:	f2 f3       	brmi	.-4      	; 0x8a9c <waves+0x69c>
    8aa0:	f3 f3       	brvs	.-4      	; 0x8a9e <waves+0x69e>
    8aa2:	f3 f3       	brvs	.-4      	; 0x8aa0 <waves+0x6a0>
    8aa4:	f3 f3       	brvs	.-4      	; 0x8aa2 <waves+0x6a2>
    8aa6:	f3 f3       	brvs	.-4      	; 0x8aa4 <waves+0x6a4>
    8aa8:	f3 f3       	brvs	.-4      	; 0x8aa6 <waves+0x6a6>
    8aaa:	f3 f3       	brvs	.-4      	; 0x8aa8 <waves+0x6a8>
    8aac:	f3 f3       	brvs	.-4      	; 0x8aaa <waves+0x6aa>
    8aae:	f3 f3       	brvs	.-4      	; 0x8aac <waves+0x6ac>
    8ab0:	f3 f3       	brvs	.-4      	; 0x8aae <waves+0x6ae>
    8ab2:	f3 f3       	brvs	.-4      	; 0x8ab0 <waves+0x6b0>
    8ab4:	f3 f3       	brvs	.-4      	; 0x8ab2 <waves+0x6b2>
    8ab6:	f3 f3       	brvs	.-4      	; 0x8ab4 <waves+0x6b4>
    8ab8:	f3 f3       	brvs	.-4      	; 0x8ab6 <waves+0x6b6>
    8aba:	f3 f3       	brvs	.-4      	; 0x8ab8 <waves+0x6b8>
    8abc:	f3 f3       	brvs	.-4      	; 0x8aba <waves+0x6ba>
    8abe:	f3 f3       	brvs	.-4      	; 0x8abc <waves+0x6bc>
    8ac0:	f3 f3       	brvs	.-4      	; 0x8abe <waves+0x6be>
    8ac2:	f3 f3       	brvs	.-4      	; 0x8ac0 <waves+0x6c0>
    8ac4:	f3 f3       	brvs	.-4      	; 0x8ac2 <waves+0x6c2>
    8ac6:	f3 f3       	brvs	.-4      	; 0x8ac4 <waves+0x6c4>
    8ac8:	f3 f3       	brvs	.-4      	; 0x8ac6 <waves+0x6c6>
    8aca:	f3 f3       	brvs	.-4      	; 0x8ac8 <waves+0x6c8>
    8acc:	f3 f3       	brvs	.-4      	; 0x8aca <waves+0x6ca>
    8ace:	f3 f3       	brvs	.-4      	; 0x8acc <waves+0x6cc>
    8ad0:	f3 f3       	brvs	.-4      	; 0x8ace <waves+0x6ce>
    8ad2:	f3 f3       	brvs	.-4      	; 0x8ad0 <waves+0x6d0>
    8ad4:	f3 f3       	brvs	.-4      	; 0x8ad2 <waves+0x6d2>
    8ad6:	f3 f3       	brvs	.-4      	; 0x8ad4 <waves+0x6d4>
    8ad8:	f3 f3       	brvs	.-4      	; 0x8ad6 <waves+0x6d6>
    8ada:	f3 f3       	brvs	.-4      	; 0x8ad8 <waves+0x6d8>
    8adc:	f3 f3       	brvs	.-4      	; 0x8ada <waves+0x6da>
    8ade:	f3 f3       	brvs	.-4      	; 0x8adc <waves+0x6dc>
    8ae0:	f2 f2       	brmi	.-68     	; 0x8a9e <waves+0x69e>
    8ae2:	f2 f2       	brmi	.-68     	; 0x8aa0 <waves+0x6a0>
    8ae4:	f2 f2       	brmi	.-68     	; 0x8aa2 <waves+0x6a2>
    8ae6:	f2 f2       	brmi	.-68     	; 0x8aa4 <waves+0x6a4>
    8ae8:	f1 f1       	breq	.+124    	; 0x8b66 <waves+0x766>
    8aea:	f1 f1       	breq	.+124    	; 0x8b68 <waves+0x768>
    8aec:	f0 f0       	brcs	.+60     	; 0x8b2a <waves+0x72a>
    8aee:	f0 ef       	ldi	r31, 0xF0	; 240
    8af0:	ef ee       	ldi	r30, 0xEF	; 239
    8af2:	ed ec       	ldi	r30, 0xCD	; 205
    8af4:	eb ea       	ldi	r30, 0xAB	; 171
    8af6:	e9 e7       	ldi	r30, 0x79	; 121
    8af8:	e5 e3       	ldi	r30, 0x35	; 53
    8afa:	df db       	rcall	.-2114   	; 0x82ba <steptable+0xb2>
    8afc:	d5 cc       	rjmp	.-1622   	; 0x84a8 <waves+0xa8>
    8afe:	c6 00       	.word	0x00c6	; ????
    8b00:	00 28       	or	r0, r0
    8b02:	3d 42       	sbci	r19, 0x2D	; 45
    8b04:	30 2d       	mov	r19, r0
    8b06:	2c 2b       	or	r18, r28
    8b08:	2c 2d       	mov	r18, r12
    8b0a:	2e 2f       	mov	r18, r30
    8b0c:	30 32       	cpi	r19, 0x20	; 32
    8b0e:	33 35       	cpi	r19, 0x53	; 83
    8b10:	37 39       	cpi	r19, 0x97	; 151
    8b12:	3b 3d       	cpi	r19, 0xDB	; 219
    8b14:	3f 41       	sbci	r19, 0x1F	; 31
    8b16:	43 45       	sbci	r20, 0x53	; 83
    8b18:	48 4a       	sbci	r20, 0xA8	; 168
    8b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8b1c:	50 53       	subi	r21, 0x30	; 48
    8b1e:	55 57       	subi	r21, 0x75	; 117
    8b20:	59 5b       	subi	r21, 0xB9	; 185
    8b22:	5d 5f       	subi	r21, 0xFD	; 253
    8b24:	61 63       	ori	r22, 0x31	; 49
    8b26:	65 67       	ori	r22, 0x75	; 117
    8b28:	69 6b       	ori	r22, 0xB9	; 185
    8b2a:	6c 6e       	ori	r22, 0xEC	; 236
    8b2c:	70 71       	andi	r23, 0x10	; 16
    8b2e:	73 74       	andi	r23, 0x43	; 67
    8b30:	75 77       	andi	r23, 0x75	; 117
    8b32:	78 79       	andi	r23, 0x98	; 152
    8b34:	7a 7b       	andi	r23, 0xBA	; 186
    8b36:	7c 7d       	andi	r23, 0xDC	; 220
    8b38:	7d 7e       	andi	r23, 0xED	; 237
    8b3a:	7e 7f       	andi	r23, 0xFE	; 254
    8b3c:	7f 7f       	andi	r23, 0xFF	; 255
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7f 7f       	andi	r23, 0xFF	; 255
    8b46:	7e 7e       	andi	r23, 0xEE	; 238
    8b48:	7d 7d       	andi	r23, 0xDD	; 221
    8b4a:	7c 7b       	andi	r23, 0xBC	; 188
    8b4c:	7a 79       	andi	r23, 0x9A	; 154
    8b4e:	78 77       	andi	r23, 0x78	; 120
    8b50:	75 74       	andi	r23, 0x45	; 69
    8b52:	73 71       	andi	r23, 0x13	; 19
    8b54:	70 6e       	ori	r23, 0xE0	; 224
    8b56:	6c 6b       	ori	r22, 0xBC	; 188
    8b58:	69 67       	ori	r22, 0x79	; 121
    8b5a:	65 63       	ori	r22, 0x35	; 53
    8b5c:	61 5f       	subi	r22, 0xF1	; 241
    8b5e:	5d 5b       	subi	r21, 0xBD	; 189
    8b60:	59 57       	subi	r21, 0x79	; 121
    8b62:	55 53       	subi	r21, 0x35	; 53
    8b64:	50 4e       	sbci	r21, 0xE0	; 224
    8b66:	4c 4a       	sbci	r20, 0xAC	; 172
    8b68:	48 45       	sbci	r20, 0x58	; 88
    8b6a:	43 41       	sbci	r20, 0x13	; 19
    8b6c:	3f 3d       	cpi	r19, 0xDF	; 223
    8b6e:	3b 39       	cpi	r19, 0x9B	; 155
    8b70:	37 35       	cpi	r19, 0x57	; 87
    8b72:	33 32       	cpi	r19, 0x23	; 35
    8b74:	30 2f       	mov	r19, r16
    8b76:	2e 2d       	mov	r18, r14
    8b78:	2c 2b       	or	r18, r28
    8b7a:	2c 2d       	mov	r18, r12
    8b7c:	30 42       	sbci	r19, 0x20	; 32
    8b7e:	3d 28       	or	r3, r13
    8b80:	00 e9       	ldi	r16, 0x90	; 144
    8b82:	e5 fe       	sbrs	r14, 5
    8b84:	d4 d7       	rcall	.+4008   	; 0x9b2e <init_scope_animation+0x10>
    8b86:	d7 d7       	rcall	.+4014   	; 0x9b36 <init_scope_animation+0x18>
    8b88:	d6 d4       	rcall	.+2476   	; 0x9536 <wifiRequestP+0x22>
    8b8a:	d2 d0       	rcall	.+420    	; 0x8d30 <waves+0x930>
    8b8c:	ce cc       	rjmp	.-1636   	; 0x852a <waves+0x12a>
    8b8e:	ca c8       	rjmp	.-3692   	; 0x7d24 <ProcessMusic+0x22>
    8b90:	c6 c3       	rjmp	.+1932   	; 0x931e <wifiSendP+0x1a>
    8b92:	c1 bf       	out	0x31, r28	; 49
    8b94:	bd ba       	out	0x1d, r11	; 29
    8b96:	b8 b6       	in	r11, 0x38	; 56
    8b98:	b4 b1       	in	r27, 0x04	; 4
    8b9a:	af ad       	ldd	r26, Y+63	; 0x3f
    8b9c:	ab a9       	ldd	r26, Y+51	; 0x33
    8b9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8ba0:	a3 a1       	ldd	r26, Z+35	; 0x23
    8ba2:	9f 9e       	mul	r9, r31
    8ba4:	9c 9a       	sbi	0x13, 4	; 19
    8ba6:	99 97       	sbiw	r26, 0x29	; 41
    8ba8:	95 94       	asr	r9
    8baa:	93 91       	.word	0x9193	; ????
    8bac:	90 8f       	std	Z+24, r25	; 0x18
    8bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8bb0:	8b 8a       	std	Y+19, r8	; 0x13
    8bb2:	89 88       	ldd	r8, Y+17	; 0x11
    8bb4:	88 87       	std	Y+8, r24	; 0x08
    8bb6:	86 85       	ldd	r24, Z+14	; 0x0e
    8bb8:	85 84       	ldd	r8, Z+13	; 0x0d
    8bba:	84 84       	ldd	r8, Z+12	; 0x0c
    8bbc:	83 83       	std	Z+3, r24	; 0x03
    8bbe:	83 83       	std	Z+3, r24	; 0x03
    8bc0:	83 83       	std	Z+3, r24	; 0x03
    8bc2:	83 83       	std	Z+3, r24	; 0x03
    8bc4:	83 84       	ldd	r8, Z+11	; 0x0b
    8bc6:	84 84       	ldd	r8, Z+12	; 0x0c
    8bc8:	85 85       	ldd	r24, Z+13	; 0x0d
    8bca:	86 87       	std	Z+14, r24	; 0x0e
    8bcc:	88 88       	ldd	r8, Y+16	; 0x10
    8bce:	89 8a       	std	Y+17, r8	; 0x11
    8bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8bd4:	90 91 93 94 	lds	r25, 0x9493
    8bd8:	95 97       	sbiw	r26, 0x25	; 37
    8bda:	99 9a       	sbi	0x13, 1	; 19
    8bdc:	9c 9e       	mul	r9, r28
    8bde:	9f a1       	ldd	r25, Y+39	; 0x27
    8be0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8be2:	a7 a9       	ldd	r26, Z+55	; 0x37
    8be4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8be6:	af b1       	in	r26, 0x0f	; 15
    8be8:	b4 b6       	in	r11, 0x34	; 52
    8bea:	b8 ba       	out	0x18, r11	; 24
    8bec:	bd bf       	out	0x3d, r27	; 61
    8bee:	c1 c3       	rjmp	.+1922   	; 0x9372 <wifiSend+0x2e>
    8bf0:	c6 c8       	rjmp	.-3700   	; 0x7d7e <ProcessMusic+0x7c>
    8bf2:	ca cc       	rjmp	.-1644   	; 0x8588 <waves+0x188>
    8bf4:	ce d0       	rcall	.+412    	; 0x8d92 <waves+0x992>
    8bf6:	d2 d4       	rcall	.+2468   	; 0x959c <wifiHWResetLow+0x2>
    8bf8:	d6 d7       	rcall	.+4012   	; 0x9ba6 <init_shot_state+0x30>
    8bfa:	d7 d7       	rcall	.+4014   	; 0x9baa <set_shot_animations>
    8bfc:	d4 fe       	sbrs	r13, 4
    8bfe:	e5 e9       	ldi	r30, 0x95	; 149
    8c00:	f9 f8       	.word	0xf8f9	; ????
    8c02:	f9 f5       	brne	.+126    	; 0x8c82 <waves+0x882>
    8c04:	eb e1       	ldi	r30, 0x1B	; 27
    8c06:	dd de       	rcall	.-582    	; 0x89c2 <waves+0x5c2>
    8c08:	e0 e2       	ldi	r30, 0x20	; 32
    8c0a:	e4 e5       	ldi	r30, 0x54	; 84
    8c0c:	e6 e5       	ldi	r30, 0x56	; 86
    8c0e:	e4 e2       	ldi	r30, 0x24	; 36
    8c10:	de d9       	rcall	.-3140   	; 0x7fce <ProcessMusic+0x2cc>
    8c12:	d2 ca       	rjmp	.-2652   	; 0x81b8 <esmw+0xe>
    8c14:	c1 b7       	in	r28, 0x31	; 49
    8c16:	ac a2       	std	Y+36, r10	; 0x24
    8c18:	99 91       	ld	r25, Y+
    8c1a:	8a 86       	std	Y+10, r8	; 0x0a
    8c1c:	83 81       	ldd	r24, Z+3	; 0x03
    8c1e:	80 80       	ld	r8, Z
    8c20:	81 82       	std	Z+1, r8	; 0x01
    8c22:	83 85       	ldd	r24, Z+11	; 0x0b
    8c24:	86 88       	ldd	r8, Z+22	; 0x16
    8c26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8c28:	8d 8f       	std	Y+29, r24	; 0x1d
    8c2a:	90 92 93 95 	sts	0x9593, r9
    8c2e:	96 97       	sbiw	r26, 0x26	; 38
    8c30:	98 99       	sbic	0x13, 0	; 19
    8c32:	9a 9b       	sbis	0x13, 2	; 19
    8c34:	9b 9c       	mul	r9, r11
    8c36:	9d 9d       	mul	r25, r13
    8c38:	9d 9e       	mul	r9, r29
    8c3a:	9e 9e       	mul	r9, r30
    8c3c:	9f 9f       	mul	r25, r31
    8c3e:	9f 9f       	mul	r25, r31
    8c40:	9f 9f       	mul	r25, r31
    8c42:	9f 9e       	mul	r9, r31
    8c44:	9e 9e       	mul	r9, r30
    8c46:	9d 9d       	mul	r25, r13
    8c48:	9d 9c       	mul	r9, r13
    8c4a:	9b 9b       	sbis	0x13, 3	; 19
    8c4c:	9a 99       	sbic	0x13, 2	; 19
    8c4e:	98 97       	sbiw	r26, 0x28	; 40
    8c50:	96 95       	lsr	r25
    8c52:	93 92       	.word	0x9293	; ????
    8c54:	90 8f       	std	Z+24, r25	; 0x18
    8c56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8c58:	8a 88       	ldd	r8, Y+18	; 0x12
    8c5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8c5c:	83 82       	std	Z+3, r8	; 0x03
    8c5e:	81 80       	ldd	r8, Z+1	; 0x01
    8c60:	80 81       	ld	r24, Z
    8c62:	83 86       	std	Z+11, r8	; 0x0b
    8c64:	8a 91       	ld	r24, -Y
    8c66:	99 a2       	std	Y+33, r9	; 0x21
    8c68:	ac b7       	in	r26, 0x3c	; 60
    8c6a:	c1 ca       	rjmp	.-2686   	; 0x81ee <esmw+0x44>
    8c6c:	d2 d9       	rcall	.-3164   	; 0x8012 <ProcessMusic+0x310>
    8c6e:	de e2       	ldi	r29, 0x2E	; 46
    8c70:	e4 e5       	ldi	r30, 0x54	; 84
    8c72:	e6 e5       	ldi	r30, 0x56	; 86
    8c74:	e4 e2       	ldi	r30, 0x24	; 36
    8c76:	e0 de       	rcall	.-576    	; 0x8a38 <waves+0x638>
    8c78:	dd e1       	ldi	r29, 0x1D	; 29
    8c7a:	eb f5       	brvc	.+122    	; 0x8cf6 <waves+0x8f6>
    8c7c:	f9 f8       	.word	0xf8f9	; ????
    8c7e:	f9 00       	.word	0x00f9	; ????
    8c80:	07 08       	sbc	r0, r7
    8c82:	07 0b       	sbc	r16, r23
    8c84:	15 1f       	adc	r17, r21
    8c86:	23 22       	and	r2, r19
    8c88:	20 1e       	adc	r2, r16
    8c8a:	1c 1b       	sub	r17, r28
    8c8c:	1a 1b       	sub	r17, r26
    8c8e:	1c 1e       	adc	r1, r28
    8c90:	22 27       	eor	r18, r18
    8c92:	2e 36       	cpi	r18, 0x6E	; 110
    8c94:	3f 49       	sbci	r19, 0x9F	; 159
    8c96:	54 5e       	subi	r21, 0xE4	; 228
    8c98:	67 6f       	ori	r22, 0xF7	; 247
    8c9a:	76 7a       	andi	r23, 0xA6	; 166
    8c9c:	7e 7f       	andi	r23, 0xFE	; 254
    8c9e:	7f 7f       	andi	r23, 0xFF	; 255
    8ca0:	7f 7e       	andi	r23, 0xEF	; 239
    8ca2:	7d 7b       	andi	r23, 0xBD	; 189
    8ca4:	7a 78       	andi	r23, 0x8A	; 138
    8ca6:	76 74       	andi	r23, 0x46	; 70
    8ca8:	73 71       	andi	r23, 0x13	; 19
    8caa:	70 6e       	ori	r23, 0xE0	; 224
    8cac:	6d 6b       	ori	r22, 0xBD	; 189
    8cae:	6a 69       	ori	r22, 0x9A	; 154
    8cb0:	68 67       	ori	r22, 0x78	; 120
    8cb2:	66 65       	ori	r22, 0x56	; 86
    8cb4:	65 64       	ori	r22, 0x45	; 69
    8cb6:	64 63       	ori	r22, 0x34	; 52
    8cb8:	63 62       	ori	r22, 0x23	; 35
    8cba:	62 62       	ori	r22, 0x22	; 34
    8cbc:	61 61       	ori	r22, 0x11	; 17
    8cbe:	61 61       	ori	r22, 0x11	; 17
    8cc0:	61 61       	ori	r22, 0x11	; 17
    8cc2:	61 62       	ori	r22, 0x21	; 33
    8cc4:	62 62       	ori	r22, 0x22	; 34
    8cc6:	63 63       	ori	r22, 0x33	; 51
    8cc8:	63 64       	ori	r22, 0x43	; 67
    8cca:	65 65       	ori	r22, 0x55	; 85
    8ccc:	66 67       	ori	r22, 0x76	; 118
    8cce:	68 69       	ori	r22, 0x98	; 152
    8cd0:	6a 6b       	ori	r22, 0xBA	; 186
    8cd2:	6d 6e       	ori	r22, 0xED	; 237
    8cd4:	70 71       	andi	r23, 0x10	; 16
    8cd6:	73 74       	andi	r23, 0x43	; 67
    8cd8:	76 78       	andi	r23, 0x86	; 134
    8cda:	7a 7b       	andi	r23, 0xBA	; 186
    8cdc:	7d 7e       	andi	r23, 0xED	; 237
    8cde:	7f 7f       	andi	r23, 0xFF	; 255
    8ce0:	7f 7f       	andi	r23, 0xFF	; 255
    8ce2:	7e 7a       	andi	r23, 0xAE	; 174
    8ce4:	76 6f       	ori	r23, 0xF6	; 246
    8ce6:	67 5e       	subi	r22, 0xE7	; 231
    8ce8:	54 49       	sbci	r21, 0x94	; 148
    8cea:	3f 36       	cpi	r19, 0x6F	; 111
    8cec:	2e 27       	eor	r18, r30
    8cee:	22 1e       	adc	r2, r18
    8cf0:	1c 1b       	sub	r17, r28
    8cf2:	1a 1b       	sub	r17, r26
    8cf4:	1c 1e       	adc	r1, r28
    8cf6:	20 22       	and	r2, r16
    8cf8:	23 1f       	adc	r18, r19
    8cfa:	15 0b       	sbc	r17, r21
    8cfc:	07 08       	sbc	r0, r7
    8cfe:	07 00       	.word	0x0007	; ????
    8d00:	1f 31       	cpi	r17, 0x1F	; 31
    8d02:	3d 44       	sbci	r19, 0x4D	; 77
    8d04:	4e 53       	subi	r20, 0x3E	; 62
    8d06:	54 56       	subi	r21, 0x64	; 100
    8d08:	5a 5f       	subi	r21, 0xFA	; 250
    8d0a:	64 69       	ori	r22, 0x94	; 148
    8d0c:	6e 74       	andi	r22, 0x4E	; 78
    8d0e:	76 79       	andi	r23, 0x96	; 150
    8d10:	7c 7f       	andi	r23, 0xFC	; 252
    8d12:	7f 7f       	andi	r23, 0xFF	; 255
    8d14:	7f 7f       	andi	r23, 0xFF	; 255
    8d16:	7f 7f       	andi	r23, 0xFF	; 255
    8d18:	7f 7f       	andi	r23, 0xFF	; 255
    8d1a:	7f 7f       	andi	r23, 0xFF	; 255
    8d1c:	7f 7f       	andi	r23, 0xFF	; 255
    8d1e:	7f 7f       	andi	r23, 0xFF	; 255
    8d20:	7f 7f       	andi	r23, 0xFF	; 255
    8d22:	7f 7f       	andi	r23, 0xFF	; 255
    8d24:	7f 7f       	andi	r23, 0xFF	; 255
    8d26:	7f 7f       	andi	r23, 0xFF	; 255
    8d28:	7f 7f       	andi	r23, 0xFF	; 255
    8d2a:	7f 7f       	andi	r23, 0xFF	; 255
    8d2c:	7f 7f       	andi	r23, 0xFF	; 255
    8d2e:	7f 7f       	andi	r23, 0xFF	; 255
    8d30:	7f 7f       	andi	r23, 0xFF	; 255
    8d32:	7f 7f       	andi	r23, 0xFF	; 255
    8d34:	7f 7f       	andi	r23, 0xFF	; 255
    8d36:	7f 7f       	andi	r23, 0xFF	; 255
    8d38:	7f 7f       	andi	r23, 0xFF	; 255
    8d3a:	7f 7f       	andi	r23, 0xFF	; 255
    8d3c:	7f 7f       	andi	r23, 0xFF	; 255
    8d3e:	7f 7f       	andi	r23, 0xFF	; 255
    8d40:	7f 7f       	andi	r23, 0xFF	; 255
    8d42:	7f 7f       	andi	r23, 0xFF	; 255
    8d44:	7f 7f       	andi	r23, 0xFF	; 255
    8d46:	7f 7f       	andi	r23, 0xFF	; 255
    8d48:	7f 7f       	andi	r23, 0xFF	; 255
    8d4a:	7f 7f       	andi	r23, 0xFF	; 255
    8d4c:	7f 7f       	andi	r23, 0xFF	; 255
    8d4e:	7f 7f       	andi	r23, 0xFF	; 255
    8d50:	7f 7f       	andi	r23, 0xFF	; 255
    8d52:	7f 7f       	andi	r23, 0xFF	; 255
    8d54:	7f 7f       	andi	r23, 0xFF	; 255
    8d56:	7f 7f       	andi	r23, 0xFF	; 255
    8d58:	7f 7f       	andi	r23, 0xFF	; 255
    8d5a:	7f 7f       	andi	r23, 0xFF	; 255
    8d5c:	7f 7f       	andi	r23, 0xFF	; 255
    8d5e:	7f 7f       	andi	r23, 0xFF	; 255
    8d60:	7f 7f       	andi	r23, 0xFF	; 255
    8d62:	7f 7f       	andi	r23, 0xFF	; 255
    8d64:	7f 7f       	andi	r23, 0xFF	; 255
    8d66:	7f 7f       	andi	r23, 0xFF	; 255
    8d68:	7f 7f       	andi	r23, 0xFF	; 255
    8d6a:	7f 7f       	andi	r23, 0xFF	; 255
    8d6c:	7f 7f       	andi	r23, 0xFF	; 255
    8d6e:	7f 7f       	andi	r23, 0xFF	; 255
    8d70:	7f 7f       	andi	r23, 0xFF	; 255
    8d72:	7f 7f       	andi	r23, 0xFF	; 255
    8d74:	7f 7f       	andi	r23, 0xFF	; 255
    8d76:	7f 7f       	andi	r23, 0xFF	; 255
    8d78:	7f 7f       	andi	r23, 0xFF	; 255
    8d7a:	7f 7c       	andi	r23, 0xCF	; 207
    8d7c:	78 71       	andi	r23, 0x18	; 24
    8d7e:	68 4c       	sbci	r22, 0xC8	; 200
    8d80:	2c 1c       	adc	r2, r12
    8d82:	12 0c       	add	r1, r2
    8d84:	0a 0b       	sbc	r16, r26
    8d86:	0a 05       	cpc	r16, r10
    8d88:	fd f3       	brhs	.-2      	; 0x8d88 <waves+0x988>
    8d8a:	e9 df       	rcall	.-46     	; 0x8d5e <waves+0x95e>
    8d8c:	d4 ca       	rjmp	.-2648   	; 0x8336 <steptable+0x12e>
    8d8e:	c0 b7       	in	r28, 0x30	; 48
    8d90:	ae a6       	std	Y+46, r10	; 0x2e
    8d92:	9e 97       	sbiw	r26, 0x2e	; 46
    8d94:	91 8b       	std	Z+17, r25	; 0x11
    8d96:	86 85       	ldd	r24, Z+14	; 0x0e
    8d98:	82 80       	ldd	r8, Z+2	; 0x02
    8d9a:	80 80       	ld	r8, Z
    8d9c:	80 80       	ld	r8, Z
    8d9e:	80 80       	ld	r8, Z
    8da0:	80 80       	ld	r8, Z
    8da2:	80 80       	ld	r8, Z
    8da4:	80 80       	ld	r8, Z
    8da6:	80 80       	ld	r8, Z
    8da8:	80 80       	ld	r8, Z
    8daa:	80 80       	ld	r8, Z
    8dac:	80 80       	ld	r8, Z
    8dae:	80 80       	ld	r8, Z
    8db0:	80 80       	ld	r8, Z
    8db2:	80 80       	ld	r8, Z
    8db4:	80 80       	ld	r8, Z
    8db6:	80 80       	ld	r8, Z
    8db8:	80 80       	ld	r8, Z
    8dba:	80 80       	ld	r8, Z
    8dbc:	80 80       	ld	r8, Z
    8dbe:	80 80       	ld	r8, Z
    8dc0:	80 80       	ld	r8, Z
    8dc2:	80 80       	ld	r8, Z
    8dc4:	80 80       	ld	r8, Z
    8dc6:	80 80       	ld	r8, Z
    8dc8:	80 80       	ld	r8, Z
    8dca:	80 80       	ld	r8, Z
    8dcc:	80 80       	ld	r8, Z
    8dce:	80 80       	ld	r8, Z
    8dd0:	80 80       	ld	r8, Z
    8dd2:	80 80       	ld	r8, Z
    8dd4:	80 80       	ld	r8, Z
    8dd6:	80 80       	ld	r8, Z
    8dd8:	80 80       	ld	r8, Z
    8dda:	80 80       	ld	r8, Z
    8ddc:	80 80       	ld	r8, Z
    8dde:	80 80       	ld	r8, Z
    8de0:	80 80       	ld	r8, Z
    8de2:	80 80       	ld	r8, Z
    8de4:	80 80       	ld	r8, Z
    8de6:	80 80       	ld	r8, Z
    8de8:	80 80       	ld	r8, Z
    8dea:	80 80       	ld	r8, Z
    8dec:	80 80       	ld	r8, Z
    8dee:	80 80       	ld	r8, Z
    8df0:	80 80       	ld	r8, Z
    8df2:	80 80       	ld	r8, Z
    8df4:	80 87       	std	Z+8, r24	; 0x08
    8df6:	91 9d       	mul	r25, r1
    8df8:	ac c4       	rjmp	.+2392   	; 0x9752 <LBGetJoyPadState+0x6e>
    8dfa:	cb d4       	rcall	.+2454   	; 0x9792 <LBPrintStr+0x18>
    8dfc:	dd f2       	brhs	.-74     	; 0x8db4 <waves+0x9b4>
    8dfe:	fa fa       	.word	0xfafa	; ????

00008e00 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    8e00:	2f 92       	push	r2
    8e02:	3f 92       	push	r3
    8e04:	4f 92       	push	r4
    8e06:	5f 92       	push	r5
    8e08:	6f 92       	push	r6
    8e0a:	7f 92       	push	r7
    8e0c:	8f 92       	push	r8
    8e0e:	9f 92       	push	r9
    8e10:	af 92       	push	r10
    8e12:	bf 92       	push	r11
    8e14:	cf 92       	push	r12
    8e16:	df 92       	push	r13
    8e18:	ef 92       	push	r14
    8e1a:	ff 92       	push	r15
    8e1c:	0f 93       	push	r16
    8e1e:	1f 93       	push	r17
    8e20:	cf 93       	push	r28
    8e22:	df 93       	push	r29
    8e24:	00 d0       	rcall	.+0      	; 0x8e26 <ProcessSprites+0x26>
    8e26:	00 d0       	rcall	.+0      	; 0x8e28 <ProcessSprites+0x28>
    8e28:	00 d0       	rcall	.+0      	; 0x8e2a <ProcessSprites+0x2a>
    8e2a:	cd b7       	in	r28, 0x3d	; 61
    8e2c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    8e2e:	80 91 00 01 	lds	r24, 0x0100
    8e32:	88 23       	and	r24, r24
    8e34:	09 f4       	brne	.+2      	; 0x8e38 <ProcessSprites+0x38>
    8e36:	cb c0       	rjmp	.+406    	; 0x8fce <ProcessSprites+0x1ce>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    8e38:	80 91 0e 0a 	lds	r24, 0x0A0E
    8e3c:	80 93 0d 0a 	sts	0x0A0D, r24
	free_tile_index = user_ram_tiles_c;
    8e40:	80 93 0c 0a 	sts	0x0A0C, r24
    8e44:	00 e0       	ldi	r16, 0x00	; 0
    8e46:	10 e0       	ldi	r17, 0x00	; 0
    8e48:	f8 01       	movw	r30, r16
    8e4a:	e8 55       	subi	r30, 0x58	; 88
    8e4c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    8e4e:	81 81       	ldd	r24, Z+1	; 0x01
    8e50:	90 81       	ld	r25, Z
    8e52:	32 81       	ldd	r19, Z+2	; 0x02
    8e54:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    8e56:	28 e0       	ldi	r18, 0x08	; 8
    8e58:	29 0f       	add	r18, r25
    8e5a:	26 95       	lsr	r18
    8e5c:	26 95       	lsr	r18
    8e5e:	26 95       	lsr	r18
    8e60:	33 24       	eor	r3, r3
    8e62:	3a 94       	dec	r3
    8e64:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    8e66:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    8e68:	19 f0       	breq	.+6      	; 0x8e70 <ProcessSprites+0x70>
    8e6a:	e2 e0       	ldi	r30, 0x02	; 2
    8e6c:	2e 2e       	mov	r2, r30
    8e6e:	02 c0       	rjmp	.+4      	; 0x8e74 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    8e70:	22 24       	eor	r2, r2
    8e72:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    8e74:	28 e0       	ldi	r18, 0x08	; 8
    8e76:	28 0f       	add	r18, r24
    8e78:	52 2e       	mov	r5, r18
    8e7a:	56 94       	lsr	r5
    8e7c:	56 94       	lsr	r5
    8e7e:	56 94       	lsr	r5
    8e80:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    8e82:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    8e84:	19 f0       	breq	.+6      	; 0x8e8c <ProcessSprites+0x8c>
    8e86:	22 e0       	ldi	r18, 0x02	; 2
    8e88:	29 83       	std	Y+1, r18	; 0x01
    8e8a:	02 c0       	rjmp	.+4      	; 0x8e90 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    8e8c:	e1 e0       	ldi	r30, 0x01	; 1
    8e8e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    8e90:	68 2e       	mov	r6, r24
    8e92:	71 2c       	mov	r7, r1
    8e94:	76 2c       	mov	r7, r6
    8e96:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8e98:	69 0e       	add	r6, r25
    8e9a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    8e9c:	50 e0       	ldi	r21, 0x00	; 0
    8e9e:	54 2f       	mov	r21, r20
    8ea0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8ea2:	ca 01       	movw	r24, r20
    8ea4:	83 0f       	add	r24, r19
    8ea6:	91 1d       	adc	r25, r1
    8ea8:	9b 83       	std	Y+3, r25	; 0x03
    8eaa:	8a 83       	std	Y+2, r24	; 0x02
    8eac:	e1 2c       	mov	r14, r1
    8eae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8eb0:	9e e1       	ldi	r25, 0x1E	; 30
    8eb2:	59 9e       	mul	r5, r25
    8eb4:	50 01       	movw	r10, r0
    8eb6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    8eb8:	9e 2c       	mov	r9, r14
    8eba:	88 24       	eor	r8, r8
    8ebc:	43 2c       	mov	r4, r3
    8ebe:	c1 2c       	mov	r12, r1
    8ec0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    8ec2:	ed e1       	ldi	r30, 0x1D	; 29
    8ec4:	e4 15       	cp	r30, r4
    8ec6:	08 f4       	brcc	.+2      	; 0x8eca <ProcessSprites+0xca>
    8ec8:	53 c0       	rjmp	.+166    	; 0x8f70 <ProcessSprites+0x170>
    8eca:	fb e1       	ldi	r31, 0x1B	; 27
    8ecc:	f5 15       	cp	r31, r5
    8ece:	08 f4       	brcc	.+2      	; 0x8ed2 <ProcessSprites+0xd2>
    8ed0:	4f c0       	rjmp	.+158    	; 0x8f70 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8ed2:	c5 01       	movw	r24, r10
    8ed4:	84 0d       	add	r24, r4
    8ed6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    8ed8:	9c 01       	movw	r18, r24
    8eda:	20 5a       	subi	r18, 0xA0	; 160
    8edc:	3e 4f       	sbci	r19, 0xFE	; 254
    8ede:	3e 83       	std	Y+6, r19	; 0x06
    8ee0:	2d 83       	std	Y+5, r18	; 0x05
    8ee2:	f9 01       	movw	r30, r18
    8ee4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    8ee6:	81 e0       	ldi	r24, 0x01	; 1
    8ee8:	94 31       	cpi	r25, 0x14	; 20
    8eea:	08 f4       	brcc	.+2      	; 0x8eee <ProcessSprites+0xee>
    8eec:	80 e0       	ldi	r24, 0x00	; 0
    8eee:	21 e0       	ldi	r18, 0x01	; 1
    8ef0:	30 91 0d 0a 	lds	r19, 0x0A0D
    8ef4:	93 17       	cp	r25, r19
    8ef6:	18 f0       	brcs	.+6      	; 0x8efe <ProcessSprites+0xfe>
    8ef8:	20 e0       	ldi	r18, 0x00	; 0
    8efa:	88 23       	and	r24, r24
    8efc:	61 f1       	breq	.+88     	; 0x8f56 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    8efe:	60 91 0c 0a 	lds	r22, 0x0A0C
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    8f02:	64 31       	cpi	r22, 0x14	; 20
    8f04:	30 f5       	brcc	.+76     	; 0x8f52 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    8f06:	88 23       	and	r24, r24
    8f08:	31 f0       	breq	.+12     	; 0x8f16 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    8f0a:	8c ee       	ldi	r24, 0xEC	; 236
    8f0c:	89 0f       	add	r24, r25
    8f0e:	9c 83       	std	Y+4, r25	; 0x04
    8f10:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <CopyFlashTile>
    8f14:	06 c0       	rjmp	.+12     	; 0x8f22 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    8f16:	22 23       	and	r18, r18
    8f18:	29 f0       	breq	.+10     	; 0x8f24 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    8f1a:	89 2f       	mov	r24, r25
    8f1c:	9c 83       	std	Y+4, r25	; 0x04
    8f1e:	0e 94 81 37 	call	0x6f02	; 0x6f02 <CopyRamTile>
    8f22:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    8f24:	80 91 0c 0a 	lds	r24, 0x0A0C
    8f28:	e8 2f       	mov	r30, r24
    8f2a:	f0 e0       	ldi	r31, 0x00	; 0
    8f2c:	9f 01       	movw	r18, r30
    8f2e:	22 0f       	add	r18, r18
    8f30:	33 1f       	adc	r19, r19
    8f32:	e2 0f       	add	r30, r18
    8f34:	f3 1f       	adc	r31, r19
    8f36:	e0 53       	subi	r30, 0x30	; 48
    8f38:	f6 4f       	sbci	r31, 0xF6	; 246
    8f3a:	2d 81       	ldd	r18, Y+5	; 0x05
    8f3c:	3e 81       	ldd	r19, Y+6	; 0x06
    8f3e:	31 83       	std	Z+1, r19	; 0x01
    8f40:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    8f42:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    8f44:	f9 01       	movw	r30, r18
    8f46:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    8f48:	91 e0       	ldi	r25, 0x01	; 1
    8f4a:	98 0f       	add	r25, r24
    8f4c:	90 93 0c 0a 	sts	0x0A0C, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    8f50:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    8f52:	94 31       	cpi	r25, 0x14	; 20
    8f54:	68 f4       	brcc	.+26     	; 0x8f70 <ProcessSprites+0x170>
    8f56:	80 91 0d 0a 	lds	r24, 0x0A0D
    8f5a:	98 17       	cp	r25, r24
    8f5c:	48 f0       	brcs	.+18     	; 0x8f70 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8f5e:	93 01       	movw	r18, r6
    8f60:	a6 01       	movw	r20, r12
    8f62:	48 0d       	add	r20, r8
    8f64:	59 1d       	adc	r21, r9
    8f66:	6a 81       	ldd	r22, Y+2	; 0x02
    8f68:	7b 81       	ldd	r23, Y+3	; 0x03
    8f6a:	89 2f       	mov	r24, r25
    8f6c:	0e 94 21 38 	call	0x7042	; 0x7042 <BlitSpritePart>
    8f70:	ff ef       	ldi	r31, 0xFF	; 255
    8f72:	cf 1a       	sub	r12, r31
    8f74:	df 0a       	sbc	r13, r31
    8f76:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    8f78:	c2 14       	cp	r12, r2
    8f7a:	08 f4       	brcc	.+2      	; 0x8f7e <ProcessSprites+0x17e>
    8f7c:	a2 cf       	rjmp	.-188    	; 0x8ec2 <ProcessSprites+0xc2>
    8f7e:	2f ef       	ldi	r18, 0xFF	; 255
    8f80:	e2 1a       	sub	r14, r18
    8f82:	f2 0a       	sbc	r15, r18
    8f84:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    8f86:	99 81       	ldd	r25, Y+1	; 0x01
    8f88:	e9 16       	cp	r14, r25
    8f8a:	08 f4       	brcc	.+2      	; 0x8f8e <ProcessSprites+0x18e>
    8f8c:	91 cf       	rjmp	.-222    	; 0x8eb0 <ProcessSprites+0xb0>
    8f8e:	0c 5f       	subi	r16, 0xFC	; 252
    8f90:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    8f92:	08 32       	cpi	r16, 0x28	; 40
    8f94:	11 05       	cpc	r17, r1
    8f96:	09 f0       	breq	.+2      	; 0x8f9a <ProcessSprites+0x19a>
    8f98:	57 cf       	rjmp	.-338    	; 0x8e48 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    8f9a:	26 96       	adiw	r28, 0x06	; 6
    8f9c:	0f b6       	in	r0, 0x3f	; 63
    8f9e:	f8 94       	cli
    8fa0:	de bf       	out	0x3e, r29	; 62
    8fa2:	0f be       	out	0x3f, r0	; 63
    8fa4:	cd bf       	out	0x3d, r28	; 61
    8fa6:	df 91       	pop	r29
    8fa8:	cf 91       	pop	r28
    8faa:	1f 91       	pop	r17
    8fac:	0f 91       	pop	r16
    8fae:	ff 90       	pop	r15
    8fb0:	ef 90       	pop	r14
    8fb2:	df 90       	pop	r13
    8fb4:	cf 90       	pop	r12
    8fb6:	bf 90       	pop	r11
    8fb8:	af 90       	pop	r10
    8fba:	9f 90       	pop	r9
    8fbc:	8f 90       	pop	r8
    8fbe:	7f 90       	pop	r7
    8fc0:	6f 90       	pop	r6
    8fc2:	5f 90       	pop	r5
    8fc4:	4f 90       	pop	r4
    8fc6:	3f 90       	pop	r3
    8fc8:	2f 90       	pop	r2
	}

	/* restore BG tiles */

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
    8fca:	0c 94 0e 38 	jmp	0x701c	; 0x701c <RestoreBackground>
	#endif

}
    8fce:	26 96       	adiw	r28, 0x06	; 6
    8fd0:	0f b6       	in	r0, 0x3f	; 63
    8fd2:	f8 94       	cli
    8fd4:	de bf       	out	0x3e, r29	; 62
    8fd6:	0f be       	out	0x3f, r0	; 63
    8fd8:	cd bf       	out	0x3d, r28	; 61
    8fda:	df 91       	pop	r29
    8fdc:	cf 91       	pop	r28
    8fde:	1f 91       	pop	r17
    8fe0:	0f 91       	pop	r16
    8fe2:	ff 90       	pop	r15
    8fe4:	ef 90       	pop	r14
    8fe6:	df 90       	pop	r13
    8fe8:	cf 90       	pop	r12
    8fea:	bf 90       	pop	r11
    8fec:	af 90       	pop	r10
    8fee:	9f 90       	pop	r9
    8ff0:	8f 90       	pop	r8
    8ff2:	7f 90       	pop	r7
    8ff4:	6f 90       	pop	r6
    8ff6:	5f 90       	pop	r5
    8ff8:	4f 90       	pop	r4
    8ffa:	3f 90       	pop	r3
    8ffc:	2f 90       	pop	r2
    8ffe:	08 95       	ret

00009000 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    9000:	df 92       	push	r13
    9002:	ef 92       	push	r14
    9004:	ff 92       	push	r15
    9006:	0f 93       	push	r16
    9008:	1f 93       	push	r17
    900a:	cf 93       	push	r28
    900c:	df 93       	push	r29
    900e:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    9010:	fb 01       	movw	r30, r22
    9012:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    9014:	31 96       	adiw	r30, 0x01	; 1
    9016:	64 91       	lpm	r22, Z
    9018:	5f ef       	ldi	r21, 0xFF	; 255
    901a:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    901c:	24 2f       	mov	r18, r20
    901e:	21 70       	andi	r18, 0x01	; 1
    9020:	40 ff       	sbrs	r20, 0
    9022:	04 c0       	rjmp	.+8      	; 0x902c <MapSprite2+0x2c>
			x=(mapWidth-1);
    9024:	95 2f       	mov	r25, r21
			dx=-1;
    9026:	ff 24       	eor	r15, r15
    9028:	fa 94       	dec	r15
    902a:	03 c0       	rjmp	.+6      	; 0x9032 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    902c:	ff 24       	eor	r15, r15
    902e:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    9030:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    9032:	41 ff       	sbrs	r20, 1
    9034:	05 c0       	rjmp	.+10     	; 0x9040 <MapSprite2+0x40>
			y=(mapHeight-1);
    9036:	7f ef       	ldi	r23, 0xFF	; 255
    9038:	76 0f       	add	r23, r22
			dy=-1;
    903a:	ee 24       	eor	r14, r14
    903c:	ea 94       	dec	r14
    903e:	03 c0       	rjmp	.+6      	; 0x9046 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    9040:	ee 24       	eor	r14, r14
    9042:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9044:	70 e0       	ldi	r23, 0x00	; 0
    9046:	21 11       	cpse	r18, r1
    9048:	01 c0       	rjmp	.+2      	; 0x904c <MapSprite2+0x4c>
    904a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    904c:	00 e0       	ldi	r16, 0x00	; 0
    904e:	06 17       	cp	r16, r22
    9050:	09 f1       	breq	.+66     	; 0x9094 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9052:	71 03       	mulsu	r23, r17
    9054:	e0 01       	movw	r28, r0
    9056:	11 24       	eor	r1, r1
    9058:	d8 2e       	mov	r13, r24
    905a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    905c:	8d 15       	cp	r24, r13
    905e:	b1 f0       	breq	.+44     	; 0x908c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9060:	9e 01       	movw	r18, r28
    9062:	29 0f       	add	r18, r25
    9064:	31 1d       	adc	r19, r1
    9066:	97 fd       	sbrc	r25, 7
    9068:	3a 95       	dec	r19
    906a:	2e 5f       	subi	r18, 0xFE	; 254
    906c:	3f 4f       	sbci	r19, 0xFF	; 255
    906e:	fd 01       	movw	r30, r26
    9070:	e2 0f       	add	r30, r18
    9072:	f3 1f       	adc	r31, r19
    9074:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9076:	34 e0       	ldi	r19, 0x04	; 4
    9078:	83 9f       	mul	r24, r19
    907a:	f0 01       	movw	r30, r0
    907c:	11 24       	eor	r1, r1
    907e:	e8 55       	subi	r30, 0x58	; 88
    9080:	fb 4f       	sbci	r31, 0xFB	; 251
    9082:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9084:	8f 5f       	subi	r24, 0xFF	; 255
    9086:	43 83       	std	Z+3, r20	; 0x03
    9088:	9f 0d       	add	r25, r15
    908a:	e8 cf       	rjmp	.-48     	; 0x905c <MapSprite2+0x5c>
    908c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    908e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9090:	95 2f       	mov	r25, r21
    9092:	dd cf       	rjmp	.-70     	; 0x904e <MapSprite2+0x4e>
	    }
	}
    9094:	df 91       	pop	r29
    9096:	cf 91       	pop	r28
    9098:	1f 91       	pop	r17
    909a:	0f 91       	pop	r16
    909c:	ff 90       	pop	r15
    909e:	ef 90       	pop	r14
    90a0:	df 90       	pop	r13
    90a2:	08 95       	ret

000090a4 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    90a4:	0f 93       	push	r16
    90a6:	cf 93       	push	r28
    90a8:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    90aa:	30 e0       	ldi	r19, 0x00	; 0
    90ac:	30 17       	cp	r19, r16
    90ae:	e1 f0       	breq	.+56     	; 0x90e8 <MoveSprite+0x44>
    90b0:	b4 2f       	mov	r27, r20
    90b2:	a0 e2       	ldi	r26, 0x20	; 32
    90b4:	a4 0f       	add	r26, r20
    90b6:	78 2f       	mov	r23, r24
    90b8:	72 0f       	add	r23, r18
    90ba:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    90bc:	87 17       	cp	r24, r23
    90be:	81 f0       	breq	.+32     	; 0x90e0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    90c0:	c4 e0       	ldi	r28, 0x04	; 4
    90c2:	8c 9f       	mul	r24, r28
    90c4:	f0 01       	movw	r30, r0
    90c6:	11 24       	eor	r1, r1
    90c8:	e8 55       	subi	r30, 0x58	; 88
    90ca:	fb 4f       	sbci	r31, 0xFB	; 251
    90cc:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    90ce:	41 3e       	cpi	r20, 0xE1	; 225
    90d0:	51 05       	cpc	r21, r1
    90d2:	14 f0       	brlt	.+4      	; 0x90d8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    90d4:	a1 83       	std	Z+1, r26	; 0x01
    90d6:	01 c0       	rjmp	.+2      	; 0x90da <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    90d8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    90da:	8f 5f       	subi	r24, 0xFF	; 255
    90dc:	98 5f       	subi	r25, 0xF8	; 248
    90de:	ee cf       	rjmp	.-36     	; 0x90bc <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    90e0:	3f 5f       	subi	r19, 0xFF	; 255
    90e2:	48 5f       	subi	r20, 0xF8	; 248
    90e4:	5f 4f       	sbci	r21, 0xFF	; 255
    90e6:	e2 cf       	rjmp	.-60     	; 0x90ac <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    90e8:	cf 91       	pop	r28
    90ea:	0f 91       	pop	r16
    90ec:	08 95       	ret

000090ee <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    90ee:	08 95       	ret

000090f0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    90f0:	e8 ea       	ldi	r30, 0xA8	; 168
    90f2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    90f4:	80 ef       	ldi	r24, 0xF0	; 240
    90f6:	80 83       	st	Z, r24
    90f8:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    90fa:	94 e0       	ldi	r25, 0x04	; 4
    90fc:	e0 3d       	cpi	r30, 0xD0	; 208
    90fe:	f9 07       	cpc	r31, r25
    9100:	d1 f7       	brne	.-12     	; 0x90f6 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    9102:	10 92 0c 0a 	sts	0x0A0C, r1
		user_ram_tiles_c_tmp = 0U;
    9106:	10 92 0e 0a 	sts	0x0A0E, r1
    910a:	08 95       	ret

0000910c <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    910c:	4f 92       	push	r4
    910e:	5f 92       	push	r5
    9110:	6f 92       	push	r6
    9112:	7f 92       	push	r7
    9114:	8f 92       	push	r8
    9116:	9f 92       	push	r9
    9118:	af 92       	push	r10
    911a:	bf 92       	push	r11
    911c:	cf 92       	push	r12
    911e:	df 92       	push	r13
    9120:	ef 92       	push	r14
    9122:	ff 92       	push	r15
    9124:	0f 93       	push	r16
    9126:	1f 93       	push	r17
    9128:	cf 93       	push	r28
    912a:	df 93       	push	r29
    912c:	68 2e       	mov	r6, r24
    912e:	56 2e       	mov	r5, r22
    9130:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9132:	fa 01       	movw	r30, r20
    9134:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9136:	31 96       	adiw	r30, 0x01	; 1
    9138:	84 90       	lpm	r8, Z
    913a:	c7 2c       	mov	r12, r7
    913c:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    913e:	00 e0       	ldi	r16, 0x00	; 0
    9140:	10 e0       	ldi	r17, 0x00	; 0
    9142:	91 2c       	mov	r9, r1
    9144:	98 14       	cp	r9, r8
    9146:	f1 f0       	breq	.+60     	; 0x9184 <DrawMap+0x78>
    9148:	c0 e0       	ldi	r28, 0x00	; 0
    914a:	d0 e0       	ldi	r29, 0x00	; 0
    914c:	58 01       	movw	r10, r16
    914e:	f2 e0       	ldi	r31, 0x02	; 2
    9150:	af 0e       	add	r10, r31
    9152:	b1 1c       	adc	r11, r1
    9154:	49 2c       	mov	r4, r9
    9156:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    9158:	c7 15       	cp	r28, r7
    915a:	80 f4       	brcc	.+32     	; 0x917c <DrawMap+0x70>
    915c:	95 01       	movw	r18, r10
    915e:	2c 0f       	add	r18, r28
    9160:	3d 1f       	adc	r19, r29
    9162:	f7 01       	movw	r30, r14
    9164:	e2 0f       	add	r30, r18
    9166:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9168:	24 91       	lpm	r18, Z
    916a:	42 2f       	mov	r20, r18
    916c:	50 e0       	ldi	r21, 0x00	; 0
    916e:	64 2d       	mov	r22, r4
    9170:	8c 2f       	mov	r24, r28
    9172:	86 0d       	add	r24, r6
    9174:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
    9178:	21 96       	adiw	r28, 0x01	; 1
    917a:	ee cf       	rjmp	.-36     	; 0x9158 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    917c:	93 94       	inc	r9
    917e:	0c 0d       	add	r16, r12
    9180:	1d 1d       	adc	r17, r13
    9182:	e0 cf       	rjmp	.-64     	; 0x9144 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9184:	df 91       	pop	r29
    9186:	cf 91       	pop	r28
    9188:	1f 91       	pop	r17
    918a:	0f 91       	pop	r16
    918c:	ff 90       	pop	r15
    918e:	ef 90       	pop	r14
    9190:	df 90       	pop	r13
    9192:	cf 90       	pop	r12
    9194:	bf 90       	pop	r11
    9196:	af 90       	pop	r10
    9198:	9f 90       	pop	r9
    919a:	8f 90       	pop	r8
    919c:	7f 90       	pop	r7
    919e:	6f 90       	pop	r6
    91a0:	5f 90       	pop	r5
    91a2:	4f 90       	pop	r4
    91a4:	08 95       	ret

000091a6 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    91a6:	df 92       	push	r13
    91a8:	ef 92       	push	r14
    91aa:	ff 92       	push	r15
    91ac:	0f 93       	push	r16
    91ae:	1f 93       	push	r17
    91b0:	cf 93       	push	r28
    91b2:	df 93       	push	r29
    91b4:	f6 2e       	mov	r15, r22
    91b6:	04 2f       	mov	r16, r20
    91b8:	d2 2e       	mov	r13, r18
    91ba:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    91bc:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    91be:	8a e0       	ldi	r24, 0x0A	; 10
    91c0:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    91c2:	01 11       	cpse	r16, r1
    91c4:	02 c0       	rjmp	.+4      	; 0x91ca <PrintByte+0x24>
    91c6:	11 11       	cpse	r17, r1
    91c8:	07 c0       	rjmp	.+14     	; 0x91d8 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    91ca:	80 2f       	mov	r24, r16
    91cc:	6e 2d       	mov	r22, r14
    91ce:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    91d2:	40 e1       	ldi	r20, 0x10	; 16
    91d4:	49 0f       	add	r20, r25
    91d6:	05 c0       	rjmp	.+10     	; 0x91e2 <PrintByte+0x3c>
		}else{
			if(zeropad){
    91d8:	dd 20       	and	r13, r13
    91da:	11 f0       	breq	.+4      	; 0x91e0 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    91dc:	40 e1       	ldi	r20, 0x10	; 16
    91de:	01 c0       	rjmp	.+2      	; 0x91e2 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    91e0:	40 e0       	ldi	r20, 0x00	; 0
    91e2:	6f 2d       	mov	r22, r15
    91e4:	8c 2f       	mov	r24, r28
    91e6:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetFont>
			}
		}
		val=val/10;
    91ea:	80 2f       	mov	r24, r16
    91ec:	6e 2d       	mov	r22, r14
    91ee:	0e 94 f4 70 	call	0xe1e8	; 0xe1e8 <__udivmodqi4>
    91f2:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    91f4:	1f 5f       	subi	r17, 0xFF	; 255
    91f6:	21 97       	sbiw	r28, 0x01	; 1
    91f8:	13 30       	cpi	r17, 0x03	; 3
    91fa:	19 f7       	brne	.-58     	; 0x91c2 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    91fc:	df 91       	pop	r29
    91fe:	cf 91       	pop	r28
    9200:	1f 91       	pop	r17
    9202:	0f 91       	pop	r16
    9204:	ff 90       	pop	r15
    9206:	ef 90       	pop	r14
    9208:	df 90       	pop	r13
    920a:	08 95       	ret

0000920c <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    920c:	0f 93       	push	r16
    920e:	1f 93       	push	r17
    9210:	cf 93       	push	r28
    9212:	df 93       	push	r29
    9214:	06 2f       	mov	r16, r22
    9216:	c4 2f       	mov	r28, r20
    9218:	d5 2f       	mov	r29, r21
    921a:	18 2f       	mov	r17, r24
    921c:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    921e:	fe 01       	movw	r30, r28
    9220:	44 91       	lpm	r20, Z
		if(c!=0){
    9222:	44 23       	and	r20, r20
    9224:	49 f0       	breq	.+18     	; 0x9238 <Print+0x2c>
			c=((c&127)-32);			
    9226:	4f 77       	andi	r20, 0x7F	; 127
    9228:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    922a:	60 2f       	mov	r22, r16
    922c:	8c 2f       	mov	r24, r28
    922e:	81 0f       	add	r24, r17
    9230:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetFont>
    9234:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9236:	f3 cf       	rjmp	.-26     	; 0x921e <Print+0x12>
	
}
    9238:	df 91       	pop	r29
    923a:	cf 91       	pop	r28
    923c:	1f 91       	pop	r17
    923e:	0f 91       	pop	r16
    9240:	08 95       	ret

00009242 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    9242:	40 52       	subi	r20, 0x20	; 32
    9244:	0c 94 48 3a 	jmp	0x7490	; 0x7490 <SetFont>

00009248 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9248:	0f 93       	push	r16
    924a:	1f 93       	push	r17
    924c:	cf 93       	push	r28
    924e:	df 93       	push	r29
    9250:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9252:	c0 e0       	ldi	r28, 0x00	; 0
    9254:	d0 e0       	ldi	r29, 0x00	; 0
    9256:	c0 17       	cp	r28, r16
    9258:	d1 07       	cpc	r29, r17
    925a:	44 f4       	brge	.+16     	; 0x926c <WaitVsync+0x24>
		while(!GetVsyncFlag());
    925c:	0e 94 62 3a 	call	0x74c4	; 0x74c4 <GetVsyncFlag>
    9260:	88 23       	and	r24, r24
    9262:	e1 f3       	breq	.-8      	; 0x925c <WaitVsync+0x14>
		ClearVsyncFlag();		
    9264:	0e 94 66 3a 	call	0x74cc	; 0x74cc <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9268:	21 96       	adiw	r28, 0x01	; 1
    926a:	f5 cf       	rjmp	.-22     	; 0x9256 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    926c:	df 91       	pop	r29
    926e:	cf 91       	pop	r28
    9270:	1f 91       	pop	r17
    9272:	0f 91       	pop	r16
    9274:	08 95       	ret

00009276 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9276:	80 93 31 0b 	sts	0x0B31, r24
	currFadeFrame=0;
    927a:	10 92 34 0b 	sts	0x0B34, r1
	fadeActive=true;
    927e:	81 e0       	ldi	r24, 0x01	; 1
    9280:	80 93 33 0b 	sts	0x0B33, r24
		
	if(blocking){
    9284:	66 23       	and	r22, r22
    9286:	21 f0       	breq	.+8      	; 0x9290 <doFade+0x1a>
		while(fadeActive==true);
    9288:	80 91 33 0b 	lds	r24, 0x0B33
    928c:	81 11       	cpse	r24, r1
    928e:	fc cf       	rjmp	.-8      	; 0x9288 <doFade+0x12>
    9290:	08 95       	ret

00009292 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9292:	81 11       	cpse	r24, r1
    9294:	03 c0       	rjmp	.+6      	; 0x929c <FadeIn+0xa>
		DDRC=0xff;
    9296:	8f ef       	ldi	r24, 0xFF	; 255
    9298:	87 b9       	out	0x07, r24	; 7
		return;
    929a:	08 95       	ret
	}
	fadeStep=1;
    929c:	91 e0       	ldi	r25, 0x01	; 1
    929e:	90 93 35 0b 	sts	0x0B35, r25
	fadeDir=1;
    92a2:	90 93 32 0b 	sts	0x0B32, r25
	doFade(speed,blocking);
    92a6:	0c 94 3b 49 	jmp	0x9276	; 0x9276 <doFade>

000092aa <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    92aa:	80 91 33 0b 	lds	r24, 0x0B33
    92ae:	88 23       	and	r24, r24
    92b0:	01 f1       	breq	.+64     	; 0x92f2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    92b2:	80 91 34 0b 	lds	r24, 0x0B34
    92b6:	81 11       	cpse	r24, r1
    92b8:	19 c0       	rjmp	.+50     	; 0x92ec <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    92ba:	80 91 31 0b 	lds	r24, 0x0B31
    92be:	80 93 34 0b 	sts	0x0B34, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    92c2:	e0 91 35 0b 	lds	r30, 0x0B35
    92c6:	f0 e0       	ldi	r31, 0x00	; 0
    92c8:	e5 52       	subi	r30, 0x25	; 37
    92ca:	ff 4f       	sbci	r31, 0xFF	; 255
    92cc:	e4 91       	lpm	r30, Z
    92ce:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    92d0:	90 91 32 0b 	lds	r25, 0x0B32
    92d4:	80 91 35 0b 	lds	r24, 0x0B35
    92d8:	89 0f       	add	r24, r25
    92da:	80 93 35 0b 	sts	0x0B35, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    92de:	88 23       	and	r24, r24
    92e0:	11 f0       	breq	.+4      	; 0x92e6 <ProcessFading+0x3c>
    92e2:	8d 30       	cpi	r24, 0x0D	; 13
    92e4:	31 f4       	brne	.+12     	; 0x92f2 <ProcessFading+0x48>
				fadeActive=false;
    92e6:	10 92 33 0b 	sts	0x0B33, r1
    92ea:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    92ec:	81 50       	subi	r24, 0x01	; 1
    92ee:	80 93 34 0b 	sts	0x0B34, r24
    92f2:	08 95       	ret

000092f4 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    92f4:	0e 94 55 49 	call	0x92aa	; 0x92aa <ProcessFading>
	#if (SPRITES_VSYNC_PROCESS != 0)
	ProcessSprites();
    92f8:	0c 94 00 47 	jmp	0x8e00	; 0x8e00 <ProcessSprites>

000092fc <LBPlaySound.part.5>:
void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    92fc:	41 e0       	ldi	r20, 0x01	; 1
    92fe:	6f ef       	ldi	r22, 0xFF	; 255
    9300:	0c 94 f9 3d 	jmp	0x7bf2	; 0x7bf2 <TriggerFx>

00009304 <wifiSendP>:
#define WIFI_TIMEOUT 1
#define WIFI_NODATA 2

#define TIMEOUT 10*60

u8 wifiSendP(const char* str){
    9304:	0f 93       	push	r16
    9306:	1f 93       	push	r17
    9308:	cf 93       	push	r28
    930a:	df 93       	push	r29
    930c:	ec 01       	movw	r28, r24

	char c;
	u8 counter = 0;
	while(str!=NULL){
    930e:	20 97       	sbiw	r28, 0x00	; 0
    9310:	99 f0       	breq	.+38     	; 0x9338 <wifiSendP+0x34>
		c=pgm_read_byte(str);
    9312:	fe 01       	movw	r30, r28
    9314:	04 91       	lpm	r16, Z
		if(c==0)break;
    9316:	00 23       	and	r16, r16
    9318:	79 f0       	breq	.+30     	; 0x9338 <wifiSendP+0x34>
    931a:	1c e3       	ldi	r17, 0x3C	; 60
		while(UartSendChar(c)==-1) {
    931c:	80 2f       	mov	r24, r16
    931e:	0e 94 5f 3c 	call	0x78be	; 0x78be <UartSendChar>
    9322:	8f 3f       	cpi	r24, 0xFF	; 255
    9324:	39 f4       	brne	.+14     	; 0x9334 <wifiSendP+0x30>
			WaitVsync(1);
    9326:	81 e0       	ldi	r24, 0x01	; 1
    9328:	90 e0       	ldi	r25, 0x00	; 0
    932a:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
    932e:	11 50       	subi	r17, 0x01	; 1
			if (++counter == 60) return WIFI_OK;
    9330:	a9 f7       	brne	.-22     	; 0x931c <wifiSendP+0x18>
    9332:	02 c0       	rjmp	.+4      	; 0x9338 <wifiSendP+0x34>
		}
		counter = 0;
		str++;
    9334:	21 96       	adiw	r28, 0x01	; 1
    9336:	eb cf       	rjmp	.-42     	; 0x930e <wifiSendP+0xa>
	};

	return WIFI_OK;
}
    9338:	80 e0       	ldi	r24, 0x00	; 0
    933a:	df 91       	pop	r29
    933c:	cf 91       	pop	r28
    933e:	1f 91       	pop	r17
    9340:	0f 91       	pop	r16
    9342:	08 95       	ret

00009344 <wifiSend>:

u8 wifiSend(char* str){
    9344:	0f 93       	push	r16
    9346:	1f 93       	push	r17
    9348:	cf 93       	push	r28
    934a:	df 93       	push	r29
    934c:	ec 01       	movw	r28, r24

	char c;
	u8 counter = 0;
	while(str!=NULL){
    934e:	20 97       	sbiw	r28, 0x00	; 0
    9350:	79 f0       	breq	.+30     	; 0x9370 <wifiSend+0x2c>
		c=*str;
    9352:	09 91       	ld	r16, Y+
		if(c==0)break;
    9354:	00 23       	and	r16, r16
    9356:	61 f0       	breq	.+24     	; 0x9370 <wifiSend+0x2c>
    9358:	1c e3       	ldi	r17, 0x3C	; 60
		while(UartSendChar(c)==-1) {
    935a:	80 2f       	mov	r24, r16
    935c:	0e 94 5f 3c 	call	0x78be	; 0x78be <UartSendChar>
    9360:	8f 3f       	cpi	r24, 0xFF	; 255
    9362:	a9 f7       	brne	.-22     	; 0x934e <wifiSend+0xa>
			WaitVsync(1);
    9364:	81 e0       	ldi	r24, 0x01	; 1
    9366:	90 e0       	ldi	r25, 0x00	; 0
    9368:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
    936c:	11 50       	subi	r17, 0x01	; 1
			if (++counter == 60) return WIFI_OK;
    936e:	a9 f7       	brne	.-22     	; 0x935a <wifiSend+0x16>
		}
		counter = 0;
		str++;
	};
	return WIFI_OK;
}
    9370:	80 e0       	ldi	r24, 0x00	; 0
    9372:	df 91       	pop	r29
    9374:	cf 91       	pop	r28
    9376:	1f 91       	pop	r17
    9378:	0f 91       	pop	r16
    937a:	08 95       	ret

0000937c <wifiSendBinary>:

u8 wifiSendBinary(char* str, u8 sz){
    937c:	ff 92       	push	r15
    937e:	0f 93       	push	r16
    9380:	1f 93       	push	r17
    9382:	cf 93       	push	r28
    9384:	df 93       	push	r29
    9386:	c6 2f       	mov	r28, r22
    9388:	8c 01       	movw	r16, r24

	char c;
	u8 counter = 0;
	while(sz--){
    938a:	cc 23       	and	r28, r28
    938c:	91 f0       	breq	.+36     	; 0x93b2 <wifiSendBinary+0x36>
		c=*str;
    938e:	f8 01       	movw	r30, r16
    9390:	f1 90       	ld	r15, Z+
    9392:	8f 01       	movw	r16, r30
		while(UartSendChar(c)==-1) {
    9394:	dc e3       	ldi	r29, 0x3C	; 60
    9396:	8f 2d       	mov	r24, r15
    9398:	0e 94 5f 3c 	call	0x78be	; 0x78be <UartSendChar>
    939c:	8f 3f       	cpi	r24, 0xFF	; 255
    939e:	39 f4       	brne	.+14     	; 0x93ae <wifiSendBinary+0x32>
			WaitVsync(1);
    93a0:	81 e0       	ldi	r24, 0x01	; 1
    93a2:	90 e0       	ldi	r25, 0x00	; 0
    93a4:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
    93a8:	d1 50       	subi	r29, 0x01	; 1
			if (++counter == 60) return WIFI_OK;
    93aa:	a9 f7       	brne	.-22     	; 0x9396 <wifiSendBinary+0x1a>
    93ac:	02 c0       	rjmp	.+4      	; 0x93b2 <wifiSendBinary+0x36>

u8 wifiSendBinary(char* str, u8 sz){

	char c;
	u8 counter = 0;
	while(sz--){
    93ae:	c1 50       	subi	r28, 0x01	; 1
    93b0:	ec cf       	rjmp	.-40     	; 0x938a <wifiSendBinary+0xe>
		}
		counter = 0;
		str++;
	};
	return WIFI_OK;
}
    93b2:	80 e0       	ldi	r24, 0x00	; 0
    93b4:	df 91       	pop	r29
    93b6:	cf 91       	pop	r28
    93b8:	1f 91       	pop	r17
    93ba:	0f 91       	pop	r16
    93bc:	ff 90       	pop	r15
    93be:	08 95       	ret

000093c0 <wifiGetIfAvailable>:

u8 wifiGetIfAvailable(char* buffer, u8 expectedSize) {
    93c0:	ef 92       	push	r14
    93c2:	ff 92       	push	r15
    93c4:	1f 93       	push	r17
    93c6:	cf 93       	push	r28
    93c8:	df 93       	push	r29
    93ca:	00 d0       	rcall	.+0      	; 0x93cc <wifiGetIfAvailable+0xc>
    93cc:	cd b7       	in	r28, 0x3d	; 61
    93ce:	de b7       	in	r29, 0x3e	; 62
    93d0:	18 2f       	mov	r17, r24
	s16 r = -1;
	if (UartUnreadCount() > 0) {
    93d2:	69 83       	std	Y+1, r22	; 0x01
    93d4:	9a 83       	std	Y+2, r25	; 0x02
    93d6:	0e 94 3d 3c 	call	0x787a	; 0x787a <UartUnreadCount>
    93da:	69 81       	ldd	r22, Y+1	; 0x01
    93dc:	9a 81       	ldd	r25, Y+2	; 0x02
    93de:	88 23       	and	r24, r24
    93e0:	89 f0       	breq	.+34     	; 0x9404 <wifiGetIfAvailable+0x44>
    93e2:	e1 2e       	mov	r14, r17
    93e4:	f9 2e       	mov	r15, r25
    93e6:	16 0f       	add	r17, r22
		while (expectedSize--) {
    93e8:	1e 15       	cp	r17, r14
    93ea:	51 f0       	breq	.+20     	; 0x9400 <wifiGetIfAvailable+0x40>
			while(r == -1) r = UartReadChar();
    93ec:	0e 94 43 3c 	call	0x7886	; 0x7886 <UartReadChar>
    93f0:	8f 3f       	cpi	r24, 0xFF	; 255
    93f2:	2f ef       	ldi	r18, 0xFF	; 255
    93f4:	92 07       	cpc	r25, r18
    93f6:	d1 f3       	breq	.-12     	; 0x93ec <wifiGetIfAvailable+0x2c>
			*buffer = r&0xff;
    93f8:	f7 01       	movw	r30, r14
    93fa:	81 93       	st	Z+, r24
    93fc:	7f 01       	movw	r14, r30
    93fe:	f4 cf       	rjmp	.-24     	; 0x93e8 <wifiGetIfAvailable+0x28>
}

u8 wifiGetIfAvailable(char* buffer, u8 expectedSize) {
	s16 r = -1;
	if (UartUnreadCount() > 0) {
		while (expectedSize--) {
    9400:	80 e0       	ldi	r24, 0x00	; 0
    9402:	01 c0       	rjmp	.+2      	; 0x9406 <wifiGetIfAvailable+0x46>
			*buffer = r&0xff;
			buffer++;
			r = -1;
		}
	} else {
		return WIFI_NODATA;
    9404:	82 e0       	ldi	r24, 0x02	; 2
	}
	return WIFI_OK;
}
    9406:	0f 90       	pop	r0
    9408:	0f 90       	pop	r0
    940a:	df 91       	pop	r29
    940c:	cf 91       	pop	r28
    940e:	1f 91       	pop	r17
    9410:	ff 90       	pop	r15
    9412:	ef 90       	pop	r14
    9414:	08 95       	ret

00009416 <wifiGetAndDiscard>:

void wifiGetAndDiscard(u8 expectedSize) {
    9416:	cf 93       	push	r28
    9418:	c8 2f       	mov	r28, r24
	s16 r = -1;
	if (UartUnreadCount() > 0) {
    941a:	0e 94 3d 3c 	call	0x787a	; 0x787a <UartUnreadCount>
    941e:	88 23       	and	r24, r24
    9420:	41 f0       	breq	.+16     	; 0x9432 <wifiGetAndDiscard+0x1c>
		while (expectedSize--) {
    9422:	cc 23       	and	r28, r28
    9424:	31 f0       	breq	.+12     	; 0x9432 <wifiGetAndDiscard+0x1c>
			while(r == -1) r = UartReadChar();
    9426:	0e 94 43 3c 	call	0x7886	; 0x7886 <UartReadChar>
    942a:	01 96       	adiw	r24, 0x01	; 1
    942c:	e1 f3       	breq	.-8      	; 0x9426 <wifiGetAndDiscard+0x10>
    942e:	c1 50       	subi	r28, 0x01	; 1
    9430:	f8 cf       	rjmp	.-16     	; 0x9422 <wifiGetAndDiscard+0xc>
			r = -1;
		}
	}
}
    9432:	cf 91       	pop	r28
    9434:	08 95       	ret

00009436 <wifiGetPB>:

u8 wifiGetPB(const char* str, char* rxbuf){
    9436:	ef 92       	push	r14
    9438:	ff 92       	push	r15
    943a:	0f 93       	push	r16
    943c:	1f 93       	push	r17
    943e:	cf 93       	push	r28
    9440:	df 93       	push	r29
    9442:	f8 2e       	mov	r15, r24
    9444:	e9 2e       	mov	r14, r25
    9446:	8b 01       	movw	r16, r22
	u8 c;
	s16 r;
	const char* p=str;
	char* buf=rxbuf;
	ClearVsyncCounter();
    9448:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <ClearVsyncCounter>
}

u8 wifiGetPB(const char* str, char* rxbuf){
	u8 c;
	s16 r;
	const char* p=str;
    944c:	cf 2d       	mov	r28, r15
    944e:	de 2d       	mov	r29, r14
	char* buf=rxbuf;
	ClearVsyncCounter();

	while(1){

		r=UartReadChar();
    9450:	0e 94 43 3c 	call	0x7886	; 0x7886 <UartReadChar>
		if(r!=-1){
    9454:	8f 3f       	cpi	r24, 0xFF	; 255
    9456:	ef ef       	ldi	r30, 0xFF	; 255
    9458:	9e 07       	cpc	r25, r30
    945a:	99 f0       	breq	.+38     	; 0x9482 <wifiGetPB+0x4c>

			c=r&(0xff);
    945c:	28 2f       	mov	r18, r24

			if(buf!=NULL){
    945e:	01 15       	cp	r16, r1
    9460:	11 05       	cpc	r17, r1
    9462:	19 f0       	breq	.+6      	; 0x946a <wifiGetPB+0x34>
				*buf=c;
    9464:	f8 01       	movw	r30, r16
    9466:	81 93       	st	Z+, r24
    9468:	8f 01       	movw	r16, r30
				buf++;
			}

			if(c==pgm_read_byte(p)){
    946a:	fe 01       	movw	r30, r28
    946c:	84 91       	lpm	r24, Z
    946e:	28 13       	cpse	r18, r24
    9470:	06 c0       	rjmp	.+12     	; 0x947e <wifiGetPB+0x48>
				p++;
    9472:	21 96       	adiw	r28, 0x01	; 1
				if(pgm_read_byte(p)==0){
    9474:	fe 01       	movw	r30, r28
    9476:	84 91       	lpm	r24, Z
    9478:	81 11       	cpse	r24, r1
    947a:	03 c0       	rjmp	.+6      	; 0x9482 <wifiGetPB+0x4c>
    947c:	09 c0       	rjmp	.+18     	; 0x9490 <wifiGetPB+0x5a>
					return WIFI_OK;
				}
			}else{
				//reset string compare
				p=str;
    947e:	cf 2d       	mov	r28, r15
    9480:	de 2d       	mov	r29, r14
			}
		}

		if(GetVsyncCounter()>TIMEOUT){
    9482:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <GetVsyncCounter>
    9486:	89 35       	cpi	r24, 0x59	; 89
    9488:	92 40       	sbci	r25, 0x02	; 2
    948a:	10 f3       	brcs	.-60     	; 0x9450 <wifiGetPB+0x1a>
			return WIFI_TIMEOUT;
    948c:	81 e0       	ldi	r24, 0x01	; 1
    948e:	01 c0       	rjmp	.+2      	; 0x9492 <wifiGetPB+0x5c>
			}

			if(c==pgm_read_byte(p)){
				p++;
				if(pgm_read_byte(p)==0){
					return WIFI_OK;
    9490:	80 e0       	ldi	r24, 0x00	; 0
		if(GetVsyncCounter()>TIMEOUT){
			return WIFI_TIMEOUT;
		}
	}

}
    9492:	df 91       	pop	r29
    9494:	cf 91       	pop	r28
    9496:	1f 91       	pop	r17
    9498:	0f 91       	pop	r16
    949a:	ff 90       	pop	r15
    949c:	ef 90       	pop	r14
    949e:	08 95       	ret

000094a0 <wifiGetPBT>:

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    94a0:	cf 92       	push	r12
    94a2:	df 92       	push	r13
    94a4:	ef 92       	push	r14
    94a6:	ff 92       	push	r15
    94a8:	0f 93       	push	r16
    94aa:	1f 93       	push	r17
    94ac:	cf 93       	push	r28
    94ae:	df 93       	push	r29
    94b0:	f8 2e       	mov	r15, r24
    94b2:	e9 2e       	mov	r14, r25
    94b4:	8b 01       	movw	r16, r22
    94b6:	6a 01       	movw	r12, r20
    u8 c;
    s16 r;
    const char* p=str;
    char* buf=rxbuf;
    ClearVsyncCounter();
    94b8:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <ClearVsyncCounter>
}

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    u8 c;
    s16 r;
    const char* p=str;
    94bc:	cf 2d       	mov	r28, r15
    94be:	de 2d       	mov	r29, r14
    char* buf=rxbuf;
    ClearVsyncCounter();

    while(1){

        r=UartReadChar();
    94c0:	0e 94 43 3c 	call	0x7886	; 0x7886 <UartReadChar>
        if(r!=-1){
    94c4:	8f 3f       	cpi	r24, 0xFF	; 255
    94c6:	ef ef       	ldi	r30, 0xFF	; 255
    94c8:	9e 07       	cpc	r25, r30
    94ca:	99 f0       	breq	.+38     	; 0x94f2 <wifiGetPBT+0x52>

            c=r&(0xff);
    94cc:	28 2f       	mov	r18, r24

            if(buf!=NULL){
    94ce:	01 15       	cp	r16, r1
    94d0:	11 05       	cpc	r17, r1
    94d2:	19 f0       	breq	.+6      	; 0x94da <wifiGetPBT+0x3a>
                *buf=c;
    94d4:	f8 01       	movw	r30, r16
    94d6:	81 93       	st	Z+, r24
    94d8:	8f 01       	movw	r16, r30
                buf++;
            }

            if(c==pgm_read_byte(p)){
    94da:	fe 01       	movw	r30, r28
    94dc:	84 91       	lpm	r24, Z
    94de:	28 13       	cpse	r18, r24
    94e0:	06 c0       	rjmp	.+12     	; 0x94ee <wifiGetPBT+0x4e>
                p++;
    94e2:	21 96       	adiw	r28, 0x01	; 1
                if(pgm_read_byte(p)==0){
    94e4:	fe 01       	movw	r30, r28
    94e6:	84 91       	lpm	r24, Z
    94e8:	81 11       	cpse	r24, r1
    94ea:	03 c0       	rjmp	.+6      	; 0x94f2 <wifiGetPBT+0x52>
    94ec:	09 c0       	rjmp	.+18     	; 0x9500 <wifiGetPBT+0x60>
                    return WIFI_OK;
                }
            }else{
                //reset string compare
                p=str;
    94ee:	cf 2d       	mov	r28, r15
    94f0:	de 2d       	mov	r29, r14
            }
        }

        if(GetVsyncCounter()>wifi_timeout){
    94f2:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <GetVsyncCounter>
    94f6:	c8 16       	cp	r12, r24
    94f8:	d9 06       	cpc	r13, r25
    94fa:	10 f7       	brcc	.-60     	; 0x94c0 <wifiGetPBT+0x20>
            return WIFI_TIMEOUT;
    94fc:	81 e0       	ldi	r24, 0x01	; 1
    94fe:	01 c0       	rjmp	.+2      	; 0x9502 <wifiGetPBT+0x62>
            }

            if(c==pgm_read_byte(p)){
                p++;
                if(pgm_read_byte(p)==0){
                    return WIFI_OK;
    9500:	80 e0       	ldi	r24, 0x00	; 0
        if(GetVsyncCounter()>wifi_timeout){
            return WIFI_TIMEOUT;
        }
    }

}
    9502:	df 91       	pop	r29
    9504:	cf 91       	pop	r28
    9506:	1f 91       	pop	r17
    9508:	0f 91       	pop	r16
    950a:	ff 90       	pop	r15
    950c:	ef 90       	pop	r14
    950e:	df 90       	pop	r13
    9510:	cf 90       	pop	r12
    9512:	08 95       	ret

00009514 <wifiRequestP>:

	return WIFI_OK;
}


u8 wifiRequestP(const char* strToSend, const char* strToWait){
    9514:	cf 93       	push	r28
    9516:	df 93       	push	r29
    9518:	eb 01       	movw	r28, r22
	wifiSendP(strToSend);
    951a:	0e 94 82 49 	call	0x9304	; 0x9304 <wifiSendP>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    951e:	60 e0       	ldi	r22, 0x00	; 0
    9520:	70 e0       	ldi	r23, 0x00	; 0
    9522:	ce 01       	movw	r24, r28
    9524:	0e 94 1b 4a 	call	0x9436	; 0x9436 <wifiGetPB>
    9528:	91 e0       	ldi	r25, 0x01	; 1
    952a:	81 30       	cpi	r24, 0x01	; 1
    952c:	09 f0       	breq	.+2      	; 0x9530 <wifiRequestP+0x1c>
    952e:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    9530:	89 2f       	mov	r24, r25
    9532:	df 91       	pop	r29
    9534:	cf 91       	pop	r28
    9536:	08 95       	ret

00009538 <wifiRequest>:

u8 wifiRequest(char* strToSend, const char* strToWait){
    9538:	cf 93       	push	r28
    953a:	df 93       	push	r29
    953c:	eb 01       	movw	r28, r22
	wifiSend(strToSend);
    953e:	0e 94 a2 49 	call	0x9344	; 0x9344 <wifiSend>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    9542:	60 e0       	ldi	r22, 0x00	; 0
    9544:	70 e0       	ldi	r23, 0x00	; 0
    9546:	ce 01       	movw	r24, r28
    9548:	0e 94 1b 4a 	call	0x9436	; 0x9436 <wifiGetPB>
    954c:	91 e0       	ldi	r25, 0x01	; 1
    954e:	81 30       	cpi	r24, 0x01	; 1
    9550:	09 f0       	breq	.+2      	; 0x9554 <wifiRequest+0x1c>
    9552:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    9554:	89 2f       	mov	r24, r25
    9556:	df 91       	pop	r29
    9558:	cf 91       	pop	r28
    955a:	08 95       	ret

0000955c <wifiRequestPT>:

u8 wifiRequestPT(const char* strToSend, const char* strToWait, u16 wifi_timeout){
    955c:	0f 93       	push	r16
    955e:	1f 93       	push	r17
    9560:	cf 93       	push	r28
    9562:	df 93       	push	r29
    9564:	00 d0       	rcall	.+0      	; 0x9566 <wifiRequestPT+0xa>
    9566:	cd b7       	in	r28, 0x3d	; 61
    9568:	de b7       	in	r29, 0x3e	; 62
    956a:	8b 01       	movw	r16, r22
    wifiSendP(strToSend);
    956c:	49 83       	std	Y+1, r20	; 0x01
    956e:	5a 83       	std	Y+2, r21	; 0x02
    9570:	0e 94 82 49 	call	0x9304	; 0x9304 <wifiSendP>
    if(wifiGetPBT(strToWait, NULL, wifi_timeout)==WIFI_TIMEOUT){
    9574:	49 81       	ldd	r20, Y+1	; 0x01
    9576:	5a 81       	ldd	r21, Y+2	; 0x02
    9578:	60 e0       	ldi	r22, 0x00	; 0
    957a:	70 e0       	ldi	r23, 0x00	; 0
    957c:	c8 01       	movw	r24, r16
    957e:	0e 94 50 4a 	call	0x94a0	; 0x94a0 <wifiGetPBT>
    9582:	91 e0       	ldi	r25, 0x01	; 1
    9584:	81 30       	cpi	r24, 0x01	; 1
    9586:	09 f0       	breq	.+2      	; 0x958a <wifiRequestPT+0x2e>
    9588:	90 e0       	ldi	r25, 0x00	; 0
        return WIFI_TIMEOUT;
    }

    return WIFI_OK;
}
    958a:	89 2f       	mov	r24, r25
    958c:	0f 90       	pop	r0
    958e:	0f 90       	pop	r0
    9590:	df 91       	pop	r29
    9592:	cf 91       	pop	r28
    9594:	1f 91       	pop	r17
    9596:	0f 91       	pop	r16
    9598:	08 95       	ret

0000959a <wifiHWResetLow>:
void wifiHWResetLow()
{
    //reset module
	
	// Set Direction of port D to output
	DDRD|=(1<<PD3);
    959a:	53 9a       	sbi	0x0a, 3	; 10
	
	// SET Pin PD3 low on port D and wait 3 seconds
    PORTD&=~(1<<PD3);
    959c:	5b 98       	cbi	0x0b, 3	; 11
    959e:	08 95       	ret

000095a0 <wifiHWResetHigh>:
void wifiHWResetHigh()
{
    //reset module
	
	// Set Direction of port D to output
	DDRD|=(1<<PD3);
    95a0:	53 9a       	sbi	0x0a, 3	; 10
	
	// SET Pin PD3 high on port D
	WaitVsync(180);
    95a2:	84 eb       	ldi	r24, 0xB4	; 180
    95a4:	90 e0       	ldi	r25, 0x00	; 0
    95a6:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
    PORTD|=(1<<PD3);
    95aa:	5b 9a       	sbi	0x0b, 3	; 11
    95ac:	08 95       	ret

000095ae <initWifi>:
    76800  22      1.3
    115200 15      3.0
*/

const u16 bauds[] PROGMEM = {185,123,92,61,46,30,22,15};
u8 initWifi(){
    95ae:	1f 93       	push	r17
    95b0:	cf 93       	push	r28
    95b2:	df 93       	push	r29
    s8 i = 0;
    u8 result;
	wifiHWResetLow();
    95b4:	0e 94 cd 4a 	call	0x959a	; 0x959a <wifiHWResetLow>
	wifiHWResetHigh();
    95b8:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <wifiHWResetHigh>
    //UCSR0A=(1<<U2X0); // double speed mode
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    95bc:	86 e0       	ldi	r24, 0x06	; 6
    95be:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    95c2:	88 e1       	ldi	r24, 0x18	; 24
    95c4:	80 93 c1 00 	sts	0x00C1, r24
    95c8:	c3 e3       	ldi	r28, 0x33	; 51
    95ca:	d5 e0       	ldi	r29, 0x05	; 5
    do {
        UBRR0L=pgm_read_byte(((u8*) &(bauds[i])));
    95cc:	fe 01       	movw	r30, r28
    95ce:	84 91       	lpm	r24, Z
    95d0:	80 93 c4 00 	sts	0x00C4, r24
    95d4:	31 96       	adiw	r30, 0x01	; 1
        UBRR0H=pgm_read_byte(((u8*) &(bauds[i]))+1);
    95d6:	e4 91       	lpm	r30, Z
    95d8:	e0 93 c5 00 	sts	0x00C5, r30
        WaitVsync(1);
    95dc:	81 e0       	ldi	r24, 0x01	; 1
    95de:	90 e0       	ldi	r25, 0x00	; 0
    95e0:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
        result = wifiRequestPT(PSTR("AT\r\n"),PSTR("OK\r\n"), 30); 
    95e4:	4e e1       	ldi	r20, 0x1E	; 30
    95e6:	50 e0       	ldi	r21, 0x00	; 0
    95e8:	69 e5       	ldi	r22, 0x59	; 89
    95ea:	72 e0       	ldi	r23, 0x02	; 2
    95ec:	84 e5       	ldi	r24, 0x54	; 84
    95ee:	92 e0       	ldi	r25, 0x02	; 2
    95f0:	0e 94 ae 4a 	call	0x955c	; 0x955c <wifiRequestPT>
    95f4:	18 2f       	mov	r17, r24
        i++;
    } while ((result != WIFI_OK) && (i < 8));
    95f6:	88 23       	and	r24, r24
    95f8:	31 f0       	breq	.+12     	; 0x9606 <initWifi+0x58>
    95fa:	22 96       	adiw	r28, 0x02	; 2
    95fc:	f5 e0       	ldi	r31, 0x05	; 5
    95fe:	c3 34       	cpi	r28, 0x43	; 67
    9600:	df 07       	cpc	r29, r31
    9602:	21 f7       	brne	.-56     	; 0x95cc <initWifi+0x1e>
    9604:	19 c0       	rjmp	.+50     	; 0x9638 <initWifi+0x8a>
    if (result == WIFI_OK) {
        result = wifiRequestPT(PSTR("AT+UART_CUR=19200,8,1,0,0\r\n"),PSTR("OK\r\n"), 2*60); 
    9606:	48 e7       	ldi	r20, 0x78	; 120
    9608:	50 e0       	ldi	r21, 0x00	; 0
    960a:	6f e4       	ldi	r22, 0x4F	; 79
    960c:	72 e0       	ldi	r23, 0x02	; 2
    960e:	83 e3       	ldi	r24, 0x33	; 51
    9610:	92 e0       	ldi	r25, 0x02	; 2
    9612:	0e 94 ae 4a 	call	0x955c	; 0x955c <wifiRequestPT>
    9616:	18 2f       	mov	r17, r24
        if (result == WIFI_OK) {
    9618:	81 11       	cpse	r24, r1
    961a:	0e c0       	rjmp	.+28     	; 0x9638 <initWifi+0x8a>
            UBRR0L=pgm_read_byte(((u8*) &(bauds[2])));
    961c:	e7 e3       	ldi	r30, 0x37	; 55
    961e:	f5 e0       	ldi	r31, 0x05	; 5
    9620:	e4 91       	lpm	r30, Z
    9622:	e0 93 c4 00 	sts	0x00C4, r30
            UBRR0H=pgm_read_byte(((u8*) &(bauds[2]))+1); 
    9626:	e8 e3       	ldi	r30, 0x38	; 56
    9628:	f5 e0       	ldi	r31, 0x05	; 5
    962a:	e4 91       	lpm	r30, Z
    962c:	e0 93 c5 00 	sts	0x00C5, r30
            WaitVsync(1);
    9630:	81 e0       	ldi	r24, 0x01	; 1
    9632:	90 e0       	ldi	r25, 0x00	; 0
    9634:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
        }
    }
    return result;
}
    9638:	81 2f       	mov	r24, r17
    963a:	df 91       	pop	r29
    963c:	cf 91       	pop	r28
    963e:	1f 91       	pop	r17
    9640:	08 95       	ret

00009642 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    9642:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9644:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9646:	93 81       	ldd	r25, Z+3	; 0x03
    9648:	9f 5f       	subi	r25, 0xFF	; 255
    964a:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    964c:	22 81       	ldd	r18, Z+2	; 0x02
    964e:	80 81       	ld	r24, Z
    9650:	92 17       	cp	r25, r18
    9652:	38 f4       	brcc	.+14     	; 0x9662 <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    9654:	e8 0f       	add	r30, r24
    9656:	f1 1d       	adc	r31, r1
    9658:	e8 0f       	add	r30, r24
    965a:	f1 1d       	adc	r31, r1
    965c:	86 81       	ldd	r24, Z+6	; 0x06
    965e:	97 81       	ldd	r25, Z+7	; 0x07
    9660:	08 95       	ret
	}
	anim->frame_count = 0;
    9662:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9664:	90 e0       	ldi	r25, 0x00	; 0
    9666:	01 96       	adiw	r24, 0x01	; 1
    9668:	61 81       	ldd	r22, Z+1	; 0x01
    966a:	70 e0       	ldi	r23, 0x00	; 0
    966c:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    9670:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9672:	81 11       	cpse	r24, r1
    9674:	02 c0       	rjmp	.+4      	; 0x967a <LBGetNextFrame+0x38>
    9676:	21 e0       	ldi	r18, 0x01	; 1
    9678:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    967a:	99 27       	eor	r25, r25
    967c:	03 96       	adiw	r24, 0x03	; 3
    967e:	88 0f       	add	r24, r24
    9680:	99 1f       	adc	r25, r25
    9682:	e8 0f       	add	r30, r24
    9684:	f9 1f       	adc	r31, r25
    9686:	80 81       	ld	r24, Z
    9688:	91 81       	ldd	r25, Z+1	; 0x01
}
    968a:	08 95       	ret

0000968c <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    968c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    968e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9690:	93 81       	ldd	r25, Z+3	; 0x03
    9692:	9f 5f       	subi	r25, 0xFF	; 255
    9694:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9696:	22 81       	ldd	r18, Z+2	; 0x02
    9698:	80 81       	ld	r24, Z
    969a:	92 17       	cp	r25, r18
    969c:	e0 f0       	brcs	.+56     	; 0x96d6 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    969e:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    96a0:	95 81       	ldd	r25, Z+5	; 0x05
    96a2:	99 23       	and	r25, r25
    96a4:	49 f0       	breq	.+18     	; 0x96b8 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    96a6:	81 50       	subi	r24, 0x01	; 1
    96a8:	10 f0       	brcs	.+4      	; 0x96ae <LBGetNextFrameReverse+0x22>
    96aa:	80 83       	st	Z, r24
    96ac:	13 c0       	rjmp	.+38     	; 0x96d4 <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    96ae:	10 82       	st	Z, r1
			anim->looped = 1;
    96b0:	81 e0       	ldi	r24, 0x01	; 1
    96b2:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    96b4:	15 82       	std	Z+5, r1	; 0x05
    96b6:	0e c0       	rjmp	.+28     	; 0x96d4 <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    96b8:	21 81       	ldd	r18, Z+1	; 0x01
    96ba:	90 e0       	ldi	r25, 0x00	; 0
    96bc:	01 96       	adiw	r24, 0x01	; 1
    96be:	62 2f       	mov	r22, r18
    96c0:	70 e0       	ldi	r23, 0x00	; 0
    96c2:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    96c6:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    96c8:	81 11       	cpse	r24, r1
    96ca:	04 c0       	rjmp	.+8      	; 0x96d4 <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    96cc:	81 e0       	ldi	r24, 0x01	; 1
    96ce:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    96d0:	21 50       	subi	r18, 0x01	; 1
    96d2:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    96d4:	80 81       	ld	r24, Z
    96d6:	e8 0f       	add	r30, r24
    96d8:	f1 1d       	adc	r31, r1
    96da:	e8 0f       	add	r30, r24
    96dc:	f1 1d       	adc	r31, r1
    96de:	86 81       	ldd	r24, Z+6	; 0x06
    96e0:	97 81       	ldd	r25, Z+7	; 0x07
}
    96e2:	08 95       	ret

000096e4 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    96e4:	0f 93       	push	r16
    96e6:	1f 93       	push	r17
    96e8:	cf 93       	push	r28
    96ea:	df 93       	push	r29
    96ec:	1f 92       	push	r1
    96ee:	cd b7       	in	r28, 0x3d	; 61
    96f0:	de b7       	in	r29, 0x3e	; 62
    96f2:	8c 01       	movw	r16, r24
	p->held = ReadJoypad(index);
    96f4:	86 2f       	mov	r24, r22
    96f6:	69 83       	std	Y+1, r22	; 0x01
    96f8:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ReadJoypad>
    96fc:	d8 01       	movw	r26, r16
    96fe:	15 96       	adiw	r26, 0x05	; 5
    9700:	9c 93       	st	X, r25
    9702:	8e 93       	st	-X, r24
    9704:	14 97       	sbiw	r26, 0x04	; 4
    9706:	69 81       	ldd	r22, Y+1	; 0x01
    9708:	e6 2f       	mov	r30, r22
    970a:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    970c:	00 97       	sbiw	r24, 0x00	; 0
    970e:	51 f0       	breq	.+20     	; 0x9724 <LBGetJoyPadState+0x40>
    9710:	df 01       	movw	r26, r30
    9712:	aa 0f       	add	r26, r26
    9714:	bb 1f       	adc	r27, r27
    9716:	a4 5a       	subi	r26, 0xA4	; 164
    9718:	b5 4f       	sbci	r27, 0xF5	; 245
    971a:	2d 91       	ld	r18, X+
    971c:	3c 91       	ld	r19, X
    971e:	82 17       	cp	r24, r18
    9720:	93 07       	cpc	r25, r19
    9722:	21 f0       	breq	.+8      	; 0x972c <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9724:	d8 01       	movw	r26, r16
    9726:	16 96       	adiw	r26, 0x06	; 6
    9728:	1c 92       	st	X, r1
    972a:	07 c0       	rjmp	.+14     	; 0x973a <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    972c:	d8 01       	movw	r26, r16
    972e:	16 96       	adiw	r26, 0x06	; 6
    9730:	2c 91       	ld	r18, X
    9732:	16 97       	sbiw	r26, 0x06	; 6
    9734:	2f 5f       	subi	r18, 0xFF	; 255
    9736:	16 96       	adiw	r26, 0x06	; 6
    9738:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    973a:	ee 0f       	add	r30, r30
    973c:	ff 1f       	adc	r31, r31
    973e:	e4 5a       	subi	r30, 0xA4	; 164
    9740:	f5 4f       	sbci	r31, 0xF5	; 245
    9742:	20 81       	ld	r18, Z
    9744:	31 81       	ldd	r19, Z+1	; 0x01
    9746:	a9 01       	movw	r20, r18
    9748:	40 95       	com	r20
    974a:	50 95       	com	r21
    974c:	48 23       	and	r20, r24
    974e:	59 23       	and	r21, r25
    9750:	d8 01       	movw	r26, r16
    9752:	11 96       	adiw	r26, 0x01	; 1
    9754:	5c 93       	st	X, r21
    9756:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9758:	ac 01       	movw	r20, r24
    975a:	40 95       	com	r20
    975c:	50 95       	com	r21
    975e:	24 23       	and	r18, r20
    9760:	35 23       	and	r19, r21
    9762:	13 96       	adiw	r26, 0x03	; 3
    9764:	3c 93       	st	X, r19
    9766:	2e 93       	st	-X, r18
    9768:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    976a:	91 83       	std	Z+1, r25	; 0x01
    976c:	80 83       	st	Z, r24
}
    976e:	0f 90       	pop	r0
    9770:	df 91       	pop	r29
    9772:	cf 91       	pop	r28
    9774:	1f 91       	pop	r17
    9776:	0f 91       	pop	r16
    9778:	08 95       	ret

0000977a <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    977a:	af 92       	push	r10
    977c:	bf 92       	push	r11
    977e:	cf 92       	push	r12
    9780:	df 92       	push	r13
    9782:	ef 92       	push	r14
    9784:	ff 92       	push	r15
    9786:	0f 93       	push	r16
    9788:	1f 93       	push	r17
    978a:	cf 93       	push	r28
    978c:	df 93       	push	r29
    978e:	1f 92       	push	r1
    9790:	cd b7       	in	r28, 0x3d	; 61
    9792:	de b7       	in	r29, 0x3e	; 62
    9794:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    9796:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    9798:	c6 2e       	mov	r12, r22
    979a:	d1 2c       	mov	r13, r1
    979c:	90 e0       	ldi	r25, 0x00	; 0
    979e:	5c 01       	movw	r10, r24
    97a0:	a4 1a       	sub	r10, r20
    97a2:	b5 0a       	sbc	r11, r21
    97a4:	80 2f       	mov	r24, r16
    97a6:	8e 19       	sub	r24, r14
	p_prev[index] = p->held;
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    97a8:	82 17       	cp	r24, r18
    97aa:	60 f4       	brcc	.+24     	; 0x97c4 <LBPrintStr+0x4a>
    97ac:	c5 01       	movw	r24, r10
    97ae:	80 0f       	add	r24, r16
    97b0:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    97b2:	f8 01       	movw	r30, r16
    97b4:	41 91       	ld	r20, Z+
    97b6:	8f 01       	movw	r16, r30
    97b8:	b6 01       	movw	r22, r12
    97ba:	29 83       	std	Y+1, r18	; 0x01
    97bc:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
    97c0:	29 81       	ldd	r18, Y+1	; 0x01
    97c2:	f0 cf       	rjmp	.-32     	; 0x97a4 <LBPrintStr+0x2a>
	}
}
    97c4:	0f 90       	pop	r0
    97c6:	df 91       	pop	r29
    97c8:	cf 91       	pop	r28
    97ca:	1f 91       	pop	r17
    97cc:	0f 91       	pop	r16
    97ce:	ff 90       	pop	r15
    97d0:	ef 90       	pop	r14
    97d2:	df 90       	pop	r13
    97d4:	cf 90       	pop	r12
    97d6:	bf 90       	pop	r11
    97d8:	af 90       	pop	r10
    97da:	08 95       	ret

000097dc <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u16 width1, u16 height1,
						 u16 x2, u16 y2, u16 width2, u16 height2)
{
    97dc:	af 92       	push	r10
    97de:	bf 92       	push	r11
    97e0:	cf 92       	push	r12
    97e2:	df 92       	push	r13
    97e4:	ef 92       	push	r14
    97e6:	ff 92       	push	r15
    97e8:	0f 93       	push	r16
    97ea:	1f 93       	push	r17
    97ec:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    97ee:	26 0f       	add	r18, r22
    97f0:	37 1f       	adc	r19, r23
    97f2:	e2 16       	cp	r14, r18
    97f4:	f3 06       	cpc	r15, r19
    97f6:	80 f4       	brcc	.+32     	; 0x9818 <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    97f8:	ae 0c       	add	r10, r14
    97fa:	bf 1c       	adc	r11, r15
    97fc:	6a 15       	cp	r22, r10
    97fe:	7b 05       	cpc	r23, r11
    9800:	58 f4       	brcc	.+22     	; 0x9818 <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    9802:	48 0f       	add	r20, r24
    9804:	59 1f       	adc	r21, r25
    9806:	04 17       	cp	r16, r20
    9808:	15 07       	cpc	r17, r21
    980a:	30 f4       	brcc	.+12     	; 0x9818 <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    980c:	c0 0e       	add	r12, r16
    980e:	d1 1e       	adc	r13, r17
    9810:	81 e0       	ldi	r24, 0x01	; 1
    9812:	ec 15       	cp	r30, r12
    9814:	fd 05       	cpc	r31, r13
    9816:	08 f0       	brcs	.+2      	; 0x981a <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u16 width1, u16 height1,
						 u16 x2, u16 y2, u16 width2, u16 height2)
{
	if (y1 + height1 <= y2) return 0;
    9818:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    981a:	1f 91       	pop	r17
    981c:	0f 91       	pop	r16
    981e:	ff 90       	pop	r15
    9820:	ef 90       	pop	r14
    9822:	df 90       	pop	r13
    9824:	cf 90       	pop	r12
    9826:	bf 90       	pop	r11
    9828:	af 90       	pop	r10
    982a:	08 95       	ret

0000982c <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    982c:	1f 93       	push	r17
    982e:	cf 93       	push	r28
    9830:	df 93       	push	r29
    9832:	1f 92       	push	r1
    9834:	cd b7       	in	r28, 0x3d	; 61
    9836:	de b7       	in	r29, 0x3e	; 62
    9838:	18 2f       	mov	r17, r24
    u8 tmp = GetPrngNumber(0) % 256;
    983a:	80 e0       	ldi	r24, 0x00	; 0
    983c:	90 e0       	ldi	r25, 0x00	; 0
    983e:	69 83       	std	Y+1, r22	; 0x01
    9840:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <GetPrngNumber>
    9844:	99 27       	eor	r25, r25
    return ((tmp) % (to - from + 1)) + from;
    9846:	69 81       	ldd	r22, Y+1	; 0x01
    9848:	70 e0       	ldi	r23, 0x00	; 0
    984a:	61 1b       	sub	r22, r17
    984c:	71 09       	sbc	r23, r1
    984e:	6f 5f       	subi	r22, 0xFF	; 255
    9850:	7f 4f       	sbci	r23, 0xFF	; 255
    9852:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
}
    9856:	81 0f       	add	r24, r17
    9858:	0f 90       	pop	r0
    985a:	df 91       	pop	r29
    985c:	cf 91       	pop	r28
    985e:	1f 91       	pop	r17
    9860:	08 95       	ret

00009862 <LBWaitSeconds>:

void LBWaitSeconds(u16 seconds, u8 netMessageSize)
{
    9862:	0f 93       	push	r16
    9864:	1f 93       	push	r17
    9866:	cf 93       	push	r28
    9868:	df 93       	push	r29
    986a:	d6 2f       	mov	r29, r22
	seconds *= 60;
    986c:	2c e3       	ldi	r18, 0x3C	; 60
    986e:	28 9f       	mul	r18, r24
    9870:	80 01       	movw	r16, r0
    9872:	29 9f       	mul	r18, r25
    9874:	10 0d       	add	r17, r0
    9876:	11 24       	eor	r1, r1
	for(u8 i = 0; i < seconds; i++)
    9878:	c0 e0       	ldi	r28, 0x00	; 0
    987a:	2c 2f       	mov	r18, r28
    987c:	30 e0       	ldi	r19, 0x00	; 0
    987e:	20 17       	cp	r18, r16
    9880:	31 07       	cpc	r19, r17
    9882:	48 f4       	brcc	.+18     	; 0x9896 <LBWaitSeconds+0x34>
	{
		WaitVsync(1);
    9884:	81 e0       	ldi	r24, 0x01	; 1
    9886:	90 e0       	ldi	r25, 0x00	; 0
    9888:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
		wifiGetAndDiscard(netMessageSize);
    988c:	8d 2f       	mov	r24, r29
    988e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <wifiGetAndDiscard>
}

void LBWaitSeconds(u16 seconds, u8 netMessageSize)
{
	seconds *= 60;
	for(u8 i = 0; i < seconds; i++)
    9892:	cf 5f       	subi	r28, 0xFF	; 255
    9894:	f2 cf       	rjmp	.-28     	; 0x987a <LBWaitSeconds+0x18>
		wifiGetAndDiscard(netMessageSize);
#if JAMMA
		handle_coin_insert();
#endif
	}
}
    9896:	df 91       	pop	r29
    9898:	cf 91       	pop	r28
    989a:	1f 91       	pop	r17
    989c:	0f 91       	pop	r16
    989e:	08 95       	ret

000098a0 <LBHideAllSprites>:

void LBHideAllSprites()
{
    98a0:	e8 ea       	ldi	r30, 0xA8	; 168
    98a2:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = OFF_SCREEN;
    98a4:	80 ef       	ldi	r24, 0xF0	; 240
    98a6:	80 83       	st	Z, r24
    98a8:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    98aa:	94 e0       	ldi	r25, 0x04	; 4
    98ac:	e0 3d       	cpi	r30, 0xD0	; 208
    98ae:	f9 07       	cpc	r31, r25
    98b0:	d1 f7       	brne	.-12     	; 0x98a6 <LBHideAllSprites+0x6>
	{
		sprites[i].x = OFF_SCREEN;
	}
}
    98b2:	08 95       	ret

000098b4 <LBPlaySound>:


void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
    98b4:	82 2f       	mov	r24, r18
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    98b6:	26 30       	cpi	r18, 0x06	; 6
    98b8:	11 f4       	brne	.+4      	; 0x98be <LBPlaySound+0xa>
    98ba:	0c 94 7e 49 	jmp	0x92fc	; 0x92fc <LBPlaySound.part.5>
    98be:	46 2b       	or	r20, r22
	else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
    98c0:	40 fd       	sbrc	r20, 0
    98c2:	04 c0       	rjmp	.+8      	; 0x98cc <LBPlaySound+0x18>
    98c4:	41 e0       	ldi	r20, 0x01	; 1
    98c6:	6f ef       	ldi	r22, 0xFF	; 255
    98c8:	0c 94 f9 3d 	jmp	0x7bf2	; 0x7bf2 <TriggerFx>
    98cc:	08 95       	ret

000098ce <sendNetMessage>:
u8 activateNet() {
	return initWifi();
}

u8 sendNetMessage(NetMessage* msg) {
	return wifiSendBinary((char *) msg, sizeof(*msg));
    98ce:	6c e1       	ldi	r22, 0x1C	; 28
    98d0:	0c 94 be 49 	jmp	0x937c	; 0x937c <wifiSendBinary>

000098d4 <getNetMessage>:
}

u8 getNetMessage(NetMessage* msg) {
	return wifiGetIfAvailable((char*)msg, sizeof(*msg));
    98d4:	6c e1       	ldi	r22, 0x1C	; 28
    98d6:	0c 94 e0 49 	jmp	0x93c0	; 0x93c0 <wifiGetIfAvailable>

000098da <hostNetGame>:
}

u8 hostNetGame(char* ssid) {
    98da:	ef 92       	push	r14
    98dc:	ff 92       	push	r15
    98de:	0f 93       	push	r16
    98e0:	1f 93       	push	r17
    98e2:	cf 93       	push	r28
    98e4:	df 93       	push	r29
    98e6:	cd b7       	in	r28, 0x3d	; 61
    98e8:	de b7       	in	r29, 0x3e	; 62
    98ea:	c0 54       	subi	r28, 0x40	; 64
    98ec:	d1 09       	sbc	r29, r1
    98ee:	0f b6       	in	r0, 0x3f	; 63
    98f0:	f8 94       	cli
    98f2:	de bf       	out	0x3e, r29	; 62
    98f4:	0f be       	out	0x3f, r0	; 63
    98f6:	cd bf       	out	0x3d, r28	; 61
    98f8:	8c 01       	movw	r16, r24
	char buf[64];
	
	// Set SoftAP mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=2\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    98fa:	6e e2       	ldi	r22, 0x2E	; 46
    98fc:	72 e0       	ldi	r23, 0x02	; 2
    98fe:	8c e1       	ldi	r24, 0x1C	; 28
    9900:	92 e0       	ldi	r25, 0x02	; 2
    9902:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    9906:	81 11       	cpse	r24, r1
    9908:	42 c0       	rjmp	.+132    	; 0x998e <hostNetGame+0xb4>
	// Set SopftAP IP address
	if (wifiRequestP(PSTR("AT+CIPAP_CUR=\"192.168.4.1\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    990a:	67 e1       	ldi	r22, 0x17	; 23
    990c:	72 e0       	ldi	r23, 0x02	; 2
    990e:	8a ef       	ldi	r24, 0xFA	; 250
    9910:	91 e0       	ldi	r25, 0x01	; 1
    9912:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    9916:	81 11       	cpse	r24, r1
    9918:	3a c0       	rjmp	.+116    	; 0x998e <hostNetGame+0xb4>
	// Get SoftAP MAC address...
	wifiSendP(PSTR("AT+CIPAPMAC_CUR?\r\n"));
    991a:	87 ee       	ldi	r24, 0xE7	; 231
    991c:	91 e0       	ldi	r25, 0x01	; 1
    991e:	0e 94 82 49 	call	0x9304	; 0x9304 <wifiSendP>
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
    9922:	ce 01       	movw	r24, r28
    9924:	01 96       	adiw	r24, 0x01	; 1
    9926:	7c 01       	movw	r14, r24
    9928:	bc 01       	movw	r22, r24
    992a:	82 ee       	ldi	r24, 0xE2	; 226
    992c:	91 e0       	ldi	r25, 0x01	; 1
    992e:	0e 94 1b 4a 	call	0x9436	; 0x9436 <wifiGetPB>
    9932:	81 30       	cpi	r24, 0x01	; 1
    9934:	91 f0       	breq	.+36     	; 0x995a <hostNetGame+0x80>
		ssid[0] = 'T';
    9936:	84 e5       	ldi	r24, 0x54	; 84
    9938:	f8 01       	movw	r30, r16
    993a:	80 83       	st	Z, r24
		ssid[1] = 'F';
    993c:	86 e4       	ldi	r24, 0x46	; 70
    993e:	81 83       	std	Z+1, r24	; 0x01
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9940:	8c a5       	ldd	r24, Y+44	; 0x2c
    9942:	82 83       	std	Z+2, r24	; 0x02
		   ssid[idx++] = buf[i+1];
    9944:	8d a5       	ldd	r24, Y+45	; 0x2d
    9946:	83 83       	std	Z+3, r24	; 0x03
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9948:	8f a5       	ldd	r24, Y+47	; 0x2f
    994a:	84 83       	std	Z+4, r24	; 0x04
		   ssid[idx++] = buf[i+1];
    994c:	88 a9       	ldd	r24, Y+48	; 0x30
    994e:	85 83       	std	Z+5, r24	; 0x05
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9950:	8a a9       	ldd	r24, Y+50	; 0x32
    9952:	86 83       	std	Z+6, r24	; 0x06
		   ssid[idx++] = buf[i+1];
    9954:	8b a9       	ldd	r24, Y+51	; 0x33
    9956:	87 83       	std	Z+7, r24	; 0x07
		}
		ssid[8] = 0;
    9958:	10 86       	std	Z+8, r1	; 0x08
	}
	ssid = strupr(ssid);
    995a:	c8 01       	movw	r24, r16
    995c:	0e 94 3c 71 	call	0xe278	; 0xe278 <strupr>
	sprintf(buf, "AT+CWSAP_CUR=\"%s\",\"T4nkFuN3t\",5,3,1\r\n", ssid);
    9960:	9f 93       	push	r25
    9962:	8f 93       	push	r24
    9964:	8d e0       	ldi	r24, 0x0D	; 13
    9966:	91 e0       	ldi	r25, 0x01	; 1
    9968:	9f 93       	push	r25
    996a:	8f 93       	push	r24
    996c:	ff 92       	push	r15
    996e:	ef 92       	push	r14
    9970:	0e 94 46 71 	call	0xe28c	; 0xe28c <sprintf>
	
	// Setup local access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9974:	6d ed       	ldi	r22, 0xDD	; 221
    9976:	71 e0       	ldi	r23, 0x01	; 1
    9978:	c7 01       	movw	r24, r14
    997a:	0e 94 9c 4a 	call	0x9538	; 0x9538 <wifiRequest>
    997e:	0f 90       	pop	r0
    9980:	0f 90       	pop	r0
    9982:	0f 90       	pop	r0
    9984:	0f 90       	pop	r0
    9986:	0f 90       	pop	r0
    9988:	0f 90       	pop	r0
    998a:	88 23       	and	r24, r24
    998c:	11 f0       	breq	.+4      	; 0x9992 <hostNetGame+0xb8>
    998e:	91 e0       	ldi	r25, 0x01	; 1
    9990:	1a c0       	rjmp	.+52     	; 0x99c6 <hostNetGame+0xec>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.2\",1001,2233,0\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9992:	68 ed       	ldi	r22, 0xD8	; 216
    9994:	71 e0       	ldi	r23, 0x01	; 1
    9996:	8a ea       	ldi	r24, 0xAA	; 170
    9998:	91 e0       	ldi	r25, 0x01	; 1
    999a:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    999e:	81 11       	cpse	r24, r1
    99a0:	f6 cf       	rjmp	.-20     	; 0x998e <hostNetGame+0xb4>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    99a2:	65 ea       	ldi	r22, 0xA5	; 165
    99a4:	71 e0       	ldi	r23, 0x01	; 1
    99a6:	86 e9       	ldi	r24, 0x96	; 150
    99a8:	91 e0       	ldi	r25, 0x01	; 1
    99aa:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    99ae:	81 11       	cpse	r24, r1
    99b0:	ee cf       	rjmp	.-36     	; 0x998e <hostNetGame+0xb4>
	if (wifiRequestP(PSTR("AT+CIPSEND\r\n"),PSTR("OK\r\n\r\n>")) != WIFI_OK) return WIFI_TIMEOUT;
    99b2:	6e e8       	ldi	r22, 0x8E	; 142
    99b4:	71 e0       	ldi	r23, 0x01	; 1
    99b6:	81 e8       	ldi	r24, 0x81	; 129
    99b8:	91 e0       	ldi	r25, 0x01	; 1
    99ba:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    99be:	91 e0       	ldi	r25, 0x01	; 1
    99c0:	81 11       	cpse	r24, r1
    99c2:	01 c0       	rjmp	.+2      	; 0x99c6 <hostNetGame+0xec>
    99c4:	90 e0       	ldi	r25, 0x00	; 0
	return WIFI_OK;
}
    99c6:	89 2f       	mov	r24, r25
    99c8:	c0 5c       	subi	r28, 0xC0	; 192
    99ca:	df 4f       	sbci	r29, 0xFF	; 255
    99cc:	0f b6       	in	r0, 0x3f	; 63
    99ce:	f8 94       	cli
    99d0:	de bf       	out	0x3e, r29	; 62
    99d2:	0f be       	out	0x3f, r0	; 63
    99d4:	cd bf       	out	0x3d, r28	; 61
    99d6:	df 91       	pop	r29
    99d8:	cf 91       	pop	r28
    99da:	1f 91       	pop	r17
    99dc:	0f 91       	pop	r16
    99de:	ff 90       	pop	r15
    99e0:	ef 90       	pop	r14
    99e2:	08 95       	ret

000099e4 <joinNetGame>:

u8 joinNetGame(char* ssid) {
    99e4:	0f 93       	push	r16
    99e6:	1f 93       	push	r17
    99e8:	cf 93       	push	r28
    99ea:	df 93       	push	r29
    99ec:	cd b7       	in	r28, 0x3d	; 61
    99ee:	de b7       	in	r29, 0x3e	; 62
    99f0:	a6 97       	sbiw	r28, 0x26	; 38
    99f2:	0f b6       	in	r0, 0x3f	; 63
    99f4:	f8 94       	cli
    99f6:	de bf       	out	0x3e, r29	; 62
    99f8:	0f be       	out	0x3f, r0	; 63
    99fa:	cd bf       	out	0x3d, r28	; 61
	char buf[38];
	
	sprintf(buf, "AT+CWJAP_CUR=\"%s\",\"T4nkFuN3t\"\r\n", ssid);
    99fc:	9f 93       	push	r25
    99fe:	8f 93       	push	r24
    9a00:	83 e3       	ldi	r24, 0x33	; 51
    9a02:	91 e0       	ldi	r25, 0x01	; 1
    9a04:	9f 93       	push	r25
    9a06:	8f 93       	push	r24
    9a08:	8e 01       	movw	r16, r28
    9a0a:	0f 5f       	subi	r16, 0xFF	; 255
    9a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    9a0e:	1f 93       	push	r17
    9a10:	0f 93       	push	r16
    9a12:	0e 94 46 71 	call	0xe28c	; 0xe28c <sprintf>
	
	// Set Station mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a16:	6c e7       	ldi	r22, 0x7C	; 124
    9a18:	71 e0       	ldi	r23, 0x01	; 1
    9a1a:	8a e6       	ldi	r24, 0x6A	; 106
    9a1c:	91 e0       	ldi	r25, 0x01	; 1
    9a1e:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    9a22:	0f 90       	pop	r0
    9a24:	0f 90       	pop	r0
    9a26:	0f 90       	pop	r0
    9a28:	0f 90       	pop	r0
    9a2a:	0f 90       	pop	r0
    9a2c:	0f 90       	pop	r0
    9a2e:	88 23       	and	r24, r24
    9a30:	11 f0       	breq	.+4      	; 0x9a36 <joinNetGame+0x52>
    9a32:	91 e0       	ldi	r25, 0x01	; 1
    9a34:	29 c0       	rjmp	.+82     	; 0x9a88 <joinNetGame+0xa4>
	// Connect to access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a36:	65 e6       	ldi	r22, 0x65	; 101
    9a38:	71 e0       	ldi	r23, 0x01	; 1
    9a3a:	c8 01       	movw	r24, r16
    9a3c:	0e 94 9c 4a 	call	0x9538	; 0x9538 <wifiRequest>
    9a40:	81 11       	cpse	r24, r1
    9a42:	f7 cf       	rjmp	.-18     	; 0x9a32 <joinNetGame+0x4e>
	// Set station IP address
	if (wifiRequestP(PSTR("AT+CIPSTA_CUR=\"192.168.4.2\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a44:	60 e6       	ldi	r22, 0x60	; 96
    9a46:	71 e0       	ldi	r23, 0x01	; 1
    9a48:	82 e4       	ldi	r24, 0x42	; 66
    9a4a:	91 e0       	ldi	r25, 0x01	; 1
    9a4c:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    9a50:	81 11       	cpse	r24, r1
    9a52:	ef cf       	rjmp	.-34     	; 0x9a32 <joinNetGame+0x4e>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.1\",2233,1001\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a54:	6d e3       	ldi	r22, 0x3D	; 61
    9a56:	71 e0       	ldi	r23, 0x01	; 1
    9a58:	81 e1       	ldi	r24, 0x11	; 17
    9a5a:	91 e0       	ldi	r25, 0x01	; 1
    9a5c:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    9a60:	81 11       	cpse	r24, r1
    9a62:	e7 cf       	rjmp	.-50     	; 0x9a32 <joinNetGame+0x4e>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a64:	6c e0       	ldi	r22, 0x0C	; 12
    9a66:	71 e0       	ldi	r23, 0x01	; 1
    9a68:	8d ef       	ldi	r24, 0xFD	; 253
    9a6a:	90 e0       	ldi	r25, 0x00	; 0
    9a6c:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    9a70:	81 11       	cpse	r24, r1
    9a72:	df cf       	rjmp	.-66     	; 0x9a32 <joinNetGame+0x4e>
	if (wifiRequestP(PSTR("AT+CIPSEND\r\n"),PSTR("OK\r\n\r\n>")) != WIFI_OK) return WIFI_TIMEOUT;
    9a74:	65 ef       	ldi	r22, 0xF5	; 245
    9a76:	70 e0       	ldi	r23, 0x00	; 0
    9a78:	88 ee       	ldi	r24, 0xE8	; 232
    9a7a:	90 e0       	ldi	r25, 0x00	; 0
    9a7c:	0e 94 8a 4a 	call	0x9514	; 0x9514 <wifiRequestP>
    9a80:	91 e0       	ldi	r25, 0x01	; 1
    9a82:	81 11       	cpse	r24, r1
    9a84:	01 c0       	rjmp	.+2      	; 0x9a88 <joinNetGame+0xa4>
    9a86:	90 e0       	ldi	r25, 0x00	; 0
	return WIFI_OK;
}
    9a88:	89 2f       	mov	r24, r25
    9a8a:	a6 96       	adiw	r28, 0x26	; 38
    9a8c:	0f b6       	in	r0, 0x3f	; 63
    9a8e:	f8 94       	cli
    9a90:	de bf       	out	0x3e, r29	; 62
    9a92:	0f be       	out	0x3f, r0	; 63
    9a94:	cd bf       	out	0x3d, r28	; 61
    9a96:	df 91       	pop	r29
    9a98:	cf 91       	pop	r28
    9a9a:	1f 91       	pop	r17
    9a9c:	0f 91       	pop	r16
    9a9e:	08 95       	ret

00009aa0 <init_scores>:
struct EepromBlockStruct scores;

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    9aa0:	2b e8       	ldi	r18, 0x8B	; 139
    9aa2:	30 e0       	ldi	r19, 0x00	; 0
    9aa4:	fc 01       	movw	r30, r24
    9aa6:	21 93       	st	Z+, r18
    9aa8:	31 93       	st	Z+, r19
    9aaa:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    9aac:	4e e1       	ldi	r20, 0x1E	; 30
    9aae:	50 e0       	ldi	r21, 0x00	; 0
    9ab0:	6f ec       	ldi	r22, 0xCF	; 207
    9ab2:	72 e0       	ldi	r23, 0x02	; 2
    9ab4:	0c 94 28 71 	jmp	0xe250	; 0xe250 <memcpy_P>

00009ab8 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    9ab8:	2a e8       	ldi	r18, 0x8A	; 138
    9aba:	30 e0       	ldi	r19, 0x00	; 0
    9abc:	fc 01       	movw	r30, r24
    9abe:	21 93       	st	Z+, r18
    9ac0:	31 93       	st	Z+, r19
    9ac2:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    9ac4:	4e e1       	ldi	r20, 0x1E	; 30
    9ac6:	50 e0       	ldi	r21, 0x00	; 0
    9ac8:	6d ee       	ldi	r22, 0xED	; 237
    9aca:	72 e0       	ldi	r23, 0x02	; 2
    9acc:	0c 94 28 71 	jmp	0xe250	; 0xe250 <memcpy_P>

00009ad0 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    9ad0:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    9ad2:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9ad4:	16 86       	std	Z+14, r1	; 0x0e
    9ad6:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    9ad8:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    9ada:	73 e0       	ldi	r23, 0x03	; 3
    9adc:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9ade:	65 e0       	ldi	r22, 0x05	; 5
    9ae0:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    9ae2:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    9ae4:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    9ae6:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9ae8:	44 eb       	ldi	r20, 0xB4	; 180
    9aea:	5a e6       	ldi	r21, 0x6A	; 106
    9aec:	50 87       	std	Z+8, r21	; 0x08
    9aee:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9af0:	21 eb       	ldi	r18, 0xB1	; 177
    9af2:	3a e6       	ldi	r19, 0x6A	; 106
    9af4:	32 87       	std	Z+10, r19	; 0x0a
    9af6:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9af8:	8e ea       	ldi	r24, 0xAE	; 174
    9afa:	9a e6       	ldi	r25, 0x6A	; 106
    9afc:	94 87       	std	Z+12, r25	; 0x0c
    9afe:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9b00:	14 8e       	std	Z+28, r1	; 0x1c
    9b02:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    9b04:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    9b06:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9b08:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    9b0a:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    9b0c:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    9b0e:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9b10:	56 8b       	std	Z+22, r21	; 0x16
    9b12:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9b14:	30 8f       	std	Z+24, r19	; 0x18
    9b16:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9b18:	92 8f       	std	Z+26, r25	; 0x1a
    9b1a:	81 8f       	std	Z+25, r24	; 0x19
    9b1c:	08 95       	ret

00009b1e <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    9b1e:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9b20:	15 86       	std	Z+13, r1	; 0x0d
    9b22:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9b24:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    9b26:	83 e0       	ldi	r24, 0x03	; 3
    9b28:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    9b2a:	8e e1       	ldi	r24, 0x1E	; 30
    9b2c:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9b2e:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9b30:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9b32:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    9b34:	8a e8       	ldi	r24, 0x8A	; 138
    9b36:	9a e6       	ldi	r25, 0x6A	; 106
    9b38:	97 83       	std	Z+7, r25	; 0x07
    9b3a:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    9b3c:	87 e8       	ldi	r24, 0x87	; 135
    9b3e:	9a e6       	ldi	r25, 0x6A	; 106
    9b40:	91 87       	std	Z+9, r25	; 0x09
    9b42:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    9b44:	84 e8       	ldi	r24, 0x84	; 132
    9b46:	9a e6       	ldi	r25, 0x6A	; 106
    9b48:	93 87       	std	Z+11, r25	; 0x0b
    9b4a:	82 87       	std	Z+10, r24	; 0x0a
    9b4c:	08 95       	ret

00009b4e <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    9b4e:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9b50:	15 86       	std	Z+13, r1	; 0x0d
    9b52:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9b54:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    9b56:	82 e0       	ldi	r24, 0x02	; 2
    9b58:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    9b5a:	8c e3       	ldi	r24, 0x3C	; 60
    9b5c:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9b5e:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9b60:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9b62:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    9b64:	88 e1       	ldi	r24, 0x18	; 24
    9b66:	98 e6       	ldi	r25, 0x68	; 104
    9b68:	97 83       	std	Z+7, r25	; 0x07
    9b6a:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    9b6c:	8e e4       	ldi	r24, 0x4E	; 78
    9b6e:	99 e6       	ldi	r25, 0x69	; 105
    9b70:	91 87       	std	Z+9, r25	; 0x09
    9b72:	80 87       	std	Z+8, r24	; 0x08
    9b74:	08 95       	ret

00009b76 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9b76:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9b78:	80 ee       	ldi	r24, 0xE0	; 224
    9b7a:	9e e2       	ldi	r25, 0x2E	; 46
    9b7c:	92 83       	std	Z+2, r25	; 0x02
    9b7e:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9b80:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9b82:	13 82       	std	Z+3, r1	; 0x03
	s->active = 0;
    9b84:	13 86       	std	Z+11, r1	; 0x0b
	s->distance = 0;
    9b86:	15 86       	std	Z+13, r1	; 0x0d
    9b88:	14 86       	std	Z+12, r1	; 0x0c
	s->shot_type = shot_type;
    9b8a:	60 87       	std	Z+8, r22	; 0x08
	s->rebounds = SHOT_REBOUNDS;
    9b8c:	84 e0       	ldi	r24, 0x04	; 4
    9b8e:	82 87       	std	Z+10, r24	; 0x0a
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9b90:	66 23       	and	r22, r22
    9b92:	11 f0       	breq	.+4      	; 0x9b98 <init_shot_state+0x22>
    9b94:	85 e0       	ldi	r24, 0x05	; 5
    9b96:	01 c0       	rjmp	.+2      	; 0x9b9a <init_shot_state+0x24>
    9b98:	81 e0       	ldi	r24, 0x01	; 1
    9b9a:	81 87       	std	Z+9, r24	; 0x09
	s->shared.x = OFF_SCREEN*100;
    9b9c:	80 ec       	ldi	r24, 0xC0	; 192
    9b9e:	9d e5       	ldi	r25, 0x5D	; 93
    9ba0:	95 83       	std	Z+5, r25	; 0x05
    9ba2:	84 83       	std	Z+4, r24	; 0x04
	s->shared.y = 0;
    9ba4:	17 82       	std	Z+7, r1	; 0x07
    9ba6:	16 82       	std	Z+6, r1	; 0x06
    9ba8:	08 95       	ret

00009baa <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9baa:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    9bac:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    9bae:	82 e0       	ldi	r24, 0x02	; 2
    9bb0:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9bb2:	85 e0       	ldi	r24, 0x05	; 5
    9bb4:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    9bb6:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.looped = 0;
    9bb8:	12 8a       	std	Z+18, r1	; 0x12
	s->up_anim.reversing = 0;
    9bba:	13 8a       	std	Z+19, r1	; 0x13
	if (shot_type == BASIC_SHOT)
    9bbc:	61 11       	cpse	r22, r1
    9bbe:	03 c0       	rjmp	.+6      	; 0x9bc6 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    9bc0:	82 e2       	ldi	r24, 0x22	; 34
    9bc2:	91 e3       	ldi	r25, 0x31	; 49
    9bc4:	13 c0       	rjmp	.+38     	; 0x9bec <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    9bc6:	61 30       	cpi	r22, 0x01	; 1
    9bc8:	79 f4       	brne	.+30     	; 0x9be8 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    9bca:	8f e1       	ldi	r24, 0x1F	; 31
    9bcc:	91 e3       	ldi	r25, 0x31	; 49
    9bce:	95 8b       	std	Z+21, r25	; 0x15
    9bd0:	84 8b       	std	Z+20, r24	; 0x14
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    9bd2:	8c e1       	ldi	r24, 0x1C	; 28
    9bd4:	91 e3       	ldi	r25, 0x31	; 49
    9bd6:	97 8b       	std	Z+23, r25	; 0x17
    9bd8:	86 8b       	std	Z+22, r24	; 0x16
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    9bda:	89 e1       	ldi	r24, 0x19	; 25
    9bdc:	91 e3       	ldi	r25, 0x31	; 49
    9bde:	91 a3       	std	Z+33, r25	; 0x21
    9be0:	80 a3       	std	Z+32, r24	; 0x20
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    9be2:	86 e1       	ldi	r24, 0x16	; 22
    9be4:	91 e3       	ldi	r25, 0x31	; 49
    9be6:	08 c0       	rjmp	.+16     	; 0x9bf8 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    9be8:	8a e0       	ldi	r24, 0x0A	; 10
    9bea:	91 e3       	ldi	r25, 0x31	; 49
    9bec:	95 8b       	std	Z+21, r25	; 0x15
    9bee:	84 8b       	std	Z+20, r24	; 0x14
		s->up_anim.anims[1] = (char*) map_sub_shot;
    9bf0:	97 8b       	std	Z+23, r25	; 0x17
    9bf2:	86 8b       	std	Z+22, r24	; 0x16
		s->right_anim.anims[0] = (char*) map_sub_shot;
    9bf4:	91 a3       	std	Z+33, r25	; 0x21
    9bf6:	80 a3       	std	Z+32, r24	; 0x20
		s->right_anim.anims[1] = (char*) map_sub_shot;
    9bf8:	93 a3       	std	Z+35, r25	; 0x23
    9bfa:	82 a3       	std	Z+34, r24	; 0x22
	}
	s->up_anim.current_anim = 0;
    9bfc:	16 86       	std	Z+14, r1	; 0x0e
	s->right_anim.anim_count = 2;
    9bfe:	82 e0       	ldi	r24, 0x02	; 2
    9c00:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9c02:	85 e0       	ldi	r24, 0x05	; 5
    9c04:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.frame_count = 0;
    9c06:	15 8e       	std	Z+29, r1	; 0x1d
	s->right_anim.looped = 0;
    9c08:	16 8e       	std	Z+30, r1	; 0x1e
	s->right_anim.reversing = 0;
    9c0a:	17 8e       	std	Z+31, r1	; 0x1f
    9c0c:	08 95       	ret

00009c0e <init_turret>:
}

void init_turret(Turret* t, u16 x, u16 y)
{
    9c0e:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    9c10:	85 e0       	ldi	r24, 0x05	; 5
    9c12:	80 87       	std	Z+8, r24	; 0x08
	t->shared.direction = D_LEFT;
    9c14:	83 e0       	ldi	r24, 0x03	; 3
    9c16:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    9c18:	13 82       	std	Z+3, r1	; 0x03
	t->shared.speed = BOSS_TURRET_SPEED;
    9c1a:	88 e2       	ldi	r24, 0x28	; 40
    9c1c:	93 e2       	ldi	r25, 0x23	; 35
    9c1e:	92 83       	std	Z+2, r25	; 0x02
    9c20:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    9c22:	75 83       	std	Z+5, r23	; 0x05
    9c24:	64 83       	std	Z+4, r22	; 0x04
	t->shared.y = y;
    9c26:	57 83       	std	Z+7, r21	; 0x07
    9c28:	46 83       	std	Z+6, r20	; 0x06
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    9c2a:	88 ea       	ldi	r24, 0xA8	; 168
    9c2c:	91 e6       	ldi	r25, 0x61	; 97
    9c2e:	93 87       	std	Z+11, r25	; 0x0b
    9c30:	82 87       	std	Z+10, r24	; 0x0a
		t->shot[i].shared.direction = D_DOWN;
    9c32:	82 e0       	ldi	r24, 0x02	; 2
    9c34:	81 87       	std	Z+9, r24	; 0x09
		t->shot[i].shared.recoiled = 0;
    9c36:	14 86       	std	Z+12, r1	; 0x0c
		t->shot[i].shared.x = OFF_SCREEN*100;
    9c38:	20 ec       	ldi	r18, 0xC0	; 192
    9c3a:	3d e5       	ldi	r19, 0x5D	; 93
    9c3c:	36 87       	std	Z+14, r19	; 0x0e
    9c3e:	25 87       	std	Z+13, r18	; 0x0d
		t->shot[i].shared.y = 0;
    9c40:	10 8a       	std	Z+16, r1	; 0x10
    9c42:	17 86       	std	Z+15, r1	; 0x0f
		t->shot[i].active = 0;
    9c44:	14 8a       	std	Z+20, r1	; 0x14
		t->shot[i].distance = 10000;
    9c46:	20 e1       	ldi	r18, 0x10	; 16
    9c48:	37 e2       	ldi	r19, 0x27	; 39
    9c4a:	36 8b       	std	Z+22, r19	; 0x16
    9c4c:	25 8b       	std	Z+21, r18	; 0x15
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    9c4e:	81 8b       	std	Z+17, r24	; 0x11
		t->shot[i].rebounds = SHOT_REBOUNDS;
    9c50:	84 e0       	ldi	r24, 0x04	; 4
    9c52:	83 8b       	std	Z+19, r24	; 0x13
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    9c54:	81 e0       	ldi	r24, 0x01	; 1
    9c56:	82 8b       	std	Z+18, r24	; 0x12
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    9c58:	62 e0       	ldi	r22, 0x02	; 2
    9c5a:	cf 01       	movw	r24, r30
    9c5c:	09 96       	adiw	r24, 0x09	; 9
    9c5e:	0c 94 d5 4d 	jmp	0x9baa	; 0x9baa <set_shot_animations>

00009c62 <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    9c62:	0f 93       	push	r16
    9c64:	1f 93       	push	r17
    9c66:	cf 93       	push	r28
    9c68:	df 93       	push	r29
    9c6a:	ec 01       	movw	r28, r24
	p->grace_frame = FRAMES_PER_GRACE;
    9c6c:	88 e7       	ldi	r24, 0x78	; 120
    9c6e:	8a 87       	std	Y+10, r24	; 0x0a
	p->netMessage.score = 0;
    9c70:	fe 01       	movw	r30, r28
    9c72:	e1 59       	subi	r30, 0x91	; 145
    9c74:	ff 4f       	sbci	r31, 0xFF	; 255
    9c76:	10 82       	st	Z, r1
	p->netMessage.level_score = 0;
    9c78:	31 96       	adiw	r30, 0x01	; 1
    9c7a:	10 82       	st	Z, r1
	p->netMessage.shared.direction = D_UP;
    9c7c:	32 96       	adiw	r30, 0x02	; 2
    9c7e:	10 82       	st	Z, r1
	p->netMessage.shared.speed = 0;
    9c80:	31 96       	adiw	r30, 0x01	; 1
    9c82:	11 82       	std	Z+1, r1	; 0x01
    9c84:	10 82       	st	Z, r1
	p->netMessage.shared.recoiled = 0;
    9c86:	32 96       	adiw	r30, 0x02	; 2
    9c88:	10 82       	st	Z, r1
	p->old_level_score = 0;
    9c8a:	1a 8a       	std	Y+18, r1	; 0x12
	p->max_speed = MAX_SPEED;
    9c8c:	88 e8       	ldi	r24, 0x88	; 136
    9c8e:	93 e1       	ldi	r25, 0x13	; 19
    9c90:	9c 87       	std	Y+12, r25	; 0x0c
    9c92:	8b 87       	std	Y+11, r24	; 0x0b
	p->has_over_speed = false;
    9c94:	1e 86       	std	Y+14, r1	; 0x0e
	p->has_rocket = false;
    9c96:	1d 86       	std	Y+13, r1	; 0x0d
	p->netMessage.flags = 0;
    9c98:	34 97       	sbiw	r30, 0x04	; 4
    9c9a:	10 82       	st	Z, r1

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    9c9c:	ba 97       	sbiw	r30, 0x2a	; 42
    9c9e:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    9ca0:	31 96       	adiw	r30, 0x01	; 1
    9ca2:	91 e0       	ldi	r25, 0x01	; 1
    9ca4:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9ca6:	31 96       	adiw	r30, 0x01	; 1
    9ca8:	85 e0       	ldi	r24, 0x05	; 5
    9caa:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9cac:	31 96       	adiw	r30, 0x01	; 1
    9cae:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    9cb0:	31 96       	adiw	r30, 0x01	; 1
    9cb2:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    9cb4:	31 96       	adiw	r30, 0x01	; 1
    9cb6:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    9cb8:	31 96       	adiw	r30, 0x01	; 1
    9cba:	71 83       	std	Z+1, r23	; 0x01
    9cbc:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9cbe:	36 96       	adiw	r30, 0x06	; 6
    9cc0:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9cc2:	31 96       	adiw	r30, 0x01	; 1
    9cc4:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9cc6:	31 96       	adiw	r30, 0x01	; 1
    9cc8:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    9cca:	31 96       	adiw	r30, 0x01	; 1
    9ccc:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    9cce:	31 96       	adiw	r30, 0x01	; 1
    9cd0:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    9cd2:	31 96       	adiw	r30, 0x01	; 1
    9cd4:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9cd6:	31 96       	adiw	r30, 0x01	; 1
    9cd8:	51 83       	std	Z+1, r21	; 0x01
    9cda:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9cdc:	36 96       	adiw	r30, 0x06	; 6
    9cde:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9ce0:	31 96       	adiw	r30, 0x01	; 1
    9ce2:	93 e0       	ldi	r25, 0x03	; 3
    9ce4:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9ce6:	31 96       	adiw	r30, 0x01	; 1
    9ce8:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9cea:	31 96       	adiw	r30, 0x01	; 1
    9cec:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    9cee:	31 96       	adiw	r30, 0x01	; 1
    9cf0:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    9cf2:	31 96       	adiw	r30, 0x01	; 1
    9cf4:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9cf6:	31 96       	adiw	r30, 0x01	; 1
    9cf8:	81 e3       	ldi	r24, 0x31	; 49
    9cfa:	91 e3       	ldi	r25, 0x31	; 49
    9cfc:	91 83       	std	Z+1, r25	; 0x01
    9cfe:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9d00:	32 96       	adiw	r30, 0x02	; 2
    9d02:	8b e2       	ldi	r24, 0x2B	; 43
    9d04:	91 e3       	ldi	r25, 0x31	; 49
    9d06:	91 83       	std	Z+1, r25	; 0x01
    9d08:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    9d0a:	32 96       	adiw	r30, 0x02	; 2
    9d0c:	85 e2       	ldi	r24, 0x25	; 37
    9d0e:	91 e3       	ldi	r25, 0x31	; 49
    9d10:	91 83       	std	Z+1, r25	; 0x01
    9d12:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9d14:	1c 82       	std	Y+4, r1	; 0x04
	p->old_active_shots = 0;
    9d16:	1d 82       	std	Y+5, r1	; 0x05
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9d18:	8e 01       	movw	r16, r28
    9d1a:	0f 5d       	subi	r16, 0xDF	; 223
    9d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    9d1e:	60 e0       	ldi	r22, 0x00	; 0
    9d20:	c8 01       	movw	r24, r16
    9d22:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9d26:	60 e0       	ldi	r22, 0x00	; 0
    9d28:	c8 01       	movw	r24, r16
    9d2a:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9d2e:	1f 86       	std	Y+15, r1	; 0x0f
	p->goal_direction = 0;
    9d30:	1c 8a       	std	Y+20, r1	; 0x14
    9d32:	1b 8a       	std	Y+19, r1	; 0x13
	p->goal = 0;
    9d34:	19 8e       	std	Y+25, r1	; 0x19
	p->goal_reached = 0;
    9d36:	1a 8e       	std	Y+26, r1	; 0x1a
	p->old_x = 0;
    9d38:	1e 8e       	std	Y+30, r1	; 0x1e
    9d3a:	1d 8e       	std	Y+29, r1	; 0x1d
	p->old_y = 0;
    9d3c:	18 a2       	std	Y+32, r1	; 0x20
    9d3e:	1f 8e       	std	Y+31, r1	; 0x1f
	p->deadlock_count_x = 0;
    9d40:	1e 8a       	std	Y+22, r1	; 0x16
    9d42:	1d 8a       	std	Y+21, r1	; 0x15
	p->deadlock_count_y = 0;
    9d44:	18 8e       	std	Y+24, r1	; 0x18
    9d46:	1f 8a       	std	Y+23, r1	; 0x17
}
    9d48:	df 91       	pop	r29
    9d4a:	cf 91       	pop	r28
    9d4c:	1f 91       	pop	r17
    9d4e:	0f 91       	pop	r16
    9d50:	08 95       	ret

00009d52 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    9d52:	fc 01       	movw	r30, r24
    9d54:	14 82       	std	Z+4, r1	; 0x04
	player->old_active_shots = 0;
    9d56:	15 82       	std	Z+5, r1	; 0x05
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    9d58:	60 e0       	ldi	r22, 0x00	; 0
    9d5a:	81 96       	adiw	r24, 0x21	; 33
    9d5c:	0c 94 bb 4d 	jmp	0x9b76	; 0x9b76 <init_shot_state>

00009d60 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    9d60:	e6 e7       	ldi	r30, 0x76	; 118
    9d62:	fb e0       	ldi	r31, 0x0B	; 11
    9d64:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    9d66:	13 8a       	std	Z+19, r1	; 0x13
	game.paused = 0;
    9d68:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    9d6a:	14 86       	std	Z+12, r1	; 0x0c
    9d6c:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    9d6e:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    9d70:	10 8a       	std	Z+16, r1	; 0x10
    9d72:	17 86       	std	Z+15, r1	; 0x0f
	game.boss_fight_joypad = 0;
    9d74:	12 8a       	std	Z+18, r1	; 0x12
    9d76:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    9d78:	82 e0       	ldi	r24, 0x02	; 2
    9d7a:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    9d7c:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    9d7e:	84 e1       	ldi	r24, 0x14	; 20
    9d80:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    9d82:	17 82       	std	Z+7, r1	; 0x07
	game.demo_counter = 0;
    9d84:	12 86       	std	Z+10, r1	; 0x0a
    9d86:	11 86       	std	Z+9, r1	; 0x09
	game.demo_choice = 0;
    9d88:	10 86       	std	Z+8, r1	; 0x08
	game.tank_rank_counter = 0;
    9d8a:	16 86       	std	Z+14, r1	; 0x0e
    9d8c:	15 86       	std	Z+13, r1	; 0x0d
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    9d8e:	43 e4       	ldi	r20, 0x43	; 67
    9d90:	51 e3       	ldi	r21, 0x31	; 49
    9d92:	69 e4       	ldi	r22, 0x49	; 73
    9d94:	71 e3       	ldi	r23, 0x31	; 49
    9d96:	88 ea       	ldi	r24, 0xA8	; 168
    9d98:	9b e0       	ldi	r25, 0x0B	; 11
    9d9a:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    9d9e:	47 e3       	ldi	r20, 0x37	; 55
    9da0:	51 e3       	ldi	r21, 0x31	; 49
    9da2:	6d e3       	ldi	r22, 0x3D	; 61
    9da4:	71 e3       	ldi	r23, 0x31	; 49
    9da6:	8e e1       	ldi	r24, 0x1E	; 30
    9da8:	9f e0       	ldi	r25, 0x0F	; 15
    9daa:	0c 94 31 4e 	jmp	0x9c62	; 0x9c62 <init_player>

00009dae <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    9dae:	cf 93       	push	r28
    9db0:	df 93       	push	r29
    9db2:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    9db4:	1a 86       	std	Y+10, r1	; 0x0a
	player->netMessage.shared.x = player->spawn_x;
    9db6:	fc 01       	movw	r30, r24
    9db8:	ea 58       	subi	r30, 0x8A	; 138
    9dba:	ff 4f       	sbci	r31, 0xFF	; 255
    9dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    9dbe:	9f 81       	ldd	r25, Y+7	; 0x07
    9dc0:	91 83       	std	Z+1, r25	; 0x01
    9dc2:	80 83       	st	Z, r24
	player->netMessage.shared.y = player->spawn_y;
    9dc4:	32 96       	adiw	r30, 0x02	; 2
    9dc6:	88 85       	ldd	r24, Y+8	; 0x08
    9dc8:	99 85       	ldd	r25, Y+9	; 0x09
    9dca:	91 83       	std	Z+1, r25	; 0x01
    9dcc:	80 83       	st	Z, r24
	player->netMessage.shared.direction = D_UP;
    9dce:	36 97       	sbiw	r30, 0x06	; 6
    9dd0:	10 82       	st	Z, r1
	player->netMessage.shared.speed = 0;
    9dd2:	31 96       	adiw	r30, 0x01	; 1
    9dd4:	11 82       	std	Z+1, r1	; 0x01
    9dd6:	10 82       	st	Z, r1
	player->netMessage.shared.recoiled = 0;
    9dd8:	32 96       	adiw	r30, 0x02	; 2
    9dda:	10 82       	st	Z, r1
	player->tank_tactic = LBRandom(0, 2);
    9ddc:	62 e0       	ldi	r22, 0x02	; 2
    9dde:	80 e0       	ldi	r24, 0x00	; 0
    9de0:	0e 94 16 4c 	call	0x982c	; 0x982c <LBRandom>
    9de4:	88 8b       	std	Y+16, r24	; 0x10
	player->shot_tactic = LBRandom(0, 2);
    9de6:	62 e0       	ldi	r22, 0x02	; 2
    9de8:	80 e0       	ldi	r24, 0x00	; 0
    9dea:	0e 94 16 4c 	call	0x982c	; 0x982c <LBRandom>
    9dee:	89 8b       	std	Y+17, r24	; 0x11
	
}
    9df0:	df 91       	pop	r29
    9df2:	cf 91       	pop	r28
    9df4:	08 95       	ret

00009df6 <waitForVSync>:

void waitForVSync()
{
    //ProcessSprites();
    WaitVsync(1);
    9df6:	81 e0       	ldi	r24, 0x01	; 1
    9df8:	90 e0       	ldi	r25, 0x00	; 0
    9dfa:	0c 94 24 49 	jmp	0x9248	; 0x9248 <WaitVsync>

00009dfe <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9dfe:	cf 93       	push	r28
    9e00:	df 93       	push	r29
    9e02:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9e04:	bc 01       	movw	r22, r24
    9e06:	88 81       	ld	r24, Y
    9e08:	99 81       	ldd	r25, Y+1	; 0x01
    9e0a:	0e 94 0a 3c 	call	0x7814	; 0x7814 <EepromReadBlock>
	if (status == 0x03)
    9e0e:	83 30       	cpi	r24, 0x03	; 3
    9e10:	29 f4       	brne	.+10     	; 0x9e1c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9e12:	ce 01       	movw	r24, r28
	}
}
    9e14:	df 91       	pop	r29
    9e16:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9e18:	0c 94 c0 3b 	jmp	0x7780	; 0x7780 <EepromWriteBlock>
	}
}
    9e1c:	df 91       	pop	r29
    9e1e:	cf 91       	pop	r28
    9e20:	08 95       	ret

00009e22 <fade_through>:

void fade_through()
{
	//FadeOut(FRAMES_PER_FADE, true);
	ClearVram();
    9e22:	0e 94 3e 3a 	call	0x747c	; 0x747c <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9e26:	60 e0       	ldi	r22, 0x00	; 0
    9e28:	83 e0       	ldi	r24, 0x03	; 3
    9e2a:	0c 94 49 49 	jmp	0x9292	; 0x9292 <FadeIn>

00009e2e <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9e2e:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9e30:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    9e32:	40 e0       	ldi	r20, 0x00	; 0
    9e34:	65 e5       	ldi	r22, 0x55	; 85
    9e36:	71 e3       	ldi	r23, 0x31	; 49
    9e38:	8c 2f       	mov	r24, r28
    9e3a:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
    9e3e:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9e40:	ca 30       	cpi	r28, 0x0A	; 10
    9e42:	b9 f7       	brne	.-18     	; 0x9e32 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9e44:	cf 91       	pop	r28
    9e46:	08 95       	ret

00009e48 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9e48:	8f 92       	push	r8
    9e4a:	9f 92       	push	r9
    9e4c:	bf 92       	push	r11
    9e4e:	cf 92       	push	r12
    9e50:	df 92       	push	r13
    9e52:	ef 92       	push	r14
    9e54:	ff 92       	push	r15
    9e56:	0f 93       	push	r16
    9e58:	1f 93       	push	r17
    9e5a:	cf 93       	push	r28
    9e5c:	df 93       	push	r29
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.netMessage.score < player2.netMessage.score)
    9e5e:	90 91 17 0c 	lds	r25, 0x0C17
    9e62:	80 91 8d 0f 	lds	r24, 0x0F8D
    9e66:	98 17       	cp	r25, r24
    9e68:	28 f4       	brcc	.+10     	; 0x9e74 <save_score+0x2c>
	{
		p_win = &player2;
		p_lose = &player1;
    9e6a:	e8 ea       	ldi	r30, 0xA8	; 168
    9e6c:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.netMessage.score < player2.netMessage.score)
	{
		p_win = &player2;
    9e6e:	ae e1       	ldi	r26, 0x1E	; 30
    9e70:	bf e0       	ldi	r27, 0x0F	; 15
    9e72:	04 c0       	rjmp	.+8      	; 0x9e7c <save_score+0x34>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9e74:	ee e1       	ldi	r30, 0x1E	; 30
    9e76:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9e78:	a8 ea       	ldi	r26, 0xA8	; 168
    9e7a:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.netMessage.score < player2.netMessage.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    9e7c:	1c 91       	ld	r17, X
	save_score[1] = p_lose->handle_id;
    9e7e:	70 81       	ld	r23, Z
	save_score[2] = p_win->netMessage.score;
    9e80:	a1 59       	subi	r26, 0x91	; 145
    9e82:	bf 4f       	sbci	r27, 0xFF	; 255
    9e84:	6c 91       	ld	r22, X
	save_score[3] = p_lose->netMessage.score;
    9e86:	e1 59       	subi	r30, 0x91	; 145
    9e88:	ff 4f       	sbci	r31, 0xFF	; 255
    9e8a:	50 81       	ld	r21, Z
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    9e8c:	41 e0       	ldi	r20, 0x01	; 1
    9e8e:	80 91 79 0b 	lds	r24, 0x0B79
    9e92:	88 30       	cpi	r24, 0x08	; 8
    9e94:	09 f0       	breq	.+2      	; 0x9e98 <save_score+0x50>
    9e96:	40 e0       	ldi	r20, 0x00	; 0
	save_delta = p_win->netMessage.score - p_lose->netMessage.score;
    9e98:	d6 2e       	mov	r13, r22
    9e9a:	d5 1a       	sub	r13, r21
    9e9c:	28 e3       	ldi	r18, 0x38	; 56
    9e9e:	3b e0       	ldi	r19, 0x0B	; 11
    9ea0:	89 e3       	ldi	r24, 0x39	; 57
    9ea2:	9b e0       	ldi	r25, 0x0B	; 11
    9ea4:	ea e3       	ldi	r30, 0x3A	; 58
    9ea6:	fb e0       	ldi	r31, 0x0B	; 11
    9ea8:	cb e3       	ldi	r28, 0x3B	; 59
    9eaa:	db e0       	ldi	r29, 0x0B	; 11
    9eac:	ac e3       	ldi	r26, 0x3C	; 60
    9eae:	8a 2e       	mov	r8, r26
    9eb0:	ab e0       	ldi	r26, 0x0B	; 11
    9eb2:	9a 2e       	mov	r9, r26
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    9eb4:	00 e0       	ldi	r16, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->netMessage.score - p_lose->netMessage.score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    9eb6:	00 23       	and	r16, r16
    9eb8:	a1 f0       	breq	.+40     	; 0x9ee2 <save_score+0x9a>
		{
			memcpy(tmp_score, &scores.data[i], 5);
    9eba:	d9 01       	movw	r26, r18
    9ebc:	0c 91       	ld	r16, X
    9ebe:	dc 01       	movw	r26, r24
    9ec0:	fc 90       	ld	r15, X
    9ec2:	e0 80       	ld	r14, Z
    9ec4:	c8 80       	ld	r12, Y
    9ec6:	d4 01       	movw	r26, r8
    9ec8:	bc 90       	ld	r11, X
			memcpy(&scores.data[i], save_score, 5);
    9eca:	d9 01       	movw	r26, r18
    9ecc:	1c 93       	st	X, r17
    9ece:	dc 01       	movw	r26, r24
    9ed0:	7c 93       	st	X, r23
    9ed2:	60 83       	st	Z, r22
    9ed4:	58 83       	st	Y, r21
    9ed6:	d4 01       	movw	r26, r8
    9ed8:	4c 93       	st	X, r20
			memcpy(save_score, tmp_score, 5);
    9eda:	4b 2d       	mov	r20, r11
    9edc:	5c 2d       	mov	r21, r12
    9ede:	b7 01       	movw	r22, r14
    9ee0:	18 c0       	rjmp	.+48     	; 0x9f12 <save_score+0xca>
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    9ee2:	f0 80       	ld	r15, Z
    9ee4:	e8 80       	ld	r14, Y
    9ee6:	cf 2c       	mov	r12, r15
    9ee8:	ce 18       	sub	r12, r14
			if (save_delta > cur_delta)
    9eea:	cd 14       	cp	r12, r13
    9eec:	a0 f4       	brcc	.+40     	; 0x9f16 <save_score+0xce>
			{
				memcpy(tmp_score, &scores.data[i], 5);
    9eee:	d9 01       	movw	r26, r18
    9ef0:	0c 91       	ld	r16, X
    9ef2:	dc 01       	movw	r26, r24
    9ef4:	cc 90       	ld	r12, X
    9ef6:	d4 01       	movw	r26, r8
    9ef8:	bc 90       	ld	r11, X
				memcpy(&scores.data[i], save_score, 5);
    9efa:	d9 01       	movw	r26, r18
    9efc:	1c 93       	st	X, r17
    9efe:	dc 01       	movw	r26, r24
    9f00:	7c 93       	st	X, r23
    9f02:	60 83       	st	Z, r22
    9f04:	58 83       	st	Y, r21
    9f06:	d4 01       	movw	r26, r8
    9f08:	4c 93       	st	X, r20
				memcpy(save_score, tmp_score, 5);
    9f0a:	4b 2d       	mov	r20, r11
    9f0c:	5e 2d       	mov	r21, r14
    9f0e:	6f 2d       	mov	r22, r15
    9f10:	7c 2d       	mov	r23, r12
    9f12:	10 2f       	mov	r17, r16
				saved = 1;
    9f14:	01 e0       	ldi	r16, 0x01	; 1
    9f16:	2b 5f       	subi	r18, 0xFB	; 251
    9f18:	3f 4f       	sbci	r19, 0xFF	; 255
    9f1a:	05 96       	adiw	r24, 0x05	; 5
    9f1c:	35 96       	adiw	r30, 0x05	; 5
    9f1e:	25 96       	adiw	r28, 0x05	; 5
    9f20:	b5 e0       	ldi	r27, 0x05	; 5
    9f22:	8b 0e       	add	r8, r27
    9f24:	91 1c       	adc	r9, r1
	save_score[2] = p_win->netMessage.score;
	save_score[3] = p_lose->netMessage.score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->netMessage.score - p_lose->netMessage.score;

	for (u8 i = 0; i < 28; i += 5)
    9f26:	ab e0       	ldi	r26, 0x0B	; 11
    9f28:	e8 35       	cpi	r30, 0x58	; 88
    9f2a:	fa 07       	cpc	r31, r26
    9f2c:	21 f6       	brne	.-120    	; 0x9eb6 <save_score+0x6e>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9f2e:	86 e3       	ldi	r24, 0x36	; 54
    9f30:	9b e0       	ldi	r25, 0x0B	; 11
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    9f32:	df 91       	pop	r29
    9f34:	cf 91       	pop	r28
    9f36:	1f 91       	pop	r17
    9f38:	0f 91       	pop	r16
    9f3a:	ff 90       	pop	r15
    9f3c:	ef 90       	pop	r14
    9f3e:	df 90       	pop	r13
    9f40:	cf 90       	pop	r12
    9f42:	bf 90       	pop	r11
    9f44:	9f 90       	pop	r9
    9f46:	8f 90       	pop	r8
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9f48:	0c 94 c0 3b 	jmp	0x7780	; 0x7780 <EepromWriteBlock>

00009f4c <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    9f4c:	db 01       	movw	r26, r22
	switch (shot->shared.direction)
    9f4e:	2c 91       	ld	r18, X
    9f50:	21 30       	cpi	r18, 0x01	; 1
    9f52:	a9 f0       	breq	.+42     	; 0x9f7e <position_shot+0x32>
    9f54:	28 f0       	brcs	.+10     	; 0x9f60 <position_shot+0x14>
    9f56:	22 30       	cpi	r18, 0x02	; 2
    9f58:	d1 f0       	breq	.+52     	; 0x9f8e <position_shot+0x42>
    9f5a:	23 30       	cpi	r18, 0x03	; 3
    9f5c:	49 f1       	breq	.+82     	; 0x9fb0 <position_shot+0x64>
    9f5e:	08 95       	ret
	{
		case D_UP:
			shot->shared.x = player->netMessage.shared.x + 400;
    9f60:	fc 01       	movw	r30, r24
    9f62:	ea 58       	subi	r30, 0x8A	; 138
    9f64:	ff 4f       	sbci	r31, 0xFF	; 255
    9f66:	20 81       	ld	r18, Z
    9f68:	31 81       	ldd	r19, Z+1	; 0x01
    9f6a:	20 57       	subi	r18, 0x70	; 112
    9f6c:	3e 4f       	sbci	r19, 0xFE	; 254
    9f6e:	15 96       	adiw	r26, 0x05	; 5
    9f70:	3c 93       	st	X, r19
    9f72:	2e 93       	st	-X, r18
    9f74:	14 97       	sbiw	r26, 0x04	; 4
			shot->shared.y = player->netMessage.shared.y;
    9f76:	32 96       	adiw	r30, 0x02	; 2
    9f78:	80 81       	ld	r24, Z
    9f7a:	91 81       	ldd	r25, Z+1	; 0x01
    9f7c:	27 c0       	rjmp	.+78     	; 0x9fcc <position_shot+0x80>
			break;
		case D_RIGHT:
			shot->shared.x = player->netMessage.shared.x + 800;
    9f7e:	fc 01       	movw	r30, r24
    9f80:	ea 58       	subi	r30, 0x8A	; 138
    9f82:	ff 4f       	sbci	r31, 0xFF	; 255
    9f84:	20 81       	ld	r18, Z
    9f86:	31 81       	ldd	r19, Z+1	; 0x01
    9f88:	20 5e       	subi	r18, 0xE0	; 224
    9f8a:	3c 4f       	sbci	r19, 0xFC	; 252
    9f8c:	16 c0       	rjmp	.+44     	; 0x9fba <position_shot+0x6e>
			shot->shared.y = player->netMessage.shared.y + 400;
			break;
		case D_DOWN:
			shot->shared.x = player->netMessage.shared.x + 400;
    9f8e:	fc 01       	movw	r30, r24
    9f90:	ea 58       	subi	r30, 0x8A	; 138
    9f92:	ff 4f       	sbci	r31, 0xFF	; 255
    9f94:	20 81       	ld	r18, Z
    9f96:	31 81       	ldd	r19, Z+1	; 0x01
    9f98:	20 57       	subi	r18, 0x70	; 112
    9f9a:	3e 4f       	sbci	r19, 0xFE	; 254
    9f9c:	15 96       	adiw	r26, 0x05	; 5
    9f9e:	3c 93       	st	X, r19
    9fa0:	2e 93       	st	-X, r18
    9fa2:	14 97       	sbiw	r26, 0x04	; 4
			shot->shared.y = player->netMessage.shared.y + 800;
    9fa4:	32 96       	adiw	r30, 0x02	; 2
    9fa6:	80 81       	ld	r24, Z
    9fa8:	91 81       	ldd	r25, Z+1	; 0x01
    9faa:	80 5e       	subi	r24, 0xE0	; 224
    9fac:	9c 4f       	sbci	r25, 0xFC	; 252
    9fae:	0e c0       	rjmp	.+28     	; 0x9fcc <position_shot+0x80>
			break;
		case D_LEFT:
			shot->shared.x = player->netMessage.shared.x;
    9fb0:	fc 01       	movw	r30, r24
    9fb2:	ea 58       	subi	r30, 0x8A	; 138
    9fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    9fb6:	20 81       	ld	r18, Z
    9fb8:	31 81       	ldd	r19, Z+1	; 0x01
    9fba:	15 96       	adiw	r26, 0x05	; 5
    9fbc:	3c 93       	st	X, r19
    9fbe:	2e 93       	st	-X, r18
    9fc0:	14 97       	sbiw	r26, 0x04	; 4
			shot->shared.y = player->netMessage.shared.y + 400;
    9fc2:	32 96       	adiw	r30, 0x02	; 2
    9fc4:	80 81       	ld	r24, Z
    9fc6:	91 81       	ldd	r25, Z+1	; 0x01
    9fc8:	80 57       	subi	r24, 0x70	; 112
    9fca:	9e 4f       	sbci	r25, 0xFE	; 254
    9fcc:	17 96       	adiw	r26, 0x07	; 7
    9fce:	9c 93       	st	X, r25
    9fd0:	8e 93       	st	-X, r24
    9fd2:	16 97       	sbiw	r26, 0x06	; 6
    9fd4:	08 95       	ret

00009fd6 <print_level_score>:
			break;
	}
}

void print_level_score(Player* winner, Player* loser)
{
    9fd6:	0f 93       	push	r16
    9fd8:	1f 93       	push	r17
    9fda:	cf 93       	push	r28
    9fdc:	df 93       	push	r29
    9fde:	8c 01       	movw	r16, r24
    9fe0:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    9fe2:	ac 01       	movw	r20, r24
    9fe4:	4f 5f       	subi	r20, 0xFF	; 255
    9fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    9fe8:	23 e0       	ldi	r18, 0x03	; 3
    9fea:	6e e0       	ldi	r22, 0x0E	; 14
    9fec:	84 e0       	ldi	r24, 0x04	; 4
    9fee:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    9ff2:	48 ee       	ldi	r20, 0xE8	; 232
    9ff4:	53 e0       	ldi	r21, 0x03	; 3
    9ff6:	6e e0       	ldi	r22, 0x0E	; 14
    9ff8:	70 e0       	ldi	r23, 0x00	; 0
    9ffa:	88 e0       	ldi	r24, 0x08	; 8
    9ffc:	90 e0       	ldi	r25, 0x00	; 0
    9ffe:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a002:	ae 01       	movw	r20, r28
    a004:	4f 5f       	subi	r20, 0xFF	; 255
    a006:	5f 4f       	sbci	r21, 0xFF	; 255
    a008:	23 e0       	ldi	r18, 0x03	; 3
    a00a:	6e e0       	ldi	r22, 0x0E	; 14
    a00c:	8d e0       	ldi	r24, 0x0D	; 13
    a00e:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
	Print(17, 14, (char*) strBy);
    a012:	45 ee       	ldi	r20, 0xE5	; 229
    a014:	53 e0       	ldi	r21, 0x03	; 3
    a016:	6e e0       	ldi	r22, 0x0E	; 14
    a018:	70 e0       	ldi	r23, 0x00	; 0
    a01a:	81 e1       	ldi	r24, 0x11	; 17
    a01c:	90 e0       	ldi	r25, 0x00	; 0
    a01e:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	PrintByte(22, 14, winner->netMessage.level_score ,true);
    a022:	f8 01       	movw	r30, r16
    a024:	e0 59       	subi	r30, 0x90	; 144
    a026:	ff 4f       	sbci	r31, 0xFF	; 255
    a028:	21 e0       	ldi	r18, 0x01	; 1
    a02a:	40 81       	ld	r20, Z
    a02c:	6e e0       	ldi	r22, 0x0E	; 14
    a02e:	70 e0       	ldi	r23, 0x00	; 0
    a030:	86 e1       	ldi	r24, 0x16	; 22
    a032:	90 e0       	ldi	r25, 0x00	; 0
    a034:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
	PrintChar(23, 14, '-');
    a038:	4d e2       	ldi	r20, 0x2D	; 45
    a03a:	6e e0       	ldi	r22, 0x0E	; 14
    a03c:	70 e0       	ldi	r23, 0x00	; 0
    a03e:	87 e1       	ldi	r24, 0x17	; 23
    a040:	90 e0       	ldi	r25, 0x00	; 0
    a042:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
	PrintByte(26, 14, loser->netMessage.level_score ,true);
    a046:	c0 59       	subi	r28, 0x90	; 144
    a048:	df 4f       	sbci	r29, 0xFF	; 255
    a04a:	21 e0       	ldi	r18, 0x01	; 1
    a04c:	48 81       	ld	r20, Y
    a04e:	6e e0       	ldi	r22, 0x0E	; 14
    a050:	70 e0       	ldi	r23, 0x00	; 0
    a052:	8a e1       	ldi	r24, 0x1A	; 26
    a054:	90 e0       	ldi	r25, 0x00	; 0
}
    a056:	df 91       	pop	r29
    a058:	cf 91       	pop	r28
    a05a:	1f 91       	pop	r17
    a05c:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->netMessage.level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->netMessage.level_score ,true);
    a05e:	0c 94 d3 48 	jmp	0x91a6	; 0x91a6 <PrintByte>

0000a062 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a062:	0f 93       	push	r16
    a064:	1f 93       	push	r17
    a066:	cf 93       	push	r28
    a068:	df 93       	push	r29
    a06a:	8c 01       	movw	r16, r24
    a06c:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    a06e:	49 ed       	ldi	r20, 0xD9	; 217
    a070:	53 e0       	ldi	r21, 0x03	; 3
    a072:	6c e0       	ldi	r22, 0x0C	; 12
    a074:	70 e0       	ldi	r23, 0x00	; 0
    a076:	89 e0       	ldi	r24, 0x09	; 9
    a078:	90 e0       	ldi	r25, 0x00	; 0
    a07a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a07e:	a8 01       	movw	r20, r16
    a080:	4f 5f       	subi	r20, 0xFF	; 255
    a082:	5f 4f       	sbci	r21, 0xFF	; 255
    a084:	23 e0       	ldi	r18, 0x03	; 3
    a086:	6e e0       	ldi	r22, 0x0E	; 14
    a088:	84 e0       	ldi	r24, 0x04	; 4
    a08a:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    a08e:	48 ee       	ldi	r20, 0xE8	; 232
    a090:	53 e0       	ldi	r21, 0x03	; 3
    a092:	6e e0       	ldi	r22, 0x0E	; 14
    a094:	70 e0       	ldi	r23, 0x00	; 0
    a096:	88 e0       	ldi	r24, 0x08	; 8
    a098:	90 e0       	ldi	r25, 0x00	; 0
    a09a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a09e:	ae 01       	movw	r20, r28
    a0a0:	4f 5f       	subi	r20, 0xFF	; 255
    a0a2:	5f 4f       	sbci	r21, 0xFF	; 255
    a0a4:	23 e0       	ldi	r18, 0x03	; 3
    a0a6:	6e e0       	ldi	r22, 0x0E	; 14
    a0a8:	8d e0       	ldi	r24, 0x0D	; 13
    a0aa:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
    Print(17, 14, (char*) strBy);
    a0ae:	45 ee       	ldi	r20, 0xE5	; 229
    a0b0:	53 e0       	ldi	r21, 0x03	; 3
    a0b2:	6e e0       	ldi	r22, 0x0E	; 14
    a0b4:	70 e0       	ldi	r23, 0x00	; 0
    a0b6:	81 e1       	ldi	r24, 0x11	; 17
    a0b8:	90 e0       	ldi	r25, 0x00	; 0
    a0ba:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    PrintByte(22, 14, winner->netMessage.score ,true);
    a0be:	f8 01       	movw	r30, r16
    a0c0:	e1 59       	subi	r30, 0x91	; 145
    a0c2:	ff 4f       	sbci	r31, 0xFF	; 255
    a0c4:	21 e0       	ldi	r18, 0x01	; 1
    a0c6:	40 81       	ld	r20, Z
    a0c8:	6e e0       	ldi	r22, 0x0E	; 14
    a0ca:	70 e0       	ldi	r23, 0x00	; 0
    a0cc:	86 e1       	ldi	r24, 0x16	; 22
    a0ce:	90 e0       	ldi	r25, 0x00	; 0
    a0d0:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
    PrintChar(23, 14, '-');
    a0d4:	4d e2       	ldi	r20, 0x2D	; 45
    a0d6:	6e e0       	ldi	r22, 0x0E	; 14
    a0d8:	70 e0       	ldi	r23, 0x00	; 0
    a0da:	87 e1       	ldi	r24, 0x17	; 23
    a0dc:	90 e0       	ldi	r25, 0x00	; 0
    a0de:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
    PrintByte(26, 14, loser->netMessage.score ,true);
    a0e2:	c1 59       	subi	r28, 0x91	; 145
    a0e4:	df 4f       	sbci	r29, 0xFF	; 255
    a0e6:	21 e0       	ldi	r18, 0x01	; 1
    a0e8:	48 81       	ld	r20, Y
    a0ea:	6e e0       	ldi	r22, 0x0E	; 14
    a0ec:	70 e0       	ldi	r23, 0x00	; 0
    a0ee:	8a e1       	ldi	r24, 0x1A	; 26
    a0f0:	90 e0       	ldi	r25, 0x00	; 0
    a0f2:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    a0f6:	80 91 79 0b 	lds	r24, 0x0B79
    a0fa:	88 30       	cpi	r24, 0x08	; 8
    a0fc:	59 f4       	brne	.+22     	; 0xa114 <print_final_score+0xb2>
	{
		PrintChar(28, 14, '*');
    a0fe:	4a e2       	ldi	r20, 0x2A	; 42
    a100:	6e e0       	ldi	r22, 0x0E	; 14
    a102:	70 e0       	ldi	r23, 0x00	; 0
    a104:	8c e1       	ldi	r24, 0x1C	; 28
    a106:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    a108:	df 91       	pop	r29
    a10a:	cf 91       	pop	r28
    a10c:	1f 91       	pop	r17
    a10e:	0f 91       	pop	r16
    PrintByte(22, 14, winner->netMessage.score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->netMessage.score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    a110:	0c 94 21 49 	jmp	0x9242	; 0x9242 <PrintChar>
	}
}
    a114:	df 91       	pop	r29
    a116:	cf 91       	pop	r28
    a118:	1f 91       	pop	r17
    a11a:	0f 91       	pop	r16
    a11c:	08 95       	ret

0000a11e <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    a11e:	fc 01       	movw	r30, r24
    a120:	20 81       	ld	r18, Z
    a122:	31 81       	ldd	r19, Z+1	; 0x01
    a124:	21 70       	andi	r18, 0x01	; 1
    a126:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    a128:	81 e0       	ldi	r24, 0x01	; 1
    a12a:	23 2b       	or	r18, r19
    a12c:	09 f4       	brne	.+2      	; 0xa130 <shoot_pressed+0x12>
    a12e:	80 e0       	ldi	r24, 0x00	; 0
}
    a130:	08 95       	ret

0000a132 <get_delta>:

u16 get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a132:	fc 01       	movw	r30, r24
    a134:	21 8d       	ldd	r18, Z+25	; 0x19
    a136:	fb 01       	movw	r30, r22
    a138:	81 81       	ldd	r24, Z+1	; 0x01
    a13a:	92 81       	ldd	r25, Z+2	; 0x02
    a13c:	22 23       	and	r18, r18
    a13e:	29 f0       	breq	.+10     	; 0xa14a <get_delta+0x18>
		return s->speed / FRAME_TIME_INVERTED;
	return (s->speed + (s->speed / AI_SPEED_FACTOR_INVERTED)) / FRAME_TIME_INVERTED;
    a140:	9c 01       	movw	r18, r24
    a142:	36 95       	lsr	r19
    a144:	27 95       	ror	r18
    a146:	82 0f       	add	r24, r18
    a148:	93 1f       	adc	r25, r19
    a14a:	6c e3       	ldi	r22, 0x3C	; 60
    a14c:	70 e0       	ldi	r23, 0x00	; 0
    a14e:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
}
    a152:	cb 01       	movw	r24, r22
    a154:	08 95       	ret

0000a156 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a156:	cf 93       	push	r28
    a158:	df 93       	push	r29
    a15a:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a15c:	ac 01       	movw	r20, r24
    a15e:	4f 5f       	subi	r20, 0xFF	; 255
    a160:	5f 4f       	sbci	r21, 0xFF	; 255
    a162:	23 e0       	ldi	r18, 0x03	; 3
    a164:	60 e0       	ldi	r22, 0x00	; 0
    a166:	8a e0       	ldi	r24, 0x0A	; 10
    a168:	8c 0f       	add	r24, r28
    a16a:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
	Print(x, 0, (char*) strScore);
    a16e:	d0 e0       	ldi	r29, 0x00	; 0
    a170:	42 ed       	ldi	r20, 0xD2	; 210
    a172:	53 e0       	ldi	r21, 0x03	; 3
    a174:	60 e0       	ldi	r22, 0x00	; 0
    a176:	70 e0       	ldi	r23, 0x00	; 0
    a178:	ce 01       	movw	r24, r28
    a17a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(x, 1, (char*) strTotal);
    a17e:	4b ec       	ldi	r20, 0xCB	; 203
    a180:	53 e0       	ldi	r21, 0x03	; 3
    a182:	61 e0       	ldi	r22, 0x01	; 1
    a184:	70 e0       	ldi	r23, 0x00	; 0
    a186:	ce 01       	movw	r24, r28
	
}
    a188:	df 91       	pop	r29
    a18a:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    a18c:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>

0000a190 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a190:	0f 93       	push	r16
    a192:	1f 93       	push	r17
    a194:	cf 93       	push	r28
    a196:	df 93       	push	r29
    a198:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->netMessage.level_score, false);
    a19a:	c6 2f       	mov	r28, r22
    a19c:	d0 e0       	ldi	r29, 0x00	; 0
    a19e:	28 96       	adiw	r28, 0x08	; 8
    a1a0:	fc 01       	movw	r30, r24
    a1a2:	e0 59       	subi	r30, 0x90	; 144
    a1a4:	ff 4f       	sbci	r31, 0xFF	; 255
    a1a6:	20 e0       	ldi	r18, 0x00	; 0
    a1a8:	40 81       	ld	r20, Z
    a1aa:	60 e0       	ldi	r22, 0x00	; 0
    a1ac:	70 e0       	ldi	r23, 0x00	; 0
    a1ae:	ce 01       	movw	r24, r28
    a1b0:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
	PrintByte(x+8, 1, player->netMessage.score, false);
    a1b4:	f8 01       	movw	r30, r16
    a1b6:	e1 59       	subi	r30, 0x91	; 145
    a1b8:	ff 4f       	sbci	r31, 0xFF	; 255
    a1ba:	20 e0       	ldi	r18, 0x00	; 0
    a1bc:	40 81       	ld	r20, Z
    a1be:	61 e0       	ldi	r22, 0x01	; 1
    a1c0:	70 e0       	ldi	r23, 0x00	; 0
    a1c2:	ce 01       	movw	r24, r28
}
    a1c4:	df 91       	pop	r29
    a1c6:	cf 91       	pop	r28
    a1c8:	1f 91       	pop	r17
    a1ca:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->netMessage.level_score, false);
	PrintByte(x+8, 1, player->netMessage.score, false);
    a1cc:	0c 94 d3 48 	jmp	0x91a6	; 0x91a6 <PrintByte>

0000a1d0 <render_player>:
}

void render_player(Player* player, u8 sprite_index)
{
    a1d0:	0f 93       	push	r16
    a1d2:	1f 93       	push	r17
    a1d4:	cf 93       	push	r28
    a1d6:	df 93       	push	r29
    a1d8:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->netMessage.shared.x / 100, player->netMessage.shared.y / 100, 2, 2);
    a1da:	fc 01       	movw	r30, r24
    a1dc:	e8 58       	subi	r30, 0x88	; 136
    a1de:	ff 4f       	sbci	r31, 0xFF	; 255
    a1e0:	80 81       	ld	r24, Z
    a1e2:	91 81       	ldd	r25, Z+1	; 0x01
    a1e4:	c4 e6       	ldi	r28, 0x64	; 100
    a1e6:	d0 e0       	ldi	r29, 0x00	; 0
    a1e8:	be 01       	movw	r22, r28
    a1ea:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    a1ee:	46 2f       	mov	r20, r22
    a1f0:	32 97       	sbiw	r30, 0x02	; 2
    a1f2:	80 81       	ld	r24, Z
    a1f4:	91 81       	ldd	r25, Z+1	; 0x01
    a1f6:	be 01       	movw	r22, r28
    a1f8:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    a1fc:	02 e0       	ldi	r16, 0x02	; 2
    a1fe:	22 e0       	ldi	r18, 0x02	; 2
    a200:	81 2f       	mov	r24, r17
    a202:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
}
    a206:	df 91       	pop	r29
    a208:	cf 91       	pop	r28
    a20a:	1f 91       	pop	r17
    a20c:	0f 91       	pop	r16
    a20e:	08 95       	ret

0000a210 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    a210:	0f 93       	push	r16
    a212:	cf 93       	push	r28
    a214:	df 93       	push	r29
    a216:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    a218:	84 81       	ldd	r24, Z+4	; 0x04
    a21a:	88 23       	and	r24, r24
    a21c:	99 f0       	breq	.+38     	; 0xa244 <render_shot+0x34>
    a21e:	36 2f       	mov	r19, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x / 100, player->shot[i].shared.y / 100, 1, 1);
    a220:	87 a1       	ldd	r24, Z+39	; 0x27
    a222:	90 a5       	ldd	r25, Z+40	; 0x28
    a224:	c4 e6       	ldi	r28, 0x64	; 100
    a226:	d0 e0       	ldi	r29, 0x00	; 0
    a228:	be 01       	movw	r22, r28
    a22a:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    a22e:	46 2f       	mov	r20, r22
    a230:	85 a1       	ldd	r24, Z+37	; 0x25
    a232:	96 a1       	ldd	r25, Z+38	; 0x26
    a234:	be 01       	movw	r22, r28
    a236:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    a23a:	01 e0       	ldi	r16, 0x01	; 1
    a23c:	21 e0       	ldi	r18, 0x01	; 1
    a23e:	83 2f       	mov	r24, r19
    a240:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
			sprite_index++;
		}
	}
}
    a244:	df 91       	pop	r29
    a246:	cf 91       	pop	r28
    a248:	0f 91       	pop	r16
    a24a:	08 95       	ret

0000a24c <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    a24c:	ef 92       	push	r14
    a24e:	ff 92       	push	r15
    a250:	0f 93       	push	r16
    a252:	1f 93       	push	r17
    a254:	cf 93       	push	r28
    a256:	df 93       	push	r29
    a258:	ec 01       	movw	r28, r24
    a25a:	25 96       	adiw	r28, 0x05	; 5
    a25c:	8c 01       	movw	r16, r24
    a25e:	0f 5d       	subi	r16, 0xDF	; 223
    a260:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    a262:	8e e1       	ldi	r24, 0x1E	; 30
    a264:	e8 2e       	mov	r14, r24
    a266:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    a268:	88 85       	ldd	r24, Y+8	; 0x08
    a26a:	99 85       	ldd	r25, Y+9	; 0x09
    a26c:	89 2b       	or	r24, r25
    a26e:	c1 f0       	breq	.+48     	; 0xa2a0 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    a270:	ce 01       	movw	r24, r28
    a272:	04 97       	sbiw	r24, 0x04	; 4
    a274:	0e 94 21 4b 	call	0x9642	; 0x9642 <LBGetNextFrame>
    a278:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    a27a:	48 81       	ld	r20, Y
    a27c:	88 85       	ldd	r24, Y+8	; 0x08
    a27e:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a280:	b7 01       	movw	r22, r14
    a282:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    a286:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    a288:	44 23       	and	r20, r20
    a28a:	39 f0       	breq	.+14     	; 0xa29a <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a28c:	40 e0       	ldi	r20, 0x00	; 0
    a28e:	50 e0       	ldi	r21, 0x00	; 0
    a290:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
				ta->anims[i].tile_index = 0;
    a294:	19 86       	std	Y+9, r1	; 0x09
    a296:	18 86       	std	Y+8, r1	; 0x08
    a298:	03 c0       	rjmp	.+6      	; 0xa2a0 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    a29a:	a9 01       	movw	r20, r18
    a29c:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
    a2a0:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    a2a2:	c0 17       	cp	r28, r16
    a2a4:	d1 07       	cpc	r29, r17
    a2a6:	01 f7       	brne	.-64     	; 0xa268 <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    a2a8:	df 91       	pop	r29
    a2aa:	cf 91       	pop	r28
    a2ac:	1f 91       	pop	r17
    a2ae:	0f 91       	pop	r16
    a2b0:	ff 90       	pop	r15
    a2b2:	ef 90       	pop	r14
    a2b4:	08 95       	ret

0000a2b6 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    a2b6:	cf 93       	push	r28
    a2b8:	df 93       	push	r29
    a2ba:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    a2bc:	0e 94 46 4b 	call	0x968c	; 0x968c <LBGetNextFrameReverse>
    a2c0:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    a2c2:	4c 81       	ldd	r20, Y+4	; 0x04
    a2c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    a2c6:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a2c8:	6e e1       	ldi	r22, 0x1E	; 30
    a2ca:	70 e0       	ldi	r23, 0x00	; 0
    a2cc:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    a2d0:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    a2d2:	44 23       	and	r20, r20
    a2d4:	19 f0       	breq	.+6      	; 0xa2dc <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a2d6:	4f e9       	ldi	r20, 0x9F	; 159
    a2d8:	5a e6       	ldi	r21, 0x6A	; 106
    a2da:	01 c0       	rjmp	.+2      	; 0xa2de <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    a2dc:	a9 01       	movw	r20, r18
    a2de:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	}
	return ta->anim.looped;
}
    a2e2:	8c 81       	ldd	r24, Y+4	; 0x04
    a2e4:	df 91       	pop	r29
    a2e6:	cf 91       	pop	r28
    a2e8:	08 95       	ret

0000a2ea <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    a2ea:	ff 92       	push	r15
    a2ec:	0f 93       	push	r16
    a2ee:	1f 93       	push	r17
    a2f0:	cf 93       	push	r28
    a2f2:	df 93       	push	r29
    a2f4:	ec 01       	movw	r28, r24
    a2f6:	f6 2e       	mov	r15, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->netMessage.flags & EXPLODING_FLAG)
    a2f8:	8c 01       	movw	r16, r24
    a2fa:	0f 58       	subi	r16, 0x8F	; 143
    a2fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a2fe:	f8 01       	movw	r30, r16
    a300:	80 81       	ld	r24, Z
    a302:	80 ff       	sbrs	r24, 0
    a304:	18 c0       	rjmp	.+48     	; 0xa336 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    a306:	ce 01       	movw	r24, r28
    a308:	81 5a       	subi	r24, 0xA1	; 161
    a30a:	9f 4f       	sbci	r25, 0xFF	; 255
    a30c:	0e 94 21 4b 	call	0x9642	; 0x9642 <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    a310:	fe 01       	movw	r30, r28
    a312:	ed 59       	subi	r30, 0x9D	; 157
    a314:	ff 4f       	sbci	r31, 0xFF	; 255
    a316:	20 81       	ld	r18, Z
    a318:	22 23       	and	r18, r18
    a31a:	09 f4       	brne	.+2      	; 0xa31e <tank_map+0x34>
    a31c:	4e c0       	rjmp	.+156    	; 0xa3ba <tank_map+0xd0>
		{
			player->netMessage.flags = player->netMessage.flags ^ EXPLODING_FLAG;
    a31e:	f8 01       	movw	r30, r16
    a320:	80 81       	ld	r24, Z
    a322:	91 e0       	ldi	r25, 0x01	; 1
    a324:	98 27       	eor	r25, r24
    a326:	90 83       	st	Z, r25
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    a328:	ce 01       	movw	r24, r28
    a32a:	0e 94 d7 4e 	call	0x9dae	; 0x9dae <player_spawn>
	u8 t_flags = 0;

	if (player->netMessage.flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a32e:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->netMessage.flags = player->netMessage.flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    a330:	8f e4       	ldi	r24, 0x4F	; 79
    a332:	91 e3       	ldi	r25, 0x31	; 49
    a334:	43 c0       	rjmp	.+134    	; 0xa3bc <tank_map+0xd2>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    a336:	9a 85       	ldd	r25, Y+10	; 0x0a
    a338:	98 37       	cpi	r25, 0x78	; 120
    a33a:	11 f0       	breq	.+4      	; 0xa340 <tank_map+0x56>
		{
			player->grace_frame++;
    a33c:	9f 5f       	subi	r25, 0xFF	; 255
    a33e:	9a 87       	std	Y+10, r25	; 0x0a
		}
		switch (player->netMessage.shared.direction)
    a340:	fe 01       	movw	r30, r28
    a342:	ee 58       	subi	r30, 0x8E	; 142
    a344:	ff 4f       	sbci	r31, 0xFF	; 255
    a346:	90 81       	ld	r25, Z
    a348:	91 30       	cpi	r25, 0x01	; 1
    a34a:	61 f0       	breq	.+24     	; 0xa364 <tank_map+0x7a>
    a34c:	b0 f0       	brcs	.+44     	; 0xa37a <tank_map+0x90>
    a34e:	92 30       	cpi	r25, 0x02	; 2
    a350:	69 f0       	breq	.+26     	; 0xa36c <tank_map+0x82>
    a352:	93 30       	cpi	r25, 0x03	; 3
    a354:	91 f4       	brne	.+36     	; 0xa37a <tank_map+0x90>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    a356:	ce 01       	movw	r24, r28
    a358:	8d 5a       	subi	r24, 0xAD	; 173
    a35a:	9f 4f       	sbci	r25, 0xFF	; 255
    a35c:	0e 94 21 4b 	call	0x9642	; 0x9642 <LBGetNextFrame>
    a360:	41 e0       	ldi	r20, 0x01	; 1
    a362:	11 c0       	rjmp	.+34     	; 0xa386 <tank_map+0x9c>
			player->grace_frame++;
		}
		switch (player->netMessage.shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    a364:	ce 01       	movw	r24, r28
    a366:	8d 5a       	subi	r24, 0xAD	; 173
    a368:	9f 4f       	sbci	r25, 0xFF	; 255
    a36a:	0a c0       	rjmp	.+20     	; 0xa380 <tank_map+0x96>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    a36c:	ce 01       	movw	r24, r28
    a36e:	89 5b       	subi	r24, 0xB9	; 185
    a370:	9f 4f       	sbci	r25, 0xFF	; 255
    a372:	0e 94 21 4b 	call	0x9642	; 0x9642 <LBGetNextFrame>
    a376:	42 e0       	ldi	r20, 0x02	; 2
    a378:	06 c0       	rjmp	.+12     	; 0xa386 <tank_map+0x9c>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    a37a:	ce 01       	movw	r24, r28
    a37c:	89 5b       	subi	r24, 0xB9	; 185
    a37e:	9f 4f       	sbci	r25, 0xFF	; 255
    a380:	0e 94 21 4b 	call	0x9642	; 0x9642 <LBGetNextFrame>
    a384:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    a386:	2a 85       	ldd	r18, Y+10	; 0x0a
    a388:	28 37       	cpi	r18, 0x78	; 120
    a38a:	31 f0       	breq	.+12     	; 0xa398 <tank_map+0xae>
    a38c:	20 91 7d 0b 	lds	r18, 0x0B7D
    a390:	22 23       	and	r18, r18
    a392:	11 f0       	breq	.+4      	; 0xa398 <tank_map+0xae>
		{
			t_map = (char*) map_tank_blank;
    a394:	8f e4       	ldi	r24, 0x4F	; 79
    a396:	91 e3       	ldi	r25, 0x31	; 49
		}
		game.toggle_counter--;
    a398:	20 91 7c 0b 	lds	r18, 0x0B7C
    a39c:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    a39e:	19 f0       	breq	.+6      	; 0xa3a6 <tank_map+0xbc>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    a3a0:	20 93 7c 0b 	sts	0x0B7C, r18
    a3a4:	0b c0       	rjmp	.+22     	; 0xa3bc <tank_map+0xd2>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    a3a6:	24 e1       	ldi	r18, 0x14	; 20
    a3a8:	20 93 7c 0b 	sts	0x0B7C, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    a3ac:	30 91 7d 0b 	lds	r19, 0x0B7D
    a3b0:	21 e0       	ldi	r18, 0x01	; 1
    a3b2:	23 27       	eor	r18, r19
    a3b4:	20 93 7d 0b 	sts	0x0B7D, r18
    a3b8:	01 c0       	rjmp	.+2      	; 0xa3bc <tank_map+0xd2>
	u8 t_flags = 0;

	if (player->netMessage.flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a3ba:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    a3bc:	bc 01       	movw	r22, r24
    a3be:	8f 2d       	mov	r24, r15
    a3c0:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    a3c4:	84 e0       	ldi	r24, 0x04	; 4
    a3c6:	8f 0d       	add	r24, r15
    a3c8:	df 91       	pop	r29
    a3ca:	cf 91       	pop	r28
    a3cc:	1f 91       	pop	r17
    a3ce:	0f 91       	pop	r16
    a3d0:	ff 90       	pop	r15
    a3d2:	08 95       	ret

0000a3d4 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    a3d4:	cf 93       	push	r28
    a3d6:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    a3d8:	fc 01       	movw	r30, r24
    a3da:	24 a5       	ldd	r18, Z+44	; 0x2c
    a3dc:	22 23       	and	r18, r18
    a3de:	c9 f0       	breq	.+50     	; 0xa412 <shot_map+0x3e>
		{
			switch (shot->shared.direction)
    a3e0:	21 a1       	ldd	r18, Z+33	; 0x21
    a3e2:	21 30       	cpi	r18, 0x01	; 1
    a3e4:	51 f0       	breq	.+20     	; 0xa3fa <shot_map+0x26>
    a3e6:	98 f0       	brcs	.+38     	; 0xa40e <shot_map+0x3a>
    a3e8:	22 30       	cpi	r18, 0x02	; 2
    a3ea:	61 f0       	breq	.+24     	; 0xa404 <shot_map+0x30>
    a3ec:	23 30       	cpi	r18, 0x03	; 3
    a3ee:	79 f4       	brne	.+30     	; 0xa40e <shot_map+0x3a>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    a3f0:	cb 96       	adiw	r24, 0x3b	; 59
    a3f2:	0e 94 21 4b 	call	0x9642	; 0x9642 <LBGetNextFrame>
    a3f6:	41 e0       	ldi	r20, 0x01	; 1
    a3f8:	0f c0       	rjmp	.+30     	; 0xa418 <shot_map+0x44>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    a3fa:	cb 96       	adiw	r24, 0x3b	; 59
    a3fc:	0e 94 21 4b 	call	0x9642	; 0x9642 <LBGetNextFrame>
    a400:	40 e0       	ldi	r20, 0x00	; 0
    a402:	0a c0       	rjmp	.+20     	; 0xa418 <shot_map+0x44>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    a404:	8f 96       	adiw	r24, 0x2f	; 47
    a406:	0e 94 21 4b 	call	0x9642	; 0x9642 <LBGetNextFrame>
    a40a:	42 e0       	ldi	r20, 0x02	; 2
    a40c:	05 c0       	rjmp	.+10     	; 0xa418 <shot_map+0x44>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    a40e:	8f 96       	adiw	r24, 0x2f	; 47
    a410:	f5 cf       	rjmp	.-22     	; 0xa3fc <shot_map+0x28>
    a412:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    a414:	8f e4       	ldi	r24, 0x4F	; 79
    a416:	91 e3       	ldi	r25, 0x31	; 49
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    a418:	bc 01       	movw	r22, r24
    a41a:	8c 2f       	mov	r24, r28
    a41c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    a420:	81 e0       	ldi	r24, 0x01	; 1
    a422:	8c 0f       	add	r24, r28
    a424:	cf 91       	pop	r28
    a426:	08 95       	ret

0000a428 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    a428:	fc 01       	movw	r30, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    a42a:	80 81       	ld	r24, Z
    a42c:	81 11       	cpse	r24, r1
    a42e:	11 c0       	rjmp	.+34     	; 0xa452 <recoil_sprite+0x2a>
	{
		tile = (sprite->y / 800) + 1;
    a430:	86 81       	ldd	r24, Z+6	; 0x06
    a432:	97 81       	ldd	r25, Z+7	; 0x07
    a434:	20 e2       	ldi	r18, 0x20	; 32
    a436:	33 e0       	ldi	r19, 0x03	; 3
    a438:	b9 01       	movw	r22, r18
    a43a:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    a43e:	81 e0       	ldi	r24, 0x01	; 1
    a440:	86 0f       	add	r24, r22
		sprite->y = tile * 800;
    a442:	82 9f       	mul	r24, r18
    a444:	a0 01       	movw	r20, r0
    a446:	83 9f       	mul	r24, r19
    a448:	50 0d       	add	r21, r0
    a44a:	11 24       	eor	r1, r1
    a44c:	57 83       	std	Z+7, r21	; 0x07
    a44e:	46 83       	std	Z+6, r20	; 0x06
    a450:	36 c0       	rjmp	.+108    	; 0xa4be <recoil_sprite+0x96>
	}
	else if (sprite->direction == D_RIGHT)
    a452:	81 30       	cpi	r24, 0x01	; 1
    a454:	89 f4       	brne	.+34     	; 0xa478 <recoil_sprite+0x50>
	{
		tile = sprite->x / 800;
    a456:	84 81       	ldd	r24, Z+4	; 0x04
    a458:	95 81       	ldd	r25, Z+5	; 0x05
    a45a:	20 e2       	ldi	r18, 0x20	; 32
    a45c:	33 e0       	ldi	r19, 0x03	; 3
    a45e:	b9 01       	movw	r22, r18
    a460:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
		sprite->x = tile * 800;
    a464:	62 9f       	mul	r22, r18
    a466:	c0 01       	movw	r24, r0
    a468:	63 9f       	mul	r22, r19
    a46a:	90 0d       	add	r25, r0
    a46c:	72 9f       	mul	r23, r18
    a46e:	90 0d       	add	r25, r0
    a470:	11 24       	eor	r1, r1
    a472:	95 83       	std	Z+5, r25	; 0x05
    a474:	84 83       	std	Z+4, r24	; 0x04
    a476:	23 c0       	rjmp	.+70     	; 0xa4be <recoil_sprite+0x96>
	}
	else if (sprite->direction == D_DOWN)
    a478:	82 30       	cpi	r24, 0x02	; 2
    a47a:	89 f4       	brne	.+34     	; 0xa49e <recoil_sprite+0x76>
	{
		tile = sprite->y / 800;
    a47c:	86 81       	ldd	r24, Z+6	; 0x06
    a47e:	97 81       	ldd	r25, Z+7	; 0x07
    a480:	20 e2       	ldi	r18, 0x20	; 32
    a482:	33 e0       	ldi	r19, 0x03	; 3
    a484:	b9 01       	movw	r22, r18
    a486:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
		sprite->y = tile * 800;
    a48a:	62 9f       	mul	r22, r18
    a48c:	c0 01       	movw	r24, r0
    a48e:	63 9f       	mul	r22, r19
    a490:	90 0d       	add	r25, r0
    a492:	72 9f       	mul	r23, r18
    a494:	90 0d       	add	r25, r0
    a496:	11 24       	eor	r1, r1
    a498:	97 83       	std	Z+7, r25	; 0x07
    a49a:	86 83       	std	Z+6, r24	; 0x06
    a49c:	10 c0       	rjmp	.+32     	; 0xa4be <recoil_sprite+0x96>
	}
	else
	{
		tile = (sprite->x / 800) + 1;
    a49e:	84 81       	ldd	r24, Z+4	; 0x04
    a4a0:	95 81       	ldd	r25, Z+5	; 0x05
    a4a2:	20 e2       	ldi	r18, 0x20	; 32
    a4a4:	33 e0       	ldi	r19, 0x03	; 3
    a4a6:	b9 01       	movw	r22, r18
    a4a8:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    a4ac:	81 e0       	ldi	r24, 0x01	; 1
    a4ae:	86 0f       	add	r24, r22
		sprite->x = tile * 800;
    a4b0:	82 9f       	mul	r24, r18
    a4b2:	a0 01       	movw	r20, r0
    a4b4:	83 9f       	mul	r24, r19
    a4b6:	50 0d       	add	r21, r0
    a4b8:	11 24       	eor	r1, r1
    a4ba:	55 83       	std	Z+5, r21	; 0x05
    a4bc:	44 83       	std	Z+4, r20	; 0x04
	}
	sprite->recoiled = 1;
    a4be:	81 e0       	ldi	r24, 0x01	; 1
    a4c0:	83 83       	std	Z+3, r24	; 0x03
    a4c2:	08 95       	ret

0000a4c4 <recoil_sprite_fine>:
}

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    a4c4:	cf 93       	push	r28
    a4c6:	df 93       	push	r29
    a4c8:	eb 01       	movw	r28, r22
	u16 speed = get_delta(p, sprite);
    a4ca:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
	
	if (sprite->direction == D_UP)
    a4ce:	28 81       	ld	r18, Y
    a4d0:	21 11       	cpse	r18, r1
    a4d2:	05 c0       	rjmp	.+10     	; 0xa4de <recoil_sprite_fine+0x1a>
	{
		sprite->y += speed;
    a4d4:	2e 81       	ldd	r18, Y+6	; 0x06
    a4d6:	3f 81       	ldd	r19, Y+7	; 0x07
    a4d8:	82 0f       	add	r24, r18
    a4da:	93 1f       	adc	r25, r19
    a4dc:	11 c0       	rjmp	.+34     	; 0xa500 <recoil_sprite_fine+0x3c>
	}
	else if (sprite->direction == D_RIGHT)
    a4de:	21 30       	cpi	r18, 0x01	; 1
    a4e0:	39 f4       	brne	.+14     	; 0xa4f0 <recoil_sprite_fine+0x2c>
	{
		sprite->x -= speed;
    a4e2:	2c 81       	ldd	r18, Y+4	; 0x04
    a4e4:	3d 81       	ldd	r19, Y+5	; 0x05
    a4e6:	a9 01       	movw	r20, r18
    a4e8:	48 1b       	sub	r20, r24
    a4ea:	59 0b       	sbc	r21, r25
    a4ec:	ca 01       	movw	r24, r20
    a4ee:	0f c0       	rjmp	.+30     	; 0xa50e <recoil_sprite_fine+0x4a>
	}
	else if (sprite->direction == D_DOWN)
    a4f0:	22 30       	cpi	r18, 0x02	; 2
    a4f2:	49 f4       	brne	.+18     	; 0xa506 <recoil_sprite_fine+0x42>
	{
		sprite->y -= speed;
    a4f4:	2e 81       	ldd	r18, Y+6	; 0x06
    a4f6:	3f 81       	ldd	r19, Y+7	; 0x07
    a4f8:	a9 01       	movw	r20, r18
    a4fa:	48 1b       	sub	r20, r24
    a4fc:	59 0b       	sbc	r21, r25
    a4fe:	ca 01       	movw	r24, r20
    a500:	9f 83       	std	Y+7, r25	; 0x07
    a502:	8e 83       	std	Y+6, r24	; 0x06
    a504:	06 c0       	rjmp	.+12     	; 0xa512 <recoil_sprite_fine+0x4e>
	}
	else
	{
		sprite->x += speed;
    a506:	2c 81       	ldd	r18, Y+4	; 0x04
    a508:	3d 81       	ldd	r19, Y+5	; 0x05
    a50a:	82 0f       	add	r24, r18
    a50c:	93 1f       	adc	r25, r19
    a50e:	9d 83       	std	Y+5, r25	; 0x05
    a510:	8c 83       	std	Y+4, r24	; 0x04
	}
	sprite->recoiled = 1;
    a512:	81 e0       	ldi	r24, 0x01	; 1
    a514:	8b 83       	std	Y+3, r24	; 0x03
}
    a516:	df 91       	pop	r29
    a518:	cf 91       	pop	r28
    a51a:	08 95       	ret

0000a51c <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a51c:	81 5d       	subi	r24, 0xD1	; 209
    a51e:	93 4f       	sbci	r25, 0xF3	; 243
    a520:	fc 01       	movw	r30, r24
    a522:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a524:	81 30       	cpi	r24, 0x01	; 1
    a526:	31 f0       	breq	.+12     	; 0xa534 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    a528:	82 30       	cpi	r24, 0x02	; 2
    a52a:	31 f0       	breq	.+12     	; 0xa538 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    a52c:	87 33       	cpi	r24, 0x37	; 55
    a52e:	31 f0       	breq	.+12     	; 0xa53c <solid_square_tile+0x20>

	return 0;
    a530:	80 e0       	ldi	r24, 0x00	; 0
    a532:	08 95       	ret
    a534:	81 e0       	ldi	r24, 0x01	; 1
    a536:	08 95       	ret
    a538:	82 e0       	ldi	r24, 0x02	; 2
    a53a:	08 95       	ret
    a53c:	87 e3       	ldi	r24, 0x37	; 55
}
    a53e:	08 95       	ret

0000a540 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a540:	81 5d       	subi	r24, 0xD1	; 209
    a542:	93 4f       	sbci	r25, 0xF3	; 243
    a544:	fc 01       	movw	r30, r24
    a546:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    a548:	83 30       	cpi	r24, 0x03	; 3
    a54a:	41 f0       	breq	.+16     	; 0xa55c <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    a54c:	86 30       	cpi	r24, 0x06	; 6
    a54e:	41 f0       	breq	.+16     	; 0xa560 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    a550:	84 30       	cpi	r24, 0x04	; 4
    a552:	41 f0       	breq	.+16     	; 0xa564 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    a554:	85 30       	cpi	r24, 0x05	; 5
    a556:	41 f0       	breq	.+16     	; 0xa568 <solid_directional_tile+0x28>
	
	return 0;
    a558:	80 e0       	ldi	r24, 0x00	; 0
    a55a:	08 95       	ret
    a55c:	83 e0       	ldi	r24, 0x03	; 3
    a55e:	08 95       	ret
    a560:	86 e0       	ldi	r24, 0x06	; 6
    a562:	08 95       	ret
    a564:	84 e0       	ldi	r24, 0x04	; 4
    a566:	08 95       	ret
    a568:	85 e0       	ldi	r24, 0x05	; 5
}
    a56a:	08 95       	ret

0000a56c <solid_tile>:

u8 solid_tile(int tile_index)
{
    a56c:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    a56e:	fc 01       	movw	r30, r24
    a570:	e1 5d       	subi	r30, 0xD1	; 209
    a572:	f3 4f       	sbci	r31, 0xF3	; 243
    a574:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a576:	91 30       	cpi	r25, 0x01	; 1
    a578:	39 f0       	breq	.+14     	; 0xa588 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    a57a:	92 30       	cpi	r25, 0x02	; 2
    a57c:	39 f0       	breq	.+14     	; 0xa58c <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    a57e:	97 33       	cpi	r25, 0x37	; 55
    a580:	39 f0       	breq	.+14     	; 0xa590 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    a582:	c9 01       	movw	r24, r18
    a584:	0c 94 a0 52 	jmp	0xa540	; 0xa540 <solid_directional_tile>
    a588:	81 e0       	ldi	r24, 0x01	; 1
    a58a:	08 95       	ret
    a58c:	82 e0       	ldi	r24, 0x02	; 2
    a58e:	08 95       	ret
    a590:	87 e3       	ldi	r24, 0x37	; 55
}
    a592:	08 95       	ret

0000a594 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u16 x, u16 y, u16 width, u16 height)
{
    a594:	af 92       	push	r10
    a596:	bf 92       	push	r11
    a598:	cf 92       	push	r12
    a59a:	df 92       	push	r13
    a59c:	ef 92       	push	r14
    a59e:	ff 92       	push	r15
    a5a0:	0f 93       	push	r16
    a5a2:	1f 93       	push	r17
    a5a4:	cf 93       	push	r28
    a5a6:	df 93       	push	r29
    a5a8:	eb 01       	movw	r28, r22
    a5aa:	7a 01       	movw	r14, r20
	u8 tile = level.level_map[tile_index];
    a5ac:	fc 01       	movw	r30, r24
    a5ae:	e1 5d       	subi	r30, 0xD1	; 209
    a5b0:	f3 4f       	sbci	r31, 0xF3	; 243
    a5b2:	d1 80       	ldd	r13, Z+1	; 0x01
	u16 tile_x = (tile_index % 30) * 800;
    a5b4:	6e e1       	ldi	r22, 0x1E	; 30
    a5b6:	70 e0       	ldi	r23, 0x00	; 0
    a5b8:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    a5bc:	40 e2       	ldi	r20, 0x20	; 32
    a5be:	53 e0       	ldi	r21, 0x03	; 3
    a5c0:	84 9f       	mul	r24, r20
    a5c2:	f0 01       	movw	r30, r0
    a5c4:	85 9f       	mul	r24, r21
    a5c6:	f0 0d       	add	r31, r0
    a5c8:	94 9f       	mul	r25, r20
    a5ca:	f0 0d       	add	r31, r0
    a5cc:	11 24       	eor	r1, r1
	u16 tile_y = (tile_index / 30 + 3) * 800;
    a5ce:	6d 5f       	subi	r22, 0xFD	; 253
    a5d0:	7f 4f       	sbci	r23, 0xFF	; 255
    a5d2:	64 9f       	mul	r22, r20
    a5d4:	c0 01       	movw	r24, r0
    a5d6:	65 9f       	mul	r22, r21
    a5d8:	90 0d       	add	r25, r0
    a5da:	74 9f       	mul	r23, r20
    a5dc:	90 0d       	add	r25, r0
    a5de:	11 24       	eor	r1, r1
		if (LBLineIntersect(tile_x, tile_y, tile_x+799, tile_y+799, x+width-1, y, x+width-1, y+height-1)) return tile;
		if (LBLineIntersect(tile_x, tile_y, tile_x+799, tile_y+799, x, y+height-1, x+width-1, y+height-1)) return tile;
	}
	
	return 0;*/
	if (tile == L_TR)
    a5e0:	64 e0       	ldi	r22, 0x04	; 4
    a5e2:	d6 12       	cpse	r13, r22
    a5e4:	3a c0       	rjmp	.+116    	; 0xa65a <collides_directional_tile+0xc6>
	{
		if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y >= tile_y && y < tile_y+800)
    a5e6:	2c 0f       	add	r18, r28
    a5e8:	3d 1f       	adc	r19, r29
    a5ea:	a9 01       	movw	r20, r18
    a5ec:	41 50       	subi	r20, 0x01	; 1
    a5ee:	51 09       	sbc	r21, r1
    a5f0:	bf 01       	movw	r22, r30
    a5f2:	60 5e       	subi	r22, 0xE0	; 224
    a5f4:	7c 4f       	sbci	r23, 0xFC	; 252
    a5f6:	46 17       	cp	r20, r22
    a5f8:	57 07       	cpc	r21, r23
    a5fa:	08 f0       	brcs	.+2      	; 0xa5fe <collides_directional_tile+0x6a>
    a5fc:	34 c1       	rjmp	.+616    	; 0xa866 <collides_directional_tile+0x2d2>
    a5fe:	4e 17       	cp	r20, r30
    a600:	5f 07       	cpc	r21, r31
    a602:	08 f4       	brcc	.+2      	; 0xa606 <collides_directional_tile+0x72>
    a604:	30 c1       	rjmp	.+608    	; 0xa866 <collides_directional_tile+0x2d2>
    a606:	e8 16       	cp	r14, r24
    a608:	f9 06       	cpc	r15, r25
    a60a:	30 f0       	brcs	.+12     	; 0xa618 <collides_directional_tile+0x84>
    a60c:	dc 01       	movw	r26, r24
    a60e:	a0 5e       	subi	r26, 0xE0	; 224
    a610:	bc 4f       	sbci	r27, 0xFC	; 252
    a612:	ea 16       	cp	r14, r26
    a614:	fb 06       	cpc	r15, r27
    a616:	b8 f0       	brcs	.+46     	; 0xa646 <collides_directional_tile+0xb2>
		{
			if (y <= tile_y+(x+width-1-tile_x)) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a618:	ce 17       	cp	r28, r30
    a61a:	df 07       	cpc	r29, r31
    a61c:	08 f4       	brcc	.+2      	; 0xa620 <collides_directional_tile+0x8c>
    a61e:	0e c1       	rjmp	.+540    	; 0xa83c <collides_directional_tile+0x2a8>
    a620:	c6 17       	cp	r28, r22
    a622:	d7 07       	cpc	r29, r23
    a624:	08 f0       	brcs	.+2      	; 0xa628 <collides_directional_tile+0x94>
    a626:	0a c1       	rjmp	.+532    	; 0xa83c <collides_directional_tile+0x2a8>
    a628:	e8 16       	cp	r14, r24
    a62a:	f9 06       	cpc	r15, r25
    a62c:	08 f4       	brcc	.+2      	; 0xa630 <collides_directional_tile+0x9c>
    a62e:	fe c0       	rjmp	.+508    	; 0xa82c <collides_directional_tile+0x298>
    a630:	dc 01       	movw	r26, r24
    a632:	a0 5e       	subi	r26, 0xE0	; 224
    a634:	bc 4f       	sbci	r27, 0xFC	; 252
    a636:	ea 16       	cp	r14, r26
    a638:	fb 06       	cpc	r15, r27
    a63a:	08 f0       	brcs	.+2      	; 0xa63e <collides_directional_tile+0xaa>
    a63c:	f7 c0       	rjmp	.+494    	; 0xa82c <collides_directional_tile+0x298>
		{
			if (x+width >= tile_x+800) return 1;
    a63e:	26 17       	cp	r18, r22
    a640:	37 07       	cpc	r19, r23
    a642:	08 f0       	brcs	.+2      	; 0xa646 <collides_directional_tile+0xb2>
    a644:	0e c1       	rjmp	.+540    	; 0xa862 <collides_directional_tile+0x2ce>
    a646:	8e 1b       	sub	r24, r30
    a648:	9f 0b       	sbc	r25, r31
			else if (y <= tile_y+(x+width-1-tile_x)) return 1;
		}
		else if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y+height-1 >= tile_y && y+height-1 < tile_y+800)
		{
			if (y <= tile_y) return 1;
			else if (y <= tile_y+(x+width-1-tile_x)) return 1;
    a64a:	48 0f       	add	r20, r24
    a64c:	59 1f       	adc	r21, r25
    a64e:	81 e0       	ldi	r24, 0x01	; 1
    a650:	4e 15       	cp	r20, r14
    a652:	5f 05       	cpc	r21, r15
    a654:	08 f0       	brcs	.+2      	; 0xa658 <collides_directional_tile+0xc4>
    a656:	5c c1       	rjmp	.+696    	; 0xa910 <collides_directional_tile+0x37c>
    a658:	5a c1       	rjmp	.+692    	; 0xa90e <collides_directional_tile+0x37a>
		}
	}
	
	else if (tile == L_TL)
    a65a:	63 e0       	ldi	r22, 0x03	; 3
    a65c:	d6 12       	cpse	r13, r22
    a65e:	55 c0       	rjmp	.+170    	; 0xa70a <collides_directional_tile+0x176>
    a660:	bf 01       	movw	r22, r30
    a662:	60 5e       	subi	r22, 0xE0	; 224
    a664:	7c 4f       	sbci	r23, 0xFC	; 252
	{
		if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a666:	ce 17       	cp	r28, r30
    a668:	df 07       	cpc	r29, r31
    a66a:	88 f0       	brcs	.+34     	; 0xa68e <collides_directional_tile+0xfa>
    a66c:	c6 17       	cp	r28, r22
    a66e:	d7 07       	cpc	r29, r23
    a670:	70 f4       	brcc	.+28     	; 0xa68e <collides_directional_tile+0xfa>
    a672:	e8 16       	cp	r14, r24
    a674:	f9 06       	cpc	r15, r25
    a676:	58 f0       	brcs	.+22     	; 0xa68e <collides_directional_tile+0xfa>
    a678:	dc 01       	movw	r26, r24
    a67a:	a0 5e       	subi	r26, 0xE0	; 224
    a67c:	bc 4f       	sbci	r27, 0xFC	; 252
    a67e:	ea 16       	cp	r14, r26
    a680:	fb 06       	cpc	r15, r27
    a682:	28 f4       	brcc	.+10     	; 0xa68e <collides_directional_tile+0xfa>
    a684:	4c 1b       	sub	r20, r28
    a686:	5d 0b       	sbc	r21, r29
    a688:	e4 0f       	add	r30, r20
    a68a:	f5 1f       	adc	r31, r21
    a68c:	36 c0       	rjmp	.+108    	; 0xa6fa <collides_directional_tile+0x166>
    a68e:	21 50       	subi	r18, 0x01	; 1
    a690:	31 09       	sbc	r19, r1
		{
			if (y < tile_y+(tile_x+800-x)) return 1;
		}
		else if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y >= tile_y && y < tile_y+800)
    a692:	2c 0f       	add	r18, r28
    a694:	3d 1f       	adc	r19, r29
    a696:	26 17       	cp	r18, r22
    a698:	37 07       	cpc	r19, r23
    a69a:	80 f4       	brcc	.+32     	; 0xa6bc <collides_directional_tile+0x128>
    a69c:	2e 17       	cp	r18, r30
    a69e:	3f 07       	cpc	r19, r31
    a6a0:	68 f0       	brcs	.+26     	; 0xa6bc <collides_directional_tile+0x128>
    a6a2:	e8 16       	cp	r14, r24
    a6a4:	f9 06       	cpc	r15, r25
    a6a6:	50 f0       	brcs	.+20     	; 0xa6bc <collides_directional_tile+0x128>
    a6a8:	9c 01       	movw	r18, r24
    a6aa:	20 5e       	subi	r18, 0xE0	; 224
    a6ac:	3c 4f       	sbci	r19, 0xFC	; 252
    a6ae:	e2 16       	cp	r14, r18
    a6b0:	f3 06       	cpc	r15, r19
    a6b2:	20 f4       	brcc	.+8      	; 0xa6bc <collides_directional_tile+0x128>
		{
			if (x <= tile_x) return 1;
    a6b4:	ec 17       	cp	r30, r28
    a6b6:	fd 07       	cpc	r31, r29
    a6b8:	e0 f0       	brcs	.+56     	; 0xa6f2 <collides_directional_tile+0x15e>
    a6ba:	d3 c0       	rjmp	.+422    	; 0xa862 <collides_directional_tile+0x2ce>
			else if (y < tile_y+(tile_x+800-x)) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a6bc:	ce 17       	cp	r28, r30
    a6be:	df 07       	cpc	r29, r31
    a6c0:	08 f4       	brcc	.+2      	; 0xa6c4 <collides_directional_tile+0x130>
    a6c2:	25 c1       	rjmp	.+586    	; 0xa90e <collides_directional_tile+0x37a>
    a6c4:	c6 17       	cp	r28, r22
    a6c6:	d7 07       	cpc	r29, r23
    a6c8:	08 f0       	brcs	.+2      	; 0xa6cc <collides_directional_tile+0x138>
    a6ca:	21 c1       	rjmp	.+578    	; 0xa90e <collides_directional_tile+0x37a>
    a6cc:	01 50       	subi	r16, 0x01	; 1
    a6ce:	11 09       	sbc	r17, r1
    a6d0:	0e 0d       	add	r16, r14
    a6d2:	1f 1d       	adc	r17, r15
    a6d4:	08 17       	cp	r16, r24
    a6d6:	19 07       	cpc	r17, r25
    a6d8:	08 f4       	brcc	.+2      	; 0xa6dc <collides_directional_tile+0x148>
    a6da:	19 c1       	rjmp	.+562    	; 0xa90e <collides_directional_tile+0x37a>
    a6dc:	9c 01       	movw	r18, r24
    a6de:	20 5e       	subi	r18, 0xE0	; 224
    a6e0:	3c 4f       	sbci	r19, 0xFC	; 252
    a6e2:	02 17       	cp	r16, r18
    a6e4:	13 07       	cpc	r17, r19
    a6e6:	08 f0       	brcs	.+2      	; 0xa6ea <collides_directional_tile+0x156>
    a6e8:	12 c1       	rjmp	.+548    	; 0xa90e <collides_directional_tile+0x37a>
		{
			if (y <= tile_y) return 1;
    a6ea:	8e 15       	cp	r24, r14
    a6ec:	9f 05       	cpc	r25, r15
    a6ee:	08 f0       	brcs	.+2      	; 0xa6f2 <collides_directional_tile+0x15e>
    a6f0:	b8 c0       	rjmp	.+368    	; 0xa862 <collides_directional_tile+0x2ce>
    a6f2:	ec 1b       	sub	r30, r28
    a6f4:	fd 0b       	sbc	r31, r29
    a6f6:	e0 5e       	subi	r30, 0xE0	; 224
    a6f8:	fc 4f       	sbci	r31, 0xFC	; 252
			else if (y < tile_y+(tile_x+800-x)) return 1;
    a6fa:	e8 0f       	add	r30, r24
    a6fc:	f9 1f       	adc	r31, r25
    a6fe:	81 e0       	ldi	r24, 0x01	; 1
    a700:	ee 16       	cp	r14, r30
    a702:	ff 06       	cpc	r15, r31
    a704:	08 f4       	brcc	.+2      	; 0xa708 <collides_directional_tile+0x174>
    a706:	04 c1       	rjmp	.+520    	; 0xa910 <collides_directional_tile+0x37c>
    a708:	02 c1       	rjmp	.+516    	; 0xa90e <collides_directional_tile+0x37a>
		}
	}
	
	else if (tile == L_BL)
    a70a:	65 e0       	ldi	r22, 0x05	; 5
    a70c:	d6 12       	cpse	r13, r22
    a70e:	5f c0       	rjmp	.+190    	; 0xa7ce <collides_directional_tile+0x23a>
	{
		if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a710:	ce 17       	cp	r28, r30
    a712:	df 07       	cpc	r29, r31
    a714:	80 f1       	brcs	.+96     	; 0xa776 <collides_directional_tile+0x1e2>
    a716:	af 01       	movw	r20, r30
    a718:	40 5e       	subi	r20, 0xE0	; 224
    a71a:	5c 4f       	sbci	r21, 0xFC	; 252
    a71c:	c4 17       	cp	r28, r20
    a71e:	d5 07       	cpc	r29, r21
    a720:	50 f5       	brcc	.+84     	; 0xa776 <collides_directional_tile+0x1e2>
    a722:	a8 01       	movw	r20, r16
    a724:	41 50       	subi	r20, 0x01	; 1
    a726:	51 09       	sbc	r21, r1
    a728:	4e 0d       	add	r20, r14
    a72a:	5f 1d       	adc	r21, r15
    a72c:	48 17       	cp	r20, r24
    a72e:	59 07       	cpc	r21, r25
    a730:	80 f0       	brcs	.+32     	; 0xa752 <collides_directional_tile+0x1be>
    a732:	bc 01       	movw	r22, r24
    a734:	60 5e       	subi	r22, 0xE0	; 224
    a736:	7c 4f       	sbci	r23, 0xFC	; 252
    a738:	46 17       	cp	r20, r22
    a73a:	57 07       	cpc	r21, r23
    a73c:	50 f4       	brcc	.+20     	; 0xa752 <collides_directional_tile+0x1be>
    a73e:	8e 1b       	sub	r24, r30
    a740:	9f 0b       	sbc	r25, r31
		{
			if (y+height-1 >= tile_y+(x-tile_x)) return 1;
    a742:	c8 0f       	add	r28, r24
    a744:	d9 1f       	adc	r29, r25
    a746:	81 e0       	ldi	r24, 0x01	; 1
    a748:	4c 17       	cp	r20, r28
    a74a:	5d 07       	cpc	r21, r29
    a74c:	08 f0       	brcs	.+2      	; 0xa750 <collides_directional_tile+0x1bc>
    a74e:	e0 c0       	rjmp	.+448    	; 0xa910 <collides_directional_tile+0x37c>
    a750:	de c0       	rjmp	.+444    	; 0xa90e <collides_directional_tile+0x37a>
		}
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a752:	e8 16       	cp	r14, r24
    a754:	f9 06       	cpc	r15, r25
    a756:	78 f0       	brcs	.+30     	; 0xa776 <collides_directional_tile+0x1e2>
    a758:	ac 01       	movw	r20, r24
    a75a:	40 5e       	subi	r20, 0xE0	; 224
    a75c:	5c 4f       	sbci	r21, 0xFC	; 252
    a75e:	e4 16       	cp	r14, r20
    a760:	f5 06       	cpc	r15, r21
    a762:	48 f4       	brcc	.+18     	; 0xa776 <collides_directional_tile+0x1e2>
		{
			if (y+height >= tile_y+800) return 1;
    a764:	0e 0d       	add	r16, r14
    a766:	1f 1d       	adc	r17, r15
    a768:	04 17       	cp	r16, r20
    a76a:	15 07       	cpc	r17, r21
    a76c:	08 f0       	brcs	.+2      	; 0xa770 <collides_directional_tile+0x1dc>
    a76e:	79 c0       	rjmp	.+242    	; 0xa862 <collides_directional_tile+0x2ce>
			else if (y+height-1 >= tile_y+(x-tile_x)) return 1;
    a770:	01 50       	subi	r16, 0x01	; 1
    a772:	11 09       	sbc	r17, r1
    a774:	22 c0       	rjmp	.+68     	; 0xa7ba <collides_directional_tile+0x226>
    a776:	21 50       	subi	r18, 0x01	; 1
    a778:	31 09       	sbc	r19, r1
		}
		else if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a77a:	2c 0f       	add	r18, r28
    a77c:	3d 1f       	adc	r19, r29
    a77e:	2e 17       	cp	r18, r30
    a780:	3f 07       	cpc	r19, r31
    a782:	08 f4       	brcc	.+2      	; 0xa786 <collides_directional_tile+0x1f2>
    a784:	c4 c0       	rjmp	.+392    	; 0xa90e <collides_directional_tile+0x37a>
    a786:	af 01       	movw	r20, r30
    a788:	40 5e       	subi	r20, 0xE0	; 224
    a78a:	5c 4f       	sbci	r21, 0xFC	; 252
    a78c:	24 17       	cp	r18, r20
    a78e:	35 07       	cpc	r19, r21
    a790:	08 f0       	brcs	.+2      	; 0xa794 <collides_directional_tile+0x200>
    a792:	bd c0       	rjmp	.+378    	; 0xa90e <collides_directional_tile+0x37a>
    a794:	01 50       	subi	r16, 0x01	; 1
    a796:	11 09       	sbc	r17, r1
    a798:	0e 0d       	add	r16, r14
    a79a:	1f 1d       	adc	r17, r15
    a79c:	08 17       	cp	r16, r24
    a79e:	19 07       	cpc	r17, r25
    a7a0:	08 f4       	brcc	.+2      	; 0xa7a4 <collides_directional_tile+0x210>
    a7a2:	b5 c0       	rjmp	.+362    	; 0xa90e <collides_directional_tile+0x37a>
    a7a4:	9c 01       	movw	r18, r24
    a7a6:	20 5e       	subi	r18, 0xE0	; 224
    a7a8:	3c 4f       	sbci	r19, 0xFC	; 252
    a7aa:	02 17       	cp	r16, r18
    a7ac:	13 07       	cpc	r17, r19
    a7ae:	08 f0       	brcs	.+2      	; 0xa7b2 <collides_directional_tile+0x21e>
    a7b0:	ae c0       	rjmp	.+348    	; 0xa90e <collides_directional_tile+0x37a>
		{
			if (x < tile_x) return 1;
    a7b2:	ce 17       	cp	r28, r30
    a7b4:	df 07       	cpc	r29, r31
    a7b6:	08 f4       	brcc	.+2      	; 0xa7ba <collides_directional_tile+0x226>
    a7b8:	54 c0       	rjmp	.+168    	; 0xa862 <collides_directional_tile+0x2ce>
    a7ba:	8e 1b       	sub	r24, r30
    a7bc:	9f 0b       	sbc	r25, r31
			else if (y+height-1 >= tile_y+(x-tile_x)) return 1;
    a7be:	c8 0f       	add	r28, r24
    a7c0:	d9 1f       	adc	r29, r25
    a7c2:	81 e0       	ldi	r24, 0x01	; 1
    a7c4:	0c 17       	cp	r16, r28
    a7c6:	1d 07       	cpc	r17, r29
    a7c8:	08 f0       	brcs	.+2      	; 0xa7cc <collides_directional_tile+0x238>
    a7ca:	a2 c0       	rjmp	.+324    	; 0xa910 <collides_directional_tile+0x37c>
    a7cc:	a0 c0       	rjmp	.+320    	; 0xa90e <collides_directional_tile+0x37a>
		}
	}
	
	else if (tile == L_BR)
    a7ce:	66 e0       	ldi	r22, 0x06	; 6
    a7d0:	d6 12       	cpse	r13, r22
    a7d2:	9d c0       	rjmp	.+314    	; 0xa90e <collides_directional_tile+0x37a>
	{
		if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a7d4:	2c 0f       	add	r18, r28
    a7d6:	3d 1f       	adc	r19, r29
    a7d8:	d9 01       	movw	r26, r18
    a7da:	11 97       	sbiw	r26, 0x01	; 1
    a7dc:	ae 17       	cp	r26, r30
    a7de:	bf 07       	cpc	r27, r31
    a7e0:	08 f4       	brcc	.+2      	; 0xa7e4 <collides_directional_tile+0x250>
    a7e2:	91 c0       	rjmp	.+290    	; 0xa906 <collides_directional_tile+0x372>
    a7e4:	bf 01       	movw	r22, r30
    a7e6:	60 5e       	subi	r22, 0xE0	; 224
    a7e8:	7c 4f       	sbci	r23, 0xFC	; 252
    a7ea:	a6 17       	cp	r26, r22
    a7ec:	b7 07       	cpc	r27, r23
    a7ee:	08 f0       	brcs	.+2      	; 0xa7f2 <collides_directional_tile+0x25e>
    a7f0:	8a c0       	rjmp	.+276    	; 0xa906 <collides_directional_tile+0x372>
    a7f2:	b8 01       	movw	r22, r16
    a7f4:	61 50       	subi	r22, 0x01	; 1
    a7f6:	71 09       	sbc	r23, r1
    a7f8:	5b 01       	movw	r10, r22
    a7fa:	ae 0c       	add	r10, r14
    a7fc:	bf 1c       	adc	r11, r15
    a7fe:	a8 16       	cp	r10, r24
    a800:	b9 06       	cpc	r11, r25
    a802:	d0 f1       	brcs	.+116    	; 0xa878 <collides_directional_tile+0x2e4>
    a804:	6c 01       	movw	r12, r24
    a806:	60 ee       	ldi	r22, 0xE0	; 224
    a808:	c6 1a       	sub	r12, r22
    a80a:	6c ef       	ldi	r22, 0xFC	; 252
    a80c:	d6 0a       	sbc	r13, r22
    a80e:	ac 14       	cp	r10, r12
    a810:	bd 04       	cpc	r11, r13
    a812:	90 f5       	brcc	.+100    	; 0xa878 <collides_directional_tile+0x2e4>
    a814:	42 1b       	sub	r20, r18
    a816:	53 0b       	sbc	r21, r19
    a818:	e4 0f       	add	r30, r20
    a81a:	f5 1f       	adc	r31, r21
		{
			if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
    a81c:	e8 0f       	add	r30, r24
    a81e:	f9 1f       	adc	r31, r25
    a820:	81 e0       	ldi	r24, 0x01	; 1
    a822:	ae 16       	cp	r10, r30
    a824:	bf 06       	cpc	r11, r31
    a826:	08 f0       	brcs	.+2      	; 0xa82a <collides_directional_tile+0x296>
    a828:	73 c0       	rjmp	.+230    	; 0xa910 <collides_directional_tile+0x37c>
    a82a:	71 c0       	rjmp	.+226    	; 0xa90e <collides_directional_tile+0x37a>
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
		{
			if (x+width >= tile_x+800) return 1;
			else if (y <= tile_y+(x+width-1-tile_x)) return 1;
		}
		else if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a82c:	46 17       	cp	r20, r22
    a82e:	57 07       	cpc	r21, r23
    a830:	08 f0       	brcs	.+2      	; 0xa834 <collides_directional_tile+0x2a0>
    a832:	6d c0       	rjmp	.+218    	; 0xa90e <collides_directional_tile+0x37a>
    a834:	4e 17       	cp	r20, r30
    a836:	5f 07       	cpc	r21, r31
    a838:	08 f4       	brcc	.+2      	; 0xa83c <collides_directional_tile+0x2a8>
    a83a:	69 c0       	rjmp	.+210    	; 0xa90e <collides_directional_tile+0x37a>
    a83c:	01 50       	subi	r16, 0x01	; 1
    a83e:	11 09       	sbc	r17, r1
    a840:	0e 0d       	add	r16, r14
    a842:	1f 1d       	adc	r17, r15
    a844:	08 17       	cp	r16, r24
    a846:	19 07       	cpc	r17, r25
    a848:	08 f4       	brcc	.+2      	; 0xa84c <collides_directional_tile+0x2b8>
    a84a:	61 c0       	rjmp	.+194    	; 0xa90e <collides_directional_tile+0x37a>
    a84c:	9c 01       	movw	r18, r24
    a84e:	20 5e       	subi	r18, 0xE0	; 224
    a850:	3c 4f       	sbci	r19, 0xFC	; 252
    a852:	02 17       	cp	r16, r18
    a854:	13 07       	cpc	r17, r19
    a856:	08 f0       	brcs	.+2      	; 0xa85a <collides_directional_tile+0x2c6>
    a858:	5a c0       	rjmp	.+180    	; 0xa90e <collides_directional_tile+0x37a>
		{
			if (y <= tile_y) return 1;
    a85a:	8e 15       	cp	r24, r14
    a85c:	9f 05       	cpc	r25, r15
    a85e:	08 f4       	brcc	.+2      	; 0xa862 <collides_directional_tile+0x2ce>
    a860:	f2 ce       	rjmp	.-540    	; 0xa646 <collides_directional_tile+0xb2>
	return 0;*/
	if (tile == L_TR)
	{
		if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y >= tile_y && y < tile_y+800)
		{
			if (y <= tile_y+(x+width-1-tile_x)) return 1;
    a862:	81 e0       	ldi	r24, 0x01	; 1
    a864:	55 c0       	rjmp	.+170    	; 0xa910 <collides_directional_tile+0x37c>
		}
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a866:	ce 17       	cp	r28, r30
    a868:	df 07       	cpc	r29, r31
    a86a:	08 f4       	brcc	.+2      	; 0xa86e <collides_directional_tile+0x2da>
    a86c:	50 c0       	rjmp	.+160    	; 0xa90e <collides_directional_tile+0x37a>
    a86e:	c6 17       	cp	r28, r22
    a870:	d7 07       	cpc	r29, r23
    a872:	08 f4       	brcc	.+2      	; 0xa876 <collides_directional_tile+0x2e2>
    a874:	d9 ce       	rjmp	.-590    	; 0xa628 <collides_directional_tile+0x94>
    a876:	4b c0       	rjmp	.+150    	; 0xa90e <collides_directional_tile+0x37a>
	{
		if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
		{
			if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a878:	ce 17       	cp	r28, r30
    a87a:	df 07       	cpc	r29, r31
    a87c:	40 f1       	brcs	.+80     	; 0xa8ce <collides_directional_tile+0x33a>
    a87e:	bf 01       	movw	r22, r30
    a880:	60 5e       	subi	r22, 0xE0	; 224
    a882:	7c 4f       	sbci	r23, 0xFC	; 252
    a884:	c6 17       	cp	r28, r22
    a886:	d7 07       	cpc	r29, r23
    a888:	e0 f4       	brcc	.+56     	; 0xa8c2 <collides_directional_tile+0x32e>
    a88a:	a8 01       	movw	r20, r16
    a88c:	41 50       	subi	r20, 0x01	; 1
    a88e:	51 09       	sbc	r21, r1
    a890:	4e 0d       	add	r20, r14
    a892:	5f 1d       	adc	r21, r15
    a894:	48 17       	cp	r20, r24
    a896:	59 07       	cpc	r21, r25
    a898:	a0 f0       	brcs	.+40     	; 0xa8c2 <collides_directional_tile+0x32e>
    a89a:	ec 01       	movw	r28, r24
    a89c:	c0 5e       	subi	r28, 0xE0	; 224
    a89e:	dc 4f       	sbci	r29, 0xFC	; 252
    a8a0:	4c 17       	cp	r20, r28
    a8a2:	5d 07       	cpc	r21, r29
    a8a4:	70 f4       	brcc	.+28     	; 0xa8c2 <collides_directional_tile+0x32e>
		{
			if (x+width >= tile_x+800) return 1;
    a8a6:	26 17       	cp	r18, r22
    a8a8:	37 07       	cpc	r19, r23
    a8aa:	d8 f6       	brcc	.-74     	; 0xa862 <collides_directional_tile+0x2ce>
    a8ac:	e2 1b       	sub	r30, r18
    a8ae:	f3 0b       	sbc	r31, r19
    a8b0:	e0 5e       	subi	r30, 0xE0	; 224
    a8b2:	fc 4f       	sbci	r31, 0xFC	; 252
			else if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
    a8b4:	e8 0f       	add	r30, r24
    a8b6:	f9 1f       	adc	r31, r25
    a8b8:	81 e0       	ldi	r24, 0x01	; 1
    a8ba:	4e 17       	cp	r20, r30
    a8bc:	5f 07       	cpc	r21, r31
    a8be:	40 f5       	brcc	.+80     	; 0xa910 <collides_directional_tile+0x37c>
    a8c0:	26 c0       	rjmp	.+76     	; 0xa90e <collides_directional_tile+0x37a>
		}
		else if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y >= tile_y && y < tile_y+800)
    a8c2:	ae 17       	cp	r26, r30
    a8c4:	bf 07       	cpc	r27, r31
    a8c6:	18 f1       	brcs	.+70     	; 0xa90e <collides_directional_tile+0x37a>
    a8c8:	a6 17       	cp	r26, r22
    a8ca:	b7 07       	cpc	r27, r23
    a8cc:	00 f5       	brcc	.+64     	; 0xa90e <collides_directional_tile+0x37a>
    a8ce:	e8 16       	cp	r14, r24
    a8d0:	f9 06       	cpc	r15, r25
    a8d2:	e8 f0       	brcs	.+58     	; 0xa90e <collides_directional_tile+0x37a>
    a8d4:	ac 01       	movw	r20, r24
    a8d6:	40 5e       	subi	r20, 0xE0	; 224
    a8d8:	5c 4f       	sbci	r21, 0xFC	; 252
    a8da:	e4 16       	cp	r14, r20
    a8dc:	f5 06       	cpc	r15, r21
    a8de:	b8 f4       	brcc	.+46     	; 0xa90e <collides_directional_tile+0x37a>
		{
			if (y+height >= tile_y+800) return 1;
    a8e0:	0e 0d       	add	r16, r14
    a8e2:	1f 1d       	adc	r17, r15
    a8e4:	04 17       	cp	r16, r20
    a8e6:	15 07       	cpc	r17, r21
    a8e8:	08 f0       	brcs	.+2      	; 0xa8ec <collides_directional_tile+0x358>
    a8ea:	bb cf       	rjmp	.-138    	; 0xa862 <collides_directional_tile+0x2ce>
			else if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
    a8ec:	01 50       	subi	r16, 0x01	; 1
    a8ee:	11 09       	sbc	r17, r1
    a8f0:	e2 1b       	sub	r30, r18
    a8f2:	f3 0b       	sbc	r31, r19
    a8f4:	e0 5e       	subi	r30, 0xE0	; 224
    a8f6:	fc 4f       	sbci	r31, 0xFC	; 252
    a8f8:	e8 0f       	add	r30, r24
    a8fa:	f9 1f       	adc	r31, r25
    a8fc:	81 e0       	ldi	r24, 0x01	; 1
    a8fe:	0e 17       	cp	r16, r30
    a900:	1f 07       	cpc	r17, r31
    a902:	30 f4       	brcc	.+12     	; 0xa910 <collides_directional_tile+0x37c>
    a904:	04 c0       	rjmp	.+8      	; 0xa90e <collides_directional_tile+0x37a>
	{
		if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
		{
			if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a906:	ce 17       	cp	r28, r30
    a908:	df 07       	cpc	r29, r31
    a90a:	08 f0       	brcs	.+2      	; 0xa90e <collides_directional_tile+0x37a>
    a90c:	b8 cf       	rjmp	.-144    	; 0xa87e <collides_directional_tile+0x2ea>
		{
			if (y+height >= tile_y+800) return 1;
			else if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
		}
	}
	return 0;
    a90e:	80 e0       	ldi	r24, 0x00	; 0
}
    a910:	df 91       	pop	r29
    a912:	cf 91       	pop	r28
    a914:	1f 91       	pop	r17
    a916:	0f 91       	pop	r16
    a918:	ff 90       	pop	r15
    a91a:	ef 90       	pop	r14
    a91c:	df 90       	pop	r13
    a91e:	cf 90       	pop	r12
    a920:	bf 90       	pop	r11
    a922:	af 90       	pop	r10
    a924:	08 95       	ret

0000a926 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    a926:	8f 92       	push	r8
    a928:	9f 92       	push	r9
    a92a:	af 92       	push	r10
    a92c:	bf 92       	push	r11
    a92e:	cf 92       	push	r12
    a930:	df 92       	push	r13
    a932:	ef 92       	push	r14
    a934:	ff 92       	push	r15
    a936:	0f 93       	push	r16
    a938:	1f 93       	push	r17
    a93a:	cf 93       	push	r28
    a93c:	df 93       	push	r29
    a93e:	4c 01       	movw	r8, r24
    a940:	eb 01       	movw	r28, r22
	return LBCollides(p->netMessage.shared.x+100,p->netMessage.shared.y+100,1400,1400,shot->shared.x+200,shot->shared.y+200,400,400) &&
    a942:	ee 80       	ldd	r14, Y+6	; 0x06
    a944:	ff 80       	ldd	r15, Y+7	; 0x07
    a946:	88 ec       	ldi	r24, 0xC8	; 200
    a948:	e8 0e       	add	r14, r24
    a94a:	f1 1c       	adc	r15, r1
    a94c:	0c 81       	ldd	r16, Y+4	; 0x04
    a94e:	1d 81       	ldd	r17, Y+5	; 0x05
    a950:	08 53       	subi	r16, 0x38	; 56
    a952:	1f 4f       	sbci	r17, 0xFF	; 255
    a954:	f4 01       	movw	r30, r8
    a956:	e8 58       	subi	r30, 0x88	; 136
    a958:	ff 4f       	sbci	r31, 0xFF	; 255
    a95a:	60 81       	ld	r22, Z
    a95c:	71 81       	ldd	r23, Z+1	; 0x01
    a95e:	6c 59       	subi	r22, 0x9C	; 156
    a960:	7f 4f       	sbci	r23, 0xFF	; 255
    a962:	32 97       	sbiw	r30, 0x02	; 2
    a964:	80 81       	ld	r24, Z
    a966:	91 81       	ldd	r25, Z+1	; 0x01
    a968:	20 e9       	ldi	r18, 0x90	; 144
    a96a:	a2 2e       	mov	r10, r18
    a96c:	bb 24       	eor	r11, r11
    a96e:	b3 94       	inc	r11
    a970:	30 e9       	ldi	r19, 0x90	; 144
    a972:	c3 2e       	mov	r12, r19
    a974:	dd 24       	eor	r13, r13
    a976:	d3 94       	inc	r13
    a978:	28 e7       	ldi	r18, 0x78	; 120
    a97a:	35 e0       	ldi	r19, 0x05	; 5
    a97c:	48 e7       	ldi	r20, 0x78	; 120
    a97e:	55 e0       	ldi	r21, 0x05	; 5
    a980:	8c 59       	subi	r24, 0x9C	; 156
    a982:	9f 4f       	sbci	r25, 0xFF	; 255
    a984:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a988:	88 23       	and	r24, r24
    a98a:	51 f0       	breq	.+20     	; 0xa9a0 <player_shot+0x7a>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->netMessage.shared.x+100,p->netMessage.shared.y+100,1400,1400,shot->shared.x+200,shot->shared.y+200,400,400) &&
    a98c:	f4 01       	movw	r30, r8
    a98e:	82 85       	ldd	r24, Z+10	; 0x0a
    a990:	88 37       	cpi	r24, 0x78	; 120
    a992:	31 f4       	brne	.+12     	; 0xa9a0 <player_shot+0x7a>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a994:	81 e0       	ldi	r24, 0x01	; 1
    a996:	2c 85       	ldd	r18, Y+12	; 0x0c
    a998:	3d 85       	ldd	r19, Y+13	; 0x0d
    a99a:	21 32       	cpi	r18, 0x21	; 33
    a99c:	33 40       	sbci	r19, 0x03	; 3
    a99e:	08 f4       	brcc	.+2      	; 0xa9a2 <player_shot+0x7c>
    a9a0:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    a9a2:	df 91       	pop	r29
    a9a4:	cf 91       	pop	r28
    a9a6:	1f 91       	pop	r17
    a9a8:	0f 91       	pop	r16
    a9aa:	ff 90       	pop	r15
    a9ac:	ef 90       	pop	r14
    a9ae:	df 90       	pop	r13
    a9b0:	cf 90       	pop	r12
    a9b2:	bf 90       	pop	r11
    a9b4:	af 90       	pop	r10
    a9b6:	9f 90       	pop	r9
    a9b8:	8f 90       	pop	r8
    a9ba:	08 95       	ret

0000a9bc <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    a9bc:	af 92       	push	r10
    a9be:	bf 92       	push	r11
    a9c0:	cf 92       	push	r12
    a9c2:	df 92       	push	r13
    a9c4:	ef 92       	push	r14
    a9c6:	ff 92       	push	r15
    a9c8:	0f 93       	push	r16
    a9ca:	1f 93       	push	r17
    a9cc:	cf 93       	push	r28
    a9ce:	df 93       	push	r29
    a9d0:	ec 01       	movw	r28, r24
	return LBCollides(t->shared.x,t->shared.y,800,800,shot->shared.x+200,shot->shared.y+200,400,400) && t->lives > 0;
    a9d2:	fb 01       	movw	r30, r22
    a9d4:	e6 80       	ldd	r14, Z+6	; 0x06
    a9d6:	f7 80       	ldd	r15, Z+7	; 0x07
    a9d8:	f8 ec       	ldi	r31, 0xC8	; 200
    a9da:	ef 0e       	add	r14, r31
    a9dc:	f1 1c       	adc	r15, r1
    a9de:	fb 01       	movw	r30, r22
    a9e0:	04 81       	ldd	r16, Z+4	; 0x04
    a9e2:	15 81       	ldd	r17, Z+5	; 0x05
    a9e4:	08 53       	subi	r16, 0x38	; 56
    a9e6:	1f 4f       	sbci	r17, 0xFF	; 255
    a9e8:	6e 81       	ldd	r22, Y+6	; 0x06
    a9ea:	7f 81       	ldd	r23, Y+7	; 0x07
    a9ec:	80 e9       	ldi	r24, 0x90	; 144
    a9ee:	a8 2e       	mov	r10, r24
    a9f0:	bb 24       	eor	r11, r11
    a9f2:	b3 94       	inc	r11
    a9f4:	90 e9       	ldi	r25, 0x90	; 144
    a9f6:	c9 2e       	mov	r12, r25
    a9f8:	dd 24       	eor	r13, r13
    a9fa:	d3 94       	inc	r13
    a9fc:	20 e2       	ldi	r18, 0x20	; 32
    a9fe:	33 e0       	ldi	r19, 0x03	; 3
    aa00:	40 e2       	ldi	r20, 0x20	; 32
    aa02:	53 e0       	ldi	r21, 0x03	; 3
    aa04:	8c 81       	ldd	r24, Y+4	; 0x04
    aa06:	9d 81       	ldd	r25, Y+5	; 0x05
    aa08:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <LBCollides>
    aa0c:	88 23       	and	r24, r24
    aa0e:	39 f0       	breq	.+14     	; 0xaa1e <turret_shot+0x62>
    aa10:	91 e0       	ldi	r25, 0x01	; 1
    aa12:	88 85       	ldd	r24, Y+8	; 0x08
    aa14:	81 11       	cpse	r24, r1
    aa16:	01 c0       	rjmp	.+2      	; 0xaa1a <turret_shot+0x5e>
    aa18:	90 e0       	ldi	r25, 0x00	; 0
    aa1a:	89 2f       	mov	r24, r25
    aa1c:	01 c0       	rjmp	.+2      	; 0xaa20 <turret_shot+0x64>
    aa1e:	80 e0       	ldi	r24, 0x00	; 0
}
    aa20:	df 91       	pop	r29
    aa22:	cf 91       	pop	r28
    aa24:	1f 91       	pop	r17
    aa26:	0f 91       	pop	r16
    aa28:	ff 90       	pop	r15
    aa2a:	ef 90       	pop	r14
    aa2c:	df 90       	pop	r13
    aa2e:	cf 90       	pop	r12
    aa30:	bf 90       	pop	r11
    aa32:	af 90       	pop	r10
    aa34:	08 95       	ret

0000aa36 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 800 > 24000 ||
    aa36:	fc 01       	movw	r30, r24
    aa38:	24 81       	ldd	r18, Z+4	; 0x04
    aa3a:	35 81       	ldd	r19, Z+5	; 0x05
    aa3c:	20 5e       	subi	r18, 0xE0	; 224
    aa3e:	3c 4f       	sbci	r19, 0xFC	; 252
    aa40:	21 3c       	cpi	r18, 0xC1	; 193
    aa42:	3d 45       	sbci	r19, 0x5D	; 93
    aa44:	80 f4       	brcc	.+32     	; 0xaa66 <collision_detect_boundries+0x30>
	    sprite->y < 2400 || sprite->y + 800 > 22400)
    aa46:	fc 01       	movw	r30, r24
    aa48:	86 81       	ldd	r24, Z+6	; 0x06
    aa4a:	97 81       	ldd	r25, Z+7	; 0x07
	return LBCollides(t->shared.x,t->shared.y,800,800,shot->shared.x+200,shot->shared.y+200,400,400) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 800 > 24000 ||
    aa4c:	80 36       	cpi	r24, 0x60	; 96
    aa4e:	f9 e0       	ldi	r31, 0x09	; 9
    aa50:	9f 07       	cpc	r25, r31
    aa52:	48 f0       	brcs	.+18     	; 0xaa66 <collision_detect_boundries+0x30>
	    sprite->y < 2400 || sprite->y + 800 > 22400)
    aa54:	9c 01       	movw	r18, r24
    aa56:	20 5e       	subi	r18, 0xE0	; 224
    aa58:	3c 4f       	sbci	r19, 0xFC	; 252
    aa5a:	81 e0       	ldi	r24, 0x01	; 1
    aa5c:	21 38       	cpi	r18, 0x81	; 129
    aa5e:	37 45       	sbci	r19, 0x57	; 87
    aa60:	18 f4       	brcc	.+6      	; 0xaa68 <collision_detect_boundries+0x32>
    aa62:	80 e0       	ldi	r24, 0x00	; 0
    aa64:	08 95       	ret
	{
		return 1;
    aa66:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    aa68:	08 95       	ret

0000aa6a <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    aa6a:	1f 93       	push	r17
    aa6c:	cf 93       	push	r28
    aa6e:	df 93       	push	r29
    aa70:	9c 01       	movw	r18, r24
    aa72:	fb 01       	movw	r30, r22
    aa74:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    aa76:	6e e1       	ldi	r22, 0x1E	; 30
    aa78:	70 e0       	ldi	r23, 0x00	; 0
    aa7a:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    aa7e:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    aa80:	63 e0       	ldi	r22, 0x03	; 3
    aa82:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    aa84:	e9 01       	movw	r28, r18
    aa86:	c1 5d       	subi	r28, 0xD1	; 209
    aa88:	d3 4f       	sbci	r29, 0xF3	; 243
    aa8a:	49 81       	ldd	r20, Y+1	; 0x01
    aa8c:	44 23       	and	r20, r20
    aa8e:	71 f0       	breq	.+28     	; 0xaaac <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    aa90:	e9 01       	movw	r28, r18
    aa92:	c0 5d       	subi	r28, 0xD0	; 208
    aa94:	d3 4f       	sbci	r29, 0xF3	; 243
    aa96:	49 81       	ldd	r20, Y+1	; 0x01
    aa98:	44 23       	and	r20, r20
    aa9a:	91 f0       	breq	.+36     	; 0xaac0 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    aa9c:	e9 01       	movw	r28, r18
    aa9e:	c3 5b       	subi	r28, 0xB3	; 179
    aaa0:	d3 4f       	sbci	r29, 0xF3	; 243
    aaa2:	49 81       	ldd	r20, Y+1	; 0x01
    aaa4:	41 11       	cpse	r20, r1
    aaa6:	04 c0       	rjmp	.+8      	; 0xaab0 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    aaa8:	64 e0       	ldi	r22, 0x04	; 4
    aaaa:	69 0f       	add	r22, r25
    aaac:	af 01       	movw	r20, r30
    aaae:	0a c0       	rjmp	.+20     	; 0xaac4 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    aab0:	e9 01       	movw	r28, r18
    aab2:	c2 5b       	subi	r28, 0xB2	; 178
    aab4:	d3 4f       	sbci	r29, 0xF3	; 243
    aab6:	29 81       	ldd	r18, Y+1	; 0x01
    aab8:	21 11       	cpse	r18, r1
    aaba:	07 c0       	rjmp	.+14     	; 0xaaca <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    aabc:	64 e0       	ldi	r22, 0x04	; 4
    aabe:	69 0f       	add	r22, r25
    aac0:	af 01       	movw	r20, r30
    aac2:	8f 5f       	subi	r24, 0xFF	; 255
    aac4:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
		level.level_map[tile_index+31] = item_type;
    aac8:	19 83       	std	Y+1, r17	; 0x01
	}
}
    aaca:	df 91       	pop	r29
    aacc:	cf 91       	pop	r28
    aace:	1f 91       	pop	r17
    aad0:	08 95       	ret

0000aad2 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    aad2:	ef 92       	push	r14
    aad4:	ff 92       	push	r15
    aad6:	0f 93       	push	r16
    aad8:	1f 93       	push	r17
    aada:	cf 93       	push	r28
    aadc:	df 93       	push	r29
    aade:	1f 92       	push	r1
    aae0:	cd b7       	in	r28, 0x3d	; 61
    aae2:	de b7       	in	r29, 0x3e	; 62
    aae4:	7c 01       	movw	r14, r24
    aae6:	36 2f       	mov	r19, r22
	u8 x = player->netMessage.shared.x / 800;
	u8 y = player->netMessage.shared.y / 800 - 3;
    aae8:	fc 01       	movw	r30, r24
    aaea:	e8 58       	subi	r30, 0x88	; 136
    aaec:	ff 4f       	sbci	r31, 0xFF	; 255
    aaee:	80 81       	ld	r24, Z
    aaf0:	91 81       	ldd	r25, Z+1	; 0x01
    aaf2:	e0 e2       	ldi	r30, 0x20	; 32
    aaf4:	f3 e0       	ldi	r31, 0x03	; 3
    aaf6:	bf 01       	movw	r22, r30
    aaf8:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    aafc:	2d ef       	ldi	r18, 0xFD	; 253
    aafe:	26 0f       	add	r18, r22
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->netMessage.shared.x / 800;
    ab00:	d7 01       	movw	r26, r14
    ab02:	aa 58       	subi	r26, 0x8A	; 138
    ab04:	bf 4f       	sbci	r27, 0xFF	; 255
    ab06:	8d 91       	ld	r24, X+
    ab08:	9c 91       	ld	r25, X
    ab0a:	bf 01       	movw	r22, r30
    ab0c:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
	u8 y = player->netMessage.shared.y / 800 - 3;
	int tile_index = (y * 30) + x;
    ab10:	8b 01       	movw	r16, r22
    ab12:	8e e1       	ldi	r24, 0x1E	; 30
    ab14:	28 9f       	mul	r18, r24
    ab16:	00 0d       	add	r16, r0
    ab18:	11 1d       	adc	r17, r1
    ab1a:	11 24       	eor	r1, r1

	if (player->has_over_speed)
    ab1c:	f7 01       	movw	r30, r14
    ab1e:	86 85       	ldd	r24, Z+14	; 0x0e
    ab20:	88 23       	and	r24, r24
    ab22:	a1 f0       	breq	.+40     	; 0xab4c <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    ab24:	40 e0       	ldi	r20, 0x00	; 0
    ab26:	50 e0       	ldi	r21, 0x00	; 0
    ab28:	61 e0       	ldi	r22, 0x01	; 1
    ab2a:	8a e0       	ldi	r24, 0x0A	; 10
    ab2c:	83 0f       	add	r24, r19
    ab2e:	39 83       	std	Y+1, r19	; 0x01
    ab30:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    ab34:	47 e0       	ldi	r20, 0x07	; 7
    ab36:	6d eb       	ldi	r22, 0xBD	; 189
    ab38:	7a e6       	ldi	r23, 0x6A	; 106
    ab3a:	c8 01       	movw	r24, r16
    ab3c:	0e 94 35 55 	call	0xaa6a	; 0xaa6a <drop_item>
		player->max_speed = MAX_SPEED;
    ab40:	88 e8       	ldi	r24, 0x88	; 136
    ab42:	93 e1       	ldi	r25, 0x13	; 19
    ab44:	f7 01       	movw	r30, r14
    ab46:	94 87       	std	Z+12, r25	; 0x0c
    ab48:	83 87       	std	Z+11, r24	; 0x0b
    ab4a:	39 81       	ldd	r19, Y+1	; 0x01
	}
	if (player->has_rocket)
    ab4c:	f7 01       	movw	r30, r14
    ab4e:	85 85       	ldd	r24, Z+13	; 0x0d
    ab50:	88 23       	and	r24, r24
    ab52:	69 f0       	breq	.+26     	; 0xab6e <kill_player+0x9c>
	{
		SetTile(hud_x+11, 1, 0);
    ab54:	40 e0       	ldi	r20, 0x00	; 0
    ab56:	50 e0       	ldi	r21, 0x00	; 0
    ab58:	61 e0       	ldi	r22, 0x01	; 1
    ab5a:	8b e0       	ldi	r24, 0x0B	; 11
    ab5c:	83 0f       	add	r24, r19
    ab5e:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    ab62:	49 e0       	ldi	r20, 0x09	; 9
    ab64:	67 eb       	ldi	r22, 0xB7	; 183
    ab66:	7a e6       	ldi	r23, 0x6A	; 106
    ab68:	c8 01       	movw	r24, r16
    ab6a:	0e 94 35 55 	call	0xaa6a	; 0xaa6a <drop_item>
	}
	player->has_over_speed = false;
    ab6e:	f7 01       	movw	r30, r14
    ab70:	16 86       	std	Z+14, r1	; 0x0e
	player->has_rocket = false;
    ab72:	15 86       	std	Z+13, r1	; 0x0d
	player->netMessage.flags = player->netMessage.flags | EXPLODING_FLAG;
    ab74:	ef 58       	subi	r30, 0x8F	; 143
    ab76:	ff 4f       	sbci	r31, 0xFF	; 255
    ab78:	80 81       	ld	r24, Z
    ab7a:	81 60       	ori	r24, 0x01	; 1
    ab7c:	80 83       	st	Z, r24
}
    ab7e:	0f 90       	pop	r0
    ab80:	df 91       	pop	r29
    ab82:	cf 91       	pop	r28
    ab84:	1f 91       	pop	r17
    ab86:	0f 91       	pop	r16
    ab88:	ff 90       	pop	r15
    ab8a:	ef 90       	pop	r14
    ab8c:	08 95       	ret

0000ab8e <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    ab8e:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    ab90:	70 e0       	ldi	r23, 0x00	; 0
    ab92:	8e e1       	ldi	r24, 0x1E	; 30
    ab94:	48 9f       	mul	r20, r24
    ab96:	60 0d       	add	r22, r0
    ab98:	71 1d       	adc	r23, r1
    ab9a:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ab9c:	21 11       	cpse	r18, r1
    ab9e:	05 c0       	rjmp	.+10     	; 0xabaa <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    aba0:	71 83       	std	Z+1, r23	; 0x01
    aba2:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    aba4:	6f 5f       	subi	r22, 0xFF	; 255
    aba6:	7f 4f       	sbci	r23, 0xFF	; 255
    aba8:	0c c0       	rjmp	.+24     	; 0xabc2 <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    abaa:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    abac:	21 30       	cpi	r18, 0x01	; 1
    abae:	11 f4       	brne	.+4      	; 0xabb4 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    abb0:	01 96       	adiw	r24, 0x01	; 1
    abb2:	03 c0       	rjmp	.+6      	; 0xabba <get_interesting_tile_indexes_shot+0x2c>
    abb4:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    abb6:	22 30       	cpi	r18, 0x02	; 2
    abb8:	39 f4       	brne	.+14     	; 0xabc8 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    abba:	91 83       	std	Z+1, r25	; 0x01
    abbc:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    abbe:	61 5e       	subi	r22, 0xE1	; 225
    abc0:	7f 4f       	sbci	r23, 0xFF	; 255
    abc2:	73 83       	std	Z+3, r23	; 0x03
    abc4:	62 83       	std	Z+2, r22	; 0x02
    abc6:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    abc8:	71 83       	std	Z+1, r23	; 0x01
    abca:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    abcc:	93 83       	std	Z+3, r25	; 0x03
    abce:	82 83       	std	Z+2, r24	; 0x02
    abd0:	08 95       	ret

0000abd2 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    abd2:	ef 92       	push	r14
    abd4:	ff 92       	push	r15
    abd6:	0f 93       	push	r16
    abd8:	1f 93       	push	r17
    abda:	cf 93       	push	r28
    abdc:	df 93       	push	r29
    abde:	ec 01       	movw	r28, r24
    abe0:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    abe2:	8e e1       	ldi	r24, 0x1E	; 30
    abe4:	e8 2e       	mov	r14, r24
    abe6:	f1 2c       	mov	r15, r1
    abe8:	cb 01       	movw	r24, r22
    abea:	b7 01       	movw	r22, r14
    abec:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    abf0:	6d 5f       	subi	r22, 0xFD	; 253
    abf2:	40 e0       	ldi	r20, 0x00	; 0
    abf4:	50 e0       	ldi	r21, 0x00	; 0
    abf6:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    abfa:	88 81       	ld	r24, Y
    abfc:	fe 01       	movw	r30, r28
    abfe:	9e e0       	ldi	r25, 0x0E	; 14
    ac00:	89 9f       	mul	r24, r25
    ac02:	e0 0d       	add	r30, r0
    ac04:	f1 1d       	adc	r31, r1
    ac06:	11 24       	eor	r1, r1
    ac08:	85 85       	ldd	r24, Z+13	; 0x0d
    ac0a:	96 85       	ldd	r25, Z+14	; 0x0e
    ac0c:	00 97       	sbiw	r24, 0x00	; 0
    ac0e:	41 f0       	breq	.+16     	; 0xac20 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    ac10:	b7 01       	movw	r22, r14
    ac12:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    ac16:	6d 5f       	subi	r22, 0xFD	; 253
    ac18:	40 e0       	ldi	r20, 0x00	; 0
    ac1a:	50 e0       	ldi	r21, 0x00	; 0
    ac1c:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    ac20:	88 81       	ld	r24, Y
    ac22:	fe 01       	movw	r30, r28
    ac24:	9e e0       	ldi	r25, 0x0E	; 14
    ac26:	89 9f       	mul	r24, r25
    ac28:	e0 0d       	add	r30, r0
    ac2a:	f1 1d       	adc	r31, r1
    ac2c:	11 24       	eor	r1, r1
    ac2e:	16 87       	std	Z+14, r17	; 0x0e
    ac30:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    ac32:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    ac34:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    ac36:	82 30       	cpi	r24, 0x02	; 2
    ac38:	11 f0       	breq	.+4      	; 0xac3e <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    ac3a:	88 83       	st	Y, r24
    ac3c:	01 c0       	rjmp	.+2      	; 0xac40 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    ac3e:	18 82       	st	Y, r1
	}
}
    ac40:	df 91       	pop	r29
    ac42:	cf 91       	pop	r28
    ac44:	1f 91       	pop	r17
    ac46:	0f 91       	pop	r16
    ac48:	ff 90       	pop	r15
    ac4a:	ef 90       	pop	r14
    ac4c:	08 95       	ret

0000ac4e <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    ac4e:	fb 01       	movw	r30, r22
	switch (tile_type)
    ac50:	84 30       	cpi	r24, 0x04	; 4
    ac52:	71 f0       	breq	.+28     	; 0xac70 <richochet+0x22>
    ac54:	18 f4       	brcc	.+6      	; 0xac5c <richochet+0xe>
    ac56:	83 30       	cpi	r24, 0x03	; 3
    ac58:	31 f0       	breq	.+12     	; 0xac66 <richochet+0x18>
    ac5a:	08 95       	ret
    ac5c:	85 30       	cpi	r24, 0x05	; 5
    ac5e:	99 f0       	breq	.+38     	; 0xac86 <richochet+0x38>
    ac60:	86 30       	cpi	r24, 0x06	; 6
    ac62:	59 f0       	breq	.+22     	; 0xac7a <richochet+0x2c>
    ac64:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ac66:	80 81       	ld	r24, Z
    ac68:	8d 7f       	andi	r24, 0xFD	; 253
    ac6a:	29 f4       	brne	.+10     	; 0xac76 <richochet+0x28>
				sprite->direction = D_RIGHT;
    ac6c:	81 e0       	ldi	r24, 0x01	; 1
    ac6e:	09 c0       	rjmp	.+18     	; 0xac82 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ac70:	80 81       	ld	r24, Z
    ac72:	8d 7f       	andi	r24, 0xFD	; 253
    ac74:	29 f0       	breq	.+10     	; 0xac80 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    ac76:	82 e0       	ldi	r24, 0x02	; 2
    ac78:	04 c0       	rjmp	.+8      	; 0xac82 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ac7a:	80 81       	ld	r24, Z
    ac7c:	8d 7f       	andi	r24, 0xFD	; 253
    ac7e:	31 f4       	brne	.+12     	; 0xac8c <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    ac80:	83 e0       	ldi	r24, 0x03	; 3
    ac82:	80 83       	st	Z, r24
    ac84:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ac86:	80 81       	ld	r24, Z
    ac88:	8d 7f       	andi	r24, 0xFD	; 253
    ac8a:	81 f3       	breq	.-32     	; 0xac6c <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    ac8c:	10 82       	st	Z, r1
    ac8e:	08 95       	ret

0000ac90 <get_interesting_tile_indexes>:
        LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_METAL);
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    ac90:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    ac92:	70 e0       	ldi	r23, 0x00	; 0
    ac94:	8e e1       	ldi	r24, 0x1E	; 30
    ac96:	48 9f       	mul	r20, r24
    ac98:	60 0d       	add	r22, r0
    ac9a:	71 1d       	adc	r23, r1
    ac9c:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ac9e:	21 11       	cpse	r18, r1
    aca0:	09 c0       	rjmp	.+18     	; 0xacb4 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    aca2:	71 83       	std	Z+1, r23	; 0x01
    aca4:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    aca6:	cb 01       	movw	r24, r22
    aca8:	01 96       	adiw	r24, 0x01	; 1
    acaa:	93 83       	std	Z+3, r25	; 0x03
    acac:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    acae:	6e 5f       	subi	r22, 0xFE	; 254
    acb0:	7f 4f       	sbci	r23, 0xFF	; 255
    acb2:	12 c0       	rjmp	.+36     	; 0xacd8 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    acb4:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    acb6:	21 30       	cpi	r18, 0x01	; 1
    acb8:	29 f4       	brne	.+10     	; 0xacc4 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    acba:	02 96       	adiw	r24, 0x02	; 2
    acbc:	91 83       	std	Z+1, r25	; 0x01
    acbe:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    acc0:	4e 96       	adiw	r24, 0x1e	; 30
    acc2:	06 c0       	rjmp	.+12     	; 0xacd0 <get_interesting_tile_indexes+0x40>
    acc4:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    acc6:	22 30       	cpi	r18, 0x02	; 2
    acc8:	51 f4       	brne	.+20     	; 0xacde <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    acca:	91 83       	std	Z+1, r25	; 0x01
    accc:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    acce:	01 96       	adiw	r24, 0x01	; 1
    acd0:	93 83       	std	Z+3, r25	; 0x03
    acd2:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    acd4:	62 5c       	subi	r22, 0xC2	; 194
    acd6:	7f 4f       	sbci	r23, 0xFF	; 255
    acd8:	75 83       	std	Z+5, r23	; 0x05
    acda:	64 83       	std	Z+4, r22	; 0x04
    acdc:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    acde:	71 83       	std	Z+1, r23	; 0x01
    ace0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    ace2:	62 5e       	subi	r22, 0xE2	; 226
    ace4:	7f 4f       	sbci	r23, 0xFF	; 255
    ace6:	73 83       	std	Z+3, r23	; 0x03
    ace8:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    acea:	95 83       	std	Z+5, r25	; 0x05
    acec:	84 83       	std	Z+4, r24	; 0x04
    acee:	08 95       	ret

0000acf0 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    acf0:	0f 93       	push	r16
    acf2:	1f 93       	push	r17
    acf4:	cf 93       	push	r28
    acf6:	df 93       	push	r29
    acf8:	1f 92       	push	r1
    acfa:	cd b7       	in	r28, 0x3d	; 61
    acfc:	de b7       	in	r29, 0x3e	; 62
    acfe:	8b 01       	movw	r16, r22
	player->netMessage.level_score++;
    ad00:	fc 01       	movw	r30, r24
    ad02:	e0 59       	subi	r30, 0x90	; 144
    ad04:	ff 4f       	sbci	r31, 0xFF	; 255
    ad06:	30 81       	ld	r19, Z
    ad08:	3f 5f       	subi	r19, 0xFF	; 255
    ad0a:	30 83       	st	Z, r19
	player->netMessage.score++;
    ad0c:	31 97       	sbiw	r30, 0x01	; 1
    ad0e:	30 81       	ld	r19, Z
    ad10:	3f 5f       	subi	r19, 0xFF	; 255
    ad12:	30 83       	st	Z, r19
	render_score(player, hud_x);
    ad14:	64 2f       	mov	r22, r20
    ad16:	29 83       	std	Y+1, r18	; 0x01
    ad18:	0e 94 c8 50 	call	0xa190	; 0xa190 <render_score>
	kill_player(other_player, other_player_hud_x);
    ad1c:	29 81       	ldd	r18, Y+1	; 0x01
    ad1e:	62 2f       	mov	r22, r18
    ad20:	c8 01       	movw	r24, r16
    ad22:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    ad26:	86 e0       	ldi	r24, 0x06	; 6
	LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
}
    ad28:	0f 90       	pop	r0
    ad2a:	df 91       	pop	r29
    ad2c:	cf 91       	pop	r28
    ad2e:	1f 91       	pop	r17
    ad30:	0f 91       	pop	r16
    ad32:	0c 94 7e 49 	jmp	0x92fc	; 0x92fc <LBPlaySound.part.5>

0000ad36 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    ad36:	9c 01       	movw	r18, r24
    ad38:	e6 2f       	mov	r30, r22
	u16 tile_x = (tile % 30 * 800);
	u16 tile_y = (tile / 30 + 3) * 800;
	if (player->netMessage.shared.direction == D_UP || player->netMessage.shared.direction == D_DOWN)
    ad3a:	dc 01       	movw	r26, r24
    ad3c:	ae 58       	subi	r26, 0x8E	; 142
    ad3e:	bf 4f       	sbci	r27, 0xFF	; 255
    ad40:	9c 91       	ld	r25, X
    ad42:	9d 7f       	andi	r25, 0xFD	; 253
    ad44:	d9 f4       	brne	.+54     	; 0xad7c <slide+0x46>
	LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u16 tile_x = (tile % 30 * 800);
    ad46:	ca 01       	movw	r24, r20
    ad48:	6e e1       	ldi	r22, 0x1E	; 30
    ad4a:	70 e0       	ldi	r23, 0x00	; 0
    ad4c:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    ad50:	60 e2       	ldi	r22, 0x20	; 32
    ad52:	73 e0       	ldi	r23, 0x03	; 3
    ad54:	86 9f       	mul	r24, r22
    ad56:	a0 01       	movw	r20, r0
    ad58:	87 9f       	mul	r24, r23
    ad5a:	50 0d       	add	r21, r0
    ad5c:	96 9f       	mul	r25, r22
    ad5e:	50 0d       	add	r21, r0
    ad60:	11 24       	eor	r1, r1
	u16 tile_y = (tile / 30 + 3) * 800;
	if (player->netMessage.shared.direction == D_UP || player->netMessage.shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->netMessage.shared.x - tile_x) > 400))
    ad62:	e1 11       	cpse	r30, r1
    ad64:	04 c0       	rjmp	.+8      	; 0xad6e <slide+0x38>
    ad66:	f9 01       	movw	r30, r18
    ad68:	ea 58       	subi	r30, 0x8A	; 138
    ad6a:	ff 4f       	sbci	r31, 0xFF	; 255
    ad6c:	1c c0       	rjmp	.+56     	; 0xada6 <slide+0x70>
			player->netMessage.shared.x = player->netMessage.shared.x / 100 * 100 + 100;
		else if (collision_tile == 2 && ((tile_x - player->netMessage.shared.x) > 1200))
    ad6e:	e2 30       	cpi	r30, 0x02	; 2
    ad70:	09 f0       	breq	.+2      	; 0xad74 <slide+0x3e>
    ad72:	48 c0       	rjmp	.+144    	; 0xae04 <slide+0xce>
    ad74:	f9 01       	movw	r30, r18
    ad76:	ea 58       	subi	r30, 0x8A	; 138
    ad78:	ff 4f       	sbci	r31, 0xFF	; 255
    ad7a:	2f c0       	rjmp	.+94     	; 0xadda <slide+0xa4>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u16 tile_x = (tile % 30 * 800);
	u16 tile_y = (tile / 30 + 3) * 800;
    ad7c:	ca 01       	movw	r24, r20
    ad7e:	6e e1       	ldi	r22, 0x1E	; 30
    ad80:	70 e0       	ldi	r23, 0x00	; 0
    ad82:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    ad86:	6d 5f       	subi	r22, 0xFD	; 253
    ad88:	7f 4f       	sbci	r23, 0xFF	; 255
    ad8a:	80 e2       	ldi	r24, 0x20	; 32
    ad8c:	93 e0       	ldi	r25, 0x03	; 3
    ad8e:	68 9f       	mul	r22, r24
    ad90:	a0 01       	movw	r20, r0
    ad92:	69 9f       	mul	r22, r25
    ad94:	50 0d       	add	r21, r0
    ad96:	78 9f       	mul	r23, r24
    ad98:	50 0d       	add	r21, r0
    ad9a:	11 24       	eor	r1, r1
		else if (collision_tile == 2 && ((tile_x - player->netMessage.shared.x) > 1200))
			player->netMessage.shared.x = player->netMessage.shared.x / 100 * 100 - 100;
	}
	else
	{
		if (collision_tile == 0 && ((player->netMessage.shared.y - tile_y) > 400))
    ad9c:	e1 11       	cpse	r30, r1
    ad9e:	18 c0       	rjmp	.+48     	; 0xadd0 <slide+0x9a>
    ada0:	f9 01       	movw	r30, r18
    ada2:	e8 58       	subi	r30, 0x88	; 136
    ada4:	ff 4f       	sbci	r31, 0xFF	; 255
    ada6:	80 81       	ld	r24, Z
    ada8:	91 81       	ldd	r25, Z+1	; 0x01
    adaa:	9c 01       	movw	r18, r24
    adac:	24 1b       	sub	r18, r20
    adae:	35 0b       	sbc	r19, r21
    adb0:	21 39       	cpi	r18, 0x91	; 145
    adb2:	31 40       	sbci	r19, 0x01	; 1
    adb4:	38 f1       	brcs	.+78     	; 0xae04 <slide+0xce>
			player->netMessage.shared.y = player->netMessage.shared.y / 100 * 100 + 100;
    adb6:	64 e6       	ldi	r22, 0x64	; 100
    adb8:	70 e0       	ldi	r23, 0x00	; 0
    adba:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    adbe:	6f 5f       	subi	r22, 0xFF	; 255
    adc0:	7f 4f       	sbci	r23, 0xFF	; 255
    adc2:	24 e6       	ldi	r18, 0x64	; 100
    adc4:	26 9f       	mul	r18, r22
    adc6:	c0 01       	movw	r24, r0
    adc8:	27 9f       	mul	r18, r23
    adca:	90 0d       	add	r25, r0
    adcc:	11 24       	eor	r1, r1
    adce:	18 c0       	rjmp	.+48     	; 0xae00 <slide+0xca>
		else if (collision_tile == 2 && ((tile_y - player->netMessage.shared.y) > 1200))
    add0:	e2 30       	cpi	r30, 0x02	; 2
    add2:	c1 f4       	brne	.+48     	; 0xae04 <slide+0xce>
    add4:	f9 01       	movw	r30, r18
    add6:	e8 58       	subi	r30, 0x88	; 136
    add8:	ff 4f       	sbci	r31, 0xFF	; 255
    adda:	80 81       	ld	r24, Z
    addc:	91 81       	ldd	r25, Z+1	; 0x01
    adde:	48 1b       	sub	r20, r24
    ade0:	59 0b       	sbc	r21, r25
    ade2:	41 3b       	cpi	r20, 0xB1	; 177
    ade4:	54 40       	sbci	r21, 0x04	; 4
    ade6:	70 f0       	brcs	.+28     	; 0xae04 <slide+0xce>
			player->netMessage.shared.y = player->netMessage.shared.y / 100 * 100 - 100;
    ade8:	64 e6       	ldi	r22, 0x64	; 100
    adea:	70 e0       	ldi	r23, 0x00	; 0
    adec:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    adf0:	24 e6       	ldi	r18, 0x64	; 100
    adf2:	26 9f       	mul	r18, r22
    adf4:	c0 01       	movw	r24, r0
    adf6:	27 9f       	mul	r18, r23
    adf8:	90 0d       	add	r25, r0
    adfa:	11 24       	eor	r1, r1
    adfc:	84 56       	subi	r24, 0x64	; 100
    adfe:	91 09       	sbc	r25, r1
    ae00:	91 83       	std	Z+1, r25	; 0x01
    ae02:	80 83       	st	Z, r24
    ae04:	08 95       	ret

0000ae06 <load_level_tiles>:
	}
	return explode;
}

void load_level_tiles(u8 blank)
{
    ae06:	ef 92       	push	r14
    ae08:	ff 92       	push	r15
    ae0a:	1f 93       	push	r17
    ae0c:	cf 93       	push	r28
    ae0e:	df 93       	push	r29
    ae10:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    ae12:	c0 e0       	ldi	r28, 0x00	; 0
    ae14:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    ae16:	8e e1       	ldi	r24, 0x1E	; 30
    ae18:	e8 2e       	mov	r14, r24
    ae1a:	f1 2c       	mov	r15, r1
    ae1c:	ce 01       	movw	r24, r28
    ae1e:	b7 01       	movw	r22, r14
    ae20:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
		y = 3 + i / 30;
    ae24:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    ae26:	11 23       	and	r17, r17
    ae28:	19 f0       	breq	.+6      	; 0xae30 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    ae2a:	4a e5       	ldi	r20, 0x5A	; 90
    ae2c:	5b e6       	ldi	r21, 0x6B	; 107
    ae2e:	2d c0       	rjmp	.+90     	; 0xae8a <load_level_tiles+0x84>
    ae30:	fe 01       	movw	r30, r28
    ae32:	e1 5d       	subi	r30, 0xD1	; 209
    ae34:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    ae36:	91 81       	ldd	r25, Z+1	; 0x01
    ae38:	97 30       	cpi	r25, 0x07	; 7
    ae3a:	99 f1       	breq	.+102    	; 0xaea2 <load_level_tiles+0x9c>
    ae3c:	88 f4       	brcc	.+34     	; 0xae60 <load_level_tiles+0x5a>
    ae3e:	93 30       	cpi	r25, 0x03	; 3
    ae40:	39 f1       	breq	.+78     	; 0xae90 <load_level_tiles+0x8a>
    ae42:	40 f4       	brcc	.+16     	; 0xae54 <load_level_tiles+0x4e>
    ae44:	91 30       	cpi	r25, 0x01	; 1
    ae46:	f9 f0       	breq	.+62     	; 0xae86 <load_level_tiles+0x80>
    ae48:	92 30       	cpi	r25, 0x02	; 2
    ae4a:	09 f0       	breq	.+2      	; 0xae4e <load_level_tiles+0x48>
    ae4c:	3f c0       	rjmp	.+126    	; 0xaecc <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    ae4e:	40 ec       	ldi	r20, 0xC0	; 192
    ae50:	5a e6       	ldi	r21, 0x6A	; 106
    ae52:	1b c0       	rjmp	.+54     	; 0xae8a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    ae54:	95 30       	cpi	r25, 0x05	; 5
    ae56:	f9 f0       	breq	.+62     	; 0xae96 <load_level_tiles+0x90>
    ae58:	08 f5       	brcc	.+66     	; 0xae9c <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    ae5a:	45 ea       	ldi	r20, 0xA5	; 165
    ae5c:	5a e6       	ldi	r21, 0x6A	; 106
    ae5e:	15 c0       	rjmp	.+42     	; 0xae8a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    ae60:	9c 32       	cpi	r25, 0x2C	; 44
    ae62:	59 f1       	breq	.+86     	; 0xaeba <load_level_tiles+0xb4>
    ae64:	38 f4       	brcc	.+14     	; 0xae74 <load_level_tiles+0x6e>
    ae66:	98 30       	cpi	r25, 0x08	; 8
    ae68:	f9 f0       	breq	.+62     	; 0xaea8 <load_level_tiles+0xa2>
    ae6a:	99 30       	cpi	r25, 0x09	; 9
    ae6c:	79 f5       	brne	.+94     	; 0xaecc <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    ae6e:	47 eb       	ldi	r20, 0xB7	; 183
    ae70:	5a e6       	ldi	r21, 0x6A	; 106
    ae72:	0b c0       	rjmp	.+22     	; 0xae8a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    ae74:	92 34       	cpi	r25, 0x42	; 66
    ae76:	d9 f0       	breq	.+54     	; 0xaeae <load_level_tiles+0xa8>
    ae78:	9d 34       	cpi	r25, 0x4D	; 77
    ae7a:	e1 f0       	breq	.+56     	; 0xaeb4 <load_level_tiles+0xae>
    ae7c:	97 33       	cpi	r25, 0x37	; 55
    ae7e:	31 f5       	brne	.+76     	; 0xaecc <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    ae80:	49 e9       	ldi	r20, 0x99	; 153
    ae82:	5a e6       	ldi	r21, 0x6A	; 106
    ae84:	02 c0       	rjmp	.+4      	; 0xae8a <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    ae86:	43 ec       	ldi	r20, 0xC3	; 195
    ae88:	5a e6       	ldi	r21, 0x6A	; 106
    ae8a:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
    ae8e:	22 c0       	rjmp	.+68     	; 0xaed4 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    ae90:	4b ea       	ldi	r20, 0xAB	; 171
    ae92:	5a e6       	ldi	r21, 0x6A	; 106
    ae94:	fa cf       	rjmp	.-12     	; 0xae8a <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    ae96:	42 ea       	ldi	r20, 0xA2	; 162
    ae98:	5a e6       	ldi	r21, 0x6A	; 106
    ae9a:	f7 cf       	rjmp	.-18     	; 0xae8a <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    ae9c:	48 ea       	ldi	r20, 0xA8	; 168
    ae9e:	5a e6       	ldi	r21, 0x6A	; 106
    aea0:	f4 cf       	rjmp	.-24     	; 0xae8a <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    aea2:	4d eb       	ldi	r20, 0xBD	; 189
    aea4:	5a e6       	ldi	r21, 0x6A	; 106
    aea6:	f1 cf       	rjmp	.-30     	; 0xae8a <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    aea8:	4a eb       	ldi	r20, 0xBA	; 186
    aeaa:	5a e6       	ldi	r21, 0x6A	; 106
    aeac:	ee cf       	rjmp	.-36     	; 0xae8a <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    aeae:	4c e9       	ldi	r20, 0x9C	; 156
    aeb0:	5a e6       	ldi	r21, 0x6A	; 106
    aeb2:	eb cf       	rjmp	.-42     	; 0xae8a <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    aeb4:	4f e9       	ldi	r20, 0x9F	; 159
    aeb6:	5a e6       	ldi	r21, 0x6A	; 106
    aeb8:	e8 cf       	rjmp	.-48     	; 0xae8a <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    aeba:	4f e9       	ldi	r20, 0x9F	; 159
    aebc:	5a e6       	ldi	r21, 0x6A	; 106
    aebe:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
    aec2:	d0 93 c0 0f 	sts	0x0FC0, r29
    aec6:	c0 93 bf 0f 	sts	0x0FBF, r28
    aeca:	04 c0       	rjmp	.+8      	; 0xaed4 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    aecc:	40 e0       	ldi	r20, 0x00	; 0
    aece:	50 e0       	ldi	r21, 0x00	; 0
    aed0:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    aed4:	21 96       	adiw	r28, 0x01	; 1
    aed6:	ce 3e       	cpi	r28, 0xEE	; 238
    aed8:	82 e0       	ldi	r24, 0x02	; 2
    aeda:	d8 07       	cpc	r29, r24
    aedc:	09 f0       	breq	.+2      	; 0xaee0 <load_level_tiles+0xda>
    aede:	9e cf       	rjmp	.-196    	; 0xae1c <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    aee0:	df 91       	pop	r29
    aee2:	cf 91       	pop	r28
    aee4:	1f 91       	pop	r17
    aee6:	ff 90       	pop	r15
    aee8:	ef 90       	pop	r14
    aeea:	08 95       	ret

0000aeec <prep_player>:

void prep_player(Player* p, u16 x, u16 y)
{
    aeec:	cf 93       	push	r28
    aeee:	df 93       	push	r29
    aef0:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    aef2:	7f 83       	std	Y+7, r23	; 0x07
    aef4:	6e 83       	std	Y+6, r22	; 0x06
	p->spawn_y = y;
    aef6:	59 87       	std	Y+9, r21	; 0x09
    aef8:	48 87       	std	Y+8, r20	; 0x08
	p->netMessage.level_score = 0;
    aefa:	fc 01       	movw	r30, r24
    aefc:	e0 59       	subi	r30, 0x90	; 144
    aefe:	ff 4f       	sbci	r31, 0xFF	; 255
    af00:	10 82       	st	Z, r1
	p->old_level_score = 0;
    af02:	1a 8a       	std	Y+18, r1	; 0x12
	p->has_over_speed = false;
    af04:	1e 86       	std	Y+14, r1	; 0x0e
	p->has_rocket = false;
    af06:	1d 86       	std	Y+13, r1	; 0x0d
	p->max_speed = MAX_SPEED;
    af08:	88 e8       	ldi	r24, 0x88	; 136
    af0a:	93 e1       	ldi	r25, 0x13	; 19
    af0c:	9c 87       	std	Y+12, r25	; 0x0c
    af0e:	8b 87       	std	Y+11, r24	; 0x0b
	player_init_shot_state(p);
    af10:	ce 01       	movw	r24, r28
    af12:	0e 94 a9 4e 	call	0x9d52	; 0x9d52 <player_init_shot_state>
	player_spawn(p);
    af16:	ce 01       	movw	r24, r28
}
    af18:	df 91       	pop	r29
    af1a:	cf 91       	pop	r28
	p->old_level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    af1c:	0c 94 d7 4e 	jmp	0x9dae	; 0x9dae <player_spawn>

0000af20 <load_level>:
}

void load_level(int level_number)
{
    af20:	4f 92       	push	r4
    af22:	5f 92       	push	r5
    af24:	6f 92       	push	r6
    af26:	7f 92       	push	r7
    af28:	8f 92       	push	r8
    af2a:	9f 92       	push	r9
    af2c:	af 92       	push	r10
    af2e:	bf 92       	push	r11
    af30:	cf 92       	push	r12
    af32:	df 92       	push	r13
    af34:	ef 92       	push	r14
    af36:	ff 92       	push	r15
    af38:	0f 93       	push	r16
    af3a:	1f 93       	push	r17
    af3c:	cf 93       	push	r28
    af3e:	df 93       	push	r29
    af40:	ec 01       	movw	r28, r24
    u16 level_start = level_number*30*25;
    af42:	8e ee       	ldi	r24, 0xEE	; 238
    af44:	92 e0       	ldi	r25, 0x02	; 2
    af46:	c8 9f       	mul	r28, r24
    af48:	20 01       	movw	r4, r0
    af4a:	c9 9f       	mul	r28, r25
    af4c:	50 0c       	add	r5, r0
    af4e:	d8 9f       	mul	r29, r24
    af50:	50 0c       	add	r5, r0
    af52:	11 24       	eor	r1, r1
	u16 x;
	u16 y;

	game.scope_counter = 0;
    af54:	10 92 82 0b 	sts	0x0B82, r1
    af58:	10 92 81 0b 	sts	0x0B81, r1
	init_tile_animations(&tile_animations);
    af5c:	8a e8       	ldi	r24, 0x8A	; 138
    af5e:	9b e0       	ldi	r25, 0x0B	; 11
    af60:	0e 94 68 4d 	call	0x9ad0	; 0x9ad0 <init_tile_animations>
	init_scope_animation(&scope_animation);
    af64:	83 eb       	ldi	r24, 0xB3	; 179
    af66:	9f e0       	ldi	r25, 0x0F	; 15
    af68:	0e 94 8f 4d 	call	0x9b1e	; 0x9b1e <init_scope_animation>
	init_sub_animation(&sub_animation);
    af6c:	85 ea       	ldi	r24, 0xA5	; 165
    af6e:	9f e0       	ldi	r25, 0x0F	; 15
    af70:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <init_sub_animation>
	game.current_screen = LEVEL;
    af74:	83 e0       	ldi	r24, 0x03	; 3
    af76:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    af7a:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <clear_sprites>
	game.current_level = level_number;
    af7e:	c0 93 77 0b 	sts	0x0B77, r28
    af82:	00 e3       	ldi	r16, 0x30	; 48
    af84:	1c e0       	ldi	r17, 0x0C	; 12
	for (u16 i = 0; i < 30*25; i++)
    af86:	c0 e0       	ldi	r28, 0x00	; 0
    af88:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = (i % 30) * 800;
    af8a:	8e e1       	ldi	r24, 0x1E	; 30
    af8c:	a8 2e       	mov	r10, r24
    af8e:	b1 2c       	mov	r11, r1
    af90:	90 e2       	ldi	r25, 0x20	; 32
    af92:	c9 2e       	mov	r12, r25
    af94:	93 e0       	ldi	r25, 0x03	; 3
    af96:	d9 2e       	mov	r13, r25
    af98:	ce 01       	movw	r24, r28
    af9a:	b5 01       	movw	r22, r10
    af9c:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    afa0:	8c 9d       	mul	r24, r12
    afa2:	30 01       	movw	r6, r0
    afa4:	8d 9d       	mul	r24, r13
    afa6:	70 0c       	add	r7, r0
    afa8:	9c 9d       	mul	r25, r12
    afaa:	70 0c       	add	r7, r0
    afac:	11 24       	eor	r1, r1
		y = (i / 30 + 3) * 800;
    afae:	6c 9d       	mul	r22, r12
    afb0:	70 01       	movw	r14, r0
    afb2:	6d 9d       	mul	r22, r13
    afb4:	f0 0c       	add	r15, r0
    afb6:	7c 9d       	mul	r23, r12
    afb8:	f0 0c       	add	r15, r0
    afba:	11 24       	eor	r1, r1
    afbc:	a0 ea       	ldi	r26, 0xA0	; 160
    afbe:	ea 1a       	sub	r14, r26
    afc0:	a6 ef       	ldi	r26, 0xF6	; 246
    afc2:	fa 0a       	sbc	r15, r26
    afc4:	fe 01       	movw	r30, r28
    afc6:	e4 0d       	add	r30, r4
    afc8:	f5 1d       	adc	r31, r5
    afca:	e3 57       	subi	r30, 0x73	; 115
    afcc:	f8 4f       	sbci	r31, 0xF8	; 248
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    afce:	e4 91       	lpm	r30, Z
    afd0:	48 01       	movw	r8, r16
    afd2:	d8 01       	movw	r26, r16
    afd4:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    afd6:	e8 35       	cpi	r30, 0x58	; 88
    afd8:	31 f4       	brne	.+12     	; 0xafe6 <load_level+0xc6>
		{
			prep_player(&player1, x, y);
    afda:	a7 01       	movw	r20, r14
    afdc:	b3 01       	movw	r22, r6
    afde:	88 ea       	ldi	r24, 0xA8	; 168
    afe0:	9b e0       	ldi	r25, 0x0B	; 11
    afe2:	0e 94 76 57 	call	0xaeec	; 0xaeec <prep_player>
    afe6:	0f 5f       	subi	r16, 0xFF	; 255
    afe8:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if (level.level_map[i] == L_P2_SPAWN)
    afea:	f4 01       	movw	r30, r8
    afec:	80 81       	ld	r24, Z
    afee:	83 36       	cpi	r24, 0x63	; 99
    aff0:	31 f4       	brne	.+12     	; 0xaffe <load_level+0xde>
		{
			prep_player(&player2, x, y);
    aff2:	a7 01       	movw	r20, r14
    aff4:	b3 01       	movw	r22, r6
    aff6:	8e e1       	ldi	r24, 0x1E	; 30
    aff8:	9f e0       	ldi	r25, 0x0F	; 15
    affa:	0e 94 76 57 	call	0xaeec	; 0xaeec <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (u16 i = 0; i < 30*25; i++)
    affe:	21 96       	adiw	r28, 0x01	; 1
    b000:	ce 3e       	cpi	r28, 0xEE	; 238
    b002:	f2 e0       	ldi	r31, 0x02	; 2
    b004:	df 07       	cpc	r29, r31
    b006:	41 f6       	brne	.-112    	; 0xaf98 <load_level+0x78>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    b008:	60 e0       	ldi	r22, 0x00	; 0
    b00a:	88 ea       	ldi	r24, 0xA8	; 168
    b00c:	9b e0       	ldi	r25, 0x0B	; 11
    b00e:	0e 94 ab 50 	call	0xa156	; 0xa156 <render_hud>
	render_hud(&player2, 15);
    b012:	6f e0       	ldi	r22, 0x0F	; 15
    b014:	8e e1       	ldi	r24, 0x1E	; 30
    b016:	9f e0       	ldi	r25, 0x0F	; 15
    b018:	0e 94 ab 50 	call	0xa156	; 0xa156 <render_hud>
	render_score(&player1, 0);
    b01c:	60 e0       	ldi	r22, 0x00	; 0
    b01e:	88 ea       	ldi	r24, 0xA8	; 168
    b020:	9b e0       	ldi	r25, 0x0B	; 11
    b022:	0e 94 c8 50 	call	0xa190	; 0xa190 <render_score>
	render_score(&player2, 15);
    b026:	6f e0       	ldi	r22, 0x0F	; 15
    b028:	8e e1       	ldi	r24, 0x1E	; 30
    b02a:	9f e0       	ldi	r25, 0x0F	; 15
    b02c:	0e 94 c8 50 	call	0xa190	; 0xa190 <render_score>
	Print(14, 0, (char*) strVertSep);
    b030:	42 e0       	ldi	r20, 0x02	; 2
    b032:	54 e0       	ldi	r21, 0x04	; 4
    b034:	60 e0       	ldi	r22, 0x00	; 0
    b036:	70 e0       	ldi	r23, 0x00	; 0
    b038:	8e e0       	ldi	r24, 0x0E	; 14
    b03a:	90 e0       	ldi	r25, 0x00	; 0
    b03c:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(14, 1, (char*) strVertSep);
    b040:	42 e0       	ldi	r20, 0x02	; 2
    b042:	54 e0       	ldi	r21, 0x04	; 4
    b044:	61 e0       	ldi	r22, 0x01	; 1
    b046:	70 e0       	ldi	r23, 0x00	; 0
    b048:	8e e0       	ldi	r24, 0x0E	; 14
    b04a:	90 e0       	ldi	r25, 0x00	; 0
    b04c:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(14, 2, (char*) strVertSep);
    b050:	42 e0       	ldi	r20, 0x02	; 2
    b052:	54 e0       	ldi	r21, 0x04	; 4
    b054:	62 e0       	ldi	r22, 0x02	; 2
    b056:	70 e0       	ldi	r23, 0x00	; 0
    b058:	8e e0       	ldi	r24, 0x0E	; 14
    b05a:	90 e0       	ldi	r25, 0x00	; 0
    b05c:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	load_level_tiles(false);
    b060:	80 e0       	ldi	r24, 0x00	; 0
}
    b062:	df 91       	pop	r29
    b064:	cf 91       	pop	r28
    b066:	1f 91       	pop	r17
    b068:	0f 91       	pop	r16
    b06a:	ff 90       	pop	r15
    b06c:	ef 90       	pop	r14
    b06e:	df 90       	pop	r13
    b070:	cf 90       	pop	r12
    b072:	bf 90       	pop	r11
    b074:	af 90       	pop	r10
    b076:	9f 90       	pop	r9
    b078:	8f 90       	pop	r8
    b07a:	7f 90       	pop	r7
    b07c:	6f 90       	pop	r6
    b07e:	5f 90       	pop	r5
    b080:	4f 90       	pop	r4
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    b082:	0c 94 03 57 	jmp	0xae06	; 0xae06 <load_level_tiles>

0000b086 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    b086:	cf 93       	push	r28
    b088:	df 93       	push	r29
    b08a:	c8 2f       	mov	r28, r24
	//FadeOut(FRAMES_PER_FADE, true);
	ClearVram();
    b08c:	0e 94 3e 3a 	call	0x747c	; 0x747c <ClearVram>
	clear_sprites();
    b090:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    b094:	d0 e0       	ldi	r29, 0x00	; 0
    b096:	ae 01       	movw	r20, r28
    b098:	84 e0       	ldi	r24, 0x04	; 4
    b09a:	44 0f       	add	r20, r20
    b09c:	55 1f       	adc	r21, r21
    b09e:	8a 95       	dec	r24
    b0a0:	e1 f7       	brne	.-8      	; 0xb09a <level_transition+0x14>
    b0a2:	45 5f       	subi	r20, 0xF5	; 245
    b0a4:	5c 4f       	sbci	r21, 0xFC	; 252
    b0a6:	6c e0       	ldi	r22, 0x0C	; 12
    b0a8:	70 e0       	ldi	r23, 0x00	; 0
    b0aa:	88 e0       	ldi	r24, 0x08	; 8
    b0ac:	90 e0       	ldi	r25, 0x00	; 0
    b0ae:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	FadeIn(1, false);
    b0b2:	60 e0       	ldi	r22, 0x00	; 0
    b0b4:	81 e0       	ldi	r24, 0x01	; 1
    b0b6:	0e 94 49 49 	call	0x9292	; 0x9292 <FadeIn>
	LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    b0ba:	6c e1       	ldi	r22, 0x1C	; 28
    b0bc:	84 e0       	ldi	r24, 0x04	; 4
    b0be:	90 e0       	ldi	r25, 0x00	; 0
    b0c0:	0e 94 31 4c 	call	0x9862	; 0x9862 <LBWaitSeconds>
	//FadeOut(1, true);
	ClearVram();
    b0c4:	0e 94 3e 3a 	call	0x747c	; 0x747c <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b0c8:	60 e0       	ldi	r22, 0x00	; 0
    b0ca:	83 e0       	ldi	r24, 0x03	; 3
    b0cc:	0e 94 49 49 	call	0x9292	; 0x9292 <FadeIn>
	load_level(index);
    b0d0:	ce 01       	movw	r24, r28
}
    b0d2:	df 91       	pop	r29
    b0d4:	cf 91       	pop	r28
	FadeIn(1, false);
	LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
	//FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    b0d6:	0c 94 90 57 	jmp	0xaf20	; 0xaf20 <load_level>

0000b0da <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    b0da:	83 eb       	ldi	r24, 0xB3	; 179
    b0dc:	9f e0       	ldi	r25, 0x0F	; 15
    b0de:	0e 94 5b 51 	call	0xa2b6	; 0xa2b6 <render_scope>
    b0e2:	88 23       	and	r24, r24
    b0e4:	61 f0       	breq	.+24     	; 0xb0fe <render_boss_fight_scope_load+0x24>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    b0e6:	82 e0       	ldi	r24, 0x02	; 2
    b0e8:	80 93 79 0b 	sts	0x0B79, r24
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ALARM);
    b0ec:	27 e0       	ldi	r18, 0x07	; 7
    b0ee:	40 91 8f 0f 	lds	r20, 0x0F8F
    b0f2:	60 91 19 0c 	lds	r22, 0x0C19
    b0f6:	80 91 89 0b 	lds	r24, 0x0B89
    b0fa:	0c 94 5a 4c 	jmp	0x98b4	; 0x98b4 <LBPlaySound>
    b0fe:	08 95       	ret

0000b100 <render_boss_fight_sub_load>:
}

void render_boss_fight_sub_load()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b100:	85 ea       	ldi	r24, 0xA5	; 165
    b102:	9f e0       	ldi	r25, 0x0F	; 15
    b104:	0e 94 46 4b 	call	0x968c	; 0x968c <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    b108:	ac 01       	movw	r20, r24
    b10a:	64 e0       	ldi	r22, 0x04	; 4
    b10c:	81 e0       	ldi	r24, 0x01	; 1
    b10e:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	if (sub_animation.anim.reversing)
    b112:	80 91 aa 0f 	lds	r24, 0x0FAA
    b116:	88 23       	and	r24, r24
    b118:	99 f0       	breq	.+38     	; 0xb140 <render_boss_fight_sub_load+0x40>
	{
		game.boss_fight_status = BOSS_FIGHT;
    b11a:	84 e0       	ldi	r24, 0x04	; 4
    b11c:	80 93 79 0b 	sts	0x0B79, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 7200);
    b120:	40 e2       	ldi	r20, 0x20	; 32
    b122:	5c e1       	ldi	r21, 0x1C	; 28
    b124:	60 e8       	ldi	r22, 0x80	; 128
    b126:	75 e2       	ldi	r23, 0x25	; 37
    b128:	80 ef       	ldi	r24, 0xF0	; 240
    b12a:	9f e0       	ldi	r25, 0x0F	; 15
    b12c:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 7200);
    b130:	40 e2       	ldi	r20, 0x20	; 32
    b132:	5c e1       	ldi	r21, 0x1C	; 28
    b134:	60 e0       	ldi	r22, 0x00	; 0
    b136:	7b e4       	ldi	r23, 0x4B	; 75
    b138:	81 ec       	ldi	r24, 0xC1	; 193
    b13a:	9f e0       	ldi	r25, 0x0F	; 15
    b13c:	0c 94 07 4e 	jmp	0x9c0e	; 0x9c0e <init_turret>
    b140:	08 95       	ret

0000b142 <render_boss_fight_sub_sinking>:
}

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b142:	85 ea       	ldi	r24, 0xA5	; 165
    b144:	9f e0       	ldi	r25, 0x0F	; 15
    b146:	0e 94 46 4b 	call	0x968c	; 0x968c <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    b14a:	20 91 a5 0f 	lds	r18, 0x0FA5
    b14e:	21 11       	cpse	r18, r1
    b150:	05 c0       	rjmp	.+10     	; 0xb15c <render_boss_fight_sub_sinking+0x1a>
    b152:	ac 01       	movw	r20, r24
    b154:	64 e0       	ldi	r22, 0x04	; 4
    b156:	81 e0       	ldi	r24, 0x01	; 1
    b158:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	if (sub_animation.anim.looped)
    b15c:	80 91 a9 0f 	lds	r24, 0x0FA9
    b160:	88 23       	and	r24, r24
    b162:	19 f0       	breq	.+6      	; 0xb16a <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    b164:	88 e0       	ldi	r24, 0x08	; 8
    b166:	80 93 79 0b 	sts	0x0B79, r24
    b16a:	08 95       	ret

0000b16c <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    b16c:	0f 93       	push	r16
    b16e:	cf 93       	push	r28
    b170:	fc 01       	movw	r30, r24
    b172:	c6 2f       	mov	r28, r22
	MoveSprite(sprite_index, t->shared.x / 100, t->shared.y / 100, 1, 1);
    b174:	86 81       	ldd	r24, Z+6	; 0x06
    b176:	97 81       	ldd	r25, Z+7	; 0x07
    b178:	24 e6       	ldi	r18, 0x64	; 100
    b17a:	30 e0       	ldi	r19, 0x00	; 0
    b17c:	b9 01       	movw	r22, r18
    b17e:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    b182:	46 2f       	mov	r20, r22
    b184:	84 81       	ldd	r24, Z+4	; 0x04
    b186:	95 81       	ldd	r25, Z+5	; 0x05
    b188:	b9 01       	movw	r22, r18
    b18a:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    b18e:	01 e0       	ldi	r16, 0x01	; 1
    b190:	21 e0       	ldi	r18, 0x01	; 1
    b192:	8c 2f       	mov	r24, r28
    b194:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
}
    b198:	cf 91       	pop	r28
    b19a:	0f 91       	pop	r16
    b19c:	08 95       	ret

0000b19e <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    b19e:	0f 93       	push	r16
    b1a0:	cf 93       	push	r28
    b1a2:	fc 01       	movw	r30, r24
    b1a4:	c6 2f       	mov	r28, r22
	MoveSprite(sprite_index, t->shot[0].shared.x / 100, t->shot[0].shared.y / 100, 1, 1);
    b1a6:	87 85       	ldd	r24, Z+15	; 0x0f
    b1a8:	90 89       	ldd	r25, Z+16	; 0x10
    b1aa:	24 e6       	ldi	r18, 0x64	; 100
    b1ac:	30 e0       	ldi	r19, 0x00	; 0
    b1ae:	b9 01       	movw	r22, r18
    b1b0:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    b1b4:	46 2f       	mov	r20, r22
    b1b6:	85 85       	ldd	r24, Z+13	; 0x0d
    b1b8:	96 85       	ldd	r25, Z+14	; 0x0e
    b1ba:	b9 01       	movw	r22, r18
    b1bc:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    b1c0:	01 e0       	ldi	r16, 0x01	; 1
    b1c2:	21 e0       	ldi	r18, 0x01	; 1
    b1c4:	8c 2f       	mov	r24, r28
    b1c6:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
}
    b1ca:	cf 91       	pop	r28
    b1cc:	0f 91       	pop	r16
    b1ce:	08 95       	ret

0000b1d0 <update_turret>:

void update_turret(Turret *t, u16 left_limit, u16 right_limit)
{
    b1d0:	cf 93       	push	r28
    b1d2:	df 93       	push	r29
    b1d4:	fc 01       	movw	r30, r24
	u8 x = t->shared.x / 800;
    b1d6:	24 81       	ldd	r18, Z+4	; 0x04
    b1d8:	35 81       	ldd	r19, Z+5	; 0x05
	u8 y = t->shared.y / 800 - 3;
    b1da:	86 81       	ldd	r24, Z+6	; 0x06
    b1dc:	97 81       	ldd	r25, Z+7	; 0x07
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    b1de:	a0 85       	ldd	r26, Z+8	; 0x08
    b1e0:	a1 11       	cpse	r26, r1
    b1e2:	1a c0       	rjmp	.+52     	; 0xb218 <update_turret+0x48>
}

void update_turret(Turret *t, u16 left_limit, u16 right_limit)
{
	u8 x = t->shared.x / 800;
	u8 y = t->shared.y / 800 - 3;
    b1e4:	e0 e2       	ldi	r30, 0x20	; 32
    b1e6:	f3 e0       	ldi	r31, 0x03	; 3
    b1e8:	bf 01       	movw	r22, r30
    b1ea:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    b1ee:	4d ef       	ldi	r20, 0xFD	; 253
    b1f0:	46 0f       	add	r20, r22
	MoveSprite(sprite_index, t->shot[0].shared.x / 100, t->shot[0].shared.y / 100, 1, 1);
}

void update_turret(Turret *t, u16 left_limit, u16 right_limit)
{
	u8 x = t->shared.x / 800;
    b1f2:	c9 01       	movw	r24, r18
    b1f4:	bf 01       	movw	r22, r30
    b1f6:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
	u8 y = t->shared.y / 800 - 3;
	int tile_index = (y * 30) + x;
    b1fa:	eb 01       	movw	r28, r22
    b1fc:	8e e1       	ldi	r24, 0x1E	; 30
    b1fe:	48 9f       	mul	r20, r24
    b200:	c0 0d       	add	r28, r0
    b202:	d1 1d       	adc	r29, r1
    b204:	11 24       	eor	r1, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    b206:	be 01       	movw	r22, r28
    b208:	8a e8       	ldi	r24, 0x8A	; 138
    b20a:	9b e0       	ldi	r25, 0x0B	; 11
    b20c:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    b210:	c1 5d       	subi	r28, 0xD1	; 209
    b212:	d3 4f       	sbci	r29, 0xF3	; 243
    b214:	19 82       	std	Y+1, r1	; 0x01
    b216:	27 c0       	rjmp	.+78     	; 0xb266 <update_turret+0x96>
	}
	else if (t->shared.direction == D_LEFT)
    b218:	80 81       	ld	r24, Z
    b21a:	83 30       	cpi	r24, 0x03	; 3
    b21c:	71 f4       	brne	.+28     	; 0xb23a <update_turret+0x6a>
	{
		if (t->shared.x < left_limit)
    b21e:	26 17       	cp	r18, r22
    b220:	37 07       	cpc	r19, r23
    b222:	10 f4       	brcc	.+4      	; 0xb228 <update_turret+0x58>
		{
			t->shared.direction = D_RIGHT;
    b224:	81 e0       	ldi	r24, 0x01	; 1
    b226:	0f c0       	rjmp	.+30     	; 0xb246 <update_turret+0x76>
			t->shared.speed = BOSS_TURRET_SPEED;
		}
		else
		{
			t->shared.x -= t->shared.speed / FRAME_TIME_INVERTED;
    b228:	81 81       	ldd	r24, Z+1	; 0x01
    b22a:	92 81       	ldd	r25, Z+2	; 0x02
    b22c:	6c e3       	ldi	r22, 0x3C	; 60
    b22e:	70 e0       	ldi	r23, 0x00	; 0
    b230:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    b234:	26 1b       	sub	r18, r22
    b236:	37 0b       	sbc	r19, r23
    b238:	14 c0       	rjmp	.+40     	; 0xb262 <update_turret+0x92>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    b23a:	81 30       	cpi	r24, 0x01	; 1
    b23c:	a1 f4       	brne	.+40     	; 0xb266 <update_turret+0x96>
	{
		if (t->shared.x > right_limit)
    b23e:	42 17       	cp	r20, r18
    b240:	53 07       	cpc	r21, r19
    b242:	38 f4       	brcc	.+14     	; 0xb252 <update_turret+0x82>
		{
			t->shared.direction = D_LEFT;
    b244:	83 e0       	ldi	r24, 0x03	; 3
    b246:	80 83       	st	Z, r24
			t->shared.speed = BOSS_TURRET_SPEED;
    b248:	88 e2       	ldi	r24, 0x28	; 40
    b24a:	93 e2       	ldi	r25, 0x23	; 35
    b24c:	92 83       	std	Z+2, r25	; 0x02
    b24e:	81 83       	std	Z+1, r24	; 0x01
    b250:	0a c0       	rjmp	.+20     	; 0xb266 <update_turret+0x96>
		}
		else
		{
			t->shared.x += t->shared.speed / FRAME_TIME_INVERTED;
    b252:	81 81       	ldd	r24, Z+1	; 0x01
    b254:	92 81       	ldd	r25, Z+2	; 0x02
    b256:	6c e3       	ldi	r22, 0x3C	; 60
    b258:	70 e0       	ldi	r23, 0x00	; 0
    b25a:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    b25e:	26 0f       	add	r18, r22
    b260:	37 1f       	adc	r19, r23
    b262:	35 83       	std	Z+5, r19	; 0x05
    b264:	24 83       	std	Z+4, r18	; 0x04
		}
	}
}
    b266:	df 91       	pop	r29
    b268:	cf 91       	pop	r28
    b26a:	08 95       	ret

0000b26c <load_splash>:
	}
}

void load_splash()
{
	wifiHWResetLow();
    b26c:	0e 94 cd 4a 	call	0x959a	; 0x959a <wifiHWResetLow>
	game.current_screen = SPLASH;
    b270:	e6 e7       	ldi	r30, 0x76	; 118
    b272:	fb e0       	ldi	r31, 0x0B	; 11
    b274:	10 82       	st	Z, r1
	game.selection = PVCPU;
    b276:	13 8a       	std	Z+19, r1	; 0x13
	clear_sprites();
    b278:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else
	Print(7, 13, (char*) str1Player);
    b27c:	45 e2       	ldi	r20, 0x25	; 37
    b27e:	55 e0       	ldi	r21, 0x05	; 5
    b280:	6d e0       	ldi	r22, 0x0D	; 13
    b282:	70 e0       	ldi	r23, 0x00	; 0
    b284:	87 e0       	ldi	r24, 0x07	; 7
    b286:	90 e0       	ldi	r25, 0x00	; 0
    b288:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(7, 14, (char*) str2Player);
    b28c:	44 e1       	ldi	r20, 0x14	; 20
    b28e:	55 e0       	ldi	r21, 0x05	; 5
    b290:	6e e0       	ldi	r22, 0x0E	; 14
    b292:	70 e0       	ldi	r23, 0x00	; 0
    b294:	87 e0       	ldi	r24, 0x07	; 7
    b296:	90 e0       	ldi	r25, 0x00	; 0
    b298:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(7, 15, (char*) strHostNetGame);
    b29c:	46 e0       	ldi	r20, 0x06	; 6
    b29e:	55 e0       	ldi	r21, 0x05	; 5
    b2a0:	6f e0       	ldi	r22, 0x0F	; 15
    b2a2:	70 e0       	ldi	r23, 0x00	; 0
    b2a4:	87 e0       	ldi	r24, 0x07	; 7
    b2a6:	90 e0       	ldi	r25, 0x00	; 0
    b2a8:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(7, 16, (char*) strJoinNetGame);
    b2ac:	48 ef       	ldi	r20, 0xF8	; 248
    b2ae:	54 e0       	ldi	r21, 0x04	; 4
    b2b0:	60 e1       	ldi	r22, 0x10	; 16
    b2b2:	70 e0       	ldi	r23, 0x00	; 0
    b2b4:	87 e0       	ldi	r24, 0x07	; 7
    b2b6:	90 e0       	ldi	r25, 0x00	; 0
    b2b8:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(7, 17, (char*) strHighscores);
    b2bc:	4c e1       	ldi	r20, 0x1C	; 28
    b2be:	54 e0       	ldi	r21, 0x04	; 4
    b2c0:	61 e1       	ldi	r22, 0x11	; 17
    b2c2:	70 e0       	ldi	r23, 0x00	; 0
    b2c4:	87 e0       	ldi	r24, 0x07	; 7
    b2c6:	90 e0       	ldi	r25, 0x00	; 0
    b2c8:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(5, 26, (char*) strCopyright);
    b2cc:	46 e2       	ldi	r20, 0x26	; 38
    b2ce:	54 e0       	ldi	r21, 0x04	; 4
    b2d0:	6a e1       	ldi	r22, 0x1A	; 26
    b2d2:	70 e0       	ldi	r23, 0x00	; 0
    b2d4:	85 e0       	ldi	r24, 0x05	; 5
    b2d6:	90 e0       	ldi	r25, 0x00	; 0
    b2d8:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	MapSprite2(0, map_right_arrow, 0);
    b2dc:	40 e0       	ldi	r20, 0x00	; 0
    b2de:	63 e1       	ldi	r22, 0x13	; 19
    b2e0:	71 e3       	ldi	r23, 0x31	; 49
    b2e2:	80 e0       	ldi	r24, 0x00	; 0
    b2e4:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    b2e8:	46 ec       	ldi	r20, 0xC6	; 198
    b2ea:	5a e6       	ldi	r21, 0x6A	; 106
    b2ec:	65 e0       	ldi	r22, 0x05	; 5
    b2ee:	84 e0       	ldi	r24, 0x04	; 4
    b2f0:	0c 94 86 48 	jmp	0x910c	; 0x910c <DrawMap>

0000b2f4 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    b2f4:	fc 01       	movw	r30, r24
    b2f6:	20 81       	ld	r18, Z
    b2f8:	31 81       	ldd	r19, Z+1	; 0x01
    b2fa:	28 70       	andi	r18, 0x08	; 8
    b2fc:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &player2.netMessage.joyPadState) return player1.netMessage.joyPadState.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b2fe:	81 e0       	ldi	r24, 0x01	; 1
    b300:	23 2b       	or	r18, r19
    b302:	09 f4       	brne	.+2      	; 0xb306 <select_pressed+0x12>
    b304:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    b306:	08 95       	ret

0000b308 <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    b308:	ff 92       	push	r15
    b30a:	0f 93       	push	r16
    b30c:	1f 93       	push	r17
    b30e:	cf 93       	push	r28
    b310:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    b312:	81 e0       	ldi	r24, 0x01	; 1
    b314:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    b318:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    b31c:	43 e9       	ldi	r20, 0x93	; 147
    b31e:	5a e6       	ldi	r21, 0x6A	; 106
    b320:	61 e0       	ldi	r22, 0x01	; 1
    b322:	87 e0       	ldi	r24, 0x07	; 7
    b324:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    b328:	4d e8       	ldi	r20, 0x8D	; 141
    b32a:	5a e6       	ldi	r21, 0x6A	; 106
    b32c:	61 e0       	ldi	r22, 0x01	; 1
    b32e:	84 e1       	ldi	r24, 0x14	; 20
    b330:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	Print(10, 2, (char*) strHighscores);
    b334:	4c e1       	ldi	r20, 0x1C	; 28
    b336:	54 e0       	ldi	r21, 0x04	; 4
    b338:	62 e0       	ldi	r22, 0x02	; 2
    b33a:	70 e0       	ldi	r23, 0x00	; 0
    b33c:	8a e0       	ldi	r24, 0x0A	; 10
    b33e:	90 e0       	ldi	r25, 0x00	; 0
    b340:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    b344:	0c e3       	ldi	r16, 0x3C	; 60
    b346:	1b e0       	ldi	r17, 0x0B	; 11
    b348:	c7 e0       	ldi	r28, 0x07	; 7
    b34a:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    b34c:	ff 24       	eor	r15, r15
    b34e:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    b350:	20 e0       	ldi	r18, 0x00	; 0
    b352:	4f 2d       	mov	r20, r15
    b354:	be 01       	movw	r22, r28
    b356:	82 e0       	ldi	r24, 0x02	; 2
    b358:	90 e0       	ldi	r25, 0x00	; 0
    b35a:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
		PrintChar(3, y, '.');
    b35e:	4e e2       	ldi	r20, 0x2E	; 46
    b360:	be 01       	movw	r22, r28
    b362:	83 e0       	ldi	r24, 0x03	; 3
    b364:	90 e0       	ldi	r25, 0x00	; 0
    b366:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
    b36a:	f8 01       	movw	r30, r16
    b36c:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    b36e:	80 81       	ld	r24, Z
    b370:	93 e0       	ldi	r25, 0x03	; 3
    b372:	89 9f       	mul	r24, r25
    b374:	a0 01       	movw	r20, r0
    b376:	11 24       	eor	r1, r1
    b378:	48 5a       	subi	r20, 0xA8	; 168
    b37a:	54 4f       	sbci	r21, 0xF4	; 244
    b37c:	23 e0       	ldi	r18, 0x03	; 3
    b37e:	6c 2f       	mov	r22, r28
    b380:	85 e0       	ldi	r24, 0x05	; 5
    b382:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
		Print(9, y, (char*) strOwns);
    b386:	48 ee       	ldi	r20, 0xE8	; 232
    b388:	53 e0       	ldi	r21, 0x03	; 3
    b38a:	be 01       	movw	r22, r28
    b38c:	89 e0       	ldi	r24, 0x09	; 9
    b38e:	90 e0       	ldi	r25, 0x00	; 0
    b390:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    b394:	f8 01       	movw	r30, r16
    b396:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    b398:	80 81       	ld	r24, Z
    b39a:	e3 e0       	ldi	r30, 0x03	; 3
    b39c:	8e 9f       	mul	r24, r30
    b39e:	a0 01       	movw	r20, r0
    b3a0:	11 24       	eor	r1, r1
    b3a2:	48 5a       	subi	r20, 0xA8	; 168
    b3a4:	54 4f       	sbci	r21, 0xF4	; 244
    b3a6:	23 e0       	ldi	r18, 0x03	; 3
    b3a8:	6c 2f       	mov	r22, r28
    b3aa:	8e e0       	ldi	r24, 0x0E	; 14
    b3ac:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
		Print(18, y, (char*) strBy);
    b3b0:	45 ee       	ldi	r20, 0xE5	; 229
    b3b2:	53 e0       	ldi	r21, 0x03	; 3
    b3b4:	be 01       	movw	r22, r28
    b3b6:	82 e1       	ldi	r24, 0x12	; 18
    b3b8:	90 e0       	ldi	r25, 0x00	; 0
    b3ba:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    b3be:	21 e0       	ldi	r18, 0x01	; 1
    b3c0:	f8 01       	movw	r30, r16
    b3c2:	32 97       	sbiw	r30, 0x02	; 2
    b3c4:	40 81       	ld	r20, Z
    b3c6:	be 01       	movw	r22, r28
    b3c8:	87 e1       	ldi	r24, 0x17	; 23
    b3ca:	90 e0       	ldi	r25, 0x00	; 0
    b3cc:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
		PrintChar(24, y, '-');
    b3d0:	4d e2       	ldi	r20, 0x2D	; 45
    b3d2:	be 01       	movw	r22, r28
    b3d4:	88 e1       	ldi	r24, 0x18	; 24
    b3d6:	90 e0       	ldi	r25, 0x00	; 0
    b3d8:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    b3dc:	21 e0       	ldi	r18, 0x01	; 1
    b3de:	f8 01       	movw	r30, r16
    b3e0:	31 97       	sbiw	r30, 0x01	; 1
    b3e2:	40 81       	ld	r20, Z
    b3e4:	be 01       	movw	r22, r28
    b3e6:	8b e1       	ldi	r24, 0x1B	; 27
    b3e8:	90 e0       	ldi	r25, 0x00	; 0
    b3ea:	0e 94 d3 48 	call	0x91a6	; 0x91a6 <PrintByte>
		if (scores.data[i+4])
    b3ee:	f8 01       	movw	r30, r16
    b3f0:	80 81       	ld	r24, Z
    b3f2:	88 23       	and	r24, r24
    b3f4:	11 f0       	breq	.+4      	; 0xb3fa <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    b3f6:	4a e2       	ldi	r20, 0x2A	; 42
    b3f8:	01 c0       	rjmp	.+2      	; 0xb3fc <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    b3fa:	40 e2       	ldi	r20, 0x20	; 32
    b3fc:	be 01       	movw	r22, r28
    b3fe:	8d e1       	ldi	r24, 0x1D	; 29
    b400:	90 e0       	ldi	r25, 0x00	; 0
    b402:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		y += 3;
		rank += 1;
    b406:	f3 94       	inc	r15
    b408:	23 96       	adiw	r28, 0x03	; 3
    b40a:	0b 5f       	subi	r16, 0xFB	; 251
    b40c:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    b40e:	f6 e0       	ldi	r31, 0x06	; 6
    b410:	ff 12       	cpse	r15, r31
    b412:	9e cf       	rjmp	.-196    	; 0xb350 <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    b414:	45 e5       	ldi	r20, 0x55	; 85
    b416:	54 e0       	ldi	r21, 0x04	; 4
    b418:	66 e1       	ldi	r22, 0x16	; 22
    b41a:	70 e0       	ldi	r23, 0x00	; 0
    b41c:	83 e0       	ldi	r24, 0x03	; 3
    b41e:	90 e0       	ldi	r25, 0x00	; 0
    b420:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(10, 24, (char*) strCancelHandle);
    b424:	4a e4       	ldi	r20, 0x4A	; 74
    b426:	54 e0       	ldi	r21, 0x04	; 4
    b428:	68 e1       	ldi	r22, 0x18	; 24
    b42a:	70 e0       	ldi	r23, 0x00	; 0
    b42c:	8a e0       	ldi	r24, 0x0A	; 10
    b42e:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    b430:	df 91       	pop	r29
    b432:	cf 91       	pop	r28
    b434:	1f 91       	pop	r17
    b436:	0f 91       	pop	r16
    b438:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    b43a:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>

0000b43e <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b43e:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <save_score>
	fade_through();
    b442:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
	init_game_state();
    b446:	0e 94 b0 4e 	call	0x9d60	; 0x9d60 <init_game_state>
	load_tank_rank();
    b44a:	0c 94 84 59 	jmp	0xb308	; 0xb308 <load_tank_rank>

0000b44e <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    b44e:	cf 93       	push	r28
    b450:	df 93       	push	r29
    b452:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    b454:	88 81       	ld	r24, Y
    b456:	99 81       	ldd	r25, Y+1	; 0x01
    b458:	91 ff       	sbrs	r25, 1
    b45a:	11 c0       	rjmp	.+34     	; 0xb47e <update_tank_rank+0x30>
	{
		game.tank_rank_counter = 0;
    b45c:	10 92 84 0b 	sts	0x0B84, r1
    b460:	10 92 83 0b 	sts	0x0B83, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b464:	24 e0       	ldi	r18, 0x04	; 4
    b466:	40 91 8f 0f 	lds	r20, 0x0F8F
    b46a:	60 91 19 0c 	lds	r22, 0x0C19
    b46e:	80 91 89 0b 	lds	r24, 0x0B89
    b472:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		fade_through();
    b476:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
		load_splash();
    b47a:	0e 94 36 59 	call	0xb26c	; 0xb26c <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    b47e:	8c 81       	ldd	r24, Y+4	; 0x04
    b480:	9d 81       	ldd	r25, Y+5	; 0x05
    b482:	92 ff       	sbrs	r25, 2
    b484:	22 c0       	rjmp	.+68     	; 0xb4ca <update_tank_rank+0x7c>
    b486:	8e 81       	ldd	r24, Y+6	; 0x06
    b488:	8f 3f       	cpi	r24, 0xFF	; 255
    b48a:	f9 f4       	brne	.+62     	; 0xb4ca <update_tank_rank+0x7c>
	{
		game.tank_rank_counter = 0;
    b48c:	10 92 84 0b 	sts	0x0B84, r1
    b490:	10 92 83 0b 	sts	0x0B83, r1
	    LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b494:	24 e0       	ldi	r18, 0x04	; 4
    b496:	40 91 8f 0f 	lds	r20, 0x0F8F
    b49a:	60 91 19 0c 	lds	r22, 0x0C19
    b49e:	80 91 89 0b 	lds	r24, 0x0B89
    b4a2:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
	    init_scores(&scores);
    b4a6:	86 e3       	ldi	r24, 0x36	; 54
    b4a8:	9b e0       	ldi	r25, 0x0B	; 11
    b4aa:	0e 94 50 4d 	call	0x9aa0	; 0x9aa0 <init_scores>
	    init_handles(&handles);
    b4ae:	86 e5       	ldi	r24, 0x56	; 86
    b4b0:	9b e0       	ldi	r25, 0x0B	; 11
    b4b2:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b4b6:	86 e3       	ldi	r24, 0x36	; 54
    b4b8:	9b e0       	ldi	r25, 0x0B	; 11
    b4ba:	0e 94 c0 3b 	call	0x7780	; 0x7780 <EepromWriteBlock>
    b4be:	86 e5       	ldi	r24, 0x56	; 86
    b4c0:	9b e0       	ldi	r25, 0x0B	; 11
    b4c2:	0e 94 c0 3b 	call	0x7780	; 0x7780 <EepromWriteBlock>
	    LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    b4c6:	0e 94 84 59 	call	0xb308	; 0xb308 <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    b4ca:	80 91 83 0b 	lds	r24, 0x0B83
    b4ce:	90 91 84 0b 	lds	r25, 0x0B84
    b4d2:	85 38       	cpi	r24, 0x85	; 133
    b4d4:	93 40       	sbci	r25, 0x03	; 3
    b4d6:	88 f0       	brcs	.+34     	; 0xb4fa <update_tank_rank+0xac>
	{
		game.tank_rank_counter = 0;
    b4d8:	10 92 84 0b 	sts	0x0B84, r1
    b4dc:	10 92 83 0b 	sts	0x0B83, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b4e0:	24 e0       	ldi	r18, 0x04	; 4
    b4e2:	40 91 8f 0f 	lds	r20, 0x0F8F
    b4e6:	60 91 19 0c 	lds	r22, 0x0C19
    b4ea:	80 91 89 0b 	lds	r24, 0x0B89
    b4ee:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		fade_through();
    b4f2:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
		load_splash();
    b4f6:	0e 94 36 59 	call	0xb26c	; 0xb26c <load_splash>
	}
	game.tank_rank_counter++;
    b4fa:	80 91 83 0b 	lds	r24, 0x0B83
    b4fe:	90 91 84 0b 	lds	r25, 0x0B84
    b502:	01 96       	adiw	r24, 0x01	; 1
    b504:	90 93 84 0b 	sts	0x0B84, r25
    b508:	80 93 83 0b 	sts	0x0B83, r24
#endif
}
    b50c:	df 91       	pop	r29
    b50e:	cf 91       	pop	r28
    b510:	08 95       	ret

0000b512 <_handle_select_render_helper>:
	}
#endif
}

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    b512:	af 92       	push	r10
    b514:	bf 92       	push	r11
    b516:	cf 92       	push	r12
    b518:	df 92       	push	r13
    b51a:	ef 92       	push	r14
    b51c:	ff 92       	push	r15
    b51e:	0f 93       	push	r16
    b520:	1f 93       	push	r17
    b522:	cf 93       	push	r28
    b524:	df 93       	push	r29
    b526:	00 d0       	rcall	.+0      	; 0xb528 <_handle_select_render_helper+0x16>
    b528:	1f 92       	push	r1
    b52a:	cd b7       	in	r28, 0x3d	; 61
    b52c:	de b7       	in	r29, 0x3e	; 62
    b52e:	7c 01       	movw	r14, r24
    b530:	b4 2e       	mov	r11, r20
    b532:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    b534:	80 e2       	ldi	r24, 0x20	; 32
    b536:	89 83       	std	Y+1, r24	; 0x01
    b538:	8a 83       	std	Y+2, r24	; 0x02
    b53a:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    b53c:	f7 01       	movw	r30, r14
    b53e:	85 81       	ldd	r24, Z+5	; 0x05
    b540:	81 11       	cpse	r24, r1
    b542:	1d c0       	rjmp	.+58     	; 0xb57e <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    b544:	40 e0       	ldi	r20, 0x00	; 0
    b546:	63 e1       	ldi	r22, 0x13	; 19
    b548:	71 e3       	ldi	r23, 0x31	; 49
    b54a:	82 2f       	mov	r24, r18
    b54c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b550:	40 e0       	ldi	r20, 0x00	; 0
    b552:	65 e5       	ldi	r22, 0x55	; 85
    b554:	71 e3       	ldi	r23, 0x31	; 49
    b556:	81 e0       	ldi	r24, 0x01	; 1
    b558:	81 0f       	add	r24, r17
    b55a:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    b55e:	f7 01       	movw	r30, r14
    b560:	40 81       	ld	r20, Z
    b562:	44 0f       	add	r20, r20
    b564:	44 0f       	add	r20, r20
    b566:	44 0f       	add	r20, r20
    b568:	40 5c       	subi	r20, 0xC0	; 192
    b56a:	01 e0       	ldi	r16, 0x01	; 1
    b56c:	21 e0       	ldi	r18, 0x01	; 1
    b56e:	6b 2d       	mov	r22, r11
    b570:	66 0f       	add	r22, r22
    b572:	66 0f       	add	r22, r22
    b574:	66 0f       	add	r22, r22
    b576:	81 2f       	mov	r24, r17
    b578:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
    b57c:	6e c0       	rjmp	.+220    	; 0xb65a <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == EDITING)
    b57e:	81 30       	cpi	r24, 0x01	; 1
    b580:	09 f0       	breq	.+2      	; 0xb584 <_handle_select_render_helper+0x72>
    b582:	43 c0       	rjmp	.+134    	; 0xb60a <_handle_select_render_helper+0xf8>
	{
		MapSprite2(idx, map_down_arrow, 0);
    b584:	40 e0       	ldi	r20, 0x00	; 0
    b586:	60 e1       	ldi	r22, 0x10	; 16
    b588:	71 e3       	ldi	r23, 0x31	; 49
    b58a:	82 2f       	mov	r24, r18
    b58c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    b590:	aa 24       	eor	r10, r10
    b592:	a3 94       	inc	r10
    b594:	a1 0e       	add	r10, r17
    b596:	40 e0       	ldi	r20, 0x00	; 0
    b598:	6d e0       	ldi	r22, 0x0D	; 13
    b59a:	71 e3       	ldi	r23, 0x31	; 49
    b59c:	8a 2d       	mov	r24, r10
    b59e:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    b5a2:	cb 2c       	mov	r12, r11
    b5a4:	d1 2c       	mov	r13, r1
    b5a6:	f5 e0       	ldi	r31, 0x05	; 5
    b5a8:	cf 0e       	add	r12, r31
    b5aa:	d1 1c       	adc	r13, r1
    b5ac:	f7 01       	movw	r30, r14
    b5ae:	40 81       	ld	r20, Z
    b5b0:	44 0f       	add	r20, r20
    b5b2:	44 0f       	add	r20, r20
    b5b4:	44 0f       	add	r20, r20
    b5b6:	48 5c       	subi	r20, 0xC8	; 200
    b5b8:	84 81       	ldd	r24, Z+4	; 0x04
    b5ba:	b6 01       	movw	r22, r12
    b5bc:	68 0f       	add	r22, r24
    b5be:	71 1d       	adc	r23, r1
    b5c0:	87 fd       	sbrc	r24, 7
    b5c2:	7a 95       	dec	r23
    b5c4:	66 0f       	add	r22, r22
    b5c6:	66 0f       	add	r22, r22
    b5c8:	66 0f       	add	r22, r22
    b5ca:	01 e0       	ldi	r16, 0x01	; 1
    b5cc:	21 e0       	ldi	r18, 0x01	; 1
    b5ce:	81 2f       	mov	r24, r17
    b5d0:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    b5d4:	f7 01       	movw	r30, r14
    b5d6:	40 81       	ld	r20, Z
    b5d8:	44 0f       	add	r20, r20
    b5da:	44 0f       	add	r20, r20
    b5dc:	44 0f       	add	r20, r20
    b5de:	48 5b       	subi	r20, 0xB8	; 184
    b5e0:	84 81       	ldd	r24, Z+4	; 0x04
    b5e2:	c8 0e       	add	r12, r24
    b5e4:	d1 1c       	adc	r13, r1
    b5e6:	87 fd       	sbrc	r24, 7
    b5e8:	da 94       	dec	r13
    b5ea:	6c 2d       	mov	r22, r12
    b5ec:	66 0f       	add	r22, r22
    b5ee:	66 0f       	add	r22, r22
    b5f0:	66 0f       	add	r22, r22
    b5f2:	21 e0       	ldi	r18, 0x01	; 1
    b5f4:	8a 2d       	mov	r24, r10
    b5f6:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
		memcpy(tmp, ps->handle, 3);
    b5fa:	f7 01       	movw	r30, r14
    b5fc:	81 81       	ldd	r24, Z+1	; 0x01
    b5fe:	92 81       	ldd	r25, Z+2	; 0x02
    b600:	a3 81       	ldd	r26, Z+3	; 0x03
    b602:	89 83       	std	Y+1, r24	; 0x01
    b604:	9a 83       	std	Y+2, r25	; 0x02
    b606:	ab 83       	std	Y+3, r26	; 0x03
    b608:	28 c0       	rjmp	.+80     	; 0xb65a <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == CONFIRMED)
    b60a:	82 30       	cpi	r24, 0x02	; 2
    b60c:	31 f5       	brne	.+76     	; 0xb65a <_handle_select_render_helper+0x148>
	{
		PrintChar(x_offset+6, 5, '(');
    b60e:	c4 2e       	mov	r12, r20
    b610:	d1 2c       	mov	r13, r1
    b612:	48 e2       	ldi	r20, 0x28	; 40
    b614:	65 e0       	ldi	r22, 0x05	; 5
    b616:	70 e0       	ldi	r23, 0x00	; 0
    b618:	c6 01       	movw	r24, r12
    b61a:	06 96       	adiw	r24, 0x06	; 6
    b61c:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b620:	23 e0       	ldi	r18, 0x03	; 3
    b622:	a7 01       	movw	r20, r14
    b624:	4f 5f       	subi	r20, 0xFF	; 255
    b626:	5f 4f       	sbci	r21, 0xFF	; 255
    b628:	65 e0       	ldi	r22, 0x05	; 5
    b62a:	87 e0       	ldi	r24, 0x07	; 7
    b62c:	8b 0d       	add	r24, r11
    b62e:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b632:	49 e2       	ldi	r20, 0x29	; 41
    b634:	65 e0       	ldi	r22, 0x05	; 5
    b636:	70 e0       	ldi	r23, 0x00	; 0
    b638:	c6 01       	movw	r24, r12
    b63a:	0a 96       	adiw	r24, 0x0a	; 10
    b63c:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		MapSprite2(idx, map_none, 0);
    b640:	40 e0       	ldi	r20, 0x00	; 0
    b642:	65 e5       	ldi	r22, 0x55	; 85
    b644:	71 e3       	ldi	r23, 0x31	; 49
    b646:	81 2f       	mov	r24, r17
    b648:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b64c:	40 e0       	ldi	r20, 0x00	; 0
    b64e:	65 e5       	ldi	r22, 0x55	; 85
    b650:	71 e3       	ldi	r23, 0x31	; 49
    b652:	81 e0       	ldi	r24, 0x01	; 1
    b654:	81 0f       	add	r24, r17
    b656:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b65a:	f7 01       	movw	r30, r14
    b65c:	60 81       	ld	r22, Z
    b65e:	68 5f       	subi	r22, 0xF8	; 248
    b660:	23 e0       	ldi	r18, 0x03	; 3
    b662:	ae 01       	movw	r20, r28
    b664:	4f 5f       	subi	r20, 0xFF	; 255
    b666:	5f 4f       	sbci	r21, 0xFF	; 255
    b668:	85 e0       	ldi	r24, 0x05	; 5
    b66a:	8b 0d       	add	r24, r11
    b66c:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
}
    b670:	0f 90       	pop	r0
    b672:	0f 90       	pop	r0
    b674:	0f 90       	pop	r0
    b676:	df 91       	pop	r29
    b678:	cf 91       	pop	r28
    b67a:	1f 91       	pop	r17
    b67c:	0f 91       	pop	r16
    b67e:	ff 90       	pop	r15
    b680:	ef 90       	pop	r14
    b682:	df 90       	pop	r13
    b684:	cf 90       	pop	r12
    b686:	bf 90       	pop	r11
    b688:	af 90       	pop	r10
    b68a:	08 95       	ret

0000b68c <load_handle_select>:

void load_handle_select()
{
    b68c:	8f 92       	push	r8
    b68e:	9f 92       	push	r9
    b690:	af 92       	push	r10
    b692:	bf 92       	push	r11
    b694:	cf 92       	push	r12
    b696:	df 92       	push	r13
    b698:	ef 92       	push	r14
    b69a:	ff 92       	push	r15
    b69c:	0f 93       	push	r16
    b69e:	1f 93       	push	r17
    b6a0:	cf 93       	push	r28
    b6a2:	df 93       	push	r29
	player1.netMessage.ps.select_state = SELECTING;
    b6a4:	10 92 2e 0c 	sts	0x0C2E, r1
	player2.netMessage.ps.select_state = SELECTING;
    b6a8:	10 92 a4 0f 	sts	0x0FA4, r1
	player1.netMessage.ps.handle_id = 0;
    b6ac:	10 92 29 0c 	sts	0x0C29, r1
	player2.netMessage.ps.handle_id = 0;
    b6b0:	10 92 9f 0f 	sts	0x0F9F, r1
	player1.netMessage.ps.char_index = 0;
    b6b4:	10 92 2d 0c 	sts	0x0C2D, r1
	player2.netMessage.ps.char_index = 0;
    b6b8:	10 92 a3 0f 	sts	0x0FA3, r1
	game.current_screen = HANDLE_SELECT;
    b6bc:	82 e0       	ldi	r24, 0x02	; 2
    b6be:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    b6c2:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    b6c6:	43 e9       	ldi	r20, 0x93	; 147
    b6c8:	5a e6       	ldi	r21, 0x6A	; 106
    b6ca:	64 e0       	ldi	r22, 0x04	; 4
    b6cc:	83 e0       	ldi	r24, 0x03	; 3
    b6ce:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    b6d2:	4d e8       	ldi	r20, 0x8D	; 141
    b6d4:	5a e6       	ldi	r21, 0x6A	; 106
    b6d6:	64 e0       	ldi	r22, 0x04	; 4
    b6d8:	84 e1       	ldi	r24, 0x14	; 20
    b6da:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    b6de:	40 e1       	ldi	r20, 0x10	; 16
    b6e0:	54 e0       	ldi	r21, 0x04	; 4
    b6e2:	61 e0       	ldi	r22, 0x01	; 1
    b6e4:	70 e0       	ldi	r23, 0x00	; 0
    b6e6:	89 e0       	ldi	r24, 0x09	; 9
    b6e8:	90 e0       	ldi	r25, 0x00	; 0
    b6ea:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(6, 5, (char*) strPlayer1);
    b6ee:	4f ef       	ldi	r20, 0xFF	; 255
    b6f0:	53 e0       	ldi	r21, 0x03	; 3
    b6f2:	65 e0       	ldi	r22, 0x05	; 5
    b6f4:	70 e0       	ldi	r23, 0x00	; 0
    b6f6:	86 e0       	ldi	r24, 0x06	; 6
    b6f8:	90 e0       	ldi	r25, 0x00	; 0
    b6fa:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(23, 5, (char*) strPlayer2);
    b6fe:	4c ef       	ldi	r20, 0xFC	; 252
    b700:	53 e0       	ldi	r21, 0x03	; 3
    b702:	65 e0       	ldi	r22, 0x05	; 5
    b704:	70 e0       	ldi	r23, 0x00	; 0
    b706:	87 e1       	ldi	r24, 0x17	; 23
    b708:	90 e0       	ldi	r25, 0x00	; 0
    b70a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    b70e:	88 e5       	ldi	r24, 0x58	; 88
    b710:	e8 2e       	mov	r14, r24
    b712:	8b e0       	ldi	r24, 0x0B	; 11
    b714:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    b716:	c0 e0       	ldi	r28, 0x00	; 0
    b718:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    b71a:	93 e0       	ldi	r25, 0x03	; 3
    b71c:	a9 2e       	mov	r10, r25
    b71e:	b1 2c       	mov	r11, r1
    b720:	67 01       	movw	r12, r14
    b722:	ce 01       	movw	r24, r28
    b724:	b5 01       	movw	r22, r10
    b726:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    b72a:	4c 01       	movw	r8, r24
    b72c:	8b 01       	movw	r16, r22
    b72e:	08 5f       	subi	r16, 0xF8	; 248
    b730:	1f 4f       	sbci	r17, 0xFF	; 255
    b732:	f7 01       	movw	r30, r14
    b734:	41 91       	ld	r20, Z+
    b736:	7f 01       	movw	r14, r30
    b738:	b8 01       	movw	r22, r16
    b73a:	03 96       	adiw	r24, 0x03	; 3
    b73c:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    b740:	f6 01       	movw	r30, r12
    b742:	40 81       	ld	r20, Z
    b744:	b8 01       	movw	r22, r16
    b746:	c4 01       	movw	r24, r8
    b748:	44 96       	adiw	r24, 0x14	; 20
    b74a:	0e 94 21 49 	call	0x9242	; 0x9242 <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    b74e:	21 96       	adiw	r28, 0x01	; 1
    b750:	cb 31       	cpi	r28, 0x1B	; 27
    b752:	d1 05       	cpc	r29, r1
    b754:	29 f7       	brne	.-54     	; 0xb720 <load_handle_select+0x94>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    b756:	4b e3       	ldi	r20, 0x3B	; 59
    b758:	54 e0       	ldi	r21, 0x04	; 4
    b75a:	65 e1       	ldi	r22, 0x15	; 21
    b75c:	70 e0       	ldi	r23, 0x00	; 0
    b75e:	85 e0       	ldi	r24, 0x05	; 5
    b760:	90 e0       	ldi	r25, 0x00	; 0
    b762:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(5, 22, (char*) strConfirmHandle);
    b766:	4e e6       	ldi	r20, 0x6E	; 110
    b768:	54 e0       	ldi	r21, 0x04	; 4
    b76a:	66 e1       	ldi	r22, 0x16	; 22
    b76c:	70 e0       	ldi	r23, 0x00	; 0
    b76e:	85 e0       	ldi	r24, 0x05	; 5
    b770:	90 e0       	ldi	r25, 0x00	; 0
    b772:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(5, 23, (char*) strCancelHandle);
    b776:	4a e4       	ldi	r20, 0x4A	; 74
    b778:	54 e0       	ldi	r21, 0x04	; 4
    b77a:	67 e1       	ldi	r22, 0x17	; 23
    b77c:	70 e0       	ldi	r23, 0x00	; 0
    b77e:	85 e0       	ldi	r24, 0x05	; 5
    b780:	90 e0       	ldi	r25, 0x00	; 0
    b782:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
	Print(5, 24, (char*) strChangeHandle);
    b786:	4d ee       	ldi	r20, 0xED	; 237
    b788:	53 e0       	ldi	r21, 0x03	; 3
    b78a:	68 e1       	ldi	r22, 0x18	; 24
    b78c:	70 e0       	ldi	r23, 0x00	; 0
    b78e:	85 e0       	ldi	r24, 0x05	; 5
    b790:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    b792:	df 91       	pop	r29
    b794:	cf 91       	pop	r28
    b796:	1f 91       	pop	r17
    b798:	0f 91       	pop	r16
    b79a:	ff 90       	pop	r15
    b79c:	ef 90       	pop	r14
    b79e:	df 90       	pop	r13
    b7a0:	cf 90       	pop	r12
    b7a2:	bf 90       	pop	r11
    b7a4:	af 90       	pop	r10
    b7a6:	9f 90       	pop	r9
    b7a8:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    b7aa:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>

0000b7ae <load_host_net_game>:
#if JAMMA
#else

void load_host_net_game()
{
	game.current_screen = HOST_NET_GAME;
    b7ae:	84 e0       	ldi	r24, 0x04	; 4
    b7b0:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    b7b4:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <clear_sprites>
	Print(2, 10, (char*) strLookingForWifi);
    b7b8:	4d ed       	ldi	r20, 0xDD	; 221
    b7ba:	54 e0       	ldi	r21, 0x04	; 4
    b7bc:	6a e0       	ldi	r22, 0x0A	; 10
    b7be:	70 e0       	ldi	r23, 0x00	; 0
    b7c0:	82 e0       	ldi	r24, 0x02	; 2
    b7c2:	90 e0       	ldi	r25, 0x00	; 0
    b7c4:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
#define NETBLOCKHIT 14
#define NETACK 15
#define NETNEXTLEVEL 16

u8 activateNet() {
	return initWifi();
    b7c8:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <initWifi>
	wifi_status = activateNet();
    b7cc:	80 93 a7 0b 	sts	0x0BA7, r24
	fade_through();
    b7d0:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
	if (wifi_status != WIFI_OK)
    b7d4:	80 91 a7 0b 	lds	r24, 0x0BA7
    b7d8:	88 23       	and	r24, r24
    b7da:	49 f0       	breq	.+18     	; 0xb7ee <load_host_net_game+0x40>
	{
		Print(7, 10, (char*) strNetworkError);
    b7dc:	40 e8       	ldi	r20, 0x80	; 128
    b7de:	54 e0       	ldi	r21, 0x04	; 4
    b7e0:	6a e0       	ldi	r22, 0x0A	; 10
    b7e2:	70 e0       	ldi	r23, 0x00	; 0
    b7e4:	87 e0       	ldi	r24, 0x07	; 7
    b7e6:	90 e0       	ldi	r25, 0x00	; 0
    b7e8:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    b7ec:	29 c0       	rjmp	.+82     	; 0xb840 <load_host_net_game+0x92>
	}
	else if (hostNetGame((char*)gameId) == WIFI_OK)
    b7ee:	82 e0       	ldi	r24, 0x02	; 2
    b7f0:	91 e0       	ldi	r25, 0x01	; 1
    b7f2:	0e 94 6d 4c 	call	0x98da	; 0x98da <hostNetGame>
    b7f6:	81 11       	cpse	r24, r1
    b7f8:	f1 cf       	rjmp	.-30     	; 0xb7dc <load_host_net_game+0x2e>
	{
		Print(5, 1, (char*) strShareGameId);
    b7fa:	4a ec       	ldi	r20, 0xCA	; 202
    b7fc:	54 e0       	ldi	r21, 0x04	; 4
    b7fe:	61 e0       	ldi	r22, 0x01	; 1
    b800:	70 e0       	ldi	r23, 0x00	; 0
    b802:	85 e0       	ldi	r24, 0x05	; 5
    b804:	90 e0       	ldi	r25, 0x00	; 0
    b806:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		LBPrintStr(10, 10, gameId, 8);
    b80a:	28 e0       	ldi	r18, 0x08	; 8
    b80c:	42 e0       	ldi	r20, 0x02	; 2
    b80e:	51 e0       	ldi	r21, 0x01	; 1
    b810:	6a e0       	ldi	r22, 0x0A	; 10
    b812:	8a e0       	ldi	r24, 0x0A	; 10
    b814:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
		Print(2, 18, (char*) strWaitingForNetOppenent);
    b818:	4f ea       	ldi	r20, 0xAF	; 175
    b81a:	54 e0       	ldi	r21, 0x04	; 4
    b81c:	62 e1       	ldi	r22, 0x12	; 18
    b81e:	70 e0       	ldi	r23, 0x00	; 0
    b820:	82 e0       	ldi	r24, 0x02	; 2
    b822:	90 e0       	ldi	r25, 0x00	; 0
    b824:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		DrawMap2(7, 10, map_green_tank);
    b828:	43 e9       	ldi	r20, 0x93	; 147
    b82a:	5a e6       	ldi	r21, 0x6A	; 106
    b82c:	6a e0       	ldi	r22, 0x0A	; 10
    b82e:	87 e0       	ldi	r24, 0x07	; 7
    b830:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
		DrawMap2(19, 10, map_blue_tank);
    b834:	4d e8       	ldi	r20, 0x8D	; 141
    b836:	5a e6       	ldi	r21, 0x6A	; 106
    b838:	6a e0       	ldi	r22, 0x0A	; 10
    b83a:	83 e1       	ldi	r24, 0x13	; 19
    b83c:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
	}
	else
	{
		Print(7, 10, (char*) strNetworkError);
	}
	Print(9, 23, (char*) strCancelHandle);
    b840:	4a e4       	ldi	r20, 0x4A	; 74
    b842:	54 e0       	ldi	r21, 0x04	; 4
    b844:	67 e1       	ldi	r22, 0x17	; 23
    b846:	70 e0       	ldi	r23, 0x00	; 0
    b848:	89 e0       	ldi	r24, 0x09	; 9
    b84a:	90 e0       	ldi	r25, 0x00	; 0
    b84c:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>

0000b850 <update_host_net_game>:
}

void update_host_net_game(JoyPadState* p1)
{
	if (p1->pressed & BTN_X)
    b850:	fc 01       	movw	r30, r24
    b852:	80 81       	ld	r24, Z
    b854:	91 81       	ldd	r25, Z+1	; 0x01
    b856:	91 ff       	sbrs	r25, 1
    b858:	0d c0       	rjmp	.+26     	; 0xb874 <update_host_net_game+0x24>
	{
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b85a:	24 e0       	ldi	r18, 0x04	; 4
    b85c:	40 91 8f 0f 	lds	r20, 0x0F8F
    b860:	60 91 19 0c 	lds	r22, 0x0C19
    b864:	80 91 89 0b 	lds	r24, 0x0B89
    b868:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		fade_through();
    b86c:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
		load_splash();
    b870:	0c 94 36 59 	jmp	0xb26c	; 0xb26c <load_splash>
	} 
	else if (player2.netMessage.code == NETJOINED)
    b874:	80 91 89 0f 	lds	r24, 0x0F89
    b878:	8a 30       	cpi	r24, 0x0A	; 10
    b87a:	a9 f4       	brne	.+42     	; 0xb8a6 <update_host_net_game+0x56>
	{
		game.demo_counter = 0;
    b87c:	10 92 80 0b 	sts	0x0B80, r1
    b880:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b884:	24 e0       	ldi	r18, 0x04	; 4
    b886:	40 91 8f 0f 	lds	r20, 0x0F8F
    b88a:	60 91 19 0c 	lds	r22, 0x0C19
    b88e:	80 91 89 0b 	lds	r24, 0x0B89
    b892:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		fade_through();
    b896:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
		load_eeprom(&handles);
    b89a:	86 e5       	ldi	r24, 0x56	; 86
    b89c:	9b e0       	ldi	r25, 0x0B	; 11
    b89e:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <load_eeprom>
		load_handle_select();
    b8a2:	0c 94 46 5b 	jmp	0xb68c	; 0xb68c <load_handle_select>
    b8a6:	08 95       	ret

0000b8a8 <load_join_net_game>:
	}
}

void load_join_net_game()
{
	game.current_screen = JOIN_NET_GAME;
    b8a8:	85 e0       	ldi	r24, 0x05	; 5
    b8aa:	80 93 76 0b 	sts	0x0B76, r24
	clear_sprites();
    b8ae:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <clear_sprites>
	Print(2, 10, (char*) strLookingForWifi);
    b8b2:	4d ed       	ldi	r20, 0xDD	; 221
    b8b4:	54 e0       	ldi	r21, 0x04	; 4
    b8b6:	6a e0       	ldi	r22, 0x0A	; 10
    b8b8:	70 e0       	ldi	r23, 0x00	; 0
    b8ba:	82 e0       	ldi	r24, 0x02	; 2
    b8bc:	90 e0       	ldi	r25, 0x00	; 0
    b8be:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    b8c2:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <initWifi>
	wifi_status = activateNet();
    b8c6:	80 93 a7 0b 	sts	0x0BA7, r24
	fade_through();
    b8ca:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
	if (wifi_status != WIFI_OK)
    b8ce:	80 91 a7 0b 	lds	r24, 0x0BA7
    b8d2:	88 23       	and	r24, r24
    b8d4:	49 f0       	breq	.+18     	; 0xb8e8 <load_join_net_game+0x40>
	{
		Print(7, 10, (char*) strNetworkError);
    b8d6:	40 e8       	ldi	r20, 0x80	; 128
    b8d8:	54 e0       	ldi	r21, 0x04	; 4
    b8da:	6a e0       	ldi	r22, 0x0A	; 10
    b8dc:	70 e0       	ldi	r23, 0x00	; 0
    b8de:	87 e0       	ldi	r24, 0x07	; 7
    b8e0:	90 e0       	ldi	r25, 0x00	; 0
    b8e2:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
    b8e6:	26 c0       	rjmp	.+76     	; 0xb934 <load_join_net_game+0x8c>
	}
	else
	{
		Print(5, 1, (char*) strEnterGameId);
    b8e8:	4e e8       	ldi	r20, 0x8E	; 142
    b8ea:	54 e0       	ldi	r21, 0x04	; 4
    b8ec:	61 e0       	ldi	r22, 0x01	; 1
    b8ee:	70 e0       	ldi	r23, 0x00	; 0
    b8f0:	85 e0       	ldi	r24, 0x05	; 5
    b8f2:	90 e0       	ldi	r25, 0x00	; 0
    b8f4:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		LBPrintStr(10, 10, gameId, 8);
    b8f8:	28 e0       	ldi	r18, 0x08	; 8
    b8fa:	42 e0       	ldi	r20, 0x02	; 2
    b8fc:	51 e0       	ldi	r21, 0x01	; 1
    b8fe:	6a e0       	ldi	r22, 0x0A	; 10
    b900:	8a e0       	ldi	r24, 0x0A	; 10
    b902:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
		DrawMap2(7, 10, map_green_tank);
    b906:	43 e9       	ldi	r20, 0x93	; 147
    b908:	5a e6       	ldi	r21, 0x6A	; 106
    b90a:	6a e0       	ldi	r22, 0x0A	; 10
    b90c:	87 e0       	ldi	r24, 0x07	; 7
    b90e:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
		DrawMap2(19, 10, map_blue_tank);
    b912:	4d e8       	ldi	r20, 0x8D	; 141
    b914:	5a e6       	ldi	r21, 0x6A	; 106
    b916:	6a e0       	ldi	r22, 0x0A	; 10
    b918:	83 e1       	ldi	r24, 0x13	; 19
    b91a:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
		Print(5, 22, (char*) strConfirmHandle);
    b91e:	4e e6       	ldi	r20, 0x6E	; 110
    b920:	54 e0       	ldi	r21, 0x04	; 4
    b922:	66 e1       	ldi	r22, 0x16	; 22
    b924:	70 e0       	ldi	r23, 0x00	; 0
    b926:	85 e0       	ldi	r24, 0x05	; 5
    b928:	90 e0       	ldi	r25, 0x00	; 0
    b92a:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		gameIdIndex = 2;
    b92e:	82 e0       	ldi	r24, 0x02	; 2
    b930:	80 93 01 01 	sts	0x0101, r24
	}
	Print(9, 23, (char*) strCancelHandle);
    b934:	4a e4       	ldi	r20, 0x4A	; 74
    b936:	54 e0       	ldi	r21, 0x04	; 4
    b938:	67 e1       	ldi	r22, 0x17	; 23
    b93a:	70 e0       	ldi	r23, 0x00	; 0
    b93c:	89 e0       	ldi	r24, 0x09	; 9
    b93e:	90 e0       	ldi	r25, 0x00	; 0
    b940:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>

0000b944 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    b944:	0f 93       	push	r16
    b946:	cf 93       	push	r28
    b948:	df 93       	push	r29
    b94a:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    b94c:	90 91 89 0b 	lds	r25, 0x0B89
    b950:	92 30       	cpi	r25, 0x02	; 2
    b952:	a9 f0       	breq	.+42     	; 0xb97e <update_splash+0x3a>
    b954:	44 f4       	brge	.+16     	; 0xb966 <update_splash+0x22>
    b956:	99 23       	and	r25, r25
    b958:	71 f0       	breq	.+28     	; 0xb976 <update_splash+0x32>
    b95a:	91 30       	cpi	r25, 0x01	; 1
    b95c:	d9 f4       	brne	.+54     	; 0xb994 <update_splash+0x50>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    b95e:	01 e0       	ldi	r16, 0x01	; 1
    b960:	21 e0       	ldi	r18, 0x01	; 1
    b962:	40 e7       	ldi	r20, 0x70	; 112
    b964:	13 c0       	rjmp	.+38     	; 0xb98c <update_splash+0x48>
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    b966:	93 30       	cpi	r25, 0x03	; 3
    b968:	71 f0       	breq	.+28     	; 0xb986 <update_splash+0x42>
    b96a:	94 30       	cpi	r25, 0x04	; 4
    b96c:	99 f4       	brne	.+38     	; 0xb994 <update_splash+0x50>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    b96e:	01 e0       	ldi	r16, 0x01	; 1
    b970:	21 e0       	ldi	r18, 0x01	; 1
    b972:	48 e8       	ldi	r20, 0x88	; 136
    b974:	0b c0       	rjmp	.+22     	; 0xb98c <update_splash+0x48>
	game.demo_counter++;
#else
	switch (game.selection)
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    b976:	01 e0       	ldi	r16, 0x01	; 1
    b978:	21 e0       	ldi	r18, 0x01	; 1
    b97a:	48 e6       	ldi	r20, 0x68	; 104
    b97c:	07 c0       	rjmp	.+14     	; 0xb98c <update_splash+0x48>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
			break;
		case HOSTNETGAME:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    b97e:	01 e0       	ldi	r16, 0x01	; 1
    b980:	21 e0       	ldi	r18, 0x01	; 1
    b982:	48 e7       	ldi	r20, 0x78	; 120
    b984:	03 c0       	rjmp	.+6      	; 0xb98c <update_splash+0x48>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
    b986:	01 e0       	ldi	r16, 0x01	; 1
    b988:	21 e0       	ldi	r18, 0x01	; 1
    b98a:	40 e8       	ldi	r20, 0x80	; 128
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    b98c:	60 e3       	ldi	r22, 0x30	; 48
    b98e:	80 e0       	ldi	r24, 0x00	; 0
    b990:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    b994:	4b e3       	ldi	r20, 0x3B	; 59
    b996:	54 e0       	ldi	r21, 0x04	; 4
    b998:	65 e1       	ldi	r22, 0x15	; 21
    b99a:	70 e0       	ldi	r23, 0x00	; 0
    b99c:	86 e0       	ldi	r24, 0x06	; 6
    b99e:	90 e0       	ldi	r25, 0x00	; 0
    b9a0:	0e 94 06 49 	call	0x920c	; 0x920c <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    b9a4:	28 81       	ld	r18, Y
    b9a6:	39 81       	ldd	r19, Y+1	; 0x01
    b9a8:	21 15       	cp	r18, r1
    b9aa:	31 05       	cpc	r19, r1
    b9ac:	21 f0       	breq	.+8      	; 0xb9b6 <update_splash+0x72>
    b9ae:	10 92 80 0b 	sts	0x0B80, r1
    b9b2:	10 92 7f 0b 	sts	0x0B7F, r1
	
	if (p1->pressed & BTN_UP)
    b9b6:	24 ff       	sbrs	r18, 4
    b9b8:	08 c0       	rjmp	.+16     	; 0xb9ca <update_splash+0x86>
	{
		game.selection--;
    b9ba:	80 91 89 0b 	lds	r24, 0x0B89
    b9be:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    b9c0:	87 ff       	sbrs	r24, 7
    b9c2:	0b c0       	rjmp	.+22     	; 0xb9da <update_splash+0x96>
    b9c4:	10 92 89 0b 	sts	0x0B89, r1
    b9c8:	0a c0       	rjmp	.+20     	; 0xb9de <update_splash+0x9a>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
	}
	else if (p1->pressed & BTN_DOWN)
    b9ca:	25 ff       	sbrs	r18, 5
    b9cc:	12 c0       	rjmp	.+36     	; 0xb9f2 <update_splash+0xae>
	{
		game.selection++;
    b9ce:	80 91 89 0b 	lds	r24, 0x0B89
    b9d2:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    b9d4:	85 30       	cpi	r24, 0x05	; 5
    b9d6:	0c f0       	brlt	.+2      	; 0xb9da <update_splash+0x96>
    b9d8:	84 e0       	ldi	r24, 0x04	; 4
    b9da:	80 93 89 0b 	sts	0x0B89, r24
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b9de:	24 e0       	ldi	r18, 0x04	; 4
    b9e0:	40 91 8f 0f 	lds	r20, 0x0F8F
    b9e4:	60 91 19 0c 	lds	r22, 0x0C19
    b9e8:	80 91 89 0b 	lds	r24, 0x0B89
    b9ec:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
    b9f0:	b4 c0       	rjmp	.+360    	; 0xbb5a <update_splash+0x216>
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    b9f2:	ce 01       	movw	r24, r28
    b9f4:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <select_pressed>
    b9f8:	88 23       	and	r24, r24
    b9fa:	09 f4       	brne	.+2      	; 0xb9fe <update_splash+0xba>
    b9fc:	5a c0       	rjmp	.+180    	; 0xbab2 <update_splash+0x16e>
    b9fe:	80 91 89 0b 	lds	r24, 0x0B89
    ba02:	82 30       	cpi	r24, 0x02	; 2
    ba04:	b0 f4       	brcc	.+44     	; 0xba32 <update_splash+0xee>
	{
		game.demo_counter = 0;
    ba06:	10 92 80 0b 	sts	0x0B80, r1
    ba0a:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    ba0e:	24 e0       	ldi	r18, 0x04	; 4
    ba10:	40 91 8f 0f 	lds	r20, 0x0F8F
    ba14:	60 91 19 0c 	lds	r22, 0x0C19
    ba18:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		fade_through();
    ba1c:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
		load_eeprom(&handles);
    ba20:	86 e5       	ldi	r24, 0x56	; 86
    ba22:	9b e0       	ldi	r25, 0x0B	; 11
    ba24:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    ba28:	df 91       	pop	r29
    ba2a:	cf 91       	pop	r28
    ba2c:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    ba2e:	0c 94 46 5b 	jmp	0xb68c	; 0xb68c <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
    ba32:	82 30       	cpi	r24, 0x02	; 2
    ba34:	91 f4       	brne	.+36     	; 0xba5a <update_splash+0x116>
	{
		game.demo_counter = 0;
    ba36:	10 92 80 0b 	sts	0x0B80, r1
    ba3a:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    ba3e:	24 e0       	ldi	r18, 0x04	; 4
    ba40:	40 91 8f 0f 	lds	r20, 0x0F8F
    ba44:	60 91 19 0c 	lds	r22, 0x0C19
    ba48:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		fade_through();
    ba4c:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    ba50:	df 91       	pop	r29
    ba52:	cf 91       	pop	r28
    ba54:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		fade_through();
		load_host_net_game();
    ba56:	0c 94 d7 5b 	jmp	0xb7ae	; 0xb7ae <load_host_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
    ba5a:	83 30       	cpi	r24, 0x03	; 3
    ba5c:	91 f4       	brne	.+36     	; 0xba82 <update_splash+0x13e>
	{
		game.demo_counter = 0;
    ba5e:	10 92 80 0b 	sts	0x0B80, r1
    ba62:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    ba66:	24 e0       	ldi	r18, 0x04	; 4
    ba68:	40 91 8f 0f 	lds	r20, 0x0F8F
    ba6c:	60 91 19 0c 	lds	r22, 0x0C19
    ba70:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		fade_through();
    ba74:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    ba78:	df 91       	pop	r29
    ba7a:	cf 91       	pop	r28
    ba7c:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		fade_through();
		load_join_net_game();
    ba7e:	0c 94 54 5c 	jmp	0xb8a8	; 0xb8a8 <load_join_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    ba82:	84 30       	cpi	r24, 0x04	; 4
    ba84:	b1 f4       	brne	.+44     	; 0xbab2 <update_splash+0x16e>
	{
		game.demo_counter = 0;
    ba86:	10 92 80 0b 	sts	0x0B80, r1
    ba8a:	10 92 7f 0b 	sts	0x0B7F, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    ba8e:	24 e0       	ldi	r18, 0x04	; 4
    ba90:	40 91 8f 0f 	lds	r20, 0x0F8F
    ba94:	60 91 19 0c 	lds	r22, 0x0C19
    ba98:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		fade_through();
    ba9c:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
		load_eeprom(&scores);
    baa0:	86 e3       	ldi	r24, 0x36	; 54
    baa2:	9b e0       	ldi	r25, 0x0B	; 11
    baa4:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    baa8:	df 91       	pop	r29
    baaa:	cf 91       	pop	r28
    baac:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    baae:	0c 94 84 59 	jmp	0xb308	; 0xb308 <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    bab2:	80 91 7f 0b 	lds	r24, 0x0B7F
    bab6:	90 91 80 0b 	lds	r25, 0x0B80
    baba:	88 35       	cpi	r24, 0x58	; 88
    babc:	92 40       	sbci	r25, 0x02	; 2
    babe:	08 f4       	brcc	.+2      	; 0xbac2 <update_splash+0x17e>
    bac0:	4c c0       	rjmp	.+152    	; 0xbb5a <update_splash+0x216>
	{
		game.demo_counter = 0;
    bac2:	10 92 80 0b 	sts	0x0B80, r1
    bac6:	10 92 7f 0b 	sts	0x0B7F, r1
		if (game.demo_choice % 2 == 0)
    baca:	80 91 7e 0b 	lds	r24, 0x0B7E
    bace:	80 fd       	sbrc	r24, 0
    bad0:	2d c0       	rjmp	.+90     	; 0xbb2c <update_splash+0x1e8>
		{
			game.selection = CPUVCPU;
    bad2:	86 e0       	ldi	r24, 0x06	; 6
    bad4:	80 93 89 0b 	sts	0x0B89, r24
			player1.handle_id = 9;
    bad8:	29 e0       	ldi	r18, 0x09	; 9
    bada:	20 93 a8 0b 	sts	0x0BA8, r18
			memcpy(player1.handle, &handles.data[9*3], 3);
    bade:	80 91 73 0b 	lds	r24, 0x0B73
    bae2:	90 91 74 0b 	lds	r25, 0x0B74
    bae6:	a0 91 75 0b 	lds	r26, 0x0B75
    baea:	80 93 a9 0b 	sts	0x0BA9, r24
    baee:	90 93 aa 0b 	sts	0x0BAA, r25
    baf2:	a0 93 ab 0b 	sts	0x0BAB, r26
			player2.handle_id = 9;
    baf6:	20 93 1e 0f 	sts	0x0F1E, r18
			memcpy(player2.handle, &handles.data[9*3], 3);
    bafa:	80 93 1f 0f 	sts	0x0F1F, r24
    bafe:	90 93 20 0f 	sts	0x0F20, r25
    bb02:	a0 93 21 0f 	sts	0x0F21, r26
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bb06:	24 e0       	ldi	r18, 0x04	; 4
    bb08:	40 91 8f 0f 	lds	r20, 0x0F8F
    bb0c:	60 91 19 0c 	lds	r22, 0x0C19
    bb10:	86 e0       	ldi	r24, 0x06	; 6
    bb12:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
			clear_sprites();
    bb16:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <clear_sprites>
			fade_through();
    bb1a:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
			level_transition(LBRandom(0, 10));
    bb1e:	6a e0       	ldi	r22, 0x0A	; 10
    bb20:	80 e0       	ldi	r24, 0x00	; 0
    bb22:	0e 94 16 4c 	call	0x982c	; 0x982c <LBRandom>
    bb26:	0e 94 43 58 	call	0xb086	; 0xb086 <level_transition>
    bb2a:	11 c0       	rjmp	.+34     	; 0xbb4e <update_splash+0x20a>
		}
		else
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bb2c:	24 e0       	ldi	r18, 0x04	; 4
    bb2e:	40 91 8f 0f 	lds	r20, 0x0F8F
    bb32:	60 91 19 0c 	lds	r22, 0x0C19
    bb36:	80 91 89 0b 	lds	r24, 0x0B89
    bb3a:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
			fade_through();
    bb3e:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
			load_eeprom(&scores);
    bb42:	86 e3       	ldi	r24, 0x36	; 54
    bb44:	9b e0       	ldi	r25, 0x0B	; 11
    bb46:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <load_eeprom>
			load_tank_rank();
    bb4a:	0e 94 84 59 	call	0xb308	; 0xb308 <load_tank_rank>
		}
		game.demo_choice++;
    bb4e:	80 91 7e 0b 	lds	r24, 0x0B7E
    bb52:	8f 5f       	subi	r24, 0xFF	; 255
    bb54:	80 93 7e 0b 	sts	0x0B7E, r24
		return;
    bb58:	09 c0       	rjmp	.+18     	; 0xbb6c <update_splash+0x228>
		
	}
	game.demo_counter++;
    bb5a:	80 91 7f 0b 	lds	r24, 0x0B7F
    bb5e:	90 91 80 0b 	lds	r25, 0x0B80
    bb62:	01 96       	adiw	r24, 0x01	; 1
    bb64:	90 93 80 0b 	sts	0x0B80, r25
    bb68:	80 93 7f 0b 	sts	0x0B7F, r24
#endif
}
    bb6c:	df 91       	pop	r29
    bb6e:	cf 91       	pop	r28
    bb70:	0f 91       	pop	r16
    bb72:	08 95       	ret

0000bb74 <update_join_net_game>:
	}
	Print(9, 23, (char*) strCancelHandle);
}

void update_join_net_game(JoyPadState* p1)
{
    bb74:	ef 92       	push	r14
    bb76:	ff 92       	push	r15
    bb78:	0f 93       	push	r16
    bb7a:	cf 93       	push	r28
    bb7c:	df 93       	push	r29
    bb7e:	7c 01       	movw	r14, r24
	if (wifi_status != WIFI_OK)
    bb80:	80 91 a7 0b 	lds	r24, 0x0BA7
    bb84:	88 23       	and	r24, r24
    bb86:	31 f0       	breq	.+12     	; 0xbb94 <update_join_net_game+0x20>
	{
		if (p1->pressed & BTN_X)
    bb88:	f7 01       	movw	r30, r14
    bb8a:	80 81       	ld	r24, Z
    bb8c:	91 81       	ldd	r25, Z+1	; 0x01
    bb8e:	91 ff       	sbrs	r25, 1
    bb90:	cf c0       	rjmp	.+414    	; 0xbd30 <update_join_net_game+0x1bc>
    bb92:	2f c0       	rjmp	.+94     	; 0xbbf2 <update_join_net_game+0x7e>
			load_splash();
		}
	}
	else
	{
		MapSprite2(0, map_down_arrow, 0);
    bb94:	40 e0       	ldi	r20, 0x00	; 0
    bb96:	60 e1       	ldi	r22, 0x10	; 16
    bb98:	71 e3       	ldi	r23, 0x31	; 49
    bb9a:	80 e0       	ldi	r24, 0x00	; 0
    bb9c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MapSprite2(1, map_up_arrow, 0);
    bba0:	40 e0       	ldi	r20, 0x00	; 0
    bba2:	6d e0       	ldi	r22, 0x0D	; 13
    bba4:	71 e3       	ldi	r23, 0x31	; 49
    bba6:	81 e0       	ldi	r24, 0x01	; 1
    bba8:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		MoveSprite(0, 8*10 + gameIdIndex*8, 9*8, 1, 1);
    bbac:	60 91 01 01 	lds	r22, 0x0101
    bbb0:	66 0f       	add	r22, r22
    bbb2:	66 0f       	add	r22, r22
    bbb4:	66 0f       	add	r22, r22
    bbb6:	60 5b       	subi	r22, 0xB0	; 176
    bbb8:	01 e0       	ldi	r16, 0x01	; 1
    bbba:	21 e0       	ldi	r18, 0x01	; 1
    bbbc:	48 e4       	ldi	r20, 0x48	; 72
    bbbe:	80 e0       	ldi	r24, 0x00	; 0
    bbc0:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
		MoveSprite(1, 8*10 + gameIdIndex*8, 11*8, 1, 1);
    bbc4:	60 91 01 01 	lds	r22, 0x0101
    bbc8:	66 0f       	add	r22, r22
    bbca:	66 0f       	add	r22, r22
    bbcc:	66 0f       	add	r22, r22
    bbce:	60 5b       	subi	r22, 0xB0	; 176
    bbd0:	21 e0       	ldi	r18, 0x01	; 1
    bbd2:	48 e5       	ldi	r20, 0x58	; 88
    bbd4:	81 e0       	ldi	r24, 0x01	; 1
    bbd6:	0e 94 52 48 	call	0x90a4	; 0x90a4 <MoveSprite>
		LBPrintStr(10, 10, (u8*) gameId, 8);
    bbda:	28 e0       	ldi	r18, 0x08	; 8
    bbdc:	42 e0       	ldi	r20, 0x02	; 2
    bbde:	51 e0       	ldi	r21, 0x01	; 1
    bbe0:	6a e0       	ldi	r22, 0x0A	; 10
    bbe2:	8a e0       	ldi	r24, 0x0A	; 10
    bbe4:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
		if (p1->pressed & BTN_X)
    bbe8:	f7 01       	movw	r30, r14
    bbea:	c0 81       	ld	r28, Z
    bbec:	d1 81       	ldd	r29, Z+1	; 0x01
    bbee:	d1 ff       	sbrs	r29, 1
    bbf0:	12 c0       	rjmp	.+36     	; 0xbc16 <update_join_net_game+0xa2>
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bbf2:	24 e0       	ldi	r18, 0x04	; 4
    bbf4:	40 91 8f 0f 	lds	r20, 0x0F8F
    bbf8:	60 91 19 0c 	lds	r22, 0x0C19
    bbfc:	80 91 89 0b 	lds	r24, 0x0B89
    bc00:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
			fade_through();
    bc04:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
			gameIdIndex--;
			if (gameIdIndex < 2) gameIdIndex= 2;
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
	}
}
    bc08:	df 91       	pop	r29
    bc0a:	cf 91       	pop	r28
    bc0c:	0f 91       	pop	r16
    bc0e:	ff 90       	pop	r15
    bc10:	ef 90       	pop	r14
		LBPrintStr(10, 10, (u8*) gameId, 8);
		if (p1->pressed & BTN_X)
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
			fade_through();
			load_splash();
    bc12:	0c 94 36 59 	jmp	0xb26c	; 0xb26c <load_splash>
		}
		else if (select_pressed(p1))
    bc16:	c7 01       	movw	r24, r14
    bc18:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <select_pressed>
    bc1c:	88 23       	and	r24, r24
    bc1e:	e1 f1       	breq	.+120    	; 0xbc98 <update_join_net_game+0x124>
		{
			Print(7, 18, (char*) strConnecting);
    bc20:	41 ea       	ldi	r20, 0xA1	; 161
    bc22:	54 e0       	ldi	r21, 0x04	; 4
    bc24:	62 e1       	ldi	r22, 0x12	; 18
    bc26:	70 e0       	ldi	r23, 0x00	; 0
    bc28:	87 e0       	ldi	r24, 0x07	; 7
    bc2a:	90 e0       	ldi	r25, 0x00	; 0
    bc2c:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
			if (joinNetGame((char*)gameId) == WIFI_OK)
    bc30:	82 e0       	ldi	r24, 0x02	; 2
    bc32:	91 e0       	ldi	r25, 0x01	; 1
    bc34:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <joinNetGame>
    bc38:	81 11       	cpse	r24, r1
    bc3a:	21 c0       	rjmp	.+66     	; 0xbc7e <update_join_net_game+0x10a>
			{
				player2.netMessage.code = NETJOINED;
    bc3c:	8a e0       	ldi	r24, 0x0A	; 10
    bc3e:	80 93 89 0f 	sts	0x0F89, r24
				sendNetMessage(&player2.netMessage);
    bc42:	89 e8       	ldi	r24, 0x89	; 137
    bc44:	9f e0       	ldi	r25, 0x0F	; 15
    bc46:	0e 94 67 4c 	call	0x98ce	; 0x98ce <sendNetMessage>
				game.demo_counter = 0;
    bc4a:	10 92 80 0b 	sts	0x0B80, r1
    bc4e:	10 92 7f 0b 	sts	0x0B7F, r1
				LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bc52:	24 e0       	ldi	r18, 0x04	; 4
    bc54:	40 91 8f 0f 	lds	r20, 0x0F8F
    bc58:	60 91 19 0c 	lds	r22, 0x0C19
    bc5c:	80 91 89 0b 	lds	r24, 0x0B89
    bc60:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
				fade_through();
    bc64:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
				load_eeprom(&handles);
    bc68:	86 e5       	ldi	r24, 0x56	; 86
    bc6a:	9b e0       	ldi	r25, 0x0B	; 11
    bc6c:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <load_eeprom>
			gameIdIndex--;
			if (gameIdIndex < 2) gameIdIndex= 2;
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
	}
}
    bc70:	df 91       	pop	r29
    bc72:	cf 91       	pop	r28
    bc74:	0f 91       	pop	r16
    bc76:	ff 90       	pop	r15
    bc78:	ef 90       	pop	r14
				sendNetMessage(&player2.netMessage);
				game.demo_counter = 0;
				LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
				fade_through();
				load_eeprom(&handles);
				load_handle_select();
    bc7a:	0c 94 46 5b 	jmp	0xb68c	; 0xb68c <load_handle_select>
			}
			else
			{
				Print(7, 18, (char*) strNetworkError);
    bc7e:	40 e8       	ldi	r20, 0x80	; 128
    bc80:	54 e0       	ldi	r21, 0x04	; 4
    bc82:	62 e1       	ldi	r22, 0x12	; 18
    bc84:	70 e0       	ldi	r23, 0x00	; 0
    bc86:	87 e0       	ldi	r24, 0x07	; 7
    bc88:	90 e0       	ldi	r25, 0x00	; 0
			gameIdIndex--;
			if (gameIdIndex < 2) gameIdIndex= 2;
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
	}
}
    bc8a:	df 91       	pop	r29
    bc8c:	cf 91       	pop	r28
    bc8e:	0f 91       	pop	r16
    bc90:	ff 90       	pop	r15
    bc92:	ef 90       	pop	r14
				load_eeprom(&handles);
				load_handle_select();
			}
			else
			{
				Print(7, 18, (char*) strNetworkError);
    bc94:	0c 94 06 49 	jmp	0x920c	; 0x920c <Print>
			}
		}
		else if ((p1->pressed & BTN_UP))
    bc98:	c4 ff       	sbrs	r28, 4
    bc9a:	13 c0       	rjmp	.+38     	; 0xbcc2 <update_join_net_game+0x14e>
		{
			gameId[gameIdIndex]--;
    bc9c:	e0 91 01 01 	lds	r30, 0x0101
    bca0:	f0 e0       	ldi	r31, 0x00	; 0
    bca2:	ee 5f       	subi	r30, 0xFE	; 254
    bca4:	fe 4f       	sbci	r31, 0xFE	; 254
    bca6:	80 81       	ld	r24, Z
			if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    bca8:	95 ec       	ldi	r25, 0xC5	; 197
    bcaa:	98 0f       	add	r25, r24
    bcac:	97 30       	cpi	r25, 0x07	; 7
    bcae:	10 f0       	brcs	.+4      	; 0xbcb4 <update_join_net_game+0x140>
				Print(7, 18, (char*) strNetworkError);
			}
		}
		else if ((p1->pressed & BTN_UP))
		{
			gameId[gameIdIndex]--;
    bcb0:	81 50       	subi	r24, 0x01	; 1
    bcb2:	01 c0       	rjmp	.+2      	; 0xbcb6 <update_join_net_game+0x142>
			if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    bcb4:	89 e3       	ldi	r24, 0x39	; 57
    bcb6:	80 83       	st	Z, r24
			if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
    bcb8:	80 81       	ld	r24, Z
    bcba:	80 33       	cpi	r24, 0x30	; 48
    bcbc:	58 f5       	brcc	.+86     	; 0xbd14 <update_join_net_game+0x1a0>
    bcbe:	8a e5       	ldi	r24, 0x5A	; 90
    bcc0:	14 c0       	rjmp	.+40     	; 0xbcea <update_join_net_game+0x176>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
		else if ((p1->pressed & BTN_DOWN))
    bcc2:	c5 ff       	sbrs	r28, 5
    bcc4:	14 c0       	rjmp	.+40     	; 0xbcee <update_join_net_game+0x17a>
		{
			gameId[gameIdIndex]++;
    bcc6:	e0 91 01 01 	lds	r30, 0x0101
    bcca:	f0 e0       	ldi	r31, 0x00	; 0
    bccc:	ee 5f       	subi	r30, 0xFE	; 254
    bcce:	fe 4f       	sbci	r31, 0xFE	; 254
    bcd0:	80 81       	ld	r24, Z
			if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    bcd2:	97 ec       	ldi	r25, 0xC7	; 199
    bcd4:	98 0f       	add	r25, r24
    bcd6:	97 30       	cpi	r25, 0x07	; 7
    bcd8:	10 f0       	brcs	.+4      	; 0xbcde <update_join_net_game+0x16a>
			if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
		else if ((p1->pressed & BTN_DOWN))
		{
			gameId[gameIdIndex]++;
    bcda:	8f 5f       	subi	r24, 0xFF	; 255
    bcdc:	01 c0       	rjmp	.+2      	; 0xbce0 <update_join_net_game+0x16c>
			if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    bcde:	81 e4       	ldi	r24, 0x41	; 65
    bce0:	80 83       	st	Z, r24
			if (gameId[gameIdIndex] > 'Z') gameId[gameIdIndex] = '0';
    bce2:	80 81       	ld	r24, Z
    bce4:	8b 35       	cpi	r24, 0x5B	; 91
    bce6:	b0 f0       	brcs	.+44     	; 0xbd14 <update_join_net_game+0x1a0>
    bce8:	80 e3       	ldi	r24, 0x30	; 48
    bcea:	80 83       	st	Z, r24
    bcec:	13 c0       	rjmp	.+38     	; 0xbd14 <update_join_net_game+0x1a0>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
		else if ((p1->pressed & BTN_RIGHT))
    bcee:	c7 ff       	sbrs	r28, 7
    bcf0:	07 c0       	rjmp	.+14     	; 0xbd00 <update_join_net_game+0x18c>
		{
			gameIdIndex++;
    bcf2:	80 91 01 01 	lds	r24, 0x0101
    bcf6:	8f 5f       	subi	r24, 0xFF	; 255
			if (gameIdIndex > 7) gameIdIndex = 7;
    bcf8:	88 30       	cpi	r24, 0x08	; 8
    bcfa:	50 f0       	brcs	.+20     	; 0xbd10 <update_join_net_game+0x19c>
    bcfc:	87 e0       	ldi	r24, 0x07	; 7
    bcfe:	08 c0       	rjmp	.+16     	; 0xbd10 <update_join_net_game+0x19c>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
		else if ((p1->pressed & BTN_LEFT))
    bd00:	c6 ff       	sbrs	r28, 6
    bd02:	16 c0       	rjmp	.+44     	; 0xbd30 <update_join_net_game+0x1bc>
		{
			gameIdIndex--;
    bd04:	80 91 01 01 	lds	r24, 0x0101
    bd08:	81 50       	subi	r24, 0x01	; 1
			if (gameIdIndex < 2) gameIdIndex= 2;
    bd0a:	82 30       	cpi	r24, 0x02	; 2
    bd0c:	08 f4       	brcc	.+2      	; 0xbd10 <update_join_net_game+0x19c>
    bd0e:	82 e0       	ldi	r24, 0x02	; 2
    bd10:	80 93 01 01 	sts	0x0101, r24
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bd14:	24 e0       	ldi	r18, 0x04	; 4
    bd16:	40 91 8f 0f 	lds	r20, 0x0F8F
    bd1a:	60 91 19 0c 	lds	r22, 0x0C19
    bd1e:	80 91 89 0b 	lds	r24, 0x0B89
		}
	}
}
    bd22:	df 91       	pop	r29
    bd24:	cf 91       	pop	r28
    bd26:	0f 91       	pop	r16
    bd28:	ff 90       	pop	r15
    bd2a:	ef 90       	pop	r14
		}
		else if ((p1->pressed & BTN_LEFT))
		{
			gameIdIndex--;
			if (gameIdIndex < 2) gameIdIndex= 2;
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bd2c:	0c 94 5a 4c 	jmp	0x98b4	; 0x98b4 <LBPlaySound>
		}
	}
}
    bd30:	df 91       	pop	r29
    bd32:	cf 91       	pop	r28
    bd34:	0f 91       	pop	r16
    bd36:	ff 90       	pop	r15
    bd38:	ef 90       	pop	r14
    bd3a:	08 95       	ret

0000bd3c <button_map>:
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    bd3c:	00 97       	sbiw	r24, 0x00	; 0
    bd3e:	41 f0       	breq	.+16     	; 0xbd50 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    bd40:	81 30       	cpi	r24, 0x01	; 1
    bd42:	91 05       	cpc	r25, r1
    bd44:	41 f0       	breq	.+16     	; 0xbd56 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    bd46:	82 30       	cpi	r24, 0x02	; 2
    bd48:	91 05       	cpc	r25, r1
    bd4a:	41 f0       	breq	.+16     	; 0xbd5c <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    bd4c:	03 97       	sbiw	r24, 0x03	; 3
    bd4e:	49 f0       	breq	.+18     	; 0xbd62 <button_map+0x26>
}
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    bd50:	80 e1       	ldi	r24, 0x10	; 16
    bd52:	90 e0       	ldi	r25, 0x00	; 0
    bd54:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    bd56:	80 e2       	ldi	r24, 0x20	; 32
    bd58:	90 e0       	ldi	r25, 0x00	; 0
    bd5a:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    bd5c:	80 e4       	ldi	r24, 0x40	; 64
    bd5e:	90 e0       	ldi	r25, 0x00	; 0
    bd60:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    bd62:	80 e8       	ldi	r24, 0x80	; 128
    bd64:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    bd66:	08 95       	ret

0000bd68 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    bd68:	8f 92       	push	r8
    bd6a:	9f 92       	push	r9
    bd6c:	af 92       	push	r10
    bd6e:	bf 92       	push	r11
    bd70:	cf 92       	push	r12
    bd72:	df 92       	push	r13
    bd74:	ef 92       	push	r14
    bd76:	ff 92       	push	r15
    bd78:	0f 93       	push	r16
    bd7a:	1f 93       	push	r17
    bd7c:	cf 93       	push	r28
    bd7e:	df 93       	push	r29
    bd80:	f8 2e       	mov	r15, r24
    bd82:	e6 2e       	mov	r14, r22
    bd84:	d4 2e       	mov	r13, r20
    bd86:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    bd88:	8f 85       	ldd	r24, Y+15	; 0x0f
    bd8a:	88 23       	and	r24, r24
    bd8c:	09 f4       	brne	.+2      	; 0xbd90 <crash_and_turn+0x28>
    bd8e:	aa c0       	rjmp	.+340    	; 0xbee4 <crash_and_turn+0x17c>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    bd90:	f8 01       	movw	r30, r16
    bd92:	c4 80       	ldd	r12, Z+4	; 0x04
    bd94:	c4 fe       	sbrs	r12, 4
    bd96:	23 c0       	rjmp	.+70     	; 0xbdde <crash_and_turn+0x76>
    bd98:	fe e1       	ldi	r31, 0x1E	; 30
    bd9a:	6f 02       	muls	r22, r31
    bd9c:	40 01       	movw	r8, r0
    bd9e:	11 24       	eor	r1, r1
    bda0:	af 2c       	mov	r10, r15
    bda2:	bb 24       	eor	r11, r11
    bda4:	a7 fc       	sbrc	r10, 7
    bda6:	b0 94       	com	r11
    bda8:	c4 01       	movw	r24, r8
    bdaa:	8a 0d       	add	r24, r10
    bdac:	9b 1d       	adc	r25, r11
    bdae:	01 97       	sbiw	r24, 0x01	; 1
    bdb0:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bdb4:	81 11       	cpse	r24, r1
    bdb6:	13 c0       	rjmp	.+38     	; 0xbdde <crash_and_turn+0x76>
    bdb8:	c4 01       	movw	r24, r8
    bdba:	8a 0d       	add	r24, r10
    bdbc:	9b 1d       	adc	r25, r11
    bdbe:	4d 96       	adiw	r24, 0x1d	; 29
    bdc0:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bdc4:	81 11       	cpse	r24, r1
    bdc6:	0b c0       	rjmp	.+22     	; 0xbdde <crash_and_turn+0x76>
    bdc8:	c4 01       	movw	r24, r8
    bdca:	8a 0d       	add	r24, r10
    bdcc:	9b 1d       	adc	r25, r11
    bdce:	cb 96       	adiw	r24, 0x3b	; 59
    bdd0:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bdd4:	81 11       	cpse	r24, r1
    bdd6:	03 c0       	rjmp	.+6      	; 0xbdde <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    bdd8:	80 e4       	ldi	r24, 0x40	; 64
    bdda:	90 e0       	ldi	r25, 0x00	; 0
    bddc:	6f c0       	rjmp	.+222    	; 0xbebc <crash_and_turn+0x154>
			recoil_sprite(&player->netMessage.shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    bdde:	c6 fe       	sbrs	r12, 6
    bde0:	23 c0       	rjmp	.+70     	; 0xbe28 <crash_and_turn+0xc0>
    bde2:	8e 2d       	mov	r24, r14
    bde4:	99 27       	eor	r25, r25
    bde6:	87 fd       	sbrc	r24, 7
    bde8:	90 95       	com	r25
    bdea:	02 96       	adiw	r24, 0x02	; 2
    bdec:	2e e1       	ldi	r18, 0x1E	; 30
    bdee:	28 9f       	mul	r18, r24
    bdf0:	50 01       	movw	r10, r0
    bdf2:	29 9f       	mul	r18, r25
    bdf4:	b0 0c       	add	r11, r0
    bdf6:	11 24       	eor	r1, r1
    bdf8:	af 0c       	add	r10, r15
    bdfa:	b1 1c       	adc	r11, r1
    bdfc:	f7 fc       	sbrc	r15, 7
    bdfe:	ba 94       	dec	r11
    be00:	c5 01       	movw	r24, r10
    be02:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    be06:	81 11       	cpse	r24, r1
    be08:	0f c0       	rjmp	.+30     	; 0xbe28 <crash_and_turn+0xc0>
    be0a:	c5 01       	movw	r24, r10
    be0c:	01 96       	adiw	r24, 0x01	; 1
    be0e:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    be12:	81 11       	cpse	r24, r1
    be14:	09 c0       	rjmp	.+18     	; 0xbe28 <crash_and_turn+0xc0>
    be16:	c5 01       	movw	r24, r10
    be18:	02 96       	adiw	r24, 0x02	; 2
    be1a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    be1e:	81 11       	cpse	r24, r1
    be20:	03 c0       	rjmp	.+6      	; 0xbe28 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    be22:	80 e2       	ldi	r24, 0x20	; 32
    be24:	90 e0       	ldi	r25, 0x00	; 0
    be26:	4a c0       	rjmp	.+148    	; 0xbebc <crash_and_turn+0x154>
			recoil_sprite(&player->netMessage.shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    be28:	c5 fe       	sbrs	r12, 5
    be2a:	24 c0       	rjmp	.+72     	; 0xbe74 <crash_and_turn+0x10c>
    be2c:	fe 2d       	mov	r31, r14
    be2e:	8e e1       	ldi	r24, 0x1E	; 30
    be30:	f8 02       	muls	r31, r24
    be32:	40 01       	movw	r8, r0
    be34:	11 24       	eor	r1, r1
    be36:	af 2c       	mov	r10, r15
    be38:	bb 24       	eor	r11, r11
    be3a:	a7 fc       	sbrc	r10, 7
    be3c:	b0 94       	com	r11
    be3e:	c4 01       	movw	r24, r8
    be40:	8a 0d       	add	r24, r10
    be42:	9b 1d       	adc	r25, r11
    be44:	02 96       	adiw	r24, 0x02	; 2
    be46:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    be4a:	81 11       	cpse	r24, r1
    be4c:	13 c0       	rjmp	.+38     	; 0xbe74 <crash_and_turn+0x10c>
    be4e:	c4 01       	movw	r24, r8
    be50:	8a 0d       	add	r24, r10
    be52:	9b 1d       	adc	r25, r11
    be54:	80 96       	adiw	r24, 0x20	; 32
    be56:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    be5a:	81 11       	cpse	r24, r1
    be5c:	0b c0       	rjmp	.+22     	; 0xbe74 <crash_and_turn+0x10c>
    be5e:	c4 01       	movw	r24, r8
    be60:	8a 0d       	add	r24, r10
    be62:	9b 1d       	adc	r25, r11
    be64:	ce 96       	adiw	r24, 0x3e	; 62
    be66:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    be6a:	81 11       	cpse	r24, r1
    be6c:	03 c0       	rjmp	.+6      	; 0xbe74 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    be6e:	80 e8       	ldi	r24, 0x80	; 128
    be70:	90 e0       	ldi	r25, 0x00	; 0
    be72:	24 c0       	rjmp	.+72     	; 0xbebc <crash_and_turn+0x154>
			recoil_sprite(&player->netMessage.shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    be74:	c7 fe       	sbrs	r12, 7
    be76:	2b c0       	rjmp	.+86     	; 0xbece <crash_and_turn+0x166>
    be78:	8e 2d       	mov	r24, r14
    be7a:	99 27       	eor	r25, r25
    be7c:	87 fd       	sbrc	r24, 7
    be7e:	90 95       	com	r25
    be80:	01 97       	sbiw	r24, 0x01	; 1
    be82:	2e e1       	ldi	r18, 0x1E	; 30
    be84:	28 9f       	mul	r18, r24
    be86:	50 01       	movw	r10, r0
    be88:	29 9f       	mul	r18, r25
    be8a:	b0 0c       	add	r11, r0
    be8c:	11 24       	eor	r1, r1
    be8e:	af 0c       	add	r10, r15
    be90:	b1 1c       	adc	r11, r1
    be92:	f7 fc       	sbrc	r15, 7
    be94:	ba 94       	dec	r11
    be96:	c5 01       	movw	r24, r10
    be98:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    be9c:	81 11       	cpse	r24, r1
    be9e:	17 c0       	rjmp	.+46     	; 0xbece <crash_and_turn+0x166>
    bea0:	c5 01       	movw	r24, r10
    bea2:	01 96       	adiw	r24, 0x01	; 1
    bea4:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    bea8:	81 11       	cpse	r24, r1
    beaa:	11 c0       	rjmp	.+34     	; 0xbece <crash_and_turn+0x166>
    beac:	c5 01       	movw	r24, r10
    beae:	02 96       	adiw	r24, 0x02	; 2
    beb0:	0e 94 b6 52 	call	0xa56c	; 0xa56c <solid_tile>
    beb4:	81 11       	cpse	r24, r1
    beb6:	0b c0       	rjmp	.+22     	; 0xbece <crash_and_turn+0x166>
		{
			p->held = BTN_UP;
    beb8:	80 e1       	ldi	r24, 0x10	; 16
    beba:	90 e0       	ldi	r25, 0x00	; 0
    bebc:	f8 01       	movw	r30, r16
    bebe:	95 83       	std	Z+5, r25	; 0x05
    bec0:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->netMessage.shared);
    bec2:	ce 01       	movw	r24, r28
    bec4:	8e 58       	subi	r24, 0x8E	; 142
    bec6:	9f 4f       	sbci	r25, 0xFF	; 255
    bec8:	0e 94 14 52 	call	0xa428	; 0xa428 <recoil_sprite>
			recoiled = 0;
    becc:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    bece:	f8 01       	movw	r30, r16
    bed0:	24 81       	ldd	r18, Z+4	; 0x04
    bed2:	35 81       	ldd	r19, Z+5	; 0x05
    bed4:	8b 89       	ldd	r24, Y+19	; 0x13
    bed6:	9c 89       	ldd	r25, Y+20	; 0x14
    bed8:	82 23       	and	r24, r18
    beda:	93 23       	and	r25, r19
    bedc:	89 2b       	or	r24, r25
    bede:	11 f0       	breq	.+4      	; 0xbee4 <crash_and_turn+0x17c>
		{
			player->feeling_my_way = 0;
    bee0:	1f 86       	std	Y+15, r1	; 0x0f
    bee2:	1c c0       	rjmp	.+56     	; 0xbf1c <crash_and_turn+0x1b4>
			recoiled = 0;
		}
	}
	if (recoiled)
    bee4:	dd 20       	and	r13, r13
    bee6:	d1 f0       	breq	.+52     	; 0xbf1c <crash_and_turn+0x1b4>
	{
		if (p->held & BTN_LEFT)
    bee8:	f8 01       	movw	r30, r16
    beea:	84 81       	ldd	r24, Z+4	; 0x04
    beec:	86 ff       	sbrs	r24, 6
    beee:	03 c0       	rjmp	.+6      	; 0xbef6 <crash_and_turn+0x18e>
		{
			p->held = BTN_UP;
    bef0:	80 e1       	ldi	r24, 0x10	; 16
    bef2:	90 e0       	ldi	r25, 0x00	; 0
    bef4:	0f c0       	rjmp	.+30     	; 0xbf14 <crash_and_turn+0x1ac>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    bef6:	84 ff       	sbrs	r24, 4
    bef8:	03 c0       	rjmp	.+6      	; 0xbf00 <crash_and_turn+0x198>
		{
			p->held = BTN_RIGHT;
    befa:	80 e8       	ldi	r24, 0x80	; 128
    befc:	90 e0       	ldi	r25, 0x00	; 0
    befe:	09 c0       	rjmp	.+18     	; 0xbf12 <crash_and_turn+0x1aa>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    bf00:	87 ff       	sbrs	r24, 7
    bf02:	03 c0       	rjmp	.+6      	; 0xbf0a <crash_and_turn+0x1a2>
		{
			p->held = BTN_DOWN;
    bf04:	80 e2       	ldi	r24, 0x20	; 32
    bf06:	90 e0       	ldi	r25, 0x00	; 0
    bf08:	04 c0       	rjmp	.+8      	; 0xbf12 <crash_and_turn+0x1aa>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    bf0a:	85 ff       	sbrs	r24, 5
    bf0c:	07 c0       	rjmp	.+14     	; 0xbf1c <crash_and_turn+0x1b4>
		{
			p->held = BTN_LEFT;
    bf0e:	80 e4       	ldi	r24, 0x40	; 64
    bf10:	90 e0       	ldi	r25, 0x00	; 0
    bf12:	f8 01       	movw	r30, r16
    bf14:	95 83       	std	Z+5, r25	; 0x05
    bf16:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    bf18:	81 e0       	ldi	r24, 0x01	; 1
    bf1a:	8f 87       	std	Y+15, r24	; 0x0f
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    bf1c:	8b 89       	ldd	r24, Y+19	; 0x13
    bf1e:	9c 89       	ldd	r25, Y+20	; 0x14
    bf20:	80 31       	cpi	r24, 0x10	; 16
    bf22:	91 05       	cpc	r25, r1
    bf24:	19 f0       	breq	.+6      	; 0xbf2c <crash_and_turn+0x1c4>
    bf26:	80 32       	cpi	r24, 0x20	; 32
    bf28:	91 05       	cpc	r25, r1
    bf2a:	19 f4       	brne	.+6      	; 0xbf32 <crash_and_turn+0x1ca>
    bf2c:	29 8d       	ldd	r18, Y+25	; 0x19
    bf2e:	e2 16       	cp	r14, r18
    bf30:	59 f0       	breq	.+22     	; 0xbf48 <crash_and_turn+0x1e0>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    bf32:	80 34       	cpi	r24, 0x40	; 64
    bf34:	91 05       	cpc	r25, r1
    bf36:	19 f0       	breq	.+6      	; 0xbf3e <crash_and_turn+0x1d6>
    bf38:	80 38       	cpi	r24, 0x80	; 128
    bf3a:	91 05       	cpc	r25, r1
    bf3c:	39 f4       	brne	.+14     	; 0xbf4c <crash_and_turn+0x1e4>
    bf3e:	81 e0       	ldi	r24, 0x01	; 1
    bf40:	99 8d       	ldd	r25, Y+25	; 0x19
    bf42:	f9 12       	cpse	r15, r25
    bf44:	03 c0       	rjmp	.+6      	; 0xbf4c <crash_and_turn+0x1e4>
    bf46:	03 c0       	rjmp	.+6      	; 0xbf4e <crash_and_turn+0x1e6>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    bf48:	81 e0       	ldi	r24, 0x01	; 1
    bf4a:	01 c0       	rjmp	.+2      	; 0xbf4e <crash_and_turn+0x1e6>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    bf4c:	80 e0       	ldi	r24, 0x00	; 0
}
    bf4e:	df 91       	pop	r29
    bf50:	cf 91       	pop	r28
    bf52:	1f 91       	pop	r17
    bf54:	0f 91       	pop	r16
    bf56:	ff 90       	pop	r15
    bf58:	ef 90       	pop	r14
    bf5a:	df 90       	pop	r13
    bf5c:	cf 90       	pop	r12
    bf5e:	bf 90       	pop	r11
    bf60:	af 90       	pop	r10
    bf62:	9f 90       	pop	r9
    bf64:	8f 90       	pop	r8
    bf66:	08 95       	ret

0000bf68 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    bf68:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    bf6a:	26 2f       	mov	r18, r22
    bf6c:	33 27       	eor	r19, r19
    bf6e:	27 fd       	sbrc	r18, 7
    bf70:	30 95       	com	r19
    bf72:	37 ff       	sbrs	r19, 7
    bf74:	03 c0       	rjmp	.+6      	; 0xbf7c <get_cpu_goal_direction+0x14>
    bf76:	31 95       	neg	r19
    bf78:	21 95       	neg	r18
    bf7a:	31 09       	sbc	r19, r1
    bf7c:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    bf7e:	24 2f       	mov	r18, r20
    bf80:	33 27       	eor	r19, r19
    bf82:	27 fd       	sbrc	r18, 7
    bf84:	30 95       	com	r19
    bf86:	37 ff       	sbrs	r19, 7
    bf88:	03 c0       	rjmp	.+6      	; 0xbf90 <get_cpu_goal_direction+0x28>
    bf8a:	31 95       	neg	r19
    bf8c:	21 95       	neg	r18
    bf8e:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    bf90:	80 89       	ldd	r24, Z+16	; 0x10
    bf92:	81 11       	cpse	r24, r1
    bf94:	08 c0       	rjmp	.+16     	; 0xbfa6 <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    bf96:	29 17       	cp	r18, r25
    bf98:	1c f4       	brge	.+6      	; 0xbfa0 <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    bf9a:	16 16       	cp	r1, r22
    bf9c:	94 f0       	brlt	.+36     	; 0xbfc2 <get_cpu_goal_direction+0x5a>
    bf9e:	0b c0       	rjmp	.+22     	; 0xbfb6 <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    bfa0:	14 16       	cp	r1, r20
    bfa2:	94 f0       	brlt	.+36     	; 0xbfc8 <get_cpu_goal_direction+0x60>
    bfa4:	0b c0       	rjmp	.+22     	; 0xbfbc <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    bfa6:	29 17       	cp	r18, r25
    bfa8:	1c f4       	brge	.+6      	; 0xbfb0 <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    bfaa:	16 16       	cp	r1, r22
    bfac:	24 f0       	brlt	.+8      	; 0xbfb6 <get_cpu_goal_direction+0x4e>
    bfae:	09 c0       	rjmp	.+18     	; 0xbfc2 <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    bfb0:	14 16       	cp	r1, r20
    bfb2:	24 f0       	brlt	.+8      	; 0xbfbc <get_cpu_goal_direction+0x54>
    bfb4:	09 c0       	rjmp	.+18     	; 0xbfc8 <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    bfb6:	80 e4       	ldi	r24, 0x40	; 64
    bfb8:	90 e0       	ldi	r25, 0x00	; 0
    bfba:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    bfbc:	80 e1       	ldi	r24, 0x10	; 16
    bfbe:	90 e0       	ldi	r25, 0x00	; 0
    bfc0:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    bfc2:	80 e8       	ldi	r24, 0x80	; 128
    bfc4:	90 e0       	ldi	r25, 0x00	; 0
    bfc6:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    bfc8:	80 e2       	ldi	r24, 0x20	; 32
    bfca:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    bfcc:	08 95       	ret

0000bfce <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    bfce:	2f 92       	push	r2
    bfd0:	3f 92       	push	r3
    bfd2:	4f 92       	push	r4
    bfd4:	5f 92       	push	r5
    bfd6:	6f 92       	push	r6
    bfd8:	7f 92       	push	r7
    bfda:	8f 92       	push	r8
    bfdc:	9f 92       	push	r9
    bfde:	af 92       	push	r10
    bfe0:	bf 92       	push	r11
    bfe2:	cf 92       	push	r12
    bfe4:	df 92       	push	r13
    bfe6:	ef 92       	push	r14
    bfe8:	ff 92       	push	r15
    bfea:	0f 93       	push	r16
    bfec:	1f 93       	push	r17
    bfee:	cf 93       	push	r28
    bff0:	df 93       	push	r29
    bff2:	00 d0       	rcall	.+0      	; 0xbff4 <get_cpu_joypad_state+0x26>
    bff4:	00 d0       	rcall	.+0      	; 0xbff6 <get_cpu_joypad_state+0x28>
    bff6:	00 d0       	rcall	.+0      	; 0xbff8 <get_cpu_joypad_state+0x2a>
    bff8:	cd b7       	in	r28, 0x3d	; 61
    bffa:	de b7       	in	r29, 0x3e	; 62
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
    bffc:	3b 01       	movw	r6, r22
    bffe:	26 e7       	ldi	r18, 0x76	; 118
    c000:	62 0e       	add	r6, r18
    c002:	71 1c       	adc	r7, r1
    c004:	d3 01       	movw	r26, r6
    c006:	0d 91       	ld	r16, X+
    c008:	1c 91       	ld	r17, X
	goal_y = other_player->netMessage.shared.y / 800 - 3;
    c00a:	fb 01       	movw	r30, r22
    c00c:	e8 58       	subi	r30, 0x88	; 136
    c00e:	ff 4f       	sbci	r31, 0xFF	; 255
    c010:	fc 83       	std	Y+4, r31	; 0x04
    c012:	eb 83       	std	Y+3, r30	; 0x03
    c014:	40 80       	ld	r4, Z
    c016:	51 80       	ldd	r5, Z+1	; 0x01
	player_x = player->netMessage.shared.x / 800;
    c018:	5c 01       	movw	r10, r24
    c01a:	f6 e7       	ldi	r31, 0x76	; 118
    c01c:	af 0e       	add	r10, r31
    c01e:	b1 1c       	adc	r11, r1
    c020:	d5 01       	movw	r26, r10
    c022:	2d 90       	ld	r2, X+
    c024:	3c 90       	ld	r3, X
	player_y =  player->netMessage.shared.y / 800 - 3;
    c026:	4c 01       	movw	r8, r24
    c028:	b8 e7       	ldi	r27, 0x78	; 120
    c02a:	8b 0e       	add	r8, r27
    c02c:	91 1c       	adc	r9, r1
    c02e:	f4 01       	movw	r30, r8
    c030:	01 90       	ld	r0, Z+
    c032:	f0 81       	ld	r31, Z
    c034:	e0 2d       	mov	r30, r0
    c036:	fa 83       	std	Y+2, r31	; 0x02
    c038:	e9 83       	std	Y+1, r30	; 0x01
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    c03a:	dc 01       	movw	r26, r24
    c03c:	1a 96       	adiw	r26, 0x0a	; 10
    c03e:	2c 91       	ld	r18, X
    c040:	21 11       	cpse	r18, r1
    c042:	04 c0       	rjmp	.+8      	; 0xc04c <get_cpu_joypad_state+0x7e>
	{
		p->held = 0;
    c044:	fa 01       	movw	r30, r20
    c046:	15 82       	std	Z+5, r1	; 0x05
    c048:	14 82       	std	Z+4, r1	; 0x04
		return;
    c04a:	dc c1       	rjmp	.+952    	; 0xc404 <get_cpu_joypad_state+0x436>
    c04c:	6a 01       	movw	r12, r20
    c04e:	7b 01       	movw	r14, r22
    c050:	9e 83       	std	Y+6, r25	; 0x06
    c052:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	// Shot
	if (shoot_pressed(p))
    c054:	ca 01       	movw	r24, r20
    c056:	0e 94 8f 50 	call	0xa11e	; 0xa11e <shoot_pressed>
    c05a:	88 23       	and	r24, r24
    c05c:	19 f0       	breq	.+6      	; 0xc064 <get_cpu_joypad_state+0x96>
	{
		p->pressed = 0;
    c05e:	d6 01       	movw	r26, r12
    c060:	1d 92       	st	X+, r1
    c062:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    c064:	20 91 0b 01 	lds	r18, 0x010B
    c068:	30 91 0c 01 	lds	r19, 0x010C
    c06c:	c9 01       	movw	r24, r18
    c06e:	6a e0       	ldi	r22, 0x0A	; 10
    c070:	70 e0       	ldi	r23, 0x00	; 0
    c072:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    c076:	89 2b       	or	r24, r25
    c078:	51 f4       	brne	.+20     	; 0xc08e <get_cpu_joypad_state+0xc0>
    c07a:	ed 81       	ldd	r30, Y+5	; 0x05
    c07c:	fe 81       	ldd	r31, Y+6	; 0x06
    c07e:	82 85       	ldd	r24, Z+10	; 0x0a
    c080:	83 33       	cpi	r24, 0x33	; 51
    c082:	28 f0       	brcs	.+10     	; 0xc08e <get_cpu_joypad_state+0xc0>
	{
		p->pressed = BTN_B;
    c084:	81 e0       	ldi	r24, 0x01	; 1
    c086:	90 e0       	ldi	r25, 0x00	; 0
    c088:	d6 01       	movw	r26, r12
    c08a:	8d 93       	st	X+, r24
    c08c:	9c 93       	st	X, r25
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    c08e:	c9 01       	movw	r24, r18
    c090:	64 eb       	ldi	r22, 0xB4	; 180
    c092:	70 e0       	ldi	r23, 0x00	; 0
    c094:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    c098:	89 2b       	or	r24, r25
    c09a:	49 f0       	breq	.+18     	; 0xc0ae <get_cpu_joypad_state+0xe0>
    c09c:	ed 81       	ldd	r30, Y+5	; 0x05
    c09e:	fe 81       	ldd	r31, Y+6	; 0x06
    c0a0:	82 85       	ldd	r24, Z+10	; 0x0a
    c0a2:	8a 30       	cpi	r24, 0x0A	; 10
    c0a4:	21 f0       	breq	.+8      	; 0xc0ae <get_cpu_joypad_state+0xe0>
    c0a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    c0a8:	88 23       	and	r24, r24
    c0aa:	09 f4       	brne	.+2      	; 0xc0ae <get_cpu_joypad_state+0xe0>
    c0ac:	5a c0       	rjmp	.+180    	; 0xc162 <get_cpu_joypad_state+0x194>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
    c0ae:	20 e2       	ldi	r18, 0x20	; 32
    c0b0:	33 e0       	ldi	r19, 0x03	; 3
    c0b2:	c8 01       	movw	r24, r16
    c0b4:	b9 01       	movw	r22, r18
    c0b6:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    c0ba:	16 2f       	mov	r17, r22
	goal_y = other_player->netMessage.shared.y / 800 - 3;
    c0bc:	c2 01       	movw	r24, r4
    c0be:	b9 01       	movw	r22, r18
    c0c0:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    c0c4:	46 2f       	mov	r20, r22
	player_x = player->netMessage.shared.x / 800;
    c0c6:	c1 01       	movw	r24, r2
    c0c8:	b9 01       	movw	r22, r18
    c0ca:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
	player_y =  player->netMessage.shared.y / 800 - 3;
	distance_x = goal_x - player_x;
    c0ce:	e1 2f       	mov	r30, r17
    c0d0:	e6 1b       	sub	r30, r22
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
	goal_y = other_player->netMessage.shared.y / 800 - 3;
	player_x = player->netMessage.shared.x / 800;
	player_y =  player->netMessage.shared.y / 800 - 3;
    c0d2:	89 81       	ldd	r24, Y+1	; 0x01
    c0d4:	9a 81       	ldd	r25, Y+2	; 0x02
    c0d6:	b9 01       	movw	r22, r18
    c0d8:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    c0dc:	0d ef       	ldi	r16, 0xFD	; 253
    c0de:	04 0f       	add	r16, r20
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    c0e0:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    c0e2:	ad 81       	ldd	r26, Y+5	; 0x05
    c0e4:	be 81       	ldd	r27, Y+6	; 0x06
    c0e6:	5a 96       	adiw	r26, 0x1a	; 26
    c0e8:	1c 92       	st	X, r1
    c0ea:	5a 97       	sbiw	r26, 0x1a	; 26
		player->feeling_my_way = 0;
    c0ec:	1f 96       	adiw	r26, 0x0f	; 15
    c0ee:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    c0f0:	82 e0       	ldi	r24, 0x02	; 2
    c0f2:	8e 0f       	add	r24, r30
    c0f4:	85 30       	cpi	r24, 0x05	; 5
    c0f6:	c0 f4       	brcc	.+48     	; 0xc128 <get_cpu_joypad_state+0x15a>
    c0f8:	4e 3f       	cpi	r20, 0xFE	; 254
    c0fa:	b4 f0       	brlt	.+44     	; 0xc128 <get_cpu_joypad_state+0x15a>
    c0fc:	43 30       	cpi	r20, 0x03	; 3
    c0fe:	a4 f4       	brge	.+40     	; 0xc128 <get_cpu_joypad_state+0x15a>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    c100:	64 e0       	ldi	r22, 0x04	; 4
    c102:	80 e0       	ldi	r24, 0x00	; 0
    c104:	0e 94 16 4c 	call	0x982c	; 0x982c <LBRandom>
    c108:	90 e0       	ldi	r25, 0x00	; 0
    c10a:	0e 94 9e 5e 	call	0xbd3c	; 0xbd3c <button_map>
    c10e:	ed 81       	ldd	r30, Y+5	; 0x05
    c110:	fe 81       	ldd	r31, Y+6	; 0x06
    c112:	94 8b       	std	Z+20, r25	; 0x14
    c114:	83 8b       	std	Z+19, r24	; 0x13
			player->goal = LBRandom(5, 18);
    c116:	62 e1       	ldi	r22, 0x12	; 18
    c118:	85 e0       	ldi	r24, 0x05	; 5
    c11a:	0e 94 16 4c 	call	0x982c	; 0x982c <LBRandom>
    c11e:	ad 81       	ldd	r26, Y+5	; 0x05
    c120:	be 81       	ldd	r27, Y+6	; 0x06
    c122:	59 96       	adiw	r26, 0x19	; 25
    c124:	8c 93       	st	X, r24
    c126:	14 c0       	rjmp	.+40     	; 0xc150 <get_cpu_joypad_state+0x182>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    c128:	6e 2f       	mov	r22, r30
    c12a:	8d 81       	ldd	r24, Y+5	; 0x05
    c12c:	9e 81       	ldd	r25, Y+6	; 0x06
    c12e:	0e 94 b4 5f 	call	0xbf68	; 0xbf68 <get_cpu_goal_direction>
    c132:	ed 81       	ldd	r30, Y+5	; 0x05
    c134:	fe 81       	ldd	r31, Y+6	; 0x06
    c136:	94 8b       	std	Z+20, r25	; 0x14
    c138:	83 8b       	std	Z+19, r24	; 0x13
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c13a:	80 31       	cpi	r24, 0x10	; 16
    c13c:	91 05       	cpc	r25, r1
    c13e:	21 f0       	breq	.+8      	; 0xc148 <get_cpu_joypad_state+0x17a>
    c140:	80 97       	sbiw	r24, 0x20	; 32
    c142:	11 f0       	breq	.+4      	; 0xc148 <get_cpu_joypad_state+0x17a>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
    c144:	11 8f       	std	Z+25, r17	; 0x19
    c146:	04 c0       	rjmp	.+8      	; 0xc150 <get_cpu_joypad_state+0x182>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c148:	ad 81       	ldd	r26, Y+5	; 0x05
    c14a:	be 81       	ldd	r27, Y+6	; 0x06
    c14c:	59 96       	adiw	r26, 0x19	; 25
    c14e:	0c 93       	st	X, r16
		}
		p->held = player->goal_direction;
    c150:	ed 81       	ldd	r30, Y+5	; 0x05
    c152:	fe 81       	ldd	r31, Y+6	; 0x06
    c154:	83 89       	ldd	r24, Z+19	; 0x13
    c156:	94 89       	ldd	r25, Z+20	; 0x14
    c158:	d6 01       	movw	r26, r12
    c15a:	15 96       	adiw	r26, 0x05	; 5
    c15c:	9c 93       	st	X, r25
    c15e:	8e 93       	st	-X, r24
    c160:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->netMessage.shared.x != player->old_x)
    c162:	f5 01       	movw	r30, r10
    c164:	20 81       	ld	r18, Z
    c166:	31 81       	ldd	r19, Z+1	; 0x01
    c168:	ad 81       	ldd	r26, Y+5	; 0x05
    c16a:	be 81       	ldd	r27, Y+6	; 0x06
    c16c:	5d 96       	adiw	r26, 0x1d	; 29
    c16e:	8d 91       	ld	r24, X+
    c170:	9c 91       	ld	r25, X
    c172:	5e 97       	sbiw	r26, 0x1e	; 30
    c174:	28 17       	cp	r18, r24
    c176:	39 07       	cpc	r19, r25
    c178:	29 f0       	breq	.+10     	; 0xc184 <get_cpu_joypad_state+0x1b6>
		player->deadlock_count_x = 0;
    c17a:	56 96       	adiw	r26, 0x16	; 22
    c17c:	1c 92       	st	X, r1
    c17e:	1e 92       	st	-X, r1
    c180:	55 97       	sbiw	r26, 0x15	; 21
    c182:	07 c0       	rjmp	.+14     	; 0xc192 <get_cpu_joypad_state+0x1c4>
	else 
		player->deadlock_count_x++;
    c184:	ed 81       	ldd	r30, Y+5	; 0x05
    c186:	fe 81       	ldd	r31, Y+6	; 0x06
    c188:	85 89       	ldd	r24, Z+21	; 0x15
    c18a:	96 89       	ldd	r25, Z+22	; 0x16
    c18c:	01 96       	adiw	r24, 0x01	; 1
    c18e:	96 8b       	std	Z+22, r25	; 0x16
    c190:	85 8b       	std	Z+21, r24	; 0x15
	if (player->netMessage.shared.y != player->old_y)
    c192:	d4 01       	movw	r26, r8
    c194:	8d 91       	ld	r24, X+
    c196:	9c 91       	ld	r25, X
    c198:	ed 81       	ldd	r30, Y+5	; 0x05
    c19a:	fe 81       	ldd	r31, Y+6	; 0x06
    c19c:	47 8d       	ldd	r20, Z+31	; 0x1f
    c19e:	50 a1       	ldd	r21, Z+32	; 0x20
    c1a0:	84 17       	cp	r24, r20
    c1a2:	95 07       	cpc	r25, r21
    c1a4:	19 f0       	breq	.+6      	; 0xc1ac <get_cpu_joypad_state+0x1de>
		player->deadlock_count_y = 0;
    c1a6:	10 8e       	std	Z+24, r1	; 0x18
    c1a8:	17 8a       	std	Z+23, r1	; 0x17
    c1aa:	0c c0       	rjmp	.+24     	; 0xc1c4 <get_cpu_joypad_state+0x1f6>
	else
		player->deadlock_count_y++;
    c1ac:	ad 81       	ldd	r26, Y+5	; 0x05
    c1ae:	be 81       	ldd	r27, Y+6	; 0x06
    c1b0:	57 96       	adiw	r26, 0x17	; 23
    c1b2:	4d 91       	ld	r20, X+
    c1b4:	5c 91       	ld	r21, X
    c1b6:	58 97       	sbiw	r26, 0x18	; 24
    c1b8:	4f 5f       	subi	r20, 0xFF	; 255
    c1ba:	5f 4f       	sbci	r21, 0xFF	; 255
    c1bc:	58 96       	adiw	r26, 0x18	; 24
    c1be:	5c 93       	st	X, r21
    c1c0:	4e 93       	st	-X, r20
    c1c2:	57 97       	sbiw	r26, 0x17	; 23
	player->old_x = player->netMessage.shared.x;
    c1c4:	ed 81       	ldd	r30, Y+5	; 0x05
    c1c6:	fe 81       	ldd	r31, Y+6	; 0x06
    c1c8:	36 8f       	std	Z+30, r19	; 0x1e
    c1ca:	25 8f       	std	Z+29, r18	; 0x1d
	player->old_y = player->netMessage.shared.y;
    c1cc:	90 a3       	std	Z+32, r25	; 0x20
    c1ce:	87 8f       	std	Z+31, r24	; 0x1f
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    c1d0:	45 89       	ldd	r20, Z+21	; 0x15
    c1d2:	56 89       	ldd	r21, Z+22	; 0x16
    c1d4:	40 34       	cpi	r20, 0x40	; 64
    c1d6:	51 40       	sbci	r21, 0x01	; 1
    c1d8:	88 f0       	brcs	.+34     	; 0xc1fc <get_cpu_joypad_state+0x22e>
	{
		p->held = button_map(LBRandom(2, 4));
    c1da:	64 e0       	ldi	r22, 0x04	; 4
    c1dc:	82 e0       	ldi	r24, 0x02	; 2
    c1de:	0e 94 16 4c 	call	0x982c	; 0x982c <LBRandom>
    c1e2:	90 e0       	ldi	r25, 0x00	; 0
    c1e4:	0e 94 9e 5e 	call	0xbd3c	; 0xbd3c <button_map>
    c1e8:	d6 01       	movw	r26, r12
    c1ea:	15 96       	adiw	r26, 0x05	; 5
    c1ec:	9c 93       	st	X, r25
    c1ee:	8e 93       	st	-X, r24
    c1f0:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    c1f2:	ed 81       	ldd	r30, Y+5	; 0x05
    c1f4:	fe 81       	ldd	r31, Y+6	; 0x06
    c1f6:	16 8a       	std	Z+22, r1	; 0x16
    c1f8:	15 8a       	std	Z+21, r1	; 0x15
    c1fa:	33 c0       	rjmp	.+102    	; 0xc262 <get_cpu_joypad_state+0x294>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    c1fc:	ad 81       	ldd	r26, Y+5	; 0x05
    c1fe:	be 81       	ldd	r27, Y+6	; 0x06
    c200:	57 96       	adiw	r26, 0x17	; 23
    c202:	4d 91       	ld	r20, X+
    c204:	5c 91       	ld	r21, X
    c206:	58 97       	sbiw	r26, 0x18	; 24
    c208:	40 34       	cpi	r20, 0x40	; 64
    c20a:	51 40       	sbci	r21, 0x01	; 1
    c20c:	88 f0       	brcs	.+34     	; 0xc230 <get_cpu_joypad_state+0x262>
	{
		p->held = button_map(LBRandom(0, 2));
    c20e:	62 e0       	ldi	r22, 0x02	; 2
    c210:	80 e0       	ldi	r24, 0x00	; 0
    c212:	0e 94 16 4c 	call	0x982c	; 0x982c <LBRandom>
    c216:	90 e0       	ldi	r25, 0x00	; 0
    c218:	0e 94 9e 5e 	call	0xbd3c	; 0xbd3c <button_map>
    c21c:	f6 01       	movw	r30, r12
    c21e:	95 83       	std	Z+5, r25	; 0x05
    c220:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    c222:	ad 81       	ldd	r26, Y+5	; 0x05
    c224:	be 81       	ldd	r27, Y+6	; 0x06
    c226:	58 96       	adiw	r26, 0x18	; 24
    c228:	1c 92       	st	X, r1
    c22a:	1e 92       	st	-X, r1
    c22c:	57 97       	sbiw	r26, 0x17	; 23
    c22e:	19 c0       	rjmp	.+50     	; 0xc262 <get_cpu_joypad_state+0x294>
	}
	else player->goal_reached = crash_and_turn(player->netMessage.shared.x / 800, player->netMessage.shared.y / 800 - 3, player->netMessage.shared.recoiled, player, p);
    c230:	00 e2       	ldi	r16, 0x20	; 32
    c232:	13 e0       	ldi	r17, 0x03	; 3
    c234:	b8 01       	movw	r22, r16
    c236:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    c23a:	ed ef       	ldi	r30, 0xFD	; 253
    c23c:	e6 0f       	add	r30, r22
    c23e:	c9 01       	movw	r24, r18
    c240:	b8 01       	movw	r22, r16
    c242:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    c246:	86 2f       	mov	r24, r22
    c248:	86 01       	movw	r16, r12
    c24a:	2d 81       	ldd	r18, Y+5	; 0x05
    c24c:	3e 81       	ldd	r19, Y+6	; 0x06
    c24e:	d9 01       	movw	r26, r18
    c250:	ab 58       	subi	r26, 0x8B	; 139
    c252:	bf 4f       	sbci	r27, 0xFF	; 255
    c254:	4c 91       	ld	r20, X
    c256:	6e 2f       	mov	r22, r30
    c258:	0e 94 b4 5e 	call	0xbd68	; 0xbd68 <crash_and_turn>
    c25c:	ed 81       	ldd	r30, Y+5	; 0x05
    c25e:	fe 81       	ldd	r31, Y+6	; 0x06
    c260:	82 8f       	std	Z+26, r24	; 0x1a
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    c262:	ad 81       	ldd	r26, Y+5	; 0x05
    c264:	be 81       	ldd	r27, Y+6	; 0x06
    c266:	51 96       	adiw	r26, 0x11	; 17
    c268:	8c 91       	ld	r24, X
    c26a:	81 30       	cpi	r24, 0x01	; 1
    c26c:	09 f0       	breq	.+2      	; 0xc270 <get_cpu_joypad_state+0x2a2>
    c26e:	ca c0       	rjmp	.+404    	; 0xc404 <get_cpu_joypad_state+0x436>
    c270:	f7 01       	movw	r30, r14
    c272:	95 81       	ldd	r25, Z+5	; 0x05
    c274:	84 81       	ldd	r24, Z+4	; 0x04
    c276:	98 17       	cp	r25, r24
    c278:	08 f0       	brcs	.+2      	; 0xc27c <get_cpu_joypad_state+0x2ae>
    c27a:	c4 c0       	rjmp	.+392    	; 0xc404 <get_cpu_joypad_state+0x436>
	{
		if (other_player->netMessage.shared.y < player->netMessage.shared.y && other_player->netMessage.shared.x < player->netMessage.shared.x)
    c27c:	ab 81       	ldd	r26, Y+3	; 0x03
    c27e:	bc 81       	ldd	r27, Y+4	; 0x04
    c280:	2d 91       	ld	r18, X+
    c282:	3c 91       	ld	r19, X
    c284:	f4 01       	movw	r30, r8
    c286:	80 81       	ld	r24, Z
    c288:	91 81       	ldd	r25, Z+1	; 0x01
    c28a:	28 17       	cp	r18, r24
    c28c:	39 07       	cpc	r19, r25
    c28e:	08 f0       	brcs	.+2      	; 0xc292 <get_cpu_joypad_state+0x2c4>
    c290:	5a c0       	rjmp	.+180    	; 0xc346 <get_cpu_joypad_state+0x378>
    c292:	d3 01       	movw	r26, r6
    c294:	2d 91       	ld	r18, X+
    c296:	3c 91       	ld	r19, X
    c298:	f5 01       	movw	r30, r10
    c29a:	80 81       	ld	r24, Z
    c29c:	91 81       	ldd	r25, Z+1	; 0x01
    c29e:	28 17       	cp	r18, r24
    c2a0:	39 07       	cpc	r19, r25
    c2a2:	68 f5       	brcc	.+90     	; 0xc2fe <get_cpu_joypad_state+0x330>
		{
			if (other_player->netMessage.shared.direction == D_DOWN && player->netMessage.shared.direction == D_LEFT)
    c2a4:	f7 01       	movw	r30, r14
    c2a6:	ee 58       	subi	r30, 0x8E	; 142
    c2a8:	ff 4f       	sbci	r31, 0xFF	; 255
    c2aa:	80 81       	ld	r24, Z
    c2ac:	82 30       	cpi	r24, 0x02	; 2
    c2ae:	a9 f4       	brne	.+42     	; 0xc2da <get_cpu_joypad_state+0x30c>
    c2b0:	ad 81       	ldd	r26, Y+5	; 0x05
    c2b2:	be 81       	ldd	r27, Y+6	; 0x06
    c2b4:	ae 58       	subi	r26, 0x8E	; 142
    c2b6:	bf 4f       	sbci	r27, 0xFF	; 255
    c2b8:	8c 91       	ld	r24, X
    c2ba:	83 30       	cpi	r24, 0x03	; 3
    c2bc:	71 f4       	brne	.+28     	; 0xc2da <get_cpu_joypad_state+0x30c>
			{
				p->held = BTN_RIGHT;
    c2be:	80 e8       	ldi	r24, 0x80	; 128
    c2c0:	90 e0       	ldi	r25, 0x00	; 0
    c2c2:	d6 01       	movw	r26, r12
    c2c4:	15 96       	adiw	r26, 0x05	; 5
    c2c6:	9c 93       	st	X, r25
    c2c8:	8e 93       	st	-X, r24
    c2ca:	14 97       	sbiw	r26, 0x04	; 4
				player->goal_reached = 0;
    c2cc:	ad 81       	ldd	r26, Y+5	; 0x05
    c2ce:	be 81       	ldd	r27, Y+6	; 0x06
    c2d0:	5a 96       	adiw	r26, 0x1a	; 26
    c2d2:	1c 92       	st	X, r1
    c2d4:	5a 97       	sbiw	r26, 0x1a	; 26
				player->feeling_my_way = 0;
    c2d6:	1f 96       	adiw	r26, 0x0f	; 15
    c2d8:	1c 92       	st	X, r1
			}
			if (other_player->netMessage.shared.direction == D_RIGHT && player->netMessage.shared.direction == D_UP)
    c2da:	80 81       	ld	r24, Z
    c2dc:	81 30       	cpi	r24, 0x01	; 1
    c2de:	09 f0       	breq	.+2      	; 0xc2e2 <get_cpu_joypad_state+0x314>
    c2e0:	91 c0       	rjmp	.+290    	; 0xc404 <get_cpu_joypad_state+0x436>
    c2e2:	ed 81       	ldd	r30, Y+5	; 0x05
    c2e4:	fe 81       	ldd	r31, Y+6	; 0x06
    c2e6:	ee 58       	subi	r30, 0x8E	; 142
    c2e8:	ff 4f       	sbci	r31, 0xFF	; 255
    c2ea:	80 81       	ld	r24, Z
    c2ec:	81 11       	cpse	r24, r1
    c2ee:	8a c0       	rjmp	.+276    	; 0xc404 <get_cpu_joypad_state+0x436>
			{
				player->goal_reached = 0;
    c2f0:	ed 81       	ldd	r30, Y+5	; 0x05
    c2f2:	fe 81       	ldd	r31, Y+6	; 0x06
    c2f4:	12 8e       	std	Z+26, r1	; 0x1a
				player->feeling_my_way = 0;
    c2f6:	17 86       	std	Z+15, r1	; 0x0f
				p->held = BTN_DOWN;
    c2f8:	80 e2       	ldi	r24, 0x20	; 32
    c2fa:	90 e0       	ldi	r25, 0x00	; 0
    c2fc:	5c c0       	rjmp	.+184    	; 0xc3b6 <get_cpu_joypad_state+0x3e8>
			}
		}
		else if (other_player->netMessage.shared.y < player->netMessage.shared.y && other_player->netMessage.shared.x > player->netMessage.shared.x)
    c2fe:	82 17       	cp	r24, r18
    c300:	93 07       	cpc	r25, r19
    c302:	08 f0       	brcs	.+2      	; 0xc306 <get_cpu_joypad_state+0x338>
    c304:	7f c0       	rjmp	.+254    	; 0xc404 <get_cpu_joypad_state+0x436>
		{
			if (other_player->netMessage.shared.direction == D_DOWN && player->netMessage.shared.direction == D_RIGHT)
    c306:	f7 01       	movw	r30, r14
    c308:	ee 58       	subi	r30, 0x8E	; 142
    c30a:	ff 4f       	sbci	r31, 0xFF	; 255
    c30c:	80 81       	ld	r24, Z
    c30e:	82 30       	cpi	r24, 0x02	; 2
    c310:	a9 f4       	brne	.+42     	; 0xc33c <get_cpu_joypad_state+0x36e>
    c312:	ad 81       	ldd	r26, Y+5	; 0x05
    c314:	be 81       	ldd	r27, Y+6	; 0x06
    c316:	ae 58       	subi	r26, 0x8E	; 142
    c318:	bf 4f       	sbci	r27, 0xFF	; 255
    c31a:	8c 91       	ld	r24, X
    c31c:	81 30       	cpi	r24, 0x01	; 1
    c31e:	71 f4       	brne	.+28     	; 0xc33c <get_cpu_joypad_state+0x36e>
			{
				player->goal_reached = 0;
    c320:	ad 81       	ldd	r26, Y+5	; 0x05
    c322:	be 81       	ldd	r27, Y+6	; 0x06
    c324:	5a 96       	adiw	r26, 0x1a	; 26
    c326:	1c 92       	st	X, r1
    c328:	5a 97       	sbiw	r26, 0x1a	; 26
				player->feeling_my_way = 0;
    c32a:	1f 96       	adiw	r26, 0x0f	; 15
    c32c:	1c 92       	st	X, r1
				p->held = BTN_LEFT;
    c32e:	80 e4       	ldi	r24, 0x40	; 64
    c330:	90 e0       	ldi	r25, 0x00	; 0
    c332:	d6 01       	movw	r26, r12
    c334:	15 96       	adiw	r26, 0x05	; 5
    c336:	9c 93       	st	X, r25
    c338:	8e 93       	st	-X, r24
    c33a:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->netMessage.shared.direction == D_LEFT && player->netMessage.shared.direction == D_UP)
    c33c:	80 81       	ld	r24, Z
    c33e:	83 30       	cpi	r24, 0x03	; 3
    c340:	09 f0       	breq	.+2      	; 0xc344 <get_cpu_joypad_state+0x376>
    c342:	60 c0       	rjmp	.+192    	; 0xc404 <get_cpu_joypad_state+0x436>
    c344:	ce cf       	rjmp	.-100    	; 0xc2e2 <get_cpu_joypad_state+0x314>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->netMessage.shared.y > player->netMessage.shared.y && other_player->netMessage.shared.x < player->netMessage.shared.x)
    c346:	82 17       	cp	r24, r18
    c348:	93 07       	cpc	r25, r19
    c34a:	08 f0       	brcs	.+2      	; 0xc34e <get_cpu_joypad_state+0x380>
    c34c:	5b c0       	rjmp	.+182    	; 0xc404 <get_cpu_joypad_state+0x436>
    c34e:	f3 01       	movw	r30, r6
    c350:	20 81       	ld	r18, Z
    c352:	31 81       	ldd	r19, Z+1	; 0x01
    c354:	d5 01       	movw	r26, r10
    c356:	8d 91       	ld	r24, X+
    c358:	9c 91       	ld	r25, X
    c35a:	28 17       	cp	r18, r24
    c35c:	39 07       	cpc	r19, r25
    c35e:	88 f5       	brcc	.+98     	; 0xc3c2 <get_cpu_joypad_state+0x3f4>
		{
			if (other_player->netMessage.shared.direction == D_UP && player->netMessage.shared.direction == D_LEFT)
    c360:	f7 01       	movw	r30, r14
    c362:	ee 58       	subi	r30, 0x8E	; 142
    c364:	ff 4f       	sbci	r31, 0xFF	; 255
    c366:	80 81       	ld	r24, Z
    c368:	81 11       	cpse	r24, r1
    c36a:	15 c0       	rjmp	.+42     	; 0xc396 <get_cpu_joypad_state+0x3c8>
    c36c:	ad 81       	ldd	r26, Y+5	; 0x05
    c36e:	be 81       	ldd	r27, Y+6	; 0x06
    c370:	ae 58       	subi	r26, 0x8E	; 142
    c372:	bf 4f       	sbci	r27, 0xFF	; 255
    c374:	8c 91       	ld	r24, X
    c376:	83 30       	cpi	r24, 0x03	; 3
    c378:	71 f4       	brne	.+28     	; 0xc396 <get_cpu_joypad_state+0x3c8>
			{
				player->goal_reached = 0;
    c37a:	ad 81       	ldd	r26, Y+5	; 0x05
    c37c:	be 81       	ldd	r27, Y+6	; 0x06
    c37e:	5a 96       	adiw	r26, 0x1a	; 26
    c380:	1c 92       	st	X, r1
    c382:	5a 97       	sbiw	r26, 0x1a	; 26
				player->feeling_my_way = 0;
    c384:	1f 96       	adiw	r26, 0x0f	; 15
    c386:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    c388:	80 e8       	ldi	r24, 0x80	; 128
    c38a:	90 e0       	ldi	r25, 0x00	; 0
    c38c:	d6 01       	movw	r26, r12
    c38e:	15 96       	adiw	r26, 0x05	; 5
    c390:	9c 93       	st	X, r25
    c392:	8e 93       	st	-X, r24
    c394:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->netMessage.shared.direction == D_RIGHT && player->netMessage.shared.direction == D_DOWN)
    c396:	80 81       	ld	r24, Z
    c398:	81 30       	cpi	r24, 0x01	; 1
    c39a:	a1 f5       	brne	.+104    	; 0xc404 <get_cpu_joypad_state+0x436>
    c39c:	ed 81       	ldd	r30, Y+5	; 0x05
    c39e:	fe 81       	ldd	r31, Y+6	; 0x06
    c3a0:	ee 58       	subi	r30, 0x8E	; 142
    c3a2:	ff 4f       	sbci	r31, 0xFF	; 255
    c3a4:	80 81       	ld	r24, Z
    c3a6:	82 30       	cpi	r24, 0x02	; 2
    c3a8:	69 f5       	brne	.+90     	; 0xc404 <get_cpu_joypad_state+0x436>
			{
				player->goal_reached = 0;
    c3aa:	ed 81       	ldd	r30, Y+5	; 0x05
    c3ac:	fe 81       	ldd	r31, Y+6	; 0x06
    c3ae:	12 8e       	std	Z+26, r1	; 0x1a
				player->feeling_my_way = 0;
    c3b0:	17 86       	std	Z+15, r1	; 0x0f
				p->held = BTN_UP;
    c3b2:	80 e1       	ldi	r24, 0x10	; 16
    c3b4:	90 e0       	ldi	r25, 0x00	; 0
    c3b6:	d6 01       	movw	r26, r12
    c3b8:	15 96       	adiw	r26, 0x05	; 5
    c3ba:	9c 93       	st	X, r25
    c3bc:	8e 93       	st	-X, r24
    c3be:	14 97       	sbiw	r26, 0x04	; 4
    c3c0:	21 c0       	rjmp	.+66     	; 0xc404 <get_cpu_joypad_state+0x436>
			}
		}
		else if (other_player->netMessage.shared.y > player->netMessage.shared.y && other_player->netMessage.shared.x > player->netMessage.shared.x)
    c3c2:	82 17       	cp	r24, r18
    c3c4:	93 07       	cpc	r25, r19
    c3c6:	f0 f4       	brcc	.+60     	; 0xc404 <get_cpu_joypad_state+0x436>
		{
			if (other_player->netMessage.shared.direction == D_UP && player->netMessage.shared.direction == D_RIGHT)
    c3c8:	f7 01       	movw	r30, r14
    c3ca:	ee 58       	subi	r30, 0x8E	; 142
    c3cc:	ff 4f       	sbci	r31, 0xFF	; 255
    c3ce:	80 81       	ld	r24, Z
    c3d0:	81 11       	cpse	r24, r1
    c3d2:	15 c0       	rjmp	.+42     	; 0xc3fe <get_cpu_joypad_state+0x430>
    c3d4:	ad 81       	ldd	r26, Y+5	; 0x05
    c3d6:	be 81       	ldd	r27, Y+6	; 0x06
    c3d8:	ae 58       	subi	r26, 0x8E	; 142
    c3da:	bf 4f       	sbci	r27, 0xFF	; 255
    c3dc:	8c 91       	ld	r24, X
    c3de:	81 30       	cpi	r24, 0x01	; 1
    c3e0:	71 f4       	brne	.+28     	; 0xc3fe <get_cpu_joypad_state+0x430>
			{
				player->goal_reached = 0;
    c3e2:	ad 81       	ldd	r26, Y+5	; 0x05
    c3e4:	be 81       	ldd	r27, Y+6	; 0x06
    c3e6:	5a 96       	adiw	r26, 0x1a	; 26
    c3e8:	1c 92       	st	X, r1
    c3ea:	5a 97       	sbiw	r26, 0x1a	; 26
				player->feeling_my_way = 0;
    c3ec:	1f 96       	adiw	r26, 0x0f	; 15
    c3ee:	1c 92       	st	X, r1
				p->held = BTN_LEFT;
    c3f0:	80 e4       	ldi	r24, 0x40	; 64
    c3f2:	90 e0       	ldi	r25, 0x00	; 0
    c3f4:	d6 01       	movw	r26, r12
    c3f6:	15 96       	adiw	r26, 0x05	; 5
    c3f8:	9c 93       	st	X, r25
    c3fa:	8e 93       	st	-X, r24
    c3fc:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->netMessage.shared.direction == D_LEFT && player->netMessage.shared.direction == D_DOWN){
    c3fe:	80 81       	ld	r24, Z
    c400:	83 30       	cpi	r24, 0x03	; 3
    c402:	61 f2       	breq	.-104    	; 0xc39c <get_cpu_joypad_state+0x3ce>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    c404:	26 96       	adiw	r28, 0x06	; 6
    c406:	0f b6       	in	r0, 0x3f	; 63
    c408:	f8 94       	cli
    c40a:	de bf       	out	0x3e, r29	; 62
    c40c:	0f be       	out	0x3f, r0	; 63
    c40e:	cd bf       	out	0x3d, r28	; 61
    c410:	df 91       	pop	r29
    c412:	cf 91       	pop	r28
    c414:	1f 91       	pop	r17
    c416:	0f 91       	pop	r16
    c418:	ff 90       	pop	r15
    c41a:	ef 90       	pop	r14
    c41c:	df 90       	pop	r13
    c41e:	cf 90       	pop	r12
    c420:	bf 90       	pop	r11
    c422:	af 90       	pop	r10
    c424:	9f 90       	pop	r9
    c426:	8f 90       	pop	r8
    c428:	7f 90       	pop	r7
    c42a:	6f 90       	pop	r6
    c42c:	5f 90       	pop	r5
    c42e:	4f 90       	pop	r4
    c430:	3f 90       	pop	r3
    c432:	2f 90       	pop	r2
    c434:	08 95       	ret

0000c436 <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u8 delay)
{
    c436:	bf 92       	push	r11
    c438:	cf 92       	push	r12
    c43a:	df 92       	push	r13
    c43c:	ef 92       	push	r14
    c43e:	ff 92       	push	r15
    c440:	0f 93       	push	r16
    c442:	1f 93       	push	r17
    c444:	cf 93       	push	r28
    c446:	df 93       	push	r29
    c448:	1f 92       	push	r1
    c44a:	cd b7       	in	r28, 0x3d	; 61
    c44c:	de b7       	in	r29, 0x3e	; 62
    c44e:	8c 01       	movw	r16, r24
    c450:	f6 2e       	mov	r15, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    c452:	8f e0       	ldi	r24, 0x0F	; 15
    c454:	b8 2e       	mov	r11, r24
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
			LBWaitSeconds(delay, sizeof(player1.netMessage));
    c456:	c4 2e       	mov	r12, r20
    c458:	d1 2c       	mov	r13, r1
}
void stream_text_middle(const char* dialogue, u8 y, u8 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c45a:	f8 01       	movw	r30, r16
    c45c:	84 91       	lpm	r24, Z
    c45e:	83 32       	cpi	r24, 0x23	; 35
    c460:	09 f1       	breq	.+66     	; 0xc4a4 <stream_text_middle+0x6e>
	{
		ln = strnlen_P(dialogue, 255);
    c462:	6f ef       	ldi	r22, 0xFF	; 255
    c464:	70 e0       	ldi	r23, 0x00	; 0
    c466:	c8 01       	movw	r24, r16
    c468:	0e 94 31 71 	call	0xe262	; 0xe262 <strnlen_P>
		x = 15 - ln / 2;
    c46c:	86 95       	lsr	r24
    c46e:	eb 2c       	mov	r14, r11
    c470:	e8 1a       	sub	r14, r24
    c472:	e0 1a       	sub	r14, r16
    c474:	8e 2d       	mov	r24, r14
    c476:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c478:	0f 5f       	subi	r16, 0xFF	; 255
    c47a:	1f 4f       	sbci	r17, 0xFF	; 255
    c47c:	f8 01       	movw	r30, r16
    c47e:	31 97       	sbiw	r30, 0x01	; 1
    c480:	e4 91       	lpm	r30, Z
    c482:	e9 83       	std	Y+1, r30	; 0x01
    c484:	ee 23       	and	r30, r30
    c486:	61 f0       	breq	.+24     	; 0xc4a0 <stream_text_middle+0x6a>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    c488:	21 e0       	ldi	r18, 0x01	; 1
    c48a:	ae 01       	movw	r20, r28
    c48c:	4f 5f       	subi	r20, 0xFF	; 255
    c48e:	5f 4f       	sbci	r21, 0xFF	; 255
    c490:	6f 2d       	mov	r22, r15
    c492:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBPrintStr>
			LBWaitSeconds(delay, sizeof(player1.netMessage));
    c496:	6c e1       	ldi	r22, 0x1C	; 28
    c498:	c6 01       	movw	r24, r12
    c49a:	0e 94 31 4c 	call	0x9862	; 0x9862 <LBWaitSeconds>
    c49e:	ea cf       	rjmp	.-44     	; 0xc474 <stream_text_middle+0x3e>
		}
		y++;
    c4a0:	f3 94       	inc	r15
    c4a2:	db cf       	rjmp	.-74     	; 0xc45a <stream_text_middle+0x24>
	}
}
    c4a4:	0f 90       	pop	r0
    c4a6:	df 91       	pop	r29
    c4a8:	cf 91       	pop	r28
    c4aa:	1f 91       	pop	r17
    c4ac:	0f 91       	pop	r16
    c4ae:	ff 90       	pop	r15
    c4b0:	ef 90       	pop	r14
    c4b2:	df 90       	pop	r13
    c4b4:	cf 90       	pop	r12
    c4b6:	bf 90       	pop	r11
    c4b8:	08 95       	ret

0000c4ba <load_credits>:

void load_credits()
{
	fade_through();
    c4ba:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
	stream_text_middle((const char*) strCredits, 5, 0);
    c4be:	40 e0       	ldi	r20, 0x00	; 0
    c4c0:	65 e0       	ldi	r22, 0x05	; 5
    c4c2:	89 e8       	ldi	r24, 0x89	; 137
    c4c4:	92 e0       	ldi	r25, 0x02	; 2
    c4c6:	0e 94 1b 62 	call	0xc436	; 0xc436 <stream_text_middle>
	LBWaitSeconds(4, sizeof(player1.netMessage));
    c4ca:	6c e1       	ldi	r22, 0x1C	; 28
    c4cc:	84 e0       	ldi	r24, 0x04	; 4
    c4ce:	90 e0       	ldi	r25, 0x00	; 0
    c4d0:	0e 94 31 4c 	call	0x9862	; 0x9862 <LBWaitSeconds>
	fade_through();
    c4d4:	0c 94 11 4f 	jmp	0x9e22	; 0x9e22 <fade_through>

0000c4d8 <get_net_message>:
		}
	}
}

void get_net_message(u8 use_current_message)
{
    c4d8:	8f 92       	push	r8
    c4da:	9f 92       	push	r9
    c4dc:	af 92       	push	r10
    c4de:	bf 92       	push	r11
    c4e0:	cf 92       	push	r12
    c4e2:	df 92       	push	r13
    c4e4:	ef 92       	push	r14
    c4e6:	ff 92       	push	r15
    c4e8:	0f 93       	push	r16
    c4ea:	1f 93       	push	r17
    c4ec:	cf 93       	push	r28
    c4ee:	df 93       	push	r29
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
	u8 playerHudX = 15;
	u8 otherPlayerHudX = 0;
	player->old_level_score = netMessage->level_score;
    c4f0:	90 91 8e 0f 	lds	r25, 0x0F8E
    c4f4:	90 93 30 0f 	sts	0x0F30, r25
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    c4f8:	90 91 89 0b 	lds	r25, 0x0B89
    c4fc:	2e ef       	ldi	r18, 0xFE	; 254
    c4fe:	29 0f       	add	r18, r25
    c500:	22 30       	cpi	r18, 0x02	; 2
    c502:	08 f0       	brcs	.+2      	; 0xc506 <get_net_message+0x2e>
    c504:	9b c1       	rjmp	.+822    	; 0xc83c <get_net_message+0x364>
	if (game.selection == JOINNETGAME)
    c506:	93 30       	cpi	r25, 0x03	; 3
    c508:	c1 f4       	brne	.+48     	; 0xc53a <get_net_message+0x62>
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
		playerHudX = 0;
		otherPlayerHudX = 15;
		player->old_level_score = netMessage->level_score;
    c50a:	90 91 18 0c 	lds	r25, 0x0C18
    c50e:	90 93 ba 0b 	sts	0x0BBA, r25
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
		playerHudX = 0;
		otherPlayerHudX = 15;
    c512:	5f e0       	ldi	r21, 0x0F	; 15
    c514:	c5 2e       	mov	r12, r21
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
		playerHudX = 0;
    c516:	d1 2c       	mov	r13, r1
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
    c518:	6e e1       	ldi	r22, 0x1E	; 30
    c51a:	e6 2e       	mov	r14, r22
    c51c:	6f e0       	ldi	r22, 0x0F	; 15
    c51e:	f6 2e       	mov	r15, r22
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
    c520:	79 e8       	ldi	r23, 0x89	; 137
    c522:	a7 2e       	mov	r10, r23
    c524:	7f e0       	ldi	r23, 0x0F	; 15
    c526:	b7 2e       	mov	r11, r23
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
    c528:	c3 e1       	ldi	r28, 0x13	; 19
    c52a:	dc e0       	ldi	r29, 0x0C	; 12
	player->old_level_score = netMessage->level_score;
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
    c52c:	e2 e2       	ldi	r30, 0x22	; 34
    c52e:	8e 2e       	mov	r8, r30
    c530:	ec e0       	ldi	r30, 0x0C	; 12
    c532:	9e 2e       	mov	r9, r30
	u8 otherPlayerHudX = 0;
	player->old_level_score = netMessage->level_score;
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
    c534:	08 ea       	ldi	r16, 0xA8	; 168
    c536:	1b e0       	ldi	r17, 0x0B	; 11
    c538:	13 c0       	rjmp	.+38     	; 0xc560 <get_net_message+0x88>
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
	u8 playerHudX = 15;
	u8 otherPlayerHudX = 0;
    c53a:	c1 2c       	mov	r12, r1
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
	u8 playerHudX = 15;
    c53c:	9f e0       	ldi	r25, 0x0F	; 15
    c53e:	d9 2e       	mov	r13, r25
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
    c540:	28 ea       	ldi	r18, 0xA8	; 168
    c542:	e2 2e       	mov	r14, r18
    c544:	2b e0       	ldi	r18, 0x0B	; 11
    c546:	f2 2e       	mov	r15, r18
void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
    c548:	33 e1       	ldi	r19, 0x13	; 19
    c54a:	a3 2e       	mov	r10, r19
    c54c:	3c e0       	ldi	r19, 0x0C	; 12
    c54e:	b3 2e       	mov	r11, r19

void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
    c550:	c9 e8       	ldi	r28, 0x89	; 137
    c552:	df e0       	ldi	r29, 0x0F	; 15
}

void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
    c554:	48 e9       	ldi	r20, 0x98	; 152
    c556:	84 2e       	mov	r8, r20
    c558:	4f e0       	ldi	r20, 0x0F	; 15
    c55a:	94 2e       	mov	r9, r20
	}
}

void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
    c55c:	0e e1       	ldi	r16, 0x1E	; 30
    c55e:	1f e0       	ldi	r17, 0x0F	; 15
		otherPlayer = &player2;
		playerHudX = 0;
		otherPlayerHudX = 15;
		player->old_level_score = netMessage->level_score;
	}
	netMessage->code = NETNODATA;
    c560:	9b e0       	ldi	r25, 0x0B	; 11
    c562:	98 83       	st	Y, r25
	
	if (use_current_message || getNetMessage(netMessage) != WIFI_NODATA)
    c564:	88 23       	and	r24, r24
    c566:	51 f0       	breq	.+20     	; 0xc57c <get_net_message+0xa4>
	{
		if (netMessage->send_ack)
    c568:	89 81       	ldd	r24, Y+1	; 0x01
    c56a:	88 23       	and	r24, r24
    c56c:	81 f0       	breq	.+32     	; 0xc58e <get_net_message+0xb6>
		{
			otherNetMessage->code = NETACK;
    c56e:	8f e0       	ldi	r24, 0x0F	; 15
    c570:	f5 01       	movw	r30, r10
    c572:	80 83       	st	Z, r24
			sendNetMessage(otherNetMessage);
    c574:	c5 01       	movw	r24, r10
    c576:	0e 94 67 4c 	call	0x98ce	; 0x98ce <sendNetMessage>
    c57a:	09 c0       	rjmp	.+18     	; 0xc58e <get_net_message+0xb6>
		otherPlayerHudX = 15;
		player->old_level_score = netMessage->level_score;
	}
	netMessage->code = NETNODATA;
	
	if (use_current_message || getNetMessage(netMessage) != WIFI_NODATA)
    c57c:	ce 01       	movw	r24, r28
    c57e:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <getNetMessage>
    c582:	82 30       	cpi	r24, 0x02	; 2
    c584:	89 f7       	brne	.-30     	; 0xc568 <get_net_message+0x90>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
	}
	else
	{
		state->pressed = 0;
    c586:	f4 01       	movw	r30, r8
    c588:	11 82       	std	Z+1, r1	; 0x01
    c58a:	10 82       	st	Z, r1
    c58c:	57 c1       	rjmp	.+686    	; 0xc83c <get_net_message+0x364>
		{
			otherNetMessage->code = NETACK;
			sendNetMessage(otherNetMessage);
		}
		// Act on message code
		if (netMessage->code == NETNEXTLEVEL) {
    c58e:	98 81       	ld	r25, Y
    c590:	90 31       	cpi	r25, 0x10	; 16
    c592:	71 f5       	brne	.+92     	; 0xc5f0 <get_net_message+0x118>
			LBHideAllSprites();
    c594:	0e 94 50 4c 	call	0x98a0	; 0x98a0 <LBHideAllSprites>
			load_level_tiles(true);
    c598:	81 e0       	ldi	r24, 0x01	; 1
    c59a:	0e 94 03 57 	call	0xae06	; 0xae06 <load_level_tiles>
			if (player1.netMessage.level_score >= player2.netMessage.level_score)
    c59e:	90 91 18 0c 	lds	r25, 0x0C18
    c5a2:	80 91 8e 0f 	lds	r24, 0x0F8E
    c5a6:	98 17       	cp	r25, r24
    c5a8:	28 f0       	brcs	.+10     	; 0xc5b4 <get_net_message+0xdc>
			{
				print_level_score(&player1, &player2);
    c5aa:	6e e1       	ldi	r22, 0x1E	; 30
    c5ac:	7f e0       	ldi	r23, 0x0F	; 15
    c5ae:	88 ea       	ldi	r24, 0xA8	; 168
    c5b0:	9b e0       	ldi	r25, 0x0B	; 11
    c5b2:	04 c0       	rjmp	.+8      	; 0xc5bc <get_net_message+0xe4>
			}
			else
			{
				print_level_score(&player2, &player1);
    c5b4:	68 ea       	ldi	r22, 0xA8	; 168
    c5b6:	7b e0       	ldi	r23, 0x0B	; 11
    c5b8:	8e e1       	ldi	r24, 0x1E	; 30
    c5ba:	9f e0       	ldi	r25, 0x0F	; 15
    c5bc:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <print_level_score>
			}
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    c5c0:	6c e1       	ldi	r22, 0x1C	; 28
    c5c2:	84 e0       	ldi	r24, 0x04	; 4
    c5c4:	90 e0       	ldi	r25, 0x00	; 0
    c5c6:	0e 94 31 4c 	call	0x9862	; 0x9862 <LBWaitSeconds>
			player1.netMessage.level_score = 0;
    c5ca:	10 92 18 0c 	sts	0x0C18, r1
			player2.netMessage.level_score = 0;
    c5ce:	10 92 8e 0f 	sts	0x0F8E, r1
			level_transition(netMessage->object_pos_x);
    c5d2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	else
	{
		state->pressed = 0;
	}
}
    c5d4:	df 91       	pop	r29
    c5d6:	cf 91       	pop	r28
    c5d8:	1f 91       	pop	r17
    c5da:	0f 91       	pop	r16
    c5dc:	ff 90       	pop	r15
    c5de:	ef 90       	pop	r14
    c5e0:	df 90       	pop	r13
    c5e2:	cf 90       	pop	r12
    c5e4:	bf 90       	pop	r11
    c5e6:	af 90       	pop	r10
    c5e8:	9f 90       	pop	r9
    c5ea:	8f 90       	pop	r8
				print_level_score(&player2, &player1);
			}
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			player1.netMessage.level_score = 0;
			player2.netMessage.level_score = 0;
			level_transition(netMessage->object_pos_x);
    c5ec:	0c 94 43 58 	jmp	0xb086	; 0xb086 <level_transition>
		}
		else if (netMessage->code == NETITEMSPEED)
    c5f0:	93 30       	cpi	r25, 0x03	; 3
    c5f2:	b9 f4       	brne	.+46     	; 0xc622 <get_net_message+0x14a>
		{
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c5f4:	eb 81       	ldd	r30, Y+3	; 0x03
    c5f6:	8e e1       	ldi	r24, 0x1E	; 30
    c5f8:	e8 9f       	mul	r30, r24
    c5fa:	f0 01       	movw	r30, r0
    c5fc:	11 24       	eor	r1, r1
    c5fe:	8a 81       	ldd	r24, Y+2	; 0x02
    c600:	e1 5d       	subi	r30, 0xD1	; 209
    c602:	f3 4f       	sbci	r31, 0xF3	; 243
    c604:	e8 0f       	add	r30, r24
    c606:	f1 1d       	adc	r31, r1
    c608:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c60a:	84 e6       	ldi	r24, 0x64	; 100
    c60c:	99 e1       	ldi	r25, 0x19	; 25
    c60e:	f8 01       	movw	r30, r16
    c610:	94 87       	std	Z+12, r25	; 0x0c
    c612:	83 87       	std	Z+11, r24	; 0x0b
			player->has_over_speed = true;
    c614:	81 e0       	ldi	r24, 0x01	; 1
    c616:	86 87       	std	Z+14, r24	; 0x0e
			DrawMap2(playerHudX+10, 1, map_speed_itm);
    c618:	4d eb       	ldi	r20, 0xBD	; 189
    c61a:	5a e6       	ldi	r21, 0x6A	; 106
    c61c:	61 e0       	ldi	r22, 0x01	; 1
    c61e:	8a e0       	ldi	r24, 0x0A	; 10
    c620:	14 c0       	rjmp	.+40     	; 0xc64a <get_net_message+0x172>
			SetTile(netMessage->object_pos_x, netMessage->object_pos_y, 0);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
		}
		else if (netMessage->code == NETITEMROCKET)
    c622:	94 30       	cpi	r25, 0x04	; 4
    c624:	e9 f4       	brne	.+58     	; 0xc660 <get_net_message+0x188>
		{
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c626:	eb 81       	ldd	r30, Y+3	; 0x03
    c628:	8e e1       	ldi	r24, 0x1E	; 30
    c62a:	e8 9f       	mul	r30, r24
    c62c:	f0 01       	movw	r30, r0
    c62e:	11 24       	eor	r1, r1
    c630:	8a 81       	ldd	r24, Y+2	; 0x02
    c632:	e1 5d       	subi	r30, 0xD1	; 209
    c634:	f3 4f       	sbci	r31, 0xF3	; 243
    c636:	e8 0f       	add	r30, r24
    c638:	f1 1d       	adc	r31, r1
    c63a:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c63c:	81 e0       	ldi	r24, 0x01	; 1
    c63e:	f8 01       	movw	r30, r16
    c640:	85 87       	std	Z+13, r24	; 0x0d
			DrawMap2(playerHudX+11, 1, map_rocket_itm);
    c642:	47 eb       	ldi	r20, 0xB7	; 183
    c644:	5a e6       	ldi	r21, 0x6A	; 106
    c646:	61 e0       	ldi	r22, 0x01	; 1
    c648:	8b e0       	ldi	r24, 0x0B	; 11
    c64a:	8d 0d       	add	r24, r13
    c64c:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
			SetTile(netMessage->object_pos_x, netMessage->object_pos_y, 0);
    c650:	40 e0       	ldi	r20, 0x00	; 0
    c652:	50 e0       	ldi	r21, 0x00	; 0
    c654:	6b 81       	ldd	r22, Y+3	; 0x03
    c656:	8a 81       	ldd	r24, Y+2	; 0x02
    c658:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
    c65c:	22 e0       	ldi	r18, 0x02	; 2
    c65e:	da c0       	rjmp	.+436    	; 0xc814 <get_net_message+0x33c>
		}
		else if (netMessage->code == NETTURRETHIT)
    c660:	9c 30       	cpi	r25, 0x0C	; 12
    c662:	c1 f4       	brne	.+48     	; 0xc694 <get_net_message+0x1bc>
		{
			if (netMessage->object_pos_x == 1)
    c664:	9a 81       	ldd	r25, Y+2	; 0x02
    c666:	8b 81       	ldd	r24, Y+3	; 0x03
    c668:	91 30       	cpi	r25, 0x01	; 1
    c66a:	19 f4       	brne	.+6      	; 0xc672 <get_net_message+0x19a>
			{
				turret1.lives = netMessage->object_pos_y;
    c66c:	80 93 f8 0f 	sts	0x0FF8, r24
    c670:	02 c0       	rjmp	.+4      	; 0xc676 <get_net_message+0x19e>
				
			}
			else
			{
				turret2.lives = netMessage->object_pos_y;
    c672:	80 93 c9 0f 	sts	0x0FC9, r24
			}
			init_shot_state(&game.boss_fight_player->shot[0], game.boss_fight_player->shot[0].shot_type);
    c676:	80 91 85 0b 	lds	r24, 0x0B85
    c67a:	90 91 86 0b 	lds	r25, 0x0B86
    c67e:	fc 01       	movw	r30, r24
    c680:	61 a5       	ldd	r22, Z+41	; 0x29
    c682:	81 96       	adiw	r24, 0x21	; 33
    c684:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
			game.boss_fight_player->active_shots = 0;
    c688:	e0 91 85 0b 	lds	r30, 0x0B85
    c68c:	f0 91 86 0b 	lds	r31, 0x0B86
    c690:	14 82       	std	Z+4, r1	; 0x04
    c692:	59 c0       	rjmp	.+178    	; 0xc746 <get_net_message+0x26e>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage->code == NETPAUSE)
    c694:	97 30       	cpi	r25, 0x07	; 7
    c696:	69 f4       	brne	.+26     	; 0xc6b2 <get_net_message+0x1da>
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    c698:	24 e0       	ldi	r18, 0x04	; 4
    c69a:	40 91 8f 0f 	lds	r20, 0x0F8F
    c69e:	60 91 19 0c 	lds	r22, 0x0C19
    c6a2:	80 91 89 0b 	lds	r24, 0x0B89
    c6a6:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
			game.paused = 1;
    c6aa:	81 e0       	ldi	r24, 0x01	; 1
    c6ac:	80 93 78 0b 	sts	0x0B78, r24
    c6b0:	0d c0       	rjmp	.+26     	; 0xc6cc <get_net_message+0x1f4>
			load_level_tiles(false);
		}
		else if (netMessage->code == NETRESUME)
    c6b2:	9d 30       	cpi	r25, 0x0D	; 13
    c6b4:	d1 f4       	brne	.+52     	; 0xc6ea <get_net_message+0x212>
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    c6b6:	24 e0       	ldi	r18, 0x04	; 4
    c6b8:	40 91 8f 0f 	lds	r20, 0x0F8F
    c6bc:	60 91 19 0c 	lds	r22, 0x0C19
    c6c0:	80 91 89 0b 	lds	r24, 0x0B89
    c6c4:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
			game.paused = 0;
    c6c8:	10 92 78 0b 	sts	0x0B78, r1
			load_level_tiles(false);
    c6cc:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		state->pressed = 0;
	}
}
    c6ce:	df 91       	pop	r29
    c6d0:	cf 91       	pop	r28
    c6d2:	1f 91       	pop	r17
    c6d4:	0f 91       	pop	r16
    c6d6:	ff 90       	pop	r15
    c6d8:	ef 90       	pop	r14
    c6da:	df 90       	pop	r13
    c6dc:	cf 90       	pop	r12
    c6de:	bf 90       	pop	r11
    c6e0:	af 90       	pop	r10
    c6e2:	9f 90       	pop	r9
    c6e4:	8f 90       	pop	r8
		}
		else if (netMessage->code == NETRESUME)
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
			game.paused = 0;
			load_level_tiles(false);
    c6e6:	0c 94 03 57 	jmp	0xae06	; 0xae06 <load_level_tiles>
		}
		else if (netMessage->code == NETHIT)
    c6ea:	91 11       	cpse	r25, r1
    c6ec:	18 c0       	rjmp	.+48     	; 0xc71e <get_net_message+0x246>
		{
			init_shot_state(&otherPlayer->shot[0], otherPlayer->shot[0].shot_type);
    c6ee:	f7 01       	movw	r30, r14
    c6f0:	61 a5       	ldd	r22, Z+41	; 0x29
    c6f2:	c7 01       	movw	r24, r14
    c6f4:	81 96       	adiw	r24, 0x21	; 33
    c6f6:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
			otherPlayer->active_shots = 0;
    c6fa:	f7 01       	movw	r30, r14
    c6fc:	14 82       	std	Z+4, r1	; 0x04
			otherPlayer->netMessage.level_score++;
    c6fe:	e0 59       	subi	r30, 0x90	; 144
    c700:	ff 4f       	sbci	r31, 0xFF	; 255
    c702:	80 81       	ld	r24, Z
    c704:	8f 5f       	subi	r24, 0xFF	; 255
    c706:	80 83       	st	Z, r24
			otherPlayer->netMessage.score++;
    c708:	31 97       	sbiw	r30, 0x01	; 1
    c70a:	80 81       	ld	r24, Z
    c70c:	8f 5f       	subi	r24, 0xFF	; 255
    c70e:	80 83       	st	Z, r24
			render_score(otherPlayer, otherPlayerHudX);
    c710:	6c 2d       	mov	r22, r12
    c712:	c7 01       	movw	r24, r14
    c714:	0e 94 c8 50 	call	0xa190	; 0xa190 <render_score>
			kill_player(player, playerHudX);
    c718:	6d 2d       	mov	r22, r13
    c71a:	c8 01       	movw	r24, r16
    c71c:	12 c0       	rjmp	.+36     	; 0xc742 <get_net_message+0x26a>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage->code == NETHITBYTURRET)
    c71e:	91 30       	cpi	r25, 0x01	; 1
    c720:	09 f5       	brne	.+66     	; 0xc764 <get_net_message+0x28c>
		{
			game.boss_fight_player_lives--;
    c722:	80 91 7b 0b 	lds	r24, 0x0B7B
    c726:	81 50       	subi	r24, 0x01	; 1
    c728:	80 93 7b 0b 	sts	0x0B7B, r24
			if (game.boss_fight_player_lives <= 0)
    c72c:	81 11       	cpse	r24, r1
    c72e:	03 c0       	rjmp	.+6      	; 0xc736 <get_net_message+0x25e>
			{
				game.boss_fight_status = BOSS_FIGHT_LOST;
    c730:	80 e1       	ldi	r24, 0x10	; 16
    c732:	80 93 79 0b 	sts	0x0B79, r24
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    c736:	60 91 7a 0b 	lds	r22, 0x0B7A
    c73a:	80 91 85 0b 	lds	r24, 0x0B85
    c73e:	90 91 86 0b 	lds	r25, 0x0B86
    c742:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    c746:	86 e0       	ldi	r24, 0x06	; 6
	}
	else
	{
		state->pressed = 0;
	}
}
    c748:	df 91       	pop	r29
    c74a:	cf 91       	pop	r28
    c74c:	1f 91       	pop	r17
    c74e:	0f 91       	pop	r16
    c750:	ff 90       	pop	r15
    c752:	ef 90       	pop	r14
    c754:	df 90       	pop	r13
    c756:	cf 90       	pop	r12
    c758:	bf 90       	pop	r11
    c75a:	af 90       	pop	r10
    c75c:	9f 90       	pop	r9
    c75e:	8f 90       	pop	r8
    c760:	0c 94 7e 49 	jmp	0x92fc	; 0x92fc <LBPlaySound.part.5>
				game.boss_fight_status = BOSS_FIGHT_LOST;
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage->code == NETITEMBOMB)
    c764:	95 30       	cpi	r25, 0x05	; 5
    c766:	59 f5       	brne	.+86     	; 0xc7be <get_net_message+0x2e6>
		{
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c768:	6b 81       	ldd	r22, Y+3	; 0x03
    c76a:	8a 81       	ldd	r24, Y+2	; 0x02
    c76c:	9e e1       	ldi	r25, 0x1E	; 30
    c76e:	69 9f       	mul	r22, r25
    c770:	f0 01       	movw	r30, r0
    c772:	11 24       	eor	r1, r1
    c774:	e1 5d       	subi	r30, 0xD1	; 209
    c776:	f3 4f       	sbci	r31, 0xF3	; 243
    c778:	e8 0f       	add	r30, r24
    c77a:	f1 1d       	adc	r31, r1
    c77c:	11 82       	std	Z+1, r1	; 0x01
			SetTile(netMessage->object_pos_x, netMessage->object_pos_y, 0);
    c77e:	40 e0       	ldi	r20, 0x00	; 0
    c780:	50 e0       	ldi	r21, 0x00	; 0
    c782:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
			if (!(otherPlayer->netMessage.flags & EXPLODING_FLAG))
    c786:	f7 01       	movw	r30, r14
    c788:	ef 58       	subi	r30, 0x8F	; 143
    c78a:	ff 4f       	sbci	r31, 0xFF	; 255
    c78c:	80 81       	ld	r24, Z
    c78e:	80 fd       	sbrc	r24, 0
    c790:	07 c0       	rjmp	.+14     	; 0xc7a0 <get_net_message+0x2c8>
			{
				kill_player(otherPlayer, otherPlayerHudX);
    c792:	6c 2d       	mov	r22, r12
    c794:	c7 01       	movw	r24, r14
    c796:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    c79a:	86 e0       	ldi	r24, 0x06	; 6
    c79c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <LBPlaySound.part.5>
				LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
			}
			player->netMessage.level_score++;
    c7a0:	f8 01       	movw	r30, r16
    c7a2:	e0 59       	subi	r30, 0x90	; 144
    c7a4:	ff 4f       	sbci	r31, 0xFF	; 255
    c7a6:	80 81       	ld	r24, Z
    c7a8:	8f 5f       	subi	r24, 0xFF	; 255
    c7aa:	80 83       	st	Z, r24
			player->netMessage.score++;
    c7ac:	31 97       	sbiw	r30, 0x01	; 1
    c7ae:	80 81       	ld	r24, Z
    c7b0:	8f 5f       	subi	r24, 0xFF	; 255
    c7b2:	80 83       	st	Z, r24
			render_score(player, playerHudX);
    c7b4:	6d 2d       	mov	r22, r13
    c7b6:	c8 01       	movw	r24, r16
    c7b8:	0e 94 c8 50 	call	0xa190	; 0xa190 <render_score>
    c7bc:	4f cf       	rjmp	.-354    	; 0xc65c <get_net_message+0x184>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
		}
		else if (netMessage->code == NETBLOCKHIT)
    c7be:	9e 30       	cpi	r25, 0x0E	; 14
    c7c0:	31 f5       	brne	.+76     	; 0xc80e <get_net_message+0x336>
		{
			explode_tile(&tile_animations, netMessage->object_pos_y * 30 + netMessage->object_pos_x);
    c7c2:	8b 81       	ldd	r24, Y+3	; 0x03
    c7c4:	6a 81       	ldd	r22, Y+2	; 0x02
    c7c6:	70 e0       	ldi	r23, 0x00	; 0
    c7c8:	ee e1       	ldi	r30, 0x1E	; 30
    c7ca:	8e 9f       	mul	r24, r30
    c7cc:	60 0d       	add	r22, r0
    c7ce:	71 1d       	adc	r23, r1
    c7d0:	11 24       	eor	r1, r1
    c7d2:	8a e8       	ldi	r24, 0x8A	; 138
    c7d4:	9b e0       	ldi	r25, 0x0B	; 11
    c7d6:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <explode_tile>
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c7da:	eb 81       	ldd	r30, Y+3	; 0x03
    c7dc:	8e e1       	ldi	r24, 0x1E	; 30
    c7de:	e8 9f       	mul	r30, r24
    c7e0:	f0 01       	movw	r30, r0
    c7e2:	11 24       	eor	r1, r1
    c7e4:	8a 81       	ldd	r24, Y+2	; 0x02
    c7e6:	e1 5d       	subi	r30, 0xD1	; 209
    c7e8:	f3 4f       	sbci	r31, 0xF3	; 243
    c7ea:	e8 0f       	add	r30, r24
    c7ec:	f1 1d       	adc	r31, r1
    c7ee:	11 82       	std	Z+1, r1	; 0x01
			player->shot[0].hit_count--;
    c7f0:	f8 01       	movw	r30, r16
    c7f2:	82 a5       	ldd	r24, Z+42	; 0x2a
    c7f4:	81 50       	subi	r24, 0x01	; 1
    c7f6:	82 a7       	std	Z+42, r24	; 0x2a
			if (player->shot[0].hit_count <= 0)
    c7f8:	81 11       	cpse	r24, r1
    c7fa:	07 c0       	rjmp	.+14     	; 0xc80a <get_net_message+0x332>
			{
				init_shot_state(&player->shot[0], player->shot[0].shot_type);
    c7fc:	61 a5       	ldd	r22, Z+41	; 0x29
    c7fe:	c8 01       	movw	r24, r16
    c800:	81 96       	adiw	r24, 0x21	; 33
    c802:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
				player->active_shots = 0;
    c806:	f8 01       	movw	r30, r16
    c808:	14 82       	std	Z+4, r1	; 0x04
			}
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_BRICK_EXPLODE);
    c80a:	20 e0       	ldi	r18, 0x00	; 0
    c80c:	03 c0       	rjmp	.+6      	; 0xc814 <get_net_message+0x33c>
		}
		else if (netMessage->code == NETHANDLESELECT)
    c80e:	99 30       	cpi	r25, 0x09	; 9
    c810:	a9 f4       	brne	.+42     	; 0xc83c <get_net_message+0x364>
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    c812:	24 e0       	ldi	r18, 0x04	; 4
    c814:	40 91 8f 0f 	lds	r20, 0x0F8F
    c818:	60 91 19 0c 	lds	r22, 0x0C19
    c81c:	80 91 89 0b 	lds	r24, 0x0B89
	}
	else
	{
		state->pressed = 0;
	}
}
    c820:	df 91       	pop	r29
    c822:	cf 91       	pop	r28
    c824:	1f 91       	pop	r17
    c826:	0f 91       	pop	r16
    c828:	ff 90       	pop	r15
    c82a:	ef 90       	pop	r14
    c82c:	df 90       	pop	r13
    c82e:	cf 90       	pop	r12
    c830:	bf 90       	pop	r11
    c832:	af 90       	pop	r10
    c834:	9f 90       	pop	r9
    c836:	8f 90       	pop	r8
			}
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_BRICK_EXPLODE);
		}
		else if (netMessage->code == NETHANDLESELECT)
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    c838:	0c 94 5a 4c 	jmp	0x98b4	; 0x98b4 <LBPlaySound>
	}
	else
	{
		state->pressed = 0;
	}
}
    c83c:	df 91       	pop	r29
    c83e:	cf 91       	pop	r28
    c840:	1f 91       	pop	r17
    c842:	0f 91       	pop	r16
    c844:	ff 90       	pop	r15
    c846:	ef 90       	pop	r14
    c848:	df 90       	pop	r13
    c84a:	cf 90       	pop	r12
    c84c:	bf 90       	pop	r11
    c84e:	af 90       	pop	r10
    c850:	9f 90       	pop	r9
    c852:	8f 90       	pop	r8
    c854:	08 95       	ret

0000c856 <send_net_message>:
		send_net_message(code, 0, 0, acknowlege);
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y, u8 acknowledge)
{	
    c856:	ff 92       	push	r15
    c858:	0f 93       	push	r16
    c85a:	1f 93       	push	r17
    c85c:	cf 93       	push	r28
    c85e:	df 93       	push	r29
	NetMessage* netMessage = &player1.netMessage;
	NetMessage* otherNetMessage = &player2.netMessage;
	u8 counter = 0;
	u8 result = 0;
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    c860:	90 91 89 0b 	lds	r25, 0x0B89
    c864:	3e ef       	ldi	r19, 0xFE	; 254
    c866:	39 0f       	add	r19, r25
    c868:	32 30       	cpi	r19, 0x02	; 2
    c86a:	c8 f5       	brcc	.+114    	; 0xc8de <send_net_message+0x88>
	if (game.selection == JOINNETGAME)
    c86c:	93 30       	cpi	r25, 0x03	; 3
    c86e:	29 f4       	brne	.+10     	; 0xc87a <send_net_message+0x24>
	{
		netMessage = &player2.netMessage;
		otherNetMessage = &player1.netMessage;
    c870:	03 e1       	ldi	r16, 0x13	; 19
    c872:	1c e0       	ldi	r17, 0x0C	; 12
	u8 result = 0;
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		netMessage = &player2.netMessage;
    c874:	c9 e8       	ldi	r28, 0x89	; 137
    c876:	df e0       	ldi	r29, 0x0F	; 15
    c878:	04 c0       	rjmp	.+8      	; 0xc882 <send_net_message+0x2c>
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y, u8 acknowledge)
{	
	NetMessage* netMessage = &player1.netMessage;
	NetMessage* otherNetMessage = &player2.netMessage;
    c87a:	09 e8       	ldi	r16, 0x89	; 137
    c87c:	1f e0       	ldi	r17, 0x0F	; 15
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y, u8 acknowledge)
{	
	NetMessage* netMessage = &player1.netMessage;
    c87e:	c3 e1       	ldi	r28, 0x13	; 19
    c880:	dc e0       	ldi	r29, 0x0C	; 12
    c882:	f2 2e       	mov	r15, r18
	if (game.selection == JOINNETGAME)
	{
		netMessage = &player2.netMessage;
		otherNetMessage = &player1.netMessage;
	}
	netMessage->code = code;
    c884:	88 83       	st	Y, r24
	netMessage->send_ack = acknowledge;
    c886:	29 83       	std	Y+1, r18	; 0x01
	netMessage->object_pos_x = object_pos_x;
    c888:	6a 83       	std	Y+2, r22	; 0x02
	netMessage->object_pos_y = object_pos_y;
    c88a:	4b 83       	std	Y+3, r20	; 0x03
	sendNetMessage(netMessage);
    c88c:	ce 01       	movw	r24, r28
    c88e:	0e 94 67 4c 	call	0x98ce	; 0x98ce <sendNetMessage>
    if (acknowledge)
    c892:	ff 20       	and	r15, r15
    c894:	21 f1       	breq	.+72     	; 0xc8de <send_net_message+0x88>
	{
		result = getNetMessage(otherNetMessage);
    c896:	c8 01       	movw	r24, r16
    c898:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <getNetMessage>

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y, u8 acknowledge)
{	
	NetMessage* netMessage = &player1.netMessage;
	NetMessage* otherNetMessage = &player2.netMessage;
	u8 counter = 0;
    c89c:	f1 2c       	mov	r15, r1
	netMessage->object_pos_y = object_pos_y;
	sendNetMessage(netMessage);
    if (acknowledge)
	{
		result = getNetMessage(otherNetMessage);
		while (result == WIFI_NODATA || otherNetMessage->code != NETACK)
    c89e:	82 30       	cpi	r24, 0x02	; 2
    c8a0:	d1 f4       	brne	.+52     	; 0xc8d6 <send_net_message+0x80>
		{
			if (otherNetMessage->send_ack && result != WIFI_NODATA)
    c8a2:	f8 01       	movw	r30, r16
    c8a4:	91 81       	ldd	r25, Z+1	; 0x01
    c8a6:	99 23       	and	r25, r25
    c8a8:	31 f0       	breq	.+12     	; 0xc8b6 <send_net_message+0x60>
    c8aa:	82 30       	cpi	r24, 0x02	; 2
    c8ac:	21 f0       	breq	.+8      	; 0xc8b6 <send_net_message+0x60>
			{
				get_net_message(1);
    c8ae:	81 e0       	ldi	r24, 0x01	; 1
    c8b0:	0e 94 6c 62 	call	0xc4d8	; 0xc4d8 <get_net_message>
    c8b4:	0c c0       	rjmp	.+24     	; 0xc8ce <send_net_message+0x78>
			}
			else
			{
				WaitVsync(1);
    c8b6:	81 e0       	ldi	r24, 0x01	; 1
    c8b8:	90 e0       	ldi	r25, 0x00	; 0
    c8ba:	0e 94 24 49 	call	0x9248	; 0x9248 <WaitVsync>
				counter++;
    c8be:	f3 94       	inc	r15
				if (counter > 60)
    c8c0:	fc e3       	ldi	r31, 0x3C	; 60
    c8c2:	ff 15       	cp	r31, r15
    c8c4:	20 f4       	brcc	.+8      	; 0xc8ce <send_net_message+0x78>
				{
					sendNetMessage(netMessage);
    c8c6:	ce 01       	movw	r24, r28
    c8c8:	0e 94 67 4c 	call	0x98ce	; 0x98ce <sendNetMessage>
					counter = 0;
    c8cc:	f1 2c       	mov	r15, r1
				}
			}
			result = getNetMessage(otherNetMessage);
    c8ce:	c8 01       	movw	r24, r16
    c8d0:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <getNetMessage>
    c8d4:	e4 cf       	rjmp	.-56     	; 0xc89e <send_net_message+0x48>
	netMessage->object_pos_y = object_pos_y;
	sendNetMessage(netMessage);
    if (acknowledge)
	{
		result = getNetMessage(otherNetMessage);
		while (result == WIFI_NODATA || otherNetMessage->code != NETACK)
    c8d6:	f8 01       	movw	r30, r16
    c8d8:	90 81       	ld	r25, Z
    c8da:	9f 30       	cpi	r25, 0x0F	; 15
    c8dc:	11 f7       	brne	.-60     	; 0xc8a2 <send_net_message+0x4c>
				}
			}
			result = getNetMessage(otherNetMessage);
		}
	}
}
    c8de:	df 91       	pop	r29
    c8e0:	cf 91       	pop	r28
    c8e2:	1f 91       	pop	r17
    c8e4:	0f 91       	pop	r16
    c8e6:	ff 90       	pop	r15
    c8e8:	08 95       	ret

0000c8ea <send_smart_net_message>:
} 
#endif


void send_smart_net_message(Player* player, JoyPadState* p, u8 code, u8 acknowlege)
{
    c8ea:	54 2f       	mov	r21, r20
	if (game.selection == HOSTNETGAME && player == &player1)
    c8ec:	30 91 89 0b 	lds	r19, 0x0B89
    c8f0:	32 30       	cpi	r19, 0x02	; 2
    c8f2:	41 f4       	brne	.+16     	; 0xc904 <send_smart_net_message+0x1a>
    c8f4:	88 5a       	subi	r24, 0xA8	; 168
    c8f6:	9b 40       	sbci	r25, 0x0B	; 11
    c8f8:	51 f4       	brne	.+20     	; 0xc90e <send_smart_net_message+0x24>
	{
		send_net_message(code, 0, 0, acknowlege);
    c8fa:	40 e0       	ldi	r20, 0x00	; 0
    c8fc:	60 e0       	ldi	r22, 0x00	; 0
    c8fe:	85 2f       	mov	r24, r21
    c900:	0c 94 2b 64 	jmp	0xc856	; 0xc856 <send_net_message>
	}
	else if (game.selection == JOINNETGAME && player == &player2)
    c904:	33 30       	cpi	r19, 0x03	; 3
    c906:	19 f4       	brne	.+6      	; 0xc90e <send_smart_net_message+0x24>
    c908:	8e 51       	subi	r24, 0x1E	; 30
    c90a:	9f 40       	sbci	r25, 0x0F	; 15
    c90c:	b1 f3       	breq	.-20     	; 0xc8fa <send_smart_net_message+0x10>
    c90e:	08 95       	ret

0000c910 <is_net_player>:
		state->pressed = 0;
	}
}

u8 is_net_player(Player* player)
{
    c910:	9c 01       	movw	r18, r24
	if (game.selection == HOSTNETGAME && player == &player2) return 1;
    c912:	80 91 89 0b 	lds	r24, 0x0B89
    c916:	82 30       	cpi	r24, 0x02	; 2
    c918:	29 f4       	brne	.+10     	; 0xc924 <is_net_player+0x14>
    c91a:	81 e0       	ldi	r24, 0x01	; 1
    c91c:	2e 51       	subi	r18, 0x1E	; 30
    c91e:	3f 40       	sbci	r19, 0x0F	; 15
    c920:	39 f4       	brne	.+14     	; 0xc930 <is_net_player+0x20>
    c922:	07 c0       	rjmp	.+14     	; 0xc932 <is_net_player+0x22>
	if (game.selection == JOINNETGAME && player == &player1) return 1;
    c924:	83 30       	cpi	r24, 0x03	; 3
    c926:	21 f4       	brne	.+8      	; 0xc930 <is_net_player+0x20>
    c928:	81 e0       	ldi	r24, 0x01	; 1
    c92a:	28 5a       	subi	r18, 0xA8	; 168
    c92c:	3b 40       	sbci	r19, 0x0B	; 11
    c92e:	09 f0       	breq	.+2      	; 0xc932 <is_net_player+0x22>
	return 0;
    c930:	80 e0       	ldi	r24, 0x00	; 0
}
    c932:	08 95       	ret

0000c934 <resolve_scoring>:
		}
	}
}

void resolve_scoring()
{
    c934:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    c936:	c0 91 77 0b 	lds	r28, 0x0B77
    c93a:	80 91 18 0c 	lds	r24, 0x0C18
    c93e:	ca 30       	cpi	r28, 0x0A	; 10
    c940:	08 f0       	brcs	.+2      	; 0xc944 <resolve_scoring+0x10>
    c942:	43 c0       	rjmp	.+134    	; 0xc9ca <resolve_scoring+0x96>
	{
		if (player1.netMessage.level_score >= MAX_LEVEL_SCORE && !is_net_player(&player1))
    c944:	8a 30       	cpi	r24, 0x0A	; 10
    c946:	b8 f0       	brcs	.+46     	; 0xc976 <resolve_scoring+0x42>
    c948:	88 ea       	ldi	r24, 0xA8	; 168
    c94a:	9b e0       	ldi	r25, 0x0B	; 11
    c94c:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    c950:	81 11       	cpse	r24, r1
    c952:	11 c0       	rjmp	.+34     	; 0xc976 <resolve_scoring+0x42>
		{
			next_level = game.current_level + 1;
    c954:	cf 5f       	subi	r28, 0xFF	; 255
			send_net_message(NETNEXTLEVEL, next_level, 0, 1);
    c956:	21 e0       	ldi	r18, 0x01	; 1
    c958:	40 e0       	ldi	r20, 0x00	; 0
    c95a:	6c 2f       	mov	r22, r28
    c95c:	80 e1       	ldi	r24, 0x10	; 16
    c95e:	0e 94 2b 64 	call	0xc856	; 0xc856 <send_net_message>
			LBHideAllSprites();
    c962:	0e 94 50 4c 	call	0x98a0	; 0x98a0 <LBHideAllSprites>
			load_level_tiles(true);
    c966:	81 e0       	ldi	r24, 0x01	; 1
    c968:	0e 94 03 57 	call	0xae06	; 0xae06 <load_level_tiles>
			print_level_score(&player1, &player2);
    c96c:	6e e1       	ldi	r22, 0x1E	; 30
    c96e:	7f e0       	ldi	r23, 0x0F	; 15
    c970:	88 ea       	ldi	r24, 0xA8	; 168
    c972:	9b e0       	ldi	r25, 0x0B	; 11
    c974:	1b c0       	rjmp	.+54     	; 0xc9ac <resolve_scoring+0x78>
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			player1.netMessage.level_score = 0;
			player2.netMessage.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.netMessage.level_score >= MAX_LEVEL_SCORE && !is_net_player(&player2))
    c976:	80 91 8e 0f 	lds	r24, 0x0F8E
    c97a:	8a 30       	cpi	r24, 0x0A	; 10
    c97c:	08 f4       	brcc	.+2      	; 0xc980 <resolve_scoring+0x4c>
    c97e:	b5 c0       	rjmp	.+362    	; 0xcaea <resolve_scoring+0x1b6>
    c980:	8e e1       	ldi	r24, 0x1E	; 30
    c982:	9f e0       	ldi	r25, 0x0F	; 15
    c984:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    c988:	81 11       	cpse	r24, r1
    c98a:	af c0       	rjmp	.+350    	; 0xcaea <resolve_scoring+0x1b6>
		{
			next_level = game.current_level + 1;
    c98c:	cf 5f       	subi	r28, 0xFF	; 255
			send_net_message(NETNEXTLEVEL, next_level, 0, 1);
    c98e:	21 e0       	ldi	r18, 0x01	; 1
    c990:	40 e0       	ldi	r20, 0x00	; 0
    c992:	6c 2f       	mov	r22, r28
    c994:	80 e1       	ldi	r24, 0x10	; 16
    c996:	0e 94 2b 64 	call	0xc856	; 0xc856 <send_net_message>
			LBHideAllSprites();
    c99a:	0e 94 50 4c 	call	0x98a0	; 0x98a0 <LBHideAllSprites>
			load_level_tiles(true);
    c99e:	81 e0       	ldi	r24, 0x01	; 1
    c9a0:	0e 94 03 57 	call	0xae06	; 0xae06 <load_level_tiles>
			print_level_score(&player2, &player1);
    c9a4:	68 ea       	ldi	r22, 0xA8	; 168
    c9a6:	7b e0       	ldi	r23, 0x0B	; 11
    c9a8:	8e e1       	ldi	r24, 0x1E	; 30
    c9aa:	9f e0       	ldi	r25, 0x0F	; 15
    c9ac:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    c9b0:	6c e1       	ldi	r22, 0x1C	; 28
    c9b2:	84 e0       	ldi	r24, 0x04	; 4
    c9b4:	90 e0       	ldi	r25, 0x00	; 0
    c9b6:	0e 94 31 4c 	call	0x9862	; 0x9862 <LBWaitSeconds>
			player1.netMessage.level_score = 0;
    c9ba:	10 92 18 0c 	sts	0x0C18, r1
			player2.netMessage.level_score = 0;
    c9be:	10 92 8e 0f 	sts	0x0F8E, r1
			level_transition(next_level);
    c9c2:	8c 2f       	mov	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			exit_game();
		}
	}
}
    c9c4:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			player1.netMessage.level_score = 0;
			player2.netMessage.level_score = 0;
			level_transition(next_level);
    c9c6:	0c 94 43 58 	jmp	0xb086	; 0xb086 <level_transition>
		}
	}
	else
	{
		if ((player1.netMessage.level_score >= MAX_LEVEL_SCORE) || (player2.netMessage.level_score >= MAX_LEVEL_SCORE))
    c9ca:	8a 30       	cpi	r24, 0x0A	; 10
    c9cc:	28 f4       	brcc	.+10     	; 0xc9d8 <resolve_scoring+0xa4>
    c9ce:	80 91 8e 0f 	lds	r24, 0x0F8E
    c9d2:	8a 30       	cpi	r24, 0x0A	; 10
    c9d4:	08 f4       	brcc	.+2      	; 0xc9d8 <resolve_scoring+0xa4>
    c9d6:	89 c0       	rjmp	.+274    	; 0xcaea <resolve_scoring+0x1b6>
		{
			// Tie Breaker
			if (player1.netMessage.score == player2.netMessage.score) return;
    c9d8:	90 91 17 0c 	lds	r25, 0x0C17
    c9dc:	80 91 8d 0f 	lds	r24, 0x0F8D
    c9e0:	98 17       	cp	r25, r24
    c9e2:	09 f4       	brne	.+2      	; 0xc9e6 <resolve_scoring+0xb2>
    c9e4:	82 c0       	rjmp	.+260    	; 0xcaea <resolve_scoring+0x1b6>
			
			if (game.boss_fight_status == 0)
    c9e6:	20 91 79 0b 	lds	r18, 0x0B79
    c9ea:	21 11       	cpse	r18, r1
    c9ec:	46 c0       	rjmp	.+140    	; 0xca7a <resolve_scoring+0x146>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    c9ee:	c1 e0       	ldi	r28, 0x01	; 1
    c9f0:	c0 93 79 0b 	sts	0x0B79, r28
				if (player1.netMessage.score > player2.netMessage.score)
    c9f4:	89 17       	cp	r24, r25
    c9f6:	e8 f4       	brcc	.+58     	; 0xca32 <resolve_scoring+0xfe>
				{
					game.boss_fight_player = &player1;
    c9f8:	88 ea       	ldi	r24, 0xA8	; 168
    c9fa:	9b e0       	ldi	r25, 0x0B	; 11
    c9fc:	90 93 86 0b 	sts	0x0B86, r25
    ca00:	80 93 85 0b 	sts	0x0B85, r24
					game.boss_fight_joypad = &player1.netMessage.joyPadState;
    ca04:	82 e2       	ldi	r24, 0x22	; 34
    ca06:	9c e0       	ldi	r25, 0x0C	; 12
    ca08:	90 93 88 0b 	sts	0x0B88, r25
    ca0c:	80 93 87 0b 	sts	0x0B87, r24
					game.boss_fight_player_hud = 0;
    ca10:	10 92 7a 0b 	sts	0x0B7A, r1
					kill_player(&player2, 15);
    ca14:	6f e0       	ldi	r22, 0x0F	; 15
    ca16:	8e e1       	ldi	r24, 0x1E	; 30
    ca18:	9f e0       	ldi	r25, 0x0F	; 15
    ca1a:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
					player_spawn(&player2);
    ca1e:	8e e1       	ldi	r24, 0x1E	; 30
    ca20:	9f e0       	ldi	r25, 0x0F	; 15
    ca22:	0e 94 d7 4e 	call	0x9dae	; 0x9dae <player_spawn>
					player2.netMessage.flags = player2.netMessage.flags ^ EXPLODING_FLAG;
    ca26:	80 91 8f 0f 	lds	r24, 0x0F8F
    ca2a:	c8 27       	eor	r28, r24
    ca2c:	c0 93 8f 0f 	sts	0x0F8F, r28
    ca30:	1d c0       	rjmp	.+58     	; 0xca6c <resolve_scoring+0x138>
				}
				else
				{
					game.boss_fight_player = &player2;
    ca32:	8e e1       	ldi	r24, 0x1E	; 30
    ca34:	9f e0       	ldi	r25, 0x0F	; 15
    ca36:	90 93 86 0b 	sts	0x0B86, r25
    ca3a:	80 93 85 0b 	sts	0x0B85, r24
					game.boss_fight_joypad = &player2.netMessage.joyPadState;
    ca3e:	88 e9       	ldi	r24, 0x98	; 152
    ca40:	9f e0       	ldi	r25, 0x0F	; 15
    ca42:	90 93 88 0b 	sts	0x0B88, r25
    ca46:	80 93 87 0b 	sts	0x0B87, r24
					game.boss_fight_player_hud = 15;
    ca4a:	8f e0       	ldi	r24, 0x0F	; 15
    ca4c:	80 93 7a 0b 	sts	0x0B7A, r24
					kill_player(&player1, 0);
    ca50:	60 e0       	ldi	r22, 0x00	; 0
    ca52:	88 ea       	ldi	r24, 0xA8	; 168
    ca54:	9b e0       	ldi	r25, 0x0B	; 11
    ca56:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
					player_spawn(&player1);
    ca5a:	88 ea       	ldi	r24, 0xA8	; 168
    ca5c:	9b e0       	ldi	r25, 0x0B	; 11
    ca5e:	0e 94 d7 4e 	call	0x9dae	; 0x9dae <player_spawn>
					player1.netMessage.flags = player1.netMessage.flags ^ EXPLODING_FLAG;
    ca62:	80 91 19 0c 	lds	r24, 0x0C19
    ca66:	c8 27       	eor	r28, r24
    ca68:	c0 93 19 0c 	sts	0x0C19, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    ca6c:	85 ea       	ldi	r24, 0xA5	; 165
    ca6e:	90 e0       	ldi	r25, 0x00	; 0
    ca70:	90 93 c0 0f 	sts	0x0FC0, r25
    ca74:	80 93 bf 0f 	sts	0x0FBF, r24
				return;
    ca78:	38 c0       	rjmp	.+112    	; 0xcaea <resolve_scoring+0x1b6>
			}
			
			// Print level score
			LBHideAllSprites();
    ca7a:	0e 94 50 4c 	call	0x98a0	; 0x98a0 <LBHideAllSprites>
			load_level_tiles(true);
    ca7e:	81 e0       	ldi	r24, 0x01	; 1
    ca80:	0e 94 03 57 	call	0xae06	; 0xae06 <load_level_tiles>
			if (player1.netMessage.level_score > player2.netMessage.level_score)
    ca84:	90 91 18 0c 	lds	r25, 0x0C18
    ca88:	80 91 8e 0f 	lds	r24, 0x0F8E
    ca8c:	89 17       	cp	r24, r25
    ca8e:	28 f4       	brcc	.+10     	; 0xca9a <resolve_scoring+0x166>
				print_level_score(&player1, &player2);
    ca90:	6e e1       	ldi	r22, 0x1E	; 30
    ca92:	7f e0       	ldi	r23, 0x0F	; 15
    ca94:	88 ea       	ldi	r24, 0xA8	; 168
    ca96:	9b e0       	ldi	r25, 0x0B	; 11
    ca98:	04 c0       	rjmp	.+8      	; 0xcaa2 <resolve_scoring+0x16e>
			else
				print_level_score(&player2, &player1);
    ca9a:	68 ea       	ldi	r22, 0xA8	; 168
    ca9c:	7b e0       	ldi	r23, 0x0B	; 11
    ca9e:	8e e1       	ldi	r24, 0x1E	; 30
    caa0:	9f e0       	ldi	r25, 0x0F	; 15
    caa2:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    caa6:	6c e1       	ldi	r22, 0x1C	; 28
    caa8:	84 e0       	ldi	r24, 0x04	; 4
    caaa:	90 e0       	ldi	r25, 0x00	; 0
    caac:	0e 94 31 4c 	call	0x9862	; 0x9862 <LBWaitSeconds>
			player1.netMessage.level_score = 0;
    cab0:	10 92 18 0c 	sts	0x0C18, r1
			player2.netMessage.level_score = 0;
    cab4:	10 92 8e 0f 	sts	0x0F8E, r1
			
			// Print game score and exit
			if (player1.netMessage.score > player2.netMessage.score)
    cab8:	90 91 17 0c 	lds	r25, 0x0C17
    cabc:	80 91 8d 0f 	lds	r24, 0x0F8D
    cac0:	89 17       	cp	r24, r25
    cac2:	28 f4       	brcc	.+10     	; 0xcace <resolve_scoring+0x19a>
				print_final_score(&player1, &player2);
    cac4:	6e e1       	ldi	r22, 0x1E	; 30
    cac6:	7f e0       	ldi	r23, 0x0F	; 15
    cac8:	88 ea       	ldi	r24, 0xA8	; 168
    caca:	9b e0       	ldi	r25, 0x0B	; 11
    cacc:	04 c0       	rjmp	.+8      	; 0xcad6 <resolve_scoring+0x1a2>
			else
				print_final_score(&player2, &player1);
    cace:	68 ea       	ldi	r22, 0xA8	; 168
    cad0:	7b e0       	ldi	r23, 0x0B	; 11
    cad2:	8e e1       	ldi	r24, 0x1E	; 30
    cad4:	9f e0       	ldi	r25, 0x0F	; 15
    cad6:	0e 94 31 50 	call	0xa062	; 0xa062 <print_final_score>
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    cada:	6c e1       	ldi	r22, 0x1C	; 28
    cadc:	84 e0       	ldi	r24, 0x04	; 4
    cade:	90 e0       	ldi	r25, 0x00	; 0
    cae0:	0e 94 31 4c 	call	0x9862	; 0x9862 <LBWaitSeconds>
			exit_game();
		}
	}
}
    cae4:	cf 91       	pop	r28
			if (player1.netMessage.score > player2.netMessage.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			exit_game();
    cae6:	0c 94 1f 5a 	jmp	0xb43e	; 0xb43e <exit_game>
		}
	}
}
    caea:	cf 91       	pop	r28
    caec:	08 95       	ret

0000caee <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    caee:	2f 92       	push	r2
    caf0:	3f 92       	push	r3
    caf2:	4f 92       	push	r4
    caf4:	5f 92       	push	r5
    caf6:	6f 92       	push	r6
    caf8:	7f 92       	push	r7
    cafa:	8f 92       	push	r8
    cafc:	9f 92       	push	r9
    cafe:	af 92       	push	r10
    cb00:	bf 92       	push	r11
    cb02:	cf 92       	push	r12
    cb04:	df 92       	push	r13
    cb06:	ef 92       	push	r14
    cb08:	ff 92       	push	r15
    cb0a:	0f 93       	push	r16
    cb0c:	1f 93       	push	r17
    cb0e:	cf 93       	push	r28
    cb10:	df 93       	push	r29
    cb12:	cd b7       	in	r28, 0x3d	; 61
    cb14:	de b7       	in	r29, 0x3e	; 62
    cb16:	2a 97       	sbiw	r28, 0x0a	; 10
    cb18:	0f b6       	in	r0, 0x3f	; 63
    cb1a:	f8 94       	cli
    cb1c:	de bf       	out	0x3e, r29	; 62
    cb1e:	0f be       	out	0x3f, r0	; 63
    cb20:	cd bf       	out	0x3d, r28	; 61
    cb22:	3c 01       	movw	r6, r24
    cb24:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    cb26:	1a 82       	std	Y+2, r1	; 0x02
    cb28:	19 82       	std	Y+1, r1	; 0x01
    cb2a:	1c 82       	std	Y+4, r1	; 0x04
    cb2c:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 800;
	u8 y = shot->shared.y / 800 - 3;
    cb2e:	db 01       	movw	r26, r22
    cb30:	16 96       	adiw	r26, 0x06	; 6
    cb32:	8d 91       	ld	r24, X+
    cb34:	9c 91       	ld	r25, X
    cb36:	17 97       	sbiw	r26, 0x07	; 7
    cb38:	20 e2       	ldi	r18, 0x20	; 32
    cb3a:	33 e0       	ldi	r19, 0x03	; 3
    cb3c:	b9 01       	movw	r22, r18
    cb3e:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    cb42:	4d ef       	ldi	r20, 0xFD	; 253
    cb44:	46 0f       	add	r20, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 800;
    cb46:	f4 01       	movw	r30, r8
    cb48:	84 81       	ldd	r24, Z+4	; 0x04
    cb4a:	95 81       	ldd	r25, Z+5	; 0x05
    cb4c:	b9 01       	movw	r22, r18
    cb4e:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    cb52:	20 81       	ld	r18, Z
    cb54:	ce 01       	movw	r24, r28
    cb56:	01 96       	adiw	r24, 0x01	; 1
    cb58:	0e 94 c7 55 	call	0xab8e	; 0xab8e <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    cb5c:	c4 01       	movw	r24, r8
    cb5e:	0e 94 1b 55 	call	0xaa36	; 0xaa36 <collision_detect_boundries>
    cb62:	88 23       	and	r24, r24
    cb64:	49 f0       	breq	.+18     	; 0xcb78 <collision_detect_shot+0x8a>
	{
		init_shot_state(shot, shot->shot_type);
    cb66:	d4 01       	movw	r26, r8
    cb68:	18 96       	adiw	r26, 0x08	; 8
    cb6a:	6c 91       	ld	r22, X
    cb6c:	c4 01       	movw	r24, r8
    cb6e:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
		player->active_shots = 0;
    cb72:	f3 01       	movw	r30, r6
    cb74:	14 82       	std	Z+4, r1	; 0x04
		return;
    cb76:	e3 c1       	rjmp	.+966    	; 0xcf3e <collision_detect_shot+0x450>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.netMessage.flags & EXPLODING_FLAG) && !is_net_player(&player1))
    cb78:	b4 01       	movw	r22, r8
    cb7a:	88 ea       	ldi	r24, 0xA8	; 168
    cb7c:	9b e0       	ldi	r25, 0x0B	; 11
    cb7e:	0e 94 93 54 	call	0xa926	; 0xa926 <player_shot>
    cb82:	88 23       	and	r24, r24
    cb84:	19 f1       	breq	.+70     	; 0xcbcc <collision_detect_shot+0xde>
    cb86:	80 91 19 0c 	lds	r24, 0x0C19
    cb8a:	80 fd       	sbrc	r24, 0
    cb8c:	1f c0       	rjmp	.+62     	; 0xcbcc <collision_detect_shot+0xde>
    cb8e:	88 ea       	ldi	r24, 0xA8	; 168
    cb90:	9b e0       	ldi	r25, 0x0B	; 11
    cb92:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    cb96:	81 11       	cpse	r24, r1
    cb98:	19 c0       	rjmp	.+50     	; 0xcbcc <collision_detect_shot+0xde>
	{
		p = &player1;
		hud_x = 0;
		player2.netMessage.level_score++;
    cb9a:	80 91 8e 0f 	lds	r24, 0x0F8E
    cb9e:	8f 5f       	subi	r24, 0xFF	; 255
    cba0:	80 93 8e 0f 	sts	0x0F8E, r24
		player2.netMessage.score++;
    cba4:	80 91 8d 0f 	lds	r24, 0x0F8D
    cba8:	8f 5f       	subi	r24, 0xFF	; 255
    cbaa:	80 93 8d 0f 	sts	0x0F8D, r24
		render_score(&player2, 15);
    cbae:	6f e0       	ldi	r22, 0x0F	; 15
    cbb0:	8e e1       	ldi	r24, 0x1E	; 30
    cbb2:	9f e0       	ldi	r25, 0x0F	; 15
    cbb4:	0e 94 c8 50 	call	0xa190	; 0xa190 <render_score>
		send_net_message(NETHIT, 0, 0, 0);
    cbb8:	20 e0       	ldi	r18, 0x00	; 0
    cbba:	40 e0       	ldi	r20, 0x00	; 0
    cbbc:	60 e0       	ldi	r22, 0x00	; 0
    cbbe:	80 e0       	ldi	r24, 0x00	; 0
    cbc0:	0e 94 2b 64 	call	0xc856	; 0xc856 <send_net_message>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.netMessage.flags & EXPLODING_FLAG) && !is_net_player(&player1))
	{
		p = &player1;
    cbc4:	08 ea       	ldi	r16, 0xA8	; 168
    cbc6:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    cbc8:	f1 2c       	mov	r15, r1
		player2.netMessage.level_score++;
		player2.netMessage.score++;
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0, 0);
    cbca:	86 c0       	rjmp	.+268    	; 0xccd8 <collision_detect_shot+0x1ea>
	}
	else if (player_shot(&player2, shot) && !(player2.netMessage.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
    cbcc:	b4 01       	movw	r22, r8
    cbce:	8e e1       	ldi	r24, 0x1E	; 30
    cbd0:	9f e0       	ldi	r25, 0x0F	; 15
    cbd2:	0e 94 93 54 	call	0xa926	; 0xa926 <player_shot>
    cbd6:	90 91 79 0b 	lds	r25, 0x0B79
    cbda:	88 23       	and	r24, r24
    cbdc:	31 f1       	breq	.+76     	; 0xcc2a <collision_detect_shot+0x13c>
    cbde:	80 91 8f 0f 	lds	r24, 0x0F8F
    cbe2:	80 fd       	sbrc	r24, 0
    cbe4:	22 c0       	rjmp	.+68     	; 0xcc2a <collision_detect_shot+0x13c>
    cbe6:	91 11       	cpse	r25, r1
    cbe8:	20 c0       	rjmp	.+64     	; 0xcc2a <collision_detect_shot+0x13c>
    cbea:	8e e1       	ldi	r24, 0x1E	; 30
    cbec:	9f e0       	ldi	r25, 0x0F	; 15
    cbee:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    cbf2:	81 11       	cpse	r24, r1
    cbf4:	74 c0       	rjmp	.+232    	; 0xccde <collision_detect_shot+0x1f0>
	{
		p = &player2;
		hud_x = 15;
		player1.netMessage.level_score++;
    cbf6:	80 91 18 0c 	lds	r24, 0x0C18
    cbfa:	8f 5f       	subi	r24, 0xFF	; 255
    cbfc:	80 93 18 0c 	sts	0x0C18, r24
		player1.netMessage.score++;
    cc00:	80 91 17 0c 	lds	r24, 0x0C17
    cc04:	8f 5f       	subi	r24, 0xFF	; 255
    cc06:	80 93 17 0c 	sts	0x0C17, r24
		render_score(&player1, 0);
    cc0a:	60 e0       	ldi	r22, 0x00	; 0
    cc0c:	88 ea       	ldi	r24, 0xA8	; 168
    cc0e:	9b e0       	ldi	r25, 0x0B	; 11
    cc10:	0e 94 c8 50 	call	0xa190	; 0xa190 <render_score>
		send_net_message(NETHIT, 0, 0, 0);
    cc14:	20 e0       	ldi	r18, 0x00	; 0
    cc16:	40 e0       	ldi	r20, 0x00	; 0
    cc18:	60 e0       	ldi	r22, 0x00	; 0
    cc1a:	80 e0       	ldi	r24, 0x00	; 0
    cc1c:	0e 94 2b 64 	call	0xc856	; 0xc856 <send_net_message>
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0, 0);
	}
	else if (player_shot(&player2, shot) && !(player2.netMessage.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
	{
		p = &player2;
    cc20:	0e e1       	ldi	r16, 0x1E	; 30
    cc22:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    cc24:	ef e0       	ldi	r30, 0x0F	; 15
    cc26:	fe 2e       	mov	r15, r30
		player1.netMessage.level_score++;
		player1.netMessage.score++;
		render_score(&player1, 0);
		send_net_message(NETHIT, 0, 0, 0);
    cc28:	57 c0       	rjmp	.+174    	; 0xccd8 <collision_detect_shot+0x1ea>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    cc2a:	94 30       	cpi	r25, 0x04	; 4
    cc2c:	09 f0       	breq	.+2      	; 0xcc30 <collision_detect_shot+0x142>
    cc2e:	57 c0       	rjmp	.+174    	; 0xccde <collision_detect_shot+0x1f0>
	{
		if (turret_shot(&turret1, shot) && !is_net_player(game.boss_fight_player))
    cc30:	b4 01       	movw	r22, r8
    cc32:	80 ef       	ldi	r24, 0xF0	; 240
    cc34:	9f e0       	ldi	r25, 0x0F	; 15
    cc36:	0e 94 de 54 	call	0xa9bc	; 0xa9bc <turret_shot>
    cc3a:	88 23       	and	r24, r24
    cc3c:	11 f1       	breq	.+68     	; 0xcc82 <collision_detect_shot+0x194>
    cc3e:	80 91 85 0b 	lds	r24, 0x0B85
    cc42:	90 91 86 0b 	lds	r25, 0x0B86
    cc46:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    cc4a:	81 11       	cpse	r24, r1
    cc4c:	1a c0       	rjmp	.+52     	; 0xcc82 <collision_detect_shot+0x194>
		{
			turret1.lives--;
    cc4e:	80 91 f8 0f 	lds	r24, 0x0FF8
    cc52:	81 50       	subi	r24, 0x01	; 1
    cc54:	80 93 f8 0f 	sts	0x0FF8, r24
			init_shot_state(shot, shot->shot_type);
    cc58:	d4 01       	movw	r26, r8
    cc5a:	18 96       	adiw	r26, 0x08	; 8
    cc5c:	6c 91       	ld	r22, X
    cc5e:	c4 01       	movw	r24, r8
    cc60:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
			game.boss_fight_player->active_shots = 0;
    cc64:	e0 91 85 0b 	lds	r30, 0x0B85
    cc68:	f0 91 86 0b 	lds	r31, 0x0B86
    cc6c:	14 82       	std	Z+4, r1	; 0x04
    cc6e:	86 e0       	ldi	r24, 0x06	; 6
    cc70:	0e 94 7e 49 	call	0x92fc	; 0x92fc <LBPlaySound.part.5>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
			send_net_message(NETTURRETHIT, 1, turret1.lives, turret1.lives == 0);
    cc74:	40 91 f8 0f 	lds	r20, 0x0FF8
    cc78:	21 e0       	ldi	r18, 0x01	; 1
    cc7a:	41 11       	cpse	r20, r1
    cc7c:	20 e0       	ldi	r18, 0x00	; 0
    cc7e:	61 e0       	ldi	r22, 0x01	; 1
    cc80:	27 c0       	rjmp	.+78     	; 0xccd0 <collision_detect_shot+0x1e2>
		}
		else if (turret_shot(&turret2, shot) && !is_net_player(game.boss_fight_player))
    cc82:	b4 01       	movw	r22, r8
    cc84:	81 ec       	ldi	r24, 0xC1	; 193
    cc86:	9f e0       	ldi	r25, 0x0F	; 15
    cc88:	0e 94 de 54 	call	0xa9bc	; 0xa9bc <turret_shot>
    cc8c:	88 23       	and	r24, r24
    cc8e:	39 f1       	breq	.+78     	; 0xccde <collision_detect_shot+0x1f0>
    cc90:	80 91 85 0b 	lds	r24, 0x0B85
    cc94:	90 91 86 0b 	lds	r25, 0x0B86
    cc98:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    cc9c:	81 11       	cpse	r24, r1
    cc9e:	1f c0       	rjmp	.+62     	; 0xccde <collision_detect_shot+0x1f0>
		{
			turret2.lives--;
    cca0:	80 91 c9 0f 	lds	r24, 0x0FC9
    cca4:	81 50       	subi	r24, 0x01	; 1
    cca6:	80 93 c9 0f 	sts	0x0FC9, r24
			init_shot_state(shot, shot->shot_type);
    ccaa:	f4 01       	movw	r30, r8
    ccac:	60 85       	ldd	r22, Z+8	; 0x08
    ccae:	c4 01       	movw	r24, r8
    ccb0:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
			game.boss_fight_player->active_shots = 0;
    ccb4:	e0 91 85 0b 	lds	r30, 0x0B85
    ccb8:	f0 91 86 0b 	lds	r31, 0x0B86
    ccbc:	14 82       	std	Z+4, r1	; 0x04
    ccbe:	86 e0       	ldi	r24, 0x06	; 6
    ccc0:	0e 94 7e 49 	call	0x92fc	; 0x92fc <LBPlaySound.part.5>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
			send_net_message(NETTURRETHIT, 2, turret2.lives, turret2.lives == 0);
    ccc4:	40 91 c9 0f 	lds	r20, 0x0FC9
    ccc8:	21 e0       	ldi	r18, 0x01	; 1
    ccca:	41 11       	cpse	r20, r1
    cccc:	20 e0       	ldi	r18, 0x00	; 0
    ccce:	62 e0       	ldi	r22, 0x02	; 2
    ccd0:	8c e0       	ldi	r24, 0x0C	; 12
    ccd2:	0e 94 2b 64 	call	0xc856	; 0xc856 <send_net_message>
    ccd6:	03 c0       	rjmp	.+6      	; 0xccde <collision_detect_shot+0x1f0>
		}
	}
	if (p)
    ccd8:	01 15       	cp	r16, r1
    ccda:	11 05       	cpc	r17, r1
    ccdc:	81 f4       	brne	.+32     	; 0xccfe <collision_detect_shot+0x210>
    ccde:	ce 01       	movw	r24, r28
    cce0:	01 96       	adiw	r24, 0x01	; 1
    cce2:	9a 87       	std	Y+10, r25	; 0x0a
    cce4:	89 87       	std	Y+9, r24	; 0x09
    cce6:	1e 82       	std	Y+6, r1	; 0x06
    cce8:	18 86       	std	Y+8, r1	; 0x08
    ccea:	1f 82       	std	Y+7, r1	; 0x07
    ccec:	1d 82       	std	Y+5, r1	; 0x05
		else if (tile == L_BRICK && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
    ccee:	6e e1       	ldi	r22, 0x1E	; 30
    ccf0:	26 2e       	mov	r2, r22
    ccf2:	31 2c       	mov	r3, r1
    ccf4:	70 e2       	ldi	r23, 0x20	; 32
    ccf6:	47 2e       	mov	r4, r23
    ccf8:	73 e0       	ldi	r23, 0x03	; 3
    ccfa:	57 2e       	mov	r5, r23
    ccfc:	31 c0       	rjmp	.+98     	; 0xcd60 <collision_detect_shot+0x272>
			send_net_message(NETTURRETHIT, 2, turret2.lives, turret2.lives == 0);
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    ccfe:	d4 01       	movw	r26, r8
    cd00:	18 96       	adiw	r26, 0x08	; 8
    cd02:	6c 91       	ld	r22, X
    cd04:	c4 01       	movw	r24, r8
    cd06:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
		player->active_shots = 0;
    cd0a:	f3 01       	movw	r30, r6
    cd0c:	14 82       	std	Z+4, r1	; 0x04
		kill_player(p, hud_x);
    cd0e:	6f 2d       	mov	r22, r15
    cd10:	c8 01       	movw	r24, r16
    cd12:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    cd16:	86 e0       	ldi	r24, 0x06	; 6
    cd18:	0e 94 7e 49 	call	0x92fc	; 0x92fc <LBPlaySound.part.5>
    cd1c:	10 c1       	rjmp	.+544    	; 0xcf3e <collision_detect_shot+0x450>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+200, shot->shared.y+200,400,400))
    cd1e:	c7 01       	movw	r24, r14
    cd20:	0e 94 a0 52 	call	0xa540	; 0xa540 <solid_directional_tile>
    cd24:	88 23       	and	r24, r24
    cd26:	49 f1       	breq	.+82     	; 0xcd7a <collision_detect_shot+0x28c>
    cd28:	f4 01       	movw	r30, r8
    cd2a:	46 81       	ldd	r20, Z+6	; 0x06
    cd2c:	57 81       	ldd	r21, Z+7	; 0x07
    cd2e:	48 53       	subi	r20, 0x38	; 56
    cd30:	5f 4f       	sbci	r21, 0xFF	; 255
    cd32:	64 81       	ldd	r22, Z+4	; 0x04
    cd34:	75 81       	ldd	r23, Z+5	; 0x05
    cd36:	68 53       	subi	r22, 0x38	; 56
    cd38:	7f 4f       	sbci	r23, 0xFF	; 255
    cd3a:	00 e9       	ldi	r16, 0x90	; 144
    cd3c:	11 e0       	ldi	r17, 0x01	; 1
    cd3e:	20 e9       	ldi	r18, 0x90	; 144
    cd40:	31 e0       	ldi	r19, 0x01	; 1
    cd42:	c7 01       	movw	r24, r14
    cd44:	0e 94 ca 52 	call	0xa594	; 0xa594 <collides_directional_tile>
    cd48:	88 23       	and	r24, r24
    cd4a:	b9 f0       	breq	.+46     	; 0xcd7a <collision_detect_shot+0x28c>
		{
			hit = hit | HIT_ANGLE;
    cd4c:	fd 81       	ldd	r31, Y+5	; 0x05
    cd4e:	f4 60       	ori	r31, 0x04	; 4
    cd50:	fd 83       	std	Y+5, r31	; 0x05
			angle_tile = tile;
    cd52:	d8 86       	std	Y+8, r13	; 0x08
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    cd54:	2e 81       	ldd	r18, Y+6	; 0x06
    cd56:	21 30       	cpi	r18, 0x01	; 1
    cd58:	09 f4       	brne	.+2      	; 0xcd5c <collision_detect_shot+0x26e>
    cd5a:	7f c0       	rjmp	.+254    	; 0xce5a <collision_detect_shot+0x36c>
    cd5c:	f1 e0       	ldi	r31, 0x01	; 1
    cd5e:	fe 83       	std	Y+6, r31	; 0x06
	{
		tile = level.level_map[tiles[i]];
    cd60:	a9 85       	ldd	r26, Y+9	; 0x09
    cd62:	ba 85       	ldd	r27, Y+10	; 0x0a
    cd64:	ed 90       	ld	r14, X+
    cd66:	fd 90       	ld	r15, X+
    cd68:	ba 87       	std	Y+10, r27	; 0x0a
    cd6a:	a9 87       	std	Y+9, r26	; 0x09
    cd6c:	f7 01       	movw	r30, r14
    cd6e:	e1 5d       	subi	r30, 0xD1	; 209
    cd70:	f3 4f       	sbci	r31, 0xF3	; 243
    cd72:	d1 80       	ldd	r13, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    cd74:	dd 20       	and	r13, r13
    cd76:	71 f3       	breq	.-36     	; 0xcd54 <collision_detect_shot+0x266>
    cd78:	d2 cf       	rjmp	.-92     	; 0xcd1e <collision_detect_shot+0x230>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+200, shot->shared.y+200,400,400))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
    cd7a:	21 e0       	ldi	r18, 0x01	; 1
    cd7c:	d2 12       	cpse	r13, r18
    cd7e:	36 c0       	rjmp	.+108    	; 0xcdec <collision_detect_shot+0x2fe>
    cd80:	c7 01       	movw	r24, r14
    cd82:	b1 01       	movw	r22, r2
    cd84:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    cd88:	64 9d       	mul	r22, r4
    cd8a:	70 01       	movw	r14, r0
    cd8c:	65 9d       	mul	r22, r5
    cd8e:	f0 0c       	add	r15, r0
    cd90:	74 9d       	mul	r23, r4
    cd92:	f0 0c       	add	r15, r0
    cd94:	11 24       	eor	r1, r1
    cd96:	a0 ea       	ldi	r26, 0xA0	; 160
    cd98:	ea 1a       	sub	r14, r26
    cd9a:	a6 ef       	ldi	r26, 0xF6	; 246
    cd9c:	fa 0a       	sbc	r15, r26
    cd9e:	84 9d       	mul	r24, r4
    cda0:	80 01       	movw	r16, r0
    cda2:	85 9d       	mul	r24, r5
    cda4:	10 0d       	add	r17, r0
    cda6:	94 9d       	mul	r25, r4
    cda8:	10 0d       	add	r17, r0
    cdaa:	11 24       	eor	r1, r1
    cdac:	f4 01       	movw	r30, r8
    cdae:	66 81       	ldd	r22, Z+6	; 0x06
    cdb0:	77 81       	ldd	r23, Z+7	; 0x07
    cdb2:	68 53       	subi	r22, 0x38	; 56
    cdb4:	7f 4f       	sbci	r23, 0xFF	; 255
    cdb6:	84 81       	ldd	r24, Z+4	; 0x04
    cdb8:	95 81       	ldd	r25, Z+5	; 0x05
    cdba:	40 e2       	ldi	r20, 0x20	; 32
    cdbc:	a4 2e       	mov	r10, r20
    cdbe:	43 e0       	ldi	r20, 0x03	; 3
    cdc0:	b4 2e       	mov	r11, r20
    cdc2:	50 e2       	ldi	r21, 0x20	; 32
    cdc4:	c5 2e       	mov	r12, r21
    cdc6:	53 e0       	ldi	r21, 0x03	; 3
    cdc8:	d5 2e       	mov	r13, r21
    cdca:	20 e9       	ldi	r18, 0x90	; 144
    cdcc:	31 e0       	ldi	r19, 0x01	; 1
    cdce:	40 e9       	ldi	r20, 0x90	; 144
    cdd0:	51 e0       	ldi	r21, 0x01	; 1
    cdd2:	88 53       	subi	r24, 0x38	; 56
    cdd4:	9f 4f       	sbci	r25, 0xFF	; 255
    cdd6:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <LBCollides>
    cdda:	88 23       	and	r24, r24
    cddc:	09 f4       	brne	.+2      	; 0xcde0 <collision_detect_shot+0x2f2>
    cdde:	ba cf       	rjmp	.-140    	; 0xcd54 <collision_detect_shot+0x266>
		{
			hit = hit | HIT_BRICK;
    cde0:	fd 81       	ldd	r31, Y+5	; 0x05
    cde2:	f2 60       	ori	r31, 0x02	; 2
    cde4:	fd 83       	std	Y+5, r31	; 0x05
			brick_index = i;
    cde6:	2e 81       	ldd	r18, Y+6	; 0x06
    cde8:	2f 83       	std	Y+7, r18	; 0x07
    cdea:	b4 cf       	rjmp	.-152    	; 0xcd54 <collision_detect_shot+0x266>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
    cdec:	82 e0       	ldi	r24, 0x02	; 2
    cdee:	d8 12       	cpse	r13, r24
    cdf0:	b1 cf       	rjmp	.-158    	; 0xcd54 <collision_detect_shot+0x266>
    cdf2:	c7 01       	movw	r24, r14
    cdf4:	b1 01       	movw	r22, r2
    cdf6:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    cdfa:	64 9d       	mul	r22, r4
    cdfc:	70 01       	movw	r14, r0
    cdfe:	65 9d       	mul	r22, r5
    ce00:	f0 0c       	add	r15, r0
    ce02:	74 9d       	mul	r23, r4
    ce04:	f0 0c       	add	r15, r0
    ce06:	11 24       	eor	r1, r1
    ce08:	a0 ea       	ldi	r26, 0xA0	; 160
    ce0a:	ea 1a       	sub	r14, r26
    ce0c:	a6 ef       	ldi	r26, 0xF6	; 246
    ce0e:	fa 0a       	sbc	r15, r26
    ce10:	84 9d       	mul	r24, r4
    ce12:	80 01       	movw	r16, r0
    ce14:	85 9d       	mul	r24, r5
    ce16:	10 0d       	add	r17, r0
    ce18:	94 9d       	mul	r25, r4
    ce1a:	10 0d       	add	r17, r0
    ce1c:	11 24       	eor	r1, r1
    ce1e:	f4 01       	movw	r30, r8
    ce20:	66 81       	ldd	r22, Z+6	; 0x06
    ce22:	77 81       	ldd	r23, Z+7	; 0x07
    ce24:	68 53       	subi	r22, 0x38	; 56
    ce26:	7f 4f       	sbci	r23, 0xFF	; 255
    ce28:	84 81       	ldd	r24, Z+4	; 0x04
    ce2a:	95 81       	ldd	r25, Z+5	; 0x05
    ce2c:	20 e2       	ldi	r18, 0x20	; 32
    ce2e:	a2 2e       	mov	r10, r18
    ce30:	23 e0       	ldi	r18, 0x03	; 3
    ce32:	b2 2e       	mov	r11, r18
    ce34:	30 e2       	ldi	r19, 0x20	; 32
    ce36:	c3 2e       	mov	r12, r19
    ce38:	33 e0       	ldi	r19, 0x03	; 3
    ce3a:	d3 2e       	mov	r13, r19
    ce3c:	20 e9       	ldi	r18, 0x90	; 144
    ce3e:	31 e0       	ldi	r19, 0x01	; 1
    ce40:	40 e9       	ldi	r20, 0x90	; 144
    ce42:	51 e0       	ldi	r21, 0x01	; 1
    ce44:	88 53       	subi	r24, 0x38	; 56
    ce46:	9f 4f       	sbci	r25, 0xFF	; 255
    ce48:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <LBCollides>
    ce4c:	88 23       	and	r24, r24
    ce4e:	09 f4       	brne	.+2      	; 0xce52 <collision_detect_shot+0x364>
    ce50:	81 cf       	rjmp	.-254    	; 0xcd54 <collision_detect_shot+0x266>
        {
		    hit = hit | HIT_METAL;
    ce52:	fd 81       	ldd	r31, Y+5	; 0x05
    ce54:	f1 60       	ori	r31, 0x01	; 1
    ce56:	fd 83       	std	Y+5, r31	; 0x05
    ce58:	7d cf       	rjmp	.-262    	; 0xcd54 <collision_detect_shot+0x266>
        }
	}
	
	if (hit & HIT_ANGLE)
    ce5a:	8d 81       	ldd	r24, Y+5	; 0x05
    ce5c:	82 ff       	sbrs	r24, 2
    ce5e:	1a c0       	rjmp	.+52     	; 0xce94 <collision_detect_shot+0x3a6>
	{
		recoil_sprite_fine(player, &shot->shared);
    ce60:	b4 01       	movw	r22, r8
    ce62:	c3 01       	movw	r24, r6
    ce64:	0e 94 62 52 	call	0xa4c4	; 0xa4c4 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    ce68:	b4 01       	movw	r22, r8
    ce6a:	88 85       	ldd	r24, Y+8	; 0x08
    ce6c:	0e 94 27 56 	call	0xac4e	; 0xac4e <richochet>
		shot->rebounds--;
    ce70:	d4 01       	movw	r26, r8
    ce72:	1a 96       	adiw	r26, 0x0a	; 10
    ce74:	8c 91       	ld	r24, X
    ce76:	1a 97       	sbiw	r26, 0x0a	; 10
    ce78:	81 50       	subi	r24, 0x01	; 1
    ce7a:	1a 96       	adiw	r26, 0x0a	; 10
    ce7c:	8c 93       	st	X, r24
    ce7e:	1a 97       	sbiw	r26, 0x0a	; 10
		if (shot->rebounds <= 0)
    ce80:	81 11       	cpse	r24, r1
    ce82:	54 c0       	rjmp	.+168    	; 0xcf2c <collision_detect_shot+0x43e>
		{
			init_shot_state(shot, shot->shot_type);
    ce84:	18 96       	adiw	r26, 0x08	; 8
    ce86:	6c 91       	ld	r22, X
    ce88:	c4 01       	movw	r24, r8
    ce8a:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
			player->active_shots = 0;
    ce8e:	f3 01       	movw	r30, r6
    ce90:	14 82       	std	Z+4, r1	; 0x04
    ce92:	4c c0       	rjmp	.+152    	; 0xcf2c <collision_detect_shot+0x43e>
		}
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_METAL);
	}
	else if ((hit & HIT_BRICK) && !is_net_player(player))
    ce94:	fd 81       	ldd	r31, Y+5	; 0x05
    ce96:	f1 ff       	sbrs	r31, 1
    ce98:	3e c0       	rjmp	.+124    	; 0xcf16 <collision_detect_shot+0x428>
    ce9a:	c3 01       	movw	r24, r6
    ce9c:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    cea0:	81 11       	cpse	r24, r1
    cea2:	39 c0       	rjmp	.+114    	; 0xcf16 <collision_detect_shot+0x428>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    cea4:	2f 81       	ldd	r18, Y+7	; 0x07
    cea6:	42 2e       	mov	r4, r18
    cea8:	51 2c       	mov	r5, r1
    ceaa:	44 0c       	add	r4, r4
    ceac:	55 1c       	adc	r5, r5
    ceae:	01 e0       	ldi	r16, 0x01	; 1
    ceb0:	10 e0       	ldi	r17, 0x00	; 0
    ceb2:	0c 0f       	add	r16, r28
    ceb4:	1d 1f       	adc	r17, r29
    ceb6:	04 0d       	add	r16, r4
    ceb8:	15 1d       	adc	r17, r5
    ceba:	d8 01       	movw	r26, r16
    cebc:	6d 91       	ld	r22, X+
    cebe:	7c 91       	ld	r23, X
    cec0:	8a e8       	ldi	r24, 0x8A	; 138
    cec2:	9b e0       	ldi	r25, 0x0B	; 11
    cec4:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    cec8:	d8 01       	movw	r26, r16
    ceca:	ed 91       	ld	r30, X+
    cecc:	fc 91       	ld	r31, X
    cece:	e1 5d       	subi	r30, 0xD1	; 209
    ced0:	f3 4f       	sbci	r31, 0xF3	; 243
    ced2:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    ced4:	f4 01       	movw	r30, r8
    ced6:	81 85       	ldd	r24, Z+9	; 0x09
    ced8:	81 50       	subi	r24, 0x01	; 1
    ceda:	81 87       	std	Z+9, r24	; 0x09
		if (shot->hit_count <= 0)
    cedc:	81 11       	cpse	r24, r1
    cede:	07 c0       	rjmp	.+14     	; 0xceee <collision_detect_shot+0x400>
		{
			init_shot_state(shot, shot->shot_type);
    cee0:	60 85       	ldd	r22, Z+8	; 0x08
    cee2:	c4 01       	movw	r24, r8
    cee4:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
			player->active_shots = 0;
    cee8:	d3 01       	movw	r26, r6
    ceea:	14 96       	adiw	r26, 0x04	; 4
    ceec:	1c 92       	st	X, r1
		}
		send_net_message(NETBLOCKHIT, tiles[brick_index] % 30, tiles[brick_index] / 30, 0);
    ceee:	e1 e0       	ldi	r30, 0x01	; 1
    cef0:	f0 e0       	ldi	r31, 0x00	; 0
    cef2:	ec 0f       	add	r30, r28
    cef4:	fd 1f       	adc	r31, r29
    cef6:	e4 0d       	add	r30, r4
    cef8:	f5 1d       	adc	r31, r5
    cefa:	80 81       	ld	r24, Z
    cefc:	91 81       	ldd	r25, Z+1	; 0x01
    cefe:	6e e1       	ldi	r22, 0x1E	; 30
    cf00:	70 e0       	ldi	r23, 0x00	; 0
    cf02:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    cf06:	46 2f       	mov	r20, r22
    cf08:	20 e0       	ldi	r18, 0x00	; 0
    cf0a:	68 2f       	mov	r22, r24
    cf0c:	8e e0       	ldi	r24, 0x0E	; 14
    cf0e:	0e 94 2b 64 	call	0xc856	; 0xc856 <send_net_message>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_BRICK_EXPLODE);
    cf12:	20 e0       	ldi	r18, 0x00	; 0
    cf14:	0c c0       	rjmp	.+24     	; 0xcf2e <collision_detect_shot+0x440>
	}
	else if (hit & HIT_METAL)
    cf16:	bd 81       	ldd	r27, Y+5	; 0x05
    cf18:	b0 ff       	sbrs	r27, 0
    cf1a:	11 c0       	rjmp	.+34     	; 0xcf3e <collision_detect_shot+0x450>
	{
        init_shot_state(shot, shot->shot_type);
    cf1c:	f4 01       	movw	r30, r8
    cf1e:	60 85       	ldd	r22, Z+8	; 0x08
    cf20:	c4 01       	movw	r24, r8
    cf22:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
        player->active_shots = 0;
    cf26:	d3 01       	movw	r26, r6
    cf28:	14 96       	adiw	r26, 0x04	; 4
    cf2a:	1c 92       	st	X, r1
        LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_METAL);
    cf2c:	23 e0       	ldi	r18, 0x03	; 3
    cf2e:	40 91 8f 0f 	lds	r20, 0x0F8F
    cf32:	60 91 19 0c 	lds	r22, 0x0C19
    cf36:	80 91 89 0b 	lds	r24, 0x0B89
    cf3a:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
	}
}
    cf3e:	2a 96       	adiw	r28, 0x0a	; 10
    cf40:	0f b6       	in	r0, 0x3f	; 63
    cf42:	f8 94       	cli
    cf44:	de bf       	out	0x3e, r29	; 62
    cf46:	0f be       	out	0x3f, r0	; 63
    cf48:	cd bf       	out	0x3d, r28	; 61
    cf4a:	df 91       	pop	r29
    cf4c:	cf 91       	pop	r28
    cf4e:	1f 91       	pop	r17
    cf50:	0f 91       	pop	r16
    cf52:	ff 90       	pop	r15
    cf54:	ef 90       	pop	r14
    cf56:	df 90       	pop	r13
    cf58:	cf 90       	pop	r12
    cf5a:	bf 90       	pop	r11
    cf5c:	af 90       	pop	r10
    cf5e:	9f 90       	pop	r9
    cf60:	8f 90       	pop	r8
    cf62:	7f 90       	pop	r7
    cf64:	6f 90       	pop	r6
    cf66:	5f 90       	pop	r5
    cf68:	4f 90       	pop	r4
    cf6a:	3f 90       	pop	r3
    cf6c:	2f 90       	pop	r2
    cf6e:	08 95       	ret

0000cf70 <update_player>:
		return s->speed / FRAME_TIME_INVERTED;
	return (s->speed + (s->speed / AI_SPEED_FACTOR_INVERTED)) / FRAME_TIME_INVERTED;
}

void update_player(JoyPadState* p, Player* player)
{
    cf70:	df 92       	push	r13
    cf72:	ef 92       	push	r14
    cf74:	ff 92       	push	r15
    cf76:	0f 93       	push	r16
    cf78:	1f 93       	push	r17
    cf7a:	cf 93       	push	r28
    cf7c:	df 93       	push	r29
    cf7e:	8c 01       	movw	r16, r24
    cf80:	eb 01       	movw	r28, r22
	Shot* shot;
	
	player->netMessage.shared.recoiled = 0;
    cf82:	fb 01       	movw	r30, r22
    cf84:	eb 58       	subi	r30, 0x8B	; 139
    cf86:	ff 4f       	sbci	r31, 0xFF	; 255
    cf88:	10 82       	st	Z, r1
	player->old_active_shots = player->active_shots;
    cf8a:	8c 81       	ldd	r24, Y+4	; 0x04
    cf8c:	8d 83       	std	Y+5, r24	; 0x05
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0) && !is_net_player(player))
    cf8e:	d8 01       	movw	r26, r16
    cf90:	8c 91       	ld	r24, X
    cf92:	83 ff       	sbrs	r24, 3
    cf94:	25 c0       	rjmp	.+74     	; 0xcfe0 <update_player+0x70>
    cf96:	80 91 79 0b 	lds	r24, 0x0B79
    cf9a:	81 11       	cpse	r24, r1
    cf9c:	21 c0       	rjmp	.+66     	; 0xcfe0 <update_player+0x70>
    cf9e:	cb 01       	movw	r24, r22
    cfa0:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    cfa4:	81 11       	cpse	r24, r1
    cfa6:	1c c0       	rjmp	.+56     	; 0xcfe0 <update_player+0x70>
	{
#if JAMMA
#else
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    cfa8:	24 e0       	ldi	r18, 0x04	; 4
    cfaa:	40 91 8f 0f 	lds	r20, 0x0F8F
    cfae:	60 91 19 0c 	lds	r22, 0x0C19
    cfb2:	80 91 89 0b 	lds	r24, 0x0B89
    cfb6:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		game.paused = game.paused ^ 1;
    cfba:	90 91 78 0b 	lds	r25, 0x0B78
    cfbe:	81 e0       	ldi	r24, 0x01	; 1
		if (game.paused)
		{
			send_smart_net_message(player, p, NETPAUSE, 1);
    cfc0:	21 e0       	ldi	r18, 0x01	; 1
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0) && !is_net_player(player))
	{
#if JAMMA
#else
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		game.paused = game.paused ^ 1;
    cfc2:	89 27       	eor	r24, r25
    cfc4:	80 93 78 0b 	sts	0x0B78, r24
		if (game.paused)
    cfc8:	88 23       	and	r24, r24
    cfca:	11 f0       	breq	.+4      	; 0xcfd0 <update_player+0x60>
		{
			send_smart_net_message(player, p, NETPAUSE, 1);
    cfcc:	47 e0       	ldi	r20, 0x07	; 7
    cfce:	01 c0       	rjmp	.+2      	; 0xcfd2 <update_player+0x62>
		}
		else
		{
			send_smart_net_message(player, p, NETRESUME, 1);
    cfd0:	4d e0       	ldi	r20, 0x0D	; 13
    cfd2:	b8 01       	movw	r22, r16
    cfd4:	ce 01       	movw	r24, r28
    cfd6:	0e 94 75 64 	call	0xc8ea	; 0xc8ea <send_smart_net_message>
		}
		load_level_tiles(false);
    cfda:	80 e0       	ldi	r24, 0x00	; 0
    cfdc:	0e 94 03 57 	call	0xae06	; 0xae06 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->netMessage.flags & EXPLODING_FLAG)))
    cfe0:	80 91 78 0b 	lds	r24, 0x0B78
    cfe4:	81 11       	cpse	r24, r1
    cfe6:	9f c0       	rjmp	.+318    	; 0xd126 <update_player+0x1b6>
    cfe8:	fe 01       	movw	r30, r28
    cfea:	ef 58       	subi	r30, 0x8F	; 143
    cfec:	ff 4f       	sbci	r31, 0xFF	; 255
    cfee:	80 81       	ld	r24, Z
    cff0:	80 fd       	sbrc	r24, 0
    cff2:	99 c0       	rjmp	.+306    	; 0xd126 <update_player+0x1b6>
	{
		player->netMessage.shared.speed = player->max_speed;
    cff4:	32 96       	adiw	r30, 0x02	; 2
    cff6:	8b 85       	ldd	r24, Y+11	; 0x0b
    cff8:	9c 85       	ldd	r25, Y+12	; 0x0c
    cffa:	91 83       	std	Z+1, r25	; 0x01
    cffc:	80 83       	st	Z, r24
		if ((p->held & BTN_UP))
    cffe:	d8 01       	movw	r26, r16
    d000:	14 96       	adiw	r26, 0x04	; 4
    d002:	8c 91       	ld	r24, X
    d004:	84 ff       	sbrs	r24, 4
    d006:	0c c0       	rjmp	.+24     	; 0xd020 <update_player+0xb0>
		{
			player->netMessage.shared.direction = D_UP;
    d008:	be 01       	movw	r22, r28
    d00a:	6e 58       	subi	r22, 0x8E	; 142
    d00c:	7f 4f       	sbci	r23, 0xFF	; 255
    d00e:	fb 01       	movw	r30, r22
    d010:	10 82       	st	Z, r1
			player->netMessage.shared.y -= get_delta(player, &player->netMessage.shared);
    d012:	ce 01       	movw	r24, r28
    d014:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
    d018:	fe 01       	movw	r30, r28
    d01a:	e8 58       	subi	r30, 0x88	; 136
    d01c:	ff 4f       	sbci	r31, 0xFF	; 255
    d01e:	32 c0       	rjmp	.+100    	; 0xd084 <update_player+0x114>
		}
		else if ((p->held & BTN_RIGHT))
    d020:	87 ff       	sbrs	r24, 7
    d022:	0d c0       	rjmp	.+26     	; 0xd03e <update_player+0xce>
		{
			player->netMessage.shared.direction = D_RIGHT;
    d024:	81 e0       	ldi	r24, 0x01	; 1
    d026:	be 01       	movw	r22, r28
    d028:	6e 58       	subi	r22, 0x8E	; 142
    d02a:	7f 4f       	sbci	r23, 0xFF	; 255
    d02c:	db 01       	movw	r26, r22
    d02e:	8c 93       	st	X, r24
			player->netMessage.shared.x += get_delta(player, &player->netMessage.shared);
    d030:	ce 01       	movw	r24, r28
    d032:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
    d036:	fe 01       	movw	r30, r28
    d038:	ea 58       	subi	r30, 0x8A	; 138
    d03a:	ff 4f       	sbci	r31, 0xFF	; 255
    d03c:	0e c0       	rjmp	.+28     	; 0xd05a <update_player+0xea>
		}
		else if ((p->held & BTN_DOWN))
    d03e:	85 ff       	sbrs	r24, 5
    d040:	13 c0       	rjmp	.+38     	; 0xd068 <update_player+0xf8>
		{
			player->netMessage.shared.direction = D_DOWN;
    d042:	82 e0       	ldi	r24, 0x02	; 2
    d044:	be 01       	movw	r22, r28
    d046:	6e 58       	subi	r22, 0x8E	; 142
    d048:	7f 4f       	sbci	r23, 0xFF	; 255
    d04a:	fb 01       	movw	r30, r22
    d04c:	80 83       	st	Z, r24
			player->netMessage.shared.y += get_delta(player, &player->netMessage.shared);
    d04e:	ce 01       	movw	r24, r28
    d050:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
    d054:	fe 01       	movw	r30, r28
    d056:	e8 58       	subi	r30, 0x88	; 136
    d058:	ff 4f       	sbci	r31, 0xFF	; 255
    d05a:	20 81       	ld	r18, Z
    d05c:	31 81       	ldd	r19, Z+1	; 0x01
    d05e:	82 0f       	add	r24, r18
    d060:	93 1f       	adc	r25, r19
    d062:	91 83       	std	Z+1, r25	; 0x01
    d064:	80 83       	st	Z, r24
    d066:	17 c0       	rjmp	.+46     	; 0xd096 <update_player+0x126>
		}
		else if ((p->held & BTN_LEFT))
    d068:	86 ff       	sbrs	r24, 6
    d06a:	13 c0       	rjmp	.+38     	; 0xd092 <update_player+0x122>
		{
			player->netMessage.shared.direction = D_LEFT;
    d06c:	83 e0       	ldi	r24, 0x03	; 3
    d06e:	be 01       	movw	r22, r28
    d070:	6e 58       	subi	r22, 0x8E	; 142
    d072:	7f 4f       	sbci	r23, 0xFF	; 255
    d074:	db 01       	movw	r26, r22
    d076:	8c 93       	st	X, r24
			player->netMessage.shared.x -= get_delta(player, &player->netMessage.shared);
    d078:	ce 01       	movw	r24, r28
    d07a:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
    d07e:	fe 01       	movw	r30, r28
    d080:	ea 58       	subi	r30, 0x8A	; 138
    d082:	ff 4f       	sbci	r31, 0xFF	; 255
    d084:	20 81       	ld	r18, Z
    d086:	31 81       	ldd	r19, Z+1	; 0x01
    d088:	28 1b       	sub	r18, r24
    d08a:	39 0b       	sbc	r19, r25
    d08c:	31 83       	std	Z+1, r19	; 0x01
    d08e:	20 83       	st	Z, r18
    d090:	02 c0       	rjmp	.+4      	; 0xd096 <update_player+0x126>
		}
		else
		{
			player->netMessage.shared.speed = 0;
    d092:	11 82       	std	Z+1, r1	; 0x01
    d094:	10 82       	st	Z, r1
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    d096:	c8 01       	movw	r24, r16
    d098:	0e 94 8f 50 	call	0xa11e	; 0xa11e <shoot_pressed>
    d09c:	88 23       	and	r24, r24
    d09e:	09 f4       	brne	.+2      	; 0xd0a2 <update_player+0x132>
    d0a0:	42 c0       	rjmp	.+132    	; 0xd126 <update_player+0x1b6>
    d0a2:	8c 81       	ldd	r24, Y+4	; 0x04
    d0a4:	81 11       	cpse	r24, r1
    d0a6:	3f c0       	rjmp	.+126    	; 0xd126 <update_player+0x1b6>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    d0a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    d0aa:	81 11       	cpse	r24, r1
    d0ac:	3c c0       	rjmp	.+120    	; 0xd126 <update_player+0x1b6>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    d0ae:	7e 01       	movw	r14, r28
    d0b0:	b1 e2       	ldi	r27, 0x21	; 33
    d0b2:	eb 0e       	add	r14, r27
    d0b4:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					send_smart_net_message(player, p, NETSHOOT, 0);
    d0b6:	20 e0       	ldi	r18, 0x00	; 0
    d0b8:	42 e0       	ldi	r20, 0x02	; 2
    d0ba:	b8 01       	movw	r22, r16
    d0bc:	ce 01       	movw	r24, r28
    d0be:	0e 94 75 64 	call	0xc8ea	; 0xc8ea <send_smart_net_message>
					if (player->has_rocket)
    d0c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    d0c4:	88 23       	and	r24, r24
    d0c6:	51 f0       	breq	.+20     	; 0xd0dc <update_player+0x16c>
					{
						init_shot_state(shot, ROCKET_SHOT);
    d0c8:	61 e0       	ldi	r22, 0x01	; 1
    d0ca:	c7 01       	movw	r24, r14
    d0cc:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    d0d0:	61 e0       	ldi	r22, 0x01	; 1
    d0d2:	c7 01       	movw	r24, r14
    d0d4:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <set_shot_animations>
						LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ROCKET);
    d0d8:	25 e0       	ldi	r18, 0x05	; 5
    d0da:	09 c0       	rjmp	.+18     	; 0xd0ee <update_player+0x17e>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    d0dc:	60 e0       	ldi	r22, 0x00	; 0
    d0de:	c7 01       	movw	r24, r14
    d0e0:	0e 94 bb 4d 	call	0x9b76	; 0x9b76 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    d0e4:	60 e0       	ldi	r22, 0x00	; 0
    d0e6:	c7 01       	movw	r24, r14
    d0e8:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <set_shot_animations>
						LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_CANNONBALL);
    d0ec:	21 e0       	ldi	r18, 0x01	; 1
    d0ee:	40 91 8f 0f 	lds	r20, 0x0F8F
    d0f2:	60 91 19 0c 	lds	r22, 0x0C19
    d0f6:	80 91 89 0b 	lds	r24, 0x0B89
    d0fa:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
					}
					player->active_shots = 1;
    d0fe:	dd 24       	eor	r13, r13
    d100:	d3 94       	inc	r13
    d102:	dc 82       	std	Y+4, r13	; 0x04
					shot->shared.direction = player->netMessage.shared.direction;
    d104:	fe 01       	movw	r30, r28
    d106:	ee 58       	subi	r30, 0x8E	; 142
    d108:	ff 4f       	sbci	r31, 0xFF	; 255
    d10a:	80 81       	ld	r24, Z
    d10c:	89 a3       	std	Y+33, r24	; 0x21
					position_shot(player, shot);
    d10e:	b7 01       	movw	r22, r14
    d110:	ce 01       	movw	r24, r28
    d112:	0e 94 a6 4f 	call	0x9f4c	; 0x9f4c <position_shot>
					shot->active = 1;
    d116:	dc a6       	std	Y+44, r13	; 0x2c
					if (player->has_over_speed)
    d118:	8e 85       	ldd	r24, Y+14	; 0x0e
    d11a:	88 23       	and	r24, r24
    d11c:	21 f0       	breq	.+8      	; 0xd126 <update_player+0x1b6>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    d11e:	88 e6       	ldi	r24, 0x68	; 104
    d120:	92 e4       	ldi	r25, 0x42	; 66
    d122:	9b a3       	std	Y+35, r25	; 0x23
    d124:	8a a3       	std	Y+34, r24	; 0x22
				}
			}
		}
	}
	
	if (!game.paused)
    d126:	80 91 78 0b 	lds	r24, 0x0B78
    d12a:	81 11       	cpse	r24, r1
    d12c:	57 c0       	rjmp	.+174    	; 0xd1dc <update_player+0x26c>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    d12e:	8e 01       	movw	r16, r28
    d130:	0f 5d       	subi	r16, 0xDF	; 223
    d132:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    d134:	8c a5       	ldd	r24, Y+44	; 0x2c
    d136:	88 23       	and	r24, r24
    d138:	09 f4       	brne	.+2      	; 0xd13c <update_player+0x1cc>
    d13a:	6d c0       	rjmp	.+218    	; 0xd216 <update_player+0x2a6>
			{
				switch (shot->shared.direction)
    d13c:	89 a1       	ldd	r24, Y+33	; 0x21
    d13e:	81 30       	cpi	r24, 0x01	; 1
    d140:	d9 f0       	breq	.+54     	; 0xd178 <update_player+0x208>
    d142:	78 f0       	brcs	.+30     	; 0xd162 <update_player+0x1f2>
    d144:	82 30       	cpi	r24, 0x02	; 2
    d146:	19 f1       	breq	.+70     	; 0xd18e <update_player+0x21e>
    d148:	83 30       	cpi	r24, 0x03	; 3
    d14a:	59 f5       	brne	.+86     	; 0xd1a2 <update_player+0x232>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d14c:	b8 01       	movw	r22, r16
    d14e:	ce 01       	movw	r24, r28
    d150:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
    d154:	2d a1       	ldd	r18, Y+37	; 0x25
    d156:	3e a1       	ldd	r19, Y+38	; 0x26
    d158:	28 1b       	sub	r18, r24
    d15a:	39 0b       	sbc	r19, r25
    d15c:	3e a3       	std	Y+38, r19	; 0x26
    d15e:	2d a3       	std	Y+37, r18	; 0x25
    d160:	20 c0       	rjmp	.+64     	; 0xd1a2 <update_player+0x232>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    d162:	b8 01       	movw	r22, r16
    d164:	ce 01       	movw	r24, r28
    d166:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
    d16a:	2f a1       	ldd	r18, Y+39	; 0x27
    d16c:	38 a5       	ldd	r19, Y+40	; 0x28
    d16e:	28 1b       	sub	r18, r24
    d170:	39 0b       	sbc	r19, r25
    d172:	38 a7       	std	Y+40, r19	; 0x28
    d174:	2f a3       	std	Y+39, r18	; 0x27
    d176:	15 c0       	rjmp	.+42     	; 0xd1a2 <update_player+0x232>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    d178:	b8 01       	movw	r22, r16
    d17a:	ce 01       	movw	r24, r28
    d17c:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
    d180:	2d a1       	ldd	r18, Y+37	; 0x25
    d182:	3e a1       	ldd	r19, Y+38	; 0x26
    d184:	82 0f       	add	r24, r18
    d186:	93 1f       	adc	r25, r19
    d188:	9e a3       	std	Y+38, r25	; 0x26
    d18a:	8d a3       	std	Y+37, r24	; 0x25
    d18c:	0a c0       	rjmp	.+20     	; 0xd1a2 <update_player+0x232>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    d18e:	b8 01       	movw	r22, r16
    d190:	ce 01       	movw	r24, r28
    d192:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
    d196:	2f a1       	ldd	r18, Y+39	; 0x27
    d198:	38 a5       	ldd	r19, Y+40	; 0x28
    d19a:	82 0f       	add	r24, r18
    d19c:	93 1f       	adc	r25, r19
    d19e:	98 a7       	std	Y+40, r25	; 0x28
    d1a0:	8f a3       	std	Y+39, r24	; 0x27
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    d1a2:	ed a4       	ldd	r14, Y+45	; 0x2d
    d1a4:	fe a4       	ldd	r15, Y+46	; 0x2e
    d1a6:	e1 e2       	ldi	r30, 0x21	; 33
    d1a8:	ee 16       	cp	r14, r30
    d1aa:	e3 e0       	ldi	r30, 0x03	; 3
    d1ac:	fe 06       	cpc	r15, r30
    d1ae:	28 f4       	brcc	.+10     	; 0xd1ba <update_player+0x24a>
    d1b0:	b8 01       	movw	r22, r16
    d1b2:	ce 01       	movw	r24, r28
    d1b4:	0e 94 99 50 	call	0xa132	; 0xa132 <get_delta>
    d1b8:	02 c0       	rjmp	.+4      	; 0xd1be <update_player+0x24e>
    d1ba:	80 e0       	ldi	r24, 0x00	; 0
    d1bc:	90 e0       	ldi	r25, 0x00	; 0
    d1be:	e8 0e       	add	r14, r24
    d1c0:	f9 1e       	adc	r15, r25
    d1c2:	fe a6       	std	Y+46, r15	; 0x2e
    d1c4:	ed a6       	std	Y+45, r14	; 0x2d
				collision_detect_shot(player, shot);
    d1c6:	b8 01       	movw	r22, r16
    d1c8:	ce 01       	movw	r24, r28
			send_smart_net_message(player, p, NETEXIT, 1);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
			exit_game();
		}
	}
}
    d1ca:	df 91       	pop	r29
    d1cc:	cf 91       	pop	r28
    d1ce:	1f 91       	pop	r17
    d1d0:	0f 91       	pop	r16
    d1d2:	ff 90       	pop	r15
    d1d4:	ef 90       	pop	r14
    d1d6:	df 90       	pop	r13
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    d1d8:	0c 94 77 65 	jmp	0xcaee	; 0xcaee <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d1dc:	d8 01       	movw	r26, r16
    d1de:	8d 91       	ld	r24, X+
    d1e0:	9c 91       	ld	r25, X
    d1e2:	91 ff       	sbrs	r25, 1
    d1e4:	18 c0       	rjmp	.+48     	; 0xd216 <update_player+0x2a6>
		{
			send_smart_net_message(player, p, NETEXIT, 1);
    d1e6:	21 e0       	ldi	r18, 0x01	; 1
    d1e8:	48 e0       	ldi	r20, 0x08	; 8
    d1ea:	b8 01       	movw	r22, r16
    d1ec:	ce 01       	movw	r24, r28
    d1ee:	0e 94 75 64 	call	0xc8ea	; 0xc8ea <send_smart_net_message>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    d1f2:	24 e0       	ldi	r18, 0x04	; 4
    d1f4:	40 91 8f 0f 	lds	r20, 0x0F8F
    d1f8:	60 91 19 0c 	lds	r22, 0x0C19
    d1fc:	80 91 89 0b 	lds	r24, 0x0B89
    d200:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
			exit_game();
		}
	}
}
    d204:	df 91       	pop	r29
    d206:	cf 91       	pop	r28
    d208:	1f 91       	pop	r17
    d20a:	0f 91       	pop	r16
    d20c:	ff 90       	pop	r15
    d20e:	ef 90       	pop	r14
    d210:	df 90       	pop	r13
	{
		if (p->pressed & BTN_X)
		{
			send_smart_net_message(player, p, NETEXIT, 1);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
			exit_game();
    d212:	0c 94 1f 5a 	jmp	0xb43e	; 0xb43e <exit_game>
		}
	}
}
    d216:	df 91       	pop	r29
    d218:	cf 91       	pop	r28
    d21a:	1f 91       	pop	r17
    d21c:	0f 91       	pop	r16
    d21e:	ff 90       	pop	r15
    d220:	ef 90       	pop	r14
    d222:	df 90       	pop	r13
    d224:	08 95       	ret

0000d226 <collision_detect_player>:
			player->netMessage.shared.y = player->netMessage.shared.y / 100 * 100 - 100;
	}
}

char collision_detect_player(Player* player, u8 hud_x)
{
    d226:	2f 92       	push	r2
    d228:	3f 92       	push	r3
    d22a:	4f 92       	push	r4
    d22c:	5f 92       	push	r5
    d22e:	6f 92       	push	r6
    d230:	7f 92       	push	r7
    d232:	8f 92       	push	r8
    d234:	9f 92       	push	r9
    d236:	af 92       	push	r10
    d238:	bf 92       	push	r11
    d23a:	cf 92       	push	r12
    d23c:	df 92       	push	r13
    d23e:	ef 92       	push	r14
    d240:	ff 92       	push	r15
    d242:	0f 93       	push	r16
    d244:	1f 93       	push	r17
    d246:	cf 93       	push	r28
    d248:	df 93       	push	r29
    d24a:	cd b7       	in	r28, 0x3d	; 61
    d24c:	de b7       	in	r29, 0x3e	; 62
    d24e:	6c 97       	sbiw	r28, 0x1c	; 28
    d250:	0f b6       	in	r0, 0x3f	; 63
    d252:	f8 94       	cli
    d254:	de bf       	out	0x3e, r29	; 62
    d256:	0f be       	out	0x3f, r0	; 63
    d258:	cd bf       	out	0x3d, r28	; 61
    d25a:	4c 01       	movw	r8, r24
    d25c:	36 2f       	mov	r19, r22
	int tiles[3] = {0,0,0};
    d25e:	1a 82       	std	Y+2, r1	; 0x02
    d260:	19 82       	std	Y+1, r1	; 0x01
    d262:	1c 82       	std	Y+4, r1	; 0x04
    d264:	1b 82       	std	Y+3, r1	; 0x03
    d266:	1e 82       	std	Y+6, r1	; 0x06
    d268:	1d 82       	std	Y+5, r1	; 0x05
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->netMessage.shared.direction);
    d26a:	1c 01       	movw	r2, r24
    d26c:	82 e7       	ldi	r24, 0x72	; 114
    d26e:	28 0e       	add	r2, r24
    d270:	31 1c       	adc	r3, r1

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->netMessage.shared.x / 800;
	u8 y = player->netMessage.shared.y / 800 - 3;
    d272:	d4 01       	movw	r26, r8
    d274:	a8 58       	subi	r26, 0x88	; 136
    d276:	bf 4f       	sbci	r27, 0xFF	; 255
    d278:	bf 87       	std	Y+15, r27	; 0x0f
    d27a:	ae 87       	std	Y+14, r26	; 0x0e
    d27c:	8d 91       	ld	r24, X+
    d27e:	9c 91       	ld	r25, X
    d280:	e0 e2       	ldi	r30, 0x20	; 32
    d282:	f3 e0       	ldi	r31, 0x03	; 3
    d284:	bf 01       	movw	r22, r30
    d286:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    d28a:	4d ef       	ldi	r20, 0xFD	; 253
    d28c:	46 0f       	add	r20, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->netMessage.shared.x / 800;
    d28e:	84 01       	movw	r16, r8
    d290:	0a 58       	subi	r16, 0x8A	; 138
    d292:	1f 4f       	sbci	r17, 0xFF	; 255
    d294:	d8 01       	movw	r26, r16
    d296:	8d 91       	ld	r24, X+
    d298:	9c 91       	ld	r25, X
    d29a:	bf 01       	movw	r22, r30
    d29c:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->netMessage.shared.direction);
    d2a0:	f1 01       	movw	r30, r2
    d2a2:	20 81       	ld	r18, Z
    d2a4:	ce 01       	movw	r24, r28
    d2a6:	01 96       	adiw	r24, 0x01	; 1
    d2a8:	3c 8f       	std	Y+28, r19	; 0x1c
    d2aa:	0e 94 48 56 	call	0xac90	; 0xac90 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->netMessage.shared))
    d2ae:	c1 01       	movw	r24, r2
    d2b0:	0e 94 1b 55 	call	0xaa36	; 0xaa36 <collision_detect_boundries>
    d2b4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d2b6:	88 23       	and	r24, r24
    d2b8:	51 f0       	breq	.+20     	; 0xd2ce <collision_detect_player+0xa8>
	{
		recoil_sprite(&player->netMessage.shared);
    d2ba:	c1 01       	movw	r24, r2
    d2bc:	0e 94 14 52 	call	0xa428	; 0xa428 <recoil_sprite>
		player->netMessage.shared.speed = 0;
    d2c0:	f4 01       	movw	r30, r8
    d2c2:	ed 58       	subi	r30, 0x8D	; 141
    d2c4:	ff 4f       	sbci	r31, 0xFF	; 255
    d2c6:	11 82       	std	Z+1, r1	; 0x01
    d2c8:	10 82       	st	Z, r1
		return explode;
    d2ca:	1a 8a       	std	Y+18, r1	; 0x12
    d2cc:	7c c1       	rjmp	.+760    	; 0xd5c6 <collision_detect_player+0x3a0>
    d2ce:	ce 01       	movw	r24, r28
    d2d0:	01 96       	adiw	r24, 0x01	; 1
    d2d2:	98 87       	std	Y+8, r25	; 0x08
    d2d4:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->netMessage.shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->netMessage.shared))
    d2d6:	1d 86       	std	Y+13, r1	; 0x0d
    d2d8:	1c 86       	std	Y+12, r1	; 0x0c
    d2da:	1b 86       	std	Y+11, r1	; 0x0b
    d2dc:	1a 8a       	std	Y+18, r1	; 0x12
    d2de:	1b 8a       	std	Y+19, r1	; 0x13
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
			SetTile(tile_x, tile_y, 0);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
    d2e0:	d4 01       	movw	r26, r8
    d2e2:	af 58       	subi	r26, 0x8F	; 143
    d2e4:	bf 4f       	sbci	r27, 0xFF	; 255
    d2e6:	bd 8b       	std	Y+21, r27	; 0x15
    d2e8:	ac 8b       	std	Y+20, r26	; 0x14
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y, 1);
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d2ea:	bb e0       	ldi	r27, 0x0B	; 11
    d2ec:	b3 0f       	add	r27, r19
    d2ee:	ba 8f       	std	Y+26, r27	; 0x1a
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y, 1);
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d2f0:	36 5f       	subi	r19, 0xF6	; 246
    d2f2:	3b 8f       	std	Y+27, r19	; 0x1b
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d2f4:	50 e2       	ldi	r21, 0x20	; 32
    d2f6:	45 2e       	mov	r4, r21
    d2f8:	53 e0       	ldi	r21, 0x03	; 3
    d2fa:	55 2e       	mov	r5, r21
    d2fc:	19 8b       	std	Y+17, r17	; 0x11
    d2fe:	08 8b       	std	Y+16, r16	; 0x10
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->netMessage.shared.x, player->netMessage.shared.y, 1600, 1600))
		{
			(player->handle_id == 9) ? recoil_sprite(&player->netMessage.shared) : recoil_sprite_fine(player, &player->netMessage.shared);
			player->netMessage.shared.speed = 0;
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d300:	ee 85       	ldd	r30, Y+14	; 0x0e
    d302:	ff 85       	ldd	r31, Y+15	; 0x0f
    d304:	ff 8b       	std	Y+23, r31	; 0x17
    d306:	ee 8b       	std	Y+22, r30	; 0x16
		{
			collision_count++;
			collision_tile = i;
			player->netMessage.shared.speed = 0;
    d308:	c4 01       	movw	r24, r8
    d30a:	8d 58       	subi	r24, 0x8D	; 141
    d30c:	9f 4f       	sbci	r25, 0xFF	; 255
    d30e:	99 8f       	std	Y+25, r25	; 0x19
    d310:	88 8f       	std	Y+24, r24	; 0x18
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    d312:	af 81       	ldd	r26, Y+7	; 0x07
    d314:	b8 85       	ldd	r27, Y+8	; 0x08
    d316:	0d 90       	ld	r0, X+
    d318:	bc 91       	ld	r27, X
    d31a:	a0 2d       	mov	r26, r0
    d31c:	ba 87       	std	Y+10, r27	; 0x0a
    d31e:	a9 87       	std	Y+9, r26	; 0x09
    d320:	cd 01       	movw	r24, r26
    d322:	6e e1       	ldi	r22, 0x1E	; 30
    d324:	70 e0       	ldi	r23, 0x00	; 0
    d326:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    d32a:	68 2e       	mov	r6, r24
		tile_y = 3 + tiles[i] / 30;
    d32c:	43 e0       	ldi	r20, 0x03	; 3
    d32e:	74 2e       	mov	r7, r20
    d330:	76 0e       	add	r7, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->netMessage.shared.x, player->netMessage.shared.y, 1600, 1600))
    d332:	89 85       	ldd	r24, Y+9	; 0x09
    d334:	9a 85       	ldd	r25, Y+10	; 0x0a
    d336:	0e 94 a0 52 	call	0xa540	; 0xa540 <solid_directional_tile>
    d33a:	88 23       	and	r24, r24
    d33c:	19 f1       	breq	.+70     	; 0xd384 <collision_detect_player+0x15e>
    d33e:	ee 89       	ldd	r30, Y+22	; 0x16
    d340:	ff 89       	ldd	r31, Y+23	; 0x17
    d342:	40 81       	ld	r20, Z
    d344:	51 81       	ldd	r21, Z+1	; 0x01
    d346:	a8 89       	ldd	r26, Y+16	; 0x10
    d348:	b9 89       	ldd	r27, Y+17	; 0x11
    d34a:	6d 91       	ld	r22, X+
    d34c:	7c 91       	ld	r23, X
    d34e:	00 e4       	ldi	r16, 0x40	; 64
    d350:	16 e0       	ldi	r17, 0x06	; 6
    d352:	20 e4       	ldi	r18, 0x40	; 64
    d354:	36 e0       	ldi	r19, 0x06	; 6
    d356:	89 85       	ldd	r24, Y+9	; 0x09
    d358:	9a 85       	ldd	r25, Y+10	; 0x0a
    d35a:	0e 94 ca 52 	call	0xa594	; 0xa594 <collides_directional_tile>
    d35e:	88 23       	and	r24, r24
    d360:	89 f0       	breq	.+34     	; 0xd384 <collision_detect_player+0x15e>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->netMessage.shared) : recoil_sprite_fine(player, &player->netMessage.shared);
    d362:	f4 01       	movw	r30, r8
    d364:	80 81       	ld	r24, Z
    d366:	89 30       	cpi	r24, 0x09	; 9
    d368:	21 f4       	brne	.+8      	; 0xd372 <collision_detect_player+0x14c>
    d36a:	c1 01       	movw	r24, r2
    d36c:	0e 94 14 52 	call	0xa428	; 0xa428 <recoil_sprite>
    d370:	04 c0       	rjmp	.+8      	; 0xd37a <collision_detect_player+0x154>
    d372:	b1 01       	movw	r22, r2
    d374:	c4 01       	movw	r24, r8
    d376:	0e 94 62 52 	call	0xa4c4	; 0xa4c4 <recoil_sprite_fine>
			player->netMessage.shared.speed = 0;
    d37a:	a8 8d       	ldd	r26, Y+24	; 0x18
    d37c:	b9 8d       	ldd	r27, Y+25	; 0x19
    d37e:	1d 92       	st	X+, r1
    d380:	1c 92       	st	X, r1
    d382:	e9 c0       	rjmp	.+466    	; 0xd556 <collision_detect_player+0x330>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d384:	89 85       	ldd	r24, Y+9	; 0x09
    d386:	9a 85       	ldd	r25, Y+10	; 0x0a
    d388:	0e 94 8e 52 	call	0xa51c	; 0xa51c <solid_square_tile>
    d38c:	88 23       	and	r24, r24
    d38e:	61 f1       	breq	.+88     	; 0xd3e8 <collision_detect_player+0x1c2>
    d390:	74 9c       	mul	r7, r4
    d392:	70 01       	movw	r14, r0
    d394:	75 9c       	mul	r7, r5
    d396:	f0 0c       	add	r15, r0
    d398:	11 24       	eor	r1, r1
    d39a:	64 9c       	mul	r6, r4
    d39c:	80 01       	movw	r16, r0
    d39e:	65 9c       	mul	r6, r5
    d3a0:	10 0d       	add	r17, r0
    d3a2:	11 24       	eor	r1, r1
    d3a4:	ee 89       	ldd	r30, Y+22	; 0x16
    d3a6:	ff 89       	ldd	r31, Y+23	; 0x17
    d3a8:	60 81       	ld	r22, Z
    d3aa:	71 81       	ldd	r23, Z+1	; 0x01
    d3ac:	20 e2       	ldi	r18, 0x20	; 32
    d3ae:	a2 2e       	mov	r10, r18
    d3b0:	23 e0       	ldi	r18, 0x03	; 3
    d3b2:	b2 2e       	mov	r11, r18
    d3b4:	30 e2       	ldi	r19, 0x20	; 32
    d3b6:	c3 2e       	mov	r12, r19
    d3b8:	33 e0       	ldi	r19, 0x03	; 3
    d3ba:	d3 2e       	mov	r13, r19
    d3bc:	20 e4       	ldi	r18, 0x40	; 64
    d3be:	36 e0       	ldi	r19, 0x06	; 6
    d3c0:	40 e4       	ldi	r20, 0x40	; 64
    d3c2:	56 e0       	ldi	r21, 0x06	; 6
    d3c4:	a8 89       	ldd	r26, Y+16	; 0x10
    d3c6:	b9 89       	ldd	r27, Y+17	; 0x11
    d3c8:	8d 91       	ld	r24, X+
    d3ca:	9c 91       	ld	r25, X
    d3cc:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <LBCollides>
    d3d0:	88 23       	and	r24, r24
    d3d2:	51 f0       	breq	.+20     	; 0xd3e8 <collision_detect_player+0x1c2>
		{
			collision_count++;
    d3d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    d3d6:	bf 5f       	subi	r27, 0xFF	; 255
    d3d8:	bc 87       	std	Y+12, r27	; 0x0c
			collision_tile = i;
			player->netMessage.shared.speed = 0;
    d3da:	e8 8d       	ldd	r30, Y+24	; 0x18
    d3dc:	f9 8d       	ldd	r31, Y+25	; 0x19
    d3de:	11 82       	std	Z+1, r1	; 0x01
    d3e0:	10 82       	st	Z, r1
    d3e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    d3e4:	fb 87       	std	Y+11, r31	; 0x0b
    d3e6:	b7 c0       	rjmp	.+366    	; 0xd556 <collision_detect_player+0x330>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d3e8:	e9 85       	ldd	r30, Y+9	; 0x09
    d3ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    d3ec:	e1 5d       	subi	r30, 0xD1	; 209
    d3ee:	f3 4f       	sbci	r31, 0xF3	; 243
    d3f0:	81 81       	ldd	r24, Z+1	; 0x01
    d3f2:	8d 34       	cpi	r24, 0x4D	; 77
    d3f4:	69 f5       	brne	.+90     	; 0xd450 <collision_detect_player+0x22a>
    d3f6:	74 9c       	mul	r7, r4
    d3f8:	70 01       	movw	r14, r0
    d3fa:	75 9c       	mul	r7, r5
    d3fc:	f0 0c       	add	r15, r0
    d3fe:	11 24       	eor	r1, r1
    d400:	64 9c       	mul	r6, r4
    d402:	80 01       	movw	r16, r0
    d404:	65 9c       	mul	r6, r5
    d406:	10 0d       	add	r17, r0
    d408:	11 24       	eor	r1, r1
    d40a:	ae 85       	ldd	r26, Y+14	; 0x0e
    d40c:	bf 85       	ldd	r27, Y+15	; 0x0f
    d40e:	6d 91       	ld	r22, X+
    d410:	7c 91       	ld	r23, X
    d412:	80 e2       	ldi	r24, 0x20	; 32
    d414:	a8 2e       	mov	r10, r24
    d416:	83 e0       	ldi	r24, 0x03	; 3
    d418:	b8 2e       	mov	r11, r24
    d41a:	90 e2       	ldi	r25, 0x20	; 32
    d41c:	c9 2e       	mov	r12, r25
    d41e:	93 e0       	ldi	r25, 0x03	; 3
    d420:	d9 2e       	mov	r13, r25
    d422:	20 e4       	ldi	r18, 0x40	; 64
    d424:	36 e0       	ldi	r19, 0x06	; 6
    d426:	40 e4       	ldi	r20, 0x40	; 64
    d428:	56 e0       	ldi	r21, 0x06	; 6
    d42a:	e8 89       	ldd	r30, Y+16	; 0x10
    d42c:	f9 89       	ldd	r31, Y+17	; 0x11
    d42e:	80 81       	ld	r24, Z
    d430:	91 81       	ldd	r25, Z+1	; 0x01
    d432:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <LBCollides>
    d436:	88 23       	and	r24, r24
    d438:	09 f4       	brne	.+2      	; 0xd43c <collision_detect_player+0x216>
    d43a:	8d c0       	rjmp	.+282    	; 0xd556 <collision_detect_player+0x330>
		{
			player->max_speed = WATER_SPEED;
    d43c:	e4 ec       	ldi	r30, 0xC4	; 196
    d43e:	f9 e0       	ldi	r31, 0x09	; 9
    d440:	d4 01       	movw	r26, r8
    d442:	1c 96       	adiw	r26, 0x0c	; 12
    d444:	fc 93       	st	X, r31
    d446:	ee 93       	st	-X, r30
    d448:	1b 97       	sbiw	r26, 0x0b	; 11
    d44a:	f1 e0       	ldi	r31, 0x01	; 1
    d44c:	fb 8b       	std	Y+19, r31	; 0x13
    d44e:	9b c0       	rjmp	.+310    	; 0xd586 <collision_detect_player+0x360>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d450:	8c 32       	cpi	r24, 0x2C	; 44
    d452:	89 f2       	breq	.-94     	; 0xd3f6 <collision_detect_player+0x1d0>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
    d454:	87 30       	cpi	r24, 0x07	; 7
    d456:	19 f5       	brne	.+70     	; 0xd49e <collision_detect_player+0x278>
    d458:	ac 89       	ldd	r26, Y+20	; 0x14
    d45a:	bd 89       	ldd	r27, Y+21	; 0x15
    d45c:	8c 91       	ld	r24, X
    d45e:	80 fd       	sbrc	r24, 0
    d460:	7a c0       	rjmp	.+244    	; 0xd556 <collision_detect_player+0x330>
    d462:	c4 01       	movw	r24, r8
    d464:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    d468:	81 11       	cpse	r24, r1
    d46a:	75 c0       	rjmp	.+234    	; 0xd556 <collision_detect_player+0x330>
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y, 1);
    d46c:	21 e0       	ldi	r18, 0x01	; 1
    d46e:	47 2d       	mov	r20, r7
    d470:	66 2d       	mov	r22, r6
    d472:	83 e0       	ldi	r24, 0x03	; 3
    d474:	0e 94 2b 64 	call	0xc856	; 0xc856 <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d478:	af 81       	ldd	r26, Y+7	; 0x07
    d47a:	b8 85       	ldd	r27, Y+8	; 0x08
    d47c:	ed 91       	ld	r30, X+
    d47e:	fc 91       	ld	r31, X
    d480:	e1 5d       	subi	r30, 0xD1	; 209
    d482:	f3 4f       	sbci	r31, 0xF3	; 243
    d484:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    d486:	84 e6       	ldi	r24, 0x64	; 100
    d488:	99 e1       	ldi	r25, 0x19	; 25
    d48a:	f4 01       	movw	r30, r8
    d48c:	94 87       	std	Z+12, r25	; 0x0c
    d48e:	83 87       	std	Z+11, r24	; 0x0b
			player->has_over_speed = true;
    d490:	91 e0       	ldi	r25, 0x01	; 1
    d492:	96 87       	std	Z+14, r25	; 0x0e
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d494:	4d eb       	ldi	r20, 0xBD	; 189
    d496:	5a e6       	ldi	r21, 0x6A	; 106
    d498:	61 e0       	ldi	r22, 0x01	; 1
    d49a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d49c:	20 c0       	rjmp	.+64     	; 0xd4de <collision_detect_player+0x2b8>
			SetTile(tile_x, tile_y, 0);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
    d49e:	89 30       	cpi	r24, 0x09	; 9
    d4a0:	81 f5       	brne	.+96     	; 0xd502 <collision_detect_player+0x2dc>
    d4a2:	ac 89       	ldd	r26, Y+20	; 0x14
    d4a4:	bd 89       	ldd	r27, Y+21	; 0x15
    d4a6:	8c 91       	ld	r24, X
    d4a8:	80 fd       	sbrc	r24, 0
    d4aa:	55 c0       	rjmp	.+170    	; 0xd556 <collision_detect_player+0x330>
    d4ac:	c4 01       	movw	r24, r8
    d4ae:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    d4b2:	81 11       	cpse	r24, r1
    d4b4:	50 c0       	rjmp	.+160    	; 0xd556 <collision_detect_player+0x330>
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y, 1);
    d4b6:	21 e0       	ldi	r18, 0x01	; 1
    d4b8:	47 2d       	mov	r20, r7
    d4ba:	66 2d       	mov	r22, r6
    d4bc:	84 e0       	ldi	r24, 0x04	; 4
    d4be:	0e 94 2b 64 	call	0xc856	; 0xc856 <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d4c2:	af 81       	ldd	r26, Y+7	; 0x07
    d4c4:	b8 85       	ldd	r27, Y+8	; 0x08
    d4c6:	ed 91       	ld	r30, X+
    d4c8:	fc 91       	ld	r31, X
    d4ca:	e1 5d       	subi	r30, 0xD1	; 209
    d4cc:	f3 4f       	sbci	r31, 0xF3	; 243
    d4ce:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    d4d0:	81 e0       	ldi	r24, 0x01	; 1
    d4d2:	f4 01       	movw	r30, r8
    d4d4:	85 87       	std	Z+13, r24	; 0x0d
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d4d6:	47 eb       	ldi	r20, 0xB7	; 183
    d4d8:	5a e6       	ldi	r21, 0x6A	; 106
    d4da:	61 e0       	ldi	r22, 0x01	; 1
    d4dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    d4de:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
			SetTile(tile_x, tile_y, 0);
    d4e2:	40 e0       	ldi	r20, 0x00	; 0
    d4e4:	50 e0       	ldi	r21, 0x00	; 0
    d4e6:	67 2d       	mov	r22, r7
    d4e8:	86 2d       	mov	r24, r6
    d4ea:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
    d4ee:	22 e0       	ldi	r18, 0x02	; 2
    d4f0:	40 91 8f 0f 	lds	r20, 0x0F8F
    d4f4:	60 91 19 0c 	lds	r22, 0x0C19
    d4f8:	80 91 89 0b 	lds	r24, 0x0B89
    d4fc:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
    d500:	2a c0       	rjmp	.+84     	; 0xd556 <collision_detect_player+0x330>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
    d502:	88 30       	cpi	r24, 0x08	; 8
    d504:	41 f5       	brne	.+80     	; 0xd556 <collision_detect_player+0x330>
    d506:	ac 89       	ldd	r26, Y+20	; 0x14
    d508:	bd 89       	ldd	r27, Y+21	; 0x15
    d50a:	8c 91       	ld	r24, X
    d50c:	80 fd       	sbrc	r24, 0
    d50e:	23 c0       	rjmp	.+70     	; 0xd556 <collision_detect_player+0x330>
    d510:	c4 01       	movw	r24, r8
    d512:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    d516:	81 11       	cpse	r24, r1
    d518:	1e c0       	rjmp	.+60     	; 0xd556 <collision_detect_player+0x330>
		{
			send_net_message(NETITEMBOMB, tile_x, tile_y, 1);
    d51a:	21 e0       	ldi	r18, 0x01	; 1
    d51c:	47 2d       	mov	r20, r7
    d51e:	66 2d       	mov	r22, r6
    d520:	85 e0       	ldi	r24, 0x05	; 5
    d522:	0e 94 2b 64 	call	0xc856	; 0xc856 <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d526:	af 81       	ldd	r26, Y+7	; 0x07
    d528:	b8 85       	ldd	r27, Y+8	; 0x08
    d52a:	ed 91       	ld	r30, X+
    d52c:	fc 91       	ld	r31, X
    d52e:	e1 5d       	subi	r30, 0xD1	; 209
    d530:	f3 4f       	sbci	r31, 0xF3	; 243
    d532:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    d534:	40 e0       	ldi	r20, 0x00	; 0
    d536:	50 e0       	ldi	r21, 0x00	; 0
    d538:	67 2d       	mov	r22, r7
    d53a:	86 2d       	mov	r24, r6
    d53c:	0e 94 4c 3a 	call	0x7498	; 0x7498 <SetTile>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
    d540:	22 e0       	ldi	r18, 0x02	; 2
    d542:	40 91 8f 0f 	lds	r20, 0x0F8F
    d546:	60 91 19 0c 	lds	r22, 0x0C19
    d54a:	80 91 89 0b 	lds	r24, 0x0B89
    d54e:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
			explode = 1;
    d552:	b1 e0       	ldi	r27, 0x01	; 1
    d554:	ba 8b       	std	Y+18, r27	; 0x12
		}
		
		if (!hit_water)
    d556:	eb 89       	ldd	r30, Y+19	; 0x13
    d558:	e1 11       	cpse	r30, r1
    d55a:	13 c0       	rjmp	.+38     	; 0xd582 <collision_detect_player+0x35c>
		{
			player->max_speed = MAX_SPEED;
    d55c:	e8 e8       	ldi	r30, 0x88	; 136
    d55e:	f3 e1       	ldi	r31, 0x13	; 19
    d560:	d4 01       	movw	r26, r8
    d562:	1c 96       	adiw	r26, 0x0c	; 12
    d564:	fc 93       	st	X, r31
    d566:	ee 93       	st	-X, r30
    d568:	1b 97       	sbiw	r26, 0x0b	; 11
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    d56a:	1e 96       	adiw	r26, 0x0e	; 14
    d56c:	8c 91       	ld	r24, X
    d56e:	1e 97       	sbiw	r26, 0x0e	; 14
    d570:	88 23       	and	r24, r24
    d572:	49 f0       	breq	.+18     	; 0xd586 <collision_detect_player+0x360>
    d574:	84 e6       	ldi	r24, 0x64	; 100
    d576:	99 e1       	ldi	r25, 0x19	; 25
    d578:	1c 96       	adiw	r26, 0x0c	; 12
    d57a:	9c 93       	st	X, r25
    d57c:	8e 93       	st	-X, r24
    d57e:	1b 97       	sbiw	r26, 0x0b	; 11
    d580:	02 c0       	rjmp	.+4      	; 0xd586 <collision_detect_player+0x360>
    d582:	91 e0       	ldi	r25, 0x01	; 1
    d584:	9b 8b       	std	Y+19, r25	; 0x13
		player->netMessage.shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    d586:	ad 85       	ldd	r26, Y+13	; 0x0d
    d588:	af 5f       	subi	r26, 0xFF	; 255
    d58a:	ad 87       	std	Y+13, r26	; 0x0d
    d58c:	ef 81       	ldd	r30, Y+7	; 0x07
    d58e:	f8 85       	ldd	r31, Y+8	; 0x08
    d590:	32 96       	adiw	r30, 0x02	; 2
    d592:	f8 87       	std	Y+8, r31	; 0x08
    d594:	ef 83       	std	Y+7, r30	; 0x07
    d596:	a3 30       	cpi	r26, 0x03	; 3
    d598:	09 f0       	breq	.+2      	; 0xd59c <collision_detect_player+0x376>
    d59a:	bb ce       	rjmp	.-650    	; 0xd312 <collision_detect_player+0xec>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->netMessage.shared);
    d59c:	fc 85       	ldd	r31, Y+12	; 0x0c
    d59e:	ff 23       	and	r31, r31
    d5a0:	91 f0       	breq	.+36     	; 0xd5c6 <collision_detect_player+0x3a0>
    d5a2:	c1 01       	movw	r24, r2
    d5a4:	0e 94 14 52 	call	0xa428	; 0xa428 <recoil_sprite>
	if (collision_count == 1)
    d5a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    d5aa:	81 30       	cpi	r24, 0x01	; 1
    d5ac:	61 f4       	brne	.+24     	; 0xd5c6 <collision_detect_player+0x3a0>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    d5ae:	fe 01       	movw	r30, r28
    d5b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    d5b2:	e9 0f       	add	r30, r25
    d5b4:	f1 1d       	adc	r31, r1
    d5b6:	e9 0f       	add	r30, r25
    d5b8:	f1 1d       	adc	r31, r1
    d5ba:	41 81       	ldd	r20, Z+1	; 0x01
    d5bc:	52 81       	ldd	r21, Z+2	; 0x02
    d5be:	69 2f       	mov	r22, r25
    d5c0:	c4 01       	movw	r24, r8
    d5c2:	0e 94 9b 56 	call	0xad36	; 0xad36 <slide>
	}
	return explode;
}
    d5c6:	8a 89       	ldd	r24, Y+18	; 0x12
    d5c8:	6c 96       	adiw	r28, 0x1c	; 28
    d5ca:	0f b6       	in	r0, 0x3f	; 63
    d5cc:	f8 94       	cli
    d5ce:	de bf       	out	0x3e, r29	; 62
    d5d0:	0f be       	out	0x3f, r0	; 63
    d5d2:	cd bf       	out	0x3d, r28	; 61
    d5d4:	df 91       	pop	r29
    d5d6:	cf 91       	pop	r28
    d5d8:	1f 91       	pop	r17
    d5da:	0f 91       	pop	r16
    d5dc:	ff 90       	pop	r15
    d5de:	ef 90       	pop	r14
    d5e0:	df 90       	pop	r13
    d5e2:	cf 90       	pop	r12
    d5e4:	bf 90       	pop	r11
    d5e6:	af 90       	pop	r10
    d5e8:	9f 90       	pop	r9
    d5ea:	8f 90       	pop	r8
    d5ec:	7f 90       	pop	r7
    d5ee:	6f 90       	pop	r6
    d5f0:	5f 90       	pop	r5
    d5f2:	4f 90       	pop	r4
    d5f4:	3f 90       	pop	r3
    d5f6:	2f 90       	pop	r2
    d5f8:	08 95       	ret

0000d5fa <update_turret_shot>:
		}
	}
}

void update_turret_shot(Turret* t, Shot* s)
{	
    d5fa:	0f 93       	push	r16
    d5fc:	1f 93       	push	r17
    d5fe:	cf 93       	push	r28
    d600:	df 93       	push	r29
    d602:	fc 01       	movw	r30, r24
    d604:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    d606:	80 85       	ldd	r24, Z+8	; 0x08
    d608:	81 11       	cpse	r24, r1
    d60a:	02 c0       	rjmp	.+4      	; 0xd610 <update_turret_shot+0x16>
	{
		s->active = 0;
    d60c:	1b 86       	std	Y+11, r1	; 0x0b
		return;
    d60e:	5b c0       	rjmp	.+182    	; 0xd6c6 <update_turret_shot+0xcc>
	}
	if (!s->active)
    d610:	8b 85       	ldd	r24, Y+11	; 0x0b
    d612:	81 11       	cpse	r24, r1
    d614:	17 c0       	rjmp	.+46     	; 0xd644 <update_turret_shot+0x4a>
	{
		s->active = 1;
    d616:	81 e0       	ldi	r24, 0x01	; 1
    d618:	8b 87       	std	Y+11, r24	; 0x0b
		s->shared.x = t->shared.x+300;
    d61a:	84 81       	ldd	r24, Z+4	; 0x04
    d61c:	95 81       	ldd	r25, Z+5	; 0x05
    d61e:	84 5d       	subi	r24, 0xD4	; 212
    d620:	9e 4f       	sbci	r25, 0xFE	; 254
    d622:	9d 83       	std	Y+5, r25	; 0x05
    d624:	8c 83       	std	Y+4, r24	; 0x04
		s->shared.y = t->shared.y+300;
    d626:	86 81       	ldd	r24, Z+6	; 0x06
    d628:	97 81       	ldd	r25, Z+7	; 0x07
    d62a:	84 5d       	subi	r24, 0xD4	; 212
    d62c:	9e 4f       	sbci	r25, 0xFE	; 254
    d62e:	9f 83       	std	Y+7, r25	; 0x07
    d630:	8e 83       	std	Y+6, r24	; 0x06
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_CANNONBALL);
    d632:	21 e0       	ldi	r18, 0x01	; 1
    d634:	40 91 8f 0f 	lds	r20, 0x0F8F
    d638:	60 91 19 0c 	lds	r22, 0x0C19
    d63c:	80 91 89 0b 	lds	r24, 0x0B89
    d640:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
	}
	s->shared.y += BOSS_TURRET_SHOT_SPEED / FRAME_TIME_INVERTED;
    d644:	8e 81       	ldd	r24, Y+6	; 0x06
    d646:	9f 81       	ldd	r25, Y+7	; 0x07
    d648:	9c 01       	movw	r18, r24
    d64a:	20 56       	subi	r18, 0x60	; 96
    d64c:	3e 4f       	sbci	r19, 0xFE	; 254
    d64e:	3f 83       	std	Y+7, r19	; 0x07
    d650:	2e 83       	std	Y+6, r18	; 0x06
	
	/* Level boundries first */
	if (s->shared.y + 800 > 21600)
    d652:	80 54       	subi	r24, 0x40	; 64
    d654:	9b 4f       	sbci	r25, 0xFB	; 251
    d656:	81 36       	cpi	r24, 0x61	; 97
    d658:	94 45       	sbci	r25, 0x54	; 84
    d65a:	c0 f6       	brcc	.-80     	; 0xd60c <update_turret_shot+0x12>
		s->active = 0;
		return;
	}
	
	/* Player interaction */	
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(game.boss_fight_player))
    d65c:	00 91 85 0b 	lds	r16, 0x0B85
    d660:	10 91 86 0b 	lds	r17, 0x0B86
    d664:	be 01       	movw	r22, r28
    d666:	c8 01       	movw	r24, r16
    d668:	0e 94 93 54 	call	0xa926	; 0xa926 <player_shot>
    d66c:	88 23       	and	r24, r24
    d66e:	59 f1       	breq	.+86     	; 0xd6c6 <update_turret_shot+0xcc>
    d670:	f8 01       	movw	r30, r16
    d672:	ef 58       	subi	r30, 0x8F	; 143
    d674:	ff 4f       	sbci	r31, 0xFF	; 255
    d676:	80 81       	ld	r24, Z
    d678:	80 fd       	sbrc	r24, 0
    d67a:	25 c0       	rjmp	.+74     	; 0xd6c6 <update_turret_shot+0xcc>
    d67c:	c8 01       	movw	r24, r16
    d67e:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    d682:	81 11       	cpse	r24, r1
    d684:	20 c0       	rjmp	.+64     	; 0xd6c6 <update_turret_shot+0xcc>
	{
		game.boss_fight_player_lives--;
    d686:	80 91 7b 0b 	lds	r24, 0x0B7B
    d68a:	81 50       	subi	r24, 0x01	; 1
    d68c:	80 93 7b 0b 	sts	0x0B7B, r24
		if (game.boss_fight_player_lives <= 0)
    d690:	81 11       	cpse	r24, r1
    d692:	03 c0       	rjmp	.+6      	; 0xd69a <update_turret_shot+0xa0>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    d694:	80 e1       	ldi	r24, 0x10	; 16
    d696:	80 93 79 0b 	sts	0x0B79, r24
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    d69a:	60 91 7a 0b 	lds	r22, 0x0B7A
    d69e:	c8 01       	movw	r24, r16
    d6a0:	0e 94 69 55 	call	0xaad2	; 0xaad2 <kill_player>
    d6a4:	86 e0       	ldi	r24, 0x06	; 6
    d6a6:	0e 94 7e 49 	call	0x92fc	; 0x92fc <LBPlaySound.part.5>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETHITBYTURRET, 0, 0, game.boss_fight_player_lives == 0);
    d6aa:	21 e0       	ldi	r18, 0x01	; 1
    d6ac:	80 91 7b 0b 	lds	r24, 0x0B7B
    d6b0:	81 11       	cpse	r24, r1
    d6b2:	20 e0       	ldi	r18, 0x00	; 0
    d6b4:	40 e0       	ldi	r20, 0x00	; 0
    d6b6:	60 e0       	ldi	r22, 0x00	; 0
    d6b8:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    d6ba:	df 91       	pop	r29
    d6bc:	cf 91       	pop	r28
    d6be:	1f 91       	pop	r17
    d6c0:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETHITBYTURRET, 0, 0, game.boss_fight_player_lives == 0);
    d6c2:	0c 94 2b 64 	jmp	0xc856	; 0xc856 <send_net_message>
	}
}
    d6c6:	df 91       	pop	r29
    d6c8:	cf 91       	pop	r28
    d6ca:	1f 91       	pop	r17
    d6cc:	0f 91       	pop	r16
    d6ce:	08 95       	ret

0000d6d0 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    d6d0:	df 92       	push	r13
    d6d2:	ef 92       	push	r14
    d6d4:	ff 92       	push	r15
    d6d6:	0f 93       	push	r16
    d6d8:	1f 93       	push	r17
    d6da:	cf 93       	push	r28
    d6dc:	df 93       	push	r29
    d6de:	8c 01       	movw	r16, r24
    d6e0:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    d6e2:	80 91 78 0b 	lds	r24, 0x0B78
    d6e6:	88 23       	and	r24, r24
    d6e8:	19 f1       	breq	.+70     	; 0xd730 <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    d6ea:	0e 94 50 4c 	call	0x98a0	; 0x98a0 <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    d6ee:	4c e1       	ldi	r20, 0x1C	; 28
    d6f0:	5b e6       	ldi	r21, 0x6B	; 107
    d6f2:	6c e0       	ldi	r22, 0x0C	; 12
    d6f4:	88 e0       	ldi	r24, 0x08	; 8
    d6f6:	0e 94 86 48 	call	0x910c	; 0x910c <DrawMap>
		Print(12, 13, (char*) strPaused);
    d6fa:	4b eb       	ldi	r20, 0xBB	; 187
    d6fc:	53 e0       	ldi	r21, 0x03	; 3
    d6fe:	6d e0       	ldi	r22, 0x0D	; 13
    d700:	70 e0       	ldi	r23, 0x00	; 0
    d702:	8c e0       	ldi	r24, 0x0C	; 12
    d704:	90 e0       	ldi	r25, 0x00	; 0
    d706:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		Print(11, 14, (char*) strExit);
    d70a:	42 ec       	ldi	r20, 0xC2	; 194
    d70c:	53 e0       	ldi	r21, 0x03	; 3
    d70e:	6e e0       	ldi	r22, 0x0E	; 14
    d710:	70 e0       	ldi	r23, 0x00	; 0
    d712:	8b e0       	ldi	r24, 0x0B	; 11
    d714:	90 e0       	ldi	r25, 0x00	; 0
    d716:	0e 94 06 49 	call	0x920c	; 0x920c <Print>
		
		// Update
		update_player(p1, &player1);
    d71a:	68 ea       	ldi	r22, 0xA8	; 168
    d71c:	7b e0       	ldi	r23, 0x0B	; 11
    d71e:	c8 01       	movw	r24, r16
    d720:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <update_player>
		update_player(p2, &player2);
    d724:	6e e1       	ldi	r22, 0x1E	; 30
    d726:	7f e0       	ldi	r23, 0x0F	; 15
    d728:	ce 01       	movw	r24, r28
    d72a:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <update_player>
    d72e:	ca c1       	rjmp	.+916    	; 0xdac4 <update_level+0x3f4>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    d730:	90 91 79 0b 	lds	r25, 0x0B79
    d734:	91 30       	cpi	r25, 0x01	; 1
    d736:	19 f4       	brne	.+6      	; 0xd73e <update_level+0x6e>
	{
		// Render
		render_boss_fight_scope_load();
    d738:	0e 94 6d 58 	call	0xb0da	; 0xb0da <render_boss_fight_scope_load>
    d73c:	05 c0       	rjmp	.+10     	; 0xd748 <update_level+0x78>
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
		
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    d73e:	92 30       	cpi	r25, 0x02	; 2
    d740:	09 f0       	breq	.+2      	; 0xd744 <update_level+0x74>
    d742:	4e c0       	rjmp	.+156    	; 0xd7e0 <update_level+0x110>
	{
		// Render
		render_boss_fight_sub_load();
    d744:	0e 94 80 58 	call	0xb100	; 0xb100 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d748:	60 e0       	ldi	r22, 0x00	; 0
    d74a:	80 91 85 0b 	lds	r24, 0x0B85
    d74e:	90 91 86 0b 	lds	r25, 0x0B86
    d752:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <tank_map>
    d756:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d758:	40 e0       	ldi	r20, 0x00	; 0
    d75a:	6f e4       	ldi	r22, 0x4F	; 79
    d75c:	71 e3       	ldi	r23, 0x31	; 49
    d75e:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d762:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d764:	6c 2f       	mov	r22, r28
    d766:	80 91 85 0b 	lds	r24, 0x0B85
    d76a:	90 91 86 0b 	lds	r25, 0x0B86
    d76e:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
    d772:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d774:	40 e0       	ldi	r20, 0x00	; 0
    d776:	65 e5       	ldi	r22, 0x55	; 85
    d778:	71 e3       	ldi	r23, 0x31	; 49
    d77a:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d77e:	6c 2f       	mov	r22, r28
    d780:	80 91 85 0b 	lds	r24, 0x0B85
    d784:	90 91 86 0b 	lds	r25, 0x0B86
    d788:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d78c:	60 e0       	ldi	r22, 0x00	; 0
    d78e:	80 91 85 0b 	lds	r24, 0x0B85
    d792:	90 91 86 0b 	lds	r25, 0x0B86
    d796:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d79a:	6c 2f       	mov	r22, r28
    d79c:	80 91 85 0b 	lds	r24, 0x0B85
    d7a0:	90 91 86 0b 	lds	r25, 0x0B86
    d7a4:	0e 94 08 51 	call	0xa210	; 0xa210 <render_shot>
		render_shot(&player2, p2_shot_index);
    d7a8:	6d 2f       	mov	r22, r29
    d7aa:	8e e1       	ldi	r24, 0x1E	; 30
    d7ac:	9f e0       	ldi	r25, 0x0F	; 15
    d7ae:	0e 94 08 51 	call	0xa210	; 0xa210 <render_shot>
		render_tile_explosions(&tile_animations);
    d7b2:	8a e8       	ldi	r24, 0x8A	; 138
    d7b4:	9b e0       	ldi	r25, 0x0B	; 11
    d7b6:	0e 94 26 51 	call	0xa24c	; 0xa24c <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d7ba:	60 91 85 0b 	lds	r22, 0x0B85
    d7be:	70 91 86 0b 	lds	r23, 0x0B86
    d7c2:	80 91 87 0b 	lds	r24, 0x0B87
    d7c6:	90 91 88 0b 	lds	r25, 0x0B88
    d7ca:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d7ce:	60 91 7a 0b 	lds	r22, 0x0B7A
    d7d2:	80 91 85 0b 	lds	r24, 0x0B85
    d7d6:	90 91 86 0b 	lds	r25, 0x0B86
    d7da:	0e 94 13 69 	call	0xd226	; 0xd226 <collision_detect_player>
    d7de:	72 c1       	rjmp	.+740    	; 0xdac4 <update_level+0x3f4>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    d7e0:	94 30       	cpi	r25, 0x04	; 4
    d7e2:	09 f0       	breq	.+2      	; 0xd7e6 <update_level+0x116>
    d7e4:	98 c0       	rjmp	.+304    	; 0xd916 <update_level+0x246>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    d7e6:	80 91 f8 0f 	lds	r24, 0x0FF8
    d7ea:	81 11       	cpse	r24, r1
    d7ec:	07 c0       	rjmp	.+14     	; 0xd7fc <update_level+0x12c>
    d7ee:	80 91 c9 0f 	lds	r24, 0x0FC9
    d7f2:	81 11       	cpse	r24, r1
    d7f4:	03 c0       	rjmp	.+6      	; 0xd7fc <update_level+0x12c>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    d7f6:	80 e2       	ldi	r24, 0x20	; 32
    d7f8:	80 93 79 0b 	sts	0x0B79, r24
		}
		
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    d7fc:	60 e0       	ldi	r22, 0x00	; 0
    d7fe:	80 91 85 0b 	lds	r24, 0x0B85
    d802:	90 91 86 0b 	lds	r25, 0x0B86
    d806:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <tank_map>
    d80a:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    d80c:	68 2f       	mov	r22, r24
    d80e:	80 91 85 0b 	lds	r24, 0x0B85
    d812:	90 91 86 0b 	lds	r25, 0x0B86
    d816:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
    d81a:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    d81c:	01 e0       	ldi	r16, 0x01	; 1
    d81e:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    d820:	12 e0       	ldi	r17, 0x02	; 2
    d822:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    d824:	d3 e0       	ldi	r29, 0x03	; 3
    d826:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d828:	80 91 f8 0f 	lds	r24, 0x0FF8
    d82c:	88 23       	and	r24, r24
    d82e:	19 f0       	breq	.+6      	; 0xd836 <update_level+0x166>
	return (char*) map_sub_turret;
    d830:	67 e0       	ldi	r22, 0x07	; 7
    d832:	71 e3       	ldi	r23, 0x31	; 49
    d834:	02 c0       	rjmp	.+4      	; 0xd83a <update_level+0x16a>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d836:	65 e5       	ldi	r22, 0x55	; 85
    d838:	71 e3       	ldi	r23, 0x31	; 49
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    d83a:	40 e0       	ldi	r20, 0x00	; 0
    d83c:	8c 2f       	mov	r24, r28
    d83e:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d842:	80 91 f8 0f 	lds	r24, 0x0FF8
    d846:	88 23       	and	r24, r24
    d848:	19 f0       	breq	.+6      	; 0xd850 <update_level+0x180>
	return (char*) map_sub_shot;
    d84a:	6a e0       	ldi	r22, 0x0A	; 10
    d84c:	71 e3       	ldi	r23, 0x31	; 49
    d84e:	02 c0       	rjmp	.+4      	; 0xd854 <update_level+0x184>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d850:	65 e5       	ldi	r22, 0x55	; 85
    d852:	71 e3       	ldi	r23, 0x31	; 49
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    d854:	40 e0       	ldi	r20, 0x00	; 0
    d856:	80 2f       	mov	r24, r16
    d858:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d85c:	80 91 c9 0f 	lds	r24, 0x0FC9
    d860:	88 23       	and	r24, r24
    d862:	19 f0       	breq	.+6      	; 0xd86a <update_level+0x19a>
	return (char*) map_sub_turret;
    d864:	67 e0       	ldi	r22, 0x07	; 7
    d866:	71 e3       	ldi	r23, 0x31	; 49
    d868:	02 c0       	rjmp	.+4      	; 0xd86e <update_level+0x19e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d86a:	65 e5       	ldi	r22, 0x55	; 85
    d86c:	71 e3       	ldi	r23, 0x31	; 49
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    d86e:	40 e0       	ldi	r20, 0x00	; 0
    d870:	81 2f       	mov	r24, r17
    d872:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d876:	80 91 c9 0f 	lds	r24, 0x0FC9
    d87a:	88 23       	and	r24, r24
    d87c:	19 f0       	breq	.+6      	; 0xd884 <update_level+0x1b4>
	return (char*) map_sub_shot;
    d87e:	6a e0       	ldi	r22, 0x0A	; 10
    d880:	71 e3       	ldi	r23, 0x31	; 49
    d882:	02 c0       	rjmp	.+4      	; 0xd888 <update_level+0x1b8>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d884:	65 e5       	ldi	r22, 0x55	; 85
    d886:	71 e3       	ldi	r23, 0x31	; 49
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    d888:	40 e0       	ldi	r20, 0x00	; 0
    d88a:	8d 2f       	mov	r24, r29
    d88c:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    d890:	60 e0       	ldi	r22, 0x00	; 0
    d892:	80 91 85 0b 	lds	r24, 0x0B85
    d896:	90 91 86 0b 	lds	r25, 0x0B86
    d89a:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d89e:	6f 2d       	mov	r22, r15
    d8a0:	80 91 85 0b 	lds	r24, 0x0B85
    d8a4:	90 91 86 0b 	lds	r25, 0x0B86
    d8a8:	0e 94 08 51 	call	0xa210	; 0xa210 <render_shot>
		render_tile_explosions(&tile_animations);
    d8ac:	8a e8       	ldi	r24, 0x8A	; 138
    d8ae:	9b e0       	ldi	r25, 0x0B	; 11
    d8b0:	0e 94 26 51 	call	0xa24c	; 0xa24c <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    d8b4:	6c 2f       	mov	r22, r28
    d8b6:	80 ef       	ldi	r24, 0xF0	; 240
    d8b8:	9f e0       	ldi	r25, 0x0F	; 15
    d8ba:	0e 94 b6 58 	call	0xb16c	; 0xb16c <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    d8be:	60 2f       	mov	r22, r16
    d8c0:	80 ef       	ldi	r24, 0xF0	; 240
    d8c2:	9f e0       	ldi	r25, 0x0F	; 15
    d8c4:	0e 94 cf 58 	call	0xb19e	; 0xb19e <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    d8c8:	61 2f       	mov	r22, r17
    d8ca:	81 ec       	ldi	r24, 0xC1	; 193
    d8cc:	9f e0       	ldi	r25, 0x0F	; 15
    d8ce:	0e 94 b6 58 	call	0xb16c	; 0xb16c <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    d8d2:	6d 2f       	mov	r22, r29
    d8d4:	81 ec       	ldi	r24, 0xC1	; 193
    d8d6:	9f e0       	ldi	r25, 0x0F	; 15
    d8d8:	0e 94 cf 58 	call	0xb19e	; 0xb19e <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    d8dc:	40 e8       	ldi	r20, 0x80	; 128
    d8de:	55 e2       	ldi	r21, 0x25	; 37
    d8e0:	60 ea       	ldi	r22, 0xA0	; 160
    d8e2:	7f e0       	ldi	r23, 0x0F	; 15
    d8e4:	80 ef       	ldi	r24, 0xF0	; 240
    d8e6:	9f e0       	ldi	r25, 0x0F	; 15
    d8e8:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    d8ec:	40 e0       	ldi	r20, 0x00	; 0
    d8ee:	5b e4       	ldi	r21, 0x4B	; 75
    d8f0:	60 e2       	ldi	r22, 0x20	; 32
    d8f2:	75 e3       	ldi	r23, 0x35	; 53
    d8f4:	81 ec       	ldi	r24, 0xC1	; 193
    d8f6:	9f e0       	ldi	r25, 0x0F	; 15
    d8f8:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    d8fc:	69 ef       	ldi	r22, 0xF9	; 249
    d8fe:	7f e0       	ldi	r23, 0x0F	; 15
    d900:	80 ef       	ldi	r24, 0xF0	; 240
    d902:	9f e0       	ldi	r25, 0x0F	; 15
    d904:	0e 94 fd 6a 	call	0xd5fa	; 0xd5fa <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    d908:	6a ec       	ldi	r22, 0xCA	; 202
    d90a:	7f e0       	ldi	r23, 0x0F	; 15
    d90c:	81 ec       	ldi	r24, 0xC1	; 193
    d90e:	9f e0       	ldi	r25, 0x0F	; 15
    d910:	0e 94 fd 6a 	call	0xd5fa	; 0xd5fa <update_turret_shot>
    d914:	52 cf       	rjmp	.-348    	; 0xd7ba <update_level+0xea>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    d916:	90 32       	cpi	r25, 0x20	; 32
    d918:	09 f0       	breq	.+2      	; 0xd91c <update_level+0x24c>
    d91a:	55 c0       	rjmp	.+170    	; 0xd9c6 <update_level+0x2f6>
	{
		// Render
		render_boss_fight_sub_sinking();
    d91c:	0e 94 a1 58 	call	0xb142	; 0xb142 <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d920:	60 e0       	ldi	r22, 0x00	; 0
    d922:	80 91 85 0b 	lds	r24, 0x0B85
    d926:	90 91 86 0b 	lds	r25, 0x0B86
    d92a:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <tank_map>
    d92e:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d930:	40 e0       	ldi	r20, 0x00	; 0
    d932:	6f e4       	ldi	r22, 0x4F	; 79
    d934:	71 e3       	ldi	r23, 0x31	; 49
    d936:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d93a:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d93c:	6c 2f       	mov	r22, r28
    d93e:	80 91 85 0b 	lds	r24, 0x0B85
    d942:	90 91 86 0b 	lds	r25, 0x0B86
    d946:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
    d94a:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d94c:	40 e0       	ldi	r20, 0x00	; 0
    d94e:	65 e5       	ldi	r22, 0x55	; 85
    d950:	71 e3       	ldi	r23, 0x31	; 49
    d952:	0e 94 00 48 	call	0x9000	; 0x9000 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d956:	6c 2f       	mov	r22, r28
    d958:	80 91 85 0b 	lds	r24, 0x0B85
    d95c:	90 91 86 0b 	lds	r25, 0x0B86
    d960:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d964:	60 e0       	ldi	r22, 0x00	; 0
    d966:	80 91 85 0b 	lds	r24, 0x0B85
    d96a:	90 91 86 0b 	lds	r25, 0x0B86
    d96e:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d972:	6c 2f       	mov	r22, r28
    d974:	80 91 85 0b 	lds	r24, 0x0B85
    d978:	90 91 86 0b 	lds	r25, 0x0B86
    d97c:	0e 94 08 51 	call	0xa210	; 0xa210 <render_shot>
		render_shot(&player2, p2_shot_index);
    d980:	6d 2f       	mov	r22, r29
    d982:	8e e1       	ldi	r24, 0x1E	; 30
    d984:	9f e0       	ldi	r25, 0x0F	; 15
    d986:	0e 94 08 51 	call	0xa210	; 0xa210 <render_shot>
		render_tile_explosions(&tile_animations);
    d98a:	8a e8       	ldi	r24, 0x8A	; 138
    d98c:	9b e0       	ldi	r25, 0x0B	; 11
    d98e:	0e 94 26 51 	call	0xa24c	; 0xa24c <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d992:	60 91 85 0b 	lds	r22, 0x0B85
    d996:	70 91 86 0b 	lds	r23, 0x0B86
    d99a:	80 91 87 0b 	lds	r24, 0x0B87
    d99e:	90 91 88 0b 	lds	r25, 0x0B88
    d9a2:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d9a6:	60 91 7a 0b 	lds	r22, 0x0B7A
    d9aa:	80 91 85 0b 	lds	r24, 0x0B85
    d9ae:	90 91 86 0b 	lds	r25, 0x0B86
    d9b2:	0e 94 13 69 	call	0xd226	; 0xd226 <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    d9b6:	80 91 79 0b 	lds	r24, 0x0B79
    d9ba:	80 32       	cpi	r24, 0x20	; 32
    d9bc:	09 f4       	brne	.+2      	; 0xd9c0 <update_level+0x2f0>
    d9be:	82 c0       	rjmp	.+260    	; 0xdac4 <update_level+0x3f4>
		{
			resolve_scoring();
    d9c0:	0e 94 9a 64 	call	0xc934	; 0xc934 <resolve_scoring>
    d9c4:	7f c0       	rjmp	.+254    	; 0xdac4 <update_level+0x3f4>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    d9c6:	90 31       	cpi	r25, 0x10	; 16
    d9c8:	d9 f3       	breq	.-10     	; 0xd9c0 <update_level+0x2f0>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    d9ca:	91 11       	cpse	r25, r1
    d9cc:	7b c0       	rjmp	.+246    	; 0xdac4 <update_level+0x3f4>
	{
		p2_index = tank_map(&player1, p1_index);
    d9ce:	60 e0       	ldi	r22, 0x00	; 0
    d9d0:	88 ea       	ldi	r24, 0xA8	; 168
    d9d2:	9b e0       	ldi	r25, 0x0B	; 11
    d9d4:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <tank_map>
    d9d8:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    d9da:	68 2f       	mov	r22, r24
    d9dc:	8e e1       	ldi	r24, 0x1E	; 30
    d9de:	9f e0       	ldi	r25, 0x0F	; 15
    d9e0:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <tank_map>
    d9e4:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    d9e6:	68 2f       	mov	r22, r24
    d9e8:	88 ea       	ldi	r24, 0xA8	; 168
    d9ea:	9b e0       	ldi	r25, 0x0B	; 11
    d9ec:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
    d9f0:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    d9f2:	68 2f       	mov	r22, r24
    d9f4:	8e e1       	ldi	r24, 0x1E	; 30
    d9f6:	9f e0       	ldi	r25, 0x0F	; 15
    d9f8:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <shot_map>
		render_player(&player1, p1_index);
    d9fc:	60 e0       	ldi	r22, 0x00	; 0
    d9fe:	88 ea       	ldi	r24, 0xA8	; 168
    da00:	9b e0       	ldi	r25, 0x0B	; 11
    da02:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <render_player>
		render_player(&player2, p2_index);
    da06:	6d 2d       	mov	r22, r13
    da08:	8e e1       	ldi	r24, 0x1E	; 30
    da0a:	9f e0       	ldi	r25, 0x0F	; 15
    da0c:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <render_player>
		render_shot(&player1, p1_shot_index);
    da10:	6e 2d       	mov	r22, r14
    da12:	88 ea       	ldi	r24, 0xA8	; 168
    da14:	9b e0       	ldi	r25, 0x0B	; 11
    da16:	0e 94 08 51 	call	0xa210	; 0xa210 <render_shot>
		render_shot(&player2, p2_shot_index);
    da1a:	6f 2d       	mov	r22, r15
    da1c:	8e e1       	ldi	r24, 0x1E	; 30
    da1e:	9f e0       	ldi	r25, 0x0F	; 15
    da20:	0e 94 08 51 	call	0xa210	; 0xa210 <render_shot>
		render_tile_explosions(&tile_animations);
    da24:	8a e8       	ldi	r24, 0x8A	; 138
    da26:	9b e0       	ldi	r25, 0x0B	; 11
    da28:	0e 94 26 51 	call	0xa24c	; 0xa24c <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    da2c:	80 91 81 0b 	lds	r24, 0x0B81
    da30:	90 91 82 0b 	lds	r25, 0x0B82
    da34:	89 3e       	cpi	r24, 0xE9	; 233
    da36:	93 40       	sbci	r25, 0x03	; 3
    da38:	88 f0       	brcs	.+34     	; 0xda5c <update_level+0x38c>
    da3a:	80 91 bf 0f 	lds	r24, 0x0FBF
    da3e:	90 91 c0 0f 	lds	r25, 0x0FC0
    da42:	18 16       	cp	r1, r24
    da44:	19 06       	cpc	r1, r25
    da46:	54 f4       	brge	.+20     	; 0xda5c <update_level+0x38c>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    da48:	83 eb       	ldi	r24, 0xB3	; 179
    da4a:	9f e0       	ldi	r25, 0x0F	; 15
    da4c:	0e 94 5b 51 	call	0xa2b6	; 0xa2b6 <render_scope>
    da50:	88 23       	and	r24, r24
    da52:	21 f0       	breq	.+8      	; 0xda5c <update_level+0x38c>
    da54:	10 92 82 0b 	sts	0x0B82, r1
    da58:	10 92 81 0b 	sts	0x0B81, r1
		}
		game.scope_counter++;
    da5c:	20 91 81 0b 	lds	r18, 0x0B81
    da60:	30 91 82 0b 	lds	r19, 0x0B82
    da64:	2f 5f       	subi	r18, 0xFF	; 255
    da66:	3f 4f       	sbci	r19, 0xFF	; 255
    da68:	30 93 82 0b 	sts	0x0B82, r19
    da6c:	20 93 81 0b 	sts	0x0B81, r18
		
		// Update
		update_player(p1, &player1);
    da70:	68 ea       	ldi	r22, 0xA8	; 168
    da72:	7b e0       	ldi	r23, 0x0B	; 11
    da74:	c8 01       	movw	r24, r16
    da76:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <update_player>
		update_player(p2, &player2);
    da7a:	6e e1       	ldi	r22, 0x1E	; 30
    da7c:	7f e0       	ldi	r23, 0x0F	; 15
    da7e:	ce 01       	movw	r24, r28
    da80:	0e 94 b8 67 	call	0xcf70	; 0xcf70 <update_player>
		resolve_scoring();
    da84:	0e 94 9a 64 	call	0xc934	; 0xc934 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    da88:	60 e0       	ldi	r22, 0x00	; 0
    da8a:	88 ea       	ldi	r24, 0xA8	; 168
    da8c:	9b e0       	ldi	r25, 0x0B	; 11
    da8e:	0e 94 13 69 	call	0xd226	; 0xd226 <collision_detect_player>
    da92:	88 23       	and	r24, r24
    da94:	41 f0       	breq	.+16     	; 0xdaa6 <update_level+0x3d6>
    da96:	2f e0       	ldi	r18, 0x0F	; 15
    da98:	40 e0       	ldi	r20, 0x00	; 0
    da9a:	6e e1       	ldi	r22, 0x1E	; 30
    da9c:	7f e0       	ldi	r23, 0x0F	; 15
    da9e:	88 ea       	ldi	r24, 0xA8	; 168
    daa0:	9b e0       	ldi	r25, 0x0B	; 11
    daa2:	0e 94 78 56 	call	0xacf0	; 0xacf0 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    daa6:	6f e0       	ldi	r22, 0x0F	; 15
    daa8:	8e e1       	ldi	r24, 0x1E	; 30
    daaa:	9f e0       	ldi	r25, 0x0F	; 15
    daac:	0e 94 13 69 	call	0xd226	; 0xd226 <collision_detect_player>
    dab0:	88 23       	and	r24, r24
    dab2:	41 f0       	breq	.+16     	; 0xdac4 <update_level+0x3f4>
    dab4:	20 e0       	ldi	r18, 0x00	; 0
    dab6:	4f e0       	ldi	r20, 0x0F	; 15
    dab8:	68 ea       	ldi	r22, 0xA8	; 168
    daba:	7b e0       	ldi	r23, 0x0B	; 11
    dabc:	8e e1       	ldi	r24, 0x1E	; 30
    dabe:	9f e0       	ldi	r25, 0x0F	; 15
    dac0:	0e 94 78 56 	call	0xacf0	; 0xacf0 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    dac4:	80 91 89 0b 	lds	r24, 0x0B89
    dac8:	86 30       	cpi	r24, 0x06	; 6
    daca:	71 f5       	brne	.+92     	; 0xdb28 <update_level+0x458>
	{
		game.demo_counter++;
    dacc:	80 91 7f 0b 	lds	r24, 0x0B7F
    dad0:	90 91 80 0b 	lds	r25, 0x0B80
    dad4:	01 96       	adiw	r24, 0x01	; 1
    dad6:	90 93 80 0b 	sts	0x0B80, r25
    dada:	80 93 7f 0b 	sts	0x0B7F, r24
		held = ReadJoypad(0);
    dade:	80 e0       	ldi	r24, 0x00	; 0
    dae0:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    dae4:	80 e0       	ldi	r24, 0x00	; 0
    dae6:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ReadJoypad>
    daea:	89 2b       	or	r24, r25
    daec:	89 f0       	breq	.+34     	; 0xdb10 <update_level+0x440>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    daee:	10 92 80 0b 	sts	0x0B80, r1
    daf2:	10 92 7f 0b 	sts	0x0B7F, r1
			fade_through();
    daf6:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
			init_game_state();
    dafa:	0e 94 b0 4e 	call	0x9d60	; 0x9d60 <init_game_state>
			load_splash();
#endif
		}
	}
}
    dafe:	df 91       	pop	r29
    db00:	cf 91       	pop	r28
    db02:	1f 91       	pop	r17
    db04:	0f 91       	pop	r16
    db06:	ff 90       	pop	r15
    db08:	ef 90       	pop	r14
    db0a:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    db0c:	0c 94 36 59 	jmp	0xb26c	; 0xb26c <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    db10:	81 e0       	ldi	r24, 0x01	; 1
    db12:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ReadJoypad>
    db16:	89 2b       	or	r24, r25
    db18:	51 f7       	brne	.-44     	; 0xdaee <update_level+0x41e>
    db1a:	80 91 7f 0b 	lds	r24, 0x0B7F
    db1e:	90 91 80 0b 	lds	r25, 0x0B80
    db22:	88 30       	cpi	r24, 0x08	; 8
    db24:	97 40       	sbci	r25, 0x07	; 7
    db26:	18 f7       	brcc	.-58     	; 0xdaee <update_level+0x41e>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    db28:	df 91       	pop	r29
    db2a:	cf 91       	pop	r28
    db2c:	1f 91       	pop	r17
    db2e:	0f 91       	pop	r16
    db30:	ff 90       	pop	r15
    db32:	ef 90       	pop	r14
    db34:	df 90       	pop	r13
    db36:	08 95       	ret

0000db38 <_handle_select_helper>:
#endif
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{	
    db38:	4f 92       	push	r4
    db3a:	5f 92       	push	r5
    db3c:	7f 92       	push	r7
    db3e:	8f 92       	push	r8
    db40:	9f 92       	push	r9
    db42:	af 92       	push	r10
    db44:	bf 92       	push	r11
    db46:	cf 92       	push	r12
    db48:	df 92       	push	r13
    db4a:	ef 92       	push	r14
    db4c:	ff 92       	push	r15
    db4e:	0f 93       	push	r16
    db50:	1f 93       	push	r17
    db52:	cf 93       	push	r28
    db54:	df 93       	push	r29
    db56:	1f 92       	push	r1
    db58:	cd b7       	in	r28, 0x3d	; 61
    db5a:	de b7       	in	r29, 0x3e	; 62
    db5c:	2c 01       	movw	r4, r24
    db5e:	7b 01       	movw	r14, r22
    db60:	8a 01       	movw	r16, r20
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING) && !is_net_player(player))
    db62:	db 01       	movw	r26, r22
    db64:	cd 90       	ld	r12, X+
    db66:	dc 90       	ld	r13, X
    db68:	46 01       	movw	r8, r12
    db6a:	b0 e1       	ldi	r27, 0x10	; 16
    db6c:	8b 22       	and	r8, r27
    db6e:	99 24       	eor	r9, r9
    db70:	c4 fe       	sbrs	r12, 4
    db72:	11 c0       	rjmp	.+34     	; 0xdb96 <_handle_select_helper+0x5e>
    db74:	fc 01       	movw	r30, r24
    db76:	85 81       	ldd	r24, Z+5	; 0x05
    db78:	81 11       	cpse	r24, r1
    db7a:	0d c0       	rjmp	.+26     	; 0xdb96 <_handle_select_helper+0x5e>
    db7c:	ca 01       	movw	r24, r20
    db7e:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    db82:	81 11       	cpse	r24, r1
    db84:	08 c0       	rjmp	.+16     	; 0xdb96 <_handle_select_helper+0x5e>
	{
		ps->handle_id--;
    db86:	d2 01       	movw	r26, r4
    db88:	8c 91       	ld	r24, X
    db8a:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    db8c:	87 ff       	sbrs	r24, 7
    db8e:	1c c0       	rjmp	.+56     	; 0xdbc8 <_handle_select_helper+0x90>
    db90:	f2 01       	movw	r30, r4
    db92:	10 82       	st	Z, r1
    db94:	bc c0       	rjmp	.+376    	; 0xdd0e <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING) && !is_net_player(player))
    db96:	56 01       	movw	r10, r12
    db98:	f0 e2       	ldi	r31, 0x20	; 32
    db9a:	af 22       	and	r10, r31
    db9c:	bb 24       	eor	r11, r11
    db9e:	c5 fe       	sbrs	r12, 5
    dba0:	15 c0       	rjmp	.+42     	; 0xdbcc <_handle_select_helper+0x94>
    dba2:	d2 01       	movw	r26, r4
    dba4:	15 96       	adiw	r26, 0x05	; 5
    dba6:	8c 91       	ld	r24, X
    dba8:	81 11       	cpse	r24, r1
    dbaa:	10 c0       	rjmp	.+32     	; 0xdbcc <_handle_select_helper+0x94>
    dbac:	c8 01       	movw	r24, r16
    dbae:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    dbb2:	81 11       	cpse	r24, r1
    dbb4:	0b c0       	rjmp	.+22     	; 0xdbcc <_handle_select_helper+0x94>
	{
		ps->handle_id++;
    dbb6:	f2 01       	movw	r30, r4
    dbb8:	80 81       	ld	r24, Z
    dbba:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    dbbc:	89 30       	cpi	r24, 0x09	; 9
    dbbe:	14 f4       	brge	.+4      	; 0xdbc4 <_handle_select_helper+0x8c>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING) && !is_net_player(player))
	{
		ps->handle_id++;
    dbc0:	80 83       	st	Z, r24
    dbc2:	a5 c0       	rjmp	.+330    	; 0xdd0e <_handle_select_helper+0x1d6>
		if (ps->handle_id > 8) ps->handle_id = 8;
    dbc4:	88 e0       	ldi	r24, 0x08	; 8
    dbc6:	d2 01       	movw	r26, r4
    dbc8:	8c 93       	st	X, r24
    dbca:	a1 c0       	rjmp	.+322    	; 0xdd0e <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING) && !is_net_player(player))
    dbcc:	c7 01       	movw	r24, r14
    dbce:	0e 94 7a 59 	call	0xb2f4	; 0xb2f4 <select_pressed>
    dbd2:	78 2e       	mov	r7, r24
    dbd4:	88 23       	and	r24, r24
    dbd6:	f1 f1       	breq	.+124    	; 0xdc54 <_handle_select_helper+0x11c>
    dbd8:	f2 01       	movw	r30, r4
    dbda:	85 81       	ldd	r24, Z+5	; 0x05
    dbdc:	81 11       	cpse	r24, r1
    dbde:	3a c0       	rjmp	.+116    	; 0xdc54 <_handle_select_helper+0x11c>
    dbe0:	c8 01       	movw	r24, r16
    dbe2:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    dbe6:	81 11       	cpse	r24, r1
    dbe8:	35 c0       	rjmp	.+106    	; 0xdc54 <_handle_select_helper+0x11c>
	{
		ps->select_state = EDITING;
    dbea:	81 e0       	ldi	r24, 0x01	; 1
    dbec:	d2 01       	movw	r26, r4
    dbee:	15 96       	adiw	r26, 0x05	; 5
    dbf0:	8c 93       	st	X, r24
    dbf2:	15 97       	sbiw	r26, 0x05	; 5
		memcpy(ps->handle, &handles.data[ps->handle_id*3], 3);
    dbf4:	ec 91       	ld	r30, X
    dbf6:	b3 e0       	ldi	r27, 0x03	; 3
    dbf8:	eb 02       	muls	r30, r27
    dbfa:	f0 01       	movw	r30, r0
    dbfc:	11 24       	eor	r1, r1
    dbfe:	e8 5a       	subi	r30, 0xA8	; 168
    dc00:	f4 4f       	sbci	r31, 0xF4	; 244
    dc02:	80 81       	ld	r24, Z
    dc04:	91 81       	ldd	r25, Z+1	; 0x01
    dc06:	a2 81       	ldd	r26, Z+2	; 0x02
    dc08:	f2 01       	movw	r30, r4
    dc0a:	81 83       	std	Z+1, r24	; 0x01
    dc0c:	92 83       	std	Z+2, r25	; 0x02
    dc0e:	a3 83       	std	Z+3, r26	; 0x03
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    dc10:	24 e0       	ldi	r18, 0x04	; 4
    dc12:	40 91 8f 0f 	lds	r20, 0x0F8F
    dc16:	60 91 19 0c 	lds	r22, 0x0C19
    dc1a:	80 91 89 0b 	lds	r24, 0x0B89
    dc1e:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		p->pressed = 0;
    dc22:	d7 01       	movw	r26, r14
    dc24:	1d 92       	st	X+, r1
    dc26:	1c 92       	st	X, r1
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    dc28:	21 e0       	ldi	r18, 0x01	; 1
    dc2a:	49 e0       	ldi	r20, 0x09	; 9
    dc2c:	b7 01       	movw	r22, r14
    dc2e:	c8 01       	movw	r24, r16
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
	}
#endif
}
    dc30:	0f 90       	pop	r0
    dc32:	df 91       	pop	r29
    dc34:	cf 91       	pop	r28
    dc36:	1f 91       	pop	r17
    dc38:	0f 91       	pop	r16
    dc3a:	ff 90       	pop	r15
    dc3c:	ef 90       	pop	r14
    dc3e:	df 90       	pop	r13
    dc40:	cf 90       	pop	r12
    dc42:	bf 90       	pop	r11
    dc44:	af 90       	pop	r10
    dc46:	9f 90       	pop	r9
    dc48:	8f 90       	pop	r8
    dc4a:	7f 90       	pop	r7
    dc4c:	5f 90       	pop	r5
    dc4e:	4f 90       	pop	r4
	{
		ps->select_state = EDITING;
		memcpy(ps->handle, &handles.data[ps->handle_id*3], 3);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		p->pressed = 0;
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    dc50:	0c 94 75 64 	jmp	0xc8ea	; 0xc8ea <send_smart_net_message>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING) && !is_net_player(player))
    dc54:	c7 fe       	sbrs	r12, 7
    dc56:	17 c0       	rjmp	.+46     	; 0xdc86 <_handle_select_helper+0x14e>
    dc58:	f2 01       	movw	r30, r4
    dc5a:	85 81       	ldd	r24, Z+5	; 0x05
    dc5c:	81 30       	cpi	r24, 0x01	; 1
    dc5e:	99 f4       	brne	.+38     	; 0xdc86 <_handle_select_helper+0x14e>
    dc60:	c8 01       	movw	r24, r16
    dc62:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    dc66:	81 11       	cpse	r24, r1
    dc68:	0e c0       	rjmp	.+28     	; 0xdc86 <_handle_select_helper+0x14e>
	{
		ps->char_index++;
    dc6a:	d2 01       	movw	r26, r4
    dc6c:	14 96       	adiw	r26, 0x04	; 4
    dc6e:	8c 91       	ld	r24, X
    dc70:	14 97       	sbiw	r26, 0x04	; 4
    dc72:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    dc74:	83 30       	cpi	r24, 0x03	; 3
    dc76:	1c f4       	brge	.+6      	; 0xdc7e <_handle_select_helper+0x146>
		p->pressed = 0;
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING) && !is_net_player(player))
	{
		ps->char_index++;
    dc78:	14 96       	adiw	r26, 0x04	; 4
    dc7a:	8c 93       	st	X, r24
    dc7c:	48 c0       	rjmp	.+144    	; 0xdd0e <_handle_select_helper+0x1d6>
		if (ps->char_index > 2) ps->char_index = 2;
    dc7e:	82 e0       	ldi	r24, 0x02	; 2
    dc80:	f2 01       	movw	r30, r4
    dc82:	84 83       	std	Z+4, r24	; 0x04
    dc84:	44 c0       	rjmp	.+136    	; 0xdd0e <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING) && !is_net_player(player))
    dc86:	c6 fe       	sbrs	r12, 6
    dc88:	12 c0       	rjmp	.+36     	; 0xdcae <_handle_select_helper+0x176>
    dc8a:	d2 01       	movw	r26, r4
    dc8c:	15 96       	adiw	r26, 0x05	; 5
    dc8e:	2c 91       	ld	r18, X
    dc90:	21 30       	cpi	r18, 0x01	; 1
    dc92:	09 f0       	breq	.+2      	; 0xdc96 <_handle_select_helper+0x15e>
    dc94:	89 c0       	rjmp	.+274    	; 0xdda8 <_handle_select_helper+0x270>
    dc96:	c8 01       	movw	r24, r16
    dc98:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    dc9c:	81 11       	cpse	r24, r1
    dc9e:	42 c0       	rjmp	.+132    	; 0xdd24 <_handle_select_helper+0x1ec>
	{
		ps->char_index--;
    dca0:	f2 01       	movw	r30, r4
    dca2:	84 81       	ldd	r24, Z+4	; 0x04
    dca4:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    dca6:	87 ff       	sbrs	r24, 7
    dca8:	ec cf       	rjmp	.-40     	; 0xdc82 <_handle_select_helper+0x14a>
    dcaa:	14 82       	std	Z+4, r1	; 0x04
    dcac:	30 c0       	rjmp	.+96     	; 0xdd0e <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    dcae:	89 28       	or	r8, r9
    dcb0:	b1 f0       	breq	.+44     	; 0xdcde <_handle_select_helper+0x1a6>
    dcb2:	f2 01       	movw	r30, r4
    dcb4:	25 81       	ldd	r18, Z+5	; 0x05
    dcb6:	21 30       	cpi	r18, 0x01	; 1
    dcb8:	09 f0       	breq	.+2      	; 0xdcbc <_handle_select_helper+0x184>
    dcba:	79 c0       	rjmp	.+242    	; 0xddae <_handle_select_helper+0x276>
    dcbc:	c8 01       	movw	r24, r16
    dcbe:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    dcc2:	81 11       	cpse	r24, r1
    dcc4:	31 c0       	rjmp	.+98     	; 0xdd28 <_handle_select_helper+0x1f0>
	{
		ps->handle[(u8) ps->char_index]--;
    dcc6:	d2 01       	movw	r26, r4
    dcc8:	14 96       	adiw	r26, 0x04	; 4
    dcca:	8c 91       	ld	r24, X
    dccc:	f2 01       	movw	r30, r4
    dcce:	e8 0f       	add	r30, r24
    dcd0:	f1 1d       	adc	r31, r1
    dcd2:	81 81       	ldd	r24, Z+1	; 0x01
    dcd4:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'Z';
    dcd6:	81 34       	cpi	r24, 0x41	; 65
    dcd8:	c8 f4       	brcc	.+50     	; 0xdd0c <_handle_select_helper+0x1d4>
    dcda:	8a e5       	ldi	r24, 0x5A	; 90
    dcdc:	17 c0       	rjmp	.+46     	; 0xdd0c <_handle_select_helper+0x1d4>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    dcde:	ab 28       	or	r10, r11
    dce0:	29 f1       	breq	.+74     	; 0xdd2c <_handle_select_helper+0x1f4>
    dce2:	f2 01       	movw	r30, r4
    dce4:	25 81       	ldd	r18, Z+5	; 0x05
    dce6:	21 30       	cpi	r18, 0x01	; 1
    dce8:	09 f0       	breq	.+2      	; 0xdcec <_handle_select_helper+0x1b4>
    dcea:	61 c0       	rjmp	.+194    	; 0xddae <_handle_select_helper+0x276>
    dcec:	c8 01       	movw	r24, r16
    dcee:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    dcf2:	81 11       	cpse	r24, r1
    dcf4:	ff c0       	rjmp	.+510    	; 0xdef4 <_handle_select_helper+0x3bc>
	{
		ps->handle[(u8) ps->char_index]++;
    dcf6:	d2 01       	movw	r26, r4
    dcf8:	14 96       	adiw	r26, 0x04	; 4
    dcfa:	8c 91       	ld	r24, X
    dcfc:	f2 01       	movw	r30, r4
    dcfe:	e8 0f       	add	r30, r24
    dd00:	f1 1d       	adc	r31, r1
    dd02:	81 81       	ldd	r24, Z+1	; 0x01
    dd04:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
    dd06:	8b 35       	cpi	r24, 0x5B	; 91
    dd08:	08 f0       	brcs	.+2      	; 0xdd0c <_handle_select_helper+0x1d4>
    dd0a:	81 e4       	ldi	r24, 0x41	; 65
    dd0c:	81 83       	std	Z+1, r24	; 0x01
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    dd0e:	24 e0       	ldi	r18, 0x04	; 4
    dd10:	40 91 8f 0f 	lds	r20, 0x0F8F
    dd14:	60 91 19 0c 	lds	r22, 0x0C19
    dd18:	80 91 89 0b 	lds	r24, 0x0B89
    dd1c:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
    dd20:	20 e0       	ldi	r18, 0x00	; 0
    dd22:	83 cf       	rjmp	.-250    	; 0xdc2a <_handle_select_helper+0xf2>
		ps->char_index--;
		if (ps->char_index < 0) ps->char_index = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    dd24:	89 28       	or	r8, r9
    dd26:	51 f6       	brne	.-108    	; 0xdcbc <_handle_select_helper+0x184>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    dd28:	ab 28       	or	r10, r11
    dd2a:	01 f7       	brne	.-64     	; 0xdcec <_handle_select_helper+0x1b4>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING) && !is_net_player(player))
    dd2c:	77 20       	and	r7, r7
    dd2e:	09 f4       	brne	.+2      	; 0xdd32 <_handle_select_helper+0x1fa>
    dd30:	79 c0       	rjmp	.+242    	; 0xde24 <_handle_select_helper+0x2ec>
    dd32:	f2 01       	movw	r30, r4
    dd34:	25 81       	ldd	r18, Z+5	; 0x05
    dd36:	21 30       	cpi	r18, 0x01	; 1
    dd38:	e1 f5       	brne	.+120    	; 0xddb2 <_handle_select_helper+0x27a>
    dd3a:	c8 01       	movw	r24, r16
    dd3c:	29 83       	std	Y+1, r18	; 0x01
    dd3e:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    dd42:	29 81       	ldd	r18, Y+1	; 0x01
    dd44:	81 11       	cpse	r24, r1
    dd46:	6c c0       	rjmp	.+216    	; 0xde20 <_handle_select_helper+0x2e8>
	{
		ps->select_state = CONFIRMED;
    dd48:	82 e0       	ldi	r24, 0x02	; 2
    dd4a:	d2 01       	movw	r26, r4
    dd4c:	15 96       	adiw	r26, 0x05	; 5
    dd4e:	8c 93       	st	X, r24
    dd50:	15 97       	sbiw	r26, 0x05	; 5
		player->handle_id = ps->handle_id;
    dd52:	8c 91       	ld	r24, X
    dd54:	f8 01       	movw	r30, r16
    dd56:	80 83       	st	Z, r24
		memcpy(player->handle, ps->handle, 3);
    dd58:	11 96       	adiw	r26, 0x01	; 1
    dd5a:	8d 91       	ld	r24, X+
    dd5c:	9d 91       	ld	r25, X+
    dd5e:	ac 91       	ld	r26, X
    dd60:	81 83       	std	Z+1, r24	; 0x01
    dd62:	92 83       	std	Z+2, r25	; 0x02
    dd64:	a3 83       	std	Z+3, r26	; 0x03
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
    dd66:	d2 01       	movw	r26, r4
    dd68:	ec 91       	ld	r30, X
    dd6a:	b3 e0       	ldi	r27, 0x03	; 3
    dd6c:	eb 02       	muls	r30, r27
    dd6e:	f0 01       	movw	r30, r0
    dd70:	11 24       	eor	r1, r1
    dd72:	9f 01       	movw	r18, r30
    dd74:	28 5a       	subi	r18, 0xA8	; 168
    dd76:	34 4f       	sbci	r19, 0xF4	; 244
    dd78:	f2 01       	movw	r30, r4
    dd7a:	81 81       	ldd	r24, Z+1	; 0x01
    dd7c:	92 81       	ldd	r25, Z+2	; 0x02
    dd7e:	a3 81       	ldd	r26, Z+3	; 0x03
    dd80:	f9 01       	movw	r30, r18
    dd82:	80 83       	st	Z, r24
    dd84:	91 83       	std	Z+1, r25	; 0x01
    dd86:	a2 83       	std	Z+2, r26	; 0x02
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    dd88:	24 e0       	ldi	r18, 0x04	; 4
    dd8a:	40 91 8f 0f 	lds	r20, 0x0F8F
    dd8e:	60 91 19 0c 	lds	r22, 0x0C19
    dd92:	80 91 89 0b 	lds	r24, 0x0B89
    dd96:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    dd9a:	21 e0       	ldi	r18, 0x01	; 1
    dd9c:	49 e0       	ldi	r20, 0x09	; 9
    dd9e:	b7 01       	movw	r22, r14
    dda0:	c8 01       	movw	r24, r16
    dda2:	0e 94 75 64 	call	0xc8ea	; 0xc8ea <send_smart_net_message>
    dda6:	28 c0       	rjmp	.+80     	; 0xddf8 <_handle_select_helper+0x2c0>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    dda8:	ab 28       	or	r10, r11
    ddaa:	09 f4       	brne	.+2      	; 0xddae <_handle_select_helper+0x276>
    ddac:	bf cf       	rjmp	.-130    	; 0xdd2c <_handle_select_helper+0x1f4>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING) && !is_net_player(player))
    ddae:	77 20       	and	r7, r7
    ddb0:	c9 f1       	breq	.+114    	; 0xde24 <_handle_select_helper+0x2ec>
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
		save_eeprom(&handles);
	}
	else if (select_pressed(p) && (ps->select_state == CONFIRMED) && is_net_player(player))
    ddb2:	22 30       	cpi	r18, 0x02	; 2
    ddb4:	b9 f5       	brne	.+110    	; 0xde24 <_handle_select_helper+0x2ec>
    ddb6:	c8 01       	movw	r24, r16
    ddb8:	0e 94 88 64 	call	0xc910	; 0xc910 <is_net_player>
    ddbc:	88 23       	and	r24, r24
    ddbe:	91 f1       	breq	.+100    	; 0xde24 <_handle_select_helper+0x2ec>
	{
		player->handle_id = ps->handle_id;
    ddc0:	d2 01       	movw	r26, r4
    ddc2:	8c 91       	ld	r24, X
    ddc4:	f8 01       	movw	r30, r16
    ddc6:	80 83       	st	Z, r24
		memcpy(player->handle, ps->handle, 3);
    ddc8:	11 96       	adiw	r26, 0x01	; 1
    ddca:	8d 91       	ld	r24, X+
    ddcc:	9d 91       	ld	r25, X+
    ddce:	ac 91       	ld	r26, X
    ddd0:	81 83       	std	Z+1, r24	; 0x01
    ddd2:	92 83       	std	Z+2, r25	; 0x02
    ddd4:	a3 83       	std	Z+3, r26	; 0x03
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
    ddd6:	d2 01       	movw	r26, r4
    ddd8:	ec 91       	ld	r30, X
    ddda:	b3 e0       	ldi	r27, 0x03	; 3
    dddc:	eb 02       	muls	r30, r27
    ddde:	f0 01       	movw	r30, r0
    dde0:	11 24       	eor	r1, r1
    dde2:	9f 01       	movw	r18, r30
    dde4:	28 5a       	subi	r18, 0xA8	; 168
    dde6:	34 4f       	sbci	r19, 0xF4	; 244
    dde8:	f2 01       	movw	r30, r4
    ddea:	81 81       	ldd	r24, Z+1	; 0x01
    ddec:	92 81       	ldd	r25, Z+2	; 0x02
    ddee:	a3 81       	ldd	r26, Z+3	; 0x03
    ddf0:	f9 01       	movw	r30, r18
    ddf2:	80 83       	st	Z, r24
    ddf4:	91 83       	std	Z+1, r25	; 0x01
    ddf6:	a2 83       	std	Z+2, r26	; 0x02
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    ddf8:	86 e5       	ldi	r24, 0x56	; 86
    ddfa:	9b e0       	ldi	r25, 0x0B	; 11
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
	}
#endif
}
    ddfc:	0f 90       	pop	r0
    ddfe:	df 91       	pop	r29
    de00:	cf 91       	pop	r28
    de02:	1f 91       	pop	r17
    de04:	0f 91       	pop	r16
    de06:	ff 90       	pop	r15
    de08:	ef 90       	pop	r14
    de0a:	df 90       	pop	r13
    de0c:	cf 90       	pop	r12
    de0e:	bf 90       	pop	r11
    de10:	af 90       	pop	r10
    de12:	9f 90       	pop	r9
    de14:	8f 90       	pop	r8
    de16:	7f 90       	pop	r7
    de18:	5f 90       	pop	r5
    de1a:	4f 90       	pop	r4
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    de1c:	0c 94 c0 3b 	jmp	0x7780	; 0x7780 <EepromWriteBlock>
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
		save_eeprom(&handles);
	}
	else if (select_pressed(p) && (ps->select_state == CONFIRMED) && is_net_player(player))
    de20:	22 30       	cpi	r18, 0x02	; 2
    de22:	71 f2       	breq	.-100    	; 0xddc0 <_handle_select_helper+0x288>
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    de24:	d1 fe       	sbrs	r13, 1
    de26:	6c c0       	rjmp	.+216    	; 0xdf00 <_handle_select_helper+0x3c8>
    de28:	d2 01       	movw	r26, r4
    de2a:	15 96       	adiw	r26, 0x05	; 5
    de2c:	8c 91       	ld	r24, X
    de2e:	81 30       	cpi	r24, 0x01	; 1
    de30:	91 f4       	brne	.+36     	; 0xde56 <_handle_select_helper+0x31e>
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    de32:	21 e0       	ldi	r18, 0x01	; 1
    de34:	49 e0       	ldi	r20, 0x09	; 9
    de36:	b7 01       	movw	r22, r14
    de38:	c8 01       	movw	r24, r16
    de3a:	0e 94 75 64 	call	0xc8ea	; 0xc8ea <send_smart_net_message>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    de3e:	24 e0       	ldi	r18, 0x04	; 4
    de40:	40 91 8f 0f 	lds	r20, 0x0F8F
    de44:	60 91 19 0c 	lds	r22, 0x0C19
    de48:	80 91 89 0b 	lds	r24, 0x0B89
    de4c:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		ps->select_state = SELECTING;
    de50:	f2 01       	movw	r30, r4
    de52:	15 82       	std	Z+5, r1	; 0x05
    de54:	55 c0       	rjmp	.+170    	; 0xdf00 <_handle_select_helper+0x3c8>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    de56:	82 30       	cpi	r24, 0x02	; 2
    de58:	19 f5       	brne	.+70     	; 0xdea0 <_handle_select_helper+0x368>
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    de5a:	21 e0       	ldi	r18, 0x01	; 1
    de5c:	49 e0       	ldi	r20, 0x09	; 9
    de5e:	b7 01       	movw	r22, r14
    de60:	c8 01       	movw	r24, r16
    de62:	0e 94 75 64 	call	0xc8ea	; 0xc8ea <send_smart_net_message>
		ps->select_state = EDITING;
    de66:	81 e0       	ldi	r24, 0x01	; 1
    de68:	d2 01       	movw	r26, r4
    de6a:	15 96       	adiw	r26, 0x05	; 5
    de6c:	8c 93       	st	X, r24
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    de6e:	24 e0       	ldi	r18, 0x04	; 4
    de70:	40 91 8f 0f 	lds	r20, 0x0F8F
    de74:	60 91 19 0c 	lds	r22, 0x0C19
    de78:	80 91 89 0b 	lds	r24, 0x0B89
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
	}
#endif
}
    de7c:	0f 90       	pop	r0
    de7e:	df 91       	pop	r29
    de80:	cf 91       	pop	r28
    de82:	1f 91       	pop	r17
    de84:	0f 91       	pop	r16
    de86:	ff 90       	pop	r15
    de88:	ef 90       	pop	r14
    de8a:	df 90       	pop	r13
    de8c:	cf 90       	pop	r12
    de8e:	bf 90       	pop	r11
    de90:	af 90       	pop	r10
    de92:	9f 90       	pop	r9
    de94:	8f 90       	pop	r8
    de96:	7f 90       	pop	r7
    de98:	5f 90       	pop	r5
    de9a:	4f 90       	pop	r4
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
		ps->select_state = EDITING;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    de9c:	0c 94 5a 4c 	jmp	0x98b4	; 0x98b4 <LBPlaySound>
	}
	else if (p->pressed & BTN_X && (ps->select_state == SELECTING))
    dea0:	81 11       	cpse	r24, r1
    dea2:	2e c0       	rjmp	.+92     	; 0xdf00 <_handle_select_helper+0x3c8>
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    dea4:	21 e0       	ldi	r18, 0x01	; 1
    dea6:	49 e0       	ldi	r20, 0x09	; 9
    dea8:	b7 01       	movw	r22, r14
    deaa:	c8 01       	movw	r24, r16
    deac:	0e 94 75 64 	call	0xc8ea	; 0xc8ea <send_smart_net_message>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    deb0:	24 e0       	ldi	r18, 0x04	; 4
    deb2:	40 91 8f 0f 	lds	r20, 0x0F8F
    deb6:	60 91 19 0c 	lds	r22, 0x0C19
    deba:	80 91 89 0b 	lds	r24, 0x0B89
    debe:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <LBPlaySound>
		LBWaitSeconds(2, sizeof(player->netMessage));
    dec2:	6c e1       	ldi	r22, 0x1C	; 28
    dec4:	82 e0       	ldi	r24, 0x02	; 2
    dec6:	90 e0       	ldi	r25, 0x00	; 0
    dec8:	0e 94 31 4c 	call	0x9862	; 0x9862 <LBWaitSeconds>
		fade_through();
    decc:	0e 94 11 4f 	call	0x9e22	; 0x9e22 <fade_through>
		load_splash();
	}
#endif
}
    ded0:	0f 90       	pop	r0
    ded2:	df 91       	pop	r29
    ded4:	cf 91       	pop	r28
    ded6:	1f 91       	pop	r17
    ded8:	0f 91       	pop	r16
    deda:	ff 90       	pop	r15
    dedc:	ef 90       	pop	r14
    dede:	df 90       	pop	r13
    dee0:	cf 90       	pop	r12
    dee2:	bf 90       	pop	r11
    dee4:	af 90       	pop	r10
    dee6:	9f 90       	pop	r9
    dee8:	8f 90       	pop	r8
    deea:	7f 90       	pop	r7
    deec:	5f 90       	pop	r5
    deee:	4f 90       	pop	r4
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
    def0:	0c 94 36 59 	jmp	0xb26c	; 0xb26c <load_splash>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING) && !is_net_player(player))
    def4:	77 20       	and	r7, r7
    def6:	09 f4       	brne	.+2      	; 0xdefa <_handle_select_helper+0x3c2>
    def8:	95 cf       	rjmp	.-214    	; 0xde24 <_handle_select_helper+0x2ec>
    defa:	f2 01       	movw	r30, r4
    defc:	25 81       	ldd	r18, Z+5	; 0x05
    defe:	1d cf       	rjmp	.-454    	; 0xdd3a <_handle_select_helper+0x202>
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
	}
#endif
}
    df00:	0f 90       	pop	r0
    df02:	df 91       	pop	r29
    df04:	cf 91       	pop	r28
    df06:	1f 91       	pop	r17
    df08:	0f 91       	pop	r16
    df0a:	ff 90       	pop	r15
    df0c:	ef 90       	pop	r14
    df0e:	df 90       	pop	r13
    df10:	cf 90       	pop	r12
    df12:	bf 90       	pop	r11
    df14:	af 90       	pop	r10
    df16:	9f 90       	pop	r9
    df18:	8f 90       	pop	r8
    df1a:	7f 90       	pop	r7
    df1c:	5f 90       	pop	r5
    df1e:	4f 90       	pop	r4
    df20:	08 95       	ret

0000df22 <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    df22:	0f 93       	push	r16
    df24:	1f 93       	push	r17
    df26:	cf 93       	push	r28
    df28:	df 93       	push	r29
    df2a:	ec 01       	movw	r28, r24
    df2c:	8b 01       	movw	r16, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&player1.netMessage.ps, p1, 2, 6);
    df2e:	26 e0       	ldi	r18, 0x06	; 6
    df30:	42 e0       	ldi	r20, 0x02	; 2
    df32:	bc 01       	movw	r22, r24
    df34:	89 e2       	ldi	r24, 0x29	; 41
    df36:	9c e0       	ldi	r25, 0x0C	; 12
    df38:	0e 94 89 5a 	call	0xb512	; 0xb512 <_handle_select_render_helper>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    df3c:	80 91 89 0b 	lds	r24, 0x0B89
    df40:	88 23       	and	r24, r24
    df42:	49 f0       	breq	.+18     	; 0xdf56 <update_handle_select+0x34>
    df44:	86 30       	cpi	r24, 0x06	; 6
    df46:	39 f0       	breq	.+14     	; 0xdf56 <update_handle_select+0x34>
	{
		_handle_select_render_helper(&player2.netMessage.ps, p2, 19, 8);
    df48:	28 e0       	ldi	r18, 0x08	; 8
    df4a:	43 e1       	ldi	r20, 0x13	; 19
    df4c:	b8 01       	movw	r22, r16
    df4e:	8f e9       	ldi	r24, 0x9F	; 159
    df50:	9f e0       	ldi	r25, 0x0F	; 15
    df52:	0e 94 89 5a 	call	0xb512	; 0xb512 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&player1.netMessage.ps, p1, &player1);
    df56:	48 ea       	ldi	r20, 0xA8	; 168
    df58:	5b e0       	ldi	r21, 0x0B	; 11
    df5a:	be 01       	movw	r22, r28
    df5c:	89 e2       	ldi	r24, 0x29	; 41
    df5e:	9c e0       	ldi	r25, 0x0C	; 12
    df60:	0e 94 9c 6d 	call	0xdb38	; 0xdb38 <_handle_select_helper>
	if (player1.netMessage.ps.select_state == CONFIRMED) start_game = 1;
    df64:	c1 e0       	ldi	r28, 0x01	; 1
    df66:	80 91 2e 0c 	lds	r24, 0x0C2E
    df6a:	82 30       	cpi	r24, 0x02	; 2
    df6c:	09 f0       	breq	.+2      	; 0xdf70 <update_handle_select+0x4e>
    df6e:	c0 e0       	ldi	r28, 0x00	; 0
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    df70:	80 91 89 0b 	lds	r24, 0x0B89
    df74:	88 23       	and	r24, r24
    df76:	49 f1       	breq	.+82     	; 0xdfca <update_handle_select+0xa8>
    df78:	86 30       	cpi	r24, 0x06	; 6
    df7a:	51 f1       	breq	.+84     	; 0xdfd0 <update_handle_select+0xae>
	{
		_handle_select_helper(&player2.netMessage.ps, p2, &player2);
    df7c:	4e e1       	ldi	r20, 0x1E	; 30
    df7e:	5f e0       	ldi	r21, 0x0F	; 15
    df80:	b8 01       	movw	r22, r16
    df82:	8f e9       	ldi	r24, 0x9F	; 159
    df84:	9f e0       	ldi	r25, 0x0F	; 15
    df86:	0e 94 9c 6d 	call	0xdb38	; 0xdb38 <_handle_select_helper>
		if (player2.netMessage.ps.select_state != CONFIRMED) start_game = 0;
    df8a:	80 91 a4 0f 	lds	r24, 0x0FA4
    df8e:	82 30       	cpi	r24, 0x02	; 2
    df90:	09 f5       	brne	.+66     	; 0xdfd4 <update_handle_select+0xb2>
	}
	if (start_game)
    df92:	cc 23       	and	r28, r28
    df94:	f9 f0       	breq	.+62     	; 0xdfd4 <update_handle_select+0xb2>
	{
		if (game.selection == PVCPU)
    df96:	80 91 89 0b 	lds	r24, 0x0B89
    df9a:	81 11       	cpse	r24, r1
    df9c:	0f c0       	rjmp	.+30     	; 0xdfbc <update_handle_select+0x9a>
		{
			player2.handle_id = 9;
    df9e:	89 e0       	ldi	r24, 0x09	; 9
    dfa0:	80 93 1e 0f 	sts	0x0F1E, r24
			memcpy(player2.handle, &handles.data[9*3], 3);
    dfa4:	80 91 73 0b 	lds	r24, 0x0B73
    dfa8:	90 91 74 0b 	lds	r25, 0x0B74
    dfac:	a0 91 75 0b 	lds	r26, 0x0B75
    dfb0:	80 93 1f 0f 	sts	0x0F1F, r24
    dfb4:	90 93 20 0f 	sts	0x0F20, r25
    dfb8:	a0 93 21 0f 	sts	0x0F21, r26
		}
		level_transition(0);
    dfbc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    dfbe:	df 91       	pop	r29
    dfc0:	cf 91       	pop	r28
    dfc2:	1f 91       	pop	r17
    dfc4:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    dfc6:	0c 94 43 58 	jmp	0xb086	; 0xb086 <level_transition>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
	{
		_handle_select_helper(&player2.netMessage.ps, p2, &player2);
		if (player2.netMessage.ps.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    dfca:	c1 11       	cpse	r28, r1
    dfcc:	e8 cf       	rjmp	.-48     	; 0xdf9e <update_handle_select+0x7c>
    dfce:	02 c0       	rjmp	.+4      	; 0xdfd4 <update_handle_select+0xb2>
    dfd0:	c1 11       	cpse	r28, r1
    dfd2:	f4 cf       	rjmp	.-24     	; 0xdfbc <update_handle_select+0x9a>
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
	}
}
    dfd4:	df 91       	pop	r29
    dfd6:	cf 91       	pop	r28
    dfd8:	1f 91       	pop	r17
    dfda:	0f 91       	pop	r16
    dfdc:	08 95       	ret

0000dfde <player_posture_changed>:
	player->old_held = player->netMessage.joyPadState.held;
}

u8 player_posture_changed(Player* player)
{
	if ((player->old_held & BTN_UP) != (player->netMessage.joyPadState.held & BTN_UP)) return 1;
    dfde:	fc 01       	movw	r30, r24
    dfe0:	e2 58       	subi	r30, 0x82	; 130
    dfe2:	ff 4f       	sbci	r31, 0xFF	; 255
    dfe4:	20 81       	ld	r18, Z
    dfe6:	31 81       	ldd	r19, Z+1	; 0x01
    dfe8:	fc 01       	movw	r30, r24
    dfea:	83 8d       	ldd	r24, Z+27	; 0x1b
    dfec:	94 8d       	ldd	r25, Z+28	; 0x1c
    dfee:	28 27       	eor	r18, r24
    dff0:	39 27       	eor	r19, r25
    dff2:	20 7f       	andi	r18, 0xF0	; 240
    dff4:	33 27       	eor	r19, r19
	if ((player->old_held & BTN_DOWN) != (player->netMessage.joyPadState.held & BTN_DOWN)) return 1;
	if ((player->old_held & BTN_LEFT) != (player->netMessage.joyPadState.held & BTN_LEFT)) return 1;
	if ((player->old_held & BTN_RIGHT) != (player->netMessage.joyPadState.held & BTN_RIGHT)) return 1;
    dff6:	81 e0       	ldi	r24, 0x01	; 1
    dff8:	23 2b       	or	r18, r19
    dffa:	09 f4       	brne	.+2      	; 0xdffe <player_posture_changed+0x20>
    dffc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
    dffe:	08 95       	ret

0000e000 <main>:

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    e000:	0e 94 bd 3a 	call	0x757a	; 0x757a <GetTrueRandomSeed>
    e004:	0e 94 78 3c 	call	0x78f0	; 0x78f0 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e008:	83 e4       	ldi	r24, 0x43	; 67
    e00a:	95 e0       	ldi	r25, 0x05	; 5
    e00c:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <InitMusicPlayer>
	SetMasterVolume(0xff);
    e010:	8f ef       	ldi	r24, 0xFF	; 255
    e012:	0e 94 a0 40 	call	0x8140	; 0x8140 <SetMasterVolume>
	SetTileTable(tiles_data);
    e016:	88 e5       	ldi	r24, 0x58	; 88
    e018:	91 e3       	ldi	r25, 0x31	; 49
    e01a:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e01e:	87 ec       	ldi	r24, 0xC7	; 199
    e020:	97 e2       	ldi	r25, 0x27	; 39
    e022:	0e 94 39 3a 	call	0x7472	; 0x7472 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    e026:	8b e9       	ldi	r24, 0x9B	; 155
    e028:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    e02c:	60 e0       	ldi	r22, 0x00	; 0
    e02e:	83 e0       	ldi	r24, 0x03	; 3
    e030:	0e 94 49 49 	call	0x9292	; 0x9292 <FadeIn>
	ClearVram();
    e034:	0e 94 3e 3a 	call	0x747c	; 0x747c <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    e038:	86 e3       	ldi	r24, 0x36	; 54
    e03a:	9b e0       	ldi	r25, 0x0B	; 11
    e03c:	0e 94 50 4d 	call	0x9aa0	; 0x9aa0 <init_scores>
	init_handles(&handles);
    e040:	86 e5       	ldi	r24, 0x56	; 86
    e042:	9b e0       	ldi	r25, 0x0B	; 11
    e044:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <init_handles>
	init_game_state();
    e048:	0e 94 b0 4e 	call	0x9d60	; 0x9d60 <init_game_state>
	load_credits();
    e04c:	0e 94 5d 62 	call	0xc4ba	; 0xc4ba <load_credits>
	load_splash();
    e050:	0e 94 36 59 	call	0xb26c	; 0xb26c <load_splash>
	
	while (1)
	{
		waitForVSync();
    e054:	0e 94 fb 4e 	call	0x9df6	; 0x9df6 <waitForVSync>
		get_net_message(0);
    e058:	80 e0       	ldi	r24, 0x00	; 0
    e05a:	0e 94 6c 62 	call	0xc4d8	; 0xc4d8 <get_net_message>
		switch (game.current_screen)
    e05e:	80 91 76 0b 	lds	r24, 0x0B76
    e062:	82 30       	cpi	r24, 0x02	; 2
    e064:	61 f1       	breq	.+88     	; 0xe0be <main+0xbe>
    e066:	78 f4       	brcc	.+30     	; 0xe086 <main+0x86>
    e068:	88 23       	and	r24, r24
    e06a:	e9 f0       	breq	.+58     	; 0xe0a6 <main+0xa6>
    e06c:	81 30       	cpi	r24, 0x01	; 1
    e06e:	09 f0       	breq	.+2      	; 0xe072 <main+0x72>
    e070:	b1 c0       	rjmp	.+354    	; 0xe1d4 <main+0x1d4>
			case SPLASH:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_splash(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
				break;
			case TANK_RANK:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e072:	60 e0       	ldi	r22, 0x00	; 0
    e074:	82 e2       	ldi	r24, 0x22	; 34
    e076:	9c e0       	ldi	r25, 0x0C	; 12
    e078:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
				update_tank_rank(&player1.netMessage.joyPadState);
    e07c:	82 e2       	ldi	r24, 0x22	; 34
    e07e:	9c e0       	ldi	r25, 0x0C	; 12
    e080:	0e 94 27 5a 	call	0xb44e	; 0xb44e <update_tank_rank>
				break;
    e084:	a7 c0       	rjmp	.+334    	; 0xe1d4 <main+0x1d4>
	
	while (1)
	{
		waitForVSync();
		get_net_message(0);
		switch (game.current_screen)
    e086:	84 30       	cpi	r24, 0x04	; 4
    e088:	a1 f1       	breq	.+104    	; 0xe0f2 <main+0xf2>
    e08a:	e8 f1       	brcs	.+122    	; 0xe106 <main+0x106>
    e08c:	85 30       	cpi	r24, 0x05	; 5
    e08e:	09 f0       	breq	.+2      	; 0xe092 <main+0x92>
    e090:	a1 c0       	rjmp	.+322    	; 0xe1d4 <main+0x1d4>
			case HOST_NET_GAME:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_host_net_game(&player1.netMessage.joyPadState);
				break;
			case JOIN_NET_GAME:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e092:	60 e0       	ldi	r22, 0x00	; 0
    e094:	82 e2       	ldi	r24, 0x22	; 34
    e096:	9c e0       	ldi	r25, 0x0C	; 12
    e098:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
				update_join_net_game(&player1.netMessage.joyPadState);
    e09c:	82 e2       	ldi	r24, 0x22	; 34
    e09e:	9c e0       	ldi	r25, 0x0C	; 12
    e0a0:	0e 94 ba 5d 	call	0xbb74	; 0xbb74 <update_join_net_game>
				break;
    e0a4:	97 c0       	rjmp	.+302    	; 0xe1d4 <main+0x1d4>
		waitForVSync();
		get_net_message(0);
		switch (game.current_screen)
		{
			case SPLASH:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e0a6:	60 e0       	ldi	r22, 0x00	; 0
    e0a8:	82 e2       	ldi	r24, 0x22	; 34
    e0aa:	9c e0       	ldi	r25, 0x0C	; 12
    e0ac:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
				update_splash(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
    e0b0:	68 e9       	ldi	r22, 0x98	; 152
    e0b2:	7f e0       	ldi	r23, 0x0F	; 15
    e0b4:	82 e2       	ldi	r24, 0x22	; 34
    e0b6:	9c e0       	ldi	r25, 0x0C	; 12
    e0b8:	0e 94 a2 5c 	call	0xb944	; 0xb944 <update_splash>
				break;
    e0bc:	8b c0       	rjmp	.+278    	; 0xe1d4 <main+0x1d4>
			case TANK_RANK:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_tank_rank(&player1.netMessage.joyPadState);
				break;
			case HANDLE_SELECT:
				if (game.selection == HOSTNETGAME)
    e0be:	80 91 89 0b 	lds	r24, 0x0B89
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e0c2:	60 e0       	ldi	r22, 0x00	; 0
			case TANK_RANK:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_tank_rank(&player1.netMessage.joyPadState);
				break;
			case HANDLE_SELECT:
				if (game.selection == HOSTNETGAME)
    e0c4:	82 30       	cpi	r24, 0x02	; 2
    e0c6:	19 f4       	brne	.+6      	; 0xe0ce <main+0xce>
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e0c8:	82 e2       	ldi	r24, 0x22	; 34
    e0ca:	9c e0       	ldi	r25, 0x0C	; 12
    e0cc:	09 c0       	rjmp	.+18     	; 0xe0e0 <main+0xe0>
				}
				else if (game.selection == JOINNETGAME)
    e0ce:	83 30       	cpi	r24, 0x03	; 3
    e0d0:	29 f0       	breq	.+10     	; 0xe0dc <main+0xdc>
				{
					LBGetJoyPadState(&player2.netMessage.joyPadState, 0);
				}
				else
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e0d2:	82 e2       	ldi	r24, 0x22	; 34
    e0d4:	9c e0       	ldi	r25, 0x0C	; 12
    e0d6:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
					LBGetJoyPadState(&player2.netMessage.joyPadState, 1);
    e0da:	61 e0       	ldi	r22, 0x01	; 1
    e0dc:	88 e9       	ldi	r24, 0x98	; 152
    e0de:	9f e0       	ldi	r25, 0x0F	; 15
    e0e0:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
				}
				update_handle_select(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
    e0e4:	68 e9       	ldi	r22, 0x98	; 152
    e0e6:	7f e0       	ldi	r23, 0x0F	; 15
    e0e8:	82 e2       	ldi	r24, 0x22	; 34
    e0ea:	9c e0       	ldi	r25, 0x0C	; 12
    e0ec:	0e 94 91 6f 	call	0xdf22	; 0xdf22 <update_handle_select>
				break;
    e0f0:	71 c0       	rjmp	.+226    	; 0xe1d4 <main+0x1d4>
#if JAMMA
#else
			case HOST_NET_GAME:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e0f2:	60 e0       	ldi	r22, 0x00	; 0
    e0f4:	82 e2       	ldi	r24, 0x22	; 34
    e0f6:	9c e0       	ldi	r25, 0x0C	; 12
    e0f8:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
				update_host_net_game(&player1.netMessage.joyPadState);
    e0fc:	82 e2       	ldi	r24, 0x22	; 34
    e0fe:	9c e0       	ldi	r25, 0x0C	; 12
    e100:	0e 94 28 5c 	call	0xb850	; 0xb850 <update_host_net_game>
				break;
    e104:	67 c0       	rjmp	.+206    	; 0xe1d4 <main+0x1d4>
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_join_net_game(&player1.netMessage.joyPadState);
				break;
#endif
			case LEVEL:
				if (game.selection == PVCPU)
    e106:	80 91 89 0b 	lds	r24, 0x0B89
    e10a:	81 11       	cpse	r24, r1
    e10c:	06 c0       	rjmp	.+12     	; 0xe11a <main+0x11a>
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e10e:	60 e0       	ldi	r22, 0x00	; 0
    e110:	82 e2       	ldi	r24, 0x22	; 34
    e112:	9c e0       	ldi	r25, 0x0C	; 12
    e114:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
    e118:	0a c0       	rjmp	.+20     	; 0xe12e <main+0x12e>
					get_cpu_joypad_state(&player2, &player1, &player2.netMessage.joyPadState);
				}
				else if (game.selection == CPUVCPU)
    e11a:	86 30       	cpi	r24, 0x06	; 6
    e11c:	89 f4       	brne	.+34     	; 0xe140 <main+0x140>
				{
					get_cpu_joypad_state(&player1, &player2, &player1.netMessage.joyPadState);
    e11e:	42 e2       	ldi	r20, 0x22	; 34
    e120:	5c e0       	ldi	r21, 0x0C	; 12
    e122:	6e e1       	ldi	r22, 0x1E	; 30
    e124:	7f e0       	ldi	r23, 0x0F	; 15
    e126:	88 ea       	ldi	r24, 0xA8	; 168
    e128:	9b e0       	ldi	r25, 0x0B	; 11
    e12a:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &player2.netMessage.joyPadState);
    e12e:	48 e9       	ldi	r20, 0x98	; 152
    e130:	5f e0       	ldi	r21, 0x0F	; 15
    e132:	68 ea       	ldi	r22, 0xA8	; 168
    e134:	7b e0       	ldi	r23, 0x0B	; 11
    e136:	8e e1       	ldi	r24, 0x1E	; 30
    e138:	9f e0       	ldi	r25, 0x0F	; 15
    e13a:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <get_cpu_joypad_state>
    e13e:	44 c0       	rjmp	.+136    	; 0xe1c8 <main+0x1c8>
				}
				else if (game.selection == HOSTNETGAME)
    e140:	82 30       	cpi	r24, 0x02	; 2
    e142:	d1 f4       	brne	.+52     	; 0xe178 <main+0x178>
	return 0;
}

void record_player_posture(Player* player)
{
	player->old_held = player->netMessage.joyPadState.held;
    e144:	80 91 26 0c 	lds	r24, 0x0C26
    e148:	90 91 27 0c 	lds	r25, 0x0C27
    e14c:	90 93 c4 0b 	sts	0x0BC4, r25
    e150:	80 93 c3 0b 	sts	0x0BC3, r24
					get_cpu_joypad_state(&player2, &player1, &player2.netMessage.joyPadState);
				}
				else if (game.selection == HOSTNETGAME)
				{
					record_player_posture(&player1);
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e154:	60 e0       	ldi	r22, 0x00	; 0
    e156:	82 e2       	ldi	r24, 0x22	; 34
    e158:	9c e0       	ldi	r25, 0x0C	; 12
    e15a:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
					if (player_posture_changed(&player1)) send_smart_net_message(&player1, &player1.netMessage.joyPadState, NETPOSCHANGE, 0);
    e15e:	88 ea       	ldi	r24, 0xA8	; 168
    e160:	9b e0       	ldi	r25, 0x0B	; 11
    e162:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <player_posture_changed>
    e166:	88 23       	and	r24, r24
    e168:	79 f1       	breq	.+94     	; 0xe1c8 <main+0x1c8>
    e16a:	20 e0       	ldi	r18, 0x00	; 0
    e16c:	46 e0       	ldi	r20, 0x06	; 6
    e16e:	62 e2       	ldi	r22, 0x22	; 34
    e170:	7c e0       	ldi	r23, 0x0C	; 12
    e172:	88 ea       	ldi	r24, 0xA8	; 168
    e174:	9b e0       	ldi	r25, 0x0B	; 11
    e176:	1b c0       	rjmp	.+54     	; 0xe1ae <main+0x1ae>
					
				}
				else if (game.selection == JOINNETGAME)
    e178:	83 30       	cpi	r24, 0x03	; 3
    e17a:	e1 f4       	brne	.+56     	; 0xe1b4 <main+0x1b4>
	return 0;
}

void record_player_posture(Player* player)
{
	player->old_held = player->netMessage.joyPadState.held;
    e17c:	80 91 9c 0f 	lds	r24, 0x0F9C
    e180:	90 91 9d 0f 	lds	r25, 0x0F9D
    e184:	90 93 3a 0f 	sts	0x0F3A, r25
    e188:	80 93 39 0f 	sts	0x0F39, r24
					
				}
				else if (game.selection == JOINNETGAME)
				{
					record_player_posture(&player2);
					LBGetJoyPadState(&player2.netMessage.joyPadState, 0);
    e18c:	60 e0       	ldi	r22, 0x00	; 0
    e18e:	88 e9       	ldi	r24, 0x98	; 152
    e190:	9f e0       	ldi	r25, 0x0F	; 15
    e192:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
					if (player_posture_changed(&player2)) send_smart_net_message(&player2, &player2.netMessage.joyPadState, NETPOSCHANGE, 0);
    e196:	8e e1       	ldi	r24, 0x1E	; 30
    e198:	9f e0       	ldi	r25, 0x0F	; 15
    e19a:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <player_posture_changed>
    e19e:	88 23       	and	r24, r24
    e1a0:	99 f0       	breq	.+38     	; 0xe1c8 <main+0x1c8>
    e1a2:	20 e0       	ldi	r18, 0x00	; 0
    e1a4:	46 e0       	ldi	r20, 0x06	; 6
    e1a6:	68 e9       	ldi	r22, 0x98	; 152
    e1a8:	7f e0       	ldi	r23, 0x0F	; 15
    e1aa:	8e e1       	ldi	r24, 0x1E	; 30
    e1ac:	9f e0       	ldi	r25, 0x0F	; 15
    e1ae:	0e 94 75 64 	call	0xc8ea	; 0xc8ea <send_smart_net_message>
    e1b2:	0a c0       	rjmp	.+20     	; 0xe1c8 <main+0x1c8>
				}
				else
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e1b4:	60 e0       	ldi	r22, 0x00	; 0
    e1b6:	82 e2       	ldi	r24, 0x22	; 34
    e1b8:	9c e0       	ldi	r25, 0x0C	; 12
    e1ba:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
					LBGetJoyPadState(&player2.netMessage.joyPadState, 1);
    e1be:	61 e0       	ldi	r22, 0x01	; 1
    e1c0:	88 e9       	ldi	r24, 0x98	; 152
    e1c2:	9f e0       	ldi	r25, 0x0F	; 15
    e1c4:	0e 94 72 4b 	call	0x96e4	; 0x96e4 <LBGetJoyPadState>
				}
				update_level(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
    e1c8:	68 e9       	ldi	r22, 0x98	; 152
    e1ca:	7f e0       	ldi	r23, 0x0F	; 15
    e1cc:	82 e2       	ldi	r24, 0x22	; 34
    e1ce:	9c e0       	ldi	r25, 0x0C	; 12
    e1d0:	0e 94 68 6b 	call	0xd6d0	; 0xd6d0 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e1d4:	80 91 0b 01 	lds	r24, 0x010B
    e1d8:	90 91 0c 01 	lds	r25, 0x010C
    e1dc:	01 96       	adiw	r24, 0x01	; 1
    e1de:	90 93 0c 01 	sts	0x010C, r25
    e1e2:	80 93 0b 01 	sts	0x010B, r24
	}
    e1e6:	36 cf       	rjmp	.-404    	; 0xe054 <main+0x54>

0000e1e8 <__udivmodqi4>:
    e1e8:	99 1b       	sub	r25, r25
    e1ea:	79 e0       	ldi	r23, 0x09	; 9
    e1ec:	04 c0       	rjmp	.+8      	; 0xe1f6 <__udivmodqi4_ep>

0000e1ee <__udivmodqi4_loop>:
    e1ee:	99 1f       	adc	r25, r25
    e1f0:	96 17       	cp	r25, r22
    e1f2:	08 f0       	brcs	.+2      	; 0xe1f6 <__udivmodqi4_ep>
    e1f4:	96 1b       	sub	r25, r22

0000e1f6 <__udivmodqi4_ep>:
    e1f6:	88 1f       	adc	r24, r24
    e1f8:	7a 95       	dec	r23
    e1fa:	c9 f7       	brne	.-14     	; 0xe1ee <__udivmodqi4_loop>
    e1fc:	80 95       	com	r24
    e1fe:	08 95       	ret

0000e200 <__udivmodhi4>:
    e200:	aa 1b       	sub	r26, r26
    e202:	bb 1b       	sub	r27, r27
    e204:	51 e1       	ldi	r21, 0x11	; 17
    e206:	07 c0       	rjmp	.+14     	; 0xe216 <__udivmodhi4_ep>

0000e208 <__udivmodhi4_loop>:
    e208:	aa 1f       	adc	r26, r26
    e20a:	bb 1f       	adc	r27, r27
    e20c:	a6 17       	cp	r26, r22
    e20e:	b7 07       	cpc	r27, r23
    e210:	10 f0       	brcs	.+4      	; 0xe216 <__udivmodhi4_ep>
    e212:	a6 1b       	sub	r26, r22
    e214:	b7 0b       	sbc	r27, r23

0000e216 <__udivmodhi4_ep>:
    e216:	88 1f       	adc	r24, r24
    e218:	99 1f       	adc	r25, r25
    e21a:	5a 95       	dec	r21
    e21c:	a9 f7       	brne	.-22     	; 0xe208 <__udivmodhi4_loop>
    e21e:	80 95       	com	r24
    e220:	90 95       	com	r25
    e222:	bc 01       	movw	r22, r24
    e224:	cd 01       	movw	r24, r26
    e226:	08 95       	ret

0000e228 <__divmodhi4>:
    e228:	97 fb       	bst	r25, 7
    e22a:	07 2e       	mov	r0, r23
    e22c:	16 f4       	brtc	.+4      	; 0xe232 <__divmodhi4+0xa>
    e22e:	00 94       	com	r0
    e230:	07 d0       	rcall	.+14     	; 0xe240 <__divmodhi4_neg1>
    e232:	77 fd       	sbrc	r23, 7
    e234:	09 d0       	rcall	.+18     	; 0xe248 <__divmodhi4_neg2>
    e236:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    e23a:	07 fc       	sbrc	r0, 7
    e23c:	05 d0       	rcall	.+10     	; 0xe248 <__divmodhi4_neg2>
    e23e:	3e f4       	brtc	.+14     	; 0xe24e <__divmodhi4_exit>

0000e240 <__divmodhi4_neg1>:
    e240:	90 95       	com	r25
    e242:	81 95       	neg	r24
    e244:	9f 4f       	sbci	r25, 0xFF	; 255
    e246:	08 95       	ret

0000e248 <__divmodhi4_neg2>:
    e248:	70 95       	com	r23
    e24a:	61 95       	neg	r22
    e24c:	7f 4f       	sbci	r23, 0xFF	; 255

0000e24e <__divmodhi4_exit>:
    e24e:	08 95       	ret

0000e250 <memcpy_P>:
    e250:	fb 01       	movw	r30, r22
    e252:	dc 01       	movw	r26, r24
    e254:	02 c0       	rjmp	.+4      	; 0xe25a <memcpy_P+0xa>
    e256:	05 90       	lpm	r0, Z+
    e258:	0d 92       	st	X+, r0
    e25a:	41 50       	subi	r20, 0x01	; 1
    e25c:	50 40       	sbci	r21, 0x00	; 0
    e25e:	d8 f7       	brcc	.-10     	; 0xe256 <memcpy_P+0x6>
    e260:	08 95       	ret

0000e262 <strnlen_P>:
    e262:	fc 01       	movw	r30, r24
    e264:	05 90       	lpm	r0, Z+
    e266:	61 50       	subi	r22, 0x01	; 1
    e268:	70 40       	sbci	r23, 0x00	; 0
    e26a:	01 10       	cpse	r0, r1
    e26c:	d8 f7       	brcc	.-10     	; 0xe264 <strnlen_P+0x2>
    e26e:	80 95       	com	r24
    e270:	90 95       	com	r25
    e272:	8e 0f       	add	r24, r30
    e274:	9f 1f       	adc	r25, r31
    e276:	08 95       	ret

0000e278 <strupr>:
    e278:	dc 01       	movw	r26, r24
    e27a:	6c 91       	ld	r22, X
    e27c:	61 56       	subi	r22, 0x61	; 97
    e27e:	6a 31       	cpi	r22, 0x1A	; 26
    e280:	08 f0       	brcs	.+2      	; 0xe284 <strupr+0xc>
    e282:	60 5e       	subi	r22, 0xE0	; 224
    e284:	6f 5b       	subi	r22, 0xBF	; 191
    e286:	6d 93       	st	X+, r22
    e288:	c1 f7       	brne	.-16     	; 0xe27a <strupr+0x2>
    e28a:	08 95       	ret

0000e28c <sprintf>:
    e28c:	ae e0       	ldi	r26, 0x0E	; 14
    e28e:	b0 e0       	ldi	r27, 0x00	; 0
    e290:	ec e4       	ldi	r30, 0x4C	; 76
    e292:	f1 e7       	ldi	r31, 0x71	; 113
    e294:	0c 94 ea 73 	jmp	0xe7d4	; 0xe7d4 <__prologue_saves__+0x1c>
    e298:	0d 89       	ldd	r16, Y+21	; 0x15
    e29a:	1e 89       	ldd	r17, Y+22	; 0x16
    e29c:	86 e0       	ldi	r24, 0x06	; 6
    e29e:	8c 83       	std	Y+4, r24	; 0x04
    e2a0:	1a 83       	std	Y+2, r17	; 0x02
    e2a2:	09 83       	std	Y+1, r16	; 0x01
    e2a4:	8f ef       	ldi	r24, 0xFF	; 255
    e2a6:	9f e7       	ldi	r25, 0x7F	; 127
    e2a8:	9e 83       	std	Y+6, r25	; 0x06
    e2aa:	8d 83       	std	Y+5, r24	; 0x05
    e2ac:	ae 01       	movw	r20, r28
    e2ae:	47 5e       	subi	r20, 0xE7	; 231
    e2b0:	5f 4f       	sbci	r21, 0xFF	; 255
    e2b2:	6f 89       	ldd	r22, Y+23	; 0x17
    e2b4:	78 8d       	ldd	r23, Y+24	; 0x18
    e2b6:	ce 01       	movw	r24, r28
    e2b8:	01 96       	adiw	r24, 0x01	; 1
    e2ba:	0e 94 69 71 	call	0xe2d2	; 0xe2d2 <vfprintf>
    e2be:	2f 81       	ldd	r18, Y+7	; 0x07
    e2c0:	38 85       	ldd	r19, Y+8	; 0x08
    e2c2:	f8 01       	movw	r30, r16
    e2c4:	e2 0f       	add	r30, r18
    e2c6:	f3 1f       	adc	r31, r19
    e2c8:	10 82       	st	Z, r1
    e2ca:	2e 96       	adiw	r28, 0x0e	; 14
    e2cc:	e4 e0       	ldi	r30, 0x04	; 4
    e2ce:	0c 94 06 74 	jmp	0xe80c	; 0xe80c <__epilogue_restores__+0x1c>

0000e2d2 <vfprintf>:
    e2d2:	ac e0       	ldi	r26, 0x0C	; 12
    e2d4:	b0 e0       	ldi	r27, 0x00	; 0
    e2d6:	ef e6       	ldi	r30, 0x6F	; 111
    e2d8:	f1 e7       	ldi	r31, 0x71	; 113
    e2da:	0c 94 dc 73 	jmp	0xe7b8	; 0xe7b8 <__prologue_saves__>
    e2de:	7c 01       	movw	r14, r24
    e2e0:	6b 01       	movw	r12, r22
    e2e2:	8a 01       	movw	r16, r20
    e2e4:	fc 01       	movw	r30, r24
    e2e6:	17 82       	std	Z+7, r1	; 0x07
    e2e8:	16 82       	std	Z+6, r1	; 0x06
    e2ea:	83 81       	ldd	r24, Z+3	; 0x03
    e2ec:	81 ff       	sbrs	r24, 1
    e2ee:	bd c1       	rjmp	.+890    	; 0xe66a <vfprintf+0x398>
    e2f0:	ce 01       	movw	r24, r28
    e2f2:	01 96       	adiw	r24, 0x01	; 1
    e2f4:	4c 01       	movw	r8, r24
    e2f6:	f7 01       	movw	r30, r14
    e2f8:	93 81       	ldd	r25, Z+3	; 0x03
    e2fa:	f6 01       	movw	r30, r12
    e2fc:	93 fd       	sbrc	r25, 3
    e2fe:	85 91       	lpm	r24, Z+
    e300:	93 ff       	sbrs	r25, 3
    e302:	81 91       	ld	r24, Z+
    e304:	6f 01       	movw	r12, r30
    e306:	88 23       	and	r24, r24
    e308:	09 f4       	brne	.+2      	; 0xe30c <vfprintf+0x3a>
    e30a:	ab c1       	rjmp	.+854    	; 0xe662 <vfprintf+0x390>
    e30c:	85 32       	cpi	r24, 0x25	; 37
    e30e:	39 f4       	brne	.+14     	; 0xe31e <vfprintf+0x4c>
    e310:	93 fd       	sbrc	r25, 3
    e312:	85 91       	lpm	r24, Z+
    e314:	93 ff       	sbrs	r25, 3
    e316:	81 91       	ld	r24, Z+
    e318:	6f 01       	movw	r12, r30
    e31a:	85 32       	cpi	r24, 0x25	; 37
    e31c:	29 f4       	brne	.+10     	; 0xe328 <vfprintf+0x56>
    e31e:	b7 01       	movw	r22, r14
    e320:	90 e0       	ldi	r25, 0x00	; 0
    e322:	0e 94 46 73 	call	0xe68c	; 0xe68c <fputc>
    e326:	e7 cf       	rjmp	.-50     	; 0xe2f6 <vfprintf+0x24>
    e328:	51 2c       	mov	r5, r1
    e32a:	31 2c       	mov	r3, r1
    e32c:	20 e0       	ldi	r18, 0x00	; 0
    e32e:	20 32       	cpi	r18, 0x20	; 32
    e330:	a0 f4       	brcc	.+40     	; 0xe35a <vfprintf+0x88>
    e332:	8b 32       	cpi	r24, 0x2B	; 43
    e334:	69 f0       	breq	.+26     	; 0xe350 <vfprintf+0x7e>
    e336:	30 f4       	brcc	.+12     	; 0xe344 <vfprintf+0x72>
    e338:	80 32       	cpi	r24, 0x20	; 32
    e33a:	59 f0       	breq	.+22     	; 0xe352 <vfprintf+0x80>
    e33c:	83 32       	cpi	r24, 0x23	; 35
    e33e:	69 f4       	brne	.+26     	; 0xe35a <vfprintf+0x88>
    e340:	20 61       	ori	r18, 0x10	; 16
    e342:	2c c0       	rjmp	.+88     	; 0xe39c <vfprintf+0xca>
    e344:	8d 32       	cpi	r24, 0x2D	; 45
    e346:	39 f0       	breq	.+14     	; 0xe356 <vfprintf+0x84>
    e348:	80 33       	cpi	r24, 0x30	; 48
    e34a:	39 f4       	brne	.+14     	; 0xe35a <vfprintf+0x88>
    e34c:	21 60       	ori	r18, 0x01	; 1
    e34e:	26 c0       	rjmp	.+76     	; 0xe39c <vfprintf+0xca>
    e350:	22 60       	ori	r18, 0x02	; 2
    e352:	24 60       	ori	r18, 0x04	; 4
    e354:	23 c0       	rjmp	.+70     	; 0xe39c <vfprintf+0xca>
    e356:	28 60       	ori	r18, 0x08	; 8
    e358:	21 c0       	rjmp	.+66     	; 0xe39c <vfprintf+0xca>
    e35a:	27 fd       	sbrc	r18, 7
    e35c:	27 c0       	rjmp	.+78     	; 0xe3ac <vfprintf+0xda>
    e35e:	30 ed       	ldi	r19, 0xD0	; 208
    e360:	38 0f       	add	r19, r24
    e362:	3a 30       	cpi	r19, 0x0A	; 10
    e364:	78 f4       	brcc	.+30     	; 0xe384 <vfprintf+0xb2>
    e366:	26 ff       	sbrs	r18, 6
    e368:	06 c0       	rjmp	.+12     	; 0xe376 <vfprintf+0xa4>
    e36a:	fa e0       	ldi	r31, 0x0A	; 10
    e36c:	5f 9e       	mul	r5, r31
    e36e:	30 0d       	add	r19, r0
    e370:	11 24       	eor	r1, r1
    e372:	53 2e       	mov	r5, r19
    e374:	13 c0       	rjmp	.+38     	; 0xe39c <vfprintf+0xca>
    e376:	8a e0       	ldi	r24, 0x0A	; 10
    e378:	38 9e       	mul	r3, r24
    e37a:	30 0d       	add	r19, r0
    e37c:	11 24       	eor	r1, r1
    e37e:	33 2e       	mov	r3, r19
    e380:	20 62       	ori	r18, 0x20	; 32
    e382:	0c c0       	rjmp	.+24     	; 0xe39c <vfprintf+0xca>
    e384:	8e 32       	cpi	r24, 0x2E	; 46
    e386:	21 f4       	brne	.+8      	; 0xe390 <vfprintf+0xbe>
    e388:	26 fd       	sbrc	r18, 6
    e38a:	6b c1       	rjmp	.+726    	; 0xe662 <vfprintf+0x390>
    e38c:	20 64       	ori	r18, 0x40	; 64
    e38e:	06 c0       	rjmp	.+12     	; 0xe39c <vfprintf+0xca>
    e390:	8c 36       	cpi	r24, 0x6C	; 108
    e392:	11 f4       	brne	.+4      	; 0xe398 <vfprintf+0xc6>
    e394:	20 68       	ori	r18, 0x80	; 128
    e396:	02 c0       	rjmp	.+4      	; 0xe39c <vfprintf+0xca>
    e398:	88 36       	cpi	r24, 0x68	; 104
    e39a:	41 f4       	brne	.+16     	; 0xe3ac <vfprintf+0xda>
    e39c:	f6 01       	movw	r30, r12
    e39e:	93 fd       	sbrc	r25, 3
    e3a0:	85 91       	lpm	r24, Z+
    e3a2:	93 ff       	sbrs	r25, 3
    e3a4:	81 91       	ld	r24, Z+
    e3a6:	6f 01       	movw	r12, r30
    e3a8:	81 11       	cpse	r24, r1
    e3aa:	c1 cf       	rjmp	.-126    	; 0xe32e <vfprintf+0x5c>
    e3ac:	98 2f       	mov	r25, r24
    e3ae:	9f 7d       	andi	r25, 0xDF	; 223
    e3b0:	95 54       	subi	r25, 0x45	; 69
    e3b2:	93 30       	cpi	r25, 0x03	; 3
    e3b4:	28 f4       	brcc	.+10     	; 0xe3c0 <vfprintf+0xee>
    e3b6:	0c 5f       	subi	r16, 0xFC	; 252
    e3b8:	1f 4f       	sbci	r17, 0xFF	; 255
    e3ba:	ff e3       	ldi	r31, 0x3F	; 63
    e3bc:	f9 83       	std	Y+1, r31	; 0x01
    e3be:	0d c0       	rjmp	.+26     	; 0xe3da <vfprintf+0x108>
    e3c0:	83 36       	cpi	r24, 0x63	; 99
    e3c2:	31 f0       	breq	.+12     	; 0xe3d0 <vfprintf+0xfe>
    e3c4:	83 37       	cpi	r24, 0x73	; 115
    e3c6:	71 f0       	breq	.+28     	; 0xe3e4 <vfprintf+0x112>
    e3c8:	83 35       	cpi	r24, 0x53	; 83
    e3ca:	09 f0       	breq	.+2      	; 0xe3ce <vfprintf+0xfc>
    e3cc:	5b c0       	rjmp	.+182    	; 0xe484 <vfprintf+0x1b2>
    e3ce:	22 c0       	rjmp	.+68     	; 0xe414 <vfprintf+0x142>
    e3d0:	f8 01       	movw	r30, r16
    e3d2:	80 81       	ld	r24, Z
    e3d4:	89 83       	std	Y+1, r24	; 0x01
    e3d6:	0e 5f       	subi	r16, 0xFE	; 254
    e3d8:	1f 4f       	sbci	r17, 0xFF	; 255
    e3da:	44 24       	eor	r4, r4
    e3dc:	43 94       	inc	r4
    e3de:	51 2c       	mov	r5, r1
    e3e0:	54 01       	movw	r10, r8
    e3e2:	15 c0       	rjmp	.+42     	; 0xe40e <vfprintf+0x13c>
    e3e4:	38 01       	movw	r6, r16
    e3e6:	f2 e0       	ldi	r31, 0x02	; 2
    e3e8:	6f 0e       	add	r6, r31
    e3ea:	71 1c       	adc	r7, r1
    e3ec:	f8 01       	movw	r30, r16
    e3ee:	a0 80       	ld	r10, Z
    e3f0:	b1 80       	ldd	r11, Z+1	; 0x01
    e3f2:	26 ff       	sbrs	r18, 6
    e3f4:	03 c0       	rjmp	.+6      	; 0xe3fc <vfprintf+0x12a>
    e3f6:	65 2d       	mov	r22, r5
    e3f8:	70 e0       	ldi	r23, 0x00	; 0
    e3fa:	02 c0       	rjmp	.+4      	; 0xe400 <vfprintf+0x12e>
    e3fc:	6f ef       	ldi	r22, 0xFF	; 255
    e3fe:	7f ef       	ldi	r23, 0xFF	; 255
    e400:	c5 01       	movw	r24, r10
    e402:	2c 87       	std	Y+12, r18	; 0x0c
    e404:	0e 94 3b 73 	call	0xe676	; 0xe676 <strnlen>
    e408:	2c 01       	movw	r4, r24
    e40a:	83 01       	movw	r16, r6
    e40c:	2c 85       	ldd	r18, Y+12	; 0x0c
    e40e:	2f 77       	andi	r18, 0x7F	; 127
    e410:	22 2e       	mov	r2, r18
    e412:	17 c0       	rjmp	.+46     	; 0xe442 <vfprintf+0x170>
    e414:	38 01       	movw	r6, r16
    e416:	f2 e0       	ldi	r31, 0x02	; 2
    e418:	6f 0e       	add	r6, r31
    e41a:	71 1c       	adc	r7, r1
    e41c:	f8 01       	movw	r30, r16
    e41e:	a0 80       	ld	r10, Z
    e420:	b1 80       	ldd	r11, Z+1	; 0x01
    e422:	26 ff       	sbrs	r18, 6
    e424:	03 c0       	rjmp	.+6      	; 0xe42c <vfprintf+0x15a>
    e426:	65 2d       	mov	r22, r5
    e428:	70 e0       	ldi	r23, 0x00	; 0
    e42a:	02 c0       	rjmp	.+4      	; 0xe430 <vfprintf+0x15e>
    e42c:	6f ef       	ldi	r22, 0xFF	; 255
    e42e:	7f ef       	ldi	r23, 0xFF	; 255
    e430:	c5 01       	movw	r24, r10
    e432:	2c 87       	std	Y+12, r18	; 0x0c
    e434:	0e 94 31 71 	call	0xe262	; 0xe262 <strnlen_P>
    e438:	2c 01       	movw	r4, r24
    e43a:	2c 85       	ldd	r18, Y+12	; 0x0c
    e43c:	20 68       	ori	r18, 0x80	; 128
    e43e:	22 2e       	mov	r2, r18
    e440:	83 01       	movw	r16, r6
    e442:	23 fc       	sbrc	r2, 3
    e444:	1b c0       	rjmp	.+54     	; 0xe47c <vfprintf+0x1aa>
    e446:	83 2d       	mov	r24, r3
    e448:	90 e0       	ldi	r25, 0x00	; 0
    e44a:	48 16       	cp	r4, r24
    e44c:	59 06       	cpc	r5, r25
    e44e:	b0 f4       	brcc	.+44     	; 0xe47c <vfprintf+0x1aa>
    e450:	b7 01       	movw	r22, r14
    e452:	80 e2       	ldi	r24, 0x20	; 32
    e454:	90 e0       	ldi	r25, 0x00	; 0
    e456:	0e 94 46 73 	call	0xe68c	; 0xe68c <fputc>
    e45a:	3a 94       	dec	r3
    e45c:	f4 cf       	rjmp	.-24     	; 0xe446 <vfprintf+0x174>
    e45e:	f5 01       	movw	r30, r10
    e460:	27 fc       	sbrc	r2, 7
    e462:	85 91       	lpm	r24, Z+
    e464:	27 fe       	sbrs	r2, 7
    e466:	81 91       	ld	r24, Z+
    e468:	5f 01       	movw	r10, r30
    e46a:	b7 01       	movw	r22, r14
    e46c:	90 e0       	ldi	r25, 0x00	; 0
    e46e:	0e 94 46 73 	call	0xe68c	; 0xe68c <fputc>
    e472:	31 10       	cpse	r3, r1
    e474:	3a 94       	dec	r3
    e476:	f1 e0       	ldi	r31, 0x01	; 1
    e478:	4f 1a       	sub	r4, r31
    e47a:	51 08       	sbc	r5, r1
    e47c:	41 14       	cp	r4, r1
    e47e:	51 04       	cpc	r5, r1
    e480:	71 f7       	brne	.-36     	; 0xe45e <vfprintf+0x18c>
    e482:	e5 c0       	rjmp	.+458    	; 0xe64e <vfprintf+0x37c>
    e484:	84 36       	cpi	r24, 0x64	; 100
    e486:	11 f0       	breq	.+4      	; 0xe48c <vfprintf+0x1ba>
    e488:	89 36       	cpi	r24, 0x69	; 105
    e48a:	39 f5       	brne	.+78     	; 0xe4da <vfprintf+0x208>
    e48c:	f8 01       	movw	r30, r16
    e48e:	27 ff       	sbrs	r18, 7
    e490:	07 c0       	rjmp	.+14     	; 0xe4a0 <vfprintf+0x1ce>
    e492:	60 81       	ld	r22, Z
    e494:	71 81       	ldd	r23, Z+1	; 0x01
    e496:	82 81       	ldd	r24, Z+2	; 0x02
    e498:	93 81       	ldd	r25, Z+3	; 0x03
    e49a:	0c 5f       	subi	r16, 0xFC	; 252
    e49c:	1f 4f       	sbci	r17, 0xFF	; 255
    e49e:	08 c0       	rjmp	.+16     	; 0xe4b0 <vfprintf+0x1de>
    e4a0:	60 81       	ld	r22, Z
    e4a2:	71 81       	ldd	r23, Z+1	; 0x01
    e4a4:	88 27       	eor	r24, r24
    e4a6:	77 fd       	sbrc	r23, 7
    e4a8:	80 95       	com	r24
    e4aa:	98 2f       	mov	r25, r24
    e4ac:	0e 5f       	subi	r16, 0xFE	; 254
    e4ae:	1f 4f       	sbci	r17, 0xFF	; 255
    e4b0:	2f 76       	andi	r18, 0x6F	; 111
    e4b2:	72 2e       	mov	r7, r18
    e4b4:	97 ff       	sbrs	r25, 7
    e4b6:	09 c0       	rjmp	.+18     	; 0xe4ca <vfprintf+0x1f8>
    e4b8:	90 95       	com	r25
    e4ba:	80 95       	com	r24
    e4bc:	70 95       	com	r23
    e4be:	61 95       	neg	r22
    e4c0:	7f 4f       	sbci	r23, 0xFF	; 255
    e4c2:	8f 4f       	sbci	r24, 0xFF	; 255
    e4c4:	9f 4f       	sbci	r25, 0xFF	; 255
    e4c6:	20 68       	ori	r18, 0x80	; 128
    e4c8:	72 2e       	mov	r7, r18
    e4ca:	2a e0       	ldi	r18, 0x0A	; 10
    e4cc:	30 e0       	ldi	r19, 0x00	; 0
    e4ce:	a4 01       	movw	r20, r8
    e4d0:	0e 94 7e 73 	call	0xe6fc	; 0xe6fc <__ultoa_invert>
    e4d4:	a8 2e       	mov	r10, r24
    e4d6:	a8 18       	sub	r10, r8
    e4d8:	44 c0       	rjmp	.+136    	; 0xe562 <vfprintf+0x290>
    e4da:	85 37       	cpi	r24, 0x75	; 117
    e4dc:	29 f4       	brne	.+10     	; 0xe4e8 <vfprintf+0x216>
    e4de:	2f 7e       	andi	r18, 0xEF	; 239
    e4e0:	b2 2e       	mov	r11, r18
    e4e2:	2a e0       	ldi	r18, 0x0A	; 10
    e4e4:	30 e0       	ldi	r19, 0x00	; 0
    e4e6:	25 c0       	rjmp	.+74     	; 0xe532 <vfprintf+0x260>
    e4e8:	f2 2f       	mov	r31, r18
    e4ea:	f9 7f       	andi	r31, 0xF9	; 249
    e4ec:	bf 2e       	mov	r11, r31
    e4ee:	8f 36       	cpi	r24, 0x6F	; 111
    e4f0:	c1 f0       	breq	.+48     	; 0xe522 <vfprintf+0x250>
    e4f2:	18 f4       	brcc	.+6      	; 0xe4fa <vfprintf+0x228>
    e4f4:	88 35       	cpi	r24, 0x58	; 88
    e4f6:	79 f0       	breq	.+30     	; 0xe516 <vfprintf+0x244>
    e4f8:	b4 c0       	rjmp	.+360    	; 0xe662 <vfprintf+0x390>
    e4fa:	80 37       	cpi	r24, 0x70	; 112
    e4fc:	19 f0       	breq	.+6      	; 0xe504 <vfprintf+0x232>
    e4fe:	88 37       	cpi	r24, 0x78	; 120
    e500:	21 f0       	breq	.+8      	; 0xe50a <vfprintf+0x238>
    e502:	af c0       	rjmp	.+350    	; 0xe662 <vfprintf+0x390>
    e504:	2f 2f       	mov	r18, r31
    e506:	20 61       	ori	r18, 0x10	; 16
    e508:	b2 2e       	mov	r11, r18
    e50a:	b4 fe       	sbrs	r11, 4
    e50c:	0d c0       	rjmp	.+26     	; 0xe528 <vfprintf+0x256>
    e50e:	8b 2d       	mov	r24, r11
    e510:	84 60       	ori	r24, 0x04	; 4
    e512:	b8 2e       	mov	r11, r24
    e514:	09 c0       	rjmp	.+18     	; 0xe528 <vfprintf+0x256>
    e516:	24 ff       	sbrs	r18, 4
    e518:	0a c0       	rjmp	.+20     	; 0xe52e <vfprintf+0x25c>
    e51a:	9f 2f       	mov	r25, r31
    e51c:	96 60       	ori	r25, 0x06	; 6
    e51e:	b9 2e       	mov	r11, r25
    e520:	06 c0       	rjmp	.+12     	; 0xe52e <vfprintf+0x25c>
    e522:	28 e0       	ldi	r18, 0x08	; 8
    e524:	30 e0       	ldi	r19, 0x00	; 0
    e526:	05 c0       	rjmp	.+10     	; 0xe532 <vfprintf+0x260>
    e528:	20 e1       	ldi	r18, 0x10	; 16
    e52a:	30 e0       	ldi	r19, 0x00	; 0
    e52c:	02 c0       	rjmp	.+4      	; 0xe532 <vfprintf+0x260>
    e52e:	20 e1       	ldi	r18, 0x10	; 16
    e530:	32 e0       	ldi	r19, 0x02	; 2
    e532:	f8 01       	movw	r30, r16
    e534:	b7 fe       	sbrs	r11, 7
    e536:	07 c0       	rjmp	.+14     	; 0xe546 <vfprintf+0x274>
    e538:	60 81       	ld	r22, Z
    e53a:	71 81       	ldd	r23, Z+1	; 0x01
    e53c:	82 81       	ldd	r24, Z+2	; 0x02
    e53e:	93 81       	ldd	r25, Z+3	; 0x03
    e540:	0c 5f       	subi	r16, 0xFC	; 252
    e542:	1f 4f       	sbci	r17, 0xFF	; 255
    e544:	06 c0       	rjmp	.+12     	; 0xe552 <vfprintf+0x280>
    e546:	60 81       	ld	r22, Z
    e548:	71 81       	ldd	r23, Z+1	; 0x01
    e54a:	80 e0       	ldi	r24, 0x00	; 0
    e54c:	90 e0       	ldi	r25, 0x00	; 0
    e54e:	0e 5f       	subi	r16, 0xFE	; 254
    e550:	1f 4f       	sbci	r17, 0xFF	; 255
    e552:	a4 01       	movw	r20, r8
    e554:	0e 94 7e 73 	call	0xe6fc	; 0xe6fc <__ultoa_invert>
    e558:	a8 2e       	mov	r10, r24
    e55a:	a8 18       	sub	r10, r8
    e55c:	fb 2d       	mov	r31, r11
    e55e:	ff 77       	andi	r31, 0x7F	; 127
    e560:	7f 2e       	mov	r7, r31
    e562:	76 fe       	sbrs	r7, 6
    e564:	0b c0       	rjmp	.+22     	; 0xe57c <vfprintf+0x2aa>
    e566:	37 2d       	mov	r19, r7
    e568:	3e 7f       	andi	r19, 0xFE	; 254
    e56a:	a5 14       	cp	r10, r5
    e56c:	50 f4       	brcc	.+20     	; 0xe582 <vfprintf+0x2b0>
    e56e:	74 fe       	sbrs	r7, 4
    e570:	0a c0       	rjmp	.+20     	; 0xe586 <vfprintf+0x2b4>
    e572:	72 fc       	sbrc	r7, 2
    e574:	08 c0       	rjmp	.+16     	; 0xe586 <vfprintf+0x2b4>
    e576:	37 2d       	mov	r19, r7
    e578:	3e 7e       	andi	r19, 0xEE	; 238
    e57a:	05 c0       	rjmp	.+10     	; 0xe586 <vfprintf+0x2b4>
    e57c:	ba 2c       	mov	r11, r10
    e57e:	37 2d       	mov	r19, r7
    e580:	03 c0       	rjmp	.+6      	; 0xe588 <vfprintf+0x2b6>
    e582:	ba 2c       	mov	r11, r10
    e584:	01 c0       	rjmp	.+2      	; 0xe588 <vfprintf+0x2b6>
    e586:	b5 2c       	mov	r11, r5
    e588:	34 ff       	sbrs	r19, 4
    e58a:	0d c0       	rjmp	.+26     	; 0xe5a6 <vfprintf+0x2d4>
    e58c:	fe 01       	movw	r30, r28
    e58e:	ea 0d       	add	r30, r10
    e590:	f1 1d       	adc	r31, r1
    e592:	80 81       	ld	r24, Z
    e594:	80 33       	cpi	r24, 0x30	; 48
    e596:	11 f4       	brne	.+4      	; 0xe59c <vfprintf+0x2ca>
    e598:	39 7e       	andi	r19, 0xE9	; 233
    e59a:	09 c0       	rjmp	.+18     	; 0xe5ae <vfprintf+0x2dc>
    e59c:	32 ff       	sbrs	r19, 2
    e59e:	06 c0       	rjmp	.+12     	; 0xe5ac <vfprintf+0x2da>
    e5a0:	b3 94       	inc	r11
    e5a2:	b3 94       	inc	r11
    e5a4:	04 c0       	rjmp	.+8      	; 0xe5ae <vfprintf+0x2dc>
    e5a6:	83 2f       	mov	r24, r19
    e5a8:	86 78       	andi	r24, 0x86	; 134
    e5aa:	09 f0       	breq	.+2      	; 0xe5ae <vfprintf+0x2dc>
    e5ac:	b3 94       	inc	r11
    e5ae:	33 fd       	sbrc	r19, 3
    e5b0:	13 c0       	rjmp	.+38     	; 0xe5d8 <vfprintf+0x306>
    e5b2:	30 ff       	sbrs	r19, 0
    e5b4:	06 c0       	rjmp	.+12     	; 0xe5c2 <vfprintf+0x2f0>
    e5b6:	5a 2c       	mov	r5, r10
    e5b8:	b3 14       	cp	r11, r3
    e5ba:	18 f4       	brcc	.+6      	; 0xe5c2 <vfprintf+0x2f0>
    e5bc:	53 0c       	add	r5, r3
    e5be:	5b 18       	sub	r5, r11
    e5c0:	b3 2c       	mov	r11, r3
    e5c2:	b3 14       	cp	r11, r3
    e5c4:	68 f4       	brcc	.+26     	; 0xe5e0 <vfprintf+0x30e>
    e5c6:	b7 01       	movw	r22, r14
    e5c8:	80 e2       	ldi	r24, 0x20	; 32
    e5ca:	90 e0       	ldi	r25, 0x00	; 0
    e5cc:	3c 87       	std	Y+12, r19	; 0x0c
    e5ce:	0e 94 46 73 	call	0xe68c	; 0xe68c <fputc>
    e5d2:	b3 94       	inc	r11
    e5d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    e5d6:	f5 cf       	rjmp	.-22     	; 0xe5c2 <vfprintf+0x2f0>
    e5d8:	b3 14       	cp	r11, r3
    e5da:	10 f4       	brcc	.+4      	; 0xe5e0 <vfprintf+0x30e>
    e5dc:	3b 18       	sub	r3, r11
    e5de:	01 c0       	rjmp	.+2      	; 0xe5e2 <vfprintf+0x310>
    e5e0:	31 2c       	mov	r3, r1
    e5e2:	34 ff       	sbrs	r19, 4
    e5e4:	12 c0       	rjmp	.+36     	; 0xe60a <vfprintf+0x338>
    e5e6:	b7 01       	movw	r22, r14
    e5e8:	80 e3       	ldi	r24, 0x30	; 48
    e5ea:	90 e0       	ldi	r25, 0x00	; 0
    e5ec:	3c 87       	std	Y+12, r19	; 0x0c
    e5ee:	0e 94 46 73 	call	0xe68c	; 0xe68c <fputc>
    e5f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    e5f4:	32 ff       	sbrs	r19, 2
    e5f6:	17 c0       	rjmp	.+46     	; 0xe626 <vfprintf+0x354>
    e5f8:	31 fd       	sbrc	r19, 1
    e5fa:	03 c0       	rjmp	.+6      	; 0xe602 <vfprintf+0x330>
    e5fc:	88 e7       	ldi	r24, 0x78	; 120
    e5fe:	90 e0       	ldi	r25, 0x00	; 0
    e600:	02 c0       	rjmp	.+4      	; 0xe606 <vfprintf+0x334>
    e602:	88 e5       	ldi	r24, 0x58	; 88
    e604:	90 e0       	ldi	r25, 0x00	; 0
    e606:	b7 01       	movw	r22, r14
    e608:	0c c0       	rjmp	.+24     	; 0xe622 <vfprintf+0x350>
    e60a:	83 2f       	mov	r24, r19
    e60c:	86 78       	andi	r24, 0x86	; 134
    e60e:	59 f0       	breq	.+22     	; 0xe626 <vfprintf+0x354>
    e610:	31 ff       	sbrs	r19, 1
    e612:	02 c0       	rjmp	.+4      	; 0xe618 <vfprintf+0x346>
    e614:	8b e2       	ldi	r24, 0x2B	; 43
    e616:	01 c0       	rjmp	.+2      	; 0xe61a <vfprintf+0x348>
    e618:	80 e2       	ldi	r24, 0x20	; 32
    e61a:	37 fd       	sbrc	r19, 7
    e61c:	8d e2       	ldi	r24, 0x2D	; 45
    e61e:	b7 01       	movw	r22, r14
    e620:	90 e0       	ldi	r25, 0x00	; 0
    e622:	0e 94 46 73 	call	0xe68c	; 0xe68c <fputc>
    e626:	a5 14       	cp	r10, r5
    e628:	38 f4       	brcc	.+14     	; 0xe638 <vfprintf+0x366>
    e62a:	b7 01       	movw	r22, r14
    e62c:	80 e3       	ldi	r24, 0x30	; 48
    e62e:	90 e0       	ldi	r25, 0x00	; 0
    e630:	0e 94 46 73 	call	0xe68c	; 0xe68c <fputc>
    e634:	5a 94       	dec	r5
    e636:	f7 cf       	rjmp	.-18     	; 0xe626 <vfprintf+0x354>
    e638:	aa 94       	dec	r10
    e63a:	f4 01       	movw	r30, r8
    e63c:	ea 0d       	add	r30, r10
    e63e:	f1 1d       	adc	r31, r1
    e640:	80 81       	ld	r24, Z
    e642:	b7 01       	movw	r22, r14
    e644:	90 e0       	ldi	r25, 0x00	; 0
    e646:	0e 94 46 73 	call	0xe68c	; 0xe68c <fputc>
    e64a:	a1 10       	cpse	r10, r1
    e64c:	f5 cf       	rjmp	.-22     	; 0xe638 <vfprintf+0x366>
    e64e:	33 20       	and	r3, r3
    e650:	09 f4       	brne	.+2      	; 0xe654 <vfprintf+0x382>
    e652:	51 ce       	rjmp	.-862    	; 0xe2f6 <vfprintf+0x24>
    e654:	b7 01       	movw	r22, r14
    e656:	80 e2       	ldi	r24, 0x20	; 32
    e658:	90 e0       	ldi	r25, 0x00	; 0
    e65a:	0e 94 46 73 	call	0xe68c	; 0xe68c <fputc>
    e65e:	3a 94       	dec	r3
    e660:	f6 cf       	rjmp	.-20     	; 0xe64e <vfprintf+0x37c>
    e662:	f7 01       	movw	r30, r14
    e664:	86 81       	ldd	r24, Z+6	; 0x06
    e666:	97 81       	ldd	r25, Z+7	; 0x07
    e668:	02 c0       	rjmp	.+4      	; 0xe66e <vfprintf+0x39c>
    e66a:	8f ef       	ldi	r24, 0xFF	; 255
    e66c:	9f ef       	ldi	r25, 0xFF	; 255
    e66e:	2c 96       	adiw	r28, 0x0c	; 12
    e670:	e2 e1       	ldi	r30, 0x12	; 18
    e672:	0c 94 f8 73 	jmp	0xe7f0	; 0xe7f0 <__epilogue_restores__>

0000e676 <strnlen>:
    e676:	fc 01       	movw	r30, r24
    e678:	61 50       	subi	r22, 0x01	; 1
    e67a:	70 40       	sbci	r23, 0x00	; 0
    e67c:	01 90       	ld	r0, Z+
    e67e:	01 10       	cpse	r0, r1
    e680:	d8 f7       	brcc	.-10     	; 0xe678 <strnlen+0x2>
    e682:	80 95       	com	r24
    e684:	90 95       	com	r25
    e686:	8e 0f       	add	r24, r30
    e688:	9f 1f       	adc	r25, r31
    e68a:	08 95       	ret

0000e68c <fputc>:
    e68c:	0f 93       	push	r16
    e68e:	1f 93       	push	r17
    e690:	cf 93       	push	r28
    e692:	df 93       	push	r29
    e694:	fb 01       	movw	r30, r22
    e696:	23 81       	ldd	r18, Z+3	; 0x03
    e698:	21 fd       	sbrc	r18, 1
    e69a:	03 c0       	rjmp	.+6      	; 0xe6a2 <fputc+0x16>
    e69c:	8f ef       	ldi	r24, 0xFF	; 255
    e69e:	9f ef       	ldi	r25, 0xFF	; 255
    e6a0:	28 c0       	rjmp	.+80     	; 0xe6f2 <fputc+0x66>
    e6a2:	22 ff       	sbrs	r18, 2
    e6a4:	16 c0       	rjmp	.+44     	; 0xe6d2 <fputc+0x46>
    e6a6:	46 81       	ldd	r20, Z+6	; 0x06
    e6a8:	57 81       	ldd	r21, Z+7	; 0x07
    e6aa:	24 81       	ldd	r18, Z+4	; 0x04
    e6ac:	35 81       	ldd	r19, Z+5	; 0x05
    e6ae:	42 17       	cp	r20, r18
    e6b0:	53 07       	cpc	r21, r19
    e6b2:	44 f4       	brge	.+16     	; 0xe6c4 <fputc+0x38>
    e6b4:	a0 81       	ld	r26, Z
    e6b6:	b1 81       	ldd	r27, Z+1	; 0x01
    e6b8:	9d 01       	movw	r18, r26
    e6ba:	2f 5f       	subi	r18, 0xFF	; 255
    e6bc:	3f 4f       	sbci	r19, 0xFF	; 255
    e6be:	31 83       	std	Z+1, r19	; 0x01
    e6c0:	20 83       	st	Z, r18
    e6c2:	8c 93       	st	X, r24
    e6c4:	26 81       	ldd	r18, Z+6	; 0x06
    e6c6:	37 81       	ldd	r19, Z+7	; 0x07
    e6c8:	2f 5f       	subi	r18, 0xFF	; 255
    e6ca:	3f 4f       	sbci	r19, 0xFF	; 255
    e6cc:	37 83       	std	Z+7, r19	; 0x07
    e6ce:	26 83       	std	Z+6, r18	; 0x06
    e6d0:	10 c0       	rjmp	.+32     	; 0xe6f2 <fputc+0x66>
    e6d2:	eb 01       	movw	r28, r22
    e6d4:	09 2f       	mov	r16, r25
    e6d6:	18 2f       	mov	r17, r24
    e6d8:	00 84       	ldd	r0, Z+8	; 0x08
    e6da:	f1 85       	ldd	r31, Z+9	; 0x09
    e6dc:	e0 2d       	mov	r30, r0
    e6de:	09 95       	icall
    e6e0:	89 2b       	or	r24, r25
    e6e2:	e1 f6       	brne	.-72     	; 0xe69c <fputc+0x10>
    e6e4:	8e 81       	ldd	r24, Y+6	; 0x06
    e6e6:	9f 81       	ldd	r25, Y+7	; 0x07
    e6e8:	01 96       	adiw	r24, 0x01	; 1
    e6ea:	9f 83       	std	Y+7, r25	; 0x07
    e6ec:	8e 83       	std	Y+6, r24	; 0x06
    e6ee:	81 2f       	mov	r24, r17
    e6f0:	90 2f       	mov	r25, r16
    e6f2:	df 91       	pop	r29
    e6f4:	cf 91       	pop	r28
    e6f6:	1f 91       	pop	r17
    e6f8:	0f 91       	pop	r16
    e6fa:	08 95       	ret

0000e6fc <__ultoa_invert>:
    e6fc:	fa 01       	movw	r30, r20
    e6fe:	aa 27       	eor	r26, r26
    e700:	28 30       	cpi	r18, 0x08	; 8
    e702:	51 f1       	breq	.+84     	; 0xe758 <__ultoa_invert+0x5c>
    e704:	20 31       	cpi	r18, 0x10	; 16
    e706:	81 f1       	breq	.+96     	; 0xe768 <__ultoa_invert+0x6c>
    e708:	e8 94       	clt
    e70a:	6f 93       	push	r22
    e70c:	6e 7f       	andi	r22, 0xFE	; 254
    e70e:	6e 5f       	subi	r22, 0xFE	; 254
    e710:	7f 4f       	sbci	r23, 0xFF	; 255
    e712:	8f 4f       	sbci	r24, 0xFF	; 255
    e714:	9f 4f       	sbci	r25, 0xFF	; 255
    e716:	af 4f       	sbci	r26, 0xFF	; 255
    e718:	b1 e0       	ldi	r27, 0x01	; 1
    e71a:	3e d0       	rcall	.+124    	; 0xe798 <__ultoa_invert+0x9c>
    e71c:	b4 e0       	ldi	r27, 0x04	; 4
    e71e:	3c d0       	rcall	.+120    	; 0xe798 <__ultoa_invert+0x9c>
    e720:	67 0f       	add	r22, r23
    e722:	78 1f       	adc	r23, r24
    e724:	89 1f       	adc	r24, r25
    e726:	9a 1f       	adc	r25, r26
    e728:	a1 1d       	adc	r26, r1
    e72a:	68 0f       	add	r22, r24
    e72c:	79 1f       	adc	r23, r25
    e72e:	8a 1f       	adc	r24, r26
    e730:	91 1d       	adc	r25, r1
    e732:	a1 1d       	adc	r26, r1
    e734:	6a 0f       	add	r22, r26
    e736:	71 1d       	adc	r23, r1
    e738:	81 1d       	adc	r24, r1
    e73a:	91 1d       	adc	r25, r1
    e73c:	a1 1d       	adc	r26, r1
    e73e:	20 d0       	rcall	.+64     	; 0xe780 <__ultoa_invert+0x84>
    e740:	09 f4       	brne	.+2      	; 0xe744 <__ultoa_invert+0x48>
    e742:	68 94       	set
    e744:	3f 91       	pop	r19
    e746:	2a e0       	ldi	r18, 0x0A	; 10
    e748:	26 9f       	mul	r18, r22
    e74a:	11 24       	eor	r1, r1
    e74c:	30 19       	sub	r19, r0
    e74e:	30 5d       	subi	r19, 0xD0	; 208
    e750:	31 93       	st	Z+, r19
    e752:	de f6       	brtc	.-74     	; 0xe70a <__ultoa_invert+0xe>
    e754:	cf 01       	movw	r24, r30
    e756:	08 95       	ret
    e758:	46 2f       	mov	r20, r22
    e75a:	47 70       	andi	r20, 0x07	; 7
    e75c:	40 5d       	subi	r20, 0xD0	; 208
    e75e:	41 93       	st	Z+, r20
    e760:	b3 e0       	ldi	r27, 0x03	; 3
    e762:	0f d0       	rcall	.+30     	; 0xe782 <__ultoa_invert+0x86>
    e764:	c9 f7       	brne	.-14     	; 0xe758 <__ultoa_invert+0x5c>
    e766:	f6 cf       	rjmp	.-20     	; 0xe754 <__ultoa_invert+0x58>
    e768:	46 2f       	mov	r20, r22
    e76a:	4f 70       	andi	r20, 0x0F	; 15
    e76c:	40 5d       	subi	r20, 0xD0	; 208
    e76e:	4a 33       	cpi	r20, 0x3A	; 58
    e770:	18 f0       	brcs	.+6      	; 0xe778 <__ultoa_invert+0x7c>
    e772:	49 5d       	subi	r20, 0xD9	; 217
    e774:	31 fd       	sbrc	r19, 1
    e776:	40 52       	subi	r20, 0x20	; 32
    e778:	41 93       	st	Z+, r20
    e77a:	02 d0       	rcall	.+4      	; 0xe780 <__ultoa_invert+0x84>
    e77c:	a9 f7       	brne	.-22     	; 0xe768 <__ultoa_invert+0x6c>
    e77e:	ea cf       	rjmp	.-44     	; 0xe754 <__ultoa_invert+0x58>
    e780:	b4 e0       	ldi	r27, 0x04	; 4
    e782:	a6 95       	lsr	r26
    e784:	97 95       	ror	r25
    e786:	87 95       	ror	r24
    e788:	77 95       	ror	r23
    e78a:	67 95       	ror	r22
    e78c:	ba 95       	dec	r27
    e78e:	c9 f7       	brne	.-14     	; 0xe782 <__ultoa_invert+0x86>
    e790:	00 97       	sbiw	r24, 0x00	; 0
    e792:	61 05       	cpc	r22, r1
    e794:	71 05       	cpc	r23, r1
    e796:	08 95       	ret
    e798:	9b 01       	movw	r18, r22
    e79a:	ac 01       	movw	r20, r24
    e79c:	0a 2e       	mov	r0, r26
    e79e:	06 94       	lsr	r0
    e7a0:	57 95       	ror	r21
    e7a2:	47 95       	ror	r20
    e7a4:	37 95       	ror	r19
    e7a6:	27 95       	ror	r18
    e7a8:	ba 95       	dec	r27
    e7aa:	c9 f7       	brne	.-14     	; 0xe79e <__ultoa_invert+0xa2>
    e7ac:	62 0f       	add	r22, r18
    e7ae:	73 1f       	adc	r23, r19
    e7b0:	84 1f       	adc	r24, r20
    e7b2:	95 1f       	adc	r25, r21
    e7b4:	a0 1d       	adc	r26, r0
    e7b6:	08 95       	ret

0000e7b8 <__prologue_saves__>:
    e7b8:	2f 92       	push	r2
    e7ba:	3f 92       	push	r3
    e7bc:	4f 92       	push	r4
    e7be:	5f 92       	push	r5
    e7c0:	6f 92       	push	r6
    e7c2:	7f 92       	push	r7
    e7c4:	8f 92       	push	r8
    e7c6:	9f 92       	push	r9
    e7c8:	af 92       	push	r10
    e7ca:	bf 92       	push	r11
    e7cc:	cf 92       	push	r12
    e7ce:	df 92       	push	r13
    e7d0:	ef 92       	push	r14
    e7d2:	ff 92       	push	r15
    e7d4:	0f 93       	push	r16
    e7d6:	1f 93       	push	r17
    e7d8:	cf 93       	push	r28
    e7da:	df 93       	push	r29
    e7dc:	cd b7       	in	r28, 0x3d	; 61
    e7de:	de b7       	in	r29, 0x3e	; 62
    e7e0:	ca 1b       	sub	r28, r26
    e7e2:	db 0b       	sbc	r29, r27
    e7e4:	0f b6       	in	r0, 0x3f	; 63
    e7e6:	f8 94       	cli
    e7e8:	de bf       	out	0x3e, r29	; 62
    e7ea:	0f be       	out	0x3f, r0	; 63
    e7ec:	cd bf       	out	0x3d, r28	; 61
    e7ee:	09 94       	ijmp

0000e7f0 <__epilogue_restores__>:
    e7f0:	2a 88       	ldd	r2, Y+18	; 0x12
    e7f2:	39 88       	ldd	r3, Y+17	; 0x11
    e7f4:	48 88       	ldd	r4, Y+16	; 0x10
    e7f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    e7f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    e7fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    e7fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    e7fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    e800:	aa 84       	ldd	r10, Y+10	; 0x0a
    e802:	b9 84       	ldd	r11, Y+9	; 0x09
    e804:	c8 84       	ldd	r12, Y+8	; 0x08
    e806:	df 80       	ldd	r13, Y+7	; 0x07
    e808:	ee 80       	ldd	r14, Y+6	; 0x06
    e80a:	fd 80       	ldd	r15, Y+5	; 0x05
    e80c:	0c 81       	ldd	r16, Y+4	; 0x04
    e80e:	1b 81       	ldd	r17, Y+3	; 0x03
    e810:	aa 81       	ldd	r26, Y+2	; 0x02
    e812:	b9 81       	ldd	r27, Y+1	; 0x01
    e814:	ce 0f       	add	r28, r30
    e816:	d1 1d       	adc	r29, r1
    e818:	0f b6       	in	r0, 0x3f	; 63
    e81a:	f8 94       	cli
    e81c:	de bf       	out	0x3e, r29	; 62
    e81e:	0f be       	out	0x3f, r0	; 63
    e820:	cd bf       	out	0x3d, r28	; 61
    e822:	ed 01       	movw	r28, r26
    e824:	08 95       	ret

0000e826 <_exit>:
    e826:	f8 94       	cli

0000e828 <__stop_program>:
    e828:	ff cf       	rjmp	.-2      	; 0xe828 <__stop_program>
