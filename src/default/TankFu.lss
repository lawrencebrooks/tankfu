
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000eeaa  0000efaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000eeaa  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f15  00800154  00800154  0000f014  2**5
                  ALLOC
  3 .stab         000009b4  00000000  00000000  0000f000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000034b  00000000  00000000  0000f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000fcff  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000808  00000000  00000000  0000fd10  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c35c  00000000  00000000  00010518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001738  00000000  00000000  0001c874  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002928  00000000  00000000  0001dfac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001a40  00000000  00000000  000208d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000023af  00000000  00000000  00022314  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000aa27  00000000  00000000  000246c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000920  00000000  00000000  0002f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__ctors_end>
       4:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
       8:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
       c:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      10:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      14:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      18:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      1c:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      20:	0c 94 c5 3a 	jmp	0x758a	; 0x758a <__vector_8>
      24:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      28:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      2c:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      30:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      34:	0c 94 84 38 	jmp	0x7108	; 0x7108 <__vector_13>
      38:	0c 94 c3 38 	jmp	0x7186	; 0x7186 <__vector_14>
      3c:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      40:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      44:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      48:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      4c:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      50:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      54:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      58:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      5c:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      60:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      64:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      68:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>
      6c:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	a9 3c ac 3c 08 3d 0c 3d 13 3d b4 3c b9 3c be 3c     .<.<.=.=.=.<.<.<
      ce:	1b 3d c1 3c c4 3c c7 3c 02 3d 05 3d 2b 3d           .=.<.<.<.=.=+=

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <__c.2840>:
      e8:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

000000f5 <__c.2836>:
      f5:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

00000104 <__c.2838>:
     104:	4f 4b 0d 0a 00                                      OK...

00000109 <__c.2832>:
     109:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     119:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 31 22 2c     ","192.168.4.1",
     129:	32 32 33 33 2c 31 30 30 31 0d 0a 00                 2233,1001...

00000135 <__c.2834>:
     135:	4f 4b 0d 0a 00                                      OK...

0000013a <__c.2828>:
     13a:	41 54 2b 43 49 50 53 54 41 5f 43 55 52 3d 22 31     AT+CIPSTA_CUR="1
     14a:	39 32 2e 31 36 38 2e 34 2e 32 22 0d 0a 00           92.168.4.2"...

00000158 <__c.2830>:
     158:	4f 4b 0d 0a 00                                      OK...

0000015d <__c.2826>:
     15d:	4f 4b 0d 0a 00                                      OK...

00000162 <__c.2822>:
     162:	41 54 2b 43 57 4c 41 50 0d 0a 00                    AT+CWLAP...

0000016d <__c.2824>:
     16d:	4f 4b 0d 0a 00                                      OK...

00000172 <__c.2818>:
     172:	41 54 2b 43 57 44 48 43 50 5f 43 55 52 3d 31 2c     AT+CWDHCP_CUR=1,
     182:	30 0d 0a 00                                         0...

00000186 <__c.2820>:
     186:	4f 4b 0d 0a 00                                      OK...

0000018b <__c.2814>:
     18b:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 31 0d     AT+CWMODE_CUR=1.
     19b:	0a 00                                               ..

0000019d <__c.2816>:
     19d:	4f 4b 0d 0a 00                                      OK...

000001a2 <__c.2808>:
     1a2:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

000001af <__c.2804>:
     1af:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

000001be <__c.2806>:
     1be:	4f 4b 0d 0a 00                                      OK...

000001c3 <__c.2800>:
     1c3:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     1d3:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 32 22 2c     ","192.168.4.2",
     1e3:	31 30 30 31 2c 32 32 33 33 2c 30 0d 0a 00           1001,2233,0...

000001f1 <__c.2802>:
     1f1:	4f 4b 0d 0a 00                                      OK...

000001f6 <__c.2798>:
     1f6:	4f 4b 0d 0a 00                                      OK...

000001fb <__c.2791>:
     1fb:	4f 4b 0d 0a 00                                      OK...

00000200 <__c.2789>:
     200:	41 54 2b 43 49 50 41 50 4d 41 43 5f 43 55 52 3f     AT+CIPAPMAC_CUR?
     210:	0d 0a 00                                            ...

00000213 <__c.2785>:
     213:	41 54 2b 43 49 50 41 50 5f 43 55 52 3d 22 31 39     AT+CIPAP_CUR="19
     223:	32 2e 31 36 38 2e 34 2e 31 22 0d 0a 00              2.168.4.1"...

00000230 <__c.2787>:
     230:	4f 4b 0d 0a 00                                      OK...

00000235 <__c.2781>:
     235:	41 54 2b 43 57 44 48 43 50 5f 43 55 52 3d 30 2c     AT+CWDHCP_CUR=0,
     245:	30 0d 0a 00                                         0...

00000249 <__c.2783>:
     249:	4f 4b 0d 0a 00                                      OK...

0000024e <__c.2777>:
     24e:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 32 0d     AT+CWMODE_CUR=2.
     25e:	0a 00                                               ..

00000260 <__c.2779>:
     260:	4f 4b 0d 0a 00                                      OK...

00000265 <__c.2761>:
     265:	41 54 2b 43 49 50 43 4c 4f 53 45 0d 0a 00           AT+CIPCLOSE...

00000273 <__c.2763>:
     273:	4f 4b 0d 0a 00                                      OK...

00000278 <__c.2757>:
     278:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 0d 0a 00        AT+CIPMODE=0...

00000287 <__c.2759>:
     287:	4f 4b 0d 0a 00                                      OK...

0000028c <__c.2752>:
     28c:	2b 2b 2b 00                                         +++.

00000290 <__c.2719>:
     290:	41 54 2b 55 41 52 54 5f 43 55 52 3d 31 34 34 30     AT+UART_CUR=1440
     2a0:	30 2c 38 2c 31 2c 30 2c 30 0d 0a 00                 0,8,1,0,0...

000002ac <__c.2721>:
     2ac:	4f 4b 0d 0a 00                                      OK...

000002b1 <__c.2713>:
     2b1:	41 54 0d 0a 00                                      AT...

000002b6 <__c.2715>:
     2b6:	4f 4b 0d 0a 00                                      OK...

000002bb <bauds>:
     2bb:	72 01 f6 00 b8 00 5c 00 3c 00 2c 00 1e 00           r.....\.<.,...

000002c9 <strCredits>:
     2c9:	54 41 4e 4b 20 46 55 20 56 33 2e 30 20 46 4f 52     TANK FU V3.0 FOR
     2d9:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     2e9:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     2f9:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     309:	4f 4b 53 00 00 00 00 00 4c 4f 4f 4b 49 4e 47 20     OKS.....LOOKING 
     319:	46 4f 52 20 57 49 46 49 20 44 45 56 49 43 45 2e     FOR WIFI DEVICE.
     329:	2e 2e 00 23 00                                      ...#.

0000032e <default_scores>:
     32e:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     33e:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000034c <default_handles>:
     34c:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     35c:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000036a <strLevels>:
     36a:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     37a:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     38a:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     39a:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     3aa:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     3ba:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     3ca:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     3da:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     3ea:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     3fa:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     40a:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

0000041a <strPaused>:
     41a:	50 41 55 53 45 44 00                                PAUSED.

00000421 <strExit>:
     421:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

0000042a <strTotal>:
     42a:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000431 <strScore>:
     431:	53 43 4f 52 45 3a 00                                SCORE:.

00000438 <strFinalScore>:
     438:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000444 <strBy>:
     444:	42 59 00                                            BY.

00000447 <strOwns>:
     447:	4f 57 4e 53 00                                      OWNS.

0000044c <strChangeHandle>:
     44c:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

0000045b <strPlayer2>:
     45b:	50 32 00                                            P2.

0000045e <strPlayer1>:
     45e:	50 31 00                                            P1.

00000461 <strVertSep>:
     461:	3b 00                                               ;.

00000463 <strUnderline>:
     463:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000046f <strHandlesTitle>:
     46f:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

0000047b <strHighscores>:
     47b:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000485 <strCopyright>:
     485:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     495:	4f 4f 4b 53 00                                      OOKS.

0000049a <strSelectHandle>:
     49a:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

000004a9 <strCancelHandle>:
     4a9:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

000004b4 <strReset>:
     4b4:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     4c4:	20 53 4c 20 28 35 53 29 00                           SL (5S).

000004cd <strConfirmHandle>:
     4cd:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     4dd:	54 00                                               T.

000004df <strNetworkError>:
     4df:	4e 45 54 57 4f 52 4b 20 45 52 52 4f 52 00           NETWORK ERROR.

000004ed <strEnterGameId>:
     4ed:	45 4e 54 45 52 20 48 4f 53 54 20 47 41 4d 45 20     ENTER HOST GAME 
     4fd:	49 44 00                                            ID.

00000500 <strConnecting>:
     500:	43 4f 4e 4e 45 43 54 49 4e 47 2e 2e 2e 00           CONNECTING....

0000050e <strWaitingForNetOppenent>:
     50e:	57 41 49 54 49 4e 47 20 4f 4e 20 4c 41 4e 20 4f     WAITING ON LAN O
     51e:	50 50 4f 4e 45 4e 54 2e 2e 2e 00                    PPONENT....

00000529 <strShareGameId>:
     529:	53 48 41 52 45 20 59 4f 55 52 20 47 41 4d 45 20     SHARE YOUR GAME 
     539:	49 44 00                                            ID.

0000053c <strJoinNetGame>:
     53c:	4a 4f 49 4e 20 4c 41 4e 20 47 41 4d 45 00           JOIN LAN GAME.

0000054a <strHostNetGame>:
     54a:	48 4f 53 54 20 4c 41 4e 20 47 41 4d 45 00           HOST LAN GAME.

00000558 <str2Player>:
     558:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000569 <str1Player>:
     569:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000577 <my_patches>:
     577:	00 00 00 7f 06 00 00 00 00 00 00 00 68 06 00 00     ............h...
     587:	00 00 00 00 00 57 06 00 00 00 00 00 00 00 57 06     .....W........W.
     597:	00 00 00 00 00 00 00 57 06 00 00 00 00 00 00 00     .......W........
     5a7:	68 06 00 00 00 00 00 00 00 f0 06 00 00 00 00 00     h...............
     5b7:	00 00 bf 05 00 00 00 00                             ........

000005bf <ad_alarm>:
     5bf:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     5cf:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     5df:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     5ef:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     5ff:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     60f:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     61f:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     62f:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     63f:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     64f:	01 03 01 01 05 00 00 ff                             ........

00000657 <ad_navigate>:
     657:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
     667:	ff                                                  .

00000668 <ad_cannonball>:
     668:	00 07 7f 00 08 32 00 02 03 00 00 f0 00 0c 0c 00     .....2..........
     678:	0b e8 08 00 e0 00 ff                                .......

0000067f <ad_brick_explode>:
     67f:	00 07 7f 00 02 03 00 00 ff 00 07 64 00 08 32 01     ...........d..2.
     68f:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     69f:	04 01 04 04 01 04 04 01 04 04 03 07 50 00 08 2d     ............P..-
     6af:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     6bf:	04 04 01 04 04 01 04 04 01 04 04 03 07 3c 00 08     .............<..
     6cf:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     6df:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     6ef:	ff                                                  .

000006f0 <ad_tank_explode>:
     6f0:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
     700:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     710:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
     720:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     730:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
     740:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
     750:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
     760:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     770:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
     780:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     790:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
     7a0:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     7b0:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     7c0:	ff                                                  .

000007c1 <level_data>:
     7c1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     7d1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     7f9:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
     811:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
     821:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     831:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
     84d:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
     85d:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     86d:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
     889:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
     8a9:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
     8b9:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
     8c9:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
     8d9:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     8e9:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
     8f9:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
     909:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     919:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
     929:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
     939:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
     949:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
     959:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
     969:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
     979:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
     991:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     9a1:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
     9bd:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
     9d5:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
     9f1:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
     a01:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     a11:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
     a2d:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
     a3d:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     a4d:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
     a6d:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
     a8d:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     a9d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     aad:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     abd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     acd:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ae9:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     b05:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     b15:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
     b25:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     b35:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     b45:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
     b55:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
     b65:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
     b75:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     b85:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
     b95:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     ba5:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     bb5:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
     bc5:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
     bd5:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
     be5:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
     bf5:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
     c05:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
     c15:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
     c25:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
     c35:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
     c45:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
     c55:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
     c65:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     c75:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
     c85:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     c95:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     ca5:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
     cb5:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
     cc5:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
     cd5:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
     ce5:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     cf5:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
     d05:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     d15:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     d25:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
     d35:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
     d45:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d5d:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     d79:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
     d89:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     d99:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     da9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     db9:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     dd5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     df5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e11:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e31:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e4d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e6d:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     e85:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     ea1:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     eb1:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
     ec1:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
     ed1:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
     ee1:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     ef1:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
     f01:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
     f11:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
     f21:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
     f31:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
     f41:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
     f51:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
     f61:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
     f71:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
     f81:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f91:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     fa1:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fb1:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     fcd:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
     ff1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1011:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    102d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    104d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1069:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1079:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1089:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1099:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10a9:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    10b9:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    10c9:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    10d9:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    10e9:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    10f9:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    1109:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    1119:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    1129:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    1139:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    1149:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    1159:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    1169:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    1179:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    1189:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    1199:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    11b5:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    11cd:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    11dd:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    11ed:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    11fd:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    1215:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    1225:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1235:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1245:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1255:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1265:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    127d:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    128d:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    129d:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    12b5:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    12c5:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    12d5:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    12e5:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    12f5:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    1305:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    1315:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    132d:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    133d:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1355:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    1365:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1375:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1385:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1395:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    13b1:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    13cd:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    13ed:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    13fd:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    140d:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    1429:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    1449:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    1465:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    1485:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    1495:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    14a5:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    14b5:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    14cd:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    14dd:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    14ed:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    14fd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    150d:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    151d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    1539:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1549:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    1559:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1569:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    1589:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    15a5:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    15c5:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    15dd:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    15ed:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1609:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    1625:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    1645:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1655:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1665:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1675:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1685:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    1695:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    16ad:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    16bd:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    16cd:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    16dd:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    16ed:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    16fd:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    170d:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    171d:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    172d:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    1755:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1765:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1775:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    1785:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    179d:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    17ad:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    17bd:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    17cd:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    17dd:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    17ed:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    17fd:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    1815:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    1825:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1835:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    1845:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1855:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1865:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    1875:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    1885:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    1895:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    18a5:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    18b5:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    18c5:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    18d5:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    18e5:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    18f5:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    1911:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1935:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1945:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1955:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1965:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1975:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    1985:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    199d:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    19ad:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    19bd:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    19cd:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    19dd:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    19ed:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    19fd:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    1a0d:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1a1d:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1a2d:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1a3d:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1a61:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a7d:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    1a8d:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    1a9d:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    1aad:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    1abd:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    1acd:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    1add:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1aed:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1b05:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1b15:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b31:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b51:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1b61:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1b71:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1b81:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1b91:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    1ba1:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    1bb1:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    1bc1:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1bd1:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    1be1:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    1bf1:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    1c01:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    1c11:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    1c21:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c31:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c41:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c51:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c61:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c7d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c99:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cb9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cd5:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1ce5:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1cf5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d11:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d29:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1d39:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1d49:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    1d59:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    1d69:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    1d79:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    1d89:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    1d99:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    1da9:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    1db9:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    1dc9:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    1dd9:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    1df1:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    1e01:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    1e11:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    1e21:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e31:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    1e41:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e5d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e79:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1e89:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1e99:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1eb5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ed5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ef1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f11:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f21:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f31:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f41:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1f69:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f89:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fa5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fc5:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1fd5:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1fe5:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2001:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    201d:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2035:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2045:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2055:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    2065:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    2075:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    2085:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    2095:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    20a5:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    20b5:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    20c5:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    20d5:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    20e5:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    20f5:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    210d:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    212d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2149:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2169:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2179:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2189:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21a5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21c1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21e1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21fd:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    220d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    221d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    222d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    223d:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    224d:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2265:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2275:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2285:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    2295:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    22a5:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    22b5:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    22c5:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    22dd:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    22ed:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    22fd:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    230d:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    231d:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    232d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2349:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    2359:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    2369:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    2379:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    2389:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    2399:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    23a9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    23b9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    23c9:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    23d9:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    23fd:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    240d:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    241d:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    242d:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2445:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2455:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2465:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    2475:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    2485:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    2495:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    24a5:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    24bd:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    24cd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    24dd:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    24ed:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24fd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    250d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    251d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    252d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    253d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    254d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    255d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    256d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    257d:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    258d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    259d:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    25ad:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25bd:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    25cd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25dd:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    25ed:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    25fd:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    260d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    261d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    262d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    263d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    264d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    265d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    266d:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    267d:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    268d:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    26ad:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26cd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26e9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2709:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    2721:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    2745:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2761:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2781:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    279d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    27ad:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    27bd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27d9:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    27e9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    27f9:	02 02                                               ..

000027fb <sprites_data>:
    27fb:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    280b:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    281b:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    282b:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    283b:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    284b:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    285b:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    286b:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    287b:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    288b:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    289b:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    28ab:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    28bb:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    28cb:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    28db:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    28eb:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    28fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    290b:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    291b:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    292b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    293b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    294b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    295b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    296b:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    297b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    298b:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    299b:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    29ab:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    29bb:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    29cb:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    29db:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    29eb:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    29fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a0b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2a1b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2a2b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a3b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a4b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2a5b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2a6b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a7b:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    2a8b:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    2a9b:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    2aab:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    2abb:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    2acb:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    2adb:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2aeb:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2afb:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2b0b:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2b1b:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2b2b:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2b3b:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2b4b:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2b5b:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2b6b:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2b7b:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2b8b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2b9b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2bab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bbb:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2bcb:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2bdb:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2beb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bfb:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2c0b:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2c1b:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2c2b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c3b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c4b:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2c5b:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2c6b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2c7b:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2c8b:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    2c9b:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    2cab:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2cbb:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    2ccb:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    2cdb:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    2ceb:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2cfb:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2d0b:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    2d1b:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    2d2b:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    2d3b:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2d4b:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2d5b:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    2d6b:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    2d7b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d8b:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    2d9b:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    2dab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dbb:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2dcb:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2ddb:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    2deb:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    2dfb:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2e0b:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2e1b:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    2e2b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e3b:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2e4b:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    2e5b:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    2e6b:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e7b:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2e8b:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    2e9b:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    2eab:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ebb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ecb:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    2edb:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    2eeb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2efb:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2f0b:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    2f1b:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    2f2b:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    2f3b:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2f4b:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    2f5b:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    2f6b:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    2f7b:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2f8b:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2f9b:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    2fab:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2fbb:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    2fcb:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2fdb:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2feb:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2ffb:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    300b:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    301b:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    302b:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    303b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    304b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    305b:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    306b:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    307b:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    308b:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    309b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30ab:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30bb:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    30cb:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    30db:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    30eb:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    30fb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    310b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    311b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    312b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

0000313b <map_sub_turret>:
    313b:	01 01 23                                            ..#

0000313e <map_sub_shot>:
    313e:	01 01 1b                                            ...

00003141 <map_up_arrow>:
    3141:	01 01 22                                            .."

00003144 <map_down_arrow>:
    3144:	01 01 21                                            ..!

00003147 <map_right_arrow>:
    3147:	01 01 20                                            .. 

0000314a <map_rocket_right_1>:
    314a:	01 01 1a                                            ...

0000314d <map_rocket_right_0>:
    314d:	01 01 19                                            ...

00003150 <map_rocket_up_1>:
    3150:	01 01 18                                            ...

00003153 <map_rocket_up_0>:
    3153:	01 01 17                                            ...

00003156 <map_ball>:
    3156:	01 01 16                                            ...

00003159 <map_explosion_2>:
    3159:	02 02 08 09 09 08                                   ......

0000315f <map_explosion_1>:
    315f:	02 02 06 07 10 11                                   ......

00003165 <map_explosion_0>:
    3165:	02 02 04 05 0e 0f                                   ......

0000316b <map_tank2_right_0>:
    316b:	02 02 14 15 1e 1f                                   ......

00003171 <map_tank2_up_0>:
    3171:	02 02 12 13 1c 1d                                   ......

00003177 <map_tank1_right_0>:
    3177:	02 02 02 03 0c 0d                                   ......

0000317d <map_tank1_up_0>:
    317d:	02 02 00 01 0a 0b                                   ......

00003183 <map_tank_blank>:
    3183:	02 02 24 24 24 24                                   ..$$$$

00003189 <map_none>:
    3189:	01 01 24                                            ..$

0000318c <tiles_data>:
	...
    31cc:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    31dc:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    31ec:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    31fc:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    320c:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    321c:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    322c:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    323c:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    324c:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    325c:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    326c:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    327c:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    328c:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    329c:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    32ac:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    32bc:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    32cc:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    32dc:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    32ec:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    32fc:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    3314:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    3324:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3334:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    334c:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    335c:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    336c:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    337c:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    3394:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    33b4:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    33cc:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    33dc:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    33ec:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    33fc:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    340c:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    341c:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    342c:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    343c:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    344c:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    345c:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    346c:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    347c:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    348c:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    349c:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    34ac:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    34bc:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    34cc:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    34dc:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    34ec:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    34fc:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    350c:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    351c:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    352c:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    353c:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    354c:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    355c:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    356c:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    357c:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    358c:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    359c:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    35ac:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    35bc:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    35cc:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    35dc:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    35ec:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    35fc:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    360c:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    361c:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    362c:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    363c:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    364c:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    365c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    366c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    367c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    368c:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    369c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    36ac:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    36bc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    36ec:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    36fc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    370c:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    371c:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    372c:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    373c:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    374c:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    375c:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    376c:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    377c:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    378c:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    379c:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    37ac:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    37bc:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    37cc:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    37dc:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    37ec:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    37fc:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    380c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    381c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    382c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    383c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    384c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    385c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    388c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    389c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38ac:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    38bc:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    38cc:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    38dc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38ec:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38fc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    390c:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    394c:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    395c:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    396c:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    397c:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    398c:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    399c:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    39ac:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    39bc:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    39fc:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    3a34:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    3a44:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    3a54:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    3a64:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    3a74:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    3a84:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    3a94:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    3aa4:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    3ab4:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    3ac4:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    3ad4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ae4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3af4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b04:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b14:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b24:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b34:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b44:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    3b54:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    3b64:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    3b74:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    3b84:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    3b94:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    3ba4:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    3bb4:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    3bc4:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    3bd4:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c0c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3c1c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3c2c:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    3c50:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    3c60:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    3c70:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    3c80:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    3c90:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    3ca0:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    3cb0:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    3cc0:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    3cd0:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3ce0:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3cf0:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3d00:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    3d10:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d20:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d30:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d40:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    3d50:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    3d60:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d70:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3d80:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    3d90:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    3da0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3db0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3dc0:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    3dd0:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    3de0:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    3df0:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    3e00:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    3e10:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    3e20:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    3e30:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    3e40:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    3e50:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e60:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3e70:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    3e80:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    3e90:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3ea0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3eb0:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    3ec0:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    3ed0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3ee0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3ef0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    3f00:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    3f10:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3f20:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3f30:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f40:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    3f50:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    3f60:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3f70:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f80:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3f90:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    3fa0:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fb0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fc0:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3fd0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    3fe0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3ff0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4000:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    4010:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    4020:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4030:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4040:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4050:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4060:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4070:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4080:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    4090:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    40a0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    40b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    40c0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    40d0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    40e0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    40f0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    4100:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    4110:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4120:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    4130:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4140:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4150:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4160:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4170:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4180:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    4190:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    41a0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    41b0:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    41c0:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    41d0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    41e0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    41f0:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    4200:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4210:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4220:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    4230:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    4240:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4250:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    4260:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    4270:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    4280:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    4290:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42a0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42c0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    42d0:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42e0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42f0:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    4300:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    4310:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4320:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4330:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    4340:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4350:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4360:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4370:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4380:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4390:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    43a0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    43b0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    43c0:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    43d0:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    43e0:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    43f0:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4400:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4410:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4420:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4430:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4440:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4450:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    4460:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    4470:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4480:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4490:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    44a0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    44b0:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    44c0:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    44d0:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44e0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    44f0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4500:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    4510:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    4520:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    4530:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    4540:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    4550:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    4560:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    4570:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    4580:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    4590:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    45a0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    45b0:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    45c0:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    45d0:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    45e0:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    45f0:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4600:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    4610:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4620:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4630:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4640:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    4650:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    4660:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    4670:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4680:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    4690:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46a0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46b0:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    46c0:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    46d0:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46e0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46f0:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4700:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    4710:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4720:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4730:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    4740:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    4750:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4760:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4770:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4780:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    4790:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    47a0:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    47b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    47c0:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    47d0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    47e0:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    47f0:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    4800:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    4810:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    4820:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    4830:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4840:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    4850:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    4860:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    4870:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    4880:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    4890:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    48a0:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    48b0:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    48c0:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    48d0:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    48e0:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    48f0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4900:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    4910:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4920:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4930:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4940:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4950:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4960:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4970:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4980:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4990:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    49a0:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    49b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    49c0:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    49d0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    49e0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    49f0:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    4a00:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a10:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4a20:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4a30:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a40:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a50:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4a60:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4a70:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a80:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a90:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    4aa0:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    4ab0:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    4ac0:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    4ad0:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    4ae0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4af0:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4b00:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    4b10:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    4b20:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    4b30:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    4b40:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    4b50:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    4b60:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    4b70:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    4b80:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4b90:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4ba0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    4bb0:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    4bc0:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    4bd0:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4be0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4bf0:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4c00:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    4c10:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c20:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4c30:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    4c40:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    4c50:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c60:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c70:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c80:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    4c90:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4ca0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4cb0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4cc0:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4cd0:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    4ce0:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4cf0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4d00:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4d10:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d20:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    4d30:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    4d40:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4d50:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d60:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4d70:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    4d80:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    4d90:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    4da0:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    4db0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4dc0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    4dd0:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    4de0:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4df0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e00:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    4e10:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4e20:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4e30:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e40:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4e50:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    4e60:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    4e70:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    4e80:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    4e90:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    4ea0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4eb0:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4ec0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    4ed0:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    4ee0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4ef0:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4f00:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f10:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4f20:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    4f30:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    4f40:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f50:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    4f60:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f70:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f80:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f90:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4fa0:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fb0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4fc0:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    4fd0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4fe0:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ff0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5000:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5010:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5020:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5030:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5040:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5050:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5060:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5070:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5080:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5090:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    50a0:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50b0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    50c0:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    50d0:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    50e0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50f0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5100:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5110:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5120:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5130:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    5140:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5150:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    5160:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5170:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5180:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    5190:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    51a0:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    51b0:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    51c0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    51d0:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    51e0:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    51f0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5200:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5210:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    5220:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    5230:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5240:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5250:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    5260:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5270:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5280:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5290:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52a0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    52b0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    52c0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    52d0:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52e0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    52f0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5300:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    5310:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5320:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5330:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5340:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5350:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5360:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    5370:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5380:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5390:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    53a0:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    53b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    53d0:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    53e0:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53f0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5400:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5410:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    5420:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5430:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5440:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5450:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    5460:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5470:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5480:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5490:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54a0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    54d0:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    54e0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54f0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5500:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5510:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    5520:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    5530:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5540:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5550:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5560:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5570:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    5580:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5590:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    55a0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    55b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    55c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    55d0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    55e0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    55f0:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    5600:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    5610:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    5620:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    5630:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5640:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5650:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5660:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    5670:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5680:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5690:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56a0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56c0:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    56d0:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    56e0:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    56f0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5700:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5710:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5720:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    5730:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    5740:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5750:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5760:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5770:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    5780:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5790:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57a0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    57c0:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    57d0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57e0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57f0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    5800:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5810:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5820:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5830:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    5840:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    5894:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    58a4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    58bc:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    58d4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    58e4:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5914:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    5924:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5934:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    594c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    595c:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    596c:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    597c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5994:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    59a4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    59b4:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    59cc:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    59dc:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    59ec:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    59fc:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    5a14:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a24:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a58:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5a68:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5a78:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    5a94:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    5aa4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ab4:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    5ad4:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    5ae4:	df df df df df df df df 00 00 df df df df 00 00     ................
    5af4:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    5b14:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5b24:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5b34:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b74:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5b84:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5ba4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5bf4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5c18:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5c28:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    5c38:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5c54:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5c64:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    5c74:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5c94:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    5ca4:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    5cb4:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    5cd4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5ce4:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5cf4:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    5d14:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    5d24:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    5d34:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5d58:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    5d68:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    5d78:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    5d94:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    5da4:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    5db4:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5dd4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    5de4:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    5df4:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5e14:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    5e24:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5e34:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    5e54:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e64:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5e74:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5e94:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5ea4:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    5eb4:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    5edc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5ef4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5f0c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f1c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f2c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f3c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f4c:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    5f5c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5f6c:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5f7c:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5f9c:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5fb4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5fcc:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    5fdc:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5fec:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5ffc:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6014:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6024:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    603c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6054:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6064:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    6074:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    6094:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    60a4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60b4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    60d4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60e4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60f4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6114:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6124:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6134:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6154:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    6164:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6174:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6194:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61a4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    61b4:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    61d4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61e4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    61f4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6214:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6224:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    6234:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    6254:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6264:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6274:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6294:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    62a4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    62b4:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    62d8:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    62e8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    62f8:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    6314:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6324:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    6334:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6354:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6364:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6374:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6394:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    63a4:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    63b4:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    63d4:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    63e4:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    63f4:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6414:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6424:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6434:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6454:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6464:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6474:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6494:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    64a4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64b4:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    64d4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    64e4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    64f4:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6514:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6524:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6534:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6554:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6564:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6574:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6594:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65a4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65b4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    65d4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65e4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65f4:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6614:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    6624:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    6634:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    6654:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6664:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    6674:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6694:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    66a4:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    66b4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    66d4:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    66e4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    66f4:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6714:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6724:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6734:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    6754:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6764:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    6774:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    6794:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    67a4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    67b4:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    67d8:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    67e8:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    683c:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

0000684c <map_sub_emerging>:
    684c:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    685c:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    686c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    687c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    688c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    689c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    68ac:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    68bc:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    68cc:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    68dc:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    68ec:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    68fc:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    690c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    691c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    692c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    693c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    694c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    695c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    696c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    697c:	0d 0d 0d 0d 0d 0d                                   ......

00006982 <map_sub>:
    6982:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6992:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    69a2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69b2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69c2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69d2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    69e2:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    69f2:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    6a02:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    6a12:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    6a22:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    6a32:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    6a42:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a52:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    6a62:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a72:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a82:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a92:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6aa2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6ab2:	0d 0d 0d 0d 0d 0d                                   ......

00006ab8 <map_scope_2>:
    6ab8:	01 01 12                                            ...

00006abb <map_scope_1>:
    6abb:	01 01 11                                            ...

00006abe <map_scope_0>:
    6abe:	01 01 10                                            ...

00006ac1 <map_blue_tank>:
    6ac1:	02 02 2b 2c 31 32                                   ..+,12

00006ac7 <map_green_tank>:
    6ac7:	02 02 18 19 23 24                                   ....#$

00006acd <map_fence>:
    6acd:	01 01 0f                                            ...

00006ad0 <map_turf>:
    6ad0:	01 01 0e                                            ...

00006ad3 <map_water>:
    6ad3:	01 01 0d                                            ...

00006ad6 <map_metal_bl>:
    6ad6:	01 01 0c                                            ...

00006ad9 <map_metal_tr>:
    6ad9:	01 01 0b                                            ...

00006adc <map_metal_br>:
    6adc:	01 01 0a                                            ...

00006adf <map_metal_tl>:
    6adf:	01 01 09                                            ...

00006ae2 <map_tile_exp_2>:
    6ae2:	01 01 08                                            ...

00006ae5 <map_tile_exp_1>:
    6ae5:	01 01 07                                            ...

00006ae8 <map_tile_exp_0>:
    6ae8:	01 01 06                                            ...

00006aeb <map_rocket_itm>:
    6aeb:	01 01 04                                            ...

00006aee <map_explode_itm>:
    6aee:	01 01 03                                            ...

00006af1 <map_speed_itm>:
    6af1:	01 01 02                                            ...

00006af4 <map_metal>:
    6af4:	01 01 05                                            ...

00006af7 <map_brick>:
    6af7:	01 01 01                                            ...

00006afa <map_splash>:
    6afa:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    6b0a:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    6b1a:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    6b2a:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    6b3a:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    6b4a:	1a 00 00 1a 2f 30                                   ..../0

00006b50 <map_pause>:
    6b50:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    6b60:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    6b70:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    6b80:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00006b8e <map_tile_none>:
    6b8e:	01 01 00 00                                         ....

00006b92 <__ctors_end>:
    6b92:	11 24       	eor	r1, r1
    6b94:	1f be       	out	0x3f, r1	; 63
    6b96:	cf ef       	ldi	r28, 0xFF	; 255
    6b98:	d0 e1       	ldi	r29, 0x10	; 16
    6b9a:	de bf       	out	0x3e, r29	; 62
    6b9c:	cd bf       	out	0x3d, r28	; 61

00006b9e <__do_copy_data>:
    6b9e:	11 e0       	ldi	r17, 0x01	; 1
    6ba0:	a0 e0       	ldi	r26, 0x00	; 0
    6ba2:	b1 e0       	ldi	r27, 0x01	; 1
    6ba4:	ea ea       	ldi	r30, 0xAA	; 170
    6ba6:	fe ee       	ldi	r31, 0xEE	; 238
    6ba8:	02 c0       	rjmp	.+4      	; 0x6bae <__do_copy_data+0x10>
    6baa:	05 90       	lpm	r0, Z+
    6bac:	0d 92       	st	X+, r0
    6bae:	a4 35       	cpi	r26, 0x54	; 84
    6bb0:	b1 07       	cpc	r27, r17
    6bb2:	d9 f7       	brne	.-10     	; 0x6baa <__do_copy_data+0xc>

00006bb4 <__do_clear_bss>:
    6bb4:	10 e1       	ldi	r17, 0x10	; 16
    6bb6:	a4 e5       	ldi	r26, 0x54	; 84
    6bb8:	b1 e0       	ldi	r27, 0x01	; 1
    6bba:	01 c0       	rjmp	.+2      	; 0x6bbe <.do_clear_bss_start>

00006bbc <.do_clear_bss_loop>:
    6bbc:	1d 92       	st	X+, r1

00006bbe <.do_clear_bss_start>:
    6bbe:	a9 36       	cpi	r26, 0x69	; 105
    6bc0:	b1 07       	cpc	r27, r17
    6bc2:	e1 f7       	brne	.-8      	; 0x6bbc <.do_clear_bss_loop>

00006bc4 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6bc4:	0e 94 98 3a 	call	0x7530	; 0x7530 <wdt_randomize>
#endif

    MCUSR = 0;
    6bc8:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6bca:	88 e1       	ldi	r24, 0x18	; 24
    6bcc:	0f b6       	in	r0, 0x3f	; 63
    6bce:	f8 94       	cli
    6bd0:	80 93 60 00 	sts	0x0060, r24
    6bd4:	10 92 60 00 	sts	0x0060, r1
    6bd8:	0f be       	out	0x3f, r0	; 63

00006bda <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6bda:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <isEepromFormatted>
    6bde:	81 11       	cpse	r24, r1
    6be0:	02 c0       	rjmp	.+4      	; 0x6be6 <Initialize+0xc>
    6be2:	0e 94 38 3b 	call	0x7670	; 0x7670 <FormatEeprom>

	cli();
    6be6:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6be8:	c1 e0       	ldi	r28, 0x01	; 1
    6bea:	c0 93 58 0a 	sts	0x0A58, r28
		tr4_barrel_hi=1;		
    6bee:	c0 93 59 0a 	sts	0x0A59, r28
		tr4_params=0b00000001; //15 bits no divider (1)
    6bf2:	c0 93 57 0a 	sts	0x0A57, r28
	#endif

	#if UART == 1
		InitUartRxBuffer();
    6bf6:	0e 94 5d 3c 	call	0x78ba	; 0x78ba <InitUartRxBuffer>
		InitUartTxBuffer();
    6bfa:	0e 94 76 3c 	call	0x78ec	; 0x78ec <InitUartTxBuffer>
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6bfe:	10 92 44 0a 	sts	0x0A44, r1
    6c02:	10 92 4a 0a 	sts	0x0A4A, r1
    6c06:	10 92 50 0a 	sts	0x0A50, r1
    6c0a:	10 92 56 0a 	sts	0x0A56, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6c0e:	10 92 1e 0a 	sts	0x0A1E, r1
	sync_flags=0;
    6c12:	10 92 20 0a 	sts	0x0A20, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6c16:	82 e1       	ldi	r24, 0x12	; 18
    6c18:	80 93 1f 0a 	sts	0x0A1F, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6c1c:	80 ee       	ldi	r24, 0xE0	; 224
    6c1e:	80 93 26 0a 	sts	0x0A26, r24
	first_render_line=FIRST_RENDER_LINE;
    6c22:	84 e1       	ldi	r24, 0x14	; 20
    6c24:	80 93 25 0a 	sts	0x0A25, r24

	joypad1_status_hi=0;
    6c28:	10 92 2a 0a 	sts	0x0A2A, r1
    6c2c:	10 92 29 0a 	sts	0x0A29, r1
	joypad2_status_hi=0;
    6c30:	10 92 2e 0a 	sts	0x0A2E, r1
    6c34:	10 92 2d 0a 	sts	0x0A2D, r1
	sound_enabled=1;
    6c38:	c0 93 43 0a 	sts	0x0A43, r28

	InitializeVideoMode();
    6c3c:	0e 94 5e 48 	call	0x90bc	; 0x90bc <InitializeVideoMode>
    6c40:	80 e7       	ldi	r24, 0x70	; 112
    6c42:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6c44:	fc 01       	movw	r30, r24
    6c46:	25 91       	lpm	r18, Z+
    6c48:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6c4a:	f9 01       	movw	r30, r18
    6c4c:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6c4e:	30 83       	st	Z, r19
    6c50:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6c52:	20 e0       	ldi	r18, 0x00	; 0
    6c54:	8e 39       	cpi	r24, 0x9E	; 158
    6c56:	92 07       	cpc	r25, r18
    6c58:	a9 f7       	brne	.-22     	; 0x6c44 <Initialize+0x6a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6c5a:	78 94       	sei
	
	DisplayLogo();
    6c5c:	0e 94 5d 48 	call	0x90ba	; 0x90ba <DisplayLogo>
    6c60:	0e 94 e7 70 	call	0xe1ce	; 0xe1ce <main>
    6c64:	0c 94 53 77 	jmp	0xeea6	; 0xeea6 <_exit>

00006c68 <__bad_interrupt>:
    6c68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006c6c <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    6c6c:	0b e9       	ldi	r16, 0x9B	; 155
    6c6e:	0a 95       	dec	r16
    6c70:	f1 f7       	brne	.-4      	; 0x6c6e <sub_video_mode3+0x2>
		dec r19
		brne 1b

#else

		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1
    6c72:	10 e0       	ldi	r17, 0x00	; 0
    6c74:	1a 95       	dec	r17
    6c76:	f1 f7       	brne	.-4      	; 0x6c74 <sub_video_mode3+0x8>
    6c78:	1e e1       	ldi	r17, 0x1E	; 30
    6c7a:	1a 95       	dec	r17
    6c7c:	f1 f7       	brne	.-4      	; 0x6c7a <sub_video_mode3+0xe>

#endif


		lds r2,overlay_tile_table
    6c7e:	20 90 1b 0a 	lds	r2, 0x0A1B
		lds r3,overlay_tile_table+1
    6c82:	30 90 1c 0a 	lds	r3, 0x0A1C
		lds r16,tile_table_lo 
    6c86:	00 91 17 0a 	lds	r16, 0x0A17
		lds r17,tile_table_hi
    6c8a:	10 91 18 0a 	lds	r17, 0x0A18
		movw r12,r16
    6c8e:	68 01       	movw	r12, r16
		movw r6,r16
    6c90:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6c92:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6c94:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6c96:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6c98:	4e 01       	movw	r8, r28
		clr r0
    6c9a:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6c9c:	30 91 1a 0a 	lds	r19, 0x0A1A
		cpi r19,0
    6ca0:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6ca2:	09 f0       	breq	.+2      	; 0x6ca6 <sub_video_mode3+0x3a>
		ldi YL,lo8(overlay_vram)
    6ca4:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    6ca6:	09 f0       	breq	.+2      	; 0x6caa <sub_video_mode3+0x3e>
		ldi YH,hi8(overlay_vram)
    6ca8:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6caa:	09 f0       	breq	.+2      	; 0x6cae <sub_video_mode3+0x42>
		mov r24,r19
    6cac:	83 2f       	mov	r24, r19

		breq .+2
    6cae:	09 f0       	breq	.+2      	; 0x6cb2 <sub_video_mode3+0x46>
		movw r12,r2
    6cb0:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6cb2:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6cb4:	a0 2e       	mov	r10, r16
		clr r22
    6cb6:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6cb8:	78 e0       	ldi	r23, 0x08	; 8

00006cba <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6cba:	07 d3       	rcall	.+1550   	; 0x72ca <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6cbc:	3c e0       	ldi	r19, 0x0C	; 12
    6cbe:	3a 95       	dec	r19
    6cc0:	f1 f7       	brne	.-4      	; 0x6cbe <next_tile_line+0x4>
    6cc2:	00 00       	nop

		;***draw line***
		call render_tile_line
    6cc4:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6cc8:	3f e0       	ldi	r19, 0x0F	; 15
    6cca:	3a 95       	dec	r19
    6ccc:	f1 f7       	brne	.-4      	; 0x6cca <next_tile_line+0x10>
    6cce:	00 c0       	rjmp	.+0      	; 0x6cd0 <next_tile_line+0x16>

		dec r10
    6cd0:	aa 94       	dec	r10
		breq frame_end
    6cd2:	a1 f0       	breq	.+40     	; 0x6cfc <frame_end>
	
		inc r22
    6cd4:	63 95       	inc	r22
		lpm ;3 nop
    6cd6:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6cd8:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6cda:	29 f0       	breq	.+10     	; 0x6ce6 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6cdc:	33 e0       	ldi	r19, 0x03	; 3
    6cde:	3a 95       	dec	r19
    6ce0:	f1 f7       	brne	.-4      	; 0x6cde <next_tile_line+0x24>
    6ce2:	00 c0       	rjmp	.+0      	; 0x6ce4 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    6ce4:	ea cf       	rjmp	.-44     	; 0x6cba <next_tile_line>

00006ce6 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6ce6:	66 27       	eor	r22, r22

		clr r0
    6ce8:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6cea:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6cec:	c3 0f       	add	r28, r19
		adc YH,r0
    6cee:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6cf0:	8a 95       	dec	r24
		brne .+2
    6cf2:	09 f4       	brne	.+2      	; 0x6cf6 <next_tile_row+0x10>
		movw YL,r8	;main vram
    6cf4:	e4 01       	movw	r28, r8
		brne .+2
    6cf6:	09 f4       	brne	.+2      	; 0x6cfa <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6cf8:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6cfa:	df cf       	rjmp	.-66     	; 0x6cba <next_tile_line>

00006cfc <frame_end>:

	frame_end:

		WAIT r19,18
    6cfc:	36 e0       	ldi	r19, 0x06	; 6
    6cfe:	3a 95       	dec	r19
    6d00:	f1 f7       	brne	.-4      	; 0x6cfe <frame_end+0x2>

		rcall hsync_pulse ;145
    6d02:	e3 d2       	rcall	.+1478   	; 0x72ca <hsync_pulse>
		clr r1
		call RestoreBackground
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    6d04:	e0 91 20 0a 	lds	r30, 0x0A20
		ldi r20,SYNC_FLAG_FIELD
    6d08:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6d0a:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6d0c:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6d0e:	e0 93 20 0a 	sts	0x0A20, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6d12:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6d14:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6d18:	11 24       	eor	r1, r1


		ret
    6d1a:	08 95       	ret

00006d1c <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6d1c:	de 01       	movw	r26, r28

		mul r22,r23
    6d1e:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6d20:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d22:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d24:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    6d26:	00 0d       	add	r16, r0
		adc r17,r1
    6d28:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6d2a:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6d2c:	00 ed       	ldi	r16, 0xD0	; 208
		ldi r17,hi8(ram_tiles)
    6d2e:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6d30:	00 0d       	add	r16, r0
		adc r17,r1
    6d32:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6d34:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6d36:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6d38:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6d3a:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6d3c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6d3e:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6d40:	24 31       	cpi	r18, 0x14	; 20
		brcc .+2
    6d42:	08 f4       	brcc	.+2      	; 0x6d46 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6d44:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6d46:	04 0e       	add	r0, r20
	    adc r1,r21
    6d48:	15 1e       	adc	r1, r21

		movw ZL,r0
    6d4a:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6d4c:	24 31       	cpi	r18, 0x14	; 20
		brcs ramloop
    6d4e:	f0 f0       	brcs	.+60     	; 0x6d8c <ramloop>

00006d50 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6d50:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6d52:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6d54:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6d56:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6d58:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6d5a:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6d5c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6d5e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6d60:	24 31       	cpi	r18, 0x14	; 20
		nop
    6d62:	00 00       	nop

	    lpm r16,Z+
    6d64:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6d66:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6d68:	08 f4       	brcc	.+2      	; 0x6d6c <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6d6a:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6d6c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6d6e:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6d70:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6d72:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6d74:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6d76:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6d78:	24 31       	cpi	r18, 0x14	; 20
		dec r17			;decrement tiles to draw on line
    6d7a:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6d7c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6d7e:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6d80:	05 91       	lpm	r16, Z+

		breq end	
    6d82:	31 f1       	breq	.+76     	; 0x6dd0 <end>
	    movw ZL,r0   	;copy next tile adress
    6d84:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6d86:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6d88:	18 f7       	brcc	.-58     	; 0x6d50 <romloop>
	
		rjmp .
    6d8a:	00 c0       	rjmp	.+0      	; 0x6d8c <ramloop>

00006d8c <ramloop>:

	ramloop:

	    ld r16,Z+
    6d8c:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6d8e:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6d90:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6d92:	01 91       	ld	r16, Z+
		nop   
    6d94:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6d96:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6d98:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6d9a:	01 91       	ld	r16, Z+
		nop
    6d9c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6d9e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6da0:	24 31       	cpi	r18, 0x14	; 20
   		rjmp .
    6da2:	00 c0       	rjmp	.+0      	; 0x6da4 <ramloop+0x18>

	    ld r16,Z+
    6da4:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6da6:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6da8:	08 f0       	brcs	.+2      	; 0x6dac <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6daa:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6dac:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6dae:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6db0:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6db2:	15 1e       	adc	r1, r21
		rjmp .
    6db4:	00 c0       	rjmp	.+0      	; 0x6db6 <ramloop+0x2a>
    
		ld r16,Z+		
    6db6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6db8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6dba:	24 31       	cpi	r18, 0x14	; 20
		rjmp .  
    6dbc:	00 c0       	rjmp	.+0      	; 0x6dbe <ramloop+0x32>

	    ld r16,Z+	
    6dbe:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6dc0:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6dc2:	01 91       	ld	r16, Z+

	    dec r17
    6dc4:	1a 95       	dec	r17
	    breq end
    6dc6:	21 f0       	breq	.+8      	; 0x6dd0 <end>
	
		movw ZL,r0
    6dc8:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6dca:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6dcc:	08 f6       	brcc	.-126    	; 0x6d50 <romloop>
		rjmp ramloop
    6dce:	de cf       	rjmp	.-68     	; 0x6d8c <ramloop>

00006dd0 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6dd0:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6dd2:	00 27       	eor	r16, r16
		lpm	
    6dd4:	c8 95       	lpm
		nop
    6dd6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6dd8:	08 b9       	out	0x08, r16	; 8

		ret
    6dda:	08 95       	ret

00006ddc <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6ddc:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6dde:	e0 91 17 0a 	lds	r30, 0x0A17
	lds ZH,tile_table_hi
    6de2:	f0 91 18 0a 	lds	r31, 0x0A18
	mul r24,r18
    6de6:	82 9f       	mul	r24, r18
	add ZL,r0
    6de8:	e0 0d       	add	r30, r0
	adc ZH,r1
    6dea:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6dec:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6dee:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6df0:	62 9f       	mul	r22, r18
	add XL,r0
    6df2:	a0 0d       	add	r26, r0
	adc XH,r1
    6df4:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6df6:	15 90       	lpm	r1, Z+
    6df8:	1d 92       	st	X+, r1
    6dfa:	15 90       	lpm	r1, Z+
    6dfc:	1d 92       	st	X+, r1
    6dfe:	15 90       	lpm	r1, Z+
    6e00:	1d 92       	st	X+, r1
    6e02:	15 90       	lpm	r1, Z+
    6e04:	1d 92       	st	X+, r1
    6e06:	15 90       	lpm	r1, Z+
    6e08:	1d 92       	st	X+, r1
    6e0a:	15 90       	lpm	r1, Z+
    6e0c:	1d 92       	st	X+, r1
    6e0e:	15 90       	lpm	r1, Z+
    6e10:	1d 92       	st	X+, r1
    6e12:	15 90       	lpm	r1, Z+
    6e14:	1d 92       	st	X+, r1
    6e16:	15 90       	lpm	r1, Z+
    6e18:	1d 92       	st	X+, r1
    6e1a:	15 90       	lpm	r1, Z+
    6e1c:	1d 92       	st	X+, r1
    6e1e:	15 90       	lpm	r1, Z+
    6e20:	1d 92       	st	X+, r1
    6e22:	15 90       	lpm	r1, Z+
    6e24:	1d 92       	st	X+, r1
    6e26:	15 90       	lpm	r1, Z+
    6e28:	1d 92       	st	X+, r1
    6e2a:	15 90       	lpm	r1, Z+
    6e2c:	1d 92       	st	X+, r1
    6e2e:	15 90       	lpm	r1, Z+
    6e30:	1d 92       	st	X+, r1
    6e32:	15 90       	lpm	r1, Z+
    6e34:	1d 92       	st	X+, r1
    6e36:	15 90       	lpm	r1, Z+
    6e38:	1d 92       	st	X+, r1
    6e3a:	15 90       	lpm	r1, Z+
    6e3c:	1d 92       	st	X+, r1
    6e3e:	15 90       	lpm	r1, Z+
    6e40:	1d 92       	st	X+, r1
    6e42:	15 90       	lpm	r1, Z+
    6e44:	1d 92       	st	X+, r1
    6e46:	15 90       	lpm	r1, Z+
    6e48:	1d 92       	st	X+, r1
    6e4a:	15 90       	lpm	r1, Z+
    6e4c:	1d 92       	st	X+, r1
    6e4e:	15 90       	lpm	r1, Z+
    6e50:	1d 92       	st	X+, r1
    6e52:	15 90       	lpm	r1, Z+
    6e54:	1d 92       	st	X+, r1
    6e56:	15 90       	lpm	r1, Z+
    6e58:	1d 92       	st	X+, r1
    6e5a:	15 90       	lpm	r1, Z+
    6e5c:	1d 92       	st	X+, r1
    6e5e:	15 90       	lpm	r1, Z+
    6e60:	1d 92       	st	X+, r1
    6e62:	15 90       	lpm	r1, Z+
    6e64:	1d 92       	st	X+, r1
    6e66:	15 90       	lpm	r1, Z+
    6e68:	1d 92       	st	X+, r1
    6e6a:	15 90       	lpm	r1, Z+
    6e6c:	1d 92       	st	X+, r1
    6e6e:	15 90       	lpm	r1, Z+
    6e70:	1d 92       	st	X+, r1
    6e72:	15 90       	lpm	r1, Z+
    6e74:	1d 92       	st	X+, r1
    6e76:	15 90       	lpm	r1, Z+
    6e78:	1d 92       	st	X+, r1
    6e7a:	15 90       	lpm	r1, Z+
    6e7c:	1d 92       	st	X+, r1
    6e7e:	15 90       	lpm	r1, Z+
    6e80:	1d 92       	st	X+, r1
    6e82:	15 90       	lpm	r1, Z+
    6e84:	1d 92       	st	X+, r1
    6e86:	15 90       	lpm	r1, Z+
    6e88:	1d 92       	st	X+, r1
    6e8a:	15 90       	lpm	r1, Z+
    6e8c:	1d 92       	st	X+, r1
    6e8e:	15 90       	lpm	r1, Z+
    6e90:	1d 92       	st	X+, r1
    6e92:	15 90       	lpm	r1, Z+
    6e94:	1d 92       	st	X+, r1
    6e96:	15 90       	lpm	r1, Z+
    6e98:	1d 92       	st	X+, r1
    6e9a:	15 90       	lpm	r1, Z+
    6e9c:	1d 92       	st	X+, r1
    6e9e:	15 90       	lpm	r1, Z+
    6ea0:	1d 92       	st	X+, r1
    6ea2:	15 90       	lpm	r1, Z+
    6ea4:	1d 92       	st	X+, r1
    6ea6:	15 90       	lpm	r1, Z+
    6ea8:	1d 92       	st	X+, r1
    6eaa:	15 90       	lpm	r1, Z+
    6eac:	1d 92       	st	X+, r1
    6eae:	15 90       	lpm	r1, Z+
    6eb0:	1d 92       	st	X+, r1
    6eb2:	15 90       	lpm	r1, Z+
    6eb4:	1d 92       	st	X+, r1
    6eb6:	15 90       	lpm	r1, Z+
    6eb8:	1d 92       	st	X+, r1
    6eba:	15 90       	lpm	r1, Z+
    6ebc:	1d 92       	st	X+, r1
    6ebe:	15 90       	lpm	r1, Z+
    6ec0:	1d 92       	st	X+, r1
    6ec2:	15 90       	lpm	r1, Z+
    6ec4:	1d 92       	st	X+, r1
    6ec6:	15 90       	lpm	r1, Z+
    6ec8:	1d 92       	st	X+, r1
    6eca:	15 90       	lpm	r1, Z+
    6ecc:	1d 92       	st	X+, r1
    6ece:	15 90       	lpm	r1, Z+
    6ed0:	1d 92       	st	X+, r1
    6ed2:	15 90       	lpm	r1, Z+
    6ed4:	1d 92       	st	X+, r1
    6ed6:	15 90       	lpm	r1, Z+
    6ed8:	1d 92       	st	X+, r1
    6eda:	15 90       	lpm	r1, Z+
    6edc:	1d 92       	st	X+, r1
    6ede:	15 90       	lpm	r1, Z+
    6ee0:	1d 92       	st	X+, r1
    6ee2:	15 90       	lpm	r1, Z+
    6ee4:	1d 92       	st	X+, r1
    6ee6:	15 90       	lpm	r1, Z+
    6ee8:	1d 92       	st	X+, r1
    6eea:	15 90       	lpm	r1, Z+
    6eec:	1d 92       	st	X+, r1
    6eee:	15 90       	lpm	r1, Z+
    6ef0:	1d 92       	st	X+, r1
    6ef2:	15 90       	lpm	r1, Z+
    6ef4:	1d 92       	st	X+, r1
	clr r1
    6ef6:	11 24       	eor	r1, r1
	ret
    6ef8:	08 95       	ret

00006efa <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6efa:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6efc:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(ram_tiles)
    6efe:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    6f00:	82 9f       	mul	r24, r18
	add ZL,r0
    6f02:	e0 0d       	add	r30, r0
	adc ZH,r1
    6f04:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6f06:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6f08:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6f0a:	62 9f       	mul	r22, r18
	add XL,r0
    6f0c:	a0 0d       	add	r26, r0
	adc XH,r1
    6f0e:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6f10:	11 90       	ld	r1, Z+
    6f12:	1d 92       	st	X+, r1
    6f14:	11 90       	ld	r1, Z+
    6f16:	1d 92       	st	X+, r1
    6f18:	11 90       	ld	r1, Z+
    6f1a:	1d 92       	st	X+, r1
    6f1c:	11 90       	ld	r1, Z+
    6f1e:	1d 92       	st	X+, r1
    6f20:	11 90       	ld	r1, Z+
    6f22:	1d 92       	st	X+, r1
    6f24:	11 90       	ld	r1, Z+
    6f26:	1d 92       	st	X+, r1
    6f28:	11 90       	ld	r1, Z+
    6f2a:	1d 92       	st	X+, r1
    6f2c:	11 90       	ld	r1, Z+
    6f2e:	1d 92       	st	X+, r1
    6f30:	11 90       	ld	r1, Z+
    6f32:	1d 92       	st	X+, r1
    6f34:	11 90       	ld	r1, Z+
    6f36:	1d 92       	st	X+, r1
    6f38:	11 90       	ld	r1, Z+
    6f3a:	1d 92       	st	X+, r1
    6f3c:	11 90       	ld	r1, Z+
    6f3e:	1d 92       	st	X+, r1
    6f40:	11 90       	ld	r1, Z+
    6f42:	1d 92       	st	X+, r1
    6f44:	11 90       	ld	r1, Z+
    6f46:	1d 92       	st	X+, r1
    6f48:	11 90       	ld	r1, Z+
    6f4a:	1d 92       	st	X+, r1
    6f4c:	11 90       	ld	r1, Z+
    6f4e:	1d 92       	st	X+, r1
    6f50:	11 90       	ld	r1, Z+
    6f52:	1d 92       	st	X+, r1
    6f54:	11 90       	ld	r1, Z+
    6f56:	1d 92       	st	X+, r1
    6f58:	11 90       	ld	r1, Z+
    6f5a:	1d 92       	st	X+, r1
    6f5c:	11 90       	ld	r1, Z+
    6f5e:	1d 92       	st	X+, r1
    6f60:	11 90       	ld	r1, Z+
    6f62:	1d 92       	st	X+, r1
    6f64:	11 90       	ld	r1, Z+
    6f66:	1d 92       	st	X+, r1
    6f68:	11 90       	ld	r1, Z+
    6f6a:	1d 92       	st	X+, r1
    6f6c:	11 90       	ld	r1, Z+
    6f6e:	1d 92       	st	X+, r1
    6f70:	11 90       	ld	r1, Z+
    6f72:	1d 92       	st	X+, r1
    6f74:	11 90       	ld	r1, Z+
    6f76:	1d 92       	st	X+, r1
    6f78:	11 90       	ld	r1, Z+
    6f7a:	1d 92       	st	X+, r1
    6f7c:	11 90       	ld	r1, Z+
    6f7e:	1d 92       	st	X+, r1
    6f80:	11 90       	ld	r1, Z+
    6f82:	1d 92       	st	X+, r1
    6f84:	11 90       	ld	r1, Z+
    6f86:	1d 92       	st	X+, r1
    6f88:	11 90       	ld	r1, Z+
    6f8a:	1d 92       	st	X+, r1
    6f8c:	11 90       	ld	r1, Z+
    6f8e:	1d 92       	st	X+, r1
    6f90:	11 90       	ld	r1, Z+
    6f92:	1d 92       	st	X+, r1
    6f94:	11 90       	ld	r1, Z+
    6f96:	1d 92       	st	X+, r1
    6f98:	11 90       	ld	r1, Z+
    6f9a:	1d 92       	st	X+, r1
    6f9c:	11 90       	ld	r1, Z+
    6f9e:	1d 92       	st	X+, r1
    6fa0:	11 90       	ld	r1, Z+
    6fa2:	1d 92       	st	X+, r1
    6fa4:	11 90       	ld	r1, Z+
    6fa6:	1d 92       	st	X+, r1
    6fa8:	11 90       	ld	r1, Z+
    6faa:	1d 92       	st	X+, r1
    6fac:	11 90       	ld	r1, Z+
    6fae:	1d 92       	st	X+, r1
    6fb0:	11 90       	ld	r1, Z+
    6fb2:	1d 92       	st	X+, r1
    6fb4:	11 90       	ld	r1, Z+
    6fb6:	1d 92       	st	X+, r1
    6fb8:	11 90       	ld	r1, Z+
    6fba:	1d 92       	st	X+, r1
    6fbc:	11 90       	ld	r1, Z+
    6fbe:	1d 92       	st	X+, r1
    6fc0:	11 90       	ld	r1, Z+
    6fc2:	1d 92       	st	X+, r1
    6fc4:	11 90       	ld	r1, Z+
    6fc6:	1d 92       	st	X+, r1
    6fc8:	11 90       	ld	r1, Z+
    6fca:	1d 92       	st	X+, r1
    6fcc:	11 90       	ld	r1, Z+
    6fce:	1d 92       	st	X+, r1
    6fd0:	11 90       	ld	r1, Z+
    6fd2:	1d 92       	st	X+, r1
    6fd4:	11 90       	ld	r1, Z+
    6fd6:	1d 92       	st	X+, r1
    6fd8:	11 90       	ld	r1, Z+
    6fda:	1d 92       	st	X+, r1
    6fdc:	11 90       	ld	r1, Z+
    6fde:	1d 92       	st	X+, r1
    6fe0:	11 90       	ld	r1, Z+
    6fe2:	1d 92       	st	X+, r1
    6fe4:	11 90       	ld	r1, Z+
    6fe6:	1d 92       	st	X+, r1
    6fe8:	11 90       	ld	r1, Z+
    6fea:	1d 92       	st	X+, r1
    6fec:	11 90       	ld	r1, Z+
    6fee:	1d 92       	st	X+, r1
    6ff0:	11 90       	ld	r1, Z+
    6ff2:	1d 92       	st	X+, r1
    6ff4:	11 90       	ld	r1, Z+
    6ff6:	1d 92       	st	X+, r1
    6ff8:	11 90       	ld	r1, Z+
    6ffa:	1d 92       	st	X+, r1
    6ffc:	11 90       	ld	r1, Z+
    6ffe:	1d 92       	st	X+, r1
    7000:	11 90       	ld	r1, Z+
    7002:	1d 92       	st	X+, r1
    7004:	11 90       	ld	r1, Z+
    7006:	1d 92       	st	X+, r1
    7008:	11 90       	ld	r1, Z+
    700a:	1d 92       	st	X+, r1
    700c:	11 90       	ld	r1, Z+
    700e:	1d 92       	st	X+, r1
	clr r1
    7010:	11 24       	eor	r1, r1
	ret
    7012:	08 95       	ret

00007014 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    7014:	e0 91 0d 0a 	lds	r30, 0x0A0D
	mov   r24,     ZL
    7018:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    701a:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    701c:	e8 0f       	add	r30, r24
	clr   ZH
    701e:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    7020:	e0 53       	subi	r30, 0x30	; 48
	sbci  ZH,      hi8(-(ram_tiles_restore))
    7022:	f6 4f       	sbci	r31, 0xF6	; 246

	lds   r0,      free_tile_index
    7024:	00 90 0c 0a 	lds	r0, 0x0A0C
	sub   r24,     r0
    7028:	80 19       	sub	r24, r0
	brcc  rbg_exit
    702a:	30 f4       	brcc	.+12     	; 0x7038 <rbg_exit>

0000702c <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    702c:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    702e:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    7030:	01 90       	ld	r0, Z+
	st    X,       r0
    7032:	0c 92       	st	X, r0
	inc   r24
    7034:	83 95       	inc	r24
	brne  rbg_loop
    7036:	d1 f7       	brne	.-12     	; 0x702c <rbg_loop>

00007038 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    7038:	08 95       	ret

0000703a <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    703a:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    703c:	79 9f       	mul	r23, r25
	mov   XL,      r1
    703e:	a1 2d       	mov	r26, r1
	clr   XH
    7040:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    7042:	a1 5f       	subi	r26, 0xF1	; 241
	sbci  XH,      hi8(-(sprites_tile_banks))
    7044:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    7046:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    7048:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    704a:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    704c:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    704e:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7050:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    7052:	89 9f       	mul	r24, r25
	movw  XL,      r0
    7054:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7056:	a0 53       	subi	r26, 0x30	; 48
	sbci  XH,      hi8(-(ram_tiles))
    7058:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    705a:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    705c:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    705e:	09 c0       	rjmp	.+18     	; 0x7072 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    7060:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    7062:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7064:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7066:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7068:	0a c0       	rjmp	.+20     	; 0x707e <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    706a:	17 96       	adiw	r26, 0x07	; 7

0000706c <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    706c:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    706e:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    7070:	08 c0       	rjmp	.+16     	; 0x7082 <x_check_end>

00007072 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    7072:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7074:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7076:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7078:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    707a:	f8 cf       	rjmp	.-16     	; 0x706c <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    707c:	11 97       	sbiw	r26, 0x01	; 1

0000707e <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    707e:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    7080:	b9 1f       	adc	r27, r25

00007082 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    7082:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7084:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7086:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7088:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    708a:	09 c0       	rjmp	.+18     	; 0x709e <y_2nd_tile>

	mul   r22,     r19
    708c:	63 9f       	mul	r22, r19
	add   XL,      r0
    708e:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    7090:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7092:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7094:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7096:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7098:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    709a:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    709c:	08 c0       	rjmp	.+16     	; 0x70ae <y_check_end>

0000709e <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    709e:	13 2e       	mov	r1, r19
	dec   r1
    70a0:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    70a2:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    70a4:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    70a6:	61 9d       	mul	r22, r1
	add   ZL,      r0
    70a8:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    70aa:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    70ac:	13 2e       	mov	r1, r19

000070ae <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    70ae:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    70b0:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    70b2:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    70b4:	05 c0       	rjmp	.+10     	; 0x70c0 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    70b6:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    70b8:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    70ba:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    70bc:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    70be:	04 c0       	rjmp	.+8      	; 0x70c8 <x_diff_end>

000070c0 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    70c0:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    70c2:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    70c4:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    70c6:	6f ef       	ldi	r22, 0xFF	; 255

000070c8 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    70c8:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    70ca:	04 2e       	mov	r0, r20
	lsr   r20
    70cc:	46 95       	lsr	r20
	brcc  x_loop1
    70ce:	30 f4       	brcc	.+12     	; 0x70dc <x_loop1>
	breq  x_loopx
    70d0:	61 f0       	breq	.+24     	; 0x70ea <x_loopx>

000070d2 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70d2:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70d4:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70d6:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    70d8:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    70da:	b7 1f       	adc	r27, r23

000070dc <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70dc:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70de:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70e0:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    70e2:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    70e4:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    70e6:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    70e8:	a1 f7       	brne	.-24     	; 0x70d2 <x_loop0>

000070ea <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    70ea:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    70ec:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    70ee:	2c 93       	st	X, r18

	dec   r1
    70f0:	1a 94       	dec	r1
	breq  loop_e
    70f2:	49 f0       	breq	.+18     	; 0x7106 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    70f4:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    70f6:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    70f8:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    70fa:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    70fc:	40 2d       	mov	r20, r0
	lsr   r20
    70fe:	46 95       	lsr	r20
	brcc  x_loop1
    7100:	68 f7       	brcc	.-38     	; 0x70dc <x_loop1>
	brne  x_loop0
    7102:	39 f7       	brne	.-50     	; 0x70d2 <x_loop0>
	rjmp  x_loopx
    7104:	f2 cf       	rjmp	.-28     	; 0x70ea <x_loopx>

00007106 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    7106:	08 95       	ret

00007108 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    7108:	0f 92       	push	r0
	push  r1
    710a:	1f 92       	push	r1
	push  ZL
    710c:	ef 93       	push	r30
	push  ZH
    710e:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    7110:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    7112:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    7116:	ff 93       	push	r31

	sbrc  ZL,      2
    7118:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    711a:	04 c0       	rjmp	.+8      	; 0x7124 <__vector_13+0x1c>
	sbrc  ZL,      1
    711c:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    711e:	02 c0       	rjmp	.+4      	; 0x7124 <__vector_13+0x1c>
	nop
    7120:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    7122:	00 c0       	rjmp	.+0      	; 0x7124 <__vector_13+0x1c>
	sbrs  ZL,      0
    7124:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7126:	00 c0       	rjmp	.+0      	; 0x7128 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    7128:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    712c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    712e:	e0 93 1f 0a 	sts	0x0A1F, r30

	;process sync phases
	lds ZH,sync_phase
    7132:	f0 91 1e 0a 	lds	r31, 0x0A1E
	sbrc ZH,0
    7136:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7138:	51 c0       	rjmp	.+162    	; 0x71dc <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    713a:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    713c:	98 f0       	brcs	.+38     	; 0x7164 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    713e:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7140:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7144:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7146:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    714a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    714c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    714e:	26 f4       	brtc	.+8      	; 0x7158 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7150:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7152:	0e 94 76 39 	call	0x72ec	; 0x72ec <update_sound>
	rjmp sync_end
    7156:	b2 c0       	rjmp	.+356    	; 0x72bc <sync_end>

00007158 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7158:	e5 e1       	ldi	r30, 0x15	; 21
    715a:	ea 95       	dec	r30
    715c:	f1 f7       	brne	.-4      	; 0x715a <sync_pre_eq_no_sound_update+0x2>
    715e:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7160:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7162:	ac c0       	rjmp	.+344    	; 0x72bc <sync_end>

00007164 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7164:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7166:	08 f1       	brcs	.+66     	; 0x71aa <sync_post_eq>

	rjmp .
    7168:	00 c0       	rjmp	.+0      	; 0x716a <sync_eq+0x6>
	rjmp .
    716a:	00 c0       	rjmp	.+0      	; 0x716c <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    716c:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    716e:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7170:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7172:	16 f4       	brtc	.+4      	; 0x7178 <sync_eq_skip>
	
	call update_sound
    7174:	0e 94 76 39 	call	0x72ec	; 0x72ec <update_sound>

00007178 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7178:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    717a:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    717e:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7180:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7184:	9b c0       	rjmp	.+310    	; 0x72bc <sync_end>

00007186 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    7186:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7188:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    718c:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    718e:	04 c0       	rjmp	.+8      	; 0x7198 <__vector_14+0x12>
	sbrc  ZL,      1
    7190:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    7192:	02 c0       	rjmp	.+4      	; 0x7198 <__vector_14+0x12>
	nop
    7194:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    7196:	00 c0       	rjmp	.+0      	; 0x7198 <__vector_14+0x12>
	sbrs  ZL,      0
    7198:	e0 ff       	sbrs	r30, 0
	rjmp  .
    719a:	00 c0       	rjmp	.+0      	; 0x719c <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    719c:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    719e:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    71a0:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    71a2:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    71a6:	ef 91       	pop	r30
	reti
    71a8:	18 95       	reti

000071aa <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    71aa:	00 c0       	rjmp	.+0      	; 0x71ac <sync_post_eq+0x2>

	bst ZL,0
    71ac:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71ae:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    71b0:	26 f4       	brtc	.+8      	; 0x71ba <sync_post_eq_no_sound_update>
	ldi ZL,1	
    71b2:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    71b4:	0e 94 76 39 	call	0x72ec	; 0x72ec <update_sound>
	rjmp sync_pre_eq_cont
    71b8:	05 c0       	rjmp	.+10     	; 0x71c4 <sync_pre_eq_cont>

000071ba <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    71ba:	e5 e1       	ldi	r30, 0x15	; 21
    71bc:	ea 95       	dec	r30
    71be:	f1 f7       	brne	.-4      	; 0x71bc <sync_post_eq_no_sound_update+0x2>
    71c0:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    71c2:	28 9a       	sbi	0x05, 0	; 5

000071c4 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    71c4:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    71c8:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    71ca:	09 f0       	breq	.+2      	; 0x71ce <sync_pre_eq_cont+0xa>
	rjmp sync_end
    71cc:	77 c0       	rjmp	.+238    	; 0x72bc <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    71ce:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    71d0:	e0 93 1f 0a 	sts	0x0A1F, r30
	ldi ZL,1
    71d4:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    71d6:	e0 93 1e 0a 	sts	0x0A1E, r30
	
	rjmp sync_end
    71da:	70 c0       	rjmp	.+224    	; 0x72bc <sync_end>

000071dc <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    71dc:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    71de:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    71e2:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    71e4:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    71e8:	00 c0       	rjmp	.+0      	; 0x71ea <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71ea:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    71ec:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    71ee:	00 c0       	rjmp	.+0      	; 0x71f0 <sync_hsync+0x14>
	call update_sound
    71f0:	0e 94 76 39 	call	0x72ec	; 0x72ec <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    71f4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    71f6:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    71fa:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    71fc:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cp ZL,ZH
    7200:	ef 17       	cp	r30, r31
	brsh no_render
    7202:	d8 f4       	brcc	.+54     	; 0x723a <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7204:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7206:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    720a:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    720c:	00 90 26 0a 	lds	r0, 0x0A26
	sub ZH,r0			
    7210:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7212:	ef 17       	cp	r30, r31
	brlo no_render
    7214:	90 f0       	brcs	.+36     	; 0x723a <no_render>

	;push r1-r29
	ldi ZL,29
    7216:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7218:	ff 27       	eor	r31, r31

0000721a <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    721a:	00 80       	ld	r0, Z
	push r0
    721c:	0f 92       	push	r0
	dec ZL
    721e:	ea 95       	dec	r30
	brne push_loop	
    7220:	e1 f7       	brne	.-8      	; 0x721a <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7222:	05 e0       	ldi	r16, 0x05	; 5
    7224:	0a 95       	dec	r16
    7226:	f1 f7       	brne	.-4      	; 0x7224 <push_loop+0xa>
    7228:	00 c0       	rjmp	.+0      	; 0x722a <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    722a:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    722e:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7230:	ff 27       	eor	r31, r31

00007232 <pop_loop>:
pop_loop:
	pop r0
    7232:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7234:	01 92       	st	Z+, r0
	cpi ZL,30
    7236:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7238:	e0 f3       	brcs	.-8      	; 0x7232 <pop_loop>

0000723a <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    723a:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    723e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7240:	09 f0       	breq	.+2      	; 0x7244 <no_render+0xa>
	rjmp sync_end
    7242:	3c c0       	rjmp	.+120    	; 0x72bc <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7244:	2f 93       	push	r18
	push r19
    7246:	3f 93       	push	r19
	push r20
    7248:	4f 93       	push	r20
	push r21
    724a:	5f 93       	push	r21
	push r22
    724c:	6f 93       	push	r22
	push r23
    724e:	7f 93       	push	r23
	push r24
    7250:	8f 93       	push	r24
	push r25
    7252:	9f 93       	push	r25
	push r26
    7254:	af 93       	push	r26
	push r27
    7256:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7258:	78 94       	sei
	clr r1
    725a:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    725c:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    725e:	e0 93 1e 0a 	sts	0x0A1E, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7262:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7264:	e0 93 1f 0a 	sts	0x0A1F, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7268:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    726c:	90 91 30 0a 	lds	r25, 0x0A30
	adiw r24,1
    7270:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7272:	80 93 2f 0a 	sts	0x0A2F, r24
	sts vsync_counter+1,r25
    7276:	90 93 30 0a 	sts	0x0A30, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    727a:	e0 91 21 0a 	lds	r30, 0x0A21
	lds ZH,pre_vsync_user_callback+1
    727e:	f0 91 22 0a 	lds	r31, 0x0A22
	cp  ZL,r1
    7282:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7284:	f1 05       	cpc	r31, r1
	breq .+2 
    7286:	09 f0       	breq	.+2      	; 0x728a <no_render+0x50>
	icall
    7288:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    728a:	0e 94 28 3b 	call	0x7650	; 0x7650 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    728e:	0e 94 6c 49 	call	0x92d8	; 0x92d8 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7292:	0e 94 70 39 	call	0x72e0	; 0x72e0 <process_music>
	clr r1
    7296:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7298:	e0 91 23 0a 	lds	r30, 0x0A23
	lds ZH,post_vsync_user_callback+1
    729c:	f0 91 24 0a 	lds	r31, 0x0A24
	cp  ZL,r1
    72a0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    72a2:	f1 05       	cpc	r31, r1
	breq .+2 
    72a4:	09 f0       	breq	.+2      	; 0x72a8 <no_render+0x6e>
	icall
    72a6:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    72a8:	bf 91       	pop	r27
	pop r26
    72aa:	af 91       	pop	r26
	pop r25
    72ac:	9f 91       	pop	r25
	pop r24
    72ae:	8f 91       	pop	r24
	pop r23
    72b0:	7f 91       	pop	r23
	pop r22
    72b2:	6f 91       	pop	r22
	pop r21
    72b4:	5f 91       	pop	r21
	pop r20
    72b6:	4f 91       	pop	r20
	pop r19
    72b8:	3f 91       	pop	r19
	pop r18
    72ba:	2f 91       	pop	r18

000072bc <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    72bc:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    72be:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    72c0:	ff 91       	pop	r31
	pop ZL
    72c2:	ef 91       	pop	r30
	pop r1
    72c4:	1f 90       	pop	r1
	pop r0
    72c6:	0f 90       	pop	r0
	reti
    72c8:	18 95       	reti

000072ca <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    72ca:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    72cc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    72ce:	00 c0       	rjmp	.+0      	; 0x72d0 <hsync_pulse+0x6>
	call update_sound
    72d0:	0e 94 76 39 	call	0x72ec	; 0x72ec <update_sound>

	lds ZL,sync_pulse
    72d4:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    72d8:	ea 95       	dec	r30
	sts sync_pulse,ZL
    72da:	e0 93 1f 0a 	sts	0x0A1F, r30

	ret
    72de:	08 95       	ret

000072e0 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    72e0:	e0 91 43 0a 	lds	r30, 0x0A43
	sbrc ZL,0
    72e4:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    72e6:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <ProcessMusic>
#endif

	ret
    72ea:	08 95       	ret

000072ec <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    72ec:	0f 93       	push	r16
	push r17
    72ee:	1f 93       	push	r17
	push r18
    72f0:	2f 93       	push	r18
	push r28
    72f2:	cf 93       	push	r28
	push r29
    72f4:	df 93       	push	r29

	mov r18,ZL
    72f6:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    72f8:	00 91 45 0a 	lds	r16, 0x0A45
	lds r17,tr1_pos_frac
    72fc:	10 91 47 0a 	lds	r17, 0x0A47
	add	r17,r16	;add step to fractional part of sample pos
    7300:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7302:	00 91 46 0a 	lds	r16, 0x0A46
	lds ZL,tr1_pos_lo
    7306:	e0 91 48 0a 	lds	r30, 0x0A48
	lds ZH,tr1_pos_hi 
    730a:	f0 91 49 0a 	lds	r31, 0x0A49
	adc ZL,r16	;add step to low byte of sample pos
    730e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7310:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7312:	e0 93 48 0a 	sts	0x0A48, r30
	sts tr1_pos_frac,r17
    7316:	10 93 47 0a 	sts	0x0A47, r17
	lds r17,tr1_vol
    731a:	10 91 44 0a 	lds	r17, 0x0A44
	mulsu r16,r17;(sample*mixing vol)
    731e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7320:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7322:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7324:	d0 2d       	mov	r29, r0
	nop
    7326:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7328:	00 91 4b 0a 	lds	r16, 0x0A4B
	lds r17,tr2_pos_frac
    732c:	10 91 4d 0a 	lds	r17, 0x0A4D
	add	r17,r16	;add step to fractional part of sample pos
    7330:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7332:	00 91 4c 0a 	lds	r16, 0x0A4C
	lds ZL,tr2_pos_lo
    7336:	e0 91 4e 0a 	lds	r30, 0x0A4E
	lds ZH,tr2_pos_hi 
    733a:	f0 91 4f 0a 	lds	r31, 0x0A4F
	adc ZL,r16	;add step to low byte of sample pos
    733e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7340:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7342:	e0 93 4e 0a 	sts	0x0A4E, r30
	sts tr2_pos_frac,r17
    7346:	10 93 4d 0a 	sts	0x0A4D, r17
	lds r17,tr2_vol
    734a:	10 91 4a 0a 	lds	r17, 0x0A4A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    734e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7350:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7352:	20 ff       	sbrs	r18, 0
	rjmp .
    7354:	00 c0       	rjmp	.+0      	; 0x7356 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7356:	01 03       	mulsu	r16, r17
	clr r0
    7358:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    735a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    735c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    735e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7360:	00 91 51 0a 	lds	r16, 0x0A51
	lds r17,tr3_pos_frac
    7364:	10 91 53 0a 	lds	r17, 0x0A53
	add	r17,r16				;add step to fractional part of sample pos
    7368:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    736a:	00 91 52 0a 	lds	r16, 0x0A52
	lds ZL,tr3_pos_lo
    736e:	e0 91 54 0a 	lds	r30, 0x0A54
	lds ZH,tr3_pos_hi 
    7372:	f0 91 55 0a 	lds	r31, 0x0A55
	adc ZL,r16				;add step to low byte of sample pos
    7376:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7378:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    737a:	e0 93 54 0a 	sts	0x0A54, r30
	sts tr3_pos_frac,r17
    737e:	10 93 53 0a 	sts	0x0A53, r17
	lds r17,tr3_vol
    7382:	10 91 50 0a 	lds	r17, 0x0A50
	mulsu r16,r17			;(sample*mixing vol)
    7386:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7388:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    738a:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    738c:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    738e:	00 91 58 0a 	lds	r16, 0x0A58
	lds r17,tr4_barrel_hi
    7392:	10 91 59 0a 	lds	r17, 0x0A59
	lds ZL,tr4_divider
    7396:	e0 91 5a 0a 	lds	r30, 0x0A5A
	dec ZL	
    739a:	ea 95       	dec	r30
	brpl ch4_no_shift	
    739c:	92 f4       	brpl	.+36     	; 0x73c2 <ch4_no_shift>

	lds ZH,tr4_params
    739e:	f0 91 57 0a 	lds	r31, 0x0A57
	mov ZL,ZH
    73a2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    73a4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    73a6:	00 2e       	mov	r0, r16
	lsr r0
    73a8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    73aa:	00 26       	eor	r0, r16
	bst r0,0
    73ac:	00 fa       	bst	r0, 0
	lsr r17
    73ae:	16 95       	lsr	r17
	ror r16
    73b0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    73b2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    73b4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    73b6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    73b8:	00 93 58 0a 	sts	0x0A58, r16
	sts tr4_barrel_hi,r17
    73bc:	10 93 59 0a 	sts	0x0A59, r17

	rjmp ch4_end
    73c0:	03 c0       	rjmp	.+6      	; 0x73c8 <ch4_end>

000073c2 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    73c2:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    73c4:	1a 95       	dec	r17
	brne .-4
    73c6:	f1 f7       	brne	.-4      	; 0x73c4 <ch4_no_shift+0x2>

000073c8 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    73c8:	e0 93 5a 0a 	sts	0x0A5A, r30
	ldi r17,0x80 ;-128
    73cc:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    73ce:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    73d0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    73d2:	21 ff       	sbrs	r18, 1
	rjmp .
    73d4:	00 c0       	rjmp	.+0      	; 0x73d6 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    73d6:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    73d8:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    73da:	00 91 56 0a 	lds	r16, 0x0A56

	mulsu r17,r16;(sample*mixing vol)
    73de:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    73e0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    73e2:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    73e4:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    73e6:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    73e8:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    73ea:	d0 05       	cpc	r29, r0
	brlt .+2
    73ec:	0c f0       	brlt	.+2      	; 0x73f0 <ch4_end+0x28>
	ldi r28,127
    73ee:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    73f0:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    73f2:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    73f4:	d0 05       	cpc	r29, r0
	brge .+2
    73f6:	0c f4       	brge	.+2      	; 0x73fa <ch4_end+0x32>
	ldi r28,-128
    73f8:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    73fa:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    73fc:	c0 93 b3 00 	sts	0x00B3, r28
	

#if UART == 1
	;read UART data (23 cycles)
	
	ldi ZL,lo8(uart_rx_buf)
    7400:	e4 ea       	ldi	r30, 0xA4	; 164
	ldi ZH,hi8(uart_rx_buf)
    7402:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_rx_head
    7404:	00 91 a1 0a 	lds	r16, 0x0AA1

	clr r0
    7408:	00 24       	eor	r0, r0
	add ZL,r16
    740a:	e0 0f       	add	r30, r16
	adc ZH,r0
    740c:	f0 1d       	adc	r31, r0

	lds r17,_SFR_MEM_ADDR(UCSR0A)	
    740e:	10 91 c0 00 	lds	r17, 0x00C0

	sbrs r17,RXC0	;data in?
    7412:	17 ff       	sbrs	r17, 7
	rjmp 1f
    7414:	08 c0       	rjmp	.+16     	; 0x7426 <ch4_end+0x5e>

	lds r18,_SFR_MEM_ADDR(UDR0)
    7416:	20 91 c6 00 	lds	r18, 0x00C6
	st Z,r18
    741a:	20 83       	st	Z, r18
	inc r16
    741c:	03 95       	inc	r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
    741e:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_rx_head,r16
    7420:	00 93 a1 0a 	sts	0x0AA1, r16
	rjmp uart_tx
    7424:	03 c0       	rjmp	.+6      	; 0x742c <uart_tx>
1:
	WAIT r28,9
    7426:	c3 e0       	ldi	r28, 0x03	; 3
    7428:	ca 95       	dec	r28
    742a:	f1 f7       	brne	.-4      	; 0x7428 <ch4_end+0x60>

0000742c <uart_tx>:

uart_tx:
	;send UART data (24 cycles)
	
	ldi ZL,lo8(uart_tx_buf)
    742c:	e0 e6       	ldi	r30, 0x60	; 96
	ldi ZH,hi8(uart_tx_buf)
    742e:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_tx_tail
    7430:	00 91 e4 0a 	lds	r16, 0x0AE4
	lds r29,uart_tx_head
    7434:	d0 91 a2 0a 	lds	r29, 0x0AA2
	
	add ZL,r16
    7438:	e0 0f       	add	r30, r16
	adc ZH,r0	;r0=0
    743a:	f0 1d       	adc	r31, r0

	lds r28,_SFR_MEM_ADDR(UCSR0A)
    743c:	c0 91 c0 00 	lds	r28, 0x00C0
	andi r28,(1<<UDRE0)	 	//UCSR0A & (1<<UDRE0)
    7440:	c0 72       	andi	r28, 0x20	; 32

	;if(ring_head == ring_tail || (UCSR0A & (1<<UDRE0)==0 ), nothing to send
	sub r29,r16
    7442:	d0 1b       	sub	r29, r16
	mul r28,r29
    7444:	cd 9f       	mul	r28, r29
	breq 1f		
    7446:	41 f0       	breq	.+16     	; 0x7458 <uart_tx+0x2c>

	ld r18,Z
    7448:	20 81       	ld	r18, Z
	sts _SFR_MEM_ADDR(UDR0),r18	;TCNT1=0x134
    744a:	20 93 c6 00 	sts	0x00C6, r18
	inc r16
    744e:	03 95       	inc	r16
	andi r16,(UART_TX_BUFFER_SIZE-1) ;wrap
    7450:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_tx_tail,r16
    7452:	00 93 e4 0a 	sts	0x0AE4, r16
	rjmp update_sound_end
    7456:	03 c0       	rjmp	.+6      	; 0x745e <update_sound_end>
1:
	WAIT r28,9
    7458:	c3 e0       	ldi	r28, 0x03	; 3
    745a:	ca 95       	dec	r28
    745c:	f1 f7       	brne	.-4      	; 0x745a <uart_tx+0x2e>

0000745e <update_sound_end>:
#endif


update_sound_end:

	pop r29
    745e:	df 91       	pop	r29
	pop r28
    7460:	cf 91       	pop	r28
	pop r18
    7462:	2f 91       	pop	r18
	pop r17
    7464:	1f 91       	pop	r17
	pop r16
    7466:	0f 91       	pop	r16
	
	ret
    7468:	08 95       	ret

0000746a <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    746a:	80 93 0f 0a 	sts	0x0A0F, r24
	sts sprites_tile_banks+1,r25
    746e:	90 93 10 0a 	sts	0x0A10, r25
	ret
    7472:	08 95       	ret

00007474 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7474:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7476:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7478:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    747a:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    747c:	64 e1       	ldi	r22, 0x14	; 20

0000747e <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    747e:	6d 93       	st	X+, r22
	sbiw r30,1
    7480:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7482:	e9 f7       	brne	.-6      	; 0x747e <fill_vram_loop>

	clr r1
    7484:	11 24       	eor	r1, r1

	ret
    7486:	08 95       	ret

00007488 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7488:	50 91 19 0a 	lds	r21, 0x0A19
	add r20,21
    748c:	45 0f       	add	r20, r21
	rjmp SetTile	
    748e:	00 c0       	rjmp	.+0      	; 0x7490 <SetTile>

00007490 <SetTile>:

	ret

#else

	clr r25
    7490:	99 27       	eor	r25, r25
	clr r23	
    7492:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    7494:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    7496:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    7498:	08 0e       	add	r0, r24
	adc r1,r25
    749a:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    749c:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    749e:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    74a0:	a0 0d       	add	r26, r0
	adc XH,r1
    74a2:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    74a4:	4c 5e       	subi	r20, 0xEC	; 236
	st X,r20
    74a6:	4c 93       	st	X, r20

	clr r1
    74a8:	11 24       	eor	r1, r1

	ret
    74aa:	08 95       	ret

000074ac <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    74ac:	80 93 19 0a 	sts	0x0A19, r24
	ret
    74b0:	08 95       	ret

000074b2 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    74b2:	80 93 17 0a 	sts	0x0A17, r24
	sts tile_table_hi,r25	
    74b6:	90 93 18 0a 	sts	0x0A18, r25
	ret
    74ba:	08 95       	ret

000074bc <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    74bc:	80 91 20 0a 	lds	r24, 0x0A20
	andi r24,SYNC_FLAG_VSYNC
    74c0:	81 70       	andi	r24, 0x01	; 1
	ret
    74c2:	08 95       	ret

000074c4 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    74c4:	20 91 20 0a 	lds	r18, 0x0A20
	andi r18,~SYNC_FLAG_VSYNC
    74c8:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    74ca:	20 93 20 0a 	sts	0x0A20, r18
	ret
    74ce:	08 95       	ret

000074d0 <GetVsyncCounter>:
; C-callable
; returns: (unsigned int) r25:r24
;************************************
.section .text.GetVsyncCounter
GetVsyncCounter:
	lds r24,vsync_counter
    74d0:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    74d4:	90 91 30 0a 	lds	r25, 0x0A30
	ret
    74d8:	08 95       	ret

000074da <ClearVsyncCounter>:
;
; C-callable
;************************************
.section .text.ClearVsyncCounter
ClearVsyncCounter:
	sts vsync_counter,r1
    74da:	10 92 2f 0a 	sts	0x0A2F, r1
	sts vsync_counter+1,r1
    74de:	10 92 30 0a 	sts	0x0A30, r1
	ret
    74e2:	08 95       	ret

000074e4 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    74e4:	88 23       	and	r24, r24
	brne rj_p2
    74e6:	29 f4       	brne	.+10     	; 0x74f2 <rj_p2>
		
	lds r24,joypad1_status_lo
    74e8:	80 91 27 0a 	lds	r24, 0x0A27
	lds r25,joypad1_status_lo+1
    74ec:	90 91 28 0a 	lds	r25, 0x0A28
	ret
    74f0:	08 95       	ret

000074f2 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    74f2:	80 91 2b 0a 	lds	r24, 0x0A2B
	lds r25,joypad2_status_lo+1	
    74f6:	90 91 2c 0a 	lds	r25, 0x0A2C

	ret
    74fa:	08 95       	ret

000074fc <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    74fc:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    74fe:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7500:	f1 f7       	brne	.-4      	; 0x74fe <WaitUs+0x2>
	nop
    7502:	00 00       	nop
	sbiw r24,1
    7504:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7506:	d1 f7       	brne	.-12     	; 0x74fc <WaitUs>

	ret
    7508:	08 95       	ret

0000750a <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    750a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    750c:	fe cf       	rjmp	.-4      	; 0x750a <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    750e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7510:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7512:	60 bd       	out	0x20, r22	; 32
   cli
    7514:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7516:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7518:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    751a:	78 94       	sei
   ret
    751c:	08 95       	ret

0000751e <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    751e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7520:	fe cf       	rjmp	.-4      	; 0x751e <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7522:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7524:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7526:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7528:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    752a:	80 b5       	in	r24, 0x20	; 32
   sei
    752c:	78 94       	sei
   ret
    752e:	08 95       	ret

00007530 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7530:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7532:	80 93 1f 0a 	sts	0x0A1F, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7536:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    753a:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    753e:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7542:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7546:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    754a:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    754e:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7552:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7556:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7558:	80 93 81 00 	sts	0x0081, r24

		cli
    755c:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    755e:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7560:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7564:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7566:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    756a:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    756c:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7570:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7574:	78 94       	sei

00007576 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7576:	80 91 1f 0a 	lds	r24, 0x0A1F
		cpi r24,8
    757a:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    757c:	e0 f3       	brcs	.-8      	; 0x7576 <wait>

		ret
    757e:	08 95       	ret

00007580 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7580:	80 91 31 0a 	lds	r24, 0x0A31
		lds r25,random_value+1
    7584:	90 91 32 0a 	lds	r25, 0x0A32
		ret
    7588:	08 95       	ret

0000758a <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    758a:	0f 93       	push	r16
		push r17
    758c:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    758e:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7590:	0f 93       	push	r16

		lds r16,sync_pulse
    7592:	00 91 1f 0a 	lds	r16, 0x0A1F
		inc r16
    7596:	03 95       	inc	r16
		sts sync_pulse,r16
    7598:	00 93 1f 0a 	sts	0x0A1F, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    759c:	00 fd       	sbrc	r16, 0
		rjmp 1f
    759e:	08 c0       	rjmp	.+16     	; 0x75b0 <__vector_8+0x26>
		lds r17,random_value
    75a0:	10 91 31 0a 	lds	r17, 0x0A31
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    75a4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    75a8:	10 27       	eor	r17, r16
		sts random_value,r17
    75aa:	10 93 31 0a 	sts	0x0A31, r17
		rjmp 2f
    75ae:	07 c0       	rjmp	.+14     	; 0x75be <__vector_8+0x34>
	1:
		lds r17,random_value+1
    75b0:	10 91 32 0a 	lds	r17, 0x0A32
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    75b4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    75b8:	10 27       	eor	r17, r16
		sts random_value+1,r17
    75ba:	10 93 32 0a 	sts	0x0A32, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    75be:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    75c0:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    75c4:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    75c6:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    75c8:	1f 91       	pop	r17
		pop r16
    75ca:	0f 91       	pop	r16
		reti
    75cc:	18 95       	reti

000075ce <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    75ce:	98 e0       	ldi	r25, 0x08	; 8
    75d0:	88 e1       	ldi	r24, 0x18	; 24
    75d2:	0f b6       	in	r0, 0x3f	; 63
    75d4:	f8 94       	cli
    75d6:	a8 95       	wdr
    75d8:	80 93 60 00 	sts	0x0060, r24
    75dc:	0f be       	out	0x3f, r0	; 63
    75de:	90 93 60 00 	sts	0x0060, r25
	while(1);
    75e2:	ff cf       	rjmp	.-2      	; 0x75e2 <SoftReset+0x14>

000075e4 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    75e4:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    75e6:	c8 95       	lpm
    75e8:	c8 95       	lpm
		Wait200ns();
    75ea:	c8 95       	lpm
    75ec:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    75ee:	12 98       	cbi	0x02, 2	; 2
    75f0:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    75f2:	80 e0       	ldi	r24, 0x00	; 0
    75f4:	90 e0       	ldi	r25, 0x00	; 0
    75f6:	20 e0       	ldi	r18, 0x00	; 0
    75f8:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    75fa:	36 95       	lsr	r19
    75fc:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    75fe:	96 95       	lsr	r25
    7600:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7602:	c8 95       	lpm
    7604:	c8 95       	lpm
			Wait200ns();
    7606:	c8 95       	lpm
    7608:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    760a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    760c:	00 9b       	sbis	0x00, 0	; 0
    760e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7610:	01 9b       	sbis	0x00, 1	; 0
    7612:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7614:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7616:	c8 95       	lpm
    7618:	c8 95       	lpm
			Wait200ns();
    761a:	c8 95       	lpm
    761c:	c8 95       	lpm
    761e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7620:	61 f7       	brne	.-40     	; 0x75fa <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7622:	30 93 28 0a 	sts	0x0A28, r19
    7626:	20 93 27 0a 	sts	0x0A27, r18
		joypad2_status_lo=p2ButtonsLo;
    762a:	90 93 2c 0a 	sts	0x0A2C, r25
    762e:	80 93 2b 0a 	sts	0x0A2B, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7632:	80 91 27 0a 	lds	r24, 0x0A27
    7636:	90 91 28 0a 	lds	r25, 0x0A28
    763a:	0f 97       	sbiw	r24, 0x0f	; 15
    763c:	31 f0       	breq	.+12     	; 0x764a <ReadButtons+0x66>
    763e:	80 91 2b 0a 	lds	r24, 0x0A2B
    7642:	90 91 2c 0a 	lds	r25, 0x0A2C
    7646:	0f 97       	sbiw	r24, 0x0f	; 15
    7648:	11 f4       	brne	.+4      	; 0x764e <ReadButtons+0x6a>
		SoftReset();
    764a:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <SoftReset>
    764e:	08 95       	ret

00007650 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7650:	10 92 a0 0a 	sts	0x0AA0, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7654:	00 99       	sbic	0x00, 0	; 0
    7656:	03 c0       	rjmp	.+6      	; 0x765e <ReadControllers+0xe>
    7658:	81 e0       	ldi	r24, 0x01	; 1
    765a:	80 93 a0 0a 	sts	0x0AA0, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    765e:	01 99       	sbic	0x00, 1	; 0
    7660:	05 c0       	rjmp	.+10     	; 0x766c <ReadControllers+0x1c>
    7662:	80 91 a0 0a 	lds	r24, 0x0AA0
    7666:	82 60       	ori	r24, 0x02	; 2
    7668:	80 93 a0 0a 	sts	0x0AA0, r24
			
	//read the standard buttons
	ReadButtons();
    766c:	0c 94 f2 3a 	jmp	0x75e4	; 0x75e4 <ReadButtons>

00007670 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7670:	cf 93       	push	r28
    7672:	df 93       	push	r29
    7674:	c0 e0       	ldi	r28, 0x00	; 0
    7676:	d0 e0       	ldi	r29, 0x00	; 0
    7678:	fe 01       	movw	r30, r28
    767a:	e2 56       	subi	r30, 0x62	; 98
    767c:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    767e:	64 91       	lpm	r22, Z
    7680:	ce 01       	movw	r24, r28
    7682:	0e 94 85 3a 	call	0x750a	; 0x750a <WriteEeprom>
    7686:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7688:	c0 32       	cpi	r28, 0x20	; 32
    768a:	d1 05       	cpc	r29, r1
    768c:	a9 f7       	brne	.-22     	; 0x7678 <FormatEeprom+0x8>
    768e:	c0 e2       	ldi	r28, 0x20	; 32
    7690:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7692:	6f ef       	ldi	r22, 0xFF	; 255
    7694:	ce 01       	movw	r24, r28
    7696:	0e 94 85 3a 	call	0x750a	; 0x750a <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    769a:	6f ef       	ldi	r22, 0xFF	; 255
    769c:	ce 01       	movw	r24, r28
    769e:	01 96       	adiw	r24, 0x01	; 1
    76a0:	0e 94 85 3a 	call	0x750a	; 0x750a <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    76a4:	a0 96       	adiw	r28, 0x20	; 32
    76a6:	c1 15       	cp	r28, r1
    76a8:	88 e0       	ldi	r24, 0x08	; 8
    76aa:	d8 07       	cpc	r29, r24
    76ac:	91 f7       	brne	.-28     	; 0x7692 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    76ae:	df 91       	pop	r29
    76b0:	cf 91       	pop	r28
    76b2:	08 95       	ret

000076b4 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    76b4:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    76b6:	80 e0       	ldi	r24, 0x00	; 0
    76b8:	90 e0       	ldi	r25, 0x00	; 0
    76ba:	0e 94 8f 3a 	call	0x751e	; 0x751e <ReadEeprom>
    76be:	c8 2f       	mov	r28, r24
    76c0:	81 e0       	ldi	r24, 0x01	; 1
    76c2:	90 e0       	ldi	r25, 0x00	; 0
    76c4:	0e 94 8f 3a 	call	0x751e	; 0x751e <ReadEeprom>
    76c8:	28 2f       	mov	r18, r24
    76ca:	30 e0       	ldi	r19, 0x00	; 0
    76cc:	32 2f       	mov	r19, r18
    76ce:	22 27       	eor	r18, r18
    76d0:	2c 0f       	add	r18, r28
    76d2:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    76d4:	81 e0       	ldi	r24, 0x01	; 1
    76d6:	2a 35       	cpi	r18, 0x5A	; 90
    76d8:	35 45       	sbci	r19, 0x55	; 85
    76da:	09 f0       	breq	.+2      	; 0x76de <isEepromFormatted+0x2a>
    76dc:	80 e0       	ldi	r24, 0x00	; 0
}
    76de:	cf 91       	pop	r28
    76e0:	08 95       	ret

000076e2 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    76e2:	8f 92       	push	r8
    76e4:	9f 92       	push	r9
    76e6:	af 92       	push	r10
    76e8:	bf 92       	push	r11
    76ea:	cf 92       	push	r12
    76ec:	df 92       	push	r13
    76ee:	ef 92       	push	r14
    76f0:	ff 92       	push	r15
    76f2:	0f 93       	push	r16
    76f4:	1f 93       	push	r17
    76f6:	cf 93       	push	r28
    76f8:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    76fa:	fb 01       	movw	r30, r22
    76fc:	11 82       	std	Z+1, r1	; 0x01
    76fe:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7700:	8f 3f       	cpi	r24, 0xFF	; 255
    7702:	ff ef       	ldi	r31, 0xFF	; 255
    7704:	9f 07       	cpc	r25, r31
    7706:	89 f1       	breq	.+98     	; 0x776a <EepromBlockExists+0x88>
    7708:	6a 01       	movw	r12, r20
    770a:	8b 01       	movw	r16, r22
    770c:	7c 01       	movw	r14, r24
    770e:	a1 2c       	mov	r10, r1
    7710:	b1 2c       	mov	r11, r1
    7712:	c0 e0       	ldi	r28, 0x00	; 0
    7714:	d3 e0       	ldi	r29, 0x03	; 3
    7716:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7718:	c5 01       	movw	r24, r10
    771a:	0e 94 8f 3a 	call	0x751e	; 0x751e <ReadEeprom>
    771e:	88 2e       	mov	r8, r24
    7720:	c5 01       	movw	r24, r10
    7722:	01 96       	adiw	r24, 0x01	; 1
    7724:	0e 94 8f 3a 	call	0x751e	; 0x751e <ReadEeprom>
    7728:	28 2f       	mov	r18, r24
    772a:	30 e0       	ldi	r19, 0x00	; 0
    772c:	32 2f       	mov	r19, r18
    772e:	22 27       	eor	r18, r18
    7730:	28 0d       	add	r18, r8
    7732:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7734:	2e 15       	cp	r18, r14
    7736:	3f 05       	cpc	r19, r15
    7738:	29 f4       	brne	.+10     	; 0x7744 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    773a:	f8 01       	movw	r30, r16
    773c:	b1 82       	std	Z+1, r11	; 0x01
    773e:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7740:	d0 e0       	ldi	r29, 0x00	; 0
    7742:	0b c0       	rjmp	.+22     	; 0x775a <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7744:	2f 3f       	cpi	r18, 0xFF	; 255
    7746:	3f 4f       	sbci	r19, 0xFF	; 255
    7748:	41 f4       	brne	.+16     	; 0x775a <EepromBlockExists+0x78>
    774a:	91 10       	cpse	r9, r1
    774c:	06 c0       	rjmp	.+12     	; 0x775a <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    774e:	c1 14       	cp	r12, r1
    7750:	d1 04       	cpc	r13, r1
    7752:	11 f0       	breq	.+4      	; 0x7758 <EepromBlockExists+0x76>
    7754:	f6 01       	movw	r30, r12
    7756:	c0 83       	st	Z, r28
    7758:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    775a:	cf 5f       	subi	r28, 0xFF	; 255
    775c:	f0 e2       	ldi	r31, 0x20	; 32
    775e:	af 0e       	add	r10, r31
    7760:	b1 1c       	adc	r11, r1
    7762:	c0 34       	cpi	r28, 0x40	; 64
    7764:	c9 f6       	brne	.-78     	; 0x7718 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7766:	8d 2f       	mov	r24, r29
    7768:	01 c0       	rjmp	.+2      	; 0x776c <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    776a:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    776c:	df 91       	pop	r29
    776e:	cf 91       	pop	r28
    7770:	1f 91       	pop	r17
    7772:	0f 91       	pop	r16
    7774:	ff 90       	pop	r15
    7776:	ef 90       	pop	r14
    7778:	df 90       	pop	r13
    777a:	cf 90       	pop	r12
    777c:	bf 90       	pop	r11
    777e:	af 90       	pop	r10
    7780:	9f 90       	pop	r9
    7782:	8f 90       	pop	r8
    7784:	08 95       	ret

00007786 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7786:	ef 92       	push	r14
    7788:	ff 92       	push	r15
    778a:	0f 93       	push	r16
    778c:	1f 93       	push	r17
    778e:	cf 93       	push	r28
    7790:	df 93       	push	r29
    7792:	00 d0       	rcall	.+0      	; 0x7794 <EepromWriteBlock+0xe>
    7794:	1f 92       	push	r1
    7796:	cd b7       	in	r28, 0x3d	; 61
    7798:	de b7       	in	r29, 0x3e	; 62
    779a:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    779c:	1a 82       	std	Y+2, r1	; 0x02
    779e:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    77a0:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    77a2:	ae 01       	movw	r20, r28
    77a4:	4d 5f       	subi	r20, 0xFD	; 253
    77a6:	5f 4f       	sbci	r21, 0xFF	; 255
    77a8:	be 01       	movw	r22, r28
    77aa:	6f 5f       	subi	r22, 0xFF	; 255
    77ac:	7f 4f       	sbci	r23, 0xFF	; 255
    77ae:	fc 01       	movw	r30, r24
    77b0:	80 81       	ld	r24, Z
    77b2:	91 81       	ldd	r25, Z+1	; 0x01
    77b4:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    77b8:	88 23       	and	r24, r24
    77ba:	11 f0       	breq	.+4      	; 0x77c0 <EepromWriteBlock+0x3a>
    77bc:	83 30       	cpi	r24, 0x03	; 3
    77be:	19 f5       	brne	.+70     	; 0x7806 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    77c0:	89 81       	ldd	r24, Y+1	; 0x01
    77c2:	9a 81       	ldd	r25, Y+2	; 0x02
    77c4:	89 2b       	or	r24, r25
    77c6:	49 f4       	brne	.+18     	; 0x77da <EepromWriteBlock+0x54>
    77c8:	8b 81       	ldd	r24, Y+3	; 0x03
    77ca:	88 23       	and	r24, r24
    77cc:	d9 f0       	breq	.+54     	; 0x7804 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    77ce:	f0 e2       	ldi	r31, 0x20	; 32
    77d0:	8f 9f       	mul	r24, r31
    77d2:	c0 01       	movw	r24, r0
    77d4:	11 24       	eor	r1, r1
    77d6:	9a 83       	std	Y+2, r25	; 0x02
    77d8:	89 83       	std	Y+1, r24	; 0x01
    77da:	78 01       	movw	r14, r16
    77dc:	20 e2       	ldi	r18, 0x20	; 32
    77de:	e2 0e       	add	r14, r18
    77e0:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    77e2:	f8 01       	movw	r30, r16
    77e4:	61 91       	ld	r22, Z+
    77e6:	8f 01       	movw	r16, r30
    77e8:	89 81       	ldd	r24, Y+1	; 0x01
    77ea:	9a 81       	ldd	r25, Y+2	; 0x02
    77ec:	9c 01       	movw	r18, r24
    77ee:	2f 5f       	subi	r18, 0xFF	; 255
    77f0:	3f 4f       	sbci	r19, 0xFF	; 255
    77f2:	3a 83       	std	Y+2, r19	; 0x02
    77f4:	29 83       	std	Y+1, r18	; 0x01
    77f6:	0e 94 85 3a 	call	0x750a	; 0x750a <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    77fa:	0e 15       	cp	r16, r14
    77fc:	1f 05       	cpc	r17, r15
    77fe:	89 f7       	brne	.-30     	; 0x77e2 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7800:	80 e0       	ldi	r24, 0x00	; 0
    7802:	01 c0       	rjmp	.+2      	; 0x7806 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7804:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7806:	0f 90       	pop	r0
    7808:	0f 90       	pop	r0
    780a:	0f 90       	pop	r0
    780c:	df 91       	pop	r29
    780e:	cf 91       	pop	r28
    7810:	1f 91       	pop	r17
    7812:	0f 91       	pop	r16
    7814:	ff 90       	pop	r15
    7816:	ef 90       	pop	r14
    7818:	08 95       	ret

0000781a <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    781a:	cf 92       	push	r12
    781c:	df 92       	push	r13
    781e:	ff 92       	push	r15
    7820:	0f 93       	push	r16
    7822:	1f 93       	push	r17
    7824:	cf 93       	push	r28
    7826:	df 93       	push	r29
    7828:	00 d0       	rcall	.+0      	; 0x782a <EepromReadBlock+0x10>
    782a:	cd b7       	in	r28, 0x3d	; 61
    782c:	de b7       	in	r29, 0x3e	; 62
    782e:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    7830:	40 e0       	ldi	r20, 0x00	; 0
    7832:	50 e0       	ldi	r21, 0x00	; 0
    7834:	be 01       	movw	r22, r28
    7836:	6f 5f       	subi	r22, 0xFF	; 255
    7838:	7f 4f       	sbci	r23, 0xFF	; 255
    783a:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <EepromBlockExists>
    783e:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    7840:	81 11       	cpse	r24, r1
    7842:	13 c0       	rjmp	.+38     	; 0x786a <EepromReadBlock+0x50>
    7844:	68 01       	movw	r12, r16
    7846:	80 e2       	ldi	r24, 0x20	; 32
    7848:	c8 0e       	add	r12, r24
    784a:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    784c:	89 81       	ldd	r24, Y+1	; 0x01
    784e:	9a 81       	ldd	r25, Y+2	; 0x02
    7850:	9c 01       	movw	r18, r24
    7852:	2f 5f       	subi	r18, 0xFF	; 255
    7854:	3f 4f       	sbci	r19, 0xFF	; 255
    7856:	3a 83       	std	Y+2, r19	; 0x02
    7858:	29 83       	std	Y+1, r18	; 0x01
    785a:	0e 94 8f 3a 	call	0x751e	; 0x751e <ReadEeprom>
    785e:	f8 01       	movw	r30, r16
    7860:	81 93       	st	Z+, r24
    7862:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7864:	ec 15       	cp	r30, r12
    7866:	fd 05       	cpc	r31, r13
    7868:	89 f7       	brne	.-30     	; 0x784c <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    786a:	8f 2d       	mov	r24, r15
    786c:	0f 90       	pop	r0
    786e:	0f 90       	pop	r0
    7870:	df 91       	pop	r29
    7872:	cf 91       	pop	r28
    7874:	1f 91       	pop	r17
    7876:	0f 91       	pop	r16
    7878:	ff 90       	pop	r15
    787a:	df 90       	pop	r13
    787c:	cf 90       	pop	r12
    787e:	08 95       	ret

00007880 <UartUnreadCount>:
		uart_rx_tail&=(UART_RX_BUFFER_SIZE-1);		//wrap pointer to buffer size
	}

	//obsolete
	u8 UartUnreadCount(){
		return uart_rx_head-uart_rx_tail;
    7880:	80 91 a1 0a 	lds	r24, 0x0AA1
    7884:	90 91 a3 0a 	lds	r25, 0x0AA3
	}
    7888:	89 1b       	sub	r24, r25
    788a:	08 95       	ret

0000788c <UartReadChar>:
		return (uart_rx_tail==uart_rx_head);
	}

	s16 UartReadChar(){

		if(uart_rx_head != uart_rx_tail){
    788c:	90 91 a1 0a 	lds	r25, 0x0AA1
    7890:	80 91 a3 0a 	lds	r24, 0x0AA3
    7894:	98 17       	cp	r25, r24
    7896:	71 f0       	breq	.+28     	; 0x78b4 <UartReadChar+0x28>

			u8 data=uart_rx_buf[uart_rx_tail];
    7898:	e0 91 a3 0a 	lds	r30, 0x0AA3
    789c:	f0 e0       	ldi	r31, 0x00	; 0
    789e:	ec 55       	subi	r30, 0x5C	; 92
    78a0:	f5 4f       	sbci	r31, 0xF5	; 245
    78a2:	80 81       	ld	r24, Z
			uart_rx_tail=((uart_rx_tail+1) & (UART_RX_BUFFER_SIZE-1));	//wrap pointer to buffer size			
    78a4:	90 91 a3 0a 	lds	r25, 0x0AA3
    78a8:	9f 5f       	subi	r25, 0xFF	; 255
    78aa:	9f 73       	andi	r25, 0x3F	; 63
    78ac:	90 93 a3 0a 	sts	0x0AA3, r25
			return (data&0xff);
    78b0:	90 e0       	ldi	r25, 0x00	; 0
    78b2:	08 95       	ret

		}else{
			return -1;	//no data in buffer
    78b4:	8f ef       	ldi	r24, 0xFF	; 255
    78b6:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
    78b8:	08 95       	ret

000078ba <InitUartRxBuffer>:

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    78ba:	10 92 a3 0a 	sts	0x0AA3, r1
		uart_rx_head=0;
    78be:	10 92 a1 0a 	sts	0x0AA1, r1
    78c2:	08 95       	ret

000078c4 <UartSendChar>:
		return (next_head == uart_tx_tail);
	}

	s8 UartSendChar(u8 data){

 		u8 next_head = ((uart_tx_head + 1) & (UART_TX_BUFFER_SIZE-1));
    78c4:	90 91 a2 0a 	lds	r25, 0x0AA2
    78c8:	9f 5f       	subi	r25, 0xFF	; 255
    78ca:	9f 73       	andi	r25, 0x3F	; 63

		if (next_head != uart_tx_tail) {
    78cc:	20 91 e4 0a 	lds	r18, 0x0AE4
    78d0:	92 17       	cp	r25, r18
    78d2:	51 f0       	breq	.+20     	; 0x78e8 <UartSendChar+0x24>
			uart_tx_buf[uart_tx_head]=data;
    78d4:	e0 91 a2 0a 	lds	r30, 0x0AA2
    78d8:	f0 e0       	ldi	r31, 0x00	; 0
    78da:	e0 5a       	subi	r30, 0xA0	; 160
    78dc:	f5 4f       	sbci	r31, 0xF5	; 245
    78de:	80 83       	st	Z, r24
			uart_tx_head=next_head;		
    78e0:	90 93 a2 0a 	sts	0x0AA2, r25
			return 0;
    78e4:	80 e0       	ldi	r24, 0x00	; 0
    78e6:	08 95       	ret
		}else{
			return -1; //buffer full
    78e8:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
    78ea:	08 95       	ret

000078ec <InitUartTxBuffer>:

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    78ec:	10 92 e4 0a 	sts	0x0AE4, r1
		uart_tx_head=0;
    78f0:	10 92 a2 0a 	sts	0x0AA2, r1
    78f4:	08 95       	ret

000078f6 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    78f6:	00 97       	sbiw	r24, 0x00	; 0
    78f8:	21 f0       	breq	.+8      	; 0x7902 <GetPrngNumber+0xc>
    78fa:	90 93 41 0a 	sts	0x0A41, r25
    78fe:	80 93 40 0a 	sts	0x0A40, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    7902:	20 91 40 0a 	lds	r18, 0x0A40
    7906:	30 91 41 0a 	lds	r19, 0x0A41
    790a:	a9 01       	movw	r20, r18
    790c:	56 95       	lsr	r21
    790e:	47 95       	ror	r20
    7910:	56 95       	lsr	r21
    7912:	47 95       	ror	r20
    7914:	c9 01       	movw	r24, r18
    7916:	63 e0       	ldi	r22, 0x03	; 3
    7918:	96 95       	lsr	r25
    791a:	87 95       	ror	r24
    791c:	6a 95       	dec	r22
    791e:	e1 f7       	brne	.-8      	; 0x7918 <GetPrngNumber+0x22>
    7920:	84 27       	eor	r24, r20
    7922:	95 27       	eor	r25, r21
    7924:	82 27       	eor	r24, r18
    7926:	93 27       	eor	r25, r19
    7928:	a9 01       	movw	r20, r18
    792a:	75 e0       	ldi	r23, 0x05	; 5
    792c:	56 95       	lsr	r21
    792e:	47 95       	ror	r20
    7930:	7a 95       	dec	r23
    7932:	e1 f7       	brne	.-8      	; 0x792c <GetPrngNumber+0x36>
    7934:	84 27       	eor	r24, r20
    7936:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    7938:	99 27       	eor	r25, r25
    793a:	86 95       	lsr	r24
    793c:	97 95       	ror	r25
    793e:	88 27       	eor	r24, r24
    7940:	36 95       	lsr	r19
    7942:	27 95       	ror	r18
    7944:	82 2b       	or	r24, r18
    7946:	93 2b       	or	r25, r19
    7948:	90 93 41 0a 	sts	0x0A41, r25
    794c:	80 93 40 0a 	sts	0x0A40, r24
	return prng_state;   
}
    7950:	08 95       	ret

00007952 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    7952:	fc 01       	movw	r30, r24
    7954:	67 87       	std	Z+15, r22	; 0x0f
    7956:	08 95       	ret

00007958 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7958:	e4 e4       	ldi	r30, 0x44	; 68
    795a:	fa e0       	ldi	r31, 0x0A	; 10
    795c:	81 e0       	ldi	r24, 0x01	; 1
    795e:	91 e0       	ldi	r25, 0x01	; 1
    7960:	95 8b       	std	Z+21, r25	; 0x15
    7962:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7964:	63 8b       	std	Z+19, r22	; 0x13
    7966:	08 95       	ret

00007968 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    7968:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    796a:	90 81       	ld	r25, Z
    796c:	9f 75       	andi	r25, 0x5F	; 95
    796e:	90 83       	st	Z, r25
    7970:	08 95       	ret

00007972 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    7972:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7974:	90 81       	ld	r25, Z
    7976:	90 64       	ori	r25, 0x40	; 64
    7978:	90 83       	st	Z, r25
    797a:	08 95       	ret

0000797c <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    797c:	fc 01       	movw	r30, r24
    797e:	66 87       	std	Z+14, r22	; 0x0e
    7980:	08 95       	ret

00007982 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    7982:	fc 01       	movw	r30, r24
    7984:	62 87       	std	Z+10, r22	; 0x0a
    7986:	08 95       	ret

00007988 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    7988:	fc 01       	movw	r30, r24
    798a:	63 87       	std	Z+11, r22	; 0x0b
    798c:	08 95       	ret

0000798e <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    798e:	cf 93       	push	r28
    7990:	df 93       	push	r29
    7992:	ec 01       	movw	r28, r24
    7994:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7996:	29 81       	ldd	r18, Y+1	; 0x01
    7998:	30 e0       	ldi	r19, 0x00	; 0
    799a:	f9 01       	movw	r30, r18
    799c:	ee 0f       	add	r30, r30
    799e:	ff 1f       	adc	r31, r31
    79a0:	e8 5f       	subi	r30, 0xF8	; 248
    79a2:	fd 47       	sbci	r31, 0x7D	; 125
    79a4:	65 91       	lpm	r22, Z+
    79a6:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    79a8:	f9 01       	movw	r30, r18
    79aa:	e4 0f       	add	r30, r20
    79ac:	f1 1d       	adc	r31, r1
    79ae:	47 fd       	sbrc	r20, 7
    79b0:	fa 95       	dec	r31
    79b2:	ee 0f       	add	r30, r30
    79b4:	ff 1f       	adc	r31, r31
    79b6:	e8 5f       	subi	r30, 0xF8	; 248
    79b8:	fd 47       	sbci	r31, 0x7D	; 125
    79ba:	85 91       	lpm	r24, Z+
    79bc:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    79be:	86 1b       	sub	r24, r22
    79c0:	97 0b       	sbc	r25, r23
    79c2:	68 85       	ldd	r22, Y+8	; 0x08
    79c4:	70 e0       	ldi	r23, 0x00	; 0
    79c6:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
	if(delta==0)delta++;
    79ca:	61 15       	cp	r22, r1
    79cc:	71 05       	cpc	r23, r1
    79ce:	11 f4       	brne	.+4      	; 0x79d4 <PatchCommand11+0x46>
    79d0:	61 e0       	ldi	r22, 0x01	; 1
    79d2:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    79d4:	ea 81       	ldd	r30, Y+2	; 0x02
    79d6:	86 e0       	ldi	r24, 0x06	; 6
    79d8:	e8 9f       	mul	r30, r24
    79da:	f0 01       	movw	r30, r0
    79dc:	11 24       	eor	r1, r1
    79de:	ec 5b       	subi	r30, 0xBC	; 188
    79e0:	f5 4f       	sbci	r31, 0xF5	; 245
    79e2:	81 81       	ldd	r24, Z+1	; 0x01
    79e4:	92 81       	ldd	r25, Z+2	; 0x02
    79e6:	86 0f       	add	r24, r22
    79e8:	97 1f       	adc	r25, r23
    79ea:	92 83       	std	Z+2, r25	; 0x02
    79ec:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    79ee:	7e 83       	std	Y+6, r23	; 0x06
    79f0:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    79f2:	88 81       	ld	r24, Y
    79f4:	88 60       	ori	r24, 0x08	; 8
    79f6:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    79f8:	89 81       	ldd	r24, Y+1	; 0x01
    79fa:	48 0f       	add	r20, r24
    79fc:	4f 83       	std	Y+7, r20	; 0x07
}
    79fe:	df 91       	pop	r29
    7a00:	cf 91       	pop	r28
    7a02:	08 95       	ret

00007a04 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    7a04:	fc 01       	movw	r30, r24
    7a06:	60 87       	std	Z+8, r22	; 0x08
    7a08:	08 95       	ret

00007a0a <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    7a0a:	fc 01       	movw	r30, r24
    7a0c:	64 83       	std	Z+4, r22	; 0x04
    7a0e:	08 95       	ret

00007a10 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7a10:	fc 01       	movw	r30, r24
    7a12:	82 81       	ldd	r24, Z+2	; 0x02
    7a14:	0c 94 bd 40 	jmp	0x817a	; 0x817a <SetMixerWave>

00007a18 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    7a18:	fc 01       	movw	r30, r24
	track->note+=param;
    7a1a:	91 81       	ldd	r25, Z+1	; 0x01
    7a1c:	69 0f       	add	r22, r25
    7a1e:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7a20:	82 81       	ldd	r24, Z+2	; 0x02
    7a22:	0c 94 a6 40 	jmp	0x814c	; 0x814c <SetMixerNote>

00007a26 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    7a26:	fc 01       	movw	r30, r24
	track->note-=param;
    7a28:	91 81       	ldd	r25, Z+1	; 0x01
    7a2a:	96 1b       	sub	r25, r22
    7a2c:	69 2f       	mov	r22, r25
    7a2e:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    7a30:	82 81       	ldd	r24, Z+2	; 0x02
    7a32:	0c 94 a6 40 	jmp	0x814c	; 0x814c <SetMixerNote>

00007a36 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    7a36:	1f 93       	push	r17
    7a38:	cf 93       	push	r28
    7a3a:	df 93       	push	r29
    7a3c:	ec 01       	movw	r28, r24
    7a3e:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7a40:	8a 81       	ldd	r24, Y+2	; 0x02
    7a42:	0e 94 a6 40 	call	0x814c	; 0x814c <SetMixerNote>
	track->note=param;
    7a46:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7a48:	88 81       	ld	r24, Y
    7a4a:	87 7f       	andi	r24, 0xF7	; 247
    7a4c:	88 83       	st	Y, r24
}
    7a4e:	df 91       	pop	r29
    7a50:	cf 91       	pop	r28
    7a52:	1f 91       	pop	r17
    7a54:	08 95       	ret

00007a56 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7a56:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7a58:	14 96       	adiw	r26, 0x04	; 4
    7a5a:	8c 91       	ld	r24, X
    7a5c:	14 97       	sbiw	r26, 0x04	; 4
    7a5e:	88 23       	and	r24, r24
    7a60:	19 f1       	breq	.+70     	; 0x7aa8 <PatchCommand14+0x52>
    7a62:	55 96       	adiw	r26, 0x15	; 21
    7a64:	2d 91       	ld	r18, X+
    7a66:	3c 91       	ld	r19, X
    7a68:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    7a6a:	66 23       	and	r22, r22
    7a6c:	79 f0       	breq	.+30     	; 0x7a8c <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7a6e:	77 27       	eor	r23, r23
    7a70:	67 fd       	sbrc	r22, 7
    7a72:	70 95       	com	r23
    7a74:	6f 5f       	subi	r22, 0xFF	; 255
    7a76:	7f 4f       	sbci	r23, 0xFF	; 255
    7a78:	ab 01       	movw	r20, r22
    7a7a:	44 0f       	add	r20, r20
    7a7c:	55 1f       	adc	r21, r21
    7a7e:	64 0f       	add	r22, r20
    7a80:	75 1f       	adc	r23, r21
    7a82:	26 1b       	sub	r18, r22
    7a84:	37 0b       	sbc	r19, r23
    7a86:	09 c0       	rjmp	.+18     	; 0x7a9a <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7a88:	ef 3f       	cpi	r30, 0xFF	; 255
    7a8a:	39 f0       	breq	.+14     	; 0x7a9a <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7a8c:	23 50       	subi	r18, 0x03	; 3
    7a8e:	31 09       	sbc	r19, r1
    7a90:	f9 01       	movw	r30, r18
    7a92:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7a94:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7a96:	ed 30       	cpi	r30, 0x0D	; 13
    7a98:	b9 f7       	brne	.-18     	; 0x7a88 <PatchCommand14+0x32>
    7a9a:	56 96       	adiw	r26, 0x16	; 22
    7a9c:	3c 93       	st	X, r19
    7a9e:	2e 93       	st	-X, r18
    7aa0:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    7aa2:	81 50       	subi	r24, 0x01	; 1
    7aa4:	14 96       	adiw	r26, 0x04	; 4
    7aa6:	8c 93       	st	X, r24
    7aa8:	08 95       	ret

00007aaa <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7aaa:	90 93 46 0b 	sts	0x0B46, r25
    7aae:	80 93 45 0b 	sts	0x0B45, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7ab2:	8f e6       	ldi	r24, 0x6F	; 111
    7ab4:	80 93 48 0b 	sts	0x0B48, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7ab8:	10 92 42 0a 	sts	0x0A42, r1
    7abc:	e7 ef       	ldi	r30, 0xF7	; 247
    7abe:	fa e0       	ldi	r31, 0x0A	; 10

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7ac0:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7ac2:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7ac4:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7ac6:	28 e1       	ldi	r18, 0x18	; 24
    7ac8:	df 01       	movw	r26, r30
    7aca:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    7acc:	8c 93       	st	X, r24
    7ace:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7ad0:	9c 93       	st	X, r25
    7ad2:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    7ad4:	1c 92       	st	X, r1
    7ad6:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7ad8:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    7ada:	10 82       	st	Z, r1
    7adc:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    7ade:	2c 93       	st	X, r18
    7ae0:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7ae2:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7ae4:	8f 5f       	subi	r24, 0xFF	; 255
    7ae6:	77 96       	adiw	r30, 0x17	; 23
    7ae8:	84 30       	cpi	r24, 0x04	; 4
    7aea:	71 f7       	brne	.-36     	; 0x7ac8 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7aec:	08 95       	ret

00007aee <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7aee:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7af0:	ed 91       	ld	r30, X+
    7af2:	fc 91       	ld	r31, X
    7af4:	11 97       	sbiw	r26, 0x01	; 1
    7af6:	9f 01       	movw	r18, r30
    7af8:	2f 5f       	subi	r18, 0xFF	; 255
    7afa:	3f 4f       	sbci	r19, 0xFF	; 255
    7afc:	11 96       	adiw	r26, 0x01	; 1
    7afe:	3c 93       	st	X, r19
    7b00:	2e 93       	st	-X, r18
    7b02:	e4 91       	lpm	r30, Z
    7b04:	e7 fd       	sbrc	r30, 7
    7b06:	03 c0       	rjmp	.+6      	; 0x7b0e <ReadVarLen+0x20>
    7b08:	8e 2f       	mov	r24, r30
    7b0a:	90 e0       	ldi	r25, 0x00	; 0
    7b0c:	08 95       	ret
    {
       value &= 0x7F;
    7b0e:	ef 77       	andi	r30, 0x7F	; 127
    7b10:	8e 2f       	mov	r24, r30
    7b12:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7b14:	96 95       	lsr	r25
    7b16:	98 2f       	mov	r25, r24
    7b18:	88 27       	eor	r24, r24
    7b1a:	97 95       	ror	r25
    7b1c:	87 95       	ror	r24
    7b1e:	2f 5f       	subi	r18, 0xFF	; 255
    7b20:	3f 4f       	sbci	r19, 0xFF	; 255
    7b22:	f9 01       	movw	r30, r18
    7b24:	31 97       	sbiw	r30, 0x01	; 1
    7b26:	e4 91       	lpm	r30, Z
    7b28:	4e 2f       	mov	r20, r30
    7b2a:	4f 77       	andi	r20, 0x7F	; 127
    7b2c:	84 0f       	add	r24, r20
    7b2e:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7b30:	e7 fd       	sbrc	r30, 7
    7b32:	f0 cf       	rjmp	.-32     	; 0x7b14 <ReadVarLen+0x26>
    7b34:	2d 93       	st	X+, r18
    7b36:	3c 93       	st	X, r19
    }


    return value;
}
    7b38:	08 95       	ret

00007b3a <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7b3a:	ef 92       	push	r14
    7b3c:	ff 92       	push	r15
    7b3e:	0f 93       	push	r16
    7b40:	1f 93       	push	r17
    7b42:	cf 93       	push	r28
    7b44:	df 93       	push	r29
    7b46:	1f 92       	push	r1
    7b48:	cd b7       	in	r28, 0x3d	; 61
    7b4a:	de b7       	in	r29, 0x3e	; 62
    7b4c:	7c 01       	movw	r14, r24
    7b4e:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7b50:	fc 01       	movw	r30, r24
    7b52:	80 81       	ld	r24, Z
    7b54:	08 2f       	mov	r16, r24
    7b56:	00 1f       	adc	r16, r16
    7b58:	00 27       	eor	r16, r16
    7b5a:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    7b5c:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7b5e:	9f ef       	ldi	r25, 0xFF	; 255
    7b60:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7b62:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7b64:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7b66:	87 7b       	andi	r24, 0xB7	; 183
    7b68:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7b6a:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    7b6c:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    7b6e:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7b70:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7b72:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7b74:	82 81       	ldd	r24, Z+2	; 0x02
    7b76:	83 30       	cpi	r24, 0x03	; 3
    7b78:	69 f4       	brne	.+26     	; 0x7b94 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    7b7a:	01 11       	cpse	r16, r1
    7b7c:	01 c0       	rjmp	.+2      	; 0x7b80 <TriggerCommon+0x46>
    7b7e:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7b80:	81 e0       	ldi	r24, 0x01	; 1
    7b82:	91 e0       	ldi	r25, 0x01	; 1
    7b84:	90 93 59 0a 	sts	0x0A59, r25
    7b88:	80 93 58 0a 	sts	0x0A58, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7b8c:	81 e0       	ldi	r24, 0x01	; 1
    7b8e:	80 93 57 0a 	sts	0x0A57, r24
    7b92:	0a c0       	rjmp	.+20     	; 0x7ba8 <TriggerCommon+0x6e>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7b94:	60 e0       	ldi	r22, 0x00	; 0
    7b96:	29 83       	std	Y+1, r18	; 0x01
    7b98:	0e 94 bd 40 	call	0x817a	; 0x817a <SetMixerWave>
			SetMixerNote(track->channel,note);
    7b9c:	29 81       	ldd	r18, Y+1	; 0x01
    7b9e:	62 2f       	mov	r22, r18
    7ba0:	f7 01       	movw	r30, r14
    7ba2:	82 81       	ldd	r24, Z+2	; 0x02
    7ba4:	0e 94 a6 40 	call	0x814c	; 0x814c <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7ba8:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7baa:	00 23       	and	r16, r16
    7bac:	11 f0       	breq	.+4      	; 0x7bb2 <TriggerCommon+0x78>
		track->fxPatchNo=patch;
    7bae:	11 8b       	std	Z+17, r17	; 0x11
    7bb0:	01 c0       	rjmp	.+2      	; 0x7bb4 <TriggerCommon+0x7a>
	}else{
		track->patchNo=patch;	
    7bb2:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7bb4:	e0 91 45 0b 	lds	r30, 0x0B45
    7bb8:	f0 91 46 0b 	lds	r31, 0x0B46
    7bbc:	89 e0       	ldi	r24, 0x09	; 9
    7bbe:	18 9f       	mul	r17, r24
    7bc0:	e0 0d       	add	r30, r0
    7bc2:	f1 1d       	adc	r31, r1
    7bc4:	11 24       	eor	r1, r1
    7bc6:	33 96       	adiw	r30, 0x03	; 3
    7bc8:	85 91       	lpm	r24, Z+
    7bca:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7bcc:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7bce:	00 97       	sbiw	r24, 0x00	; 0
    7bd0:	19 f4       	brne	.+6      	; 0x7bd8 <TriggerCommon+0x9e>
		track->patchCommandStreamPos=NULL;
    7bd2:	16 8a       	std	Z+22, r1	; 0x16
    7bd4:	15 8a       	std	Z+21, r1	; 0x15
    7bd6:	08 c0       	rjmp	.+16     	; 0x7be8 <TriggerCommon+0xae>
	}else{
		track->patchCurrDeltaTime=0;
    7bd8:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7bda:	fc 01       	movw	r30, r24
    7bdc:	24 91       	lpm	r18, Z
    7bde:	f7 01       	movw	r30, r14
    7be0:	22 8b       	std	Z+18, r18	; 0x12
    7be2:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7be4:	96 8b       	std	Z+22, r25	; 0x16
    7be6:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7be8:	0f 90       	pop	r0
    7bea:	df 91       	pop	r29
    7bec:	cf 91       	pop	r28
    7bee:	1f 91       	pop	r17
    7bf0:	0f 91       	pop	r16
    7bf2:	ff 90       	pop	r15
    7bf4:	ef 90       	pop	r14
    7bf6:	08 95       	ret

00007bf8 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7bf8:	cf 93       	push	r28
    7bfa:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7bfc:	e0 91 45 0b 	lds	r30, 0x0B45
    7c00:	f0 91 46 0b 	lds	r31, 0x0B46
    7c04:	99 e0       	ldi	r25, 0x09	; 9
    7c06:	89 9f       	mul	r24, r25
    7c08:	e0 0d       	add	r30, r0
    7c0a:	f1 1d       	adc	r31, r1
    7c0c:	11 24       	eor	r1, r1
    7c0e:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7c10:	e1 30       	cpi	r30, 0x01	; 1
    7c12:	e9 f0       	breq	.+58     	; 0x7c4e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7c14:	e2 30       	cpi	r30, 0x02	; 2
    7c16:	e9 f0       	breq	.+58     	; 0x7c52 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7c18:	20 91 fe 0a 	lds	r18, 0x0AFE
    7c1c:	27 ff       	sbrs	r18, 7
    7c1e:	1d c0       	rjmp	.+58     	; 0x7c5a <TriggerFx+0x62>
    7c20:	20 91 0f 0b 	lds	r18, 0x0B0F
    7c24:	28 13       	cpse	r18, r24
    7c26:	02 c0       	rjmp	.+4      	; 0x7c2c <TriggerFx+0x34>
    7c28:	41 11       	cpse	r20, r1
    7c2a:	17 c0       	rjmp	.+46     	; 0x7c5a <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7c2c:	20 91 15 0b 	lds	r18, 0x0B15
    7c30:	27 ff       	sbrs	r18, 7
    7c32:	11 c0       	rjmp	.+34     	; 0x7c56 <TriggerFx+0x5e>
    7c34:	20 91 26 0b 	lds	r18, 0x0B26
    7c38:	28 13       	cpse	r18, r24
    7c3a:	02 c0       	rjmp	.+4      	; 0x7c40 <TriggerFx+0x48>
    7c3c:	41 11       	cpse	r20, r1
    7c3e:	0b c0       	rjmp	.+22     	; 0x7c56 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7c40:	20 91 12 0b 	lds	r18, 0x0B12
    7c44:	90 91 29 0b 	lds	r25, 0x0B29
    7c48:	92 17       	cp	r25, r18
    7c4a:	28 f4       	brcc	.+10     	; 0x7c56 <TriggerFx+0x5e>
    7c4c:	06 c0       	rjmp	.+12     	; 0x7c5a <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7c4e:	c3 e0       	ldi	r28, 0x03	; 3
    7c50:	05 c0       	rjmp	.+10     	; 0x7c5c <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7c52:	c4 e0       	ldi	r28, 0x04	; 4
    7c54:	03 c0       	rjmp	.+6      	; 0x7c5c <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7c56:	c2 e0       	ldi	r28, 0x02	; 2
    7c58:	01 c0       	rjmp	.+2      	; 0x7c5c <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7c5a:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7c5c:	97 e1       	ldi	r25, 0x17	; 23
    7c5e:	c9 9f       	mul	r28, r25
    7c60:	e0 01       	movw	r28, r0
    7c62:	11 24       	eor	r1, r1
    7c64:	c9 51       	subi	r28, 0x19	; 25
    7c66:	d5 4f       	sbci	r29, 0xF5	; 245
    7c68:	90 e8       	ldi	r25, 0x80	; 128
    7c6a:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7c6c:	1e 8a       	std	Y+22, r1	; 0x16
    7c6e:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7c70:	20 e5       	ldi	r18, 0x50	; 80
    7c72:	46 2f       	mov	r20, r22
    7c74:	68 2f       	mov	r22, r24
    7c76:	ce 01       	movw	r24, r28
    7c78:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7c7c:	88 81       	ld	r24, Y
    7c7e:	80 62       	ori	r24, 0x20	; 32
    7c80:	88 83       	st	Y, r24
}
    7c82:	df 91       	pop	r29
    7c84:	cf 91       	pop	r28
    7c86:	08 95       	ret

00007c88 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7c88:	cf 93       	push	r28
    7c8a:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7c8c:	a8 2f       	mov	r26, r24
    7c8e:	b0 e0       	ldi	r27, 0x00	; 0
    7c90:	97 e1       	ldi	r25, 0x17	; 23
    7c92:	89 9f       	mul	r24, r25
    7c94:	f0 01       	movw	r30, r0
    7c96:	11 24       	eor	r1, r1
    7c98:	e9 51       	subi	r30, 0x19	; 25
    7c9a:	f5 4f       	sbci	r31, 0xF5	; 245
    7c9c:	80 81       	ld	r24, Z
    7c9e:	85 ff       	sbrs	r24, 5
    7ca0:	02 c0       	rjmp	.+4      	; 0x7ca6 <TriggerNote+0x1e>
    7ca2:	87 fd       	sbrc	r24, 7
    7ca4:	2e c0       	rjmp	.+92     	; 0x7d02 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7ca6:	21 11       	cpse	r18, r1
    7ca8:	18 c0       	rjmp	.+48     	; 0x7cda <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7caa:	97 e1       	ldi	r25, 0x17	; 23
    7cac:	9a 9f       	mul	r25, r26
    7cae:	f0 01       	movw	r30, r0
    7cb0:	9b 9f       	mul	r25, r27
    7cb2:	f0 0d       	add	r31, r0
    7cb4:	11 24       	eor	r1, r1
    7cb6:	e9 51       	subi	r30, 0x19	; 25
    7cb8:	f5 4f       	sbci	r31, 0xF5	; 245
    7cba:	97 85       	ldd	r25, Z+15	; 0x0f
    7cbc:	91 11       	cpse	r25, r1
    7cbe:	02 c0       	rjmp	.+4      	; 0x7cc4 <TriggerNote+0x3c>
    7cc0:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7cc2:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7cc4:	97 e1       	ldi	r25, 0x17	; 23
    7cc6:	9a 9f       	mul	r25, r26
    7cc8:	f0 01       	movw	r30, r0
    7cca:	9b 9f       	mul	r25, r27
    7ccc:	f0 0d       	add	r31, r0
    7cce:	11 24       	eor	r1, r1
    7cd0:	e9 51       	subi	r30, 0x19	; 25
    7cd2:	f5 4f       	sbci	r31, 0xF5	; 245
    7cd4:	8f 7b       	andi	r24, 0xBF	; 191
    7cd6:	80 83       	st	Z, r24
    7cd8:	14 c0       	rjmp	.+40     	; 0x7d02 <TriggerNote+0x7a>
    7cda:	82 2f       	mov	r24, r18
    7cdc:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7cde:	97 e1       	ldi	r25, 0x17	; 23
    7ce0:	9a 9f       	mul	r25, r26
    7ce2:	e0 01       	movw	r28, r0
    7ce4:	9b 9f       	mul	r25, r27
    7ce6:	d0 0d       	add	r29, r0
    7ce8:	11 24       	eor	r1, r1
    7cea:	c9 51       	subi	r28, 0x19	; 25
    7cec:	d5 4f       	sbci	r29, 0xF5	; 245
    7cee:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7cf0:	1e 8a       	std	Y+22, r1	; 0x16
    7cf2:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7cf4:	48 2f       	mov	r20, r24
    7cf6:	ce 01       	movw	r24, r28
    7cf8:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7cfc:	88 81       	ld	r24, Y
    7cfe:	80 62       	ori	r24, 0x20	; 32
    7d00:	88 83       	st	Y, r24
		}

	}
}
    7d02:	df 91       	pop	r29
    7d04:	cf 91       	pop	r28
    7d06:	08 95       	ret

00007d08 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7d08:	6f 92       	push	r6
    7d0a:	7f 92       	push	r7
    7d0c:	8f 92       	push	r8
    7d0e:	9f 92       	push	r9
    7d10:	af 92       	push	r10
    7d12:	bf 92       	push	r11
    7d14:	cf 92       	push	r12
    7d16:	df 92       	push	r13
    7d18:	ef 92       	push	r14
    7d1a:	ff 92       	push	r15
    7d1c:	0f 93       	push	r16
    7d1e:	1f 93       	push	r17
    7d20:	cf 93       	push	r28
    7d22:	df 93       	push	r29
    7d24:	c7 ee       	ldi	r28, 0xE7	; 231
    7d26:	da e0       	ldi	r29, 0x0A	; 10
    7d28:	04 e4       	ldi	r16, 0x44	; 68
    7d2a:	1a e0       	ldi	r17, 0x0A	; 10
    7d2c:	d8 01       	movw	r26, r16
    7d2e:	9e 01       	movw	r18, r28
    7d30:	40 e0       	ldi	r20, 0x00	; 0
    7d32:	50 e0       	ldi	r21, 0x00	; 0
    7d34:	ca 01       	movw	r24, r20
    7d36:	89 51       	subi	r24, 0x19	; 25
    7d38:	95 4f       	sbci	r25, 0xF5	; 245
    7d3a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7d3c:	fc 01       	movw	r30, r24
    7d3e:	87 85       	ldd	r24, Z+15	; 0x0f
    7d40:	88 23       	and	r24, r24
    7d42:	91 f0       	breq	.+36     	; 0x7d68 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7d44:	66 85       	ldd	r22, Z+14	; 0x0e
    7d46:	99 27       	eor	r25, r25
    7d48:	87 fd       	sbrc	r24, 7
    7d4a:	90 95       	com	r25
    7d4c:	86 0f       	add	r24, r22
    7d4e:	91 1d       	adc	r25, r1
    7d50:	8f 3f       	cpi	r24, 0xFF	; 255
    7d52:	91 05       	cpc	r25, r1
    7d54:	19 f0       	breq	.+6      	; 0x7d5c <ProcessMusic+0x54>
    7d56:	14 f0       	brlt	.+4      	; 0x7d5c <ProcessMusic+0x54>
    7d58:	8f ef       	ldi	r24, 0xFF	; 255
    7d5a:	90 e0       	ldi	r25, 0x00	; 0
    7d5c:	97 ff       	sbrs	r25, 7
    7d5e:	02 c0       	rjmp	.+4      	; 0x7d64 <ProcessMusic+0x5c>
    7d60:	80 e0       	ldi	r24, 0x00	; 0
    7d62:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7d64:	f6 01       	movw	r30, r12
    7d66:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7d68:	f9 01       	movw	r30, r18
    7d6a:	f0 80       	ld	r15, Z
    7d6c:	f3 fe       	sbrs	r15, 3
    7d6e:	2a c0       	rjmp	.+84     	; 0x7dc4 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7d70:	65 81       	ldd	r22, Z+5	; 0x05
    7d72:	76 81       	ldd	r23, Z+6	; 0x06
    7d74:	11 96       	adiw	r26, 0x01	; 1
    7d76:	8d 91       	ld	r24, X+
    7d78:	9c 91       	ld	r25, X
    7d7a:	12 97       	sbiw	r26, 0x02	; 2
    7d7c:	86 0f       	add	r24, r22
    7d7e:	97 1f       	adc	r25, r23
    7d80:	12 96       	adiw	r26, 0x02	; 2
    7d82:	9c 93       	st	X, r25
    7d84:	8e 93       	st	-X, r24
    7d86:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7d88:	f6 01       	movw	r30, r12
    7d8a:	e7 80       	ldd	r14, Z+7	; 0x07
    7d8c:	ee 2d       	mov	r30, r14
    7d8e:	f0 e0       	ldi	r31, 0x00	; 0
    7d90:	ee 0f       	add	r30, r30
    7d92:	ff 1f       	adc	r31, r31
    7d94:	e8 5f       	subi	r30, 0xF8	; 248
    7d96:	fd 47       	sbci	r31, 0x7D	; 125
    7d98:	c5 90       	lpm	r12, Z+
    7d9a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7d9c:	16 16       	cp	r1, r22
    7d9e:	17 06       	cpc	r1, r23
    7da0:	24 f4       	brge	.+8      	; 0x7daa <ProcessMusic+0xa2>
    7da2:	8c 15       	cp	r24, r12
    7da4:	9d 05       	cpc	r25, r13
    7da6:	30 f4       	brcc	.+12     	; 0x7db4 <ProcessMusic+0xac>
    7da8:	0d c0       	rjmp	.+26     	; 0x7dc4 <ProcessMusic+0xbc>
    7daa:	67 2b       	or	r22, r23
    7dac:	59 f0       	breq	.+22     	; 0x7dc4 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7dae:	c8 16       	cp	r12, r24
    7db0:	d9 06       	cpc	r13, r25
    7db2:	40 f0       	brcs	.+16     	; 0x7dc4 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7db4:	12 96       	adiw	r26, 0x02	; 2
    7db6:	dc 92       	st	X, r13
    7db8:	ce 92       	st	-X, r12
    7dba:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7dbc:	8f 2d       	mov	r24, r15
    7dbe:	87 7f       	andi	r24, 0xF7	; 247
    7dc0:	f9 01       	movw	r30, r18
    7dc2:	80 83       	st	Z, r24
    7dc4:	49 5e       	subi	r20, 0xE9	; 233
    7dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    7dc8:	29 5e       	subi	r18, 0xE9	; 233
    7dca:	3f 4f       	sbci	r19, 0xFF	; 255
    7dcc:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7dce:	4c 35       	cpi	r20, 0x5C	; 92
    7dd0:	51 05       	cpc	r21, r1
    7dd2:	09 f0       	breq	.+2      	; 0x7dd6 <ProcessMusic+0xce>
    7dd4:	af cf       	rjmp	.-162    	; 0x7d34 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7dd6:	80 91 42 0a 	lds	r24, 0x0A42
    7dda:	88 23       	and	r24, r24
    7ddc:	09 f4       	brne	.+2      	; 0x7de0 <ProcessMusic+0xd8>
    7dde:	cc c0       	rjmp	.+408    	; 0x7f78 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7de0:	57 e1       	ldi	r21, 0x17	; 23
    7de2:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7de4:	80 91 43 0b 	lds	r24, 0x0B43
    7de8:	90 91 44 0b 	lds	r25, 0x0B44
    7dec:	20 91 49 0b 	lds	r18, 0x0B49
    7df0:	30 91 4a 0b 	lds	r19, 0x0B4A
    7df4:	82 17       	cp	r24, r18
    7df6:	93 07       	cpc	r25, r19
    7df8:	09 f0       	breq	.+2      	; 0x7dfc <ProcessMusic+0xf4>
    7dfa:	b9 c0       	rjmp	.+370    	; 0x7f6e <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    7dfc:	20 91 4c 0b 	lds	r18, 0x0B4C
    7e00:	30 91 4d 0b 	lds	r19, 0x0B4D
    7e04:	b9 01       	movw	r22, r18
    7e06:	6f 5f       	subi	r22, 0xFF	; 255
    7e08:	7f 4f       	sbci	r23, 0xFF	; 255
    7e0a:	70 93 4d 0b 	sts	0x0B4D, r23
    7e0e:	60 93 4c 0b 	sts	0x0B4C, r22
    7e12:	f9 01       	movw	r30, r18
    7e14:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7e16:	4f 3f       	cpi	r20, 0xFF	; 255
    7e18:	79 f5       	brne	.+94     	; 0x7e78 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7e1a:	a9 01       	movw	r20, r18
    7e1c:	4e 5f       	subi	r20, 0xFE	; 254
    7e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    7e20:	50 93 4d 0b 	sts	0x0B4D, r21
    7e24:	40 93 4c 0b 	sts	0x0B4C, r20
    7e28:	fb 01       	movw	r30, r22
    7e2a:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7e2c:	6f 32       	cpi	r22, 0x2F	; 47
    7e2e:	19 f4       	brne	.+6      	; 0x7e36 <ProcessMusic+0x12e>
						playSong=false;
    7e30:	10 92 42 0a 	sts	0x0A42, r1
						break;	
    7e34:	9c c0       	rjmp	.+312    	; 0x7f6e <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7e36:	66 30       	cpi	r22, 0x06	; 6
    7e38:	09 f0       	breq	.+2      	; 0x7e3c <ProcessMusic+0x134>
    7e3a:	8c c0       	rjmp	.+280    	; 0x7f54 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    7e3c:	fa 01       	movw	r30, r20
    7e3e:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7e40:	c9 01       	movw	r24, r18
    7e42:	04 96       	adiw	r24, 0x04	; 4
    7e44:	90 93 4d 0b 	sts	0x0B4D, r25
    7e48:	80 93 4c 0b 	sts	0x0B4C, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7e4c:	f9 01       	movw	r30, r18
    7e4e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7e50:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7e52:	e3 35       	cpi	r30, 0x53	; 83
    7e54:	29 f4       	brne	.+10     	; 0x7e60 <ProcessMusic+0x158>
							loopStart=songPos;
    7e56:	90 93 4f 0b 	sts	0x0B4F, r25
    7e5a:	80 93 4e 0b 	sts	0x0B4E, r24
    7e5e:	7a c0       	rjmp	.+244    	; 0x7f54 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7e60:	e5 34       	cpi	r30, 0x45	; 69
    7e62:	09 f0       	breq	.+2      	; 0x7e66 <ProcessMusic+0x15e>
    7e64:	77 c0       	rjmp	.+238    	; 0x7f54 <ProcessMusic+0x24c>
							songPos=loopStart;
    7e66:	80 91 4e 0b 	lds	r24, 0x0B4E
    7e6a:	90 91 4f 0b 	lds	r25, 0x0B4F
    7e6e:	90 93 4d 0b 	sts	0x0B4D, r25
    7e72:	80 93 4c 0b 	sts	0x0B4C, r24
    7e76:	6e c0       	rjmp	.+220    	; 0x7f54 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7e78:	47 fd       	sbrc	r20, 7
    7e7a:	40 93 47 0b 	sts	0x0B47, r20
					channel=lastStatus&0x0f;
    7e7e:	90 91 47 0b 	lds	r25, 0x0B47
    7e82:	89 2f       	mov	r24, r25
    7e84:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7e86:	47 ff       	sbrs	r20, 7
    7e88:	08 c0       	rjmp	.+16     	; 0x7e9a <ProcessMusic+0x192>
    7e8a:	2e 5f       	subi	r18, 0xFE	; 254
    7e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    7e8e:	30 93 4d 0b 	sts	0x0B4D, r19
    7e92:	20 93 4c 0b 	sts	0x0B4C, r18
    7e96:	fb 01       	movw	r30, r22
    7e98:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7e9a:	90 7f       	andi	r25, 0xF0	; 240
    7e9c:	90 3b       	cpi	r25, 0xB0	; 176
    7e9e:	e1 f0       	breq	.+56     	; 0x7ed8 <ProcessMusic+0x1d0>
    7ea0:	90 3c       	cpi	r25, 0xC0	; 192
    7ea2:	09 f4       	brne	.+2      	; 0x7ea6 <ProcessMusic+0x19e>
    7ea4:	51 c0       	rjmp	.+162    	; 0x7f48 <ProcessMusic+0x240>
    7ea6:	90 39       	cpi	r25, 0x90	; 144
    7ea8:	09 f0       	breq	.+2      	; 0x7eac <ProcessMusic+0x1a4>
    7eaa:	54 c0       	rjmp	.+168    	; 0x7f54 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7eac:	e0 91 4c 0b 	lds	r30, 0x0B4C
    7eb0:	f0 91 4d 0b 	lds	r31, 0x0B4D
    7eb4:	9f 01       	movw	r18, r30
    7eb6:	2f 5f       	subi	r18, 0xFF	; 255
    7eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    7eba:	30 93 4d 0b 	sts	0x0B4D, r19
    7ebe:	20 93 4c 0b 	sts	0x0B4C, r18
    7ec2:	24 91       	lpm	r18, Z
    7ec4:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7ec6:	f8 9e       	mul	r15, r24
    7ec8:	f0 01       	movw	r30, r0
    7eca:	11 24       	eor	r1, r1
    7ecc:	e9 51       	subi	r30, 0x19	; 25
    7ece:	f5 4f       	sbci	r31, 0xF5	; 245
    7ed0:	60 89       	ldd	r22, Z+16	; 0x10
    7ed2:	0e 94 44 3e 	call	0x7c88	; 0x7c88 <TriggerNote>
    7ed6:	3e c0       	rjmp	.+124    	; 0x7f54 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7ed8:	e0 91 4c 0b 	lds	r30, 0x0B4C
    7edc:	f0 91 4d 0b 	lds	r31, 0x0B4D
    7ee0:	9f 01       	movw	r18, r30
    7ee2:	2f 5f       	subi	r18, 0xFF	; 255
    7ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    7ee6:	30 93 4d 0b 	sts	0x0B4D, r19
    7eea:	20 93 4c 0b 	sts	0x0B4C, r18
    7eee:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7ef0:	47 30       	cpi	r20, 0x07	; 7
    7ef2:	49 f4       	brne	.+18     	; 0x7f06 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7ef4:	f8 9e       	mul	r15, r24
    7ef6:	d0 01       	movw	r26, r0
    7ef8:	11 24       	eor	r1, r1
    7efa:	a9 51       	subi	r26, 0x19	; 25
    7efc:	b5 4f       	sbci	r27, 0xF5	; 245
    7efe:	ee 0f       	add	r30, r30
    7f00:	1c 96       	adiw	r26, 0x0c	; 12
    7f02:	ec 93       	st	X, r30
    7f04:	27 c0       	rjmp	.+78     	; 0x7f54 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7f06:	4b 30       	cpi	r20, 0x0B	; 11
    7f08:	49 f4       	brne	.+18     	; 0x7f1c <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7f0a:	f8 9e       	mul	r15, r24
    7f0c:	d0 01       	movw	r26, r0
    7f0e:	11 24       	eor	r1, r1
    7f10:	a9 51       	subi	r26, 0x19	; 25
    7f12:	b5 4f       	sbci	r27, 0xF5	; 245
    7f14:	ee 0f       	add	r30, r30
    7f16:	13 96       	adiw	r26, 0x03	; 3
    7f18:	ec 93       	st	X, r30
    7f1a:	1c c0       	rjmp	.+56     	; 0x7f54 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7f1c:	4c 35       	cpi	r20, 0x5C	; 92
    7f1e:	49 f4       	brne	.+18     	; 0x7f32 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7f20:	f8 9e       	mul	r15, r24
    7f22:	d0 01       	movw	r26, r0
    7f24:	11 24       	eor	r1, r1
    7f26:	a9 51       	subi	r26, 0x19	; 25
    7f28:	b5 4f       	sbci	r27, 0xF5	; 245
    7f2a:	ee 0f       	add	r30, r30
    7f2c:	1a 96       	adiw	r26, 0x0a	; 10
    7f2e:	ec 93       	st	X, r30
    7f30:	11 c0       	rjmp	.+34     	; 0x7f54 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7f32:	44 36       	cpi	r20, 0x64	; 100
    7f34:	79 f4       	brne	.+30     	; 0x7f54 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7f36:	f8 9e       	mul	r15, r24
    7f38:	d0 01       	movw	r26, r0
    7f3a:	11 24       	eor	r1, r1
    7f3c:	a9 51       	subi	r26, 0x19	; 25
    7f3e:	b5 4f       	sbci	r27, 0xF5	; 245
    7f40:	ee 0f       	add	r30, r30
    7f42:	1b 96       	adiw	r26, 0x0b	; 11
    7f44:	ec 93       	st	X, r30
    7f46:	06 c0       	rjmp	.+12     	; 0x7f54 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7f48:	f8 9e       	mul	r15, r24
    7f4a:	f0 01       	movw	r30, r0
    7f4c:	11 24       	eor	r1, r1
    7f4e:	e9 51       	subi	r30, 0x19	; 25
    7f50:	f5 4f       	sbci	r31, 0xF5	; 245
    7f52:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7f54:	8c e4       	ldi	r24, 0x4C	; 76
    7f56:	9b e0       	ldi	r25, 0x0B	; 11
    7f58:	0e 94 77 3d 	call	0x7aee	; 0x7aee <ReadVarLen>
    7f5c:	90 93 4a 0b 	sts	0x0B4A, r25
    7f60:	80 93 49 0b 	sts	0x0B49, r24
				currDeltaTime=0;
    7f64:	10 92 44 0b 	sts	0x0B44, r1
    7f68:	10 92 43 0b 	sts	0x0B43, r1
    7f6c:	3b cf       	rjmp	.-394    	; 0x7de4 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7f6e:	01 96       	adiw	r24, 0x01	; 1
    7f70:	90 93 44 0b 	sts	0x0B44, r25
    7f74:	80 93 43 0b 	sts	0x0B43, r24
    7f78:	90 ef       	ldi	r25, 0xF0	; 240
    7f7a:	a9 2e       	mov	r10, r25
    7f7c:	9a e0       	ldi	r25, 0x0A	; 10
    7f7e:	b9 2e       	mov	r11, r25
    7f80:	2a ef       	ldi	r18, 0xFA	; 250
    7f82:	c2 2e       	mov	r12, r18
    7f84:	2a e0       	ldi	r18, 0x0A	; 10
    7f86:	d2 2e       	mov	r13, r18
    7f88:	3b ef       	ldi	r19, 0xFB	; 251
    7f8a:	e3 2e       	mov	r14, r19
    7f8c:	3a e0       	ldi	r19, 0x0A	; 10
    7f8e:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7f90:	66 24       	eor	r6, r6
    7f92:	6a 94       	dec	r6
    7f94:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7f96:	88 81       	ld	r24, Y
    7f98:	85 ff       	sbrs	r24, 5
    7f9a:	42 c0       	rjmp	.+132    	; 0x8020 <ProcessMusic+0x318>
    7f9c:	2d 89       	ldd	r18, Y+21	; 0x15
    7f9e:	3e 89       	ldd	r19, Y+22	; 0x16
    7fa0:	23 2b       	or	r18, r19
    7fa2:	09 f4       	brne	.+2      	; 0x7fa6 <ProcessMusic+0x29e>
    7fa4:	3d c0       	rjmp	.+122    	; 0x8020 <ProcessMusic+0x318>
    7fa6:	86 fd       	sbrc	r24, 6
    7fa8:	3b c0       	rjmp	.+118    	; 0x8020 <ProcessMusic+0x318>
    7faa:	47 01       	movw	r8, r14
    7fac:	f2 e0       	ldi	r31, 0x02	; 2
    7fae:	8f 1a       	sub	r8, r31
    7fb0:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7fb2:	d6 01       	movw	r26, r12
    7fb4:	9c 91       	ld	r25, X
    7fb6:	f4 01       	movw	r30, r8
    7fb8:	80 81       	ld	r24, Z
    7fba:	98 13       	cpse	r25, r24
    7fbc:	2e c0       	rjmp	.+92     	; 0x801a <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7fbe:	ed 89       	ldd	r30, Y+21	; 0x15
    7fc0:	fe 89       	ldd	r31, Y+22	; 0x16
    7fc2:	bf 01       	movw	r22, r30
    7fc4:	6f 5f       	subi	r22, 0xFF	; 255
    7fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    7fc8:	7e 8b       	std	Y+22, r23	; 0x16
    7fca:	6d 8b       	std	Y+21, r22	; 0x15
    7fcc:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7fce:	8f 3f       	cpi	r24, 0xFF	; 255
    7fd0:	31 f4       	brne	.+12     	; 0x7fde <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7fd2:	88 81       	ld	r24, Y
    7fd4:	8f 77       	andi	r24, 0x7F	; 127
    7fd6:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7fd8:	1e 8a       	std	Y+22, r1	; 0x16
    7fda:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7fdc:	1e c0       	rjmp	.+60     	; 0x801a <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7fde:	9f 01       	movw	r18, r30
    7fe0:	2e 5f       	subi	r18, 0xFE	; 254
    7fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    7fe4:	3e 8b       	std	Y+22, r19	; 0x16
    7fe6:	2d 8b       	std	Y+21, r18	; 0x15
    7fe8:	fb 01       	movw	r30, r22
    7fea:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7fec:	e8 2f       	mov	r30, r24
    7fee:	f0 e0       	ldi	r31, 0x00	; 0
    7ff0:	ee 0f       	add	r30, r30
    7ff2:	ff 1f       	adc	r31, r31
    7ff4:	e2 54       	subi	r30, 0x42	; 66
    7ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    7ff8:	25 91       	lpm	r18, Z+
    7ffa:	34 91       	lpm	r19, Z
    7ffc:	ce 01       	movw	r24, r28
    7ffe:	f9 01       	movw	r30, r18
    8000:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8002:	ed 89       	ldd	r30, Y+21	; 0x15
    8004:	fe 89       	ldd	r31, Y+22	; 0x16
    8006:	cf 01       	movw	r24, r30
    8008:	01 96       	adiw	r24, 0x01	; 1
    800a:	9e 8b       	std	Y+22, r25	; 0x16
    800c:	8d 8b       	std	Y+21, r24	; 0x15
    800e:	e4 91       	lpm	r30, Z
    8010:	d4 01       	movw	r26, r8
    8012:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8014:	f6 01       	movw	r30, r12
    8016:	10 82       	st	Z, r1
    8018:	cc cf       	rjmp	.-104    	; 0x7fb2 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    801a:	9f 5f       	subi	r25, 0xFF	; 255
    801c:	d6 01       	movw	r26, r12
    801e:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8020:	98 81       	ld	r25, Y
    8022:	95 ff       	sbrs	r25, 5
    8024:	6c c0       	rjmp	.+216    	; 0x80fe <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8026:	f7 01       	movw	r30, r14
    8028:	80 81       	ld	r24, Z
    802a:	8f 3f       	cpi	r24, 0xFF	; 255
    802c:	11 f0       	breq	.+4      	; 0x8032 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    802e:	8f 5f       	subi	r24, 0xFF	; 255
    8030:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8032:	97 fd       	sbrc	r25, 7
    8034:	04 c0       	rjmp	.+8      	; 0x803e <ProcessMusic+0x336>
    8036:	f7 01       	movw	r30, r14
    8038:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    803a:	90 81       	ld	r25, Z
    803c:	01 c0       	rjmp	.+2      	; 0x8040 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    803e:	9f ef       	ldi	r25, 0xFF	; 255
    8040:	f7 01       	movw	r30, r14
    8042:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8044:	80 81       	ld	r24, Z
    8046:	88 23       	and	r24, r24
    8048:	09 f4       	brne	.+2      	; 0x804c <ProcessMusic+0x344>
    804a:	4e c0       	rjmp	.+156    	; 0x80e8 <ProcessMusic+0x3e0>
    804c:	31 96       	adiw	r30, 0x01	; 1
    804e:	50 81       	ld	r21, Z
    8050:	55 23       	and	r21, r21
    8052:	09 f4       	brne	.+2      	; 0x8056 <ProcessMusic+0x34e>
    8054:	49 c0       	rjmp	.+146    	; 0x80e8 <ProcessMusic+0x3e0>
    8056:	99 23       	and	r25, r25
    8058:	09 f4       	brne	.+2      	; 0x805c <ProcessMusic+0x354>
    805a:	46 c0       	rjmp	.+140    	; 0x80e8 <ProcessMusic+0x3e0>
    805c:	40 91 48 0b 	lds	r20, 0x0B48
    8060:	44 23       	and	r20, r20
    8062:	09 f4       	brne	.+2      	; 0x8066 <ProcessMusic+0x35e>
    8064:	41 c0       	rjmp	.+130    	; 0x80e8 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8066:	89 9f       	mul	r24, r25
    8068:	c0 01       	movw	r24, r0
    806a:	11 24       	eor	r1, r1
    806c:	93 95       	inc	r25
				uVol>>=8;
    806e:	89 2f       	mov	r24, r25
    8070:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8072:	58 9f       	mul	r21, r24
    8074:	90 01       	movw	r18, r0
    8076:	59 9f       	mul	r21, r25
    8078:	30 0d       	add	r19, r0
    807a:	11 24       	eor	r1, r1
    807c:	c9 01       	movw	r24, r18
    807e:	93 95       	inc	r25
				uVol>>=8;
    8080:	89 2f       	mov	r24, r25
    8082:	99 27       	eor	r25, r25
    8084:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8086:	50 81       	ld	r21, Z
    8088:	58 9f       	mul	r21, r24
    808a:	90 01       	movw	r18, r0
    808c:	59 9f       	mul	r21, r25
    808e:	30 0d       	add	r19, r0
    8090:	11 24       	eor	r1, r1
    8092:	33 95       	inc	r19
					uVol>>=8;
    8094:	23 2f       	mov	r18, r19
    8096:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8098:	42 9f       	mul	r20, r18
    809a:	c0 01       	movw	r24, r0
    809c:	43 9f       	mul	r20, r19
    809e:	90 0d       	add	r25, r0
    80a0:	11 24       	eor	r1, r1
    80a2:	93 95       	inc	r25
				uVol>>=8;
    80a4:	89 2f       	mov	r24, r25
    80a6:	99 27       	eor	r25, r25
    80a8:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    80aa:	20 81       	ld	r18, Z
    80ac:	22 23       	and	r18, r18
    80ae:	f1 f0       	breq	.+60     	; 0x80ec <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    80b0:	d5 01       	movw	r26, r10
    80b2:	ec 91       	ld	r30, X
    80b4:	f0 e0       	ldi	r31, 0x00	; 0
    80b6:	e0 50       	subi	r30, 0x00	; 0
    80b8:	fc 47       	sbci	r31, 0x7C	; 124
    80ba:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    80bc:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    80be:	2e 9f       	mul	r18, r30
    80c0:	f0 01       	movw	r30, r0
    80c2:	11 24       	eor	r1, r1
    80c4:	f3 95       	inc	r31
					tVol>>=8;
    80c6:	ef 2f       	mov	r30, r31
    80c8:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    80ca:	a3 01       	movw	r20, r6
    80cc:	4e 1b       	sub	r20, r30
    80ce:	5f 0b       	sbc	r21, r31
    80d0:	48 9f       	mul	r20, r24
    80d2:	90 01       	movw	r18, r0
    80d4:	49 9f       	mul	r20, r25
    80d6:	30 0d       	add	r19, r0
    80d8:	58 9f       	mul	r21, r24
    80da:	30 0d       	add	r19, r0
    80dc:	11 24       	eor	r1, r1
    80de:	c9 01       	movw	r24, r18
    80e0:	93 95       	inc	r25
					uVol>>=8;
    80e2:	89 2f       	mov	r24, r25
    80e4:	99 27       	eor	r25, r25
    80e6:	02 c0       	rjmp	.+4      	; 0x80ec <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    80e8:	80 e0       	ldi	r24, 0x00	; 0
    80ea:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    80ec:	f5 01       	movw	r30, r10
    80ee:	30 81       	ld	r19, Z
    80f0:	f7 01       	movw	r30, r14
    80f2:	39 97       	sbiw	r30, 0x09	; 9
    80f4:	20 81       	ld	r18, Z
    80f6:	23 0f       	add	r18, r19
    80f8:	d5 01       	movw	r26, r10
    80fa:	2c 93       	st	X, r18
    80fc:	02 c0       	rjmp	.+4      	; 0x8102 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    80fe:	80 e0       	ldi	r24, 0x00	; 0
    8100:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8102:	f8 01       	movw	r30, r16
    8104:	80 83       	st	Z, r24
    8106:	67 96       	adiw	r28, 0x17	; 23
    8108:	0a 5f       	subi	r16, 0xFA	; 250
    810a:	1f 4f       	sbci	r17, 0xFF	; 255
    810c:	f7 e1       	ldi	r31, 0x17	; 23
    810e:	af 0e       	add	r10, r31
    8110:	b1 1c       	adc	r11, r1
    8112:	87 e1       	ldi	r24, 0x17	; 23
    8114:	c8 0e       	add	r12, r24
    8116:	d1 1c       	adc	r13, r1
    8118:	97 e1       	ldi	r25, 0x17	; 23
    811a:	e9 0e       	add	r14, r25
    811c:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    811e:	ab e0       	ldi	r26, 0x0B	; 11
    8120:	c3 34       	cpi	r28, 0x43	; 67
    8122:	da 07       	cpc	r29, r26
    8124:	09 f0       	breq	.+2      	; 0x8128 <ProcessMusic+0x420>
    8126:	37 cf       	rjmp	.-402    	; 0x7f96 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8128:	df 91       	pop	r29
    812a:	cf 91       	pop	r28
    812c:	1f 91       	pop	r17
    812e:	0f 91       	pop	r16
    8130:	ff 90       	pop	r15
    8132:	ef 90       	pop	r14
    8134:	df 90       	pop	r13
    8136:	cf 90       	pop	r12
    8138:	bf 90       	pop	r11
    813a:	af 90       	pop	r10
    813c:	9f 90       	pop	r9
    813e:	8f 90       	pop	r8
    8140:	7f 90       	pop	r7
    8142:	6f 90       	pop	r6
    8144:	08 95       	ret

00008146 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8146:	80 93 48 0b 	sts	0x0B48, r24
    814a:	08 95       	ret

0000814c <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    814c:	99 27       	eor	r25, r25
	clr r23
    814e:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8150:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8152:	09 f4       	brne	.+2      	; 0x8156 <set_note_waves>
		ret
    8154:	08 95       	ret

00008156 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8156:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8158:	f2 e8       	ldi	r31, 0x82	; 130
	lsl r22
    815a:	66 0f       	add	r22, r22
	rol r23
    815c:	77 1f       	adc	r23, r23
	add ZL,r22
    815e:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8160:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8162:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8164:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8166:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    8168:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    816a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    816c:	28 9f       	mul	r18, r24
	add ZL,r0
    816e:	e0 0d       	add	r30, r0
	adc ZH,r1
    8170:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8172:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8174:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8176:	11 24       	eor	r1, r1
	

	ret
    8178:	08 95       	ret

0000817a <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    817a:	99 27       	eor	r25, r25
	clr r23
    817c:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    817e:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    8180:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8182:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8184:	28 9f       	mul	r18, r24
	add ZL,r0
    8186:	e0 0d       	add	r30, r0
	adc ZH,r1
    8188:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    818a:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    818c:	31 f4       	brne	.+12     	; 0x819a <smw1>
	lds r22,tr4_params
    818e:	60 91 57 0a 	lds	r22, 0x0A57
	andi r22,0xfe;
    8192:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8194:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw	
    8198:	0b c0       	rjmp	.+22     	; 0x81b0 <esmw>

0000819a <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    819a:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    819c:	31 f4       	brne	.+12     	; 0x81aa <smw2>
	lds r22,tr4_params
    819e:	60 91 57 0a 	lds	r22, 0x0A57
	ori r22,0xfe;
    81a2:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    81a4:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw
    81a8:	03 c0       	rjmp	.+6      	; 0x81b0 <esmw>

000081aa <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    81aa:	74 e8       	ldi	r23, 0x84	; 132
	add r23,r22
    81ac:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    81ae:	75 83       	std	Z+5, r23	; 0x05

000081b0 <esmw>:

esmw:
	clr r1	
    81b0:	11 24       	eor	r1, r1
	ret
    81b2:	08 95       	ret
	...

00008200 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8200:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8202:	80 93 43 0a 	sts	0x0A43, r24
	ret
    8206:	08 95       	ret

00008208 <steptable>:
    8208:	22 00       	.word	0x0022	; ????
    820a:	24 00       	.word	0x0024	; ????
    820c:	26 00       	.word	0x0026	; ????
    820e:	28 00       	.word	0x0028	; ????
    8210:	2b 00       	.word	0x002b	; ????
    8212:	2d 00       	.word	0x002d	; ????
    8214:	30 00       	.word	0x0030	; ????
    8216:	33 00       	.word	0x0033	; ????
    8218:	36 00       	.word	0x0036	; ????
    821a:	39 00       	.word	0x0039	; ????
    821c:	3d 00       	.word	0x003d	; ????
    821e:	40 00       	.word	0x0040	; ????
    8220:	44 00       	.word	0x0044	; ????
    8222:	48 00       	.word	0x0048	; ????
    8224:	4c 00       	.word	0x004c	; ????
    8226:	51 00       	.word	0x0051	; ????
    8228:	56 00       	.word	0x0056	; ????
    822a:	5b 00       	.word	0x005b	; ????
    822c:	60 00       	.word	0x0060	; ????
    822e:	66 00       	.word	0x0066	; ????
    8230:	6c 00       	.word	0x006c	; ????
    8232:	73 00       	.word	0x0073	; ????
    8234:	79 00       	.word	0x0079	; ????
    8236:	81 00       	.word	0x0081	; ????
    8238:	88 00       	.word	0x0088	; ????
    823a:	90 00       	.word	0x0090	; ????
    823c:	99 00       	.word	0x0099	; ????
    823e:	a2 00       	.word	0x00a2	; ????
    8240:	ac 00       	.word	0x00ac	; ????
    8242:	b6 00       	.word	0x00b6	; ????
    8244:	c1 00       	.word	0x00c1	; ????
    8246:	cc 00       	.word	0x00cc	; ????
    8248:	d8 00       	.word	0x00d8	; ????
    824a:	e5 00       	.word	0x00e5	; ????
    824c:	f3 00       	.word	0x00f3	; ????
    824e:	01 01       	movw	r0, r2
    8250:	10 01       	movw	r2, r0
    8252:	21 01       	movw	r4, r2
    8254:	32 01       	movw	r6, r4
    8256:	44 01       	movw	r8, r8
    8258:	57 01       	movw	r10, r14
    825a:	6c 01       	movw	r12, r24
    825c:	81 01       	movw	r16, r2
    825e:	98 01       	movw	r18, r16
    8260:	b0 01       	movw	r22, r0
    8262:	ca 01       	movw	r24, r20
    8264:	e5 01       	movw	r28, r10
    8266:	02 02       	muls	r16, r18
    8268:	21 02       	muls	r18, r17
    826a:	41 02       	muls	r20, r17
    826c:	64 02       	muls	r22, r20
    826e:	88 02       	muls	r24, r24
    8270:	ae 02       	muls	r26, r30
    8272:	d7 02       	muls	r29, r23
    8274:	03 03       	mulsu	r16, r19
    8276:	30 03       	mulsu	r19, r16
    8278:	61 03       	mulsu	r22, r17
    827a:	94 03       	fmuls	r17, r20
    827c:	cb 03       	fmulsu	r20, r19
    827e:	05 04       	cpc	r0, r5
    8280:	42 04       	cpc	r4, r2
    8282:	83 04       	cpc	r8, r3
    8284:	c7 04       	cpc	r12, r7
    8286:	10 05       	cpc	r17, r0
    8288:	5d 05       	cpc	r21, r13
    828a:	af 05       	cpc	r26, r15
    828c:	05 06       	cpc	r0, r21
    828e:	61 06       	cpc	r6, r17
    8290:	c2 06       	cpc	r12, r18
    8292:	29 07       	cpc	r18, r25
    8294:	96 07       	cpc	r25, r22
    8296:	09 08       	sbc	r0, r9
    8298:	83 08       	sbc	r8, r3
    829a:	05 09       	sbc	r16, r5
    829c:	8e 09       	sbc	r24, r14
    829e:	20 0a       	sbc	r2, r16
    82a0:	ba 0a       	sbc	r11, r26
    82a2:	5d 0b       	sbc	r21, r29
    82a4:	0a 0c       	add	r0, r10
    82a6:	c1 0c       	add	r12, r1
    82a8:	84 0d       	add	r24, r4
    82aa:	51 0e       	add	r5, r17
    82ac:	2b 0f       	add	r18, r27
    82ae:	12 10       	cpse	r1, r2
    82b0:	07 11       	cpse	r16, r7
    82b2:	0a 12       	cpse	r0, r26
    82b4:	1d 13       	cpse	r17, r29
    82b6:	40 14       	cp	r4, r0
    82b8:	74 15       	cp	r23, r4
    82ba:	ba 16       	cp	r11, r26
    82bc:	14 18       	sub	r1, r4
    82be:	83 19       	sub	r24, r3
    82c0:	07 1b       	sub	r16, r23
    82c2:	a3 1c       	adc	r10, r3
    82c4:	57 1e       	adc	r5, r23
    82c6:	24 20       	and	r2, r4
    82c8:	0e 22       	and	r0, r30
    82ca:	14 24       	eor	r1, r4
    82cc:	39 26       	eor	r3, r25
    82ce:	7f 28       	or	r7, r15
    82d0:	e8 2a       	or	r14, r24
    82d2:	75 2d       	mov	r23, r5
    82d4:	29 30       	cpi	r18, 0x09	; 9
    82d6:	06 33       	cpi	r16, 0x36	; 54
    82d8:	0f 36       	cpi	r16, 0x6F	; 111
    82da:	45 39       	cpi	r20, 0x95	; 149
    82dc:	ad 3c       	cpi	r26, 0xCD	; 205
    82de:	49 40       	sbci	r20, 0x09	; 9
    82e0:	1b 44       	sbci	r17, 0x4B	; 75
    82e2:	28 48       	sbci	r18, 0x88	; 136
    82e4:	73 4c       	sbci	r23, 0xC3	; 195
    82e6:	fe 50       	subi	r31, 0x0E	; 14
    82e8:	cf 55       	subi	r28, 0x5F	; 95
    82ea:	ea 5a       	subi	r30, 0xAA	; 170
    82ec:	51 60       	ori	r21, 0x01	; 1
    82ee:	0c 66       	ori	r16, 0x6C	; 108
    82f0:	1d 6c       	ori	r17, 0xCD	; 205
    82f2:	8b 72       	andi	r24, 0x2B	; 43
    82f4:	5a 79       	andi	r21, 0x9A	; 154
    82f6:	92 80       	ldd	r9, Z+2	; 0x02
    82f8:	37 88       	ldd	r3, Z+23	; 0x17
    82fa:	50 90 e5 98 	lds	r5, 0x98E5
    82fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8300:	9f ab       	std	Y+55, r25	; 0x37
    8302:	d3 b5       	in	r29, 0x23	; 35
    8304:	a3 c0       	rjmp	.+326    	; 0x844c <waves+0x4c>
	...

00008400 <waves>:
    8400:	00 03       	mulsu	r16, r16
    8402:	06 09       	sbc	r16, r6
    8404:	0c 10       	cpse	r0, r12
    8406:	13 16       	cp	r1, r19
    8408:	19 1c       	adc	r1, r9
    840a:	1f 22       	and	r1, r31
    840c:	25 28       	or	r2, r5
    840e:	2b 2e       	mov	r2, r27
    8410:	31 33       	cpi	r19, 0x31	; 49
    8412:	36 39       	cpi	r19, 0x96	; 150
    8414:	3c 3f       	cpi	r19, 0xFC	; 252
    8416:	41 44       	sbci	r20, 0x41	; 65
    8418:	47 49       	sbci	r20, 0x97	; 151
    841a:	4c 4e       	sbci	r20, 0xEC	; 236
    841c:	51 53       	subi	r21, 0x31	; 49
    841e:	55 58       	subi	r21, 0x85	; 133
    8420:	5a 5c       	subi	r21, 0xCA	; 202
    8422:	5e 60       	ori	r21, 0x0E	; 14
    8424:	62 64       	ori	r22, 0x42	; 66
    8426:	66 68       	ori	r22, 0x86	; 134
    8428:	6a 6b       	ori	r22, 0xBA	; 186
    842a:	6d 6f       	ori	r22, 0xFD	; 253
    842c:	70 71       	andi	r23, 0x10	; 16
    842e:	73 74       	andi	r23, 0x43	; 67
    8430:	75 76       	andi	r23, 0x65	; 101
    8432:	78 79       	andi	r23, 0x98	; 152
    8434:	7a 7a       	andi	r23, 0xAA	; 170
    8436:	7b 7c       	andi	r23, 0xCB	; 203
    8438:	7d 7d       	andi	r23, 0xDD	; 221
    843a:	7e 7e       	andi	r23, 0xEE	; 238
    843c:	7e 7f       	andi	r23, 0xFE	; 254
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7e 7e       	andi	r23, 0xEE	; 238
    8446:	7e 7d       	andi	r23, 0xDE	; 222
    8448:	7d 7c       	andi	r23, 0xCD	; 205
    844a:	7b 7a       	andi	r23, 0xAB	; 171
    844c:	7a 79       	andi	r23, 0x9A	; 154
    844e:	78 76       	andi	r23, 0x68	; 104
    8450:	75 74       	andi	r23, 0x45	; 69
    8452:	73 71       	andi	r23, 0x13	; 19
    8454:	70 6f       	ori	r23, 0xF0	; 240
    8456:	6d 6b       	ori	r22, 0xBD	; 189
    8458:	6a 68       	ori	r22, 0x8A	; 138
    845a:	66 64       	ori	r22, 0x46	; 70
    845c:	62 60       	ori	r22, 0x02	; 2
    845e:	5e 5c       	subi	r21, 0xCE	; 206
    8460:	5a 58       	subi	r21, 0x8A	; 138
    8462:	55 53       	subi	r21, 0x35	; 53
    8464:	51 4e       	sbci	r21, 0xE1	; 225
    8466:	4c 49       	sbci	r20, 0x9C	; 156
    8468:	47 44       	sbci	r20, 0x47	; 71
    846a:	41 3f       	cpi	r20, 0xF1	; 241
    846c:	3c 39       	cpi	r19, 0x9C	; 156
    846e:	36 33       	cpi	r19, 0x36	; 54
    8470:	31 2e       	mov	r3, r17
    8472:	2b 28       	or	r2, r11
    8474:	25 22       	and	r2, r21
    8476:	1f 1c       	adc	r1, r15
    8478:	19 16       	cp	r1, r25
    847a:	13 10       	cpse	r1, r3
    847c:	0c 09       	sbc	r16, r12
    847e:	06 03       	mulsu	r16, r22
    8480:	00 fd       	sbrc	r16, 0
    8482:	fa f7       	brpl	.-2      	; 0x8482 <waves+0x82>
    8484:	f4 f0       	brlt	.+60     	; 0x84c2 <waves+0xc2>
    8486:	ed ea       	ldi	r30, 0xAD	; 173
    8488:	e7 e4       	ldi	r30, 0x47	; 71
    848a:	e1 de       	rcall	.-574    	; 0x824e <steptable+0x46>
    848c:	db d8       	rcall	.-3658   	; 0x7644 <ReadButtons+0x60>
    848e:	d5 d2       	rcall	.+1450   	; 0x8a3a <waves+0x63a>
    8490:	cf cd       	rjmp	.-1122   	; 0x8030 <ProcessMusic+0x328>
    8492:	ca c7       	rjmp	.+3988   	; 0x9428 <wifiGetPBT+0x38>
    8494:	c4 c1       	rjmp	.+904    	; 0x881e <waves+0x41e>
    8496:	bf bc       	out	0x2f, r11	; 47
    8498:	b9 b7       	in	r27, 0x39	; 57
    849a:	b4 b2       	in	r11, 0x14	; 20
    849c:	af ad       	ldd	r26, Y+63	; 0x3f
    849e:	ab a8       	ldd	r10, Y+51	; 0x33
    84a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    84a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    84a4:	9e 9c       	mul	r9, r14
    84a6:	9a 98       	cbi	0x13, 2	; 19
    84a8:	96 95       	lsr	r25
    84aa:	93 91       	.word	0x9193	; ????
    84ac:	90 8f       	std	Z+24, r25	; 0x18
    84ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    84b0:	8b 8a       	std	Y+19, r8	; 0x13
    84b2:	88 87       	std	Y+8, r24	; 0x08
    84b4:	86 86       	std	Z+14, r8	; 0x0e
    84b6:	85 84       	ldd	r8, Z+13	; 0x0d
    84b8:	83 83       	std	Z+3, r24	; 0x03
    84ba:	82 82       	std	Z+2, r8	; 0x02
    84bc:	82 81       	ldd	r24, Z+2	; 0x02
    84be:	81 81       	ldd	r24, Z+1	; 0x01
    84c0:	81 81       	ldd	r24, Z+1	; 0x01
    84c2:	81 81       	ldd	r24, Z+1	; 0x01
    84c4:	82 82       	std	Z+2, r8	; 0x02
    84c6:	82 83       	std	Z+2, r24	; 0x02
    84c8:	83 84       	ldd	r8, Z+11	; 0x0b
    84ca:	85 86       	std	Z+13, r8	; 0x0d
    84cc:	86 87       	std	Z+14, r24	; 0x0e
    84ce:	88 8a       	std	Y+16, r8	; 0x10
    84d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    84d2:	8d 8f       	std	Y+29, r24	; 0x1d
    84d4:	90 91 93 95 	lds	r25, 0x9593
    84d8:	96 98       	cbi	0x12, 6	; 18
    84da:	9a 9c       	mul	r9, r10
    84dc:	9e a0       	ldd	r9, Y+38	; 0x26
    84de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    84e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    84e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    84e4:	af b2       	in	r10, 0x1f	; 31
    84e6:	b4 b7       	in	r27, 0x34	; 52
    84e8:	b9 bc       	out	0x29, r11	; 41
    84ea:	bf c1       	rjmp	.+894    	; 0x886a <waves+0x46a>
    84ec:	c4 c7       	rjmp	.+3976   	; 0x9476 <wifiRequestP+0x12>
    84ee:	ca cd       	rjmp	.-1132   	; 0x8084 <ProcessMusic+0x37c>
    84f0:	cf d2       	rcall	.+1438   	; 0x8a90 <waves+0x690>
    84f2:	d5 d8       	rcall	.-3670   	; 0x769e <FormatEeprom+0x2e>
    84f4:	db de       	rcall	.-586    	; 0x82ac <steptable+0xa4>
    84f6:	e1 e4       	ldi	r30, 0x41	; 65
    84f8:	e7 ea       	ldi	r30, 0xA7	; 167
    84fa:	ed f0       	brhs	.+58     	; 0x8536 <waves+0x136>
    84fc:	f4 f7       	brge	.-4      	; 0x84fa <waves+0xfa>
    84fe:	fa fd       	.word	0xfdfa	; ????
    8500:	80 81       	ld	r24, Z
    8502:	82 83       	std	Z+2, r24	; 0x02
    8504:	84 85       	ldd	r24, Z+12	; 0x0c
    8506:	86 87       	std	Z+14, r24	; 0x0e
    8508:	88 89       	ldd	r24, Y+16	; 0x10
    850a:	8a 8b       	std	Y+18, r24	; 0x12
    850c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    850e:	8e 8f       	std	Y+30, r24	; 0x1e
    8510:	90 91 92 93 	lds	r25, 0x9392
    8514:	94 95       	.word	0x9594	; ????
    8516:	96 97       	sbiw	r26, 0x26	; 38
    8518:	98 99       	sbic	0x13, 0	; 19
    851a:	9a 9b       	sbis	0x13, 2	; 19
    851c:	9c 9d       	mul	r25, r12
    851e:	9e 9f       	mul	r25, r30
    8520:	a0 a1       	ldd	r26, Z+32	; 0x20
    8522:	a2 a3       	std	Z+34, r26	; 0x22
    8524:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8526:	a6 a7       	std	Z+46, r26	; 0x2e
    8528:	a8 a9       	ldd	r26, Y+48	; 0x30
    852a:	aa ab       	std	Y+50, r26	; 0x32
    852c:	ac ad       	ldd	r26, Y+60	; 0x3c
    852e:	ae af       	std	Y+62, r26	; 0x3e
    8530:	b0 b1       	in	r27, 0x00	; 0
    8532:	b2 b3       	in	r27, 0x12	; 18
    8534:	b4 b5       	in	r27, 0x24	; 36
    8536:	b6 b7       	in	r27, 0x36	; 54
    8538:	b8 b9       	out	0x08, r27	; 8
    853a:	ba bb       	out	0x1a, r27	; 26
    853c:	bc bd       	out	0x2c, r27	; 44
    853e:	be bf       	out	0x3e, r27	; 62
    8540:	c0 c1       	rjmp	.+896    	; 0x88c2 <waves+0x4c2>
    8542:	c2 c3       	rjmp	.+1924   	; 0x8cc8 <waves+0x8c8>
    8544:	c4 c5       	rjmp	.+2952   	; 0x90ce <InitializeVideoMode+0x12>
    8546:	c6 c7       	rjmp	.+3980   	; 0x94d4 <wifiRequestPT+0x28>
    8548:	c8 c9       	rjmp	.-3184   	; 0x78da <UartSendChar+0x16>
    854a:	ca cb       	rjmp	.-2156   	; 0x7ce0 <TriggerNote+0x58>
    854c:	cc cd       	rjmp	.-1128   	; 0x80e6 <ProcessMusic+0x3de>
    854e:	ce cf       	rjmp	.-100    	; 0x84ec <waves+0xec>
    8550:	d0 d1       	rcall	.+928    	; 0x88f2 <waves+0x4f2>
    8552:	d2 d3       	rcall	.+1956   	; 0x8cf8 <waves+0x8f8>
    8554:	d4 d5       	rcall	.+2984   	; 0x90fe <DrawMap+0x26>
    8556:	d6 d7       	rcall	.+4012   	; 0x9504 <initWifi+0x1a>
    8558:	d8 d9       	rcall	.-3152   	; 0x790a <GetPrngNumber+0x14>
    855a:	da db       	rcall	.-2124   	; 0x7d10 <ProcessMusic+0x8>
    855c:	dc dd       	rcall	.-1096   	; 0x8116 <ProcessMusic+0x40e>
    855e:	de df       	rcall	.-68     	; 0x851c <waves+0x11c>
    8560:	e0 e1       	ldi	r30, 0x10	; 16
    8562:	e2 e3       	ldi	r30, 0x32	; 50
    8564:	e4 e5       	ldi	r30, 0x54	; 84
    8566:	e6 e7       	ldi	r30, 0x76	; 118
    8568:	e8 e9       	ldi	r30, 0x98	; 152
    856a:	ea eb       	ldi	r30, 0xBA	; 186
    856c:	ec ed       	ldi	r30, 0xDC	; 220
    856e:	ee ef       	ldi	r30, 0xFE	; 254
    8570:	f0 f1       	brcs	.+124    	; 0x85ee <waves+0x1ee>
    8572:	f2 f3       	brmi	.-4      	; 0x8570 <waves+0x170>
    8574:	f4 f5       	brge	.+124    	; 0x85f2 <waves+0x1f2>
    8576:	f6 f7       	brtc	.-4      	; 0x8574 <waves+0x174>
    8578:	f8 f9       	.word	0xf9f8	; ????
    857a:	fa fb       	.word	0xfbfa	; ????
    857c:	fc fd       	.word	0xfdfc	; ????
    857e:	fe ff       	.word	0xfffe	; ????
    8580:	00 01       	movw	r0, r0
    8582:	02 03       	mulsu	r16, r18
    8584:	04 05       	cpc	r16, r4
    8586:	06 07       	cpc	r16, r22
    8588:	08 09       	sbc	r16, r8
    858a:	0a 0b       	sbc	r16, r26
    858c:	0c 0d       	add	r16, r12
    858e:	0e 0f       	add	r16, r30
    8590:	10 11       	cpse	r17, r0
    8592:	12 13       	cpse	r17, r18
    8594:	14 15       	cp	r17, r4
    8596:	16 17       	cp	r17, r22
    8598:	18 19       	sub	r17, r8
    859a:	1a 1b       	sub	r17, r26
    859c:	1c 1d       	adc	r17, r12
    859e:	1e 1f       	adc	r17, r30
    85a0:	20 21       	and	r18, r0
    85a2:	22 23       	and	r18, r18
    85a4:	24 25       	eor	r18, r4
    85a6:	26 27       	eor	r18, r22
    85a8:	28 29       	or	r18, r8
    85aa:	2a 2b       	or	r18, r26
    85ac:	2c 2d       	mov	r18, r12
    85ae:	2e 2f       	mov	r18, r30
    85b0:	30 31       	cpi	r19, 0x10	; 16
    85b2:	32 33       	cpi	r19, 0x32	; 50
    85b4:	34 35       	cpi	r19, 0x54	; 84
    85b6:	36 37       	cpi	r19, 0x76	; 118
    85b8:	38 39       	cpi	r19, 0x98	; 152
    85ba:	3a 3b       	cpi	r19, 0xBA	; 186
    85bc:	3c 3d       	cpi	r19, 0xDC	; 220
    85be:	3e 3f       	cpi	r19, 0xFE	; 254
    85c0:	40 41       	sbci	r20, 0x10	; 16
    85c2:	42 43       	sbci	r20, 0x32	; 50
    85c4:	44 45       	sbci	r20, 0x54	; 84
    85c6:	46 47       	sbci	r20, 0x76	; 118
    85c8:	48 49       	sbci	r20, 0x98	; 152
    85ca:	4a 4b       	sbci	r20, 0xBA	; 186
    85cc:	4c 4d       	sbci	r20, 0xDC	; 220
    85ce:	4e 4f       	sbci	r20, 0xFE	; 254
    85d0:	50 51       	subi	r21, 0x10	; 16
    85d2:	52 53       	subi	r21, 0x32	; 50
    85d4:	54 55       	subi	r21, 0x54	; 84
    85d6:	56 57       	subi	r21, 0x76	; 118
    85d8:	58 59       	subi	r21, 0x98	; 152
    85da:	5a 5b       	subi	r21, 0xBA	; 186
    85dc:	5c 5d       	subi	r21, 0xDC	; 220
    85de:	5e 5f       	subi	r21, 0xFE	; 254
    85e0:	60 61       	ori	r22, 0x10	; 16
    85e2:	62 63       	ori	r22, 0x32	; 50
    85e4:	64 65       	ori	r22, 0x54	; 84
    85e6:	66 67       	ori	r22, 0x76	; 118
    85e8:	68 69       	ori	r22, 0x98	; 152
    85ea:	6a 6b       	ori	r22, 0xBA	; 186
    85ec:	6c 6d       	ori	r22, 0xDC	; 220
    85ee:	6e 6f       	ori	r22, 0xFE	; 254
    85f0:	70 71       	andi	r23, 0x10	; 16
    85f2:	72 73       	andi	r23, 0x32	; 50
    85f4:	74 75       	andi	r23, 0x54	; 84
    85f6:	76 77       	andi	r23, 0x76	; 118
    85f8:	78 79       	andi	r23, 0x98	; 152
    85fa:	7a 7b       	andi	r23, 0xBA	; 186
    85fc:	7c 7d       	andi	r23, 0xDC	; 220
    85fe:	7e 7f       	andi	r23, 0xFE	; 254
    8600:	00 02       	muls	r16, r16
    8602:	04 06       	cpc	r0, r20
    8604:	08 0a       	sbc	r0, r24
    8606:	0c 0e       	add	r0, r28
    8608:	10 12       	cpse	r1, r16
    860a:	14 16       	cp	r1, r20
    860c:	18 1a       	sub	r1, r24
    860e:	1c 1e       	adc	r1, r28
    8610:	20 22       	and	r2, r16
    8612:	24 26       	eor	r2, r20
    8614:	28 2a       	or	r2, r24
    8616:	2c 2e       	mov	r2, r28
    8618:	30 32       	cpi	r19, 0x20	; 32
    861a:	34 36       	cpi	r19, 0x64	; 100
    861c:	38 3a       	cpi	r19, 0xA8	; 168
    861e:	3c 3e       	cpi	r19, 0xEC	; 236
    8620:	40 42       	sbci	r20, 0x20	; 32
    8622:	44 46       	sbci	r20, 0x64	; 100
    8624:	48 4a       	sbci	r20, 0xA8	; 168
    8626:	4c 4e       	sbci	r20, 0xEC	; 236
    8628:	50 52       	subi	r21, 0x20	; 32
    862a:	54 56       	subi	r21, 0x64	; 100
    862c:	58 5a       	subi	r21, 0xA8	; 168
    862e:	5c 5e       	subi	r21, 0xEC	; 236
    8630:	60 62       	ori	r22, 0x20	; 32
    8632:	64 66       	ori	r22, 0x64	; 100
    8634:	68 6a       	ori	r22, 0xA8	; 168
    8636:	6c 6e       	ori	r22, 0xEC	; 236
    8638:	70 72       	andi	r23, 0x20	; 32
    863a:	74 76       	andi	r23, 0x64	; 100
    863c:	78 7a       	andi	r23, 0xA8	; 168
    863e:	7c 7e       	andi	r23, 0xEC	; 236
    8640:	7f 7d       	andi	r23, 0xDF	; 223
    8642:	7b 79       	andi	r23, 0x9B	; 155
    8644:	77 75       	andi	r23, 0x57	; 87
    8646:	73 71       	andi	r23, 0x13	; 19
    8648:	6f 6d       	ori	r22, 0xDF	; 223
    864a:	6b 69       	ori	r22, 0x9B	; 155
    864c:	67 65       	ori	r22, 0x57	; 87
    864e:	63 61       	ori	r22, 0x13	; 19
    8650:	5f 5d       	subi	r21, 0xDF	; 223
    8652:	5b 59       	subi	r21, 0x9B	; 155
    8654:	57 55       	subi	r21, 0x57	; 87
    8656:	53 51       	subi	r21, 0x13	; 19
    8658:	4f 4d       	sbci	r20, 0xDF	; 223
    865a:	4b 49       	sbci	r20, 0x9B	; 155
    865c:	47 45       	sbci	r20, 0x57	; 87
    865e:	43 41       	sbci	r20, 0x13	; 19
    8660:	3f 3d       	cpi	r19, 0xDF	; 223
    8662:	3b 39       	cpi	r19, 0x9B	; 155
    8664:	37 35       	cpi	r19, 0x57	; 87
    8666:	33 31       	cpi	r19, 0x13	; 19
    8668:	2f 2d       	mov	r18, r15
    866a:	2b 29       	or	r18, r11
    866c:	27 25       	eor	r18, r7
    866e:	23 21       	and	r18, r3
    8670:	1f 1d       	adc	r17, r15
    8672:	1b 19       	sub	r17, r11
    8674:	17 15       	cp	r17, r7
    8676:	13 11       	cpse	r17, r3
    8678:	0f 0d       	add	r16, r15
    867a:	0b 09       	sbc	r16, r11
    867c:	07 05       	cpc	r16, r7
    867e:	03 01       	movw	r0, r6
    8680:	ff fd       	.word	0xfdff	; ????
    8682:	fb f9       	.word	0xf9fb	; ????
    8684:	f7 f5       	brid	.+124    	; 0x8702 <waves+0x302>
    8686:	f3 f1       	brvs	.+124    	; 0x8704 <waves+0x304>
    8688:	ef ed       	ldi	r30, 0xDF	; 223
    868a:	eb e9       	ldi	r30, 0x9B	; 155
    868c:	e7 e5       	ldi	r30, 0x57	; 87
    868e:	e3 e1       	ldi	r30, 0x13	; 19
    8690:	df dd       	rcall	.-1090   	; 0x8250 <steptable+0x48>
    8692:	db d9       	rcall	.-3146   	; 0x7a4a <PatchCommand08+0x14>
    8694:	d7 d5       	rcall	.+2990   	; 0x9244 <doFade+0x2>
    8696:	d3 d1       	rcall	.+934    	; 0x8a3e <waves+0x63e>
    8698:	cf cd       	rjmp	.-1122   	; 0x8238 <steptable+0x30>
    869a:	cb c9       	rjmp	.-3178   	; 0x7a32 <PatchCommand04+0xc>
    869c:	c7 c5       	rjmp	.+2958   	; 0x922c <WaitVsync+0x18>
    869e:	c3 c1       	rjmp	.+902    	; 0x8a26 <waves+0x626>
    86a0:	bf bd       	out	0x2f, r27	; 47
    86a2:	bb b9       	out	0x0b, r27	; 11
    86a4:	b7 b5       	in	r27, 0x27	; 39
    86a6:	b3 b1       	in	r27, 0x03	; 3
    86a8:	af ad       	ldd	r26, Y+63	; 0x3f
    86aa:	ab a9       	ldd	r26, Y+51	; 0x33
    86ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    86ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    86b0:	9f 9d       	mul	r25, r15
    86b2:	9b 99       	sbic	0x13, 3	; 19
    86b4:	97 95       	ror	r25
    86b6:	93 91       	.word	0x9193	; ????
    86b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    86ba:	8b 89       	ldd	r24, Y+19	; 0x13
    86bc:	87 85       	ldd	r24, Z+15	; 0x0f
    86be:	83 81       	ldd	r24, Z+3	; 0x03
    86c0:	80 82       	st	Z, r8
    86c2:	84 86       	std	Z+12, r8	; 0x0c
    86c4:	88 8a       	std	Y+16, r8	; 0x10
    86c6:	8c 8e       	std	Y+28, r8	; 0x1c
    86c8:	90 92 94 96 	sts	0x9694, r9
    86cc:	98 9a       	sbi	0x13, 0	; 19
    86ce:	9c 9e       	mul	r9, r28
    86d0:	a0 a2       	std	Z+32, r10	; 0x20
    86d2:	a4 a6       	std	Z+44, r10	; 0x2c
    86d4:	a8 aa       	std	Y+48, r10	; 0x30
    86d6:	ac ae       	std	Y+60, r10	; 0x3c
    86d8:	b0 b2       	in	r11, 0x10	; 16
    86da:	b4 b6       	in	r11, 0x34	; 52
    86dc:	b8 ba       	out	0x18, r11	; 24
    86de:	bc be       	out	0x3c, r11	; 60
    86e0:	c0 c2       	rjmp	.+1408   	; 0x8c62 <waves+0x862>
    86e2:	c4 c6       	rjmp	.+3464   	; 0x946c <wifiRequestP+0x8>
    86e4:	c8 ca       	rjmp	.-2672   	; 0x7c76 <TriggerFx+0x7e>
    86e6:	cc ce       	rjmp	.-616    	; 0x8480 <waves+0x80>
    86e8:	d0 d2       	rcall	.+1440   	; 0x8c8a <waves+0x88a>
    86ea:	d4 d6       	rcall	.+3496   	; 0x9494 <wifiRequest+0xc>
    86ec:	d8 da       	rcall	.-2640   	; 0x7c9e <TriggerNote+0x16>
    86ee:	dc de       	rcall	.-584    	; 0x84a8 <waves+0xa8>
    86f0:	e0 e2       	ldi	r30, 0x20	; 32
    86f2:	e4 e6       	ldi	r30, 0x64	; 100
    86f4:	e8 ea       	ldi	r30, 0xA8	; 168
    86f6:	ec ee       	ldi	r30, 0xEC	; 236
    86f8:	f0 f2       	brcs	.-68     	; 0x86b6 <waves+0x2b6>
    86fa:	f4 f6       	brge	.-68     	; 0x86b8 <waves+0x2b8>
    86fc:	f8 fa       	.word	0xfaf8	; ????
    86fe:	fc fe       	.word	0xfefc	; ????
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	80 80       	ld	r8, Z
    8742:	80 80       	ld	r8, Z
    8744:	80 80       	ld	r8, Z
    8746:	80 80       	ld	r8, Z
    8748:	80 80       	ld	r8, Z
    874a:	80 80       	ld	r8, Z
    874c:	80 80       	ld	r8, Z
    874e:	80 80       	ld	r8, Z
    8750:	80 80       	ld	r8, Z
    8752:	80 80       	ld	r8, Z
    8754:	80 80       	ld	r8, Z
    8756:	80 80       	ld	r8, Z
    8758:	80 80       	ld	r8, Z
    875a:	80 80       	ld	r8, Z
    875c:	80 80       	ld	r8, Z
    875e:	80 80       	ld	r8, Z
    8760:	80 80       	ld	r8, Z
    8762:	80 80       	ld	r8, Z
    8764:	80 80       	ld	r8, Z
    8766:	80 80       	ld	r8, Z
    8768:	80 80       	ld	r8, Z
    876a:	80 80       	ld	r8, Z
    876c:	80 80       	ld	r8, Z
    876e:	80 80       	ld	r8, Z
    8770:	80 80       	ld	r8, Z
    8772:	80 80       	ld	r8, Z
    8774:	80 80       	ld	r8, Z
    8776:	80 80       	ld	r8, Z
    8778:	80 80       	ld	r8, Z
    877a:	80 80       	ld	r8, Z
    877c:	80 80       	ld	r8, Z
    877e:	80 80       	ld	r8, Z
    8780:	80 80       	ld	r8, Z
    8782:	80 80       	ld	r8, Z
    8784:	80 80       	ld	r8, Z
    8786:	80 80       	ld	r8, Z
    8788:	80 80       	ld	r8, Z
    878a:	80 80       	ld	r8, Z
    878c:	80 80       	ld	r8, Z
    878e:	80 80       	ld	r8, Z
    8790:	80 80       	ld	r8, Z
    8792:	80 80       	ld	r8, Z
    8794:	80 80       	ld	r8, Z
    8796:	80 80       	ld	r8, Z
    8798:	80 80       	ld	r8, Z
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7f 7f       	andi	r23, 0xFF	; 255
    8848:	7f 7f       	andi	r23, 0xFF	; 255
    884a:	7f 7f       	andi	r23, 0xFF	; 255
    884c:	7f 7f       	andi	r23, 0xFF	; 255
    884e:	7f 7f       	andi	r23, 0xFF	; 255
    8850:	7f 7f       	andi	r23, 0xFF	; 255
    8852:	7f 7f       	andi	r23, 0xFF	; 255
    8854:	7f 7f       	andi	r23, 0xFF	; 255
    8856:	7f 7f       	andi	r23, 0xFF	; 255
    8858:	7f 7f       	andi	r23, 0xFF	; 255
    885a:	7f 7f       	andi	r23, 0xFF	; 255
    885c:	7f 7f       	andi	r23, 0xFF	; 255
    885e:	7f 7f       	andi	r23, 0xFF	; 255
    8860:	7f 7f       	andi	r23, 0xFF	; 255
    8862:	7f 7f       	andi	r23, 0xFF	; 255
    8864:	7f 7f       	andi	r23, 0xFF	; 255
    8866:	7f 7f       	andi	r23, 0xFF	; 255
    8868:	7f 7f       	andi	r23, 0xFF	; 255
    886a:	7f 7f       	andi	r23, 0xFF	; 255
    886c:	7f 7f       	andi	r23, 0xFF	; 255
    886e:	7f 7f       	andi	r23, 0xFF	; 255
    8870:	7f 7f       	andi	r23, 0xFF	; 255
    8872:	7f 7f       	andi	r23, 0xFF	; 255
    8874:	7f 7f       	andi	r23, 0xFF	; 255
    8876:	7f 7f       	andi	r23, 0xFF	; 255
    8878:	7f 7f       	andi	r23, 0xFF	; 255
    887a:	7f 7f       	andi	r23, 0xFF	; 255
    887c:	7f 7f       	andi	r23, 0xFF	; 255
    887e:	7f 7f       	andi	r23, 0xFF	; 255
    8880:	80 80       	ld	r8, Z
    8882:	80 80       	ld	r8, Z
    8884:	80 80       	ld	r8, Z
    8886:	80 80       	ld	r8, Z
    8888:	80 80       	ld	r8, Z
    888a:	80 80       	ld	r8, Z
    888c:	80 80       	ld	r8, Z
    888e:	80 80       	ld	r8, Z
    8890:	80 80       	ld	r8, Z
    8892:	80 80       	ld	r8, Z
    8894:	80 80       	ld	r8, Z
    8896:	80 80       	ld	r8, Z
    8898:	80 80       	ld	r8, Z
    889a:	80 80       	ld	r8, Z
    889c:	80 80       	ld	r8, Z
    889e:	80 80       	ld	r8, Z
    88a0:	80 80       	ld	r8, Z
    88a2:	80 80       	ld	r8, Z
    88a4:	80 80       	ld	r8, Z
    88a6:	80 80       	ld	r8, Z
    88a8:	80 80       	ld	r8, Z
    88aa:	80 80       	ld	r8, Z
    88ac:	80 80       	ld	r8, Z
    88ae:	80 80       	ld	r8, Z
    88b0:	80 80       	ld	r8, Z
    88b2:	80 80       	ld	r8, Z
    88b4:	80 80       	ld	r8, Z
    88b6:	80 80       	ld	r8, Z
    88b8:	80 80       	ld	r8, Z
    88ba:	80 80       	ld	r8, Z
    88bc:	80 80       	ld	r8, Z
    88be:	80 80       	ld	r8, Z
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z
    8900:	7f 7f       	andi	r23, 0xFF	; 255
    8902:	7f 7f       	andi	r23, 0xFF	; 255
    8904:	7f 7f       	andi	r23, 0xFF	; 255
    8906:	7f 7f       	andi	r23, 0xFF	; 255
    8908:	7f 7f       	andi	r23, 0xFF	; 255
    890a:	7f 7f       	andi	r23, 0xFF	; 255
    890c:	7f 7f       	andi	r23, 0xFF	; 255
    890e:	7f 7f       	andi	r23, 0xFF	; 255
    8910:	7f 7f       	andi	r23, 0xFF	; 255
    8912:	7f 7f       	andi	r23, 0xFF	; 255
    8914:	7f 7f       	andi	r23, 0xFF	; 255
    8916:	7f 7f       	andi	r23, 0xFF	; 255
    8918:	7f 7f       	andi	r23, 0xFF	; 255
    891a:	7f 7f       	andi	r23, 0xFF	; 255
    891c:	7f 7f       	andi	r23, 0xFF	; 255
    891e:	7f 7f       	andi	r23, 0xFF	; 255
    8920:	7f 7f       	andi	r23, 0xFF	; 255
    8922:	7f 7f       	andi	r23, 0xFF	; 255
    8924:	7f 7f       	andi	r23, 0xFF	; 255
    8926:	7f 7f       	andi	r23, 0xFF	; 255
    8928:	7f 7f       	andi	r23, 0xFF	; 255
    892a:	7f 7f       	andi	r23, 0xFF	; 255
    892c:	7f 7f       	andi	r23, 0xFF	; 255
    892e:	7f 7f       	andi	r23, 0xFF	; 255
    8930:	7f 7f       	andi	r23, 0xFF	; 255
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7f       	andi	r23, 0xFF	; 255
    894e:	7f 7f       	andi	r23, 0xFF	; 255
    8950:	7f 7f       	andi	r23, 0xFF	; 255
    8952:	7f 7f       	andi	r23, 0xFF	; 255
    8954:	7f 7f       	andi	r23, 0xFF	; 255
    8956:	7f 7f       	andi	r23, 0xFF	; 255
    8958:	7f 7f       	andi	r23, 0xFF	; 255
    895a:	7f 7f       	andi	r23, 0xFF	; 255
    895c:	7f 7f       	andi	r23, 0xFF	; 255
    895e:	7f 7f       	andi	r23, 0xFF	; 255
    8960:	7f 7f       	andi	r23, 0xFF	; 255
    8962:	7f 7f       	andi	r23, 0xFF	; 255
    8964:	7f 7f       	andi	r23, 0xFF	; 255
    8966:	7f 7f       	andi	r23, 0xFF	; 255
    8968:	7f 7f       	andi	r23, 0xFF	; 255
    896a:	7f 7f       	andi	r23, 0xFF	; 255
    896c:	7f 7f       	andi	r23, 0xFF	; 255
    896e:	7f 7f       	andi	r23, 0xFF	; 255
    8970:	7f 7f       	andi	r23, 0xFF	; 255
    8972:	7f 7f       	andi	r23, 0xFF	; 255
    8974:	7f 7f       	andi	r23, 0xFF	; 255
    8976:	7f 7f       	andi	r23, 0xFF	; 255
    8978:	7f 7f       	andi	r23, 0xFF	; 255
    897a:	7f 7f       	andi	r23, 0xFF	; 255
    897c:	7f 7f       	andi	r23, 0xFF	; 255
    897e:	7f 7f       	andi	r23, 0xFF	; 255
    8980:	7f 7f       	andi	r23, 0xFF	; 255
    8982:	7f 7f       	andi	r23, 0xFF	; 255
    8984:	7f 7f       	andi	r23, 0xFF	; 255
    8986:	7f 7f       	andi	r23, 0xFF	; 255
    8988:	7f 7f       	andi	r23, 0xFF	; 255
    898a:	7f 7f       	andi	r23, 0xFF	; 255
    898c:	7f 7f       	andi	r23, 0xFF	; 255
    898e:	7f 7f       	andi	r23, 0xFF	; 255
    8990:	7f 7f       	andi	r23, 0xFF	; 255
    8992:	7f 7f       	andi	r23, 0xFF	; 255
    8994:	7f 7f       	andi	r23, 0xFF	; 255
    8996:	7f 7f       	andi	r23, 0xFF	; 255
    8998:	7f 7f       	andi	r23, 0xFF	; 255
    899a:	7f 7f       	andi	r23, 0xFF	; 255
    899c:	7f 7f       	andi	r23, 0xFF	; 255
    899e:	7f 7f       	andi	r23, 0xFF	; 255
    89a0:	7f 7f       	andi	r23, 0xFF	; 255
    89a2:	7f 7f       	andi	r23, 0xFF	; 255
    89a4:	7f 7f       	andi	r23, 0xFF	; 255
    89a6:	7f 7f       	andi	r23, 0xFF	; 255
    89a8:	7f 7f       	andi	r23, 0xFF	; 255
    89aa:	7f 7f       	andi	r23, 0xFF	; 255
    89ac:	7f 7f       	andi	r23, 0xFF	; 255
    89ae:	7f 7f       	andi	r23, 0xFF	; 255
    89b0:	7f 7f       	andi	r23, 0xFF	; 255
    89b2:	7f 7f       	andi	r23, 0xFF	; 255
    89b4:	7f 7f       	andi	r23, 0xFF	; 255
    89b6:	7f 7f       	andi	r23, 0xFF	; 255
    89b8:	7f 7f       	andi	r23, 0xFF	; 255
    89ba:	7f 7f       	andi	r23, 0xFF	; 255
    89bc:	7f 7f       	andi	r23, 0xFF	; 255
    89be:	7f 7f       	andi	r23, 0xFF	; 255
    89c0:	80 80       	ld	r8, Z
    89c2:	80 80       	ld	r8, Z
    89c4:	80 80       	ld	r8, Z
    89c6:	80 80       	ld	r8, Z
    89c8:	80 80       	ld	r8, Z
    89ca:	80 80       	ld	r8, Z
    89cc:	80 80       	ld	r8, Z
    89ce:	80 80       	ld	r8, Z
    89d0:	80 80       	ld	r8, Z
    89d2:	80 80       	ld	r8, Z
    89d4:	80 80       	ld	r8, Z
    89d6:	80 80       	ld	r8, Z
    89d8:	80 80       	ld	r8, Z
    89da:	80 80       	ld	r8, Z
    89dc:	80 80       	ld	r8, Z
    89de:	80 80       	ld	r8, Z
    89e0:	80 80       	ld	r8, Z
    89e2:	80 80       	ld	r8, Z
    89e4:	80 80       	ld	r8, Z
    89e6:	80 80       	ld	r8, Z
    89e8:	80 80       	ld	r8, Z
    89ea:	80 80       	ld	r8, Z
    89ec:	80 80       	ld	r8, Z
    89ee:	80 80       	ld	r8, Z
    89f0:	80 80       	ld	r8, Z
    89f2:	80 80       	ld	r8, Z
    89f4:	80 80       	ld	r8, Z
    89f6:	80 80       	ld	r8, Z
    89f8:	80 80       	ld	r8, Z
    89fa:	80 80       	ld	r8, Z
    89fc:	80 80       	ld	r8, Z
    89fe:	80 80       	ld	r8, Z
    8a00:	03 09       	sbc	r16, r3
    8a02:	13 1e       	adc	r1, r19
    8a04:	28 31       	cpi	r18, 0x18	; 24
    8a06:	3a 40       	sbci	r19, 0x0A	; 10
    8a08:	46 4c       	sbci	r20, 0xC6	; 198
    8a0a:	50 54       	subi	r21, 0x40	; 64
    8a0c:	58 5b       	subi	r21, 0xB8	; 184
    8a0e:	5e 61       	ori	r21, 0x1E	; 30
    8a10:	63 65       	ori	r22, 0x53	; 83
    8a12:	67 69       	ori	r22, 0x97	; 151
    8a14:	6b 6c       	ori	r22, 0xCB	; 203
    8a16:	6e 6f       	ori	r22, 0xFE	; 254
    8a18:	70 71       	andi	r23, 0x10	; 16
    8a1a:	72 73       	andi	r23, 0x32	; 50
    8a1c:	74 75       	andi	r23, 0x54	; 84
    8a1e:	76 77       	andi	r23, 0x76	; 118
    8a20:	77 78       	andi	r23, 0x87	; 135
    8a22:	79 79       	andi	r23, 0x99	; 153
    8a24:	7a 7a       	andi	r23, 0xAA	; 170
    8a26:	7b 7b       	andi	r23, 0xBB	; 187
    8a28:	7c 7c       	andi	r23, 0xCC	; 204
    8a2a:	7c 7d       	andi	r23, 0xDC	; 220
    8a2c:	7d 7d       	andi	r23, 0xDD	; 221
    8a2e:	7e 7e       	andi	r23, 0xEE	; 238
    8a30:	7e 7e       	andi	r23, 0xEE	; 238
    8a32:	7f 7f       	andi	r23, 0xFF	; 255
    8a34:	7f 7f       	andi	r23, 0xFF	; 255
    8a36:	7f 7f       	andi	r23, 0xFF	; 255
    8a38:	7f 7f       	andi	r23, 0xFF	; 255
    8a3a:	7f 7f       	andi	r23, 0xFF	; 255
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7f 7f       	andi	r23, 0xFF	; 255
    8a48:	7f 7f       	andi	r23, 0xFF	; 255
    8a4a:	7f 7f       	andi	r23, 0xFF	; 255
    8a4c:	7f 7e       	andi	r23, 0xEF	; 239
    8a4e:	7e 7e       	andi	r23, 0xEE	; 238
    8a50:	7e 7d       	andi	r23, 0xDE	; 222
    8a52:	7d 7d       	andi	r23, 0xDD	; 221
    8a54:	7c 7c       	andi	r23, 0xCC	; 204
    8a56:	7c 7b       	andi	r23, 0xBC	; 188
    8a58:	7b 7a       	andi	r23, 0xAB	; 171
    8a5a:	7a 79       	andi	r23, 0x9A	; 154
    8a5c:	79 78       	andi	r23, 0x89	; 137
    8a5e:	77 77       	andi	r23, 0x77	; 119
    8a60:	76 75       	andi	r23, 0x56	; 86
    8a62:	74 73       	andi	r23, 0x34	; 52
    8a64:	72 71       	andi	r23, 0x12	; 18
    8a66:	70 6f       	ori	r23, 0xF0	; 240
    8a68:	6e 6c       	ori	r22, 0xCE	; 206
    8a6a:	6b 69       	ori	r22, 0x9B	; 155
    8a6c:	67 65       	ori	r22, 0x57	; 87
    8a6e:	63 61       	ori	r22, 0x13	; 19
    8a70:	5e 5b       	subi	r21, 0xBE	; 190
    8a72:	58 54       	subi	r21, 0x48	; 72
    8a74:	50 4c       	sbci	r21, 0xC0	; 192
    8a76:	46 40       	sbci	r20, 0x06	; 6
    8a78:	3a 31       	cpi	r19, 0x1A	; 26
    8a7a:	28 1e       	adc	r2, r24
    8a7c:	13 09       	sbc	r17, r3
    8a7e:	03 00       	.word	0x0003	; ????
    8a80:	c6 cc       	rjmp	.-1652   	; 0x840e <waves+0xe>
    8a82:	d5 db       	rcall	.-2134   	; 0x822e <steptable+0x26>
    8a84:	df e3       	ldi	r29, 0x3F	; 63
    8a86:	e5 e7       	ldi	r30, 0x75	; 117
    8a88:	e9 ea       	ldi	r30, 0xA9	; 169
    8a8a:	eb ec       	ldi	r30, 0xCB	; 203
    8a8c:	ed ee       	ldi	r30, 0xED	; 237
    8a8e:	ef ef       	ldi	r30, 0xFF	; 255
    8a90:	f0 f0       	brcs	.+60     	; 0x8ace <waves+0x6ce>
    8a92:	f0 f1       	brcs	.+124    	; 0x8b10 <waves+0x710>
    8a94:	f1 f1       	breq	.+124    	; 0x8b12 <waves+0x712>
    8a96:	f1 f2       	breq	.-68     	; 0x8a54 <waves+0x654>
    8a98:	f2 f2       	brmi	.-68     	; 0x8a56 <waves+0x656>
    8a9a:	f2 f2       	brmi	.-68     	; 0x8a58 <waves+0x658>
    8a9c:	f2 f2       	brmi	.-68     	; 0x8a5a <waves+0x65a>
    8a9e:	f2 f3       	brmi	.-4      	; 0x8a9c <waves+0x69c>
    8aa0:	f3 f3       	brvs	.-4      	; 0x8a9e <waves+0x69e>
    8aa2:	f3 f3       	brvs	.-4      	; 0x8aa0 <waves+0x6a0>
    8aa4:	f3 f3       	brvs	.-4      	; 0x8aa2 <waves+0x6a2>
    8aa6:	f3 f3       	brvs	.-4      	; 0x8aa4 <waves+0x6a4>
    8aa8:	f3 f3       	brvs	.-4      	; 0x8aa6 <waves+0x6a6>
    8aaa:	f3 f3       	brvs	.-4      	; 0x8aa8 <waves+0x6a8>
    8aac:	f3 f3       	brvs	.-4      	; 0x8aaa <waves+0x6aa>
    8aae:	f3 f3       	brvs	.-4      	; 0x8aac <waves+0x6ac>
    8ab0:	f3 f3       	brvs	.-4      	; 0x8aae <waves+0x6ae>
    8ab2:	f3 f3       	brvs	.-4      	; 0x8ab0 <waves+0x6b0>
    8ab4:	f3 f3       	brvs	.-4      	; 0x8ab2 <waves+0x6b2>
    8ab6:	f3 f3       	brvs	.-4      	; 0x8ab4 <waves+0x6b4>
    8ab8:	f3 f3       	brvs	.-4      	; 0x8ab6 <waves+0x6b6>
    8aba:	f3 f3       	brvs	.-4      	; 0x8ab8 <waves+0x6b8>
    8abc:	f3 f3       	brvs	.-4      	; 0x8aba <waves+0x6ba>
    8abe:	f3 f3       	brvs	.-4      	; 0x8abc <waves+0x6bc>
    8ac0:	f3 f3       	brvs	.-4      	; 0x8abe <waves+0x6be>
    8ac2:	f3 f3       	brvs	.-4      	; 0x8ac0 <waves+0x6c0>
    8ac4:	f3 f3       	brvs	.-4      	; 0x8ac2 <waves+0x6c2>
    8ac6:	f3 f3       	brvs	.-4      	; 0x8ac4 <waves+0x6c4>
    8ac8:	f3 f3       	brvs	.-4      	; 0x8ac6 <waves+0x6c6>
    8aca:	f3 f3       	brvs	.-4      	; 0x8ac8 <waves+0x6c8>
    8acc:	f3 f3       	brvs	.-4      	; 0x8aca <waves+0x6ca>
    8ace:	f3 f3       	brvs	.-4      	; 0x8acc <waves+0x6cc>
    8ad0:	f3 f3       	brvs	.-4      	; 0x8ace <waves+0x6ce>
    8ad2:	f3 f3       	brvs	.-4      	; 0x8ad0 <waves+0x6d0>
    8ad4:	f3 f3       	brvs	.-4      	; 0x8ad2 <waves+0x6d2>
    8ad6:	f3 f3       	brvs	.-4      	; 0x8ad4 <waves+0x6d4>
    8ad8:	f3 f3       	brvs	.-4      	; 0x8ad6 <waves+0x6d6>
    8ada:	f3 f3       	brvs	.-4      	; 0x8ad8 <waves+0x6d8>
    8adc:	f3 f3       	brvs	.-4      	; 0x8ada <waves+0x6da>
    8ade:	f3 f3       	brvs	.-4      	; 0x8adc <waves+0x6dc>
    8ae0:	f2 f2       	brmi	.-68     	; 0x8a9e <waves+0x69e>
    8ae2:	f2 f2       	brmi	.-68     	; 0x8aa0 <waves+0x6a0>
    8ae4:	f2 f2       	brmi	.-68     	; 0x8aa2 <waves+0x6a2>
    8ae6:	f2 f2       	brmi	.-68     	; 0x8aa4 <waves+0x6a4>
    8ae8:	f1 f1       	breq	.+124    	; 0x8b66 <waves+0x766>
    8aea:	f1 f1       	breq	.+124    	; 0x8b68 <waves+0x768>
    8aec:	f0 f0       	brcs	.+60     	; 0x8b2a <waves+0x72a>
    8aee:	f0 ef       	ldi	r31, 0xF0	; 240
    8af0:	ef ee       	ldi	r30, 0xEF	; 239
    8af2:	ed ec       	ldi	r30, 0xCD	; 205
    8af4:	eb ea       	ldi	r30, 0xAB	; 171
    8af6:	e9 e7       	ldi	r30, 0x79	; 121
    8af8:	e5 e3       	ldi	r30, 0x35	; 53
    8afa:	df db       	rcall	.-2114   	; 0x82ba <steptable+0xb2>
    8afc:	d5 cc       	rjmp	.-1622   	; 0x84a8 <waves+0xa8>
    8afe:	c6 00       	.word	0x00c6	; ????
    8b00:	00 28       	or	r0, r0
    8b02:	3d 42       	sbci	r19, 0x2D	; 45
    8b04:	30 2d       	mov	r19, r0
    8b06:	2c 2b       	or	r18, r28
    8b08:	2c 2d       	mov	r18, r12
    8b0a:	2e 2f       	mov	r18, r30
    8b0c:	30 32       	cpi	r19, 0x20	; 32
    8b0e:	33 35       	cpi	r19, 0x53	; 83
    8b10:	37 39       	cpi	r19, 0x97	; 151
    8b12:	3b 3d       	cpi	r19, 0xDB	; 219
    8b14:	3f 41       	sbci	r19, 0x1F	; 31
    8b16:	43 45       	sbci	r20, 0x53	; 83
    8b18:	48 4a       	sbci	r20, 0xA8	; 168
    8b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8b1c:	50 53       	subi	r21, 0x30	; 48
    8b1e:	55 57       	subi	r21, 0x75	; 117
    8b20:	59 5b       	subi	r21, 0xB9	; 185
    8b22:	5d 5f       	subi	r21, 0xFD	; 253
    8b24:	61 63       	ori	r22, 0x31	; 49
    8b26:	65 67       	ori	r22, 0x75	; 117
    8b28:	69 6b       	ori	r22, 0xB9	; 185
    8b2a:	6c 6e       	ori	r22, 0xEC	; 236
    8b2c:	70 71       	andi	r23, 0x10	; 16
    8b2e:	73 74       	andi	r23, 0x43	; 67
    8b30:	75 77       	andi	r23, 0x75	; 117
    8b32:	78 79       	andi	r23, 0x98	; 152
    8b34:	7a 7b       	andi	r23, 0xBA	; 186
    8b36:	7c 7d       	andi	r23, 0xDC	; 220
    8b38:	7d 7e       	andi	r23, 0xED	; 237
    8b3a:	7e 7f       	andi	r23, 0xFE	; 254
    8b3c:	7f 7f       	andi	r23, 0xFF	; 255
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7f 7f       	andi	r23, 0xFF	; 255
    8b46:	7e 7e       	andi	r23, 0xEE	; 238
    8b48:	7d 7d       	andi	r23, 0xDD	; 221
    8b4a:	7c 7b       	andi	r23, 0xBC	; 188
    8b4c:	7a 79       	andi	r23, 0x9A	; 154
    8b4e:	78 77       	andi	r23, 0x78	; 120
    8b50:	75 74       	andi	r23, 0x45	; 69
    8b52:	73 71       	andi	r23, 0x13	; 19
    8b54:	70 6e       	ori	r23, 0xE0	; 224
    8b56:	6c 6b       	ori	r22, 0xBC	; 188
    8b58:	69 67       	ori	r22, 0x79	; 121
    8b5a:	65 63       	ori	r22, 0x35	; 53
    8b5c:	61 5f       	subi	r22, 0xF1	; 241
    8b5e:	5d 5b       	subi	r21, 0xBD	; 189
    8b60:	59 57       	subi	r21, 0x79	; 121
    8b62:	55 53       	subi	r21, 0x35	; 53
    8b64:	50 4e       	sbci	r21, 0xE0	; 224
    8b66:	4c 4a       	sbci	r20, 0xAC	; 172
    8b68:	48 45       	sbci	r20, 0x58	; 88
    8b6a:	43 41       	sbci	r20, 0x13	; 19
    8b6c:	3f 3d       	cpi	r19, 0xDF	; 223
    8b6e:	3b 39       	cpi	r19, 0x9B	; 155
    8b70:	37 35       	cpi	r19, 0x57	; 87
    8b72:	33 32       	cpi	r19, 0x23	; 35
    8b74:	30 2f       	mov	r19, r16
    8b76:	2e 2d       	mov	r18, r14
    8b78:	2c 2b       	or	r18, r28
    8b7a:	2c 2d       	mov	r18, r12
    8b7c:	30 42       	sbci	r19, 0x20	; 32
    8b7e:	3d 28       	or	r3, r13
    8b80:	00 e9       	ldi	r16, 0x90	; 144
    8b82:	e5 fe       	sbrs	r14, 5
    8b84:	d4 d7       	rcall	.+4008   	; 0x9b2e <LBLineIntersect+0x170>
    8b86:	d7 d7       	rcall	.+4014   	; 0x9b36 <LBLineIntersect+0x178>
    8b88:	d6 d4       	rcall	.+2476   	; 0x9536 <initWifi+0x4c>
    8b8a:	d2 d0       	rcall	.+420    	; 0x8d30 <waves+0x930>
    8b8c:	ce cc       	rjmp	.-1636   	; 0x852a <waves+0x12a>
    8b8e:	ca c8       	rjmp	.-3692   	; 0x7d24 <ProcessMusic+0x1c>
    8b90:	c6 c3       	rjmp	.+1932   	; 0x931e <wifiSend+0xe>
    8b92:	c1 bf       	out	0x31, r28	; 49
    8b94:	bd ba       	out	0x1d, r11	; 29
    8b96:	b8 b6       	in	r11, 0x38	; 56
    8b98:	b4 b1       	in	r27, 0x04	; 4
    8b9a:	af ad       	ldd	r26, Y+63	; 0x3f
    8b9c:	ab a9       	ldd	r26, Y+51	; 0x33
    8b9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8ba0:	a3 a1       	ldd	r26, Z+35	; 0x23
    8ba2:	9f 9e       	mul	r9, r31
    8ba4:	9c 9a       	sbi	0x13, 4	; 19
    8ba6:	99 97       	sbiw	r26, 0x29	; 41
    8ba8:	95 94       	asr	r9
    8baa:	93 91       	.word	0x9193	; ????
    8bac:	90 8f       	std	Z+24, r25	; 0x18
    8bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8bb0:	8b 8a       	std	Y+19, r8	; 0x13
    8bb2:	89 88       	ldd	r8, Y+17	; 0x11
    8bb4:	88 87       	std	Y+8, r24	; 0x08
    8bb6:	86 85       	ldd	r24, Z+14	; 0x0e
    8bb8:	85 84       	ldd	r8, Z+13	; 0x0d
    8bba:	84 84       	ldd	r8, Z+12	; 0x0c
    8bbc:	83 83       	std	Z+3, r24	; 0x03
    8bbe:	83 83       	std	Z+3, r24	; 0x03
    8bc0:	83 83       	std	Z+3, r24	; 0x03
    8bc2:	83 83       	std	Z+3, r24	; 0x03
    8bc4:	83 84       	ldd	r8, Z+11	; 0x0b
    8bc6:	84 84       	ldd	r8, Z+12	; 0x0c
    8bc8:	85 85       	ldd	r24, Z+13	; 0x0d
    8bca:	86 87       	std	Z+14, r24	; 0x0e
    8bcc:	88 88       	ldd	r8, Y+16	; 0x10
    8bce:	89 8a       	std	Y+17, r8	; 0x11
    8bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8bd4:	90 91 93 94 	lds	r25, 0x9493
    8bd8:	95 97       	sbiw	r26, 0x25	; 37
    8bda:	99 9a       	sbi	0x13, 1	; 19
    8bdc:	9c 9e       	mul	r9, r28
    8bde:	9f a1       	ldd	r25, Y+39	; 0x27
    8be0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8be2:	a7 a9       	ldd	r26, Z+55	; 0x37
    8be4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8be6:	af b1       	in	r26, 0x0f	; 15
    8be8:	b4 b6       	in	r11, 0x34	; 52
    8bea:	b8 ba       	out	0x18, r11	; 24
    8bec:	bd bf       	out	0x3d, r27	; 61
    8bee:	c1 c3       	rjmp	.+1922   	; 0x9372 <wifiGetIfAvailable+0x3a>
    8bf0:	c6 c8       	rjmp	.-3700   	; 0x7d7e <ProcessMusic+0x76>
    8bf2:	ca cc       	rjmp	.-1644   	; 0x8588 <waves+0x188>
    8bf4:	ce d0       	rcall	.+412    	; 0x8d92 <waves+0x992>
    8bf6:	d2 d4       	rcall	.+2468   	; 0x959c <disablePassthroughMode+0x14>
    8bf8:	d6 d7       	rcall	.+4012   	; 0x9ba6 <LBWaitSeconds+0x6>
    8bfa:	d7 d7       	rcall	.+4014   	; 0x9baa <LBWaitSeconds+0xa>
    8bfc:	d4 fe       	sbrs	r13, 4
    8bfe:	e5 e9       	ldi	r30, 0x95	; 149
    8c00:	f9 f8       	.word	0xf8f9	; ????
    8c02:	f9 f5       	brne	.+126    	; 0x8c82 <waves+0x882>
    8c04:	eb e1       	ldi	r30, 0x1B	; 27
    8c06:	dd de       	rcall	.-582    	; 0x89c2 <waves+0x5c2>
    8c08:	e0 e2       	ldi	r30, 0x20	; 32
    8c0a:	e4 e5       	ldi	r30, 0x54	; 84
    8c0c:	e6 e5       	ldi	r30, 0x56	; 86
    8c0e:	e4 e2       	ldi	r30, 0x24	; 36
    8c10:	de d9       	rcall	.-3140   	; 0x7fce <ProcessMusic+0x2c6>
    8c12:	d2 ca       	rjmp	.-2652   	; 0x81b8 <esmw+0x8>
    8c14:	c1 b7       	in	r28, 0x31	; 49
    8c16:	ac a2       	std	Y+36, r10	; 0x24
    8c18:	99 91       	ld	r25, Y+
    8c1a:	8a 86       	std	Y+10, r8	; 0x0a
    8c1c:	83 81       	ldd	r24, Z+3	; 0x03
    8c1e:	80 80       	ld	r8, Z
    8c20:	81 82       	std	Z+1, r8	; 0x01
    8c22:	83 85       	ldd	r24, Z+11	; 0x0b
    8c24:	86 88       	ldd	r8, Z+22	; 0x16
    8c26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8c28:	8d 8f       	std	Y+29, r24	; 0x1d
    8c2a:	90 92 93 95 	sts	0x9593, r9
    8c2e:	96 97       	sbiw	r26, 0x26	; 38
    8c30:	98 99       	sbic	0x13, 0	; 19
    8c32:	9a 9b       	sbis	0x13, 2	; 19
    8c34:	9b 9c       	mul	r9, r11
    8c36:	9d 9d       	mul	r25, r13
    8c38:	9d 9e       	mul	r9, r29
    8c3a:	9e 9e       	mul	r9, r30
    8c3c:	9f 9f       	mul	r25, r31
    8c3e:	9f 9f       	mul	r25, r31
    8c40:	9f 9f       	mul	r25, r31
    8c42:	9f 9e       	mul	r9, r31
    8c44:	9e 9e       	mul	r9, r30
    8c46:	9d 9d       	mul	r25, r13
    8c48:	9d 9c       	mul	r9, r13
    8c4a:	9b 9b       	sbis	0x13, 3	; 19
    8c4c:	9a 99       	sbic	0x13, 2	; 19
    8c4e:	98 97       	sbiw	r26, 0x28	; 40
    8c50:	96 95       	lsr	r25
    8c52:	93 92       	.word	0x9293	; ????
    8c54:	90 8f       	std	Z+24, r25	; 0x18
    8c56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8c58:	8a 88       	ldd	r8, Y+18	; 0x12
    8c5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8c5c:	83 82       	std	Z+3, r8	; 0x03
    8c5e:	81 80       	ldd	r8, Z+1	; 0x01
    8c60:	80 81       	ld	r24, Z
    8c62:	83 86       	std	Z+11, r8	; 0x0b
    8c64:	8a 91       	ld	r24, -Y
    8c66:	99 a2       	std	Y+33, r9	; 0x21
    8c68:	ac b7       	in	r26, 0x3c	; 60
    8c6a:	c1 ca       	rjmp	.-2686   	; 0x81ee <esmw+0x3e>
    8c6c:	d2 d9       	rcall	.-3164   	; 0x8012 <ProcessMusic+0x30a>
    8c6e:	de e2       	ldi	r29, 0x2E	; 46
    8c70:	e4 e5       	ldi	r30, 0x54	; 84
    8c72:	e6 e5       	ldi	r30, 0x56	; 86
    8c74:	e4 e2       	ldi	r30, 0x24	; 36
    8c76:	e0 de       	rcall	.-576    	; 0x8a38 <waves+0x638>
    8c78:	dd e1       	ldi	r29, 0x1D	; 29
    8c7a:	eb f5       	brvc	.+122    	; 0x8cf6 <waves+0x8f6>
    8c7c:	f9 f8       	.word	0xf8f9	; ????
    8c7e:	f9 00       	.word	0x00f9	; ????
    8c80:	07 08       	sbc	r0, r7
    8c82:	07 0b       	sbc	r16, r23
    8c84:	15 1f       	adc	r17, r21
    8c86:	23 22       	and	r2, r19
    8c88:	20 1e       	adc	r2, r16
    8c8a:	1c 1b       	sub	r17, r28
    8c8c:	1a 1b       	sub	r17, r26
    8c8e:	1c 1e       	adc	r1, r28
    8c90:	22 27       	eor	r18, r18
    8c92:	2e 36       	cpi	r18, 0x6E	; 110
    8c94:	3f 49       	sbci	r19, 0x9F	; 159
    8c96:	54 5e       	subi	r21, 0xE4	; 228
    8c98:	67 6f       	ori	r22, 0xF7	; 247
    8c9a:	76 7a       	andi	r23, 0xA6	; 166
    8c9c:	7e 7f       	andi	r23, 0xFE	; 254
    8c9e:	7f 7f       	andi	r23, 0xFF	; 255
    8ca0:	7f 7e       	andi	r23, 0xEF	; 239
    8ca2:	7d 7b       	andi	r23, 0xBD	; 189
    8ca4:	7a 78       	andi	r23, 0x8A	; 138
    8ca6:	76 74       	andi	r23, 0x46	; 70
    8ca8:	73 71       	andi	r23, 0x13	; 19
    8caa:	70 6e       	ori	r23, 0xE0	; 224
    8cac:	6d 6b       	ori	r22, 0xBD	; 189
    8cae:	6a 69       	ori	r22, 0x9A	; 154
    8cb0:	68 67       	ori	r22, 0x78	; 120
    8cb2:	66 65       	ori	r22, 0x56	; 86
    8cb4:	65 64       	ori	r22, 0x45	; 69
    8cb6:	64 63       	ori	r22, 0x34	; 52
    8cb8:	63 62       	ori	r22, 0x23	; 35
    8cba:	62 62       	ori	r22, 0x22	; 34
    8cbc:	61 61       	ori	r22, 0x11	; 17
    8cbe:	61 61       	ori	r22, 0x11	; 17
    8cc0:	61 61       	ori	r22, 0x11	; 17
    8cc2:	61 62       	ori	r22, 0x21	; 33
    8cc4:	62 62       	ori	r22, 0x22	; 34
    8cc6:	63 63       	ori	r22, 0x33	; 51
    8cc8:	63 64       	ori	r22, 0x43	; 67
    8cca:	65 65       	ori	r22, 0x55	; 85
    8ccc:	66 67       	ori	r22, 0x76	; 118
    8cce:	68 69       	ori	r22, 0x98	; 152
    8cd0:	6a 6b       	ori	r22, 0xBA	; 186
    8cd2:	6d 6e       	ori	r22, 0xED	; 237
    8cd4:	70 71       	andi	r23, 0x10	; 16
    8cd6:	73 74       	andi	r23, 0x43	; 67
    8cd8:	76 78       	andi	r23, 0x86	; 134
    8cda:	7a 7b       	andi	r23, 0xBA	; 186
    8cdc:	7d 7e       	andi	r23, 0xED	; 237
    8cde:	7f 7f       	andi	r23, 0xFF	; 255
    8ce0:	7f 7f       	andi	r23, 0xFF	; 255
    8ce2:	7e 7a       	andi	r23, 0xAE	; 174
    8ce4:	76 6f       	ori	r23, 0xF6	; 246
    8ce6:	67 5e       	subi	r22, 0xE7	; 231
    8ce8:	54 49       	sbci	r21, 0x94	; 148
    8cea:	3f 36       	cpi	r19, 0x6F	; 111
    8cec:	2e 27       	eor	r18, r30
    8cee:	22 1e       	adc	r2, r18
    8cf0:	1c 1b       	sub	r17, r28
    8cf2:	1a 1b       	sub	r17, r26
    8cf4:	1c 1e       	adc	r1, r28
    8cf6:	20 22       	and	r2, r16
    8cf8:	23 1f       	adc	r18, r19
    8cfa:	15 0b       	sbc	r17, r21
    8cfc:	07 08       	sbc	r0, r7
    8cfe:	07 00       	.word	0x0007	; ????
    8d00:	1f 31       	cpi	r17, 0x1F	; 31
    8d02:	3d 44       	sbci	r19, 0x4D	; 77
    8d04:	4e 53       	subi	r20, 0x3E	; 62
    8d06:	54 56       	subi	r21, 0x64	; 100
    8d08:	5a 5f       	subi	r21, 0xFA	; 250
    8d0a:	64 69       	ori	r22, 0x94	; 148
    8d0c:	6e 74       	andi	r22, 0x4E	; 78
    8d0e:	76 79       	andi	r23, 0x96	; 150
    8d10:	7c 7f       	andi	r23, 0xFC	; 252
    8d12:	7f 7f       	andi	r23, 0xFF	; 255
    8d14:	7f 7f       	andi	r23, 0xFF	; 255
    8d16:	7f 7f       	andi	r23, 0xFF	; 255
    8d18:	7f 7f       	andi	r23, 0xFF	; 255
    8d1a:	7f 7f       	andi	r23, 0xFF	; 255
    8d1c:	7f 7f       	andi	r23, 0xFF	; 255
    8d1e:	7f 7f       	andi	r23, 0xFF	; 255
    8d20:	7f 7f       	andi	r23, 0xFF	; 255
    8d22:	7f 7f       	andi	r23, 0xFF	; 255
    8d24:	7f 7f       	andi	r23, 0xFF	; 255
    8d26:	7f 7f       	andi	r23, 0xFF	; 255
    8d28:	7f 7f       	andi	r23, 0xFF	; 255
    8d2a:	7f 7f       	andi	r23, 0xFF	; 255
    8d2c:	7f 7f       	andi	r23, 0xFF	; 255
    8d2e:	7f 7f       	andi	r23, 0xFF	; 255
    8d30:	7f 7f       	andi	r23, 0xFF	; 255
    8d32:	7f 7f       	andi	r23, 0xFF	; 255
    8d34:	7f 7f       	andi	r23, 0xFF	; 255
    8d36:	7f 7f       	andi	r23, 0xFF	; 255
    8d38:	7f 7f       	andi	r23, 0xFF	; 255
    8d3a:	7f 7f       	andi	r23, 0xFF	; 255
    8d3c:	7f 7f       	andi	r23, 0xFF	; 255
    8d3e:	7f 7f       	andi	r23, 0xFF	; 255
    8d40:	7f 7f       	andi	r23, 0xFF	; 255
    8d42:	7f 7f       	andi	r23, 0xFF	; 255
    8d44:	7f 7f       	andi	r23, 0xFF	; 255
    8d46:	7f 7f       	andi	r23, 0xFF	; 255
    8d48:	7f 7f       	andi	r23, 0xFF	; 255
    8d4a:	7f 7f       	andi	r23, 0xFF	; 255
    8d4c:	7f 7f       	andi	r23, 0xFF	; 255
    8d4e:	7f 7f       	andi	r23, 0xFF	; 255
    8d50:	7f 7f       	andi	r23, 0xFF	; 255
    8d52:	7f 7f       	andi	r23, 0xFF	; 255
    8d54:	7f 7f       	andi	r23, 0xFF	; 255
    8d56:	7f 7f       	andi	r23, 0xFF	; 255
    8d58:	7f 7f       	andi	r23, 0xFF	; 255
    8d5a:	7f 7f       	andi	r23, 0xFF	; 255
    8d5c:	7f 7f       	andi	r23, 0xFF	; 255
    8d5e:	7f 7f       	andi	r23, 0xFF	; 255
    8d60:	7f 7f       	andi	r23, 0xFF	; 255
    8d62:	7f 7f       	andi	r23, 0xFF	; 255
    8d64:	7f 7f       	andi	r23, 0xFF	; 255
    8d66:	7f 7f       	andi	r23, 0xFF	; 255
    8d68:	7f 7f       	andi	r23, 0xFF	; 255
    8d6a:	7f 7f       	andi	r23, 0xFF	; 255
    8d6c:	7f 7f       	andi	r23, 0xFF	; 255
    8d6e:	7f 7f       	andi	r23, 0xFF	; 255
    8d70:	7f 7f       	andi	r23, 0xFF	; 255
    8d72:	7f 7f       	andi	r23, 0xFF	; 255
    8d74:	7f 7f       	andi	r23, 0xFF	; 255
    8d76:	7f 7f       	andi	r23, 0xFF	; 255
    8d78:	7f 7f       	andi	r23, 0xFF	; 255
    8d7a:	7f 7c       	andi	r23, 0xCF	; 207
    8d7c:	78 71       	andi	r23, 0x18	; 24
    8d7e:	68 4c       	sbci	r22, 0xC8	; 200
    8d80:	2c 1c       	adc	r2, r12
    8d82:	12 0c       	add	r1, r2
    8d84:	0a 0b       	sbc	r16, r26
    8d86:	0a 05       	cpc	r16, r10
    8d88:	fd f3       	brhs	.-2      	; 0x8d88 <waves+0x988>
    8d8a:	e9 df       	rcall	.-46     	; 0x8d5e <waves+0x95e>
    8d8c:	d4 ca       	rjmp	.-2648   	; 0x8336 <steptable+0x12e>
    8d8e:	c0 b7       	in	r28, 0x30	; 48
    8d90:	ae a6       	std	Y+46, r10	; 0x2e
    8d92:	9e 97       	sbiw	r26, 0x2e	; 46
    8d94:	91 8b       	std	Z+17, r25	; 0x11
    8d96:	86 85       	ldd	r24, Z+14	; 0x0e
    8d98:	82 80       	ldd	r8, Z+2	; 0x02
    8d9a:	80 80       	ld	r8, Z
    8d9c:	80 80       	ld	r8, Z
    8d9e:	80 80       	ld	r8, Z
    8da0:	80 80       	ld	r8, Z
    8da2:	80 80       	ld	r8, Z
    8da4:	80 80       	ld	r8, Z
    8da6:	80 80       	ld	r8, Z
    8da8:	80 80       	ld	r8, Z
    8daa:	80 80       	ld	r8, Z
    8dac:	80 80       	ld	r8, Z
    8dae:	80 80       	ld	r8, Z
    8db0:	80 80       	ld	r8, Z
    8db2:	80 80       	ld	r8, Z
    8db4:	80 80       	ld	r8, Z
    8db6:	80 80       	ld	r8, Z
    8db8:	80 80       	ld	r8, Z
    8dba:	80 80       	ld	r8, Z
    8dbc:	80 80       	ld	r8, Z
    8dbe:	80 80       	ld	r8, Z
    8dc0:	80 80       	ld	r8, Z
    8dc2:	80 80       	ld	r8, Z
    8dc4:	80 80       	ld	r8, Z
    8dc6:	80 80       	ld	r8, Z
    8dc8:	80 80       	ld	r8, Z
    8dca:	80 80       	ld	r8, Z
    8dcc:	80 80       	ld	r8, Z
    8dce:	80 80       	ld	r8, Z
    8dd0:	80 80       	ld	r8, Z
    8dd2:	80 80       	ld	r8, Z
    8dd4:	80 80       	ld	r8, Z
    8dd6:	80 80       	ld	r8, Z
    8dd8:	80 80       	ld	r8, Z
    8dda:	80 80       	ld	r8, Z
    8ddc:	80 80       	ld	r8, Z
    8dde:	80 80       	ld	r8, Z
    8de0:	80 80       	ld	r8, Z
    8de2:	80 80       	ld	r8, Z
    8de4:	80 80       	ld	r8, Z
    8de6:	80 80       	ld	r8, Z
    8de8:	80 80       	ld	r8, Z
    8dea:	80 80       	ld	r8, Z
    8dec:	80 80       	ld	r8, Z
    8dee:	80 80       	ld	r8, Z
    8df0:	80 80       	ld	r8, Z
    8df2:	80 80       	ld	r8, Z
    8df4:	80 87       	std	Z+8, r24	; 0x08
    8df6:	91 9d       	mul	r25, r1
    8df8:	ac c4       	rjmp	.+2392   	; 0x9752 <joinNetGame+0x58>
    8dfa:	cb d4       	rcall	.+2454   	; 0x9792 <joinNetGame+0x98>
    8dfc:	dd f2       	brhs	.-74     	; 0x8db4 <waves+0x9b4>
    8dfe:	fa fa       	.word	0xfafa	; ????

00008e00 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    8e00:	2f 92       	push	r2
    8e02:	3f 92       	push	r3
    8e04:	4f 92       	push	r4
    8e06:	5f 92       	push	r5
    8e08:	6f 92       	push	r6
    8e0a:	7f 92       	push	r7
    8e0c:	8f 92       	push	r8
    8e0e:	9f 92       	push	r9
    8e10:	af 92       	push	r10
    8e12:	bf 92       	push	r11
    8e14:	cf 92       	push	r12
    8e16:	df 92       	push	r13
    8e18:	ef 92       	push	r14
    8e1a:	ff 92       	push	r15
    8e1c:	0f 93       	push	r16
    8e1e:	1f 93       	push	r17
    8e20:	cf 93       	push	r28
    8e22:	df 93       	push	r29
    8e24:	00 d0       	rcall	.+0      	; 0x8e26 <ProcessSprites+0x26>
    8e26:	00 d0       	rcall	.+0      	; 0x8e28 <ProcessSprites+0x28>
    8e28:	00 d0       	rcall	.+0      	; 0x8e2a <ProcessSprites+0x2a>
    8e2a:	cd b7       	in	r28, 0x3d	; 61
    8e2c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    8e2e:	80 91 00 01 	lds	r24, 0x0100
    8e32:	88 23       	and	r24, r24
    8e34:	09 f4       	brne	.+2      	; 0x8e38 <ProcessSprites+0x38>
    8e36:	b1 c0       	rjmp	.+354    	; 0x8f9a <ProcessSprites+0x19a>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    8e38:	80 91 0e 0a 	lds	r24, 0x0A0E
    8e3c:	80 93 0d 0a 	sts	0x0A0D, r24
	free_tile_index = user_ram_tiles_c;
    8e40:	80 93 0c 0a 	sts	0x0A0C, r24
    8e44:	00 e0       	ldi	r16, 0x00	; 0
    8e46:	10 e0       	ldi	r17, 0x00	; 0
    8e48:	f8 01       	movw	r30, r16
    8e4a:	e8 55       	subi	r30, 0x58	; 88
    8e4c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    8e4e:	81 81       	ldd	r24, Z+1	; 0x01
    8e50:	90 81       	ld	r25, Z
    8e52:	32 81       	ldd	r19, Z+2	; 0x02
    8e54:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    8e56:	28 e0       	ldi	r18, 0x08	; 8
    8e58:	29 0f       	add	r18, r25
    8e5a:	26 95       	lsr	r18
    8e5c:	26 95       	lsr	r18
    8e5e:	26 95       	lsr	r18
    8e60:	33 24       	eor	r3, r3
    8e62:	3a 94       	dec	r3
    8e64:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    8e66:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    8e68:	19 f0       	breq	.+6      	; 0x8e70 <ProcessSprites+0x70>
    8e6a:	e2 e0       	ldi	r30, 0x02	; 2
    8e6c:	2e 2e       	mov	r2, r30
    8e6e:	02 c0       	rjmp	.+4      	; 0x8e74 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    8e70:	22 24       	eor	r2, r2
    8e72:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    8e74:	28 e0       	ldi	r18, 0x08	; 8
    8e76:	28 0f       	add	r18, r24
    8e78:	52 2e       	mov	r5, r18
    8e7a:	56 94       	lsr	r5
    8e7c:	56 94       	lsr	r5
    8e7e:	56 94       	lsr	r5
    8e80:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    8e82:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    8e84:	19 f0       	breq	.+6      	; 0x8e8c <ProcessSprites+0x8c>
    8e86:	22 e0       	ldi	r18, 0x02	; 2
    8e88:	29 83       	std	Y+1, r18	; 0x01
    8e8a:	02 c0       	rjmp	.+4      	; 0x8e90 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    8e8c:	e1 e0       	ldi	r30, 0x01	; 1
    8e8e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    8e90:	68 2e       	mov	r6, r24
    8e92:	71 2c       	mov	r7, r1
    8e94:	76 2c       	mov	r7, r6
    8e96:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8e98:	69 0e       	add	r6, r25
    8e9a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    8e9c:	50 e0       	ldi	r21, 0x00	; 0
    8e9e:	54 2f       	mov	r21, r20
    8ea0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8ea2:	ca 01       	movw	r24, r20
    8ea4:	83 0f       	add	r24, r19
    8ea6:	91 1d       	adc	r25, r1
    8ea8:	9b 83       	std	Y+3, r25	; 0x03
    8eaa:	8a 83       	std	Y+2, r24	; 0x02
    8eac:	e1 2c       	mov	r14, r1
    8eae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8eb0:	9e e1       	ldi	r25, 0x1E	; 30
    8eb2:	59 9e       	mul	r5, r25
    8eb4:	50 01       	movw	r10, r0
    8eb6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    8eb8:	9e 2c       	mov	r9, r14
    8eba:	88 24       	eor	r8, r8
    8ebc:	43 2c       	mov	r4, r3
    8ebe:	c1 2c       	mov	r12, r1
    8ec0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    8ec2:	ed e1       	ldi	r30, 0x1D	; 29
    8ec4:	e4 15       	cp	r30, r4
    8ec6:	08 f4       	brcc	.+2      	; 0x8eca <ProcessSprites+0xca>
    8ec8:	53 c0       	rjmp	.+166    	; 0x8f70 <ProcessSprites+0x170>
    8eca:	fb e1       	ldi	r31, 0x1B	; 27
    8ecc:	f5 15       	cp	r31, r5
    8ece:	08 f4       	brcc	.+2      	; 0x8ed2 <ProcessSprites+0xd2>
    8ed0:	4f c0       	rjmp	.+158    	; 0x8f70 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8ed2:	c5 01       	movw	r24, r10
    8ed4:	84 0d       	add	r24, r4
    8ed6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    8ed8:	9c 01       	movw	r18, r24
    8eda:	20 5a       	subi	r18, 0xA0	; 160
    8edc:	3e 4f       	sbci	r19, 0xFE	; 254
    8ede:	3e 83       	std	Y+6, r19	; 0x06
    8ee0:	2d 83       	std	Y+5, r18	; 0x05
    8ee2:	f9 01       	movw	r30, r18
    8ee4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    8ee6:	81 e0       	ldi	r24, 0x01	; 1
    8ee8:	94 31       	cpi	r25, 0x14	; 20
    8eea:	08 f4       	brcc	.+2      	; 0x8eee <ProcessSprites+0xee>
    8eec:	80 e0       	ldi	r24, 0x00	; 0
    8eee:	21 e0       	ldi	r18, 0x01	; 1
    8ef0:	30 91 0d 0a 	lds	r19, 0x0A0D
    8ef4:	93 17       	cp	r25, r19
    8ef6:	18 f0       	brcs	.+6      	; 0x8efe <ProcessSprites+0xfe>
    8ef8:	20 e0       	ldi	r18, 0x00	; 0
    8efa:	88 23       	and	r24, r24
    8efc:	61 f1       	breq	.+88     	; 0x8f56 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    8efe:	60 91 0c 0a 	lds	r22, 0x0A0C
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    8f02:	64 31       	cpi	r22, 0x14	; 20
    8f04:	30 f5       	brcc	.+76     	; 0x8f52 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    8f06:	88 23       	and	r24, r24
    8f08:	31 f0       	breq	.+12     	; 0x8f16 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    8f0a:	8c ee       	ldi	r24, 0xEC	; 236
    8f0c:	89 0f       	add	r24, r25
    8f0e:	9c 83       	std	Y+4, r25	; 0x04
    8f10:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <CopyFlashTile>
    8f14:	06 c0       	rjmp	.+12     	; 0x8f22 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    8f16:	22 23       	and	r18, r18
    8f18:	29 f0       	breq	.+10     	; 0x8f24 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    8f1a:	89 2f       	mov	r24, r25
    8f1c:	9c 83       	std	Y+4, r25	; 0x04
    8f1e:	0e 94 7d 37 	call	0x6efa	; 0x6efa <CopyRamTile>
    8f22:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    8f24:	80 91 0c 0a 	lds	r24, 0x0A0C
    8f28:	e8 2f       	mov	r30, r24
    8f2a:	f0 e0       	ldi	r31, 0x00	; 0
    8f2c:	9f 01       	movw	r18, r30
    8f2e:	22 0f       	add	r18, r18
    8f30:	33 1f       	adc	r19, r19
    8f32:	e2 0f       	add	r30, r18
    8f34:	f3 1f       	adc	r31, r19
    8f36:	e0 53       	subi	r30, 0x30	; 48
    8f38:	f6 4f       	sbci	r31, 0xF6	; 246
    8f3a:	2d 81       	ldd	r18, Y+5	; 0x05
    8f3c:	3e 81       	ldd	r19, Y+6	; 0x06
    8f3e:	31 83       	std	Z+1, r19	; 0x01
    8f40:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    8f42:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    8f44:	f9 01       	movw	r30, r18
    8f46:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    8f48:	91 e0       	ldi	r25, 0x01	; 1
    8f4a:	98 0f       	add	r25, r24
    8f4c:	90 93 0c 0a 	sts	0x0A0C, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    8f50:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    8f52:	94 31       	cpi	r25, 0x14	; 20
    8f54:	68 f4       	brcc	.+26     	; 0x8f70 <ProcessSprites+0x170>
    8f56:	80 91 0d 0a 	lds	r24, 0x0A0D
    8f5a:	98 17       	cp	r25, r24
    8f5c:	48 f0       	brcs	.+18     	; 0x8f70 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8f5e:	93 01       	movw	r18, r6
    8f60:	a6 01       	movw	r20, r12
    8f62:	48 0d       	add	r20, r8
    8f64:	59 1d       	adc	r21, r9
    8f66:	6a 81       	ldd	r22, Y+2	; 0x02
    8f68:	7b 81       	ldd	r23, Y+3	; 0x03
    8f6a:	89 2f       	mov	r24, r25
    8f6c:	0e 94 1d 38 	call	0x703a	; 0x703a <BlitSpritePart>
    8f70:	ff ef       	ldi	r31, 0xFF	; 255
    8f72:	cf 1a       	sub	r12, r31
    8f74:	df 0a       	sbc	r13, r31
    8f76:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    8f78:	c2 14       	cp	r12, r2
    8f7a:	08 f4       	brcc	.+2      	; 0x8f7e <ProcessSprites+0x17e>
    8f7c:	a2 cf       	rjmp	.-188    	; 0x8ec2 <ProcessSprites+0xc2>
    8f7e:	2f ef       	ldi	r18, 0xFF	; 255
    8f80:	e2 1a       	sub	r14, r18
    8f82:	f2 0a       	sbc	r15, r18
    8f84:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    8f86:	99 81       	ldd	r25, Y+1	; 0x01
    8f88:	e9 16       	cp	r14, r25
    8f8a:	08 f4       	brcc	.+2      	; 0x8f8e <ProcessSprites+0x18e>
    8f8c:	91 cf       	rjmp	.-222    	; 0x8eb0 <ProcessSprites+0xb0>
    8f8e:	0c 5f       	subi	r16, 0xFC	; 252
    8f90:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    8f92:	08 32       	cpi	r16, 0x28	; 40
    8f94:	11 05       	cpc	r17, r1
    8f96:	09 f0       	breq	.+2      	; 0x8f9a <ProcessSprites+0x19a>
    8f98:	57 cf       	rjmp	.-338    	; 0x8e48 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    8f9a:	26 96       	adiw	r28, 0x06	; 6
    8f9c:	0f b6       	in	r0, 0x3f	; 63
    8f9e:	f8 94       	cli
    8fa0:	de bf       	out	0x3e, r29	; 62
    8fa2:	0f be       	out	0x3f, r0	; 63
    8fa4:	cd bf       	out	0x3d, r28	; 61
    8fa6:	df 91       	pop	r29
    8fa8:	cf 91       	pop	r28
    8faa:	1f 91       	pop	r17
    8fac:	0f 91       	pop	r16
    8fae:	ff 90       	pop	r15
    8fb0:	ef 90       	pop	r14
    8fb2:	df 90       	pop	r13
    8fb4:	cf 90       	pop	r12
    8fb6:	bf 90       	pop	r11
    8fb8:	af 90       	pop	r10
    8fba:	9f 90       	pop	r9
    8fbc:	8f 90       	pop	r8
    8fbe:	7f 90       	pop	r7
    8fc0:	6f 90       	pop	r6
    8fc2:	5f 90       	pop	r5
    8fc4:	4f 90       	pop	r4
    8fc6:	3f 90       	pop	r3
    8fc8:	2f 90       	pop	r2
    8fca:	08 95       	ret

00008fcc <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    8fcc:	df 92       	push	r13
    8fce:	ef 92       	push	r14
    8fd0:	ff 92       	push	r15
    8fd2:	0f 93       	push	r16
    8fd4:	1f 93       	push	r17
    8fd6:	cf 93       	push	r28
    8fd8:	df 93       	push	r29
    8fda:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8fdc:	fb 01       	movw	r30, r22
    8fde:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8fe0:	31 96       	adiw	r30, 0x01	; 1
    8fe2:	64 91       	lpm	r22, Z
    8fe4:	5f ef       	ldi	r21, 0xFF	; 255
    8fe6:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    8fe8:	24 2f       	mov	r18, r20
    8fea:	21 70       	andi	r18, 0x01	; 1
    8fec:	40 ff       	sbrs	r20, 0
    8fee:	04 c0       	rjmp	.+8      	; 0x8ff8 <MapSprite2+0x2c>
			x=(mapWidth-1);
    8ff0:	95 2f       	mov	r25, r21
			dx=-1;
    8ff2:	ff 24       	eor	r15, r15
    8ff4:	fa 94       	dec	r15
    8ff6:	03 c0       	rjmp	.+6      	; 0x8ffe <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    8ff8:	ff 24       	eor	r15, r15
    8ffa:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8ffc:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8ffe:	41 ff       	sbrs	r20, 1
    9000:	05 c0       	rjmp	.+10     	; 0x900c <MapSprite2+0x40>
			y=(mapHeight-1);
    9002:	7f ef       	ldi	r23, 0xFF	; 255
    9004:	76 0f       	add	r23, r22
			dy=-1;
    9006:	ee 24       	eor	r14, r14
    9008:	ea 94       	dec	r14
    900a:	03 c0       	rjmp	.+6      	; 0x9012 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    900c:	ee 24       	eor	r14, r14
    900e:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9010:	70 e0       	ldi	r23, 0x00	; 0
    9012:	21 11       	cpse	r18, r1
    9014:	01 c0       	rjmp	.+2      	; 0x9018 <MapSprite2+0x4c>
    9016:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9018:	00 e0       	ldi	r16, 0x00	; 0
    901a:	06 17       	cp	r16, r22
    901c:	09 f1       	breq	.+66     	; 0x9060 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    901e:	71 03       	mulsu	r23, r17
    9020:	e0 01       	movw	r28, r0
    9022:	11 24       	eor	r1, r1
    9024:	d8 2e       	mov	r13, r24
    9026:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    9028:	8d 15       	cp	r24, r13
    902a:	b1 f0       	breq	.+44     	; 0x9058 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    902c:	9e 01       	movw	r18, r28
    902e:	29 0f       	add	r18, r25
    9030:	31 1d       	adc	r19, r1
    9032:	97 fd       	sbrc	r25, 7
    9034:	3a 95       	dec	r19
    9036:	2e 5f       	subi	r18, 0xFE	; 254
    9038:	3f 4f       	sbci	r19, 0xFF	; 255
    903a:	fd 01       	movw	r30, r26
    903c:	e2 0f       	add	r30, r18
    903e:	f3 1f       	adc	r31, r19
    9040:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9042:	34 e0       	ldi	r19, 0x04	; 4
    9044:	83 9f       	mul	r24, r19
    9046:	f0 01       	movw	r30, r0
    9048:	11 24       	eor	r1, r1
    904a:	e8 55       	subi	r30, 0x58	; 88
    904c:	fb 4f       	sbci	r31, 0xFB	; 251
    904e:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9050:	8f 5f       	subi	r24, 0xFF	; 255
    9052:	43 83       	std	Z+3, r20	; 0x03
    9054:	9f 0d       	add	r25, r15
    9056:	e8 cf       	rjmp	.-48     	; 0x9028 <MapSprite2+0x5c>
    9058:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    905a:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    905c:	95 2f       	mov	r25, r21
    905e:	dd cf       	rjmp	.-70     	; 0x901a <MapSprite2+0x4e>
	    }
	}
    9060:	df 91       	pop	r29
    9062:	cf 91       	pop	r28
    9064:	1f 91       	pop	r17
    9066:	0f 91       	pop	r16
    9068:	ff 90       	pop	r15
    906a:	ef 90       	pop	r14
    906c:	df 90       	pop	r13
    906e:	08 95       	ret

00009070 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    9070:	0f 93       	push	r16
    9072:	cf 93       	push	r28
    9074:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    9076:	30 e0       	ldi	r19, 0x00	; 0
    9078:	30 17       	cp	r19, r16
    907a:	e1 f0       	breq	.+56     	; 0x90b4 <MoveSprite+0x44>
    907c:	b4 2f       	mov	r27, r20
    907e:	a0 e2       	ldi	r26, 0x20	; 32
    9080:	a4 0f       	add	r26, r20
    9082:	78 2f       	mov	r23, r24
    9084:	72 0f       	add	r23, r18
    9086:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    9088:	87 17       	cp	r24, r23
    908a:	81 f0       	breq	.+32     	; 0x90ac <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    908c:	c4 e0       	ldi	r28, 0x04	; 4
    908e:	8c 9f       	mul	r24, r28
    9090:	f0 01       	movw	r30, r0
    9092:	11 24       	eor	r1, r1
    9094:	e8 55       	subi	r30, 0x58	; 88
    9096:	fb 4f       	sbci	r31, 0xFB	; 251
    9098:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    909a:	41 3e       	cpi	r20, 0xE1	; 225
    909c:	51 05       	cpc	r21, r1
    909e:	14 f0       	brlt	.+4      	; 0x90a4 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    90a0:	a1 83       	std	Z+1, r26	; 0x01
    90a2:	01 c0       	rjmp	.+2      	; 0x90a6 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    90a4:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    90a6:	8f 5f       	subi	r24, 0xFF	; 255
    90a8:	98 5f       	subi	r25, 0xF8	; 248
    90aa:	ee cf       	rjmp	.-36     	; 0x9088 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    90ac:	3f 5f       	subi	r19, 0xFF	; 255
    90ae:	48 5f       	subi	r20, 0xF8	; 248
    90b0:	5f 4f       	sbci	r21, 0xFF	; 255
    90b2:	e2 cf       	rjmp	.-60     	; 0x9078 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    90b4:	cf 91       	pop	r28
    90b6:	0f 91       	pop	r16
    90b8:	08 95       	ret

000090ba <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    90ba:	08 95       	ret

000090bc <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    90bc:	e8 ea       	ldi	r30, 0xA8	; 168
    90be:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    90c0:	80 ef       	ldi	r24, 0xF0	; 240
    90c2:	80 83       	st	Z, r24
    90c4:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    90c6:	94 e0       	ldi	r25, 0x04	; 4
    90c8:	e0 3d       	cpi	r30, 0xD0	; 208
    90ca:	f9 07       	cpc	r31, r25
    90cc:	d1 f7       	brne	.-12     	; 0x90c2 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    90ce:	10 92 0c 0a 	sts	0x0A0C, r1
		user_ram_tiles_c_tmp = 0U;
    90d2:	10 92 0e 0a 	sts	0x0A0E, r1
    90d6:	08 95       	ret

000090d8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    90d8:	4f 92       	push	r4
    90da:	5f 92       	push	r5
    90dc:	6f 92       	push	r6
    90de:	7f 92       	push	r7
    90e0:	8f 92       	push	r8
    90e2:	9f 92       	push	r9
    90e4:	af 92       	push	r10
    90e6:	bf 92       	push	r11
    90e8:	cf 92       	push	r12
    90ea:	df 92       	push	r13
    90ec:	ef 92       	push	r14
    90ee:	ff 92       	push	r15
    90f0:	0f 93       	push	r16
    90f2:	1f 93       	push	r17
    90f4:	cf 93       	push	r28
    90f6:	df 93       	push	r29
    90f8:	68 2e       	mov	r6, r24
    90fa:	56 2e       	mov	r5, r22
    90fc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    90fe:	fa 01       	movw	r30, r20
    9100:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9102:	31 96       	adiw	r30, 0x01	; 1
    9104:	84 90       	lpm	r8, Z
    9106:	c7 2c       	mov	r12, r7
    9108:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    910a:	00 e0       	ldi	r16, 0x00	; 0
    910c:	10 e0       	ldi	r17, 0x00	; 0
    910e:	91 2c       	mov	r9, r1
    9110:	98 14       	cp	r9, r8
    9112:	f1 f0       	breq	.+60     	; 0x9150 <DrawMap+0x78>
    9114:	c0 e0       	ldi	r28, 0x00	; 0
    9116:	d0 e0       	ldi	r29, 0x00	; 0
    9118:	58 01       	movw	r10, r16
    911a:	f2 e0       	ldi	r31, 0x02	; 2
    911c:	af 0e       	add	r10, r31
    911e:	b1 1c       	adc	r11, r1
    9120:	49 2c       	mov	r4, r9
    9122:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    9124:	c7 15       	cp	r28, r7
    9126:	80 f4       	brcc	.+32     	; 0x9148 <DrawMap+0x70>
    9128:	95 01       	movw	r18, r10
    912a:	2c 0f       	add	r18, r28
    912c:	3d 1f       	adc	r19, r29
    912e:	f7 01       	movw	r30, r14
    9130:	e2 0f       	add	r30, r18
    9132:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9134:	24 91       	lpm	r18, Z
    9136:	42 2f       	mov	r20, r18
    9138:	50 e0       	ldi	r21, 0x00	; 0
    913a:	64 2d       	mov	r22, r4
    913c:	8c 2f       	mov	r24, r28
    913e:	86 0d       	add	r24, r6
    9140:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
    9144:	21 96       	adiw	r28, 0x01	; 1
    9146:	ee cf       	rjmp	.-36     	; 0x9124 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9148:	93 94       	inc	r9
    914a:	0c 0d       	add	r16, r12
    914c:	1d 1d       	adc	r17, r13
    914e:	e0 cf       	rjmp	.-64     	; 0x9110 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9150:	df 91       	pop	r29
    9152:	cf 91       	pop	r28
    9154:	1f 91       	pop	r17
    9156:	0f 91       	pop	r16
    9158:	ff 90       	pop	r15
    915a:	ef 90       	pop	r14
    915c:	df 90       	pop	r13
    915e:	cf 90       	pop	r12
    9160:	bf 90       	pop	r11
    9162:	af 90       	pop	r10
    9164:	9f 90       	pop	r9
    9166:	8f 90       	pop	r8
    9168:	7f 90       	pop	r7
    916a:	6f 90       	pop	r6
    916c:	5f 90       	pop	r5
    916e:	4f 90       	pop	r4
    9170:	08 95       	ret

00009172 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    9172:	df 92       	push	r13
    9174:	ef 92       	push	r14
    9176:	ff 92       	push	r15
    9178:	0f 93       	push	r16
    917a:	1f 93       	push	r17
    917c:	cf 93       	push	r28
    917e:	df 93       	push	r29
    9180:	f6 2e       	mov	r15, r22
    9182:	04 2f       	mov	r16, r20
    9184:	d2 2e       	mov	r13, r18
    9186:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    9188:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    918a:	8a e0       	ldi	r24, 0x0A	; 10
    918c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    918e:	01 11       	cpse	r16, r1
    9190:	02 c0       	rjmp	.+4      	; 0x9196 <PrintByte+0x24>
    9192:	11 11       	cpse	r17, r1
    9194:	07 c0       	rjmp	.+14     	; 0x91a4 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    9196:	80 2f       	mov	r24, r16
    9198:	6e 2d       	mov	r22, r14
    919a:	0e 94 0b 72 	call	0xe416	; 0xe416 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    919e:	40 e1       	ldi	r20, 0x10	; 16
    91a0:	49 0f       	add	r20, r25
    91a2:	05 c0       	rjmp	.+10     	; 0x91ae <PrintByte+0x3c>
		}else{
			if(zeropad){
    91a4:	dd 20       	and	r13, r13
    91a6:	11 f0       	breq	.+4      	; 0x91ac <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    91a8:	40 e1       	ldi	r20, 0x10	; 16
    91aa:	01 c0       	rjmp	.+2      	; 0x91ae <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    91ac:	40 e0       	ldi	r20, 0x00	; 0
    91ae:	6f 2d       	mov	r22, r15
    91b0:	8c 2f       	mov	r24, r28
    91b2:	0e 94 44 3a 	call	0x7488	; 0x7488 <SetFont>
			}
		}
		val=val/10;
    91b6:	80 2f       	mov	r24, r16
    91b8:	6e 2d       	mov	r22, r14
    91ba:	0e 94 0b 72 	call	0xe416	; 0xe416 <__udivmodqi4>
    91be:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    91c0:	1f 5f       	subi	r17, 0xFF	; 255
    91c2:	21 97       	sbiw	r28, 0x01	; 1
    91c4:	13 30       	cpi	r17, 0x03	; 3
    91c6:	19 f7       	brne	.-58     	; 0x918e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    91c8:	df 91       	pop	r29
    91ca:	cf 91       	pop	r28
    91cc:	1f 91       	pop	r17
    91ce:	0f 91       	pop	r16
    91d0:	ff 90       	pop	r15
    91d2:	ef 90       	pop	r14
    91d4:	df 90       	pop	r13
    91d6:	08 95       	ret

000091d8 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    91d8:	0f 93       	push	r16
    91da:	1f 93       	push	r17
    91dc:	cf 93       	push	r28
    91de:	df 93       	push	r29
    91e0:	06 2f       	mov	r16, r22
    91e2:	c4 2f       	mov	r28, r20
    91e4:	d5 2f       	mov	r29, r21
    91e6:	18 2f       	mov	r17, r24
    91e8:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    91ea:	fe 01       	movw	r30, r28
    91ec:	44 91       	lpm	r20, Z
		if(c!=0){
    91ee:	44 23       	and	r20, r20
    91f0:	49 f0       	breq	.+18     	; 0x9204 <Print+0x2c>
			c=((c&127)-32);			
    91f2:	4f 77       	andi	r20, 0x7F	; 127
    91f4:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    91f6:	60 2f       	mov	r22, r16
    91f8:	8c 2f       	mov	r24, r28
    91fa:	81 0f       	add	r24, r17
    91fc:	0e 94 44 3a 	call	0x7488	; 0x7488 <SetFont>
    9200:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9202:	f3 cf       	rjmp	.-26     	; 0x91ea <Print+0x12>
	
}
    9204:	df 91       	pop	r29
    9206:	cf 91       	pop	r28
    9208:	1f 91       	pop	r17
    920a:	0f 91       	pop	r16
    920c:	08 95       	ret

0000920e <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    920e:	40 52       	subi	r20, 0x20	; 32
    9210:	0c 94 44 3a 	jmp	0x7488	; 0x7488 <SetFont>

00009214 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9214:	0f 93       	push	r16
    9216:	1f 93       	push	r17
    9218:	cf 93       	push	r28
    921a:	df 93       	push	r29
    921c:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    921e:	c0 e0       	ldi	r28, 0x00	; 0
    9220:	d0 e0       	ldi	r29, 0x00	; 0
    9222:	c0 17       	cp	r28, r16
    9224:	d1 07       	cpc	r29, r17
    9226:	44 f4       	brge	.+16     	; 0x9238 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9228:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <GetVsyncFlag>
    922c:	88 23       	and	r24, r24
    922e:	e1 f3       	breq	.-8      	; 0x9228 <WaitVsync+0x14>
		ClearVsyncFlag();		
    9230:	0e 94 62 3a 	call	0x74c4	; 0x74c4 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9234:	21 96       	adiw	r28, 0x01	; 1
    9236:	f5 cf       	rjmp	.-22     	; 0x9222 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9238:	df 91       	pop	r29
    923a:	cf 91       	pop	r28
    923c:	1f 91       	pop	r17
    923e:	0f 91       	pop	r16
    9240:	08 95       	ret

00009242 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9242:	80 93 51 0b 	sts	0x0B51, r24
	currFadeFrame=0;
    9246:	10 92 54 0b 	sts	0x0B54, r1
	fadeActive=true;
    924a:	81 e0       	ldi	r24, 0x01	; 1
    924c:	80 93 53 0b 	sts	0x0B53, r24
		
	if(blocking){
    9250:	66 23       	and	r22, r22
    9252:	21 f0       	breq	.+8      	; 0x925c <doFade+0x1a>
		while(fadeActive==true);
    9254:	80 91 53 0b 	lds	r24, 0x0B53
    9258:	81 11       	cpse	r24, r1
    925a:	fc cf       	rjmp	.-8      	; 0x9254 <doFade+0x12>
    925c:	08 95       	ret

0000925e <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    925e:	81 11       	cpse	r24, r1
    9260:	03 c0       	rjmp	.+6      	; 0x9268 <FadeIn+0xa>
		DDRC=0xff;
    9262:	8f ef       	ldi	r24, 0xFF	; 255
    9264:	87 b9       	out	0x07, r24	; 7
		return;
    9266:	08 95       	ret
	}
	fadeStep=1;
    9268:	91 e0       	ldi	r25, 0x01	; 1
    926a:	90 93 55 0b 	sts	0x0B55, r25
	fadeDir=1;
    926e:	90 93 52 0b 	sts	0x0B52, r25
	doFade(speed,blocking);
    9272:	0c 94 21 49 	jmp	0x9242	; 0x9242 <doFade>

00009276 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9276:	81 11       	cpse	r24, r1
    9278:	02 c0       	rjmp	.+4      	; 0x927e <FadeOut+0x8>
		DDRC=0;
    927a:	17 b8       	out	0x07, r1	; 7
		return;
    927c:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    927e:	9c e0       	ldi	r25, 0x0C	; 12
    9280:	90 93 55 0b 	sts	0x0B55, r25
	fadeDir=-1;
    9284:	9f ef       	ldi	r25, 0xFF	; 255
    9286:	90 93 52 0b 	sts	0x0B52, r25
	doFade(speed,blocking);
    928a:	0c 94 21 49 	jmp	0x9242	; 0x9242 <doFade>

0000928e <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    928e:	80 91 53 0b 	lds	r24, 0x0B53
    9292:	88 23       	and	r24, r24
    9294:	01 f1       	breq	.+64     	; 0x92d6 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9296:	80 91 54 0b 	lds	r24, 0x0B54
    929a:	81 11       	cpse	r24, r1
    929c:	19 c0       	rjmp	.+50     	; 0x92d0 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    929e:	80 91 51 0b 	lds	r24, 0x0B51
    92a2:	80 93 54 0b 	sts	0x0B54, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    92a6:	e0 91 55 0b 	lds	r30, 0x0B55
    92aa:	f0 e0       	ldi	r31, 0x00	; 0
    92ac:	e5 52       	subi	r30, 0x25	; 37
    92ae:	ff 4f       	sbci	r31, 0xFF	; 255
    92b0:	e4 91       	lpm	r30, Z
    92b2:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    92b4:	90 91 52 0b 	lds	r25, 0x0B52
    92b8:	80 91 55 0b 	lds	r24, 0x0B55
    92bc:	89 0f       	add	r24, r25
    92be:	80 93 55 0b 	sts	0x0B55, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    92c2:	88 23       	and	r24, r24
    92c4:	11 f0       	breq	.+4      	; 0x92ca <ProcessFading+0x3c>
    92c6:	8d 30       	cpi	r24, 0x0D	; 13
    92c8:	31 f4       	brne	.+12     	; 0x92d6 <ProcessFading+0x48>
				fadeActive=false;
    92ca:	10 92 53 0b 	sts	0x0B53, r1
    92ce:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    92d0:	81 50       	subi	r24, 0x01	; 1
    92d2:	80 93 54 0b 	sts	0x0B54, r24
    92d6:	08 95       	ret

000092d8 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    92d8:	0c 94 47 49 	jmp	0x928e	; 0x928e <ProcessFading>

000092dc <LBPlaySound.part.6>:
void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    92dc:	41 e0       	ldi	r20, 0x01	; 1
    92de:	6f ef       	ldi	r22, 0xFF	; 255
    92e0:	0c 94 fc 3d 	jmp	0x7bf8	; 0x7bf8 <TriggerFx>

000092e4 <wifiSendP>:
#define WIFI_TIMEOUT 1
#define WIFI_NODATA 2

#define TIMEOUT 10*60

u8 wifiSendP(const char* str){
    92e4:	1f 93       	push	r17
    92e6:	cf 93       	push	r28
    92e8:	df 93       	push	r29
    92ea:	ec 01       	movw	r28, r24

	char c;
	while(str!=NULL){
    92ec:	20 97       	sbiw	r28, 0x00	; 0
    92ee:	59 f0       	breq	.+22     	; 0x9306 <wifiSendP+0x22>
		c=pgm_read_byte(str);
    92f0:	fe 01       	movw	r30, r28
    92f2:	14 91       	lpm	r17, Z
		if(c==0)break;
    92f4:	11 23       	and	r17, r17
    92f6:	39 f0       	breq	.+14     	; 0x9306 <wifiSendP+0x22>
		while(UartSendChar(c)==-1); //block if buffer full
    92f8:	81 2f       	mov	r24, r17
    92fa:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <UartSendChar>
    92fe:	8f 3f       	cpi	r24, 0xFF	; 255
    9300:	d9 f3       	breq	.-10     	; 0x92f8 <wifiSendP+0x14>
		str++;
    9302:	21 96       	adiw	r28, 0x01	; 1
    9304:	f3 cf       	rjmp	.-26     	; 0x92ec <wifiSendP+0x8>
	};

	return WIFI_OK;
}
    9306:	80 e0       	ldi	r24, 0x00	; 0
    9308:	df 91       	pop	r29
    930a:	cf 91       	pop	r28
    930c:	1f 91       	pop	r17
    930e:	08 95       	ret

00009310 <wifiSend>:

u8 wifiSend(char* str){
    9310:	1f 93       	push	r17
    9312:	cf 93       	push	r28
    9314:	df 93       	push	r29
    9316:	ec 01       	movw	r28, r24

	char c;
	while(str!=NULL){
    9318:	20 97       	sbiw	r28, 0x00	; 0
    931a:	49 f0       	breq	.+18     	; 0x932e <wifiSend+0x1e>
		c=*str;
    931c:	19 91       	ld	r17, Y+
		if(c==0)break;
    931e:	11 23       	and	r17, r17
    9320:	31 f0       	breq	.+12     	; 0x932e <wifiSend+0x1e>
		while(UartSendChar(c)==-1); //block if buffer full
    9322:	81 2f       	mov	r24, r17
    9324:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <UartSendChar>
    9328:	8f 3f       	cpi	r24, 0xFF	; 255
    932a:	d9 f3       	breq	.-10     	; 0x9322 <wifiSend+0x12>
    932c:	f5 cf       	rjmp	.-22     	; 0x9318 <wifiSend+0x8>
		str++;
	};
	return WIFI_OK;
}
    932e:	80 e0       	ldi	r24, 0x00	; 0
    9330:	df 91       	pop	r29
    9332:	cf 91       	pop	r28
    9334:	1f 91       	pop	r17
    9336:	08 95       	ret

00009338 <wifiGetIfAvailable>:

u8 wifiGetIfAvailable(void* buffer, u8 expectedSize) {
    9338:	ef 92       	push	r14
    933a:	ff 92       	push	r15
    933c:	1f 93       	push	r17
    933e:	cf 93       	push	r28
    9340:	df 93       	push	r29
    9342:	00 d0       	rcall	.+0      	; 0x9344 <wifiGetIfAvailable+0xc>
    9344:	cd b7       	in	r28, 0x3d	; 61
    9346:	de b7       	in	r29, 0x3e	; 62
    9348:	18 2f       	mov	r17, r24
	if (UartUnreadCount() < expectedSize) {
    934a:	69 83       	std	Y+1, r22	; 0x01
    934c:	9a 83       	std	Y+2, r25	; 0x02
    934e:	0e 94 40 3c 	call	0x7880	; 0x7880 <UartUnreadCount>
    9352:	69 81       	ldd	r22, Y+1	; 0x01
    9354:	9a 81       	ldd	r25, Y+2	; 0x02
    9356:	86 17       	cp	r24, r22
    9358:	68 f0       	brcs	.+26     	; 0x9374 <wifiGetIfAvailable+0x3c>
    935a:	e1 2e       	mov	r14, r17
    935c:	f9 2e       	mov	r15, r25
    935e:	16 0f       	add	r17, r22
		return WIFI_NODATA;
	}
	while (expectedSize--) {
    9360:	1e 15       	cp	r17, r14
    9362:	31 f0       	breq	.+12     	; 0x9370 <wifiGetIfAvailable+0x38>
		*(char*)buffer = UartReadChar() & 0xff;
    9364:	0e 94 46 3c 	call	0x788c	; 0x788c <UartReadChar>
    9368:	f7 01       	movw	r30, r14
    936a:	81 93       	st	Z+, r24
    936c:	7f 01       	movw	r14, r30
    936e:	f8 cf       	rjmp	.-16     	; 0x9360 <wifiGetIfAvailable+0x28>

u8 wifiGetIfAvailable(void* buffer, u8 expectedSize) {
	if (UartUnreadCount() < expectedSize) {
		return WIFI_NODATA;
	}
	while (expectedSize--) {
    9370:	80 e0       	ldi	r24, 0x00	; 0
    9372:	01 c0       	rjmp	.+2      	; 0x9376 <wifiGetIfAvailable+0x3e>
	return WIFI_OK;
}

u8 wifiGetIfAvailable(void* buffer, u8 expectedSize) {
	if (UartUnreadCount() < expectedSize) {
		return WIFI_NODATA;
    9374:	82 e0       	ldi	r24, 0x02	; 2
	while (expectedSize--) {
		*(char*)buffer = UartReadChar() & 0xff;
		buffer++;
	}
	return WIFI_OK;
}
    9376:	0f 90       	pop	r0
    9378:	0f 90       	pop	r0
    937a:	df 91       	pop	r29
    937c:	cf 91       	pop	r28
    937e:	1f 91       	pop	r17
    9380:	ff 90       	pop	r15
    9382:	ef 90       	pop	r14
    9384:	08 95       	ret

00009386 <wifiGetPB>:

u8 wifiGetPB(const char* str, char* rxbuf){
    9386:	ef 92       	push	r14
    9388:	ff 92       	push	r15
    938a:	0f 93       	push	r16
    938c:	1f 93       	push	r17
    938e:	cf 93       	push	r28
    9390:	df 93       	push	r29
    9392:	f8 2e       	mov	r15, r24
    9394:	e9 2e       	mov	r14, r25
    9396:	8b 01       	movw	r16, r22
	u8 c;
	s16 r;
	const char* p=str;
	char* buf=rxbuf;
	ClearVsyncCounter();
    9398:	0e 94 6d 3a 	call	0x74da	; 0x74da <ClearVsyncCounter>
}

u8 wifiGetPB(const char* str, char* rxbuf){
	u8 c;
	s16 r;
	const char* p=str;
    939c:	cf 2d       	mov	r28, r15
    939e:	de 2d       	mov	r29, r14
	char* buf=rxbuf;
	ClearVsyncCounter();

	while(1){

		r=UartReadChar();
    93a0:	0e 94 46 3c 	call	0x788c	; 0x788c <UartReadChar>
		if(r!=-1){
    93a4:	8f 3f       	cpi	r24, 0xFF	; 255
    93a6:	ef ef       	ldi	r30, 0xFF	; 255
    93a8:	9e 07       	cpc	r25, r30
    93aa:	99 f0       	breq	.+38     	; 0x93d2 <wifiGetPB+0x4c>

			c=r&(0xff);
    93ac:	28 2f       	mov	r18, r24

			if(buf!=NULL){
    93ae:	01 15       	cp	r16, r1
    93b0:	11 05       	cpc	r17, r1
    93b2:	19 f0       	breq	.+6      	; 0x93ba <wifiGetPB+0x34>
				*buf=c;
    93b4:	f8 01       	movw	r30, r16
    93b6:	81 93       	st	Z+, r24
    93b8:	8f 01       	movw	r16, r30
				buf++;
			}

			if(c==pgm_read_byte(p)){
    93ba:	fe 01       	movw	r30, r28
    93bc:	84 91       	lpm	r24, Z
    93be:	28 13       	cpse	r18, r24
    93c0:	06 c0       	rjmp	.+12     	; 0x93ce <wifiGetPB+0x48>
				p++;
    93c2:	21 96       	adiw	r28, 0x01	; 1
				if(pgm_read_byte(p)==0){
    93c4:	fe 01       	movw	r30, r28
    93c6:	84 91       	lpm	r24, Z
    93c8:	81 11       	cpse	r24, r1
    93ca:	03 c0       	rjmp	.+6      	; 0x93d2 <wifiGetPB+0x4c>
    93cc:	09 c0       	rjmp	.+18     	; 0x93e0 <wifiGetPB+0x5a>
					return WIFI_OK;
				}
			}else{
				//reset string compare
				p=str;
    93ce:	cf 2d       	mov	r28, r15
    93d0:	de 2d       	mov	r29, r14
			}
		}

		if(GetVsyncCounter()>TIMEOUT){
    93d2:	0e 94 68 3a 	call	0x74d0	; 0x74d0 <GetVsyncCounter>
    93d6:	89 35       	cpi	r24, 0x59	; 89
    93d8:	92 40       	sbci	r25, 0x02	; 2
    93da:	10 f3       	brcs	.-60     	; 0x93a0 <wifiGetPB+0x1a>
			return WIFI_TIMEOUT;
    93dc:	81 e0       	ldi	r24, 0x01	; 1
    93de:	01 c0       	rjmp	.+2      	; 0x93e2 <wifiGetPB+0x5c>
			}

			if(c==pgm_read_byte(p)){
				p++;
				if(pgm_read_byte(p)==0){
					return WIFI_OK;
    93e0:	80 e0       	ldi	r24, 0x00	; 0
		if(GetVsyncCounter()>TIMEOUT){
			return WIFI_TIMEOUT;
		}
	}

}
    93e2:	df 91       	pop	r29
    93e4:	cf 91       	pop	r28
    93e6:	1f 91       	pop	r17
    93e8:	0f 91       	pop	r16
    93ea:	ff 90       	pop	r15
    93ec:	ef 90       	pop	r14
    93ee:	08 95       	ret

000093f0 <wifiGetPBT>:

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    93f0:	cf 92       	push	r12
    93f2:	df 92       	push	r13
    93f4:	ef 92       	push	r14
    93f6:	ff 92       	push	r15
    93f8:	0f 93       	push	r16
    93fa:	1f 93       	push	r17
    93fc:	cf 93       	push	r28
    93fe:	df 93       	push	r29
    9400:	f8 2e       	mov	r15, r24
    9402:	e9 2e       	mov	r14, r25
    9404:	8b 01       	movw	r16, r22
    9406:	6a 01       	movw	r12, r20
    u8 c;
    s16 r;
    const char* p=str;
    char* buf=rxbuf;
    ClearVsyncCounter();
    9408:	0e 94 6d 3a 	call	0x74da	; 0x74da <ClearVsyncCounter>
}

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    u8 c;
    s16 r;
    const char* p=str;
    940c:	cf 2d       	mov	r28, r15
    940e:	de 2d       	mov	r29, r14
    char* buf=rxbuf;
    ClearVsyncCounter();

    while(1){

        r=UartReadChar();
    9410:	0e 94 46 3c 	call	0x788c	; 0x788c <UartReadChar>
        if(r!=-1){
    9414:	8f 3f       	cpi	r24, 0xFF	; 255
    9416:	ef ef       	ldi	r30, 0xFF	; 255
    9418:	9e 07       	cpc	r25, r30
    941a:	99 f0       	breq	.+38     	; 0x9442 <wifiGetPBT+0x52>

            c=r&(0xff);
    941c:	28 2f       	mov	r18, r24

            if(buf!=NULL){
    941e:	01 15       	cp	r16, r1
    9420:	11 05       	cpc	r17, r1
    9422:	19 f0       	breq	.+6      	; 0x942a <wifiGetPBT+0x3a>
                *buf=c;
    9424:	f8 01       	movw	r30, r16
    9426:	81 93       	st	Z+, r24
    9428:	8f 01       	movw	r16, r30
                buf++;
            }

            if(c==pgm_read_byte(p)){
    942a:	fe 01       	movw	r30, r28
    942c:	84 91       	lpm	r24, Z
    942e:	28 13       	cpse	r18, r24
    9430:	06 c0       	rjmp	.+12     	; 0x943e <wifiGetPBT+0x4e>
                p++;
    9432:	21 96       	adiw	r28, 0x01	; 1
                if(pgm_read_byte(p)==0){
    9434:	fe 01       	movw	r30, r28
    9436:	84 91       	lpm	r24, Z
    9438:	81 11       	cpse	r24, r1
    943a:	03 c0       	rjmp	.+6      	; 0x9442 <wifiGetPBT+0x52>
    943c:	09 c0       	rjmp	.+18     	; 0x9450 <wifiGetPBT+0x60>
                    return WIFI_OK;
                }
            }else{
                //reset string compare
                p=str;
    943e:	cf 2d       	mov	r28, r15
    9440:	de 2d       	mov	r29, r14
            }
        }

        if(GetVsyncCounter()>wifi_timeout){
    9442:	0e 94 68 3a 	call	0x74d0	; 0x74d0 <GetVsyncCounter>
    9446:	c8 16       	cp	r12, r24
    9448:	d9 06       	cpc	r13, r25
    944a:	10 f7       	brcc	.-60     	; 0x9410 <wifiGetPBT+0x20>
            return WIFI_TIMEOUT;
    944c:	81 e0       	ldi	r24, 0x01	; 1
    944e:	01 c0       	rjmp	.+2      	; 0x9452 <wifiGetPBT+0x62>
            }

            if(c==pgm_read_byte(p)){
                p++;
                if(pgm_read_byte(p)==0){
                    return WIFI_OK;
    9450:	80 e0       	ldi	r24, 0x00	; 0
        if(GetVsyncCounter()>wifi_timeout){
            return WIFI_TIMEOUT;
        }
    }

}
    9452:	df 91       	pop	r29
    9454:	cf 91       	pop	r28
    9456:	1f 91       	pop	r17
    9458:	0f 91       	pop	r16
    945a:	ff 90       	pop	r15
    945c:	ef 90       	pop	r14
    945e:	df 90       	pop	r13
    9460:	cf 90       	pop	r12
    9462:	08 95       	ret

00009464 <wifiRequestP>:

	return WIFI_OK;
}


u8 wifiRequestP(const char* strToSend, const char* strToWait){
    9464:	cf 93       	push	r28
    9466:	df 93       	push	r29
    9468:	eb 01       	movw	r28, r22
	wifiSendP(strToSend);
    946a:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    946e:	60 e0       	ldi	r22, 0x00	; 0
    9470:	70 e0       	ldi	r23, 0x00	; 0
    9472:	ce 01       	movw	r24, r28
    9474:	0e 94 c3 49 	call	0x9386	; 0x9386 <wifiGetPB>
    9478:	91 e0       	ldi	r25, 0x01	; 1
    947a:	81 30       	cpi	r24, 0x01	; 1
    947c:	09 f0       	breq	.+2      	; 0x9480 <wifiRequestP+0x1c>
    947e:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    9480:	89 2f       	mov	r24, r25
    9482:	df 91       	pop	r29
    9484:	cf 91       	pop	r28
    9486:	08 95       	ret

00009488 <wifiRequest>:

u8 wifiRequest(char* strToSend, const char* strToWait){
    9488:	cf 93       	push	r28
    948a:	df 93       	push	r29
    948c:	eb 01       	movw	r28, r22
	wifiSend(strToSend);
    948e:	0e 94 88 49 	call	0x9310	; 0x9310 <wifiSend>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    9492:	60 e0       	ldi	r22, 0x00	; 0
    9494:	70 e0       	ldi	r23, 0x00	; 0
    9496:	ce 01       	movw	r24, r28
    9498:	0e 94 c3 49 	call	0x9386	; 0x9386 <wifiGetPB>
    949c:	91 e0       	ldi	r25, 0x01	; 1
    949e:	81 30       	cpi	r24, 0x01	; 1
    94a0:	09 f0       	breq	.+2      	; 0x94a4 <wifiRequest+0x1c>
    94a2:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    94a4:	89 2f       	mov	r24, r25
    94a6:	df 91       	pop	r29
    94a8:	cf 91       	pop	r28
    94aa:	08 95       	ret

000094ac <wifiRequestPT>:

u8 wifiRequestPT(const char* strToSend, const char* strToWait, u16 wifi_timeout){
    94ac:	0f 93       	push	r16
    94ae:	1f 93       	push	r17
    94b0:	cf 93       	push	r28
    94b2:	df 93       	push	r29
    94b4:	00 d0       	rcall	.+0      	; 0x94b6 <wifiRequestPT+0xa>
    94b6:	cd b7       	in	r28, 0x3d	; 61
    94b8:	de b7       	in	r29, 0x3e	; 62
    94ba:	8b 01       	movw	r16, r22
    wifiSendP(strToSend);
    94bc:	49 83       	std	Y+1, r20	; 0x01
    94be:	5a 83       	std	Y+2, r21	; 0x02
    94c0:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
    if(wifiGetPBT(strToWait, NULL, wifi_timeout)==WIFI_TIMEOUT){
    94c4:	49 81       	ldd	r20, Y+1	; 0x01
    94c6:	5a 81       	ldd	r21, Y+2	; 0x02
    94c8:	60 e0       	ldi	r22, 0x00	; 0
    94ca:	70 e0       	ldi	r23, 0x00	; 0
    94cc:	c8 01       	movw	r24, r16
    94ce:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <wifiGetPBT>
    94d2:	91 e0       	ldi	r25, 0x01	; 1
    94d4:	81 30       	cpi	r24, 0x01	; 1
    94d6:	09 f0       	breq	.+2      	; 0x94da <wifiRequestPT+0x2e>
    94d8:	90 e0       	ldi	r25, 0x00	; 0
        return WIFI_TIMEOUT;
    }

    return WIFI_OK;
}
    94da:	89 2f       	mov	r24, r25
    94dc:	0f 90       	pop	r0
    94de:	0f 90       	pop	r0
    94e0:	df 91       	pop	r29
    94e2:	cf 91       	pop	r28
    94e4:	1f 91       	pop	r17
    94e6:	0f 91       	pop	r16
    94e8:	08 95       	ret

000094ea <initWifi>:

const u16 bauds[] PROGMEM = {370,246,184,92,60,44,30};
u8 initWifi(){
    94ea:	1f 93       	push	r17
    94ec:	cf 93       	push	r28
    94ee:	df 93       	push	r29
    s8 i = 0;
    u8 result;
    UCSR0A=(1<<U2X0); // double speed mode
    94f0:	82 e0       	ldi	r24, 0x02	; 2
    94f2:	80 93 c0 00 	sts	0x00C0, r24
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    94f6:	86 e0       	ldi	r24, 0x06	; 6
    94f8:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    94fc:	88 e1       	ldi	r24, 0x18	; 24
    94fe:	80 93 c1 00 	sts	0x00C1, r24
    return WIFI_OK;
}

const u16 bauds[] PROGMEM = {370,246,184,92,60,44,30};
u8 initWifi(){
    s8 i = 0;
    9502:	d0 e0       	ldi	r29, 0x00	; 0
    u8 result;
    UCSR0A=(1<<U2X0); // double speed mode
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    do {
        UBRR0L=pgm_read_byte(((u8*) &(bauds[i % 7])));
    9504:	17 e0       	ldi	r17, 0x07	; 7
    9506:	8d 2f       	mov	r24, r29
    9508:	61 2f       	mov	r22, r17
    950a:	0e 94 17 72 	call	0xe42e	; 0xe42e <__divmodqi4>
    950e:	e9 2f       	mov	r30, r25
    9510:	ee 0f       	add	r30, r30
    9512:	ff 0b       	sbc	r31, r31
    9514:	e5 54       	subi	r30, 0x45	; 69
    9516:	fd 4f       	sbci	r31, 0xFD	; 253
    9518:	84 91       	lpm	r24, Z
    951a:	80 93 c4 00 	sts	0x00C4, r24
        UBRR0H=pgm_read_byte(((u8*) &(bauds[i % 7]))+1);
    951e:	31 96       	adiw	r30, 0x01	; 1
    9520:	e4 91       	lpm	r30, Z
    9522:	e0 93 c5 00 	sts	0x00C5, r30
        WaitVsync(1);
    9526:	81 e0       	ldi	r24, 0x01	; 1
    9528:	90 e0       	ldi	r25, 0x00	; 0
    952a:	0e 94 0a 49 	call	0x9214	; 0x9214 <WaitVsync>
        result = wifiRequestPT(PSTR("AT\r\n"),PSTR("OK\r\n"), 30); 
    952e:	4e e1       	ldi	r20, 0x1E	; 30
    9530:	50 e0       	ldi	r21, 0x00	; 0
    9532:	66 eb       	ldi	r22, 0xB6	; 182
    9534:	72 e0       	ldi	r23, 0x02	; 2
    9536:	81 eb       	ldi	r24, 0xB1	; 177
    9538:	92 e0       	ldi	r25, 0x02	; 2
    953a:	0e 94 56 4a 	call	0x94ac	; 0x94ac <wifiRequestPT>
    953e:	c8 2f       	mov	r28, r24
    9540:	df 5f       	subi	r29, 0xFF	; 255
        i++;
    } while ((result != WIFI_OK) && (i < 14));
    9542:	88 23       	and	r24, r24
    9544:	19 f0       	breq	.+6      	; 0x954c <initWifi+0x62>
    9546:	de 30       	cpi	r29, 0x0E	; 14
    9548:	f1 f6       	brne	.-68     	; 0x9506 <initWifi+0x1c>
    954a:	19 c0       	rjmp	.+50     	; 0x957e <initWifi+0x94>
    if (result == WIFI_OK) {
        result = wifiRequestPT(PSTR("AT+UART_CUR=14400,8,1,0,0\r\n"),PSTR("OK\r\n"), 2*60); 
    954c:	48 e7       	ldi	r20, 0x78	; 120
    954e:	50 e0       	ldi	r21, 0x00	; 0
    9550:	6c ea       	ldi	r22, 0xAC	; 172
    9552:	72 e0       	ldi	r23, 0x02	; 2
    9554:	80 e9       	ldi	r24, 0x90	; 144
    9556:	92 e0       	ldi	r25, 0x02	; 2
    9558:	0e 94 56 4a 	call	0x94ac	; 0x94ac <wifiRequestPT>
    955c:	c8 2f       	mov	r28, r24
        if (result == WIFI_OK) {
    955e:	81 11       	cpse	r24, r1
    9560:	0e c0       	rjmp	.+28     	; 0x957e <initWifi+0x94>
            UBRR0L=pgm_read_byte(((u8*) &(bauds[1])));
    9562:	ed eb       	ldi	r30, 0xBD	; 189
    9564:	f2 e0       	ldi	r31, 0x02	; 2
    9566:	e4 91       	lpm	r30, Z
    9568:	e0 93 c4 00 	sts	0x00C4, r30
            UBRR0H=pgm_read_byte(((u8*) &(bauds[1]))+1); 
    956c:	ee eb       	ldi	r30, 0xBE	; 190
    956e:	f2 e0       	ldi	r31, 0x02	; 2
    9570:	e4 91       	lpm	r30, Z
    9572:	e0 93 c5 00 	sts	0x00C5, r30
            WaitVsync(1);
    9576:	81 e0       	ldi	r24, 0x01	; 1
    9578:	90 e0       	ldi	r25, 0x00	; 0
    957a:	0e 94 0a 49 	call	0x9214	; 0x9214 <WaitVsync>
        }
    }
    return result;
}
    957e:	8c 2f       	mov	r24, r28
    9580:	df 91       	pop	r29
    9582:	cf 91       	pop	r28
    9584:	1f 91       	pop	r17
    9586:	08 95       	ret

00009588 <disablePassthroughMode>:
	float pos_x;
	float pos_y;
	u8 zero;
} NetMessage;

u8 disablePassthroughMode() {
    9588:	cf 93       	push	r28
	u8 counter = 0;
	wifiSendP(PSTR("+++"));
    958a:	8c e8       	ldi	r24, 0x8C	; 140
    958c:	92 e0       	ldi	r25, 0x02	; 2
    958e:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	while(counter++ < 5) WaitUs(65535);
    9592:	c6 e0       	ldi	r28, 0x06	; 6
    9594:	c1 50       	subi	r28, 0x01	; 1
    9596:	29 f0       	breq	.+10     	; 0x95a2 <disablePassthroughMode+0x1a>
    9598:	8f ef       	ldi	r24, 0xFF	; 255
    959a:	9f ef       	ldi	r25, 0xFF	; 255
    959c:	0e 94 7e 3a 	call	0x74fc	; 0x74fc <WaitUs>
    95a0:	f9 cf       	rjmp	.-14     	; 0x9594 <disablePassthroughMode+0xc>
	InitUartTxBuffer();
    95a2:	0e 94 76 3c 	call	0x78ec	; 0x78ec <InitUartTxBuffer>
	InitUartRxBuffer();
    95a6:	0e 94 5d 3c 	call	0x78ba	; 0x78ba <InitUartRxBuffer>
	wifiRequestPT(PSTR("AT+CIPMODE=0\r\n"),PSTR("OK\r\n"), 2*60);
    95aa:	48 e7       	ldi	r20, 0x78	; 120
    95ac:	50 e0       	ldi	r21, 0x00	; 0
    95ae:	67 e8       	ldi	r22, 0x87	; 135
    95b0:	72 e0       	ldi	r23, 0x02	; 2
    95b2:	88 e7       	ldi	r24, 0x78	; 120
    95b4:	92 e0       	ldi	r25, 0x02	; 2
    95b6:	0e 94 56 4a 	call	0x94ac	; 0x94ac <wifiRequestPT>
	wifiRequestPT(PSTR("AT+CIPCLOSE\r\n"),PSTR("OK\r\n"), 2*60);
    95ba:	48 e7       	ldi	r20, 0x78	; 120
    95bc:	50 e0       	ldi	r21, 0x00	; 0
    95be:	63 e7       	ldi	r22, 0x73	; 115
    95c0:	72 e0       	ldi	r23, 0x02	; 2
    95c2:	85 e6       	ldi	r24, 0x65	; 101
    95c4:	92 e0       	ldi	r25, 0x02	; 2
    95c6:	0e 94 56 4a 	call	0x94ac	; 0x94ac <wifiRequestPT>
	return WIFI_OK;
}
    95ca:	80 e0       	ldi	r24, 0x00	; 0
    95cc:	cf 91       	pop	r28
    95ce:	08 95       	ret

000095d0 <activateNet>:

u8 activateNet() {
	disablePassthroughMode();
    95d0:	0e 94 c4 4a 	call	0x9588	; 0x9588 <disablePassthroughMode>
	InitUartTxBuffer();
    95d4:	0e 94 76 3c 	call	0x78ec	; 0x78ec <InitUartTxBuffer>
	InitUartRxBuffer();
    95d8:	0e 94 5d 3c 	call	0x78ba	; 0x78ba <InitUartRxBuffer>
	return initWifi();
    95dc:	0c 94 75 4a 	jmp	0x94ea	; 0x94ea <initWifi>

000095e0 <sendNetMessage>:
}

u8 sendNetMessage(NetMessage* msg) {
	return wifiSend((char *) msg);
    95e0:	0c 94 88 49 	jmp	0x9310	; 0x9310 <wifiSend>

000095e4 <getNetMessage>:
}

u8 getNetMessage(NetMessage* msg) {
	return wifiGetIfAvailable(msg, sizeof(msg));
    95e4:	62 e0       	ldi	r22, 0x02	; 2
    95e6:	0c 94 9c 49 	jmp	0x9338	; 0x9338 <wifiGetIfAvailable>

000095ea <hostNetGame>:
}

u8 hostNetGame(char* ssid) {
    95ea:	ef 92       	push	r14
    95ec:	ff 92       	push	r15
    95ee:	0f 93       	push	r16
    95f0:	1f 93       	push	r17
    95f2:	cf 93       	push	r28
    95f4:	df 93       	push	r29
    95f6:	cd b7       	in	r28, 0x3d	; 61
    95f8:	de b7       	in	r29, 0x3e	; 62
    95fa:	c0 54       	subi	r28, 0x40	; 64
    95fc:	d1 09       	sbc	r29, r1
    95fe:	0f b6       	in	r0, 0x3f	; 63
    9600:	f8 94       	cli
    9602:	de bf       	out	0x3e, r29	; 62
    9604:	0f be       	out	0x3f, r0	; 63
    9606:	cd bf       	out	0x3d, r28	; 61
    9608:	8c 01       	movw	r16, r24
	char buf[64];
	
	// Set SoftAP mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=2\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    960a:	60 e6       	ldi	r22, 0x60	; 96
    960c:	72 e0       	ldi	r23, 0x02	; 2
    960e:	8e e4       	ldi	r24, 0x4E	; 78
    9610:	92 e0       	ldi	r25, 0x02	; 2
    9612:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    9616:	81 11       	cpse	r24, r1
    9618:	4a c0       	rjmp	.+148    	; 0x96ae <hostNetGame+0xc4>
	// Disable DHCP...
	if (wifiRequestP(PSTR("AT+CWDHCP_CUR=0,0\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    961a:	69 e4       	ldi	r22, 0x49	; 73
    961c:	72 e0       	ldi	r23, 0x02	; 2
    961e:	85 e3       	ldi	r24, 0x35	; 53
    9620:	92 e0       	ldi	r25, 0x02	; 2
    9622:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    9626:	81 11       	cpse	r24, r1
    9628:	42 c0       	rjmp	.+132    	; 0x96ae <hostNetGame+0xc4>
	// Set SopftAP IP address
	if (wifiRequestP(PSTR("AT+CIPAP_CUR=\"192.168.4.1\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    962a:	60 e3       	ldi	r22, 0x30	; 48
    962c:	72 e0       	ldi	r23, 0x02	; 2
    962e:	83 e1       	ldi	r24, 0x13	; 19
    9630:	92 e0       	ldi	r25, 0x02	; 2
    9632:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    9636:	81 11       	cpse	r24, r1
    9638:	3a c0       	rjmp	.+116    	; 0x96ae <hostNetGame+0xc4>
	// Get SoftAP MAC address...
	wifiSendP(PSTR("AT+CIPAPMAC_CUR?\r\n"));
    963a:	80 e0       	ldi	r24, 0x00	; 0
    963c:	92 e0       	ldi	r25, 0x02	; 2
    963e:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
    9642:	ce 01       	movw	r24, r28
    9644:	01 96       	adiw	r24, 0x01	; 1
    9646:	7c 01       	movw	r14, r24
    9648:	bc 01       	movw	r22, r24
    964a:	8b ef       	ldi	r24, 0xFB	; 251
    964c:	91 e0       	ldi	r25, 0x01	; 1
    964e:	0e 94 c3 49 	call	0x9386	; 0x9386 <wifiGetPB>
    9652:	81 30       	cpi	r24, 0x01	; 1
    9654:	91 f0       	breq	.+36     	; 0x967a <hostNetGame+0x90>
		ssid[0] = 'T';
    9656:	84 e5       	ldi	r24, 0x54	; 84
    9658:	f8 01       	movw	r30, r16
    965a:	80 83       	st	Z, r24
		ssid[1] = 'F';
    965c:	86 e4       	ldi	r24, 0x46	; 70
    965e:	81 83       	std	Z+1, r24	; 0x01
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9660:	8c a5       	ldd	r24, Y+44	; 0x2c
    9662:	82 83       	std	Z+2, r24	; 0x02
		   ssid[idx++] = buf[i+1];
    9664:	8d a5       	ldd	r24, Y+45	; 0x2d
    9666:	83 83       	std	Z+3, r24	; 0x03
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9668:	8f a5       	ldd	r24, Y+47	; 0x2f
    966a:	84 83       	std	Z+4, r24	; 0x04
		   ssid[idx++] = buf[i+1];
    966c:	88 a9       	ldd	r24, Y+48	; 0x30
    966e:	85 83       	std	Z+5, r24	; 0x05
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9670:	8a a9       	ldd	r24, Y+50	; 0x32
    9672:	86 83       	std	Z+6, r24	; 0x06
		   ssid[idx++] = buf[i+1];
    9674:	8b a9       	ldd	r24, Y+51	; 0x33
    9676:	87 83       	std	Z+7, r24	; 0x07
		}
		ssid[8] = 0;
    9678:	10 86       	std	Z+8, r1	; 0x08
	}
	ssid = strupr(ssid);
    967a:	c8 01       	movw	r24, r16
    967c:	0e 94 7c 74 	call	0xe8f8	; 0xe8f8 <strupr>
	sprintf(buf, "AT+CWSAP_CUR=\"%s\",\"T4nkFuN3t\",5,3,1\r\n", ssid);
    9680:	9f 93       	push	r25
    9682:	8f 93       	push	r24
    9684:	8d e0       	ldi	r24, 0x0D	; 13
    9686:	91 e0       	ldi	r25, 0x01	; 1
    9688:	9f 93       	push	r25
    968a:	8f 93       	push	r24
    968c:	ff 92       	push	r15
    968e:	ef 92       	push	r14
    9690:	0e 94 86 74 	call	0xe90c	; 0xe90c <sprintf>
	
	// Setup local access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9694:	66 ef       	ldi	r22, 0xF6	; 246
    9696:	71 e0       	ldi	r23, 0x01	; 1
    9698:	c7 01       	movw	r24, r14
    969a:	0e 94 44 4a 	call	0x9488	; 0x9488 <wifiRequest>
    969e:	0f 90       	pop	r0
    96a0:	0f 90       	pop	r0
    96a2:	0f 90       	pop	r0
    96a4:	0f 90       	pop	r0
    96a6:	0f 90       	pop	r0
    96a8:	0f 90       	pop	r0
    96aa:	88 23       	and	r24, r24
    96ac:	11 f0       	breq	.+4      	; 0x96b2 <hostNetGame+0xc8>
    96ae:	11 e0       	ldi	r17, 0x01	; 1
    96b0:	15 c0       	rjmp	.+42     	; 0x96dc <hostNetGame+0xf2>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.2\",1001,2233,0\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    96b2:	61 ef       	ldi	r22, 0xF1	; 241
    96b4:	71 e0       	ldi	r23, 0x01	; 1
    96b6:	83 ec       	ldi	r24, 0xC3	; 195
    96b8:	91 e0       	ldi	r25, 0x01	; 1
    96ba:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    96be:	81 11       	cpse	r24, r1
    96c0:	f6 cf       	rjmp	.-20     	; 0x96ae <hostNetGame+0xc4>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    96c2:	6e eb       	ldi	r22, 0xBE	; 190
    96c4:	71 e0       	ldi	r23, 0x01	; 1
    96c6:	8f ea       	ldi	r24, 0xAF	; 175
    96c8:	91 e0       	ldi	r25, 0x01	; 1
    96ca:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    96ce:	18 2f       	mov	r17, r24
    96d0:	81 11       	cpse	r24, r1
    96d2:	ed cf       	rjmp	.-38     	; 0x96ae <hostNetGame+0xc4>
	wifiSendP(PSTR("AT+CIPSEND\r\n"));
    96d4:	82 ea       	ldi	r24, 0xA2	; 162
    96d6:	91 e0       	ldi	r25, 0x01	; 1
    96d8:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	return WIFI_OK;
}
    96dc:	81 2f       	mov	r24, r17
    96de:	c0 5c       	subi	r28, 0xC0	; 192
    96e0:	df 4f       	sbci	r29, 0xFF	; 255
    96e2:	0f b6       	in	r0, 0x3f	; 63
    96e4:	f8 94       	cli
    96e6:	de bf       	out	0x3e, r29	; 62
    96e8:	0f be       	out	0x3f, r0	; 63
    96ea:	cd bf       	out	0x3d, r28	; 61
    96ec:	df 91       	pop	r29
    96ee:	cf 91       	pop	r28
    96f0:	1f 91       	pop	r17
    96f2:	0f 91       	pop	r16
    96f4:	ff 90       	pop	r15
    96f6:	ef 90       	pop	r14
    96f8:	08 95       	ret

000096fa <joinNetGame>:

u8 joinNetGame(const char* ssid) {
    96fa:	0f 93       	push	r16
    96fc:	1f 93       	push	r17
    96fe:	cf 93       	push	r28
    9700:	df 93       	push	r29
    9702:	cd b7       	in	r28, 0x3d	; 61
    9704:	de b7       	in	r29, 0x3e	; 62
    9706:	c0 54       	subi	r28, 0x40	; 64
    9708:	d1 09       	sbc	r29, r1
    970a:	0f b6       	in	r0, 0x3f	; 63
    970c:	f8 94       	cli
    970e:	de bf       	out	0x3e, r29	; 62
    9710:	0f be       	out	0x3f, r0	; 63
    9712:	cd bf       	out	0x3d, r28	; 61
	char buf[64];
	
	sprintf(buf, "AT+CWJAP_CUR=\"%s\",\"T4nkFuN3t\"\r\n", ssid);
    9714:	9f 93       	push	r25
    9716:	8f 93       	push	r24
    9718:	83 e3       	ldi	r24, 0x33	; 51
    971a:	91 e0       	ldi	r25, 0x01	; 1
    971c:	9f 93       	push	r25
    971e:	8f 93       	push	r24
    9720:	8e 01       	movw	r16, r28
    9722:	0f 5f       	subi	r16, 0xFF	; 255
    9724:	1f 4f       	sbci	r17, 0xFF	; 255
    9726:	1f 93       	push	r17
    9728:	0f 93       	push	r16
    972a:	0e 94 86 74 	call	0xe90c	; 0xe90c <sprintf>
	
	// Set Station mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    972e:	6d e9       	ldi	r22, 0x9D	; 157
    9730:	71 e0       	ldi	r23, 0x01	; 1
    9732:	8b e8       	ldi	r24, 0x8B	; 139
    9734:	91 e0       	ldi	r25, 0x01	; 1
    9736:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    973a:	0f 90       	pop	r0
    973c:	0f 90       	pop	r0
    973e:	0f 90       	pop	r0
    9740:	0f 90       	pop	r0
    9742:	0f 90       	pop	r0
    9744:	0f 90       	pop	r0
    9746:	88 23       	and	r24, r24
    9748:	11 f0       	breq	.+4      	; 0x974e <joinNetGame+0x54>
    974a:	11 e0       	ldi	r17, 0x01	; 1
    974c:	34 c0       	rjmp	.+104    	; 0x97b6 <joinNetGame+0xbc>
	// Disable DHCP...
	if (wifiRequestP(PSTR("AT+CWDHCP_CUR=1,0\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    974e:	66 e8       	ldi	r22, 0x86	; 134
    9750:	71 e0       	ldi	r23, 0x01	; 1
    9752:	82 e7       	ldi	r24, 0x72	; 114
    9754:	91 e0       	ldi	r25, 0x01	; 1
    9756:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    975a:	81 11       	cpse	r24, r1
    975c:	f6 cf       	rjmp	.-20     	; 0x974a <joinNetGame+0x50>
	// List access points...
	if (wifiRequestP(PSTR("AT+CWLAP\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    975e:	6d e6       	ldi	r22, 0x6D	; 109
    9760:	71 e0       	ldi	r23, 0x01	; 1
    9762:	82 e6       	ldi	r24, 0x62	; 98
    9764:	91 e0       	ldi	r25, 0x01	; 1
    9766:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    976a:	81 11       	cpse	r24, r1
    976c:	ee cf       	rjmp	.-36     	; 0x974a <joinNetGame+0x50>
	// Connect to access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    976e:	6d e5       	ldi	r22, 0x5D	; 93
    9770:	71 e0       	ldi	r23, 0x01	; 1
    9772:	c8 01       	movw	r24, r16
    9774:	0e 94 44 4a 	call	0x9488	; 0x9488 <wifiRequest>
    9778:	81 11       	cpse	r24, r1
    977a:	e7 cf       	rjmp	.-50     	; 0x974a <joinNetGame+0x50>
	// Set station IP address
	if (wifiRequestP(PSTR("AT+CIPSTA_CUR=\"192.168.4.2\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    977c:	68 e5       	ldi	r22, 0x58	; 88
    977e:	71 e0       	ldi	r23, 0x01	; 1
    9780:	8a e3       	ldi	r24, 0x3A	; 58
    9782:	91 e0       	ldi	r25, 0x01	; 1
    9784:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    9788:	81 11       	cpse	r24, r1
    978a:	df cf       	rjmp	.-66     	; 0x974a <joinNetGame+0x50>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.1\",2233,1001\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    978c:	65 e3       	ldi	r22, 0x35	; 53
    978e:	71 e0       	ldi	r23, 0x01	; 1
    9790:	89 e0       	ldi	r24, 0x09	; 9
    9792:	91 e0       	ldi	r25, 0x01	; 1
    9794:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    9798:	81 11       	cpse	r24, r1
    979a:	d7 cf       	rjmp	.-82     	; 0x974a <joinNetGame+0x50>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    979c:	64 e0       	ldi	r22, 0x04	; 4
    979e:	71 e0       	ldi	r23, 0x01	; 1
    97a0:	85 ef       	ldi	r24, 0xF5	; 245
    97a2:	90 e0       	ldi	r25, 0x00	; 0
    97a4:	0e 94 32 4a 	call	0x9464	; 0x9464 <wifiRequestP>
    97a8:	18 2f       	mov	r17, r24
    97aa:	81 11       	cpse	r24, r1
    97ac:	ce cf       	rjmp	.-100    	; 0x974a <joinNetGame+0x50>
	wifiSendP(PSTR("AT+CIPSEND\r\n"));
    97ae:	88 ee       	ldi	r24, 0xE8	; 232
    97b0:	90 e0       	ldi	r25, 0x00	; 0
    97b2:	0e 94 72 49 	call	0x92e4	; 0x92e4 <wifiSendP>
	return WIFI_OK;
}
    97b6:	81 2f       	mov	r24, r17
    97b8:	c0 5c       	subi	r28, 0xC0	; 192
    97ba:	df 4f       	sbci	r29, 0xFF	; 255
    97bc:	0f b6       	in	r0, 0x3f	; 63
    97be:	f8 94       	cli
    97c0:	de bf       	out	0x3e, r29	; 62
    97c2:	0f be       	out	0x3f, r0	; 63
    97c4:	cd bf       	out	0x3d, r28	; 61
    97c6:	df 91       	pop	r29
    97c8:	cf 91       	pop	r28
    97ca:	1f 91       	pop	r17
    97cc:	0f 91       	pop	r16
    97ce:	08 95       	ret

000097d0 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    97d0:	fc 01       	movw	r30, r24
	anim->looped = 0;
    97d2:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    97d4:	93 81       	ldd	r25, Z+3	; 0x03
    97d6:	9f 5f       	subi	r25, 0xFF	; 255
    97d8:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    97da:	22 81       	ldd	r18, Z+2	; 0x02
    97dc:	80 81       	ld	r24, Z
    97de:	92 17       	cp	r25, r18
    97e0:	38 f4       	brcc	.+14     	; 0x97f0 <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    97e2:	e8 0f       	add	r30, r24
    97e4:	f1 1d       	adc	r31, r1
    97e6:	e8 0f       	add	r30, r24
    97e8:	f1 1d       	adc	r31, r1
    97ea:	86 81       	ldd	r24, Z+6	; 0x06
    97ec:	97 81       	ldd	r25, Z+7	; 0x07
    97ee:	08 95       	ret
	}
	anim->frame_count = 0;
    97f0:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    97f2:	90 e0       	ldi	r25, 0x00	; 0
    97f4:	01 96       	adiw	r24, 0x01	; 1
    97f6:	61 81       	ldd	r22, Z+1	; 0x01
    97f8:	70 e0       	ldi	r23, 0x00	; 0
    97fa:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    97fe:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9800:	81 11       	cpse	r24, r1
    9802:	02 c0       	rjmp	.+4      	; 0x9808 <LBGetNextFrame+0x38>
    9804:	21 e0       	ldi	r18, 0x01	; 1
    9806:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    9808:	99 27       	eor	r25, r25
    980a:	03 96       	adiw	r24, 0x03	; 3
    980c:	88 0f       	add	r24, r24
    980e:	99 1f       	adc	r25, r25
    9810:	e8 0f       	add	r30, r24
    9812:	f9 1f       	adc	r31, r25
    9814:	80 81       	ld	r24, Z
    9816:	91 81       	ldd	r25, Z+1	; 0x01
}
    9818:	08 95       	ret

0000981a <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    981a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    981c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    981e:	93 81       	ldd	r25, Z+3	; 0x03
    9820:	9f 5f       	subi	r25, 0xFF	; 255
    9822:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9824:	22 81       	ldd	r18, Z+2	; 0x02
    9826:	80 81       	ld	r24, Z
    9828:	92 17       	cp	r25, r18
    982a:	e0 f0       	brcs	.+56     	; 0x9864 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    982c:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    982e:	95 81       	ldd	r25, Z+5	; 0x05
    9830:	99 23       	and	r25, r25
    9832:	49 f0       	breq	.+18     	; 0x9846 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    9834:	81 50       	subi	r24, 0x01	; 1
    9836:	10 f0       	brcs	.+4      	; 0x983c <LBGetNextFrameReverse+0x22>
    9838:	80 83       	st	Z, r24
    983a:	13 c0       	rjmp	.+38     	; 0x9862 <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    983c:	10 82       	st	Z, r1
			anim->looped = 1;
    983e:	81 e0       	ldi	r24, 0x01	; 1
    9840:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    9842:	15 82       	std	Z+5, r1	; 0x05
    9844:	0e c0       	rjmp	.+28     	; 0x9862 <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9846:	21 81       	ldd	r18, Z+1	; 0x01
    9848:	90 e0       	ldi	r25, 0x00	; 0
    984a:	01 96       	adiw	r24, 0x01	; 1
    984c:	62 2f       	mov	r22, r18
    984e:	70 e0       	ldi	r23, 0x00	; 0
    9850:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    9854:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    9856:	81 11       	cpse	r24, r1
    9858:	04 c0       	rjmp	.+8      	; 0x9862 <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    985a:	81 e0       	ldi	r24, 0x01	; 1
    985c:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    985e:	21 50       	subi	r18, 0x01	; 1
    9860:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    9862:	80 81       	ld	r24, Z
    9864:	e8 0f       	add	r30, r24
    9866:	f1 1d       	adc	r31, r1
    9868:	e8 0f       	add	r30, r24
    986a:	f1 1d       	adc	r31, r1
    986c:	86 81       	ldd	r24, Z+6	; 0x06
    986e:	97 81       	ldd	r25, Z+7	; 0x07
}
    9870:	08 95       	ret

00009872 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9872:	0f 93       	push	r16
    9874:	1f 93       	push	r17
    9876:	cf 93       	push	r28
    9878:	df 93       	push	r29
    987a:	1f 92       	push	r1
    987c:	cd b7       	in	r28, 0x3d	; 61
    987e:	de b7       	in	r29, 0x3e	; 62
    9880:	8c 01       	movw	r16, r24
	p->held = ReadJoypad(index);
    9882:	86 2f       	mov	r24, r22
    9884:	69 83       	std	Y+1, r22	; 0x01
    9886:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <ReadJoypad>
    988a:	d8 01       	movw	r26, r16
    988c:	15 96       	adiw	r26, 0x05	; 5
    988e:	9c 93       	st	X, r25
    9890:	8e 93       	st	-X, r24
    9892:	14 97       	sbiw	r26, 0x04	; 4
    9894:	69 81       	ldd	r22, Y+1	; 0x01
    9896:	e6 2f       	mov	r30, r22
    9898:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    989a:	00 97       	sbiw	r24, 0x00	; 0
    989c:	51 f0       	breq	.+20     	; 0x98b2 <LBGetJoyPadState+0x40>
    989e:	df 01       	movw	r26, r30
    98a0:	aa 0f       	add	r26, r26
    98a2:	bb 1f       	adc	r27, r27
    98a4:	a4 5a       	subi	r26, 0xA4	; 164
    98a6:	b5 4f       	sbci	r27, 0xF5	; 245
    98a8:	2d 91       	ld	r18, X+
    98aa:	3c 91       	ld	r19, X
    98ac:	82 17       	cp	r24, r18
    98ae:	93 07       	cpc	r25, r19
    98b0:	21 f0       	breq	.+8      	; 0x98ba <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    98b2:	d8 01       	movw	r26, r16
    98b4:	16 96       	adiw	r26, 0x06	; 6
    98b6:	1c 92       	st	X, r1
    98b8:	07 c0       	rjmp	.+14     	; 0x98c8 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    98ba:	d8 01       	movw	r26, r16
    98bc:	16 96       	adiw	r26, 0x06	; 6
    98be:	2c 91       	ld	r18, X
    98c0:	16 97       	sbiw	r26, 0x06	; 6
    98c2:	2f 5f       	subi	r18, 0xFF	; 255
    98c4:	16 96       	adiw	r26, 0x06	; 6
    98c6:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    98c8:	ee 0f       	add	r30, r30
    98ca:	ff 1f       	adc	r31, r31
    98cc:	e4 5a       	subi	r30, 0xA4	; 164
    98ce:	f5 4f       	sbci	r31, 0xF5	; 245
    98d0:	20 81       	ld	r18, Z
    98d2:	31 81       	ldd	r19, Z+1	; 0x01
    98d4:	a9 01       	movw	r20, r18
    98d6:	40 95       	com	r20
    98d8:	50 95       	com	r21
    98da:	48 23       	and	r20, r24
    98dc:	59 23       	and	r21, r25
    98de:	d8 01       	movw	r26, r16
    98e0:	11 96       	adiw	r26, 0x01	; 1
    98e2:	5c 93       	st	X, r21
    98e4:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    98e6:	ac 01       	movw	r20, r24
    98e8:	40 95       	com	r20
    98ea:	50 95       	com	r21
    98ec:	24 23       	and	r18, r20
    98ee:	35 23       	and	r19, r21
    98f0:	13 96       	adiw	r26, 0x03	; 3
    98f2:	3c 93       	st	X, r19
    98f4:	2e 93       	st	-X, r18
    98f6:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    98f8:	91 83       	std	Z+1, r25	; 0x01
    98fa:	80 83       	st	Z, r24
}
    98fc:	0f 90       	pop	r0
    98fe:	df 91       	pop	r29
    9900:	cf 91       	pop	r28
    9902:	1f 91       	pop	r17
    9904:	0f 91       	pop	r16
    9906:	08 95       	ret

00009908 <LBPrintStr>:
	}
}
*/

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    9908:	af 92       	push	r10
    990a:	bf 92       	push	r11
    990c:	cf 92       	push	r12
    990e:	df 92       	push	r13
    9910:	ef 92       	push	r14
    9912:	ff 92       	push	r15
    9914:	0f 93       	push	r16
    9916:	1f 93       	push	r17
    9918:	cf 93       	push	r28
    991a:	df 93       	push	r29
    991c:	1f 92       	push	r1
    991e:	cd b7       	in	r28, 0x3d	; 61
    9920:	de b7       	in	r29, 0x3e	; 62
    9922:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    9924:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    9926:	c6 2e       	mov	r12, r22
    9928:	d1 2c       	mov	r13, r1
    992a:	90 e0       	ldi	r25, 0x00	; 0
    992c:	5c 01       	movw	r10, r24
    992e:	a4 1a       	sub	r10, r20
    9930:	b5 0a       	sbc	r11, r21
    9932:	80 2f       	mov	r24, r16
    9934:	8e 19       	sub	r24, r14
}
*/

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    9936:	82 17       	cp	r24, r18
    9938:	60 f4       	brcc	.+24     	; 0x9952 <LBPrintStr+0x4a>
    993a:	c5 01       	movw	r24, r10
    993c:	80 0f       	add	r24, r16
    993e:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    9940:	f8 01       	movw	r30, r16
    9942:	41 91       	ld	r20, Z+
    9944:	8f 01       	movw	r16, r30
    9946:	b6 01       	movw	r22, r12
    9948:	29 83       	std	Y+1, r18	; 0x01
    994a:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
    994e:	29 81       	ldd	r18, Y+1	; 0x01
    9950:	f0 cf       	rjmp	.-32     	; 0x9932 <LBPrintStr+0x2a>
	}
}
    9952:	0f 90       	pop	r0
    9954:	df 91       	pop	r29
    9956:	cf 91       	pop	r28
    9958:	1f 91       	pop	r17
    995a:	0f 91       	pop	r16
    995c:	ff 90       	pop	r15
    995e:	ef 90       	pop	r14
    9960:	df 90       	pop	r13
    9962:	cf 90       	pop	r12
    9964:	bf 90       	pop	r11
    9966:	af 90       	pop	r10
    9968:	08 95       	ret

0000996a <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    996a:	af 92       	push	r10
    996c:	cf 92       	push	r12
    996e:	ef 92       	push	r14
    9970:	ff 92       	push	r15
    9972:	0f 93       	push	r16
    9974:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9976:	70 e0       	ldi	r23, 0x00	; 0
    9978:	f1 2c       	mov	r15, r1
    997a:	fb 01       	movw	r30, r22
    997c:	e2 0f       	add	r30, r18
    997e:	f1 1d       	adc	r31, r1
    9980:	ee 16       	cp	r14, r30
    9982:	ff 06       	cpc	r15, r31
    9984:	a4 f4       	brge	.+40     	; 0x99ae <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9986:	ea 0c       	add	r14, r10
    9988:	f1 1c       	adc	r15, r1
    998a:	6e 15       	cp	r22, r14
    998c:	7f 05       	cpc	r23, r15
    998e:	7c f4       	brge	.+30     	; 0x99ae <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9990:	28 2f       	mov	r18, r24
    9992:	30 e0       	ldi	r19, 0x00	; 0
    9994:	10 e0       	ldi	r17, 0x00	; 0
    9996:	c9 01       	movw	r24, r18
    9998:	84 0f       	add	r24, r20
    999a:	91 1d       	adc	r25, r1
    999c:	08 17       	cp	r16, r24
    999e:	19 07       	cpc	r17, r25
    99a0:	34 f4       	brge	.+12     	; 0x99ae <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    99a2:	0c 0d       	add	r16, r12
    99a4:	11 1d       	adc	r17, r1
    99a6:	81 e0       	ldi	r24, 0x01	; 1
    99a8:	20 17       	cp	r18, r16
    99aa:	31 07       	cpc	r19, r17
    99ac:	0c f0       	brlt	.+2      	; 0x99b0 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    99ae:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    99b0:	1f 91       	pop	r17
    99b2:	0f 91       	pop	r16
    99b4:	ff 90       	pop	r15
    99b6:	ef 90       	pop	r14
    99b8:	cf 90       	pop	r12
    99ba:	af 90       	pop	r10
    99bc:	08 95       	ret

000099be <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    99be:	2f 92       	push	r2
    99c0:	3f 92       	push	r3
    99c2:	4f 92       	push	r4
    99c4:	5f 92       	push	r5
    99c6:	6f 92       	push	r6
    99c8:	7f 92       	push	r7
    99ca:	8f 92       	push	r8
    99cc:	9f 92       	push	r9
    99ce:	af 92       	push	r10
    99d0:	bf 92       	push	r11
    99d2:	cf 92       	push	r12
    99d4:	df 92       	push	r13
    99d6:	ef 92       	push	r14
    99d8:	ff 92       	push	r15
    99da:	0f 93       	push	r16
    99dc:	1f 93       	push	r17
    99de:	cf 93       	push	r28
    99e0:	df 93       	push	r29
    99e2:	00 d0       	rcall	.+0      	; 0x99e4 <LBLineIntersect+0x26>
    99e4:	00 d0       	rcall	.+0      	; 0x99e6 <LBLineIntersect+0x28>
    99e6:	cd b7       	in	r28, 0x3d	; 61
    99e8:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    99ea:	f1 2c       	mov	r15, r1
    99ec:	8a 2c       	mov	r8, r10
    99ee:	91 2c       	mov	r9, r1
    99f0:	8e 18       	sub	r8, r14
    99f2:	9f 08       	sbc	r9, r15
    99f4:	a8 2e       	mov	r10, r24
    99f6:	b1 2c       	mov	r11, r1
    99f8:	24 2e       	mov	r2, r20
    99fa:	31 2c       	mov	r3, r1
    99fc:	2a 18       	sub	r2, r10
    99fe:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    9a00:	10 e0       	ldi	r17, 0x00	; 0
    9a02:	d1 2c       	mov	r13, r1
    9a04:	c0 1a       	sub	r12, r16
    9a06:	d1 0a       	sbc	r13, r17
    9a08:	46 2f       	mov	r20, r22
    9a0a:	50 e0       	ldi	r21, 0x00	; 0
    9a0c:	5c 83       	std	Y+4, r21	; 0x04
    9a0e:	4b 83       	std	Y+3, r20	; 0x03
    9a10:	82 2f       	mov	r24, r18
    9a12:	90 e0       	ldi	r25, 0x00	; 0
    9a14:	9a 83       	std	Y+2, r25	; 0x02
    9a16:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9a18:	82 9c       	mul	r8, r2
    9a1a:	90 01       	movw	r18, r0
    9a1c:	83 9c       	mul	r8, r3
    9a1e:	30 0d       	add	r19, r0
    9a20:	92 9c       	mul	r9, r2
    9a22:	30 0d       	add	r19, r0
    9a24:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    9a26:	ca 01       	movw	r24, r20
    9a28:	e9 81       	ldd	r30, Y+1	; 0x01
    9a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    9a2c:	8e 1b       	sub	r24, r30
    9a2e:	9f 0b       	sbc	r25, r31
    9a30:	c8 9e       	mul	r12, r24
    9a32:	b0 01       	movw	r22, r0
    9a34:	c9 9e       	mul	r12, r25
    9a36:	70 0d       	add	r23, r0
    9a38:	d8 9e       	mul	r13, r24
    9a3a:	70 0d       	add	r23, r0
    9a3c:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9a3e:	62 0f       	add	r22, r18
    9a40:	73 1f       	adc	r23, r19
    9a42:	88 27       	eor	r24, r24
    9a44:	77 fd       	sbrc	r23, 7
    9a46:	80 95       	com	r24
    9a48:	98 2f       	mov	r25, r24
    9a4a:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    9a4e:	2b 01       	movw	r4, r22
    9a50:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9a52:	20 e0       	ldi	r18, 0x00	; 0
    9a54:	30 e0       	ldi	r19, 0x00	; 0
    9a56:	a9 01       	movw	r20, r18
    9a58:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    9a5c:	88 23       	and	r24, r24
    9a5e:	09 f4       	brne	.+2      	; 0x9a62 <LBLineIntersect+0xa4>
    9a60:	6c c0       	rjmp	.+216    	; 0x9b3a <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a62:	4b 81       	ldd	r20, Y+3	; 0x03
    9a64:	5c 81       	ldd	r21, Y+4	; 0x04
    9a66:	4e 19       	sub	r20, r14
    9a68:	5f 09       	sbc	r21, r15
    9a6a:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9a6c:	0a 19       	sub	r16, r10
    9a6e:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a70:	c4 9e       	mul	r12, r20
    9a72:	c0 01       	movw	r24, r0
    9a74:	c5 9e       	mul	r12, r21
    9a76:	90 0d       	add	r25, r0
    9a78:	d4 9e       	mul	r13, r20
    9a7a:	90 0d       	add	r25, r0
    9a7c:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9a7e:	80 9e       	mul	r8, r16
    9a80:	b0 01       	movw	r22, r0
    9a82:	81 9e       	mul	r8, r17
    9a84:	70 0d       	add	r23, r0
    9a86:	90 9e       	mul	r9, r16
    9a88:	70 0d       	add	r23, r0
    9a8a:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a8c:	68 0f       	add	r22, r24
    9a8e:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9a90:	88 27       	eor	r24, r24
    9a92:	77 fd       	sbrc	r23, 7
    9a94:	80 95       	com	r24
    9a96:	98 2f       	mov	r25, r24
    9a98:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a9c:	a3 01       	movw	r20, r6
    9a9e:	92 01       	movw	r18, r4
    9aa0:	0e 94 b6 72 	call	0xe56c	; 0xe56c <__divsf3>
    9aa4:	4b 01       	movw	r8, r22
    9aa6:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9aa8:	20 e0       	ldi	r18, 0x00	; 0
    9aaa:	30 e0       	ldi	r19, 0x00	; 0
    9aac:	a9 01       	movw	r20, r18
    9aae:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    9ab2:	87 fd       	sbrc	r24, 7
    9ab4:	42 c0       	rjmp	.+132    	; 0x9b3a <LBLineIntersect+0x17c>
    9ab6:	20 e0       	ldi	r18, 0x00	; 0
    9ab8:	30 e0       	ldi	r19, 0x00	; 0
    9aba:	40 e8       	ldi	r20, 0x80	; 128
    9abc:	5f e3       	ldi	r21, 0x3F	; 63
    9abe:	c5 01       	movw	r24, r10
    9ac0:	b4 01       	movw	r22, r8
    9ac2:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    9ac6:	18 16       	cp	r1, r24
    9ac8:	c4 f1       	brlt	.+112    	; 0x9b3a <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9aca:	2e 9c       	mul	r2, r14
    9acc:	b0 01       	movw	r22, r0
    9ace:	2f 9c       	mul	r2, r15
    9ad0:	70 0d       	add	r23, r0
    9ad2:	3e 9c       	mul	r3, r14
    9ad4:	70 0d       	add	r23, r0
    9ad6:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    9ad8:	29 81       	ldd	r18, Y+1	; 0x01
    9ada:	3a 81       	ldd	r19, Y+2	; 0x02
    9adc:	8b 81       	ldd	r24, Y+3	; 0x03
    9ade:	9c 81       	ldd	r25, Y+4	; 0x04
    9ae0:	28 1b       	sub	r18, r24
    9ae2:	39 0b       	sbc	r19, r25
    9ae4:	20 9f       	mul	r18, r16
    9ae6:	c0 01       	movw	r24, r0
    9ae8:	21 9f       	mul	r18, r17
    9aea:	90 0d       	add	r25, r0
    9aec:	30 9f       	mul	r19, r16
    9aee:	90 0d       	add	r25, r0
    9af0:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9af2:	68 0f       	add	r22, r24
    9af4:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    9af6:	88 27       	eor	r24, r24
    9af8:	77 fd       	sbrc	r23, 7
    9afa:	80 95       	com	r24
    9afc:	98 2f       	mov	r25, r24
    9afe:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9b02:	a3 01       	movw	r20, r6
    9b04:	92 01       	movw	r18, r4
    9b06:	0e 94 b6 72 	call	0xe56c	; 0xe56c <__divsf3>
    9b0a:	6b 01       	movw	r12, r22
    9b0c:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9b0e:	20 e0       	ldi	r18, 0x00	; 0
    9b10:	30 e0       	ldi	r19, 0x00	; 0
    9b12:	a9 01       	movw	r20, r18
    9b14:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    9b18:	87 fd       	sbrc	r24, 7
    9b1a:	0f c0       	rjmp	.+30     	; 0x9b3a <LBLineIntersect+0x17c>
    9b1c:	11 e0       	ldi	r17, 0x01	; 1
    9b1e:	20 e0       	ldi	r18, 0x00	; 0
    9b20:	30 e0       	ldi	r19, 0x00	; 0
    9b22:	40 e8       	ldi	r20, 0x80	; 128
    9b24:	5f e3       	ldi	r21, 0x3F	; 63
    9b26:	c7 01       	movw	r24, r14
    9b28:	b6 01       	movw	r22, r12
    9b2a:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    9b2e:	18 16       	cp	r1, r24
    9b30:	0c f0       	brlt	.+2      	; 0x9b34 <LBLineIntersect+0x176>
    9b32:	10 e0       	ldi	r17, 0x00	; 0
    9b34:	81 e0       	ldi	r24, 0x01	; 1
    9b36:	81 27       	eor	r24, r17
    9b38:	01 c0       	rjmp	.+2      	; 0x9b3c <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9b3a:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    9b3c:	0f 90       	pop	r0
    9b3e:	0f 90       	pop	r0
    9b40:	0f 90       	pop	r0
    9b42:	0f 90       	pop	r0
    9b44:	df 91       	pop	r29
    9b46:	cf 91       	pop	r28
    9b48:	1f 91       	pop	r17
    9b4a:	0f 91       	pop	r16
    9b4c:	ff 90       	pop	r15
    9b4e:	ef 90       	pop	r14
    9b50:	df 90       	pop	r13
    9b52:	cf 90       	pop	r12
    9b54:	bf 90       	pop	r11
    9b56:	af 90       	pop	r10
    9b58:	9f 90       	pop	r9
    9b5a:	8f 90       	pop	r8
    9b5c:	7f 90       	pop	r7
    9b5e:	6f 90       	pop	r6
    9b60:	5f 90       	pop	r5
    9b62:	4f 90       	pop	r4
    9b64:	3f 90       	pop	r3
    9b66:	2f 90       	pop	r2
    9b68:	08 95       	ret

00009b6a <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9b6a:	1f 93       	push	r17
    9b6c:	cf 93       	push	r28
    9b6e:	df 93       	push	r29
    9b70:	1f 92       	push	r1
    9b72:	cd b7       	in	r28, 0x3d	; 61
    9b74:	de b7       	in	r29, 0x3e	; 62
    9b76:	18 2f       	mov	r17, r24
    u8 tmp = GetPrngNumber(0) % 256;
    9b78:	80 e0       	ldi	r24, 0x00	; 0
    9b7a:	90 e0       	ldi	r25, 0x00	; 0
    9b7c:	69 83       	std	Y+1, r22	; 0x01
    9b7e:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <GetPrngNumber>
    9b82:	99 27       	eor	r25, r25
    return ((tmp) % (to - from + 1)) + from;
    9b84:	69 81       	ldd	r22, Y+1	; 0x01
    9b86:	70 e0       	ldi	r23, 0x00	; 0
    9b88:	61 1b       	sub	r22, r17
    9b8a:	71 09       	sbc	r23, r1
    9b8c:	6f 5f       	subi	r22, 0xFF	; 255
    9b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    9b90:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
}
    9b94:	81 0f       	add	r24, r17
    9b96:	0f 90       	pop	r0
    9b98:	df 91       	pop	r29
    9b9a:	cf 91       	pop	r28
    9b9c:	1f 91       	pop	r17
    9b9e:	08 95       	ret

00009ba0 <LBWaitSeconds>:
	WaitUs(micro_seconds);
#endif
}

void LBWaitSeconds(u8 seconds)
{
    9ba0:	cf 93       	push	r28
    9ba2:	df 93       	push	r29
    9ba4:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9ba6:	c0 e0       	ldi	r28, 0x00	; 0
    9ba8:	cd 17       	cp	r28, r29
    9baa:	31 f0       	breq	.+12     	; 0x9bb8 <LBWaitSeconds+0x18>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    9bac:	8f ef       	ldi	r24, 0xFF	; 255
    9bae:	9f ef       	ldi	r25, 0xFF	; 255
    9bb0:	0e 94 7e 3a 	call	0x74fc	; 0x74fc <WaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9bb4:	cf 5f       	subi	r28, 0xFF	; 255
    9bb6:	f8 cf       	rjmp	.-16     	; 0x9ba8 <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    9bb8:	df 91       	pop	r29
    9bba:	cf 91       	pop	r28
    9bbc:	08 95       	ret

00009bbe <LBHideAllSprites>:

void LBHideAllSprites()
{
    9bbe:	e8 ea       	ldi	r30, 0xA8	; 168
    9bc0:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
    9bc2:	80 ef       	ldi	r24, 0xF0	; 240
    9bc4:	80 83       	st	Z, r24
    9bc6:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    9bc8:	94 e0       	ldi	r25, 0x04	; 4
    9bca:	e0 3d       	cpi	r30, 0xD0	; 208
    9bcc:	f9 07       	cpc	r31, r25
    9bce:	d1 f7       	brne	.-12     	; 0x9bc4 <LBHideAllSprites+0x6>
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
	}
}
    9bd0:	08 95       	ret

00009bd2 <LBPlaySound>:


void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
    9bd2:	82 2f       	mov	r24, r18
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    9bd4:	26 30       	cpi	r18, 0x06	; 6
    9bd6:	11 f4       	brne	.+4      	; 0x9bdc <LBPlaySound+0xa>
    9bd8:	0c 94 6e 49 	jmp	0x92dc	; 0x92dc <LBPlaySound.part.6>
    9bdc:	46 2b       	or	r20, r22
	else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
    9bde:	40 fd       	sbrc	r20, 0
    9be0:	04 c0       	rjmp	.+8      	; 0x9bea <LBPlaySound+0x18>
    9be2:	41 e0       	ldi	r20, 0x01	; 1
    9be4:	6f ef       	ldi	r22, 0xFF	; 255
    9be6:	0c 94 fc 3d 	jmp	0x7bf8	; 0x7bf8 <TriggerFx>
    9bea:	08 95       	ret

00009bec <init_scores>:
HandleSelectState p2s;

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    9bec:	2b e8       	ldi	r18, 0x8B	; 139
    9bee:	30 e0       	ldi	r19, 0x00	; 0
    9bf0:	fc 01       	movw	r30, r24
    9bf2:	21 93       	st	Z+, r18
    9bf4:	31 93       	st	Z+, r19
    9bf6:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    9bf8:	4e e1       	ldi	r20, 0x1E	; 30
    9bfa:	50 e0       	ldi	r21, 0x00	; 0
    9bfc:	6e e2       	ldi	r22, 0x2E	; 46
    9bfe:	73 e0       	ldi	r23, 0x03	; 3
    9c00:	0c 94 68 74 	jmp	0xe8d0	; 0xe8d0 <memcpy_P>

00009c04 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    9c04:	2a e8       	ldi	r18, 0x8A	; 138
    9c06:	30 e0       	ldi	r19, 0x00	; 0
    9c08:	fc 01       	movw	r30, r24
    9c0a:	21 93       	st	Z+, r18
    9c0c:	31 93       	st	Z+, r19
    9c0e:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    9c10:	4e e1       	ldi	r20, 0x1E	; 30
    9c12:	50 e0       	ldi	r21, 0x00	; 0
    9c14:	6c e4       	ldi	r22, 0x4C	; 76
    9c16:	73 e0       	ldi	r23, 0x03	; 3
    9c18:	0c 94 68 74 	jmp	0xe8d0	; 0xe8d0 <memcpy_P>

00009c1c <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    9c1c:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    9c1e:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9c20:	16 86       	std	Z+14, r1	; 0x0e
    9c22:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    9c24:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    9c26:	73 e0       	ldi	r23, 0x03	; 3
    9c28:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9c2a:	65 e0       	ldi	r22, 0x05	; 5
    9c2c:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    9c2e:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    9c30:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    9c32:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9c34:	48 ee       	ldi	r20, 0xE8	; 232
    9c36:	5a e6       	ldi	r21, 0x6A	; 106
    9c38:	50 87       	std	Z+8, r21	; 0x08
    9c3a:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9c3c:	25 ee       	ldi	r18, 0xE5	; 229
    9c3e:	3a e6       	ldi	r19, 0x6A	; 106
    9c40:	32 87       	std	Z+10, r19	; 0x0a
    9c42:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9c44:	82 ee       	ldi	r24, 0xE2	; 226
    9c46:	9a e6       	ldi	r25, 0x6A	; 106
    9c48:	94 87       	std	Z+12, r25	; 0x0c
    9c4a:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9c4c:	14 8e       	std	Z+28, r1	; 0x1c
    9c4e:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    9c50:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    9c52:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9c54:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    9c56:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    9c58:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    9c5a:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9c5c:	56 8b       	std	Z+22, r21	; 0x16
    9c5e:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9c60:	30 8f       	std	Z+24, r19	; 0x18
    9c62:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9c64:	92 8f       	std	Z+26, r25	; 0x1a
    9c66:	81 8f       	std	Z+25, r24	; 0x19
    9c68:	08 95       	ret

00009c6a <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    9c6a:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9c6c:	15 86       	std	Z+13, r1	; 0x0d
    9c6e:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9c70:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    9c72:	83 e0       	ldi	r24, 0x03	; 3
    9c74:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    9c76:	8e e1       	ldi	r24, 0x1E	; 30
    9c78:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9c7a:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9c7c:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9c7e:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    9c80:	8e eb       	ldi	r24, 0xBE	; 190
    9c82:	9a e6       	ldi	r25, 0x6A	; 106
    9c84:	97 83       	std	Z+7, r25	; 0x07
    9c86:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    9c88:	8b eb       	ldi	r24, 0xBB	; 187
    9c8a:	9a e6       	ldi	r25, 0x6A	; 106
    9c8c:	91 87       	std	Z+9, r25	; 0x09
    9c8e:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    9c90:	88 eb       	ldi	r24, 0xB8	; 184
    9c92:	9a e6       	ldi	r25, 0x6A	; 106
    9c94:	93 87       	std	Z+11, r25	; 0x0b
    9c96:	82 87       	std	Z+10, r24	; 0x0a
    9c98:	08 95       	ret

00009c9a <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    9c9a:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9c9c:	15 86       	std	Z+13, r1	; 0x0d
    9c9e:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9ca0:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    9ca2:	82 e0       	ldi	r24, 0x02	; 2
    9ca4:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    9ca6:	8c e3       	ldi	r24, 0x3C	; 60
    9ca8:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9caa:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9cac:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9cae:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    9cb0:	8c e4       	ldi	r24, 0x4C	; 76
    9cb2:	98 e6       	ldi	r25, 0x68	; 104
    9cb4:	97 83       	std	Z+7, r25	; 0x07
    9cb6:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    9cb8:	82 e8       	ldi	r24, 0x82	; 130
    9cba:	99 e6       	ldi	r25, 0x69	; 105
    9cbc:	91 87       	std	Z+9, r25	; 0x09
    9cbe:	80 87       	std	Z+8, r24	; 0x08
    9cc0:	08 95       	ret

00009cc2 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9cc2:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9cc4:	88 e7       	ldi	r24, 0x78	; 120
    9cc6:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9cc8:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9cca:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    9ccc:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    9cce:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    9cd0:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    9cd2:	84 e0       	ldi	r24, 0x04	; 4
    9cd4:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9cd6:	66 23       	and	r22, r22
    9cd8:	11 f0       	breq	.+4      	; 0x9cde <init_shot_state+0x1c>
    9cda:	85 e0       	ldi	r24, 0x05	; 5
    9cdc:	01 c0       	rjmp	.+2      	; 0x9ce0 <init_shot_state+0x1e>
    9cde:	81 e0       	ldi	r24, 0x01	; 1
    9ce0:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    9ce2:	80 e0       	ldi	r24, 0x00	; 0
    9ce4:	90 e0       	ldi	r25, 0x00	; 0
    9ce6:	a0 e7       	ldi	r26, 0x70	; 112
    9ce8:	b3 e4       	ldi	r27, 0x43	; 67
    9cea:	83 83       	std	Z+3, r24	; 0x03
    9cec:	94 83       	std	Z+4, r25	; 0x04
    9cee:	a5 83       	std	Z+5, r26	; 0x05
    9cf0:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    9cf2:	17 82       	std	Z+7, r1	; 0x07
    9cf4:	10 86       	std	Z+8, r1	; 0x08
    9cf6:	11 86       	std	Z+9, r1	; 0x09
    9cf8:	12 86       	std	Z+10, r1	; 0x0a
    9cfa:	08 95       	ret

00009cfc <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9cfc:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    9cfe:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    9d00:	82 e0       	ldi	r24, 0x02	; 2
    9d02:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9d04:	85 e0       	ldi	r24, 0x05	; 5
    9d06:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    9d08:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    9d0a:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    9d0c:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    9d0e:	61 11       	cpse	r22, r1
    9d10:	03 c0       	rjmp	.+6      	; 0x9d18 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    9d12:	86 e5       	ldi	r24, 0x56	; 86
    9d14:	91 e3       	ldi	r25, 0x31	; 49
    9d16:	13 c0       	rjmp	.+38     	; 0x9d3e <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    9d18:	61 30       	cpi	r22, 0x01	; 1
    9d1a:	79 f4       	brne	.+30     	; 0x9d3a <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    9d1c:	83 e5       	ldi	r24, 0x53	; 83
    9d1e:	91 e3       	ldi	r25, 0x31	; 49
    9d20:	97 8b       	std	Z+23, r25	; 0x17
    9d22:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    9d24:	80 e5       	ldi	r24, 0x50	; 80
    9d26:	91 e3       	ldi	r25, 0x31	; 49
    9d28:	91 8f       	std	Z+25, r25	; 0x19
    9d2a:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    9d2c:	8d e4       	ldi	r24, 0x4D	; 77
    9d2e:	91 e3       	ldi	r25, 0x31	; 49
    9d30:	93 a3       	std	Z+35, r25	; 0x23
    9d32:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    9d34:	8a e4       	ldi	r24, 0x4A	; 74
    9d36:	91 e3       	ldi	r25, 0x31	; 49
    9d38:	08 c0       	rjmp	.+16     	; 0x9d4a <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    9d3a:	8e e3       	ldi	r24, 0x3E	; 62
    9d3c:	91 e3       	ldi	r25, 0x31	; 49
    9d3e:	97 8b       	std	Z+23, r25	; 0x17
    9d40:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    9d42:	91 8f       	std	Z+25, r25	; 0x19
    9d44:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    9d46:	93 a3       	std	Z+35, r25	; 0x23
    9d48:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    9d4a:	95 a3       	std	Z+37, r25	; 0x25
    9d4c:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    9d4e:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    9d50:	82 e0       	ldi	r24, 0x02	; 2
    9d52:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9d54:	85 e0       	ldi	r24, 0x05	; 5
    9d56:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    9d58:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    9d5a:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    9d5c:	11 a2       	std	Z+33, r1	; 0x21
    9d5e:	08 95       	ret

00009d60 <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    9d60:	0f 93       	push	r16
    9d62:	1f 93       	push	r17
    9d64:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    9d66:	85 e0       	ldi	r24, 0x05	; 5
    9d68:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    9d6a:	83 e0       	ldi	r24, 0x03	; 3
    9d6c:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    9d6e:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    9d70:	8a e5       	ldi	r24, 0x5A	; 90
    9d72:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    9d74:	43 83       	std	Z+3, r20	; 0x03
    9d76:	54 83       	std	Z+4, r21	; 0x04
    9d78:	65 83       	std	Z+5, r22	; 0x05
    9d7a:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    9d7c:	07 83       	std	Z+7, r16	; 0x07
    9d7e:	10 87       	std	Z+8, r17	; 0x08
    9d80:	21 87       	std	Z+9, r18	; 0x09
    9d82:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    9d84:	8a ef       	ldi	r24, 0xFA	; 250
    9d86:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    9d88:	82 e0       	ldi	r24, 0x02	; 2
    9d8a:	84 87       	std	Z+12, r24	; 0x0c
		t->shot[i].shared.recoiled = 0;
    9d8c:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    9d8e:	40 e0       	ldi	r20, 0x00	; 0
    9d90:	50 e0       	ldi	r21, 0x00	; 0
    9d92:	60 e7       	ldi	r22, 0x70	; 112
    9d94:	73 e4       	ldi	r23, 0x43	; 67
    9d96:	47 87       	std	Z+15, r20	; 0x0f
    9d98:	50 8b       	std	Z+16, r21	; 0x10
    9d9a:	61 8b       	std	Z+17, r22	; 0x11
    9d9c:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    9d9e:	13 8a       	std	Z+19, r1	; 0x13
    9da0:	14 8a       	std	Z+20, r1	; 0x14
    9da2:	15 8a       	std	Z+21, r1	; 0x15
    9da4:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    9da6:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 100;
    9da8:	94 e6       	ldi	r25, 0x64	; 100
    9daa:	93 8f       	std	Z+27, r25	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    9dac:	87 8b       	std	Z+23, r24	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    9dae:	84 e0       	ldi	r24, 0x04	; 4
    9db0:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    9db2:	81 e0       	ldi	r24, 0x01	; 1
    9db4:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    9db6:	62 e0       	ldi	r22, 0x02	; 2
    9db8:	cf 01       	movw	r24, r30
    9dba:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    9dbc:	1f 91       	pop	r17
    9dbe:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    9dc0:	0c 94 7e 4e 	jmp	0x9cfc	; 0x9cfc <set_shot_animations>

00009dc4 <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    9dc4:	0f 93       	push	r16
    9dc6:	1f 93       	push	r17
    9dc8:	cf 93       	push	r28
    9dca:	df 93       	push	r29
    9dcc:	ec 01       	movw	r28, r24
	p->grace_frame = FRAMES_PER_GRACE;
    9dce:	88 e7       	ldi	r24, 0x78	; 120
    9dd0:	8e 8b       	std	Y+22, r24	; 0x16
	p->score = 0;
    9dd2:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    9dd4:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    9dd6:	18 82       	st	Y, r1
	p->shared.speed = 0;
    9dd8:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    9dda:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    9ddc:	82 e3       	ldi	r24, 0x32	; 50
    9dde:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    9de0:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    9de2:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    9de4:	1d 8a       	std	Y+21, r1	; 0x15

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    9de6:	fe 01       	movw	r30, r28
    9de8:	e8 5a       	subi	r30, 0xA8	; 168
    9dea:	ff 4f       	sbci	r31, 0xFF	; 255
    9dec:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    9dee:	31 96       	adiw	r30, 0x01	; 1
    9df0:	91 e0       	ldi	r25, 0x01	; 1
    9df2:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9df4:	31 96       	adiw	r30, 0x01	; 1
    9df6:	85 e0       	ldi	r24, 0x05	; 5
    9df8:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9dfa:	31 96       	adiw	r30, 0x01	; 1
    9dfc:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    9dfe:	31 96       	adiw	r30, 0x01	; 1
    9e00:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    9e02:	31 96       	adiw	r30, 0x01	; 1
    9e04:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    9e06:	31 96       	adiw	r30, 0x01	; 1
    9e08:	71 83       	std	Z+1, r23	; 0x01
    9e0a:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9e0c:	36 96       	adiw	r30, 0x06	; 6
    9e0e:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9e10:	31 96       	adiw	r30, 0x01	; 1
    9e12:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9e14:	31 96       	adiw	r30, 0x01	; 1
    9e16:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    9e18:	31 96       	adiw	r30, 0x01	; 1
    9e1a:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    9e1c:	31 96       	adiw	r30, 0x01	; 1
    9e1e:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    9e20:	31 96       	adiw	r30, 0x01	; 1
    9e22:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9e24:	31 96       	adiw	r30, 0x01	; 1
    9e26:	51 83       	std	Z+1, r21	; 0x01
    9e28:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9e2a:	36 96       	adiw	r30, 0x06	; 6
    9e2c:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9e2e:	31 96       	adiw	r30, 0x01	; 1
    9e30:	93 e0       	ldi	r25, 0x03	; 3
    9e32:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9e34:	31 96       	adiw	r30, 0x01	; 1
    9e36:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9e38:	31 96       	adiw	r30, 0x01	; 1
    9e3a:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    9e3c:	31 96       	adiw	r30, 0x01	; 1
    9e3e:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    9e40:	31 96       	adiw	r30, 0x01	; 1
    9e42:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9e44:	31 96       	adiw	r30, 0x01	; 1
    9e46:	85 e6       	ldi	r24, 0x65	; 101
    9e48:	91 e3       	ldi	r25, 0x31	; 49
    9e4a:	91 83       	std	Z+1, r25	; 0x01
    9e4c:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9e4e:	32 96       	adiw	r30, 0x02	; 2
    9e50:	8f e5       	ldi	r24, 0x5F	; 95
    9e52:	91 e3       	ldi	r25, 0x31	; 49
    9e54:	91 83       	std	Z+1, r25	; 0x01
    9e56:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    9e58:	32 96       	adiw	r30, 0x02	; 2
    9e5a:	89 e5       	ldi	r24, 0x59	; 89
    9e5c:	91 e3       	ldi	r25, 0x31	; 49
    9e5e:	91 83       	std	Z+1, r25	; 0x01
    9e60:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9e62:	19 8a       	std	Y+17, r1	; 0x11
	p->old_active_shots = 0;
    9e64:	1a 8a       	std	Y+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9e66:	8e 01       	movw	r16, r28
    9e68:	00 5d       	subi	r16, 0xD0	; 208
    9e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    9e6c:	60 e0       	ldi	r22, 0x00	; 0
    9e6e:	c8 01       	movw	r24, r16
    9e70:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9e74:	60 e0       	ldi	r22, 0x00	; 0
    9e76:	c8 01       	movw	r24, r16
    9e78:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9e7c:	1a 8e       	std	Y+26, r1	; 0x1a
	p->goal_direction = 0;
    9e7e:	1e 8e       	std	Y+30, r1	; 0x1e
    9e80:	1d 8e       	std	Y+29, r1	; 0x1d
	p->goal = 0;
    9e82:	1b a2       	std	Y+35, r1	; 0x23
	p->goal_reached = 0;
    9e84:	1c a2       	std	Y+36, r1	; 0x24
	p->old_x = 0;
    9e86:	18 a6       	std	Y+40, r1	; 0x28
    9e88:	19 a6       	std	Y+41, r1	; 0x29
    9e8a:	1a a6       	std	Y+42, r1	; 0x2a
    9e8c:	1b a6       	std	Y+43, r1	; 0x2b
	p->old_y = 0;
    9e8e:	1c a6       	std	Y+44, r1	; 0x2c
    9e90:	1d a6       	std	Y+45, r1	; 0x2d
    9e92:	1e a6       	std	Y+46, r1	; 0x2e
    9e94:	1f a6       	std	Y+47, r1	; 0x2f
	p->deadlock_count_x = 0;
    9e96:	18 a2       	std	Y+32, r1	; 0x20
    9e98:	1f 8e       	std	Y+31, r1	; 0x1f
	p->deadlock_count_y = 0;
    9e9a:	1a a2       	std	Y+34, r1	; 0x22
    9e9c:	19 a2       	std	Y+33, r1	; 0x21
}
    9e9e:	df 91       	pop	r29
    9ea0:	cf 91       	pop	r28
    9ea2:	1f 91       	pop	r17
    9ea4:	0f 91       	pop	r16
    9ea6:	08 95       	ret

00009ea8 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    9ea8:	fc 01       	movw	r30, r24
    9eaa:	11 8a       	std	Z+17, r1	; 0x11
	player->old_active_shots = 0;
    9eac:	12 8a       	std	Z+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    9eae:	60 e0       	ldi	r22, 0x00	; 0
    9eb0:	c0 96       	adiw	r24, 0x30	; 48
    9eb2:	0c 94 61 4e 	jmp	0x9cc2	; 0x9cc2 <init_shot_state>

00009eb6 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    9eb6:	e3 ea       	ldi	r30, 0xA3	; 163
    9eb8:	fb e0       	ldi	r31, 0x0B	; 11
    9eba:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    9ebc:	13 8a       	std	Z+19, r1	; 0x13
	game.paused = 0;
    9ebe:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    9ec0:	14 86       	std	Z+12, r1	; 0x0c
    9ec2:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    9ec4:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    9ec6:	10 8a       	std	Z+16, r1	; 0x10
    9ec8:	17 86       	std	Z+15, r1	; 0x0f
	game.boss_fight_joypad = 0;
    9eca:	12 8a       	std	Z+18, r1	; 0x12
    9ecc:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    9ece:	82 e0       	ldi	r24, 0x02	; 2
    9ed0:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    9ed2:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    9ed4:	84 e1       	ldi	r24, 0x14	; 20
    9ed6:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    9ed8:	17 82       	std	Z+7, r1	; 0x07
	game.demo_counter = 0;
    9eda:	12 86       	std	Z+10, r1	; 0x0a
    9edc:	11 86       	std	Z+9, r1	; 0x09
	game.demo_choice = 0;
    9ede:	10 86       	std	Z+8, r1	; 0x08
	game.tank_rank_counter = 0;
    9ee0:	16 86       	std	Z+14, r1	; 0x0e
    9ee2:	15 86       	std	Z+13, r1	; 0x0d
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    9ee4:	47 e7       	ldi	r20, 0x77	; 119
    9ee6:	51 e3       	ldi	r21, 0x31	; 49
    9ee8:	6d e7       	ldi	r22, 0x7D	; 125
    9eea:	71 e3       	ldi	r23, 0x31	; 49
    9eec:	85 ed       	ldi	r24, 0xD5	; 213
    9eee:	9b e0       	ldi	r25, 0x0B	; 11
    9ef0:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    9ef4:	4b e6       	ldi	r20, 0x6B	; 107
    9ef6:	51 e3       	ldi	r21, 0x31	; 49
    9ef8:	61 e7       	ldi	r22, 0x71	; 113
    9efa:	71 e3       	ldi	r23, 0x31	; 49
    9efc:	87 e4       	ldi	r24, 0x47	; 71
    9efe:	9f e0       	ldi	r25, 0x0F	; 15
    9f00:	0c 94 e2 4e 	jmp	0x9dc4	; 0x9dc4 <init_player>

00009f04 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    9f04:	cf 93       	push	r28
    9f06:	df 93       	push	r29
    9f08:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    9f0a:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    9f0c:	6b 89       	ldd	r22, Y+19	; 0x13
    9f0e:	70 e0       	ldi	r23, 0x00	; 0
    9f10:	80 e0       	ldi	r24, 0x00	; 0
    9f12:	90 e0       	ldi	r25, 0x00	; 0
    9f14:	0e 94 4f 73 	call	0xe69e	; 0xe69e <__floatunsisf>
    9f18:	6b 83       	std	Y+3, r22	; 0x03
    9f1a:	7c 83       	std	Y+4, r23	; 0x04
    9f1c:	8d 83       	std	Y+5, r24	; 0x05
    9f1e:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    9f20:	6c 89       	ldd	r22, Y+20	; 0x14
    9f22:	70 e0       	ldi	r23, 0x00	; 0
    9f24:	80 e0       	ldi	r24, 0x00	; 0
    9f26:	90 e0       	ldi	r25, 0x00	; 0
    9f28:	0e 94 4f 73 	call	0xe69e	; 0xe69e <__floatunsisf>
    9f2c:	6f 83       	std	Y+7, r22	; 0x07
    9f2e:	78 87       	std	Y+8, r23	; 0x08
    9f30:	89 87       	std	Y+9, r24	; 0x09
    9f32:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    9f34:	18 82       	st	Y, r1
	player->shared.speed = 0;
    9f36:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    9f38:	1a 82       	std	Y+2, r1	; 0x02
	player->tank_tactic = LBRandom(0, 2);
    9f3a:	62 e0       	ldi	r22, 0x02	; 2
    9f3c:	80 e0       	ldi	r24, 0x00	; 0
    9f3e:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <LBRandom>
    9f42:	8b 8f       	std	Y+27, r24	; 0x1b
	player->shot_tactic = LBRandom(0, 2);
    9f44:	62 e0       	ldi	r22, 0x02	; 2
    9f46:	80 e0       	ldi	r24, 0x00	; 0
    9f48:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <LBRandom>
    9f4c:	8c 8f       	std	Y+28, r24	; 0x1c
	
}
    9f4e:	df 91       	pop	r29
    9f50:	cf 91       	pop	r28
    9f52:	08 95       	ret

00009f54 <waitForVSync>:

void waitForVSync()
{
    ProcessSprites();
    9f54:	0e 94 00 47 	call	0x8e00	; 0x8e00 <ProcessSprites>
    WaitVsync(1);
    9f58:	81 e0       	ldi	r24, 0x01	; 1
    9f5a:	90 e0       	ldi	r25, 0x00	; 0
    9f5c:	0e 94 0a 49 	call	0x9214	; 0x9214 <WaitVsync>
    RestoreBackground();
    9f60:	0c 94 0a 38 	jmp	0x7014	; 0x7014 <RestoreBackground>

00009f64 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9f64:	cf 93       	push	r28
    9f66:	df 93       	push	r29
    9f68:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9f6a:	bc 01       	movw	r22, r24
    9f6c:	88 81       	ld	r24, Y
    9f6e:	99 81       	ldd	r25, Y+1	; 0x01
    9f70:	0e 94 0d 3c 	call	0x781a	; 0x781a <EepromReadBlock>
	if (status == 0x03)
    9f74:	83 30       	cpi	r24, 0x03	; 3
    9f76:	29 f4       	brne	.+10     	; 0x9f82 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9f78:	ce 01       	movw	r24, r28
	}
}
    9f7a:	df 91       	pop	r29
    9f7c:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9f7e:	0c 94 c3 3b 	jmp	0x7786	; 0x7786 <EepromWriteBlock>
	}
}
    9f82:	df 91       	pop	r29
    9f84:	cf 91       	pop	r28
    9f86:	08 95       	ret

00009f88 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9f88:	61 e0       	ldi	r22, 0x01	; 1
    9f8a:	83 e0       	ldi	r24, 0x03	; 3
    9f8c:	0e 94 3b 49 	call	0x9276	; 0x9276 <FadeOut>
	ClearVram();
    9f90:	0e 94 3a 3a 	call	0x7474	; 0x7474 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9f94:	60 e0       	ldi	r22, 0x00	; 0
    9f96:	83 e0       	ldi	r24, 0x03	; 3
    9f98:	0c 94 2f 49 	jmp	0x925e	; 0x925e <FadeIn>

00009f9c <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9f9c:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9f9e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    9fa0:	40 e0       	ldi	r20, 0x00	; 0
    9fa2:	69 e8       	ldi	r22, 0x89	; 137
    9fa4:	71 e3       	ldi	r23, 0x31	; 49
    9fa6:	8c 2f       	mov	r24, r28
    9fa8:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
    9fac:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9fae:	ca 30       	cpi	r28, 0x0A	; 10
    9fb0:	b9 f7       	brne	.-18     	; 0x9fa0 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9fb2:	cf 91       	pop	r28
    9fb4:	08 95       	ret

00009fb6 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9fb6:	8f 92       	push	r8
    9fb8:	9f 92       	push	r9
    9fba:	bf 92       	push	r11
    9fbc:	cf 92       	push	r12
    9fbe:	df 92       	push	r13
    9fc0:	ef 92       	push	r14
    9fc2:	ff 92       	push	r15
    9fc4:	0f 93       	push	r16
    9fc6:	1f 93       	push	r17
    9fc8:	cf 93       	push	r28
    9fca:	df 93       	push	r29
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    9fcc:	90 91 e4 0b 	lds	r25, 0x0BE4
    9fd0:	80 91 56 0f 	lds	r24, 0x0F56
    9fd4:	98 17       	cp	r25, r24
    9fd6:	28 f4       	brcc	.+10     	; 0x9fe2 <save_score+0x2c>
	{
		p_win = &player2;
		p_lose = &player1;
    9fd8:	e5 ed       	ldi	r30, 0xD5	; 213
    9fda:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    9fdc:	a7 e4       	ldi	r26, 0x47	; 71
    9fde:	bf e0       	ldi	r27, 0x0F	; 15
    9fe0:	04 c0       	rjmp	.+8      	; 0x9fea <save_score+0x34>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9fe2:	e7 e4       	ldi	r30, 0x47	; 71
    9fe4:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9fe6:	a5 ed       	ldi	r26, 0xD5	; 213
    9fe8:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    9fea:	1b 96       	adiw	r26, 0x0b	; 11
    9fec:	1c 91       	ld	r17, X
    9fee:	1b 97       	sbiw	r26, 0x0b	; 11
	save_score[1] = p_lose->handle_id;
    9ff0:	73 85       	ldd	r23, Z+11	; 0x0b
	save_score[2] = p_win->score;
    9ff2:	1f 96       	adiw	r26, 0x0f	; 15
    9ff4:	6c 91       	ld	r22, X
	save_score[3] = p_lose->score;
    9ff6:	57 85       	ldd	r21, Z+15	; 0x0f
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    9ff8:	41 e0       	ldi	r20, 0x01	; 1
    9ffa:	80 91 a6 0b 	lds	r24, 0x0BA6
    9ffe:	88 30       	cpi	r24, 0x08	; 8
    a000:	09 f0       	breq	.+2      	; 0xa004 <save_score+0x4e>
    a002:	40 e0       	ldi	r20, 0x00	; 0
	save_delta = p_win->score - p_lose->score;
    a004:	d6 2e       	mov	r13, r22
    a006:	d5 1a       	sub	r13, r21
    a008:	28 e5       	ldi	r18, 0x58	; 88
    a00a:	3b e0       	ldi	r19, 0x0B	; 11
    a00c:	89 e5       	ldi	r24, 0x59	; 89
    a00e:	9b e0       	ldi	r25, 0x0B	; 11
    a010:	ea e5       	ldi	r30, 0x5A	; 90
    a012:	fb e0       	ldi	r31, 0x0B	; 11
    a014:	cb e5       	ldi	r28, 0x5B	; 91
    a016:	db e0       	ldi	r29, 0x0B	; 11
    a018:	ac e5       	ldi	r26, 0x5C	; 92
    a01a:	8a 2e       	mov	r8, r26
    a01c:	ab e0       	ldi	r26, 0x0B	; 11
    a01e:	9a 2e       	mov	r9, r26
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    a020:	00 e0       	ldi	r16, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    a022:	00 23       	and	r16, r16
    a024:	a1 f0       	breq	.+40     	; 0xa04e <save_score+0x98>
		{
			memcpy(tmp_score, &scores.data[i], 5);
    a026:	d9 01       	movw	r26, r18
    a028:	0c 91       	ld	r16, X
    a02a:	dc 01       	movw	r26, r24
    a02c:	fc 90       	ld	r15, X
    a02e:	e0 80       	ld	r14, Z
    a030:	c8 80       	ld	r12, Y
    a032:	d4 01       	movw	r26, r8
    a034:	bc 90       	ld	r11, X
			memcpy(&scores.data[i], save_score, 5);
    a036:	d9 01       	movw	r26, r18
    a038:	1c 93       	st	X, r17
    a03a:	dc 01       	movw	r26, r24
    a03c:	7c 93       	st	X, r23
    a03e:	60 83       	st	Z, r22
    a040:	58 83       	st	Y, r21
    a042:	d4 01       	movw	r26, r8
    a044:	4c 93       	st	X, r20
			memcpy(save_score, tmp_score, 5);
    a046:	4b 2d       	mov	r20, r11
    a048:	5c 2d       	mov	r21, r12
    a04a:	b7 01       	movw	r22, r14
    a04c:	18 c0       	rjmp	.+48     	; 0xa07e <save_score+0xc8>
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    a04e:	f0 80       	ld	r15, Z
    a050:	e8 80       	ld	r14, Y
    a052:	cf 2c       	mov	r12, r15
    a054:	ce 18       	sub	r12, r14
			if (save_delta > cur_delta)
    a056:	cd 14       	cp	r12, r13
    a058:	a0 f4       	brcc	.+40     	; 0xa082 <save_score+0xcc>
			{
				memcpy(tmp_score, &scores.data[i], 5);
    a05a:	d9 01       	movw	r26, r18
    a05c:	0c 91       	ld	r16, X
    a05e:	dc 01       	movw	r26, r24
    a060:	cc 90       	ld	r12, X
    a062:	d4 01       	movw	r26, r8
    a064:	bc 90       	ld	r11, X
				memcpy(&scores.data[i], save_score, 5);
    a066:	d9 01       	movw	r26, r18
    a068:	1c 93       	st	X, r17
    a06a:	dc 01       	movw	r26, r24
    a06c:	7c 93       	st	X, r23
    a06e:	60 83       	st	Z, r22
    a070:	58 83       	st	Y, r21
    a072:	d4 01       	movw	r26, r8
    a074:	4c 93       	st	X, r20
				memcpy(save_score, tmp_score, 5);
    a076:	4b 2d       	mov	r20, r11
    a078:	5e 2d       	mov	r21, r14
    a07a:	6f 2d       	mov	r22, r15
    a07c:	7c 2d       	mov	r23, r12
    a07e:	10 2f       	mov	r17, r16
				saved = 1;
    a080:	01 e0       	ldi	r16, 0x01	; 1
    a082:	2b 5f       	subi	r18, 0xFB	; 251
    a084:	3f 4f       	sbci	r19, 0xFF	; 255
    a086:	05 96       	adiw	r24, 0x05	; 5
    a088:	35 96       	adiw	r30, 0x05	; 5
    a08a:	25 96       	adiw	r28, 0x05	; 5
    a08c:	b5 e0       	ldi	r27, 0x05	; 5
    a08e:	8b 0e       	add	r8, r27
    a090:	91 1c       	adc	r9, r1
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    a092:	ab e0       	ldi	r26, 0x0B	; 11
    a094:	e8 37       	cpi	r30, 0x78	; 120
    a096:	fa 07       	cpc	r31, r26
    a098:	21 f6       	brne	.-120    	; 0xa022 <save_score+0x6c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a09a:	86 e5       	ldi	r24, 0x56	; 86
    a09c:	9b e0       	ldi	r25, 0x0B	; 11
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    a09e:	df 91       	pop	r29
    a0a0:	cf 91       	pop	r28
    a0a2:	1f 91       	pop	r17
    a0a4:	0f 91       	pop	r16
    a0a6:	ff 90       	pop	r15
    a0a8:	ef 90       	pop	r14
    a0aa:	df 90       	pop	r13
    a0ac:	cf 90       	pop	r12
    a0ae:	bf 90       	pop	r11
    a0b0:	9f 90       	pop	r9
    a0b2:	8f 90       	pop	r8
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a0b4:	0c 94 c3 3b 	jmp	0x7786	; 0x7786 <EepromWriteBlock>

0000a0b8 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    a0b8:	0f 93       	push	r16
    a0ba:	1f 93       	push	r17
    a0bc:	cf 93       	push	r28
    a0be:	df 93       	push	r29
    a0c0:	8c 01       	movw	r16, r24
    a0c2:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    a0c4:	88 81       	ld	r24, Y
    a0c6:	81 30       	cpi	r24, 0x01	; 1
    a0c8:	69 f1       	breq	.+90     	; 0xa124 <position_shot+0x6c>
    a0ca:	98 f0       	brcs	.+38     	; 0xa0f2 <position_shot+0x3a>
    a0cc:	82 30       	cpi	r24, 0x02	; 2
    a0ce:	f1 f1       	breq	.+124    	; 0xa14c <position_shot+0x94>
    a0d0:	83 30       	cpi	r24, 0x03	; 3
    a0d2:	09 f0       	breq	.+2      	; 0xa0d6 <position_shot+0x1e>
    a0d4:	59 c0       	rjmp	.+178    	; 0xa188 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    a0d6:	f8 01       	movw	r30, r16
    a0d8:	83 81       	ldd	r24, Z+3	; 0x03
    a0da:	94 81       	ldd	r25, Z+4	; 0x04
    a0dc:	a5 81       	ldd	r26, Z+5	; 0x05
    a0de:	b6 81       	ldd	r27, Z+6	; 0x06
    a0e0:	8b 83       	std	Y+3, r24	; 0x03
    a0e2:	9c 83       	std	Y+4, r25	; 0x04
    a0e4:	ad 83       	std	Y+5, r26	; 0x05
    a0e6:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    a0e8:	20 e0       	ldi	r18, 0x00	; 0
    a0ea:	30 e0       	ldi	r19, 0x00	; 0
    a0ec:	40 e8       	ldi	r20, 0x80	; 128
    a0ee:	50 e4       	ldi	r21, 0x40	; 64
    a0f0:	41 c0       	rjmp	.+130    	; 0xa174 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    a0f2:	20 e0       	ldi	r18, 0x00	; 0
    a0f4:	30 e0       	ldi	r19, 0x00	; 0
    a0f6:	40 e8       	ldi	r20, 0x80	; 128
    a0f8:	50 e4       	ldi	r21, 0x40	; 64
    a0fa:	f8 01       	movw	r30, r16
    a0fc:	63 81       	ldd	r22, Z+3	; 0x03
    a0fe:	74 81       	ldd	r23, Z+4	; 0x04
    a100:	85 81       	ldd	r24, Z+5	; 0x05
    a102:	96 81       	ldd	r25, Z+6	; 0x06
    a104:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a108:	6b 83       	std	Y+3, r22	; 0x03
    a10a:	7c 83       	std	Y+4, r23	; 0x04
    a10c:	8d 83       	std	Y+5, r24	; 0x05
    a10e:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    a110:	f8 01       	movw	r30, r16
    a112:	87 81       	ldd	r24, Z+7	; 0x07
    a114:	90 85       	ldd	r25, Z+8	; 0x08
    a116:	a1 85       	ldd	r26, Z+9	; 0x09
    a118:	b2 85       	ldd	r27, Z+10	; 0x0a
    a11a:	8f 83       	std	Y+7, r24	; 0x07
    a11c:	98 87       	std	Y+8, r25	; 0x08
    a11e:	a9 87       	std	Y+9, r26	; 0x09
    a120:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    a122:	32 c0       	rjmp	.+100    	; 0xa188 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    a124:	20 e0       	ldi	r18, 0x00	; 0
    a126:	30 e0       	ldi	r19, 0x00	; 0
    a128:	40 e0       	ldi	r20, 0x00	; 0
    a12a:	51 e4       	ldi	r21, 0x41	; 65
    a12c:	f8 01       	movw	r30, r16
    a12e:	63 81       	ldd	r22, Z+3	; 0x03
    a130:	74 81       	ldd	r23, Z+4	; 0x04
    a132:	85 81       	ldd	r24, Z+5	; 0x05
    a134:	96 81       	ldd	r25, Z+6	; 0x06
    a136:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a13a:	6b 83       	std	Y+3, r22	; 0x03
    a13c:	7c 83       	std	Y+4, r23	; 0x04
    a13e:	8d 83       	std	Y+5, r24	; 0x05
    a140:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    a142:	20 e0       	ldi	r18, 0x00	; 0
    a144:	30 e0       	ldi	r19, 0x00	; 0
    a146:	40 e8       	ldi	r20, 0x80	; 128
    a148:	50 e4       	ldi	r21, 0x40	; 64
    a14a:	13 c0       	rjmp	.+38     	; 0xa172 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    a14c:	20 e0       	ldi	r18, 0x00	; 0
    a14e:	30 e0       	ldi	r19, 0x00	; 0
    a150:	40 e8       	ldi	r20, 0x80	; 128
    a152:	50 e4       	ldi	r21, 0x40	; 64
    a154:	f8 01       	movw	r30, r16
    a156:	63 81       	ldd	r22, Z+3	; 0x03
    a158:	74 81       	ldd	r23, Z+4	; 0x04
    a15a:	85 81       	ldd	r24, Z+5	; 0x05
    a15c:	96 81       	ldd	r25, Z+6	; 0x06
    a15e:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a162:	6b 83       	std	Y+3, r22	; 0x03
    a164:	7c 83       	std	Y+4, r23	; 0x04
    a166:	8d 83       	std	Y+5, r24	; 0x05
    a168:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    a16a:	20 e0       	ldi	r18, 0x00	; 0
    a16c:	30 e0       	ldi	r19, 0x00	; 0
    a16e:	40 e0       	ldi	r20, 0x00	; 0
    a170:	51 e4       	ldi	r21, 0x41	; 65
    a172:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    a174:	67 81       	ldd	r22, Z+7	; 0x07
    a176:	70 85       	ldd	r23, Z+8	; 0x08
    a178:	81 85       	ldd	r24, Z+9	; 0x09
    a17a:	92 85       	ldd	r25, Z+10	; 0x0a
    a17c:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a180:	6f 83       	std	Y+7, r22	; 0x07
    a182:	78 87       	std	Y+8, r23	; 0x08
    a184:	89 87       	std	Y+9, r24	; 0x09
    a186:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    a188:	df 91       	pop	r29
    a18a:	cf 91       	pop	r28
    a18c:	1f 91       	pop	r17
    a18e:	0f 91       	pop	r16
    a190:	08 95       	ret

0000a192 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    a192:	0f 93       	push	r16
    a194:	1f 93       	push	r17
    a196:	cf 93       	push	r28
    a198:	df 93       	push	r29
    a19a:	8c 01       	movw	r16, r24
    a19c:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    a19e:	ac 01       	movw	r20, r24
    a1a0:	44 5f       	subi	r20, 0xF4	; 244
    a1a2:	5f 4f       	sbci	r21, 0xFF	; 255
    a1a4:	23 e0       	ldi	r18, 0x03	; 3
    a1a6:	6e e0       	ldi	r22, 0x0E	; 14
    a1a8:	84 e0       	ldi	r24, 0x04	; 4
    a1aa:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    a1ae:	47 e4       	ldi	r20, 0x47	; 71
    a1b0:	54 e0       	ldi	r21, 0x04	; 4
    a1b2:	6e e0       	ldi	r22, 0x0E	; 14
    a1b4:	70 e0       	ldi	r23, 0x00	; 0
    a1b6:	88 e0       	ldi	r24, 0x08	; 8
    a1b8:	90 e0       	ldi	r25, 0x00	; 0
    a1ba:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a1be:	ae 01       	movw	r20, r28
    a1c0:	44 5f       	subi	r20, 0xF4	; 244
    a1c2:	5f 4f       	sbci	r21, 0xFF	; 255
    a1c4:	23 e0       	ldi	r18, 0x03	; 3
    a1c6:	6e e0       	ldi	r22, 0x0E	; 14
    a1c8:	8d e0       	ldi	r24, 0x0D	; 13
    a1ca:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    a1ce:	44 e4       	ldi	r20, 0x44	; 68
    a1d0:	54 e0       	ldi	r21, 0x04	; 4
    a1d2:	6e e0       	ldi	r22, 0x0E	; 14
    a1d4:	70 e0       	ldi	r23, 0x00	; 0
    a1d6:	81 e1       	ldi	r24, 0x11	; 17
    a1d8:	90 e0       	ldi	r25, 0x00	; 0
    a1da:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    a1de:	21 e0       	ldi	r18, 0x01	; 1
    a1e0:	f8 01       	movw	r30, r16
    a1e2:	40 89       	ldd	r20, Z+16	; 0x10
    a1e4:	6e e0       	ldi	r22, 0x0E	; 14
    a1e6:	70 e0       	ldi	r23, 0x00	; 0
    a1e8:	86 e1       	ldi	r24, 0x16	; 22
    a1ea:	90 e0       	ldi	r25, 0x00	; 0
    a1ec:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
	PrintChar(23, 14, '-');
    a1f0:	4d e2       	ldi	r20, 0x2D	; 45
    a1f2:	6e e0       	ldi	r22, 0x0E	; 14
    a1f4:	70 e0       	ldi	r23, 0x00	; 0
    a1f6:	87 e1       	ldi	r24, 0x17	; 23
    a1f8:	90 e0       	ldi	r25, 0x00	; 0
    a1fa:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    a1fe:	21 e0       	ldi	r18, 0x01	; 1
    a200:	48 89       	ldd	r20, Y+16	; 0x10
    a202:	6e e0       	ldi	r22, 0x0E	; 14
    a204:	70 e0       	ldi	r23, 0x00	; 0
    a206:	8a e1       	ldi	r24, 0x1A	; 26
    a208:	90 e0       	ldi	r25, 0x00	; 0
}
    a20a:	df 91       	pop	r29
    a20c:	cf 91       	pop	r28
    a20e:	1f 91       	pop	r17
    a210:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    a212:	0c 94 b9 48 	jmp	0x9172	; 0x9172 <PrintByte>

0000a216 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a216:	0f 93       	push	r16
    a218:	1f 93       	push	r17
    a21a:	cf 93       	push	r28
    a21c:	df 93       	push	r29
    a21e:	8c 01       	movw	r16, r24
    a220:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    a222:	48 e3       	ldi	r20, 0x38	; 56
    a224:	54 e0       	ldi	r21, 0x04	; 4
    a226:	6c e0       	ldi	r22, 0x0C	; 12
    a228:	70 e0       	ldi	r23, 0x00	; 0
    a22a:	89 e0       	ldi	r24, 0x09	; 9
    a22c:	90 e0       	ldi	r25, 0x00	; 0
    a22e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a232:	a8 01       	movw	r20, r16
    a234:	44 5f       	subi	r20, 0xF4	; 244
    a236:	5f 4f       	sbci	r21, 0xFF	; 255
    a238:	23 e0       	ldi	r18, 0x03	; 3
    a23a:	6e e0       	ldi	r22, 0x0E	; 14
    a23c:	84 e0       	ldi	r24, 0x04	; 4
    a23e:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    a242:	47 e4       	ldi	r20, 0x47	; 71
    a244:	54 e0       	ldi	r21, 0x04	; 4
    a246:	6e e0       	ldi	r22, 0x0E	; 14
    a248:	70 e0       	ldi	r23, 0x00	; 0
    a24a:	88 e0       	ldi	r24, 0x08	; 8
    a24c:	90 e0       	ldi	r25, 0x00	; 0
    a24e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a252:	ae 01       	movw	r20, r28
    a254:	44 5f       	subi	r20, 0xF4	; 244
    a256:	5f 4f       	sbci	r21, 0xFF	; 255
    a258:	23 e0       	ldi	r18, 0x03	; 3
    a25a:	6e e0       	ldi	r22, 0x0E	; 14
    a25c:	8d e0       	ldi	r24, 0x0D	; 13
    a25e:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    a262:	44 e4       	ldi	r20, 0x44	; 68
    a264:	54 e0       	ldi	r21, 0x04	; 4
    a266:	6e e0       	ldi	r22, 0x0E	; 14
    a268:	70 e0       	ldi	r23, 0x00	; 0
    a26a:	81 e1       	ldi	r24, 0x11	; 17
    a26c:	90 e0       	ldi	r25, 0x00	; 0
    a26e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    PrintByte(22, 14, winner->score ,true);
    a272:	21 e0       	ldi	r18, 0x01	; 1
    a274:	f8 01       	movw	r30, r16
    a276:	47 85       	ldd	r20, Z+15	; 0x0f
    a278:	6e e0       	ldi	r22, 0x0E	; 14
    a27a:	70 e0       	ldi	r23, 0x00	; 0
    a27c:	86 e1       	ldi	r24, 0x16	; 22
    a27e:	90 e0       	ldi	r25, 0x00	; 0
    a280:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
    PrintChar(23, 14, '-');
    a284:	4d e2       	ldi	r20, 0x2D	; 45
    a286:	6e e0       	ldi	r22, 0x0E	; 14
    a288:	70 e0       	ldi	r23, 0x00	; 0
    a28a:	87 e1       	ldi	r24, 0x17	; 23
    a28c:	90 e0       	ldi	r25, 0x00	; 0
    a28e:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    a292:	21 e0       	ldi	r18, 0x01	; 1
    a294:	4f 85       	ldd	r20, Y+15	; 0x0f
    a296:	6e e0       	ldi	r22, 0x0E	; 14
    a298:	70 e0       	ldi	r23, 0x00	; 0
    a29a:	8a e1       	ldi	r24, 0x1A	; 26
    a29c:	90 e0       	ldi	r25, 0x00	; 0
    a29e:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    a2a2:	80 91 a6 0b 	lds	r24, 0x0BA6
    a2a6:	88 30       	cpi	r24, 0x08	; 8
    a2a8:	59 f4       	brne	.+22     	; 0xa2c0 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    a2aa:	4a e2       	ldi	r20, 0x2A	; 42
    a2ac:	6e e0       	ldi	r22, 0x0E	; 14
    a2ae:	70 e0       	ldi	r23, 0x00	; 0
    a2b0:	8c e1       	ldi	r24, 0x1C	; 28
    a2b2:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    a2b4:	df 91       	pop	r29
    a2b6:	cf 91       	pop	r28
    a2b8:	1f 91       	pop	r17
    a2ba:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    a2bc:	0c 94 07 49 	jmp	0x920e	; 0x920e <PrintChar>
	}
}
    a2c0:	df 91       	pop	r29
    a2c2:	cf 91       	pop	r28
    a2c4:	1f 91       	pop	r17
    a2c6:	0f 91       	pop	r16
    a2c8:	08 95       	ret

0000a2ca <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    a2ca:	fc 01       	movw	r30, r24
    a2cc:	20 81       	ld	r18, Z
    a2ce:	31 81       	ldd	r19, Z+1	; 0x01
    a2d0:	21 70       	andi	r18, 0x01	; 1
    a2d2:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    a2d4:	81 e0       	ldi	r24, 0x01	; 1
    a2d6:	23 2b       	or	r18, r19
    a2d8:	09 f4       	brne	.+2      	; 0xa2dc <shoot_pressed+0x12>
    a2da:	80 e0       	ldi	r24, 0x00	; 0
}
    a2dc:	08 95       	ret

0000a2de <get_delta>:

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a2de:	fc 01       	movw	r30, r24
    a2e0:	83 a1       	ldd	r24, Z+35	; 0x23
    a2e2:	fb 01       	movw	r30, r22
    a2e4:	61 81       	ldd	r22, Z+1	; 0x01
		return FRAME_TIME * s->speed;
    a2e6:	70 e0       	ldi	r23, 0x00	; 0
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a2e8:	81 11       	cpse	r24, r1
    a2ea:	09 c0       	rjmp	.+18     	; 0xa2fe <get_delta+0x20>
		return FRAME_TIME * s->speed;
    a2ec:	80 e0       	ldi	r24, 0x00	; 0
    a2ee:	90 e0       	ldi	r25, 0x00	; 0
    a2f0:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    a2f4:	25 e6       	ldi	r18, 0x65	; 101
    a2f6:	38 e8       	ldi	r19, 0x88	; 136
    a2f8:	48 e8       	ldi	r20, 0x88	; 136
    a2fa:	5c e3       	ldi	r21, 0x3C	; 60
    a2fc:	0e c0       	rjmp	.+28     	; 0xa31a <get_delta+0x3c>
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
    a2fe:	80 e0       	ldi	r24, 0x00	; 0
    a300:	90 e0       	ldi	r25, 0x00	; 0
    a302:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    a306:	25 e6       	ldi	r18, 0x65	; 101
    a308:	38 e8       	ldi	r19, 0x88	; 136
    a30a:	48 e8       	ldi	r20, 0x88	; 136
    a30c:	5c e3       	ldi	r21, 0x3C	; 60
    a30e:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    a312:	23 e3       	ldi	r18, 0x33	; 51
    a314:	33 e3       	ldi	r19, 0x33	; 51
    a316:	43 eb       	ldi	r20, 0xB3	; 179
    a318:	5f e3       	ldi	r21, 0x3F	; 63
    a31a:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
}
    a31e:	08 95       	ret

0000a320 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a320:	cf 93       	push	r28
    a322:	df 93       	push	r29
    a324:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a326:	ac 01       	movw	r20, r24
    a328:	44 5f       	subi	r20, 0xF4	; 244
    a32a:	5f 4f       	sbci	r21, 0xFF	; 255
    a32c:	23 e0       	ldi	r18, 0x03	; 3
    a32e:	60 e0       	ldi	r22, 0x00	; 0
    a330:	8a e0       	ldi	r24, 0x0A	; 10
    a332:	8c 0f       	add	r24, r28
    a334:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    a338:	d0 e0       	ldi	r29, 0x00	; 0
    a33a:	41 e3       	ldi	r20, 0x31	; 49
    a33c:	54 e0       	ldi	r21, 0x04	; 4
    a33e:	60 e0       	ldi	r22, 0x00	; 0
    a340:	70 e0       	ldi	r23, 0x00	; 0
    a342:	ce 01       	movw	r24, r28
    a344:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(x, 1, (char*) strTotal);
    a348:	4a e2       	ldi	r20, 0x2A	; 42
    a34a:	54 e0       	ldi	r21, 0x04	; 4
    a34c:	61 e0       	ldi	r22, 0x01	; 1
    a34e:	70 e0       	ldi	r23, 0x00	; 0
    a350:	ce 01       	movw	r24, r28
	
}
    a352:	df 91       	pop	r29
    a354:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    a356:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>

0000a35a <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a35a:	0f 93       	push	r16
    a35c:	1f 93       	push	r17
    a35e:	cf 93       	push	r28
    a360:	df 93       	push	r29
    a362:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    a364:	c6 2f       	mov	r28, r22
    a366:	d0 e0       	ldi	r29, 0x00	; 0
    a368:	28 96       	adiw	r28, 0x08	; 8
    a36a:	20 e0       	ldi	r18, 0x00	; 0
    a36c:	fc 01       	movw	r30, r24
    a36e:	40 89       	ldd	r20, Z+16	; 0x10
    a370:	60 e0       	ldi	r22, 0x00	; 0
    a372:	70 e0       	ldi	r23, 0x00	; 0
    a374:	ce 01       	movw	r24, r28
    a376:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    a37a:	20 e0       	ldi	r18, 0x00	; 0
    a37c:	f8 01       	movw	r30, r16
    a37e:	47 85       	ldd	r20, Z+15	; 0x0f
    a380:	61 e0       	ldi	r22, 0x01	; 1
    a382:	70 e0       	ldi	r23, 0x00	; 0
    a384:	ce 01       	movw	r24, r28
}
    a386:	df 91       	pop	r29
    a388:	cf 91       	pop	r28
    a38a:	1f 91       	pop	r17
    a38c:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    a38e:	0c 94 b9 48 	jmp	0x9172	; 0x9172 <PrintByte>

0000a392 <render_player>:
}

void render_player(Player* player, u8 sprite_index)
{
    a392:	ef 92       	push	r14
    a394:	ff 92       	push	r15
    a396:	0f 93       	push	r16
    a398:	1f 93       	push	r17
    a39a:	cf 93       	push	r28
    a39c:	df 93       	push	r29
    a39e:	1f 92       	push	r1
    a3a0:	cd b7       	in	r28, 0x3d	; 61
    a3a2:	de b7       	in	r29, 0x3e	; 62
    a3a4:	7c 01       	movw	r14, r24
    a3a6:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    a3a8:	fc 01       	movw	r30, r24
    a3aa:	67 81       	ldd	r22, Z+7	; 0x07
    a3ac:	70 85       	ldd	r23, Z+8	; 0x08
    a3ae:	81 85       	ldd	r24, Z+9	; 0x09
    a3b0:	92 85       	ldd	r25, Z+10	; 0x0a
    a3b2:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a3b6:	46 2f       	mov	r20, r22
    a3b8:	f7 01       	movw	r30, r14
    a3ba:	63 81       	ldd	r22, Z+3	; 0x03
    a3bc:	74 81       	ldd	r23, Z+4	; 0x04
    a3be:	85 81       	ldd	r24, Z+5	; 0x05
    a3c0:	96 81       	ldd	r25, Z+6	; 0x06
    a3c2:	49 83       	std	Y+1, r20	; 0x01
    a3c4:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a3c8:	02 e0       	ldi	r16, 0x02	; 2
    a3ca:	22 e0       	ldi	r18, 0x02	; 2
    a3cc:	49 81       	ldd	r20, Y+1	; 0x01
    a3ce:	81 2f       	mov	r24, r17
    a3d0:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
}
    a3d4:	0f 90       	pop	r0
    a3d6:	df 91       	pop	r29
    a3d8:	cf 91       	pop	r28
    a3da:	1f 91       	pop	r17
    a3dc:	0f 91       	pop	r16
    a3de:	ff 90       	pop	r15
    a3e0:	ef 90       	pop	r14
    a3e2:	08 95       	ret

0000a3e4 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    a3e4:	ef 92       	push	r14
    a3e6:	ff 92       	push	r15
    a3e8:	0f 93       	push	r16
    a3ea:	1f 93       	push	r17
    a3ec:	cf 93       	push	r28
    a3ee:	df 93       	push	r29
    a3f0:	1f 92       	push	r1
    a3f2:	cd b7       	in	r28, 0x3d	; 61
    a3f4:	de b7       	in	r29, 0x3e	; 62
    a3f6:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    a3f8:	81 89       	ldd	r24, Z+17	; 0x11
    a3fa:	88 23       	and	r24, r24
    a3fc:	b9 f0       	breq	.+46     	; 0xa42c <render_shot+0x48>
    a3fe:	16 2f       	mov	r17, r22
    a400:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    a402:	67 a9       	ldd	r22, Z+55	; 0x37
    a404:	70 ad       	ldd	r23, Z+56	; 0x38
    a406:	81 ad       	ldd	r24, Z+57	; 0x39
    a408:	92 ad       	ldd	r25, Z+58	; 0x3a
    a40a:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a40e:	46 2f       	mov	r20, r22
    a410:	f7 01       	movw	r30, r14
    a412:	63 a9       	ldd	r22, Z+51	; 0x33
    a414:	74 a9       	ldd	r23, Z+52	; 0x34
    a416:	85 a9       	ldd	r24, Z+53	; 0x35
    a418:	96 a9       	ldd	r25, Z+54	; 0x36
    a41a:	49 83       	std	Y+1, r20	; 0x01
    a41c:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a420:	01 e0       	ldi	r16, 0x01	; 1
    a422:	21 e0       	ldi	r18, 0x01	; 1
    a424:	49 81       	ldd	r20, Y+1	; 0x01
    a426:	81 2f       	mov	r24, r17
    a428:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
			sprite_index++;
		}
	}
}
    a42c:	0f 90       	pop	r0
    a42e:	df 91       	pop	r29
    a430:	cf 91       	pop	r28
    a432:	1f 91       	pop	r17
    a434:	0f 91       	pop	r16
    a436:	ff 90       	pop	r15
    a438:	ef 90       	pop	r14
    a43a:	08 95       	ret

0000a43c <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    a43c:	ef 92       	push	r14
    a43e:	ff 92       	push	r15
    a440:	0f 93       	push	r16
    a442:	1f 93       	push	r17
    a444:	cf 93       	push	r28
    a446:	df 93       	push	r29
    a448:	ec 01       	movw	r28, r24
    a44a:	25 96       	adiw	r28, 0x05	; 5
    a44c:	8c 01       	movw	r16, r24
    a44e:	0f 5d       	subi	r16, 0xDF	; 223
    a450:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    a452:	8e e1       	ldi	r24, 0x1E	; 30
    a454:	e8 2e       	mov	r14, r24
    a456:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    a458:	88 85       	ldd	r24, Y+8	; 0x08
    a45a:	99 85       	ldd	r25, Y+9	; 0x09
    a45c:	89 2b       	or	r24, r25
    a45e:	c1 f0       	breq	.+48     	; 0xa490 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    a460:	ce 01       	movw	r24, r28
    a462:	04 97       	sbiw	r24, 0x04	; 4
    a464:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <LBGetNextFrame>
    a468:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    a46a:	48 81       	ld	r20, Y
    a46c:	88 85       	ldd	r24, Y+8	; 0x08
    a46e:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a470:	b7 01       	movw	r22, r14
    a472:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    a476:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    a478:	44 23       	and	r20, r20
    a47a:	39 f0       	breq	.+14     	; 0xa48a <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a47c:	40 e0       	ldi	r20, 0x00	; 0
    a47e:	50 e0       	ldi	r21, 0x00	; 0
    a480:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
				ta->anims[i].tile_index = 0;
    a484:	19 86       	std	Y+9, r1	; 0x09
    a486:	18 86       	std	Y+8, r1	; 0x08
    a488:	03 c0       	rjmp	.+6      	; 0xa490 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    a48a:	a9 01       	movw	r20, r18
    a48c:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
    a490:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    a492:	c0 17       	cp	r28, r16
    a494:	d1 07       	cpc	r29, r17
    a496:	01 f7       	brne	.-64     	; 0xa458 <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    a498:	df 91       	pop	r29
    a49a:	cf 91       	pop	r28
    a49c:	1f 91       	pop	r17
    a49e:	0f 91       	pop	r16
    a4a0:	ff 90       	pop	r15
    a4a2:	ef 90       	pop	r14
    a4a4:	08 95       	ret

0000a4a6 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    a4a6:	cf 93       	push	r28
    a4a8:	df 93       	push	r29
    a4aa:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    a4ac:	0e 94 0d 4c 	call	0x981a	; 0x981a <LBGetNextFrameReverse>
    a4b0:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    a4b2:	4c 81       	ldd	r20, Y+4	; 0x04
    a4b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    a4b6:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a4b8:	6e e1       	ldi	r22, 0x1E	; 30
    a4ba:	70 e0       	ldi	r23, 0x00	; 0
    a4bc:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    a4c0:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    a4c2:	44 23       	and	r20, r20
    a4c4:	19 f0       	breq	.+6      	; 0xa4cc <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a4c6:	43 ed       	ldi	r20, 0xD3	; 211
    a4c8:	5a e6       	ldi	r21, 0x6A	; 106
    a4ca:	01 c0       	rjmp	.+2      	; 0xa4ce <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    a4cc:	a9 01       	movw	r20, r18
    a4ce:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	}
	return ta->anim.looped;
}
    a4d2:	8c 81       	ldd	r24, Y+4	; 0x04
    a4d4:	df 91       	pop	r29
    a4d6:	cf 91       	pop	r28
    a4d8:	08 95       	ret

0000a4da <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    a4da:	1f 93       	push	r17
    a4dc:	cf 93       	push	r28
    a4de:	df 93       	push	r29
    a4e0:	ec 01       	movw	r28, r24
    a4e2:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
    a4e4:	8d 89       	ldd	r24, Y+21	; 0x15
    a4e6:	80 ff       	sbrs	r24, 0
    a4e8:	17 c0       	rjmp	.+46     	; 0xa518 <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    a4ea:	ce 01       	movw	r24, r28
    a4ec:	80 59       	subi	r24, 0x90	; 144
    a4ee:	9f 4f       	sbci	r25, 0xFF	; 255
    a4f0:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    a4f4:	fe 01       	movw	r30, r28
    a4f6:	ec 58       	subi	r30, 0x8C	; 140
    a4f8:	ff 4f       	sbci	r31, 0xFF	; 255
    a4fa:	20 81       	ld	r18, Z
    a4fc:	22 23       	and	r18, r18
    a4fe:	09 f4       	brne	.+2      	; 0xa502 <tank_map+0x28>
    a500:	4a c0       	rjmp	.+148    	; 0xa596 <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    a502:	8d 89       	ldd	r24, Y+21	; 0x15
    a504:	91 e0       	ldi	r25, 0x01	; 1
    a506:	98 27       	eor	r25, r24
    a508:	9d 8b       	std	Y+21, r25	; 0x15
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    a50a:	ce 01       	movw	r24, r28
    a50c:	0e 94 82 4f 	call	0x9f04	; 0x9f04 <player_spawn>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a510:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    a512:	83 e8       	ldi	r24, 0x83	; 131
    a514:	91 e3       	ldi	r25, 0x31	; 49
    a516:	40 c0       	rjmp	.+128    	; 0xa598 <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    a518:	9e 89       	ldd	r25, Y+22	; 0x16
    a51a:	98 37       	cpi	r25, 0x78	; 120
    a51c:	11 f0       	breq	.+4      	; 0xa522 <tank_map+0x48>
		{
			player->grace_frame++;
    a51e:	9f 5f       	subi	r25, 0xFF	; 255
    a520:	9e 8b       	std	Y+22, r25	; 0x16
		}
		switch (player->shared.direction)
    a522:	98 81       	ld	r25, Y
    a524:	91 30       	cpi	r25, 0x01	; 1
    a526:	61 f0       	breq	.+24     	; 0xa540 <tank_map+0x66>
    a528:	b0 f0       	brcs	.+44     	; 0xa556 <tank_map+0x7c>
    a52a:	92 30       	cpi	r25, 0x02	; 2
    a52c:	69 f0       	breq	.+26     	; 0xa548 <tank_map+0x6e>
    a52e:	93 30       	cpi	r25, 0x03	; 3
    a530:	91 f4       	brne	.+36     	; 0xa556 <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    a532:	ce 01       	movw	r24, r28
    a534:	8c 59       	subi	r24, 0x9C	; 156
    a536:	9f 4f       	sbci	r25, 0xFF	; 255
    a538:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <LBGetNextFrame>
    a53c:	41 e0       	ldi	r20, 0x01	; 1
    a53e:	11 c0       	rjmp	.+34     	; 0xa562 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    a540:	ce 01       	movw	r24, r28
    a542:	8c 59       	subi	r24, 0x9C	; 156
    a544:	9f 4f       	sbci	r25, 0xFF	; 255
    a546:	0a c0       	rjmp	.+20     	; 0xa55c <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    a548:	ce 01       	movw	r24, r28
    a54a:	88 5a       	subi	r24, 0xA8	; 168
    a54c:	9f 4f       	sbci	r25, 0xFF	; 255
    a54e:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <LBGetNextFrame>
    a552:	42 e0       	ldi	r20, 0x02	; 2
    a554:	06 c0       	rjmp	.+12     	; 0xa562 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    a556:	ce 01       	movw	r24, r28
    a558:	88 5a       	subi	r24, 0xA8	; 168
    a55a:	9f 4f       	sbci	r25, 0xFF	; 255
    a55c:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <LBGetNextFrame>
    a560:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    a562:	2e 89       	ldd	r18, Y+22	; 0x16
    a564:	28 37       	cpi	r18, 0x78	; 120
    a566:	31 f0       	breq	.+12     	; 0xa574 <tank_map+0x9a>
    a568:	20 91 aa 0b 	lds	r18, 0x0BAA
    a56c:	22 23       	and	r18, r18
    a56e:	11 f0       	breq	.+4      	; 0xa574 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    a570:	83 e8       	ldi	r24, 0x83	; 131
    a572:	91 e3       	ldi	r25, 0x31	; 49
		}
		game.toggle_counter--;
    a574:	20 91 a9 0b 	lds	r18, 0x0BA9
    a578:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    a57a:	19 f0       	breq	.+6      	; 0xa582 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    a57c:	20 93 a9 0b 	sts	0x0BA9, r18
    a580:	0b c0       	rjmp	.+22     	; 0xa598 <tank_map+0xbe>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    a582:	24 e1       	ldi	r18, 0x14	; 20
    a584:	20 93 a9 0b 	sts	0x0BA9, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    a588:	30 91 aa 0b 	lds	r19, 0x0BAA
    a58c:	21 e0       	ldi	r18, 0x01	; 1
    a58e:	23 27       	eor	r18, r19
    a590:	20 93 aa 0b 	sts	0x0BAA, r18
    a594:	01 c0       	rjmp	.+2      	; 0xa598 <tank_map+0xbe>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a596:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    a598:	bc 01       	movw	r22, r24
    a59a:	81 2f       	mov	r24, r17
    a59c:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    a5a0:	84 e0       	ldi	r24, 0x04	; 4
    a5a2:	81 0f       	add	r24, r17
    a5a4:	df 91       	pop	r29
    a5a6:	cf 91       	pop	r28
    a5a8:	1f 91       	pop	r17
    a5aa:	08 95       	ret

0000a5ac <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    a5ac:	cf 93       	push	r28
    a5ae:	fc 01       	movw	r30, r24
    a5b0:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    a5b2:	86 ad       	ldd	r24, Z+62	; 0x3e
    a5b4:	88 23       	and	r24, r24
    a5b6:	09 f1       	breq	.+66     	; 0xa5fa <shot_map+0x4e>
		{
			switch (shot->shared.direction)
    a5b8:	90 a9       	ldd	r25, Z+48	; 0x30
    a5ba:	91 30       	cpi	r25, 0x01	; 1
    a5bc:	61 f0       	breq	.+24     	; 0xa5d6 <shot_map+0x2a>
    a5be:	c8 f0       	brcs	.+50     	; 0xa5f2 <shot_map+0x46>
    a5c0:	92 30       	cpi	r25, 0x02	; 2
    a5c2:	81 f0       	breq	.+32     	; 0xa5e4 <shot_map+0x38>
    a5c4:	93 30       	cpi	r25, 0x03	; 3
    a5c6:	a9 f4       	brne	.+42     	; 0xa5f2 <shot_map+0x46>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    a5c8:	cf 01       	movw	r24, r30
    a5ca:	84 5b       	subi	r24, 0xB4	; 180
    a5cc:	9f 4f       	sbci	r25, 0xFF	; 255
    a5ce:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <LBGetNextFrame>
    a5d2:	41 e0       	ldi	r20, 0x01	; 1
    a5d4:	15 c0       	rjmp	.+42     	; 0xa600 <shot_map+0x54>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    a5d6:	cf 01       	movw	r24, r30
    a5d8:	84 5b       	subi	r24, 0xB4	; 180
    a5da:	9f 4f       	sbci	r25, 0xFF	; 255
    a5dc:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <LBGetNextFrame>
    a5e0:	40 e0       	ldi	r20, 0x00	; 0
    a5e2:	0e c0       	rjmp	.+28     	; 0xa600 <shot_map+0x54>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    a5e4:	cf 01       	movw	r24, r30
    a5e6:	80 5c       	subi	r24, 0xC0	; 192
    a5e8:	9f 4f       	sbci	r25, 0xFF	; 255
    a5ea:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <LBGetNextFrame>
    a5ee:	42 e0       	ldi	r20, 0x02	; 2
    a5f0:	07 c0       	rjmp	.+14     	; 0xa600 <shot_map+0x54>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    a5f2:	cf 01       	movw	r24, r30
    a5f4:	80 5c       	subi	r24, 0xC0	; 192
    a5f6:	9f 4f       	sbci	r25, 0xFF	; 255
    a5f8:	f1 cf       	rjmp	.-30     	; 0xa5dc <shot_map+0x30>
    a5fa:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    a5fc:	83 e8       	ldi	r24, 0x83	; 131
    a5fe:	91 e3       	ldi	r25, 0x31	; 49
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    a600:	bc 01       	movw	r22, r24
    a602:	8c 2f       	mov	r24, r28
    a604:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    a608:	81 e0       	ldi	r24, 0x01	; 1
    a60a:	8c 0f       	add	r24, r28
    a60c:	cf 91       	pop	r28
    a60e:	08 95       	ret

0000a610 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    a610:	cf 93       	push	r28
    a612:	df 93       	push	r29
    a614:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    a616:	88 81       	ld	r24, Y
    a618:	81 11       	cpse	r24, r1
    a61a:	0b c0       	rjmp	.+22     	; 0xa632 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    a61c:	6f 81       	ldd	r22, Y+7	; 0x07
    a61e:	78 85       	ldd	r23, Y+8	; 0x08
    a620:	89 85       	ldd	r24, Y+9	; 0x09
    a622:	9a 85       	ldd	r25, Y+10	; 0x0a
    a624:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a628:	66 95       	lsr	r22
    a62a:	66 95       	lsr	r22
    a62c:	66 95       	lsr	r22
    a62e:	6f 5f       	subi	r22, 0xFF	; 255
    a630:	1d c0       	rjmp	.+58     	; 0xa66c <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    a632:	81 30       	cpi	r24, 0x01	; 1
    a634:	69 f4       	brne	.+26     	; 0xa650 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    a636:	20 e0       	ldi	r18, 0x00	; 0
    a638:	30 e0       	ldi	r19, 0x00	; 0
    a63a:	40 e0       	ldi	r20, 0x00	; 0
    a63c:	5e e3       	ldi	r21, 0x3E	; 62
    a63e:	6b 81       	ldd	r22, Y+3	; 0x03
    a640:	7c 81       	ldd	r23, Y+4	; 0x04
    a642:	8d 81       	ldd	r24, Y+5	; 0x05
    a644:	9e 81       	ldd	r25, Y+6	; 0x06
    a646:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    a64a:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a64e:	27 c0       	rjmp	.+78     	; 0xa69e <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    a650:	82 30       	cpi	r24, 0x02	; 2
    a652:	d9 f4       	brne	.+54     	; 0xa68a <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    a654:	20 e0       	ldi	r18, 0x00	; 0
    a656:	30 e0       	ldi	r19, 0x00	; 0
    a658:	40 e0       	ldi	r20, 0x00	; 0
    a65a:	5e e3       	ldi	r21, 0x3E	; 62
    a65c:	6f 81       	ldd	r22, Y+7	; 0x07
    a65e:	78 85       	ldd	r23, Y+8	; 0x08
    a660:	89 85       	ldd	r24, Y+9	; 0x09
    a662:	9a 85       	ldd	r25, Y+10	; 0x0a
    a664:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    a668:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
		sprite->y = tile * 8;
    a66c:	88 e0       	ldi	r24, 0x08	; 8
    a66e:	68 9f       	mul	r22, r24
    a670:	b0 01       	movw	r22, r0
    a672:	11 24       	eor	r1, r1
    a674:	88 27       	eor	r24, r24
    a676:	77 fd       	sbrc	r23, 7
    a678:	80 95       	com	r24
    a67a:	98 2f       	mov	r25, r24
    a67c:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    a680:	6f 83       	std	Y+7, r22	; 0x07
    a682:	78 87       	std	Y+8, r23	; 0x08
    a684:	89 87       	std	Y+9, r24	; 0x09
    a686:	9a 87       	std	Y+10, r25	; 0x0a
    a688:	18 c0       	rjmp	.+48     	; 0xa6ba <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    a68a:	6b 81       	ldd	r22, Y+3	; 0x03
    a68c:	7c 81       	ldd	r23, Y+4	; 0x04
    a68e:	8d 81       	ldd	r24, Y+5	; 0x05
    a690:	9e 81       	ldd	r25, Y+6	; 0x06
    a692:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a696:	66 95       	lsr	r22
    a698:	66 95       	lsr	r22
    a69a:	66 95       	lsr	r22
    a69c:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    a69e:	88 e0       	ldi	r24, 0x08	; 8
    a6a0:	68 9f       	mul	r22, r24
    a6a2:	b0 01       	movw	r22, r0
    a6a4:	11 24       	eor	r1, r1
    a6a6:	88 27       	eor	r24, r24
    a6a8:	77 fd       	sbrc	r23, 7
    a6aa:	80 95       	com	r24
    a6ac:	98 2f       	mov	r25, r24
    a6ae:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    a6b2:	6b 83       	std	Y+3, r22	; 0x03
    a6b4:	7c 83       	std	Y+4, r23	; 0x04
    a6b6:	8d 83       	std	Y+5, r24	; 0x05
    a6b8:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    a6ba:	81 e0       	ldi	r24, 0x01	; 1
    a6bc:	8a 83       	std	Y+2, r24	; 0x02
}
    a6be:	df 91       	pop	r29
    a6c0:	cf 91       	pop	r28
    a6c2:	08 95       	ret

0000a6c4 <recoil_sprite_fine>:

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    a6c4:	cf 93       	push	r28
    a6c6:	df 93       	push	r29
    a6c8:	eb 01       	movw	r28, r22
	float speed = get_delta(p, sprite);
    a6ca:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    a6ce:	9b 01       	movw	r18, r22
    a6d0:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    a6d2:	88 81       	ld	r24, Y
    a6d4:	81 11       	cpse	r24, r1
    a6d6:	07 c0       	rjmp	.+14     	; 0xa6e6 <recoil_sprite_fine+0x22>
	{
		sprite->y += speed;
    a6d8:	6f 81       	ldd	r22, Y+7	; 0x07
    a6da:	78 85       	ldd	r23, Y+8	; 0x08
    a6dc:	89 85       	ldd	r24, Y+9	; 0x09
    a6de:	9a 85       	ldd	r25, Y+10	; 0x0a
    a6e0:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a6e4:	11 c0       	rjmp	.+34     	; 0xa708 <recoil_sprite_fine+0x44>
	}
	else if (sprite->direction == D_RIGHT)
    a6e6:	81 30       	cpi	r24, 0x01	; 1
    a6e8:	39 f4       	brne	.+14     	; 0xa6f8 <recoil_sprite_fine+0x34>
	{
		sprite->x -= speed;
    a6ea:	6b 81       	ldd	r22, Y+3	; 0x03
    a6ec:	7c 81       	ldd	r23, Y+4	; 0x04
    a6ee:	8d 81       	ldd	r24, Y+5	; 0x05
    a6f0:	9e 81       	ldd	r25, Y+6	; 0x06
    a6f2:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    a6f6:	13 c0       	rjmp	.+38     	; 0xa71e <recoil_sprite_fine+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    a6f8:	82 30       	cpi	r24, 0x02	; 2
    a6fa:	59 f4       	brne	.+22     	; 0xa712 <recoil_sprite_fine+0x4e>
	{
		sprite->y -= speed;
    a6fc:	6f 81       	ldd	r22, Y+7	; 0x07
    a6fe:	78 85       	ldd	r23, Y+8	; 0x08
    a700:	89 85       	ldd	r24, Y+9	; 0x09
    a702:	9a 85       	ldd	r25, Y+10	; 0x0a
    a704:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    a708:	6f 83       	std	Y+7, r22	; 0x07
    a70a:	78 87       	std	Y+8, r23	; 0x08
    a70c:	89 87       	std	Y+9, r24	; 0x09
    a70e:	9a 87       	std	Y+10, r25	; 0x0a
    a710:	0a c0       	rjmp	.+20     	; 0xa726 <recoil_sprite_fine+0x62>
	}
	else
	{
		sprite->x += speed;
    a712:	6b 81       	ldd	r22, Y+3	; 0x03
    a714:	7c 81       	ldd	r23, Y+4	; 0x04
    a716:	8d 81       	ldd	r24, Y+5	; 0x05
    a718:	9e 81       	ldd	r25, Y+6	; 0x06
    a71a:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a71e:	6b 83       	std	Y+3, r22	; 0x03
    a720:	7c 83       	std	Y+4, r23	; 0x04
    a722:	8d 83       	std	Y+5, r24	; 0x05
    a724:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    a726:	81 e0       	ldi	r24, 0x01	; 1
    a728:	8a 83       	std	Y+2, r24	; 0x02
}
    a72a:	df 91       	pop	r29
    a72c:	cf 91       	pop	r28
    a72e:	08 95       	ret

0000a730 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a730:	88 5a       	subi	r24, 0xA8	; 168
    a732:	93 4f       	sbci	r25, 0xF3	; 243
    a734:	fc 01       	movw	r30, r24
    a736:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a738:	81 30       	cpi	r24, 0x01	; 1
    a73a:	31 f0       	breq	.+12     	; 0xa748 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    a73c:	82 30       	cpi	r24, 0x02	; 2
    a73e:	31 f0       	breq	.+12     	; 0xa74c <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    a740:	87 33       	cpi	r24, 0x37	; 55
    a742:	31 f0       	breq	.+12     	; 0xa750 <solid_square_tile+0x20>

	return 0;
    a744:	80 e0       	ldi	r24, 0x00	; 0
    a746:	08 95       	ret
    a748:	81 e0       	ldi	r24, 0x01	; 1
    a74a:	08 95       	ret
    a74c:	82 e0       	ldi	r24, 0x02	; 2
    a74e:	08 95       	ret
    a750:	87 e3       	ldi	r24, 0x37	; 55
}
    a752:	08 95       	ret

0000a754 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a754:	88 5a       	subi	r24, 0xA8	; 168
    a756:	93 4f       	sbci	r25, 0xF3	; 243
    a758:	fc 01       	movw	r30, r24
    a75a:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    a75c:	83 30       	cpi	r24, 0x03	; 3
    a75e:	41 f0       	breq	.+16     	; 0xa770 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    a760:	86 30       	cpi	r24, 0x06	; 6
    a762:	41 f0       	breq	.+16     	; 0xa774 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    a764:	84 30       	cpi	r24, 0x04	; 4
    a766:	41 f0       	breq	.+16     	; 0xa778 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    a768:	85 30       	cpi	r24, 0x05	; 5
    a76a:	41 f0       	breq	.+16     	; 0xa77c <solid_directional_tile+0x28>
	
	return 0;
    a76c:	80 e0       	ldi	r24, 0x00	; 0
    a76e:	08 95       	ret
    a770:	83 e0       	ldi	r24, 0x03	; 3
    a772:	08 95       	ret
    a774:	86 e0       	ldi	r24, 0x06	; 6
    a776:	08 95       	ret
    a778:	84 e0       	ldi	r24, 0x04	; 4
    a77a:	08 95       	ret
    a77c:	85 e0       	ldi	r24, 0x05	; 5
}
    a77e:	08 95       	ret

0000a780 <solid_tile>:

u8 solid_tile(int tile_index)
{
    a780:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    a782:	fc 01       	movw	r30, r24
    a784:	e8 5a       	subi	r30, 0xA8	; 168
    a786:	f3 4f       	sbci	r31, 0xF3	; 243
    a788:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a78a:	91 30       	cpi	r25, 0x01	; 1
    a78c:	39 f0       	breq	.+14     	; 0xa79c <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    a78e:	92 30       	cpi	r25, 0x02	; 2
    a790:	39 f0       	breq	.+14     	; 0xa7a0 <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    a792:	97 33       	cpi	r25, 0x37	; 55
    a794:	39 f0       	breq	.+14     	; 0xa7a4 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    a796:	c9 01       	movw	r24, r18
    a798:	0c 94 aa 53 	jmp	0xa754	; 0xa754 <solid_directional_tile>
    a79c:	81 e0       	ldi	r24, 0x01	; 1
    a79e:	08 95       	ret
    a7a0:	82 e0       	ldi	r24, 0x02	; 2
    a7a2:	08 95       	ret
    a7a4:	87 e3       	ldi	r24, 0x37	; 55
}
    a7a6:	08 95       	ret

0000a7a8 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    a7a8:	7f 92       	push	r7
    a7aa:	8f 92       	push	r8
    a7ac:	9f 92       	push	r9
    a7ae:	af 92       	push	r10
    a7b0:	bf 92       	push	r11
    a7b2:	cf 92       	push	r12
    a7b4:	df 92       	push	r13
    a7b6:	ef 92       	push	r14
    a7b8:	ff 92       	push	r15
    a7ba:	0f 93       	push	r16
    a7bc:	1f 93       	push	r17
    a7be:	cf 93       	push	r28
    a7c0:	df 93       	push	r29
    a7c2:	b6 2e       	mov	r11, r22
    a7c4:	94 2e       	mov	r9, r20
    a7c6:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    a7c8:	fc 01       	movw	r30, r24
    a7ca:	e8 5a       	subi	r30, 0xA8	; 168
    a7cc:	f3 4f       	sbci	r31, 0xF3	; 243
    a7ce:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    a7d0:	6e e1       	ldi	r22, 0x1E	; 30
    a7d2:	70 e0       	ldi	r23, 0x00	; 0
    a7d4:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    a7d8:	f8 2e       	mov	r15, r24
    a7da:	ff 0c       	add	r15, r15
    a7dc:	ff 0c       	add	r15, r15
    a7de:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    a7e0:	6d 5f       	subi	r22, 0xFD	; 253
    a7e2:	7f 4f       	sbci	r23, 0xFF	; 255
    a7e4:	16 2f       	mov	r17, r22
    a7e6:	11 0f       	add	r17, r17
    a7e8:	11 0f       	add	r17, r17
    a7ea:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    a7ec:	83 e0       	ldi	r24, 0x03	; 3
    a7ee:	d8 16       	cp	r13, r24
    a7f0:	19 f0       	breq	.+6      	; 0xa7f8 <collides_directional_tile+0x50>
    a7f2:	86 e0       	ldi	r24, 0x06	; 6
    a7f4:	d8 12       	cpse	r13, r24
    a7f6:	31 c0       	rjmp	.+98     	; 0xa85a <collides_directional_tile+0xb2>
    a7f8:	cf ef       	ldi	r28, 0xFF	; 255
    a7fa:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    a7fc:	c9 0d       	add	r28, r9
    a7fe:	27 e0       	ldi	r18, 0x07	; 7
    a800:	72 2e       	mov	r7, r18
    a802:	7f 0c       	add	r7, r15
    a804:	37 e0       	ldi	r19, 0x07	; 7
    a806:	83 2e       	mov	r8, r19
    a808:	81 0e       	add	r8, r17
    a80a:	ac 2e       	mov	r10, r28
    a80c:	cb 2c       	mov	r12, r11
    a80e:	e9 2c       	mov	r14, r9
    a810:	0b 2d       	mov	r16, r11
    a812:	21 2f       	mov	r18, r17
    a814:	47 2d       	mov	r20, r7
    a816:	68 2d       	mov	r22, r8
    a818:	8f 2d       	mov	r24, r15
    a81a:	0e 94 df 4c 	call	0x99be	; 0x99be <LBLineIntersect>
    a81e:	81 11       	cpse	r24, r1
    a820:	58 c0       	rjmp	.+176    	; 0xa8d2 <collides_directional_tile+0x12a>
    a822:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    a824:	db 0d       	add	r29, r11
    a826:	a9 2c       	mov	r10, r9
    a828:	cd 2e       	mov	r12, r29
    a82a:	21 2f       	mov	r18, r17
    a82c:	47 2d       	mov	r20, r7
    a82e:	68 2d       	mov	r22, r8
    a830:	8f 2d       	mov	r24, r15
    a832:	0e 94 df 4c 	call	0x99be	; 0x99be <LBLineIntersect>
    a836:	81 11       	cpse	r24, r1
    a838:	4c c0       	rjmp	.+152    	; 0xa8d2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    a83a:	ac 2e       	mov	r10, r28
    a83c:	0d 2f       	mov	r16, r29
    a83e:	21 2f       	mov	r18, r17
    a840:	47 2d       	mov	r20, r7
    a842:	68 2d       	mov	r22, r8
    a844:	8f 2d       	mov	r24, r15
    a846:	0e 94 df 4c 	call	0x99be	; 0x99be <LBLineIntersect>
    a84a:	81 11       	cpse	r24, r1
    a84c:	42 c0       	rjmp	.+132    	; 0xa8d2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    a84e:	ec 2e       	mov	r14, r28
    a850:	0b 2d       	mov	r16, r11
    a852:	21 2f       	mov	r18, r17
    a854:	47 2d       	mov	r20, r7
    a856:	68 2d       	mov	r22, r8
    a858:	34 c0       	rjmp	.+104    	; 0xa8c2 <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    a85a:	8c ef       	ldi	r24, 0xFC	; 252
    a85c:	8d 0d       	add	r24, r13
    a85e:	82 30       	cpi	r24, 0x02	; 2
    a860:	b0 f5       	brcc	.+108    	; 0xa8ce <collides_directional_tile+0x126>
    a862:	cf ef       	ldi	r28, 0xFF	; 255
    a864:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    a866:	c4 0f       	add	r28, r20
    a868:	87 e0       	ldi	r24, 0x07	; 7
    a86a:	78 2e       	mov	r7, r24
    a86c:	71 0e       	add	r7, r17
    a86e:	97 e0       	ldi	r25, 0x07	; 7
    a870:	89 2e       	mov	r8, r25
    a872:	8f 0c       	add	r8, r15
    a874:	ac 2e       	mov	r10, r28
    a876:	cb 2c       	mov	r12, r11
    a878:	e4 2e       	mov	r14, r20
    a87a:	0b 2d       	mov	r16, r11
    a87c:	27 2d       	mov	r18, r7
    a87e:	48 2d       	mov	r20, r8
    a880:	61 2f       	mov	r22, r17
    a882:	8f 2d       	mov	r24, r15
    a884:	0e 94 df 4c 	call	0x99be	; 0x99be <LBLineIntersect>
    a888:	81 11       	cpse	r24, r1
    a88a:	23 c0       	rjmp	.+70     	; 0xa8d2 <collides_directional_tile+0x12a>
    a88c:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    a88e:	db 0d       	add	r29, r11
    a890:	a9 2c       	mov	r10, r9
    a892:	cd 2e       	mov	r12, r29
    a894:	27 2d       	mov	r18, r7
    a896:	48 2d       	mov	r20, r8
    a898:	61 2f       	mov	r22, r17
    a89a:	8f 2d       	mov	r24, r15
    a89c:	0e 94 df 4c 	call	0x99be	; 0x99be <LBLineIntersect>
    a8a0:	81 11       	cpse	r24, r1
    a8a2:	17 c0       	rjmp	.+46     	; 0xa8d2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    a8a4:	ac 2e       	mov	r10, r28
    a8a6:	0d 2f       	mov	r16, r29
    a8a8:	27 2d       	mov	r18, r7
    a8aa:	48 2d       	mov	r20, r8
    a8ac:	61 2f       	mov	r22, r17
    a8ae:	8f 2d       	mov	r24, r15
    a8b0:	0e 94 df 4c 	call	0x99be	; 0x99be <LBLineIntersect>
    a8b4:	81 11       	cpse	r24, r1
    a8b6:	0d c0       	rjmp	.+26     	; 0xa8d2 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    a8b8:	ec 2e       	mov	r14, r28
    a8ba:	0b 2d       	mov	r16, r11
    a8bc:	27 2d       	mov	r18, r7
    a8be:	48 2d       	mov	r20, r8
    a8c0:	61 2f       	mov	r22, r17
    a8c2:	8f 2d       	mov	r24, r15
    a8c4:	0e 94 df 4c 	call	0x99be	; 0x99be <LBLineIntersect>
    a8c8:	81 11       	cpse	r24, r1
    a8ca:	03 c0       	rjmp	.+6      	; 0xa8d2 <collides_directional_tile+0x12a>
    a8cc:	03 c0       	rjmp	.+6      	; 0xa8d4 <collides_directional_tile+0x12c>
	}
	
	return 0;
    a8ce:	80 e0       	ldi	r24, 0x00	; 0
    a8d0:	01 c0       	rjmp	.+2      	; 0xa8d4 <collides_directional_tile+0x12c>
    a8d2:	8d 2d       	mov	r24, r13
}
    a8d4:	df 91       	pop	r29
    a8d6:	cf 91       	pop	r28
    a8d8:	1f 91       	pop	r17
    a8da:	0f 91       	pop	r16
    a8dc:	ff 90       	pop	r15
    a8de:	ef 90       	pop	r14
    a8e0:	df 90       	pop	r13
    a8e2:	cf 90       	pop	r12
    a8e4:	bf 90       	pop	r11
    a8e6:	af 90       	pop	r10
    a8e8:	9f 90       	pop	r9
    a8ea:	8f 90       	pop	r8
    a8ec:	7f 90       	pop	r7
    a8ee:	08 95       	ret

0000a8f0 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    a8f0:	8f 92       	push	r8
    a8f2:	9f 92       	push	r9
    a8f4:	af 92       	push	r10
    a8f6:	cf 92       	push	r12
    a8f8:	ef 92       	push	r14
    a8fa:	0f 93       	push	r16
    a8fc:	1f 93       	push	r17
    a8fe:	cf 93       	push	r28
    a900:	df 93       	push	r29
    a902:	4c 01       	movw	r8, r24
    a904:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a906:	20 e0       	ldi	r18, 0x00	; 0
    a908:	30 e0       	ldi	r19, 0x00	; 0
    a90a:	40 e0       	ldi	r20, 0x00	; 0
    a90c:	50 e4       	ldi	r21, 0x40	; 64
    a90e:	6f 81       	ldd	r22, Y+7	; 0x07
    a910:	78 85       	ldd	r23, Y+8	; 0x08
    a912:	89 85       	ldd	r24, Y+9	; 0x09
    a914:	9a 85       	ldd	r25, Y+10	; 0x0a
    a916:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a91a:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a91e:	e6 2e       	mov	r14, r22
    a920:	20 e0       	ldi	r18, 0x00	; 0
    a922:	30 e0       	ldi	r19, 0x00	; 0
    a924:	40 e0       	ldi	r20, 0x00	; 0
    a926:	50 e4       	ldi	r21, 0x40	; 64
    a928:	6b 81       	ldd	r22, Y+3	; 0x03
    a92a:	7c 81       	ldd	r23, Y+4	; 0x04
    a92c:	8d 81       	ldd	r24, Y+5	; 0x05
    a92e:	9e 81       	ldd	r25, Y+6	; 0x06
    a930:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a934:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a938:	06 2f       	mov	r16, r22
    a93a:	20 e0       	ldi	r18, 0x00	; 0
    a93c:	30 e0       	ldi	r19, 0x00	; 0
    a93e:	40 e8       	ldi	r20, 0x80	; 128
    a940:	5f e3       	ldi	r21, 0x3F	; 63
    a942:	f4 01       	movw	r30, r8
    a944:	67 81       	ldd	r22, Z+7	; 0x07
    a946:	70 85       	ldd	r23, Z+8	; 0x08
    a948:	81 85       	ldd	r24, Z+9	; 0x09
    a94a:	92 85       	ldd	r25, Z+10	; 0x0a
    a94c:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a950:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a954:	16 2f       	mov	r17, r22
    a956:	20 e0       	ldi	r18, 0x00	; 0
    a958:	30 e0       	ldi	r19, 0x00	; 0
    a95a:	40 e8       	ldi	r20, 0x80	; 128
    a95c:	5f e3       	ldi	r21, 0x3F	; 63
    a95e:	f4 01       	movw	r30, r8
    a960:	63 81       	ldd	r22, Z+3	; 0x03
    a962:	74 81       	ldd	r23, Z+4	; 0x04
    a964:	85 81       	ldd	r24, Z+5	; 0x05
    a966:	96 81       	ldd	r25, Z+6	; 0x06
    a968:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a96c:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a970:	86 2f       	mov	r24, r22
    a972:	94 e0       	ldi	r25, 0x04	; 4
    a974:	a9 2e       	mov	r10, r25
    a976:	24 e0       	ldi	r18, 0x04	; 4
    a978:	c2 2e       	mov	r12, r18
    a97a:	2e e0       	ldi	r18, 0x0E	; 14
    a97c:	4e e0       	ldi	r20, 0x0E	; 14
    a97e:	61 2f       	mov	r22, r17
    a980:	0e 94 b5 4c 	call	0x996a	; 0x996a <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a984:	88 23       	and	r24, r24
    a986:	41 f0       	breq	.+16     	; 0xa998 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a988:	f4 01       	movw	r30, r8
    a98a:	86 89       	ldd	r24, Z+22	; 0x16
    a98c:	88 37       	cpi	r24, 0x78	; 120
    a98e:	21 f4       	brne	.+8      	; 0xa998 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a990:	81 e0       	ldi	r24, 0x01	; 1
    a992:	9f 85       	ldd	r25, Y+15	; 0x0f
    a994:	99 30       	cpi	r25, 0x09	; 9
    a996:	08 f4       	brcc	.+2      	; 0xa99a <player_shot+0xaa>
    a998:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    a99a:	df 91       	pop	r29
    a99c:	cf 91       	pop	r28
    a99e:	1f 91       	pop	r17
    a9a0:	0f 91       	pop	r16
    a9a2:	ef 90       	pop	r14
    a9a4:	cf 90       	pop	r12
    a9a6:	af 90       	pop	r10
    a9a8:	9f 90       	pop	r9
    a9aa:	8f 90       	pop	r8
    a9ac:	08 95       	ret

0000a9ae <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    a9ae:	af 92       	push	r10
    a9b0:	cf 92       	push	r12
    a9b2:	ef 92       	push	r14
    a9b4:	0f 93       	push	r16
    a9b6:	1f 93       	push	r17
    a9b8:	cf 93       	push	r28
    a9ba:	df 93       	push	r29
    a9bc:	ec 01       	movw	r28, r24
    a9be:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    a9c0:	20 e0       	ldi	r18, 0x00	; 0
    a9c2:	30 e0       	ldi	r19, 0x00	; 0
    a9c4:	40 e0       	ldi	r20, 0x00	; 0
    a9c6:	50 e4       	ldi	r21, 0x40	; 64
    a9c8:	fb 01       	movw	r30, r22
    a9ca:	67 81       	ldd	r22, Z+7	; 0x07
    a9cc:	70 85       	ldd	r23, Z+8	; 0x08
    a9ce:	81 85       	ldd	r24, Z+9	; 0x09
    a9d0:	92 85       	ldd	r25, Z+10	; 0x0a
    a9d2:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a9d6:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a9da:	e6 2e       	mov	r14, r22
    a9dc:	20 e0       	ldi	r18, 0x00	; 0
    a9de:	30 e0       	ldi	r19, 0x00	; 0
    a9e0:	40 e0       	ldi	r20, 0x00	; 0
    a9e2:	50 e4       	ldi	r21, 0x40	; 64
    a9e4:	f8 01       	movw	r30, r16
    a9e6:	63 81       	ldd	r22, Z+3	; 0x03
    a9e8:	74 81       	ldd	r23, Z+4	; 0x04
    a9ea:	85 81       	ldd	r24, Z+5	; 0x05
    a9ec:	96 81       	ldd	r25, Z+6	; 0x06
    a9ee:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    a9f2:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    a9f6:	06 2f       	mov	r16, r22
    a9f8:	6f 81       	ldd	r22, Y+7	; 0x07
    a9fa:	78 85       	ldd	r23, Y+8	; 0x08
    a9fc:	89 85       	ldd	r24, Y+9	; 0x09
    a9fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    aa00:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    aa04:	16 2f       	mov	r17, r22
    aa06:	6b 81       	ldd	r22, Y+3	; 0x03
    aa08:	7c 81       	ldd	r23, Y+4	; 0x04
    aa0a:	8d 81       	ldd	r24, Y+5	; 0x05
    aa0c:	9e 81       	ldd	r25, Y+6	; 0x06
    aa0e:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    aa12:	86 2f       	mov	r24, r22
    aa14:	94 e0       	ldi	r25, 0x04	; 4
    aa16:	a9 2e       	mov	r10, r25
    aa18:	24 e0       	ldi	r18, 0x04	; 4
    aa1a:	c2 2e       	mov	r12, r18
    aa1c:	28 e0       	ldi	r18, 0x08	; 8
    aa1e:	48 e0       	ldi	r20, 0x08	; 8
    aa20:	61 2f       	mov	r22, r17
    aa22:	0e 94 b5 4c 	call	0x996a	; 0x996a <LBCollides>
    aa26:	88 23       	and	r24, r24
    aa28:	39 f0       	breq	.+14     	; 0xaa38 <turret_shot+0x8a>
    aa2a:	91 e0       	ldi	r25, 0x01	; 1
    aa2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    aa2e:	81 11       	cpse	r24, r1
    aa30:	01 c0       	rjmp	.+2      	; 0xaa34 <turret_shot+0x86>
    aa32:	90 e0       	ldi	r25, 0x00	; 0
    aa34:	89 2f       	mov	r24, r25
    aa36:	01 c0       	rjmp	.+2      	; 0xaa3a <turret_shot+0x8c>
    aa38:	80 e0       	ldi	r24, 0x00	; 0
}
    aa3a:	df 91       	pop	r29
    aa3c:	cf 91       	pop	r28
    aa3e:	1f 91       	pop	r17
    aa40:	0f 91       	pop	r16
    aa42:	ef 90       	pop	r14
    aa44:	cf 90       	pop	r12
    aa46:	af 90       	pop	r10
    aa48:	08 95       	ret

0000aa4a <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    aa4a:	cf 92       	push	r12
    aa4c:	df 92       	push	r13
    aa4e:	ef 92       	push	r14
    aa50:	ff 92       	push	r15
    aa52:	cf 93       	push	r28
    aa54:	df 93       	push	r29
    aa56:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    aa58:	cb 80       	ldd	r12, Y+3	; 0x03
    aa5a:	dc 80       	ldd	r13, Y+4	; 0x04
    aa5c:	ed 80       	ldd	r14, Y+5	; 0x05
    aa5e:	fe 80       	ldd	r15, Y+6	; 0x06
    aa60:	20 e0       	ldi	r18, 0x00	; 0
    aa62:	30 e0       	ldi	r19, 0x00	; 0
    aa64:	a9 01       	movw	r20, r18
    aa66:	c7 01       	movw	r24, r14
    aa68:	b6 01       	movw	r22, r12
    aa6a:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    aa6e:	87 fd       	sbrc	r24, 7
    aa70:	31 c0       	rjmp	.+98     	; 0xaad4 <collision_detect_boundries+0x8a>
    aa72:	20 e0       	ldi	r18, 0x00	; 0
    aa74:	30 e0       	ldi	r19, 0x00	; 0
    aa76:	40 e0       	ldi	r20, 0x00	; 0
    aa78:	51 e4       	ldi	r21, 0x41	; 65
    aa7a:	c7 01       	movw	r24, r14
    aa7c:	b6 01       	movw	r22, r12
    aa7e:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    aa82:	20 e0       	ldi	r18, 0x00	; 0
    aa84:	30 e0       	ldi	r19, 0x00	; 0
    aa86:	40 e7       	ldi	r20, 0x70	; 112
    aa88:	53 e4       	ldi	r21, 0x43	; 67
    aa8a:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    aa8e:	18 16       	cp	r1, r24
    aa90:	0c f1       	brlt	.+66     	; 0xaad4 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    aa92:	cf 80       	ldd	r12, Y+7	; 0x07
    aa94:	d8 84       	ldd	r13, Y+8	; 0x08
    aa96:	e9 84       	ldd	r14, Y+9	; 0x09
    aa98:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    aa9a:	20 e0       	ldi	r18, 0x00	; 0
    aa9c:	30 e0       	ldi	r19, 0x00	; 0
    aa9e:	40 ec       	ldi	r20, 0xC0	; 192
    aaa0:	51 e4       	ldi	r21, 0x41	; 65
    aaa2:	c7 01       	movw	r24, r14
    aaa4:	b6 01       	movw	r22, r12
    aaa6:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    aaaa:	87 fd       	sbrc	r24, 7
    aaac:	13 c0       	rjmp	.+38     	; 0xaad4 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    aaae:	20 e0       	ldi	r18, 0x00	; 0
    aab0:	30 e0       	ldi	r19, 0x00	; 0
    aab2:	40 e0       	ldi	r20, 0x00	; 0
    aab4:	51 e4       	ldi	r21, 0x41	; 65
    aab6:	c7 01       	movw	r24, r14
    aab8:	b6 01       	movw	r22, r12
    aaba:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    aabe:	c1 e0       	ldi	r28, 0x01	; 1
    aac0:	20 e0       	ldi	r18, 0x00	; 0
    aac2:	30 e0       	ldi	r19, 0x00	; 0
    aac4:	40 e6       	ldi	r20, 0x60	; 96
    aac6:	53 e4       	ldi	r21, 0x43	; 67
    aac8:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    aacc:	18 16       	cp	r1, r24
    aace:	1c f0       	brlt	.+6      	; 0xaad6 <collision_detect_boundries+0x8c>
    aad0:	c0 e0       	ldi	r28, 0x00	; 0
    aad2:	01 c0       	rjmp	.+2      	; 0xaad6 <collision_detect_boundries+0x8c>
	{
		return 1;
    aad4:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    aad6:	8c 2f       	mov	r24, r28
    aad8:	df 91       	pop	r29
    aada:	cf 91       	pop	r28
    aadc:	ff 90       	pop	r15
    aade:	ef 90       	pop	r14
    aae0:	df 90       	pop	r13
    aae2:	cf 90       	pop	r12
    aae4:	08 95       	ret

0000aae6 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    aae6:	1f 93       	push	r17
    aae8:	cf 93       	push	r28
    aaea:	df 93       	push	r29
    aaec:	9c 01       	movw	r18, r24
    aaee:	fb 01       	movw	r30, r22
    aaf0:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    aaf2:	6e e1       	ldi	r22, 0x1E	; 30
    aaf4:	70 e0       	ldi	r23, 0x00	; 0
    aaf6:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    aafa:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    aafc:	63 e0       	ldi	r22, 0x03	; 3
    aafe:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    ab00:	e9 01       	movw	r28, r18
    ab02:	c8 5a       	subi	r28, 0xA8	; 168
    ab04:	d3 4f       	sbci	r29, 0xF3	; 243
    ab06:	49 81       	ldd	r20, Y+1	; 0x01
    ab08:	44 23       	and	r20, r20
    ab0a:	71 f0       	breq	.+28     	; 0xab28 <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    ab0c:	e9 01       	movw	r28, r18
    ab0e:	c7 5a       	subi	r28, 0xA7	; 167
    ab10:	d3 4f       	sbci	r29, 0xF3	; 243
    ab12:	49 81       	ldd	r20, Y+1	; 0x01
    ab14:	44 23       	and	r20, r20
    ab16:	91 f0       	breq	.+36     	; 0xab3c <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    ab18:	e9 01       	movw	r28, r18
    ab1a:	ca 58       	subi	r28, 0x8A	; 138
    ab1c:	d3 4f       	sbci	r29, 0xF3	; 243
    ab1e:	49 81       	ldd	r20, Y+1	; 0x01
    ab20:	41 11       	cpse	r20, r1
    ab22:	04 c0       	rjmp	.+8      	; 0xab2c <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    ab24:	64 e0       	ldi	r22, 0x04	; 4
    ab26:	69 0f       	add	r22, r25
    ab28:	af 01       	movw	r20, r30
    ab2a:	0a c0       	rjmp	.+20     	; 0xab40 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    ab2c:	e9 01       	movw	r28, r18
    ab2e:	c9 58       	subi	r28, 0x89	; 137
    ab30:	d3 4f       	sbci	r29, 0xF3	; 243
    ab32:	29 81       	ldd	r18, Y+1	; 0x01
    ab34:	21 11       	cpse	r18, r1
    ab36:	07 c0       	rjmp	.+14     	; 0xab46 <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    ab38:	64 e0       	ldi	r22, 0x04	; 4
    ab3a:	69 0f       	add	r22, r25
    ab3c:	af 01       	movw	r20, r30
    ab3e:	8f 5f       	subi	r24, 0xFF	; 255
    ab40:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
		level.level_map[tile_index+31] = item_type;
    ab44:	19 83       	std	Y+1, r17	; 0x01
	}
}
    ab46:	df 91       	pop	r29
    ab48:	cf 91       	pop	r28
    ab4a:	1f 91       	pop	r17
    ab4c:	08 95       	ret

0000ab4e <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    ab4e:	ff 92       	push	r15
    ab50:	0f 93       	push	r16
    ab52:	1f 93       	push	r17
    ab54:	cf 93       	push	r28
    ab56:	df 93       	push	r29
    ab58:	ec 01       	movw	r28, r24
    ab5a:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    ab5c:	20 e0       	ldi	r18, 0x00	; 0
    ab5e:	30 e0       	ldi	r19, 0x00	; 0
    ab60:	40 e0       	ldi	r20, 0x00	; 0
    ab62:	5e e3       	ldi	r21, 0x3E	; 62
    ab64:	6f 81       	ldd	r22, Y+7	; 0x07
    ab66:	78 85       	ldd	r23, Y+8	; 0x08
    ab68:	89 85       	ldd	r24, Y+9	; 0x09
    ab6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    ab6c:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    ab70:	20 e0       	ldi	r18, 0x00	; 0
    ab72:	30 e0       	ldi	r19, 0x00	; 0
    ab74:	40 e4       	ldi	r20, 0x40	; 64
    ab76:	50 e4       	ldi	r21, 0x40	; 64
    ab78:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    ab7c:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    ab80:	8e e1       	ldi	r24, 0x1E	; 30
    ab82:	68 9f       	mul	r22, r24
    ab84:	80 01       	movw	r16, r0
    ab86:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    ab88:	20 e0       	ldi	r18, 0x00	; 0
    ab8a:	30 e0       	ldi	r19, 0x00	; 0
    ab8c:	40 e0       	ldi	r20, 0x00	; 0
    ab8e:	5e e3       	ldi	r21, 0x3E	; 62
    ab90:	6b 81       	ldd	r22, Y+3	; 0x03
    ab92:	7c 81       	ldd	r23, Y+4	; 0x04
    ab94:	8d 81       	ldd	r24, Y+5	; 0x05
    ab96:	9e 81       	ldd	r25, Y+6	; 0x06
    ab98:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    ab9c:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    aba0:	06 0f       	add	r16, r22
    aba2:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    aba4:	89 8d       	ldd	r24, Y+25	; 0x19
    aba6:	88 23       	and	r24, r24
    aba8:	79 f0       	breq	.+30     	; 0xabc8 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    abaa:	40 e0       	ldi	r20, 0x00	; 0
    abac:	50 e0       	ldi	r21, 0x00	; 0
    abae:	61 e0       	ldi	r22, 0x01	; 1
    abb0:	8a e0       	ldi	r24, 0x0A	; 10
    abb2:	8f 0d       	add	r24, r15
    abb4:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    abb8:	47 e0       	ldi	r20, 0x07	; 7
    abba:	61 ef       	ldi	r22, 0xF1	; 241
    abbc:	7a e6       	ldi	r23, 0x6A	; 106
    abbe:	c8 01       	movw	r24, r16
    abc0:	0e 94 73 55 	call	0xaae6	; 0xaae6 <drop_item>
		player->max_speed = MAX_SPEED;
    abc4:	82 e3       	ldi	r24, 0x32	; 50
    abc6:	8f 8b       	std	Y+23, r24	; 0x17
	}
	if (player->has_rocket)
    abc8:	88 8d       	ldd	r24, Y+24	; 0x18
    abca:	88 23       	and	r24, r24
    abcc:	69 f0       	breq	.+26     	; 0xabe8 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    abce:	40 e0       	ldi	r20, 0x00	; 0
    abd0:	50 e0       	ldi	r21, 0x00	; 0
    abd2:	61 e0       	ldi	r22, 0x01	; 1
    abd4:	8b e0       	ldi	r24, 0x0B	; 11
    abd6:	8f 0d       	add	r24, r15
    abd8:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    abdc:	49 e0       	ldi	r20, 0x09	; 9
    abde:	6b ee       	ldi	r22, 0xEB	; 235
    abe0:	7a e6       	ldi	r23, 0x6A	; 106
    abe2:	c8 01       	movw	r24, r16
    abe4:	0e 94 73 55 	call	0xaae6	; 0xaae6 <drop_item>
	}
	player->has_over_speed = false;
    abe8:	19 8e       	std	Y+25, r1	; 0x19
	player->has_rocket = false;
    abea:	18 8e       	std	Y+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    abec:	8d 89       	ldd	r24, Y+21	; 0x15
    abee:	81 60       	ori	r24, 0x01	; 1
    abf0:	8d 8b       	std	Y+21, r24	; 0x15
}
    abf2:	df 91       	pop	r29
    abf4:	cf 91       	pop	r28
    abf6:	1f 91       	pop	r17
    abf8:	0f 91       	pop	r16
    abfa:	ff 90       	pop	r15
    abfc:	08 95       	ret

0000abfe <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    abfe:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    ac00:	70 e0       	ldi	r23, 0x00	; 0
    ac02:	8e e1       	ldi	r24, 0x1E	; 30
    ac04:	48 9f       	mul	r20, r24
    ac06:	60 0d       	add	r22, r0
    ac08:	71 1d       	adc	r23, r1
    ac0a:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ac0c:	21 11       	cpse	r18, r1
    ac0e:	05 c0       	rjmp	.+10     	; 0xac1a <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    ac10:	71 83       	std	Z+1, r23	; 0x01
    ac12:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ac14:	6f 5f       	subi	r22, 0xFF	; 255
    ac16:	7f 4f       	sbci	r23, 0xFF	; 255
    ac18:	0c c0       	rjmp	.+24     	; 0xac32 <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    ac1a:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    ac1c:	21 30       	cpi	r18, 0x01	; 1
    ac1e:	11 f4       	brne	.+4      	; 0xac24 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    ac20:	01 96       	adiw	r24, 0x01	; 1
    ac22:	03 c0       	rjmp	.+6      	; 0xac2a <get_interesting_tile_indexes_shot+0x2c>
    ac24:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    ac26:	22 30       	cpi	r18, 0x02	; 2
    ac28:	39 f4       	brne	.+14     	; 0xac38 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    ac2a:	91 83       	std	Z+1, r25	; 0x01
    ac2c:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    ac2e:	61 5e       	subi	r22, 0xE1	; 225
    ac30:	7f 4f       	sbci	r23, 0xFF	; 255
    ac32:	73 83       	std	Z+3, r23	; 0x03
    ac34:	62 83       	std	Z+2, r22	; 0x02
    ac36:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    ac38:	71 83       	std	Z+1, r23	; 0x01
    ac3a:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    ac3c:	93 83       	std	Z+3, r25	; 0x03
    ac3e:	82 83       	std	Z+2, r24	; 0x02
    ac40:	08 95       	ret

0000ac42 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    ac42:	ef 92       	push	r14
    ac44:	ff 92       	push	r15
    ac46:	0f 93       	push	r16
    ac48:	1f 93       	push	r17
    ac4a:	cf 93       	push	r28
    ac4c:	df 93       	push	r29
    ac4e:	ec 01       	movw	r28, r24
    ac50:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    ac52:	8e e1       	ldi	r24, 0x1E	; 30
    ac54:	e8 2e       	mov	r14, r24
    ac56:	f1 2c       	mov	r15, r1
    ac58:	cb 01       	movw	r24, r22
    ac5a:	b7 01       	movw	r22, r14
    ac5c:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    ac60:	6d 5f       	subi	r22, 0xFD	; 253
    ac62:	40 e0       	ldi	r20, 0x00	; 0
    ac64:	50 e0       	ldi	r21, 0x00	; 0
    ac66:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    ac6a:	88 81       	ld	r24, Y
    ac6c:	fe 01       	movw	r30, r28
    ac6e:	9e e0       	ldi	r25, 0x0E	; 14
    ac70:	89 9f       	mul	r24, r25
    ac72:	e0 0d       	add	r30, r0
    ac74:	f1 1d       	adc	r31, r1
    ac76:	11 24       	eor	r1, r1
    ac78:	85 85       	ldd	r24, Z+13	; 0x0d
    ac7a:	96 85       	ldd	r25, Z+14	; 0x0e
    ac7c:	00 97       	sbiw	r24, 0x00	; 0
    ac7e:	41 f0       	breq	.+16     	; 0xac90 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    ac80:	b7 01       	movw	r22, r14
    ac82:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    ac86:	6d 5f       	subi	r22, 0xFD	; 253
    ac88:	40 e0       	ldi	r20, 0x00	; 0
    ac8a:	50 e0       	ldi	r21, 0x00	; 0
    ac8c:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    ac90:	88 81       	ld	r24, Y
    ac92:	fe 01       	movw	r30, r28
    ac94:	9e e0       	ldi	r25, 0x0E	; 14
    ac96:	89 9f       	mul	r24, r25
    ac98:	e0 0d       	add	r30, r0
    ac9a:	f1 1d       	adc	r31, r1
    ac9c:	11 24       	eor	r1, r1
    ac9e:	16 87       	std	Z+14, r17	; 0x0e
    aca0:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    aca2:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    aca4:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    aca6:	82 30       	cpi	r24, 0x02	; 2
    aca8:	11 f0       	breq	.+4      	; 0xacae <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    acaa:	88 83       	st	Y, r24
    acac:	01 c0       	rjmp	.+2      	; 0xacb0 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    acae:	18 82       	st	Y, r1
	}
}
    acb0:	df 91       	pop	r29
    acb2:	cf 91       	pop	r28
    acb4:	1f 91       	pop	r17
    acb6:	0f 91       	pop	r16
    acb8:	ff 90       	pop	r15
    acba:	ef 90       	pop	r14
    acbc:	08 95       	ret

0000acbe <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    acbe:	fb 01       	movw	r30, r22
	switch (tile_type)
    acc0:	84 30       	cpi	r24, 0x04	; 4
    acc2:	71 f0       	breq	.+28     	; 0xace0 <richochet+0x22>
    acc4:	18 f4       	brcc	.+6      	; 0xaccc <richochet+0xe>
    acc6:	83 30       	cpi	r24, 0x03	; 3
    acc8:	31 f0       	breq	.+12     	; 0xacd6 <richochet+0x18>
    acca:	08 95       	ret
    accc:	85 30       	cpi	r24, 0x05	; 5
    acce:	99 f0       	breq	.+38     	; 0xacf6 <richochet+0x38>
    acd0:	86 30       	cpi	r24, 0x06	; 6
    acd2:	59 f0       	breq	.+22     	; 0xacea <richochet+0x2c>
    acd4:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    acd6:	80 81       	ld	r24, Z
    acd8:	8d 7f       	andi	r24, 0xFD	; 253
    acda:	29 f4       	brne	.+10     	; 0xace6 <richochet+0x28>
				sprite->direction = D_RIGHT;
    acdc:	81 e0       	ldi	r24, 0x01	; 1
    acde:	09 c0       	rjmp	.+18     	; 0xacf2 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ace0:	80 81       	ld	r24, Z
    ace2:	8d 7f       	andi	r24, 0xFD	; 253
    ace4:	29 f0       	breq	.+10     	; 0xacf0 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    ace6:	82 e0       	ldi	r24, 0x02	; 2
    ace8:	04 c0       	rjmp	.+8      	; 0xacf2 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    acea:	80 81       	ld	r24, Z
    acec:	8d 7f       	andi	r24, 0xFD	; 253
    acee:	31 f4       	brne	.+12     	; 0xacfc <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    acf0:	83 e0       	ldi	r24, 0x03	; 3
    acf2:	80 83       	st	Z, r24
    acf4:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    acf6:	80 81       	ld	r24, Z
    acf8:	8d 7f       	andi	r24, 0xFD	; 253
    acfa:	81 f3       	breq	.-32     	; 0xacdc <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    acfc:	10 82       	st	Z, r1
    acfe:	08 95       	ret

0000ad00 <get_interesting_tile_indexes>:
        LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_METAL);
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    ad00:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    ad02:	70 e0       	ldi	r23, 0x00	; 0
    ad04:	8e e1       	ldi	r24, 0x1E	; 30
    ad06:	48 9f       	mul	r20, r24
    ad08:	60 0d       	add	r22, r0
    ad0a:	71 1d       	adc	r23, r1
    ad0c:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ad0e:	21 11       	cpse	r18, r1
    ad10:	09 c0       	rjmp	.+18     	; 0xad24 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    ad12:	71 83       	std	Z+1, r23	; 0x01
    ad14:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ad16:	cb 01       	movw	r24, r22
    ad18:	01 96       	adiw	r24, 0x01	; 1
    ad1a:	93 83       	std	Z+3, r25	; 0x03
    ad1c:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    ad1e:	6e 5f       	subi	r22, 0xFE	; 254
    ad20:	7f 4f       	sbci	r23, 0xFF	; 255
    ad22:	12 c0       	rjmp	.+36     	; 0xad48 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    ad24:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    ad26:	21 30       	cpi	r18, 0x01	; 1
    ad28:	29 f4       	brne	.+10     	; 0xad34 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    ad2a:	02 96       	adiw	r24, 0x02	; 2
    ad2c:	91 83       	std	Z+1, r25	; 0x01
    ad2e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    ad30:	4e 96       	adiw	r24, 0x1e	; 30
    ad32:	06 c0       	rjmp	.+12     	; 0xad40 <get_interesting_tile_indexes+0x40>
    ad34:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    ad36:	22 30       	cpi	r18, 0x02	; 2
    ad38:	51 f4       	brne	.+20     	; 0xad4e <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    ad3a:	91 83       	std	Z+1, r25	; 0x01
    ad3c:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    ad3e:	01 96       	adiw	r24, 0x01	; 1
    ad40:	93 83       	std	Z+3, r25	; 0x03
    ad42:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    ad44:	62 5c       	subi	r22, 0xC2	; 194
    ad46:	7f 4f       	sbci	r23, 0xFF	; 255
    ad48:	75 83       	std	Z+5, r23	; 0x05
    ad4a:	64 83       	std	Z+4, r22	; 0x04
    ad4c:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    ad4e:	71 83       	std	Z+1, r23	; 0x01
    ad50:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    ad52:	62 5e       	subi	r22, 0xE2	; 226
    ad54:	7f 4f       	sbci	r23, 0xFF	; 255
    ad56:	73 83       	std	Z+3, r23	; 0x03
    ad58:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    ad5a:	95 83       	std	Z+5, r25	; 0x05
    ad5c:	84 83       	std	Z+4, r24	; 0x04
    ad5e:	08 95       	ret

0000ad60 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    ad60:	1f 93       	push	r17
    ad62:	cf 93       	push	r28
    ad64:	df 93       	push	r29
    ad66:	fc 01       	movw	r30, r24
    ad68:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    ad6a:	55 96       	adiw	r26, 0x15	; 21
    ad6c:	8c 91       	ld	r24, X
    ad6e:	55 97       	sbiw	r26, 0x15	; 21
    ad70:	80 fd       	sbrc	r24, 0
    ad72:	13 c0       	rjmp	.+38     	; 0xad9a <explode_player+0x3a>
    ad74:	12 2f       	mov	r17, r18
    ad76:	64 2f       	mov	r22, r20
    ad78:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    ad7a:	80 89       	ldd	r24, Z+16	; 0x10
    ad7c:	8f 5f       	subi	r24, 0xFF	; 255
    ad7e:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    ad80:	87 85       	ldd	r24, Z+15	; 0x0f
    ad82:	8f 5f       	subi	r24, 0xFF	; 255
    ad84:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    ad86:	cf 01       	movw	r24, r30
    ad88:	0e 94 ad 51 	call	0xa35a	; 0xa35a <render_score>
		kill_player(other_player, other_player_hud_x);
    ad8c:	61 2f       	mov	r22, r17
    ad8e:	ce 01       	movw	r24, r28
	}
}
    ad90:	df 91       	pop	r29
    ad92:	cf 91       	pop	r28
    ad94:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    ad96:	0c 94 a7 55 	jmp	0xab4e	; 0xab4e <kill_player>
	}
}
    ad9a:	df 91       	pop	r29
    ad9c:	cf 91       	pop	r28
    ad9e:	1f 91       	pop	r17
    ada0:	08 95       	ret

0000ada2 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    ada2:	cf 92       	push	r12
    ada4:	df 92       	push	r13
    ada6:	ef 92       	push	r14
    ada8:	ff 92       	push	r15
    adaa:	cf 93       	push	r28
    adac:	df 93       	push	r29
    adae:	ec 01       	movw	r28, r24
    adb0:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    adb2:	98 81       	ld	r25, Y
    adb4:	9d 7f       	andi	r25, 0xFD	; 253
    adb6:	09 f0       	breq	.+2      	; 0xadba <slide+0x18>
    adb8:	54 c0       	rjmp	.+168    	; 0xae62 <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    adba:	ca 01       	movw	r24, r20
    adbc:	6e e1       	ldi	r22, 0x1E	; 30
    adbe:	70 e0       	ldi	r23, 0x00	; 0
    adc0:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    adc4:	88 0f       	add	r24, r24
    adc6:	88 0f       	add	r24, r24
    adc8:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    adca:	21 11       	cpse	r18, r1
    adcc:	22 c0       	rjmp	.+68     	; 0xae12 <slide+0x70>
    adce:	cb 80       	ldd	r12, Y+3	; 0x03
    add0:	dc 80       	ldd	r13, Y+4	; 0x04
    add2:	ed 80       	ldd	r14, Y+5	; 0x05
    add4:	fe 80       	ldd	r15, Y+6	; 0x06
    add6:	68 2f       	mov	r22, r24
    add8:	70 e0       	ldi	r23, 0x00	; 0
    adda:	80 e0       	ldi	r24, 0x00	; 0
    addc:	90 e0       	ldi	r25, 0x00	; 0
    adde:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    ade2:	9b 01       	movw	r18, r22
    ade4:	ac 01       	movw	r20, r24
    ade6:	c7 01       	movw	r24, r14
    ade8:	b6 01       	movw	r22, r12
    adea:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    adee:	20 e0       	ldi	r18, 0x00	; 0
    adf0:	30 e0       	ldi	r19, 0x00	; 0
    adf2:	40 e8       	ldi	r20, 0x80	; 128
    adf4:	50 e4       	ldi	r21, 0x40	; 64
    adf6:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    adfa:	18 16       	cp	r1, r24
    adfc:	0c f0       	brlt	.+2      	; 0xae00 <slide+0x5e>
    adfe:	85 c0       	rjmp	.+266    	; 0xaf0a <slide+0x168>
			player->shared.x++; 
    ae00:	20 e0       	ldi	r18, 0x00	; 0
    ae02:	30 e0       	ldi	r19, 0x00	; 0
    ae04:	40 e8       	ldi	r20, 0x80	; 128
    ae06:	5f e3       	ldi	r21, 0x3F	; 63
    ae08:	c7 01       	movw	r24, r14
    ae0a:	b6 01       	movw	r22, r12
    ae0c:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    ae10:	23 c0       	rjmp	.+70     	; 0xae58 <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    ae12:	22 30       	cpi	r18, 0x02	; 2
    ae14:	09 f0       	breq	.+2      	; 0xae18 <slide+0x76>
    ae16:	79 c0       	rjmp	.+242    	; 0xaf0a <slide+0x168>
    ae18:	cb 80       	ldd	r12, Y+3	; 0x03
    ae1a:	dc 80       	ldd	r13, Y+4	; 0x04
    ae1c:	ed 80       	ldd	r14, Y+5	; 0x05
    ae1e:	fe 80       	ldd	r15, Y+6	; 0x06
    ae20:	68 2f       	mov	r22, r24
    ae22:	70 e0       	ldi	r23, 0x00	; 0
    ae24:	80 e0       	ldi	r24, 0x00	; 0
    ae26:	90 e0       	ldi	r25, 0x00	; 0
    ae28:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    ae2c:	9b 01       	movw	r18, r22
    ae2e:	ac 01       	movw	r20, r24
    ae30:	c7 01       	movw	r24, r14
    ae32:	b6 01       	movw	r22, r12
    ae34:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    ae38:	20 e0       	ldi	r18, 0x00	; 0
    ae3a:	30 e0       	ldi	r19, 0x00	; 0
    ae3c:	40 e4       	ldi	r20, 0x40	; 64
    ae3e:	51 ec       	ldi	r21, 0xC1	; 193
    ae40:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    ae44:	87 ff       	sbrs	r24, 7
    ae46:	61 c0       	rjmp	.+194    	; 0xaf0a <slide+0x168>
			player->shared.x--;
    ae48:	20 e0       	ldi	r18, 0x00	; 0
    ae4a:	30 e0       	ldi	r19, 0x00	; 0
    ae4c:	40 e8       	ldi	r20, 0x80	; 128
    ae4e:	5f e3       	ldi	r21, 0x3F	; 63
    ae50:	c7 01       	movw	r24, r14
    ae52:	b6 01       	movw	r22, r12
    ae54:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    ae58:	6b 83       	std	Y+3, r22	; 0x03
    ae5a:	7c 83       	std	Y+4, r23	; 0x04
    ae5c:	8d 83       	std	Y+5, r24	; 0x05
    ae5e:	9e 83       	std	Y+6, r25	; 0x06
    ae60:	54 c0       	rjmp	.+168    	; 0xaf0a <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    ae62:	ca 01       	movw	r24, r20
    ae64:	6e e1       	ldi	r22, 0x1E	; 30
    ae66:	70 e0       	ldi	r23, 0x00	; 0
    ae68:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    ae6c:	ab 01       	movw	r20, r22
    ae6e:	4d 5f       	subi	r20, 0xFD	; 253
    ae70:	5f 4f       	sbci	r21, 0xFF	; 255
    ae72:	44 0f       	add	r20, r20
    ae74:	44 0f       	add	r20, r20
    ae76:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    ae78:	21 11       	cpse	r18, r1
    ae7a:	21 c0       	rjmp	.+66     	; 0xaebe <slide+0x11c>
    ae7c:	cf 80       	ldd	r12, Y+7	; 0x07
    ae7e:	d8 84       	ldd	r13, Y+8	; 0x08
    ae80:	e9 84       	ldd	r14, Y+9	; 0x09
    ae82:	fa 84       	ldd	r15, Y+10	; 0x0a
    ae84:	64 2f       	mov	r22, r20
    ae86:	70 e0       	ldi	r23, 0x00	; 0
    ae88:	80 e0       	ldi	r24, 0x00	; 0
    ae8a:	90 e0       	ldi	r25, 0x00	; 0
    ae8c:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    ae90:	9b 01       	movw	r18, r22
    ae92:	ac 01       	movw	r20, r24
    ae94:	c7 01       	movw	r24, r14
    ae96:	b6 01       	movw	r22, r12
    ae98:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    ae9c:	20 e0       	ldi	r18, 0x00	; 0
    ae9e:	30 e0       	ldi	r19, 0x00	; 0
    aea0:	40 e8       	ldi	r20, 0x80	; 128
    aea2:	50 e4       	ldi	r21, 0x40	; 64
    aea4:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    aea8:	18 16       	cp	r1, r24
    aeaa:	7c f5       	brge	.+94     	; 0xaf0a <slide+0x168>
			player->shared.y++;
    aeac:	20 e0       	ldi	r18, 0x00	; 0
    aeae:	30 e0       	ldi	r19, 0x00	; 0
    aeb0:	40 e8       	ldi	r20, 0x80	; 128
    aeb2:	5f e3       	ldi	r21, 0x3F	; 63
    aeb4:	c7 01       	movw	r24, r14
    aeb6:	b6 01       	movw	r22, r12
    aeb8:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    aebc:	22 c0       	rjmp	.+68     	; 0xaf02 <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    aebe:	22 30       	cpi	r18, 0x02	; 2
    aec0:	21 f5       	brne	.+72     	; 0xaf0a <slide+0x168>
    aec2:	cf 80       	ldd	r12, Y+7	; 0x07
    aec4:	d8 84       	ldd	r13, Y+8	; 0x08
    aec6:	e9 84       	ldd	r14, Y+9	; 0x09
    aec8:	fa 84       	ldd	r15, Y+10	; 0x0a
    aeca:	64 2f       	mov	r22, r20
    aecc:	70 e0       	ldi	r23, 0x00	; 0
    aece:	80 e0       	ldi	r24, 0x00	; 0
    aed0:	90 e0       	ldi	r25, 0x00	; 0
    aed2:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    aed6:	9b 01       	movw	r18, r22
    aed8:	ac 01       	movw	r20, r24
    aeda:	c7 01       	movw	r24, r14
    aedc:	b6 01       	movw	r22, r12
    aede:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    aee2:	20 e0       	ldi	r18, 0x00	; 0
    aee4:	30 e0       	ldi	r19, 0x00	; 0
    aee6:	40 e4       	ldi	r20, 0x40	; 64
    aee8:	51 ec       	ldi	r21, 0xC1	; 193
    aeea:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    aeee:	87 ff       	sbrs	r24, 7
    aef0:	0c c0       	rjmp	.+24     	; 0xaf0a <slide+0x168>
			player->shared.y--;
    aef2:	20 e0       	ldi	r18, 0x00	; 0
    aef4:	30 e0       	ldi	r19, 0x00	; 0
    aef6:	40 e8       	ldi	r20, 0x80	; 128
    aef8:	5f e3       	ldi	r21, 0x3F	; 63
    aefa:	c7 01       	movw	r24, r14
    aefc:	b6 01       	movw	r22, r12
    aefe:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    af02:	6f 83       	std	Y+7, r22	; 0x07
    af04:	78 87       	std	Y+8, r23	; 0x08
    af06:	89 87       	std	Y+9, r24	; 0x09
    af08:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    af0a:	df 91       	pop	r29
    af0c:	cf 91       	pop	r28
    af0e:	ff 90       	pop	r15
    af10:	ef 90       	pop	r14
    af12:	df 90       	pop	r13
    af14:	cf 90       	pop	r12
    af16:	08 95       	ret

0000af18 <load_level_tiles>:
	}
	return explode;
}

void load_level_tiles(u8 blank)
{
    af18:	ef 92       	push	r14
    af1a:	ff 92       	push	r15
    af1c:	1f 93       	push	r17
    af1e:	cf 93       	push	r28
    af20:	df 93       	push	r29
    af22:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    af24:	c0 e0       	ldi	r28, 0x00	; 0
    af26:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    af28:	8e e1       	ldi	r24, 0x1E	; 30
    af2a:	e8 2e       	mov	r14, r24
    af2c:	f1 2c       	mov	r15, r1
    af2e:	ce 01       	movw	r24, r28
    af30:	b7 01       	movw	r22, r14
    af32:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
		y = 3 + i / 30;
    af36:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    af38:	11 23       	and	r17, r17
    af3a:	19 f0       	breq	.+6      	; 0xaf42 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    af3c:	4e e8       	ldi	r20, 0x8E	; 142
    af3e:	5b e6       	ldi	r21, 0x6B	; 107
    af40:	2d c0       	rjmp	.+90     	; 0xaf9c <load_level_tiles+0x84>
    af42:	fe 01       	movw	r30, r28
    af44:	e8 5a       	subi	r30, 0xA8	; 168
    af46:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    af48:	91 81       	ldd	r25, Z+1	; 0x01
    af4a:	97 30       	cpi	r25, 0x07	; 7
    af4c:	99 f1       	breq	.+102    	; 0xafb4 <load_level_tiles+0x9c>
    af4e:	88 f4       	brcc	.+34     	; 0xaf72 <load_level_tiles+0x5a>
    af50:	93 30       	cpi	r25, 0x03	; 3
    af52:	39 f1       	breq	.+78     	; 0xafa2 <load_level_tiles+0x8a>
    af54:	40 f4       	brcc	.+16     	; 0xaf66 <load_level_tiles+0x4e>
    af56:	91 30       	cpi	r25, 0x01	; 1
    af58:	f9 f0       	breq	.+62     	; 0xaf98 <load_level_tiles+0x80>
    af5a:	92 30       	cpi	r25, 0x02	; 2
    af5c:	09 f0       	breq	.+2      	; 0xaf60 <load_level_tiles+0x48>
    af5e:	3f c0       	rjmp	.+126    	; 0xafde <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    af60:	44 ef       	ldi	r20, 0xF4	; 244
    af62:	5a e6       	ldi	r21, 0x6A	; 106
    af64:	1b c0       	rjmp	.+54     	; 0xaf9c <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    af66:	95 30       	cpi	r25, 0x05	; 5
    af68:	f9 f0       	breq	.+62     	; 0xafa8 <load_level_tiles+0x90>
    af6a:	08 f5       	brcc	.+66     	; 0xafae <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    af6c:	49 ed       	ldi	r20, 0xD9	; 217
    af6e:	5a e6       	ldi	r21, 0x6A	; 106
    af70:	15 c0       	rjmp	.+42     	; 0xaf9c <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    af72:	9c 32       	cpi	r25, 0x2C	; 44
    af74:	59 f1       	breq	.+86     	; 0xafcc <load_level_tiles+0xb4>
    af76:	38 f4       	brcc	.+14     	; 0xaf86 <load_level_tiles+0x6e>
    af78:	98 30       	cpi	r25, 0x08	; 8
    af7a:	f9 f0       	breq	.+62     	; 0xafba <load_level_tiles+0xa2>
    af7c:	99 30       	cpi	r25, 0x09	; 9
    af7e:	79 f5       	brne	.+94     	; 0xafde <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    af80:	4b ee       	ldi	r20, 0xEB	; 235
    af82:	5a e6       	ldi	r21, 0x6A	; 106
    af84:	0b c0       	rjmp	.+22     	; 0xaf9c <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    af86:	92 34       	cpi	r25, 0x42	; 66
    af88:	d9 f0       	breq	.+54     	; 0xafc0 <load_level_tiles+0xa8>
    af8a:	9d 34       	cpi	r25, 0x4D	; 77
    af8c:	e1 f0       	breq	.+56     	; 0xafc6 <load_level_tiles+0xae>
    af8e:	97 33       	cpi	r25, 0x37	; 55
    af90:	31 f5       	brne	.+76     	; 0xafde <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    af92:	4d ec       	ldi	r20, 0xCD	; 205
    af94:	5a e6       	ldi	r21, 0x6A	; 106
    af96:	02 c0       	rjmp	.+4      	; 0xaf9c <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    af98:	47 ef       	ldi	r20, 0xF7	; 247
    af9a:	5a e6       	ldi	r21, 0x6A	; 106
    af9c:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
    afa0:	22 c0       	rjmp	.+68     	; 0xafe6 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    afa2:	4f ed       	ldi	r20, 0xDF	; 223
    afa4:	5a e6       	ldi	r21, 0x6A	; 106
    afa6:	fa cf       	rjmp	.-12     	; 0xaf9c <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    afa8:	46 ed       	ldi	r20, 0xD6	; 214
    afaa:	5a e6       	ldi	r21, 0x6A	; 106
    afac:	f7 cf       	rjmp	.-18     	; 0xaf9c <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    afae:	4c ed       	ldi	r20, 0xDC	; 220
    afb0:	5a e6       	ldi	r21, 0x6A	; 106
    afb2:	f4 cf       	rjmp	.-24     	; 0xaf9c <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    afb4:	41 ef       	ldi	r20, 0xF1	; 241
    afb6:	5a e6       	ldi	r21, 0x6A	; 106
    afb8:	f1 cf       	rjmp	.-30     	; 0xaf9c <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    afba:	4e ee       	ldi	r20, 0xEE	; 238
    afbc:	5a e6       	ldi	r21, 0x6A	; 106
    afbe:	ee cf       	rjmp	.-36     	; 0xaf9c <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    afc0:	40 ed       	ldi	r20, 0xD0	; 208
    afc2:	5a e6       	ldi	r21, 0x6A	; 106
    afc4:	eb cf       	rjmp	.-42     	; 0xaf9c <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    afc6:	43 ed       	ldi	r20, 0xD3	; 211
    afc8:	5a e6       	ldi	r21, 0x6A	; 106
    afca:	e8 cf       	rjmp	.-48     	; 0xaf9c <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    afcc:	43 ed       	ldi	r20, 0xD3	; 211
    afce:	5a e6       	ldi	r21, 0x6A	; 106
    afd0:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
    afd4:	d0 93 de 0f 	sts	0x0FDE, r29
    afd8:	c0 93 dd 0f 	sts	0x0FDD, r28
    afdc:	04 c0       	rjmp	.+8      	; 0xafe6 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    afde:	40 e0       	ldi	r20, 0x00	; 0
    afe0:	50 e0       	ldi	r21, 0x00	; 0
    afe2:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    afe6:	21 96       	adiw	r28, 0x01	; 1
    afe8:	ce 3e       	cpi	r28, 0xEE	; 238
    afea:	82 e0       	ldi	r24, 0x02	; 2
    afec:	d8 07       	cpc	r29, r24
    afee:	09 f0       	breq	.+2      	; 0xaff2 <load_level_tiles+0xda>
    aff0:	9e cf       	rjmp	.-196    	; 0xaf2e <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    aff2:	df 91       	pop	r29
    aff4:	cf 91       	pop	r28
    aff6:	1f 91       	pop	r17
    aff8:	ff 90       	pop	r15
    affa:	ef 90       	pop	r14
    affc:	08 95       	ret

0000affe <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    affe:	cf 93       	push	r28
    b000:	df 93       	push	r29
    b002:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    b004:	6b 8b       	std	Y+19, r22	; 0x13
	p->spawn_y = y;
    b006:	4c 8b       	std	Y+20, r20	; 0x14
	p->level_score = 0;
    b008:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    b00a:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    b00c:	18 8e       	std	Y+24, r1	; 0x18
	p->max_speed = MAX_SPEED;
    b00e:	82 e3       	ldi	r24, 0x32	; 50
    b010:	8f 8b       	std	Y+23, r24	; 0x17
	player_init_shot_state(p);
    b012:	ce 01       	movw	r24, r28
    b014:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <player_init_shot_state>
	player_spawn(p);
    b018:	ce 01       	movw	r24, r28
}
    b01a:	df 91       	pop	r29
    b01c:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    b01e:	0c 94 82 4f 	jmp	0x9f04	; 0x9f04 <player_spawn>

0000b022 <load_level>:
}

void load_level(int level_number)
{
    b022:	8f 92       	push	r8
    b024:	9f 92       	push	r9
    b026:	af 92       	push	r10
    b028:	bf 92       	push	r11
    b02a:	cf 92       	push	r12
    b02c:	df 92       	push	r13
    b02e:	ef 92       	push	r14
    b030:	ff 92       	push	r15
    b032:	0f 93       	push	r16
    b034:	1f 93       	push	r17
    b036:	cf 93       	push	r28
    b038:	df 93       	push	r29
    b03a:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    b03c:	8e ee       	ldi	r24, 0xEE	; 238
    b03e:	92 e0       	ldi	r25, 0x02	; 2
    b040:	c8 9f       	mul	r28, r24
    b042:	70 01       	movw	r14, r0
    b044:	c9 9f       	mul	r28, r25
    b046:	f0 0c       	add	r15, r0
    b048:	d8 9f       	mul	r29, r24
    b04a:	f0 0c       	add	r15, r0
    b04c:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    b04e:	10 92 af 0b 	sts	0x0BAF, r1
    b052:	10 92 ae 0b 	sts	0x0BAE, r1
	init_tile_animations(&tile_animations);
    b056:	87 eb       	ldi	r24, 0xB7	; 183
    b058:	9b e0       	ldi	r25, 0x0B	; 11
    b05a:	0e 94 0e 4e 	call	0x9c1c	; 0x9c1c <init_tile_animations>
	init_scope_animation(&scope_animation);
    b05e:	81 ed       	ldi	r24, 0xD1	; 209
    b060:	9f e0       	ldi	r25, 0x0F	; 15
    b062:	0e 94 35 4e 	call	0x9c6a	; 0x9c6a <init_scope_animation>
	init_sub_animation(&sub_animation);
    b066:	83 ec       	ldi	r24, 0xC3	; 195
    b068:	9f e0       	ldi	r25, 0x0F	; 15
    b06a:	0e 94 4d 4e 	call	0x9c9a	; 0x9c9a <init_sub_animation>
	game.current_screen = LEVEL;
    b06e:	83 e0       	ldi	r24, 0x03	; 3
    b070:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    b074:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <clear_sprites>
	game.current_level = level_number;
    b078:	c0 93 a4 0b 	sts	0x0BA4, r28
    b07c:	89 e5       	ldi	r24, 0x59	; 89
    b07e:	a8 2e       	mov	r10, r24
    b080:	8c e0       	ldi	r24, 0x0C	; 12
    b082:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    b084:	00 e0       	ldi	r16, 0x00	; 0
    b086:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    b088:	9e e1       	ldi	r25, 0x1E	; 30
    b08a:	c9 2e       	mov	r12, r25
    b08c:	d1 2c       	mov	r13, r1
    b08e:	c8 01       	movw	r24, r16
    b090:	b6 01       	movw	r22, r12
    b092:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    b096:	d8 2f       	mov	r29, r24
    b098:	dd 0f       	add	r29, r29
    b09a:	dd 0f       	add	r29, r29
    b09c:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    b09e:	ab 01       	movw	r20, r22
    b0a0:	4d 5f       	subi	r20, 0xFD	; 253
    b0a2:	5f 4f       	sbci	r21, 0xFF	; 255
    b0a4:	c4 2f       	mov	r28, r20
    b0a6:	cc 0f       	add	r28, r28
    b0a8:	cc 0f       	add	r28, r28
    b0aa:	cc 0f       	add	r28, r28
    b0ac:	f8 01       	movw	r30, r16
    b0ae:	ee 0d       	add	r30, r14
    b0b0:	ff 1d       	adc	r31, r15
    b0b2:	ef 53       	subi	r30, 0x3F	; 63
    b0b4:	f8 4f       	sbci	r31, 0xF8	; 248
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    b0b6:	e4 91       	lpm	r30, Z
    b0b8:	45 01       	movw	r8, r10
    b0ba:	d5 01       	movw	r26, r10
    b0bc:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    b0be:	e8 35       	cpi	r30, 0x58	; 88
    b0c0:	31 f4       	brne	.+12     	; 0xb0ce <load_level+0xac>
		{
			prep_player(&player1, x, y);
    b0c2:	4c 2f       	mov	r20, r28
    b0c4:	6d 2f       	mov	r22, r29
    b0c6:	85 ed       	ldi	r24, 0xD5	; 213
    b0c8:	9b e0       	ldi	r25, 0x0B	; 11
    b0ca:	0e 94 ff 57 	call	0xaffe	; 0xaffe <prep_player>
    b0ce:	bf ef       	ldi	r27, 0xFF	; 255
    b0d0:	ab 1a       	sub	r10, r27
    b0d2:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    b0d4:	f4 01       	movw	r30, r8
    b0d6:	80 81       	ld	r24, Z
    b0d8:	83 36       	cpi	r24, 0x63	; 99
    b0da:	31 f4       	brne	.+12     	; 0xb0e8 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    b0dc:	4c 2f       	mov	r20, r28
    b0de:	6d 2f       	mov	r22, r29
    b0e0:	87 e4       	ldi	r24, 0x47	; 71
    b0e2:	9f e0       	ldi	r25, 0x0F	; 15
    b0e4:	0e 94 ff 57 	call	0xaffe	; 0xaffe <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    b0e8:	0f 5f       	subi	r16, 0xFF	; 255
    b0ea:	1f 4f       	sbci	r17, 0xFF	; 255
    b0ec:	0e 3e       	cpi	r16, 0xEE	; 238
    b0ee:	f2 e0       	ldi	r31, 0x02	; 2
    b0f0:	1f 07       	cpc	r17, r31
    b0f2:	69 f6       	brne	.-102    	; 0xb08e <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    b0f4:	60 e0       	ldi	r22, 0x00	; 0
    b0f6:	85 ed       	ldi	r24, 0xD5	; 213
    b0f8:	9b e0       	ldi	r25, 0x0B	; 11
    b0fa:	0e 94 90 51 	call	0xa320	; 0xa320 <render_hud>
	render_hud(&player2, 15);
    b0fe:	6f e0       	ldi	r22, 0x0F	; 15
    b100:	87 e4       	ldi	r24, 0x47	; 71
    b102:	9f e0       	ldi	r25, 0x0F	; 15
    b104:	0e 94 90 51 	call	0xa320	; 0xa320 <render_hud>
	render_score(&player1, 0);
    b108:	60 e0       	ldi	r22, 0x00	; 0
    b10a:	85 ed       	ldi	r24, 0xD5	; 213
    b10c:	9b e0       	ldi	r25, 0x0B	; 11
    b10e:	0e 94 ad 51 	call	0xa35a	; 0xa35a <render_score>
	render_score(&player2, 15);
    b112:	6f e0       	ldi	r22, 0x0F	; 15
    b114:	87 e4       	ldi	r24, 0x47	; 71
    b116:	9f e0       	ldi	r25, 0x0F	; 15
    b118:	0e 94 ad 51 	call	0xa35a	; 0xa35a <render_score>
	Print(14, 0, (char*) strVertSep);
    b11c:	41 e6       	ldi	r20, 0x61	; 97
    b11e:	54 e0       	ldi	r21, 0x04	; 4
    b120:	60 e0       	ldi	r22, 0x00	; 0
    b122:	70 e0       	ldi	r23, 0x00	; 0
    b124:	8e e0       	ldi	r24, 0x0E	; 14
    b126:	90 e0       	ldi	r25, 0x00	; 0
    b128:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(14, 1, (char*) strVertSep);
    b12c:	41 e6       	ldi	r20, 0x61	; 97
    b12e:	54 e0       	ldi	r21, 0x04	; 4
    b130:	61 e0       	ldi	r22, 0x01	; 1
    b132:	70 e0       	ldi	r23, 0x00	; 0
    b134:	8e e0       	ldi	r24, 0x0E	; 14
    b136:	90 e0       	ldi	r25, 0x00	; 0
    b138:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(14, 2, (char*) strVertSep);
    b13c:	41 e6       	ldi	r20, 0x61	; 97
    b13e:	54 e0       	ldi	r21, 0x04	; 4
    b140:	62 e0       	ldi	r22, 0x02	; 2
    b142:	70 e0       	ldi	r23, 0x00	; 0
    b144:	8e e0       	ldi	r24, 0x0E	; 14
    b146:	90 e0       	ldi	r25, 0x00	; 0
    b148:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	load_level_tiles(false);
    b14c:	80 e0       	ldi	r24, 0x00	; 0
}
    b14e:	df 91       	pop	r29
    b150:	cf 91       	pop	r28
    b152:	1f 91       	pop	r17
    b154:	0f 91       	pop	r16
    b156:	ff 90       	pop	r15
    b158:	ef 90       	pop	r14
    b15a:	df 90       	pop	r13
    b15c:	cf 90       	pop	r12
    b15e:	bf 90       	pop	r11
    b160:	af 90       	pop	r10
    b162:	9f 90       	pop	r9
    b164:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    b166:	0c 94 8c 57 	jmp	0xaf18	; 0xaf18 <load_level_tiles>

0000b16a <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    b16a:	cf 93       	push	r28
    b16c:	df 93       	push	r29
    b16e:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    b170:	61 e0       	ldi	r22, 0x01	; 1
    b172:	83 e0       	ldi	r24, 0x03	; 3
    b174:	0e 94 3b 49 	call	0x9276	; 0x9276 <FadeOut>
	ClearVram();
    b178:	0e 94 3a 3a 	call	0x7474	; 0x7474 <ClearVram>
	clear_sprites();
    b17c:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    b180:	d0 e0       	ldi	r29, 0x00	; 0
    b182:	ae 01       	movw	r20, r28
    b184:	84 e0       	ldi	r24, 0x04	; 4
    b186:	44 0f       	add	r20, r20
    b188:	55 1f       	adc	r21, r21
    b18a:	8a 95       	dec	r24
    b18c:	e1 f7       	brne	.-8      	; 0xb186 <level_transition+0x1c>
    b18e:	46 59       	subi	r20, 0x96	; 150
    b190:	5c 4f       	sbci	r21, 0xFC	; 252
    b192:	6c e0       	ldi	r22, 0x0C	; 12
    b194:	70 e0       	ldi	r23, 0x00	; 0
    b196:	88 e0       	ldi	r24, 0x08	; 8
    b198:	90 e0       	ldi	r25, 0x00	; 0
    b19a:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	FadeIn(1, true);
    b19e:	61 e0       	ldi	r22, 0x01	; 1
    b1a0:	81 e0       	ldi	r24, 0x01	; 1
    b1a2:	0e 94 2f 49 	call	0x925e	; 0x925e <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    b1a6:	84 e0       	ldi	r24, 0x04	; 4
    b1a8:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <LBWaitSeconds>
	FadeOut(1, true);
    b1ac:	61 e0       	ldi	r22, 0x01	; 1
    b1ae:	81 e0       	ldi	r24, 0x01	; 1
    b1b0:	0e 94 3b 49 	call	0x9276	; 0x9276 <FadeOut>
	ClearVram();
    b1b4:	0e 94 3a 3a 	call	0x7474	; 0x7474 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b1b8:	60 e0       	ldi	r22, 0x00	; 0
    b1ba:	83 e0       	ldi	r24, 0x03	; 3
    b1bc:	0e 94 2f 49 	call	0x925e	; 0x925e <FadeIn>
	load_level(index);
    b1c0:	ce 01       	movw	r24, r28
}
    b1c2:	df 91       	pop	r29
    b1c4:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    b1c6:	0c 94 11 58 	jmp	0xb022	; 0xb022 <load_level>

0000b1ca <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    b1ca:	81 ed       	ldi	r24, 0xD1	; 209
    b1cc:	9f e0       	ldi	r25, 0x0F	; 15
    b1ce:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <render_scope>
    b1d2:	88 23       	and	r24, r24
    b1d4:	61 f0       	breq	.+24     	; 0xb1ee <render_boss_fight_scope_load+0x24>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    b1d6:	82 e0       	ldi	r24, 0x02	; 2
    b1d8:	80 93 a6 0b 	sts	0x0BA6, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ALARM);
    b1dc:	27 e0       	ldi	r18, 0x07	; 7
    b1de:	40 91 5c 0f 	lds	r20, 0x0F5C
    b1e2:	60 91 ea 0b 	lds	r22, 0x0BEA
    b1e6:	80 91 b6 0b 	lds	r24, 0x0BB6
    b1ea:	0c 94 e9 4d 	jmp	0x9bd2	; 0x9bd2 <LBPlaySound>
    b1ee:	08 95       	ret

0000b1f0 <render_boss_fight_sub_load>:
	}
}

void render_boss_fight_sub_load()
{
    b1f0:	0f 93       	push	r16
    b1f2:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b1f4:	83 ec       	ldi	r24, 0xC3	; 195
    b1f6:	9f e0       	ldi	r25, 0x0F	; 15
    b1f8:	0e 94 0d 4c 	call	0x981a	; 0x981a <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    b1fc:	ac 01       	movw	r20, r24
    b1fe:	64 e0       	ldi	r22, 0x04	; 4
    b200:	81 e0       	ldi	r24, 0x01	; 1
    b202:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	if (sub_animation.anim.reversing)
    b206:	80 91 c8 0f 	lds	r24, 0x0FC8
    b20a:	88 23       	and	r24, r24
    b20c:	d9 f0       	breq	.+54     	; 0xb244 <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    b20e:	84 e0       	ldi	r24, 0x04	; 4
    b210:	80 93 a6 0b 	sts	0x0BA6, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    b214:	00 e0       	ldi	r16, 0x00	; 0
    b216:	10 e0       	ldi	r17, 0x00	; 0
    b218:	20 e9       	ldi	r18, 0x90	; 144
    b21a:	32 e4       	ldi	r19, 0x42	; 66
    b21c:	40 e0       	ldi	r20, 0x00	; 0
    b21e:	50 e0       	ldi	r21, 0x00	; 0
    b220:	60 ec       	ldi	r22, 0xC0	; 192
    b222:	72 e4       	ldi	r23, 0x42	; 66
    b224:	85 e3       	ldi	r24, 0x35	; 53
    b226:	90 e1       	ldi	r25, 0x10	; 16
    b228:	0e 94 b0 4e 	call	0x9d60	; 0x9d60 <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    b22c:	00 e0       	ldi	r16, 0x00	; 0
    b22e:	10 e0       	ldi	r17, 0x00	; 0
    b230:	20 e9       	ldi	r18, 0x90	; 144
    b232:	32 e4       	ldi	r19, 0x42	; 66
    b234:	40 e0       	ldi	r20, 0x00	; 0
    b236:	50 e0       	ldi	r21, 0x00	; 0
    b238:	60 e4       	ldi	r22, 0x40	; 64
    b23a:	73 e4       	ldi	r23, 0x43	; 67
    b23c:	81 e0       	ldi	r24, 0x01	; 1
    b23e:	90 e1       	ldi	r25, 0x10	; 16
    b240:	0e 94 b0 4e 	call	0x9d60	; 0x9d60 <init_turret>
	}
}
    b244:	1f 91       	pop	r17
    b246:	0f 91       	pop	r16
    b248:	08 95       	ret

0000b24a <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b24a:	83 ec       	ldi	r24, 0xC3	; 195
    b24c:	9f e0       	ldi	r25, 0x0F	; 15
    b24e:	0e 94 0d 4c 	call	0x981a	; 0x981a <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    b252:	20 91 c3 0f 	lds	r18, 0x0FC3
    b256:	21 11       	cpse	r18, r1
    b258:	05 c0       	rjmp	.+10     	; 0xb264 <render_boss_fight_sub_sinking+0x1a>
    b25a:	ac 01       	movw	r20, r24
    b25c:	64 e0       	ldi	r22, 0x04	; 4
    b25e:	81 e0       	ldi	r24, 0x01	; 1
    b260:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	if (sub_animation.anim.looped)
    b264:	80 91 c7 0f 	lds	r24, 0x0FC7
    b268:	88 23       	and	r24, r24
    b26a:	19 f0       	breq	.+6      	; 0xb272 <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    b26c:	88 e0       	ldi	r24, 0x08	; 8
    b26e:	80 93 a6 0b 	sts	0x0BA6, r24
    b272:	08 95       	ret

0000b274 <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    b274:	ef 92       	push	r14
    b276:	ff 92       	push	r15
    b278:	0f 93       	push	r16
    b27a:	1f 93       	push	r17
    b27c:	cf 93       	push	r28
    b27e:	df 93       	push	r29
    b280:	1f 92       	push	r1
    b282:	cd b7       	in	r28, 0x3d	; 61
    b284:	de b7       	in	r29, 0x3e	; 62
    b286:	7c 01       	movw	r14, r24
    b288:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    b28a:	fc 01       	movw	r30, r24
    b28c:	67 81       	ldd	r22, Z+7	; 0x07
    b28e:	70 85       	ldd	r23, Z+8	; 0x08
    b290:	81 85       	ldd	r24, Z+9	; 0x09
    b292:	92 85       	ldd	r25, Z+10	; 0x0a
    b294:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    b298:	46 2f       	mov	r20, r22
    b29a:	f7 01       	movw	r30, r14
    b29c:	63 81       	ldd	r22, Z+3	; 0x03
    b29e:	74 81       	ldd	r23, Z+4	; 0x04
    b2a0:	85 81       	ldd	r24, Z+5	; 0x05
    b2a2:	96 81       	ldd	r25, Z+6	; 0x06
    b2a4:	49 83       	std	Y+1, r20	; 0x01
    b2a6:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    b2aa:	01 e0       	ldi	r16, 0x01	; 1
    b2ac:	21 e0       	ldi	r18, 0x01	; 1
    b2ae:	49 81       	ldd	r20, Y+1	; 0x01
    b2b0:	81 2f       	mov	r24, r17
    b2b2:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
}
    b2b6:	0f 90       	pop	r0
    b2b8:	df 91       	pop	r29
    b2ba:	cf 91       	pop	r28
    b2bc:	1f 91       	pop	r17
    b2be:	0f 91       	pop	r16
    b2c0:	ff 90       	pop	r15
    b2c2:	ef 90       	pop	r14
    b2c4:	08 95       	ret

0000b2c6 <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    b2c6:	ef 92       	push	r14
    b2c8:	ff 92       	push	r15
    b2ca:	0f 93       	push	r16
    b2cc:	1f 93       	push	r17
    b2ce:	cf 93       	push	r28
    b2d0:	df 93       	push	r29
    b2d2:	1f 92       	push	r1
    b2d4:	cd b7       	in	r28, 0x3d	; 61
    b2d6:	de b7       	in	r29, 0x3e	; 62
    b2d8:	7c 01       	movw	r14, r24
    b2da:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    b2dc:	fc 01       	movw	r30, r24
    b2de:	63 89       	ldd	r22, Z+19	; 0x13
    b2e0:	74 89       	ldd	r23, Z+20	; 0x14
    b2e2:	85 89       	ldd	r24, Z+21	; 0x15
    b2e4:	96 89       	ldd	r25, Z+22	; 0x16
    b2e6:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    b2ea:	46 2f       	mov	r20, r22
    b2ec:	f7 01       	movw	r30, r14
    b2ee:	67 85       	ldd	r22, Z+15	; 0x0f
    b2f0:	70 89       	ldd	r23, Z+16	; 0x10
    b2f2:	81 89       	ldd	r24, Z+17	; 0x11
    b2f4:	92 89       	ldd	r25, Z+18	; 0x12
    b2f6:	49 83       	std	Y+1, r20	; 0x01
    b2f8:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    b2fc:	01 e0       	ldi	r16, 0x01	; 1
    b2fe:	21 e0       	ldi	r18, 0x01	; 1
    b300:	49 81       	ldd	r20, Y+1	; 0x01
    b302:	81 2f       	mov	r24, r17
    b304:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
}
    b308:	0f 90       	pop	r0
    b30a:	df 91       	pop	r29
    b30c:	cf 91       	pop	r28
    b30e:	1f 91       	pop	r17
    b310:	0f 91       	pop	r16
    b312:	ff 90       	pop	r15
    b314:	ef 90       	pop	r14
    b316:	08 95       	ret

0000b318 <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    b318:	cf 92       	push	r12
    b31a:	df 92       	push	r13
    b31c:	ef 92       	push	r14
    b31e:	ff 92       	push	r15
    b320:	cf 93       	push	r28
    b322:	df 93       	push	r29
    b324:	ec 01       	movw	r28, r24
    b326:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    b328:	cb 80       	ldd	r12, Y+3	; 0x03
    b32a:	dc 80       	ldd	r13, Y+4	; 0x04
    b32c:	ed 80       	ldd	r14, Y+5	; 0x05
    b32e:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    b330:	6f 81       	ldd	r22, Y+7	; 0x07
    b332:	78 85       	ldd	r23, Y+8	; 0x08
    b334:	89 85       	ldd	r24, Y+9	; 0x09
    b336:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    b338:	2b 85       	ldd	r18, Y+11	; 0x0b
    b33a:	21 11       	cpse	r18, r1
    b33c:	27 c0       	rjmp	.+78     	; 0xb38c <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    b33e:	20 e0       	ldi	r18, 0x00	; 0
    b340:	30 e0       	ldi	r19, 0x00	; 0
    b342:	40 e0       	ldi	r20, 0x00	; 0
    b344:	5e e3       	ldi	r21, 0x3E	; 62
    b346:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    b34a:	20 e0       	ldi	r18, 0x00	; 0
    b34c:	30 e0       	ldi	r19, 0x00	; 0
    b34e:	40 e4       	ldi	r20, 0x40	; 64
    b350:	50 e4       	ldi	r21, 0x40	; 64
    b352:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    b356:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    b35a:	8e e1       	ldi	r24, 0x1E	; 30
    b35c:	68 9f       	mul	r22, r24
    b35e:	e0 01       	movw	r28, r0
    b360:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    b362:	20 e0       	ldi	r18, 0x00	; 0
    b364:	30 e0       	ldi	r19, 0x00	; 0
    b366:	40 e0       	ldi	r20, 0x00	; 0
    b368:	5e e3       	ldi	r21, 0x3E	; 62
    b36a:	c7 01       	movw	r24, r14
    b36c:	b6 01       	movw	r22, r12
    b36e:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    b372:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    b376:	c6 0f       	add	r28, r22
    b378:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    b37a:	be 01       	movw	r22, r28
    b37c:	87 eb       	ldi	r24, 0xB7	; 183
    b37e:	9b e0       	ldi	r25, 0x0B	; 11
    b380:	0e 94 21 56 	call	0xac42	; 0xac42 <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    b384:	c8 5a       	subi	r28, 0xA8	; 168
    b386:	d3 4f       	sbci	r29, 0xF3	; 243
    b388:	19 82       	std	Y+1, r1	; 0x01
    b38a:	51 c0       	rjmp	.+162    	; 0xb42e <update_turret+0x116>
	}
	else if (t->shared.direction == D_LEFT)
    b38c:	98 81       	ld	r25, Y
    b38e:	93 30       	cpi	r25, 0x03	; 3
    b390:	19 f5       	brne	.+70     	; 0xb3d8 <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    b392:	63 2f       	mov	r22, r19
    b394:	70 e0       	ldi	r23, 0x00	; 0
    b396:	80 e0       	ldi	r24, 0x00	; 0
    b398:	90 e0       	ldi	r25, 0x00	; 0
    b39a:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    b39e:	9b 01       	movw	r18, r22
    b3a0:	ac 01       	movw	r20, r24
    b3a2:	c7 01       	movw	r24, r14
    b3a4:	b6 01       	movw	r22, r12
    b3a6:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    b3aa:	87 ff       	sbrs	r24, 7
    b3ac:	02 c0       	rjmp	.+4      	; 0xb3b2 <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    b3ae:	81 e0       	ldi	r24, 0x01	; 1
    b3b0:	24 c0       	rjmp	.+72     	; 0xb3fa <update_turret+0xe2>
			t->shared.speed = BOSS_TURRET_SPEED;
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    b3b2:	69 81       	ldd	r22, Y+1	; 0x01
    b3b4:	70 e0       	ldi	r23, 0x00	; 0
    b3b6:	80 e0       	ldi	r24, 0x00	; 0
    b3b8:	90 e0       	ldi	r25, 0x00	; 0
    b3ba:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    b3be:	25 e6       	ldi	r18, 0x65	; 101
    b3c0:	38 e8       	ldi	r19, 0x88	; 136
    b3c2:	48 e8       	ldi	r20, 0x88	; 136
    b3c4:	5c e3       	ldi	r21, 0x3C	; 60
    b3c6:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    b3ca:	9b 01       	movw	r18, r22
    b3cc:	ac 01       	movw	r20, r24
    b3ce:	c7 01       	movw	r24, r14
    b3d0:	b6 01       	movw	r22, r12
    b3d2:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    b3d6:	27 c0       	rjmp	.+78     	; 0xb426 <update_turret+0x10e>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    b3d8:	91 30       	cpi	r25, 0x01	; 1
    b3da:	49 f5       	brne	.+82     	; 0xb42e <update_turret+0x116>
	{
		if (t->shared.x > right_limit)
    b3dc:	64 2f       	mov	r22, r20
    b3de:	70 e0       	ldi	r23, 0x00	; 0
    b3e0:	80 e0       	ldi	r24, 0x00	; 0
    b3e2:	90 e0       	ldi	r25, 0x00	; 0
    b3e4:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    b3e8:	9b 01       	movw	r18, r22
    b3ea:	ac 01       	movw	r20, r24
    b3ec:	c7 01       	movw	r24, r14
    b3ee:	b6 01       	movw	r22, r12
    b3f0:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    b3f4:	18 16       	cp	r1, r24
    b3f6:	2c f4       	brge	.+10     	; 0xb402 <update_turret+0xea>
		{
			t->shared.direction = D_LEFT;
    b3f8:	83 e0       	ldi	r24, 0x03	; 3
    b3fa:	88 83       	st	Y, r24
			t->shared.speed = BOSS_TURRET_SPEED;
    b3fc:	8a e5       	ldi	r24, 0x5A	; 90
    b3fe:	89 83       	std	Y+1, r24	; 0x01
    b400:	16 c0       	rjmp	.+44     	; 0xb42e <update_turret+0x116>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    b402:	69 81       	ldd	r22, Y+1	; 0x01
    b404:	70 e0       	ldi	r23, 0x00	; 0
    b406:	80 e0       	ldi	r24, 0x00	; 0
    b408:	90 e0       	ldi	r25, 0x00	; 0
    b40a:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    b40e:	25 e6       	ldi	r18, 0x65	; 101
    b410:	38 e8       	ldi	r19, 0x88	; 136
    b412:	48 e8       	ldi	r20, 0x88	; 136
    b414:	5c e3       	ldi	r21, 0x3C	; 60
    b416:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    b41a:	9b 01       	movw	r18, r22
    b41c:	ac 01       	movw	r20, r24
    b41e:	c7 01       	movw	r24, r14
    b420:	b6 01       	movw	r22, r12
    b422:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    b426:	6b 83       	std	Y+3, r22	; 0x03
    b428:	7c 83       	std	Y+4, r23	; 0x04
    b42a:	8d 83       	std	Y+5, r24	; 0x05
    b42c:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    b42e:	df 91       	pop	r29
    b430:	cf 91       	pop	r28
    b432:	ff 90       	pop	r15
    b434:	ef 90       	pop	r14
    b436:	df 90       	pop	r13
    b438:	cf 90       	pop	r12
    b43a:	08 95       	ret

0000b43c <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    b43c:	10 92 a3 0b 	sts	0x0BA3, r1
	clear_sprites();
    b440:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else
	if (wifi_status == WIFI_OK)
    b444:	80 91 d4 0b 	lds	r24, 0x0BD4
    b448:	81 11       	cpse	r24, r1
    b44a:	02 c0       	rjmp	.+4      	; 0xb450 <load_splash+0x14>
	{
		disablePassthroughMode();
    b44c:	0e 94 c4 4a 	call	0x9588	; 0x9588 <disablePassthroughMode>
	}
	Print(7, 13, (char*) str1Player);
    b450:	49 e6       	ldi	r20, 0x69	; 105
    b452:	55 e0       	ldi	r21, 0x05	; 5
    b454:	6d e0       	ldi	r22, 0x0D	; 13
    b456:	70 e0       	ldi	r23, 0x00	; 0
    b458:	87 e0       	ldi	r24, 0x07	; 7
    b45a:	90 e0       	ldi	r25, 0x00	; 0
    b45c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(7, 14, (char*) str2Player);
    b460:	48 e5       	ldi	r20, 0x58	; 88
    b462:	55 e0       	ldi	r21, 0x05	; 5
    b464:	6e e0       	ldi	r22, 0x0E	; 14
    b466:	70 e0       	ldi	r23, 0x00	; 0
    b468:	87 e0       	ldi	r24, 0x07	; 7
    b46a:	90 e0       	ldi	r25, 0x00	; 0
    b46c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	if (wifi_status == WIFI_OK) {
    b470:	80 91 d4 0b 	lds	r24, 0x0BD4
    b474:	81 11       	cpse	r24, r1
    b476:	10 c0       	rjmp	.+32     	; 0xb498 <load_splash+0x5c>
		Print(7, 15, (char*) strHostNetGame);
    b478:	4a e4       	ldi	r20, 0x4A	; 74
    b47a:	55 e0       	ldi	r21, 0x05	; 5
    b47c:	6f e0       	ldi	r22, 0x0F	; 15
    b47e:	70 e0       	ldi	r23, 0x00	; 0
    b480:	87 e0       	ldi	r24, 0x07	; 7
    b482:	90 e0       	ldi	r25, 0x00	; 0
    b484:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		Print(7, 16, (char*) strJoinNetGame);
    b488:	4c e3       	ldi	r20, 0x3C	; 60
    b48a:	55 e0       	ldi	r21, 0x05	; 5
    b48c:	60 e1       	ldi	r22, 0x10	; 16
    b48e:	70 e0       	ldi	r23, 0x00	; 0
    b490:	87 e0       	ldi	r24, 0x07	; 7
    b492:	90 e0       	ldi	r25, 0x00	; 0
    b494:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	}
	Print(7, 17, (char*) strHighscores);
    b498:	4b e7       	ldi	r20, 0x7B	; 123
    b49a:	54 e0       	ldi	r21, 0x04	; 4
    b49c:	61 e1       	ldi	r22, 0x11	; 17
    b49e:	70 e0       	ldi	r23, 0x00	; 0
    b4a0:	87 e0       	ldi	r24, 0x07	; 7
    b4a2:	90 e0       	ldi	r25, 0x00	; 0
    b4a4:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(5, 26, (char*) strCopyright);
    b4a8:	45 e8       	ldi	r20, 0x85	; 133
    b4aa:	54 e0       	ldi	r21, 0x04	; 4
    b4ac:	6a e1       	ldi	r22, 0x1A	; 26
    b4ae:	70 e0       	ldi	r23, 0x00	; 0
    b4b0:	85 e0       	ldi	r24, 0x05	; 5
    b4b2:	90 e0       	ldi	r25, 0x00	; 0
    b4b4:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	MapSprite2(0, map_right_arrow, 0);
    b4b8:	40 e0       	ldi	r20, 0x00	; 0
    b4ba:	67 e4       	ldi	r22, 0x47	; 71
    b4bc:	71 e3       	ldi	r23, 0x31	; 49
    b4be:	80 e0       	ldi	r24, 0x00	; 0
    b4c0:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    b4c4:	4a ef       	ldi	r20, 0xFA	; 250
    b4c6:	5a e6       	ldi	r21, 0x6A	; 106
    b4c8:	65 e0       	ldi	r22, 0x05	; 5
    b4ca:	84 e0       	ldi	r24, 0x04	; 4
    b4cc:	0c 94 6c 48 	jmp	0x90d8	; 0x90d8 <DrawMap>

0000b4d0 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    b4d0:	fc 01       	movw	r30, r24
    b4d2:	20 81       	ld	r18, Z
    b4d4:	31 81       	ldd	r19, Z+1	; 0x01
    b4d6:	28 70       	andi	r18, 0x08	; 8
    b4d8:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &p2) return p1.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b4da:	81 e0       	ldi	r24, 0x01	; 1
    b4dc:	23 2b       	or	r18, r19
    b4de:	09 f4       	brne	.+2      	; 0xb4e2 <select_pressed+0x12>
    b4e0:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    b4e2:	08 95       	ret

0000b4e4 <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    b4e4:	ff 92       	push	r15
    b4e6:	0f 93       	push	r16
    b4e8:	1f 93       	push	r17
    b4ea:	cf 93       	push	r28
    b4ec:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    b4ee:	81 e0       	ldi	r24, 0x01	; 1
    b4f0:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    b4f4:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    b4f8:	47 ec       	ldi	r20, 0xC7	; 199
    b4fa:	5a e6       	ldi	r21, 0x6A	; 106
    b4fc:	61 e0       	ldi	r22, 0x01	; 1
    b4fe:	87 e0       	ldi	r24, 0x07	; 7
    b500:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    b504:	41 ec       	ldi	r20, 0xC1	; 193
    b506:	5a e6       	ldi	r21, 0x6A	; 106
    b508:	61 e0       	ldi	r22, 0x01	; 1
    b50a:	84 e1       	ldi	r24, 0x14	; 20
    b50c:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	Print(10, 2, (char*) strHighscores);
    b510:	4b e7       	ldi	r20, 0x7B	; 123
    b512:	54 e0       	ldi	r21, 0x04	; 4
    b514:	62 e0       	ldi	r22, 0x02	; 2
    b516:	70 e0       	ldi	r23, 0x00	; 0
    b518:	8a e0       	ldi	r24, 0x0A	; 10
    b51a:	90 e0       	ldi	r25, 0x00	; 0
    b51c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    b520:	0c e5       	ldi	r16, 0x5C	; 92
    b522:	1b e0       	ldi	r17, 0x0B	; 11
    b524:	c7 e0       	ldi	r28, 0x07	; 7
    b526:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    b528:	ff 24       	eor	r15, r15
    b52a:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    b52c:	20 e0       	ldi	r18, 0x00	; 0
    b52e:	4f 2d       	mov	r20, r15
    b530:	be 01       	movw	r22, r28
    b532:	82 e0       	ldi	r24, 0x02	; 2
    b534:	90 e0       	ldi	r25, 0x00	; 0
    b536:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
		PrintChar(3, y, '.');
    b53a:	4e e2       	ldi	r20, 0x2E	; 46
    b53c:	be 01       	movw	r22, r28
    b53e:	83 e0       	ldi	r24, 0x03	; 3
    b540:	90 e0       	ldi	r25, 0x00	; 0
    b542:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
    b546:	f8 01       	movw	r30, r16
    b548:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    b54a:	80 81       	ld	r24, Z
    b54c:	93 e0       	ldi	r25, 0x03	; 3
    b54e:	89 9f       	mul	r24, r25
    b550:	a0 01       	movw	r20, r0
    b552:	11 24       	eor	r1, r1
    b554:	4b 57       	subi	r20, 0x7B	; 123
    b556:	54 4f       	sbci	r21, 0xF4	; 244
    b558:	23 e0       	ldi	r18, 0x03	; 3
    b55a:	6c 2f       	mov	r22, r28
    b55c:	85 e0       	ldi	r24, 0x05	; 5
    b55e:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    b562:	47 e4       	ldi	r20, 0x47	; 71
    b564:	54 e0       	ldi	r21, 0x04	; 4
    b566:	be 01       	movw	r22, r28
    b568:	89 e0       	ldi	r24, 0x09	; 9
    b56a:	90 e0       	ldi	r25, 0x00	; 0
    b56c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    b570:	f8 01       	movw	r30, r16
    b572:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    b574:	80 81       	ld	r24, Z
    b576:	e3 e0       	ldi	r30, 0x03	; 3
    b578:	8e 9f       	mul	r24, r30
    b57a:	a0 01       	movw	r20, r0
    b57c:	11 24       	eor	r1, r1
    b57e:	4b 57       	subi	r20, 0x7B	; 123
    b580:	54 4f       	sbci	r21, 0xF4	; 244
    b582:	23 e0       	ldi	r18, 0x03	; 3
    b584:	6c 2f       	mov	r22, r28
    b586:	8e e0       	ldi	r24, 0x0E	; 14
    b588:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
		Print(18, y, (char*) strBy);
    b58c:	44 e4       	ldi	r20, 0x44	; 68
    b58e:	54 e0       	ldi	r21, 0x04	; 4
    b590:	be 01       	movw	r22, r28
    b592:	82 e1       	ldi	r24, 0x12	; 18
    b594:	90 e0       	ldi	r25, 0x00	; 0
    b596:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    b59a:	21 e0       	ldi	r18, 0x01	; 1
    b59c:	f8 01       	movw	r30, r16
    b59e:	32 97       	sbiw	r30, 0x02	; 2
    b5a0:	40 81       	ld	r20, Z
    b5a2:	be 01       	movw	r22, r28
    b5a4:	87 e1       	ldi	r24, 0x17	; 23
    b5a6:	90 e0       	ldi	r25, 0x00	; 0
    b5a8:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
		PrintChar(24, y, '-');
    b5ac:	4d e2       	ldi	r20, 0x2D	; 45
    b5ae:	be 01       	movw	r22, r28
    b5b0:	88 e1       	ldi	r24, 0x18	; 24
    b5b2:	90 e0       	ldi	r25, 0x00	; 0
    b5b4:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    b5b8:	21 e0       	ldi	r18, 0x01	; 1
    b5ba:	f8 01       	movw	r30, r16
    b5bc:	31 97       	sbiw	r30, 0x01	; 1
    b5be:	40 81       	ld	r20, Z
    b5c0:	be 01       	movw	r22, r28
    b5c2:	8b e1       	ldi	r24, 0x1B	; 27
    b5c4:	90 e0       	ldi	r25, 0x00	; 0
    b5c6:	0e 94 b9 48 	call	0x9172	; 0x9172 <PrintByte>
		if (scores.data[i+4])
    b5ca:	f8 01       	movw	r30, r16
    b5cc:	80 81       	ld	r24, Z
    b5ce:	88 23       	and	r24, r24
    b5d0:	11 f0       	breq	.+4      	; 0xb5d6 <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    b5d2:	4a e2       	ldi	r20, 0x2A	; 42
    b5d4:	01 c0       	rjmp	.+2      	; 0xb5d8 <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    b5d6:	40 e2       	ldi	r20, 0x20	; 32
    b5d8:	be 01       	movw	r22, r28
    b5da:	8d e1       	ldi	r24, 0x1D	; 29
    b5dc:	90 e0       	ldi	r25, 0x00	; 0
    b5de:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		y += 3;
		rank += 1;
    b5e2:	f3 94       	inc	r15
    b5e4:	23 96       	adiw	r28, 0x03	; 3
    b5e6:	0b 5f       	subi	r16, 0xFB	; 251
    b5e8:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    b5ea:	f6 e0       	ldi	r31, 0x06	; 6
    b5ec:	ff 12       	cpse	r15, r31
    b5ee:	9e cf       	rjmp	.-196    	; 0xb52c <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    b5f0:	44 eb       	ldi	r20, 0xB4	; 180
    b5f2:	54 e0       	ldi	r21, 0x04	; 4
    b5f4:	66 e1       	ldi	r22, 0x16	; 22
    b5f6:	70 e0       	ldi	r23, 0x00	; 0
    b5f8:	83 e0       	ldi	r24, 0x03	; 3
    b5fa:	90 e0       	ldi	r25, 0x00	; 0
    b5fc:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(10, 24, (char*) strCancelHandle);
    b600:	49 ea       	ldi	r20, 0xA9	; 169
    b602:	54 e0       	ldi	r21, 0x04	; 4
    b604:	68 e1       	ldi	r22, 0x18	; 24
    b606:	70 e0       	ldi	r23, 0x00	; 0
    b608:	8a e0       	ldi	r24, 0x0A	; 10
    b60a:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    b60c:	df 91       	pop	r29
    b60e:	cf 91       	pop	r28
    b610:	1f 91       	pop	r17
    b612:	0f 91       	pop	r16
    b614:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    b616:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>

0000b61a <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b61a:	0e 94 db 4f 	call	0x9fb6	; 0x9fb6 <save_score>
	fade_through();
    b61e:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
	init_game_state();
    b622:	0e 94 5b 4f 	call	0x9eb6	; 0x9eb6 <init_game_state>
	load_tank_rank();
    b626:	0c 94 72 5a 	jmp	0xb4e4	; 0xb4e4 <load_tank_rank>

0000b62a <resolve_scoring>:
		}
	}
}

void resolve_scoring()
{
    b62a:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    b62c:	c0 91 a4 0b 	lds	r28, 0x0BA4
    b630:	80 91 e5 0b 	lds	r24, 0x0BE5
    b634:	ca 30       	cpi	r28, 0x0A	; 10
    b636:	80 f5       	brcc	.+96     	; 0xb698 <resolve_scoring+0x6e>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    b638:	8a 30       	cpi	r24, 0x0A	; 10
    b63a:	70 f0       	brcs	.+28     	; 0xb658 <resolve_scoring+0x2e>
    b63c:	80 91 5c 0f 	lds	r24, 0x0F5C
    b640:	80 fd       	sbrc	r24, 0
    b642:	0a c0       	rjmp	.+20     	; 0xb658 <resolve_scoring+0x2e>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    b644:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <LBHideAllSprites>
			load_level_tiles(true);
    b648:	81 e0       	ldi	r24, 0x01	; 1
    b64a:	0e 94 8c 57 	call	0xaf18	; 0xaf18 <load_level_tiles>
			print_level_score(&player1, &player2);
    b64e:	67 e4       	ldi	r22, 0x47	; 71
    b650:	7f e0       	ldi	r23, 0x0F	; 15
    b652:	85 ed       	ldi	r24, 0xD5	; 213
    b654:	9b e0       	ldi	r25, 0x0B	; 11
    b656:	12 c0       	rjmp	.+36     	; 0xb67c <resolve_scoring+0x52>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    b658:	80 91 57 0f 	lds	r24, 0x0F57
    b65c:	8a 30       	cpi	r24, 0x0A	; 10
    b65e:	08 f4       	brcc	.+2      	; 0xb662 <resolve_scoring+0x38>
    b660:	a7 c0       	rjmp	.+334    	; 0xb7b0 <resolve_scoring+0x186>
    b662:	80 91 ea 0b 	lds	r24, 0x0BEA
    b666:	80 fd       	sbrc	r24, 0
    b668:	a3 c0       	rjmp	.+326    	; 0xb7b0 <resolve_scoring+0x186>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    b66a:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <LBHideAllSprites>
			load_level_tiles(true);
    b66e:	81 e0       	ldi	r24, 0x01	; 1
    b670:	0e 94 8c 57 	call	0xaf18	; 0xaf18 <load_level_tiles>
			print_level_score(&player2, &player1);
    b674:	65 ed       	ldi	r22, 0xD5	; 213
    b676:	7b e0       	ldi	r23, 0x0B	; 11
    b678:	87 e4       	ldi	r24, 0x47	; 71
    b67a:	9f e0       	ldi	r25, 0x0F	; 15
    b67c:	0e 94 c9 50 	call	0xa192	; 0xa192 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    b680:	84 e0       	ldi	r24, 0x04	; 4
    b682:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <LBWaitSeconds>
			player1.level_score = 0;
    b686:	10 92 e5 0b 	sts	0x0BE5, r1
			player2.level_score = 0;
    b68a:	10 92 57 0f 	sts	0x0F57, r1
			level_transition(next_level);
    b68e:	81 e0       	ldi	r24, 0x01	; 1
    b690:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    b692:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    b694:	0c 94 b5 58 	jmp	0xb16a	; 0xb16a <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    b698:	8a 30       	cpi	r24, 0x0A	; 10
    b69a:	28 f4       	brcc	.+10     	; 0xb6a6 <resolve_scoring+0x7c>
    b69c:	80 91 57 0f 	lds	r24, 0x0F57
    b6a0:	8a 30       	cpi	r24, 0x0A	; 10
    b6a2:	08 f4       	brcc	.+2      	; 0xb6a6 <resolve_scoring+0x7c>
    b6a4:	85 c0       	rjmp	.+266    	; 0xb7b0 <resolve_scoring+0x186>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    b6a6:	90 91 e4 0b 	lds	r25, 0x0BE4
    b6aa:	80 91 56 0f 	lds	r24, 0x0F56
    b6ae:	98 17       	cp	r25, r24
    b6b0:	09 f4       	brne	.+2      	; 0xb6b4 <resolve_scoring+0x8a>
    b6b2:	7e c0       	rjmp	.+252    	; 0xb7b0 <resolve_scoring+0x186>
			
			if (game.boss_fight_status == 0)
    b6b4:	20 91 a6 0b 	lds	r18, 0x0BA6
    b6b8:	21 11       	cpse	r18, r1
    b6ba:	46 c0       	rjmp	.+140    	; 0xb748 <resolve_scoring+0x11e>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    b6bc:	c1 e0       	ldi	r28, 0x01	; 1
    b6be:	c0 93 a6 0b 	sts	0x0BA6, r28
				if (player1.score > player2.score)
    b6c2:	89 17       	cp	r24, r25
    b6c4:	e8 f4       	brcc	.+58     	; 0xb700 <resolve_scoring+0xd6>
				{
					game.boss_fight_player = &player1;
    b6c6:	85 ed       	ldi	r24, 0xD5	; 213
    b6c8:	9b e0       	ldi	r25, 0x0B	; 11
    b6ca:	90 93 b3 0b 	sts	0x0BB3, r25
    b6ce:	80 93 b2 0b 	sts	0x0BB2, r24
					game.boss_fight_joypad = &p1;
    b6d2:	81 e5       	ldi	r24, 0x51	; 81
    b6d4:	9c e0       	ldi	r25, 0x0C	; 12
    b6d6:	90 93 b5 0b 	sts	0x0BB5, r25
    b6da:	80 93 b4 0b 	sts	0x0BB4, r24
					game.boss_fight_player_hud = 0;
    b6de:	10 92 a7 0b 	sts	0x0BA7, r1
					kill_player(&player2, 15);
    b6e2:	6f e0       	ldi	r22, 0x0F	; 15
    b6e4:	87 e4       	ldi	r24, 0x47	; 71
    b6e6:	9f e0       	ldi	r25, 0x0F	; 15
    b6e8:	0e 94 a7 55 	call	0xab4e	; 0xab4e <kill_player>
					player_spawn(&player2);
    b6ec:	87 e4       	ldi	r24, 0x47	; 71
    b6ee:	9f e0       	ldi	r25, 0x0F	; 15
    b6f0:	0e 94 82 4f 	call	0x9f04	; 0x9f04 <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    b6f4:	80 91 5c 0f 	lds	r24, 0x0F5C
    b6f8:	c8 27       	eor	r28, r24
    b6fa:	c0 93 5c 0f 	sts	0x0F5C, r28
    b6fe:	1d c0       	rjmp	.+58     	; 0xb73a <resolve_scoring+0x110>
				}
				else
				{
					game.boss_fight_player = &player2;
    b700:	87 e4       	ldi	r24, 0x47	; 71
    b702:	9f e0       	ldi	r25, 0x0F	; 15
    b704:	90 93 b3 0b 	sts	0x0BB3, r25
    b708:	80 93 b2 0b 	sts	0x0BB2, r24
					game.boss_fight_joypad = &p2;
    b70c:	86 e7       	ldi	r24, 0x76	; 118
    b70e:	9b e0       	ldi	r25, 0x0B	; 11
    b710:	90 93 b5 0b 	sts	0x0BB5, r25
    b714:	80 93 b4 0b 	sts	0x0BB4, r24
					game.boss_fight_player_hud = 15;
    b718:	8f e0       	ldi	r24, 0x0F	; 15
    b71a:	80 93 a7 0b 	sts	0x0BA7, r24
					kill_player(&player1, 0);
    b71e:	60 e0       	ldi	r22, 0x00	; 0
    b720:	85 ed       	ldi	r24, 0xD5	; 213
    b722:	9b e0       	ldi	r25, 0x0B	; 11
    b724:	0e 94 a7 55 	call	0xab4e	; 0xab4e <kill_player>
					player_spawn(&player1);
    b728:	85 ed       	ldi	r24, 0xD5	; 213
    b72a:	9b e0       	ldi	r25, 0x0B	; 11
    b72c:	0e 94 82 4f 	call	0x9f04	; 0x9f04 <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    b730:	80 91 ea 0b 	lds	r24, 0x0BEA
    b734:	c8 27       	eor	r28, r24
    b736:	c0 93 ea 0b 	sts	0x0BEA, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    b73a:	85 ea       	ldi	r24, 0xA5	; 165
    b73c:	90 e0       	ldi	r25, 0x00	; 0
    b73e:	90 93 de 0f 	sts	0x0FDE, r25
    b742:	80 93 dd 0f 	sts	0x0FDD, r24
				return;
    b746:	34 c0       	rjmp	.+104    	; 0xb7b0 <resolve_scoring+0x186>
			}
			
			// Print level score
			LBHideAllSprites();
    b748:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <LBHideAllSprites>
			load_level_tiles(true);
    b74c:	81 e0       	ldi	r24, 0x01	; 1
    b74e:	0e 94 8c 57 	call	0xaf18	; 0xaf18 <load_level_tiles>
			if (player1.level_score > player2.level_score)
    b752:	90 91 e5 0b 	lds	r25, 0x0BE5
    b756:	80 91 57 0f 	lds	r24, 0x0F57
    b75a:	89 17       	cp	r24, r25
    b75c:	28 f4       	brcc	.+10     	; 0xb768 <resolve_scoring+0x13e>
				print_level_score(&player1, &player2);
    b75e:	67 e4       	ldi	r22, 0x47	; 71
    b760:	7f e0       	ldi	r23, 0x0F	; 15
    b762:	85 ed       	ldi	r24, 0xD5	; 213
    b764:	9b e0       	ldi	r25, 0x0B	; 11
    b766:	04 c0       	rjmp	.+8      	; 0xb770 <resolve_scoring+0x146>
			else
				print_level_score(&player2, &player1);
    b768:	65 ed       	ldi	r22, 0xD5	; 213
    b76a:	7b e0       	ldi	r23, 0x0B	; 11
    b76c:	87 e4       	ldi	r24, 0x47	; 71
    b76e:	9f e0       	ldi	r25, 0x0F	; 15
    b770:	0e 94 c9 50 	call	0xa192	; 0xa192 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    b774:	84 e0       	ldi	r24, 0x04	; 4
    b776:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <LBWaitSeconds>
			player1.level_score = 0;
    b77a:	10 92 e5 0b 	sts	0x0BE5, r1
			player2.level_score = 0;
    b77e:	10 92 57 0f 	sts	0x0F57, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    b782:	90 91 e4 0b 	lds	r25, 0x0BE4
    b786:	80 91 56 0f 	lds	r24, 0x0F56
    b78a:	89 17       	cp	r24, r25
    b78c:	28 f4       	brcc	.+10     	; 0xb798 <resolve_scoring+0x16e>
				print_final_score(&player1, &player2);
    b78e:	67 e4       	ldi	r22, 0x47	; 71
    b790:	7f e0       	ldi	r23, 0x0F	; 15
    b792:	85 ed       	ldi	r24, 0xD5	; 213
    b794:	9b e0       	ldi	r25, 0x0B	; 11
    b796:	04 c0       	rjmp	.+8      	; 0xb7a0 <resolve_scoring+0x176>
			else
				print_final_score(&player2, &player1);
    b798:	65 ed       	ldi	r22, 0xD5	; 213
    b79a:	7b e0       	ldi	r23, 0x0B	; 11
    b79c:	87 e4       	ldi	r24, 0x47	; 71
    b79e:	9f e0       	ldi	r25, 0x0F	; 15
    b7a0:	0e 94 0b 51 	call	0xa216	; 0xa216 <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    b7a4:	84 e0       	ldi	r24, 0x04	; 4
    b7a6:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <LBWaitSeconds>
			exit_game();
		}
	}
}
    b7aa:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    b7ac:	0c 94 0d 5b 	jmp	0xb61a	; 0xb61a <exit_game>
		}
	}
}
    b7b0:	cf 91       	pop	r28
    b7b2:	08 95       	ret

0000b7b4 <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    b7b4:	cf 93       	push	r28
    b7b6:	df 93       	push	r29
    b7b8:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    b7ba:	88 81       	ld	r24, Y
    b7bc:	99 81       	ldd	r25, Y+1	; 0x01
    b7be:	91 ff       	sbrs	r25, 1
    b7c0:	11 c0       	rjmp	.+34     	; 0xb7e4 <update_tank_rank+0x30>
	{
		game.tank_rank_counter = 0;
    b7c2:	10 92 b1 0b 	sts	0x0BB1, r1
    b7c6:	10 92 b0 0b 	sts	0x0BB0, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b7ca:	24 e0       	ldi	r18, 0x04	; 4
    b7cc:	40 91 5c 0f 	lds	r20, 0x0F5C
    b7d0:	60 91 ea 0b 	lds	r22, 0x0BEA
    b7d4:	80 91 b6 0b 	lds	r24, 0x0BB6
    b7d8:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    b7dc:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
		load_splash();
    b7e0:	0e 94 1e 5a 	call	0xb43c	; 0xb43c <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    b7e4:	8c 81       	ldd	r24, Y+4	; 0x04
    b7e6:	9d 81       	ldd	r25, Y+5	; 0x05
    b7e8:	92 ff       	sbrs	r25, 2
    b7ea:	22 c0       	rjmp	.+68     	; 0xb830 <update_tank_rank+0x7c>
    b7ec:	8e 81       	ldd	r24, Y+6	; 0x06
    b7ee:	8f 3f       	cpi	r24, 0xFF	; 255
    b7f0:	f9 f4       	brne	.+62     	; 0xb830 <update_tank_rank+0x7c>
	{
		game.tank_rank_counter = 0;
    b7f2:	10 92 b1 0b 	sts	0x0BB1, r1
    b7f6:	10 92 b0 0b 	sts	0x0BB0, r1
	    LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b7fa:	24 e0       	ldi	r18, 0x04	; 4
    b7fc:	40 91 5c 0f 	lds	r20, 0x0F5C
    b800:	60 91 ea 0b 	lds	r22, 0x0BEA
    b804:	80 91 b6 0b 	lds	r24, 0x0BB6
    b808:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
	    init_scores(&scores);
    b80c:	86 e5       	ldi	r24, 0x56	; 86
    b80e:	9b e0       	ldi	r25, 0x0B	; 11
    b810:	0e 94 f6 4d 	call	0x9bec	; 0x9bec <init_scores>
	    init_handles(&handles);
    b814:	83 e8       	ldi	r24, 0x83	; 131
    b816:	9b e0       	ldi	r25, 0x0B	; 11
    b818:	0e 94 02 4e 	call	0x9c04	; 0x9c04 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b81c:	86 e5       	ldi	r24, 0x56	; 86
    b81e:	9b e0       	ldi	r25, 0x0B	; 11
    b820:	0e 94 c3 3b 	call	0x7786	; 0x7786 <EepromWriteBlock>
    b824:	83 e8       	ldi	r24, 0x83	; 131
    b826:	9b e0       	ldi	r25, 0x0B	; 11
    b828:	0e 94 c3 3b 	call	0x7786	; 0x7786 <EepromWriteBlock>
	    LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    b82c:	0e 94 72 5a 	call	0xb4e4	; 0xb4e4 <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    b830:	80 91 b0 0b 	lds	r24, 0x0BB0
    b834:	90 91 b1 0b 	lds	r25, 0x0BB1
    b838:	85 38       	cpi	r24, 0x85	; 133
    b83a:	93 40       	sbci	r25, 0x03	; 3
    b83c:	88 f0       	brcs	.+34     	; 0xb860 <update_tank_rank+0xac>
	{
		game.tank_rank_counter = 0;
    b83e:	10 92 b1 0b 	sts	0x0BB1, r1
    b842:	10 92 b0 0b 	sts	0x0BB0, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    b846:	24 e0       	ldi	r18, 0x04	; 4
    b848:	40 91 5c 0f 	lds	r20, 0x0F5C
    b84c:	60 91 ea 0b 	lds	r22, 0x0BEA
    b850:	80 91 b6 0b 	lds	r24, 0x0BB6
    b854:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    b858:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
		load_splash();
    b85c:	0e 94 1e 5a 	call	0xb43c	; 0xb43c <load_splash>
	}
	game.tank_rank_counter++;
    b860:	80 91 b0 0b 	lds	r24, 0x0BB0
    b864:	90 91 b1 0b 	lds	r25, 0x0BB1
    b868:	01 96       	adiw	r24, 0x01	; 1
    b86a:	90 93 b1 0b 	sts	0x0BB1, r25
    b86e:	80 93 b0 0b 	sts	0x0BB0, r24
#endif
}
    b872:	df 91       	pop	r29
    b874:	cf 91       	pop	r28
    b876:	08 95       	ret

0000b878 <_handle_select_render_helper>:
	}
#endif
}

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    b878:	af 92       	push	r10
    b87a:	bf 92       	push	r11
    b87c:	cf 92       	push	r12
    b87e:	df 92       	push	r13
    b880:	ef 92       	push	r14
    b882:	ff 92       	push	r15
    b884:	0f 93       	push	r16
    b886:	1f 93       	push	r17
    b888:	cf 93       	push	r28
    b88a:	df 93       	push	r29
    b88c:	00 d0       	rcall	.+0      	; 0xb88e <_handle_select_render_helper+0x16>
    b88e:	1f 92       	push	r1
    b890:	cd b7       	in	r28, 0x3d	; 61
    b892:	de b7       	in	r29, 0x3e	; 62
    b894:	7c 01       	movw	r14, r24
    b896:	b4 2e       	mov	r11, r20
    b898:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    b89a:	80 e2       	ldi	r24, 0x20	; 32
    b89c:	89 83       	std	Y+1, r24	; 0x01
    b89e:	8a 83       	std	Y+2, r24	; 0x02
    b8a0:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    b8a2:	f7 01       	movw	r30, r14
    b8a4:	85 81       	ldd	r24, Z+5	; 0x05
    b8a6:	81 11       	cpse	r24, r1
    b8a8:	1d c0       	rjmp	.+58     	; 0xb8e4 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    b8aa:	40 e0       	ldi	r20, 0x00	; 0
    b8ac:	67 e4       	ldi	r22, 0x47	; 71
    b8ae:	71 e3       	ldi	r23, 0x31	; 49
    b8b0:	82 2f       	mov	r24, r18
    b8b2:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b8b6:	40 e0       	ldi	r20, 0x00	; 0
    b8b8:	69 e8       	ldi	r22, 0x89	; 137
    b8ba:	71 e3       	ldi	r23, 0x31	; 49
    b8bc:	81 e0       	ldi	r24, 0x01	; 1
    b8be:	81 0f       	add	r24, r17
    b8c0:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    b8c4:	f7 01       	movw	r30, r14
    b8c6:	40 81       	ld	r20, Z
    b8c8:	44 0f       	add	r20, r20
    b8ca:	44 0f       	add	r20, r20
    b8cc:	44 0f       	add	r20, r20
    b8ce:	40 5c       	subi	r20, 0xC0	; 192
    b8d0:	01 e0       	ldi	r16, 0x01	; 1
    b8d2:	21 e0       	ldi	r18, 0x01	; 1
    b8d4:	6b 2d       	mov	r22, r11
    b8d6:	66 0f       	add	r22, r22
    b8d8:	66 0f       	add	r22, r22
    b8da:	66 0f       	add	r22, r22
    b8dc:	81 2f       	mov	r24, r17
    b8de:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
    b8e2:	6e c0       	rjmp	.+220    	; 0xb9c0 <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == EDITING)
    b8e4:	81 30       	cpi	r24, 0x01	; 1
    b8e6:	09 f0       	breq	.+2      	; 0xb8ea <_handle_select_render_helper+0x72>
    b8e8:	43 c0       	rjmp	.+134    	; 0xb970 <_handle_select_render_helper+0xf8>
	{
		MapSprite2(idx, map_down_arrow, 0);
    b8ea:	40 e0       	ldi	r20, 0x00	; 0
    b8ec:	64 e4       	ldi	r22, 0x44	; 68
    b8ee:	71 e3       	ldi	r23, 0x31	; 49
    b8f0:	82 2f       	mov	r24, r18
    b8f2:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    b8f6:	aa 24       	eor	r10, r10
    b8f8:	a3 94       	inc	r10
    b8fa:	a1 0e       	add	r10, r17
    b8fc:	40 e0       	ldi	r20, 0x00	; 0
    b8fe:	61 e4       	ldi	r22, 0x41	; 65
    b900:	71 e3       	ldi	r23, 0x31	; 49
    b902:	8a 2d       	mov	r24, r10
    b904:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    b908:	cb 2c       	mov	r12, r11
    b90a:	d1 2c       	mov	r13, r1
    b90c:	f5 e0       	ldi	r31, 0x05	; 5
    b90e:	cf 0e       	add	r12, r31
    b910:	d1 1c       	adc	r13, r1
    b912:	f7 01       	movw	r30, r14
    b914:	40 81       	ld	r20, Z
    b916:	44 0f       	add	r20, r20
    b918:	44 0f       	add	r20, r20
    b91a:	44 0f       	add	r20, r20
    b91c:	48 5c       	subi	r20, 0xC8	; 200
    b91e:	84 81       	ldd	r24, Z+4	; 0x04
    b920:	b6 01       	movw	r22, r12
    b922:	68 0f       	add	r22, r24
    b924:	71 1d       	adc	r23, r1
    b926:	87 fd       	sbrc	r24, 7
    b928:	7a 95       	dec	r23
    b92a:	66 0f       	add	r22, r22
    b92c:	66 0f       	add	r22, r22
    b92e:	66 0f       	add	r22, r22
    b930:	01 e0       	ldi	r16, 0x01	; 1
    b932:	21 e0       	ldi	r18, 0x01	; 1
    b934:	81 2f       	mov	r24, r17
    b936:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    b93a:	f7 01       	movw	r30, r14
    b93c:	40 81       	ld	r20, Z
    b93e:	44 0f       	add	r20, r20
    b940:	44 0f       	add	r20, r20
    b942:	44 0f       	add	r20, r20
    b944:	48 5b       	subi	r20, 0xB8	; 184
    b946:	84 81       	ldd	r24, Z+4	; 0x04
    b948:	c8 0e       	add	r12, r24
    b94a:	d1 1c       	adc	r13, r1
    b94c:	87 fd       	sbrc	r24, 7
    b94e:	da 94       	dec	r13
    b950:	6c 2d       	mov	r22, r12
    b952:	66 0f       	add	r22, r22
    b954:	66 0f       	add	r22, r22
    b956:	66 0f       	add	r22, r22
    b958:	21 e0       	ldi	r18, 0x01	; 1
    b95a:	8a 2d       	mov	r24, r10
    b95c:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
		memcpy(tmp, ps->handle, 3);
    b960:	f7 01       	movw	r30, r14
    b962:	81 81       	ldd	r24, Z+1	; 0x01
    b964:	92 81       	ldd	r25, Z+2	; 0x02
    b966:	a3 81       	ldd	r26, Z+3	; 0x03
    b968:	89 83       	std	Y+1, r24	; 0x01
    b96a:	9a 83       	std	Y+2, r25	; 0x02
    b96c:	ab 83       	std	Y+3, r26	; 0x03
    b96e:	28 c0       	rjmp	.+80     	; 0xb9c0 <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == CONFIRMED)
    b970:	82 30       	cpi	r24, 0x02	; 2
    b972:	31 f5       	brne	.+76     	; 0xb9c0 <_handle_select_render_helper+0x148>
	{
		PrintChar(x_offset+6, 5, '(');
    b974:	c4 2e       	mov	r12, r20
    b976:	d1 2c       	mov	r13, r1
    b978:	48 e2       	ldi	r20, 0x28	; 40
    b97a:	65 e0       	ldi	r22, 0x05	; 5
    b97c:	70 e0       	ldi	r23, 0x00	; 0
    b97e:	c6 01       	movw	r24, r12
    b980:	06 96       	adiw	r24, 0x06	; 6
    b982:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b986:	23 e0       	ldi	r18, 0x03	; 3
    b988:	a7 01       	movw	r20, r14
    b98a:	4f 5f       	subi	r20, 0xFF	; 255
    b98c:	5f 4f       	sbci	r21, 0xFF	; 255
    b98e:	65 e0       	ldi	r22, 0x05	; 5
    b990:	87 e0       	ldi	r24, 0x07	; 7
    b992:	8b 0d       	add	r24, r11
    b994:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b998:	49 e2       	ldi	r20, 0x29	; 41
    b99a:	65 e0       	ldi	r22, 0x05	; 5
    b99c:	70 e0       	ldi	r23, 0x00	; 0
    b99e:	c6 01       	movw	r24, r12
    b9a0:	0a 96       	adiw	r24, 0x0a	; 10
    b9a2:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		MapSprite2(idx, map_none, 0);
    b9a6:	40 e0       	ldi	r20, 0x00	; 0
    b9a8:	69 e8       	ldi	r22, 0x89	; 137
    b9aa:	71 e3       	ldi	r23, 0x31	; 49
    b9ac:	81 2f       	mov	r24, r17
    b9ae:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b9b2:	40 e0       	ldi	r20, 0x00	; 0
    b9b4:	69 e8       	ldi	r22, 0x89	; 137
    b9b6:	71 e3       	ldi	r23, 0x31	; 49
    b9b8:	81 e0       	ldi	r24, 0x01	; 1
    b9ba:	81 0f       	add	r24, r17
    b9bc:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b9c0:	f7 01       	movw	r30, r14
    b9c2:	60 81       	ld	r22, Z
    b9c4:	68 5f       	subi	r22, 0xF8	; 248
    b9c6:	23 e0       	ldi	r18, 0x03	; 3
    b9c8:	ae 01       	movw	r20, r28
    b9ca:	4f 5f       	subi	r20, 0xFF	; 255
    b9cc:	5f 4f       	sbci	r21, 0xFF	; 255
    b9ce:	85 e0       	ldi	r24, 0x05	; 5
    b9d0:	8b 0d       	add	r24, r11
    b9d2:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
}
    b9d6:	0f 90       	pop	r0
    b9d8:	0f 90       	pop	r0
    b9da:	0f 90       	pop	r0
    b9dc:	df 91       	pop	r29
    b9de:	cf 91       	pop	r28
    b9e0:	1f 91       	pop	r17
    b9e2:	0f 91       	pop	r16
    b9e4:	ff 90       	pop	r15
    b9e6:	ef 90       	pop	r14
    b9e8:	df 90       	pop	r13
    b9ea:	cf 90       	pop	r12
    b9ec:	bf 90       	pop	r11
    b9ee:	af 90       	pop	r10
    b9f0:	08 95       	ret

0000b9f2 <load_handle_select>:

void load_handle_select()
{
    b9f2:	8f 92       	push	r8
    b9f4:	9f 92       	push	r9
    b9f6:	af 92       	push	r10
    b9f8:	bf 92       	push	r11
    b9fa:	cf 92       	push	r12
    b9fc:	df 92       	push	r13
    b9fe:	ef 92       	push	r14
    ba00:	ff 92       	push	r15
    ba02:	0f 93       	push	r16
    ba04:	1f 93       	push	r17
    ba06:	cf 93       	push	r28
    ba08:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    ba0a:	82 e0       	ldi	r24, 0x02	; 2
    ba0c:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    ba10:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    ba14:	47 ec       	ldi	r20, 0xC7	; 199
    ba16:	5a e6       	ldi	r21, 0x6A	; 106
    ba18:	64 e0       	ldi	r22, 0x04	; 4
    ba1a:	83 e0       	ldi	r24, 0x03	; 3
    ba1c:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    ba20:	41 ec       	ldi	r20, 0xC1	; 193
    ba22:	5a e6       	ldi	r21, 0x6A	; 106
    ba24:	64 e0       	ldi	r22, 0x04	; 4
    ba26:	84 e1       	ldi	r24, 0x14	; 20
    ba28:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    ba2c:	4f e6       	ldi	r20, 0x6F	; 111
    ba2e:	54 e0       	ldi	r21, 0x04	; 4
    ba30:	61 e0       	ldi	r22, 0x01	; 1
    ba32:	70 e0       	ldi	r23, 0x00	; 0
    ba34:	89 e0       	ldi	r24, 0x09	; 9
    ba36:	90 e0       	ldi	r25, 0x00	; 0
    ba38:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(6, 5, (char*) strPlayer1);
    ba3c:	4e e5       	ldi	r20, 0x5E	; 94
    ba3e:	54 e0       	ldi	r21, 0x04	; 4
    ba40:	65 e0       	ldi	r22, 0x05	; 5
    ba42:	70 e0       	ldi	r23, 0x00	; 0
    ba44:	86 e0       	ldi	r24, 0x06	; 6
    ba46:	90 e0       	ldi	r25, 0x00	; 0
    ba48:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(23, 5, (char*) strPlayer2);
    ba4c:	4b e5       	ldi	r20, 0x5B	; 91
    ba4e:	54 e0       	ldi	r21, 0x04	; 4
    ba50:	65 e0       	ldi	r22, 0x05	; 5
    ba52:	70 e0       	ldi	r23, 0x00	; 0
    ba54:	87 e1       	ldi	r24, 0x17	; 23
    ba56:	90 e0       	ldi	r25, 0x00	; 0
    ba58:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
    ba5c:	85 e8       	ldi	r24, 0x85	; 133
    ba5e:	e8 2e       	mov	r14, r24
    ba60:	8b e0       	ldi	r24, 0x0B	; 11
    ba62:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    ba64:	c0 e0       	ldi	r28, 0x00	; 0
    ba66:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    ba68:	93 e0       	ldi	r25, 0x03	; 3
    ba6a:	a9 2e       	mov	r10, r25
    ba6c:	b1 2c       	mov	r11, r1
    ba6e:	67 01       	movw	r12, r14
    ba70:	ce 01       	movw	r24, r28
    ba72:	b5 01       	movw	r22, r10
    ba74:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    ba78:	4c 01       	movw	r8, r24
    ba7a:	8b 01       	movw	r16, r22
    ba7c:	08 5f       	subi	r16, 0xF8	; 248
    ba7e:	1f 4f       	sbci	r17, 0xFF	; 255
    ba80:	f7 01       	movw	r30, r14
    ba82:	41 91       	ld	r20, Z+
    ba84:	7f 01       	movw	r14, r30
    ba86:	b8 01       	movw	r22, r16
    ba88:	03 96       	adiw	r24, 0x03	; 3
    ba8a:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    ba8e:	f6 01       	movw	r30, r12
    ba90:	40 81       	ld	r20, Z
    ba92:	b8 01       	movw	r22, r16
    ba94:	c4 01       	movw	r24, r8
    ba96:	44 96       	adiw	r24, 0x14	; 20
    ba98:	0e 94 07 49 	call	0x920e	; 0x920e <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    ba9c:	21 96       	adiw	r28, 0x01	; 1
    ba9e:	cb 31       	cpi	r28, 0x1B	; 27
    baa0:	d1 05       	cpc	r29, r1
    baa2:	29 f7       	brne	.-54     	; 0xba6e <load_handle_select+0x7c>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    baa4:	4a e9       	ldi	r20, 0x9A	; 154
    baa6:	54 e0       	ldi	r21, 0x04	; 4
    baa8:	65 e1       	ldi	r22, 0x15	; 21
    baaa:	70 e0       	ldi	r23, 0x00	; 0
    baac:	85 e0       	ldi	r24, 0x05	; 5
    baae:	90 e0       	ldi	r25, 0x00	; 0
    bab0:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    bab4:	4d ec       	ldi	r20, 0xCD	; 205
    bab6:	54 e0       	ldi	r21, 0x04	; 4
    bab8:	66 e1       	ldi	r22, 0x16	; 22
    baba:	70 e0       	ldi	r23, 0x00	; 0
    babc:	85 e0       	ldi	r24, 0x05	; 5
    babe:	90 e0       	ldi	r25, 0x00	; 0
    bac0:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(5, 23, (char*) strCancelHandle);
    bac4:	49 ea       	ldi	r20, 0xA9	; 169
    bac6:	54 e0       	ldi	r21, 0x04	; 4
    bac8:	67 e1       	ldi	r22, 0x17	; 23
    baca:	70 e0       	ldi	r23, 0x00	; 0
    bacc:	85 e0       	ldi	r24, 0x05	; 5
    bace:	90 e0       	ldi	r25, 0x00	; 0
    bad0:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(5, 24, (char*) strChangeHandle);
    bad4:	4c e4       	ldi	r20, 0x4C	; 76
    bad6:	54 e0       	ldi	r21, 0x04	; 4
    bad8:	68 e1       	ldi	r22, 0x18	; 24
    bada:	70 e0       	ldi	r23, 0x00	; 0
    badc:	85 e0       	ldi	r24, 0x05	; 5
    bade:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    bae0:	df 91       	pop	r29
    bae2:	cf 91       	pop	r28
    bae4:	1f 91       	pop	r17
    bae6:	0f 91       	pop	r16
    bae8:	ff 90       	pop	r15
    baea:	ef 90       	pop	r14
    baec:	df 90       	pop	r13
    baee:	cf 90       	pop	r12
    baf0:	bf 90       	pop	r11
    baf2:	af 90       	pop	r10
    baf4:	9f 90       	pop	r9
    baf6:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    baf8:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>

0000bafc <load_host_net_game>:
#if JAMMA
#else

void load_host_net_game()
{
	game.current_screen = HOST_NET_GAME;
    bafc:	84 e0       	ldi	r24, 0x04	; 4
    bafe:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    bb02:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <clear_sprites>
	if (hostNetGame((char*)gameId) == WIFI_OK)
    bb06:	84 e0       	ldi	r24, 0x04	; 4
    bb08:	91 e0       	ldi	r25, 0x01	; 1
    bb0a:	0e 94 f5 4a 	call	0x95ea	; 0x95ea <hostNetGame>
    bb0e:	81 11       	cpse	r24, r1
    bb10:	24 c0       	rjmp	.+72     	; 0xbb5a <load_host_net_game+0x5e>
	{
		Print(5, 1, (char*) strShareGameId);
    bb12:	49 e2       	ldi	r20, 0x29	; 41
    bb14:	55 e0       	ldi	r21, 0x05	; 5
    bb16:	61 e0       	ldi	r22, 0x01	; 1
    bb18:	70 e0       	ldi	r23, 0x00	; 0
    bb1a:	85 e0       	ldi	r24, 0x05	; 5
    bb1c:	90 e0       	ldi	r25, 0x00	; 0
    bb1e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		LBPrintStr(10, 10, gameId, 8);
    bb22:	28 e0       	ldi	r18, 0x08	; 8
    bb24:	44 e0       	ldi	r20, 0x04	; 4
    bb26:	51 e0       	ldi	r21, 0x01	; 1
    bb28:	6a e0       	ldi	r22, 0x0A	; 10
    bb2a:	8a e0       	ldi	r24, 0x0A	; 10
    bb2c:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
		Print(2, 18, (char*) strWaitingForNetOppenent);
    bb30:	4e e0       	ldi	r20, 0x0E	; 14
    bb32:	55 e0       	ldi	r21, 0x05	; 5
    bb34:	62 e1       	ldi	r22, 0x12	; 18
    bb36:	70 e0       	ldi	r23, 0x00	; 0
    bb38:	82 e0       	ldi	r24, 0x02	; 2
    bb3a:	90 e0       	ldi	r25, 0x00	; 0
    bb3c:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		DrawMap2(7, 10, map_green_tank);
    bb40:	47 ec       	ldi	r20, 0xC7	; 199
    bb42:	5a e6       	ldi	r21, 0x6A	; 106
    bb44:	6a e0       	ldi	r22, 0x0A	; 10
    bb46:	87 e0       	ldi	r24, 0x07	; 7
    bb48:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
		DrawMap2(19, 10, map_blue_tank);
    bb4c:	41 ec       	ldi	r20, 0xC1	; 193
    bb4e:	5a e6       	ldi	r21, 0x6A	; 106
    bb50:	6a e0       	ldi	r22, 0x0A	; 10
    bb52:	83 e1       	ldi	r24, 0x13	; 19
    bb54:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
    bb58:	08 c0       	rjmp	.+16     	; 0xbb6a <load_host_net_game+0x6e>
	}
	else
	{
		Print(7, 10, (char*) strNetworkError);
    bb5a:	4f ed       	ldi	r20, 0xDF	; 223
    bb5c:	54 e0       	ldi	r21, 0x04	; 4
    bb5e:	6a e0       	ldi	r22, 0x0A	; 10
    bb60:	70 e0       	ldi	r23, 0x00	; 0
    bb62:	87 e0       	ldi	r24, 0x07	; 7
    bb64:	90 e0       	ldi	r25, 0x00	; 0
    bb66:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	}
	Print(9, 23, (char*) strCancelHandle);
    bb6a:	49 ea       	ldi	r20, 0xA9	; 169
    bb6c:	54 e0       	ldi	r21, 0x04	; 4
    bb6e:	67 e1       	ldi	r22, 0x17	; 23
    bb70:	70 e0       	ldi	r23, 0x00	; 0
    bb72:	89 e0       	ldi	r24, 0x09	; 9
    bb74:	90 e0       	ldi	r25, 0x00	; 0
    bb76:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>

0000bb7a <update_host_net_game>:
}

void update_host_net_game(JoyPadState* p1)
{
	if (p1->pressed & BTN_X)
    bb7a:	fc 01       	movw	r30, r24
    bb7c:	80 81       	ld	r24, Z
    bb7e:	91 81       	ldd	r25, Z+1	; 0x01
    bb80:	91 ff       	sbrs	r25, 1
    bb82:	0d c0       	rjmp	.+26     	; 0xbb9e <update_host_net_game+0x24>
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bb84:	24 e0       	ldi	r18, 0x04	; 4
    bb86:	40 91 5c 0f 	lds	r20, 0x0F5C
    bb8a:	60 91 ea 0b 	lds	r22, 0x0BEA
    bb8e:	80 91 b6 0b 	lds	r24, 0x0BB6
    bb92:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    bb96:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
		load_splash();
    bb9a:	0c 94 1e 5a 	jmp	0xb43c	; 0xb43c <load_splash>
	} 
	else if (netMessage.code == NETJOINED)
    bb9e:	80 91 df 0f 	lds	r24, 0x0FDF
    bba2:	8b 30       	cpi	r24, 0x0B	; 11
    bba4:	c9 f4       	brne	.+50     	; 0xbbd8 <update_host_net_game+0x5e>
	{
		game.demo_counter = 0;
    bba6:	10 92 ad 0b 	sts	0x0BAD, r1
    bbaa:	10 92 ac 0b 	sts	0x0BAC, r1
		p1s.select_state = SELECTING;
    bbae:	10 92 00 10 	sts	0x1000, r1
		p2s.select_state = SELECTING;
    bbb2:	10 92 82 0b 	sts	0x0B82, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bbb6:	24 e0       	ldi	r18, 0x04	; 4
    bbb8:	40 91 5c 0f 	lds	r20, 0x0F5C
    bbbc:	60 91 ea 0b 	lds	r22, 0x0BEA
    bbc0:	80 91 b6 0b 	lds	r24, 0x0BB6
    bbc4:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    bbc8:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
		load_eeprom(&handles);
    bbcc:	83 e8       	ldi	r24, 0x83	; 131
    bbce:	9b e0       	ldi	r25, 0x0B	; 11
    bbd0:	0e 94 b2 4f 	call	0x9f64	; 0x9f64 <load_eeprom>
		load_handle_select();
    bbd4:	0c 94 f9 5c 	jmp	0xb9f2	; 0xb9f2 <load_handle_select>
    bbd8:	08 95       	ret

0000bbda <load_join_net_game>:
	}
}

void load_join_net_game()
{
	game.current_screen = JOIN_NET_GAME;
    bbda:	85 e0       	ldi	r24, 0x05	; 5
    bbdc:	80 93 a3 0b 	sts	0x0BA3, r24
	clear_sprites();
    bbe0:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <clear_sprites>
	Print(5, 1, (char*) strEnterGameId);
    bbe4:	4d ee       	ldi	r20, 0xED	; 237
    bbe6:	54 e0       	ldi	r21, 0x04	; 4
    bbe8:	61 e0       	ldi	r22, 0x01	; 1
    bbea:	70 e0       	ldi	r23, 0x00	; 0
    bbec:	85 e0       	ldi	r24, 0x05	; 5
    bbee:	90 e0       	ldi	r25, 0x00	; 0
    bbf0:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	LBPrintStr(10, 10, gameId, 8);
    bbf4:	28 e0       	ldi	r18, 0x08	; 8
    bbf6:	44 e0       	ldi	r20, 0x04	; 4
    bbf8:	51 e0       	ldi	r21, 0x01	; 1
    bbfa:	6a e0       	ldi	r22, 0x0A	; 10
    bbfc:	8a e0       	ldi	r24, 0x0A	; 10
    bbfe:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
	DrawMap2(7, 10, map_green_tank);
    bc02:	47 ec       	ldi	r20, 0xC7	; 199
    bc04:	5a e6       	ldi	r21, 0x6A	; 106
    bc06:	6a e0       	ldi	r22, 0x0A	; 10
    bc08:	87 e0       	ldi	r24, 0x07	; 7
    bc0a:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	DrawMap2(19, 10, map_blue_tank);
    bc0e:	41 ec       	ldi	r20, 0xC1	; 193
    bc10:	5a e6       	ldi	r21, 0x6A	; 106
    bc12:	6a e0       	ldi	r22, 0x0A	; 10
    bc14:	83 e1       	ldi	r24, 0x13	; 19
    bc16:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
	Print(5, 22, (char*) strConfirmHandle);
    bc1a:	4d ec       	ldi	r20, 0xCD	; 205
    bc1c:	54 e0       	ldi	r21, 0x04	; 4
    bc1e:	66 e1       	ldi	r22, 0x16	; 22
    bc20:	70 e0       	ldi	r23, 0x00	; 0
    bc22:	85 e0       	ldi	r24, 0x05	; 5
    bc24:	90 e0       	ldi	r25, 0x00	; 0
    bc26:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	Print(9, 23, (char*) strCancelHandle);
    bc2a:	49 ea       	ldi	r20, 0xA9	; 169
    bc2c:	54 e0       	ldi	r21, 0x04	; 4
    bc2e:	67 e1       	ldi	r22, 0x17	; 23
    bc30:	70 e0       	ldi	r23, 0x00	; 0
    bc32:	89 e0       	ldi	r24, 0x09	; 9
    bc34:	90 e0       	ldi	r25, 0x00	; 0
    bc36:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
	gameIdIndex = 2;
    bc3a:	82 e0       	ldi	r24, 0x02	; 2
    bc3c:	80 93 03 01 	sts	0x0103, r24
    bc40:	08 95       	ret

0000bc42 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    bc42:	0f 93       	push	r16
    bc44:	cf 93       	push	r28
    bc46:	df 93       	push	r29
    bc48:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    bc4a:	90 91 b6 0b 	lds	r25, 0x0BB6
    bc4e:	92 30       	cpi	r25, 0x02	; 2
    bc50:	a9 f0       	breq	.+42     	; 0xbc7c <update_splash+0x3a>
    bc52:	44 f4       	brge	.+16     	; 0xbc64 <update_splash+0x22>
    bc54:	99 23       	and	r25, r25
    bc56:	71 f0       	breq	.+28     	; 0xbc74 <update_splash+0x32>
    bc58:	91 30       	cpi	r25, 0x01	; 1
    bc5a:	d9 f4       	brne	.+54     	; 0xbc92 <update_splash+0x50>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    bc5c:	01 e0       	ldi	r16, 0x01	; 1
    bc5e:	21 e0       	ldi	r18, 0x01	; 1
    bc60:	40 e7       	ldi	r20, 0x70	; 112
    bc62:	13 c0       	rjmp	.+38     	; 0xbc8a <update_splash+0x48>
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    bc64:	93 30       	cpi	r25, 0x03	; 3
    bc66:	71 f0       	breq	.+28     	; 0xbc84 <update_splash+0x42>
    bc68:	94 30       	cpi	r25, 0x04	; 4
    bc6a:	99 f4       	brne	.+38     	; 0xbc92 <update_splash+0x50>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    bc6c:	01 e0       	ldi	r16, 0x01	; 1
    bc6e:	21 e0       	ldi	r18, 0x01	; 1
    bc70:	48 e8       	ldi	r20, 0x88	; 136
    bc72:	0b c0       	rjmp	.+22     	; 0xbc8a <update_splash+0x48>
	game.demo_counter++;
#else
	switch (game.selection)
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    bc74:	01 e0       	ldi	r16, 0x01	; 1
    bc76:	21 e0       	ldi	r18, 0x01	; 1
    bc78:	48 e6       	ldi	r20, 0x68	; 104
    bc7a:	07 c0       	rjmp	.+14     	; 0xbc8a <update_splash+0x48>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
			break;
		case HOSTNETGAME:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    bc7c:	01 e0       	ldi	r16, 0x01	; 1
    bc7e:	21 e0       	ldi	r18, 0x01	; 1
    bc80:	48 e7       	ldi	r20, 0x78	; 120
    bc82:	03 c0       	rjmp	.+6      	; 0xbc8a <update_splash+0x48>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
    bc84:	01 e0       	ldi	r16, 0x01	; 1
    bc86:	21 e0       	ldi	r18, 0x01	; 1
    bc88:	40 e8       	ldi	r20, 0x80	; 128
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    bc8a:	60 e3       	ldi	r22, 0x30	; 48
    bc8c:	80 e0       	ldi	r24, 0x00	; 0
    bc8e:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    bc92:	4a e9       	ldi	r20, 0x9A	; 154
    bc94:	54 e0       	ldi	r21, 0x04	; 4
    bc96:	65 e1       	ldi	r22, 0x15	; 21
    bc98:	70 e0       	ldi	r23, 0x00	; 0
    bc9a:	86 e0       	ldi	r24, 0x06	; 6
    bc9c:	90 e0       	ldi	r25, 0x00	; 0
    bc9e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    bca2:	28 81       	ld	r18, Y
    bca4:	39 81       	ldd	r19, Y+1	; 0x01
    bca6:	21 15       	cp	r18, r1
    bca8:	31 05       	cpc	r19, r1
    bcaa:	21 f0       	breq	.+8      	; 0xbcb4 <update_splash+0x72>
    bcac:	10 92 ad 0b 	sts	0x0BAD, r1
    bcb0:	10 92 ac 0b 	sts	0x0BAC, r1
	
	if (p1->pressed & BTN_UP)
    bcb4:	24 ff       	sbrs	r18, 4
    bcb6:	16 c0       	rjmp	.+44     	; 0xbce4 <update_splash+0xa2>
	{
		game.selection--;
    bcb8:	80 91 b6 0b 	lds	r24, 0x0BB6
    bcbc:	9f ef       	ldi	r25, 0xFF	; 255
    bcbe:	98 0f       	add	r25, r24
    bcc0:	90 93 b6 0b 	sts	0x0BB6, r25
		if (game.selection == JOINNETGAME && wifi_status != WIFI_OK) game.selection -= 2;
    bcc4:	93 30       	cpi	r25, 0x03	; 3
    bcc6:	39 f4       	brne	.+14     	; 0xbcd6 <update_splash+0x94>
    bcc8:	90 91 d4 0b 	lds	r25, 0x0BD4
    bccc:	99 23       	and	r25, r25
    bcce:	19 f0       	breq	.+6      	; 0xbcd6 <update_splash+0x94>
    bcd0:	83 50       	subi	r24, 0x03	; 3
    bcd2:	80 93 b6 0b 	sts	0x0BB6, r24
		if (game.selection < PVCPU) game.selection = PVCPU;
    bcd6:	80 91 b6 0b 	lds	r24, 0x0BB6
    bcda:	87 ff       	sbrs	r24, 7
    bcdc:	1b c0       	rjmp	.+54     	; 0xbd14 <update_splash+0xd2>
    bcde:	10 92 b6 0b 	sts	0x0BB6, r1
    bce2:	18 c0       	rjmp	.+48     	; 0xbd14 <update_splash+0xd2>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if (p1->pressed & BTN_DOWN)
    bce4:	25 ff       	sbrs	r18, 5
    bce6:	20 c0       	rjmp	.+64     	; 0xbd28 <update_splash+0xe6>
	{
		game.selection++;
    bce8:	80 91 b6 0b 	lds	r24, 0x0BB6
    bcec:	91 e0       	ldi	r25, 0x01	; 1
    bcee:	98 0f       	add	r25, r24
    bcf0:	90 93 b6 0b 	sts	0x0BB6, r25
		if (game.selection == HOSTNETGAME && wifi_status != WIFI_OK) game.selection += 2;
    bcf4:	92 30       	cpi	r25, 0x02	; 2
    bcf6:	39 f4       	brne	.+14     	; 0xbd06 <update_splash+0xc4>
    bcf8:	90 91 d4 0b 	lds	r25, 0x0BD4
    bcfc:	99 23       	and	r25, r25
    bcfe:	19 f0       	breq	.+6      	; 0xbd06 <update_splash+0xc4>
    bd00:	8d 5f       	subi	r24, 0xFD	; 253
    bd02:	80 93 b6 0b 	sts	0x0BB6, r24
		if (game.selection > TR) game.selection = TR;
    bd06:	80 91 b6 0b 	lds	r24, 0x0BB6
    bd0a:	85 30       	cpi	r24, 0x05	; 5
    bd0c:	1c f0       	brlt	.+6      	; 0xbd14 <update_splash+0xd2>
    bd0e:	84 e0       	ldi	r24, 0x04	; 4
    bd10:	80 93 b6 0b 	sts	0x0BB6, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bd14:	24 e0       	ldi	r18, 0x04	; 4
    bd16:	40 91 5c 0f 	lds	r20, 0x0F5C
    bd1a:	60 91 ea 0b 	lds	r22, 0x0BEA
    bd1e:	80 91 b6 0b 	lds	r24, 0x0BB6
    bd22:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
    bd26:	b8 c0       	rjmp	.+368    	; 0xbe98 <update_splash+0x256>
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    bd28:	ce 01       	movw	r24, r28
    bd2a:	0e 94 68 5a 	call	0xb4d0	; 0xb4d0 <select_pressed>
    bd2e:	88 23       	and	r24, r24
    bd30:	09 f4       	brne	.+2      	; 0xbd34 <update_splash+0xf2>
    bd32:	5e c0       	rjmp	.+188    	; 0xbdf0 <update_splash+0x1ae>
    bd34:	80 91 b6 0b 	lds	r24, 0x0BB6
    bd38:	82 30       	cpi	r24, 0x02	; 2
    bd3a:	d0 f4       	brcc	.+52     	; 0xbd70 <update_splash+0x12e>
	{
		game.demo_counter = 0;
    bd3c:	10 92 ad 0b 	sts	0x0BAD, r1
    bd40:	10 92 ac 0b 	sts	0x0BAC, r1
		p1s.select_state = SELECTING;
    bd44:	10 92 00 10 	sts	0x1000, r1
		p2s.select_state = SELECTING;
    bd48:	10 92 82 0b 	sts	0x0B82, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bd4c:	24 e0       	ldi	r18, 0x04	; 4
    bd4e:	40 91 5c 0f 	lds	r20, 0x0F5C
    bd52:	60 91 ea 0b 	lds	r22, 0x0BEA
    bd56:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    bd5a:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
		load_eeprom(&handles);
    bd5e:	83 e8       	ldi	r24, 0x83	; 131
    bd60:	9b e0       	ldi	r25, 0x0B	; 11
    bd62:	0e 94 b2 4f 	call	0x9f64	; 0x9f64 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bd66:	df 91       	pop	r29
    bd68:	cf 91       	pop	r28
    bd6a:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    bd6c:	0c 94 f9 5c 	jmp	0xb9f2	; 0xb9f2 <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
    bd70:	82 30       	cpi	r24, 0x02	; 2
    bd72:	91 f4       	brne	.+36     	; 0xbd98 <update_splash+0x156>
	{
		game.demo_counter = 0;
    bd74:	10 92 ad 0b 	sts	0x0BAD, r1
    bd78:	10 92 ac 0b 	sts	0x0BAC, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bd7c:	24 e0       	ldi	r18, 0x04	; 4
    bd7e:	40 91 5c 0f 	lds	r20, 0x0F5C
    bd82:	60 91 ea 0b 	lds	r22, 0x0BEA
    bd86:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    bd8a:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bd8e:	df 91       	pop	r29
    bd90:	cf 91       	pop	r28
    bd92:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_host_net_game();
    bd94:	0c 94 7e 5d 	jmp	0xbafc	; 0xbafc <load_host_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
    bd98:	83 30       	cpi	r24, 0x03	; 3
    bd9a:	91 f4       	brne	.+36     	; 0xbdc0 <update_splash+0x17e>
	{
		game.demo_counter = 0;
    bd9c:	10 92 ad 0b 	sts	0x0BAD, r1
    bda0:	10 92 ac 0b 	sts	0x0BAC, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bda4:	24 e0       	ldi	r18, 0x04	; 4
    bda6:	40 91 5c 0f 	lds	r20, 0x0F5C
    bdaa:	60 91 ea 0b 	lds	r22, 0x0BEA
    bdae:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    bdb2:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bdb6:	df 91       	pop	r29
    bdb8:	cf 91       	pop	r28
    bdba:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_join_net_game();
    bdbc:	0c 94 ed 5d 	jmp	0xbbda	; 0xbbda <load_join_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    bdc0:	84 30       	cpi	r24, 0x04	; 4
    bdc2:	b1 f4       	brne	.+44     	; 0xbdf0 <update_splash+0x1ae>
	{
		game.demo_counter = 0;
    bdc4:	10 92 ad 0b 	sts	0x0BAD, r1
    bdc8:	10 92 ac 0b 	sts	0x0BAC, r1
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bdcc:	24 e0       	ldi	r18, 0x04	; 4
    bdce:	40 91 5c 0f 	lds	r20, 0x0F5C
    bdd2:	60 91 ea 0b 	lds	r22, 0x0BEA
    bdd6:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    bdda:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
		load_eeprom(&scores);
    bdde:	86 e5       	ldi	r24, 0x56	; 86
    bde0:	9b e0       	ldi	r25, 0x0B	; 11
    bde2:	0e 94 b2 4f 	call	0x9f64	; 0x9f64 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bde6:	df 91       	pop	r29
    bde8:	cf 91       	pop	r28
    bdea:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    bdec:	0c 94 72 5a 	jmp	0xb4e4	; 0xb4e4 <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    bdf0:	80 91 ac 0b 	lds	r24, 0x0BAC
    bdf4:	90 91 ad 0b 	lds	r25, 0x0BAD
    bdf8:	88 35       	cpi	r24, 0x58	; 88
    bdfa:	92 40       	sbci	r25, 0x02	; 2
    bdfc:	08 f4       	brcc	.+2      	; 0xbe00 <update_splash+0x1be>
    bdfe:	4c c0       	rjmp	.+152    	; 0xbe98 <update_splash+0x256>
	{
		game.demo_counter = 0;
    be00:	10 92 ad 0b 	sts	0x0BAD, r1
    be04:	10 92 ac 0b 	sts	0x0BAC, r1
		if (game.demo_choice % 2 == 0)
    be08:	80 91 ab 0b 	lds	r24, 0x0BAB
    be0c:	80 fd       	sbrc	r24, 0
    be0e:	2d c0       	rjmp	.+90     	; 0xbe6a <update_splash+0x228>
		{
			game.selection = CPUVCPU;
    be10:	86 e0       	ldi	r24, 0x06	; 6
    be12:	80 93 b6 0b 	sts	0x0BB6, r24
			player1.handle_id = 9;
    be16:	29 e0       	ldi	r18, 0x09	; 9
    be18:	20 93 e0 0b 	sts	0x0BE0, r18
			memcpy(player1.handle, &handles.data[9*3], 3);
    be1c:	80 91 a0 0b 	lds	r24, 0x0BA0
    be20:	90 91 a1 0b 	lds	r25, 0x0BA1
    be24:	a0 91 a2 0b 	lds	r26, 0x0BA2
    be28:	80 93 e1 0b 	sts	0x0BE1, r24
    be2c:	90 93 e2 0b 	sts	0x0BE2, r25
    be30:	a0 93 e3 0b 	sts	0x0BE3, r26
			player2.handle_id = 9;
    be34:	20 93 52 0f 	sts	0x0F52, r18
			memcpy(player2.handle, &handles.data[9*3], 3);
    be38:	80 93 53 0f 	sts	0x0F53, r24
    be3c:	90 93 54 0f 	sts	0x0F54, r25
    be40:	a0 93 55 0f 	sts	0x0F55, r26
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    be44:	24 e0       	ldi	r18, 0x04	; 4
    be46:	40 91 5c 0f 	lds	r20, 0x0F5C
    be4a:	60 91 ea 0b 	lds	r22, 0x0BEA
    be4e:	86 e0       	ldi	r24, 0x06	; 6
    be50:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
			clear_sprites();
    be54:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <clear_sprites>
			fade_through();
    be58:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
			level_transition(LBRandom(0, 10));
    be5c:	6a e0       	ldi	r22, 0x0A	; 10
    be5e:	80 e0       	ldi	r24, 0x00	; 0
    be60:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <LBRandom>
    be64:	0e 94 b5 58 	call	0xb16a	; 0xb16a <level_transition>
    be68:	11 c0       	rjmp	.+34     	; 0xbe8c <update_splash+0x24a>
		}
		else
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    be6a:	24 e0       	ldi	r18, 0x04	; 4
    be6c:	40 91 5c 0f 	lds	r20, 0x0F5C
    be70:	60 91 ea 0b 	lds	r22, 0x0BEA
    be74:	80 91 b6 0b 	lds	r24, 0x0BB6
    be78:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
			fade_through();
    be7c:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
			load_eeprom(&scores);
    be80:	86 e5       	ldi	r24, 0x56	; 86
    be82:	9b e0       	ldi	r25, 0x0B	; 11
    be84:	0e 94 b2 4f 	call	0x9f64	; 0x9f64 <load_eeprom>
			load_tank_rank();
    be88:	0e 94 72 5a 	call	0xb4e4	; 0xb4e4 <load_tank_rank>
		}
		game.demo_choice++;
    be8c:	80 91 ab 0b 	lds	r24, 0x0BAB
    be90:	8f 5f       	subi	r24, 0xFF	; 255
    be92:	80 93 ab 0b 	sts	0x0BAB, r24
		return;
    be96:	09 c0       	rjmp	.+18     	; 0xbeaa <update_splash+0x268>
		
	}
	game.demo_counter++;
    be98:	80 91 ac 0b 	lds	r24, 0x0BAC
    be9c:	90 91 ad 0b 	lds	r25, 0x0BAD
    bea0:	01 96       	adiw	r24, 0x01	; 1
    bea2:	90 93 ad 0b 	sts	0x0BAD, r25
    bea6:	80 93 ac 0b 	sts	0x0BAC, r24
#endif
}
    beaa:	df 91       	pop	r29
    beac:	cf 91       	pop	r28
    beae:	0f 91       	pop	r16
    beb0:	08 95       	ret

0000beb2 <update_join_net_game>:
	Print(9, 23, (char*) strCancelHandle);
	gameIdIndex = 2;
}

void update_join_net_game(JoyPadState* p1)
{
    beb2:	ef 92       	push	r14
    beb4:	ff 92       	push	r15
    beb6:	0f 93       	push	r16
    beb8:	cf 93       	push	r28
    beba:	df 93       	push	r29
    bebc:	7c 01       	movw	r14, r24
	MapSprite2(0, map_down_arrow, 0);
    bebe:	40 e0       	ldi	r20, 0x00	; 0
    bec0:	64 e4       	ldi	r22, 0x44	; 68
    bec2:	71 e3       	ldi	r23, 0x31	; 49
    bec4:	80 e0       	ldi	r24, 0x00	; 0
    bec6:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	MapSprite2(1, map_up_arrow, 0);
    beca:	40 e0       	ldi	r20, 0x00	; 0
    becc:	61 e4       	ldi	r22, 0x41	; 65
    bece:	71 e3       	ldi	r23, 0x31	; 49
    bed0:	81 e0       	ldi	r24, 0x01	; 1
    bed2:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	MoveSprite(0, 8*10 + gameIdIndex*8, 9*8, 1, 1);
    bed6:	60 91 03 01 	lds	r22, 0x0103
    beda:	66 0f       	add	r22, r22
    bedc:	66 0f       	add	r22, r22
    bede:	66 0f       	add	r22, r22
    bee0:	60 5b       	subi	r22, 0xB0	; 176
    bee2:	01 e0       	ldi	r16, 0x01	; 1
    bee4:	21 e0       	ldi	r18, 0x01	; 1
    bee6:	48 e4       	ldi	r20, 0x48	; 72
    bee8:	80 e0       	ldi	r24, 0x00	; 0
    beea:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
	MoveSprite(1, 8*10 + gameIdIndex*8, 11*8, 1, 1);
    beee:	60 91 03 01 	lds	r22, 0x0103
    bef2:	66 0f       	add	r22, r22
    bef4:	66 0f       	add	r22, r22
    bef6:	66 0f       	add	r22, r22
    bef8:	60 5b       	subi	r22, 0xB0	; 176
    befa:	21 e0       	ldi	r18, 0x01	; 1
    befc:	48 e5       	ldi	r20, 0x58	; 88
    befe:	81 e0       	ldi	r24, 0x01	; 1
    bf00:	0e 94 38 48 	call	0x9070	; 0x9070 <MoveSprite>
	LBPrintStr(10, 10, (u8*) gameId, 8);
    bf04:	28 e0       	ldi	r18, 0x08	; 8
    bf06:	44 e0       	ldi	r20, 0x04	; 4
    bf08:	51 e0       	ldi	r21, 0x01	; 1
    bf0a:	6a e0       	ldi	r22, 0x0A	; 10
    bf0c:	8a e0       	ldi	r24, 0x0A	; 10
    bf0e:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
		
	if (p1->pressed & BTN_X)
    bf12:	f7 01       	movw	r30, r14
    bf14:	c0 81       	ld	r28, Z
    bf16:	d1 81       	ldd	r29, Z+1	; 0x01
    bf18:	d1 ff       	sbrs	r29, 1
    bf1a:	12 c0       	rjmp	.+36     	; 0xbf40 <update_join_net_game+0x8e>
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bf1c:	24 e0       	ldi	r18, 0x04	; 4
    bf1e:	40 91 5c 0f 	lds	r20, 0x0F5C
    bf22:	60 91 ea 0b 	lds	r22, 0x0BEA
    bf26:	80 91 b6 0b 	lds	r24, 0x0BB6
    bf2a:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    bf2e:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
}
    bf32:	df 91       	pop	r29
    bf34:	cf 91       	pop	r28
    bf36:	0f 91       	pop	r16
    bf38:	ff 90       	pop	r15
    bf3a:	ef 90       	pop	r14
		
	if (p1->pressed & BTN_X)
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_splash();
    bf3c:	0c 94 1e 5a 	jmp	0xb43c	; 0xb43c <load_splash>
	}
	else if (select_pressed(p1))
    bf40:	c7 01       	movw	r24, r14
    bf42:	0e 94 68 5a 	call	0xb4d0	; 0xb4d0 <select_pressed>
    bf46:	88 23       	and	r24, r24
    bf48:	09 f4       	brne	.+2      	; 0xbf4c <update_join_net_game+0x9a>
    bf4a:	40 c0       	rjmp	.+128    	; 0xbfcc <update_join_net_game+0x11a>
	{
		Print(7, 18, (char*) strConnecting);
    bf4c:	40 e0       	ldi	r20, 0x00	; 0
    bf4e:	55 e0       	ldi	r21, 0x05	; 5
    bf50:	62 e1       	ldi	r22, 0x12	; 18
    bf52:	70 e0       	ldi	r23, 0x00	; 0
    bf54:	87 e0       	ldi	r24, 0x07	; 7
    bf56:	90 e0       	ldi	r25, 0x00	; 0
    bf58:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		if (joinNetGame((const char*)gameId) == WIFI_OK)
    bf5c:	84 e0       	ldi	r24, 0x04	; 4
    bf5e:	91 e0       	ldi	r25, 0x01	; 1
    bf60:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <joinNetGame>
    bf64:	81 11       	cpse	r24, r1
    bf66:	25 c0       	rjmp	.+74     	; 0xbfb2 <update_join_net_game+0x100>
		{
			netMessage.code = NETJOINED;
    bf68:	8b e0       	ldi	r24, 0x0B	; 11
    bf6a:	80 93 df 0f 	sts	0x0FDF, r24
			sendNetMessage(&netMessage);
    bf6e:	8f ed       	ldi	r24, 0xDF	; 223
    bf70:	9f e0       	ldi	r25, 0x0F	; 15
    bf72:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <sendNetMessage>
			game.demo_counter = 0;
    bf76:	10 92 ad 0b 	sts	0x0BAD, r1
    bf7a:	10 92 ac 0b 	sts	0x0BAC, r1
			p1s.select_state = SELECTING;
    bf7e:	10 92 00 10 	sts	0x1000, r1
			p2s.select_state = SELECTING;
    bf82:	10 92 82 0b 	sts	0x0B82, r1
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    bf86:	24 e0       	ldi	r18, 0x04	; 4
    bf88:	40 91 5c 0f 	lds	r20, 0x0F5C
    bf8c:	60 91 ea 0b 	lds	r22, 0x0BEA
    bf90:	80 91 b6 0b 	lds	r24, 0x0BB6
    bf94:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
			fade_through();
    bf98:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
			load_eeprom(&handles);
    bf9c:	83 e8       	ldi	r24, 0x83	; 131
    bf9e:	9b e0       	ldi	r25, 0x0B	; 11
    bfa0:	0e 94 b2 4f 	call	0x9f64	; 0x9f64 <load_eeprom>
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
}
    bfa4:	df 91       	pop	r29
    bfa6:	cf 91       	pop	r28
    bfa8:	0f 91       	pop	r16
    bfaa:	ff 90       	pop	r15
    bfac:	ef 90       	pop	r14
			p1s.select_state = SELECTING;
			p2s.select_state = SELECTING;
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			fade_through();
			load_eeprom(&handles);
			load_handle_select();
    bfae:	0c 94 f9 5c 	jmp	0xb9f2	; 0xb9f2 <load_handle_select>
		}
		else
		{
			Print(7, 18, (char*) strNetworkError);
    bfb2:	4f ed       	ldi	r20, 0xDF	; 223
    bfb4:	54 e0       	ldi	r21, 0x04	; 4
    bfb6:	62 e1       	ldi	r22, 0x12	; 18
    bfb8:	70 e0       	ldi	r23, 0x00	; 0
    bfba:	87 e0       	ldi	r24, 0x07	; 7
    bfbc:	90 e0       	ldi	r25, 0x00	; 0
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
}
    bfbe:	df 91       	pop	r29
    bfc0:	cf 91       	pop	r28
    bfc2:	0f 91       	pop	r16
    bfc4:	ff 90       	pop	r15
    bfc6:	ef 90       	pop	r14
			load_eeprom(&handles);
			load_handle_select();
		}
		else
		{
			Print(7, 18, (char*) strNetworkError);
    bfc8:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <Print>
		}
	}
	else if ((p1->pressed & BTN_UP))
    bfcc:	c4 ff       	sbrs	r28, 4
    bfce:	13 c0       	rjmp	.+38     	; 0xbff6 <update_join_net_game+0x144>
	{
		gameId[gameIdIndex]--;
    bfd0:	e0 91 03 01 	lds	r30, 0x0103
    bfd4:	f0 e0       	ldi	r31, 0x00	; 0
    bfd6:	ec 5f       	subi	r30, 0xFC	; 252
    bfd8:	fe 4f       	sbci	r31, 0xFE	; 254
    bfda:	80 81       	ld	r24, Z
		if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    bfdc:	95 ec       	ldi	r25, 0xC5	; 197
    bfde:	98 0f       	add	r25, r24
    bfe0:	97 30       	cpi	r25, 0x07	; 7
    bfe2:	10 f0       	brcs	.+4      	; 0xbfe8 <update_join_net_game+0x136>
			Print(7, 18, (char*) strNetworkError);
		}
	}
	else if ((p1->pressed & BTN_UP))
	{
		gameId[gameIdIndex]--;
    bfe4:	81 50       	subi	r24, 0x01	; 1
    bfe6:	01 c0       	rjmp	.+2      	; 0xbfea <update_join_net_game+0x138>
		if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    bfe8:	89 e3       	ldi	r24, 0x39	; 57
    bfea:	80 83       	st	Z, r24
		if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
    bfec:	80 81       	ld	r24, Z
    bfee:	80 33       	cpi	r24, 0x30	; 48
    bff0:	58 f5       	brcc	.+86     	; 0xc048 <update_join_net_game+0x196>
    bff2:	8a e5       	ldi	r24, 0x5A	; 90
    bff4:	14 c0       	rjmp	.+40     	; 0xc01e <update_join_net_game+0x16c>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_DOWN))
    bff6:	c5 ff       	sbrs	r28, 5
    bff8:	14 c0       	rjmp	.+40     	; 0xc022 <update_join_net_game+0x170>
	{
		gameId[gameIdIndex]++;
    bffa:	e0 91 03 01 	lds	r30, 0x0103
    bffe:	f0 e0       	ldi	r31, 0x00	; 0
    c000:	ec 5f       	subi	r30, 0xFC	; 252
    c002:	fe 4f       	sbci	r31, 0xFE	; 254
    c004:	80 81       	ld	r24, Z
		if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    c006:	97 ec       	ldi	r25, 0xC7	; 199
    c008:	98 0f       	add	r25, r24
    c00a:	97 30       	cpi	r25, 0x07	; 7
    c00c:	10 f0       	brcs	.+4      	; 0xc012 <update_join_net_game+0x160>
		if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_DOWN))
	{
		gameId[gameIdIndex]++;
    c00e:	8f 5f       	subi	r24, 0xFF	; 255
    c010:	01 c0       	rjmp	.+2      	; 0xc014 <update_join_net_game+0x162>
		if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    c012:	81 e4       	ldi	r24, 0x41	; 65
    c014:	80 83       	st	Z, r24
		if (gameId[gameIdIndex] > 'Z') gameId[gameIdIndex] = '0';
    c016:	80 81       	ld	r24, Z
    c018:	8b 35       	cpi	r24, 0x5B	; 91
    c01a:	b0 f0       	brcs	.+44     	; 0xc048 <update_join_net_game+0x196>
    c01c:	80 e3       	ldi	r24, 0x30	; 48
    c01e:	80 83       	st	Z, r24
    c020:	13 c0       	rjmp	.+38     	; 0xc048 <update_join_net_game+0x196>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_RIGHT))
    c022:	c7 ff       	sbrs	r28, 7
    c024:	07 c0       	rjmp	.+14     	; 0xc034 <update_join_net_game+0x182>
	{
		gameIdIndex++;
    c026:	80 91 03 01 	lds	r24, 0x0103
    c02a:	8f 5f       	subi	r24, 0xFF	; 255
		if (gameIdIndex > 7) gameIdIndex = 7;
    c02c:	88 30       	cpi	r24, 0x08	; 8
    c02e:	50 f0       	brcs	.+20     	; 0xc044 <update_join_net_game+0x192>
    c030:	87 e0       	ldi	r24, 0x07	; 7
    c032:	08 c0       	rjmp	.+16     	; 0xc044 <update_join_net_game+0x192>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
	}
	else if ((p1->pressed & BTN_LEFT))
    c034:	c6 ff       	sbrs	r28, 6
    c036:	16 c0       	rjmp	.+44     	; 0xc064 <update_join_net_game+0x1b2>
	{
		gameIdIndex--;
    c038:	80 91 03 01 	lds	r24, 0x0103
    c03c:	81 50       	subi	r24, 0x01	; 1
		if (gameIdIndex < 2) gameIdIndex= 2;
    c03e:	82 30       	cpi	r24, 0x02	; 2
    c040:	08 f4       	brcc	.+2      	; 0xc044 <update_join_net_game+0x192>
    c042:	82 e0       	ldi	r24, 0x02	; 2
    c044:	80 93 03 01 	sts	0x0103, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    c048:	24 e0       	ldi	r18, 0x04	; 4
    c04a:	40 91 5c 0f 	lds	r20, 0x0F5C
    c04e:	60 91 ea 0b 	lds	r22, 0x0BEA
    c052:	80 91 b6 0b 	lds	r24, 0x0BB6
	}
}
    c056:	df 91       	pop	r29
    c058:	cf 91       	pop	r28
    c05a:	0f 91       	pop	r16
    c05c:	ff 90       	pop	r15
    c05e:	ef 90       	pop	r14
	}
	else if ((p1->pressed & BTN_LEFT))
	{
		gameIdIndex--;
		if (gameIdIndex < 2) gameIdIndex= 2;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    c060:	0c 94 e9 4d 	jmp	0x9bd2	; 0x9bd2 <LBPlaySound>
	}
}
    c064:	df 91       	pop	r29
    c066:	cf 91       	pop	r28
    c068:	0f 91       	pop	r16
    c06a:	ff 90       	pop	r15
    c06c:	ef 90       	pop	r14
    c06e:	08 95       	ret

0000c070 <button_map>:
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    c070:	00 97       	sbiw	r24, 0x00	; 0
    c072:	41 f0       	breq	.+16     	; 0xc084 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    c074:	81 30       	cpi	r24, 0x01	; 1
    c076:	91 05       	cpc	r25, r1
    c078:	41 f0       	breq	.+16     	; 0xc08a <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    c07a:	82 30       	cpi	r24, 0x02	; 2
    c07c:	91 05       	cpc	r25, r1
    c07e:	41 f0       	breq	.+16     	; 0xc090 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    c080:	03 97       	sbiw	r24, 0x03	; 3
    c082:	49 f0       	breq	.+18     	; 0xc096 <button_map+0x26>
}
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    c084:	80 e1       	ldi	r24, 0x10	; 16
    c086:	90 e0       	ldi	r25, 0x00	; 0
    c088:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    c08a:	80 e2       	ldi	r24, 0x20	; 32
    c08c:	90 e0       	ldi	r25, 0x00	; 0
    c08e:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    c090:	80 e4       	ldi	r24, 0x40	; 64
    c092:	90 e0       	ldi	r25, 0x00	; 0
    c094:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    c096:	80 e8       	ldi	r24, 0x80	; 128
    c098:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    c09a:	08 95       	ret

0000c09c <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    c09c:	8f 92       	push	r8
    c09e:	9f 92       	push	r9
    c0a0:	af 92       	push	r10
    c0a2:	bf 92       	push	r11
    c0a4:	cf 92       	push	r12
    c0a6:	df 92       	push	r13
    c0a8:	ef 92       	push	r14
    c0aa:	ff 92       	push	r15
    c0ac:	0f 93       	push	r16
    c0ae:	1f 93       	push	r17
    c0b0:	cf 93       	push	r28
    c0b2:	df 93       	push	r29
    c0b4:	f8 2e       	mov	r15, r24
    c0b6:	e6 2e       	mov	r14, r22
    c0b8:	d4 2e       	mov	r13, r20
    c0ba:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    c0bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c0be:	88 23       	and	r24, r24
    c0c0:	09 f4       	brne	.+2      	; 0xc0c4 <crash_and_turn+0x28>
    c0c2:	a8 c0       	rjmp	.+336    	; 0xc214 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    c0c4:	f8 01       	movw	r30, r16
    c0c6:	c4 80       	ldd	r12, Z+4	; 0x04
    c0c8:	c4 fe       	sbrs	r12, 4
    c0ca:	23 c0       	rjmp	.+70     	; 0xc112 <crash_and_turn+0x76>
    c0cc:	fe e1       	ldi	r31, 0x1E	; 30
    c0ce:	6f 02       	muls	r22, r31
    c0d0:	40 01       	movw	r8, r0
    c0d2:	11 24       	eor	r1, r1
    c0d4:	af 2c       	mov	r10, r15
    c0d6:	bb 24       	eor	r11, r11
    c0d8:	a7 fc       	sbrc	r10, 7
    c0da:	b0 94       	com	r11
    c0dc:	c4 01       	movw	r24, r8
    c0de:	8a 0d       	add	r24, r10
    c0e0:	9b 1d       	adc	r25, r11
    c0e2:	01 97       	sbiw	r24, 0x01	; 1
    c0e4:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c0e8:	81 11       	cpse	r24, r1
    c0ea:	13 c0       	rjmp	.+38     	; 0xc112 <crash_and_turn+0x76>
    c0ec:	c4 01       	movw	r24, r8
    c0ee:	8a 0d       	add	r24, r10
    c0f0:	9b 1d       	adc	r25, r11
    c0f2:	4d 96       	adiw	r24, 0x1d	; 29
    c0f4:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c0f8:	81 11       	cpse	r24, r1
    c0fa:	0b c0       	rjmp	.+22     	; 0xc112 <crash_and_turn+0x76>
    c0fc:	c4 01       	movw	r24, r8
    c0fe:	8a 0d       	add	r24, r10
    c100:	9b 1d       	adc	r25, r11
    c102:	cb 96       	adiw	r24, 0x3b	; 59
    c104:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c108:	81 11       	cpse	r24, r1
    c10a:	03 c0       	rjmp	.+6      	; 0xc112 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    c10c:	80 e4       	ldi	r24, 0x40	; 64
    c10e:	90 e0       	ldi	r25, 0x00	; 0
    c110:	6f c0       	rjmp	.+222    	; 0xc1f0 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    c112:	c6 fe       	sbrs	r12, 6
    c114:	23 c0       	rjmp	.+70     	; 0xc15c <crash_and_turn+0xc0>
    c116:	8e 2d       	mov	r24, r14
    c118:	99 27       	eor	r25, r25
    c11a:	87 fd       	sbrc	r24, 7
    c11c:	90 95       	com	r25
    c11e:	02 96       	adiw	r24, 0x02	; 2
    c120:	2e e1       	ldi	r18, 0x1E	; 30
    c122:	28 9f       	mul	r18, r24
    c124:	50 01       	movw	r10, r0
    c126:	29 9f       	mul	r18, r25
    c128:	b0 0c       	add	r11, r0
    c12a:	11 24       	eor	r1, r1
    c12c:	af 0c       	add	r10, r15
    c12e:	b1 1c       	adc	r11, r1
    c130:	f7 fc       	sbrc	r15, 7
    c132:	ba 94       	dec	r11
    c134:	c5 01       	movw	r24, r10
    c136:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c13a:	81 11       	cpse	r24, r1
    c13c:	0f c0       	rjmp	.+30     	; 0xc15c <crash_and_turn+0xc0>
    c13e:	c5 01       	movw	r24, r10
    c140:	01 96       	adiw	r24, 0x01	; 1
    c142:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c146:	81 11       	cpse	r24, r1
    c148:	09 c0       	rjmp	.+18     	; 0xc15c <crash_and_turn+0xc0>
    c14a:	c5 01       	movw	r24, r10
    c14c:	02 96       	adiw	r24, 0x02	; 2
    c14e:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c152:	81 11       	cpse	r24, r1
    c154:	03 c0       	rjmp	.+6      	; 0xc15c <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    c156:	80 e2       	ldi	r24, 0x20	; 32
    c158:	90 e0       	ldi	r25, 0x00	; 0
    c15a:	4a c0       	rjmp	.+148    	; 0xc1f0 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    c15c:	c5 fe       	sbrs	r12, 5
    c15e:	24 c0       	rjmp	.+72     	; 0xc1a8 <crash_and_turn+0x10c>
    c160:	fe 2d       	mov	r31, r14
    c162:	8e e1       	ldi	r24, 0x1E	; 30
    c164:	f8 02       	muls	r31, r24
    c166:	40 01       	movw	r8, r0
    c168:	11 24       	eor	r1, r1
    c16a:	af 2c       	mov	r10, r15
    c16c:	bb 24       	eor	r11, r11
    c16e:	a7 fc       	sbrc	r10, 7
    c170:	b0 94       	com	r11
    c172:	c4 01       	movw	r24, r8
    c174:	8a 0d       	add	r24, r10
    c176:	9b 1d       	adc	r25, r11
    c178:	02 96       	adiw	r24, 0x02	; 2
    c17a:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c17e:	81 11       	cpse	r24, r1
    c180:	13 c0       	rjmp	.+38     	; 0xc1a8 <crash_and_turn+0x10c>
    c182:	c4 01       	movw	r24, r8
    c184:	8a 0d       	add	r24, r10
    c186:	9b 1d       	adc	r25, r11
    c188:	80 96       	adiw	r24, 0x20	; 32
    c18a:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c18e:	81 11       	cpse	r24, r1
    c190:	0b c0       	rjmp	.+22     	; 0xc1a8 <crash_and_turn+0x10c>
    c192:	c4 01       	movw	r24, r8
    c194:	8a 0d       	add	r24, r10
    c196:	9b 1d       	adc	r25, r11
    c198:	ce 96       	adiw	r24, 0x3e	; 62
    c19a:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c19e:	81 11       	cpse	r24, r1
    c1a0:	03 c0       	rjmp	.+6      	; 0xc1a8 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    c1a2:	80 e8       	ldi	r24, 0x80	; 128
    c1a4:	90 e0       	ldi	r25, 0x00	; 0
    c1a6:	24 c0       	rjmp	.+72     	; 0xc1f0 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    c1a8:	c7 fe       	sbrs	r12, 7
    c1aa:	29 c0       	rjmp	.+82     	; 0xc1fe <crash_and_turn+0x162>
    c1ac:	8e 2d       	mov	r24, r14
    c1ae:	99 27       	eor	r25, r25
    c1b0:	87 fd       	sbrc	r24, 7
    c1b2:	90 95       	com	r25
    c1b4:	01 97       	sbiw	r24, 0x01	; 1
    c1b6:	2e e1       	ldi	r18, 0x1E	; 30
    c1b8:	28 9f       	mul	r18, r24
    c1ba:	50 01       	movw	r10, r0
    c1bc:	29 9f       	mul	r18, r25
    c1be:	b0 0c       	add	r11, r0
    c1c0:	11 24       	eor	r1, r1
    c1c2:	af 0c       	add	r10, r15
    c1c4:	b1 1c       	adc	r11, r1
    c1c6:	f7 fc       	sbrc	r15, 7
    c1c8:	ba 94       	dec	r11
    c1ca:	c5 01       	movw	r24, r10
    c1cc:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c1d0:	81 11       	cpse	r24, r1
    c1d2:	15 c0       	rjmp	.+42     	; 0xc1fe <crash_and_turn+0x162>
    c1d4:	c5 01       	movw	r24, r10
    c1d6:	01 96       	adiw	r24, 0x01	; 1
    c1d8:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c1dc:	81 11       	cpse	r24, r1
    c1de:	0f c0       	rjmp	.+30     	; 0xc1fe <crash_and_turn+0x162>
    c1e0:	c5 01       	movw	r24, r10
    c1e2:	02 96       	adiw	r24, 0x02	; 2
    c1e4:	0e 94 c0 53 	call	0xa780	; 0xa780 <solid_tile>
    c1e8:	81 11       	cpse	r24, r1
    c1ea:	09 c0       	rjmp	.+18     	; 0xc1fe <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    c1ec:	80 e1       	ldi	r24, 0x10	; 16
    c1ee:	90 e0       	ldi	r25, 0x00	; 0
    c1f0:	f8 01       	movw	r30, r16
    c1f2:	95 83       	std	Z+5, r25	; 0x05
    c1f4:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    c1f6:	ce 01       	movw	r24, r28
    c1f8:	0e 94 08 53 	call	0xa610	; 0xa610 <recoil_sprite>
			recoiled = 0;
    c1fc:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    c1fe:	f8 01       	movw	r30, r16
    c200:	24 81       	ldd	r18, Z+4	; 0x04
    c202:	35 81       	ldd	r19, Z+5	; 0x05
    c204:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c206:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c208:	82 23       	and	r24, r18
    c20a:	93 23       	and	r25, r19
    c20c:	89 2b       	or	r24, r25
    c20e:	11 f0       	breq	.+4      	; 0xc214 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    c210:	1a 8e       	std	Y+26, r1	; 0x1a
    c212:	1c c0       	rjmp	.+56     	; 0xc24c <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    c214:	dd 20       	and	r13, r13
    c216:	d1 f0       	breq	.+52     	; 0xc24c <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    c218:	f8 01       	movw	r30, r16
    c21a:	84 81       	ldd	r24, Z+4	; 0x04
    c21c:	86 ff       	sbrs	r24, 6
    c21e:	03 c0       	rjmp	.+6      	; 0xc226 <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    c220:	80 e1       	ldi	r24, 0x10	; 16
    c222:	90 e0       	ldi	r25, 0x00	; 0
    c224:	0f c0       	rjmp	.+30     	; 0xc244 <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    c226:	84 ff       	sbrs	r24, 4
    c228:	03 c0       	rjmp	.+6      	; 0xc230 <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    c22a:	80 e8       	ldi	r24, 0x80	; 128
    c22c:	90 e0       	ldi	r25, 0x00	; 0
    c22e:	09 c0       	rjmp	.+18     	; 0xc242 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    c230:	87 ff       	sbrs	r24, 7
    c232:	03 c0       	rjmp	.+6      	; 0xc23a <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    c234:	80 e2       	ldi	r24, 0x20	; 32
    c236:	90 e0       	ldi	r25, 0x00	; 0
    c238:	04 c0       	rjmp	.+8      	; 0xc242 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    c23a:	85 ff       	sbrs	r24, 5
    c23c:	07 c0       	rjmp	.+14     	; 0xc24c <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    c23e:	80 e4       	ldi	r24, 0x40	; 64
    c240:	90 e0       	ldi	r25, 0x00	; 0
    c242:	f8 01       	movw	r30, r16
    c244:	95 83       	std	Z+5, r25	; 0x05
    c246:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    c248:	81 e0       	ldi	r24, 0x01	; 1
    c24a:	8a 8f       	std	Y+26, r24	; 0x1a
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c24c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c24e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c250:	80 31       	cpi	r24, 0x10	; 16
    c252:	91 05       	cpc	r25, r1
    c254:	19 f0       	breq	.+6      	; 0xc25c <crash_and_turn+0x1c0>
    c256:	80 32       	cpi	r24, 0x20	; 32
    c258:	91 05       	cpc	r25, r1
    c25a:	19 f4       	brne	.+6      	; 0xc262 <crash_and_turn+0x1c6>
    c25c:	2b a1       	ldd	r18, Y+35	; 0x23
    c25e:	e2 16       	cp	r14, r18
    c260:	59 f0       	breq	.+22     	; 0xc278 <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    c262:	80 34       	cpi	r24, 0x40	; 64
    c264:	91 05       	cpc	r25, r1
    c266:	19 f0       	breq	.+6      	; 0xc26e <crash_and_turn+0x1d2>
    c268:	80 38       	cpi	r24, 0x80	; 128
    c26a:	91 05       	cpc	r25, r1
    c26c:	39 f4       	brne	.+14     	; 0xc27c <crash_and_turn+0x1e0>
    c26e:	81 e0       	ldi	r24, 0x01	; 1
    c270:	9b a1       	ldd	r25, Y+35	; 0x23
    c272:	f9 12       	cpse	r15, r25
    c274:	03 c0       	rjmp	.+6      	; 0xc27c <crash_and_turn+0x1e0>
    c276:	03 c0       	rjmp	.+6      	; 0xc27e <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c278:	81 e0       	ldi	r24, 0x01	; 1
    c27a:	01 c0       	rjmp	.+2      	; 0xc27e <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    c27c:	80 e0       	ldi	r24, 0x00	; 0
}
    c27e:	df 91       	pop	r29
    c280:	cf 91       	pop	r28
    c282:	1f 91       	pop	r17
    c284:	0f 91       	pop	r16
    c286:	ff 90       	pop	r15
    c288:	ef 90       	pop	r14
    c28a:	df 90       	pop	r13
    c28c:	cf 90       	pop	r12
    c28e:	bf 90       	pop	r11
    c290:	af 90       	pop	r10
    c292:	9f 90       	pop	r9
    c294:	8f 90       	pop	r8
    c296:	08 95       	ret

0000c298 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    c298:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    c29a:	26 2f       	mov	r18, r22
    c29c:	33 27       	eor	r19, r19
    c29e:	27 fd       	sbrc	r18, 7
    c2a0:	30 95       	com	r19
    c2a2:	37 ff       	sbrs	r19, 7
    c2a4:	03 c0       	rjmp	.+6      	; 0xc2ac <get_cpu_goal_direction+0x14>
    c2a6:	31 95       	neg	r19
    c2a8:	21 95       	neg	r18
    c2aa:	31 09       	sbc	r19, r1
    c2ac:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    c2ae:	24 2f       	mov	r18, r20
    c2b0:	33 27       	eor	r19, r19
    c2b2:	27 fd       	sbrc	r18, 7
    c2b4:	30 95       	com	r19
    c2b6:	37 ff       	sbrs	r19, 7
    c2b8:	03 c0       	rjmp	.+6      	; 0xc2c0 <get_cpu_goal_direction+0x28>
    c2ba:	31 95       	neg	r19
    c2bc:	21 95       	neg	r18
    c2be:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    c2c0:	83 8d       	ldd	r24, Z+27	; 0x1b
    c2c2:	81 11       	cpse	r24, r1
    c2c4:	08 c0       	rjmp	.+16     	; 0xc2d6 <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    c2c6:	29 17       	cp	r18, r25
    c2c8:	1c f4       	brge	.+6      	; 0xc2d0 <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    c2ca:	16 16       	cp	r1, r22
    c2cc:	94 f0       	brlt	.+36     	; 0xc2f2 <get_cpu_goal_direction+0x5a>
    c2ce:	0b c0       	rjmp	.+22     	; 0xc2e6 <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    c2d0:	14 16       	cp	r1, r20
    c2d2:	94 f0       	brlt	.+36     	; 0xc2f8 <get_cpu_goal_direction+0x60>
    c2d4:	0b c0       	rjmp	.+22     	; 0xc2ec <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    c2d6:	29 17       	cp	r18, r25
    c2d8:	1c f4       	brge	.+6      	; 0xc2e0 <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    c2da:	16 16       	cp	r1, r22
    c2dc:	24 f0       	brlt	.+8      	; 0xc2e6 <get_cpu_goal_direction+0x4e>
    c2de:	09 c0       	rjmp	.+18     	; 0xc2f2 <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    c2e0:	14 16       	cp	r1, r20
    c2e2:	24 f0       	brlt	.+8      	; 0xc2ec <get_cpu_goal_direction+0x54>
    c2e4:	09 c0       	rjmp	.+18     	; 0xc2f8 <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    c2e6:	80 e4       	ldi	r24, 0x40	; 64
    c2e8:	90 e0       	ldi	r25, 0x00	; 0
    c2ea:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    c2ec:	80 e1       	ldi	r24, 0x10	; 16
    c2ee:	90 e0       	ldi	r25, 0x00	; 0
    c2f0:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    c2f2:	80 e8       	ldi	r24, 0x80	; 128
    c2f4:	90 e0       	ldi	r25, 0x00	; 0
    c2f6:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    c2f8:	80 e2       	ldi	r24, 0x20	; 32
    c2fa:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    c2fc:	08 95       	ret

0000c2fe <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    c2fe:	2f 92       	push	r2
    c300:	3f 92       	push	r3
    c302:	4f 92       	push	r4
    c304:	5f 92       	push	r5
    c306:	7f 92       	push	r7
    c308:	8f 92       	push	r8
    c30a:	9f 92       	push	r9
    c30c:	af 92       	push	r10
    c30e:	bf 92       	push	r11
    c310:	cf 92       	push	r12
    c312:	df 92       	push	r13
    c314:	ef 92       	push	r14
    c316:	ff 92       	push	r15
    c318:	0f 93       	push	r16
    c31a:	1f 93       	push	r17
    c31c:	cf 93       	push	r28
    c31e:	df 93       	push	r29
    c320:	cd b7       	in	r28, 0x3d	; 61
    c322:	de b7       	in	r29, 0x3e	; 62
    c324:	2a 97       	sbiw	r28, 0x0a	; 10
    c326:	0f b6       	in	r0, 0x3f	; 63
    c328:	f8 94       	cli
    c32a:	de bf       	out	0x3e, r29	; 62
    c32c:	0f be       	out	0x3f, r0	; 63
    c32e:	cd bf       	out	0x3d, r28	; 61
    c330:	9c 01       	movw	r18, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    c332:	db 01       	movw	r26, r22
    c334:	13 96       	adiw	r26, 0x03	; 3
    c336:	8d 91       	ld	r24, X+
    c338:	9d 91       	ld	r25, X+
    c33a:	0d 90       	ld	r0, X+
    c33c:	bc 91       	ld	r27, X
    c33e:	a0 2d       	mov	r26, r0
    c340:	89 83       	std	Y+1, r24	; 0x01
    c342:	9a 83       	std	Y+2, r25	; 0x02
    c344:	ab 83       	std	Y+3, r26	; 0x03
    c346:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    c348:	fb 01       	movw	r30, r22
    c34a:	87 80       	ldd	r8, Z+7	; 0x07
    c34c:	90 84       	ldd	r9, Z+8	; 0x08
    c34e:	a1 84       	ldd	r10, Z+9	; 0x09
    c350:	b2 84       	ldd	r11, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    c352:	d9 01       	movw	r26, r18
    c354:	13 96       	adiw	r26, 0x03	; 3
    c356:	cd 90       	ld	r12, X+
    c358:	dd 90       	ld	r13, X+
    c35a:	ed 90       	ld	r14, X+
    c35c:	fc 90       	ld	r15, X
    c35e:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    c360:	17 96       	adiw	r26, 0x07	; 7
    c362:	8d 91       	ld	r24, X+
    c364:	9d 91       	ld	r25, X+
    c366:	0d 90       	ld	r0, X+
    c368:	bc 91       	ld	r27, X
    c36a:	a0 2d       	mov	r26, r0
    c36c:	8d 83       	std	Y+5, r24	; 0x05
    c36e:	9e 83       	std	Y+6, r25	; 0x06
    c370:	af 83       	std	Y+7, r26	; 0x07
    c372:	b8 87       	std	Y+8, r27	; 0x08
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    c374:	f9 01       	movw	r30, r18
    c376:	86 89       	ldd	r24, Z+22	; 0x16
    c378:	81 11       	cpse	r24, r1
    c37a:	06 c0       	rjmp	.+12     	; 0xc388 <get_cpu_joypad_state+0x8a>
	{
		p->held = 0;
    c37c:	da 01       	movw	r26, r20
    c37e:	15 96       	adiw	r26, 0x05	; 5
    c380:	1c 92       	st	X, r1
    c382:	1e 92       	st	-X, r1
    c384:	14 97       	sbiw	r26, 0x04	; 4
		return;
    c386:	57 c2       	rjmp	.+1198   	; 0xc836 <get_cpu_joypad_state+0x538>
    c388:	2a 01       	movw	r4, r20
    c38a:	1b 01       	movw	r2, r22
    c38c:	3a 87       	std	Y+10, r19	; 0x0a
    c38e:	29 87       	std	Y+9, r18	; 0x09
	}
	
	// Shot
	if (shoot_pressed(p))
    c390:	ca 01       	movw	r24, r20
    c392:	0e 94 65 51 	call	0xa2ca	; 0xa2ca <shoot_pressed>
    c396:	88 23       	and	r24, r24
    c398:	19 f0       	breq	.+6      	; 0xc3a0 <get_cpu_joypad_state+0xa2>
	{
		p->pressed = 0;
    c39a:	f2 01       	movw	r30, r4
    c39c:	11 82       	std	Z+1, r1	; 0x01
    c39e:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    c3a0:	20 91 01 01 	lds	r18, 0x0101
    c3a4:	30 91 02 01 	lds	r19, 0x0102
    c3a8:	c9 01       	movw	r24, r18
    c3aa:	6a e0       	ldi	r22, 0x0A	; 10
    c3ac:	70 e0       	ldi	r23, 0x00	; 0
    c3ae:	0e 94 25 72 	call	0xe44a	; 0xe44a <__udivmodhi4>
    c3b2:	89 2b       	or	r24, r25
    c3b4:	59 f4       	brne	.+22     	; 0xc3cc <get_cpu_joypad_state+0xce>
    c3b6:	a9 85       	ldd	r26, Y+9	; 0x09
    c3b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    c3ba:	56 96       	adiw	r26, 0x16	; 22
    c3bc:	8c 91       	ld	r24, X
    c3be:	83 33       	cpi	r24, 0x33	; 51
    c3c0:	28 f0       	brcs	.+10     	; 0xc3cc <get_cpu_joypad_state+0xce>
	{
		p->pressed = BTN_B;
    c3c2:	81 e0       	ldi	r24, 0x01	; 1
    c3c4:	90 e0       	ldi	r25, 0x00	; 0
    c3c6:	f2 01       	movw	r30, r4
    c3c8:	91 83       	std	Z+1, r25	; 0x01
    c3ca:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    c3cc:	c9 01       	movw	r24, r18
    c3ce:	64 eb       	ldi	r22, 0xB4	; 180
    c3d0:	70 e0       	ldi	r23, 0x00	; 0
    c3d2:	0e 94 25 72 	call	0xe44a	; 0xe44a <__udivmodhi4>
    c3d6:	89 2b       	or	r24, r25
    c3d8:	61 f0       	breq	.+24     	; 0xc3f2 <get_cpu_joypad_state+0xf4>
    c3da:	a9 85       	ldd	r26, Y+9	; 0x09
    c3dc:	ba 85       	ldd	r27, Y+10	; 0x0a
    c3de:	56 96       	adiw	r26, 0x16	; 22
    c3e0:	8c 91       	ld	r24, X
    c3e2:	56 97       	sbiw	r26, 0x16	; 22
    c3e4:	8a 30       	cpi	r24, 0x0A	; 10
    c3e6:	29 f0       	breq	.+10     	; 0xc3f2 <get_cpu_joypad_state+0xf4>
    c3e8:	94 96       	adiw	r26, 0x24	; 36
    c3ea:	8c 91       	ld	r24, X
    c3ec:	88 23       	and	r24, r24
    c3ee:	09 f4       	brne	.+2      	; 0xc3f2 <get_cpu_joypad_state+0xf4>
    c3f0:	7e c0       	rjmp	.+252    	; 0xc4ee <get_cpu_joypad_state+0x1f0>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    c3f2:	20 e0       	ldi	r18, 0x00	; 0
    c3f4:	30 e0       	ldi	r19, 0x00	; 0
    c3f6:	40 e0       	ldi	r20, 0x00	; 0
    c3f8:	5e e3       	ldi	r21, 0x3E	; 62
    c3fa:	69 81       	ldd	r22, Y+1	; 0x01
    c3fc:	7a 81       	ldd	r23, Y+2	; 0x02
    c3fe:	8b 81       	ldd	r24, Y+3	; 0x03
    c400:	9c 81       	ldd	r25, Y+4	; 0x04
    c402:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    c406:	0e 94 1e 73 	call	0xe63c	; 0xe63c <__fixsfsi>
    c40a:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    c40c:	20 e0       	ldi	r18, 0x00	; 0
    c40e:	30 e0       	ldi	r19, 0x00	; 0
    c410:	40 e0       	ldi	r20, 0x00	; 0
    c412:	5e e3       	ldi	r21, 0x3E	; 62
    c414:	c5 01       	movw	r24, r10
    c416:	b4 01       	movw	r22, r8
    c418:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    c41c:	20 e0       	ldi	r18, 0x00	; 0
    c41e:	30 e0       	ldi	r19, 0x00	; 0
    c420:	40 e4       	ldi	r20, 0x40	; 64
    c422:	50 e4       	ldi	r21, 0x40	; 64
    c424:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    c428:	0e 94 1e 73 	call	0xe63c	; 0xe63c <__fixsfsi>
    c42c:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    c42e:	20 e0       	ldi	r18, 0x00	; 0
    c430:	30 e0       	ldi	r19, 0x00	; 0
    c432:	40 e0       	ldi	r20, 0x00	; 0
    c434:	5e e3       	ldi	r21, 0x3E	; 62
    c436:	c7 01       	movw	r24, r14
    c438:	b6 01       	movw	r22, r12
    c43a:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    c43e:	0e 94 1e 73 	call	0xe63c	; 0xe63c <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    c442:	f7 2c       	mov	r15, r7
    c444:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    c446:	20 e0       	ldi	r18, 0x00	; 0
    c448:	30 e0       	ldi	r19, 0x00	; 0
    c44a:	40 e0       	ldi	r20, 0x00	; 0
    c44c:	5e e3       	ldi	r21, 0x3E	; 62
    c44e:	6d 81       	ldd	r22, Y+5	; 0x05
    c450:	7e 81       	ldd	r23, Y+6	; 0x06
    c452:	8f 81       	ldd	r24, Y+7	; 0x07
    c454:	98 85       	ldd	r25, Y+8	; 0x08
    c456:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    c45a:	20 e0       	ldi	r18, 0x00	; 0
    c45c:	30 e0       	ldi	r19, 0x00	; 0
    c45e:	40 e4       	ldi	r20, 0x40	; 64
    c460:	50 e4       	ldi	r21, 0x40	; 64
    c462:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    c466:	0e 94 1e 73 	call	0xe63c	; 0xe63c <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    c46a:	4b 2d       	mov	r20, r11
    c46c:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    c46e:	e9 85       	ldd	r30, Y+9	; 0x09
    c470:	fa 85       	ldd	r31, Y+10	; 0x0a
    c472:	14 a2       	std	Z+36, r1	; 0x24
		player->feeling_my_way = 0;
    c474:	12 8e       	std	Z+26, r1	; 0x1a
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    c476:	82 e0       	ldi	r24, 0x02	; 2
    c478:	8f 0d       	add	r24, r15
    c47a:	85 30       	cpi	r24, 0x05	; 5
    c47c:	c8 f4       	brcc	.+50     	; 0xc4b0 <get_cpu_joypad_state+0x1b2>
    c47e:	4e 3f       	cpi	r20, 0xFE	; 254
    c480:	bc f0       	brlt	.+46     	; 0xc4b0 <get_cpu_joypad_state+0x1b2>
    c482:	43 30       	cpi	r20, 0x03	; 3
    c484:	ac f4       	brge	.+42     	; 0xc4b0 <get_cpu_joypad_state+0x1b2>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    c486:	64 e0       	ldi	r22, 0x04	; 4
    c488:	80 e0       	ldi	r24, 0x00	; 0
    c48a:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <LBRandom>
    c48e:	90 e0       	ldi	r25, 0x00	; 0
    c490:	0e 94 38 60 	call	0xc070	; 0xc070 <button_map>
    c494:	a9 85       	ldd	r26, Y+9	; 0x09
    c496:	ba 85       	ldd	r27, Y+10	; 0x0a
    c498:	5e 96       	adiw	r26, 0x1e	; 30
    c49a:	9c 93       	st	X, r25
    c49c:	8e 93       	st	-X, r24
    c49e:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = LBRandom(5, 18);
    c4a0:	62 e1       	ldi	r22, 0x12	; 18
    c4a2:	85 e0       	ldi	r24, 0x05	; 5
    c4a4:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <LBRandom>
    c4a8:	e9 85       	ldd	r30, Y+9	; 0x09
    c4aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    c4ac:	83 a3       	std	Z+35, r24	; 0x23
    c4ae:	16 c0       	rjmp	.+44     	; 0xc4dc <get_cpu_joypad_state+0x1de>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    c4b0:	6f 2d       	mov	r22, r15
    c4b2:	89 85       	ldd	r24, Y+9	; 0x09
    c4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    c4b6:	0e 94 4c 61 	call	0xc298	; 0xc298 <get_cpu_goal_direction>
    c4ba:	a9 85       	ldd	r26, Y+9	; 0x09
    c4bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    c4be:	5e 96       	adiw	r26, 0x1e	; 30
    c4c0:	9c 93       	st	X, r25
    c4c2:	8e 93       	st	-X, r24
    c4c4:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c4c6:	80 31       	cpi	r24, 0x10	; 16
    c4c8:	91 05       	cpc	r25, r1
    c4ca:	29 f0       	breq	.+10     	; 0xc4d6 <get_cpu_joypad_state+0x1d8>
    c4cc:	80 97       	sbiw	r24, 0x20	; 32
    c4ce:	19 f0       	breq	.+6      	; 0xc4d6 <get_cpu_joypad_state+0x1d8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
    c4d0:	93 96       	adiw	r26, 0x23	; 35
    c4d2:	7c 92       	st	X, r7
    c4d4:	03 c0       	rjmp	.+6      	; 0xc4dc <get_cpu_joypad_state+0x1de>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c4d6:	e9 85       	ldd	r30, Y+9	; 0x09
    c4d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    c4da:	b3 a2       	std	Z+35, r11	; 0x23
		}
		p->held = player->goal_direction;
    c4dc:	a9 85       	ldd	r26, Y+9	; 0x09
    c4de:	ba 85       	ldd	r27, Y+10	; 0x0a
    c4e0:	5d 96       	adiw	r26, 0x1d	; 29
    c4e2:	8d 91       	ld	r24, X+
    c4e4:	9c 91       	ld	r25, X
    c4e6:	5e 97       	sbiw	r26, 0x1e	; 30
    c4e8:	f2 01       	movw	r30, r4
    c4ea:	95 83       	std	Z+5, r25	; 0x05
    c4ec:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    c4ee:	a9 85       	ldd	r26, Y+9	; 0x09
    c4f0:	ba 85       	ldd	r27, Y+10	; 0x0a
    c4f2:	13 96       	adiw	r26, 0x03	; 3
    c4f4:	cd 90       	ld	r12, X+
    c4f6:	dd 90       	ld	r13, X+
    c4f8:	ed 90       	ld	r14, X+
    c4fa:	fc 90       	ld	r15, X
    c4fc:	16 97       	sbiw	r26, 0x06	; 6
    c4fe:	98 96       	adiw	r26, 0x28	; 40
    c500:	2d 91       	ld	r18, X+
    c502:	3d 91       	ld	r19, X+
    c504:	4d 91       	ld	r20, X+
    c506:	5c 91       	ld	r21, X
    c508:	9b 97       	sbiw	r26, 0x2b	; 43
    c50a:	c7 01       	movw	r24, r14
    c50c:	b6 01       	movw	r22, r12
    c50e:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    c512:	88 23       	and	r24, r24
    c514:	29 f0       	breq	.+10     	; 0xc520 <get_cpu_joypad_state+0x222>
		player->deadlock_count_x = 0;
    c516:	e9 85       	ldd	r30, Y+9	; 0x09
    c518:	fa 85       	ldd	r31, Y+10	; 0x0a
    c51a:	10 a2       	std	Z+32, r1	; 0x20
    c51c:	17 8e       	std	Z+31, r1	; 0x1f
    c51e:	0b c0       	rjmp	.+22     	; 0xc536 <get_cpu_joypad_state+0x238>
	else 
		player->deadlock_count_x++;
    c520:	a9 85       	ldd	r26, Y+9	; 0x09
    c522:	ba 85       	ldd	r27, Y+10	; 0x0a
    c524:	5f 96       	adiw	r26, 0x1f	; 31
    c526:	8d 91       	ld	r24, X+
    c528:	9c 91       	ld	r25, X
    c52a:	90 97       	sbiw	r26, 0x20	; 32
    c52c:	01 96       	adiw	r24, 0x01	; 1
    c52e:	90 96       	adiw	r26, 0x20	; 32
    c530:	9c 93       	st	X, r25
    c532:	8e 93       	st	-X, r24
    c534:	5f 97       	sbiw	r26, 0x1f	; 31
	if (player->shared.y != player->old_y)
    c536:	e9 85       	ldd	r30, Y+9	; 0x09
    c538:	fa 85       	ldd	r31, Y+10	; 0x0a
    c53a:	87 80       	ldd	r8, Z+7	; 0x07
    c53c:	90 84       	ldd	r9, Z+8	; 0x08
    c53e:	a1 84       	ldd	r10, Z+9	; 0x09
    c540:	b2 84       	ldd	r11, Z+10	; 0x0a
    c542:	24 a5       	ldd	r18, Z+44	; 0x2c
    c544:	35 a5       	ldd	r19, Z+45	; 0x2d
    c546:	46 a5       	ldd	r20, Z+46	; 0x2e
    c548:	57 a5       	ldd	r21, Z+47	; 0x2f
    c54a:	c5 01       	movw	r24, r10
    c54c:	b4 01       	movw	r22, r8
    c54e:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    c552:	88 23       	and	r24, r24
    c554:	39 f0       	breq	.+14     	; 0xc564 <get_cpu_joypad_state+0x266>
		player->deadlock_count_y = 0;
    c556:	a9 85       	ldd	r26, Y+9	; 0x09
    c558:	ba 85       	ldd	r27, Y+10	; 0x0a
    c55a:	92 96       	adiw	r26, 0x22	; 34
    c55c:	1c 92       	st	X, r1
    c55e:	1e 92       	st	-X, r1
    c560:	91 97       	sbiw	r26, 0x21	; 33
    c562:	07 c0       	rjmp	.+14     	; 0xc572 <get_cpu_joypad_state+0x274>
	else
		player->deadlock_count_y++;
    c564:	e9 85       	ldd	r30, Y+9	; 0x09
    c566:	fa 85       	ldd	r31, Y+10	; 0x0a
    c568:	81 a1       	ldd	r24, Z+33	; 0x21
    c56a:	92 a1       	ldd	r25, Z+34	; 0x22
    c56c:	01 96       	adiw	r24, 0x01	; 1
    c56e:	92 a3       	std	Z+34, r25	; 0x22
    c570:	81 a3       	std	Z+33, r24	; 0x21
	player->old_x = player->shared.x;
    c572:	a9 85       	ldd	r26, Y+9	; 0x09
    c574:	ba 85       	ldd	r27, Y+10	; 0x0a
    c576:	98 96       	adiw	r26, 0x28	; 40
    c578:	cd 92       	st	X+, r12
    c57a:	dd 92       	st	X+, r13
    c57c:	ed 92       	st	X+, r14
    c57e:	fc 92       	st	X, r15
    c580:	9b 97       	sbiw	r26, 0x2b	; 43
	player->old_y = player->shared.y;
    c582:	fd 01       	movw	r30, r26
    c584:	84 a6       	std	Z+44, r8	; 0x2c
    c586:	95 a6       	std	Z+45, r9	; 0x2d
    c588:	a6 a6       	std	Z+46, r10	; 0x2e
    c58a:	b7 a6       	std	Z+47, r11	; 0x2f
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    c58c:	87 8d       	ldd	r24, Z+31	; 0x1f
    c58e:	90 a1       	ldd	r25, Z+32	; 0x20
    c590:	80 34       	cpi	r24, 0x40	; 64
    c592:	91 40       	sbci	r25, 0x01	; 1
    c594:	88 f0       	brcs	.+34     	; 0xc5b8 <get_cpu_joypad_state+0x2ba>
	{
		p->held = button_map(LBRandom(2, 4));
    c596:	64 e0       	ldi	r22, 0x04	; 4
    c598:	82 e0       	ldi	r24, 0x02	; 2
    c59a:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <LBRandom>
    c59e:	90 e0       	ldi	r25, 0x00	; 0
    c5a0:	0e 94 38 60 	call	0xc070	; 0xc070 <button_map>
    c5a4:	d2 01       	movw	r26, r4
    c5a6:	15 96       	adiw	r26, 0x05	; 5
    c5a8:	9c 93       	st	X, r25
    c5aa:	8e 93       	st	-X, r24
    c5ac:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    c5ae:	e9 85       	ldd	r30, Y+9	; 0x09
    c5b0:	fa 85       	ldd	r31, Y+10	; 0x0a
    c5b2:	10 a2       	std	Z+32, r1	; 0x20
    c5b4:	17 8e       	std	Z+31, r1	; 0x1f
    c5b6:	42 c0       	rjmp	.+132    	; 0xc63c <get_cpu_joypad_state+0x33e>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    c5b8:	a9 85       	ldd	r26, Y+9	; 0x09
    c5ba:	ba 85       	ldd	r27, Y+10	; 0x0a
    c5bc:	91 96       	adiw	r26, 0x21	; 33
    c5be:	8d 91       	ld	r24, X+
    c5c0:	9c 91       	ld	r25, X
    c5c2:	92 97       	sbiw	r26, 0x22	; 34
    c5c4:	80 34       	cpi	r24, 0x40	; 64
    c5c6:	91 40       	sbci	r25, 0x01	; 1
    c5c8:	88 f0       	brcs	.+34     	; 0xc5ec <get_cpu_joypad_state+0x2ee>
	{
		p->held = button_map(LBRandom(0, 2));
    c5ca:	62 e0       	ldi	r22, 0x02	; 2
    c5cc:	80 e0       	ldi	r24, 0x00	; 0
    c5ce:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <LBRandom>
    c5d2:	90 e0       	ldi	r25, 0x00	; 0
    c5d4:	0e 94 38 60 	call	0xc070	; 0xc070 <button_map>
    c5d8:	f2 01       	movw	r30, r4
    c5da:	95 83       	std	Z+5, r25	; 0x05
    c5dc:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    c5de:	a9 85       	ldd	r26, Y+9	; 0x09
    c5e0:	ba 85       	ldd	r27, Y+10	; 0x0a
    c5e2:	92 96       	adiw	r26, 0x22	; 34
    c5e4:	1c 92       	st	X, r1
    c5e6:	1e 92       	st	-X, r1
    c5e8:	91 97       	sbiw	r26, 0x21	; 33
    c5ea:	28 c0       	rjmp	.+80     	; 0xc63c <get_cpu_joypad_state+0x33e>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    c5ec:	20 e0       	ldi	r18, 0x00	; 0
    c5ee:	30 e0       	ldi	r19, 0x00	; 0
    c5f0:	40 e0       	ldi	r20, 0x00	; 0
    c5f2:	5e e3       	ldi	r21, 0x3E	; 62
    c5f4:	c5 01       	movw	r24, r10
    c5f6:	b4 01       	movw	r22, r8
    c5f8:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    c5fc:	20 e0       	ldi	r18, 0x00	; 0
    c5fe:	30 e0       	ldi	r19, 0x00	; 0
    c600:	40 e4       	ldi	r20, 0x40	; 64
    c602:	50 e4       	ldi	r21, 0x40	; 64
    c604:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    c608:	0e 94 1e 73 	call	0xe63c	; 0xe63c <__fixsfsi>
    c60c:	b6 2e       	mov	r11, r22
    c60e:	20 e0       	ldi	r18, 0x00	; 0
    c610:	30 e0       	ldi	r19, 0x00	; 0
    c612:	40 e0       	ldi	r20, 0x00	; 0
    c614:	5e e3       	ldi	r21, 0x3E	; 62
    c616:	c7 01       	movw	r24, r14
    c618:	b6 01       	movw	r22, r12
    c61a:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    c61e:	0e 94 1e 73 	call	0xe63c	; 0xe63c <__fixsfsi>
    c622:	86 2f       	mov	r24, r22
    c624:	82 01       	movw	r16, r4
    c626:	29 85       	ldd	r18, Y+9	; 0x09
    c628:	3a 85       	ldd	r19, Y+10	; 0x0a
    c62a:	f9 01       	movw	r30, r18
    c62c:	42 81       	ldd	r20, Z+2	; 0x02
    c62e:	6b 2d       	mov	r22, r11
    c630:	0e 94 4e 60 	call	0xc09c	; 0xc09c <crash_and_turn>
    c634:	a9 85       	ldd	r26, Y+9	; 0x09
    c636:	ba 85       	ldd	r27, Y+10	; 0x0a
    c638:	94 96       	adiw	r26, 0x24	; 36
    c63a:	8c 93       	st	X, r24
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    c63c:	e9 85       	ldd	r30, Y+9	; 0x09
    c63e:	fa 85       	ldd	r31, Y+10	; 0x0a
    c640:	84 8d       	ldd	r24, Z+28	; 0x1c
    c642:	81 30       	cpi	r24, 0x01	; 1
    c644:	09 f0       	breq	.+2      	; 0xc648 <get_cpu_joypad_state+0x34a>
    c646:	f7 c0       	rjmp	.+494    	; 0xc836 <get_cpu_joypad_state+0x538>
    c648:	d1 01       	movw	r26, r2
    c64a:	52 96       	adiw	r26, 0x12	; 18
    c64c:	9c 91       	ld	r25, X
    c64e:	52 97       	sbiw	r26, 0x12	; 18
    c650:	51 96       	adiw	r26, 0x11	; 17
    c652:	8c 91       	ld	r24, X
    c654:	51 97       	sbiw	r26, 0x11	; 17
    c656:	98 17       	cp	r25, r24
    c658:	08 f0       	brcs	.+2      	; 0xc65c <get_cpu_joypad_state+0x35e>
    c65a:	ed c0       	rjmp	.+474    	; 0xc836 <get_cpu_joypad_state+0x538>
	{
		if (other_player->shared.y < player->shared.y && other_player->shared.x < player->shared.x)
    c65c:	17 96       	adiw	r26, 0x07	; 7
    c65e:	cd 90       	ld	r12, X+
    c660:	dd 90       	ld	r13, X+
    c662:	ed 90       	ld	r14, X+
    c664:	fc 90       	ld	r15, X
    c666:	1a 97       	sbiw	r26, 0x0a	; 10
    c668:	87 80       	ldd	r8, Z+7	; 0x07
    c66a:	90 84       	ldd	r9, Z+8	; 0x08
    c66c:	a1 84       	ldd	r10, Z+9	; 0x09
    c66e:	b2 84       	ldd	r11, Z+10	; 0x0a
    c670:	a5 01       	movw	r20, r10
    c672:	94 01       	movw	r18, r8
    c674:	c7 01       	movw	r24, r14
    c676:	b6 01       	movw	r22, r12
    c678:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    c67c:	87 ff       	sbrs	r24, 7
    c67e:	64 c0       	rjmp	.+200    	; 0xc748 <get_cpu_joypad_state+0x44a>
    c680:	e9 85       	ldd	r30, Y+9	; 0x09
    c682:	fa 85       	ldd	r31, Y+10	; 0x0a
    c684:	23 81       	ldd	r18, Z+3	; 0x03
    c686:	34 81       	ldd	r19, Z+4	; 0x04
    c688:	45 81       	ldd	r20, Z+5	; 0x05
    c68a:	56 81       	ldd	r21, Z+6	; 0x06
    c68c:	d1 01       	movw	r26, r2
    c68e:	13 96       	adiw	r26, 0x03	; 3
    c690:	6d 91       	ld	r22, X+
    c692:	7d 91       	ld	r23, X+
    c694:	8d 91       	ld	r24, X+
    c696:	9c 91       	ld	r25, X
    c698:	16 97       	sbiw	r26, 0x06	; 6
    c69a:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    c69e:	87 ff       	sbrs	r24, 7
    c6a0:	27 c0       	rjmp	.+78     	; 0xc6f0 <get_cpu_joypad_state+0x3f2>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_LEFT)
    c6a2:	f1 01       	movw	r30, r2
    c6a4:	80 81       	ld	r24, Z
    c6a6:	82 30       	cpi	r24, 0x02	; 2
    c6a8:	79 f4       	brne	.+30     	; 0xc6c8 <get_cpu_joypad_state+0x3ca>
    c6aa:	a9 85       	ldd	r26, Y+9	; 0x09
    c6ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    c6ae:	8c 91       	ld	r24, X
    c6b0:	83 30       	cpi	r24, 0x03	; 3
    c6b2:	51 f4       	brne	.+20     	; 0xc6c8 <get_cpu_joypad_state+0x3ca>
			{
				p->held = BTN_RIGHT;
    c6b4:	80 e8       	ldi	r24, 0x80	; 128
    c6b6:	90 e0       	ldi	r25, 0x00	; 0
    c6b8:	f2 01       	movw	r30, r4
    c6ba:	95 83       	std	Z+5, r25	; 0x05
    c6bc:	84 83       	std	Z+4, r24	; 0x04
				player->goal_reached = 0;
    c6be:	94 96       	adiw	r26, 0x24	; 36
    c6c0:	1c 92       	st	X, r1
    c6c2:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c6c4:	5a 96       	adiw	r26, 0x1a	; 26
    c6c6:	1c 92       	st	X, r1
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_UP)
    c6c8:	d1 01       	movw	r26, r2
    c6ca:	8c 91       	ld	r24, X
    c6cc:	81 30       	cpi	r24, 0x01	; 1
    c6ce:	09 f0       	breq	.+2      	; 0xc6d2 <get_cpu_joypad_state+0x3d4>
    c6d0:	b2 c0       	rjmp	.+356    	; 0xc836 <get_cpu_joypad_state+0x538>
    c6d2:	e9 85       	ldd	r30, Y+9	; 0x09
    c6d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    c6d6:	80 81       	ld	r24, Z
    c6d8:	81 11       	cpse	r24, r1
    c6da:	ad c0       	rjmp	.+346    	; 0xc836 <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    c6dc:	a9 85       	ldd	r26, Y+9	; 0x09
    c6de:	ba 85       	ldd	r27, Y+10	; 0x0a
    c6e0:	94 96       	adiw	r26, 0x24	; 36
    c6e2:	1c 92       	st	X, r1
    c6e4:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c6e6:	5a 96       	adiw	r26, 0x1a	; 26
    c6e8:	1c 92       	st	X, r1
				p->held = BTN_DOWN;
    c6ea:	80 e2       	ldi	r24, 0x20	; 32
    c6ec:	90 e0       	ldi	r25, 0x00	; 0
    c6ee:	6c c0       	rjmp	.+216    	; 0xc7c8 <get_cpu_joypad_state+0x4ca>
			}
		}
		else if (other_player->shared.y < player->shared.y && other_player->shared.x > player->shared.x)
    c6f0:	a9 85       	ldd	r26, Y+9	; 0x09
    c6f2:	ba 85       	ldd	r27, Y+10	; 0x0a
    c6f4:	13 96       	adiw	r26, 0x03	; 3
    c6f6:	2d 91       	ld	r18, X+
    c6f8:	3d 91       	ld	r19, X+
    c6fa:	4d 91       	ld	r20, X+
    c6fc:	5c 91       	ld	r21, X
    c6fe:	16 97       	sbiw	r26, 0x06	; 6
    c700:	f1 01       	movw	r30, r2
    c702:	63 81       	ldd	r22, Z+3	; 0x03
    c704:	74 81       	ldd	r23, Z+4	; 0x04
    c706:	85 81       	ldd	r24, Z+5	; 0x05
    c708:	96 81       	ldd	r25, Z+6	; 0x06
    c70a:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    c70e:	18 16       	cp	r1, r24
    c710:	dc f4       	brge	.+54     	; 0xc748 <get_cpu_joypad_state+0x44a>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_RIGHT)
    c712:	d1 01       	movw	r26, r2
    c714:	8c 91       	ld	r24, X
    c716:	82 30       	cpi	r24, 0x02	; 2
    c718:	71 f4       	brne	.+28     	; 0xc736 <get_cpu_joypad_state+0x438>
    c71a:	e9 85       	ldd	r30, Y+9	; 0x09
    c71c:	fa 85       	ldd	r31, Y+10	; 0x0a
    c71e:	80 81       	ld	r24, Z
    c720:	81 30       	cpi	r24, 0x01	; 1
    c722:	49 f4       	brne	.+18     	; 0xc736 <get_cpu_joypad_state+0x438>
			{
				player->goal_reached = 0;
    c724:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    c726:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    c728:	80 e4       	ldi	r24, 0x40	; 64
    c72a:	90 e0       	ldi	r25, 0x00	; 0
    c72c:	d2 01       	movw	r26, r4
    c72e:	15 96       	adiw	r26, 0x05	; 5
    c730:	9c 93       	st	X, r25
    c732:	8e 93       	st	-X, r24
    c734:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_UP)
    c736:	f1 01       	movw	r30, r2
    c738:	80 81       	ld	r24, Z
    c73a:	83 30       	cpi	r24, 0x03	; 3
    c73c:	09 f0       	breq	.+2      	; 0xc740 <get_cpu_joypad_state+0x442>
    c73e:	7b c0       	rjmp	.+246    	; 0xc836 <get_cpu_joypad_state+0x538>
    c740:	a9 85       	ldd	r26, Y+9	; 0x09
    c742:	ba 85       	ldd	r27, Y+10	; 0x0a
    c744:	8c 91       	ld	r24, X
    c746:	c8 cf       	rjmp	.-112    	; 0xc6d8 <get_cpu_joypad_state+0x3da>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x < player->shared.x)
    c748:	a5 01       	movw	r20, r10
    c74a:	94 01       	movw	r18, r8
    c74c:	c7 01       	movw	r24, r14
    c74e:	b6 01       	movw	r22, r12
    c750:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    c754:	18 16       	cp	r1, r24
    c756:	e4 f5       	brge	.+120    	; 0xc7d0 <get_cpu_joypad_state+0x4d2>
    c758:	e9 85       	ldd	r30, Y+9	; 0x09
    c75a:	fa 85       	ldd	r31, Y+10	; 0x0a
    c75c:	23 81       	ldd	r18, Z+3	; 0x03
    c75e:	34 81       	ldd	r19, Z+4	; 0x04
    c760:	45 81       	ldd	r20, Z+5	; 0x05
    c762:	56 81       	ldd	r21, Z+6	; 0x06
    c764:	d1 01       	movw	r26, r2
    c766:	13 96       	adiw	r26, 0x03	; 3
    c768:	6d 91       	ld	r22, X+
    c76a:	7d 91       	ld	r23, X+
    c76c:	8d 91       	ld	r24, X+
    c76e:	9c 91       	ld	r25, X
    c770:	16 97       	sbiw	r26, 0x06	; 6
    c772:	0e 94 b2 72 	call	0xe564	; 0xe564 <__cmpsf2>
    c776:	87 ff       	sbrs	r24, 7
    c778:	33 c0       	rjmp	.+102    	; 0xc7e0 <get_cpu_joypad_state+0x4e2>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_LEFT)
    c77a:	f1 01       	movw	r30, r2
    c77c:	80 81       	ld	r24, Z
    c77e:	81 11       	cpse	r24, r1
    c780:	0f c0       	rjmp	.+30     	; 0xc7a0 <get_cpu_joypad_state+0x4a2>
    c782:	a9 85       	ldd	r26, Y+9	; 0x09
    c784:	ba 85       	ldd	r27, Y+10	; 0x0a
    c786:	8c 91       	ld	r24, X
    c788:	83 30       	cpi	r24, 0x03	; 3
    c78a:	51 f4       	brne	.+20     	; 0xc7a0 <get_cpu_joypad_state+0x4a2>
			{
				player->goal_reached = 0;
    c78c:	94 96       	adiw	r26, 0x24	; 36
    c78e:	1c 92       	st	X, r1
    c790:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c792:	5a 96       	adiw	r26, 0x1a	; 26
    c794:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    c796:	80 e8       	ldi	r24, 0x80	; 128
    c798:	90 e0       	ldi	r25, 0x00	; 0
    c79a:	f2 01       	movw	r30, r4
    c79c:	95 83       	std	Z+5, r25	; 0x05
    c79e:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_DOWN)
    c7a0:	d1 01       	movw	r26, r2
    c7a2:	8c 91       	ld	r24, X
    c7a4:	81 30       	cpi	r24, 0x01	; 1
    c7a6:	09 f0       	breq	.+2      	; 0xc7aa <get_cpu_joypad_state+0x4ac>
    c7a8:	46 c0       	rjmp	.+140    	; 0xc836 <get_cpu_joypad_state+0x538>
    c7aa:	e9 85       	ldd	r30, Y+9	; 0x09
    c7ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    c7ae:	80 81       	ld	r24, Z
    c7b0:	82 30       	cpi	r24, 0x02	; 2
    c7b2:	09 f0       	breq	.+2      	; 0xc7b6 <get_cpu_joypad_state+0x4b8>
    c7b4:	40 c0       	rjmp	.+128    	; 0xc836 <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    c7b6:	a9 85       	ldd	r26, Y+9	; 0x09
    c7b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    c7ba:	94 96       	adiw	r26, 0x24	; 36
    c7bc:	1c 92       	st	X, r1
    c7be:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c7c0:	5a 96       	adiw	r26, 0x1a	; 26
    c7c2:	1c 92       	st	X, r1
				p->held = BTN_UP;
    c7c4:	80 e1       	ldi	r24, 0x10	; 16
    c7c6:	90 e0       	ldi	r25, 0x00	; 0
    c7c8:	f2 01       	movw	r30, r4
    c7ca:	95 83       	std	Z+5, r25	; 0x05
    c7cc:	84 83       	std	Z+4, r24	; 0x04
    c7ce:	33 c0       	rjmp	.+102    	; 0xc836 <get_cpu_joypad_state+0x538>
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x > player->shared.x)
    c7d0:	a5 01       	movw	r20, r10
    c7d2:	94 01       	movw	r18, r8
    c7d4:	c7 01       	movw	r24, r14
    c7d6:	b6 01       	movw	r22, r12
    c7d8:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    c7dc:	18 16       	cp	r1, r24
    c7de:	5c f5       	brge	.+86     	; 0xc836 <get_cpu_joypad_state+0x538>
    c7e0:	a9 85       	ldd	r26, Y+9	; 0x09
    c7e2:	ba 85       	ldd	r27, Y+10	; 0x0a
    c7e4:	13 96       	adiw	r26, 0x03	; 3
    c7e6:	2d 91       	ld	r18, X+
    c7e8:	3d 91       	ld	r19, X+
    c7ea:	4d 91       	ld	r20, X+
    c7ec:	5c 91       	ld	r21, X
    c7ee:	16 97       	sbiw	r26, 0x06	; 6
    c7f0:	f1 01       	movw	r30, r2
    c7f2:	63 81       	ldd	r22, Z+3	; 0x03
    c7f4:	74 81       	ldd	r23, Z+4	; 0x04
    c7f6:	85 81       	ldd	r24, Z+5	; 0x05
    c7f8:	96 81       	ldd	r25, Z+6	; 0x06
    c7fa:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    c7fe:	18 16       	cp	r1, r24
    c800:	d4 f4       	brge	.+52     	; 0xc836 <get_cpu_joypad_state+0x538>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_RIGHT)
    c802:	d1 01       	movw	r26, r2
    c804:	8c 91       	ld	r24, X
    c806:	81 11       	cpse	r24, r1
    c808:	0e c0       	rjmp	.+28     	; 0xc826 <get_cpu_joypad_state+0x528>
    c80a:	e9 85       	ldd	r30, Y+9	; 0x09
    c80c:	fa 85       	ldd	r31, Y+10	; 0x0a
    c80e:	80 81       	ld	r24, Z
    c810:	81 30       	cpi	r24, 0x01	; 1
    c812:	49 f4       	brne	.+18     	; 0xc826 <get_cpu_joypad_state+0x528>
			{
				player->goal_reached = 0;
    c814:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    c816:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    c818:	80 e4       	ldi	r24, 0x40	; 64
    c81a:	90 e0       	ldi	r25, 0x00	; 0
    c81c:	d2 01       	movw	r26, r4
    c81e:	15 96       	adiw	r26, 0x05	; 5
    c820:	9c 93       	st	X, r25
    c822:	8e 93       	st	-X, r24
    c824:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_DOWN){
    c826:	f1 01       	movw	r30, r2
    c828:	80 81       	ld	r24, Z
    c82a:	83 30       	cpi	r24, 0x03	; 3
    c82c:	21 f4       	brne	.+8      	; 0xc836 <get_cpu_joypad_state+0x538>
    c82e:	a9 85       	ldd	r26, Y+9	; 0x09
    c830:	ba 85       	ldd	r27, Y+10	; 0x0a
    c832:	8c 91       	ld	r24, X
    c834:	bd cf       	rjmp	.-134    	; 0xc7b0 <get_cpu_joypad_state+0x4b2>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    c836:	2a 96       	adiw	r28, 0x0a	; 10
    c838:	0f b6       	in	r0, 0x3f	; 63
    c83a:	f8 94       	cli
    c83c:	de bf       	out	0x3e, r29	; 62
    c83e:	0f be       	out	0x3f, r0	; 63
    c840:	cd bf       	out	0x3d, r28	; 61
    c842:	df 91       	pop	r29
    c844:	cf 91       	pop	r28
    c846:	1f 91       	pop	r17
    c848:	0f 91       	pop	r16
    c84a:	ff 90       	pop	r15
    c84c:	ef 90       	pop	r14
    c84e:	df 90       	pop	r13
    c850:	cf 90       	pop	r12
    c852:	bf 90       	pop	r11
    c854:	af 90       	pop	r10
    c856:	9f 90       	pop	r9
    c858:	8f 90       	pop	r8
    c85a:	7f 90       	pop	r7
    c85c:	5f 90       	pop	r5
    c85e:	4f 90       	pop	r4
    c860:	3f 90       	pop	r3
    c862:	2f 90       	pop	r2
    c864:	08 95       	ret

0000c866 <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    c866:	bf 92       	push	r11
    c868:	cf 92       	push	r12
    c86a:	df 92       	push	r13
    c86c:	ef 92       	push	r14
    c86e:	ff 92       	push	r15
    c870:	0f 93       	push	r16
    c872:	1f 93       	push	r17
    c874:	cf 93       	push	r28
    c876:	df 93       	push	r29
    c878:	1f 92       	push	r1
    c87a:	cd b7       	in	r28, 0x3d	; 61
    c87c:	de b7       	in	r29, 0x3e	; 62
    c87e:	8c 01       	movw	r16, r24
    c880:	f6 2e       	mov	r15, r22
    c882:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    c884:	8f e0       	ldi	r24, 0x0F	; 15
    c886:	b8 2e       	mov	r11, r24
}
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c888:	f8 01       	movw	r30, r16
    c88a:	84 91       	lpm	r24, Z
    c88c:	83 32       	cpi	r24, 0x23	; 35
    c88e:	01 f1       	breq	.+64     	; 0xc8d0 <stream_text_middle+0x6a>
	{
		ln = strnlen_P(dialogue, 255);
    c890:	6f ef       	ldi	r22, 0xFF	; 255
    c892:	70 e0       	ldi	r23, 0x00	; 0
    c894:	c8 01       	movw	r24, r16
    c896:	0e 94 71 74 	call	0xe8e2	; 0xe8e2 <strnlen_P>
		x = 15 - ln / 2;
    c89a:	86 95       	lsr	r24
    c89c:	eb 2c       	mov	r14, r11
    c89e:	e8 1a       	sub	r14, r24
    c8a0:	e0 1a       	sub	r14, r16
    c8a2:	8e 2d       	mov	r24, r14
    c8a4:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c8a6:	0f 5f       	subi	r16, 0xFF	; 255
    c8a8:	1f 4f       	sbci	r17, 0xFF	; 255
    c8aa:	f8 01       	movw	r30, r16
    c8ac:	31 97       	sbiw	r30, 0x01	; 1
    c8ae:	e4 91       	lpm	r30, Z
    c8b0:	e9 83       	std	Y+1, r30	; 0x01
    c8b2:	ee 23       	and	r30, r30
    c8b4:	59 f0       	breq	.+22     	; 0xc8cc <stream_text_middle+0x66>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    c8b6:	21 e0       	ldi	r18, 0x01	; 1
    c8b8:	ae 01       	movw	r20, r28
    c8ba:	4f 5f       	subi	r20, 0xFF	; 255
    c8bc:	5f 4f       	sbci	r21, 0xFF	; 255
    c8be:	6f 2d       	mov	r22, r15
    c8c0:	0e 94 84 4c 	call	0x9908	; 0x9908 <LBPrintStr>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    c8c4:	c6 01       	movw	r24, r12
    c8c6:	0e 94 7e 3a 	call	0x74fc	; 0x74fc <WaitUs>
    c8ca:	eb cf       	rjmp	.-42     	; 0xc8a2 <stream_text_middle+0x3c>
			LBWaitUs(delay);
		}
		y++;
    c8cc:	f3 94       	inc	r15
    c8ce:	dc cf       	rjmp	.-72     	; 0xc888 <stream_text_middle+0x22>
	}
}
    c8d0:	0f 90       	pop	r0
    c8d2:	df 91       	pop	r29
    c8d4:	cf 91       	pop	r28
    c8d6:	1f 91       	pop	r17
    c8d8:	0f 91       	pop	r16
    c8da:	ff 90       	pop	r15
    c8dc:	ef 90       	pop	r14
    c8de:	df 90       	pop	r13
    c8e0:	cf 90       	pop	r12
    c8e2:	bf 90       	pop	r11
    c8e4:	08 95       	ret

0000c8e6 <load_credits>:

void load_credits()
{
	fade_through();
    c8e6:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
	stream_text_middle((const char*) strCredits, 5, 100);
    c8ea:	44 e6       	ldi	r20, 0x64	; 100
    c8ec:	50 e0       	ldi	r21, 0x00	; 0
    c8ee:	65 e0       	ldi	r22, 0x05	; 5
    c8f0:	89 ec       	ldi	r24, 0xC9	; 201
    c8f2:	92 e0       	ldi	r25, 0x02	; 2
    c8f4:	0e 94 33 64 	call	0xc866	; 0xc866 <stream_text_middle>
#if JAMMA
	wifi_status = WIFI_TIMEOUT;
#else
	wifi_status = activateNet();
    c8f8:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <activateNet>
    c8fc:	80 93 d4 0b 	sts	0x0BD4, r24
#endif
	LBWaitSeconds(4);
    c900:	84 e0       	ldi	r24, 0x04	; 4
    c902:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <LBWaitSeconds>
	fade_through();
    c906:	0c 94 c4 4f 	jmp	0x9f88	; 0x9f88 <fade_through>

0000c90a <send_net_message>:
		send_net_message(code, 0, 0);
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
    c90a:	0f 93       	push	r16
    c90c:	1f 93       	push	r17
    c90e:	cf 93       	push	r28
    c910:	df 93       	push	r29
	Player* player = &player1;
	Player* otherPlayer = &player2;
	JoyPadState* state = &p1;
	HandleSelectState* handle_select = &p1s;
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    c912:	90 91 b6 0b 	lds	r25, 0x0BB6
    c916:	2e ef       	ldi	r18, 0xFE	; 254
    c918:	29 0f       	add	r18, r25
    c91a:	22 30       	cpi	r18, 0x02	; 2
    c91c:	08 f0       	brcs	.+2      	; 0xc920 <send_net_message+0x16>
    c91e:	81 c0       	rjmp	.+258    	; 0xca22 <send_net_message+0x118>
	
	netMessage.hud_x = 15;
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
    c920:	2d ef       	ldi	r18, 0xFD	; 253
    c922:	28 0f       	add	r18, r24
    c924:	23 30       	cpi	r18, 0x03	; 3
    c926:	88 f4       	brcc	.+34     	; 0xc94a <send_net_message+0x40>
    c928:	10 92 e8 0f 	sts	0x0FE8, r1
	if (game.selection == JOINNETGAME)
    c92c:	93 30       	cpi	r25, 0x03	; 3
    c92e:	49 f0       	breq	.+18     	; 0xc942 <send_net_message+0x38>
void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
	Player* otherPlayer = &player2;
	JoyPadState* state = &p1;
	HandleSelectState* handle_select = &p1s;
    c930:	ab ef       	ldi	r26, 0xFB	; 251
    c932:	bf e0       	ldi	r27, 0x0F	; 15

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
	Player* otherPlayer = &player2;
	JoyPadState* state = &p1;
    c934:	21 e5       	ldi	r18, 0x51	; 81
    c936:	3c e0       	ldi	r19, 0x0C	; 12
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
	Player* otherPlayer = &player2;
    c938:	07 e4       	ldi	r16, 0x47	; 71
    c93a:	1f e0       	ldi	r17, 0x0F	; 15
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
    c93c:	e5 ed       	ldi	r30, 0xD5	; 213
    c93e:	fb e0       	ldi	r31, 0x0B	; 11
    c940:	14 c0       	rjmp	.+40     	; 0xc96a <send_net_message+0x60>
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
		handle_select = &p2s;
		netMessage.hud_x = 0;
		if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 15;
    c942:	9f e0       	ldi	r25, 0x0F	; 15
    c944:	90 93 e8 0f 	sts	0x0FE8, r25
    c948:	08 c0       	rjmp	.+16     	; 0xc95a <send_net_message+0x50>
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	
	netMessage.hud_x = 15;
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
	if (game.selection == JOINNETGAME)
    c94a:	93 30       	cpi	r25, 0x03	; 3
    c94c:	21 f0       	breq	.+8      	; 0xc956 <send_net_message+0x4c>
	JoyPadState* state = &p1;
	HandleSelectState* handle_select = &p1s;
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	
	netMessage.hud_x = 15;
    c94e:	9f e0       	ldi	r25, 0x0F	; 15
    c950:	90 93 e8 0f 	sts	0x0FE8, r25
    c954:	ed cf       	rjmp	.-38     	; 0xc930 <send_net_message+0x26>
	{
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
		handle_select = &p2s;
		netMessage.hud_x = 0;
    c956:	10 92 e8 0f 	sts	0x0FE8, r1
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
		handle_select = &p2s;
    c95a:	ad e7       	ldi	r26, 0x7D	; 125
    c95c:	bb e0       	ldi	r27, 0x0B	; 11
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
    c95e:	26 e7       	ldi	r18, 0x76	; 118
    c960:	3b e0       	ldi	r19, 0x0B	; 11
	netMessage.hud_x = 15;
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
		otherPlayer = &player1;
    c962:	05 ed       	ldi	r16, 0xD5	; 213
    c964:	1b e0       	ldi	r17, 0x0B	; 11
	
	netMessage.hud_x = 15;
	if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 0;
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
    c966:	e7 e4       	ldi	r30, 0x47	; 71
    c968:	ff e0       	ldi	r31, 0x0F	; 15
		state = &p2;
		handle_select = &p2s;
		netMessage.hud_x = 0;
		if (code >= NETITEMSPEED && code <= NETITEMBOMB) netMessage.hud_x = 15;
	}
	netMessage.code = code;
    c96a:	80 93 df 0f 	sts	0x0FDF, r24
	netMessage.held = state->held;
    c96e:	e9 01       	movw	r28, r18
    c970:	8c 81       	ldd	r24, Y+4	; 0x04
    c972:	9d 81       	ldd	r25, Y+5	; 0x05
    c974:	90 93 e1 0f 	sts	0x0FE1, r25
    c978:	80 93 e0 0f 	sts	0x0FE0, r24
	netMessage.pressed = state->pressed;
    c97c:	88 81       	ld	r24, Y
    c97e:	99 81       	ldd	r25, Y+1	; 0x01
    c980:	90 93 e3 0f 	sts	0x0FE3, r25
    c984:	80 93 e2 0f 	sts	0x0FE2, r24
	netMessage.object_pos_x = object_pos_x;
    c988:	60 93 e4 0f 	sts	0x0FE4, r22
	netMessage.object_pos_y = object_pos_y;
    c98c:	40 93 e5 0f 	sts	0x0FE5, r20
	netMessage.score = otherPlayer->score;
    c990:	e8 01       	movw	r28, r16
    c992:	8f 85       	ldd	r24, Y+15	; 0x0f
    c994:	80 93 e6 0f 	sts	0x0FE6, r24
	netMessage.level_score = otherPlayer->level_score;
    c998:	88 89       	ldd	r24, Y+16	; 0x10
    c99a:	80 93 e7 0f 	sts	0x0FE7, r24
	netMessage.pos_x = player->shared.x;
    c99e:	43 81       	ldd	r20, Z+3	; 0x03
    c9a0:	54 81       	ldd	r21, Z+4	; 0x04
    c9a2:	65 81       	ldd	r22, Z+5	; 0x05
    c9a4:	76 81       	ldd	r23, Z+6	; 0x06
    c9a6:	40 93 f2 0f 	sts	0x0FF2, r20
    c9aa:	50 93 f3 0f 	sts	0x0FF3, r21
    c9ae:	60 93 f4 0f 	sts	0x0FF4, r22
    c9b2:	70 93 f5 0f 	sts	0x0FF5, r23
	netMessage.pos_y = player->shared.y;
    c9b6:	47 81       	ldd	r20, Z+7	; 0x07
    c9b8:	50 85       	ldd	r21, Z+8	; 0x08
    c9ba:	61 85       	ldd	r22, Z+9	; 0x09
    c9bc:	72 85       	ldd	r23, Z+10	; 0x0a
    c9be:	40 93 f6 0f 	sts	0x0FF6, r20
    c9c2:	50 93 f7 0f 	sts	0x0FF7, r21
    c9c6:	60 93 f8 0f 	sts	0x0FF8, r22
    c9ca:	70 93 f9 0f 	sts	0x0FF9, r23
	netMessage.speed = player->shared.speed;
    c9ce:	81 81       	ldd	r24, Z+1	; 0x01
    c9d0:	80 93 f0 0f 	sts	0x0FF0, r24
	netMessage.direction = player->shared.direction;
    c9d4:	80 81       	ld	r24, Z
    c9d6:	80 93 ef 0f 	sts	0x0FEF, r24
	netMessage.recoiled = player->shared.recoiled;
    c9da:	82 81       	ldd	r24, Z+2	; 0x02
    c9dc:	80 93 f1 0f 	sts	0x0FF1, r24
	netMessage.handle_id = handle_select->handle_id;
    c9e0:	8c 91       	ld	r24, X
    c9e2:	80 93 e9 0f 	sts	0x0FE9, r24
	netMessage.char_index = handle_select->char_index;
    c9e6:	14 96       	adiw	r26, 0x04	; 4
    c9e8:	8c 91       	ld	r24, X
    c9ea:	14 97       	sbiw	r26, 0x04	; 4
    c9ec:	80 93 ed 0f 	sts	0x0FED, r24
	netMessage.select_state = handle_select->select_state;
    c9f0:	15 96       	adiw	r26, 0x05	; 5
    c9f2:	8c 91       	ld	r24, X
    c9f4:	15 97       	sbiw	r26, 0x05	; 5
    c9f6:	80 93 ee 0f 	sts	0x0FEE, r24
	memcpy(netMessage.handle, handle_select->handle, 3);
    c9fa:	11 96       	adiw	r26, 0x01	; 1
    c9fc:	8d 91       	ld	r24, X+
    c9fe:	9d 91       	ld	r25, X+
    ca00:	ac 91       	ld	r26, X
    ca02:	80 93 ea 0f 	sts	0x0FEA, r24
    ca06:	90 93 eb 0f 	sts	0x0FEB, r25
    ca0a:	a0 93 ec 0f 	sts	0x0FEC, r26
	netMessage.zero = 0;
    ca0e:	10 92 fa 0f 	sts	0x0FFA, r1
	sendNetMessage(&netMessage);
    ca12:	8f ed       	ldi	r24, 0xDF	; 223
    ca14:	9f e0       	ldi	r25, 0x0F	; 15
}
    ca16:	df 91       	pop	r29
    ca18:	cf 91       	pop	r28
    ca1a:	1f 91       	pop	r17
    ca1c:	0f 91       	pop	r16
	netMessage.handle_id = handle_select->handle_id;
	netMessage.char_index = handle_select->char_index;
	netMessage.select_state = handle_select->select_state;
	memcpy(netMessage.handle, handle_select->handle, 3);
	netMessage.zero = 0;
	sendNetMessage(&netMessage);
    ca1e:	0c 94 f0 4a 	jmp	0x95e0	; 0x95e0 <sendNetMessage>
}
    ca22:	df 91       	pop	r29
    ca24:	cf 91       	pop	r28
    ca26:	1f 91       	pop	r17
    ca28:	0f 91       	pop	r16
    ca2a:	08 95       	ret

0000ca2c <send_smart_net_message>:
} 
#endif


void send_smart_net_message(Player* player, JoyPadState* p, u8 code)
{
    ca2c:	34 2f       	mov	r19, r20
	if (game.selection == HOSTNETGAME && player == &player1)
    ca2e:	20 91 b6 0b 	lds	r18, 0x0BB6
    ca32:	22 30       	cpi	r18, 0x02	; 2
    ca34:	41 f4       	brne	.+16     	; 0xca46 <send_smart_net_message+0x1a>
    ca36:	85 5d       	subi	r24, 0xD5	; 213
    ca38:	9b 40       	sbci	r25, 0x0B	; 11
    ca3a:	51 f4       	brne	.+20     	; 0xca50 <send_smart_net_message+0x24>
	{
		send_net_message(code, 0, 0);
    ca3c:	40 e0       	ldi	r20, 0x00	; 0
    ca3e:	60 e0       	ldi	r22, 0x00	; 0
    ca40:	83 2f       	mov	r24, r19
    ca42:	0c 94 85 64 	jmp	0xc90a	; 0xc90a <send_net_message>
	}
	else if (game.selection == JOINNETGAME && player == &player2)
    ca46:	23 30       	cpi	r18, 0x03	; 3
    ca48:	19 f4       	brne	.+6      	; 0xca50 <send_smart_net_message+0x24>
    ca4a:	87 54       	subi	r24, 0x47	; 71
    ca4c:	9f 40       	sbci	r25, 0x0F	; 15
    ca4e:	b1 f3       	breq	.-20     	; 0xca3c <send_smart_net_message+0x10>
    ca50:	08 95       	ret

0000ca52 <get_net_message>:
	netMessage.zero = 0;
	sendNetMessage(&netMessage);
}

void get_net_message()
{
    ca52:	df 92       	push	r13
    ca54:	ef 92       	push	r14
    ca56:	ff 92       	push	r15
    ca58:	0f 93       	push	r16
    ca5a:	1f 93       	push	r17
    ca5c:	cf 93       	push	r28
    ca5e:	df 93       	push	r29
	Player* player = &player2;
	Player* otherPlayer = &player1;
	u8 otherPlayerHudx = 0;
	HandleSelectState* handle_select = &p2s;
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    ca60:	80 91 b6 0b 	lds	r24, 0x0BB6
    ca64:	9e ef       	ldi	r25, 0xFE	; 254
    ca66:	98 0f       	add	r25, r24
    ca68:	92 30       	cpi	r25, 0x02	; 2
    ca6a:	08 f0       	brcs	.+2      	; 0xca6e <get_net_message+0x1c>
    ca6c:	2a c1       	rjmp	.+596    	; 0xccc2 <get_net_message+0x270>
	
	netMessage.code = NETNODATA;
    ca6e:	9c e0       	ldi	r25, 0x0C	; 12
    ca70:	90 93 df 0f 	sts	0x0FDF, r25
	if (game.selection == JOINNETGAME)
    ca74:	83 30       	cpi	r24, 0x03	; 3
    ca76:	59 f4       	brne	.+22     	; 0xca8e <get_net_message+0x3c>
	{
		player = &player1;
		handle_select = &p1s;
    ca78:	9b ef       	ldi	r25, 0xFB	; 251
    ca7a:	e9 2e       	mov	r14, r25
    ca7c:	9f e0       	ldi	r25, 0x0F	; 15
    ca7e:	f9 2e       	mov	r15, r25
		otherPlayer = &player2;
		otherPlayerHudx = 15;
    ca80:	2f e0       	ldi	r18, 0x0F	; 15
    ca82:	d2 2e       	mov	r13, r18
	netMessage.code = NETNODATA;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		handle_select = &p1s;
		otherPlayer = &player2;
    ca84:	07 e4       	ldi	r16, 0x47	; 71
    ca86:	1f e0       	ldi	r17, 0x0F	; 15
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	
	netMessage.code = NETNODATA;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
    ca88:	c5 ed       	ldi	r28, 0xD5	; 213
    ca8a:	db e0       	ldi	r29, 0x0B	; 11
    ca8c:	09 c0       	rjmp	.+18     	; 0xcaa0 <get_net_message+0x4e>
void get_net_message()
{
	Player* player = &player2;
	Player* otherPlayer = &player1;
	u8 otherPlayerHudx = 0;
	HandleSelectState* handle_select = &p2s;
    ca8e:	8d e7       	ldi	r24, 0x7D	; 125
    ca90:	e8 2e       	mov	r14, r24
    ca92:	8b e0       	ldi	r24, 0x0B	; 11
    ca94:	f8 2e       	mov	r15, r24

void get_net_message()
{
	Player* player = &player2;
	Player* otherPlayer = &player1;
	u8 otherPlayerHudx = 0;
    ca96:	d1 2c       	mov	r13, r1
}

void get_net_message()
{
	Player* player = &player2;
	Player* otherPlayer = &player1;
    ca98:	05 ed       	ldi	r16, 0xD5	; 213
    ca9a:	1b e0       	ldi	r17, 0x0B	; 11
	sendNetMessage(&netMessage);
}

void get_net_message()
{
	Player* player = &player2;
    ca9c:	c7 e4       	ldi	r28, 0x47	; 71
    ca9e:	df e0       	ldi	r29, 0x0F	; 15
		player = &player1;
		handle_select = &p1s;
		otherPlayer = &player2;
		otherPlayerHudx = 15;
	}
	if (getNetMessage(&netMessage) != WIFI_NODATA)
    caa0:	8f ed       	ldi	r24, 0xDF	; 223
    caa2:	9f e0       	ldi	r25, 0x0F	; 15
    caa4:	0e 94 f2 4a 	call	0x95e4	; 0x95e4 <getNetMessage>
    caa8:	82 30       	cpi	r24, 0x02	; 2
    caaa:	09 f4       	brne	.+2      	; 0xcaae <get_net_message+0x5c>
    caac:	06 c1       	rjmp	.+524    	; 0xccba <get_net_message+0x268>
	{
		otherPlayer->score = netMessage.score;
    caae:	80 91 e6 0f 	lds	r24, 0x0FE6
    cab2:	f8 01       	movw	r30, r16
    cab4:	87 87       	std	Z+15, r24	; 0x0f
		otherPlayer->level_score = netMessage.score;
    cab6:	80 8b       	std	Z+16, r24	; 0x10
		player->shared.x = netMessage.pos_x;
    cab8:	80 91 f2 0f 	lds	r24, 0x0FF2
    cabc:	90 91 f3 0f 	lds	r25, 0x0FF3
    cac0:	a0 91 f4 0f 	lds	r26, 0x0FF4
    cac4:	b0 91 f5 0f 	lds	r27, 0x0FF5
    cac8:	8b 83       	std	Y+3, r24	; 0x03
    caca:	9c 83       	std	Y+4, r25	; 0x04
    cacc:	ad 83       	std	Y+5, r26	; 0x05
    cace:	be 83       	std	Y+6, r27	; 0x06
		player->shared.y = netMessage.pos_y;
    cad0:	80 91 f6 0f 	lds	r24, 0x0FF6
    cad4:	90 91 f7 0f 	lds	r25, 0x0FF7
    cad8:	a0 91 f8 0f 	lds	r26, 0x0FF8
    cadc:	b0 91 f9 0f 	lds	r27, 0x0FF9
    cae0:	8f 83       	std	Y+7, r24	; 0x07
    cae2:	98 87       	std	Y+8, r25	; 0x08
    cae4:	a9 87       	std	Y+9, r26	; 0x09
    cae6:	ba 87       	std	Y+10, r27	; 0x0a
		player->shared.speed = netMessage.speed;
    cae8:	80 91 f0 0f 	lds	r24, 0x0FF0
    caec:	89 83       	std	Y+1, r24	; 0x01
		player->shared.direction = netMessage.direction;
    caee:	80 91 ef 0f 	lds	r24, 0x0FEF
    caf2:	88 83       	st	Y, r24
		player->shared.recoiled = netMessage.recoiled;
    caf4:	80 91 f1 0f 	lds	r24, 0x0FF1
    caf8:	8a 83       	std	Y+2, r24	; 0x02
		handle_select->handle_id = netMessage.handle_id;
    cafa:	80 91 e9 0f 	lds	r24, 0x0FE9
    cafe:	f7 01       	movw	r30, r14
    cb00:	80 83       	st	Z, r24
		handle_select->char_index = netMessage.char_index;
    cb02:	80 91 ed 0f 	lds	r24, 0x0FED
    cb06:	84 83       	std	Z+4, r24	; 0x04
		handle_select->select_state = netMessage.select_state;
    cb08:	80 91 ee 0f 	lds	r24, 0x0FEE
    cb0c:	85 83       	std	Z+5, r24	; 0x05
		memcpy(handle_select->handle, netMessage.handle, 3);
    cb0e:	80 91 ea 0f 	lds	r24, 0x0FEA
    cb12:	90 91 eb 0f 	lds	r25, 0x0FEB
    cb16:	a0 91 ec 0f 	lds	r26, 0x0FEC
    cb1a:	81 83       	std	Z+1, r24	; 0x01
    cb1c:	92 83       	std	Z+2, r25	; 0x02
    cb1e:	a3 83       	std	Z+3, r26	; 0x03
		
		// Act on message code
		if (netMessage.code == NETHIT)
    cb20:	80 91 df 0f 	lds	r24, 0x0FDF
    cb24:	81 11       	cpse	r24, r1
    cb26:	13 c0       	rjmp	.+38     	; 0xcb4e <get_net_message+0xfc>
		{
			render_score(otherPlayer, netMessage.hud_x);
    cb28:	60 91 e8 0f 	lds	r22, 0x0FE8
    cb2c:	c8 01       	movw	r24, r16
    cb2e:	0e 94 ad 51 	call	0xa35a	; 0xa35a <render_score>
			init_shot_state(&otherPlayer->shot[0], otherPlayer->shot[0].shot_type);
    cb32:	f8 01       	movw	r30, r16
    cb34:	63 ad       	ldd	r22, Z+59	; 0x3b
    cb36:	c8 01       	movw	r24, r16
    cb38:	c0 96       	adiw	r24, 0x30	; 48
    cb3a:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
			otherPlayer->active_shots--;
    cb3e:	f8 01       	movw	r30, r16
    cb40:	81 89       	ldd	r24, Z+17	; 0x11
    cb42:	81 50       	subi	r24, 0x01	; 1
    cb44:	81 8b       	std	Z+17, r24	; 0x11
			kill_player(player, netMessage.hud_x);
    cb46:	60 91 e8 0f 	lds	r22, 0x0FE8
    cb4a:	ce 01       	movw	r24, r28
    cb4c:	12 c0       	rjmp	.+36     	; 0xcb72 <get_net_message+0x120>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage.code == NETTURRETHIT)
    cb4e:	81 30       	cpi	r24, 0x01	; 1
    cb50:	e1 f4       	brne	.+56     	; 0xcb8a <get_net_message+0x138>
		{
			game.boss_fight_player_lives--;
    cb52:	80 91 a8 0b 	lds	r24, 0x0BA8
    cb56:	81 50       	subi	r24, 0x01	; 1
    cb58:	80 93 a8 0b 	sts	0x0BA8, r24
			if (game.boss_fight_player_lives <= 0)
    cb5c:	81 11       	cpse	r24, r1
    cb5e:	03 c0       	rjmp	.+6      	; 0xcb66 <get_net_message+0x114>
			{
				game.boss_fight_status = BOSS_FIGHT_LOST;
    cb60:	80 e1       	ldi	r24, 0x10	; 16
    cb62:	80 93 a6 0b 	sts	0x0BA6, r24
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    cb66:	60 91 a7 0b 	lds	r22, 0x0BA7
    cb6a:	80 91 b2 0b 	lds	r24, 0x0BB2
    cb6e:	90 91 b3 0b 	lds	r25, 0x0BB3
    cb72:	0e 94 a7 55 	call	0xab4e	; 0xab4e <kill_player>
    cb76:	86 e0       	ldi	r24, 0x06	; 6
	}
	else
	{
		netMessage.pressed = 0;
	}
}
    cb78:	df 91       	pop	r29
    cb7a:	cf 91       	pop	r28
    cb7c:	1f 91       	pop	r17
    cb7e:	0f 91       	pop	r16
    cb80:	ff 90       	pop	r15
    cb82:	ef 90       	pop	r14
    cb84:	df 90       	pop	r13
    cb86:	0c 94 6e 49 	jmp	0x92dc	; 0x92dc <LBPlaySound.part.6>
				game.boss_fight_status = BOSS_FIGHT_LOST;
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage.code == NETITEMSPEED)
    cb8a:	83 30       	cpi	r24, 0x03	; 3
    cb8c:	c1 f4       	brne	.+48     	; 0xcbbe <get_net_message+0x16c>
		{
			level.level_map[netMessage.object_pos_y * 30 + netMessage.object_pos_x] = L_EMPTY;
    cb8e:	e0 91 e5 0f 	lds	r30, 0x0FE5
    cb92:	8e e1       	ldi	r24, 0x1E	; 30
    cb94:	e8 9f       	mul	r30, r24
    cb96:	f0 01       	movw	r30, r0
    cb98:	11 24       	eor	r1, r1
    cb9a:	80 91 e4 0f 	lds	r24, 0x0FE4
    cb9e:	e8 5a       	subi	r30, 0xA8	; 168
    cba0:	f3 4f       	sbci	r31, 0xF3	; 243
    cba2:	e8 0f       	add	r30, r24
    cba4:	f1 1d       	adc	r31, r1
    cba6:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    cba8:	81 e4       	ldi	r24, 0x41	; 65
    cbaa:	8f 8b       	std	Y+23, r24	; 0x17
			player->has_over_speed = true;
    cbac:	81 e0       	ldi	r24, 0x01	; 1
    cbae:	89 8f       	std	Y+25, r24	; 0x19
			DrawMap2(netMessage.hud_x+10, 1, map_speed_itm);
    cbb0:	80 91 e8 0f 	lds	r24, 0x0FE8
    cbb4:	41 ef       	ldi	r20, 0xF1	; 241
    cbb6:	5a e6       	ldi	r21, 0x6A	; 106
    cbb8:	61 e0       	ldi	r22, 0x01	; 1
    cbba:	86 5f       	subi	r24, 0xF6	; 246
    cbbc:	17 c0       	rjmp	.+46     	; 0xcbec <get_net_message+0x19a>
			SetTile(netMessage.object_pos_x, netMessage.object_pos_y, 0);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
		}
		else if (netMessage.code == NETITEMROCKET)
    cbbe:	84 30       	cpi	r24, 0x04	; 4
    cbc0:	01 f5       	brne	.+64     	; 0xcc02 <get_net_message+0x1b0>
		{
			level.level_map[netMessage.object_pos_y * 30 + netMessage.object_pos_x] = L_EMPTY;
    cbc2:	e0 91 e5 0f 	lds	r30, 0x0FE5
    cbc6:	9e e1       	ldi	r25, 0x1E	; 30
    cbc8:	e9 9f       	mul	r30, r25
    cbca:	f0 01       	movw	r30, r0
    cbcc:	11 24       	eor	r1, r1
    cbce:	80 91 e4 0f 	lds	r24, 0x0FE4
    cbd2:	e8 5a       	subi	r30, 0xA8	; 168
    cbd4:	f3 4f       	sbci	r31, 0xF3	; 243
    cbd6:	e8 0f       	add	r30, r24
    cbd8:	f1 1d       	adc	r31, r1
    cbda:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    cbdc:	81 e0       	ldi	r24, 0x01	; 1
    cbde:	88 8f       	std	Y+24, r24	; 0x18
			DrawMap2(netMessage.hud_x+11, 1, map_rocket_itm);
    cbe0:	80 91 e8 0f 	lds	r24, 0x0FE8
    cbe4:	4b ee       	ldi	r20, 0xEB	; 235
    cbe6:	5a e6       	ldi	r21, 0x6A	; 106
    cbe8:	61 e0       	ldi	r22, 0x01	; 1
    cbea:	85 5f       	subi	r24, 0xF5	; 245
    cbec:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
			SetTile(netMessage.object_pos_x, netMessage.object_pos_y, 0);
    cbf0:	40 e0       	ldi	r20, 0x00	; 0
    cbf2:	50 e0       	ldi	r21, 0x00	; 0
    cbf4:	60 91 e5 0f 	lds	r22, 0x0FE5
    cbf8:	80 91 e4 0f 	lds	r24, 0x0FE4
    cbfc:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
    cc00:	20 c0       	rjmp	.+64     	; 0xcc42 <get_net_message+0x1f0>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
		}
		else if (netMessage.code == NETITEMBOMB)
    cc02:	85 30       	cpi	r24, 0x05	; 5
    cc04:	01 f5       	brne	.+64     	; 0xcc46 <get_net_message+0x1f4>
		{
			level.level_map[netMessage.object_pos_y * 30 + netMessage.object_pos_x] = L_EMPTY;
    cc06:	60 91 e5 0f 	lds	r22, 0x0FE5
    cc0a:	80 91 e4 0f 	lds	r24, 0x0FE4
    cc0e:	9e e1       	ldi	r25, 0x1E	; 30
    cc10:	69 9f       	mul	r22, r25
    cc12:	f0 01       	movw	r30, r0
    cc14:	11 24       	eor	r1, r1
    cc16:	e8 5a       	subi	r30, 0xA8	; 168
    cc18:	f3 4f       	sbci	r31, 0xF3	; 243
    cc1a:	e8 0f       	add	r30, r24
    cc1c:	f1 1d       	adc	r31, r1
    cc1e:	11 82       	std	Z+1, r1	; 0x01
			SetTile(netMessage.object_pos_x, netMessage.object_pos_y, 0);
    cc20:	40 e0       	ldi	r20, 0x00	; 0
    cc22:	50 e0       	ldi	r21, 0x00	; 0
    cc24:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
			if (!(otherPlayer->flags & EXPLODING_FLAG))
    cc28:	f8 01       	movw	r30, r16
    cc2a:	85 89       	ldd	r24, Z+21	; 0x15
    cc2c:	80 fd       	sbrc	r24, 0
    cc2e:	09 c0       	rjmp	.+18     	; 0xcc42 <get_net_message+0x1f0>
			{
				render_score(player, netMessage.hud_x);
    cc30:	60 91 e8 0f 	lds	r22, 0x0FE8
    cc34:	ce 01       	movw	r24, r28
    cc36:	0e 94 ad 51 	call	0xa35a	; 0xa35a <render_score>
				kill_player(otherPlayer, otherPlayerHudx);
    cc3a:	6d 2d       	mov	r22, r13
    cc3c:	c8 01       	movw	r24, r16
    cc3e:	0e 94 a7 55 	call	0xab4e	; 0xab4e <kill_player>
			}
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
    cc42:	22 e0       	ldi	r18, 0x02	; 2
    cc44:	2b c0       	rjmp	.+86     	; 0xcc9c <get_net_message+0x24a>
		}
		else if (netMessage.code == NETBLOCKHIT)
    cc46:	87 30       	cpi	r24, 0x07	; 7
    cc48:	e1 f5       	brne	.+120    	; 0xccc2 <get_net_message+0x270>
		{
			explode_tile(&tile_animations, netMessage.object_pos_y * 30 + netMessage.object_pos_x);
    cc4a:	80 91 e5 0f 	lds	r24, 0x0FE5
    cc4e:	60 91 e4 0f 	lds	r22, 0x0FE4
    cc52:	70 e0       	ldi	r23, 0x00	; 0
    cc54:	fe e1       	ldi	r31, 0x1E	; 30
    cc56:	8f 9f       	mul	r24, r31
    cc58:	60 0d       	add	r22, r0
    cc5a:	71 1d       	adc	r23, r1
    cc5c:	11 24       	eor	r1, r1
    cc5e:	87 eb       	ldi	r24, 0xB7	; 183
    cc60:	9b e0       	ldi	r25, 0x0B	; 11
    cc62:	0e 94 21 56 	call	0xac42	; 0xac42 <explode_tile>
			level.level_map[netMessage.object_pos_y * 30 + netMessage.object_pos_x] = L_EMPTY;
    cc66:	e0 91 e5 0f 	lds	r30, 0x0FE5
    cc6a:	8e e1       	ldi	r24, 0x1E	; 30
    cc6c:	e8 9f       	mul	r30, r24
    cc6e:	f0 01       	movw	r30, r0
    cc70:	11 24       	eor	r1, r1
    cc72:	80 91 e4 0f 	lds	r24, 0x0FE4
    cc76:	e8 5a       	subi	r30, 0xA8	; 168
    cc78:	f3 4f       	sbci	r31, 0xF3	; 243
    cc7a:	e8 0f       	add	r30, r24
    cc7c:	f1 1d       	adc	r31, r1
    cc7e:	11 82       	std	Z+1, r1	; 0x01
			player->shot[0].hit_count--;
    cc80:	8c ad       	ldd	r24, Y+60	; 0x3c
    cc82:	81 50       	subi	r24, 0x01	; 1
    cc84:	8c af       	std	Y+60, r24	; 0x3c
			if (player->shot[0].hit_count <= 0)
    cc86:	81 11       	cpse	r24, r1
    cc88:	08 c0       	rjmp	.+16     	; 0xcc9a <get_net_message+0x248>
			{
				init_shot_state(&player->shot[0], player->shot[0].shot_type);
    cc8a:	6b ad       	ldd	r22, Y+59	; 0x3b
    cc8c:	ce 01       	movw	r24, r28
    cc8e:	c0 96       	adiw	r24, 0x30	; 48
    cc90:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
				player->active_shots--;
    cc94:	89 89       	ldd	r24, Y+17	; 0x11
    cc96:	81 50       	subi	r24, 0x01	; 1
    cc98:	89 8b       	std	Y+17, r24	; 0x11
			}
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_BRICK_EXPLODE);
    cc9a:	20 e0       	ldi	r18, 0x00	; 0
    cc9c:	40 91 5c 0f 	lds	r20, 0x0F5C
    cca0:	60 91 ea 0b 	lds	r22, 0x0BEA
    cca4:	80 91 b6 0b 	lds	r24, 0x0BB6
	}
	else
	{
		netMessage.pressed = 0;
	}
}
    cca8:	df 91       	pop	r29
    ccaa:	cf 91       	pop	r28
    ccac:	1f 91       	pop	r17
    ccae:	0f 91       	pop	r16
    ccb0:	ff 90       	pop	r15
    ccb2:	ef 90       	pop	r14
    ccb4:	df 90       	pop	r13
			if (player->shot[0].hit_count <= 0)
			{
				init_shot_state(&player->shot[0], player->shot[0].shot_type);
				player->active_shots--;
			}
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_BRICK_EXPLODE);
    ccb6:	0c 94 e9 4d 	jmp	0x9bd2	; 0x9bd2 <LBPlaySound>
		}
	}
	else
	{
		netMessage.pressed = 0;
    ccba:	10 92 e3 0f 	sts	0x0FE3, r1
    ccbe:	10 92 e2 0f 	sts	0x0FE2, r1
	}
}
    ccc2:	df 91       	pop	r29
    ccc4:	cf 91       	pop	r28
    ccc6:	1f 91       	pop	r17
    ccc8:	0f 91       	pop	r16
    ccca:	ff 90       	pop	r15
    cccc:	ef 90       	pop	r14
    ccce:	df 90       	pop	r13
    ccd0:	08 95       	ret

0000ccd2 <is_net_player>:

u8 is_net_player(Player* player)
{
    ccd2:	9c 01       	movw	r18, r24
	if (game.selection == HOSTNETGAME && player == &player2) return 1;
    ccd4:	80 91 b6 0b 	lds	r24, 0x0BB6
    ccd8:	82 30       	cpi	r24, 0x02	; 2
    ccda:	29 f4       	brne	.+10     	; 0xcce6 <is_net_player+0x14>
    ccdc:	81 e0       	ldi	r24, 0x01	; 1
    ccde:	27 54       	subi	r18, 0x47	; 71
    cce0:	3f 40       	sbci	r19, 0x0F	; 15
    cce2:	39 f4       	brne	.+14     	; 0xccf2 <is_net_player+0x20>
    cce4:	07 c0       	rjmp	.+14     	; 0xccf4 <is_net_player+0x22>
	if (game.selection == JOINNETGAME && player == &player1) return 1;
    cce6:	83 30       	cpi	r24, 0x03	; 3
    cce8:	21 f4       	brne	.+8      	; 0xccf2 <is_net_player+0x20>
    ccea:	81 e0       	ldi	r24, 0x01	; 1
    ccec:	25 5d       	subi	r18, 0xD5	; 213
    ccee:	3b 40       	sbci	r19, 0x0B	; 11
    ccf0:	09 f0       	breq	.+2      	; 0xccf4 <is_net_player+0x22>
	return 0;
    ccf2:	80 e0       	ldi	r24, 0x00	; 0
}
    ccf4:	08 95       	ret

0000ccf6 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    ccf6:	2f 92       	push	r2
    ccf8:	3f 92       	push	r3
    ccfa:	4f 92       	push	r4
    ccfc:	5f 92       	push	r5
    ccfe:	6f 92       	push	r6
    cd00:	7f 92       	push	r7
    cd02:	8f 92       	push	r8
    cd04:	9f 92       	push	r9
    cd06:	af 92       	push	r10
    cd08:	bf 92       	push	r11
    cd0a:	cf 92       	push	r12
    cd0c:	df 92       	push	r13
    cd0e:	ef 92       	push	r14
    cd10:	ff 92       	push	r15
    cd12:	0f 93       	push	r16
    cd14:	1f 93       	push	r17
    cd16:	cf 93       	push	r28
    cd18:	df 93       	push	r29
    cd1a:	00 d0       	rcall	.+0      	; 0xcd1c <collision_detect_shot+0x26>
    cd1c:	00 d0       	rcall	.+0      	; 0xcd1e <collision_detect_shot+0x28>
    cd1e:	1f 92       	push	r1
    cd20:	cd b7       	in	r28, 0x3d	; 61
    cd22:	de b7       	in	r29, 0x3e	; 62
    cd24:	3c 01       	movw	r6, r24
    cd26:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    cd28:	1a 82       	std	Y+2, r1	; 0x02
    cd2a:	19 82       	std	Y+1, r1	; 0x01
    cd2c:	1c 82       	std	Y+4, r1	; 0x04
    cd2e:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    cd30:	20 e0       	ldi	r18, 0x00	; 0
    cd32:	30 e0       	ldi	r19, 0x00	; 0
    cd34:	40 e0       	ldi	r20, 0x00	; 0
    cd36:	5e e3       	ldi	r21, 0x3E	; 62
    cd38:	db 01       	movw	r26, r22
    cd3a:	17 96       	adiw	r26, 0x07	; 7
    cd3c:	6d 91       	ld	r22, X+
    cd3e:	7d 91       	ld	r23, X+
    cd40:	8d 91       	ld	r24, X+
    cd42:	9c 91       	ld	r25, X
    cd44:	1a 97       	sbiw	r26, 0x0a	; 10
    cd46:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    cd4a:	20 e0       	ldi	r18, 0x00	; 0
    cd4c:	30 e0       	ldi	r19, 0x00	; 0
    cd4e:	40 e4       	ldi	r20, 0x40	; 64
    cd50:	50 e4       	ldi	r21, 0x40	; 64
    cd52:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    cd56:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    cd5a:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    cd5c:	20 e0       	ldi	r18, 0x00	; 0
    cd5e:	30 e0       	ldi	r19, 0x00	; 0
    cd60:	40 e0       	ldi	r20, 0x00	; 0
    cd62:	5e e3       	ldi	r21, 0x3E	; 62
    cd64:	f4 01       	movw	r30, r8
    cd66:	63 81       	ldd	r22, Z+3	; 0x03
    cd68:	74 81       	ldd	r23, Z+4	; 0x04
    cd6a:	85 81       	ldd	r24, Z+5	; 0x05
    cd6c:	96 81       	ldd	r25, Z+6	; 0x06
    cd6e:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    cd72:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    cd76:	d4 01       	movw	r26, r8
    cd78:	2c 91       	ld	r18, X
    cd7a:	41 2f       	mov	r20, r17
    cd7c:	ce 01       	movw	r24, r28
    cd7e:	01 96       	adiw	r24, 0x01	; 1
    cd80:	0e 94 ff 55 	call	0xabfe	; 0xabfe <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    cd84:	c4 01       	movw	r24, r8
    cd86:	0e 94 25 55 	call	0xaa4a	; 0xaa4a <collision_detect_boundries>
    cd8a:	88 23       	and	r24, r24
    cd8c:	69 f0       	breq	.+26     	; 0xcda8 <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    cd8e:	f4 01       	movw	r30, r8
    cd90:	63 85       	ldd	r22, Z+11	; 0x0b
    cd92:	c4 01       	movw	r24, r8
    cd94:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
		player->active_shots--;
    cd98:	d3 01       	movw	r26, r6
    cd9a:	51 96       	adiw	r26, 0x11	; 17
    cd9c:	8c 91       	ld	r24, X
    cd9e:	51 97       	sbiw	r26, 0x11	; 17
    cda0:	81 50       	subi	r24, 0x01	; 1
    cda2:	51 96       	adiw	r26, 0x11	; 17
    cda4:	8c 93       	st	X, r24
		return;
    cda6:	c7 c1       	rjmp	.+910    	; 0xd136 <collision_detect_shot+0x440>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG) && !is_net_player(&player1))
    cda8:	b4 01       	movw	r22, r8
    cdaa:	85 ed       	ldi	r24, 0xD5	; 213
    cdac:	9b e0       	ldi	r25, 0x0B	; 11
    cdae:	0e 94 78 54 	call	0xa8f0	; 0xa8f0 <player_shot>
    cdb2:	88 23       	and	r24, r24
    cdb4:	11 f1       	breq	.+68     	; 0xcdfa <collision_detect_shot+0x104>
    cdb6:	80 91 ea 0b 	lds	r24, 0x0BEA
    cdba:	80 fd       	sbrc	r24, 0
    cdbc:	1e c0       	rjmp	.+60     	; 0xcdfa <collision_detect_shot+0x104>
    cdbe:	85 ed       	ldi	r24, 0xD5	; 213
    cdc0:	9b e0       	ldi	r25, 0x0B	; 11
    cdc2:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    cdc6:	81 11       	cpse	r24, r1
    cdc8:	18 c0       	rjmp	.+48     	; 0xcdfa <collision_detect_shot+0x104>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    cdca:	80 91 57 0f 	lds	r24, 0x0F57
    cdce:	8f 5f       	subi	r24, 0xFF	; 255
    cdd0:	80 93 57 0f 	sts	0x0F57, r24
		player2.score++;
    cdd4:	80 91 56 0f 	lds	r24, 0x0F56
    cdd8:	8f 5f       	subi	r24, 0xFF	; 255
    cdda:	80 93 56 0f 	sts	0x0F56, r24
		render_score(&player2, 15);
    cdde:	6f e0       	ldi	r22, 0x0F	; 15
    cde0:	87 e4       	ldi	r24, 0x47	; 71
    cde2:	9f e0       	ldi	r25, 0x0F	; 15
    cde4:	0e 94 ad 51 	call	0xa35a	; 0xa35a <render_score>
		send_net_message(NETHIT, 0, 0);
    cde8:	40 e0       	ldi	r20, 0x00	; 0
    cdea:	60 e0       	ldi	r22, 0x00	; 0
    cdec:	80 e0       	ldi	r24, 0x00	; 0
    cdee:	0e 94 85 64 	call	0xc90a	; 0xc90a <send_net_message>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG) && !is_net_player(&player1))
	{
		p = &player1;
    cdf2:	05 ed       	ldi	r16, 0xD5	; 213
    cdf4:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    cdf6:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0);
    cdf8:	5c c0       	rjmp	.+184    	; 0xceb2 <collision_detect_shot+0x1bc>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
    cdfa:	b4 01       	movw	r22, r8
    cdfc:	87 e4       	ldi	r24, 0x47	; 71
    cdfe:	9f e0       	ldi	r25, 0x0F	; 15
    ce00:	0e 94 78 54 	call	0xa8f0	; 0xa8f0 <player_shot>
    ce04:	90 91 a6 0b 	lds	r25, 0x0BA6
    ce08:	88 23       	and	r24, r24
    ce0a:	29 f1       	breq	.+74     	; 0xce56 <collision_detect_shot+0x160>
    ce0c:	80 91 5c 0f 	lds	r24, 0x0F5C
    ce10:	80 fd       	sbrc	r24, 0
    ce12:	21 c0       	rjmp	.+66     	; 0xce56 <collision_detect_shot+0x160>
    ce14:	91 11       	cpse	r25, r1
    ce16:	1f c0       	rjmp	.+62     	; 0xce56 <collision_detect_shot+0x160>
    ce18:	87 e4       	ldi	r24, 0x47	; 71
    ce1a:	9f e0       	ldi	r25, 0x0F	; 15
    ce1c:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    ce20:	81 11       	cpse	r24, r1
    ce22:	4a c0       	rjmp	.+148    	; 0xceb8 <collision_detect_shot+0x1c2>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    ce24:	80 91 e5 0b 	lds	r24, 0x0BE5
    ce28:	8f 5f       	subi	r24, 0xFF	; 255
    ce2a:	80 93 e5 0b 	sts	0x0BE5, r24
		player1.score++;
    ce2e:	80 91 e4 0b 	lds	r24, 0x0BE4
    ce32:	8f 5f       	subi	r24, 0xFF	; 255
    ce34:	80 93 e4 0b 	sts	0x0BE4, r24
		render_score(&player1, 0);
    ce38:	60 e0       	ldi	r22, 0x00	; 0
    ce3a:	85 ed       	ldi	r24, 0xD5	; 213
    ce3c:	9b e0       	ldi	r25, 0x0B	; 11
    ce3e:	0e 94 ad 51 	call	0xa35a	; 0xa35a <render_score>
		send_net_message(NETHIT, 0, 0);
    ce42:	40 e0       	ldi	r20, 0x00	; 0
    ce44:	60 e0       	ldi	r22, 0x00	; 0
    ce46:	80 e0       	ldi	r24, 0x00	; 0
    ce48:	0e 94 85 64 	call	0xc90a	; 0xc90a <send_net_message>
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
	{
		p = &player2;
    ce4c:	07 e4       	ldi	r16, 0x47	; 71
    ce4e:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    ce50:	6f e0       	ldi	r22, 0x0F	; 15
    ce52:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
		send_net_message(NETHIT, 0, 0);
    ce54:	2e c0       	rjmp	.+92     	; 0xceb2 <collision_detect_shot+0x1bc>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    ce56:	94 30       	cpi	r25, 0x04	; 4
    ce58:	79 f5       	brne	.+94     	; 0xceb8 <collision_detect_shot+0x1c2>
	{
		if (turret_shot(&turret1, shot))
    ce5a:	b4 01       	movw	r22, r8
    ce5c:	85 e3       	ldi	r24, 0x35	; 53
    ce5e:	90 e1       	ldi	r25, 0x10	; 16
    ce60:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <turret_shot>
    ce64:	88 23       	and	r24, r24
    ce66:	41 f0       	breq	.+16     	; 0xce78 <collision_detect_shot+0x182>
		{
			turret1.lives--;
    ce68:	80 91 40 10 	lds	r24, 0x1040
    ce6c:	81 50       	subi	r24, 0x01	; 1
    ce6e:	80 93 40 10 	sts	0x1040, r24
			init_shot_state(shot, shot->shot_type);
    ce72:	f4 01       	movw	r30, r8
    ce74:	63 85       	ldd	r22, Z+11	; 0x0b
    ce76:	0f c0       	rjmp	.+30     	; 0xce96 <collision_detect_shot+0x1a0>
			game.boss_fight_player->active_shots--;
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
		else if (turret_shot(&turret2, shot))
    ce78:	b4 01       	movw	r22, r8
    ce7a:	81 e0       	ldi	r24, 0x01	; 1
    ce7c:	90 e1       	ldi	r25, 0x10	; 16
    ce7e:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <turret_shot>
    ce82:	88 23       	and	r24, r24
    ce84:	c9 f0       	breq	.+50     	; 0xceb8 <collision_detect_shot+0x1c2>
		{
			turret2.lives--;
    ce86:	80 91 0c 10 	lds	r24, 0x100C
    ce8a:	81 50       	subi	r24, 0x01	; 1
    ce8c:	80 93 0c 10 	sts	0x100C, r24
			init_shot_state(shot, shot->shot_type);
    ce90:	d4 01       	movw	r26, r8
    ce92:	1b 96       	adiw	r26, 0x0b	; 11
    ce94:	6c 91       	ld	r22, X
    ce96:	c4 01       	movw	r24, r8
    ce98:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
			game.boss_fight_player->active_shots--;
    ce9c:	e0 91 b2 0b 	lds	r30, 0x0BB2
    cea0:	f0 91 b3 0b 	lds	r31, 0x0BB3
    cea4:	81 89       	ldd	r24, Z+17	; 0x11
    cea6:	81 50       	subi	r24, 0x01	; 1
    cea8:	81 8b       	std	Z+17, r24	; 0x11
    ceaa:	86 e0       	ldi	r24, 0x06	; 6
    ceac:	0e 94 6e 49 	call	0x92dc	; 0x92dc <LBPlaySound.part.6>
    ceb0:	03 c0       	rjmp	.+6      	; 0xceb8 <collision_detect_shot+0x1c2>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
	}
	if (p)
    ceb2:	01 15       	cp	r16, r1
    ceb4:	11 05       	cpc	r17, r1
    ceb6:	59 f4       	brne	.+22     	; 0xcece <collision_detect_shot+0x1d8>
    ceb8:	fe 01       	movw	r30, r28
    ceba:	31 96       	adiw	r30, 0x01	; 1
    cebc:	2f 01       	movw	r4, r30
    cebe:	1d 82       	std	Y+5, r1	; 0x05
    cec0:	d1 2c       	mov	r13, r1
    cec2:	f1 2c       	mov	r15, r1
    cec4:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    cec6:	5e e1       	ldi	r21, 0x1E	; 30
    cec8:	25 2e       	mov	r2, r21
    ceca:	31 2c       	mov	r3, r1
    cecc:	44 c0       	rjmp	.+136    	; 0xcf56 <collision_detect_shot+0x260>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    cece:	d4 01       	movw	r26, r8
    ced0:	1b 96       	adiw	r26, 0x0b	; 11
    ced2:	6c 91       	ld	r22, X
    ced4:	c4 01       	movw	r24, r8
    ced6:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
		player->active_shots--;
    ceda:	f3 01       	movw	r30, r6
    cedc:	81 89       	ldd	r24, Z+17	; 0x11
    cede:	81 50       	subi	r24, 0x01	; 1
    cee0:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    cee2:	6f 2d       	mov	r22, r15
    cee4:	c8 01       	movw	r24, r16
    cee6:	0e 94 a7 55 	call	0xab4e	; 0xab4e <kill_player>
    ceea:	86 e0       	ldi	r24, 0x06	; 6
    ceec:	0e 94 6e 49 	call	0x92dc	; 0x92dc <LBPlaySound.part.6>
    cef0:	22 c1       	rjmp	.+580    	; 0xd136 <collision_detect_shot+0x440>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    cef2:	c5 01       	movw	r24, r10
    cef4:	0e 94 aa 53 	call	0xa754	; 0xa754 <solid_directional_tile>
    cef8:	88 23       	and	r24, r24
    cefa:	c1 f1       	breq	.+112    	; 0xcf6c <collision_detect_shot+0x276>
    cefc:	20 e0       	ldi	r18, 0x00	; 0
    cefe:	30 e0       	ldi	r19, 0x00	; 0
    cf00:	40 e0       	ldi	r20, 0x00	; 0
    cf02:	50 e4       	ldi	r21, 0x40	; 64
    cf04:	f4 01       	movw	r30, r8
    cf06:	67 81       	ldd	r22, Z+7	; 0x07
    cf08:	70 85       	ldd	r23, Z+8	; 0x08
    cf0a:	81 85       	ldd	r24, Z+9	; 0x09
    cf0c:	92 85       	ldd	r25, Z+10	; 0x0a
    cf0e:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    cf12:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    cf16:	c6 2e       	mov	r12, r22
    cf18:	20 e0       	ldi	r18, 0x00	; 0
    cf1a:	30 e0       	ldi	r19, 0x00	; 0
    cf1c:	40 e0       	ldi	r20, 0x00	; 0
    cf1e:	50 e4       	ldi	r21, 0x40	; 64
    cf20:	d4 01       	movw	r26, r8
    cf22:	13 96       	adiw	r26, 0x03	; 3
    cf24:	6d 91       	ld	r22, X+
    cf26:	7d 91       	ld	r23, X+
    cf28:	8d 91       	ld	r24, X+
    cf2a:	9c 91       	ld	r25, X
    cf2c:	16 97       	sbiw	r26, 0x06	; 6
    cf2e:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    cf32:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    cf36:	04 e0       	ldi	r16, 0x04	; 4
    cf38:	24 e0       	ldi	r18, 0x04	; 4
    cf3a:	4c 2d       	mov	r20, r12
    cf3c:	c5 01       	movw	r24, r10
    cf3e:	0e 94 d4 53 	call	0xa7a8	; 0xa7a8 <collides_directional_tile>
    cf42:	88 23       	and	r24, r24
    cf44:	99 f0       	breq	.+38     	; 0xcf6c <collision_detect_shot+0x276>
		{
			hit = hit | HIT_ANGLE;
    cf46:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    cf48:	de 2c       	mov	r13, r14
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    cf4a:	bd 81       	ldd	r27, Y+5	; 0x05
    cf4c:	b1 30       	cpi	r27, 0x01	; 1
    cf4e:	09 f4       	brne	.+2      	; 0xcf52 <collision_detect_shot+0x25c>
    cf50:	88 c0       	rjmp	.+272    	; 0xd062 <collision_detect_shot+0x36c>
    cf52:	f1 e0       	ldi	r31, 0x01	; 1
    cf54:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    cf56:	d2 01       	movw	r26, r4
    cf58:	ad 90       	ld	r10, X+
    cf5a:	bd 90       	ld	r11, X+
    cf5c:	2d 01       	movw	r4, r26
    cf5e:	f5 01       	movw	r30, r10
    cf60:	e8 5a       	subi	r30, 0xA8	; 168
    cf62:	f3 4f       	sbci	r31, 0xF3	; 243
    cf64:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    cf66:	ee 20       	and	r14, r14
    cf68:	81 f3       	breq	.-32     	; 0xcf4a <collision_detect_shot+0x254>
    cf6a:	c3 cf       	rjmp	.-122    	; 0xcef2 <collision_detect_shot+0x1fc>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    cf6c:	b1 e0       	ldi	r27, 0x01	; 1
    cf6e:	eb 12       	cpse	r14, r27
    cf70:	3b c0       	rjmp	.+118    	; 0xcfe8 <collision_detect_shot+0x2f2>
    cf72:	c5 01       	movw	r24, r10
    cf74:	b1 01       	movw	r22, r2
    cf76:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    cf7a:	6d 5f       	subi	r22, 0xFD	; 253
    cf7c:	7f 4f       	sbci	r23, 0xFF	; 255
    cf7e:	e6 2e       	mov	r14, r22
    cf80:	ee 0c       	add	r14, r14
    cf82:	ee 0c       	add	r14, r14
    cf84:	ee 0c       	add	r14, r14
    cf86:	08 2f       	mov	r16, r24
    cf88:	00 0f       	add	r16, r16
    cf8a:	00 0f       	add	r16, r16
    cf8c:	00 0f       	add	r16, r16
    cf8e:	20 e0       	ldi	r18, 0x00	; 0
    cf90:	30 e0       	ldi	r19, 0x00	; 0
    cf92:	40 e0       	ldi	r20, 0x00	; 0
    cf94:	50 e4       	ldi	r21, 0x40	; 64
    cf96:	f4 01       	movw	r30, r8
    cf98:	67 81       	ldd	r22, Z+7	; 0x07
    cf9a:	70 85       	ldd	r23, Z+8	; 0x08
    cf9c:	81 85       	ldd	r24, Z+9	; 0x09
    cf9e:	92 85       	ldd	r25, Z+10	; 0x0a
    cfa0:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    cfa4:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    cfa8:	b6 2e       	mov	r11, r22
    cfaa:	20 e0       	ldi	r18, 0x00	; 0
    cfac:	30 e0       	ldi	r19, 0x00	; 0
    cfae:	40 e0       	ldi	r20, 0x00	; 0
    cfb0:	50 e4       	ldi	r21, 0x40	; 64
    cfb2:	d4 01       	movw	r26, r8
    cfb4:	13 96       	adiw	r26, 0x03	; 3
    cfb6:	6d 91       	ld	r22, X+
    cfb8:	7d 91       	ld	r23, X+
    cfba:	8d 91       	ld	r24, X+
    cfbc:	9c 91       	ld	r25, X
    cfbe:	16 97       	sbiw	r26, 0x06	; 6
    cfc0:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    cfc4:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    cfc8:	86 2f       	mov	r24, r22
    cfca:	38 e0       	ldi	r19, 0x08	; 8
    cfcc:	a3 2e       	mov	r10, r19
    cfce:	48 e0       	ldi	r20, 0x08	; 8
    cfd0:	c4 2e       	mov	r12, r20
    cfd2:	24 e0       	ldi	r18, 0x04	; 4
    cfd4:	44 e0       	ldi	r20, 0x04	; 4
    cfd6:	6b 2d       	mov	r22, r11
    cfd8:	0e 94 b5 4c 	call	0x996a	; 0x996a <LBCollides>
    cfdc:	88 23       	and	r24, r24
    cfde:	09 f4       	brne	.+2      	; 0xcfe2 <collision_detect_shot+0x2ec>
    cfe0:	b4 cf       	rjmp	.-152    	; 0xcf4a <collision_detect_shot+0x254>
		{
			hit = hit | HIT_BRICK;
    cfe2:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    cfe4:	fd 80       	ldd	r15, Y+5	; 0x05
    cfe6:	b1 cf       	rjmp	.-158    	; 0xcf4a <collision_detect_shot+0x254>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    cfe8:	b2 e0       	ldi	r27, 0x02	; 2
    cfea:	eb 12       	cpse	r14, r27
    cfec:	ae cf       	rjmp	.-164    	; 0xcf4a <collision_detect_shot+0x254>
    cfee:	c5 01       	movw	r24, r10
    cff0:	b1 01       	movw	r22, r2
    cff2:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    cff6:	6d 5f       	subi	r22, 0xFD	; 253
    cff8:	7f 4f       	sbci	r23, 0xFF	; 255
    cffa:	e6 2e       	mov	r14, r22
    cffc:	ee 0c       	add	r14, r14
    cffe:	ee 0c       	add	r14, r14
    d000:	ee 0c       	add	r14, r14
    d002:	08 2f       	mov	r16, r24
    d004:	00 0f       	add	r16, r16
    d006:	00 0f       	add	r16, r16
    d008:	00 0f       	add	r16, r16
    d00a:	20 e0       	ldi	r18, 0x00	; 0
    d00c:	30 e0       	ldi	r19, 0x00	; 0
    d00e:	40 e0       	ldi	r20, 0x00	; 0
    d010:	50 e4       	ldi	r21, 0x40	; 64
    d012:	f4 01       	movw	r30, r8
    d014:	67 81       	ldd	r22, Z+7	; 0x07
    d016:	70 85       	ldd	r23, Z+8	; 0x08
    d018:	81 85       	ldd	r24, Z+9	; 0x09
    d01a:	92 85       	ldd	r25, Z+10	; 0x0a
    d01c:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d020:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d024:	b6 2e       	mov	r11, r22
    d026:	20 e0       	ldi	r18, 0x00	; 0
    d028:	30 e0       	ldi	r19, 0x00	; 0
    d02a:	40 e0       	ldi	r20, 0x00	; 0
    d02c:	50 e4       	ldi	r21, 0x40	; 64
    d02e:	d4 01       	movw	r26, r8
    d030:	13 96       	adiw	r26, 0x03	; 3
    d032:	6d 91       	ld	r22, X+
    d034:	7d 91       	ld	r23, X+
    d036:	8d 91       	ld	r24, X+
    d038:	9c 91       	ld	r25, X
    d03a:	16 97       	sbiw	r26, 0x06	; 6
    d03c:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d040:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d044:	86 2f       	mov	r24, r22
    d046:	98 e0       	ldi	r25, 0x08	; 8
    d048:	a9 2e       	mov	r10, r25
    d04a:	28 e0       	ldi	r18, 0x08	; 8
    d04c:	c2 2e       	mov	r12, r18
    d04e:	24 e0       	ldi	r18, 0x04	; 4
    d050:	44 e0       	ldi	r20, 0x04	; 4
    d052:	6b 2d       	mov	r22, r11
    d054:	0e 94 b5 4c 	call	0x996a	; 0x996a <LBCollides>
    d058:	88 23       	and	r24, r24
    d05a:	09 f4       	brne	.+2      	; 0xd05e <collision_detect_shot+0x368>
    d05c:	76 cf       	rjmp	.-276    	; 0xcf4a <collision_detect_shot+0x254>
        {
		    hit = hit | HIT_METAL;
    d05e:	11 60       	ori	r17, 0x01	; 1
    d060:	74 cf       	rjmp	.-280    	; 0xcf4a <collision_detect_shot+0x254>
        }
	}
	
	if (hit & HIT_ANGLE)
    d062:	12 ff       	sbrs	r17, 2
    d064:	0f c0       	rjmp	.+30     	; 0xd084 <collision_detect_shot+0x38e>
	{
		recoil_sprite_fine(player, &shot->shared);
    d066:	b4 01       	movw	r22, r8
    d068:	c3 01       	movw	r24, r6
    d06a:	0e 94 62 53 	call	0xa6c4	; 0xa6c4 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    d06e:	b4 01       	movw	r22, r8
    d070:	8d 2d       	mov	r24, r13
    d072:	0e 94 5f 56 	call	0xacbe	; 0xacbe <richochet>
		shot->rebounds--;
    d076:	f4 01       	movw	r30, r8
    d078:	85 85       	ldd	r24, Z+13	; 0x0d
    d07a:	81 50       	subi	r24, 0x01	; 1
    d07c:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    d07e:	81 11       	cpse	r24, r1
    d080:	51 c0       	rjmp	.+162    	; 0xd124 <collision_detect_shot+0x42e>
    d082:	45 c0       	rjmp	.+138    	; 0xd10e <collision_detect_shot+0x418>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_METAL);
	}
	else if ((hit & HIT_BRICK) && !is_net_player(player))
    d084:	11 ff       	sbrs	r17, 1
    d086:	40 c0       	rjmp	.+128    	; 0xd108 <collision_detect_shot+0x412>
    d088:	c3 01       	movw	r24, r6
    d08a:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    d08e:	81 11       	cpse	r24, r1
    d090:	3b c0       	rjmp	.+118    	; 0xd108 <collision_detect_shot+0x412>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    d092:	ef 2c       	mov	r14, r15
    d094:	f1 2c       	mov	r15, r1
    d096:	ee 0c       	add	r14, r14
    d098:	ff 1c       	adc	r15, r15
    d09a:	01 e0       	ldi	r16, 0x01	; 1
    d09c:	10 e0       	ldi	r17, 0x00	; 0
    d09e:	0c 0f       	add	r16, r28
    d0a0:	1d 1f       	adc	r17, r29
    d0a2:	0e 0d       	add	r16, r14
    d0a4:	1f 1d       	adc	r17, r15
    d0a6:	f8 01       	movw	r30, r16
    d0a8:	60 81       	ld	r22, Z
    d0aa:	71 81       	ldd	r23, Z+1	; 0x01
    d0ac:	87 eb       	ldi	r24, 0xB7	; 183
    d0ae:	9b e0       	ldi	r25, 0x0B	; 11
    d0b0:	0e 94 21 56 	call	0xac42	; 0xac42 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    d0b4:	d8 01       	movw	r26, r16
    d0b6:	ed 91       	ld	r30, X+
    d0b8:	fc 91       	ld	r31, X
    d0ba:	e8 5a       	subi	r30, 0xA8	; 168
    d0bc:	f3 4f       	sbci	r31, 0xF3	; 243
    d0be:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    d0c0:	f4 01       	movw	r30, r8
    d0c2:	84 85       	ldd	r24, Z+12	; 0x0c
    d0c4:	81 50       	subi	r24, 0x01	; 1
    d0c6:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    d0c8:	81 11       	cpse	r24, r1
    d0ca:	0b c0       	rjmp	.+22     	; 0xd0e2 <collision_detect_shot+0x3ec>
		{
			init_shot_state(shot, shot->shot_type);
    d0cc:	63 85       	ldd	r22, Z+11	; 0x0b
    d0ce:	c4 01       	movw	r24, r8
    d0d0:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
			player->active_shots--;
    d0d4:	d3 01       	movw	r26, r6
    d0d6:	51 96       	adiw	r26, 0x11	; 17
    d0d8:	8c 91       	ld	r24, X
    d0da:	51 97       	sbiw	r26, 0x11	; 17
    d0dc:	81 50       	subi	r24, 0x01	; 1
    d0de:	51 96       	adiw	r26, 0x11	; 17
    d0e0:	8c 93       	st	X, r24
		}
		send_net_message(NETBLOCKHIT, tiles[brick_index] % 30, tiles[brick_index] / 30);
    d0e2:	e1 e0       	ldi	r30, 0x01	; 1
    d0e4:	f0 e0       	ldi	r31, 0x00	; 0
    d0e6:	ec 0f       	add	r30, r28
    d0e8:	fd 1f       	adc	r31, r29
    d0ea:	ee 0d       	add	r30, r14
    d0ec:	ff 1d       	adc	r31, r15
    d0ee:	80 81       	ld	r24, Z
    d0f0:	91 81       	ldd	r25, Z+1	; 0x01
    d0f2:	6e e1       	ldi	r22, 0x1E	; 30
    d0f4:	70 e0       	ldi	r23, 0x00	; 0
    d0f6:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    d0fa:	46 2f       	mov	r20, r22
    d0fc:	68 2f       	mov	r22, r24
    d0fe:	87 e0       	ldi	r24, 0x07	; 7
    d100:	0e 94 85 64 	call	0xc90a	; 0xc90a <send_net_message>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_BRICK_EXPLODE);
    d104:	20 e0       	ldi	r18, 0x00	; 0
    d106:	0f c0       	rjmp	.+30     	; 0xd126 <collision_detect_shot+0x430>
	}
	else if (hit & HIT_METAL)
    d108:	10 ff       	sbrs	r17, 0
    d10a:	15 c0       	rjmp	.+42     	; 0xd136 <collision_detect_shot+0x440>
	{
        init_shot_state(shot, shot->shot_type);
    d10c:	f4 01       	movw	r30, r8
    d10e:	63 85       	ldd	r22, Z+11	; 0x0b
    d110:	c4 01       	movw	r24, r8
    d112:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
        player->active_shots--;
    d116:	d3 01       	movw	r26, r6
    d118:	51 96       	adiw	r26, 0x11	; 17
    d11a:	8c 91       	ld	r24, X
    d11c:	51 97       	sbiw	r26, 0x11	; 17
    d11e:	81 50       	subi	r24, 0x01	; 1
    d120:	51 96       	adiw	r26, 0x11	; 17
    d122:	8c 93       	st	X, r24
        LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_METAL);
    d124:	23 e0       	ldi	r18, 0x03	; 3
    d126:	40 91 5c 0f 	lds	r20, 0x0F5C
    d12a:	60 91 ea 0b 	lds	r22, 0x0BEA
    d12e:	80 91 b6 0b 	lds	r24, 0x0BB6
    d132:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
	}
}
    d136:	0f 90       	pop	r0
    d138:	0f 90       	pop	r0
    d13a:	0f 90       	pop	r0
    d13c:	0f 90       	pop	r0
    d13e:	0f 90       	pop	r0
    d140:	df 91       	pop	r29
    d142:	cf 91       	pop	r28
    d144:	1f 91       	pop	r17
    d146:	0f 91       	pop	r16
    d148:	ff 90       	pop	r15
    d14a:	ef 90       	pop	r14
    d14c:	df 90       	pop	r13
    d14e:	cf 90       	pop	r12
    d150:	bf 90       	pop	r11
    d152:	af 90       	pop	r10
    d154:	9f 90       	pop	r9
    d156:	8f 90       	pop	r8
    d158:	7f 90       	pop	r7
    d15a:	6f 90       	pop	r6
    d15c:	5f 90       	pop	r5
    d15e:	4f 90       	pop	r4
    d160:	3f 90       	pop	r3
    d162:	2f 90       	pop	r2
    d164:	08 95       	ret

0000d166 <update_player>:
		return FRAME_TIME * s->speed;
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
}

void update_player(JoyPadState* p, Player* player)
{
    d166:	cf 92       	push	r12
    d168:	df 92       	push	r13
    d16a:	ef 92       	push	r14
    d16c:	ff 92       	push	r15
    d16e:	0f 93       	push	r16
    d170:	1f 93       	push	r17
    d172:	cf 93       	push	r28
    d174:	df 93       	push	r29
    d176:	00 d0       	rcall	.+0      	; 0xd178 <update_player+0x12>
    d178:	00 d0       	rcall	.+0      	; 0xd17a <update_player+0x14>
    d17a:	cd b7       	in	r28, 0x3d	; 61
    d17c:	de b7       	in	r29, 0x3e	; 62
    d17e:	8c 01       	movw	r16, r24
    d180:	6b 01       	movw	r12, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    d182:	fb 01       	movw	r30, r22
    d184:	12 82       	std	Z+2, r1	; 0x02
	player->old_active_shots = player->active_shots;
    d186:	81 89       	ldd	r24, Z+17	; 0x11
    d188:	82 8b       	std	Z+18, r24	; 0x12
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    d18a:	f8 01       	movw	r30, r16
    d18c:	80 81       	ld	r24, Z
    d18e:	83 ff       	sbrs	r24, 3
    d190:	1b c0       	rjmp	.+54     	; 0xd1c8 <update_player+0x62>
    d192:	80 91 a6 0b 	lds	r24, 0x0BA6
    d196:	81 11       	cpse	r24, r1
    d198:	17 c0       	rjmp	.+46     	; 0xd1c8 <update_player+0x62>
	{
#if JAMMA
#else
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    d19a:	24 e0       	ldi	r18, 0x04	; 4
    d19c:	40 91 5c 0f 	lds	r20, 0x0F5C
    d1a0:	60 91 ea 0b 	lds	r22, 0x0BEA
    d1a4:	80 91 b6 0b 	lds	r24, 0x0BB6
    d1a8:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		send_smart_net_message(player, p, NETPAUSETOGGLE);
    d1ac:	48 e0       	ldi	r20, 0x08	; 8
    d1ae:	b8 01       	movw	r22, r16
    d1b0:	c6 01       	movw	r24, r12
    d1b2:	0e 94 16 65 	call	0xca2c	; 0xca2c <send_smart_net_message>
		game.paused = game.paused ^ 1;
    d1b6:	90 91 a5 0b 	lds	r25, 0x0BA5
    d1ba:	81 e0       	ldi	r24, 0x01	; 1
    d1bc:	89 27       	eor	r24, r25
    d1be:	80 93 a5 0b 	sts	0x0BA5, r24
		load_level_tiles(false);
    d1c2:	80 e0       	ldi	r24, 0x00	; 0
    d1c4:	0e 94 8c 57 	call	0xaf18	; 0xaf18 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    d1c8:	80 91 a5 0b 	lds	r24, 0x0BA5
    d1cc:	81 11       	cpse	r24, r1
    d1ce:	a6 c0       	rjmp	.+332    	; 0xd31c <update_player+0x1b6>
    d1d0:	f6 01       	movw	r30, r12
    d1d2:	85 89       	ldd	r24, Z+21	; 0x15
    d1d4:	80 fd       	sbrc	r24, 0
    d1d6:	a2 c0       	rjmp	.+324    	; 0xd31c <update_player+0x1b6>
	{
		player->shared.speed = player->max_speed;
    d1d8:	87 89       	ldd	r24, Z+23	; 0x17
    d1da:	81 83       	std	Z+1, r24	; 0x01
		if ((p->held & BTN_UP))
    d1dc:	f8 01       	movw	r30, r16
    d1de:	84 81       	ldd	r24, Z+4	; 0x04
    d1e0:	84 ff       	sbrs	r24, 4
    d1e2:	10 c0       	rjmp	.+32     	; 0xd204 <update_player+0x9e>
		{
			player->shared.direction = D_UP;
    d1e4:	f6 01       	movw	r30, r12
    d1e6:	10 82       	st	Z, r1
			player->shared.y -= get_delta(player, &player->shared);
    d1e8:	b6 01       	movw	r22, r12
    d1ea:	c6 01       	movw	r24, r12
    d1ec:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    d1f0:	9b 01       	movw	r18, r22
    d1f2:	ac 01       	movw	r20, r24
    d1f4:	f6 01       	movw	r30, r12
    d1f6:	67 81       	ldd	r22, Z+7	; 0x07
    d1f8:	70 85       	ldd	r23, Z+8	; 0x08
    d1fa:	81 85       	ldd	r24, Z+9	; 0x09
    d1fc:	92 85       	ldd	r25, Z+10	; 0x0a
    d1fe:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    d202:	25 c0       	rjmp	.+74     	; 0xd24e <update_player+0xe8>
		}
		else if ((p->held & BTN_RIGHT))
    d204:	87 ff       	sbrs	r24, 7
    d206:	11 c0       	rjmp	.+34     	; 0xd22a <update_player+0xc4>
		{
			player->shared.direction = D_RIGHT;
    d208:	81 e0       	ldi	r24, 0x01	; 1
    d20a:	f6 01       	movw	r30, r12
    d20c:	80 83       	st	Z, r24
			player->shared.x += get_delta(player, &player->shared);
    d20e:	b6 01       	movw	r22, r12
    d210:	c6 01       	movw	r24, r12
    d212:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    d216:	9b 01       	movw	r18, r22
    d218:	ac 01       	movw	r20, r24
    d21a:	f6 01       	movw	r30, r12
    d21c:	63 81       	ldd	r22, Z+3	; 0x03
    d21e:	74 81       	ldd	r23, Z+4	; 0x04
    d220:	85 81       	ldd	r24, Z+5	; 0x05
    d222:	96 81       	ldd	r25, Z+6	; 0x06
    d224:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d228:	2a c0       	rjmp	.+84     	; 0xd27e <update_player+0x118>
		}
		else if ((p->held & BTN_DOWN))
    d22a:	85 ff       	sbrs	r24, 5
    d22c:	16 c0       	rjmp	.+44     	; 0xd25a <update_player+0xf4>
		{
			player->shared.direction = D_DOWN;
    d22e:	82 e0       	ldi	r24, 0x02	; 2
    d230:	f6 01       	movw	r30, r12
    d232:	80 83       	st	Z, r24
			player->shared.y += get_delta(player, &player->shared);
    d234:	b6 01       	movw	r22, r12
    d236:	c6 01       	movw	r24, r12
    d238:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    d23c:	9b 01       	movw	r18, r22
    d23e:	ac 01       	movw	r20, r24
    d240:	f6 01       	movw	r30, r12
    d242:	67 81       	ldd	r22, Z+7	; 0x07
    d244:	70 85       	ldd	r23, Z+8	; 0x08
    d246:	81 85       	ldd	r24, Z+9	; 0x09
    d248:	92 85       	ldd	r25, Z+10	; 0x0a
    d24a:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d24e:	f6 01       	movw	r30, r12
    d250:	67 83       	std	Z+7, r22	; 0x07
    d252:	70 87       	std	Z+8, r23	; 0x08
    d254:	81 87       	std	Z+9, r24	; 0x09
    d256:	92 87       	std	Z+10, r25	; 0x0a
    d258:	1a c0       	rjmp	.+52     	; 0xd28e <update_player+0x128>
		}
		else if ((p->held & BTN_LEFT))
    d25a:	86 ff       	sbrs	r24, 6
    d25c:	16 c0       	rjmp	.+44     	; 0xd28a <update_player+0x124>
		{
			player->shared.direction = D_LEFT;
    d25e:	83 e0       	ldi	r24, 0x03	; 3
    d260:	f6 01       	movw	r30, r12
    d262:	80 83       	st	Z, r24
			player->shared.x -= get_delta(player, &player->shared);
    d264:	b6 01       	movw	r22, r12
    d266:	c6 01       	movw	r24, r12
    d268:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    d26c:	9b 01       	movw	r18, r22
    d26e:	ac 01       	movw	r20, r24
    d270:	f6 01       	movw	r30, r12
    d272:	63 81       	ldd	r22, Z+3	; 0x03
    d274:	74 81       	ldd	r23, Z+4	; 0x04
    d276:	85 81       	ldd	r24, Z+5	; 0x05
    d278:	96 81       	ldd	r25, Z+6	; 0x06
    d27a:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    d27e:	f6 01       	movw	r30, r12
    d280:	63 83       	std	Z+3, r22	; 0x03
    d282:	74 83       	std	Z+4, r23	; 0x04
    d284:	85 83       	std	Z+5, r24	; 0x05
    d286:	96 83       	std	Z+6, r25	; 0x06
    d288:	02 c0       	rjmp	.+4      	; 0xd28e <update_player+0x128>
		}
		else
		{
			player->shared.speed = 0;
    d28a:	f6 01       	movw	r30, r12
    d28c:	11 82       	std	Z+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    d28e:	c8 01       	movw	r24, r16
    d290:	0e 94 65 51 	call	0xa2ca	; 0xa2ca <shoot_pressed>
    d294:	88 23       	and	r24, r24
    d296:	09 f4       	brne	.+2      	; 0xd29a <update_player+0x134>
    d298:	41 c0       	rjmp	.+130    	; 0xd31c <update_player+0x1b6>
    d29a:	f6 01       	movw	r30, r12
    d29c:	81 89       	ldd	r24, Z+17	; 0x11
    d29e:	81 11       	cpse	r24, r1
    d2a0:	3d c0       	rjmp	.+122    	; 0xd31c <update_player+0x1b6>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    d2a2:	86 ad       	ldd	r24, Z+62	; 0x3e
    d2a4:	81 11       	cpse	r24, r1
    d2a6:	3a c0       	rjmp	.+116    	; 0xd31c <update_player+0x1b6>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    d2a8:	76 01       	movw	r14, r12
    d2aa:	f0 e3       	ldi	r31, 0x30	; 48
    d2ac:	ef 0e       	add	r14, r31
    d2ae:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					send_smart_net_message(player, p, NETSHOOT);
    d2b0:	42 e0       	ldi	r20, 0x02	; 2
    d2b2:	b8 01       	movw	r22, r16
    d2b4:	c6 01       	movw	r24, r12
    d2b6:	0e 94 16 65 	call	0xca2c	; 0xca2c <send_smart_net_message>
					if (player->has_rocket)
    d2ba:	f6 01       	movw	r30, r12
    d2bc:	80 8d       	ldd	r24, Z+24	; 0x18
    d2be:	88 23       	and	r24, r24
    d2c0:	51 f0       	breq	.+20     	; 0xd2d6 <update_player+0x170>
					{
						init_shot_state(shot, ROCKET_SHOT);
    d2c2:	61 e0       	ldi	r22, 0x01	; 1
    d2c4:	c7 01       	movw	r24, r14
    d2c6:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    d2ca:	61 e0       	ldi	r22, 0x01	; 1
    d2cc:	c7 01       	movw	r24, r14
    d2ce:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <set_shot_animations>
						LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ROCKET);
    d2d2:	25 e0       	ldi	r18, 0x05	; 5
    d2d4:	09 c0       	rjmp	.+18     	; 0xd2e8 <update_player+0x182>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    d2d6:	60 e0       	ldi	r22, 0x00	; 0
    d2d8:	c7 01       	movw	r24, r14
    d2da:	0e 94 61 4e 	call	0x9cc2	; 0x9cc2 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    d2de:	60 e0       	ldi	r22, 0x00	; 0
    d2e0:	c7 01       	movw	r24, r14
    d2e2:	0e 94 7e 4e 	call	0x9cfc	; 0x9cfc <set_shot_animations>
						LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_CANNONBALL);
    d2e6:	21 e0       	ldi	r18, 0x01	; 1
    d2e8:	40 91 5c 0f 	lds	r20, 0x0F5C
    d2ec:	60 91 ea 0b 	lds	r22, 0x0BEA
    d2f0:	80 91 b6 0b 	lds	r24, 0x0BB6
    d2f4:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
					}
					player->active_shots++;
    d2f8:	f6 01       	movw	r30, r12
    d2fa:	81 89       	ldd	r24, Z+17	; 0x11
    d2fc:	8f 5f       	subi	r24, 0xFF	; 255
    d2fe:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    d300:	80 81       	ld	r24, Z
    d302:	80 ab       	std	Z+48, r24	; 0x30
					position_shot(player, shot);
    d304:	b7 01       	movw	r22, r14
    d306:	c6 01       	movw	r24, r12
    d308:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <position_shot>
					shot->active = 1;
    d30c:	81 e0       	ldi	r24, 0x01	; 1
    d30e:	f6 01       	movw	r30, r12
    d310:	86 af       	std	Z+62, r24	; 0x3e
					if (player->has_over_speed)
    d312:	81 8d       	ldd	r24, Z+25	; 0x19
    d314:	88 23       	and	r24, r24
    d316:	11 f0       	breq	.+4      	; 0xd31c <update_player+0x1b6>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    d318:	8a ea       	ldi	r24, 0xAA	; 170
    d31a:	81 ab       	std	Z+49, r24	; 0x31
				}
			}
		}
	}
	
	if (!game.paused)
    d31c:	80 91 a5 0b 	lds	r24, 0x0BA5
    d320:	81 11       	cpse	r24, r1
    d322:	86 c0       	rjmp	.+268    	; 0xd430 <update_player+0x2ca>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    d324:	86 01       	movw	r16, r12
    d326:	00 5d       	subi	r16, 0xD0	; 208
    d328:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    d32a:	f6 01       	movw	r30, r12
    d32c:	86 ad       	ldd	r24, Z+62	; 0x3e
    d32e:	88 23       	and	r24, r24
    d330:	09 f4       	brne	.+2      	; 0xd334 <update_player+0x1ce>
    d332:	9f c0       	rjmp	.+318    	; 0xd472 <update_player+0x30c>
			{
				switch (shot->shared.direction)
    d334:	80 a9       	ldd	r24, Z+48	; 0x30
    d336:	81 30       	cpi	r24, 0x01	; 1
    d338:	11 f1       	breq	.+68     	; 0xd37e <update_player+0x218>
    d33a:	98 f0       	brcs	.+38     	; 0xd362 <update_player+0x1fc>
    d33c:	82 30       	cpi	r24, 0x02	; 2
    d33e:	69 f1       	breq	.+90     	; 0xd39a <update_player+0x234>
    d340:	83 30       	cpi	r24, 0x03	; 3
    d342:	09 f0       	breq	.+2      	; 0xd346 <update_player+0x1e0>
    d344:	42 c0       	rjmp	.+132    	; 0xd3ca <update_player+0x264>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d346:	b8 01       	movw	r22, r16
    d348:	c6 01       	movw	r24, r12
    d34a:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    d34e:	9b 01       	movw	r18, r22
    d350:	ac 01       	movw	r20, r24
    d352:	f6 01       	movw	r30, r12
    d354:	63 a9       	ldd	r22, Z+51	; 0x33
    d356:	74 a9       	ldd	r23, Z+52	; 0x34
    d358:	85 a9       	ldd	r24, Z+53	; 0x35
    d35a:	96 a9       	ldd	r25, Z+54	; 0x36
    d35c:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    d360:	2f c0       	rjmp	.+94     	; 0xd3c0 <update_player+0x25a>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    d362:	b8 01       	movw	r22, r16
    d364:	c6 01       	movw	r24, r12
    d366:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    d36a:	9b 01       	movw	r18, r22
    d36c:	ac 01       	movw	r20, r24
    d36e:	f6 01       	movw	r30, r12
    d370:	67 a9       	ldd	r22, Z+55	; 0x37
    d372:	70 ad       	ldd	r23, Z+56	; 0x38
    d374:	81 ad       	ldd	r24, Z+57	; 0x39
    d376:	92 ad       	ldd	r25, Z+58	; 0x3a
    d378:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    d37c:	1b c0       	rjmp	.+54     	; 0xd3b4 <update_player+0x24e>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    d37e:	b8 01       	movw	r22, r16
    d380:	c6 01       	movw	r24, r12
    d382:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    d386:	9b 01       	movw	r18, r22
    d388:	ac 01       	movw	r20, r24
    d38a:	f6 01       	movw	r30, r12
    d38c:	63 a9       	ldd	r22, Z+51	; 0x33
    d38e:	74 a9       	ldd	r23, Z+52	; 0x34
    d390:	85 a9       	ldd	r24, Z+53	; 0x35
    d392:	96 a9       	ldd	r25, Z+54	; 0x36
    d394:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d398:	13 c0       	rjmp	.+38     	; 0xd3c0 <update_player+0x25a>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    d39a:	b8 01       	movw	r22, r16
    d39c:	c6 01       	movw	r24, r12
    d39e:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    d3a2:	9b 01       	movw	r18, r22
    d3a4:	ac 01       	movw	r20, r24
    d3a6:	f6 01       	movw	r30, r12
    d3a8:	67 a9       	ldd	r22, Z+55	; 0x37
    d3aa:	70 ad       	ldd	r23, Z+56	; 0x38
    d3ac:	81 ad       	ldd	r24, Z+57	; 0x39
    d3ae:	92 ad       	ldd	r25, Z+58	; 0x3a
    d3b0:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d3b4:	f6 01       	movw	r30, r12
    d3b6:	67 ab       	std	Z+55, r22	; 0x37
    d3b8:	70 af       	std	Z+56, r23	; 0x38
    d3ba:	81 af       	std	Z+57, r24	; 0x39
    d3bc:	92 af       	std	Z+58, r25	; 0x3a
    d3be:	05 c0       	rjmp	.+10     	; 0xd3ca <update_player+0x264>
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d3c0:	f6 01       	movw	r30, r12
    d3c2:	63 ab       	std	Z+51, r22	; 0x33
    d3c4:	74 ab       	std	Z+52, r23	; 0x34
    d3c6:	85 ab       	std	Z+53, r24	; 0x35
    d3c8:	96 ab       	std	Z+54, r25	; 0x36
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    d3ca:	f6 01       	movw	r30, r12
    d3cc:	f7 ac       	ldd	r15, Z+63	; 0x3f
    d3ce:	f8 e0       	ldi	r31, 0x08	; 8
    d3d0:	ff 15       	cp	r31, r15
    d3d2:	38 f0       	brcs	.+14     	; 0xd3e2 <update_player+0x27c>
    d3d4:	b8 01       	movw	r22, r16
    d3d6:	c6 01       	movw	r24, r12
    d3d8:	0e 94 6f 51 	call	0xa2de	; 0xa2de <get_delta>
    d3dc:	9b 01       	movw	r18, r22
    d3de:	ac 01       	movw	r20, r24
    d3e0:	03 c0       	rjmp	.+6      	; 0xd3e8 <update_player+0x282>
    d3e2:	20 e0       	ldi	r18, 0x00	; 0
    d3e4:	30 e0       	ldi	r19, 0x00	; 0
    d3e6:	a9 01       	movw	r20, r18
    d3e8:	6f 2d       	mov	r22, r15
    d3ea:	70 e0       	ldi	r23, 0x00	; 0
    d3ec:	80 e0       	ldi	r24, 0x00	; 0
    d3ee:	90 e0       	ldi	r25, 0x00	; 0
    d3f0:	29 83       	std	Y+1, r18	; 0x01
    d3f2:	3a 83       	std	Y+2, r19	; 0x02
    d3f4:	4b 83       	std	Y+3, r20	; 0x03
    d3f6:	5c 83       	std	Y+4, r21	; 0x04
    d3f8:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <__floatsisf>
    d3fc:	29 81       	ldd	r18, Y+1	; 0x01
    d3fe:	3a 81       	ldd	r19, Y+2	; 0x02
    d400:	4b 81       	ldd	r20, Y+3	; 0x03
    d402:	5c 81       	ldd	r21, Y+4	; 0x04
    d404:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d408:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d40c:	f6 01       	movw	r30, r12
    d40e:	67 af       	std	Z+63, r22	; 0x3f
				collision_detect_shot(player, shot);
    d410:	b8 01       	movw	r22, r16
    d412:	c6 01       	movw	r24, r12
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			exit_game();
			send_smart_net_message(player, p, NETEXIT);
		}
	}
}
    d414:	0f 90       	pop	r0
    d416:	0f 90       	pop	r0
    d418:	0f 90       	pop	r0
    d41a:	0f 90       	pop	r0
    d41c:	df 91       	pop	r29
    d41e:	cf 91       	pop	r28
    d420:	1f 91       	pop	r17
    d422:	0f 91       	pop	r16
    d424:	ff 90       	pop	r15
    d426:	ef 90       	pop	r14
    d428:	df 90       	pop	r13
    d42a:	cf 90       	pop	r12
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    d42c:	0c 94 7b 66 	jmp	0xccf6	; 0xccf6 <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d430:	f8 01       	movw	r30, r16
    d432:	80 81       	ld	r24, Z
    d434:	91 81       	ldd	r25, Z+1	; 0x01
    d436:	91 ff       	sbrs	r25, 1
    d438:	1c c0       	rjmp	.+56     	; 0xd472 <update_player+0x30c>
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    d43a:	24 e0       	ldi	r18, 0x04	; 4
    d43c:	40 91 5c 0f 	lds	r20, 0x0F5C
    d440:	60 91 ea 0b 	lds	r22, 0x0BEA
    d444:	80 91 b6 0b 	lds	r24, 0x0BB6
    d448:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
			exit_game();
    d44c:	0e 94 0d 5b 	call	0xb61a	; 0xb61a <exit_game>
			send_smart_net_message(player, p, NETEXIT);
    d450:	49 e0       	ldi	r20, 0x09	; 9
    d452:	b8 01       	movw	r22, r16
    d454:	c6 01       	movw	r24, r12
		}
	}
}
    d456:	0f 90       	pop	r0
    d458:	0f 90       	pop	r0
    d45a:	0f 90       	pop	r0
    d45c:	0f 90       	pop	r0
    d45e:	df 91       	pop	r29
    d460:	cf 91       	pop	r28
    d462:	1f 91       	pop	r17
    d464:	0f 91       	pop	r16
    d466:	ff 90       	pop	r15
    d468:	ef 90       	pop	r14
    d46a:	df 90       	pop	r13
    d46c:	cf 90       	pop	r12
	{
		if (p->pressed & BTN_X)
		{
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
			exit_game();
			send_smart_net_message(player, p, NETEXIT);
    d46e:	0c 94 16 65 	jmp	0xca2c	; 0xca2c <send_smart_net_message>
		}
	}
}
    d472:	0f 90       	pop	r0
    d474:	0f 90       	pop	r0
    d476:	0f 90       	pop	r0
    d478:	0f 90       	pop	r0
    d47a:	df 91       	pop	r29
    d47c:	cf 91       	pop	r28
    d47e:	1f 91       	pop	r17
    d480:	0f 91       	pop	r16
    d482:	ff 90       	pop	r15
    d484:	ef 90       	pop	r14
    d486:	df 90       	pop	r13
    d488:	cf 90       	pop	r12
    d48a:	08 95       	ret

0000d48c <collision_detect_player>:
			player->shared.y--;
	}
}

char collision_detect_player(Player* player, u8 hud_x)
{
    d48c:	2f 92       	push	r2
    d48e:	3f 92       	push	r3
    d490:	4f 92       	push	r4
    d492:	5f 92       	push	r5
    d494:	6f 92       	push	r6
    d496:	7f 92       	push	r7
    d498:	8f 92       	push	r8
    d49a:	9f 92       	push	r9
    d49c:	af 92       	push	r10
    d49e:	bf 92       	push	r11
    d4a0:	cf 92       	push	r12
    d4a2:	df 92       	push	r13
    d4a4:	ef 92       	push	r14
    d4a6:	ff 92       	push	r15
    d4a8:	0f 93       	push	r16
    d4aa:	1f 93       	push	r17
    d4ac:	cf 93       	push	r28
    d4ae:	df 93       	push	r29
    d4b0:	cd b7       	in	r28, 0x3d	; 61
    d4b2:	de b7       	in	r29, 0x3e	; 62
    d4b4:	2a 97       	sbiw	r28, 0x0a	; 10
    d4b6:	0f b6       	in	r0, 0x3f	; 63
    d4b8:	f8 94       	cli
    d4ba:	de bf       	out	0x3e, r29	; 62
    d4bc:	0f be       	out	0x3f, r0	; 63
    d4be:	cd bf       	out	0x3d, r28	; 61
    d4c0:	4c 01       	movw	r8, r24
    d4c2:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    d4c4:	1a 82       	std	Y+2, r1	; 0x02
    d4c6:	19 82       	std	Y+1, r1	; 0x01
    d4c8:	1c 82       	std	Y+4, r1	; 0x04
    d4ca:	1b 82       	std	Y+3, r1	; 0x03
    d4cc:	1e 82       	std	Y+6, r1	; 0x06
    d4ce:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    d4d0:	20 e0       	ldi	r18, 0x00	; 0
    d4d2:	30 e0       	ldi	r19, 0x00	; 0
    d4d4:	40 e0       	ldi	r20, 0x00	; 0
    d4d6:	5e e3       	ldi	r21, 0x3E	; 62
    d4d8:	dc 01       	movw	r26, r24
    d4da:	17 96       	adiw	r26, 0x07	; 7
    d4dc:	6d 91       	ld	r22, X+
    d4de:	7d 91       	ld	r23, X+
    d4e0:	8d 91       	ld	r24, X+
    d4e2:	9c 91       	ld	r25, X
    d4e4:	1a 97       	sbiw	r26, 0x0a	; 10
    d4e6:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    d4ea:	20 e0       	ldi	r18, 0x00	; 0
    d4ec:	30 e0       	ldi	r19, 0x00	; 0
    d4ee:	40 e4       	ldi	r20, 0x40	; 64
    d4f0:	50 e4       	ldi	r21, 0x40	; 64
    d4f2:	0e 94 4d 72 	call	0xe49a	; 0xe49a <__subsf3>
    d4f6:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d4fa:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    d4fc:	20 e0       	ldi	r18, 0x00	; 0
    d4fe:	30 e0       	ldi	r19, 0x00	; 0
    d500:	40 e0       	ldi	r20, 0x00	; 0
    d502:	5e e3       	ldi	r21, 0x3E	; 62
    d504:	f4 01       	movw	r30, r8
    d506:	63 81       	ldd	r22, Z+3	; 0x03
    d508:	74 81       	ldd	r23, Z+4	; 0x04
    d50a:	85 81       	ldd	r24, Z+5	; 0x05
    d50c:	96 81       	ldd	r25, Z+6	; 0x06
    d50e:	0e 94 05 74 	call	0xe80a	; 0xe80a <__mulsf3>
    d512:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    d516:	d4 01       	movw	r26, r8
    d518:	2c 91       	ld	r18, X
    d51a:	40 2f       	mov	r20, r16
    d51c:	ce 01       	movw	r24, r28
    d51e:	01 96       	adiw	r24, 0x01	; 1
    d520:	0e 94 80 56 	call	0xad00	; 0xad00 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    d524:	c4 01       	movw	r24, r8
    d526:	0e 94 25 55 	call	0xaa4a	; 0xaa4a <collision_detect_boundries>
    d52a:	88 23       	and	r24, r24
    d52c:	39 f0       	breq	.+14     	; 0xd53c <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    d52e:	c4 01       	movw	r24, r8
    d530:	0e 94 08 53 	call	0xa610	; 0xa610 <recoil_sprite>
		player->shared.speed = 0;
    d534:	f4 01       	movw	r30, r8
    d536:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    d538:	21 2c       	mov	r2, r1
    d53a:	4f c1       	rjmp	.+670    	; 0xd7da <collision_detect_player+0x34e>
    d53c:	ce 01       	movw	r24, r28
    d53e:	01 96       	adiw	r24, 0x01	; 1
    d540:	2c 01       	movw	r4, r24
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    d542:	31 2c       	mov	r3, r1
    d544:	b1 2c       	mov	r11, r1
    d546:	d1 2c       	mov	r13, r1
    d548:	21 2c       	mov	r2, r1
    d54a:	1f 82       	std	Y+7, r1	; 0x07
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y);
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d54c:	9b e0       	ldi	r25, 0x0B	; 11
    d54e:	91 0f       	add	r25, r17
    d550:	98 87       	std	Y+8, r25	; 0x08
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y);
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d552:	16 5f       	subi	r17, 0xF6	; 246
    d554:	19 87       	std	Y+9, r17	; 0x09
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    d556:	d2 01       	movw	r26, r4
    d558:	6d 90       	ld	r6, X+
    d55a:	7c 90       	ld	r7, X
    d55c:	c3 01       	movw	r24, r6
    d55e:	6e e1       	ldi	r22, 0x1E	; 30
    d560:	70 e0       	ldi	r23, 0x00	; 0
    d562:	0e 94 39 72 	call	0xe472	; 0xe472 <__divmodhi4>
    d566:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    d568:	13 e0       	ldi	r17, 0x03	; 3
    d56a:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    d56c:	c3 01       	movw	r24, r6
    d56e:	0e 94 aa 53 	call	0xa754	; 0xa754 <solid_directional_tile>
    d572:	88 23       	and	r24, r24
    d574:	51 f1       	breq	.+84     	; 0xd5ca <collision_detect_player+0x13e>
    d576:	f4 01       	movw	r30, r8
    d578:	67 81       	ldd	r22, Z+7	; 0x07
    d57a:	70 85       	ldd	r23, Z+8	; 0x08
    d57c:	81 85       	ldd	r24, Z+9	; 0x09
    d57e:	92 85       	ldd	r25, Z+10	; 0x0a
    d580:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d584:	46 2f       	mov	r20, r22
    d586:	d4 01       	movw	r26, r8
    d588:	13 96       	adiw	r26, 0x03	; 3
    d58a:	6d 91       	ld	r22, X+
    d58c:	7d 91       	ld	r23, X+
    d58e:	8d 91       	ld	r24, X+
    d590:	9c 91       	ld	r25, X
    d592:	16 97       	sbiw	r26, 0x06	; 6
    d594:	4a 87       	std	Y+10, r20	; 0x0a
    d596:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d59a:	00 e1       	ldi	r16, 0x10	; 16
    d59c:	20 e1       	ldi	r18, 0x10	; 16
    d59e:	4a 85       	ldd	r20, Y+10	; 0x0a
    d5a0:	c3 01       	movw	r24, r6
    d5a2:	0e 94 d4 53 	call	0xa7a8	; 0xa7a8 <collides_directional_tile>
    d5a6:	88 23       	and	r24, r24
    d5a8:	81 f0       	breq	.+32     	; 0xd5ca <collision_detect_player+0x13e>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    d5aa:	f4 01       	movw	r30, r8
    d5ac:	83 85       	ldd	r24, Z+11	; 0x0b
    d5ae:	89 30       	cpi	r24, 0x09	; 9
    d5b0:	21 f4       	brne	.+8      	; 0xd5ba <collision_detect_player+0x12e>
    d5b2:	c4 01       	movw	r24, r8
    d5b4:	0e 94 08 53 	call	0xa610	; 0xa610 <recoil_sprite>
    d5b8:	04 c0       	rjmp	.+8      	; 0xd5c2 <collision_detect_player+0x136>
    d5ba:	b4 01       	movw	r22, r8
    d5bc:	c4 01       	movw	r24, r8
    d5be:	0e 94 62 53 	call	0xa6c4	; 0xa6c4 <recoil_sprite_fine>
			player->shared.speed = 0;
    d5c2:	d4 01       	movw	r26, r8
    d5c4:	11 96       	adiw	r26, 0x01	; 1
    d5c6:	1c 92       	st	X, r1
    d5c8:	df c0       	rjmp	.+446    	; 0xd788 <collision_detect_player+0x2fc>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    d5ca:	c3 01       	movw	r24, r6
    d5cc:	0e 94 98 53 	call	0xa730	; 0xa730 <solid_square_tile>
    d5d0:	88 23       	and	r24, r24
    d5d2:	61 f1       	breq	.+88     	; 0xd62c <collision_detect_player+0x1a0>
    d5d4:	f4 01       	movw	r30, r8
    d5d6:	67 81       	ldd	r22, Z+7	; 0x07
    d5d8:	70 85       	ldd	r23, Z+8	; 0x08
    d5da:	81 85       	ldd	r24, Z+9	; 0x09
    d5dc:	92 85       	ldd	r25, Z+10	; 0x0a
    d5de:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d5e2:	36 2f       	mov	r19, r22
    d5e4:	d4 01       	movw	r26, r8
    d5e6:	13 96       	adiw	r26, 0x03	; 3
    d5e8:	6d 91       	ld	r22, X+
    d5ea:	7d 91       	ld	r23, X+
    d5ec:	8d 91       	ld	r24, X+
    d5ee:	9c 91       	ld	r25, X
    d5f0:	16 97       	sbiw	r26, 0x06	; 6
    d5f2:	3a 87       	std	Y+10, r19	; 0x0a
    d5f4:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d5f8:	86 2f       	mov	r24, r22
    d5fa:	38 e0       	ldi	r19, 0x08	; 8
    d5fc:	a3 2e       	mov	r10, r19
    d5fe:	48 e0       	ldi	r20, 0x08	; 8
    d600:	c4 2e       	mov	r12, r20
    d602:	e1 2e       	mov	r14, r17
    d604:	ee 0c       	add	r14, r14
    d606:	ee 0c       	add	r14, r14
    d608:	ee 0c       	add	r14, r14
    d60a:	0f 2d       	mov	r16, r15
    d60c:	00 0f       	add	r16, r16
    d60e:	00 0f       	add	r16, r16
    d610:	00 0f       	add	r16, r16
    d612:	20 e1       	ldi	r18, 0x10	; 16
    d614:	40 e1       	ldi	r20, 0x10	; 16
    d616:	3a 85       	ldd	r19, Y+10	; 0x0a
    d618:	63 2f       	mov	r22, r19
    d61a:	0e 94 b5 4c 	call	0x996a	; 0x996a <LBCollides>
    d61e:	88 23       	and	r24, r24
    d620:	29 f0       	breq	.+10     	; 0xd62c <collision_detect_player+0x1a0>
		{
			collision_count++;
    d622:	b3 94       	inc	r11
			collision_tile = i;
			player->shared.speed = 0;
    d624:	f4 01       	movw	r30, r8
    d626:	11 82       	std	Z+1, r1	; 0x01
    d628:	d3 2c       	mov	r13, r3
    d62a:	ae c0       	rjmp	.+348    	; 0xd788 <collision_detect_player+0x2fc>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    d62c:	f3 01       	movw	r30, r6
    d62e:	e8 5a       	subi	r30, 0xA8	; 168
    d630:	f3 4f       	sbci	r31, 0xF3	; 243
    d632:	81 81       	ldd	r24, Z+1	; 0x01
    d634:	8d 34       	cpi	r24, 0x4D	; 77
    d636:	69 f5       	brne	.+90     	; 0xd692 <collision_detect_player+0x206>
    d638:	e1 2e       	mov	r14, r17
    d63a:	ee 0c       	add	r14, r14
    d63c:	ee 0c       	add	r14, r14
    d63e:	ee 0c       	add	r14, r14
    d640:	0f 2d       	mov	r16, r15
    d642:	00 0f       	add	r16, r16
    d644:	00 0f       	add	r16, r16
    d646:	00 0f       	add	r16, r16
    d648:	d4 01       	movw	r26, r8
    d64a:	17 96       	adiw	r26, 0x07	; 7
    d64c:	6d 91       	ld	r22, X+
    d64e:	7d 91       	ld	r23, X+
    d650:	8d 91       	ld	r24, X+
    d652:	9c 91       	ld	r25, X
    d654:	1a 97       	sbiw	r26, 0x0a	; 10
    d656:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d65a:	76 2e       	mov	r7, r22
    d65c:	f4 01       	movw	r30, r8
    d65e:	63 81       	ldd	r22, Z+3	; 0x03
    d660:	74 81       	ldd	r23, Z+4	; 0x04
    d662:	85 81       	ldd	r24, Z+5	; 0x05
    d664:	96 81       	ldd	r25, Z+6	; 0x06
    d666:	0e 94 23 73 	call	0xe646	; 0xe646 <__fixunssfsi>
    d66a:	86 2f       	mov	r24, r22
    d66c:	98 e0       	ldi	r25, 0x08	; 8
    d66e:	a9 2e       	mov	r10, r25
    d670:	28 e0       	ldi	r18, 0x08	; 8
    d672:	c2 2e       	mov	r12, r18
    d674:	20 e1       	ldi	r18, 0x10	; 16
    d676:	40 e1       	ldi	r20, 0x10	; 16
    d678:	67 2d       	mov	r22, r7
    d67a:	0e 94 b5 4c 	call	0x996a	; 0x996a <LBCollides>
    d67e:	88 23       	and	r24, r24
    d680:	09 f4       	brne	.+2      	; 0xd684 <collision_detect_player+0x1f8>
    d682:	82 c0       	rjmp	.+260    	; 0xd788 <collision_detect_player+0x2fc>
		{
			player->max_speed = WATER_SPEED;
    d684:	e9 e1       	ldi	r30, 0x19	; 25
    d686:	d4 01       	movw	r26, r8
    d688:	57 96       	adiw	r26, 0x17	; 23
    d68a:	ec 93       	st	X, r30
    d68c:	f1 e0       	ldi	r31, 0x01	; 1
    d68e:	ff 83       	std	Y+7, r31	; 0x07
    d690:	89 c0       	rjmp	.+274    	; 0xd7a4 <collision_detect_player+0x318>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    d692:	8c 32       	cpi	r24, 0x2C	; 44
    d694:	89 f2       	breq	.-94     	; 0xd638 <collision_detect_player+0x1ac>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
    d696:	87 30       	cpi	r24, 0x07	; 7
    d698:	f9 f4       	brne	.+62     	; 0xd6d8 <collision_detect_player+0x24c>
    d69a:	d4 01       	movw	r26, r8
    d69c:	55 96       	adiw	r26, 0x15	; 21
    d69e:	8c 91       	ld	r24, X
    d6a0:	80 fd       	sbrc	r24, 0
    d6a2:	72 c0       	rjmp	.+228    	; 0xd788 <collision_detect_player+0x2fc>
    d6a4:	c4 01       	movw	r24, r8
    d6a6:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    d6aa:	81 11       	cpse	r24, r1
    d6ac:	6d c0       	rjmp	.+218    	; 0xd788 <collision_detect_player+0x2fc>
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y);
    d6ae:	41 2f       	mov	r20, r17
    d6b0:	6f 2d       	mov	r22, r15
    d6b2:	83 e0       	ldi	r24, 0x03	; 3
    d6b4:	0e 94 85 64 	call	0xc90a	; 0xc90a <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d6b8:	d2 01       	movw	r26, r4
    d6ba:	ed 91       	ld	r30, X+
    d6bc:	fc 91       	ld	r31, X
    d6be:	e8 5a       	subi	r30, 0xA8	; 168
    d6c0:	f3 4f       	sbci	r31, 0xF3	; 243
    d6c2:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    d6c4:	81 e4       	ldi	r24, 0x41	; 65
    d6c6:	f4 01       	movw	r30, r8
    d6c8:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    d6ca:	91 e0       	ldi	r25, 0x01	; 1
    d6cc:	91 8f       	std	Z+25, r25	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d6ce:	41 ef       	ldi	r20, 0xF1	; 241
    d6d0:	5a e6       	ldi	r21, 0x6A	; 106
    d6d2:	61 e0       	ldi	r22, 0x01	; 1
    d6d4:	89 85       	ldd	r24, Y+9	; 0x09
    d6d6:	1e c0       	rjmp	.+60     	; 0xd714 <collision_detect_player+0x288>
			SetTile(tile_x, tile_y, 0);
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
    d6d8:	89 30       	cpi	r24, 0x09	; 9
    d6da:	71 f5       	brne	.+92     	; 0xd738 <collision_detect_player+0x2ac>
    d6dc:	d4 01       	movw	r26, r8
    d6de:	55 96       	adiw	r26, 0x15	; 21
    d6e0:	8c 91       	ld	r24, X
    d6e2:	80 fd       	sbrc	r24, 0
    d6e4:	51 c0       	rjmp	.+162    	; 0xd788 <collision_detect_player+0x2fc>
    d6e6:	c4 01       	movw	r24, r8
    d6e8:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    d6ec:	81 11       	cpse	r24, r1
    d6ee:	4c c0       	rjmp	.+152    	; 0xd788 <collision_detect_player+0x2fc>
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y);
    d6f0:	41 2f       	mov	r20, r17
    d6f2:	6f 2d       	mov	r22, r15
    d6f4:	84 e0       	ldi	r24, 0x04	; 4
    d6f6:	0e 94 85 64 	call	0xc90a	; 0xc90a <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d6fa:	d2 01       	movw	r26, r4
    d6fc:	ed 91       	ld	r30, X+
    d6fe:	fc 91       	ld	r31, X
    d700:	e8 5a       	subi	r30, 0xA8	; 168
    d702:	f3 4f       	sbci	r31, 0xF3	; 243
    d704:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    d706:	81 e0       	ldi	r24, 0x01	; 1
    d708:	f4 01       	movw	r30, r8
    d70a:	80 8f       	std	Z+24, r24	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d70c:	4b ee       	ldi	r20, 0xEB	; 235
    d70e:	5a e6       	ldi	r21, 0x6A	; 106
    d710:	61 e0       	ldi	r22, 0x01	; 1
    d712:	88 85       	ldd	r24, Y+8	; 0x08
    d714:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
			SetTile(tile_x, tile_y, 0);
    d718:	40 e0       	ldi	r20, 0x00	; 0
    d71a:	50 e0       	ldi	r21, 0x00	; 0
    d71c:	61 2f       	mov	r22, r17
    d71e:	8f 2d       	mov	r24, r15
    d720:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
    d724:	22 e0       	ldi	r18, 0x02	; 2
    d726:	40 91 5c 0f 	lds	r20, 0x0F5C
    d72a:	60 91 ea 0b 	lds	r22, 0x0BEA
    d72e:	80 91 b6 0b 	lds	r24, 0x0BB6
    d732:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
    d736:	28 c0       	rjmp	.+80     	; 0xd788 <collision_detect_player+0x2fc>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG) && !is_net_player(player))
    d738:	88 30       	cpi	r24, 0x08	; 8
    d73a:	31 f5       	brne	.+76     	; 0xd788 <collision_detect_player+0x2fc>
    d73c:	d4 01       	movw	r26, r8
    d73e:	55 96       	adiw	r26, 0x15	; 21
    d740:	8c 91       	ld	r24, X
    d742:	80 fd       	sbrc	r24, 0
    d744:	21 c0       	rjmp	.+66     	; 0xd788 <collision_detect_player+0x2fc>
    d746:	c4 01       	movw	r24, r8
    d748:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    d74c:	81 11       	cpse	r24, r1
    d74e:	1c c0       	rjmp	.+56     	; 0xd788 <collision_detect_player+0x2fc>
		{
			send_net_message(NETITEMBOMB, tile_x, tile_y);
    d750:	41 2f       	mov	r20, r17
    d752:	6f 2d       	mov	r22, r15
    d754:	85 e0       	ldi	r24, 0x05	; 5
    d756:	0e 94 85 64 	call	0xc90a	; 0xc90a <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d75a:	d2 01       	movw	r26, r4
    d75c:	ed 91       	ld	r30, X+
    d75e:	fc 91       	ld	r31, X
    d760:	e8 5a       	subi	r30, 0xA8	; 168
    d762:	f3 4f       	sbci	r31, 0xF3	; 243
    d764:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    d766:	40 e0       	ldi	r20, 0x00	; 0
    d768:	50 e0       	ldi	r21, 0x00	; 0
    d76a:	61 2f       	mov	r22, r17
    d76c:	8f 2d       	mov	r24, r15
    d76e:	0e 94 48 3a 	call	0x7490	; 0x7490 <SetTile>
			LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_ITEM);
    d772:	22 e0       	ldi	r18, 0x02	; 2
    d774:	40 91 5c 0f 	lds	r20, 0x0F5C
    d778:	60 91 ea 0b 	lds	r22, 0x0BEA
    d77c:	80 91 b6 0b 	lds	r24, 0x0BB6
    d780:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
			explode = 1;
    d784:	22 24       	eor	r2, r2
    d786:	23 94       	inc	r2
		}
		
		if (!hit_water)
    d788:	bf 81       	ldd	r27, Y+7	; 0x07
    d78a:	b1 11       	cpse	r27, r1
    d78c:	09 c0       	rjmp	.+18     	; 0xd7a0 <collision_detect_player+0x314>
		{
			player->max_speed = MAX_SPEED;
    d78e:	82 e3       	ldi	r24, 0x32	; 50
    d790:	f4 01       	movw	r30, r8
    d792:	87 8b       	std	Z+23, r24	; 0x17
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    d794:	81 8d       	ldd	r24, Z+25	; 0x19
    d796:	88 23       	and	r24, r24
    d798:	29 f0       	breq	.+10     	; 0xd7a4 <collision_detect_player+0x318>
    d79a:	91 e4       	ldi	r25, 0x41	; 65
    d79c:	97 8b       	std	Z+23, r25	; 0x17
    d79e:	02 c0       	rjmp	.+4      	; 0xd7a4 <collision_detect_player+0x318>
    d7a0:	a1 e0       	ldi	r26, 0x01	; 1
    d7a2:	af 83       	std	Y+7, r26	; 0x07
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    d7a4:	33 94       	inc	r3
    d7a6:	b2 e0       	ldi	r27, 0x02	; 2
    d7a8:	4b 0e       	add	r4, r27
    d7aa:	51 1c       	adc	r5, r1
    d7ac:	e3 e0       	ldi	r30, 0x03	; 3
    d7ae:	3e 12       	cpse	r3, r30
    d7b0:	d2 ce       	rjmp	.-604    	; 0xd556 <collision_detect_player+0xca>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    d7b2:	bb 20       	and	r11, r11
    d7b4:	91 f0       	breq	.+36     	; 0xd7da <collision_detect_player+0x34e>
    d7b6:	c4 01       	movw	r24, r8
    d7b8:	0e 94 08 53 	call	0xa610	; 0xa610 <recoil_sprite>
	if (collision_count == 1)
    d7bc:	f1 e0       	ldi	r31, 0x01	; 1
    d7be:	bf 12       	cpse	r11, r31
    d7c0:	0c c0       	rjmp	.+24     	; 0xd7da <collision_detect_player+0x34e>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    d7c2:	fe 01       	movw	r30, r28
    d7c4:	31 96       	adiw	r30, 0x01	; 1
    d7c6:	ed 0d       	add	r30, r13
    d7c8:	f1 1d       	adc	r31, r1
    d7ca:	ed 0d       	add	r30, r13
    d7cc:	f1 1d       	adc	r31, r1
    d7ce:	40 81       	ld	r20, Z
    d7d0:	51 81       	ldd	r21, Z+1	; 0x01
    d7d2:	6d 2d       	mov	r22, r13
    d7d4:	c4 01       	movw	r24, r8
    d7d6:	0e 94 d1 56 	call	0xada2	; 0xada2 <slide>
	}
	return explode;
}
    d7da:	82 2d       	mov	r24, r2
    d7dc:	2a 96       	adiw	r28, 0x0a	; 10
    d7de:	0f b6       	in	r0, 0x3f	; 63
    d7e0:	f8 94       	cli
    d7e2:	de bf       	out	0x3e, r29	; 62
    d7e4:	0f be       	out	0x3f, r0	; 63
    d7e6:	cd bf       	out	0x3d, r28	; 61
    d7e8:	df 91       	pop	r29
    d7ea:	cf 91       	pop	r28
    d7ec:	1f 91       	pop	r17
    d7ee:	0f 91       	pop	r16
    d7f0:	ff 90       	pop	r15
    d7f2:	ef 90       	pop	r14
    d7f4:	df 90       	pop	r13
    d7f6:	cf 90       	pop	r12
    d7f8:	bf 90       	pop	r11
    d7fa:	af 90       	pop	r10
    d7fc:	9f 90       	pop	r9
    d7fe:	8f 90       	pop	r8
    d800:	7f 90       	pop	r7
    d802:	6f 90       	pop	r6
    d804:	5f 90       	pop	r5
    d806:	4f 90       	pop	r4
    d808:	3f 90       	pop	r3
    d80a:	2f 90       	pop	r2
    d80c:	08 95       	ret

0000d80e <update_turret_shot>:
		}
	}
}

void update_turret_shot(Turret* t, Shot* s)
{	
    d80e:	0f 93       	push	r16
    d810:	1f 93       	push	r17
    d812:	cf 93       	push	r28
    d814:	df 93       	push	r29
    d816:	8c 01       	movw	r16, r24
    d818:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    d81a:	fc 01       	movw	r30, r24
    d81c:	83 85       	ldd	r24, Z+11	; 0x0b
    d81e:	81 11       	cpse	r24, r1
    d820:	02 c0       	rjmp	.+4      	; 0xd826 <update_turret_shot+0x18>
	{
		s->active = 0;
    d822:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    d824:	77 c0       	rjmp	.+238    	; 0xd914 <update_turret_shot+0x106>
	}
	if (!s->active)
    d826:	8e 85       	ldd	r24, Y+14	; 0x0e
    d828:	81 11       	cpse	r24, r1
    d82a:	29 c0       	rjmp	.+82     	; 0xd87e <update_turret_shot+0x70>
	{
		s->active = 1;
    d82c:	81 e0       	ldi	r24, 0x01	; 1
    d82e:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    d830:	20 e0       	ldi	r18, 0x00	; 0
    d832:	30 e0       	ldi	r19, 0x00	; 0
    d834:	40 e4       	ldi	r20, 0x40	; 64
    d836:	50 e4       	ldi	r21, 0x40	; 64
    d838:	f8 01       	movw	r30, r16
    d83a:	63 81       	ldd	r22, Z+3	; 0x03
    d83c:	74 81       	ldd	r23, Z+4	; 0x04
    d83e:	85 81       	ldd	r24, Z+5	; 0x05
    d840:	96 81       	ldd	r25, Z+6	; 0x06
    d842:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d846:	6b 83       	std	Y+3, r22	; 0x03
    d848:	7c 83       	std	Y+4, r23	; 0x04
    d84a:	8d 83       	std	Y+5, r24	; 0x05
    d84c:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    d84e:	20 e0       	ldi	r18, 0x00	; 0
    d850:	30 e0       	ldi	r19, 0x00	; 0
    d852:	40 e4       	ldi	r20, 0x40	; 64
    d854:	50 e4       	ldi	r21, 0x40	; 64
    d856:	f8 01       	movw	r30, r16
    d858:	67 81       	ldd	r22, Z+7	; 0x07
    d85a:	70 85       	ldd	r23, Z+8	; 0x08
    d85c:	81 85       	ldd	r24, Z+9	; 0x09
    d85e:	92 85       	ldd	r25, Z+10	; 0x0a
    d860:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d864:	6f 83       	std	Y+7, r22	; 0x07
    d866:	78 87       	std	Y+8, r23	; 0x08
    d868:	89 87       	std	Y+9, r24	; 0x09
    d86a:	9a 87       	std	Y+10, r25	; 0x0a
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_CANNONBALL);
    d86c:	21 e0       	ldi	r18, 0x01	; 1
    d86e:	40 91 5c 0f 	lds	r20, 0x0F5C
    d872:	60 91 ea 0b 	lds	r22, 0x0BEA
    d876:	80 91 b6 0b 	lds	r24, 0x0BB6
    d87a:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    d87e:	23 e3       	ldi	r18, 0x33	; 51
    d880:	35 e5       	ldi	r19, 0x55	; 85
    d882:	45 e8       	ldi	r20, 0x85	; 133
    d884:	50 e4       	ldi	r21, 0x40	; 64
    d886:	6f 81       	ldd	r22, Y+7	; 0x07
    d888:	78 85       	ldd	r23, Y+8	; 0x08
    d88a:	89 85       	ldd	r24, Y+9	; 0x09
    d88c:	9a 85       	ldd	r25, Y+10	; 0x0a
    d88e:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d892:	6f 83       	std	Y+7, r22	; 0x07
    d894:	78 87       	std	Y+8, r23	; 0x08
    d896:	89 87       	std	Y+9, r24	; 0x09
    d898:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    d89a:	20 e0       	ldi	r18, 0x00	; 0
    d89c:	30 e0       	ldi	r19, 0x00	; 0
    d89e:	40 e0       	ldi	r20, 0x00	; 0
    d8a0:	51 e4       	ldi	r21, 0x41	; 65
    d8a2:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__addsf3>
    d8a6:	20 e0       	ldi	r18, 0x00	; 0
    d8a8:	30 e0       	ldi	r19, 0x00	; 0
    d8aa:	48 e5       	ldi	r20, 0x58	; 88
    d8ac:	53 e4       	ldi	r21, 0x43	; 67
    d8ae:	0e 94 01 74 	call	0xe802	; 0xe802 <__gesf2>
    d8b2:	18 16       	cp	r1, r24
    d8b4:	0c f4       	brge	.+2      	; 0xd8b8 <update_turret_shot+0xaa>
    d8b6:	b5 cf       	rjmp	.-150    	; 0xd822 <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */	
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG) && !is_net_player(game.boss_fight_player))
    d8b8:	00 91 b2 0b 	lds	r16, 0x0BB2
    d8bc:	10 91 b3 0b 	lds	r17, 0x0BB3
    d8c0:	be 01       	movw	r22, r28
    d8c2:	c8 01       	movw	r24, r16
    d8c4:	0e 94 78 54 	call	0xa8f0	; 0xa8f0 <player_shot>
    d8c8:	88 23       	and	r24, r24
    d8ca:	21 f1       	breq	.+72     	; 0xd914 <update_turret_shot+0x106>
    d8cc:	f8 01       	movw	r30, r16
    d8ce:	85 89       	ldd	r24, Z+21	; 0x15
    d8d0:	80 fd       	sbrc	r24, 0
    d8d2:	20 c0       	rjmp	.+64     	; 0xd914 <update_turret_shot+0x106>
    d8d4:	c8 01       	movw	r24, r16
    d8d6:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    d8da:	81 11       	cpse	r24, r1
    d8dc:	1b c0       	rjmp	.+54     	; 0xd914 <update_turret_shot+0x106>
	{
		game.boss_fight_player_lives--;
    d8de:	80 91 a8 0b 	lds	r24, 0x0BA8
    d8e2:	81 50       	subi	r24, 0x01	; 1
    d8e4:	80 93 a8 0b 	sts	0x0BA8, r24
		if (game.boss_fight_player_lives <= 0)
    d8e8:	81 11       	cpse	r24, r1
    d8ea:	03 c0       	rjmp	.+6      	; 0xd8f2 <update_turret_shot+0xe4>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    d8ec:	80 e1       	ldi	r24, 0x10	; 16
    d8ee:	80 93 a6 0b 	sts	0x0BA6, r24
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    d8f2:	60 91 a7 0b 	lds	r22, 0x0BA7
    d8f6:	c8 01       	movw	r24, r16
    d8f8:	0e 94 a7 55 	call	0xab4e	; 0xab4e <kill_player>
    d8fc:	86 e0       	ldi	r24, 0x06	; 6
    d8fe:	0e 94 6e 49 	call	0x92dc	; 0x92dc <LBPlaySound.part.6>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETTURRETHIT, 0, 0);
    d902:	40 e0       	ldi	r20, 0x00	; 0
    d904:	60 e0       	ldi	r22, 0x00	; 0
    d906:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    d908:	df 91       	pop	r29
    d90a:	cf 91       	pop	r28
    d90c:	1f 91       	pop	r17
    d90e:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETTURRETHIT, 0, 0);
    d910:	0c 94 85 64 	jmp	0xc90a	; 0xc90a <send_net_message>
	}
}
    d914:	df 91       	pop	r29
    d916:	cf 91       	pop	r28
    d918:	1f 91       	pop	r17
    d91a:	0f 91       	pop	r16
    d91c:	08 95       	ret

0000d91e <_handle_select_helper>:
#endif
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{	
    d91e:	7f 92       	push	r7
    d920:	8f 92       	push	r8
    d922:	9f 92       	push	r9
    d924:	af 92       	push	r10
    d926:	bf 92       	push	r11
    d928:	cf 92       	push	r12
    d92a:	df 92       	push	r13
    d92c:	ef 92       	push	r14
    d92e:	ff 92       	push	r15
    d930:	0f 93       	push	r16
    d932:	1f 93       	push	r17
    d934:	cf 93       	push	r28
    d936:	df 93       	push	r29
    d938:	ec 01       	movw	r28, r24
    d93a:	7b 01       	movw	r14, r22
    d93c:	8a 01       	movw	r16, r20
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING) && !is_net_player(player))
    d93e:	fb 01       	movw	r30, r22
    d940:	c0 80       	ld	r12, Z
    d942:	d1 80       	ldd	r13, Z+1	; 0x01
    d944:	46 01       	movw	r8, r12
    d946:	f0 e1       	ldi	r31, 0x10	; 16
    d948:	8f 22       	and	r8, r31
    d94a:	99 24       	eor	r9, r9
    d94c:	c4 fe       	sbrs	r12, 4
    d94e:	0e c0       	rjmp	.+28     	; 0xd96c <_handle_select_helper+0x4e>
    d950:	8d 81       	ldd	r24, Y+5	; 0x05
    d952:	81 11       	cpse	r24, r1
    d954:	0b c0       	rjmp	.+22     	; 0xd96c <_handle_select_helper+0x4e>
    d956:	ca 01       	movw	r24, r20
    d958:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    d95c:	81 11       	cpse	r24, r1
    d95e:	06 c0       	rjmp	.+12     	; 0xd96c <_handle_select_helper+0x4e>
	{
		ps->handle_id--;
    d960:	88 81       	ld	r24, Y
    d962:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d964:	87 ff       	sbrs	r24, 7
    d966:	15 c0       	rjmp	.+42     	; 0xd992 <_handle_select_helper+0x74>
    d968:	18 82       	st	Y, r1
    d96a:	14 c0       	rjmp	.+40     	; 0xd994 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING) && !is_net_player(player))
    d96c:	56 01       	movw	r10, r12
    d96e:	80 e2       	ldi	r24, 0x20	; 32
    d970:	a8 22       	and	r10, r24
    d972:	bb 24       	eor	r11, r11
    d974:	c5 fe       	sbrs	r12, 5
    d976:	18 c0       	rjmp	.+48     	; 0xd9a8 <_handle_select_helper+0x8a>
    d978:	8d 81       	ldd	r24, Y+5	; 0x05
    d97a:	81 11       	cpse	r24, r1
    d97c:	15 c0       	rjmp	.+42     	; 0xd9a8 <_handle_select_helper+0x8a>
    d97e:	c8 01       	movw	r24, r16
    d980:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    d984:	81 11       	cpse	r24, r1
    d986:	10 c0       	rjmp	.+32     	; 0xd9a8 <_handle_select_helper+0x8a>
	{
		ps->handle_id++;
    d988:	88 81       	ld	r24, Y
    d98a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d98c:	89 30       	cpi	r24, 0x09	; 9
    d98e:	0c f0       	brlt	.+2      	; 0xd992 <_handle_select_helper+0x74>
    d990:	88 e0       	ldi	r24, 0x08	; 8
    d992:	88 83       	st	Y, r24
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    d994:	24 e0       	ldi	r18, 0x04	; 4
    d996:	40 91 5c 0f 	lds	r20, 0x0F5C
    d99a:	60 91 ea 0b 	lds	r22, 0x0BEA
    d99e:	80 91 b6 0b 	lds	r24, 0x0BB6
    d9a2:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
    d9a6:	b3 c0       	rjmp	.+358    	; 0xdb0e <_handle_select_helper+0x1f0>
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING) && !is_net_player(player))
    d9a8:	c7 01       	movw	r24, r14
    d9aa:	0e 94 68 5a 	call	0xb4d0	; 0xb4d0 <select_pressed>
    d9ae:	78 2e       	mov	r7, r24
    d9b0:	88 23       	and	r24, r24
    d9b2:	c1 f0       	breq	.+48     	; 0xd9e4 <_handle_select_helper+0xc6>
    d9b4:	8d 81       	ldd	r24, Y+5	; 0x05
    d9b6:	81 11       	cpse	r24, r1
    d9b8:	15 c0       	rjmp	.+42     	; 0xd9e4 <_handle_select_helper+0xc6>
    d9ba:	c8 01       	movw	r24, r16
    d9bc:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    d9c0:	81 11       	cpse	r24, r1
    d9c2:	10 c0       	rjmp	.+32     	; 0xd9e4 <_handle_select_helper+0xc6>
	{
		ps->select_state = EDITING;
    d9c4:	81 e0       	ldi	r24, 0x01	; 1
    d9c6:	8d 83       	std	Y+5, r24	; 0x05
		memcpy(ps->handle, &handles.data[ps->handle_id*3], 3);
    d9c8:	e8 81       	ld	r30, Y
    d9ca:	83 e0       	ldi	r24, 0x03	; 3
    d9cc:	e8 02       	muls	r30, r24
    d9ce:	f0 01       	movw	r30, r0
    d9d0:	11 24       	eor	r1, r1
    d9d2:	eb 57       	subi	r30, 0x7B	; 123
    d9d4:	f4 4f       	sbci	r31, 0xF4	; 244
    d9d6:	80 81       	ld	r24, Z
    d9d8:	91 81       	ldd	r25, Z+1	; 0x01
    d9da:	a2 81       	ldd	r26, Z+2	; 0x02
    d9dc:	89 83       	std	Y+1, r24	; 0x01
    d9de:	9a 83       	std	Y+2, r25	; 0x02
    d9e0:	ab 83       	std	Y+3, r26	; 0x03
    d9e2:	d8 cf       	rjmp	.-80     	; 0xd994 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING) && !is_net_player(player))
    d9e4:	c7 fe       	sbrs	r12, 7
    d9e6:	0f c0       	rjmp	.+30     	; 0xda06 <_handle_select_helper+0xe8>
    d9e8:	8d 81       	ldd	r24, Y+5	; 0x05
    d9ea:	81 30       	cpi	r24, 0x01	; 1
    d9ec:	61 f4       	brne	.+24     	; 0xda06 <_handle_select_helper+0xe8>
    d9ee:	c8 01       	movw	r24, r16
    d9f0:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    d9f4:	81 11       	cpse	r24, r1
    d9f6:	07 c0       	rjmp	.+14     	; 0xda06 <_handle_select_helper+0xe8>
	{
		ps->char_index++;
    d9f8:	8c 81       	ldd	r24, Y+4	; 0x04
    d9fa:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    d9fc:	83 30       	cpi	r24, 0x03	; 3
    d9fe:	0c f0       	brlt	.+2      	; 0xda02 <_handle_select_helper+0xe4>
    da00:	82 e0       	ldi	r24, 0x02	; 2
    da02:	8c 83       	std	Y+4, r24	; 0x04
    da04:	c7 cf       	rjmp	.-114    	; 0xd994 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING) && !is_net_player(player))
    da06:	c6 fe       	sbrs	r12, 6
    da08:	0f c0       	rjmp	.+30     	; 0xda28 <_handle_select_helper+0x10a>
    da0a:	8d 81       	ldd	r24, Y+5	; 0x05
    da0c:	81 30       	cpi	r24, 0x01	; 1
    da0e:	09 f0       	breq	.+2      	; 0xda12 <_handle_select_helper+0xf4>
    da10:	90 c0       	rjmp	.+288    	; 0xdb32 <_handle_select_helper+0x214>
    da12:	c8 01       	movw	r24, r16
    da14:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    da18:	81 11       	cpse	r24, r1
    da1a:	2f c0       	rjmp	.+94     	; 0xda7a <_handle_select_helper+0x15c>
	{
		ps->char_index--;
    da1c:	8c 81       	ldd	r24, Y+4	; 0x04
    da1e:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    da20:	87 ff       	sbrs	r24, 7
    da22:	ef cf       	rjmp	.-34     	; 0xda02 <_handle_select_helper+0xe4>
    da24:	1c 82       	std	Y+4, r1	; 0x04
    da26:	b6 cf       	rjmp	.-148    	; 0xd994 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    da28:	89 28       	or	r8, r9
    da2a:	91 f0       	breq	.+36     	; 0xda50 <_handle_select_helper+0x132>
    da2c:	8d 81       	ldd	r24, Y+5	; 0x05
    da2e:	81 30       	cpi	r24, 0x01	; 1
    da30:	09 f0       	breq	.+2      	; 0xda34 <_handle_select_helper+0x116>
    da32:	54 c0       	rjmp	.+168    	; 0xdadc <_handle_select_helper+0x1be>
    da34:	c8 01       	movw	r24, r16
    da36:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    da3a:	81 11       	cpse	r24, r1
    da3c:	20 c0       	rjmp	.+64     	; 0xda7e <_handle_select_helper+0x160>
	{
		ps->handle[(u8) ps->char_index]--;
    da3e:	8c 81       	ldd	r24, Y+4	; 0x04
    da40:	c8 0f       	add	r28, r24
    da42:	d1 1d       	adc	r29, r1
    da44:	89 81       	ldd	r24, Y+1	; 0x01
    da46:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    da48:	81 34       	cpi	r24, 0x41	; 65
    da4a:	a8 f4       	brcc	.+42     	; 0xda76 <_handle_select_helper+0x158>
    da4c:	81 e4       	ldi	r24, 0x41	; 65
    da4e:	13 c0       	rjmp	.+38     	; 0xda76 <_handle_select_helper+0x158>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    da50:	ab 28       	or	r10, r11
    da52:	b9 f0       	breq	.+46     	; 0xda82 <_handle_select_helper+0x164>
    da54:	8d 81       	ldd	r24, Y+5	; 0x05
    da56:	81 30       	cpi	r24, 0x01	; 1
    da58:	09 f0       	breq	.+2      	; 0xda5c <_handle_select_helper+0x13e>
    da5a:	40 c0       	rjmp	.+128    	; 0xdadc <_handle_select_helper+0x1be>
    da5c:	c8 01       	movw	r24, r16
    da5e:	0e 94 69 66 	call	0xccd2	; 0xccd2 <is_net_player>
    da62:	81 11       	cpse	r24, r1
    da64:	39 c0       	rjmp	.+114    	; 0xdad8 <_handle_select_helper+0x1ba>
	{
		ps->handle[(u8) ps->char_index]++;
    da66:	8c 81       	ldd	r24, Y+4	; 0x04
    da68:	c8 0f       	add	r28, r24
    da6a:	d1 1d       	adc	r29, r1
    da6c:	89 81       	ldd	r24, Y+1	; 0x01
    da6e:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    da70:	8b 35       	cpi	r24, 0x5B	; 91
    da72:	08 f0       	brcs	.+2      	; 0xda76 <_handle_select_helper+0x158>
    da74:	8a e5       	ldi	r24, 0x5A	; 90
    da76:	89 83       	std	Y+1, r24	; 0x01
    da78:	8d cf       	rjmp	.-230    	; 0xd994 <_handle_select_helper+0x76>
		ps->char_index--;
		if (ps->char_index < 0) ps->char_index = 0;
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    da7a:	89 28       	or	r8, r9
    da7c:	d9 f6       	brne	.-74     	; 0xda34 <_handle_select_helper+0x116>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    da7e:	ab 28       	or	r10, r11
    da80:	69 f7       	brne	.-38     	; 0xda5c <_handle_select_helper+0x13e>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    da82:	77 20       	and	r7, r7
    da84:	59 f1       	breq	.+86     	; 0xdadc <_handle_select_helper+0x1be>
    da86:	8d 81       	ldd	r24, Y+5	; 0x05
    da88:	81 30       	cpi	r24, 0x01	; 1
    da8a:	41 f5       	brne	.+80     	; 0xdadc <_handle_select_helper+0x1be>
	{
		player->handle_id = ps->handle_id;
    da8c:	88 81       	ld	r24, Y
    da8e:	f8 01       	movw	r30, r16
    da90:	83 87       	std	Z+11, r24	; 0x0b
		memcpy(player->handle, ps->handle, 3);
    da92:	89 81       	ldd	r24, Y+1	; 0x01
    da94:	9a 81       	ldd	r25, Y+2	; 0x02
    da96:	ab 81       	ldd	r26, Y+3	; 0x03
    da98:	84 87       	std	Z+12, r24	; 0x0c
    da9a:	95 87       	std	Z+13, r25	; 0x0d
    da9c:	a6 87       	std	Z+14, r26	; 0x0e
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
    da9e:	e8 81       	ld	r30, Y
    daa0:	83 e0       	ldi	r24, 0x03	; 3
    daa2:	e8 02       	muls	r30, r24
    daa4:	f0 01       	movw	r30, r0
    daa6:	11 24       	eor	r1, r1
    daa8:	eb 57       	subi	r30, 0x7B	; 123
    daaa:	f4 4f       	sbci	r31, 0xF4	; 244
    daac:	89 81       	ldd	r24, Y+1	; 0x01
    daae:	9a 81       	ldd	r25, Y+2	; 0x02
    dab0:	ab 81       	ldd	r26, Y+3	; 0x03
    dab2:	80 83       	st	Z, r24
    dab4:	91 83       	std	Z+1, r25	; 0x01
    dab6:	a2 83       	std	Z+2, r26	; 0x02
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    dab8:	24 e0       	ldi	r18, 0x04	; 4
    daba:	40 91 5c 0f 	lds	r20, 0x0F5C
    dabe:	60 91 ea 0b 	lds	r22, 0x0BEA
    dac2:	80 91 b6 0b 	lds	r24, 0x0BB6
    dac6:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    daca:	83 e8       	ldi	r24, 0x83	; 131
    dacc:	9b e0       	ldi	r25, 0x0B	; 11
    dace:	0e 94 c3 3b 	call	0x7786	; 0x7786 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		memcpy(player->handle, ps->handle, 3);
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    dad2:	82 e0       	ldi	r24, 0x02	; 2
    dad4:	8d 83       	std	Y+5, r24	; 0x05
    dad6:	1b c0       	rjmp	.+54     	; 0xdb0e <_handle_select_helper+0x1f0>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    dad8:	71 10       	cpse	r7, r1
    dada:	d8 cf       	rjmp	.-80     	; 0xda8c <_handle_select_helper+0x16e>
		ps->select_state = CONFIRMED;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    dadc:	d1 fe       	sbrs	r13, 1
    dade:	2c c0       	rjmp	.+88     	; 0xdb38 <_handle_select_helper+0x21a>
    dae0:	8d 81       	ldd	r24, Y+5	; 0x05
    dae2:	81 30       	cpi	r24, 0x01	; 1
    dae4:	11 f4       	brne	.+4      	; 0xdaea <_handle_select_helper+0x1cc>
	{
		ps->select_state = SELECTING;
    dae6:	1d 82       	std	Y+5, r1	; 0x05
    dae8:	55 cf       	rjmp	.-342    	; 0xd994 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    daea:	82 30       	cpi	r24, 0x02	; 2
    daec:	19 f4       	brne	.+6      	; 0xdaf4 <_handle_select_helper+0x1d6>
	{
		ps->select_state = EDITING;
    daee:	81 e0       	ldi	r24, 0x01	; 1
    daf0:	8d 83       	std	Y+5, r24	; 0x05
    daf2:	50 cf       	rjmp	.-352    	; 0xd994 <_handle_select_helper+0x76>
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_X))
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
    daf4:	24 e0       	ldi	r18, 0x04	; 4
    daf6:	40 91 5c 0f 	lds	r20, 0x0F5C
    dafa:	60 91 ea 0b 	lds	r22, 0x0BEA
    dafe:	80 91 b6 0b 	lds	r24, 0x0BB6
    db02:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <LBPlaySound>
		fade_through();
    db06:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
		load_splash();
    db0a:	0e 94 1e 5a 	call	0xb43c	; 0xb43c <load_splash>
		send_smart_net_message(player, p, NETHANDLESELECT);
    db0e:	4a e0       	ldi	r20, 0x0A	; 10
    db10:	b7 01       	movw	r22, r14
    db12:	c8 01       	movw	r24, r16
	}
#endif
}
    db14:	df 91       	pop	r29
    db16:	cf 91       	pop	r28
    db18:	1f 91       	pop	r17
    db1a:	0f 91       	pop	r16
    db1c:	ff 90       	pop	r15
    db1e:	ef 90       	pop	r14
    db20:	df 90       	pop	r13
    db22:	cf 90       	pop	r12
    db24:	bf 90       	pop	r11
    db26:	af 90       	pop	r10
    db28:	9f 90       	pop	r9
    db2a:	8f 90       	pop	r8
    db2c:	7f 90       	pop	r7
	else if ((p->pressed & BTN_X))
	{
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		fade_through();
		load_splash();
		send_smart_net_message(player, p, NETHANDLESELECT);
    db2e:	0c 94 16 65 	jmp	0xca2c	; 0xca2c <send_smart_net_message>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.flags, player2.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    db32:	ab 28       	or	r10, r11
    db34:	99 f6       	brne	.-90     	; 0xdadc <_handle_select_helper+0x1be>
    db36:	a5 cf       	rjmp	.-182    	; 0xda82 <_handle_select_helper+0x164>
		fade_through();
		load_splash();
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
#endif
}
    db38:	df 91       	pop	r29
    db3a:	cf 91       	pop	r28
    db3c:	1f 91       	pop	r17
    db3e:	0f 91       	pop	r16
    db40:	ff 90       	pop	r15
    db42:	ef 90       	pop	r14
    db44:	df 90       	pop	r13
    db46:	cf 90       	pop	r12
    db48:	bf 90       	pop	r11
    db4a:	af 90       	pop	r10
    db4c:	9f 90       	pop	r9
    db4e:	8f 90       	pop	r8
    db50:	7f 90       	pop	r7
    db52:	08 95       	ret

0000db54 <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    db54:	0f 93       	push	r16
    db56:	1f 93       	push	r17
    db58:	cf 93       	push	r28
    db5a:	df 93       	push	r29
    db5c:	ec 01       	movw	r28, r24
    db5e:	8b 01       	movw	r16, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    db60:	26 e0       	ldi	r18, 0x06	; 6
    db62:	42 e0       	ldi	r20, 0x02	; 2
    db64:	bc 01       	movw	r22, r24
    db66:	8b ef       	ldi	r24, 0xFB	; 251
    db68:	9f e0       	ldi	r25, 0x0F	; 15
    db6a:	0e 94 3c 5c 	call	0xb878	; 0xb878 <_handle_select_render_helper>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    db6e:	80 91 b6 0b 	lds	r24, 0x0BB6
    db72:	88 23       	and	r24, r24
    db74:	49 f0       	breq	.+18     	; 0xdb88 <update_handle_select+0x34>
    db76:	86 30       	cpi	r24, 0x06	; 6
    db78:	39 f0       	breq	.+14     	; 0xdb88 <update_handle_select+0x34>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    db7a:	28 e0       	ldi	r18, 0x08	; 8
    db7c:	43 e1       	ldi	r20, 0x13	; 19
    db7e:	b8 01       	movw	r22, r16
    db80:	8d e7       	ldi	r24, 0x7D	; 125
    db82:	9b e0       	ldi	r25, 0x0B	; 11
    db84:	0e 94 3c 5c 	call	0xb878	; 0xb878 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    db88:	45 ed       	ldi	r20, 0xD5	; 213
    db8a:	5b e0       	ldi	r21, 0x0B	; 11
    db8c:	be 01       	movw	r22, r28
    db8e:	8b ef       	ldi	r24, 0xFB	; 251
    db90:	9f e0       	ldi	r25, 0x0F	; 15
    db92:	0e 94 8f 6c 	call	0xd91e	; 0xd91e <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    db96:	c1 e0       	ldi	r28, 0x01	; 1
    db98:	80 91 00 10 	lds	r24, 0x1000
    db9c:	82 30       	cpi	r24, 0x02	; 2
    db9e:	09 f0       	breq	.+2      	; 0xdba2 <update_handle_select+0x4e>
    dba0:	c0 e0       	ldi	r28, 0x00	; 0
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    dba2:	80 91 b6 0b 	lds	r24, 0x0BB6
    dba6:	88 23       	and	r24, r24
    dba8:	49 f1       	breq	.+82     	; 0xdbfc <update_handle_select+0xa8>
    dbaa:	86 30       	cpi	r24, 0x06	; 6
    dbac:	51 f1       	breq	.+84     	; 0xdc02 <update_handle_select+0xae>
	{
		_handle_select_helper(&p2s, p2, &player2);
    dbae:	47 e4       	ldi	r20, 0x47	; 71
    dbb0:	5f e0       	ldi	r21, 0x0F	; 15
    dbb2:	b8 01       	movw	r22, r16
    dbb4:	8d e7       	ldi	r24, 0x7D	; 125
    dbb6:	9b e0       	ldi	r25, 0x0B	; 11
    dbb8:	0e 94 8f 6c 	call	0xd91e	; 0xd91e <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    dbbc:	80 91 82 0b 	lds	r24, 0x0B82
    dbc0:	82 30       	cpi	r24, 0x02	; 2
    dbc2:	09 f5       	brne	.+66     	; 0xdc06 <update_handle_select+0xb2>
	}
	if (start_game)
    dbc4:	cc 23       	and	r28, r28
    dbc6:	f9 f0       	breq	.+62     	; 0xdc06 <update_handle_select+0xb2>
	{
		if (game.selection == PVCPU)
    dbc8:	80 91 b6 0b 	lds	r24, 0x0BB6
    dbcc:	81 11       	cpse	r24, r1
    dbce:	0f c0       	rjmp	.+30     	; 0xdbee <update_handle_select+0x9a>
		{
			player2.handle_id = 9;
    dbd0:	89 e0       	ldi	r24, 0x09	; 9
    dbd2:	80 93 52 0f 	sts	0x0F52, r24
			memcpy(player2.handle, &handles.data[9*3], 3);
    dbd6:	80 91 a0 0b 	lds	r24, 0x0BA0
    dbda:	90 91 a1 0b 	lds	r25, 0x0BA1
    dbde:	a0 91 a2 0b 	lds	r26, 0x0BA2
    dbe2:	80 93 53 0f 	sts	0x0F53, r24
    dbe6:	90 93 54 0f 	sts	0x0F54, r25
    dbea:	a0 93 55 0f 	sts	0x0F55, r26
		}
		level_transition(0);
    dbee:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    dbf0:	df 91       	pop	r29
    dbf2:	cf 91       	pop	r28
    dbf4:	1f 91       	pop	r17
    dbf6:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    dbf8:	0c 94 b5 58 	jmp	0xb16a	; 0xb16a <level_transition>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    dbfc:	c1 11       	cpse	r28, r1
    dbfe:	e8 cf       	rjmp	.-48     	; 0xdbd0 <update_handle_select+0x7c>
    dc00:	02 c0       	rjmp	.+4      	; 0xdc06 <update_handle_select+0xb2>
    dc02:	c1 11       	cpse	r28, r1
    dc04:	f4 cf       	rjmp	.-24     	; 0xdbee <update_handle_select+0x9a>
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
	}
}
    dc06:	df 91       	pop	r29
    dc08:	cf 91       	pop	r28
    dc0a:	1f 91       	pop	r17
    dc0c:	0f 91       	pop	r16
    dc0e:	08 95       	ret

0000dc10 <record_player_posture>:
	if (game.selection == JOINNETGAME && player == &player1) return 1;
	return 0;
}

void record_player_posture(Player* player)
{
    dc10:	fc 01       	movw	r30, r24
	player->old_direction = player->shared.direction;
    dc12:	80 81       	ld	r24, Z
    dc14:	85 a3       	std	Z+37, r24	; 0x25
	player->old_speed = player->shared.speed;
    dc16:	81 81       	ldd	r24, Z+1	; 0x01
    dc18:	86 a3       	std	Z+38, r24	; 0x26
	player->old_recoiled = player->shared.recoiled;
    dc1a:	82 81       	ldd	r24, Z+2	; 0x02
    dc1c:	87 a3       	std	Z+39, r24	; 0x27
    dc1e:	08 95       	ret

0000dc20 <player_posture_changed>:
}

u8 player_posture_changed(Player* player)
{
    dc20:	fc 01       	movw	r30, r24
	if (player->old_direction != player->shared.direction) return 1;
    dc22:	95 a1       	ldd	r25, Z+37	; 0x25
    dc24:	80 81       	ld	r24, Z
    dc26:	98 13       	cpse	r25, r24
    dc28:	0b c0       	rjmp	.+22     	; 0xdc40 <player_posture_changed+0x20>
	if (player->old_speed != player->shared.speed) return 1;
    dc2a:	96 a1       	ldd	r25, Z+38	; 0x26
    dc2c:	81 81       	ldd	r24, Z+1	; 0x01
    dc2e:	98 13       	cpse	r25, r24
    dc30:	07 c0       	rjmp	.+14     	; 0xdc40 <player_posture_changed+0x20>
	if (player->old_recoiled != player->shared.recoiled) return 1;
    dc32:	81 e0       	ldi	r24, 0x01	; 1
    dc34:	27 a1       	ldd	r18, Z+39	; 0x27
    dc36:	92 81       	ldd	r25, Z+2	; 0x02
    dc38:	29 13       	cpse	r18, r25
    dc3a:	03 c0       	rjmp	.+6      	; 0xdc42 <player_posture_changed+0x22>
    dc3c:	80 e0       	ldi	r24, 0x00	; 0
    dc3e:	08 95       	ret
	player->old_recoiled = player->shared.recoiled;
}

u8 player_posture_changed(Player* player)
{
	if (player->old_direction != player->shared.direction) return 1;
    dc40:	81 e0       	ldi	r24, 0x01	; 1
	if (player->old_speed != player->shared.speed) return 1;
	if (player->old_recoiled != player->shared.recoiled) return 1;
	return 0;
}
    dc42:	08 95       	ret

0000dc44 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    dc44:	df 92       	push	r13
    dc46:	ef 92       	push	r14
    dc48:	ff 92       	push	r15
    dc4a:	0f 93       	push	r16
    dc4c:	1f 93       	push	r17
    dc4e:	cf 93       	push	r28
    dc50:	df 93       	push	r29
    dc52:	8c 01       	movw	r16, r24
    dc54:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    dc56:	80 91 a5 0b 	lds	r24, 0x0BA5
    dc5a:	88 23       	and	r24, r24
    dc5c:	19 f1       	breq	.+70     	; 0xdca4 <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    dc5e:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    dc62:	40 e5       	ldi	r20, 0x50	; 80
    dc64:	5b e6       	ldi	r21, 0x6B	; 107
    dc66:	6c e0       	ldi	r22, 0x0C	; 12
    dc68:	88 e0       	ldi	r24, 0x08	; 8
    dc6a:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <DrawMap>
		Print(12, 13, (char*) strPaused);
    dc6e:	4a e1       	ldi	r20, 0x1A	; 26
    dc70:	54 e0       	ldi	r21, 0x04	; 4
    dc72:	6d e0       	ldi	r22, 0x0D	; 13
    dc74:	70 e0       	ldi	r23, 0x00	; 0
    dc76:	8c e0       	ldi	r24, 0x0C	; 12
    dc78:	90 e0       	ldi	r25, 0x00	; 0
    dc7a:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		Print(11, 14, (char*) strExit);
    dc7e:	41 e2       	ldi	r20, 0x21	; 33
    dc80:	54 e0       	ldi	r21, 0x04	; 4
    dc82:	6e e0       	ldi	r22, 0x0E	; 14
    dc84:	70 e0       	ldi	r23, 0x00	; 0
    dc86:	8b e0       	ldi	r24, 0x0B	; 11
    dc88:	90 e0       	ldi	r25, 0x00	; 0
    dc8a:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <Print>
		
		// Update
		update_player(p1, &player1);
    dc8e:	65 ed       	ldi	r22, 0xD5	; 213
    dc90:	7b e0       	ldi	r23, 0x0B	; 11
    dc92:	c8 01       	movw	r24, r16
    dc94:	0e 94 b3 68 	call	0xd166	; 0xd166 <update_player>
		update_player(p2, &player2);
    dc98:	67 e4       	ldi	r22, 0x47	; 71
    dc9a:	7f e0       	ldi	r23, 0x0F	; 15
    dc9c:	ce 01       	movw	r24, r28
    dc9e:	0e 94 b3 68 	call	0xd166	; 0xd166 <update_player>
    dca2:	5b c2       	rjmp	.+1206   	; 0xe15a <update_level+0x516>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    dca4:	90 91 a6 0b 	lds	r25, 0x0BA6
    dca8:	91 30       	cpi	r25, 0x01	; 1
    dcaa:	09 f0       	breq	.+2      	; 0xdcae <update_level+0x6a>
    dcac:	54 c0       	rjmp	.+168    	; 0xdd56 <update_level+0x112>
	{
		// Render
		record_player_posture(game.boss_fight_player);
    dcae:	80 91 b2 0b 	lds	r24, 0x0BB2
    dcb2:	90 91 b3 0b 	lds	r25, 0x0BB3
    dcb6:	0e 94 08 6e 	call	0xdc10	; 0xdc10 <record_player_posture>
		render_boss_fight_scope_load();
    dcba:	0e 94 e5 58 	call	0xb1ca	; 0xb1ca <render_boss_fight_scope_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    dcbe:	60 e0       	ldi	r22, 0x00	; 0
    dcc0:	80 91 b2 0b 	lds	r24, 0x0BB2
    dcc4:	90 91 b3 0b 	lds	r25, 0x0BB3
    dcc8:	0e 94 6d 52 	call	0xa4da	; 0xa4da <tank_map>
    dccc:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    dcce:	40 e0       	ldi	r20, 0x00	; 0
    dcd0:	63 e8       	ldi	r22, 0x83	; 131
    dcd2:	71 e3       	ldi	r23, 0x31	; 49
    dcd4:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		p1_shot_index = p2_index + 4;
    dcd8:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    dcda:	6c 2f       	mov	r22, r28
    dcdc:	80 91 b2 0b 	lds	r24, 0x0BB2
    dce0:	90 91 b3 0b 	lds	r25, 0x0BB3
    dce4:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <shot_map>
    dce8:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    dcea:	40 e0       	ldi	r20, 0x00	; 0
    dcec:	69 e8       	ldi	r22, 0x89	; 137
    dcee:	71 e3       	ldi	r23, 0x31	; 49
    dcf0:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    dcf4:	6c 2f       	mov	r22, r28
    dcf6:	80 91 b2 0b 	lds	r24, 0x0BB2
    dcfa:	90 91 b3 0b 	lds	r25, 0x0BB3
    dcfe:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <shot_map>
		render_player(game.boss_fight_player, p1_index);
    dd02:	60 e0       	ldi	r22, 0x00	; 0
    dd04:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd08:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd0c:	0e 94 c9 51 	call	0xa392	; 0xa392 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    dd10:	6c 2f       	mov	r22, r28
    dd12:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd16:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd1a:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <render_shot>
		render_shot(&player2, p2_shot_index);
    dd1e:	6d 2f       	mov	r22, r29
    dd20:	87 e4       	ldi	r24, 0x47	; 71
    dd22:	9f e0       	ldi	r25, 0x0F	; 15
    dd24:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <render_shot>
		render_tile_explosions(&tile_animations);
    dd28:	87 eb       	ldi	r24, 0xB7	; 183
    dd2a:	9b e0       	ldi	r25, 0x0B	; 11
    dd2c:	0e 94 1e 52 	call	0xa43c	; 0xa43c <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    dd30:	60 91 b2 0b 	lds	r22, 0x0BB2
    dd34:	70 91 b3 0b 	lds	r23, 0x0BB3
    dd38:	80 91 b4 0b 	lds	r24, 0x0BB4
    dd3c:	90 91 b5 0b 	lds	r25, 0x0BB5
    dd40:	0e 94 b3 68 	call	0xd166	; 0xd166 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    dd44:	60 91 a7 0b 	lds	r22, 0x0BA7
    dd48:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd4c:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd50:	0e 94 46 6a 	call	0xd48c	; 0xd48c <collision_detect_player>
    dd54:	02 c2       	rjmp	.+1028   	; 0xe15a <update_level+0x516>
		
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    dd56:	92 30       	cpi	r25, 0x02	; 2
    dd58:	09 f0       	breq	.+2      	; 0xdd5c <update_level+0x118>
    dd5a:	42 c0       	rjmp	.+132    	; 0xdde0 <update_level+0x19c>
	{
		// Render
		record_player_posture(game.boss_fight_player);
    dd5c:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd60:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd64:	0e 94 08 6e 	call	0xdc10	; 0xdc10 <record_player_posture>
		render_boss_fight_sub_load();
    dd68:	0e 94 f8 58 	call	0xb1f0	; 0xb1f0 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    dd6c:	60 e0       	ldi	r22, 0x00	; 0
    dd6e:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd72:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd76:	0e 94 6d 52 	call	0xa4da	; 0xa4da <tank_map>
    dd7a:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    dd7c:	40 e0       	ldi	r20, 0x00	; 0
    dd7e:	63 e8       	ldi	r22, 0x83	; 131
    dd80:	71 e3       	ldi	r23, 0x31	; 49
    dd82:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		p1_shot_index = p2_index + 4;
    dd86:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    dd88:	6c 2f       	mov	r22, r28
    dd8a:	80 91 b2 0b 	lds	r24, 0x0BB2
    dd8e:	90 91 b3 0b 	lds	r25, 0x0BB3
    dd92:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <shot_map>
    dd96:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    dd98:	40 e0       	ldi	r20, 0x00	; 0
    dd9a:	69 e8       	ldi	r22, 0x89	; 137
    dd9c:	71 e3       	ldi	r23, 0x31	; 49
    dd9e:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    dda2:	6c 2f       	mov	r22, r28
    dda4:	80 91 b2 0b 	lds	r24, 0x0BB2
    dda8:	90 91 b3 0b 	lds	r25, 0x0BB3
    ddac:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <shot_map>
		render_player(game.boss_fight_player, p1_index);
    ddb0:	60 e0       	ldi	r22, 0x00	; 0
    ddb2:	80 91 b2 0b 	lds	r24, 0x0BB2
    ddb6:	90 91 b3 0b 	lds	r25, 0x0BB3
    ddba:	0e 94 c9 51 	call	0xa392	; 0xa392 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    ddbe:	6c 2f       	mov	r22, r28
    ddc0:	80 91 b2 0b 	lds	r24, 0x0BB2
    ddc4:	90 91 b3 0b 	lds	r25, 0x0BB3
    ddc8:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <render_shot>
		render_shot(&player2, p2_shot_index);
    ddcc:	6d 2f       	mov	r22, r29
    ddce:	87 e4       	ldi	r24, 0x47	; 71
    ddd0:	9f e0       	ldi	r25, 0x0F	; 15
    ddd2:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <render_shot>
		render_tile_explosions(&tile_animations);
    ddd6:	87 eb       	ldi	r24, 0xB7	; 183
    ddd8:	9b e0       	ldi	r25, 0x0B	; 11
    ddda:	0e 94 1e 52 	call	0xa43c	; 0xa43c <render_tile_explosions>
    ddde:	9c c0       	rjmp	.+312    	; 0xdf18 <update_level+0x2d4>
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
		if (player_posture_changed(game.boss_fight_player)) send_smart_net_message(game.boss_fight_player, game.boss_fight_joypad, NETPOSCHANGE);
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    dde0:	94 30       	cpi	r25, 0x04	; 4
    dde2:	09 f0       	breq	.+2      	; 0xdde6 <update_level+0x1a2>
    dde4:	ac c0       	rjmp	.+344    	; 0xdf3e <update_level+0x2fa>
	{
		
		record_player_posture(game.boss_fight_player);
    dde6:	80 91 b2 0b 	lds	r24, 0x0BB2
    ddea:	90 91 b3 0b 	lds	r25, 0x0BB3
    ddee:	0e 94 08 6e 	call	0xdc10	; 0xdc10 <record_player_posture>
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    ddf2:	80 91 40 10 	lds	r24, 0x1040
    ddf6:	81 11       	cpse	r24, r1
    ddf8:	07 c0       	rjmp	.+14     	; 0xde08 <update_level+0x1c4>
    ddfa:	80 91 0c 10 	lds	r24, 0x100C
    ddfe:	81 11       	cpse	r24, r1
    de00:	03 c0       	rjmp	.+6      	; 0xde08 <update_level+0x1c4>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    de02:	80 e2       	ldi	r24, 0x20	; 32
    de04:	80 93 a6 0b 	sts	0x0BA6, r24
		}
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    de08:	60 e0       	ldi	r22, 0x00	; 0
    de0a:	80 91 b2 0b 	lds	r24, 0x0BB2
    de0e:	90 91 b3 0b 	lds	r25, 0x0BB3
    de12:	0e 94 6d 52 	call	0xa4da	; 0xa4da <tank_map>
    de16:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    de18:	68 2f       	mov	r22, r24
    de1a:	80 91 b2 0b 	lds	r24, 0x0BB2
    de1e:	90 91 b3 0b 	lds	r25, 0x0BB3
    de22:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <shot_map>
    de26:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    de28:	01 e0       	ldi	r16, 0x01	; 1
    de2a:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    de2c:	12 e0       	ldi	r17, 0x02	; 2
    de2e:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    de30:	d3 e0       	ldi	r29, 0x03	; 3
    de32:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de34:	80 91 40 10 	lds	r24, 0x1040
    de38:	88 23       	and	r24, r24
    de3a:	19 f0       	breq	.+6      	; 0xde42 <update_level+0x1fe>
	return (char*) map_sub_turret;
    de3c:	6b e3       	ldi	r22, 0x3B	; 59
    de3e:	71 e3       	ldi	r23, 0x31	; 49
    de40:	02 c0       	rjmp	.+4      	; 0xde46 <update_level+0x202>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de42:	69 e8       	ldi	r22, 0x89	; 137
    de44:	71 e3       	ldi	r23, 0x31	; 49
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    de46:	40 e0       	ldi	r20, 0x00	; 0
    de48:	8c 2f       	mov	r24, r28
    de4a:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de4e:	80 91 40 10 	lds	r24, 0x1040
    de52:	88 23       	and	r24, r24
    de54:	19 f0       	breq	.+6      	; 0xde5c <update_level+0x218>
	return (char*) map_sub_shot;
    de56:	6e e3       	ldi	r22, 0x3E	; 62
    de58:	71 e3       	ldi	r23, 0x31	; 49
    de5a:	02 c0       	rjmp	.+4      	; 0xde60 <update_level+0x21c>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de5c:	69 e8       	ldi	r22, 0x89	; 137
    de5e:	71 e3       	ldi	r23, 0x31	; 49
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    de60:	40 e0       	ldi	r20, 0x00	; 0
    de62:	80 2f       	mov	r24, r16
    de64:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de68:	80 91 0c 10 	lds	r24, 0x100C
    de6c:	88 23       	and	r24, r24
    de6e:	19 f0       	breq	.+6      	; 0xde76 <update_level+0x232>
	return (char*) map_sub_turret;
    de70:	6b e3       	ldi	r22, 0x3B	; 59
    de72:	71 e3       	ldi	r23, 0x31	; 49
    de74:	02 c0       	rjmp	.+4      	; 0xde7a <update_level+0x236>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de76:	69 e8       	ldi	r22, 0x89	; 137
    de78:	71 e3       	ldi	r23, 0x31	; 49
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    de7a:	40 e0       	ldi	r20, 0x00	; 0
    de7c:	81 2f       	mov	r24, r17
    de7e:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de82:	80 91 0c 10 	lds	r24, 0x100C
    de86:	88 23       	and	r24, r24
    de88:	19 f0       	breq	.+6      	; 0xde90 <update_level+0x24c>
	return (char*) map_sub_shot;
    de8a:	6e e3       	ldi	r22, 0x3E	; 62
    de8c:	71 e3       	ldi	r23, 0x31	; 49
    de8e:	02 c0       	rjmp	.+4      	; 0xde94 <update_level+0x250>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    de90:	69 e8       	ldi	r22, 0x89	; 137
    de92:	71 e3       	ldi	r23, 0x31	; 49
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    de94:	40 e0       	ldi	r20, 0x00	; 0
    de96:	8d 2f       	mov	r24, r29
    de98:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    de9c:	60 e0       	ldi	r22, 0x00	; 0
    de9e:	80 91 b2 0b 	lds	r24, 0x0BB2
    dea2:	90 91 b3 0b 	lds	r25, 0x0BB3
    dea6:	0e 94 c9 51 	call	0xa392	; 0xa392 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    deaa:	6f 2d       	mov	r22, r15
    deac:	80 91 b2 0b 	lds	r24, 0x0BB2
    deb0:	90 91 b3 0b 	lds	r25, 0x0BB3
    deb4:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <render_shot>
		render_tile_explosions(&tile_animations);
    deb8:	87 eb       	ldi	r24, 0xB7	; 183
    deba:	9b e0       	ldi	r25, 0x0B	; 11
    debc:	0e 94 1e 52 	call	0xa43c	; 0xa43c <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    dec0:	6c 2f       	mov	r22, r28
    dec2:	85 e3       	ldi	r24, 0x35	; 53
    dec4:	90 e1       	ldi	r25, 0x10	; 16
    dec6:	0e 94 3a 59 	call	0xb274	; 0xb274 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    deca:	60 2f       	mov	r22, r16
    decc:	85 e3       	ldi	r24, 0x35	; 53
    dece:	90 e1       	ldi	r25, 0x10	; 16
    ded0:	0e 94 63 59 	call	0xb2c6	; 0xb2c6 <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    ded4:	61 2f       	mov	r22, r17
    ded6:	81 e0       	ldi	r24, 0x01	; 1
    ded8:	90 e1       	ldi	r25, 0x10	; 16
    deda:	0e 94 3a 59 	call	0xb274	; 0xb274 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    dede:	6d 2f       	mov	r22, r29
    dee0:	81 e0       	ldi	r24, 0x01	; 1
    dee2:	90 e1       	ldi	r25, 0x10	; 16
    dee4:	0e 94 63 59 	call	0xb2c6	; 0xb2c6 <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    dee8:	40 e6       	ldi	r20, 0x60	; 96
    deea:	68 e2       	ldi	r22, 0x28	; 40
    deec:	85 e3       	ldi	r24, 0x35	; 53
    deee:	90 e1       	ldi	r25, 0x10	; 16
    def0:	0e 94 8c 59 	call	0xb318	; 0xb318 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    def4:	40 ec       	ldi	r20, 0xC0	; 192
    def6:	68 e8       	ldi	r22, 0x88	; 136
    def8:	81 e0       	ldi	r24, 0x01	; 1
    defa:	90 e1       	ldi	r25, 0x10	; 16
    defc:	0e 94 8c 59 	call	0xb318	; 0xb318 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    df00:	61 e4       	ldi	r22, 0x41	; 65
    df02:	70 e1       	ldi	r23, 0x10	; 16
    df04:	85 e3       	ldi	r24, 0x35	; 53
    df06:	90 e1       	ldi	r25, 0x10	; 16
    df08:	0e 94 07 6c 	call	0xd80e	; 0xd80e <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    df0c:	6d e0       	ldi	r22, 0x0D	; 13
    df0e:	70 e1       	ldi	r23, 0x10	; 16
    df10:	81 e0       	ldi	r24, 0x01	; 1
    df12:	90 e1       	ldi	r25, 0x10	; 16
    df14:	0e 94 07 6c 	call	0xd80e	; 0xd80e <update_turret_shot>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    df18:	60 91 b2 0b 	lds	r22, 0x0BB2
    df1c:	70 91 b3 0b 	lds	r23, 0x0BB3
    df20:	80 91 b4 0b 	lds	r24, 0x0BB4
    df24:	90 91 b5 0b 	lds	r25, 0x0BB5
    df28:	0e 94 b3 68 	call	0xd166	; 0xd166 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    df2c:	60 91 a7 0b 	lds	r22, 0x0BA7
    df30:	80 91 b2 0b 	lds	r24, 0x0BB2
    df34:	90 91 b3 0b 	lds	r25, 0x0BB3
    df38:	0e 94 46 6a 	call	0xd48c	; 0xd48c <collision_detect_player>
    df3c:	5c c0       	rjmp	.+184    	; 0xdff6 <update_level+0x3b2>
		if (player_posture_changed(game.boss_fight_player)) send_smart_net_message(game.boss_fight_player, game.boss_fight_joypad, NETPOSCHANGE);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    df3e:	90 32       	cpi	r25, 0x20	; 32
    df40:	09 f0       	breq	.+2      	; 0xdf44 <update_level+0x300>
    df42:	6a c0       	rjmp	.+212    	; 0xe018 <update_level+0x3d4>
	{
		// Render
		record_player_posture(game.boss_fight_player);
    df44:	80 91 b2 0b 	lds	r24, 0x0BB2
    df48:	90 91 b3 0b 	lds	r25, 0x0BB3
    df4c:	0e 94 08 6e 	call	0xdc10	; 0xdc10 <record_player_posture>
		render_boss_fight_sub_sinking();
    df50:	0e 94 25 59 	call	0xb24a	; 0xb24a <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    df54:	60 e0       	ldi	r22, 0x00	; 0
    df56:	80 91 b2 0b 	lds	r24, 0x0BB2
    df5a:	90 91 b3 0b 	lds	r25, 0x0BB3
    df5e:	0e 94 6d 52 	call	0xa4da	; 0xa4da <tank_map>
    df62:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    df64:	40 e0       	ldi	r20, 0x00	; 0
    df66:	63 e8       	ldi	r22, 0x83	; 131
    df68:	71 e3       	ldi	r23, 0x31	; 49
    df6a:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		p1_shot_index = p2_index + 4;
    df6e:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    df70:	6c 2f       	mov	r22, r28
    df72:	80 91 b2 0b 	lds	r24, 0x0BB2
    df76:	90 91 b3 0b 	lds	r25, 0x0BB3
    df7a:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <shot_map>
    df7e:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    df80:	40 e0       	ldi	r20, 0x00	; 0
    df82:	69 e8       	ldi	r22, 0x89	; 137
    df84:	71 e3       	ldi	r23, 0x31	; 49
    df86:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    df8a:	6c 2f       	mov	r22, r28
    df8c:	80 91 b2 0b 	lds	r24, 0x0BB2
    df90:	90 91 b3 0b 	lds	r25, 0x0BB3
    df94:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <shot_map>
		render_player(game.boss_fight_player, p1_index);
    df98:	60 e0       	ldi	r22, 0x00	; 0
    df9a:	80 91 b2 0b 	lds	r24, 0x0BB2
    df9e:	90 91 b3 0b 	lds	r25, 0x0BB3
    dfa2:	0e 94 c9 51 	call	0xa392	; 0xa392 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    dfa6:	6c 2f       	mov	r22, r28
    dfa8:	80 91 b2 0b 	lds	r24, 0x0BB2
    dfac:	90 91 b3 0b 	lds	r25, 0x0BB3
    dfb0:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <render_shot>
		render_shot(&player2, p2_shot_index);
    dfb4:	6d 2f       	mov	r22, r29
    dfb6:	87 e4       	ldi	r24, 0x47	; 71
    dfb8:	9f e0       	ldi	r25, 0x0F	; 15
    dfba:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <render_shot>
		render_tile_explosions(&tile_animations);
    dfbe:	87 eb       	ldi	r24, 0xB7	; 183
    dfc0:	9b e0       	ldi	r25, 0x0B	; 11
    dfc2:	0e 94 1e 52 	call	0xa43c	; 0xa43c <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    dfc6:	60 91 b2 0b 	lds	r22, 0x0BB2
    dfca:	70 91 b3 0b 	lds	r23, 0x0BB3
    dfce:	80 91 b4 0b 	lds	r24, 0x0BB4
    dfd2:	90 91 b5 0b 	lds	r25, 0x0BB5
    dfd6:	0e 94 b3 68 	call	0xd166	; 0xd166 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    dfda:	60 91 a7 0b 	lds	r22, 0x0BA7
    dfde:	80 91 b2 0b 	lds	r24, 0x0BB2
    dfe2:	90 91 b3 0b 	lds	r25, 0x0BB3
    dfe6:	0e 94 46 6a 	call	0xd48c	; 0xd48c <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    dfea:	80 91 a6 0b 	lds	r24, 0x0BA6
    dfee:	80 32       	cpi	r24, 0x20	; 32
    dff0:	11 f0       	breq	.+4      	; 0xdff6 <update_level+0x3b2>
		{
			resolve_scoring();
    dff2:	0e 94 15 5b 	call	0xb62a	; 0xb62a <resolve_scoring>
		}
		if (player_posture_changed(game.boss_fight_player)) send_smart_net_message(game.boss_fight_player, game.boss_fight_joypad, NETPOSCHANGE);
    dff6:	c0 91 b2 0b 	lds	r28, 0x0BB2
    dffa:	d0 91 b3 0b 	lds	r29, 0x0BB3
    dffe:	ce 01       	movw	r24, r28
    e000:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <player_posture_changed>
    e004:	88 23       	and	r24, r24
    e006:	09 f4       	brne	.+2      	; 0xe00a <update_level+0x3c6>
    e008:	a8 c0       	rjmp	.+336    	; 0xe15a <update_level+0x516>
    e00a:	60 91 b4 0b 	lds	r22, 0x0BB4
    e00e:	70 91 b5 0b 	lds	r23, 0x0BB5
    e012:	46 e0       	ldi	r20, 0x06	; 6
    e014:	ce 01       	movw	r24, r28
    e016:	9f c0       	rjmp	.+318    	; 0xe156 <update_level+0x512>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    e018:	90 31       	cpi	r25, 0x10	; 16
    e01a:	19 f4       	brne	.+6      	; 0xe022 <update_level+0x3de>
	{
		resolve_scoring();
    e01c:	0e 94 15 5b 	call	0xb62a	; 0xb62a <resolve_scoring>
    e020:	9c c0       	rjmp	.+312    	; 0xe15a <update_level+0x516>
	}
	else if (game.boss_fight_status == 0)
    e022:	91 11       	cpse	r25, r1
    e024:	9a c0       	rjmp	.+308    	; 0xe15a <update_level+0x516>
	{
		record_player_posture(&player1);
    e026:	85 ed       	ldi	r24, 0xD5	; 213
    e028:	9b e0       	ldi	r25, 0x0B	; 11
    e02a:	0e 94 08 6e 	call	0xdc10	; 0xdc10 <record_player_posture>
		record_player_posture(&player2);
    e02e:	87 e4       	ldi	r24, 0x47	; 71
    e030:	9f e0       	ldi	r25, 0x0F	; 15
    e032:	0e 94 08 6e 	call	0xdc10	; 0xdc10 <record_player_posture>
		p2_index = tank_map(&player1, p1_index);
    e036:	60 e0       	ldi	r22, 0x00	; 0
    e038:	85 ed       	ldi	r24, 0xD5	; 213
    e03a:	9b e0       	ldi	r25, 0x0B	; 11
    e03c:	0e 94 6d 52 	call	0xa4da	; 0xa4da <tank_map>
    e040:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    e042:	68 2f       	mov	r22, r24
    e044:	87 e4       	ldi	r24, 0x47	; 71
    e046:	9f e0       	ldi	r25, 0x0F	; 15
    e048:	0e 94 6d 52 	call	0xa4da	; 0xa4da <tank_map>
    e04c:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    e04e:	68 2f       	mov	r22, r24
    e050:	85 ed       	ldi	r24, 0xD5	; 213
    e052:	9b e0       	ldi	r25, 0x0B	; 11
    e054:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <shot_map>
    e058:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    e05a:	68 2f       	mov	r22, r24
    e05c:	87 e4       	ldi	r24, 0x47	; 71
    e05e:	9f e0       	ldi	r25, 0x0F	; 15
    e060:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <shot_map>
		render_player(&player1, p1_index);
    e064:	60 e0       	ldi	r22, 0x00	; 0
    e066:	85 ed       	ldi	r24, 0xD5	; 213
    e068:	9b e0       	ldi	r25, 0x0B	; 11
    e06a:	0e 94 c9 51 	call	0xa392	; 0xa392 <render_player>
		render_player(&player2, p2_index);
    e06e:	6d 2d       	mov	r22, r13
    e070:	87 e4       	ldi	r24, 0x47	; 71
    e072:	9f e0       	ldi	r25, 0x0F	; 15
    e074:	0e 94 c9 51 	call	0xa392	; 0xa392 <render_player>
		render_shot(&player1, p1_shot_index);
    e078:	6e 2d       	mov	r22, r14
    e07a:	85 ed       	ldi	r24, 0xD5	; 213
    e07c:	9b e0       	ldi	r25, 0x0B	; 11
    e07e:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <render_shot>
		render_shot(&player2, p2_shot_index);
    e082:	6f 2d       	mov	r22, r15
    e084:	87 e4       	ldi	r24, 0x47	; 71
    e086:	9f e0       	ldi	r25, 0x0F	; 15
    e088:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <render_shot>
		render_tile_explosions(&tile_animations);
    e08c:	87 eb       	ldi	r24, 0xB7	; 183
    e08e:	9b e0       	ldi	r25, 0x0B	; 11
    e090:	0e 94 1e 52 	call	0xa43c	; 0xa43c <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    e094:	80 91 ae 0b 	lds	r24, 0x0BAE
    e098:	90 91 af 0b 	lds	r25, 0x0BAF
    e09c:	89 3e       	cpi	r24, 0xE9	; 233
    e09e:	93 40       	sbci	r25, 0x03	; 3
    e0a0:	88 f0       	brcs	.+34     	; 0xe0c4 <update_level+0x480>
    e0a2:	80 91 dd 0f 	lds	r24, 0x0FDD
    e0a6:	90 91 de 0f 	lds	r25, 0x0FDE
    e0aa:	18 16       	cp	r1, r24
    e0ac:	19 06       	cpc	r1, r25
    e0ae:	54 f4       	brge	.+20     	; 0xe0c4 <update_level+0x480>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    e0b0:	81 ed       	ldi	r24, 0xD1	; 209
    e0b2:	9f e0       	ldi	r25, 0x0F	; 15
    e0b4:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <render_scope>
    e0b8:	88 23       	and	r24, r24
    e0ba:	21 f0       	breq	.+8      	; 0xe0c4 <update_level+0x480>
    e0bc:	10 92 af 0b 	sts	0x0BAF, r1
    e0c0:	10 92 ae 0b 	sts	0x0BAE, r1
		}
		game.scope_counter++;
    e0c4:	80 91 ae 0b 	lds	r24, 0x0BAE
    e0c8:	90 91 af 0b 	lds	r25, 0x0BAF
    e0cc:	01 96       	adiw	r24, 0x01	; 1
    e0ce:	90 93 af 0b 	sts	0x0BAF, r25
    e0d2:	80 93 ae 0b 	sts	0x0BAE, r24
		
		// Update
		update_player(p1, &player1);
    e0d6:	65 ed       	ldi	r22, 0xD5	; 213
    e0d8:	7b e0       	ldi	r23, 0x0B	; 11
    e0da:	c8 01       	movw	r24, r16
    e0dc:	0e 94 b3 68 	call	0xd166	; 0xd166 <update_player>
		update_player(p2, &player2);
    e0e0:	67 e4       	ldi	r22, 0x47	; 71
    e0e2:	7f e0       	ldi	r23, 0x0F	; 15
    e0e4:	ce 01       	movw	r24, r28
    e0e6:	0e 94 b3 68 	call	0xd166	; 0xd166 <update_player>
		resolve_scoring();
    e0ea:	0e 94 15 5b 	call	0xb62a	; 0xb62a <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    e0ee:	60 e0       	ldi	r22, 0x00	; 0
    e0f0:	85 ed       	ldi	r24, 0xD5	; 213
    e0f2:	9b e0       	ldi	r25, 0x0B	; 11
    e0f4:	0e 94 46 6a 	call	0xd48c	; 0xd48c <collision_detect_player>
    e0f8:	88 23       	and	r24, r24
    e0fa:	41 f0       	breq	.+16     	; 0xe10c <update_level+0x4c8>
    e0fc:	2f e0       	ldi	r18, 0x0F	; 15
    e0fe:	40 e0       	ldi	r20, 0x00	; 0
    e100:	67 e4       	ldi	r22, 0x47	; 71
    e102:	7f e0       	ldi	r23, 0x0F	; 15
    e104:	85 ed       	ldi	r24, 0xD5	; 213
    e106:	9b e0       	ldi	r25, 0x0B	; 11
    e108:	0e 94 b0 56 	call	0xad60	; 0xad60 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    e10c:	6f e0       	ldi	r22, 0x0F	; 15
    e10e:	87 e4       	ldi	r24, 0x47	; 71
    e110:	9f e0       	ldi	r25, 0x0F	; 15
    e112:	0e 94 46 6a 	call	0xd48c	; 0xd48c <collision_detect_player>
    e116:	88 23       	and	r24, r24
    e118:	41 f0       	breq	.+16     	; 0xe12a <update_level+0x4e6>
    e11a:	20 e0       	ldi	r18, 0x00	; 0
    e11c:	4f e0       	ldi	r20, 0x0F	; 15
    e11e:	65 ed       	ldi	r22, 0xD5	; 213
    e120:	7b e0       	ldi	r23, 0x0B	; 11
    e122:	87 e4       	ldi	r24, 0x47	; 71
    e124:	9f e0       	ldi	r25, 0x0F	; 15
    e126:	0e 94 b0 56 	call	0xad60	; 0xad60 <explode_player>
		if (player_posture_changed(&player1)) send_smart_net_message(&player1, p1, NETPOSCHANGE);
    e12a:	85 ed       	ldi	r24, 0xD5	; 213
    e12c:	9b e0       	ldi	r25, 0x0B	; 11
    e12e:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <player_posture_changed>
    e132:	88 23       	and	r24, r24
    e134:	31 f0       	breq	.+12     	; 0xe142 <update_level+0x4fe>
    e136:	46 e0       	ldi	r20, 0x06	; 6
    e138:	b8 01       	movw	r22, r16
    e13a:	85 ed       	ldi	r24, 0xD5	; 213
    e13c:	9b e0       	ldi	r25, 0x0B	; 11
    e13e:	0e 94 16 65 	call	0xca2c	; 0xca2c <send_smart_net_message>
		if (player_posture_changed(&player2)) send_smart_net_message(&player2, p2, NETPOSCHANGE);
    e142:	87 e4       	ldi	r24, 0x47	; 71
    e144:	9f e0       	ldi	r25, 0x0F	; 15
    e146:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <player_posture_changed>
    e14a:	88 23       	and	r24, r24
    e14c:	31 f0       	breq	.+12     	; 0xe15a <update_level+0x516>
    e14e:	46 e0       	ldi	r20, 0x06	; 6
    e150:	be 01       	movw	r22, r28
    e152:	87 e4       	ldi	r24, 0x47	; 71
    e154:	9f e0       	ldi	r25, 0x0F	; 15
    e156:	0e 94 16 65 	call	0xca2c	; 0xca2c <send_smart_net_message>
	}
	
	if (game.selection == CPUVCPU) 
    e15a:	80 91 b6 0b 	lds	r24, 0x0BB6
    e15e:	86 30       	cpi	r24, 0x06	; 6
    e160:	71 f5       	brne	.+92     	; 0xe1be <update_level+0x57a>
	{
		game.demo_counter++;
    e162:	80 91 ac 0b 	lds	r24, 0x0BAC
    e166:	90 91 ad 0b 	lds	r25, 0x0BAD
    e16a:	01 96       	adiw	r24, 0x01	; 1
    e16c:	90 93 ad 0b 	sts	0x0BAD, r25
    e170:	80 93 ac 0b 	sts	0x0BAC, r24
		held = ReadJoypad(0);
    e174:	80 e0       	ldi	r24, 0x00	; 0
    e176:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    e17a:	80 e0       	ldi	r24, 0x00	; 0
    e17c:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <ReadJoypad>
    e180:	89 2b       	or	r24, r25
    e182:	89 f0       	breq	.+34     	; 0xe1a6 <update_level+0x562>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    e184:	10 92 ad 0b 	sts	0x0BAD, r1
    e188:	10 92 ac 0b 	sts	0x0BAC, r1
			fade_through();
    e18c:	0e 94 c4 4f 	call	0x9f88	; 0x9f88 <fade_through>
			init_game_state();
    e190:	0e 94 5b 4f 	call	0x9eb6	; 0x9eb6 <init_game_state>
			load_splash();
#endif
		}
	}
}
    e194:	df 91       	pop	r29
    e196:	cf 91       	pop	r28
    e198:	1f 91       	pop	r17
    e19a:	0f 91       	pop	r16
    e19c:	ff 90       	pop	r15
    e19e:	ef 90       	pop	r14
    e1a0:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    e1a2:	0c 94 1e 5a 	jmp	0xb43c	; 0xb43c <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    e1a6:	81 e0       	ldi	r24, 0x01	; 1
    e1a8:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <ReadJoypad>
    e1ac:	89 2b       	or	r24, r25
    e1ae:	51 f7       	brne	.-44     	; 0xe184 <update_level+0x540>
    e1b0:	80 91 ac 0b 	lds	r24, 0x0BAC
    e1b4:	90 91 ad 0b 	lds	r25, 0x0BAD
    e1b8:	88 30       	cpi	r24, 0x08	; 8
    e1ba:	97 40       	sbci	r25, 0x07	; 7
    e1bc:	18 f7       	brcc	.-58     	; 0xe184 <update_level+0x540>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    e1be:	df 91       	pop	r29
    e1c0:	cf 91       	pop	r28
    e1c2:	1f 91       	pop	r17
    e1c4:	0f 91       	pop	r16
    e1c6:	ff 90       	pop	r15
    e1c8:	ef 90       	pop	r14
    e1ca:	df 90       	pop	r13
    e1cc:	08 95       	ret

0000e1ce <main>:
}

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    e1ce:	0e 94 c0 3a 	call	0x7580	; 0x7580 <GetTrueRandomSeed>
    e1d2:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e1d6:	87 e7       	ldi	r24, 0x77	; 119
    e1d8:	95 e0       	ldi	r25, 0x05	; 5
    e1da:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <InitMusicPlayer>
	SetMasterVolume(0xff);
    e1de:	8f ef       	ldi	r24, 0xFF	; 255
    e1e0:	0e 94 a3 40 	call	0x8146	; 0x8146 <SetMasterVolume>
	SetTileTable(tiles_data);
    e1e4:	8c e8       	ldi	r24, 0x8C	; 140
    e1e6:	91 e3       	ldi	r25, 0x31	; 49
    e1e8:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e1ec:	8b ef       	ldi	r24, 0xFB	; 251
    e1ee:	97 e2       	ldi	r25, 0x27	; 39
    e1f0:	0e 94 35 3a 	call	0x746a	; 0x746a <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    e1f4:	8b e9       	ldi	r24, 0x9B	; 155
    e1f6:	0e 94 56 3a 	call	0x74ac	; 0x74ac <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    e1fa:	60 e0       	ldi	r22, 0x00	; 0
    e1fc:	83 e0       	ldi	r24, 0x03	; 3
    e1fe:	0e 94 2f 49 	call	0x925e	; 0x925e <FadeIn>
	ClearVram();
    e202:	0e 94 3a 3a 	call	0x7474	; 0x7474 <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    e206:	86 e5       	ldi	r24, 0x56	; 86
    e208:	9b e0       	ldi	r25, 0x0B	; 11
    e20a:	0e 94 f6 4d 	call	0x9bec	; 0x9bec <init_scores>
	init_handles(&handles);
    e20e:	83 e8       	ldi	r24, 0x83	; 131
    e210:	9b e0       	ldi	r25, 0x0B	; 11
    e212:	0e 94 02 4e 	call	0x9c04	; 0x9c04 <init_handles>
	init_game_state();
    e216:	0e 94 5b 4f 	call	0x9eb6	; 0x9eb6 <init_game_state>
	load_credits();
    e21a:	0e 94 73 64 	call	0xc8e6	; 0xc8e6 <load_credits>
	load_splash();
    e21e:	0e 94 1e 5a 	call	0xb43c	; 0xb43c <load_splash>
	
	while (1)
	{
		waitForVSync();
    e222:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <waitForVSync>
		get_net_message();
    e226:	0e 94 29 65 	call	0xca52	; 0xca52 <get_net_message>
		switch (game.current_screen)
    e22a:	80 91 a3 0b 	lds	r24, 0x0BA3
    e22e:	82 30       	cpi	r24, 0x02	; 2
    e230:	71 f1       	breq	.+92     	; 0xe28e <main+0xc0>
    e232:	78 f4       	brcc	.+30     	; 0xe252 <main+0x84>
    e234:	88 23       	and	r24, r24
    e236:	f9 f0       	breq	.+62     	; 0xe276 <main+0xa8>
    e238:	81 30       	cpi	r24, 0x01	; 1
    e23a:	09 f0       	breq	.+2      	; 0xe23e <main+0x70>
    e23c:	e2 c0       	rjmp	.+452    	; 0xe402 <main+0x234>
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
				update_splash(&p1, &p2);
				break;
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    e23e:	60 e0       	ldi	r22, 0x00	; 0
    e240:	81 e5       	ldi	r24, 0x51	; 81
    e242:	9c e0       	ldi	r25, 0x0C	; 12
    e244:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
				update_tank_rank(&p1);
    e248:	81 e5       	ldi	r24, 0x51	; 81
    e24a:	9c e0       	ldi	r25, 0x0C	; 12
    e24c:	0e 94 da 5b 	call	0xb7b4	; 0xb7b4 <update_tank_rank>
				break;
    e250:	d8 c0       	rjmp	.+432    	; 0xe402 <main+0x234>
	
	while (1)
	{
		waitForVSync();
		get_net_message();
		switch (game.current_screen)
    e252:	84 30       	cpi	r24, 0x04	; 4
    e254:	09 f4       	brne	.+2      	; 0xe258 <main+0x8a>
    e256:	66 c0       	rjmp	.+204    	; 0xe324 <main+0x156>
    e258:	08 f4       	brcc	.+2      	; 0xe25c <main+0x8e>
    e25a:	6e c0       	rjmp	.+220    	; 0xe338 <main+0x16a>
    e25c:	85 30       	cpi	r24, 0x05	; 5
    e25e:	09 f0       	breq	.+2      	; 0xe262 <main+0x94>
    e260:	d0 c0       	rjmp	.+416    	; 0xe402 <main+0x234>
			case HOST_NET_GAME:
				LBGetJoyPadState(&p1, 0);
				update_host_net_game(&p1);
				break;
			case JOIN_NET_GAME:
				LBGetJoyPadState(&p1, 0);
    e262:	60 e0       	ldi	r22, 0x00	; 0
    e264:	81 e5       	ldi	r24, 0x51	; 81
    e266:	9c e0       	ldi	r25, 0x0C	; 12
    e268:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
				update_join_net_game(&p1);
    e26c:	81 e5       	ldi	r24, 0x51	; 81
    e26e:	9c e0       	ldi	r25, 0x0C	; 12
    e270:	0e 94 59 5f 	call	0xbeb2	; 0xbeb2 <update_join_net_game>
				break;
    e274:	c6 c0       	rjmp	.+396    	; 0xe402 <main+0x234>
		waitForVSync();
		get_net_message();
		switch (game.current_screen)
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    e276:	60 e0       	ldi	r22, 0x00	; 0
    e278:	81 e5       	ldi	r24, 0x51	; 81
    e27a:	9c e0       	ldi	r25, 0x0C	; 12
    e27c:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
				update_splash(&p1, &p2);
    e280:	66 e7       	ldi	r22, 0x76	; 118
    e282:	7b e0       	ldi	r23, 0x0B	; 11
    e284:	81 e5       	ldi	r24, 0x51	; 81
    e286:	9c e0       	ldi	r25, 0x0C	; 12
    e288:	0e 94 21 5e 	call	0xbc42	; 0xbc42 <update_splash>
				break;
    e28c:	ba c0       	rjmp	.+372    	; 0xe402 <main+0x234>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
				update_tank_rank(&p1);
				break;
			case HANDLE_SELECT:
				if (game.selection == HOSTNETGAME)
    e28e:	80 91 b6 0b 	lds	r24, 0x0BB6
    e292:	82 30       	cpi	r24, 0x02	; 2
    e294:	e1 f4       	brne	.+56     	; 0xe2ce <main+0x100>
				{
					LBGetJoyPadState(&p1, 0);
    e296:	60 e0       	ldi	r22, 0x00	; 0
    e298:	81 e5       	ldi	r24, 0x51	; 81
    e29a:	9c e0       	ldi	r25, 0x0C	; 12
    e29c:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
void LBGetJoyPadStateNet(JoyPadState* p, unsigned char index, NetMessage* netMessage)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = netMessage->held;
    e2a0:	80 91 e0 0f 	lds	r24, 0x0FE0
    e2a4:	90 91 e1 0f 	lds	r25, 0x0FE1
    e2a8:	90 93 7b 0b 	sts	0x0B7B, r25
    e2ac:	80 93 7a 0b 	sts	0x0B7A, r24
	p->pressed = netMessage->pressed;
    e2b0:	80 91 e2 0f 	lds	r24, 0x0FE2
    e2b4:	90 91 e3 0f 	lds	r25, 0x0FE3
    e2b8:	90 93 77 0b 	sts	0x0B77, r25
    e2bc:	80 93 76 0b 	sts	0x0B76, r24
	p->held_cycles = 0;
    e2c0:	10 92 7c 0b 	sts	0x0B7C, r1
	p->released = 0;
    e2c4:	10 92 79 0b 	sts	0x0B79, r1
    e2c8:	10 92 78 0b 	sts	0x0B78, r1
    e2cc:	24 c0       	rjmp	.+72     	; 0xe316 <main+0x148>
					LBGetJoyPadStateNet(&p2, 1, &netMessage);
				}
				else if (game.selection == JOINNETGAME)
    e2ce:	83 30       	cpi	r24, 0x03	; 3
    e2d0:	c1 f4       	brne	.+48     	; 0xe302 <main+0x134>
void LBGetJoyPadStateNet(JoyPadState* p, unsigned char index, NetMessage* netMessage)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = netMessage->held;
    e2d2:	80 91 e0 0f 	lds	r24, 0x0FE0
    e2d6:	90 91 e1 0f 	lds	r25, 0x0FE1
    e2da:	90 93 56 0c 	sts	0x0C56, r25
    e2de:	80 93 55 0c 	sts	0x0C55, r24
	p->pressed = netMessage->pressed;
    e2e2:	80 91 e2 0f 	lds	r24, 0x0FE2
    e2e6:	90 91 e3 0f 	lds	r25, 0x0FE3
    e2ea:	90 93 52 0c 	sts	0x0C52, r25
    e2ee:	80 93 51 0c 	sts	0x0C51, r24
	p->held_cycles = 0;
    e2f2:	10 92 57 0c 	sts	0x0C57, r1
	p->released = 0;
    e2f6:	10 92 54 0c 	sts	0x0C54, r1
    e2fa:	10 92 53 0c 	sts	0x0C53, r1
				{
					LBGetJoyPadStateNet(&p1, 1, &netMessage);
					LBGetJoyPadState(&p2, 0);
    e2fe:	60 e0       	ldi	r22, 0x00	; 0
    e300:	06 c0       	rjmp	.+12     	; 0xe30e <main+0x140>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e302:	60 e0       	ldi	r22, 0x00	; 0
    e304:	81 e5       	ldi	r24, 0x51	; 81
    e306:	9c e0       	ldi	r25, 0x0C	; 12
    e308:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e30c:	61 e0       	ldi	r22, 0x01	; 1
    e30e:	86 e7       	ldi	r24, 0x76	; 118
    e310:	9b e0       	ldi	r25, 0x0B	; 11
    e312:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
				}
				update_handle_select(&p1, &p2);
    e316:	66 e7       	ldi	r22, 0x76	; 118
    e318:	7b e0       	ldi	r23, 0x0B	; 11
    e31a:	81 e5       	ldi	r24, 0x51	; 81
    e31c:	9c e0       	ldi	r25, 0x0C	; 12
    e31e:	0e 94 aa 6d 	call	0xdb54	; 0xdb54 <update_handle_select>
				break;
    e322:	6f c0       	rjmp	.+222    	; 0xe402 <main+0x234>
#if JAMMA
#else
			case HOST_NET_GAME:
				LBGetJoyPadState(&p1, 0);
    e324:	60 e0       	ldi	r22, 0x00	; 0
    e326:	81 e5       	ldi	r24, 0x51	; 81
    e328:	9c e0       	ldi	r25, 0x0C	; 12
    e32a:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
				update_host_net_game(&p1);
    e32e:	81 e5       	ldi	r24, 0x51	; 81
    e330:	9c e0       	ldi	r25, 0x0C	; 12
    e332:	0e 94 bd 5d 	call	0xbb7a	; 0xbb7a <update_host_net_game>
				break;
    e336:	65 c0       	rjmp	.+202    	; 0xe402 <main+0x234>
				LBGetJoyPadState(&p1, 0);
				update_join_net_game(&p1);
				break;
#endif
			case LEVEL:
				if (game.selection == PVCPU)
    e338:	80 91 b6 0b 	lds	r24, 0x0BB6
    e33c:	81 11       	cpse	r24, r1
    e33e:	06 c0       	rjmp	.+12     	; 0xe34c <main+0x17e>
				{
					LBGetJoyPadState(&p1, 0);
    e340:	60 e0       	ldi	r22, 0x00	; 0
    e342:	81 e5       	ldi	r24, 0x51	; 81
    e344:	9c e0       	ldi	r25, 0x0C	; 12
    e346:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
    e34a:	0a c0       	rjmp	.+20     	; 0xe360 <main+0x192>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    e34c:	86 30       	cpi	r24, 0x06	; 6
    e34e:	89 f4       	brne	.+34     	; 0xe372 <main+0x1a4>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    e350:	41 e5       	ldi	r20, 0x51	; 81
    e352:	5c e0       	ldi	r21, 0x0C	; 12
    e354:	67 e4       	ldi	r22, 0x47	; 71
    e356:	7f e0       	ldi	r23, 0x0F	; 15
    e358:	85 ed       	ldi	r24, 0xD5	; 213
    e35a:	9b e0       	ldi	r25, 0x0B	; 11
    e35c:	0e 94 7f 61 	call	0xc2fe	; 0xc2fe <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    e360:	46 e7       	ldi	r20, 0x76	; 118
    e362:	5b e0       	ldi	r21, 0x0B	; 11
    e364:	65 ed       	ldi	r22, 0xD5	; 213
    e366:	7b e0       	ldi	r23, 0x0B	; 11
    e368:	87 e4       	ldi	r24, 0x47	; 71
    e36a:	9f e0       	ldi	r25, 0x0F	; 15
    e36c:	0e 94 7f 61 	call	0xc2fe	; 0xc2fe <get_cpu_joypad_state>
    e370:	42 c0       	rjmp	.+132    	; 0xe3f6 <main+0x228>
				}
				else if (game.selection == HOSTNETGAME)
    e372:	82 30       	cpi	r24, 0x02	; 2
    e374:	e1 f4       	brne	.+56     	; 0xe3ae <main+0x1e0>
				{
					LBGetJoyPadState(&p1, 0);
    e376:	60 e0       	ldi	r22, 0x00	; 0
    e378:	81 e5       	ldi	r24, 0x51	; 81
    e37a:	9c e0       	ldi	r25, 0x0C	; 12
    e37c:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
void LBGetJoyPadStateNet(JoyPadState* p, unsigned char index, NetMessage* netMessage)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = netMessage->held;
    e380:	80 91 e0 0f 	lds	r24, 0x0FE0
    e384:	90 91 e1 0f 	lds	r25, 0x0FE1
    e388:	90 93 7b 0b 	sts	0x0B7B, r25
    e38c:	80 93 7a 0b 	sts	0x0B7A, r24
	p->pressed = netMessage->pressed;
    e390:	80 91 e2 0f 	lds	r24, 0x0FE2
    e394:	90 91 e3 0f 	lds	r25, 0x0FE3
    e398:	90 93 77 0b 	sts	0x0B77, r25
    e39c:	80 93 76 0b 	sts	0x0B76, r24
	p->held_cycles = 0;
    e3a0:	10 92 7c 0b 	sts	0x0B7C, r1
	p->released = 0;
    e3a4:	10 92 79 0b 	sts	0x0B79, r1
    e3a8:	10 92 78 0b 	sts	0x0B78, r1
    e3ac:	24 c0       	rjmp	.+72     	; 0xe3f6 <main+0x228>
					LBGetJoyPadStateNet(&p2, 1, &netMessage);
				}
				else if (game.selection == JOINNETGAME)
    e3ae:	83 30       	cpi	r24, 0x03	; 3
    e3b0:	c1 f4       	brne	.+48     	; 0xe3e2 <main+0x214>
void LBGetJoyPadStateNet(JoyPadState* p, unsigned char index, NetMessage* netMessage)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = netMessage->held;
    e3b2:	80 91 e0 0f 	lds	r24, 0x0FE0
    e3b6:	90 91 e1 0f 	lds	r25, 0x0FE1
    e3ba:	90 93 56 0c 	sts	0x0C56, r25
    e3be:	80 93 55 0c 	sts	0x0C55, r24
	p->pressed = netMessage->pressed;
    e3c2:	80 91 e2 0f 	lds	r24, 0x0FE2
    e3c6:	90 91 e3 0f 	lds	r25, 0x0FE3
    e3ca:	90 93 52 0c 	sts	0x0C52, r25
    e3ce:	80 93 51 0c 	sts	0x0C51, r24
	p->held_cycles = 0;
    e3d2:	10 92 57 0c 	sts	0x0C57, r1
	p->released = 0;
    e3d6:	10 92 54 0c 	sts	0x0C54, r1
    e3da:	10 92 53 0c 	sts	0x0C53, r1
				{
					LBGetJoyPadStateNet(&p1, 1, &netMessage);
					LBGetJoyPadState(&p2, 0);
    e3de:	60 e0       	ldi	r22, 0x00	; 0
    e3e0:	06 c0       	rjmp	.+12     	; 0xe3ee <main+0x220>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e3e2:	60 e0       	ldi	r22, 0x00	; 0
    e3e4:	81 e5       	ldi	r24, 0x51	; 81
    e3e6:	9c e0       	ldi	r25, 0x0C	; 12
    e3e8:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e3ec:	61 e0       	ldi	r22, 0x01	; 1
    e3ee:	86 e7       	ldi	r24, 0x76	; 118
    e3f0:	9b e0       	ldi	r25, 0x0B	; 11
    e3f2:	0e 94 39 4c 	call	0x9872	; 0x9872 <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    e3f6:	66 e7       	ldi	r22, 0x76	; 118
    e3f8:	7b e0       	ldi	r23, 0x0B	; 11
    e3fa:	81 e5       	ldi	r24, 0x51	; 81
    e3fc:	9c e0       	ldi	r25, 0x0C	; 12
    e3fe:	0e 94 22 6e 	call	0xdc44	; 0xdc44 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e402:	80 91 01 01 	lds	r24, 0x0101
    e406:	90 91 02 01 	lds	r25, 0x0102
    e40a:	01 96       	adiw	r24, 0x01	; 1
    e40c:	90 93 02 01 	sts	0x0102, r25
    e410:	80 93 01 01 	sts	0x0101, r24
	}
    e414:	06 cf       	rjmp	.-500    	; 0xe222 <main+0x54>

0000e416 <__udivmodqi4>:
    e416:	99 1b       	sub	r25, r25
    e418:	79 e0       	ldi	r23, 0x09	; 9
    e41a:	04 c0       	rjmp	.+8      	; 0xe424 <__udivmodqi4_ep>

0000e41c <__udivmodqi4_loop>:
    e41c:	99 1f       	adc	r25, r25
    e41e:	96 17       	cp	r25, r22
    e420:	08 f0       	brcs	.+2      	; 0xe424 <__udivmodqi4_ep>
    e422:	96 1b       	sub	r25, r22

0000e424 <__udivmodqi4_ep>:
    e424:	88 1f       	adc	r24, r24
    e426:	7a 95       	dec	r23
    e428:	c9 f7       	brne	.-14     	; 0xe41c <__udivmodqi4_loop>
    e42a:	80 95       	com	r24
    e42c:	08 95       	ret

0000e42e <__divmodqi4>:
    e42e:	87 fb       	bst	r24, 7
    e430:	08 2e       	mov	r0, r24
    e432:	06 26       	eor	r0, r22
    e434:	87 fd       	sbrc	r24, 7
    e436:	81 95       	neg	r24
    e438:	67 fd       	sbrc	r22, 7
    e43a:	61 95       	neg	r22
    e43c:	0e 94 0b 72 	call	0xe416	; 0xe416 <__udivmodqi4>
    e440:	0e f4       	brtc	.+2      	; 0xe444 <__divmodqi4_1>
    e442:	91 95       	neg	r25

0000e444 <__divmodqi4_1>:
    e444:	07 fc       	sbrc	r0, 7
    e446:	81 95       	neg	r24

0000e448 <__divmodqi4_exit>:
    e448:	08 95       	ret

0000e44a <__udivmodhi4>:
    e44a:	aa 1b       	sub	r26, r26
    e44c:	bb 1b       	sub	r27, r27
    e44e:	51 e1       	ldi	r21, 0x11	; 17
    e450:	07 c0       	rjmp	.+14     	; 0xe460 <__udivmodhi4_ep>

0000e452 <__udivmodhi4_loop>:
    e452:	aa 1f       	adc	r26, r26
    e454:	bb 1f       	adc	r27, r27
    e456:	a6 17       	cp	r26, r22
    e458:	b7 07       	cpc	r27, r23
    e45a:	10 f0       	brcs	.+4      	; 0xe460 <__udivmodhi4_ep>
    e45c:	a6 1b       	sub	r26, r22
    e45e:	b7 0b       	sbc	r27, r23

0000e460 <__udivmodhi4_ep>:
    e460:	88 1f       	adc	r24, r24
    e462:	99 1f       	adc	r25, r25
    e464:	5a 95       	dec	r21
    e466:	a9 f7       	brne	.-22     	; 0xe452 <__udivmodhi4_loop>
    e468:	80 95       	com	r24
    e46a:	90 95       	com	r25
    e46c:	bc 01       	movw	r22, r24
    e46e:	cd 01       	movw	r24, r26
    e470:	08 95       	ret

0000e472 <__divmodhi4>:
    e472:	97 fb       	bst	r25, 7
    e474:	07 2e       	mov	r0, r23
    e476:	16 f4       	brtc	.+4      	; 0xe47c <__divmodhi4+0xa>
    e478:	00 94       	com	r0
    e47a:	07 d0       	rcall	.+14     	; 0xe48a <__divmodhi4_neg1>
    e47c:	77 fd       	sbrc	r23, 7
    e47e:	09 d0       	rcall	.+18     	; 0xe492 <__divmodhi4_neg2>
    e480:	0e 94 25 72 	call	0xe44a	; 0xe44a <__udivmodhi4>
    e484:	07 fc       	sbrc	r0, 7
    e486:	05 d0       	rcall	.+10     	; 0xe492 <__divmodhi4_neg2>
    e488:	3e f4       	brtc	.+14     	; 0xe498 <__divmodhi4_exit>

0000e48a <__divmodhi4_neg1>:
    e48a:	90 95       	com	r25
    e48c:	81 95       	neg	r24
    e48e:	9f 4f       	sbci	r25, 0xFF	; 255
    e490:	08 95       	ret

0000e492 <__divmodhi4_neg2>:
    e492:	70 95       	com	r23
    e494:	61 95       	neg	r22
    e496:	7f 4f       	sbci	r23, 0xFF	; 255

0000e498 <__divmodhi4_exit>:
    e498:	08 95       	ret

0000e49a <__subsf3>:
    e49a:	50 58       	subi	r21, 0x80	; 128

0000e49c <__addsf3>:
    e49c:	bb 27       	eor	r27, r27
    e49e:	aa 27       	eor	r26, r26
    e4a0:	0e d0       	rcall	.+28     	; 0xe4be <__addsf3x>
    e4a2:	75 c1       	rjmp	.+746    	; 0xe78e <__fp_round>
    e4a4:	66 d1       	rcall	.+716    	; 0xe772 <__fp_pscA>
    e4a6:	30 f0       	brcs	.+12     	; 0xe4b4 <__addsf3+0x18>
    e4a8:	6b d1       	rcall	.+726    	; 0xe780 <__fp_pscB>
    e4aa:	20 f0       	brcs	.+8      	; 0xe4b4 <__addsf3+0x18>
    e4ac:	31 f4       	brne	.+12     	; 0xe4ba <__addsf3+0x1e>
    e4ae:	9f 3f       	cpi	r25, 0xFF	; 255
    e4b0:	11 f4       	brne	.+4      	; 0xe4b6 <__addsf3+0x1a>
    e4b2:	1e f4       	brtc	.+6      	; 0xe4ba <__addsf3+0x1e>
    e4b4:	5b c1       	rjmp	.+694    	; 0xe76c <__fp_nan>
    e4b6:	0e f4       	brtc	.+2      	; 0xe4ba <__addsf3+0x1e>
    e4b8:	e0 95       	com	r30
    e4ba:	e7 fb       	bst	r30, 7
    e4bc:	51 c1       	rjmp	.+674    	; 0xe760 <__fp_inf>

0000e4be <__addsf3x>:
    e4be:	e9 2f       	mov	r30, r25
    e4c0:	77 d1       	rcall	.+750    	; 0xe7b0 <__fp_split3>
    e4c2:	80 f3       	brcs	.-32     	; 0xe4a4 <__addsf3+0x8>
    e4c4:	ba 17       	cp	r27, r26
    e4c6:	62 07       	cpc	r22, r18
    e4c8:	73 07       	cpc	r23, r19
    e4ca:	84 07       	cpc	r24, r20
    e4cc:	95 07       	cpc	r25, r21
    e4ce:	18 f0       	brcs	.+6      	; 0xe4d6 <__addsf3x+0x18>
    e4d0:	71 f4       	brne	.+28     	; 0xe4ee <__addsf3x+0x30>
    e4d2:	9e f5       	brtc	.+102    	; 0xe53a <__addsf3x+0x7c>
    e4d4:	8f c1       	rjmp	.+798    	; 0xe7f4 <__fp_zero>
    e4d6:	0e f4       	brtc	.+2      	; 0xe4da <__addsf3x+0x1c>
    e4d8:	e0 95       	com	r30
    e4da:	0b 2e       	mov	r0, r27
    e4dc:	ba 2f       	mov	r27, r26
    e4de:	a0 2d       	mov	r26, r0
    e4e0:	0b 01       	movw	r0, r22
    e4e2:	b9 01       	movw	r22, r18
    e4e4:	90 01       	movw	r18, r0
    e4e6:	0c 01       	movw	r0, r24
    e4e8:	ca 01       	movw	r24, r20
    e4ea:	a0 01       	movw	r20, r0
    e4ec:	11 24       	eor	r1, r1
    e4ee:	ff 27       	eor	r31, r31
    e4f0:	59 1b       	sub	r21, r25
    e4f2:	99 f0       	breq	.+38     	; 0xe51a <__addsf3x+0x5c>
    e4f4:	59 3f       	cpi	r21, 0xF9	; 249
    e4f6:	50 f4       	brcc	.+20     	; 0xe50c <__addsf3x+0x4e>
    e4f8:	50 3e       	cpi	r21, 0xE0	; 224
    e4fa:	68 f1       	brcs	.+90     	; 0xe556 <__addsf3x+0x98>
    e4fc:	1a 16       	cp	r1, r26
    e4fe:	f0 40       	sbci	r31, 0x00	; 0
    e500:	a2 2f       	mov	r26, r18
    e502:	23 2f       	mov	r18, r19
    e504:	34 2f       	mov	r19, r20
    e506:	44 27       	eor	r20, r20
    e508:	58 5f       	subi	r21, 0xF8	; 248
    e50a:	f3 cf       	rjmp	.-26     	; 0xe4f2 <__addsf3x+0x34>
    e50c:	46 95       	lsr	r20
    e50e:	37 95       	ror	r19
    e510:	27 95       	ror	r18
    e512:	a7 95       	ror	r26
    e514:	f0 40       	sbci	r31, 0x00	; 0
    e516:	53 95       	inc	r21
    e518:	c9 f7       	brne	.-14     	; 0xe50c <__addsf3x+0x4e>
    e51a:	7e f4       	brtc	.+30     	; 0xe53a <__addsf3x+0x7c>
    e51c:	1f 16       	cp	r1, r31
    e51e:	ba 0b       	sbc	r27, r26
    e520:	62 0b       	sbc	r22, r18
    e522:	73 0b       	sbc	r23, r19
    e524:	84 0b       	sbc	r24, r20
    e526:	ba f0       	brmi	.+46     	; 0xe556 <__addsf3x+0x98>
    e528:	91 50       	subi	r25, 0x01	; 1
    e52a:	a1 f0       	breq	.+40     	; 0xe554 <__addsf3x+0x96>
    e52c:	ff 0f       	add	r31, r31
    e52e:	bb 1f       	adc	r27, r27
    e530:	66 1f       	adc	r22, r22
    e532:	77 1f       	adc	r23, r23
    e534:	88 1f       	adc	r24, r24
    e536:	c2 f7       	brpl	.-16     	; 0xe528 <__addsf3x+0x6a>
    e538:	0e c0       	rjmp	.+28     	; 0xe556 <__addsf3x+0x98>
    e53a:	ba 0f       	add	r27, r26
    e53c:	62 1f       	adc	r22, r18
    e53e:	73 1f       	adc	r23, r19
    e540:	84 1f       	adc	r24, r20
    e542:	48 f4       	brcc	.+18     	; 0xe556 <__addsf3x+0x98>
    e544:	87 95       	ror	r24
    e546:	77 95       	ror	r23
    e548:	67 95       	ror	r22
    e54a:	b7 95       	ror	r27
    e54c:	f7 95       	ror	r31
    e54e:	9e 3f       	cpi	r25, 0xFE	; 254
    e550:	08 f0       	brcs	.+2      	; 0xe554 <__addsf3x+0x96>
    e552:	b3 cf       	rjmp	.-154    	; 0xe4ba <__addsf3+0x1e>
    e554:	93 95       	inc	r25
    e556:	88 0f       	add	r24, r24
    e558:	08 f0       	brcs	.+2      	; 0xe55c <__addsf3x+0x9e>
    e55a:	99 27       	eor	r25, r25
    e55c:	ee 0f       	add	r30, r30
    e55e:	97 95       	ror	r25
    e560:	87 95       	ror	r24
    e562:	08 95       	ret

0000e564 <__cmpsf2>:
    e564:	d9 d0       	rcall	.+434    	; 0xe718 <__fp_cmp>
    e566:	08 f4       	brcc	.+2      	; 0xe56a <__cmpsf2+0x6>
    e568:	81 e0       	ldi	r24, 0x01	; 1
    e56a:	08 95       	ret

0000e56c <__divsf3>:
    e56c:	0c d0       	rcall	.+24     	; 0xe586 <__divsf3x>
    e56e:	0f c1       	rjmp	.+542    	; 0xe78e <__fp_round>
    e570:	07 d1       	rcall	.+526    	; 0xe780 <__fp_pscB>
    e572:	40 f0       	brcs	.+16     	; 0xe584 <__divsf3+0x18>
    e574:	fe d0       	rcall	.+508    	; 0xe772 <__fp_pscA>
    e576:	30 f0       	brcs	.+12     	; 0xe584 <__divsf3+0x18>
    e578:	21 f4       	brne	.+8      	; 0xe582 <__divsf3+0x16>
    e57a:	5f 3f       	cpi	r21, 0xFF	; 255
    e57c:	19 f0       	breq	.+6      	; 0xe584 <__divsf3+0x18>
    e57e:	f0 c0       	rjmp	.+480    	; 0xe760 <__fp_inf>
    e580:	51 11       	cpse	r21, r1
    e582:	39 c1       	rjmp	.+626    	; 0xe7f6 <__fp_szero>
    e584:	f3 c0       	rjmp	.+486    	; 0xe76c <__fp_nan>

0000e586 <__divsf3x>:
    e586:	14 d1       	rcall	.+552    	; 0xe7b0 <__fp_split3>
    e588:	98 f3       	brcs	.-26     	; 0xe570 <__divsf3+0x4>

0000e58a <__divsf3_pse>:
    e58a:	99 23       	and	r25, r25
    e58c:	c9 f3       	breq	.-14     	; 0xe580 <__divsf3+0x14>
    e58e:	55 23       	and	r21, r21
    e590:	b1 f3       	breq	.-20     	; 0xe57e <__divsf3+0x12>
    e592:	95 1b       	sub	r25, r21
    e594:	55 0b       	sbc	r21, r21
    e596:	bb 27       	eor	r27, r27
    e598:	aa 27       	eor	r26, r26
    e59a:	62 17       	cp	r22, r18
    e59c:	73 07       	cpc	r23, r19
    e59e:	84 07       	cpc	r24, r20
    e5a0:	38 f0       	brcs	.+14     	; 0xe5b0 <__divsf3_pse+0x26>
    e5a2:	9f 5f       	subi	r25, 0xFF	; 255
    e5a4:	5f 4f       	sbci	r21, 0xFF	; 255
    e5a6:	22 0f       	add	r18, r18
    e5a8:	33 1f       	adc	r19, r19
    e5aa:	44 1f       	adc	r20, r20
    e5ac:	aa 1f       	adc	r26, r26
    e5ae:	a9 f3       	breq	.-22     	; 0xe59a <__divsf3_pse+0x10>
    e5b0:	33 d0       	rcall	.+102    	; 0xe618 <__divsf3_pse+0x8e>
    e5b2:	0e 2e       	mov	r0, r30
    e5b4:	3a f0       	brmi	.+14     	; 0xe5c4 <__divsf3_pse+0x3a>
    e5b6:	e0 e8       	ldi	r30, 0x80	; 128
    e5b8:	30 d0       	rcall	.+96     	; 0xe61a <__divsf3_pse+0x90>
    e5ba:	91 50       	subi	r25, 0x01	; 1
    e5bc:	50 40       	sbci	r21, 0x00	; 0
    e5be:	e6 95       	lsr	r30
    e5c0:	00 1c       	adc	r0, r0
    e5c2:	ca f7       	brpl	.-14     	; 0xe5b6 <__divsf3_pse+0x2c>
    e5c4:	29 d0       	rcall	.+82     	; 0xe618 <__divsf3_pse+0x8e>
    e5c6:	fe 2f       	mov	r31, r30
    e5c8:	27 d0       	rcall	.+78     	; 0xe618 <__divsf3_pse+0x8e>
    e5ca:	66 0f       	add	r22, r22
    e5cc:	77 1f       	adc	r23, r23
    e5ce:	88 1f       	adc	r24, r24
    e5d0:	bb 1f       	adc	r27, r27
    e5d2:	26 17       	cp	r18, r22
    e5d4:	37 07       	cpc	r19, r23
    e5d6:	48 07       	cpc	r20, r24
    e5d8:	ab 07       	cpc	r26, r27
    e5da:	b0 e8       	ldi	r27, 0x80	; 128
    e5dc:	09 f0       	breq	.+2      	; 0xe5e0 <__divsf3_pse+0x56>
    e5de:	bb 0b       	sbc	r27, r27
    e5e0:	80 2d       	mov	r24, r0
    e5e2:	bf 01       	movw	r22, r30
    e5e4:	ff 27       	eor	r31, r31
    e5e6:	93 58       	subi	r25, 0x83	; 131
    e5e8:	5f 4f       	sbci	r21, 0xFF	; 255
    e5ea:	2a f0       	brmi	.+10     	; 0xe5f6 <__divsf3_pse+0x6c>
    e5ec:	9e 3f       	cpi	r25, 0xFE	; 254
    e5ee:	51 05       	cpc	r21, r1
    e5f0:	68 f0       	brcs	.+26     	; 0xe60c <__divsf3_pse+0x82>
    e5f2:	b6 c0       	rjmp	.+364    	; 0xe760 <__fp_inf>
    e5f4:	00 c1       	rjmp	.+512    	; 0xe7f6 <__fp_szero>
    e5f6:	5f 3f       	cpi	r21, 0xFF	; 255
    e5f8:	ec f3       	brlt	.-6      	; 0xe5f4 <__divsf3_pse+0x6a>
    e5fa:	98 3e       	cpi	r25, 0xE8	; 232
    e5fc:	dc f3       	brlt	.-10     	; 0xe5f4 <__divsf3_pse+0x6a>
    e5fe:	86 95       	lsr	r24
    e600:	77 95       	ror	r23
    e602:	67 95       	ror	r22
    e604:	b7 95       	ror	r27
    e606:	f7 95       	ror	r31
    e608:	9f 5f       	subi	r25, 0xFF	; 255
    e60a:	c9 f7       	brne	.-14     	; 0xe5fe <__divsf3_pse+0x74>
    e60c:	88 0f       	add	r24, r24
    e60e:	91 1d       	adc	r25, r1
    e610:	96 95       	lsr	r25
    e612:	87 95       	ror	r24
    e614:	97 f9       	bld	r25, 7
    e616:	08 95       	ret
    e618:	e1 e0       	ldi	r30, 0x01	; 1
    e61a:	66 0f       	add	r22, r22
    e61c:	77 1f       	adc	r23, r23
    e61e:	88 1f       	adc	r24, r24
    e620:	bb 1f       	adc	r27, r27
    e622:	62 17       	cp	r22, r18
    e624:	73 07       	cpc	r23, r19
    e626:	84 07       	cpc	r24, r20
    e628:	ba 07       	cpc	r27, r26
    e62a:	20 f0       	brcs	.+8      	; 0xe634 <__divsf3_pse+0xaa>
    e62c:	62 1b       	sub	r22, r18
    e62e:	73 0b       	sbc	r23, r19
    e630:	84 0b       	sbc	r24, r20
    e632:	ba 0b       	sbc	r27, r26
    e634:	ee 1f       	adc	r30, r30
    e636:	88 f7       	brcc	.-30     	; 0xe61a <__divsf3_pse+0x90>
    e638:	e0 95       	com	r30
    e63a:	08 95       	ret

0000e63c <__fixsfsi>:
    e63c:	04 d0       	rcall	.+8      	; 0xe646 <__fixunssfsi>
    e63e:	68 94       	set
    e640:	b1 11       	cpse	r27, r1
    e642:	d9 c0       	rjmp	.+434    	; 0xe7f6 <__fp_szero>
    e644:	08 95       	ret

0000e646 <__fixunssfsi>:
    e646:	bc d0       	rcall	.+376    	; 0xe7c0 <__fp_splitA>
    e648:	88 f0       	brcs	.+34     	; 0xe66c <__fixunssfsi+0x26>
    e64a:	9f 57       	subi	r25, 0x7F	; 127
    e64c:	90 f0       	brcs	.+36     	; 0xe672 <__fixunssfsi+0x2c>
    e64e:	b9 2f       	mov	r27, r25
    e650:	99 27       	eor	r25, r25
    e652:	b7 51       	subi	r27, 0x17	; 23
    e654:	a0 f0       	brcs	.+40     	; 0xe67e <__fixunssfsi+0x38>
    e656:	d1 f0       	breq	.+52     	; 0xe68c <__fixunssfsi+0x46>
    e658:	66 0f       	add	r22, r22
    e65a:	77 1f       	adc	r23, r23
    e65c:	88 1f       	adc	r24, r24
    e65e:	99 1f       	adc	r25, r25
    e660:	1a f0       	brmi	.+6      	; 0xe668 <__fixunssfsi+0x22>
    e662:	ba 95       	dec	r27
    e664:	c9 f7       	brne	.-14     	; 0xe658 <__fixunssfsi+0x12>
    e666:	12 c0       	rjmp	.+36     	; 0xe68c <__fixunssfsi+0x46>
    e668:	b1 30       	cpi	r27, 0x01	; 1
    e66a:	81 f0       	breq	.+32     	; 0xe68c <__fixunssfsi+0x46>
    e66c:	c3 d0       	rcall	.+390    	; 0xe7f4 <__fp_zero>
    e66e:	b1 e0       	ldi	r27, 0x01	; 1
    e670:	08 95       	ret
    e672:	c0 c0       	rjmp	.+384    	; 0xe7f4 <__fp_zero>
    e674:	67 2f       	mov	r22, r23
    e676:	78 2f       	mov	r23, r24
    e678:	88 27       	eor	r24, r24
    e67a:	b8 5f       	subi	r27, 0xF8	; 248
    e67c:	39 f0       	breq	.+14     	; 0xe68c <__fixunssfsi+0x46>
    e67e:	b9 3f       	cpi	r27, 0xF9	; 249
    e680:	cc f3       	brlt	.-14     	; 0xe674 <__fixunssfsi+0x2e>
    e682:	86 95       	lsr	r24
    e684:	77 95       	ror	r23
    e686:	67 95       	ror	r22
    e688:	b3 95       	inc	r27
    e68a:	d9 f7       	brne	.-10     	; 0xe682 <__fixunssfsi+0x3c>
    e68c:	3e f4       	brtc	.+14     	; 0xe69c <__fixunssfsi+0x56>
    e68e:	90 95       	com	r25
    e690:	80 95       	com	r24
    e692:	70 95       	com	r23
    e694:	61 95       	neg	r22
    e696:	7f 4f       	sbci	r23, 0xFF	; 255
    e698:	8f 4f       	sbci	r24, 0xFF	; 255
    e69a:	9f 4f       	sbci	r25, 0xFF	; 255
    e69c:	08 95       	ret

0000e69e <__floatunsisf>:
    e69e:	e8 94       	clt
    e6a0:	09 c0       	rjmp	.+18     	; 0xe6b4 <__floatsisf+0x12>

0000e6a2 <__floatsisf>:
    e6a2:	97 fb       	bst	r25, 7
    e6a4:	3e f4       	brtc	.+14     	; 0xe6b4 <__floatsisf+0x12>
    e6a6:	90 95       	com	r25
    e6a8:	80 95       	com	r24
    e6aa:	70 95       	com	r23
    e6ac:	61 95       	neg	r22
    e6ae:	7f 4f       	sbci	r23, 0xFF	; 255
    e6b0:	8f 4f       	sbci	r24, 0xFF	; 255
    e6b2:	9f 4f       	sbci	r25, 0xFF	; 255
    e6b4:	99 23       	and	r25, r25
    e6b6:	a9 f0       	breq	.+42     	; 0xe6e2 <__floatsisf+0x40>
    e6b8:	f9 2f       	mov	r31, r25
    e6ba:	96 e9       	ldi	r25, 0x96	; 150
    e6bc:	bb 27       	eor	r27, r27
    e6be:	93 95       	inc	r25
    e6c0:	f6 95       	lsr	r31
    e6c2:	87 95       	ror	r24
    e6c4:	77 95       	ror	r23
    e6c6:	67 95       	ror	r22
    e6c8:	b7 95       	ror	r27
    e6ca:	f1 11       	cpse	r31, r1
    e6cc:	f8 cf       	rjmp	.-16     	; 0xe6be <__floatsisf+0x1c>
    e6ce:	fa f4       	brpl	.+62     	; 0xe70e <__floatsisf+0x6c>
    e6d0:	bb 0f       	add	r27, r27
    e6d2:	11 f4       	brne	.+4      	; 0xe6d8 <__floatsisf+0x36>
    e6d4:	60 ff       	sbrs	r22, 0
    e6d6:	1b c0       	rjmp	.+54     	; 0xe70e <__floatsisf+0x6c>
    e6d8:	6f 5f       	subi	r22, 0xFF	; 255
    e6da:	7f 4f       	sbci	r23, 0xFF	; 255
    e6dc:	8f 4f       	sbci	r24, 0xFF	; 255
    e6de:	9f 4f       	sbci	r25, 0xFF	; 255
    e6e0:	16 c0       	rjmp	.+44     	; 0xe70e <__floatsisf+0x6c>
    e6e2:	88 23       	and	r24, r24
    e6e4:	11 f0       	breq	.+4      	; 0xe6ea <__floatsisf+0x48>
    e6e6:	96 e9       	ldi	r25, 0x96	; 150
    e6e8:	11 c0       	rjmp	.+34     	; 0xe70c <__floatsisf+0x6a>
    e6ea:	77 23       	and	r23, r23
    e6ec:	21 f0       	breq	.+8      	; 0xe6f6 <__floatsisf+0x54>
    e6ee:	9e e8       	ldi	r25, 0x8E	; 142
    e6f0:	87 2f       	mov	r24, r23
    e6f2:	76 2f       	mov	r23, r22
    e6f4:	05 c0       	rjmp	.+10     	; 0xe700 <__floatsisf+0x5e>
    e6f6:	66 23       	and	r22, r22
    e6f8:	71 f0       	breq	.+28     	; 0xe716 <__floatsisf+0x74>
    e6fa:	96 e8       	ldi	r25, 0x86	; 134
    e6fc:	86 2f       	mov	r24, r22
    e6fe:	70 e0       	ldi	r23, 0x00	; 0
    e700:	60 e0       	ldi	r22, 0x00	; 0
    e702:	2a f0       	brmi	.+10     	; 0xe70e <__floatsisf+0x6c>
    e704:	9a 95       	dec	r25
    e706:	66 0f       	add	r22, r22
    e708:	77 1f       	adc	r23, r23
    e70a:	88 1f       	adc	r24, r24
    e70c:	da f7       	brpl	.-10     	; 0xe704 <__floatsisf+0x62>
    e70e:	88 0f       	add	r24, r24
    e710:	96 95       	lsr	r25
    e712:	87 95       	ror	r24
    e714:	97 f9       	bld	r25, 7
    e716:	08 95       	ret

0000e718 <__fp_cmp>:
    e718:	99 0f       	add	r25, r25
    e71a:	00 08       	sbc	r0, r0
    e71c:	55 0f       	add	r21, r21
    e71e:	aa 0b       	sbc	r26, r26
    e720:	e0 e8       	ldi	r30, 0x80	; 128
    e722:	fe ef       	ldi	r31, 0xFE	; 254
    e724:	16 16       	cp	r1, r22
    e726:	17 06       	cpc	r1, r23
    e728:	e8 07       	cpc	r30, r24
    e72a:	f9 07       	cpc	r31, r25
    e72c:	c0 f0       	brcs	.+48     	; 0xe75e <__fp_cmp+0x46>
    e72e:	12 16       	cp	r1, r18
    e730:	13 06       	cpc	r1, r19
    e732:	e4 07       	cpc	r30, r20
    e734:	f5 07       	cpc	r31, r21
    e736:	98 f0       	brcs	.+38     	; 0xe75e <__fp_cmp+0x46>
    e738:	62 1b       	sub	r22, r18
    e73a:	73 0b       	sbc	r23, r19
    e73c:	84 0b       	sbc	r24, r20
    e73e:	95 0b       	sbc	r25, r21
    e740:	39 f4       	brne	.+14     	; 0xe750 <__fp_cmp+0x38>
    e742:	0a 26       	eor	r0, r26
    e744:	61 f0       	breq	.+24     	; 0xe75e <__fp_cmp+0x46>
    e746:	23 2b       	or	r18, r19
    e748:	24 2b       	or	r18, r20
    e74a:	25 2b       	or	r18, r21
    e74c:	21 f4       	brne	.+8      	; 0xe756 <__fp_cmp+0x3e>
    e74e:	08 95       	ret
    e750:	0a 26       	eor	r0, r26
    e752:	09 f4       	brne	.+2      	; 0xe756 <__fp_cmp+0x3e>
    e754:	a1 40       	sbci	r26, 0x01	; 1
    e756:	a6 95       	lsr	r26
    e758:	8f ef       	ldi	r24, 0xFF	; 255
    e75a:	81 1d       	adc	r24, r1
    e75c:	81 1d       	adc	r24, r1
    e75e:	08 95       	ret

0000e760 <__fp_inf>:
    e760:	97 f9       	bld	r25, 7
    e762:	9f 67       	ori	r25, 0x7F	; 127
    e764:	80 e8       	ldi	r24, 0x80	; 128
    e766:	70 e0       	ldi	r23, 0x00	; 0
    e768:	60 e0       	ldi	r22, 0x00	; 0
    e76a:	08 95       	ret

0000e76c <__fp_nan>:
    e76c:	9f ef       	ldi	r25, 0xFF	; 255
    e76e:	80 ec       	ldi	r24, 0xC0	; 192
    e770:	08 95       	ret

0000e772 <__fp_pscA>:
    e772:	00 24       	eor	r0, r0
    e774:	0a 94       	dec	r0
    e776:	16 16       	cp	r1, r22
    e778:	17 06       	cpc	r1, r23
    e77a:	18 06       	cpc	r1, r24
    e77c:	09 06       	cpc	r0, r25
    e77e:	08 95       	ret

0000e780 <__fp_pscB>:
    e780:	00 24       	eor	r0, r0
    e782:	0a 94       	dec	r0
    e784:	12 16       	cp	r1, r18
    e786:	13 06       	cpc	r1, r19
    e788:	14 06       	cpc	r1, r20
    e78a:	05 06       	cpc	r0, r21
    e78c:	08 95       	ret

0000e78e <__fp_round>:
    e78e:	09 2e       	mov	r0, r25
    e790:	03 94       	inc	r0
    e792:	00 0c       	add	r0, r0
    e794:	11 f4       	brne	.+4      	; 0xe79a <__fp_round+0xc>
    e796:	88 23       	and	r24, r24
    e798:	52 f0       	brmi	.+20     	; 0xe7ae <__fp_round+0x20>
    e79a:	bb 0f       	add	r27, r27
    e79c:	40 f4       	brcc	.+16     	; 0xe7ae <__fp_round+0x20>
    e79e:	bf 2b       	or	r27, r31
    e7a0:	11 f4       	brne	.+4      	; 0xe7a6 <__fp_round+0x18>
    e7a2:	60 ff       	sbrs	r22, 0
    e7a4:	04 c0       	rjmp	.+8      	; 0xe7ae <__fp_round+0x20>
    e7a6:	6f 5f       	subi	r22, 0xFF	; 255
    e7a8:	7f 4f       	sbci	r23, 0xFF	; 255
    e7aa:	8f 4f       	sbci	r24, 0xFF	; 255
    e7ac:	9f 4f       	sbci	r25, 0xFF	; 255
    e7ae:	08 95       	ret

0000e7b0 <__fp_split3>:
    e7b0:	57 fd       	sbrc	r21, 7
    e7b2:	90 58       	subi	r25, 0x80	; 128
    e7b4:	44 0f       	add	r20, r20
    e7b6:	55 1f       	adc	r21, r21
    e7b8:	59 f0       	breq	.+22     	; 0xe7d0 <__fp_splitA+0x10>
    e7ba:	5f 3f       	cpi	r21, 0xFF	; 255
    e7bc:	71 f0       	breq	.+28     	; 0xe7da <__fp_splitA+0x1a>
    e7be:	47 95       	ror	r20

0000e7c0 <__fp_splitA>:
    e7c0:	88 0f       	add	r24, r24
    e7c2:	97 fb       	bst	r25, 7
    e7c4:	99 1f       	adc	r25, r25
    e7c6:	61 f0       	breq	.+24     	; 0xe7e0 <__fp_splitA+0x20>
    e7c8:	9f 3f       	cpi	r25, 0xFF	; 255
    e7ca:	79 f0       	breq	.+30     	; 0xe7ea <__fp_splitA+0x2a>
    e7cc:	87 95       	ror	r24
    e7ce:	08 95       	ret
    e7d0:	12 16       	cp	r1, r18
    e7d2:	13 06       	cpc	r1, r19
    e7d4:	14 06       	cpc	r1, r20
    e7d6:	55 1f       	adc	r21, r21
    e7d8:	f2 cf       	rjmp	.-28     	; 0xe7be <__fp_split3+0xe>
    e7da:	46 95       	lsr	r20
    e7dc:	f1 df       	rcall	.-30     	; 0xe7c0 <__fp_splitA>
    e7de:	08 c0       	rjmp	.+16     	; 0xe7f0 <__fp_splitA+0x30>
    e7e0:	16 16       	cp	r1, r22
    e7e2:	17 06       	cpc	r1, r23
    e7e4:	18 06       	cpc	r1, r24
    e7e6:	99 1f       	adc	r25, r25
    e7e8:	f1 cf       	rjmp	.-30     	; 0xe7cc <__fp_splitA+0xc>
    e7ea:	86 95       	lsr	r24
    e7ec:	71 05       	cpc	r23, r1
    e7ee:	61 05       	cpc	r22, r1
    e7f0:	08 94       	sec
    e7f2:	08 95       	ret

0000e7f4 <__fp_zero>:
    e7f4:	e8 94       	clt

0000e7f6 <__fp_szero>:
    e7f6:	bb 27       	eor	r27, r27
    e7f8:	66 27       	eor	r22, r22
    e7fa:	77 27       	eor	r23, r23
    e7fc:	cb 01       	movw	r24, r22
    e7fe:	97 f9       	bld	r25, 7
    e800:	08 95       	ret

0000e802 <__gesf2>:
    e802:	8a df       	rcall	.-236    	; 0xe718 <__fp_cmp>
    e804:	08 f4       	brcc	.+2      	; 0xe808 <__gesf2+0x6>
    e806:	8f ef       	ldi	r24, 0xFF	; 255
    e808:	08 95       	ret

0000e80a <__mulsf3>:
    e80a:	0b d0       	rcall	.+22     	; 0xe822 <__mulsf3x>
    e80c:	c0 cf       	rjmp	.-128    	; 0xe78e <__fp_round>
    e80e:	b1 df       	rcall	.-158    	; 0xe772 <__fp_pscA>
    e810:	28 f0       	brcs	.+10     	; 0xe81c <__mulsf3+0x12>
    e812:	b6 df       	rcall	.-148    	; 0xe780 <__fp_pscB>
    e814:	18 f0       	brcs	.+6      	; 0xe81c <__mulsf3+0x12>
    e816:	95 23       	and	r25, r21
    e818:	09 f0       	breq	.+2      	; 0xe81c <__mulsf3+0x12>
    e81a:	a2 cf       	rjmp	.-188    	; 0xe760 <__fp_inf>
    e81c:	a7 cf       	rjmp	.-178    	; 0xe76c <__fp_nan>
    e81e:	11 24       	eor	r1, r1
    e820:	ea cf       	rjmp	.-44     	; 0xe7f6 <__fp_szero>

0000e822 <__mulsf3x>:
    e822:	c6 df       	rcall	.-116    	; 0xe7b0 <__fp_split3>
    e824:	a0 f3       	brcs	.-24     	; 0xe80e <__mulsf3+0x4>

0000e826 <__mulsf3_pse>:
    e826:	95 9f       	mul	r25, r21
    e828:	d1 f3       	breq	.-12     	; 0xe81e <__mulsf3+0x14>
    e82a:	95 0f       	add	r25, r21
    e82c:	50 e0       	ldi	r21, 0x00	; 0
    e82e:	55 1f       	adc	r21, r21
    e830:	62 9f       	mul	r22, r18
    e832:	f0 01       	movw	r30, r0
    e834:	72 9f       	mul	r23, r18
    e836:	bb 27       	eor	r27, r27
    e838:	f0 0d       	add	r31, r0
    e83a:	b1 1d       	adc	r27, r1
    e83c:	63 9f       	mul	r22, r19
    e83e:	aa 27       	eor	r26, r26
    e840:	f0 0d       	add	r31, r0
    e842:	b1 1d       	adc	r27, r1
    e844:	aa 1f       	adc	r26, r26
    e846:	64 9f       	mul	r22, r20
    e848:	66 27       	eor	r22, r22
    e84a:	b0 0d       	add	r27, r0
    e84c:	a1 1d       	adc	r26, r1
    e84e:	66 1f       	adc	r22, r22
    e850:	82 9f       	mul	r24, r18
    e852:	22 27       	eor	r18, r18
    e854:	b0 0d       	add	r27, r0
    e856:	a1 1d       	adc	r26, r1
    e858:	62 1f       	adc	r22, r18
    e85a:	73 9f       	mul	r23, r19
    e85c:	b0 0d       	add	r27, r0
    e85e:	a1 1d       	adc	r26, r1
    e860:	62 1f       	adc	r22, r18
    e862:	83 9f       	mul	r24, r19
    e864:	a0 0d       	add	r26, r0
    e866:	61 1d       	adc	r22, r1
    e868:	22 1f       	adc	r18, r18
    e86a:	74 9f       	mul	r23, r20
    e86c:	33 27       	eor	r19, r19
    e86e:	a0 0d       	add	r26, r0
    e870:	61 1d       	adc	r22, r1
    e872:	23 1f       	adc	r18, r19
    e874:	84 9f       	mul	r24, r20
    e876:	60 0d       	add	r22, r0
    e878:	21 1d       	adc	r18, r1
    e87a:	82 2f       	mov	r24, r18
    e87c:	76 2f       	mov	r23, r22
    e87e:	6a 2f       	mov	r22, r26
    e880:	11 24       	eor	r1, r1
    e882:	9f 57       	subi	r25, 0x7F	; 127
    e884:	50 40       	sbci	r21, 0x00	; 0
    e886:	8a f0       	brmi	.+34     	; 0xe8aa <__mulsf3_pse+0x84>
    e888:	e1 f0       	breq	.+56     	; 0xe8c2 <__mulsf3_pse+0x9c>
    e88a:	88 23       	and	r24, r24
    e88c:	4a f0       	brmi	.+18     	; 0xe8a0 <__mulsf3_pse+0x7a>
    e88e:	ee 0f       	add	r30, r30
    e890:	ff 1f       	adc	r31, r31
    e892:	bb 1f       	adc	r27, r27
    e894:	66 1f       	adc	r22, r22
    e896:	77 1f       	adc	r23, r23
    e898:	88 1f       	adc	r24, r24
    e89a:	91 50       	subi	r25, 0x01	; 1
    e89c:	50 40       	sbci	r21, 0x00	; 0
    e89e:	a9 f7       	brne	.-22     	; 0xe88a <__mulsf3_pse+0x64>
    e8a0:	9e 3f       	cpi	r25, 0xFE	; 254
    e8a2:	51 05       	cpc	r21, r1
    e8a4:	70 f0       	brcs	.+28     	; 0xe8c2 <__mulsf3_pse+0x9c>
    e8a6:	5c cf       	rjmp	.-328    	; 0xe760 <__fp_inf>
    e8a8:	a6 cf       	rjmp	.-180    	; 0xe7f6 <__fp_szero>
    e8aa:	5f 3f       	cpi	r21, 0xFF	; 255
    e8ac:	ec f3       	brlt	.-6      	; 0xe8a8 <__mulsf3_pse+0x82>
    e8ae:	98 3e       	cpi	r25, 0xE8	; 232
    e8b0:	dc f3       	brlt	.-10     	; 0xe8a8 <__mulsf3_pse+0x82>
    e8b2:	86 95       	lsr	r24
    e8b4:	77 95       	ror	r23
    e8b6:	67 95       	ror	r22
    e8b8:	b7 95       	ror	r27
    e8ba:	f7 95       	ror	r31
    e8bc:	e7 95       	ror	r30
    e8be:	9f 5f       	subi	r25, 0xFF	; 255
    e8c0:	c1 f7       	brne	.-16     	; 0xe8b2 <__mulsf3_pse+0x8c>
    e8c2:	fe 2b       	or	r31, r30
    e8c4:	88 0f       	add	r24, r24
    e8c6:	91 1d       	adc	r25, r1
    e8c8:	96 95       	lsr	r25
    e8ca:	87 95       	ror	r24
    e8cc:	97 f9       	bld	r25, 7
    e8ce:	08 95       	ret

0000e8d0 <memcpy_P>:
    e8d0:	fb 01       	movw	r30, r22
    e8d2:	dc 01       	movw	r26, r24
    e8d4:	02 c0       	rjmp	.+4      	; 0xe8da <memcpy_P+0xa>
    e8d6:	05 90       	lpm	r0, Z+
    e8d8:	0d 92       	st	X+, r0
    e8da:	41 50       	subi	r20, 0x01	; 1
    e8dc:	50 40       	sbci	r21, 0x00	; 0
    e8de:	d8 f7       	brcc	.-10     	; 0xe8d6 <memcpy_P+0x6>
    e8e0:	08 95       	ret

0000e8e2 <strnlen_P>:
    e8e2:	fc 01       	movw	r30, r24
    e8e4:	05 90       	lpm	r0, Z+
    e8e6:	61 50       	subi	r22, 0x01	; 1
    e8e8:	70 40       	sbci	r23, 0x00	; 0
    e8ea:	01 10       	cpse	r0, r1
    e8ec:	d8 f7       	brcc	.-10     	; 0xe8e4 <strnlen_P+0x2>
    e8ee:	80 95       	com	r24
    e8f0:	90 95       	com	r25
    e8f2:	8e 0f       	add	r24, r30
    e8f4:	9f 1f       	adc	r25, r31
    e8f6:	08 95       	ret

0000e8f8 <strupr>:
    e8f8:	dc 01       	movw	r26, r24
    e8fa:	6c 91       	ld	r22, X
    e8fc:	61 56       	subi	r22, 0x61	; 97
    e8fe:	6a 31       	cpi	r22, 0x1A	; 26
    e900:	08 f0       	brcs	.+2      	; 0xe904 <strupr+0xc>
    e902:	60 5e       	subi	r22, 0xE0	; 224
    e904:	6f 5b       	subi	r22, 0xBF	; 191
    e906:	6d 93       	st	X+, r22
    e908:	c1 f7       	brne	.-16     	; 0xe8fa <strupr+0x2>
    e90a:	08 95       	ret

0000e90c <sprintf>:
    e90c:	ae e0       	ldi	r26, 0x0E	; 14
    e90e:	b0 e0       	ldi	r27, 0x00	; 0
    e910:	ec e8       	ldi	r30, 0x8C	; 140
    e912:	f4 e7       	ldi	r31, 0x74	; 116
    e914:	0c 94 2a 77 	jmp	0xee54	; 0xee54 <__prologue_saves__+0x1c>
    e918:	0d 89       	ldd	r16, Y+21	; 0x15
    e91a:	1e 89       	ldd	r17, Y+22	; 0x16
    e91c:	86 e0       	ldi	r24, 0x06	; 6
    e91e:	8c 83       	std	Y+4, r24	; 0x04
    e920:	1a 83       	std	Y+2, r17	; 0x02
    e922:	09 83       	std	Y+1, r16	; 0x01
    e924:	8f ef       	ldi	r24, 0xFF	; 255
    e926:	9f e7       	ldi	r25, 0x7F	; 127
    e928:	9e 83       	std	Y+6, r25	; 0x06
    e92a:	8d 83       	std	Y+5, r24	; 0x05
    e92c:	ae 01       	movw	r20, r28
    e92e:	47 5e       	subi	r20, 0xE7	; 231
    e930:	5f 4f       	sbci	r21, 0xFF	; 255
    e932:	6f 89       	ldd	r22, Y+23	; 0x17
    e934:	78 8d       	ldd	r23, Y+24	; 0x18
    e936:	ce 01       	movw	r24, r28
    e938:	01 96       	adiw	r24, 0x01	; 1
    e93a:	0e 94 a9 74 	call	0xe952	; 0xe952 <vfprintf>
    e93e:	2f 81       	ldd	r18, Y+7	; 0x07
    e940:	38 85       	ldd	r19, Y+8	; 0x08
    e942:	f8 01       	movw	r30, r16
    e944:	e2 0f       	add	r30, r18
    e946:	f3 1f       	adc	r31, r19
    e948:	10 82       	st	Z, r1
    e94a:	2e 96       	adiw	r28, 0x0e	; 14
    e94c:	e4 e0       	ldi	r30, 0x04	; 4
    e94e:	0c 94 46 77 	jmp	0xee8c	; 0xee8c <__epilogue_restores__+0x1c>

0000e952 <vfprintf>:
    e952:	ac e0       	ldi	r26, 0x0C	; 12
    e954:	b0 e0       	ldi	r27, 0x00	; 0
    e956:	ef ea       	ldi	r30, 0xAF	; 175
    e958:	f4 e7       	ldi	r31, 0x74	; 116
    e95a:	0c 94 1c 77 	jmp	0xee38	; 0xee38 <__prologue_saves__>
    e95e:	7c 01       	movw	r14, r24
    e960:	6b 01       	movw	r12, r22
    e962:	8a 01       	movw	r16, r20
    e964:	fc 01       	movw	r30, r24
    e966:	17 82       	std	Z+7, r1	; 0x07
    e968:	16 82       	std	Z+6, r1	; 0x06
    e96a:	83 81       	ldd	r24, Z+3	; 0x03
    e96c:	81 ff       	sbrs	r24, 1
    e96e:	bd c1       	rjmp	.+890    	; 0xecea <vfprintf+0x398>
    e970:	ce 01       	movw	r24, r28
    e972:	01 96       	adiw	r24, 0x01	; 1
    e974:	4c 01       	movw	r8, r24
    e976:	f7 01       	movw	r30, r14
    e978:	93 81       	ldd	r25, Z+3	; 0x03
    e97a:	f6 01       	movw	r30, r12
    e97c:	93 fd       	sbrc	r25, 3
    e97e:	85 91       	lpm	r24, Z+
    e980:	93 ff       	sbrs	r25, 3
    e982:	81 91       	ld	r24, Z+
    e984:	6f 01       	movw	r12, r30
    e986:	88 23       	and	r24, r24
    e988:	09 f4       	brne	.+2      	; 0xe98c <vfprintf+0x3a>
    e98a:	ab c1       	rjmp	.+854    	; 0xece2 <vfprintf+0x390>
    e98c:	85 32       	cpi	r24, 0x25	; 37
    e98e:	39 f4       	brne	.+14     	; 0xe99e <vfprintf+0x4c>
    e990:	93 fd       	sbrc	r25, 3
    e992:	85 91       	lpm	r24, Z+
    e994:	93 ff       	sbrs	r25, 3
    e996:	81 91       	ld	r24, Z+
    e998:	6f 01       	movw	r12, r30
    e99a:	85 32       	cpi	r24, 0x25	; 37
    e99c:	29 f4       	brne	.+10     	; 0xe9a8 <vfprintf+0x56>
    e99e:	b7 01       	movw	r22, r14
    e9a0:	90 e0       	ldi	r25, 0x00	; 0
    e9a2:	0e 94 86 76 	call	0xed0c	; 0xed0c <fputc>
    e9a6:	e7 cf       	rjmp	.-50     	; 0xe976 <vfprintf+0x24>
    e9a8:	51 2c       	mov	r5, r1
    e9aa:	31 2c       	mov	r3, r1
    e9ac:	20 e0       	ldi	r18, 0x00	; 0
    e9ae:	20 32       	cpi	r18, 0x20	; 32
    e9b0:	a0 f4       	brcc	.+40     	; 0xe9da <vfprintf+0x88>
    e9b2:	8b 32       	cpi	r24, 0x2B	; 43
    e9b4:	69 f0       	breq	.+26     	; 0xe9d0 <vfprintf+0x7e>
    e9b6:	30 f4       	brcc	.+12     	; 0xe9c4 <vfprintf+0x72>
    e9b8:	80 32       	cpi	r24, 0x20	; 32
    e9ba:	59 f0       	breq	.+22     	; 0xe9d2 <vfprintf+0x80>
    e9bc:	83 32       	cpi	r24, 0x23	; 35
    e9be:	69 f4       	brne	.+26     	; 0xe9da <vfprintf+0x88>
    e9c0:	20 61       	ori	r18, 0x10	; 16
    e9c2:	2c c0       	rjmp	.+88     	; 0xea1c <vfprintf+0xca>
    e9c4:	8d 32       	cpi	r24, 0x2D	; 45
    e9c6:	39 f0       	breq	.+14     	; 0xe9d6 <vfprintf+0x84>
    e9c8:	80 33       	cpi	r24, 0x30	; 48
    e9ca:	39 f4       	brne	.+14     	; 0xe9da <vfprintf+0x88>
    e9cc:	21 60       	ori	r18, 0x01	; 1
    e9ce:	26 c0       	rjmp	.+76     	; 0xea1c <vfprintf+0xca>
    e9d0:	22 60       	ori	r18, 0x02	; 2
    e9d2:	24 60       	ori	r18, 0x04	; 4
    e9d4:	23 c0       	rjmp	.+70     	; 0xea1c <vfprintf+0xca>
    e9d6:	28 60       	ori	r18, 0x08	; 8
    e9d8:	21 c0       	rjmp	.+66     	; 0xea1c <vfprintf+0xca>
    e9da:	27 fd       	sbrc	r18, 7
    e9dc:	27 c0       	rjmp	.+78     	; 0xea2c <vfprintf+0xda>
    e9de:	30 ed       	ldi	r19, 0xD0	; 208
    e9e0:	38 0f       	add	r19, r24
    e9e2:	3a 30       	cpi	r19, 0x0A	; 10
    e9e4:	78 f4       	brcc	.+30     	; 0xea04 <vfprintf+0xb2>
    e9e6:	26 ff       	sbrs	r18, 6
    e9e8:	06 c0       	rjmp	.+12     	; 0xe9f6 <vfprintf+0xa4>
    e9ea:	fa e0       	ldi	r31, 0x0A	; 10
    e9ec:	5f 9e       	mul	r5, r31
    e9ee:	30 0d       	add	r19, r0
    e9f0:	11 24       	eor	r1, r1
    e9f2:	53 2e       	mov	r5, r19
    e9f4:	13 c0       	rjmp	.+38     	; 0xea1c <vfprintf+0xca>
    e9f6:	8a e0       	ldi	r24, 0x0A	; 10
    e9f8:	38 9e       	mul	r3, r24
    e9fa:	30 0d       	add	r19, r0
    e9fc:	11 24       	eor	r1, r1
    e9fe:	33 2e       	mov	r3, r19
    ea00:	20 62       	ori	r18, 0x20	; 32
    ea02:	0c c0       	rjmp	.+24     	; 0xea1c <vfprintf+0xca>
    ea04:	8e 32       	cpi	r24, 0x2E	; 46
    ea06:	21 f4       	brne	.+8      	; 0xea10 <vfprintf+0xbe>
    ea08:	26 fd       	sbrc	r18, 6
    ea0a:	6b c1       	rjmp	.+726    	; 0xece2 <vfprintf+0x390>
    ea0c:	20 64       	ori	r18, 0x40	; 64
    ea0e:	06 c0       	rjmp	.+12     	; 0xea1c <vfprintf+0xca>
    ea10:	8c 36       	cpi	r24, 0x6C	; 108
    ea12:	11 f4       	brne	.+4      	; 0xea18 <vfprintf+0xc6>
    ea14:	20 68       	ori	r18, 0x80	; 128
    ea16:	02 c0       	rjmp	.+4      	; 0xea1c <vfprintf+0xca>
    ea18:	88 36       	cpi	r24, 0x68	; 104
    ea1a:	41 f4       	brne	.+16     	; 0xea2c <vfprintf+0xda>
    ea1c:	f6 01       	movw	r30, r12
    ea1e:	93 fd       	sbrc	r25, 3
    ea20:	85 91       	lpm	r24, Z+
    ea22:	93 ff       	sbrs	r25, 3
    ea24:	81 91       	ld	r24, Z+
    ea26:	6f 01       	movw	r12, r30
    ea28:	81 11       	cpse	r24, r1
    ea2a:	c1 cf       	rjmp	.-126    	; 0xe9ae <vfprintf+0x5c>
    ea2c:	98 2f       	mov	r25, r24
    ea2e:	9f 7d       	andi	r25, 0xDF	; 223
    ea30:	95 54       	subi	r25, 0x45	; 69
    ea32:	93 30       	cpi	r25, 0x03	; 3
    ea34:	28 f4       	brcc	.+10     	; 0xea40 <vfprintf+0xee>
    ea36:	0c 5f       	subi	r16, 0xFC	; 252
    ea38:	1f 4f       	sbci	r17, 0xFF	; 255
    ea3a:	ff e3       	ldi	r31, 0x3F	; 63
    ea3c:	f9 83       	std	Y+1, r31	; 0x01
    ea3e:	0d c0       	rjmp	.+26     	; 0xea5a <vfprintf+0x108>
    ea40:	83 36       	cpi	r24, 0x63	; 99
    ea42:	31 f0       	breq	.+12     	; 0xea50 <vfprintf+0xfe>
    ea44:	83 37       	cpi	r24, 0x73	; 115
    ea46:	71 f0       	breq	.+28     	; 0xea64 <vfprintf+0x112>
    ea48:	83 35       	cpi	r24, 0x53	; 83
    ea4a:	09 f0       	breq	.+2      	; 0xea4e <vfprintf+0xfc>
    ea4c:	5b c0       	rjmp	.+182    	; 0xeb04 <vfprintf+0x1b2>
    ea4e:	22 c0       	rjmp	.+68     	; 0xea94 <vfprintf+0x142>
    ea50:	f8 01       	movw	r30, r16
    ea52:	80 81       	ld	r24, Z
    ea54:	89 83       	std	Y+1, r24	; 0x01
    ea56:	0e 5f       	subi	r16, 0xFE	; 254
    ea58:	1f 4f       	sbci	r17, 0xFF	; 255
    ea5a:	44 24       	eor	r4, r4
    ea5c:	43 94       	inc	r4
    ea5e:	51 2c       	mov	r5, r1
    ea60:	54 01       	movw	r10, r8
    ea62:	15 c0       	rjmp	.+42     	; 0xea8e <vfprintf+0x13c>
    ea64:	38 01       	movw	r6, r16
    ea66:	f2 e0       	ldi	r31, 0x02	; 2
    ea68:	6f 0e       	add	r6, r31
    ea6a:	71 1c       	adc	r7, r1
    ea6c:	f8 01       	movw	r30, r16
    ea6e:	a0 80       	ld	r10, Z
    ea70:	b1 80       	ldd	r11, Z+1	; 0x01
    ea72:	26 ff       	sbrs	r18, 6
    ea74:	03 c0       	rjmp	.+6      	; 0xea7c <vfprintf+0x12a>
    ea76:	65 2d       	mov	r22, r5
    ea78:	70 e0       	ldi	r23, 0x00	; 0
    ea7a:	02 c0       	rjmp	.+4      	; 0xea80 <vfprintf+0x12e>
    ea7c:	6f ef       	ldi	r22, 0xFF	; 255
    ea7e:	7f ef       	ldi	r23, 0xFF	; 255
    ea80:	c5 01       	movw	r24, r10
    ea82:	2c 87       	std	Y+12, r18	; 0x0c
    ea84:	0e 94 7b 76 	call	0xecf6	; 0xecf6 <strnlen>
    ea88:	2c 01       	movw	r4, r24
    ea8a:	83 01       	movw	r16, r6
    ea8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    ea8e:	2f 77       	andi	r18, 0x7F	; 127
    ea90:	22 2e       	mov	r2, r18
    ea92:	17 c0       	rjmp	.+46     	; 0xeac2 <vfprintf+0x170>
    ea94:	38 01       	movw	r6, r16
    ea96:	f2 e0       	ldi	r31, 0x02	; 2
    ea98:	6f 0e       	add	r6, r31
    ea9a:	71 1c       	adc	r7, r1
    ea9c:	f8 01       	movw	r30, r16
    ea9e:	a0 80       	ld	r10, Z
    eaa0:	b1 80       	ldd	r11, Z+1	; 0x01
    eaa2:	26 ff       	sbrs	r18, 6
    eaa4:	03 c0       	rjmp	.+6      	; 0xeaac <vfprintf+0x15a>
    eaa6:	65 2d       	mov	r22, r5
    eaa8:	70 e0       	ldi	r23, 0x00	; 0
    eaaa:	02 c0       	rjmp	.+4      	; 0xeab0 <vfprintf+0x15e>
    eaac:	6f ef       	ldi	r22, 0xFF	; 255
    eaae:	7f ef       	ldi	r23, 0xFF	; 255
    eab0:	c5 01       	movw	r24, r10
    eab2:	2c 87       	std	Y+12, r18	; 0x0c
    eab4:	0e 94 71 74 	call	0xe8e2	; 0xe8e2 <strnlen_P>
    eab8:	2c 01       	movw	r4, r24
    eaba:	2c 85       	ldd	r18, Y+12	; 0x0c
    eabc:	20 68       	ori	r18, 0x80	; 128
    eabe:	22 2e       	mov	r2, r18
    eac0:	83 01       	movw	r16, r6
    eac2:	23 fc       	sbrc	r2, 3
    eac4:	1b c0       	rjmp	.+54     	; 0xeafc <vfprintf+0x1aa>
    eac6:	83 2d       	mov	r24, r3
    eac8:	90 e0       	ldi	r25, 0x00	; 0
    eaca:	48 16       	cp	r4, r24
    eacc:	59 06       	cpc	r5, r25
    eace:	b0 f4       	brcc	.+44     	; 0xeafc <vfprintf+0x1aa>
    ead0:	b7 01       	movw	r22, r14
    ead2:	80 e2       	ldi	r24, 0x20	; 32
    ead4:	90 e0       	ldi	r25, 0x00	; 0
    ead6:	0e 94 86 76 	call	0xed0c	; 0xed0c <fputc>
    eada:	3a 94       	dec	r3
    eadc:	f4 cf       	rjmp	.-24     	; 0xeac6 <vfprintf+0x174>
    eade:	f5 01       	movw	r30, r10
    eae0:	27 fc       	sbrc	r2, 7
    eae2:	85 91       	lpm	r24, Z+
    eae4:	27 fe       	sbrs	r2, 7
    eae6:	81 91       	ld	r24, Z+
    eae8:	5f 01       	movw	r10, r30
    eaea:	b7 01       	movw	r22, r14
    eaec:	90 e0       	ldi	r25, 0x00	; 0
    eaee:	0e 94 86 76 	call	0xed0c	; 0xed0c <fputc>
    eaf2:	31 10       	cpse	r3, r1
    eaf4:	3a 94       	dec	r3
    eaf6:	f1 e0       	ldi	r31, 0x01	; 1
    eaf8:	4f 1a       	sub	r4, r31
    eafa:	51 08       	sbc	r5, r1
    eafc:	41 14       	cp	r4, r1
    eafe:	51 04       	cpc	r5, r1
    eb00:	71 f7       	brne	.-36     	; 0xeade <vfprintf+0x18c>
    eb02:	e5 c0       	rjmp	.+458    	; 0xecce <vfprintf+0x37c>
    eb04:	84 36       	cpi	r24, 0x64	; 100
    eb06:	11 f0       	breq	.+4      	; 0xeb0c <vfprintf+0x1ba>
    eb08:	89 36       	cpi	r24, 0x69	; 105
    eb0a:	39 f5       	brne	.+78     	; 0xeb5a <vfprintf+0x208>
    eb0c:	f8 01       	movw	r30, r16
    eb0e:	27 ff       	sbrs	r18, 7
    eb10:	07 c0       	rjmp	.+14     	; 0xeb20 <vfprintf+0x1ce>
    eb12:	60 81       	ld	r22, Z
    eb14:	71 81       	ldd	r23, Z+1	; 0x01
    eb16:	82 81       	ldd	r24, Z+2	; 0x02
    eb18:	93 81       	ldd	r25, Z+3	; 0x03
    eb1a:	0c 5f       	subi	r16, 0xFC	; 252
    eb1c:	1f 4f       	sbci	r17, 0xFF	; 255
    eb1e:	08 c0       	rjmp	.+16     	; 0xeb30 <vfprintf+0x1de>
    eb20:	60 81       	ld	r22, Z
    eb22:	71 81       	ldd	r23, Z+1	; 0x01
    eb24:	88 27       	eor	r24, r24
    eb26:	77 fd       	sbrc	r23, 7
    eb28:	80 95       	com	r24
    eb2a:	98 2f       	mov	r25, r24
    eb2c:	0e 5f       	subi	r16, 0xFE	; 254
    eb2e:	1f 4f       	sbci	r17, 0xFF	; 255
    eb30:	2f 76       	andi	r18, 0x6F	; 111
    eb32:	72 2e       	mov	r7, r18
    eb34:	97 ff       	sbrs	r25, 7
    eb36:	09 c0       	rjmp	.+18     	; 0xeb4a <vfprintf+0x1f8>
    eb38:	90 95       	com	r25
    eb3a:	80 95       	com	r24
    eb3c:	70 95       	com	r23
    eb3e:	61 95       	neg	r22
    eb40:	7f 4f       	sbci	r23, 0xFF	; 255
    eb42:	8f 4f       	sbci	r24, 0xFF	; 255
    eb44:	9f 4f       	sbci	r25, 0xFF	; 255
    eb46:	20 68       	ori	r18, 0x80	; 128
    eb48:	72 2e       	mov	r7, r18
    eb4a:	2a e0       	ldi	r18, 0x0A	; 10
    eb4c:	30 e0       	ldi	r19, 0x00	; 0
    eb4e:	a4 01       	movw	r20, r8
    eb50:	0e 94 be 76 	call	0xed7c	; 0xed7c <__ultoa_invert>
    eb54:	a8 2e       	mov	r10, r24
    eb56:	a8 18       	sub	r10, r8
    eb58:	44 c0       	rjmp	.+136    	; 0xebe2 <vfprintf+0x290>
    eb5a:	85 37       	cpi	r24, 0x75	; 117
    eb5c:	29 f4       	brne	.+10     	; 0xeb68 <vfprintf+0x216>
    eb5e:	2f 7e       	andi	r18, 0xEF	; 239
    eb60:	b2 2e       	mov	r11, r18
    eb62:	2a e0       	ldi	r18, 0x0A	; 10
    eb64:	30 e0       	ldi	r19, 0x00	; 0
    eb66:	25 c0       	rjmp	.+74     	; 0xebb2 <vfprintf+0x260>
    eb68:	f2 2f       	mov	r31, r18
    eb6a:	f9 7f       	andi	r31, 0xF9	; 249
    eb6c:	bf 2e       	mov	r11, r31
    eb6e:	8f 36       	cpi	r24, 0x6F	; 111
    eb70:	c1 f0       	breq	.+48     	; 0xeba2 <vfprintf+0x250>
    eb72:	18 f4       	brcc	.+6      	; 0xeb7a <vfprintf+0x228>
    eb74:	88 35       	cpi	r24, 0x58	; 88
    eb76:	79 f0       	breq	.+30     	; 0xeb96 <vfprintf+0x244>
    eb78:	b4 c0       	rjmp	.+360    	; 0xece2 <vfprintf+0x390>
    eb7a:	80 37       	cpi	r24, 0x70	; 112
    eb7c:	19 f0       	breq	.+6      	; 0xeb84 <vfprintf+0x232>
    eb7e:	88 37       	cpi	r24, 0x78	; 120
    eb80:	21 f0       	breq	.+8      	; 0xeb8a <vfprintf+0x238>
    eb82:	af c0       	rjmp	.+350    	; 0xece2 <vfprintf+0x390>
    eb84:	2f 2f       	mov	r18, r31
    eb86:	20 61       	ori	r18, 0x10	; 16
    eb88:	b2 2e       	mov	r11, r18
    eb8a:	b4 fe       	sbrs	r11, 4
    eb8c:	0d c0       	rjmp	.+26     	; 0xeba8 <vfprintf+0x256>
    eb8e:	8b 2d       	mov	r24, r11
    eb90:	84 60       	ori	r24, 0x04	; 4
    eb92:	b8 2e       	mov	r11, r24
    eb94:	09 c0       	rjmp	.+18     	; 0xeba8 <vfprintf+0x256>
    eb96:	24 ff       	sbrs	r18, 4
    eb98:	0a c0       	rjmp	.+20     	; 0xebae <vfprintf+0x25c>
    eb9a:	9f 2f       	mov	r25, r31
    eb9c:	96 60       	ori	r25, 0x06	; 6
    eb9e:	b9 2e       	mov	r11, r25
    eba0:	06 c0       	rjmp	.+12     	; 0xebae <vfprintf+0x25c>
    eba2:	28 e0       	ldi	r18, 0x08	; 8
    eba4:	30 e0       	ldi	r19, 0x00	; 0
    eba6:	05 c0       	rjmp	.+10     	; 0xebb2 <vfprintf+0x260>
    eba8:	20 e1       	ldi	r18, 0x10	; 16
    ebaa:	30 e0       	ldi	r19, 0x00	; 0
    ebac:	02 c0       	rjmp	.+4      	; 0xebb2 <vfprintf+0x260>
    ebae:	20 e1       	ldi	r18, 0x10	; 16
    ebb0:	32 e0       	ldi	r19, 0x02	; 2
    ebb2:	f8 01       	movw	r30, r16
    ebb4:	b7 fe       	sbrs	r11, 7
    ebb6:	07 c0       	rjmp	.+14     	; 0xebc6 <vfprintf+0x274>
    ebb8:	60 81       	ld	r22, Z
    ebba:	71 81       	ldd	r23, Z+1	; 0x01
    ebbc:	82 81       	ldd	r24, Z+2	; 0x02
    ebbe:	93 81       	ldd	r25, Z+3	; 0x03
    ebc0:	0c 5f       	subi	r16, 0xFC	; 252
    ebc2:	1f 4f       	sbci	r17, 0xFF	; 255
    ebc4:	06 c0       	rjmp	.+12     	; 0xebd2 <vfprintf+0x280>
    ebc6:	60 81       	ld	r22, Z
    ebc8:	71 81       	ldd	r23, Z+1	; 0x01
    ebca:	80 e0       	ldi	r24, 0x00	; 0
    ebcc:	90 e0       	ldi	r25, 0x00	; 0
    ebce:	0e 5f       	subi	r16, 0xFE	; 254
    ebd0:	1f 4f       	sbci	r17, 0xFF	; 255
    ebd2:	a4 01       	movw	r20, r8
    ebd4:	0e 94 be 76 	call	0xed7c	; 0xed7c <__ultoa_invert>
    ebd8:	a8 2e       	mov	r10, r24
    ebda:	a8 18       	sub	r10, r8
    ebdc:	fb 2d       	mov	r31, r11
    ebde:	ff 77       	andi	r31, 0x7F	; 127
    ebe0:	7f 2e       	mov	r7, r31
    ebe2:	76 fe       	sbrs	r7, 6
    ebe4:	0b c0       	rjmp	.+22     	; 0xebfc <vfprintf+0x2aa>
    ebe6:	37 2d       	mov	r19, r7
    ebe8:	3e 7f       	andi	r19, 0xFE	; 254
    ebea:	a5 14       	cp	r10, r5
    ebec:	50 f4       	brcc	.+20     	; 0xec02 <vfprintf+0x2b0>
    ebee:	74 fe       	sbrs	r7, 4
    ebf0:	0a c0       	rjmp	.+20     	; 0xec06 <vfprintf+0x2b4>
    ebf2:	72 fc       	sbrc	r7, 2
    ebf4:	08 c0       	rjmp	.+16     	; 0xec06 <vfprintf+0x2b4>
    ebf6:	37 2d       	mov	r19, r7
    ebf8:	3e 7e       	andi	r19, 0xEE	; 238
    ebfa:	05 c0       	rjmp	.+10     	; 0xec06 <vfprintf+0x2b4>
    ebfc:	ba 2c       	mov	r11, r10
    ebfe:	37 2d       	mov	r19, r7
    ec00:	03 c0       	rjmp	.+6      	; 0xec08 <vfprintf+0x2b6>
    ec02:	ba 2c       	mov	r11, r10
    ec04:	01 c0       	rjmp	.+2      	; 0xec08 <vfprintf+0x2b6>
    ec06:	b5 2c       	mov	r11, r5
    ec08:	34 ff       	sbrs	r19, 4
    ec0a:	0d c0       	rjmp	.+26     	; 0xec26 <vfprintf+0x2d4>
    ec0c:	fe 01       	movw	r30, r28
    ec0e:	ea 0d       	add	r30, r10
    ec10:	f1 1d       	adc	r31, r1
    ec12:	80 81       	ld	r24, Z
    ec14:	80 33       	cpi	r24, 0x30	; 48
    ec16:	11 f4       	brne	.+4      	; 0xec1c <vfprintf+0x2ca>
    ec18:	39 7e       	andi	r19, 0xE9	; 233
    ec1a:	09 c0       	rjmp	.+18     	; 0xec2e <vfprintf+0x2dc>
    ec1c:	32 ff       	sbrs	r19, 2
    ec1e:	06 c0       	rjmp	.+12     	; 0xec2c <vfprintf+0x2da>
    ec20:	b3 94       	inc	r11
    ec22:	b3 94       	inc	r11
    ec24:	04 c0       	rjmp	.+8      	; 0xec2e <vfprintf+0x2dc>
    ec26:	83 2f       	mov	r24, r19
    ec28:	86 78       	andi	r24, 0x86	; 134
    ec2a:	09 f0       	breq	.+2      	; 0xec2e <vfprintf+0x2dc>
    ec2c:	b3 94       	inc	r11
    ec2e:	33 fd       	sbrc	r19, 3
    ec30:	13 c0       	rjmp	.+38     	; 0xec58 <vfprintf+0x306>
    ec32:	30 ff       	sbrs	r19, 0
    ec34:	06 c0       	rjmp	.+12     	; 0xec42 <vfprintf+0x2f0>
    ec36:	5a 2c       	mov	r5, r10
    ec38:	b3 14       	cp	r11, r3
    ec3a:	18 f4       	brcc	.+6      	; 0xec42 <vfprintf+0x2f0>
    ec3c:	53 0c       	add	r5, r3
    ec3e:	5b 18       	sub	r5, r11
    ec40:	b3 2c       	mov	r11, r3
    ec42:	b3 14       	cp	r11, r3
    ec44:	68 f4       	brcc	.+26     	; 0xec60 <vfprintf+0x30e>
    ec46:	b7 01       	movw	r22, r14
    ec48:	80 e2       	ldi	r24, 0x20	; 32
    ec4a:	90 e0       	ldi	r25, 0x00	; 0
    ec4c:	3c 87       	std	Y+12, r19	; 0x0c
    ec4e:	0e 94 86 76 	call	0xed0c	; 0xed0c <fputc>
    ec52:	b3 94       	inc	r11
    ec54:	3c 85       	ldd	r19, Y+12	; 0x0c
    ec56:	f5 cf       	rjmp	.-22     	; 0xec42 <vfprintf+0x2f0>
    ec58:	b3 14       	cp	r11, r3
    ec5a:	10 f4       	brcc	.+4      	; 0xec60 <vfprintf+0x30e>
    ec5c:	3b 18       	sub	r3, r11
    ec5e:	01 c0       	rjmp	.+2      	; 0xec62 <vfprintf+0x310>
    ec60:	31 2c       	mov	r3, r1
    ec62:	34 ff       	sbrs	r19, 4
    ec64:	12 c0       	rjmp	.+36     	; 0xec8a <vfprintf+0x338>
    ec66:	b7 01       	movw	r22, r14
    ec68:	80 e3       	ldi	r24, 0x30	; 48
    ec6a:	90 e0       	ldi	r25, 0x00	; 0
    ec6c:	3c 87       	std	Y+12, r19	; 0x0c
    ec6e:	0e 94 86 76 	call	0xed0c	; 0xed0c <fputc>
    ec72:	3c 85       	ldd	r19, Y+12	; 0x0c
    ec74:	32 ff       	sbrs	r19, 2
    ec76:	17 c0       	rjmp	.+46     	; 0xeca6 <vfprintf+0x354>
    ec78:	31 fd       	sbrc	r19, 1
    ec7a:	03 c0       	rjmp	.+6      	; 0xec82 <vfprintf+0x330>
    ec7c:	88 e7       	ldi	r24, 0x78	; 120
    ec7e:	90 e0       	ldi	r25, 0x00	; 0
    ec80:	02 c0       	rjmp	.+4      	; 0xec86 <vfprintf+0x334>
    ec82:	88 e5       	ldi	r24, 0x58	; 88
    ec84:	90 e0       	ldi	r25, 0x00	; 0
    ec86:	b7 01       	movw	r22, r14
    ec88:	0c c0       	rjmp	.+24     	; 0xeca2 <vfprintf+0x350>
    ec8a:	83 2f       	mov	r24, r19
    ec8c:	86 78       	andi	r24, 0x86	; 134
    ec8e:	59 f0       	breq	.+22     	; 0xeca6 <vfprintf+0x354>
    ec90:	31 ff       	sbrs	r19, 1
    ec92:	02 c0       	rjmp	.+4      	; 0xec98 <vfprintf+0x346>
    ec94:	8b e2       	ldi	r24, 0x2B	; 43
    ec96:	01 c0       	rjmp	.+2      	; 0xec9a <vfprintf+0x348>
    ec98:	80 e2       	ldi	r24, 0x20	; 32
    ec9a:	37 fd       	sbrc	r19, 7
    ec9c:	8d e2       	ldi	r24, 0x2D	; 45
    ec9e:	b7 01       	movw	r22, r14
    eca0:	90 e0       	ldi	r25, 0x00	; 0
    eca2:	0e 94 86 76 	call	0xed0c	; 0xed0c <fputc>
    eca6:	a5 14       	cp	r10, r5
    eca8:	38 f4       	brcc	.+14     	; 0xecb8 <vfprintf+0x366>
    ecaa:	b7 01       	movw	r22, r14
    ecac:	80 e3       	ldi	r24, 0x30	; 48
    ecae:	90 e0       	ldi	r25, 0x00	; 0
    ecb0:	0e 94 86 76 	call	0xed0c	; 0xed0c <fputc>
    ecb4:	5a 94       	dec	r5
    ecb6:	f7 cf       	rjmp	.-18     	; 0xeca6 <vfprintf+0x354>
    ecb8:	aa 94       	dec	r10
    ecba:	f4 01       	movw	r30, r8
    ecbc:	ea 0d       	add	r30, r10
    ecbe:	f1 1d       	adc	r31, r1
    ecc0:	80 81       	ld	r24, Z
    ecc2:	b7 01       	movw	r22, r14
    ecc4:	90 e0       	ldi	r25, 0x00	; 0
    ecc6:	0e 94 86 76 	call	0xed0c	; 0xed0c <fputc>
    ecca:	a1 10       	cpse	r10, r1
    eccc:	f5 cf       	rjmp	.-22     	; 0xecb8 <vfprintf+0x366>
    ecce:	33 20       	and	r3, r3
    ecd0:	09 f4       	brne	.+2      	; 0xecd4 <vfprintf+0x382>
    ecd2:	51 ce       	rjmp	.-862    	; 0xe976 <vfprintf+0x24>
    ecd4:	b7 01       	movw	r22, r14
    ecd6:	80 e2       	ldi	r24, 0x20	; 32
    ecd8:	90 e0       	ldi	r25, 0x00	; 0
    ecda:	0e 94 86 76 	call	0xed0c	; 0xed0c <fputc>
    ecde:	3a 94       	dec	r3
    ece0:	f6 cf       	rjmp	.-20     	; 0xecce <vfprintf+0x37c>
    ece2:	f7 01       	movw	r30, r14
    ece4:	86 81       	ldd	r24, Z+6	; 0x06
    ece6:	97 81       	ldd	r25, Z+7	; 0x07
    ece8:	02 c0       	rjmp	.+4      	; 0xecee <vfprintf+0x39c>
    ecea:	8f ef       	ldi	r24, 0xFF	; 255
    ecec:	9f ef       	ldi	r25, 0xFF	; 255
    ecee:	2c 96       	adiw	r28, 0x0c	; 12
    ecf0:	e2 e1       	ldi	r30, 0x12	; 18
    ecf2:	0c 94 38 77 	jmp	0xee70	; 0xee70 <__epilogue_restores__>

0000ecf6 <strnlen>:
    ecf6:	fc 01       	movw	r30, r24
    ecf8:	61 50       	subi	r22, 0x01	; 1
    ecfa:	70 40       	sbci	r23, 0x00	; 0
    ecfc:	01 90       	ld	r0, Z+
    ecfe:	01 10       	cpse	r0, r1
    ed00:	d8 f7       	brcc	.-10     	; 0xecf8 <strnlen+0x2>
    ed02:	80 95       	com	r24
    ed04:	90 95       	com	r25
    ed06:	8e 0f       	add	r24, r30
    ed08:	9f 1f       	adc	r25, r31
    ed0a:	08 95       	ret

0000ed0c <fputc>:
    ed0c:	0f 93       	push	r16
    ed0e:	1f 93       	push	r17
    ed10:	cf 93       	push	r28
    ed12:	df 93       	push	r29
    ed14:	fb 01       	movw	r30, r22
    ed16:	23 81       	ldd	r18, Z+3	; 0x03
    ed18:	21 fd       	sbrc	r18, 1
    ed1a:	03 c0       	rjmp	.+6      	; 0xed22 <fputc+0x16>
    ed1c:	8f ef       	ldi	r24, 0xFF	; 255
    ed1e:	9f ef       	ldi	r25, 0xFF	; 255
    ed20:	28 c0       	rjmp	.+80     	; 0xed72 <fputc+0x66>
    ed22:	22 ff       	sbrs	r18, 2
    ed24:	16 c0       	rjmp	.+44     	; 0xed52 <fputc+0x46>
    ed26:	46 81       	ldd	r20, Z+6	; 0x06
    ed28:	57 81       	ldd	r21, Z+7	; 0x07
    ed2a:	24 81       	ldd	r18, Z+4	; 0x04
    ed2c:	35 81       	ldd	r19, Z+5	; 0x05
    ed2e:	42 17       	cp	r20, r18
    ed30:	53 07       	cpc	r21, r19
    ed32:	44 f4       	brge	.+16     	; 0xed44 <fputc+0x38>
    ed34:	a0 81       	ld	r26, Z
    ed36:	b1 81       	ldd	r27, Z+1	; 0x01
    ed38:	9d 01       	movw	r18, r26
    ed3a:	2f 5f       	subi	r18, 0xFF	; 255
    ed3c:	3f 4f       	sbci	r19, 0xFF	; 255
    ed3e:	31 83       	std	Z+1, r19	; 0x01
    ed40:	20 83       	st	Z, r18
    ed42:	8c 93       	st	X, r24
    ed44:	26 81       	ldd	r18, Z+6	; 0x06
    ed46:	37 81       	ldd	r19, Z+7	; 0x07
    ed48:	2f 5f       	subi	r18, 0xFF	; 255
    ed4a:	3f 4f       	sbci	r19, 0xFF	; 255
    ed4c:	37 83       	std	Z+7, r19	; 0x07
    ed4e:	26 83       	std	Z+6, r18	; 0x06
    ed50:	10 c0       	rjmp	.+32     	; 0xed72 <fputc+0x66>
    ed52:	eb 01       	movw	r28, r22
    ed54:	09 2f       	mov	r16, r25
    ed56:	18 2f       	mov	r17, r24
    ed58:	00 84       	ldd	r0, Z+8	; 0x08
    ed5a:	f1 85       	ldd	r31, Z+9	; 0x09
    ed5c:	e0 2d       	mov	r30, r0
    ed5e:	09 95       	icall
    ed60:	89 2b       	or	r24, r25
    ed62:	e1 f6       	brne	.-72     	; 0xed1c <fputc+0x10>
    ed64:	8e 81       	ldd	r24, Y+6	; 0x06
    ed66:	9f 81       	ldd	r25, Y+7	; 0x07
    ed68:	01 96       	adiw	r24, 0x01	; 1
    ed6a:	9f 83       	std	Y+7, r25	; 0x07
    ed6c:	8e 83       	std	Y+6, r24	; 0x06
    ed6e:	81 2f       	mov	r24, r17
    ed70:	90 2f       	mov	r25, r16
    ed72:	df 91       	pop	r29
    ed74:	cf 91       	pop	r28
    ed76:	1f 91       	pop	r17
    ed78:	0f 91       	pop	r16
    ed7a:	08 95       	ret

0000ed7c <__ultoa_invert>:
    ed7c:	fa 01       	movw	r30, r20
    ed7e:	aa 27       	eor	r26, r26
    ed80:	28 30       	cpi	r18, 0x08	; 8
    ed82:	51 f1       	breq	.+84     	; 0xedd8 <__ultoa_invert+0x5c>
    ed84:	20 31       	cpi	r18, 0x10	; 16
    ed86:	81 f1       	breq	.+96     	; 0xede8 <__ultoa_invert+0x6c>
    ed88:	e8 94       	clt
    ed8a:	6f 93       	push	r22
    ed8c:	6e 7f       	andi	r22, 0xFE	; 254
    ed8e:	6e 5f       	subi	r22, 0xFE	; 254
    ed90:	7f 4f       	sbci	r23, 0xFF	; 255
    ed92:	8f 4f       	sbci	r24, 0xFF	; 255
    ed94:	9f 4f       	sbci	r25, 0xFF	; 255
    ed96:	af 4f       	sbci	r26, 0xFF	; 255
    ed98:	b1 e0       	ldi	r27, 0x01	; 1
    ed9a:	3e d0       	rcall	.+124    	; 0xee18 <__ultoa_invert+0x9c>
    ed9c:	b4 e0       	ldi	r27, 0x04	; 4
    ed9e:	3c d0       	rcall	.+120    	; 0xee18 <__ultoa_invert+0x9c>
    eda0:	67 0f       	add	r22, r23
    eda2:	78 1f       	adc	r23, r24
    eda4:	89 1f       	adc	r24, r25
    eda6:	9a 1f       	adc	r25, r26
    eda8:	a1 1d       	adc	r26, r1
    edaa:	68 0f       	add	r22, r24
    edac:	79 1f       	adc	r23, r25
    edae:	8a 1f       	adc	r24, r26
    edb0:	91 1d       	adc	r25, r1
    edb2:	a1 1d       	adc	r26, r1
    edb4:	6a 0f       	add	r22, r26
    edb6:	71 1d       	adc	r23, r1
    edb8:	81 1d       	adc	r24, r1
    edba:	91 1d       	adc	r25, r1
    edbc:	a1 1d       	adc	r26, r1
    edbe:	20 d0       	rcall	.+64     	; 0xee00 <__ultoa_invert+0x84>
    edc0:	09 f4       	brne	.+2      	; 0xedc4 <__ultoa_invert+0x48>
    edc2:	68 94       	set
    edc4:	3f 91       	pop	r19
    edc6:	2a e0       	ldi	r18, 0x0A	; 10
    edc8:	26 9f       	mul	r18, r22
    edca:	11 24       	eor	r1, r1
    edcc:	30 19       	sub	r19, r0
    edce:	30 5d       	subi	r19, 0xD0	; 208
    edd0:	31 93       	st	Z+, r19
    edd2:	de f6       	brtc	.-74     	; 0xed8a <__ultoa_invert+0xe>
    edd4:	cf 01       	movw	r24, r30
    edd6:	08 95       	ret
    edd8:	46 2f       	mov	r20, r22
    edda:	47 70       	andi	r20, 0x07	; 7
    eddc:	40 5d       	subi	r20, 0xD0	; 208
    edde:	41 93       	st	Z+, r20
    ede0:	b3 e0       	ldi	r27, 0x03	; 3
    ede2:	0f d0       	rcall	.+30     	; 0xee02 <__ultoa_invert+0x86>
    ede4:	c9 f7       	brne	.-14     	; 0xedd8 <__ultoa_invert+0x5c>
    ede6:	f6 cf       	rjmp	.-20     	; 0xedd4 <__ultoa_invert+0x58>
    ede8:	46 2f       	mov	r20, r22
    edea:	4f 70       	andi	r20, 0x0F	; 15
    edec:	40 5d       	subi	r20, 0xD0	; 208
    edee:	4a 33       	cpi	r20, 0x3A	; 58
    edf0:	18 f0       	brcs	.+6      	; 0xedf8 <__ultoa_invert+0x7c>
    edf2:	49 5d       	subi	r20, 0xD9	; 217
    edf4:	31 fd       	sbrc	r19, 1
    edf6:	40 52       	subi	r20, 0x20	; 32
    edf8:	41 93       	st	Z+, r20
    edfa:	02 d0       	rcall	.+4      	; 0xee00 <__ultoa_invert+0x84>
    edfc:	a9 f7       	brne	.-22     	; 0xede8 <__ultoa_invert+0x6c>
    edfe:	ea cf       	rjmp	.-44     	; 0xedd4 <__ultoa_invert+0x58>
    ee00:	b4 e0       	ldi	r27, 0x04	; 4
    ee02:	a6 95       	lsr	r26
    ee04:	97 95       	ror	r25
    ee06:	87 95       	ror	r24
    ee08:	77 95       	ror	r23
    ee0a:	67 95       	ror	r22
    ee0c:	ba 95       	dec	r27
    ee0e:	c9 f7       	brne	.-14     	; 0xee02 <__ultoa_invert+0x86>
    ee10:	00 97       	sbiw	r24, 0x00	; 0
    ee12:	61 05       	cpc	r22, r1
    ee14:	71 05       	cpc	r23, r1
    ee16:	08 95       	ret
    ee18:	9b 01       	movw	r18, r22
    ee1a:	ac 01       	movw	r20, r24
    ee1c:	0a 2e       	mov	r0, r26
    ee1e:	06 94       	lsr	r0
    ee20:	57 95       	ror	r21
    ee22:	47 95       	ror	r20
    ee24:	37 95       	ror	r19
    ee26:	27 95       	ror	r18
    ee28:	ba 95       	dec	r27
    ee2a:	c9 f7       	brne	.-14     	; 0xee1e <__ultoa_invert+0xa2>
    ee2c:	62 0f       	add	r22, r18
    ee2e:	73 1f       	adc	r23, r19
    ee30:	84 1f       	adc	r24, r20
    ee32:	95 1f       	adc	r25, r21
    ee34:	a0 1d       	adc	r26, r0
    ee36:	08 95       	ret

0000ee38 <__prologue_saves__>:
    ee38:	2f 92       	push	r2
    ee3a:	3f 92       	push	r3
    ee3c:	4f 92       	push	r4
    ee3e:	5f 92       	push	r5
    ee40:	6f 92       	push	r6
    ee42:	7f 92       	push	r7
    ee44:	8f 92       	push	r8
    ee46:	9f 92       	push	r9
    ee48:	af 92       	push	r10
    ee4a:	bf 92       	push	r11
    ee4c:	cf 92       	push	r12
    ee4e:	df 92       	push	r13
    ee50:	ef 92       	push	r14
    ee52:	ff 92       	push	r15
    ee54:	0f 93       	push	r16
    ee56:	1f 93       	push	r17
    ee58:	cf 93       	push	r28
    ee5a:	df 93       	push	r29
    ee5c:	cd b7       	in	r28, 0x3d	; 61
    ee5e:	de b7       	in	r29, 0x3e	; 62
    ee60:	ca 1b       	sub	r28, r26
    ee62:	db 0b       	sbc	r29, r27
    ee64:	0f b6       	in	r0, 0x3f	; 63
    ee66:	f8 94       	cli
    ee68:	de bf       	out	0x3e, r29	; 62
    ee6a:	0f be       	out	0x3f, r0	; 63
    ee6c:	cd bf       	out	0x3d, r28	; 61
    ee6e:	09 94       	ijmp

0000ee70 <__epilogue_restores__>:
    ee70:	2a 88       	ldd	r2, Y+18	; 0x12
    ee72:	39 88       	ldd	r3, Y+17	; 0x11
    ee74:	48 88       	ldd	r4, Y+16	; 0x10
    ee76:	5f 84       	ldd	r5, Y+15	; 0x0f
    ee78:	6e 84       	ldd	r6, Y+14	; 0x0e
    ee7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    ee7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    ee7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    ee80:	aa 84       	ldd	r10, Y+10	; 0x0a
    ee82:	b9 84       	ldd	r11, Y+9	; 0x09
    ee84:	c8 84       	ldd	r12, Y+8	; 0x08
    ee86:	df 80       	ldd	r13, Y+7	; 0x07
    ee88:	ee 80       	ldd	r14, Y+6	; 0x06
    ee8a:	fd 80       	ldd	r15, Y+5	; 0x05
    ee8c:	0c 81       	ldd	r16, Y+4	; 0x04
    ee8e:	1b 81       	ldd	r17, Y+3	; 0x03
    ee90:	aa 81       	ldd	r26, Y+2	; 0x02
    ee92:	b9 81       	ldd	r27, Y+1	; 0x01
    ee94:	ce 0f       	add	r28, r30
    ee96:	d1 1d       	adc	r29, r1
    ee98:	0f b6       	in	r0, 0x3f	; 63
    ee9a:	f8 94       	cli
    ee9c:	de bf       	out	0x3e, r29	; 62
    ee9e:	0f be       	out	0x3f, r0	; 63
    eea0:	cd bf       	out	0x3d, r28	; 61
    eea2:	ed 01       	movw	r28, r26
    eea4:	08 95       	ret

0000eea6 <_exit>:
    eea6:	f8 94       	cli

0000eea8 <__stop_program>:
    eea8:	ff cf       	rjmp	.-2      	; 0xeea8 <__stop_program>
