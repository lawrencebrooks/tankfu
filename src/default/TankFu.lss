
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000a83c  0000a93c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a83c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ef7  00800144  00800144  0000a984  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000a980  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000af98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b23d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000558  00000000  00000000  0000b250  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007aaf  00000000  00000000  0000b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001527  00000000  00000000  00013257  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ba9  00000000  00000000  0001477e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001194  00000000  00000000  00016328  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001887  00000000  00000000  000174bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006cb5  00000000  00000000  00018d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f8  00000000  00000000  0001f9f8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 99 2c 	jmp	0x5932	; 0x5932 <__ctors_end>
       4:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
       8:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
       c:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      10:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      14:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      18:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      1c:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      20:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      24:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      28:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      2c:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      30:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      34:	0c 94 e7 2e 	jmp	0x5dce	; 0x5dce <__vector_13>
      38:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__vector_14>
      3c:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      40:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      44:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      48:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      4c:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      50:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      54:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      58:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      5c:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      60:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      64:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      68:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      6c:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__bad_interrupt>
      70:	98 4a       	sbci	r25, 0xA8	; 168
      72:	9d 4a       	sbci	r25, 0xAD	; 173
      74:	a0 4a       	sbci	r26, 0xA0	; 160
      76:	a3 4a       	sbci	r26, 0xA3	; 163
      78:	a6 4a       	sbci	r26, 0xA6	; 166
      7a:	a9 4a       	sbci	r26, 0xA9	; 169
      7c:	ac 4a       	sbci	r26, 0xAC	; 172
      7e:	af 4a       	sbci	r26, 0xAF	; 175
      80:	b2 4a       	sbci	r27, 0xA2	; 162

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	74 32 77 32 d2 32 d6 32 de 32 7f 32 84 32 89 32     t2w2.2.2.2.2.2.2
      e0:	e6 32 8c 32 8f 32 92 32 cf 32                       .2.2.2.2.2

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <strLevels>:
     93d:	20 20 4c 65 76 65 6c 20 4f 6e 65 00 20 20 4c 65       Level One.  Le
     94d:	76 65 6c 20 54 77 6f 00 4c 65 76 65 6c 20 54 68     vel Two.Level Th
     95d:	72 65 65 00 20 4c 65 76 65 6c 20 46 6f 75 72 00     ree. Level Four.
     96d:	20 4c 65 76 65 6c 20 46 69 76 65 00 20 20 4c 65      Level Five.  Le
     97d:	76 65 6c 20 53 69 78 00 4c 65 76 65 6c 20 53 65     vel Six.Level Se
     98d:	76 65 6e 00 4c 65 76 65 6c 20 45 69 67 68 74 00     ven.Level Eight.
     99d:	20 4c 65 76 65 6c 20 4e 69 6e 65 00 20 20 4c 65      Level Nine.  Le
     9ad:	76 65 6c 20 54 65 6e 00                             vel Ten.

000009b5 <strPaused>:
     9b5:	50 61 75 73 65 64 00                                Paused.

000009bc <strExit>:
     9bc:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

000009c5 <strTotal>:
     9c5:	54 6f 74 61 6c 3a 00                                Total:.

000009cc <strScore>:
     9cc:	53 63 6f 72 65 3a 00                                Score:.

000009d3 <strBanterClear>:
     9d3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

000009e2 <banter_map>:
     9e2:	59 6f 75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c     You suck bro  .L
     9f2:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     a02:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     a12:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     a22:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     a32:	2a 20 20 20 20 20 20 20 20 00 41 20 74 75 72 6b     *        .A turk
     a42:	65 79 20 73 68 6f 6f 74 00 54 68 61 74 27 73 20     ey shoot.That's 
     a52:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     a62:	70 3f 20 20 20 20 00 52 54 46 4d 21 20 20 20 20     p?    .RTFM!    
     a72:	20 20 20 20 20 00                                        .

00000a78 <strBy>:
     a78:	42 79 00                                            By.

00000a7b <strOwns>:
     a7b:	50 77 6e 73 00                                      Pwns.

00000a80 <strChangeHandle>:
     a80:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

00000a8f <strCancelHandle>:
     a8f:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

00000a9a <strConfirmHandle>:
     a9a:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

00000aa6 <strSelectHandle>:
     aa6:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

00000ab1 <strPlayer2>:
     ab1:	50 32 00                                            P2.

00000ab4 <strPlayer1>:
     ab4:	50 31 00                                            P1.

00000ab7 <strVertSep>:
     ab7:	7c 00                                               |.

00000ab9 <strUnderline>:
     ab9:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000ac5 <strHandlesTitle>:
     ac5:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

00000ad1 <strHighscores>:
     ad1:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

00000adb <str2Player>:
     adb:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

00000aec <str1Player>:
     aec:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

00000afa <strCopyright>:
     afa:	32 30 31 34 20 2d 20 4c 61 77 72 65 6e 63 65 20     2014 - Lawrence 
     b0a:	42 72 6f 6f 6b 73 00                                Brooks.

00000b11 <level_data>:
     b11:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     b21:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     b31:	02 02 02 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b41:	00 00 00 00 00 00 04 02 02 02 02 02 02 02 02 02     ................
     b51:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b61:	00 00 00 00 00 04 02 02 02 02 02 02 02 03 00 00     ................
	...
     b85:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
     ba1:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
     bc1:	00 00 04 02 02 00 00 00 00 00 01 01 00 00 00 00     ................
	...
     bd9:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     be9:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     bf9:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     c15:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     c25:	01 01 00 00 00 00 00 00 08 00 00 00 00 00 00 00     ................
     c35:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     c51:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     c61:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     c71:	01 01 00 00 00 00 00 02 02 00 00 58 00 00 01 01     ...........X....
	...
     c8d:	00 00 01 01 00 63 00 00 00 02 02 00 00 00 00 00     .....c..........
     c9d:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     cad:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     cc9:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     cd9:	01 01 00 00 00 00 00 00 00 07 00 00 00 00 00 00     ................
     ce9:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     d05:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     d15:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     d25:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
     d35:	00 00 00 00 00 09 00 00 00 00 00 00 00 00 01 01     ................
     d45:	00 00 00 00 00 02 02 05 00 00 00 00 00 00 00 00     ................
	...
     d65:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
     d81:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
     da1:	06 02 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
	...
     dbd:	00 06 02 02 02 02 02 02 02 02 02 05 00 00 00 00     ................
	...
     dd9:	00 00 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     de9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     df9:	02 02 02 02 02 02 00 00 00 00 00 00 00 00 00 00     ................
	...
     f69:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     f79:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1255:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    126d:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    1545:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    1555:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1831:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1849:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    1b21:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    1b31:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1e0d:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1e25:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    20fd:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    210d:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    23e9:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    2401:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    26d9:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    26e9:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...

0000285d <map_rocket_right_1>:
    285d:	01 01 26                                            ..&

00002860 <map_rocket_right_0>:
    2860:	01 01 25                                            ..%

00002863 <map_rocket_up_1>:
    2863:	01 01 24                                            ..$

00002866 <map_rocket_up_0>:
    2866:	01 01 23                                            ..#

00002869 <map_ball>:
    2869:	01 01 22                                            .."

0000286c <map_explosion_2>:
    286c:	02 02 0c 0d 0d 0c                                   ......

00002872 <map_explosion_1>:
    2872:	02 02 0a 0b 18 19                                   ......

00002878 <map_explosion_0>:
    2878:	02 02 08 09 16 17                                   ......

0000287e <map_tank2_right_1>:
    287e:	02 02 20 21 2e 2f                                   .. !./

00002884 <map_tank2_right_0>:
    2884:	02 02 1e 1f 2c 2d                                   ....,-

0000288a <map_tank2_up_1>:
    288a:	02 02 1c 1d 2a 2b                                   ....*+

00002890 <map_tank2_up_0>:
    2890:	02 02 1a 1b 28 29                                   ....()

00002896 <map_tank1_right_1>:
    2896:	02 02 06 07 14 15                                   ......

0000289c <map_tank1_right_0>:
    289c:	02 02 04 05 12 13                                   ......

000028a2 <map_tank1_up_1>:
    28a2:	02 02 02 03 10 11                                   ......

000028a8 <map_tank1_up_0>:
    28a8:	02 02 00 01 0e 0f                                   ......

000028ae <map_none>:
    28ae:	01 01 27                                            ..'

000028b1 <map_tank_blank>:
    28b1:	02 02 27 27 27 27                                   ..''''

000028b7 <map_metal_bl>:
    28b7:	01 01 0c                                            ...

000028ba <map_metal_tr>:
    28ba:	01 01 0b                                            ...

000028bd <map_metal_br>:
    28bd:	01 01 0a                                            ...

000028c0 <map_metal_tl>:
    28c0:	01 01 09                                            ...

000028c3 <map_tile_exp_2>:
    28c3:	01 01 08                                            ...

000028c6 <map_tile_exp_1>:
    28c6:	01 01 07                                            ...

000028c9 <map_tile_exp_0>:
    28c9:	01 01 06                                            ...

000028cc <map_rocket_itm>:
    28cc:	01 01 04                                            ...

000028cf <map_explode_itm>:
    28cf:	01 01 03                                            ...

000028d2 <map_speed_itm>:
    28d2:	01 01 02                                            ...

000028d5 <map_metal>:
    28d5:	01 01 05                                            ...

000028d8 <map_brick>:
    28d8:	01 01 01                                            ...

000028db <map_tile_none>:
    28db:	01 01 00                                            ...

000028de <map_pause>:
    28de:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    28ee:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    28fe:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    290e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

0000291c <map_splash>:
    291c:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    292c:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    293c:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    294c:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    295c:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    296c:	2a 00 00 2c 2d 2e                                   *..,-.

00002972 <sprites_data>:
    2972:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    2982:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    2992:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    29a2:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    29b2:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    29c2:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    29d2:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    29e2:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    29f2:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    2a02:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    2a12:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    2a22:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    2a32:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2a42:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    2a52:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    2a62:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    2a72:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2a82:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    2a92:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2aa2:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2ab2:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2ac2:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    2ad2:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2ae2:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2af2:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    2b02:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    2b12:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2b22:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2b32:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    2b42:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    2b52:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2b62:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2b72:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b82:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    2b92:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    2ba2:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2bb2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bc2:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2bd2:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2be2:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2bf2:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c02:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    2c12:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    2c22:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2c32:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2c42:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    2c52:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    2c62:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2c72:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c82:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2c92:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2ca2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cb2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cc2:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2cd2:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2ce2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cf2:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    2d02:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    2d12:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    2d22:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    2d32:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    2d42:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    2d52:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2d62:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2d72:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    2d82:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    2d92:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    2da2:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    2db2:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    2dc2:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    2dd2:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    2de2:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    2df2:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2e02:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2e12:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2e22:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2e32:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2e42:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2e52:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2e62:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2e72:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2e82:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2e92:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    2ea2:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    2eb2:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2ec2:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2ed2:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    2ee2:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    2ef2:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2f02:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2f12:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2f22:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f32:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2f42:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2f52:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2f62:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f72:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2f82:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2f92:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2fa2:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2fb2:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2fc2:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2fd2:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2fe2:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2ff2:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3002:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3012:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3022:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3032:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3042:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3052:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3062:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3072:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3082:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3092:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    30a2:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    30b2:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    30c2:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    30d2:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    30e2:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    30f2:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3102:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3112:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3122:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3132:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3142:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3152:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3162:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3172:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3182:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    3192:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    31a2:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    31b2:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    31c2:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    31d2:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    31e2:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    31f2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3202:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    3212:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    3222:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3232:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3242:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3252:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    3262:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    3272:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3282:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3292:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    32a2:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32b2:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    32c2:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    32d2:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    32e2:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32f2:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3302:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    3312:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    3322:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3332:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3342:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3352:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3362:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3372:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3382:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    3392:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    33a2:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    33b2:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    33c2:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    33d2:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    33e2:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    33f2:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3402:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    3412:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    3422:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    3432:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3442:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    3452:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    3462:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    3472:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3482:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3492:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    34a2:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    34b2:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    34c2:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    34d2:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    34e2:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    34f2:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3502:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3512:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    3522:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3532:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3542:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3552:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3562:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

00003572 <tiles_data>:
	...
    35b2:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    35c2:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    35d2:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    35e2:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    35f2:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    3602:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    3612:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    3622:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    3632:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    3642:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    3652:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    3662:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    3672:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    3682:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    3692:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    36a2:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    36b2:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    36c2:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    36d2:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    36e2:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    36fa:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    370a:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    371a:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    3732:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    3742:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    3752:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    3762:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    377a:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    379a:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    37b2:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    37c2:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    37d2:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    37e2:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    37f2:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    3802:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    3812:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    3822:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3832:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    3842:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    3852:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    3862:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    3872:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    3882:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    3892:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    38a2:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    38b2:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    38c2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    38d2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    38e2:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    38f2:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3902:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3912:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3922:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    3932:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3942:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3952:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3962:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    3972:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3982:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3992:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    39a2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    39b2:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    39c2:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    39d2:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    39e2:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    39f2:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3a02:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3a12:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3a22:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3a32:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    3a42:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3a52:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    3a62:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    3a92:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    3aa2:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    3ad2:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    3ae2:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3af2:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    3b02:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3b12:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3b22:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3b32:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    3b42:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b52:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b62:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    3b72:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    3b82:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3b92:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3ba2:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3bb2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3bc2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3bd2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3be2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3bf2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3c02:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3c12:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3c22:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3c32:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c42:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c52:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c62:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3c72:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3c82:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3c92:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3ca2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3cb2:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    3cc2:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    3cf2:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3d02:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3d12:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3d22:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    3d32:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    3d42:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3d52:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3d62:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3d72:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    3d82:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3d92:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3da2:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3db2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3dc2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3dd2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3de2:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    3e1a:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    3e2a:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    3e3a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e4a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e5a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3e6a:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    3e7a:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3e8a:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3e9a:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3eaa:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    3eba:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3eca:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3eda:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3eea:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    3efa:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3f0a:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3f1a:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3f2a:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3f3a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3f4a:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3f5a:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3f6a:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    3f7a:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3f8a:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    3fb2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3fc2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3fd2:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    3fe2:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    3ff2:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4002:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4012:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4022:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    4032:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4042:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4052:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4062:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4072:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4082:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4092:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    40a2:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    40ba:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    40ca:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    40da:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    40ea:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    40fa:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    410a:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    411a:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    412a:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    417a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    418a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    41a2:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    41ba:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    41ca:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    41fa:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    420a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    421a:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    4232:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    4242:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    4252:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4262:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    427a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    428a:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    429a:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    42b2:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    42c2:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    42d2:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    42e2:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    42fa:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    430a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    433e:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    434e:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    435e:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    437a:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    438a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    439a:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    43ba:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    43ca:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    43da:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    43fa:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    440a:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    441a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    445a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    446a:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    448a:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    44da:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    44fe:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    450e:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    451e:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    453a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    454a:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    455a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    457a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    458a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    459a:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    45ba:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    45ca:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    45da:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    45fa:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    460a:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    461a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    463e:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    464e:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    465e:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    467a:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    468a:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    469a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    46ba:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    46ca:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    46da:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    46fa:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    470a:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    471a:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    473a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    474a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    475a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    477a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    478a:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    479a:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    47c2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    47da:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4802:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    481a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    482a:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    483a:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    484a:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    485a:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    4882:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    489a:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    48b2:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    48c2:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    48d2:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    48e2:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    48fa:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    490a:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4922:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    493a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    494a:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    495a:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    497a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    498a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    499a:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    49ba:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    49ca:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    49da:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    49fa:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4a0a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4a1a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4a3a:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    4a4a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4a5a:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    4a7a:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4a8a:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4a9a:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4aba:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4aca:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4ada:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4afa:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4b0a:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    4b1a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    4b3a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4b4a:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4b5a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4b7a:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4b8a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4b9a:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4bbe:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4bce:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    4bde:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    4bfa:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    4c0a:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    4c1a:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4c3a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4c4a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4c5a:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4c7a:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    4c8a:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    4c9a:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4cba:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    4cca:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    4cda:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4cfa:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d0a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4d1a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4d3a:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d4a:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4d5a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4d7a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4d8a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4d9a:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    4dba:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4dca:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4dda:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4dfa:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4e0a:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    4e1a:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4e3a:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4e4a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4e5a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4e7a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4e8a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4e9a:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    4eba:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4eca:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4eda:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4efa:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    4f0a:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    4f1a:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4f3a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4f4a:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    4f5a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4f7a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4f8a:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4f9a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4fba:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    4fca:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4fda:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4ffa:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    500a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    501a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    503a:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    504a:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    505a:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    507a:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    508a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    509a:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    50be:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    50ce:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    5122:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    513a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    514a:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    515a:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5182:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5192:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    51a2:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    51ba:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    51ca:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    51da:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5202:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5212:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5222:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    523e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    524e:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    525e:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    5282:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5292:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    52a2:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    52be:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    52ce:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    52de:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    5302:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5312:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    5322:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    533a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    534a:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    535a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    537a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    538a:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    539a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    53be:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    53ce:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    53de:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    53ee:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    53fe:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    540e:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    541e:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    543a:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    544a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    545a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5482:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    5492:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    54a2:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    54c2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    54d2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    54e2:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5502:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5512:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5522:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5542:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5552:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5562:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5582:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5592:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    55a2:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    55c2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    55d2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    55e2:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5602:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5612:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5622:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    563a:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    564a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    565a:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    5682:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5692:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    56a2:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    56c2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    56d2:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    56e2:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5702:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    5712:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    5722:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5742:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    5752:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5762:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5782:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5792:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    57a2:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    57c2:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    57d2:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    57e2:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    57fa:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    580a:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    581a:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5832:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5842:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5852:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5862:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    587a:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    588a:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    589a:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    58b6:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    58c6:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    58d6:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    58e6:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    58f6:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5906:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    5916:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

00005932 <__ctors_end>:
    5932:	11 24       	eor	r1, r1
    5934:	1f be       	out	0x3f, r1	; 63
    5936:	cf ef       	ldi	r28, 0xFF	; 255
    5938:	d0 e1       	ldi	r29, 0x10	; 16
    593a:	de bf       	out	0x3e, r29	; 62
    593c:	cd bf       	out	0x3d, r28	; 61

0000593e <__do_copy_data>:
    593e:	11 e0       	ldi	r17, 0x01	; 1
    5940:	a0 e0       	ldi	r26, 0x00	; 0
    5942:	b1 e0       	ldi	r27, 0x01	; 1
    5944:	ec e3       	ldi	r30, 0x3C	; 60
    5946:	f8 ea       	ldi	r31, 0xA8	; 168
    5948:	02 c0       	rjmp	.+4      	; 0x594e <__do_copy_data+0x10>
    594a:	05 90       	lpm	r0, Z+
    594c:	0d 92       	st	X+, r0
    594e:	a4 34       	cpi	r26, 0x44	; 68
    5950:	b1 07       	cpc	r27, r17
    5952:	d9 f7       	brne	.-10     	; 0x594a <__do_copy_data+0xc>

00005954 <__do_clear_bss>:
    5954:	10 e1       	ldi	r17, 0x10	; 16
    5956:	a4 e4       	ldi	r26, 0x44	; 68
    5958:	b1 e0       	ldi	r27, 0x01	; 1
    595a:	01 c0       	rjmp	.+2      	; 0x595e <.do_clear_bss_start>

0000595c <.do_clear_bss_loop>:
    595c:	1d 92       	st	X+, r1

0000595e <.do_clear_bss_start>:
    595e:	ab 33       	cpi	r26, 0x3B	; 59
    5960:	b1 07       	cpc	r27, r17
    5962:	e1 f7       	brne	.-8      	; 0x595c <.do_clear_bss_loop>

00005964 <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    5964:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    5966:	88 e1       	ldi	r24, 0x18	; 24
    5968:	0f b6       	in	r0, 0x3f	; 63
    596a:	f8 94       	cli
    596c:	80 93 60 00 	sts	0x0060, r24
    5970:	10 92 60 00 	sts	0x0060, r1
    5974:	0f be       	out	0x3f, r0	; 63

00005976 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    5976:	0e 94 a7 31 	call	0x634e	; 0x634e <isEepromFormatted>
    597a:	81 11       	cpse	r24, r1
    597c:	02 c0       	rjmp	.+4      	; 0x5982 <Initialize+0xc>
    597e:	0e 94 85 31 	call	0x630a	; 0x630a <FormatEeprom>

	cli();
    5982:	f8 94       	cli
    5984:	e1 e8       	ldi	r30, 0x81	; 129
    5986:	f9 e0       	ldi	r31, 0x09	; 9
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
			mix_buf[j]=0x80;//(i<128?i:128);
    5988:	80 e8       	ldi	r24, 0x80	; 128
    598a:	81 93       	st	Z+, r24

	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
    598c:	2b e0       	ldi	r18, 0x0B	; 11
    598e:	ed 38       	cpi	r30, 0x8D	; 141
    5990:	f2 07       	cpc	r31, r18
    5992:	d9 f7       	brne	.-10     	; 0x598a <Initialize+0x14>
			mix_buf[j]=0x80;//(i<128?i:128);
		}	
	
		mix_pos=mix_buf;
    5994:	81 e8       	ldi	r24, 0x81	; 129
    5996:	99 e0       	ldi	r25, 0x09	; 9
    5998:	90 93 8e 0b 	sts	0x0B8E, r25
    599c:	80 93 8d 0b 	sts	0x0B8D, r24
		mix_bank=0;
    59a0:	10 92 8f 0b 	sts	0x0B8F, r1
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    59a4:	81 e0       	ldi	r24, 0x01	; 1
    59a6:	80 93 a6 0b 	sts	0x0BA6, r24
		tr4_barrel_hi=1;		
    59aa:	80 93 a7 0b 	sts	0x0BA7, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    59ae:	80 93 a5 0b 	sts	0x0BA5, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    59b2:	10 92 92 0b 	sts	0x0B92, r1
    59b6:	10 92 98 0b 	sts	0x0B98, r1
    59ba:	10 92 9e 0b 	sts	0x0B9E, r1
    59be:	10 92 a4 0b 	sts	0x0BA4, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    59c2:	10 92 5a 09 	sts	0x095A, r1
	sync_flags=0;
    59c6:	10 92 5c 09 	sts	0x095C, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    59ca:	92 e1       	ldi	r25, 0x12	; 18
    59cc:	90 93 5b 09 	sts	0x095B, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    59d0:	90 ee       	ldi	r25, 0xE0	; 224
    59d2:	90 93 64 09 	sts	0x0964, r25
	render_lines_count=FRAME_LINES;
    59d6:	90 93 62 09 	sts	0x0962, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    59da:	94 e1       	ldi	r25, 0x14	; 20
    59dc:	90 93 63 09 	sts	0x0963, r25
	first_render_line=FIRST_RENDER_LINE;
    59e0:	90 93 61 09 	sts	0x0961, r25

	joypad1_status_hi=0;
    59e4:	10 92 68 09 	sts	0x0968, r1
    59e8:	10 92 67 09 	sts	0x0967, r1
	joypad2_status_hi=0;
    59ec:	10 92 6c 09 	sts	0x096C, r1
    59f0:	10 92 6b 09 	sts	0x096B, r1
	sound_enabled=1;
    59f4:	80 93 91 0b 	sts	0x0B91, r24

	InitializeVideoMode();
    59f8:	0e 94 5f 3e 	call	0x7cbe	; 0x7cbe <InitializeVideoMode>
    59fc:	82 e8       	ldi	r24, 0x82	; 130
    59fe:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    5a00:	fc 01       	movw	r30, r24
    5a02:	25 91       	lpm	r18, Z+
    5a04:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    5a06:	f9 01       	movw	r30, r18
    5a08:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    5a0a:	30 83       	st	Z, r19
    5a0c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
    5a10:	80 3b       	cpi	r24, 0xB0	; 176
    5a12:	92 07       	cpc	r25, r18
    5a14:	a9 f7       	brne	.-22     	; 0x5a00 <Initialize+0x8a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    5a16:	78 94       	sei
	
	DisplayLogo();
    5a18:	0e 94 1e 3f 	call	0x7e3c	; 0x7e3c <DisplayLogo>
    5a1c:	0e 94 81 51 	call	0xa302	; 0xa302 <main>
    5a20:	0c 94 1c 54 	jmp	0xa838	; 0xa838 <_exit>

00005a24 <__bad_interrupt>:
    5a24:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00005a28 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    5a28:	0c e0       	ldi	r16, 0x0C	; 12
    5a2a:	0a 95       	dec	r16
    5a2c:	f1 f7       	brne	.-4      	; 0x5a2a <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    5a2e:	e8 e1       	ldi	r30, 0x18	; 24
		ldi ZH,hi8(ram_tiles_restore);
    5a30:	f9 e0       	ldi	r31, 0x09	; 9

		ldi YL,lo8(vram)
    5a32:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    5a34:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    5a36:	20 91 27 0c 	lds	r18, 0x0C27


		clr r16
    5a3a:	00 27       	eor	r16, r16

00005a3c <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    5a3c:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    5a3e:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    5a40:	ac 0f       	add	r26, r28
		adc XH,YH
    5a42:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    5a44:	1c 91       	ld	r17, X
		std Z+2,r17
    5a46:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    5a48:	02 17       	cp	r16, r18
		brsh noov
    5a4a:	08 f4       	brcc	.+2      	; 0x5a4e <noov>
		mov r17,r16
    5a4c:	10 2f       	mov	r17, r16

00005a4e <noov>:
	noov:
		st X,r17
    5a4e:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    5a50:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    5a52:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    5a54:	01 31       	cpi	r16, 0x11	; 17
		brlo upd_loop ;23
    5a56:	90 f3       	brcs	.-28     	; 0x5a3c <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    5a58:	0c e2       	ldi	r16, 0x2C	; 44

00005a5a <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    5a5a:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    5a5c:	1a 95       	dec	r17
		brne .-4
    5a5e:	f1 f7       	brne	.-4      	; 0x5a5c <wait_loop+0x2>

		dec r16
    5a60:	0a 95       	dec	r16
		brne wait_loop
    5a62:	d9 f7       	brne	.-10     	; 0x5a5a <wait_loop>

		lds r2,overlay_tile_table
    5a64:	20 90 57 09 	lds	r2, 0x0957
		lds r3,overlay_tile_table+1
    5a68:	30 90 58 09 	lds	r3, 0x0958
		lds r16,tile_table_lo 
    5a6c:	00 91 53 09 	lds	r16, 0x0953
		lds r17,tile_table_hi
    5a70:	10 91 54 09 	lds	r17, 0x0954
		movw r12,r16
    5a74:	68 01       	movw	r12, r16
		movw r6,r16
    5a76:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    5a78:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    5a7a:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    5a7c:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    5a7e:	4e 01       	movw	r8, r28
		clr r0
    5a80:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    5a82:	30 91 56 09 	lds	r19, 0x0956
		cpi r19,0
    5a86:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    5a88:	09 f0       	breq	.+2      	; 0x5a8c <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    5a8a:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    5a8c:	09 f0       	breq	.+2      	; 0x5a90 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    5a8e:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    5a90:	09 f0       	breq	.+2      	; 0x5a94 <wait_loop+0x3a>
		mov r24,r19
    5a92:	83 2f       	mov	r24, r19

		breq .+2
    5a94:	09 f0       	breq	.+2      	; 0x5a98 <wait_loop+0x3e>
		movw r12,r2
    5a96:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    5a98:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    5a9a:	a0 2e       	mov	r10, r16
		clr r22
    5a9c:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    5a9e:	78 e0       	ldi	r23, 0x08	; 8

00005aa0 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    5aa0:	7e d2       	rcall	.+1276   	; 0x5f9e <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    5aa2:	36 e2       	ldi	r19, 0x26	; 38
    5aa4:	3a 95       	dec	r19
    5aa6:	f1 f7       	brne	.-4      	; 0x5aa4 <next_tile_line+0x4>
    5aa8:	00 00       	nop

		;***draw line***
		call render_tile_line
    5aaa:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    5aae:	3f e0       	ldi	r19, 0x0F	; 15
    5ab0:	3a 95       	dec	r19
    5ab2:	f1 f7       	brne	.-4      	; 0x5ab0 <next_tile_line+0x10>
    5ab4:	00 00       	nop
    5ab6:	00 00       	nop

		dec r10
    5ab8:	aa 94       	dec	r10
		breq frame_end
    5aba:	a9 f0       	breq	.+42     	; 0x5ae6 <frame_end>
	
		inc r22
    5abc:	63 95       	inc	r22
		lpm ;3 nop
    5abe:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    5ac0:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    5ac2:	31 f0       	breq	.+12     	; 0x5ad0 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    5ac4:	33 e0       	ldi	r19, 0x03	; 3
    5ac6:	3a 95       	dec	r19
    5ac8:	f1 f7       	brne	.-4      	; 0x5ac6 <next_tile_line+0x26>
    5aca:	00 00       	nop
    5acc:	00 00       	nop
		
		rjmp next_tile_line	
    5ace:	e8 cf       	rjmp	.-48     	; 0x5aa0 <next_tile_line>

00005ad0 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    5ad0:	66 27       	eor	r22, r22

		clr r0
    5ad2:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    5ad4:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    5ad6:	c3 0f       	add	r28, r19
		adc YH,r0
    5ad8:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    5ada:	8a 95       	dec	r24
		brne .+2
    5adc:	09 f4       	brne	.+2      	; 0x5ae0 <next_tile_row+0x10>
		movw YL,r8	;main vram
    5ade:	e4 01       	movw	r28, r8
		brne .+2
    5ae0:	09 f4       	brne	.+2      	; 0x5ae4 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    5ae2:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    5ae4:	dd cf       	rjmp	.-70     	; 0x5aa0 <next_tile_line>

00005ae6 <frame_end>:

	frame_end:

		WAIT r19,18
    5ae6:	36 e0       	ldi	r19, 0x06	; 6
    5ae8:	3a 95       	dec	r19
    5aea:	f1 f7       	brne	.-4      	; 0x5ae8 <frame_end+0x2>

		rcall hsync_pulse ;145
    5aec:	58 d2       	rcall	.+1200   	; 0x5f9e <hsync_pulse>
	
		clr r1
    5aee:	11 24       	eor	r1, r1
		call RestoreBackground
    5af0:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    5af4:	e0 91 5c 09 	lds	r30, 0x095C
		ldi r20,SYNC_FLAG_FIELD
    5af8:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    5afa:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    5afc:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    5afe:	e0 93 5c 09 	sts	0x095C, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    5b02:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    5b04:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    5b08:	11 24       	eor	r1, r1


		ret
    5b0a:	08 95       	ret

00005b0c <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    5b0c:	de 01       	movw	r26, r28

		mul r22,r23
    5b0e:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    5b10:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5b12:	00 54       	subi	r16, 0x40	; 64
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    5b14:	14 40       	sbci	r17, 0x04	; 4

		add r16,r0
    5b16:	00 0d       	add	r16, r0
		adc r17,r1
    5b18:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    5b1a:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    5b1c:	08 ed       	ldi	r16, 0xD8	; 216
		ldi r17,hi8(ram_tiles)
    5b1e:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    5b20:	00 0d       	add	r16, r0
		adc r17,r1
    5b22:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    5b24:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    5b26:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    5b28:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    5b2a:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    5b2c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    5b2e:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    5b30:	21 31       	cpi	r18, 0x11	; 17
		brcc .+2
    5b32:	08 f4       	brcc	.+2      	; 0x5b36 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    5b34:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    5b36:	04 0e       	add	r0, r20
	    adc r1,r21
    5b38:	15 1e       	adc	r1, r21

		movw ZL,r0
    5b3a:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    5b3c:	21 31       	cpi	r18, 0x11	; 17
		brcs ramloop
    5b3e:	f0 f0       	brcs	.+60     	; 0x5b7c <ramloop>

00005b40 <romloop>:
	

	romloop:
	    lpm r16,Z+
    5b40:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5b42:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    5b44:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    5b46:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    5b48:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5b4a:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    5b4c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    5b4e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    5b50:	21 31       	cpi	r18, 0x11	; 17
		nop
    5b52:	00 00       	nop

	    lpm r16,Z+
    5b54:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5b56:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    5b58:	08 f4       	brcc	.+2      	; 0x5b5c <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    5b5a:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    5b5c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    5b5e:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    5b60:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    5b62:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    5b64:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    5b66:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    5b68:	21 31       	cpi	r18, 0x11	; 17
		dec r17			;decrement tiles to draw on line
    5b6a:	1a 95       	dec	r17
   
	    lpm r16,Z+
    5b6c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    5b6e:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    5b70:	05 91       	lpm	r16, Z+

		breq end	
    5b72:	31 f1       	breq	.+76     	; 0x5bc0 <end>
	    movw ZL,r0   	;copy next tile adress
    5b74:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5b76:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    5b78:	18 f7       	brcc	.-58     	; 0x5b40 <romloop>
	
		rjmp .
    5b7a:	00 c0       	rjmp	.+0      	; 0x5b7c <ramloop>

00005b7c <ramloop>:

	ramloop:

	    ld r16,Z+
    5b7c:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    5b7e:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    5b80:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    5b82:	01 91       	ld	r16, Z+
		nop   
    5b84:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    5b86:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    5b88:	23 9f       	mul	r18, r19


	    ld r16,Z+
    5b8a:	01 91       	ld	r16, Z+
		nop
    5b8c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    5b8e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    5b90:	21 31       	cpi	r18, 0x11	; 17
   		rjmp .
    5b92:	00 c0       	rjmp	.+0      	; 0x5b94 <ramloop+0x18>

	    ld r16,Z+
    5b94:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    5b96:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    5b98:	08 f0       	brcs	.+2      	; 0x5b9c <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    5b9a:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    5b9c:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    5b9e:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    5ba0:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    5ba2:	15 1e       	adc	r1, r21
		rjmp .
    5ba4:	00 c0       	rjmp	.+0      	; 0x5ba6 <ramloop+0x2a>
    
		ld r16,Z+		
    5ba6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    5ba8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    5baa:	21 31       	cpi	r18, 0x11	; 17
		rjmp .  
    5bac:	00 c0       	rjmp	.+0      	; 0x5bae <ramloop+0x32>

	    ld r16,Z+	
    5bae:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    5bb0:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    5bb2:	01 91       	ld	r16, Z+

	    dec r17
    5bb4:	1a 95       	dec	r17
	    breq end
    5bb6:	21 f0       	breq	.+8      	; 0x5bc0 <end>
	
		movw ZL,r0
    5bb8:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    5bba:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    5bbc:	08 f6       	brcc	.-126    	; 0x5b40 <romloop>
		rjmp ramloop
    5bbe:	de cf       	rjmp	.-68     	; 0x5b7c <ramloop>

00005bc0 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    5bc0:	08 b9       	out	0x08, r16	; 8
		clr r16	
    5bc2:	00 27       	eor	r16, r16
		lpm	
    5bc4:	c8 95       	lpm
		nop
    5bc6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    5bc8:	08 b9       	out	0x08, r16	; 8

		ret
    5bca:	08 95       	ret

00005bcc <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    5bcc:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    5bce:	e0 91 53 09 	lds	r30, 0x0953
	lds ZH,tile_table_hi
    5bd2:	f0 91 54 09 	lds	r31, 0x0954
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    5bd6:	81 51       	subi	r24, 0x11	; 17
	mul r24,r18
    5bd8:	82 9f       	mul	r24, r18
	add ZL,r0
    5bda:	e0 0d       	add	r30, r0
	adc ZH,r1
    5bdc:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    5bde:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    5be0:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    5be2:	62 9f       	mul	r22, r18
	add XL,r0
    5be4:	a0 0d       	add	r26, r0
	adc XH,r1
    5be6:	b1 1d       	adc	r27, r1

	clr r0
    5be8:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    5bea:	05 90       	lpm	r0, Z+
    5bec:	0d 92       	st	X+, r0
    5bee:	05 90       	lpm	r0, Z+
    5bf0:	0d 92       	st	X+, r0
    5bf2:	05 90       	lpm	r0, Z+
    5bf4:	0d 92       	st	X+, r0
    5bf6:	05 90       	lpm	r0, Z+
    5bf8:	0d 92       	st	X+, r0
    5bfa:	05 90       	lpm	r0, Z+
    5bfc:	0d 92       	st	X+, r0
    5bfe:	05 90       	lpm	r0, Z+
    5c00:	0d 92       	st	X+, r0
    5c02:	05 90       	lpm	r0, Z+
    5c04:	0d 92       	st	X+, r0
    5c06:	05 90       	lpm	r0, Z+
    5c08:	0d 92       	st	X+, r0
    5c0a:	05 90       	lpm	r0, Z+
    5c0c:	0d 92       	st	X+, r0
    5c0e:	05 90       	lpm	r0, Z+
    5c10:	0d 92       	st	X+, r0
    5c12:	05 90       	lpm	r0, Z+
    5c14:	0d 92       	st	X+, r0
    5c16:	05 90       	lpm	r0, Z+
    5c18:	0d 92       	st	X+, r0
    5c1a:	05 90       	lpm	r0, Z+
    5c1c:	0d 92       	st	X+, r0
    5c1e:	05 90       	lpm	r0, Z+
    5c20:	0d 92       	st	X+, r0
    5c22:	05 90       	lpm	r0, Z+
    5c24:	0d 92       	st	X+, r0
    5c26:	05 90       	lpm	r0, Z+
    5c28:	0d 92       	st	X+, r0
    5c2a:	05 90       	lpm	r0, Z+
    5c2c:	0d 92       	st	X+, r0
    5c2e:	05 90       	lpm	r0, Z+
    5c30:	0d 92       	st	X+, r0
    5c32:	05 90       	lpm	r0, Z+
    5c34:	0d 92       	st	X+, r0
    5c36:	05 90       	lpm	r0, Z+
    5c38:	0d 92       	st	X+, r0
    5c3a:	05 90       	lpm	r0, Z+
    5c3c:	0d 92       	st	X+, r0
    5c3e:	05 90       	lpm	r0, Z+
    5c40:	0d 92       	st	X+, r0
    5c42:	05 90       	lpm	r0, Z+
    5c44:	0d 92       	st	X+, r0
    5c46:	05 90       	lpm	r0, Z+
    5c48:	0d 92       	st	X+, r0
    5c4a:	05 90       	lpm	r0, Z+
    5c4c:	0d 92       	st	X+, r0
    5c4e:	05 90       	lpm	r0, Z+
    5c50:	0d 92       	st	X+, r0
    5c52:	05 90       	lpm	r0, Z+
    5c54:	0d 92       	st	X+, r0
    5c56:	05 90       	lpm	r0, Z+
    5c58:	0d 92       	st	X+, r0
    5c5a:	05 90       	lpm	r0, Z+
    5c5c:	0d 92       	st	X+, r0
    5c5e:	05 90       	lpm	r0, Z+
    5c60:	0d 92       	st	X+, r0
    5c62:	05 90       	lpm	r0, Z+
    5c64:	0d 92       	st	X+, r0
    5c66:	05 90       	lpm	r0, Z+
    5c68:	0d 92       	st	X+, r0
    5c6a:	05 90       	lpm	r0, Z+
    5c6c:	0d 92       	st	X+, r0
    5c6e:	05 90       	lpm	r0, Z+
    5c70:	0d 92       	st	X+, r0
    5c72:	05 90       	lpm	r0, Z+
    5c74:	0d 92       	st	X+, r0
    5c76:	05 90       	lpm	r0, Z+
    5c78:	0d 92       	st	X+, r0
    5c7a:	05 90       	lpm	r0, Z+
    5c7c:	0d 92       	st	X+, r0
    5c7e:	05 90       	lpm	r0, Z+
    5c80:	0d 92       	st	X+, r0
    5c82:	05 90       	lpm	r0, Z+
    5c84:	0d 92       	st	X+, r0
    5c86:	05 90       	lpm	r0, Z+
    5c88:	0d 92       	st	X+, r0
    5c8a:	05 90       	lpm	r0, Z+
    5c8c:	0d 92       	st	X+, r0
    5c8e:	05 90       	lpm	r0, Z+
    5c90:	0d 92       	st	X+, r0
    5c92:	05 90       	lpm	r0, Z+
    5c94:	0d 92       	st	X+, r0
    5c96:	05 90       	lpm	r0, Z+
    5c98:	0d 92       	st	X+, r0
    5c9a:	05 90       	lpm	r0, Z+
    5c9c:	0d 92       	st	X+, r0
    5c9e:	05 90       	lpm	r0, Z+
    5ca0:	0d 92       	st	X+, r0
    5ca2:	05 90       	lpm	r0, Z+
    5ca4:	0d 92       	st	X+, r0
    5ca6:	05 90       	lpm	r0, Z+
    5ca8:	0d 92       	st	X+, r0
    5caa:	05 90       	lpm	r0, Z+
    5cac:	0d 92       	st	X+, r0
    5cae:	05 90       	lpm	r0, Z+
    5cb0:	0d 92       	st	X+, r0
    5cb2:	05 90       	lpm	r0, Z+
    5cb4:	0d 92       	st	X+, r0
    5cb6:	05 90       	lpm	r0, Z+
    5cb8:	0d 92       	st	X+, r0
    5cba:	05 90       	lpm	r0, Z+
    5cbc:	0d 92       	st	X+, r0
    5cbe:	05 90       	lpm	r0, Z+
    5cc0:	0d 92       	st	X+, r0
    5cc2:	05 90       	lpm	r0, Z+
    5cc4:	0d 92       	st	X+, r0
    5cc6:	05 90       	lpm	r0, Z+
    5cc8:	0d 92       	st	X+, r0
    5cca:	05 90       	lpm	r0, Z+
    5ccc:	0d 92       	st	X+, r0
    5cce:	05 90       	lpm	r0, Z+
    5cd0:	0d 92       	st	X+, r0
    5cd2:	05 90       	lpm	r0, Z+
    5cd4:	0d 92       	st	X+, r0
    5cd6:	05 90       	lpm	r0, Z+
    5cd8:	0d 92       	st	X+, r0
    5cda:	05 90       	lpm	r0, Z+
    5cdc:	0d 92       	st	X+, r0
    5cde:	05 90       	lpm	r0, Z+
    5ce0:	0d 92       	st	X+, r0
    5ce2:	05 90       	lpm	r0, Z+
    5ce4:	0d 92       	st	X+, r0
    5ce6:	05 90       	lpm	r0, Z+
    5ce8:	0d 92       	st	X+, r0


	clr r1
    5cea:	11 24       	eor	r1, r1
	ret
    5cec:	08 95       	ret

00005cee <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    5cee:	0f 93       	push	r16
	push r17
    5cf0:	1f 93       	push	r17
	push YL
    5cf2:	cf 93       	push	r28
	push YH
    5cf4:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    5cf6:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    5cf8:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    5cfa:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi ZH,hi8(sprites)	
    5cfc:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    5cfe:	e0 0d       	add	r30, r0
	adc ZH,r1
    5d00:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    5d02:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    5d04:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    5d06:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    5d08:	8e 9f       	mul	r24, r30
	movw r26,r0
    5d0a:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    5d0c:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    5d0e:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    5d10:	cb e4       	ldi	r28, 0x4B	; 75
	ldi YH,hi8(sprites_tile_banks)	
    5d12:	d9 e0       	ldi	r29, 0x09	; 9
	clr r0
    5d14:	00 24       	eor	r0, r0
	add YL,r1
    5d16:	c1 0d       	add	r28, r1
	adc YH,r0		
    5d18:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    5d1a:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    5d1c:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    5d1e:	ea 0f       	add	r30, r26
	adc ZH,r27
    5d20:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    5d22:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    5d24:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    5d26:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    5d28:	69 9f       	mul	r22, r25
	add XL,r0
    5d2a:	a0 0d       	add	r26, r0
	adc XH,r1
    5d2c:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    5d2e:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    5d30:	dd 27       	eor	r29, r29

	cpi r20,0	
    5d32:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    5d34:	51 f4       	brne	.+20     	; 0x5d4a <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    5d36:	a2 0f       	add	r26, r18
	adc XH,r1
    5d38:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    5d3a:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    5d3c:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    5d3e:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    5d40:	11 c0       	rjmp	.+34     	; 0x5d64 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    5d42:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    5d44:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    5d46:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    5d48:	0d c0       	rjmp	.+26     	; 0x5d64 <x_check_end>

00005d4a <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    5d4a:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    5d4c:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    5d4e:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    5d50:	04 c0       	rjmp	.+8      	; 0x5d5a <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    5d52:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    5d54:	e8 0f       	add	r30, r24
	adc ZH,r1	
    5d56:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    5d58:	05 c0       	rjmp	.+10     	; 0x5d64 <x_check_end>

00005d5a <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    5d5a:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    5d5c:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    5d5e:	e2 0f       	add	r30, r18
	adc ZH,r1
    5d60:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    5d62:	31 97       	sbiw	r30, 0x01	; 1

00005d64 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    5d64:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    5d66:	41 f4       	brne	.+16     	; 0x5d78 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    5d68:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    5d6a:	93 9f       	mul	r25, r19
	add XL,r0
    5d6c:	a0 0d       	add	r26, r0
	adc XH,r1
    5d6e:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    5d70:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    5d72:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    5d74:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    5d76:	0a c0       	rjmp	.+20     	; 0x5d8c <y_check_end>

00005d78 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    5d78:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    5d7a:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    5d7c:	63 2f       	mov	r22, r19
	dec r22
    5d7e:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    5d80:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    5d82:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    5d84:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    5d86:	56 9f       	mul	r21, r22
	add ZL,r0
    5d88:	e0 0d       	add	r30, r0
	adc ZH,r1	
    5d8a:	f1 1d       	adc	r31, r1

00005d8c <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    5d8c:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    5d8e:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    5d90:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    5d92:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    5d94:	00 ff       	sbrs	r16, 0
	clr r23
    5d96:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    5d98:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    5d9a:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    5d9c:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    5d9e:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    5da0:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    5da2:	59 1b       	sub	r21, r25

00005da4 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    5da4:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    5da6:	48 1b       	sub	r20, r24

00005da8 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    5da8:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    5daa:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    5dac:	2c 93       	st	X, r18
	adiw XL,1
    5dae:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    5db0:	e6 0f       	add	r30, r22
	adc ZH,r23
    5db2:	f7 1f       	adc	r31, r23
	dec r20
    5db4:	4a 95       	dec	r20
	brne x_loop
    5db6:	c1 f7       	brne	.-16     	; 0x5da8 <x_loop>

	add ZL,YL		;src+=srcXdiff
    5db8:	ec 0f       	add	r30, r28
	adc ZH,YH
    5dba:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    5dbc:	a8 0f       	add	r26, r24
	adc XH,r1
    5dbe:	b1 1d       	adc	r27, r1
	dec r21
    5dc0:	5a 95       	dec	r21
	brne y_loop
    5dc2:	81 f7       	brne	.-32     	; 0x5da4 <y_loop>


	pop YH
    5dc4:	df 91       	pop	r29
	pop YL
    5dc6:	cf 91       	pop	r28
	pop r17
    5dc8:	1f 91       	pop	r17
	pop r16
    5dca:	0f 91       	pop	r16
	ret
    5dcc:	08 95       	ret

00005dce <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    5dce:	0f 92       	push	r0
	push r1
    5dd0:	1f 92       	push	r1
	push ZL;2
    5dd2:	ef 93       	push	r30
	push ZH;2
    5dd4:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5dd6:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5dd8:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5dda:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    5dde:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    5de0:	f1 e0       	ldi	r31, 0x01	; 1

00005de2 <latency_loop>:
latency_loop:
	cp ZL,ZH
    5de2:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    5de4:	00 f0       	brcs	.+0      	; 0x5de6 <latency_loop+0x4>
	inc ZH
    5de6:	f3 95       	inc	r31
	cpi ZH,10
    5de8:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    5dea:	d8 f3       	brcs	.-10     	; 0x5de2 <latency_loop>
	jmp .
    5dec:	0c 94 f8 2e 	jmp	0x5df0	; 0x5df0 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    5df0:	e0 91 5b 09 	lds	r30, 0x095B
	dec ZL
    5df4:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5df6:	e0 93 5b 09 	sts	0x095B, r30

	;process sync phases
	lds ZH,sync_phase
    5dfa:	f0 91 5a 09 	lds	r31, 0x095A
	sbrc ZH,0
    5dfe:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    5e00:	57 c0       	rjmp	.+174    	; 0x5eb0 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5e02:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    5e04:	98 f0       	brcs	.+38     	; 0x5e2c <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    5e06:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    5e08:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    5e0c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    5e0e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    5e12:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    5e14:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    5e16:	26 f4       	brtc	.+8      	; 0x5e20 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    5e18:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5e1a:	0e 94 b0 30 	call	0x6160	; 0x6160 <update_sound>
	rjmp sync_end
    5e1e:	b8 c0       	rjmp	.+368    	; 0x5f90 <sync_end>

00005e20 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    5e20:	e5 e1       	ldi	r30, 0x15	; 21
    5e22:	ea 95       	dec	r30
    5e24:	f1 f7       	brne	.-4      	; 0x5e22 <sync_pre_eq_no_sound_update+0x2>
    5e26:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5e28:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    5e2a:	b2 c0       	rjmp	.+356    	; 0x5f90 <sync_end>

00005e2c <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    5e2c:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    5e2e:	38 f1       	brcs	.+78     	; 0x5e7e <sync_post_eq>

	rjmp .
    5e30:	00 c0       	rjmp	.+0      	; 0x5e32 <sync_eq+0x6>
	rjmp .
    5e32:	00 c0       	rjmp	.+0      	; 0x5e34 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5e34:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    5e36:	e0 fb       	bst	r30, 0
	ldi ZL,4
    5e38:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    5e3a:	16 f4       	brtc	.+4      	; 0x5e40 <sync_eq_skip>
	
	call update_sound
    5e3c:	0e 94 b0 30 	call	0x6160	; 0x6160 <update_sound>

00005e40 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    5e40:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    5e42:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    5e46:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    5e48:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    5e4c:	a1 c0       	rjmp	.+322    	; 0x5f90 <sync_end>

00005e4e <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    5e4e:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5e50:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5e52:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5e54:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    5e58:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    5e5a:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    5e5c:	00 f0       	brcs	.+0      	; 0x5e5e <__vector_14+0x10>

	cpi ZL,2
    5e5e:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    5e60:	00 f0       	brcs	.+0      	; 0x5e62 <__vector_14+0x14>

	cpi ZL,3
    5e62:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    5e64:	00 f0       	brcs	.+0      	; 0x5e66 <__vector_14+0x18>

	cpi ZL,4
    5e66:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    5e68:	00 f0       	brcs	.+0      	; 0x5e6a <__vector_14+0x1c>

	cpi ZL,5
    5e6a:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    5e6c:	00 f0       	brcs	.+0      	; 0x5e6e <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    5e6e:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    5e70:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    5e72:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    5e76:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    5e78:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    5e7a:	ef 91       	pop	r30
	reti
    5e7c:	18 95       	reti

00005e7e <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    5e7e:	00 c0       	rjmp	.+0      	; 0x5e80 <sync_post_eq+0x2>

	bst ZL,0
    5e80:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5e82:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    5e84:	26 f4       	brtc	.+8      	; 0x5e8e <sync_post_eq_no_sound_update>
	ldi ZL,1	
    5e86:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5e88:	0e 94 b0 30 	call	0x6160	; 0x6160 <update_sound>
	rjmp sync_pre_eq_cont
    5e8c:	05 c0       	rjmp	.+10     	; 0x5e98 <sync_pre_eq_cont>

00005e8e <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    5e8e:	e5 e1       	ldi	r30, 0x15	; 21
    5e90:	ea 95       	dec	r30
    5e92:	f1 f7       	brne	.-4      	; 0x5e90 <sync_post_eq_no_sound_update+0x2>
    5e94:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    5e96:	28 9a       	sbi	0x05, 0	; 5

00005e98 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    5e98:	e0 91 5b 09 	lds	r30, 0x095B
	cpi ZL,0
    5e9c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    5e9e:	09 f0       	breq	.+2      	; 0x5ea2 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    5ea0:	77 c0       	rjmp	.+238    	; 0x5f90 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    5ea2:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    5ea4:	e0 93 5b 09 	sts	0x095B, r30
	ldi ZL,1
    5ea8:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    5eaa:	e0 93 5a 09 	sts	0x095A, r30
	
	rjmp sync_end
    5eae:	70 c0       	rjmp	.+224    	; 0x5f90 <sync_end>

00005eb0 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    5eb0:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    5eb2:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    5eb6:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    5eb8:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    5ebc:	00 c0       	rjmp	.+0      	; 0x5ebe <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5ebe:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    5ec0:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5ec2:	00 c0       	rjmp	.+0      	; 0x5ec4 <sync_hsync+0x14>
	call update_sound
    5ec4:	0e 94 b0 30 	call	0x6160	; 0x6160 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    5ec8:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5eca:	00 90 61 09 	lds	r0, 0x0961
	sub ZH,r0				
    5ece:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    5ed0:	e0 91 5b 09 	lds	r30, 0x095B
	cp ZL,ZH
    5ed4:	ef 17       	cp	r30, r31
	brsh no_render
    5ed6:	e0 f4       	brcc	.+56     	; 0x5f10 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    5ed8:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5eda:	00 90 61 09 	lds	r0, 0x0961
	sub ZH,r0				
    5ede:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    5ee0:	00 90 62 09 	lds	r0, 0x0962
	sub ZH,r0			
    5ee4:	f0 19       	sub	r31, r0
	cp ZL,ZH
    5ee6:	ef 17       	cp	r30, r31
	brlo no_render
    5ee8:	98 f0       	brcs	.+38     	; 0x5f10 <no_render>

	;push r1-r29
	ldi ZL,29
    5eea:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    5eec:	ff 27       	eor	r31, r31

00005eee <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    5eee:	00 80       	ld	r0, Z
	push r0
    5ef0:	0f 92       	push	r0
	dec ZL
    5ef2:	ea 95       	dec	r30
	brne push_loop	
    5ef4:	e1 f7       	brne	.-8      	; 0x5eee <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    5ef6:	0f e1       	ldi	r16, 0x1F	; 31
    5ef8:	0a 95       	dec	r16
    5efa:	f1 f7       	brne	.-4      	; 0x5ef8 <push_loop+0xa>
    5efc:	00 00       	nop
    5efe:	00 00       	nop

	call VMODE_FUNC		;TCNT1=0x234
    5f00:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    5f04:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    5f06:	ff 27       	eor	r31, r31

00005f08 <pop_loop>:
pop_loop:
	pop r0
    5f08:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    5f0a:	01 92       	st	Z+, r0
	cpi ZL,30
    5f0c:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    5f0e:	e0 f3       	brcs	.-8      	; 0x5f08 <pop_loop>

00005f10 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    5f10:	e0 91 5b 09 	lds	r30, 0x095B
	cpi ZL,0
    5f14:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    5f16:	09 f0       	breq	.+2      	; 0x5f1a <no_render+0xa>
	rjmp sync_end
    5f18:	3b c0       	rjmp	.+118    	; 0x5f90 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    5f1a:	2f 93       	push	r18
	push r19
    5f1c:	3f 93       	push	r19
	push r20
    5f1e:	4f 93       	push	r20
	push r21
    5f20:	5f 93       	push	r21
	push r22
    5f22:	6f 93       	push	r22
	push r23
    5f24:	7f 93       	push	r23
	push r24
    5f26:	8f 93       	push	r24
	push r25
    5f28:	9f 93       	push	r25
	push r26
    5f2a:	af 93       	push	r26
	push r27
    5f2c:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    5f2e:	78 94       	sei
	clr r1
    5f30:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    5f32:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    5f34:	e0 93 5a 09 	sts	0x095A, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5f38:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    5f3a:	e0 93 5b 09 	sts	0x095B, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    5f3e:	f0 91 63 09 	lds	r31, 0x0963
	sts first_render_line,ZH
    5f42:	f0 93 61 09 	sts	0x0961, r31
	
	lds ZH,render_lines_count_tmp
    5f46:	f0 91 64 09 	lds	r31, 0x0964
	sts render_lines_count,ZH
    5f4a:	f0 93 62 09 	sts	0x0962, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    5f4e:	e0 91 5d 09 	lds	r30, 0x095D
	lds ZH,pre_vsync_user_callback+1
    5f52:	f0 91 5e 09 	lds	r31, 0x095E
	cp  ZL,r1
    5f56:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5f58:	f1 05       	cpc	r31, r1
	breq .+2 
    5f5a:	09 f0       	breq	.+2      	; 0x5f5e <no_render+0x4e>
	icall
    5f5c:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    5f5e:	0e 94 75 31 	call	0x62ea	; 0x62ea <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    5f62:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    5f66:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <process_music>
	clr r1
    5f6a:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    5f6c:	e0 91 5f 09 	lds	r30, 0x095F
	lds ZH,post_vsync_user_callback+1
    5f70:	f0 91 60 09 	lds	r31, 0x0960
	cp  ZL,r1
    5f74:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5f76:	f1 05       	cpc	r31, r1
	breq .+2 
    5f78:	09 f0       	breq	.+2      	; 0x5f7c <no_render+0x6c>
	icall
    5f7a:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    5f7c:	bf 91       	pop	r27
	pop r26
    5f7e:	af 91       	pop	r26
	pop r25
    5f80:	9f 91       	pop	r25
	pop r24
    5f82:	8f 91       	pop	r24
	pop r23
    5f84:	7f 91       	pop	r23
	pop r22
    5f86:	6f 91       	pop	r22
	pop r21
    5f88:	5f 91       	pop	r21
	pop r20
    5f8a:	4f 91       	pop	r20
	pop r19
    5f8c:	3f 91       	pop	r19
	pop r18
    5f8e:	2f 91       	pop	r18

00005f90 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    5f90:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    5f92:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    5f94:	ff 91       	pop	r31
	pop ZL
    5f96:	ef 91       	pop	r30
	pop r1
    5f98:	1f 90       	pop	r1
	pop r0
    5f9a:	0f 90       	pop	r0
	reti
    5f9c:	18 95       	reti

00005f9e <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5f9e:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    5fa0:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5fa2:	00 c0       	rjmp	.+0      	; 0x5fa4 <hsync_pulse+0x6>
	call update_sound
    5fa4:	0e 94 b0 30 	call	0x6160	; 0x6160 <update_sound>

	lds ZL,sync_pulse
    5fa8:	e0 91 5b 09 	lds	r30, 0x095B
	dec ZL
    5fac:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5fae:	e0 93 5b 09 	sts	0x095B, r30

	ret
    5fb2:	08 95       	ret

00005fb4 <process_music>:
process_music:

	//call update_sound
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    5fb4:	e0 91 91 0b 	lds	r30, 0x0B91
	sbrc ZL,0
    5fb8:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    5fba:	0e 94 39 34 	call	0x6872	; 0x6872 <ProcessMusic>
#endif


	;Flip mix bank & set target bank adress for mixing
	lds r0,mix_bank
    5fbe:	00 90 8f 0b 	lds	r0, 0x0B8F
	tst r0
    5fc2:	00 20       	and	r0, r0
	brne set_hi_bank
    5fc4:	19 f4       	brne	.+6      	; 0x5fcc <set_hi_bank>
	ldi XL,lo8(mix_buf)
    5fc6:	a1 e8       	ldi	r26, 0x81	; 129
	ldi XH,hi8(mix_buf)
    5fc8:	b9 e0       	ldi	r27, 0x09	; 9
	rjmp end_set_bank
    5fca:	02 c0       	rjmp	.+4      	; 0x5fd0 <end_set_bank>

00005fcc <set_hi_bank>:
set_hi_bank:
	ldi XL,lo8(mix_buf+MIX_BANK_SIZE)
    5fcc:	a7 e8       	ldi	r26, 0x87	; 135
	ldi XH,hi8(mix_buf+MIX_BANK_SIZE)
    5fce:	ba e0       	ldi	r27, 0x0A	; 10

00005fd0 <end_set_bank>:
end_set_bank:

	ldi r18,1
    5fd0:	21 e0       	ldi	r18, 0x01	; 1
	eor	r0,r18
    5fd2:	02 26       	eor	r0, r18
	sts mix_bank,r0
    5fd4:	00 92 8f 0b 	sts	0x0B8F, r0
	
	ldi r18,2
    5fd8:	22 e0       	ldi	r18, 0x02	; 2
	sts mix_block,r18	
    5fda:	20 93 90 0b 	sts	0x0B90, r18


#if ENABLE_MIXER==1

	lds ZL,sound_enabled
    5fde:	e0 91 91 0b 	lds	r30, 0x0B91
	sbrs ZL,0
    5fe2:	e0 ff       	sbrs	r30, 0
	ret
    5fe4:	08 95       	ret

	push r2
    5fe6:	2f 92       	push	r2
	push r3
    5fe8:	3f 92       	push	r3
	push r4
    5fea:	4f 92       	push	r4
	push r5
    5fec:	5f 92       	push	r5
	push r6
    5fee:	6f 92       	push	r6
	push r7
    5ff0:	7f 92       	push	r7
	push r8
    5ff2:	8f 92       	push	r8
	push r9
    5ff4:	9f 92       	push	r9
	push r10
    5ff6:	af 92       	push	r10
	push r11
    5ff8:	bf 92       	push	r11
	push r12
    5ffa:	cf 92       	push	r12
	push r13
    5ffc:	df 92       	push	r13
	push r14
    5ffe:	ef 92       	push	r14
	push r15
    6000:	ff 92       	push	r15
	push r16
    6002:	0f 93       	push	r16
	push r17
    6004:	1f 93       	push	r17
	push r28
    6006:	cf 93       	push	r28
	push r29
    6008:	df 93       	push	r29
	;mix channels

	#if SOUND_CHANNEL_4_ENABLE == 1

		#if MIXER_CHAN4_TYPE == 0	
			lds r21,tr4_vol
    600a:	50 91 a4 0b 	lds	r21, 0x0BA4
			lds r22,tr4_barrel_lo
    600e:	60 91 a6 0b 	lds	r22, 0x0BA6
			lds r23,tr4_barrel_hi
    6012:	70 91 a7 0b 	lds	r23, 0x0BA7
			lds r24,tr4_divider
    6016:	80 91 a8 0b 	lds	r24, 0x0BA8





	lds r2,tr1_step_lo
    601a:	20 90 93 0b 	lds	r2, 0x0B93
	lds r3,tr1_step_hi
    601e:	30 90 94 0b 	lds	r3, 0x0B94
	lds r4,tr1_pos_lo
    6022:	40 90 96 0b 	lds	r4, 0x0B96
	lds r5,tr1_pos_hi 
    6026:	50 90 97 0b 	lds	r5, 0x0B97
	lds r6,tr1_pos_frac
    602a:	60 90 95 0b 	lds	r6, 0x0B95
	lds r17,tr1_vol
    602e:	10 91 92 0b 	lds	r17, 0x0B92
	
	lds r7,tr2_step_lo
    6032:	70 90 99 0b 	lds	r7, 0x0B99
	lds r8,tr2_step_hi
    6036:	80 90 9a 0b 	lds	r8, 0x0B9A
	lds r9,tr2_pos_frac
    603a:	90 90 9b 0b 	lds	r9, 0x0B9B
	lds r10,tr2_pos_lo
    603e:	a0 90 9c 0b 	lds	r10, 0x0B9C
	lds r11,tr2_pos_hi
    6042:	b0 90 9d 0b 	lds	r11, 0x0B9D
	lds r18,tr2_vol	
    6046:	20 91 98 0b 	lds	r18, 0x0B98

	lds r12,tr3_step_lo
    604a:	c0 90 9f 0b 	lds	r12, 0x0B9F
	lds r13,tr3_step_hi
    604e:	d0 90 a0 0b 	lds	r13, 0x0BA0
	lds r14,tr3_pos_lo
    6052:	e0 90 a2 0b 	lds	r14, 0x0BA2
	lds r15,tr3_pos_hi
    6056:	f0 90 a3 0b 	lds	r15, 0x0BA3
	lds r16,tr3_pos_frac
    605a:	00 91 a1 0b 	lds	r16, 0x0BA1
	lds r19,tr3_vol	
    605e:	30 91 9e 0b 	lds	r19, 0x0B9E



	

	ldi r25,0xff 
    6062:	9f ef       	ldi	r25, 0xFF	; 255

00006064 <mix_loop>:
		sbrc r28,7
		ser r29
	#endif

	;channel 1 - 12 cycles/sample
	add	r6,r2	;add step to fractional part of sample pos
    6064:	62 0c       	add	r6, r2
	adc r4,r3	;add step to low byte of sample pos
    6066:	43 1c       	adc	r4, r3
	movw ZL,r4
    6068:	f2 01       	movw	r30, r4
	lpm	r20,Z	;load sample
    606a:	44 91       	lpm	r20, Z
	mulsu r20,r17;(sample*mixing vol)
    606c:	41 03       	mulsu	r20, r17
	;clr r0
	sbc r0,r0	;sign extend
    606e:	00 08       	sbc	r0, r0

	#if MIXER_CHAN4_TYPE == 0 || SOUND_CHANNEL_4_ENABLE == 0
		mov r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6070:	c1 2d       	mov	r28, r1
		mov r29,r0	;ajust mix buffer msb
    6072:	d0 2d       	mov	r29, r0
		adc r29,r0	;ajust mix buffer msb		
	#endif

	#if SOUND_CHANNEL_2_ENABLE == 1
		;channel 2
		add	r9,r7	;add step to fractional part of sample pos
    6074:	97 0c       	add	r9, r7
		adc r10,r8	;add step to low byte of sample pos 
    6076:	a8 1c       	adc	r10, r8
		movw ZL,r10
    6078:	f5 01       	movw	r30, r10
		lpm	r20,Z	;load sample
    607a:	44 91       	lpm	r20, Z
		mulsu r20,r18;(sample*mixing vol)
    607c:	42 03       	mulsu	r20, r18
		;clr r0
		sbc r0,r0	;sign extend
    607e:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6080:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    6082:	d0 1d       	adc	r29, r0
	#endif 

	#if SOUND_CHANNEL_3_ENABLE == 1
		;channel 3
		add	r16,r12	;add step to fractional part of sample pos
    6084:	0c 0d       	add	r16, r12
		adc r14,r13	;add step to low byte of sample pos 
    6086:	ed 1c       	adc	r14, r13
		movw ZL,r14
    6088:	f7 01       	movw	r30, r14
		lpm	r20,Z	;load sample
    608a:	44 91       	lpm	r20, Z
		mulsu r20,r19;(sample*mixing vol)
    608c:	43 03       	mulsu	r20, r19
		;clr r0
		sbc r0,r0	;sign extend
    608e:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6090:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    6092:	d0 1d       	adc	r29, r0
	#endif

	#if MIXER_CHAN4_TYPE == 0 && SOUND_CHANNEL_4_ENABLE == 1	

		;channel 4 - 7/15 bit LFSR (12 cycles/24 cycles)
		dec r24
    6094:	8a 95       	dec	r24
		brpl no_shift
    6096:	6a f4       	brpl	.+26     	; 0x60b2 <no_shift>

		lds r20,tr4_params
    6098:	40 91 a5 0b 	lds	r20, 0x0BA5
		mov r24,r20
    609c:	84 2f       	mov	r24, r20
		lsr r24 ;keep bits7:1
    609e:	86 95       	lsr	r24

		mov r0,r22  ;copy barrel shifter
    60a0:	06 2e       	mov	r0, r22
		lsr r0
    60a2:	06 94       	lsr	r0
		eor r0,r22  ;xor bit0 and bit1
    60a4:	06 26       	eor	r0, r22
		bst r0,0
    60a6:	00 fa       	bst	r0, 0
		lsr r23
    60a8:	76 95       	lsr	r23
		ror r22	
    60aa:	67 95       	ror	r22
		bld r23,6	;15 bits mode
    60ac:	76 f9       	bld	r23, 6
		sbrs r20,0
    60ae:	40 ff       	sbrs	r20, 0
		bld r22,6	;7 bits mode
    60b0:	66 f9       	bld	r22, 6

000060b2 <no_shift>:

	no_shift:
		ldi r20,0x80 ;-128
    60b2:	40 e8       	ldi	r20, 0x80	; 128
		sbrc r22,0
    60b4:	60 fd       	sbrc	r22, 0
		ldi r20,0x7f ;+127
    60b6:	4f e7       	ldi	r20, 0x7F	; 127

		mulsu r20,r21;(sample*mixing vol)
    60b8:	45 03       	mulsu	r20, r21
		;clr r0
		sbc r0,r0	;sign extend
    60ba:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    60bc:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    60be:	d0 1d       	adc	r29, r0
	#endif

	;final processing

	;clip
	clr r0
    60c0:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    60c2:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    60c4:	d0 05       	cpc	r29, r0
	brlt .+2
    60c6:	0c f0       	brlt	.+2      	; 0x60ca <no_shift+0x18>
	ldi r28,127
    60c8:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    60ca:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    60cc:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    60ce:	d0 05       	cpc	r29, r0
	brge .+2
    60d0:	0c f4       	brge	.+2      	; 0x60d4 <no_shift+0x22>
	ldi r28,-128
    60d2:	c0 e8       	ldi	r28, 0x80	; 128


	subi r28,128	;convert to unsigned
    60d4:	c0 58       	subi	r28, 0x80	; 128
	st X+,r28
    60d6:	cd 93       	st	X+, r28


	dec r25
    60d8:	9a 95       	dec	r25
	breq .+2
    60da:	09 f0       	breq	.+2      	; 0x60de <no_shift+0x2c>
	rjmp mix_loop
    60dc:	c3 cf       	rjmp	.-122    	; 0x6064 <mix_loop>

	lds r20,mix_block
    60de:	40 91 90 0b 	lds	r20, 0x0B90
	dec r20
    60e2:	4a 95       	dec	r20
	sts mix_block,r20
    60e4:	40 93 90 0b 	sts	0x0B90, r20
	ldi r25,(MIX_BANK_SIZE-0xff)
    60e8:	97 e0       	ldi	r25, 0x07	; 7
	breq .+2
    60ea:	09 f0       	breq	.+2      	; 0x60ee <no_shift+0x3c>
	rjmp mix_loop
    60ec:	bb cf       	rjmp	.-138    	; 0x6064 <mix_loop>


	//save current positions
	sts tr1_pos_frac,r6
    60ee:	60 92 95 0b 	sts	0x0B95, r6
	sts tr1_pos_lo,r4	
    60f2:	40 92 96 0b 	sts	0x0B96, r4

	sts tr2_pos_frac,r9
    60f6:	90 92 9b 0b 	sts	0x0B9B, r9
	sts tr2_pos_lo,r10
    60fa:	a0 92 9c 0b 	sts	0x0B9C, r10

	sts tr3_pos_frac,r16
    60fe:	00 93 a1 0b 	sts	0x0BA1, r16
	sts tr3_pos_lo,r14
    6102:	e0 92 a2 0b 	sts	0x0BA2, r14

#if MIXER_CHAN4_TYPE == 0
	sts tr4_barrel_lo,r22
    6106:	60 93 a6 0b 	sts	0x0BA6, r22
	sts tr4_barrel_hi,r23
    610a:	70 93 a7 0b 	sts	0x0BA7, r23
	sts tr4_divider,r24
    610e:	80 93 a8 0b 	sts	0x0BA8, r24
	sts tr4_pos_hi,r23
	sts tr4_pos_frac,r24

#endif

	pop r29
    6112:	df 91       	pop	r29
	pop r28
    6114:	cf 91       	pop	r28
	pop r17
    6116:	1f 91       	pop	r17
	pop r16
    6118:	0f 91       	pop	r16
	pop r15
    611a:	ff 90       	pop	r15
	pop r14
    611c:	ef 90       	pop	r14
	pop r13
    611e:	df 90       	pop	r13
	pop r12
    6120:	cf 90       	pop	r12
	pop r11
    6122:	bf 90       	pop	r11
	pop r10
    6124:	af 90       	pop	r10
	pop r9
    6126:	9f 90       	pop	r9
	pop r8
    6128:	8f 90       	pop	r8
	pop r7
    612a:	7f 90       	pop	r7
	pop r6
    612c:	6f 90       	pop	r6
	pop r5
    612e:	5f 90       	pop	r5
	pop r4
    6130:	4f 90       	pop	r4
	pop r3
    6132:	3f 90       	pop	r3
	pop r2
    6134:	2f 90       	pop	r2

#endif // ENABLE_MIXER==1

	ret
    6136:	08 95       	ret

00006138 <update_sound_buffer_fast>:
; NO MIDI
; Destroys: Z,r16,r17
; Cycles: 24
;**********************************
update_sound_buffer_fast:
	lds ZL,mix_pos
    6138:	e0 91 8d 0b 	lds	r30, 0x0B8D
	lds ZH,mix_pos+1
    613c:	f0 91 8e 0b 	lds	r31, 0x0B8E
			
	ld r16,Z+		;load next sample
    6140:	01 91       	ld	r16, Z+
	;subi r16,128	;convert to unsigned
	nop
    6142:	00 00       	nop
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    6144:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    6148:	0b e0       	ldi	r16, 0x0B	; 11
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    614a:	ed 38       	cpi	r30, 0x8D	; 141
	cpc ZH,r16
    614c:	f0 07       	cpc	r31, r16
	;12

	ldi r16,lo8(mix_buf)
    614e:	01 e8       	ldi	r16, 0x81	; 129
	ldi r17,hi8(mix_buf)
    6150:	19 e0       	ldi	r17, 0x09	; 9
	brlo .+2
    6152:	08 f0       	brcs	.+2      	; 0x6156 <update_sound_buffer_fast+0x1e>
	movw ZL,r16
    6154:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    6156:	e0 93 8d 0b 	sts	0x0B8D, r30
	sts mix_pos+1,ZH		
    615a:	f0 93 8e 0b 	sts	0x0B8E, r31

	ret ;20+4=24
    615e:	08 95       	ret

00006160 <update_sound>:
; Destroys: ZH
; Cycles: VSYNC = 68
;         HSYNC = 135
;***********************
update_sound:
	push r16
    6160:	0f 93       	push	r16
	push r17
    6162:	1f 93       	push	r17
	push r18
    6164:	2f 93       	push	r18
	push ZL
    6166:	ef 93       	push	r30

	lds ZL,mix_pos
    6168:	e0 91 8d 0b 	lds	r30, 0x0B8D
	lds ZH,mix_pos+1
    616c:	f0 91 8e 0b 	lds	r31, 0x0B8E
			
	ld r16,Z+
    6170:	01 91       	ld	r16, Z+
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    6172:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    6176:	0b e0       	ldi	r16, 0x0B	; 11
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    6178:	ed 38       	cpi	r30, 0x8D	; 141
	cpc ZH,r16
    617a:	f0 07       	cpc	r31, r16

	ldi r16,lo8(mix_buf)
    617c:	01 e8       	ldi	r16, 0x81	; 129
	ldi r17,hi8(mix_buf)
    617e:	19 e0       	ldi	r17, 0x09	; 9

	brlo .+2
    6180:	08 f0       	brcs	.+2      	; 0x6184 <update_sound+0x24>
	movw ZL,r16
    6182:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    6184:	e0 93 8d 0b 	sts	0x0B8D, r30
	sts mix_pos+1,ZH	
    6188:	f0 93 8e 0b 	sts	0x0B8E, r31
	rjmp .
	rjmp .
	rjmp .
#else
	//alignment cycles
	ldi ZL,8
    618c:	e8 e0       	ldi	r30, 0x08	; 8
	dec ZL
    618e:	ea 95       	dec	r30
	brne .-4
    6190:	f1 f7       	brne	.-4      	; 0x618e <update_sound+0x2e>
#endif

	pop ZL
    6192:	ef 91       	pop	r30
	pop r18
    6194:	2f 91       	pop	r18
	pop r17
    6196:	1f 91       	pop	r17
	pop r16
    6198:	0f 91       	pop	r16

	;*** Video sync update ***
	sbrc ZL,0								;pre-eq/post-eq sync
    619a:	e0 fd       	sbrc	r30, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    619c:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,0								
    619e:	e0 ff       	sbrs	r30, 0
	rjmp .+2
    61a0:	01 c0       	rjmp	.+2      	; 0x61a4 <update_sound+0x44>
	ret
    61a2:	08 95       	ret

	ldi ZH,20
    61a4:	f4 e1       	ldi	r31, 0x14	; 20
	dec ZH
    61a6:	fa 95       	dec	r31
	brne .-4
    61a8:	f1 f7       	brne	.-4      	; 0x61a6 <update_sound+0x46>
	rjmp .
    61aa:	00 c0       	rjmp	.+0      	; 0x61ac <update_sound+0x4c>

	;*** Video sync update ***
	sbrc ZL,1								;hsync
    61ac:	e1 fd       	sbrc	r30, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    61ae:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,1								
    61b0:	e1 ff       	sbrs	r30, 1
	rjmp .
    61b2:	00 c0       	rjmp	.+0      	; 0x61b4 <update_sound+0x54>

	ret 
    61b4:	08 95       	ret

000061b6 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    61b6:	80 93 4b 09 	sts	0x094B, r24
	sts sprites_tile_banks+1,r25
    61ba:	90 93 4c 09 	sts	0x094C, r25
	ret
    61be:	08 95       	ret

000061c0 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    61c0:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    61c2:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    61c4:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    61c6:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    61c8:	61 e1       	ldi	r22, 0x11	; 17

000061ca <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    61ca:	6d 93       	st	X+, r22
	sbiw r30,1
    61cc:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    61ce:	e9 f7       	brne	.-6      	; 0x61ca <fill_vram_loop>

	clr r1
    61d0:	11 24       	eor	r1, r1

	ret
    61d2:	08 95       	ret

000061d4 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    61d4:	50 91 55 09 	lds	r21, 0x0955
	add r20,21
    61d8:	45 0f       	add	r20, r21
	rjmp SetTile	
    61da:	00 c0       	rjmp	.+0      	; 0x61dc <SetTile>

000061dc <SetTile>:

	ret

#else

	clr r25
    61dc:	99 27       	eor	r25, r25
	clr r23	
    61de:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    61e0:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    61e2:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    61e4:	08 0e       	add	r0, r24
	adc r1,r25
    61e6:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    61e8:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    61ea:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    61ec:	a0 0d       	add	r26, r0
	adc XH,r1
    61ee:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    61f0:	4f 5e       	subi	r20, 0xEF	; 239
	st X,r20
    61f2:	4c 93       	st	X, r20

	clr r1
    61f4:	11 24       	eor	r1, r1

	ret
    61f6:	08 95       	ret

000061f8 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    61f8:	80 93 55 09 	sts	0x0955, r24
	ret
    61fc:	08 95       	ret

000061fe <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    61fe:	80 93 53 09 	sts	0x0953, r24
	sts tile_table_hi,r25	
    6202:	90 93 54 09 	sts	0x0954, r25
	ret
    6206:	08 95       	ret

00006208 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6208:	80 91 5c 09 	lds	r24, 0x095C
	andi r24,SYNC_FLAG_VSYNC
    620c:	81 70       	andi	r24, 0x01	; 1
	ret
    620e:	08 95       	ret

00006210 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6210:	20 91 5c 09 	lds	r18, 0x095C
	andi r18,~SYNC_FLAG_VSYNC
    6214:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    6216:	20 93 5c 09 	sts	0x095C, r18
	ret
    621a:	08 95       	ret

0000621c <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    621c:	88 23       	and	r24, r24
	brne rj_p2
    621e:	29 f4       	brne	.+10     	; 0x622a <rj_p2>
		
	lds r24,joypad1_status_lo
    6220:	80 91 65 09 	lds	r24, 0x0965
	lds r25,joypad1_status_lo+1
    6224:	90 91 66 09 	lds	r25, 0x0966
	ret
    6228:	08 95       	ret

0000622a <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    622a:	80 91 69 09 	lds	r24, 0x0969
	lds r25,joypad2_status_lo+1	
    622e:	90 91 6a 09 	lds	r25, 0x096A

	ret
    6232:	08 95       	ret

00006234 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    6234:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    6236:	7a 95       	dec	r23
	brne .-4 ;~1 us
    6238:	f1 f7       	brne	.-4      	; 0x6236 <WaitUs+0x2>
	nop
    623a:	00 00       	nop
	sbiw r24,1
    623c:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    623e:	d1 f7       	brne	.-12     	; 0x6234 <WaitUs>

	ret
    6240:	08 95       	ret

00006242 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6242:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    6244:	fe cf       	rjmp	.-4      	; 0x6242 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6246:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6248:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    624a:	60 bd       	out	0x20, r22	; 32
   cli
    624c:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    624e:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6250:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6252:	78 94       	sei
   ret
    6254:	08 95       	ret

00006256 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6256:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    6258:	fe cf       	rjmp	.-4      	; 0x6256 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    625a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    625c:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    625e:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    6260:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    6262:	80 b5       	in	r24, 0x20	; 32
   sei
    6264:	78 94       	sei
   ret
    6266:	08 95       	ret

00006268 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    6268:	98 e0       	ldi	r25, 0x08	; 8
    626a:	88 e1       	ldi	r24, 0x18	; 24
    626c:	0f b6       	in	r0, 0x3f	; 63
    626e:	f8 94       	cli
    6270:	a8 95       	wdr
    6272:	80 93 60 00 	sts	0x0060, r24
    6276:	0f be       	out	0x3f, r0	; 63
    6278:	90 93 60 00 	sts	0x0060, r25
	while(1);
    627c:	ff cf       	rjmp	.-2      	; 0x627c <SoftReset+0x14>

0000627e <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    627e:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    6280:	c8 95       	lpm
    6282:	c8 95       	lpm
		Wait200ns();
    6284:	c8 95       	lpm
    6286:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    6288:	12 98       	cbi	0x02, 2	; 2
    628a:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    628c:	80 e0       	ldi	r24, 0x00	; 0
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	20 e0       	ldi	r18, 0x00	; 0
    6292:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    6294:	36 95       	lsr	r19
    6296:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    6298:	96 95       	lsr	r25
    629a:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    629c:	c8 95       	lpm
    629e:	c8 95       	lpm
			Wait200ns();
    62a0:	c8 95       	lpm
    62a2:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    62a4:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    62a6:	00 9b       	sbis	0x00, 0	; 0
    62a8:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    62aa:	01 9b       	sbis	0x00, 1	; 0
    62ac:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    62ae:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    62b0:	c8 95       	lpm
    62b2:	c8 95       	lpm
			Wait200ns();
    62b4:	c8 95       	lpm
    62b6:	c8 95       	lpm
    62b8:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    62ba:	61 f7       	brne	.-40     	; 0x6294 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    62bc:	30 93 66 09 	sts	0x0966, r19
    62c0:	20 93 65 09 	sts	0x0965, r18
		joypad2_status_lo=p2ButtonsLo;
    62c4:	90 93 6a 09 	sts	0x096A, r25
    62c8:	80 93 69 09 	sts	0x0969, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    62cc:	80 91 65 09 	lds	r24, 0x0965
    62d0:	90 91 66 09 	lds	r25, 0x0966
    62d4:	0f 97       	sbiw	r24, 0x0f	; 15
    62d6:	31 f0       	breq	.+12     	; 0x62e4 <ReadButtons+0x66>
    62d8:	80 91 69 09 	lds	r24, 0x0969
    62dc:	90 91 6a 09 	lds	r25, 0x096A
    62e0:	0f 97       	sbiw	r24, 0x0f	; 15
    62e2:	11 f4       	brne	.+4      	; 0x62e8 <ReadButtons+0x6a>
		SoftReset();
    62e4:	0e 94 34 31 	call	0x6268	; 0x6268 <SoftReset>
    62e8:	08 95       	ret

000062ea <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    62ea:	10 92 bc 0b 	sts	0x0BBC, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    62ee:	00 99       	sbic	0x00, 0	; 0
    62f0:	03 c0       	rjmp	.+6      	; 0x62f8 <ReadControllers+0xe>
    62f2:	81 e0       	ldi	r24, 0x01	; 1
    62f4:	80 93 bc 0b 	sts	0x0BBC, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    62f8:	01 99       	sbic	0x00, 1	; 0
    62fa:	05 c0       	rjmp	.+10     	; 0x6306 <ReadControllers+0x1c>
    62fc:	80 91 bc 0b 	lds	r24, 0x0BBC
    6300:	82 60       	ori	r24, 0x02	; 2
    6302:	80 93 bc 0b 	sts	0x0BBC, r24
			
	//read the standard buttons
	ReadButtons();
    6306:	0c 94 3f 31 	jmp	0x627e	; 0x627e <ReadButtons>

0000630a <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    630a:	cf 93       	push	r28
    630c:	df 93       	push	r29
    630e:	c0 e0       	ldi	r28, 0x00	; 0
    6310:	d0 e0       	ldi	r29, 0x00	; 0
    6312:	fe 01       	movw	r30, r28
    6314:	e0 55       	subi	r30, 0x50	; 80
    6316:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    6318:	64 91       	lpm	r22, Z
    631a:	ce 01       	movw	r24, r28
    631c:	0e 94 21 31 	call	0x6242	; 0x6242 <WriteEeprom>
    6320:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    6322:	c0 32       	cpi	r28, 0x20	; 32
    6324:	d1 05       	cpc	r29, r1
    6326:	a9 f7       	brne	.-22     	; 0x6312 <FormatEeprom+0x8>
    6328:	c0 e2       	ldi	r28, 0x20	; 32
    632a:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    632c:	6f ef       	ldi	r22, 0xFF	; 255
    632e:	ce 01       	movw	r24, r28
    6330:	0e 94 21 31 	call	0x6242	; 0x6242 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    6334:	6f ef       	ldi	r22, 0xFF	; 255
    6336:	ce 01       	movw	r24, r28
    6338:	01 96       	adiw	r24, 0x01	; 1
    633a:	0e 94 21 31 	call	0x6242	; 0x6242 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    633e:	a0 96       	adiw	r28, 0x20	; 32
    6340:	c1 15       	cp	r28, r1
    6342:	88 e0       	ldi	r24, 0x08	; 8
    6344:	d8 07       	cpc	r29, r24
    6346:	91 f7       	brne	.-28     	; 0x632c <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    6348:	df 91       	pop	r29
    634a:	cf 91       	pop	r28
    634c:	08 95       	ret

0000634e <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    634e:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    6350:	80 e0       	ldi	r24, 0x00	; 0
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	0e 94 2b 31 	call	0x6256	; 0x6256 <ReadEeprom>
    6358:	c8 2f       	mov	r28, r24
    635a:	81 e0       	ldi	r24, 0x01	; 1
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	0e 94 2b 31 	call	0x6256	; 0x6256 <ReadEeprom>
    6362:	28 2f       	mov	r18, r24
    6364:	30 e0       	ldi	r19, 0x00	; 0
    6366:	32 2f       	mov	r19, r18
    6368:	22 27       	eor	r18, r18
    636a:	2c 0f       	add	r18, r28
    636c:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    636e:	81 e0       	ldi	r24, 0x01	; 1
    6370:	2a 35       	cpi	r18, 0x5A	; 90
    6372:	35 45       	sbci	r19, 0x55	; 85
    6374:	09 f0       	breq	.+2      	; 0x6378 <isEepromFormatted+0x2a>
    6376:	80 e0       	ldi	r24, 0x00	; 0
}
    6378:	cf 91       	pop	r28
    637a:	08 95       	ret

0000637c <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    637c:	cf 92       	push	r12
    637e:	df 92       	push	r13
    6380:	ef 92       	push	r14
    6382:	ff 92       	push	r15
    6384:	0f 93       	push	r16
    6386:	1f 93       	push	r17
    6388:	cf 93       	push	r28
    638a:	df 93       	push	r29
    638c:	1f 92       	push	r1
    638e:	cd b7       	in	r28, 0x3d	; 61
    6390:	de b7       	in	r29, 0x3e	; 62
    6392:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    6394:	0e 94 a7 31 	call	0x634e	; 0x634e <isEepromFormatted>
    6398:	88 23       	and	r24, r24
    639a:	09 f4       	brne	.+2      	; 0x639e <EepromWriteBlock+0x22>
    639c:	4d c0       	rjmp	.+154    	; 0x6438 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    639e:	f6 01       	movw	r30, r12
    63a0:	80 81       	ld	r24, Z
    63a2:	91 81       	ldd	r25, Z+1	; 0x01
    63a4:	8f 3f       	cpi	r24, 0xFF	; 255
    63a6:	ff ef       	ldi	r31, 0xFF	; 255
    63a8:	9f 07       	cpc	r25, r31
    63aa:	09 f4       	brne	.+2      	; 0x63ae <EepromWriteBlock+0x32>
    63ac:	47 c0       	rjmp	.+142    	; 0x643c <EepromWriteBlock+0xc0>
    63ae:	8a 35       	cpi	r24, 0x5A	; 90
    63b0:	95 45       	sbci	r25, 0x55	; 85
    63b2:	09 f4       	brne	.+2      	; 0x63b6 <EepromWriteBlock+0x3a>
    63b4:	43 c0       	rjmp	.+134    	; 0x643c <EepromWriteBlock+0xc0>
    63b6:	00 e2       	ldi	r16, 0x20	; 32
    63b8:	10 e0       	ldi	r17, 0x00	; 0
    63ba:	f1 2c       	mov	r15, r1
    63bc:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    63be:	c8 01       	movw	r24, r16
    63c0:	49 83       	std	Y+1, r20	; 0x01
    63c2:	0e 94 2b 31 	call	0x6256	; 0x6256 <ReadEeprom>
    63c6:	e8 2e       	mov	r14, r24
    63c8:	c8 01       	movw	r24, r16
    63ca:	01 96       	adiw	r24, 0x01	; 1
    63cc:	0e 94 2b 31 	call	0x6256	; 0x6256 <ReadEeprom>
    63d0:	28 2f       	mov	r18, r24
    63d2:	30 e0       	ldi	r19, 0x00	; 0
    63d4:	32 2f       	mov	r19, r18
    63d6:	22 27       	eor	r18, r18
    63d8:	c9 01       	movw	r24, r18
    63da:	8e 0d       	add	r24, r14
    63dc:	91 1d       	adc	r25, r1
		if(id==block->id){
    63de:	f6 01       	movw	r30, r12
    63e0:	20 81       	ld	r18, Z
    63e2:	31 81       	ldd	r19, Z+1	; 0x01
    63e4:	49 81       	ldd	r20, Y+1	; 0x01
    63e6:	82 17       	cp	r24, r18
    63e8:	93 07       	cpc	r25, r19
    63ea:	19 f4       	brne	.+6      	; 0x63f2 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    63ec:	ff 20       	and	r15, r15
    63ee:	89 f0       	breq	.+34     	; 0x6412 <EepromWriteBlock+0x96>
    63f0:	0c c0       	rjmp	.+24     	; 0x640a <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    63f2:	01 96       	adiw	r24, 0x01	; 1
    63f4:	19 f4       	brne	.+6      	; 0x63fc <EepromWriteBlock+0x80>
    63f6:	f1 10       	cpse	r15, r1
    63f8:	01 c0       	rjmp	.+2      	; 0x63fc <EepromWriteBlock+0x80>
    63fa:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    63fc:	4f 5f       	subi	r20, 0xFF	; 255
    63fe:	00 5e       	subi	r16, 0xE0	; 224
    6400:	1f 4f       	sbci	r17, 0xFF	; 255
    6402:	40 34       	cpi	r20, 0x40	; 64
    6404:	e1 f6       	brne	.-72     	; 0x63be <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    6406:	ff 20       	and	r15, r15
    6408:	d9 f0       	breq	.+54     	; 0x6440 <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    640a:	20 e2       	ldi	r18, 0x20	; 32
    640c:	f2 9e       	mul	r15, r18
    640e:	80 01       	movw	r16, r0
    6410:	11 24       	eor	r1, r1
    6412:	76 01       	movw	r14, r12
    6414:	80 e2       	ldi	r24, 0x20	; 32
    6416:	e8 0e       	add	r14, r24
    6418:	f1 1c       	adc	r15, r1
    641a:	0c 19       	sub	r16, r12
    641c:	1d 09       	sbc	r17, r13
    641e:	c6 01       	movw	r24, r12
    6420:	80 0f       	add	r24, r16
    6422:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    6424:	f6 01       	movw	r30, r12
    6426:	61 91       	ld	r22, Z+
    6428:	6f 01       	movw	r12, r30
    642a:	0e 94 21 31 	call	0x6242	; 0x6242 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    642e:	ce 14       	cp	r12, r14
    6430:	df 04       	cpc	r13, r15
    6432:	a9 f7       	brne	.-22     	; 0x641e <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    6434:	80 e0       	ldi	r24, 0x00	; 0
    6436:	05 c0       	rjmp	.+10     	; 0x6442 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    6438:	84 e0       	ldi	r24, 0x04	; 4
    643a:	03 c0       	rjmp	.+6      	; 0x6442 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    643c:	81 e0       	ldi	r24, 0x01	; 1
    643e:	01 c0       	rjmp	.+2      	; 0x6442 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    6440:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    6442:	0f 90       	pop	r0
    6444:	df 91       	pop	r29
    6446:	cf 91       	pop	r28
    6448:	1f 91       	pop	r17
    644a:	0f 91       	pop	r16
    644c:	ff 90       	pop	r15
    644e:	ef 90       	pop	r14
    6450:	df 90       	pop	r13
    6452:	cf 90       	pop	r12
    6454:	08 95       	ret

00006456 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    6456:	df 92       	push	r13
    6458:	ef 92       	push	r14
    645a:	ff 92       	push	r15
    645c:	0f 93       	push	r16
    645e:	1f 93       	push	r17
    6460:	cf 93       	push	r28
    6462:	df 93       	push	r29
    6464:	7c 01       	movw	r14, r24
    6466:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    6468:	0e 94 a7 31 	call	0x634e	; 0x634e <isEepromFormatted>
    646c:	88 23       	and	r24, r24
    646e:	89 f1       	breq	.+98     	; 0x64d2 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    6470:	8f ef       	ldi	r24, 0xFF	; 255
    6472:	e8 16       	cp	r14, r24
    6474:	f8 06       	cpc	r15, r24
    6476:	79 f1       	breq	.+94     	; 0x64d6 <EepromReadBlock+0x80>
    6478:	00 e0       	ldi	r16, 0x00	; 0
    647a:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    647c:	c8 01       	movw	r24, r16
    647e:	0e 94 2b 31 	call	0x6256	; 0x6256 <ReadEeprom>
    6482:	d8 2e       	mov	r13, r24
    6484:	c8 01       	movw	r24, r16
    6486:	01 96       	adiw	r24, 0x01	; 1
    6488:	0e 94 2b 31 	call	0x6256	; 0x6256 <ReadEeprom>
    648c:	28 2f       	mov	r18, r24
    648e:	30 e0       	ldi	r19, 0x00	; 0
    6490:	32 2f       	mov	r19, r18
    6492:	22 27       	eor	r18, r18
    6494:	2d 0d       	add	r18, r13
    6496:	31 1d       	adc	r19, r1
		if(id==blockId){
    6498:	2e 15       	cp	r18, r14
    649a:	3f 05       	cpc	r19, r15
    649c:	39 f4       	brne	.+14     	; 0x64ac <EepromReadBlock+0x56>
    649e:	7e 01       	movw	r14, r28
    64a0:	80 e2       	ldi	r24, 0x20	; 32
    64a2:	e8 0e       	add	r14, r24
    64a4:	f1 1c       	adc	r15, r1
    64a6:	0c 1b       	sub	r16, r28
    64a8:	1d 0b       	sbc	r17, r29
    64aa:	08 c0       	rjmp	.+16     	; 0x64bc <EepromReadBlock+0x66>
    64ac:	00 5e       	subi	r16, 0xE0	; 224
    64ae:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    64b0:	01 15       	cp	r16, r1
    64b2:	84 e0       	ldi	r24, 0x04	; 4
    64b4:	18 07       	cpc	r17, r24
    64b6:	11 f7       	brne	.-60     	; 0x647c <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    64b8:	83 e0       	ldi	r24, 0x03	; 3
    64ba:	0e c0       	rjmp	.+28     	; 0x64d8 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    64bc:	ce 01       	movw	r24, r28
    64be:	80 0f       	add	r24, r16
    64c0:	91 1f       	adc	r25, r17
    64c2:	0e 94 2b 31 	call	0x6256	; 0x6256 <ReadEeprom>
    64c6:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    64c8:	ce 15       	cp	r28, r14
    64ca:	df 05       	cpc	r29, r15
    64cc:	b9 f7       	brne	.-18     	; 0x64bc <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    64ce:	80 e0       	ldi	r24, 0x00	; 0
    64d0:	03 c0       	rjmp	.+6      	; 0x64d8 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    64d2:	84 e0       	ldi	r24, 0x04	; 4
    64d4:	01 c0       	rjmp	.+2      	; 0x64d8 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    64d6:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    64d8:	df 91       	pop	r29
    64da:	cf 91       	pop	r28
    64dc:	1f 91       	pop	r17
    64de:	0f 91       	pop	r16
    64e0:	ff 90       	pop	r15
    64e2:	ef 90       	pop	r14
    64e4:	df 90       	pop	r13
    64e6:	08 95       	ret

000064e8 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    64e8:	fc 01       	movw	r30, r24
    64ea:	45 87       	std	Z+13, r20	; 0x0d
    64ec:	08 95       	ret

000064ee <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    64ee:	e2 e9       	ldi	r30, 0x92	; 146
    64f0:	fb e0       	ldi	r31, 0x0B	; 11
    64f2:	81 e0       	ldi	r24, 0x01	; 1
    64f4:	91 e0       	ldi	r25, 0x01	; 1
    64f6:	95 8b       	std	Z+21, r25	; 0x15
    64f8:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    64fa:	43 8b       	std	Z+19, r20	; 0x13
    64fc:	08 95       	ret

000064fe <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    64fe:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    6500:	90 81       	ld	r25, Z
    6502:	9f 75       	andi	r25, 0x5F	; 95
    6504:	90 83       	st	Z, r25
    6506:	08 95       	ret

00006508 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    6508:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    650a:	90 81       	ld	r25, Z
    650c:	90 64       	ori	r25, 0x40	; 64
    650e:	90 83       	st	Z, r25
    6510:	08 95       	ret

00006512 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    6512:	fc 01       	movw	r30, r24
    6514:	44 87       	std	Z+12, r20	; 0x0c
    6516:	08 95       	ret

00006518 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    6518:	fc 01       	movw	r30, r24
    651a:	47 83       	std	Z+7, r20	; 0x07
    651c:	08 95       	ret

0000651e <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    651e:	fc 01       	movw	r30, r24
    6520:	40 87       	std	Z+8, r20	; 0x08
    6522:	08 95       	ret

00006524 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    6524:	1f 93       	push	r17
    6526:	cf 93       	push	r28
    6528:	df 93       	push	r29
    652a:	ec 01       	movw	r28, r24
    652c:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    652e:	29 81       	ldd	r18, Y+1	; 0x01
    6530:	30 e0       	ldi	r19, 0x00	; 0
    6532:	f9 01       	movw	r30, r18
    6534:	ee 0f       	add	r30, r30
    6536:	ff 1f       	adc	r31, r31
    6538:	e8 5f       	subi	r30, 0xF8	; 248
    653a:	f1 49       	sbci	r31, 0x91	; 145
    653c:	65 91       	lpm	r22, Z+
    653e:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    6540:	f9 01       	movw	r30, r18
    6542:	e4 0f       	add	r30, r20
    6544:	f1 1d       	adc	r31, r1
    6546:	47 fd       	sbrc	r20, 7
    6548:	fa 95       	dec	r31
    654a:	ee 0f       	add	r30, r30
    654c:	ff 1f       	adc	r31, r31
    654e:	e8 5f       	subi	r30, 0xF8	; 248
    6550:	f1 49       	sbci	r31, 0x91	; 145
    6552:	85 91       	lpm	r24, Z+
    6554:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    6556:	86 1b       	sub	r24, r22
    6558:	97 0b       	sbc	r25, r23
    655a:	60 91 c4 0b 	lds	r22, 0x0BC4
    655e:	70 e0       	ldi	r23, 0x00	; 0
    6560:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
	if(delta==0)delta++;
    6564:	61 15       	cp	r22, r1
    6566:	71 05       	cpc	r23, r1
    6568:	11 f4       	brne	.+4      	; 0x656e <PatchCommand11+0x4a>
    656a:	61 e0       	ldi	r22, 0x01	; 1
    656c:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    656e:	86 e0       	ldi	r24, 0x06	; 6
    6570:	18 9f       	mul	r17, r24
    6572:	f0 01       	movw	r30, r0
    6574:	11 24       	eor	r1, r1
    6576:	ee 56       	subi	r30, 0x6E	; 110
    6578:	f4 4f       	sbci	r31, 0xF4	; 244
    657a:	81 81       	ldd	r24, Z+1	; 0x01
    657c:	92 81       	ldd	r25, Z+2	; 0x02
    657e:	86 0f       	add	r24, r22
    6580:	97 1f       	adc	r25, r23
    6582:	92 83       	std	Z+2, r25	; 0x02
    6584:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    6586:	7b 83       	std	Y+3, r23	; 0x03
    6588:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    658a:	88 81       	ld	r24, Y
    658c:	88 60       	ori	r24, 0x08	; 8
    658e:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    6590:	89 81       	ldd	r24, Y+1	; 0x01
    6592:	48 0f       	add	r20, r24
    6594:	4c 83       	std	Y+4, r20	; 0x04
}
    6596:	df 91       	pop	r29
    6598:	cf 91       	pop	r28
    659a:	1f 91       	pop	r17
    659c:	08 95       	ret

0000659e <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    659e:	40 93 c4 0b 	sts	0x0BC4, r20
    65a2:	08 95       	ret

000065a4 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    65a4:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    65a6:	64 2f       	mov	r22, r20
    65a8:	0c 94 7a 36 	jmp	0x6cf4	; 0x6cf4 <SetMixerWave>

000065ac <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    65ac:	fc 01       	movw	r30, r24
    65ae:	86 2f       	mov	r24, r22
	track->note+=param;
    65b0:	91 81       	ldd	r25, Z+1	; 0x01
    65b2:	64 2f       	mov	r22, r20
    65b4:	69 0f       	add	r22, r25
    65b6:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    65b8:	0c 94 63 36 	jmp	0x6cc6	; 0x6cc6 <SetMixerNote>

000065bc <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    65bc:	fc 01       	movw	r30, r24
    65be:	86 2f       	mov	r24, r22
	track->note-=param;
    65c0:	91 81       	ldd	r25, Z+1	; 0x01
    65c2:	69 2f       	mov	r22, r25
    65c4:	64 1b       	sub	r22, r20
    65c6:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    65c8:	0c 94 63 36 	jmp	0x6cc6	; 0x6cc6 <SetMixerNote>

000065cc <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    65cc:	0f 93       	push	r16
    65ce:	1f 93       	push	r17
    65d0:	cf 93       	push	r28
    65d2:	df 93       	push	r29
    65d4:	1f 92       	push	r1
    65d6:	cd b7       	in	r28, 0x3d	; 61
    65d8:	de b7       	in	r29, 0x3e	; 62
    65da:	8c 01       	movw	r16, r24
    65dc:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    65de:	64 2f       	mov	r22, r20
    65e0:	49 83       	std	Y+1, r20	; 0x01
    65e2:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <SetMixerNote>
	track->note=param;
    65e6:	49 81       	ldd	r20, Y+1	; 0x01
    65e8:	f8 01       	movw	r30, r16
    65ea:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    65ec:	80 81       	ld	r24, Z
    65ee:	87 7f       	andi	r24, 0xF7	; 247
    65f0:	80 83       	st	Z, r24
}
    65f2:	0f 90       	pop	r0
    65f4:	df 91       	pop	r29
    65f6:	cf 91       	pop	r28
    65f8:	1f 91       	pop	r17
    65fa:	0f 91       	pop	r16
    65fc:	08 95       	ret

000065fe <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    65fe:	90 93 1a 0c 	sts	0x0C1A, r25
    6602:	80 93 19 0c 	sts	0x0C19, r24

	masterVolume=DEFAULT_MASTER_VOL;
    6606:	8f e6       	ldi	r24, 0x6F	; 111
    6608:	80 93 1c 0c 	sts	0x0C1C, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    660c:	10 92 80 09 	sts	0x0980, r1
    6610:	ed ec       	ldi	r30, 0xCD	; 205
    6612:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    6614:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    6616:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    6618:	28 e1       	ldi	r18, 0x18	; 24
    661a:	df 01       	movw	r26, r30
    661c:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    661e:	8c 93       	st	X, r24
    6620:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    6622:	1c 92       	st	X, r1
    6624:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    6626:	9c 93       	st	X, r25
    6628:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    662a:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    662c:	10 82       	st	Z, r1
    662e:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    6630:	2c 93       	st	X, r18
    6632:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    6634:	8c 93       	st	X, r24
    6636:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    6638:	3c e0       	ldi	r19, 0x0C	; 12
    663a:	e5 32       	cpi	r30, 0x25	; 37
    663c:	f3 07       	cpc	r31, r19
    663e:	69 f7       	brne	.-38     	; 0x661a <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    6640:	08 95       	ret

00006642 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    6642:	ef eb       	ldi	r30, 0xBF	; 191
    6644:	fb e0       	ldi	r31, 0x0B	; 11
    6646:	8a ef       	ldi	r24, 0xFA	; 250
    6648:	85 87       	std	Z+13, r24	; 0x0d
    664a:	83 a3       	std	Z+35, r24	; 0x23
    664c:	81 af       	std	Z+57, r24	; 0x39
    664e:	80 93 0e 0c 	sts	0x0C0E, r24
	}

	playSong=false;
    6652:	10 92 80 09 	sts	0x0980, r1
    6656:	08 95       	ret

00006658 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    6658:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    665a:	ed 91       	ld	r30, X+
    665c:	fc 91       	ld	r31, X
    665e:	11 97       	sbiw	r26, 0x01	; 1
    6660:	9f 01       	movw	r18, r30
    6662:	2f 5f       	subi	r18, 0xFF	; 255
    6664:	3f 4f       	sbci	r19, 0xFF	; 255
    6666:	11 96       	adiw	r26, 0x01	; 1
    6668:	3c 93       	st	X, r19
    666a:	2e 93       	st	-X, r18
    666c:	e4 91       	lpm	r30, Z
    666e:	e7 fd       	sbrc	r30, 7
    6670:	03 c0       	rjmp	.+6      	; 0x6678 <ReadVarLen+0x20>
    6672:	8e 2f       	mov	r24, r30
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	08 95       	ret
    {
       value &= 0x7F;
    6678:	ef 77       	andi	r30, 0x7F	; 127
    667a:	8e 2f       	mov	r24, r30
    667c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    667e:	96 95       	lsr	r25
    6680:	98 2f       	mov	r25, r24
    6682:	88 27       	eor	r24, r24
    6684:	97 95       	ror	r25
    6686:	87 95       	ror	r24
    6688:	2f 5f       	subi	r18, 0xFF	; 255
    668a:	3f 4f       	sbci	r19, 0xFF	; 255
    668c:	f9 01       	movw	r30, r18
    668e:	31 97       	sbiw	r30, 0x01	; 1
    6690:	e4 91       	lpm	r30, Z
    6692:	4e 2f       	mov	r20, r30
    6694:	4f 77       	andi	r20, 0x7F	; 127
    6696:	84 0f       	add	r24, r20
    6698:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    669a:	e7 fd       	sbrc	r30, 7
    669c:	f0 cf       	rjmp	.-32     	; 0x667e <ReadVarLen+0x26>
    669e:	2d 93       	st	X+, r18
    66a0:	3c 93       	st	X, r19
    }


    return value;
}
    66a2:	08 95       	ret

000066a4 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    66a4:	ff 92       	push	r15
    66a6:	0f 93       	push	r16
    66a8:	1f 93       	push	r17
    66aa:	cf 93       	push	r28
    66ac:	df 93       	push	r29
    66ae:	18 2f       	mov	r17, r24
    66b0:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    66b2:	c8 2f       	mov	r28, r24
    66b4:	d0 e0       	ldi	r29, 0x00	; 0
    66b6:	86 e1       	ldi	r24, 0x16	; 22
    66b8:	18 9f       	mul	r17, r24
    66ba:	f0 01       	movw	r30, r0
    66bc:	11 24       	eor	r1, r1
    66be:	e1 54       	subi	r30, 0x41	; 65
    66c0:	f4 4f       	sbci	r31, 0xF4	; 244
    66c2:	90 81       	ld	r25, Z
    66c4:	f9 2e       	mov	r15, r25
    66c6:	ff 1c       	adc	r15, r15
    66c8:	ff 24       	eor	r15, r15
    66ca:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    66cc:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    66ce:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    66d0:	8f ef       	ldi	r24, 0xFF	; 255
    66d2:	84 87       	std	Z+12, r24	; 0x0c
	track->noteVol=volume;
    66d4:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    66d6:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    66d8:	97 7b       	andi	r25, 0xB7	; 183
    66da:	90 62       	ori	r25, 0x20	; 32
    66dc:	90 83       	st	Z, r25
	track->tremoloLevel=0;
    66de:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    66e0:	81 87       	std	Z+9, r24	; 0x09
	track->note=note;
    66e2:	21 83       	std	Z+1, r18	; 0x01

	#else

		#if MIXER_CHAN4_TYPE == 0
			//if it's a noise channel
			if(channel==3){
    66e4:	13 30       	cpi	r17, 0x03	; 3
    66e6:	69 f4       	brne	.+26     	; 0x6702 <TriggerCommon+0x5e>
				if(!isFx) patch=note;
    66e8:	f1 10       	cpse	r15, r1
    66ea:	01 c0       	rjmp	.+2      	; 0x66ee <TriggerCommon+0x4a>
    66ec:	02 2f       	mov	r16, r18
				mixer.channels.type.noise.barrel=0x0101;				
    66ee:	81 e0       	ldi	r24, 0x01	; 1
    66f0:	91 e0       	ldi	r25, 0x01	; 1
    66f2:	90 93 a7 0b 	sts	0x0BA7, r25
    66f6:	80 93 a6 0b 	sts	0x0BA6, r24
				mixer.channels.type.noise.params=1; //default 
    66fa:	81 e0       	ldi	r24, 0x01	; 1
    66fc:	80 93 a5 0b 	sts	0x0BA5, r24
    6700:	08 c0       	rjmp	.+16     	; 0x6712 <TriggerCommon+0x6e>
			}else{
				SetMixerNote(channel,note);
    6702:	62 2f       	mov	r22, r18
    6704:	81 2f       	mov	r24, r17
    6706:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <SetMixerNote>
				SetMixerWave(channel,0);
    670a:	60 e0       	ldi	r22, 0x00	; 0
    670c:	81 2f       	mov	r24, r17
    670e:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <SetMixerWave>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    6712:	86 e1       	ldi	r24, 0x16	; 22
    6714:	8c 9f       	mul	r24, r28
    6716:	f0 01       	movw	r30, r0
    6718:	8d 9f       	mul	r24, r29
    671a:	f0 0d       	add	r31, r0
    671c:	11 24       	eor	r1, r1
    671e:	e1 54       	subi	r30, 0x41	; 65
    6720:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    6722:	ff 20       	and	r15, r15
    6724:	11 f0       	breq	.+4      	; 0x672a <TriggerCommon+0x86>
		track->fxPatchNo=patch;
    6726:	07 87       	std	Z+15, r16	; 0x0f
    6728:	01 c0       	rjmp	.+2      	; 0x672c <TriggerCommon+0x88>
	}else{
		track->patchNo=patch;	
    672a:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    672c:	e0 91 19 0c 	lds	r30, 0x0C19
    6730:	f0 91 1a 0c 	lds	r31, 0x0C1A
    6734:	89 e0       	ldi	r24, 0x09	; 9
    6736:	08 9f       	mul	r16, r24
    6738:	e0 0d       	add	r30, r0
    673a:	f1 1d       	adc	r31, r1
    673c:	11 24       	eor	r1, r1
    673e:	33 96       	adiw	r30, 0x03	; 3
    6740:	85 91       	lpm	r24, Z+
    6742:	94 91       	lpm	r25, Z
	if(pos==NULL){
    6744:	00 97       	sbiw	r24, 0x00	; 0
    6746:	59 f4       	brne	.+22     	; 0x675e <TriggerCommon+0xba>
		track->patchCommandStreamPos=NULL;
    6748:	86 e1       	ldi	r24, 0x16	; 22
    674a:	8c 9f       	mul	r24, r28
    674c:	f0 01       	movw	r30, r0
    674e:	8d 9f       	mul	r24, r29
    6750:	f0 0d       	add	r31, r0
    6752:	11 24       	eor	r1, r1
    6754:	e1 54       	subi	r30, 0x41	; 65
    6756:	f4 4f       	sbci	r31, 0xF4	; 244
    6758:	15 8a       	std	Z+21, r1	; 0x15
    675a:	14 8a       	std	Z+20, r1	; 0x14
    675c:	0e c0       	rjmp	.+28     	; 0x677a <TriggerCommon+0xd6>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    675e:	fc 01       	movw	r30, r24
    6760:	24 91       	lpm	r18, Z
    6762:	36 e1       	ldi	r19, 0x16	; 22
    6764:	3c 9f       	mul	r19, r28
    6766:	f0 01       	movw	r30, r0
    6768:	3d 9f       	mul	r19, r29
    676a:	f0 0d       	add	r31, r0
    676c:	11 24       	eor	r1, r1
    676e:	e1 54       	subi	r30, 0x41	; 65
    6770:	f4 4f       	sbci	r31, 0xF4	; 244
    6772:	21 8b       	std	Z+17, r18	; 0x11
    6774:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    6776:	95 8b       	std	Z+21, r25	; 0x15
    6778:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    677a:	df 91       	pop	r29
    677c:	cf 91       	pop	r28
    677e:	1f 91       	pop	r17
    6780:	0f 91       	pop	r16
    6782:	ff 90       	pop	r15
    6784:	08 95       	ret

00006786 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    6786:	98 2f       	mov	r25, r24
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    6788:	e0 91 19 0c 	lds	r30, 0x0C19
    678c:	f0 91 1a 0c 	lds	r31, 0x0C1A
    6790:	29 e0       	ldi	r18, 0x09	; 9
    6792:	82 9f       	mul	r24, r18
    6794:	e0 0d       	add	r30, r0
    6796:	f1 1d       	adc	r31, r1
    6798:	11 24       	eor	r1, r1
    679a:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    679c:	e1 30       	cpi	r30, 0x01	; 1
    679e:	e9 f0       	breq	.+58     	; 0x67da <TriggerFx+0x54>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    67a0:	e2 30       	cpi	r30, 0x02	; 2
    67a2:	e9 f0       	breq	.+58     	; 0x67de <TriggerFx+0x58>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    67a4:	20 91 d5 0b 	lds	r18, 0x0BD5
    67a8:	27 ff       	sbrs	r18, 7
    67aa:	1d c0       	rjmp	.+58     	; 0x67e6 <TriggerFx+0x60>
    67ac:	20 91 e4 0b 	lds	r18, 0x0BE4
    67b0:	28 13       	cpse	r18, r24
    67b2:	02 c0       	rjmp	.+4      	; 0x67b8 <TriggerFx+0x32>
    67b4:	41 11       	cpse	r20, r1
    67b6:	17 c0       	rjmp	.+46     	; 0x67e6 <TriggerFx+0x60>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    67b8:	20 91 eb 0b 	lds	r18, 0x0BEB
    67bc:	27 ff       	sbrs	r18, 7
    67be:	11 c0       	rjmp	.+34     	; 0x67e2 <TriggerFx+0x5c>
    67c0:	20 91 fa 0b 	lds	r18, 0x0BFA
    67c4:	29 13       	cpse	r18, r25
    67c6:	02 c0       	rjmp	.+4      	; 0x67cc <TriggerFx+0x46>
    67c8:	41 11       	cpse	r20, r1
    67ca:	0b c0       	rjmp	.+22     	; 0x67e2 <TriggerFx+0x5c>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    67cc:	20 91 e8 0b 	lds	r18, 0x0BE8
    67d0:	80 91 fe 0b 	lds	r24, 0x0BFE
    67d4:	82 17       	cp	r24, r18
    67d6:	28 f4       	brcc	.+10     	; 0x67e2 <TriggerFx+0x5c>
    67d8:	06 c0       	rjmp	.+12     	; 0x67e6 <TriggerFx+0x60>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    67da:	83 e0       	ldi	r24, 0x03	; 3
    67dc:	05 c0       	rjmp	.+10     	; 0x67e8 <TriggerFx+0x62>
	}else if(type==2){
		channel=4;
    67de:	84 e0       	ldi	r24, 0x04	; 4
    67e0:	03 c0       	rjmp	.+6      	; 0x67e8 <TriggerFx+0x62>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    67e2:	82 e0       	ldi	r24, 0x02	; 2
    67e4:	01 c0       	rjmp	.+2      	; 0x67e8 <TriggerFx+0x62>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    67e6:	81 e0       	ldi	r24, 0x01	; 1
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    67e8:	26 e1       	ldi	r18, 0x16	; 22
    67ea:	82 9f       	mul	r24, r18
    67ec:	f0 01       	movw	r30, r0
    67ee:	11 24       	eor	r1, r1
    67f0:	e1 54       	subi	r30, 0x41	; 65
    67f2:	f4 4f       	sbci	r31, 0xF4	; 244
    67f4:	20 81       	ld	r18, Z
    67f6:	20 68       	ori	r18, 0x80	; 128
    67f8:	20 83       	st	Z, r18
	TriggerCommon(channel,patch,volume,80);
    67fa:	20 e5       	ldi	r18, 0x50	; 80
    67fc:	46 2f       	mov	r20, r22
    67fe:	69 2f       	mov	r22, r25
    6800:	0c 94 52 33 	jmp	0x66a4	; 0x66a4 <TriggerCommon>

00006804 <TriggerNote>:
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    6804:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    6806:	a8 2f       	mov	r26, r24
    6808:	b0 e0       	ldi	r27, 0x00	; 0
    680a:	96 e1       	ldi	r25, 0x16	; 22
    680c:	89 9f       	mul	r24, r25
    680e:	f0 01       	movw	r30, r0
    6810:	11 24       	eor	r1, r1
    6812:	e1 54       	subi	r30, 0x41	; 65
    6814:	f4 4f       	sbci	r31, 0xF4	; 244
    6816:	90 81       	ld	r25, Z
    6818:	95 ff       	sbrs	r25, 5
    681a:	02 c0       	rjmp	.+4      	; 0x6820 <TriggerNote+0x1c>
    681c:	97 fd       	sbrc	r25, 7
    681e:	28 c0       	rjmp	.+80     	; 0x6870 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    6820:	31 11       	cpse	r19, r1
    6822:	18 c0       	rjmp	.+48     	; 0x6854 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    6824:	86 e1       	ldi	r24, 0x16	; 22
    6826:	8a 9f       	mul	r24, r26
    6828:	f0 01       	movw	r30, r0
    682a:	8b 9f       	mul	r24, r27
    682c:	f0 0d       	add	r31, r0
    682e:	11 24       	eor	r1, r1
    6830:	e1 54       	subi	r30, 0x41	; 65
    6832:	f4 4f       	sbci	r31, 0xF4	; 244
    6834:	85 85       	ldd	r24, Z+13	; 0x0d
    6836:	81 11       	cpse	r24, r1
    6838:	02 c0       	rjmp	.+4      	; 0x683e <TriggerNote+0x3a>
    683a:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    683c:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    683e:	86 e1       	ldi	r24, 0x16	; 22
    6840:	8a 9f       	mul	r24, r26
    6842:	f0 01       	movw	r30, r0
    6844:	8b 9f       	mul	r24, r27
    6846:	f0 0d       	add	r31, r0
    6848:	11 24       	eor	r1, r1
    684a:	e1 54       	subi	r30, 0x41	; 65
    684c:	f4 4f       	sbci	r31, 0xF4	; 244
    684e:	9f 7b       	andi	r25, 0xBF	; 191
    6850:	90 83       	st	Z, r25
    6852:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    6854:	26 e1       	ldi	r18, 0x16	; 22
    6856:	2a 9f       	mul	r18, r26
    6858:	f0 01       	movw	r30, r0
    685a:	2b 9f       	mul	r18, r27
    685c:	f0 0d       	add	r31, r0
    685e:	11 24       	eor	r1, r1
    6860:	e1 54       	subi	r30, 0x41	; 65
    6862:	f4 4f       	sbci	r31, 0xF4	; 244
    6864:	9f 77       	andi	r25, 0x7F	; 127
    6866:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    6868:	24 2f       	mov	r18, r20
    686a:	43 2f       	mov	r20, r19
    686c:	0c 94 52 33 	jmp	0x66a4	; 0x66a4 <TriggerCommon>
    6870:	08 95       	ret

00006872 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    6872:	5f 92       	push	r5
    6874:	6f 92       	push	r6
    6876:	7f 92       	push	r7
    6878:	8f 92       	push	r8
    687a:	9f 92       	push	r9
    687c:	af 92       	push	r10
    687e:	bf 92       	push	r11
    6880:	cf 92       	push	r12
    6882:	df 92       	push	r13
    6884:	ef 92       	push	r14
    6886:	ff 92       	push	r15
    6888:	0f 93       	push	r16
    688a:	1f 93       	push	r17
    688c:	cf 93       	push	r28
    688e:	df 93       	push	r29
    6890:	cf eb       	ldi	r28, 0xBF	; 191
    6892:	db e0       	ldi	r29, 0x0B	; 11
    6894:	82 e9       	ldi	r24, 0x92	; 146
    6896:	e8 2e       	mov	r14, r24
    6898:	8b e0       	ldi	r24, 0x0B	; 11
    689a:	f8 2e       	mov	r15, r24
    689c:	d7 01       	movw	r26, r14
    689e:	9e 01       	movw	r18, r28
    68a0:	40 e0       	ldi	r20, 0x00	; 0
    68a2:	50 e0       	ldi	r21, 0x00	; 0
    68a4:	ca 01       	movw	r24, r20
    68a6:	81 54       	subi	r24, 0x41	; 65
    68a8:	94 4f       	sbci	r25, 0xF4	; 244
    68aa:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    68ac:	fc 01       	movw	r30, r24
    68ae:	85 85       	ldd	r24, Z+13	; 0x0d
    68b0:	88 23       	and	r24, r24
    68b2:	91 f0       	breq	.+36     	; 0x68d8 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    68b4:	64 85       	ldd	r22, Z+12	; 0x0c
    68b6:	99 27       	eor	r25, r25
    68b8:	87 fd       	sbrc	r24, 7
    68ba:	90 95       	com	r25
    68bc:	86 0f       	add	r24, r22
    68be:	91 1d       	adc	r25, r1
    68c0:	8f 3f       	cpi	r24, 0xFF	; 255
    68c2:	91 05       	cpc	r25, r1
    68c4:	19 f0       	breq	.+6      	; 0x68cc <ProcessMusic+0x5a>
    68c6:	14 f0       	brlt	.+4      	; 0x68cc <ProcessMusic+0x5a>
    68c8:	8f ef       	ldi	r24, 0xFF	; 255
    68ca:	90 e0       	ldi	r25, 0x00	; 0
    68cc:	97 ff       	sbrs	r25, 7
    68ce:	02 c0       	rjmp	.+4      	; 0x68d4 <ProcessMusic+0x62>
    68d0:	80 e0       	ldi	r24, 0x00	; 0
    68d2:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    68d4:	f6 01       	movw	r30, r12
    68d6:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    68d8:	f9 01       	movw	r30, r18
    68da:	10 81       	ld	r17, Z
    68dc:	13 ff       	sbrs	r17, 3
    68de:	29 c0       	rjmp	.+82     	; 0x6932 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    68e0:	62 81       	ldd	r22, Z+2	; 0x02
    68e2:	73 81       	ldd	r23, Z+3	; 0x03
    68e4:	11 96       	adiw	r26, 0x01	; 1
    68e6:	8d 91       	ld	r24, X+
    68e8:	9c 91       	ld	r25, X
    68ea:	12 97       	sbiw	r26, 0x02	; 2
    68ec:	86 0f       	add	r24, r22
    68ee:	97 1f       	adc	r25, r23
    68f0:	12 96       	adiw	r26, 0x02	; 2
    68f2:	9c 93       	st	X, r25
    68f4:	8e 93       	st	-X, r24
    68f6:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    68f8:	f6 01       	movw	r30, r12
    68fa:	04 81       	ldd	r16, Z+4	; 0x04
    68fc:	e0 2f       	mov	r30, r16
    68fe:	f0 e0       	ldi	r31, 0x00	; 0
    6900:	ee 0f       	add	r30, r30
    6902:	ff 1f       	adc	r31, r31
    6904:	e8 5f       	subi	r30, 0xF8	; 248
    6906:	f1 49       	sbci	r31, 0x91	; 145
    6908:	c5 90       	lpm	r12, Z+
    690a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    690c:	16 16       	cp	r1, r22
    690e:	17 06       	cpc	r1, r23
    6910:	24 f4       	brge	.+8      	; 0x691a <ProcessMusic+0xa8>
    6912:	8c 15       	cp	r24, r12
    6914:	9d 05       	cpc	r25, r13
    6916:	30 f4       	brcc	.+12     	; 0x6924 <ProcessMusic+0xb2>
    6918:	0c c0       	rjmp	.+24     	; 0x6932 <ProcessMusic+0xc0>
    691a:	67 2b       	or	r22, r23
    691c:	51 f0       	breq	.+20     	; 0x6932 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    691e:	c8 16       	cp	r12, r24
    6920:	d9 06       	cpc	r13, r25
    6922:	38 f0       	brcs	.+14     	; 0x6932 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    6924:	12 96       	adiw	r26, 0x02	; 2
    6926:	dc 92       	st	X, r13
    6928:	ce 92       	st	-X, r12
    692a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    692c:	17 7f       	andi	r17, 0xF7	; 247
    692e:	f9 01       	movw	r30, r18
    6930:	10 83       	st	Z, r17
    6932:	4a 5e       	subi	r20, 0xEA	; 234
    6934:	5f 4f       	sbci	r21, 0xFF	; 255
    6936:	2a 5e       	subi	r18, 0xEA	; 234
    6938:	3f 4f       	sbci	r19, 0xFF	; 255
    693a:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    693c:	48 35       	cpi	r20, 0x58	; 88
    693e:	51 05       	cpc	r21, r1
    6940:	09 f0       	breq	.+2      	; 0x6944 <ProcessMusic+0xd2>
    6942:	b0 cf       	rjmp	.-160    	; 0x68a4 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    6944:	80 91 80 09 	lds	r24, 0x0980
    6948:	88 23       	and	r24, r24
    694a:	09 f4       	brne	.+2      	; 0x694e <ProcessMusic+0xdc>
    694c:	cb c0       	rjmp	.+406    	; 0x6ae4 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    694e:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    6950:	80 91 17 0c 	lds	r24, 0x0C17
    6954:	90 91 18 0c 	lds	r25, 0x0C18
    6958:	20 91 1d 0c 	lds	r18, 0x0C1D
    695c:	30 91 1e 0c 	lds	r19, 0x0C1E
    6960:	82 17       	cp	r24, r18
    6962:	93 07       	cpc	r25, r19
    6964:	09 f0       	breq	.+2      	; 0x6968 <ProcessMusic+0xf6>
    6966:	b9 c0       	rjmp	.+370    	; 0x6ada <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    6968:	20 91 20 0c 	lds	r18, 0x0C20
    696c:	30 91 21 0c 	lds	r19, 0x0C21
    6970:	b9 01       	movw	r22, r18
    6972:	6f 5f       	subi	r22, 0xFF	; 255
    6974:	7f 4f       	sbci	r23, 0xFF	; 255
    6976:	70 93 21 0c 	sts	0x0C21, r23
    697a:	60 93 20 0c 	sts	0x0C20, r22
    697e:	f9 01       	movw	r30, r18
    6980:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    6982:	4f 3f       	cpi	r20, 0xFF	; 255
    6984:	79 f5       	brne	.+94     	; 0x69e4 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    6986:	a9 01       	movw	r20, r18
    6988:	4e 5f       	subi	r20, 0xFE	; 254
    698a:	5f 4f       	sbci	r21, 0xFF	; 255
    698c:	50 93 21 0c 	sts	0x0C21, r21
    6990:	40 93 20 0c 	sts	0x0C20, r20
    6994:	fb 01       	movw	r30, r22
    6996:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    6998:	6f 32       	cpi	r22, 0x2F	; 47
    699a:	19 f4       	brne	.+6      	; 0x69a2 <ProcessMusic+0x130>
						playSong=false;
    699c:	10 92 80 09 	sts	0x0980, r1
						break;	
    69a0:	9c c0       	rjmp	.+312    	; 0x6ada <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    69a2:	66 30       	cpi	r22, 0x06	; 6
    69a4:	09 f0       	breq	.+2      	; 0x69a8 <ProcessMusic+0x136>
    69a6:	8c c0       	rjmp	.+280    	; 0x6ac0 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    69a8:	fa 01       	movw	r30, r20
    69aa:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    69ac:	c9 01       	movw	r24, r18
    69ae:	04 96       	adiw	r24, 0x04	; 4
    69b0:	90 93 21 0c 	sts	0x0C21, r25
    69b4:	80 93 20 0c 	sts	0x0C20, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    69b8:	f9 01       	movw	r30, r18
    69ba:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    69bc:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    69be:	e3 35       	cpi	r30, 0x53	; 83
    69c0:	29 f4       	brne	.+10     	; 0x69cc <ProcessMusic+0x15a>
							loopStart=songPos;
    69c2:	90 93 23 0c 	sts	0x0C23, r25
    69c6:	80 93 22 0c 	sts	0x0C22, r24
    69ca:	7a c0       	rjmp	.+244    	; 0x6ac0 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    69cc:	e5 34       	cpi	r30, 0x45	; 69
    69ce:	09 f0       	breq	.+2      	; 0x69d2 <ProcessMusic+0x160>
    69d0:	77 c0       	rjmp	.+238    	; 0x6ac0 <ProcessMusic+0x24e>
							songPos=loopStart;
    69d2:	80 91 22 0c 	lds	r24, 0x0C22
    69d6:	90 91 23 0c 	lds	r25, 0x0C23
    69da:	90 93 21 0c 	sts	0x0C21, r25
    69de:	80 93 20 0c 	sts	0x0C20, r24
    69e2:	6e c0       	rjmp	.+220    	; 0x6ac0 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    69e4:	47 fd       	sbrc	r20, 7
    69e6:	40 93 1b 0c 	sts	0x0C1B, r20
					channel=lastStatus&0x0f;
    69ea:	90 91 1b 0c 	lds	r25, 0x0C1B
    69ee:	89 2f       	mov	r24, r25
    69f0:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    69f2:	47 ff       	sbrs	r20, 7
    69f4:	08 c0       	rjmp	.+16     	; 0x6a06 <ProcessMusic+0x194>
    69f6:	2e 5f       	subi	r18, 0xFE	; 254
    69f8:	3f 4f       	sbci	r19, 0xFF	; 255
    69fa:	30 93 21 0c 	sts	0x0C21, r19
    69fe:	20 93 20 0c 	sts	0x0C20, r18
    6a02:	fb 01       	movw	r30, r22
    6a04:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    6a06:	90 7f       	andi	r25, 0xF0	; 240
    6a08:	90 3b       	cpi	r25, 0xB0	; 176
    6a0a:	e1 f0       	breq	.+56     	; 0x6a44 <ProcessMusic+0x1d2>
    6a0c:	90 3c       	cpi	r25, 0xC0	; 192
    6a0e:	09 f4       	brne	.+2      	; 0x6a12 <ProcessMusic+0x1a0>
    6a10:	51 c0       	rjmp	.+162    	; 0x6ab4 <ProcessMusic+0x242>
    6a12:	90 39       	cpi	r25, 0x90	; 144
    6a14:	09 f0       	breq	.+2      	; 0x6a18 <ProcessMusic+0x1a6>
    6a16:	54 c0       	rjmp	.+168    	; 0x6ac0 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    6a18:	e0 91 20 0c 	lds	r30, 0x0C20
    6a1c:	f0 91 21 0c 	lds	r31, 0x0C21
    6a20:	9f 01       	movw	r18, r30
    6a22:	2f 5f       	subi	r18, 0xFF	; 255
    6a24:	3f 4f       	sbci	r19, 0xFF	; 255
    6a26:	30 93 21 0c 	sts	0x0C21, r19
    6a2a:	20 93 20 0c 	sts	0x0C20, r18
    6a2e:	24 91       	lpm	r18, Z
    6a30:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    6a32:	18 9f       	mul	r17, r24
    6a34:	f0 01       	movw	r30, r0
    6a36:	11 24       	eor	r1, r1
    6a38:	e1 54       	subi	r30, 0x41	; 65
    6a3a:	f4 4f       	sbci	r31, 0xF4	; 244
    6a3c:	66 85       	ldd	r22, Z+14	; 0x0e
    6a3e:	0e 94 02 34 	call	0x6804	; 0x6804 <TriggerNote>
    6a42:	3e c0       	rjmp	.+124    	; 0x6ac0 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    6a44:	e0 91 20 0c 	lds	r30, 0x0C20
    6a48:	f0 91 21 0c 	lds	r31, 0x0C21
    6a4c:	9f 01       	movw	r18, r30
    6a4e:	2f 5f       	subi	r18, 0xFF	; 255
    6a50:	3f 4f       	sbci	r19, 0xFF	; 255
    6a52:	30 93 21 0c 	sts	0x0C21, r19
    6a56:	20 93 20 0c 	sts	0x0C20, r18
    6a5a:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    6a5c:	47 30       	cpi	r20, 0x07	; 7
    6a5e:	49 f4       	brne	.+18     	; 0x6a72 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    6a60:	18 9f       	mul	r17, r24
    6a62:	d0 01       	movw	r26, r0
    6a64:	11 24       	eor	r1, r1
    6a66:	a1 54       	subi	r26, 0x41	; 65
    6a68:	b4 4f       	sbci	r27, 0xF4	; 244
    6a6a:	ee 0f       	add	r30, r30
    6a6c:	1a 96       	adiw	r26, 0x0a	; 10
    6a6e:	ec 93       	st	X, r30
    6a70:	27 c0       	rjmp	.+78     	; 0x6ac0 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    6a72:	4b 30       	cpi	r20, 0x0B	; 11
    6a74:	49 f4       	brne	.+18     	; 0x6a88 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    6a76:	18 9f       	mul	r17, r24
    6a78:	d0 01       	movw	r26, r0
    6a7a:	11 24       	eor	r1, r1
    6a7c:	a1 54       	subi	r26, 0x41	; 65
    6a7e:	b4 4f       	sbci	r27, 0xF4	; 244
    6a80:	ee 0f       	add	r30, r30
    6a82:	19 96       	adiw	r26, 0x09	; 9
    6a84:	ec 93       	st	X, r30
    6a86:	1c c0       	rjmp	.+56     	; 0x6ac0 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    6a88:	4c 35       	cpi	r20, 0x5C	; 92
    6a8a:	49 f4       	brne	.+18     	; 0x6a9e <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    6a8c:	18 9f       	mul	r17, r24
    6a8e:	d0 01       	movw	r26, r0
    6a90:	11 24       	eor	r1, r1
    6a92:	a1 54       	subi	r26, 0x41	; 65
    6a94:	b4 4f       	sbci	r27, 0xF4	; 244
    6a96:	ee 0f       	add	r30, r30
    6a98:	17 96       	adiw	r26, 0x07	; 7
    6a9a:	ec 93       	st	X, r30
    6a9c:	11 c0       	rjmp	.+34     	; 0x6ac0 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    6a9e:	44 36       	cpi	r20, 0x64	; 100
    6aa0:	79 f4       	brne	.+30     	; 0x6ac0 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    6aa2:	18 9f       	mul	r17, r24
    6aa4:	d0 01       	movw	r26, r0
    6aa6:	11 24       	eor	r1, r1
    6aa8:	a1 54       	subi	r26, 0x41	; 65
    6aaa:	b4 4f       	sbci	r27, 0xF4	; 244
    6aac:	ee 0f       	add	r30, r30
    6aae:	18 96       	adiw	r26, 0x08	; 8
    6ab0:	ec 93       	st	X, r30
    6ab2:	06 c0       	rjmp	.+12     	; 0x6ac0 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    6ab4:	18 9f       	mul	r17, r24
    6ab6:	f0 01       	movw	r30, r0
    6ab8:	11 24       	eor	r1, r1
    6aba:	e1 54       	subi	r30, 0x41	; 65
    6abc:	f4 4f       	sbci	r31, 0xF4	; 244
    6abe:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    6ac0:	80 e2       	ldi	r24, 0x20	; 32
    6ac2:	9c e0       	ldi	r25, 0x0C	; 12
    6ac4:	0e 94 2c 33 	call	0x6658	; 0x6658 <ReadVarLen>
    6ac8:	90 93 1e 0c 	sts	0x0C1E, r25
    6acc:	80 93 1d 0c 	sts	0x0C1D, r24
				currDeltaTime=0;
    6ad0:	10 92 18 0c 	sts	0x0C18, r1
    6ad4:	10 92 17 0c 	sts	0x0C17, r1
    6ad8:	3b cf       	rjmp	.-394    	; 0x6950 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    6ada:	01 96       	adiw	r24, 0x01	; 1
    6adc:	90 93 18 0c 	sts	0x0C18, r25
    6ae0:	80 93 17 0c 	sts	0x0C17, r24
    6ae4:	95 ec       	ldi	r25, 0xC5	; 197
    6ae6:	a9 2e       	mov	r10, r25
    6ae8:	9b e0       	ldi	r25, 0x0B	; 11
    6aea:	b9 2e       	mov	r11, r25
    6aec:	01 ed       	ldi	r16, 0xD1	; 209
    6aee:	1b e0       	ldi	r17, 0x0B	; 11
    6af0:	20 ed       	ldi	r18, 0xD0	; 208
    6af2:	c2 2e       	mov	r12, r18
    6af4:	2b e0       	ldi	r18, 0x0B	; 11
    6af6:	d2 2e       	mov	r13, r18
    6af8:	32 ed       	ldi	r19, 0xD2	; 210
    6afa:	83 2e       	mov	r8, r19
    6afc:	3b e0       	ldi	r19, 0x0B	; 11
    6afe:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    6b00:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6b02:	66 24       	eor	r6, r6
    6b04:	6a 94       	dec	r6
    6b06:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    6b08:	88 81       	ld	r24, Y
    6b0a:	86 fd       	sbrc	r24, 6
    6b0c:	43 c0       	rjmp	.+134    	; 0x6b94 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    6b0e:	8c 89       	ldd	r24, Y+20	; 0x14
    6b10:	9d 89       	ldd	r25, Y+21	; 0x15
    6b12:	89 2b       	or	r24, r25
    6b14:	09 f4       	brne	.+2      	; 0x6b18 <ProcessMusic+0x2a6>
    6b16:	3a c0       	rjmp	.+116    	; 0x6b8c <ProcessMusic+0x31a>
    6b18:	d8 01       	movw	r26, r16
    6b1a:	9c 91       	ld	r25, X
    6b1c:	f6 01       	movw	r30, r12
    6b1e:	80 81       	ld	r24, Z
    6b20:	98 17       	cp	r25, r24
    6b22:	08 f4       	brcc	.+2      	; 0x6b26 <ProcessMusic+0x2b4>
    6b24:	33 c0       	rjmp	.+102    	; 0x6b8c <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    6b26:	d8 01       	movw	r26, r16
    6b28:	9c 91       	ld	r25, X
    6b2a:	f6 01       	movw	r30, r12
    6b2c:	80 81       	ld	r24, Z
    6b2e:	98 13       	cpse	r25, r24
    6b30:	2d c0       	rjmp	.+90     	; 0x6b8c <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    6b32:	ec 89       	ldd	r30, Y+20	; 0x14
    6b34:	fd 89       	ldd	r31, Y+21	; 0x15
    6b36:	af 01       	movw	r20, r30
    6b38:	4f 5f       	subi	r20, 0xFF	; 255
    6b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    6b3c:	5d 8b       	std	Y+21, r21	; 0x15
    6b3e:	4c 8b       	std	Y+20, r20	; 0x14
    6b40:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    6b42:	8f 3f       	cpi	r24, 0xFF	; 255
    6b44:	31 f4       	brne	.+12     	; 0x6b52 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    6b46:	88 81       	ld	r24, Y
    6b48:	8f 77       	andi	r24, 0x7F	; 127
    6b4a:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    6b4c:	1d 8a       	std	Y+21, r1	; 0x15
    6b4e:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    6b50:	1d c0       	rjmp	.+58     	; 0x6b8c <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    6b52:	32 96       	adiw	r30, 0x02	; 2
    6b54:	fd 8b       	std	Y+21, r31	; 0x15
    6b56:	ec 8b       	std	Y+20, r30	; 0x14
    6b58:	fa 01       	movw	r30, r20
    6b5a:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    6b5c:	e8 2f       	mov	r30, r24
    6b5e:	f0 e0       	ldi	r31, 0x00	; 0
    6b60:	ee 0f       	add	r30, r30
    6b62:	ff 1f       	adc	r31, r31
    6b64:	e0 53       	subi	r30, 0x30	; 48
    6b66:	ff 4f       	sbci	r31, 0xFF	; 255
    6b68:	25 91       	lpm	r18, Z+
    6b6a:	34 91       	lpm	r19, Z
    6b6c:	65 2d       	mov	r22, r5
    6b6e:	ce 01       	movw	r24, r28
    6b70:	f9 01       	movw	r30, r18
    6b72:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    6b74:	ec 89       	ldd	r30, Y+20	; 0x14
    6b76:	fd 89       	ldd	r31, Y+21	; 0x15
    6b78:	cf 01       	movw	r24, r30
    6b7a:	01 96       	adiw	r24, 0x01	; 1
    6b7c:	9d 8b       	std	Y+21, r25	; 0x15
    6b7e:	8c 8b       	std	Y+20, r24	; 0x14
    6b80:	e4 91       	lpm	r30, Z
    6b82:	d6 01       	movw	r26, r12
    6b84:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    6b86:	f8 01       	movw	r30, r16
    6b88:	10 82       	st	Z, r1
    6b8a:	cd cf       	rjmp	.-102    	; 0x6b26 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    6b8c:	d8 01       	movw	r26, r16
    6b8e:	8c 91       	ld	r24, X
    6b90:	8f 5f       	subi	r24, 0xFF	; 255
    6b92:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    6b94:	98 81       	ld	r25, Y
    6b96:	95 ff       	sbrs	r25, 5
    6b98:	6c c0       	rjmp	.+216    	; 0x6c72 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    6b9a:	f4 01       	movw	r30, r8
    6b9c:	80 81       	ld	r24, Z
    6b9e:	8f 3f       	cpi	r24, 0xFF	; 255
    6ba0:	11 f0       	breq	.+4      	; 0x6ba6 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    6ba2:	8f 5f       	subi	r24, 0xFF	; 255
    6ba4:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    6ba6:	97 fd       	sbrc	r25, 7
    6ba8:	04 c0       	rjmp	.+8      	; 0x6bb2 <ProcessMusic+0x340>
    6baa:	f8 01       	movw	r30, r16
    6bac:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    6bae:	90 81       	ld	r25, Z
    6bb0:	01 c0       	rjmp	.+2      	; 0x6bb4 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    6bb2:	9f ef       	ldi	r25, 0xFF	; 255
    6bb4:	f8 01       	movw	r30, r16
    6bb6:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    6bb8:	80 81       	ld	r24, Z
    6bba:	88 23       	and	r24, r24
    6bbc:	09 f4       	brne	.+2      	; 0x6bc0 <ProcessMusic+0x34e>
    6bbe:	4e c0       	rjmp	.+156    	; 0x6c5c <ProcessMusic+0x3ea>
    6bc0:	31 96       	adiw	r30, 0x01	; 1
    6bc2:	50 81       	ld	r21, Z
    6bc4:	55 23       	and	r21, r21
    6bc6:	09 f4       	brne	.+2      	; 0x6bca <ProcessMusic+0x358>
    6bc8:	49 c0       	rjmp	.+146    	; 0x6c5c <ProcessMusic+0x3ea>
    6bca:	99 23       	and	r25, r25
    6bcc:	09 f4       	brne	.+2      	; 0x6bd0 <ProcessMusic+0x35e>
    6bce:	46 c0       	rjmp	.+140    	; 0x6c5c <ProcessMusic+0x3ea>
    6bd0:	40 91 1c 0c 	lds	r20, 0x0C1C
    6bd4:	44 23       	and	r20, r20
    6bd6:	09 f4       	brne	.+2      	; 0x6bda <ProcessMusic+0x368>
    6bd8:	41 c0       	rjmp	.+130    	; 0x6c5c <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    6bda:	89 9f       	mul	r24, r25
    6bdc:	c0 01       	movw	r24, r0
    6bde:	11 24       	eor	r1, r1
    6be0:	93 95       	inc	r25
				uVol>>=8;
    6be2:	89 2f       	mov	r24, r25
    6be4:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    6be6:	58 9f       	mul	r21, r24
    6be8:	90 01       	movw	r18, r0
    6bea:	59 9f       	mul	r21, r25
    6bec:	30 0d       	add	r19, r0
    6bee:	11 24       	eor	r1, r1
    6bf0:	c9 01       	movw	r24, r18
    6bf2:	93 95       	inc	r25
				uVol>>=8;
    6bf4:	89 2f       	mov	r24, r25
    6bf6:	99 27       	eor	r25, r25
    6bf8:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    6bfa:	50 81       	ld	r21, Z
    6bfc:	58 9f       	mul	r21, r24
    6bfe:	90 01       	movw	r18, r0
    6c00:	59 9f       	mul	r21, r25
    6c02:	30 0d       	add	r19, r0
    6c04:	11 24       	eor	r1, r1
    6c06:	33 95       	inc	r19
				uVol>>=8;
    6c08:	23 2f       	mov	r18, r19
    6c0a:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    6c0c:	42 9f       	mul	r20, r18
    6c0e:	c0 01       	movw	r24, r0
    6c10:	43 9f       	mul	r20, r19
    6c12:	90 0d       	add	r25, r0
    6c14:	11 24       	eor	r1, r1
    6c16:	93 95       	inc	r25
				uVol>>=8;
    6c18:	89 2f       	mov	r24, r25
    6c1a:	99 27       	eor	r25, r25
    6c1c:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    6c1e:	20 81       	ld	r18, Z
    6c20:	22 23       	and	r18, r18
    6c22:	f1 f0       	breq	.+60     	; 0x6c60 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    6c24:	d5 01       	movw	r26, r10
    6c26:	ec 91       	ld	r30, X
    6c28:	f0 e0       	ldi	r31, 0x00	; 0
    6c2a:	e0 50       	subi	r30, 0x00	; 0
    6c2c:	f0 49       	sbci	r31, 0x90	; 144
    6c2e:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    6c30:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    6c32:	2e 9f       	mul	r18, r30
    6c34:	f0 01       	movw	r30, r0
    6c36:	11 24       	eor	r1, r1
    6c38:	f3 95       	inc	r31
					tVol>>=8;
    6c3a:	ef 2f       	mov	r30, r31
    6c3c:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    6c3e:	a3 01       	movw	r20, r6
    6c40:	4e 1b       	sub	r20, r30
    6c42:	5f 0b       	sbc	r21, r31
    6c44:	48 9f       	mul	r20, r24
    6c46:	90 01       	movw	r18, r0
    6c48:	49 9f       	mul	r20, r25
    6c4a:	30 0d       	add	r19, r0
    6c4c:	58 9f       	mul	r21, r24
    6c4e:	30 0d       	add	r19, r0
    6c50:	11 24       	eor	r1, r1
    6c52:	c9 01       	movw	r24, r18
    6c54:	93 95       	inc	r25
					uVol>>=8;
    6c56:	89 2f       	mov	r24, r25
    6c58:	99 27       	eor	r25, r25
    6c5a:	02 c0       	rjmp	.+4      	; 0x6c60 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    6c5c:	80 e0       	ldi	r24, 0x00	; 0
    6c5e:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    6c60:	f5 01       	movw	r30, r10
    6c62:	30 81       	ld	r19, Z
    6c64:	f8 01       	movw	r30, r16
    6c66:	3a 97       	sbiw	r30, 0x0a	; 10
    6c68:	20 81       	ld	r18, Z
    6c6a:	23 0f       	add	r18, r19
    6c6c:	d5 01       	movw	r26, r10
    6c6e:	2c 93       	st	X, r18
    6c70:	02 c0       	rjmp	.+4      	; 0x6c76 <ProcessMusic+0x404>

		}else{
			uVol=0;
    6c72:	80 e0       	ldi	r24, 0x00	; 0
    6c74:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    6c76:	f7 01       	movw	r30, r14
    6c78:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    6c7a:	53 94       	inc	r5
    6c7c:	66 96       	adiw	r28, 0x16	; 22
    6c7e:	f6 e0       	ldi	r31, 0x06	; 6
    6c80:	ef 0e       	add	r14, r31
    6c82:	f1 1c       	adc	r15, r1
    6c84:	86 e1       	ldi	r24, 0x16	; 22
    6c86:	a8 0e       	add	r10, r24
    6c88:	b1 1c       	adc	r11, r1
    6c8a:	0a 5e       	subi	r16, 0xEA	; 234
    6c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    6c8e:	96 e1       	ldi	r25, 0x16	; 22
    6c90:	c9 0e       	add	r12, r25
    6c92:	d1 1c       	adc	r13, r1
    6c94:	a6 e1       	ldi	r26, 0x16	; 22
    6c96:	8a 0e       	add	r8, r26
    6c98:	91 1c       	adc	r9, r1
    6c9a:	b4 e0       	ldi	r27, 0x04	; 4
    6c9c:	5b 12       	cpse	r5, r27
    6c9e:	34 cf       	rjmp	.-408    	; 0x6b08 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    6ca0:	df 91       	pop	r29
    6ca2:	cf 91       	pop	r28
    6ca4:	1f 91       	pop	r17
    6ca6:	0f 91       	pop	r16
    6ca8:	ff 90       	pop	r15
    6caa:	ef 90       	pop	r14
    6cac:	df 90       	pop	r13
    6cae:	cf 90       	pop	r12
    6cb0:	bf 90       	pop	r11
    6cb2:	af 90       	pop	r10
    6cb4:	9f 90       	pop	r9
    6cb6:	8f 90       	pop	r8
    6cb8:	7f 90       	pop	r7
    6cba:	6f 90       	pop	r6
    6cbc:	5f 90       	pop	r5
    6cbe:	08 95       	ret

00006cc0 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    6cc0:	80 93 1c 0c 	sts	0x0C1C, r24
    6cc4:	08 95       	ret

00006cc6 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    6cc6:	99 27       	eor	r25, r25
	clr r23
    6cc8:	77 27       	eor	r23, r23

#if MIXER_CHAN4_TYPE == 0 
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
    6cca:	83 30       	cpi	r24, 0x03	; 3
		brlo set_note_waves
    6ccc:	08 f0       	brcs	.+2      	; 0x6cd0 <set_note_waves>
		ret		
    6cce:	08 95       	ret

00006cd0 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    6cd0:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    6cd2:	fe e6       	ldi	r31, 0x6E	; 110
	lsl r22
    6cd4:	66 0f       	add	r22, r22
	rol r23
    6cd6:	77 1f       	adc	r23, r23
	add ZL,r22
    6cd8:	e6 0f       	add	r30, r22
	adc ZH,r23	
    6cda:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    6cdc:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    6cde:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    6ce0:	e2 e9       	ldi	r30, 0x92	; 146
	ldi ZH,hi8(mixerStruct)
    6ce2:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    6ce4:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    6ce6:	28 9f       	mul	r18, r24
	add ZL,r0
    6ce8:	e0 0d       	add	r30, r0
	adc ZH,r1
    6cea:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    6cec:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    6cee:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    6cf0:	11 24       	eor	r1, r1
	

	ret
    6cf2:	08 95       	ret

00006cf4 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    6cf4:	99 27       	eor	r25, r25
	clr r23
    6cf6:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    6cf8:	e2 e9       	ldi	r30, 0x92	; 146
	ldi ZH,hi8(mixerStruct)
    6cfa:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    6cfc:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    6cfe:	28 9f       	mul	r18, r24
	add ZL,r0
    6d00:	e0 0d       	add	r30, r0
	adc ZH,r1
    6d02:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    6d04:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    6d06:	31 f4       	brne	.+12     	; 0x6d14 <smw1>
	lds r22,tr4_params
    6d08:	60 91 a5 0b 	lds	r22, 0x0BA5
	andi r22,0xfe;
    6d0c:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    6d0e:	60 93 a5 0b 	sts	0x0BA5, r22
	rjmp esmw	
    6d12:	0b c0       	rjmp	.+22     	; 0x6d2a <esmw>

00006d14 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    6d14:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    6d16:	31 f4       	brne	.+12     	; 0x6d24 <smw2>
	lds r22,tr4_params
    6d18:	60 91 a5 0b 	lds	r22, 0x0BA5
	ori r22,0xfe;
    6d1c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    6d1e:	60 93 a5 0b 	sts	0x0BA5, r22
	rjmp esmw
    6d22:	03 c0       	rjmp	.+6      	; 0x6d2a <esmw>

00006d24 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    6d24:	70 e7       	ldi	r23, 0x70	; 112
	add r23,r22
    6d26:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    6d28:	75 83       	std	Z+5, r23	; 0x05

00006d2a <esmw>:

esmw:
	clr r1	
    6d2a:	11 24       	eor	r1, r1
	ret
    6d2c:	08 95       	ret
	...

00006e00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    6e00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    6e02:	80 93 91 0b 	sts	0x0B91, r24
	ret
    6e06:	08 95       	ret

00006e08 <steptable>:
    6e08:	22 00       	.word	0x0022	; ????
    6e0a:	24 00       	.word	0x0024	; ????
    6e0c:	26 00       	.word	0x0026	; ????
    6e0e:	28 00       	.word	0x0028	; ????
    6e10:	2b 00       	.word	0x002b	; ????
    6e12:	2d 00       	.word	0x002d	; ????
    6e14:	30 00       	.word	0x0030	; ????
    6e16:	33 00       	.word	0x0033	; ????
    6e18:	36 00       	.word	0x0036	; ????
    6e1a:	39 00       	.word	0x0039	; ????
    6e1c:	3d 00       	.word	0x003d	; ????
    6e1e:	40 00       	.word	0x0040	; ????
    6e20:	44 00       	.word	0x0044	; ????
    6e22:	48 00       	.word	0x0048	; ????
    6e24:	4c 00       	.word	0x004c	; ????
    6e26:	51 00       	.word	0x0051	; ????
    6e28:	56 00       	.word	0x0056	; ????
    6e2a:	5b 00       	.word	0x005b	; ????
    6e2c:	60 00       	.word	0x0060	; ????
    6e2e:	66 00       	.word	0x0066	; ????
    6e30:	6c 00       	.word	0x006c	; ????
    6e32:	73 00       	.word	0x0073	; ????
    6e34:	79 00       	.word	0x0079	; ????
    6e36:	81 00       	.word	0x0081	; ????
    6e38:	88 00       	.word	0x0088	; ????
    6e3a:	90 00       	.word	0x0090	; ????
    6e3c:	99 00       	.word	0x0099	; ????
    6e3e:	a2 00       	.word	0x00a2	; ????
    6e40:	ac 00       	.word	0x00ac	; ????
    6e42:	b6 00       	.word	0x00b6	; ????
    6e44:	c1 00       	.word	0x00c1	; ????
    6e46:	cc 00       	.word	0x00cc	; ????
    6e48:	d8 00       	.word	0x00d8	; ????
    6e4a:	e5 00       	.word	0x00e5	; ????
    6e4c:	f3 00       	.word	0x00f3	; ????
    6e4e:	01 01       	movw	r0, r2
    6e50:	10 01       	movw	r2, r0
    6e52:	21 01       	movw	r4, r2
    6e54:	32 01       	movw	r6, r4
    6e56:	44 01       	movw	r8, r8
    6e58:	57 01       	movw	r10, r14
    6e5a:	6c 01       	movw	r12, r24
    6e5c:	81 01       	movw	r16, r2
    6e5e:	98 01       	movw	r18, r16
    6e60:	b0 01       	movw	r22, r0
    6e62:	ca 01       	movw	r24, r20
    6e64:	e5 01       	movw	r28, r10
    6e66:	02 02       	muls	r16, r18
    6e68:	21 02       	muls	r18, r17
    6e6a:	41 02       	muls	r20, r17
    6e6c:	64 02       	muls	r22, r20
    6e6e:	88 02       	muls	r24, r24
    6e70:	ae 02       	muls	r26, r30
    6e72:	d7 02       	muls	r29, r23
    6e74:	03 03       	mulsu	r16, r19
    6e76:	30 03       	mulsu	r19, r16
    6e78:	61 03       	mulsu	r22, r17
    6e7a:	94 03       	fmuls	r17, r20
    6e7c:	cb 03       	fmulsu	r20, r19
    6e7e:	05 04       	cpc	r0, r5
    6e80:	42 04       	cpc	r4, r2
    6e82:	83 04       	cpc	r8, r3
    6e84:	c7 04       	cpc	r12, r7
    6e86:	10 05       	cpc	r17, r0
    6e88:	5d 05       	cpc	r21, r13
    6e8a:	af 05       	cpc	r26, r15
    6e8c:	05 06       	cpc	r0, r21
    6e8e:	61 06       	cpc	r6, r17
    6e90:	c2 06       	cpc	r12, r18
    6e92:	29 07       	cpc	r18, r25
    6e94:	96 07       	cpc	r25, r22
    6e96:	09 08       	sbc	r0, r9
    6e98:	83 08       	sbc	r8, r3
    6e9a:	05 09       	sbc	r16, r5
    6e9c:	8e 09       	sbc	r24, r14
    6e9e:	20 0a       	sbc	r2, r16
    6ea0:	ba 0a       	sbc	r11, r26
    6ea2:	5d 0b       	sbc	r21, r29
    6ea4:	0a 0c       	add	r0, r10
    6ea6:	c1 0c       	add	r12, r1
    6ea8:	84 0d       	add	r24, r4
    6eaa:	51 0e       	add	r5, r17
    6eac:	2b 0f       	add	r18, r27
    6eae:	12 10       	cpse	r1, r2
    6eb0:	07 11       	cpse	r16, r7
    6eb2:	0a 12       	cpse	r0, r26
    6eb4:	1d 13       	cpse	r17, r29
    6eb6:	40 14       	cp	r4, r0
    6eb8:	74 15       	cp	r23, r4
    6eba:	ba 16       	cp	r11, r26
    6ebc:	14 18       	sub	r1, r4
    6ebe:	83 19       	sub	r24, r3
    6ec0:	07 1b       	sub	r16, r23
    6ec2:	a3 1c       	adc	r10, r3
    6ec4:	57 1e       	adc	r5, r23
    6ec6:	24 20       	and	r2, r4
    6ec8:	0e 22       	and	r0, r30
    6eca:	14 24       	eor	r1, r4
    6ecc:	39 26       	eor	r3, r25
    6ece:	7f 28       	or	r7, r15
    6ed0:	e8 2a       	or	r14, r24
    6ed2:	75 2d       	mov	r23, r5
    6ed4:	29 30       	cpi	r18, 0x09	; 9
    6ed6:	06 33       	cpi	r16, 0x36	; 54
    6ed8:	0f 36       	cpi	r16, 0x6F	; 111
    6eda:	45 39       	cpi	r20, 0x95	; 149
    6edc:	ad 3c       	cpi	r26, 0xCD	; 205
    6ede:	49 40       	sbci	r20, 0x09	; 9
    6ee0:	1b 44       	sbci	r17, 0x4B	; 75
    6ee2:	28 48       	sbci	r18, 0x88	; 136
    6ee4:	73 4c       	sbci	r23, 0xC3	; 195
    6ee6:	fe 50       	subi	r31, 0x0E	; 14
    6ee8:	cf 55       	subi	r28, 0x5F	; 95
    6eea:	ea 5a       	subi	r30, 0xAA	; 170
    6eec:	51 60       	ori	r21, 0x01	; 1
    6eee:	0c 66       	ori	r16, 0x6C	; 108
    6ef0:	1d 6c       	ori	r17, 0xCD	; 205
    6ef2:	8b 72       	andi	r24, 0x2B	; 43
    6ef4:	5a 79       	andi	r21, 0x9A	; 154
    6ef6:	92 80       	ldd	r9, Z+2	; 0x02
    6ef8:	37 88       	ldd	r3, Z+23	; 0x17
    6efa:	50 90 e5 98 	lds	r5, 0x98E5
    6efe:	fd a1       	ldd	r31, Y+37	; 0x25
    6f00:	9f ab       	std	Y+55, r25	; 0x37
    6f02:	d3 b5       	in	r29, 0x23	; 35
    6f04:	a3 c0       	rjmp	.+326    	; 0x704c <waves+0x4c>
	...

00007000 <waves>:
    7000:	00 03       	mulsu	r16, r16
    7002:	06 09       	sbc	r16, r6
    7004:	0c 10       	cpse	r0, r12
    7006:	13 16       	cp	r1, r19
    7008:	19 1c       	adc	r1, r9
    700a:	1f 22       	and	r1, r31
    700c:	25 28       	or	r2, r5
    700e:	2b 2e       	mov	r2, r27
    7010:	31 33       	cpi	r19, 0x31	; 49
    7012:	36 39       	cpi	r19, 0x96	; 150
    7014:	3c 3f       	cpi	r19, 0xFC	; 252
    7016:	41 44       	sbci	r20, 0x41	; 65
    7018:	47 49       	sbci	r20, 0x97	; 151
    701a:	4c 4e       	sbci	r20, 0xEC	; 236
    701c:	51 53       	subi	r21, 0x31	; 49
    701e:	55 58       	subi	r21, 0x85	; 133
    7020:	5a 5c       	subi	r21, 0xCA	; 202
    7022:	5e 60       	ori	r21, 0x0E	; 14
    7024:	62 64       	ori	r22, 0x42	; 66
    7026:	66 68       	ori	r22, 0x86	; 134
    7028:	6a 6b       	ori	r22, 0xBA	; 186
    702a:	6d 6f       	ori	r22, 0xFD	; 253
    702c:	70 71       	andi	r23, 0x10	; 16
    702e:	73 74       	andi	r23, 0x43	; 67
    7030:	75 76       	andi	r23, 0x65	; 101
    7032:	78 79       	andi	r23, 0x98	; 152
    7034:	7a 7a       	andi	r23, 0xAA	; 170
    7036:	7b 7c       	andi	r23, 0xCB	; 203
    7038:	7d 7d       	andi	r23, 0xDD	; 221
    703a:	7e 7e       	andi	r23, 0xEE	; 238
    703c:	7e 7f       	andi	r23, 0xFE	; 254
    703e:	7f 7f       	andi	r23, 0xFF	; 255
    7040:	7f 7f       	andi	r23, 0xFF	; 255
    7042:	7f 7f       	andi	r23, 0xFF	; 255
    7044:	7e 7e       	andi	r23, 0xEE	; 238
    7046:	7e 7d       	andi	r23, 0xDE	; 222
    7048:	7d 7c       	andi	r23, 0xCD	; 205
    704a:	7b 7a       	andi	r23, 0xAB	; 171
    704c:	7a 79       	andi	r23, 0x9A	; 154
    704e:	78 76       	andi	r23, 0x68	; 104
    7050:	75 74       	andi	r23, 0x45	; 69
    7052:	73 71       	andi	r23, 0x13	; 19
    7054:	70 6f       	ori	r23, 0xF0	; 240
    7056:	6d 6b       	ori	r22, 0xBD	; 189
    7058:	6a 68       	ori	r22, 0x8A	; 138
    705a:	66 64       	ori	r22, 0x46	; 70
    705c:	62 60       	ori	r22, 0x02	; 2
    705e:	5e 5c       	subi	r21, 0xCE	; 206
    7060:	5a 58       	subi	r21, 0x8A	; 138
    7062:	55 53       	subi	r21, 0x35	; 53
    7064:	51 4e       	sbci	r21, 0xE1	; 225
    7066:	4c 49       	sbci	r20, 0x9C	; 156
    7068:	47 44       	sbci	r20, 0x47	; 71
    706a:	41 3f       	cpi	r20, 0xF1	; 241
    706c:	3c 39       	cpi	r19, 0x9C	; 156
    706e:	36 33       	cpi	r19, 0x36	; 54
    7070:	31 2e       	mov	r3, r17
    7072:	2b 28       	or	r2, r11
    7074:	25 22       	and	r2, r21
    7076:	1f 1c       	adc	r1, r15
    7078:	19 16       	cp	r1, r25
    707a:	13 10       	cpse	r1, r3
    707c:	0c 09       	sbc	r16, r12
    707e:	06 03       	mulsu	r16, r22
    7080:	00 fd       	sbrc	r16, 0
    7082:	fa f7       	brpl	.-2      	; 0x7082 <waves+0x82>
    7084:	f4 f0       	brlt	.+60     	; 0x70c2 <waves+0xc2>
    7086:	ed ea       	ldi	r30, 0xAD	; 173
    7088:	e7 e4       	ldi	r30, 0x47	; 71
    708a:	e1 de       	rcall	.-574    	; 0x6e4e <steptable+0x46>
    708c:	db d8       	rcall	.-3658   	; 0x6244 <WriteEeprom+0x2>
    708e:	d5 d2       	rcall	.+1450   	; 0x763a <waves+0x63a>
    7090:	cf cd       	rjmp	.-1122   	; 0x6c30 <ProcessMusic+0x3be>
    7092:	ca c7       	rjmp	.+3988   	; 0x8028 <LBCopyChars+0x16>
    7094:	c4 c1       	rjmp	.+904    	; 0x741e <waves+0x41e>
    7096:	bf bc       	out	0x2f, r11	; 47
    7098:	b9 b7       	in	r27, 0x39	; 57
    709a:	b4 b2       	in	r11, 0x14	; 20
    709c:	af ad       	ldd	r26, Y+63	; 0x3f
    709e:	ab a8       	ldd	r10, Y+51	; 0x33
    70a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    70a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    70a4:	9e 9c       	mul	r9, r14
    70a6:	9a 98       	cbi	0x13, 2	; 19
    70a8:	96 95       	lsr	r25
    70aa:	93 91       	.word	0x9193	; ????
    70ac:	90 8f       	std	Z+24, r25	; 0x18
    70ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    70b0:	8b 8a       	std	Y+19, r8	; 0x13
    70b2:	88 87       	std	Y+8, r24	; 0x08
    70b4:	86 86       	std	Z+14, r8	; 0x0e
    70b6:	85 84       	ldd	r8, Z+13	; 0x0d
    70b8:	83 83       	std	Z+3, r24	; 0x03
    70ba:	82 82       	std	Z+2, r8	; 0x02
    70bc:	82 81       	ldd	r24, Z+2	; 0x02
    70be:	81 81       	ldd	r24, Z+1	; 0x01
    70c0:	81 81       	ldd	r24, Z+1	; 0x01
    70c2:	81 81       	ldd	r24, Z+1	; 0x01
    70c4:	82 82       	std	Z+2, r8	; 0x02
    70c6:	82 83       	std	Z+2, r24	; 0x02
    70c8:	83 84       	ldd	r8, Z+11	; 0x0b
    70ca:	85 86       	std	Z+13, r8	; 0x0d
    70cc:	86 87       	std	Z+14, r24	; 0x0e
    70ce:	88 8a       	std	Y+16, r8	; 0x10
    70d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    70d2:	8d 8f       	std	Y+29, r24	; 0x1d
    70d4:	90 91 93 95 	lds	r25, 0x9593
    70d8:	96 98       	cbi	0x12, 6	; 18
    70da:	9a 9c       	mul	r9, r10
    70dc:	9e a0       	ldd	r9, Y+38	; 0x26
    70de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    70e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    70e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    70e4:	af b2       	in	r10, 0x1f	; 31
    70e6:	b4 b7       	in	r27, 0x34	; 52
    70e8:	b9 bc       	out	0x29, r11	; 41
    70ea:	bf c1       	rjmp	.+894    	; 0x746a <waves+0x46a>
    70ec:	c4 c7       	rjmp	.+3976   	; 0x8076 <LBPrintStr+0x4c>
    70ee:	ca cd       	rjmp	.-1132   	; 0x6c84 <ProcessMusic+0x412>
    70f0:	cf d2       	rcall	.+1438   	; 0x7690 <waves+0x690>
    70f2:	d5 d8       	rcall	.-3670   	; 0x629e <ReadButtons+0x20>
    70f4:	db de       	rcall	.-586    	; 0x6eac <steptable+0xa4>
    70f6:	e1 e4       	ldi	r30, 0x41	; 65
    70f8:	e7 ea       	ldi	r30, 0xA7	; 167
    70fa:	ed f0       	brhs	.+58     	; 0x7136 <waves+0x136>
    70fc:	f4 f7       	brge	.-4      	; 0x70fa <waves+0xfa>
    70fe:	fa fd       	.word	0xfdfa	; ????
    7100:	80 81       	ld	r24, Z
    7102:	82 83       	std	Z+2, r24	; 0x02
    7104:	84 85       	ldd	r24, Z+12	; 0x0c
    7106:	86 87       	std	Z+14, r24	; 0x0e
    7108:	88 89       	ldd	r24, Y+16	; 0x10
    710a:	8a 8b       	std	Y+18, r24	; 0x12
    710c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    710e:	8e 8f       	std	Y+30, r24	; 0x1e
    7110:	90 91 92 93 	lds	r25, 0x9392
    7114:	94 95       	.word	0x9594	; ????
    7116:	96 97       	sbiw	r26, 0x26	; 38
    7118:	98 99       	sbic	0x13, 0	; 19
    711a:	9a 9b       	sbis	0x13, 2	; 19
    711c:	9c 9d       	mul	r25, r12
    711e:	9e 9f       	mul	r25, r30
    7120:	a0 a1       	ldd	r26, Z+32	; 0x20
    7122:	a2 a3       	std	Z+34, r26	; 0x22
    7124:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7126:	a6 a7       	std	Z+46, r26	; 0x2e
    7128:	a8 a9       	ldd	r26, Y+48	; 0x30
    712a:	aa ab       	std	Y+50, r26	; 0x32
    712c:	ac ad       	ldd	r26, Y+60	; 0x3c
    712e:	ae af       	std	Y+62, r26	; 0x3e
    7130:	b0 b1       	in	r27, 0x00	; 0
    7132:	b2 b3       	in	r27, 0x12	; 18
    7134:	b4 b5       	in	r27, 0x24	; 36
    7136:	b6 b7       	in	r27, 0x36	; 54
    7138:	b8 b9       	out	0x08, r27	; 8
    713a:	ba bb       	out	0x1a, r27	; 26
    713c:	bc bd       	out	0x2c, r27	; 44
    713e:	be bf       	out	0x3e, r27	; 62
    7140:	c0 c1       	rjmp	.+896    	; 0x74c2 <waves+0x4c2>
    7142:	c2 c3       	rjmp	.+1924   	; 0x78c8 <waves+0x8c8>
    7144:	c4 c5       	rjmp	.+2952   	; 0x7cce <InitializeVideoMode+0x10>
    7146:	c6 c7       	rjmp	.+3980   	; 0x80d4 <LBCollides+0x48>
    7148:	c8 c9       	rjmp	.-3184   	; 0x64da <EepromReadBlock+0x84>
    714a:	ca cb       	rjmp	.-2156   	; 0x68e0 <ProcessMusic+0x6e>
    714c:	cc cd       	rjmp	.-1128   	; 0x6ce6 <set_note_waves+0x16>
    714e:	ce cf       	rjmp	.-100    	; 0x70ec <waves+0xec>
    7150:	d0 d1       	rcall	.+928    	; 0x74f2 <waves+0x4f2>
    7152:	d2 d3       	rcall	.+1956   	; 0x78f8 <waves+0x8f8>
    7154:	d4 d5       	rcall	.+2984   	; 0x7cfe <DrawMap2+0x2c>
    7156:	d6 d7       	rcall	.+4012   	; 0x8104 <LBLineIntersect+0x24>
    7158:	d8 d9       	rcall	.-3152   	; 0x650a <PatchCommand06+0x2>
    715a:	da db       	rcall	.-2124   	; 0x6910 <ProcessMusic+0x9e>
    715c:	dc dd       	rcall	.-1096   	; 0x6d16 <smw1+0x2>
    715e:	de df       	rcall	.-68     	; 0x711c <waves+0x11c>
    7160:	e0 e1       	ldi	r30, 0x10	; 16
    7162:	e2 e3       	ldi	r30, 0x32	; 50
    7164:	e4 e5       	ldi	r30, 0x54	; 84
    7166:	e6 e7       	ldi	r30, 0x76	; 118
    7168:	e8 e9       	ldi	r30, 0x98	; 152
    716a:	ea eb       	ldi	r30, 0xBA	; 186
    716c:	ec ed       	ldi	r30, 0xDC	; 220
    716e:	ee ef       	ldi	r30, 0xFE	; 254
    7170:	f0 f1       	brcs	.+124    	; 0x71ee <waves+0x1ee>
    7172:	f2 f3       	brmi	.-4      	; 0x7170 <waves+0x170>
    7174:	f4 f5       	brge	.+124    	; 0x71f2 <waves+0x1f2>
    7176:	f6 f7       	brtc	.-4      	; 0x7174 <waves+0x174>
    7178:	f8 f9       	.word	0xf9f8	; ????
    717a:	fa fb       	.word	0xfbfa	; ????
    717c:	fc fd       	.word	0xfdfc	; ????
    717e:	fe ff       	.word	0xfffe	; ????
    7180:	00 01       	movw	r0, r0
    7182:	02 03       	mulsu	r16, r18
    7184:	04 05       	cpc	r16, r4
    7186:	06 07       	cpc	r16, r22
    7188:	08 09       	sbc	r16, r8
    718a:	0a 0b       	sbc	r16, r26
    718c:	0c 0d       	add	r16, r12
    718e:	0e 0f       	add	r16, r30
    7190:	10 11       	cpse	r17, r0
    7192:	12 13       	cpse	r17, r18
    7194:	14 15       	cp	r17, r4
    7196:	16 17       	cp	r17, r22
    7198:	18 19       	sub	r17, r8
    719a:	1a 1b       	sub	r17, r26
    719c:	1c 1d       	adc	r17, r12
    719e:	1e 1f       	adc	r17, r30
    71a0:	20 21       	and	r18, r0
    71a2:	22 23       	and	r18, r18
    71a4:	24 25       	eor	r18, r4
    71a6:	26 27       	eor	r18, r22
    71a8:	28 29       	or	r18, r8
    71aa:	2a 2b       	or	r18, r26
    71ac:	2c 2d       	mov	r18, r12
    71ae:	2e 2f       	mov	r18, r30
    71b0:	30 31       	cpi	r19, 0x10	; 16
    71b2:	32 33       	cpi	r19, 0x32	; 50
    71b4:	34 35       	cpi	r19, 0x54	; 84
    71b6:	36 37       	cpi	r19, 0x76	; 118
    71b8:	38 39       	cpi	r19, 0x98	; 152
    71ba:	3a 3b       	cpi	r19, 0xBA	; 186
    71bc:	3c 3d       	cpi	r19, 0xDC	; 220
    71be:	3e 3f       	cpi	r19, 0xFE	; 254
    71c0:	40 41       	sbci	r20, 0x10	; 16
    71c2:	42 43       	sbci	r20, 0x32	; 50
    71c4:	44 45       	sbci	r20, 0x54	; 84
    71c6:	46 47       	sbci	r20, 0x76	; 118
    71c8:	48 49       	sbci	r20, 0x98	; 152
    71ca:	4a 4b       	sbci	r20, 0xBA	; 186
    71cc:	4c 4d       	sbci	r20, 0xDC	; 220
    71ce:	4e 4f       	sbci	r20, 0xFE	; 254
    71d0:	50 51       	subi	r21, 0x10	; 16
    71d2:	52 53       	subi	r21, 0x32	; 50
    71d4:	54 55       	subi	r21, 0x54	; 84
    71d6:	56 57       	subi	r21, 0x76	; 118
    71d8:	58 59       	subi	r21, 0x98	; 152
    71da:	5a 5b       	subi	r21, 0xBA	; 186
    71dc:	5c 5d       	subi	r21, 0xDC	; 220
    71de:	5e 5f       	subi	r21, 0xFE	; 254
    71e0:	60 61       	ori	r22, 0x10	; 16
    71e2:	62 63       	ori	r22, 0x32	; 50
    71e4:	64 65       	ori	r22, 0x54	; 84
    71e6:	66 67       	ori	r22, 0x76	; 118
    71e8:	68 69       	ori	r22, 0x98	; 152
    71ea:	6a 6b       	ori	r22, 0xBA	; 186
    71ec:	6c 6d       	ori	r22, 0xDC	; 220
    71ee:	6e 6f       	ori	r22, 0xFE	; 254
    71f0:	70 71       	andi	r23, 0x10	; 16
    71f2:	72 73       	andi	r23, 0x32	; 50
    71f4:	74 75       	andi	r23, 0x54	; 84
    71f6:	76 77       	andi	r23, 0x76	; 118
    71f8:	78 79       	andi	r23, 0x98	; 152
    71fa:	7a 7b       	andi	r23, 0xBA	; 186
    71fc:	7c 7d       	andi	r23, 0xDC	; 220
    71fe:	7e 7f       	andi	r23, 0xFE	; 254
    7200:	00 02       	muls	r16, r16
    7202:	04 06       	cpc	r0, r20
    7204:	08 0a       	sbc	r0, r24
    7206:	0c 0e       	add	r0, r28
    7208:	10 12       	cpse	r1, r16
    720a:	14 16       	cp	r1, r20
    720c:	18 1a       	sub	r1, r24
    720e:	1c 1e       	adc	r1, r28
    7210:	20 22       	and	r2, r16
    7212:	24 26       	eor	r2, r20
    7214:	28 2a       	or	r2, r24
    7216:	2c 2e       	mov	r2, r28
    7218:	30 32       	cpi	r19, 0x20	; 32
    721a:	34 36       	cpi	r19, 0x64	; 100
    721c:	38 3a       	cpi	r19, 0xA8	; 168
    721e:	3c 3e       	cpi	r19, 0xEC	; 236
    7220:	40 42       	sbci	r20, 0x20	; 32
    7222:	44 46       	sbci	r20, 0x64	; 100
    7224:	48 4a       	sbci	r20, 0xA8	; 168
    7226:	4c 4e       	sbci	r20, 0xEC	; 236
    7228:	50 52       	subi	r21, 0x20	; 32
    722a:	54 56       	subi	r21, 0x64	; 100
    722c:	58 5a       	subi	r21, 0xA8	; 168
    722e:	5c 5e       	subi	r21, 0xEC	; 236
    7230:	60 62       	ori	r22, 0x20	; 32
    7232:	64 66       	ori	r22, 0x64	; 100
    7234:	68 6a       	ori	r22, 0xA8	; 168
    7236:	6c 6e       	ori	r22, 0xEC	; 236
    7238:	70 72       	andi	r23, 0x20	; 32
    723a:	74 76       	andi	r23, 0x64	; 100
    723c:	78 7a       	andi	r23, 0xA8	; 168
    723e:	7c 7e       	andi	r23, 0xEC	; 236
    7240:	7f 7d       	andi	r23, 0xDF	; 223
    7242:	7b 79       	andi	r23, 0x9B	; 155
    7244:	77 75       	andi	r23, 0x57	; 87
    7246:	73 71       	andi	r23, 0x13	; 19
    7248:	6f 6d       	ori	r22, 0xDF	; 223
    724a:	6b 69       	ori	r22, 0x9B	; 155
    724c:	67 65       	ori	r22, 0x57	; 87
    724e:	63 61       	ori	r22, 0x13	; 19
    7250:	5f 5d       	subi	r21, 0xDF	; 223
    7252:	5b 59       	subi	r21, 0x9B	; 155
    7254:	57 55       	subi	r21, 0x57	; 87
    7256:	53 51       	subi	r21, 0x13	; 19
    7258:	4f 4d       	sbci	r20, 0xDF	; 223
    725a:	4b 49       	sbci	r20, 0x9B	; 155
    725c:	47 45       	sbci	r20, 0x57	; 87
    725e:	43 41       	sbci	r20, 0x13	; 19
    7260:	3f 3d       	cpi	r19, 0xDF	; 223
    7262:	3b 39       	cpi	r19, 0x9B	; 155
    7264:	37 35       	cpi	r19, 0x57	; 87
    7266:	33 31       	cpi	r19, 0x13	; 19
    7268:	2f 2d       	mov	r18, r15
    726a:	2b 29       	or	r18, r11
    726c:	27 25       	eor	r18, r7
    726e:	23 21       	and	r18, r3
    7270:	1f 1d       	adc	r17, r15
    7272:	1b 19       	sub	r17, r11
    7274:	17 15       	cp	r17, r7
    7276:	13 11       	cpse	r17, r3
    7278:	0f 0d       	add	r16, r15
    727a:	0b 09       	sbc	r16, r11
    727c:	07 05       	cpc	r16, r7
    727e:	03 01       	movw	r0, r6
    7280:	ff fd       	.word	0xfdff	; ????
    7282:	fb f9       	.word	0xf9fb	; ????
    7284:	f7 f5       	brid	.+124    	; 0x7302 <waves+0x302>
    7286:	f3 f1       	brvs	.+124    	; 0x7304 <waves+0x304>
    7288:	ef ed       	ldi	r30, 0xDF	; 223
    728a:	eb e9       	ldi	r30, 0x9B	; 155
    728c:	e7 e5       	ldi	r30, 0x57	; 87
    728e:	e3 e1       	ldi	r30, 0x13	; 19
    7290:	df dd       	rcall	.-1090   	; 0x6e50 <steptable+0x48>
    7292:	db d9       	rcall	.-3146   	; 0x664a <StopSong+0x8>
    7294:	d7 d5       	rcall	.+2990   	; 0x7e44 <DisplayLogo+0x8>
    7296:	d3 d1       	rcall	.+934    	; 0x763e <waves+0x63e>
    7298:	cf cd       	rjmp	.-1122   	; 0x6e38 <steptable+0x30>
    729a:	cb c9       	rjmp	.-3178   	; 0x6632 <InitMusicPlayer+0x34>
    729c:	c7 c5       	rjmp	.+2958   	; 0x7e2c <WaitVsync+0x1e>
    729e:	c3 c1       	rjmp	.+902    	; 0x7626 <waves+0x626>
    72a0:	bf bd       	out	0x2f, r27	; 47
    72a2:	bb b9       	out	0x0b, r27	; 11
    72a4:	b7 b5       	in	r27, 0x27	; 39
    72a6:	b3 b1       	in	r27, 0x03	; 3
    72a8:	af ad       	ldd	r26, Y+63	; 0x3f
    72aa:	ab a9       	ldd	r26, Y+51	; 0x33
    72ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    72ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    72b0:	9f 9d       	mul	r25, r15
    72b2:	9b 99       	sbic	0x13, 3	; 19
    72b4:	97 95       	ror	r25
    72b6:	93 91       	.word	0x9193	; ????
    72b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    72ba:	8b 89       	ldd	r24, Y+19	; 0x13
    72bc:	87 85       	ldd	r24, Z+15	; 0x0f
    72be:	83 81       	ldd	r24, Z+3	; 0x03
    72c0:	80 82       	st	Z, r8
    72c2:	84 86       	std	Z+12, r8	; 0x0c
    72c4:	88 8a       	std	Y+16, r8	; 0x10
    72c6:	8c 8e       	std	Y+28, r8	; 0x1c
    72c8:	90 92 94 96 	sts	0x9694, r9
    72cc:	98 9a       	sbi	0x13, 0	; 19
    72ce:	9c 9e       	mul	r9, r28
    72d0:	a0 a2       	std	Z+32, r10	; 0x20
    72d2:	a4 a6       	std	Z+44, r10	; 0x2c
    72d4:	a8 aa       	std	Y+48, r10	; 0x30
    72d6:	ac ae       	std	Y+60, r10	; 0x3c
    72d8:	b0 b2       	in	r11, 0x10	; 16
    72da:	b4 b6       	in	r11, 0x34	; 52
    72dc:	b8 ba       	out	0x18, r11	; 24
    72de:	bc be       	out	0x3c, r11	; 60
    72e0:	c0 c2       	rjmp	.+1408   	; 0x7862 <waves+0x862>
    72e2:	c4 c6       	rjmp	.+3464   	; 0x806c <LBPrintStr+0x42>
    72e4:	c8 ca       	rjmp	.-2672   	; 0x6876 <ProcessMusic+0x4>
    72e6:	cc ce       	rjmp	.-616    	; 0x7080 <waves+0x80>
    72e8:	d0 d2       	rcall	.+1440   	; 0x788a <waves+0x88a>
    72ea:	d4 d6       	rcall	.+3496   	; 0x8094 <LBCollides+0x8>
    72ec:	d8 da       	rcall	.-2640   	; 0x689e <ProcessMusic+0x2c>
    72ee:	dc de       	rcall	.-584    	; 0x70a8 <waves+0xa8>
    72f0:	e0 e2       	ldi	r30, 0x20	; 32
    72f2:	e4 e6       	ldi	r30, 0x64	; 100
    72f4:	e8 ea       	ldi	r30, 0xA8	; 168
    72f6:	ec ee       	ldi	r30, 0xEC	; 236
    72f8:	f0 f2       	brcs	.-68     	; 0x72b6 <waves+0x2b6>
    72fa:	f4 f6       	brge	.-68     	; 0x72b8 <waves+0x2b8>
    72fc:	f8 fa       	.word	0xfaf8	; ????
    72fe:	fc fe       	.word	0xfefc	; ????
    7300:	7f 7f       	andi	r23, 0xFF	; 255
    7302:	7f 7f       	andi	r23, 0xFF	; 255
    7304:	7f 7f       	andi	r23, 0xFF	; 255
    7306:	7f 7f       	andi	r23, 0xFF	; 255
    7308:	7f 7f       	andi	r23, 0xFF	; 255
    730a:	7f 7f       	andi	r23, 0xFF	; 255
    730c:	7f 7f       	andi	r23, 0xFF	; 255
    730e:	7f 7f       	andi	r23, 0xFF	; 255
    7310:	7f 7f       	andi	r23, 0xFF	; 255
    7312:	7f 7f       	andi	r23, 0xFF	; 255
    7314:	7f 7f       	andi	r23, 0xFF	; 255
    7316:	7f 7f       	andi	r23, 0xFF	; 255
    7318:	7f 7f       	andi	r23, 0xFF	; 255
    731a:	7f 7f       	andi	r23, 0xFF	; 255
    731c:	7f 7f       	andi	r23, 0xFF	; 255
    731e:	7f 7f       	andi	r23, 0xFF	; 255
    7320:	7f 7f       	andi	r23, 0xFF	; 255
    7322:	7f 7f       	andi	r23, 0xFF	; 255
    7324:	7f 7f       	andi	r23, 0xFF	; 255
    7326:	7f 7f       	andi	r23, 0xFF	; 255
    7328:	7f 7f       	andi	r23, 0xFF	; 255
    732a:	7f 7f       	andi	r23, 0xFF	; 255
    732c:	7f 7f       	andi	r23, 0xFF	; 255
    732e:	7f 7f       	andi	r23, 0xFF	; 255
    7330:	7f 7f       	andi	r23, 0xFF	; 255
    7332:	7f 7f       	andi	r23, 0xFF	; 255
    7334:	7f 7f       	andi	r23, 0xFF	; 255
    7336:	7f 7f       	andi	r23, 0xFF	; 255
    7338:	7f 7f       	andi	r23, 0xFF	; 255
    733a:	7f 7f       	andi	r23, 0xFF	; 255
    733c:	7f 7f       	andi	r23, 0xFF	; 255
    733e:	7f 7f       	andi	r23, 0xFF	; 255
    7340:	80 80       	ld	r8, Z
    7342:	80 80       	ld	r8, Z
    7344:	80 80       	ld	r8, Z
    7346:	80 80       	ld	r8, Z
    7348:	80 80       	ld	r8, Z
    734a:	80 80       	ld	r8, Z
    734c:	80 80       	ld	r8, Z
    734e:	80 80       	ld	r8, Z
    7350:	80 80       	ld	r8, Z
    7352:	80 80       	ld	r8, Z
    7354:	80 80       	ld	r8, Z
    7356:	80 80       	ld	r8, Z
    7358:	80 80       	ld	r8, Z
    735a:	80 80       	ld	r8, Z
    735c:	80 80       	ld	r8, Z
    735e:	80 80       	ld	r8, Z
    7360:	80 80       	ld	r8, Z
    7362:	80 80       	ld	r8, Z
    7364:	80 80       	ld	r8, Z
    7366:	80 80       	ld	r8, Z
    7368:	80 80       	ld	r8, Z
    736a:	80 80       	ld	r8, Z
    736c:	80 80       	ld	r8, Z
    736e:	80 80       	ld	r8, Z
    7370:	80 80       	ld	r8, Z
    7372:	80 80       	ld	r8, Z
    7374:	80 80       	ld	r8, Z
    7376:	80 80       	ld	r8, Z
    7378:	80 80       	ld	r8, Z
    737a:	80 80       	ld	r8, Z
    737c:	80 80       	ld	r8, Z
    737e:	80 80       	ld	r8, Z
    7380:	80 80       	ld	r8, Z
    7382:	80 80       	ld	r8, Z
    7384:	80 80       	ld	r8, Z
    7386:	80 80       	ld	r8, Z
    7388:	80 80       	ld	r8, Z
    738a:	80 80       	ld	r8, Z
    738c:	80 80       	ld	r8, Z
    738e:	80 80       	ld	r8, Z
    7390:	80 80       	ld	r8, Z
    7392:	80 80       	ld	r8, Z
    7394:	80 80       	ld	r8, Z
    7396:	80 80       	ld	r8, Z
    7398:	80 80       	ld	r8, Z
    739a:	80 80       	ld	r8, Z
    739c:	80 80       	ld	r8, Z
    739e:	80 80       	ld	r8, Z
    73a0:	80 80       	ld	r8, Z
    73a2:	80 80       	ld	r8, Z
    73a4:	80 80       	ld	r8, Z
    73a6:	80 80       	ld	r8, Z
    73a8:	80 80       	ld	r8, Z
    73aa:	80 80       	ld	r8, Z
    73ac:	80 80       	ld	r8, Z
    73ae:	80 80       	ld	r8, Z
    73b0:	80 80       	ld	r8, Z
    73b2:	80 80       	ld	r8, Z
    73b4:	80 80       	ld	r8, Z
    73b6:	80 80       	ld	r8, Z
    73b8:	80 80       	ld	r8, Z
    73ba:	80 80       	ld	r8, Z
    73bc:	80 80       	ld	r8, Z
    73be:	80 80       	ld	r8, Z
    73c0:	80 80       	ld	r8, Z
    73c2:	80 80       	ld	r8, Z
    73c4:	80 80       	ld	r8, Z
    73c6:	80 80       	ld	r8, Z
    73c8:	80 80       	ld	r8, Z
    73ca:	80 80       	ld	r8, Z
    73cc:	80 80       	ld	r8, Z
    73ce:	80 80       	ld	r8, Z
    73d0:	80 80       	ld	r8, Z
    73d2:	80 80       	ld	r8, Z
    73d4:	80 80       	ld	r8, Z
    73d6:	80 80       	ld	r8, Z
    73d8:	80 80       	ld	r8, Z
    73da:	80 80       	ld	r8, Z
    73dc:	80 80       	ld	r8, Z
    73de:	80 80       	ld	r8, Z
    73e0:	80 80       	ld	r8, Z
    73e2:	80 80       	ld	r8, Z
    73e4:	80 80       	ld	r8, Z
    73e6:	80 80       	ld	r8, Z
    73e8:	80 80       	ld	r8, Z
    73ea:	80 80       	ld	r8, Z
    73ec:	80 80       	ld	r8, Z
    73ee:	80 80       	ld	r8, Z
    73f0:	80 80       	ld	r8, Z
    73f2:	80 80       	ld	r8, Z
    73f4:	80 80       	ld	r8, Z
    73f6:	80 80       	ld	r8, Z
    73f8:	80 80       	ld	r8, Z
    73fa:	80 80       	ld	r8, Z
    73fc:	80 80       	ld	r8, Z
    73fe:	80 80       	ld	r8, Z
    7400:	7f 7f       	andi	r23, 0xFF	; 255
    7402:	7f 7f       	andi	r23, 0xFF	; 255
    7404:	7f 7f       	andi	r23, 0xFF	; 255
    7406:	7f 7f       	andi	r23, 0xFF	; 255
    7408:	7f 7f       	andi	r23, 0xFF	; 255
    740a:	7f 7f       	andi	r23, 0xFF	; 255
    740c:	7f 7f       	andi	r23, 0xFF	; 255
    740e:	7f 7f       	andi	r23, 0xFF	; 255
    7410:	7f 7f       	andi	r23, 0xFF	; 255
    7412:	7f 7f       	andi	r23, 0xFF	; 255
    7414:	7f 7f       	andi	r23, 0xFF	; 255
    7416:	7f 7f       	andi	r23, 0xFF	; 255
    7418:	7f 7f       	andi	r23, 0xFF	; 255
    741a:	7f 7f       	andi	r23, 0xFF	; 255
    741c:	7f 7f       	andi	r23, 0xFF	; 255
    741e:	7f 7f       	andi	r23, 0xFF	; 255
    7420:	7f 7f       	andi	r23, 0xFF	; 255
    7422:	7f 7f       	andi	r23, 0xFF	; 255
    7424:	7f 7f       	andi	r23, 0xFF	; 255
    7426:	7f 7f       	andi	r23, 0xFF	; 255
    7428:	7f 7f       	andi	r23, 0xFF	; 255
    742a:	7f 7f       	andi	r23, 0xFF	; 255
    742c:	7f 7f       	andi	r23, 0xFF	; 255
    742e:	7f 7f       	andi	r23, 0xFF	; 255
    7430:	7f 7f       	andi	r23, 0xFF	; 255
    7432:	7f 7f       	andi	r23, 0xFF	; 255
    7434:	7f 7f       	andi	r23, 0xFF	; 255
    7436:	7f 7f       	andi	r23, 0xFF	; 255
    7438:	7f 7f       	andi	r23, 0xFF	; 255
    743a:	7f 7f       	andi	r23, 0xFF	; 255
    743c:	7f 7f       	andi	r23, 0xFF	; 255
    743e:	7f 7f       	andi	r23, 0xFF	; 255
    7440:	7f 7f       	andi	r23, 0xFF	; 255
    7442:	7f 7f       	andi	r23, 0xFF	; 255
    7444:	7f 7f       	andi	r23, 0xFF	; 255
    7446:	7f 7f       	andi	r23, 0xFF	; 255
    7448:	7f 7f       	andi	r23, 0xFF	; 255
    744a:	7f 7f       	andi	r23, 0xFF	; 255
    744c:	7f 7f       	andi	r23, 0xFF	; 255
    744e:	7f 7f       	andi	r23, 0xFF	; 255
    7450:	7f 7f       	andi	r23, 0xFF	; 255
    7452:	7f 7f       	andi	r23, 0xFF	; 255
    7454:	7f 7f       	andi	r23, 0xFF	; 255
    7456:	7f 7f       	andi	r23, 0xFF	; 255
    7458:	7f 7f       	andi	r23, 0xFF	; 255
    745a:	7f 7f       	andi	r23, 0xFF	; 255
    745c:	7f 7f       	andi	r23, 0xFF	; 255
    745e:	7f 7f       	andi	r23, 0xFF	; 255
    7460:	7f 7f       	andi	r23, 0xFF	; 255
    7462:	7f 7f       	andi	r23, 0xFF	; 255
    7464:	7f 7f       	andi	r23, 0xFF	; 255
    7466:	7f 7f       	andi	r23, 0xFF	; 255
    7468:	7f 7f       	andi	r23, 0xFF	; 255
    746a:	7f 7f       	andi	r23, 0xFF	; 255
    746c:	7f 7f       	andi	r23, 0xFF	; 255
    746e:	7f 7f       	andi	r23, 0xFF	; 255
    7470:	7f 7f       	andi	r23, 0xFF	; 255
    7472:	7f 7f       	andi	r23, 0xFF	; 255
    7474:	7f 7f       	andi	r23, 0xFF	; 255
    7476:	7f 7f       	andi	r23, 0xFF	; 255
    7478:	7f 7f       	andi	r23, 0xFF	; 255
    747a:	7f 7f       	andi	r23, 0xFF	; 255
    747c:	7f 7f       	andi	r23, 0xFF	; 255
    747e:	7f 7f       	andi	r23, 0xFF	; 255
    7480:	80 80       	ld	r8, Z
    7482:	80 80       	ld	r8, Z
    7484:	80 80       	ld	r8, Z
    7486:	80 80       	ld	r8, Z
    7488:	80 80       	ld	r8, Z
    748a:	80 80       	ld	r8, Z
    748c:	80 80       	ld	r8, Z
    748e:	80 80       	ld	r8, Z
    7490:	80 80       	ld	r8, Z
    7492:	80 80       	ld	r8, Z
    7494:	80 80       	ld	r8, Z
    7496:	80 80       	ld	r8, Z
    7498:	80 80       	ld	r8, Z
    749a:	80 80       	ld	r8, Z
    749c:	80 80       	ld	r8, Z
    749e:	80 80       	ld	r8, Z
    74a0:	80 80       	ld	r8, Z
    74a2:	80 80       	ld	r8, Z
    74a4:	80 80       	ld	r8, Z
    74a6:	80 80       	ld	r8, Z
    74a8:	80 80       	ld	r8, Z
    74aa:	80 80       	ld	r8, Z
    74ac:	80 80       	ld	r8, Z
    74ae:	80 80       	ld	r8, Z
    74b0:	80 80       	ld	r8, Z
    74b2:	80 80       	ld	r8, Z
    74b4:	80 80       	ld	r8, Z
    74b6:	80 80       	ld	r8, Z
    74b8:	80 80       	ld	r8, Z
    74ba:	80 80       	ld	r8, Z
    74bc:	80 80       	ld	r8, Z
    74be:	80 80       	ld	r8, Z
    74c0:	80 80       	ld	r8, Z
    74c2:	80 80       	ld	r8, Z
    74c4:	80 80       	ld	r8, Z
    74c6:	80 80       	ld	r8, Z
    74c8:	80 80       	ld	r8, Z
    74ca:	80 80       	ld	r8, Z
    74cc:	80 80       	ld	r8, Z
    74ce:	80 80       	ld	r8, Z
    74d0:	80 80       	ld	r8, Z
    74d2:	80 80       	ld	r8, Z
    74d4:	80 80       	ld	r8, Z
    74d6:	80 80       	ld	r8, Z
    74d8:	80 80       	ld	r8, Z
    74da:	80 80       	ld	r8, Z
    74dc:	80 80       	ld	r8, Z
    74de:	80 80       	ld	r8, Z
    74e0:	80 80       	ld	r8, Z
    74e2:	80 80       	ld	r8, Z
    74e4:	80 80       	ld	r8, Z
    74e6:	80 80       	ld	r8, Z
    74e8:	80 80       	ld	r8, Z
    74ea:	80 80       	ld	r8, Z
    74ec:	80 80       	ld	r8, Z
    74ee:	80 80       	ld	r8, Z
    74f0:	80 80       	ld	r8, Z
    74f2:	80 80       	ld	r8, Z
    74f4:	80 80       	ld	r8, Z
    74f6:	80 80       	ld	r8, Z
    74f8:	80 80       	ld	r8, Z
    74fa:	80 80       	ld	r8, Z
    74fc:	80 80       	ld	r8, Z
    74fe:	80 80       	ld	r8, Z
    7500:	7f 7f       	andi	r23, 0xFF	; 255
    7502:	7f 7f       	andi	r23, 0xFF	; 255
    7504:	7f 7f       	andi	r23, 0xFF	; 255
    7506:	7f 7f       	andi	r23, 0xFF	; 255
    7508:	7f 7f       	andi	r23, 0xFF	; 255
    750a:	7f 7f       	andi	r23, 0xFF	; 255
    750c:	7f 7f       	andi	r23, 0xFF	; 255
    750e:	7f 7f       	andi	r23, 0xFF	; 255
    7510:	7f 7f       	andi	r23, 0xFF	; 255
    7512:	7f 7f       	andi	r23, 0xFF	; 255
    7514:	7f 7f       	andi	r23, 0xFF	; 255
    7516:	7f 7f       	andi	r23, 0xFF	; 255
    7518:	7f 7f       	andi	r23, 0xFF	; 255
    751a:	7f 7f       	andi	r23, 0xFF	; 255
    751c:	7f 7f       	andi	r23, 0xFF	; 255
    751e:	7f 7f       	andi	r23, 0xFF	; 255
    7520:	7f 7f       	andi	r23, 0xFF	; 255
    7522:	7f 7f       	andi	r23, 0xFF	; 255
    7524:	7f 7f       	andi	r23, 0xFF	; 255
    7526:	7f 7f       	andi	r23, 0xFF	; 255
    7528:	7f 7f       	andi	r23, 0xFF	; 255
    752a:	7f 7f       	andi	r23, 0xFF	; 255
    752c:	7f 7f       	andi	r23, 0xFF	; 255
    752e:	7f 7f       	andi	r23, 0xFF	; 255
    7530:	7f 7f       	andi	r23, 0xFF	; 255
    7532:	7f 7f       	andi	r23, 0xFF	; 255
    7534:	7f 7f       	andi	r23, 0xFF	; 255
    7536:	7f 7f       	andi	r23, 0xFF	; 255
    7538:	7f 7f       	andi	r23, 0xFF	; 255
    753a:	7f 7f       	andi	r23, 0xFF	; 255
    753c:	7f 7f       	andi	r23, 0xFF	; 255
    753e:	7f 7f       	andi	r23, 0xFF	; 255
    7540:	7f 7f       	andi	r23, 0xFF	; 255
    7542:	7f 7f       	andi	r23, 0xFF	; 255
    7544:	7f 7f       	andi	r23, 0xFF	; 255
    7546:	7f 7f       	andi	r23, 0xFF	; 255
    7548:	7f 7f       	andi	r23, 0xFF	; 255
    754a:	7f 7f       	andi	r23, 0xFF	; 255
    754c:	7f 7f       	andi	r23, 0xFF	; 255
    754e:	7f 7f       	andi	r23, 0xFF	; 255
    7550:	7f 7f       	andi	r23, 0xFF	; 255
    7552:	7f 7f       	andi	r23, 0xFF	; 255
    7554:	7f 7f       	andi	r23, 0xFF	; 255
    7556:	7f 7f       	andi	r23, 0xFF	; 255
    7558:	7f 7f       	andi	r23, 0xFF	; 255
    755a:	7f 7f       	andi	r23, 0xFF	; 255
    755c:	7f 7f       	andi	r23, 0xFF	; 255
    755e:	7f 7f       	andi	r23, 0xFF	; 255
    7560:	7f 7f       	andi	r23, 0xFF	; 255
    7562:	7f 7f       	andi	r23, 0xFF	; 255
    7564:	7f 7f       	andi	r23, 0xFF	; 255
    7566:	7f 7f       	andi	r23, 0xFF	; 255
    7568:	7f 7f       	andi	r23, 0xFF	; 255
    756a:	7f 7f       	andi	r23, 0xFF	; 255
    756c:	7f 7f       	andi	r23, 0xFF	; 255
    756e:	7f 7f       	andi	r23, 0xFF	; 255
    7570:	7f 7f       	andi	r23, 0xFF	; 255
    7572:	7f 7f       	andi	r23, 0xFF	; 255
    7574:	7f 7f       	andi	r23, 0xFF	; 255
    7576:	7f 7f       	andi	r23, 0xFF	; 255
    7578:	7f 7f       	andi	r23, 0xFF	; 255
    757a:	7f 7f       	andi	r23, 0xFF	; 255
    757c:	7f 7f       	andi	r23, 0xFF	; 255
    757e:	7f 7f       	andi	r23, 0xFF	; 255
    7580:	7f 7f       	andi	r23, 0xFF	; 255
    7582:	7f 7f       	andi	r23, 0xFF	; 255
    7584:	7f 7f       	andi	r23, 0xFF	; 255
    7586:	7f 7f       	andi	r23, 0xFF	; 255
    7588:	7f 7f       	andi	r23, 0xFF	; 255
    758a:	7f 7f       	andi	r23, 0xFF	; 255
    758c:	7f 7f       	andi	r23, 0xFF	; 255
    758e:	7f 7f       	andi	r23, 0xFF	; 255
    7590:	7f 7f       	andi	r23, 0xFF	; 255
    7592:	7f 7f       	andi	r23, 0xFF	; 255
    7594:	7f 7f       	andi	r23, 0xFF	; 255
    7596:	7f 7f       	andi	r23, 0xFF	; 255
    7598:	7f 7f       	andi	r23, 0xFF	; 255
    759a:	7f 7f       	andi	r23, 0xFF	; 255
    759c:	7f 7f       	andi	r23, 0xFF	; 255
    759e:	7f 7f       	andi	r23, 0xFF	; 255
    75a0:	7f 7f       	andi	r23, 0xFF	; 255
    75a2:	7f 7f       	andi	r23, 0xFF	; 255
    75a4:	7f 7f       	andi	r23, 0xFF	; 255
    75a6:	7f 7f       	andi	r23, 0xFF	; 255
    75a8:	7f 7f       	andi	r23, 0xFF	; 255
    75aa:	7f 7f       	andi	r23, 0xFF	; 255
    75ac:	7f 7f       	andi	r23, 0xFF	; 255
    75ae:	7f 7f       	andi	r23, 0xFF	; 255
    75b0:	7f 7f       	andi	r23, 0xFF	; 255
    75b2:	7f 7f       	andi	r23, 0xFF	; 255
    75b4:	7f 7f       	andi	r23, 0xFF	; 255
    75b6:	7f 7f       	andi	r23, 0xFF	; 255
    75b8:	7f 7f       	andi	r23, 0xFF	; 255
    75ba:	7f 7f       	andi	r23, 0xFF	; 255
    75bc:	7f 7f       	andi	r23, 0xFF	; 255
    75be:	7f 7f       	andi	r23, 0xFF	; 255
    75c0:	80 80       	ld	r8, Z
    75c2:	80 80       	ld	r8, Z
    75c4:	80 80       	ld	r8, Z
    75c6:	80 80       	ld	r8, Z
    75c8:	80 80       	ld	r8, Z
    75ca:	80 80       	ld	r8, Z
    75cc:	80 80       	ld	r8, Z
    75ce:	80 80       	ld	r8, Z
    75d0:	80 80       	ld	r8, Z
    75d2:	80 80       	ld	r8, Z
    75d4:	80 80       	ld	r8, Z
    75d6:	80 80       	ld	r8, Z
    75d8:	80 80       	ld	r8, Z
    75da:	80 80       	ld	r8, Z
    75dc:	80 80       	ld	r8, Z
    75de:	80 80       	ld	r8, Z
    75e0:	80 80       	ld	r8, Z
    75e2:	80 80       	ld	r8, Z
    75e4:	80 80       	ld	r8, Z
    75e6:	80 80       	ld	r8, Z
    75e8:	80 80       	ld	r8, Z
    75ea:	80 80       	ld	r8, Z
    75ec:	80 80       	ld	r8, Z
    75ee:	80 80       	ld	r8, Z
    75f0:	80 80       	ld	r8, Z
    75f2:	80 80       	ld	r8, Z
    75f4:	80 80       	ld	r8, Z
    75f6:	80 80       	ld	r8, Z
    75f8:	80 80       	ld	r8, Z
    75fa:	80 80       	ld	r8, Z
    75fc:	80 80       	ld	r8, Z
    75fe:	80 80       	ld	r8, Z
    7600:	03 09       	sbc	r16, r3
    7602:	13 1e       	adc	r1, r19
    7604:	28 31       	cpi	r18, 0x18	; 24
    7606:	3a 40       	sbci	r19, 0x0A	; 10
    7608:	46 4c       	sbci	r20, 0xC6	; 198
    760a:	50 54       	subi	r21, 0x40	; 64
    760c:	58 5b       	subi	r21, 0xB8	; 184
    760e:	5e 61       	ori	r21, 0x1E	; 30
    7610:	63 65       	ori	r22, 0x53	; 83
    7612:	67 69       	ori	r22, 0x97	; 151
    7614:	6b 6c       	ori	r22, 0xCB	; 203
    7616:	6e 6f       	ori	r22, 0xFE	; 254
    7618:	70 71       	andi	r23, 0x10	; 16
    761a:	72 73       	andi	r23, 0x32	; 50
    761c:	74 75       	andi	r23, 0x54	; 84
    761e:	76 77       	andi	r23, 0x76	; 118
    7620:	77 78       	andi	r23, 0x87	; 135
    7622:	79 79       	andi	r23, 0x99	; 153
    7624:	7a 7a       	andi	r23, 0xAA	; 170
    7626:	7b 7b       	andi	r23, 0xBB	; 187
    7628:	7c 7c       	andi	r23, 0xCC	; 204
    762a:	7c 7d       	andi	r23, 0xDC	; 220
    762c:	7d 7d       	andi	r23, 0xDD	; 221
    762e:	7e 7e       	andi	r23, 0xEE	; 238
    7630:	7e 7e       	andi	r23, 0xEE	; 238
    7632:	7f 7f       	andi	r23, 0xFF	; 255
    7634:	7f 7f       	andi	r23, 0xFF	; 255
    7636:	7f 7f       	andi	r23, 0xFF	; 255
    7638:	7f 7f       	andi	r23, 0xFF	; 255
    763a:	7f 7f       	andi	r23, 0xFF	; 255
    763c:	7f 7f       	andi	r23, 0xFF	; 255
    763e:	7f 7f       	andi	r23, 0xFF	; 255
    7640:	7f 7f       	andi	r23, 0xFF	; 255
    7642:	7f 7f       	andi	r23, 0xFF	; 255
    7644:	7f 7f       	andi	r23, 0xFF	; 255
    7646:	7f 7f       	andi	r23, 0xFF	; 255
    7648:	7f 7f       	andi	r23, 0xFF	; 255
    764a:	7f 7f       	andi	r23, 0xFF	; 255
    764c:	7f 7e       	andi	r23, 0xEF	; 239
    764e:	7e 7e       	andi	r23, 0xEE	; 238
    7650:	7e 7d       	andi	r23, 0xDE	; 222
    7652:	7d 7d       	andi	r23, 0xDD	; 221
    7654:	7c 7c       	andi	r23, 0xCC	; 204
    7656:	7c 7b       	andi	r23, 0xBC	; 188
    7658:	7b 7a       	andi	r23, 0xAB	; 171
    765a:	7a 79       	andi	r23, 0x9A	; 154
    765c:	79 78       	andi	r23, 0x89	; 137
    765e:	77 77       	andi	r23, 0x77	; 119
    7660:	76 75       	andi	r23, 0x56	; 86
    7662:	74 73       	andi	r23, 0x34	; 52
    7664:	72 71       	andi	r23, 0x12	; 18
    7666:	70 6f       	ori	r23, 0xF0	; 240
    7668:	6e 6c       	ori	r22, 0xCE	; 206
    766a:	6b 69       	ori	r22, 0x9B	; 155
    766c:	67 65       	ori	r22, 0x57	; 87
    766e:	63 61       	ori	r22, 0x13	; 19
    7670:	5e 5b       	subi	r21, 0xBE	; 190
    7672:	58 54       	subi	r21, 0x48	; 72
    7674:	50 4c       	sbci	r21, 0xC0	; 192
    7676:	46 40       	sbci	r20, 0x06	; 6
    7678:	3a 31       	cpi	r19, 0x1A	; 26
    767a:	28 1e       	adc	r2, r24
    767c:	13 09       	sbc	r17, r3
    767e:	03 00       	.word	0x0003	; ????
    7680:	c6 cc       	rjmp	.-1652   	; 0x700e <waves+0xe>
    7682:	d5 db       	rcall	.-2134   	; 0x6e2e <steptable+0x26>
    7684:	df e3       	ldi	r29, 0x3F	; 63
    7686:	e5 e7       	ldi	r30, 0x75	; 117
    7688:	e9 ea       	ldi	r30, 0xA9	; 169
    768a:	eb ec       	ldi	r30, 0xCB	; 203
    768c:	ed ee       	ldi	r30, 0xED	; 237
    768e:	ef ef       	ldi	r30, 0xFF	; 255
    7690:	f0 f0       	brcs	.+60     	; 0x76ce <waves+0x6ce>
    7692:	f0 f1       	brcs	.+124    	; 0x7710 <waves+0x710>
    7694:	f1 f1       	breq	.+124    	; 0x7712 <waves+0x712>
    7696:	f1 f2       	breq	.-68     	; 0x7654 <waves+0x654>
    7698:	f2 f2       	brmi	.-68     	; 0x7656 <waves+0x656>
    769a:	f2 f2       	brmi	.-68     	; 0x7658 <waves+0x658>
    769c:	f2 f2       	brmi	.-68     	; 0x765a <waves+0x65a>
    769e:	f2 f3       	brmi	.-4      	; 0x769c <waves+0x69c>
    76a0:	f3 f3       	brvs	.-4      	; 0x769e <waves+0x69e>
    76a2:	f3 f3       	brvs	.-4      	; 0x76a0 <waves+0x6a0>
    76a4:	f3 f3       	brvs	.-4      	; 0x76a2 <waves+0x6a2>
    76a6:	f3 f3       	brvs	.-4      	; 0x76a4 <waves+0x6a4>
    76a8:	f3 f3       	brvs	.-4      	; 0x76a6 <waves+0x6a6>
    76aa:	f3 f3       	brvs	.-4      	; 0x76a8 <waves+0x6a8>
    76ac:	f3 f3       	brvs	.-4      	; 0x76aa <waves+0x6aa>
    76ae:	f3 f3       	brvs	.-4      	; 0x76ac <waves+0x6ac>
    76b0:	f3 f3       	brvs	.-4      	; 0x76ae <waves+0x6ae>
    76b2:	f3 f3       	brvs	.-4      	; 0x76b0 <waves+0x6b0>
    76b4:	f3 f3       	brvs	.-4      	; 0x76b2 <waves+0x6b2>
    76b6:	f3 f3       	brvs	.-4      	; 0x76b4 <waves+0x6b4>
    76b8:	f3 f3       	brvs	.-4      	; 0x76b6 <waves+0x6b6>
    76ba:	f3 f3       	brvs	.-4      	; 0x76b8 <waves+0x6b8>
    76bc:	f3 f3       	brvs	.-4      	; 0x76ba <waves+0x6ba>
    76be:	f3 f3       	brvs	.-4      	; 0x76bc <waves+0x6bc>
    76c0:	f3 f3       	brvs	.-4      	; 0x76be <waves+0x6be>
    76c2:	f3 f3       	brvs	.-4      	; 0x76c0 <waves+0x6c0>
    76c4:	f3 f3       	brvs	.-4      	; 0x76c2 <waves+0x6c2>
    76c6:	f3 f3       	brvs	.-4      	; 0x76c4 <waves+0x6c4>
    76c8:	f3 f3       	brvs	.-4      	; 0x76c6 <waves+0x6c6>
    76ca:	f3 f3       	brvs	.-4      	; 0x76c8 <waves+0x6c8>
    76cc:	f3 f3       	brvs	.-4      	; 0x76ca <waves+0x6ca>
    76ce:	f3 f3       	brvs	.-4      	; 0x76cc <waves+0x6cc>
    76d0:	f3 f3       	brvs	.-4      	; 0x76ce <waves+0x6ce>
    76d2:	f3 f3       	brvs	.-4      	; 0x76d0 <waves+0x6d0>
    76d4:	f3 f3       	brvs	.-4      	; 0x76d2 <waves+0x6d2>
    76d6:	f3 f3       	brvs	.-4      	; 0x76d4 <waves+0x6d4>
    76d8:	f3 f3       	brvs	.-4      	; 0x76d6 <waves+0x6d6>
    76da:	f3 f3       	brvs	.-4      	; 0x76d8 <waves+0x6d8>
    76dc:	f3 f3       	brvs	.-4      	; 0x76da <waves+0x6da>
    76de:	f3 f3       	brvs	.-4      	; 0x76dc <waves+0x6dc>
    76e0:	f2 f2       	brmi	.-68     	; 0x769e <waves+0x69e>
    76e2:	f2 f2       	brmi	.-68     	; 0x76a0 <waves+0x6a0>
    76e4:	f2 f2       	brmi	.-68     	; 0x76a2 <waves+0x6a2>
    76e6:	f2 f2       	brmi	.-68     	; 0x76a4 <waves+0x6a4>
    76e8:	f1 f1       	breq	.+124    	; 0x7766 <waves+0x766>
    76ea:	f1 f1       	breq	.+124    	; 0x7768 <waves+0x768>
    76ec:	f0 f0       	brcs	.+60     	; 0x772a <waves+0x72a>
    76ee:	f0 ef       	ldi	r31, 0xF0	; 240
    76f0:	ef ee       	ldi	r30, 0xEF	; 239
    76f2:	ed ec       	ldi	r30, 0xCD	; 205
    76f4:	eb ea       	ldi	r30, 0xAB	; 171
    76f6:	e9 e7       	ldi	r30, 0x79	; 121
    76f8:	e5 e3       	ldi	r30, 0x35	; 53
    76fa:	df db       	rcall	.-2114   	; 0x6eba <steptable+0xb2>
    76fc:	d5 cc       	rjmp	.-1622   	; 0x70a8 <waves+0xa8>
    76fe:	c6 00       	.word	0x00c6	; ????
    7700:	00 28       	or	r0, r0
    7702:	3d 42       	sbci	r19, 0x2D	; 45
    7704:	30 2d       	mov	r19, r0
    7706:	2c 2b       	or	r18, r28
    7708:	2c 2d       	mov	r18, r12
    770a:	2e 2f       	mov	r18, r30
    770c:	30 32       	cpi	r19, 0x20	; 32
    770e:	33 35       	cpi	r19, 0x53	; 83
    7710:	37 39       	cpi	r19, 0x97	; 151
    7712:	3b 3d       	cpi	r19, 0xDB	; 219
    7714:	3f 41       	sbci	r19, 0x1F	; 31
    7716:	43 45       	sbci	r20, 0x53	; 83
    7718:	48 4a       	sbci	r20, 0xA8	; 168
    771a:	4c 4e       	sbci	r20, 0xEC	; 236
    771c:	50 53       	subi	r21, 0x30	; 48
    771e:	55 57       	subi	r21, 0x75	; 117
    7720:	59 5b       	subi	r21, 0xB9	; 185
    7722:	5d 5f       	subi	r21, 0xFD	; 253
    7724:	61 63       	ori	r22, 0x31	; 49
    7726:	65 67       	ori	r22, 0x75	; 117
    7728:	69 6b       	ori	r22, 0xB9	; 185
    772a:	6c 6e       	ori	r22, 0xEC	; 236
    772c:	70 71       	andi	r23, 0x10	; 16
    772e:	73 74       	andi	r23, 0x43	; 67
    7730:	75 77       	andi	r23, 0x75	; 117
    7732:	78 79       	andi	r23, 0x98	; 152
    7734:	7a 7b       	andi	r23, 0xBA	; 186
    7736:	7c 7d       	andi	r23, 0xDC	; 220
    7738:	7d 7e       	andi	r23, 0xED	; 237
    773a:	7e 7f       	andi	r23, 0xFE	; 254
    773c:	7f 7f       	andi	r23, 0xFF	; 255
    773e:	7f 7f       	andi	r23, 0xFF	; 255
    7740:	7f 7f       	andi	r23, 0xFF	; 255
    7742:	7f 7f       	andi	r23, 0xFF	; 255
    7744:	7f 7f       	andi	r23, 0xFF	; 255
    7746:	7e 7e       	andi	r23, 0xEE	; 238
    7748:	7d 7d       	andi	r23, 0xDD	; 221
    774a:	7c 7b       	andi	r23, 0xBC	; 188
    774c:	7a 79       	andi	r23, 0x9A	; 154
    774e:	78 77       	andi	r23, 0x78	; 120
    7750:	75 74       	andi	r23, 0x45	; 69
    7752:	73 71       	andi	r23, 0x13	; 19
    7754:	70 6e       	ori	r23, 0xE0	; 224
    7756:	6c 6b       	ori	r22, 0xBC	; 188
    7758:	69 67       	ori	r22, 0x79	; 121
    775a:	65 63       	ori	r22, 0x35	; 53
    775c:	61 5f       	subi	r22, 0xF1	; 241
    775e:	5d 5b       	subi	r21, 0xBD	; 189
    7760:	59 57       	subi	r21, 0x79	; 121
    7762:	55 53       	subi	r21, 0x35	; 53
    7764:	50 4e       	sbci	r21, 0xE0	; 224
    7766:	4c 4a       	sbci	r20, 0xAC	; 172
    7768:	48 45       	sbci	r20, 0x58	; 88
    776a:	43 41       	sbci	r20, 0x13	; 19
    776c:	3f 3d       	cpi	r19, 0xDF	; 223
    776e:	3b 39       	cpi	r19, 0x9B	; 155
    7770:	37 35       	cpi	r19, 0x57	; 87
    7772:	33 32       	cpi	r19, 0x23	; 35
    7774:	30 2f       	mov	r19, r16
    7776:	2e 2d       	mov	r18, r14
    7778:	2c 2b       	or	r18, r28
    777a:	2c 2d       	mov	r18, r12
    777c:	30 42       	sbci	r19, 0x20	; 32
    777e:	3d 28       	or	r3, r13
    7780:	00 e9       	ldi	r16, 0x90	; 144
    7782:	e5 fe       	sbrs	r14, 5
    7784:	d4 d7       	rcall	.+4008   	; 0x872e <print_level_score+0x2e>
    7786:	d7 d7       	rcall	.+4014   	; 0x8736 <print_level_score+0x36>
    7788:	d6 d4       	rcall	.+2476   	; 0x8136 <LBLineIntersect+0x56>
    778a:	d2 d0       	rcall	.+420    	; 0x7930 <waves+0x930>
    778c:	ce cc       	rjmp	.-1636   	; 0x712a <waves+0x12a>
    778e:	ca c8       	rjmp	.-3692   	; 0x6924 <ProcessMusic+0xb2>
    7790:	c6 c3       	rjmp	.+1932   	; 0x7f1e <ProcessFading+0x28>
    7792:	c1 bf       	out	0x31, r28	; 49
    7794:	bd ba       	out	0x1d, r11	; 29
    7796:	b8 b6       	in	r11, 0x38	; 56
    7798:	b4 b1       	in	r27, 0x04	; 4
    779a:	af ad       	ldd	r26, Y+63	; 0x3f
    779c:	ab a9       	ldd	r26, Y+51	; 0x33
    779e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    77a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    77a2:	9f 9e       	mul	r9, r31
    77a4:	9c 9a       	sbi	0x13, 4	; 19
    77a6:	99 97       	sbiw	r26, 0x29	; 41
    77a8:	95 94       	asr	r9
    77aa:	93 91       	.word	0x9193	; ????
    77ac:	90 8f       	std	Z+24, r25	; 0x18
    77ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    77b0:	8b 8a       	std	Y+19, r8	; 0x13
    77b2:	89 88       	ldd	r8, Y+17	; 0x11
    77b4:	88 87       	std	Y+8, r24	; 0x08
    77b6:	86 85       	ldd	r24, Z+14	; 0x0e
    77b8:	85 84       	ldd	r8, Z+13	; 0x0d
    77ba:	84 84       	ldd	r8, Z+12	; 0x0c
    77bc:	83 83       	std	Z+3, r24	; 0x03
    77be:	83 83       	std	Z+3, r24	; 0x03
    77c0:	83 83       	std	Z+3, r24	; 0x03
    77c2:	83 83       	std	Z+3, r24	; 0x03
    77c4:	83 84       	ldd	r8, Z+11	; 0x0b
    77c6:	84 84       	ldd	r8, Z+12	; 0x0c
    77c8:	85 85       	ldd	r24, Z+13	; 0x0d
    77ca:	86 87       	std	Z+14, r24	; 0x0e
    77cc:	88 88       	ldd	r8, Y+16	; 0x10
    77ce:	89 8a       	std	Y+17, r8	; 0x11
    77d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    77d2:	8d 8f       	std	Y+29, r24	; 0x1d
    77d4:	90 91 93 94 	lds	r25, 0x9493
    77d8:	95 97       	sbiw	r26, 0x25	; 37
    77da:	99 9a       	sbi	0x13, 1	; 19
    77dc:	9c 9e       	mul	r9, r28
    77de:	9f a1       	ldd	r25, Y+39	; 0x27
    77e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    77e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    77e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    77e6:	af b1       	in	r26, 0x0f	; 15
    77e8:	b4 b6       	in	r11, 0x34	; 52
    77ea:	b8 ba       	out	0x18, r11	; 24
    77ec:	bd bf       	out	0x3d, r27	; 61
    77ee:	c1 c3       	rjmp	.+1922   	; 0x7f72 <LBGetNextFrame+0x2a>
    77f0:	c6 c8       	rjmp	.-3700   	; 0x697e <ProcessMusic+0x10c>
    77f2:	ca cc       	rjmp	.-1644   	; 0x7188 <waves+0x188>
    77f4:	ce d0       	rcall	.+412    	; 0x7992 <waves+0x992>
    77f6:	d2 d4       	rcall	.+2468   	; 0x819c <LBLineIntersect+0xbc>
    77f8:	d6 d7       	rcall	.+4012   	; 0x87a6 <render_hud+0x22>
    77fa:	d7 d7       	rcall	.+4014   	; 0x87aa <render_hud+0x26>
    77fc:	d4 fe       	sbrs	r13, 4
    77fe:	e5 e9       	ldi	r30, 0x95	; 149
    7800:	f9 f8       	.word	0xf8f9	; ????
    7802:	f9 f5       	brne	.+126    	; 0x7882 <waves+0x882>
    7804:	eb e1       	ldi	r30, 0x1B	; 27
    7806:	dd de       	rcall	.-582    	; 0x75c2 <waves+0x5c2>
    7808:	e0 e2       	ldi	r30, 0x20	; 32
    780a:	e4 e5       	ldi	r30, 0x54	; 84
    780c:	e6 e5       	ldi	r30, 0x56	; 86
    780e:	e4 e2       	ldi	r30, 0x24	; 36
    7810:	de d9       	rcall	.-3140   	; 0x6bce <ProcessMusic+0x35c>
    7812:	d2 ca       	rjmp	.-2652   	; 0x6db8 <esmw+0x8e>
    7814:	c1 b7       	in	r28, 0x31	; 49
    7816:	ac a2       	std	Y+36, r10	; 0x24
    7818:	99 91       	ld	r25, Y+
    781a:	8a 86       	std	Y+10, r8	; 0x0a
    781c:	83 81       	ldd	r24, Z+3	; 0x03
    781e:	80 80       	ld	r8, Z
    7820:	81 82       	std	Z+1, r8	; 0x01
    7822:	83 85       	ldd	r24, Z+11	; 0x0b
    7824:	86 88       	ldd	r8, Z+22	; 0x16
    7826:	8a 8c       	ldd	r8, Y+26	; 0x1a
    7828:	8d 8f       	std	Y+29, r24	; 0x1d
    782a:	90 92 93 95 	sts	0x9593, r9
    782e:	96 97       	sbiw	r26, 0x26	; 38
    7830:	98 99       	sbic	0x13, 0	; 19
    7832:	9a 9b       	sbis	0x13, 2	; 19
    7834:	9b 9c       	mul	r9, r11
    7836:	9d 9d       	mul	r25, r13
    7838:	9d 9e       	mul	r9, r29
    783a:	9e 9e       	mul	r9, r30
    783c:	9f 9f       	mul	r25, r31
    783e:	9f 9f       	mul	r25, r31
    7840:	9f 9f       	mul	r25, r31
    7842:	9f 9e       	mul	r9, r31
    7844:	9e 9e       	mul	r9, r30
    7846:	9d 9d       	mul	r25, r13
    7848:	9d 9c       	mul	r9, r13
    784a:	9b 9b       	sbis	0x13, 3	; 19
    784c:	9a 99       	sbic	0x13, 2	; 19
    784e:	98 97       	sbiw	r26, 0x28	; 40
    7850:	96 95       	lsr	r25
    7852:	93 92       	.word	0x9293	; ????
    7854:	90 8f       	std	Z+24, r25	; 0x18
    7856:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7858:	8a 88       	ldd	r8, Y+18	; 0x12
    785a:	86 85       	ldd	r24, Z+14	; 0x0e
    785c:	83 82       	std	Z+3, r8	; 0x03
    785e:	81 80       	ldd	r8, Z+1	; 0x01
    7860:	80 81       	ld	r24, Z
    7862:	83 86       	std	Z+11, r8	; 0x0b
    7864:	8a 91       	ld	r24, -Y
    7866:	99 a2       	std	Y+33, r9	; 0x21
    7868:	ac b7       	in	r26, 0x3c	; 60
    786a:	c1 ca       	rjmp	.-2686   	; 0x6dee <esmw+0xc4>
    786c:	d2 d9       	rcall	.-3164   	; 0x6c12 <ProcessMusic+0x3a0>
    786e:	de e2       	ldi	r29, 0x2E	; 46
    7870:	e4 e5       	ldi	r30, 0x54	; 84
    7872:	e6 e5       	ldi	r30, 0x56	; 86
    7874:	e4 e2       	ldi	r30, 0x24	; 36
    7876:	e0 de       	rcall	.-576    	; 0x7638 <waves+0x638>
    7878:	dd e1       	ldi	r29, 0x1D	; 29
    787a:	eb f5       	brvc	.+122    	; 0x78f6 <waves+0x8f6>
    787c:	f9 f8       	.word	0xf8f9	; ????
    787e:	f9 00       	.word	0x00f9	; ????
    7880:	07 08       	sbc	r0, r7
    7882:	07 0b       	sbc	r16, r23
    7884:	15 1f       	adc	r17, r21
    7886:	23 22       	and	r2, r19
    7888:	20 1e       	adc	r2, r16
    788a:	1c 1b       	sub	r17, r28
    788c:	1a 1b       	sub	r17, r26
    788e:	1c 1e       	adc	r1, r28
    7890:	22 27       	eor	r18, r18
    7892:	2e 36       	cpi	r18, 0x6E	; 110
    7894:	3f 49       	sbci	r19, 0x9F	; 159
    7896:	54 5e       	subi	r21, 0xE4	; 228
    7898:	67 6f       	ori	r22, 0xF7	; 247
    789a:	76 7a       	andi	r23, 0xA6	; 166
    789c:	7e 7f       	andi	r23, 0xFE	; 254
    789e:	7f 7f       	andi	r23, 0xFF	; 255
    78a0:	7f 7e       	andi	r23, 0xEF	; 239
    78a2:	7d 7b       	andi	r23, 0xBD	; 189
    78a4:	7a 78       	andi	r23, 0x8A	; 138
    78a6:	76 74       	andi	r23, 0x46	; 70
    78a8:	73 71       	andi	r23, 0x13	; 19
    78aa:	70 6e       	ori	r23, 0xE0	; 224
    78ac:	6d 6b       	ori	r22, 0xBD	; 189
    78ae:	6a 69       	ori	r22, 0x9A	; 154
    78b0:	68 67       	ori	r22, 0x78	; 120
    78b2:	66 65       	ori	r22, 0x56	; 86
    78b4:	65 64       	ori	r22, 0x45	; 69
    78b6:	64 63       	ori	r22, 0x34	; 52
    78b8:	63 62       	ori	r22, 0x23	; 35
    78ba:	62 62       	ori	r22, 0x22	; 34
    78bc:	61 61       	ori	r22, 0x11	; 17
    78be:	61 61       	ori	r22, 0x11	; 17
    78c0:	61 61       	ori	r22, 0x11	; 17
    78c2:	61 62       	ori	r22, 0x21	; 33
    78c4:	62 62       	ori	r22, 0x22	; 34
    78c6:	63 63       	ori	r22, 0x33	; 51
    78c8:	63 64       	ori	r22, 0x43	; 67
    78ca:	65 65       	ori	r22, 0x55	; 85
    78cc:	66 67       	ori	r22, 0x76	; 118
    78ce:	68 69       	ori	r22, 0x98	; 152
    78d0:	6a 6b       	ori	r22, 0xBA	; 186
    78d2:	6d 6e       	ori	r22, 0xED	; 237
    78d4:	70 71       	andi	r23, 0x10	; 16
    78d6:	73 74       	andi	r23, 0x43	; 67
    78d8:	76 78       	andi	r23, 0x86	; 134
    78da:	7a 7b       	andi	r23, 0xBA	; 186
    78dc:	7d 7e       	andi	r23, 0xED	; 237
    78de:	7f 7f       	andi	r23, 0xFF	; 255
    78e0:	7f 7f       	andi	r23, 0xFF	; 255
    78e2:	7e 7a       	andi	r23, 0xAE	; 174
    78e4:	76 6f       	ori	r23, 0xF6	; 246
    78e6:	67 5e       	subi	r22, 0xE7	; 231
    78e8:	54 49       	sbci	r21, 0x94	; 148
    78ea:	3f 36       	cpi	r19, 0x6F	; 111
    78ec:	2e 27       	eor	r18, r30
    78ee:	22 1e       	adc	r2, r18
    78f0:	1c 1b       	sub	r17, r28
    78f2:	1a 1b       	sub	r17, r26
    78f4:	1c 1e       	adc	r1, r28
    78f6:	20 22       	and	r2, r16
    78f8:	23 1f       	adc	r18, r19
    78fa:	15 0b       	sbc	r17, r21
    78fc:	07 08       	sbc	r0, r7
    78fe:	07 00       	.word	0x0007	; ????
    7900:	1f 31       	cpi	r17, 0x1F	; 31
    7902:	3d 44       	sbci	r19, 0x4D	; 77
    7904:	4e 53       	subi	r20, 0x3E	; 62
    7906:	54 56       	subi	r21, 0x64	; 100
    7908:	5a 5f       	subi	r21, 0xFA	; 250
    790a:	64 69       	ori	r22, 0x94	; 148
    790c:	6e 74       	andi	r22, 0x4E	; 78
    790e:	76 79       	andi	r23, 0x96	; 150
    7910:	7c 7f       	andi	r23, 0xFC	; 252
    7912:	7f 7f       	andi	r23, 0xFF	; 255
    7914:	7f 7f       	andi	r23, 0xFF	; 255
    7916:	7f 7f       	andi	r23, 0xFF	; 255
    7918:	7f 7f       	andi	r23, 0xFF	; 255
    791a:	7f 7f       	andi	r23, 0xFF	; 255
    791c:	7f 7f       	andi	r23, 0xFF	; 255
    791e:	7f 7f       	andi	r23, 0xFF	; 255
    7920:	7f 7f       	andi	r23, 0xFF	; 255
    7922:	7f 7f       	andi	r23, 0xFF	; 255
    7924:	7f 7f       	andi	r23, 0xFF	; 255
    7926:	7f 7f       	andi	r23, 0xFF	; 255
    7928:	7f 7f       	andi	r23, 0xFF	; 255
    792a:	7f 7f       	andi	r23, 0xFF	; 255
    792c:	7f 7f       	andi	r23, 0xFF	; 255
    792e:	7f 7f       	andi	r23, 0xFF	; 255
    7930:	7f 7f       	andi	r23, 0xFF	; 255
    7932:	7f 7f       	andi	r23, 0xFF	; 255
    7934:	7f 7f       	andi	r23, 0xFF	; 255
    7936:	7f 7f       	andi	r23, 0xFF	; 255
    7938:	7f 7f       	andi	r23, 0xFF	; 255
    793a:	7f 7f       	andi	r23, 0xFF	; 255
    793c:	7f 7f       	andi	r23, 0xFF	; 255
    793e:	7f 7f       	andi	r23, 0xFF	; 255
    7940:	7f 7f       	andi	r23, 0xFF	; 255
    7942:	7f 7f       	andi	r23, 0xFF	; 255
    7944:	7f 7f       	andi	r23, 0xFF	; 255
    7946:	7f 7f       	andi	r23, 0xFF	; 255
    7948:	7f 7f       	andi	r23, 0xFF	; 255
    794a:	7f 7f       	andi	r23, 0xFF	; 255
    794c:	7f 7f       	andi	r23, 0xFF	; 255
    794e:	7f 7f       	andi	r23, 0xFF	; 255
    7950:	7f 7f       	andi	r23, 0xFF	; 255
    7952:	7f 7f       	andi	r23, 0xFF	; 255
    7954:	7f 7f       	andi	r23, 0xFF	; 255
    7956:	7f 7f       	andi	r23, 0xFF	; 255
    7958:	7f 7f       	andi	r23, 0xFF	; 255
    795a:	7f 7f       	andi	r23, 0xFF	; 255
    795c:	7f 7f       	andi	r23, 0xFF	; 255
    795e:	7f 7f       	andi	r23, 0xFF	; 255
    7960:	7f 7f       	andi	r23, 0xFF	; 255
    7962:	7f 7f       	andi	r23, 0xFF	; 255
    7964:	7f 7f       	andi	r23, 0xFF	; 255
    7966:	7f 7f       	andi	r23, 0xFF	; 255
    7968:	7f 7f       	andi	r23, 0xFF	; 255
    796a:	7f 7f       	andi	r23, 0xFF	; 255
    796c:	7f 7f       	andi	r23, 0xFF	; 255
    796e:	7f 7f       	andi	r23, 0xFF	; 255
    7970:	7f 7f       	andi	r23, 0xFF	; 255
    7972:	7f 7f       	andi	r23, 0xFF	; 255
    7974:	7f 7f       	andi	r23, 0xFF	; 255
    7976:	7f 7f       	andi	r23, 0xFF	; 255
    7978:	7f 7f       	andi	r23, 0xFF	; 255
    797a:	7f 7c       	andi	r23, 0xCF	; 207
    797c:	78 71       	andi	r23, 0x18	; 24
    797e:	68 4c       	sbci	r22, 0xC8	; 200
    7980:	2c 1c       	adc	r2, r12
    7982:	12 0c       	add	r1, r2
    7984:	0a 0b       	sbc	r16, r26
    7986:	0a 05       	cpc	r16, r10
    7988:	fd f3       	brhs	.-2      	; 0x7988 <waves+0x988>
    798a:	e9 df       	rcall	.-46     	; 0x795e <waves+0x95e>
    798c:	d4 ca       	rjmp	.-2648   	; 0x6f36 <steptable+0x12e>
    798e:	c0 b7       	in	r28, 0x30	; 48
    7990:	ae a6       	std	Y+46, r10	; 0x2e
    7992:	9e 97       	sbiw	r26, 0x2e	; 46
    7994:	91 8b       	std	Z+17, r25	; 0x11
    7996:	86 85       	ldd	r24, Z+14	; 0x0e
    7998:	82 80       	ldd	r8, Z+2	; 0x02
    799a:	80 80       	ld	r8, Z
    799c:	80 80       	ld	r8, Z
    799e:	80 80       	ld	r8, Z
    79a0:	80 80       	ld	r8, Z
    79a2:	80 80       	ld	r8, Z
    79a4:	80 80       	ld	r8, Z
    79a6:	80 80       	ld	r8, Z
    79a8:	80 80       	ld	r8, Z
    79aa:	80 80       	ld	r8, Z
    79ac:	80 80       	ld	r8, Z
    79ae:	80 80       	ld	r8, Z
    79b0:	80 80       	ld	r8, Z
    79b2:	80 80       	ld	r8, Z
    79b4:	80 80       	ld	r8, Z
    79b6:	80 80       	ld	r8, Z
    79b8:	80 80       	ld	r8, Z
    79ba:	80 80       	ld	r8, Z
    79bc:	80 80       	ld	r8, Z
    79be:	80 80       	ld	r8, Z
    79c0:	80 80       	ld	r8, Z
    79c2:	80 80       	ld	r8, Z
    79c4:	80 80       	ld	r8, Z
    79c6:	80 80       	ld	r8, Z
    79c8:	80 80       	ld	r8, Z
    79ca:	80 80       	ld	r8, Z
    79cc:	80 80       	ld	r8, Z
    79ce:	80 80       	ld	r8, Z
    79d0:	80 80       	ld	r8, Z
    79d2:	80 80       	ld	r8, Z
    79d4:	80 80       	ld	r8, Z
    79d6:	80 80       	ld	r8, Z
    79d8:	80 80       	ld	r8, Z
    79da:	80 80       	ld	r8, Z
    79dc:	80 80       	ld	r8, Z
    79de:	80 80       	ld	r8, Z
    79e0:	80 80       	ld	r8, Z
    79e2:	80 80       	ld	r8, Z
    79e4:	80 80       	ld	r8, Z
    79e6:	80 80       	ld	r8, Z
    79e8:	80 80       	ld	r8, Z
    79ea:	80 80       	ld	r8, Z
    79ec:	80 80       	ld	r8, Z
    79ee:	80 80       	ld	r8, Z
    79f0:	80 80       	ld	r8, Z
    79f2:	80 80       	ld	r8, Z
    79f4:	80 87       	std	Z+8, r24	; 0x08
    79f6:	91 9d       	mul	r25, r1
    79f8:	ac c4       	rjmp	.+2392   	; 0x8352 <init_shot_state+0x28>
    79fa:	cb d4       	rcall	.+2454   	; 0x8392 <set_shot_animations+0x32>
    79fc:	dd f2       	brhs	.-74     	; 0x79b4 <waves+0x9b4>
    79fe:	fa fa       	.word	0xfafa	; ????

00007a00 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    7a00:	90 91 27 0c 	lds	r25, 0x0C27
    7a04:	e8 e1       	ldi	r30, 0x18	; 24
    7a06:	f9 e0       	ldi	r31, 0x09	; 9
    7a08:	80 e0       	ldi	r24, 0x00	; 0
    7a0a:	89 17       	cp	r24, r25
    7a0c:	49 f0       	breq	.+18     	; 0x7a20 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    7a0e:	a0 81       	ld	r26, Z
    7a10:	b1 81       	ldd	r27, Z+1	; 0x01
    7a12:	a0 5a       	subi	r26, 0xA0	; 160
    7a14:	be 4f       	sbci	r27, 0xFE	; 254
    7a16:	22 81       	ldd	r18, Z+2	; 0x02
    7a18:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    7a1a:	8f 5f       	subi	r24, 0xFF	; 255
    7a1c:	33 96       	adiw	r30, 0x03	; 3
    7a1e:	f5 cf       	rjmp	.-22     	; 0x7a0a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    7a20:	08 95       	ret

00007a22 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    7a22:	80 93 00 01 	sts	0x0100, r24
    7a26:	08 95       	ret

00007a28 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    7a28:	2f 92       	push	r2
    7a2a:	3f 92       	push	r3
    7a2c:	4f 92       	push	r4
    7a2e:	5f 92       	push	r5
    7a30:	6f 92       	push	r6
    7a32:	7f 92       	push	r7
    7a34:	8f 92       	push	r8
    7a36:	9f 92       	push	r9
    7a38:	af 92       	push	r10
    7a3a:	bf 92       	push	r11
    7a3c:	cf 92       	push	r12
    7a3e:	df 92       	push	r13
    7a40:	ef 92       	push	r14
    7a42:	ff 92       	push	r15
    7a44:	0f 93       	push	r16
    7a46:	1f 93       	push	r17
    7a48:	cf 93       	push	r28
    7a4a:	df 93       	push	r29
    7a4c:	00 d0       	rcall	.+0      	; 0x7a4e <ProcessSprites+0x26>
    7a4e:	1f 92       	push	r1
    7a50:	cd b7       	in	r28, 0x3d	; 61
    7a52:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    7a54:	10 92 27 0c 	sts	0x0C27, r1
		if(!spritesOn) return;
    7a58:	80 91 00 01 	lds	r24, 0x0100
    7a5c:	88 23       	and	r24, r24
    7a5e:	09 f4       	brne	.+2      	; 0x7a62 <ProcessSprites+0x3a>
    7a60:	a1 c0       	rjmp	.+322    	; 0x7ba4 <ProcessSprites+0x17c>
    7a62:	e8 ea       	ldi	r30, 0xA8	; 168
    7a64:	ce 2e       	mov	r12, r30
    7a66:	e4 e0       	ldi	r30, 0x04	; 4
    7a68:	de 2e       	mov	r13, r30
    7a6a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    7a6c:	f6 01       	movw	r30, r12
    7a6e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    7a70:	80 3f       	cpi	r24, 0xF0	; 240
    7a72:	09 f4       	brne	.+2      	; 0x7a76 <ProcessSprites+0x4e>
    7a74:	79 c0       	rjmp	.+242    	; 0x7b68 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    7a76:	91 81       	ldd	r25, Z+1	; 0x01
    7a78:	29 2f       	mov	r18, r25
    7a7a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    7a7c:	28 2e       	mov	r2, r24
    7a7e:	26 94       	lsr	r2
    7a80:	26 94       	lsr	r2
    7a82:	26 94       	lsr	r2
				dx=ssx&0x7;
    7a84:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    7a86:	19 f0       	breq	.+6      	; 0x7a8e <ProcessSprites+0x66>
    7a88:	72 e0       	ldi	r23, 0x02	; 2
    7a8a:	47 2e       	mov	r4, r23
    7a8c:	02 c0       	rjmp	.+4      	; 0x7a92 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    7a8e:	44 24       	eor	r4, r4
    7a90:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    7a92:	63 e0       	ldi	r22, 0x03	; 3
    7a94:	36 95       	lsr	r19
    7a96:	27 95       	ror	r18
    7a98:	6a 95       	dec	r22
    7a9a:	e1 f7       	brne	.-8      	; 0x7a94 <ProcessSprites+0x6c>
    7a9c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    7a9e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    7aa0:	19 f0       	breq	.+6      	; 0x7aa8 <ProcessSprites+0x80>
    7aa2:	52 e0       	ldi	r21, 0x02	; 2
    7aa4:	55 2e       	mov	r5, r21
    7aa6:	02 c0       	rjmp	.+4      	; 0x7aac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    7aa8:	55 24       	eor	r5, r5
    7aaa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    7aac:	29 2f       	mov	r18, r25
    7aae:	30 e0       	ldi	r19, 0x00	; 0
    7ab0:	32 2f       	mov	r19, r18
    7ab2:	22 27       	eor	r18, r18
    7ab4:	a9 01       	movw	r20, r18
    7ab6:	48 0f       	add	r20, r24
    7ab8:	51 1d       	adc	r21, r1
    7aba:	5b 83       	std	Y+3, r21	; 0x03
    7abc:	4a 83       	std	Y+2, r20	; 0x02
    7abe:	e1 2c       	mov	r14, r1
    7ac0:	f1 2c       	mov	r15, r1
    7ac2:	94 ee       	ldi	r25, 0xE4	; 228
    7ac4:	93 0d       	add	r25, r3
    7ac6:	99 83       	std	Y+1, r25	; 0x01
    7ac8:	03 2d       	mov	r16, r3
    7aca:	0e 0d       	add	r16, r14
    7acc:	0c 31       	cpi	r16, 0x1C	; 28
    7ace:	10 f0       	brcs	.+4      	; 0x7ad4 <ProcessSprites+0xac>
    7ad0:	09 81       	ldd	r16, Y+1	; 0x01
    7ad2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    7ad4:	5e e1       	ldi	r21, 0x1E	; 30
    7ad6:	05 9f       	mul	r16, r21
    7ad8:	80 01       	movw	r16, r0
    7ada:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    7adc:	be 2c       	mov	r11, r14
    7ade:	aa 24       	eor	r10, r10
    7ae0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    7ae2:	ed e1       	ldi	r30, 0x1D	; 29
    7ae4:	e7 15       	cp	r30, r7
    7ae6:	18 f4       	brcc	.+6      	; 0x7aee <ProcessSprites+0xc6>
    7ae8:	82 ee       	ldi	r24, 0xE2	; 226
    7aea:	87 0d       	add	r24, r7
    7aec:	01 c0       	rjmp	.+2      	; 0x7af0 <ProcessSprites+0xc8>
    7aee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    7af0:	a8 01       	movw	r20, r16
    7af2:	48 0f       	add	r20, r24
    7af4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    7af6:	ca 01       	movw	r24, r20
    7af8:	80 5a       	subi	r24, 0xA0	; 160
    7afa:	9e 4f       	sbci	r25, 0xFE	; 254
    7afc:	4c 01       	movw	r8, r24
    7afe:	fc 01       	movw	r30, r24
    7b00:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    7b02:	81 31       	cpi	r24, 0x11	; 17
    7b04:	e0 f0       	brcs	.+56     	; 0x7b3e <ProcessSprites+0x116>
    7b06:	60 91 27 0c 	lds	r22, 0x0C27
    7b0a:	61 31       	cpi	r22, 0x11	; 17
    7b0c:	f8 f4       	brcc	.+62     	; 0x7b4c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    7b0e:	26 2f       	mov	r18, r22
    7b10:	30 e0       	ldi	r19, 0x00	; 0
    7b12:	f9 01       	movw	r30, r18
    7b14:	ee 0f       	add	r30, r30
    7b16:	ff 1f       	adc	r31, r31
    7b18:	e2 0f       	add	r30, r18
    7b1a:	f3 1f       	adc	r31, r19
    7b1c:	e8 5e       	subi	r30, 0xE8	; 232
    7b1e:	f6 4f       	sbci	r31, 0xF6	; 246
    7b20:	51 83       	std	Z+1, r21	; 0x01
    7b22:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    7b24:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    7b26:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    7b2a:	80 91 27 0c 	lds	r24, 0x0C27
    7b2e:	f4 01       	movw	r30, r8
    7b30:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    7b32:	91 e0       	ldi	r25, 0x01	; 1
    7b34:	98 0f       	add	r25, r24
    7b36:	90 93 27 0c 	sts	0x0C27, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    7b3a:	81 31       	cpi	r24, 0x11	; 17
    7b3c:	38 f4       	brcc	.+14     	; 0x7b4c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    7b3e:	2a 81       	ldd	r18, Y+2	; 0x02
    7b40:	3b 81       	ldd	r19, Y+3	; 0x03
    7b42:	a5 01       	movw	r20, r10
    7b44:	68 2f       	mov	r22, r24
    7b46:	86 2d       	mov	r24, r6
    7b48:	0e 94 77 2e 	call	0x5cee	; 0x5cee <BlitSprite>
    7b4c:	ff ef       	ldi	r31, 0xFF	; 255
    7b4e:	af 1a       	sub	r10, r31
    7b50:	bf 0a       	sbc	r11, r31
    7b52:	73 94       	inc	r7
    7b54:	87 2d       	mov	r24, r7
    7b56:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    7b58:	84 15       	cp	r24, r4
    7b5a:	18 f2       	brcs	.-122    	; 0x7ae2 <ProcessSprites+0xba>
    7b5c:	4f ef       	ldi	r20, 0xFF	; 255
    7b5e:	e4 1a       	sub	r14, r20
    7b60:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    7b62:	e5 14       	cp	r14, r5
    7b64:	08 f4       	brcc	.+2      	; 0x7b68 <ProcessSprites+0x140>
    7b66:	b0 cf       	rjmp	.-160    	; 0x7ac8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    7b68:	63 94       	inc	r6
    7b6a:	84 e0       	ldi	r24, 0x04	; 4
    7b6c:	c8 0e       	add	r12, r24
    7b6e:	d1 1c       	adc	r13, r1
    7b70:	9c e0       	ldi	r25, 0x0C	; 12
    7b72:	69 12       	cpse	r6, r25
    7b74:	7b cf       	rjmp	.-266    	; 0x7a6c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    7b76:	0f 90       	pop	r0
    7b78:	0f 90       	pop	r0
    7b7a:	0f 90       	pop	r0
    7b7c:	df 91       	pop	r29
    7b7e:	cf 91       	pop	r28
    7b80:	1f 91       	pop	r17
    7b82:	0f 91       	pop	r16
    7b84:	ff 90       	pop	r15
    7b86:	ef 90       	pop	r14
    7b88:	df 90       	pop	r13
    7b8a:	cf 90       	pop	r12
    7b8c:	bf 90       	pop	r11
    7b8e:	af 90       	pop	r10
    7b90:	9f 90       	pop	r9
    7b92:	8f 90       	pop	r8
    7b94:	7f 90       	pop	r7
    7b96:	6f 90       	pop	r6
    7b98:	5f 90       	pop	r5
    7b9a:	4f 90       	pop	r4
    7b9c:	3f 90       	pop	r3
    7b9e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    7ba0:	0c 94 00 3d 	jmp	0x7a00	; 0x7a00 <RestoreBackground>

	}
    7ba4:	0f 90       	pop	r0
    7ba6:	0f 90       	pop	r0
    7ba8:	0f 90       	pop	r0
    7baa:	df 91       	pop	r29
    7bac:	cf 91       	pop	r28
    7bae:	1f 91       	pop	r17
    7bb0:	0f 91       	pop	r16
    7bb2:	ff 90       	pop	r15
    7bb4:	ef 90       	pop	r14
    7bb6:	df 90       	pop	r13
    7bb8:	cf 90       	pop	r12
    7bba:	bf 90       	pop	r11
    7bbc:	af 90       	pop	r10
    7bbe:	9f 90       	pop	r9
    7bc0:	8f 90       	pop	r8
    7bc2:	7f 90       	pop	r7
    7bc4:	6f 90       	pop	r6
    7bc6:	5f 90       	pop	r5
    7bc8:	4f 90       	pop	r4
    7bca:	3f 90       	pop	r3
    7bcc:	2f 90       	pop	r2
    7bce:	08 95       	ret

00007bd0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    7bd0:	df 92       	push	r13
    7bd2:	ef 92       	push	r14
    7bd4:	ff 92       	push	r15
    7bd6:	0f 93       	push	r16
    7bd8:	1f 93       	push	r17
    7bda:	cf 93       	push	r28
    7bdc:	df 93       	push	r29
    7bde:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    7be0:	fb 01       	movw	r30, r22
    7be2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    7be4:	31 96       	adiw	r30, 0x01	; 1
    7be6:	64 91       	lpm	r22, Z
    7be8:	5f ef       	ldi	r21, 0xFF	; 255
    7bea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    7bec:	24 2f       	mov	r18, r20
    7bee:	21 70       	andi	r18, 0x01	; 1
    7bf0:	40 ff       	sbrs	r20, 0
    7bf2:	04 c0       	rjmp	.+8      	; 0x7bfc <MapSprite2+0x2c>
			x=(mapWidth-1);
    7bf4:	95 2f       	mov	r25, r21
			dx=-1;
    7bf6:	ff 24       	eor	r15, r15
    7bf8:	fa 94       	dec	r15
    7bfa:	03 c0       	rjmp	.+6      	; 0x7c02 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    7bfc:	ff 24       	eor	r15, r15
    7bfe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    7c00:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    7c02:	41 ff       	sbrs	r20, 1
    7c04:	05 c0       	rjmp	.+10     	; 0x7c10 <MapSprite2+0x40>
			y=(mapHeight-1);
    7c06:	7f ef       	ldi	r23, 0xFF	; 255
    7c08:	76 0f       	add	r23, r22
			dy=-1;
    7c0a:	ee 24       	eor	r14, r14
    7c0c:	ea 94       	dec	r14
    7c0e:	03 c0       	rjmp	.+6      	; 0x7c16 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    7c10:	ee 24       	eor	r14, r14
    7c12:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    7c14:	70 e0       	ldi	r23, 0x00	; 0
    7c16:	21 11       	cpse	r18, r1
    7c18:	01 c0       	rjmp	.+2      	; 0x7c1c <MapSprite2+0x4c>
    7c1a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    7c1c:	00 e0       	ldi	r16, 0x00	; 0
    7c1e:	06 17       	cp	r16, r22
    7c20:	09 f1       	breq	.+66     	; 0x7c64 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7c22:	71 03       	mulsu	r23, r17
    7c24:	e0 01       	movw	r28, r0
    7c26:	11 24       	eor	r1, r1
    7c28:	d8 2e       	mov	r13, r24
    7c2a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    7c2c:	8d 15       	cp	r24, r13
    7c2e:	b1 f0       	breq	.+44     	; 0x7c5c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7c30:	9e 01       	movw	r18, r28
    7c32:	29 0f       	add	r18, r25
    7c34:	31 1d       	adc	r19, r1
    7c36:	97 fd       	sbrc	r25, 7
    7c38:	3a 95       	dec	r19
    7c3a:	2e 5f       	subi	r18, 0xFE	; 254
    7c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7c3e:	fd 01       	movw	r30, r26
    7c40:	e2 0f       	add	r30, r18
    7c42:	f3 1f       	adc	r31, r19
    7c44:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    7c46:	34 e0       	ldi	r19, 0x04	; 4
    7c48:	83 9f       	mul	r24, r19
    7c4a:	f0 01       	movw	r30, r0
    7c4c:	11 24       	eor	r1, r1
    7c4e:	e8 55       	subi	r30, 0x58	; 88
    7c50:	fb 4f       	sbci	r31, 0xFB	; 251
    7c52:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    7c54:	8f 5f       	subi	r24, 0xFF	; 255
    7c56:	43 83       	std	Z+3, r20	; 0x03
    7c58:	9f 0d       	add	r25, r15
    7c5a:	e8 cf       	rjmp	.-48     	; 0x7c2c <MapSprite2+0x5c>
    7c5c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    7c5e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7c60:	95 2f       	mov	r25, r21
    7c62:	dd cf       	rjmp	.-70     	; 0x7c1e <MapSprite2+0x4e>
	    }
	}
    7c64:	df 91       	pop	r29
    7c66:	cf 91       	pop	r28
    7c68:	1f 91       	pop	r17
    7c6a:	0f 91       	pop	r16
    7c6c:	ff 90       	pop	r15
    7c6e:	ef 90       	pop	r14
    7c70:	df 90       	pop	r13
    7c72:	08 95       	ret

00007c74 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    7c74:	0f 93       	push	r16
    7c76:	cf 93       	push	r28
    7c78:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    7c7a:	30 e0       	ldi	r19, 0x00	; 0
    7c7c:	30 17       	cp	r19, r16
    7c7e:	e1 f0       	breq	.+56     	; 0x7cb8 <MoveSprite+0x44>
    7c80:	b4 2f       	mov	r27, r20
    7c82:	a0 e2       	ldi	r26, 0x20	; 32
    7c84:	a4 0f       	add	r26, r20
    7c86:	78 2f       	mov	r23, r24
    7c88:	72 0f       	add	r23, r18
    7c8a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    7c8c:	87 17       	cp	r24, r23
    7c8e:	81 f0       	breq	.+32     	; 0x7cb0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    7c90:	c4 e0       	ldi	r28, 0x04	; 4
    7c92:	8c 9f       	mul	r24, r28
    7c94:	f0 01       	movw	r30, r0
    7c96:	11 24       	eor	r1, r1
    7c98:	e8 55       	subi	r30, 0x58	; 88
    7c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    7c9c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    7c9e:	41 3e       	cpi	r20, 0xE1	; 225
    7ca0:	51 05       	cpc	r21, r1
    7ca2:	14 f0       	brlt	.+4      	; 0x7ca8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    7ca4:	a1 83       	std	Z+1, r26	; 0x01
    7ca6:	01 c0       	rjmp	.+2      	; 0x7caa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    7ca8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    7caa:	8f 5f       	subi	r24, 0xFF	; 255
    7cac:	98 5f       	subi	r25, 0xF8	; 248
    7cae:	ee cf       	rjmp	.-36     	; 0x7c8c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    7cb0:	3f 5f       	subi	r19, 0xFF	; 255
    7cb2:	48 5f       	subi	r20, 0xF8	; 248
    7cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    7cb6:	e2 cf       	rjmp	.-60     	; 0x7c7c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    7cb8:	cf 91       	pop	r28
    7cba:	0f 91       	pop	r16
    7cbc:	08 95       	ret

00007cbe <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    7cbe:	e8 ea       	ldi	r30, 0xA8	; 168
    7cc0:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    7cc2:	80 ef       	ldi	r24, 0xF0	; 240
    7cc4:	80 83       	st	Z, r24
    7cc6:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    7cc8:	94 e0       	ldi	r25, 0x04	; 4
    7cca:	e8 3d       	cpi	r30, 0xD8	; 216
    7ccc:	f9 07       	cpc	r31, r25
    7cce:	d1 f7       	brne	.-12     	; 0x7cc4 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    7cd0:	08 95       	ret

00007cd2 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    7cd2:	4f 92       	push	r4
    7cd4:	5f 92       	push	r5
    7cd6:	6f 92       	push	r6
    7cd8:	7f 92       	push	r7
    7cda:	8f 92       	push	r8
    7cdc:	9f 92       	push	r9
    7cde:	af 92       	push	r10
    7ce0:	bf 92       	push	r11
    7ce2:	cf 92       	push	r12
    7ce4:	df 92       	push	r13
    7ce6:	ef 92       	push	r14
    7ce8:	ff 92       	push	r15
    7cea:	0f 93       	push	r16
    7cec:	1f 93       	push	r17
    7cee:	cf 93       	push	r28
    7cf0:	df 93       	push	r29
    7cf2:	68 2e       	mov	r6, r24
    7cf4:	56 2e       	mov	r5, r22
    7cf6:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    7cf8:	fa 01       	movw	r30, r20
    7cfa:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    7cfc:	31 96       	adiw	r30, 0x01	; 1
    7cfe:	84 90       	lpm	r8, Z
    7d00:	c7 2c       	mov	r12, r7
    7d02:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    7d04:	00 e0       	ldi	r16, 0x00	; 0
    7d06:	10 e0       	ldi	r17, 0x00	; 0
    7d08:	91 2c       	mov	r9, r1
    7d0a:	98 14       	cp	r9, r8
    7d0c:	f1 f0       	breq	.+60     	; 0x7d4a <DrawMap2+0x78>
    7d0e:	c0 e0       	ldi	r28, 0x00	; 0
    7d10:	d0 e0       	ldi	r29, 0x00	; 0
    7d12:	58 01       	movw	r10, r16
    7d14:	f2 e0       	ldi	r31, 0x02	; 2
    7d16:	af 0e       	add	r10, r31
    7d18:	b1 1c       	adc	r11, r1
    7d1a:	49 2c       	mov	r4, r9
    7d1c:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    7d1e:	c7 15       	cp	r28, r7
    7d20:	80 f4       	brcc	.+32     	; 0x7d42 <DrawMap2+0x70>
    7d22:	95 01       	movw	r18, r10
    7d24:	2c 0f       	add	r18, r28
    7d26:	3d 1f       	adc	r19, r29
    7d28:	f7 01       	movw	r30, r14
    7d2a:	e2 0f       	add	r30, r18
    7d2c:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    7d2e:	24 91       	lpm	r18, Z
    7d30:	42 2f       	mov	r20, r18
    7d32:	50 e0       	ldi	r21, 0x00	; 0
    7d34:	64 2d       	mov	r22, r4
    7d36:	8c 2f       	mov	r24, r28
    7d38:	86 0d       	add	r24, r6
    7d3a:	0e 94 ee 30 	call	0x61dc	; 0x61dc <SetTile>
    7d3e:	21 96       	adiw	r28, 0x01	; 1
    7d40:	ee cf       	rjmp	.-36     	; 0x7d1e <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    7d42:	93 94       	inc	r9
    7d44:	0c 0d       	add	r16, r12
    7d46:	1d 1d       	adc	r17, r13
    7d48:	e0 cf       	rjmp	.-64     	; 0x7d0a <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    7d4a:	df 91       	pop	r29
    7d4c:	cf 91       	pop	r28
    7d4e:	1f 91       	pop	r17
    7d50:	0f 91       	pop	r16
    7d52:	ff 90       	pop	r15
    7d54:	ef 90       	pop	r14
    7d56:	df 90       	pop	r13
    7d58:	cf 90       	pop	r12
    7d5a:	bf 90       	pop	r11
    7d5c:	af 90       	pop	r10
    7d5e:	9f 90       	pop	r9
    7d60:	8f 90       	pop	r8
    7d62:	7f 90       	pop	r7
    7d64:	6f 90       	pop	r6
    7d66:	5f 90       	pop	r5
    7d68:	4f 90       	pop	r4
    7d6a:	08 95       	ret

00007d6c <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    7d6c:	df 92       	push	r13
    7d6e:	ef 92       	push	r14
    7d70:	ff 92       	push	r15
    7d72:	0f 93       	push	r16
    7d74:	1f 93       	push	r17
    7d76:	cf 93       	push	r28
    7d78:	df 93       	push	r29
    7d7a:	f6 2e       	mov	r15, r22
    7d7c:	04 2f       	mov	r16, r20
    7d7e:	d2 2e       	mov	r13, r18
    7d80:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    7d82:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    7d84:	8a e0       	ldi	r24, 0x0A	; 10
    7d86:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    7d88:	01 11       	cpse	r16, r1
    7d8a:	02 c0       	rjmp	.+4      	; 0x7d90 <PrintByte+0x24>
    7d8c:	11 11       	cpse	r17, r1
    7d8e:	07 c0       	rjmp	.+14     	; 0x7d9e <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    7d90:	80 2f       	mov	r24, r16
    7d92:	6e 2d       	mov	r22, r14
    7d94:	0e 94 cc 51 	call	0xa398	; 0xa398 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    7d98:	40 e1       	ldi	r20, 0x10	; 16
    7d9a:	49 0f       	add	r20, r25
    7d9c:	05 c0       	rjmp	.+10     	; 0x7da8 <PrintByte+0x3c>
		}else{
			if(zeropad){
    7d9e:	dd 20       	and	r13, r13
    7da0:	11 f0       	breq	.+4      	; 0x7da6 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    7da2:	40 e1       	ldi	r20, 0x10	; 16
    7da4:	01 c0       	rjmp	.+2      	; 0x7da8 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    7da6:	40 e0       	ldi	r20, 0x00	; 0
    7da8:	6f 2d       	mov	r22, r15
    7daa:	8c 2f       	mov	r24, r28
    7dac:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <SetFont>
			}
		}
		val=val/10;
    7db0:	80 2f       	mov	r24, r16
    7db2:	6e 2d       	mov	r22, r14
    7db4:	0e 94 cc 51 	call	0xa398	; 0xa398 <__udivmodqi4>
    7db8:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    7dba:	1f 5f       	subi	r17, 0xFF	; 255
    7dbc:	21 97       	sbiw	r28, 0x01	; 1
    7dbe:	13 30       	cpi	r17, 0x03	; 3
    7dc0:	19 f7       	brne	.-58     	; 0x7d88 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    7dc2:	df 91       	pop	r29
    7dc4:	cf 91       	pop	r28
    7dc6:	1f 91       	pop	r17
    7dc8:	0f 91       	pop	r16
    7dca:	ff 90       	pop	r15
    7dcc:	ef 90       	pop	r14
    7dce:	df 90       	pop	r13
    7dd0:	08 95       	ret

00007dd2 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    7dd2:	0f 93       	push	r16
    7dd4:	1f 93       	push	r17
    7dd6:	cf 93       	push	r28
    7dd8:	df 93       	push	r29
    7dda:	06 2f       	mov	r16, r22
    7ddc:	c4 2f       	mov	r28, r20
    7dde:	d5 2f       	mov	r29, r21
    7de0:	18 2f       	mov	r17, r24
    7de2:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    7de4:	fe 01       	movw	r30, r28
    7de6:	44 91       	lpm	r20, Z
		if(c!=0){
    7de8:	44 23       	and	r20, r20
    7dea:	49 f0       	breq	.+18     	; 0x7dfe <Print+0x2c>
			c=((c&127)-32);			
    7dec:	4f 77       	andi	r20, 0x7F	; 127
    7dee:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    7df0:	60 2f       	mov	r22, r16
    7df2:	8c 2f       	mov	r24, r28
    7df4:	81 0f       	add	r24, r17
    7df6:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <SetFont>
    7dfa:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    7dfc:	f3 cf       	rjmp	.-26     	; 0x7de4 <Print+0x12>
	
}
    7dfe:	df 91       	pop	r29
    7e00:	cf 91       	pop	r28
    7e02:	1f 91       	pop	r17
    7e04:	0f 91       	pop	r16
    7e06:	08 95       	ret

00007e08 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    7e08:	40 52       	subi	r20, 0x20	; 32
    7e0a:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <SetFont>

00007e0e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    7e0e:	0f 93       	push	r16
    7e10:	1f 93       	push	r17
    7e12:	cf 93       	push	r28
    7e14:	df 93       	push	r29
    7e16:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7e18:	c0 e0       	ldi	r28, 0x00	; 0
    7e1a:	d0 e0       	ldi	r29, 0x00	; 0
    7e1c:	c0 17       	cp	r28, r16
    7e1e:	d1 07       	cpc	r29, r17
    7e20:	44 f4       	brge	.+16     	; 0x7e32 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    7e22:	0e 94 04 31 	call	0x6208	; 0x6208 <GetVsyncFlag>
    7e26:	88 23       	and	r24, r24
    7e28:	e1 f3       	breq	.-8      	; 0x7e22 <WaitVsync+0x14>
		ClearVsyncFlag();		
    7e2a:	0e 94 08 31 	call	0x6210	; 0x6210 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7e2e:	21 96       	adiw	r28, 0x01	; 1
    7e30:	f5 cf       	rjmp	.-22     	; 0x7e1c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    7e32:	df 91       	pop	r29
    7e34:	cf 91       	pop	r28
    7e36:	1f 91       	pop	r17
    7e38:	0f 91       	pop	r16
    7e3a:	08 95       	ret

00007e3c <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    7e3c:	8d e1       	ldi	r24, 0x1D	; 29
    7e3e:	99 e0       	ldi	r25, 0x09	; 9
    7e40:	0e 94 ff 32 	call	0x65fe	; 0x65fe <InitMusicPlayer>
			SetTileTable(logo_tileset);
    7e44:	8d e1       	ldi	r24, 0x1D	; 29
    7e46:	91 e0       	ldi	r25, 0x01	; 1
    7e48:	0e 94 ff 30 	call	0x61fe	; 0x61fe <SetTileTable>
			
			//draw logo
			ClearVram();
    7e4c:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <ClearVram>
			WaitVsync(15);		
    7e50:	8f e0       	ldi	r24, 0x0F	; 15
    7e52:	90 e0       	ldi	r25, 0x00	; 0
    7e54:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    7e58:	41 e0       	ldi	r20, 0x01	; 1
    7e5a:	6f ef       	ldi	r22, 0xFF	; 255
    7e5c:	80 e0       	ldi	r24, 0x00	; 0
    7e5e:	0e 94 c3 33 	call	0x6786	; 0x6786 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    7e62:	47 e0       	ldi	r20, 0x07	; 7
    7e64:	51 e0       	ldi	r21, 0x01	; 1
    7e66:	6c e0       	ldi	r22, 0x0C	; 12
    7e68:	8c e0       	ldi	r24, 0x0C	; 12
    7e6a:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
			WaitVsync(3);
    7e6e:	83 e0       	ldi	r24, 0x03	; 3
    7e70:	90 e0       	ldi	r25, 0x00	; 0
    7e72:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    7e76:	46 ef       	ldi	r20, 0xF6	; 246
    7e78:	50 e0       	ldi	r21, 0x00	; 0
    7e7a:	6c e0       	ldi	r22, 0x0C	; 12
    7e7c:	8c e0       	ldi	r24, 0x0C	; 12
    7e7e:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
			WaitVsync(2);
    7e82:	82 e0       	ldi	r24, 0x02	; 2
    7e84:	90 e0       	ldi	r25, 0x00	; 0
    7e86:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    7e8a:	47 e0       	ldi	r20, 0x07	; 7
    7e8c:	51 e0       	ldi	r21, 0x01	; 1
    7e8e:	6c e0       	ldi	r22, 0x0C	; 12
    7e90:	8c e0       	ldi	r24, 0x0C	; 12
    7e92:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    7e96:	81 e4       	ldi	r24, 0x41	; 65
    7e98:	90 e0       	ldi	r25, 0x00	; 0
    7e9a:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <WaitVsync>
			ClearVram();
    7e9e:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <ClearVram>
			WaitVsync(20);
    7ea2:	84 e1       	ldi	r24, 0x14	; 20
    7ea4:	90 e0       	ldi	r25, 0x00	; 0
    7ea6:	0c 94 07 3f 	jmp	0x7e0e	; 0x7e0e <WaitVsync>

00007eaa <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    7eaa:	80 93 25 0c 	sts	0x0C25, r24
	currFadeFrame=0;
    7eae:	10 92 29 0c 	sts	0x0C29, r1
	fadeActive=true;
    7eb2:	81 e0       	ldi	r24, 0x01	; 1
    7eb4:	80 93 28 0c 	sts	0x0C28, r24
		
	if(blocking){
    7eb8:	66 23       	and	r22, r22
    7eba:	21 f0       	breq	.+8      	; 0x7ec4 <doFade+0x1a>
		while(fadeActive==true);
    7ebc:	80 91 28 0c 	lds	r24, 0x0C28
    7ec0:	81 11       	cpse	r24, r1
    7ec2:	fc cf       	rjmp	.-8      	; 0x7ebc <doFade+0x12>
    7ec4:	08 95       	ret

00007ec6 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    7ec6:	81 11       	cpse	r24, r1
    7ec8:	03 c0       	rjmp	.+6      	; 0x7ed0 <FadeIn+0xa>
		DDRC=0xff;
    7eca:	8f ef       	ldi	r24, 0xFF	; 255
    7ecc:	87 b9       	out	0x07, r24	; 7
		return;
    7ece:	08 95       	ret
	}
	fadeStep=1;
    7ed0:	91 e0       	ldi	r25, 0x01	; 1
    7ed2:	90 93 2a 0c 	sts	0x0C2A, r25
	fadeDir=1;
    7ed6:	90 93 26 0c 	sts	0x0C26, r25
	doFade(speed,blocking);
    7eda:	0c 94 55 3f 	jmp	0x7eaa	; 0x7eaa <doFade>

00007ede <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    7ede:	81 11       	cpse	r24, r1
    7ee0:	02 c0       	rjmp	.+4      	; 0x7ee6 <FadeOut+0x8>
		DDRC=0;
    7ee2:	17 b8       	out	0x07, r1	; 7
		return;
    7ee4:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    7ee6:	9c e0       	ldi	r25, 0x0C	; 12
    7ee8:	90 93 2a 0c 	sts	0x0C2A, r25
	fadeDir=-1;
    7eec:	9f ef       	ldi	r25, 0xFF	; 255
    7eee:	90 93 26 0c 	sts	0x0C26, r25
	doFade(speed,blocking);
    7ef2:	0c 94 55 3f 	jmp	0x7eaa	; 0x7eaa <doFade>

00007ef6 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    7ef6:	80 91 28 0c 	lds	r24, 0x0C28
    7efa:	88 23       	and	r24, r24
    7efc:	01 f1       	breq	.+64     	; 0x7f3e <ProcessFading+0x48>
		if(currFadeFrame==0){
    7efe:	80 91 29 0c 	lds	r24, 0x0C29
    7f02:	81 11       	cpse	r24, r1
    7f04:	19 c0       	rjmp	.+50     	; 0x7f38 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    7f06:	80 91 25 0c 	lds	r24, 0x0C25
    7f0a:	80 93 29 0c 	sts	0x0C29, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    7f0e:	e0 91 2a 0c 	lds	r30, 0x0C2A
    7f12:	f0 e0       	ldi	r31, 0x00	; 0
    7f14:	e7 51       	subi	r30, 0x17	; 23
    7f16:	ff 4f       	sbci	r31, 0xFF	; 255
    7f18:	e4 91       	lpm	r30, Z
    7f1a:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    7f1c:	90 91 26 0c 	lds	r25, 0x0C26
    7f20:	80 91 2a 0c 	lds	r24, 0x0C2A
    7f24:	89 0f       	add	r24, r25
    7f26:	80 93 2a 0c 	sts	0x0C2A, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    7f2a:	88 23       	and	r24, r24
    7f2c:	11 f0       	breq	.+4      	; 0x7f32 <ProcessFading+0x3c>
    7f2e:	8d 30       	cpi	r24, 0x0D	; 13
    7f30:	31 f4       	brne	.+12     	; 0x7f3e <ProcessFading+0x48>
				fadeActive=false;
    7f32:	10 92 28 0c 	sts	0x0C28, r1
    7f36:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    7f38:	81 50       	subi	r24, 0x01	; 1
    7f3a:	80 93 29 0c 	sts	0x0C29, r24
    7f3e:	08 95       	ret

00007f40 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    7f40:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <ProcessFading>
		ProcessSprites();
    7f44:	0c 94 14 3d 	jmp	0x7a28	; 0x7a28 <ProcessSprites>

00007f48 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    7f48:	cf 93       	push	r28
    7f4a:	df 93       	push	r29
    7f4c:	fc 01       	movw	r30, r24
    7f4e:	eb 01       	movw	r28, r22
	*looped = 0;
    7f50:	18 82       	st	Y, r1
	anim->frame_count += 1;
    7f52:	93 81       	ldd	r25, Z+3	; 0x03
    7f54:	9f 5f       	subi	r25, 0xFF	; 255
    7f56:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    7f58:	22 81       	ldd	r18, Z+2	; 0x02
    7f5a:	80 81       	ld	r24, Z
    7f5c:	92 17       	cp	r25, r18
    7f5e:	70 f0       	brcs	.+28     	; 0x7f7c <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    7f60:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    7f62:	90 e0       	ldi	r25, 0x00	; 0
    7f64:	01 96       	adiw	r24, 0x01	; 1
    7f66:	21 81       	ldd	r18, Z+1	; 0x01
    7f68:	62 2f       	mov	r22, r18
    7f6a:	70 e0       	ldi	r23, 0x00	; 0
    7f6c:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    7f70:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    7f72:	81 11       	cpse	r24, r1
    7f74:	02 c0       	rjmp	.+4      	; 0x7f7a <LBGetNextFrame+0x32>
    7f76:	81 e0       	ldi	r24, 0x01	; 1
    7f78:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    7f7a:	80 81       	ld	r24, Z
    7f7c:	e8 0f       	add	r30, r24
    7f7e:	f1 1d       	adc	r31, r1
    7f80:	e8 0f       	add	r30, r24
    7f82:	f1 1d       	adc	r31, r1
    7f84:	84 81       	ldd	r24, Z+4	; 0x04
    7f86:	95 81       	ldd	r25, Z+5	; 0x05
}
    7f88:	df 91       	pop	r29
    7f8a:	cf 91       	pop	r28
    7f8c:	08 95       	ret

00007f8e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    7f8e:	0f 93       	push	r16
    7f90:	1f 93       	push	r17
    7f92:	cf 93       	push	r28
    7f94:	df 93       	push	r29
    7f96:	8c 01       	movw	r16, r24
    7f98:	eb 01       	movw	r28, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    7f9a:	80 e0       	ldi	r24, 0x00	; 0
    7f9c:	0e 94 0e 31 	call	0x621c	; 0x621c <ReadJoypad>
    7fa0:	f8 01       	movw	r30, r16
    7fa2:	95 83       	std	Z+5, r25	; 0x05
    7fa4:	84 83       	std	Z+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    7fa6:	20 91 ba 0b 	lds	r18, 0x0BBA
    7faa:	30 91 bb 0b 	lds	r19, 0x0BBB
    7fae:	a9 01       	movw	r20, r18
    7fb0:	40 95       	com	r20
    7fb2:	50 95       	com	r21
    7fb4:	48 23       	and	r20, r24
    7fb6:	59 23       	and	r21, r25
    7fb8:	51 83       	std	Z+1, r21	; 0x01
    7fba:	40 83       	st	Z, r20
	p1->released = p1_prev & (p1->held ^ p1_prev);
    7fbc:	ac 01       	movw	r20, r24
    7fbe:	40 95       	com	r20
    7fc0:	50 95       	com	r21
    7fc2:	24 23       	and	r18, r20
    7fc4:	35 23       	and	r19, r21
    7fc6:	33 83       	std	Z+3, r19	; 0x03
    7fc8:	22 83       	std	Z+2, r18	; 0x02
	p1_prev = p1->held;
    7fca:	90 93 bb 0b 	sts	0x0BBB, r25
    7fce:	80 93 ba 0b 	sts	0x0BBA, r24
	p2->held = ReadJoypad(1);
    7fd2:	81 e0       	ldi	r24, 0x01	; 1
    7fd4:	0e 94 0e 31 	call	0x621c	; 0x621c <ReadJoypad>
    7fd8:	9d 83       	std	Y+5, r25	; 0x05
    7fda:	8c 83       	std	Y+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    7fdc:	20 91 b8 0b 	lds	r18, 0x0BB8
    7fe0:	30 91 b9 0b 	lds	r19, 0x0BB9
    7fe4:	a9 01       	movw	r20, r18
    7fe6:	40 95       	com	r20
    7fe8:	50 95       	com	r21
    7fea:	48 23       	and	r20, r24
    7fec:	59 23       	and	r21, r25
    7fee:	59 83       	std	Y+1, r21	; 0x01
    7ff0:	48 83       	st	Y, r20
	p2->released = p2_prev & (p2->held ^ p2_prev);
    7ff2:	ac 01       	movw	r20, r24
    7ff4:	40 95       	com	r20
    7ff6:	50 95       	com	r21
    7ff8:	24 23       	and	r18, r20
    7ffa:	35 23       	and	r19, r21
    7ffc:	3b 83       	std	Y+3, r19	; 0x03
    7ffe:	2a 83       	std	Y+2, r18	; 0x02
	p2_prev = p2->held;
    8000:	90 93 b9 0b 	sts	0x0BB9, r25
    8004:	80 93 b8 0b 	sts	0x0BB8, r24
}
    8008:	df 91       	pop	r29
    800a:	cf 91       	pop	r28
    800c:	1f 91       	pop	r17
    800e:	0f 91       	pop	r16
    8010:	08 95       	ret

00008012 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    8012:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    8014:	fb 01       	movw	r30, r22
    8016:	2e 2f       	mov	r18, r30
    8018:	23 1b       	sub	r18, r19
    801a:	24 17       	cp	r18, r20
    801c:	28 f4       	brcc	.+10     	; 0x8028 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    801e:	21 91       	ld	r18, Z+
    8020:	dc 01       	movw	r26, r24
    8022:	2d 93       	st	X+, r18
    8024:	cd 01       	movw	r24, r26
    8026:	f7 cf       	rjmp	.-18     	; 0x8016 <LBCopyChars+0x4>
	}
}
    8028:	08 95       	ret

0000802a <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    802a:	af 92       	push	r10
    802c:	bf 92       	push	r11
    802e:	cf 92       	push	r12
    8030:	df 92       	push	r13
    8032:	ef 92       	push	r14
    8034:	ff 92       	push	r15
    8036:	0f 93       	push	r16
    8038:	1f 93       	push	r17
    803a:	cf 93       	push	r28
    803c:	df 93       	push	r29
    803e:	1f 92       	push	r1
    8040:	cd b7       	in	r28, 0x3d	; 61
    8042:	de b7       	in	r29, 0x3e	; 62
    8044:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    8046:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    8048:	c6 2e       	mov	r12, r22
    804a:	d1 2c       	mov	r13, r1
    804c:	90 e0       	ldi	r25, 0x00	; 0
    804e:	5c 01       	movw	r10, r24
    8050:	a4 1a       	sub	r10, r20
    8052:	b5 0a       	sbc	r11, r21
    8054:	80 2f       	mov	r24, r16
    8056:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    8058:	82 17       	cp	r24, r18
    805a:	60 f4       	brcc	.+24     	; 0x8074 <LBPrintStr+0x4a>
    805c:	c5 01       	movw	r24, r10
    805e:	80 0f       	add	r24, r16
    8060:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    8062:	f8 01       	movw	r30, r16
    8064:	41 91       	ld	r20, Z+
    8066:	8f 01       	movw	r16, r30
    8068:	b6 01       	movw	r22, r12
    806a:	29 83       	std	Y+1, r18	; 0x01
    806c:	0e 94 04 3f 	call	0x7e08	; 0x7e08 <PrintChar>
    8070:	29 81       	ldd	r18, Y+1	; 0x01
    8072:	f0 cf       	rjmp	.-32     	; 0x8054 <LBPrintStr+0x2a>
	}
}
    8074:	0f 90       	pop	r0
    8076:	df 91       	pop	r29
    8078:	cf 91       	pop	r28
    807a:	1f 91       	pop	r17
    807c:	0f 91       	pop	r16
    807e:	ff 90       	pop	r15
    8080:	ef 90       	pop	r14
    8082:	df 90       	pop	r13
    8084:	cf 90       	pop	r12
    8086:	bf 90       	pop	r11
    8088:	af 90       	pop	r10
    808a:	08 95       	ret

0000808c <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    808c:	af 92       	push	r10
    808e:	cf 92       	push	r12
    8090:	ef 92       	push	r14
    8092:	ff 92       	push	r15
    8094:	0f 93       	push	r16
    8096:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    8098:	70 e0       	ldi	r23, 0x00	; 0
    809a:	f1 2c       	mov	r15, r1
    809c:	fb 01       	movw	r30, r22
    809e:	e2 0f       	add	r30, r18
    80a0:	f1 1d       	adc	r31, r1
    80a2:	ee 15       	cp	r30, r14
    80a4:	ff 05       	cpc	r31, r15
    80a6:	a4 f0       	brlt	.+40     	; 0x80d0 <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    80a8:	ea 0c       	add	r14, r10
    80aa:	f1 1c       	adc	r15, r1
    80ac:	e6 16       	cp	r14, r22
    80ae:	f7 06       	cpc	r15, r23
    80b0:	7c f0       	brlt	.+30     	; 0x80d0 <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    80b2:	28 2f       	mov	r18, r24
    80b4:	30 e0       	ldi	r19, 0x00	; 0
    80b6:	10 e0       	ldi	r17, 0x00	; 0
    80b8:	c9 01       	movw	r24, r18
    80ba:	84 0f       	add	r24, r20
    80bc:	91 1d       	adc	r25, r1
    80be:	80 17       	cp	r24, r16
    80c0:	91 07       	cpc	r25, r17
    80c2:	34 f0       	brlt	.+12     	; 0x80d0 <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    80c4:	0c 0d       	add	r16, r12
    80c6:	11 1d       	adc	r17, r1
    80c8:	81 e0       	ldi	r24, 0x01	; 1
    80ca:	02 17       	cp	r16, r18
    80cc:	13 07       	cpc	r17, r19
    80ce:	0c f4       	brge	.+2      	; 0x80d2 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    80d0:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    80d2:	1f 91       	pop	r17
    80d4:	0f 91       	pop	r16
    80d6:	ff 90       	pop	r15
    80d8:	ef 90       	pop	r14
    80da:	cf 90       	pop	r12
    80dc:	af 90       	pop	r10
    80de:	08 95       	ret

000080e0 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    80e0:	2f 92       	push	r2
    80e2:	3f 92       	push	r3
    80e4:	4f 92       	push	r4
    80e6:	5f 92       	push	r5
    80e8:	6f 92       	push	r6
    80ea:	7f 92       	push	r7
    80ec:	8f 92       	push	r8
    80ee:	9f 92       	push	r9
    80f0:	af 92       	push	r10
    80f2:	bf 92       	push	r11
    80f4:	cf 92       	push	r12
    80f6:	df 92       	push	r13
    80f8:	ef 92       	push	r14
    80fa:	ff 92       	push	r15
    80fc:	0f 93       	push	r16
    80fe:	1f 93       	push	r17
    8100:	cf 93       	push	r28
    8102:	df 93       	push	r29
    8104:	00 d0       	rcall	.+0      	; 0x8106 <LBLineIntersect+0x26>
    8106:	00 d0       	rcall	.+0      	; 0x8108 <LBLineIntersect+0x28>
    8108:	cd b7       	in	r28, 0x3d	; 61
    810a:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    810c:	f1 2c       	mov	r15, r1
    810e:	8a 2c       	mov	r8, r10
    8110:	91 2c       	mov	r9, r1
    8112:	8e 18       	sub	r8, r14
    8114:	9f 08       	sbc	r9, r15
    8116:	a8 2e       	mov	r10, r24
    8118:	b1 2c       	mov	r11, r1
    811a:	24 2e       	mov	r2, r20
    811c:	31 2c       	mov	r3, r1
    811e:	2a 18       	sub	r2, r10
    8120:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8122:	10 e0       	ldi	r17, 0x00	; 0
    8124:	d1 2c       	mov	r13, r1
    8126:	c0 1a       	sub	r12, r16
    8128:	d1 0a       	sbc	r13, r17
    812a:	46 2f       	mov	r20, r22
    812c:	50 e0       	ldi	r21, 0x00	; 0
    812e:	5c 83       	std	Y+4, r21	; 0x04
    8130:	4b 83       	std	Y+3, r20	; 0x03
    8132:	82 2f       	mov	r24, r18
    8134:	90 e0       	ldi	r25, 0x00	; 0
    8136:	9a 83       	std	Y+2, r25	; 0x02
    8138:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    813a:	82 9c       	mul	r8, r2
    813c:	90 01       	movw	r18, r0
    813e:	83 9c       	mul	r8, r3
    8140:	30 0d       	add	r19, r0
    8142:	92 9c       	mul	r9, r2
    8144:	30 0d       	add	r19, r0
    8146:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8148:	ca 01       	movw	r24, r20
    814a:	e9 81       	ldd	r30, Y+1	; 0x01
    814c:	fa 81       	ldd	r31, Y+2	; 0x02
    814e:	8e 1b       	sub	r24, r30
    8150:	9f 0b       	sbc	r25, r31
    8152:	c8 9e       	mul	r12, r24
    8154:	b0 01       	movw	r22, r0
    8156:	c9 9e       	mul	r12, r25
    8158:	70 0d       	add	r23, r0
    815a:	d8 9e       	mul	r13, r24
    815c:	70 0d       	add	r23, r0
    815e:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8160:	62 0f       	add	r22, r18
    8162:	73 1f       	adc	r23, r19
    8164:	88 27       	eor	r24, r24
    8166:	77 fd       	sbrc	r23, 7
    8168:	80 95       	com	r24
    816a:	98 2f       	mov	r25, r24
    816c:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    8170:	2b 01       	movw	r4, r22
    8172:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8174:	20 e0       	ldi	r18, 0x00	; 0
    8176:	30 e0       	ldi	r19, 0x00	; 0
    8178:	a9 01       	movw	r20, r18
    817a:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    817e:	88 23       	and	r24, r24
    8180:	09 f4       	brne	.+2      	; 0x8184 <LBLineIntersect+0xa4>
    8182:	6c c0       	rjmp	.+216    	; 0x825c <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8184:	4b 81       	ldd	r20, Y+3	; 0x03
    8186:	5c 81       	ldd	r21, Y+4	; 0x04
    8188:	4e 19       	sub	r20, r14
    818a:	5f 09       	sbc	r21, r15
    818c:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    818e:	0a 19       	sub	r16, r10
    8190:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8192:	c4 9e       	mul	r12, r20
    8194:	c0 01       	movw	r24, r0
    8196:	c5 9e       	mul	r12, r21
    8198:	90 0d       	add	r25, r0
    819a:	d4 9e       	mul	r13, r20
    819c:	90 0d       	add	r25, r0
    819e:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    81a0:	80 9e       	mul	r8, r16
    81a2:	b0 01       	movw	r22, r0
    81a4:	81 9e       	mul	r8, r17
    81a6:	70 0d       	add	r23, r0
    81a8:	90 9e       	mul	r9, r16
    81aa:	70 0d       	add	r23, r0
    81ac:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    81ae:	68 0f       	add	r22, r24
    81b0:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    81b2:	88 27       	eor	r24, r24
    81b4:	77 fd       	sbrc	r23, 7
    81b6:	80 95       	com	r24
    81b8:	98 2f       	mov	r25, r24
    81ba:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    81be:	a3 01       	movw	r20, r6
    81c0:	92 01       	movw	r18, r4
    81c2:	0e 94 6f 52 	call	0xa4de	; 0xa4de <__divsf3>
    81c6:	4b 01       	movw	r8, r22
    81c8:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    81ca:	20 e0       	ldi	r18, 0x00	; 0
    81cc:	30 e0       	ldi	r19, 0x00	; 0
    81ce:	a9 01       	movw	r20, r18
    81d0:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    81d4:	87 fd       	sbrc	r24, 7
    81d6:	42 c0       	rjmp	.+132    	; 0x825c <LBLineIntersect+0x17c>
    81d8:	20 e0       	ldi	r18, 0x00	; 0
    81da:	30 e0       	ldi	r19, 0x00	; 0
    81dc:	40 e8       	ldi	r20, 0x80	; 128
    81de:	5f e3       	ldi	r21, 0x3F	; 63
    81e0:	c5 01       	movw	r24, r10
    81e2:	b4 01       	movw	r22, r8
    81e4:	0e 94 b5 53 	call	0xa76a	; 0xa76a <__gesf2>
    81e8:	18 16       	cp	r1, r24
    81ea:	c4 f1       	brlt	.+112    	; 0x825c <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    81ec:	2e 9c       	mul	r2, r14
    81ee:	b0 01       	movw	r22, r0
    81f0:	2f 9c       	mul	r2, r15
    81f2:	70 0d       	add	r23, r0
    81f4:	3e 9c       	mul	r3, r14
    81f6:	70 0d       	add	r23, r0
    81f8:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    81fa:	29 81       	ldd	r18, Y+1	; 0x01
    81fc:	3a 81       	ldd	r19, Y+2	; 0x02
    81fe:	8b 81       	ldd	r24, Y+3	; 0x03
    8200:	9c 81       	ldd	r25, Y+4	; 0x04
    8202:	28 1b       	sub	r18, r24
    8204:	39 0b       	sbc	r19, r25
    8206:	20 9f       	mul	r18, r16
    8208:	c0 01       	movw	r24, r0
    820a:	21 9f       	mul	r18, r17
    820c:	90 0d       	add	r25, r0
    820e:	30 9f       	mul	r19, r16
    8210:	90 0d       	add	r25, r0
    8212:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8214:	68 0f       	add	r22, r24
    8216:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8218:	88 27       	eor	r24, r24
    821a:	77 fd       	sbrc	r23, 7
    821c:	80 95       	com	r24
    821e:	98 2f       	mov	r25, r24
    8220:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8224:	a3 01       	movw	r20, r6
    8226:	92 01       	movw	r18, r4
    8228:	0e 94 6f 52 	call	0xa4de	; 0xa4de <__divsf3>
    822c:	6b 01       	movw	r12, r22
    822e:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8230:	20 e0       	ldi	r18, 0x00	; 0
    8232:	30 e0       	ldi	r19, 0x00	; 0
    8234:	a9 01       	movw	r20, r18
    8236:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    823a:	87 fd       	sbrc	r24, 7
    823c:	0f c0       	rjmp	.+30     	; 0x825c <LBLineIntersect+0x17c>
    823e:	11 e0       	ldi	r17, 0x01	; 1
    8240:	20 e0       	ldi	r18, 0x00	; 0
    8242:	30 e0       	ldi	r19, 0x00	; 0
    8244:	40 e8       	ldi	r20, 0x80	; 128
    8246:	5f e3       	ldi	r21, 0x3F	; 63
    8248:	c7 01       	movw	r24, r14
    824a:	b6 01       	movw	r22, r12
    824c:	0e 94 b5 53 	call	0xa76a	; 0xa76a <__gesf2>
    8250:	18 16       	cp	r1, r24
    8252:	0c f0       	brlt	.+2      	; 0x8256 <LBLineIntersect+0x176>
    8254:	10 e0       	ldi	r17, 0x00	; 0
    8256:	81 e0       	ldi	r24, 0x01	; 1
    8258:	81 27       	eor	r24, r17
    825a:	01 c0       	rjmp	.+2      	; 0x825e <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    825c:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    825e:	0f 90       	pop	r0
    8260:	0f 90       	pop	r0
    8262:	0f 90       	pop	r0
    8264:	0f 90       	pop	r0
    8266:	df 91       	pop	r29
    8268:	cf 91       	pop	r28
    826a:	1f 91       	pop	r17
    826c:	0f 91       	pop	r16
    826e:	ff 90       	pop	r15
    8270:	ef 90       	pop	r14
    8272:	df 90       	pop	r13
    8274:	cf 90       	pop	r12
    8276:	bf 90       	pop	r11
    8278:	af 90       	pop	r10
    827a:	9f 90       	pop	r9
    827c:	8f 90       	pop	r8
    827e:	7f 90       	pop	r7
    8280:	6f 90       	pop	r6
    8282:	5f 90       	pop	r5
    8284:	4f 90       	pop	r4
    8286:	3f 90       	pop	r3
    8288:	2f 90       	pop	r2
    828a:	08 95       	ret

0000828c <LBRandom>:

int LBRandom(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    828c:	fc 01       	movw	r30, r24
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
    828e:	90 91 b7 0b 	lds	r25, 0x0BB7
    8292:	2f ef       	ldi	r18, 0xFF	; 255
    8294:	3f e7       	ldi	r19, 0x7F	; 127
    8296:	09 2e       	mov	r0, r25
    8298:	02 c0       	rjmp	.+4      	; 0x829e <LBRandom+0x12>
    829a:	35 95       	asr	r19
    829c:	27 95       	ror	r18
    829e:	0a 94       	dec	r0
    82a0:	e2 f7       	brpl	.-8      	; 0x829a <LBRandom+0xe>
	int delta = to - from;
    82a2:	6e 1b       	sub	r22, r30
    82a4:	7f 0b       	sbc	r23, r31

	shift_count++;
    82a6:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    82a8:	90 31       	cpi	r25, 0x10	; 16
    82aa:	18 f4       	brcc	.+6      	; 0x82b2 <LBRandom+0x26>
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    82ac:	90 93 b7 0b 	sts	0x0BB7, r25
    82b0:	02 c0       	rjmp	.+4      	; 0x82b6 <LBRandom+0x2a>
	if (shift_count >= 16) shift_count = 0;
    82b2:	10 92 b7 0b 	sts	0x0BB7, r1

	return from + ((delta + shifted) % delta);
    82b6:	cb 01       	movw	r24, r22
    82b8:	82 0f       	add	r24, r18
    82ba:	93 1f       	adc	r25, r19
    82bc:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
}
    82c0:	8e 0f       	add	r24, r30
    82c2:	9f 1f       	adc	r25, r31
    82c4:	08 95       	ret

000082c6 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    82c6:	cf 93       	push	r28
    82c8:	df 93       	push	r29
    82ca:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    82cc:	c0 e0       	ldi	r28, 0x00	; 0
    82ce:	cd 17       	cp	r28, r29
    82d0:	31 f0       	breq	.+12     	; 0x82de <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    82d2:	8f ef       	ldi	r24, 0xFF	; 255
    82d4:	9f ef       	ldi	r25, 0xFF	; 255
    82d6:	0e 94 1a 31 	call	0x6234	; 0x6234 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    82da:	cf 5f       	subi	r28, 0xFF	; 255
    82dc:	f8 cf       	rjmp	.-16     	; 0x82ce <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    82de:	df 91       	pop	r29
    82e0:	cf 91       	pop	r28
    82e2:	08 95       	ret

000082e4 <init_tile_animations>:
	.select_state = SELECTING,
};

/* Initializers */
void init_tile_animations(TileAnimations* ta)
{
    82e4:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    82e6:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    82e8:	14 86       	std	Z+12, r1	; 0x0c
    82ea:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    82ec:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    82ee:	73 e0       	ldi	r23, 0x03	; 3
    82f0:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    82f2:	65 e0       	ldi	r22, 0x05	; 5
    82f4:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    82f6:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    82f8:	49 ec       	ldi	r20, 0xC9	; 201
    82fa:	58 e2       	ldi	r21, 0x28	; 40
    82fc:	56 83       	std	Z+6, r21	; 0x06
    82fe:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8300:	26 ec       	ldi	r18, 0xC6	; 198
    8302:	38 e2       	ldi	r19, 0x28	; 40
    8304:	30 87       	std	Z+8, r19	; 0x08
    8306:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    8308:	83 ec       	ldi	r24, 0xC3	; 195
    830a:	98 e2       	ldi	r25, 0x28	; 40
    830c:	92 87       	std	Z+10, r25	; 0x0a
    830e:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    8310:	10 8e       	std	Z+24, r1	; 0x18
    8312:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    8314:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    8316:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8318:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    831a:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    831c:	52 8b       	std	Z+18, r21	; 0x12
    831e:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8320:	34 8b       	std	Z+20, r19	; 0x14
    8322:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    8324:	96 8b       	std	Z+22, r25	; 0x16
    8326:	85 8b       	std	Z+21, r24	; 0x15
    8328:	08 95       	ret

0000832a <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    832a:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    832c:	84 e6       	ldi	r24, 0x64	; 100
    832e:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    8330:	10 82       	st	Z, r1
	s->active = 0;
    8332:	15 86       	std	Z+13, r1	; 0x0d
	s->shot_type = shot_type;
    8334:	62 87       	std	Z+10, r22	; 0x0a
	s->rebounds = SHOT_REBOUNDS;
    8336:	84 e0       	ldi	r24, 0x04	; 4
    8338:	84 87       	std	Z+12, r24	; 0x0c
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    833a:	66 23       	and	r22, r22
    833c:	11 f0       	breq	.+4      	; 0x8342 <init_shot_state+0x18>
    833e:	85 e0       	ldi	r24, 0x05	; 5
    8340:	01 c0       	rjmp	.+2      	; 0x8344 <init_shot_state+0x1a>
    8342:	81 e0       	ldi	r24, 0x01	; 1
    8344:	83 87       	std	Z+11, r24	; 0x0b
	s->shared.x = OFF_SCREEN;
    8346:	80 e0       	ldi	r24, 0x00	; 0
    8348:	90 e0       	ldi	r25, 0x00	; 0
    834a:	a0 e7       	ldi	r26, 0x70	; 112
    834c:	b3 e4       	ldi	r27, 0x43	; 67
    834e:	82 83       	std	Z+2, r24	; 0x02
    8350:	93 83       	std	Z+3, r25	; 0x03
    8352:	a4 83       	std	Z+4, r26	; 0x04
    8354:	b5 83       	std	Z+5, r27	; 0x05
	s->shared.y = 0;
    8356:	16 82       	std	Z+6, r1	; 0x06
    8358:	17 82       	std	Z+7, r1	; 0x07
    835a:	10 86       	std	Z+8, r1	; 0x08
    835c:	11 86       	std	Z+9, r1	; 0x09
    835e:	08 95       	ret

00008360 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    8360:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    8362:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    8364:	82 e0       	ldi	r24, 0x02	; 2
    8366:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    8368:	85 e0       	ldi	r24, 0x05	; 5
    836a:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    836c:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    836e:	66 23       	and	r22, r22
    8370:	19 f0       	breq	.+6      	; 0x8378 <set_shot_animations+0x18>
    8372:	86 e6       	ldi	r24, 0x66	; 102
    8374:	98 e2       	ldi	r25, 0x28	; 40
    8376:	02 c0       	rjmp	.+4      	; 0x837c <set_shot_animations+0x1c>
    8378:	89 e6       	ldi	r24, 0x69	; 105
    837a:	98 e2       	ldi	r25, 0x28	; 40
    837c:	93 8b       	std	Z+19, r25	; 0x13
    837e:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    8380:	66 23       	and	r22, r22
    8382:	19 f0       	breq	.+6      	; 0x838a <set_shot_animations+0x2a>
    8384:	83 e6       	ldi	r24, 0x63	; 99
    8386:	98 e2       	ldi	r25, 0x28	; 40
    8388:	02 c0       	rjmp	.+4      	; 0x838e <set_shot_animations+0x2e>
    838a:	89 e6       	ldi	r24, 0x69	; 105
    838c:	98 e2       	ldi	r25, 0x28	; 40
    838e:	95 8b       	std	Z+21, r25	; 0x15
    8390:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    8392:	82 e0       	ldi	r24, 0x02	; 2
    8394:	81 8f       	std	Z+25, r24	; 0x19
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    8396:	85 e0       	ldi	r24, 0x05	; 5
    8398:	82 8f       	std	Z+26, r24	; 0x1a
	s->right_anim.frame_count = 0;
    839a:	13 8e       	std	Z+27, r1	; 0x1b
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    839c:	66 23       	and	r22, r22
    839e:	19 f0       	breq	.+6      	; 0x83a6 <set_shot_animations+0x46>
    83a0:	80 e6       	ldi	r24, 0x60	; 96
    83a2:	98 e2       	ldi	r25, 0x28	; 40
    83a4:	02 c0       	rjmp	.+4      	; 0x83aa <set_shot_animations+0x4a>
    83a6:	89 e6       	ldi	r24, 0x69	; 105
    83a8:	98 e2       	ldi	r25, 0x28	; 40
    83aa:	95 8f       	std	Z+29, r25	; 0x1d
    83ac:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    83ae:	66 23       	and	r22, r22
    83b0:	19 f0       	breq	.+6      	; 0x83b8 <set_shot_animations+0x58>
    83b2:	8d e5       	ldi	r24, 0x5D	; 93
    83b4:	98 e2       	ldi	r25, 0x28	; 40
    83b6:	02 c0       	rjmp	.+4      	; 0x83bc <set_shot_animations+0x5c>
    83b8:	89 e6       	ldi	r24, 0x69	; 105
    83ba:	98 e2       	ldi	r25, 0x28	; 40
    83bc:	97 8f       	std	Z+31, r25	; 0x1f
    83be:	86 8f       	std	Z+30, r24	; 0x1e
    83c0:	08 95       	ret

000083c2 <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    83c2:	0f 93       	push	r16
    83c4:	1f 93       	push	r17
    83c6:	cf 93       	push	r28
    83c8:	df 93       	push	r29
    83ca:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    83cc:	8a e5       	ldi	r24, 0x5A	; 90
    83ce:	8c 8b       	std	Y+20, r24	; 0x14
	p->grace_frame = FRAMES_PER_GRACE;
    83d0:	88 e7       	ldi	r24, 0x78	; 120
    83d2:	8e 8b       	std	Y+22, r24	; 0x16
	p->banter_index = 0;
    83d4:	1d 8a       	std	Y+21, r1	; 0x15
	p->score = 0;
    83d6:	1e 86       	std	Y+14, r1	; 0x0e
	p->level_score = 0;
    83d8:	1f 86       	std	Y+15, r1	; 0x0f
	p->shared.direction = D_UP;
    83da:	18 82       	st	Y, r1
	p->shared.speed = 0;
    83dc:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    83de:	82 e3       	ldi	r24, 0x32	; 50
    83e0:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    83e2:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    83e4:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    83e6:	1b 8a       	std	Y+19, r1	; 0x13

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    83e8:	fe 01       	movw	r30, r28
    83ea:	e2 5a       	subi	r30, 0xA2	; 162
    83ec:	ff 4f       	sbci	r31, 0xFF	; 255
    83ee:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    83f0:	31 96       	adiw	r30, 0x01	; 1
    83f2:	91 e0       	ldi	r25, 0x01	; 1
    83f4:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    83f6:	31 96       	adiw	r30, 0x01	; 1
    83f8:	85 e0       	ldi	r24, 0x05	; 5
    83fa:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    83fc:	31 96       	adiw	r30, 0x01	; 1
    83fe:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    8400:	31 96       	adiw	r30, 0x01	; 1
    8402:	71 83       	std	Z+1, r23	; 0x01
    8404:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    8406:	36 96       	adiw	r30, 0x06	; 6
    8408:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    840a:	31 96       	adiw	r30, 0x01	; 1
    840c:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    840e:	31 96       	adiw	r30, 0x01	; 1
    8410:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    8412:	31 96       	adiw	r30, 0x01	; 1
    8414:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    8416:	31 96       	adiw	r30, 0x01	; 1
    8418:	51 83       	std	Z+1, r21	; 0x01
    841a:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    841c:	36 96       	adiw	r30, 0x06	; 6
    841e:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    8420:	31 96       	adiw	r30, 0x01	; 1
    8422:	93 e0       	ldi	r25, 0x03	; 3
    8424:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    8426:	31 96       	adiw	r30, 0x01	; 1
    8428:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    842a:	31 96       	adiw	r30, 0x01	; 1
    842c:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    842e:	31 96       	adiw	r30, 0x01	; 1
    8430:	88 e7       	ldi	r24, 0x78	; 120
    8432:	98 e2       	ldi	r25, 0x28	; 40
    8434:	91 83       	std	Z+1, r25	; 0x01
    8436:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    8438:	32 96       	adiw	r30, 0x02	; 2
    843a:	82 e7       	ldi	r24, 0x72	; 114
    843c:	98 e2       	ldi	r25, 0x28	; 40
    843e:	91 83       	std	Z+1, r25	; 0x01
    8440:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    8442:	32 96       	adiw	r30, 0x02	; 2
    8444:	8c e6       	ldi	r24, 0x6C	; 108
    8446:	98 e2       	ldi	r25, 0x28	; 40
    8448:	91 83       	std	Z+1, r25	; 0x01
    844a:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    844c:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    844e:	8e 01       	movw	r16, r28
    8450:	06 5e       	subi	r16, 0xE6	; 230
    8452:	1f 4f       	sbci	r17, 0xFF	; 255
    8454:	60 e0       	ldi	r22, 0x00	; 0
    8456:	c8 01       	movw	r24, r16
    8458:	0e 94 95 41 	call	0x832a	; 0x832a <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    845c:	60 e0       	ldi	r22, 0x00	; 0
    845e:	c8 01       	movw	r24, r16
    8460:	0e 94 b0 41 	call	0x8360	; 0x8360 <set_shot_animations>

	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    8464:	ec 96       	adiw	r28, 0x3c	; 60
    8466:	60 e0       	ldi	r22, 0x00	; 0
    8468:	ce 01       	movw	r24, r28
    846a:	0e 94 95 41 	call	0x832a	; 0x832a <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    846e:	60 e0       	ldi	r22, 0x00	; 0
    8470:	ce 01       	movw	r24, r28
	}
}
    8472:	df 91       	pop	r29
    8474:	cf 91       	pop	r28
    8476:	1f 91       	pop	r17
    8478:	0f 91       	pop	r16
	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    847a:	0c 94 b0 41 	jmp	0x8360	; 0x8360 <set_shot_animations>

0000847e <player_init_shot_state>:
	}
}

void player_init_shot_state(Player* player)
{
    847e:	cf 93       	push	r28
    8480:	df 93       	push	r29
    8482:	ec 01       	movw	r28, r24
	player->active_shots = 0;
    8484:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    8486:	60 e0       	ldi	r22, 0x00	; 0
    8488:	4a 96       	adiw	r24, 0x1a	; 26
    848a:	0e 94 95 41 	call	0x832a	; 0x832a <init_shot_state>
    848e:	60 e0       	ldi	r22, 0x00	; 0
    8490:	ce 01       	movw	r24, r28
    8492:	cc 96       	adiw	r24, 0x3c	; 60
	}
}
    8494:	df 91       	pop	r29
    8496:	cf 91       	pop	r28
void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    8498:	0c 94 95 41 	jmp	0x832a	; 0x832a <init_shot_state>

0000849c <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    849c:	e1 e3       	ldi	r30, 0x31	; 49
    849e:	fc e0       	ldi	r31, 0x0C	; 12
    84a0:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    84a2:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    84a4:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    84a6:	4c e9       	ldi	r20, 0x9C	; 156
    84a8:	58 e2       	ldi	r21, 0x28	; 40
    84aa:	68 ea       	ldi	r22, 0xA8	; 168
    84ac:	78 e2       	ldi	r23, 0x28	; 40
    84ae:	8e e4       	ldi	r24, 0x4E	; 78
    84b0:	9c e0       	ldi	r25, 0x0C	; 12
    84b2:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    84b6:	44 e8       	ldi	r20, 0x84	; 132
    84b8:	58 e2       	ldi	r21, 0x28	; 40
    84ba:	60 e9       	ldi	r22, 0x90	; 144
    84bc:	78 e2       	ldi	r23, 0x28	; 40
    84be:	8f eb       	ldi	r24, 0xBF	; 191
    84c0:	9f e0       	ldi	r25, 0x0F	; 15
    84c2:	0c 94 e1 41 	jmp	0x83c2	; 0x83c2 <init_player>

000084c6 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    84c6:	cf 93       	push	r28
    84c8:	df 93       	push	r29
    84ca:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    84cc:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    84ce:	69 89       	ldd	r22, Y+17	; 0x11
    84d0:	70 e0       	ldi	r23, 0x00	; 0
    84d2:	80 e0       	ldi	r24, 0x00	; 0
    84d4:	90 e0       	ldi	r25, 0x00	; 0
    84d6:	0e 94 03 53 	call	0xa606	; 0xa606 <__floatunsisf>
    84da:	6a 83       	std	Y+2, r22	; 0x02
    84dc:	7b 83       	std	Y+3, r23	; 0x03
    84de:	8c 83       	std	Y+4, r24	; 0x04
    84e0:	9d 83       	std	Y+5, r25	; 0x05
	player->shared.y = player->spawn_y;
    84e2:	6a 89       	ldd	r22, Y+18	; 0x12
    84e4:	70 e0       	ldi	r23, 0x00	; 0
    84e6:	80 e0       	ldi	r24, 0x00	; 0
    84e8:	90 e0       	ldi	r25, 0x00	; 0
    84ea:	0e 94 03 53 	call	0xa606	; 0xa606 <__floatunsisf>
    84ee:	6e 83       	std	Y+6, r22	; 0x06
    84f0:	7f 83       	std	Y+7, r23	; 0x07
    84f2:	88 87       	std	Y+8, r24	; 0x08
    84f4:	99 87       	std	Y+9, r25	; 0x09
	player->shared.direction = D_UP;
    84f6:	18 82       	st	Y, r1
	player->shared.speed = 0;
    84f8:	19 82       	std	Y+1, r1	; 0x01
	
}
    84fa:	df 91       	pop	r29
    84fc:	cf 91       	pop	r28
    84fe:	08 95       	ret

00008500 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    8500:	cf 93       	push	r28
    8502:	df 93       	push	r29
    8504:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    8506:	bc 01       	movw	r22, r24
    8508:	88 81       	ld	r24, Y
    850a:	99 81       	ldd	r25, Y+1	; 0x01
    850c:	0e 94 2b 32 	call	0x6456	; 0x6456 <EepromReadBlock>
	if (status == 0x03)
    8510:	83 30       	cpi	r24, 0x03	; 3
    8512:	29 f4       	brne	.+10     	; 0x851e <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    8514:	ce 01       	movw	r24, r28
	}
}
    8516:	df 91       	pop	r29
    8518:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    851a:	0c 94 be 31 	jmp	0x637c	; 0x637c <EepromWriteBlock>
	}
}
    851e:	df 91       	pop	r29
    8520:	cf 91       	pop	r28
    8522:	08 95       	ret

00008524 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    8524:	61 e0       	ldi	r22, 0x01	; 1
    8526:	83 e0       	ldi	r24, 0x03	; 3
    8528:	0e 94 6f 3f 	call	0x7ede	; 0x7ede <FadeOut>
	ClearVram();
    852c:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    8530:	60 e0       	ldi	r22, 0x00	; 0
    8532:	83 e0       	ldi	r24, 0x03	; 3
    8534:	0c 94 63 3f 	jmp	0x7ec6	; 0x7ec6 <FadeIn>

00008538 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    8538:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    853a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    853c:	40 e0       	ldi	r20, 0x00	; 0
    853e:	6e ea       	ldi	r22, 0xAE	; 174
    8540:	78 e2       	ldi	r23, 0x28	; 40
    8542:	8c 2f       	mov	r24, r28
    8544:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
    8548:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    854a:	cc 30       	cpi	r28, 0x0C	; 12
    854c:	b9 f7       	brne	.-18     	; 0x853c <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    854e:	cf 91       	pop	r28
    8550:	08 95       	ret

00008552 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    8552:	cf 92       	push	r12
    8554:	df 92       	push	r13
    8556:	ff 92       	push	r15
    8558:	0f 93       	push	r16
    855a:	1f 93       	push	r17
    855c:	cf 93       	push	r28
    855e:	df 93       	push	r29
    8560:	cd b7       	in	r28, 0x3d	; 61
    8562:	de b7       	in	r29, 0x3e	; 62
    8564:	28 97       	sbiw	r28, 0x08	; 8
    8566:	0f b6       	in	r0, 0x3f	; 63
    8568:	f8 94       	cli
    856a:	de bf       	out	0x3e, r29	; 62
    856c:	0f be       	out	0x3f, r0	; 63
    856e:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    8570:	90 91 5c 0c 	lds	r25, 0x0C5C
    8574:	80 91 cd 0f 	lds	r24, 0x0FCD
    8578:	98 17       	cp	r25, r24
    857a:	28 f4       	brcc	.+10     	; 0x8586 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    857c:	ee e4       	ldi	r30, 0x4E	; 78
    857e:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    8580:	af eb       	ldi	r26, 0xBF	; 191
    8582:	bf e0       	ldi	r27, 0x0F	; 15
    8584:	04 c0       	rjmp	.+8      	; 0x858e <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    8586:	ef eb       	ldi	r30, 0xBF	; 191
    8588:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    858a:	ae e4       	ldi	r26, 0x4E	; 78
    858c:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    858e:	1a 96       	adiw	r26, 0x0a	; 10
    8590:	8c 91       	ld	r24, X
    8592:	1a 97       	sbiw	r26, 0x0a	; 10
    8594:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    8596:	82 85       	ldd	r24, Z+10	; 0x0a
    8598:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    859a:	1e 96       	adiw	r26, 0x0e	; 14
    859c:	8c 91       	ld	r24, X
    859e:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    85a0:	96 85       	ldd	r25, Z+14	; 0x0e
    85a2:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    85a4:	f8 2e       	mov	r15, r24
    85a6:	f9 1a       	sub	r15, r25
    85a8:	00 e0       	ldi	r16, 0x00	; 0
    85aa:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    85ac:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    85ae:	81 11       	cpse	r24, r1
    85b0:	08 c0       	rjmp	.+16     	; 0x85c2 <save_score+0x70>
    85b2:	f8 01       	movw	r30, r16
    85b4:	ec 5f       	subi	r30, 0xFC	; 252
    85b6:	fe 4f       	sbci	r31, 0xFE	; 254
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    85b8:	94 81       	ldd	r25, Z+4	; 0x04
    85ba:	25 81       	ldd	r18, Z+5	; 0x05
    85bc:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    85be:	9f 15       	cp	r25, r15
    85c0:	d0 f4       	brcc	.+52     	; 0x85f6 <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    85c2:	44 e0       	ldi	r20, 0x04	; 4
    85c4:	c8 01       	movw	r24, r16
    85c6:	8a 5f       	subi	r24, 0xFA	; 250
    85c8:	9e 4f       	sbci	r25, 0xFE	; 254
    85ca:	6c 01       	movw	r12, r24
    85cc:	bc 01       	movw	r22, r24
    85ce:	ce 01       	movw	r24, r28
    85d0:	05 96       	adiw	r24, 0x05	; 5
    85d2:	0e 94 09 40 	call	0x8012	; 0x8012 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    85d6:	44 e0       	ldi	r20, 0x04	; 4
    85d8:	be 01       	movw	r22, r28
    85da:	6f 5f       	subi	r22, 0xFF	; 255
    85dc:	7f 4f       	sbci	r23, 0xFF	; 255
    85de:	c6 01       	movw	r24, r12
    85e0:	0e 94 09 40 	call	0x8012	; 0x8012 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    85e4:	44 e0       	ldi	r20, 0x04	; 4
    85e6:	be 01       	movw	r22, r28
    85e8:	6b 5f       	subi	r22, 0xFB	; 251
    85ea:	7f 4f       	sbci	r23, 0xFF	; 255
    85ec:	ce 01       	movw	r24, r28
    85ee:	01 96       	adiw	r24, 0x01	; 1
    85f0:	0e 94 09 40 	call	0x8012	; 0x8012 <LBCopyChars>
				saved = 1;
    85f4:	81 e0       	ldi	r24, 0x01	; 1
    85f6:	0c 5f       	subi	r16, 0xFC	; 252
    85f8:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    85fa:	0c 31       	cpi	r16, 0x1C	; 28
    85fc:	11 05       	cpc	r17, r1
    85fe:	b9 f6       	brne	.-82     	; 0x85ae <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    8600:	84 e0       	ldi	r24, 0x04	; 4
    8602:	91 e0       	ldi	r25, 0x01	; 1
    8604:	0e 94 be 31 	call	0x637c	; 0x637c <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    8608:	28 96       	adiw	r28, 0x08	; 8
    860a:	0f b6       	in	r0, 0x3f	; 63
    860c:	f8 94       	cli
    860e:	de bf       	out	0x3e, r29	; 62
    8610:	0f be       	out	0x3f, r0	; 63
    8612:	cd bf       	out	0x3d, r28	; 61
    8614:	df 91       	pop	r29
    8616:	cf 91       	pop	r28
    8618:	1f 91       	pop	r17
    861a:	0f 91       	pop	r16
    861c:	ff 90       	pop	r15
    861e:	df 90       	pop	r13
    8620:	cf 90       	pop	r12
    8622:	08 95       	ret

00008624 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    8624:	0f 93       	push	r16
    8626:	1f 93       	push	r17
    8628:	cf 93       	push	r28
    862a:	df 93       	push	r29
    862c:	8c 01       	movw	r16, r24
    862e:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    8630:	88 81       	ld	r24, Y
    8632:	81 30       	cpi	r24, 0x01	; 1
    8634:	69 f1       	breq	.+90     	; 0x8690 <position_shot+0x6c>
    8636:	88 f0       	brcs	.+34     	; 0x865a <position_shot+0x36>
    8638:	82 30       	cpi	r24, 0x02	; 2
    863a:	b1 f1       	breq	.+108    	; 0x86a8 <position_shot+0x84>
    863c:	83 30       	cpi	r24, 0x03	; 3
    863e:	09 f0       	breq	.+2      	; 0x8642 <position_shot+0x1e>
    8640:	5a c0       	rjmp	.+180    	; 0x86f6 <position_shot+0xd2>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 16;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    8642:	20 e0       	ldi	r18, 0x00	; 0
    8644:	30 e0       	ldi	r19, 0x00	; 0
    8646:	40 e0       	ldi	r20, 0x00	; 0
    8648:	51 e4       	ldi	r21, 0x41	; 65
    864a:	f8 01       	movw	r30, r16
    864c:	62 81       	ldd	r22, Z+2	; 0x02
    864e:	73 81       	ldd	r23, Z+3	; 0x03
    8650:	84 81       	ldd	r24, Z+4	; 0x04
    8652:	95 81       	ldd	r25, Z+5	; 0x05
    8654:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8658:	3b c0       	rjmp	.+118    	; 0x86d0 <position_shot+0xac>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    865a:	20 e0       	ldi	r18, 0x00	; 0
    865c:	30 e0       	ldi	r19, 0x00	; 0
    865e:	40 e8       	ldi	r20, 0x80	; 128
    8660:	50 e4       	ldi	r21, 0x40	; 64
    8662:	f8 01       	movw	r30, r16
    8664:	62 81       	ldd	r22, Z+2	; 0x02
    8666:	73 81       	ldd	r23, Z+3	; 0x03
    8668:	84 81       	ldd	r24, Z+4	; 0x04
    866a:	95 81       	ldd	r25, Z+5	; 0x05
    866c:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8670:	6a 83       	std	Y+2, r22	; 0x02
    8672:	7b 83       	std	Y+3, r23	; 0x03
    8674:	8c 83       	std	Y+4, r24	; 0x04
    8676:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y - 8;
    8678:	20 e0       	ldi	r18, 0x00	; 0
    867a:	30 e0       	ldi	r19, 0x00	; 0
    867c:	40 e0       	ldi	r20, 0x00	; 0
    867e:	51 e4       	ldi	r21, 0x41	; 65
    8680:	f8 01       	movw	r30, r16
    8682:	66 81       	ldd	r22, Z+6	; 0x06
    8684:	77 81       	ldd	r23, Z+7	; 0x07
    8686:	80 85       	ldd	r24, Z+8	; 0x08
    8688:	91 85       	ldd	r25, Z+9	; 0x09
    868a:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    868e:	2f c0       	rjmp	.+94     	; 0x86ee <position_shot+0xca>
			break;
		case D_RIGHT:
			shot->shared.x = player->shared.x + 16;
    8690:	20 e0       	ldi	r18, 0x00	; 0
    8692:	30 e0       	ldi	r19, 0x00	; 0
    8694:	40 e8       	ldi	r20, 0x80	; 128
    8696:	51 e4       	ldi	r21, 0x41	; 65
    8698:	f8 01       	movw	r30, r16
    869a:	62 81       	ldd	r22, Z+2	; 0x02
    869c:	73 81       	ldd	r23, Z+3	; 0x03
    869e:	84 81       	ldd	r24, Z+4	; 0x04
    86a0:	95 81       	ldd	r25, Z+5	; 0x05
    86a2:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    86a6:	14 c0       	rjmp	.+40     	; 0x86d0 <position_shot+0xac>
			shot->shared.y = player->shared.y + 4;
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    86a8:	20 e0       	ldi	r18, 0x00	; 0
    86aa:	30 e0       	ldi	r19, 0x00	; 0
    86ac:	40 e8       	ldi	r20, 0x80	; 128
    86ae:	50 e4       	ldi	r21, 0x40	; 64
    86b0:	f8 01       	movw	r30, r16
    86b2:	62 81       	ldd	r22, Z+2	; 0x02
    86b4:	73 81       	ldd	r23, Z+3	; 0x03
    86b6:	84 81       	ldd	r24, Z+4	; 0x04
    86b8:	95 81       	ldd	r25, Z+5	; 0x05
    86ba:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    86be:	6a 83       	std	Y+2, r22	; 0x02
    86c0:	7b 83       	std	Y+3, r23	; 0x03
    86c2:	8c 83       	std	Y+4, r24	; 0x04
    86c4:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 16;
    86c6:	20 e0       	ldi	r18, 0x00	; 0
    86c8:	30 e0       	ldi	r19, 0x00	; 0
    86ca:	40 e8       	ldi	r20, 0x80	; 128
    86cc:	51 e4       	ldi	r21, 0x41	; 65
    86ce:	08 c0       	rjmp	.+16     	; 0x86e0 <position_shot+0xbc>
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    86d0:	6a 83       	std	Y+2, r22	; 0x02
    86d2:	7b 83       	std	Y+3, r23	; 0x03
    86d4:	8c 83       	std	Y+4, r24	; 0x04
    86d6:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 4;
    86d8:	20 e0       	ldi	r18, 0x00	; 0
    86da:	30 e0       	ldi	r19, 0x00	; 0
    86dc:	40 e8       	ldi	r20, 0x80	; 128
    86de:	50 e4       	ldi	r21, 0x40	; 64
    86e0:	f8 01       	movw	r30, r16
    86e2:	66 81       	ldd	r22, Z+6	; 0x06
    86e4:	77 81       	ldd	r23, Z+7	; 0x07
    86e6:	80 85       	ldd	r24, Z+8	; 0x08
    86e8:	91 85       	ldd	r25, Z+9	; 0x09
    86ea:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    86ee:	6e 83       	std	Y+6, r22	; 0x06
    86f0:	7f 83       	std	Y+7, r23	; 0x07
    86f2:	88 87       	std	Y+8, r24	; 0x08
    86f4:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    86f6:	df 91       	pop	r29
    86f8:	cf 91       	pop	r28
    86fa:	1f 91       	pop	r17
    86fc:	0f 91       	pop	r16
    86fe:	08 95       	ret

00008700 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    8700:	0f 93       	push	r16
    8702:	1f 93       	push	r17
    8704:	cf 93       	push	r28
    8706:	df 93       	push	r29
    8708:	8c 01       	movw	r16, r24
    870a:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    870c:	ac 01       	movw	r20, r24
    870e:	45 5f       	subi	r20, 0xF5	; 245
    8710:	5f 4f       	sbci	r21, 0xFF	; 255
    8712:	23 e0       	ldi	r18, 0x03	; 3
    8714:	6e e0       	ldi	r22, 0x0E	; 14
    8716:	84 e0       	ldi	r24, 0x04	; 4
    8718:	0e 94 15 40 	call	0x802a	; 0x802a <LBPrintStr>
	Print(8, 14, strOwns);
    871c:	4b e7       	ldi	r20, 0x7B	; 123
    871e:	5a e0       	ldi	r21, 0x0A	; 10
    8720:	6e e0       	ldi	r22, 0x0E	; 14
    8722:	70 e0       	ldi	r23, 0x00	; 0
    8724:	88 e0       	ldi	r24, 0x08	; 8
    8726:	90 e0       	ldi	r25, 0x00	; 0
    8728:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    872c:	ae 01       	movw	r20, r28
    872e:	45 5f       	subi	r20, 0xF5	; 245
    8730:	5f 4f       	sbci	r21, 0xFF	; 255
    8732:	23 e0       	ldi	r18, 0x03	; 3
    8734:	6e e0       	ldi	r22, 0x0E	; 14
    8736:	8d e0       	ldi	r24, 0x0D	; 13
    8738:	0e 94 15 40 	call	0x802a	; 0x802a <LBPrintStr>
	Print(17, 14, strBy);
    873c:	48 e7       	ldi	r20, 0x78	; 120
    873e:	5a e0       	ldi	r21, 0x0A	; 10
    8740:	6e e0       	ldi	r22, 0x0E	; 14
    8742:	70 e0       	ldi	r23, 0x00	; 0
    8744:	81 e1       	ldi	r24, 0x11	; 17
    8746:	90 e0       	ldi	r25, 0x00	; 0
    8748:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    874c:	21 e0       	ldi	r18, 0x01	; 1
    874e:	f8 01       	movw	r30, r16
    8750:	47 85       	ldd	r20, Z+15	; 0x0f
    8752:	6e e0       	ldi	r22, 0x0E	; 14
    8754:	70 e0       	ldi	r23, 0x00	; 0
    8756:	86 e1       	ldi	r24, 0x16	; 22
    8758:	90 e0       	ldi	r25, 0x00	; 0
    875a:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <PrintByte>
	PrintChar(23, 14, '-');
    875e:	4d e2       	ldi	r20, 0x2D	; 45
    8760:	6e e0       	ldi	r22, 0x0E	; 14
    8762:	70 e0       	ldi	r23, 0x00	; 0
    8764:	87 e1       	ldi	r24, 0x17	; 23
    8766:	90 e0       	ldi	r25, 0x00	; 0
    8768:	0e 94 04 3f 	call	0x7e08	; 0x7e08 <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    876c:	21 e0       	ldi	r18, 0x01	; 1
    876e:	4f 85       	ldd	r20, Y+15	; 0x0f
    8770:	6e e0       	ldi	r22, 0x0E	; 14
    8772:	70 e0       	ldi	r23, 0x00	; 0
    8774:	8a e1       	ldi	r24, 0x1A	; 26
    8776:	90 e0       	ldi	r25, 0x00	; 0
}
    8778:	df 91       	pop	r29
    877a:	cf 91       	pop	r28
    877c:	1f 91       	pop	r17
    877e:	0f 91       	pop	r16
	Print(8, 14, strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    8780:	0c 94 b6 3e 	jmp	0x7d6c	; 0x7d6c <PrintByte>

00008784 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    8784:	cf 93       	push	r28
    8786:	df 93       	push	r29
    8788:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    878a:	ac 01       	movw	r20, r24
    878c:	45 5f       	subi	r20, 0xF5	; 245
    878e:	5f 4f       	sbci	r21, 0xFF	; 255
    8790:	23 e0       	ldi	r18, 0x03	; 3
    8792:	60 e0       	ldi	r22, 0x00	; 0
    8794:	8a e0       	ldi	r24, 0x0A	; 10
    8796:	8c 0f       	add	r24, r28
    8798:	0e 94 15 40 	call	0x802a	; 0x802a <LBPrintStr>
	Print(x, 0, strScore);
    879c:	d0 e0       	ldi	r29, 0x00	; 0
    879e:	4c ec       	ldi	r20, 0xCC	; 204
    87a0:	59 e0       	ldi	r21, 0x09	; 9
    87a2:	60 e0       	ldi	r22, 0x00	; 0
    87a4:	70 e0       	ldi	r23, 0x00	; 0
    87a6:	ce 01       	movw	r24, r28
    87a8:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(x, 1, strTotal);
    87ac:	45 ec       	ldi	r20, 0xC5	; 197
    87ae:	59 e0       	ldi	r21, 0x09	; 9
    87b0:	61 e0       	ldi	r22, 0x01	; 1
    87b2:	70 e0       	ldi	r23, 0x00	; 0
    87b4:	ce 01       	movw	r24, r28
	
}
    87b6:	df 91       	pop	r29
    87b8:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, strScore);
	Print(x, 1, strTotal);
    87ba:	0c 94 e9 3e 	jmp	0x7dd2	; 0x7dd2 <Print>

000087be <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    87be:	0f 93       	push	r16
    87c0:	1f 93       	push	r17
    87c2:	cf 93       	push	r28
    87c4:	df 93       	push	r29
    87c6:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    87c8:	c6 2f       	mov	r28, r22
    87ca:	d0 e0       	ldi	r29, 0x00	; 0
    87cc:	28 96       	adiw	r28, 0x08	; 8
    87ce:	20 e0       	ldi	r18, 0x00	; 0
    87d0:	fc 01       	movw	r30, r24
    87d2:	47 85       	ldd	r20, Z+15	; 0x0f
    87d4:	60 e0       	ldi	r22, 0x00	; 0
    87d6:	70 e0       	ldi	r23, 0x00	; 0
    87d8:	ce 01       	movw	r24, r28
    87da:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    87de:	20 e0       	ldi	r18, 0x00	; 0
    87e0:	f8 01       	movw	r30, r16
    87e2:	46 85       	ldd	r20, Z+14	; 0x0e
    87e4:	61 e0       	ldi	r22, 0x01	; 1
    87e6:	70 e0       	ldi	r23, 0x00	; 0
    87e8:	ce 01       	movw	r24, r28
}
    87ea:	df 91       	pop	r29
    87ec:	cf 91       	pop	r28
    87ee:	1f 91       	pop	r17
    87f0:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    87f2:	0c 94 b6 3e 	jmp	0x7d6c	; 0x7d6c <PrintByte>

000087f6 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    87f6:	cf 93       	push	r28
    87f8:	df 93       	push	r29
    87fa:	ec 01       	movw	r28, r24
    87fc:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    87fe:	9c 89       	ldd	r25, Y+20	; 0x14
    8800:	9a 35       	cpi	r25, 0x5A	; 90
    8802:	99 f0       	breq	.+38     	; 0x882a <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    8804:	91 11       	cpse	r25, r1
    8806:	0c c0       	rjmp	.+24     	; 0x8820 <render_banter+0x2a>
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
    8808:	4d 89       	ldd	r20, Y+21	; 0x15
    880a:	9f e0       	ldi	r25, 0x0F	; 15
    880c:	49 9f       	mul	r20, r25
    880e:	a0 01       	movw	r20, r0
    8810:	11 24       	eor	r1, r1
    8812:	4e 51       	subi	r20, 0x1E	; 30
    8814:	56 4f       	sbci	r21, 0xF6	; 246
    8816:	62 e0       	ldi	r22, 0x02	; 2
    8818:	70 e0       	ldi	r23, 0x00	; 0
    881a:	90 e0       	ldi	r25, 0x00	; 0
    881c:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    8820:	8c 89       	ldd	r24, Y+20	; 0x14
    8822:	8f 5f       	subi	r24, 0xFF	; 255
    8824:	8c 8b       	std	Y+20, r24	; 0x14
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
		}
		clear_banter = 1;
    8826:	41 e0       	ldi	r20, 0x01	; 1
    8828:	0a c0       	rjmp	.+20     	; 0x883e <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    882a:	44 23       	and	r20, r20
    882c:	41 f0       	breq	.+16     	; 0x883e <render_banter+0x48>
	{
		Print(banter_x, 2, strBanterClear);
    882e:	43 ed       	ldi	r20, 0xD3	; 211
    8830:	59 e0       	ldi	r21, 0x09	; 9
    8832:	62 e0       	ldi	r22, 0x02	; 2
    8834:	70 e0       	ldi	r23, 0x00	; 0
    8836:	90 e0       	ldi	r25, 0x00	; 0
    8838:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
    883c:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    883e:	84 2f       	mov	r24, r20
    8840:	df 91       	pop	r29
    8842:	cf 91       	pop	r28
    8844:	08 95       	ret

00008846 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    8846:	ef 92       	push	r14
    8848:	ff 92       	push	r15
    884a:	0f 93       	push	r16
    884c:	1f 93       	push	r17
    884e:	cf 93       	push	r28
    8850:	df 93       	push	r29
    8852:	1f 92       	push	r1
    8854:	cd b7       	in	r28, 0x3d	; 61
    8856:	de b7       	in	r29, 0x3e	; 62
    8858:	7c 01       	movw	r14, r24
    885a:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    885c:	fc 01       	movw	r30, r24
    885e:	66 81       	ldd	r22, Z+6	; 0x06
    8860:	77 81       	ldd	r23, Z+7	; 0x07
    8862:	80 85       	ldd	r24, Z+8	; 0x08
    8864:	91 85       	ldd	r25, Z+9	; 0x09
    8866:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    886a:	46 2f       	mov	r20, r22
    886c:	f7 01       	movw	r30, r14
    886e:	62 81       	ldd	r22, Z+2	; 0x02
    8870:	73 81       	ldd	r23, Z+3	; 0x03
    8872:	84 81       	ldd	r24, Z+4	; 0x04
    8874:	95 81       	ldd	r25, Z+5	; 0x05
    8876:	49 83       	std	Y+1, r20	; 0x01
    8878:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    887c:	02 e0       	ldi	r16, 0x02	; 2
    887e:	22 e0       	ldi	r18, 0x02	; 2
    8880:	49 81       	ldd	r20, Y+1	; 0x01
    8882:	81 2f       	mov	r24, r17
    8884:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
}
    8888:	0f 90       	pop	r0
    888a:	df 91       	pop	r29
    888c:	cf 91       	pop	r28
    888e:	1f 91       	pop	r17
    8890:	0f 91       	pop	r16
    8892:	ff 90       	pop	r15
    8894:	ef 90       	pop	r14
    8896:	08 95       	ret

00008898 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    8898:	cf 92       	push	r12
    889a:	df 92       	push	r13
    889c:	ff 92       	push	r15
    889e:	0f 93       	push	r16
    88a0:	1f 93       	push	r17
    88a2:	cf 93       	push	r28
    88a4:	df 93       	push	r29
    88a6:	1f 92       	push	r1
    88a8:	cd b7       	in	r28, 0x3d	; 61
    88aa:	de b7       	in	r29, 0x3e	; 62
    88ac:	fc 01       	movw	r30, r24
    88ae:	16 2f       	mov	r17, r22
	if (player->active_shots > 0)
    88b0:	80 89       	ldd	r24, Z+16	; 0x10
    88b2:	88 23       	and	r24, r24
    88b4:	19 f1       	breq	.+70     	; 0x88fc <render_shot+0x64>
    88b6:	6f 01       	movw	r12, r30
    88b8:	8c e1       	ldi	r24, 0x1C	; 28
    88ba:	c8 0e       	add	r12, r24
    88bc:	d1 1c       	adc	r13, r1
    88be:	82 e0       	ldi	r24, 0x02	; 2
    88c0:	f8 2e       	mov	r15, r24
    88c2:	f6 0e       	add	r15, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    88c4:	f6 01       	movw	r30, r12
    88c6:	64 81       	ldd	r22, Z+4	; 0x04
    88c8:	75 81       	ldd	r23, Z+5	; 0x05
    88ca:	86 81       	ldd	r24, Z+6	; 0x06
    88cc:	97 81       	ldd	r25, Z+7	; 0x07
    88ce:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    88d2:	46 2f       	mov	r20, r22
    88d4:	f6 01       	movw	r30, r12
    88d6:	60 81       	ld	r22, Z
    88d8:	71 81       	ldd	r23, Z+1	; 0x01
    88da:	82 81       	ldd	r24, Z+2	; 0x02
    88dc:	93 81       	ldd	r25, Z+3	; 0x03
    88de:	49 83       	std	Y+1, r20	; 0x01
    88e0:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    88e4:	01 e0       	ldi	r16, 0x01	; 1
    88e6:	21 e0       	ldi	r18, 0x01	; 1
    88e8:	49 81       	ldd	r20, Y+1	; 0x01
    88ea:	81 2f       	mov	r24, r17
    88ec:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
			sprite_index++;
    88f0:	1f 5f       	subi	r17, 0xFF	; 255
    88f2:	f2 e2       	ldi	r31, 0x22	; 34
    88f4:	cf 0e       	add	r12, r31
    88f6:	d1 1c       	adc	r13, r1

void render_shot(Player* player, u8 sprite_index)
{
	if (player->active_shots > 0)
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
    88f8:	1f 11       	cpse	r17, r15
    88fa:	e4 cf       	rjmp	.-56     	; 0x88c4 <render_shot+0x2c>
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
			sprite_index++;
		}
	}
}
    88fc:	0f 90       	pop	r0
    88fe:	df 91       	pop	r29
    8900:	cf 91       	pop	r28
    8902:	1f 91       	pop	r17
    8904:	0f 91       	pop	r16
    8906:	ff 90       	pop	r15
    8908:	df 90       	pop	r13
    890a:	cf 90       	pop	r12
    890c:	08 95       	ret

0000890e <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    890e:	cf 92       	push	r12
    8910:	df 92       	push	r13
    8912:	ef 92       	push	r14
    8914:	ff 92       	push	r15
    8916:	0f 93       	push	r16
    8918:	1f 93       	push	r17
    891a:	cf 93       	push	r28
    891c:	df 93       	push	r29
    891e:	1f 92       	push	r1
    8920:	cd b7       	in	r28, 0x3d	; 61
    8922:	de b7       	in	r29, 0x3e	; 62
    8924:	8c 01       	movw	r16, r24
    8926:	0f 5f       	subi	r16, 0xFF	; 255
    8928:	1f 4f       	sbci	r17, 0xFF	; 255
    892a:	7c 01       	movw	r14, r24
    892c:	29 e1       	ldi	r18, 0x19	; 25
    892e:	e2 0e       	add	r14, r18
    8930:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    8932:	8e e1       	ldi	r24, 0x1E	; 30
    8934:	c8 2e       	mov	r12, r24
    8936:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    8938:	f8 01       	movw	r30, r16
    893a:	82 85       	ldd	r24, Z+10	; 0x0a
    893c:	93 85       	ldd	r25, Z+11	; 0x0b
    893e:	89 2b       	or	r24, r25
    8940:	e1 f0       	breq	.+56     	; 0x897a <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    8942:	be 01       	movw	r22, r28
    8944:	6f 5f       	subi	r22, 0xFF	; 255
    8946:	7f 4f       	sbci	r23, 0xFF	; 255
    8948:	c8 01       	movw	r24, r16
    894a:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <LBGetNextFrame>
    894e:	9c 01       	movw	r18, r24
			if (looped)
    8950:	49 81       	ldd	r20, Y+1	; 0x01
    8952:	f8 01       	movw	r30, r16
    8954:	82 85       	ldd	r24, Z+10	; 0x0a
    8956:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    8958:	b6 01       	movw	r22, r12
    895a:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    895e:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    8960:	44 23       	and	r20, r20
    8962:	41 f0       	breq	.+16     	; 0x8974 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    8964:	40 e0       	ldi	r20, 0x00	; 0
    8966:	50 e0       	ldi	r21, 0x00	; 0
    8968:	0e 94 ee 30 	call	0x61dc	; 0x61dc <SetTile>
				ta->anims[i].tile_index = 0;
    896c:	f8 01       	movw	r30, r16
    896e:	13 86       	std	Z+11, r1	; 0x0b
    8970:	12 86       	std	Z+10, r1	; 0x0a
    8972:	03 c0       	rjmp	.+6      	; 0x897a <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    8974:	a9 01       	movw	r20, r18
    8976:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
    897a:	04 5f       	subi	r16, 0xF4	; 244
    897c:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    897e:	0e 15       	cp	r16, r14
    8980:	1f 05       	cpc	r17, r15
    8982:	d1 f6       	brne	.-76     	; 0x8938 <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    8984:	0f 90       	pop	r0
    8986:	df 91       	pop	r29
    8988:	cf 91       	pop	r28
    898a:	1f 91       	pop	r17
    898c:	0f 91       	pop	r16
    898e:	ff 90       	pop	r15
    8990:	ef 90       	pop	r14
    8992:	df 90       	pop	r13
    8994:	cf 90       	pop	r12
    8996:	08 95       	ret

00008998 <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    8998:	ff 92       	push	r15
    899a:	0f 93       	push	r16
    899c:	1f 93       	push	r17
    899e:	cf 93       	push	r28
    89a0:	df 93       	push	r29
    89a2:	1f 92       	push	r1
    89a4:	cd b7       	in	r28, 0x3d	; 61
    89a6:	de b7       	in	r29, 0x3e	; 62
    89a8:	8c 01       	movw	r16, r24
    89aa:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    89ac:	fc 01       	movw	r30, r24
    89ae:	83 89       	ldd	r24, Z+19	; 0x13
    89b0:	80 ff       	sbrs	r24, 0
    89b2:	18 c0       	rjmp	.+48     	; 0x89e4 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    89b4:	be 01       	movw	r22, r28
    89b6:	6f 5f       	subi	r22, 0xFF	; 255
    89b8:	7f 4f       	sbci	r23, 0xFF	; 255
    89ba:	c8 01       	movw	r24, r16
    89bc:	8e 58       	subi	r24, 0x8E	; 142
    89be:	9f 4f       	sbci	r25, 0xFF	; 255
    89c0:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    89c4:	29 81       	ldd	r18, Y+1	; 0x01
    89c6:	22 23       	and	r18, r18
    89c8:	09 f4       	brne	.+2      	; 0x89cc <tank_map+0x34>
    89ca:	5a c0       	rjmp	.+180    	; 0x8a80 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    89cc:	f8 01       	movw	r30, r16
    89ce:	83 89       	ldd	r24, Z+19	; 0x13
    89d0:	91 e0       	ldi	r25, 0x01	; 1
    89d2:	98 27       	eor	r25, r24
    89d4:	93 8b       	std	Z+19, r25	; 0x13
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    89d6:	c8 01       	movw	r24, r16
    89d8:	0e 94 63 42 	call	0x84c6	; 0x84c6 <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    89dc:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    89de:	81 eb       	ldi	r24, 0xB1	; 177
    89e0:	98 e2       	ldi	r25, 0x28	; 40
    89e2:	4f c0       	rjmp	.+158    	; 0x8a82 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    89e4:	f8 01       	movw	r30, r16
    89e6:	96 89       	ldd	r25, Z+22	; 0x16
    89e8:	98 37       	cpi	r25, 0x78	; 120
    89ea:	11 f0       	breq	.+4      	; 0x89f0 <tank_map+0x58>
		{
			player->grace_frame++;
    89ec:	9f 5f       	subi	r25, 0xFF	; 255
    89ee:	96 8b       	std	Z+22, r25	; 0x16
		}
		switch (player->shared.direction)
    89f0:	f8 01       	movw	r30, r16
    89f2:	90 81       	ld	r25, Z
    89f4:	91 30       	cpi	r25, 0x01	; 1
    89f6:	79 f0       	breq	.+30     	; 0x8a16 <tank_map+0x7e>
    89f8:	f8 f0       	brcs	.+62     	; 0x8a38 <tank_map+0xa0>
    89fa:	92 30       	cpi	r25, 0x02	; 2
    89fc:	99 f0       	breq	.+38     	; 0x8a24 <tank_map+0x8c>
    89fe:	93 30       	cpi	r25, 0x03	; 3
    8a00:	d9 f4       	brne	.+54     	; 0x8a38 <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    8a02:	be 01       	movw	r22, r28
    8a04:	6f 5f       	subi	r22, 0xFF	; 255
    8a06:	7f 4f       	sbci	r23, 0xFF	; 255
    8a08:	c8 01       	movw	r24, r16
    8a0a:	88 59       	subi	r24, 0x98	; 152
    8a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    8a0e:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <LBGetNextFrame>
    8a12:	41 e0       	ldi	r20, 0x01	; 1
    8a14:	1a c0       	rjmp	.+52     	; 0x8a4a <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    8a16:	be 01       	movw	r22, r28
    8a18:	6f 5f       	subi	r22, 0xFF	; 255
    8a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    8a1c:	c8 01       	movw	r24, r16
    8a1e:	88 59       	subi	r24, 0x98	; 152
    8a20:	9f 4f       	sbci	r25, 0xFF	; 255
    8a22:	10 c0       	rjmp	.+32     	; 0x8a44 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    8a24:	be 01       	movw	r22, r28
    8a26:	6f 5f       	subi	r22, 0xFF	; 255
    8a28:	7f 4f       	sbci	r23, 0xFF	; 255
    8a2a:	c8 01       	movw	r24, r16
    8a2c:	82 5a       	subi	r24, 0xA2	; 162
    8a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    8a30:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <LBGetNextFrame>
    8a34:	42 e0       	ldi	r20, 0x02	; 2
    8a36:	09 c0       	rjmp	.+18     	; 0x8a4a <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    8a38:	be 01       	movw	r22, r28
    8a3a:	6f 5f       	subi	r22, 0xFF	; 255
    8a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    8a3e:	c8 01       	movw	r24, r16
    8a40:	82 5a       	subi	r24, 0xA2	; 162
    8a42:	9f 4f       	sbci	r25, 0xFF	; 255
    8a44:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <LBGetNextFrame>
    8a48:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    8a4a:	f8 01       	movw	r30, r16
    8a4c:	26 89       	ldd	r18, Z+22	; 0x16
    8a4e:	28 37       	cpi	r18, 0x78	; 120
    8a50:	31 f0       	breq	.+12     	; 0x8a5e <tank_map+0xc6>
    8a52:	20 91 b6 0b 	lds	r18, 0x0BB6
    8a56:	22 23       	and	r18, r18
    8a58:	11 f0       	breq	.+4      	; 0x8a5e <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    8a5a:	81 eb       	ldi	r24, 0xB1	; 177
    8a5c:	98 e2       	ldi	r25, 0x28	; 40
		}
		toggle_counter--;
    8a5e:	20 91 03 01 	lds	r18, 0x0103
    8a62:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    8a64:	19 f0       	breq	.+6      	; 0x8a6c <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    8a66:	20 93 03 01 	sts	0x0103, r18
    8a6a:	0b c0       	rjmp	.+22     	; 0x8a82 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    8a6c:	24 e1       	ldi	r18, 0x14	; 20
    8a6e:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    8a72:	30 91 b6 0b 	lds	r19, 0x0BB6
    8a76:	21 e0       	ldi	r18, 0x01	; 1
    8a78:	23 27       	eor	r18, r19
    8a7a:	20 93 b6 0b 	sts	0x0BB6, r18
    8a7e:	01 c0       	rjmp	.+2      	; 0x8a82 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    8a80:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    8a82:	bc 01       	movw	r22, r24
    8a84:	8f 2d       	mov	r24, r15
    8a86:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    8a8a:	84 e0       	ldi	r24, 0x04	; 4
    8a8c:	8f 0d       	add	r24, r15
    8a8e:	0f 90       	pop	r0
    8a90:	df 91       	pop	r29
    8a92:	cf 91       	pop	r28
    8a94:	1f 91       	pop	r17
    8a96:	0f 91       	pop	r16
    8a98:	ff 90       	pop	r15
    8a9a:	08 95       	ret

00008a9c <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    8a9c:	ef 92       	push	r14
    8a9e:	ff 92       	push	r15
    8aa0:	0f 93       	push	r16
    8aa2:	1f 93       	push	r17
    8aa4:	cf 93       	push	r28
    8aa6:	df 93       	push	r29
    8aa8:	00 d0       	rcall	.+0      	; 0x8aaa <shot_map+0xe>
    8aaa:	cd b7       	in	r28, 0x3d	; 61
    8aac:	de b7       	in	r29, 0x3e	; 62
    8aae:	f6 2e       	mov	r15, r22
	char looped = 0;
    8ab0:	19 82       	std	Y+1, r1	; 0x01
    8ab2:	8c 01       	movw	r16, r24
    8ab4:	08 5d       	subi	r16, 0xD8	; 216
    8ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    8ab8:	82 e0       	ldi	r24, 0x02	; 2
    8aba:	e8 2e       	mov	r14, r24
    8abc:	e6 0e       	add	r14, r22
	char* s_map = 0;
	u8 s_flags = 0;
    8abe:	20 e0       	ldi	r18, 0x00	; 0
    8ac0:	f8 01       	movw	r30, r16
    8ac2:	31 97       	sbiw	r30, 0x01	; 1
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    8ac4:	80 81       	ld	r24, Z
    8ac6:	88 23       	and	r24, r24
    8ac8:	41 f1       	breq	.+80     	; 0x8b1a <shot_map+0x7e>
    8aca:	3d 97       	sbiw	r30, 0x0d	; 13
		{
			switch (shot->shared.direction)
    8acc:	80 81       	ld	r24, Z
    8ace:	81 30       	cpi	r24, 0x01	; 1
    8ad0:	71 f0       	breq	.+28     	; 0x8aee <shot_map+0x52>
    8ad2:	f0 f0       	brcs	.+60     	; 0x8b10 <shot_map+0x74>
    8ad4:	82 30       	cpi	r24, 0x02	; 2
    8ad6:	a1 f0       	breq	.+40     	; 0x8b00 <shot_map+0x64>
    8ad8:	83 30       	cpi	r24, 0x03	; 3
    8ada:	d1 f4       	brne	.+52     	; 0x8b10 <shot_map+0x74>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    8adc:	be 01       	movw	r22, r28
    8ade:	6f 5f       	subi	r22, 0xFF	; 255
    8ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    8ae2:	c8 01       	movw	r24, r16
    8ae4:	0a 96       	adiw	r24, 0x0a	; 10
    8ae6:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <LBGetNextFrame>
    8aea:	21 e0       	ldi	r18, 0x01	; 1
    8aec:	18 c0       	rjmp	.+48     	; 0x8b1e <shot_map+0x82>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    8aee:	be 01       	movw	r22, r28
    8af0:	6f 5f       	subi	r22, 0xFF	; 255
    8af2:	7f 4f       	sbci	r23, 0xFF	; 255
    8af4:	c8 01       	movw	r24, r16
    8af6:	0a 96       	adiw	r24, 0x0a	; 10
    8af8:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <LBGetNextFrame>
    8afc:	20 e0       	ldi	r18, 0x00	; 0
    8afe:	0f c0       	rjmp	.+30     	; 0x8b1e <shot_map+0x82>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    8b00:	be 01       	movw	r22, r28
    8b02:	6f 5f       	subi	r22, 0xFF	; 255
    8b04:	7f 4f       	sbci	r23, 0xFF	; 255
    8b06:	c8 01       	movw	r24, r16
    8b08:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <LBGetNextFrame>
    8b0c:	22 e0       	ldi	r18, 0x02	; 2
    8b0e:	07 c0       	rjmp	.+14     	; 0x8b1e <shot_map+0x82>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    8b10:	be 01       	movw	r22, r28
    8b12:	6f 5f       	subi	r22, 0xFF	; 255
    8b14:	7f 4f       	sbci	r23, 0xFF	; 255
    8b16:	c8 01       	movw	r24, r16
    8b18:	ef cf       	rjmp	.-34     	; 0x8af8 <shot_map+0x5c>
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    8b1a:	81 eb       	ldi	r24, 0xB1	; 177
    8b1c:	98 e2       	ldi	r25, 0x28	; 40
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    8b1e:	42 2f       	mov	r20, r18
    8b20:	bc 01       	movw	r22, r24
    8b22:	8f 2d       	mov	r24, r15
    8b24:	2a 83       	std	Y+2, r18	; 0x02
    8b26:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
    8b2a:	f3 94       	inc	r15
    8b2c:	0e 5d       	subi	r16, 0xDE	; 222
    8b2e:	1f 4f       	sbci	r17, 0xFF	; 255
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    8b30:	2a 81       	ldd	r18, Y+2	; 0x02
    8b32:	fe 10       	cpse	r15, r14
    8b34:	c5 cf       	rjmp	.-118    	; 0x8ac0 <shot_map+0x24>
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
		sprite_index++;
	}
	return sprite_index;
}
    8b36:	8f 2d       	mov	r24, r15
    8b38:	0f 90       	pop	r0
    8b3a:	0f 90       	pop	r0
    8b3c:	df 91       	pop	r29
    8b3e:	cf 91       	pop	r28
    8b40:	1f 91       	pop	r17
    8b42:	0f 91       	pop	r16
    8b44:	ff 90       	pop	r15
    8b46:	ef 90       	pop	r14
    8b48:	08 95       	ret

00008b4a <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    8b4a:	cf 93       	push	r28
    8b4c:	df 93       	push	r29
    8b4e:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    8b50:	88 81       	ld	r24, Y
    8b52:	81 11       	cpse	r24, r1
    8b54:	15 c0       	rjmp	.+42     	; 0x8b80 <recoil_sprite+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    8b56:	69 81       	ldd	r22, Y+1	; 0x01
    8b58:	70 e0       	ldi	r23, 0x00	; 0
    8b5a:	80 e0       	ldi	r24, 0x00	; 0
    8b5c:	90 e0       	ldi	r25, 0x00	; 0
    8b5e:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    8b62:	25 e6       	ldi	r18, 0x65	; 101
    8b64:	38 e8       	ldi	r19, 0x88	; 136
    8b66:	48 e8       	ldi	r20, 0x88	; 136
    8b68:	5c e3       	ldi	r21, 0x3C	; 60
    8b6a:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    8b6e:	9b 01       	movw	r18, r22
    8b70:	ac 01       	movw	r20, r24
    8b72:	6e 81       	ldd	r22, Y+6	; 0x06
    8b74:	7f 81       	ldd	r23, Y+7	; 0x07
    8b76:	88 85       	ldd	r24, Y+8	; 0x08
    8b78:	99 85       	ldd	r25, Y+9	; 0x09
    8b7a:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8b7e:	2d c0       	rjmp	.+90     	; 0x8bda <recoil_sprite+0x90>
	}
	if (sprite->direction == D_RIGHT)
    8b80:	81 30       	cpi	r24, 0x01	; 1
    8b82:	a9 f4       	brne	.+42     	; 0x8bae <recoil_sprite+0x64>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    8b84:	69 81       	ldd	r22, Y+1	; 0x01
    8b86:	70 e0       	ldi	r23, 0x00	; 0
    8b88:	80 e0       	ldi	r24, 0x00	; 0
    8b8a:	90 e0       	ldi	r25, 0x00	; 0
    8b8c:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    8b90:	25 e6       	ldi	r18, 0x65	; 101
    8b92:	38 e8       	ldi	r19, 0x88	; 136
    8b94:	48 e8       	ldi	r20, 0x88	; 136
    8b96:	5c e3       	ldi	r21, 0x3C	; 60
    8b98:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    8b9c:	9b 01       	movw	r18, r22
    8b9e:	ac 01       	movw	r20, r24
    8ba0:	6a 81       	ldd	r22, Y+2	; 0x02
    8ba2:	7b 81       	ldd	r23, Y+3	; 0x03
    8ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    8ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    8ba8:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8bac:	31 c0       	rjmp	.+98     	; 0x8c10 <recoil_sprite+0xc6>
	}
	if (sprite->direction == D_DOWN)
    8bae:	82 30       	cpi	r24, 0x02	; 2
    8bb0:	c9 f4       	brne	.+50     	; 0x8be4 <recoil_sprite+0x9a>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    8bb2:	69 81       	ldd	r22, Y+1	; 0x01
    8bb4:	70 e0       	ldi	r23, 0x00	; 0
    8bb6:	80 e0       	ldi	r24, 0x00	; 0
    8bb8:	90 e0       	ldi	r25, 0x00	; 0
    8bba:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    8bbe:	25 e6       	ldi	r18, 0x65	; 101
    8bc0:	38 e8       	ldi	r19, 0x88	; 136
    8bc2:	48 e8       	ldi	r20, 0x88	; 136
    8bc4:	5c e3       	ldi	r21, 0x3C	; 60
    8bc6:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    8bca:	9b 01       	movw	r18, r22
    8bcc:	ac 01       	movw	r20, r24
    8bce:	6e 81       	ldd	r22, Y+6	; 0x06
    8bd0:	7f 81       	ldd	r23, Y+7	; 0x07
    8bd2:	88 85       	ldd	r24, Y+8	; 0x08
    8bd4:	99 85       	ldd	r25, Y+9	; 0x09
    8bd6:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8bda:	6e 83       	std	Y+6, r22	; 0x06
    8bdc:	7f 83       	std	Y+7, r23	; 0x07
    8bde:	88 87       	std	Y+8, r24	; 0x08
    8be0:	99 87       	std	Y+9, r25	; 0x09
    8be2:	1a c0       	rjmp	.+52     	; 0x8c18 <recoil_sprite+0xce>
	}
	if (sprite->direction == D_LEFT)
    8be4:	83 30       	cpi	r24, 0x03	; 3
    8be6:	c1 f4       	brne	.+48     	; 0x8c18 <recoil_sprite+0xce>
	{
		sprite->x += FRAME_TIME * sprite->speed;
    8be8:	69 81       	ldd	r22, Y+1	; 0x01
    8bea:	70 e0       	ldi	r23, 0x00	; 0
    8bec:	80 e0       	ldi	r24, 0x00	; 0
    8bee:	90 e0       	ldi	r25, 0x00	; 0
    8bf0:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    8bf4:	25 e6       	ldi	r18, 0x65	; 101
    8bf6:	38 e8       	ldi	r19, 0x88	; 136
    8bf8:	48 e8       	ldi	r20, 0x88	; 136
    8bfa:	5c e3       	ldi	r21, 0x3C	; 60
    8bfc:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    8c00:	9b 01       	movw	r18, r22
    8c02:	ac 01       	movw	r20, r24
    8c04:	6a 81       	ldd	r22, Y+2	; 0x02
    8c06:	7b 81       	ldd	r23, Y+3	; 0x03
    8c08:	8c 81       	ldd	r24, Y+4	; 0x04
    8c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    8c0c:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8c10:	6a 83       	std	Y+2, r22	; 0x02
    8c12:	7b 83       	std	Y+3, r23	; 0x03
    8c14:	8c 83       	std	Y+4, r24	; 0x04
    8c16:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    8c18:	df 91       	pop	r29
    8c1a:	cf 91       	pop	r28
    8c1c:	08 95       	ret

00008c1e <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    8c1e:	80 53       	subi	r24, 0x30	; 48
    8c20:	93 4f       	sbci	r25, 0xF3	; 243
    8c22:	fc 01       	movw	r30, r24
    8c24:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    8c26:	81 30       	cpi	r24, 0x01	; 1
    8c28:	21 f0       	breq	.+8      	; 0x8c32 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    8c2a:	82 30       	cpi	r24, 0x02	; 2
    8c2c:	21 f0       	breq	.+8      	; 0x8c36 <solid_square_tile+0x18>

	return 0;
    8c2e:	80 e0       	ldi	r24, 0x00	; 0
    8c30:	08 95       	ret
    8c32:	81 e0       	ldi	r24, 0x01	; 1
    8c34:	08 95       	ret
    8c36:	82 e0       	ldi	r24, 0x02	; 2
}
    8c38:	08 95       	ret

00008c3a <solid_directional_tile>:

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    8c3a:	5f 92       	push	r5
    8c3c:	6f 92       	push	r6
    8c3e:	7f 92       	push	r7
    8c40:	8f 92       	push	r8
    8c42:	9f 92       	push	r9
    8c44:	af 92       	push	r10
    8c46:	bf 92       	push	r11
    8c48:	cf 92       	push	r12
    8c4a:	df 92       	push	r13
    8c4c:	ef 92       	push	r14
    8c4e:	ff 92       	push	r15
    8c50:	0f 93       	push	r16
    8c52:	1f 93       	push	r17
    8c54:	cf 93       	push	r28
    8c56:	df 93       	push	r29
    8c58:	f6 2e       	mov	r15, r22
    8c5a:	d4 2e       	mov	r13, r20
    8c5c:	92 2e       	mov	r9, r18
    8c5e:	b0 2e       	mov	r11, r16
	u8 tile = level.level_map[tile_index];
    8c60:	fc 01       	movw	r30, r24
    8c62:	e0 53       	subi	r30, 0x30	; 48
    8c64:	f3 4f       	sbci	r31, 0xF3	; 243
    8c66:	11 81       	ldd	r17, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    8c68:	6e e1       	ldi	r22, 0x1E	; 30
    8c6a:	70 e0       	ldi	r23, 0x00	; 0
    8c6c:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    8c70:	d8 2f       	mov	r29, r24
    8c72:	dd 0f       	add	r29, r29
    8c74:	dd 0f       	add	r29, r29
    8c76:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    8c78:	6d 5f       	subi	r22, 0xFD	; 253
    8c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    8c7c:	c6 2f       	mov	r28, r22
    8c7e:	cc 0f       	add	r28, r28
    8c80:	cc 0f       	add	r28, r28
    8c82:	cc 0f       	add	r28, r28

	if ((tile == L_TL) || (tile == L_BR))
    8c84:	13 30       	cpi	r17, 0x03	; 3
    8c86:	11 f0       	breq	.+4      	; 0x8c8c <solid_directional_tile+0x52>
    8c88:	16 30       	cpi	r17, 0x06	; 6
    8c8a:	a1 f5       	brne	.+104    	; 0x8cf4 <solid_directional_tile+0xba>
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height)) return tile;
    8c8c:	6d 2c       	mov	r6, r13
    8c8e:	6b 0c       	add	r6, r11
    8c90:	27 e0       	ldi	r18, 0x07	; 7
    8c92:	72 2e       	mov	r7, r18
    8c94:	7d 0e       	add	r7, r29
    8c96:	37 e0       	ldi	r19, 0x07	; 7
    8c98:	83 2e       	mov	r8, r19
    8c9a:	8c 0e       	add	r8, r28
    8c9c:	a6 2c       	mov	r10, r6
    8c9e:	cf 2c       	mov	r12, r15
    8ca0:	ed 2c       	mov	r14, r13
    8ca2:	0f 2d       	mov	r16, r15
    8ca4:	2c 2f       	mov	r18, r28
    8ca6:	47 2d       	mov	r20, r7
    8ca8:	68 2d       	mov	r22, r8
    8caa:	8d 2f       	mov	r24, r29
    8cac:	0e 94 70 40 	call	0x80e0	; 0x80e0 <LBLineIntersect>
    8cb0:	81 11       	cpse	r24, r1
    8cb2:	59 c0       	rjmp	.+178    	; 0x8d66 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width, y)) return tile;
    8cb4:	5f 2c       	mov	r5, r15
    8cb6:	59 0c       	add	r5, r9
    8cb8:	ad 2c       	mov	r10, r13
    8cba:	c5 2c       	mov	r12, r5
    8cbc:	2c 2f       	mov	r18, r28
    8cbe:	47 2d       	mov	r20, r7
    8cc0:	68 2d       	mov	r22, r8
    8cc2:	8d 2f       	mov	r24, r29
    8cc4:	0e 94 70 40 	call	0x80e0	; 0x80e0 <LBLineIntersect>
    8cc8:	81 11       	cpse	r24, r1
    8cca:	4d c0       	rjmp	.+154    	; 0x8d66 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width, y, x+width, y+height)) return tile;
    8ccc:	a6 2c       	mov	r10, r6
    8cce:	05 2d       	mov	r16, r5
    8cd0:	2c 2f       	mov	r18, r28
    8cd2:	47 2d       	mov	r20, r7
    8cd4:	68 2d       	mov	r22, r8
    8cd6:	8d 2f       	mov	r24, r29
    8cd8:	0e 94 70 40 	call	0x80e0	; 0x80e0 <LBLineIntersect>
    8cdc:	81 11       	cpse	r24, r1
    8cde:	43 c0       	rjmp	.+134    	; 0x8d66 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height, x+width, y+height)) return tile;
    8ce0:	e6 2c       	mov	r14, r6
    8ce2:	0f 2d       	mov	r16, r15
    8ce4:	2c 2f       	mov	r18, r28
    8ce6:	47 2d       	mov	r20, r7
    8ce8:	68 2d       	mov	r22, r8
    8cea:	8d 2f       	mov	r24, r29
    8cec:	0e 94 70 40 	call	0x80e0	; 0x80e0 <LBLineIntersect>
    8cf0:	81 11       	cpse	r24, r1
    8cf2:	39 c0       	rjmp	.+114    	; 0x8d66 <solid_directional_tile+0x12c>
	}
	if ((tile == L_TR) || (tile == L_BL))
    8cf4:	8c ef       	ldi	r24, 0xFC	; 252
    8cf6:	81 0f       	add	r24, r17
    8cf8:	82 30       	cpi	r24, 0x02	; 2
    8cfa:	98 f5       	brcc	.+102    	; 0x8d62 <solid_directional_tile+0x128>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height)) return tile;
    8cfc:	bd 0c       	add	r11, r13
    8cfe:	87 e0       	ldi	r24, 0x07	; 7
    8d00:	78 2e       	mov	r7, r24
    8d02:	7c 0e       	add	r7, r28
    8d04:	97 e0       	ldi	r25, 0x07	; 7
    8d06:	89 2e       	mov	r8, r25
    8d08:	8d 0e       	add	r8, r29
    8d0a:	ab 2c       	mov	r10, r11
    8d0c:	cf 2c       	mov	r12, r15
    8d0e:	ed 2c       	mov	r14, r13
    8d10:	0f 2d       	mov	r16, r15
    8d12:	27 2d       	mov	r18, r7
    8d14:	48 2d       	mov	r20, r8
    8d16:	6c 2f       	mov	r22, r28
    8d18:	8d 2f       	mov	r24, r29
    8d1a:	0e 94 70 40 	call	0x80e0	; 0x80e0 <LBLineIntersect>
    8d1e:	81 11       	cpse	r24, r1
    8d20:	22 c0       	rjmp	.+68     	; 0x8d66 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width, y)) return tile;
    8d22:	9f 0c       	add	r9, r15
    8d24:	ad 2c       	mov	r10, r13
    8d26:	c9 2c       	mov	r12, r9
    8d28:	27 2d       	mov	r18, r7
    8d2a:	48 2d       	mov	r20, r8
    8d2c:	6c 2f       	mov	r22, r28
    8d2e:	8d 2f       	mov	r24, r29
    8d30:	0e 94 70 40 	call	0x80e0	; 0x80e0 <LBLineIntersect>
    8d34:	81 11       	cpse	r24, r1
    8d36:	17 c0       	rjmp	.+46     	; 0x8d66 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width, y, x+width, y+height)) return tile;
    8d38:	ab 2c       	mov	r10, r11
    8d3a:	09 2d       	mov	r16, r9
    8d3c:	27 2d       	mov	r18, r7
    8d3e:	48 2d       	mov	r20, r8
    8d40:	6c 2f       	mov	r22, r28
    8d42:	8d 2f       	mov	r24, r29
    8d44:	0e 94 70 40 	call	0x80e0	; 0x80e0 <LBLineIntersect>
    8d48:	81 11       	cpse	r24, r1
    8d4a:	0d c0       	rjmp	.+26     	; 0x8d66 <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height, x+width, y+height)) return tile;
    8d4c:	eb 2c       	mov	r14, r11
    8d4e:	0f 2d       	mov	r16, r15
    8d50:	27 2d       	mov	r18, r7
    8d52:	48 2d       	mov	r20, r8
    8d54:	6c 2f       	mov	r22, r28
    8d56:	8d 2f       	mov	r24, r29
    8d58:	0e 94 70 40 	call	0x80e0	; 0x80e0 <LBLineIntersect>
    8d5c:	81 11       	cpse	r24, r1
    8d5e:	03 c0       	rjmp	.+6      	; 0x8d66 <solid_directional_tile+0x12c>
    8d60:	03 c0       	rjmp	.+6      	; 0x8d68 <solid_directional_tile+0x12e>
	}
	
	return 0;
    8d62:	80 e0       	ldi	r24, 0x00	; 0
    8d64:	01 c0       	rjmp	.+2      	; 0x8d68 <solid_directional_tile+0x12e>
    8d66:	81 2f       	mov	r24, r17
}
    8d68:	df 91       	pop	r29
    8d6a:	cf 91       	pop	r28
    8d6c:	1f 91       	pop	r17
    8d6e:	0f 91       	pop	r16
    8d70:	ff 90       	pop	r15
    8d72:	ef 90       	pop	r14
    8d74:	df 90       	pop	r13
    8d76:	cf 90       	pop	r12
    8d78:	bf 90       	pop	r11
    8d7a:	af 90       	pop	r10
    8d7c:	9f 90       	pop	r9
    8d7e:	8f 90       	pop	r8
    8d80:	7f 90       	pop	r7
    8d82:	6f 90       	pop	r6
    8d84:	5f 90       	pop	r5
    8d86:	08 95       	ret

00008d88 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    8d88:	af 92       	push	r10
    8d8a:	cf 92       	push	r12
    8d8c:	ef 92       	push	r14
    8d8e:	0f 93       	push	r16
    8d90:	1f 93       	push	r17
    8d92:	cf 93       	push	r28
    8d94:	df 93       	push	r29
    8d96:	ec 01       	movw	r28, r24
    8d98:	8b 01       	movw	r16, r22
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
    8d9a:	fb 01       	movw	r30, r22
    8d9c:	66 81       	ldd	r22, Z+6	; 0x06
    8d9e:	77 81       	ldd	r23, Z+7	; 0x07
    8da0:	80 85       	ldd	r24, Z+8	; 0x08
    8da2:	91 85       	ldd	r25, Z+9	; 0x09
    8da4:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    8da8:	e6 2e       	mov	r14, r22
    8daa:	f8 01       	movw	r30, r16
    8dac:	62 81       	ldd	r22, Z+2	; 0x02
    8dae:	73 81       	ldd	r23, Z+3	; 0x03
    8db0:	84 81       	ldd	r24, Z+4	; 0x04
    8db2:	95 81       	ldd	r25, Z+5	; 0x05
    8db4:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    8db8:	06 2f       	mov	r16, r22
    8dba:	6e 81       	ldd	r22, Y+6	; 0x06
    8dbc:	7f 81       	ldd	r23, Y+7	; 0x07
    8dbe:	88 85       	ldd	r24, Y+8	; 0x08
    8dc0:	99 85       	ldd	r25, Y+9	; 0x09
    8dc2:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    8dc6:	16 2f       	mov	r17, r22
    8dc8:	6a 81       	ldd	r22, Y+2	; 0x02
    8dca:	7b 81       	ldd	r23, Y+3	; 0x03
    8dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    8dce:	9d 81       	ldd	r25, Y+5	; 0x05
    8dd0:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    8dd4:	86 2f       	mov	r24, r22
    8dd6:	97 e0       	ldi	r25, 0x07	; 7
    8dd8:	a9 2e       	mov	r10, r25
    8dda:	27 e0       	ldi	r18, 0x07	; 7
    8ddc:	c2 2e       	mov	r12, r18
    8dde:	2e e0       	ldi	r18, 0x0E	; 14
    8de0:	4e e0       	ldi	r20, 0x0E	; 14
    8de2:	61 2f       	mov	r22, r17
    8de4:	0e 94 46 40 	call	0x808c	; 0x808c <LBCollides>
    8de8:	88 23       	and	r24, r24
    8dea:	39 f0       	breq	.+14     	; 0x8dfa <player_shot+0x72>
    8dec:	91 e0       	ldi	r25, 0x01	; 1
    8dee:	8e 89       	ldd	r24, Y+22	; 0x16
    8df0:	88 37       	cpi	r24, 0x78	; 120
    8df2:	09 f0       	breq	.+2      	; 0x8df6 <player_shot+0x6e>
    8df4:	90 e0       	ldi	r25, 0x00	; 0
    8df6:	89 2f       	mov	r24, r25
    8df8:	01 c0       	rjmp	.+2      	; 0x8dfc <player_shot+0x74>
    8dfa:	80 e0       	ldi	r24, 0x00	; 0
}
    8dfc:	df 91       	pop	r29
    8dfe:	cf 91       	pop	r28
    8e00:	1f 91       	pop	r17
    8e02:	0f 91       	pop	r16
    8e04:	ef 90       	pop	r14
    8e06:	cf 90       	pop	r12
    8e08:	af 90       	pop	r10
    8e0a:	08 95       	ret

00008e0c <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    8e0c:	cf 92       	push	r12
    8e0e:	df 92       	push	r13
    8e10:	ef 92       	push	r14
    8e12:	ff 92       	push	r15
    8e14:	cf 93       	push	r28
    8e16:	df 93       	push	r29
    8e18:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    8e1a:	ca 80       	ldd	r12, Y+2	; 0x02
    8e1c:	db 80       	ldd	r13, Y+3	; 0x03
    8e1e:	ec 80       	ldd	r14, Y+4	; 0x04
    8e20:	fd 80       	ldd	r15, Y+5	; 0x05
    8e22:	20 e0       	ldi	r18, 0x00	; 0
    8e24:	30 e0       	ldi	r19, 0x00	; 0
    8e26:	a9 01       	movw	r20, r18
    8e28:	c7 01       	movw	r24, r14
    8e2a:	b6 01       	movw	r22, r12
    8e2c:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8e30:	87 fd       	sbrc	r24, 7
    8e32:	31 c0       	rjmp	.+98     	; 0x8e96 <collision_detect_boundries+0x8a>
    8e34:	20 e0       	ldi	r18, 0x00	; 0
    8e36:	30 e0       	ldi	r19, 0x00	; 0
    8e38:	40 ee       	ldi	r20, 0xE0	; 224
    8e3a:	50 e4       	ldi	r21, 0x40	; 64
    8e3c:	c7 01       	movw	r24, r14
    8e3e:	b6 01       	movw	r22, r12
    8e40:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8e44:	20 e0       	ldi	r18, 0x00	; 0
    8e46:	30 e0       	ldi	r19, 0x00	; 0
    8e48:	40 e7       	ldi	r20, 0x70	; 112
    8e4a:	53 e4       	ldi	r21, 0x43	; 67
    8e4c:	0e 94 b5 53 	call	0xa76a	; 0xa76a <__gesf2>
    8e50:	18 16       	cp	r1, r24
    8e52:	0c f1       	brlt	.+66     	; 0x8e96 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    8e54:	ce 80       	ldd	r12, Y+6	; 0x06
    8e56:	df 80       	ldd	r13, Y+7	; 0x07
    8e58:	e8 84       	ldd	r14, Y+8	; 0x08
    8e5a:	f9 84       	ldd	r15, Y+9	; 0x09
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    8e5c:	20 e0       	ldi	r18, 0x00	; 0
    8e5e:	30 e0       	ldi	r19, 0x00	; 0
    8e60:	40 ec       	ldi	r20, 0xC0	; 192
    8e62:	51 e4       	ldi	r21, 0x41	; 65
    8e64:	c7 01       	movw	r24, r14
    8e66:	b6 01       	movw	r22, r12
    8e68:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <__cmpsf2>
    8e6c:	87 fd       	sbrc	r24, 7
    8e6e:	13 c0       	rjmp	.+38     	; 0x8e96 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    8e70:	20 e0       	ldi	r18, 0x00	; 0
    8e72:	30 e0       	ldi	r19, 0x00	; 0
    8e74:	40 ee       	ldi	r20, 0xE0	; 224
    8e76:	50 e4       	ldi	r21, 0x40	; 64
    8e78:	c7 01       	movw	r24, r14
    8e7a:	b6 01       	movw	r22, r12
    8e7c:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    8e80:	c1 e0       	ldi	r28, 0x01	; 1
    8e82:	20 e0       	ldi	r18, 0x00	; 0
    8e84:	30 e0       	ldi	r19, 0x00	; 0
    8e86:	40 e6       	ldi	r20, 0x60	; 96
    8e88:	53 e4       	ldi	r21, 0x43	; 67
    8e8a:	0e 94 b5 53 	call	0xa76a	; 0xa76a <__gesf2>
    8e8e:	18 16       	cp	r1, r24
    8e90:	1c f0       	brlt	.+6      	; 0x8e98 <collision_detect_boundries+0x8c>
    8e92:	c0 e0       	ldi	r28, 0x00	; 0
    8e94:	01 c0       	rjmp	.+2      	; 0x8e98 <collision_detect_boundries+0x8c>
	{
		return 1;
    8e96:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    8e98:	8c 2f       	mov	r24, r28
    8e9a:	df 91       	pop	r29
    8e9c:	cf 91       	pop	r28
    8e9e:	ff 90       	pop	r15
    8ea0:	ef 90       	pop	r14
    8ea2:	df 90       	pop	r13
    8ea4:	cf 90       	pop	r12
    8ea6:	08 95       	ret

00008ea8 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    8ea8:	ff 92       	push	r15
    8eaa:	0f 93       	push	r16
    8eac:	1f 93       	push	r17
    8eae:	cf 93       	push	r28
    8eb0:	df 93       	push	r29
    8eb2:	8c 01       	movw	r16, r24
    8eb4:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    8eb6:	20 e0       	ldi	r18, 0x00	; 0
    8eb8:	30 e0       	ldi	r19, 0x00	; 0
    8eba:	40 e0       	ldi	r20, 0x00	; 0
    8ebc:	5e e3       	ldi	r21, 0x3E	; 62
    8ebe:	fc 01       	movw	r30, r24
    8ec0:	66 81       	ldd	r22, Z+6	; 0x06
    8ec2:	77 81       	ldd	r23, Z+7	; 0x07
    8ec4:	80 85       	ldd	r24, Z+8	; 0x08
    8ec6:	91 85       	ldd	r25, Z+9	; 0x09
    8ec8:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    8ecc:	20 e0       	ldi	r18, 0x00	; 0
    8ece:	30 e0       	ldi	r19, 0x00	; 0
    8ed0:	40 e4       	ldi	r20, 0x40	; 64
    8ed2:	50 e4       	ldi	r21, 0x40	; 64
    8ed4:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    8ed8:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
	int tile_index = (y * 30) + x;
    8edc:	fe e1       	ldi	r31, 0x1E	; 30
    8ede:	6f 9f       	mul	r22, r31
    8ee0:	e0 01       	movw	r28, r0
    8ee2:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    8ee4:	20 e0       	ldi	r18, 0x00	; 0
    8ee6:	30 e0       	ldi	r19, 0x00	; 0
    8ee8:	40 e0       	ldi	r20, 0x00	; 0
    8eea:	5e e3       	ldi	r21, 0x3E	; 62
    8eec:	f8 01       	movw	r30, r16
    8eee:	62 81       	ldd	r22, Z+2	; 0x02
    8ef0:	73 81       	ldd	r23, Z+3	; 0x03
    8ef2:	84 81       	ldd	r24, Z+4	; 0x04
    8ef4:	95 81       	ldd	r25, Z+5	; 0x05
    8ef6:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    8efa:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    8efe:	c6 0f       	add	r28, r22
    8f00:	d1 1d       	adc	r29, r1

	if (player->has_over_speed)
    8f02:	f8 01       	movw	r30, r16
    8f04:	81 8d       	ldd	r24, Z+25	; 0x19
    8f06:	88 23       	and	r24, r24
    8f08:	c9 f0       	breq	.+50     	; 0x8f3c <kill_player+0x94>
	{
		SetTile(hud_x+10, 1, 0);
    8f0a:	40 e0       	ldi	r20, 0x00	; 0
    8f0c:	50 e0       	ldi	r21, 0x00	; 0
    8f0e:	61 e0       	ldi	r22, 0x01	; 1
    8f10:	8a e0       	ldi	r24, 0x0A	; 10
    8f12:	8f 0d       	add	r24, r15
    8f14:	0e 94 ee 30 	call	0x61dc	; 0x61dc <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    8f18:	ce 01       	movw	r24, r28
    8f1a:	6e e1       	ldi	r22, 0x1E	; 30
    8f1c:	70 e0       	ldi	r23, 0x00	; 0
    8f1e:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    8f22:	6c 5f       	subi	r22, 0xFC	; 252
    8f24:	42 ed       	ldi	r20, 0xD2	; 210
    8f26:	58 e2       	ldi	r21, 0x28	; 40
    8f28:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    8f2c:	87 e0       	ldi	r24, 0x07	; 7
    8f2e:	fe 01       	movw	r30, r28
    8f30:	e0 53       	subi	r30, 0x30	; 48
    8f32:	f3 4f       	sbci	r31, 0xF3	; 243
    8f34:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    8f36:	82 e3       	ldi	r24, 0x32	; 50
    8f38:	f8 01       	movw	r30, r16
    8f3a:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (player->has_rocket)
    8f3c:	f8 01       	movw	r30, r16
    8f3e:	80 8d       	ldd	r24, Z+24	; 0x18
    8f40:	88 23       	and	r24, r24
    8f42:	b1 f0       	breq	.+44     	; 0x8f70 <kill_player+0xc8>
	{
		SetTile(hud_x+11, 1, 0);
    8f44:	40 e0       	ldi	r20, 0x00	; 0
    8f46:	50 e0       	ldi	r21, 0x00	; 0
    8f48:	61 e0       	ldi	r22, 0x01	; 1
    8f4a:	8b e0       	ldi	r24, 0x0B	; 11
    8f4c:	8f 0d       	add	r24, r15
    8f4e:	0e 94 ee 30 	call	0x61dc	; 0x61dc <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    8f52:	ce 01       	movw	r24, r28
    8f54:	6e e1       	ldi	r22, 0x1E	; 30
    8f56:	70 e0       	ldi	r23, 0x00	; 0
    8f58:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    8f5c:	6c 5f       	subi	r22, 0xFC	; 252
    8f5e:	4c ec       	ldi	r20, 0xCC	; 204
    8f60:	58 e2       	ldi	r21, 0x28	; 40
    8f62:	8f 5f       	subi	r24, 0xFF	; 255
    8f64:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    8f68:	c0 53       	subi	r28, 0x30	; 48
    8f6a:	d3 4f       	sbci	r29, 0xF3	; 243
    8f6c:	89 e0       	ldi	r24, 0x09	; 9
    8f6e:	88 a3       	std	Y+32, r24	; 0x20
	}
	player->has_over_speed = false;
    8f70:	f8 01       	movw	r30, r16
    8f72:	11 8e       	std	Z+25, r1	; 0x19
	player->has_rocket = false;
    8f74:	10 8e       	std	Z+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    8f76:	83 89       	ldd	r24, Z+19	; 0x13
    8f78:	81 60       	ori	r24, 0x01	; 1
    8f7a:	83 8b       	std	Z+19, r24	; 0x13
}
    8f7c:	df 91       	pop	r29
    8f7e:	cf 91       	pop	r28
    8f80:	1f 91       	pop	r17
    8f82:	0f 91       	pop	r16
    8f84:	ff 90       	pop	r15
    8f86:	08 95       	ret

00008f88 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    8f88:	fc 01       	movw	r30, r24
    8f8a:	8e e1       	ldi	r24, 0x1E	; 30
    8f8c:	48 9f       	mul	r20, r24
    8f8e:	a0 01       	movw	r20, r0
    8f90:	11 24       	eor	r1, r1
    8f92:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    8f94:	64 0f       	add	r22, r20
    8f96:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    8f98:	21 11       	cpse	r18, r1
    8f9a:	05 c0       	rjmp	.+10     	; 0x8fa6 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    8f9c:	71 83       	std	Z+1, r23	; 0x01
    8f9e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    8fa0:	6f 5f       	subi	r22, 0xFF	; 255
    8fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    8fa4:	12 c0       	rjmp	.+36     	; 0x8fca <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    8fa6:	21 30       	cpi	r18, 0x01	; 1
    8fa8:	19 f4       	brne	.+6      	; 0x8fb0 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    8faa:	cb 01       	movw	r24, r22
    8fac:	01 96       	adiw	r24, 0x01	; 1
    8fae:	04 c0       	rjmp	.+8      	; 0x8fb8 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    8fb0:	22 30       	cpi	r18, 0x02	; 2
    8fb2:	39 f4       	brne	.+14     	; 0x8fc2 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    8fb4:	cb 01       	movw	r24, r22
    8fb6:	4e 96       	adiw	r24, 0x1e	; 30
    8fb8:	91 83       	std	Z+1, r25	; 0x01
    8fba:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    8fbc:	61 5e       	subi	r22, 0xE1	; 225
    8fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    8fc0:	04 c0       	rjmp	.+8      	; 0x8fca <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    8fc2:	71 83       	std	Z+1, r23	; 0x01
    8fc4:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    8fc6:	62 5e       	subi	r22, 0xE2	; 226
    8fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    8fca:	73 83       	std	Z+3, r23	; 0x03
    8fcc:	62 83       	std	Z+2, r22	; 0x02
    8fce:	08 95       	ret

00008fd0 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    8fd0:	ef 92       	push	r14
    8fd2:	ff 92       	push	r15
    8fd4:	0f 93       	push	r16
    8fd6:	1f 93       	push	r17
    8fd8:	cf 93       	push	r28
    8fda:	df 93       	push	r29
    8fdc:	ec 01       	movw	r28, r24
    8fde:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    8fe0:	8e e1       	ldi	r24, 0x1E	; 30
    8fe2:	e8 2e       	mov	r14, r24
    8fe4:	f1 2c       	mov	r15, r1
    8fe6:	cb 01       	movw	r24, r22
    8fe8:	b7 01       	movw	r22, r14
    8fea:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    8fee:	6d 5f       	subi	r22, 0xFD	; 253
    8ff0:	40 e0       	ldi	r20, 0x00	; 0
    8ff2:	50 e0       	ldi	r21, 0x00	; 0
    8ff4:	0e 94 ee 30 	call	0x61dc	; 0x61dc <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    8ff8:	88 81       	ld	r24, Y
    8ffa:	fe 01       	movw	r30, r28
    8ffc:	9c e0       	ldi	r25, 0x0C	; 12
    8ffe:	89 9f       	mul	r24, r25
    9000:	e0 0d       	add	r30, r0
    9002:	f1 1d       	adc	r31, r1
    9004:	11 24       	eor	r1, r1
    9006:	83 85       	ldd	r24, Z+11	; 0x0b
    9008:	94 85       	ldd	r25, Z+12	; 0x0c
    900a:	00 97       	sbiw	r24, 0x00	; 0
    900c:	41 f0       	breq	.+16     	; 0x901e <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    900e:	b7 01       	movw	r22, r14
    9010:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    9014:	6d 5f       	subi	r22, 0xFD	; 253
    9016:	40 e0       	ldi	r20, 0x00	; 0
    9018:	50 e0       	ldi	r21, 0x00	; 0
    901a:	0e 94 ee 30 	call	0x61dc	; 0x61dc <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    901e:	88 81       	ld	r24, Y
    9020:	fe 01       	movw	r30, r28
    9022:	9c e0       	ldi	r25, 0x0C	; 12
    9024:	89 9f       	mul	r24, r25
    9026:	e0 0d       	add	r30, r0
    9028:	f1 1d       	adc	r31, r1
    902a:	11 24       	eor	r1, r1
    902c:	14 87       	std	Z+12, r17	; 0x0c
    902e:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    9030:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    9032:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    9034:	82 30       	cpi	r24, 0x02	; 2
    9036:	11 f0       	breq	.+4      	; 0x903c <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    9038:	88 83       	st	Y, r24
    903a:	01 c0       	rjmp	.+2      	; 0x903e <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    903c:	18 82       	st	Y, r1
	}
}
    903e:	df 91       	pop	r29
    9040:	cf 91       	pop	r28
    9042:	1f 91       	pop	r17
    9044:	0f 91       	pop	r16
    9046:	ff 90       	pop	r15
    9048:	ef 90       	pop	r14
    904a:	08 95       	ret

0000904c <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    904c:	6f 92       	push	r6
    904e:	7f 92       	push	r7
    9050:	8f 92       	push	r8
    9052:	9f 92       	push	r9
    9054:	af 92       	push	r10
    9056:	bf 92       	push	r11
    9058:	cf 92       	push	r12
    905a:	df 92       	push	r13
    905c:	ef 92       	push	r14
    905e:	ff 92       	push	r15
    9060:	0f 93       	push	r16
    9062:	1f 93       	push	r17
    9064:	cf 93       	push	r28
    9066:	df 93       	push	r29
    9068:	00 d0       	rcall	.+0      	; 0x906a <collision_detect_shot+0x1e>
    906a:	00 d0       	rcall	.+0      	; 0x906c <collision_detect_shot+0x20>
    906c:	1f 92       	push	r1
    906e:	cd b7       	in	r28, 0x3d	; 61
    9070:	de b7       	in	r29, 0x3e	; 62
    9072:	6c 01       	movw	r12, r24
    9074:	7b 01       	movw	r14, r22
	int tiles[2] = {0, 0};
    9076:	1a 82       	std	Y+2, r1	; 0x02
    9078:	19 82       	std	Y+1, r1	; 0x01
    907a:	1c 82       	std	Y+4, r1	; 0x04
    907c:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    907e:	20 e0       	ldi	r18, 0x00	; 0
    9080:	30 e0       	ldi	r19, 0x00	; 0
    9082:	40 e0       	ldi	r20, 0x00	; 0
    9084:	5e e3       	ldi	r21, 0x3E	; 62
    9086:	fb 01       	movw	r30, r22
    9088:	66 81       	ldd	r22, Z+6	; 0x06
    908a:	77 81       	ldd	r23, Z+7	; 0x07
    908c:	80 85       	ldd	r24, Z+8	; 0x08
    908e:	91 85       	ldd	r25, Z+9	; 0x09
    9090:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    9094:	20 e0       	ldi	r18, 0x00	; 0
    9096:	30 e0       	ldi	r19, 0x00	; 0
    9098:	40 e4       	ldi	r20, 0x40	; 64
    909a:	50 e4       	ldi	r21, 0x40	; 64
    909c:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    90a0:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    90a4:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    90a6:	20 e0       	ldi	r18, 0x00	; 0
    90a8:	30 e0       	ldi	r19, 0x00	; 0
    90aa:	40 e0       	ldi	r20, 0x00	; 0
    90ac:	5e e3       	ldi	r21, 0x3E	; 62
    90ae:	f7 01       	movw	r30, r14
    90b0:	62 81       	ldd	r22, Z+2	; 0x02
    90b2:	73 81       	ldd	r23, Z+3	; 0x03
    90b4:	84 81       	ldd	r24, Z+4	; 0x04
    90b6:	95 81       	ldd	r25, Z+5	; 0x05
    90b8:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    90bc:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
	u8 y = shot->shared.y / 8 - 3;
	u8 tile;
	u8 hud_x;
	Player* p = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    90c0:	f7 01       	movw	r30, r14
    90c2:	20 81       	ld	r18, Z
    90c4:	41 2f       	mov	r20, r17
    90c6:	ce 01       	movw	r24, r28
    90c8:	01 96       	adiw	r24, 0x01	; 1
    90ca:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    90ce:	c7 01       	movw	r24, r14
    90d0:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <collision_detect_boundries>
    90d4:	81 11       	cpse	r24, r1
    90d6:	79 c0       	rjmp	.+242    	; 0x91ca <collision_detect_shot+0x17e>
		player->active_shots--;
		return;
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
    90d8:	b7 01       	movw	r22, r14
    90da:	8e e4       	ldi	r24, 0x4E	; 78
    90dc:	9c e0       	ldi	r25, 0x0C	; 12
    90de:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <player_shot>
    90e2:	88 23       	and	r24, r24
    90e4:	99 f0       	breq	.+38     	; 0x910c <collision_detect_shot+0xc0>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    90e6:	80 91 ce 0f 	lds	r24, 0x0FCE
    90ea:	8f 5f       	subi	r24, 0xFF	; 255
    90ec:	80 93 ce 0f 	sts	0x0FCE, r24
		player2.score++;
    90f0:	80 91 cd 0f 	lds	r24, 0x0FCD
    90f4:	8f 5f       	subi	r24, 0xFF	; 255
    90f6:	80 93 cd 0f 	sts	0x0FCD, r24
		render_score(&player2, 15);
    90fa:	6f e0       	ldi	r22, 0x0F	; 15
    90fc:	8f eb       	ldi	r24, 0xBF	; 191
    90fe:	9f e0       	ldi	r25, 0x0F	; 15
    9100:	0e 94 df 43 	call	0x87be	; 0x87be <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
	{
		p = &player1;
    9104:	0e e4       	ldi	r16, 0x4E	; 78
    9106:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    9108:	b1 2c       	mov	r11, r1
    910a:	20 c0       	rjmp	.+64     	; 0x914c <collision_detect_shot+0x100>
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
    910c:	b7 01       	movw	r22, r14
    910e:	8f eb       	ldi	r24, 0xBF	; 191
    9110:	9f e0       	ldi	r25, 0x0F	; 15
    9112:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <player_shot>
    9116:	81 11       	cpse	r24, r1
    9118:	06 c0       	rjmp	.+12     	; 0x9126 <collision_detect_shot+0xda>
    911a:	ce 01       	movw	r24, r28
    911c:	01 96       	adiw	r24, 0x01	; 1
    911e:	3c 01       	movw	r6, r24
    9120:	a1 2c       	mov	r10, r1
    9122:	b1 2c       	mov	r11, r1
    9124:	43 c0       	rjmp	.+134    	; 0x91ac <collision_detect_shot+0x160>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    9126:	80 91 5d 0c 	lds	r24, 0x0C5D
    912a:	8f 5f       	subi	r24, 0xFF	; 255
    912c:	80 93 5d 0c 	sts	0x0C5D, r24
		player1.score++;
    9130:	80 91 5c 0c 	lds	r24, 0x0C5C
    9134:	8f 5f       	subi	r24, 0xFF	; 255
    9136:	80 93 5c 0c 	sts	0x0C5C, r24
		render_score(&player1, 0);
    913a:	60 e0       	ldi	r22, 0x00	; 0
    913c:	8e e4       	ldi	r24, 0x4E	; 78
    913e:	9c e0       	ldi	r25, 0x0C	; 12
    9140:	0e 94 df 43 	call	0x87be	; 0x87be <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
	{
		p = &player2;
    9144:	0f eb       	ldi	r16, 0xBF	; 191
    9146:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    9148:	2f e0       	ldi	r18, 0x0F	; 15
    914a:	b2 2e       	mov	r11, r18
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    914c:	01 15       	cp	r16, r1
    914e:	11 05       	cpc	r17, r1
    9150:	21 f3       	breq	.-56     	; 0x911a <collision_detect_shot+0xce>
	{
		init_shot_state(shot, shot->shot_type);
    9152:	f7 01       	movw	r30, r14
    9154:	62 85       	ldd	r22, Z+10	; 0x0a
    9156:	c7 01       	movw	r24, r14
    9158:	0e 94 95 41 	call	0x832a	; 0x832a <init_shot_state>
		player->active_shots--;
    915c:	f6 01       	movw	r30, r12
    915e:	80 89       	ldd	r24, Z+16	; 0x10
    9160:	81 50       	subi	r24, 0x01	; 1
    9162:	80 8b       	std	Z+16, r24	; 0x10
		kill_player(p, hud_x);
    9164:	6b 2d       	mov	r22, r11
    9166:	c8 01       	movw	r24, r16
    9168:	0e 94 54 47 	call	0x8ea8	; 0x8ea8 <kill_player>
		return;
    916c:	83 c0       	rjmp	.+262    	; 0x9274 <collision_detect_shot+0x228>
				init_shot_state(shot, shot->shot_type);
				player->active_shots--;
			}
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
    916e:	f7 01       	movw	r30, r14
    9170:	66 81       	ldd	r22, Z+6	; 0x06
    9172:	77 81       	ldd	r23, Z+7	; 0x07
    9174:	80 85       	ldd	r24, Z+8	; 0x08
    9176:	91 85       	ldd	r25, Z+9	; 0x09
    9178:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    917c:	46 2f       	mov	r20, r22
    917e:	f7 01       	movw	r30, r14
    9180:	62 81       	ldd	r22, Z+2	; 0x02
    9182:	73 81       	ldd	r23, Z+3	; 0x03
    9184:	84 81       	ldd	r24, Z+4	; 0x04
    9186:	95 81       	ldd	r25, Z+5	; 0x05
    9188:	4d 83       	std	Y+5, r20	; 0x05
    918a:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    918e:	07 e0       	ldi	r16, 0x07	; 7
    9190:	27 e0       	ldi	r18, 0x07	; 7
    9192:	4d 81       	ldd	r20, Y+5	; 0x05
    9194:	c4 01       	movw	r24, r8
    9196:	0e 94 1d 46 	call	0x8c3a	; 0x8c3a <solid_directional_tile>
    919a:	81 11       	cpse	r24, r1
    919c:	35 c0       	rjmp	.+106    	; 0x9208 <collision_detect_shot+0x1bc>
		kill_player(p, hud_x);
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    919e:	aa 94       	dec	r10
    91a0:	ab 28       	or	r10, r11
    91a2:	09 f4       	brne	.+2      	; 0x91a6 <collision_detect_shot+0x15a>
    91a4:	67 c0       	rjmp	.+206    	; 0x9274 <collision_detect_shot+0x228>
    91a6:	aa 24       	eor	r10, r10
    91a8:	a3 94       	inc	r10
    91aa:	b1 2c       	mov	r11, r1
	{
		tile = level.level_map[tiles[i]];
    91ac:	f3 01       	movw	r30, r6
    91ae:	81 90       	ld	r8, Z+
    91b0:	91 90       	ld	r9, Z+
    91b2:	3f 01       	movw	r6, r30
    91b4:	f4 01       	movw	r30, r8
    91b6:	e0 53       	subi	r30, 0x30	; 48
    91b8:	f3 4f       	sbci	r31, 0xF3	; 243
    91ba:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    91bc:	11 23       	and	r17, r17
    91be:	79 f3       	breq	.-34     	; 0x919e <collision_detect_shot+0x152>
		if (tile == L_METAL)
    91c0:	12 30       	cpi	r17, 0x02	; 2
    91c2:	29 f4       	brne	.+10     	; 0x91ce <collision_detect_shot+0x182>
		{
			recoil_sprite(&shot->shared);
    91c4:	c7 01       	movw	r24, r14
    91c6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <recoil_sprite>
			init_shot_state(shot, shot->shot_type);
    91ca:	f7 01       	movw	r30, r14
    91cc:	4b c0       	rjmp	.+150    	; 0x9264 <collision_detect_shot+0x218>
			player->active_shots--;
			break;
		}
		else if (tile == L_BRICK)
    91ce:	11 30       	cpi	r17, 0x01	; 1
    91d0:	71 f6       	brne	.-100    	; 0x916e <collision_detect_shot+0x122>
		{
			explode_tile(&tile_animations, tiles[i]);
    91d2:	b4 01       	movw	r22, r8
    91d4:	85 e3       	ldi	r24, 0x35	; 53
    91d6:	9c e0       	ldi	r25, 0x0C	; 12
    91d8:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <explode_tile>
			recoil_sprite(&shot->shared);
    91dc:	c7 01       	movw	r24, r14
    91de:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <recoil_sprite>
			level.level_map[tiles[i]] = L_EMPTY;
    91e2:	aa 0c       	add	r10, r10
    91e4:	bb 1c       	adc	r11, r11
    91e6:	e1 e0       	ldi	r30, 0x01	; 1
    91e8:	f0 e0       	ldi	r31, 0x00	; 0
    91ea:	ec 0f       	add	r30, r28
    91ec:	fd 1f       	adc	r31, r29
    91ee:	ea 0d       	add	r30, r10
    91f0:	fb 1d       	adc	r31, r11
    91f2:	01 90       	ld	r0, Z+
    91f4:	f0 81       	ld	r31, Z
    91f6:	e0 2d       	mov	r30, r0
    91f8:	e0 53       	subi	r30, 0x30	; 48
    91fa:	f3 4f       	sbci	r31, 0xF3	; 243
    91fc:	11 82       	std	Z+1, r1	; 0x01
			shot->hit_count--;
    91fe:	f7 01       	movw	r30, r14
    9200:	83 85       	ldd	r24, Z+11	; 0x0b
    9202:	81 50       	subi	r24, 0x01	; 1
    9204:	83 87       	std	Z+11, r24	; 0x0b
    9206:	2c c0       	rjmp	.+88     	; 0x9260 <collision_detect_shot+0x214>
			}
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
		{
			recoil_sprite(&shot->shared);
    9208:	c7 01       	movw	r24, r14
    920a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <recoil_sprite>
			switch (tile)
    920e:	14 30       	cpi	r17, 0x04	; 4
    9210:	79 f0       	breq	.+30     	; 0x9230 <collision_detect_shot+0x1e4>
    9212:	18 f4       	brcc	.+6      	; 0x921a <collision_detect_shot+0x1ce>
    9214:	13 30       	cpi	r17, 0x03	; 3
    9216:	31 f0       	breq	.+12     	; 0x9224 <collision_detect_shot+0x1d8>
    9218:	1f c0       	rjmp	.+62     	; 0x9258 <collision_detect_shot+0x20c>
    921a:	15 30       	cpi	r17, 0x05	; 5
    921c:	b9 f0       	breq	.+46     	; 0x924c <collision_detect_shot+0x200>
    921e:	16 30       	cpi	r17, 0x06	; 6
    9220:	79 f0       	breq	.+30     	; 0x9240 <collision_detect_shot+0x1f4>
    9222:	1a c0       	rjmp	.+52     	; 0x9258 <collision_detect_shot+0x20c>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    9224:	f7 01       	movw	r30, r14
    9226:	80 81       	ld	r24, Z
    9228:	81 11       	cpse	r24, r1
    922a:	06 c0       	rjmp	.+12     	; 0x9238 <collision_detect_shot+0x1ec>
						shot->shared.direction = D_RIGHT;
    922c:	81 e0       	ldi	r24, 0x01	; 1
    922e:	05 c0       	rjmp	.+10     	; 0x923a <collision_detect_shot+0x1ee>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    9230:	f7 01       	movw	r30, r14
    9232:	80 81       	ld	r24, Z
    9234:	88 23       	and	r24, r24
    9236:	41 f0       	breq	.+16     	; 0x9248 <collision_detect_shot+0x1fc>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    9238:	82 e0       	ldi	r24, 0x02	; 2
    923a:	f7 01       	movw	r30, r14
    923c:	80 83       	st	Z, r24
    923e:	0c c0       	rjmp	.+24     	; 0x9258 <collision_detect_shot+0x20c>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    9240:	f7 01       	movw	r30, r14
    9242:	80 81       	ld	r24, Z
    9244:	82 30       	cpi	r24, 0x02	; 2
    9246:	31 f4       	brne	.+12     	; 0x9254 <collision_detect_shot+0x208>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    9248:	83 e0       	ldi	r24, 0x03	; 3
    924a:	f7 cf       	rjmp	.-18     	; 0x923a <collision_detect_shot+0x1ee>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    924c:	f7 01       	movw	r30, r14
    924e:	80 81       	ld	r24, Z
    9250:	82 30       	cpi	r24, 0x02	; 2
    9252:	61 f3       	breq	.-40     	; 0x922c <collision_detect_shot+0x1e0>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    9254:	f7 01       	movw	r30, r14
    9256:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    9258:	f7 01       	movw	r30, r14
    925a:	84 85       	ldd	r24, Z+12	; 0x0c
    925c:	81 50       	subi	r24, 0x01	; 1
    925e:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->rebounds <= 0)
    9260:	81 11       	cpse	r24, r1
    9262:	08 c0       	rjmp	.+16     	; 0x9274 <collision_detect_shot+0x228>
			{
				init_shot_state(shot, shot->shot_type);
    9264:	62 85       	ldd	r22, Z+10	; 0x0a
    9266:	c7 01       	movw	r24, r14
    9268:	0e 94 95 41 	call	0x832a	; 0x832a <init_shot_state>
				player->active_shots--;
    926c:	f6 01       	movw	r30, r12
    926e:	80 89       	ldd	r24, Z+16	; 0x10
    9270:	81 50       	subi	r24, 0x01	; 1
    9272:	80 8b       	std	Z+16, r24	; 0x10
			}
			break;
		}
	}
}
    9274:	0f 90       	pop	r0
    9276:	0f 90       	pop	r0
    9278:	0f 90       	pop	r0
    927a:	0f 90       	pop	r0
    927c:	0f 90       	pop	r0
    927e:	df 91       	pop	r29
    9280:	cf 91       	pop	r28
    9282:	1f 91       	pop	r17
    9284:	0f 91       	pop	r16
    9286:	ff 90       	pop	r15
    9288:	ef 90       	pop	r14
    928a:	df 90       	pop	r13
    928c:	cf 90       	pop	r12
    928e:	bf 90       	pop	r11
    9290:	af 90       	pop	r10
    9292:	9f 90       	pop	r9
    9294:	8f 90       	pop	r8
    9296:	7f 90       	pop	r7
    9298:	6f 90       	pop	r6
    929a:	08 95       	ret

0000929c <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    929c:	fc 01       	movw	r30, r24
    929e:	8e e1       	ldi	r24, 0x1E	; 30
    92a0:	48 9f       	mul	r20, r24
    92a2:	a0 01       	movw	r20, r0
    92a4:	11 24       	eor	r1, r1
    92a6:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    92a8:	64 0f       	add	r22, r20
    92aa:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    92ac:	21 11       	cpse	r18, r1
    92ae:	09 c0       	rjmp	.+18     	; 0x92c2 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    92b0:	71 83       	std	Z+1, r23	; 0x01
    92b2:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    92b4:	cb 01       	movw	r24, r22
    92b6:	01 96       	adiw	r24, 0x01	; 1
    92b8:	93 83       	std	Z+3, r25	; 0x03
    92ba:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    92bc:	6e 5f       	subi	r22, 0xFE	; 254
    92be:	7f 4f       	sbci	r23, 0xFF	; 255
    92c0:	1c c0       	rjmp	.+56     	; 0x92fa <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    92c2:	21 30       	cpi	r18, 0x01	; 1
    92c4:	31 f4       	brne	.+12     	; 0x92d2 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    92c6:	cb 01       	movw	r24, r22
    92c8:	02 96       	adiw	r24, 0x02	; 2
    92ca:	91 83       	std	Z+1, r25	; 0x01
    92cc:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    92ce:	4e 96       	adiw	r24, 0x1e	; 30
    92d0:	07 c0       	rjmp	.+14     	; 0x92e0 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    92d2:	22 30       	cpi	r18, 0x02	; 2
    92d4:	51 f4       	brne	.+20     	; 0x92ea <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    92d6:	cb 01       	movw	r24, r22
    92d8:	cc 96       	adiw	r24, 0x3c	; 60
    92da:	91 83       	std	Z+1, r25	; 0x01
    92dc:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    92de:	01 96       	adiw	r24, 0x01	; 1
    92e0:	93 83       	std	Z+3, r25	; 0x03
    92e2:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    92e4:	62 5c       	subi	r22, 0xC2	; 194
    92e6:	7f 4f       	sbci	r23, 0xFF	; 255
    92e8:	08 c0       	rjmp	.+16     	; 0x92fa <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    92ea:	71 83       	std	Z+1, r23	; 0x01
    92ec:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    92ee:	cb 01       	movw	r24, r22
    92f0:	4e 96       	adiw	r24, 0x1e	; 30
    92f2:	93 83       	std	Z+3, r25	; 0x03
    92f4:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    92f6:	64 5c       	subi	r22, 0xC4	; 196
    92f8:	7f 4f       	sbci	r23, 0xFF	; 255
    92fa:	75 83       	std	Z+5, r23	; 0x05
    92fc:	64 83       	std	Z+4, r22	; 0x04
    92fe:	08 95       	ret

00009300 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    9300:	2f 92       	push	r2
    9302:	3f 92       	push	r3
    9304:	4f 92       	push	r4
    9306:	5f 92       	push	r5
    9308:	6f 92       	push	r6
    930a:	7f 92       	push	r7
    930c:	8f 92       	push	r8
    930e:	9f 92       	push	r9
    9310:	af 92       	push	r10
    9312:	bf 92       	push	r11
    9314:	cf 92       	push	r12
    9316:	df 92       	push	r13
    9318:	ef 92       	push	r14
    931a:	ff 92       	push	r15
    931c:	0f 93       	push	r16
    931e:	1f 93       	push	r17
    9320:	cf 93       	push	r28
    9322:	df 93       	push	r29
    9324:	cd b7       	in	r28, 0x3d	; 61
    9326:	de b7       	in	r29, 0x3e	; 62
    9328:	29 97       	sbiw	r28, 0x09	; 9
    932a:	0f b6       	in	r0, 0x3f	; 63
    932c:	f8 94       	cli
    932e:	de bf       	out	0x3e, r29	; 62
    9330:	0f be       	out	0x3f, r0	; 63
    9332:	cd bf       	out	0x3d, r28	; 61
    9334:	7c 01       	movw	r14, r24
    9336:	3b 01       	movw	r6, r22
    9338:	14 2f       	mov	r17, r20
    933a:	22 2e       	mov	r2, r18
	int tiles[3] = {0,0,0};
    933c:	1a 82       	std	Y+2, r1	; 0x02
    933e:	19 82       	std	Y+1, r1	; 0x01
    9340:	1c 82       	std	Y+4, r1	; 0x04
    9342:	1b 82       	std	Y+3, r1	; 0x03
    9344:	1e 82       	std	Y+6, r1	; 0x06
    9346:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    9348:	20 e0       	ldi	r18, 0x00	; 0
    934a:	30 e0       	ldi	r19, 0x00	; 0
    934c:	40 e0       	ldi	r20, 0x00	; 0
    934e:	5e e3       	ldi	r21, 0x3E	; 62
    9350:	fc 01       	movw	r30, r24
    9352:	66 81       	ldd	r22, Z+6	; 0x06
    9354:	77 81       	ldd	r23, Z+7	; 0x07
    9356:	80 85       	ldd	r24, Z+8	; 0x08
    9358:	91 85       	ldd	r25, Z+9	; 0x09
    935a:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    935e:	20 e0       	ldi	r18, 0x00	; 0
    9360:	30 e0       	ldi	r19, 0x00	; 0
    9362:	40 e4       	ldi	r20, 0x40	; 64
    9364:	50 e4       	ldi	r21, 0x40	; 64
    9366:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    936a:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    936e:	d6 2e       	mov	r13, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    9370:	20 e0       	ldi	r18, 0x00	; 0
    9372:	30 e0       	ldi	r19, 0x00	; 0
    9374:	40 e0       	ldi	r20, 0x00	; 0
    9376:	5e e3       	ldi	r21, 0x3E	; 62
    9378:	f7 01       	movw	r30, r14
    937a:	62 81       	ldd	r22, Z+2	; 0x02
    937c:	73 81       	ldd	r23, Z+3	; 0x03
    937e:	84 81       	ldd	r24, Z+4	; 0x04
    9380:	95 81       	ldd	r25, Z+5	; 0x05
    9382:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    9386:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;

	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    938a:	f7 01       	movw	r30, r14
    938c:	20 81       	ld	r18, Z
    938e:	4d 2d       	mov	r20, r13
    9390:	ce 01       	movw	r24, r28
    9392:	01 96       	adiw	r24, 0x01	; 1
    9394:	0e 94 4e 49 	call	0x929c	; 0x929c <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    9398:	c7 01       	movw	r24, r14
    939a:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <collision_detect_boundries>
    939e:	88 23       	and	r24, r24
    93a0:	31 f0       	breq	.+12     	; 0x93ae <collision_detect_player+0xae>
	{
		recoil_sprite(&player->shared);
    93a2:	c7 01       	movw	r24, r14
    93a4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <recoil_sprite>
		player->shared.speed = 0;
    93a8:	f7 01       	movw	r30, r14
    93aa:	11 82       	std	Z+1, r1	; 0x01
    93ac:	81 c0       	rjmp	.+258    	; 0x94b0 <collision_detect_player+0x1b0>
    93ae:	ce 01       	movw	r24, r28
    93b0:	01 96       	adiw	r24, 0x01	; 1
    93b2:	6c 01       	movw	r12, r24
    93b4:	4e 01       	movw	r8, r28
    93b6:	97 e0       	ldi	r25, 0x07	; 7
    93b8:	89 0e       	add	r8, r25
    93ba:	91 1c       	adc	r9, r1
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    93bc:	8e e1       	ldi	r24, 0x1E	; 30
    93be:	a8 2e       	mov	r10, r24
    93c0:	b1 2c       	mov	r11, r1
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    93c2:	33 24       	eor	r3, r3
    93c4:	33 94       	inc	r3
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    93c6:	eb e0       	ldi	r30, 0x0B	; 11
    93c8:	e1 0f       	add	r30, r17
    93ca:	ef 83       	std	Y+7, r30	; 0x07
		else if (level.level_map[tiles[i]] == L_SPEED)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    93cc:	fa e0       	ldi	r31, 0x0A	; 10
    93ce:	f1 0f       	add	r31, r17
    93d0:	f8 87       	std	Y+8, r31	; 0x08
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_square_tile(tiles[i]) || solid_directional_tile(tiles[i], player->shared.x, player->shared.y, 7, 14))
    93d2:	f6 01       	movw	r30, r12
    93d4:	40 80       	ld	r4, Z
    93d6:	51 80       	ldd	r5, Z+1	; 0x01
    93d8:	c2 01       	movw	r24, r4
    93da:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <solid_square_tile>
    93de:	81 11       	cpse	r24, r1
    93e0:	18 c0       	rjmp	.+48     	; 0x9412 <collision_detect_player+0x112>
    93e2:	f7 01       	movw	r30, r14
    93e4:	66 81       	ldd	r22, Z+6	; 0x06
    93e6:	77 81       	ldd	r23, Z+7	; 0x07
    93e8:	80 85       	ldd	r24, Z+8	; 0x08
    93ea:	91 85       	ldd	r25, Z+9	; 0x09
    93ec:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    93f0:	46 2f       	mov	r20, r22
    93f2:	f7 01       	movw	r30, r14
    93f4:	62 81       	ldd	r22, Z+2	; 0x02
    93f6:	73 81       	ldd	r23, Z+3	; 0x03
    93f8:	84 81       	ldd	r24, Z+4	; 0x04
    93fa:	95 81       	ldd	r25, Z+5	; 0x05
    93fc:	49 87       	std	Y+9, r20	; 0x09
    93fe:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <__fixunssfsi>
    9402:	0e e0       	ldi	r16, 0x0E	; 14
    9404:	27 e0       	ldi	r18, 0x07	; 7
    9406:	49 85       	ldd	r20, Y+9	; 0x09
    9408:	c2 01       	movw	r24, r4
    940a:	0e 94 1d 46 	call	0x8c3a	; 0x8c3a <solid_directional_tile>
    940e:	88 23       	and	r24, r24
    9410:	31 f0       	breq	.+12     	; 0x941e <collision_detect_player+0x11e>
		{
			recoil_sprite(&player->shared);
    9412:	c7 01       	movw	r24, r14
    9414:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <recoil_sprite>
			player->shared.speed = 0;
    9418:	f7 01       	movw	r30, r14
    941a:	11 82       	std	Z+1, r1	; 0x01
    941c:	42 c0       	rjmp	.+132    	; 0x94a2 <collision_detect_player+0x1a2>
		}
		else if (level.level_map[tiles[i]] == L_SPEED)
    941e:	f2 01       	movw	r30, r4
    9420:	e0 53       	subi	r30, 0x30	; 48
    9422:	f3 4f       	sbci	r31, 0xF3	; 243
    9424:	81 81       	ldd	r24, Z+1	; 0x01
    9426:	87 30       	cpi	r24, 0x07	; 7
    9428:	51 f4       	brne	.+20     	; 0x943e <collision_detect_player+0x13e>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    942a:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    942c:	80 e5       	ldi	r24, 0x50	; 80
    942e:	f7 01       	movw	r30, r14
    9430:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    9432:	31 8e       	std	Z+25, r3	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    9434:	42 ed       	ldi	r20, 0xD2	; 210
    9436:	58 e2       	ldi	r21, 0x28	; 40
    9438:	61 e0       	ldi	r22, 0x01	; 1
    943a:	88 85       	ldd	r24, Y+8	; 0x08
    943c:	09 c0       	rjmp	.+18     	; 0x9450 <collision_detect_player+0x150>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
    943e:	89 30       	cpi	r24, 0x09	; 9
    9440:	a9 f4       	brne	.+42     	; 0x946c <collision_detect_player+0x16c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    9442:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    9444:	f7 01       	movw	r30, r14
    9446:	30 8e       	std	Z+24, r3	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    9448:	4c ec       	ldi	r20, 0xCC	; 204
    944a:	58 e2       	ldi	r21, 0x28	; 40
    944c:	61 e0       	ldi	r22, 0x01	; 1
    944e:	8f 81       	ldd	r24, Y+7	; 0x07
    9450:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    9454:	f6 01       	movw	r30, r12
    9456:	80 81       	ld	r24, Z
    9458:	91 81       	ldd	r25, Z+1	; 0x01
    945a:	b5 01       	movw	r22, r10
    945c:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    9460:	6d 5f       	subi	r22, 0xFD	; 253
    9462:	40 e0       	ldi	r20, 0x00	; 0
    9464:	50 e0       	ldi	r21, 0x00	; 0
    9466:	0e 94 ee 30 	call	0x61dc	; 0x61dc <SetTile>
    946a:	1b c0       	rjmp	.+54     	; 0x94a2 <collision_detect_player+0x1a2>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
    946c:	88 30       	cpi	r24, 0x08	; 8
    946e:	c9 f4       	brne	.+50     	; 0x94a2 <collision_detect_player+0x1a2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    9470:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    9472:	c2 01       	movw	r24, r4
    9474:	b5 01       	movw	r22, r10
    9476:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    947a:	6d 5f       	subi	r22, 0xFD	; 253
    947c:	40 e0       	ldi	r20, 0x00	; 0
    947e:	50 e0       	ldi	r21, 0x00	; 0
    9480:	0e 94 ee 30 	call	0x61dc	; 0x61dc <SetTile>
			player->level_score++;
    9484:	f7 01       	movw	r30, r14
    9486:	87 85       	ldd	r24, Z+15	; 0x0f
    9488:	8f 5f       	subi	r24, 0xFF	; 255
    948a:	87 87       	std	Z+15, r24	; 0x0f
			player->score++;
    948c:	86 85       	ldd	r24, Z+14	; 0x0e
    948e:	8f 5f       	subi	r24, 0xFF	; 255
    9490:	86 87       	std	Z+14, r24	; 0x0e
			render_score(player, hud_x);
    9492:	61 2f       	mov	r22, r17
    9494:	c7 01       	movw	r24, r14
    9496:	0e 94 df 43 	call	0x87be	; 0x87be <render_score>
			kill_player(other_player, other_player_hud_x);
    949a:	62 2d       	mov	r22, r2
    949c:	c3 01       	movw	r24, r6
    949e:	0e 94 54 47 	call	0x8ea8	; 0x8ea8 <kill_player>
    94a2:	f2 e0       	ldi	r31, 0x02	; 2
    94a4:	cf 0e       	add	r12, r31
    94a6:	d1 1c       	adc	r13, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    94a8:	c8 14       	cp	r12, r8
    94aa:	d9 04       	cpc	r13, r9
    94ac:	09 f0       	breq	.+2      	; 0x94b0 <collision_detect_player+0x1b0>
    94ae:	91 cf       	rjmp	.-222    	; 0x93d2 <collision_detect_player+0xd2>
			player->score++;
			render_score(player, hud_x);
			kill_player(other_player, other_player_hud_x);
		}
	}
}
    94b0:	29 96       	adiw	r28, 0x09	; 9
    94b2:	0f b6       	in	r0, 0x3f	; 63
    94b4:	f8 94       	cli
    94b6:	de bf       	out	0x3e, r29	; 62
    94b8:	0f be       	out	0x3f, r0	; 63
    94ba:	cd bf       	out	0x3d, r28	; 61
    94bc:	df 91       	pop	r29
    94be:	cf 91       	pop	r28
    94c0:	1f 91       	pop	r17
    94c2:	0f 91       	pop	r16
    94c4:	ff 90       	pop	r15
    94c6:	ef 90       	pop	r14
    94c8:	df 90       	pop	r13
    94ca:	cf 90       	pop	r12
    94cc:	bf 90       	pop	r11
    94ce:	af 90       	pop	r10
    94d0:	9f 90       	pop	r9
    94d2:	8f 90       	pop	r8
    94d4:	7f 90       	pop	r7
    94d6:	6f 90       	pop	r6
    94d8:	5f 90       	pop	r5
    94da:	4f 90       	pop	r4
    94dc:	3f 90       	pop	r3
    94de:	2f 90       	pop	r2
    94e0:	08 95       	ret

000094e2 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    94e2:	bf 92       	push	r11
    94e4:	cf 92       	push	r12
    94e6:	df 92       	push	r13
    94e8:	ef 92       	push	r14
    94ea:	ff 92       	push	r15
    94ec:	0f 93       	push	r16
    94ee:	1f 93       	push	r17
    94f0:	cf 93       	push	r28
    94f2:	df 93       	push	r29
    94f4:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    94f6:	c0 e0       	ldi	r28, 0x00	; 0
    94f8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    94fa:	0e e1       	ldi	r16, 0x1E	; 30
    94fc:	10 e0       	ldi	r17, 0x00	; 0
    94fe:	ce 01       	movw	r24, r28
    9500:	b8 01       	movw	r22, r16
    9502:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
		y = 3 + i / 30;
    9506:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    9508:	bb 20       	and	r11, r11
    950a:	19 f0       	breq	.+6      	; 0x9512 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    950c:	4b ed       	ldi	r20, 0xDB	; 219
    950e:	58 e2       	ldi	r21, 0x28	; 40
    9510:	11 c0       	rjmp	.+34     	; 0x9534 <load_level_tiles+0x52>
    9512:	fe 01       	movw	r30, r28
    9514:	e0 53       	subi	r30, 0x30	; 48
    9516:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    9518:	e1 81       	ldd	r30, Z+1	; 0x01
    951a:	ce 2e       	mov	r12, r30
    951c:	d1 2c       	mov	r13, r1
    951e:	f6 01       	movw	r30, r12
    9520:	31 97       	sbiw	r30, 0x01	; 1
    9522:	e9 30       	cpi	r30, 0x09	; 9
    9524:	f1 05       	cpc	r31, r1
    9526:	08 f5       	brcc	.+66     	; 0x956a <load_level_tiles+0x88>
    9528:	e8 5c       	subi	r30, 0xC8	; 200
    952a:	ff 4f       	sbci	r31, 0xFF	; 255
    952c:	0c 94 00 52 	jmp	0xa400	; 0xa400 <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    9530:	48 ed       	ldi	r20, 0xD8	; 216
    9532:	58 e2       	ldi	r21, 0x28	; 40
    9534:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
    9538:	1c c0       	rjmp	.+56     	; 0x9572 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    953a:	45 ed       	ldi	r20, 0xD5	; 213
    953c:	58 e2       	ldi	r21, 0x28	; 40
    953e:	fa cf       	rjmp	.-12     	; 0x9534 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    9540:	40 ec       	ldi	r20, 0xC0	; 192
    9542:	58 e2       	ldi	r21, 0x28	; 40
    9544:	f7 cf       	rjmp	.-18     	; 0x9534 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    9546:	4a eb       	ldi	r20, 0xBA	; 186
    9548:	58 e2       	ldi	r21, 0x28	; 40
    954a:	f4 cf       	rjmp	.-24     	; 0x9534 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    954c:	47 eb       	ldi	r20, 0xB7	; 183
    954e:	58 e2       	ldi	r21, 0x28	; 40
    9550:	f1 cf       	rjmp	.-30     	; 0x9534 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    9552:	4d eb       	ldi	r20, 0xBD	; 189
    9554:	58 e2       	ldi	r21, 0x28	; 40
    9556:	ee cf       	rjmp	.-36     	; 0x9534 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    9558:	42 ed       	ldi	r20, 0xD2	; 210
    955a:	58 e2       	ldi	r21, 0x28	; 40
    955c:	eb cf       	rjmp	.-42     	; 0x9534 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    955e:	4f ec       	ldi	r20, 0xCF	; 207
    9560:	58 e2       	ldi	r21, 0x28	; 40
    9562:	e8 cf       	rjmp	.-48     	; 0x9534 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    9564:	4c ec       	ldi	r20, 0xCC	; 204
    9566:	58 e2       	ldi	r21, 0x28	; 40
    9568:	e5 cf       	rjmp	.-54     	; 0x9534 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    956a:	40 e0       	ldi	r20, 0x00	; 0
    956c:	50 e0       	ldi	r21, 0x00	; 0
    956e:	0e 94 ee 30 	call	0x61dc	; 0x61dc <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    9572:	21 96       	adiw	r28, 0x01	; 1
    9574:	ce 3e       	cpi	r28, 0xEE	; 238
    9576:	82 e0       	ldi	r24, 0x02	; 2
    9578:	d8 07       	cpc	r29, r24
    957a:	09 f6       	brne	.-126    	; 0x94fe <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    957c:	df 91       	pop	r29
    957e:	cf 91       	pop	r28
    9580:	1f 91       	pop	r17
    9582:	0f 91       	pop	r16
    9584:	ff 90       	pop	r15
    9586:	ef 90       	pop	r14
    9588:	df 90       	pop	r13
    958a:	cf 90       	pop	r12
    958c:	bf 90       	pop	r11
    958e:	08 95       	ret

00009590 <load_level>:

void load_level(int level_number)
{
    9590:	9f 92       	push	r9
    9592:	af 92       	push	r10
    9594:	bf 92       	push	r11
    9596:	cf 92       	push	r12
    9598:	df 92       	push	r13
    959a:	ef 92       	push	r14
    959c:	ff 92       	push	r15
    959e:	0f 93       	push	r16
    95a0:	1f 93       	push	r17
    95a2:	cf 93       	push	r28
    95a4:	df 93       	push	r29
    95a6:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    95a8:	8e ee       	ldi	r24, 0xEE	; 238
    95aa:	92 e0       	ldi	r25, 0x02	; 2
    95ac:	c8 9f       	mul	r28, r24
    95ae:	70 01       	movw	r14, r0
    95b0:	c9 9f       	mul	r28, r25
    95b2:	f0 0c       	add	r15, r0
    95b4:	d8 9f       	mul	r29, r24
    95b6:	f0 0c       	add	r15, r0
    95b8:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    95ba:	83 e0       	ldi	r24, 0x03	; 3
    95bc:	80 93 31 0c 	sts	0x0C31, r24
	clear_sprites();
    95c0:	0e 94 9c 42 	call	0x8538	; 0x8538 <clear_sprites>
	game.current_level = level_number;
    95c4:	c0 93 32 0c 	sts	0x0C32, r28
    95c8:	81 ed       	ldi	r24, 0xD1	; 209
    95ca:	c8 2e       	mov	r12, r24
    95cc:	8c e0       	ldi	r24, 0x0C	; 12
    95ce:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    95d0:	c0 e0       	ldi	r28, 0x00	; 0
    95d2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    95d4:	0e e1       	ldi	r16, 0x1E	; 30
    95d6:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    95d8:	92 e3       	ldi	r25, 0x32	; 50
    95da:	99 2e       	mov	r9, r25
    95dc:	fe 01       	movw	r30, r28
    95de:	ee 0d       	add	r30, r14
    95e0:	ff 1d       	adc	r31, r15
    95e2:	ef 5e       	subi	r30, 0xEF	; 239
    95e4:	f4 4f       	sbci	r31, 0xF4	; 244
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    95e6:	e4 91       	lpm	r30, Z
    95e8:	56 01       	movw	r10, r12
    95ea:	d6 01       	movw	r26, r12
    95ec:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    95ee:	e8 35       	cpi	r30, 0x58	; 88
    95f0:	01 f5       	brne	.+64     	; 0x9632 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    95f2:	ce 01       	movw	r24, r28
    95f4:	b8 01       	movw	r22, r16
    95f6:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    95fa:	88 0f       	add	r24, r24
    95fc:	88 0f       	add	r24, r24
    95fe:	88 0f       	add	r24, r24
    9600:	80 93 5f 0c 	sts	0x0C5F, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    9604:	6d 5f       	subi	r22, 0xFD	; 253
    9606:	7f 4f       	sbci	r23, 0xFF	; 255
    9608:	66 0f       	add	r22, r22
    960a:	66 0f       	add	r22, r22
    960c:	66 0f       	add	r22, r22
    960e:	60 93 60 0c 	sts	0x0C60, r22
			player1.level_score = 0;
    9612:	10 92 5d 0c 	sts	0x0C5D, r1
			player1.has_over_speed = false;
    9616:	10 92 67 0c 	sts	0x0C67, r1
			player1.has_rocket = false;
    961a:	10 92 66 0c 	sts	0x0C66, r1
			player1.max_speed = MAX_SPEED;
    961e:	90 92 65 0c 	sts	0x0C65, r9
			player_init_shot_state(&player1);
    9622:	8e e4       	ldi	r24, 0x4E	; 78
    9624:	9c e0       	ldi	r25, 0x0C	; 12
    9626:	0e 94 3f 42 	call	0x847e	; 0x847e <player_init_shot_state>
			player_spawn(&player1);
    962a:	8e e4       	ldi	r24, 0x4E	; 78
    962c:	9c e0       	ldi	r25, 0x0C	; 12
    962e:	0e 94 63 42 	call	0x84c6	; 0x84c6 <player_spawn>
    9632:	bf ef       	ldi	r27, 0xFF	; 255
    9634:	cb 1a       	sub	r12, r27
    9636:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    9638:	f5 01       	movw	r30, r10
    963a:	80 81       	ld	r24, Z
    963c:	83 36       	cpi	r24, 0x63	; 99
    963e:	01 f5       	brne	.+64     	; 0x9680 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    9640:	ce 01       	movw	r24, r28
    9642:	b8 01       	movw	r22, r16
    9644:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    9648:	88 0f       	add	r24, r24
    964a:	88 0f       	add	r24, r24
    964c:	88 0f       	add	r24, r24
    964e:	80 93 d0 0f 	sts	0x0FD0, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    9652:	6d 5f       	subi	r22, 0xFD	; 253
    9654:	7f 4f       	sbci	r23, 0xFF	; 255
    9656:	66 0f       	add	r22, r22
    9658:	66 0f       	add	r22, r22
    965a:	66 0f       	add	r22, r22
    965c:	60 93 d1 0f 	sts	0x0FD1, r22
			player2.level_score = 0;
    9660:	10 92 ce 0f 	sts	0x0FCE, r1
			player2.has_over_speed = false;
    9664:	10 92 d8 0f 	sts	0x0FD8, r1
			player2.has_rocket = false;
    9668:	10 92 d7 0f 	sts	0x0FD7, r1
			player2.max_speed = MAX_SPEED;
    966c:	90 92 d6 0f 	sts	0x0FD6, r9
			player_init_shot_state(&player2);
    9670:	8f eb       	ldi	r24, 0xBF	; 191
    9672:	9f e0       	ldi	r25, 0x0F	; 15
    9674:	0e 94 3f 42 	call	0x847e	; 0x847e <player_init_shot_state>
			player_spawn(&player2);
    9678:	8f eb       	ldi	r24, 0xBF	; 191
    967a:	9f e0       	ldi	r25, 0x0F	; 15
    967c:	0e 94 63 42 	call	0x84c6	; 0x84c6 <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    9680:	21 96       	adiw	r28, 0x01	; 1
    9682:	ce 3e       	cpi	r28, 0xEE	; 238
    9684:	f2 e0       	ldi	r31, 0x02	; 2
    9686:	df 07       	cpc	r29, r31
    9688:	09 f0       	breq	.+2      	; 0x968c <load_level+0xfc>
    968a:	a8 cf       	rjmp	.-176    	; 0x95dc <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    968c:	60 e0       	ldi	r22, 0x00	; 0
    968e:	8e e4       	ldi	r24, 0x4E	; 78
    9690:	9c e0       	ldi	r25, 0x0C	; 12
    9692:	0e 94 c2 43 	call	0x8784	; 0x8784 <render_hud>
	render_hud(&player2, 15);
    9696:	6f e0       	ldi	r22, 0x0F	; 15
    9698:	8f eb       	ldi	r24, 0xBF	; 191
    969a:	9f e0       	ldi	r25, 0x0F	; 15
    969c:	0e 94 c2 43 	call	0x8784	; 0x8784 <render_hud>
	render_score(&player1, 0);
    96a0:	60 e0       	ldi	r22, 0x00	; 0
    96a2:	8e e4       	ldi	r24, 0x4E	; 78
    96a4:	9c e0       	ldi	r25, 0x0C	; 12
    96a6:	0e 94 df 43 	call	0x87be	; 0x87be <render_score>
	render_score(&player2, 15);
    96aa:	6f e0       	ldi	r22, 0x0F	; 15
    96ac:	8f eb       	ldi	r24, 0xBF	; 191
    96ae:	9f e0       	ldi	r25, 0x0F	; 15
    96b0:	0e 94 df 43 	call	0x87be	; 0x87be <render_score>
	Print(14, 0, strVertSep);
    96b4:	47 eb       	ldi	r20, 0xB7	; 183
    96b6:	5a e0       	ldi	r21, 0x0A	; 10
    96b8:	60 e0       	ldi	r22, 0x00	; 0
    96ba:	70 e0       	ldi	r23, 0x00	; 0
    96bc:	8e e0       	ldi	r24, 0x0E	; 14
    96be:	90 e0       	ldi	r25, 0x00	; 0
    96c0:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(14, 1, strVertSep);
    96c4:	47 eb       	ldi	r20, 0xB7	; 183
    96c6:	5a e0       	ldi	r21, 0x0A	; 10
    96c8:	61 e0       	ldi	r22, 0x01	; 1
    96ca:	70 e0       	ldi	r23, 0x00	; 0
    96cc:	8e e0       	ldi	r24, 0x0E	; 14
    96ce:	90 e0       	ldi	r25, 0x00	; 0
    96d0:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(14, 2, strVertSep);
    96d4:	47 eb       	ldi	r20, 0xB7	; 183
    96d6:	5a e0       	ldi	r21, 0x0A	; 10
    96d8:	62 e0       	ldi	r22, 0x02	; 2
    96da:	70 e0       	ldi	r23, 0x00	; 0
    96dc:	8e e0       	ldi	r24, 0x0E	; 14
    96de:	90 e0       	ldi	r25, 0x00	; 0
    96e0:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	load_level_tiles(false);
    96e4:	80 e0       	ldi	r24, 0x00	; 0
}
    96e6:	df 91       	pop	r29
    96e8:	cf 91       	pop	r28
    96ea:	1f 91       	pop	r17
    96ec:	0f 91       	pop	r16
    96ee:	ff 90       	pop	r15
    96f0:	ef 90       	pop	r14
    96f2:	df 90       	pop	r13
    96f4:	cf 90       	pop	r12
    96f6:	bf 90       	pop	r11
    96f8:	af 90       	pop	r10
    96fa:	9f 90       	pop	r9
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, strVertSep);
	Print(14, 1, strVertSep);
	Print(14, 2, strVertSep);
	load_level_tiles(false);
    96fc:	0c 94 71 4a 	jmp	0x94e2	; 0x94e2 <load_level_tiles>

00009700 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    9700:	cf 93       	push	r28
    9702:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    9704:	61 e0       	ldi	r22, 0x01	; 1
    9706:	83 e0       	ldi	r24, 0x03	; 3
    9708:	0e 94 6f 3f 	call	0x7ede	; 0x7ede <FadeOut>
	ClearVram();
    970c:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <ClearVram>
	clear_sprites();
    9710:	0e 94 9c 42 	call	0x8538	; 0x8538 <clear_sprites>
	Print(9, 12, &strLevels[index*12]);
    9714:	8c e0       	ldi	r24, 0x0C	; 12
    9716:	c8 9f       	mul	r28, r24
    9718:	a0 01       	movw	r20, r0
    971a:	11 24       	eor	r1, r1
    971c:	43 5c       	subi	r20, 0xC3	; 195
    971e:	56 4f       	sbci	r21, 0xF6	; 246
    9720:	6c e0       	ldi	r22, 0x0C	; 12
    9722:	70 e0       	ldi	r23, 0x00	; 0
    9724:	89 e0       	ldi	r24, 0x09	; 9
    9726:	90 e0       	ldi	r25, 0x00	; 0
    9728:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	FadeIn(1, true);
    972c:	61 e0       	ldi	r22, 0x01	; 1
    972e:	81 e0       	ldi	r24, 0x01	; 1
    9730:	0e 94 63 3f 	call	0x7ec6	; 0x7ec6 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    9734:	82 e0       	ldi	r24, 0x02	; 2
    9736:	0e 94 63 41 	call	0x82c6	; 0x82c6 <LBWaitSeconds>
	FadeOut(1, true);
    973a:	61 e0       	ldi	r22, 0x01	; 1
    973c:	81 e0       	ldi	r24, 0x01	; 1
    973e:	0e 94 6f 3f 	call	0x7ede	; 0x7ede <FadeOut>
	ClearVram();
    9742:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9746:	60 e0       	ldi	r22, 0x00	; 0
    9748:	83 e0       	ldi	r24, 0x03	; 3
    974a:	0e 94 63 3f 	call	0x7ec6	; 0x7ec6 <FadeIn>
	load_level(index);
    974e:	8c 2f       	mov	r24, r28
    9750:	90 e0       	ldi	r25, 0x00	; 0
}
    9752:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    9754:	0c 94 c8 4a 	jmp	0x9590	; 0x9590 <load_level>

00009758 <load_splash>:
	collision_detect_player(&player2, &player1, 15, 0);
}

void load_splash()
{
	game.current_screen = SPLASH;
    9758:	10 92 31 0c 	sts	0x0C31, r1
	clear_sprites();
    975c:	0e 94 9c 42 	call	0x8538	; 0x8538 <clear_sprites>
	Print(7, 13, str1Player);
    9760:	4c ee       	ldi	r20, 0xEC	; 236
    9762:	5a e0       	ldi	r21, 0x0A	; 10
    9764:	6d e0       	ldi	r22, 0x0D	; 13
    9766:	70 e0       	ldi	r23, 0x00	; 0
    9768:	87 e0       	ldi	r24, 0x07	; 7
    976a:	90 e0       	ldi	r25, 0x00	; 0
    976c:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(7, 14, str2Player);
    9770:	4b ed       	ldi	r20, 0xDB	; 219
    9772:	5a e0       	ldi	r21, 0x0A	; 10
    9774:	6e e0       	ldi	r22, 0x0E	; 14
    9776:	70 e0       	ldi	r23, 0x00	; 0
    9778:	87 e0       	ldi	r24, 0x07	; 7
    977a:	90 e0       	ldi	r25, 0x00	; 0
    977c:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(7, 15, strHighscores);
    9780:	41 ed       	ldi	r20, 0xD1	; 209
    9782:	5a e0       	ldi	r21, 0x0A	; 10
    9784:	6f e0       	ldi	r22, 0x0F	; 15
    9786:	70 e0       	ldi	r23, 0x00	; 0
    9788:	87 e0       	ldi	r24, 0x07	; 7
    978a:	90 e0       	ldi	r25, 0x00	; 0
    978c:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(4, 26, strCopyright);
    9790:	4a ef       	ldi	r20, 0xFA	; 250
    9792:	5a e0       	ldi	r21, 0x0A	; 10
    9794:	6a e1       	ldi	r22, 0x1A	; 26
    9796:	70 e0       	ldi	r23, 0x00	; 0
    9798:	84 e0       	ldi	r24, 0x04	; 4
    979a:	90 e0       	ldi	r25, 0x00	; 0
    979c:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    97a0:	4c e1       	ldi	r20, 0x1C	; 28
    97a2:	59 e2       	ldi	r21, 0x29	; 41
    97a4:	65 e0       	ldi	r22, 0x05	; 5
    97a6:	84 e0       	ldi	r24, 0x04	; 4
    97a8:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
	MapSprite2(0, map_ball, 0);
    97ac:	40 e0       	ldi	r20, 0x00	; 0
    97ae:	69 e6       	ldi	r22, 0x69	; 105
    97b0:	78 e2       	ldi	r23, 0x28	; 40
    97b2:	80 e0       	ldi	r24, 0x00	; 0
    97b4:	0c 94 e8 3d 	jmp	0x7bd0	; 0x7bd0 <MapSprite2>

000097b8 <load_tank_rank>:
		return;
	}
}

void load_tank_rank()
{
    97b8:	ef 92       	push	r14
    97ba:	ff 92       	push	r15
    97bc:	0f 93       	push	r16
    97be:	1f 93       	push	r17
    97c0:	cf 93       	push	r28
    97c2:	df 93       	push	r29
    97c4:	1f 92       	push	r1
    97c6:	cd b7       	in	r28, 0x3d	; 61
    97c8:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    97ca:	81 e0       	ldi	r24, 0x01	; 1
    97cc:	80 93 31 0c 	sts	0x0C31, r24
	clear_sprites();
    97d0:	0e 94 9c 42 	call	0x8538	; 0x8538 <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    97d4:	40 e0       	ldi	r20, 0x00	; 0
    97d6:	68 ea       	ldi	r22, 0xA8	; 168
    97d8:	78 e2       	ldi	r23, 0x28	; 40
    97da:	80 e0       	ldi	r24, 0x00	; 0
    97dc:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    97e0:	40 e0       	ldi	r20, 0x00	; 0
    97e2:	60 e9       	ldi	r22, 0x90	; 144
    97e4:	78 e2       	ldi	r23, 0x28	; 40
    97e6:	84 e0       	ldi	r24, 0x04	; 4
    97e8:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    97ec:	02 e0       	ldi	r16, 0x02	; 2
    97ee:	22 e0       	ldi	r18, 0x02	; 2
    97f0:	48 e0       	ldi	r20, 0x08	; 8
    97f2:	68 e3       	ldi	r22, 0x38	; 56
    97f4:	80 e0       	ldi	r24, 0x00	; 0
    97f6:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    97fa:	22 e0       	ldi	r18, 0x02	; 2
    97fc:	48 e0       	ldi	r20, 0x08	; 8
    97fe:	60 ea       	ldi	r22, 0xA0	; 160
    9800:	84 e0       	ldi	r24, 0x04	; 4
    9802:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
	Print(10, 2, strHighscores);
    9806:	41 ed       	ldi	r20, 0xD1	; 209
    9808:	5a e0       	ldi	r21, 0x0A	; 10
    980a:	62 e0       	ldi	r22, 0x02	; 2
    980c:	70 e0       	ldi	r23, 0x00	; 0
    980e:	8a e0       	ldi	r24, 0x0A	; 10
    9810:	90 e0       	ldi	r25, 0x00	; 0
    9812:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
    9816:	09 e0       	ldi	r16, 0x09	; 9
    9818:	11 e0       	ldi	r17, 0x01	; 1
    981a:	87 e0       	ldi	r24, 0x07	; 7
    981c:	e8 2e       	mov	r14, r24
    981e:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    9820:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    9822:	20 e0       	ldi	r18, 0x00	; 0
    9824:	43 2f       	mov	r20, r19
    9826:	b7 01       	movw	r22, r14
    9828:	82 e0       	ldi	r24, 0x02	; 2
    982a:	90 e0       	ldi	r25, 0x00	; 0
    982c:	39 83       	std	Y+1, r19	; 0x01
    982e:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <PrintByte>
		PrintChar(3, y, '.');
    9832:	4e e2       	ldi	r20, 0x2E	; 46
    9834:	b7 01       	movw	r22, r14
    9836:	83 e0       	ldi	r24, 0x03	; 3
    9838:	90 e0       	ldi	r25, 0x00	; 0
    983a:	0e 94 04 3f 	call	0x7e08	; 0x7e08 <PrintChar>
    983e:	f8 01       	movw	r30, r16
    9840:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    9842:	80 81       	ld	r24, Z
    9844:	93 e0       	ldi	r25, 0x03	; 3
    9846:	89 9f       	mul	r24, r25
    9848:	a0 01       	movw	r20, r0
    984a:	11 24       	eor	r1, r1
    984c:	4a 5d       	subi	r20, 0xDA	; 218
    984e:	5e 4f       	sbci	r21, 0xFE	; 254
    9850:	23 e0       	ldi	r18, 0x03	; 3
    9852:	6e 2d       	mov	r22, r14
    9854:	85 e0       	ldi	r24, 0x05	; 5
    9856:	0e 94 15 40 	call	0x802a	; 0x802a <LBPrintStr>
		Print(9, y, strOwns);
    985a:	4b e7       	ldi	r20, 0x7B	; 123
    985c:	5a e0       	ldi	r21, 0x0A	; 10
    985e:	b7 01       	movw	r22, r14
    9860:	89 e0       	ldi	r24, 0x09	; 9
    9862:	90 e0       	ldi	r25, 0x00	; 0
    9864:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
    9868:	f8 01       	movw	r30, r16
    986a:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    986c:	80 81       	ld	r24, Z
    986e:	e3 e0       	ldi	r30, 0x03	; 3
    9870:	8e 9f       	mul	r24, r30
    9872:	a0 01       	movw	r20, r0
    9874:	11 24       	eor	r1, r1
    9876:	4a 5d       	subi	r20, 0xDA	; 218
    9878:	5e 4f       	sbci	r21, 0xFE	; 254
    987a:	23 e0       	ldi	r18, 0x03	; 3
    987c:	6e 2d       	mov	r22, r14
    987e:	8e e0       	ldi	r24, 0x0E	; 14
    9880:	0e 94 15 40 	call	0x802a	; 0x802a <LBPrintStr>
		Print(18, y, strBy);
    9884:	48 e7       	ldi	r20, 0x78	; 120
    9886:	5a e0       	ldi	r21, 0x0A	; 10
    9888:	b7 01       	movw	r22, r14
    988a:	82 e1       	ldi	r24, 0x12	; 18
    988c:	90 e0       	ldi	r25, 0x00	; 0
    988e:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
    9892:	f8 01       	movw	r30, r16
    9894:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    9896:	21 e0       	ldi	r18, 0x01	; 1
    9898:	40 81       	ld	r20, Z
    989a:	b7 01       	movw	r22, r14
    989c:	87 e1       	ldi	r24, 0x17	; 23
    989e:	90 e0       	ldi	r25, 0x00	; 0
    98a0:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <PrintByte>
		PrintChar(24, y, '-');
    98a4:	4d e2       	ldi	r20, 0x2D	; 45
    98a6:	b7 01       	movw	r22, r14
    98a8:	88 e1       	ldi	r24, 0x18	; 24
    98aa:	90 e0       	ldi	r25, 0x00	; 0
    98ac:	0e 94 04 3f 	call	0x7e08	; 0x7e08 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    98b0:	21 e0       	ldi	r18, 0x01	; 1
    98b2:	f8 01       	movw	r30, r16
    98b4:	40 81       	ld	r20, Z
    98b6:	b7 01       	movw	r22, r14
    98b8:	8b e1       	ldi	r24, 0x1B	; 27
    98ba:	90 e0       	ldi	r25, 0x00	; 0
    98bc:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <PrintByte>
		y += 3;
		rank += 1;
    98c0:	39 81       	ldd	r19, Y+1	; 0x01
    98c2:	3f 5f       	subi	r19, 0xFF	; 255
    98c4:	f3 e0       	ldi	r31, 0x03	; 3
    98c6:	ef 0e       	add	r14, r31
    98c8:	f1 1c       	adc	r15, r1
    98ca:	0c 5f       	subi	r16, 0xFC	; 252
    98cc:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    98ce:	36 30       	cpi	r19, 0x06	; 6
    98d0:	09 f0       	breq	.+2      	; 0x98d4 <load_tank_rank+0x11c>
    98d2:	a7 cf       	rjmp	.-178    	; 0x9822 <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    98d4:	4f e8       	ldi	r20, 0x8F	; 143
    98d6:	5a e0       	ldi	r21, 0x0A	; 10
    98d8:	67 e1       	ldi	r22, 0x17	; 23
    98da:	70 e0       	ldi	r23, 0x00	; 0
    98dc:	8a e0       	ldi	r24, 0x0A	; 10
    98de:	90 e0       	ldi	r25, 0x00	; 0
}
    98e0:	0f 90       	pop	r0
    98e2:	df 91       	pop	r29
    98e4:	cf 91       	pop	r28
    98e6:	1f 91       	pop	r17
    98e8:	0f 91       	pop	r16
    98ea:	ff 90       	pop	r15
    98ec:	ef 90       	pop	r14
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    98ee:	0c 94 e9 3e 	jmp	0x7dd2	; 0x7dd2 <Print>

000098f2 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
	fade_through();
    98f2:	0e 94 92 42 	call	0x8524	; 0x8524 <fade_through>
	SetSpriteVisibility(true);
    98f6:	81 e0       	ldi	r24, 0x01	; 1
    98f8:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <SetSpriteVisibility>
	init_game_state();
    98fc:	0e 94 4e 42 	call	0x849c	; 0x849c <init_game_state>
	load_tank_rank();
    9900:	0c 94 dc 4b 	jmp	0x97b8	; 0x97b8 <load_tank_rank>

00009904 <update_level_helper>:
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
}

void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    9904:	af 92       	push	r10
    9906:	bf 92       	push	r11
    9908:	cf 92       	push	r12
    990a:	df 92       	push	r13
    990c:	ef 92       	push	r14
    990e:	ff 92       	push	r15
    9910:	0f 93       	push	r16
    9912:	1f 93       	push	r17
    9914:	cf 93       	push	r28
    9916:	df 93       	push	r29
    9918:	8c 01       	movw	r16, r24
    991a:	eb 01       	movw	r28, r22
    991c:	7a 01       	movw	r14, r20
	Shot* shot;
	u8 next_level;

	if ((p->pressed & BTN_START))
    991e:	fc 01       	movw	r30, r24
    9920:	80 81       	ld	r24, Z
    9922:	83 ff       	sbrs	r24, 3
    9924:	09 c0       	rjmp	.+18     	; 0x9938 <update_level_helper+0x34>
	{
		game.paused = game.paused ^ 1;
    9926:	90 91 33 0c 	lds	r25, 0x0C33
    992a:	81 e0       	ldi	r24, 0x01	; 1
    992c:	89 27       	eor	r24, r25
    992e:	80 93 33 0c 	sts	0x0C33, r24
		load_level_tiles(false);
    9932:	80 e0       	ldi	r24, 0x00	; 0
    9934:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    9938:	20 91 33 0c 	lds	r18, 0x0C33
    993c:	f8 01       	movw	r30, r16
    993e:	80 81       	ld	r24, Z
    9940:	91 81       	ldd	r25, Z+1	; 0x01
    9942:	21 11       	cpse	r18, r1
    9944:	4d c1       	rjmp	.+666    	; 0x9be0 <update_level_helper+0x2dc>
    9946:	2b 89       	ldd	r18, Y+19	; 0x13
    9948:	20 fd       	sbrc	r18, 0
    994a:	4a c1       	rjmp	.+660    	; 0x9be0 <update_level_helper+0x2dc>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    994c:	93 ff       	sbrs	r25, 3
    994e:	0b c0       	rjmp	.+22     	; 0x9966 <update_level_helper+0x62>
    9950:	8c 89       	ldd	r24, Y+20	; 0x14
    9952:	8a 35       	cpi	r24, 0x5A	; 90
    9954:	41 f4       	brne	.+16     	; 0x9966 <update_level_helper+0x62>
		{
			player->banter_frame = 0;
    9956:	1c 8a       	std	Y+20, r1	; 0x14
			player->banter_index = (u8) LBRandom(0, 9);
    9958:	69 e0       	ldi	r22, 0x09	; 9
    995a:	70 e0       	ldi	r23, 0x00	; 0
    995c:	80 e0       	ldi	r24, 0x00	; 0
    995e:	90 e0       	ldi	r25, 0x00	; 0
    9960:	0e 94 46 41 	call	0x828c	; 0x828c <LBRandom>
    9964:	8d 8b       	std	Y+21, r24	; 0x15
		}
		player->shared.speed = player->max_speed;
    9966:	6f 89       	ldd	r22, Y+23	; 0x17
    9968:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    996a:	f8 01       	movw	r30, r16
    996c:	84 81       	ldd	r24, Z+4	; 0x04
    996e:	84 ff       	sbrs	r24, 4
    9970:	15 c0       	rjmp	.+42     	; 0x999c <update_level_helper+0x98>
		{
			player->shared.direction = D_UP;
    9972:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    9974:	70 e0       	ldi	r23, 0x00	; 0
    9976:	80 e0       	ldi	r24, 0x00	; 0
    9978:	90 e0       	ldi	r25, 0x00	; 0
    997a:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    997e:	25 e6       	ldi	r18, 0x65	; 101
    9980:	38 e8       	ldi	r19, 0x88	; 136
    9982:	48 e8       	ldi	r20, 0x88	; 136
    9984:	5c e3       	ldi	r21, 0x3C	; 60
    9986:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    998a:	9b 01       	movw	r18, r22
    998c:	ac 01       	movw	r20, r24
    998e:	6e 81       	ldd	r22, Y+6	; 0x06
    9990:	7f 81       	ldd	r23, Y+7	; 0x07
    9992:	88 85       	ldd	r24, Y+8	; 0x08
    9994:	99 85       	ldd	r25, Y+9	; 0x09
    9996:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    999a:	2f c0       	rjmp	.+94     	; 0x99fa <update_level_helper+0xf6>
		}
		else if ((p->held & BTN_RIGHT))
    999c:	87 ff       	sbrs	r24, 7
    999e:	16 c0       	rjmp	.+44     	; 0x99cc <update_level_helper+0xc8>
		{
			player->shared.direction = D_RIGHT;
    99a0:	81 e0       	ldi	r24, 0x01	; 1
    99a2:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    99a4:	70 e0       	ldi	r23, 0x00	; 0
    99a6:	80 e0       	ldi	r24, 0x00	; 0
    99a8:	90 e0       	ldi	r25, 0x00	; 0
    99aa:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    99ae:	25 e6       	ldi	r18, 0x65	; 101
    99b0:	38 e8       	ldi	r19, 0x88	; 136
    99b2:	48 e8       	ldi	r20, 0x88	; 136
    99b4:	5c e3       	ldi	r21, 0x3C	; 60
    99b6:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    99ba:	9b 01       	movw	r18, r22
    99bc:	ac 01       	movw	r20, r24
    99be:	6a 81       	ldd	r22, Y+2	; 0x02
    99c0:	7b 81       	ldd	r23, Y+3	; 0x03
    99c2:	8c 81       	ldd	r24, Y+4	; 0x04
    99c4:	9d 81       	ldd	r25, Y+5	; 0x05
    99c6:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    99ca:	33 c0       	rjmp	.+102    	; 0x9a32 <update_level_helper+0x12e>
		}
		else if ((p->held & BTN_DOWN))
    99cc:	85 ff       	sbrs	r24, 5
    99ce:	1a c0       	rjmp	.+52     	; 0x9a04 <update_level_helper+0x100>
		{
			player->shared.direction = D_DOWN;
    99d0:	82 e0       	ldi	r24, 0x02	; 2
    99d2:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    99d4:	70 e0       	ldi	r23, 0x00	; 0
    99d6:	80 e0       	ldi	r24, 0x00	; 0
    99d8:	90 e0       	ldi	r25, 0x00	; 0
    99da:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    99de:	25 e6       	ldi	r18, 0x65	; 101
    99e0:	38 e8       	ldi	r19, 0x88	; 136
    99e2:	48 e8       	ldi	r20, 0x88	; 136
    99e4:	5c e3       	ldi	r21, 0x3C	; 60
    99e6:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    99ea:	9b 01       	movw	r18, r22
    99ec:	ac 01       	movw	r20, r24
    99ee:	6e 81       	ldd	r22, Y+6	; 0x06
    99f0:	7f 81       	ldd	r23, Y+7	; 0x07
    99f2:	88 85       	ldd	r24, Y+8	; 0x08
    99f4:	99 85       	ldd	r25, Y+9	; 0x09
    99f6:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    99fa:	6e 83       	std	Y+6, r22	; 0x06
    99fc:	7f 83       	std	Y+7, r23	; 0x07
    99fe:	88 87       	std	Y+8, r24	; 0x08
    9a00:	99 87       	std	Y+9, r25	; 0x09
    9a02:	1d c0       	rjmp	.+58     	; 0x9a3e <update_level_helper+0x13a>
		}
		else if ((p->held & BTN_LEFT))
    9a04:	86 ff       	sbrs	r24, 6
    9a06:	1a c0       	rjmp	.+52     	; 0x9a3c <update_level_helper+0x138>
		{
			player->shared.direction = D_LEFT;
    9a08:	83 e0       	ldi	r24, 0x03	; 3
    9a0a:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    9a0c:	70 e0       	ldi	r23, 0x00	; 0
    9a0e:	80 e0       	ldi	r24, 0x00	; 0
    9a10:	90 e0       	ldi	r25, 0x00	; 0
    9a12:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    9a16:	25 e6       	ldi	r18, 0x65	; 101
    9a18:	38 e8       	ldi	r19, 0x88	; 136
    9a1a:	48 e8       	ldi	r20, 0x88	; 136
    9a1c:	5c e3       	ldi	r21, 0x3C	; 60
    9a1e:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    9a22:	9b 01       	movw	r18, r22
    9a24:	ac 01       	movw	r20, r24
    9a26:	6a 81       	ldd	r22, Y+2	; 0x02
    9a28:	7b 81       	ldd	r23, Y+3	; 0x03
    9a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    9a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    9a2e:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    9a32:	6a 83       	std	Y+2, r22	; 0x02
    9a34:	7b 83       	std	Y+3, r23	; 0x03
    9a36:	8c 83       	std	Y+4, r24	; 0x04
    9a38:	9d 83       	std	Y+5, r25	; 0x05
    9a3a:	01 c0       	rjmp	.+2      	; 0x9a3e <update_level_helper+0x13a>
		}
		else
		{
			player->shared.speed = 0;
    9a3c:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    9a3e:	f8 01       	movw	r30, r16
    9a40:	80 81       	ld	r24, Z
    9a42:	91 81       	ldd	r25, Z+1	; 0x01
    9a44:	90 ff       	sbrs	r25, 0
    9a46:	44 c0       	rjmp	.+136    	; 0x9ad0 <update_level_helper+0x1cc>
    9a48:	88 89       	ldd	r24, Y+16	; 0x10
    9a4a:	82 30       	cpi	r24, 0x02	; 2
    9a4c:	08 f0       	brcs	.+2      	; 0x9a50 <update_level_helper+0x14c>
    9a4e:	40 c0       	rjmp	.+128    	; 0x9ad0 <update_level_helper+0x1cc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    9a50:	8f a1       	ldd	r24, Y+39	; 0x27
    9a52:	81 11       	cpse	r24, r1
    9a54:	06 c0       	rjmp	.+12     	; 0x9a62 <update_level_helper+0x15e>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    9a56:	8e 01       	movw	r16, r28
    9a58:	06 5e       	subi	r16, 0xE6	; 230
    9a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    9a5c:	a1 2c       	mov	r10, r1
    9a5e:	b1 2c       	mov	r11, r1
    9a60:	0c c0       	rjmp	.+24     	; 0x9a7a <update_level_helper+0x176>
				if (!shot->active)
    9a62:	fe 01       	movw	r30, r28
    9a64:	e7 5b       	subi	r30, 0xB7	; 183
    9a66:	ff 4f       	sbci	r31, 0xFF	; 255
    9a68:	80 81       	ld	r24, Z
    9a6a:	81 11       	cpse	r24, r1
    9a6c:	31 c0       	rjmp	.+98     	; 0x9ad0 <update_level_helper+0x1cc>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    9a6e:	8e 01       	movw	r16, r28
    9a70:	04 5c       	subi	r16, 0xC4	; 196
    9a72:	1f 4f       	sbci	r17, 0xFF	; 255
    9a74:	aa 24       	eor	r10, r10
    9a76:	a3 94       	inc	r10
    9a78:	b1 2c       	mov	r11, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    9a7a:	88 8d       	ldd	r24, Y+24	; 0x18
    9a7c:	88 23       	and	r24, r24
    9a7e:	31 f0       	breq	.+12     	; 0x9a8c <update_level_helper+0x188>
					{
						init_shot_state(shot, ROCKET_SHOT);
    9a80:	61 e0       	ldi	r22, 0x01	; 1
    9a82:	c8 01       	movw	r24, r16
    9a84:	0e 94 95 41 	call	0x832a	; 0x832a <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    9a88:	61 e0       	ldi	r22, 0x01	; 1
    9a8a:	05 c0       	rjmp	.+10     	; 0x9a96 <update_level_helper+0x192>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    9a8c:	60 e0       	ldi	r22, 0x00	; 0
    9a8e:	c8 01       	movw	r24, r16
    9a90:	0e 94 95 41 	call	0x832a	; 0x832a <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    9a94:	60 e0       	ldi	r22, 0x00	; 0
    9a96:	c8 01       	movw	r24, r16
    9a98:	0e 94 b0 41 	call	0x8360	; 0x8360 <set_shot_animations>
					}
					player->active_shots++;
    9a9c:	88 89       	ldd	r24, Y+16	; 0x10
    9a9e:	8f 5f       	subi	r24, 0xFF	; 255
    9aa0:	88 8b       	std	Y+16, r24	; 0x10
					shot->shared.direction = player->shared.direction;
    9aa2:	82 e2       	ldi	r24, 0x22	; 34
    9aa4:	8a 9d       	mul	r24, r10
    9aa6:	60 01       	movw	r12, r0
    9aa8:	8b 9d       	mul	r24, r11
    9aaa:	d0 0c       	add	r13, r0
    9aac:	11 24       	eor	r1, r1
    9aae:	cc 0e       	add	r12, r28
    9ab0:	dd 1e       	adc	r13, r29
    9ab2:	88 81       	ld	r24, Y
    9ab4:	f6 01       	movw	r30, r12
    9ab6:	82 8f       	std	Z+26, r24	; 0x1a
					position_shot(player, shot);
    9ab8:	b8 01       	movw	r22, r16
    9aba:	ce 01       	movw	r24, r28
    9abc:	0e 94 12 43 	call	0x8624	; 0x8624 <position_shot>
					shot->active = 1;
    9ac0:	81 e0       	ldi	r24, 0x01	; 1
    9ac2:	f6 01       	movw	r30, r12
    9ac4:	87 a3       	std	Z+39, r24	; 0x27
					if (player->has_over_speed)
    9ac6:	89 8d       	ldd	r24, Y+25	; 0x19
    9ac8:	88 23       	and	r24, r24
    9aca:	11 f0       	breq	.+4      	; 0x9ad0 <update_level_helper+0x1cc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    9acc:	86 e9       	ldi	r24, 0x96	; 150
    9ace:	83 8f       	std	Z+27, r24	; 0x1b
    9ad0:	8e 01       	movw	r16, r28
    9ad2:	05 5e       	subi	r16, 0xE5	; 229
    9ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    9ad6:	5e 01       	movw	r10, r28
    9ad8:	ff e5       	ldi	r31, 0x5F	; 95
    9ada:	af 0e       	add	r10, r31
    9adc:	b1 1c       	adc	r11, r1

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    9ade:	f8 01       	movw	r30, r16
    9ae0:	84 85       	ldd	r24, Z+12	; 0x0c
    9ae2:	88 23       	and	r24, r24
    9ae4:	09 f4       	brne	.+2      	; 0x9ae8 <update_level_helper+0x1e4>
    9ae6:	75 c0       	rjmp	.+234    	; 0x9bd2 <update_level_helper+0x2ce>
			{
				switch (shot->shared.direction)
    9ae8:	82 91       	ld	r24, -Z
    9aea:	6f 01       	movw	r12, r30
    9aec:	81 30       	cpi	r24, 0x01	; 1
    9aee:	a9 f1       	breq	.+106    	; 0x9b5a <update_level_helper+0x256>
    9af0:	e8 f0       	brcs	.+58     	; 0x9b2c <update_level_helper+0x228>
    9af2:	82 30       	cpi	r24, 0x02	; 2
    9af4:	09 f4       	brne	.+2      	; 0x9af8 <update_level_helper+0x1f4>
    9af6:	48 c0       	rjmp	.+144    	; 0x9b88 <update_level_helper+0x284>
    9af8:	83 30       	cpi	r24, 0x03	; 3
    9afa:	09 f0       	breq	.+2      	; 0x9afe <update_level_helper+0x1fa>
    9afc:	66 c0       	rjmp	.+204    	; 0x9bca <update_level_helper+0x2c6>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    9afe:	f8 01       	movw	r30, r16
    9b00:	60 81       	ld	r22, Z
    9b02:	70 e0       	ldi	r23, 0x00	; 0
    9b04:	80 e0       	ldi	r24, 0x00	; 0
    9b06:	90 e0       	ldi	r25, 0x00	; 0
    9b08:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    9b0c:	25 e6       	ldi	r18, 0x65	; 101
    9b0e:	38 e8       	ldi	r19, 0x88	; 136
    9b10:	48 e8       	ldi	r20, 0x88	; 136
    9b12:	5c e3       	ldi	r21, 0x3C	; 60
    9b14:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    9b18:	9b 01       	movw	r18, r22
    9b1a:	ac 01       	movw	r20, r24
    9b1c:	f8 01       	movw	r30, r16
    9b1e:	61 81       	ldd	r22, Z+1	; 0x01
    9b20:	72 81       	ldd	r23, Z+2	; 0x02
    9b22:	83 81       	ldd	r24, Z+3	; 0x03
    9b24:	94 81       	ldd	r25, Z+4	; 0x04
    9b26:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    9b2a:	4a c0       	rjmp	.+148    	; 0x9bc0 <update_level_helper+0x2bc>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    9b2c:	f8 01       	movw	r30, r16
    9b2e:	60 81       	ld	r22, Z
    9b30:	70 e0       	ldi	r23, 0x00	; 0
    9b32:	80 e0       	ldi	r24, 0x00	; 0
    9b34:	90 e0       	ldi	r25, 0x00	; 0
    9b36:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    9b3a:	25 e6       	ldi	r18, 0x65	; 101
    9b3c:	38 e8       	ldi	r19, 0x88	; 136
    9b3e:	48 e8       	ldi	r20, 0x88	; 136
    9b40:	5c e3       	ldi	r21, 0x3C	; 60
    9b42:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    9b46:	9b 01       	movw	r18, r22
    9b48:	ac 01       	movw	r20, r24
    9b4a:	f8 01       	movw	r30, r16
    9b4c:	65 81       	ldd	r22, Z+5	; 0x05
    9b4e:	76 81       	ldd	r23, Z+6	; 0x06
    9b50:	87 81       	ldd	r24, Z+7	; 0x07
    9b52:	90 85       	ldd	r25, Z+8	; 0x08
    9b54:	0e 94 06 52 	call	0xa40c	; 0xa40c <__subsf3>
    9b58:	2d c0       	rjmp	.+90     	; 0x9bb4 <update_level_helper+0x2b0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    9b5a:	f8 01       	movw	r30, r16
    9b5c:	60 81       	ld	r22, Z
    9b5e:	70 e0       	ldi	r23, 0x00	; 0
    9b60:	80 e0       	ldi	r24, 0x00	; 0
    9b62:	90 e0       	ldi	r25, 0x00	; 0
    9b64:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    9b68:	25 e6       	ldi	r18, 0x65	; 101
    9b6a:	38 e8       	ldi	r19, 0x88	; 136
    9b6c:	48 e8       	ldi	r20, 0x88	; 136
    9b6e:	5c e3       	ldi	r21, 0x3C	; 60
    9b70:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    9b74:	9b 01       	movw	r18, r22
    9b76:	ac 01       	movw	r20, r24
    9b78:	f8 01       	movw	r30, r16
    9b7a:	61 81       	ldd	r22, Z+1	; 0x01
    9b7c:	72 81       	ldd	r23, Z+2	; 0x02
    9b7e:	83 81       	ldd	r24, Z+3	; 0x03
    9b80:	94 81       	ldd	r25, Z+4	; 0x04
    9b82:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    9b86:	1c c0       	rjmp	.+56     	; 0x9bc0 <update_level_helper+0x2bc>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    9b88:	f8 01       	movw	r30, r16
    9b8a:	60 81       	ld	r22, Z
    9b8c:	70 e0       	ldi	r23, 0x00	; 0
    9b8e:	80 e0       	ldi	r24, 0x00	; 0
    9b90:	90 e0       	ldi	r25, 0x00	; 0
    9b92:	0e 94 05 53 	call	0xa60a	; 0xa60a <__floatsisf>
    9b96:	25 e6       	ldi	r18, 0x65	; 101
    9b98:	38 e8       	ldi	r19, 0x88	; 136
    9b9a:	48 e8       	ldi	r20, 0x88	; 136
    9b9c:	5c e3       	ldi	r21, 0x3C	; 60
    9b9e:	0e 94 b9 53 	call	0xa772	; 0xa772 <__mulsf3>
    9ba2:	9b 01       	movw	r18, r22
    9ba4:	ac 01       	movw	r20, r24
    9ba6:	f8 01       	movw	r30, r16
    9ba8:	65 81       	ldd	r22, Z+5	; 0x05
    9baa:	76 81       	ldd	r23, Z+6	; 0x06
    9bac:	87 81       	ldd	r24, Z+7	; 0x07
    9bae:	90 85       	ldd	r25, Z+8	; 0x08
    9bb0:	0e 94 07 52 	call	0xa40e	; 0xa40e <__addsf3>
    9bb4:	f8 01       	movw	r30, r16
    9bb6:	65 83       	std	Z+5, r22	; 0x05
    9bb8:	76 83       	std	Z+6, r23	; 0x06
    9bba:	87 83       	std	Z+7, r24	; 0x07
    9bbc:	90 87       	std	Z+8, r25	; 0x08
    9bbe:	05 c0       	rjmp	.+10     	; 0x9bca <update_level_helper+0x2c6>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    9bc0:	f8 01       	movw	r30, r16
    9bc2:	61 83       	std	Z+1, r22	; 0x01
    9bc4:	72 83       	std	Z+2, r23	; 0x02
    9bc6:	83 83       	std	Z+3, r24	; 0x03
    9bc8:	94 83       	std	Z+4, r25	; 0x04
					default: break;
				}
				collision_detect_shot(player, shot);
    9bca:	b6 01       	movw	r22, r12
    9bcc:	ce 01       	movw	r24, r28
    9bce:	0e 94 26 48 	call	0x904c	; 0x904c <collision_detect_shot>
    9bd2:	0e 5d       	subi	r16, 0xDE	; 222
    9bd4:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		}

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
    9bd6:	0a 15       	cp	r16, r10
    9bd8:	1b 05       	cpc	r17, r11
    9bda:	09 f0       	breq	.+2      	; 0x9bde <update_level_helper+0x2da>
    9bdc:	80 cf       	rjmp	.-256    	; 0x9ade <update_level_helper+0x1da>
    9bde:	06 c0       	rjmp	.+12     	; 0x9bec <update_level_helper+0x2e8>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    9be0:	91 ff       	sbrs	r25, 1
    9be2:	04 c0       	rjmp	.+8      	; 0x9bec <update_level_helper+0x2e8>
		{
			save_score();
    9be4:	0e 94 a9 42 	call	0x8552	; 0x8552 <save_score>
			exit_game();
    9be8:	0e 94 79 4c 	call	0x98f2	; 0x98f2 <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score == MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    9bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    9bee:	85 30       	cpi	r24, 0x05	; 5
    9bf0:	99 f5       	brne	.+102    	; 0x9c58 <update_level_helper+0x354>
    9bf2:	f7 01       	movw	r30, r14
    9bf4:	83 89       	ldd	r24, Z+19	; 0x13
    9bf6:	80 fd       	sbrc	r24, 0
    9bf8:	2f c0       	rjmp	.+94     	; 0x9c58 <update_level_helper+0x354>
	{
		save_score();
    9bfa:	0e 94 a9 42 	call	0x8552	; 0x8552 <save_score>
		load_level_tiles(true);
    9bfe:	81 e0       	ldi	r24, 0x01	; 1
    9c00:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <load_level_tiles>
		SetSpriteVisibility(false);
    9c04:	80 e0       	ldi	r24, 0x00	; 0
    9c06:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <SetSpriteVisibility>
		print_level_score(player, other_player);
    9c0a:	b7 01       	movw	r22, r14
    9c0c:	ce 01       	movw	r24, r28
    9c0e:	0e 94 80 43 	call	0x8700	; 0x8700 <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    9c12:	82 e0       	ldi	r24, 0x02	; 2
    9c14:	0e 94 63 41 	call	0x82c6	; 0x82c6 <LBWaitSeconds>
		player->level_score = 0;
    9c18:	1f 86       	std	Y+15, r1	; 0x0f
		other_player->level_score = 0;
    9c1a:	f7 01       	movw	r30, r14
    9c1c:	17 86       	std	Z+15, r1	; 0x0f
		next_level = game.current_level + 1;
    9c1e:	80 91 32 0c 	lds	r24, 0x0C32
    9c22:	8f 5f       	subi	r24, 0xFF	; 255
		if (next_level >= LEVEL_COUNT)
    9c24:	8a 30       	cpi	r24, 0x0A	; 10
    9c26:	60 f0       	brcs	.+24     	; 0x9c40 <update_level_helper+0x33c>
		else
		{
			level_transition(next_level);
		}
	}
}
    9c28:	df 91       	pop	r29
    9c2a:	cf 91       	pop	r28
    9c2c:	1f 91       	pop	r17
    9c2e:	0f 91       	pop	r16
    9c30:	ff 90       	pop	r15
    9c32:	ef 90       	pop	r14
    9c34:	df 90       	pop	r13
    9c36:	cf 90       	pop	r12
    9c38:	bf 90       	pop	r11
    9c3a:	af 90       	pop	r10
		player->level_score = 0;
		other_player->level_score = 0;
		next_level = game.current_level + 1;
		if (next_level >= LEVEL_COUNT)
		{
			exit_game();
    9c3c:	0c 94 79 4c 	jmp	0x98f2	; 0x98f2 <exit_game>
		else
		{
			level_transition(next_level);
		}
	}
}
    9c40:	df 91       	pop	r29
    9c42:	cf 91       	pop	r28
    9c44:	1f 91       	pop	r17
    9c46:	0f 91       	pop	r16
    9c48:	ff 90       	pop	r15
    9c4a:	ef 90       	pop	r14
    9c4c:	df 90       	pop	r13
    9c4e:	cf 90       	pop	r12
    9c50:	bf 90       	pop	r11
    9c52:	af 90       	pop	r10
		{
			exit_game();
		}
		else
		{
			level_transition(next_level);
    9c54:	0c 94 80 4b 	jmp	0x9700	; 0x9700 <level_transition>
		}
	}
}
    9c58:	df 91       	pop	r29
    9c5a:	cf 91       	pop	r28
    9c5c:	1f 91       	pop	r17
    9c5e:	0f 91       	pop	r16
    9c60:	ff 90       	pop	r15
    9c62:	ef 90       	pop	r14
    9c64:	df 90       	pop	r13
    9c66:	cf 90       	pop	r12
    9c68:	bf 90       	pop	r11
    9c6a:	af 90       	pop	r10
    9c6c:	08 95       	ret

00009c6e <update_level>:
	Print(14, 2, strVertSep);
	load_level_tiles(false);
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    9c6e:	cf 92       	push	r12
    9c70:	df 92       	push	r13
    9c72:	ef 92       	push	r14
    9c74:	ff 92       	push	r15
    9c76:	1f 93       	push	r17
    9c78:	cf 93       	push	r28
    9c7a:	df 93       	push	r29
    9c7c:	6c 01       	movw	r12, r24
    9c7e:	7b 01       	movw	r14, r22
	char p2_shot_index = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;

	// Render
	if (game.paused)
    9c80:	80 91 33 0c 	lds	r24, 0x0C33
    9c84:	88 23       	and	r24, r24
    9c86:	d1 f0       	breq	.+52     	; 0x9cbc <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    9c88:	80 e0       	ldi	r24, 0x00	; 0
    9c8a:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    9c8e:	4e ed       	ldi	r20, 0xDE	; 222
    9c90:	58 e2       	ldi	r21, 0x28	; 40
    9c92:	6c e0       	ldi	r22, 0x0C	; 12
    9c94:	88 e0       	ldi	r24, 0x08	; 8
    9c96:	0e 94 69 3e 	call	0x7cd2	; 0x7cd2 <DrawMap2>
		Print(12, 13, strPaused);
    9c9a:	45 eb       	ldi	r20, 0xB5	; 181
    9c9c:	59 e0       	ldi	r21, 0x09	; 9
    9c9e:	6d e0       	ldi	r22, 0x0D	; 13
    9ca0:	70 e0       	ldi	r23, 0x00	; 0
    9ca2:	8c e0       	ldi	r24, 0x0C	; 12
    9ca4:	90 e0       	ldi	r25, 0x00	; 0
    9ca6:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
		Print(11, 14, strExit);
    9caa:	4c eb       	ldi	r20, 0xBC	; 188
    9cac:	59 e0       	ldi	r21, 0x09	; 9
    9cae:	6e e0       	ldi	r22, 0x0E	; 14
    9cb0:	70 e0       	ldi	r23, 0x00	; 0
    9cb2:	8b e0       	ldi	r24, 0x0B	; 11
    9cb4:	90 e0       	ldi	r25, 0x00	; 0
    9cb6:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
    9cba:	44 c0       	rjmp	.+136    	; 0x9d44 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    9cbc:	81 e0       	ldi	r24, 0x01	; 1
    9cbe:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    9cc2:	60 e0       	ldi	r22, 0x00	; 0
    9cc4:	8e e4       	ldi	r24, 0x4E	; 78
    9cc6:	9c e0       	ldi	r25, 0x0C	; 12
    9cc8:	0e 94 cc 44 	call	0x8998	; 0x8998 <tank_map>
    9ccc:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    9cce:	68 2f       	mov	r22, r24
    9cd0:	8f eb       	ldi	r24, 0xBF	; 191
    9cd2:	9f e0       	ldi	r25, 0x0F	; 15
    9cd4:	0e 94 cc 44 	call	0x8998	; 0x8998 <tank_map>
    9cd8:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    9cda:	68 2f       	mov	r22, r24
    9cdc:	8e e4       	ldi	r24, 0x4E	; 78
    9cde:	9c e0       	ldi	r25, 0x0C	; 12
    9ce0:	0e 94 4e 45 	call	0x8a9c	; 0x8a9c <shot_map>
    9ce4:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    9ce6:	68 2f       	mov	r22, r24
    9ce8:	8f eb       	ldi	r24, 0xBF	; 191
    9cea:	9f e0       	ldi	r25, 0x0F	; 15
    9cec:	0e 94 4e 45 	call	0x8a9c	; 0x8a9c <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    9cf0:	40 91 02 01 	lds	r20, 0x0102
    9cf4:	6f e0       	ldi	r22, 0x0F	; 15
    9cf6:	8e e4       	ldi	r24, 0x4E	; 78
    9cf8:	9c e0       	ldi	r25, 0x0C	; 12
    9cfa:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <render_banter>
    9cfe:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    9d02:	40 91 01 01 	lds	r20, 0x0101
    9d06:	60 e0       	ldi	r22, 0x00	; 0
    9d08:	8f eb       	ldi	r24, 0xBF	; 191
    9d0a:	9f e0       	ldi	r25, 0x0F	; 15
    9d0c:	0e 94 fb 43 	call	0x87f6	; 0x87f6 <render_banter>
    9d10:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    9d14:	60 e0       	ldi	r22, 0x00	; 0
    9d16:	8e e4       	ldi	r24, 0x4E	; 78
    9d18:	9c e0       	ldi	r25, 0x0C	; 12
    9d1a:	0e 94 23 44 	call	0x8846	; 0x8846 <render_player>
		render_player(&player2, p2_index);
    9d1e:	61 2f       	mov	r22, r17
    9d20:	8f eb       	ldi	r24, 0xBF	; 191
    9d22:	9f e0       	ldi	r25, 0x0F	; 15
    9d24:	0e 94 23 44 	call	0x8846	; 0x8846 <render_player>
		render_shot(&player1, p1_shot_index);
    9d28:	6d 2f       	mov	r22, r29
    9d2a:	8e e4       	ldi	r24, 0x4E	; 78
    9d2c:	9c e0       	ldi	r25, 0x0C	; 12
    9d2e:	0e 94 4c 44 	call	0x8898	; 0x8898 <render_shot>
		render_shot(&player2, p2_shot_index);
    9d32:	6c 2f       	mov	r22, r28
    9d34:	8f eb       	ldi	r24, 0xBF	; 191
    9d36:	9f e0       	ldi	r25, 0x0F	; 15
    9d38:	0e 94 4c 44 	call	0x8898	; 0x8898 <render_shot>
		render_tile_explosions(&tile_animations);
    9d3c:	85 e3       	ldi	r24, 0x35	; 53
    9d3e:	9c e0       	ldi	r25, 0x0C	; 12
    9d40:	0e 94 87 44 	call	0x890e	; 0x890e <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    9d44:	2f e0       	ldi	r18, 0x0F	; 15
    9d46:	4f eb       	ldi	r20, 0xBF	; 191
    9d48:	5f e0       	ldi	r21, 0x0F	; 15
    9d4a:	6e e4       	ldi	r22, 0x4E	; 78
    9d4c:	7c e0       	ldi	r23, 0x0C	; 12
    9d4e:	c6 01       	movw	r24, r12
    9d50:	0e 94 82 4c 	call	0x9904	; 0x9904 <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    9d54:	20 e0       	ldi	r18, 0x00	; 0
    9d56:	4e e4       	ldi	r20, 0x4E	; 78
    9d58:	5c e0       	ldi	r21, 0x0C	; 12
    9d5a:	6f eb       	ldi	r22, 0xBF	; 191
    9d5c:	7f e0       	ldi	r23, 0x0F	; 15
    9d5e:	c7 01       	movw	r24, r14
    9d60:	0e 94 82 4c 	call	0x9904	; 0x9904 <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    9d64:	2f e0       	ldi	r18, 0x0F	; 15
    9d66:	40 e0       	ldi	r20, 0x00	; 0
    9d68:	6f eb       	ldi	r22, 0xBF	; 191
    9d6a:	7f e0       	ldi	r23, 0x0F	; 15
    9d6c:	8e e4       	ldi	r24, 0x4E	; 78
    9d6e:	9c e0       	ldi	r25, 0x0C	; 12
    9d70:	0e 94 80 49 	call	0x9300	; 0x9300 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    9d74:	20 e0       	ldi	r18, 0x00	; 0
    9d76:	4f e0       	ldi	r20, 0x0F	; 15
    9d78:	6e e4       	ldi	r22, 0x4E	; 78
    9d7a:	7c e0       	ldi	r23, 0x0C	; 12
    9d7c:	8f eb       	ldi	r24, 0xBF	; 191
    9d7e:	9f e0       	ldi	r25, 0x0F	; 15
}
    9d80:	df 91       	pop	r29
    9d82:	cf 91       	pop	r28
    9d84:	1f 91       	pop	r17
    9d86:	ff 90       	pop	r15
    9d88:	ef 90       	pop	r14
    9d8a:	df 90       	pop	r13
    9d8c:	cf 90       	pop	r12

	// Update
	update_level_helper(p1, &player1, &player2, 15);
	update_level_helper(p2, &player2, &player1, 0);
	collision_detect_player(&player1, &player2, 0, 15);
	collision_detect_player(&player2, &player1, 15, 0);
    9d8e:	0c 94 80 49 	jmp	0x9300	; 0x9300 <collision_detect_player>

00009d92 <update_tank_rank>:
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	// Update
	if (p1->pressed & BTN_X)
    9d92:	fc 01       	movw	r30, r24
    9d94:	80 81       	ld	r24, Z
    9d96:	91 81       	ldd	r25, Z+1	; 0x01
    9d98:	91 ff       	sbrs	r25, 1
    9d9a:	04 c0       	rjmp	.+8      	; 0x9da4 <update_tank_rank+0x12>
	{
		fade_through();
    9d9c:	0e 94 92 42 	call	0x8524	; 0x8524 <fade_through>
		load_splash();
    9da0:	0c 94 ac 4b 	jmp	0x9758	; 0x9758 <load_splash>
    9da4:	08 95       	ret

00009da6 <_handle_select_helper>:
	}
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    9da6:	0f 93       	push	r16
    9da8:	1f 93       	push	r17
    9daa:	cf 93       	push	r28
    9dac:	df 93       	push	r29
    9dae:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    9db0:	fb 01       	movw	r30, r22
    9db2:	20 81       	ld	r18, Z
    9db4:	31 81       	ldd	r19, Z+1	; 0x01
    9db6:	d9 01       	movw	r26, r18
    9db8:	a0 71       	andi	r26, 0x10	; 16
    9dba:	bb 27       	eor	r27, r27
    9dbc:	24 ff       	sbrs	r18, 4
    9dbe:	09 c0       	rjmp	.+18     	; 0x9dd2 <_handle_select_helper+0x2c>
    9dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    9dc2:	81 11       	cpse	r24, r1
    9dc4:	06 c0       	rjmp	.+12     	; 0x9dd2 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    9dc6:	88 81       	ld	r24, Y
    9dc8:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    9dca:	87 ff       	sbrs	r24, 7
    9dcc:	0f c0       	rjmp	.+30     	; 0x9dec <_handle_select_helper+0x46>
    9dce:	18 82       	st	Y, r1
    9dd0:	95 c0       	rjmp	.+298    	; 0x9efc <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    9dd2:	b9 01       	movw	r22, r18
    9dd4:	60 72       	andi	r22, 0x20	; 32
    9dd6:	77 27       	eor	r23, r23
    9dd8:	25 ff       	sbrs	r18, 5
    9dda:	0a c0       	rjmp	.+20     	; 0x9df0 <_handle_select_helper+0x4a>
    9ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    9dde:	81 11       	cpse	r24, r1
    9de0:	07 c0       	rjmp	.+14     	; 0x9df0 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    9de2:	88 81       	ld	r24, Y
    9de4:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    9de6:	89 30       	cpi	r24, 0x09	; 9
    9de8:	0c f0       	brlt	.+2      	; 0x9dec <_handle_select_helper+0x46>
    9dea:	88 e0       	ldi	r24, 0x08	; 8
    9dec:	88 83       	st	Y, r24
    9dee:	86 c0       	rjmp	.+268    	; 0x9efc <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    9df0:	f9 01       	movw	r30, r18
    9df2:	ee 27       	eor	r30, r30
    9df4:	f1 70       	andi	r31, 0x01	; 1
    9df6:	30 ff       	sbrs	r19, 0
    9df8:	14 c0       	rjmp	.+40     	; 0x9e22 <_handle_select_helper+0x7c>
    9dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    9dfc:	81 11       	cpse	r24, r1
    9dfe:	11 c0       	rjmp	.+34     	; 0x9e22 <_handle_select_helper+0x7c>
	{
		ps->select_state = EDITING;
    9e00:	81 e0       	ldi	r24, 0x01	; 1
    9e02:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    9e04:	69 91       	ld	r22, Y+
    9e06:	f3 e0       	ldi	r31, 0x03	; 3
    9e08:	6f 02       	muls	r22, r31
    9e0a:	b0 01       	movw	r22, r0
    9e0c:	11 24       	eor	r1, r1
    9e0e:	6a 5d       	subi	r22, 0xDA	; 218
    9e10:	7e 4f       	sbci	r23, 0xFE	; 254
    9e12:	43 e0       	ldi	r20, 0x03	; 3
    9e14:	ce 01       	movw	r24, r28
	else if ((p->pressed & BTN_X))
	{
		fade_through();
		load_splash();
	}
}
    9e16:	df 91       	pop	r29
    9e18:	cf 91       	pop	r28
    9e1a:	1f 91       	pop	r17
    9e1c:	0f 91       	pop	r16
		if (ps->handle_id > 8) ps->handle_id = 8;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    9e1e:	0c 94 09 40 	jmp	0x8012	; 0x8012 <LBCopyChars>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    9e22:	27 ff       	sbrs	r18, 7
    9e24:	0a c0       	rjmp	.+20     	; 0x9e3a <_handle_select_helper+0x94>
    9e26:	8d 81       	ldd	r24, Y+5	; 0x05
    9e28:	81 30       	cpi	r24, 0x01	; 1
    9e2a:	39 f4       	brne	.+14     	; 0x9e3a <_handle_select_helper+0x94>
	{
		ps->char_index++;
    9e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    9e2e:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    9e30:	83 30       	cpi	r24, 0x03	; 3
    9e32:	0c f0       	brlt	.+2      	; 0x9e36 <_handle_select_helper+0x90>
    9e34:	82 e0       	ldi	r24, 0x02	; 2
    9e36:	8c 83       	std	Y+4, r24	; 0x04
    9e38:	61 c0       	rjmp	.+194    	; 0x9efc <_handle_select_helper+0x156>
    9e3a:	ca 01       	movw	r24, r20
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    9e3c:	26 ff       	sbrs	r18, 6
    9e3e:	09 c0       	rjmp	.+18     	; 0x9e52 <_handle_select_helper+0xac>
    9e40:	4d 81       	ldd	r20, Y+5	; 0x05
    9e42:	41 30       	cpi	r20, 0x01	; 1
    9e44:	29 f5       	brne	.+74     	; 0x9e90 <_handle_select_helper+0xea>
	{
		ps->char_index--;
    9e46:	8c 81       	ldd	r24, Y+4	; 0x04
    9e48:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    9e4a:	87 ff       	sbrs	r24, 7
    9e4c:	f4 cf       	rjmp	.-24     	; 0x9e36 <_handle_select_helper+0x90>
    9e4e:	1c 82       	std	Y+4, r1	; 0x04
    9e50:	55 c0       	rjmp	.+170    	; 0x9efc <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    9e52:	ab 2b       	or	r26, r27
    9e54:	61 f0       	breq	.+24     	; 0x9e6e <_handle_select_helper+0xc8>
    9e56:	8d 81       	ldd	r24, Y+5	; 0x05
    9e58:	81 30       	cpi	r24, 0x01	; 1
    9e5a:	e1 f5       	brne	.+120    	; 0x9ed4 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]--;
    9e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    9e5e:	c8 0f       	add	r28, r24
    9e60:	d1 1d       	adc	r29, r1
    9e62:	99 81       	ldd	r25, Y+1	; 0x01
    9e64:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    9e66:	91 34       	cpi	r25, 0x41	; 65
    9e68:	70 f4       	brcc	.+28     	; 0x9e86 <_handle_select_helper+0xe0>
    9e6a:	81 e4       	ldi	r24, 0x41	; 65
    9e6c:	0f c0       	rjmp	.+30     	; 0x9e8c <_handle_select_helper+0xe6>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    9e6e:	67 2b       	or	r22, r23
    9e70:	89 f0       	breq	.+34     	; 0x9e94 <_handle_select_helper+0xee>
    9e72:	8d 81       	ldd	r24, Y+5	; 0x05
    9e74:	81 30       	cpi	r24, 0x01	; 1
    9e76:	71 f5       	brne	.+92     	; 0x9ed4 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]++;
    9e78:	8c 81       	ldd	r24, Y+4	; 0x04
    9e7a:	c8 0f       	add	r28, r24
    9e7c:	d1 1d       	adc	r29, r1
    9e7e:	99 81       	ldd	r25, Y+1	; 0x01
    9e80:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    9e82:	9b 35       	cpi	r25, 0x5B	; 91
    9e84:	10 f4       	brcc	.+4      	; 0x9e8a <_handle_select_helper+0xe4>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    9e86:	99 83       	std	Y+1, r25	; 0x01
    9e88:	39 c0       	rjmp	.+114    	; 0x9efc <_handle_select_helper+0x156>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    9e8a:	8a e5       	ldi	r24, 0x5A	; 90
    9e8c:	89 83       	std	Y+1, r24	; 0x01
    9e8e:	36 c0       	rjmp	.+108    	; 0x9efc <_handle_select_helper+0x156>
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    9e90:	67 2b       	or	r22, r23
    9e92:	01 f5       	brne	.+64     	; 0x9ed4 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    9e94:	ef 2b       	or	r30, r31
    9e96:	f1 f0       	breq	.+60     	; 0x9ed4 <_handle_select_helper+0x12e>
    9e98:	4d 81       	ldd	r20, Y+5	; 0x05
    9e9a:	41 30       	cpi	r20, 0x01	; 1
    9e9c:	d9 f4       	brne	.+54     	; 0x9ed4 <_handle_select_helper+0x12e>
	{
		player->handle_id = ps->handle_id;
    9e9e:	fe 01       	movw	r30, r28
    9ea0:	21 91       	ld	r18, Z+
    9ea2:	8f 01       	movw	r16, r30
    9ea4:	fc 01       	movw	r30, r24
    9ea6:	22 87       	std	Z+10, r18	; 0x0a
		LBCopyChars(player->handle, ps->handle, 3);
    9ea8:	43 e0       	ldi	r20, 0x03	; 3
    9eaa:	b8 01       	movw	r22, r16
    9eac:	0b 96       	adiw	r24, 0x0b	; 11
    9eae:	0e 94 09 40 	call	0x8012	; 0x8012 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    9eb2:	88 81       	ld	r24, Y
    9eb4:	f3 e0       	ldi	r31, 0x03	; 3
    9eb6:	8f 02       	muls	r24, r31
    9eb8:	c0 01       	movw	r24, r0
    9eba:	11 24       	eor	r1, r1
    9ebc:	43 e0       	ldi	r20, 0x03	; 3
    9ebe:	b8 01       	movw	r22, r16
    9ec0:	8a 5d       	subi	r24, 0xDA	; 218
    9ec2:	9e 4f       	sbci	r25, 0xFE	; 254
    9ec4:	0e 94 09 40 	call	0x8012	; 0x8012 <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9ec8:	84 e2       	ldi	r24, 0x24	; 36
    9eca:	91 e0       	ldi	r25, 0x01	; 1
    9ecc:	0e 94 be 31 	call	0x637c	; 0x637c <EepromWriteBlock>
	{
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    9ed0:	82 e0       	ldi	r24, 0x02	; 2
    9ed2:	0a c0       	rjmp	.+20     	; 0x9ee8 <_handle_select_helper+0x142>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    9ed4:	31 ff       	sbrs	r19, 1
    9ed6:	12 c0       	rjmp	.+36     	; 0x9efc <_handle_select_helper+0x156>
    9ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    9eda:	81 30       	cpi	r24, 0x01	; 1
    9edc:	11 f4       	brne	.+4      	; 0x9ee2 <_handle_select_helper+0x13c>
	{
		ps->select_state = SELECTING;
    9ede:	1d 82       	std	Y+5, r1	; 0x05
    9ee0:	0d c0       	rjmp	.+26     	; 0x9efc <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    9ee2:	82 30       	cpi	r24, 0x02	; 2
    9ee4:	19 f4       	brne	.+6      	; 0x9eec <_handle_select_helper+0x146>
		{
			ps->select_state = EDITING;
    9ee6:	81 e0       	ldi	r24, 0x01	; 1
    9ee8:	8d 83       	std	Y+5, r24	; 0x05
    9eea:	08 c0       	rjmp	.+16     	; 0x9efc <_handle_select_helper+0x156>
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
    9eec:	0e 94 92 42 	call	0x8524	; 0x8524 <fade_through>
		load_splash();
	}
}
    9ef0:	df 91       	pop	r29
    9ef2:	cf 91       	pop	r28
    9ef4:	1f 91       	pop	r17
    9ef6:	0f 91       	pop	r16
			ps->select_state = EDITING;
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
		load_splash();
    9ef8:	0c 94 ac 4b 	jmp	0x9758	; 0x9758 <load_splash>
	}
}
    9efc:	df 91       	pop	r29
    9efe:	cf 91       	pop	r28
    9f00:	1f 91       	pop	r17
    9f02:	0f 91       	pop	r16
    9f04:	08 95       	ret

00009f06 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    9f06:	af 92       	push	r10
    9f08:	bf 92       	push	r11
    9f0a:	cf 92       	push	r12
    9f0c:	df 92       	push	r13
    9f0e:	ef 92       	push	r14
    9f10:	ff 92       	push	r15
    9f12:	0f 93       	push	r16
    9f14:	1f 93       	push	r17
    9f16:	cf 93       	push	r28
    9f18:	df 93       	push	r29
    9f1a:	00 d0       	rcall	.+0      	; 0x9f1c <_handle_select_render_helper+0x16>
    9f1c:	1f 92       	push	r1
    9f1e:	cd b7       	in	r28, 0x3d	; 61
    9f20:	de b7       	in	r29, 0x3e	; 62
    9f22:	7c 01       	movw	r14, r24
    9f24:	b4 2e       	mov	r11, r20
    9f26:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    9f28:	80 e2       	ldi	r24, 0x20	; 32
    9f2a:	89 83       	std	Y+1, r24	; 0x01
    9f2c:	8a 83       	std	Y+2, r24	; 0x02
    9f2e:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    9f30:	f7 01       	movw	r30, r14
    9f32:	85 81       	ldd	r24, Z+5	; 0x05
    9f34:	81 11       	cpse	r24, r1
    9f36:	1d c0       	rjmp	.+58     	; 0x9f72 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_ball, 0);
    9f38:	40 e0       	ldi	r20, 0x00	; 0
    9f3a:	69 e6       	ldi	r22, 0x69	; 105
    9f3c:	78 e2       	ldi	r23, 0x28	; 40
    9f3e:	82 2f       	mov	r24, r18
    9f40:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    9f44:	40 e0       	ldi	r20, 0x00	; 0
    9f46:	6e ea       	ldi	r22, 0xAE	; 174
    9f48:	78 e2       	ldi	r23, 0x28	; 40
    9f4a:	81 e0       	ldi	r24, 0x01	; 1
    9f4c:	81 0f       	add	r24, r17
    9f4e:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    9f52:	f7 01       	movw	r30, r14
    9f54:	40 81       	ld	r20, Z
    9f56:	44 0f       	add	r20, r20
    9f58:	44 0f       	add	r20, r20
    9f5a:	44 0f       	add	r20, r20
    9f5c:	40 5c       	subi	r20, 0xC0	; 192
    9f5e:	01 e0       	ldi	r16, 0x01	; 1
    9f60:	21 e0       	ldi	r18, 0x01	; 1
    9f62:	6b 2d       	mov	r22, r11
    9f64:	66 0f       	add	r22, r22
    9f66:	66 0f       	add	r22, r22
    9f68:	66 0f       	add	r22, r22
    9f6a:	81 2f       	mov	r24, r17
    9f6c:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
    9f70:	6f c0       	rjmp	.+222    	; 0xa050 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    9f72:	81 30       	cpi	r24, 0x01	; 1
    9f74:	09 f0       	breq	.+2      	; 0x9f78 <_handle_select_render_helper+0x72>
    9f76:	44 c0       	rjmp	.+136    	; 0xa000 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_ball, 0);
    9f78:	40 e0       	ldi	r20, 0x00	; 0
    9f7a:	69 e6       	ldi	r22, 0x69	; 105
    9f7c:	78 e2       	ldi	r23, 0x28	; 40
    9f7e:	82 2f       	mov	r24, r18
    9f80:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
		MapSprite2(idx+1, map_ball, 0);
    9f84:	aa 24       	eor	r10, r10
    9f86:	a3 94       	inc	r10
    9f88:	a1 0e       	add	r10, r17
    9f8a:	40 e0       	ldi	r20, 0x00	; 0
    9f8c:	69 e6       	ldi	r22, 0x69	; 105
    9f8e:	78 e2       	ldi	r23, 0x28	; 40
    9f90:	8a 2d       	mov	r24, r10
    9f92:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    9f96:	cb 2c       	mov	r12, r11
    9f98:	d1 2c       	mov	r13, r1
    9f9a:	f5 e0       	ldi	r31, 0x05	; 5
    9f9c:	cf 0e       	add	r12, r31
    9f9e:	d1 1c       	adc	r13, r1
    9fa0:	f7 01       	movw	r30, r14
    9fa2:	40 81       	ld	r20, Z
    9fa4:	44 0f       	add	r20, r20
    9fa6:	44 0f       	add	r20, r20
    9fa8:	44 0f       	add	r20, r20
    9faa:	48 5c       	subi	r20, 0xC8	; 200
    9fac:	84 81       	ldd	r24, Z+4	; 0x04
    9fae:	b6 01       	movw	r22, r12
    9fb0:	68 0f       	add	r22, r24
    9fb2:	71 1d       	adc	r23, r1
    9fb4:	87 fd       	sbrc	r24, 7
    9fb6:	7a 95       	dec	r23
    9fb8:	66 0f       	add	r22, r22
    9fba:	66 0f       	add	r22, r22
    9fbc:	66 0f       	add	r22, r22
    9fbe:	01 e0       	ldi	r16, 0x01	; 1
    9fc0:	21 e0       	ldi	r18, 0x01	; 1
    9fc2:	81 2f       	mov	r24, r17
    9fc4:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    9fc8:	f7 01       	movw	r30, r14
    9fca:	40 81       	ld	r20, Z
    9fcc:	44 0f       	add	r20, r20
    9fce:	44 0f       	add	r20, r20
    9fd0:	44 0f       	add	r20, r20
    9fd2:	48 5b       	subi	r20, 0xB8	; 184
    9fd4:	84 81       	ldd	r24, Z+4	; 0x04
    9fd6:	c8 0e       	add	r12, r24
    9fd8:	d1 1c       	adc	r13, r1
    9fda:	87 fd       	sbrc	r24, 7
    9fdc:	da 94       	dec	r13
    9fde:	6c 2d       	mov	r22, r12
    9fe0:	66 0f       	add	r22, r22
    9fe2:	66 0f       	add	r22, r22
    9fe4:	66 0f       	add	r22, r22
    9fe6:	21 e0       	ldi	r18, 0x01	; 1
    9fe8:	8a 2d       	mov	r24, r10
    9fea:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    9fee:	43 e0       	ldi	r20, 0x03	; 3
    9ff0:	b7 01       	movw	r22, r14
    9ff2:	6f 5f       	subi	r22, 0xFF	; 255
    9ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    9ff6:	ce 01       	movw	r24, r28
    9ff8:	01 96       	adiw	r24, 0x01	; 1
    9ffa:	0e 94 09 40 	call	0x8012	; 0x8012 <LBCopyChars>
    9ffe:	28 c0       	rjmp	.+80     	; 0xa050 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    a000:	82 30       	cpi	r24, 0x02	; 2
    a002:	31 f5       	brne	.+76     	; 0xa050 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    a004:	c4 2e       	mov	r12, r20
    a006:	d1 2c       	mov	r13, r1
    a008:	48 e2       	ldi	r20, 0x28	; 40
    a00a:	65 e0       	ldi	r22, 0x05	; 5
    a00c:	70 e0       	ldi	r23, 0x00	; 0
    a00e:	c6 01       	movw	r24, r12
    a010:	06 96       	adiw	r24, 0x06	; 6
    a012:	0e 94 04 3f 	call	0x7e08	; 0x7e08 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    a016:	23 e0       	ldi	r18, 0x03	; 3
    a018:	a7 01       	movw	r20, r14
    a01a:	4f 5f       	subi	r20, 0xFF	; 255
    a01c:	5f 4f       	sbci	r21, 0xFF	; 255
    a01e:	65 e0       	ldi	r22, 0x05	; 5
    a020:	87 e0       	ldi	r24, 0x07	; 7
    a022:	8b 0d       	add	r24, r11
    a024:	0e 94 15 40 	call	0x802a	; 0x802a <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    a028:	49 e2       	ldi	r20, 0x29	; 41
    a02a:	65 e0       	ldi	r22, 0x05	; 5
    a02c:	70 e0       	ldi	r23, 0x00	; 0
    a02e:	c6 01       	movw	r24, r12
    a030:	0a 96       	adiw	r24, 0x0a	; 10
    a032:	0e 94 04 3f 	call	0x7e08	; 0x7e08 <PrintChar>
		MapSprite2(idx, map_none, 0);
    a036:	40 e0       	ldi	r20, 0x00	; 0
    a038:	6e ea       	ldi	r22, 0xAE	; 174
    a03a:	78 e2       	ldi	r23, 0x28	; 40
    a03c:	81 2f       	mov	r24, r17
    a03e:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    a042:	40 e0       	ldi	r20, 0x00	; 0
    a044:	6e ea       	ldi	r22, 0xAE	; 174
    a046:	78 e2       	ldi	r23, 0x28	; 40
    a048:	81 e0       	ldi	r24, 0x01	; 1
    a04a:	81 0f       	add	r24, r17
    a04c:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    a050:	f7 01       	movw	r30, r14
    a052:	60 81       	ld	r22, Z
    a054:	68 5f       	subi	r22, 0xF8	; 248
    a056:	23 e0       	ldi	r18, 0x03	; 3
    a058:	ae 01       	movw	r20, r28
    a05a:	4f 5f       	subi	r20, 0xFF	; 255
    a05c:	5f 4f       	sbci	r21, 0xFF	; 255
    a05e:	85 e0       	ldi	r24, 0x05	; 5
    a060:	8b 0d       	add	r24, r11
    a062:	0e 94 15 40 	call	0x802a	; 0x802a <LBPrintStr>
}
    a066:	0f 90       	pop	r0
    a068:	0f 90       	pop	r0
    a06a:	0f 90       	pop	r0
    a06c:	df 91       	pop	r29
    a06e:	cf 91       	pop	r28
    a070:	1f 91       	pop	r17
    a072:	0f 91       	pop	r16
    a074:	ff 90       	pop	r15
    a076:	ef 90       	pop	r14
    a078:	df 90       	pop	r13
    a07a:	cf 90       	pop	r12
    a07c:	bf 90       	pop	r11
    a07e:	af 90       	pop	r10
    a080:	08 95       	ret

0000a082 <load_handle_select>:

void load_handle_select()
{
    a082:	8f 92       	push	r8
    a084:	9f 92       	push	r9
    a086:	af 92       	push	r10
    a088:	bf 92       	push	r11
    a08a:	cf 92       	push	r12
    a08c:	df 92       	push	r13
    a08e:	ef 92       	push	r14
    a090:	ff 92       	push	r15
    a092:	0f 93       	push	r16
    a094:	1f 93       	push	r17
    a096:	cf 93       	push	r28
    a098:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    a09a:	82 e0       	ldi	r24, 0x02	; 2
    a09c:	80 93 31 0c 	sts	0x0C31, r24
	clear_sprites();
    a0a0:	0e 94 9c 42 	call	0x8538	; 0x8538 <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    a0a4:	40 e0       	ldi	r20, 0x00	; 0
    a0a6:	68 ea       	ldi	r22, 0xA8	; 168
    a0a8:	78 e2       	ldi	r23, 0x28	; 40
    a0aa:	80 e0       	ldi	r24, 0x00	; 0
    a0ac:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    a0b0:	40 e0       	ldi	r20, 0x00	; 0
    a0b2:	60 e9       	ldi	r22, 0x90	; 144
    a0b4:	78 e2       	ldi	r23, 0x28	; 40
    a0b6:	84 e0       	ldi	r24, 0x04	; 4
    a0b8:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    a0bc:	02 e0       	ldi	r16, 0x02	; 2
    a0be:	22 e0       	ldi	r18, 0x02	; 2
    a0c0:	40 e2       	ldi	r20, 0x20	; 32
    a0c2:	68 e1       	ldi	r22, 0x18	; 24
    a0c4:	80 e0       	ldi	r24, 0x00	; 0
    a0c6:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    a0ca:	22 e0       	ldi	r18, 0x02	; 2
    a0cc:	40 e2       	ldi	r20, 0x20	; 32
    a0ce:	60 ea       	ldi	r22, 0xA0	; 160
    a0d0:	84 e0       	ldi	r24, 0x04	; 4
    a0d2:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
	Print(9, 1, strHandlesTitle);
    a0d6:	45 ec       	ldi	r20, 0xC5	; 197
    a0d8:	5a e0       	ldi	r21, 0x0A	; 10
    a0da:	61 e0       	ldi	r22, 0x01	; 1
    a0dc:	70 e0       	ldi	r23, 0x00	; 0
    a0de:	89 e0       	ldi	r24, 0x09	; 9
    a0e0:	90 e0       	ldi	r25, 0x00	; 0
    a0e2:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(6, 5, strPlayer1);
    a0e6:	44 eb       	ldi	r20, 0xB4	; 180
    a0e8:	5a e0       	ldi	r21, 0x0A	; 10
    a0ea:	65 e0       	ldi	r22, 0x05	; 5
    a0ec:	70 e0       	ldi	r23, 0x00	; 0
    a0ee:	86 e0       	ldi	r24, 0x06	; 6
    a0f0:	90 e0       	ldi	r25, 0x00	; 0
    a0f2:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(23, 5, strPlayer2);
    a0f6:	41 eb       	ldi	r20, 0xB1	; 177
    a0f8:	5a e0       	ldi	r21, 0x0A	; 10
    a0fa:	65 e0       	ldi	r22, 0x05	; 5
    a0fc:	70 e0       	ldi	r23, 0x00	; 0
    a0fe:	87 e1       	ldi	r24, 0x17	; 23
    a100:	90 e0       	ldi	r25, 0x00	; 0
    a102:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
    a106:	86 e2       	ldi	r24, 0x26	; 38
    a108:	e8 2e       	mov	r14, r24
    a10a:	81 e0       	ldi	r24, 0x01	; 1
    a10c:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    a10e:	c0 e0       	ldi	r28, 0x00	; 0
    a110:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    a112:	93 e0       	ldi	r25, 0x03	; 3
    a114:	a9 2e       	mov	r10, r25
    a116:	b1 2c       	mov	r11, r1
    a118:	67 01       	movw	r12, r14
    a11a:	ce 01       	movw	r24, r28
    a11c:	b5 01       	movw	r22, r10
    a11e:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <__divmodhi4>
    a122:	4c 01       	movw	r8, r24
    a124:	8b 01       	movw	r16, r22
    a126:	08 5f       	subi	r16, 0xF8	; 248
    a128:	1f 4f       	sbci	r17, 0xFF	; 255
    a12a:	f7 01       	movw	r30, r14
    a12c:	41 91       	ld	r20, Z+
    a12e:	7f 01       	movw	r14, r30
    a130:	b8 01       	movw	r22, r16
    a132:	03 96       	adiw	r24, 0x03	; 3
    a134:	0e 94 04 3f 	call	0x7e08	; 0x7e08 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    a138:	f6 01       	movw	r30, r12
    a13a:	40 81       	ld	r20, Z
    a13c:	b8 01       	movw	r22, r16
    a13e:	c4 01       	movw	r24, r8
    a140:	44 96       	adiw	r24, 0x14	; 20
    a142:	0e 94 04 3f 	call	0x7e08	; 0x7e08 <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, strHandlesTitle);
	Print(6, 5, strPlayer1);
	Print(23, 5, strPlayer2);
	for (int i = 0; i < 27; i += 1)
    a146:	21 96       	adiw	r28, 0x01	; 1
    a148:	cb 31       	cpi	r28, 0x1B	; 27
    a14a:	d1 05       	cpc	r29, r1
    a14c:	29 f7       	brne	.-54     	; 0xa118 <load_handle_select+0x96>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
    a14e:	46 ea       	ldi	r20, 0xA6	; 166
    a150:	5a e0       	ldi	r21, 0x0A	; 10
    a152:	65 e1       	ldi	r22, 0x15	; 21
    a154:	70 e0       	ldi	r23, 0x00	; 0
    a156:	88 e0       	ldi	r24, 0x08	; 8
    a158:	90 e0       	ldi	r25, 0x00	; 0
    a15a:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(8, 22, strConfirmHandle);
    a15e:	4a e9       	ldi	r20, 0x9A	; 154
    a160:	5a e0       	ldi	r21, 0x0A	; 10
    a162:	66 e1       	ldi	r22, 0x16	; 22
    a164:	70 e0       	ldi	r23, 0x00	; 0
    a166:	88 e0       	ldi	r24, 0x08	; 8
    a168:	90 e0       	ldi	r25, 0x00	; 0
    a16a:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(8, 23, strCancelHandle);
    a16e:	4f e8       	ldi	r20, 0x8F	; 143
    a170:	5a e0       	ldi	r21, 0x0A	; 10
    a172:	67 e1       	ldi	r22, 0x17	; 23
    a174:	70 e0       	ldi	r23, 0x00	; 0
    a176:	88 e0       	ldi	r24, 0x08	; 8
    a178:	90 e0       	ldi	r25, 0x00	; 0
    a17a:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>
	Print(8, 24, strChangeHandle);
    a17e:	40 e8       	ldi	r20, 0x80	; 128
    a180:	5a e0       	ldi	r21, 0x0A	; 10
    a182:	68 e1       	ldi	r22, 0x18	; 24
    a184:	70 e0       	ldi	r23, 0x00	; 0
    a186:	88 e0       	ldi	r24, 0x08	; 8
    a188:	90 e0       	ldi	r25, 0x00	; 0
}
    a18a:	df 91       	pop	r29
    a18c:	cf 91       	pop	r28
    a18e:	1f 91       	pop	r17
    a190:	0f 91       	pop	r16
    a192:	ff 90       	pop	r15
    a194:	ef 90       	pop	r14
    a196:	df 90       	pop	r13
    a198:	cf 90       	pop	r12
    a19a:	bf 90       	pop	r11
    a19c:	af 90       	pop	r10
    a19e:	9f 90       	pop	r9
    a1a0:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
	Print(8, 22, strConfirmHandle);
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
    a1a2:	0c 94 e9 3e 	jmp	0x7dd2	; 0x7dd2 <Print>

0000a1a6 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    a1a6:	0f 93       	push	r16
    a1a8:	cf 93       	push	r28
    a1aa:	df 93       	push	r29
    a1ac:	ec 01       	movw	r28, r24
	// Render
	switch (game.selection)
    a1ae:	90 91 34 0c 	lds	r25, 0x0C34
    a1b2:	91 30       	cpi	r25, 0x01	; 1
    a1b4:	41 f0       	breq	.+16     	; 0xa1c6 <update_splash+0x20>
    a1b6:	92 30       	cpi	r25, 0x02	; 2
    a1b8:	51 f0       	breq	.+20     	; 0xa1ce <update_splash+0x28>
    a1ba:	91 11       	cpse	r25, r1
    a1bc:	0f c0       	rjmp	.+30     	; 0xa1dc <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    a1be:	01 e0       	ldi	r16, 0x01	; 1
    a1c0:	21 e0       	ldi	r18, 0x01	; 1
    a1c2:	48 e6       	ldi	r20, 0x68	; 104
    a1c4:	07 c0       	rjmp	.+14     	; 0xa1d4 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    a1c6:	01 e0       	ldi	r16, 0x01	; 1
    a1c8:	21 e0       	ldi	r18, 0x01	; 1
    a1ca:	40 e7       	ldi	r20, 0x70	; 112
    a1cc:	03 c0       	rjmp	.+6      	; 0xa1d4 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    a1ce:	01 e0       	ldi	r16, 0x01	; 1
    a1d0:	21 e0       	ldi	r18, 0x01	; 1
    a1d2:	48 e7       	ldi	r20, 0x78	; 120
    a1d4:	60 e3       	ldi	r22, 0x30	; 48
    a1d6:	80 e0       	ldi	r24, 0x00	; 0
    a1d8:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <MoveSprite>
			break;
	}
	Print(9, 21, strSelectHandle);
    a1dc:	46 ea       	ldi	r20, 0xA6	; 166
    a1de:	5a e0       	ldi	r21, 0x0A	; 10
    a1e0:	65 e1       	ldi	r22, 0x15	; 21
    a1e2:	70 e0       	ldi	r23, 0x00	; 0
    a1e4:	89 e0       	ldi	r24, 0x09	; 9
    a1e6:	90 e0       	ldi	r25, 0x00	; 0
    a1e8:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <Print>

	// Update
	if (p1->pressed & BTN_UP)
    a1ec:	88 81       	ld	r24, Y
    a1ee:	99 81       	ldd	r25, Y+1	; 0x01
    a1f0:	84 ff       	sbrs	r24, 4
    a1f2:	08 c0       	rjmp	.+16     	; 0xa204 <update_splash+0x5e>
	{
		game.selection--;
    a1f4:	80 91 34 0c 	lds	r24, 0x0C34
    a1f8:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    a1fa:	87 ff       	sbrs	r24, 7
    a1fc:	0b c0       	rjmp	.+22     	; 0xa214 <update_splash+0x6e>
    a1fe:	10 92 34 0c 	sts	0x0C34, r1
    a202:	2d c0       	rjmp	.+90     	; 0xa25e <update_splash+0xb8>
	}
	else if (p1->pressed & BTN_DOWN)
    a204:	85 ff       	sbrs	r24, 5
    a206:	09 c0       	rjmp	.+18     	; 0xa21a <update_splash+0x74>
	{
		game.selection++;
    a208:	80 91 34 0c 	lds	r24, 0x0C34
    a20c:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    a20e:	83 30       	cpi	r24, 0x03	; 3
    a210:	0c f0       	brlt	.+2      	; 0xa214 <update_splash+0x6e>
    a212:	82 e0       	ldi	r24, 0x02	; 2
    a214:	80 93 34 0c 	sts	0x0C34, r24
    a218:	22 c0       	rjmp	.+68     	; 0xa25e <update_splash+0xb8>
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    a21a:	90 ff       	sbrs	r25, 0
    a21c:	20 c0       	rjmp	.+64     	; 0xa25e <update_splash+0xb8>
    a21e:	80 91 34 0c 	lds	r24, 0x0C34
    a222:	82 30       	cpi	r24, 0x02	; 2
    a224:	78 f4       	brcc	.+30     	; 0xa244 <update_splash+0x9e>
	{
		p1s.select_state = SELECTING;
    a226:	10 92 b5 0b 	sts	0x0BB5, r1
		p2s.select_state = SELECTING;
    a22a:	10 92 af 0b 	sts	0x0BAF, r1
		fade_through();
    a22e:	0e 94 92 42 	call	0x8524	; 0x8524 <fade_through>
		load_eeprom(&handles);
    a232:	84 e2       	ldi	r24, 0x24	; 36
    a234:	91 e0       	ldi	r25, 0x01	; 1
    a236:	0e 94 80 42 	call	0x8500	; 0x8500 <load_eeprom>
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    a23a:	df 91       	pop	r29
    a23c:	cf 91       	pop	r28
    a23e:	0f 91       	pop	r16
	{
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    a240:	0c 94 41 50 	jmp	0xa082	; 0xa082 <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    a244:	82 30       	cpi	r24, 0x02	; 2
    a246:	59 f4       	brne	.+22     	; 0xa25e <update_splash+0xb8>
	{
		fade_through();
    a248:	0e 94 92 42 	call	0x8524	; 0x8524 <fade_through>
		load_eeprom(&scores);
    a24c:	84 e0       	ldi	r24, 0x04	; 4
    a24e:	91 e0       	ldi	r25, 0x01	; 1
    a250:	0e 94 80 42 	call	0x8500	; 0x8500 <load_eeprom>
		load_tank_rank();
		return;
	}
}
    a254:	df 91       	pop	r29
    a256:	cf 91       	pop	r28
    a258:	0f 91       	pop	r16
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    a25a:	0c 94 dc 4b 	jmp	0x97b8	; 0x97b8 <load_tank_rank>
		return;
	}
}
    a25e:	df 91       	pop	r29
    a260:	cf 91       	pop	r28
    a262:	0f 91       	pop	r16
    a264:	08 95       	ret

0000a266 <update_handle_select>:
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    a266:	0f 93       	push	r16
    a268:	1f 93       	push	r17
    a26a:	cf 93       	push	r28
    a26c:	df 93       	push	r29
    a26e:	8c 01       	movw	r16, r24
    a270:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    a272:	28 e0       	ldi	r18, 0x08	; 8
    a274:	42 e0       	ldi	r20, 0x02	; 2
    a276:	bc 01       	movw	r22, r24
    a278:	80 eb       	ldi	r24, 0xB0	; 176
    a27a:	9b e0       	ldi	r25, 0x0B	; 11
    a27c:	0e 94 83 4f 	call	0x9f06	; 0x9f06 <_handle_select_render_helper>
	if (game.selection == PVP)
    a280:	80 91 34 0c 	lds	r24, 0x0C34
    a284:	81 30       	cpi	r24, 0x01	; 1
    a286:	39 f4       	brne	.+14     	; 0xa296 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 10);
    a288:	2a e0       	ldi	r18, 0x0A	; 10
    a28a:	43 e1       	ldi	r20, 0x13	; 19
    a28c:	be 01       	movw	r22, r28
    a28e:	8a ea       	ldi	r24, 0xAA	; 170
    a290:	9b e0       	ldi	r25, 0x0B	; 11
    a292:	0e 94 83 4f 	call	0x9f06	; 0x9f06 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    a296:	4e e4       	ldi	r20, 0x4E	; 78
    a298:	5c e0       	ldi	r21, 0x0C	; 12
    a29a:	b8 01       	movw	r22, r16
    a29c:	80 eb       	ldi	r24, 0xB0	; 176
    a29e:	9b e0       	ldi	r25, 0x0B	; 11
    a2a0:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    a2a4:	10 91 b5 0b 	lds	r17, 0x0BB5
	if (game.selection == PVP)
    a2a8:	80 91 34 0c 	lds	r24, 0x0C34
    a2ac:	81 30       	cpi	r24, 0x01	; 1
    a2ae:	19 f0       	breq	.+6      	; 0xa2b6 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    a2b0:	12 30       	cpi	r17, 0x02	; 2
    a2b2:	69 f0       	breq	.+26     	; 0xa2ce <update_handle_select+0x68>
    a2b4:	21 c0       	rjmp	.+66     	; 0xa2f8 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    a2b6:	4f eb       	ldi	r20, 0xBF	; 191
    a2b8:	5f e0       	ldi	r21, 0x0F	; 15
    a2ba:	be 01       	movw	r22, r28
    a2bc:	8a ea       	ldi	r24, 0xAA	; 170
    a2be:	9b e0       	ldi	r25, 0x0B	; 11
    a2c0:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    a2c4:	80 91 af 0b 	lds	r24, 0x0BAF
    a2c8:	82 30       	cpi	r24, 0x02	; 2
    a2ca:	b1 f4       	brne	.+44     	; 0xa2f8 <update_handle_select+0x92>
    a2cc:	f1 cf       	rjmp	.-30     	; 0xa2b0 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    a2ce:	80 91 34 0c 	lds	r24, 0x0C34
    a2d2:	81 11       	cpse	r24, r1
    a2d4:	0a c0       	rjmp	.+20     	; 0xa2ea <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    a2d6:	89 e0       	ldi	r24, 0x09	; 9
    a2d8:	80 93 c9 0f 	sts	0x0FC9, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    a2dc:	43 e0       	ldi	r20, 0x03	; 3
    a2de:	61 e4       	ldi	r22, 0x41	; 65
    a2e0:	71 e0       	ldi	r23, 0x01	; 1
    a2e2:	8a ec       	ldi	r24, 0xCA	; 202
    a2e4:	9f e0       	ldi	r25, 0x0F	; 15
    a2e6:	0e 94 09 40 	call	0x8012	; 0x8012 <LBCopyChars>
		}
		level_transition(0);
    a2ea:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    a2ec:	df 91       	pop	r29
    a2ee:	cf 91       	pop	r28
    a2f0:	1f 91       	pop	r17
    a2f2:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    a2f4:	0c 94 80 4b 	jmp	0x9700	; 0x9700 <level_transition>
	}
}
    a2f8:	df 91       	pop	r29
    a2fa:	cf 91       	pop	r28
    a2fc:	1f 91       	pop	r17
    a2fe:	0f 91       	pop	r16
    a300:	08 95       	ret

0000a302 <main>:

int main()
{
	// Initialize
	SetMasterVolume(0);
    a302:	80 e0       	ldi	r24, 0x00	; 0
    a304:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <SetMasterVolume>
	StopSong();
    a308:	0e 94 21 33 	call	0x6642	; 0x6642 <StopSong>
	SetTileTable(tiles_data);
    a30c:	82 e7       	ldi	r24, 0x72	; 114
    a30e:	95 e3       	ldi	r25, 0x35	; 53
    a310:	0e 94 ff 30 	call	0x61fe	; 0x61fe <SetTileTable>
	SetSpritesTileTable(sprites_data);
    a314:	82 e7       	ldi	r24, 0x72	; 114
    a316:	99 e2       	ldi	r25, 0x29	; 41
    a318:	0e 94 db 30 	call	0x61b6	; 0x61b6 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    a31c:	8f e2       	ldi	r24, 0x2F	; 47
    a31e:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    a322:	60 e0       	ldi	r22, 0x00	; 0
    a324:	83 e0       	ldi	r24, 0x03	; 3
    a326:	0e 94 63 3f 	call	0x7ec6	; 0x7ec6 <FadeIn>
	init_game_state();
    a32a:	0e 94 4e 42 	call	0x849c	; 0x849c <init_game_state>
	init_tile_animations(&tile_animations);
    a32e:	85 e3       	ldi	r24, 0x35	; 53
    a330:	9c e0       	ldi	r25, 0x0C	; 12
    a332:	0e 94 72 41 	call	0x82e4	; 0x82e4 <init_tile_animations>
	load_splash();
    a336:	0e 94 ac 4b 	call	0x9758	; 0x9758 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    a33a:	81 e0       	ldi	r24, 0x01	; 1
    a33c:	90 e0       	ldi	r25, 0x00	; 0
    a33e:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    a342:	6b e2       	ldi	r22, 0x2B	; 43
    a344:	7c e0       	ldi	r23, 0x0C	; 12
    a346:	8a ec       	ldi	r24, 0xCA	; 202
    a348:	9c e0       	ldi	r25, 0x0C	; 12
    a34a:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <LBGetJoyPadState>
		switch (game.current_screen)
    a34e:	80 91 31 0c 	lds	r24, 0x0C31
    a352:	81 30       	cpi	r24, 0x01	; 1
    a354:	99 f0       	breq	.+38     	; 0xa37c <main+0x7a>
    a356:	58 f0       	brcs	.+22     	; 0xa36e <main+0x6c>
    a358:	82 30       	cpi	r24, 0x02	; 2
    a35a:	b9 f0       	breq	.+46     	; 0xa38a <main+0x88>
    a35c:	83 30       	cpi	r24, 0x03	; 3
    a35e:	69 f7       	brne	.-38     	; 0xa33a <main+0x38>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				/* p2 should be replaced by AI input for Player v CPU */
				update_level(&p1, &p2);
    a360:	6b e2       	ldi	r22, 0x2B	; 43
    a362:	7c e0       	ldi	r23, 0x0C	; 12
    a364:	8a ec       	ldi	r24, 0xCA	; 202
    a366:	9c e0       	ldi	r25, 0x0C	; 12
    a368:	0e 94 37 4e 	call	0x9c6e	; 0x9c6e <update_level>
				break;
    a36c:	e6 cf       	rjmp	.-52     	; 0xa33a <main+0x38>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    a36e:	6b e2       	ldi	r22, 0x2B	; 43
    a370:	7c e0       	ldi	r23, 0x0C	; 12
    a372:	8a ec       	ldi	r24, 0xCA	; 202
    a374:	9c e0       	ldi	r25, 0x0C	; 12
    a376:	0e 94 d3 50 	call	0xa1a6	; 0xa1a6 <update_splash>
				break;
    a37a:	df cf       	rjmp	.-66     	; 0xa33a <main+0x38>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    a37c:	6b e2       	ldi	r22, 0x2B	; 43
    a37e:	7c e0       	ldi	r23, 0x0C	; 12
    a380:	8a ec       	ldi	r24, 0xCA	; 202
    a382:	9c e0       	ldi	r25, 0x0C	; 12
    a384:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <update_tank_rank>
				break;
    a388:	d8 cf       	rjmp	.-80     	; 0xa33a <main+0x38>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    a38a:	6b e2       	ldi	r22, 0x2B	; 43
    a38c:	7c e0       	ldi	r23, 0x0C	; 12
    a38e:	8a ec       	ldi	r24, 0xCA	; 202
    a390:	9c e0       	ldi	r25, 0x0C	; 12
    a392:	0e 94 33 51 	call	0xa266	; 0xa266 <update_handle_select>
				break;
    a396:	d1 cf       	rjmp	.-94     	; 0xa33a <main+0x38>

0000a398 <__udivmodqi4>:
    a398:	99 1b       	sub	r25, r25
    a39a:	79 e0       	ldi	r23, 0x09	; 9
    a39c:	04 c0       	rjmp	.+8      	; 0xa3a6 <__udivmodqi4_ep>

0000a39e <__udivmodqi4_loop>:
    a39e:	99 1f       	adc	r25, r25
    a3a0:	96 17       	cp	r25, r22
    a3a2:	08 f0       	brcs	.+2      	; 0xa3a6 <__udivmodqi4_ep>
    a3a4:	96 1b       	sub	r25, r22

0000a3a6 <__udivmodqi4_ep>:
    a3a6:	88 1f       	adc	r24, r24
    a3a8:	7a 95       	dec	r23
    a3aa:	c9 f7       	brne	.-14     	; 0xa39e <__udivmodqi4_loop>
    a3ac:	80 95       	com	r24
    a3ae:	08 95       	ret

0000a3b0 <__udivmodhi4>:
    a3b0:	aa 1b       	sub	r26, r26
    a3b2:	bb 1b       	sub	r27, r27
    a3b4:	51 e1       	ldi	r21, 0x11	; 17
    a3b6:	07 c0       	rjmp	.+14     	; 0xa3c6 <__udivmodhi4_ep>

0000a3b8 <__udivmodhi4_loop>:
    a3b8:	aa 1f       	adc	r26, r26
    a3ba:	bb 1f       	adc	r27, r27
    a3bc:	a6 17       	cp	r26, r22
    a3be:	b7 07       	cpc	r27, r23
    a3c0:	10 f0       	brcs	.+4      	; 0xa3c6 <__udivmodhi4_ep>
    a3c2:	a6 1b       	sub	r26, r22
    a3c4:	b7 0b       	sbc	r27, r23

0000a3c6 <__udivmodhi4_ep>:
    a3c6:	88 1f       	adc	r24, r24
    a3c8:	99 1f       	adc	r25, r25
    a3ca:	5a 95       	dec	r21
    a3cc:	a9 f7       	brne	.-22     	; 0xa3b8 <__udivmodhi4_loop>
    a3ce:	80 95       	com	r24
    a3d0:	90 95       	com	r25
    a3d2:	bc 01       	movw	r22, r24
    a3d4:	cd 01       	movw	r24, r26
    a3d6:	08 95       	ret

0000a3d8 <__divmodhi4>:
    a3d8:	97 fb       	bst	r25, 7
    a3da:	07 2e       	mov	r0, r23
    a3dc:	16 f4       	brtc	.+4      	; 0xa3e2 <__divmodhi4+0xa>
    a3de:	00 94       	com	r0
    a3e0:	07 d0       	rcall	.+14     	; 0xa3f0 <__divmodhi4_neg1>
    a3e2:	77 fd       	sbrc	r23, 7
    a3e4:	09 d0       	rcall	.+18     	; 0xa3f8 <__divmodhi4_neg2>
    a3e6:	0e 94 d8 51 	call	0xa3b0	; 0xa3b0 <__udivmodhi4>
    a3ea:	07 fc       	sbrc	r0, 7
    a3ec:	05 d0       	rcall	.+10     	; 0xa3f8 <__divmodhi4_neg2>
    a3ee:	3e f4       	brtc	.+14     	; 0xa3fe <__divmodhi4_exit>

0000a3f0 <__divmodhi4_neg1>:
    a3f0:	90 95       	com	r25
    a3f2:	81 95       	neg	r24
    a3f4:	9f 4f       	sbci	r25, 0xFF	; 255
    a3f6:	08 95       	ret

0000a3f8 <__divmodhi4_neg2>:
    a3f8:	70 95       	com	r23
    a3fa:	61 95       	neg	r22
    a3fc:	7f 4f       	sbci	r23, 0xFF	; 255

0000a3fe <__divmodhi4_exit>:
    a3fe:	08 95       	ret

0000a400 <__tablejump2__>:
    a400:	ee 0f       	add	r30, r30
    a402:	ff 1f       	adc	r31, r31
    a404:	05 90       	lpm	r0, Z+
    a406:	f4 91       	lpm	r31, Z
    a408:	e0 2d       	mov	r30, r0
    a40a:	09 94       	ijmp

0000a40c <__subsf3>:
    a40c:	50 58       	subi	r21, 0x80	; 128

0000a40e <__addsf3>:
    a40e:	bb 27       	eor	r27, r27
    a410:	aa 27       	eor	r26, r26
    a412:	0e d0       	rcall	.+28     	; 0xa430 <__addsf3x>
    a414:	70 c1       	rjmp	.+736    	; 0xa6f6 <__fp_round>
    a416:	61 d1       	rcall	.+706    	; 0xa6da <__fp_pscA>
    a418:	30 f0       	brcs	.+12     	; 0xa426 <__addsf3+0x18>
    a41a:	66 d1       	rcall	.+716    	; 0xa6e8 <__fp_pscB>
    a41c:	20 f0       	brcs	.+8      	; 0xa426 <__addsf3+0x18>
    a41e:	31 f4       	brne	.+12     	; 0xa42c <__addsf3+0x1e>
    a420:	9f 3f       	cpi	r25, 0xFF	; 255
    a422:	11 f4       	brne	.+4      	; 0xa428 <__addsf3+0x1a>
    a424:	1e f4       	brtc	.+6      	; 0xa42c <__addsf3+0x1e>
    a426:	56 c1       	rjmp	.+684    	; 0xa6d4 <__fp_nan>
    a428:	0e f4       	brtc	.+2      	; 0xa42c <__addsf3+0x1e>
    a42a:	e0 95       	com	r30
    a42c:	e7 fb       	bst	r30, 7
    a42e:	4c c1       	rjmp	.+664    	; 0xa6c8 <__fp_inf>

0000a430 <__addsf3x>:
    a430:	e9 2f       	mov	r30, r25
    a432:	72 d1       	rcall	.+740    	; 0xa718 <__fp_split3>
    a434:	80 f3       	brcs	.-32     	; 0xa416 <__addsf3+0x8>
    a436:	ba 17       	cp	r27, r26
    a438:	62 07       	cpc	r22, r18
    a43a:	73 07       	cpc	r23, r19
    a43c:	84 07       	cpc	r24, r20
    a43e:	95 07       	cpc	r25, r21
    a440:	18 f0       	brcs	.+6      	; 0xa448 <__addsf3x+0x18>
    a442:	71 f4       	brne	.+28     	; 0xa460 <__addsf3x+0x30>
    a444:	9e f5       	brtc	.+102    	; 0xa4ac <__addsf3x+0x7c>
    a446:	8a c1       	rjmp	.+788    	; 0xa75c <__fp_zero>
    a448:	0e f4       	brtc	.+2      	; 0xa44c <__addsf3x+0x1c>
    a44a:	e0 95       	com	r30
    a44c:	0b 2e       	mov	r0, r27
    a44e:	ba 2f       	mov	r27, r26
    a450:	a0 2d       	mov	r26, r0
    a452:	0b 01       	movw	r0, r22
    a454:	b9 01       	movw	r22, r18
    a456:	90 01       	movw	r18, r0
    a458:	0c 01       	movw	r0, r24
    a45a:	ca 01       	movw	r24, r20
    a45c:	a0 01       	movw	r20, r0
    a45e:	11 24       	eor	r1, r1
    a460:	ff 27       	eor	r31, r31
    a462:	59 1b       	sub	r21, r25
    a464:	99 f0       	breq	.+38     	; 0xa48c <__addsf3x+0x5c>
    a466:	59 3f       	cpi	r21, 0xF9	; 249
    a468:	50 f4       	brcc	.+20     	; 0xa47e <__addsf3x+0x4e>
    a46a:	50 3e       	cpi	r21, 0xE0	; 224
    a46c:	68 f1       	brcs	.+90     	; 0xa4c8 <__addsf3x+0x98>
    a46e:	1a 16       	cp	r1, r26
    a470:	f0 40       	sbci	r31, 0x00	; 0
    a472:	a2 2f       	mov	r26, r18
    a474:	23 2f       	mov	r18, r19
    a476:	34 2f       	mov	r19, r20
    a478:	44 27       	eor	r20, r20
    a47a:	58 5f       	subi	r21, 0xF8	; 248
    a47c:	f3 cf       	rjmp	.-26     	; 0xa464 <__addsf3x+0x34>
    a47e:	46 95       	lsr	r20
    a480:	37 95       	ror	r19
    a482:	27 95       	ror	r18
    a484:	a7 95       	ror	r26
    a486:	f0 40       	sbci	r31, 0x00	; 0
    a488:	53 95       	inc	r21
    a48a:	c9 f7       	brne	.-14     	; 0xa47e <__addsf3x+0x4e>
    a48c:	7e f4       	brtc	.+30     	; 0xa4ac <__addsf3x+0x7c>
    a48e:	1f 16       	cp	r1, r31
    a490:	ba 0b       	sbc	r27, r26
    a492:	62 0b       	sbc	r22, r18
    a494:	73 0b       	sbc	r23, r19
    a496:	84 0b       	sbc	r24, r20
    a498:	ba f0       	brmi	.+46     	; 0xa4c8 <__addsf3x+0x98>
    a49a:	91 50       	subi	r25, 0x01	; 1
    a49c:	a1 f0       	breq	.+40     	; 0xa4c6 <__addsf3x+0x96>
    a49e:	ff 0f       	add	r31, r31
    a4a0:	bb 1f       	adc	r27, r27
    a4a2:	66 1f       	adc	r22, r22
    a4a4:	77 1f       	adc	r23, r23
    a4a6:	88 1f       	adc	r24, r24
    a4a8:	c2 f7       	brpl	.-16     	; 0xa49a <__addsf3x+0x6a>
    a4aa:	0e c0       	rjmp	.+28     	; 0xa4c8 <__addsf3x+0x98>
    a4ac:	ba 0f       	add	r27, r26
    a4ae:	62 1f       	adc	r22, r18
    a4b0:	73 1f       	adc	r23, r19
    a4b2:	84 1f       	adc	r24, r20
    a4b4:	48 f4       	brcc	.+18     	; 0xa4c8 <__addsf3x+0x98>
    a4b6:	87 95       	ror	r24
    a4b8:	77 95       	ror	r23
    a4ba:	67 95       	ror	r22
    a4bc:	b7 95       	ror	r27
    a4be:	f7 95       	ror	r31
    a4c0:	9e 3f       	cpi	r25, 0xFE	; 254
    a4c2:	08 f0       	brcs	.+2      	; 0xa4c6 <__addsf3x+0x96>
    a4c4:	b3 cf       	rjmp	.-154    	; 0xa42c <__addsf3+0x1e>
    a4c6:	93 95       	inc	r25
    a4c8:	88 0f       	add	r24, r24
    a4ca:	08 f0       	brcs	.+2      	; 0xa4ce <__addsf3x+0x9e>
    a4cc:	99 27       	eor	r25, r25
    a4ce:	ee 0f       	add	r30, r30
    a4d0:	97 95       	ror	r25
    a4d2:	87 95       	ror	r24
    a4d4:	08 95       	ret

0000a4d6 <__cmpsf2>:
    a4d6:	d4 d0       	rcall	.+424    	; 0xa680 <__fp_cmp>
    a4d8:	08 f4       	brcc	.+2      	; 0xa4dc <__cmpsf2+0x6>
    a4da:	81 e0       	ldi	r24, 0x01	; 1
    a4dc:	08 95       	ret

0000a4de <__divsf3>:
    a4de:	0c d0       	rcall	.+24     	; 0xa4f8 <__divsf3x>
    a4e0:	0a c1       	rjmp	.+532    	; 0xa6f6 <__fp_round>
    a4e2:	02 d1       	rcall	.+516    	; 0xa6e8 <__fp_pscB>
    a4e4:	40 f0       	brcs	.+16     	; 0xa4f6 <__divsf3+0x18>
    a4e6:	f9 d0       	rcall	.+498    	; 0xa6da <__fp_pscA>
    a4e8:	30 f0       	brcs	.+12     	; 0xa4f6 <__divsf3+0x18>
    a4ea:	21 f4       	brne	.+8      	; 0xa4f4 <__divsf3+0x16>
    a4ec:	5f 3f       	cpi	r21, 0xFF	; 255
    a4ee:	19 f0       	breq	.+6      	; 0xa4f6 <__divsf3+0x18>
    a4f0:	eb c0       	rjmp	.+470    	; 0xa6c8 <__fp_inf>
    a4f2:	51 11       	cpse	r21, r1
    a4f4:	34 c1       	rjmp	.+616    	; 0xa75e <__fp_szero>
    a4f6:	ee c0       	rjmp	.+476    	; 0xa6d4 <__fp_nan>

0000a4f8 <__divsf3x>:
    a4f8:	0f d1       	rcall	.+542    	; 0xa718 <__fp_split3>
    a4fa:	98 f3       	brcs	.-26     	; 0xa4e2 <__divsf3+0x4>

0000a4fc <__divsf3_pse>:
    a4fc:	99 23       	and	r25, r25
    a4fe:	c9 f3       	breq	.-14     	; 0xa4f2 <__divsf3+0x14>
    a500:	55 23       	and	r21, r21
    a502:	b1 f3       	breq	.-20     	; 0xa4f0 <__divsf3+0x12>
    a504:	95 1b       	sub	r25, r21
    a506:	55 0b       	sbc	r21, r21
    a508:	bb 27       	eor	r27, r27
    a50a:	aa 27       	eor	r26, r26
    a50c:	62 17       	cp	r22, r18
    a50e:	73 07       	cpc	r23, r19
    a510:	84 07       	cpc	r24, r20
    a512:	38 f0       	brcs	.+14     	; 0xa522 <__divsf3_pse+0x26>
    a514:	9f 5f       	subi	r25, 0xFF	; 255
    a516:	5f 4f       	sbci	r21, 0xFF	; 255
    a518:	22 0f       	add	r18, r18
    a51a:	33 1f       	adc	r19, r19
    a51c:	44 1f       	adc	r20, r20
    a51e:	aa 1f       	adc	r26, r26
    a520:	a9 f3       	breq	.-22     	; 0xa50c <__divsf3_pse+0x10>
    a522:	33 d0       	rcall	.+102    	; 0xa58a <__divsf3_pse+0x8e>
    a524:	0e 2e       	mov	r0, r30
    a526:	3a f0       	brmi	.+14     	; 0xa536 <__divsf3_pse+0x3a>
    a528:	e0 e8       	ldi	r30, 0x80	; 128
    a52a:	30 d0       	rcall	.+96     	; 0xa58c <__divsf3_pse+0x90>
    a52c:	91 50       	subi	r25, 0x01	; 1
    a52e:	50 40       	sbci	r21, 0x00	; 0
    a530:	e6 95       	lsr	r30
    a532:	00 1c       	adc	r0, r0
    a534:	ca f7       	brpl	.-14     	; 0xa528 <__divsf3_pse+0x2c>
    a536:	29 d0       	rcall	.+82     	; 0xa58a <__divsf3_pse+0x8e>
    a538:	fe 2f       	mov	r31, r30
    a53a:	27 d0       	rcall	.+78     	; 0xa58a <__divsf3_pse+0x8e>
    a53c:	66 0f       	add	r22, r22
    a53e:	77 1f       	adc	r23, r23
    a540:	88 1f       	adc	r24, r24
    a542:	bb 1f       	adc	r27, r27
    a544:	26 17       	cp	r18, r22
    a546:	37 07       	cpc	r19, r23
    a548:	48 07       	cpc	r20, r24
    a54a:	ab 07       	cpc	r26, r27
    a54c:	b0 e8       	ldi	r27, 0x80	; 128
    a54e:	09 f0       	breq	.+2      	; 0xa552 <__divsf3_pse+0x56>
    a550:	bb 0b       	sbc	r27, r27
    a552:	80 2d       	mov	r24, r0
    a554:	bf 01       	movw	r22, r30
    a556:	ff 27       	eor	r31, r31
    a558:	93 58       	subi	r25, 0x83	; 131
    a55a:	5f 4f       	sbci	r21, 0xFF	; 255
    a55c:	2a f0       	brmi	.+10     	; 0xa568 <__divsf3_pse+0x6c>
    a55e:	9e 3f       	cpi	r25, 0xFE	; 254
    a560:	51 05       	cpc	r21, r1
    a562:	68 f0       	brcs	.+26     	; 0xa57e <__divsf3_pse+0x82>
    a564:	b1 c0       	rjmp	.+354    	; 0xa6c8 <__fp_inf>
    a566:	fb c0       	rjmp	.+502    	; 0xa75e <__fp_szero>
    a568:	5f 3f       	cpi	r21, 0xFF	; 255
    a56a:	ec f3       	brlt	.-6      	; 0xa566 <__divsf3_pse+0x6a>
    a56c:	98 3e       	cpi	r25, 0xE8	; 232
    a56e:	dc f3       	brlt	.-10     	; 0xa566 <__divsf3_pse+0x6a>
    a570:	86 95       	lsr	r24
    a572:	77 95       	ror	r23
    a574:	67 95       	ror	r22
    a576:	b7 95       	ror	r27
    a578:	f7 95       	ror	r31
    a57a:	9f 5f       	subi	r25, 0xFF	; 255
    a57c:	c9 f7       	brne	.-14     	; 0xa570 <__divsf3_pse+0x74>
    a57e:	88 0f       	add	r24, r24
    a580:	91 1d       	adc	r25, r1
    a582:	96 95       	lsr	r25
    a584:	87 95       	ror	r24
    a586:	97 f9       	bld	r25, 7
    a588:	08 95       	ret
    a58a:	e1 e0       	ldi	r30, 0x01	; 1
    a58c:	66 0f       	add	r22, r22
    a58e:	77 1f       	adc	r23, r23
    a590:	88 1f       	adc	r24, r24
    a592:	bb 1f       	adc	r27, r27
    a594:	62 17       	cp	r22, r18
    a596:	73 07       	cpc	r23, r19
    a598:	84 07       	cpc	r24, r20
    a59a:	ba 07       	cpc	r27, r26
    a59c:	20 f0       	brcs	.+8      	; 0xa5a6 <__divsf3_pse+0xaa>
    a59e:	62 1b       	sub	r22, r18
    a5a0:	73 0b       	sbc	r23, r19
    a5a2:	84 0b       	sbc	r24, r20
    a5a4:	ba 0b       	sbc	r27, r26
    a5a6:	ee 1f       	adc	r30, r30
    a5a8:	88 f7       	brcc	.-30     	; 0xa58c <__divsf3_pse+0x90>
    a5aa:	e0 95       	com	r30
    a5ac:	08 95       	ret

0000a5ae <__fixunssfsi>:
    a5ae:	bc d0       	rcall	.+376    	; 0xa728 <__fp_splitA>
    a5b0:	88 f0       	brcs	.+34     	; 0xa5d4 <__fixunssfsi+0x26>
    a5b2:	9f 57       	subi	r25, 0x7F	; 127
    a5b4:	90 f0       	brcs	.+36     	; 0xa5da <__fixunssfsi+0x2c>
    a5b6:	b9 2f       	mov	r27, r25
    a5b8:	99 27       	eor	r25, r25
    a5ba:	b7 51       	subi	r27, 0x17	; 23
    a5bc:	a0 f0       	brcs	.+40     	; 0xa5e6 <__fixunssfsi+0x38>
    a5be:	d1 f0       	breq	.+52     	; 0xa5f4 <__fixunssfsi+0x46>
    a5c0:	66 0f       	add	r22, r22
    a5c2:	77 1f       	adc	r23, r23
    a5c4:	88 1f       	adc	r24, r24
    a5c6:	99 1f       	adc	r25, r25
    a5c8:	1a f0       	brmi	.+6      	; 0xa5d0 <__fixunssfsi+0x22>
    a5ca:	ba 95       	dec	r27
    a5cc:	c9 f7       	brne	.-14     	; 0xa5c0 <__fixunssfsi+0x12>
    a5ce:	12 c0       	rjmp	.+36     	; 0xa5f4 <__fixunssfsi+0x46>
    a5d0:	b1 30       	cpi	r27, 0x01	; 1
    a5d2:	81 f0       	breq	.+32     	; 0xa5f4 <__fixunssfsi+0x46>
    a5d4:	c3 d0       	rcall	.+390    	; 0xa75c <__fp_zero>
    a5d6:	b1 e0       	ldi	r27, 0x01	; 1
    a5d8:	08 95       	ret
    a5da:	c0 c0       	rjmp	.+384    	; 0xa75c <__fp_zero>
    a5dc:	67 2f       	mov	r22, r23
    a5de:	78 2f       	mov	r23, r24
    a5e0:	88 27       	eor	r24, r24
    a5e2:	b8 5f       	subi	r27, 0xF8	; 248
    a5e4:	39 f0       	breq	.+14     	; 0xa5f4 <__fixunssfsi+0x46>
    a5e6:	b9 3f       	cpi	r27, 0xF9	; 249
    a5e8:	cc f3       	brlt	.-14     	; 0xa5dc <__fixunssfsi+0x2e>
    a5ea:	86 95       	lsr	r24
    a5ec:	77 95       	ror	r23
    a5ee:	67 95       	ror	r22
    a5f0:	b3 95       	inc	r27
    a5f2:	d9 f7       	brne	.-10     	; 0xa5ea <__fixunssfsi+0x3c>
    a5f4:	3e f4       	brtc	.+14     	; 0xa604 <__fixunssfsi+0x56>
    a5f6:	90 95       	com	r25
    a5f8:	80 95       	com	r24
    a5fa:	70 95       	com	r23
    a5fc:	61 95       	neg	r22
    a5fe:	7f 4f       	sbci	r23, 0xFF	; 255
    a600:	8f 4f       	sbci	r24, 0xFF	; 255
    a602:	9f 4f       	sbci	r25, 0xFF	; 255
    a604:	08 95       	ret

0000a606 <__floatunsisf>:
    a606:	e8 94       	clt
    a608:	09 c0       	rjmp	.+18     	; 0xa61c <__floatsisf+0x12>

0000a60a <__floatsisf>:
    a60a:	97 fb       	bst	r25, 7
    a60c:	3e f4       	brtc	.+14     	; 0xa61c <__floatsisf+0x12>
    a60e:	90 95       	com	r25
    a610:	80 95       	com	r24
    a612:	70 95       	com	r23
    a614:	61 95       	neg	r22
    a616:	7f 4f       	sbci	r23, 0xFF	; 255
    a618:	8f 4f       	sbci	r24, 0xFF	; 255
    a61a:	9f 4f       	sbci	r25, 0xFF	; 255
    a61c:	99 23       	and	r25, r25
    a61e:	a9 f0       	breq	.+42     	; 0xa64a <__floatsisf+0x40>
    a620:	f9 2f       	mov	r31, r25
    a622:	96 e9       	ldi	r25, 0x96	; 150
    a624:	bb 27       	eor	r27, r27
    a626:	93 95       	inc	r25
    a628:	f6 95       	lsr	r31
    a62a:	87 95       	ror	r24
    a62c:	77 95       	ror	r23
    a62e:	67 95       	ror	r22
    a630:	b7 95       	ror	r27
    a632:	f1 11       	cpse	r31, r1
    a634:	f8 cf       	rjmp	.-16     	; 0xa626 <__floatsisf+0x1c>
    a636:	fa f4       	brpl	.+62     	; 0xa676 <__floatsisf+0x6c>
    a638:	bb 0f       	add	r27, r27
    a63a:	11 f4       	brne	.+4      	; 0xa640 <__floatsisf+0x36>
    a63c:	60 ff       	sbrs	r22, 0
    a63e:	1b c0       	rjmp	.+54     	; 0xa676 <__floatsisf+0x6c>
    a640:	6f 5f       	subi	r22, 0xFF	; 255
    a642:	7f 4f       	sbci	r23, 0xFF	; 255
    a644:	8f 4f       	sbci	r24, 0xFF	; 255
    a646:	9f 4f       	sbci	r25, 0xFF	; 255
    a648:	16 c0       	rjmp	.+44     	; 0xa676 <__floatsisf+0x6c>
    a64a:	88 23       	and	r24, r24
    a64c:	11 f0       	breq	.+4      	; 0xa652 <__floatsisf+0x48>
    a64e:	96 e9       	ldi	r25, 0x96	; 150
    a650:	11 c0       	rjmp	.+34     	; 0xa674 <__floatsisf+0x6a>
    a652:	77 23       	and	r23, r23
    a654:	21 f0       	breq	.+8      	; 0xa65e <__floatsisf+0x54>
    a656:	9e e8       	ldi	r25, 0x8E	; 142
    a658:	87 2f       	mov	r24, r23
    a65a:	76 2f       	mov	r23, r22
    a65c:	05 c0       	rjmp	.+10     	; 0xa668 <__floatsisf+0x5e>
    a65e:	66 23       	and	r22, r22
    a660:	71 f0       	breq	.+28     	; 0xa67e <__floatsisf+0x74>
    a662:	96 e8       	ldi	r25, 0x86	; 134
    a664:	86 2f       	mov	r24, r22
    a666:	70 e0       	ldi	r23, 0x00	; 0
    a668:	60 e0       	ldi	r22, 0x00	; 0
    a66a:	2a f0       	brmi	.+10     	; 0xa676 <__floatsisf+0x6c>
    a66c:	9a 95       	dec	r25
    a66e:	66 0f       	add	r22, r22
    a670:	77 1f       	adc	r23, r23
    a672:	88 1f       	adc	r24, r24
    a674:	da f7       	brpl	.-10     	; 0xa66c <__floatsisf+0x62>
    a676:	88 0f       	add	r24, r24
    a678:	96 95       	lsr	r25
    a67a:	87 95       	ror	r24
    a67c:	97 f9       	bld	r25, 7
    a67e:	08 95       	ret

0000a680 <__fp_cmp>:
    a680:	99 0f       	add	r25, r25
    a682:	00 08       	sbc	r0, r0
    a684:	55 0f       	add	r21, r21
    a686:	aa 0b       	sbc	r26, r26
    a688:	e0 e8       	ldi	r30, 0x80	; 128
    a68a:	fe ef       	ldi	r31, 0xFE	; 254
    a68c:	16 16       	cp	r1, r22
    a68e:	17 06       	cpc	r1, r23
    a690:	e8 07       	cpc	r30, r24
    a692:	f9 07       	cpc	r31, r25
    a694:	c0 f0       	brcs	.+48     	; 0xa6c6 <__fp_cmp+0x46>
    a696:	12 16       	cp	r1, r18
    a698:	13 06       	cpc	r1, r19
    a69a:	e4 07       	cpc	r30, r20
    a69c:	f5 07       	cpc	r31, r21
    a69e:	98 f0       	brcs	.+38     	; 0xa6c6 <__fp_cmp+0x46>
    a6a0:	62 1b       	sub	r22, r18
    a6a2:	73 0b       	sbc	r23, r19
    a6a4:	84 0b       	sbc	r24, r20
    a6a6:	95 0b       	sbc	r25, r21
    a6a8:	39 f4       	brne	.+14     	; 0xa6b8 <__fp_cmp+0x38>
    a6aa:	0a 26       	eor	r0, r26
    a6ac:	61 f0       	breq	.+24     	; 0xa6c6 <__fp_cmp+0x46>
    a6ae:	23 2b       	or	r18, r19
    a6b0:	24 2b       	or	r18, r20
    a6b2:	25 2b       	or	r18, r21
    a6b4:	21 f4       	brne	.+8      	; 0xa6be <__fp_cmp+0x3e>
    a6b6:	08 95       	ret
    a6b8:	0a 26       	eor	r0, r26
    a6ba:	09 f4       	brne	.+2      	; 0xa6be <__fp_cmp+0x3e>
    a6bc:	a1 40       	sbci	r26, 0x01	; 1
    a6be:	a6 95       	lsr	r26
    a6c0:	8f ef       	ldi	r24, 0xFF	; 255
    a6c2:	81 1d       	adc	r24, r1
    a6c4:	81 1d       	adc	r24, r1
    a6c6:	08 95       	ret

0000a6c8 <__fp_inf>:
    a6c8:	97 f9       	bld	r25, 7
    a6ca:	9f 67       	ori	r25, 0x7F	; 127
    a6cc:	80 e8       	ldi	r24, 0x80	; 128
    a6ce:	70 e0       	ldi	r23, 0x00	; 0
    a6d0:	60 e0       	ldi	r22, 0x00	; 0
    a6d2:	08 95       	ret

0000a6d4 <__fp_nan>:
    a6d4:	9f ef       	ldi	r25, 0xFF	; 255
    a6d6:	80 ec       	ldi	r24, 0xC0	; 192
    a6d8:	08 95       	ret

0000a6da <__fp_pscA>:
    a6da:	00 24       	eor	r0, r0
    a6dc:	0a 94       	dec	r0
    a6de:	16 16       	cp	r1, r22
    a6e0:	17 06       	cpc	r1, r23
    a6e2:	18 06       	cpc	r1, r24
    a6e4:	09 06       	cpc	r0, r25
    a6e6:	08 95       	ret

0000a6e8 <__fp_pscB>:
    a6e8:	00 24       	eor	r0, r0
    a6ea:	0a 94       	dec	r0
    a6ec:	12 16       	cp	r1, r18
    a6ee:	13 06       	cpc	r1, r19
    a6f0:	14 06       	cpc	r1, r20
    a6f2:	05 06       	cpc	r0, r21
    a6f4:	08 95       	ret

0000a6f6 <__fp_round>:
    a6f6:	09 2e       	mov	r0, r25
    a6f8:	03 94       	inc	r0
    a6fa:	00 0c       	add	r0, r0
    a6fc:	11 f4       	brne	.+4      	; 0xa702 <__fp_round+0xc>
    a6fe:	88 23       	and	r24, r24
    a700:	52 f0       	brmi	.+20     	; 0xa716 <__fp_round+0x20>
    a702:	bb 0f       	add	r27, r27
    a704:	40 f4       	brcc	.+16     	; 0xa716 <__fp_round+0x20>
    a706:	bf 2b       	or	r27, r31
    a708:	11 f4       	brne	.+4      	; 0xa70e <__fp_round+0x18>
    a70a:	60 ff       	sbrs	r22, 0
    a70c:	04 c0       	rjmp	.+8      	; 0xa716 <__fp_round+0x20>
    a70e:	6f 5f       	subi	r22, 0xFF	; 255
    a710:	7f 4f       	sbci	r23, 0xFF	; 255
    a712:	8f 4f       	sbci	r24, 0xFF	; 255
    a714:	9f 4f       	sbci	r25, 0xFF	; 255
    a716:	08 95       	ret

0000a718 <__fp_split3>:
    a718:	57 fd       	sbrc	r21, 7
    a71a:	90 58       	subi	r25, 0x80	; 128
    a71c:	44 0f       	add	r20, r20
    a71e:	55 1f       	adc	r21, r21
    a720:	59 f0       	breq	.+22     	; 0xa738 <__fp_splitA+0x10>
    a722:	5f 3f       	cpi	r21, 0xFF	; 255
    a724:	71 f0       	breq	.+28     	; 0xa742 <__fp_splitA+0x1a>
    a726:	47 95       	ror	r20

0000a728 <__fp_splitA>:
    a728:	88 0f       	add	r24, r24
    a72a:	97 fb       	bst	r25, 7
    a72c:	99 1f       	adc	r25, r25
    a72e:	61 f0       	breq	.+24     	; 0xa748 <__fp_splitA+0x20>
    a730:	9f 3f       	cpi	r25, 0xFF	; 255
    a732:	79 f0       	breq	.+30     	; 0xa752 <__fp_splitA+0x2a>
    a734:	87 95       	ror	r24
    a736:	08 95       	ret
    a738:	12 16       	cp	r1, r18
    a73a:	13 06       	cpc	r1, r19
    a73c:	14 06       	cpc	r1, r20
    a73e:	55 1f       	adc	r21, r21
    a740:	f2 cf       	rjmp	.-28     	; 0xa726 <__fp_split3+0xe>
    a742:	46 95       	lsr	r20
    a744:	f1 df       	rcall	.-30     	; 0xa728 <__fp_splitA>
    a746:	08 c0       	rjmp	.+16     	; 0xa758 <__fp_splitA+0x30>
    a748:	16 16       	cp	r1, r22
    a74a:	17 06       	cpc	r1, r23
    a74c:	18 06       	cpc	r1, r24
    a74e:	99 1f       	adc	r25, r25
    a750:	f1 cf       	rjmp	.-30     	; 0xa734 <__fp_splitA+0xc>
    a752:	86 95       	lsr	r24
    a754:	71 05       	cpc	r23, r1
    a756:	61 05       	cpc	r22, r1
    a758:	08 94       	sec
    a75a:	08 95       	ret

0000a75c <__fp_zero>:
    a75c:	e8 94       	clt

0000a75e <__fp_szero>:
    a75e:	bb 27       	eor	r27, r27
    a760:	66 27       	eor	r22, r22
    a762:	77 27       	eor	r23, r23
    a764:	cb 01       	movw	r24, r22
    a766:	97 f9       	bld	r25, 7
    a768:	08 95       	ret

0000a76a <__gesf2>:
    a76a:	8a df       	rcall	.-236    	; 0xa680 <__fp_cmp>
    a76c:	08 f4       	brcc	.+2      	; 0xa770 <__gesf2+0x6>
    a76e:	8f ef       	ldi	r24, 0xFF	; 255
    a770:	08 95       	ret

0000a772 <__mulsf3>:
    a772:	0b d0       	rcall	.+22     	; 0xa78a <__mulsf3x>
    a774:	c0 cf       	rjmp	.-128    	; 0xa6f6 <__fp_round>
    a776:	b1 df       	rcall	.-158    	; 0xa6da <__fp_pscA>
    a778:	28 f0       	brcs	.+10     	; 0xa784 <__mulsf3+0x12>
    a77a:	b6 df       	rcall	.-148    	; 0xa6e8 <__fp_pscB>
    a77c:	18 f0       	brcs	.+6      	; 0xa784 <__mulsf3+0x12>
    a77e:	95 23       	and	r25, r21
    a780:	09 f0       	breq	.+2      	; 0xa784 <__mulsf3+0x12>
    a782:	a2 cf       	rjmp	.-188    	; 0xa6c8 <__fp_inf>
    a784:	a7 cf       	rjmp	.-178    	; 0xa6d4 <__fp_nan>
    a786:	11 24       	eor	r1, r1
    a788:	ea cf       	rjmp	.-44     	; 0xa75e <__fp_szero>

0000a78a <__mulsf3x>:
    a78a:	c6 df       	rcall	.-116    	; 0xa718 <__fp_split3>
    a78c:	a0 f3       	brcs	.-24     	; 0xa776 <__mulsf3+0x4>

0000a78e <__mulsf3_pse>:
    a78e:	95 9f       	mul	r25, r21
    a790:	d1 f3       	breq	.-12     	; 0xa786 <__mulsf3+0x14>
    a792:	95 0f       	add	r25, r21
    a794:	50 e0       	ldi	r21, 0x00	; 0
    a796:	55 1f       	adc	r21, r21
    a798:	62 9f       	mul	r22, r18
    a79a:	f0 01       	movw	r30, r0
    a79c:	72 9f       	mul	r23, r18
    a79e:	bb 27       	eor	r27, r27
    a7a0:	f0 0d       	add	r31, r0
    a7a2:	b1 1d       	adc	r27, r1
    a7a4:	63 9f       	mul	r22, r19
    a7a6:	aa 27       	eor	r26, r26
    a7a8:	f0 0d       	add	r31, r0
    a7aa:	b1 1d       	adc	r27, r1
    a7ac:	aa 1f       	adc	r26, r26
    a7ae:	64 9f       	mul	r22, r20
    a7b0:	66 27       	eor	r22, r22
    a7b2:	b0 0d       	add	r27, r0
    a7b4:	a1 1d       	adc	r26, r1
    a7b6:	66 1f       	adc	r22, r22
    a7b8:	82 9f       	mul	r24, r18
    a7ba:	22 27       	eor	r18, r18
    a7bc:	b0 0d       	add	r27, r0
    a7be:	a1 1d       	adc	r26, r1
    a7c0:	62 1f       	adc	r22, r18
    a7c2:	73 9f       	mul	r23, r19
    a7c4:	b0 0d       	add	r27, r0
    a7c6:	a1 1d       	adc	r26, r1
    a7c8:	62 1f       	adc	r22, r18
    a7ca:	83 9f       	mul	r24, r19
    a7cc:	a0 0d       	add	r26, r0
    a7ce:	61 1d       	adc	r22, r1
    a7d0:	22 1f       	adc	r18, r18
    a7d2:	74 9f       	mul	r23, r20
    a7d4:	33 27       	eor	r19, r19
    a7d6:	a0 0d       	add	r26, r0
    a7d8:	61 1d       	adc	r22, r1
    a7da:	23 1f       	adc	r18, r19
    a7dc:	84 9f       	mul	r24, r20
    a7de:	60 0d       	add	r22, r0
    a7e0:	21 1d       	adc	r18, r1
    a7e2:	82 2f       	mov	r24, r18
    a7e4:	76 2f       	mov	r23, r22
    a7e6:	6a 2f       	mov	r22, r26
    a7e8:	11 24       	eor	r1, r1
    a7ea:	9f 57       	subi	r25, 0x7F	; 127
    a7ec:	50 40       	sbci	r21, 0x00	; 0
    a7ee:	8a f0       	brmi	.+34     	; 0xa812 <__mulsf3_pse+0x84>
    a7f0:	e1 f0       	breq	.+56     	; 0xa82a <__mulsf3_pse+0x9c>
    a7f2:	88 23       	and	r24, r24
    a7f4:	4a f0       	brmi	.+18     	; 0xa808 <__mulsf3_pse+0x7a>
    a7f6:	ee 0f       	add	r30, r30
    a7f8:	ff 1f       	adc	r31, r31
    a7fa:	bb 1f       	adc	r27, r27
    a7fc:	66 1f       	adc	r22, r22
    a7fe:	77 1f       	adc	r23, r23
    a800:	88 1f       	adc	r24, r24
    a802:	91 50       	subi	r25, 0x01	; 1
    a804:	50 40       	sbci	r21, 0x00	; 0
    a806:	a9 f7       	brne	.-22     	; 0xa7f2 <__mulsf3_pse+0x64>
    a808:	9e 3f       	cpi	r25, 0xFE	; 254
    a80a:	51 05       	cpc	r21, r1
    a80c:	70 f0       	brcs	.+28     	; 0xa82a <__mulsf3_pse+0x9c>
    a80e:	5c cf       	rjmp	.-328    	; 0xa6c8 <__fp_inf>
    a810:	a6 cf       	rjmp	.-180    	; 0xa75e <__fp_szero>
    a812:	5f 3f       	cpi	r21, 0xFF	; 255
    a814:	ec f3       	brlt	.-6      	; 0xa810 <__mulsf3_pse+0x82>
    a816:	98 3e       	cpi	r25, 0xE8	; 232
    a818:	dc f3       	brlt	.-10     	; 0xa810 <__mulsf3_pse+0x82>
    a81a:	86 95       	lsr	r24
    a81c:	77 95       	ror	r23
    a81e:	67 95       	ror	r22
    a820:	b7 95       	ror	r27
    a822:	f7 95       	ror	r31
    a824:	e7 95       	ror	r30
    a826:	9f 5f       	subi	r25, 0xFF	; 255
    a828:	c1 f7       	brne	.-16     	; 0xa81a <__mulsf3_pse+0x8c>
    a82a:	fe 2b       	or	r31, r30
    a82c:	88 0f       	add	r24, r24
    a82e:	91 1d       	adc	r25, r1
    a830:	96 95       	lsr	r25
    a832:	87 95       	ror	r24
    a834:	97 f9       	bld	r25, 7
    a836:	08 95       	ret

0000a838 <_exit>:
    a838:	f8 94       	cli

0000a83a <__stop_program>:
    a83a:	ff cf       	rjmp	.-2      	; 0xa83a <__stop_program>
